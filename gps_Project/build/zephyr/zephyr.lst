
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_start>:
   10000:	20018420 	.word	0x20018420
   10004:	00013f61 	.word	0x00013f61
   10008:	0001f9e7 	.word	0x0001f9e7
   1000c:	00013f91 	.word	0x00013f91
   10010:	00013f91 	.word	0x00013f91
   10014:	00013f91 	.word	0x00013f91
   10018:	00013f91 	.word	0x00013f91
   1001c:	00013f91 	.word	0x00013f91
	...
   1002c:	00013d59 	.word	0x00013d59
   10030:	00013f91 	.word	0x00013f91
   10034:	00000000 	.word	0x00000000
   10038:	00013cc1 	.word	0x00013cc1
   1003c:	0001f8dd 	.word	0x0001f8dd

00010040 <_irq_vector_table>:
   10040:	00013f21 00013f21 00013f21 00013f21     !?..!?..!?..!?..
   10050:	00013f21 00013f21 00013f21 00013f21     !?..!?..!?..!?..
   10060:	00013f21 00013f21 00013f21 00013f21     !?..!?..!?..!?..
   10070:	00013f21 00013f21 00013f21 00013f21     !?..!?..!?..!?..
   10080:	00013f21 00013f21 00013f21 00013f21     !?..!?..!?..!?..
   10090:	00013f21 00013f21 00013f21 00013f21     !?..!?..!?..!?..
   100a0:	00013f21 00013f21 00013f21 00013f21     !?..!?..!?..!?..
   100b0:	0001532d 00020211 00013f21 00013f21     -S......!?..!?..
   100c0:	00013f21 00013f21 00013f21 00013f21     !?..!?..!?..!?..
   100d0:	00013f21 00013f21 00013f21 00013f21     !?..!?..!?..!?..
   100e0:	00013f21 00013f21 00013f21 00013f21     !?..!?..!?..!?..
   100f0:	00013f21 00013f21 00013f21 00013f21     !?..!?..!?..!?..
   10100:	00013f21 00013f21 00013f21 00013f21     !?..!?..!?..!?..
   10110:	00013f21 00013f21 00013f21 00013f21     !?..!?..!?..!?..
   10120:	00013f21 00013f21 00013f21 00013f21     !?..!?..!?..!?..
   10130:	00013f21 00013f21 00013f21 00013f21     !?..!?..!?..!?..
   10140:	00013f21                                !?..

00010144 <_vector_end>:
	...

00010200 <m_firmware_info>:
   10200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   10210:	000152a0 00000001 00010000 00010000     .R..............
   10220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

00010240 <__aeabi_drsub>:
   10240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   10244:	e002      	b.n	1024c <__adddf3>
   10246:	bf00      	nop

00010248 <__aeabi_dsub>:
   10248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001024c <__adddf3>:
   1024c:	b530      	push	{r4, r5, lr}
   1024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   10252:	ea4f 0543 	mov.w	r5, r3, lsl #1
   10256:	ea94 0f05 	teq	r4, r5
   1025a:	bf08      	it	eq
   1025c:	ea90 0f02 	teqeq	r0, r2
   10260:	bf1f      	itttt	ne
   10262:	ea54 0c00 	orrsne.w	ip, r4, r0
   10266:	ea55 0c02 	orrsne.w	ip, r5, r2
   1026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10272:	f000 80e2 	beq.w	1043a <__adddf3+0x1ee>
   10276:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1027e:	bfb8      	it	lt
   10280:	426d      	neglt	r5, r5
   10282:	dd0c      	ble.n	1029e <__adddf3+0x52>
   10284:	442c      	add	r4, r5
   10286:	ea80 0202 	eor.w	r2, r0, r2
   1028a:	ea81 0303 	eor.w	r3, r1, r3
   1028e:	ea82 0000 	eor.w	r0, r2, r0
   10292:	ea83 0101 	eor.w	r1, r3, r1
   10296:	ea80 0202 	eor.w	r2, r0, r2
   1029a:	ea81 0303 	eor.w	r3, r1, r3
   1029e:	2d36      	cmp	r5, #54	; 0x36
   102a0:	bf88      	it	hi
   102a2:	bd30      	pophi	{r4, r5, pc}
   102a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   102a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   102ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   102b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   102b4:	d002      	beq.n	102bc <__adddf3+0x70>
   102b6:	4240      	negs	r0, r0
   102b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   102bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   102c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   102c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   102c8:	d002      	beq.n	102d0 <__adddf3+0x84>
   102ca:	4252      	negs	r2, r2
   102cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   102d0:	ea94 0f05 	teq	r4, r5
   102d4:	f000 80a7 	beq.w	10426 <__adddf3+0x1da>
   102d8:	f1a4 0401 	sub.w	r4, r4, #1
   102dc:	f1d5 0e20 	rsbs	lr, r5, #32
   102e0:	db0d      	blt.n	102fe <__adddf3+0xb2>
   102e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   102e6:	fa22 f205 	lsr.w	r2, r2, r5
   102ea:	1880      	adds	r0, r0, r2
   102ec:	f141 0100 	adc.w	r1, r1, #0
   102f0:	fa03 f20e 	lsl.w	r2, r3, lr
   102f4:	1880      	adds	r0, r0, r2
   102f6:	fa43 f305 	asr.w	r3, r3, r5
   102fa:	4159      	adcs	r1, r3
   102fc:	e00e      	b.n	1031c <__adddf3+0xd0>
   102fe:	f1a5 0520 	sub.w	r5, r5, #32
   10302:	f10e 0e20 	add.w	lr, lr, #32
   10306:	2a01      	cmp	r2, #1
   10308:	fa03 fc0e 	lsl.w	ip, r3, lr
   1030c:	bf28      	it	cs
   1030e:	f04c 0c02 	orrcs.w	ip, ip, #2
   10312:	fa43 f305 	asr.w	r3, r3, r5
   10316:	18c0      	adds	r0, r0, r3
   10318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10320:	d507      	bpl.n	10332 <__adddf3+0xe6>
   10322:	f04f 0e00 	mov.w	lr, #0
   10326:	f1dc 0c00 	rsbs	ip, ip, #0
   1032a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1032e:	eb6e 0101 	sbc.w	r1, lr, r1
   10332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   10336:	d31b      	bcc.n	10370 <__adddf3+0x124>
   10338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1033c:	d30c      	bcc.n	10358 <__adddf3+0x10c>
   1033e:	0849      	lsrs	r1, r1, #1
   10340:	ea5f 0030 	movs.w	r0, r0, rrx
   10344:	ea4f 0c3c 	mov.w	ip, ip, rrx
   10348:	f104 0401 	add.w	r4, r4, #1
   1034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   10350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   10354:	f080 809a 	bcs.w	1048c <__adddf3+0x240>
   10358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1035c:	bf08      	it	eq
   1035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10362:	f150 0000 	adcs.w	r0, r0, #0
   10366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1036a:	ea41 0105 	orr.w	r1, r1, r5
   1036e:	bd30      	pop	{r4, r5, pc}
   10370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   10374:	4140      	adcs	r0, r0
   10376:	eb41 0101 	adc.w	r1, r1, r1
   1037a:	3c01      	subs	r4, #1
   1037c:	bf28      	it	cs
   1037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   10382:	d2e9      	bcs.n	10358 <__adddf3+0x10c>
   10384:	f091 0f00 	teq	r1, #0
   10388:	bf04      	itt	eq
   1038a:	4601      	moveq	r1, r0
   1038c:	2000      	moveq	r0, #0
   1038e:	fab1 f381 	clz	r3, r1
   10392:	bf08      	it	eq
   10394:	3320      	addeq	r3, #32
   10396:	f1a3 030b 	sub.w	r3, r3, #11
   1039a:	f1b3 0220 	subs.w	r2, r3, #32
   1039e:	da0c      	bge.n	103ba <__adddf3+0x16e>
   103a0:	320c      	adds	r2, #12
   103a2:	dd08      	ble.n	103b6 <__adddf3+0x16a>
   103a4:	f102 0c14 	add.w	ip, r2, #20
   103a8:	f1c2 020c 	rsb	r2, r2, #12
   103ac:	fa01 f00c 	lsl.w	r0, r1, ip
   103b0:	fa21 f102 	lsr.w	r1, r1, r2
   103b4:	e00c      	b.n	103d0 <__adddf3+0x184>
   103b6:	f102 0214 	add.w	r2, r2, #20
   103ba:	bfd8      	it	le
   103bc:	f1c2 0c20 	rsble	ip, r2, #32
   103c0:	fa01 f102 	lsl.w	r1, r1, r2
   103c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   103c8:	bfdc      	itt	le
   103ca:	ea41 010c 	orrle.w	r1, r1, ip
   103ce:	4090      	lslle	r0, r2
   103d0:	1ae4      	subs	r4, r4, r3
   103d2:	bfa2      	ittt	ge
   103d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   103d8:	4329      	orrge	r1, r5
   103da:	bd30      	popge	{r4, r5, pc}
   103dc:	ea6f 0404 	mvn.w	r4, r4
   103e0:	3c1f      	subs	r4, #31
   103e2:	da1c      	bge.n	1041e <__adddf3+0x1d2>
   103e4:	340c      	adds	r4, #12
   103e6:	dc0e      	bgt.n	10406 <__adddf3+0x1ba>
   103e8:	f104 0414 	add.w	r4, r4, #20
   103ec:	f1c4 0220 	rsb	r2, r4, #32
   103f0:	fa20 f004 	lsr.w	r0, r0, r4
   103f4:	fa01 f302 	lsl.w	r3, r1, r2
   103f8:	ea40 0003 	orr.w	r0, r0, r3
   103fc:	fa21 f304 	lsr.w	r3, r1, r4
   10400:	ea45 0103 	orr.w	r1, r5, r3
   10404:	bd30      	pop	{r4, r5, pc}
   10406:	f1c4 040c 	rsb	r4, r4, #12
   1040a:	f1c4 0220 	rsb	r2, r4, #32
   1040e:	fa20 f002 	lsr.w	r0, r0, r2
   10412:	fa01 f304 	lsl.w	r3, r1, r4
   10416:	ea40 0003 	orr.w	r0, r0, r3
   1041a:	4629      	mov	r1, r5
   1041c:	bd30      	pop	{r4, r5, pc}
   1041e:	fa21 f004 	lsr.w	r0, r1, r4
   10422:	4629      	mov	r1, r5
   10424:	bd30      	pop	{r4, r5, pc}
   10426:	f094 0f00 	teq	r4, #0
   1042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1042e:	bf06      	itte	eq
   10430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   10434:	3401      	addeq	r4, #1
   10436:	3d01      	subne	r5, #1
   10438:	e74e      	b.n	102d8 <__adddf3+0x8c>
   1043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1043e:	bf18      	it	ne
   10440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   10444:	d029      	beq.n	1049a <__adddf3+0x24e>
   10446:	ea94 0f05 	teq	r4, r5
   1044a:	bf08      	it	eq
   1044c:	ea90 0f02 	teqeq	r0, r2
   10450:	d005      	beq.n	1045e <__adddf3+0x212>
   10452:	ea54 0c00 	orrs.w	ip, r4, r0
   10456:	bf04      	itt	eq
   10458:	4619      	moveq	r1, r3
   1045a:	4610      	moveq	r0, r2
   1045c:	bd30      	pop	{r4, r5, pc}
   1045e:	ea91 0f03 	teq	r1, r3
   10462:	bf1e      	ittt	ne
   10464:	2100      	movne	r1, #0
   10466:	2000      	movne	r0, #0
   10468:	bd30      	popne	{r4, r5, pc}
   1046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1046e:	d105      	bne.n	1047c <__adddf3+0x230>
   10470:	0040      	lsls	r0, r0, #1
   10472:	4149      	adcs	r1, r1
   10474:	bf28      	it	cs
   10476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1047a:	bd30      	pop	{r4, r5, pc}
   1047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   10480:	bf3c      	itt	cc
   10482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   10486:	bd30      	popcc	{r4, r5, pc}
   10488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   10490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   10494:	f04f 0000 	mov.w	r0, #0
   10498:	bd30      	pop	{r4, r5, pc}
   1049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1049e:	bf1a      	itte	ne
   104a0:	4619      	movne	r1, r3
   104a2:	4610      	movne	r0, r2
   104a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   104a8:	bf1c      	itt	ne
   104aa:	460b      	movne	r3, r1
   104ac:	4602      	movne	r2, r0
   104ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   104b2:	bf06      	itte	eq
   104b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   104b8:	ea91 0f03 	teqeq	r1, r3
   104bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   104c0:	bd30      	pop	{r4, r5, pc}
   104c2:	bf00      	nop

000104c4 <__aeabi_ui2d>:
   104c4:	f090 0f00 	teq	r0, #0
   104c8:	bf04      	itt	eq
   104ca:	2100      	moveq	r1, #0
   104cc:	4770      	bxeq	lr
   104ce:	b530      	push	{r4, r5, lr}
   104d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   104d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   104d8:	f04f 0500 	mov.w	r5, #0
   104dc:	f04f 0100 	mov.w	r1, #0
   104e0:	e750      	b.n	10384 <__adddf3+0x138>
   104e2:	bf00      	nop

000104e4 <__aeabi_i2d>:
   104e4:	f090 0f00 	teq	r0, #0
   104e8:	bf04      	itt	eq
   104ea:	2100      	moveq	r1, #0
   104ec:	4770      	bxeq	lr
   104ee:	b530      	push	{r4, r5, lr}
   104f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   104f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   104f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   104fc:	bf48      	it	mi
   104fe:	4240      	negmi	r0, r0
   10500:	f04f 0100 	mov.w	r1, #0
   10504:	e73e      	b.n	10384 <__adddf3+0x138>
   10506:	bf00      	nop

00010508 <__aeabi_f2d>:
   10508:	0042      	lsls	r2, r0, #1
   1050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1050e:	ea4f 0131 	mov.w	r1, r1, rrx
   10512:	ea4f 7002 	mov.w	r0, r2, lsl #28
   10516:	bf1f      	itttt	ne
   10518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   10520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   10524:	4770      	bxne	lr
   10526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1052a:	bf08      	it	eq
   1052c:	4770      	bxeq	lr
   1052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   10532:	bf04      	itt	eq
   10534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   10538:	4770      	bxeq	lr
   1053a:	b530      	push	{r4, r5, lr}
   1053c:	f44f 7460 	mov.w	r4, #896	; 0x380
   10540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   10544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   10548:	e71c      	b.n	10384 <__adddf3+0x138>
   1054a:	bf00      	nop

0001054c <__aeabi_ul2d>:
   1054c:	ea50 0201 	orrs.w	r2, r0, r1
   10550:	bf08      	it	eq
   10552:	4770      	bxeq	lr
   10554:	b530      	push	{r4, r5, lr}
   10556:	f04f 0500 	mov.w	r5, #0
   1055a:	e00a      	b.n	10572 <__aeabi_l2d+0x16>

0001055c <__aeabi_l2d>:
   1055c:	ea50 0201 	orrs.w	r2, r0, r1
   10560:	bf08      	it	eq
   10562:	4770      	bxeq	lr
   10564:	b530      	push	{r4, r5, lr}
   10566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1056a:	d502      	bpl.n	10572 <__aeabi_l2d+0x16>
   1056c:	4240      	negs	r0, r0
   1056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10572:	f44f 6480 	mov.w	r4, #1024	; 0x400
   10576:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1057e:	f43f aed8 	beq.w	10332 <__adddf3+0xe6>
   10582:	f04f 0203 	mov.w	r2, #3
   10586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1058a:	bf18      	it	ne
   1058c:	3203      	addne	r2, #3
   1058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   10592:	bf18      	it	ne
   10594:	3203      	addne	r2, #3
   10596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1059a:	f1c2 0320 	rsb	r3, r2, #32
   1059e:	fa00 fc03 	lsl.w	ip, r0, r3
   105a2:	fa20 f002 	lsr.w	r0, r0, r2
   105a6:	fa01 fe03 	lsl.w	lr, r1, r3
   105aa:	ea40 000e 	orr.w	r0, r0, lr
   105ae:	fa21 f102 	lsr.w	r1, r1, r2
   105b2:	4414      	add	r4, r2
   105b4:	e6bd      	b.n	10332 <__adddf3+0xe6>
   105b6:	bf00      	nop

000105b8 <__aeabi_dmul>:
   105b8:	b570      	push	{r4, r5, r6, lr}
   105ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   105be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   105c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   105c6:	bf1d      	ittte	ne
   105c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   105cc:	ea94 0f0c 	teqne	r4, ip
   105d0:	ea95 0f0c 	teqne	r5, ip
   105d4:	f000 f8de 	bleq	10794 <__aeabi_dmul+0x1dc>
   105d8:	442c      	add	r4, r5
   105da:	ea81 0603 	eor.w	r6, r1, r3
   105de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   105e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   105e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   105ea:	bf18      	it	ne
   105ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   105f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   105f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   105f8:	d038      	beq.n	1066c <__aeabi_dmul+0xb4>
   105fa:	fba0 ce02 	umull	ip, lr, r0, r2
   105fe:	f04f 0500 	mov.w	r5, #0
   10602:	fbe1 e502 	umlal	lr, r5, r1, r2
   10606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1060a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1060e:	f04f 0600 	mov.w	r6, #0
   10612:	fbe1 5603 	umlal	r5, r6, r1, r3
   10616:	f09c 0f00 	teq	ip, #0
   1061a:	bf18      	it	ne
   1061c:	f04e 0e01 	orrne.w	lr, lr, #1
   10620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   10624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   10628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1062c:	d204      	bcs.n	10638 <__aeabi_dmul+0x80>
   1062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   10632:	416d      	adcs	r5, r5
   10634:	eb46 0606 	adc.w	r6, r6, r6
   10638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   10640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   10644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   10648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   10650:	bf88      	it	hi
   10652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10656:	d81e      	bhi.n	10696 <__aeabi_dmul+0xde>
   10658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1065c:	bf08      	it	eq
   1065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   10662:	f150 0000 	adcs.w	r0, r0, #0
   10666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1066a:	bd70      	pop	{r4, r5, r6, pc}
   1066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   10670:	ea46 0101 	orr.w	r1, r6, r1
   10674:	ea40 0002 	orr.w	r0, r0, r2
   10678:	ea81 0103 	eor.w	r1, r1, r3
   1067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   10680:	bfc2      	ittt	gt
   10682:	ebd4 050c 	rsbsgt	r5, r4, ip
   10686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1068a:	bd70      	popgt	{r4, r5, r6, pc}
   1068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10690:	f04f 0e00 	mov.w	lr, #0
   10694:	3c01      	subs	r4, #1
   10696:	f300 80ab 	bgt.w	107f0 <__aeabi_dmul+0x238>
   1069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1069e:	bfde      	ittt	le
   106a0:	2000      	movle	r0, #0
   106a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   106a6:	bd70      	pople	{r4, r5, r6, pc}
   106a8:	f1c4 0400 	rsb	r4, r4, #0
   106ac:	3c20      	subs	r4, #32
   106ae:	da35      	bge.n	1071c <__aeabi_dmul+0x164>
   106b0:	340c      	adds	r4, #12
   106b2:	dc1b      	bgt.n	106ec <__aeabi_dmul+0x134>
   106b4:	f104 0414 	add.w	r4, r4, #20
   106b8:	f1c4 0520 	rsb	r5, r4, #32
   106bc:	fa00 f305 	lsl.w	r3, r0, r5
   106c0:	fa20 f004 	lsr.w	r0, r0, r4
   106c4:	fa01 f205 	lsl.w	r2, r1, r5
   106c8:	ea40 0002 	orr.w	r0, r0, r2
   106cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   106d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   106d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   106d8:	fa21 f604 	lsr.w	r6, r1, r4
   106dc:	eb42 0106 	adc.w	r1, r2, r6
   106e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   106e4:	bf08      	it	eq
   106e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   106ea:	bd70      	pop	{r4, r5, r6, pc}
   106ec:	f1c4 040c 	rsb	r4, r4, #12
   106f0:	f1c4 0520 	rsb	r5, r4, #32
   106f4:	fa00 f304 	lsl.w	r3, r0, r4
   106f8:	fa20 f005 	lsr.w	r0, r0, r5
   106fc:	fa01 f204 	lsl.w	r2, r1, r4
   10700:	ea40 0002 	orr.w	r0, r0, r2
   10704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1070c:	f141 0100 	adc.w	r1, r1, #0
   10710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10714:	bf08      	it	eq
   10716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1071a:	bd70      	pop	{r4, r5, r6, pc}
   1071c:	f1c4 0520 	rsb	r5, r4, #32
   10720:	fa00 f205 	lsl.w	r2, r0, r5
   10724:	ea4e 0e02 	orr.w	lr, lr, r2
   10728:	fa20 f304 	lsr.w	r3, r0, r4
   1072c:	fa01 f205 	lsl.w	r2, r1, r5
   10730:	ea43 0302 	orr.w	r3, r3, r2
   10734:	fa21 f004 	lsr.w	r0, r1, r4
   10738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1073c:	fa21 f204 	lsr.w	r2, r1, r4
   10740:	ea20 0002 	bic.w	r0, r0, r2
   10744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   10748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1074c:	bf08      	it	eq
   1074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   10752:	bd70      	pop	{r4, r5, r6, pc}
   10754:	f094 0f00 	teq	r4, #0
   10758:	d10f      	bne.n	1077a <__aeabi_dmul+0x1c2>
   1075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1075e:	0040      	lsls	r0, r0, #1
   10760:	eb41 0101 	adc.w	r1, r1, r1
   10764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10768:	bf08      	it	eq
   1076a:	3c01      	subeq	r4, #1
   1076c:	d0f7      	beq.n	1075e <__aeabi_dmul+0x1a6>
   1076e:	ea41 0106 	orr.w	r1, r1, r6
   10772:	f095 0f00 	teq	r5, #0
   10776:	bf18      	it	ne
   10778:	4770      	bxne	lr
   1077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1077e:	0052      	lsls	r2, r2, #1
   10780:	eb43 0303 	adc.w	r3, r3, r3
   10784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   10788:	bf08      	it	eq
   1078a:	3d01      	subeq	r5, #1
   1078c:	d0f7      	beq.n	1077e <__aeabi_dmul+0x1c6>
   1078e:	ea43 0306 	orr.w	r3, r3, r6
   10792:	4770      	bx	lr
   10794:	ea94 0f0c 	teq	r4, ip
   10798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1079c:	bf18      	it	ne
   1079e:	ea95 0f0c 	teqne	r5, ip
   107a2:	d00c      	beq.n	107be <__aeabi_dmul+0x206>
   107a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   107a8:	bf18      	it	ne
   107aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   107ae:	d1d1      	bne.n	10754 <__aeabi_dmul+0x19c>
   107b0:	ea81 0103 	eor.w	r1, r1, r3
   107b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   107b8:	f04f 0000 	mov.w	r0, #0
   107bc:	bd70      	pop	{r4, r5, r6, pc}
   107be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   107c2:	bf06      	itte	eq
   107c4:	4610      	moveq	r0, r2
   107c6:	4619      	moveq	r1, r3
   107c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   107cc:	d019      	beq.n	10802 <__aeabi_dmul+0x24a>
   107ce:	ea94 0f0c 	teq	r4, ip
   107d2:	d102      	bne.n	107da <__aeabi_dmul+0x222>
   107d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   107d8:	d113      	bne.n	10802 <__aeabi_dmul+0x24a>
   107da:	ea95 0f0c 	teq	r5, ip
   107de:	d105      	bne.n	107ec <__aeabi_dmul+0x234>
   107e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   107e4:	bf1c      	itt	ne
   107e6:	4610      	movne	r0, r2
   107e8:	4619      	movne	r1, r3
   107ea:	d10a      	bne.n	10802 <__aeabi_dmul+0x24a>
   107ec:	ea81 0103 	eor.w	r1, r1, r3
   107f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   107f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   107f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   107fc:	f04f 0000 	mov.w	r0, #0
   10800:	bd70      	pop	{r4, r5, r6, pc}
   10802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   10806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1080a:	bd70      	pop	{r4, r5, r6, pc}

0001080c <__aeabi_ddiv>:
   1080c:	b570      	push	{r4, r5, r6, lr}
   1080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   10816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1081a:	bf1d      	ittte	ne
   1081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   10820:	ea94 0f0c 	teqne	r4, ip
   10824:	ea95 0f0c 	teqne	r5, ip
   10828:	f000 f8a7 	bleq	1097a <__aeabi_ddiv+0x16e>
   1082c:	eba4 0405 	sub.w	r4, r4, r5
   10830:	ea81 0e03 	eor.w	lr, r1, r3
   10834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   10838:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1083c:	f000 8088 	beq.w	10950 <__aeabi_ddiv+0x144>
   10840:	ea4f 3303 	mov.w	r3, r3, lsl #12
   10844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   10848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   10850:	ea4f 2202 	mov.w	r2, r2, lsl #8
   10854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   10858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   10860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   10864:	429d      	cmp	r5, r3
   10866:	bf08      	it	eq
   10868:	4296      	cmpeq	r6, r2
   1086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   10872:	d202      	bcs.n	1087a <__aeabi_ddiv+0x6e>
   10874:	085b      	lsrs	r3, r3, #1
   10876:	ea4f 0232 	mov.w	r2, r2, rrx
   1087a:	1ab6      	subs	r6, r6, r2
   1087c:	eb65 0503 	sbc.w	r5, r5, r3
   10880:	085b      	lsrs	r3, r3, #1
   10882:	ea4f 0232 	mov.w	r2, r2, rrx
   10886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1088e:	ebb6 0e02 	subs.w	lr, r6, r2
   10892:	eb75 0e03 	sbcs.w	lr, r5, r3
   10896:	bf22      	ittt	cs
   10898:	1ab6      	subcs	r6, r6, r2
   1089a:	4675      	movcs	r5, lr
   1089c:	ea40 000c 	orrcs.w	r0, r0, ip
   108a0:	085b      	lsrs	r3, r3, #1
   108a2:	ea4f 0232 	mov.w	r2, r2, rrx
   108a6:	ebb6 0e02 	subs.w	lr, r6, r2
   108aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   108ae:	bf22      	ittt	cs
   108b0:	1ab6      	subcs	r6, r6, r2
   108b2:	4675      	movcs	r5, lr
   108b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   108b8:	085b      	lsrs	r3, r3, #1
   108ba:	ea4f 0232 	mov.w	r2, r2, rrx
   108be:	ebb6 0e02 	subs.w	lr, r6, r2
   108c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   108c6:	bf22      	ittt	cs
   108c8:	1ab6      	subcs	r6, r6, r2
   108ca:	4675      	movcs	r5, lr
   108cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   108d0:	085b      	lsrs	r3, r3, #1
   108d2:	ea4f 0232 	mov.w	r2, r2, rrx
   108d6:	ebb6 0e02 	subs.w	lr, r6, r2
   108da:	eb75 0e03 	sbcs.w	lr, r5, r3
   108de:	bf22      	ittt	cs
   108e0:	1ab6      	subcs	r6, r6, r2
   108e2:	4675      	movcs	r5, lr
   108e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   108e8:	ea55 0e06 	orrs.w	lr, r5, r6
   108ec:	d018      	beq.n	10920 <__aeabi_ddiv+0x114>
   108ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   108f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   108f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   108fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   108fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   10902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   10906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1090a:	d1c0      	bne.n	1088e <__aeabi_ddiv+0x82>
   1090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10910:	d10b      	bne.n	1092a <__aeabi_ddiv+0x11e>
   10912:	ea41 0100 	orr.w	r1, r1, r0
   10916:	f04f 0000 	mov.w	r0, #0
   1091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1091e:	e7b6      	b.n	1088e <__aeabi_ddiv+0x82>
   10920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10924:	bf04      	itt	eq
   10926:	4301      	orreq	r1, r0
   10928:	2000      	moveq	r0, #0
   1092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1092e:	bf88      	it	hi
   10930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10934:	f63f aeaf 	bhi.w	10696 <__aeabi_dmul+0xde>
   10938:	ebb5 0c03 	subs.w	ip, r5, r3
   1093c:	bf04      	itt	eq
   1093e:	ebb6 0c02 	subseq.w	ip, r6, r2
   10942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   10946:	f150 0000 	adcs.w	r0, r0, #0
   1094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1094e:	bd70      	pop	{r4, r5, r6, pc}
   10950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   10954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   10958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1095c:	bfc2      	ittt	gt
   1095e:	ebd4 050c 	rsbsgt	r5, r4, ip
   10962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   10966:	bd70      	popgt	{r4, r5, r6, pc}
   10968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1096c:	f04f 0e00 	mov.w	lr, #0
   10970:	3c01      	subs	r4, #1
   10972:	e690      	b.n	10696 <__aeabi_dmul+0xde>
   10974:	ea45 0e06 	orr.w	lr, r5, r6
   10978:	e68d      	b.n	10696 <__aeabi_dmul+0xde>
   1097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1097e:	ea94 0f0c 	teq	r4, ip
   10982:	bf08      	it	eq
   10984:	ea95 0f0c 	teqeq	r5, ip
   10988:	f43f af3b 	beq.w	10802 <__aeabi_dmul+0x24a>
   1098c:	ea94 0f0c 	teq	r4, ip
   10990:	d10a      	bne.n	109a8 <__aeabi_ddiv+0x19c>
   10992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   10996:	f47f af34 	bne.w	10802 <__aeabi_dmul+0x24a>
   1099a:	ea95 0f0c 	teq	r5, ip
   1099e:	f47f af25 	bne.w	107ec <__aeabi_dmul+0x234>
   109a2:	4610      	mov	r0, r2
   109a4:	4619      	mov	r1, r3
   109a6:	e72c      	b.n	10802 <__aeabi_dmul+0x24a>
   109a8:	ea95 0f0c 	teq	r5, ip
   109ac:	d106      	bne.n	109bc <__aeabi_ddiv+0x1b0>
   109ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   109b2:	f43f aefd 	beq.w	107b0 <__aeabi_dmul+0x1f8>
   109b6:	4610      	mov	r0, r2
   109b8:	4619      	mov	r1, r3
   109ba:	e722      	b.n	10802 <__aeabi_dmul+0x24a>
   109bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   109c0:	bf18      	it	ne
   109c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   109c6:	f47f aec5 	bne.w	10754 <__aeabi_dmul+0x19c>
   109ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   109ce:	f47f af0d 	bne.w	107ec <__aeabi_dmul+0x234>
   109d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   109d6:	f47f aeeb 	bne.w	107b0 <__aeabi_dmul+0x1f8>
   109da:	e712      	b.n	10802 <__aeabi_dmul+0x24a>

000109dc <__gedf2>:
   109dc:	f04f 3cff 	mov.w	ip, #4294967295
   109e0:	e006      	b.n	109f0 <__cmpdf2+0x4>
   109e2:	bf00      	nop

000109e4 <__ledf2>:
   109e4:	f04f 0c01 	mov.w	ip, #1
   109e8:	e002      	b.n	109f0 <__cmpdf2+0x4>
   109ea:	bf00      	nop

000109ec <__cmpdf2>:
   109ec:	f04f 0c01 	mov.w	ip, #1
   109f0:	f84d cd04 	str.w	ip, [sp, #-4]!
   109f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   109f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   109fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10a00:	bf18      	it	ne
   10a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   10a06:	d01b      	beq.n	10a40 <__cmpdf2+0x54>
   10a08:	b001      	add	sp, #4
   10a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   10a0e:	bf0c      	ite	eq
   10a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   10a14:	ea91 0f03 	teqne	r1, r3
   10a18:	bf02      	ittt	eq
   10a1a:	ea90 0f02 	teqeq	r0, r2
   10a1e:	2000      	moveq	r0, #0
   10a20:	4770      	bxeq	lr
   10a22:	f110 0f00 	cmn.w	r0, #0
   10a26:	ea91 0f03 	teq	r1, r3
   10a2a:	bf58      	it	pl
   10a2c:	4299      	cmppl	r1, r3
   10a2e:	bf08      	it	eq
   10a30:	4290      	cmpeq	r0, r2
   10a32:	bf2c      	ite	cs
   10a34:	17d8      	asrcs	r0, r3, #31
   10a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   10a3a:	f040 0001 	orr.w	r0, r0, #1
   10a3e:	4770      	bx	lr
   10a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10a48:	d102      	bne.n	10a50 <__cmpdf2+0x64>
   10a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   10a4e:	d107      	bne.n	10a60 <__cmpdf2+0x74>
   10a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10a58:	d1d6      	bne.n	10a08 <__cmpdf2+0x1c>
   10a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   10a5e:	d0d3      	beq.n	10a08 <__cmpdf2+0x1c>
   10a60:	f85d 0b04 	ldr.w	r0, [sp], #4
   10a64:	4770      	bx	lr
   10a66:	bf00      	nop

00010a68 <__aeabi_cdrcmple>:
   10a68:	4684      	mov	ip, r0
   10a6a:	4610      	mov	r0, r2
   10a6c:	4662      	mov	r2, ip
   10a6e:	468c      	mov	ip, r1
   10a70:	4619      	mov	r1, r3
   10a72:	4663      	mov	r3, ip
   10a74:	e000      	b.n	10a78 <__aeabi_cdcmpeq>
   10a76:	bf00      	nop

00010a78 <__aeabi_cdcmpeq>:
   10a78:	b501      	push	{r0, lr}
   10a7a:	f7ff ffb7 	bl	109ec <__cmpdf2>
   10a7e:	2800      	cmp	r0, #0
   10a80:	bf48      	it	mi
   10a82:	f110 0f00 	cmnmi.w	r0, #0
   10a86:	bd01      	pop	{r0, pc}

00010a88 <__aeabi_dcmpeq>:
   10a88:	f84d ed08 	str.w	lr, [sp, #-8]!
   10a8c:	f7ff fff4 	bl	10a78 <__aeabi_cdcmpeq>
   10a90:	bf0c      	ite	eq
   10a92:	2001      	moveq	r0, #1
   10a94:	2000      	movne	r0, #0
   10a96:	f85d fb08 	ldr.w	pc, [sp], #8
   10a9a:	bf00      	nop

00010a9c <__aeabi_dcmplt>:
   10a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   10aa0:	f7ff ffea 	bl	10a78 <__aeabi_cdcmpeq>
   10aa4:	bf34      	ite	cc
   10aa6:	2001      	movcc	r0, #1
   10aa8:	2000      	movcs	r0, #0
   10aaa:	f85d fb08 	ldr.w	pc, [sp], #8
   10aae:	bf00      	nop

00010ab0 <__aeabi_dcmple>:
   10ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
   10ab4:	f7ff ffe0 	bl	10a78 <__aeabi_cdcmpeq>
   10ab8:	bf94      	ite	ls
   10aba:	2001      	movls	r0, #1
   10abc:	2000      	movhi	r0, #0
   10abe:	f85d fb08 	ldr.w	pc, [sp], #8
   10ac2:	bf00      	nop

00010ac4 <__aeabi_dcmpge>:
   10ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
   10ac8:	f7ff ffce 	bl	10a68 <__aeabi_cdrcmple>
   10acc:	bf94      	ite	ls
   10ace:	2001      	movls	r0, #1
   10ad0:	2000      	movhi	r0, #0
   10ad2:	f85d fb08 	ldr.w	pc, [sp], #8
   10ad6:	bf00      	nop

00010ad8 <__aeabi_dcmpgt>:
   10ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
   10adc:	f7ff ffc4 	bl	10a68 <__aeabi_cdrcmple>
   10ae0:	bf34      	ite	cc
   10ae2:	2001      	movcc	r0, #1
   10ae4:	2000      	movcs	r0, #0
   10ae6:	f85d fb08 	ldr.w	pc, [sp], #8
   10aea:	bf00      	nop

00010aec <__aeabi_dcmpun>:
   10aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10af4:	d102      	bne.n	10afc <__aeabi_dcmpun+0x10>
   10af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   10afa:	d10a      	bne.n	10b12 <__aeabi_dcmpun+0x26>
   10afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   10b04:	d102      	bne.n	10b0c <__aeabi_dcmpun+0x20>
   10b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   10b0a:	d102      	bne.n	10b12 <__aeabi_dcmpun+0x26>
   10b0c:	f04f 0000 	mov.w	r0, #0
   10b10:	4770      	bx	lr
   10b12:	f04f 0001 	mov.w	r0, #1
   10b16:	4770      	bx	lr

00010b18 <__aeabi_d2iz>:
   10b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
   10b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   10b20:	d215      	bcs.n	10b4e <__aeabi_d2iz+0x36>
   10b22:	d511      	bpl.n	10b48 <__aeabi_d2iz+0x30>
   10b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   10b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   10b2c:	d912      	bls.n	10b54 <__aeabi_d2iz+0x3c>
   10b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   10b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10b3e:	fa23 f002 	lsr.w	r0, r3, r2
   10b42:	bf18      	it	ne
   10b44:	4240      	negne	r0, r0
   10b46:	4770      	bx	lr
   10b48:	f04f 0000 	mov.w	r0, #0
   10b4c:	4770      	bx	lr
   10b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   10b52:	d105      	bne.n	10b60 <__aeabi_d2iz+0x48>
   10b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   10b58:	bf08      	it	eq
   10b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   10b5e:	4770      	bx	lr
   10b60:	f04f 0000 	mov.w	r0, #0
   10b64:	4770      	bx	lr
   10b66:	bf00      	nop

00010b68 <__aeabi_uldivmod>:
   10b68:	b953      	cbnz	r3, 10b80 <__aeabi_uldivmod+0x18>
   10b6a:	b94a      	cbnz	r2, 10b80 <__aeabi_uldivmod+0x18>
   10b6c:	2900      	cmp	r1, #0
   10b6e:	bf08      	it	eq
   10b70:	2800      	cmpeq	r0, #0
   10b72:	bf1c      	itt	ne
   10b74:	f04f 31ff 	movne.w	r1, #4294967295
   10b78:	f04f 30ff 	movne.w	r0, #4294967295
   10b7c:	f000 b96c 	b.w	10e58 <__aeabi_idiv0>
   10b80:	f1ad 0c08 	sub.w	ip, sp, #8
   10b84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10b88:	f000 f806 	bl	10b98 <__udivmoddi4>
   10b8c:	f8dd e004 	ldr.w	lr, [sp, #4]
   10b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10b94:	b004      	add	sp, #16
   10b96:	4770      	bx	lr

00010b98 <__udivmoddi4>:
   10b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b9c:	9d08      	ldr	r5, [sp, #32]
   10b9e:	4604      	mov	r4, r0
   10ba0:	4688      	mov	r8, r1
   10ba2:	2b00      	cmp	r3, #0
   10ba4:	d17d      	bne.n	10ca2 <__udivmoddi4+0x10a>
   10ba6:	428a      	cmp	r2, r1
   10ba8:	4617      	mov	r7, r2
   10baa:	d93f      	bls.n	10c2c <__udivmoddi4+0x94>
   10bac:	fab2 f282 	clz	r2, r2
   10bb0:	b142      	cbz	r2, 10bc4 <__udivmoddi4+0x2c>
   10bb2:	f1c2 0020 	rsb	r0, r2, #32
   10bb6:	4091      	lsls	r1, r2
   10bb8:	4097      	lsls	r7, r2
   10bba:	fa24 f000 	lsr.w	r0, r4, r0
   10bbe:	4094      	lsls	r4, r2
   10bc0:	ea40 0801 	orr.w	r8, r0, r1
   10bc4:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   10bc8:	0c23      	lsrs	r3, r4, #16
   10bca:	fa1f fe87 	uxth.w	lr, r7
   10bce:	fbb8 f6fc 	udiv	r6, r8, ip
   10bd2:	fb0c 8116 	mls	r1, ip, r6, r8
   10bd6:	fb06 f00e 	mul.w	r0, r6, lr
   10bda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   10bde:	4298      	cmp	r0, r3
   10be0:	d905      	bls.n	10bee <__udivmoddi4+0x56>
   10be2:	18fb      	adds	r3, r7, r3
   10be4:	d202      	bcs.n	10bec <__udivmoddi4+0x54>
   10be6:	4298      	cmp	r0, r3
   10be8:	f200 8124 	bhi.w	10e34 <__udivmoddi4+0x29c>
   10bec:	3e01      	subs	r6, #1
   10bee:	1a19      	subs	r1, r3, r0
   10bf0:	b2a3      	uxth	r3, r4
   10bf2:	fbb1 f0fc 	udiv	r0, r1, ip
   10bf6:	fb0c 1110 	mls	r1, ip, r0, r1
   10bfa:	fb00 fe0e 	mul.w	lr, r0, lr
   10bfe:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   10c02:	45a6      	cmp	lr, r4
   10c04:	d905      	bls.n	10c12 <__udivmoddi4+0x7a>
   10c06:	193c      	adds	r4, r7, r4
   10c08:	d202      	bcs.n	10c10 <__udivmoddi4+0x78>
   10c0a:	45a6      	cmp	lr, r4
   10c0c:	f200 810f 	bhi.w	10e2e <__udivmoddi4+0x296>
   10c10:	3801      	subs	r0, #1
   10c12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   10c16:	eba4 040e 	sub.w	r4, r4, lr
   10c1a:	2600      	movs	r6, #0
   10c1c:	b11d      	cbz	r5, 10c26 <__udivmoddi4+0x8e>
   10c1e:	40d4      	lsrs	r4, r2
   10c20:	2300      	movs	r3, #0
   10c22:	e9c5 4300 	strd	r4, r3, [r5]
   10c26:	4631      	mov	r1, r6
   10c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10c2c:	b902      	cbnz	r2, 10c30 <__udivmoddi4+0x98>
   10c2e:	deff      	udf	#255	; 0xff
   10c30:	fab2 f282 	clz	r2, r2
   10c34:	2a00      	cmp	r2, #0
   10c36:	d150      	bne.n	10cda <__udivmoddi4+0x142>
   10c38:	1bcb      	subs	r3, r1, r7
   10c3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   10c3e:	fa1f f887 	uxth.w	r8, r7
   10c42:	2601      	movs	r6, #1
   10c44:	0c21      	lsrs	r1, r4, #16
   10c46:	fbb3 fcfe 	udiv	ip, r3, lr
   10c4a:	fb0e 301c 	mls	r0, lr, ip, r3
   10c4e:	460b      	mov	r3, r1
   10c50:	fb08 f90c 	mul.w	r9, r8, ip
   10c54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   10c58:	4589      	cmp	r9, r1
   10c5a:	d90a      	bls.n	10c72 <__udivmoddi4+0xda>
   10c5c:	1879      	adds	r1, r7, r1
   10c5e:	bf2c      	ite	cs
   10c60:	2301      	movcs	r3, #1
   10c62:	2300      	movcc	r3, #0
   10c64:	4589      	cmp	r9, r1
   10c66:	d902      	bls.n	10c6e <__udivmoddi4+0xd6>
   10c68:	2b00      	cmp	r3, #0
   10c6a:	f000 80d9 	beq.w	10e20 <__udivmoddi4+0x288>
   10c6e:	f10c 3cff 	add.w	ip, ip, #4294967295
   10c72:	eba1 0109 	sub.w	r1, r1, r9
   10c76:	b2a3      	uxth	r3, r4
   10c78:	fbb1 f0fe 	udiv	r0, r1, lr
   10c7c:	fb0e 1110 	mls	r1, lr, r0, r1
   10c80:	fb08 f800 	mul.w	r8, r8, r0
   10c84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   10c88:	45a0      	cmp	r8, r4
   10c8a:	d905      	bls.n	10c98 <__udivmoddi4+0x100>
   10c8c:	193c      	adds	r4, r7, r4
   10c8e:	d202      	bcs.n	10c96 <__udivmoddi4+0xfe>
   10c90:	45a0      	cmp	r8, r4
   10c92:	f200 80c9 	bhi.w	10e28 <__udivmoddi4+0x290>
   10c96:	3801      	subs	r0, #1
   10c98:	eba4 0408 	sub.w	r4, r4, r8
   10c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   10ca0:	e7bc      	b.n	10c1c <__udivmoddi4+0x84>
   10ca2:	428b      	cmp	r3, r1
   10ca4:	d909      	bls.n	10cba <__udivmoddi4+0x122>
   10ca6:	2d00      	cmp	r5, #0
   10ca8:	f000 80b1 	beq.w	10e0e <__udivmoddi4+0x276>
   10cac:	2600      	movs	r6, #0
   10cae:	e9c5 0100 	strd	r0, r1, [r5]
   10cb2:	4630      	mov	r0, r6
   10cb4:	4631      	mov	r1, r6
   10cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10cba:	fab3 f683 	clz	r6, r3
   10cbe:	2e00      	cmp	r6, #0
   10cc0:	d146      	bne.n	10d50 <__udivmoddi4+0x1b8>
   10cc2:	428b      	cmp	r3, r1
   10cc4:	f0c0 80a6 	bcc.w	10e14 <__udivmoddi4+0x27c>
   10cc8:	4282      	cmp	r2, r0
   10cca:	f240 80a3 	bls.w	10e14 <__udivmoddi4+0x27c>
   10cce:	4630      	mov	r0, r6
   10cd0:	2d00      	cmp	r5, #0
   10cd2:	d0a8      	beq.n	10c26 <__udivmoddi4+0x8e>
   10cd4:	e9c5 4800 	strd	r4, r8, [r5]
   10cd8:	e7a5      	b.n	10c26 <__udivmoddi4+0x8e>
   10cda:	4097      	lsls	r7, r2
   10cdc:	f1c2 0320 	rsb	r3, r2, #32
   10ce0:	fa01 f002 	lsl.w	r0, r1, r2
   10ce4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   10ce8:	40d9      	lsrs	r1, r3
   10cea:	fa24 f303 	lsr.w	r3, r4, r3
   10cee:	fa1f f887 	uxth.w	r8, r7
   10cf2:	4094      	lsls	r4, r2
   10cf4:	4303      	orrs	r3, r0
   10cf6:	fbb1 f0fe 	udiv	r0, r1, lr
   10cfa:	0c1e      	lsrs	r6, r3, #16
   10cfc:	fb0e 1110 	mls	r1, lr, r0, r1
   10d00:	fb00 fc08 	mul.w	ip, r0, r8
   10d04:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   10d08:	458c      	cmp	ip, r1
   10d0a:	d909      	bls.n	10d20 <__udivmoddi4+0x188>
   10d0c:	1879      	adds	r1, r7, r1
   10d0e:	bf2c      	ite	cs
   10d10:	2601      	movcs	r6, #1
   10d12:	2600      	movcc	r6, #0
   10d14:	458c      	cmp	ip, r1
   10d16:	d902      	bls.n	10d1e <__udivmoddi4+0x186>
   10d18:	2e00      	cmp	r6, #0
   10d1a:	f000 8093 	beq.w	10e44 <__udivmoddi4+0x2ac>
   10d1e:	3801      	subs	r0, #1
   10d20:	eba1 010c 	sub.w	r1, r1, ip
   10d24:	b29b      	uxth	r3, r3
   10d26:	fbb1 f6fe 	udiv	r6, r1, lr
   10d2a:	fb0e 1116 	mls	r1, lr, r6, r1
   10d2e:	fb06 fc08 	mul.w	ip, r6, r8
   10d32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   10d36:	458c      	cmp	ip, r1
   10d38:	d905      	bls.n	10d46 <__udivmoddi4+0x1ae>
   10d3a:	1879      	adds	r1, r7, r1
   10d3c:	d202      	bcs.n	10d44 <__udivmoddi4+0x1ac>
   10d3e:	458c      	cmp	ip, r1
   10d40:	f200 8087 	bhi.w	10e52 <__udivmoddi4+0x2ba>
   10d44:	3e01      	subs	r6, #1
   10d46:	eba1 030c 	sub.w	r3, r1, ip
   10d4a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   10d4e:	e779      	b.n	10c44 <__udivmoddi4+0xac>
   10d50:	f1c6 0720 	rsb	r7, r6, #32
   10d54:	fa03 f406 	lsl.w	r4, r3, r6
   10d58:	fa02 fc06 	lsl.w	ip, r2, r6
   10d5c:	fa01 fe06 	lsl.w	lr, r1, r6
   10d60:	40fa      	lsrs	r2, r7
   10d62:	fa20 f807 	lsr.w	r8, r0, r7
   10d66:	40f9      	lsrs	r1, r7
   10d68:	fa00 f306 	lsl.w	r3, r0, r6
   10d6c:	4322      	orrs	r2, r4
   10d6e:	ea48 040e 	orr.w	r4, r8, lr
   10d72:	ea4f 4812 	mov.w	r8, r2, lsr #16
   10d76:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   10d7a:	fa1f f982 	uxth.w	r9, r2
   10d7e:	fbb1 faf8 	udiv	sl, r1, r8
   10d82:	fb08 111a 	mls	r1, r8, sl, r1
   10d86:	fb0a f009 	mul.w	r0, sl, r9
   10d8a:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   10d8e:	4570      	cmp	r0, lr
   10d90:	d90a      	bls.n	10da8 <__udivmoddi4+0x210>
   10d92:	eb12 0e0e 	adds.w	lr, r2, lr
   10d96:	bf2c      	ite	cs
   10d98:	2101      	movcs	r1, #1
   10d9a:	2100      	movcc	r1, #0
   10d9c:	4570      	cmp	r0, lr
   10d9e:	d901      	bls.n	10da4 <__udivmoddi4+0x20c>
   10da0:	2900      	cmp	r1, #0
   10da2:	d052      	beq.n	10e4a <__udivmoddi4+0x2b2>
   10da4:	f10a 3aff 	add.w	sl, sl, #4294967295
   10da8:	ebae 0e00 	sub.w	lr, lr, r0
   10dac:	b2a4      	uxth	r4, r4
   10dae:	fbbe f0f8 	udiv	r0, lr, r8
   10db2:	fb08 ee10 	mls	lr, r8, r0, lr
   10db6:	fb00 f909 	mul.w	r9, r0, r9
   10dba:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
   10dbe:	45f1      	cmp	r9, lr
   10dc0:	d905      	bls.n	10dce <__udivmoddi4+0x236>
   10dc2:	eb12 0e0e 	adds.w	lr, r2, lr
   10dc6:	d201      	bcs.n	10dcc <__udivmoddi4+0x234>
   10dc8:	45f1      	cmp	r9, lr
   10dca:	d838      	bhi.n	10e3e <__udivmoddi4+0x2a6>
   10dcc:	3801      	subs	r0, #1
   10dce:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   10dd2:	ebae 0e09 	sub.w	lr, lr, r9
   10dd6:	fba0 890c 	umull	r8, r9, r0, ip
   10dda:	45ce      	cmp	lr, r9
   10ddc:	4641      	mov	r1, r8
   10dde:	464c      	mov	r4, r9
   10de0:	d302      	bcc.n	10de8 <__udivmoddi4+0x250>
   10de2:	d106      	bne.n	10df2 <__udivmoddi4+0x25a>
   10de4:	4543      	cmp	r3, r8
   10de6:	d204      	bcs.n	10df2 <__udivmoddi4+0x25a>
   10de8:	3801      	subs	r0, #1
   10dea:	ebb8 010c 	subs.w	r1, r8, ip
   10dee:	eb69 0402 	sbc.w	r4, r9, r2
   10df2:	b315      	cbz	r5, 10e3a <__udivmoddi4+0x2a2>
   10df4:	1a5a      	subs	r2, r3, r1
   10df6:	eb6e 0e04 	sbc.w	lr, lr, r4
   10dfa:	40f2      	lsrs	r2, r6
   10dfc:	fa0e f707 	lsl.w	r7, lr, r7
   10e00:	fa2e f306 	lsr.w	r3, lr, r6
   10e04:	2600      	movs	r6, #0
   10e06:	4317      	orrs	r7, r2
   10e08:	e9c5 7300 	strd	r7, r3, [r5]
   10e0c:	e70b      	b.n	10c26 <__udivmoddi4+0x8e>
   10e0e:	462e      	mov	r6, r5
   10e10:	4628      	mov	r0, r5
   10e12:	e708      	b.n	10c26 <__udivmoddi4+0x8e>
   10e14:	1a84      	subs	r4, r0, r2
   10e16:	eb61 0103 	sbc.w	r1, r1, r3
   10e1a:	2001      	movs	r0, #1
   10e1c:	4688      	mov	r8, r1
   10e1e:	e757      	b.n	10cd0 <__udivmoddi4+0x138>
   10e20:	f1ac 0c02 	sub.w	ip, ip, #2
   10e24:	4439      	add	r1, r7
   10e26:	e724      	b.n	10c72 <__udivmoddi4+0xda>
   10e28:	3802      	subs	r0, #2
   10e2a:	443c      	add	r4, r7
   10e2c:	e734      	b.n	10c98 <__udivmoddi4+0x100>
   10e2e:	3802      	subs	r0, #2
   10e30:	443c      	add	r4, r7
   10e32:	e6ee      	b.n	10c12 <__udivmoddi4+0x7a>
   10e34:	3e02      	subs	r6, #2
   10e36:	443b      	add	r3, r7
   10e38:	e6d9      	b.n	10bee <__udivmoddi4+0x56>
   10e3a:	462e      	mov	r6, r5
   10e3c:	e6f3      	b.n	10c26 <__udivmoddi4+0x8e>
   10e3e:	3802      	subs	r0, #2
   10e40:	4496      	add	lr, r2
   10e42:	e7c4      	b.n	10dce <__udivmoddi4+0x236>
   10e44:	3802      	subs	r0, #2
   10e46:	4439      	add	r1, r7
   10e48:	e76a      	b.n	10d20 <__udivmoddi4+0x188>
   10e4a:	f1aa 0a02 	sub.w	sl, sl, #2
   10e4e:	4496      	add	lr, r2
   10e50:	e7aa      	b.n	10da8 <__udivmoddi4+0x210>
   10e52:	3e02      	subs	r6, #2
   10e54:	4439      	add	r1, r7
   10e56:	e776      	b.n	10d46 <__udivmoddi4+0x1ae>

00010e58 <__aeabi_idiv0>:
   10e58:	4770      	bx	lr
   10e5a:	bf00      	nop

00010e5c <strcmp>:
   10e5c:	f810 2b01 	ldrb.w	r2, [r0], #1
   10e60:	f811 3b01 	ldrb.w	r3, [r1], #1
   10e64:	2a01      	cmp	r2, #1
   10e66:	bf28      	it	cs
   10e68:	429a      	cmpcs	r2, r3
   10e6a:	d0f7      	beq.n	10e5c <strcmp>
   10e6c:	1ad0      	subs	r0, r2, r3
   10e6e:	4770      	bx	lr

00010e70 <strlen>:
   10e70:	4603      	mov	r3, r0
   10e72:	f813 2b01 	ldrb.w	r2, [r3], #1
   10e76:	2a00      	cmp	r2, #0
   10e78:	d1fb      	bne.n	10e72 <strlen+0x2>
   10e7a:	1a18      	subs	r0, r3, r0
   10e7c:	3801      	subs	r0, #1
   10e7e:	4770      	bx	lr

00010e80 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
   10e80:	b570      	push	{r4, r5, r6, lr}
   10e82:	ec55 4b10 	vmov	r4, r5, d0
    cJSON *item = cJSON_New_Item(&global_hooks);
   10e86:	4816      	ldr	r0, [pc, #88]	; (10ee0 <cJSON_CreateNumber+0x60>)
   10e88:	f010 f83e 	bl	20f08 <cJSON_New_Item>
    if(item)
   10e8c:	4606      	mov	r6, r0
   10e8e:	b170      	cbz	r0, 10eae <cJSON_CreateNumber+0x2e>
    {
        item->type = cJSON_Number;
   10e90:	2308      	movs	r3, #8
   10e92:	60c3      	str	r3, [r0, #12]
        item->valuedouble = num;
   10e94:	e9c0 4506 	strd	r4, r5, [r0, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
   10e98:	a30f      	add	r3, pc, #60	; (adr r3, 10ed8 <cJSON_CreateNumber+0x58>)
   10e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e9e:	4620      	mov	r0, r4
   10ea0:	4629      	mov	r1, r5
   10ea2:	f7ff fe0f 	bl	10ac4 <__aeabi_dcmpge>
   10ea6:	b120      	cbz	r0, 10eb2 <cJSON_CreateNumber+0x32>
        {
            item->valueint = INT_MAX;
   10ea8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   10eac:	6173      	str	r3, [r6, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
   10eae:	4630      	mov	r0, r6
   10eb0:	bd70      	pop	{r4, r5, r6, pc}
        else if (num <= (double)INT_MIN)
   10eb2:	2200      	movs	r2, #0
   10eb4:	4b0b      	ldr	r3, [pc, #44]	; (10ee4 <cJSON_CreateNumber+0x64>)
   10eb6:	4620      	mov	r0, r4
   10eb8:	4629      	mov	r1, r5
   10eba:	f7ff fdf9 	bl	10ab0 <__aeabi_dcmple>
   10ebe:	b118      	cbz	r0, 10ec8 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
   10ec0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   10ec4:	6173      	str	r3, [r6, #20]
   10ec6:	e7f2      	b.n	10eae <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
   10ec8:	4620      	mov	r0, r4
   10eca:	4629      	mov	r1, r5
   10ecc:	f7ff fe24 	bl	10b18 <__aeabi_d2iz>
   10ed0:	6170      	str	r0, [r6, #20]
    return item;
   10ed2:	e7ec      	b.n	10eae <cJSON_CreateNumber+0x2e>
   10ed4:	f3af 8000 	nop.w
   10ed8:	ffc00000 	.word	0xffc00000
   10edc:	41dfffff 	.word	0x41dfffff
   10ee0:	20014578 	.word	0x20014578
   10ee4:	c1e00000 	.word	0xc1e00000

00010ee8 <_dtoa_r>:
   10ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10eec:	6a45      	ldr	r5, [r0, #36]	; 0x24
   10eee:	4604      	mov	r4, r0
   10ef0:	ed2d 8b02 	vpush	{d8}
   10ef4:	b095      	sub	sp, #84	; 0x54
   10ef6:	ec57 6b10 	vmov	r6, r7, d0
   10efa:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
   10efe:	9105      	str	r1, [sp, #20]
   10f00:	9209      	str	r2, [sp, #36]	; 0x24
   10f02:	930f      	str	r3, [sp, #60]	; 0x3c
   10f04:	e9cd 6702 	strd	r6, r7, [sp, #8]
   10f08:	b93d      	cbnz	r5, 10f1a <_dtoa_r+0x32>
   10f0a:	2010      	movs	r0, #16
   10f0c:	f00b fde6 	bl	1cadc <malloc>
   10f10:	6260      	str	r0, [r4, #36]	; 0x24
   10f12:	6005      	str	r5, [r0, #0]
   10f14:	60c5      	str	r5, [r0, #12]
   10f16:	e9c0 5501 	strd	r5, r5, [r0, #4]
   10f1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10f1c:	6819      	ldr	r1, [r3, #0]
   10f1e:	b151      	cbz	r1, 10f36 <_dtoa_r+0x4e>
   10f20:	685a      	ldr	r2, [r3, #4]
   10f22:	2301      	movs	r3, #1
   10f24:	4620      	mov	r0, r4
   10f26:	4093      	lsls	r3, r2
   10f28:	604a      	str	r2, [r1, #4]
   10f2a:	608b      	str	r3, [r1, #8]
   10f2c:	f012 fb0f 	bl	2354e <_Bfree>
   10f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
   10f32:	2200      	movs	r2, #0
   10f34:	601a      	str	r2, [r3, #0]
   10f36:	1e3b      	subs	r3, r7, #0
   10f38:	bfb7      	itett	lt
   10f3a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   10f3e:	2300      	movge	r3, #0
   10f40:	2201      	movlt	r2, #1
   10f42:	9303      	strlt	r3, [sp, #12]
   10f44:	bfa8      	it	ge
   10f46:	f8c8 3000 	strge.w	r3, [r8]
   10f4a:	f8dd 900c 	ldr.w	r9, [sp, #12]
   10f4e:	4bb6      	ldr	r3, [pc, #728]	; (11228 <_dtoa_r+0x340>)
   10f50:	bfb8      	it	lt
   10f52:	f8c8 2000 	strlt.w	r2, [r8]
   10f56:	ea33 0309 	bics.w	r3, r3, r9
   10f5a:	d11b      	bne.n	10f94 <_dtoa_r+0xac>
   10f5c:	f242 730f 	movw	r3, #9999	; 0x270f
   10f60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10f62:	6013      	str	r3, [r2, #0]
   10f64:	f3c9 0313 	ubfx	r3, r9, #0, #20
   10f68:	4333      	orrs	r3, r6
   10f6a:	f000 8572 	beq.w	11a52 <_dtoa_r+0xb6a>
   10f6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
   10f70:	b963      	cbnz	r3, 10f8c <_dtoa_r+0xa4>
   10f72:	4bae      	ldr	r3, [pc, #696]	; (1122c <_dtoa_r+0x344>)
   10f74:	e025      	b.n	10fc2 <_dtoa_r+0xda>
   10f76:	4bae      	ldr	r3, [pc, #696]	; (11230 <_dtoa_r+0x348>)
   10f78:	9300      	str	r3, [sp, #0]
   10f7a:	3308      	adds	r3, #8
   10f7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
   10f7e:	6013      	str	r3, [r2, #0]
   10f80:	9800      	ldr	r0, [sp, #0]
   10f82:	b015      	add	sp, #84	; 0x54
   10f84:	ecbd 8b02 	vpop	{d8}
   10f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f8c:	4ba7      	ldr	r3, [pc, #668]	; (1122c <_dtoa_r+0x344>)
   10f8e:	9300      	str	r3, [sp, #0]
   10f90:	3303      	adds	r3, #3
   10f92:	e7f3      	b.n	10f7c <_dtoa_r+0x94>
   10f94:	ed9d 7b02 	vldr	d7, [sp, #8]
   10f98:	2200      	movs	r2, #0
   10f9a:	2300      	movs	r3, #0
   10f9c:	ec51 0b17 	vmov	r0, r1, d7
   10fa0:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   10fa4:	f7ff fd70 	bl	10a88 <__aeabi_dcmpeq>
   10fa8:	4680      	mov	r8, r0
   10faa:	b160      	cbz	r0, 10fc6 <_dtoa_r+0xde>
   10fac:	2301      	movs	r3, #1
   10fae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10fb0:	6013      	str	r3, [r2, #0]
   10fb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   10fb4:	2b00      	cmp	r3, #0
   10fb6:	f000 8549 	beq.w	11a4c <_dtoa_r+0xb64>
   10fba:	4b9e      	ldr	r3, [pc, #632]	; (11234 <_dtoa_r+0x34c>)
   10fbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
   10fbe:	6013      	str	r3, [r2, #0]
   10fc0:	3b01      	subs	r3, #1
   10fc2:	9300      	str	r3, [sp, #0]
   10fc4:	e7dc      	b.n	10f80 <_dtoa_r+0x98>
   10fc6:	f3c9 550a 	ubfx	r5, r9, #20, #11
   10fca:	aa12      	add	r2, sp, #72	; 0x48
   10fcc:	a913      	add	r1, sp, #76	; 0x4c
   10fce:	4620      	mov	r0, r4
   10fd0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   10fd4:	f012 fcfd 	bl	239d2 <__d2b>
   10fd8:	4682      	mov	sl, r0
   10fda:	2d00      	cmp	r5, #0
   10fdc:	d07c      	beq.n	110d8 <_dtoa_r+0x1f0>
   10fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10fe0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   10fe4:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   10fe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
   10fec:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   10ff0:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
   10ff4:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
   10ff8:	2200      	movs	r2, #0
   10ffa:	4b8f      	ldr	r3, [pc, #572]	; (11238 <_dtoa_r+0x350>)
   10ffc:	4630      	mov	r0, r6
   10ffe:	4639      	mov	r1, r7
   11000:	f7ff f922 	bl	10248 <__aeabi_dsub>
   11004:	a382      	add	r3, pc, #520	; (adr r3, 11210 <_dtoa_r+0x328>)
   11006:	e9d3 2300 	ldrd	r2, r3, [r3]
   1100a:	f7ff fad5 	bl	105b8 <__aeabi_dmul>
   1100e:	a382      	add	r3, pc, #520	; (adr r3, 11218 <_dtoa_r+0x330>)
   11010:	e9d3 2300 	ldrd	r2, r3, [r3]
   11014:	f7ff f91a 	bl	1024c <__adddf3>
   11018:	4606      	mov	r6, r0
   1101a:	460f      	mov	r7, r1
   1101c:	4628      	mov	r0, r5
   1101e:	f7ff fa61 	bl	104e4 <__aeabi_i2d>
   11022:	a37f      	add	r3, pc, #508	; (adr r3, 11220 <_dtoa_r+0x338>)
   11024:	e9d3 2300 	ldrd	r2, r3, [r3]
   11028:	f7ff fac6 	bl	105b8 <__aeabi_dmul>
   1102c:	4602      	mov	r2, r0
   1102e:	460b      	mov	r3, r1
   11030:	4630      	mov	r0, r6
   11032:	4639      	mov	r1, r7
   11034:	f7ff f90a 	bl	1024c <__adddf3>
   11038:	4606      	mov	r6, r0
   1103a:	460f      	mov	r7, r1
   1103c:	f7ff fd6c 	bl	10b18 <__aeabi_d2iz>
   11040:	2200      	movs	r2, #0
   11042:	4681      	mov	r9, r0
   11044:	2300      	movs	r3, #0
   11046:	4630      	mov	r0, r6
   11048:	4639      	mov	r1, r7
   1104a:	f7ff fd27 	bl	10a9c <__aeabi_dcmplt>
   1104e:	b148      	cbz	r0, 11064 <_dtoa_r+0x17c>
   11050:	4648      	mov	r0, r9
   11052:	f7ff fa47 	bl	104e4 <__aeabi_i2d>
   11056:	4632      	mov	r2, r6
   11058:	463b      	mov	r3, r7
   1105a:	f7ff fd15 	bl	10a88 <__aeabi_dcmpeq>
   1105e:	b908      	cbnz	r0, 11064 <_dtoa_r+0x17c>
   11060:	f109 39ff 	add.w	r9, r9, #4294967295
   11064:	f1b9 0f16 	cmp.w	r9, #22
   11068:	d855      	bhi.n	11116 <_dtoa_r+0x22e>
   1106a:	4b74      	ldr	r3, [pc, #464]	; (1123c <_dtoa_r+0x354>)
   1106c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   11070:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   11074:	e9d3 2300 	ldrd	r2, r3, [r3]
   11078:	f7ff fd10 	bl	10a9c <__aeabi_dcmplt>
   1107c:	2800      	cmp	r0, #0
   1107e:	d04c      	beq.n	1111a <_dtoa_r+0x232>
   11080:	f109 39ff 	add.w	r9, r9, #4294967295
   11084:	2300      	movs	r3, #0
   11086:	930e      	str	r3, [sp, #56]	; 0x38
   11088:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1108a:	1b5d      	subs	r5, r3, r5
   1108c:	1e6b      	subs	r3, r5, #1
   1108e:	9304      	str	r3, [sp, #16]
   11090:	bf45      	ittet	mi
   11092:	2300      	movmi	r3, #0
   11094:	f1c5 0801 	rsbmi	r8, r5, #1
   11098:	f04f 0800 	movpl.w	r8, #0
   1109c:	9304      	strmi	r3, [sp, #16]
   1109e:	f1b9 0f00 	cmp.w	r9, #0
   110a2:	db3c      	blt.n	1111e <_dtoa_r+0x236>
   110a4:	9b04      	ldr	r3, [sp, #16]
   110a6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   110aa:	444b      	add	r3, r9
   110ac:	9304      	str	r3, [sp, #16]
   110ae:	2300      	movs	r3, #0
   110b0:	9306      	str	r3, [sp, #24]
   110b2:	9b05      	ldr	r3, [sp, #20]
   110b4:	2b09      	cmp	r3, #9
   110b6:	f200 8099 	bhi.w	111ec <_dtoa_r+0x304>
   110ba:	2b05      	cmp	r3, #5
   110bc:	bfc5      	ittet	gt
   110be:	3b04      	subgt	r3, #4
   110c0:	2500      	movgt	r5, #0
   110c2:	2501      	movle	r5, #1
   110c4:	9305      	strgt	r3, [sp, #20]
   110c6:	9b05      	ldr	r3, [sp, #20]
   110c8:	3b02      	subs	r3, #2
   110ca:	2b03      	cmp	r3, #3
   110cc:	f200 809a 	bhi.w	11204 <_dtoa_r+0x31c>
   110d0:	e8df f003 	tbb	[pc, r3]
   110d4:	8a7c7e2d 	.word	0x8a7c7e2d
   110d8:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
   110dc:	441d      	add	r5, r3
   110de:	f205 4332 	addw	r3, r5, #1074	; 0x432
   110e2:	2b20      	cmp	r3, #32
   110e4:	bfc6      	itte	gt
   110e6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   110ea:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
   110ee:	f1c3 0320 	rsble	r3, r3, #32
   110f2:	f105 35ff 	add.w	r5, r5, #4294967295
   110f6:	bfc5      	ittet	gt
   110f8:	fa09 f303 	lslgt.w	r3, r9, r3
   110fc:	fa26 f000 	lsrgt.w	r0, r6, r0
   11100:	fa06 f003 	lslle.w	r0, r6, r3
   11104:	4318      	orrgt	r0, r3
   11106:	f7ff f9dd 	bl	104c4 <__aeabi_ui2d>
   1110a:	2301      	movs	r3, #1
   1110c:	4606      	mov	r6, r0
   1110e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
   11112:	9310      	str	r3, [sp, #64]	; 0x40
   11114:	e770      	b.n	10ff8 <_dtoa_r+0x110>
   11116:	2301      	movs	r3, #1
   11118:	e7b5      	b.n	11086 <_dtoa_r+0x19e>
   1111a:	900e      	str	r0, [sp, #56]	; 0x38
   1111c:	e7b4      	b.n	11088 <_dtoa_r+0x1a0>
   1111e:	f1c9 0300 	rsb	r3, r9, #0
   11122:	eba8 0809 	sub.w	r8, r8, r9
   11126:	9306      	str	r3, [sp, #24]
   11128:	2300      	movs	r3, #0
   1112a:	930d      	str	r3, [sp, #52]	; 0x34
   1112c:	e7c1      	b.n	110b2 <_dtoa_r+0x1ca>
   1112e:	2300      	movs	r3, #0
   11130:	9308      	str	r3, [sp, #32]
   11132:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11134:	2b00      	cmp	r3, #0
   11136:	f300 8085 	bgt.w	11244 <_dtoa_r+0x35c>
   1113a:	f04f 0b01 	mov.w	fp, #1
   1113e:	465b      	mov	r3, fp
   11140:	f8cd b004 	str.w	fp, [sp, #4]
   11144:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   11148:	2200      	movs	r2, #0
   1114a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1114c:	6072      	str	r2, [r6, #4]
   1114e:	2204      	movs	r2, #4
   11150:	f102 0014 	add.w	r0, r2, #20
   11154:	6871      	ldr	r1, [r6, #4]
   11156:	4298      	cmp	r0, r3
   11158:	d97a      	bls.n	11250 <_dtoa_r+0x368>
   1115a:	4620      	mov	r0, r4
   1115c:	f012 f9c3 	bl	234e6 <_Balloc>
   11160:	6a63      	ldr	r3, [r4, #36]	; 0x24
   11162:	6030      	str	r0, [r6, #0]
   11164:	681b      	ldr	r3, [r3, #0]
   11166:	9300      	str	r3, [sp, #0]
   11168:	9b01      	ldr	r3, [sp, #4]
   1116a:	2b0e      	cmp	r3, #14
   1116c:	f200 80f5 	bhi.w	1135a <_dtoa_r+0x472>
   11170:	2d00      	cmp	r5, #0
   11172:	f000 80f2 	beq.w	1135a <_dtoa_r+0x472>
   11176:	f1b9 0f00 	cmp.w	r9, #0
   1117a:	dd7d      	ble.n	11278 <_dtoa_r+0x390>
   1117c:	f009 030f 	and.w	r3, r9, #15
   11180:	4a2e      	ldr	r2, [pc, #184]	; (1123c <_dtoa_r+0x354>)
   11182:	f419 7f80 	tst.w	r9, #256	; 0x100
   11186:	ea4f 1729 	mov.w	r7, r9, asr #4
   1118a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1118e:	ed93 7b00 	vldr	d7, [r3]
   11192:	eeb0 8a47 	vmov.f32	s16, s14
   11196:	eef0 8a67 	vmov.f32	s17, s15
   1119a:	d05d      	beq.n	11258 <_dtoa_r+0x370>
   1119c:	4b28      	ldr	r3, [pc, #160]	; (11240 <_dtoa_r+0x358>)
   1119e:	f007 070f 	and.w	r7, r7, #15
   111a2:	2503      	movs	r5, #3
   111a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   111a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   111ac:	f7ff fb2e 	bl	1080c <__aeabi_ddiv>
   111b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   111b4:	4e22      	ldr	r6, [pc, #136]	; (11240 <_dtoa_r+0x358>)
   111b6:	2f00      	cmp	r7, #0
   111b8:	d150      	bne.n	1125c <_dtoa_r+0x374>
   111ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   111be:	ec53 2b18 	vmov	r2, r3, d8
   111c2:	f7ff fb23 	bl	1080c <__aeabi_ddiv>
   111c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   111ca:	e06f      	b.n	112ac <_dtoa_r+0x3c4>
   111cc:	2301      	movs	r3, #1
   111ce:	e7af      	b.n	11130 <_dtoa_r+0x248>
   111d0:	2300      	movs	r3, #0
   111d2:	9308      	str	r3, [sp, #32]
   111d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   111d6:	eb09 0b03 	add.w	fp, r9, r3
   111da:	f10b 0301 	add.w	r3, fp, #1
   111de:	2b01      	cmp	r3, #1
   111e0:	9301      	str	r3, [sp, #4]
   111e2:	bfb8      	it	lt
   111e4:	2301      	movlt	r3, #1
   111e6:	e7af      	b.n	11148 <_dtoa_r+0x260>
   111e8:	2301      	movs	r3, #1
   111ea:	e7f2      	b.n	111d2 <_dtoa_r+0x2ea>
   111ec:	2501      	movs	r5, #1
   111ee:	2300      	movs	r3, #0
   111f0:	9508      	str	r5, [sp, #32]
   111f2:	9305      	str	r3, [sp, #20]
   111f4:	f04f 3bff 	mov.w	fp, #4294967295
   111f8:	2200      	movs	r2, #0
   111fa:	2312      	movs	r3, #18
   111fc:	f8cd b004 	str.w	fp, [sp, #4]
   11200:	9209      	str	r2, [sp, #36]	; 0x24
   11202:	e7a1      	b.n	11148 <_dtoa_r+0x260>
   11204:	2301      	movs	r3, #1
   11206:	9308      	str	r3, [sp, #32]
   11208:	e7f4      	b.n	111f4 <_dtoa_r+0x30c>
   1120a:	bf00      	nop
   1120c:	f3af 8000 	nop.w
   11210:	636f4361 	.word	0x636f4361
   11214:	3fd287a7 	.word	0x3fd287a7
   11218:	8b60c8b3 	.word	0x8b60c8b3
   1121c:	3fc68a28 	.word	0x3fc68a28
   11220:	509f79fb 	.word	0x509f79fb
   11224:	3fd34413 	.word	0x3fd34413
   11228:	7ff00000 	.word	0x7ff00000
   1122c:	00024e4c 	.word	0x00024e4c
   11230:	00024e43 	.word	0x00024e43
   11234:	00024e70 	.word	0x00024e70
   11238:	3ff80000 	.word	0x3ff80000
   1123c:	000241c0 	.word	0x000241c0
   11240:	00024198 	.word	0x00024198
   11244:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   11248:	465b      	mov	r3, fp
   1124a:	f8cd b004 	str.w	fp, [sp, #4]
   1124e:	e77b      	b.n	11148 <_dtoa_r+0x260>
   11250:	3101      	adds	r1, #1
   11252:	0052      	lsls	r2, r2, #1
   11254:	6071      	str	r1, [r6, #4]
   11256:	e77b      	b.n	11150 <_dtoa_r+0x268>
   11258:	2502      	movs	r5, #2
   1125a:	e7ab      	b.n	111b4 <_dtoa_r+0x2cc>
   1125c:	07f9      	lsls	r1, r7, #31
   1125e:	d508      	bpl.n	11272 <_dtoa_r+0x38a>
   11260:	3501      	adds	r5, #1
   11262:	ec51 0b18 	vmov	r0, r1, d8
   11266:	e9d6 2300 	ldrd	r2, r3, [r6]
   1126a:	f7ff f9a5 	bl	105b8 <__aeabi_dmul>
   1126e:	ec41 0b18 	vmov	d8, r0, r1
   11272:	107f      	asrs	r7, r7, #1
   11274:	3608      	adds	r6, #8
   11276:	e79e      	b.n	111b6 <_dtoa_r+0x2ce>
   11278:	f000 80ab 	beq.w	113d2 <_dtoa_r+0x4ea>
   1127c:	f1c9 0600 	rsb	r6, r9, #0
   11280:	4baa      	ldr	r3, [pc, #680]	; (1152c <_dtoa_r+0x644>)
   11282:	4fab      	ldr	r7, [pc, #684]	; (11530 <_dtoa_r+0x648>)
   11284:	2502      	movs	r5, #2
   11286:	f006 020f 	and.w	r2, r6, #15
   1128a:	1136      	asrs	r6, r6, #4
   1128c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11290:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   11294:	e9d3 2300 	ldrd	r2, r3, [r3]
   11298:	f7ff f98e 	bl	105b8 <__aeabi_dmul>
   1129c:	2300      	movs	r3, #0
   1129e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   112a2:	2e00      	cmp	r6, #0
   112a4:	f040 808a 	bne.w	113bc <_dtoa_r+0x4d4>
   112a8:	2b00      	cmp	r3, #0
   112aa:	d18c      	bne.n	111c6 <_dtoa_r+0x2de>
   112ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   112ae:	2b00      	cmp	r3, #0
   112b0:	f000 8091 	beq.w	113d6 <_dtoa_r+0x4ee>
   112b4:	2200      	movs	r2, #0
   112b6:	4b9f      	ldr	r3, [pc, #636]	; (11534 <_dtoa_r+0x64c>)
   112b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   112bc:	4630      	mov	r0, r6
   112be:	4639      	mov	r1, r7
   112c0:	f7ff fbec 	bl	10a9c <__aeabi_dcmplt>
   112c4:	2800      	cmp	r0, #0
   112c6:	f000 8086 	beq.w	113d6 <_dtoa_r+0x4ee>
   112ca:	9b01      	ldr	r3, [sp, #4]
   112cc:	2b00      	cmp	r3, #0
   112ce:	f000 8082 	beq.w	113d6 <_dtoa_r+0x4ee>
   112d2:	f1bb 0f00 	cmp.w	fp, #0
   112d6:	dd3c      	ble.n	11352 <_dtoa_r+0x46a>
   112d8:	f109 33ff 	add.w	r3, r9, #4294967295
   112dc:	3501      	adds	r5, #1
   112de:	2200      	movs	r2, #0
   112e0:	4630      	mov	r0, r6
   112e2:	9307      	str	r3, [sp, #28]
   112e4:	4639      	mov	r1, r7
   112e6:	4b94      	ldr	r3, [pc, #592]	; (11538 <_dtoa_r+0x650>)
   112e8:	f7ff f966 	bl	105b8 <__aeabi_dmul>
   112ec:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   112f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
   112f4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   112f8:	4628      	mov	r0, r5
   112fa:	f7ff f8f3 	bl	104e4 <__aeabi_i2d>
   112fe:	4632      	mov	r2, r6
   11300:	463b      	mov	r3, r7
   11302:	f7ff f959 	bl	105b8 <__aeabi_dmul>
   11306:	4b8d      	ldr	r3, [pc, #564]	; (1153c <_dtoa_r+0x654>)
   11308:	2200      	movs	r2, #0
   1130a:	f7fe ff9f 	bl	1024c <__adddf3>
   1130e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   11312:	e9cd 0102 	strd	r0, r1, [sp, #8]
   11316:	9303      	str	r3, [sp, #12]
   11318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1131a:	2b00      	cmp	r3, #0
   1131c:	d160      	bne.n	113e0 <_dtoa_r+0x4f8>
   1131e:	2200      	movs	r2, #0
   11320:	4b87      	ldr	r3, [pc, #540]	; (11540 <_dtoa_r+0x658>)
   11322:	4630      	mov	r0, r6
   11324:	4639      	mov	r1, r7
   11326:	f7fe ff8f 	bl	10248 <__aeabi_dsub>
   1132a:	4606      	mov	r6, r0
   1132c:	460f      	mov	r7, r1
   1132e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   11332:	f7ff fbd1 	bl	10ad8 <__aeabi_dcmpgt>
   11336:	2800      	cmp	r0, #0
   11338:	f040 8297 	bne.w	1186a <_dtoa_r+0x982>
   1133c:	4630      	mov	r0, r6
   1133e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   11342:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   11346:	4639      	mov	r1, r7
   11348:	f7ff fba8 	bl	10a9c <__aeabi_dcmplt>
   1134c:	2800      	cmp	r0, #0
   1134e:	f040 8289 	bne.w	11864 <_dtoa_r+0x97c>
   11352:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   11356:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1135a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1135c:	2b00      	cmp	r3, #0
   1135e:	f2c0 815b 	blt.w	11618 <_dtoa_r+0x730>
   11362:	f1b9 0f0e 	cmp.w	r9, #14
   11366:	f300 8157 	bgt.w	11618 <_dtoa_r+0x730>
   1136a:	4b70      	ldr	r3, [pc, #448]	; (1152c <_dtoa_r+0x644>)
   1136c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   11370:	ed93 7b00 	vldr	d7, [r3]
   11374:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11376:	2b00      	cmp	r3, #0
   11378:	eeb0 8a47 	vmov.f32	s16, s14
   1137c:	eef0 8a67 	vmov.f32	s17, s15
   11380:	f280 80e2 	bge.w	11548 <_dtoa_r+0x660>
   11384:	9b01      	ldr	r3, [sp, #4]
   11386:	2b00      	cmp	r3, #0
   11388:	f300 80de 	bgt.w	11548 <_dtoa_r+0x660>
   1138c:	f040 826a 	bne.w	11864 <_dtoa_r+0x97c>
   11390:	2200      	movs	r2, #0
   11392:	4b6b      	ldr	r3, [pc, #428]	; (11540 <_dtoa_r+0x658>)
   11394:	ec51 0b17 	vmov	r0, r1, d7
   11398:	f7ff f90e 	bl	105b8 <__aeabi_dmul>
   1139c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   113a0:	f7ff fb90 	bl	10ac4 <__aeabi_dcmpge>
   113a4:	9e01      	ldr	r6, [sp, #4]
   113a6:	4637      	mov	r7, r6
   113a8:	2800      	cmp	r0, #0
   113aa:	f040 8240 	bne.w	1182e <_dtoa_r+0x946>
   113ae:	9d00      	ldr	r5, [sp, #0]
   113b0:	2331      	movs	r3, #49	; 0x31
   113b2:	f109 0901 	add.w	r9, r9, #1
   113b6:	f805 3b01 	strb.w	r3, [r5], #1
   113ba:	e23c      	b.n	11836 <_dtoa_r+0x94e>
   113bc:	07f2      	lsls	r2, r6, #31
   113be:	d505      	bpl.n	113cc <_dtoa_r+0x4e4>
   113c0:	3501      	adds	r5, #1
   113c2:	e9d7 2300 	ldrd	r2, r3, [r7]
   113c6:	f7ff f8f7 	bl	105b8 <__aeabi_dmul>
   113ca:	2301      	movs	r3, #1
   113cc:	1076      	asrs	r6, r6, #1
   113ce:	3708      	adds	r7, #8
   113d0:	e767      	b.n	112a2 <_dtoa_r+0x3ba>
   113d2:	2502      	movs	r5, #2
   113d4:	e76a      	b.n	112ac <_dtoa_r+0x3c4>
   113d6:	9b01      	ldr	r3, [sp, #4]
   113d8:	f8cd 901c 	str.w	r9, [sp, #28]
   113dc:	930c      	str	r3, [sp, #48]	; 0x30
   113de:	e789      	b.n	112f4 <_dtoa_r+0x40c>
   113e0:	9900      	ldr	r1, [sp, #0]
   113e2:	980c      	ldr	r0, [sp, #48]	; 0x30
   113e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   113e6:	4401      	add	r1, r0
   113e8:	4b50      	ldr	r3, [pc, #320]	; (1152c <_dtoa_r+0x644>)
   113ea:	ed9d 7b02 	vldr	d7, [sp, #8]
   113ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   113f2:	9102      	str	r1, [sp, #8]
   113f4:	9908      	ldr	r1, [sp, #32]
   113f6:	eeb0 8a47 	vmov.f32	s16, s14
   113fa:	eef0 8a67 	vmov.f32	s17, s15
   113fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   11402:	2900      	cmp	r1, #0
   11404:	d045      	beq.n	11492 <_dtoa_r+0x5aa>
   11406:	2000      	movs	r0, #0
   11408:	494e      	ldr	r1, [pc, #312]	; (11544 <_dtoa_r+0x65c>)
   1140a:	f7ff f9ff 	bl	1080c <__aeabi_ddiv>
   1140e:	ec53 2b18 	vmov	r2, r3, d8
   11412:	f7fe ff19 	bl	10248 <__aeabi_dsub>
   11416:	9d00      	ldr	r5, [sp, #0]
   11418:	ec41 0b18 	vmov	d8, r0, r1
   1141c:	4639      	mov	r1, r7
   1141e:	4630      	mov	r0, r6
   11420:	f7ff fb7a 	bl	10b18 <__aeabi_d2iz>
   11424:	900c      	str	r0, [sp, #48]	; 0x30
   11426:	f7ff f85d 	bl	104e4 <__aeabi_i2d>
   1142a:	4602      	mov	r2, r0
   1142c:	460b      	mov	r3, r1
   1142e:	4630      	mov	r0, r6
   11430:	4639      	mov	r1, r7
   11432:	f7fe ff09 	bl	10248 <__aeabi_dsub>
   11436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11438:	4606      	mov	r6, r0
   1143a:	460f      	mov	r7, r1
   1143c:	3330      	adds	r3, #48	; 0x30
   1143e:	f805 3b01 	strb.w	r3, [r5], #1
   11442:	ec53 2b18 	vmov	r2, r3, d8
   11446:	f7ff fb29 	bl	10a9c <__aeabi_dcmplt>
   1144a:	2800      	cmp	r0, #0
   1144c:	d164      	bne.n	11518 <_dtoa_r+0x630>
   1144e:	4632      	mov	r2, r6
   11450:	463b      	mov	r3, r7
   11452:	2000      	movs	r0, #0
   11454:	4937      	ldr	r1, [pc, #220]	; (11534 <_dtoa_r+0x64c>)
   11456:	f7fe fef7 	bl	10248 <__aeabi_dsub>
   1145a:	ec53 2b18 	vmov	r2, r3, d8
   1145e:	f7ff fb1d 	bl	10a9c <__aeabi_dcmplt>
   11462:	2800      	cmp	r0, #0
   11464:	f040 80b8 	bne.w	115d8 <_dtoa_r+0x6f0>
   11468:	9b02      	ldr	r3, [sp, #8]
   1146a:	429d      	cmp	r5, r3
   1146c:	f43f af71 	beq.w	11352 <_dtoa_r+0x46a>
   11470:	2200      	movs	r2, #0
   11472:	4b31      	ldr	r3, [pc, #196]	; (11538 <_dtoa_r+0x650>)
   11474:	ec51 0b18 	vmov	r0, r1, d8
   11478:	f7ff f89e 	bl	105b8 <__aeabi_dmul>
   1147c:	2200      	movs	r2, #0
   1147e:	4b2e      	ldr	r3, [pc, #184]	; (11538 <_dtoa_r+0x650>)
   11480:	ec41 0b18 	vmov	d8, r0, r1
   11484:	4630      	mov	r0, r6
   11486:	4639      	mov	r1, r7
   11488:	f7ff f896 	bl	105b8 <__aeabi_dmul>
   1148c:	4606      	mov	r6, r0
   1148e:	460f      	mov	r7, r1
   11490:	e7c4      	b.n	1141c <_dtoa_r+0x534>
   11492:	ec51 0b17 	vmov	r0, r1, d7
   11496:	f7ff f88f 	bl	105b8 <__aeabi_dmul>
   1149a:	9b02      	ldr	r3, [sp, #8]
   1149c:	9d00      	ldr	r5, [sp, #0]
   1149e:	930c      	str	r3, [sp, #48]	; 0x30
   114a0:	ec41 0b18 	vmov	d8, r0, r1
   114a4:	4639      	mov	r1, r7
   114a6:	4630      	mov	r0, r6
   114a8:	f7ff fb36 	bl	10b18 <__aeabi_d2iz>
   114ac:	9011      	str	r0, [sp, #68]	; 0x44
   114ae:	f7ff f819 	bl	104e4 <__aeabi_i2d>
   114b2:	4602      	mov	r2, r0
   114b4:	460b      	mov	r3, r1
   114b6:	4630      	mov	r0, r6
   114b8:	4639      	mov	r1, r7
   114ba:	f7fe fec5 	bl	10248 <__aeabi_dsub>
   114be:	9b11      	ldr	r3, [sp, #68]	; 0x44
   114c0:	4606      	mov	r6, r0
   114c2:	460f      	mov	r7, r1
   114c4:	3330      	adds	r3, #48	; 0x30
   114c6:	2200      	movs	r2, #0
   114c8:	f805 3b01 	strb.w	r3, [r5], #1
   114cc:	9b02      	ldr	r3, [sp, #8]
   114ce:	429d      	cmp	r5, r3
   114d0:	d125      	bne.n	1151e <_dtoa_r+0x636>
   114d2:	4b1c      	ldr	r3, [pc, #112]	; (11544 <_dtoa_r+0x65c>)
   114d4:	ec51 0b18 	vmov	r0, r1, d8
   114d8:	f7fe feb8 	bl	1024c <__adddf3>
   114dc:	4602      	mov	r2, r0
   114de:	460b      	mov	r3, r1
   114e0:	4630      	mov	r0, r6
   114e2:	4639      	mov	r1, r7
   114e4:	f7ff faf8 	bl	10ad8 <__aeabi_dcmpgt>
   114e8:	2800      	cmp	r0, #0
   114ea:	d175      	bne.n	115d8 <_dtoa_r+0x6f0>
   114ec:	2000      	movs	r0, #0
   114ee:	4915      	ldr	r1, [pc, #84]	; (11544 <_dtoa_r+0x65c>)
   114f0:	ec53 2b18 	vmov	r2, r3, d8
   114f4:	f7fe fea8 	bl	10248 <__aeabi_dsub>
   114f8:	4602      	mov	r2, r0
   114fa:	460b      	mov	r3, r1
   114fc:	4630      	mov	r0, r6
   114fe:	4639      	mov	r1, r7
   11500:	f7ff facc 	bl	10a9c <__aeabi_dcmplt>
   11504:	2800      	cmp	r0, #0
   11506:	f43f af24 	beq.w	11352 <_dtoa_r+0x46a>
   1150a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1150c:	1e6b      	subs	r3, r5, #1
   1150e:	930c      	str	r3, [sp, #48]	; 0x30
   11510:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   11514:	2b30      	cmp	r3, #48	; 0x30
   11516:	d0f8      	beq.n	1150a <_dtoa_r+0x622>
   11518:	f8dd 901c 	ldr.w	r9, [sp, #28]
   1151c:	e04a      	b.n	115b4 <_dtoa_r+0x6cc>
   1151e:	4b06      	ldr	r3, [pc, #24]	; (11538 <_dtoa_r+0x650>)
   11520:	f7ff f84a 	bl	105b8 <__aeabi_dmul>
   11524:	4606      	mov	r6, r0
   11526:	460f      	mov	r7, r1
   11528:	e7bc      	b.n	114a4 <_dtoa_r+0x5bc>
   1152a:	bf00      	nop
   1152c:	000241c0 	.word	0x000241c0
   11530:	00024198 	.word	0x00024198
   11534:	3ff00000 	.word	0x3ff00000
   11538:	40240000 	.word	0x40240000
   1153c:	401c0000 	.word	0x401c0000
   11540:	40140000 	.word	0x40140000
   11544:	3fe00000 	.word	0x3fe00000
   11548:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1154c:	9d00      	ldr	r5, [sp, #0]
   1154e:	4630      	mov	r0, r6
   11550:	4639      	mov	r1, r7
   11552:	ec53 2b18 	vmov	r2, r3, d8
   11556:	f7ff f959 	bl	1080c <__aeabi_ddiv>
   1155a:	f7ff fadd 	bl	10b18 <__aeabi_d2iz>
   1155e:	4680      	mov	r8, r0
   11560:	f7fe ffc0 	bl	104e4 <__aeabi_i2d>
   11564:	ec53 2b18 	vmov	r2, r3, d8
   11568:	f7ff f826 	bl	105b8 <__aeabi_dmul>
   1156c:	4602      	mov	r2, r0
   1156e:	4630      	mov	r0, r6
   11570:	f108 0630 	add.w	r6, r8, #48	; 0x30
   11574:	460b      	mov	r3, r1
   11576:	4639      	mov	r1, r7
   11578:	f7fe fe66 	bl	10248 <__aeabi_dsub>
   1157c:	f805 6b01 	strb.w	r6, [r5], #1
   11580:	9e00      	ldr	r6, [sp, #0]
   11582:	4602      	mov	r2, r0
   11584:	9f01      	ldr	r7, [sp, #4]
   11586:	460b      	mov	r3, r1
   11588:	1bae      	subs	r6, r5, r6
   1158a:	42b7      	cmp	r7, r6
   1158c:	d137      	bne.n	115fe <_dtoa_r+0x716>
   1158e:	f7fe fe5d 	bl	1024c <__adddf3>
   11592:	4606      	mov	r6, r0
   11594:	460f      	mov	r7, r1
   11596:	ec53 2b18 	vmov	r2, r3, d8
   1159a:	f7ff fa9d 	bl	10ad8 <__aeabi_dcmpgt>
   1159e:	b9c8      	cbnz	r0, 115d4 <_dtoa_r+0x6ec>
   115a0:	4630      	mov	r0, r6
   115a2:	4639      	mov	r1, r7
   115a4:	ec53 2b18 	vmov	r2, r3, d8
   115a8:	f7ff fa6e 	bl	10a88 <__aeabi_dcmpeq>
   115ac:	b110      	cbz	r0, 115b4 <_dtoa_r+0x6cc>
   115ae:	f018 0f01 	tst.w	r8, #1
   115b2:	d10f      	bne.n	115d4 <_dtoa_r+0x6ec>
   115b4:	4620      	mov	r0, r4
   115b6:	4651      	mov	r1, sl
   115b8:	f011 ffc9 	bl	2354e <_Bfree>
   115bc:	2300      	movs	r3, #0
   115be:	f109 0001 	add.w	r0, r9, #1
   115c2:	702b      	strb	r3, [r5, #0]
   115c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   115c6:	6018      	str	r0, [r3, #0]
   115c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
   115ca:	2b00      	cmp	r3, #0
   115cc:	f43f acd8 	beq.w	10f80 <_dtoa_r+0x98>
   115d0:	601d      	str	r5, [r3, #0]
   115d2:	e4d5      	b.n	10f80 <_dtoa_r+0x98>
   115d4:	f8cd 901c 	str.w	r9, [sp, #28]
   115d8:	462b      	mov	r3, r5
   115da:	461d      	mov	r5, r3
   115dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   115e0:	2a39      	cmp	r2, #57	; 0x39
   115e2:	d108      	bne.n	115f6 <_dtoa_r+0x70e>
   115e4:	9a00      	ldr	r2, [sp, #0]
   115e6:	429a      	cmp	r2, r3
   115e8:	d1f7      	bne.n	115da <_dtoa_r+0x6f2>
   115ea:	9a07      	ldr	r2, [sp, #28]
   115ec:	9900      	ldr	r1, [sp, #0]
   115ee:	3201      	adds	r2, #1
   115f0:	9207      	str	r2, [sp, #28]
   115f2:	2230      	movs	r2, #48	; 0x30
   115f4:	700a      	strb	r2, [r1, #0]
   115f6:	781a      	ldrb	r2, [r3, #0]
   115f8:	3201      	adds	r2, #1
   115fa:	701a      	strb	r2, [r3, #0]
   115fc:	e78c      	b.n	11518 <_dtoa_r+0x630>
   115fe:	2200      	movs	r2, #0
   11600:	4b9c      	ldr	r3, [pc, #624]	; (11874 <_dtoa_r+0x98c>)
   11602:	f7fe ffd9 	bl	105b8 <__aeabi_dmul>
   11606:	2200      	movs	r2, #0
   11608:	2300      	movs	r3, #0
   1160a:	4606      	mov	r6, r0
   1160c:	460f      	mov	r7, r1
   1160e:	f7ff fa3b 	bl	10a88 <__aeabi_dcmpeq>
   11612:	2800      	cmp	r0, #0
   11614:	d09b      	beq.n	1154e <_dtoa_r+0x666>
   11616:	e7cd      	b.n	115b4 <_dtoa_r+0x6cc>
   11618:	9a08      	ldr	r2, [sp, #32]
   1161a:	2a00      	cmp	r2, #0
   1161c:	f000 80c4 	beq.w	117a8 <_dtoa_r+0x8c0>
   11620:	9a05      	ldr	r2, [sp, #20]
   11622:	2a01      	cmp	r2, #1
   11624:	f300 80a9 	bgt.w	1177a <_dtoa_r+0x892>
   11628:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1162a:	2a00      	cmp	r2, #0
   1162c:	f000 80a1 	beq.w	11772 <_dtoa_r+0x88a>
   11630:	f203 4333 	addw	r3, r3, #1075	; 0x433
   11634:	9e06      	ldr	r6, [sp, #24]
   11636:	4645      	mov	r5, r8
   11638:	9a04      	ldr	r2, [sp, #16]
   1163a:	2101      	movs	r1, #1
   1163c:	4620      	mov	r0, r4
   1163e:	4498      	add	r8, r3
   11640:	441a      	add	r2, r3
   11642:	9204      	str	r2, [sp, #16]
   11644:	f012 f829 	bl	2369a <__i2b>
   11648:	4607      	mov	r7, r0
   1164a:	2d00      	cmp	r5, #0
   1164c:	dd0b      	ble.n	11666 <_dtoa_r+0x77e>
   1164e:	9b04      	ldr	r3, [sp, #16]
   11650:	2b00      	cmp	r3, #0
   11652:	dd08      	ble.n	11666 <_dtoa_r+0x77e>
   11654:	42ab      	cmp	r3, r5
   11656:	9a04      	ldr	r2, [sp, #16]
   11658:	bfa8      	it	ge
   1165a:	462b      	movge	r3, r5
   1165c:	eba8 0803 	sub.w	r8, r8, r3
   11660:	1aed      	subs	r5, r5, r3
   11662:	1ad3      	subs	r3, r2, r3
   11664:	9304      	str	r3, [sp, #16]
   11666:	9b06      	ldr	r3, [sp, #24]
   11668:	b1fb      	cbz	r3, 116aa <_dtoa_r+0x7c2>
   1166a:	9b08      	ldr	r3, [sp, #32]
   1166c:	2b00      	cmp	r3, #0
   1166e:	f000 809f 	beq.w	117b0 <_dtoa_r+0x8c8>
   11672:	2e00      	cmp	r6, #0
   11674:	dd11      	ble.n	1169a <_dtoa_r+0x7b2>
   11676:	4639      	mov	r1, r7
   11678:	4632      	mov	r2, r6
   1167a:	4620      	mov	r0, r4
   1167c:	f00b fff4 	bl	1d668 <__pow5mult>
   11680:	4652      	mov	r2, sl
   11682:	4601      	mov	r1, r0
   11684:	4607      	mov	r7, r0
   11686:	4620      	mov	r0, r4
   11688:	f012 f810 	bl	236ac <__multiply>
   1168c:	4651      	mov	r1, sl
   1168e:	9007      	str	r0, [sp, #28]
   11690:	4620      	mov	r0, r4
   11692:	f011 ff5c 	bl	2354e <_Bfree>
   11696:	9b07      	ldr	r3, [sp, #28]
   11698:	469a      	mov	sl, r3
   1169a:	9b06      	ldr	r3, [sp, #24]
   1169c:	1b9a      	subs	r2, r3, r6
   1169e:	d004      	beq.n	116aa <_dtoa_r+0x7c2>
   116a0:	4651      	mov	r1, sl
   116a2:	4620      	mov	r0, r4
   116a4:	f00b ffe0 	bl	1d668 <__pow5mult>
   116a8:	4682      	mov	sl, r0
   116aa:	2101      	movs	r1, #1
   116ac:	4620      	mov	r0, r4
   116ae:	f011 fff4 	bl	2369a <__i2b>
   116b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   116b4:	4606      	mov	r6, r0
   116b6:	2b00      	cmp	r3, #0
   116b8:	dd7c      	ble.n	117b4 <_dtoa_r+0x8cc>
   116ba:	461a      	mov	r2, r3
   116bc:	4601      	mov	r1, r0
   116be:	4620      	mov	r0, r4
   116c0:	f00b ffd2 	bl	1d668 <__pow5mult>
   116c4:	9b05      	ldr	r3, [sp, #20]
   116c6:	4606      	mov	r6, r0
   116c8:	2b01      	cmp	r3, #1
   116ca:	dd76      	ble.n	117ba <_dtoa_r+0x8d2>
   116cc:	2300      	movs	r3, #0
   116ce:	9306      	str	r3, [sp, #24]
   116d0:	6933      	ldr	r3, [r6, #16]
   116d2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   116d6:	6918      	ldr	r0, [r3, #16]
   116d8:	f011 ff8f 	bl	235fa <__hi0bits>
   116dc:	f1c0 0020 	rsb	r0, r0, #32
   116e0:	9b04      	ldr	r3, [sp, #16]
   116e2:	4418      	add	r0, r3
   116e4:	f010 001f 	ands.w	r0, r0, #31
   116e8:	f000 8086 	beq.w	117f8 <_dtoa_r+0x910>
   116ec:	f1c0 0320 	rsb	r3, r0, #32
   116f0:	2b04      	cmp	r3, #4
   116f2:	dd7f      	ble.n	117f4 <_dtoa_r+0x90c>
   116f4:	f1c0 001c 	rsb	r0, r0, #28
   116f8:	9b04      	ldr	r3, [sp, #16]
   116fa:	4480      	add	r8, r0
   116fc:	4405      	add	r5, r0
   116fe:	4403      	add	r3, r0
   11700:	9304      	str	r3, [sp, #16]
   11702:	f1b8 0f00 	cmp.w	r8, #0
   11706:	dd05      	ble.n	11714 <_dtoa_r+0x82c>
   11708:	4651      	mov	r1, sl
   1170a:	4642      	mov	r2, r8
   1170c:	4620      	mov	r0, r4
   1170e:	f012 f868 	bl	237e2 <__lshift>
   11712:	4682      	mov	sl, r0
   11714:	9b04      	ldr	r3, [sp, #16]
   11716:	2b00      	cmp	r3, #0
   11718:	dd05      	ble.n	11726 <_dtoa_r+0x83e>
   1171a:	4631      	mov	r1, r6
   1171c:	461a      	mov	r2, r3
   1171e:	4620      	mov	r0, r4
   11720:	f012 f85f 	bl	237e2 <__lshift>
   11724:	4606      	mov	r6, r0
   11726:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11728:	2b00      	cmp	r3, #0
   1172a:	d067      	beq.n	117fc <_dtoa_r+0x914>
   1172c:	4631      	mov	r1, r6
   1172e:	4650      	mov	r0, sl
   11730:	f012 f8b6 	bl	238a0 <__mcmp>
   11734:	2800      	cmp	r0, #0
   11736:	da61      	bge.n	117fc <_dtoa_r+0x914>
   11738:	2300      	movs	r3, #0
   1173a:	4651      	mov	r1, sl
   1173c:	220a      	movs	r2, #10
   1173e:	4620      	mov	r0, r4
   11740:	f011 ff1c 	bl	2357c <__multadd>
   11744:	9b08      	ldr	r3, [sp, #32]
   11746:	f109 39ff 	add.w	r9, r9, #4294967295
   1174a:	4682      	mov	sl, r0
   1174c:	2b00      	cmp	r3, #0
   1174e:	f000 8187 	beq.w	11a60 <_dtoa_r+0xb78>
   11752:	4639      	mov	r1, r7
   11754:	2300      	movs	r3, #0
   11756:	220a      	movs	r2, #10
   11758:	4620      	mov	r0, r4
   1175a:	f011 ff0f 	bl	2357c <__multadd>
   1175e:	f1bb 0f00 	cmp.w	fp, #0
   11762:	4607      	mov	r7, r0
   11764:	f300 808e 	bgt.w	11884 <_dtoa_r+0x99c>
   11768:	9b05      	ldr	r3, [sp, #20]
   1176a:	2b02      	cmp	r3, #2
   1176c:	f340 808a 	ble.w	11884 <_dtoa_r+0x99c>
   11770:	e04c      	b.n	1180c <_dtoa_r+0x924>
   11772:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11774:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   11778:	e75c      	b.n	11634 <_dtoa_r+0x74c>
   1177a:	9b01      	ldr	r3, [sp, #4]
   1177c:	1e5e      	subs	r6, r3, #1
   1177e:	9b06      	ldr	r3, [sp, #24]
   11780:	42b3      	cmp	r3, r6
   11782:	bfb7      	itett	lt
   11784:	9b06      	ldrlt	r3, [sp, #24]
   11786:	1b9e      	subge	r6, r3, r6
   11788:	9606      	strlt	r6, [sp, #24]
   1178a:	1af2      	sublt	r2, r6, r3
   1178c:	bfbf      	itttt	lt
   1178e:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
   11790:	2600      	movlt	r6, #0
   11792:	189b      	addlt	r3, r3, r2
   11794:	930d      	strlt	r3, [sp, #52]	; 0x34
   11796:	9b01      	ldr	r3, [sp, #4]
   11798:	2b00      	cmp	r3, #0
   1179a:	bfb5      	itete	lt
   1179c:	eba8 0503 	sublt.w	r5, r8, r3
   117a0:	4645      	movge	r5, r8
   117a2:	2300      	movlt	r3, #0
   117a4:	9b01      	ldrge	r3, [sp, #4]
   117a6:	e747      	b.n	11638 <_dtoa_r+0x750>
   117a8:	9e06      	ldr	r6, [sp, #24]
   117aa:	4645      	mov	r5, r8
   117ac:	9f08      	ldr	r7, [sp, #32]
   117ae:	e74c      	b.n	1164a <_dtoa_r+0x762>
   117b0:	9a06      	ldr	r2, [sp, #24]
   117b2:	e775      	b.n	116a0 <_dtoa_r+0x7b8>
   117b4:	9b05      	ldr	r3, [sp, #20]
   117b6:	2b01      	cmp	r3, #1
   117b8:	dc18      	bgt.n	117ec <_dtoa_r+0x904>
   117ba:	9b02      	ldr	r3, [sp, #8]
   117bc:	b9b3      	cbnz	r3, 117ec <_dtoa_r+0x904>
   117be:	9b03      	ldr	r3, [sp, #12]
   117c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
   117c4:	b9a3      	cbnz	r3, 117f0 <_dtoa_r+0x908>
   117c6:	9b03      	ldr	r3, [sp, #12]
   117c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   117cc:	0d1b      	lsrs	r3, r3, #20
   117ce:	051b      	lsls	r3, r3, #20
   117d0:	b12b      	cbz	r3, 117de <_dtoa_r+0x8f6>
   117d2:	9b04      	ldr	r3, [sp, #16]
   117d4:	f108 0801 	add.w	r8, r8, #1
   117d8:	3301      	adds	r3, #1
   117da:	9304      	str	r3, [sp, #16]
   117dc:	2301      	movs	r3, #1
   117de:	9306      	str	r3, [sp, #24]
   117e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   117e2:	2b00      	cmp	r3, #0
   117e4:	f47f af74 	bne.w	116d0 <_dtoa_r+0x7e8>
   117e8:	2001      	movs	r0, #1
   117ea:	e779      	b.n	116e0 <_dtoa_r+0x7f8>
   117ec:	2300      	movs	r3, #0
   117ee:	e7f6      	b.n	117de <_dtoa_r+0x8f6>
   117f0:	9b02      	ldr	r3, [sp, #8]
   117f2:	e7f4      	b.n	117de <_dtoa_r+0x8f6>
   117f4:	d085      	beq.n	11702 <_dtoa_r+0x81a>
   117f6:	4618      	mov	r0, r3
   117f8:	301c      	adds	r0, #28
   117fa:	e77d      	b.n	116f8 <_dtoa_r+0x810>
   117fc:	9b01      	ldr	r3, [sp, #4]
   117fe:	2b00      	cmp	r3, #0
   11800:	dc3a      	bgt.n	11878 <_dtoa_r+0x990>
   11802:	9b05      	ldr	r3, [sp, #20]
   11804:	2b02      	cmp	r3, #2
   11806:	dd37      	ble.n	11878 <_dtoa_r+0x990>
   11808:	f8dd b004 	ldr.w	fp, [sp, #4]
   1180c:	f1bb 0f00 	cmp.w	fp, #0
   11810:	d10d      	bne.n	1182e <_dtoa_r+0x946>
   11812:	4631      	mov	r1, r6
   11814:	465b      	mov	r3, fp
   11816:	2205      	movs	r2, #5
   11818:	4620      	mov	r0, r4
   1181a:	f011 feaf 	bl	2357c <__multadd>
   1181e:	4601      	mov	r1, r0
   11820:	4606      	mov	r6, r0
   11822:	4650      	mov	r0, sl
   11824:	f012 f83c 	bl	238a0 <__mcmp>
   11828:	2800      	cmp	r0, #0
   1182a:	f73f adc0 	bgt.w	113ae <_dtoa_r+0x4c6>
   1182e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11830:	9d00      	ldr	r5, [sp, #0]
   11832:	ea6f 0903 	mvn.w	r9, r3
   11836:	f04f 0800 	mov.w	r8, #0
   1183a:	4631      	mov	r1, r6
   1183c:	4620      	mov	r0, r4
   1183e:	f011 fe86 	bl	2354e <_Bfree>
   11842:	2f00      	cmp	r7, #0
   11844:	f43f aeb6 	beq.w	115b4 <_dtoa_r+0x6cc>
   11848:	f1b8 0f00 	cmp.w	r8, #0
   1184c:	d005      	beq.n	1185a <_dtoa_r+0x972>
   1184e:	45b8      	cmp	r8, r7
   11850:	d003      	beq.n	1185a <_dtoa_r+0x972>
   11852:	4641      	mov	r1, r8
   11854:	4620      	mov	r0, r4
   11856:	f011 fe7a 	bl	2354e <_Bfree>
   1185a:	4639      	mov	r1, r7
   1185c:	4620      	mov	r0, r4
   1185e:	f011 fe76 	bl	2354e <_Bfree>
   11862:	e6a7      	b.n	115b4 <_dtoa_r+0x6cc>
   11864:	2600      	movs	r6, #0
   11866:	4637      	mov	r7, r6
   11868:	e7e1      	b.n	1182e <_dtoa_r+0x946>
   1186a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1186c:	f8dd 901c 	ldr.w	r9, [sp, #28]
   11870:	4637      	mov	r7, r6
   11872:	e59c      	b.n	113ae <_dtoa_r+0x4c6>
   11874:	40240000 	.word	0x40240000
   11878:	9b08      	ldr	r3, [sp, #32]
   1187a:	f8dd b004 	ldr.w	fp, [sp, #4]
   1187e:	2b00      	cmp	r3, #0
   11880:	f000 80f5 	beq.w	11a6e <_dtoa_r+0xb86>
   11884:	2d00      	cmp	r5, #0
   11886:	dd05      	ble.n	11894 <_dtoa_r+0x9ac>
   11888:	4639      	mov	r1, r7
   1188a:	462a      	mov	r2, r5
   1188c:	4620      	mov	r0, r4
   1188e:	f011 ffa8 	bl	237e2 <__lshift>
   11892:	4607      	mov	r7, r0
   11894:	9b06      	ldr	r3, [sp, #24]
   11896:	2b00      	cmp	r3, #0
   11898:	d055      	beq.n	11946 <_dtoa_r+0xa5e>
   1189a:	6879      	ldr	r1, [r7, #4]
   1189c:	4620      	mov	r0, r4
   1189e:	f011 fe22 	bl	234e6 <_Balloc>
   118a2:	693a      	ldr	r2, [r7, #16]
   118a4:	4605      	mov	r5, r0
   118a6:	f107 010c 	add.w	r1, r7, #12
   118aa:	3202      	adds	r2, #2
   118ac:	300c      	adds	r0, #12
   118ae:	0092      	lsls	r2, r2, #2
   118b0:	f011 fb61 	bl	22f76 <memcpy>
   118b4:	2201      	movs	r2, #1
   118b6:	4629      	mov	r1, r5
   118b8:	4620      	mov	r0, r4
   118ba:	f011 ff92 	bl	237e2 <__lshift>
   118be:	9b00      	ldr	r3, [sp, #0]
   118c0:	46b8      	mov	r8, r7
   118c2:	4607      	mov	r7, r0
   118c4:	3301      	adds	r3, #1
   118c6:	9301      	str	r3, [sp, #4]
   118c8:	9b00      	ldr	r3, [sp, #0]
   118ca:	445b      	add	r3, fp
   118cc:	9307      	str	r3, [sp, #28]
   118ce:	9b02      	ldr	r3, [sp, #8]
   118d0:	f003 0301 	and.w	r3, r3, #1
   118d4:	9306      	str	r3, [sp, #24]
   118d6:	9b01      	ldr	r3, [sp, #4]
   118d8:	4631      	mov	r1, r6
   118da:	4650      	mov	r0, sl
   118dc:	f103 3bff 	add.w	fp, r3, #4294967295
   118e0:	f011 fd60 	bl	233a4 <quorem>
   118e4:	4603      	mov	r3, r0
   118e6:	4641      	mov	r1, r8
   118e8:	9002      	str	r0, [sp, #8]
   118ea:	4650      	mov	r0, sl
   118ec:	3330      	adds	r3, #48	; 0x30
   118ee:	9308      	str	r3, [sp, #32]
   118f0:	f011 ffd6 	bl	238a0 <__mcmp>
   118f4:	463a      	mov	r2, r7
   118f6:	9004      	str	r0, [sp, #16]
   118f8:	4631      	mov	r1, r6
   118fa:	4620      	mov	r0, r4
   118fc:	f011 ffec 	bl	238d8 <__mdiff>
   11900:	68c2      	ldr	r2, [r0, #12]
   11902:	4605      	mov	r5, r0
   11904:	9b08      	ldr	r3, [sp, #32]
   11906:	bb02      	cbnz	r2, 1194a <_dtoa_r+0xa62>
   11908:	4601      	mov	r1, r0
   1190a:	4650      	mov	r0, sl
   1190c:	f011 ffc8 	bl	238a0 <__mcmp>
   11910:	9b08      	ldr	r3, [sp, #32]
   11912:	4602      	mov	r2, r0
   11914:	4629      	mov	r1, r5
   11916:	4620      	mov	r0, r4
   11918:	e9cd 3208 	strd	r3, r2, [sp, #32]
   1191c:	f011 fe17 	bl	2354e <_Bfree>
   11920:	9b05      	ldr	r3, [sp, #20]
   11922:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11924:	9d01      	ldr	r5, [sp, #4]
   11926:	ea43 0102 	orr.w	r1, r3, r2
   1192a:	9b06      	ldr	r3, [sp, #24]
   1192c:	430b      	orrs	r3, r1
   1192e:	9b08      	ldr	r3, [sp, #32]
   11930:	d10d      	bne.n	1194e <_dtoa_r+0xa66>
   11932:	2b39      	cmp	r3, #57	; 0x39
   11934:	d027      	beq.n	11986 <_dtoa_r+0xa9e>
   11936:	9a04      	ldr	r2, [sp, #16]
   11938:	2a00      	cmp	r2, #0
   1193a:	dd01      	ble.n	11940 <_dtoa_r+0xa58>
   1193c:	9b02      	ldr	r3, [sp, #8]
   1193e:	3331      	adds	r3, #49	; 0x31
   11940:	f88b 3000 	strb.w	r3, [fp]
   11944:	e779      	b.n	1183a <_dtoa_r+0x952>
   11946:	4638      	mov	r0, r7
   11948:	e7b9      	b.n	118be <_dtoa_r+0x9d6>
   1194a:	2201      	movs	r2, #1
   1194c:	e7e2      	b.n	11914 <_dtoa_r+0xa2c>
   1194e:	9904      	ldr	r1, [sp, #16]
   11950:	2900      	cmp	r1, #0
   11952:	db04      	blt.n	1195e <_dtoa_r+0xa76>
   11954:	9805      	ldr	r0, [sp, #20]
   11956:	4301      	orrs	r1, r0
   11958:	9806      	ldr	r0, [sp, #24]
   1195a:	4301      	orrs	r1, r0
   1195c:	d120      	bne.n	119a0 <_dtoa_r+0xab8>
   1195e:	2a00      	cmp	r2, #0
   11960:	ddee      	ble.n	11940 <_dtoa_r+0xa58>
   11962:	4651      	mov	r1, sl
   11964:	2201      	movs	r2, #1
   11966:	4620      	mov	r0, r4
   11968:	9301      	str	r3, [sp, #4]
   1196a:	f011 ff3a 	bl	237e2 <__lshift>
   1196e:	4631      	mov	r1, r6
   11970:	4682      	mov	sl, r0
   11972:	f011 ff95 	bl	238a0 <__mcmp>
   11976:	2800      	cmp	r0, #0
   11978:	9b01      	ldr	r3, [sp, #4]
   1197a:	dc02      	bgt.n	11982 <_dtoa_r+0xa9a>
   1197c:	d1e0      	bne.n	11940 <_dtoa_r+0xa58>
   1197e:	07da      	lsls	r2, r3, #31
   11980:	d5de      	bpl.n	11940 <_dtoa_r+0xa58>
   11982:	2b39      	cmp	r3, #57	; 0x39
   11984:	d1da      	bne.n	1193c <_dtoa_r+0xa54>
   11986:	2339      	movs	r3, #57	; 0x39
   11988:	f88b 3000 	strb.w	r3, [fp]
   1198c:	462b      	mov	r3, r5
   1198e:	461d      	mov	r5, r3
   11990:	3b01      	subs	r3, #1
   11992:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   11996:	2a39      	cmp	r2, #57	; 0x39
   11998:	d050      	beq.n	11a3c <_dtoa_r+0xb54>
   1199a:	3201      	adds	r2, #1
   1199c:	701a      	strb	r2, [r3, #0]
   1199e:	e74c      	b.n	1183a <_dtoa_r+0x952>
   119a0:	2a00      	cmp	r2, #0
   119a2:	dd03      	ble.n	119ac <_dtoa_r+0xac4>
   119a4:	2b39      	cmp	r3, #57	; 0x39
   119a6:	d0ee      	beq.n	11986 <_dtoa_r+0xa9e>
   119a8:	3301      	adds	r3, #1
   119aa:	e7c9      	b.n	11940 <_dtoa_r+0xa58>
   119ac:	9a01      	ldr	r2, [sp, #4]
   119ae:	9907      	ldr	r1, [sp, #28]
   119b0:	f802 3c01 	strb.w	r3, [r2, #-1]
   119b4:	428a      	cmp	r2, r1
   119b6:	d02a      	beq.n	11a0e <_dtoa_r+0xb26>
   119b8:	4651      	mov	r1, sl
   119ba:	2300      	movs	r3, #0
   119bc:	220a      	movs	r2, #10
   119be:	4620      	mov	r0, r4
   119c0:	f011 fddc 	bl	2357c <__multadd>
   119c4:	45b8      	cmp	r8, r7
   119c6:	4682      	mov	sl, r0
   119c8:	f04f 0300 	mov.w	r3, #0
   119cc:	f04f 020a 	mov.w	r2, #10
   119d0:	4641      	mov	r1, r8
   119d2:	4620      	mov	r0, r4
   119d4:	d107      	bne.n	119e6 <_dtoa_r+0xafe>
   119d6:	f011 fdd1 	bl	2357c <__multadd>
   119da:	4680      	mov	r8, r0
   119dc:	4607      	mov	r7, r0
   119de:	9b01      	ldr	r3, [sp, #4]
   119e0:	3301      	adds	r3, #1
   119e2:	9301      	str	r3, [sp, #4]
   119e4:	e777      	b.n	118d6 <_dtoa_r+0x9ee>
   119e6:	f011 fdc9 	bl	2357c <__multadd>
   119ea:	4639      	mov	r1, r7
   119ec:	4680      	mov	r8, r0
   119ee:	2300      	movs	r3, #0
   119f0:	220a      	movs	r2, #10
   119f2:	4620      	mov	r0, r4
   119f4:	f011 fdc2 	bl	2357c <__multadd>
   119f8:	4607      	mov	r7, r0
   119fa:	e7f0      	b.n	119de <_dtoa_r+0xaf6>
   119fc:	f1bb 0f00 	cmp.w	fp, #0
   11a00:	9a00      	ldr	r2, [sp, #0]
   11a02:	f04f 0800 	mov.w	r8, #0
   11a06:	bfcc      	ite	gt
   11a08:	465d      	movgt	r5, fp
   11a0a:	2501      	movle	r5, #1
   11a0c:	4415      	add	r5, r2
   11a0e:	4651      	mov	r1, sl
   11a10:	2201      	movs	r2, #1
   11a12:	4620      	mov	r0, r4
   11a14:	9301      	str	r3, [sp, #4]
   11a16:	f011 fee4 	bl	237e2 <__lshift>
   11a1a:	4631      	mov	r1, r6
   11a1c:	4682      	mov	sl, r0
   11a1e:	f011 ff3f 	bl	238a0 <__mcmp>
   11a22:	2800      	cmp	r0, #0
   11a24:	dcb2      	bgt.n	1198c <_dtoa_r+0xaa4>
   11a26:	d102      	bne.n	11a2e <_dtoa_r+0xb46>
   11a28:	9b01      	ldr	r3, [sp, #4]
   11a2a:	07db      	lsls	r3, r3, #31
   11a2c:	d4ae      	bmi.n	1198c <_dtoa_r+0xaa4>
   11a2e:	462b      	mov	r3, r5
   11a30:	461d      	mov	r5, r3
   11a32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   11a36:	2a30      	cmp	r2, #48	; 0x30
   11a38:	d0fa      	beq.n	11a30 <_dtoa_r+0xb48>
   11a3a:	e6fe      	b.n	1183a <_dtoa_r+0x952>
   11a3c:	9a00      	ldr	r2, [sp, #0]
   11a3e:	429a      	cmp	r2, r3
   11a40:	d1a5      	bne.n	1198e <_dtoa_r+0xaa6>
   11a42:	2331      	movs	r3, #49	; 0x31
   11a44:	f109 0901 	add.w	r9, r9, #1
   11a48:	7013      	strb	r3, [r2, #0]
   11a4a:	e6f6      	b.n	1183a <_dtoa_r+0x952>
   11a4c:	4b12      	ldr	r3, [pc, #72]	; (11a98 <_dtoa_r+0xbb0>)
   11a4e:	f7ff bab8 	b.w	10fc2 <_dtoa_r+0xda>
   11a52:	9b21      	ldr	r3, [sp, #132]	; 0x84
   11a54:	2b00      	cmp	r3, #0
   11a56:	f47f aa8e 	bne.w	10f76 <_dtoa_r+0x8e>
   11a5a:	4b10      	ldr	r3, [pc, #64]	; (11a9c <_dtoa_r+0xbb4>)
   11a5c:	f7ff bab1 	b.w	10fc2 <_dtoa_r+0xda>
   11a60:	f1bb 0f00 	cmp.w	fp, #0
   11a64:	dc03      	bgt.n	11a6e <_dtoa_r+0xb86>
   11a66:	9b05      	ldr	r3, [sp, #20]
   11a68:	2b02      	cmp	r3, #2
   11a6a:	f73f aecf 	bgt.w	1180c <_dtoa_r+0x924>
   11a6e:	9d00      	ldr	r5, [sp, #0]
   11a70:	4631      	mov	r1, r6
   11a72:	4650      	mov	r0, sl
   11a74:	f011 fc96 	bl	233a4 <quorem>
   11a78:	9a00      	ldr	r2, [sp, #0]
   11a7a:	f100 0330 	add.w	r3, r0, #48	; 0x30
   11a7e:	f805 3b01 	strb.w	r3, [r5], #1
   11a82:	1aaa      	subs	r2, r5, r2
   11a84:	4593      	cmp	fp, r2
   11a86:	ddb9      	ble.n	119fc <_dtoa_r+0xb14>
   11a88:	4651      	mov	r1, sl
   11a8a:	2300      	movs	r3, #0
   11a8c:	220a      	movs	r2, #10
   11a8e:	4620      	mov	r0, r4
   11a90:	f011 fd74 	bl	2357c <__multadd>
   11a94:	4682      	mov	sl, r0
   11a96:	e7eb      	b.n	11a70 <_dtoa_r+0xb88>
   11a98:	00024e6f 	.word	0x00024e6f
   11a9c:	00024e43 	.word	0x00024e43

00011aa0 <print_satellite_stats>:

	return 0;
}

static void print_satellite_stats(struct nrf_modem_gnss_pvt_data_frame *pvt_data)
{
   11aa0:	b538      	push	{r3, r4, r5, lr}
	uint8_t tracked   = 0;
	uint8_t in_fix    = 0;
	uint8_t unhealthy = 0;

	for (int i = 0; i < NRF_MODEM_GNSS_MAX_SATELLITES; ++i) {
   11aa2:	2400      	movs	r4, #0
	uint8_t unhealthy = 0;
   11aa4:	4623      	mov	r3, r4
	uint8_t in_fix    = 0;
   11aa6:	4622      	mov	r2, r4
	uint8_t tracked   = 0;
   11aa8:	4621      	mov	r1, r4
	for (int i = 0; i < NRF_MODEM_GNSS_MAX_SATELLITES; ++i) {
   11aaa:	e000      	b.n	11aae <print_satellite_stats+0xe>
   11aac:	3401      	adds	r4, #1
   11aae:	2c0b      	cmp	r4, #11
   11ab0:	dc1a      	bgt.n	11ae8 <print_satellite_stats+0x48>
		if (pvt_data->sv[i].sv > 0) {
   11ab2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   11ab6:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   11aba:	f8b5 5042 	ldrh.w	r5, [r5, #66]	; 0x42
   11abe:	2d00      	cmp	r5, #0
   11ac0:	d0f4      	beq.n	11aac <print_satellite_stats+0xc>
			tracked++;
   11ac2:	3101      	adds	r1, #1
   11ac4:	b2c9      	uxtb	r1, r1

			if (pvt_data->sv[i].flags & NRF_MODEM_GNSS_SV_FLAG_USED_IN_FIX) {
   11ac6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   11aca:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   11ace:	f895 504c 	ldrb.w	r5, [r5, #76]	; 0x4c
   11ad2:	f015 0f02 	tst.w	r5, #2
   11ad6:	d001      	beq.n	11adc <print_satellite_stats+0x3c>
				in_fix++;
   11ad8:	3201      	adds	r2, #1
   11ada:	b2d2      	uxtb	r2, r2
			}

			if (pvt_data->sv[i].flags & NRF_MODEM_GNSS_SV_FLAG_UNHEALTHY) {
   11adc:	f015 0f08 	tst.w	r5, #8
   11ae0:	d0e4      	beq.n	11aac <print_satellite_stats+0xc>
				unhealthy++;
   11ae2:	3301      	adds	r3, #1
   11ae4:	b2db      	uxtb	r3, r3
   11ae6:	e7e1      	b.n	11aac <print_satellite_stats+0xc>
			}
		}
	}

	printk("Tracking: %d Using: %d Unhealthy: %d\n", tracked, in_fix, unhealthy);
   11ae8:	4801      	ldr	r0, [pc, #4]	; (11af0 <print_satellite_stats+0x50>)
   11aea:	f00c fa3a 	bl	1df62 <printk>
}
   11aee:	bd38      	pop	{r3, r4, r5, pc}
   11af0:	00024288 	.word	0x00024288

00011af4 <print_fix_data>:

static void print_fix_data(struct nrf_modem_gnss_pvt_data_frame *pvt_data)
{
   11af4:	b510      	push	{r4, lr}
   11af6:	4604      	mov	r4, r0
	printk("Latitude:   %.06f\n", pvt_data->latitude);
   11af8:	e9d0 2300 	ldrd	r2, r3, [r0]
   11afc:	480c      	ldr	r0, [pc, #48]	; (11b30 <print_fix_data+0x3c>)
   11afe:	f00c fa30 	bl	1df62 <printk>
	printk("Longitude:  %.06f\n", pvt_data->longitude);
   11b02:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   11b06:	480b      	ldr	r0, [pc, #44]	; (11b34 <print_fix_data+0x40>)
   11b08:	f00c fa2b 	bl	1df62 <printk>
//	printk("Altitude:   %.01f m\n", pvt_data->altitude);
//	printk("Accuracy:   %.01f m\n", pvt_data->accuracy);
//	printk("Speed:      %.01f m/s\n", pvt_data->speed);
//	printk("Heading:    %.01f deg\n", pvt_data->heading);
	printk("Date:       %02u-%02u-%02u\n", pvt_data->datetime.year,
   11b0c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   11b10:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   11b14:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
   11b16:	4808      	ldr	r0, [pc, #32]	; (11b38 <print_fix_data+0x44>)
   11b18:	f00c fa23 	bl	1df62 <printk>
					       pvt_data->datetime.month,
					       pvt_data->datetime.day);
	printk("Time (UTC): %02u:%02u:%02u\n", pvt_data->datetime.hour,
   11b1c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   11b20:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
   11b24:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   11b28:	4804      	ldr	r0, [pc, #16]	; (11b3c <print_fix_data+0x48>)
   11b2a:	f00c fa1a 	bl	1df62 <printk>
					       pvt_data->datetime.minute,
					       pvt_data->datetime.seconds);

}
   11b2e:	bd10      	pop	{r4, pc}
   11b30:	000242b0 	.word	0x000242b0
   11b34:	000242c4 	.word	0x000242c4
   11b38:	000242d8 	.word	0x000242d8
   11b3c:	000242f4 	.word	0x000242f4

00011b40 <gnss_event_handler>:
{
   11b40:	b500      	push	{lr}
   11b42:	b083      	sub	sp, #12
	switch (event) {
   11b44:	3801      	subs	r0, #1
   11b46:	2805      	cmp	r0, #5
   11b48:	d82d      	bhi.n	11ba6 <gnss_event_handler+0x66>
   11b4a:	e8df f000 	tbb	[pc, r0]
   11b4e:	2c03      	.short	0x2c03
   11b50:	2f292c0d 	.word	0x2f292c0d
		retval = nrf_modem_gnss_read(&last_pvt, sizeof(last_pvt), NRF_MODEM_GNSS_DATA_PVT);
   11b54:	2201      	movs	r2, #1
   11b56:	21d8      	movs	r1, #216	; 0xd8
   11b58:	4816      	ldr	r0, [pc, #88]	; (11bb4 <gnss_event_handler+0x74>)
   11b5a:	f008 f9a3 	bl	19ea4 <nrf_modem_gnss_read>
		if (retval == 0) {
   11b5e:	bb10      	cbnz	r0, 11ba6 <gnss_event_handler+0x66>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   11b60:	4815      	ldr	r0, [pc, #84]	; (11bb8 <gnss_event_handler+0x78>)
   11b62:	f009 fd67 	bl	1b634 <z_impl_k_sem_give>
}
   11b66:	e01e      	b.n	11ba6 <gnss_event_handler+0x66>
		nmea_data = k_malloc(sizeof(struct nrf_modem_gnss_nmea_data_frame));
   11b68:	2053      	movs	r0, #83	; 0x53
   11b6a:	f011 f9bd 	bl	22ee8 <k_malloc>
   11b6e:	9001      	str	r0, [sp, #4]
		if (nmea_data == NULL) {
   11b70:	b150      	cbz	r0, 11b88 <gnss_event_handler+0x48>
		retval = nrf_modem_gnss_read(nmea_data,
   11b72:	2202      	movs	r2, #2
   11b74:	2153      	movs	r1, #83	; 0x53
   11b76:	f008 f995 	bl	19ea4 <nrf_modem_gnss_read>
		if (retval == 0) {
   11b7a:	4603      	mov	r3, r0
   11b7c:	b140      	cbz	r0, 11b90 <gnss_event_handler+0x50>
		if (retval != 0) {
   11b7e:	b193      	cbz	r3, 11ba6 <gnss_event_handler+0x66>
			k_free(nmea_data);
   11b80:	9801      	ldr	r0, [sp, #4]
   11b82:	f011 f9a8 	bl	22ed6 <k_free>
   11b86:	e00e      	b.n	11ba6 <gnss_event_handler+0x66>
			printk("Failed to allocate memory for NMEA\n");
   11b88:	480c      	ldr	r0, [pc, #48]	; (11bbc <gnss_event_handler+0x7c>)
   11b8a:	f00c f9ea 	bl	1df62 <printk>
			break;
   11b8e:	e00a      	b.n	11ba6 <gnss_event_handler+0x66>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
   11b90:	2200      	movs	r2, #0
   11b92:	2300      	movs	r3, #0
   11b94:	a901      	add	r1, sp, #4
   11b96:	480a      	ldr	r0, [pc, #40]	; (11bc0 <gnss_event_handler+0x80>)
   11b98:	f009 fbbc 	bl	1b314 <z_impl_k_msgq_put>
   11b9c:	4603      	mov	r3, r0
   11b9e:	e7ee      	b.n	11b7e <gnss_event_handler+0x3e>
		gnss_blocked = true;
   11ba0:	4b08      	ldr	r3, [pc, #32]	; (11bc4 <gnss_event_handler+0x84>)
   11ba2:	2201      	movs	r2, #1
   11ba4:	701a      	strb	r2, [r3, #0]
}
   11ba6:	b003      	add	sp, #12
   11ba8:	f85d fb04 	ldr.w	pc, [sp], #4
		gnss_blocked = false;
   11bac:	4b05      	ldr	r3, [pc, #20]	; (11bc4 <gnss_event_handler+0x84>)
   11bae:	2200      	movs	r2, #0
   11bb0:	701a      	strb	r2, [r3, #0]
}
   11bb2:	e7f8      	b.n	11ba6 <gnss_event_handler+0x66>
   11bb4:	20014900 	.word	0x20014900
   11bb8:	200148c4 	.word	0x200148c4
   11bbc:	00024310 	.word	0x00024310
   11bc0:	20014864 	.word	0x20014864
   11bc4:	20016c7c 	.word	0x20016c7c

00011bc8 <setup_modem>:
{
   11bc8:	b510      	push	{r4, lr}
	for (int i = 0; i < ARRAY_SIZE(at_commands); i++) {
   11bca:	2400      	movs	r4, #0
   11bcc:	e000      	b.n	11bd0 <setup_modem+0x8>
   11bce:	3401      	adds	r4, #1
   11bd0:	2c03      	cmp	r4, #3
   11bd2:	dc0f      	bgt.n	11bf4 <setup_modem+0x2c>
		if (at_commands[i][0] == '\0') {
   11bd4:	4b08      	ldr	r3, [pc, #32]	; (11bf8 <setup_modem+0x30>)
   11bd6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   11bda:	7803      	ldrb	r3, [r0, #0]
   11bdc:	2b00      	cmp	r3, #0
   11bde:	d0f6      	beq.n	11bce <setup_modem+0x6>
		if (at_cmd_write(at_commands[i], NULL, 0, NULL) != 0) {
   11be0:	2300      	movs	r3, #0
   11be2:	461a      	mov	r2, r3
   11be4:	4619      	mov	r1, r3
   11be6:	f004 fa49 	bl	1607c <at_cmd_write>
   11bea:	2800      	cmp	r0, #0
   11bec:	d0ef      	beq.n	11bce <setup_modem+0x6>
			return -1;
   11bee:	f04f 30ff 	mov.w	r0, #4294967295
   11bf2:	e000      	b.n	11bf6 <setup_modem+0x2e>
	return 0;
   11bf4:	2000      	movs	r0, #0
}
   11bf6:	bd10      	pop	{r4, pc}
   11bf8:	00024604 	.word	0x00024604

00011bfc <init_app>:
{
   11bfc:	b508      	push	{r3, lr}
	if (setup_modem() != 0) {
   11bfe:	f7ff ffe3 	bl	11bc8 <setup_modem>
   11c02:	b9b0      	cbnz	r0, 11c32 <init_app+0x36>
	if (nrf_modem_gnss_init() != 0) {
   11c04:	f008 fa6c 	bl	1a0e0 <nrf_modem_gnss_init>
   11c08:	b9c8      	cbnz	r0, 11c3e <init_app+0x42>
	if (nrf_modem_gnss_event_handler_set(gnss_event_handler) != 0) {
   11c0a:	481f      	ldr	r0, [pc, #124]	; (11c88 <init_app+0x8c>)
   11c0c:	f008 fafc 	bl	1a208 <nrf_modem_gnss_event_handler_set>
   11c10:	b9d8      	cbnz	r0, 11c4a <init_app+0x4e>
	if (nrf_modem_gnss_nmea_mask_set(NRF_MODEM_GNSS_NMEA_RMC_MASK |
   11c12:	201f      	movs	r0, #31
   11c14:	f008 fadc 	bl	1a1d0 <nrf_modem_gnss_nmea_mask_set>
   11c18:	b9e8      	cbnz	r0, 11c56 <init_app+0x5a>
	if (nrf_modem_gnss_fix_retry_set(0) != 0) {
   11c1a:	2000      	movs	r0, #0
   11c1c:	f008 fabc 	bl	1a198 <nrf_modem_gnss_fix_retry_set>
   11c20:	b9f8      	cbnz	r0, 11c62 <init_app+0x66>
	if (nrf_modem_gnss_fix_interval_set(1) != 0) {
   11c22:	2001      	movs	r0, #1
   11c24:	f008 fa9c 	bl	1a160 <nrf_modem_gnss_fix_interval_set>
   11c28:	bb08      	cbnz	r0, 11c6e <init_app+0x72>
	if (nrf_modem_gnss_start() != 0) {
   11c2a:	f008 fa77 	bl	1a11c <nrf_modem_gnss_start>
   11c2e:	bb20      	cbnz	r0, 11c7a <init_app+0x7e>
}
   11c30:	bd08      	pop	{r3, pc}
		printk("Failed to initialize modem\n");
   11c32:	4816      	ldr	r0, [pc, #88]	; (11c8c <init_app+0x90>)
   11c34:	f00c f995 	bl	1df62 <printk>
		return -1;
   11c38:	f04f 30ff 	mov.w	r0, #4294967295
   11c3c:	e7f8      	b.n	11c30 <init_app+0x34>
		printk("Failed to initialize GNSS interface\n");
   11c3e:	4814      	ldr	r0, [pc, #80]	; (11c90 <init_app+0x94>)
   11c40:	f00c f98f 	bl	1df62 <printk>
		return -1;
   11c44:	f04f 30ff 	mov.w	r0, #4294967295
   11c48:	e7f2      	b.n	11c30 <init_app+0x34>
		printk("Failed to set GNSS event handler\n");
   11c4a:	4812      	ldr	r0, [pc, #72]	; (11c94 <init_app+0x98>)
   11c4c:	f00c f989 	bl	1df62 <printk>
		return -1;
   11c50:	f04f 30ff 	mov.w	r0, #4294967295
   11c54:	e7ec      	b.n	11c30 <init_app+0x34>
		printk("Failed to set GNSS NMEA mask\n");
   11c56:	4810      	ldr	r0, [pc, #64]	; (11c98 <init_app+0x9c>)
   11c58:	f00c f983 	bl	1df62 <printk>
		return -1;
   11c5c:	f04f 30ff 	mov.w	r0, #4294967295
   11c60:	e7e6      	b.n	11c30 <init_app+0x34>
		printk("Failed to set GNSS fix retry\n");
   11c62:	480e      	ldr	r0, [pc, #56]	; (11c9c <init_app+0xa0>)
   11c64:	f00c f97d 	bl	1df62 <printk>
		return -1;
   11c68:	f04f 30ff 	mov.w	r0, #4294967295
   11c6c:	e7e0      	b.n	11c30 <init_app+0x34>
		printk("Failed to set GNSS fix interval\n");
   11c6e:	480c      	ldr	r0, [pc, #48]	; (11ca0 <init_app+0xa4>)
   11c70:	f00c f977 	bl	1df62 <printk>
		return -1;
   11c74:	f04f 30ff 	mov.w	r0, #4294967295
   11c78:	e7da      	b.n	11c30 <init_app+0x34>
		printk("Failed to start GNSS\n");
   11c7a:	480a      	ldr	r0, [pc, #40]	; (11ca4 <init_app+0xa8>)
   11c7c:	f00c f971 	bl	1df62 <printk>
		return -1;
   11c80:	f04f 30ff 	mov.w	r0, #4294967295
   11c84:	e7d4      	b.n	11c30 <init_app+0x34>
   11c86:	bf00      	nop
   11c88:	00011b41 	.word	0x00011b41
   11c8c:	00024334 	.word	0x00024334
   11c90:	00024350 	.word	0x00024350
   11c94:	00024378 	.word	0x00024378
   11c98:	0002439c 	.word	0x0002439c
   11c9c:	000243bc 	.word	0x000243bc
   11ca0:	000243dc 	.word	0x000243dc
   11ca4:	00024400 	.word	0x00024400

00011ca8 <nrf_modem_recoverable_error_handler>:
{
   11ca8:	b508      	push	{r3, lr}
   11caa:	4601      	mov	r1, r0
	printk("Modem library recoverable error: %u\n", error);
   11cac:	4801      	ldr	r0, [pc, #4]	; (11cb4 <nrf_modem_recoverable_error_handler+0xc>)
   11cae:	f00c f958 	bl	1df62 <printk>
}
   11cb2:	bd08      	pop	{r3, pc}
   11cb4:	00024418 	.word	0x00024418

00011cb8 <init_nvs_sys>:

}
	

uint8_t init_nvs_sys()
{
   11cb8:	b510      	push	{r4, lr}
   11cba:	b084      	sub	sp, #16
	/* define the nvs file system by settings with:
	 *	sector_size equal to the pagesize,
	 *	3 sectors
	 *	starting at FLASH_AREA_OFFSET(storage)
	 */
	fs.offset = FLASH_AREA_OFFSET(storage);
   11cbc:	4c12      	ldr	r4, [pc, #72]	; (11d08 <init_nvs_sys+0x50>)
   11cbe:	f44f 237a 	mov.w	r3, #1024000	; 0xfa000
   11cc2:	6023      	str	r3, [r4, #0]
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   11cc4:	4811      	ldr	r0, [pc, #68]	; (11d0c <init_nvs_sys+0x54>)
   11cc6:	f009 f8dd 	bl	1ae84 <z_impl_device_get_binding>
	rc = flash_get_page_info_by_offs(
   11cca:	6821      	ldr	r1, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   11ccc:	aa01      	add	r2, sp, #4
   11cce:	f00e f854 	bl	1fd7a <z_impl_flash_get_page_info_by_offs>
		device_get_binding(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL),
		fs.offset, &info);
	if (rc) {
   11cd2:	f010 0fff 	tst.w	r0, #255	; 0xff
   11cd6:	d10d      	bne.n	11cf4 <init_nvs_sys+0x3c>
		printk("Unable to get page info");
        return -1;
	}
	fs.sector_size = info.size;
   11cd8:	480b      	ldr	r0, [pc, #44]	; (11d08 <init_nvs_sys+0x50>)
   11cda:	9b02      	ldr	r3, [sp, #8]
   11cdc:	8183      	strh	r3, [r0, #12]
	fs.sector_count = 3U;
   11cde:	2303      	movs	r3, #3
   11ce0:	81c3      	strh	r3, [r0, #14]

	rc = nvs_init(&fs, DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL);
   11ce2:	490a      	ldr	r1, [pc, #40]	; (11d0c <init_nvs_sys+0x54>)
   11ce4:	f00d fb2a 	bl	1f33c <nvs_init>
	if (rc) {
   11ce8:	f010 0fff 	tst.w	r0, #255	; 0xff
   11cec:	d107      	bne.n	11cfe <init_nvs_sys+0x46>
		printk("Flash Init failed\n");
        return -1;
	}
	return 1;
   11cee:	2001      	movs	r0, #1
}
   11cf0:	b004      	add	sp, #16
   11cf2:	bd10      	pop	{r4, pc}
		printk("Unable to get page info");
   11cf4:	4806      	ldr	r0, [pc, #24]	; (11d10 <init_nvs_sys+0x58>)
   11cf6:	f00c f934 	bl	1df62 <printk>
        return -1;
   11cfa:	20ff      	movs	r0, #255	; 0xff
   11cfc:	e7f8      	b.n	11cf0 <init_nvs_sys+0x38>
		printk("Flash Init failed\n");
   11cfe:	4805      	ldr	r0, [pc, #20]	; (11d14 <init_nvs_sys+0x5c>)
   11d00:	f00c f92f 	bl	1df62 <printk>
        return -1;
   11d04:	20ff      	movs	r0, #255	; 0xff
   11d06:	e7f3      	b.n	11cf0 <init_nvs_sys+0x38>
   11d08:	200159f8 	.word	0x200159f8
   11d0c:	00024440 	.word	0x00024440
   11d10:	00024454 	.word	0x00024454
   11d14:	0002446c 	.word	0x0002446c

00011d18 <read_nvs_sys>:

void read_nvs_sys(void) 
{
   11d18:	b500      	push	{lr}
   11d1a:	b0a7      	sub	sp, #156	; 0x9c
        /* Write and read params */
    if (init_nvs_sys() < 0) {
   11d1c:	f7ff ffcc 	bl	11cb8 <init_nvs_sys>
        printk("Error: init_nvs_sys\n");
    }
	char rbuf[150];

    //READ
	if (nvs_read(&fs, fs.offset, &rbuf, sizeof(rbuf)) < 0) {
   11d20:	4809      	ldr	r0, [pc, #36]	; (11d48 <read_nvs_sys+0x30>)
   11d22:	2396      	movs	r3, #150	; 0x96
   11d24:	466a      	mov	r2, sp
   11d26:	8801      	ldrh	r1, [r0, #0]
   11d28:	f00d fc6d 	bl	1f606 <nvs_read>
   11d2c:	2800      	cmp	r0, #0
   11d2e:	db06      	blt.n	11d3e <read_nvs_sys+0x26>
         printk("Error: nvs_read\n");
    }else{
        printk("%s", rbuf);
   11d30:	4669      	mov	r1, sp
   11d32:	4806      	ldr	r0, [pc, #24]	; (11d4c <read_nvs_sys+0x34>)
   11d34:	f00c f915 	bl	1df62 <printk>
    }

}
   11d38:	b027      	add	sp, #156	; 0x9c
   11d3a:	f85d fb04 	ldr.w	pc, [sp], #4
         printk("Error: nvs_read\n");
   11d3e:	4804      	ldr	r0, [pc, #16]	; (11d50 <read_nvs_sys+0x38>)
   11d40:	f00c f90f 	bl	1df62 <printk>
   11d44:	e7f8      	b.n	11d38 <read_nvs_sys+0x20>
   11d46:	bf00      	nop
   11d48:	200159f8 	.word	0x200159f8
   11d4c:	00024494 	.word	0x00024494
   11d50:	00024480 	.word	0x00024480

00011d54 <write_nvs_sys>:

void write_nvs_sys(char *json) 
{
   11d54:	b530      	push	{r4, r5, lr}
   11d56:	b0a7      	sub	sp, #156	; 0x9c
   11d58:	4601      	mov	r1, r0
    // if (init_nvs_sys() < 0) {
    //     printk("Error: init_nvs_sys\n");
    // }
	char wbuf[150];

    strcpy(wbuf, json);
   11d5a:	2296      	movs	r2, #150	; 0x96
   11d5c:	4668      	mov	r0, sp
   11d5e:	f011 fa8c 	bl	2327a <__strcpy_chk>

    // Write mode
    if(nvs_write(&fs, fs.offset, &wbuf, strlen(wbuf)+1) < 0) {
   11d62:	4c09      	ldr	r4, [pc, #36]	; (11d88 <write_nvs_sys+0x34>)
   11d64:	6825      	ldr	r5, [r4, #0]
   11d66:	4668      	mov	r0, sp
   11d68:	f7ff f882 	bl	10e70 <strlen>
   11d6c:	1c43      	adds	r3, r0, #1
   11d6e:	466a      	mov	r2, sp
   11d70:	b2a9      	uxth	r1, r5
   11d72:	4620      	mov	r0, r4
   11d74:	f00d fb29 	bl	1f3ca <nvs_write>
   11d78:	2800      	cmp	r0, #0
   11d7a:	db01      	blt.n	11d80 <write_nvs_sys+0x2c>
        printk("Error: nvs_write\n");
    }

}
   11d7c:	b027      	add	sp, #156	; 0x9c
   11d7e:	bd30      	pop	{r4, r5, pc}
        printk("Error: nvs_write\n");
   11d80:	4802      	ldr	r0, [pc, #8]	; (11d8c <write_nvs_sys+0x38>)
   11d82:	f00c f8ee 	bl	1df62 <printk>
}
   11d86:	e7f9      	b.n	11d7c <write_nvs_sys+0x28>
   11d88:	200159f8 	.word	0x200159f8
   11d8c:	00024498 	.word	0x00024498

00011d90 <createJson>:
void createJson(struct nrf_modem_gnss_pvt_data_frame *pvt_data) {
   11d90:	b570      	push	{r4, r5, r6, lr}
   11d92:	b096      	sub	sp, #88	; 0x58
   11d94:	4604      	mov	r4, r0
   root = cJSON_CreateObject();
   11d96:	f004 fc99 	bl	166cc <cJSON_CreateObject>
   11d9a:	4d50      	ldr	r5, [pc, #320]	; (11edc <createJson+0x14c>)
   11d9c:	6028      	str	r0, [r5, #0]
   out = cJSON_Print(root);
   11d9e:	f004 fc67 	bl	16670 <cJSON_Print>
	sprintf(year, "%d", pvt_data->datetime.year); 
   11da2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   11da4:	4e4e      	ldr	r6, [pc, #312]	; (11ee0 <createJson+0x150>)
   11da6:	9300      	str	r3, [sp, #0]
   11da8:	4633      	mov	r3, r6
   11daa:	2205      	movs	r2, #5
   11dac:	2100      	movs	r1, #0
   11dae:	a814      	add	r0, sp, #80	; 0x50
   11db0:	f011 fa22 	bl	231f8 <__sprintf_chk>
	sprintf(month, "%d", pvt_data->datetime.month); 
   11db4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   11db8:	9300      	str	r3, [sp, #0]
   11dba:	4633      	mov	r3, r6
   11dbc:	2205      	movs	r2, #5
   11dbe:	2100      	movs	r1, #0
   11dc0:	a812      	add	r0, sp, #72	; 0x48
   11dc2:	f011 fa19 	bl	231f8 <__sprintf_chk>
	sprintf(day, "%d", pvt_data->datetime.day); 
   11dc6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   11dca:	9300      	str	r3, [sp, #0]
   11dcc:	4633      	mov	r3, r6
   11dce:	2205      	movs	r2, #5
   11dd0:	2100      	movs	r1, #0
   11dd2:	a810      	add	r0, sp, #64	; 0x40
   11dd4:	f011 fa10 	bl	231f8 <__sprintf_chk>
	sprintf(hour, "%d", pvt_data->datetime.hour); 
   11dd8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   11ddc:	9300      	str	r3, [sp, #0]
   11dde:	4633      	mov	r3, r6
   11de0:	2205      	movs	r2, #5
   11de2:	2100      	movs	r1, #0
   11de4:	a80e      	add	r0, sp, #56	; 0x38
   11de6:	f011 fa07 	bl	231f8 <__sprintf_chk>
	sprintf(minute, "%d", pvt_data->datetime.minute); 
   11dea:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   11dee:	9300      	str	r3, [sp, #0]
   11df0:	4633      	mov	r3, r6
   11df2:	2205      	movs	r2, #5
   11df4:	2100      	movs	r1, #0
   11df6:	a80c      	add	r0, sp, #48	; 0x30
   11df8:	f011 f9fe 	bl	231f8 <__sprintf_chk>
	sprintf(seconds, "%d", pvt_data->datetime.seconds); 
   11dfc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   11e00:	9300      	str	r3, [sp, #0]
   11e02:	4633      	mov	r3, r6
   11e04:	2205      	movs	r2, #5
   11e06:	2100      	movs	r1, #0
   11e08:	a80a      	add	r0, sp, #40	; 0x28
   11e0a:	f011 f9f5 	bl	231f8 <__sprintf_chk>
	strcat(date, day);
   11e0e:	220f      	movs	r2, #15
   11e10:	a910      	add	r1, sp, #64	; 0x40
   11e12:	a806      	add	r0, sp, #24
   11e14:	f011 fa0c 	bl	23230 <__strcat_chk>
	strcat(date, "-");
   11e18:	4e32      	ldr	r6, [pc, #200]	; (11ee4 <createJson+0x154>)
   11e1a:	220f      	movs	r2, #15
   11e1c:	4631      	mov	r1, r6
   11e1e:	a806      	add	r0, sp, #24
   11e20:	f011 fa06 	bl	23230 <__strcat_chk>
	strcat(date, month);
   11e24:	220f      	movs	r2, #15
   11e26:	a912      	add	r1, sp, #72	; 0x48
   11e28:	a806      	add	r0, sp, #24
   11e2a:	f011 fa01 	bl	23230 <__strcat_chk>
	strcat(date, "-");
   11e2e:	220f      	movs	r2, #15
   11e30:	4631      	mov	r1, r6
   11e32:	a806      	add	r0, sp, #24
   11e34:	f011 f9fc 	bl	23230 <__strcat_chk>
	strcat(date, year);
   11e38:	220f      	movs	r2, #15
   11e3a:	a914      	add	r1, sp, #80	; 0x50
   11e3c:	a806      	add	r0, sp, #24
   11e3e:	f011 f9f7 	bl	23230 <__strcat_chk>
	strcat(time, hour);
   11e42:	220f      	movs	r2, #15
   11e44:	a90e      	add	r1, sp, #56	; 0x38
   11e46:	a802      	add	r0, sp, #8
   11e48:	f011 f9f2 	bl	23230 <__strcat_chk>
	strcat(time, ":");
   11e4c:	4e26      	ldr	r6, [pc, #152]	; (11ee8 <createJson+0x158>)
   11e4e:	220f      	movs	r2, #15
   11e50:	4631      	mov	r1, r6
   11e52:	a802      	add	r0, sp, #8
   11e54:	f011 f9ec 	bl	23230 <__strcat_chk>
	strcat(time, minute);
   11e58:	220f      	movs	r2, #15
   11e5a:	a90c      	add	r1, sp, #48	; 0x30
   11e5c:	a802      	add	r0, sp, #8
   11e5e:	f011 f9e7 	bl	23230 <__strcat_chk>
	strcat(time, ":");
   11e62:	220f      	movs	r2, #15
   11e64:	4631      	mov	r1, r6
   11e66:	a802      	add	r0, sp, #8
   11e68:	f011 f9e2 	bl	23230 <__strcat_chk>
	strcat(time, seconds);
   11e6c:	220f      	movs	r2, #15
   11e6e:	a90a      	add	r1, sp, #40	; 0x28
   11e70:	a802      	add	r0, sp, #8
   11e72:	f011 f9dd 	bl	23230 <__strcat_chk>
	cJSON_AddItemToObject(root, "Latitude:", cJSON_CreateNumber(pvt_data->latitude));
   11e76:	682e      	ldr	r6, [r5, #0]
   11e78:	ed94 0b00 	vldr	d0, [r4]
   11e7c:	f7ff f800 	bl	10e80 <cJSON_CreateNumber>
   11e80:	4602      	mov	r2, r0
   11e82:	491a      	ldr	r1, [pc, #104]	; (11eec <createJson+0x15c>)
   11e84:	4630      	mov	r0, r6
   11e86:	f004 fbfb 	bl	16680 <cJSON_AddItemToObject>
	cJSON_AddItemToObject(root, "Longitude", cJSON_CreateNumber(pvt_data->longitude));
   11e8a:	682e      	ldr	r6, [r5, #0]
   11e8c:	ed94 0b02 	vldr	d0, [r4, #8]
   11e90:	f7fe fff6 	bl	10e80 <cJSON_CreateNumber>
   11e94:	4602      	mov	r2, r0
   11e96:	4916      	ldr	r1, [pc, #88]	; (11ef0 <createJson+0x160>)
   11e98:	4630      	mov	r0, r6
   11e9a:	f004 fbf1 	bl	16680 <cJSON_AddItemToObject>
    cJSON_AddItemToObject(root, "Date", cJSON_CreateString(date));
   11e9e:	682c      	ldr	r4, [r5, #0]
   11ea0:	a806      	add	r0, sp, #24
   11ea2:	f004 fbf9 	bl	16698 <cJSON_CreateString>
   11ea6:	4602      	mov	r2, r0
   11ea8:	4912      	ldr	r1, [pc, #72]	; (11ef4 <createJson+0x164>)
   11eaa:	4620      	mov	r0, r4
   11eac:	f004 fbe8 	bl	16680 <cJSON_AddItemToObject>
    cJSON_AddItemToObject(root, "Time", cJSON_CreateString(time));
   11eb0:	682c      	ldr	r4, [r5, #0]
   11eb2:	a802      	add	r0, sp, #8
   11eb4:	f004 fbf0 	bl	16698 <cJSON_CreateString>
   11eb8:	4602      	mov	r2, r0
   11eba:	490f      	ldr	r1, [pc, #60]	; (11ef8 <createJson+0x168>)
   11ebc:	4620      	mov	r0, r4
   11ebe:	f004 fbdf 	bl	16680 <cJSON_AddItemToObject>
	out = cJSON_Print(root);
   11ec2:	6828      	ldr	r0, [r5, #0]
   11ec4:	f004 fbd4 	bl	16670 <cJSON_Print>
   11ec8:	4604      	mov	r4, r0
	printk("%s\n", out);
   11eca:	4601      	mov	r1, r0
   11ecc:	480b      	ldr	r0, [pc, #44]	; (11efc <createJson+0x16c>)
   11ece:	f00c f848 	bl	1df62 <printk>
write_nvs_sys(out);
   11ed2:	4620      	mov	r0, r4
   11ed4:	f7ff ff3e 	bl	11d54 <write_nvs_sys>
}
   11ed8:	b016      	add	sp, #88	; 0x58
   11eda:	bd70      	pop	{r4, r5, r6, pc}
   11edc:	20015a28 	.word	0x20015a28
   11ee0:	000244ac 	.word	0x000244ac
   11ee4:	000244b0 	.word	0x000244b0
   11ee8:	000244bc 	.word	0x000244bc
   11eec:	000244b4 	.word	0x000244b4
   11ef0:	000244c0 	.word	0x000244c0
   11ef4:	000244cc 	.word	0x000244cc
   11ef8:	000244d4 	.word	0x000244d4
   11efc:	000244dc 	.word	0x000244dc

00011f00 <main>:
	return false;

}

int main(void)
{
   11f00:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f02:	b083      	sub	sp, #12
	uint8_t cnt = 0;
	uint64_t fix_timestamp = 0;
	struct nrf_modem_gnss_nmea_data_frame *nmea_data;

	printk("Starting GPS sample\n");
   11f04:	4861      	ldr	r0, [pc, #388]	; (1208c <main+0x18c>)
   11f06:	f00c f82c 	bl	1df62 <printk>

	if (init_app() != 0) {
   11f0a:	f7ff fe77 	bl	11bfc <init_app>
   11f0e:	b118      	cbz	r0, 11f18 <main+0x18>
		events[0].state = K_POLL_STATE_NOT_READY;
		events[1].state = K_POLL_STATE_NOT_READY;
	}

	return 0;
}
   11f10:	f04f 30ff 	mov.w	r0, #4294967295
   11f14:	b003      	add	sp, #12
   11f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	printk("Getting GNSS data...\n");
   11f18:	485d      	ldr	r0, [pc, #372]	; (12090 <main+0x190>)
   11f1a:	f00c f822 	bl	1df62 <printk>
	uint64_t fix_timestamp = 0;
   11f1e:	2400      	movs	r4, #0
   11f20:	4625      	mov	r5, r4
	uint8_t cnt = 0;
   11f22:	4626      	mov	r6, r4
   11f24:	e089      	b.n	1203a <main+0x13a>
		    k_sem_take(events[0].sem, K_NO_WAIT) == 0) {
   11f26:	6938      	ldr	r0, [r7, #16]
	return z_impl_k_sem_take(sem, timeout);
   11f28:	2200      	movs	r2, #0
   11f2a:	2300      	movs	r3, #0
   11f2c:	f009 fbaa 	bl	1b684 <z_impl_k_sem_take>
		if (events[0].state == K_POLL_STATE_SEM_AVAILABLE &&
   11f30:	2800      	cmp	r0, #0
   11f32:	f040 8092 	bne.w	1205a <main+0x15a>
			    !agps_data_download_ongoing()) {
   11f36:	f00b ffab 	bl	1de90 <agps_data_download_ongoing>
			if (!IS_ENABLED(CONFIG_GPS_SAMPLE_NMEA_ONLY) &&
   11f3a:	2800      	cmp	r0, #0
   11f3c:	f040 808d 	bne.w	1205a <main+0x15a>
				printk("\033[1;1H");
   11f40:	4854      	ldr	r0, [pc, #336]	; (12094 <main+0x194>)
   11f42:	f00c f80e 	bl	1df62 <printk>
				printk("\033[2J");
   11f46:	4854      	ldr	r0, [pc, #336]	; (12098 <main+0x198>)
   11f48:	f00c f80b 	bl	1df62 <printk>
				print_satellite_stats(&last_pvt);
   11f4c:	4853      	ldr	r0, [pc, #332]	; (1209c <main+0x19c>)
   11f4e:	f7ff fda7 	bl	11aa0 <print_satellite_stats>
				if (gnss_blocked) {
   11f52:	4b53      	ldr	r3, [pc, #332]	; (120a0 <main+0x1a0>)
   11f54:	781b      	ldrb	r3, [r3, #0]
   11f56:	bb63      	cbnz	r3, 11fb2 <main+0xb2>
				printk("---------------------------------\n");
   11f58:	4852      	ldr	r0, [pc, #328]	; (120a4 <main+0x1a4>)
   11f5a:	f00c f802 	bl	1df62 <printk>
				if (last_pvt.flags & NRF_MODEM_GNSS_PVT_FLAG_FIX_VALID) {
   11f5e:	4b4f      	ldr	r3, [pc, #316]	; (1209c <main+0x19c>)
   11f60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   11f64:	f013 0f01 	tst.w	r3, #1
   11f68:	d027      	beq.n	11fba <main+0xba>
	return z_impl_k_uptime_ticks();
   11f6a:	f010 fee4 	bl	22d36 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   11f6e:	014c      	lsls	r4, r1, #5
   11f70:	0143      	lsls	r3, r0, #5
   11f72:	ea44 62d0 	orr.w	r2, r4, r0, lsr #27
   11f76:	1a1b      	subs	r3, r3, r0
   11f78:	eb62 0201 	sbc.w	r2, r2, r1
   11f7c:	0094      	lsls	r4, r2, #2
   11f7e:	ea44 7493 	orr.w	r4, r4, r3, lsr #30
   11f82:	009d      	lsls	r5, r3, #2
   11f84:	4622      	mov	r2, r4
   11f86:	182b      	adds	r3, r5, r0
   11f88:	eb41 0202 	adc.w	r2, r1, r2
   11f8c:	00d1      	lsls	r1, r2, #3
   11f8e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   11f92:	00d8      	lsls	r0, r3, #3
   11f94:	0bc4      	lsrs	r4, r0, #15
   11f96:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
   11f9a:	0bcd      	lsrs	r5, r1, #15
					print_fix_data(&last_pvt);
   11f9c:	4f3f      	ldr	r7, [pc, #252]	; (1209c <main+0x19c>)
   11f9e:	4638      	mov	r0, r7
   11fa0:	f7ff fda8 	bl	11af4 <print_fix_data>
					createJson(&last_pvt);
   11fa4:	4638      	mov	r0, r7
   11fa6:	f7ff fef3 	bl	11d90 <createJson>
				printk("\nNMEA strings:\n\n");
   11faa:	483f      	ldr	r0, [pc, #252]	; (120a8 <main+0x1a8>)
   11fac:	f00b ffd9 	bl	1df62 <printk>
   11fb0:	e053      	b.n	1205a <main+0x15a>
					printk("GNSS operation blocked by LTE\n");
   11fb2:	483e      	ldr	r0, [pc, #248]	; (120ac <main+0x1ac>)
   11fb4:	f00b ffd5 	bl	1df62 <printk>
   11fb8:	e7ce      	b.n	11f58 <main+0x58>
   11fba:	f010 febc 	bl	22d36 <z_impl_k_uptime_ticks>
   11fbe:	014f      	lsls	r7, r1, #5
   11fc0:	0143      	lsls	r3, r0, #5
   11fc2:	ea47 62d0 	orr.w	r2, r7, r0, lsr #27
   11fc6:	1a1b      	subs	r3, r3, r0
   11fc8:	eb62 0201 	sbc.w	r2, r2, r1
   11fcc:	0097      	lsls	r7, r2, #2
   11fce:	ea47 7793 	orr.w	r7, r7, r3, lsr #30
   11fd2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   11fd6:	463a      	mov	r2, r7
   11fd8:	eb1c 0300 	adds.w	r3, ip, r0
   11fdc:	eb41 0202 	adc.w	r2, r1, r2
   11fe0:	00d7      	lsls	r7, r2, #3
   11fe2:	ea47 7753 	orr.w	r7, r7, r3, lsr #29
   11fe6:	00d9      	lsls	r1, r3, #3
   11fe8:	0bc8      	lsrs	r0, r1, #15
   11fea:	ea40 4047 	orr.w	r0, r0, r7, lsl #17
   11fee:	0bf9      	lsrs	r1, r7, #15
					printk("Seconds since last fix: %lld\n",
   11ff0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11ff4:	2300      	movs	r3, #0
   11ff6:	1b00      	subs	r0, r0, r4
   11ff8:	eb61 0105 	sbc.w	r1, r1, r5
   11ffc:	f7fe fdb4 	bl	10b68 <__aeabi_uldivmod>
   12000:	4602      	mov	r2, r0
   12002:	460b      	mov	r3, r1
   12004:	482a      	ldr	r0, [pc, #168]	; (120b0 <main+0x1b0>)
   12006:	f00b ffac 	bl	1df62 <printk>
			   	     read_nvs_sys();
   1200a:	f7ff fe85 	bl	11d18 <read_nvs_sys>
					cnt++;
   1200e:	1c73      	adds	r3, r6, #1
   12010:	b2de      	uxtb	r6, r3
					printk("Searching [%c]\n", update_indicator[cnt%4]);
   12012:	f003 0303 	and.w	r3, r3, #3
   12016:	4a27      	ldr	r2, [pc, #156]	; (120b4 <main+0x1b4>)
   12018:	5cd1      	ldrb	r1, [r2, r3]
   1201a:	4827      	ldr	r0, [pc, #156]	; (120b8 <main+0x1b8>)
   1201c:	f00b ffa1 	bl	1df62 <printk>
   12020:	e7c3      	b.n	11faa <main+0xaa>
			k_free(nmea_data);
   12022:	9801      	ldr	r0, [sp, #4]
   12024:	f010 ff57 	bl	22ed6 <k_free>
		events[0].state = K_POLL_STATE_NOT_READY;
   12028:	4b24      	ldr	r3, [pc, #144]	; (120bc <main+0x1bc>)
   1202a:	68da      	ldr	r2, [r3, #12]
   1202c:	f36f 3252 	bfc	r2, #13, #6
   12030:	60da      	str	r2, [r3, #12]
		events[1].state = K_POLL_STATE_NOT_READY;
   12032:	6a1a      	ldr	r2, [r3, #32]
   12034:	f36f 3252 	bfc	r2, #13, #6
   12038:	621a      	str	r2, [r3, #32]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1203a:	4f20      	ldr	r7, [pc, #128]	; (120bc <main+0x1bc>)
   1203c:	f04f 32ff 	mov.w	r2, #4294967295
   12040:	f04f 33ff 	mov.w	r3, #4294967295
   12044:	2102      	movs	r1, #2
   12046:	4638      	mov	r0, r7
   12048:	f00a f8e2 	bl	1c210 <z_impl_k_poll>
		if (events[0].state == K_POLL_STATE_SEM_AVAILABLE &&
   1204c:	68fb      	ldr	r3, [r7, #12]
   1204e:	f403 23fc 	and.w	r3, r3, #516096	; 0x7e000
   12052:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   12056:	f43f af66 	beq.w	11f26 <main+0x26>
		if (events[1].state == K_POLL_STATE_MSGQ_DATA_AVAILABLE &&
   1205a:	4b18      	ldr	r3, [pc, #96]	; (120bc <main+0x1bc>)
   1205c:	6a1b      	ldr	r3, [r3, #32]
   1205e:	f403 23fc 	and.w	r3, r3, #516096	; 0x7e000
   12062:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   12066:	d1df      	bne.n	12028 <main+0x128>
		    k_msgq_get(events[1].msgq, &nmea_data, K_NO_WAIT) == 0) {
   12068:	4b14      	ldr	r3, [pc, #80]	; (120bc <main+0x1bc>)
   1206a:	6a58      	ldr	r0, [r3, #36]	; 0x24
	return z_impl_k_msgq_get(msgq, data, timeout);
   1206c:	2200      	movs	r2, #0
   1206e:	2300      	movs	r3, #0
   12070:	a901      	add	r1, sp, #4
   12072:	f009 f9ad 	bl	1b3d0 <z_impl_k_msgq_get>
		if (events[1].state == K_POLL_STATE_MSGQ_DATA_AVAILABLE &&
   12076:	2800      	cmp	r0, #0
   12078:	d1d6      	bne.n	12028 <main+0x128>
			if (!agps_data_download_ongoing()) {
   1207a:	f00b ff09 	bl	1de90 <agps_data_download_ongoing>
   1207e:	2800      	cmp	r0, #0
   12080:	d1cf      	bne.n	12022 <main+0x122>
				printk("%s", nmea_data->nmea_str);
   12082:	9901      	ldr	r1, [sp, #4]
   12084:	480e      	ldr	r0, [pc, #56]	; (120c0 <main+0x1c0>)
   12086:	f00b ff6c 	bl	1df62 <printk>
   1208a:	e7ca      	b.n	12022 <main+0x122>
   1208c:	000244e0 	.word	0x000244e0
   12090:	000244f8 	.word	0x000244f8
   12094:	00024510 	.word	0x00024510
   12098:	00024518 	.word	0x00024518
   1209c:	20014900 	.word	0x20014900
   120a0:	20016c7c 	.word	0x20016c7c
   120a4:	00024540 	.word	0x00024540
   120a8:	00024594 	.word	0x00024594
   120ac:	00024520 	.word	0x00024520
   120b0:	00024564 	.word	0x00024564
   120b4:	00024614 	.word	0x00024614
   120b8:	00024584 	.word	0x00024584
   120bc:	20014500 	.word	0x20014500
   120c0:	00024494 	.word	0x00024494

000120c4 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   120c4:	b430      	push	{r4, r5}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
   120c6:	2400      	movs	r4, #0
   120c8:	4294      	cmp	r4, r2
   120ca:	d20f      	bcs.n	120ec <crc8_ccitt+0x28>
		val ^= p[i];
   120cc:	5d0b      	ldrb	r3, [r1, r4]
   120ce:	4043      	eors	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   120d0:	0918      	lsrs	r0, r3, #4
   120d2:	4d07      	ldr	r5, [pc, #28]	; (120f0 <crc8_ccitt+0x2c>)
   120d4:	5628      	ldrsb	r0, [r5, r0]
   120d6:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   120da:	b2c3      	uxtb	r3, r0
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   120dc:	f3c0 1003 	ubfx	r0, r0, #4, #4
   120e0:	5628      	ldrsb	r0, [r5, r0]
   120e2:	ea80 1003 	eor.w	r0, r0, r3, lsl #4
   120e6:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   120e8:	3401      	adds	r4, #1
   120ea:	e7ed      	b.n	120c8 <crc8_ccitt+0x4>
	}
	return val;
}
   120ec:	bc30      	pop	{r4, r5}
   120ee:	4770      	bx	lr
   120f0:	00024618 	.word	0x00024618

000120f4 <_check_fd>:
	errno = ENFILE;
	return -1;
}

static int _check_fd(int fd)
{
   120f4:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   120f6:	2803      	cmp	r0, #3
   120f8:	d808      	bhi.n	1210c <_check_fd+0x18>
		return -1;
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
   120fa:	0140      	lsls	r0, r0, #5
   120fc:	3008      	adds	r0, #8
   120fe:	4b0a      	ldr	r3, [pc, #40]	; (12128 <_check_fd+0x34>)
   12100:	4418      	add	r0, r3
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12102:	e8d0 3faf 	lda	r3, [r0]
   12106:	b143      	cbz	r3, 1211a <_check_fd+0x26>
		errno = EBADF;
		return -1;
	}

	return 0;
   12108:	2000      	movs	r0, #0
}
   1210a:	bd08      	pop	{r3, pc}
		errno = EBADF;
   1210c:	f00d fd19 	bl	1fb42 <__errno>
   12110:	2309      	movs	r3, #9
   12112:	6003      	str	r3, [r0, #0]
		return -1;
   12114:	f04f 30ff 	mov.w	r0, #4294967295
   12118:	e7f7      	b.n	1210a <_check_fd+0x16>
		errno = EBADF;
   1211a:	f00d fd12 	bl	1fb42 <__errno>
   1211e:	2309      	movs	r3, #9
   12120:	6003      	str	r3, [r0, #0]
		return -1;
   12122:	f04f 30ff 	mov.w	r0, #4294967295
   12126:	e7f0      	b.n	1210a <_check_fd+0x16>
   12128:	20015a2c 	.word	0x20015a2c

0001212c <_find_fd_entry>:
{
   1212c:	b508      	push	{r3, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   1212e:	2000      	movs	r0, #0
   12130:	2803      	cmp	r0, #3
   12132:	dc09      	bgt.n	12148 <_find_fd_entry+0x1c>
		if (!atomic_get(&fdtable[fd].refcount)) {
   12134:	0143      	lsls	r3, r0, #5
   12136:	f103 0208 	add.w	r2, r3, #8
   1213a:	4b07      	ldr	r3, [pc, #28]	; (12158 <_find_fd_entry+0x2c>)
   1213c:	4413      	add	r3, r2
   1213e:	e8d3 3faf 	lda	r3, [r3]
   12142:	b13b      	cbz	r3, 12154 <_find_fd_entry+0x28>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   12144:	3001      	adds	r0, #1
   12146:	e7f3      	b.n	12130 <_find_fd_entry+0x4>
	errno = ENFILE;
   12148:	f00d fcfb 	bl	1fb42 <__errno>
   1214c:	2317      	movs	r3, #23
   1214e:	6003      	str	r3, [r0, #0]
	return -1;
   12150:	f04f 30ff 	mov.w	r0, #4294967295
}
   12154:	bd08      	pop	{r3, pc}
   12156:	bf00      	nop
   12158:	20015a2c 	.word	0x20015a2c

0001215c <z_fd_unref>:
{
   1215c:	b430      	push	{r4, r5}
   1215e:	4602      	mov	r2, r0
		old_rc = atomic_get(&fdtable[fd].refcount);
   12160:	0153      	lsls	r3, r2, #5
   12162:	f103 0108 	add.w	r1, r3, #8
   12166:	4b0f      	ldr	r3, [pc, #60]	; (121a4 <z_fd_unref+0x48>)
   12168:	440b      	add	r3, r1
   1216a:	e8d3 1faf 	lda	r1, [r3]
   1216e:	460c      	mov	r4, r1
		if (!old_rc) {
   12170:	b1a9      	cbz	r1, 1219e <z_fd_unref+0x42>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   12172:	1e48      	subs	r0, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   12174:	e8d3 5fef 	ldaex	r5, [r3]
   12178:	428d      	cmp	r5, r1
   1217a:	d104      	bne.n	12186 <z_fd_unref+0x2a>
   1217c:	e8c3 0fec 	stlex	ip, r0, [r3]
   12180:	f1bc 0f00 	cmp.w	ip, #0
   12184:	d1f6      	bne.n	12174 <z_fd_unref+0x18>
   12186:	d1eb      	bne.n	12160 <z_fd_unref+0x4>
	if (old_rc != 1) {
   12188:	2c01      	cmp	r4, #1
   1218a:	d106      	bne.n	1219a <z_fd_unref+0x3e>
	fdtable[fd].obj = NULL;
   1218c:	4b05      	ldr	r3, [pc, #20]	; (121a4 <z_fd_unref+0x48>)
   1218e:	0151      	lsls	r1, r2, #5
   12190:	eb03 1242 	add.w	r2, r3, r2, lsl #5
   12194:	2000      	movs	r0, #0
   12196:	5058      	str	r0, [r3, r1]
	fdtable[fd].vtable = NULL;
   12198:	6050      	str	r0, [r2, #4]
}
   1219a:	bc30      	pop	{r4, r5}
   1219c:	4770      	bx	lr
			return 0;
   1219e:	4608      	mov	r0, r1
   121a0:	e7fb      	b.n	1219a <z_fd_unref+0x3e>
   121a2:	bf00      	nop
   121a4:	20015a2c 	.word	0x20015a2c

000121a8 <z_fd_ref>:
	return atomic_inc(&fdtable[fd].refcount) + 1;
   121a8:	0140      	lsls	r0, r0, #5
   121aa:	3008      	adds	r0, #8
   121ac:	4b05      	ldr	r3, [pc, #20]	; (121c4 <z_fd_ref+0x1c>)
   121ae:	4403      	add	r3, r0
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   121b0:	e8d3 0fef 	ldaex	r0, [r3]
   121b4:	1c42      	adds	r2, r0, #1
   121b6:	e8c3 2fe1 	stlex	r1, r2, [r3]
   121ba:	2900      	cmp	r1, #0
   121bc:	d1f8      	bne.n	121b0 <z_fd_ref+0x8>
}
   121be:	3001      	adds	r0, #1
   121c0:	4770      	bx	lr
   121c2:	bf00      	nop
   121c4:	20015a2c 	.word	0x20015a2c

000121c8 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   121c8:	b570      	push	{r4, r5, r6, lr}
   121ca:	4604      	mov	r4, r0
   121cc:	460d      	mov	r5, r1
   121ce:	4616      	mov	r6, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   121d0:	f7ff ff90 	bl	120f4 <_check_fd>
   121d4:	2800      	cmp	r0, #0
   121d6:	db0f      	blt.n	121f8 <z_get_fd_obj+0x30>
		return NULL;
	}

	entry = &fdtable[fd];

	if (vtable != NULL && entry->vtable != vtable) {
   121d8:	b12d      	cbz	r5, 121e6 <z_get_fd_obj+0x1e>
   121da:	4b08      	ldr	r3, [pc, #32]	; (121fc <z_get_fd_obj+0x34>)
   121dc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   121e0:	685b      	ldr	r3, [r3, #4]
   121e2:	42ab      	cmp	r3, r5
   121e4:	d103      	bne.n	121ee <z_get_fd_obj+0x26>
		errno = err;
		return NULL;
	}

	return entry->obj;
   121e6:	0164      	lsls	r4, r4, #5
   121e8:	4b04      	ldr	r3, [pc, #16]	; (121fc <z_get_fd_obj+0x34>)
   121ea:	5918      	ldr	r0, [r3, r4]
}
   121ec:	bd70      	pop	{r4, r5, r6, pc}
		errno = err;
   121ee:	f00d fca8 	bl	1fb42 <__errno>
   121f2:	6006      	str	r6, [r0, #0]
		return NULL;
   121f4:	2000      	movs	r0, #0
   121f6:	e7f9      	b.n	121ec <z_get_fd_obj+0x24>
		return NULL;
   121f8:	2000      	movs	r0, #0
   121fa:	e7f7      	b.n	121ec <z_get_fd_obj+0x24>
   121fc:	20015a2c 	.word	0x20015a2c

00012200 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
   12200:	b570      	push	{r4, r5, r6, lr}
   12202:	4604      	mov	r4, r0
   12204:	460e      	mov	r6, r1
   12206:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   12208:	f7ff ff74 	bl	120f4 <_check_fd>
   1220c:	2800      	cmp	r0, #0
   1220e:	db10      	blt.n	12232 <z_get_fd_obj_and_vtable+0x32>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
   12210:	4b09      	ldr	r3, [pc, #36]	; (12238 <z_get_fd_obj_and_vtable+0x38>)
   12212:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   12216:	685b      	ldr	r3, [r3, #4]
   12218:	6033      	str	r3, [r6, #0]

	if (lock) {
   1221a:	b135      	cbz	r5, 1222a <z_get_fd_obj_and_vtable+0x2a>
		*lock = &entry->lock;
   1221c:	0163      	lsls	r3, r4, #5
   1221e:	f103 0208 	add.w	r2, r3, #8
   12222:	4b05      	ldr	r3, [pc, #20]	; (12238 <z_get_fd_obj_and_vtable+0x38>)
   12224:	4413      	add	r3, r2
   12226:	3304      	adds	r3, #4
   12228:	602b      	str	r3, [r5, #0]
	}

	return entry->obj;
   1222a:	0164      	lsls	r4, r4, #5
   1222c:	4b02      	ldr	r3, [pc, #8]	; (12238 <z_get_fd_obj_and_vtable+0x38>)
   1222e:	5918      	ldr	r0, [r3, r4]
}
   12230:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   12232:	2000      	movs	r0, #0
   12234:	e7fc      	b.n	12230 <z_get_fd_obj_and_vtable+0x30>
   12236:	bf00      	nop
   12238:	20015a2c 	.word	0x20015a2c

0001223c <z_reserve_fd>:

int z_reserve_fd(void)
{
   1223c:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   1223e:	f04f 32ff 	mov.w	r2, #4294967295
   12242:	f04f 33ff 	mov.w	r3, #4294967295
   12246:	480e      	ldr	r0, [pc, #56]	; (12280 <z_reserve_fd+0x44>)
   12248:	f009 f926 	bl	1b498 <z_impl_k_mutex_lock>
	int fd;

	(void)k_mutex_lock(&fdtable_lock, K_FOREVER);

	fd = _find_fd_entry();
   1224c:	f7ff ff6e 	bl	1212c <_find_fd_entry>
	if (fd >= 0) {
   12250:	1e04      	subs	r4, r0, #0
   12252:	da04      	bge.n	1225e <z_reserve_fd+0x22>
	return z_impl_k_mutex_unlock(mutex);
   12254:	480a      	ldr	r0, [pc, #40]	; (12280 <z_reserve_fd+0x44>)
   12256:	f009 f9a9 	bl	1b5ac <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   1225a:	4620      	mov	r0, r4
   1225c:	bd10      	pop	{r4, pc}
		(void)z_fd_ref(fd);
   1225e:	4620      	mov	r0, r4
   12260:	f7ff ffa2 	bl	121a8 <z_fd_ref>
		fdtable[fd].obj = NULL;
   12264:	4807      	ldr	r0, [pc, #28]	; (12284 <z_reserve_fd+0x48>)
   12266:	0163      	lsls	r3, r4, #5
   12268:	eb00 1144 	add.w	r1, r0, r4, lsl #5
   1226c:	2200      	movs	r2, #0
   1226e:	50c2      	str	r2, [r0, r3]
		fdtable[fd].vtable = NULL;
   12270:	604a      	str	r2, [r1, #4]
		k_mutex_init(&fdtable[fd].lock);
   12272:	3308      	adds	r3, #8
   12274:	4418      	add	r0, r3
   12276:	3004      	adds	r0, #4
	return z_impl_k_mutex_init(mutex);
   12278:	f010 fb66 	bl	22948 <z_impl_k_mutex_init>
   1227c:	e7ea      	b.n	12254 <z_reserve_fd+0x18>
   1227e:	bf00      	nop
   12280:	200147d0 	.word	0x200147d0
   12284:	20015a2c 	.word	0x20015a2c

00012288 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   12288:	b538      	push	{r3, r4, r5, lr}
   1228a:	4603      	mov	r3, r0
   1228c:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   1228e:	4a09      	ldr	r2, [pc, #36]	; (122b4 <z_finalize_fd+0x2c>)
   12290:	015d      	lsls	r5, r3, #5
   12292:	eb02 1443 	add.w	r4, r2, r3, lsl #5
   12296:	5151      	str	r1, [r2, r5]
	fdtable[fd].vtable = vtable;
   12298:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   1229a:	b150      	cbz	r0, 122b2 <z_finalize_fd+0x2a>
   1229c:	68c2      	ldr	r2, [r0, #12]
   1229e:	b142      	cbz	r2, 122b2 <z_finalize_fd+0x2a>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   122a0:	462b      	mov	r3, r5
   122a2:	3308      	adds	r3, #8
   122a4:	4a03      	ldr	r2, [pc, #12]	; (122b4 <z_finalize_fd+0x2c>)
   122a6:	4413      	add	r3, r2
   122a8:	3304      	adds	r3, #4
   122aa:	f240 1205 	movw	r2, #261	; 0x105
   122ae:	f00b fdf1 	bl	1de94 <z_fdtable_call_ioctl>
					   &fdtable[fd].lock);
	}
}
   122b2:	bd38      	pop	{r3, r4, r5, pc}
   122b4:	20015a2c 	.word	0x20015a2c

000122b8 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
   122b8:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
   122ba:	680b      	ldr	r3, [r1, #0]
   122bc:	3301      	adds	r3, #1
   122be:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   122c0:	4b01      	ldr	r3, [pc, #4]	; (122c8 <char_out+0x10>)
   122c2:	681b      	ldr	r3, [r3, #0]
   122c4:	4798      	blx	r3
}
   122c6:	bd08      	pop	{r3, pc}
   122c8:	20014528 	.word	0x20014528

000122cc <__printk_hook_install>:
	_char_out = fn;
   122cc:	4b01      	ldr	r3, [pc, #4]	; (122d4 <__printk_hook_install+0x8>)
   122ce:	6018      	str	r0, [r3, #0]
}
   122d0:	4770      	bx	lr
   122d2:	bf00      	nop
   122d4:	20014528 	.word	0x20014528

000122d8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   122d8:	b500      	push	{lr}
   122da:	b083      	sub	sp, #12
   122dc:	4602      	mov	r2, r0
   122de:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   122e0:	2100      	movs	r1, #0
   122e2:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   122e4:	a901      	add	r1, sp, #4
   122e6:	4803      	ldr	r0, [pc, #12]	; (122f4 <vprintk+0x1c>)
   122e8:	f000 fb68 	bl	129bc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   122ec:	b003      	add	sp, #12
   122ee:	f85d fb04 	ldr.w	pc, [sp], #4
   122f2:	bf00      	nop
   122f4:	000122b9 	.word	0x000122b9

000122f8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   122f8:	b510      	push	{r4, lr}
   122fa:	b084      	sub	sp, #16
   122fc:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   122fe:	9001      	str	r0, [sp, #4]
   12300:	9102      	str	r1, [sp, #8]
   12302:	2100      	movs	r1, #0
   12304:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
   12306:	a901      	add	r1, sp, #4
   12308:	4805      	ldr	r0, [pc, #20]	; (12320 <vsnprintk+0x28>)
   1230a:	f000 fb57 	bl	129bc <cbvprintf>

	if (ctx.count < ctx.max) {
   1230e:	9b03      	ldr	r3, [sp, #12]
   12310:	9a02      	ldr	r2, [sp, #8]
   12312:	4293      	cmp	r3, r2
   12314:	da01      	bge.n	1231a <vsnprintk+0x22>
		str[ctx.count] = '\0';
   12316:	2200      	movs	r2, #0
   12318:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   1231a:	9803      	ldr	r0, [sp, #12]
   1231c:	b004      	add	sp, #16
   1231e:	bd10      	pop	{r4, pc}
   12320:	0001df31 	.word	0x0001df31

00012324 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12328:	b083      	sub	sp, #12
   1232a:	4604      	mov	r4, r0
   1232c:	4608      	mov	r0, r1
   1232e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12330:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12332:	f013 0f08 	tst.w	r3, #8
   12336:	d105      	bne.n	12344 <process_event+0x20>
   12338:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   1233c:	2300      	movs	r3, #0
   1233e:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   12340:	9301      	str	r3, [sp, #4]
}
   12342:	e069      	b.n	12418 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
   12344:	2901      	cmp	r1, #1
   12346:	d009      	beq.n	1235c <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   12348:	f043 0320 	orr.w	r3, r3, #32
   1234c:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1234e:	f385 8811 	msr	BASEPRI, r5
   12352:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   12356:	b003      	add	sp, #12
   12358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   1235c:	f043 0310 	orr.w	r3, r3, #16
   12360:	8323      	strh	r3, [r4, #24]
   12362:	e7f4      	b.n	1234e <process_event+0x2a>
			evt = process_recheck(mgr);
   12364:	4620      	mov	r0, r4
   12366:	f00b fe3f 	bl	1dfe8 <process_recheck>
   1236a:	e057      	b.n	1241c <process_event+0xf8>
			res = mgr->last_res;
   1236c:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   12370:	464a      	mov	r2, r9
   12372:	4669      	mov	r1, sp
   12374:	4620      	mov	r0, r4
   12376:	f00b fe50 	bl	1e01a <process_complete>
		onoff_transition_fn transit = NULL;
   1237a:	2700      	movs	r7, #0
   1237c:	e05a      	b.n	12434 <process_event+0x110>
			transit = mgr->transitions->start;
   1237e:	6923      	ldr	r3, [r4, #16]
   12380:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
   12382:	2106      	movs	r1, #6
   12384:	4620      	mov	r0, r4
   12386:	f00b fe08 	bl	1df9a <set_state>
		res = 0;
   1238a:	f04f 0900 	mov.w	r9, #0
   1238e:	e051      	b.n	12434 <process_event+0x110>
			transit = mgr->transitions->stop;
   12390:	6923      	ldr	r3, [r4, #16]
   12392:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   12394:	2104      	movs	r1, #4
   12396:	4620      	mov	r0, r4
   12398:	f00b fdff 	bl	1df9a <set_state>
		res = 0;
   1239c:	f04f 0900 	mov.w	r9, #0
   123a0:	e048      	b.n	12434 <process_event+0x110>
			transit = mgr->transitions->reset;
   123a2:	6923      	ldr	r3, [r4, #16]
   123a4:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   123a6:	2105      	movs	r1, #5
   123a8:	4620      	mov	r0, r4
   123aa:	f00b fdf6 	bl	1df9a <set_state>
		res = 0;
   123ae:	f04f 0900 	mov.w	r9, #0
   123b2:	e03f      	b.n	12434 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
   123b4:	2200      	movs	r2, #0
   123b6:	e046      	b.n	12446 <process_event+0x122>
   123b8:	2200      	movs	r2, #0
   123ba:	e044      	b.n	12446 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   123bc:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   123c0:	8323      	strh	r3, [r4, #24]
   123c2:	f385 8811 	msr	BASEPRI, r5
   123c6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   123ca:	2900      	cmp	r1, #0
   123cc:	d144      	bne.n	12458 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   123ce:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   123d0:	b12b      	cbz	r3, 123de <process_event+0xba>
				notify_all(mgr, &clients, state, res);
   123d2:	464b      	mov	r3, r9
   123d4:	4642      	mov	r2, r8
   123d6:	4669      	mov	r1, sp
   123d8:	4620      	mov	r0, r4
   123da:	f00b fe94 	bl	1e106 <notify_all>
			if (transit != NULL) {
   123de:	b117      	cbz	r7, 123e6 <process_event+0xc2>
				transit(mgr, transition_complete);
   123e0:	4925      	ldr	r1, [pc, #148]	; (12478 <process_event+0x154>)
   123e2:	4620      	mov	r0, r4
   123e4:	47b8      	blx	r7
	__asm__ volatile(
   123e6:	f04f 0320 	mov.w	r3, #32
   123ea:	f3ef 8511 	mrs	r5, BASEPRI
   123ee:	f383 8811 	msr	BASEPRI, r3
   123f2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   123f6:	8b23      	ldrh	r3, [r4, #24]
   123f8:	f023 0308 	bic.w	r3, r3, #8
   123fc:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   123fe:	8b23      	ldrh	r3, [r4, #24]
   12400:	f013 0f10 	tst.w	r3, #16
   12404:	d02e      	beq.n	12464 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12406:	f023 0310 	bic.w	r3, r3, #16
   1240a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   1240c:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   1240e:	8b26      	ldrh	r6, [r4, #24]
   12410:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   12414:	2800      	cmp	r0, #0
   12416:	d09a      	beq.n	1234e <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   12418:	2802      	cmp	r0, #2
   1241a:	d0a3      	beq.n	12364 <process_event+0x40>
		if (evt == EVT_NOP) {
   1241c:	2800      	cmp	r0, #0
   1241e:	d096      	beq.n	1234e <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   12420:	2801      	cmp	r0, #1
   12422:	d0a3      	beq.n	1236c <process_event+0x48>
		} else if (evt == EVT_START) {
   12424:	2803      	cmp	r0, #3
   12426:	d0aa      	beq.n	1237e <process_event+0x5a>
		} else if (evt == EVT_STOP) {
   12428:	2804      	cmp	r0, #4
   1242a:	d0b1      	beq.n	12390 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
   1242c:	2805      	cmp	r0, #5
   1242e:	d0b8      	beq.n	123a2 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
   12430:	2700      	movs	r7, #0
		res = 0;
   12432:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12434:	8b23      	ldrh	r3, [r4, #24]
   12436:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1243a:	45b0      	cmp	r8, r6
   1243c:	d0ba      	beq.n	123b4 <process_event+0x90>
   1243e:	68a2      	ldr	r2, [r4, #8]
   12440:	2a00      	cmp	r2, #0
   12442:	d0b9      	beq.n	123b8 <process_event+0x94>
   12444:	2201      	movs	r2, #1
		if (do_monitors
   12446:	4611      	mov	r1, r2
   12448:	2a00      	cmp	r2, #0
   1244a:	d1b7      	bne.n	123bc <process_event+0x98>
   1244c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   1244e:	2a00      	cmp	r2, #0
   12450:	d1b4      	bne.n	123bc <process_event+0x98>
		    || (transit != NULL)) {
   12452:	2f00      	cmp	r7, #0
   12454:	d1b2      	bne.n	123bc <process_event+0x98>
   12456:	e7d2      	b.n	123fe <process_event+0xda>
				notify_monitors(mgr, state, res);
   12458:	464a      	mov	r2, r9
   1245a:	4641      	mov	r1, r8
   1245c:	4620      	mov	r0, r4
   1245e:	f00b fda4 	bl	1dfaa <notify_monitors>
   12462:	e7b4      	b.n	123ce <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   12464:	f013 0f20 	tst.w	r3, #32
   12468:	d004      	beq.n	12474 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1246a:	f023 0320 	bic.w	r3, r3, #32
   1246e:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   12470:	2002      	movs	r0, #2
   12472:	e7cc      	b.n	1240e <process_event+0xea>
		evt = EVT_NOP;
   12474:	2000      	movs	r0, #0
   12476:	e7ca      	b.n	1240e <process_event+0xea>
   12478:	0001e135 	.word	0x0001e135

0001247c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   1247c:	b410      	push	{r4}
   1247e:	4604      	mov	r4, r0
	const char *sp = *str;
   12480:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   12482:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
   12484:	7813      	ldrb	r3, [r2, #0]
   12486:	4908      	ldr	r1, [pc, #32]	; (124a8 <extract_decimal+0x2c>)
   12488:	5c59      	ldrb	r1, [r3, r1]
   1248a:	f011 0f04 	tst.w	r1, #4
   1248e:	d006      	beq.n	1249e <extract_decimal+0x22>
		val = 10U * val + *sp++ - '0';
   12490:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   12494:	3201      	adds	r2, #1
   12496:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   1249a:	3830      	subs	r0, #48	; 0x30
   1249c:	e7f2      	b.n	12484 <extract_decimal+0x8>
	}
	*str = sp;
   1249e:	6022      	str	r2, [r4, #0]
	return val;
}
   124a0:	f85d 4b04 	ldr.w	r4, [sp], #4
   124a4:	4770      	bx	lr
   124a6:	bf00      	nop
   124a8:	00024d11 	.word	0x00024d11

000124ac <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   124ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124b0:	b083      	sub	sp, #12
   124b2:	4604      	mov	r4, r0
   124b4:	460d      	mov	r5, r1
   124b6:	9201      	str	r2, [sp, #4]
   124b8:	469a      	mov	sl, r3
   124ba:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   124be:	78d3      	ldrb	r3, [r2, #3]
   124c0:	4a31      	ldr	r2, [pc, #196]	; (12588 <encode_uint+0xdc>)
   124c2:	f813 b002 	ldrb.w	fp, [r3, r2]
   124c6:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   124ca:	2b6f      	cmp	r3, #111	; 0x6f
   124cc:	d00f      	beq.n	124ee <encode_uint+0x42>
   124ce:	d906      	bls.n	124de <encode_uint+0x32>
   124d0:	2b70      	cmp	r3, #112	; 0x70
   124d2:	d00f      	beq.n	124f4 <encode_uint+0x48>
   124d4:	2b78      	cmp	r3, #120	; 0x78
   124d6:	d110      	bne.n	124fa <encode_uint+0x4e>
		return 16;
   124d8:	f04f 0910 	mov.w	r9, #16
   124dc:	e023      	b.n	12526 <encode_uint+0x7a>
	switch (specifier) {
   124de:	2b58      	cmp	r3, #88	; 0x58
   124e0:	d002      	beq.n	124e8 <encode_uint+0x3c>
   124e2:	f04f 090a 	mov.w	r9, #10
   124e6:	e01e      	b.n	12526 <encode_uint+0x7a>
		return 16;
   124e8:	f04f 0910 	mov.w	r9, #16
   124ec:	e01b      	b.n	12526 <encode_uint+0x7a>
		return 8;
   124ee:	f04f 0908 	mov.w	r9, #8
   124f2:	e018      	b.n	12526 <encode_uint+0x7a>
		return 16;
   124f4:	f04f 0910 	mov.w	r9, #16
   124f8:	e015      	b.n	12526 <encode_uint+0x7a>
	switch (specifier) {
   124fa:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   124fe:	e012      	b.n	12526 <encode_uint+0x7a>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
   12500:	b2d2      	uxtb	r2, r2
   12502:	3230      	adds	r2, #48	; 0x30
   12504:	b2d2      	uxtb	r2, r2
   12506:	f808 2d01 	strb.w	r2, [r8, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
   1250a:	4632      	mov	r2, r6
   1250c:	463b      	mov	r3, r7
   1250e:	4620      	mov	r0, r4
   12510:	4629      	mov	r1, r5
   12512:	f7fe fb29 	bl	10b68 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   12516:	42bd      	cmp	r5, r7
   12518:	bf08      	it	eq
   1251a:	42b4      	cmpeq	r4, r6
   1251c:	d318      	bcc.n	12550 <encode_uint+0xa4>
   1251e:	45d0      	cmp	r8, sl
   12520:	d916      	bls.n	12550 <encode_uint+0xa4>
		value /= radix;
   12522:	4604      	mov	r4, r0
   12524:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   12526:	464e      	mov	r6, r9
   12528:	2700      	movs	r7, #0
   1252a:	464a      	mov	r2, r9
   1252c:	463b      	mov	r3, r7
   1252e:	4620      	mov	r0, r4
   12530:	4629      	mov	r1, r5
   12532:	f7fe fb19 	bl	10b68 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12536:	2a09      	cmp	r2, #9
   12538:	d9e2      	bls.n	12500 <encode_uint+0x54>
   1253a:	f1bb 0f01 	cmp.w	fp, #1
   1253e:	d003      	beq.n	12548 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   12540:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12542:	3257      	adds	r2, #87	; 0x57
   12544:	b2d2      	uxtb	r2, r2
   12546:	e7de      	b.n	12506 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   12548:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1254a:	3237      	adds	r2, #55	; 0x37
   1254c:	b2d2      	uxtb	r2, r2
   1254e:	e7da      	b.n	12506 <encode_uint+0x5a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   12550:	9b01      	ldr	r3, [sp, #4]
   12552:	781b      	ldrb	r3, [r3, #0]
   12554:	f013 0f20 	tst.w	r3, #32
   12558:	d005      	beq.n	12566 <encode_uint+0xba>
		if (radix == 8) {
   1255a:	f1b9 0f08 	cmp.w	r9, #8
   1255e:	d006      	beq.n	1256e <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
   12560:	f1b9 0f10 	cmp.w	r9, #16
   12564:	d009      	beq.n	1257a <encode_uint+0xce>
			;
		}
	}

	return bp;
}
   12566:	4640      	mov	r0, r8
   12568:	b003      	add	sp, #12
   1256a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   1256e:	9a01      	ldr	r2, [sp, #4]
   12570:	7893      	ldrb	r3, [r2, #2]
   12572:	f043 0308 	orr.w	r3, r3, #8
   12576:	7093      	strb	r3, [r2, #2]
   12578:	e7f5      	b.n	12566 <encode_uint+0xba>
			conv->altform_0c = true;
   1257a:	9a01      	ldr	r2, [sp, #4]
   1257c:	7893      	ldrb	r3, [r2, #2]
   1257e:	f043 0310 	orr.w	r3, r3, #16
   12582:	7093      	strb	r3, [r2, #2]
   12584:	e7ef      	b.n	12566 <encode_uint+0xba>
   12586:	bf00      	nop
   12588:	00024d11 	.word	0x00024d11

0001258c <encode_float>:
			  struct conversion *conv,
			  int precision,
			  char *sign,
			  char *bps,
			  const char **bpe)
{
   1258c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12590:	b089      	sub	sp, #36	; 0x24
   12592:	4692      	mov	sl, r2
   12594:	461d      	mov	r5, r3
	char *buf = bps;

	/* Prepend the sign: '-' if negative, flags control
	 * non-negative behavior.
	 */
	if ((u.u64 & SIGN_MASK) != 0U) {
   12596:	2800      	cmp	r0, #0
   12598:	f171 0300 	sbcs.w	r3, r1, #0
   1259c:	db08      	blt.n	125b0 <encode_float+0x24>
		*sign = '-';
	} else if (conv->flag_plus) {
   1259e:	f89a 3000 	ldrb.w	r3, [sl]
   125a2:	f013 0f08 	tst.w	r3, #8
   125a6:	d014      	beq.n	125d2 <encode_float+0x46>
		*sign = '+';
   125a8:	232b      	movs	r3, #43	; 0x2b
   125aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   125ac:	7013      	strb	r3, [r2, #0]
   125ae:	e002      	b.n	125b6 <encode_float+0x2a>
		*sign = '-';
   125b0:	232d      	movs	r3, #45	; 0x2d
   125b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   125b4:	7013      	strb	r3, [r2, #0]
	}

	/* Extract the non-negative offset exponent and fraction.  Record
	 * whether the value is subnormal.
	 */
	char c = conv->specifier;
   125b6:	f89a b003 	ldrb.w	fp, [sl, #3]
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   125ba:	f3c1 540a 	ubfx	r4, r1, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   125be:	4602      	mov	r2, r0
   125c0:	f3c1 0313 	ubfx	r3, r1, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
   125c4:	b964      	cbnz	r4, 125e0 <encode_float+0x54>
   125c6:	ea52 0103 	orrs.w	r1, r2, r3
   125ca:	d130      	bne.n	1262e <encode_float+0xa2>
   125cc:	f04f 0e00 	mov.w	lr, #0
   125d0:	e008      	b.n	125e4 <encode_float+0x58>
	} else if (conv->flag_space) {
   125d2:	f013 0f10 	tst.w	r3, #16
   125d6:	d0ee      	beq.n	125b6 <encode_float+0x2a>
		*sign = ' ';
   125d8:	2320      	movs	r3, #32
   125da:	9a12      	ldr	r2, [sp, #72]	; 0x48
   125dc:	7013      	strb	r3, [r2, #0]
   125de:	e7ea      	b.n	125b6 <encode_float+0x2a>
	bool is_subnormal = (expo == 0) && (fract != 0);
   125e0:	f04f 0e00 	mov.w	lr, #0

	/* Exponent of all-ones signals infinity or NaN, which are
	 * text constants regardless of specifier.
	 */
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   125e4:	f240 71ff 	movw	r1, #2047	; 0x7ff
   125e8:	428c      	cmp	r4, r1
   125ea:	d023      	beq.n	12634 <encode_float+0xa8>
		*bpe = buf;
		return bps;
	}

	/* The case of an F specifier is no longer relevant. */
	if (c == 'F') {
   125ec:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
   125f0:	d060      	beq.n	126b4 <encode_float+0x128>

	/* Remainder of code operates on a 64-bit fraction, so shift up (and
	 * discard garbage from the exponent where the implicit 1 would be
	 * stored).
	 */
	fract <<= EXPONENT_BITS;
   125f2:	ea4f 2cc3 	mov.w	ip, r3, lsl #11
   125f6:	ea4c 5c52 	orr.w	ip, ip, r2, lsr #21
   125fa:	02d2      	lsls	r2, r2, #11
	fract &= ~SIGN_MASK;
   125fc:	f02c 4c00 	bic.w	ip, ip, #2147483648	; 0x80000000
   12600:	9206      	str	r2, [sp, #24]
   12602:	f8cd c01c 	str.w	ip, [sp, #28]

	/* Non-zero values need normalization. */
	if ((expo | fract) != 0) {
   12606:	ea44 0002 	orr.w	r0, r4, r2
   1260a:	17e3      	asrs	r3, r4, #31
   1260c:	ea43 010c 	orr.w	r1, r3, ip
   12610:	ea50 0301 	orrs.w	r3, r0, r1
   12614:	d008      	beq.n	12628 <encode_float+0x9c>
		if (is_subnormal) {
   12616:	f1be 0f00 	cmp.w	lr, #0
   1261a:	d14f      	bne.n	126bc <encode_float+0x130>
		}
		/* Adjust the offset exponent to be signed rather than offset,
		 * and set the implicit 1 bit in the (shifted) 53-bit
		 * fraction.
		 */
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   1261c:	f2a4 34fe 	subw	r4, r4, #1022	; 0x3fe
		fract |= BIT_63;
   12620:	9b07      	ldr	r3, [sp, #28]
   12622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12626:	9307      	str	r3, [sp, #28]
		c = 'f';
   12628:	f04f 0800 	mov.w	r8, #0
   1262c:	e061      	b.n	126f2 <encode_float+0x166>
	bool is_subnormal = (expo == 0) && (fract != 0);
   1262e:	f04f 0e01 	mov.w	lr, #1
   12632:	e7d7      	b.n	125e4 <encode_float+0x58>
		if (fract == 0) {
   12634:	4313      	orrs	r3, r2
   12636:	d122      	bne.n	1267e <encode_float+0xf2>
			if (isupper((int)c)) {
   12638:	4bad      	ldr	r3, [pc, #692]	; (128f0 <encode_float+0x364>)
   1263a:	f81b 3003 	ldrb.w	r3, [fp, r3]
   1263e:	f003 0303 	and.w	r3, r3, #3
   12642:	2b01      	cmp	r3, #1
   12644:	d011      	beq.n	1266a <encode_float+0xde>
				*buf++ = 'i';
   12646:	2369      	movs	r3, #105	; 0x69
   12648:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1264a:	7013      	strb	r3, [r2, #0]
				*buf++ = 'n';
   1264c:	236e      	movs	r3, #110	; 0x6e
   1264e:	7053      	strb	r3, [r2, #1]
				*buf++ = 'f';
   12650:	3203      	adds	r2, #3
   12652:	2366      	movs	r3, #102	; 0x66
   12654:	9913      	ldr	r1, [sp, #76]	; 0x4c
   12656:	708b      	strb	r3, [r1, #2]
		conv->flag_zero = false;
   12658:	f89a 3000 	ldrb.w	r3, [sl]
   1265c:	f36f 1386 	bfc	r3, #6, #1
   12660:	f88a 3000 	strb.w	r3, [sl]
		*bpe = buf;
   12664:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12666:	601a      	str	r2, [r3, #0]
		return bps;
   12668:	e192      	b.n	12990 <encode_float+0x404>
				*buf++ = 'I';
   1266a:	2349      	movs	r3, #73	; 0x49
   1266c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1266e:	7013      	strb	r3, [r2, #0]
				*buf++ = 'N';
   12670:	234e      	movs	r3, #78	; 0x4e
   12672:	7053      	strb	r3, [r2, #1]
				*buf++ = 'F';
   12674:	3203      	adds	r2, #3
   12676:	2346      	movs	r3, #70	; 0x46
   12678:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1267a:	708b      	strb	r3, [r1, #2]
   1267c:	e7ec      	b.n	12658 <encode_float+0xcc>
			if (isupper((int)c)) {
   1267e:	4b9c      	ldr	r3, [pc, #624]	; (128f0 <encode_float+0x364>)
   12680:	f81b 3003 	ldrb.w	r3, [fp, r3]
   12684:	f003 0303 	and.w	r3, r3, #3
   12688:	2b01      	cmp	r3, #1
   1268a:	d009      	beq.n	126a0 <encode_float+0x114>
				*buf++ = 'n';
   1268c:	236e      	movs	r3, #110	; 0x6e
   1268e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12690:	7013      	strb	r3, [r2, #0]
				*buf++ = 'a';
   12692:	2261      	movs	r2, #97	; 0x61
   12694:	9913      	ldr	r1, [sp, #76]	; 0x4c
   12696:	704a      	strb	r2, [r1, #1]
				*buf++ = 'n';
   12698:	460a      	mov	r2, r1
   1269a:	3203      	adds	r2, #3
   1269c:	708b      	strb	r3, [r1, #2]
   1269e:	e7db      	b.n	12658 <encode_float+0xcc>
				*buf++ = 'N';
   126a0:	234e      	movs	r3, #78	; 0x4e
   126a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   126a4:	7013      	strb	r3, [r2, #0]
				*buf++ = 'A';
   126a6:	2241      	movs	r2, #65	; 0x41
   126a8:	9913      	ldr	r1, [sp, #76]	; 0x4c
   126aa:	704a      	strb	r2, [r1, #1]
				*buf++ = 'N';
   126ac:	460a      	mov	r2, r1
   126ae:	3203      	adds	r2, #3
   126b0:	708b      	strb	r3, [r1, #2]
   126b2:	e7d1      	b.n	12658 <encode_float+0xcc>
		c = 'f';
   126b4:	f04f 0b66 	mov.w	fp, #102	; 0x66
   126b8:	e79b      	b.n	125f2 <encode_float+0x66>
				expo--;
   126ba:	3c01      	subs	r4, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   126bc:	9b06      	ldr	r3, [sp, #24]
   126be:	9a07      	ldr	r2, [sp, #28]
   126c0:	eb13 0803 	adds.w	r8, r3, r3
   126c4:	eb42 0902 	adc.w	r9, r2, r2
   126c8:	e9cd 8906 	strd	r8, r9, [sp, #24]
   126cc:	f1b8 0f00 	cmp.w	r8, #0
   126d0:	f179 0300 	sbcs.w	r3, r9, #0
   126d4:	daf1      	bge.n	126ba <encode_float+0x12e>
   126d6:	e7a1      	b.n	1261c <encode_float+0x90>
			fract >>= 1;
			expo++;
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));

		/* Perform fract * 5 * 2 / 10 */
		fract *= 5U;
   126d8:	ea4f 0c82 	mov.w	ip, r2, lsl #2
   126dc:	0098      	lsls	r0, r3, #2
   126de:	ea4c 7493 	orr.w	r4, ip, r3, lsr #30
   126e2:	18c3      	adds	r3, r0, r3
   126e4:	eb44 0202 	adc.w	r2, r4, r2
   126e8:	9306      	str	r3, [sp, #24]
   126ea:	9207      	str	r2, [sp, #28]
		expo++;
   126ec:	1c8c      	adds	r4, r1, #2
		decexp--;
   126ee:	f108 38ff 	add.w	r8, r8, #4294967295
	while (expo < -2) {
   126f2:	f114 0f02 	cmn.w	r4, #2
   126f6:	da26      	bge.n	12746 <encode_float+0x1ba>
			fract >>= 1;
   126f8:	9907      	ldr	r1, [sp, #28]
   126fa:	9b06      	ldr	r3, [sp, #24]
   126fc:	085b      	lsrs	r3, r3, #1
   126fe:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
   12702:	084a      	lsrs	r2, r1, #1
   12704:	9306      	str	r3, [sp, #24]
   12706:	9207      	str	r2, [sp, #28]
			expo++;
   12708:	4621      	mov	r1, r4
   1270a:	3401      	adds	r4, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   1270c:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
   12710:	d2f2      	bcs.n	126f8 <encode_float+0x16c>
   12712:	e7e1      	b.n	126d8 <encode_float+0x14c>
		/*
		 * Perform fract / 5 / 2 * 10.
		 * The +2 is there to do round the result of the division
		 * by 5 not to lose too much precision in extreme cases.
		 */
		fract += 2;
   12714:	9b06      	ldr	r3, [sp, #24]
   12716:	3302      	adds	r3, #2
   12718:	9a07      	ldr	r2, [sp, #28]
   1271a:	f142 0200 	adc.w	r2, r2, #0
   1271e:	9306      	str	r3, [sp, #24]
   12720:	9207      	str	r2, [sp, #28]
		_ldiv5(&fract);
   12722:	a806      	add	r0, sp, #24
   12724:	f00c f903 	bl	1e92e <_ldiv5>
		expo--;
   12728:	3c01      	subs	r4, #1
		decexp++;
   1272a:	f108 0801 	add.w	r8, r8, #1

		/* Bring back our fractional number to full scale */
		do {
			fract <<= 1;
   1272e:	9b06      	ldr	r3, [sp, #24]
   12730:	9a07      	ldr	r2, [sp, #28]
   12732:	18de      	adds	r6, r3, r3
   12734:	eb42 0702 	adc.w	r7, r2, r2
   12738:	e9cd 6706 	strd	r6, r7, [sp, #24]
			expo--;
   1273c:	3c01      	subs	r4, #1
		} while (!(fract & BIT_63));
   1273e:	2e00      	cmp	r6, #0
   12740:	f177 0300 	sbcs.w	r3, r7, #0
   12744:	daf3      	bge.n	1272e <encode_float+0x1a2>
	while (expo > 0) {
   12746:	2c00      	cmp	r4, #0
   12748:	dce4      	bgt.n	12714 <encode_float+0x188>
	/*
	 * The binary fractional point is located somewhere above bit 63.
	 * Move it between bits 59 and 60 to give 4 bits of room to the
	 * integer part.
	 */
	fract >>= (4 - expo);
   1274a:	f1c4 0104 	rsb	r1, r4, #4
   1274e:	9a07      	ldr	r2, [sp, #28]
   12750:	341c      	adds	r4, #28
   12752:	f1a1 0020 	sub.w	r0, r1, #32
   12756:	9b06      	ldr	r3, [sp, #24]
   12758:	40cb      	lsrs	r3, r1
   1275a:	fa02 f404 	lsl.w	r4, r2, r4
   1275e:	4323      	orrs	r3, r4
   12760:	fa22 f000 	lsr.w	r0, r2, r0
   12764:	4303      	orrs	r3, r0
   12766:	40ca      	lsrs	r2, r1
   12768:	9306      	str	r3, [sp, #24]
   1276a:	9207      	str	r2, [sp, #28]

	if ((c == 'g') || (c == 'G')) {
   1276c:	f1bb 0f67 	cmp.w	fp, #103	; 0x67
   12770:	d012      	beq.n	12798 <encode_float+0x20c>
   12772:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   12776:	d00f      	beq.n	12798 <encode_float+0x20c>
	bool prune_zero = false;
   12778:	2700      	movs	r7, #0
			prune_zero = true;
		}
	}

	int decimals;
	if (c == 'f') {
   1277a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   1277e:	d029      	beq.n	127d4 <encode_float+0x248>
		decimals = precision + decexp;
		if (decimals < 0) {
			decimals = 0;
		}
	} else {
		decimals = precision + 1;
   12780:	1c6c      	adds	r4, r5, #1
	}

	int digit_count = 16;
   12782:	2310      	movs	r3, #16
   12784:	9305      	str	r3, [sp, #20]

	if (decimals > 16) {
   12786:	429c      	cmp	r4, r3
   12788:	dd00      	ble.n	1278c <encode_float+0x200>
		decimals = 16;
   1278a:	461c      	mov	r4, r3
	}

	/* Round the value to the last digit being printed. */
	uint64_t round = BIT64(59); /* 0.5 */
   1278c:	2200      	movs	r2, #0
   1278e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   12792:	e9cd 2302 	strd	r2, r3, [sp, #8]
	while (decimals--) {
   12796:	e028      	b.n	127ea <encode_float+0x25e>
		if (decexp < (-4 + 1) || decexp > precision) {
   12798:	f118 0f03 	cmn.w	r8, #3
   1279c:	db01      	blt.n	127a2 <encode_float+0x216>
   1279e:	45a8      	cmp	r8, r5
   127a0:	dd11      	ble.n	127c6 <encode_float+0x23a>
			c += 'e' - 'g';  /* e or E */
   127a2:	f1ab 0b02 	sub.w	fp, fp, #2
   127a6:	fa5f fb8b 	uxtb.w	fp, fp
			if (precision > 0) {
   127aa:	2d00      	cmp	r5, #0
   127ac:	dd00      	ble.n	127b0 <encode_float+0x224>
				precision--;
   127ae:	3d01      	subs	r5, #1
		if (!conv->flag_hash && (precision > 0)) {
   127b0:	f89a 3000 	ldrb.w	r3, [sl]
   127b4:	f3c3 1740 	ubfx	r7, r3, #5, #1
   127b8:	f013 0f20 	tst.w	r3, #32
   127bc:	d108      	bne.n	127d0 <encode_float+0x244>
   127be:	2d00      	cmp	r5, #0
   127c0:	dddb      	ble.n	1277a <encode_float+0x1ee>
			prune_zero = true;
   127c2:	2701      	movs	r7, #1
   127c4:	e7d9      	b.n	1277a <encode_float+0x1ee>
			precision -= decexp;
   127c6:	eba5 0508 	sub.w	r5, r5, r8
			c = 'f';
   127ca:	f04f 0b66 	mov.w	fp, #102	; 0x66
   127ce:	e7ef      	b.n	127b0 <encode_float+0x224>
	bool prune_zero = false;
   127d0:	2700      	movs	r7, #0
   127d2:	e7d2      	b.n	1277a <encode_float+0x1ee>
		if (decimals < 0) {
   127d4:	eb18 0405 	adds.w	r4, r8, r5
   127d8:	d5d3      	bpl.n	12782 <encode_float+0x1f6>
	int digit_count = 16;
   127da:	2310      	movs	r3, #16
   127dc:	9305      	str	r3, [sp, #20]
			decimals = 0;
   127de:	2400      	movs	r4, #0
   127e0:	e7d4      	b.n	1278c <encode_float+0x200>
		_ldiv10(&round);
   127e2:	a802      	add	r0, sp, #8
   127e4:	f00c f8c1 	bl	1e96a <_ldiv10>
	while (decimals--) {
   127e8:	4634      	mov	r4, r6
   127ea:	1e66      	subs	r6, r4, #1
   127ec:	2c00      	cmp	r4, #0
   127ee:	d1f8      	bne.n	127e2 <encode_float+0x256>
	}
	fract += round;
   127f0:	9b06      	ldr	r3, [sp, #24]
   127f2:	9a02      	ldr	r2, [sp, #8]
   127f4:	189b      	adds	r3, r3, r2
   127f6:	9300      	str	r3, [sp, #0]
   127f8:	9a07      	ldr	r2, [sp, #28]
   127fa:	9b03      	ldr	r3, [sp, #12]
   127fc:	eb42 0303 	adc.w	r3, r2, r3
   12800:	9301      	str	r3, [sp, #4]
   12802:	e9dd 2300 	ldrd	r2, r3, [sp]
   12806:	e9cd 2306 	strd	r2, r3, [sp, #24]
	/* Make sure rounding didn't make fract >= 1.0 */
	if (fract >= BIT64(60)) {
   1280a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   1280e:	bf08      	it	eq
   12810:	2a00      	cmpeq	r2, #0
   12812:	d207      	bcs.n	12824 <encode_float+0x298>
		_ldiv10(&fract);
		decexp++;
	}

	if (c == 'f') {
   12814:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   12818:	d145      	bne.n	128a6 <encode_float+0x31a>
		if (decexp > 0) {
   1281a:	f1b8 0f00 	cmp.w	r8, #0
   1281e:	dd3d      	ble.n	1289c <encode_float+0x310>
	char *buf = bps;
   12820:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   12822:	e00d      	b.n	12840 <encode_float+0x2b4>
		_ldiv10(&fract);
   12824:	a806      	add	r0, sp, #24
   12826:	f00c f8a0 	bl	1e96a <_ldiv10>
		decexp++;
   1282a:	f108 0801 	add.w	r8, r8, #1
   1282e:	e7f1      	b.n	12814 <encode_float+0x288>
			/* Emit the digits above the decimal point. */
			while (decexp > 0 && digit_count > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
   12830:	a905      	add	r1, sp, #20
   12832:	a806      	add	r0, sp, #24
   12834:	f00c f8a5 	bl	1e982 <_get_digit>
   12838:	f806 0b01 	strb.w	r0, [r6], #1
				decexp--;
   1283c:	f108 38ff 	add.w	r8, r8, #4294967295
			while (decexp > 0 && digit_count > 0) {
   12840:	f1b8 0f00 	cmp.w	r8, #0
   12844:	dd02      	ble.n	1284c <encode_float+0x2c0>
   12846:	9b05      	ldr	r3, [sp, #20]
   12848:	2b00      	cmp	r3, #0
   1284a:	dcf1      	bgt.n	12830 <encode_float+0x2a4>
			}

			conv->pad0_value = decexp;
   1284c:	f8ca 8004 	str.w	r8, [sl, #4]

			decexp = 0;
   12850:	46a0      	mov	r8, r4
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
   12852:	f89a 3000 	ldrb.w	r3, [sl]
   12856:	f013 0f20 	tst.w	r3, #32
   1285a:	d101      	bne.n	12860 <encode_float+0x2d4>
   1285c:	2d00      	cmp	r5, #0
   1285e:	dd02      	ble.n	12866 <encode_float+0x2da>
			*buf++ = '.';
   12860:	232e      	movs	r3, #46	; 0x2e
   12862:	f806 3b01 	strb.w	r3, [r6], #1
		}

		if (decexp < 0 && precision > 0) {
   12866:	f1b8 0f00 	cmp.w	r8, #0
   1286a:	da33      	bge.n	128d4 <encode_float+0x348>
   1286c:	2d00      	cmp	r5, #0
   1286e:	dd31      	ble.n	128d4 <encode_float+0x348>
			conv->pad0_value = -decexp;
   12870:	f1c8 0300 	rsb	r3, r8, #0
   12874:	f8ca 3004 	str.w	r3, [sl, #4]
			if (conv->pad0_value > precision) {
   12878:	429d      	cmp	r5, r3
   1287a:	da01      	bge.n	12880 <encode_float+0x2f4>
				conv->pad0_value = precision;
   1287c:	f8ca 5004 	str.w	r5, [sl, #4]
			}

			precision -= conv->pad0_value;
   12880:	f8da 3004 	ldr.w	r3, [sl, #4]
   12884:	1aed      	subs	r5, r5, r3
			conv->pad_postdp = (conv->pad0_value > 0);
   12886:	2b00      	cmp	r3, #0
   12888:	bfd4      	ite	le
   1288a:	2300      	movle	r3, #0
   1288c:	2301      	movgt	r3, #1
   1288e:	f89a 2002 	ldrb.w	r2, [sl, #2]
   12892:	f363 1245 	bfi	r2, r3, #5, #1
   12896:	f88a 2002 	strb.w	r2, [sl, #2]
   1289a:	e01b      	b.n	128d4 <encode_float+0x348>
			*buf++ = '0';
   1289c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   1289e:	2330      	movs	r3, #48	; 0x30
   128a0:	f806 3b01 	strb.w	r3, [r6], #1
   128a4:	e7d5      	b.n	12852 <encode_float+0x2c6>
		}
	} else { /* e or E */
		/* Emit the one digit before the decimal.  If it's not zero,
		 * this is significant so reduce the base-10 exponent.
		 */
		*buf = _get_digit(&fract, &digit_count);
   128a6:	a905      	add	r1, sp, #20
   128a8:	a806      	add	r0, sp, #24
   128aa:	f00c f86a 	bl	1e982 <_get_digit>
   128ae:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   128b0:	f806 0b01 	strb.w	r0, [r6], #1
		if (*buf++ != '0') {
   128b4:	2830      	cmp	r0, #48	; 0x30
   128b6:	d001      	beq.n	128bc <encode_float+0x330>
			decexp--;
   128b8:	f108 38ff 	add.w	r8, r8, #4294967295
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
   128bc:	f89a 3000 	ldrb.w	r3, [sl]
   128c0:	f013 0f20 	tst.w	r3, #32
   128c4:	d101      	bne.n	128ca <encode_float+0x33e>
   128c6:	2d00      	cmp	r5, #0
   128c8:	dd04      	ble.n	128d4 <encode_float+0x348>
			*buf++ = '.';
   128ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   128cc:	1c9e      	adds	r6, r3, #2
   128ce:	232e      	movs	r3, #46	; 0x2e
   128d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   128d2:	7053      	strb	r3, [r2, #1]
		}
	}

	while (precision > 0 && digit_count > 0) {
   128d4:	2d00      	cmp	r5, #0
   128d6:	dd0d      	ble.n	128f4 <encode_float+0x368>
   128d8:	9b05      	ldr	r3, [sp, #20]
   128da:	2b00      	cmp	r3, #0
   128dc:	dd0a      	ble.n	128f4 <encode_float+0x368>
		*buf++ = _get_digit(&fract, &digit_count);
   128de:	a905      	add	r1, sp, #20
   128e0:	a806      	add	r0, sp, #24
   128e2:	f00c f84e 	bl	1e982 <_get_digit>
   128e6:	f806 0b01 	strb.w	r0, [r6], #1
		precision--;
   128ea:	3d01      	subs	r5, #1
   128ec:	e7f2      	b.n	128d4 <encode_float+0x348>
   128ee:	bf00      	nop
   128f0:	00024d11 	.word	0x00024d11
	}

	conv->pad0_pre_exp = precision;
   128f4:	f8ca 5008 	str.w	r5, [sl, #8]

	if (prune_zero) {
   128f8:	b157      	cbz	r7, 12910 <encode_float+0x384>
		conv->pad0_pre_exp = 0;
   128fa:	2300      	movs	r3, #0
   128fc:	f8ca 3008 	str.w	r3, [sl, #8]
		while (*--buf == '0') {
   12900:	4633      	mov	r3, r6
   12902:	461e      	mov	r6, r3
   12904:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   12908:	2a30      	cmp	r2, #48	; 0x30
   1290a:	d0fa      	beq.n	12902 <encode_float+0x376>
			;
		}
		if (*buf != '.') {
   1290c:	2a2e      	cmp	r2, #46	; 0x2e
   1290e:	d043      	beq.n	12998 <encode_float+0x40c>
			buf++;
		}
	}

	/* Emit the explicit exponent, if format requires it. */
	if ((c == 'e') || (c == 'E')) {
   12910:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   12914:	d002      	beq.n	1291c <encode_float+0x390>
   12916:	f1bb 0f45 	cmp.w	fp, #69	; 0x45
   1291a:	d12a      	bne.n	12972 <encode_float+0x3e6>
		*buf++ = c;
   1291c:	f886 b000 	strb.w	fp, [r6]
		if (decexp < 0) {
   12920:	f1b8 0f00 	cmp.w	r8, #0
   12924:	db3a      	blt.n	1299c <encode_float+0x410>
			decexp = -decexp;
			*buf++ = '-';
		} else {
			*buf++ = '+';
   12926:	1cb2      	adds	r2, r6, #2
   12928:	232b      	movs	r3, #43	; 0x2b
   1292a:	7073      	strb	r3, [r6, #1]
		}

		/* At most 3 digits to the decimal.  Spit them out. */
		if (decexp >= 100) {
   1292c:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
   12930:	dd0d      	ble.n	1294e <encode_float+0x3c2>
			*buf++ = (decexp / 100) + '0';
   12932:	4920      	ldr	r1, [pc, #128]	; (129b4 <encode_float+0x428>)
   12934:	fb81 3108 	smull	r3, r1, r1, r8
   12938:	ea4f 73e8 	mov.w	r3, r8, asr #31
   1293c:	ebc3 1361 	rsb	r3, r3, r1, asr #5
   12940:	f103 0130 	add.w	r1, r3, #48	; 0x30
   12944:	f802 1b01 	strb.w	r1, [r2], #1
			decexp %= 100;
   12948:	2164      	movs	r1, #100	; 0x64
   1294a:	fb01 8813 	mls	r8, r1, r3, r8
		}

		*buf++ = (decexp / 10) + '0';
   1294e:	491a      	ldr	r1, [pc, #104]	; (129b8 <encode_float+0x42c>)
   12950:	fb81 3108 	smull	r3, r1, r1, r8
   12954:	ea4f 73e8 	mov.w	r3, r8, asr #31
   12958:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   1295c:	f103 0130 	add.w	r1, r3, #48	; 0x30
   12960:	4616      	mov	r6, r2
   12962:	f806 1b02 	strb.w	r1, [r6], #2
		*buf++ = (decexp % 10) + '0';
   12966:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1296a:	eba8 0343 	sub.w	r3, r8, r3, lsl #1
   1296e:	3330      	adds	r3, #48	; 0x30
   12970:	7053      	strb	r3, [r2, #1]
	}

	/* Cache whether there's padding required */
	conv->pad_fp = (conv->pad0_value > 0)
   12972:	f8da 3004 	ldr.w	r3, [sl, #4]
		|| (conv->pad0_pre_exp > 0);
   12976:	2b00      	cmp	r3, #0
   12978:	dd16      	ble.n	129a8 <encode_float+0x41c>
   1297a:	2401      	movs	r4, #1
	conv->pad_fp = (conv->pad0_value > 0)
   1297c:	f89a 3002 	ldrb.w	r3, [sl, #2]
   12980:	f364 1386 	bfi	r3, r4, #6, #1
   12984:	f88a 3002 	strb.w	r3, [sl, #2]

	/* Set the end of the encoded sequence, and return its start.  Also
	 * store EOS as a non-digit/non-decimal value so we don't have to
	 * check against bpe when iterating in multiple places.
	 */
	*bpe = buf;
   12988:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1298a:	601e      	str	r6, [r3, #0]
	*buf = 0;
   1298c:	2300      	movs	r3, #0
   1298e:	7033      	strb	r3, [r6, #0]
	return bps;
}
   12990:	9813      	ldr	r0, [sp, #76]	; 0x4c
   12992:	b009      	add	sp, #36	; 0x24
   12994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (*--buf == '0') {
   12998:	461e      	mov	r6, r3
   1299a:	e7b9      	b.n	12910 <encode_float+0x384>
			decexp = -decexp;
   1299c:	f1c8 0800 	rsb	r8, r8, #0
			*buf++ = '-';
   129a0:	1cb2      	adds	r2, r6, #2
   129a2:	232d      	movs	r3, #45	; 0x2d
   129a4:	7073      	strb	r3, [r6, #1]
   129a6:	e7c1      	b.n	1292c <encode_float+0x3a0>
		|| (conv->pad0_pre_exp > 0);
   129a8:	f8da 3008 	ldr.w	r3, [sl, #8]
   129ac:	2b00      	cmp	r3, #0
   129ae:	dde5      	ble.n	1297c <encode_float+0x3f0>
   129b0:	2401      	movs	r4, #1
   129b2:	e7e3      	b.n	1297c <encode_float+0x3f0>
   129b4:	51eb851f 	.word	0x51eb851f
   129b8:	66666667 	.word	0x66666667

000129bc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   129bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129c0:	b099      	sub	sp, #100	; 0x64
   129c2:	4606      	mov	r6, r0
   129c4:	460d      	mov	r5, r1
   129c6:	4617      	mov	r7, r2
   129c8:	9305      	str	r3, [sp, #20]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   129ca:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   129cc:	e000      	b.n	129d0 <cbvprintf+0x14>
		if (*fp != '%') {
			OUTC(*fp++);
   129ce:	3401      	adds	r4, #1
	while (*fp != 0) {
   129d0:	7838      	ldrb	r0, [r7, #0]
   129d2:	2800      	cmp	r0, #0
   129d4:	f000 8593 	beq.w	134fe <cbvprintf+0xb42>
		if (*fp != '%') {
   129d8:	2825      	cmp	r0, #37	; 0x25
   129da:	d007      	beq.n	129ec <cbvprintf+0x30>
			OUTC(*fp++);
   129dc:	3701      	adds	r7, #1
   129de:	4629      	mov	r1, r5
   129e0:	47b0      	blx	r6
   129e2:	2800      	cmp	r0, #0
   129e4:	daf3      	bge.n	129ce <cbvprintf+0x12>
	}

	return count;
#undef OUTS
#undef OUTC
}
   129e6:	b019      	add	sp, #100	; 0x64
   129e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} state = {
   129ec:	2300      	movs	r3, #0
   129ee:	930a      	str	r3, [sp, #40]	; 0x28
   129f0:	930b      	str	r3, [sp, #44]	; 0x2c
   129f2:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   129f4:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
   129f8:	9208      	str	r2, [sp, #32]
		char sign = 0;
   129fa:	f88d 301f 	strb.w	r3, [sp, #31]
	*conv = (struct conversion) {
   129fe:	930c      	str	r3, [sp, #48]	; 0x30
   12a00:	930d      	str	r3, [sp, #52]	; 0x34
   12a02:	930e      	str	r3, [sp, #56]	; 0x38
	++sp;
   12a04:	f107 0901 	add.w	r9, r7, #1
	if (*sp == '%') {
   12a08:	787b      	ldrb	r3, [r7, #1]
   12a0a:	2b25      	cmp	r3, #37	; 0x25
   12a0c:	d002      	beq.n	12a14 <cbvprintf+0x58>
	bool loop = true;
   12a0e:	f04f 0801 	mov.w	r8, #1
   12a12:	e031      	b.n	12a78 <cbvprintf+0xbc>
		conv->specifier = *sp++;
   12a14:	f107 0902 	add.w	r9, r7, #2
   12a18:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		return sp;
   12a1c:	e1ae      	b.n	12d7c <cbvprintf+0x3c0>
			conv->flag_dash = true;
   12a1e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12a22:	f043 0304 	orr.w	r3, r3, #4
   12a26:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (loop) {
   12a2a:	f1b8 0f00 	cmp.w	r8, #0
   12a2e:	d020      	beq.n	12a72 <cbvprintf+0xb6>
			++sp;
   12a30:	f109 0901 	add.w	r9, r9, #1
   12a34:	e01d      	b.n	12a72 <cbvprintf+0xb6>
			conv->flag_plus = true;
   12a36:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12a3a:	f043 0308 	orr.w	r3, r3, #8
   12a3e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
   12a42:	e7f2      	b.n	12a2a <cbvprintf+0x6e>
			conv->flag_space = true;
   12a44:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12a48:	f043 0310 	orr.w	r3, r3, #16
   12a4c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
   12a50:	e7eb      	b.n	12a2a <cbvprintf+0x6e>
			conv->flag_hash = true;
   12a52:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12a56:	f043 0320 	orr.w	r3, r3, #32
   12a5a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
   12a5e:	e7e4      	b.n	12a2a <cbvprintf+0x6e>
			conv->flag_zero = true;
   12a60:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12a68:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
   12a6c:	e7dd      	b.n	12a2a <cbvprintf+0x6e>
		switch (*sp) {
   12a6e:	f04f 0800 	mov.w	r8, #0
	} while (loop);
   12a72:	f1b8 0f00 	cmp.w	r8, #0
   12a76:	d029      	beq.n	12acc <cbvprintf+0x110>
		switch (*sp) {
   12a78:	f899 3000 	ldrb.w	r3, [r9]
   12a7c:	3b20      	subs	r3, #32
   12a7e:	2b10      	cmp	r3, #16
   12a80:	d8f5      	bhi.n	12a6e <cbvprintf+0xb2>
   12a82:	a201      	add	r2, pc, #4	; (adr r2, 12a88 <cbvprintf+0xcc>)
   12a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12a88:	00012a45 	.word	0x00012a45
   12a8c:	00012a6f 	.word	0x00012a6f
   12a90:	00012a6f 	.word	0x00012a6f
   12a94:	00012a53 	.word	0x00012a53
   12a98:	00012a6f 	.word	0x00012a6f
   12a9c:	00012a6f 	.word	0x00012a6f
   12aa0:	00012a6f 	.word	0x00012a6f
   12aa4:	00012a6f 	.word	0x00012a6f
   12aa8:	00012a6f 	.word	0x00012a6f
   12aac:	00012a6f 	.word	0x00012a6f
   12ab0:	00012a6f 	.word	0x00012a6f
   12ab4:	00012a37 	.word	0x00012a37
   12ab8:	00012a6f 	.word	0x00012a6f
   12abc:	00012a1f 	.word	0x00012a1f
   12ac0:	00012a6f 	.word	0x00012a6f
   12ac4:	00012a6f 	.word	0x00012a6f
   12ac8:	00012a61 	.word	0x00012a61
	if (conv->flag_zero && conv->flag_dash) {
   12acc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12ad0:	f003 0344 	and.w	r3, r3, #68	; 0x44
   12ad4:	2b44      	cmp	r3, #68	; 0x44
   12ad6:	d06d      	beq.n	12bb4 <cbvprintf+0x1f8>
	sp = extract_width(conv, sp);
   12ad8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	conv->width_present = true;
   12adc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12ae4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	if (*sp == '*') {
   12ae8:	f899 3000 	ldrb.w	r3, [r9]
   12aec:	2b2a      	cmp	r3, #42	; 0x2a
   12aee:	d068      	beq.n	12bc2 <cbvprintf+0x206>
	size_t width = extract_decimal(&sp);
   12af0:	a809      	add	r0, sp, #36	; 0x24
   12af2:	f7ff fcc3 	bl	1247c <extract_decimal>
	if (sp != wp) {
   12af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12af8:	4599      	cmp	r9, r3
   12afa:	d012      	beq.n	12b22 <cbvprintf+0x166>
		conv->width_present = true;
   12afc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12b04:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		conv->width_value = width;
   12b08:	900d      	str	r0, [sp, #52]	; 0x34
		conv->unsupported |= ((conv->width_value < 0)
   12b0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   12b0e:	2800      	cmp	r0, #0
   12b10:	db60      	blt.n	12bd4 <cbvprintf+0x218>
   12b12:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   12b14:	4313      	orrs	r3, r2
   12b16:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12b1a:	f363 0241 	bfi	r2, r3, #1, #1
   12b1e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   12b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
	sp = extract_prec(conv, sp);
   12b24:	9309      	str	r3, [sp, #36]	; 0x24
	conv->prec_present = (*sp == '.');
   12b26:	781b      	ldrb	r3, [r3, #0]
   12b28:	2b2e      	cmp	r3, #46	; 0x2e
   12b2a:	bf14      	ite	ne
   12b2c:	2300      	movne	r3, #0
   12b2e:	2301      	moveq	r3, #1
   12b30:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   12b34:	f363 0241 	bfi	r2, r3, #1, #1
   12b38:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   12b3c:	2b00      	cmp	r3, #0
   12b3e:	d04b      	beq.n	12bd8 <cbvprintf+0x21c>
	++sp;
   12b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12b42:	1c5a      	adds	r2, r3, #1
   12b44:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
   12b46:	785b      	ldrb	r3, [r3, #1]
   12b48:	2b2a      	cmp	r3, #42	; 0x2a
   12b4a:	d048      	beq.n	12bde <cbvprintf+0x222>
	size_t prec = extract_decimal(&sp);
   12b4c:	a809      	add	r0, sp, #36	; 0x24
   12b4e:	f7ff fc95 	bl	1247c <extract_decimal>
	conv->prec_value = prec;
   12b52:	900e      	str	r0, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   12b54:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12b58:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   12b5c:	2800      	cmp	r0, #0
   12b5e:	db47      	blt.n	12bf0 <cbvprintf+0x234>
   12b60:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   12b62:	4313      	orrs	r3, r2
   12b64:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12b68:	f363 0241 	bfi	r2, r3, #1, #1
   12b6c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   12b70:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
	switch (*sp) {
   12b74:	f899 3000 	ldrb.w	r3, [r9]
   12b78:	3b4c      	subs	r3, #76	; 0x4c
   12b7a:	2b2e      	cmp	r3, #46	; 0x2e
   12b7c:	f200 80dc 	bhi.w	12d38 <cbvprintf+0x37c>
   12b80:	e8df f003 	tbb	[pc, r3]
   12b84:	dadadaca 	.word	0xdadadaca
   12b88:	dadadada 	.word	0xdadadada
   12b8c:	dadadada 	.word	0xdadadada
   12b90:	dadadada 	.word	0xdadadada
   12b94:	dadadada 	.word	0xdadadada
   12b98:	dadadada 	.word	0xdadadada
   12b9c:	dadadada 	.word	0xdadadada
   12ba0:	da6ada38 	.word	0xda6ada38
   12ba4:	dadada51 	.word	0xdadada51
   12ba8:	dadadada 	.word	0xdadadada
   12bac:	dadadac0 	.word	0xdadadac0
   12bb0:	dada      	.short	0xdada
   12bb2:	b6          	.byte	0xb6
   12bb3:	00          	.byte	0x00
		conv->flag_zero = false;
   12bb4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12bb8:	f36f 1386 	bfc	r3, #6, #1
   12bbc:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   12bc0:	e78a      	b.n	12ad8 <cbvprintf+0x11c>
		conv->width_star = true;
   12bc2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12bc6:	f043 0301 	orr.w	r3, r3, #1
   12bca:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		return ++sp;
   12bce:	464b      	mov	r3, r9
   12bd0:	3301      	adds	r3, #1
   12bd2:	e7a7      	b.n	12b24 <cbvprintf+0x168>
				      || (width != (size_t)conv->width_value));
   12bd4:	2201      	movs	r2, #1
   12bd6:	e79d      	b.n	12b14 <cbvprintf+0x158>
		return sp;
   12bd8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   12bdc:	e7ca      	b.n	12b74 <cbvprintf+0x1b8>
		conv->prec_star = true;
   12bde:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12be2:	f043 0304 	orr.w	r3, r3, #4
   12be6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		return ++sp;
   12bea:	f102 0901 	add.w	r9, r2, #1
   12bee:	e7c1      	b.n	12b74 <cbvprintf+0x1b8>
			      || (prec != (size_t)conv->prec_value));
   12bf0:	2201      	movs	r2, #1
   12bf2:	e7b6      	b.n	12b62 <cbvprintf+0x1a6>
		if (*++sp == 'h') {
   12bf4:	f109 0201 	add.w	r2, r9, #1
   12bf8:	f899 3001 	ldrb.w	r3, [r9, #1]
   12bfc:	2b68      	cmp	r3, #104	; 0x68
   12bfe:	d008      	beq.n	12c12 <cbvprintf+0x256>
			conv->length_mod = LENGTH_H;
   12c00:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12c04:	2102      	movs	r1, #2
   12c06:	f361 03c6 	bfi	r3, r1, #3, #4
   12c0a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (*++sp == 'h') {
   12c0e:	4691      	mov	r9, r2
   12c10:	e02b      	b.n	12c6a <cbvprintf+0x2ae>
			conv->length_mod = LENGTH_HH;
   12c12:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12c16:	2201      	movs	r2, #1
   12c18:	f362 03c6 	bfi	r3, r2, #3, #4
   12c1c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
			++sp;
   12c20:	f109 0902 	add.w	r9, r9, #2
   12c24:	e021      	b.n	12c6a <cbvprintf+0x2ae>
		if (*++sp == 'l') {
   12c26:	f109 0201 	add.w	r2, r9, #1
   12c2a:	f899 3001 	ldrb.w	r3, [r9, #1]
   12c2e:	2b6c      	cmp	r3, #108	; 0x6c
   12c30:	d008      	beq.n	12c44 <cbvprintf+0x288>
			conv->length_mod = LENGTH_L;
   12c32:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12c36:	2103      	movs	r1, #3
   12c38:	f361 03c6 	bfi	r3, r1, #3, #4
   12c3c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (*++sp == 'l') {
   12c40:	4691      	mov	r9, r2
   12c42:	e012      	b.n	12c6a <cbvprintf+0x2ae>
			conv->length_mod = LENGTH_LL;
   12c44:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12c48:	2204      	movs	r2, #4
   12c4a:	f362 03c6 	bfi	r3, r2, #3, #4
   12c4e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
			++sp;
   12c52:	f109 0902 	add.w	r9, r9, #2
   12c56:	e008      	b.n	12c6a <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
   12c58:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12c5c:	2205      	movs	r2, #5
   12c5e:	f362 03c6 	bfi	r3, r2, #3, #4
   12c62:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
   12c66:	f109 0901 	add.w	r9, r9, #1
	conv->specifier = *sp++;
   12c6a:	f819 2b01 	ldrb.w	r2, [r9], #1
   12c6e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   12c72:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   12c76:	2b37      	cmp	r3, #55	; 0x37
   12c78:	f200 8185 	bhi.w	12f86 <cbvprintf+0x5ca>
   12c7c:	e8df f013 	tbh	[pc, r3, lsl #1]
   12c80:	01830131 	.word	0x01830131
   12c84:	01830183 	.word	0x01830183
   12c88:	01310131 	.word	0x01310131
   12c8c:	01830131 	.word	0x01830131
   12c90:	01830183 	.word	0x01830183
   12c94:	01830183 	.word	0x01830183
   12c98:	01830183 	.word	0x01830183
   12c9c:	01830183 	.word	0x01830183
   12ca0:	01830183 	.word	0x01830183
   12ca4:	01830183 	.word	0x01830183
   12ca8:	01830183 	.word	0x01830183
   12cac:	011c0183 	.word	0x011c0183
   12cb0:	01830183 	.word	0x01830183
   12cb4:	01830183 	.word	0x01830183
   12cb8:	01830183 	.word	0x01830183
   12cbc:	01830183 	.word	0x01830183
   12cc0:	01830131 	.word	0x01830131
   12cc4:	0063011c 	.word	0x0063011c
   12cc8:	01310131 	.word	0x01310131
   12ccc:	01830131 	.word	0x01830131
   12cd0:	01830063 	.word	0x01830063
   12cd4:	01830183 	.word	0x01830183
   12cd8:	01620183 	.word	0x01620183
   12cdc:	0173011c 	.word	0x0173011c
   12ce0:	01830183 	.word	0x01830183
   12ce4:	01830173 	.word	0x01830173
   12ce8:	0183011c 	.word	0x0183011c
   12cec:	011c0183 	.word	0x011c0183
		conv->length_mod = LENGTH_Z;
   12cf0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12cf4:	2206      	movs	r2, #6
   12cf6:	f362 03c6 	bfi	r3, r2, #3, #4
   12cfa:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
   12cfe:	f109 0901 	add.w	r9, r9, #1
		break;
   12d02:	e7b2      	b.n	12c6a <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
   12d04:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12d08:	2207      	movs	r2, #7
   12d0a:	f362 03c6 	bfi	r3, r2, #3, #4
   12d0e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
   12d12:	f109 0901 	add.w	r9, r9, #1
		break;
   12d16:	e7a8      	b.n	12c6a <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_UPPER_L;
   12d18:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12d1c:	2208      	movs	r2, #8
   12d1e:	f362 03c6 	bfi	r3, r2, #3, #4
   12d22:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
   12d26:	f109 0901 	add.w	r9, r9, #1
		conv->unsupported = true;
   12d2a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12d2e:	f043 0302 	orr.w	r3, r3, #2
   12d32:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		break;
   12d36:	e798      	b.n	12c6a <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_NONE;
   12d38:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12d3c:	f36f 03c6 	bfc	r3, #3, #4
   12d40:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   12d44:	e791      	b.n	12c6a <cbvprintf+0x2ae>
		conv->specifier_cat = SPECIFIER_SINT;
   12d46:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12d4a:	2101      	movs	r1, #1
   12d4c:	f361 0302 	bfi	r3, r1, #0, #3
   12d50:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   12d54:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12d58:	f003 0378 	and.w	r3, r3, #120	; 0x78
   12d5c:	2b40      	cmp	r3, #64	; 0x40
   12d5e:	f000 80b3 	beq.w	12ec8 <cbvprintf+0x50c>
		if (conv->specifier == 'c') {
   12d62:	2a63      	cmp	r2, #99	; 0x63
   12d64:	f000 80b7 	beq.w	12ed6 <cbvprintf+0x51a>
	conv->unsupported |= unsupported;
   12d68:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12d6c:	f3c3 0240 	ubfx	r2, r3, #1, #1
   12d70:	ea48 0802 	orr.w	r8, r8, r2
   12d74:	f368 0341 	bfi	r3, r8, #1, #1
   12d78:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (conv->width_star) {
   12d7c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12d80:	f013 0f01 	tst.w	r3, #1
   12d84:	f000 8112 	beq.w	12fac <cbvprintf+0x5f0>
			width = va_arg(ap, int);
   12d88:	9b05      	ldr	r3, [sp, #20]
   12d8a:	1d1a      	adds	r2, r3, #4
   12d8c:	9205      	str	r2, [sp, #20]
   12d8e:	f8d3 8000 	ldr.w	r8, [r3]
			if (width < 0) {
   12d92:	f1b8 0f00 	cmp.w	r8, #0
   12d96:	f2c0 8100 	blt.w	12f9a <cbvprintf+0x5de>
		if (conv->prec_star) {
   12d9a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12d9e:	f013 0f04 	tst.w	r3, #4
   12da2:	f000 8116 	beq.w	12fd2 <cbvprintf+0x616>
			int arg = va_arg(ap, int);
   12da6:	9b05      	ldr	r3, [sp, #20]
   12da8:	1d1a      	adds	r2, r3, #4
   12daa:	9205      	str	r2, [sp, #20]
   12dac:	f8d3 a000 	ldr.w	sl, [r3]
			if (arg < 0) {
   12db0:	f1ba 0f00 	cmp.w	sl, #0
   12db4:	f2c0 8104 	blt.w	12fc0 <cbvprintf+0x604>
		conv->pad0_value = 0;
   12db8:	2300      	movs	r3, #0
   12dba:	930d      	str	r3, [sp, #52]	; 0x34
		conv->pad0_pre_exp = 0;
   12dbc:	930e      	str	r3, [sp, #56]	; 0x38
		    && (conv->specifier_cat == SPECIFIER_FP)
   12dbe:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12dc2:	f003 0307 	and.w	r3, r3, #7
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   12dc6:	2b04      	cmp	r3, #4
   12dc8:	f000 810c 	beq.w	12fe4 <cbvprintf+0x628>
			= (enum specifier_cat_enum)conv->specifier_cat;
   12dcc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12dd0:	f003 0307 	and.w	r3, r3, #7
			= (enum length_mod_enum)conv->length_mod;
   12dd4:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
   12dd8:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   12ddc:	2b01      	cmp	r3, #1
   12dde:	f000 8111 	beq.w	13004 <cbvprintf+0x648>
		} else if (specifier_cat == SPECIFIER_UINT) {
   12de2:	2b02      	cmp	r3, #2
   12de4:	f000 8156 	beq.w	13094 <cbvprintf+0x6d8>
		} else if (specifier_cat == SPECIFIER_FP) {
   12de8:	2b04      	cmp	r3, #4
   12dea:	f000 81a7 	beq.w	1313c <cbvprintf+0x780>
		} else if (specifier_cat == SPECIFIER_PTR) {
   12dee:	2b03      	cmp	r3, #3
   12df0:	f000 81be 	beq.w	13170 <cbvprintf+0x7b4>
		if (conv->invalid || conv->unsupported) {
   12df4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   12df8:	f012 0f03 	tst.w	r2, #3
   12dfc:	f040 81be 	bne.w	1317c <cbvprintf+0x7c0>
		switch (conv->specifier) {
   12e00:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   12e04:	3b25      	subs	r3, #37	; 0x25
   12e06:	2b53      	cmp	r3, #83	; 0x53
   12e08:	f200 81cb 	bhi.w	131a2 <cbvprintf+0x7e6>
   12e0c:	e8df f013 	tbh	[pc, r3, lsl #1]
   12e10:	01c901c2 	.word	0x01c901c2
   12e14:	01c901c9 	.word	0x01c901c9
   12e18:	01c901c9 	.word	0x01c901c9
   12e1c:	01c901c9 	.word	0x01c901c9
   12e20:	01c901c9 	.word	0x01c901c9
   12e24:	01c901c9 	.word	0x01c901c9
   12e28:	01c901c9 	.word	0x01c901c9
   12e2c:	01c901c9 	.word	0x01c901c9
   12e30:	01c901c9 	.word	0x01c901c9
   12e34:	01c901c9 	.word	0x01c901c9
   12e38:	01c901c9 	.word	0x01c901c9
   12e3c:	01c901c9 	.word	0x01c901c9
   12e40:	01c901c9 	.word	0x01c901c9
   12e44:	01c901c9 	.word	0x01c901c9
   12e48:	01c9028a 	.word	0x01c9028a
   12e4c:	01c901c9 	.word	0x01c901c9
   12e50:	028a028a 	.word	0x028a028a
   12e54:	01c9028a 	.word	0x01c9028a
   12e58:	01c901c9 	.word	0x01c901c9
   12e5c:	01c901c9 	.word	0x01c901c9
   12e60:	01c901c9 	.word	0x01c901c9
   12e64:	01c901c9 	.word	0x01c901c9
   12e68:	01c901c9 	.word	0x01c901c9
   12e6c:	01c901c9 	.word	0x01c901c9
   12e70:	01c901c9 	.word	0x01c901c9
   12e74:	022401c9 	.word	0x022401c9
   12e78:	01c901c9 	.word	0x01c901c9
   12e7c:	01c901c9 	.word	0x01c901c9
   12e80:	01c901c9 	.word	0x01c901c9
   12e84:	01c901c9 	.word	0x01c901c9
   12e88:	01c9028a 	.word	0x01c9028a
   12e8c:	0216020e 	.word	0x0216020e
   12e90:	028a028a 	.word	0x028a028a
   12e94:	01c9028a 	.word	0x01c9028a
   12e98:	01c90216 	.word	0x01c90216
   12e9c:	01c901c9 	.word	0x01c901c9
   12ea0:	026601c9 	.word	0x026601c9
   12ea4:	024e0224 	.word	0x024e0224
   12ea8:	01c901c9 	.word	0x01c901c9
   12eac:	01c901cb 	.word	0x01c901cb
   12eb0:	01c90224 	.word	0x01c90224
   12eb4:	022401c9 	.word	0x022401c9
		conv->specifier_cat = SPECIFIER_UINT;
   12eb8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12ebc:	2102      	movs	r1, #2
   12ebe:	f361 0302 	bfi	r3, r1, #0, #3
   12ec2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   12ec6:	e745      	b.n	12d54 <cbvprintf+0x398>
			conv->invalid = true;
   12ec8:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   12ecc:	f041 0101 	orr.w	r1, r1, #1
   12ed0:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   12ed4:	e745      	b.n	12d62 <cbvprintf+0x3a6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   12ed6:	f1b3 0800 	subs.w	r8, r3, #0
   12eda:	bf18      	it	ne
   12edc:	f04f 0801 	movne.w	r8, #1
   12ee0:	e742      	b.n	12d68 <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_FP;
   12ee2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12ee6:	2104      	movs	r1, #4
   12ee8:	f361 0302 	bfi	r3, r1, #0, #3
   12eec:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			|| (conv->specifier == 'A');
   12ef0:	2a61      	cmp	r2, #97	; 0x61
   12ef2:	d01f      	beq.n	12f34 <cbvprintf+0x578>
   12ef4:	2a41      	cmp	r2, #65	; 0x41
   12ef6:	d01b      	beq.n	12f30 <cbvprintf+0x574>
   12ef8:	2200      	movs	r2, #0
		conv->specifier_a = (conv->specifier == 'a')
   12efa:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12efe:	f362 13c7 	bfi	r3, r2, #7, #1
   12f02:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (conv->specifier_a
   12f06:	b2da      	uxtb	r2, r3
   12f08:	f013 0f80 	tst.w	r3, #128	; 0x80
   12f0c:	d142      	bne.n	12f94 <cbvprintf+0x5d8>
		if (conv->length_mod == LENGTH_L) {
   12f0e:	f002 0278 	and.w	r2, r2, #120	; 0x78
   12f12:	2a18      	cmp	r2, #24
   12f14:	d010      	beq.n	12f38 <cbvprintf+0x57c>
		} else if ((conv->length_mod != LENGTH_NONE)
   12f16:	2a00      	cmp	r2, #0
   12f18:	f43f af26 	beq.w	12d68 <cbvprintf+0x3ac>
			   && (conv->length_mod != LENGTH_UPPER_L)) {
   12f1c:	2a40      	cmp	r2, #64	; 0x40
   12f1e:	f43f af23 	beq.w	12d68 <cbvprintf+0x3ac>
			conv->invalid = true;
   12f22:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12f26:	f043 0301 	orr.w	r3, r3, #1
   12f2a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   12f2e:	e71b      	b.n	12d68 <cbvprintf+0x3ac>
			|| (conv->specifier == 'A');
   12f30:	2201      	movs	r2, #1
   12f32:	e7e2      	b.n	12efa <cbvprintf+0x53e>
   12f34:	2201      	movs	r2, #1
   12f36:	e7e0      	b.n	12efa <cbvprintf+0x53e>
			conv->length_mod = LENGTH_NONE;
   12f38:	b2db      	uxtb	r3, r3
   12f3a:	f36f 03c6 	bfc	r3, #3, #4
   12f3e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   12f42:	e711      	b.n	12d68 <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_PTR;
   12f44:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12f48:	2203      	movs	r2, #3
   12f4a:	f362 0302 	bfi	r3, r2, #0, #3
   12f4e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   12f52:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12f56:	f003 0378 	and.w	r3, r3, #120	; 0x78
   12f5a:	2b40      	cmp	r3, #64	; 0x40
   12f5c:	f47f af04 	bne.w	12d68 <cbvprintf+0x3ac>
			unsupported = true;
   12f60:	f04f 0801 	mov.w	r8, #1
   12f64:	e700      	b.n	12d68 <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_PTR;
   12f66:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   12f6a:	2203      	movs	r2, #3
   12f6c:	f362 0302 	bfi	r3, r2, #0, #3
   12f70:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   12f74:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12f78:	f013 0f78 	tst.w	r3, #120	; 0x78
   12f7c:	f43f aef4 	beq.w	12d68 <cbvprintf+0x3ac>
			unsupported = true;
   12f80:	f04f 0801 	mov.w	r8, #1
   12f84:	e6f0      	b.n	12d68 <cbvprintf+0x3ac>
		conv->invalid = true;
   12f86:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12f8a:	f043 0301 	orr.w	r3, r3, #1
   12f8e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		break;
   12f92:	e6e9      	b.n	12d68 <cbvprintf+0x3ac>
			unsupported = true;
   12f94:	f04f 0801 	mov.w	r8, #1
   12f98:	e6e6      	b.n	12d68 <cbvprintf+0x3ac>
				conv->flag_dash = true;
   12f9a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   12f9e:	f043 0304 	orr.w	r3, r3, #4
   12fa2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
				width = -width;
   12fa6:	f1c8 0800 	rsb	r8, r8, #0
   12faa:	e6f6      	b.n	12d9a <cbvprintf+0x3de>
		} else if (conv->width_present) {
   12fac:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
   12fb0:	2b00      	cmp	r3, #0
   12fb2:	db02      	blt.n	12fba <cbvprintf+0x5fe>
		int width = -1;
   12fb4:	f04f 38ff 	mov.w	r8, #4294967295
   12fb8:	e6ef      	b.n	12d9a <cbvprintf+0x3de>
			width = conv->width_value;
   12fba:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   12fbe:	e6ec      	b.n	12d9a <cbvprintf+0x3de>
				conv->prec_present = false;
   12fc0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12fc4:	f36f 0341 	bfc	r3, #1, #1
   12fc8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   12fcc:	f04f 3aff 	mov.w	sl, #4294967295
   12fd0:	e6f2      	b.n	12db8 <cbvprintf+0x3fc>
		} else if (conv->prec_present) {
   12fd2:	f013 0f02 	tst.w	r3, #2
   12fd6:	d002      	beq.n	12fde <cbvprintf+0x622>
			precision = conv->prec_value;
   12fd8:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   12fdc:	e6ec      	b.n	12db8 <cbvprintf+0x3fc>
		int precision = -1;
   12fde:	f04f 3aff 	mov.w	sl, #4294967295
   12fe2:	e6e9      	b.n	12db8 <cbvprintf+0x3fc>
		    && !conv->prec_present) {
   12fe4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   12fe8:	f013 0f02 	tst.w	r3, #2
   12fec:	f47f aeee 	bne.w	12dcc <cbvprintf+0x410>
			if (conv->specifier_a) {
   12ff0:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
   12ff4:	2b00      	cmp	r3, #0
   12ff6:	db02      	blt.n	12ffe <cbvprintf+0x642>
				precision = 6;
   12ff8:	f04f 0a06 	mov.w	sl, #6
   12ffc:	e6e6      	b.n	12dcc <cbvprintf+0x410>
				precision = FRACTION_HEX;
   12ffe:	f04f 0a0d 	mov.w	sl, #13
   13002:	e6e3      	b.n	12dcc <cbvprintf+0x410>
			switch (length_mod) {
   13004:	1ecb      	subs	r3, r1, #3
   13006:	2b04      	cmp	r3, #4
   13008:	d804      	bhi.n	13014 <cbvprintf+0x658>
   1300a:	e8df f003 	tbb	[pc, r3]
   1300e:	1d0b      	.short	0x1d0b
   13010:	3529      	.short	0x3529
   13012:	35          	.byte	0x35
   13013:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   13014:	9b05      	ldr	r3, [sp, #20]
   13016:	1d1a      	adds	r2, r3, #4
   13018:	9205      	str	r2, [sp, #20]
   1301a:	681a      	ldr	r2, [r3, #0]
   1301c:	17d3      	asrs	r3, r2, #31
   1301e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   13022:	e006      	b.n	13032 <cbvprintf+0x676>
					value->sint = va_arg(ap, long);
   13024:	9b05      	ldr	r3, [sp, #20]
   13026:	1d1a      	adds	r2, r3, #4
   13028:	9205      	str	r2, [sp, #20]
   1302a:	681a      	ldr	r2, [r3, #0]
   1302c:	17d3      	asrs	r3, r2, #31
   1302e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   13032:	2901      	cmp	r1, #1
   13034:	d028      	beq.n	13088 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
   13036:	2902      	cmp	r1, #2
   13038:	f47f aedc 	bne.w	12df4 <cbvprintf+0x438>
				value->sint = (short)value->sint;
   1303c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   13040:	17d3      	asrs	r3, r2, #31
   13042:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   13046:	e6d5      	b.n	12df4 <cbvprintf+0x438>
					(sint_value_type)va_arg(ap, long long);
   13048:	9b05      	ldr	r3, [sp, #20]
   1304a:	3307      	adds	r3, #7
   1304c:	f023 0307 	bic.w	r3, r3, #7
   13050:	f103 0208 	add.w	r2, r3, #8
   13054:	9205      	str	r2, [sp, #20]
   13056:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   1305a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   1305e:	e7e8      	b.n	13032 <cbvprintf+0x676>
					(sint_value_type)va_arg(ap, intmax_t);
   13060:	9b05      	ldr	r3, [sp, #20]
   13062:	3307      	adds	r3, #7
   13064:	f023 0307 	bic.w	r3, r3, #7
   13068:	f103 0208 	add.w	r2, r3, #8
   1306c:	9205      	str	r2, [sp, #20]
   1306e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   13072:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   13076:	e7dc      	b.n	13032 <cbvprintf+0x676>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   13078:	9b05      	ldr	r3, [sp, #20]
   1307a:	1d1a      	adds	r2, r3, #4
   1307c:	9205      	str	r2, [sp, #20]
   1307e:	681a      	ldr	r2, [r3, #0]
   13080:	17d3      	asrs	r3, r2, #31
				value->sint =
   13082:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   13086:	e7d4      	b.n	13032 <cbvprintf+0x676>
				value->sint = (char)value->sint;
   13088:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   1308c:	930a      	str	r3, [sp, #40]	; 0x28
   1308e:	2300      	movs	r3, #0
   13090:	930b      	str	r3, [sp, #44]	; 0x2c
   13092:	e6af      	b.n	12df4 <cbvprintf+0x438>
			switch (length_mod) {
   13094:	1ecb      	subs	r3, r1, #3
   13096:	2b04      	cmp	r3, #4
   13098:	d804      	bhi.n	130a4 <cbvprintf+0x6e8>
   1309a:	e8df f003 	tbb	[pc, r3]
   1309e:	1f0b      	.short	0x1f0b
   130a0:	4135      	.short	0x4135
   130a2:	41          	.byte	0x41
   130a3:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   130a4:	9b05      	ldr	r3, [sp, #20]
   130a6:	1d1a      	adds	r2, r3, #4
   130a8:	9205      	str	r2, [sp, #20]
   130aa:	681b      	ldr	r3, [r3, #0]
   130ac:	930a      	str	r3, [sp, #40]	; 0x28
   130ae:	2300      	movs	r3, #0
   130b0:	930b      	str	r3, [sp, #44]	; 0x2c
				break;
   130b2:	e01e      	b.n	130f2 <cbvprintf+0x736>
				    && (conv->specifier == 'c')) {
   130b4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
				if ((!WCHAR_IS_SIGNED)
   130b8:	2b63      	cmp	r3, #99	; 0x63
   130ba:	d007      	beq.n	130cc <cbvprintf+0x710>
					value->uint = va_arg(ap, unsigned long);
   130bc:	9b05      	ldr	r3, [sp, #20]
   130be:	1d1a      	adds	r2, r3, #4
   130c0:	9205      	str	r2, [sp, #20]
   130c2:	681b      	ldr	r3, [r3, #0]
   130c4:	930a      	str	r3, [sp, #40]	; 0x28
   130c6:	2300      	movs	r3, #0
   130c8:	930b      	str	r3, [sp, #44]	; 0x2c
   130ca:	e012      	b.n	130f2 <cbvprintf+0x736>
					value->uint = (wchar_t)va_arg(ap,
   130cc:	9b05      	ldr	r3, [sp, #20]
   130ce:	1d1a      	adds	r2, r3, #4
   130d0:	9205      	str	r2, [sp, #20]
   130d2:	681b      	ldr	r3, [r3, #0]
   130d4:	930a      	str	r3, [sp, #40]	; 0x28
   130d6:	2300      	movs	r3, #0
   130d8:	930b      	str	r3, [sp, #44]	; 0x2c
   130da:	e00a      	b.n	130f2 <cbvprintf+0x736>
					(uint_value_type)va_arg(ap,
   130dc:	9b05      	ldr	r3, [sp, #20]
   130de:	3307      	adds	r3, #7
   130e0:	f023 0307 	bic.w	r3, r3, #7
   130e4:	f103 0208 	add.w	r2, r3, #8
   130e8:	9205      	str	r2, [sp, #20]
   130ea:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   130ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   130f2:	2901      	cmp	r1, #1
   130f4:	d01c      	beq.n	13130 <cbvprintf+0x774>
			} else if (length_mod == LENGTH_H) {
   130f6:	2902      	cmp	r1, #2
   130f8:	f47f ae7c 	bne.w	12df4 <cbvprintf+0x438>
				value->uint = (unsigned short)value->uint;
   130fc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   13100:	930a      	str	r3, [sp, #40]	; 0x28
   13102:	2300      	movs	r3, #0
   13104:	930b      	str	r3, [sp, #44]	; 0x2c
   13106:	e675      	b.n	12df4 <cbvprintf+0x438>
					(uint_value_type)va_arg(ap,
   13108:	9b05      	ldr	r3, [sp, #20]
   1310a:	3307      	adds	r3, #7
   1310c:	f023 0307 	bic.w	r3, r3, #7
   13110:	f103 0208 	add.w	r2, r3, #8
   13114:	9205      	str	r2, [sp, #20]
   13116:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   1311a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   1311e:	e7e8      	b.n	130f2 <cbvprintf+0x736>
					(uint_value_type)va_arg(ap, size_t);
   13120:	9b05      	ldr	r3, [sp, #20]
   13122:	1d1a      	adds	r2, r3, #4
   13124:	9205      	str	r2, [sp, #20]
   13126:	681b      	ldr	r3, [r3, #0]
				value->uint =
   13128:	930a      	str	r3, [sp, #40]	; 0x28
   1312a:	2300      	movs	r3, #0
   1312c:	930b      	str	r3, [sp, #44]	; 0x2c
				break;
   1312e:	e7e0      	b.n	130f2 <cbvprintf+0x736>
				value->uint = (unsigned char)value->uint;
   13130:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   13134:	930a      	str	r3, [sp, #40]	; 0x28
   13136:	2300      	movs	r3, #0
   13138:	930b      	str	r3, [sp, #44]	; 0x2c
   1313a:	e65b      	b.n	12df4 <cbvprintf+0x438>
			if (length_mod == LENGTH_UPPER_L) {
   1313c:	2908      	cmp	r1, #8
   1313e:	d00b      	beq.n	13158 <cbvprintf+0x79c>
				value->dbl = va_arg(ap, double);
   13140:	9b05      	ldr	r3, [sp, #20]
   13142:	3307      	adds	r3, #7
   13144:	f023 0307 	bic.w	r3, r3, #7
   13148:	f103 0208 	add.w	r2, r3, #8
   1314c:	9205      	str	r2, [sp, #20]
   1314e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13152:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   13156:	e64d      	b.n	12df4 <cbvprintf+0x438>
				value->ldbl = va_arg(ap, long double);
   13158:	9b05      	ldr	r3, [sp, #20]
   1315a:	3307      	adds	r3, #7
   1315c:	f023 0307 	bic.w	r3, r3, #7
   13160:	f103 0208 	add.w	r2, r3, #8
   13164:	9205      	str	r2, [sp, #20]
   13166:	e9d3 2300 	ldrd	r2, r3, [r3]
   1316a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   1316e:	e641      	b.n	12df4 <cbvprintf+0x438>
			value->ptr = va_arg(ap, void *);
   13170:	9b05      	ldr	r3, [sp, #20]
   13172:	1d1a      	adds	r2, r3, #4
   13174:	9205      	str	r2, [sp, #20]
   13176:	681b      	ldr	r3, [r3, #0]
   13178:	930a      	str	r3, [sp, #40]	; 0x28
   1317a:	e63b      	b.n	12df4 <cbvprintf+0x438>
			OUTS(sp, fp);
   1317c:	464b      	mov	r3, r9
   1317e:	463a      	mov	r2, r7
   13180:	4629      	mov	r1, r5
   13182:	4630      	mov	r0, r6
   13184:	f00b fc19 	bl	1e9ba <outs>
   13188:	2800      	cmp	r0, #0
   1318a:	f6ff ac2c 	blt.w	129e6 <cbvprintf+0x2a>
   1318e:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   13190:	464f      	mov	r7, r9
			continue;
   13192:	e41d      	b.n	129d0 <cbvprintf+0x14>
			OUTC('%');
   13194:	4629      	mov	r1, r5
   13196:	2025      	movs	r0, #37	; 0x25
   13198:	47b0      	blx	r6
   1319a:	2800      	cmp	r0, #0
   1319c:	f6ff ac23 	blt.w	129e6 <cbvprintf+0x2a>
   131a0:	3401      	adds	r4, #1
		fp = extract_conversion(conv, sp);
   131a2:	464f      	mov	r7, r9
			continue;
   131a4:	e414      	b.n	129d0 <cbvprintf+0x14>
			bps = (const char *)value->ptr;
   131a6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			if (precision >= 0) {
   131a8:	f1ba 0f00 	cmp.w	sl, #0
   131ac:	db3a      	blt.n	13224 <cbvprintf+0x868>
				len = strnlen(bps, precision);
   131ae:	4651      	mov	r1, sl
   131b0:	4638      	mov	r0, r7
   131b2:	f010 f8a3 	bl	232fc <strnlen>
			bpe = bps + len;
   131b6:	4438      	add	r0, r7
   131b8:	9008      	str	r0, [sp, #32]
		if (bps == NULL) {
   131ba:	2f00      	cmp	r7, #0
   131bc:	d0f1      	beq.n	131a2 <cbvprintf+0x7e6>
		size_t nj_len = (bpe - bps);
   131be:	9b08      	ldr	r3, [sp, #32]
   131c0:	1bdb      	subs	r3, r3, r7
		if (sign != 0) {
   131c2:	f89d 001f 	ldrb.w	r0, [sp, #31]
   131c6:	b100      	cbz	r0, 131ca <cbvprintf+0x80e>
			nj_len += 1U;
   131c8:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   131ca:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   131ce:	f011 0f10 	tst.w	r1, #16
   131d2:	f000 80b6 	beq.w	13342 <cbvprintf+0x986>
			nj_len += 2U;
   131d6:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
   131d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   131da:	4413      	add	r3, r2
		if (conv->pad_fp) {
   131dc:	f011 0f40 	tst.w	r1, #64	; 0x40
   131e0:	d001      	beq.n	131e6 <cbvprintf+0x82a>
			nj_len += conv->pad0_pre_exp;
   131e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   131e4:	4413      	add	r3, r2
		if (width > 0) {
   131e6:	f1b8 0f00 	cmp.w	r8, #0
   131ea:	f340 80c3 	ble.w	13374 <cbvprintf+0x9b8>
			width -= (int)nj_len;
   131ee:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   131f2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   131f6:	f013 0f04 	tst.w	r3, #4
   131fa:	f040 80bb 	bne.w	13374 <cbvprintf+0x9b8>
				if (conv->flag_zero) {
   131fe:	f013 0f40 	tst.w	r3, #64	; 0x40
   13202:	f000 80a4 	beq.w	1334e <cbvprintf+0x992>
					if (sign != 0) {
   13206:	2800      	cmp	r0, #0
   13208:	f000 80a4 	beq.w	13354 <cbvprintf+0x998>
						OUTC(sign);
   1320c:	4629      	mov	r1, r5
   1320e:	47b0      	blx	r6
   13210:	2800      	cmp	r0, #0
   13212:	f6ff abe8 	blt.w	129e6 <cbvprintf+0x2a>
   13216:	3401      	adds	r4, #1
						sign = 0;
   13218:	2300      	movs	r3, #0
   1321a:	f88d 301f 	strb.w	r3, [sp, #31]
					pad = '0';
   1321e:	f04f 0a30 	mov.w	sl, #48	; 0x30
   13222:	e099      	b.n	13358 <cbvprintf+0x99c>
				len = strlen(bps);
   13224:	4638      	mov	r0, r7
   13226:	f7fd fe23 	bl	10e70 <strlen>
   1322a:	e7c4      	b.n	131b6 <cbvprintf+0x7fa>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1322c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1322e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
			bpe = buf + 1;
   13232:	f10d 0345 	add.w	r3, sp, #69	; 0x45
   13236:	9308      	str	r3, [sp, #32]
			bps = buf;
   13238:	af11      	add	r7, sp, #68	; 0x44
			break;
   1323a:	e7be      	b.n	131ba <cbvprintf+0x7fe>
			if (conv->flag_plus) {
   1323c:	f012 0f08 	tst.w	r2, #8
   13240:	d024      	beq.n	1328c <cbvprintf+0x8d0>
				sign = '+';
   13242:	232b      	movs	r3, #43	; 0x2b
   13244:	f88d 301f 	strb.w	r3, [sp, #31]
			sint = value->sint;
   13248:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   1324c:	2a00      	cmp	r2, #0
   1324e:	f173 0100 	sbcs.w	r1, r3, #0
   13252:	db22      	blt.n	1329a <cbvprintf+0x8de>
				value->uint = (uint_value_type)sint;
   13254:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			bps = encode_uint(value->uint, conv, buf, bpe);
   13258:	9b08      	ldr	r3, [sp, #32]
   1325a:	9300      	str	r3, [sp, #0]
   1325c:	ab11      	add	r3, sp, #68	; 0x44
   1325e:	aa0c      	add	r2, sp, #48	; 0x30
   13260:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   13264:	f7ff f922 	bl	124ac <encode_uint>
   13268:	4607      	mov	r7, r0
			if (precision >= 0) {
   1326a:	f1ba 0f00 	cmp.w	sl, #0
   1326e:	dba4      	blt.n	131ba <cbvprintf+0x7fe>
				size_t len = bpe - bps;
   13270:	9b08      	ldr	r3, [sp, #32]
   13272:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   13274:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   13278:	f36f 1286 	bfc	r2, #6, #1
   1327c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   13280:	459a      	cmp	sl, r3
   13282:	d99a      	bls.n	131ba <cbvprintf+0x7fe>
					conv->pad0_value = precision - (int)len;
   13284:	ebaa 0303 	sub.w	r3, sl, r3
   13288:	930d      	str	r3, [sp, #52]	; 0x34
   1328a:	e796      	b.n	131ba <cbvprintf+0x7fe>
			} else if (conv->flag_space) {
   1328c:	f012 0f10 	tst.w	r2, #16
   13290:	d0da      	beq.n	13248 <cbvprintf+0x88c>
				sign = ' ';
   13292:	2320      	movs	r3, #32
   13294:	f88d 301f 	strb.w	r3, [sp, #31]
   13298:	e7d6      	b.n	13248 <cbvprintf+0x88c>
				sign = '-';
   1329a:	212d      	movs	r1, #45	; 0x2d
   1329c:	f88d 101f 	strb.w	r1, [sp, #31]
				value->uint = (uint_value_type)-sint;
   132a0:	4252      	negs	r2, r2
   132a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   132a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   132aa:	e7d5      	b.n	13258 <cbvprintf+0x89c>
			if (value->ptr != NULL) {
   132ac:	980a      	ldr	r0, [sp, #40]	; 0x28
   132ae:	b918      	cbnz	r0, 132b8 <cbvprintf+0x8fc>
			bpe = bps + 5;
   132b0:	4f94      	ldr	r7, [pc, #592]	; (13504 <cbvprintf+0xb48>)
   132b2:	9708      	str	r7, [sp, #32]
			bps = "(nil)";
   132b4:	3f05      	subs	r7, #5
			break;
   132b6:	e780      	b.n	131ba <cbvprintf+0x7fe>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   132b8:	9b08      	ldr	r3, [sp, #32]
   132ba:	9300      	str	r3, [sp, #0]
   132bc:	ab11      	add	r3, sp, #68	; 0x44
   132be:	aa0c      	add	r2, sp, #48	; 0x30
   132c0:	2100      	movs	r1, #0
   132c2:	f7ff f8f3 	bl	124ac <encode_uint>
   132c6:	4607      	mov	r7, r0
				conv->altform_0c = true;
   132c8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   132cc:	f043 0310 	orr.w	r3, r3, #16
   132d0:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
				conv->specifier = 'x';
   132d4:	2378      	movs	r3, #120	; 0x78
   132d6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
				goto prec_int_pad0;
   132da:	e7c6      	b.n	1326a <cbvprintf+0x8ae>
				store_count(conv, value->ptr, count);
   132dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   132de:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   132e2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   132e6:	2b07      	cmp	r3, #7
   132e8:	f63f af5b 	bhi.w	131a2 <cbvprintf+0x7e6>
   132ec:	e8df f003 	tbb	[pc, r3]
   132f0:	0a080604 	.word	0x0a080604
   132f4:	1816110c 	.word	0x1816110c
		*(int *)dp = count;
   132f8:	6014      	str	r4, [r2, #0]
		break;
   132fa:	e752      	b.n	131a2 <cbvprintf+0x7e6>
		*(signed char *)dp = (signed char)count;
   132fc:	7014      	strb	r4, [r2, #0]
		break;
   132fe:	e750      	b.n	131a2 <cbvprintf+0x7e6>
		*(short *)dp = (short)count;
   13300:	8014      	strh	r4, [r2, #0]
		break;
   13302:	e74e      	b.n	131a2 <cbvprintf+0x7e6>
		*(long *)dp = (long)count;
   13304:	6014      	str	r4, [r2, #0]
		break;
   13306:	e74c      	b.n	131a2 <cbvprintf+0x7e6>
		*(long long *)dp = (long long)count;
   13308:	4620      	mov	r0, r4
   1330a:	17e1      	asrs	r1, r4, #31
   1330c:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   13310:	e747      	b.n	131a2 <cbvprintf+0x7e6>
		*(intmax_t *)dp = (intmax_t)count;
   13312:	4620      	mov	r0, r4
   13314:	17e1      	asrs	r1, r4, #31
   13316:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   1331a:	e742      	b.n	131a2 <cbvprintf+0x7e6>
		*(size_t *)dp = (size_t)count;
   1331c:	6014      	str	r4, [r2, #0]
		break;
   1331e:	e740      	b.n	131a2 <cbvprintf+0x7e6>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   13320:	6014      	str	r4, [r2, #0]
}
   13322:	e73e      	b.n	131a2 <cbvprintf+0x7e6>
				bps = encode_float(value->dbl, conv, precision,
   13324:	ab08      	add	r3, sp, #32
   13326:	9302      	str	r3, [sp, #8]
   13328:	ab11      	add	r3, sp, #68	; 0x44
   1332a:	9301      	str	r3, [sp, #4]
   1332c:	f10d 031f 	add.w	r3, sp, #31
   13330:	9300      	str	r3, [sp, #0]
   13332:	4653      	mov	r3, sl
   13334:	aa0c      	add	r2, sp, #48	; 0x30
   13336:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1333a:	f7ff f927 	bl	1258c <encode_float>
   1333e:	4607      	mov	r7, r0
			break;
   13340:	e73b      	b.n	131ba <cbvprintf+0x7fe>
		} else if (conv->altform_0) {
   13342:	f011 0f08 	tst.w	r1, #8
   13346:	f43f af47 	beq.w	131d8 <cbvprintf+0x81c>
			nj_len += 1U;
   1334a:	3301      	adds	r3, #1
   1334c:	e744      	b.n	131d8 <cbvprintf+0x81c>
				char pad = ' ';
   1334e:	f04f 0a20 	mov.w	sl, #32
   13352:	e001      	b.n	13358 <cbvprintf+0x99c>
					pad = '0';
   13354:	f04f 0a30 	mov.w	sl, #48	; 0x30
   13358:	4643      	mov	r3, r8
				while (width-- > 0) {
   1335a:	f103 38ff 	add.w	r8, r3, #4294967295
   1335e:	2b00      	cmp	r3, #0
   13360:	dd08      	ble.n	13374 <cbvprintf+0x9b8>
					OUTC(pad);
   13362:	4629      	mov	r1, r5
   13364:	4650      	mov	r0, sl
   13366:	47b0      	blx	r6
   13368:	2800      	cmp	r0, #0
   1336a:	f6ff ab3c 	blt.w	129e6 <cbvprintf+0x2a>
   1336e:	3401      	adds	r4, #1
				while (width-- > 0) {
   13370:	4643      	mov	r3, r8
   13372:	e7f2      	b.n	1335a <cbvprintf+0x99e>
		if (sign != 0) {
   13374:	f89d 001f 	ldrb.w	r0, [sp, #31]
   13378:	b128      	cbz	r0, 13386 <cbvprintf+0x9ca>
			OUTC(sign);
   1337a:	4629      	mov	r1, r5
   1337c:	47b0      	blx	r6
   1337e:	2800      	cmp	r0, #0
   13380:	f6ff ab31 	blt.w	129e6 <cbvprintf+0x2a>
   13384:	3401      	adds	r4, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   13386:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1338a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1338e:	d072      	beq.n	13476 <cbvprintf+0xaba>
			if (conv->specifier_a) {
   13390:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
   13394:	2b00      	cmp	r3, #0
   13396:	db0d      	blt.n	133b4 <cbvprintf+0x9f8>
				while (isdigit((int)*cp)) {
   13398:	7838      	ldrb	r0, [r7, #0]
   1339a:	4b5b      	ldr	r3, [pc, #364]	; (13508 <cbvprintf+0xb4c>)
   1339c:	5cc3      	ldrb	r3, [r0, r3]
   1339e:	f013 0f04 	tst.w	r3, #4
   133a2:	d012      	beq.n	133ca <cbvprintf+0xa0e>
					OUTC(*cp++);
   133a4:	3701      	adds	r7, #1
   133a6:	4629      	mov	r1, r5
   133a8:	47b0      	blx	r6
   133aa:	2800      	cmp	r0, #0
   133ac:	f6ff ab1b 	blt.w	129e6 <cbvprintf+0x2a>
   133b0:	3401      	adds	r4, #1
   133b2:	e7f1      	b.n	13398 <cbvprintf+0x9dc>
				while (*cp != 'p') {
   133b4:	7838      	ldrb	r0, [r7, #0]
   133b6:	2870      	cmp	r0, #112	; 0x70
   133b8:	d044      	beq.n	13444 <cbvprintf+0xa88>
					OUTC(*cp++);
   133ba:	3701      	adds	r7, #1
   133bc:	4629      	mov	r1, r5
   133be:	47b0      	blx	r6
   133c0:	2800      	cmp	r0, #0
   133c2:	f6ff ab10 	blt.w	129e6 <cbvprintf+0x2a>
   133c6:	3401      	adds	r4, #1
   133c8:	e7f4      	b.n	133b4 <cbvprintf+0x9f8>
				pad_len = conv->pad0_value;
   133ca:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
				if (!conv->pad_postdp) {
   133ce:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   133d2:	f013 0f20 	tst.w	r3, #32
   133d6:	d010      	beq.n	133fa <cbvprintf+0xa3e>
				if (*cp == '.') {
   133d8:	7838      	ldrb	r0, [r7, #0]
   133da:	282e      	cmp	r0, #46	; 0x2e
   133dc:	d01d      	beq.n	1341a <cbvprintf+0xa5e>
				while (isdigit((int)*cp)) {
   133de:	7838      	ldrb	r0, [r7, #0]
   133e0:	4b49      	ldr	r3, [pc, #292]	; (13508 <cbvprintf+0xb4c>)
   133e2:	5cc3      	ldrb	r3, [r0, r3]
   133e4:	f013 0f04 	tst.w	r3, #4
   133e8:	d02c      	beq.n	13444 <cbvprintf+0xa88>
					OUTC(*cp++);
   133ea:	3701      	adds	r7, #1
   133ec:	4629      	mov	r1, r5
   133ee:	47b0      	blx	r6
   133f0:	2800      	cmp	r0, #0
   133f2:	f6ff aaf8 	blt.w	129e6 <cbvprintf+0x2a>
   133f6:	3401      	adds	r4, #1
   133f8:	e7f1      	b.n	133de <cbvprintf+0xa22>
					while (pad_len-- > 0) {
   133fa:	f10a 3bff 	add.w	fp, sl, #4294967295
   133fe:	f1ba 0f00 	cmp.w	sl, #0
   13402:	dd08      	ble.n	13416 <cbvprintf+0xa5a>
						OUTC('0');
   13404:	4629      	mov	r1, r5
   13406:	2030      	movs	r0, #48	; 0x30
   13408:	47b0      	blx	r6
   1340a:	2800      	cmp	r0, #0
   1340c:	f6ff aaeb 	blt.w	129e6 <cbvprintf+0x2a>
   13410:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   13412:	46da      	mov	sl, fp
   13414:	e7f1      	b.n	133fa <cbvprintf+0xa3e>
   13416:	46da      	mov	sl, fp
   13418:	e7de      	b.n	133d8 <cbvprintf+0xa1c>
					OUTC(*cp++);
   1341a:	3701      	adds	r7, #1
   1341c:	4629      	mov	r1, r5
   1341e:	47b0      	blx	r6
   13420:	2800      	cmp	r0, #0
   13422:	f6ff aae0 	blt.w	129e6 <cbvprintf+0x2a>
   13426:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   13428:	f10a 3bff 	add.w	fp, sl, #4294967295
   1342c:	f1ba 0f00 	cmp.w	sl, #0
   13430:	ddd5      	ble.n	133de <cbvprintf+0xa22>
						OUTC('0');
   13432:	4629      	mov	r1, r5
   13434:	2030      	movs	r0, #48	; 0x30
   13436:	47b0      	blx	r6
   13438:	2800      	cmp	r0, #0
   1343a:	f6ff aad4 	blt.w	129e6 <cbvprintf+0x2a>
   1343e:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   13440:	46da      	mov	sl, fp
   13442:	e7f1      	b.n	13428 <cbvprintf+0xa6c>
			pad_len = conv->pad0_pre_exp;
   13444:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			while (pad_len-- > 0) {
   13446:	f103 3aff 	add.w	sl, r3, #4294967295
   1344a:	2b00      	cmp	r3, #0
   1344c:	dd08      	ble.n	13460 <cbvprintf+0xaa4>
				OUTC('0');
   1344e:	4629      	mov	r1, r5
   13450:	2030      	movs	r0, #48	; 0x30
   13452:	47b0      	blx	r6
   13454:	2800      	cmp	r0, #0
   13456:	f6ff aac6 	blt.w	129e6 <cbvprintf+0x2a>
   1345a:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   1345c:	4653      	mov	r3, sl
   1345e:	e7f2      	b.n	13446 <cbvprintf+0xa8a>
			OUTS(cp, bpe);
   13460:	9b08      	ldr	r3, [sp, #32]
   13462:	463a      	mov	r2, r7
   13464:	4629      	mov	r1, r5
   13466:	4630      	mov	r0, r6
   13468:	f00b faa7 	bl	1e9ba <outs>
   1346c:	2800      	cmp	r0, #0
   1346e:	f6ff aaba 	blt.w	129e6 <cbvprintf+0x2a>
   13472:	4404      	add	r4, r0
   13474:	e033      	b.n	134de <cbvprintf+0xb22>
			if (conv->altform_0c | conv->altform_0) {
   13476:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1347a:	f3c3 1200 	ubfx	r2, r3, #4, #1
   1347e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   13482:	4313      	orrs	r3, r2
   13484:	d006      	beq.n	13494 <cbvprintf+0xad8>
				OUTC('0');
   13486:	4629      	mov	r1, r5
   13488:	2030      	movs	r0, #48	; 0x30
   1348a:	47b0      	blx	r6
   1348c:	2800      	cmp	r0, #0
   1348e:	f6ff aaaa 	blt.w	129e6 <cbvprintf+0x2a>
   13492:	3401      	adds	r4, #1
			if (conv->altform_0c) {
   13494:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   13498:	f013 0f10 	tst.w	r3, #16
   1349c:	d007      	beq.n	134ae <cbvprintf+0xaf2>
				OUTC(conv->specifier);
   1349e:	4629      	mov	r1, r5
   134a0:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   134a4:	47b0      	blx	r6
   134a6:	2800      	cmp	r0, #0
   134a8:	f6ff aa9d 	blt.w	129e6 <cbvprintf+0x2a>
   134ac:	3401      	adds	r4, #1
			pad_len = conv->pad0_value;
   134ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			while (pad_len-- > 0) {
   134b0:	f103 3aff 	add.w	sl, r3, #4294967295
   134b4:	2b00      	cmp	r3, #0
   134b6:	dd08      	ble.n	134ca <cbvprintf+0xb0e>
				OUTC('0');
   134b8:	4629      	mov	r1, r5
   134ba:	2030      	movs	r0, #48	; 0x30
   134bc:	47b0      	blx	r6
   134be:	2800      	cmp	r0, #0
   134c0:	f6ff aa91 	blt.w	129e6 <cbvprintf+0x2a>
   134c4:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   134c6:	4653      	mov	r3, sl
   134c8:	e7f2      	b.n	134b0 <cbvprintf+0xaf4>
			OUTS(bps, bpe);
   134ca:	9b08      	ldr	r3, [sp, #32]
   134cc:	463a      	mov	r2, r7
   134ce:	4629      	mov	r1, r5
   134d0:	4630      	mov	r0, r6
   134d2:	f00b fa72 	bl	1e9ba <outs>
   134d6:	2800      	cmp	r0, #0
   134d8:	f6ff aa85 	blt.w	129e6 <cbvprintf+0x2a>
   134dc:	4404      	add	r4, r0
		while (width > 0) {
   134de:	f1b8 0f00 	cmp.w	r8, #0
   134e2:	dd09      	ble.n	134f8 <cbvprintf+0xb3c>
			OUTC(' ');
   134e4:	4629      	mov	r1, r5
   134e6:	2020      	movs	r0, #32
   134e8:	47b0      	blx	r6
   134ea:	2800      	cmp	r0, #0
   134ec:	f6ff aa7b 	blt.w	129e6 <cbvprintf+0x2a>
   134f0:	3401      	adds	r4, #1
			--width;
   134f2:	f108 38ff 	add.w	r8, r8, #4294967295
   134f6:	e7f2      	b.n	134de <cbvprintf+0xb22>
		fp = extract_conversion(conv, sp);
   134f8:	464f      	mov	r7, r9
   134fa:	f7ff ba69 	b.w	129d0 <cbvprintf+0x14>
	return count;
   134fe:	4620      	mov	r0, r4
   13500:	f7ff ba71 	b.w	129e6 <cbvprintf+0x2a>
   13504:	0002462d 	.word	0x0002462d
   13508:	00024d11 	.word	0x00024d11

0001350c <nordicsemi_nrf91_init>:
   1350c:	f04f 0220 	mov.w	r2, #32
   13510:	f3ef 8311 	mrs	r3, BASEPRI
   13514:	f382 8811 	msr	BASEPRI, r2
   13518:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   1351c:	4a04      	ldr	r2, [pc, #16]	; (13530 <nordicsemi_nrf91_init+0x24>)
   1351e:	2101      	movs	r1, #1
   13520:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   13524:	f383 8811 	msr	BASEPRI, r3
   13528:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   1352c:	2000      	movs	r0, #0
   1352e:	4770      	bx	lr
   13530:	40039000 	.word	0x40039000

00013534 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   13534:	b130      	cbz	r0, 13544 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   13536:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   13538:	0180      	lsls	r0, r0, #6
   1353a:	4b03      	ldr	r3, [pc, #12]	; (13548 <arch_busy_wait+0x14>)
   1353c:	f043 0301 	orr.w	r3, r3, #1
   13540:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   13542:	bd08      	pop	{r3, pc}
   13544:	4770      	bx	lr
   13546:	bf00      	nop
   13548:	00024190 	.word	0x00024190

0001354c <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
   1354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1354e:	4605      	mov	r5, r0
   13550:	460e      	mov	r6, r1
   13552:	4617      	mov	r7, r2
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   13554:	4c0e      	ldr	r4, [pc, #56]	; (13590 <z_impl_zsock_socket+0x44>)
   13556:	4b0f      	ldr	r3, [pc, #60]	; (13594 <z_impl_zsock_socket+0x48>)
   13558:	429c      	cmp	r4, r3
   1355a:	d211      	bcs.n	13580 <z_impl_zsock_socket+0x34>
		if (sock_family->family != family &&
   1355c:	6823      	ldr	r3, [r4, #0]
   1355e:	42ab      	cmp	r3, r5
   13560:	d000      	beq.n	13564 <z_impl_zsock_socket+0x18>
   13562:	b95b      	cbnz	r3, 1357c <z_impl_zsock_socket+0x30>
			continue;
		}

		NET_ASSERT(sock_family->is_supported);

		if (!sock_family->is_supported(family, type, proto)) {
   13564:	6863      	ldr	r3, [r4, #4]
   13566:	463a      	mov	r2, r7
   13568:	4631      	mov	r1, r6
   1356a:	4628      	mov	r0, r5
   1356c:	4798      	blx	r3
   1356e:	b128      	cbz	r0, 1357c <z_impl_zsock_socket+0x30>
			continue;
		}

		return sock_family->handler(family, type, proto);
   13570:	68a3      	ldr	r3, [r4, #8]
   13572:	463a      	mov	r2, r7
   13574:	4631      	mov	r1, r6
   13576:	4628      	mov	r0, r5
   13578:	4798      	blx	r3
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
	return -1;
}
   1357a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   1357c:	340c      	adds	r4, #12
   1357e:	e7ea      	b.n	13556 <z_impl_zsock_socket+0xa>
	errno = EAFNOSUPPORT;
   13580:	f00c fadf 	bl	1fb42 <__errno>
   13584:	236a      	movs	r3, #106	; 0x6a
   13586:	6003      	str	r3, [r0, #0]
	return -1;
   13588:	f04f 30ff 	mov.w	r0, #4294967295
   1358c:	e7f5      	b.n	1357a <z_impl_zsock_socket+0x2e>
   1358e:	bf00      	nop
   13590:	000240c8 	.word	0x000240c8
   13594:	000240d4 	.word	0x000240d4

00013598 <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
   13598:	4b01      	ldr	r3, [pc, #4]	; (135a0 <socket_offload_dns_register+0x8>)
   1359a:	6018      	str	r0, [r3, #0]
}
   1359c:	4770      	bx	lr
   1359e:	bf00      	nop
   135a0:	20015aac 	.word	0x20015aac

000135a4 <credentials_init>:

/* A mutex for protecting access to the credentials array. */
static struct k_mutex credential_lock;

static int credentials_init(const struct device *unused)
{
   135a4:	b508      	push	{r3, lr}
	(void)memset(credentials, 0, sizeof(credentials));
   135a6:	2240      	movs	r2, #64	; 0x40
   135a8:	2100      	movs	r1, #0
   135aa:	4804      	ldr	r0, [pc, #16]	; (135bc <credentials_init+0x18>)
   135ac:	f00f fd03 	bl	22fb6 <memset>
   135b0:	4803      	ldr	r0, [pc, #12]	; (135c0 <credentials_init+0x1c>)
   135b2:	f00f f9c9 	bl	22948 <z_impl_k_mutex_init>

	k_mutex_init(&credential_lock);

	return 0;
}
   135b6:	2000      	movs	r0, #0
   135b8:	bd08      	pop	{r3, pc}
   135ba:	bf00      	nop
   135bc:	20015ac4 	.word	0x20015ac4
   135c0:	20015ab0 	.word	0x20015ab0

000135c4 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   135c4:	4b1b      	ldr	r3, [pc, #108]	; (13634 <pm_system_resume+0x70>)
   135c6:	681b      	ldr	r3, [r3, #0]
   135c8:	2b00      	cmp	r3, #0
   135ca:	d132      	bne.n	13632 <pm_system_resume+0x6e>
{
   135cc:	b530      	push	{r4, r5, lr}
   135ce:	b085      	sub	sp, #20
		post_ops_done = 1;
   135d0:	4b18      	ldr	r3, [pc, #96]	; (13634 <pm_system_resume+0x70>)
   135d2:	2201      	movs	r2, #1
   135d4:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
   135d6:	4b18      	ldr	r3, [pc, #96]	; (13638 <pm_system_resume+0x74>)
   135d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   135dc:	ab04      	add	r3, sp, #16
   135de:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   135e2:	4b16      	ldr	r3, [pc, #88]	; (1363c <pm_system_resume+0x78>)
   135e4:	b163      	cbz	r3, 13600 <pm_system_resume+0x3c>
		pm_power_state_exit_post_ops(info);
   135e6:	f00b fa16 	bl	1ea16 <pm_power_state_exit_post_ops>
	__asm__ volatile(
   135ea:	f04f 0320 	mov.w	r3, #32
   135ee:	f3ef 8511 	mrs	r5, BASEPRI
   135f2:	f383 8811 	msr	BASEPRI, r3
   135f6:	f3bf 8f6f 	isb	sy
   135fa:	4b11      	ldr	r3, [pc, #68]	; (13640 <pm_system_resume+0x7c>)
   135fc:	681c      	ldr	r4, [r3, #0]
   135fe:	e00a      	b.n	13616 <pm_system_resume+0x52>
	__asm__ volatile(
   13600:	2300      	movs	r3, #0
   13602:	f383 8811 	msr	BASEPRI, r3
   13606:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1360a:	e7ee      	b.n	135ea <pm_system_resume+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1360c:	4623      	mov	r3, r4
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   1360e:	b10c      	cbz	r4, 13614 <pm_system_resume+0x50>
	return node->next;
   13610:	6823      	ldr	r3, [r4, #0]
   13612:	b143      	cbz	r3, 13626 <pm_system_resume+0x62>
{
   13614:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   13616:	b134      	cbz	r4, 13626 <pm_system_resume+0x62>
			callback = notifier->state_exit;
   13618:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
   1361a:	2b00      	cmp	r3, #0
   1361c:	d0f6      	beq.n	1360c <pm_system_resume+0x48>
			callback(z_power_state.state);
   1361e:	4a06      	ldr	r2, [pc, #24]	; (13638 <pm_system_resume+0x74>)
   13620:	7810      	ldrb	r0, [r2, #0]
   13622:	4798      	blx	r3
   13624:	e7f2      	b.n	1360c <pm_system_resume+0x48>
	__asm__ volatile(
   13626:	f385 8811 	msr	BASEPRI, r5
   1362a:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
   1362e:	b005      	add	sp, #20
   13630:	bd30      	pop	{r4, r5, pc}
   13632:	4770      	bx	lr
   13634:	2001452c 	.word	0x2001452c
   13638:	20015b0c 	.word	0x20015b0c
   1363c:	0001ea17 	.word	0x0001ea17
   13640:	20015b04 	.word	0x20015b04

00013644 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   13644:	b570      	push	{r4, r5, r6, lr}
   13646:	b088      	sub	sp, #32
   13648:	4606      	mov	r6, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   1364a:	4c2a      	ldr	r4, [pc, #168]	; (136f4 <pm_system_suspend+0xb0>)
   1364c:	466d      	mov	r5, sp
   1364e:	4601      	mov	r1, r0
   13650:	4628      	mov	r0, r5
   13652:	f00c f867 	bl	1f724 <pm_policy_next_state>
   13656:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   1365a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   1365e:	7820      	ldrb	r0, [r4, #0]
   13660:	2800      	cmp	r0, #0
   13662:	d045      	beq.n	136f0 <pm_system_suspend+0xac>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
   13664:	4b24      	ldr	r3, [pc, #144]	; (136f8 <pm_system_suspend+0xb4>)
   13666:	2200      	movs	r2, #0
   13668:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   1366a:	f1b6 3fff 	cmp.w	r6, #4294967295
   1366e:	d10c      	bne.n	1368a <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   13670:	f008 f8b0 	bl	1b7d4 <k_sched_lock>
	__asm__ volatile(
   13674:	f04f 0320 	mov.w	r3, #32
   13678:	f3ef 8511 	mrs	r5, BASEPRI
   1367c:	f383 8811 	msr	BASEPRI, r3
   13680:	f3bf 8f6f 	isb	sy
	return list->head;
   13684:	4b1d      	ldr	r3, [pc, #116]	; (136fc <pm_system_suspend+0xb8>)
   13686:	681c      	ldr	r4, [r3, #0]
   13688:	e016      	b.n	136b8 <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
   1368a:	68a3      	ldr	r3, [r4, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
   1368c:	0c59      	lsrs	r1, r3, #17
   1368e:	03d8      	lsls	r0, r3, #15
   13690:	4c1b      	ldr	r4, [pc, #108]	; (13700 <pm_system_suspend+0xbc>)
   13692:	4a1c      	ldr	r2, [pc, #112]	; (13704 <pm_system_suspend+0xc0>)
   13694:	2300      	movs	r3, #0
   13696:	1900      	adds	r0, r0, r4
   13698:	f04f 0400 	mov.w	r4, #0
   1369c:	eb44 0101 	adc.w	r1, r4, r1
   136a0:	f7fd fa62 	bl	10b68 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   136a4:	2101      	movs	r1, #1
   136a6:	1a30      	subs	r0, r6, r0
   136a8:	f00f fb16 	bl	22cd8 <z_set_timeout_expiry>
   136ac:	e7e0      	b.n	13670 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   136ae:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   136b0:	b10c      	cbz	r4, 136b6 <pm_system_suspend+0x72>
	return node->next;
   136b2:	6823      	ldr	r3, [r4, #0]
   136b4:	b143      	cbz	r3, 136c8 <pm_system_suspend+0x84>
{
   136b6:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   136b8:	b134      	cbz	r4, 136c8 <pm_system_suspend+0x84>
			callback = notifier->state_entry;
   136ba:	6863      	ldr	r3, [r4, #4]
		if (callback) {
   136bc:	2b00      	cmp	r3, #0
   136be:	d0f6      	beq.n	136ae <pm_system_suspend+0x6a>
			callback(z_power_state.state);
   136c0:	4a0c      	ldr	r2, [pc, #48]	; (136f4 <pm_system_suspend+0xb0>)
   136c2:	7810      	ldrb	r0, [r2, #0]
   136c4:	4798      	blx	r3
   136c6:	e7f2      	b.n	136ae <pm_system_suspend+0x6a>
	__asm__ volatile(
   136c8:	f385 8811 	msr	BASEPRI, r5
   136cc:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
   136d0:	4b08      	ldr	r3, [pc, #32]	; (136f4 <pm_system_suspend+0xb0>)
   136d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   136d6:	ab08      	add	r3, sp, #32
   136d8:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   136dc:	4b0a      	ldr	r3, [pc, #40]	; (13708 <pm_system_suspend+0xc4>)
   136de:	b10b      	cbz	r3, 136e4 <pm_system_suspend+0xa0>
		pm_power_state_set(info);
   136e0:	f00b f986 	bl	1e9f0 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   136e4:	f7ff ff6e 	bl	135c4 <pm_system_resume>
	k_sched_unlock();
   136e8:	f008 f924 	bl	1b934 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   136ec:	4b01      	ldr	r3, [pc, #4]	; (136f4 <pm_system_suspend+0xb0>)
   136ee:	7818      	ldrb	r0, [r3, #0]
}
   136f0:	b008      	add	sp, #32
   136f2:	bd70      	pop	{r4, r5, r6, pc}
   136f4:	20015b0c 	.word	0x20015b0c
   136f8:	2001452c 	.word	0x2001452c
   136fc:	20015b04 	.word	0x20015b04
   13700:	000f423f 	.word	0x000f423f
   13704:	000f4240 	.word	0x000f4240
   13708:	0001e9f1 	.word	0x0001e9f1

0001370c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   1370c:	b510      	push	{r4, lr}
   1370e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   13710:	280a      	cmp	r0, #10
   13712:	d007      	beq.n	13724 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   13714:	4b07      	ldr	r3, [pc, #28]	; (13734 <console_out+0x28>)
   13716:	6818      	ldr	r0, [r3, #0]
   13718:	b2e1      	uxtb	r1, r4
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
   1371a:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   1371c:	685b      	ldr	r3, [r3, #4]
   1371e:	4798      	blx	r3

	return c;
}
   13720:	4620      	mov	r0, r4
   13722:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   13724:	4b03      	ldr	r3, [pc, #12]	; (13734 <console_out+0x28>)
   13726:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   13728:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1372a:	685b      	ldr	r3, [r3, #4]
   1372c:	210d      	movs	r1, #13
   1372e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   13730:	e7f0      	b.n	13714 <console_out+0x8>
   13732:	bf00      	nop
   13734:	20015b18 	.word	0x20015b18

00013738 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
   13738:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
   1373a:	4c04      	ldr	r4, [pc, #16]	; (1374c <uart_console_hook_install+0x14>)
   1373c:	4620      	mov	r0, r4
   1373e:	f000 ff09 	bl	14554 <__stdout_hook_install>
	__printk_hook_install(console_out);
   13742:	4620      	mov	r0, r4
   13744:	f7fe fdc2 	bl	122cc <__printk_hook_install>
}
   13748:	bd10      	pop	{r4, pc}
   1374a:	bf00      	nop
   1374c:	0001370d 	.word	0x0001370d

00013750 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   13750:	b508      	push	{r3, lr}
   13752:	4804      	ldr	r0, [pc, #16]	; (13764 <uart_console_init+0x14>)
   13754:	f007 fb96 	bl	1ae84 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   13758:	4b03      	ldr	r3, [pc, #12]	; (13768 <uart_console_init+0x18>)
   1375a:	6018      	str	r0, [r3, #0]

	uart_console_hook_install();
   1375c:	f7ff ffec 	bl	13738 <uart_console_hook_install>

	return 0;
}
   13760:	2000      	movs	r0, #0
   13762:	bd08      	pop	{r3, pc}
   13764:	00024630 	.word	0x00024630
   13768:	20015b18 	.word	0x20015b18

0001376c <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   1376c:	4800      	ldr	r0, [pc, #0]	; (13770 <get_hf_flags+0x4>)
   1376e:	4770      	bx	lr
   13770:	20015b70 	.word	0x20015b70

00013774 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   13774:	4b03      	ldr	r3, [pc, #12]	; (13784 <get_subsys+0x10>)
   13776:	1ac0      	subs	r0, r0, r3
   13778:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   1377a:	4b03      	ldr	r3, [pc, #12]	; (13788 <get_subsys+0x14>)
   1377c:	fb03 f000 	mul.w	r0, r3, r0
   13780:	4770      	bx	lr
   13782:	bf00      	nop
   13784:	20015b30 	.word	0x20015b30
   13788:	b6db6db7 	.word	0xb6db6db7

0001378c <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1378c:	b538      	push	{r3, r4, r5, lr}
   1378e:	4605      	mov	r5, r0
   13790:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   13792:	f7ff ffef 	bl	13774 <get_subsys>
   13796:	4601      	mov	r1, r0
   13798:	2240      	movs	r2, #64	; 0x40
   1379a:	4803      	ldr	r0, [pc, #12]	; (137a8 <onoff_stop+0x1c>)
   1379c:	f00c f83f 	bl	1f81e <stop>
   137a0:	4601      	mov	r1, r0
	notify(mgr, res);
   137a2:	4628      	mov	r0, r5
   137a4:	47a0      	blx	r4
}
   137a6:	bd38      	pop	{r3, r4, r5, pc}
   137a8:	00023e18 	.word	0x00023e18

000137ac <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   137ac:	b530      	push	{r4, r5, lr}
   137ae:	b083      	sub	sp, #12
   137b0:	4605      	mov	r5, r0
   137b2:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   137b4:	f7ff ffde 	bl	13774 <get_subsys>
   137b8:	4601      	mov	r1, r0
   137ba:	2340      	movs	r3, #64	; 0x40
   137bc:	9300      	str	r3, [sp, #0]
   137be:	4623      	mov	r3, r4
   137c0:	4a05      	ldr	r2, [pc, #20]	; (137d8 <onoff_start+0x2c>)
   137c2:	4806      	ldr	r0, [pc, #24]	; (137dc <onoff_start+0x30>)
   137c4:	f00c f845 	bl	1f852 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   137c8:	1e01      	subs	r1, r0, #0
   137ca:	db01      	blt.n	137d0 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   137cc:	b003      	add	sp, #12
   137ce:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   137d0:	4628      	mov	r0, r5
   137d2:	47a0      	blx	r4
}
   137d4:	e7fa      	b.n	137cc <onoff_start+0x20>
   137d6:	bf00      	nop
   137d8:	0001f89b 	.word	0x0001f89b
   137dc:	00023e18 	.word	0x00023e18

000137e0 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   137e0:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   137e2:	b110      	cbz	r0, 137ea <clock_event_handler+0xa>
   137e4:	2801      	cmp	r0, #1
   137e6:	d00d      	beq.n	13804 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   137e8:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   137ea:	2100      	movs	r1, #0
   137ec:	4808      	ldr	r0, [pc, #32]	; (13810 <clock_event_handler+0x30>)
   137ee:	f00b ff9e 	bl	1f72e <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   137f2:	6883      	ldr	r3, [r0, #8]
   137f4:	f013 0f07 	tst.w	r3, #7
   137f8:	d1f6      	bne.n	137e8 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   137fa:	2100      	movs	r1, #0
   137fc:	4804      	ldr	r0, [pc, #16]	; (13810 <clock_event_handler+0x30>)
   137fe:	f00b fffc 	bl	1f7fa <clkstarted_handle>
   13802:	e7f1      	b.n	137e8 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   13804:	2101      	movs	r1, #1
   13806:	4802      	ldr	r0, [pc, #8]	; (13810 <clock_event_handler+0x30>)
   13808:	f00b fff7 	bl	1f7fa <clkstarted_handle>
}
   1380c:	e7ec      	b.n	137e8 <clock_event_handler+0x8>
   1380e:	bf00      	nop
   13810:	00023e18 	.word	0x00023e18

00013814 <generic_hfclk_start>:
{
   13814:	b510      	push	{r4, lr}
	__asm__ volatile(
   13816:	f04f 0320 	mov.w	r3, #32
   1381a:	f3ef 8411 	mrs	r4, BASEPRI
   1381e:	f383 8811 	msr	BASEPRI, r3
   13822:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   13826:	4a13      	ldr	r2, [pc, #76]	; (13874 <generic_hfclk_start+0x60>)
   13828:	6813      	ldr	r3, [r2, #0]
   1382a:	f043 0302 	orr.w	r3, r3, #2
   1382e:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   13830:	f013 0f01 	tst.w	r3, #1
   13834:	d108      	bne.n	13848 <generic_hfclk_start+0x34>
	bool already_started = false;
   13836:	2300      	movs	r3, #0
	__asm__ volatile(
   13838:	f384 8811 	msr	BASEPRI, r4
   1383c:	f3bf 8f6f 	isb	sy
	if (already_started) {
   13840:	b993      	cbnz	r3, 13868 <generic_hfclk_start+0x54>
	hfclk_start();
   13842:	f00c f832 	bl	1f8aa <hfclk_start>
}
   13846:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   13848:	4b0b      	ldr	r3, [pc, #44]	; (13878 <generic_hfclk_start+0x64>)
   1384a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1384e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   13852:	f012 0f01 	tst.w	r2, #1
   13856:	d101      	bne.n	1385c <generic_hfclk_start+0x48>
	bool already_started = false;
   13858:	2300      	movs	r3, #0
   1385a:	e7ed      	b.n	13838 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   1385c:	f7ff ff86 	bl	1376c <get_hf_flags>
   13860:	f00b ffb8 	bl	1f7d4 <set_on_state>
			already_started = true;
   13864:	2301      	movs	r3, #1
   13866:	e7e7      	b.n	13838 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   13868:	2100      	movs	r1, #0
   1386a:	4804      	ldr	r0, [pc, #16]	; (1387c <generic_hfclk_start+0x68>)
   1386c:	f00b ffc5 	bl	1f7fa <clkstarted_handle>
		return;
   13870:	e7e9      	b.n	13846 <generic_hfclk_start+0x32>
   13872:	bf00      	nop
   13874:	20015b80 	.word	0x20015b80
   13878:	40005000 	.word	0x40005000
   1387c:	00023e18 	.word	0x00023e18

00013880 <generic_hfclk_stop>:
{
   13880:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13882:	4b08      	ldr	r3, [pc, #32]	; (138a4 <generic_hfclk_stop+0x24>)
   13884:	e8d3 2fef 	ldaex	r2, [r3]
   13888:	f022 0102 	bic.w	r1, r2, #2
   1388c:	e8c3 1fe0 	stlex	r0, r1, [r3]
   13890:	2800      	cmp	r0, #0
   13892:	d1f7      	bne.n	13884 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   13894:	f012 0f01 	tst.w	r2, #1
   13898:	d000      	beq.n	1389c <generic_hfclk_stop+0x1c>
}
   1389a:	bd08      	pop	{r3, pc}
	hfclk_stop();
   1389c:	f00c f80f 	bl	1f8be <hfclk_stop>
   138a0:	e7fb      	b.n	1389a <generic_hfclk_stop+0x1a>
   138a2:	bf00      	nop
   138a4:	20015b80 	.word	0x20015b80

000138a8 <api_blocking_start>:
{
   138a8:	b500      	push	{lr}
   138aa:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   138ac:	f8cd d000 	str.w	sp, [sp]
   138b0:	f8cd d004 	str.w	sp, [sp, #4]
   138b4:	2300      	movs	r3, #0
   138b6:	9302      	str	r3, [sp, #8]
   138b8:	2301      	movs	r3, #1
   138ba:	9303      	str	r3, [sp, #12]
   138bc:	ab04      	add	r3, sp, #16
   138be:	9304      	str	r3, [sp, #16]
   138c0:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   138c2:	466b      	mov	r3, sp
   138c4:	4a06      	ldr	r2, [pc, #24]	; (138e0 <api_blocking_start+0x38>)
   138c6:	f00b ffe0 	bl	1f88a <api_start>
	if (err < 0) {
   138ca:	2800      	cmp	r0, #0
   138cc:	db05      	blt.n	138da <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   138ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   138d2:	2300      	movs	r3, #0
   138d4:	4668      	mov	r0, sp
   138d6:	f007 fed5 	bl	1b684 <z_impl_k_sem_take>
}
   138da:	b007      	add	sp, #28
   138dc:	f85d fb04 	ldr.w	pc, [sp], #4
   138e0:	0001f8d3 	.word	0x0001f8d3

000138e4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   138e4:	b570      	push	{r4, r5, r6, lr}
   138e6:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   138e8:	2200      	movs	r2, #0
   138ea:	2101      	movs	r1, #1
   138ec:	2005      	movs	r0, #5
   138ee:	f000 fa61 	bl	13db4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   138f2:	2005      	movs	r0, #5
   138f4:	f000 fa40 	bl	13d78 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   138f8:	4811      	ldr	r0, [pc, #68]	; (13940 <clk_init+0x5c>)
   138fa:	f002 ff0b 	bl	16714 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   138fe:	4b11      	ldr	r3, [pc, #68]	; (13944 <clk_init+0x60>)
   13900:	4298      	cmp	r0, r3
   13902:	d11a      	bne.n	1393a <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   13904:	f00d fc71 	bl	211ea <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   13908:	2400      	movs	r4, #0
   1390a:	e003      	b.n	13914 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1390c:	2301      	movs	r3, #1
   1390e:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   13910:	441c      	add	r4, r3
   13912:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
   13914:	2c01      	cmp	r4, #1
   13916:	d80e      	bhi.n	13936 <clk_init+0x52>
						get_sub_data(dev, i);
   13918:	4621      	mov	r1, r4
   1391a:	4630      	mov	r0, r6
   1391c:	f00b ff07 	bl	1f72e <get_sub_data>
   13920:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
   13922:	4621      	mov	r1, r4
   13924:	4630      	mov	r0, r6
   13926:	f00b ff0d 	bl	1f744 <get_onoff_manager>
   1392a:	4907      	ldr	r1, [pc, #28]	; (13948 <clk_init+0x64>)
   1392c:	f00a fc10 	bl	1e150 <onoff_manager_init>
		if (err < 0) {
   13930:	2800      	cmp	r0, #0
   13932:	daeb      	bge.n	1390c <clk_init+0x28>
   13934:	e000      	b.n	13938 <clk_init+0x54>
	}

	return 0;
   13936:	2000      	movs	r0, #0
}
   13938:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1393a:	f06f 0004 	mvn.w	r0, #4
   1393e:	e7fb      	b.n	13938 <clk_init+0x54>
   13940:	000137e1 	.word	0x000137e1
   13944:	0bad0000 	.word	0x0bad0000
   13948:	00024664 	.word	0x00024664

0001394c <lfclk_spinwait>:
{
   1394c:	b570      	push	{r4, r5, r6, lr}
   1394e:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   13950:	2801      	cmp	r0, #1
   13952:	d106      	bne.n	13962 <lfclk_spinwait+0x16>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   13954:	4b32      	ldr	r3, [pc, #200]	; (13a20 <lfclk_spinwait+0xd4>)
   13956:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1395a:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1395e:	2b02      	cmp	r3, #2
   13960:	d03c      	beq.n	139dc <lfclk_spinwait+0x90>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   13962:	f00e ff91 	bl	22888 <k_is_in_isr>
   13966:	b920      	cbnz	r0, 13972 <lfclk_spinwait+0x26>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   13968:	4b2e      	ldr	r3, [pc, #184]	; (13a24 <lfclk_spinwait+0xd8>)
   1396a:	781b      	ldrb	r3, [r3, #0]
   1396c:	b193      	cbz	r3, 13994 <lfclk_spinwait+0x48>
   1396e:	2300      	movs	r3, #0
   13970:	e000      	b.n	13974 <lfclk_spinwait+0x28>
   13972:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   13974:	461c      	mov	r4, r3
   13976:	b17b      	cbz	r3, 13998 <lfclk_spinwait+0x4c>
	__asm__ volatile(
   13978:	f04f 0320 	mov.w	r3, #32
   1397c:	f3ef 8611 	mrs	r6, BASEPRI
   13980:	f383 8811 	msr	BASEPRI, r3
   13984:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   13988:	b994      	cbnz	r4, 139b0 <lfclk_spinwait+0x64>
    p_reg->INTENCLR = mask;
   1398a:	4b25      	ldr	r3, [pc, #148]	; (13a20 <lfclk_spinwait+0xd4>)
   1398c:	2202      	movs	r2, #2
   1398e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   13992:	e00d      	b.n	139b0 <lfclk_spinwait+0x64>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   13994:	2301      	movs	r3, #1
   13996:	e7ed      	b.n	13974 <lfclk_spinwait+0x28>
	int key = isr_mode ? irq_lock() : 0;
   13998:	2600      	movs	r6, #0
   1399a:	e7f5      	b.n	13988 <lfclk_spinwait+0x3c>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1399c:	b1fc      	cbz	r4, 139de <lfclk_spinwait+0x92>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1399e:	4630      	mov	r0, r6
   139a0:	f000 fa82 	bl	13ea8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   139a4:	4b1e      	ldr	r3, [pc, #120]	; (13a20 <lfclk_spinwait+0xd4>)
   139a6:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   139aa:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   139ac:	2b01      	cmp	r3, #1
   139ae:	d01b      	beq.n	139e8 <lfclk_spinwait+0x9c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   139b0:	4a1b      	ldr	r2, [pc, #108]	; (13a20 <lfclk_spinwait+0xd4>)
   139b2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   139b6:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   139ba:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   139be:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   139c2:	d125      	bne.n	13a10 <lfclk_spinwait+0xc4>
    return false;
   139c4:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   139c6:	2a00      	cmp	r2, #0
   139c8:	d0e8      	beq.n	1399c <lfclk_spinwait+0x50>
   139ca:	2b02      	cmp	r3, #2
   139cc:	d001      	beq.n	139d2 <lfclk_spinwait+0x86>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   139ce:	2d01      	cmp	r5, #1
   139d0:	d1e4      	bne.n	1399c <lfclk_spinwait+0x50>
	if (isr_mode) {
   139d2:	b1fc      	cbz	r4, 13a14 <lfclk_spinwait+0xc8>
	__asm__ volatile(
   139d4:	f386 8811 	msr	BASEPRI, r6
   139d8:	f3bf 8f6f 	isb	sy
}
   139dc:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
   139de:	2021      	movs	r0, #33	; 0x21
   139e0:	2100      	movs	r1, #0
   139e2:	f008 fa0b 	bl	1bdfc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   139e6:	e7dd      	b.n	139a4 <lfclk_spinwait+0x58>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   139e8:	4b0f      	ldr	r3, [pc, #60]	; (13a28 <lfclk_spinwait+0xdc>)
   139ea:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   139ec:	2b00      	cmp	r3, #0
   139ee:	d0df      	beq.n	139b0 <lfclk_spinwait+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   139f0:	4b0d      	ldr	r3, [pc, #52]	; (13a28 <lfclk_spinwait+0xdc>)
   139f2:	2200      	movs	r2, #0
   139f4:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   139f6:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   139f8:	4b09      	ldr	r3, [pc, #36]	; (13a20 <lfclk_spinwait+0xd4>)
   139fa:	2202      	movs	r2, #2
   139fc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13a00:	4b0a      	ldr	r3, [pc, #40]	; (13a2c <lfclk_spinwait+0xe0>)
   13a02:	2220      	movs	r2, #32
   13a04:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13a08:	4b09      	ldr	r3, [pc, #36]	; (13a30 <lfclk_spinwait+0xe4>)
   13a0a:	2201      	movs	r2, #1
   13a0c:	601a      	str	r2, [r3, #0]
}
   13a0e:	e7cf      	b.n	139b0 <lfclk_spinwait+0x64>
                return true;
   13a10:	2201      	movs	r2, #1
   13a12:	e7d8      	b.n	139c6 <lfclk_spinwait+0x7a>
    p_reg->INTENSET = mask;
   13a14:	4b02      	ldr	r3, [pc, #8]	; (13a20 <lfclk_spinwait+0xd4>)
   13a16:	2202      	movs	r2, #2
   13a18:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   13a1c:	e7de      	b.n	139dc <lfclk_spinwait+0x90>
   13a1e:	bf00      	nop
   13a20:	40005000 	.word	0x40005000
   13a24:	20016ed6 	.word	0x20016ed6
   13a28:	40005104 	.word	0x40005104
   13a2c:	e000e100 	.word	0xe000e100
   13a30:	40005008 	.word	0x40005008

00013a34 <z_nrf_clock_control_lf_on>:
{
   13a34:	b510      	push	{r4, lr}
   13a36:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13a38:	4b0e      	ldr	r3, [pc, #56]	; (13a74 <z_nrf_clock_control_lf_on+0x40>)
   13a3a:	2101      	movs	r1, #1
   13a3c:	e8d3 2fef 	ldaex	r2, [r3]
   13a40:	e8c3 1fe0 	stlex	r0, r1, [r3]
   13a44:	2800      	cmp	r0, #0
   13a46:	d1f9      	bne.n	13a3c <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
   13a48:	b11a      	cbz	r2, 13a52 <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
   13a4a:	1e63      	subs	r3, r4, #1
   13a4c:	2b01      	cmp	r3, #1
   13a4e:	d90c      	bls.n	13a6a <z_nrf_clock_control_lf_on+0x36>
}
   13a50:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   13a52:	4809      	ldr	r0, [pc, #36]	; (13a78 <z_nrf_clock_control_lf_on+0x44>)
   13a54:	f00b fe76 	bl	1f744 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   13a58:	4908      	ldr	r1, [pc, #32]	; (13a7c <z_nrf_clock_control_lf_on+0x48>)
   13a5a:	2300      	movs	r3, #0
   13a5c:	604b      	str	r3, [r1, #4]
   13a5e:	60cb      	str	r3, [r1, #12]
   13a60:	2301      	movs	r3, #1
   13a62:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   13a64:	f00a fb90 	bl	1e188 <onoff_request>
   13a68:	e7ef      	b.n	13a4a <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
   13a6a:	4620      	mov	r0, r4
   13a6c:	f7ff ff6e 	bl	1394c <lfclk_spinwait>
		break;
   13a70:	e7ee      	b.n	13a50 <z_nrf_clock_control_lf_on+0x1c>
   13a72:	bf00      	nop
   13a74:	20015b84 	.word	0x20015b84
   13a78:	00023e18 	.word	0x00023e18
   13a7c:	20015b20 	.word	0x20015b20

00013a80 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   13a80:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   13a84:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   13a88:	4b01      	ldr	r3, [pc, #4]	; (13a90 <set_comparator+0x10>)
   13a8a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   13a8e:	4770      	bx	lr
   13a90:	40015000 	.word	0x40015000

00013a94 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   13a94:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   13a98:	4b01      	ldr	r3, [pc, #4]	; (13aa0 <get_comparator+0xc>)
   13a9a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   13a9e:	4770      	bx	lr
   13aa0:	40015000 	.word	0x40015000

00013aa4 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13aa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   13aa8:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   13aaa:	4a02      	ldr	r2, [pc, #8]	; (13ab4 <event_enable+0x10>)
   13aac:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   13ab0:	4770      	bx	lr
   13ab2:	bf00      	nop
   13ab4:	40015000 	.word	0x40015000

00013ab8 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   13abc:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   13abe:	4a02      	ldr	r2, [pc, #8]	; (13ac8 <event_disable+0x10>)
   13ac0:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   13ac4:	4770      	bx	lr
   13ac6:	bf00      	nop
   13ac8:	40015000 	.word	0x40015000

00013acc <counter>:
     return p_reg->COUNTER;
   13acc:	4b01      	ldr	r3, [pc, #4]	; (13ad4 <counter+0x8>)
   13ace:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   13ad2:	4770      	bx	lr
   13ad4:	40015000 	.word	0x40015000

00013ad8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   13ad8:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   13ada:	2400      	movs	r4, #0
   13adc:	2c00      	cmp	r4, #0
   13ade:	dd00      	ble.n	13ae2 <rtc_nrf_isr+0xa>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   13ae0:	bd70      	pop	{r4, r5, r6, pc}
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   13ae2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   13ae6:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   13ae8:	4a19      	ldr	r2, [pc, #100]	; (13b50 <rtc_nrf_isr+0x78>)
   13aea:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   13aee:	4213      	tst	r3, r2
   13af0:	d009      	beq.n	13b06 <rtc_nrf_isr+0x2e>
		    nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan))) {
   13af2:	f104 0350 	add.w	r3, r4, #80	; 0x50
   13af6:	009b      	lsls	r3, r3, #2
   13af8:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13afa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13afe:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   13b02:	681b      	ldr	r3, [r3, #0]
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   13b04:	b90b      	cbnz	r3, 13b0a <rtc_nrf_isr+0x32>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   13b06:	3401      	adds	r4, #1
   13b08:	e7e8      	b.n	13adc <rtc_nrf_isr+0x4>
			event_clear(chan);
   13b0a:	4620      	mov	r0, r4
   13b0c:	f00b feec 	bl	1f8e8 <event_clear>
			event_disable(chan);
   13b10:	4620      	mov	r0, r4
   13b12:	f7ff ffd1 	bl	13ab8 <event_disable>
			cc_val = get_comparator(chan);
   13b16:	4620      	mov	r0, r4
   13b18:	f7ff ffbc 	bl	13a94 <get_comparator>
   13b1c:	4605      	mov	r5, r0
			now = counter();
   13b1e:	f7ff ffd5 	bl	13acc <counter>
   13b22:	4606      	mov	r6, r0
			if (counter_sub(now, cc_val) > COUNTER_HALF_SPAN) {
   13b24:	4629      	mov	r1, r5
   13b26:	f00b fedb 	bl	1f8e0 <counter_sub>
   13b2a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13b2e:	d800      	bhi.n	13b32 <rtc_nrf_isr+0x5a>
			cc_val = get_comparator(chan);
   13b30:	462e      	mov	r6, r5
			handler = cc_data[chan].callback;
   13b32:	4b08      	ldr	r3, [pc, #32]	; (13b54 <rtc_nrf_isr+0x7c>)
   13b34:	f853 5034 	ldr.w	r5, [r3, r4, lsl #3]
			cc_data[chan].callback = NULL;
   13b38:	2200      	movs	r2, #0
   13b3a:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
			if (handler) {
   13b3e:	2d00      	cmp	r5, #0
   13b40:	d0e1      	beq.n	13b06 <rtc_nrf_isr+0x2e>
				handler(chan, cc_val,
   13b42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   13b46:	685a      	ldr	r2, [r3, #4]
   13b48:	4631      	mov	r1, r6
   13b4a:	4620      	mov	r0, r4
   13b4c:	47a8      	blx	r5
   13b4e:	e7da      	b.n	13b06 <rtc_nrf_isr+0x2e>
   13b50:	40015000 	.word	0x40015000
   13b54:	20015b8c 	.word	0x20015b8c

00013b58 <compare_set>:
{
   13b58:	b538      	push	{r3, r4, r5, lr}
	cc_data[chan].callback = handler;
   13b5a:	4c04      	ldr	r4, [pc, #16]	; (13b6c <compare_set+0x14>)
   13b5c:	f844 2030 	str.w	r2, [r4, r0, lsl #3]
	cc_data[chan].user_context = user_data;
   13b60:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
   13b64:	6063      	str	r3, [r4, #4]
	set_absolute_alarm(chan, cc_value);
   13b66:	f00b fecb 	bl	1f900 <set_absolute_alarm>
}
   13b6a:	bd38      	pop	{r3, r4, r5, pc}
   13b6c:	20015b8c 	.word	0x20015b8c

00013b70 <sys_clock_timeout_handler>:
{
   13b70:	b538      	push	{r3, r4, r5, lr}
   13b72:	4608      	mov	r0, r1
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   13b74:	4d04      	ldr	r5, [pc, #16]	; (13b88 <sys_clock_timeout_handler+0x18>)
   13b76:	682c      	ldr	r4, [r5, #0]
   13b78:	4621      	mov	r1, r4
   13b7a:	f00b feb1 	bl	1f8e0 <counter_sub>
	last_count += dticks * CYC_PER_TICK;
   13b7e:	4404      	add	r4, r0
   13b80:	602c      	str	r4, [r5, #0]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   13b82:	f008 fac3 	bl	1c10c <sys_clock_announce>
}
   13b86:	bd38      	pop	{r3, r4, r5, pc}
   13b88:	20015b98 	.word	0x20015b98

00013b8c <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   13b8c:	b508      	push	{r3, lr}
    p_reg->PRESCALER = val;
   13b8e:	2300      	movs	r3, #0
   13b90:	4a12      	ldr	r2, [pc, #72]	; (13bdc <sys_clock_driver_init+0x50>)
   13b92:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   13b96:	2b00      	cmp	r3, #0
   13b98:	dd18      	ble.n	13bcc <sys_clock_driver_init+0x40>
   13b9a:	4b11      	ldr	r3, [pc, #68]	; (13be0 <sys_clock_driver_init+0x54>)
   13b9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   13ba0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   13ba4:	2200      	movs	r2, #0
   13ba6:	2101      	movs	r1, #1
   13ba8:	2015      	movs	r0, #21
   13baa:	f000 f903 	bl	13db4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   13bae:	2015      	movs	r0, #21
   13bb0:	f000 f8e2 	bl	13d78 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   13bb4:	2301      	movs	r3, #1
   13bb6:	4a0b      	ldr	r2, [pc, #44]	; (13be4 <sys_clock_driver_init+0x58>)
   13bb8:	6013      	str	r3, [r2, #0]
   13bba:	3a08      	subs	r2, #8
   13bbc:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   13bbe:	4a0a      	ldr	r2, [pc, #40]	; (13be8 <sys_clock_driver_init+0x5c>)
   13bc0:	6013      	str	r3, [r2, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   13bc2:	2002      	movs	r0, #2
   13bc4:	f7ff ff36 	bl	13a34 <z_nrf_clock_control_lf_on>

	return 0;
}
   13bc8:	2000      	movs	r0, #0
   13bca:	bd08      	pop	{r3, pc}
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   13bcc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   13bd0:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   13bd2:	4902      	ldr	r1, [pc, #8]	; (13bdc <sys_clock_driver_init+0x50>)
   13bd4:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   13bd8:	3301      	adds	r3, #1
   13bda:	e7dc      	b.n	13b96 <sys_clock_driver_init+0xa>
   13bdc:	40015000 	.word	0x40015000
   13be0:	e000e100 	.word	0xe000e100
   13be4:	40015008 	.word	0x40015008
   13be8:	20015b94 	.word	0x20015b94

00013bec <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
   13bec:	b538      	push	{r3, r4, r5, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13bee:	f1b0 3fff 	cmp.w	r0, #4294967295
   13bf2:	d007      	beq.n	13c04 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   13bf4:	1e44      	subs	r4, r0, #1
   13bf6:	2c00      	cmp	r4, #0
   13bf8:	dd07      	ble.n	13c0a <sys_clock_set_timeout+0x1e>
   13bfa:	4b10      	ldr	r3, [pc, #64]	; (13c3c <sys_clock_set_timeout+0x50>)
   13bfc:	429c      	cmp	r4, r3
   13bfe:	dd05      	ble.n	13c0c <sys_clock_set_timeout+0x20>
   13c00:	4c0f      	ldr	r4, [pc, #60]	; (13c40 <sys_clock_set_timeout+0x54>)
   13c02:	e003      	b.n	13c0c <sys_clock_set_timeout+0x20>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13c04:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
   13c08:	e7f4      	b.n	13bf4 <sys_clock_set_timeout+0x8>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   13c0a:	2400      	movs	r4, #0

	uint32_t unannounced = counter_sub(counter(), last_count);
   13c0c:	f7ff ff5e 	bl	13acc <counter>
   13c10:	4b0c      	ldr	r3, [pc, #48]	; (13c44 <sys_clock_set_timeout+0x58>)
   13c12:	681d      	ldr	r5, [r3, #0]
   13c14:	4629      	mov	r1, r5
   13c16:	f00b fe63 	bl	1f8e0 <counter_sub>
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   13c1a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13c1e:	d300      	bcc.n	13c22 <sys_clock_set_timeout+0x36>
		ticks = 0;
   13c20:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   13c22:	1821      	adds	r1, r4, r0
   13c24:	3101      	adds	r1, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
   13c26:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   13c2a:	d300      	bcc.n	13c2e <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   13c2c:	4904      	ldr	r1, [pc, #16]	; (13c40 <sys_clock_set_timeout+0x54>)
	}

	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
   13c2e:	2300      	movs	r3, #0
   13c30:	4a05      	ldr	r2, [pc, #20]	; (13c48 <sys_clock_set_timeout+0x5c>)
   13c32:	4429      	add	r1, r5
   13c34:	4618      	mov	r0, r3
   13c36:	f7ff ff8f 	bl	13b58 <compare_set>
}
   13c3a:	bd38      	pop	{r3, r4, r5, pc}
   13c3c:	007ffffe 	.word	0x007ffffe
   13c40:	007fffff 	.word	0x007fffff
   13c44:	20015b98 	.word	0x20015b98
   13c48:	00013b71 	.word	0x00013b71

00013c4c <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
   13c4c:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   13c4e:	f7ff ff3d 	bl	13acc <counter>
   13c52:	4b02      	ldr	r3, [pc, #8]	; (13c5c <sys_clock_elapsed+0x10>)
   13c54:	6819      	ldr	r1, [r3, #0]
   13c56:	f00b fe43 	bl	1f8e0 <counter_sub>
}
   13c5a:	bd08      	pop	{r3, pc}
   13c5c:	20015b98 	.word	0x20015b98

00013c60 <before_nse>:
#include <arch/arm/aarch32/cortex_m/fpu.h>

static struct fpu_ctx_full context_buffer;

void before_nse(void)
{
   13c60:	b508      	push	{r3, lr}
	k_sched_lock();
   13c62:	f007 fdb7 	bl	1b7d4 <k_sched_lock>
	z_arm_save_fp_context(&context_buffer);
   13c66:	4802      	ldr	r0, [pc, #8]	; (13c70 <before_nse+0x10>)
   13c68:	f00b feeb 	bl	1fa42 <z_arm_save_fp_context>
}
   13c6c:	bd08      	pop	{r3, pc}
   13c6e:	bf00      	nop
   13c70:	20015b9c 	.word	0x20015b9c

00013c74 <after_nse>:

void after_nse(void)
{
   13c74:	b508      	push	{r3, lr}
	k_sched_unlock();
   13c76:	f007 fe5d 	bl	1b934 <k_sched_unlock>
	z_arm_restore_fp_context(&context_buffer);
   13c7a:	4802      	ldr	r0, [pc, #8]	; (13c84 <after_nse+0x10>)
   13c7c:	f00b fef8 	bl	1fa70 <z_arm_restore_fp_context>
}
   13c80:	bd08      	pop	{r3, pc}
   13c82:	bf00      	nop
   13c84:	20015b9c 	.word	0x20015b9c

00013c88 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   13c88:	4a0a      	ldr	r2, [pc, #40]	; (13cb4 <arch_swap+0x2c>)
   13c8a:	6893      	ldr	r3, [r2, #8]
   13c8c:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   13c90:	4909      	ldr	r1, [pc, #36]	; (13cb8 <arch_swap+0x30>)
   13c92:	6809      	ldr	r1, [r1, #0]
   13c94:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13c98:	4908      	ldr	r1, [pc, #32]	; (13cbc <arch_swap+0x34>)
   13c9a:	684b      	ldr	r3, [r1, #4]
   13c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13ca0:	604b      	str	r3, [r1, #4]
   13ca2:	2300      	movs	r3, #0
   13ca4:	f383 8811 	msr	BASEPRI, r3
   13ca8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13cac:	6893      	ldr	r3, [r2, #8]
}
   13cae:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   13cb2:	4770      	bx	lr
   13cb4:	20016c18 	.word	0x20016c18
   13cb8:	00024aec 	.word	0x00024aec
   13cbc:	e000ed00 	.word	0xe000ed00

00013cc0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   13cc0:	4923      	ldr	r1, [pc, #140]	; (13d50 <in_fp_endif+0x2e>)
    ldr r2, [r1, #_kernel_offset_to_current]
   13cc2:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   13cc4:	f882 e0f5 	strb.w	lr, [r2, #245]	; 0xf5
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13cc8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13ccc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13cce:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   13cd2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #0x10    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   13cd6:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
   13cda:	d103      	bne.n	13ce4 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
   13cdc:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
    vstmia r0, {s16-s31}
   13ce0:	ec80 8a10 	vstmia	r0, {s16-s31}

00013ce4 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13ce4:	2020      	movs	r0, #32
    msr BASEPRI, r0
   13ce6:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13cea:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13cee:	4f19      	ldr	r7, [pc, #100]	; (13d54 <in_fp_endif+0x32>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   13cf0:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   13cf4:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   13cf6:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13cf8:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   13cfa:	f992 e0f5 	ldrsb.w	lr, [r2, #245]	; 0xf5

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13cfe:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   13d02:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13d04:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   13d08:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   13d0c:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
   13d10:	d003      	beq.n	13d1a <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   13d12:	2300      	movs	r3, #0
    vmsr fpscr, r3
   13d14:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
   13d18:	e003      	b.n	13d22 <in_fp_endif>

00013d1a <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
   13d1a:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
    vldmia r0, {s16-s31}
   13d1e:	ec90 8a10 	vldmia	r0, {s16-s31}

00013d22 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   13d22:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   13d26:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   13d2a:	f383 8814 	msr	CONTROL, r3
    isb
   13d2e:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   13d32:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   13d36:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   13d3a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   13d3e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   13d42:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   13d44:	f00b fe40 	bl	1f9c8 <configure_builtin_stack_guard>
    pop {r2, lr}
   13d48:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   13d4c:	4770      	bx	lr
   13d4e:	0000      	.short	0x0000
    ldr r1, =_kernel
   13d50:	20016c18 	.word	0x20016c18
    ldr v4, =_SCS_ICSR
   13d54:	e000ed04 	.word	0xe000ed04

00013d58 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   13d58:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   13d5c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   13d5e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   13d62:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   13d66:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   13d68:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   13d6c:	2902      	cmp	r1, #2
    beq _oops
   13d6e:	d0ff      	beq.n	13d70 <_oops>

00013d70 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   13d70:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   13d72:	f00b fe32 	bl	1f9da <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   13d76:	bd01      	pop	{r0, pc}

00013d78 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   13d78:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   13d7a:	2b00      	cmp	r3, #0
   13d7c:	db08      	blt.n	13d90 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13d7e:	f000 001f 	and.w	r0, r0, #31
   13d82:	095b      	lsrs	r3, r3, #5
   13d84:	2201      	movs	r2, #1
   13d86:	fa02 f000 	lsl.w	r0, r2, r0
   13d8a:	4a02      	ldr	r2, [pc, #8]	; (13d94 <arch_irq_enable+0x1c>)
   13d8c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   13d90:	4770      	bx	lr
   13d92:	bf00      	nop
   13d94:	e000e100 	.word	0xe000e100

00013d98 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   13d98:	0942      	lsrs	r2, r0, #5
   13d9a:	4b05      	ldr	r3, [pc, #20]	; (13db0 <arch_irq_is_enabled+0x18>)
   13d9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13da0:	f000 001f 	and.w	r0, r0, #31
   13da4:	2301      	movs	r3, #1
   13da6:	fa03 f000 	lsl.w	r0, r3, r0
}
   13daa:	4010      	ands	r0, r2
   13dac:	4770      	bx	lr
   13dae:	bf00      	nop
   13db0:	e000e100 	.word	0xe000e100

00013db4 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   13db4:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   13db6:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   13db8:	2b00      	cmp	r3, #0
   13dba:	db08      	blt.n	13dce <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13dbc:	0149      	lsls	r1, r1, #5
   13dbe:	b2c9      	uxtb	r1, r1
   13dc0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   13dc4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   13dc8:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   13dcc:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13dce:	f000 000f 	and.w	r0, r0, #15
   13dd2:	0149      	lsls	r1, r1, #5
   13dd4:	b2c9      	uxtb	r1, r1
   13dd6:	4b01      	ldr	r3, [pc, #4]	; (13ddc <z_arm_irq_priority_set+0x28>)
   13dd8:	5419      	strb	r1, [r3, r0]
}
   13dda:	4770      	bx	lr
   13ddc:	e000ed14 	.word	0xe000ed14

00013de0 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   13de0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   13de2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   13de4:	4b04      	ldr	r3, [pc, #16]	; (13df8 <_arch_isr_direct_pm+0x18>)
   13de6:	6a18      	ldr	r0, [r3, #32]
   13de8:	b908      	cbnz	r0, 13dee <_arch_isr_direct_pm+0xe>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   13dea:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   13dec:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   13dee:	2200      	movs	r2, #0
   13df0:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
   13df2:	f00e fd81 	bl	228f8 <z_pm_save_idle_exit>
   13df6:	e7f8      	b.n	13dea <_arch_isr_direct_pm+0xa>
   13df8:	20016c18 	.word	0x20016c18

00013dfc <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   13dfc:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   13dfe:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   13e02:	4910      	ldr	r1, [pc, #64]	; (13e44 <arch_new_thread+0x48>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   13e04:	f021 0101 	bic.w	r1, r1, #1
   13e08:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   13e0c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   13e10:	9b01      	ldr	r3, [sp, #4]
   13e12:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   13e16:	9b02      	ldr	r3, [sp, #8]
   13e18:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   13e1c:	9b03      	ldr	r3, [sp, #12]
   13e1e:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   13e22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   13e26:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
   13e2a:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   13e2c:	2300      	movs	r3, #0
   13e2e:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   13e32:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
   13e36:	23bc      	movs	r3, #188	; 0xbc
   13e38:	f880 30f5 	strb.w	r3, [r0, #245]	; 0xf5
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   13e3c:	f85d 4b04 	ldr.w	r4, [sp], #4
   13e40:	4770      	bx	lr
   13e42:	bf00      	nop
   13e44:	0001e241 	.word	0x0001e241

00013e48 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   13e48:	b508      	push	{r3, lr}
   13e4a:	4604      	mov	r4, r0
   13e4c:	460e      	mov	r6, r1
   13e4e:	4615      	mov	r5, r2
	z_arm_prepare_switch_to_main();
   13e50:	f00b fdae 	bl	1f9b0 <z_arm_prepare_switch_to_main>

	_current = main_thread;
   13e54:	4b09      	ldr	r3, [pc, #36]	; (13e7c <arch_switch_to_main_thread+0x34>)
   13e56:	609c      	str	r4, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
   13e58:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   13e5c:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   13e60:	4628      	mov	r0, r5
   13e62:	f386 8809 	msr	PSP, r6
   13e66:	2100      	movs	r1, #0
   13e68:	b663      	cpsie	if
   13e6a:	f381 8811 	msr	BASEPRI, r1
   13e6e:	f3bf 8f6f 	isb	sy
   13e72:	2200      	movs	r2, #0
   13e74:	2300      	movs	r3, #0
   13e76:	f00a f9e3 	bl	1e240 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   13e7a:	bf00      	nop
   13e7c:	20016c18 	.word	0x20016c18

00013e80 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   13e80:	4901      	ldr	r1, [pc, #4]	; (13e88 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   13e82:	2210      	movs	r2, #16
	str	r2, [r1]
   13e84:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   13e86:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13e88:	e000ed10 	.word	0xe000ed10

00013e8c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   13e8c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   13e8e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   13e90:	f380 8811 	msr	BASEPRI, r0
	isb
   13e94:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   13e98:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   13e9c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   13e9e:	b662      	cpsie	i
	isb
   13ea0:	f3bf 8f6f 	isb	sy

	bx	lr
   13ea4:	4770      	bx	lr
   13ea6:	bf00      	nop

00013ea8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   13ea8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   13eaa:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   13eac:	f381 8811 	msr	BASEPRI, r1

	wfe
   13eb0:	bf20      	wfe

	msr	BASEPRI, r0
   13eb2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   13eb6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   13eb8:	4770      	bx	lr
   13eba:	bf00      	nop

00013ebc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   13ebc:	bf30      	wfi
    b z_SysNmiOnReset
   13ebe:	f7ff bffd 	b.w	13ebc <z_SysNmiOnReset>
   13ec2:	bf00      	nop

00013ec4 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   13ec4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13ec6:	4b14      	ldr	r3, [pc, #80]	; (13f18 <z_arm_prep_c+0x54>)
   13ec8:	4a14      	ldr	r2, [pc, #80]	; (13f1c <z_arm_prep_c+0x58>)
   13eca:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   13ece:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   13ed0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13ed4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   13ed8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13edc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   13ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   13ee4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13ee8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   13eec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   13ef0:	f503 730c 	add.w	r3, r3, #560	; 0x230
   13ef4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   13ef8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   13efa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13efe:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   13f02:	2300      	movs	r3, #0
   13f04:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13f08:	f007 f88a 	bl	1b020 <z_bss_zero>
	z_data_copy();
   13f0c:	f007 fff2 	bl	1bef4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13f10:	f000 f956 	bl	141c0 <z_arm_interrupt_init>
	z_cstart();
   13f14:	f007 f8aa 	bl	1b06c <z_cstart>
   13f18:	e000ed00 	.word	0xe000ed00
   13f1c:	00010000 	.word	0x00010000

00013f20 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   13f20:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   13f22:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   13f24:	4a0b      	ldr	r2, [pc, #44]	; (13f54 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   13f26:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   13f28:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   13f2a:	bf1e      	ittt	ne
	movne	r1, #0
   13f2c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   13f2e:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   13f30:	f00e fce2 	blne	228f8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   13f34:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   13f36:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   13f3a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   13f3e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   13f42:	4905      	ldr	r1, [pc, #20]	; (13f58 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   13f44:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   13f46:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   13f48:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   13f4a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   13f4e:	4903      	ldr	r1, [pc, #12]	; (13f5c <_isr_wrapper+0x3c>)
	bx r1
   13f50:	4708      	bx	r1
   13f52:	0000      	.short	0x0000
	ldr r2, =_kernel
   13f54:	20016c18 	.word	0x20016c18
	ldr r1, =_sw_isr_table
   13f58:	00023ec0 	.word	0x00023ec0
	ldr r1, =z_arm_int_exit
   13f5c:	000141a5 	.word	0x000141a5

00013f60 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   13f60:	f00f ff10 	bl	23d84 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   13f64:	2020      	movs	r0, #32
    msr BASEPRI, r0
   13f66:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   13f6a:	4808      	ldr	r0, [pc, #32]	; (13f8c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   13f6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   13f70:	1840      	adds	r0, r0, r1
    msr PSP, r0
   13f72:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   13f76:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   13f7a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   13f7c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   13f7e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   13f82:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   13f86:	f7ff ff9d 	bl	13ec4 <z_arm_prep_c>
   13f8a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   13f8c:	20018560 	.word	0x20018560

00013f90 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   13f90:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   13f94:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   13f98:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   13f9a:	4672      	mov	r2, lr
	bl z_arm_fault
   13f9c:	f000 f8a2 	bl	140e4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   13fa0:	bd01      	pop	{r0, pc}
   13fa2:	bf00      	nop

00013fa4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   13fa4:	b510      	push	{r4, lr}
   13fa6:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13fa8:	4b13      	ldr	r3, [pc, #76]	; (13ff8 <mem_manage_fault+0x54>)
   13faa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   13fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13fb0:	f013 0f02 	tst.w	r3, #2
   13fb4:	d00b      	beq.n	13fce <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   13fb6:	4b10      	ldr	r3, [pc, #64]	; (13ff8 <mem_manage_fault+0x54>)
   13fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   13fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13fbc:	f013 0f80 	tst.w	r3, #128	; 0x80
   13fc0:	d005      	beq.n	13fce <mem_manage_fault+0x2a>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
   13fc2:	b121      	cbz	r1, 13fce <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13fc4:	4a0c      	ldr	r2, [pc, #48]	; (13ff8 <mem_manage_fault+0x54>)
   13fc6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13fcc:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   13fce:	4b0a      	ldr	r3, [pc, #40]	; (13ff8 <mem_manage_fault+0x54>)
   13fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   13fd6:	f013 0f10 	tst.w	r3, #16
   13fda:	d101      	bne.n	13fe0 <mem_manage_fault+0x3c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   13fdc:	4b06      	ldr	r3, [pc, #24]	; (13ff8 <mem_manage_fault+0x54>)
   13fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13fe0:	4a05      	ldr	r2, [pc, #20]	; (13ff8 <mem_manage_fault+0x54>)
   13fe2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13fe4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   13fe8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   13fea:	2101      	movs	r1, #1
   13fec:	f00b fd01 	bl	1f9f2 <memory_fault_recoverable>
   13ff0:	7020      	strb	r0, [r4, #0]

	return reason;
}
   13ff2:	2000      	movs	r0, #0
   13ff4:	bd10      	pop	{r4, pc}
   13ff6:	bf00      	nop
   13ff8:	e000ed00 	.word	0xe000ed00

00013ffc <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
   13ffc:	b510      	push	{r4, lr}
   13ffe:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14000:	4b12      	ldr	r3, [pc, #72]	; (1404c <bus_fault+0x50>)
   14002:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   14004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   14006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14008:	f413 7f00 	tst.w	r3, #512	; 0x200
   1400c:	d00b      	beq.n	14026 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   1400e:	4b0f      	ldr	r3, [pc, #60]	; (1404c <bus_fault+0x50>)
   14010:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   14012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14014:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   14018:	d005      	beq.n	14026 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
   1401a:	b121      	cbz	r1, 14026 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1401c:	4a0b      	ldr	r2, [pc, #44]	; (1404c <bus_fault+0x50>)
   1401e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14020:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   14024:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   14026:	4b09      	ldr	r3, [pc, #36]	; (1404c <bus_fault+0x50>)
   14028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1402c:	f413 7f80 	tst.w	r3, #256	; 0x100
   14030:	d101      	bne.n	14036 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   14032:	4b06      	ldr	r3, [pc, #24]	; (1404c <bus_fault+0x50>)
   14034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14036:	4a05      	ldr	r2, [pc, #20]	; (1404c <bus_fault+0x50>)
   14038:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1403a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1403e:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   14040:	2101      	movs	r1, #1
   14042:	f00b fcd6 	bl	1f9f2 <memory_fault_recoverable>
   14046:	7020      	strb	r0, [r4, #0]

	return reason;
}
   14048:	2000      	movs	r0, #0
   1404a:	bd10      	pop	{r4, pc}
   1404c:	e000ed00 	.word	0xe000ed00

00014050 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14050:	4b0a      	ldr	r3, [pc, #40]	; (1407c <usage_fault+0x2c>)
   14052:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   14054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   14056:	6a98      	ldr	r0, [r3, #40]	; 0x28
   14058:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
   1405c:	d10b      	bne.n	14076 <usage_fault+0x26>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1405e:	4b07      	ldr	r3, [pc, #28]	; (1407c <usage_fault+0x2c>)
   14060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   14062:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   14064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   14066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   14068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1406a:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   1406e:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   14072:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
   14074:	4770      	bx	lr
		reason = K_ERR_STACK_CHK_FAIL;
   14076:	2002      	movs	r0, #2
   14078:	e7f1      	b.n	1405e <usage_fault+0xe>
   1407a:	bf00      	nop
   1407c:	e000ed00 	.word	0xe000ed00

00014080 <hard_fault>:
	}
#undef _SVC_OPCODE

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   14080:	2300      	movs	r3, #0
   14082:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   14084:	4b14      	ldr	r3, [pc, #80]	; (140d8 <hard_fault+0x58>)
   14086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   14088:	f012 0202 	ands.w	r2, r2, #2
   1408c:	d121      	bne.n	140d2 <hard_fault+0x52>
{
   1408e:	b510      	push	{r4, lr}
   14090:	4604      	mov	r4, r0
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   14092:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   14094:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   14098:	d010      	beq.n	140bc <hard_fault+0x3c>
		PR_EXC("  Fault escalation (see below)");
		if (SCB_MMFSR != 0) {
   1409a:	3328      	adds	r3, #40	; 0x28
   1409c:	781b      	ldrb	r3, [r3, #0]
   1409e:	b943      	cbnz	r3, 140b2 <hard_fault+0x32>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
   140a0:	4b0e      	ldr	r3, [pc, #56]	; (140dc <hard_fault+0x5c>)
   140a2:	781b      	ldrb	r3, [r3, #0]
   140a4:	b95b      	cbnz	r3, 140be <hard_fault+0x3e>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
   140a6:	4b0e      	ldr	r3, [pc, #56]	; (140e0 <hard_fault+0x60>)
   140a8:	881b      	ldrh	r3, [r3, #0]
   140aa:	b29b      	uxth	r3, r3
   140ac:	b96b      	cbnz	r3, 140ca <hard_fault+0x4a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   140ae:	4610      	mov	r0, r2
	}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
   140b0:	e004      	b.n	140bc <hard_fault+0x3c>
			reason = mem_manage_fault(esf, 1, recoverable);
   140b2:	460a      	mov	r2, r1
   140b4:	2101      	movs	r1, #1
   140b6:	4620      	mov	r0, r4
   140b8:	f7ff ff74 	bl	13fa4 <mem_manage_fault>
}
   140bc:	bd10      	pop	{r4, pc}
			reason = bus_fault(esf, 1, recoverable);
   140be:	460a      	mov	r2, r1
   140c0:	2101      	movs	r1, #1
   140c2:	4620      	mov	r0, r4
   140c4:	f7ff ff9a 	bl	13ffc <bus_fault>
   140c8:	e7f8      	b.n	140bc <hard_fault+0x3c>
			reason = usage_fault(esf);
   140ca:	4620      	mov	r0, r4
   140cc:	f7ff ffc0 	bl	14050 <usage_fault>
   140d0:	e7f4      	b.n	140bc <hard_fault+0x3c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   140d2:	2000      	movs	r0, #0
}
   140d4:	4770      	bx	lr
   140d6:	bf00      	nop
   140d8:	e000ed00 	.word	0xe000ed00
   140dc:	e000ed29 	.word	0xe000ed29
   140e0:	e000ed2a 	.word	0xe000ed2a

000140e4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   140e4:	b570      	push	{r4, r5, r6, lr}
   140e6:	b09c      	sub	sp, #112	; 0x70
   140e8:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   140ea:	4b27      	ldr	r3, [pc, #156]	; (14188 <z_arm_fault+0xa4>)
   140ec:	6859      	ldr	r1, [r3, #4]
   140ee:	f3c1 0108 	ubfx	r1, r1, #0, #9
   140f2:	2300      	movs	r3, #0
   140f4:	f383 8811 	msr	BASEPRI, r3
   140f8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   140fc:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   14100:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   14104:	d115      	bne.n	14132 <z_arm_fault+0x4e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   14106:	f012 0f01 	tst.w	r2, #1
   1410a:	d11f      	bne.n	1414c <z_arm_fault+0x68>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   1410c:	f012 0f40 	tst.w	r2, #64	; 0x40
   14110:	d105      	bne.n	1411e <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   14112:	f012 0f08 	tst.w	r2, #8
   14116:	d10a      	bne.n	1412e <z_arm_fault+0x4a>
			ptr_esf = (z_arch_esf_t *)msp;
   14118:	4604      	mov	r4, r0
			*nested_exc = true;
   1411a:	2601      	movs	r6, #1
   1411c:	e00b      	b.n	14136 <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1411e:	f012 0f04 	tst.w	r2, #4
   14122:	d001      	beq.n	14128 <z_arm_fault+0x44>
	*nested_exc = false;
   14124:	2600      	movs	r6, #0
   14126:	e006      	b.n	14136 <z_arm_fault+0x52>
			ptr_esf = (z_arch_esf_t *)msp;
   14128:	4604      	mov	r4, r0
	*nested_exc = false;
   1412a:	2600      	movs	r6, #0
   1412c:	e003      	b.n	14136 <z_arm_fault+0x52>
   1412e:	2600      	movs	r6, #0
   14130:	e001      	b.n	14136 <z_arm_fault+0x52>
   14132:	2600      	movs	r6, #0
		return NULL;
   14134:	4634      	mov	r4, r6

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   14136:	f10d 026f 	add.w	r2, sp, #111	; 0x6f
   1413a:	4620      	mov	r0, r4
   1413c:	f00b fc5e 	bl	1f9fc <fault_handle>
   14140:	4605      	mov	r5, r0
	if (recoverable) {
   14142:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
   14146:	b123      	cbz	r3, 14152 <z_arm_fault+0x6e>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   14148:	b01c      	add	sp, #112	; 0x70
   1414a:	bd70      	pop	{r4, r5, r6, pc}
	*nested_exc = false;
   1414c:	2600      	movs	r6, #0
		return NULL;
   1414e:	4634      	mov	r4, r6
   14150:	e7f1      	b.n	14136 <z_arm_fault+0x52>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   14152:	2268      	movs	r2, #104	; 0x68
   14154:	4621      	mov	r1, r4
   14156:	a801      	add	r0, sp, #4
   14158:	f00e ff0d 	bl	22f76 <memcpy>
	if (nested_exc) {
   1415c:	b14e      	cbz	r6, 14172 <z_arm_fault+0x8e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1415e:	9b08      	ldr	r3, [sp, #32]
   14160:	f3c3 0208 	ubfx	r2, r3, #0, #9
   14164:	b95a      	cbnz	r2, 1417e <z_arm_fault+0x9a>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   14166:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1416a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1416e:	9308      	str	r3, [sp, #32]
   14170:	e005      	b.n	1417e <z_arm_fault+0x9a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   14172:	9b08      	ldr	r3, [sp, #32]
   14174:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   14178:	f023 0301 	bic.w	r3, r3, #1
   1417c:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   1417e:	a901      	add	r1, sp, #4
   14180:	4628      	mov	r0, r5
   14182:	f00b fc26 	bl	1f9d2 <z_arm_fatal_error>
   14186:	e7df      	b.n	14148 <z_arm_fault+0x64>
   14188:	e000ed00 	.word	0xe000ed00

0001418c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1418c:	4b04      	ldr	r3, [pc, #16]	; (141a0 <z_arm_fault_init+0x14>)
   1418e:	695a      	ldr	r2, [r3, #20]
   14190:	f042 0210 	orr.w	r2, r2, #16
   14194:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   14196:	695a      	ldr	r2, [r3, #20]
   14198:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1419c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1419e:	4770      	bx	lr
   141a0:	e000ed00 	.word	0xe000ed00

000141a4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   141a4:	4b04      	ldr	r3, [pc, #16]	; (141b8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   141a6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   141a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   141aa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   141ac:	d003      	beq.n	141b6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   141ae:	4903      	ldr	r1, [pc, #12]	; (141bc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   141b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   141b4:	600a      	str	r2, [r1, #0]

000141b6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   141b6:	4770      	bx	lr
	ldr r3, =_kernel
   141b8:	20016c18 	.word	0x20016c18
	ldr r1, =_SCS_ICSR
   141bc:	e000ed04 	.word	0xe000ed04

000141c0 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   141c0:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   141c2:	e006      	b.n	141d2 <z_arm_interrupt_init+0x12>
   141c4:	f002 010f 	and.w	r1, r2, #15
   141c8:	4b09      	ldr	r3, [pc, #36]	; (141f0 <z_arm_interrupt_init+0x30>)
   141ca:	440b      	add	r3, r1
   141cc:	2120      	movs	r1, #32
   141ce:	7619      	strb	r1, [r3, #24]
   141d0:	3201      	adds	r2, #1
   141d2:	2a40      	cmp	r2, #64	; 0x40
   141d4:	dc0a      	bgt.n	141ec <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   141d6:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   141d8:	2b00      	cmp	r3, #0
   141da:	dbf3      	blt.n	141c4 <z_arm_interrupt_init+0x4>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   141dc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   141e0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   141e4:	2120      	movs	r1, #32
   141e6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   141ea:	e7f1      	b.n	141d0 <z_arm_interrupt_init+0x10>
	}
}
   141ec:	4770      	bx	lr
   141ee:	bf00      	nop
   141f0:	e000ecfc 	.word	0xe000ecfc

000141f4 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   141f4:	b508      	push	{r3, lr}
	if (_current == thread) {
   141f6:	4b08      	ldr	r3, [pc, #32]	; (14218 <z_impl_k_thread_abort+0x24>)
   141f8:	689b      	ldr	r3, [r3, #8]
   141fa:	4283      	cmp	r3, r0
   141fc:	d002      	beq.n	14204 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
   141fe:	f007 fe3f 	bl	1be80 <z_thread_abort>
}
   14202:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   14204:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   14208:	2b00      	cmp	r3, #0
   1420a:	d0f8      	beq.n	141fe <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1420c:	4a03      	ldr	r2, [pc, #12]	; (1421c <z_impl_k_thread_abort+0x28>)
   1420e:	6853      	ldr	r3, [r2, #4]
   14210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14214:	6053      	str	r3, [r2, #4]
   14216:	e7f2      	b.n	141fe <z_impl_k_thread_abort+0xa>
   14218:	20016c18 	.word	0x20016c18
   1421c:	e000ed00 	.word	0xe000ed00

00014220 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   14220:	b510      	push	{r4, lr}
   14222:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   14224:	4c09      	ldr	r4, [pc, #36]	; (1424c <z_arm_configure_static_mpu_regions+0x2c>)
   14226:	4623      	mov	r3, r4
   14228:	4a09      	ldr	r2, [pc, #36]	; (14250 <z_arm_configure_static_mpu_regions+0x30>)
   1422a:	2101      	movs	r1, #1
   1422c:	4809      	ldr	r0, [pc, #36]	; (14254 <z_arm_configure_static_mpu_regions+0x34>)
   1422e:	f00b fc75 	bl	1fb1c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   14232:	2300      	movs	r3, #0
   14234:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   14236:	4b08      	ldr	r3, [pc, #32]	; (14258 <z_arm_configure_static_mpu_regions+0x38>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   14238:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1423a:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1423c:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1423e:	2101      	movs	r1, #1
   14240:	a801      	add	r0, sp, #4
   14242:	f00b fc6f 	bl	1fb24 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   14246:	b004      	add	sp, #16
   14248:	bd10      	pop	{r4, pc}
   1424a:	bf00      	nop
   1424c:	20040000 	.word	0x20040000
   14250:	20014500 	.word	0x20014500
   14254:	0002467c 	.word	0x0002467c
   14258:	20014900 	.word	0x20014900

0001425c <mpu_init>:

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
   1425c:	4b01      	ldr	r3, [pc, #4]	; (14264 <mpu_init+0x8>)
   1425e:	4a02      	ldr	r2, [pc, #8]	; (14268 <mpu_init+0xc>)
   14260:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
   14262:	4770      	bx	lr
   14264:	e000ed90 	.word	0xe000ed90
   14268:	0044ffaa 	.word	0x0044ffaa

0001426c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   1426c:	b410      	push	{r4}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1426e:	680b      	ldr	r3, [r1, #0]
   14270:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   14274:	7a0c      	ldrb	r4, [r1, #8]
   14276:	f004 031f 	and.w	r3, r4, #31
   1427a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   1427c:	68cb      	ldr	r3, [r1, #12]
   1427e:	f023 031f 	bic.w	r3, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   14282:	0964      	lsrs	r4, r4, #5
   14284:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   14288:	f043 0301 	orr.w	r3, r3, #1
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   1428c:	4903      	ldr	r1, [pc, #12]	; (1429c <region_init+0x30>)
   1428e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   14290:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   14292:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   14294:	f85d 4b04 	ldr.w	r4, [sp], #4
   14298:	4770      	bx	lr
   1429a:	bf00      	nop
   1429c:	e000ed90 	.word	0xe000ed90

000142a0 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   142a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142a4:	b087      	sub	sp, #28
   142a6:	4681      	mov	r9, r0
   142a8:	9100      	str	r1, [sp, #0]
   142aa:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
   142ac:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
   142ae:	2700      	movs	r7, #0
   142b0:	e034      	b.n	1431c <mpu_configure_regions_and_partition+0x7c>
	return -EINVAL;
   142b2:	f06f 0615 	mvn.w	r6, #21
   142b6:	e053      	b.n	14360 <mpu_configure_regions_and_partition+0xc0>
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;

		if ((regions[i].start == u_reg_base) &&
   142b8:	45d8      	cmp	r8, fp
   142ba:	d169      	bne.n	14390 <mpu_configure_regions_and_partition+0xf0>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
   142bc:	4629      	mov	r1, r5
   142be:	b2f0      	uxtb	r0, r6
   142c0:	f00b fc11 	bl	1fae6 <mpu_configure_region>
   142c4:	e029      	b.n	1431a <mpu_configure_regions_and_partition+0x7a>
	MPU->RNR = index;
   142c6:	4b58      	ldr	r3, [pc, #352]	; (14428 <mpu_configure_regions_and_partition+0x188>)
   142c8:	6098      	str	r0, [r3, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   142ca:	68d9      	ldr	r1, [r3, #12]
   142cc:	f001 011f 	and.w	r1, r1, #31
		| (base & MPU_RBAR_BASE_Msk);
   142d0:	f022 021f 	bic.w	r2, r2, #31
   142d4:	430a      	orrs	r2, r1
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   142d6:	60da      	str	r2, [r3, #12]
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
   142d8:	4629      	mov	r1, r5
   142da:	b2e0      	uxtb	r0, r4
   142dc:	f00b fc03 	bl	1fae6 <mpu_configure_region>
   142e0:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
   142e2:	f110 0f16 	cmn.w	r0, #22
   142e6:	f000 8097 	beq.w	14418 <mpu_configure_regions_and_partition+0x178>
				return reg_index;
			}

			reg_index++;
   142ea:	3401      	adds	r4, #1
   142ec:	e015      	b.n	1431a <mpu_configure_regions_and_partition+0x7a>
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
   142ee:	3b01      	subs	r3, #1
	MPU->RNR = index;
   142f0:	4a4d      	ldr	r2, [pc, #308]	; (14428 <mpu_configure_regions_and_partition+0x188>)
   142f2:	6090      	str	r0, [r2, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   142f4:	6911      	ldr	r1, [r2, #16]
   142f6:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   142fa:	f023 031f 	bic.w	r3, r3, #31
   142fe:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   14300:	6113      	str	r3, [r2, #16]

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
   14302:	4629      	mov	r1, r5
   14304:	b2e0      	uxtb	r0, r4
   14306:	f00b fbee 	bl	1fae6 <mpu_configure_region>
   1430a:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
   1430c:	f110 0f16 	cmn.w	r0, #22
   14310:	f000 8082 	beq.w	14418 <mpu_configure_regions_and_partition+0x178>
				return reg_index;
			}

			reg_index++;
   14314:	3401      	adds	r4, #1
   14316:	e000      	b.n	1431a <mpu_configure_regions_and_partition+0x7a>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
   14318:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
   1431a:	3701      	adds	r7, #1
   1431c:	9b00      	ldr	r3, [sp, #0]
   1431e:	429f      	cmp	r7, r3
   14320:	da7a      	bge.n	14418 <mpu_configure_regions_and_partition+0x178>
		if (regions[i].size == 0U) {
   14322:	eb07 0547 	add.w	r5, r7, r7, lsl #1
   14326:	ea4f 0a85 	mov.w	sl, r5, lsl #2
   1432a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   1432e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   14332:	f1b8 0f00 	cmp.w	r8, #0
   14336:	d0f0      	beq.n	1431a <mpu_configure_regions_and_partition+0x7a>
		if (do_sanity_check &&
   14338:	9b01      	ldr	r3, [sp, #4]
   1433a:	b123      	cbz	r3, 14346 <mpu_configure_regions_and_partition+0xa6>
			(!mpu_partition_is_valid(&regions[i]))) {
   1433c:	4628      	mov	r0, r5
   1433e:	f00b fbb5 	bl	1faac <mpu_partition_is_valid>
		if (do_sanity_check &&
   14342:	2800      	cmp	r0, #0
   14344:	d064      	beq.n	14410 <mpu_configure_regions_and_partition+0x170>
			get_region_index(regions[i].start, regions[i].size);
   14346:	f859 b00a 	ldr.w	fp, [r9, sl]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1434a:	4658      	mov	r0, fp
   1434c:	f00b fba4 	bl	1fa98 <arm_cmse_mpu_region_get>
   14350:	4606      	mov	r6, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   14352:	eb08 000b 	add.w	r0, r8, fp
   14356:	3801      	subs	r0, #1
   14358:	f00b fb9e 	bl	1fa98 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1435c:	4286      	cmp	r6, r0
   1435e:	d1a8      	bne.n	142b2 <mpu_configure_regions_and_partition+0x12>
		if ((u_reg_index == -EINVAL) ||
   14360:	f116 0f16 	cmn.w	r6, #22
   14364:	d057      	beq.n	14416 <mpu_configure_regions_and_partition+0x176>
			(u_reg_index > (reg_index - 1))) {
   14366:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   14368:	42b3      	cmp	r3, r6
   1436a:	db59      	blt.n	14420 <mpu_configure_regions_and_partition+0x180>
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
   1436c:	4630      	mov	r0, r6
	MPU->RNR = index;
   1436e:	4b2e      	ldr	r3, [pc, #184]	; (14428 <mpu_configure_regions_and_partition+0x188>)
   14370:	609e      	str	r6, [r3, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   14372:	68d9      	ldr	r1, [r3, #12]
   14374:	f021 011f 	bic.w	r1, r1, #31
	MPU->RNR = index;
   14378:	609e      	str	r6, [r3, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1437a:	691b      	ldr	r3, [r3, #16]
   1437c:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   14380:	f859 300a 	ldr.w	r3, [r9, sl]
   14384:	686a      	ldr	r2, [r5, #4]
   14386:	441a      	add	r2, r3
   14388:	f102 3bff 	add.w	fp, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   1438c:	4299      	cmp	r1, r3
   1438e:	d093      	beq.n	142b8 <mpu_configure_regions_and_partition+0x18>
		} else if (regions[i].start == u_reg_base) {
   14390:	4299      	cmp	r1, r3
   14392:	d098      	beq.n	142c6 <mpu_configure_regions_and_partition+0x26>
		} else if (reg_last == u_reg_last) {
   14394:	45d8      	cmp	r8, fp
   14396:	d0aa      	beq.n	142ee <mpu_configure_regions_and_partition+0x4e>
				regions[i].start - 1);
   14398:	3b01      	subs	r3, #1
	MPU->RNR = index;
   1439a:	4923      	ldr	r1, [pc, #140]	; (14428 <mpu_configure_regions_and_partition+0x188>)
   1439c:	4606      	mov	r6, r0
   1439e:	6088      	str	r0, [r1, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   143a0:	690a      	ldr	r2, [r1, #16]
   143a2:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   143a6:	f023 031f 	bic.w	r3, r3, #31
   143aa:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   143ac:	610b      	str	r3, [r1, #16]
				mpu_configure_region(reg_index, &regions[i]);
   143ae:	4629      	mov	r1, r5
   143b0:	b2e0      	uxtb	r0, r4
   143b2:	f00b fb98 	bl	1fae6 <mpu_configure_region>
   143b6:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   143b8:	f110 0f16 	cmn.w	r0, #22
   143bc:	d02c      	beq.n	14418 <mpu_configure_regions_and_partition+0x178>
			reg_index++;
   143be:	3001      	adds	r0, #1
	MPU->RNR = index;
   143c0:	4b19      	ldr	r3, [pc, #100]	; (14428 <mpu_configure_regions_and_partition+0x188>)
   143c2:	609e      	str	r6, [r3, #8]
	attr->rbar = MPU->RBAR &
   143c4:	68d9      	ldr	r1, [r3, #12]
   143c6:	f89d 2010 	ldrb.w	r2, [sp, #16]
   143ca:	f361 0204 	bfi	r2, r1, #0, #5
   143ce:	f88d 2010 	strb.w	r2, [sp, #16]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   143d2:	691b      	ldr	r3, [r3, #16]
   143d4:	f3c3 0342 	ubfx	r3, r3, #1, #3
   143d8:	b2d2      	uxtb	r2, r2
   143da:	f363 1247 	bfi	r2, r3, #5, #3
   143de:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i].start +
   143e2:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
   143e6:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
   143e8:	4413      	add	r3, r2
   143ea:	9302      	str	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   143ec:	f023 031f 	bic.w	r3, r3, #31
   143f0:	eba8 080b 	sub.w	r8, r8, fp
   143f4:	4443      	add	r3, r8
   143f6:	3b01      	subs	r3, #1
   143f8:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
   143fc:	9305      	str	r3, [sp, #20]
				region_allocate_and_init(reg_index,
   143fe:	a902      	add	r1, sp, #8
   14400:	b2c0      	uxtb	r0, r0
   14402:	f00b fb65 	bl	1fad0 <region_allocate_and_init>
   14406:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   14408:	f110 0f16 	cmn.w	r0, #22
   1440c:	d184      	bne.n	14318 <mpu_configure_regions_and_partition+0x78>
   1440e:	e003      	b.n	14418 <mpu_configure_regions_and_partition+0x178>
			return -EINVAL;
   14410:	f06f 0415 	mvn.w	r4, #21
   14414:	e000      	b.n	14418 <mpu_configure_regions_and_partition+0x178>
			return -EINVAL;
   14416:	4634      	mov	r4, r6
		}
	}

	return reg_index;
}
   14418:	4620      	mov	r0, r4
   1441a:	b007      	add	sp, #28
   1441c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   14420:	f06f 0415 	mvn.w	r4, #21
   14424:	e7f8      	b.n	14418 <mpu_configure_regions_and_partition+0x178>
   14426:	bf00      	nop
   14428:	e000ed90 	.word	0xe000ed90

0001442c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   1442c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   1442e:	4c03      	ldr	r4, [pc, #12]	; (1443c <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   14430:	2301      	movs	r3, #1
   14432:	7822      	ldrb	r2, [r4, #0]
   14434:	f7ff ff34 	bl	142a0 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   14438:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   1443a:	bd10      	pop	{r4, pc}
   1443c:	20016c7d 	.word	0x20016c7d

00014440 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
   14440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14444:	4607      	mov	r7, r0
   14446:	4688      	mov	r8, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   14448:	2400      	movs	r4, #0
   1444a:	e003      	b.n	14454 <mpu_mark_areas_for_dynamic_regions+0x14>
	return -EINVAL;
   1444c:	f06f 0515 	mvn.w	r5, #21
   14450:	e017      	b.n	14482 <mpu_mark_areas_for_dynamic_regions+0x42>
	for (int i = 0; i < dyn_region_areas_num; i++) {
   14452:	3401      	adds	r4, #1
   14454:	45a0      	cmp	r8, r4
   14456:	dd3c      	ble.n	144d2 <mpu_mark_areas_for_dynamic_regions+0x92>
		if (dyn_region_areas[i].size == 0U) {
   14458:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1445c:	009a      	lsls	r2, r3, #2
   1445e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   14462:	685e      	ldr	r6, [r3, #4]
   14464:	2e00      	cmp	r6, #0
   14466:	d0f4      	beq.n	14452 <mpu_mark_areas_for_dynamic_regions+0x12>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   14468:	f857 9002 	ldr.w	r9, [r7, r2]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1446c:	4648      	mov	r0, r9
   1446e:	f00b fb13 	bl	1fa98 <arm_cmse_mpu_region_get>
   14472:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   14474:	eb06 0009 	add.w	r0, r6, r9
   14478:	3801      	subs	r0, #1
   1447a:	f00b fb0d 	bl	1fa98 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   1447e:	4285      	cmp	r5, r0
   14480:	d1e4      	bne.n	1444c <mpu_mark_areas_for_dynamic_regions+0xc>
		dyn_reg_info[i].index =
   14482:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   14486:	4a16      	ldr	r2, [pc, #88]	; (144e0 <mpu_mark_areas_for_dynamic_regions+0xa0>)
   14488:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   1448c:	f115 0f16 	cmn.w	r5, #22
   14490:	d020      	beq.n	144d4 <mpu_mark_areas_for_dynamic_regions+0x94>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   14492:	4b14      	ldr	r3, [pc, #80]	; (144e4 <mpu_mark_areas_for_dynamic_regions+0xa4>)
   14494:	781b      	ldrb	r3, [r3, #0]
   14496:	42ab      	cmp	r3, r5
   14498:	dd1f      	ble.n	144da <mpu_mark_areas_for_dynamic_regions+0x9a>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
   1449a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1449e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	MPU->RNR = index;
   144a2:	4a11      	ldr	r2, [pc, #68]	; (144e8 <mpu_mark_areas_for_dynamic_regions+0xa8>)
   144a4:	6095      	str	r5, [r2, #8]
	MPU->RNR = index;
   144a6:	6095      	str	r5, [r2, #8]
	attr->rbar = MPU->RBAR &
   144a8:	68d5      	ldr	r5, [r2, #12]
   144aa:	7b18      	ldrb	r0, [r3, #12]
   144ac:	f365 0004 	bfi	r0, r5, #0, #5
   144b0:	7318      	strb	r0, [r3, #12]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   144b2:	6910      	ldr	r0, [r2, #16]
   144b4:	f3c0 0042 	ubfx	r0, r0, #1, #3
   144b8:	7b1d      	ldrb	r5, [r3, #12]
   144ba:	f360 1547 	bfi	r5, r0, #5, #3
   144be:	731d      	strb	r5, [r3, #12]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   144c0:	68d1      	ldr	r1, [r2, #12]
   144c2:	f021 011f 	bic.w	r1, r1, #31
   144c6:	6059      	str	r1, [r3, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   144c8:	6912      	ldr	r2, [r2, #16]
   144ca:	f022 021f 	bic.w	r2, r2, #31
   144ce:	611a      	str	r2, [r3, #16]
}
   144d0:	e7bf      	b.n	14452 <mpu_mark_areas_for_dynamic_regions+0x12>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
   144d2:	2500      	movs	r5, #0
}
   144d4:	4628      	mov	r0, r5
   144d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   144da:	f06f 0515 	mvn.w	r5, #21
   144de:	e7f9      	b.n	144d4 <mpu_mark_areas_for_dynamic_regions+0x94>
   144e0:	20015c24 	.word	0x20015c24
   144e4:	20016c7d 	.word	0x20016c7d
   144e8:	e000ed90 	.word	0xe000ed90

000144ec <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   144ec:	4b03      	ldr	r3, [pc, #12]	; (144fc <arm_core_mpu_enable+0x10>)
   144ee:	2205      	movs	r2, #5
   144f0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   144f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   144f6:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   144fa:	4770      	bx	lr
   144fc:	e000ed90 	.word	0xe000ed90

00014500 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   14500:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   14504:	4b01      	ldr	r3, [pc, #4]	; (1450c <arm_core_mpu_disable+0xc>)
   14506:	2200      	movs	r2, #0
   14508:	605a      	str	r2, [r3, #4]
}
   1450a:	4770      	bx	lr
   1450c:	e000ed90 	.word	0xe000ed90

00014510 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   14510:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   14512:	4b0e      	ldr	r3, [pc, #56]	; (1454c <z_arm_mpu_init+0x3c>)
   14514:	681d      	ldr	r5, [r3, #0]
   14516:	2d10      	cmp	r5, #16
   14518:	d815      	bhi.n	14546 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   1451a:	f7ff fff1 	bl	14500 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
   1451e:	f7ff fe9d 	bl	1425c <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14522:	2400      	movs	r4, #0
   14524:	42a5      	cmp	r5, r4
   14526:	d908      	bls.n	1453a <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   14528:	4b08      	ldr	r3, [pc, #32]	; (1454c <z_arm_mpu_init+0x3c>)
   1452a:	6859      	ldr	r1, [r3, #4]
   1452c:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   14530:	4620      	mov	r0, r4
   14532:	f7ff fe9b 	bl	1426c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14536:	3401      	adds	r4, #1
   14538:	e7f4      	b.n	14524 <z_arm_mpu_init+0x14>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   1453a:	4b05      	ldr	r3, [pc, #20]	; (14550 <z_arm_mpu_init+0x40>)
   1453c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   1453e:	f7ff ffd5 	bl	144ec <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   14542:	2000      	movs	r0, #0
}
   14544:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   14546:	f04f 30ff 	mov.w	r0, #4294967295
   1454a:	e7fb      	b.n	14544 <z_arm_mpu_init+0x34>
   1454c:	000246b8 	.word	0x000246b8
   14550:	20016c7d 	.word	0x20016c7d

00014554 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   14554:	4b01      	ldr	r3, [pc, #4]	; (1455c <__stdout_hook_install+0x8>)
   14556:	6018      	str	r0, [r3, #0]
}
   14558:	4770      	bx	lr
   1455a:	bf00      	nop
   1455c:	20014530 	.word	0x20014530

00014560 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   14560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14562:	4605      	mov	r5, r0
   14564:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   14566:	2400      	movs	r4, #0
   14568:	e004      	b.n	14574 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
   1456a:	4b09      	ldr	r3, [pc, #36]	; (14590 <z_impl_zephyr_write_stdout+0x30>)
   1456c:	681b      	ldr	r3, [r3, #0]
   1456e:	7830      	ldrb	r0, [r6, #0]
   14570:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   14572:	3401      	adds	r4, #1
   14574:	42bc      	cmp	r4, r7
   14576:	da08      	bge.n	1458a <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
   14578:	192e      	adds	r6, r5, r4
   1457a:	5d2b      	ldrb	r3, [r5, r4]
   1457c:	2b0a      	cmp	r3, #10
   1457e:	d1f4      	bne.n	1456a <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
   14580:	4b03      	ldr	r3, [pc, #12]	; (14590 <z_impl_zephyr_write_stdout+0x30>)
   14582:	681b      	ldr	r3, [r3, #0]
   14584:	200d      	movs	r0, #13
   14586:	4798      	blx	r3
   14588:	e7ef      	b.n	1456a <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
   1458a:	4638      	mov	r0, r7
   1458c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1458e:	bf00      	nop
   14590:	20014530 	.word	0x20014530

00014594 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   14594:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   14596:	4b08      	ldr	r3, [pc, #32]	; (145b8 <_sbrk+0x24>)
   14598:	6819      	ldr	r1, [r3, #0]
   1459a:	4b08      	ldr	r3, [pc, #32]	; (145bc <_sbrk+0x28>)
   1459c:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   1459e:	440a      	add	r2, r1
   145a0:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   145a4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   145a8:	429a      	cmp	r2, r3
   145aa:	d202      	bcs.n	145b2 <_sbrk+0x1e>
		heap_sz += count;
   145ac:	4b02      	ldr	r3, [pc, #8]	; (145b8 <_sbrk+0x24>)
   145ae:	601a      	str	r2, [r3, #0]
		ret = ptr;
   145b0:	4770      	bx	lr
	} else {
		ret = (void *)-1;
   145b2:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return ret;
}
   145b6:	4770      	bx	lr
   145b8:	20015c38 	.word	0x20015c38
   145bc:	200192d0 	.word	0x200192d0

000145c0 <__malloc_lock>:
__weak FUNC_ALIAS(_sbrk, sbrk, void *);

static LIBC_DATA SYS_MUTEX_DEFINE(heap_mutex);

void __malloc_lock(struct _reent *reent)
{
   145c0:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   145c2:	f04f 32ff 	mov.w	r2, #4294967295
   145c6:	f04f 33ff 	mov.w	r3, #4294967295
   145ca:	4802      	ldr	r0, [pc, #8]	; (145d4 <__malloc_lock+0x14>)
   145cc:	f006 ff64 	bl	1b498 <z_impl_k_mutex_lock>
	sys_mutex_lock(&heap_mutex, K_FOREVER);
}
   145d0:	bd08      	pop	{r3, pc}
   145d2:	bf00      	nop
   145d4:	20014534 	.word	0x20014534

000145d8 <__malloc_unlock>:

void __malloc_unlock(struct _reent *reent)
{
   145d8:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   145da:	4802      	ldr	r0, [pc, #8]	; (145e4 <__malloc_unlock+0xc>)
   145dc:	f006 ffe6 	bl	1b5ac <z_impl_k_mutex_unlock>
	sys_mutex_unlock(&heap_mutex);
}
   145e0:	bd08      	pop	{r3, pc}
   145e2:	bf00      	nop
   145e4:	20014534 	.word	0x20014534

000145e8 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   145e8:	b508      	push	{r3, lr}
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
   145ea:	221d      	movs	r2, #29
   145ec:	4904      	ldr	r1, [pc, #16]	; (14600 <__chk_fail+0x18>)
   145ee:	2002      	movs	r0, #2
   145f0:	f00b faa1 	bl	1fb36 <_write>
	k_oops();
   145f4:	4040      	eors	r0, r0
   145f6:	f380 8811 	msr	BASEPRI, r0
   145fa:	f04f 0003 	mov.w	r0, #3
   145fe:	df02      	svc	2
	CODE_UNREACHABLE;
   14600:	00024688 	.word	0x00024688

00014604 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   14604:	b538      	push	{r3, r4, r5, lr}
   14606:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   14608:	f04f 32ff 	mov.w	r2, #4294967295
   1460c:	f04f 33ff 	mov.w	r3, #4294967295
   14610:	4820      	ldr	r0, [pc, #128]	; (14694 <net_if_up+0x90>)
   14612:	f006 ff41 	bl	1b498 <z_impl_k_mutex_lock>
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
	if (iface == NULL) {
   14616:	b134      	cbz	r4, 14626 <net_if_up+0x22>
		return false;
	}

	return atomic_test_bit(iface->if_dev->flags, value);
   14618:	6823      	ldr	r3, [r4, #0]
   1461a:	330c      	adds	r3, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1461c:	e8d3 3faf 	lda	r3, [r3]

	NET_DBG("iface %p", iface);

	k_mutex_lock(&lock, K_FOREVER);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   14620:	f013 0f01 	tst.w	r3, #1
   14624:	d132      	bne.n	1468c <net_if_up+0x88>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   14626:	6823      	ldr	r3, [r4, #0]
   14628:	7e9a      	ldrb	r2, [r3, #26]
		status = -EALREADY;
		goto out;
	}

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   1462a:	b9e2      	cbnz	r2, 14666 <net_if_up+0x62>
	if (!iface || !iface->if_dev) {
   1462c:	b334      	cbz	r4, 1467c <net_if_up+0x78>
   1462e:	b33b      	cbz	r3, 14680 <net_if_up+0x7c>
	return iface->if_dev->l2;
   14630:	685b      	ldr	r3, [r3, #4]
		net_if_flag_set(iface, NET_IF_UP);
		goto notify;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   14632:	b33b      	cbz	r3, 14684 <net_if_up+0x80>
   14634:	689b      	ldr	r3, [r3, #8]
   14636:	b33b      	cbz	r3, 14688 <net_if_up+0x84>
		goto done;
	}

	/* Notify L2 to enable the interface */
	status = net_if_l2(iface)->enable(iface, true);
   14638:	2101      	movs	r1, #1
   1463a:	4620      	mov	r0, r4
   1463c:	4798      	blx	r3
	if (status < 0) {
   1463e:	1e05      	subs	r5, r0, #0
   14640:	db0c      	blt.n	1465c <net_if_up+0x58>
	atomic_set_bit(iface->if_dev->flags, value);
   14642:	6823      	ldr	r3, [r4, #0]
   14644:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14646:	e8d3 2fef 	ldaex	r2, [r3]
   1464a:	f042 0201 	orr.w	r2, r2, #1
   1464e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14652:	2900      	cmp	r1, #0
   14654:	d1f7      	bne.n	14646 <net_if_up+0x42>
	net_if_flag_set(iface, NET_IF_UP);

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   14656:	4620      	mov	r0, r4
   14658:	f00b fa82 	bl	1fb60 <l2_flags_get>
	return z_impl_k_mutex_unlock(mutex);
   1465c:	480d      	ldr	r0, [pc, #52]	; (14694 <net_if_up+0x90>)
   1465e:	f006 ffa5 	bl	1b5ac <z_impl_k_mutex_unlock>

out:
	k_mutex_unlock(&lock);

	return status;
}
   14662:	4628      	mov	r0, r5
   14664:	bd38      	pop	{r3, r4, r5, pc}
   14666:	330c      	adds	r3, #12
   14668:	e8d3 2fef 	ldaex	r2, [r3]
   1466c:	f042 0201 	orr.w	r2, r2, #1
   14670:	e8c3 2fe1 	stlex	r1, r2, [r3]
   14674:	2900      	cmp	r1, #0
   14676:	d1f7      	bne.n	14668 <net_if_up+0x64>
	int status = 0;
   14678:	2500      	movs	r5, #0
		goto notify;
   1467a:	e7ef      	b.n	1465c <net_if_up+0x58>
	int status = 0;
   1467c:	2500      	movs	r5, #0
   1467e:	e7e0      	b.n	14642 <net_if_up+0x3e>
   14680:	2500      	movs	r5, #0
   14682:	e7de      	b.n	14642 <net_if_up+0x3e>
   14684:	2500      	movs	r5, #0
   14686:	e7dc      	b.n	14642 <net_if_up+0x3e>
   14688:	2500      	movs	r5, #0
   1468a:	e7da      	b.n	14642 <net_if_up+0x3e>
		status = -EALREADY;
   1468c:	f06f 0577 	mvn.w	r5, #119	; 0x77
   14690:	e7e4      	b.n	1465c <net_if_up+0x58>
   14692:	bf00      	nop
   14694:	200147f8 	.word	0x200147f8

00014698 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   14698:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   1469a:	f04f 32ff 	mov.w	r2, #4294967295
   1469e:	f04f 33ff 	mov.w	r3, #4294967295
   146a2:	480c      	ldr	r0, [pc, #48]	; (146d4 <net_if_init+0x3c>)
   146a4:	f006 fef8 	bl	1b498 <z_impl_k_mutex_lock>

	k_mutex_lock(&lock, K_FOREVER);

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   146a8:	4c0b      	ldr	r4, [pc, #44]	; (146d8 <net_if_init+0x40>)
   146aa:	e000      	b.n	146ae <net_if_init+0x16>
   146ac:	3404      	adds	r4, #4
   146ae:	4b0b      	ldr	r3, [pc, #44]	; (146dc <net_if_init+0x44>)
   146b0:	429c      	cmp	r4, r3
   146b2:	d20a      	bcs.n	146ca <net_if_init+0x32>
	return iface->if_dev->dev;
   146b4:	6823      	ldr	r3, [r4, #0]
   146b6:	681b      	ldr	r3, [r3, #0]
	const struct net_if_api *api = net_if_get_device(iface)->api;
   146b8:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   146ba:	2b00      	cmp	r3, #0
   146bc:	d0f6      	beq.n	146ac <net_if_init+0x14>
   146be:	681b      	ldr	r3, [r3, #0]
   146c0:	2b00      	cmp	r3, #0
   146c2:	d0f3      	beq.n	146ac <net_if_init+0x14>
	api->init(iface);
   146c4:	4620      	mov	r0, r4
   146c6:	4798      	blx	r3
   146c8:	e7f0      	b.n	146ac <net_if_init+0x14>
	return z_impl_k_mutex_unlock(mutex);
   146ca:	4802      	ldr	r0, [pc, #8]	; (146d4 <net_if_init+0x3c>)
   146cc:	f006 ff6e 	bl	1b5ac <z_impl_k_mutex_unlock>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   146d0:	bd10      	pop	{r4, pc}
   146d2:	bf00      	nop
   146d4:	200147f8 	.word	0x200147f8
   146d8:	200148dc 	.word	0x200148dc
   146dc:	200148e0 	.word	0x200148e0

000146e0 <net_if_post_init>:

void net_if_post_init(void)
{
   146e0:	b510      	push	{r4, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   146e2:	4c0a      	ldr	r4, [pc, #40]	; (1470c <net_if_post_init+0x2c>)
   146e4:	e003      	b.n	146ee <net_if_post_init+0xe>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
   146e6:	4620      	mov	r0, r4
   146e8:	f7ff ff8c 	bl	14604 <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   146ec:	3404      	adds	r4, #4
   146ee:	4b08      	ldr	r3, [pc, #32]	; (14710 <net_if_post_init+0x30>)
   146f0:	429c      	cmp	r4, r3
   146f2:	d20a      	bcs.n	1470a <net_if_post_init+0x2a>
	if (iface == NULL) {
   146f4:	2c00      	cmp	r4, #0
   146f6:	d0f6      	beq.n	146e6 <net_if_post_init+0x6>
	return atomic_test_bit(iface->if_dev->flags, value);
   146f8:	6823      	ldr	r3, [r4, #0]
   146fa:	330c      	adds	r3, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   146fc:	e8d3 3faf 	lda	r3, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   14700:	f3c3 03c0 	ubfx	r3, r3, #3, #1
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   14704:	2b00      	cmp	r3, #0
   14706:	d1f1      	bne.n	146ec <net_if_post_init+0xc>
   14708:	e7ed      	b.n	146e6 <net_if_post_init+0x6>
		}
	}
}
   1470a:	bd10      	pop	{r4, pc}
   1470c:	200148dc 	.word	0x200148dc
   14710:	200148e0 	.word	0x200148e0

00014714 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
   14714:	b470      	push	{r4, r5, r6}
	return port->config;
   14716:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14718:	685e      	ldr	r6, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1471a:	4b30      	ldr	r3, [pc, #192]	; (147dc <gpio_nrfx_config+0xc8>)
   1471c:	4013      	ands	r3, r2
   1471e:	4830      	ldr	r0, [pc, #192]	; (147e0 <gpio_nrfx_config+0xcc>)
   14720:	4283      	cmp	r3, r0
   14722:	d027      	beq.n	14774 <gpio_nrfx_config+0x60>
   14724:	d812      	bhi.n	1474c <gpio_nrfx_config+0x38>
   14726:	2b06      	cmp	r3, #6
   14728:	d026      	beq.n	14778 <gpio_nrfx_config+0x64>
   1472a:	d904      	bls.n	14736 <gpio_nrfx_config+0x22>
   1472c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   14730:	d109      	bne.n	14746 <gpio_nrfx_config+0x32>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
   14732:	2001      	movs	r0, #1
   14734:	e016      	b.n	14764 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14736:	b30b      	cbz	r3, 1477c <gpio_nrfx_config+0x68>
   14738:	2b02      	cmp	r3, #2
   1473a:	d101      	bne.n	14740 <gpio_nrfx_config+0x2c>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
   1473c:	2004      	movs	r0, #4
   1473e:	e011      	b.n	14764 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14740:	f06f 0015 	mvn.w	r0, #21
   14744:	e03c      	b.n	147c0 <gpio_nrfx_config+0xac>
   14746:	f06f 0015 	mvn.w	r0, #21
   1474a:	e039      	b.n	147c0 <gpio_nrfx_config+0xac>
   1474c:	4825      	ldr	r0, [pc, #148]	; (147e4 <gpio_nrfx_config+0xd0>)
   1474e:	4283      	cmp	r3, r0
   14750:	d016      	beq.n	14780 <gpio_nrfx_config+0x6c>
   14752:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   14756:	d101      	bne.n	1475c <gpio_nrfx_config+0x48>
		drive = NRF_GPIO_PIN_H0H1;
   14758:	2003      	movs	r0, #3
   1475a:	e003      	b.n	14764 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1475c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   14760:	d139      	bne.n	147d6 <gpio_nrfx_config+0xc2>
		drive = NRF_GPIO_PIN_S0H1;
   14762:	2002      	movs	r0, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
   14764:	f012 0f10 	tst.w	r2, #16
   14768:	d10c      	bne.n	14784 <gpio_nrfx_config+0x70>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
   1476a:	f012 0f20 	tst.w	r2, #32
   1476e:	d029      	beq.n	147c4 <gpio_nrfx_config+0xb0>
		pull = NRF_GPIO_PIN_PULLDOWN;
   14770:	2401      	movs	r4, #1
   14772:	e008      	b.n	14786 <gpio_nrfx_config+0x72>
		drive = NRF_GPIO_PIN_H0D1;
   14774:	2007      	movs	r0, #7
   14776:	e7f5      	b.n	14764 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_S0D1;
   14778:	2006      	movs	r0, #6
   1477a:	e7f3      	b.n	14764 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1477c:	2000      	movs	r0, #0
   1477e:	e7f1      	b.n	14764 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_D0H1;
   14780:	2005      	movs	r0, #5
   14782:	e7ef      	b.n	14764 <gpio_nrfx_config+0x50>
		pull = NRF_GPIO_PIN_PULLUP;
   14784:	2403      	movs	r4, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
   14786:	f3c2 2340 	ubfx	r3, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1478a:	f412 7f80 	tst.w	r2, #256	; 0x100
   1478e:	bf0c      	ite	eq
   14790:	2501      	moveq	r5, #1
   14792:	2500      	movne	r5, #0

	if ((flags & GPIO_OUTPUT) != 0) {
   14794:	f412 7f00 	tst.w	r2, #512	; 0x200
   14798:	d005      	beq.n	147a6 <gpio_nrfx_config+0x92>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1479a:	f412 6f00 	tst.w	r2, #2048	; 0x800
   1479e:	d013      	beq.n	147c8 <gpio_nrfx_config+0xb4>
			nrf_gpio_port_out_set(reg, BIT(pin));
   147a0:	2201      	movs	r2, #1
   147a2:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   147a4:	60b2      	str	r2, [r6, #8]
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   147a6:	f001 011f 	and.w	r1, r1, #31
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   147aa:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   147ae:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   147b2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   147b6:	3180      	adds	r1, #128	; 0x80
   147b8:	4a0b      	ldr	r2, [pc, #44]	; (147e8 <gpio_nrfx_config+0xd4>)
   147ba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
   147be:	2000      	movs	r0, #0
}
   147c0:	bc70      	pop	{r4, r5, r6}
   147c2:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
   147c4:	2400      	movs	r4, #0
   147c6:	e7de      	b.n	14786 <gpio_nrfx_config+0x72>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   147c8:	f412 6f80 	tst.w	r2, #1024	; 0x400
   147cc:	d0eb      	beq.n	147a6 <gpio_nrfx_config+0x92>
			nrf_gpio_port_out_clear(reg, BIT(pin));
   147ce:	2201      	movs	r2, #1
   147d0:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   147d2:	60f2      	str	r2, [r6, #12]
}
   147d4:	e7e7      	b.n	147a6 <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   147d6:	f06f 0015 	mvn.w	r0, #21
   147da:	e7f1      	b.n	147c0 <gpio_nrfx_config+0xac>
   147dc:	00f00006 	.word	0x00f00006
   147e0:	00100006 	.word	0x00100006
   147e4:	00400002 	.word	0x00400002
   147e8:	40842500 	.word	0x40842500

000147ec <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
   147ec:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
   147ee:	6905      	ldr	r5, [r0, #16]
	return port->config;
   147f0:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
   147f2:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   147f4:	696a      	ldr	r2, [r5, #20]
   147f6:	69ab      	ldr	r3, [r5, #24]
   147f8:	4313      	orrs	r3, r2
   147fa:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
   147fe:	2201      	movs	r2, #1
	uint32_t pin = 0U;
   14800:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
   14802:	e011      	b.n	14828 <cfg_level_pins+0x3c>
		return NRF_GPIO_PIN_SENSE_HIGH;
   14804:	f04f 0c02 	mov.w	ip, #2
    *p_pin = pin_number & 0x1F;
   14808:	f003 031f 	and.w	r3, r3, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1480c:	4f0f      	ldr	r7, [pc, #60]	; (1484c <cfg_level_pins+0x60>)
   1480e:	3380      	adds	r3, #128	; 0x80
   14810:	f857 4023 	ldr.w	r4, [r7, r3, lsl #2]
   14814:	f424 3440 	bic.w	r4, r4, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   14818:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
   1481c:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
   14820:	ea21 0102 	bic.w	r1, r1, r2
		}
		++pin;
   14824:	3001      	adds	r0, #1
		bit <<= 1;
   14826:	0052      	lsls	r2, r2, #1
	while (level_pins) {
   14828:	b171      	cbz	r1, 14848 <cfg_level_pins+0x5c>
		if (level_pins & bit) {
   1482a:	420a      	tst	r2, r1
   1482c:	d0fa      	beq.n	14824 <cfg_level_pins+0x38>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1482e:	7a34      	ldrb	r4, [r6, #8]
   14830:	f000 031f 	and.w	r3, r0, #31
   14834:	ea43 1344 	orr.w	r3, r3, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   14838:	692c      	ldr	r4, [r5, #16]
   1483a:	40c4      	lsrs	r4, r0
   1483c:	f014 0f01 	tst.w	r4, #1
   14840:	d1e0      	bne.n	14804 <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
   14842:	f04f 0c03 	mov.w	ip, #3
   14846:	e7df      	b.n	14808 <cfg_level_pins+0x1c>
	}
}
   14848:	bcf0      	pop	{r4, r5, r6, r7}
   1484a:	4770      	bx	lr
   1484c:	40842500 	.word	0x40842500

00014850 <check_level_trigger_pins>:
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port,
					 uint32_t *sense_levels)
{
   14850:	b5f0      	push	{r4, r5, r6, r7, lr}
   14852:	468e      	mov	lr, r1
	return port->data;
   14854:	6903      	ldr	r3, [r0, #16]
	return port->config;
   14856:	6841      	ldr	r1, [r0, #4]
	uint32_t out = data->pin_int_en;
   14858:	68d8      	ldr	r0, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1485a:	695a      	ldr	r2, [r3, #20]
   1485c:	699c      	ldr	r4, [r3, #24]
   1485e:	4322      	orrs	r2, r4
   14860:	ea20 0c02 	bic.w	ip, r0, r2
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   14864:	684a      	ldr	r2, [r1, #4]
    return p_reg->IN;
   14866:	6912      	ldr	r2, [r2, #16]

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   14868:	6918      	ldr	r0, [r3, #16]
   1486a:	4050      	eors	r0, r2

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
   1486c:	ea2c 0000 	bic.w	r0, ip, r0
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;

	uint32_t port_latch = 0;

	uint32_t check_pins = level_pins;
   14870:	4664      	mov	r4, ip
	uint32_t bit = 1U << pin;
   14872:	2201      	movs	r2, #1
	uint32_t pin = 0U;
   14874:	2500      	movs	r5, #0
#if IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE)
	/* Read LATCH, which will tell us which pin has changed its state. */
	port_latch = cfg->port->LATCH;
#endif

	while (check_pins) {
   14876:	e00d      	b.n	14894 <check_level_trigger_pins+0x44>
    *p_pin = pin_number & 0x1F;
   14878:	f003 031f 	and.w	r3, r3, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1487c:	4f13      	ldr	r7, [pc, #76]	; (148cc <check_level_trigger_pins+0x7c>)
   1487e:	3380      	adds	r3, #128	; 0x80
   14880:	f857 6023 	ldr.w	r6, [r7, r3, lsl #2]
   14884:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   14888:	f847 6023 	str.w	r6, [r7, r3, lsl #2]
					*sense_levels |= bit;
				}
			}

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			check_pins &= ~bit;
   1488c:	ea24 0402 	bic.w	r4, r4, r2
		}
		++pin;
   14890:	3501      	adds	r5, #1
		bit <<= 1;
   14892:	0052      	lsls	r2, r2, #1
	while (check_pins) {
   14894:	b1cc      	cbz	r4, 148ca <check_level_trigger_pins+0x7a>
		if (check_pins & bit) {
   14896:	4222      	tst	r2, r4
   14898:	d0fa      	beq.n	14890 <check_level_trigger_pins+0x40>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1489a:	7a0e      	ldrb	r6, [r1, #8]
   1489c:	f005 031f 	and.w	r3, r5, #31
   148a0:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
			if (!(level_pins & bit)) {
   148a4:	ea12 0f0c 	tst.w	r2, ip
   148a8:	d1e6      	bne.n	14878 <check_level_trigger_pins+0x28>
    *p_pin = pin_number & 0x1F;
   148aa:	f003 061f 	and.w	r6, r3, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   148ae:	3680      	adds	r6, #128	; 0x80
   148b0:	4f06      	ldr	r7, [pc, #24]	; (148cc <check_level_trigger_pins+0x7c>)
   148b2:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   148b6:	f3c6 4601 	ubfx	r6, r6, #16, #2
				if (high) {
   148ba:	2e02      	cmp	r6, #2
   148bc:	d1dc      	bne.n	14878 <check_level_trigger_pins+0x28>
					*sense_levels |= bit;
   148be:	f8de 6000 	ldr.w	r6, [lr]
   148c2:	4316      	orrs	r6, r2
   148c4:	f8ce 6000 	str.w	r6, [lr]
   148c8:	e7d6      	b.n	14878 <check_level_trigger_pins+0x28>
	 */
	cfg->port->LATCH = port_latch;
#endif

	return out;
}
   148ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   148cc:	40842500 	.word	0x40842500

000148d0 <gpiote_event_handler>:

	gpio_fire_callbacks(list, port, pins);
}

static void gpiote_event_handler(void)
{
   148d0:	b570      	push	{r4, r5, r6, lr}
   148d2:	b082      	sub	sp, #8
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   148d4:	2300      	movs	r3, #0
   148d6:	9301      	str	r3, [sp, #4]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   148d8:	9300      	str	r3, [sp, #0]
}

NRF_STATIC_INLINE bool nrf_gpiote_event_check(NRF_GPIOTE_Type const * p_reg,
                                              nrf_gpiote_event_t      event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   148da:	4b2e      	ldr	r3, [pc, #184]	; (14994 <gpiote_event_handler+0xc4>)
   148dc:	681c      	ldr	r4, [r3, #0]
	bool port_event = nrf_gpiote_event_check(NRF_GPIOTE,
						 NRF_GPIOTE_EVENT_PORT);

	if (port_event) {
   148de:	b90c      	cbnz	r4, 148e4 <gpiote_event_handler+0x14>
{
   148e0:	2100      	movs	r1, #0
   148e2:	e00a      	b.n	148fa <gpiote_event_handler+0x2a>
#ifdef CONFIG_GPIO_NRF_P0
		fired_triggers[0] =
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   148e4:	4669      	mov	r1, sp
   148e6:	482c      	ldr	r0, [pc, #176]	; (14998 <gpiote_event_handler+0xc8>)
   148e8:	f7ff ffb2 	bl	14850 <check_level_trigger_pins>
		fired_triggers[0] =
   148ec:	9001      	str	r0, [sp, #4]
}

NRF_STATIC_INLINE void nrf_gpiote_event_clear(NRF_GPIOTE_Type * p_reg, nrf_gpiote_event_t event)
{
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   148ee:	4b29      	ldr	r3, [pc, #164]	; (14994 <gpiote_event_handler+0xc4>)
   148f0:	2200      	movs	r2, #0
   148f2:	601a      	str	r2, [r3, #0]
   148f4:	681b      	ldr	r3, [r3, #0]
    nrf_event_readback((void *)nrf_gpiote_event_address_get(p_reg, event));
}
   148f6:	e7f3      	b.n	148e0 <gpiote_event_handler+0x10>
		 */
		nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
	}

	/* Handle interrupt from GPIOTE channels. */
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   148f8:	3101      	adds	r1, #1
   148fa:	2907      	cmp	r1, #7
   148fc:	d826      	bhi.n	1494c <gpiote_event_handler+0x7c>
		nrf_gpiote_event_t evt =
   148fe:	f101 0340 	add.w	r3, r1, #64	; 0x40
   14902:	009b      	lsls	r3, r3, #2
   14904:	b29a      	uxth	r2, r3
			offsetof(NRF_GPIOTE_Type, EVENTS_IN[i]);

		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   14906:	2301      	movs	r3, #1
   14908:	408b      	lsls	r3, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1490a:	4824      	ldr	r0, [pc, #144]	; (1499c <gpiote_event_handler+0xcc>)
   1490c:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
   14910:	4203      	tst	r3, r0
   14912:	d0f1      	beq.n	148f8 <gpiote_event_handler+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14914:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   14918:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   1491c:	681b      	ldr	r3, [r3, #0]
   1491e:	2b00      	cmp	r3, #0
   14920:	d0ea      	beq.n	148f8 <gpiote_event_handler+0x28>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14922:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   14926:	481d      	ldr	r0, [pc, #116]	; (1499c <gpiote_event_handler+0xcc>)
   14928:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   1492c:	f3c0 2004 	ubfx	r0, r0, #8, #5
		    nrf_gpiote_event_check(NRF_GPIOTE, evt)) {
			uint32_t abs_pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, i);
			/* Divide absolute pin number to port and pin parts. */
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   14930:	2301      	movs	r3, #1
   14932:	fa03 f000 	lsl.w	r0, r3, r0
   14936:	9b01      	ldr	r3, [sp, #4]
   14938:	4303      	orrs	r3, r0
   1493a:	9301      	str	r3, [sp, #4]
    return ((uint32_t)p_reg + event);
   1493c:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   14940:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14944:	2200      	movs	r2, #0
   14946:	601a      	str	r2, [r3, #0]
   14948:	681b      	ldr	r3, [r3, #0]
}
   1494a:	e7d5      	b.n	148f8 <gpiote_event_handler+0x28>
		cfg_edge_sense_pins(DEVICE_DT_GET(GPIO(1)), sense_levels[1]);
#endif
	}

#ifdef CONFIG_GPIO_NRF_P0
	if (fired_triggers[0]) {
   1494c:	9e01      	ldr	r6, [sp, #4]
   1494e:	b916      	cbnz	r6, 14956 <gpiote_event_handler+0x86>
	if (fired_triggers[1]) {
		fire_callbacks(DEVICE_DT_GET(GPIO(1)), fired_triggers[1]);
	}
#endif

	if (port_event) {
   14950:	b9dc      	cbnz	r4, 1498a <gpiote_event_handler+0xba>
#endif
#ifdef CONFIG_GPIO_NRF_P1
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
#endif
	}
}
   14952:	b002      	add	sp, #8
   14954:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
   14956:	4b12      	ldr	r3, [pc, #72]	; (149a0 <gpiote_event_handler+0xd0>)
   14958:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1495a:	b119      	cbz	r1, 14964 <gpiote_event_handler+0x94>
   1495c:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1495e:	b149      	cbz	r1, 14974 <gpiote_event_handler+0xa4>
	return node->next;
   14960:	680d      	ldr	r5, [r1, #0]
   14962:	e007      	b.n	14974 <gpiote_event_handler+0xa4>
   14964:	460d      	mov	r5, r1
   14966:	e005      	b.n	14974 <gpiote_event_handler+0xa4>
   14968:	b16d      	cbz	r5, 14986 <gpiote_event_handler+0xb6>
   1496a:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   1496c:	b105      	cbz	r5, 14970 <gpiote_event_handler+0xa0>
	return node->next;
   1496e:	682b      	ldr	r3, [r5, #0]
   14970:	4629      	mov	r1, r5
   14972:	461d      	mov	r5, r3
   14974:	2900      	cmp	r1, #0
   14976:	d0eb      	beq.n	14950 <gpiote_event_handler+0x80>
		if (cb->pin_mask & pins) {
   14978:	688a      	ldr	r2, [r1, #8]
   1497a:	4032      	ands	r2, r6
   1497c:	d0f4      	beq.n	14968 <gpiote_event_handler+0x98>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1497e:	684b      	ldr	r3, [r1, #4]
   14980:	4805      	ldr	r0, [pc, #20]	; (14998 <gpiote_event_handler+0xc8>)
   14982:	4798      	blx	r3
   14984:	e7f0      	b.n	14968 <gpiote_event_handler+0x98>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   14986:	462b      	mov	r3, r5
   14988:	e7f2      	b.n	14970 <gpiote_event_handler+0xa0>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   1498a:	4803      	ldr	r0, [pc, #12]	; (14998 <gpiote_event_handler+0xc8>)
   1498c:	f7ff ff2e 	bl	147ec <cfg_level_pins>
}
   14990:	e7df      	b.n	14952 <gpiote_event_handler+0x82>
   14992:	bf00      	nop
   14994:	4003117c 	.word	0x4003117c
   14998:	00023e90 	.word	0x00023e90
   1499c:	40031000 	.word	0x40031000
   149a0:	20015c40 	.word	0x20015c40

000149a4 <gpiote_pin_cleanup>:
{
   149a4:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   149a6:	4b14      	ldr	r3, [pc, #80]	; (149f8 <gpiote_pin_cleanup+0x54>)
   149a8:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   149ac:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   149ae:	2300      	movs	r3, #0
   149b0:	e000      	b.n	149b4 <gpiote_pin_cleanup+0x10>
   149b2:	3301      	adds	r3, #1
   149b4:	2b07      	cmp	r3, #7
   149b6:	d81d      	bhi.n	149f4 <gpiote_pin_cleanup+0x50>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   149b8:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   149bc:	490e      	ldr	r1, [pc, #56]	; (149f8 <gpiote_pin_cleanup+0x54>)
   149be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   149c2:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   149c6:	4290      	cmp	r0, r2
   149c8:	d1f3      	bne.n	149b2 <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
   149ca:	fa24 f203 	lsr.w	r2, r4, r3
   149ce:	f012 0f01 	tst.w	r2, #1
   149d2:	d0ee      	beq.n	149b2 <gpiote_pin_cleanup+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   149d4:	460a      	mov	r2, r1
   149d6:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   149da:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   149de:	f021 0101 	bic.w	r1, r1, #1
   149e2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   149e6:	2101      	movs	r1, #1
   149e8:	4099      	lsls	r1, r3
    p_reg->INTENCLR = mask;
   149ea:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   149ee:	b2d8      	uxtb	r0, r3
   149f0:	f001 ffd8 	bl	169a4 <nrfx_gpiote_channel_free>
}
   149f4:	bd10      	pop	{r4, pc}
   149f6:	bf00      	nop
   149f8:	40031000 	.word	0x40031000

000149fc <gpiote_channel_alloc>:
{
   149fc:	b570      	push	{r4, r5, r6, lr}
   149fe:	b082      	sub	sp, #8
   14a00:	4604      	mov	r4, r0
   14a02:	460d      	mov	r5, r1
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   14a04:	f10d 0007 	add.w	r0, sp, #7
   14a08:	f001 ffe8 	bl	169dc <nrfx_gpiote_channel_alloc>
   14a0c:	4b1c      	ldr	r3, [pc, #112]	; (14a80 <gpiote_channel_alloc+0x84>)
   14a0e:	4298      	cmp	r0, r3
   14a10:	d132      	bne.n	14a78 <gpiote_channel_alloc+0x7c>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   14a12:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14a16:	f103 0240 	add.w	r2, r3, #64	; 0x40
   14a1a:	0092      	lsls	r2, r2, #2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   14a1c:	4e19      	ldr	r6, [pc, #100]	; (14a84 <gpiote_channel_alloc+0x88>)
   14a1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   14a22:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   14a26:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
   14a2a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   14a2e:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14a32:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   14a36:	0224      	lsls	r4, r4, #8
   14a38:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   14a3c:	042d      	lsls	r5, r5, #16
   14a3e:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   14a42:	432c      	orrs	r4, r5
   14a44:	430c      	orrs	r4, r1
   14a46:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
    return ((uint32_t)p_reg + event);
   14a4a:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   14a4e:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14a52:	2000      	movs	r0, #0
   14a54:	6018      	str	r0, [r3, #0]
   14a56:	681b      	ldr	r3, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   14a58:	f89d 1007 	ldrb.w	r1, [sp, #7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   14a5c:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   14a60:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   14a64:	f042 0201 	orr.w	r2, r2, #1
   14a68:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   14a6c:	2301      	movs	r3, #1
   14a6e:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
   14a70:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
   14a74:	b002      	add	sp, #8
   14a76:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   14a78:	f06f 0012 	mvn.w	r0, #18
   14a7c:	e7fa      	b.n	14a74 <gpiote_channel_alloc+0x78>
   14a7e:	bf00      	nop
   14a80:	0bad0000 	.word	0x0bad0000
   14a84:	40031000 	.word	0x40031000

00014a88 <gpiote_pin_int_cfg>:
{
   14a88:	b570      	push	{r4, r5, r6, lr}
   14a8a:	460c      	mov	r4, r1
	return port->data;
   14a8c:	6906      	ldr	r6, [r0, #16]
	return port->config;
   14a8e:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14a90:	7a1b      	ldrb	r3, [r3, #8]
   14a92:	f001 051f 	and.w	r5, r1, #31
   14a96:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	gpiote_pin_cleanup(abs_pin);
   14a9a:	4628      	mov	r0, r5
   14a9c:	f7ff ff82 	bl	149a4 <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
   14aa0:	f005 021f 	and.w	r2, r5, #31
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   14aa4:	491e      	ldr	r1, [pc, #120]	; (14b20 <gpiote_pin_int_cfg+0x98>)
   14aa6:	f102 0080 	add.w	r0, r2, #128	; 0x80
   14aaa:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
   14aae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   14ab2:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
   14ab6:	68f3      	ldr	r3, [r6, #12]
   14ab8:	40e3      	lsrs	r3, r4
   14aba:	f013 0f01 	tst.w	r3, #1
   14abe:	d02d      	beq.n	14b1c <gpiote_pin_int_cfg+0x94>
		if (data->trig_edge & BIT(pin)) {
   14ac0:	6973      	ldr	r3, [r6, #20]
   14ac2:	40e3      	lsrs	r3, r4
   14ac4:	f013 0f01 	tst.w	r3, #1
   14ac8:	d013      	beq.n	14af2 <gpiote_pin_int_cfg+0x6a>
				if (data->double_edge & BIT(pin)) {
   14aca:	69b3      	ldr	r3, [r6, #24]
   14acc:	40e3      	lsrs	r3, r4
   14ace:	f013 0f01 	tst.w	r3, #1
   14ad2:	d107      	bne.n	14ae4 <gpiote_pin_int_cfg+0x5c>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   14ad4:	6931      	ldr	r1, [r6, #16]
   14ad6:	fa21 f404 	lsr.w	r4, r1, r4
   14ada:	f014 0f01 	tst.w	r4, #1
   14ade:	d006      	beq.n	14aee <gpiote_pin_int_cfg+0x66>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
   14ae0:	2101      	movs	r1, #1
   14ae2:	e000      	b.n	14ae6 <gpiote_pin_int_cfg+0x5e>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   14ae4:	2103      	movs	r1, #3
				res = gpiote_channel_alloc(abs_pin, pol);
   14ae6:	4628      	mov	r0, r5
   14ae8:	f7ff ff88 	bl	149fc <gpiote_channel_alloc>
   14aec:	e017      	b.n	14b1e <gpiote_pin_int_cfg+0x96>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
   14aee:	2102      	movs	r1, #2
   14af0:	e7f9      	b.n	14ae6 <gpiote_pin_int_cfg+0x5e>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   14af2:	6931      	ldr	r1, [r6, #16]
   14af4:	fa21 f404 	lsr.w	r4, r1, r4
   14af8:	f014 0f01 	tst.w	r4, #1
   14afc:	d10c      	bne.n	14b18 <gpiote_pin_int_cfg+0x90>
	return NRF_GPIO_PIN_SENSE_LOW;
   14afe:	2003      	movs	r0, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   14b00:	4907      	ldr	r1, [pc, #28]	; (14b20 <gpiote_pin_int_cfg+0x98>)
   14b02:	3280      	adds	r2, #128	; 0x80
   14b04:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   14b08:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   14b0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   14b10:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	int res = 0;
   14b14:	2000      	movs	r0, #0
}
   14b16:	e002      	b.n	14b1e <gpiote_pin_int_cfg+0x96>
		return NRF_GPIO_PIN_SENSE_HIGH;
   14b18:	2002      	movs	r0, #2
   14b1a:	e7f1      	b.n	14b00 <gpiote_pin_int_cfg+0x78>
	int res = 0;
   14b1c:	2000      	movs	r0, #0
}
   14b1e:	bd70      	pop	{r4, r5, r6, pc}
   14b20:	40842500 	.word	0x40842500

00014b24 <gpio_nrfx_pin_interrupt_configure>:
{
   14b24:	b570      	push	{r4, r5, r6, lr}
	return port->data;
   14b26:	6904      	ldr	r4, [r0, #16]
	return port->config;
   14b28:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   14b2a:	7a2e      	ldrb	r6, [r5, #8]
   14b2c:	f001 051f 	and.w	r5, r1, #31
   14b30:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   14b34:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   14b38:	d025      	beq.n	14b86 <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14b3a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   14b3e:	d02e      	beq.n	14b9e <gpio_nrfx_pin_interrupt_configure+0x7a>
   14b40:	68e5      	ldr	r5, [r4, #12]
   14b42:	2601      	movs	r6, #1
   14b44:	408e      	lsls	r6, r1
   14b46:	4335      	orrs	r5, r6
   14b48:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   14b4a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   14b4e:	d02c      	beq.n	14baa <gpio_nrfx_pin_interrupt_configure+0x86>
   14b50:	6962      	ldr	r2, [r4, #20]
   14b52:	2501      	movs	r5, #1
   14b54:	408d      	lsls	r5, r1
   14b56:	ea22 0205 	bic.w	r2, r2, r5
   14b5a:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   14b5c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   14b60:	d028      	beq.n	14bb4 <gpio_nrfx_pin_interrupt_configure+0x90>
   14b62:	69a2      	ldr	r2, [r4, #24]
   14b64:	2501      	movs	r5, #1
   14b66:	408d      	lsls	r5, r1
   14b68:	ea22 0205 	bic.w	r2, r2, r5
   14b6c:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   14b6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   14b72:	d024      	beq.n	14bbe <gpio_nrfx_pin_interrupt_configure+0x9a>
   14b74:	6923      	ldr	r3, [r4, #16]
   14b76:	2201      	movs	r2, #1
   14b78:	408a      	lsls	r2, r1
   14b7a:	ea23 0302 	bic.w	r3, r3, r2
   14b7e:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
   14b80:	f7ff ff82 	bl	14a88 <gpiote_pin_int_cfg>
}
   14b84:	bd70      	pop	{r4, r5, r6, pc}
    *p_pin = pin_number & 0x1F;
   14b86:	f005 051f 	and.w	r5, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   14b8a:	3580      	adds	r5, #128	; 0x80
   14b8c:	4e0e      	ldr	r6, [pc, #56]	; (14bc8 <gpio_nrfx_pin_interrupt_configure+0xa4>)
   14b8e:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   14b92:	f015 0f01 	tst.w	r5, #1
   14b96:	d0d0      	beq.n	14b3a <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
   14b98:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14b9c:	e7f2      	b.n	14b84 <gpio_nrfx_pin_interrupt_configure+0x60>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14b9e:	68e5      	ldr	r5, [r4, #12]
   14ba0:	2601      	movs	r6, #1
   14ba2:	408e      	lsls	r6, r1
   14ba4:	ea25 0506 	bic.w	r5, r5, r6
   14ba8:	e7ce      	b.n	14b48 <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   14baa:	6962      	ldr	r2, [r4, #20]
   14bac:	2501      	movs	r5, #1
   14bae:	408d      	lsls	r5, r1
   14bb0:	432a      	orrs	r2, r5
   14bb2:	e7d2      	b.n	14b5a <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   14bb4:	69a2      	ldr	r2, [r4, #24]
   14bb6:	2501      	movs	r5, #1
   14bb8:	408d      	lsls	r5, r1
   14bba:	432a      	orrs	r2, r5
   14bbc:	e7d6      	b.n	14b6c <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   14bbe:	6923      	ldr	r3, [r4, #16]
   14bc0:	2201      	movs	r2, #1
   14bc2:	408a      	lsls	r2, r1
   14bc4:	4313      	orrs	r3, r2
   14bc6:	e7da      	b.n	14b7e <gpio_nrfx_pin_interrupt_configure+0x5a>
   14bc8:	40842500 	.word	0x40842500

00014bcc <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   14bcc:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   14bce:	4b0b      	ldr	r3, [pc, #44]	; (14bfc <gpio_nrfx_init+0x30>)
   14bd0:	781b      	ldrb	r3, [r3, #0]
   14bd2:	b10b      	cbz	r3, 14bd8 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   14bd4:	2000      	movs	r0, #0
   14bd6:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
   14bd8:	4b08      	ldr	r3, [pc, #32]	; (14bfc <gpio_nrfx_init+0x30>)
   14bda:	2201      	movs	r2, #1
   14bdc:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   14bde:	2200      	movs	r2, #0
   14be0:	2105      	movs	r1, #5
   14be2:	2031      	movs	r0, #49	; 0x31
   14be4:	f7ff f8e6 	bl	13db4 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
   14be8:	2031      	movs	r0, #49	; 0x31
   14bea:	f7ff f8c5 	bl	13d78 <arch_irq_enable>
   14bee:	4b04      	ldr	r3, [pc, #16]	; (14c00 <gpio_nrfx_init+0x34>)
   14bf0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   14bf4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   14bf8:	e7ec      	b.n	14bd4 <gpio_nrfx_init+0x8>
   14bfa:	bf00      	nop
   14bfc:	20016c7e 	.word	0x20016c7e
   14c00:	40031000 	.word	0x40031000

00014c04 <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   14c04:	4b03      	ldr	r3, [pc, #12]	; (14c14 <nvmc_wait_ready+0x10>)
   14c06:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
#endif /* CONFIG_SOC_FLASH_NRF_UICR */
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
   14c0a:	f013 0f01 	tst.w	r3, #1
   14c0e:	d0f9      	beq.n	14c04 <nvmc_wait_ready>
	}
}
   14c10:	4770      	bx	lr
   14c12:	bf00      	nop
   14c14:	40039000 	.word	0x40039000

00014c18 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   14c18:	4b02      	ldr	r3, [pc, #8]	; (14c24 <flash_nrf_pages_layout+0xc>)
   14c1a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   14c1c:	2301      	movs	r3, #1
   14c1e:	6013      	str	r3, [r2, #0]
}
   14c20:	4770      	bx	lr
   14c22:	bf00      	nop
   14c24:	20015c60 	.word	0x20015c60

00014c28 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   14c28:	4800      	ldr	r0, [pc, #0]	; (14c2c <flash_nrf_get_parameters+0x4>)
   14c2a:	4770      	bx	lr
   14c2c:	00024730 	.word	0x00024730

00014c30 <flash_nrf_erase>:
{
   14c30:	b570      	push	{r4, r5, r6, lr}
   14c32:	460c      	mov	r4, r1
   14c34:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   14c36:	f00c fb15 	bl	21264 <nrfx_nvmc_flash_page_size_get>
   14c3a:	4606      	mov	r6, r0
	size_t flash_size = nrfx_nvmc_flash_size_get();
   14c3c:	f00c fb0e 	bl	2125c <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   14c40:	4284      	cmp	r4, r0
   14c42:	d225      	bcs.n	14c90 <flash_nrf_erase+0x60>
   14c44:	2c00      	cmp	r4, #0
   14c46:	db27      	blt.n	14c98 <flash_nrf_erase+0x68>
	    addr < 0 ||
   14c48:	42a8      	cmp	r0, r5
   14c4a:	d328      	bcc.n	14c9e <flash_nrf_erase+0x6e>
	    (addr) + len > flash_size) {
   14c4c:	1963      	adds	r3, r4, r5
	    len > flash_size ||
   14c4e:	4283      	cmp	r3, r0
   14c50:	d828      	bhi.n	14ca4 <flash_nrf_erase+0x74>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   14c52:	fbb4 f3f6 	udiv	r3, r4, r6
   14c56:	fb06 4313 	mls	r3, r6, r3, r4
   14c5a:	bb33      	cbnz	r3, 14caa <flash_nrf_erase+0x7a>
   14c5c:	fbb5 f3f6 	udiv	r3, r5, r6
   14c60:	fb06 5313 	mls	r3, r6, r3, r5
   14c64:	bb23      	cbnz	r3, 14cb0 <flash_nrf_erase+0x80>
		if (!n_pages) {
   14c66:	42b5      	cmp	r5, r6
   14c68:	d201      	bcs.n	14c6e <flash_nrf_erase+0x3e>
			return 0;
   14c6a:	2400      	movs	r4, #0
   14c6c:	e012      	b.n	14c94 <flash_nrf_erase+0x64>
	return z_impl_k_sem_take(sem, timeout);
   14c6e:	4e12      	ldr	r6, [pc, #72]	; (14cb8 <flash_nrf_erase+0x88>)
   14c70:	f04f 32ff 	mov.w	r2, #4294967295
   14c74:	f04f 33ff 	mov.w	r3, #4294967295
   14c78:	4630      	mov	r0, r6
   14c7a:	f006 fd03 	bl	1b684 <z_impl_k_sem_take>
		ret = erase(addr, size);
   14c7e:	4629      	mov	r1, r5
   14c80:	4620      	mov	r0, r4
   14c82:	f00a ffed 	bl	1fc60 <erase>
   14c86:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   14c88:	4630      	mov	r0, r6
   14c8a:	f006 fcd3 	bl	1b634 <z_impl_k_sem_give>
	return ret;
   14c8e:	e001      	b.n	14c94 <flash_nrf_erase+0x64>
		return -EINVAL;
   14c90:	f06f 0415 	mvn.w	r4, #21
}
   14c94:	4620      	mov	r0, r4
   14c96:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   14c98:	f06f 0415 	mvn.w	r4, #21
   14c9c:	e7fa      	b.n	14c94 <flash_nrf_erase+0x64>
   14c9e:	f06f 0415 	mvn.w	r4, #21
   14ca2:	e7f7      	b.n	14c94 <flash_nrf_erase+0x64>
   14ca4:	f06f 0415 	mvn.w	r4, #21
   14ca8:	e7f4      	b.n	14c94 <flash_nrf_erase+0x64>
			return -EINVAL;
   14caa:	f06f 0415 	mvn.w	r4, #21
   14cae:	e7f1      	b.n	14c94 <flash_nrf_erase+0x64>
   14cb0:	f06f 0415 	mvn.w	r4, #21
   14cb4:	e7ee      	b.n	14c94 <flash_nrf_erase+0x64>
   14cb6:	bf00      	nop
   14cb8:	20015c68 	.word	0x20015c68

00014cbc <flash_nrf_write>:
{
   14cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14cbe:	460c      	mov	r4, r1
   14cc0:	4616      	mov	r6, r2
   14cc2:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
   14cc4:	f00c faca 	bl	2125c <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   14cc8:	42a0      	cmp	r0, r4
   14cca:	d921      	bls.n	14d10 <flash_nrf_write+0x54>
   14ccc:	2c00      	cmp	r4, #0
   14cce:	db23      	blt.n	14d18 <flash_nrf_write+0x5c>
	    addr < 0 ||
   14cd0:	42a8      	cmp	r0, r5
   14cd2:	d324      	bcc.n	14d1e <flash_nrf_write+0x62>
	    (addr) + len > flash_size) {
   14cd4:	1963      	adds	r3, r4, r5
	    len > flash_size ||
   14cd6:	4283      	cmp	r3, r0
   14cd8:	d824      	bhi.n	14d24 <flash_nrf_write+0x68>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   14cda:	f014 0f03 	tst.w	r4, #3
   14cde:	d124      	bne.n	14d2a <flash_nrf_write+0x6e>
   14ce0:	f015 0f03 	tst.w	r5, #3
   14ce4:	d124      	bne.n	14d30 <flash_nrf_write+0x74>
	if (!len) {
   14ce6:	b90d      	cbnz	r5, 14cec <flash_nrf_write+0x30>
		return 0;
   14ce8:	2400      	movs	r4, #0
   14cea:	e013      	b.n	14d14 <flash_nrf_write+0x58>
	return z_impl_k_sem_take(sem, timeout);
   14cec:	4f12      	ldr	r7, [pc, #72]	; (14d38 <flash_nrf_write+0x7c>)
   14cee:	f04f 32ff 	mov.w	r2, #4294967295
   14cf2:	f04f 33ff 	mov.w	r3, #4294967295
   14cf6:	4638      	mov	r0, r7
   14cf8:	f006 fcc4 	bl	1b684 <z_impl_k_sem_take>
		ret = write(addr, data, len);
   14cfc:	462a      	mov	r2, r5
   14cfe:	4631      	mov	r1, r6
   14d00:	4620      	mov	r0, r4
   14d02:	f00a ffcc 	bl	1fc9e <write>
   14d06:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   14d08:	4638      	mov	r0, r7
   14d0a:	f006 fc93 	bl	1b634 <z_impl_k_sem_give>
	return ret;
   14d0e:	e001      	b.n	14d14 <flash_nrf_write+0x58>
		return -EINVAL;
   14d10:	f06f 0415 	mvn.w	r4, #21
}
   14d14:	4620      	mov	r0, r4
   14d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   14d18:	f06f 0415 	mvn.w	r4, #21
   14d1c:	e7fa      	b.n	14d14 <flash_nrf_write+0x58>
   14d1e:	f06f 0415 	mvn.w	r4, #21
   14d22:	e7f7      	b.n	14d14 <flash_nrf_write+0x58>
   14d24:	f06f 0415 	mvn.w	r4, #21
   14d28:	e7f4      	b.n	14d14 <flash_nrf_write+0x58>
		return -EINVAL;
   14d2a:	f06f 0415 	mvn.w	r4, #21
   14d2e:	e7f1      	b.n	14d14 <flash_nrf_write+0x58>
   14d30:	f06f 0415 	mvn.w	r4, #21
   14d34:	e7ee      	b.n	14d14 <flash_nrf_write+0x58>
   14d36:	bf00      	nop
   14d38:	20015c68 	.word	0x20015c68

00014d3c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   14d3c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   14d3e:	2201      	movs	r2, #1
   14d40:	4611      	mov	r1, r2
   14d42:	4806      	ldr	r0, [pc, #24]	; (14d5c <nrf_flash_init+0x20>)
   14d44:	f00d fe07 	bl	22956 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   14d48:	f00c fa90 	bl	2126c <nrfx_nvmc_flash_page_count_get>
   14d4c:	4c04      	ldr	r4, [pc, #16]	; (14d60 <nrf_flash_init+0x24>)
   14d4e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   14d50:	f00c fa88 	bl	21264 <nrfx_nvmc_flash_page_size_get>
   14d54:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   14d56:	2000      	movs	r0, #0
   14d58:	bd10      	pop	{r4, pc}
   14d5a:	bf00      	nop
   14d5c:	20015c68 	.word	0x20015c68
   14d60:	20015c60 	.word	0x20015c60

00014d64 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
   14d64:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
   14d66:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   14d68:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   14d6c:	d06f      	beq.n	14e4e <baudrate_set+0xea>
   14d6e:	d83a      	bhi.n	14de6 <baudrate_set+0x82>
   14d70:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   14d74:	d06e      	beq.n	14e54 <baudrate_set+0xf0>
   14d76:	d90a      	bls.n	14d8e <baudrate_set+0x2a>
   14d78:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   14d7c:	d075      	beq.n	14e6a <baudrate_set+0x106>
   14d7e:	d924      	bls.n	14dca <baudrate_set+0x66>
   14d80:	f647 2312 	movw	r3, #31250	; 0x7a12
   14d84:	4299      	cmp	r1, r3
   14d86:	d12b      	bne.n	14de0 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   14d88:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   14d8c:	e013      	b.n	14db6 <baudrate_set+0x52>
	switch (baudrate) {
   14d8e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   14d92:	d061      	beq.n	14e58 <baudrate_set+0xf4>
   14d94:	d907      	bls.n	14da6 <baudrate_set+0x42>
   14d96:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   14d9a:	d063      	beq.n	14e64 <baudrate_set+0x100>
   14d9c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   14da0:	d110      	bne.n	14dc4 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   14da2:	4b3c      	ldr	r3, [pc, #240]	; (14e94 <baudrate_set+0x130>)
   14da4:	e007      	b.n	14db6 <baudrate_set+0x52>
	switch (baudrate) {
   14da6:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   14daa:	d058      	beq.n	14e5e <baudrate_set+0xfa>
   14dac:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   14db0:	d105      	bne.n	14dbe <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   14db2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   14db6:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   14dba:	2000      	movs	r0, #0
   14dbc:	4770      	bx	lr
	switch (baudrate) {
   14dbe:	f06f 0015 	mvn.w	r0, #21
   14dc2:	4770      	bx	lr
   14dc4:	f06f 0015 	mvn.w	r0, #21
   14dc8:	4770      	bx	lr
   14dca:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   14dce:	d04e      	beq.n	14e6e <baudrate_set+0x10a>
   14dd0:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   14dd4:	d101      	bne.n	14dda <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   14dd6:	4b30      	ldr	r3, [pc, #192]	; (14e98 <baudrate_set+0x134>)
   14dd8:	e7ed      	b.n	14db6 <baudrate_set+0x52>
	switch (baudrate) {
   14dda:	f06f 0015 	mvn.w	r0, #21
   14dde:	4770      	bx	lr
   14de0:	f06f 0015 	mvn.w	r0, #21
   14de4:	4770      	bx	lr
   14de6:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   14dea:	d042      	beq.n	14e72 <baudrate_set+0x10e>
   14dec:	d909      	bls.n	14e02 <baudrate_set+0x9e>
   14dee:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   14df2:	d046      	beq.n	14e82 <baudrate_set+0x11e>
   14df4:	d91f      	bls.n	14e36 <baudrate_set+0xd2>
   14df6:	4b29      	ldr	r3, [pc, #164]	; (14e9c <baudrate_set+0x138>)
   14df8:	4299      	cmp	r1, r3
   14dfa:	d148      	bne.n	14e8e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   14dfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14e00:	e7d9      	b.n	14db6 <baudrate_set+0x52>
	switch (baudrate) {
   14e02:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   14e06:	d037      	beq.n	14e78 <baudrate_set+0x114>
   14e08:	d905      	bls.n	14e16 <baudrate_set+0xb2>
   14e0a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   14e0e:	d10f      	bne.n	14e30 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   14e10:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   14e14:	e7cf      	b.n	14db6 <baudrate_set+0x52>
	switch (baudrate) {
   14e16:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   14e1a:	4299      	cmp	r1, r3
   14e1c:	d02e      	beq.n	14e7c <baudrate_set+0x118>
   14e1e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   14e22:	d102      	bne.n	14e2a <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   14e24:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   14e28:	e7c5      	b.n	14db6 <baudrate_set+0x52>
	switch (baudrate) {
   14e2a:	f06f 0015 	mvn.w	r0, #21
   14e2e:	4770      	bx	lr
   14e30:	f06f 0015 	mvn.w	r0, #21
   14e34:	4770      	bx	lr
   14e36:	4b1a      	ldr	r3, [pc, #104]	; (14ea0 <baudrate_set+0x13c>)
   14e38:	4299      	cmp	r1, r3
   14e3a:	d025      	beq.n	14e88 <baudrate_set+0x124>
   14e3c:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   14e40:	d102      	bne.n	14e48 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   14e42:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   14e46:	e7b6      	b.n	14db6 <baudrate_set+0x52>
	switch (baudrate) {
   14e48:	f06f 0015 	mvn.w	r0, #21
   14e4c:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   14e4e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   14e52:	e7b0      	b.n	14db6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   14e54:	4b13      	ldr	r3, [pc, #76]	; (14ea4 <baudrate_set+0x140>)
   14e56:	e7ae      	b.n	14db6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   14e58:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   14e5c:	e7ab      	b.n	14db6 <baudrate_set+0x52>
	switch (baudrate) {
   14e5e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   14e62:	e7a8      	b.n	14db6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   14e64:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   14e68:	e7a5      	b.n	14db6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   14e6a:	4b0f      	ldr	r3, [pc, #60]	; (14ea8 <baudrate_set+0x144>)
   14e6c:	e7a3      	b.n	14db6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   14e6e:	4b0f      	ldr	r3, [pc, #60]	; (14eac <baudrate_set+0x148>)
   14e70:	e7a1      	b.n	14db6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   14e72:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   14e76:	e79e      	b.n	14db6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   14e78:	4b0d      	ldr	r3, [pc, #52]	; (14eb0 <baudrate_set+0x14c>)
   14e7a:	e79c      	b.n	14db6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   14e7c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   14e80:	e799      	b.n	14db6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   14e82:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   14e86:	e796      	b.n	14db6 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   14e88:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   14e8c:	e793      	b.n	14db6 <baudrate_set+0x52>
	switch (baudrate) {
   14e8e:	f06f 0015 	mvn.w	r0, #21
}
   14e92:	4770      	bx	lr
   14e94:	0013b000 	.word	0x0013b000
   14e98:	004ea000 	.word	0x004ea000
   14e9c:	000f4240 	.word	0x000f4240
   14ea0:	0003d090 	.word	0x0003d090
   14ea4:	00275000 	.word	0x00275000
   14ea8:	0075c000 	.word	0x0075c000
   14eac:	003af000 	.word	0x003af000
   14eb0:	013a9000 	.word	0x013a9000

00014eb4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   14eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14eb8:	4605      	mov	r5, r0
   14eba:	460f      	mov	r7, r1
	return dev->data;
   14ebc:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14ec0:	f00d fce2 	bl	22888 <k_is_in_isr>
   14ec4:	b920      	cbnz	r0, 14ed0 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   14ec6:	4b16      	ldr	r3, [pc, #88]	; (14f20 <uarte_nrfx_poll_out+0x6c>)
   14ec8:	781b      	ldrb	r3, [r3, #0]
   14eca:	b1ab      	cbz	r3, 14ef8 <uarte_nrfx_poll_out+0x44>
   14ecc:	2300      	movs	r3, #0
   14ece:	e000      	b.n	14ed2 <uarte_nrfx_poll_out+0x1e>
   14ed0:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
   14ed2:	b19b      	cbz	r3, 14efc <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
   14ed4:	f04f 0320 	mov.w	r3, #32
   14ed8:	f3ef 8411 	mrs	r4, BASEPRI
   14edc:	f383 8811 	msr	BASEPRI, r3
   14ee0:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
   14ee4:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   14ee6:	4628      	mov	r0, r5
   14ee8:	f00b f824 	bl	1ff34 <is_tx_ready>
   14eec:	b950      	cbnz	r0, 14f04 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
   14eee:	f384 8811 	msr	BASEPRI, r4
   14ef2:	f3bf 8f6f 	isb	sy
}
   14ef6:	e7ed      	b.n	14ed4 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   14ef8:	2301      	movs	r3, #1
   14efa:	e7ea      	b.n	14ed2 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   14efc:	4628      	mov	r0, r5
   14efe:	f00b f937 	bl	20170 <wait_tx_ready>
   14f02:	4606      	mov	r6, r0
	}

	data->char_out = c;
   14f04:	4641      	mov	r1, r8
   14f06:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   14f0a:	2201      	movs	r2, #1
   14f0c:	4628      	mov	r0, r5
   14f0e:	f00b f82b 	bl	1ff68 <tx_start>
	__asm__ volatile(
   14f12:	f386 8811 	msr	BASEPRI, r6
   14f16:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   14f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14f1e:	bf00      	nop
   14f20:	20016ed6 	.word	0x20016ed6

00014f24 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   14f24:	b538      	push	{r3, r4, r5, lr}
   14f26:	4605      	mov	r5, r0
   14f28:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   14f2a:	f101 0016 	add.w	r0, r1, #22
   14f2e:	f001 fce9 	bl	16904 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   14f32:	4b0a      	ldr	r3, [pc, #40]	; (14f5c <endtx_stoptx_ppi_init+0x38>)
   14f34:	4298      	cmp	r0, r3
   14f36:	d10e      	bne.n	14f56 <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   14f38:	7da3      	ldrb	r3, [r4, #22]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   14f3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   14f3e:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   14f42:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   14f46:	7da2      	ldrb	r2, [r4, #22]
   14f48:	2301      	movs	r3, #1
   14f4a:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   14f4c:	4a04      	ldr	r2, [pc, #16]	; (14f60 <endtx_stoptx_ppi_init+0x3c>)
   14f4e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   14f52:	2000      	movs	r0, #0
}
   14f54:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
   14f56:	f06f 0004 	mvn.w	r0, #4
   14f5a:	e7fb      	b.n	14f54 <endtx_stoptx_ppi_init+0x30>
   14f5c:	0bad0000 	.word	0x0bad0000
   14f60:	40017000 	.word	0x40017000

00014f64 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
   14f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14f68:	4606      	mov	r6, r0
   14f6a:	460c      	mov	r4, r1
	return dev->config;
   14f6c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14f6e:	681d      	ldr	r5, [r3, #0]
	return dev->data;
   14f70:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   14f72:	2300      	movs	r3, #0
   14f74:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   14f78:	6038      	str	r0, [r7, #0]

	nrf_gpio_pin_write(config->pseltxd, 1);
   14f7a:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
   14f7c:	f003 021f 	and.w	r2, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14f80:	2301      	movs	r3, #1
   14f82:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   14f84:	4a40      	ldr	r2, [pc, #256]	; (15088 <uarte_instance_init+0x124>)
   14f86:	6093      	str	r3, [r2, #8]
	nrf_gpio_cfg_output(config->pseltxd);
   14f88:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
   14f8a:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   14f8e:	3380      	adds	r3, #128	; 0x80
   14f90:	2103      	movs	r1, #3
   14f92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   14f96:	6863      	ldr	r3, [r4, #4]
   14f98:	f1b3 3fff 	cmp.w	r3, #4294967295
   14f9c:	d005      	beq.n	14faa <uarte_instance_init+0x46>
    *p_pin = pin_number & 0x1F;
   14f9e:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   14fa2:	3380      	adds	r3, #128	; 0x80
   14fa4:	210c      	movs	r1, #12
   14fa6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_PULLUP);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   14faa:	6822      	ldr	r2, [r4, #0]
   14fac:	6863      	ldr	r3, [r4, #4]
    p_reg->PSEL.TXD = pseltxd;
   14fae:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   14fb2:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   14fb6:	68a3      	ldr	r3, [r4, #8]
   14fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
   14fbc:	d006      	beq.n	14fcc <uarte_instance_init+0x68>
    *p_pin = pin_number & 0x1F;
   14fbe:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   14fc2:	3380      	adds	r3, #128	; 0x80
   14fc4:	4a30      	ldr	r2, [pc, #192]	; (15088 <uarte_instance_init+0x124>)
   14fc6:	210c      	movs	r1, #12
   14fc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_PULLUP);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   14fcc:	68e3      	ldr	r3, [r4, #12]
   14fce:	f1b3 3fff 	cmp.w	r3, #4294967295
   14fd2:	d00d      	beq.n	14ff0 <uarte_instance_init+0x8c>
    *p_pin = pin_number & 0x1F;
   14fd4:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   14fd8:	2201      	movs	r2, #1
   14fda:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
   14fde:	4a2a      	ldr	r2, [pc, #168]	; (15088 <uarte_instance_init+0x124>)
   14fe0:	6093      	str	r3, [r2, #8]
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
   14fe2:	68e3      	ldr	r3, [r4, #12]
    *p_pin = pin_number & 0x1F;
   14fe4:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   14fe8:	3380      	adds	r3, #128	; 0x80
   14fea:	2103      	movs	r1, #3
   14fec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   14ff0:	68e2      	ldr	r2, [r4, #12]
   14ff2:	68a3      	ldr	r3, [r4, #8]
    p_reg->PSEL.RTS = pselrts;
   14ff4:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   14ff8:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
   14ffc:	6931      	ldr	r1, [r6, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   14ffe:	3104      	adds	r1, #4
   15000:	4630      	mov	r0, r6
   15002:	f00a ff2a 	bl	1fe5a <uarte_nrfx_configure>
	if (err) {
   15006:	4680      	mov	r8, r0
   15008:	bb98      	cbnz	r0, 15072 <uarte_instance_init+0x10e>
	return dev->config;
   1500a:	6873      	ldr	r3, [r6, #4]
#ifdef CONFIG_PM_DEVICE
	data->pm_state = PM_DEVICE_STATE_ACTIVE;
#endif

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1500c:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1500e:	f013 0f08 	tst.w	r3, #8
   15012:	d131      	bne.n	15078 <uarte_instance_init+0x114>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   15014:	2308      	movs	r3, #8
   15016:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   1501a:	6863      	ldr	r3, [r4, #4]
   1501c:	f1b3 3fff 	cmp.w	r3, #4294967295
   15020:	d00c      	beq.n	1503c <uarte_instance_init+0xd8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15022:	2300      	movs	r3, #0
   15024:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   15028:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1502c:	f107 0315 	add.w	r3, r7, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   15030:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   15034:	2301      	movs	r3, #1
   15036:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1503a:	602b      	str	r3, [r5, #0]
	return dev->config;
   1503c:	6873      	ldr	r3, [r6, #4]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1503e:	685b      	ldr	r3, [r3, #4]
   15040:	f013 0f08 	tst.w	r3, #8
   15044:	d103      	bne.n	1504e <uarte_instance_init+0xea>
    p_reg->INTENSET = mask;
   15046:	f44f 7380 	mov.w	r3, #256	; 0x100
   1504a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	return dev->config;
   1504e:	6873      	ldr	r3, [r6, #4]
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   15050:	685b      	ldr	r3, [r3, #4]
   15052:	f013 0f10 	tst.w	r3, #16
   15056:	d003      	beq.n	15060 <uarte_instance_init+0xfc>
   15058:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1505c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   15060:	3714      	adds	r7, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   15062:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   15066:	2300      	movs	r3, #0
   15068:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1506c:	2301      	movs	r3, #1
   1506e:	60ab      	str	r3, [r5, #8]
   15070:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   15072:	4640      	mov	r0, r8
   15074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   15078:	4639      	mov	r1, r7
   1507a:	4628      	mov	r0, r5
   1507c:	f7ff ff52 	bl	14f24 <endtx_stoptx_ppi_init>
		if (err < 0) {
   15080:	2800      	cmp	r0, #0
   15082:	dac7      	bge.n	15014 <uarte_instance_init+0xb0>
			return err;
   15084:	4680      	mov	r8, r0
   15086:	e7f4      	b.n	15072 <uarte_instance_init+0x10e>
   15088:	40842500 	.word	0x40842500

0001508c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1508c:	b530      	push	{r4, r5, lr}
   1508e:	b085      	sub	sp, #20
   15090:	4605      	mov	r5, r0
   15092:	4b0a      	ldr	r3, [pc, #40]	; (150bc <uarte_0_init+0x30>)
   15094:	466c      	mov	r4, sp
   15096:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   15098:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1509c:	2200      	movs	r2, #0
   1509e:	2101      	movs	r1, #1
   150a0:	2008      	movs	r0, #8
   150a2:	f7fe fe87 	bl	13db4 <z_arm_irq_priority_set>
   150a6:	2008      	movs	r0, #8
   150a8:	f7fe fe66 	bl	13d78 <arch_irq_enable>
   150ac:	2201      	movs	r2, #1
   150ae:	4621      	mov	r1, r4
   150b0:	4628      	mov	r0, r5
   150b2:	f7ff ff57 	bl	14f64 <uarte_instance_init>
   150b6:	b005      	add	sp, #20
   150b8:	bd30      	pop	{r4, r5, pc}
   150ba:	bf00      	nop
   150bc:	00024150 	.word	0x00024150

000150c0 <_nrf_modem_lib_init>:
	},
#endif
};

static int _nrf_modem_lib_init(const struct device *unused)
{
   150c0:	b510      	push	{r4, lr}
	if (!first_time_init) {
   150c2:	4b1d      	ldr	r3, [pc, #116]	; (15138 <_nrf_modem_lib_init+0x78>)
   150c4:	781b      	ldrb	r3, [r3, #0]
   150c6:	b1c3      	cbz	r3, 150fa <_nrf_modem_lib_init+0x3a>
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   150c8:	2200      	movs	r2, #0
   150ca:	4611      	mov	r1, r2
   150cc:	202a      	movs	r0, #42	; 0x2a
   150ce:	f7fe fe71 	bl	13db4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   150d2:	2100      	movs	r1, #0
   150d4:	4819      	ldr	r0, [pc, #100]	; (1513c <_nrf_modem_lib_init+0x7c>)
   150d6:	f005 fde1 	bl	1ac9c <nrf_modem_init>
   150da:	4b19      	ldr	r3, [pc, #100]	; (15140 <_nrf_modem_lib_init+0x80>)
   150dc:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   150de:	f04f 32ff 	mov.w	r2, #4294967295
   150e2:	f04f 33ff 	mov.w	r3, #4294967295
   150e6:	4817      	ldr	r0, [pc, #92]	; (15144 <_nrf_modem_lib_init+0x84>)
   150e8:	f006 f9d6 	bl	1b498 <z_impl_k_mutex_lock>
	return list->head;
   150ec:	4b16      	ldr	r3, [pc, #88]	; (15148 <_nrf_modem_lib_init+0x88>)
   150ee:	6818      	ldr	r0, [r3, #0]

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   150f0:	b1e0      	cbz	r0, 1512c <_nrf_modem_lib_init+0x6c>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   150f2:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   150f4:	b178      	cbz	r0, 15116 <_nrf_modem_lib_init+0x56>
	return node->next;
   150f6:	6804      	ldr	r4, [r0, #0]
   150f8:	e00d      	b.n	15116 <_nrf_modem_lib_init+0x56>
	list->head = NULL;
   150fa:	4b13      	ldr	r3, [pc, #76]	; (15148 <_nrf_modem_lib_init+0x88>)
   150fc:	2200      	movs	r2, #0
   150fe:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   15100:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_init(mutex);
   15102:	4810      	ldr	r0, [pc, #64]	; (15144 <_nrf_modem_lib_init+0x84>)
   15104:	f00d fc20 	bl	22948 <z_impl_k_mutex_init>
		first_time_init = true;
   15108:	4b0b      	ldr	r3, [pc, #44]	; (15138 <_nrf_modem_lib_init+0x78>)
   1510a:	2201      	movs	r2, #1
   1510c:	701a      	strb	r2, [r3, #0]
   1510e:	e7db      	b.n	150c8 <_nrf_modem_lib_init+0x8>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   15110:	4623      	mov	r3, r4
   15112:	4620      	mov	r0, r4
   15114:	461c      	mov	r4, r3
   15116:	b148      	cbz	r0, 1512c <_nrf_modem_lib_init+0x6c>
					     next_thread, node) {
			k_sem_give(&thread->sem);
   15118:	3004      	adds	r0, #4
	z_impl_k_sem_give(sem);
   1511a:	f006 fa8b 	bl	1b634 <z_impl_k_sem_give>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   1511e:	2c00      	cmp	r4, #0
   15120:	d0f6      	beq.n	15110 <_nrf_modem_lib_init+0x50>
   15122:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   15124:	2c00      	cmp	r4, #0
   15126:	d0f4      	beq.n	15112 <_nrf_modem_lib_init+0x52>
	return node->next;
   15128:	6823      	ldr	r3, [r4, #0]
   1512a:	e7f2      	b.n	15112 <_nrf_modem_lib_init+0x52>
	return z_impl_k_mutex_unlock(mutex);
   1512c:	4805      	ldr	r0, [pc, #20]	; (15144 <_nrf_modem_lib_init+0x84>)
   1512e:	f006 fa3d 	bl	1b5ac <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   15132:	2000      	movs	r0, #0
   15134:	bd10      	pop	{r4, pc}
   15136:	bf00      	nop
   15138:	20016c7f 	.word	0x20016c7f
   1513c:	000247a4 	.word	0x000247a4
   15140:	20015ca8 	.word	0x20015ca8
   15144:	20015cb4 	.word	0x20015cb4
   15148:	20015cac 	.word	0x20015cac

0001514c <nrf_modem_lib_shutdown_wait>:

void nrf_modem_lib_shutdown_wait(void)
{
   1514c:	b5d0      	push	{r4, r6, r7, lr}
   1514e:	b088      	sub	sp, #32
	return z_impl_k_sem_init(sem, initial_count, limit);
   15150:	2201      	movs	r2, #1
   15152:	2100      	movs	r1, #0
   15154:	a802      	add	r0, sp, #8
   15156:	f00d fbfe 	bl	22956 <z_impl_k_sem_init>
	return z_impl_k_mutex_lock(mutex, timeout);
   1515a:	f04f 32ff 	mov.w	r2, #4294967295
   1515e:	f04f 33ff 	mov.w	r3, #4294967295
   15162:	4824      	ldr	r0, [pc, #144]	; (151f4 <nrf_modem_lib_shutdown_wait+0xa8>)
   15164:	f006 f998 	bl	1b498 <z_impl_k_mutex_lock>
	parent->next = child;
   15168:	2300      	movs	r3, #0
   1516a:	9301      	str	r3, [sp, #4]
	return list->tail;
   1516c:	4b22      	ldr	r3, [pc, #136]	; (151f8 <nrf_modem_lib_shutdown_wait+0xac>)
   1516e:	685b      	ldr	r3, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   15170:	b1fb      	cbz	r3, 151b2 <nrf_modem_lib_shutdown_wait+0x66>
	parent->next = child;
   15172:	aa01      	add	r2, sp, #4
   15174:	601a      	str	r2, [r3, #0]
	list->tail = node;
   15176:	4b20      	ldr	r3, [pc, #128]	; (151f8 <nrf_modem_lib_shutdown_wait+0xac>)
   15178:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
   1517a:	4c1e      	ldr	r4, [pc, #120]	; (151f4 <nrf_modem_lib_shutdown_wait+0xa8>)
   1517c:	4620      	mov	r0, r4
   1517e:	f006 fa15 	bl	1b5ac <z_impl_k_mutex_unlock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_append(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);

	(void)k_sem_take(&thread.sem, K_FOREVER);
   15182:	f04f 36ff 	mov.w	r6, #4294967295
   15186:	f04f 37ff 	mov.w	r7, #4294967295
	return z_impl_k_sem_take(sem, timeout);
   1518a:	4632      	mov	r2, r6
   1518c:	463b      	mov	r3, r7
   1518e:	a802      	add	r0, sp, #8
   15190:	f006 fa78 	bl	1b684 <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   15194:	4632      	mov	r2, r6
   15196:	463b      	mov	r3, r7
   15198:	4620      	mov	r0, r4
   1519a:	f006 f97d 	bl	1b498 <z_impl_k_mutex_lock>
	return list->head;
   1519e:	4b16      	ldr	r3, [pc, #88]	; (151f8 <nrf_modem_lib_shutdown_wait+0xac>)
   151a0:	681b      	ldr	r3, [r3, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   151a2:	2100      	movs	r1, #0
   151a4:	b1a3      	cbz	r3, 151d0 <nrf_modem_lib_shutdown_wait+0x84>
   151a6:	aa01      	add	r2, sp, #4
   151a8:	4293      	cmp	r3, r2
   151aa:	d007      	beq.n	151bc <nrf_modem_lib_shutdown_wait+0x70>
   151ac:	4619      	mov	r1, r3
   151ae:	681b      	ldr	r3, [r3, #0]
   151b0:	e7f8      	b.n	151a4 <nrf_modem_lib_shutdown_wait+0x58>
	list->tail = node;
   151b2:	4b11      	ldr	r3, [pc, #68]	; (151f8 <nrf_modem_lib_shutdown_wait+0xac>)
   151b4:	aa01      	add	r2, sp, #4
   151b6:	605a      	str	r2, [r3, #4]
	list->head = node;
   151b8:	601a      	str	r2, [r3, #0]
}
   151ba:	e7de      	b.n	1517a <nrf_modem_lib_shutdown_wait+0x2e>
Z_GENLIST_REMOVE(slist, snode)
   151bc:	b169      	cbz	r1, 151da <nrf_modem_lib_shutdown_wait+0x8e>
	return node->next;
   151be:	9b01      	ldr	r3, [sp, #4]
	parent->next = child;
   151c0:	600b      	str	r3, [r1, #0]
	return list->tail;
   151c2:	4b0d      	ldr	r3, [pc, #52]	; (151f8 <nrf_modem_lib_shutdown_wait+0xac>)
   151c4:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   151c6:	ab01      	add	r3, sp, #4
   151c8:	429a      	cmp	r2, r3
   151ca:	d010      	beq.n	151ee <nrf_modem_lib_shutdown_wait+0xa2>
	parent->next = child;
   151cc:	2300      	movs	r3, #0
   151ce:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   151d0:	4808      	ldr	r0, [pc, #32]	; (151f4 <nrf_modem_lib_shutdown_wait+0xa8>)
   151d2:	f006 f9eb 	bl	1b5ac <z_impl_k_mutex_unlock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   151d6:	b008      	add	sp, #32
   151d8:	bdd0      	pop	{r4, r6, r7, pc}
	return node->next;
   151da:	9a01      	ldr	r2, [sp, #4]
	list->head = node;
   151dc:	4b06      	ldr	r3, [pc, #24]	; (151f8 <nrf_modem_lib_shutdown_wait+0xac>)
   151de:	601a      	str	r2, [r3, #0]
	return list->tail;
   151e0:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   151e2:	ab01      	add	r3, sp, #4
   151e4:	4299      	cmp	r1, r3
   151e6:	d1f1      	bne.n	151cc <nrf_modem_lib_shutdown_wait+0x80>
	list->tail = node;
   151e8:	4b03      	ldr	r3, [pc, #12]	; (151f8 <nrf_modem_lib_shutdown_wait+0xac>)
   151ea:	605a      	str	r2, [r3, #4]
}
   151ec:	e7ee      	b.n	151cc <nrf_modem_lib_shutdown_wait+0x80>
	list->tail = node;
   151ee:	4b02      	ldr	r3, [pc, #8]	; (151f8 <nrf_modem_lib_shutdown_wait+0xac>)
   151f0:	6059      	str	r1, [r3, #4]
}
   151f2:	e7eb      	b.n	151cc <nrf_modem_lib_shutdown_wait+0x80>
   151f4:	20015cb4 	.word	0x20015cb4
   151f8:	20015cac 	.word	0x20015cac

000151fc <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   151fc:	b430      	push	{r4, r5}
   151fe:	4604      	mov	r4, r0
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
	int entry_age, oldest_entry_age = 0;
   15200:	2500      	movs	r5, #0
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   15202:	4811      	ldr	r0, [pc, #68]	; (15248 <thread_monitor_entry_get+0x4c>)
	struct thread_monitor_entry *entry = thread_event_monitor;
   15204:	4603      	mov	r3, r0

	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   15206:	e000      	b.n	1520a <thread_monitor_entry_get+0xe>
   15208:	3308      	adds	r3, #8
   1520a:	b19b      	cbz	r3, 15234 <thread_monitor_entry_get+0x38>
   1520c:	4a0e      	ldr	r2, [pc, #56]	; (15248 <thread_monitor_entry_get+0x4c>)
   1520e:	4293      	cmp	r3, r2
   15210:	d310      	bcc.n	15234 <thread_monitor_entry_get+0x38>
   15212:	3250      	adds	r2, #80	; 0x50
   15214:	4293      	cmp	r3, r2
   15216:	d20d      	bcs.n	15234 <thread_monitor_entry_get+0x38>
		if (entry->id == id) {
   15218:	681a      	ldr	r2, [r3, #0]
   1521a:	42a2      	cmp	r2, r4
   1521c:	d011      	beq.n	15242 <thread_monitor_entry_get+0x46>
			return entry;
		} else if (entry->id == 0) {
   1521e:	b142      	cbz	r2, 15232 <thread_monitor_entry_get+0x36>
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   15220:	4a0a      	ldr	r2, [pc, #40]	; (1524c <thread_monitor_entry_get+0x50>)
   15222:	6812      	ldr	r2, [r2, #0]
   15224:	6859      	ldr	r1, [r3, #4]
   15226:	1a52      	subs	r2, r2, r1
		if (entry_age > oldest_entry_age) {
   15228:	4295      	cmp	r5, r2
   1522a:	daed      	bge.n	15208 <thread_monitor_entry_get+0xc>
			oldest_entry_age = entry_age;
   1522c:	4615      	mov	r5, r2
			new_entry = entry;
   1522e:	4618      	mov	r0, r3
   15230:	e7ea      	b.n	15208 <thread_monitor_entry_get+0xc>
			new_entry = entry;
   15232:	4618      	mov	r0, r3
		}
	}

	new_entry->id = id;
   15234:	6004      	str	r4, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   15236:	4b05      	ldr	r3, [pc, #20]	; (1524c <thread_monitor_entry_get+0x50>)
   15238:	681b      	ldr	r3, [r3, #0]
   1523a:	3b01      	subs	r3, #1
   1523c:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   1523e:	bc30      	pop	{r4, r5}
   15240:	4770      	bx	lr
			return entry;
   15242:	4618      	mov	r0, r3
   15244:	e7fb      	b.n	1523e <thread_monitor_entry_get+0x42>
   15246:	bf00      	nop
   15248:	20015d20 	.word	0x20015d20
   1524c:	20015cfc 	.word	0x20015cfc

00015250 <thread_monitor_entry_update>:

/* Update thread monitor entry RPC counter. */
static void thread_monitor_entry_update(struct thread_monitor_entry *entry)
{
	entry->cnt = rpc_event_cnt;
   15250:	4b01      	ldr	r3, [pc, #4]	; (15258 <thread_monitor_entry_update+0x8>)
   15252:	681b      	ldr	r3, [r3, #0]
   15254:	6043      	str	r3, [r0, #4]
}
   15256:	4770      	bx	lr
   15258:	20015cfc 	.word	0x20015cfc

0001525c <can_thread_sleep>:
/* Verify that thread can be put into sleep (no RPC event occured in a
 * meantime), or whether we should return to nrf_modem_lib to re-verify if a sleep is
 * needed.
 */
static bool can_thread_sleep(struct thread_monitor_entry *entry)
{
   1525c:	b508      	push	{r3, lr}
	bool allow_to_sleep = true;

	if (rpc_event_cnt != entry->cnt) {
   1525e:	6842      	ldr	r2, [r0, #4]
   15260:	4b04      	ldr	r3, [pc, #16]	; (15274 <can_thread_sleep+0x18>)
   15262:	681b      	ldr	r3, [r3, #0]
   15264:	429a      	cmp	r2, r3
   15266:	d101      	bne.n	1526c <can_thread_sleep+0x10>
	bool allow_to_sleep = true;
   15268:	2001      	movs	r0, #1
		thread_monitor_entry_update(entry);
		allow_to_sleep = false;
	}

	return allow_to_sleep;
}
   1526a:	bd08      	pop	{r3, pc}
		thread_monitor_entry_update(entry);
   1526c:	f7ff fff0 	bl	15250 <thread_monitor_entry_update>
		allow_to_sleep = false;
   15270:	2000      	movs	r0, #0
   15272:	e7fa      	b.n	1526a <can_thread_sleep+0xe>
   15274:	20015cfc 	.word	0x20015cfc

00015278 <sleeping_thread_add>:

/* Add thread to the sleeping threads list. Will return information whether
 * the thread was allowed to sleep or not.
 */
static bool sleeping_thread_add(struct sleeping_thread *thread)
{
   15278:	b538      	push	{r3, r4, r5, lr}
   1527a:	4604      	mov	r4, r0
	__asm__ volatile(
   1527c:	f04f 0320 	mov.w	r3, #32
   15280:	f3ef 8511 	mrs	r5, BASEPRI
   15284:	f383 8811 	msr	BASEPRI, r3
   15288:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1528c:	f006 fde2 	bl	1be54 <z_impl_k_current_get>
	bool allow_to_sleep = false;
	struct thread_monitor_entry *entry;

	uint32_t key = irq_lock();

	entry = thread_monitor_entry_get(k_current_get());
   15290:	f7ff ffb4 	bl	151fc <thread_monitor_entry_get>

	if (can_thread_sleep(entry)) {
   15294:	f7ff ffe2 	bl	1525c <can_thread_sleep>
   15298:	b138      	cbz	r0, 152aa <_flash_used+0xa>
	parent->next = child;
   1529a:	2300      	movs	r3, #0
   1529c:	6023      	str	r3, [r4, #0]
	return list->tail;
   1529e:	4b07      	ldr	r3, [pc, #28]	; (152bc <_flash_used+0x1c>)
   152a0:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   152a2:	b13b      	cbz	r3, 152b4 <_flash_used+0x14>
	parent->next = child;
   152a4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   152a6:	4b05      	ldr	r3, [pc, #20]	; (152bc <_flash_used+0x1c>)
   152a8:	605c      	str	r4, [r3, #4]
	__asm__ volatile(
   152aa:	f385 8811 	msr	BASEPRI, r5
   152ae:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return allow_to_sleep;
}
   152b2:	bd38      	pop	{r3, r4, r5, pc}
   152b4:	4b01      	ldr	r3, [pc, #4]	; (152bc <_flash_used+0x1c>)
   152b6:	605c      	str	r4, [r3, #4]
	list->head = node;
   152b8:	601c      	str	r4, [r3, #0]
}
   152ba:	e7f6      	b.n	152aa <_flash_used+0xa>
   152bc:	20015d18 	.word	0x20015d18

000152c0 <sleeping_thread_remove>:

/* Remove a thread form the sleeping threads list. */
static void sleeping_thread_remove(struct sleeping_thread *thread)
{
   152c0:	b510      	push	{r4, lr}
	__asm__ volatile(
   152c2:	f04f 0320 	mov.w	r3, #32
   152c6:	f3ef 8411 	mrs	r4, BASEPRI
   152ca:	f383 8811 	msr	BASEPRI, r3
   152ce:	f3bf 8f6f 	isb	sy
	struct thread_monitor_entry *entry;

	uint32_t key = irq_lock();

	sys_slist_find_and_remove(&sleeping_threads, &thread->node);
   152d2:	4601      	mov	r1, r0
	return list->head;
   152d4:	4b14      	ldr	r3, [pc, #80]	; (15328 <sleeping_thread_remove+0x68>)
   152d6:	681b      	ldr	r3, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   152d8:	2200      	movs	r2, #0
   152da:	b16b      	cbz	r3, 152f8 <sleeping_thread_remove+0x38>
   152dc:	4299      	cmp	r1, r3
   152de:	d002      	beq.n	152e6 <sleeping_thread_remove+0x26>
   152e0:	461a      	mov	r2, r3
   152e2:	681b      	ldr	r3, [r3, #0]
   152e4:	e7f9      	b.n	152da <sleeping_thread_remove+0x1a>
Z_GENLIST_REMOVE(slist, snode)
   152e6:	b192      	cbz	r2, 1530e <sleeping_thread_remove+0x4e>
	return node->next;
   152e8:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   152ea:	6013      	str	r3, [r2, #0]
	return list->tail;
   152ec:	4b0e      	ldr	r3, [pc, #56]	; (15328 <sleeping_thread_remove+0x68>)
   152ee:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   152f0:	4298      	cmp	r0, r3
   152f2:	d015      	beq.n	15320 <sleeping_thread_remove+0x60>
	parent->next = child;
   152f4:	2300      	movs	r3, #0
   152f6:	6003      	str	r3, [r0, #0]
   152f8:	f006 fdac 	bl	1be54 <z_impl_k_current_get>

	entry = thread_monitor_entry_get(k_current_get());
   152fc:	f7ff ff7e 	bl	151fc <thread_monitor_entry_get>
	thread_monitor_entry_update(entry);
   15300:	f7ff ffa6 	bl	15250 <thread_monitor_entry_update>
	__asm__ volatile(
   15304:	f384 8811 	msr	BASEPRI, r4
   15308:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1530c:	bd10      	pop	{r4, pc}
	return node->next;
   1530e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   15310:	4b05      	ldr	r3, [pc, #20]	; (15328 <sleeping_thread_remove+0x68>)
   15312:	601a      	str	r2, [r3, #0]
	return list->tail;
   15314:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   15316:	4298      	cmp	r0, r3
   15318:	d1ec      	bne.n	152f4 <sleeping_thread_remove+0x34>
	list->tail = node;
   1531a:	4b03      	ldr	r3, [pc, #12]	; (15328 <sleeping_thread_remove+0x68>)
   1531c:	605a      	str	r2, [r3, #4]
}
   1531e:	e7e9      	b.n	152f4 <sleeping_thread_remove+0x34>
	list->tail = node;
   15320:	4b01      	ldr	r3, [pc, #4]	; (15328 <sleeping_thread_remove+0x68>)
   15322:	605a      	str	r2, [r3, #4]
}
   15324:	e7e6      	b.n	152f4 <sleeping_thread_remove+0x34>
   15326:	bf00      	nop
   15328:	20015d18 	.word	0x20015d18

0001532c <rpc_proxy_irq_handler>:
void nrf_modem_os_trace_irq_clear(void)
{
	NVIC_ClearPendingIRQ(TRACE_IRQ);
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1532c:	4668      	mov	r0, sp
   1532e:	f020 0107 	bic.w	r1, r0, #7
   15332:	468d      	mov	sp, r1
   15334:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   15336:	4b10      	ldr	r3, [pc, #64]	; (15378 <rpc_proxy_irq_handler+0x4c>)
   15338:	e8d3 2fef 	ldaex	r2, [r3]
   1533c:	3201      	adds	r2, #1
   1533e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   15342:	2900      	cmp	r1, #0
   15344:	d1f8      	bne.n	15338 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	nrf_modem_os_application_irq_handler();
   15346:	f001 fe25 	bl	16f94 <nrf_modem_os_application_irq_handler>
	return list->head;
   1534a:	4b0c      	ldr	r3, [pc, #48]	; (1537c <rpc_proxy_irq_handler+0x50>)
   1534c:	681c      	ldr	r4, [r3, #0]
   1534e:	e000      	b.n	15352 <rpc_proxy_irq_handler+0x26>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   15350:	461c      	mov	r4, r3

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   15352:	b144      	cbz	r4, 15366 <rpc_proxy_irq_handler+0x3a>
		k_sem_give(&thread->sem);
   15354:	1d20      	adds	r0, r4, #4
	z_impl_k_sem_give(sem);
   15356:	f006 f96d 	bl	1b634 <z_impl_k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1535a:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1535c:	2c00      	cmp	r4, #0
   1535e:	d0f7      	beq.n	15350 <rpc_proxy_irq_handler+0x24>
	return node->next;
   15360:	6823      	ldr	r3, [r4, #0]
   15362:	2b00      	cmp	r3, #0
   15364:	d1f4      	bne.n	15350 <rpc_proxy_irq_handler+0x24>
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   15366:	f7fe fd3b 	bl	13de0 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1536a:	f7fe ff1b 	bl	141a4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   1536e:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   15372:	4685      	mov	sp, r0
   15374:	4770      	bx	lr
   15376:	bf00      	nop
   15378:	20015cfc 	.word	0x20015cfc
   1537c:	20015d18 	.word	0x20015d18

00015380 <nrf_modem_os_errno_set>:
{
   15380:	b508      	push	{r3, lr}
	switch (err_code) {
   15382:	3801      	subs	r0, #1
   15384:	2880      	cmp	r0, #128	; 0x80
   15386:	f200 8145 	bhi.w	15614 <nrf_modem_os_errno_set+0x294>
   1538a:	e8df f010 	tbh	[pc, r0, lsl #1]
   1538e:	0081      	.short	0x0081
   15390:	01430086 	.word	0x01430086
   15394:	008b0143 	.word	0x008b0143
   15398:	01430143 	.word	0x01430143
   1539c:	00950090 	.word	0x00950090
   153a0:	01430143 	.word	0x01430143
   153a4:	009f009a 	.word	0x009f009a
   153a8:	014300a4 	.word	0x014300a4
   153ac:	01430143 	.word	0x01430143
   153b0:	01430143 	.word	0x01430143
   153b4:	01430143 	.word	0x01430143
   153b8:	014300a9 	.word	0x014300a9
   153bc:	014300ae 	.word	0x014300ae
   153c0:	01430143 	.word	0x01430143
   153c4:	01430143 	.word	0x01430143
   153c8:	01430143 	.word	0x01430143
   153cc:	01430143 	.word	0x01430143
   153d0:	00b30143 	.word	0x00b30143
   153d4:	00b80143 	.word	0x00b80143
   153d8:	01430143 	.word	0x01430143
   153dc:	00bd0139 	.word	0x00bd0139
   153e0:	00c700c2 	.word	0x00c700c2
   153e4:	00d100cc 	.word	0x00d100cc
   153e8:	00d60143 	.word	0x00d60143
   153ec:	014300db 	.word	0x014300db
   153f0:	00e500e0 	.word	0x00e500e0
   153f4:	013e00ea 	.word	0x013e00ea
   153f8:	014300ef 	.word	0x014300ef
   153fc:	00f900f4 	.word	0x00f900f4
   15400:	01430143 	.word	0x01430143
   15404:	010300fe 	.word	0x010300fe
   15408:	01430143 	.word	0x01430143
   1540c:	01430143 	.word	0x01430143
   15410:	01430143 	.word	0x01430143
   15414:	01430143 	.word	0x01430143
   15418:	01430143 	.word	0x01430143
   1541c:	01430143 	.word	0x01430143
   15420:	01430143 	.word	0x01430143
   15424:	01430143 	.word	0x01430143
   15428:	01430143 	.word	0x01430143
   1542c:	01430143 	.word	0x01430143
   15430:	01430143 	.word	0x01430143
   15434:	01430143 	.word	0x01430143
   15438:	01430143 	.word	0x01430143
   1543c:	01430143 	.word	0x01430143
   15440:	01430143 	.word	0x01430143
   15444:	01430143 	.word	0x01430143
   15448:	01430143 	.word	0x01430143
   1544c:	01430143 	.word	0x01430143
   15450:	01430143 	.word	0x01430143
   15454:	01430143 	.word	0x01430143
   15458:	01430143 	.word	0x01430143
   1545c:	01080143 	.word	0x01080143
   15460:	01430143 	.word	0x01430143
   15464:	01430143 	.word	0x01430143
   15468:	01430143 	.word	0x01430143
   1546c:	0143010d 	.word	0x0143010d
   15470:	01120117 	.word	0x01120117
   15474:	01430143 	.word	0x01430143
   15478:	01430143 	.word	0x01430143
   1547c:	01430143 	.word	0x01430143
   15480:	01430143 	.word	0x01430143
   15484:	011c0143 	.word	0x011c0143
   15488:	01270121 	.word	0x01270121
   1548c:	0133012d 	.word	0x0133012d
		errno = EPERM;
   15490:	f00a fb57 	bl	1fb42 <__errno>
   15494:	2301      	movs	r3, #1
   15496:	6003      	str	r3, [r0, #0]
}
   15498:	bd08      	pop	{r3, pc}
		errno = ENOENT;
   1549a:	f00a fb52 	bl	1fb42 <__errno>
   1549e:	2302      	movs	r3, #2
   154a0:	6003      	str	r3, [r0, #0]
		break;
   154a2:	e7f9      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EIO;
   154a4:	f00a fb4d 	bl	1fb42 <__errno>
   154a8:	2305      	movs	r3, #5
   154aa:	6003      	str	r3, [r0, #0]
		break;
   154ac:	e7f4      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = ENOEXEC;
   154ae:	f00a fb48 	bl	1fb42 <__errno>
   154b2:	2308      	movs	r3, #8
   154b4:	6003      	str	r3, [r0, #0]
		break;
   154b6:	e7ef      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EBADF;
   154b8:	f00a fb43 	bl	1fb42 <__errno>
   154bc:	2309      	movs	r3, #9
   154be:	6003      	str	r3, [r0, #0]
		break;
   154c0:	e7ea      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = ENOMEM;
   154c2:	f00a fb3e 	bl	1fb42 <__errno>
   154c6:	230c      	movs	r3, #12
   154c8:	6003      	str	r3, [r0, #0]
		break;
   154ca:	e7e5      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EACCES;
   154cc:	f00a fb39 	bl	1fb42 <__errno>
   154d0:	230d      	movs	r3, #13
   154d2:	6003      	str	r3, [r0, #0]
		break;
   154d4:	e7e0      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EFAULT;
   154d6:	f00a fb34 	bl	1fb42 <__errno>
   154da:	230e      	movs	r3, #14
   154dc:	6003      	str	r3, [r0, #0]
		break;
   154de:	e7db      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EINVAL;
   154e0:	f00a fb2f 	bl	1fb42 <__errno>
   154e4:	2316      	movs	r3, #22
   154e6:	6003      	str	r3, [r0, #0]
		break;
   154e8:	e7d6      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EMFILE;
   154ea:	f00a fb2a 	bl	1fb42 <__errno>
   154ee:	2318      	movs	r3, #24
   154f0:	6003      	str	r3, [r0, #0]
		break;
   154f2:	e7d1      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EAGAIN;
   154f4:	f00a fb25 	bl	1fb42 <__errno>
   154f8:	230b      	movs	r3, #11
   154fa:	6003      	str	r3, [r0, #0]
		break;
   154fc:	e7cc      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EDOM;
   154fe:	f00a fb20 	bl	1fb42 <__errno>
   15502:	2321      	movs	r3, #33	; 0x21
   15504:	6003      	str	r3, [r0, #0]
		break;
   15506:	e7c7      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EPROTOTYPE;
   15508:	f00a fb1b 	bl	1fb42 <__errno>
   1550c:	236b      	movs	r3, #107	; 0x6b
   1550e:	6003      	str	r3, [r0, #0]
		break;
   15510:	e7c2      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = ENOPROTOOPT;
   15512:	f00a fb16 	bl	1fb42 <__errno>
   15516:	236d      	movs	r3, #109	; 0x6d
   15518:	6003      	str	r3, [r0, #0]
		break;
   1551a:	e7bd      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EPROTONOSUPPORT;
   1551c:	f00a fb11 	bl	1fb42 <__errno>
   15520:	237b      	movs	r3, #123	; 0x7b
   15522:	6003      	str	r3, [r0, #0]
		break;
   15524:	e7b8      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = ESOCKTNOSUPPORT;
   15526:	f00a fb0c 	bl	1fb42 <__errno>
   1552a:	237c      	movs	r3, #124	; 0x7c
   1552c:	6003      	str	r3, [r0, #0]
		break;
   1552e:	e7b3      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EOPNOTSUPP;
   15530:	f00a fb07 	bl	1fb42 <__errno>
   15534:	235f      	movs	r3, #95	; 0x5f
   15536:	6003      	str	r3, [r0, #0]
		break;
   15538:	e7ae      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EAFNOSUPPORT;
   1553a:	f00a fb02 	bl	1fb42 <__errno>
   1553e:	236a      	movs	r3, #106	; 0x6a
   15540:	6003      	str	r3, [r0, #0]
		break;
   15542:	e7a9      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EADDRINUSE;
   15544:	f00a fafd 	bl	1fb42 <__errno>
   15548:	2370      	movs	r3, #112	; 0x70
   1554a:	6003      	str	r3, [r0, #0]
		break;
   1554c:	e7a4      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = ENETDOWN;
   1554e:	f00a faf8 	bl	1fb42 <__errno>
   15552:	2373      	movs	r3, #115	; 0x73
   15554:	6003      	str	r3, [r0, #0]
		break;
   15556:	e79f      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = ENETUNREACH;
   15558:	f00a faf3 	bl	1fb42 <__errno>
   1555c:	2372      	movs	r3, #114	; 0x72
   1555e:	6003      	str	r3, [r0, #0]
		break;
   15560:	e79a      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = ENETRESET;
   15562:	f00a faee 	bl	1fb42 <__errno>
   15566:	237e      	movs	r3, #126	; 0x7e
   15568:	6003      	str	r3, [r0, #0]
		break;
   1556a:	e795      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = ECONNRESET;
   1556c:	f00a fae9 	bl	1fb42 <__errno>
   15570:	2368      	movs	r3, #104	; 0x68
   15572:	6003      	str	r3, [r0, #0]
		break;
   15574:	e790      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EISCONN;
   15576:	f00a fae4 	bl	1fb42 <__errno>
   1557a:	237f      	movs	r3, #127	; 0x7f
   1557c:	6003      	str	r3, [r0, #0]
		break;
   1557e:	e78b      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = ENOTCONN;
   15580:	f00a fadf 	bl	1fb42 <__errno>
   15584:	2380      	movs	r3, #128	; 0x80
   15586:	6003      	str	r3, [r0, #0]
		break;
   15588:	e786      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = ETIMEDOUT;
   1558a:	f00a fada 	bl	1fb42 <__errno>
   1558e:	2374      	movs	r3, #116	; 0x74
   15590:	6003      	str	r3, [r0, #0]
		break;
   15592:	e781      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = ECONNREFUSED;
   15594:	f00a fad5 	bl	1fb42 <__errno>
   15598:	236f      	movs	r3, #111	; 0x6f
   1559a:	6003      	str	r3, [r0, #0]
		break;
   1559c:	e77c      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = ENOBUFS;
   1559e:	f00a fad0 	bl	1fb42 <__errno>
   155a2:	2369      	movs	r3, #105	; 0x69
   155a4:	6003      	str	r3, [r0, #0]
		break;
   155a6:	e777      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EHOSTDOWN;
   155a8:	f00a facb 	bl	1fb42 <__errno>
   155ac:	2375      	movs	r3, #117	; 0x75
   155ae:	6003      	str	r3, [r0, #0]
		break;
   155b0:	e772      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EINPROGRESS;
   155b2:	f00a fac6 	bl	1fb42 <__errno>
   155b6:	2377      	movs	r3, #119	; 0x77
   155b8:	6003      	str	r3, [r0, #0]
		break;
   155ba:	e76d      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EALREADY;
   155bc:	f00a fac1 	bl	1fb42 <__errno>
   155c0:	2378      	movs	r3, #120	; 0x78
   155c2:	6003      	str	r3, [r0, #0]
		break;
   155c4:	e768      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = ECANCELED;
   155c6:	f00a fabc 	bl	1fb42 <__errno>
   155ca:	238c      	movs	r3, #140	; 0x8c
   155cc:	6003      	str	r3, [r0, #0]
		break;
   155ce:	e763      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = ENOKEY;
   155d0:	f00a fab7 	bl	1fb42 <__errno>
   155d4:	f240 73d1 	movw	r3, #2001	; 0x7d1
   155d8:	6003      	str	r3, [r0, #0]
		break;
   155da:	e75d      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EKEYEXPIRED;
   155dc:	f00a fab1 	bl	1fb42 <__errno>
   155e0:	f240 73d2 	movw	r3, #2002	; 0x7d2
   155e4:	6003      	str	r3, [r0, #0]
		break;
   155e6:	e757      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EKEYREVOKED;
   155e8:	f00a faab 	bl	1fb42 <__errno>
   155ec:	f240 73d3 	movw	r3, #2003	; 0x7d3
   155f0:	6003      	str	r3, [r0, #0]
		break;
   155f2:	e751      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EKEYREJECTED;
   155f4:	f00a faa5 	bl	1fb42 <__errno>
   155f8:	f240 73d4 	movw	r3, #2004	; 0x7d4
   155fc:	6003      	str	r3, [r0, #0]
		break;
   155fe:	e74b      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = EMSGSIZE;
   15600:	f00a fa9f 	bl	1fb42 <__errno>
   15604:	237a      	movs	r3, #122	; 0x7a
   15606:	6003      	str	r3, [r0, #0]
		break;
   15608:	e746      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = ECONNABORTED;
   1560a:	f00a fa9a 	bl	1fb42 <__errno>
   1560e:	2371      	movs	r3, #113	; 0x71
   15610:	6003      	str	r3, [r0, #0]
		break;
   15612:	e741      	b.n	15498 <nrf_modem_os_errno_set+0x118>
		errno = 0xBAADBAAD;
   15614:	f00a fa95 	bl	1fb42 <__errno>
   15618:	4b01      	ldr	r3, [pc, #4]	; (15620 <nrf_modem_os_errno_set+0x2a0>)
   1561a:	6003      	str	r3, [r0, #0]
}
   1561c:	e73c      	b.n	15498 <nrf_modem_os_errno_set+0x118>
   1561e:	bf00      	nop
   15620:	baadbaad 	.word	0xbaadbaad

00015624 <nrf_modem_os_sem_init>:
{
   15624:	b538      	push	{r3, r4, r5, lr}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   15626:	6803      	ldr	r3, [r0, #0]
   15628:	b12b      	cbz	r3, 15636 <nrf_modem_os_sem_init+0x12>
   1562a:	4c0a      	ldr	r4, [pc, #40]	; (15654 <nrf_modem_os_sem_init+0x30>)
   1562c:	42a3      	cmp	r3, r4
   1562e:	d302      	bcc.n	15636 <nrf_modem_os_sem_init+0x12>
   15630:	3430      	adds	r4, #48	; 0x30
   15632:	42a3      	cmp	r3, r4
   15634:	d309      	bcc.n	1564a <nrf_modem_os_sem_init+0x26>
	*sem = &nrf_modem_os_sems[used++];
   15636:	4c08      	ldr	r4, [pc, #32]	; (15658 <nrf_modem_os_sem_init+0x34>)
   15638:	7823      	ldrb	r3, [r4, #0]
   1563a:	1c5d      	adds	r5, r3, #1
   1563c:	7025      	strb	r5, [r4, #0]
   1563e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15642:	4c04      	ldr	r4, [pc, #16]	; (15654 <nrf_modem_os_sem_init+0x30>)
   15644:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   15648:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   1564a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1564c:	f00d f983 	bl	22956 <z_impl_k_sem_init>
}
   15650:	bd38      	pop	{r3, r4, r5, pc}
   15652:	bf00      	nop
   15654:	20015ccc 	.word	0x20015ccc
   15658:	20016c80 	.word	0x20016c80

0001565c <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1565c:	4b02      	ldr	r3, [pc, #8]	; (15668 <nrf_modem_os_application_irq_set+0xc>)
   1565e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   15662:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   15666:	4770      	bx	lr
   15668:	e000e100 	.word	0xe000e100

0001566c <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1566c:	4b02      	ldr	r3, [pc, #8]	; (15678 <nrf_modem_os_application_irq_clear+0xc>)
   1566e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   15672:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   15676:	4770      	bx	lr
   15678:	e000e100 	.word	0xe000e100

0001567c <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1567c:	4b02      	ldr	r3, [pc, #8]	; (15688 <nrf_modem_os_trace_irq_set+0xc>)
   1567e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   15682:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   15686:	4770      	bx	lr
   15688:	e000e100 	.word	0xe000e100

0001568c <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1568c:	4b02      	ldr	r3, [pc, #8]	; (15698 <nrf_modem_os_trace_irq_clear+0xc>)
   1568e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   15692:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   15696:	4770      	bx	lr
   15698:	e000e100 	.word	0xe000e100

0001569c <nrf_modem_os_alloc>:
	}
#endif
}

void *nrf_modem_os_alloc(size_t bytes)
{
   1569c:	b508      	push	{r3, lr}
   1569e:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&library_heap, bytes, K_NO_WAIT);
   156a0:	2200      	movs	r2, #0
   156a2:	2300      	movs	r3, #0
   156a4:	4801      	ldr	r0, [pc, #4]	; (156ac <nrf_modem_os_alloc+0x10>)
   156a6:	f00d f8bb 	bl	22820 <k_heap_alloc>
		heap_diag.failed_allocs++;
		LOG_WRN("alloc(%d) -> %p", bytes, addr);
	}
#endif
	return addr;
}
   156aa:	bd08      	pop	{r3, pc}
   156ac:	20014780 	.word	0x20014780

000156b0 <nrf_modem_os_free>:

void nrf_modem_os_free(void *mem)
{
   156b0:	b508      	push	{r3, lr}
   156b2:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   156b4:	4801      	ldr	r0, [pc, #4]	; (156bc <nrf_modem_os_free+0xc>)
   156b6:	f00d f8be 	bl	22836 <k_heap_free>
#ifdef CONFIG_NRF_MODEM_LIB_DEBUG_ALLOC
	LOG_INF("free(%p)", mem);
#endif
}
   156ba:	bd08      	pop	{r3, pc}
   156bc:	20014780 	.word	0x20014780

000156c0 <nrf_modem_os_shm_tx_alloc>:

void *nrf_modem_os_shm_tx_alloc(size_t bytes)
{
   156c0:	b508      	push	{r3, lr}
   156c2:	4601      	mov	r1, r0
	void *addr = k_heap_alloc(&shmem_heap, bytes, K_NO_WAIT);
   156c4:	2200      	movs	r2, #0
   156c6:	2300      	movs	r3, #0
   156c8:	4801      	ldr	r0, [pc, #4]	; (156d0 <nrf_modem_os_shm_tx_alloc+0x10>)
   156ca:	f00d f8a9 	bl	22820 <k_heap_alloc>
		shmem_diag.failed_allocs++;
		LOG_WRN("shm_tx_alloc(%d) -> %p", bytes, addr);
	}
#endif
	return addr;
}
   156ce:	bd08      	pop	{r3, pc}
   156d0:	20015d04 	.word	0x20015d04

000156d4 <nrf_modem_os_shm_tx_free>:

void nrf_modem_os_shm_tx_free(void *mem)
{
   156d4:	b508      	push	{r3, lr}
   156d6:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   156d8:	4801      	ldr	r0, [pc, #4]	; (156e0 <nrf_modem_os_shm_tx_free+0xc>)
   156da:	f00d f8ac 	bl	22836 <k_heap_free>
#ifdef CONFIG_NRF_MODEM_LIB_DEBUG_SHM_TX_ALLOC
	LOG_INF("shm_tx_free(%p)", mem);
#endif
}
   156de:	bd08      	pop	{r3, pc}
   156e0:	20015d04 	.word	0x20015d04

000156e4 <nrf_modem_os_init>:
}
#endif

/* This function is called by nrf_modem_init() */
void nrf_modem_os_init(void)
{
   156e4:	b510      	push	{r4, lr}
	list->head = NULL;
   156e6:	4b0d      	ldr	r3, [pc, #52]	; (1571c <nrf_modem_os_init+0x38>)
   156e8:	2400      	movs	r4, #0
   156ea:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
   156ec:	605c      	str	r4, [r3, #4]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   156ee:	4b0c      	ldr	r3, [pc, #48]	; (15720 <nrf_modem_os_init+0x3c>)
   156f0:	e8d3 2fef 	ldaex	r2, [r3]
   156f4:	e8c3 4fe1 	stlex	r1, r4, [r3]
   156f8:	2900      	cmp	r1, #0
   156fa:	d1f9      	bne.n	156f0 <nrf_modem_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   156fc:	f00a fe41 	bl	20382 <read_task_create>

	/* Configure and enable modem tracing over UART and RTT. */
	trace_uart_init();
	trace_rtt_init();
	trace_task_create();
   15700:	f00a fe35 	bl	2036e <trace_task_create>

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   15704:	4b07      	ldr	r3, [pc, #28]	; (15724 <nrf_modem_os_init+0x40>)
   15706:	601c      	str	r4, [r3, #0]
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   15708:	4b07      	ldr	r3, [pc, #28]	; (15728 <nrf_modem_os_init+0x44>)
   1570a:	601c      	str	r4, [r3, #0]

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   1570c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   15710:	4906      	ldr	r1, [pc, #24]	; (1572c <nrf_modem_os_init+0x48>)
   15712:	4807      	ldr	r0, [pc, #28]	; (15730 <nrf_modem_os_init+0x4c>)
   15714:	f00d f831 	bl	2277a <k_heap_init>
#ifdef CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIODIC
	k_work_init_delayable(&heap_task.work, diag_task);
	k_work_reschedule(&heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIOD_MS));
#endif
}
   15718:	bd10      	pop	{r4, pc}
   1571a:	bf00      	nop
   1571c:	20015d18 	.word	0x20015d18
   15720:	20015cfc 	.word	0x20015cfc
   15724:	20015cc8 	.word	0x20015cc8
   15728:	20015d00 	.word	0x20015d00
   1572c:	200104e8 	.word	0x200104e8
   15730:	20015d04 	.word	0x20015d04

00015734 <nrf91_nrf_modem_lib_socket_offload_init>:

static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   15734:	2300      	movs	r3, #0
   15736:	e005      	b.n	15744 <nrf91_nrf_modem_lib_socket_offload_init+0x10>
		offload_ctx[i].nrf_fd = -1;
   15738:	4a04      	ldr	r2, [pc, #16]	; (1574c <nrf91_nrf_modem_lib_socket_offload_init+0x18>)
   1573a:	f04f 31ff 	mov.w	r1, #4294967295
   1573e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   15742:	3301      	adds	r3, #1
   15744:	2b07      	cmp	r3, #7
   15746:	ddf7      	ble.n	15738 <nrf91_nrf_modem_lib_socket_offload_init+0x4>
	}

	return 0;
}
   15748:	2000      	movs	r0, #0
   1574a:	4770      	bx	lr
   1574c:	20015df8 	.word	0x20015df8

00015750 <release_ctx>:
{
   15750:	b538      	push	{r3, r4, r5, lr}
   15752:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   15754:	4d08      	ldr	r5, [pc, #32]	; (15778 <release_ctx+0x28>)
   15756:	f04f 32ff 	mov.w	r2, #4294967295
   1575a:	f04f 33ff 	mov.w	r3, #4294967295
   1575e:	4628      	mov	r0, r5
   15760:	f005 fe9a 	bl	1b498 <z_impl_k_mutex_lock>
	ctx->nrf_fd = -1;
   15764:	f04f 33ff 	mov.w	r3, #4294967295
   15768:	6023      	str	r3, [r4, #0]
	ctx->lock = NULL;
   1576a:	2300      	movs	r3, #0
   1576c:	6063      	str	r3, [r4, #4]
	return z_impl_k_mutex_unlock(mutex);
   1576e:	4628      	mov	r0, r5
   15770:	f005 ff1c 	bl	1b5ac <z_impl_k_mutex_unlock>
}
   15774:	bd38      	pop	{r3, r4, r5, pc}
   15776:	bf00      	nop
   15778:	200147a8 	.word	0x200147a8

0001577c <allocate_ctx>:
{
   1577c:	b538      	push	{r3, r4, r5, lr}
   1577e:	4604      	mov	r4, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   15780:	f04f 32ff 	mov.w	r2, #4294967295
   15784:	f04f 33ff 	mov.w	r3, #4294967295
   15788:	480c      	ldr	r0, [pc, #48]	; (157bc <allocate_ctx+0x40>)
   1578a:	f005 fe85 	bl	1b498 <z_impl_k_mutex_lock>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   1578e:	2300      	movs	r3, #0
   15790:	e000      	b.n	15794 <allocate_ctx+0x18>
   15792:	3301      	adds	r3, #1
   15794:	2b07      	cmp	r3, #7
   15796:	dc0b      	bgt.n	157b0 <allocate_ctx+0x34>
		if (offload_ctx[i].nrf_fd == -1) {
   15798:	4a09      	ldr	r2, [pc, #36]	; (157c0 <allocate_ctx+0x44>)
   1579a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   1579e:	f1b2 3fff 	cmp.w	r2, #4294967295
   157a2:	d1f6      	bne.n	15792 <allocate_ctx+0x16>
			ctx = &offload_ctx[i];
   157a4:	4a06      	ldr	r2, [pc, #24]	; (157c0 <allocate_ctx+0x44>)
   157a6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
			ctx->nrf_fd = nrf_fd;
   157aa:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
			break;
   157ae:	e000      	b.n	157b2 <allocate_ctx+0x36>
	struct nrf_sock_ctx *ctx = NULL;
   157b0:	2500      	movs	r5, #0
	return z_impl_k_mutex_unlock(mutex);
   157b2:	4802      	ldr	r0, [pc, #8]	; (157bc <allocate_ctx+0x40>)
   157b4:	f005 fefa 	bl	1b5ac <z_impl_k_mutex_unlock>
}
   157b8:	4628      	mov	r0, r5
   157ba:	bd38      	pop	{r3, r4, r5, pc}
   157bc:	200147a8 	.word	0x200147a8
   157c0:	20015df8 	.word	0x20015df8

000157c4 <nrf91_socket_offload_sendmsg>:
{
   157c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157c8:	b083      	sub	sp, #12
	if (msg == NULL) {
   157ca:	b171      	cbz	r1, 157ea <nrf91_socket_offload_sendmsg+0x26>
   157cc:	4681      	mov	r9, r0
   157ce:	4692      	mov	sl, r2
   157d0:	460d      	mov	r5, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   157d2:	2300      	movs	r3, #0
	ssize_t len = 0;
   157d4:	4619      	mov	r1, r3
	for (i = 0; i < msg->msg_iovlen; i++) {
   157d6:	68ea      	ldr	r2, [r5, #12]
   157d8:	429a      	cmp	r2, r3
   157da:	d90d      	bls.n	157f8 <nrf91_socket_offload_sendmsg+0x34>
		len += msg->msg_iov[i].iov_len;
   157dc:	68aa      	ldr	r2, [r5, #8]
   157de:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   157e2:	6852      	ldr	r2, [r2, #4]
   157e4:	4411      	add	r1, r2
	for (i = 0; i < msg->msg_iovlen; i++) {
   157e6:	3301      	adds	r3, #1
   157e8:	e7f5      	b.n	157d6 <nrf91_socket_offload_sendmsg+0x12>
		errno = EINVAL;
   157ea:	f00a f9aa 	bl	1fb42 <__errno>
   157ee:	2316      	movs	r3, #22
   157f0:	6003      	str	r3, [r0, #0]
		return -1;
   157f2:	f04f 34ff 	mov.w	r4, #4294967295
   157f6:	e03a      	b.n	1586e <nrf91_socket_offload_sendmsg+0xaa>
	if (len <= sizeof(buf)) {
   157f8:	2980      	cmp	r1, #128	; 0x80
   157fa:	d903      	bls.n	15804 <nrf91_socket_offload_sendmsg+0x40>
	for (i = 0; i < msg->msg_iovlen; i++) {
   157fc:	f04f 0b00 	mov.w	fp, #0
	len = 0;
   15800:	46d8      	mov	r8, fp
   15802:	e03a      	b.n	1587a <nrf91_socket_offload_sendmsg+0xb6>
	return z_impl_k_mutex_lock(mutex, timeout);
   15804:	f04f 32ff 	mov.w	r2, #4294967295
   15808:	f04f 33ff 	mov.w	r3, #4294967295
   1580c:	482c      	ldr	r0, [pc, #176]	; (158c0 <nrf91_socket_offload_sendmsg+0xfc>)
   1580e:	f005 fe43 	bl	1b498 <z_impl_k_mutex_lock>
		for (i = 0; i < msg->msg_iovlen; i++) {
   15812:	2400      	movs	r4, #0
		len = 0;
   15814:	4627      	mov	r7, r4
		for (i = 0; i < msg->msg_iovlen; i++) {
   15816:	e00f      	b.n	15838 <nrf91_socket_offload_sendmsg+0x74>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   15818:	68ab      	ldr	r3, [r5, #8]
   1581a:	00e6      	lsls	r6, r4, #3
   1581c:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15820:	6852      	ldr	r2, [r2, #4]
   15822:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   15826:	4827      	ldr	r0, [pc, #156]	; (158c4 <nrf91_socket_offload_sendmsg+0x100>)
   15828:	4438      	add	r0, r7
   1582a:	f00d fba4 	bl	22f76 <memcpy>
			len += msg->msg_iov[i].iov_len;
   1582e:	68ab      	ldr	r3, [r5, #8]
   15830:	4433      	add	r3, r6
   15832:	685b      	ldr	r3, [r3, #4]
   15834:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   15836:	3401      	adds	r4, #1
   15838:	68eb      	ldr	r3, [r5, #12]
   1583a:	42a3      	cmp	r3, r4
   1583c:	d8ec      	bhi.n	15818 <nrf91_socket_offload_sendmsg+0x54>
		offset = 0;
   1583e:	2600      	movs	r6, #0
		ret = 0;
   15840:	4634      	mov	r4, r6
		while ((offset < len) && (ret >= 0)) {
   15842:	42b7      	cmp	r7, r6
   15844:	dd10      	ble.n	15868 <nrf91_socket_offload_sendmsg+0xa4>
   15846:	2c00      	cmp	r4, #0
   15848:	db0e      	blt.n	15868 <nrf91_socket_offload_sendmsg+0xa4>
				msg->msg_name, msg->msg_namelen);
   1584a:	682b      	ldr	r3, [r5, #0]
			ret = nrf91_socket_offload_sendto(obj,
   1584c:	686a      	ldr	r2, [r5, #4]
   1584e:	9201      	str	r2, [sp, #4]
   15850:	9300      	str	r3, [sp, #0]
   15852:	4653      	mov	r3, sl
   15854:	1bba      	subs	r2, r7, r6
   15856:	491b      	ldr	r1, [pc, #108]	; (158c4 <nrf91_socket_offload_sendmsg+0x100>)
   15858:	4431      	add	r1, r6
   1585a:	4648      	mov	r0, r9
   1585c:	f00b f8db 	bl	20a16 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   15860:	1e04      	subs	r4, r0, #0
   15862:	ddee      	ble.n	15842 <nrf91_socket_offload_sendmsg+0x7e>
				offset += ret;
   15864:	4426      	add	r6, r4
   15866:	e7ec      	b.n	15842 <nrf91_socket_offload_sendmsg+0x7e>
	return z_impl_k_mutex_unlock(mutex);
   15868:	4815      	ldr	r0, [pc, #84]	; (158c0 <nrf91_socket_offload_sendmsg+0xfc>)
   1586a:	f005 fe9f 	bl	1b5ac <z_impl_k_mutex_unlock>
}
   1586e:	4620      	mov	r0, r4
   15870:	b003      	add	sp, #12
   15872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < msg->msg_iovlen; i++) {
   15876:	f10b 0b01 	add.w	fp, fp, #1
   1587a:	68eb      	ldr	r3, [r5, #12]
   1587c:	455b      	cmp	r3, fp
   1587e:	d91d      	bls.n	158bc <nrf91_socket_offload_sendmsg+0xf8>
		if (msg->msg_iov[i].iov_len == 0) {
   15880:	68ab      	ldr	r3, [r5, #8]
   15882:	ea4f 07cb 	mov.w	r7, fp, lsl #3
   15886:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   1588a:	685b      	ldr	r3, [r3, #4]
   1588c:	2b00      	cmp	r3, #0
   1588e:	d0f2      	beq.n	15876 <nrf91_socket_offload_sendmsg+0xb2>
		offset = 0;
   15890:	2600      	movs	r6, #0
		while (offset < msg->msg_iov[i].iov_len) {
   15892:	68ab      	ldr	r3, [r5, #8]
   15894:	19da      	adds	r2, r3, r7
   15896:	6852      	ldr	r2, [r2, #4]
   15898:	42b2      	cmp	r2, r6
   1589a:	d9ec      	bls.n	15876 <nrf91_socket_offload_sendmsg+0xb2>
				(((uint8_t *) msg->msg_iov[i].iov_base) + offset),
   1589c:	59d9      	ldr	r1, [r3, r7]
				msg->msg_name, msg->msg_namelen);
   1589e:	682b      	ldr	r3, [r5, #0]
			ret = nrf91_socket_offload_sendto(obj,
   158a0:	6868      	ldr	r0, [r5, #4]
   158a2:	9001      	str	r0, [sp, #4]
   158a4:	9300      	str	r3, [sp, #0]
   158a6:	4653      	mov	r3, sl
   158a8:	1b92      	subs	r2, r2, r6
   158aa:	4431      	add	r1, r6
   158ac:	4648      	mov	r0, r9
   158ae:	f00b f8b2 	bl	20a16 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   158b2:	1e04      	subs	r4, r0, #0
   158b4:	dbdb      	blt.n	1586e <nrf91_socket_offload_sendmsg+0xaa>
			offset += ret;
   158b6:	4426      	add	r6, r4
			len += ret;
   158b8:	44a0      	add	r8, r4
   158ba:	e7ea      	b.n	15892 <nrf91_socket_offload_sendmsg+0xce>
	return len;
   158bc:	4644      	mov	r4, r8
   158be:	e7d6      	b.n	1586e <nrf91_socket_offload_sendmsg+0xaa>
   158c0:	20014820 	.word	0x20014820
   158c4:	20015d74 	.word	0x20015d74

000158c8 <nrf91_socket_offload_accept>:
{
   158c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   158cc:	b08b      	sub	sp, #44	; 0x2c
   158ce:	4606      	mov	r6, r0
   158d0:	460c      	mov	r4, r1
   158d2:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   158d4:	f7fc fcb2 	bl	1223c <z_reserve_fd>
   158d8:	4605      	mov	r5, r0
	int sd = OBJ_TO_SD(obj);
   158da:	6830      	ldr	r0, [r6, #0]
	if (fd < 0) {
   158dc:	2d00      	cmp	r5, #0
   158de:	db54      	blt.n	1598a <nrf91_socket_offload_accept+0xc2>
	if ((addr != NULL) && (addrlen != NULL)) {
   158e0:	b37c      	cbz	r4, 15942 <nrf91_socket_offload_accept+0x7a>
   158e2:	b38f      	cbz	r7, 15948 <nrf91_socket_offload_accept+0x80>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   158e4:	683b      	ldr	r3, [r7, #0]
   158e6:	2b08      	cmp	r3, #8
   158e8:	d025      	beq.n	15936 <nrf91_socket_offload_accept+0x6e>
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   158ea:	2324      	movs	r3, #36	; 0x24
   158ec:	9300      	str	r3, [sp, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   158ee:	466a      	mov	r2, sp
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   158f0:	f10d 0804 	add.w	r8, sp, #4
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   158f4:	4641      	mov	r1, r8
   158f6:	f00c fe7b 	bl	225f0 <nrf_accept>
	if (new_sd < 0) {
   158fa:	1e06      	subs	r6, r0, #0
   158fc:	db48      	blt.n	15990 <nrf91_socket_offload_accept+0xc8>
	ctx = allocate_ctx(new_sd);
   158fe:	4630      	mov	r0, r6
   15900:	f7ff ff3c 	bl	1577c <allocate_ctx>
	if (ctx == NULL) {
   15904:	4681      	mov	r9, r0
   15906:	b310      	cbz	r0, 1594e <nrf91_socket_offload_accept+0x86>
	if ((addr != NULL) && (addrlen != NULL)) {
   15908:	b164      	cbz	r4, 15924 <nrf91_socket_offload_accept+0x5c>
   1590a:	b15f      	cbz	r7, 15924 <nrf91_socket_offload_accept+0x5c>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   1590c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   15910:	2b02      	cmp	r3, #2
   15912:	d02f      	beq.n	15974 <nrf91_socket_offload_accept+0xac>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   15914:	2b0a      	cmp	r3, #10
   15916:	d11e      	bne.n	15956 <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   15918:	2318      	movs	r3, #24
   1591a:	603b      	str	r3, [r7, #0]
			nrf_to_z_ipv6(
   1591c:	a901      	add	r1, sp, #4
   1591e:	4620      	mov	r0, r4
   15920:	f00a ff5b 	bl	207da <nrf_to_z_ipv6>
	z_finalize_fd(fd, ctx,
   15924:	4a1c      	ldr	r2, [pc, #112]	; (15998 <nrf91_socket_offload_accept+0xd0>)
   15926:	4649      	mov	r1, r9
   15928:	4628      	mov	r0, r5
   1592a:	f7fc fcad 	bl	12288 <z_finalize_fd>
}
   1592e:	4628      	mov	r0, r5
   15930:	b00b      	add	sp, #44	; 0x2c
   15932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   15936:	2310      	movs	r3, #16
   15938:	9300      	str	r3, [sp, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   1593a:	466a      	mov	r2, sp
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   1593c:	f10d 0804 	add.w	r8, sp, #4
   15940:	e7d8      	b.n	158f4 <nrf91_socket_offload_accept+0x2c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   15942:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   15944:	46a0      	mov	r8, r4
   15946:	e7d5      	b.n	158f4 <nrf91_socket_offload_accept+0x2c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   15948:	463a      	mov	r2, r7
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   1594a:	46b8      	mov	r8, r7
   1594c:	e7d2      	b.n	158f4 <nrf91_socket_offload_accept+0x2c>
		errno = ENOMEM;
   1594e:	f00a f8f8 	bl	1fb42 <__errno>
   15952:	230c      	movs	r3, #12
   15954:	6003      	str	r3, [r0, #0]
	if (new_sd != -1) {
   15956:	f1b6 3fff 	cmp.w	r6, #4294967295
   1595a:	d112      	bne.n	15982 <nrf91_socket_offload_accept+0xba>
	if (ctx != NULL) {
   1595c:	f1b9 0f00 	cmp.w	r9, #0
   15960:	d002      	beq.n	15968 <nrf91_socket_offload_accept+0xa0>
		release_ctx(ctx);
   15962:	4648      	mov	r0, r9
   15964:	f7ff fef4 	bl	15750 <release_ctx>
	z_free_fd(fd);
   15968:	4628      	mov	r0, r5
   1596a:	f008 faa3 	bl	1deb4 <z_free_fd>
	return -1;
   1596e:	f04f 35ff 	mov.w	r5, #4294967295
   15972:	e7dc      	b.n	1592e <nrf91_socket_offload_accept+0x66>
			*addrlen = sizeof(struct sockaddr_in);
   15974:	2308      	movs	r3, #8
   15976:	603b      	str	r3, [r7, #0]
			nrf_to_z_ipv4(
   15978:	a901      	add	r1, sp, #4
   1597a:	4620      	mov	r0, r4
   1597c:	f00a fd16 	bl	203ac <nrf_to_z_ipv4>
   15980:	e7d0      	b.n	15924 <nrf91_socket_offload_accept+0x5c>
		nrf_close(new_sd);
   15982:	4630      	mov	r0, r6
   15984:	f00c fdcf 	bl	22526 <nrf_close>
   15988:	e7e8      	b.n	1595c <nrf91_socket_offload_accept+0x94>
		return -1;
   1598a:	f04f 35ff 	mov.w	r5, #4294967295
   1598e:	e7ce      	b.n	1592e <nrf91_socket_offload_accept+0x66>
		return -1;
   15990:	f04f 35ff 	mov.w	r5, #4294967295
   15994:	e7cb      	b.n	1592e <nrf91_socket_offload_accept+0x66>
   15996:	bf00      	nop
   15998:	000247e0 	.word	0x000247e0

0001599c <nrf91_socket_offload_ioctl>:
{
   1599c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   159a0:	b093      	sub	sp, #76	; 0x4c
   159a2:	9201      	str	r2, [sp, #4]
	int sd = OBJ_TO_SD(obj);
   159a4:	6804      	ldr	r4, [r0, #0]
	switch (request) {
   159a6:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
   159aa:	2b03      	cmp	r3, #3
   159ac:	f200 80b8 	bhi.w	15b20 <nrf91_socket_offload_ioctl+0x184>
   159b0:	e8df f003 	tbb	[pc, r3]
   159b4:	af08bc02 	.word	0xaf08bc02
	int sd = OBJ_TO_SD(obj);
   159b8:	f06f 0711 	mvn.w	r7, #17
}
   159bc:	4638      	mov	r0, r7
   159be:	b013      	add	sp, #76	; 0x4c
   159c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		fds = va_arg(args, struct zsock_pollfd *);
   159c4:	9901      	ldr	r1, [sp, #4]
   159c6:	1d0a      	adds	r2, r1, #4
   159c8:	9201      	str	r2, [sp, #4]
   159ca:	680e      	ldr	r6, [r1, #0]
		nfds = va_arg(args, int);
   159cc:	f101 0308 	add.w	r3, r1, #8
   159d0:	9301      	str	r3, [sp, #4]
   159d2:	f8d1 8004 	ldr.w	r8, [r1, #4]
		timeout = va_arg(args, int);
   159d6:	f101 030c 	add.w	r3, r1, #12
   159da:	9301      	str	r3, [sp, #4]
   159dc:	f8d1 9008 	ldr.w	r9, [r1, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   159e0:	2240      	movs	r2, #64	; 0x40
   159e2:	2100      	movs	r1, #0
   159e4:	a802      	add	r0, sp, #8
   159e6:	f00d fae6 	bl	22fb6 <memset>
	for (int i = 0; i < nfds; i++) {
   159ea:	2400      	movs	r4, #0
	int retval = 0;
   159ec:	4627      	mov	r7, r4
	for (int i = 0; i < nfds; i++) {
   159ee:	e005      	b.n	159fc <nrf91_socket_offload_ioctl+0x60>
			tmp[i].fd = fds[i].fd;
   159f0:	ab12      	add	r3, sp, #72	; 0x48
   159f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   159f6:	f843 0c40 	str.w	r0, [r3, #-64]
	for (int i = 0; i < nfds; i++) {
   159fa:	3401      	adds	r4, #1
   159fc:	45a0      	cmp	r8, r4
   159fe:	dd38      	ble.n	15a72 <nrf91_socket_offload_ioctl+0xd6>
		tmp[i].events = 0;
   15a00:	2200      	movs	r2, #0
   15a02:	ab12      	add	r3, sp, #72	; 0x48
   15a04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   15a08:	f823 2c3c 	strh.w	r2, [r3, #-60]
		fds[i].revents = 0;
   15a0c:	eb06 05c4 	add.w	r5, r6, r4, lsl #3
   15a10:	80ea      	strh	r2, [r5, #6]
		if (fds[i].fd < 0) {
   15a12:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
   15a16:	4290      	cmp	r0, r2
   15a18:	dbea      	blt.n	159f0 <nrf91_socket_offload_ioctl+0x54>
			obj = z_get_fd_obj(fds[i].fd,
   15a1a:	2286      	movs	r2, #134	; 0x86
   15a1c:	4945      	ldr	r1, [pc, #276]	; (15b34 <nrf91_socket_offload_ioctl+0x198>)
   15a1e:	f7fc fbd3 	bl	121c8 <z_get_fd_obj>
			if (obj != NULL) {
   15a22:	b310      	cbz	r0, 15a6a <nrf91_socket_offload_ioctl+0xce>
				tmp[i].fd = OBJ_TO_SD(obj);
   15a24:	6802      	ldr	r2, [r0, #0]
   15a26:	ab12      	add	r3, sp, #72	; 0x48
   15a28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   15a2c:	f843 2c40 	str.w	r2, [r3, #-64]
		if (fds[i].events & POLLIN) {
   15a30:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   15a34:	f013 0f01 	tst.w	r3, #1
   15a38:	d008      	beq.n	15a4c <nrf91_socket_offload_ioctl+0xb0>
			tmp[i].events |= NRF_POLLIN;
   15a3a:	ab12      	add	r3, sp, #72	; 0x48
   15a3c:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   15a40:	f832 3c3c 	ldrh.w	r3, [r2, #-60]
   15a44:	f043 0301 	orr.w	r3, r3, #1
   15a48:	f822 3c3c 	strh.w	r3, [r2, #-60]
		if (fds[i].events & POLLOUT) {
   15a4c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   15a50:	f013 0f04 	tst.w	r3, #4
   15a54:	d0d1      	beq.n	159fa <nrf91_socket_offload_ioctl+0x5e>
			tmp[i].events |= NRF_POLLOUT;
   15a56:	ab12      	add	r3, sp, #72	; 0x48
   15a58:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   15a5c:	f832 3c3c 	ldrh.w	r3, [r2, #-60]
   15a60:	f043 0302 	orr.w	r3, r3, #2
   15a64:	f822 3c3c 	strh.w	r3, [r2, #-60]
   15a68:	e7c7      	b.n	159fa <nrf91_socket_offload_ioctl+0x5e>
				fds[i].revents = POLLNVAL;
   15a6a:	2320      	movs	r3, #32
   15a6c:	80eb      	strh	r3, [r5, #6]
				retval++;
   15a6e:	3701      	adds	r7, #1
   15a70:	e7de      	b.n	15a30 <nrf91_socket_offload_ioctl+0x94>
	if (retval > 0) {
   15a72:	2f00      	cmp	r7, #0
   15a74:	dca2      	bgt.n	159bc <nrf91_socket_offload_ioctl+0x20>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   15a76:	464a      	mov	r2, r9
   15a78:	4641      	mov	r1, r8
   15a7a:	a802      	add	r0, sp, #8
   15a7c:	f00c fe16 	bl	226ac <nrf_poll>
   15a80:	4607      	mov	r7, r0
	for (int i = 0; i < nfds; i++) {
   15a82:	2300      	movs	r3, #0
   15a84:	e000      	b.n	15a88 <nrf91_socket_offload_ioctl+0xec>
   15a86:	3301      	adds	r3, #1
   15a88:	4598      	cmp	r8, r3
   15a8a:	dd97      	ble.n	159bc <nrf91_socket_offload_ioctl+0x20>
		if (fds[i].fd < 0) {
   15a8c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
   15a90:	f856 1033 	ldr.w	r1, [r6, r3, lsl #3]
   15a94:	2900      	cmp	r1, #0
   15a96:	dbf6      	blt.n	15a86 <nrf91_socket_offload_ioctl+0xea>
		if (tmp[i].revents & NRF_POLLIN) {
   15a98:	a912      	add	r1, sp, #72	; 0x48
   15a9a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   15a9e:	f931 1c3a 	ldrsh.w	r1, [r1, #-58]
   15aa2:	f011 0f01 	tst.w	r1, #1
   15aa6:	d003      	beq.n	15ab0 <nrf91_socket_offload_ioctl+0x114>
			fds[i].revents |= POLLIN;
   15aa8:	88d1      	ldrh	r1, [r2, #6]
   15aaa:	f041 0101 	orr.w	r1, r1, #1
   15aae:	80d1      	strh	r1, [r2, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   15ab0:	a912      	add	r1, sp, #72	; 0x48
   15ab2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   15ab6:	f931 1c3a 	ldrsh.w	r1, [r1, #-58]
   15aba:	f011 0f02 	tst.w	r1, #2
   15abe:	d003      	beq.n	15ac8 <nrf91_socket_offload_ioctl+0x12c>
			fds[i].revents |= POLLOUT;
   15ac0:	88d1      	ldrh	r1, [r2, #6]
   15ac2:	f041 0104 	orr.w	r1, r1, #4
   15ac6:	80d1      	strh	r1, [r2, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   15ac8:	a912      	add	r1, sp, #72	; 0x48
   15aca:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   15ace:	f931 1c3a 	ldrsh.w	r1, [r1, #-58]
   15ad2:	f011 0f04 	tst.w	r1, #4
   15ad6:	d003      	beq.n	15ae0 <nrf91_socket_offload_ioctl+0x144>
			fds[i].revents |= POLLERR;
   15ad8:	88d1      	ldrh	r1, [r2, #6]
   15ada:	f041 0108 	orr.w	r1, r1, #8
   15ade:	80d1      	strh	r1, [r2, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   15ae0:	a912      	add	r1, sp, #72	; 0x48
   15ae2:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   15ae6:	f931 1c3a 	ldrsh.w	r1, [r1, #-58]
   15aea:	f011 0f10 	tst.w	r1, #16
   15aee:	d003      	beq.n	15af8 <nrf91_socket_offload_ioctl+0x15c>
			fds[i].revents |= POLLNVAL;
   15af0:	88d1      	ldrh	r1, [r2, #6]
   15af2:	f041 0120 	orr.w	r1, r1, #32
   15af6:	80d1      	strh	r1, [r2, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   15af8:	a912      	add	r1, sp, #72	; 0x48
   15afa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   15afe:	f931 1c3a 	ldrsh.w	r1, [r1, #-58]
   15b02:	f011 0f08 	tst.w	r1, #8
   15b06:	d0be      	beq.n	15a86 <nrf91_socket_offload_ioctl+0xea>
			fds[i].revents |= POLLHUP;
   15b08:	88d1      	ldrh	r1, [r2, #6]
   15b0a:	f041 0110 	orr.w	r1, r1, #16
   15b0e:	80d1      	strh	r1, [r2, #6]
   15b10:	e7b9      	b.n	15a86 <nrf91_socket_offload_ioctl+0xea>
		ctx->lock = va_arg(args, struct k_mutex *);
   15b12:	9b01      	ldr	r3, [sp, #4]
   15b14:	1d1a      	adds	r2, r3, #4
   15b16:	9201      	str	r2, [sp, #4]
   15b18:	681b      	ldr	r3, [r3, #0]
   15b1a:	6043      	str	r3, [r0, #4]
		return 0;
   15b1c:	2700      	movs	r7, #0
   15b1e:	e74d      	b.n	159bc <nrf91_socket_offload_ioctl+0x20>
		return nrf91_socket_offload_fcntl(sd, request, args);
   15b20:	9a01      	ldr	r2, [sp, #4]
   15b22:	4620      	mov	r0, r4
   15b24:	f00b f824 	bl	20b70 <nrf91_socket_offload_fcntl>
   15b28:	4607      	mov	r7, r0
   15b2a:	e747      	b.n	159bc <nrf91_socket_offload_ioctl+0x20>
		return -EOPNOTSUPP;
   15b2c:	f06f 075e 	mvn.w	r7, #94	; 0x5e
   15b30:	e744      	b.n	159bc <nrf91_socket_offload_ioctl+0x20>
   15b32:	bf00      	nop
   15b34:	000247e0 	.word	0x000247e0

00015b38 <nrf91_socket_create>:
{
   15b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15b3a:	4605      	mov	r5, r0
   15b3c:	460e      	mov	r6, r1
   15b3e:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   15b40:	f7fc fb7c 	bl	1223c <z_reserve_fd>
	if (fd < 0) {
   15b44:	1e04      	subs	r4, r0, #0
   15b46:	db24      	blt.n	15b92 <nrf91_socket_create+0x5a>
	sd = nrf91_socket_offload_socket(family, type, proto);
   15b48:	463a      	mov	r2, r7
   15b4a:	4631      	mov	r1, r6
   15b4c:	4628      	mov	r0, r5
   15b4e:	f00b f835 	bl	20bbc <nrf91_socket_offload_socket>
	if (sd < 0) {
   15b52:	1e05      	subs	r5, r0, #0
   15b54:	db0a      	blt.n	15b6c <nrf91_socket_create+0x34>
	ctx = allocate_ctx(sd);
   15b56:	4628      	mov	r0, r5
   15b58:	f7ff fe10 	bl	1577c <allocate_ctx>
	if (ctx == NULL) {
   15b5c:	4601      	mov	r1, r0
   15b5e:	b158      	cbz	r0, 15b78 <nrf91_socket_create+0x40>
	z_finalize_fd(fd, ctx,
   15b60:	4a0d      	ldr	r2, [pc, #52]	; (15b98 <nrf91_socket_create+0x60>)
   15b62:	4620      	mov	r0, r4
   15b64:	f7fc fb90 	bl	12288 <z_finalize_fd>
}
   15b68:	4620      	mov	r0, r4
   15b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_free_fd(fd);
   15b6c:	4620      	mov	r0, r4
   15b6e:	f008 f9a1 	bl	1deb4 <z_free_fd>
		return -1;
   15b72:	f04f 34ff 	mov.w	r4, #4294967295
   15b76:	e7f7      	b.n	15b68 <nrf91_socket_create+0x30>
		errno = ENOMEM;
   15b78:	f009 ffe3 	bl	1fb42 <__errno>
   15b7c:	230c      	movs	r3, #12
   15b7e:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   15b80:	4628      	mov	r0, r5
   15b82:	f00c fcd0 	bl	22526 <nrf_close>
		z_free_fd(fd);
   15b86:	4620      	mov	r0, r4
   15b88:	f008 f994 	bl	1deb4 <z_free_fd>
		return -1;
   15b8c:	f04f 34ff 	mov.w	r4, #4294967295
   15b90:	e7ea      	b.n	15b68 <nrf91_socket_create+0x30>
		return -1;
   15b92:	f04f 34ff 	mov.w	r4, #4294967295
   15b96:	e7e7      	b.n	15b68 <nrf91_socket_create+0x30>
   15b98:	000247e0 	.word	0x000247e0

00015b9c <nrf91_socket_iface_init>:
static struct nrf91_socket_iface_data {
	struct net_if *iface;
} nrf91_socket_iface_data;

static void nrf91_socket_iface_init(struct net_if *iface)
{
   15b9c:	b508      	push	{r3, lr}
	nrf91_socket_iface_data.iface = iface;
   15b9e:	4b04      	ldr	r3, [pc, #16]	; (15bb0 <nrf91_socket_iface_init+0x14>)
   15ba0:	6018      	str	r0, [r3, #0]

	iface->if_dev->offloaded = true;
   15ba2:	6803      	ldr	r3, [r0, #0]
   15ba4:	2201      	movs	r2, #1
   15ba6:	769a      	strb	r2, [r3, #26]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   15ba8:	4802      	ldr	r0, [pc, #8]	; (15bb4 <nrf91_socket_iface_init+0x18>)
   15baa:	f7fd fcf5 	bl	13598 <socket_offload_dns_register>
}
   15bae:	bd08      	pop	{r3, pc}
   15bb0:	20015df4 	.word	0x20015df4
   15bb4:	000247d8 	.word	0x000247d8

00015bb8 <nrf91_socket_offload_getaddrinfo>:
{
   15bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15bbc:	b092      	sub	sp, #72	; 0x48
   15bbe:	4605      	mov	r5, r0
   15bc0:	460e      	mov	r6, r1
   15bc2:	4614      	mov	r4, r2
   15bc4:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   15bc6:	2100      	movs	r1, #0
   15bc8:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   15bca:	2220      	movs	r2, #32
   15bcc:	a80a      	add	r0, sp, #40	; 0x28
   15bce:	f00d f9f2 	bl	22fb6 <memset>
	if (hints != NULL) {
   15bd2:	b18c      	cbz	r4, 15bf8 <nrf91_socket_offload_getaddrinfo+0x40>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   15bd4:	a90a      	add	r1, sp, #40	; 0x28
   15bd6:	4620      	mov	r0, r4
   15bd8:	f00b f868 	bl	20cac <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   15bdc:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   15be0:	d062      	beq.n	15ca8 <nrf91_socket_offload_getaddrinfo+0xf0>
		} else if (error == -EAFNOSUPPORT) {
   15be2:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   15be6:	d062      	beq.n	15cae <nrf91_socket_offload_getaddrinfo+0xf6>
		if (hints->ai_next != NULL) {
   15be8:	6820      	ldr	r0, [r4, #0]
   15bea:	b1c0      	cbz	r0, 15c1e <nrf91_socket_offload_getaddrinfo+0x66>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   15bec:	ac02      	add	r4, sp, #8
   15bee:	4621      	mov	r1, r4
   15bf0:	f00b f85c 	bl	20cac <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   15bf4:	9411      	str	r4, [sp, #68]	; 0x44
		nrf_hints_ptr = &nrf_hints;
   15bf6:	ac0a      	add	r4, sp, #40	; 0x28
	return z_impl_k_mutex_lock(mutex, timeout);
   15bf8:	f04f 32ff 	mov.w	r2, #4294967295
   15bfc:	f04f 33ff 	mov.w	r3, #4294967295
   15c00:	482c      	ldr	r0, [pc, #176]	; (15cb4 <nrf91_socket_offload_getaddrinfo+0xfc>)
   15c02:	f005 fc49 	bl	1b498 <z_impl_k_mutex_lock>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   15c06:	ab01      	add	r3, sp, #4
   15c08:	4622      	mov	r2, r4
   15c0a:	4631      	mov	r1, r6
   15c0c:	4628      	mov	r0, r5
   15c0e:	f00c fd49 	bl	226a4 <nrf_getaddrinfo>
	if (retval != 0) {
   15c12:	4680      	mov	r8, r0
   15c14:	b928      	cbnz	r0, 15c22 <nrf91_socket_offload_getaddrinfo+0x6a>
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   15c16:	9c01      	ldr	r4, [sp, #4]
	*res = NULL;
   15c18:	2600      	movs	r6, #0
   15c1a:	603e      	str	r6, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   15c1c:	e01a      	b.n	15c54 <nrf91_socket_offload_getaddrinfo+0x9c>
		nrf_hints_ptr = &nrf_hints;
   15c1e:	ac0a      	add	r4, sp, #40	; 0x28
   15c20:	e7ea      	b.n	15bf8 <nrf91_socket_offload_getaddrinfo+0x40>
		error = nrf_to_z_dns_error_code(retval);
   15c22:	f00a fdb5 	bl	20790 <nrf_to_z_dns_error_code>
   15c26:	4680      	mov	r8, r0
		goto error;
   15c28:	e037      	b.n	15c9a <nrf91_socket_offload_getaddrinfo+0xe2>
			k_free(next_z_res);
   15c2a:	4628      	mov	r0, r5
   15c2c:	f00d f953 	bl	22ed6 <k_free>
			retval = DNS_EAI_MEMORY;
   15c30:	f06f 0809 	mvn.w	r8, #9
   15c34:	e029      	b.n	15c8a <nrf91_socket_offload_getaddrinfo+0xd2>
			k_free(next_z_res);
   15c36:	4628      	mov	r0, r5
   15c38:	f00d f94d 	bl	22ed6 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   15c3c:	f06f 0806 	mvn.w	r8, #6
   15c40:	e023      	b.n	15c8a <nrf91_socket_offload_getaddrinfo+0xd2>
			k_free(next_z_res);
   15c42:	4628      	mov	r0, r5
   15c44:	f00d f947 	bl	22ed6 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   15c48:	f06f 0808 	mvn.w	r8, #8
   15c4c:	e01d      	b.n	15c8a <nrf91_socket_offload_getaddrinfo+0xd2>
			*res = next_z_res;
   15c4e:	603d      	str	r5, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   15c50:	69e4      	ldr	r4, [r4, #28]
		latest_z_res = next_z_res;
   15c52:	462e      	mov	r6, r5
	while ((retval == 0) && (next_nrf_res != NULL)) {
   15c54:	b1b4      	cbz	r4, 15c84 <nrf91_socket_offload_getaddrinfo+0xcc>
					k_malloc(sizeof(struct zsock_addrinfo));
   15c56:	2050      	movs	r0, #80	; 0x50
   15c58:	f00d f946 	bl	22ee8 <k_malloc>
		if (next_z_res == NULL) {
   15c5c:	4605      	mov	r5, r0
   15c5e:	b178      	cbz	r0, 15c80 <nrf91_socket_offload_getaddrinfo+0xc8>
		error = nrf_to_z_addrinfo(next_z_res, next_nrf_res);
   15c60:	4621      	mov	r1, r4
   15c62:	f00a ffe0 	bl	20c26 <nrf_to_z_addrinfo>
		if (error == -ENOMEM) {
   15c66:	f110 0f0c 	cmn.w	r0, #12
   15c6a:	d0de      	beq.n	15c2a <nrf91_socket_offload_getaddrinfo+0x72>
		} else if (error == -EPROTONOSUPPORT) {
   15c6c:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   15c70:	d0e1      	beq.n	15c36 <nrf91_socket_offload_getaddrinfo+0x7e>
		} else if (error == -EAFNOSUPPORT) {
   15c72:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   15c76:	d0e4      	beq.n	15c42 <nrf91_socket_offload_getaddrinfo+0x8a>
		if (latest_z_res == NULL) {
   15c78:	2e00      	cmp	r6, #0
   15c7a:	d0e8      	beq.n	15c4e <nrf91_socket_offload_getaddrinfo+0x96>
			latest_z_res->ai_next = next_z_res;
   15c7c:	6035      	str	r5, [r6, #0]
   15c7e:	e7e7      	b.n	15c50 <nrf91_socket_offload_getaddrinfo+0x98>
			retval = DNS_EAI_MEMORY;
   15c80:	f06f 0809 	mvn.w	r8, #9
	if (retval != 0) {
   15c84:	f1b8 0f00 	cmp.w	r8, #0
   15c88:	d004      	beq.n	15c94 <nrf91_socket_offload_getaddrinfo+0xdc>
		nrf91_socket_offload_freeaddrinfo(*res);
   15c8a:	6838      	ldr	r0, [r7, #0]
   15c8c:	f00a ffbe 	bl	20c0c <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   15c90:	2300      	movs	r3, #0
   15c92:	603b      	str	r3, [r7, #0]
	nrf_freeaddrinfo(nrf_res);
   15c94:	9801      	ldr	r0, [sp, #4]
   15c96:	f00c fd07 	bl	226a8 <nrf_freeaddrinfo>
	return z_impl_k_mutex_unlock(mutex);
   15c9a:	4806      	ldr	r0, [pc, #24]	; (15cb4 <nrf91_socket_offload_getaddrinfo+0xfc>)
   15c9c:	f005 fc86 	bl	1b5ac <z_impl_k_mutex_unlock>
}
   15ca0:	4640      	mov	r0, r8
   15ca2:	b012      	add	sp, #72	; 0x48
   15ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return DNS_EAI_SOCKTYPE;
   15ca8:	f06f 0806 	mvn.w	r8, #6
   15cac:	e7f8      	b.n	15ca0 <nrf91_socket_offload_getaddrinfo+0xe8>
			return DNS_EAI_ADDRFAMILY;
   15cae:	f06f 0808 	mvn.w	r8, #8
   15cb2:	e7f5      	b.n	15ca0 <nrf91_socket_offload_getaddrinfo+0xe8>
   15cb4:	200147e4 	.word	0x200147e4

00015cb8 <complete_cmd>:
	return 0;
}

/* Clear the current command safely */
static void complete_cmd(void)
{
   15cb8:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   15cba:	4c07      	ldr	r4, [pc, #28]	; (15cd8 <complete_cmd+0x20>)
   15cbc:	f04f 32ff 	mov.w	r2, #4294967295
   15cc0:	f04f 33ff 	mov.w	r3, #4294967295
   15cc4:	4620      	mov	r0, r4
   15cc6:	f005 fbe7 	bl	1b498 <z_impl_k_mutex_lock>
	k_mutex_lock(&current_cmd_mutex, K_FOREVER);
	current_cmd.cmd = NULL;
   15cca:	4b04      	ldr	r3, [pc, #16]	; (15cdc <complete_cmd+0x24>)
   15ccc:	2200      	movs	r2, #0
   15cce:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   15cd0:	4620      	mov	r0, r4
   15cd2:	f005 fc6b 	bl	1b5ac <z_impl_k_mutex_unlock>
	k_mutex_unlock(&current_cmd_mutex);
}
   15cd6:	bd10      	pop	{r4, pc}
   15cd8:	200147bc 	.word	0x200147bc
   15cdc:	200168c8 	.word	0x200168c8

00015ce0 <load_cmd_and_write>:
 * The operations are repeated until the queue is empty or a command is pending
 * a response. This function is called both from the socket thread and calling
 * context.
 */
static void load_cmd_and_write(void)
{
   15ce0:	b530      	push	{r4, r5, lr}
   15ce2:	b085      	sub	sp, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   15ce4:	f04f 32ff 	mov.w	r2, #4294967295
   15ce8:	f04f 33ff 	mov.w	r3, #4294967295
   15cec:	4825      	ldr	r0, [pc, #148]	; (15d84 <load_cmd_and_write+0xa4>)
   15cee:	f005 fbd3 	bl	1b498 <z_impl_k_mutex_lock>
   15cf2:	e014      	b.n	15d1e <load_cmd_and_write+0x3e>
		return -errno;
   15cf4:	f009 ff25 	bl	1fb42 <__errno>
   15cf8:	6804      	ldr	r4, [r0, #0]
   15cfa:	4264      	negs	r4, r4
   15cfc:	e02b      	b.n	15d56 <load_cmd_and_write+0x76>
		}

		ret = at_write(current_cmd.cmd);

		if (current_cmd.flags & AT_CMD_BUF_CMD) {
			k_free(current_cmd.cmd);
   15cfe:	4b22      	ldr	r3, [pc, #136]	; (15d88 <load_cmd_and_write+0xa8>)
   15d00:	6818      	ldr	r0, [r3, #0]
   15d02:	f00d f8e8 	bl	22ed6 <k_free>
   15d06:	e02b      	b.n	15d60 <load_cmd_and_write+0x80>
	return z_impl_k_msgq_put(msgq, data, timeout);
   15d08:	f04f 32ff 	mov.w	r2, #4294967295
   15d0c:	f04f 33ff 	mov.w	r3, #4294967295
   15d10:	a902      	add	r1, sp, #8
   15d12:	481e      	ldr	r0, [pc, #120]	; (15d8c <load_cmd_and_write+0xac>)
   15d14:	f005 fafe 	bl	1b314 <z_impl_k_msgq_put>
			resp.state = AT_CMD_ERROR_WRITE;
			resp.code = ret;
			if (current_cmd.flags & AT_CMD_SYNC) {
				k_msgq_put(&response_sync, &resp, K_FOREVER);
			}
			complete_cmd();
   15d18:	f7ff ffce 	bl	15cb8 <complete_cmd>
		}
	} while (ret != 0);
   15d1c:	b364      	cbz	r4, 15d78 <load_cmd_and_write+0x98>
		if (current_cmd.cmd != NULL ||
   15d1e:	4b1a      	ldr	r3, [pc, #104]	; (15d88 <load_cmd_and_write+0xa8>)
   15d20:	681b      	ldr	r3, [r3, #0]
   15d22:	bb4b      	cbnz	r3, 15d78 <load_cmd_and_write+0x98>
	return z_impl_k_msgq_get(msgq, data, timeout);
   15d24:	2200      	movs	r2, #0
   15d26:	2300      	movs	r3, #0
   15d28:	4917      	ldr	r1, [pc, #92]	; (15d88 <load_cmd_and_write+0xa8>)
   15d2a:	4819      	ldr	r0, [pc, #100]	; (15d90 <load_cmd_and_write+0xb0>)
   15d2c:	f005 fb50 	bl	1b3d0 <z_impl_k_msgq_get>
   15d30:	4604      	mov	r4, r0
   15d32:	bb08      	cbnz	r0, 15d78 <load_cmd_and_write+0x98>
		ret = at_write(current_cmd.cmd);
   15d34:	4b14      	ldr	r3, [pc, #80]	; (15d88 <load_cmd_and_write+0xa8>)
   15d36:	681d      	ldr	r5, [r3, #0]
	int bytes_to_send = strlen(cmd);
   15d38:	4628      	mov	r0, r5
   15d3a:	f7fb f899 	bl	10e70 <strlen>
   15d3e:	4602      	mov	r2, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   15d40:	4b14      	ldr	r3, [pc, #80]	; (15d94 <load_cmd_and_write+0xb4>)
   15d42:	6818      	ldr	r0, [r3, #0]
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   15d44:	2300      	movs	r3, #0
   15d46:	9301      	str	r3, [sp, #4]
   15d48:	9300      	str	r3, [sp, #0]
   15d4a:	4629      	mov	r1, r5
   15d4c:	f009 fc88 	bl	1f660 <z_impl_zsock_sendto>
	if (bytes_sent == -1) {
   15d50:	f1b0 3fff 	cmp.w	r0, #4294967295
   15d54:	d0ce      	beq.n	15cf4 <load_cmd_and_write+0x14>
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   15d56:	4b0c      	ldr	r3, [pc, #48]	; (15d88 <load_cmd_and_write+0xa8>)
   15d58:	7c1b      	ldrb	r3, [r3, #16]
   15d5a:	f013 0f01 	tst.w	r3, #1
   15d5e:	d1ce      	bne.n	15cfe <load_cmd_and_write+0x1e>
		if (ret != 0) {
   15d60:	2c00      	cmp	r4, #0
   15d62:	d0db      	beq.n	15d1c <load_cmd_and_write+0x3c>
			resp.state = AT_CMD_ERROR_WRITE;
   15d64:	2305      	movs	r3, #5
   15d66:	f88d 300c 	strb.w	r3, [sp, #12]
			resp.code = ret;
   15d6a:	9402      	str	r4, [sp, #8]
			if (current_cmd.flags & AT_CMD_SYNC) {
   15d6c:	4b06      	ldr	r3, [pc, #24]	; (15d88 <load_cmd_and_write+0xa8>)
   15d6e:	7c1b      	ldrb	r3, [r3, #16]
   15d70:	f013 0f02 	tst.w	r3, #2
   15d74:	d0d0      	beq.n	15d18 <load_cmd_and_write+0x38>
   15d76:	e7c7      	b.n	15d08 <load_cmd_and_write+0x28>
	return z_impl_k_mutex_unlock(mutex);
   15d78:	4802      	ldr	r0, [pc, #8]	; (15d84 <load_cmd_and_write+0xa4>)
   15d7a:	f005 fc17 	bl	1b5ac <z_impl_k_mutex_unlock>
	k_mutex_unlock(&current_cmd_mutex);
}
   15d7e:	b005      	add	sp, #20
   15d80:	bd30      	pop	{r4, r5, pc}
   15d82:	bf00      	nop
   15d84:	200147bc 	.word	0x200147bc
   15d88:	200168c8 	.word	0x200168c8
   15d8c:	20014894 	.word	0x20014894
   15d90:	20014834 	.word	0x20014834
   15d94:	200168c4 	.word	0x200168c4

00015d98 <get_return_code>:
{
   15d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15d9c:	4604      	mov	r4, r0
   15d9e:	460d      	mov	r5, r1
   15da0:	4617      	mov	r7, r2
	ret->state = AT_CMD_NOTIFICATION;
   15da2:	2307      	movs	r3, #7
   15da4:	7113      	strb	r3, [r2, #4]
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   15da6:	1f4e      	subs	r6, r1, #5
   15da8:	4406      	add	r6, r0
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   15daa:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 15e58 <get_return_code+0xc0>
   15dae:	4640      	mov	r0, r8
   15db0:	f7fb f85e 	bl	10e70 <strlen>
   15db4:	4602      	mov	r2, r0
   15db6:	4641      	mov	r1, r8
   15db8:	4630      	mov	r0, r6
   15dba:	f00d fa7a 	bl	232b2 <strncmp>
   15dbe:	2800      	cmp	r0, #0
   15dc0:	bf0c      	ite	eq
   15dc2:	2201      	moveq	r2, #1
   15dc4:	2200      	movne	r2, #0
		if (match) {
   15dc6:	d10a      	bne.n	15dde <get_return_code+0x46>
			ret->state = AT_CMD_OK;
   15dc8:	2300      	movs	r3, #0
   15dca:	713b      	strb	r3, [r7, #4]
			ret->code  = 0;
   15dcc:	603b      	str	r3, [r7, #0]
	if (match) {
   15dce:	2a00      	cmp	r2, #0
   15dd0:	d037      	beq.n	15e42 <get_return_code+0xaa>
		new_len = tmpstr - buf;
   15dd2:	1b30      	subs	r0, r6, r4
		buf[new_len++] = '\0';
   15dd4:	3001      	adds	r0, #1
   15dd6:	2300      	movs	r3, #0
   15dd8:	7033      	strb	r3, [r6, #0]
}
   15dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   15dde:	491b      	ldr	r1, [pc, #108]	; (15e4c <get_return_code+0xb4>)
   15de0:	4620      	mov	r0, r4
   15de2:	f00d fa98 	bl	23316 <strstr>
		if (tmpstr) {
   15de6:	4606      	mov	r6, r0
   15de8:	b138      	cbz	r0, 15dfa <get_return_code+0x62>
			ret->state = AT_CMD_ERROR_CMS;
   15dea:	2302      	movs	r3, #2
   15dec:	713b      	strb	r3, [r7, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   15dee:	f104 000b 	add.w	r0, r4, #11
   15df2:	f00d f8a0 	bl	22f36 <atoi>
   15df6:	6038      	str	r0, [r7, #0]
	if (match) {
   15df8:	e7eb      	b.n	15dd2 <get_return_code+0x3a>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   15dfa:	4915      	ldr	r1, [pc, #84]	; (15e50 <get_return_code+0xb8>)
   15dfc:	4620      	mov	r0, r4
   15dfe:	f00d fa8a 	bl	23316 <strstr>
		if (tmpstr) {
   15e02:	4606      	mov	r6, r0
   15e04:	b138      	cbz	r0, 15e16 <get_return_code+0x7e>
			ret->state = AT_CMD_ERROR_CME;
   15e06:	2303      	movs	r3, #3
   15e08:	713b      	strb	r3, [r7, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CME_STR) - 1]);
   15e0a:	f104 000b 	add.w	r0, r4, #11
   15e0e:	f00d f892 	bl	22f36 <atoi>
   15e12:	6038      	str	r0, [r7, #0]
	if (match) {
   15e14:	e7dd      	b.n	15dd2 <get_return_code+0x3a>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   15e16:	3d08      	subs	r5, #8
   15e18:	1966      	adds	r6, r4, r5
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   15e1a:	4d0e      	ldr	r5, [pc, #56]	; (15e54 <get_return_code+0xbc>)
   15e1c:	4628      	mov	r0, r5
   15e1e:	f7fb f827 	bl	10e70 <strlen>
   15e22:	4602      	mov	r2, r0
   15e24:	4629      	mov	r1, r5
   15e26:	4630      	mov	r0, r6
   15e28:	f00d fa43 	bl	232b2 <strncmp>
   15e2c:	2800      	cmp	r0, #0
   15e2e:	bf0c      	ite	eq
   15e30:	2201      	moveq	r2, #1
   15e32:	2200      	movne	r2, #0
		if (match) {
   15e34:	d1cb      	bne.n	15dce <get_return_code+0x36>
			ret->state = AT_CMD_ERROR;
   15e36:	2301      	movs	r3, #1
   15e38:	713b      	strb	r3, [r7, #4]
			ret->code  = -ENOEXEC;
   15e3a:	f06f 0307 	mvn.w	r3, #7
   15e3e:	603b      	str	r3, [r7, #0]
			break;
   15e40:	e7c5      	b.n	15dce <get_return_code+0x36>
		new_len = strlen(buf) + 1;
   15e42:	4620      	mov	r0, r4
   15e44:	f7fb f814 	bl	10e70 <strlen>
   15e48:	3001      	adds	r0, #1
	return new_len;
   15e4a:	e7c6      	b.n	15dda <get_return_code+0x42>
   15e4c:	00024820 	.word	0x00024820
   15e50:	0002482c 	.word	0x0002482c
   15e54:	00024838 	.word	0x00024838
   15e58:	00024818 	.word	0x00024818

00015e5c <open_socket>:
{
   15e5c:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   15e5e:	f240 2201 	movw	r2, #513	; 0x201
   15e62:	2102      	movs	r1, #2
   15e64:	2066      	movs	r0, #102	; 0x66
   15e66:	f7fd fb71 	bl	1354c <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   15e6a:	4b06      	ldr	r3, [pc, #24]	; (15e84 <open_socket+0x28>)
   15e6c:	6018      	str	r0, [r3, #0]
	if (common_socket_fd == -1) {
   15e6e:	f1b0 3fff 	cmp.w	r0, #4294967295
   15e72:	d001      	beq.n	15e78 <open_socket+0x1c>
	return 0;
   15e74:	2000      	movs	r0, #0
}
   15e76:	bd08      	pop	{r3, pc}
		return -errno;
   15e78:	f009 fe63 	bl	1fb42 <__errno>
   15e7c:	6800      	ldr	r0, [r0, #0]
   15e7e:	4240      	negs	r0, r0
   15e80:	e7f9      	b.n	15e76 <open_socket+0x1a>
   15e82:	bf00      	nop
   15e84:	200168c4 	.word	0x200168c4

00015e88 <socket_thread_fn>:

static void socket_thread_fn(void *arg1, void *arg2, void *arg3)
{
   15e88:	b510      	push	{r4, lr}
   15e8a:	b082      	sub	sp, #8
   15e8c:	e026      	b.n	15edc <socket_thread_fn+0x54>
		ret.state = AT_CMD_OK;

		/* Handle possible socket-level errors */

		if (bytes_read < 0) {
			if (errno == EHOSTDOWN) {
   15e8e:	f009 fe58 	bl	1fb42 <__errno>
   15e92:	6803      	ldr	r3, [r0, #0]
   15e94:	2b75      	cmp	r3, #117	; 0x75
   15e96:	d03f      	beq.n	15f18 <socket_thread_fn+0x90>
			} else {
				LOG_ERR("AT socket recv failed with err %d",
					errno);
			}

			if ((close(common_socket_fd) == 0) &&
   15e98:	4b4f      	ldr	r3, [pc, #316]	; (15fd8 <socket_thread_fn+0x150>)
   15e9a:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_close(sock);
   15e9c:	f009 fbbb 	bl	1f616 <z_impl_zsock_close>
   15ea0:	2800      	cmp	r0, #0
   15ea2:	d151      	bne.n	15f48 <socket_thread_fn+0xc0>
			    (open_socket() == 0)) {
   15ea4:	f7ff ffda 	bl	15e5c <open_socket>
			if ((close(common_socket_fd) == 0) &&
   15ea8:	2800      	cmp	r0, #0
   15eaa:	d14d      	bne.n	15f48 <socket_thread_fn+0xc0>
				LOG_INF("AT socket recovered");
				ret.state = AT_CMD_ERROR_READ;
   15eac:	4c4b      	ldr	r4, [pc, #300]	; (15fdc <socket_thread_fn+0x154>)
   15eae:	2306      	movs	r3, #6
   15eb0:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   15eb2:	f009 fe46 	bl	1fb42 <__errno>
   15eb6:	6803      	ldr	r3, [r0, #0]
   15eb8:	425b      	negs	r3, r3
   15eba:	6023      	str	r3, [r4, #0]
			current_cmd.callback(buf);
		}

next:
		/* Dispatch response for sync call */
		if (current_cmd.cmd != NULL &&
   15ebc:	4b48      	ldr	r3, [pc, #288]	; (15fe0 <socket_thread_fn+0x158>)
   15ebe:	681b      	ldr	r3, [r3, #0]
   15ec0:	b143      	cbz	r3, 15ed4 <socket_thread_fn+0x4c>
		    current_cmd.flags & AT_CMD_SYNC &&
   15ec2:	4b47      	ldr	r3, [pc, #284]	; (15fe0 <socket_thread_fn+0x158>)
   15ec4:	7c1b      	ldrb	r3, [r3, #16]
		if (current_cmd.cmd != NULL &&
   15ec6:	f013 0f02 	tst.w	r3, #2
   15eca:	d003      	beq.n	15ed4 <socket_thread_fn+0x4c>
		    ret.state != AT_CMD_NOTIFICATION) {
   15ecc:	4b43      	ldr	r3, [pc, #268]	; (15fdc <socket_thread_fn+0x154>)
   15ece:	791b      	ldrb	r3, [r3, #4]
		    current_cmd.flags & AT_CMD_SYNC &&
   15ed0:	2b07      	cmp	r3, #7
   15ed2:	d174      	bne.n	15fbe <socket_thread_fn+0x136>
			LOG_DBG("Enqueueing response for sync call");
			k_msgq_put(&response_sync, &ret, K_FOREVER);
		}

		/* We have now handled a command if it was not a notification */
		if (ret.state != AT_CMD_NOTIFICATION) {
   15ed4:	4b41      	ldr	r3, [pc, #260]	; (15fdc <socket_thread_fn+0x154>)
   15ed6:	791b      	ldrb	r3, [r3, #4]
   15ed8:	2b07      	cmp	r3, #7
   15eda:	d179      	bne.n	15fd0 <socket_thread_fn+0x148>
		load_cmd_and_write();
   15edc:	f7ff ff00 	bl	15ce0 <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   15ee0:	4b3d      	ldr	r3, [pc, #244]	; (15fd8 <socket_thread_fn+0x150>)
   15ee2:	6818      	ldr	r0, [r3, #0]
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&max_len, *(uintptr_t *)&flags, *(uintptr_t *)&src_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_RECVFROM);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   15ee4:	2400      	movs	r4, #0
   15ee6:	9401      	str	r4, [sp, #4]
   15ee8:	9400      	str	r4, [sp, #0]
   15eea:	4623      	mov	r3, r4
   15eec:	f640 228c 	movw	r2, #2700	; 0xa8c
   15ef0:	493c      	ldr	r1, [pc, #240]	; (15fe4 <socket_thread_fn+0x15c>)
   15ef2:	f009 fbe6 	bl	1f6c2 <z_impl_zsock_recvfrom>
		ret.code  = 0;
   15ef6:	4b39      	ldr	r3, [pc, #228]	; (15fdc <socket_thread_fn+0x154>)
   15ef8:	601c      	str	r4, [r3, #0]
		ret.state = AT_CMD_OK;
   15efa:	711c      	strb	r4, [r3, #4]
		if (bytes_read < 0) {
   15efc:	1e01      	subs	r1, r0, #0
   15efe:	dbc6      	blt.n	15e8e <socket_thread_fn+0x6>
		} else if (bytes_read == 0) {
   15f00:	b341      	cbz	r1, 15f54 <socket_thread_fn+0xcc>
		} else if (buf[bytes_read - 1] != '\0') {
   15f02:	1e4b      	subs	r3, r1, #1
   15f04:	4a37      	ldr	r2, [pc, #220]	; (15fe4 <socket_thread_fn+0x15c>)
   15f06:	5cd3      	ldrb	r3, [r2, r3]
   15f08:	b35b      	cbz	r3, 15f62 <socket_thread_fn+0xda>
			ret.state = AT_CMD_ERROR_READ;
   15f0a:	4b34      	ldr	r3, [pc, #208]	; (15fdc <socket_thread_fn+0x154>)
   15f0c:	2206      	movs	r2, #6
   15f0e:	711a      	strb	r2, [r3, #4]
			ret.code  = -ENOBUFS;
   15f10:	f06f 0268 	mvn.w	r2, #104	; 0x68
   15f14:	601a      	str	r2, [r3, #0]
			goto next;
   15f16:	e7d1      	b.n	15ebc <socket_thread_fn+0x34>
   15f18:	4c33      	ldr	r4, [pc, #204]	; (15fe8 <socket_thread_fn+0x160>)
   15f1a:	2301      	movs	r3, #1
   15f1c:	e8d4 2fef 	ldaex	r2, [r4]
   15f20:	e8c4 3fe1 	stlex	r1, r3, [r4]
   15f24:	2900      	cmp	r1, #0
   15f26:	d1f9      	bne.n	15f1c <socket_thread_fn+0x94>
				close(common_socket_fd);
   15f28:	4b2b      	ldr	r3, [pc, #172]	; (15fd8 <socket_thread_fn+0x150>)
   15f2a:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_close(sock);
   15f2c:	f009 fb73 	bl	1f616 <z_impl_zsock_close>
				nrf_modem_lib_shutdown_wait();
   15f30:	f7ff f90c 	bl	1514c <nrf_modem_lib_shutdown_wait>
   15f34:	2300      	movs	r3, #0
   15f36:	e8d4 2fef 	ldaex	r2, [r4]
   15f3a:	e8c4 3fe1 	stlex	r1, r3, [r4]
   15f3e:	2900      	cmp	r1, #0
   15f40:	d1f9      	bne.n	15f36 <socket_thread_fn+0xae>
				if (open_socket() != 0) {
   15f42:	f7ff ff8b 	bl	15e5c <open_socket>
				continue;
   15f46:	e7c9      	b.n	15edc <socket_thread_fn+0x54>
			close(common_socket_fd);
   15f48:	4b23      	ldr	r3, [pc, #140]	; (15fd8 <socket_thread_fn+0x150>)
   15f4a:	6818      	ldr	r0, [r3, #0]
   15f4c:	f009 fb63 	bl	1f616 <z_impl_zsock_close>
			complete_cmd();
		}
	}
}
   15f50:	b002      	add	sp, #8
   15f52:	bd10      	pop	{r4, pc}
			ret.state = AT_CMD_ERROR_READ;
   15f54:	4b21      	ldr	r3, [pc, #132]	; (15fdc <socket_thread_fn+0x154>)
   15f56:	2206      	movs	r2, #6
   15f58:	711a      	strb	r2, [r3, #4]
			ret.code  = -EBADMSG;
   15f5a:	f06f 024c 	mvn.w	r2, #76	; 0x4c
   15f5e:	601a      	str	r2, [r3, #0]
			goto next;
   15f60:	e7ac      	b.n	15ebc <socket_thread_fn+0x34>
		payload_len = get_return_code(buf, bytes_read, &ret);
   15f62:	4a1e      	ldr	r2, [pc, #120]	; (15fdc <socket_thread_fn+0x154>)
   15f64:	481f      	ldr	r0, [pc, #124]	; (15fe4 <socket_thread_fn+0x15c>)
   15f66:	f7ff ff17 	bl	15d98 <get_return_code>
		if (current_cmd.cmd != NULL &&
   15f6a:	4b1d      	ldr	r3, [pc, #116]	; (15fe0 <socket_thread_fn+0x158>)
   15f6c:	681b      	ldr	r3, [r3, #0]
   15f6e:	b17b      	cbz	r3, 15f90 <socket_thread_fn+0x108>
		    current_cmd.resp != NULL &&
   15f70:	4b1b      	ldr	r3, [pc, #108]	; (15fe0 <socket_thread_fn+0x158>)
   15f72:	685b      	ldr	r3, [r3, #4]
		if (current_cmd.cmd != NULL &&
   15f74:	b163      	cbz	r3, 15f90 <socket_thread_fn+0x108>
		    ret.state != AT_CMD_NOTIFICATION) {
   15f76:	4a19      	ldr	r2, [pc, #100]	; (15fdc <socket_thread_fn+0x154>)
   15f78:	7912      	ldrb	r2, [r2, #4]
		    current_cmd.resp != NULL &&
   15f7a:	2a07      	cmp	r2, #7
   15f7c:	d008      	beq.n	15f90 <socket_thread_fn+0x108>
			if (current_cmd.resp_size < payload_len) {
   15f7e:	4a18      	ldr	r2, [pc, #96]	; (15fe0 <socket_thread_fn+0x158>)
   15f80:	68d2      	ldr	r2, [r2, #12]
   15f82:	4290      	cmp	r0, r2
   15f84:	d80f      	bhi.n	15fa6 <socket_thread_fn+0x11e>
   15f86:	4602      	mov	r2, r0
   15f88:	4916      	ldr	r1, [pc, #88]	; (15fe4 <socket_thread_fn+0x15c>)
   15f8a:	4618      	mov	r0, r3
   15f8c:	f00c fff3 	bl	22f76 <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   15f90:	4b12      	ldr	r3, [pc, #72]	; (15fdc <socket_thread_fn+0x154>)
   15f92:	791b      	ldrb	r3, [r3, #4]
   15f94:	2b07      	cmp	r3, #7
   15f96:	d00b      	beq.n	15fb0 <socket_thread_fn+0x128>
		} else if (current_cmd.callback != NULL) {
   15f98:	4b11      	ldr	r3, [pc, #68]	; (15fe0 <socket_thread_fn+0x158>)
   15f9a:	689b      	ldr	r3, [r3, #8]
   15f9c:	2b00      	cmp	r3, #0
   15f9e:	d08d      	beq.n	15ebc <socket_thread_fn+0x34>
			current_cmd.callback(buf);
   15fa0:	4810      	ldr	r0, [pc, #64]	; (15fe4 <socket_thread_fn+0x15c>)
   15fa2:	4798      	blx	r3
   15fa4:	e78a      	b.n	15ebc <socket_thread_fn+0x34>
				ret.code  = -EMSGSIZE;
   15fa6:	4b0d      	ldr	r3, [pc, #52]	; (15fdc <socket_thread_fn+0x154>)
   15fa8:	f06f 0279 	mvn.w	r2, #121	; 0x79
   15fac:	601a      	str	r2, [r3, #0]
				goto next;
   15fae:	e785      	b.n	15ebc <socket_thread_fn+0x34>
		    notification_handler != NULL) {
   15fb0:	4b0e      	ldr	r3, [pc, #56]	; (15fec <socket_thread_fn+0x164>)
   15fb2:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   15fb4:	2b00      	cmp	r3, #0
   15fb6:	d0ef      	beq.n	15f98 <socket_thread_fn+0x110>
			notification_handler(buf);
   15fb8:	480a      	ldr	r0, [pc, #40]	; (15fe4 <socket_thread_fn+0x15c>)
   15fba:	4798      	blx	r3
   15fbc:	e77e      	b.n	15ebc <socket_thread_fn+0x34>
	return z_impl_k_msgq_put(msgq, data, timeout);
   15fbe:	f04f 32ff 	mov.w	r2, #4294967295
   15fc2:	f04f 33ff 	mov.w	r3, #4294967295
   15fc6:	4905      	ldr	r1, [pc, #20]	; (15fdc <socket_thread_fn+0x154>)
   15fc8:	4809      	ldr	r0, [pc, #36]	; (15ff0 <socket_thread_fn+0x168>)
   15fca:	f005 f9a3 	bl	1b314 <z_impl_k_msgq_put>
   15fce:	e781      	b.n	15ed4 <socket_thread_fn+0x4c>
			complete_cmd();
   15fd0:	f7ff fe72 	bl	15cb8 <complete_cmd>
   15fd4:	e782      	b.n	15edc <socket_thread_fn+0x54>
   15fd6:	bf00      	nop
   15fd8:	200168c4 	.word	0x200168c4
   15fdc:	200168e0 	.word	0x200168e0
   15fe0:	200168c8 	.word	0x200168c8
   15fe4:	20015e38 	.word	0x20015e38
   15fe8:	200168e8 	.word	0x200168e8
   15fec:	200168dc 	.word	0x200168dc
   15ff0:	20014894 	.word	0x20014894

00015ff4 <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   15ff4:	b510      	push	{r4, lr}
   15ff6:	b088      	sub	sp, #32
	return z_impl_k_mutex_lock(mutex, timeout);
   15ff8:	f04f 32ff 	mov.w	r2, #4294967295
   15ffc:	f04f 33ff 	mov.w	r3, #4294967295
   16000:	4818      	ldr	r0, [pc, #96]	; (16064 <at_cmd_driver_init+0x70>)
   16002:	f005 fa49 	bl	1b498 <z_impl_k_mutex_lock>
	k_mutex_lock(&at_cmd_init_mutex, K_FOREVER);
	static bool initialized;
	if (initialized) {
   16006:	4b18      	ldr	r3, [pc, #96]	; (16068 <at_cmd_driver_init+0x74>)
   16008:	781b      	ldrb	r3, [r3, #0]
   1600a:	bb0b      	cbnz	r3, 16050 <at_cmd_driver_init+0x5c>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   1600c:	f7ff ff26 	bl	15e5c <open_socket>
	if (err) {
   16010:	4604      	mov	r4, r0
   16012:	bb10      	cbnz	r0, 1605a <at_cmd_driver_init+0x66>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   16014:	2200      	movs	r2, #0
   16016:	2300      	movs	r3, #0
   16018:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1601c:	2300      	movs	r3, #0
   1601e:	9304      	str	r3, [sp, #16]
   16020:	220a      	movs	r2, #10
   16022:	9203      	str	r2, [sp, #12]
   16024:	9302      	str	r3, [sp, #8]
   16026:	9301      	str	r3, [sp, #4]
   16028:	9300      	str	r3, [sp, #0]
   1602a:	4b10      	ldr	r3, [pc, #64]	; (1606c <at_cmd_driver_init+0x78>)
   1602c:	f44f 62a8 	mov.w	r2, #1344	; 0x540
   16030:	490f      	ldr	r1, [pc, #60]	; (16070 <at_cmd_driver_init+0x7c>)
   16032:	4810      	ldr	r0, [pc, #64]	; (16074 <at_cmd_driver_init+0x80>)
   16034:	f00c fc3e 	bl	228b4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   16038:	490f      	ldr	r1, [pc, #60]	; (16078 <at_cmd_driver_init+0x84>)
   1603a:	f005 f887 	bl	1b14c <z_impl_k_thread_name_set>
				     NULL, NULL, NULL,
				     THREAD_PRIORITY, 0, K_NO_WAIT);
	k_thread_name_set(socket_tid, "at_cmd_socket_thread");

	LOG_DBG("Common AT socket processing thread created");
	initialized = true;
   1603e:	4b0a      	ldr	r3, [pc, #40]	; (16068 <at_cmd_driver_init+0x74>)
   16040:	2201      	movs	r2, #1
   16042:	701a      	strb	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   16044:	4807      	ldr	r0, [pc, #28]	; (16064 <at_cmd_driver_init+0x70>)
   16046:	f005 fab1 	bl	1b5ac <z_impl_k_mutex_unlock>
	k_mutex_unlock(&at_cmd_init_mutex);
	return 0;
}
   1604a:	4620      	mov	r0, r4
   1604c:	b008      	add	sp, #32
   1604e:	bd10      	pop	{r4, pc}
   16050:	4804      	ldr	r0, [pc, #16]	; (16064 <at_cmd_driver_init+0x70>)
   16052:	f005 faab 	bl	1b5ac <z_impl_k_mutex_unlock>
		return 0;
   16056:	2400      	movs	r4, #0
   16058:	e7f7      	b.n	1604a <at_cmd_driver_init+0x56>
   1605a:	4802      	ldr	r0, [pc, #8]	; (16064 <at_cmd_driver_init+0x70>)
   1605c:	f005 faa6 	bl	1b5ac <z_impl_k_mutex_unlock>
		return err;
   16060:	e7f3      	b.n	1604a <at_cmd_driver_init+0x56>
   16062:	bf00      	nop
   16064:	20014794 	.word	0x20014794
   16068:	20016c81 	.word	0x20016c81
   1606c:	00015e89 	.word	0x00015e89
   16070:	20016ee0 	.word	0x20016ee0
   16074:	20014dd8 	.word	0x20014dd8
   16078:	00024840 	.word	0x00024840

0001607c <at_cmd_write>:
{
   1607c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1607e:	b089      	sub	sp, #36	; 0x24
   16080:	461d      	mov	r5, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16082:	4b26      	ldr	r3, [pc, #152]	; (1611c <at_cmd_write+0xa0>)
   16084:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   16088:	2b01      	cmp	r3, #1
   1608a:	d044      	beq.n	16116 <at_cmd_write+0x9a>
   1608c:	4604      	mov	r4, r0
   1608e:	460f      	mov	r7, r1
   16090:	4616      	mov	r6, r2
	if (cmd == NULL) {
   16092:	b308      	cbz	r0, 160d8 <at_cmd_write+0x5c>
	if (check_cmd(cmd)) {
   16094:	f00a fe2f 	bl	20cf6 <check_cmd>
   16098:	bb20      	cbnz	r0, 160e4 <at_cmd_write+0x68>
	command.cmd = (char *)cmd;
   1609a:	9403      	str	r4, [sp, #12]
	command.resp = buf;
   1609c:	9704      	str	r7, [sp, #16]
	command.resp_size = buf_len;
   1609e:	9606      	str	r6, [sp, #24]
	command.callback = NULL;
   160a0:	2300      	movs	r3, #0
   160a2:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   160a4:	2302      	movs	r3, #2
   160a6:	f88d 301c 	strb.w	r3, [sp, #28]
	k_mutex_lock(&response_sync_get, K_FOREVER);
   160aa:	f04f 36ff 	mov.w	r6, #4294967295
   160ae:	f04f 37ff 	mov.w	r7, #4294967295
	return z_impl_k_mutex_lock(mutex, timeout);
   160b2:	4632      	mov	r2, r6
   160b4:	463b      	mov	r3, r7
   160b6:	481a      	ldr	r0, [pc, #104]	; (16120 <at_cmd_write+0xa4>)
   160b8:	f005 f9ee 	bl	1b498 <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   160bc:	4632      	mov	r2, r6
   160be:	463b      	mov	r3, r7
   160c0:	a903      	add	r1, sp, #12
   160c2:	4818      	ldr	r0, [pc, #96]	; (16124 <at_cmd_write+0xa8>)
   160c4:	f005 f926 	bl	1b314 <z_impl_k_msgq_put>
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   160c8:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   160ca:	b188      	cbz	r0, 160f0 <at_cmd_write+0x74>
		if (state) {
   160cc:	b10d      	cbz	r5, 160d2 <at_cmd_write+0x56>
			*state = AT_CMD_ERROR_QUEUE;
   160ce:	2304      	movs	r3, #4
   160d0:	702b      	strb	r3, [r5, #0]
		return ret.code;
   160d2:	9801      	ldr	r0, [sp, #4]
}
   160d4:	b009      	add	sp, #36	; 0x24
   160d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (state) {
   160d8:	b10d      	cbz	r5, 160de <at_cmd_write+0x62>
			*state = AT_CMD_ERROR_QUEUE;
   160da:	2304      	movs	r3, #4
   160dc:	702b      	strb	r3, [r5, #0]
		return -EINVAL;
   160de:	f06f 0015 	mvn.w	r0, #21
   160e2:	e7f7      	b.n	160d4 <at_cmd_write+0x58>
		if (state) {
   160e4:	b10d      	cbz	r5, 160ea <at_cmd_write+0x6e>
			*state = AT_CMD_ERROR_QUEUE;
   160e6:	2304      	movs	r3, #4
   160e8:	702b      	strb	r3, [r5, #0]
		return -EINVAL;
   160ea:	f06f 0015 	mvn.w	r0, #21
   160ee:	e7f1      	b.n	160d4 <at_cmd_write+0x58>
	load_cmd_and_write();
   160f0:	f7ff fdf6 	bl	15ce0 <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   160f4:	f04f 32ff 	mov.w	r2, #4294967295
   160f8:	f04f 33ff 	mov.w	r3, #4294967295
   160fc:	a901      	add	r1, sp, #4
   160fe:	480a      	ldr	r0, [pc, #40]	; (16128 <at_cmd_write+0xac>)
   16100:	f005 f966 	bl	1b3d0 <z_impl_k_msgq_get>
	return z_impl_k_mutex_unlock(mutex);
   16104:	4806      	ldr	r0, [pc, #24]	; (16120 <at_cmd_write+0xa4>)
   16106:	f005 fa51 	bl	1b5ac <z_impl_k_mutex_unlock>
	if (state) {
   1610a:	b115      	cbz	r5, 16112 <at_cmd_write+0x96>
		*state = ret.state;
   1610c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   16110:	702b      	strb	r3, [r5, #0]
	return ret.code;
   16112:	9801      	ldr	r0, [sp, #4]
   16114:	e7de      	b.n	160d4 <at_cmd_write+0x58>
		return -EHOSTDOWN;
   16116:	f06f 0074 	mvn.w	r0, #116	; 0x74
   1611a:	e7db      	b.n	160d4 <at_cmd_write+0x58>
   1611c:	200168e8 	.word	0x200168e8
   16120:	2001480c 	.word	0x2001480c
   16124:	20014834 	.word	0x20014834
   16128:	20014894 	.word	0x20014894

0001612c <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   1612c:	b570      	push	{r4, r5, r6, lr}
   1612e:	b084      	sub	sp, #16
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);
   16130:	481d      	ldr	r0, [pc, #116]	; (161a8 <check_ext_api_requests+0x7c>)
   16132:	f00a fe0c 	bl	20d4e <skip_ext_apis>
   16136:	4604      	mov	r4, r0

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16138:	2600      	movs	r6, #0
   1613a:	e00a      	b.n	16152 <check_ext_api_requests+0x26>
	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
		== 0) {
		return ext_api;
	}
	return NULL;
   1613c:	2500      	movs	r5, #0
   1613e:	e01a      	b.n	16176 <check_ext_api_requests+0x4a>
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   16140:	481a      	ldr	r0, [pc, #104]	; (161ac <check_ext_api_requests+0x80>)
   16142:	f007 ff0e 	bl	1df62 <printk>
				"fulfilled.\r\n");
			*ext_api_req->ext_api = NULL;
   16146:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16148:	2200      	movs	r2, #0
   1614a:	601a      	str	r2, [r3, #0]
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
   1614c:	68e3      	ldr	r3, [r4, #12]
   1614e:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   16150:	3601      	adds	r6, #1
   16152:	4b15      	ldr	r3, [pc, #84]	; (161a8 <check_ext_api_requests+0x7c>)
   16154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16156:	42b3      	cmp	r3, r6
   16158:	d922      	bls.n	161a0 <check_ext_api_requests+0x74>
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   1615a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1615c:	681d      	ldr	r5, [r3, #0]
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   1615e:	ab01      	add	r3, sp, #4
   16160:	4a13      	ldr	r2, [pc, #76]	; (161b0 <check_ext_api_requests+0x84>)
   16162:	ca07      	ldmia	r2, {r0, r1, r2}
   16164:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   16168:	220c      	movs	r2, #12
   1616a:	4619      	mov	r1, r3
   1616c:	4628      	mov	r0, r5
   1616e:	f00c fef4 	bl	22f5a <memcmp>
   16172:	2800      	cmp	r0, #0
   16174:	d1e2      	bne.n	1613c <check_ext_api_requests+0x10>
   16176:	b135      	cbz	r5, 16186 <check_ext_api_requests+0x5a>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   16178:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1617a:	4621      	mov	r1, r4
   1617c:	6818      	ldr	r0, [r3, #0]
   1617e:	f00a fdca 	bl	20d16 <ext_api_satisfies_req>
   16182:	2800      	cmp	r0, #0
   16184:	d1e2      	bne.n	1614c <check_ext_api_requests+0x20>
		} else if (ext_api_req->required) {
   16186:	6a23      	ldr	r3, [r4, #32]
   16188:	2b00      	cmp	r3, #0
   1618a:	d0d9      	beq.n	16140 <check_ext_api_requests+0x14>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   1618c:	4809      	ldr	r0, [pc, #36]	; (161b4 <check_ext_api_requests+0x88>)
   1618e:	f007 fee8 	bl	1df62 <printk>
			k_panic();
   16192:	4040      	eors	r0, r0
   16194:	f380 8811 	msr	BASEPRI, r0
   16198:	f04f 0004 	mov.w	r0, #4
   1619c:	df02      	svc	2
   1619e:	e7d5      	b.n	1614c <check_ext_api_requests+0x20>
	}

	return 0;
}
   161a0:	2000      	movs	r0, #0
   161a2:	b004      	add	sp, #16
   161a4:	bd70      	pop	{r4, r5, r6, pc}
   161a6:	bf00      	nop
   161a8:	00010200 	.word	0x00010200
   161ac:	00024884 	.word	0x00024884
   161b0:	0002416c 	.word	0x0002416c
   161b4:	00024858 	.word	0x00024858

000161b8 <compare_double>:
{
   161b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   161ba:	ed2d 8b04 	vpush	{d8-d9}
   161be:	ec41 0b18 	vmov	d8, r0, r1
   161c2:	ec43 2b19 	vmov	d9, r2, r3
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   161c6:	ec41 0b10 	vmov	d0, r0, r1
   161ca:	f006 fc7d 	bl	1cac8 <fabs>
   161ce:	ec55 4b10 	vmov	r4, r5, d0
   161d2:	eeb0 0a49 	vmov.f32	s0, s18
   161d6:	eef0 0a69 	vmov.f32	s1, s19
   161da:	f006 fc75 	bl	1cac8 <fabs>
   161de:	ec53 2b10 	vmov	r2, r3, d0
   161e2:	4620      	mov	r0, r4
   161e4:	4629      	mov	r1, r5
   161e6:	f7fa fc77 	bl	10ad8 <__aeabi_dcmpgt>
   161ea:	b330      	cbz	r0, 1623a <compare_double+0x82>
   161ec:	eeb0 0a48 	vmov.f32	s0, s16
   161f0:	eef0 0a68 	vmov.f32	s1, s17
   161f4:	f006 fc68 	bl	1cac8 <fabs>
   161f8:	ec57 6b10 	vmov	r6, r7, d0
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
   161fc:	ec53 2b19 	vmov	r2, r3, d9
   16200:	ec51 0b18 	vmov	r0, r1, d8
   16204:	f7fa f820 	bl	10248 <__aeabi_dsub>
   16208:	ec41 0b10 	vmov	d0, r0, r1
   1620c:	f006 fc5c 	bl	1cac8 <fabs>
   16210:	ec55 4b10 	vmov	r4, r5, d0
   16214:	2200      	movs	r2, #0
   16216:	4b0d      	ldr	r3, [pc, #52]	; (1624c <compare_double+0x94>)
   16218:	4630      	mov	r0, r6
   1621a:	4639      	mov	r1, r7
   1621c:	f7fa f9cc 	bl	105b8 <__aeabi_dmul>
   16220:	4602      	mov	r2, r0
   16222:	460b      	mov	r3, r1
   16224:	2601      	movs	r6, #1
   16226:	4620      	mov	r0, r4
   16228:	4629      	mov	r1, r5
   1622a:	f7fa fc41 	bl	10ab0 <__aeabi_dcmple>
   1622e:	b900      	cbnz	r0, 16232 <compare_double+0x7a>
   16230:	2600      	movs	r6, #0
}
   16232:	4630      	mov	r0, r6
   16234:	ecbd 8b04 	vpop	{d8-d9}
   16238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   1623a:	eeb0 0a49 	vmov.f32	s0, s18
   1623e:	eef0 0a69 	vmov.f32	s1, s19
   16242:	f006 fc41 	bl	1cac8 <fabs>
   16246:	ec57 6b10 	vmov	r6, r7, d0
   1624a:	e7d7      	b.n	161fc <compare_double+0x44>
   1624c:	3cb00000 	.word	0x3cb00000

00016250 <print_number>:
{
   16250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16254:	b08d      	sub	sp, #52	; 0x34
   16256:	460c      	mov	r4, r1
    double d = item->valuedouble;
   16258:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   1625c:	2300      	movs	r3, #0
   1625e:	9305      	str	r3, [sp, #20]
   16260:	9306      	str	r3, [sp, #24]
   16262:	9307      	str	r3, [sp, #28]
   16264:	9308      	str	r3, [sp, #32]
   16266:	9309      	str	r3, [sp, #36]	; 0x24
   16268:	930a      	str	r3, [sp, #40]	; 0x28
   1626a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    unsigned char decimal_point = get_decimal_point();
   1626e:	f00a fd79 	bl	20d64 <get_decimal_point>
    double test = 0.0;
   16272:	2200      	movs	r2, #0
   16274:	2300      	movs	r3, #0
   16276:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (output_buffer == NULL)
   1627a:	2c00      	cmp	r4, #0
   1627c:	d067      	beq.n	1634e <print_number+0xfe>
   1627e:	4605      	mov	r5, r0
    if (isnan(d) || isinf(d))
   16280:	4632      	mov	r2, r6
   16282:	463b      	mov	r3, r7
   16284:	4630      	mov	r0, r6
   16286:	4639      	mov	r1, r7
   16288:	f7fa fc30 	bl	10aec <__aeabi_dcmpun>
   1628c:	b988      	cbnz	r0, 162b2 <print_number+0x62>
   1628e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   16292:	f04f 32ff 	mov.w	r2, #4294967295
   16296:	4b30      	ldr	r3, [pc, #192]	; (16358 <print_number+0x108>)
   16298:	4630      	mov	r0, r6
   1629a:	4649      	mov	r1, r9
   1629c:	f7fa fc26 	bl	10aec <__aeabi_dcmpun>
   162a0:	b9b8      	cbnz	r0, 162d2 <print_number+0x82>
   162a2:	f04f 32ff 	mov.w	r2, #4294967295
   162a6:	4b2c      	ldr	r3, [pc, #176]	; (16358 <print_number+0x108>)
   162a8:	4630      	mov	r0, r6
   162aa:	4649      	mov	r1, r9
   162ac:	f7fa fc00 	bl	10ab0 <__aeabi_dcmple>
   162b0:	b978      	cbnz	r0, 162d2 <print_number+0x82>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   162b2:	4b2a      	ldr	r3, [pc, #168]	; (1635c <print_number+0x10c>)
   162b4:	e893 0003 	ldmia.w	r3, {r0, r1}
   162b8:	9005      	str	r0, [sp, #20]
   162ba:	f88d 1018 	strb.w	r1, [sp, #24]
   162be:	f04f 0804 	mov.w	r8, #4
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   162c2:	4646      	mov	r6, r8
   162c4:	f1b8 0f19 	cmp.w	r8, #25
   162c8:	d924      	bls.n	16314 <print_number+0xc4>
        return false;
   162ca:	2000      	movs	r0, #0
}
   162cc:	b00d      	add	sp, #52	; 0x34
   162ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   162d2:	e9cd 6700 	strd	r6, r7, [sp]
   162d6:	4a22      	ldr	r2, [pc, #136]	; (16360 <print_number+0x110>)
   162d8:	211a      	movs	r1, #26
   162da:	a805      	add	r0, sp, #20
   162dc:	f007 f82c 	bl	1d338 <sniprintf>
   162e0:	4680      	mov	r8, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   162e2:	aa02      	add	r2, sp, #8
   162e4:	491f      	ldr	r1, [pc, #124]	; (16364 <print_number+0x114>)
   162e6:	a805      	add	r0, sp, #20
   162e8:	f007 f85a 	bl	1d3a0 <siscanf>
   162ec:	2801      	cmp	r0, #1
   162ee:	d008      	beq.n	16302 <print_number+0xb2>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   162f0:	e9cd 6700 	strd	r6, r7, [sp]
   162f4:	4a1c      	ldr	r2, [pc, #112]	; (16368 <print_number+0x118>)
   162f6:	211a      	movs	r1, #26
   162f8:	a805      	add	r0, sp, #20
   162fa:	f007 f81d 	bl	1d338 <sniprintf>
   162fe:	4680      	mov	r8, r0
   16300:	e7df      	b.n	162c2 <print_number+0x72>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   16302:	4632      	mov	r2, r6
   16304:	463b      	mov	r3, r7
   16306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1630a:	f7ff ff55 	bl	161b8 <compare_double>
   1630e:	2800      	cmp	r0, #0
   16310:	d1d7      	bne.n	162c2 <print_number+0x72>
   16312:	e7ed      	b.n	162f0 <print_number+0xa0>
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   16314:	f108 0101 	add.w	r1, r8, #1
   16318:	4620      	mov	r0, r4
   1631a:	f00a fda2 	bl	20e62 <ensure>
    if (output_pointer == NULL)
   1631e:	4601      	mov	r1, r0
   16320:	b1b8      	cbz	r0, 16352 <print_number+0x102>
    for (i = 0; i < ((size_t)length); i++)
   16322:	2300      	movs	r3, #0
   16324:	e002      	b.n	1632c <print_number+0xdc>
            output_pointer[i] = '.';
   16326:	222e      	movs	r2, #46	; 0x2e
   16328:	54ca      	strb	r2, [r1, r3]
    for (i = 0; i < ((size_t)length); i++)
   1632a:	3301      	adds	r3, #1
   1632c:	429e      	cmp	r6, r3
   1632e:	d907      	bls.n	16340 <print_number+0xf0>
        if (number_buffer[i] == decimal_point)
   16330:	aa0c      	add	r2, sp, #48	; 0x30
   16332:	441a      	add	r2, r3
   16334:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
   16338:	42aa      	cmp	r2, r5
   1633a:	d0f4      	beq.n	16326 <print_number+0xd6>
        output_pointer[i] = number_buffer[i];
   1633c:	54ca      	strb	r2, [r1, r3]
   1633e:	e7f4      	b.n	1632a <print_number+0xda>
    output_pointer[i] = '\0';
   16340:	2200      	movs	r2, #0
   16342:	54ca      	strb	r2, [r1, r3]
    output_buffer->offset += (size_t)length;
   16344:	68a3      	ldr	r3, [r4, #8]
   16346:	441e      	add	r6, r3
   16348:	60a6      	str	r6, [r4, #8]
    return true;
   1634a:	2001      	movs	r0, #1
   1634c:	e7be      	b.n	162cc <print_number+0x7c>
        return false;
   1634e:	2000      	movs	r0, #0
   16350:	e7bc      	b.n	162cc <print_number+0x7c>
        return false;
   16352:	2000      	movs	r0, #0
   16354:	e7ba      	b.n	162cc <print_number+0x7c>
   16356:	bf00      	nop
   16358:	7fefffff 	.word	0x7fefffff
   1635c:	000248b8 	.word	0x000248b8
   16360:	000248c0 	.word	0x000248c0
   16364:	000248c8 	.word	0x000248c8
   16368:	000248cc 	.word	0x000248cc

0001636c <print_string_ptr>:
{
   1636c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16370:	b082      	sub	sp, #8
    const char quotes[] = "\"\"";
   16372:	4b58      	ldr	r3, [pc, #352]	; (164d4 <print_string_ptr+0x168>)
   16374:	681b      	ldr	r3, [r3, #0]
   16376:	f8ad 3004 	strh.w	r3, [sp, #4]
   1637a:	0c1b      	lsrs	r3, r3, #16
   1637c:	f88d 3006 	strb.w	r3, [sp, #6]
    if (output_buffer == NULL)
   16380:	2900      	cmp	r1, #0
   16382:	f000 80a0 	beq.w	164c6 <print_string_ptr+0x15a>
   16386:	4604      	mov	r4, r0
   16388:	460e      	mov	r6, r1
    if (input == NULL)
   1638a:	b108      	cbz	r0, 16390 <print_string_ptr+0x24>
    size_t escape_characters = 0;
   1638c:	2500      	movs	r5, #0
   1638e:	e016      	b.n	163be <print_string_ptr+0x52>
        output = ensure(output_buffer, sizeof(quotes));
   16390:	2103      	movs	r1, #3
   16392:	4630      	mov	r0, r6
   16394:	f00a fd65 	bl	20e62 <ensure>
        if (output == NULL)
   16398:	2800      	cmp	r0, #0
   1639a:	f000 8096 	beq.w	164ca <print_string_ptr+0x15e>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   1639e:	6871      	ldr	r1, [r6, #4]
   163a0:	68b2      	ldr	r2, [r6, #8]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   163a2:	1a8a      	subs	r2, r1, r2
   163a4:	a901      	add	r1, sp, #4
   163a6:	f00c ff96 	bl	232d6 <strncpy>
        return true;
   163aa:	2001      	movs	r0, #1
   163ac:	e088      	b.n	164c0 <print_string_ptr+0x154>
        switch (*input_pointer)
   163ae:	2b5c      	cmp	r3, #92	; 0x5c
   163b0:	d003      	beq.n	163ba <print_string_ptr+0x4e>
                if (*input_pointer < 32)
   163b2:	2b1f      	cmp	r3, #31
   163b4:	d802      	bhi.n	163bc <print_string_ptr+0x50>
                    escape_characters += 5;
   163b6:	3505      	adds	r5, #5
   163b8:	e000      	b.n	163bc <print_string_ptr+0x50>
                escape_characters++;
   163ba:	3501      	adds	r5, #1
    for (input_pointer = input; *input_pointer; input_pointer++)
   163bc:	3001      	adds	r0, #1
   163be:	7803      	ldrb	r3, [r0, #0]
   163c0:	b163      	cbz	r3, 163dc <print_string_ptr+0x70>
        switch (*input_pointer)
   163c2:	2b22      	cmp	r3, #34	; 0x22
   163c4:	d8f3      	bhi.n	163ae <print_string_ptr+0x42>
   163c6:	2b08      	cmp	r3, #8
   163c8:	d3f3      	bcc.n	163b2 <print_string_ptr+0x46>
   163ca:	f1a3 0208 	sub.w	r2, r3, #8
   163ce:	b2d1      	uxtb	r1, r2
   163d0:	2201      	movs	r2, #1
   163d2:	408a      	lsls	r2, r1
   163d4:	4940      	ldr	r1, [pc, #256]	; (164d8 <print_string_ptr+0x16c>)
   163d6:	420a      	tst	r2, r1
   163d8:	d0eb      	beq.n	163b2 <print_string_ptr+0x46>
   163da:	e7ee      	b.n	163ba <print_string_ptr+0x4e>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   163dc:	1b00      	subs	r0, r0, r4
   163de:	1947      	adds	r7, r0, r5
    output = ensure(output_buffer, output_length + sizeof(quotes));
   163e0:	1cf9      	adds	r1, r7, #3
   163e2:	4630      	mov	r0, r6
   163e4:	f00a fd3d 	bl	20e62 <ensure>
    if (output == NULL)
   163e8:	4680      	mov	r8, r0
   163ea:	2800      	cmp	r0, #0
   163ec:	d06f      	beq.n	164ce <print_string_ptr+0x162>
    if (escape_characters == 0)
   163ee:	b125      	cbz	r5, 163fa <print_string_ptr+0x8e>
    output[0] = '\"';
   163f0:	4605      	mov	r5, r0
   163f2:	2322      	movs	r3, #34	; 0x22
   163f4:	f805 3b01 	strb.w	r3, [r5], #1
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   163f8:	e031      	b.n	1645e <print_string_ptr+0xf2>
        output[0] = '\"';
   163fa:	2522      	movs	r5, #34	; 0x22
   163fc:	f800 5b01 	strb.w	r5, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16400:	463a      	mov	r2, r7
   16402:	4621      	mov	r1, r4
   16404:	f00c fdb7 	bl	22f76 <memcpy>
        output[output_length + 1] = '\"';
   16408:	1c7b      	adds	r3, r7, #1
   1640a:	f808 5003 	strb.w	r5, [r8, r3]
        output[output_length + 2] = '\0';
   1640e:	3702      	adds	r7, #2
   16410:	2300      	movs	r3, #0
   16412:	f808 3007 	strb.w	r3, [r8, r7]
        return true;
   16416:	2001      	movs	r0, #1
   16418:	e052      	b.n	164c0 <print_string_ptr+0x154>
            *output_pointer++ = '\\';
   1641a:	4628      	mov	r0, r5
   1641c:	235c      	movs	r3, #92	; 0x5c
   1641e:	f800 3b01 	strb.w	r3, [r0], #1
            switch (*input_pointer)
   16422:	7823      	ldrb	r3, [r4, #0]
   16424:	2b22      	cmp	r3, #34	; 0x22
   16426:	d815      	bhi.n	16454 <print_string_ptr+0xe8>
   16428:	2b08      	cmp	r3, #8
   1642a:	d335      	bcc.n	16498 <print_string_ptr+0x12c>
   1642c:	f1a3 0208 	sub.w	r2, r3, #8
   16430:	2a1a      	cmp	r2, #26
   16432:	d831      	bhi.n	16498 <print_string_ptr+0x12c>
   16434:	e8df f002 	tbb	[pc, r2]
   16438:	30272d21 	.word	0x30272d21
   1643c:	30302a24 	.word	0x30302a24
   16440:	30303030 	.word	0x30303030
   16444:	30303030 	.word	0x30303030
   16448:	30303030 	.word	0x30303030
   1644c:	30303030 	.word	0x30303030
   16450:	3030      	.short	0x3030
   16452:	1e          	.byte	0x1e
   16453:	00          	.byte	0x00
   16454:	2b5c      	cmp	r3, #92	; 0x5c
   16456:	d11f      	bne.n	16498 <print_string_ptr+0x12c>
                    *output_pointer = '\\';
   16458:	706b      	strb	r3, [r5, #1]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   1645a:	3401      	adds	r4, #1
   1645c:	1c45      	adds	r5, r0, #1
   1645e:	7823      	ldrb	r3, [r4, #0]
   16460:	b32b      	cbz	r3, 164ae <print_string_ptr+0x142>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   16462:	2b1f      	cmp	r3, #31
   16464:	d9d9      	bls.n	1641a <print_string_ptr+0xae>
   16466:	2b22      	cmp	r3, #34	; 0x22
   16468:	d0d7      	beq.n	1641a <print_string_ptr+0xae>
   1646a:	2b5c      	cmp	r3, #92	; 0x5c
   1646c:	d0d5      	beq.n	1641a <print_string_ptr+0xae>
            *output_pointer = *input_pointer;
   1646e:	702b      	strb	r3, [r5, #0]
   16470:	4628      	mov	r0, r5
   16472:	e7f2      	b.n	1645a <print_string_ptr+0xee>
                    *output_pointer = '\"';
   16474:	2322      	movs	r3, #34	; 0x22
   16476:	706b      	strb	r3, [r5, #1]
                    break;
   16478:	e7ef      	b.n	1645a <print_string_ptr+0xee>
                    *output_pointer = 'b';
   1647a:	2362      	movs	r3, #98	; 0x62
   1647c:	706b      	strb	r3, [r5, #1]
                    break;
   1647e:	e7ec      	b.n	1645a <print_string_ptr+0xee>
                    *output_pointer = 'f';
   16480:	2366      	movs	r3, #102	; 0x66
   16482:	706b      	strb	r3, [r5, #1]
                    break;
   16484:	e7e9      	b.n	1645a <print_string_ptr+0xee>
                    *output_pointer = 'n';
   16486:	236e      	movs	r3, #110	; 0x6e
   16488:	706b      	strb	r3, [r5, #1]
                    break;
   1648a:	e7e6      	b.n	1645a <print_string_ptr+0xee>
                    *output_pointer = 'r';
   1648c:	2372      	movs	r3, #114	; 0x72
   1648e:	706b      	strb	r3, [r5, #1]
                    break;
   16490:	e7e3      	b.n	1645a <print_string_ptr+0xee>
                    *output_pointer = 't';
   16492:	2374      	movs	r3, #116	; 0x74
   16494:	706b      	strb	r3, [r5, #1]
                    break;
   16496:	e7e0      	b.n	1645a <print_string_ptr+0xee>
                    snprintf((char*)output_pointer, output_buffer->length - (size_t)(output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   16498:	6871      	ldr	r1, [r6, #4]
   1649a:	6832      	ldr	r2, [r6, #0]
   1649c:	eba0 0c02 	sub.w	ip, r0, r2
   164a0:	4a0e      	ldr	r2, [pc, #56]	; (164dc <print_string_ptr+0x170>)
   164a2:	eba1 010c 	sub.w	r1, r1, ip
   164a6:	f006 ff47 	bl	1d338 <sniprintf>
                    output_pointer += 4;
   164aa:	1d68      	adds	r0, r5, #5
                    break;
   164ac:	e7d5      	b.n	1645a <print_string_ptr+0xee>
    output[output_length + 1] = '\"';
   164ae:	1c7b      	adds	r3, r7, #1
   164b0:	2222      	movs	r2, #34	; 0x22
   164b2:	f808 2003 	strb.w	r2, [r8, r3]
    output[output_length + 2] = '\0';
   164b6:	3702      	adds	r7, #2
   164b8:	2300      	movs	r3, #0
   164ba:	f808 3007 	strb.w	r3, [r8, r7]
    return true;
   164be:	2001      	movs	r0, #1
}
   164c0:	b002      	add	sp, #8
   164c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return false;
   164c6:	2000      	movs	r0, #0
   164c8:	e7fa      	b.n	164c0 <print_string_ptr+0x154>
            return false;
   164ca:	2000      	movs	r0, #0
   164cc:	e7f8      	b.n	164c0 <print_string_ptr+0x154>
        return false;
   164ce:	2000      	movs	r0, #0
   164d0:	e7f6      	b.n	164c0 <print_string_ptr+0x154>
   164d2:	bf00      	nop
   164d4:	000248dc 	.word	0x000248dc
   164d8:	04000037 	.word	0x04000037
   164dc:	000248d4 	.word	0x000248d4

000164e0 <print_value>:
{
   164e0:	b570      	push	{r4, r5, r6, lr}
   164e2:	b082      	sub	sp, #8
    if ((item == NULL) || (output_buffer == NULL))
   164e4:	2800      	cmp	r0, #0
   164e6:	f000 8085 	beq.w	165f4 <print_value+0x114>
   164ea:	460d      	mov	r5, r1
   164ec:	4606      	mov	r6, r0
   164ee:	2900      	cmp	r1, #0
   164f0:	f000 8082 	beq.w	165f8 <print_value+0x118>
    switch ((item->type) & 0xFF)
   164f4:	7b04      	ldrb	r4, [r0, #12]
   164f6:	2c20      	cmp	r4, #32
   164f8:	dc16      	bgt.n	16528 <print_value+0x48>
   164fa:	2c00      	cmp	r4, #0
   164fc:	d07e      	beq.n	165fc <print_value+0x11c>
   164fe:	1e63      	subs	r3, r4, #1
   16500:	2b1f      	cmp	r3, #31
   16502:	d87f      	bhi.n	16604 <print_value+0x124>
   16504:	e8df f003 	tbb	[pc, r3]
   16508:	287e513d 	.word	0x287e513d
   1650c:	667e7e7e 	.word	0x667e7e7e
   16510:	7e7e7e7e 	.word	0x7e7e7e7e
   16514:	6a7e7e7e 	.word	0x6a7e7e7e
   16518:	7e7e7e7e 	.word	0x7e7e7e7e
   1651c:	7e7e7e7e 	.word	0x7e7e7e7e
   16520:	7e7e7e7e 	.word	0x7e7e7e7e
   16524:	6e7e7e7e 	.word	0x6e7e7e7e
   16528:	2c40      	cmp	r4, #64	; 0x40
   1652a:	d05f      	beq.n	165ec <print_value+0x10c>
   1652c:	2c80      	cmp	r4, #128	; 0x80
   1652e:	d111      	bne.n	16554 <print_value+0x74>
            if (item->valuestring == NULL)
   16530:	6900      	ldr	r0, [r0, #16]
   16532:	2800      	cmp	r0, #0
   16534:	d068      	beq.n	16608 <print_value+0x128>
            raw_length = strlen(item->valuestring) + sizeof("");
   16536:	f7fa fc9b 	bl	10e70 <strlen>
   1653a:	1c44      	adds	r4, r0, #1
            output = ensure(output_buffer, raw_length);
   1653c:	4621      	mov	r1, r4
   1653e:	4628      	mov	r0, r5
   16540:	f00a fc8f 	bl	20e62 <ensure>
            if (output == NULL)
   16544:	2800      	cmp	r0, #0
   16546:	d061      	beq.n	1660c <print_value+0x12c>
   16548:	4622      	mov	r2, r4
   1654a:	6931      	ldr	r1, [r6, #16]
   1654c:	f00c fd13 	bl	22f76 <memcpy>
            return true;
   16550:	2401      	movs	r4, #1
   16552:	e054      	b.n	165fe <print_value+0x11e>
    switch ((item->type) & 0xFF)
   16554:	2400      	movs	r4, #0
   16556:	e052      	b.n	165fe <print_value+0x11e>
            const char buff[] = "null";
   16558:	4b2d      	ldr	r3, [pc, #180]	; (16610 <print_value+0x130>)
   1655a:	e893 0003 	ldmia.w	r3, {r0, r1}
   1655e:	9000      	str	r0, [sp, #0]
   16560:	f88d 1004 	strb.w	r1, [sp, #4]
            output = ensure(output_buffer, sizeof(buff));
   16564:	2105      	movs	r1, #5
   16566:	4628      	mov	r0, r5
   16568:	f00a fc7b 	bl	20e62 <ensure>
            if (output == NULL)
   1656c:	b138      	cbz	r0, 1657e <print_value+0x9e>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   1656e:	6869      	ldr	r1, [r5, #4]
   16570:	68aa      	ldr	r2, [r5, #8]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   16572:	1a8a      	subs	r2, r1, r2
   16574:	4669      	mov	r1, sp
   16576:	f00c feae 	bl	232d6 <strncpy>
            return true;
   1657a:	2401      	movs	r4, #1
   1657c:	e03f      	b.n	165fe <print_value+0x11e>
                return false;
   1657e:	2400      	movs	r4, #0
   16580:	e03d      	b.n	165fe <print_value+0x11e>
            const char buff[] = "false";
   16582:	4b24      	ldr	r3, [pc, #144]	; (16614 <print_value+0x134>)
   16584:	e893 0003 	ldmia.w	r3, {r0, r1}
   16588:	9000      	str	r0, [sp, #0]
   1658a:	f8ad 1004 	strh.w	r1, [sp, #4]
            output = ensure(output_buffer, sizeof(buff));
   1658e:	2106      	movs	r1, #6
   16590:	4628      	mov	r0, r5
   16592:	f00a fc66 	bl	20e62 <ensure>
            if (output == NULL)
   16596:	b130      	cbz	r0, 165a6 <print_value+0xc6>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   16598:	6869      	ldr	r1, [r5, #4]
   1659a:	68aa      	ldr	r2, [r5, #8]
   1659c:	1a8a      	subs	r2, r1, r2
   1659e:	4669      	mov	r1, sp
   165a0:	f00c fe99 	bl	232d6 <strncpy>
   165a4:	e02b      	b.n	165fe <print_value+0x11e>
                return false;
   165a6:	2400      	movs	r4, #0
   165a8:	e029      	b.n	165fe <print_value+0x11e>
            const char buff[] = "true";
   165aa:	4b1b      	ldr	r3, [pc, #108]	; (16618 <print_value+0x138>)
   165ac:	e893 0003 	ldmia.w	r3, {r0, r1}
   165b0:	9000      	str	r0, [sp, #0]
   165b2:	f88d 1004 	strb.w	r1, [sp, #4]
            output = ensure(output_buffer, sizeof(buff));
   165b6:	2105      	movs	r1, #5
   165b8:	4628      	mov	r0, r5
   165ba:	f00a fc52 	bl	20e62 <ensure>
            if (output == NULL)
   165be:	b138      	cbz	r0, 165d0 <print_value+0xf0>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   165c0:	6869      	ldr	r1, [r5, #4]
   165c2:	68aa      	ldr	r2, [r5, #8]
   165c4:	1a8a      	subs	r2, r1, r2
   165c6:	4669      	mov	r1, sp
   165c8:	f00c fe85 	bl	232d6 <strncpy>
            return true;
   165cc:	2401      	movs	r4, #1
   165ce:	e016      	b.n	165fe <print_value+0x11e>
                return false;
   165d0:	2400      	movs	r4, #0
   165d2:	e014      	b.n	165fe <print_value+0x11e>
            return print_number(item, output_buffer);
   165d4:	f7ff fe3c 	bl	16250 <print_number>
   165d8:	4604      	mov	r4, r0
   165da:	e010      	b.n	165fe <print_value+0x11e>
            return print_string(item, output_buffer);
   165dc:	f00a fca0 	bl	20f20 <print_string>
   165e0:	4604      	mov	r4, r0
   165e2:	e00c      	b.n	165fe <print_value+0x11e>
            return print_array(item, output_buffer);
   165e4:	f00a fda6 	bl	21134 <print_array>
   165e8:	4604      	mov	r4, r0
   165ea:	e008      	b.n	165fe <print_value+0x11e>
            return print_object(item, output_buffer);
   165ec:	f00a fc9d 	bl	20f2a <print_object>
   165f0:	4604      	mov	r4, r0
   165f2:	e004      	b.n	165fe <print_value+0x11e>
        return false;
   165f4:	2400      	movs	r4, #0
   165f6:	e002      	b.n	165fe <print_value+0x11e>
   165f8:	2400      	movs	r4, #0
   165fa:	e000      	b.n	165fe <print_value+0x11e>
    switch ((item->type) & 0xFF)
   165fc:	2400      	movs	r4, #0
}
   165fe:	4620      	mov	r0, r4
   16600:	b002      	add	sp, #8
   16602:	bd70      	pop	{r4, r5, r6, pc}
    switch ((item->type) & 0xFF)
   16604:	2400      	movs	r4, #0
   16606:	e7fa      	b.n	165fe <print_value+0x11e>
                return false;
   16608:	2400      	movs	r4, #0
   1660a:	e7f8      	b.n	165fe <print_value+0x11e>
                return false;
   1660c:	2400      	movs	r4, #0
   1660e:	e7f6      	b.n	165fe <print_value+0x11e>
   16610:	000248b8 	.word	0x000248b8
   16614:	000248e0 	.word	0x000248e0
   16618:	000248e8 	.word	0x000248e8

0001661c <cJSON_Delete>:
{
   1661c:	b538      	push	{r3, r4, r5, lr}
   1661e:	4604      	mov	r4, r0
    while (item != NULL)
   16620:	e016      	b.n	16650 <cJSON_Delete+0x34>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   16622:	68e3      	ldr	r3, [r4, #12]
   16624:	f413 7f80 	tst.w	r3, #256	; 0x100
   16628:	d104      	bne.n	16634 <cJSON_Delete+0x18>
   1662a:	6920      	ldr	r0, [r4, #16]
   1662c:	b110      	cbz	r0, 16634 <cJSON_Delete+0x18>
            global_hooks.deallocate(item->valuestring);
   1662e:	4b0f      	ldr	r3, [pc, #60]	; (1666c <cJSON_Delete+0x50>)
   16630:	685b      	ldr	r3, [r3, #4]
   16632:	4798      	blx	r3
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   16634:	68e3      	ldr	r3, [r4, #12]
   16636:	f413 7f00 	tst.w	r3, #512	; 0x200
   1663a:	d104      	bne.n	16646 <cJSON_Delete+0x2a>
   1663c:	6a20      	ldr	r0, [r4, #32]
   1663e:	b110      	cbz	r0, 16646 <cJSON_Delete+0x2a>
            global_hooks.deallocate(item->string);
   16640:	4b0a      	ldr	r3, [pc, #40]	; (1666c <cJSON_Delete+0x50>)
   16642:	685b      	ldr	r3, [r3, #4]
   16644:	4798      	blx	r3
        global_hooks.deallocate(item);
   16646:	4b09      	ldr	r3, [pc, #36]	; (1666c <cJSON_Delete+0x50>)
   16648:	685b      	ldr	r3, [r3, #4]
   1664a:	4620      	mov	r0, r4
   1664c:	4798      	blx	r3
        item = next;
   1664e:	462c      	mov	r4, r5
    while (item != NULL)
   16650:	b154      	cbz	r4, 16668 <cJSON_Delete+0x4c>
        next = item->next;
   16652:	6825      	ldr	r5, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   16654:	68e3      	ldr	r3, [r4, #12]
   16656:	f413 7f80 	tst.w	r3, #256	; 0x100
   1665a:	d1e2      	bne.n	16622 <cJSON_Delete+0x6>
   1665c:	68a0      	ldr	r0, [r4, #8]
   1665e:	2800      	cmp	r0, #0
   16660:	d0df      	beq.n	16622 <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   16662:	f7ff ffdb 	bl	1661c <cJSON_Delete>
   16666:	e7dc      	b.n	16622 <cJSON_Delete+0x6>
}
   16668:	bd38      	pop	{r3, r4, r5, pc}
   1666a:	bf00      	nop
   1666c:	20014578 	.word	0x20014578

00016670 <cJSON_Print>:
{
   16670:	b508      	push	{r3, lr}
    return (char*)print(item, true, &global_hooks);
   16672:	4a02      	ldr	r2, [pc, #8]	; (1667c <cJSON_Print+0xc>)
   16674:	2101      	movs	r1, #1
   16676:	f00a fd0d 	bl	21094 <print>
}
   1667a:	bd08      	pop	{r3, pc}
   1667c:	20014578 	.word	0x20014578

00016680 <cJSON_AddItemToObject>:
{
   16680:	b500      	push	{lr}
   16682:	b083      	sub	sp, #12
    return add_item_to_object(object, string, item, &global_hooks, false);
   16684:	2300      	movs	r3, #0
   16686:	9300      	str	r3, [sp, #0]
   16688:	4b02      	ldr	r3, [pc, #8]	; (16694 <cJSON_AddItemToObject+0x14>)
   1668a:	f00a fbb1 	bl	20df0 <add_item_to_object>
}
   1668e:	b003      	add	sp, #12
   16690:	f85d fb04 	ldr.w	pc, [sp], #4
   16694:	20014578 	.word	0x20014578

00016698 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   16698:	b538      	push	{r3, r4, r5, lr}
   1669a:	4604      	mov	r4, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   1669c:	480a      	ldr	r0, [pc, #40]	; (166c8 <cJSON_CreateString+0x30>)
   1669e:	f00a fc33 	bl	20f08 <cJSON_New_Item>
    if(item)
   166a2:	4605      	mov	r5, r0
   166a4:	b140      	cbz	r0, 166b8 <cJSON_CreateString+0x20>
    {
        item->type = cJSON_String;
   166a6:	2310      	movs	r3, #16
   166a8:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   166aa:	4907      	ldr	r1, [pc, #28]	; (166c8 <cJSON_CreateString+0x30>)
   166ac:	4620      	mov	r0, r4
   166ae:	f00a fb8b 	bl	20dc8 <cJSON_strdup>
   166b2:	4604      	mov	r4, r0
   166b4:	6128      	str	r0, [r5, #16]
        if(!item->valuestring)
   166b6:	b108      	cbz	r0, 166bc <cJSON_CreateString+0x24>
            return NULL;
        }
    }

    return item;
}
   166b8:	4628      	mov	r0, r5
   166ba:	bd38      	pop	{r3, r4, r5, pc}
            cJSON_Delete(item);
   166bc:	4628      	mov	r0, r5
   166be:	f7ff ffad 	bl	1661c <cJSON_Delete>
            return NULL;
   166c2:	4625      	mov	r5, r4
   166c4:	e7f8      	b.n	166b8 <cJSON_CreateString+0x20>
   166c6:	bf00      	nop
   166c8:	20014578 	.word	0x20014578

000166cc <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   166cc:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   166ce:	4803      	ldr	r0, [pc, #12]	; (166dc <cJSON_CreateObject+0x10>)
   166d0:	f00a fc1a 	bl	20f08 <cJSON_New_Item>
    if (item)
   166d4:	b108      	cbz	r0, 166da <cJSON_CreateObject+0xe>
    {
        item->type = cJSON_Object;
   166d6:	2340      	movs	r3, #64	; 0x40
   166d8:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   166da:	bd08      	pop	{r3, pc}
   166dc:	20014578 	.word	0x20014578

000166e0 <SystemCoreClockUpdate>:
    static bool uicr_HFXOCNT_erased(void);
#endif

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK;
   166e0:	4b01      	ldr	r3, [pc, #4]	; (166e8 <SystemCoreClockUpdate+0x8>)
   166e2:	4a02      	ldr	r2, [pc, #8]	; (166ec <SystemCoreClockUpdate+0xc>)
   166e4:	601a      	str	r2, [r3, #0]
}
   166e6:	4770      	bx	lr
   166e8:	20014584 	.word	0x20014584
   166ec:	03d09000 	.word	0x03d09000

000166f0 <SystemInit>:

void SystemInit(void)
{
   166f0:	b508      	push	{r3, lr}
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   166f2:	4a07      	ldr	r2, [pc, #28]	; (16710 <SystemInit+0x20>)
   166f4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   166f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   166fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   16700:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16704:	f3bf 8f6f 	isb	sy
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
   16708:	f7ff ffea 	bl	166e0 <SystemCoreClockUpdate>
}
   1670c:	bd08      	pop	{r3, pc}
   1670e:	bf00      	nop
   16710:	e000ed00 	.word	0xe000ed00

00016714 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   16714:	4b05      	ldr	r3, [pc, #20]	; (1672c <nrfx_clock_init+0x18>)
   16716:	791b      	ldrb	r3, [r3, #4]
   16718:	b92b      	cbnz	r3, 16726 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
   1671a:	4b04      	ldr	r3, [pc, #16]	; (1672c <nrfx_clock_init+0x18>)
   1671c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1671e:	2201      	movs	r2, #1
   16720:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   16722:	4803      	ldr	r0, [pc, #12]	; (16730 <nrfx_clock_init+0x1c>)
   16724:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   16726:	4803      	ldr	r0, [pc, #12]	; (16734 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16728:	4770      	bx	lr
   1672a:	bf00      	nop
   1672c:	200168ec 	.word	0x200168ec
   16730:	0bad0000 	.word	0x0bad0000
   16734:	0bad000c 	.word	0x0bad000c

00016738 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   16738:	b110      	cbz	r0, 16740 <nrfx_clock_start+0x8>
   1673a:	2801      	cmp	r0, #1
   1673c:	d021      	beq.n	16782 <nrfx_clock_start+0x4a>
   1673e:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   16740:	4a15      	ldr	r2, [pc, #84]	; (16798 <nrfx_clock_start+0x60>)
   16742:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   16746:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1674a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   1674e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   16752:	d10f      	bne.n	16774 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   16754:	4b10      	ldr	r3, [pc, #64]	; (16798 <nrfx_clock_start+0x60>)
   16756:	2201      	movs	r2, #1
   16758:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1675c:	4b0f      	ldr	r3, [pc, #60]	; (1679c <nrfx_clock_start+0x64>)
   1675e:	2200      	movs	r2, #0
   16760:	601a      	str	r2, [r3, #0]
   16762:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   16764:	4b0c      	ldr	r3, [pc, #48]	; (16798 <nrfx_clock_start+0x60>)
   16766:	2202      	movs	r2, #2
   16768:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1676c:	3308      	adds	r3, #8
   1676e:	2201      	movs	r2, #1
   16770:	601a      	str	r2, [r3, #0]
}
   16772:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   16774:	2b02      	cmp	r3, #2
   16776:	d1ed      	bne.n	16754 <nrfx_clock_start+0x1c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   16778:	4b07      	ldr	r3, [pc, #28]	; (16798 <nrfx_clock_start+0x60>)
   1677a:	2202      	movs	r2, #2
   1677c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   16780:	e7ec      	b.n	1675c <nrfx_clock_start+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16782:	4b07      	ldr	r3, [pc, #28]	; (167a0 <nrfx_clock_start+0x68>)
   16784:	2200      	movs	r2, #0
   16786:	601a      	str	r2, [r3, #0]
   16788:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1678a:	4b03      	ldr	r3, [pc, #12]	; (16798 <nrfx_clock_start+0x60>)
   1678c:	2201      	movs	r2, #1
   1678e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16792:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   16794:	4770      	bx	lr
   16796:	bf00      	nop
   16798:	40005000 	.word	0x40005000
   1679c:	40005104 	.word	0x40005104
   167a0:	40005100 	.word	0x40005100

000167a4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   167a4:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   167a6:	4604      	mov	r4, r0
   167a8:	b110      	cbz	r0, 167b0 <nrfx_clock_stop+0xc>
   167aa:	2801      	cmp	r0, #1
   167ac:	d011      	beq.n	167d2 <nrfx_clock_stop+0x2e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   167ae:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
   167b0:	4b35      	ldr	r3, [pc, #212]	; (16888 <nrfx_clock_stop+0xe4>)
   167b2:	2202      	movs	r2, #2
   167b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   167b8:	f503 7382 	add.w	r3, r3, #260	; 0x104
   167bc:	2200      	movs	r2, #0
   167be:	601a      	str	r2, [r3, #0]
   167c0:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   167c2:	4b32      	ldr	r3, [pc, #200]	; (1688c <nrfx_clock_stop+0xe8>)
   167c4:	2201      	movs	r2, #1
   167c6:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
   167c8:	2c01      	cmp	r4, #1
   167ca:	d00e      	beq.n	167ea <nrfx_clock_stop+0x46>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   167cc:	f242 7510 	movw	r5, #10000	; 0x2710
   167d0:	e047      	b.n	16862 <nrfx_clock_stop+0xbe>
    p_reg->INTENCLR = mask;
   167d2:	2301      	movs	r3, #1
   167d4:	4a2c      	ldr	r2, [pc, #176]	; (16888 <nrfx_clock_stop+0xe4>)
   167d6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   167da:	f502 7280 	add.w	r2, r2, #256	; 0x100
   167de:	2100      	movs	r1, #0
   167e0:	6011      	str	r1, [r2, #0]
   167e2:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   167e4:	4a2a      	ldr	r2, [pc, #168]	; (16890 <nrfx_clock_stop+0xec>)
   167e6:	6013      	str	r3, [r2, #0]
}
   167e8:	e7ee      	b.n	167c8 <nrfx_clock_stop+0x24>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   167ea:	4625      	mov	r5, r4
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   167ec:	f242 7610 	movw	r6, #10000	; 0x2710
   167f0:	e013      	b.n	1681a <nrfx_clock_stop+0x76>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   167f2:	4b25      	ldr	r3, [pc, #148]	; (16888 <nrfx_clock_stop+0xe4>)
   167f4:	f8d3 5418 	ldr.w	r5, [r3, #1048]	; 0x418
   167f8:	f005 0503 	and.w	r5, r5, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   167fc:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   16800:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   16804:	d11b      	bne.n	1683e <nrfx_clock_stop+0x9a>
    return false;
   16806:	2300      	movs	r3, #0
   16808:	2b00      	cmp	r3, #0
   1680a:	d0d0      	beq.n	167ae <nrfx_clock_stop+0xa>
   1680c:	2d01      	cmp	r5, #1
   1680e:	d1ce      	bne.n	167ae <nrfx_clock_stop+0xa>
   16810:	2001      	movs	r0, #1
   16812:	f00a fce6 	bl	211e2 <nrfx_busy_wait>
   16816:	3e01      	subs	r6, #1
   16818:	d0c9      	beq.n	167ae <nrfx_clock_stop+0xa>
    switch (domain)
   1681a:	2c00      	cmp	r4, #0
   1681c:	d0e9      	beq.n	167f2 <nrfx_clock_stop+0x4e>
   1681e:	2c01      	cmp	r4, #1
   16820:	d001      	beq.n	16826 <nrfx_clock_stop+0x82>
   16822:	2300      	movs	r3, #0
   16824:	e7f0      	b.n	16808 <nrfx_clock_stop+0x64>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   16826:	4b18      	ldr	r3, [pc, #96]	; (16888 <nrfx_clock_stop+0xe4>)
   16828:	f8d3 540c 	ldr.w	r5, [r3, #1036]	; 0x40c
   1682c:	f005 0501 	and.w	r5, r5, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   16830:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   16834:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   16838:	d103      	bne.n	16842 <nrfx_clock_stop+0x9e>
    return false;
   1683a:	2300      	movs	r3, #0
   1683c:	e7e4      	b.n	16808 <nrfx_clock_stop+0x64>
                return true;
   1683e:	2301      	movs	r3, #1
   16840:	e7e2      	b.n	16808 <nrfx_clock_stop+0x64>
                return true;
   16842:	2301      	movs	r3, #1
   16844:	e7e0      	b.n	16808 <nrfx_clock_stop+0x64>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   16846:	4b10      	ldr	r3, [pc, #64]	; (16888 <nrfx_clock_stop+0xe4>)
   16848:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   1684c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   16850:	d115      	bne.n	1687e <nrfx_clock_stop+0xda>
    return false;
   16852:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   16854:	2b00      	cmp	r3, #0
   16856:	d0aa      	beq.n	167ae <nrfx_clock_stop+0xa>
   16858:	2001      	movs	r0, #1
   1685a:	f00a fcc2 	bl	211e2 <nrfx_busy_wait>
   1685e:	3d01      	subs	r5, #1
   16860:	d0a5      	beq.n	167ae <nrfx_clock_stop+0xa>
    switch (domain)
   16862:	2c00      	cmp	r4, #0
   16864:	d0ef      	beq.n	16846 <nrfx_clock_stop+0xa2>
   16866:	2c01      	cmp	r4, #1
   16868:	d001      	beq.n	1686e <nrfx_clock_stop+0xca>
   1686a:	2300      	movs	r3, #0
   1686c:	e7f2      	b.n	16854 <nrfx_clock_stop+0xb0>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1686e:	4b06      	ldr	r3, [pc, #24]	; (16888 <nrfx_clock_stop+0xe4>)
   16870:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   16874:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   16878:	d103      	bne.n	16882 <nrfx_clock_stop+0xde>
    return false;
   1687a:	2300      	movs	r3, #0
   1687c:	e7ea      	b.n	16854 <nrfx_clock_stop+0xb0>
                return true;
   1687e:	2301      	movs	r3, #1
   16880:	e7e8      	b.n	16854 <nrfx_clock_stop+0xb0>
                return true;
   16882:	2301      	movs	r3, #1
   16884:	e7e6      	b.n	16854 <nrfx_clock_stop+0xb0>
   16886:	bf00      	nop
   16888:	40005000 	.word	0x40005000
   1688c:	4000500c 	.word	0x4000500c
   16890:	40005004 	.word	0x40005004

00016894 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   16894:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   16896:	4b17      	ldr	r3, [pc, #92]	; (168f4 <nrfx_power_clock_irq_handler+0x60>)
   16898:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1689a:	b153      	cbz	r3, 168b2 <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1689c:	4b15      	ldr	r3, [pc, #84]	; (168f4 <nrfx_power_clock_irq_handler+0x60>)
   1689e:	2000      	movs	r0, #0
   168a0:	6018      	str	r0, [r3, #0]
   168a2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   168a4:	4b14      	ldr	r3, [pc, #80]	; (168f8 <nrfx_power_clock_irq_handler+0x64>)
   168a6:	2201      	movs	r2, #1
   168a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   168ac:	4b13      	ldr	r3, [pc, #76]	; (168fc <nrfx_power_clock_irq_handler+0x68>)
   168ae:	681b      	ldr	r3, [r3, #0]
   168b0:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   168b2:	4b13      	ldr	r3, [pc, #76]	; (16900 <nrfx_power_clock_irq_handler+0x6c>)
   168b4:	681b      	ldr	r3, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   168b6:	b1a3      	cbz	r3, 168e2 <nrfx_power_clock_irq_handler+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   168b8:	4b11      	ldr	r3, [pc, #68]	; (16900 <nrfx_power_clock_irq_handler+0x6c>)
   168ba:	2200      	movs	r2, #0
   168bc:	601a      	str	r2, [r3, #0]
   168be:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   168c0:	4a0d      	ldr	r2, [pc, #52]	; (168f8 <nrfx_power_clock_irq_handler+0x64>)
   168c2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   168c6:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   168ca:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   168ce:	2b01      	cmp	r3, #1
   168d0:	d008      	beq.n	168e4 <nrfx_power_clock_irq_handler+0x50>
    p_reg->INTENCLR = mask;
   168d2:	4b09      	ldr	r3, [pc, #36]	; (168f8 <nrfx_power_clock_irq_handler+0x64>)
   168d4:	2202      	movs	r2, #2
   168d6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   168da:	4b08      	ldr	r3, [pc, #32]	; (168fc <nrfx_power_clock_irq_handler+0x68>)
   168dc:	681b      	ldr	r3, [r3, #0]
   168de:	2001      	movs	r0, #1
   168e0:	4798      	blx	r3
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   168e2:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   168e4:	4b04      	ldr	r3, [pc, #16]	; (168f8 <nrfx_power_clock_irq_handler+0x64>)
   168e6:	2202      	movs	r2, #2
   168e8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   168ec:	3308      	adds	r3, #8
   168ee:	2201      	movs	r2, #1
   168f0:	601a      	str	r2, [r3, #0]
}
   168f2:	e7f6      	b.n	168e2 <nrfx_power_clock_irq_handler+0x4e>
   168f4:	40005100 	.word	0x40005100
   168f8:	40005000 	.word	0x40005000
   168fc:	200168ec 	.word	0x200168ec
   16900:	40005104 	.word	0x40005104

00016904 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   16904:	b470      	push	{r4, r5, r6}
	__asm__ volatile(
   16906:	f04f 0320 	mov.w	r3, #32
   1690a:	f3ef 8611 	mrs	r6, BASEPRI
   1690e:	f383 8811 	msr	BASEPRI, r3
   16912:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code;

    NRFX_CRITICAL_SECTION_ENTER();
    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   16916:	4b0f      	ldr	r3, [pc, #60]	; (16954 <nrfx_dppi_channel_alloc+0x50>)
   16918:	681d      	ldr	r5, [r3, #0]
   1691a:	43e9      	mvns	r1, r5
   1691c:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
   1691e:	b1b1      	cbz	r1, 1694e <nrfx_dppi_channel_alloc+0x4a>
    uint8_t channel = 0;
   16920:	2300      	movs	r3, #0
        err_code = NRFX_ERROR_NO_MEM;
    }
    else
    {
        // Find first free channel
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
   16922:	fa21 f203 	lsr.w	r2, r1, r3
   16926:	f012 0f01 	tst.w	r2, #1
   1692a:	d102      	bne.n	16932 <nrfx_dppi_channel_alloc+0x2e>
        {
            channel++;
   1692c:	3301      	adds	r3, #1
   1692e:	b2db      	uxtb	r3, r3
   16930:	e7f7      	b.n	16922 <nrfx_dppi_channel_alloc+0x1e>
        }

        m_allocated_channels |= DPPI_BIT_SET(channel);
   16932:	2201      	movs	r2, #1
   16934:	fa02 f403 	lsl.w	r4, r2, r3
   16938:	4325      	orrs	r5, r4
   1693a:	4a06      	ldr	r2, [pc, #24]	; (16954 <nrfx_dppi_channel_alloc+0x50>)
   1693c:	6015      	str	r5, [r2, #0]
        *p_channel = channel;
   1693e:	7003      	strb	r3, [r0, #0]

        err_code = NRFX_SUCCESS;
   16940:	4805      	ldr	r0, [pc, #20]	; (16958 <nrfx_dppi_channel_alloc+0x54>)
	__asm__ volatile(
   16942:	f386 8811 	msr	BASEPRI, r6
   16946:	f3bf 8f6f 	isb	sy
        NRFX_LOG_INFO("Function: %s, error code: %s.",
                      __func__,
                      NRFX_LOG_ERROR_STRING_GET(err_code));
    }
    return err_code;
}
   1694a:	bc70      	pop	{r4, r5, r6}
   1694c:	4770      	bx	lr
        err_code = NRFX_ERROR_NO_MEM;
   1694e:	4803      	ldr	r0, [pc, #12]	; (1695c <nrfx_dppi_channel_alloc+0x58>)
   16950:	e7f7      	b.n	16942 <nrfx_dppi_channel_alloc+0x3e>
   16952:	bf00      	nop
   16954:	200168f4 	.word	0x200168f4
   16958:	0bad0000 	.word	0x0bad0000
   1695c:	0bad0002 	.word	0x0bad0002

00016960 <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
   16960:	4b04      	ldr	r3, [pc, #16]	; (16974 <is_allocated_channel+0x14>)
   16962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   16964:	2301      	movs	r3, #1
   16966:	4083      	lsls	r3, r0
   16968:	421a      	tst	r2, r3
}
   1696a:	bf14      	ite	ne
   1696c:	2001      	movne	r0, #1
   1696e:	2000      	moveq	r0, #0
   16970:	4770      	bx	lr
   16972:	bf00      	nop
   16974:	200168f8 	.word	0x200168f8

00016978 <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
   16978:	2301      	movs	r3, #1
   1697a:	fa03 f000 	lsl.w	r0, r3, r0
   1697e:	4a02      	ldr	r2, [pc, #8]	; (16988 <channel_allocated_set+0x10>)
   16980:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   16982:	4303      	orrs	r3, r0
   16984:	64d3      	str	r3, [r2, #76]	; 0x4c
}
   16986:	4770      	bx	lr
   16988:	200168f8 	.word	0x200168f8

0001698c <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1698c:	2301      	movs	r3, #1
   1698e:	fa03 f000 	lsl.w	r0, r3, r0
   16992:	4a03      	ldr	r2, [pc, #12]	; (169a0 <channel_allocated_clr+0x14>)
   16994:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   16996:	ea23 0300 	bic.w	r3, r3, r0
   1699a:	64d3      	str	r3, [r2, #76]	; 0x4c
}
   1699c:	4770      	bx	lr
   1699e:	bf00      	nop
   169a0:	200168f8 	.word	0x200168f8

000169a4 <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
   169a4:	b538      	push	{r3, r4, r5, lr}
   169a6:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   169a8:	f00a fc29 	bl	211fe <is_app_channel>
   169ac:	b908      	cbnz	r0, 169b2 <nrfx_gpiote_channel_free+0xe>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   169ae:	4809      	ldr	r0, [pc, #36]	; (169d4 <nrfx_gpiote_channel_free+0x30>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   169b0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   169b2:	f04f 0320 	mov.w	r3, #32
   169b6:	f3ef 8511 	mrs	r5, BASEPRI
   169ba:	f383 8811 	msr	BASEPRI, r3
   169be:	f3bf 8f6f 	isb	sy
        channel_allocated_clr(channel);
   169c2:	4620      	mov	r0, r4
   169c4:	f7ff ffe2 	bl	1698c <channel_allocated_clr>
	__asm__ volatile(
   169c8:	f385 8811 	msr	BASEPRI, r5
   169cc:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code = NRFX_SUCCESS;
   169d0:	4801      	ldr	r0, [pc, #4]	; (169d8 <nrfx_gpiote_channel_free+0x34>)
}
   169d2:	e7ed      	b.n	169b0 <nrfx_gpiote_channel_free+0xc>
   169d4:	0bad0004 	.word	0x0bad0004
   169d8:	0bad0000 	.word	0x0bad0000

000169dc <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   169dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   169e0:	4680      	mov	r8, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   169e2:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   169e4:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   169e6:	4f17      	ldr	r7, [pc, #92]	; (16a44 <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   169e8:	e013      	b.n	16a12 <nrfx_gpiote_channel_alloc+0x36>
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
   169ea:	4620      	mov	r0, r4
   169ec:	f7ff ffc4 	bl	16978 <channel_allocated_set>
            *p_channel = ch_idx;
   169f0:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
   169f4:	4f14      	ldr	r7, [pc, #80]	; (16a48 <nrfx_gpiote_channel_alloc+0x6c>)
	__asm__ volatile(
   169f6:	f386 8811 	msr	BASEPRI, r6
   169fa:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   169fe:	4b12      	ldr	r3, [pc, #72]	; (16a48 <nrfx_gpiote_channel_alloc+0x6c>)
   16a00:	429f      	cmp	r7, r3
   16a02:	d01b      	beq.n	16a3c <nrfx_gpiote_channel_alloc+0x60>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   16a04:	2301      	movs	r3, #1
   16a06:	fa03 f309 	lsl.w	r3, r3, r9
   16a0a:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   16a0e:	3401      	adds	r4, #1
   16a10:	b2e4      	uxtb	r4, r4
   16a12:	b19d      	cbz	r5, 16a3c <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
   16a14:	f04f 0320 	mov.w	r3, #32
   16a18:	f3ef 8611 	mrs	r6, BASEPRI
   16a1c:	f383 8811 	msr	BASEPRI, r3
   16a20:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   16a24:	46a1      	mov	r9, r4
   16a26:	fa25 f304 	lsr.w	r3, r5, r4
   16a2a:	f013 0f01 	tst.w	r3, #1
   16a2e:	d0e2      	beq.n	169f6 <nrfx_gpiote_channel_alloc+0x1a>
   16a30:	4620      	mov	r0, r4
   16a32:	f7ff ff95 	bl	16960 <is_allocated_channel>
   16a36:	2800      	cmp	r0, #0
   16a38:	d1dd      	bne.n	169f6 <nrfx_gpiote_channel_alloc+0x1a>
   16a3a:	e7d6      	b.n	169ea <nrfx_gpiote_channel_alloc+0xe>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   16a3c:	4638      	mov	r0, r7
   16a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   16a42:	bf00      	nop
   16a44:	0bad0002 	.word	0x0bad0002
   16a48:	0bad0000 	.word	0x0bad0000

00016a4c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   16a4c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(handler);
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   16a4e:	4b08      	ldr	r3, [pc, #32]	; (16a70 <nrfx_ipc_init+0x24>)
   16a50:	791b      	ldrb	r3, [r3, #4]
   16a52:	b10b      	cbz	r3, 16a58 <nrfx_ipc_init+0xc>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
   16a54:	4807      	ldr	r0, [pc, #28]	; (16a74 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
}
   16a56:	bd38      	pop	{r3, r4, r5, pc}
   16a58:	460d      	mov	r5, r1
   16a5a:	4614      	mov	r4, r2
    NRFX_IRQ_ENABLE(IPC_IRQn);
   16a5c:	202a      	movs	r0, #42	; 0x2a
   16a5e:	f7fd f98b 	bl	13d78 <arch_irq_enable>
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   16a62:	4b03      	ldr	r3, [pc, #12]	; (16a70 <nrfx_ipc_init+0x24>)
   16a64:	2201      	movs	r2, #1
   16a66:	711a      	strb	r2, [r3, #4]
    m_ipc_cb.handler = handler;
   16a68:	601d      	str	r5, [r3, #0]
    m_ipc_cb.p_context = p_context;
   16a6a:	609c      	str	r4, [r3, #8]
    return NRFX_SUCCESS;
   16a6c:	4802      	ldr	r0, [pc, #8]	; (16a78 <nrfx_ipc_init+0x2c>)
   16a6e:	e7f2      	b.n	16a56 <nrfx_ipc_init+0xa>
   16a70:	20016948 	.word	0x20016948
   16a74:	0bad000c 	.word	0x0bad000c
   16a78:	0bad0000 	.word	0x0bad0000

00016a7c <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   16a7c:	b410      	push	{r4}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   16a7e:	2300      	movs	r3, #0
   16a80:	e008      	b.n	16a94 <nrfx_ipc_config_load+0x18>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   16a82:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   16a86:	b2da      	uxtb	r2, r3
   16a88:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   16a8c:	490d      	ldr	r1, [pc, #52]	; (16ac4 <nrfx_ipc_config_load+0x48>)
   16a8e:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
   16a92:	3301      	adds	r3, #1
   16a94:	2b07      	cmp	r3, #7
   16a96:	d9f4      	bls.n	16a82 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   16a98:	2300      	movs	r3, #0
   16a9a:	e00a      	b.n	16ab2 <nrfx_ipc_config_load+0x36>
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   16a9c:	f103 0208 	add.w	r2, r3, #8
   16aa0:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   16aa4:	b2da      	uxtb	r2, r3
   16aa6:	f502 72b2 	add.w	r2, r2, #356	; 0x164
   16aaa:	4906      	ldr	r1, [pc, #24]	; (16ac4 <nrfx_ipc_config_load+0x48>)
   16aac:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
   16ab0:	3301      	adds	r3, #1
   16ab2:	2b07      	cmp	r3, #7
   16ab4:	d9f2      	bls.n	16a9c <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   16ab6:	6c02      	ldr	r2, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   16ab8:	4b02      	ldr	r3, [pc, #8]	; (16ac4 <nrfx_ipc_config_load+0x48>)
   16aba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   16abe:	f85d 4b04 	ldr.w	r4, [sp], #4
   16ac2:	4770      	bx	lr
   16ac4:	4002a000 	.word	0x4002a000

00016ac8 <nrfx_ipc_uninit>:
void nrfx_ipc_uninit(void)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   16ac8:	2300      	movs	r3, #0
   16aca:	e007      	b.n	16adc <nrfx_ipc_uninit+0x14>
    p_reg->SEND_CNF[index] = channels_mask;
   16acc:	b2da      	uxtb	r2, r3
   16ace:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   16ad2:	490e      	ldr	r1, [pc, #56]	; (16b0c <nrfx_ipc_uninit+0x44>)
   16ad4:	2000      	movs	r0, #0
   16ad6:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   16ada:	3301      	adds	r3, #1
   16adc:	2b07      	cmp	r3, #7
   16ade:	d9f5      	bls.n	16acc <nrfx_ipc_uninit+0x4>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, 0);
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   16ae0:	2300      	movs	r3, #0
   16ae2:	e007      	b.n	16af4 <nrfx_ipc_uninit+0x2c>
    p_reg->RECEIVE_CNF[index] = channels_mask;
   16ae4:	b2da      	uxtb	r2, r3
   16ae6:	f502 72b2 	add.w	r2, r2, #356	; 0x164
   16aea:	4908      	ldr	r1, [pc, #32]	; (16b0c <nrfx_ipc_uninit+0x44>)
   16aec:	2000      	movs	r0, #0
   16aee:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   16af2:	3301      	adds	r3, #1
   16af4:	2b07      	cmp	r3, #7
   16af6:	d9f5      	bls.n	16ae4 <nrfx_ipc_uninit+0x1c>
    p_reg->INTENCLR = mask;
   16af8:	4b04      	ldr	r3, [pc, #16]	; (16b0c <nrfx_ipc_uninit+0x44>)
   16afa:	f04f 32ff 	mov.w	r2, #4294967295
   16afe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   16b02:	4b03      	ldr	r3, [pc, #12]	; (16b10 <nrfx_ipc_uninit+0x48>)
   16b04:	2200      	movs	r2, #0
   16b06:	711a      	strb	r2, [r3, #4]
}
   16b08:	4770      	bx	lr
   16b0a:	bf00      	nop
   16b0c:	4002a000 	.word	0x4002a000
   16b10:	20016948 	.word	0x20016948

00016b14 <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   16b14:	2301      	movs	r3, #1
   16b16:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   16b18:	4a01      	ldr	r2, [pc, #4]	; (16b20 <nrfx_ipc_receive_event_enable+0xc>)
   16b1a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   16b1e:	4770      	bx	lr
   16b20:	4002a000 	.word	0x4002a000

00016b24 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   16b24:	2301      	movs	r3, #1
   16b26:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   16b28:	4a01      	ldr	r2, [pc, #4]	; (16b30 <nrfx_ipc_receive_event_disable+0xc>)
   16b2a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   16b2e:	4770      	bx	lr
   16b30:	4002a000 	.word	0x4002a000

00016b34 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   16b34:	b508      	push	{r3, lr}
    return p_reg->INTPEND;
   16b36:	4b0e      	ldr	r3, [pc, #56]	; (16b70 <nrfx_ipc_irq_handler+0x3c>)
   16b38:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   16b3c:	4602      	mov	r2, r0
    while (bitmask)
   16b3e:	e00a      	b.n	16b56 <nrfx_ipc_irq_handler+0x22>
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
   16b40:	fab3 f383 	clz	r3, r3
    {
        uint8_t event_idx = __CLZ(__RBIT(bitmask));
        bitmask &= ~(1UL << event_idx);
   16b44:	2101      	movs	r1, #1
   16b46:	4099      	lsls	r1, r3
   16b48:	ea22 0201 	bic.w	r2, r2, r1
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   16b4c:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16b4e:	4909      	ldr	r1, [pc, #36]	; (16b74 <nrfx_ipc_irq_handler+0x40>)
   16b50:	4419      	add	r1, r3
   16b52:	2300      	movs	r3, #0
   16b54:	600b      	str	r3, [r1, #0]
    while (bitmask)
   16b56:	b12a      	cbz	r2, 16b64 <nrfx_ipc_irq_handler+0x30>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   16b58:	fa92 f3a2 	rbit	r3, r2
  if (value == 0U)
   16b5c:	2b00      	cmp	r3, #0
   16b5e:	d1ef      	bne.n	16b40 <nrfx_ipc_irq_handler+0xc>
    return 32U;
   16b60:	2320      	movs	r3, #32
   16b62:	e7ef      	b.n	16b44 <nrfx_ipc_irq_handler+0x10>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   16b64:	4b04      	ldr	r3, [pc, #16]	; (16b78 <nrfx_ipc_irq_handler+0x44>)
   16b66:	681a      	ldr	r2, [r3, #0]
   16b68:	6899      	ldr	r1, [r3, #8]
   16b6a:	4790      	blx	r2
}
   16b6c:	bd08      	pop	{r3, pc}
   16b6e:	bf00      	nop
   16b70:	4002a000 	.word	0x4002a000
   16b74:	4002a100 	.word	0x4002a100
   16b78:	20016948 	.word	0x20016948

00016b7c <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   16b7c:	4b02      	ldr	r3, [pc, #8]	; (16b88 <nvmc_readonly_mode_set+0xc>)
   16b7e:	2200      	movs	r2, #0
   16b80:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
   16b84:	4770      	bx	lr
   16b86:	bf00      	nop
   16b88:	40039000 	.word	0x40039000

00016b8c <nvmc_write_mode_set>:
   16b8c:	4b02      	ldr	r3, [pc, #8]	; (16b98 <nvmc_write_mode_set+0xc>)
   16b8e:	2201      	movs	r2, #1
   16b90:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
   16b94:	4770      	bx	lr
   16b96:	bf00      	nop
   16b98:	40039000 	.word	0x40039000

00016b9c <nvmc_erase_mode_set>:
   16b9c:	4b02      	ldr	r3, [pc, #8]	; (16ba8 <nvmc_erase_mode_set+0xc>)
   16b9e:	2202      	movs	r2, #2
   16ba0:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
   16ba4:	4770      	bx	lr
   16ba6:	bf00      	nop
   16ba8:	40039000 	.word	0x40039000

00016bac <nvmc_word_write>:
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   16bac:	4b04      	ldr	r3, [pc, #16]	; (16bc0 <nvmc_word_write+0x14>)
   16bae:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   16bb2:	f013 0f01 	tst.w	r3, #1
   16bb6:	d0f9      	beq.n	16bac <nvmc_word_write>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   16bb8:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   16bba:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   16bbe:	4770      	bx	lr
   16bc0:	40039000 	.word	0x40039000

00016bc4 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   16bc4:	b510      	push	{r4, lr}
   16bc6:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   16bc8:	f00a fb30 	bl	2122c <is_page_aligned_check>
   16bcc:	b908      	cbnz	r0, 16bd2 <nrfx_nvmc_page_erase+0xe>
    {
        return NRFX_ERROR_INVALID_ADDR;
   16bce:	4808      	ldr	r0, [pc, #32]	; (16bf0 <nrfx_nvmc_page_erase+0x2c>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
   16bd0:	bd10      	pop	{r4, pc}
    nvmc_erase_mode_set();
   16bd2:	f7ff ffe3 	bl	16b9c <nvmc_erase_mode_set>
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   16bd6:	f04f 33ff 	mov.w	r3, #4294967295
   16bda:	6023      	str	r3, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   16bdc:	4b05      	ldr	r3, [pc, #20]	; (16bf4 <nrfx_nvmc_page_erase+0x30>)
   16bde:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   16be2:	f013 0f01 	tst.w	r3, #1
   16be6:	d0f9      	beq.n	16bdc <nrfx_nvmc_page_erase+0x18>
    nvmc_readonly_mode_set();
   16be8:	f7ff ffc8 	bl	16b7c <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
   16bec:	4802      	ldr	r0, [pc, #8]	; (16bf8 <nrfx_nvmc_page_erase+0x34>)
   16bee:	e7ef      	b.n	16bd0 <nrfx_nvmc_page_erase+0xc>
   16bf0:	0bad000a 	.word	0x0bad000a
   16bf4:	40039000 	.word	0x40039000
   16bf8:	0bad0000 	.word	0x0bad0000

00016bfc <rpc_handle_data_message>:
   16bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16bfe:	4604      	mov	r4, r0
   16c00:	2700      	movs	r7, #0
   16c02:	6806      	ldr	r6, [r0, #0]
   16c04:	4d0b      	ldr	r5, [pc, #44]	; (16c34 <rpc_handle_data_message+0x38>)
   16c06:	b2b6      	uxth	r6, r6
   16c08:	882b      	ldrh	r3, [r5, #0]
   16c0a:	42b3      	cmp	r3, r6
   16c0c:	d00a      	beq.n	16c24 <rpc_handle_data_message+0x28>
   16c0e:	3701      	adds	r7, #1
   16c10:	2f06      	cmp	r7, #6
   16c12:	f105 0510 	add.w	r5, r5, #16
   16c16:	d1f7      	bne.n	16c08 <rpc_handle_data_message+0xc>
   16c18:	68a0      	ldr	r0, [r4, #8]
   16c1a:	b148      	cbz	r0, 16c30 <rpc_handle_data_message+0x34>
   16c1c:	f00a fb76 	bl	2130c <rpc_transport_peer_data_free>
   16c20:	2000      	movs	r0, #0
   16c22:	e005      	b.n	16c30 <rpc_handle_data_message+0x34>
   16c24:	4620      	mov	r0, r4
   16c26:	686b      	ldr	r3, [r5, #4]
   16c28:	68e9      	ldr	r1, [r5, #12]
   16c2a:	4798      	blx	r3
   16c2c:	2802      	cmp	r0, #2
   16c2e:	d0ee      	beq.n	16c0e <rpc_handle_data_message+0x12>
   16c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16c32:	bf00      	nop
   16c34:	000248f0 	.word	0x000248f0

00016c38 <ipc_trace_init>:
   16c38:	4b01      	ldr	r3, [pc, #4]	; (16c40 <ipc_trace_init+0x8>)
   16c3a:	6018      	str	r0, [r3, #0]
   16c3c:	4770      	bx	lr
   16c3e:	bf00      	nop
   16c40:	20016960 	.word	0x20016960

00016c44 <nrf_modem_os_trace_irq_handler>:
   16c44:	b508      	push	{r3, lr}
   16c46:	4b11      	ldr	r3, [pc, #68]	; (16c8c <nrf_modem_os_trace_irq_handler+0x48>)
   16c48:	781b      	ldrb	r3, [r3, #0]
   16c4a:	b90b      	cbnz	r3, 16c50 <nrf_modem_os_trace_irq_handler+0xc>
   16c4c:	f7fe fd1e 	bl	1568c <nrf_modem_os_trace_irq_clear>
   16c50:	4b0f      	ldr	r3, [pc, #60]	; (16c90 <nrf_modem_os_trace_irq_handler+0x4c>)
   16c52:	6818      	ldr	r0, [r3, #0]
   16c54:	b128      	cbz	r0, 16c62 <nrf_modem_os_trace_irq_handler+0x1e>
   16c56:	6882      	ldr	r2, [r0, #8]
   16c58:	6843      	ldr	r3, [r0, #4]
   16c5a:	429a      	cmp	r2, r3
   16c5c:	d001      	beq.n	16c62 <nrf_modem_os_trace_irq_handler+0x1e>
   16c5e:	f00a fb5d 	bl	2131c <trace_write>
   16c62:	4b0c      	ldr	r3, [pc, #48]	; (16c94 <nrf_modem_os_trace_irq_handler+0x50>)
   16c64:	6818      	ldr	r0, [r3, #0]
   16c66:	b128      	cbz	r0, 16c74 <nrf_modem_os_trace_irq_handler+0x30>
   16c68:	6882      	ldr	r2, [r0, #8]
   16c6a:	6843      	ldr	r3, [r0, #4]
   16c6c:	429a      	cmp	r2, r3
   16c6e:	d001      	beq.n	16c74 <nrf_modem_os_trace_irq_handler+0x30>
   16c70:	f00a fb54 	bl	2131c <trace_write>
   16c74:	4b08      	ldr	r3, [pc, #32]	; (16c98 <nrf_modem_os_trace_irq_handler+0x54>)
   16c76:	6818      	ldr	r0, [r3, #0]
   16c78:	b138      	cbz	r0, 16c8a <nrf_modem_os_trace_irq_handler+0x46>
   16c7a:	6882      	ldr	r2, [r0, #8]
   16c7c:	6843      	ldr	r3, [r0, #4]
   16c7e:	429a      	cmp	r2, r3
   16c80:	d003      	beq.n	16c8a <nrf_modem_os_trace_irq_handler+0x46>
   16c82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   16c86:	f00a bb49 	b.w	2131c <trace_write>
   16c8a:	bd08      	pop	{r3, pc}
   16c8c:	20016c82 	.word	0x20016c82
   16c90:	2001695c 	.word	0x2001695c
   16c94:	20016954 	.word	0x20016954
   16c98:	20016958 	.word	0x20016958

00016c9c <ipc_trace_handle>:
   16c9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ca0:	4b43      	ldr	r3, [pc, #268]	; (16db0 <ipc_trace_handle+0x114>)
   16ca2:	681b      	ldr	r3, [r3, #0]
   16ca4:	6919      	ldr	r1, [r3, #16]
   16ca6:	f8d3 a014 	ldr.w	sl, [r3, #20]
   16caa:	7c1a      	ldrb	r2, [r3, #16]
   16cac:	2200      	movs	r2, #0
   16cae:	741a      	strb	r2, [r3, #16]
   16cb0:	7c58      	ldrb	r0, [r3, #17]
   16cb2:	745a      	strb	r2, [r3, #17]
   16cb4:	7c98      	ldrb	r0, [r3, #18]
   16cb6:	749a      	strb	r2, [r3, #18]
   16cb8:	7cd8      	ldrb	r0, [r3, #19]
   16cba:	74da      	strb	r2, [r3, #19]
   16cbc:	7d18      	ldrb	r0, [r3, #20]
   16cbe:	751a      	strb	r2, [r3, #20]
   16cc0:	7d58      	ldrb	r0, [r3, #21]
   16cc2:	755a      	strb	r2, [r3, #21]
   16cc4:	7d98      	ldrb	r0, [r3, #22]
   16cc6:	759a      	strb	r2, [r3, #22]
   16cc8:	7dd8      	ldrb	r0, [r3, #23]
   16cca:	75da      	strb	r2, [r3, #23]
   16ccc:	2900      	cmp	r1, #0
   16cce:	d033      	beq.n	16d38 <ipc_trace_handle+0x9c>
   16cd0:	3901      	subs	r1, #1
   16cd2:	2903      	cmp	r1, #3
   16cd4:	d830      	bhi.n	16d38 <ipc_trace_handle+0x9c>
   16cd6:	e8df f001 	tbb	[pc, r1]
   16cda:	6502      	.short	0x6502
   16cdc:	534c      	.short	0x534c
   16cde:	4a35      	ldr	r2, [pc, #212]	; (16db4 <ipc_trace_handle+0x118>)
   16ce0:	7811      	ldrb	r1, [r2, #0]
   16ce2:	b109      	cbz	r1, 16ce8 <ipc_trace_handle+0x4c>
   16ce4:	2100      	movs	r1, #0
   16ce6:	7011      	strb	r1, [r2, #0]
   16ce8:	2200      	movs	r2, #0
   16cea:	4691      	mov	r9, r2
   16cec:	4617      	mov	r7, r2
   16cee:	4614      	mov	r4, r2
   16cf0:	4d31      	ldr	r5, [pc, #196]	; (16db8 <ipc_trace_handle+0x11c>)
   16cf2:	4932      	ldr	r1, [pc, #200]	; (16dbc <ipc_trace_handle+0x120>)
   16cf4:	4832      	ldr	r0, [pc, #200]	; (16dc0 <ipc_trace_handle+0x124>)
   16cf6:	f8d5 e000 	ldr.w	lr, [r5]
   16cfa:	f8d1 8000 	ldr.w	r8, [r1]
   16cfe:	6806      	ldr	r6, [r0, #0]
   16d00:	f8da b008 	ldr.w	fp, [sl, #8]
   16d04:	9501      	str	r5, [sp, #4]
   16d06:	45a3      	cmp	fp, r4
   16d08:	d119      	bne.n	16d3e <ipc_trace_handle+0xa2>
   16d0a:	b107      	cbz	r7, 16d0e <ipc_trace_handle+0x72>
   16d0c:	6006      	str	r6, [r0, #0]
   16d0e:	f1b9 0f00 	cmp.w	r9, #0
   16d12:	d001      	beq.n	16d18 <ipc_trace_handle+0x7c>
   16d14:	f8c1 8000 	str.w	r8, [r1]
   16d18:	b112      	cbz	r2, 16d20 <ipc_trace_handle+0x84>
   16d1a:	9a01      	ldr	r2, [sp, #4]
   16d1c:	f8c2 e000 	str.w	lr, [r2]
   16d20:	7a1a      	ldrb	r2, [r3, #8]
   16d22:	2101      	movs	r1, #1
   16d24:	2200      	movs	r2, #0
   16d26:	7219      	strb	r1, [r3, #8]
   16d28:	7a59      	ldrb	r1, [r3, #9]
   16d2a:	725a      	strb	r2, [r3, #9]
   16d2c:	7a99      	ldrb	r1, [r3, #10]
   16d2e:	729a      	strb	r2, [r3, #10]
   16d30:	7ada      	ldrb	r2, [r3, #11]
   16d32:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   16d36:	72da      	strb	r2, [r3, #11]
   16d38:	b003      	add	sp, #12
   16d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d3e:	1ca5      	adds	r5, r4, #2
   16d40:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
   16d44:	686d      	ldr	r5, [r5, #4]
   16d46:	f895 c000 	ldrb.w	ip, [r5]
   16d4a:	f1bc 0f62 	cmp.w	ip, #98	; 0x62
   16d4e:	d009      	beq.n	16d64 <ipc_trace_handle+0xc8>
   16d50:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
   16d54:	d00a      	beq.n	16d6c <ipc_trace_handle+0xd0>
   16d56:	f1bc 0f61 	cmp.w	ip, #97	; 0x61
   16d5a:	bf04      	itt	eq
   16d5c:	462e      	moveq	r6, r5
   16d5e:	2701      	moveq	r7, #1
   16d60:	3401      	adds	r4, #1
   16d62:	e7d0      	b.n	16d06 <ipc_trace_handle+0x6a>
   16d64:	46a8      	mov	r8, r5
   16d66:	f04f 0901 	mov.w	r9, #1
   16d6a:	e7f9      	b.n	16d60 <ipc_trace_handle+0xc4>
   16d6c:	46ae      	mov	lr, r5
   16d6e:	2201      	movs	r2, #1
   16d70:	e7f6      	b.n	16d60 <ipc_trace_handle+0xc4>
   16d72:	2101      	movs	r1, #1
   16d74:	4a0f      	ldr	r2, [pc, #60]	; (16db4 <ipc_trace_handle+0x118>)
   16d76:	7011      	strb	r1, [r2, #0]
   16d78:	7a1a      	ldrb	r2, [r3, #8]
   16d7a:	2103      	movs	r1, #3
   16d7c:	2200      	movs	r2, #0
   16d7e:	e7d2      	b.n	16d26 <ipc_trace_handle+0x8a>
   16d80:	7a19      	ldrb	r1, [r3, #8]
   16d82:	2104      	movs	r1, #4
   16d84:	7219      	strb	r1, [r3, #8]
   16d86:	7a59      	ldrb	r1, [r3, #9]
   16d88:	725a      	strb	r2, [r3, #9]
   16d8a:	7a99      	ldrb	r1, [r3, #10]
   16d8c:	729a      	strb	r2, [r3, #10]
   16d8e:	7ad9      	ldrb	r1, [r3, #11]
   16d90:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   16d94:	72d9      	strb	r1, [r3, #11]
   16d96:	4b07      	ldr	r3, [pc, #28]	; (16db4 <ipc_trace_handle+0x118>)
   16d98:	701a      	strb	r2, [r3, #0]
   16d9a:	b003      	add	sp, #12
   16d9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16da0:	f7ff bf50 	b.w	16c44 <nrf_modem_os_trace_irq_handler>
   16da4:	b003      	add	sp, #12
   16da6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16daa:	f7fe bc67 	b.w	1567c <nrf_modem_os_trace_irq_set>
   16dae:	bf00      	nop
   16db0:	20016960 	.word	0x20016960
   16db4:	20016c82 	.word	0x20016c82
   16db8:	20016958 	.word	0x20016958
   16dbc:	20016954 	.word	0x20016954
   16dc0:	2001695c 	.word	0x2001695c

00016dc4 <rpc_trace_coredump_in_progress>:
   16dc4:	4b01      	ldr	r3, [pc, #4]	; (16dcc <rpc_trace_coredump_in_progress+0x8>)
   16dc6:	7818      	ldrb	r0, [r3, #0]
   16dc8:	4770      	bx	lr
   16dca:	bf00      	nop
   16dcc:	20016c82 	.word	0x20016c82

00016dd0 <rpc_transport_ipc_msg_alloc>:
   16dd0:	b570      	push	{r4, r5, r6, lr}
   16dd2:	2400      	movs	r4, #0
   16dd4:	6806      	ldr	r6, [r0, #0]
   16dd6:	42a6      	cmp	r6, r4
   16dd8:	d101      	bne.n	16dde <rpc_transport_ipc_msg_alloc+0xe>
   16dda:	2000      	movs	r0, #0
   16ddc:	e016      	b.n	16e0c <rpc_transport_ipc_msg_alloc+0x3c>
   16dde:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
   16de2:	685d      	ldr	r5, [r3, #4]
   16de4:	b2ed      	uxtb	r5, r5
   16de6:	2d03      	cmp	r5, #3
   16de8:	d111      	bne.n	16e0e <rpc_transport_ipc_msg_alloc+0x3e>
   16dea:	eb01 1084 	add.w	r0, r1, r4, lsl #6
   16dee:	6098      	str	r0, [r3, #8]
   16df0:	6859      	ldr	r1, [r3, #4]
   16df2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   16df6:	6059      	str	r1, [r3, #4]
   16df8:	4908      	ldr	r1, [pc, #32]	; (16e1c <rpc_transport_ipc_msg_alloc+0x4c>)
   16dfa:	880c      	ldrh	r4, [r1, #0]
   16dfc:	1c65      	adds	r5, r4, #1
   16dfe:	800d      	strh	r5, [r1, #0]
   16e00:	6859      	ldr	r1, [r3, #4]
   16e02:	b289      	uxth	r1, r1
   16e04:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
   16e08:	6059      	str	r1, [r3, #4]
   16e0a:	7102      	strb	r2, [r0, #4]
   16e0c:	bd70      	pop	{r4, r5, r6, pc}
   16e0e:	b915      	cbnz	r5, 16e16 <rpc_transport_ipc_msg_alloc+0x46>
   16e10:	689d      	ldr	r5, [r3, #8]
   16e12:	2d00      	cmp	r5, #0
   16e14:	d0e9      	beq.n	16dea <rpc_transport_ipc_msg_alloc+0x1a>
   16e16:	3401      	adds	r4, #1
   16e18:	e7dd      	b.n	16dd6 <rpc_transport_ipc_msg_alloc+0x6>
   16e1a:	bf00      	nop
   16e1c:	20016c72 	.word	0x20016c72

00016e20 <handle_modem_rpc_msg>:
   16e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e24:	4606      	mov	r6, r0
   16e26:	460f      	mov	r7, r1
   16e28:	2500      	movs	r5, #0
   16e2a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 16ea0 <handle_modem_rpc_msg+0x80>
   16e2e:	6833      	ldr	r3, [r6, #0]
   16e30:	42ab      	cmp	r3, r5
   16e32:	d801      	bhi.n	16e38 <handle_modem_rpc_msg+0x18>
   16e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16e38:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   16e3c:	68a3      	ldr	r3, [r4, #8]
   16e3e:	b1fb      	cbz	r3, 16e80 <handle_modem_rpc_msg+0x60>
   16e40:	6863      	ldr	r3, [r4, #4]
   16e42:	b2db      	uxtb	r3, r3
   16e44:	2b01      	cmp	r3, #1
   16e46:	d11b      	bne.n	16e80 <handle_modem_rpc_msg+0x60>
   16e48:	6862      	ldr	r2, [r4, #4]
   16e4a:	f8b8 3000 	ldrh.w	r3, [r8]
   16e4e:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   16e52:	d115      	bne.n	16e80 <handle_modem_rpc_msg+0x60>
   16e54:	2f02      	cmp	r7, #2
   16e56:	68a0      	ldr	r0, [r4, #8]
   16e58:	d114      	bne.n	16e84 <handle_modem_rpc_msg+0x64>
   16e5a:	f7ff fecf 	bl	16bfc <rpc_handle_data_message>
   16e5e:	2802      	cmp	r0, #2
   16e60:	d00e      	beq.n	16e80 <handle_modem_rpc_msg+0x60>
   16e62:	2801      	cmp	r0, #1
   16e64:	d113      	bne.n	16e8e <handle_modem_rpc_msg+0x6e>
   16e66:	6863      	ldr	r3, [r4, #4]
   16e68:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   16e6c:	f043 0302 	orr.w	r3, r3, #2
   16e70:	6063      	str	r3, [r4, #4]
   16e72:	f8b8 3000 	ldrh.w	r3, [r8]
   16e76:	3301      	adds	r3, #1
   16e78:	f8a8 3000 	strh.w	r3, [r8]
   16e7c:	f7fe fbee 	bl	1565c <nrf_modem_os_application_irq_set>
   16e80:	3501      	adds	r5, #1
   16e82:	e7d4      	b.n	16e2e <handle_modem_rpc_msg+0xe>
   16e84:	6801      	ldr	r1, [r0, #0]
   16e86:	0c09      	lsrs	r1, r1, #16
   16e88:	f00a f9f4 	bl	21274 <rpc_handle_ctrl_message>
   16e8c:	e7e7      	b.n	16e5e <handle_modem_rpc_msg+0x3e>
   16e8e:	2800      	cmp	r0, #0
   16e90:	d1ef      	bne.n	16e72 <handle_modem_rpc_msg+0x52>
   16e92:	6863      	ldr	r3, [r4, #4]
   16e94:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   16e98:	f043 0303 	orr.w	r3, r3, #3
   16e9c:	e7e8      	b.n	16e70 <handle_modem_rpc_msg+0x50>
   16e9e:	bf00      	nop
   16ea0:	20016c70 	.word	0x20016c70

00016ea4 <rpc_transport_ipc_data_msg_send>:
   16ea4:	b508      	push	{r3, lr}
   16ea6:	4b0b      	ldr	r3, [pc, #44]	; (16ed4 <rpc_transport_ipc_data_msg_send+0x30>)
   16ea8:	681b      	ldr	r3, [r3, #0]
   16eaa:	1ac0      	subs	r0, r0, r3
   16eac:	4b0a      	ldr	r3, [pc, #40]	; (16ed8 <rpc_transport_ipc_data_msg_send+0x34>)
   16eae:	f3c0 1089 	ubfx	r0, r0, #6, #10
   16eb2:	681b      	ldr	r3, [r3, #0]
   16eb4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   16eb8:	6843      	ldr	r3, [r0, #4]
   16eba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   16ebe:	f043 0301 	orr.w	r3, r3, #1
   16ec2:	6043      	str	r3, [r0, #4]
   16ec4:	2003      	movs	r0, #3
   16ec6:	f009 f9b2 	bl	2022e <nrf_modem_os_busywait>
   16eca:	2201      	movs	r2, #1
   16ecc:	4b03      	ldr	r3, [pc, #12]	; (16edc <rpc_transport_ipc_data_msg_send+0x38>)
   16ece:	601a      	str	r2, [r3, #0]
   16ed0:	bd08      	pop	{r3, pc}
   16ed2:	bf00      	nop
   16ed4:	2001697c 	.word	0x2001697c
   16ed8:	20016980 	.word	0x20016980
   16edc:	4002a00c 	.word	0x4002a00c

00016ee0 <rpc_transport_ipc_ctrl_msg_send>:
   16ee0:	b508      	push	{r3, lr}
   16ee2:	4b0b      	ldr	r3, [pc, #44]	; (16f10 <rpc_transport_ipc_ctrl_msg_send+0x30>)
   16ee4:	681b      	ldr	r3, [r3, #0]
   16ee6:	1ac0      	subs	r0, r0, r3
   16ee8:	4b0a      	ldr	r3, [pc, #40]	; (16f14 <rpc_transport_ipc_ctrl_msg_send+0x34>)
   16eea:	f3c0 1089 	ubfx	r0, r0, #6, #10
   16eee:	681b      	ldr	r3, [r3, #0]
   16ef0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   16ef4:	6843      	ldr	r3, [r0, #4]
   16ef6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   16efa:	f043 0301 	orr.w	r3, r3, #1
   16efe:	6043      	str	r3, [r0, #4]
   16f00:	2003      	movs	r0, #3
   16f02:	f009 f994 	bl	2022e <nrf_modem_os_busywait>
   16f06:	2201      	movs	r2, #1
   16f08:	4b03      	ldr	r3, [pc, #12]	; (16f18 <rpc_transport_ipc_ctrl_msg_send+0x38>)
   16f0a:	601a      	str	r2, [r3, #0]
   16f0c:	bd08      	pop	{r3, pc}
   16f0e:	bf00      	nop
   16f10:	20016974 	.word	0x20016974
   16f14:	20016978 	.word	0x20016978
   16f18:	4002a004 	.word	0x4002a004

00016f1c <rpc_transport_ipc_data_msg_alloc>:
   16f1c:	4b05      	ldr	r3, [pc, #20]	; (16f34 <rpc_transport_ipc_data_msg_alloc+0x18>)
   16f1e:	781b      	ldrb	r3, [r3, #0]
   16f20:	b933      	cbnz	r3, 16f30 <rpc_transport_ipc_data_msg_alloc+0x14>
   16f22:	4b05      	ldr	r3, [pc, #20]	; (16f38 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   16f24:	2202      	movs	r2, #2
   16f26:	6819      	ldr	r1, [r3, #0]
   16f28:	4b04      	ldr	r3, [pc, #16]	; (16f3c <rpc_transport_ipc_data_msg_alloc+0x20>)
   16f2a:	6818      	ldr	r0, [r3, #0]
   16f2c:	f7ff bf50 	b.w	16dd0 <rpc_transport_ipc_msg_alloc>
   16f30:	2000      	movs	r0, #0
   16f32:	4770      	bx	lr
   16f34:	20016c84 	.word	0x20016c84
   16f38:	2001697c 	.word	0x2001697c
   16f3c:	20016980 	.word	0x20016980

00016f40 <rpc_transport_ipc_ctrl_msg_alloc>:
   16f40:	230a      	movs	r3, #10
   16f42:	b537      	push	{r0, r1, r2, r4, r5, lr}
   16f44:	4c0c      	ldr	r4, [pc, #48]	; (16f78 <rpc_transport_ipc_ctrl_msg_alloc+0x38>)
   16f46:	4d0d      	ldr	r5, [pc, #52]	; (16f7c <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   16f48:	9301      	str	r3, [sp, #4]
   16f4a:	2201      	movs	r2, #1
   16f4c:	6821      	ldr	r1, [r4, #0]
   16f4e:	6828      	ldr	r0, [r5, #0]
   16f50:	f7ff ff3e 	bl	16dd0 <rpc_transport_ipc_msg_alloc>
   16f54:	b968      	cbnz	r0, 16f72 <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   16f56:	f009 fa06 	bl	20366 <nrf_modem_os_is_in_isr>
   16f5a:	b918      	cbnz	r0, 16f64 <rpc_transport_ipc_ctrl_msg_alloc+0x24>
   16f5c:	a901      	add	r1, sp, #4
   16f5e:	f009 f96a 	bl	20236 <nrf_modem_os_timedwait>
   16f62:	e7f2      	b.n	16f4a <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   16f64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   16f68:	9b01      	ldr	r3, [sp, #4]
   16f6a:	4358      	muls	r0, r3
   16f6c:	f009 f95f 	bl	2022e <nrf_modem_os_busywait>
   16f70:	e7eb      	b.n	16f4a <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   16f72:	b003      	add	sp, #12
   16f74:	bd30      	pop	{r4, r5, pc}
   16f76:	bf00      	nop
   16f78:	20016974 	.word	0x20016974
   16f7c:	20016978 	.word	0x20016978

00016f80 <rpc_transport_ipc_data_alloc>:
   16f80:	4b03      	ldr	r3, [pc, #12]	; (16f90 <rpc_transport_ipc_data_alloc+0x10>)
   16f82:	781b      	ldrb	r3, [r3, #0]
   16f84:	b90b      	cbnz	r3, 16f8a <rpc_transport_ipc_data_alloc+0xa>
   16f86:	f7fe bb9b 	b.w	156c0 <nrf_modem_os_shm_tx_alloc>
   16f8a:	2000      	movs	r0, #0
   16f8c:	4770      	bx	lr
   16f8e:	bf00      	nop
   16f90:	20016c84 	.word	0x20016c84

00016f94 <nrf_modem_os_application_irq_handler>:
   16f94:	b510      	push	{r4, lr}
   16f96:	4c06      	ldr	r4, [pc, #24]	; (16fb0 <nrf_modem_os_application_irq_handler+0x1c>)
   16f98:	f7fe fb68 	bl	1566c <nrf_modem_os_application_irq_clear>
   16f9c:	6820      	ldr	r0, [r4, #0]
   16f9e:	2101      	movs	r1, #1
   16fa0:	f7ff ff3e 	bl	16e20 <handle_modem_rpc_msg>
   16fa4:	6860      	ldr	r0, [r4, #4]
   16fa6:	2102      	movs	r1, #2
   16fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16fac:	f7ff bf38 	b.w	16e20 <handle_modem_rpc_msg>
   16fb0:	20016968 	.word	0x20016968

00016fb4 <rpc_transport_ipc_msg_free>:
   16fb4:	2300      	movs	r3, #0
   16fb6:	4911      	ldr	r1, [pc, #68]	; (16ffc <rpc_transport_ipc_msg_free+0x48>)
   16fb8:	b530      	push	{r4, r5, lr}
   16fba:	680a      	ldr	r2, [r1, #0]
   16fbc:	6814      	ldr	r4, [r2, #0]
   16fbe:	42a3      	cmp	r3, r4
   16fc0:	d10b      	bne.n	16fda <rpc_transport_ipc_msg_free+0x26>
   16fc2:	2300      	movs	r3, #0
   16fc4:	684a      	ldr	r2, [r1, #4]
   16fc6:	6811      	ldr	r1, [r2, #0]
   16fc8:	428b      	cmp	r3, r1
   16fca:	d015      	beq.n	16ff8 <rpc_transport_ipc_msg_free+0x44>
   16fcc:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   16fd0:	68a4      	ldr	r4, [r4, #8]
   16fd2:	42a0      	cmp	r0, r4
   16fd4:	d008      	beq.n	16fe8 <rpc_transport_ipc_msg_free+0x34>
   16fd6:	3301      	adds	r3, #1
   16fd8:	e7f6      	b.n	16fc8 <rpc_transport_ipc_msg_free+0x14>
   16fda:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   16fde:	68ad      	ldr	r5, [r5, #8]
   16fe0:	42a8      	cmp	r0, r5
   16fe2:	d001      	beq.n	16fe8 <rpc_transport_ipc_msg_free+0x34>
   16fe4:	3301      	adds	r3, #1
   16fe6:	e7ea      	b.n	16fbe <rpc_transport_ipc_msg_free+0xa>
   16fe8:	00db      	lsls	r3, r3, #3
   16fea:	3304      	adds	r3, #4
   16fec:	58d1      	ldr	r1, [r2, r3]
   16fee:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   16ff2:	f041 0103 	orr.w	r1, r1, #3
   16ff6:	50d1      	str	r1, [r2, r3]
   16ff8:	bd30      	pop	{r4, r5, pc}
   16ffa:	bf00      	nop
   16ffc:	20016968 	.word	0x20016968

00017000 <rpc_transport_ipc_peer_data_free>:
   17000:	b510      	push	{r4, lr}
   17002:	4604      	mov	r4, r0
   17004:	f7ff ff9c 	bl	16f40 <rpc_transport_ipc_ctrl_msg_alloc>
   17008:	4a04      	ldr	r2, [pc, #16]	; (1701c <rpc_transport_ipc_peer_data_free+0x1c>)
   1700a:	6084      	str	r4, [r0, #8]
   1700c:	6002      	str	r2, [r0, #0]
   1700e:	f7ff ff67 	bl	16ee0 <rpc_transport_ipc_ctrl_msg_send>
   17012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17016:	f7fe bb21 	b.w	1565c <nrf_modem_os_application_irq_set>
   1701a:	bf00      	nop
   1701c:	00020001 	.word	0x00020001

00017020 <rpc_transport_ipc_init>:
   17020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17024:	2200      	movs	r2, #0
   17026:	b095      	sub	sp, #84	; 0x54
   17028:	4605      	mov	r5, r0
   1702a:	494d      	ldr	r1, [pc, #308]	; (17160 <rpc_transport_ipc_init+0x140>)
   1702c:	7900      	ldrb	r0, [r0, #4]
   1702e:	f7ff fd0d 	bl	16a4c <nrfx_ipc_init>
   17032:	2238      	movs	r2, #56	; 0x38
   17034:	2100      	movs	r1, #0
   17036:	a803      	add	r0, sp, #12
   17038:	f00b ffbd 	bl	22fb6 <memset>
   1703c:	2302      	movs	r3, #2
   1703e:	9304      	str	r3, [sp, #16]
   17040:	2308      	movs	r3, #8
   17042:	9306      	str	r3, [sp, #24]
   17044:	2320      	movs	r3, #32
   17046:	9308      	str	r3, [sp, #32]
   17048:	2301      	movs	r3, #1
   1704a:	930b      	str	r3, [sp, #44]	; 0x2c
   1704c:	2304      	movs	r3, #4
   1704e:	930d      	str	r3, [sp, #52]	; 0x34
   17050:	2310      	movs	r3, #16
   17052:	f04f 0c40 	mov.w	ip, #64	; 0x40
   17056:	930f      	str	r3, [sp, #60]	; 0x3c
   17058:	2380      	movs	r3, #128	; 0x80
   1705a:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   1705e:	23d5      	movs	r3, #213	; 0xd5
   17060:	a803      	add	r0, sp, #12
   17062:	9313      	str	r3, [sp, #76]	; 0x4c
   17064:	f7ff fd0a 	bl	16a7c <nrfx_ipc_config_load>
   17068:	682b      	ldr	r3, [r5, #0]
   1706a:	2100      	movs	r1, #0
   1706c:	685a      	ldr	r2, [r3, #4]
   1706e:	6818      	ldr	r0, [r3, #0]
   17070:	f00b ffa1 	bl	22fb6 <memset>
   17074:	682a      	ldr	r2, [r5, #0]
   17076:	6814      	ldr	r4, [r2, #0]
   17078:	69d3      	ldr	r3, [r2, #28]
   1707a:	f104 0660 	add.w	r6, r4, #96	; 0x60
   1707e:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   17082:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   17086:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   1708a:	f104 0920 	add.w	r9, r4, #32
   1708e:	2b00      	cmp	r3, #0
   17090:	d060      	beq.n	17154 <rpc_transport_ipc_init+0x134>
   17092:	f104 0840 	add.w	r8, r4, #64	; 0x40
   17096:	4933      	ldr	r1, [pc, #204]	; (17164 <rpc_transport_ipc_init+0x144>)
   17098:	f8c1 9000 	str.w	r9, [r1]
   1709c:	b13b      	cbz	r3, 170ae <rpc_transport_ipc_init+0x8e>
   1709e:	6992      	ldr	r2, [r2, #24]
   170a0:	4640      	mov	r0, r8
   170a2:	f8c8 2004 	str.w	r2, [r8, #4]
   170a6:	f8c8 3000 	str.w	r3, [r8]
   170aa:	f7ff fdc5 	bl	16c38 <ipc_trace_init>
   170ae:	6828      	ldr	r0, [r5, #0]
   170b0:	2300      	movs	r3, #0
   170b2:	6902      	ldr	r2, [r0, #16]
   170b4:	2101      	movs	r1, #1
   170b6:	6062      	str	r2, [r4, #4]
   170b8:	6942      	ldr	r2, [r0, #20]
   170ba:	70a1      	strb	r1, [r4, #2]
   170bc:	60a2      	str	r2, [r4, #8]
   170be:	4a2a      	ldr	r2, [pc, #168]	; (17168 <rpc_transport_ipc_init+0x148>)
   170c0:	7023      	strb	r3, [r4, #0]
   170c2:	6017      	str	r7, [r2, #0]
   170c4:	4a29      	ldr	r2, [pc, #164]	; (1716c <rpc_transport_ipc_init+0x14c>)
   170c6:	7063      	strb	r3, [r4, #1]
   170c8:	6016      	str	r6, [r2, #0]
   170ca:	2208      	movs	r2, #8
   170cc:	70e3      	strb	r3, [r4, #3]
   170ce:	60e6      	str	r6, [r4, #12]
   170d0:	6127      	str	r7, [r4, #16]
   170d2:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
   170d6:	f8c4 9014 	str.w	r9, [r4, #20]
   170da:	f8c4 8018 	str.w	r8, [r4, #24]
   170de:	707b      	strb	r3, [r7, #1]
   170e0:	70bb      	strb	r3, [r7, #2]
   170e2:	70fb      	strb	r3, [r7, #3]
   170e4:	2714      	movs	r7, #20
   170e6:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
   170ea:	4a21      	ldr	r2, [pc, #132]	; (17170 <rpc_transport_ipc_init+0x150>)
   170ec:	4d21      	ldr	r5, [pc, #132]	; (17174 <rpc_transport_ipc_init+0x154>)
   170ee:	f8c2 b000 	str.w	fp, [r2]
   170f2:	4a21      	ldr	r2, [pc, #132]	; (17178 <rpc_transport_ipc_init+0x158>)
   170f4:	7073      	strb	r3, [r6, #1]
   170f6:	f8c2 a000 	str.w	sl, [r2]
   170fa:	4a20      	ldr	r2, [pc, #128]	; (1717c <rpc_transport_ipc_init+0x15c>)
   170fc:	70b3      	strb	r3, [r6, #2]
   170fe:	70f3      	strb	r3, [r6, #3]
   17100:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   17104:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   17108:	4c1d      	ldr	r4, [pc, #116]	; (17180 <rpc_transport_ipc_init+0x160>)
   1710a:	7029      	strb	r1, [r5, #0]
   1710c:	491d      	ldr	r1, [pc, #116]	; (17184 <rpc_transport_ipc_init+0x164>)
   1710e:	6023      	str	r3, [r4, #0]
   17110:	9302      	str	r3, [sp, #8]
   17112:	600b      	str	r3, [r1, #0]
   17114:	680b      	ldr	r3, [r1, #0]
   17116:	4e1c      	ldr	r6, [pc, #112]	; (17188 <rpc_transport_ipc_init+0x168>)
   17118:	9302      	str	r3, [sp, #8]
   1711a:	9b02      	ldr	r3, [sp, #8]
   1711c:	2000      	movs	r0, #0
   1711e:	a901      	add	r1, sp, #4
   17120:	9701      	str	r7, [sp, #4]
   17122:	f009 f888 	bl	20236 <nrf_modem_os_timedwait>
   17126:	9b01      	ldr	r3, [sp, #4]
   17128:	3b14      	subs	r3, #20
   1712a:	441e      	add	r6, r3
   1712c:	782b      	ldrb	r3, [r5, #0]
   1712e:	2b01      	cmp	r3, #1
   17130:	d104      	bne.n	1713c <rpc_transport_ipc_init+0x11c>
   17132:	2e00      	cmp	r6, #0
   17134:	d1f2      	bne.n	1711c <rpc_transport_ipc_init+0xfc>
   17136:	f06f 033b 	mvn.w	r3, #59	; 0x3b
   1713a:	6023      	str	r3, [r4, #0]
   1713c:	6824      	ldr	r4, [r4, #0]
   1713e:	b95c      	cbnz	r4, 17158 <rpc_transport_ipc_init+0x138>
   17140:	4b12      	ldr	r3, [pc, #72]	; (1718c <rpc_transport_ipc_init+0x16c>)
   17142:	701c      	strb	r4, [r3, #0]
   17144:	4b12      	ldr	r3, [pc, #72]	; (17190 <rpc_transport_ipc_init+0x170>)
   17146:	801c      	strh	r4, [r3, #0]
   17148:	4b12      	ldr	r3, [pc, #72]	; (17194 <rpc_transport_ipc_init+0x174>)
   1714a:	801c      	strh	r4, [r3, #0]
   1714c:	4620      	mov	r0, r4
   1714e:	b015      	add	sp, #84	; 0x54
   17150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17154:	4698      	mov	r8, r3
   17156:	e79e      	b.n	17096 <rpc_transport_ipc_init+0x76>
   17158:	f7ff fcb6 	bl	16ac8 <nrfx_ipc_uninit>
   1715c:	e7f6      	b.n	1714c <rpc_transport_ipc_init+0x12c>
   1715e:	bf00      	nop
   17160:	00017199 	.word	0x00017199
   17164:	20016970 	.word	0x20016970
   17168:	20016980 	.word	0x20016980
   1716c:	20016978 	.word	0x20016978
   17170:	2001697c 	.word	0x2001697c
   17174:	20016c83 	.word	0x20016c83
   17178:	20016974 	.word	0x20016974
   1717c:	4002a000 	.word	0x4002a000
   17180:	20016964 	.word	0x20016964
   17184:	40005610 	.word	0x40005610
   17188:	000249f0 	.word	0x000249f0
   1718c:	20016c84 	.word	0x20016c84
   17190:	20016c72 	.word	0x20016c72
   17194:	20016c70 	.word	0x20016c70

00017198 <ipc_irq_handler>:
   17198:	b570      	push	{r4, r5, r6, lr}
   1719a:	4604      	mov	r4, r0
   1719c:	0620      	lsls	r0, r4, #24
   1719e:	d50c      	bpl.n	171ba <ipc_irq_handler+0x22>
   171a0:	f7ff fd7c 	bl	16c9c <ipc_trace_handle>
   171a4:	f7ff fe0e 	bl	16dc4 <rpc_trace_coredump_in_progress>
   171a8:	b138      	cbz	r0, 171ba <ipc_irq_handler+0x22>
   171aa:	22e0      	movs	r2, #224	; 0xe0
   171ac:	4b3f      	ldr	r3, [pc, #252]	; (172ac <ipc_irq_handler+0x114>)
   171ae:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   171b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   171b6:	605a      	str	r2, [r3, #4]
   171b8:	bd70      	pop	{r4, r5, r6, pc}
   171ba:	07e1      	lsls	r1, r4, #31
   171bc:	d548      	bpl.n	17250 <ipc_irq_handler+0xb8>
   171be:	f248 0202 	movw	r2, #32770	; 0x8002
   171c2:	4b3b      	ldr	r3, [pc, #236]	; (172b0 <ipc_irq_handler+0x118>)
   171c4:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   171c8:	4293      	cmp	r3, r2
   171ca:	d035      	beq.n	17238 <ipc_irq_handler+0xa0>
   171cc:	d81b      	bhi.n	17206 <ipc_irq_handler+0x6e>
   171ce:	f243 0232 	movw	r2, #12338	; 0x3032
   171d2:	4293      	cmp	r3, r2
   171d4:	d036      	beq.n	17244 <ipc_irq_handler+0xac>
   171d6:	d80b      	bhi.n	171f0 <ipc_irq_handler+0x58>
   171d8:	3b01      	subs	r3, #1
   171da:	2b01      	cmp	r3, #1
   171dc:	d8ec      	bhi.n	171b8 <ipc_irq_handler+0x20>
   171de:	2203      	movs	r2, #3
   171e0:	200e      	movs	r0, #14
   171e2:	4b34      	ldr	r3, [pc, #208]	; (172b4 <ipc_irq_handler+0x11c>)
   171e4:	701a      	strb	r2, [r3, #0]
   171e6:	4b34      	ldr	r3, [pc, #208]	; (172b8 <ipc_irq_handler+0x120>)
   171e8:	6018      	str	r0, [r3, #0]
   171ea:	f00b f8f7 	bl	223dc <rpc_transport_ipc_fault_handler>
   171ee:	e7e3      	b.n	171b8 <ipc_irq_handler+0x20>
   171f0:	f248 0201 	movw	r2, #32769	; 0x8001
   171f4:	4293      	cmp	r3, r2
   171f6:	d1df      	bne.n	171b8 <ipc_irq_handler+0x20>
   171f8:	2203      	movs	r2, #3
   171fa:	4b2e      	ldr	r3, [pc, #184]	; (172b4 <ipc_irq_handler+0x11c>)
   171fc:	701a      	strb	r2, [r3, #0]
   171fe:	2216      	movs	r2, #22
   17200:	4b2d      	ldr	r3, [pc, #180]	; (172b8 <ipc_irq_handler+0x120>)
   17202:	601a      	str	r2, [r3, #0]
   17204:	e7d8      	b.n	171b8 <ipc_irq_handler+0x20>
   17206:	4a2d      	ldr	r2, [pc, #180]	; (172bc <ipc_irq_handler+0x124>)
   17208:	4293      	cmp	r3, r2
   1720a:	d80c      	bhi.n	17226 <ipc_irq_handler+0x8e>
   1720c:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   17210:	d80c      	bhi.n	1722c <ipc_irq_handler+0x94>
   17212:	f248 0203 	movw	r2, #32771	; 0x8003
   17216:	4293      	cmp	r3, r2
   17218:	d1ce      	bne.n	171b8 <ipc_irq_handler+0x20>
   1721a:	2203      	movs	r2, #3
   1721c:	4b25      	ldr	r3, [pc, #148]	; (172b4 <ipc_irq_handler+0x11c>)
   1721e:	701a      	strb	r2, [r3, #0]
   17220:	220c      	movs	r2, #12
   17222:	4b25      	ldr	r3, [pc, #148]	; (172b8 <ipc_irq_handler+0x120>)
   17224:	e7ed      	b.n	17202 <ipc_irq_handler+0x6a>
   17226:	4a26      	ldr	r2, [pc, #152]	; (172c0 <ipc_irq_handler+0x128>)
   17228:	4293      	cmp	r3, r2
   1722a:	d1c5      	bne.n	171b8 <ipc_irq_handler+0x20>
   1722c:	2103      	movs	r1, #3
   1722e:	4a21      	ldr	r2, [pc, #132]	; (172b4 <ipc_irq_handler+0x11c>)
   17230:	7011      	strb	r1, [r2, #0]
   17232:	4a21      	ldr	r2, [pc, #132]	; (172b8 <ipc_irq_handler+0x120>)
   17234:	6013      	str	r3, [r2, #0]
   17236:	e7bf      	b.n	171b8 <ipc_irq_handler+0x20>
   17238:	2203      	movs	r2, #3
   1723a:	4b1e      	ldr	r3, [pc, #120]	; (172b4 <ipc_irq_handler+0x11c>)
   1723c:	701a      	strb	r2, [r3, #0]
   1723e:	222d      	movs	r2, #45	; 0x2d
   17240:	4b1d      	ldr	r3, [pc, #116]	; (172b8 <ipc_irq_handler+0x120>)
   17242:	e7de      	b.n	17202 <ipc_irq_handler+0x6a>
   17244:	2203      	movs	r2, #3
   17246:	4b1b      	ldr	r3, [pc, #108]	; (172b4 <ipc_irq_handler+0x11c>)
   17248:	701a      	strb	r2, [r3, #0]
   1724a:	2205      	movs	r2, #5
   1724c:	4b1a      	ldr	r3, [pc, #104]	; (172b8 <ipc_irq_handler+0x120>)
   1724e:	e7d8      	b.n	17202 <ipc_irq_handler+0x6a>
   17250:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   17254:	d003      	beq.n	1725e <ipc_irq_handler+0xc6>
   17256:	2202      	movs	r2, #2
   17258:	4b16      	ldr	r3, [pc, #88]	; (172b4 <ipc_irq_handler+0x11c>)
   1725a:	701a      	strb	r2, [r3, #0]
   1725c:	e7ac      	b.n	171b8 <ipc_irq_handler+0x20>
   1725e:	0762      	lsls	r2, r4, #29
   17260:	d505      	bpl.n	1726e <ipc_irq_handler+0xd6>
   17262:	4b14      	ldr	r3, [pc, #80]	; (172b4 <ipc_irq_handler+0x11c>)
   17264:	781a      	ldrb	r2, [r3, #0]
   17266:	461e      	mov	r6, r3
   17268:	b93a      	cbnz	r2, 1727a <ipc_irq_handler+0xe2>
   1726a:	f7fe f9f7 	bl	1565c <nrf_modem_os_application_irq_set>
   1726e:	06e3      	lsls	r3, r4, #27
   17270:	d5a2      	bpl.n	171b8 <ipc_irq_handler+0x20>
   17272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   17276:	f7fe b9f1 	b.w	1565c <nrf_modem_os_application_irq_set>
   1727a:	2a01      	cmp	r2, #1
   1727c:	d1f7      	bne.n	1726e <ipc_irq_handler+0xd6>
   1727e:	4a11      	ldr	r2, [pc, #68]	; (172c4 <ipc_irq_handler+0x12c>)
   17280:	4811      	ldr	r0, [pc, #68]	; (172c8 <ipc_irq_handler+0x130>)
   17282:	6812      	ldr	r2, [r2, #0]
   17284:	6891      	ldr	r1, [r2, #8]
   17286:	6041      	str	r1, [r0, #4]
   17288:	6852      	ldr	r2, [r2, #4]
   1728a:	6002      	str	r2, [r0, #0]
   1728c:	b101      	cbz	r1, 17290 <ipc_irq_handler+0xf8>
   1728e:	b92a      	cbnz	r2, 1729c <ipc_irq_handler+0x104>
   17290:	2303      	movs	r3, #3
   17292:	2216      	movs	r2, #22
   17294:	7033      	strb	r3, [r6, #0]
   17296:	4b08      	ldr	r3, [pc, #32]	; (172b8 <ipc_irq_handler+0x120>)
   17298:	601a      	str	r2, [r3, #0]
   1729a:	e7e8      	b.n	1726e <ipc_irq_handler+0xd6>
   1729c:	6809      	ldr	r1, [r1, #0]
   1729e:	2910      	cmp	r1, #16
   172a0:	d8f6      	bhi.n	17290 <ipc_irq_handler+0xf8>
   172a2:	6812      	ldr	r2, [r2, #0]
   172a4:	2a10      	cmp	r2, #16
   172a6:	d8f3      	bhi.n	17290 <ipc_irq_handler+0xf8>
   172a8:	701d      	strb	r5, [r3, #0]
   172aa:	e7e0      	b.n	1726e <ipc_irq_handler+0xd6>
   172ac:	e000e100 	.word	0xe000e100
   172b0:	4002a000 	.word	0x4002a000
   172b4:	20016c83 	.word	0x20016c83
   172b8:	20016964 	.word	0x20016964
   172bc:	04400004 	.word	0x04400004
   172c0:	05500001 	.word	0x05500001
   172c4:	20016970 	.word	0x20016970
   172c8:	20016968 	.word	0x20016968

000172cc <gnss_client_event_handler>:
   172cc:	f850 1b08 	ldr.w	r1, [r0], #8
   172d0:	4b01      	ldr	r3, [pc, #4]	; (172d8 <gnss_client_event_handler+0xc>)
   172d2:	0c09      	lsrs	r1, r1, #16
   172d4:	681b      	ldr	r3, [r3, #0]
   172d6:	4718      	bx	r3
   172d8:	20016984 	.word	0x20016984

000172dc <rpc_gnss_client_set_handler>:
   172dc:	4b01      	ldr	r3, [pc, #4]	; (172e4 <rpc_gnss_client_set_handler+0x8>)
   172de:	6018      	str	r0, [r3, #0]
   172e0:	4770      	bx	lr
   172e2:	bf00      	nop
   172e4:	20016984 	.word	0x20016984

000172e8 <interface_init>:
   172e8:	b508      	push	{r3, lr}
   172ea:	f44f 72c6 	mov.w	r2, #396	; 0x18c
   172ee:	2100      	movs	r1, #0
   172f0:	4802      	ldr	r0, [pc, #8]	; (172fc <interface_init+0x14>)
   172f2:	f00b fe60 	bl	22fb6 <memset>
   172f6:	2000      	movs	r0, #0
   172f8:	bd08      	pop	{r3, pc}
   172fa:	bf00      	nop
   172fc:	20016988 	.word	0x20016988

00017300 <interface_socket_allocate>:
   17300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17302:	4606      	mov	r6, r0
   17304:	2400      	movs	r4, #0
   17306:	272c      	movs	r7, #44	; 0x2c
   17308:	4b0f      	ldr	r3, [pc, #60]	; (17348 <interface_socket_allocate+0x48>)
   1730a:	fb07 f004 	mul.w	r0, r7, r4
   1730e:	181d      	adds	r5, r3, r0
   17310:	5818      	ldr	r0, [r3, r0]
   17312:	b988      	cbnz	r0, 17338 <interface_socket_allocate+0x38>
   17314:	f04f 37ff 	mov.w	r7, #4294967295
   17318:	2301      	movs	r3, #1
   1731a:	4628      	mov	r0, r5
   1731c:	61af      	str	r7, [r5, #24]
   1731e:	602b      	str	r3, [r5, #0]
   17320:	f00a f9e3 	bl	216ea <packet_handler_alloc_and_init>
   17324:	b168      	cbz	r0, 17342 <interface_socket_allocate+0x42>
   17326:	4628      	mov	r0, r5
   17328:	f00a f9f6 	bl	21718 <socket_free>
   1732c:	200c      	movs	r0, #12
   1732e:	f7fe f827 	bl	15380 <nrf_modem_os_errno_set>
   17332:	f04f 34ff 	mov.w	r4, #4294967295
   17336:	e005      	b.n	17344 <interface_socket_allocate+0x44>
   17338:	3401      	adds	r4, #1
   1733a:	2c09      	cmp	r4, #9
   1733c:	d1e5      	bne.n	1730a <interface_socket_allocate+0xa>
   1733e:	2069      	movs	r0, #105	; 0x69
   17340:	e7f5      	b.n	1732e <interface_socket_allocate+0x2e>
   17342:	6035      	str	r5, [r6, #0]
   17344:	4620      	mov	r0, r4
   17346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17348:	20016988 	.word	0x20016988

0001734c <interface_socket_free>:
   1734c:	2808      	cmp	r0, #8
   1734e:	d805      	bhi.n	1735c <interface_socket_free+0x10>
   17350:	222c      	movs	r2, #44	; 0x2c
   17352:	4b03      	ldr	r3, [pc, #12]	; (17360 <interface_socket_free+0x14>)
   17354:	fb02 3000 	mla	r0, r2, r0, r3
   17358:	f00a b9de 	b.w	21718 <socket_free>
   1735c:	4770      	bx	lr
   1735e:	bf00      	nop
   17360:	20016988 	.word	0x20016988

00017364 <interface_socket_packet_handler_update>:
   17364:	2808      	cmp	r0, #8
   17366:	b570      	push	{r4, r5, r6, lr}
   17368:	d812      	bhi.n	17390 <interface_socket_packet_handler_update+0x2c>
   1736a:	232c      	movs	r3, #44	; 0x2c
   1736c:	4358      	muls	r0, r3
   1736e:	4c09      	ldr	r4, [pc, #36]	; (17394 <interface_socket_packet_handler_update+0x30>)
   17370:	5823      	ldr	r3, [r4, r0]
   17372:	1825      	adds	r5, r4, r0
   17374:	b163      	cbz	r3, 17390 <interface_socket_packet_handler_update+0x2c>
   17376:	4628      	mov	r0, r5
   17378:	69ee      	ldr	r6, [r5, #28]
   1737a:	f00a f9b6 	bl	216ea <packet_handler_alloc_and_init>
   1737e:	4604      	mov	r4, r0
   17380:	b920      	cbnz	r0, 1738c <interface_socket_packet_handler_update+0x28>
   17382:	4630      	mov	r0, r6
   17384:	f00b f80d 	bl	223a2 <packet_handler_delete>
   17388:	4620      	mov	r0, r4
   1738a:	bd70      	pop	{r4, r5, r6, pc}
   1738c:	61ee      	str	r6, [r5, #28]
   1738e:	e7fb      	b.n	17388 <interface_socket_packet_handler_update+0x24>
   17390:	2402      	movs	r4, #2
   17392:	e7f9      	b.n	17388 <interface_socket_packet_handler_update+0x24>
   17394:	20016988 	.word	0x20016988

00017398 <interface_socket_wait>:
   17398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1739c:	4615      	mov	r5, r2
   1739e:	222c      	movs	r2, #44	; 0x2c
   173a0:	4350      	muls	r0, r2
   173a2:	461e      	mov	r6, r3
   173a4:	4b0e      	ldr	r3, [pc, #56]	; (173e0 <interface_socket_wait+0x48>)
   173a6:	460c      	mov	r4, r1
   173a8:	181f      	adds	r7, r3, r0
   173aa:	581b      	ldr	r3, [r3, r0]
   173ac:	402b      	ands	r3, r5
   173ae:	428b      	cmp	r3, r1
   173b0:	d102      	bne.n	173b8 <interface_socket_wait+0x20>
   173b2:	2000      	movs	r0, #0
   173b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   173b8:	687b      	ldr	r3, [r7, #4]
   173ba:	2b00      	cmp	r3, #0
   173bc:	d1f9      	bne.n	173b2 <interface_socket_wait+0x1a>
   173be:	46b8      	mov	r8, r7
   173c0:	f8d8 3000 	ldr.w	r3, [r8]
   173c4:	402b      	ands	r3, r5
   173c6:	42a3      	cmp	r3, r4
   173c8:	d0f3      	beq.n	173b2 <interface_socket_wait+0x1a>
   173ca:	f8d8 3004 	ldr.w	r3, [r8, #4]
   173ce:	2b00      	cmp	r3, #0
   173d0:	d1ef      	bne.n	173b2 <interface_socket_wait+0x1a>
   173d2:	4631      	mov	r1, r6
   173d4:	4638      	mov	r0, r7
   173d6:	f008 ff2e 	bl	20236 <nrf_modem_os_timedwait>
   173da:	2800      	cmp	r0, #0
   173dc:	d0f0      	beq.n	173c0 <interface_socket_wait+0x28>
   173de:	e7e9      	b.n	173b4 <interface_socket_wait+0x1c>
   173e0:	20016988 	.word	0x20016988

000173e4 <interface_from_internal_id_search>:
   173e4:	4b0a      	ldr	r3, [pc, #40]	; (17410 <interface_from_internal_id_search+0x2c>)
   173e6:	4602      	mov	r2, r0
   173e8:	b530      	push	{r4, r5, lr}
   173ea:	2000      	movs	r0, #0
   173ec:	461c      	mov	r4, r3
   173ee:	212c      	movs	r1, #44	; 0x2c
   173f0:	fb01 f500 	mul.w	r5, r1, r0
   173f4:	5965      	ldr	r5, [r4, r5]
   173f6:	b115      	cbz	r5, 173fe <interface_from_internal_id_search+0x1a>
   173f8:	699d      	ldr	r5, [r3, #24]
   173fa:	4295      	cmp	r5, r2
   173fc:	d006      	beq.n	1740c <interface_from_internal_id_search+0x28>
   173fe:	3001      	adds	r0, #1
   17400:	2809      	cmp	r0, #9
   17402:	f103 032c 	add.w	r3, r3, #44	; 0x2c
   17406:	d1f3      	bne.n	173f0 <interface_from_internal_id_search+0xc>
   17408:	f04f 30ff 	mov.w	r0, #4294967295
   1740c:	bd30      	pop	{r4, r5, pc}
   1740e:	bf00      	nop
   17410:	20016988 	.word	0x20016988

00017414 <interface_socket_from_handle_get>:
   17414:	2808      	cmp	r0, #8
   17416:	d809      	bhi.n	1742c <interface_socket_from_handle_get+0x18>
   17418:	232c      	movs	r3, #44	; 0x2c
   1741a:	4358      	muls	r0, r3
   1741c:	4a04      	ldr	r2, [pc, #16]	; (17430 <interface_socket_from_handle_get+0x1c>)
   1741e:	1813      	adds	r3, r2, r0
   17420:	5812      	ldr	r2, [r2, r0]
   17422:	2a00      	cmp	r2, #0
   17424:	bf14      	ite	ne
   17426:	4618      	movne	r0, r3
   17428:	2000      	moveq	r0, #0
   1742a:	4770      	bx	lr
   1742c:	2000      	movs	r0, #0
   1742e:	4770      	bx	lr
   17430:	20016988 	.word	0x20016988

00017434 <interface_socket_setopt>:
   17434:	2808      	cmp	r0, #8
   17436:	b538      	push	{r3, r4, r5, lr}
   17438:	d82c      	bhi.n	17494 <interface_socket_setopt+0x60>
   1743a:	242c      	movs	r4, #44	; 0x2c
   1743c:	4360      	muls	r0, r4
   1743e:	4d16      	ldr	r5, [pc, #88]	; (17498 <interface_socket_setopt+0x64>)
   17440:	182c      	adds	r4, r5, r0
   17442:	5828      	ldr	r0, [r5, r0]
   17444:	b330      	cbz	r0, 17494 <interface_socket_setopt+0x60>
   17446:	2901      	cmp	r1, #1
   17448:	d005      	beq.n	17456 <interface_socket_setopt+0x22>
   1744a:	202a      	movs	r0, #42	; 0x2a
   1744c:	f7fd ff98 	bl	15380 <nrf_modem_os_errno_set>
   17450:	f04f 30ff 	mov.w	r0, #4294967295
   17454:	e01b      	b.n	1748e <interface_socket_setopt+0x5a>
   17456:	f1a2 0114 	sub.w	r1, r2, #20
   1745a:	2901      	cmp	r1, #1
   1745c:	d8f5      	bhi.n	1744a <interface_socket_setopt+0x16>
   1745e:	9904      	ldr	r1, [sp, #16]
   17460:	2908      	cmp	r1, #8
   17462:	d115      	bne.n	17490 <interface_socket_setopt+0x5c>
   17464:	b1a3      	cbz	r3, 17490 <interface_socket_setopt+0x5c>
   17466:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1746a:	6858      	ldr	r0, [r3, #4]
   1746c:	2100      	movs	r1, #0
   1746e:	fbb0 f0f5 	udiv	r0, r0, r5
   17472:	681b      	ldr	r3, [r3, #0]
   17474:	fbe5 0103 	umlal	r0, r1, r5, r3
   17478:	2901      	cmp	r1, #1
   1747a:	bf08      	it	eq
   1747c:	2800      	cmpeq	r0, #0
   1747e:	d301      	bcc.n	17484 <interface_socket_setopt+0x50>
   17480:	2025      	movs	r0, #37	; 0x25
   17482:	e7e3      	b.n	1744c <interface_socket_setopt+0x18>
   17484:	2a14      	cmp	r2, #20
   17486:	bf0c      	ite	eq
   17488:	6220      	streq	r0, [r4, #32]
   1748a:	6260      	strne	r0, [r4, #36]	; 0x24
   1748c:	2000      	movs	r0, #0
   1748e:	bd38      	pop	{r3, r4, r5, pc}
   17490:	2016      	movs	r0, #22
   17492:	e7db      	b.n	1744c <interface_socket_setopt+0x18>
   17494:	2009      	movs	r0, #9
   17496:	e7d9      	b.n	1744c <interface_socket_setopt+0x18>
   17498:	20016988 	.word	0x20016988

0001749c <interface_socket_getopt>:
   1749c:	b570      	push	{r4, r5, r6, lr}
   1749e:	2808      	cmp	r0, #8
   174a0:	9d04      	ldr	r5, [sp, #16]
   174a2:	d832      	bhi.n	1750a <interface_socket_getopt+0x6e>
   174a4:	242c      	movs	r4, #44	; 0x2c
   174a6:	4360      	muls	r0, r4
   174a8:	4e19      	ldr	r6, [pc, #100]	; (17510 <interface_socket_getopt+0x74>)
   174aa:	1834      	adds	r4, r6, r0
   174ac:	5830      	ldr	r0, [r6, r0]
   174ae:	b360      	cbz	r0, 1750a <interface_socket_getopt+0x6e>
   174b0:	2901      	cmp	r1, #1
   174b2:	d005      	beq.n	174c0 <interface_socket_getopt+0x24>
   174b4:	202a      	movs	r0, #42	; 0x2a
   174b6:	f7fd ff63 	bl	15380 <nrf_modem_os_errno_set>
   174ba:	f04f 30ff 	mov.w	r0, #4294967295
   174be:	e00c      	b.n	174da <interface_socket_getopt+0x3e>
   174c0:	b103      	cbz	r3, 174c4 <interface_socket_getopt+0x28>
   174c2:	b90d      	cbnz	r5, 174c8 <interface_socket_getopt+0x2c>
   174c4:	2016      	movs	r0, #22
   174c6:	e7f6      	b.n	174b6 <interface_socket_getopt+0x1a>
   174c8:	2a04      	cmp	r2, #4
   174ca:	d107      	bne.n	174dc <interface_socket_getopt+0x40>
   174cc:	682a      	ldr	r2, [r5, #0]
   174ce:	2a04      	cmp	r2, #4
   174d0:	d1f8      	bne.n	174c4 <interface_socket_getopt+0x28>
   174d2:	2000      	movs	r0, #0
   174d4:	6862      	ldr	r2, [r4, #4]
   174d6:	601a      	str	r2, [r3, #0]
   174d8:	6060      	str	r0, [r4, #4]
   174da:	bd70      	pop	{r4, r5, r6, pc}
   174dc:	f1a2 0114 	sub.w	r1, r2, #20
   174e0:	2901      	cmp	r1, #1
   174e2:	d8e7      	bhi.n	174b4 <interface_socket_getopt+0x18>
   174e4:	6829      	ldr	r1, [r5, #0]
   174e6:	2908      	cmp	r1, #8
   174e8:	d1ec      	bne.n	174c4 <interface_socket_getopt+0x28>
   174ea:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   174ee:	2a14      	cmp	r2, #20
   174f0:	bf18      	it	ne
   174f2:	4608      	movne	r0, r1
   174f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   174f8:	fbb0 f1f2 	udiv	r1, r0, r2
   174fc:	6019      	str	r1, [r3, #0]
   174fe:	fb02 0111 	mls	r1, r2, r1, r0
   17502:	434a      	muls	r2, r1
   17504:	2000      	movs	r0, #0
   17506:	605a      	str	r2, [r3, #4]
   17508:	e7e7      	b.n	174da <interface_socket_getopt+0x3e>
   1750a:	2009      	movs	r0, #9
   1750c:	e7d3      	b.n	174b6 <interface_socket_getopt+0x1a>
   1750e:	bf00      	nop
   17510:	20016988 	.word	0x20016988

00017514 <interface_socket_fcntl>:
   17514:	2808      	cmp	r0, #8
   17516:	b510      	push	{r4, lr}
   17518:	d82c      	bhi.n	17574 <interface_socket_fcntl+0x60>
   1751a:	232c      	movs	r3, #44	; 0x2c
   1751c:	4343      	muls	r3, r0
   1751e:	4c16      	ldr	r4, [pc, #88]	; (17578 <interface_socket_fcntl+0x64>)
   17520:	58e0      	ldr	r0, [r4, r3]
   17522:	b338      	cbz	r0, 17574 <interface_socket_fcntl+0x60>
   17524:	2901      	cmp	r1, #1
   17526:	d11d      	bne.n	17564 <interface_socket_fcntl+0x50>
   17528:	f012 0001 	ands.w	r0, r2, #1
   1752c:	58e2      	ldr	r2, [r4, r3]
   1752e:	d004      	beq.n	1753a <interface_socket_fcntl+0x26>
   17530:	2000      	movs	r0, #0
   17532:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   17536:	50e2      	str	r2, [r4, r3]
   17538:	bd10      	pop	{r4, pc}
   1753a:	0092      	lsls	r2, r2, #2
   1753c:	d407      	bmi.n	1754e <interface_socket_fcntl+0x3a>
   1753e:	58e2      	ldr	r2, [r4, r3]
   17540:	b292      	uxth	r2, r2
   17542:	2a0a      	cmp	r2, #10
   17544:	d003      	beq.n	1754e <interface_socket_fcntl+0x3a>
   17546:	58e2      	ldr	r2, [r4, r3]
   17548:	b292      	uxth	r2, r2
   1754a:	2a0b      	cmp	r2, #11
   1754c:	d105      	bne.n	1755a <interface_socket_fcntl+0x46>
   1754e:	2023      	movs	r0, #35	; 0x23
   17550:	f7fd ff16 	bl	15380 <nrf_modem_os_errno_set>
   17554:	f04f 30ff 	mov.w	r0, #4294967295
   17558:	e7ee      	b.n	17538 <interface_socket_fcntl+0x24>
   1755a:	58e2      	ldr	r2, [r4, r3]
   1755c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   17560:	50e2      	str	r2, [r4, r3]
   17562:	e7e9      	b.n	17538 <interface_socket_fcntl+0x24>
   17564:	2902      	cmp	r1, #2
   17566:	d103      	bne.n	17570 <interface_socket_fcntl+0x5c>
   17568:	58e0      	ldr	r0, [r4, r3]
   1756a:	f3c0 7000 	ubfx	r0, r0, #28, #1
   1756e:	e7e3      	b.n	17538 <interface_socket_fcntl+0x24>
   17570:	2016      	movs	r0, #22
   17572:	e7ed      	b.n	17550 <interface_socket_fcntl+0x3c>
   17574:	2009      	movs	r0, #9
   17576:	e7eb      	b.n	17550 <interface_socket_fcntl+0x3c>
   17578:	20016988 	.word	0x20016988

0001757c <rpc_error_to_nrf_errno>:
   1757c:	286a      	cmp	r0, #106	; 0x6a
   1757e:	bf9a      	itte	ls
   17580:	4b01      	ldrls	r3, [pc, #4]	; (17588 <rpc_error_to_nrf_errno+0xc>)
   17582:	5618      	ldrsbls	r0, [r3, r0]
   17584:	202d      	movhi	r0, #45	; 0x2d
   17586:	4770      	bx	lr
   17588:	00024bc6 	.word	0x00024bc6

0001758c <rpc_error_to_nrf_gai_errno>:
   1758c:	2805      	cmp	r0, #5
   1758e:	d013      	beq.n	175b8 <rpc_error_to_nrf_gai_errno+0x2c>
   17590:	d807      	bhi.n	175a2 <rpc_error_to_nrf_gai_errno+0x16>
   17592:	b170      	cbz	r0, 175b2 <rpc_error_to_nrf_gai_errno+0x26>
   17594:	4b0b      	ldr	r3, [pc, #44]	; (175c4 <rpc_error_to_nrf_gai_errno+0x38>)
   17596:	561b      	ldrsb	r3, [r3, r0]
   17598:	4a0b      	ldr	r2, [pc, #44]	; (175c8 <rpc_error_to_nrf_gai_errno+0x3c>)
   1759a:	f240 1015 	movw	r0, #277	; 0x115
   1759e:	6013      	str	r3, [r2, #0]
   175a0:	4770      	bx	lr
   175a2:	2806      	cmp	r0, #6
   175a4:	d00b      	beq.n	175be <rpc_error_to_nrf_gai_errno+0x32>
   175a6:	280d      	cmp	r0, #13
   175a8:	d009      	beq.n	175be <rpc_error_to_nrf_gai_errno+0x32>
   175aa:	286a      	cmp	r0, #106	; 0x6a
   175ac:	d9f2      	bls.n	17594 <rpc_error_to_nrf_gai_errno+0x8>
   175ae:	232d      	movs	r3, #45	; 0x2d
   175b0:	e7f2      	b.n	17598 <rpc_error_to_nrf_gai_errno+0xc>
   175b2:	4b05      	ldr	r3, [pc, #20]	; (175c8 <rpc_error_to_nrf_gai_errno+0x3c>)
   175b4:	6018      	str	r0, [r3, #0]
   175b6:	4770      	bx	lr
   175b8:	f44f 708a 	mov.w	r0, #276	; 0x114
   175bc:	4770      	bx	lr
   175be:	f240 1011 	movw	r0, #273	; 0x111
   175c2:	4770      	bx	lr
   175c4:	00024bc6 	.word	0x00024bc6
   175c8:	20016b1c 	.word	0x20016b1c

000175cc <ip_interface_init>:
   175cc:	b510      	push	{r4, lr}
   175ce:	2400      	movs	r4, #0
   175d0:	4b06      	ldr	r3, [pc, #24]	; (175ec <ip_interface_init+0x20>)
   175d2:	2224      	movs	r2, #36	; 0x24
   175d4:	601c      	str	r4, [r3, #0]
   175d6:	4b06      	ldr	r3, [pc, #24]	; (175f0 <ip_interface_init+0x24>)
   175d8:	4621      	mov	r1, r4
   175da:	4806      	ldr	r0, [pc, #24]	; (175f4 <ip_interface_init+0x28>)
   175dc:	601c      	str	r4, [r3, #0]
   175de:	f00b fcea 	bl	22fb6 <memset>
   175e2:	2201      	movs	r2, #1
   175e4:	4b04      	ldr	r3, [pc, #16]	; (175f8 <ip_interface_init+0x2c>)
   175e6:	4620      	mov	r0, r4
   175e8:	701a      	strb	r2, [r3, #0]
   175ea:	bd10      	pop	{r4, pc}
   175ec:	20016b28 	.word	0x20016b28
   175f0:	20016b24 	.word	0x20016b24
   175f4:	20016b2c 	.word	0x20016b2c
   175f8:	20016c85 	.word	0x20016c85

000175fc <ip_interface_open>:
   175fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   175fe:	2302      	movs	r3, #2
   17600:	460d      	mov	r5, r1
   17602:	4611      	mov	r1, r2
   17604:	2200      	movs	r2, #0
   17606:	f04f 34ff 	mov.w	r4, #4294967295
   1760a:	b085      	sub	sp, #20
   1760c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   17610:	4b34      	ldr	r3, [pc, #208]	; (176e4 <ip_interface_open+0xe8>)
   17612:	4606      	mov	r6, r0
   17614:	781b      	ldrb	r3, [r3, #0]
   17616:	9403      	str	r4, [sp, #12]
   17618:	b92b      	cbnz	r3, 17626 <ip_interface_open+0x2a>
   1761a:	2070      	movs	r0, #112	; 0x70
   1761c:	f7fd feb0 	bl	15380 <nrf_modem_os_errno_set>
   17620:	4620      	mov	r0, r4
   17622:	b005      	add	sp, #20
   17624:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17626:	f020 0308 	bic.w	r3, r0, #8
   1762a:	2b02      	cmp	r3, #2
   1762c:	d003      	beq.n	17636 <ip_interface_open+0x3a>
   1762e:	2805      	cmp	r0, #5
   17630:	d001      	beq.n	17636 <ip_interface_open+0x3a>
   17632:	202f      	movs	r0, #47	; 0x2f
   17634:	e7f2      	b.n	1761c <ip_interface_open+0x20>
   17636:	1e6b      	subs	r3, r5, #1
   17638:	2b02      	cmp	r3, #2
   1763a:	d814      	bhi.n	17666 <ip_interface_open+0x6a>
   1763c:	4628      	mov	r0, r5
   1763e:	aa02      	add	r2, sp, #8
   17640:	f00a f89b 	bl	2177a <protocol_verify>
   17644:	4607      	mov	r7, r0
   17646:	2800      	cmp	r0, #0
   17648:	d149      	bne.n	176de <ip_interface_open+0xe2>
   1764a:	4629      	mov	r1, r5
   1764c:	4a26      	ldr	r2, [pc, #152]	; (176e8 <ip_interface_open+0xec>)
   1764e:	a801      	add	r0, sp, #4
   17650:	f7ff fe56 	bl	17300 <interface_socket_allocate>
   17654:	9b01      	ldr	r3, [sp, #4]
   17656:	4604      	mov	r4, r0
   17658:	b95b      	cbnz	r3, 17672 <ip_interface_open+0x76>
   1765a:	2669      	movs	r6, #105	; 0x69
   1765c:	4620      	mov	r0, r4
   1765e:	f7ff fe75 	bl	1734c <interface_socket_free>
   17662:	4630      	mov	r0, r6
   17664:	e000      	b.n	17668 <ip_interface_open+0x6c>
   17666:	2016      	movs	r0, #22
   17668:	f7fd fe8a 	bl	15380 <nrf_modem_os_errno_set>
   1766c:	f04f 34ff 	mov.w	r4, #4294967295
   17670:	e7d6      	b.n	17620 <ip_interface_open+0x24>
   17672:	9a02      	ldr	r2, [sp, #8]
   17674:	e9c3 6503 	strd	r6, r5, [r3, #12]
   17678:	615a      	str	r2, [r3, #20]
   1767a:	f04f 31ff 	mov.w	r1, #4294967295
   1767e:	463b      	mov	r3, r7
   17680:	f247 0201 	movw	r2, #28673	; 0x7001
   17684:	f00a f8bc 	bl	21800 <ip_interface_request_create>
   17688:	2800      	cmp	r0, #0
   1768a:	d0e6      	beq.n	1765a <ip_interface_open+0x5e>
   1768c:	6883      	ldr	r3, [r0, #8]
   1768e:	3e02      	subs	r6, #2
   17690:	2e08      	cmp	r6, #8
   17692:	f103 030c 	add.w	r3, r3, #12
   17696:	6083      	str	r3, [r0, #8]
   17698:	bf98      	it	ls
   1769a:	4b14      	ldrls	r3, [pc, #80]	; (176ec <ip_interface_open+0xf0>)
   1769c:	f247 0101 	movw	r1, #28673	; 0x7001
   176a0:	bf98      	it	ls
   176a2:	579f      	ldrsbls	r7, [r3, r6]
   176a4:	9b02      	ldr	r3, [sp, #8]
   176a6:	6147      	str	r7, [r0, #20]
   176a8:	61c3      	str	r3, [r0, #28]
   176aa:	6185      	str	r5, [r0, #24]
   176ac:	f009 febb 	bl	21426 <rpc_ip_client_request_send>
   176b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   176b4:	2102      	movs	r1, #2
   176b6:	4620      	mov	r0, r4
   176b8:	ab03      	add	r3, sp, #12
   176ba:	f00a f8b9 	bl	21830 <ip_interface_wait>
   176be:	4606      	mov	r6, r0
   176c0:	2800      	cmp	r0, #0
   176c2:	d1cb      	bne.n	1765c <ip_interface_open+0x60>
   176c4:	3d02      	subs	r5, #2
   176c6:	2d01      	cmp	r5, #1
   176c8:	d8aa      	bhi.n	17620 <ip_interface_open+0x24>
   176ca:	9b01      	ldr	r3, [sp, #4]
   176cc:	681a      	ldr	r2, [r3, #0]
   176ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   176d2:	601a      	str	r2, [r3, #0]
   176d4:	681a      	ldr	r2, [r3, #0]
   176d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   176da:	601a      	str	r2, [r3, #0]
   176dc:	e7a0      	b.n	17620 <ip_interface_open+0x24>
   176de:	4604      	mov	r4, r0
   176e0:	e79e      	b.n	17620 <ip_interface_open+0x24>
   176e2:	bf00      	nop
   176e4:	20016c85 	.word	0x20016c85
   176e8:	00021763 	.word	0x00021763
   176ec:	00024bb8 	.word	0x00024bb8

000176f0 <ip_interface_close>:
   176f0:	f04f 33ff 	mov.w	r3, #4294967295
   176f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   176f6:	4605      	mov	r5, r0
   176f8:	9301      	str	r3, [sp, #4]
   176fa:	f7ff fe8b 	bl	17414 <interface_socket_from_handle_get>
   176fe:	4604      	mov	r4, r0
   17700:	b378      	cbz	r0, 17762 <ip_interface_close+0x72>
   17702:	6981      	ldr	r1, [r0, #24]
   17704:	2300      	movs	r3, #0
   17706:	f247 0209 	movw	r2, #28681	; 0x7009
   1770a:	4628      	mov	r0, r5
   1770c:	f00a f878 	bl	21800 <ip_interface_request_create>
   17710:	b368      	cbz	r0, 1776e <ip_interface_close+0x7e>
   17712:	6823      	ldr	r3, [r4, #0]
   17714:	f247 0109 	movw	r1, #28681	; 0x7009
   17718:	0c1b      	lsrs	r3, r3, #16
   1771a:	041b      	lsls	r3, r3, #16
   1771c:	f043 030d 	orr.w	r3, r3, #13
   17720:	6023      	str	r3, [r4, #0]
   17722:	6823      	ldr	r3, [r4, #0]
   17724:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   17728:	6023      	str	r3, [r4, #0]
   1772a:	6823      	ldr	r3, [r4, #0]
   1772c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   17730:	6023      	str	r3, [r4, #0]
   17732:	4c10      	ldr	r4, [pc, #64]	; (17774 <ip_interface_close+0x84>)
   17734:	f009 fe77 	bl	21426 <rpc_ip_client_request_send>
   17738:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1773c:	210e      	movs	r1, #14
   1773e:	4628      	mov	r0, r5
   17740:	ab01      	add	r3, sp, #4
   17742:	f00a f875 	bl	21830 <ip_interface_wait>
   17746:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   1774a:	b120      	cbz	r0, 17756 <ip_interface_close+0x66>
   1774c:	f009 fe75 	bl	2143a <rpc_ip_client_message_free>
   17750:	2300      	movs	r3, #0
   17752:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
   17756:	4628      	mov	r0, r5
   17758:	f7ff fdf8 	bl	1734c <interface_socket_free>
   1775c:	2000      	movs	r0, #0
   1775e:	b003      	add	sp, #12
   17760:	bd30      	pop	{r4, r5, pc}
   17762:	2009      	movs	r0, #9
   17764:	f7fd fe0c 	bl	15380 <nrf_modem_os_errno_set>
   17768:	f04f 30ff 	mov.w	r0, #4294967295
   1776c:	e7f7      	b.n	1775e <ip_interface_close+0x6e>
   1776e:	200c      	movs	r0, #12
   17770:	e7f8      	b.n	17764 <ip_interface_close+0x74>
   17772:	bf00      	nop
   17774:	20016b2c 	.word	0x20016b2c

00017778 <ip_interface_sendto>:
   17778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1777c:	461f      	mov	r7, r3
   1777e:	f04f 3aff 	mov.w	sl, #4294967295
   17782:	2364      	movs	r3, #100	; 0x64
   17784:	b089      	sub	sp, #36	; 0x24
   17786:	4606      	mov	r6, r0
   17788:	4688      	mov	r8, r1
   1778a:	4614      	mov	r4, r2
   1778c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   17790:	f8cd a010 	str.w	sl, [sp, #16]
   17794:	9306      	str	r3, [sp, #24]
   17796:	f7ff fe3d 	bl	17414 <interface_socket_from_handle_get>
   1779a:	4605      	mov	r5, r0
   1779c:	b930      	cbnz	r0, 177ac <ip_interface_sendto+0x34>
   1779e:	2009      	movs	r0, #9
   177a0:	f7fd fdee 	bl	15380 <nrf_modem_os_errno_set>
   177a4:	4650      	mov	r0, sl
   177a6:	b009      	add	sp, #36	; 0x24
   177a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177ac:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   177b0:	dd01      	ble.n	177b6 <ip_interface_sendto+0x3e>
   177b2:	2028      	movs	r0, #40	; 0x28
   177b4:	e7f4      	b.n	177a0 <ip_interface_sendto+0x28>
   177b6:	b11f      	cbz	r7, 177c0 <ip_interface_sendto+0x48>
   177b8:	2f02      	cmp	r7, #2
   177ba:	d012      	beq.n	177e2 <ip_interface_sendto+0x6a>
   177bc:	202d      	movs	r0, #45	; 0x2d
   177be:	e7ef      	b.n	177a0 <ip_interface_sendto+0x28>
   177c0:	6803      	ldr	r3, [r0, #0]
   177c2:	f083 5380 	eor.w	r3, r3, #268435456	; 0x10000000
   177c6:	f3c3 7300 	ubfx	r3, r3, #28, #1
   177ca:	2c00      	cmp	r4, #0
   177cc:	9302      	str	r3, [sp, #8]
   177ce:	dd0a      	ble.n	177e6 <ip_interface_sendto+0x6e>
   177d0:	f1b8 0f00 	cmp.w	r8, #0
   177d4:	d107      	bne.n	177e6 <ip_interface_sendto+0x6e>
   177d6:	200e      	movs	r0, #14
   177d8:	f7fd fdd2 	bl	15380 <nrf_modem_os_errno_set>
   177dc:	f04f 3aff 	mov.w	sl, #4294967295
   177e0:	e7e0      	b.n	177a4 <ip_interface_sendto+0x2c>
   177e2:	2300      	movs	r3, #0
   177e4:	e7f1      	b.n	177ca <ip_interface_sendto+0x52>
   177e6:	f1b9 0f00 	cmp.w	r9, #0
   177ea:	d012      	beq.n	17812 <ip_interface_sendto+0x9a>
   177ec:	692b      	ldr	r3, [r5, #16]
   177ee:	2b01      	cmp	r3, #1
   177f0:	d101      	bne.n	177f6 <ip_interface_sendto+0x7e>
   177f2:	2038      	movs	r0, #56	; 0x38
   177f4:	e7f0      	b.n	177d8 <ip_interface_sendto+0x60>
   177f6:	68ea      	ldr	r2, [r5, #12]
   177f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
   177fc:	429a      	cmp	r2, r3
   177fe:	d001      	beq.n	17804 <ip_interface_sendto+0x8c>
   17800:	202f      	movs	r0, #47	; 0x2f
   17802:	e7e9      	b.n	177d8 <ip_interface_sendto+0x60>
   17804:	f899 3000 	ldrb.w	r3, [r9]
   17808:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1780a:	4293      	cmp	r3, r2
   1780c:	d00b      	beq.n	17826 <ip_interface_sendto+0xae>
   1780e:	2016      	movs	r0, #22
   17810:	e7e2      	b.n	177d8 <ip_interface_sendto+0x60>
   17812:	f247 0b06 	movw	fp, #28678	; 0x7006
   17816:	682b      	ldr	r3, [r5, #0]
   17818:	0399      	lsls	r1, r3, #14
   1781a:	d409      	bmi.n	17830 <ip_interface_sendto+0xb8>
   1781c:	682b      	ldr	r3, [r5, #0]
   1781e:	031a      	lsls	r2, r3, #12
   17820:	d504      	bpl.n	1782c <ip_interface_sendto+0xb4>
   17822:	68a8      	ldr	r0, [r5, #8]
   17824:	e7d8      	b.n	177d8 <ip_interface_sendto+0x60>
   17826:	f247 0b07 	movw	fp, #28679	; 0x7007
   1782a:	e7f4      	b.n	17816 <ip_interface_sendto+0x9e>
   1782c:	2039      	movs	r0, #57	; 0x39
   1782e:	e7d3      	b.n	177d8 <ip_interface_sendto+0x60>
   17830:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   17832:	f04f 0a00 	mov.w	sl, #0
   17836:	2b00      	cmp	r3, #0
   17838:	bf08      	it	eq
   1783a:	f04f 33ff 	moveq.w	r3, #4294967295
   1783e:	9305      	str	r3, [sp, #20]
   17840:	ea4b 4306 	orr.w	r3, fp, r6, lsl #16
   17844:	9303      	str	r3, [sp, #12]
   17846:	f8cd a01c 	str.w	sl, [sp, #28]
   1784a:	4621      	mov	r1, r4
   1784c:	a807      	add	r0, sp, #28
   1784e:	f009 fddb 	bl	21408 <rpc_ip_client_request_alloc>
   17852:	9807      	ldr	r0, [sp, #28]
   17854:	b960      	cbnz	r0, 17870 <ip_interface_sendto+0xf8>
   17856:	9b02      	ldr	r3, [sp, #8]
   17858:	b92b      	cbnz	r3, 17866 <ip_interface_sendto+0xee>
   1785a:	2000      	movs	r0, #0
   1785c:	a906      	add	r1, sp, #24
   1785e:	f008 fcea 	bl	20236 <nrf_modem_os_timedwait>
   17862:	2023      	movs	r0, #35	; 0x23
   17864:	e7b8      	b.n	177d8 <ip_interface_sendto+0x60>
   17866:	a905      	add	r1, sp, #20
   17868:	f008 fce5 	bl	20236 <nrf_modem_os_timedwait>
   1786c:	283c      	cmp	r0, #60	; 0x3c
   1786e:	d0f8      	beq.n	17862 <ip_interface_sendto+0xea>
   17870:	9b07      	ldr	r3, [sp, #28]
   17872:	2b00      	cmp	r3, #0
   17874:	d0e9      	beq.n	1784a <ip_interface_sendto+0xd2>
   17876:	220c      	movs	r2, #12
   17878:	721a      	strb	r2, [r3, #8]
   1787a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1787c:	f883 a009 	strb.w	sl, [r3, #9]
   17880:	f883 a00a 	strb.w	sl, [r3, #10]
   17884:	f883 a00b 	strb.w	sl, [r3, #11]
   17888:	615f      	str	r7, [r3, #20]
   1788a:	b11a      	cbz	r2, 17894 <ip_interface_sendto+0x11c>
   1788c:	433a      	orrs	r2, r7
   1788e:	615a      	str	r2, [r3, #20]
   17890:	f8c5 a028 	str.w	sl, [r5, #40]	; 0x28
   17894:	f1b9 0f00 	cmp.w	r9, #0
   17898:	d011      	beq.n	178be <ip_interface_sendto+0x146>
   1789a:	f103 021c 	add.w	r2, r3, #28
   1789e:	9201      	str	r2, [sp, #4]
   178a0:	f103 0218 	add.w	r2, r3, #24
   178a4:	9200      	str	r2, [sp, #0]
   178a6:	4649      	mov	r1, r9
   178a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   178aa:	331a      	adds	r3, #26
   178ac:	68e8      	ldr	r0, [r5, #12]
   178ae:	f009 ff82 	bl	217b6 <ip_addr_parse>
   178b2:	9a07      	ldr	r2, [sp, #28]
   178b4:	6893      	ldr	r3, [r2, #8]
   178b6:	8b51      	ldrh	r1, [r2, #26]
   178b8:	3304      	adds	r3, #4
   178ba:	440b      	add	r3, r1
   178bc:	6093      	str	r3, [r2, #8]
   178be:	69aa      	ldr	r2, [r5, #24]
   178c0:	9b07      	ldr	r3, [sp, #28]
   178c2:	611a      	str	r2, [r3, #16]
   178c4:	9a03      	ldr	r2, [sp, #12]
   178c6:	605c      	str	r4, [r3, #4]
   178c8:	60da      	str	r2, [r3, #12]
   178ca:	f1b8 0f00 	cmp.w	r8, #0
   178ce:	d004      	beq.n	178da <ip_interface_sendto+0x162>
   178d0:	4622      	mov	r2, r4
   178d2:	4641      	mov	r1, r8
   178d4:	6818      	ldr	r0, [r3, #0]
   178d6:	f00b fb4e 	bl	22f76 <memcpy>
   178da:	682b      	ldr	r3, [r5, #0]
   178dc:	4659      	mov	r1, fp
   178de:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   178e2:	9807      	ldr	r0, [sp, #28]
   178e4:	602b      	str	r3, [r5, #0]
   178e6:	f009 fd9e 	bl	21426 <rpc_ip_client_request_send>
   178ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   178ee:	4630      	mov	r0, r6
   178f0:	4611      	mov	r1, r2
   178f2:	ab04      	add	r3, sp, #16
   178f4:	f009 ff9c 	bl	21830 <ip_interface_wait>
   178f8:	b990      	cbnz	r0, 17920 <ip_interface_sendto+0x1a8>
   178fa:	682a      	ldr	r2, [r5, #0]
   178fc:	4f11      	ldr	r7, [pc, #68]	; (17944 <ip_interface_sendto+0x1cc>)
   178fe:	0113      	lsls	r3, r2, #4
   17900:	bf48      	it	mi
   17902:	682b      	ldrmi	r3, [r5, #0]
   17904:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
   17908:	bf46      	itte	mi
   1790a:	f023 6300 	bicmi.w	r3, r3, #134217728	; 0x8000000
   1790e:	602b      	strmi	r3, [r5, #0]
   17910:	6984      	ldrpl	r4, [r0, #24]
   17912:	f009 fd92 	bl	2143a <rpc_ip_client_message_free>
   17916:	2300      	movs	r3, #0
   17918:	46a2      	mov	sl, r4
   1791a:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
   1791e:	e741      	b.n	177a4 <ip_interface_sendto+0x2c>
   17920:	682b      	ldr	r3, [r5, #0]
   17922:	f413 2300 	ands.w	r3, r3, #524288	; 0x80000
   17926:	f47f af7c 	bne.w	17822 <ip_interface_sendto+0xaa>
   1792a:	280c      	cmp	r0, #12
   1792c:	f47f af54 	bne.w	177d8 <ip_interface_sendto+0x60>
   17930:	9a02      	ldr	r2, [sp, #8]
   17932:	2a00      	cmp	r2, #0
   17934:	d091      	beq.n	1785a <ip_interface_sendto+0xe2>
   17936:	4618      	mov	r0, r3
   17938:	a905      	add	r1, sp, #20
   1793a:	f008 fc7c 	bl	20236 <nrf_modem_os_timedwait>
   1793e:	283c      	cmp	r0, #60	; 0x3c
   17940:	d181      	bne.n	17846 <ip_interface_sendto+0xce>
   17942:	e78e      	b.n	17862 <ip_interface_sendto+0xea>
   17944:	20016b2c 	.word	0x20016b2c

00017948 <ip_interface_socketoption_get>:
   17948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1794c:	461c      	mov	r4, r3
   1794e:	f04f 33ff 	mov.w	r3, #4294967295
   17952:	b085      	sub	sp, #20
   17954:	4607      	mov	r7, r0
   17956:	e9dd 980e 	ldrd	r9, r8, [sp, #56]	; 0x38
   1795a:	460d      	mov	r5, r1
   1795c:	4692      	mov	sl, r2
   1795e:	9303      	str	r3, [sp, #12]
   17960:	f1b9 0f00 	cmp.w	r9, #0
   17964:	d065      	beq.n	17a32 <ip_interface_socketoption_get+0xea>
   17966:	f8d8 3000 	ldr.w	r3, [r8]
   1796a:	2b00      	cmp	r3, #0
   1796c:	d061      	beq.n	17a32 <ip_interface_socketoption_get+0xea>
   1796e:	680b      	ldr	r3, [r1, #0]
   17970:	025e      	lsls	r6, r3, #9
   17972:	d460      	bmi.n	17a36 <ip_interface_socketoption_get+0xee>
   17974:	680b      	ldr	r3, [r1, #0]
   17976:	0219      	lsls	r1, r3, #8
   17978:	d45d      	bmi.n	17a36 <ip_interface_socketoption_get+0xee>
   1797a:	682b      	ldr	r3, [r5, #0]
   1797c:	01da      	lsls	r2, r3, #7
   1797e:	d45a      	bmi.n	17a36 <ip_interface_socketoption_get+0xee>
   17980:	682b      	ldr	r3, [r5, #0]
   17982:	019b      	lsls	r3, r3, #6
   17984:	d457      	bmi.n	17a36 <ip_interface_socketoption_get+0xee>
   17986:	682b      	ldr	r3, [r5, #0]
   17988:	f247 0204 	movw	r2, #28676	; 0x7004
   1798c:	9301      	str	r3, [sp, #4]
   1798e:	682b      	ldr	r3, [r5, #0]
   17990:	69a9      	ldr	r1, [r5, #24]
   17992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   17996:	602b      	str	r3, [r5, #0]
   17998:	f8d8 3000 	ldr.w	r3, [r8]
   1799c:	f009 ff30 	bl	21800 <ip_interface_request_create>
   179a0:	4606      	mov	r6, r0
   179a2:	2800      	cmp	r0, #0
   179a4:	d043      	beq.n	17a2e <ip_interface_socketoption_get+0xe6>
   179a6:	6883      	ldr	r3, [r0, #8]
   179a8:	f8c0 a014 	str.w	sl, [r0, #20]
   179ac:	3308      	adds	r3, #8
   179ae:	6083      	str	r3, [r0, #8]
   179b0:	6184      	str	r4, [r0, #24]
   179b2:	f247 0104 	movw	r1, #28676	; 0x7004
   179b6:	f8d0 a000 	ldr.w	sl, [r0]
   179ba:	f009 fd34 	bl	21426 <rpc_ip_client_request_send>
   179be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   179c2:	4638      	mov	r0, r7
   179c4:	4611      	mov	r1, r2
   179c6:	ab03      	add	r3, sp, #12
   179c8:	f009 ff32 	bl	21830 <ip_interface_wait>
   179cc:	4604      	mov	r4, r0
   179ce:	b9d8      	cbnz	r0, 17a08 <ip_interface_socketoption_get+0xc0>
   179d0:	4b1a      	ldr	r3, [pc, #104]	; (17a3c <ip_interface_socketoption_get+0xf4>)
   179d2:	f8d8 2000 	ldr.w	r2, [r8]
   179d6:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
   179da:	469b      	mov	fp, r3
   179dc:	b1f9      	cbz	r1, 17a1e <ip_interface_socketoption_get+0xd6>
   179de:	6848      	ldr	r0, [r1, #4]
   179e0:	4290      	cmp	r0, r2
   179e2:	d81a      	bhi.n	17a1a <ip_interface_socketoption_get+0xd2>
   179e4:	6809      	ldr	r1, [r1, #0]
   179e6:	b1c1      	cbz	r1, 17a1a <ip_interface_socketoption_get+0xd2>
   179e8:	4602      	mov	r2, r0
   179ea:	4648      	mov	r0, r9
   179ec:	f00b fac3 	bl	22f76 <memcpy>
   179f0:	f85b 2027 	ldr.w	r2, [fp, r7, lsl #2]
   179f4:	6852      	ldr	r2, [r2, #4]
   179f6:	f8c8 2000 	str.w	r2, [r8]
   179fa:	f85b 0027 	ldr.w	r0, [fp, r7, lsl #2]
   179fe:	f009 fd1c 	bl	2143a <rpc_ip_client_message_free>
   17a02:	2200      	movs	r2, #0
   17a04:	f84b 2027 	str.w	r2, [fp, r7, lsl #2]
   17a08:	4650      	mov	r0, sl
   17a0a:	f009 fd19 	bl	21440 <rpc_ip_client_data_free>
   17a0e:	9b01      	ldr	r3, [sp, #4]
   17a10:	602b      	str	r3, [r5, #0]
   17a12:	4620      	mov	r0, r4
   17a14:	b005      	add	sp, #20
   17a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a1a:	2416      	movs	r4, #22
   17a1c:	e7ed      	b.n	179fa <ip_interface_socketoption_get+0xb2>
   17a1e:	4651      	mov	r1, sl
   17a20:	4648      	mov	r0, r9
   17a22:	f00b faa8 	bl	22f76 <memcpy>
   17a26:	6873      	ldr	r3, [r6, #4]
   17a28:	f8c8 3000 	str.w	r3, [r8]
   17a2c:	e7ec      	b.n	17a08 <ip_interface_socketoption_get+0xc0>
   17a2e:	240c      	movs	r4, #12
   17a30:	e7ed      	b.n	17a0e <ip_interface_socketoption_get+0xc6>
   17a32:	2416      	movs	r4, #22
   17a34:	e7ed      	b.n	17a12 <ip_interface_socketoption_get+0xca>
   17a36:	2423      	movs	r4, #35	; 0x23
   17a38:	e7eb      	b.n	17a12 <ip_interface_socketoption_get+0xca>
   17a3a:	bf00      	nop
   17a3c:	20016b2c 	.word	0x20016b2c

00017a40 <ip_interface_bind>:
   17a40:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   17a44:	f04f 33ff 	mov.w	r3, #4294967295
   17a48:	4607      	mov	r7, r0
   17a4a:	4690      	mov	r8, r2
   17a4c:	460e      	mov	r6, r1
   17a4e:	9303      	str	r3, [sp, #12]
   17a50:	2900      	cmp	r1, #0
   17a52:	d048      	beq.n	17ae6 <ip_interface_bind+0xa6>
   17a54:	2a00      	cmp	r2, #0
   17a56:	d046      	beq.n	17ae6 <ip_interface_bind+0xa6>
   17a58:	f7ff fcdc 	bl	17414 <interface_socket_from_handle_get>
   17a5c:	4605      	mov	r5, r0
   17a5e:	2800      	cmp	r0, #0
   17a60:	d043      	beq.n	17aea <ip_interface_bind+0xaa>
   17a62:	6803      	ldr	r3, [r0, #0]
   17a64:	b29b      	uxth	r3, r3
   17a66:	2b02      	cmp	r3, #2
   17a68:	d13f      	bne.n	17aea <ip_interface_bind+0xaa>
   17a6a:	6981      	ldr	r1, [r0, #24]
   17a6c:	2300      	movs	r3, #0
   17a6e:	f247 0205 	movw	r2, #28677	; 0x7005
   17a72:	4638      	mov	r0, r7
   17a74:	f009 fec4 	bl	21800 <ip_interface_request_create>
   17a78:	4604      	mov	r4, r0
   17a7a:	2800      	cmp	r0, #0
   17a7c:	d037      	beq.n	17aee <ip_interface_bind+0xae>
   17a7e:	6883      	ldr	r3, [r0, #8]
   17a80:	4642      	mov	r2, r8
   17a82:	3304      	adds	r3, #4
   17a84:	6083      	str	r3, [r0, #8]
   17a86:	f100 0318 	add.w	r3, r0, #24
   17a8a:	9301      	str	r3, [sp, #4]
   17a8c:	f100 0314 	add.w	r3, r0, #20
   17a90:	9300      	str	r3, [sp, #0]
   17a92:	4631      	mov	r1, r6
   17a94:	f100 0316 	add.w	r3, r0, #22
   17a98:	68e8      	ldr	r0, [r5, #12]
   17a9a:	f009 fe8c 	bl	217b6 <ip_addr_parse>
   17a9e:	b9d8      	cbnz	r0, 17ad8 <ip_interface_bind+0x98>
   17aa0:	68a3      	ldr	r3, [r4, #8]
   17aa2:	8ae2      	ldrh	r2, [r4, #22]
   17aa4:	4e13      	ldr	r6, [pc, #76]	; (17af4 <ip_interface_bind+0xb4>)
   17aa6:	4413      	add	r3, r2
   17aa8:	60a3      	str	r3, [r4, #8]
   17aaa:	682b      	ldr	r3, [r5, #0]
   17aac:	f247 0105 	movw	r1, #28677	; 0x7005
   17ab0:	4033      	ands	r3, r6
   17ab2:	f043 0303 	orr.w	r3, r3, #3
   17ab6:	4620      	mov	r0, r4
   17ab8:	602b      	str	r3, [r5, #0]
   17aba:	f009 fcb4 	bl	21426 <rpc_ip_client_request_send>
   17abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17ac2:	2104      	movs	r1, #4
   17ac4:	4638      	mov	r0, r7
   17ac6:	ab03      	add	r3, sp, #12
   17ac8:	f009 feb2 	bl	21830 <ip_interface_wait>
   17acc:	b140      	cbz	r0, 17ae0 <ip_interface_bind+0xa0>
   17ace:	682b      	ldr	r3, [r5, #0]
   17ad0:	4033      	ands	r3, r6
   17ad2:	f043 0302 	orr.w	r3, r3, #2
   17ad6:	602b      	str	r3, [r5, #0]
   17ad8:	f7fd fc52 	bl	15380 <nrf_modem_os_errno_set>
   17adc:	f04f 30ff 	mov.w	r0, #4294967295
   17ae0:	b004      	add	sp, #16
   17ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17ae6:	2016      	movs	r0, #22
   17ae8:	e7f6      	b.n	17ad8 <ip_interface_bind+0x98>
   17aea:	2009      	movs	r0, #9
   17aec:	e7f4      	b.n	17ad8 <ip_interface_bind+0x98>
   17aee:	200c      	movs	r0, #12
   17af0:	e7f2      	b.n	17ad8 <ip_interface_bind+0x98>
   17af2:	bf00      	nop
   17af4:	ffff0000 	.word	0xffff0000

00017af8 <ip_interface_listen>:
   17af8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17afa:	4605      	mov	r5, r0
   17afc:	f7ff fc8a 	bl	17414 <interface_socket_from_handle_get>
   17b00:	4604      	mov	r4, r0
   17b02:	2800      	cmp	r0, #0
   17b04:	d038      	beq.n	17b78 <ip_interface_listen+0x80>
   17b06:	6803      	ldr	r3, [r0, #0]
   17b08:	b29b      	uxth	r3, r3
   17b0a:	2b04      	cmp	r3, #4
   17b0c:	d003      	beq.n	17b16 <ip_interface_listen+0x1e>
   17b0e:	6803      	ldr	r3, [r0, #0]
   17b10:	b29b      	uxth	r3, r3
   17b12:	2b0b      	cmp	r3, #11
   17b14:	d132      	bne.n	17b7c <ip_interface_listen+0x84>
   17b16:	2100      	movs	r1, #0
   17b18:	4628      	mov	r0, r5
   17b1a:	4a1b      	ldr	r2, [pc, #108]	; (17b88 <ip_interface_listen+0x90>)
   17b1c:	f7ff fc22 	bl	17364 <interface_socket_packet_handler_update>
   17b20:	4603      	mov	r3, r0
   17b22:	bb68      	cbnz	r0, 17b80 <ip_interface_listen+0x88>
   17b24:	f247 0208 	movw	r2, #28680	; 0x7008
   17b28:	4628      	mov	r0, r5
   17b2a:	69a1      	ldr	r1, [r4, #24]
   17b2c:	f009 fe68 	bl	21800 <ip_interface_request_create>
   17b30:	b340      	cbz	r0, 17b84 <ip_interface_listen+0x8c>
   17b32:	6823      	ldr	r3, [r4, #0]
   17b34:	4e15      	ldr	r6, [pc, #84]	; (17b8c <ip_interface_listen+0x94>)
   17b36:	6882      	ldr	r2, [r0, #8]
   17b38:	4033      	ands	r3, r6
   17b3a:	3204      	adds	r2, #4
   17b3c:	f043 0306 	orr.w	r3, r3, #6
   17b40:	6082      	str	r2, [r0, #8]
   17b42:	f247 0108 	movw	r1, #28680	; 0x7008
   17b46:	6023      	str	r3, [r4, #0]
   17b48:	f009 fc6d 	bl	21426 <rpc_ip_client_request_send>
   17b4c:	f04f 33ff 	mov.w	r3, #4294967295
   17b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17b54:	9301      	str	r3, [sp, #4]
   17b56:	2107      	movs	r1, #7
   17b58:	4628      	mov	r0, r5
   17b5a:	ab01      	add	r3, sp, #4
   17b5c:	f009 fe68 	bl	21830 <ip_interface_wait>
   17b60:	b140      	cbz	r0, 17b74 <ip_interface_listen+0x7c>
   17b62:	6823      	ldr	r3, [r4, #0]
   17b64:	4033      	ands	r3, r6
   17b66:	f043 0304 	orr.w	r3, r3, #4
   17b6a:	6023      	str	r3, [r4, #0]
   17b6c:	f7fd fc08 	bl	15380 <nrf_modem_os_errno_set>
   17b70:	f04f 30ff 	mov.w	r0, #4294967295
   17b74:	b002      	add	sp, #8
   17b76:	bd70      	pop	{r4, r5, r6, pc}
   17b78:	2009      	movs	r0, #9
   17b7a:	e7f7      	b.n	17b6c <ip_interface_listen+0x74>
   17b7c:	2016      	movs	r0, #22
   17b7e:	e7f5      	b.n	17b6c <ip_interface_listen+0x74>
   17b80:	2023      	movs	r0, #35	; 0x23
   17b82:	e7f3      	b.n	17b6c <ip_interface_listen+0x74>
   17b84:	200c      	movs	r0, #12
   17b86:	e7f1      	b.n	17b6c <ip_interface_listen+0x74>
   17b88:	00021763 	.word	0x00021763
   17b8c:	ffff0000 	.word	0xffff0000

00017b90 <ip_interface_accept>:
   17b90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b94:	2500      	movs	r5, #0
   17b96:	4680      	mov	r8, r0
   17b98:	460f      	mov	r7, r1
   17b9a:	4692      	mov	sl, r2
   17b9c:	9500      	str	r5, [sp, #0]
   17b9e:	f7ff fc39 	bl	17414 <interface_socket_from_handle_get>
   17ba2:	4604      	mov	r4, r0
   17ba4:	2800      	cmp	r0, #0
   17ba6:	f000 80c2 	beq.w	17d2e <ip_interface_accept+0x19e>
   17baa:	6903      	ldr	r3, [r0, #16]
   17bac:	2b01      	cmp	r3, #1
   17bae:	f040 80c1 	bne.w	17d34 <ip_interface_accept+0x1a4>
   17bb2:	6803      	ldr	r3, [r0, #0]
   17bb4:	b29b      	uxth	r3, r3
   17bb6:	2b07      	cmp	r3, #7
   17bb8:	f040 80be 	bne.w	17d38 <ip_interface_accept+0x1a8>
   17bbc:	f04f 33ff 	mov.w	r3, #4294967295
   17bc0:	9301      	str	r3, [sp, #4]
   17bc2:	6803      	ldr	r3, [r0, #0]
   17bc4:	f013 5980 	ands.w	r9, r3, #268435456	; 0x10000000
   17bc8:	d15a      	bne.n	17c80 <ip_interface_accept+0xf0>
   17bca:	6803      	ldr	r3, [r0, #0]
   17bcc:	03db      	lsls	r3, r3, #15
   17bce:	d45b      	bmi.n	17c88 <ip_interface_accept+0xf8>
   17bd0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17bd4:	4640      	mov	r0, r8
   17bd6:	4611      	mov	r1, r2
   17bd8:	ab01      	add	r3, sp, #4
   17bda:	f009 fe29 	bl	21830 <ip_interface_wait>
   17bde:	4606      	mov	r6, r0
   17be0:	6825      	ldr	r5, [r4, #0]
   17be2:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
   17be6:	d051      	beq.n	17c8c <ip_interface_accept+0xfc>
   17be8:	4668      	mov	r0, sp
   17bea:	4a55      	ldr	r2, [pc, #340]	; (17d40 <ip_interface_accept+0x1b0>)
   17bec:	6921      	ldr	r1, [r4, #16]
   17bee:	f7ff fb87 	bl	17300 <interface_socket_allocate>
   17bf2:	9b00      	ldr	r3, [sp, #0]
   17bf4:	4605      	mov	r5, r0
   17bf6:	2b00      	cmp	r3, #0
   17bf8:	f000 80a0 	beq.w	17d3c <ip_interface_accept+0x1ac>
   17bfc:	6962      	ldr	r2, [r4, #20]
   17bfe:	4640      	mov	r0, r8
   17c00:	615a      	str	r2, [r3, #20]
   17c02:	68e2      	ldr	r2, [r4, #12]
   17c04:	69a1      	ldr	r1, [r4, #24]
   17c06:	60da      	str	r2, [r3, #12]
   17c08:	6922      	ldr	r2, [r4, #16]
   17c0a:	611a      	str	r2, [r3, #16]
   17c0c:	2300      	movs	r3, #0
   17c0e:	f247 020c 	movw	r2, #28684	; 0x700c
   17c12:	f009 fdf5 	bl	21800 <ip_interface_request_create>
   17c16:	2800      	cmp	r0, #0
   17c18:	f000 8090 	beq.w	17d3c <ip_interface_accept+0x1ac>
   17c1c:	6823      	ldr	r3, [r4, #0]
   17c1e:	f8df b128 	ldr.w	fp, [pc, #296]	; 17d48 <ip_interface_accept+0x1b8>
   17c22:	f247 010c 	movw	r1, #28684	; 0x700c
   17c26:	ea03 030b 	and.w	r3, r3, fp
   17c2a:	f043 0308 	orr.w	r3, r3, #8
   17c2e:	6023      	str	r3, [r4, #0]
   17c30:	f009 fbf9 	bl	21426 <rpc_ip_client_request_send>
   17c34:	6823      	ldr	r3, [r4, #0]
   17c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17c3a:	ea23 0309 	bic.w	r3, r3, r9
   17c3e:	6023      	str	r3, [r4, #0]
   17c40:	2109      	movs	r1, #9
   17c42:	ab01      	add	r3, sp, #4
   17c44:	4640      	mov	r0, r8
   17c46:	f009 fdf3 	bl	21830 <ip_interface_wait>
   17c4a:	6823      	ldr	r3, [r4, #0]
   17c4c:	4606      	mov	r6, r0
   17c4e:	ea43 0309 	orr.w	r3, r3, r9
   17c52:	6023      	str	r3, [r4, #0]
   17c54:	b1e0      	cbz	r0, 17c90 <ip_interface_accept+0x100>
   17c56:	6823      	ldr	r3, [r4, #0]
   17c58:	ea03 030b 	and.w	r3, r3, fp
   17c5c:	f043 0307 	orr.w	r3, r3, #7
   17c60:	6023      	str	r3, [r4, #0]
   17c62:	6823      	ldr	r3, [r4, #0]
   17c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   17c68:	6023      	str	r3, [r4, #0]
   17c6a:	9b00      	ldr	r3, [sp, #0]
   17c6c:	b113      	cbz	r3, 17c74 <ip_interface_accept+0xe4>
   17c6e:	4628      	mov	r0, r5
   17c70:	f7ff fb6c 	bl	1734c <interface_socket_free>
   17c74:	4630      	mov	r0, r6
   17c76:	f7fd fb83 	bl	15380 <nrf_modem_os_errno_set>
   17c7a:	f04f 30ff 	mov.w	r0, #4294967295
   17c7e:	e041      	b.n	17d04 <ip_interface_accept+0x174>
   17c80:	2623      	movs	r6, #35	; 0x23
   17c82:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
   17c86:	e7ab      	b.n	17be0 <ip_interface_accept+0x50>
   17c88:	2616      	movs	r6, #22
   17c8a:	e7a9      	b.n	17be0 <ip_interface_accept+0x50>
   17c8c:	2e00      	cmp	r6, #0
   17c8e:	d1ec      	bne.n	17c6a <ip_interface_accept+0xda>
   17c90:	4e2c      	ldr	r6, [pc, #176]	; (17d44 <ip_interface_accept+0x1b4>)
   17c92:	9b00      	ldr	r3, [sp, #0]
   17c94:	f856 1028 	ldr.w	r1, [r6, r8, lsl #2]
   17c98:	698a      	ldr	r2, [r1, #24]
   17c9a:	619a      	str	r2, [r3, #24]
   17c9c:	b197      	cbz	r7, 17cc4 <ip_interface_accept+0x134>
   17c9e:	68db      	ldr	r3, [r3, #12]
   17ca0:	2b0a      	cmp	r3, #10
   17ca2:	d132      	bne.n	17d0a <ip_interface_accept+0x17a>
   17ca4:	f8da 2000 	ldr.w	r2, [sl]
   17ca8:	2a24      	cmp	r2, #36	; 0x24
   17caa:	d10b      	bne.n	17cc4 <ip_interface_accept+0x134>
   17cac:	703a      	strb	r2, [r7, #0]
   17cae:	607b      	str	r3, [r7, #4]
   17cb0:	7f4a      	ldrb	r2, [r1, #29]
   17cb2:	7f0b      	ldrb	r3, [r1, #28]
   17cb4:	3120      	adds	r1, #32
   17cb6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17cba:	2210      	movs	r2, #16
   17cbc:	813b      	strh	r3, [r7, #8]
   17cbe:	18b8      	adds	r0, r7, r2
   17cc0:	f00b f959 	bl	22f76 <memcpy>
   17cc4:	9b00      	ldr	r3, [sp, #0]
   17cc6:	4920      	ldr	r1, [pc, #128]	; (17d48 <ip_interface_accept+0x1b8>)
   17cc8:	681a      	ldr	r2, [r3, #0]
   17cca:	f856 0028 	ldr.w	r0, [r6, r8, lsl #2]
   17cce:	400a      	ands	r2, r1
   17cd0:	f042 0205 	orr.w	r2, r2, #5
   17cd4:	601a      	str	r2, [r3, #0]
   17cd6:	681a      	ldr	r2, [r3, #0]
   17cd8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   17cdc:	601a      	str	r2, [r3, #0]
   17cde:	681a      	ldr	r2, [r3, #0]
   17ce0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   17ce4:	601a      	str	r2, [r3, #0]
   17ce6:	6823      	ldr	r3, [r4, #0]
   17ce8:	400b      	ands	r3, r1
   17cea:	f043 0307 	orr.w	r3, r3, #7
   17cee:	6023      	str	r3, [r4, #0]
   17cf0:	6823      	ldr	r3, [r4, #0]
   17cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   17cf6:	6023      	str	r3, [r4, #0]
   17cf8:	f009 fb9f 	bl	2143a <rpc_ip_client_message_free>
   17cfc:	2300      	movs	r3, #0
   17cfe:	4628      	mov	r0, r5
   17d00:	f846 3028 	str.w	r3, [r6, r8, lsl #2]
   17d04:	b003      	add	sp, #12
   17d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d0a:	2b02      	cmp	r3, #2
   17d0c:	d1da      	bne.n	17cc4 <ip_interface_accept+0x134>
   17d0e:	f8da 2000 	ldr.w	r2, [sl]
   17d12:	2a10      	cmp	r2, #16
   17d14:	d1d6      	bne.n	17cc4 <ip_interface_accept+0x134>
   17d16:	703a      	strb	r2, [r7, #0]
   17d18:	607b      	str	r3, [r7, #4]
   17d1a:	7f4a      	ldrb	r2, [r1, #29]
   17d1c:	7f0b      	ldrb	r3, [r1, #28]
   17d1e:	f107 000c 	add.w	r0, r7, #12
   17d22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17d26:	813b      	strh	r3, [r7, #8]
   17d28:	2204      	movs	r2, #4
   17d2a:	3120      	adds	r1, #32
   17d2c:	e7c8      	b.n	17cc0 <ip_interface_accept+0x130>
   17d2e:	2609      	movs	r6, #9
   17d30:	4605      	mov	r5, r0
   17d32:	e79a      	b.n	17c6a <ip_interface_accept+0xda>
   17d34:	262d      	movs	r6, #45	; 0x2d
   17d36:	e798      	b.n	17c6a <ip_interface_accept+0xda>
   17d38:	2616      	movs	r6, #22
   17d3a:	e796      	b.n	17c6a <ip_interface_accept+0xda>
   17d3c:	260c      	movs	r6, #12
   17d3e:	e794      	b.n	17c6a <ip_interface_accept+0xda>
   17d40:	00021763 	.word	0x00021763
   17d44:	20016b2c 	.word	0x20016b2c
   17d48:	ffff0000 	.word	0xffff0000

00017d4c <ip_interface_setopt>:
   17d4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   17d50:	2901      	cmp	r1, #1
   17d52:	4607      	mov	r7, r0
   17d54:	4690      	mov	r8, r2
   17d56:	461e      	mov	r6, r3
   17d58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   17d5a:	d008      	beq.n	17d6e <ip_interface_setopt+0x22>
   17d5c:	202a      	movs	r0, #42	; 0x2a
   17d5e:	f7fd fb0f 	bl	15380 <nrf_modem_os_errno_set>
   17d62:	f04f 34ff 	mov.w	r4, #4294967295
   17d66:	4620      	mov	r0, r4
   17d68:	b004      	add	sp, #16
   17d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17d6e:	f7ff fb51 	bl	17414 <interface_socket_from_handle_get>
   17d72:	4605      	mov	r5, r0
   17d74:	b908      	cbnz	r0, 17d7a <ip_interface_setopt+0x2e>
   17d76:	2009      	movs	r0, #9
   17d78:	e7f1      	b.n	17d5e <ip_interface_setopt+0x12>
   17d7a:	f1a8 0319 	sub.w	r3, r8, #25
   17d7e:	2b1e      	cmp	r3, #30
   17d80:	f200 8090 	bhi.w	17ea4 <ip_interface_setopt+0x158>
   17d84:	e8df f003 	tbb	[pc, r3]
   17d88:	8e8e8e10 	.word	0x8e8e8e10
   17d8c:	5b53478e 	.word	0x5b53478e
   17d90:	8e8e8e8e 	.word	0x8e8e8e8e
   17d94:	638e8e8e 	.word	0x638e8e8e
   17d98:	8e8e8e8e 	.word	0x8e8e8e8e
   17d9c:	8e8e8e8e 	.word	0x8e8e8e8e
   17da0:	7d706b8e 	.word	0x7d706b8e
   17da4:	8380      	.short	0x8380
   17da6:	86          	.byte	0x86
   17da7:	00          	.byte	0x00
   17da8:	b90e      	cbnz	r6, 17dae <ip_interface_setopt+0x62>
   17daa:	200e      	movs	r0, #14
   17dac:	e7d7      	b.n	17d5e <ip_interface_setopt+0x12>
   17dae:	4630      	mov	r0, r6
   17db0:	f7f9 f85e 	bl	10e70 <strlen>
   17db4:	42a0      	cmp	r0, r4
   17db6:	d1f8      	bne.n	17daa <ip_interface_setopt+0x5e>
   17db8:	682b      	ldr	r3, [r5, #0]
   17dba:	b29b      	uxth	r3, r3
   17dbc:	2b02      	cmp	r3, #2
   17dbe:	d1da      	bne.n	17d76 <ip_interface_setopt+0x2a>
   17dc0:	4631      	mov	r1, r6
   17dc2:	68e8      	ldr	r0, [r5, #12]
   17dc4:	f002 fe46 	bl	1aa54 <pdn_interface_pdn_id_get>
   17dc8:	1c43      	adds	r3, r0, #1
   17dca:	4604      	mov	r4, r0
   17dcc:	9003      	str	r0, [sp, #12]
   17dce:	d113      	bne.n	17df8 <ip_interface_setopt+0xac>
   17dd0:	4630      	mov	r0, r6
   17dd2:	4938      	ldr	r1, [pc, #224]	; (17eb4 <ip_interface_setopt+0x168>)
   17dd4:	f00b fa9f 	bl	23316 <strstr>
   17dd8:	b108      	cbz	r0, 17dde <ip_interface_setopt+0x92>
   17dda:	4286      	cmp	r6, r0
   17ddc:	d003      	beq.n	17de6 <ip_interface_setopt+0x9a>
   17dde:	2016      	movs	r0, #22
   17de0:	f7fd face 	bl	15380 <nrf_modem_os_errno_set>
   17de4:	e7bf      	b.n	17d66 <ip_interface_setopt+0x1a>
   17de6:	4833      	ldr	r0, [pc, #204]	; (17eb4 <ip_interface_setopt+0x168>)
   17de8:	f7f9 f842 	bl	10e70 <strlen>
   17dec:	220a      	movs	r2, #10
   17dee:	2100      	movs	r1, #0
   17df0:	4430      	add	r0, r6
   17df2:	f005 fbfd 	bl	1d5f0 <strtoul>
   17df6:	9003      	str	r0, [sp, #12]
   17df8:	2304      	movs	r3, #4
   17dfa:	9301      	str	r3, [sp, #4]
   17dfc:	ab03      	add	r3, sp, #12
   17dfe:	9300      	str	r3, [sp, #0]
   17e00:	2208      	movs	r2, #8
   17e02:	f243 0310 	movw	r3, #12304	; 0x3010
   17e06:	4629      	mov	r1, r5
   17e08:	4638      	mov	r0, r7
   17e0a:	f009 feb0 	bl	21b6e <ip_interface_socketoption_send>
   17e0e:	4604      	mov	r4, r0
   17e10:	2800      	cmp	r0, #0
   17e12:	d0a8      	beq.n	17d66 <ip_interface_setopt+0x1a>
   17e14:	e7a3      	b.n	17d5e <ip_interface_setopt+0x12>
   17e16:	4602      	mov	r2, r0
   17e18:	463b      	mov	r3, r7
   17e1a:	f248 0101 	movw	r1, #32769	; 0x8001
   17e1e:	f44f 7000 	mov.w	r0, #512	; 0x200
   17e22:	e9cd 6400 	strd	r6, r4, [sp]
   17e26:	f009 feec 	bl	21c02 <setopt_check_and_send_int>
   17e2a:	4604      	mov	r4, r0
   17e2c:	e79b      	b.n	17d66 <ip_interface_setopt+0x1a>
   17e2e:	4602      	mov	r2, r0
   17e30:	463b      	mov	r3, r7
   17e32:	f244 0110 	movw	r1, #16400	; 0x4010
   17e36:	2004      	movs	r0, #4
   17e38:	e9cd 6400 	strd	r6, r4, [sp]
   17e3c:	e7f3      	b.n	17e26 <ip_interface_setopt+0xda>
   17e3e:	4602      	mov	r2, r0
   17e40:	463b      	mov	r3, r7
   17e42:	f246 0110 	movw	r1, #24592	; 0x6010
   17e46:	2006      	movs	r0, #6
   17e48:	e9cd 6400 	strd	r6, r4, [sp]
   17e4c:	e7eb      	b.n	17e26 <ip_interface_setopt+0xda>
   17e4e:	4602      	mov	r2, r0
   17e50:	463b      	mov	r3, r7
   17e52:	f241 0104 	movw	r1, #4100	; 0x1004
   17e56:	2008      	movs	r0, #8
   17e58:	e9cd 6400 	strd	r6, r4, [sp]
   17e5c:	e7e3      	b.n	17e26 <ip_interface_setopt+0xda>
   17e5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   17e62:	2400      	movs	r4, #0
   17e64:	62ab      	str	r3, [r5, #40]	; 0x28
   17e66:	e77e      	b.n	17d66 <ip_interface_setopt+0x1a>
   17e68:	2400      	movs	r4, #0
   17e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   17e6e:	4622      	mov	r2, r4
   17e70:	6283      	str	r3, [r0, #40]	; 0x28
   17e72:	4621      	mov	r1, r4
   17e74:	4623      	mov	r3, r4
   17e76:	4638      	mov	r0, r7
   17e78:	e9cd 4400 	strd	r4, r4, [sp]
   17e7c:	f7ff fc7c 	bl	17778 <ip_interface_sendto>
   17e80:	e771      	b.n	17d66 <ip_interface_setopt+0x1a>
   17e82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   17e86:	e7ec      	b.n	17e62 <ip_interface_setopt+0x116>
   17e88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   17e8c:	e7e9      	b.n	17e62 <ip_interface_setopt+0x116>
   17e8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   17e92:	e7e6      	b.n	17e62 <ip_interface_setopt+0x116>
   17e94:	4602      	mov	r2, r0
   17e96:	463b      	mov	r3, r7
   17e98:	f245 0106 	movw	r1, #20486	; 0x5006
   17e9c:	2001      	movs	r0, #1
   17e9e:	e9cd 6400 	strd	r6, r4, [sp]
   17ea2:	e7c0      	b.n	17e26 <ip_interface_setopt+0xda>
   17ea4:	4633      	mov	r3, r6
   17ea6:	4642      	mov	r2, r8
   17ea8:	2101      	movs	r1, #1
   17eaa:	4638      	mov	r0, r7
   17eac:	9400      	str	r4, [sp, #0]
   17eae:	f7ff fac1 	bl	17434 <interface_socket_setopt>
   17eb2:	e7ba      	b.n	17e2a <ip_interface_setopt+0xde>
   17eb4:	00024bb4 	.word	0x00024bb4

00017eb8 <ip_interface_getaddrinfo>:
   17eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ebc:	b087      	sub	sp, #28
   17ebe:	9301      	str	r3, [sp, #4]
   17ec0:	2300      	movs	r3, #0
   17ec2:	4f7f      	ldr	r7, [pc, #508]	; (180c0 <ip_interface_getaddrinfo+0x208>)
   17ec4:	460e      	mov	r6, r1
   17ec6:	803b      	strh	r3, [r7, #0]
   17ec8:	2301      	movs	r3, #1
   17eca:	497e      	ldr	r1, [pc, #504]	; (180c4 <ip_interface_getaddrinfo+0x20c>)
   17ecc:	4605      	mov	r5, r0
   17ece:	4614      	mov	r4, r2
   17ed0:	600b      	str	r3, [r1, #0]
   17ed2:	9102      	str	r1, [sp, #8]
   17ed4:	b11a      	cbz	r2, 17ede <ip_interface_getaddrinfo+0x26>
   17ed6:	68d3      	ldr	r3, [r2, #12]
   17ed8:	2b00      	cmp	r3, #0
   17eda:	bf08      	it	eq
   17edc:	2301      	moveq	r3, #1
   17ede:	4a7a      	ldr	r2, [pc, #488]	; (180c8 <ip_interface_getaddrinfo+0x210>)
   17ee0:	6013      	str	r3, [r2, #0]
   17ee2:	4b7a      	ldr	r3, [pc, #488]	; (180cc <ip_interface_getaddrinfo+0x214>)
   17ee4:	9203      	str	r2, [sp, #12]
   17ee6:	781b      	ldrb	r3, [r3, #0]
   17ee8:	b93b      	cbnz	r3, 17efa <ip_interface_getaddrinfo+0x42>
   17eea:	2070      	movs	r0, #112	; 0x70
   17eec:	f7fd fa48 	bl	15380 <nrf_modem_os_errno_set>
   17ef0:	f240 1015 	movw	r0, #277	; 0x115
   17ef4:	b007      	add	sp, #28
   17ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17efa:	b1ce      	cbz	r6, 17f30 <ip_interface_getaddrinfo+0x78>
   17efc:	b154      	cbz	r4, 17f14 <ip_interface_getaddrinfo+0x5c>
   17efe:	6823      	ldr	r3, [r4, #0]
   17f00:	04d8      	lsls	r0, r3, #19
   17f02:	d507      	bpl.n	17f14 <ip_interface_getaddrinfo+0x5c>
   17f04:	0559      	lsls	r1, r3, #21
   17f06:	d405      	bmi.n	17f14 <ip_interface_getaddrinfo+0x5c>
   17f08:	68a0      	ldr	r0, [r4, #8]
   17f0a:	2803      	cmp	r0, #3
   17f0c:	d136      	bne.n	17f7c <ip_interface_getaddrinfo+0xc4>
   17f0e:	f44f 7089 	mov.w	r0, #274	; 0x112
   17f12:	e7ef      	b.n	17ef4 <ip_interface_getaddrinfo+0x3c>
   17f14:	220a      	movs	r2, #10
   17f16:	2100      	movs	r1, #0
   17f18:	4630      	mov	r0, r6
   17f1a:	f005 fae5 	bl	1d4e8 <strtol>
   17f1e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   17f22:	1e42      	subs	r2, r0, #1
   17f24:	429a      	cmp	r2, r3
   17f26:	d8f2      	bhi.n	17f0e <ip_interface_getaddrinfo+0x56>
   17f28:	0203      	lsls	r3, r0, #8
   17f2a:	ea43 2020 	orr.w	r0, r3, r0, asr #8
   17f2e:	8038      	strh	r0, [r7, #0]
   17f30:	2c00      	cmp	r4, #0
   17f32:	d1e9      	bne.n	17f08 <ip_interface_getaddrinfo+0x50>
   17f34:	2100      	movs	r1, #0
   17f36:	4a66      	ldr	r2, [pc, #408]	; (180d0 <ip_interface_getaddrinfo+0x218>)
   17f38:	4b66      	ldr	r3, [pc, #408]	; (180d4 <ip_interface_getaddrinfo+0x21c>)
   17f3a:	4693      	mov	fp, r2
   17f3c:	4699      	mov	r9, r3
   17f3e:	6011      	str	r1, [r2, #0]
   17f40:	6019      	str	r1, [r3, #0]
   17f42:	b37d      	cbz	r5, 17fa4 <ip_interface_getaddrinfo+0xec>
   17f44:	4628      	mov	r0, r5
   17f46:	f7f8 ff93 	bl	10e70 <strlen>
   17f4a:	4680      	mov	r8, r0
   17f4c:	bb64      	cbnz	r4, 17fa8 <ip_interface_getaddrinfo+0xf0>
   17f4e:	f04f 30ff 	mov.w	r0, #4294967295
   17f52:	4e61      	ldr	r6, [pc, #388]	; (180d8 <ip_interface_getaddrinfo+0x220>)
   17f54:	6833      	ldr	r3, [r6, #0]
   17f56:	4637      	mov	r7, r6
   17f58:	2b00      	cmp	r3, #0
   17f5a:	f040 809a 	bne.w	18092 <ip_interface_getaddrinfo+0x1da>
   17f5e:	2301      	movs	r3, #1
   17f60:	f247 020d 	movw	r2, #28685	; 0x700d
   17f64:	6033      	str	r3, [r6, #0]
   17f66:	4601      	mov	r1, r0
   17f68:	4643      	mov	r3, r8
   17f6a:	f009 fc49 	bl	21800 <ip_interface_request_create>
   17f6e:	4682      	mov	sl, r0
   17f70:	2800      	cmp	r0, #0
   17f72:	d138      	bne.n	17fe6 <ip_interface_getaddrinfo+0x12e>
   17f74:	6030      	str	r0, [r6, #0]
   17f76:	f240 100f 	movw	r0, #271	; 0x10f
   17f7a:	e7bb      	b.n	17ef4 <ip_interface_getaddrinfo+0x3c>
   17f7c:	6863      	ldr	r3, [r4, #4]
   17f7e:	2b0a      	cmp	r3, #10
   17f80:	d002      	beq.n	17f88 <ip_interface_getaddrinfo+0xd0>
   17f82:	f033 0302 	bics.w	r3, r3, #2
   17f86:	d10a      	bne.n	17f9e <ip_interface_getaddrinfo+0xe6>
   17f88:	2301      	movs	r3, #1
   17f8a:	68e1      	ldr	r1, [r4, #12]
   17f8c:	aa05      	add	r2, sp, #20
   17f8e:	9305      	str	r3, [sp, #20]
   17f90:	f009 fbf3 	bl	2177a <protocol_verify>
   17f94:	2800      	cmp	r0, #0
   17f96:	d0cd      	beq.n	17f34 <ip_interface_getaddrinfo+0x7c>
   17f98:	f240 1013 	movw	r0, #275	; 0x113
   17f9c:	e7aa      	b.n	17ef4 <ip_interface_getaddrinfo+0x3c>
   17f9e:	f44f 7087 	mov.w	r0, #270	; 0x10e
   17fa2:	e7a7      	b.n	17ef4 <ip_interface_getaddrinfo+0x3c>
   17fa4:	46a8      	mov	r8, r5
   17fa6:	e7d1      	b.n	17f4c <ip_interface_getaddrinfo+0x94>
   17fa8:	69e7      	ldr	r7, [r4, #28]
   17faa:	2f00      	cmp	r7, #0
   17fac:	d074      	beq.n	18098 <ip_interface_getaddrinfo+0x1e0>
   17fae:	687b      	ldr	r3, [r7, #4]
   17fb0:	2b66      	cmp	r3, #102	; 0x66
   17fb2:	d1cc      	bne.n	17f4e <ip_interface_getaddrinfo+0x96>
   17fb4:	68bb      	ldr	r3, [r7, #8]
   17fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   17fba:	d1c8      	bne.n	17f4e <ip_interface_getaddrinfo+0x96>
   17fbc:	f240 2302 	movw	r3, #514	; 0x202
   17fc0:	68fa      	ldr	r2, [r7, #12]
   17fc2:	429a      	cmp	r2, r3
   17fc4:	d1c3      	bne.n	17f4e <ip_interface_getaddrinfo+0x96>
   17fc6:	69b9      	ldr	r1, [r7, #24]
   17fc8:	2900      	cmp	r1, #0
   17fca:	d0c0      	beq.n	17f4e <ip_interface_getaddrinfo+0x96>
   17fcc:	6860      	ldr	r0, [r4, #4]
   17fce:	f002 fd41 	bl	1aa54 <pdn_interface_pdn_id_get>
   17fd2:	1c42      	adds	r2, r0, #1
   17fd4:	d1bd      	bne.n	17f52 <ip_interface_getaddrinfo+0x9a>
   17fd6:	e7ba      	b.n	17f4e <ip_interface_getaddrinfo+0x96>
   17fd8:	4840      	ldr	r0, [pc, #256]	; (180dc <ip_interface_getaddrinfo+0x224>)
   17fda:	f7f8 ff49 	bl	10e70 <strlen>
   17fde:	220a      	movs	r2, #10
   17fe0:	4639      	mov	r1, r7
   17fe2:	4450      	add	r0, sl
   17fe4:	e069      	b.n	180ba <ip_interface_getaddrinfo+0x202>
   17fe6:	2c00      	cmp	r4, #0
   17fe8:	d043      	beq.n	18072 <ip_interface_getaddrinfo+0x1ba>
   17fea:	68a2      	ldr	r2, [r4, #8]
   17fec:	9b02      	ldr	r3, [sp, #8]
   17fee:	6861      	ldr	r1, [r4, #4]
   17ff0:	2a02      	cmp	r2, #2
   17ff2:	601a      	str	r2, [r3, #0]
   17ff4:	bf08      	it	eq
   17ff6:	9b03      	ldreq	r3, [sp, #12]
   17ff8:	f1a1 0102 	sub.w	r1, r1, #2
   17ffc:	bf08      	it	eq
   17ffe:	601a      	streq	r2, [r3, #0]
   18000:	2908      	cmp	r1, #8
   18002:	bf8e      	itee	hi
   18004:	2100      	movhi	r1, #0
   18006:	4836      	ldrls	r0, [pc, #216]	; (180e0 <ip_interface_getaddrinfo+0x228>)
   18008:	5641      	ldrsbls	r1, [r0, r1]
   1800a:	f8ca 1018 	str.w	r1, [sl, #24]
   1800e:	68e1      	ldr	r1, [r4, #12]
   18010:	f8ca 201c 	str.w	r2, [sl, #28]
   18014:	2200      	movs	r2, #0
   18016:	f8ca 1020 	str.w	r1, [sl, #32]
   1801a:	f88a 2014 	strb.w	r2, [sl, #20]
   1801e:	f88a 2015 	strb.w	r2, [sl, #21]
   18022:	f88a 2016 	strb.w	r2, [sl, #22]
   18026:	f88a 2017 	strb.w	r2, [sl, #23]
   1802a:	f8da 2008 	ldr.w	r2, [sl, #8]
   1802e:	3210      	adds	r2, #16
   18030:	f8ca 2008 	str.w	r2, [sl, #8]
   18034:	b135      	cbz	r5, 18044 <ip_interface_getaddrinfo+0x18c>
   18036:	f8da 0000 	ldr.w	r0, [sl]
   1803a:	b118      	cbz	r0, 18044 <ip_interface_getaddrinfo+0x18c>
   1803c:	4642      	mov	r2, r8
   1803e:	4629      	mov	r1, r5
   18040:	f00a ff99 	bl	22f76 <memcpy>
   18044:	f247 010d 	movw	r1, #28685	; 0x700d
   18048:	4650      	mov	r0, sl
   1804a:	f009 f9ec 	bl	21426 <rpc_ip_client_request_send>
   1804e:	f04f 32ff 	mov.w	r2, #4294967295
   18052:	9205      	str	r2, [sp, #20]
   18054:	4650      	mov	r0, sl
   18056:	a905      	add	r1, sp, #20
   18058:	f008 f8ed 	bl	20236 <nrf_modem_os_timedwait>
   1805c:	683a      	ldr	r2, [r7, #0]
   1805e:	2a01      	cmp	r2, #1
   18060:	d0f8      	beq.n	18054 <ip_interface_getaddrinfo+0x19c>
   18062:	f8d9 0000 	ldr.w	r0, [r9]
   18066:	b950      	cbnz	r0, 1807e <ip_interface_getaddrinfo+0x1c6>
   18068:	f8db 3000 	ldr.w	r3, [fp]
   1806c:	9a01      	ldr	r2, [sp, #4]
   1806e:	6013      	str	r3, [r2, #0]
   18070:	e740      	b.n	17ef4 <ip_interface_getaddrinfo+0x3c>
   18072:	2210      	movs	r2, #16
   18074:	4621      	mov	r1, r4
   18076:	3014      	adds	r0, #20
   18078:	f00a ff9d 	bl	22fb6 <memset>
   1807c:	e7d5      	b.n	1802a <ip_interface_getaddrinfo+0x172>
   1807e:	2300      	movs	r3, #0
   18080:	603b      	str	r3, [r7, #0]
   18082:	4b18      	ldr	r3, [pc, #96]	; (180e4 <ip_interface_getaddrinfo+0x22c>)
   18084:	6818      	ldr	r0, [r3, #0]
   18086:	b108      	cbz	r0, 1808c <ip_interface_getaddrinfo+0x1d4>
   18088:	f7fd f97a 	bl	15380 <nrf_modem_os_errno_set>
   1808c:	f8d9 0000 	ldr.w	r0, [r9]
   18090:	e730      	b.n	17ef4 <ip_interface_getaddrinfo+0x3c>
   18092:	f44f 708a 	mov.w	r0, #276	; 0x114
   18096:	e72d      	b.n	17ef4 <ip_interface_getaddrinfo+0x3c>
   18098:	2e00      	cmp	r6, #0
   1809a:	f43f af58 	beq.w	17f4e <ip_interface_getaddrinfo+0x96>
   1809e:	6823      	ldr	r3, [r4, #0]
   180a0:	04db      	lsls	r3, r3, #19
   180a2:	f57f af54 	bpl.w	17f4e <ip_interface_getaddrinfo+0x96>
   180a6:	213a      	movs	r1, #58	; 0x3a
   180a8:	4630      	mov	r0, r6
   180aa:	f00b f8d9 	bl	23260 <strchr>
   180ae:	4682      	mov	sl, r0
   180b0:	2800      	cmp	r0, #0
   180b2:	d191      	bne.n	17fd8 <ip_interface_getaddrinfo+0x120>
   180b4:	4601      	mov	r1, r0
   180b6:	220a      	movs	r2, #10
   180b8:	4630      	mov	r0, r6
   180ba:	f005 fa99 	bl	1d5f0 <strtoul>
   180be:	e748      	b.n	17f52 <ip_interface_getaddrinfo+0x9a>
   180c0:	20016c74 	.word	0x20016c74
   180c4:	20016b18 	.word	0x20016b18
   180c8:	20016b14 	.word	0x20016b14
   180cc:	20016c85 	.word	0x20016c85
   180d0:	20016b28 	.word	0x20016b28
   180d4:	20016b20 	.word	0x20016b20
   180d8:	20016b24 	.word	0x20016b24
   180dc:	00024cf0 	.word	0x00024cf0
   180e0:	00024bb8 	.word	0x00024bb8
   180e4:	20016b1c 	.word	0x20016b1c

000180e8 <ip_interface_freeaddrinfo>:
   180e8:	b538      	push	{r3, r4, r5, lr}
   180ea:	4d0a      	ldr	r5, [pc, #40]	; (18114 <ip_interface_freeaddrinfo+0x2c>)
   180ec:	4604      	mov	r4, r0
   180ee:	682a      	ldr	r2, [r5, #0]
   180f0:	2a02      	cmp	r2, #2
   180f2:	d10e      	bne.n	18112 <ip_interface_freeaddrinfo+0x2a>
   180f4:	b148      	cbz	r0, 1810a <ip_interface_freeaddrinfo+0x22>
   180f6:	6940      	ldr	r0, [r0, #20]
   180f8:	f7fd fada 	bl	156b0 <nrf_modem_os_free>
   180fc:	69a0      	ldr	r0, [r4, #24]
   180fe:	b108      	cbz	r0, 18104 <ip_interface_freeaddrinfo+0x1c>
   18100:	f7fd fad6 	bl	156b0 <nrf_modem_os_free>
   18104:	4620      	mov	r0, r4
   18106:	f7fd fad3 	bl	156b0 <nrf_modem_os_free>
   1810a:	2300      	movs	r3, #0
   1810c:	4a02      	ldr	r2, [pc, #8]	; (18118 <ip_interface_freeaddrinfo+0x30>)
   1810e:	602b      	str	r3, [r5, #0]
   18110:	6013      	str	r3, [r2, #0]
   18112:	bd38      	pop	{r3, r4, r5, pc}
   18114:	20016b24 	.word	0x20016b24
   18118:	20016b20 	.word	0x20016b20

0001811c <rpc_ip_event_handler>:
   1811c:	f248 030d 	movw	r3, #32781	; 0x800d
   18120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18124:	4299      	cmp	r1, r3
   18126:	4604      	mov	r4, r0
   18128:	460e      	mov	r6, r1
   1812a:	b089      	sub	sp, #36	; 0x24
   1812c:	d038      	beq.n	181a0 <rpc_ip_event_handler+0x84>
   1812e:	f248 030f 	movw	r3, #32783	; 0x800f
   18132:	4299      	cmp	r1, r3
   18134:	f000 80c9 	beq.w	182ca <rpc_ip_event_handler+0x1ae>
   18138:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   1813c:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   18140:	68c0      	ldr	r0, [r0, #12]
   18142:	f040 80cf 	bne.w	182e4 <rpc_ip_event_handler+0x1c8>
   18146:	f7ff f94d 	bl	173e4 <interface_from_internal_id_search>
   1814a:	4607      	mov	r7, r0
   1814c:	4638      	mov	r0, r7
   1814e:	f7ff f961 	bl	17414 <interface_socket_from_handle_get>
   18152:	4605      	mov	r5, r0
   18154:	2800      	cmp	r0, #0
   18156:	d056      	beq.n	18206 <rpc_ip_event_handler+0xea>
   18158:	4601      	mov	r1, r0
   1815a:	4633      	mov	r3, r6
   1815c:	4622      	mov	r2, r4
   1815e:	4638      	mov	r0, r7
   18160:	f000 fdd6 	bl	18d10 <tls_rpc_ip_event_handler>
   18164:	2800      	cmp	r0, #0
   18166:	f000 80bb 	beq.w	182e0 <rpc_ip_event_handler+0x1c4>
   1816a:	f248 030c 	movw	r3, #32780	; 0x800c
   1816e:	429e      	cmp	r6, r3
   18170:	f200 80ba 	bhi.w	182e8 <rpc_ip_event_handler+0x1cc>
   18174:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   18178:	d945      	bls.n	18206 <rpc_ip_event_handler+0xea>
   1817a:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   1817e:	3e01      	subs	r6, #1
   18180:	2e0b      	cmp	r6, #11
   18182:	d840      	bhi.n	18206 <rpc_ip_event_handler+0xea>
   18184:	e8df f016 	tbh	[pc, r6, lsl #1]
   18188:	013400f0 	.word	0x013400f0
   1818c:	01f701e7 	.word	0x01f701e7
   18190:	01ba0126 	.word	0x01ba0126
   18194:	015601ba 	.word	0x015601ba
   18198:	003f00fe 	.word	0x003f00fe
   1819c:	0184003f 	.word	0x0184003f
   181a0:	4bb1      	ldr	r3, [pc, #708]	; (18468 <rpc_ip_event_handler+0x34c>)
   181a2:	681a      	ldr	r2, [r3, #0]
   181a4:	9303      	str	r3, [sp, #12]
   181a6:	2a01      	cmp	r2, #1
   181a8:	d12d      	bne.n	18206 <rpc_ip_event_handler+0xea>
   181aa:	6940      	ldr	r0, [r0, #20]
   181ac:	2800      	cmp	r0, #0
   181ae:	f040 8087 	bne.w	182c0 <rpc_ip_event_handler+0x1a4>
   181b2:	f8d4 a018 	ldr.w	sl, [r4, #24]
   181b6:	f8d4 9000 	ldr.w	r9, [r4]
   181ba:	ea4f 134a 	mov.w	r3, sl, lsl #5
   181be:	4618      	mov	r0, r3
   181c0:	9301      	str	r3, [sp, #4]
   181c2:	f7fd fa6b 	bl	1569c <nrf_modem_os_alloc>
   181c6:	4680      	mov	r8, r0
   181c8:	b310      	cbz	r0, 18210 <rpc_ip_event_handler+0xf4>
   181ca:	2024      	movs	r0, #36	; 0x24
   181cc:	fb00 f00a 	mul.w	r0, r0, sl
   181d0:	f7fd fa64 	bl	1569c <nrf_modem_os_alloc>
   181d4:	b1f0      	cbz	r0, 18214 <rpc_ip_event_handler+0xf8>
   181d6:	4605      	mov	r5, r0
   181d8:	2704      	movs	r7, #4
   181da:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
   181de:	f108 0620 	add.w	r6, r8, #32
   181e2:	9302      	str	r3, [sp, #8]
   181e4:	9b02      	ldr	r3, [sp, #8]
   181e6:	42ab      	cmp	r3, r5
   181e8:	d118      	bne.n	1821c <rpc_ip_event_handler+0x100>
   181ea:	f1ba 0f00 	cmp.w	sl, #0
   181ee:	d004      	beq.n	181fa <rpc_ip_event_handler+0xde>
   181f0:	2200      	movs	r2, #0
   181f2:	9b01      	ldr	r3, [sp, #4]
   181f4:	4443      	add	r3, r8
   181f6:	f843 2c04 	str.w	r2, [r3, #-4]
   181fa:	4b9c      	ldr	r3, [pc, #624]	; (1846c <rpc_ip_event_handler+0x350>)
   181fc:	f8c3 8000 	str.w	r8, [r3]
   18200:	2302      	movs	r3, #2
   18202:	9a03      	ldr	r2, [sp, #12]
   18204:	6013      	str	r3, [r2, #0]
   18206:	6820      	ldr	r0, [r4, #0]
   18208:	2800      	cmp	r0, #0
   1820a:	f040 8174 	bne.w	184f6 <rpc_ip_event_handler+0x3da>
   1820e:	e067      	b.n	182e0 <rpc_ip_event_handler+0x1c4>
   18210:	f7fd fa4e 	bl	156b0 <nrf_modem_os_free>
   18214:	220c      	movs	r2, #12
   18216:	4b96      	ldr	r3, [pc, #600]	; (18470 <rpc_ip_event_handler+0x354>)
   18218:	601a      	str	r2, [r3, #0]
   1821a:	e7ee      	b.n	181fa <rpc_ip_event_handler+0xde>
   1821c:	f859 3007 	ldr.w	r3, [r9, r7]
   18220:	f846 3c20 	str.w	r3, [r6, #-32]
   18224:	eb09 0307 	add.w	r3, r9, r7
   18228:	685b      	ldr	r3, [r3, #4]
   1822a:	3b01      	subs	r3, #1
   1822c:	2b04      	cmp	r3, #4
   1822e:	bf8e      	itee	hi
   18230:	2300      	movhi	r3, #0
   18232:	4a90      	ldrls	r2, [pc, #576]	; (18474 <rpc_ip_event_handler+0x358>)
   18234:	56d3      	ldrsbls	r3, [r2, r3]
   18236:	f846 3c1c 	str.w	r3, [r6, #-28]
   1823a:	4b8f      	ldr	r3, [pc, #572]	; (18478 <rpc_ip_event_handler+0x35c>)
   1823c:	681b      	ldr	r3, [r3, #0]
   1823e:	f846 3c18 	str.w	r3, [r6, #-24]
   18242:	4b8e      	ldr	r3, [pc, #568]	; (1847c <rpc_ip_event_handler+0x360>)
   18244:	681b      	ldr	r3, [r3, #0]
   18246:	f846 3c14 	str.w	r3, [r6, #-20]
   1824a:	eb09 0307 	add.w	r3, r9, r7
   1824e:	8a1a      	ldrh	r2, [r3, #16]
   18250:	f8b3 b012 	ldrh.w	fp, [r3, #18]
   18254:	4b8a      	ldr	r3, [pc, #552]	; (18480 <rpc_ip_event_handler+0x364>)
   18256:	3714      	adds	r7, #20
   18258:	2a04      	cmp	r2, #4
   1825a:	881b      	ldrh	r3, [r3, #0]
   1825c:	f846 2c10 	str.w	r2, [r6, #-16]
   18260:	f846 5c0c 	str.w	r5, [r6, #-12]
   18264:	eb09 0107 	add.w	r1, r9, r7
   18268:	d122      	bne.n	182b0 <rpc_ip_event_handler+0x194>
   1826a:	2002      	movs	r0, #2
   1826c:	6068      	str	r0, [r5, #4]
   1826e:	2010      	movs	r0, #16
   18270:	812b      	strh	r3, [r5, #8]
   18272:	7028      	strb	r0, [r5, #0]
   18274:	f105 000c 	add.w	r0, r5, #12
   18278:	f00a fe7d 	bl	22f76 <memcpy>
   1827c:	f856 3c10 	ldr.w	r3, [r6, #-16]
   18280:	f10b 0001 	add.w	r0, fp, #1
   18284:	441f      	add	r7, r3
   18286:	f7fd fa09 	bl	1569c <nrf_modem_os_alloc>
   1828a:	f846 0c08 	str.w	r0, [r6, #-8]
   1828e:	b148      	cbz	r0, 182a4 <rpc_ip_event_handler+0x188>
   18290:	465a      	mov	r2, fp
   18292:	eb09 0107 	add.w	r1, r9, r7
   18296:	f00a fe6e 	bl	22f76 <memcpy>
   1829a:	2200      	movs	r2, #0
   1829c:	f856 3c08 	ldr.w	r3, [r6, #-8]
   182a0:	f803 200b 	strb.w	r2, [r3, fp]
   182a4:	f846 6c04 	str.w	r6, [r6, #-4]
   182a8:	445f      	add	r7, fp
   182aa:	3620      	adds	r6, #32
   182ac:	3508      	adds	r5, #8
   182ae:	e799      	b.n	181e4 <rpc_ip_event_handler+0xc8>
   182b0:	200a      	movs	r0, #10
   182b2:	6068      	str	r0, [r5, #4]
   182b4:	2024      	movs	r0, #36	; 0x24
   182b6:	812b      	strh	r3, [r5, #8]
   182b8:	7028      	strb	r0, [r5, #0]
   182ba:	f105 0010 	add.w	r0, r5, #16
   182be:	e7db      	b.n	18278 <rpc_ip_event_handler+0x15c>
   182c0:	f7ff f964 	bl	1758c <rpc_error_to_nrf_gai_errno>
   182c4:	4b6a      	ldr	r3, [pc, #424]	; (18470 <rpc_ip_event_handler+0x354>)
   182c6:	6018      	str	r0, [r3, #0]
   182c8:	e79a      	b.n	18200 <rpc_ip_event_handler+0xe4>
   182ca:	6943      	ldr	r3, [r0, #20]
   182cc:	2b6a      	cmp	r3, #106	; 0x6a
   182ce:	bf8e      	itee	hi
   182d0:	232d      	movhi	r3, #45	; 0x2d
   182d2:	4a6c      	ldrls	r2, [pc, #432]	; (18484 <rpc_ip_event_handler+0x368>)
   182d4:	56d3      	ldrsbls	r3, [r2, r3]
   182d6:	4a6c      	ldr	r2, [pc, #432]	; (18488 <rpc_ip_event_handler+0x36c>)
   182d8:	6013      	str	r3, [r2, #0]
   182da:	2201      	movs	r2, #1
   182dc:	4b6b      	ldr	r3, [pc, #428]	; (1848c <rpc_ip_event_handler+0x370>)
   182de:	701a      	strb	r2, [r3, #0]
   182e0:	2000      	movs	r0, #0
   182e2:	e04c      	b.n	1837e <rpc_ip_event_handler+0x262>
   182e4:	0c07      	lsrs	r7, r0, #16
   182e6:	e731      	b.n	1814c <rpc_ip_event_handler+0x30>
   182e8:	f249 0302 	movw	r3, #36866	; 0x9002
   182ec:	429e      	cmp	r6, r3
   182ee:	f000 80b0 	beq.w	18452 <rpc_ip_event_handler+0x336>
   182f2:	f249 0303 	movw	r3, #36867	; 0x9003
   182f6:	429e      	cmp	r6, r3
   182f8:	d053      	beq.n	183a2 <rpc_ip_event_handler+0x286>
   182fa:	f249 0301 	movw	r3, #36865	; 0x9001
   182fe:	429e      	cmp	r6, r3
   18300:	d181      	bne.n	18206 <rpc_ip_event_handler+0xea>
   18302:	682e      	ldr	r6, [r5, #0]
   18304:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   18308:	f000 80f4 	beq.w	184f4 <rpc_ip_event_handler+0x3d8>
   1830c:	68a3      	ldr	r3, [r4, #8]
   1830e:	2b04      	cmp	r3, #4
   18310:	f240 80ed 	bls.w	184ee <rpc_ip_event_handler+0x3d2>
   18314:	8a67      	ldrh	r7, [r4, #18]
   18316:	2f00      	cmp	r7, #0
   18318:	f000 80ea 	beq.w	184f0 <rpc_ip_event_handler+0x3d4>
   1831c:	2f10      	cmp	r7, #16
   1831e:	f040 80ca 	bne.w	184b6 <rpc_ip_event_handler+0x39a>
   18322:	2024      	movs	r0, #36	; 0x24
   18324:	f7fd f9ba 	bl	1569c <nrf_modem_os_alloc>
   18328:	4606      	mov	r6, r0
   1832a:	b1d8      	cbz	r0, 18364 <rpc_ip_event_handler+0x248>
   1832c:	230a      	movs	r3, #10
   1832e:	2724      	movs	r7, #36	; 0x24
   18330:	6043      	str	r3, [r0, #4]
   18332:	7007      	strb	r7, [r0, #0]
   18334:	7c62      	ldrb	r2, [r4, #17]
   18336:	7c23      	ldrb	r3, [r4, #16]
   18338:	f104 0114 	add.w	r1, r4, #20
   1833c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18340:	2210      	movs	r2, #16
   18342:	8103      	strh	r3, [r0, #8]
   18344:	4410      	add	r0, r2
   18346:	f00a fe16 	bl	22f76 <memcpy>
   1834a:	6823      	ldr	r3, [r4, #0]
   1834c:	69e8      	ldr	r0, [r5, #28]
   1834e:	9304      	str	r3, [sp, #16]
   18350:	6863      	ldr	r3, [r4, #4]
   18352:	9707      	str	r7, [sp, #28]
   18354:	e9cd 3605 	strd	r3, r6, [sp, #20]
   18358:	6803      	ldr	r3, [r0, #0]
   1835a:	a904      	add	r1, sp, #16
   1835c:	685b      	ldr	r3, [r3, #4]
   1835e:	4798      	blx	r3
   18360:	3001      	adds	r0, #1
   18362:	d17b      	bne.n	1845c <rpc_ip_event_handler+0x340>
   18364:	2002      	movs	r0, #2
   18366:	e00a      	b.n	1837e <rpc_ip_event_handler+0x262>
   18368:	682b      	ldr	r3, [r5, #0]
   1836a:	2b01      	cmp	r3, #1
   1836c:	d1b8      	bne.n	182e0 <rpc_ip_event_handler+0x1c4>
   1836e:	6960      	ldr	r0, [r4, #20]
   18370:	2800      	cmp	r0, #0
   18372:	f040 80fa 	bne.w	1856a <rpc_ip_event_handler+0x44e>
   18376:	2302      	movs	r3, #2
   18378:	602b      	str	r3, [r5, #0]
   1837a:	69a3      	ldr	r3, [r4, #24]
   1837c:	61ab      	str	r3, [r5, #24]
   1837e:	b009      	add	sp, #36	; 0x24
   18380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18384:	682b      	ldr	r3, [r5, #0]
   18386:	b29b      	uxth	r3, r3
   18388:	2b0d      	cmp	r3, #13
   1838a:	d1a9      	bne.n	182e0 <rpc_ip_event_handler+0x1c4>
   1838c:	6960      	ldr	r0, [r4, #20]
   1838e:	2800      	cmp	r0, #0
   18390:	f040 80eb 	bne.w	1856a <rpc_ip_event_handler+0x44e>
   18394:	682b      	ldr	r3, [r5, #0]
   18396:	0c1b      	lsrs	r3, r3, #16
   18398:	041b      	lsls	r3, r3, #16
   1839a:	f043 030e 	orr.w	r3, r3, #14
   1839e:	602b      	str	r3, [r5, #0]
   183a0:	e7ed      	b.n	1837e <rpc_ip_event_handler+0x262>
   183a2:	682b      	ldr	r3, [r5, #0]
   183a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   183a8:	602b      	str	r3, [r5, #0]
   183aa:	682b      	ldr	r3, [r5, #0]
   183ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   183b0:	602b      	str	r3, [r5, #0]
   183b2:	6923      	ldr	r3, [r4, #16]
   183b4:	2b6c      	cmp	r3, #108	; 0x6c
   183b6:	d107      	bne.n	183c8 <rpc_ip_event_handler+0x2ac>
   183b8:	682b      	ldr	r3, [r5, #0]
   183ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   183be:	602b      	str	r3, [r5, #0]
   183c0:	2339      	movs	r3, #57	; 0x39
   183c2:	606b      	str	r3, [r5, #4]
   183c4:	60ab      	str	r3, [r5, #8]
   183c6:	e78b      	b.n	182e0 <rpc_ip_event_handler+0x1c4>
   183c8:	2b6a      	cmp	r3, #106	; 0x6a
   183ca:	bf96      	itet	ls
   183cc:	4a2d      	ldrls	r2, [pc, #180]	; (18484 <rpc_ip_event_handler+0x368>)
   183ce:	232d      	movhi	r3, #45	; 0x2d
   183d0:	56d3      	ldrsbls	r3, [r2, r3]
   183d2:	e7f6      	b.n	183c2 <rpc_ip_event_handler+0x2a6>
   183d4:	682b      	ldr	r3, [r5, #0]
   183d6:	b29b      	uxth	r3, r3
   183d8:	2b03      	cmp	r3, #3
   183da:	d181      	bne.n	182e0 <rpc_ip_event_handler+0x1c4>
   183dc:	6960      	ldr	r0, [r4, #20]
   183de:	2800      	cmp	r0, #0
   183e0:	f040 80c3 	bne.w	1856a <rpc_ip_event_handler+0x44e>
   183e4:	682b      	ldr	r3, [r5, #0]
   183e6:	0c1b      	lsrs	r3, r3, #16
   183e8:	041b      	lsls	r3, r3, #16
   183ea:	f043 0304 	orr.w	r3, r3, #4
   183ee:	e7d6      	b.n	1839e <rpc_ip_event_handler+0x282>
   183f0:	682b      	ldr	r3, [r5, #0]
   183f2:	0099      	lsls	r1, r3, #2
   183f4:	f57f af74 	bpl.w	182e0 <rpc_ip_event_handler+0x1c4>
   183f8:	682b      	ldr	r3, [r5, #0]
   183fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   183fe:	602b      	str	r3, [r5, #0]
   18400:	6960      	ldr	r0, [r4, #20]
   18402:	b968      	cbnz	r0, 18420 <rpc_ip_event_handler+0x304>
   18404:	682b      	ldr	r3, [r5, #0]
   18406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1840a:	602b      	str	r3, [r5, #0]
   1840c:	682b      	ldr	r3, [r5, #0]
   1840e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   18412:	602b      	str	r3, [r5, #0]
   18414:	682b      	ldr	r3, [r5, #0]
   18416:	0c1b      	lsrs	r3, r3, #16
   18418:	041b      	lsls	r3, r3, #16
   1841a:	f043 0305 	orr.w	r3, r3, #5
   1841e:	e7be      	b.n	1839e <rpc_ip_event_handler+0x282>
   18420:	286a      	cmp	r0, #106	; 0x6a
   18422:	f200 8096 	bhi.w	18552 <rpc_ip_event_handler+0x436>
   18426:	4b17      	ldr	r3, [pc, #92]	; (18484 <rpc_ip_event_handler+0x368>)
   18428:	561b      	ldrsb	r3, [r3, r0]
   1842a:	606b      	str	r3, [r5, #4]
   1842c:	682b      	ldr	r3, [r5, #0]
   1842e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   18432:	e016      	b.n	18462 <rpc_ip_event_handler+0x346>
   18434:	682b      	ldr	r3, [r5, #0]
   18436:	b29b      	uxth	r3, r3
   18438:	2b06      	cmp	r3, #6
   1843a:	f47f af51 	bne.w	182e0 <rpc_ip_event_handler+0x1c4>
   1843e:	6960      	ldr	r0, [r4, #20]
   18440:	2800      	cmp	r0, #0
   18442:	f040 8092 	bne.w	1856a <rpc_ip_event_handler+0x44e>
   18446:	682b      	ldr	r3, [r5, #0]
   18448:	0c1b      	lsrs	r3, r3, #16
   1844a:	041b      	lsls	r3, r3, #16
   1844c:	f043 0307 	orr.w	r3, r3, #7
   18450:	e7a5      	b.n	1839e <rpc_ip_event_handler+0x282>
   18452:	682b      	ldr	r3, [r5, #0]
   18454:	b29b      	uxth	r3, r3
   18456:	2b07      	cmp	r3, #7
   18458:	f47f af42 	bne.w	182e0 <rpc_ip_event_handler+0x1c4>
   1845c:	682b      	ldr	r3, [r5, #0]
   1845e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   18462:	602b      	str	r3, [r5, #0]
   18464:	e73c      	b.n	182e0 <rpc_ip_event_handler+0x1c4>
   18466:	bf00      	nop
   18468:	20016b24 	.word	0x20016b24
   1846c:	20016b28 	.word	0x20016b28
   18470:	20016b20 	.word	0x20016b20
   18474:	00024bc1 	.word	0x00024bc1
   18478:	20016b18 	.word	0x20016b18
   1847c:	20016b14 	.word	0x20016b14
   18480:	20016c74 	.word	0x20016c74
   18484:	00024bc6 	.word	0x00024bc6
   18488:	20016b50 	.word	0x20016b50
   1848c:	20016c86 	.word	0x20016c86
   18490:	682b      	ldr	r3, [r5, #0]
   18492:	b29b      	uxth	r3, r3
   18494:	2b08      	cmp	r3, #8
   18496:	f47f af23 	bne.w	182e0 <rpc_ip_event_handler+0x1c4>
   1849a:	6963      	ldr	r3, [r4, #20]
   1849c:	2b00      	cmp	r3, #0
   1849e:	d17a      	bne.n	18596 <rpc_ip_event_handler+0x47a>
   184a0:	4b40      	ldr	r3, [pc, #256]	; (185a4 <rpc_ip_event_handler+0x488>)
   184a2:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   184a6:	682b      	ldr	r3, [r5, #0]
   184a8:	0c1b      	lsrs	r3, r3, #16
   184aa:	041b      	lsls	r3, r3, #16
   184ac:	f043 0309 	orr.w	r3, r3, #9
   184b0:	602b      	str	r3, [r5, #0]
   184b2:	2001      	movs	r0, #1
   184b4:	e763      	b.n	1837e <rpc_ip_event_handler+0x262>
   184b6:	2f04      	cmp	r7, #4
   184b8:	d11c      	bne.n	184f4 <rpc_ip_event_handler+0x3d8>
   184ba:	2010      	movs	r0, #16
   184bc:	f7fd f8ee 	bl	1569c <nrf_modem_os_alloc>
   184c0:	4606      	mov	r6, r0
   184c2:	2800      	cmp	r0, #0
   184c4:	f43f af4e 	beq.w	18364 <rpc_ip_event_handler+0x248>
   184c8:	2302      	movs	r3, #2
   184ca:	f04f 0810 	mov.w	r8, #16
   184ce:	6043      	str	r3, [r0, #4]
   184d0:	f880 8000 	strb.w	r8, [r0]
   184d4:	7c62      	ldrb	r2, [r4, #17]
   184d6:	7c23      	ldrb	r3, [r4, #16]
   184d8:	f104 0114 	add.w	r1, r4, #20
   184dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   184e0:	8103      	strh	r3, [r0, #8]
   184e2:	463a      	mov	r2, r7
   184e4:	300c      	adds	r0, #12
   184e6:	f00a fd46 	bl	22f76 <memcpy>
   184ea:	4647      	mov	r7, r8
   184ec:	e72d      	b.n	1834a <rpc_ip_event_handler+0x22e>
   184ee:	2700      	movs	r7, #0
   184f0:	463e      	mov	r6, r7
   184f2:	e72a      	b.n	1834a <rpc_ip_event_handler+0x22e>
   184f4:	6820      	ldr	r0, [r4, #0]
   184f6:	f008 ffa3 	bl	21440 <rpc_ip_client_data_free>
   184fa:	e6f1      	b.n	182e0 <rpc_ip_event_handler+0x1c4>
   184fc:	6963      	ldr	r3, [r4, #20]
   184fe:	b93b      	cbnz	r3, 18510 <rpc_ip_event_handler+0x3f4>
   18500:	682b      	ldr	r3, [r5, #0]
   18502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18506:	602b      	str	r3, [r5, #0]
   18508:	4b26      	ldr	r3, [pc, #152]	; (185a4 <rpc_ip_event_handler+0x488>)
   1850a:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   1850e:	e7d0      	b.n	184b2 <rpc_ip_event_handler+0x396>
   18510:	2b6b      	cmp	r3, #107	; 0x6b
   18512:	d10f      	bne.n	18534 <rpc_ip_event_handler+0x418>
   18514:	220c      	movs	r2, #12
   18516:	682b      	ldr	r3, [r5, #0]
   18518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1851c:	602b      	str	r3, [r5, #0]
   1851e:	692b      	ldr	r3, [r5, #16]
   18520:	2b01      	cmp	r3, #1
   18522:	682b      	ldr	r3, [r5, #0]
   18524:	bf0c      	ite	eq
   18526:	f043 6300 	orreq.w	r3, r3, #134217728	; 0x8000000
   1852a:	f443 2380 	orrne.w	r3, r3, #262144	; 0x40000
   1852e:	602b      	str	r3, [r5, #0]
   18530:	606a      	str	r2, [r5, #4]
   18532:	e6d5      	b.n	182e0 <rpc_ip_event_handler+0x1c4>
   18534:	f023 0202 	bic.w	r2, r3, #2
   18538:	2a01      	cmp	r2, #1
   1853a:	d105      	bne.n	18548 <rpc_ip_event_handler+0x42c>
   1853c:	230c      	movs	r3, #12
   1853e:	606b      	str	r3, [r5, #4]
   18540:	682b      	ldr	r3, [r5, #0]
   18542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18546:	e78c      	b.n	18462 <rpc_ip_event_handler+0x346>
   18548:	2b6a      	cmp	r3, #106	; 0x6a
   1854a:	d802      	bhi.n	18552 <rpc_ip_event_handler+0x436>
   1854c:	4a16      	ldr	r2, [pc, #88]	; (185a8 <rpc_ip_event_handler+0x48c>)
   1854e:	56d3      	ldrsb	r3, [r2, r3]
   18550:	e76b      	b.n	1842a <rpc_ip_event_handler+0x30e>
   18552:	232d      	movs	r3, #45	; 0x2d
   18554:	e769      	b.n	1842a <rpc_ip_event_handler+0x30e>
   18556:	682b      	ldr	r3, [r5, #0]
   18558:	025a      	lsls	r2, r3, #9
   1855a:	f57f aec1 	bpl.w	182e0 <rpc_ip_event_handler+0x1c4>
   1855e:	6960      	ldr	r0, [r4, #20]
   18560:	b918      	cbnz	r0, 1856a <rpc_ip_event_handler+0x44e>
   18562:	682b      	ldr	r3, [r5, #0]
   18564:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   18568:	e719      	b.n	1839e <rpc_ip_event_handler+0x282>
   1856a:	286a      	cmp	r0, #106	; 0x6a
   1856c:	d818      	bhi.n	185a0 <rpc_ip_event_handler+0x484>
   1856e:	4b0e      	ldr	r3, [pc, #56]	; (185a8 <rpc_ip_event_handler+0x48c>)
   18570:	561b      	ldrsb	r3, [r3, r0]
   18572:	606b      	str	r3, [r5, #4]
   18574:	e6b4      	b.n	182e0 <rpc_ip_event_handler+0x1c4>
   18576:	682b      	ldr	r3, [r5, #0]
   18578:	01db      	lsls	r3, r3, #7
   1857a:	f57f aeb1 	bpl.w	182e0 <rpc_ip_event_handler+0x1c4>
   1857e:	6963      	ldr	r3, [r4, #20]
   18580:	b94b      	cbnz	r3, 18596 <rpc_ip_event_handler+0x47a>
   18582:	6820      	ldr	r0, [r4, #0]
   18584:	b118      	cbz	r0, 1858e <rpc_ip_event_handler+0x472>
   18586:	2001      	movs	r0, #1
   18588:	4b06      	ldr	r3, [pc, #24]	; (185a4 <rpc_ip_event_handler+0x488>)
   1858a:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   1858e:	682b      	ldr	r3, [r5, #0]
   18590:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   18594:	e703      	b.n	1839e <rpc_ip_event_handler+0x282>
   18596:	2b6a      	cmp	r3, #106	; 0x6a
   18598:	d802      	bhi.n	185a0 <rpc_ip_event_handler+0x484>
   1859a:	4a03      	ldr	r2, [pc, #12]	; (185a8 <rpc_ip_event_handler+0x48c>)
   1859c:	56d3      	ldrsb	r3, [r2, r3]
   1859e:	e7e8      	b.n	18572 <rpc_ip_event_handler+0x456>
   185a0:	232d      	movs	r3, #45	; 0x2d
   185a2:	e7e6      	b.n	18572 <rpc_ip_event_handler+0x456>
   185a4:	20016b2c 	.word	0x20016b2c
   185a8:	00024bc6 	.word	0x00024bc6

000185ac <secure_socket_dtls_timeout_check>:
   185ac:	281f      	cmp	r0, #31
   185ae:	dc0b      	bgt.n	185c8 <secure_socket_dtls_timeout_check+0x1c>
   185b0:	2800      	cmp	r0, #0
   185b2:	dd10      	ble.n	185d6 <secure_socket_dtls_timeout_check+0x2a>
   185b4:	2301      	movs	r3, #1
   185b6:	fa03 f000 	lsl.w	r0, r3, r0
   185ba:	4b09      	ldr	r3, [pc, #36]	; (185e0 <secure_socket_dtls_timeout_check+0x34>)
   185bc:	4003      	ands	r3, r0
   185be:	2b00      	cmp	r3, #0
   185c0:	bf0c      	ite	eq
   185c2:	2016      	moveq	r0, #22
   185c4:	2000      	movne	r0, #0
   185c6:	4770      	bx	lr
   185c8:	283f      	cmp	r0, #63	; 0x3f
   185ca:	d006      	beq.n	185da <secure_socket_dtls_timeout_check+0x2e>
   185cc:	287b      	cmp	r0, #123	; 0x7b
   185ce:	bf14      	ite	ne
   185d0:	2016      	movne	r0, #22
   185d2:	2000      	moveq	r0, #0
   185d4:	4770      	bx	lr
   185d6:	2016      	movs	r0, #22
   185d8:	4770      	bx	lr
   185da:	2000      	movs	r0, #0
   185dc:	4770      	bx	lr
   185de:	bf00      	nop
   185e0:	8000808a 	.word	0x8000808a

000185e4 <hostname_free>:
   185e4:	b538      	push	{r3, r4, r5, lr}
   185e6:	4c07      	ldr	r4, [pc, #28]	; (18604 <hostname_free+0x20>)
   185e8:	4605      	mov	r5, r0
   185ea:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
   185ee:	b138      	cbz	r0, 18600 <hostname_free+0x1c>
   185f0:	f7fd f85e 	bl	156b0 <nrf_modem_os_free>
   185f4:	2300      	movs	r3, #0
   185f6:	f844 3035 	str.w	r3, [r4, r5, lsl #3]
   185fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   185fe:	6063      	str	r3, [r4, #4]
   18600:	bd38      	pop	{r3, r4, r5, pc}
   18602:	bf00      	nop
   18604:	20016b54 	.word	0x20016b54

00018608 <secure_socket_attach_initiate>:
   18608:	f04f 33ff 	mov.w	r3, #4294967295
   1860c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   18610:	f8df 8084 	ldr.w	r8, [pc, #132]	; 18698 <secure_socket_attach_initiate+0x90>
   18614:	9301      	str	r3, [sp, #4]
   18616:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   1861a:	460d      	mov	r5, r1
   1861c:	4616      	mov	r6, r2
   1861e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   18622:	f247 0281 	movw	r2, #28801	; 0x7081
   18626:	6989      	ldr	r1, [r1, #24]
   18628:	4607      	mov	r7, r0
   1862a:	f009 f8e9 	bl	21800 <ip_interface_request_create>
   1862e:	4604      	mov	r4, r0
   18630:	b360      	cbz	r0, 1868c <secure_socket_attach_initiate+0x84>
   18632:	f8d9 2004 	ldr.w	r2, [r9, #4]
   18636:	b122      	cbz	r2, 18642 <secure_socket_attach_initiate+0x3a>
   18638:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
   1863c:	6800      	ldr	r0, [r0, #0]
   1863e:	f00a fc9a 	bl	22f76 <memcpy>
   18642:	2224      	movs	r2, #36	; 0x24
   18644:	4913      	ldr	r1, [pc, #76]	; (18694 <secure_socket_attach_initiate+0x8c>)
   18646:	f104 0014 	add.w	r0, r4, #20
   1864a:	fb02 1107 	mla	r1, r2, r7, r1
   1864e:	f00a fc92 	bl	22f76 <memcpy>
   18652:	68a3      	ldr	r3, [r4, #8]
   18654:	f247 0181 	movw	r1, #28801	; 0x7081
   18658:	3324      	adds	r3, #36	; 0x24
   1865a:	60a3      	str	r3, [r4, #8]
   1865c:	682b      	ldr	r3, [r5, #0]
   1865e:	4620      	mov	r0, r4
   18660:	0c1b      	lsrs	r3, r3, #16
   18662:	041b      	lsls	r3, r3, #16
   18664:	f043 030a 	orr.w	r3, r3, #10
   18668:	602b      	str	r3, [r5, #0]
   1866a:	f008 fedc 	bl	21426 <rpc_ip_client_request_send>
   1866e:	682b      	ldr	r3, [r5, #0]
   18670:	00db      	lsls	r3, r3, #3
   18672:	d40d      	bmi.n	18690 <secure_socket_attach_initiate+0x88>
   18674:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18678:	210b      	movs	r1, #11
   1867a:	4638      	mov	r0, r7
   1867c:	ab01      	add	r3, sp, #4
   1867e:	f009 f8d7 	bl	21830 <ip_interface_wait>
   18682:	b100      	cbz	r0, 18686 <secure_socket_attach_initiate+0x7e>
   18684:	602e      	str	r6, [r5, #0]
   18686:	b003      	add	sp, #12
   18688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1868c:	200c      	movs	r0, #12
   1868e:	e7fa      	b.n	18686 <secure_socket_attach_initiate+0x7e>
   18690:	2073      	movs	r0, #115	; 0x73
   18692:	e7f8      	b.n	18686 <secure_socket_attach_initiate+0x7e>
   18694:	20016c88 	.word	0x20016c88
   18698:	20016b54 	.word	0x20016b54

0001869c <tls_interface_init>:
   1869c:	2201      	movs	r2, #1
   1869e:	4b02      	ldr	r3, [pc, #8]	; (186a8 <tls_interface_init+0xc>)
   186a0:	2000      	movs	r0, #0
   186a2:	701a      	strb	r2, [r3, #0]
   186a4:	4770      	bx	lr
   186a6:	bf00      	nop
   186a8:	20016c87 	.word	0x20016c87

000186ac <tls_interface_open>:
   186ac:	b538      	push	{r3, r4, r5, lr}
   186ae:	4b1e      	ldr	r3, [pc, #120]	; (18728 <tls_interface_open+0x7c>)
   186b0:	4615      	mov	r5, r2
   186b2:	781b      	ldrb	r3, [r3, #0]
   186b4:	b92b      	cbnz	r3, 186c2 <tls_interface_open+0x16>
   186b6:	2070      	movs	r0, #112	; 0x70
   186b8:	f7fc fe62 	bl	15380 <nrf_modem_os_errno_set>
   186bc:	f04f 34ff 	mov.w	r4, #4294967295
   186c0:	e02b      	b.n	1871a <tls_interface_open+0x6e>
   186c2:	1e4b      	subs	r3, r1, #1
   186c4:	2b01      	cmp	r3, #1
   186c6:	d809      	bhi.n	186dc <tls_interface_open+0x30>
   186c8:	b952      	cbnz	r2, 186e0 <tls_interface_open+0x34>
   186ca:	2901      	cmp	r1, #1
   186cc:	bf0b      	itete	eq
   186ce:	2201      	moveq	r2, #1
   186d0:	2202      	movne	r2, #2
   186d2:	f44f 7582 	moveq.w	r5, #260	; 0x104
   186d6:	f44f 7587 	movne.w	r5, #270	; 0x10e
   186da:	e007      	b.n	186ec <tls_interface_open+0x40>
   186dc:	2029      	movs	r0, #41	; 0x29
   186de:	e7eb      	b.n	186b8 <tls_interface_open+0xc>
   186e0:	2901      	cmp	r1, #1
   186e2:	d11c      	bne.n	1871e <tls_interface_open+0x72>
   186e4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   186e8:	d1f8      	bne.n	186dc <tls_interface_open+0x30>
   186ea:	460a      	mov	r2, r1
   186ec:	f7fe ff86 	bl	175fc <ip_interface_open>
   186f0:	1e04      	subs	r4, r0, #0
   186f2:	dbe3      	blt.n	186bc <tls_interface_open+0x10>
   186f4:	2224      	movs	r2, #36	; 0x24
   186f6:	480d      	ldr	r0, [pc, #52]	; (1872c <tls_interface_open+0x80>)
   186f8:	490d      	ldr	r1, [pc, #52]	; (18730 <tls_interface_open+0x84>)
   186fa:	fb02 0004 	mla	r0, r2, r4, r0
   186fe:	f00a fc3a 	bl	22f76 <memcpy>
   18702:	4620      	mov	r0, r4
   18704:	f7fe fe86 	bl	17414 <interface_socket_from_handle_get>
   18708:	6803      	ldr	r3, [r0, #0]
   1870a:	6145      	str	r5, [r0, #20]
   1870c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   18710:	6003      	str	r3, [r0, #0]
   18712:	6803      	ldr	r3, [r0, #0]
   18714:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   18718:	6003      	str	r3, [r0, #0]
   1871a:	4620      	mov	r0, r4
   1871c:	bd38      	pop	{r3, r4, r5, pc}
   1871e:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   18722:	d1db      	bne.n	186dc <tls_interface_open+0x30>
   18724:	2202      	movs	r2, #2
   18726:	e7e1      	b.n	186ec <tls_interface_open+0x40>
   18728:	20016c87 	.word	0x20016c87
   1872c:	20016c88 	.word	0x20016c88
   18730:	00024c31 	.word	0x00024c31

00018734 <tls_interface_sendto>:
   18734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18738:	b085      	sub	sp, #20
   1873a:	4606      	mov	r6, r0
   1873c:	4691      	mov	r9, r2
   1873e:	461f      	mov	r7, r3
   18740:	9103      	str	r1, [sp, #12]
   18742:	f7fe fe67 	bl	17414 <interface_socket_from_handle_get>
   18746:	4605      	mov	r5, r0
   18748:	2800      	cmp	r0, #0
   1874a:	d06c      	beq.n	18826 <tls_interface_sendto+0xf2>
   1874c:	f04f 0a24 	mov.w	sl, #36	; 0x24
   18750:	07bb      	lsls	r3, r7, #30
   18752:	bf48      	it	mi
   18754:	2300      	movmi	r3, #0
   18756:	f04f 0400 	mov.w	r4, #0
   1875a:	f04f 3bff 	mov.w	fp, #4294967295
   1875e:	bf58      	it	pl
   18760:	6803      	ldrpl	r3, [r0, #0]
   18762:	fb0a fa06 	mul.w	sl, sl, r6
   18766:	bf5c      	itt	pl
   18768:	f083 5380 	eorpl.w	r3, r3, #268435456	; 0x10000000
   1876c:	f3c3 7300 	ubfxpl	r3, r3, #28, #1
   18770:	9302      	str	r3, [sp, #8]
   18772:	6829      	ldr	r1, [r5, #0]
   18774:	eba9 0804 	sub.w	r8, r9, r4
   18778:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
   1877c:	b289      	uxth	r1, r1
   1877e:	bfa8      	it	ge
   18780:	f44f 6800 	movge.w	r8, #2048	; 0x800
   18784:	290c      	cmp	r1, #12
   18786:	d110      	bne.n	187aa <tls_interface_sendto+0x76>
   18788:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1878a:	9903      	ldr	r1, [sp, #12]
   1878c:	9301      	str	r3, [sp, #4]
   1878e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18790:	4642      	mov	r2, r8
   18792:	9300      	str	r3, [sp, #0]
   18794:	4630      	mov	r0, r6
   18796:	463b      	mov	r3, r7
   18798:	4421      	add	r1, r4
   1879a:	f7fe ffed 	bl	17778 <ip_interface_sendto>
   1879e:	f1b0 0b00 	subs.w	fp, r0, #0
   187a2:	da32      	bge.n	1880a <tls_interface_sendto+0xd6>
   187a4:	f04f 34ff 	mov.w	r4, #4294967295
   187a8:	e034      	b.n	18814 <tls_interface_sendto+0xe0>
   187aa:	6829      	ldr	r1, [r5, #0]
   187ac:	b289      	uxth	r1, r1
   187ae:	290b      	cmp	r1, #11
   187b0:	d109      	bne.n	187c6 <tls_interface_sendto+0x92>
   187b2:	4b22      	ldr	r3, [pc, #136]	; (1883c <tls_interface_sendto+0x108>)
   187b4:	f813 200a 	ldrb.w	r2, [r3, sl]
   187b8:	2a02      	cmp	r2, #2
   187ba:	d036      	beq.n	1882a <tls_interface_sendto+0xf6>
   187bc:	692a      	ldr	r2, [r5, #16]
   187be:	2a01      	cmp	r2, #1
   187c0:	d135      	bne.n	1882e <tls_interface_sendto+0xfa>
   187c2:	202a      	movs	r0, #42	; 0x2a
   187c4:	e02c      	b.n	18820 <tls_interface_sendto+0xec>
   187c6:	4628      	mov	r0, r5
   187c8:	f009 fa91 	bl	21cee <attach_trigger_condition_verify>
   187cc:	b398      	cbz	r0, 18836 <tls_interface_sendto+0x102>
   187ce:	4b1b      	ldr	r3, [pc, #108]	; (1883c <tls_interface_sendto+0x108>)
   187d0:	f813 100a 	ldrb.w	r1, [r3, sl]
   187d4:	2902      	cmp	r1, #2
   187d6:	d110      	bne.n	187fa <tls_interface_sendto+0xc6>
   187d8:	4629      	mov	r1, r5
   187da:	4630      	mov	r0, r6
   187dc:	f009 fa9e 	bl	21d1c <secure_client_socket>
   187e0:	b970      	cbnz	r0, 18800 <tls_interface_sendto+0xcc>
   187e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   187e4:	9903      	ldr	r1, [sp, #12]
   187e6:	9301      	str	r3, [sp, #4]
   187e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   187ea:	4642      	mov	r2, r8
   187ec:	9300      	str	r3, [sp, #0]
   187ee:	4630      	mov	r0, r6
   187f0:	463b      	mov	r3, r7
   187f2:	4421      	add	r1, r4
   187f4:	f7fe ffc0 	bl	17778 <ip_interface_sendto>
   187f8:	4683      	mov	fp, r0
   187fa:	f1bb 0f00 	cmp.w	fp, #0
   187fe:	e7d0      	b.n	187a2 <tls_interface_sendto+0x6e>
   18800:	f1bb 3fff 	cmp.w	fp, #4294967295
   18804:	d00a      	beq.n	1881c <tls_interface_sendto+0xe8>
   18806:	2800      	cmp	r0, #0
   18808:	dc0a      	bgt.n	18820 <tls_interface_sendto+0xec>
   1880a:	9b02      	ldr	r3, [sp, #8]
   1880c:	445c      	add	r4, fp
   1880e:	b10b      	cbz	r3, 18814 <tls_interface_sendto+0xe0>
   18810:	45a1      	cmp	r9, r4
   18812:	dcae      	bgt.n	18772 <tls_interface_sendto+0x3e>
   18814:	4620      	mov	r0, r4
   18816:	b005      	add	sp, #20
   18818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1881c:	2800      	cmp	r0, #0
   1881e:	ddc1      	ble.n	187a4 <tls_interface_sendto+0x70>
   18820:	f7fc fdae 	bl	15380 <nrf_modem_os_errno_set>
   18824:	e7be      	b.n	187a4 <tls_interface_sendto+0x70>
   18826:	2009      	movs	r0, #9
   18828:	e7fa      	b.n	18820 <tls_interface_sendto+0xec>
   1882a:	2023      	movs	r0, #35	; 0x23
   1882c:	e7f8      	b.n	18820 <tls_interface_sendto+0xec>
   1882e:	f1bb 3fff 	cmp.w	fp, #4294967295
   18832:	d1ea      	bne.n	1880a <tls_interface_sendto+0xd6>
   18834:	e7b6      	b.n	187a4 <tls_interface_sendto+0x70>
   18836:	2039      	movs	r0, #57	; 0x39
   18838:	e7f2      	b.n	18820 <tls_interface_sendto+0xec>
   1883a:	bf00      	nop
   1883c:	20016c88 	.word	0x20016c88

00018840 <tls_interface_recvfrom>:
   18840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18842:	460d      	mov	r5, r1
   18844:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   18848:	4604      	mov	r4, r0
   1884a:	e9cd 3200 	strd	r3, r2, [sp]
   1884e:	f7fe fde1 	bl	17414 <interface_socket_from_handle_get>
   18852:	4601      	mov	r1, r0
   18854:	b388      	cbz	r0, 188ba <tls_interface_recvfrom+0x7a>
   18856:	e9dd 3200 	ldrd	r3, r2, [sp]
   1885a:	f8d0 c000 	ldr.w	ip, [r0]
   1885e:	fa1f fc8c 	uxth.w	ip, ip
   18862:	f1bc 0f0c 	cmp.w	ip, #12
   18866:	d006      	beq.n	18876 <tls_interface_recvfrom+0x36>
   18868:	f8d0 c000 	ldr.w	ip, [r0]
   1886c:	fa1f fc8c 	uxth.w	ip, ip
   18870:	f1bc 0f0d 	cmp.w	ip, #13
   18874:	d108      	bne.n	18888 <tls_interface_recvfrom+0x48>
   18876:	4629      	mov	r1, r5
   18878:	4620      	mov	r0, r4
   1887a:	e9cd 6708 	strd	r6, r7, [sp, #32]
   1887e:	b003      	add	sp, #12
   18880:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   18884:	f008 bfe4 	b.w	21850 <ip_interface_recvfrom>
   18888:	e9cd 2300 	strd	r2, r3, [sp]
   1888c:	f009 fa2f 	bl	21cee <attach_trigger_condition_verify>
   18890:	b1b8      	cbz	r0, 188c2 <tls_interface_recvfrom+0x82>
   18892:	2024      	movs	r0, #36	; 0x24
   18894:	4360      	muls	r0, r4
   18896:	f8df c030 	ldr.w	ip, [pc, #48]	; 188c8 <tls_interface_recvfrom+0x88>
   1889a:	f81c 0000 	ldrb.w	r0, [ip, r0]
   1889e:	2802      	cmp	r0, #2
   188a0:	d10f      	bne.n	188c2 <tls_interface_recvfrom+0x82>
   188a2:	4620      	mov	r0, r4
   188a4:	f009 fa3a 	bl	21d1c <secure_client_socket>
   188a8:	e9dd 2300 	ldrd	r2, r3, [sp]
   188ac:	2800      	cmp	r0, #0
   188ae:	d0e2      	beq.n	18876 <tls_interface_recvfrom+0x36>
   188b0:	dc04      	bgt.n	188bc <tls_interface_recvfrom+0x7c>
   188b2:	f04f 30ff 	mov.w	r0, #4294967295
   188b6:	b003      	add	sp, #12
   188b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   188ba:	2009      	movs	r0, #9
   188bc:	f7fc fd60 	bl	15380 <nrf_modem_os_errno_set>
   188c0:	e7f7      	b.n	188b2 <tls_interface_recvfrom+0x72>
   188c2:	2023      	movs	r0, #35	; 0x23
   188c4:	e7fa      	b.n	188bc <tls_interface_recvfrom+0x7c>
   188c6:	bf00      	nop
   188c8:	20016c88 	.word	0x20016c88

000188cc <tls_interface_bind>:
   188cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   188ce:	4604      	mov	r4, r0
   188d0:	e9cd 2100 	strd	r2, r1, [sp]
   188d4:	f7fe fd9e 	bl	17414 <interface_socket_from_handle_get>
   188d8:	4605      	mov	r5, r0
   188da:	b1e0      	cbz	r0, 18916 <tls_interface_bind+0x4a>
   188dc:	6803      	ldr	r3, [r0, #0]
   188de:	b29b      	uxth	r3, r3
   188e0:	2b02      	cmp	r3, #2
   188e2:	d11a      	bne.n	1891a <tls_interface_bind+0x4e>
   188e4:	e9dd 2100 	ldrd	r2, r1, [sp]
   188e8:	4620      	mov	r0, r4
   188ea:	f7ff f8a9 	bl	17a40 <ip_interface_bind>
   188ee:	b950      	cbnz	r0, 18906 <tls_interface_bind+0x3a>
   188f0:	2324      	movs	r3, #36	; 0x24
   188f2:	4363      	muls	r3, r4
   188f4:	4a0a      	ldr	r2, [pc, #40]	; (18920 <tls_interface_bind+0x54>)
   188f6:	5cd3      	ldrb	r3, [r2, r3]
   188f8:	2b01      	cmp	r3, #1
   188fa:	d10a      	bne.n	18912 <tls_interface_bind+0x46>
   188fc:	2204      	movs	r2, #4
   188fe:	4629      	mov	r1, r5
   18900:	4620      	mov	r0, r4
   18902:	f7ff fe81 	bl	18608 <secure_socket_attach_initiate>
   18906:	2800      	cmp	r0, #0
   18908:	dd03      	ble.n	18912 <tls_interface_bind+0x46>
   1890a:	f7fc fd39 	bl	15380 <nrf_modem_os_errno_set>
   1890e:	f04f 30ff 	mov.w	r0, #4294967295
   18912:	b003      	add	sp, #12
   18914:	bd30      	pop	{r4, r5, pc}
   18916:	2009      	movs	r0, #9
   18918:	e7f7      	b.n	1890a <tls_interface_bind+0x3e>
   1891a:	202d      	movs	r0, #45	; 0x2d
   1891c:	e7f5      	b.n	1890a <tls_interface_bind+0x3e>
   1891e:	bf00      	nop
   18920:	20016c88 	.word	0x20016c88

00018924 <tls_interface_connect>:
   18924:	b537      	push	{r0, r1, r2, r4, r5, lr}
   18926:	4605      	mov	r5, r0
   18928:	e9cd 2100 	strd	r2, r1, [sp]
   1892c:	f7fe fd72 	bl	17414 <interface_socket_from_handle_get>
   18930:	4604      	mov	r4, r0
   18932:	b1f8      	cbz	r0, 18974 <tls_interface_connect+0x50>
   18934:	2324      	movs	r3, #36	; 0x24
   18936:	436b      	muls	r3, r5
   18938:	4810      	ldr	r0, [pc, #64]	; (1897c <tls_interface_connect+0x58>)
   1893a:	5cc3      	ldrb	r3, [r0, r3]
   1893c:	2b02      	cmp	r3, #2
   1893e:	d11b      	bne.n	18978 <tls_interface_connect+0x54>
   18940:	e9dd 2100 	ldrd	r2, r1, [sp]
   18944:	6823      	ldr	r3, [r4, #0]
   18946:	b29b      	uxth	r3, r3
   18948:	2b02      	cmp	r3, #2
   1894a:	d003      	beq.n	18954 <tls_interface_connect+0x30>
   1894c:	6823      	ldr	r3, [r4, #0]
   1894e:	b29b      	uxth	r3, r3
   18950:	2b04      	cmp	r3, #4
   18952:	d111      	bne.n	18978 <tls_interface_connect+0x54>
   18954:	4628      	mov	r0, r5
   18956:	f009 f878 	bl	21a4a <ip_interface_connect>
   1895a:	b918      	cbnz	r0, 18964 <tls_interface_connect+0x40>
   1895c:	4621      	mov	r1, r4
   1895e:	4628      	mov	r0, r5
   18960:	f009 f9dc 	bl	21d1c <secure_client_socket>
   18964:	2800      	cmp	r0, #0
   18966:	dd03      	ble.n	18970 <tls_interface_connect+0x4c>
   18968:	f7fc fd0a 	bl	15380 <nrf_modem_os_errno_set>
   1896c:	f04f 30ff 	mov.w	r0, #4294967295
   18970:	b003      	add	sp, #12
   18972:	bd30      	pop	{r4, r5, pc}
   18974:	2009      	movs	r0, #9
   18976:	e7f7      	b.n	18968 <tls_interface_connect+0x44>
   18978:	202d      	movs	r0, #45	; 0x2d
   1897a:	e7f5      	b.n	18968 <tls_interface_connect+0x44>
   1897c:	20016c88 	.word	0x20016c88

00018980 <tls_interface_listen>:
   18980:	b538      	push	{r3, r4, r5, lr}
   18982:	4604      	mov	r4, r0
   18984:	460d      	mov	r5, r1
   18986:	f7fe fd45 	bl	17414 <interface_socket_from_handle_get>
   1898a:	2800      	cmp	r0, #0
   1898c:	d034      	beq.n	189f8 <tls_interface_listen+0x78>
   1898e:	6803      	ldr	r3, [r0, #0]
   18990:	00db      	lsls	r3, r3, #3
   18992:	d433      	bmi.n	189fc <tls_interface_listen+0x7c>
   18994:	6903      	ldr	r3, [r0, #16]
   18996:	2b01      	cmp	r3, #1
   18998:	d130      	bne.n	189fc <tls_interface_listen+0x7c>
   1899a:	6803      	ldr	r3, [r0, #0]
   1899c:	b29b      	uxth	r3, r3
   1899e:	2b04      	cmp	r3, #4
   189a0:	d105      	bne.n	189ae <tls_interface_listen+0x2e>
   189a2:	2324      	movs	r3, #36	; 0x24
   189a4:	4363      	muls	r3, r4
   189a6:	4a16      	ldr	r2, [pc, #88]	; (18a00 <tls_interface_listen+0x80>)
   189a8:	5cd3      	ldrb	r3, [r2, r3]
   189aa:	2b02      	cmp	r3, #2
   189ac:	d009      	beq.n	189c2 <tls_interface_listen+0x42>
   189ae:	6803      	ldr	r3, [r0, #0]
   189b0:	b29b      	uxth	r3, r3
   189b2:	2b0b      	cmp	r3, #11
   189b4:	d122      	bne.n	189fc <tls_interface_listen+0x7c>
   189b6:	2324      	movs	r3, #36	; 0x24
   189b8:	4363      	muls	r3, r4
   189ba:	4a11      	ldr	r2, [pc, #68]	; (18a00 <tls_interface_listen+0x80>)
   189bc:	5cd3      	ldrb	r3, [r2, r3]
   189be:	2b01      	cmp	r3, #1
   189c0:	d11c      	bne.n	189fc <tls_interface_listen+0x7c>
   189c2:	2324      	movs	r3, #36	; 0x24
   189c4:	2101      	movs	r1, #1
   189c6:	4363      	muls	r3, r4
   189c8:	4a0d      	ldr	r2, [pc, #52]	; (18a00 <tls_interface_listen+0x80>)
   189ca:	54d1      	strb	r1, [r2, r3]
   189cc:	6803      	ldr	r3, [r0, #0]
   189ce:	2b0b      	cmp	r3, #11
   189d0:	d10a      	bne.n	189e8 <tls_interface_listen+0x68>
   189d2:	4629      	mov	r1, r5
   189d4:	4620      	mov	r0, r4
   189d6:	f7ff f88f 	bl	17af8 <ip_interface_listen>
   189da:	2800      	cmp	r0, #0
   189dc:	dd03      	ble.n	189e6 <tls_interface_listen+0x66>
   189de:	f7fc fccf 	bl	15380 <nrf_modem_os_errno_set>
   189e2:	f04f 30ff 	mov.w	r0, #4294967295
   189e6:	bd38      	pop	{r3, r4, r5, pc}
   189e8:	4601      	mov	r1, r0
   189ea:	6802      	ldr	r2, [r0, #0]
   189ec:	4620      	mov	r0, r4
   189ee:	f7ff fe0b 	bl	18608 <secure_socket_attach_initiate>
   189f2:	2800      	cmp	r0, #0
   189f4:	d0ed      	beq.n	189d2 <tls_interface_listen+0x52>
   189f6:	e7f0      	b.n	189da <tls_interface_listen+0x5a>
   189f8:	2009      	movs	r0, #9
   189fa:	e7f0      	b.n	189de <tls_interface_listen+0x5e>
   189fc:	202d      	movs	r0, #45	; 0x2d
   189fe:	e7ee      	b.n	189de <tls_interface_listen+0x5e>
   18a00:	20016c88 	.word	0x20016c88

00018a04 <tls_interface_accept>:
   18a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18a08:	b086      	sub	sp, #24
   18a0a:	4606      	mov	r6, r0
   18a0c:	f04f 34ff 	mov.w	r4, #4294967295
   18a10:	e9cd 2102 	strd	r2, r1, [sp, #8]
   18a14:	9301      	str	r3, [sp, #4]
   18a16:	f7fe fcfd 	bl	17414 <interface_socket_from_handle_get>
   18a1a:	9405      	str	r4, [sp, #20]
   18a1c:	2800      	cmp	r0, #0
   18a1e:	d048      	beq.n	18ab2 <tls_interface_accept+0xae>
   18a20:	6805      	ldr	r5, [r0, #0]
   18a22:	b2ad      	uxth	r5, r5
   18a24:	2d07      	cmp	r5, #7
   18a26:	d144      	bne.n	18ab2 <tls_interface_accept+0xae>
   18a28:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   18a2c:	6800      	ldr	r0, [r0, #0]
   18a2e:	9903      	ldr	r1, [sp, #12]
   18a30:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
   18a34:	d006      	beq.n	18a44 <tls_interface_accept+0x40>
   18a36:	202d      	movs	r0, #45	; 0x2d
   18a38:	f7fc fca2 	bl	15380 <nrf_modem_os_errno_set>
   18a3c:	4620      	mov	r0, r4
   18a3e:	b006      	add	sp, #24
   18a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18a44:	4630      	mov	r0, r6
   18a46:	f7ff f8a3 	bl	17b90 <ip_interface_accept>
   18a4a:	1e04      	subs	r4, r0, #0
   18a4c:	db2b      	blt.n	18aa6 <tls_interface_accept+0xa2>
   18a4e:	f7fe fce1 	bl	17414 <interface_socket_from_handle_get>
   18a52:	2224      	movs	r2, #36	; 0x24
   18a54:	6803      	ldr	r3, [r0, #0]
   18a56:	fb02 f804 	mul.w	r8, r2, r4
   18a5a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   18a5e:	6003      	str	r3, [r0, #0]
   18a60:	6803      	ldr	r3, [r0, #0]
   18a62:	4f15      	ldr	r7, [pc, #84]	; (18ab8 <tls_interface_accept+0xb4>)
   18a64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   18a68:	4605      	mov	r5, r0
   18a6a:	fb02 7106 	mla	r1, r2, r6, r7
   18a6e:	6003      	str	r3, [r0, #0]
   18a70:	eb07 0008 	add.w	r0, r7, r8
   18a74:	f00a fa7f 	bl	22f76 <memcpy>
   18a78:	2302      	movs	r3, #2
   18a7a:	f807 3008 	strb.w	r3, [r7, r8]
   18a7e:	682b      	ldr	r3, [r5, #0]
   18a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18a84:	0c1b      	lsrs	r3, r3, #16
   18a86:	041b      	lsls	r3, r3, #16
   18a88:	f043 030b 	orr.w	r3, r3, #11
   18a8c:	602b      	str	r3, [r5, #0]
   18a8e:	210c      	movs	r1, #12
   18a90:	4620      	mov	r0, r4
   18a92:	ab05      	add	r3, sp, #20
   18a94:	f008 fecc 	bl	21830 <ip_interface_wait>
   18a98:	4605      	mov	r5, r0
   18a9a:	2800      	cmp	r0, #0
   18a9c:	d0ce      	beq.n	18a3c <tls_interface_accept+0x38>
   18a9e:	4620      	mov	r0, r4
   18aa0:	f7fe fe26 	bl	176f0 <ip_interface_close>
   18aa4:	462c      	mov	r4, r5
   18aa6:	4620      	mov	r0, r4
   18aa8:	f7fc fc6a 	bl	15380 <nrf_modem_os_errno_set>
   18aac:	f04f 34ff 	mov.w	r4, #4294967295
   18ab0:	e7c4      	b.n	18a3c <tls_interface_accept+0x38>
   18ab2:	2409      	movs	r4, #9
   18ab4:	e7f7      	b.n	18aa6 <tls_interface_accept+0xa2>
   18ab6:	bf00      	nop
   18ab8:	20016c88 	.word	0x20016c88

00018abc <tls_interface_setopt>:
   18abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18abe:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   18ac2:	4606      	mov	r6, r0
   18ac4:	4615      	mov	r5, r2
   18ac6:	461f      	mov	r7, r3
   18ac8:	9c08      	ldr	r4, [sp, #32]
   18aca:	d004      	beq.n	18ad6 <tls_interface_setopt+0x1a>
   18acc:	b003      	add	sp, #12
   18ace:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   18ad2:	f7ff b93b 	b.w	17d4c <ip_interface_setopt>
   18ad6:	b923      	cbnz	r3, 18ae2 <tls_interface_setopt+0x26>
   18ad8:	2a05      	cmp	r2, #5
   18ada:	d100      	bne.n	18ade <tls_interface_setopt+0x22>
   18adc:	b10c      	cbz	r4, 18ae2 <tls_interface_setopt+0x26>
   18ade:	200e      	movs	r0, #14
   18ae0:	e077      	b.n	18bd2 <tls_interface_setopt+0x116>
   18ae2:	4630      	mov	r0, r6
   18ae4:	f7fe fc96 	bl	17414 <interface_socket_from_handle_get>
   18ae8:	4601      	mov	r1, r0
   18aea:	2800      	cmp	r0, #0
   18aec:	f000 8087 	beq.w	18bfe <tls_interface_setopt+0x142>
   18af0:	6803      	ldr	r3, [r0, #0]
   18af2:	b29b      	uxth	r3, r3
   18af4:	2b02      	cmp	r3, #2
   18af6:	d007      	beq.n	18b08 <tls_interface_setopt+0x4c>
   18af8:	6803      	ldr	r3, [r0, #0]
   18afa:	b29b      	uxth	r3, r3
   18afc:	2b04      	cmp	r3, #4
   18afe:	d003      	beq.n	18b08 <tls_interface_setopt+0x4c>
   18b00:	6803      	ldr	r3, [r0, #0]
   18b02:	b29b      	uxth	r3, r3
   18b04:	2b05      	cmp	r3, #5
   18b06:	d17a      	bne.n	18bfe <tls_interface_setopt+0x142>
   18b08:	3d01      	subs	r5, #1
   18b0a:	2d08      	cmp	r5, #8
   18b0c:	d879      	bhi.n	18c02 <tls_interface_setopt+0x146>
   18b0e:	e8df f005 	tbb	[pc, r5]
   18b12:	2605      	.short	0x2605
   18b14:	55433818 	.word	0x55433818
   18b18:	6578      	.short	0x6578
   18b1a:	71          	.byte	0x71
   18b1b:	00          	.byte	0x00
   18b1c:	2c04      	cmp	r4, #4
   18b1e:	d174      	bne.n	18c0a <tls_interface_setopt+0x14e>
   18b20:	6838      	ldr	r0, [r7, #0]
   18b22:	b930      	cbnz	r0, 18b32 <tls_interface_setopt+0x76>
   18b24:	2324      	movs	r3, #36	; 0x24
   18b26:	2202      	movs	r2, #2
   18b28:	435e      	muls	r6, r3
   18b2a:	4b39      	ldr	r3, [pc, #228]	; (18c10 <tls_interface_setopt+0x154>)
   18b2c:	559a      	strb	r2, [r3, r6]
   18b2e:	b003      	add	sp, #12
   18b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18b32:	2801      	cmp	r0, #1
   18b34:	d169      	bne.n	18c0a <tls_interface_setopt+0x14e>
   18b36:	2324      	movs	r3, #36	; 0x24
   18b38:	435e      	muls	r6, r3
   18b3a:	4b35      	ldr	r3, [pc, #212]	; (18c10 <tls_interface_setopt+0x154>)
   18b3c:	5598      	strb	r0, [r3, r6]
   18b3e:	2000      	movs	r0, #0
   18b40:	e7f5      	b.n	18b2e <tls_interface_setopt+0x72>
   18b42:	2c01      	cmp	r4, #1
   18b44:	d161      	bne.n	18c0a <tls_interface_setopt+0x14e>
   18b46:	2f00      	cmp	r7, #0
   18b48:	d0c9      	beq.n	18ade <tls_interface_setopt+0x22>
   18b4a:	2024      	movs	r0, #36	; 0x24
   18b4c:	783b      	ldrb	r3, [r7, #0]
   18b4e:	4a30      	ldr	r2, [pc, #192]	; (18c10 <tls_interface_setopt+0x154>)
   18b50:	3b00      	subs	r3, #0
   18b52:	bf18      	it	ne
   18b54:	2301      	movne	r3, #1
   18b56:	fb00 2606 	mla	r6, r0, r6, r2
   18b5a:	7073      	strb	r3, [r6, #1]
   18b5c:	e7ef      	b.n	18b3e <tls_interface_setopt+0x82>
   18b5e:	2c03      	cmp	r4, #3
   18b60:	d953      	bls.n	18c0a <tls_interface_setopt+0x14e>
   18b62:	f014 0503 	ands.w	r5, r4, #3
   18b66:	d150      	bne.n	18c0a <tls_interface_setopt+0x14e>
   18b68:	2324      	movs	r3, #36	; 0x24
   18b6a:	435e      	muls	r6, r3
   18b6c:	4828      	ldr	r0, [pc, #160]	; (18c10 <tls_interface_setopt+0x154>)
   18b6e:	08a2      	lsrs	r2, r4, #2
   18b70:	1983      	adds	r3, r0, r6
   18b72:	70da      	strb	r2, [r3, #3]
   18b74:	4639      	mov	r1, r7
   18b76:	4622      	mov	r2, r4
   18b78:	3604      	adds	r6, #4
   18b7a:	4430      	add	r0, r6
   18b7c:	f00a f9fb 	bl	22f76 <memcpy>
   18b80:	e7dd      	b.n	18b3e <tls_interface_setopt+0x82>
   18b82:	2c04      	cmp	r4, #4
   18b84:	d141      	bne.n	18c0a <tls_interface_setopt+0x14e>
   18b86:	683b      	ldr	r3, [r7, #0]
   18b88:	2b02      	cmp	r3, #2
   18b8a:	d83e      	bhi.n	18c0a <tls_interface_setopt+0x14e>
   18b8c:	2024      	movs	r0, #36	; 0x24
   18b8e:	4a20      	ldr	r2, [pc, #128]	; (18c10 <tls_interface_setopt+0x154>)
   18b90:	fb00 2606 	mla	r6, r0, r6, r2
   18b94:	70b3      	strb	r3, [r6, #2]
   18b96:	e7d2      	b.n	18b3e <tls_interface_setopt+0x82>
   18b98:	4630      	mov	r0, r6
   18b9a:	f7ff fd23 	bl	185e4 <hostname_free>
   18b9e:	2c00      	cmp	r4, #0
   18ba0:	d0cd      	beq.n	18b3e <tls_interface_setopt+0x82>
   18ba2:	4620      	mov	r0, r4
   18ba4:	f7fc fd7a 	bl	1569c <nrf_modem_os_alloc>
   18ba8:	4b1a      	ldr	r3, [pc, #104]	; (18c14 <tls_interface_setopt+0x158>)
   18baa:	f843 0036 	str.w	r0, [r3, r6, lsl #3]
   18bae:	b350      	cbz	r0, 18c06 <tls_interface_setopt+0x14a>
   18bb0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   18bb4:	4622      	mov	r2, r4
   18bb6:	4639      	mov	r1, r7
   18bb8:	6074      	str	r4, [r6, #4]
   18bba:	e7df      	b.n	18b7c <tls_interface_setopt+0xc0>
   18bbc:	f247 0301 	movw	r3, #28673	; 0x7001
   18bc0:	e9cd 7400 	strd	r7, r4, [sp]
   18bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
   18bc8:	4630      	mov	r0, r6
   18bca:	f008 ffd0 	bl	21b6e <ip_interface_socketoption_send>
   18bce:	2800      	cmp	r0, #0
   18bd0:	d0b5      	beq.n	18b3e <tls_interface_setopt+0x82>
   18bd2:	f7fc fbd5 	bl	15380 <nrf_modem_os_errno_set>
   18bd6:	f04f 30ff 	mov.w	r0, #4294967295
   18bda:	e7a8      	b.n	18b2e <tls_interface_setopt+0x72>
   18bdc:	2c04      	cmp	r4, #4
   18bde:	d114      	bne.n	18c0a <tls_interface_setopt+0x14e>
   18be0:	6838      	ldr	r0, [r7, #0]
   18be2:	f7ff fce3 	bl	185ac <secure_socket_dtls_timeout_check>
   18be6:	2800      	cmp	r0, #0
   18be8:	d1f3      	bne.n	18bd2 <tls_interface_setopt+0x116>
   18bea:	f247 0302 	movw	r3, #28674	; 0x7002
   18bee:	e9cd 7400 	strd	r7, r4, [sp]
   18bf2:	e7e7      	b.n	18bc4 <tls_interface_setopt+0x108>
   18bf4:	f247 0303 	movw	r3, #28675	; 0x7003
   18bf8:	e9cd 7400 	strd	r7, r4, [sp]
   18bfc:	e7e2      	b.n	18bc4 <tls_interface_setopt+0x108>
   18bfe:	2009      	movs	r0, #9
   18c00:	e7e7      	b.n	18bd2 <tls_interface_setopt+0x116>
   18c02:	202a      	movs	r0, #42	; 0x2a
   18c04:	e7e5      	b.n	18bd2 <tls_interface_setopt+0x116>
   18c06:	200c      	movs	r0, #12
   18c08:	e7e3      	b.n	18bd2 <tls_interface_setopt+0x116>
   18c0a:	2016      	movs	r0, #22
   18c0c:	e7e1      	b.n	18bd2 <tls_interface_setopt+0x116>
   18c0e:	bf00      	nop
   18c10:	20016c88 	.word	0x20016c88
   18c14:	20016b54 	.word	0x20016b54

00018c18 <tls_interface_getopt>:
   18c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18c1a:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   18c1e:	4606      	mov	r6, r0
   18c20:	4617      	mov	r7, r2
   18c22:	461c      	mov	r4, r3
   18c24:	9d08      	ldr	r5, [sp, #32]
   18c26:	d004      	beq.n	18c32 <tls_interface_getopt+0x1a>
   18c28:	b003      	add	sp, #12
   18c2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   18c2e:	f009 b803 	b.w	21c38 <ip_interface_getopt>
   18c32:	2b00      	cmp	r3, #0
   18c34:	d062      	beq.n	18cfc <tls_interface_getopt+0xe4>
   18c36:	2d00      	cmp	r5, #0
   18c38:	d060      	beq.n	18cfc <tls_interface_getopt+0xe4>
   18c3a:	f7fe fbeb 	bl	17414 <interface_socket_from_handle_get>
   18c3e:	4601      	mov	r1, r0
   18c40:	2800      	cmp	r0, #0
   18c42:	d05d      	beq.n	18d00 <tls_interface_getopt+0xe8>
   18c44:	1e7a      	subs	r2, r7, #1
   18c46:	2a07      	cmp	r2, #7
   18c48:	d85c      	bhi.n	18d04 <tls_interface_getopt+0xec>
   18c4a:	e8df f002 	tbb	[pc, r2]
   18c4e:	1c04      	.short	0x1c04
   18c50:	405b3710 	.word	0x405b3710
   18c54:	4a5b      	.short	0x4a5b
   18c56:	682b      	ldr	r3, [r5, #0]
   18c58:	2b04      	cmp	r3, #4
   18c5a:	d155      	bne.n	18d08 <tls_interface_getopt+0xf0>
   18c5c:	2024      	movs	r0, #36	; 0x24
   18c5e:	4346      	muls	r6, r0
   18c60:	4b2a      	ldr	r3, [pc, #168]	; (18d0c <tls_interface_getopt+0xf4>)
   18c62:	5d9b      	ldrb	r3, [r3, r6]
   18c64:	1e59      	subs	r1, r3, #1
   18c66:	424b      	negs	r3, r1
   18c68:	414b      	adcs	r3, r1
   18c6a:	6023      	str	r3, [r4, #0]
   18c6c:	e008      	b.n	18c80 <tls_interface_getopt+0x68>
   18c6e:	682b      	ldr	r3, [r5, #0]
   18c70:	2b01      	cmp	r3, #1
   18c72:	d149      	bne.n	18d08 <tls_interface_getopt+0xf0>
   18c74:	2024      	movs	r0, #36	; 0x24
   18c76:	4925      	ldr	r1, [pc, #148]	; (18d0c <tls_interface_getopt+0xf4>)
   18c78:	fb00 1606 	mla	r6, r0, r6, r1
   18c7c:	7873      	ldrb	r3, [r6, #1]
   18c7e:	7023      	strb	r3, [r4, #0]
   18c80:	2000      	movs	r0, #0
   18c82:	b003      	add	sp, #12
   18c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18c86:	2224      	movs	r2, #36	; 0x24
   18c88:	4920      	ldr	r1, [pc, #128]	; (18d0c <tls_interface_getopt+0xf4>)
   18c8a:	682b      	ldr	r3, [r5, #0]
   18c8c:	fb02 1206 	mla	r2, r2, r6, r1
   18c90:	78d0      	ldrb	r0, [r2, #3]
   18c92:	079a      	lsls	r2, r3, #30
   18c94:	bf14      	ite	ne
   18c96:	2300      	movne	r3, #0
   18c98:	089b      	lsreq	r3, r3, #2
   18c9a:	4283      	cmp	r3, r0
   18c9c:	bf28      	it	cs
   18c9e:	4603      	movcs	r3, r0
   18ca0:	009a      	lsls	r2, r3, #2
   18ca2:	b143      	cbz	r3, 18cb6 <tls_interface_getopt+0x9e>
   18ca4:	2024      	movs	r0, #36	; 0x24
   18ca6:	fb00 1106 	mla	r1, r0, r6, r1
   18caa:	602a      	str	r2, [r5, #0]
   18cac:	4620      	mov	r0, r4
   18cae:	3104      	adds	r1, #4
   18cb0:	f00a f961 	bl	22f76 <memcpy>
   18cb4:	e7e4      	b.n	18c80 <tls_interface_getopt+0x68>
   18cb6:	bb38      	cbnz	r0, 18d08 <tls_interface_getopt+0xf0>
   18cb8:	6028      	str	r0, [r5, #0]
   18cba:	e7e2      	b.n	18c82 <tls_interface_getopt+0x6a>
   18cbc:	682b      	ldr	r3, [r5, #0]
   18cbe:	2b04      	cmp	r3, #4
   18cc0:	d122      	bne.n	18d08 <tls_interface_getopt+0xf0>
   18cc2:	2024      	movs	r0, #36	; 0x24
   18cc4:	4911      	ldr	r1, [pc, #68]	; (18d0c <tls_interface_getopt+0xf4>)
   18cc6:	fb00 1606 	mla	r6, r0, r6, r1
   18cca:	78b3      	ldrb	r3, [r6, #2]
   18ccc:	e7cd      	b.n	18c6a <tls_interface_getopt+0x52>
   18cce:	f247 0301 	movw	r3, #28673	; 0x7001
   18cd2:	e9cd 4500 	strd	r4, r5, [sp]
   18cd6:	f44f 7280 	mov.w	r2, #256	; 0x100
   18cda:	4630      	mov	r0, r6
   18cdc:	f7fe fe34 	bl	17948 <ip_interface_socketoption_get>
   18ce0:	e7cf      	b.n	18c82 <tls_interface_getopt+0x6a>
   18ce2:	682b      	ldr	r3, [r5, #0]
   18ce4:	2b04      	cmp	r3, #4
   18ce6:	d10f      	bne.n	18d08 <tls_interface_getopt+0xf0>
   18ce8:	6820      	ldr	r0, [r4, #0]
   18cea:	f7ff fc5f 	bl	185ac <secure_socket_dtls_timeout_check>
   18cee:	2800      	cmp	r0, #0
   18cf0:	d1c7      	bne.n	18c82 <tls_interface_getopt+0x6a>
   18cf2:	f247 0302 	movw	r3, #28674	; 0x7002
   18cf6:	e9cd 4500 	strd	r4, r5, [sp]
   18cfa:	e7ec      	b.n	18cd6 <tls_interface_getopt+0xbe>
   18cfc:	200e      	movs	r0, #14
   18cfe:	e7c0      	b.n	18c82 <tls_interface_getopt+0x6a>
   18d00:	2009      	movs	r0, #9
   18d02:	e7be      	b.n	18c82 <tls_interface_getopt+0x6a>
   18d04:	202a      	movs	r0, #42	; 0x2a
   18d06:	e7bc      	b.n	18c82 <tls_interface_getopt+0x6a>
   18d08:	2016      	movs	r0, #22
   18d0a:	e7ba      	b.n	18c82 <tls_interface_getopt+0x6a>
   18d0c:	20016c88 	.word	0x20016c88

00018d10 <tls_rpc_ip_event_handler>:
   18d10:	b570      	push	{r4, r5, r6, lr}
   18d12:	460c      	mov	r4, r1
   18d14:	f248 0181 	movw	r1, #32897	; 0x8081
   18d18:	428b      	cmp	r3, r1
   18d1a:	4606      	mov	r6, r0
   18d1c:	d035      	beq.n	18d8a <tls_rpc_ip_event_handler+0x7a>
   18d1e:	f249 0182 	movw	r1, #36994	; 0x9082
   18d22:	428b      	cmp	r3, r1
   18d24:	d040      	beq.n	18da8 <tls_rpc_ip_event_handler+0x98>
   18d26:	f248 0102 	movw	r1, #32770	; 0x8002
   18d2a:	428b      	cmp	r3, r1
   18d2c:	d161      	bne.n	18df2 <tls_rpc_ip_event_handler+0xe2>
   18d2e:	2c00      	cmp	r4, #0
   18d30:	d05f      	beq.n	18df2 <tls_rpc_ip_event_handler+0xe2>
   18d32:	6963      	ldr	r3, [r4, #20]
   18d34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   18d38:	d002      	beq.n	18d40 <tls_rpc_ip_event_handler+0x30>
   18d3a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   18d3e:	d158      	bne.n	18df2 <tls_rpc_ip_event_handler+0xe2>
   18d40:	6823      	ldr	r3, [r4, #0]
   18d42:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   18d46:	6023      	str	r3, [r4, #0]
   18d48:	6955      	ldr	r5, [r2, #20]
   18d4a:	2d00      	cmp	r5, #0
   18d4c:	d14d      	bne.n	18dea <tls_rpc_ip_event_handler+0xda>
   18d4e:	6823      	ldr	r3, [r4, #0]
   18d50:	0c1b      	lsrs	r3, r3, #16
   18d52:	041b      	lsls	r3, r3, #16
   18d54:	f043 0305 	orr.w	r3, r3, #5
   18d58:	6023      	str	r3, [r4, #0]
   18d5a:	6823      	ldr	r3, [r4, #0]
   18d5c:	00db      	lsls	r3, r3, #3
   18d5e:	d401      	bmi.n	18d64 <tls_rpc_ip_event_handler+0x54>
   18d60:	2000      	movs	r0, #0
   18d62:	e020      	b.n	18da6 <tls_rpc_ip_event_handler+0x96>
   18d64:	2324      	movs	r3, #36	; 0x24
   18d66:	4373      	muls	r3, r6
   18d68:	4a23      	ldr	r2, [pc, #140]	; (18df8 <tls_rpc_ip_event_handler+0xe8>)
   18d6a:	5cd3      	ldrb	r3, [r2, r3]
   18d6c:	2b02      	cmp	r3, #2
   18d6e:	d1f7      	bne.n	18d60 <tls_rpc_ip_event_handler+0x50>
   18d70:	4621      	mov	r1, r4
   18d72:	4630      	mov	r0, r6
   18d74:	f008 ffd2 	bl	21d1c <secure_client_socket>
   18d78:	2800      	cmp	r0, #0
   18d7a:	d0f1      	beq.n	18d60 <tls_rpc_ip_event_handler+0x50>
   18d7c:	2873      	cmp	r0, #115	; 0x73
   18d7e:	d0ef      	beq.n	18d60 <tls_rpc_ip_event_handler+0x50>
   18d80:	6060      	str	r0, [r4, #4]
   18d82:	6823      	ldr	r3, [r4, #0]
   18d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   18d88:	e02d      	b.n	18de6 <tls_rpc_ip_event_handler+0xd6>
   18d8a:	2c00      	cmp	r4, #0
   18d8c:	d0e8      	beq.n	18d60 <tls_rpc_ip_event_handler+0x50>
   18d8e:	6823      	ldr	r3, [r4, #0]
   18d90:	b29b      	uxth	r3, r3
   18d92:	2b0a      	cmp	r3, #10
   18d94:	d1e4      	bne.n	18d60 <tls_rpc_ip_event_handler+0x50>
   18d96:	6950      	ldr	r0, [r2, #20]
   18d98:	bb40      	cbnz	r0, 18dec <tls_rpc_ip_event_handler+0xdc>
   18d9a:	6823      	ldr	r3, [r4, #0]
   18d9c:	0c1b      	lsrs	r3, r3, #16
   18d9e:	041b      	lsls	r3, r3, #16
   18da0:	f043 030b 	orr.w	r3, r3, #11
   18da4:	6023      	str	r3, [r4, #0]
   18da6:	bd70      	pop	{r4, r5, r6, pc}
   18da8:	2c00      	cmp	r4, #0
   18daa:	d0d9      	beq.n	18d60 <tls_rpc_ip_event_handler+0x50>
   18dac:	6823      	ldr	r3, [r4, #0]
   18dae:	b29b      	uxth	r3, r3
   18db0:	2b0b      	cmp	r3, #11
   18db2:	d1d5      	bne.n	18d60 <tls_rpc_ip_event_handler+0x50>
   18db4:	6915      	ldr	r5, [r2, #16]
   18db6:	b9c5      	cbnz	r5, 18dea <tls_rpc_ip_event_handler+0xda>
   18db8:	6823      	ldr	r3, [r4, #0]
   18dba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   18dbe:	6023      	str	r3, [r4, #0]
   18dc0:	f7ff fc10 	bl	185e4 <hostname_free>
   18dc4:	6823      	ldr	r3, [r4, #0]
   18dc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   18dca:	6023      	str	r3, [r4, #0]
   18dcc:	6823      	ldr	r3, [r4, #0]
   18dce:	0c1b      	lsrs	r3, r3, #16
   18dd0:	041b      	lsls	r3, r3, #16
   18dd2:	f043 030c 	orr.w	r3, r3, #12
   18dd6:	6023      	str	r3, [r4, #0]
   18dd8:	6823      	ldr	r3, [r4, #0]
   18dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18dde:	6023      	str	r3, [r4, #0]
   18de0:	6823      	ldr	r3, [r4, #0]
   18de2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   18de6:	6023      	str	r3, [r4, #0]
   18de8:	e7ba      	b.n	18d60 <tls_rpc_ip_event_handler+0x50>
   18dea:	4628      	mov	r0, r5
   18dec:	f7fe fbc6 	bl	1757c <rpc_error_to_nrf_errno>
   18df0:	e7c6      	b.n	18d80 <tls_rpc_ip_event_handler+0x70>
   18df2:	2001      	movs	r0, #1
   18df4:	e7d7      	b.n	18da6 <tls_rpc_ip_event_handler+0x96>
   18df6:	bf00      	nop
   18df8:	20016c88 	.word	0x20016c88

00018dfc <at_interface_init>:
   18dfc:	2201      	movs	r2, #1
   18dfe:	4b02      	ldr	r3, [pc, #8]	; (18e08 <at_interface_init+0xc>)
   18e00:	2000      	movs	r0, #0
   18e02:	701a      	strb	r2, [r3, #0]
   18e04:	4770      	bx	lr
   18e06:	bf00      	nop
   18e08:	20016dcc 	.word	0x20016dcc

00018e0c <at_interface_open>:
   18e0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   18e10:	f04f 0800 	mov.w	r8, #0
   18e14:	4b19      	ldr	r3, [pc, #100]	; (18e7c <at_interface_open+0x70>)
   18e16:	4607      	mov	r7, r0
   18e18:	781b      	ldrb	r3, [r3, #0]
   18e1a:	460d      	mov	r5, r1
   18e1c:	4616      	mov	r6, r2
   18e1e:	f8cd 800c 	str.w	r8, [sp, #12]
   18e22:	b943      	cbnz	r3, 18e36 <at_interface_open+0x2a>
   18e24:	2070      	movs	r0, #112	; 0x70
   18e26:	f7fc faab 	bl	15380 <nrf_modem_os_errno_set>
   18e2a:	f04f 34ff 	mov.w	r4, #4294967295
   18e2e:	4620      	mov	r0, r4
   18e30:	b004      	add	sp, #16
   18e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18e36:	2902      	cmp	r1, #2
   18e38:	d001      	beq.n	18e3e <at_interface_open+0x32>
   18e3a:	2029      	movs	r0, #41	; 0x29
   18e3c:	e7f3      	b.n	18e26 <at_interface_open+0x1a>
   18e3e:	4a10      	ldr	r2, [pc, #64]	; (18e80 <at_interface_open+0x74>)
   18e40:	a803      	add	r0, sp, #12
   18e42:	f7fe fa5d 	bl	17300 <interface_socket_allocate>
   18e46:	9b03      	ldr	r3, [sp, #12]
   18e48:	4604      	mov	r4, r0
   18e4a:	2b00      	cmp	r3, #0
   18e4c:	d0ef      	beq.n	18e2e <at_interface_open+0x22>
   18e4e:	e9c3 7503 	strd	r7, r5, [r3, #12]
   18e52:	615e      	str	r6, [r3, #20]
   18e54:	4642      	mov	r2, r8
   18e56:	9500      	str	r5, [sp, #0]
   18e58:	2305      	movs	r3, #5
   18e5a:	4641      	mov	r1, r8
   18e5c:	f008 ffbc 	bl	21dd8 <send_message>
   18e60:	4605      	mov	r5, r0
   18e62:	b120      	cbz	r0, 18e6e <at_interface_open+0x62>
   18e64:	4620      	mov	r0, r4
   18e66:	f7fe fa71 	bl	1734c <interface_socket_free>
   18e6a:	4628      	mov	r0, r5
   18e6c:	e7db      	b.n	18e26 <at_interface_open+0x1a>
   18e6e:	9a03      	ldr	r2, [sp, #12]
   18e70:	6813      	ldr	r3, [r2, #0]
   18e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   18e76:	6013      	str	r3, [r2, #0]
   18e78:	e7d9      	b.n	18e2e <at_interface_open+0x22>
   18e7a:	bf00      	nop
   18e7c:	20016dcc 	.word	0x20016dcc
   18e80:	00021db3 	.word	0x00021db3

00018e84 <at_cmd_send>:
   18e84:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18e86:	4616      	mov	r6, r2
   18e88:	f06f 0258 	mvn.w	r2, #88	; 0x58
   18e8c:	2400      	movs	r4, #0
   18e8e:	7302      	strb	r2, [r0, #12]
   18e90:	2204      	movs	r2, #4
   18e92:	4d0c      	ldr	r5, [pc, #48]	; (18ec4 <at_cmd_send+0x40>)
   18e94:	7344      	strb	r4, [r0, #13]
   18e96:	7384      	strb	r4, [r0, #14]
   18e98:	73c4      	strb	r4, [r0, #15]
   18e9a:	7202      	strb	r2, [r0, #8]
   18e9c:	7244      	strb	r4, [r0, #9]
   18e9e:	7284      	strb	r4, [r0, #10]
   18ea0:	72c4      	strb	r4, [r0, #11]
   18ea2:	b289      	uxth	r1, r1
   18ea4:	702c      	strb	r4, [r5, #0]
   18ea6:	f008 fa9e 	bl	213e6 <rpc_at_client_request_send>
   18eaa:	f04f 33ff 	mov.w	r3, #4294967295
   18eae:	9301      	str	r3, [sp, #4]
   18eb0:	782b      	ldrb	r3, [r5, #0]
   18eb2:	42b3      	cmp	r3, r6
   18eb4:	d101      	bne.n	18eba <at_cmd_send+0x36>
   18eb6:	b002      	add	sp, #8
   18eb8:	bd70      	pop	{r4, r5, r6, pc}
   18eba:	a901      	add	r1, sp, #4
   18ebc:	2000      	movs	r0, #0
   18ebe:	f007 f9ba 	bl	20236 <nrf_modem_os_timedwait>
   18ec2:	e7f5      	b.n	18eb0 <at_cmd_send+0x2c>
   18ec4:	20016dcd 	.word	0x20016dcd

00018ec8 <nrf_modem_at_init>:
   18ec8:	2201      	movs	r2, #1
   18eca:	b513      	push	{r0, r1, r4, lr}
   18ecc:	4611      	mov	r1, r2
   18ece:	480a      	ldr	r0, [pc, #40]	; (18ef8 <nrf_modem_at_init+0x30>)
   18ed0:	f7fc fba8 	bl	15624 <nrf_modem_os_sem_init>
   18ed4:	2100      	movs	r1, #0
   18ed6:	a801      	add	r0, sp, #4
   18ed8:	f008 fa76 	bl	213c8 <rpc_at_client_request_alloc>
   18edc:	4604      	mov	r4, r0
   18ede:	b938      	cbnz	r0, 18ef0 <nrf_modem_at_init+0x28>
   18ee0:	9801      	ldr	r0, [sp, #4]
   18ee2:	2201      	movs	r2, #1
   18ee4:	2105      	movs	r1, #5
   18ee6:	f7ff ffcd 	bl	18e84 <at_cmd_send>
   18eea:	4620      	mov	r0, r4
   18eec:	b002      	add	sp, #8
   18eee:	bd10      	pop	{r4, pc}
   18ef0:	f06f 000b 	mvn.w	r0, #11
   18ef4:	e7fa      	b.n	18eec <nrf_modem_at_init+0x24>
   18ef6:	bf00      	nop
   18ef8:	20016b94 	.word	0x20016b94

00018efc <rpc_at2_event_handler>:
   18efc:	b570      	push	{r4, r5, r6, lr}
   18efe:	68c3      	ldr	r3, [r0, #12]
   18f00:	4604      	mov	r4, r0
   18f02:	2ba7      	cmp	r3, #167	; 0xa7
   18f04:	d128      	bne.n	18f58 <rpc_at2_event_handler+0x5c>
   18f06:	2903      	cmp	r1, #3
   18f08:	d008      	beq.n	18f1c <rpc_at2_event_handler+0x20>
   18f0a:	2904      	cmp	r1, #4
   18f0c:	d01b      	beq.n	18f46 <rpc_at2_event_handler+0x4a>
   18f0e:	2902      	cmp	r1, #2
   18f10:	d102      	bne.n	18f18 <rpc_at2_event_handler+0x1c>
   18f12:	2201      	movs	r2, #1
   18f14:	4b11      	ldr	r3, [pc, #68]	; (18f5c <rpc_at2_event_handler+0x60>)
   18f16:	701a      	strb	r2, [r3, #0]
   18f18:	2000      	movs	r0, #0
   18f1a:	e00d      	b.n	18f38 <rpc_at2_event_handler+0x3c>
   18f1c:	4e10      	ldr	r6, [pc, #64]	; (18f60 <rpc_at2_event_handler+0x64>)
   18f1e:	4d11      	ldr	r5, [pc, #68]	; (18f64 <rpc_at2_event_handler+0x68>)
   18f20:	6833      	ldr	r3, [r6, #0]
   18f22:	b153      	cbz	r3, 18f3a <rpc_at2_event_handler+0x3e>
   18f24:	2400      	movs	r4, #0
   18f26:	682a      	ldr	r2, [r5, #0]
   18f28:	6810      	ldr	r0, [r2, #0]
   18f2a:	4798      	blx	r3
   18f2c:	682b      	ldr	r3, [r5, #0]
   18f2e:	6034      	str	r4, [r6, #0]
   18f30:	6818      	ldr	r0, [r3, #0]
   18f32:	f008 fa62 	bl	213fa <rpc_at_client_data_free>
   18f36:	b2e0      	uxtb	r0, r4
   18f38:	bd70      	pop	{r4, r5, r6, pc}
   18f3a:	2202      	movs	r2, #2
   18f3c:	4b07      	ldr	r3, [pc, #28]	; (18f5c <rpc_at2_event_handler+0x60>)
   18f3e:	2401      	movs	r4, #1
   18f40:	6028      	str	r0, [r5, #0]
   18f42:	701a      	strb	r2, [r3, #0]
   18f44:	e7f7      	b.n	18f36 <rpc_at2_event_handler+0x3a>
   18f46:	4b08      	ldr	r3, [pc, #32]	; (18f68 <rpc_at2_event_handler+0x6c>)
   18f48:	681b      	ldr	r3, [r3, #0]
   18f4a:	b10b      	cbz	r3, 18f50 <rpc_at2_event_handler+0x54>
   18f4c:	6800      	ldr	r0, [r0, #0]
   18f4e:	4798      	blx	r3
   18f50:	6820      	ldr	r0, [r4, #0]
   18f52:	f008 fa52 	bl	213fa <rpc_at_client_data_free>
   18f56:	e7df      	b.n	18f18 <rpc_at2_event_handler+0x1c>
   18f58:	2002      	movs	r0, #2
   18f5a:	e7ed      	b.n	18f38 <rpc_at2_event_handler+0x3c>
   18f5c:	20016dcd 	.word	0x20016dcd
   18f60:	20016ba0 	.word	0x20016ba0
   18f64:	20016b9c 	.word	0x20016b9c
   18f68:	20016b98 	.word	0x20016b98

00018f6c <rpc_dfu_message_send>:
   18f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18f6e:	4606      	mov	r6, r0
   18f70:	460f      	mov	r7, r1
   18f72:	4668      	mov	r0, sp
   18f74:	4611      	mov	r1, r2
   18f76:	4615      	mov	r5, r2
   18f78:	f008 fa69 	bl	2144e <rpc_dfu_client_request_alloc>
   18f7c:	4604      	mov	r4, r0
   18f7e:	b138      	cbz	r0, 18f90 <rpc_dfu_message_send+0x24>
   18f80:	200c      	movs	r0, #12
   18f82:	f7fc f9fd 	bl	15380 <nrf_modem_os_errno_set>
   18f86:	f04f 34ff 	mov.w	r4, #4294967295
   18f8a:	4620      	mov	r0, r4
   18f8c:	b003      	add	sp, #12
   18f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18f90:	b12d      	cbz	r5, 18f9e <rpc_dfu_message_send+0x32>
   18f92:	9b00      	ldr	r3, [sp, #0]
   18f94:	462a      	mov	r2, r5
   18f96:	4639      	mov	r1, r7
   18f98:	6818      	ldr	r0, [r3, #0]
   18f9a:	f009 ffec 	bl	22f76 <memcpy>
   18f9e:	4a17      	ldr	r2, [pc, #92]	; (18ffc <rpc_dfu_message_send+0x90>)
   18fa0:	9800      	ldr	r0, [sp, #0]
   18fa2:	8811      	ldrh	r1, [r2, #0]
   18fa4:	2e03      	cmp	r6, #3
   18fa6:	f101 0101 	add.w	r1, r1, #1
   18faa:	b289      	uxth	r1, r1
   18fac:	8011      	strh	r1, [r2, #0]
   18fae:	f04f 0200 	mov.w	r2, #0
   18fb2:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   18fb6:	60c1      	str	r1, [r0, #12]
   18fb8:	bf0a      	itet	eq
   18fba:	4911      	ldreq	r1, [pc, #68]	; (19000 <rpc_dfu_message_send+0x94>)
   18fbc:	2104      	movne	r1, #4
   18fbe:	6809      	ldreq	r1, [r1, #0]
   18fc0:	7242      	strb	r2, [r0, #9]
   18fc2:	bf04      	itt	eq
   18fc4:	6101      	streq	r1, [r0, #16]
   18fc6:	2108      	moveq	r1, #8
   18fc8:	7282      	strb	r2, [r0, #10]
   18fca:	72c2      	strb	r2, [r0, #11]
   18fcc:	2200      	movs	r2, #0
   18fce:	6045      	str	r5, [r0, #4]
   18fd0:	4d0c      	ldr	r5, [pc, #48]	; (19004 <rpc_dfu_message_send+0x98>)
   18fd2:	7201      	strb	r1, [r0, #8]
   18fd4:	4631      	mov	r1, r6
   18fd6:	602a      	str	r2, [r5, #0]
   18fd8:	f008 fa48 	bl	2146c <rpc_dfu_client_request_send>
   18fdc:	f04f 33ff 	mov.w	r3, #4294967295
   18fe0:	4e09      	ldr	r6, [pc, #36]	; (19008 <rpc_dfu_message_send+0x9c>)
   18fe2:	9301      	str	r3, [sp, #4]
   18fe4:	682b      	ldr	r3, [r5, #0]
   18fe6:	2b00      	cmp	r3, #0
   18fe8:	d1cf      	bne.n	18f8a <rpc_dfu_message_send+0x1e>
   18fea:	4630      	mov	r0, r6
   18fec:	a901      	add	r1, sp, #4
   18fee:	f007 f922 	bl	20236 <nrf_modem_os_timedwait>
   18ff2:	2800      	cmp	r0, #0
   18ff4:	d0f6      	beq.n	18fe4 <rpc_dfu_message_send+0x78>
   18ff6:	203c      	movs	r0, #60	; 0x3c
   18ff8:	e7c3      	b.n	18f82 <rpc_dfu_message_send+0x16>
   18ffa:	bf00      	nop
   18ffc:	20016c76 	.word	0x20016c76
   19000:	20016bac 	.word	0x20016bac
   19004:	20016bb0 	.word	0x20016bb0
   19008:	20016ba4 	.word	0x20016ba4

0001900c <rpc_dfu_event_handler>:
   1900c:	b508      	push	{r3, lr}
   1900e:	4b08      	ldr	r3, [pc, #32]	; (19030 <rpc_dfu_event_handler+0x24>)
   19010:	68c2      	ldr	r2, [r0, #12]
   19012:	881b      	ldrh	r3, [r3, #0]
   19014:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   19018:	d103      	bne.n	19022 <rpc_dfu_event_handler+0x16>
   1901a:	4b06      	ldr	r3, [pc, #24]	; (19034 <rpc_dfu_event_handler+0x28>)
   1901c:	6018      	str	r0, [r3, #0]
   1901e:	2001      	movs	r0, #1
   19020:	bd08      	pop	{r3, pc}
   19022:	6800      	ldr	r0, [r0, #0]
   19024:	2800      	cmp	r0, #0
   19026:	d0fb      	beq.n	19020 <rpc_dfu_event_handler+0x14>
   19028:	f008 fa2d 	bl	21486 <rpc_dfu_client_data_free>
   1902c:	2000      	movs	r0, #0
   1902e:	e7f7      	b.n	19020 <rpc_dfu_event_handler+0x14>
   19030:	20016c76 	.word	0x20016c76
   19034:	20016bb0 	.word	0x20016bb0

00019038 <mfu_interface_init>:
   19038:	2000      	movs	r0, #0
   1903a:	2201      	movs	r2, #1
   1903c:	4b04      	ldr	r3, [pc, #16]	; (19050 <mfu_interface_init+0x18>)
   1903e:	8018      	strh	r0, [r3, #0]
   19040:	4b04      	ldr	r3, [pc, #16]	; (19054 <mfu_interface_init+0x1c>)
   19042:	6018      	str	r0, [r3, #0]
   19044:	4b04      	ldr	r3, [pc, #16]	; (19058 <mfu_interface_init+0x20>)
   19046:	6018      	str	r0, [r3, #0]
   19048:	4b04      	ldr	r3, [pc, #16]	; (1905c <mfu_interface_init+0x24>)
   1904a:	601a      	str	r2, [r3, #0]
   1904c:	4770      	bx	lr
   1904e:	bf00      	nop
   19050:	20016c76 	.word	0x20016c76
   19054:	20016bb0 	.word	0x20016bb0
   19058:	20016bac 	.word	0x20016bac
   1905c:	20016ba4 	.word	0x20016ba4

00019060 <mfu_interface_open>:
   19060:	b508      	push	{r3, lr}
   19062:	4b07      	ldr	r3, [pc, #28]	; (19080 <mfu_interface_open+0x20>)
   19064:	681a      	ldr	r2, [r3, #0]
   19066:	2a01      	cmp	r2, #1
   19068:	d005      	beq.n	19076 <mfu_interface_open+0x16>
   1906a:	2001      	movs	r0, #1
   1906c:	f7fc f988 	bl	15380 <nrf_modem_os_errno_set>
   19070:	f04f 30ff 	mov.w	r0, #4294967295
   19074:	bd08      	pop	{r3, pc}
   19076:	2202      	movs	r2, #2
   19078:	4802      	ldr	r0, [pc, #8]	; (19084 <mfu_interface_open+0x24>)
   1907a:	601a      	str	r2, [r3, #0]
   1907c:	e7fa      	b.n	19074 <mfu_interface_open+0x14>
   1907e:	bf00      	nop
   19080:	20016ba4 	.word	0x20016ba4
   19084:	49765432 	.word	0x49765432

00019088 <mfu_interface_close>:
   19088:	b538      	push	{r3, r4, r5, lr}
   1908a:	4c11      	ldr	r4, [pc, #68]	; (190d0 <mfu_interface_close+0x48>)
   1908c:	6822      	ldr	r2, [r4, #0]
   1908e:	1e91      	subs	r1, r2, #2
   19090:	2901      	cmp	r1, #1
   19092:	d905      	bls.n	190a0 <mfu_interface_close+0x18>
   19094:	2001      	movs	r0, #1
   19096:	f7fc f973 	bl	15380 <nrf_modem_os_errno_set>
   1909a:	f04f 30ff 	mov.w	r0, #4294967295
   1909e:	e015      	b.n	190cc <mfu_interface_close+0x44>
   190a0:	2a03      	cmp	r2, #3
   190a2:	d110      	bne.n	190c6 <mfu_interface_close+0x3e>
   190a4:	2200      	movs	r2, #0
   190a6:	2006      	movs	r0, #6
   190a8:	4611      	mov	r1, r2
   190aa:	f7ff ff5f 	bl	18f6c <rpc_dfu_message_send>
   190ae:	2800      	cmp	r0, #0
   190b0:	d1f3      	bne.n	1909a <mfu_interface_close+0x12>
   190b2:	4b08      	ldr	r3, [pc, #32]	; (190d4 <mfu_interface_close+0x4c>)
   190b4:	6818      	ldr	r0, [r3, #0]
   190b6:	6905      	ldr	r5, [r0, #16]
   190b8:	f008 f9e2 	bl	21480 <rpc_dfu_client_message_free>
   190bc:	b11d      	cbz	r5, 190c6 <mfu_interface_close+0x3e>
   190be:	4b06      	ldr	r3, [pc, #24]	; (190d8 <mfu_interface_close+0x50>)
   190c0:	2008      	movs	r0, #8
   190c2:	601d      	str	r5, [r3, #0]
   190c4:	e7e7      	b.n	19096 <mfu_interface_close+0xe>
   190c6:	2301      	movs	r3, #1
   190c8:	2000      	movs	r0, #0
   190ca:	6023      	str	r3, [r4, #0]
   190cc:	bd38      	pop	{r3, r4, r5, pc}
   190ce:	bf00      	nop
   190d0:	20016ba4 	.word	0x20016ba4
   190d4:	20016bb0 	.word	0x20016bb0
   190d8:	20016ba8 	.word	0x20016ba8

000190dc <mfu_interface_sendto>:
   190dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   190de:	4e1f      	ldr	r6, [pc, #124]	; (1915c <mfu_interface_sendto+0x80>)
   190e0:	460d      	mov	r5, r1
   190e2:	6831      	ldr	r1, [r6, #0]
   190e4:	4614      	mov	r4, r2
   190e6:	1e88      	subs	r0, r1, #2
   190e8:	2801      	cmp	r0, #1
   190ea:	9a06      	ldr	r2, [sp, #24]
   190ec:	d903      	bls.n	190f6 <mfu_interface_sendto+0x1a>
   190ee:	2001      	movs	r0, #1
   190f0:	f7fc f946 	bl	15380 <nrf_modem_os_errno_set>
   190f4:	e010      	b.n	19118 <mfu_interface_sendto+0x3c>
   190f6:	b105      	cbz	r5, 190fa <mfu_interface_sendto+0x1e>
   190f8:	b90c      	cbnz	r4, 190fe <mfu_interface_sendto+0x22>
   190fa:	2016      	movs	r0, #22
   190fc:	e7f8      	b.n	190f0 <mfu_interface_sendto+0x14>
   190fe:	b10b      	cbz	r3, 19104 <mfu_interface_sendto+0x28>
   19100:	202d      	movs	r0, #45	; 0x2d
   19102:	e7f5      	b.n	190f0 <mfu_interface_sendto+0x14>
   19104:	b10a      	cbz	r2, 1910a <mfu_interface_sendto+0x2e>
   19106:	2038      	movs	r0, #56	; 0x38
   19108:	e7f2      	b.n	190f0 <mfu_interface_sendto+0x14>
   1910a:	2902      	cmp	r1, #2
   1910c:	d114      	bne.n	19138 <mfu_interface_sendto+0x5c>
   1910e:	4611      	mov	r1, r2
   19110:	2003      	movs	r0, #3
   19112:	f7ff ff2b 	bl	18f6c <rpc_dfu_message_send>
   19116:	b118      	cbz	r0, 19120 <mfu_interface_sendto+0x44>
   19118:	f04f 34ff 	mov.w	r4, #4294967295
   1911c:	4620      	mov	r0, r4
   1911e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19120:	4b0f      	ldr	r3, [pc, #60]	; (19160 <mfu_interface_sendto+0x84>)
   19122:	6818      	ldr	r0, [r3, #0]
   19124:	6907      	ldr	r7, [r0, #16]
   19126:	f008 f9ab 	bl	21480 <rpc_dfu_client_message_free>
   1912a:	b11f      	cbz	r7, 19134 <mfu_interface_sendto+0x58>
   1912c:	4b0d      	ldr	r3, [pc, #52]	; (19164 <mfu_interface_sendto+0x88>)
   1912e:	601f      	str	r7, [r3, #0]
   19130:	2008      	movs	r0, #8
   19132:	e7dd      	b.n	190f0 <mfu_interface_sendto+0x14>
   19134:	2303      	movs	r3, #3
   19136:	6033      	str	r3, [r6, #0]
   19138:	4622      	mov	r2, r4
   1913a:	4629      	mov	r1, r5
   1913c:	2004      	movs	r0, #4
   1913e:	f7ff ff15 	bl	18f6c <rpc_dfu_message_send>
   19142:	2800      	cmp	r0, #0
   19144:	d1e8      	bne.n	19118 <mfu_interface_sendto+0x3c>
   19146:	4b06      	ldr	r3, [pc, #24]	; (19160 <mfu_interface_sendto+0x84>)
   19148:	6818      	ldr	r0, [r3, #0]
   1914a:	6905      	ldr	r5, [r0, #16]
   1914c:	f008 f998 	bl	21480 <rpc_dfu_client_message_free>
   19150:	2d00      	cmp	r5, #0
   19152:	d0e3      	beq.n	1911c <mfu_interface_sendto+0x40>
   19154:	4b03      	ldr	r3, [pc, #12]	; (19164 <mfu_interface_sendto+0x88>)
   19156:	601d      	str	r5, [r3, #0]
   19158:	e7ea      	b.n	19130 <mfu_interface_sendto+0x54>
   1915a:	bf00      	nop
   1915c:	20016ba4 	.word	0x20016ba4
   19160:	20016bb0 	.word	0x20016bb0
   19164:	20016ba8 	.word	0x20016ba8

00019168 <mfu_interface_setopt>:
   19168:	481d      	ldr	r0, [pc, #116]	; (191e0 <mfu_interface_setopt+0x78>)
   1916a:	b510      	push	{r4, lr}
   1916c:	6800      	ldr	r0, [r0, #0]
   1916e:	3802      	subs	r0, #2
   19170:	2801      	cmp	r0, #1
   19172:	d905      	bls.n	19180 <mfu_interface_setopt+0x18>
   19174:	2001      	movs	r0, #1
   19176:	f7fc f903 	bl	15380 <nrf_modem_os_errno_set>
   1917a:	f04f 30ff 	mov.w	r0, #4294967295
   1917e:	e026      	b.n	191ce <mfu_interface_setopt+0x66>
   19180:	f240 2003 	movw	r0, #515	; 0x203
   19184:	4281      	cmp	r1, r0
   19186:	d001      	beq.n	1918c <mfu_interface_setopt+0x24>
   19188:	2016      	movs	r0, #22
   1918a:	e7f4      	b.n	19176 <mfu_interface_setopt+0xe>
   1918c:	3a04      	subs	r2, #4
   1918e:	2a03      	cmp	r2, #3
   19190:	d81e      	bhi.n	191d0 <mfu_interface_setopt+0x68>
   19192:	e8df f002 	tbb	[pc, r2]
   19196:	021f      	.short	0x021f
   19198:	1321      	.short	0x1321
   1919a:	2007      	movs	r0, #7
   1919c:	2200      	movs	r2, #0
   1919e:	4611      	mov	r1, r2
   191a0:	f7ff fee4 	bl	18f6c <rpc_dfu_message_send>
   191a4:	2800      	cmp	r0, #0
   191a6:	d1e8      	bne.n	1917a <mfu_interface_setopt+0x12>
   191a8:	4b0e      	ldr	r3, [pc, #56]	; (191e4 <mfu_interface_setopt+0x7c>)
   191aa:	6818      	ldr	r0, [r3, #0]
   191ac:	6904      	ldr	r4, [r0, #16]
   191ae:	f008 f967 	bl	21480 <rpc_dfu_client_message_free>
   191b2:	b19c      	cbz	r4, 191dc <mfu_interface_setopt+0x74>
   191b4:	4b0c      	ldr	r3, [pc, #48]	; (191e8 <mfu_interface_setopt+0x80>)
   191b6:	2008      	movs	r0, #8
   191b8:	601c      	str	r4, [r3, #0]
   191ba:	e7dc      	b.n	19176 <mfu_interface_setopt+0xe>
   191bc:	2b00      	cmp	r3, #0
   191be:	d0e3      	beq.n	19188 <mfu_interface_setopt+0x20>
   191c0:	9a02      	ldr	r2, [sp, #8]
   191c2:	2a04      	cmp	r2, #4
   191c4:	d1e0      	bne.n	19188 <mfu_interface_setopt+0x20>
   191c6:	2000      	movs	r0, #0
   191c8:	681a      	ldr	r2, [r3, #0]
   191ca:	4b08      	ldr	r3, [pc, #32]	; (191ec <mfu_interface_setopt+0x84>)
   191cc:	601a      	str	r2, [r3, #0]
   191ce:	bd10      	pop	{r4, pc}
   191d0:	202a      	movs	r0, #42	; 0x2a
   191d2:	e7d0      	b.n	19176 <mfu_interface_setopt+0xe>
   191d4:	2005      	movs	r0, #5
   191d6:	e7e1      	b.n	1919c <mfu_interface_setopt+0x34>
   191d8:	2008      	movs	r0, #8
   191da:	e7df      	b.n	1919c <mfu_interface_setopt+0x34>
   191dc:	4620      	mov	r0, r4
   191de:	e7f6      	b.n	191ce <mfu_interface_setopt+0x66>
   191e0:	20016ba4 	.word	0x20016ba4
   191e4:	20016bb0 	.word	0x20016bb0
   191e8:	20016ba8 	.word	0x20016ba8
   191ec:	20016bac 	.word	0x20016bac

000191f0 <mfu_interface_getopt>:
   191f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   191f2:	461e      	mov	r6, r3
   191f4:	f240 2303 	movw	r3, #515	; 0x203
   191f8:	4299      	cmp	r1, r3
   191fa:	9d06      	ldr	r5, [sp, #24]
   191fc:	d101      	bne.n	19202 <mfu_interface_getopt+0x12>
   191fe:	b106      	cbz	r6, 19202 <mfu_interface_getopt+0x12>
   19200:	b92d      	cbnz	r5, 1920e <mfu_interface_getopt+0x1e>
   19202:	2016      	movs	r0, #22
   19204:	f7fc f8bc 	bl	15380 <nrf_modem_os_errno_set>
   19208:	f04f 30ff 	mov.w	r0, #4294967295
   1920c:	e019      	b.n	19242 <mfu_interface_getopt+0x52>
   1920e:	4b22      	ldr	r3, [pc, #136]	; (19298 <mfu_interface_getopt+0xa8>)
   19210:	681b      	ldr	r3, [r3, #0]
   19212:	3b02      	subs	r3, #2
   19214:	2b01      	cmp	r3, #1
   19216:	d901      	bls.n	1921c <mfu_interface_getopt+0x2c>
   19218:	2001      	movs	r0, #1
   1921a:	e7f3      	b.n	19204 <mfu_interface_getopt+0x14>
   1921c:	2a07      	cmp	r2, #7
   1921e:	d02b      	beq.n	19278 <mfu_interface_getopt+0x88>
   19220:	dc05      	bgt.n	1922e <mfu_interface_getopt+0x3e>
   19222:	2a01      	cmp	r2, #1
   19224:	d00e      	beq.n	19244 <mfu_interface_getopt+0x54>
   19226:	2a02      	cmp	r2, #2
   19228:	d023      	beq.n	19272 <mfu_interface_getopt+0x82>
   1922a:	202a      	movs	r0, #42	; 0x2a
   1922c:	e7ea      	b.n	19204 <mfu_interface_getopt+0x14>
   1922e:	2a14      	cmp	r2, #20
   19230:	d1fb      	bne.n	1922a <mfu_interface_getopt+0x3a>
   19232:	682b      	ldr	r3, [r5, #0]
   19234:	2b04      	cmp	r3, #4
   19236:	d1e4      	bne.n	19202 <mfu_interface_getopt+0x12>
   19238:	2000      	movs	r0, #0
   1923a:	4b18      	ldr	r3, [pc, #96]	; (1929c <mfu_interface_getopt+0xac>)
   1923c:	681a      	ldr	r2, [r3, #0]
   1923e:	6018      	str	r0, [r3, #0]
   19240:	6032      	str	r2, [r6, #0]
   19242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19244:	682b      	ldr	r3, [r5, #0]
   19246:	2b24      	cmp	r3, #36	; 0x24
   19248:	d1db      	bne.n	19202 <mfu_interface_getopt+0x12>
   1924a:	4610      	mov	r0, r2
   1924c:	2200      	movs	r2, #0
   1924e:	4611      	mov	r1, r2
   19250:	f7ff fe8c 	bl	18f6c <rpc_dfu_message_send>
   19254:	2800      	cmp	r0, #0
   19256:	d1d7      	bne.n	19208 <mfu_interface_getopt+0x18>
   19258:	4f11      	ldr	r7, [pc, #68]	; (192a0 <mfu_interface_getopt+0xb0>)
   1925a:	6839      	ldr	r1, [r7, #0]
   1925c:	690c      	ldr	r4, [r1, #16]
   1925e:	b184      	cbz	r4, 19282 <mfu_interface_getopt+0x92>
   19260:	4b0e      	ldr	r3, [pc, #56]	; (1929c <mfu_interface_getopt+0xac>)
   19262:	2008      	movs	r0, #8
   19264:	601c      	str	r4, [r3, #0]
   19266:	f7fc f88b 	bl	15380 <nrf_modem_os_errno_set>
   1926a:	6838      	ldr	r0, [r7, #0]
   1926c:	f008 f908 	bl	21480 <rpc_dfu_client_message_free>
   19270:	e7ca      	b.n	19208 <mfu_interface_getopt+0x18>
   19272:	682b      	ldr	r3, [r5, #0]
   19274:	2b04      	cmp	r3, #4
   19276:	e7e7      	b.n	19248 <mfu_interface_getopt+0x58>
   19278:	682b      	ldr	r3, [r5, #0]
   1927a:	2b04      	cmp	r3, #4
   1927c:	d1c1      	bne.n	19202 <mfu_interface_getopt+0x12>
   1927e:	2009      	movs	r0, #9
   19280:	e7e4      	b.n	1924c <mfu_interface_getopt+0x5c>
   19282:	682a      	ldr	r2, [r5, #0]
   19284:	3114      	adds	r1, #20
   19286:	4630      	mov	r0, r6
   19288:	f009 fe75 	bl	22f76 <memcpy>
   1928c:	6838      	ldr	r0, [r7, #0]
   1928e:	f008 f8f7 	bl	21480 <rpc_dfu_client_message_free>
   19292:	4620      	mov	r0, r4
   19294:	e7d5      	b.n	19242 <mfu_interface_getopt+0x52>
   19296:	bf00      	nop
   19298:	20016ba4 	.word	0x20016ba4
   1929c:	20016ba8 	.word	0x20016ba8
   192a0:	20016bb0 	.word	0x20016bb0

000192a4 <rpc_dfu2_event_handler>:
   192a4:	b510      	push	{r4, lr}
   192a6:	4b08      	ldr	r3, [pc, #32]	; (192c8 <rpc_dfu2_event_handler+0x24>)
   192a8:	68c2      	ldr	r2, [r0, #12]
   192aa:	429a      	cmp	r2, r3
   192ac:	d10a      	bne.n	192c4 <rpc_dfu2_event_handler+0x20>
   192ae:	2401      	movs	r4, #1
   192b0:	4b06      	ldr	r3, [pc, #24]	; (192cc <rpc_dfu2_event_handler+0x28>)
   192b2:	701c      	strb	r4, [r3, #0]
   192b4:	4b06      	ldr	r3, [pc, #24]	; (192d0 <rpc_dfu2_event_handler+0x2c>)
   192b6:	6018      	str	r0, [r3, #0]
   192b8:	6800      	ldr	r0, [r0, #0]
   192ba:	b108      	cbz	r0, 192c0 <rpc_dfu2_event_handler+0x1c>
   192bc:	f008 f8e3 	bl	21486 <rpc_dfu_client_data_free>
   192c0:	4620      	mov	r0, r4
   192c2:	e000      	b.n	192c6 <rpc_dfu2_event_handler+0x22>
   192c4:	2002      	movs	r0, #2
   192c6:	bd10      	pop	{r4, pc}
   192c8:	15abe11a 	.word	0x15abe11a
   192cc:	20016dce 	.word	0x20016dce
   192d0:	20016bb4 	.word	0x20016bb4

000192d4 <rpc_gnss_event_handler>:
   192d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   192d6:	4b5b      	ldr	r3, [pc, #364]	; (19444 <rpc_gnss_event_handler+0x170>)
   192d8:	4605      	mov	r5, r0
   192da:	6800      	ldr	r0, [r0, #0]
   192dc:	881b      	ldrh	r3, [r3, #0]
   192de:	6802      	ldr	r2, [r0, #0]
   192e0:	460c      	mov	r4, r1
   192e2:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   192e6:	b085      	sub	sp, #20
   192e8:	d134      	bne.n	19354 <rpc_gnss_event_handler+0x80>
   192ea:	4b57      	ldr	r3, [pc, #348]	; (19448 <rpc_gnss_event_handler+0x174>)
   192ec:	4e57      	ldr	r6, [pc, #348]	; (1944c <rpc_gnss_event_handler+0x178>)
   192ee:	681a      	ldr	r2, [r3, #0]
   192f0:	6030      	str	r0, [r6, #0]
   192f2:	01d2      	lsls	r2, r2, #7
   192f4:	d50d      	bpl.n	19312 <rpc_gnss_event_handler+0x3e>
   192f6:	f242 1202 	movw	r2, #8450	; 0x2102
   192fa:	4291      	cmp	r1, r2
   192fc:	d109      	bne.n	19312 <rpc_gnss_event_handler+0x3e>
   192fe:	6842      	ldr	r2, [r0, #4]
   19300:	b91a      	cbnz	r2, 1930a <rpc_gnss_event_handler+0x36>
   19302:	681a      	ldr	r2, [r3, #0]
   19304:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   19308:	601a      	str	r2, [r3, #0]
   1930a:	681a      	ldr	r2, [r3, #0]
   1930c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   19310:	601a      	str	r2, [r3, #0]
   19312:	681a      	ldr	r2, [r3, #0]
   19314:	0257      	lsls	r7, r2, #9
   19316:	d50d      	bpl.n	19334 <rpc_gnss_event_handler+0x60>
   19318:	f242 1203 	movw	r2, #8451	; 0x2103
   1931c:	4294      	cmp	r4, r2
   1931e:	d109      	bne.n	19334 <rpc_gnss_event_handler+0x60>
   19320:	6842      	ldr	r2, [r0, #4]
   19322:	b91a      	cbnz	r2, 1932c <rpc_gnss_event_handler+0x58>
   19324:	681a      	ldr	r2, [r3, #0]
   19326:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   1932a:	601a      	str	r2, [r3, #0]
   1932c:	681a      	ldr	r2, [r3, #0]
   1932e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
   19332:	e04a      	b.n	193ca <rpc_gnss_event_handler+0xf6>
   19334:	f242 0201 	movw	r2, #8193	; 0x2001
   19338:	4294      	cmp	r4, r2
   1933a:	d03e      	beq.n	193ba <rpc_gnss_event_handler+0xe6>
   1933c:	f242 0204 	movw	r2, #8196	; 0x2004
   19340:	4294      	cmp	r4, r2
   19342:	d044      	beq.n	193ce <rpc_gnss_event_handler+0xfa>
   19344:	f242 0205 	movw	r2, #8197	; 0x2005
   19348:	4294      	cmp	r4, r2
   1934a:	d05d      	beq.n	19408 <rpc_gnss_event_handler+0x134>
   1934c:	f008 f8b9 	bl	214c2 <rpc_gnss_client_data_free>
   19350:	2300      	movs	r3, #0
   19352:	6033      	str	r3, [r6, #0]
   19354:	f504 433f 	add.w	r3, r4, #48896	; 0xbf00
   19358:	33ff      	adds	r3, #255	; 0xff
   1935a:	b29b      	uxth	r3, r3
   1935c:	2b02      	cmp	r3, #2
   1935e:	d869      	bhi.n	19434 <rpc_gnss_event_handler+0x160>
   19360:	4f39      	ldr	r7, [pc, #228]	; (19448 <rpc_gnss_event_handler+0x174>)
   19362:	683b      	ldr	r3, [r7, #0]
   19364:	075a      	lsls	r2, r3, #29
   19366:	d406      	bmi.n	19376 <rpc_gnss_event_handler+0xa2>
   19368:	683b      	ldr	r3, [r7, #0]
   1936a:	079b      	lsls	r3, r3, #30
   1936c:	d51c      	bpl.n	193a8 <rpc_gnss_event_handler+0xd4>
   1936e:	f244 0303 	movw	r3, #16387	; 0x4003
   19372:	429c      	cmp	r4, r3
   19374:	d118      	bne.n	193a8 <rpc_gnss_event_handler+0xd4>
   19376:	2002      	movs	r0, #2
   19378:	f7fc f990 	bl	1569c <nrf_modem_os_alloc>
   1937c:	4606      	mov	r6, r0
   1937e:	6828      	ldr	r0, [r5, #0]
   19380:	2e00      	cmp	r6, #0
   19382:	d052      	beq.n	1942a <rpc_gnss_event_handler+0x156>
   19384:	8034      	strh	r4, [r6, #0]
   19386:	686b      	ldr	r3, [r5, #4]
   19388:	9000      	str	r0, [sp, #0]
   1938a:	e9cd 3601 	strd	r3, r6, [sp, #4]
   1938e:	2302      	movs	r3, #2
   19390:	9303      	str	r3, [sp, #12]
   19392:	4b2f      	ldr	r3, [pc, #188]	; (19450 <rpc_gnss_event_handler+0x17c>)
   19394:	4669      	mov	r1, sp
   19396:	6818      	ldr	r0, [r3, #0]
   19398:	6803      	ldr	r3, [r0, #0]
   1939a:	685b      	ldr	r3, [r3, #4]
   1939c:	4798      	blx	r3
   1939e:	3001      	adds	r0, #1
   193a0:	d14b      	bne.n	1943a <rpc_gnss_event_handler+0x166>
   193a2:	4630      	mov	r0, r6
   193a4:	f7fc f984 	bl	156b0 <nrf_modem_os_free>
   193a8:	6828      	ldr	r0, [r5, #0]
   193aa:	2800      	cmp	r0, #0
   193ac:	d042      	beq.n	19434 <rpc_gnss_event_handler+0x160>
   193ae:	f008 f888 	bl	214c2 <rpc_gnss_client_data_free>
   193b2:	2200      	movs	r2, #0
   193b4:	4b25      	ldr	r3, [pc, #148]	; (1944c <rpc_gnss_event_handler+0x178>)
   193b6:	601a      	str	r2, [r3, #0]
   193b8:	e03c      	b.n	19434 <rpc_gnss_event_handler+0x160>
   193ba:	6842      	ldr	r2, [r0, #4]
   193bc:	2a00      	cmp	r2, #0
   193be:	d1c5      	bne.n	1934c <rpc_gnss_event_handler+0x78>
   193c0:	681a      	ldr	r2, [r3, #0]
   193c2:	0c12      	lsrs	r2, r2, #16
   193c4:	0412      	lsls	r2, r2, #16
   193c6:	f042 0202 	orr.w	r2, r2, #2
   193ca:	601a      	str	r2, [r3, #0]
   193cc:	e7be      	b.n	1934c <rpc_gnss_event_handler+0x78>
   193ce:	6842      	ldr	r2, [r0, #4]
   193d0:	b9b2      	cbnz	r2, 19400 <rpc_gnss_event_handler+0x12c>
   193d2:	681a      	ldr	r2, [r3, #0]
   193d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   193d8:	601a      	str	r2, [r3, #0]
   193da:	681a      	ldr	r2, [r3, #0]
   193dc:	b292      	uxth	r2, r2
   193de:	2a03      	cmp	r2, #3
   193e0:	681a      	ldr	r2, [r3, #0]
   193e2:	d104      	bne.n	193ee <rpc_gnss_event_handler+0x11a>
   193e4:	0c12      	lsrs	r2, r2, #16
   193e6:	0412      	lsls	r2, r2, #16
   193e8:	f042 0204 	orr.w	r2, r2, #4
   193ec:	e79d      	b.n	1932a <rpc_gnss_event_handler+0x56>
   193ee:	b292      	uxth	r2, r2
   193f0:	2a04      	cmp	r2, #4
   193f2:	d19b      	bne.n	1932c <rpc_gnss_event_handler+0x58>
   193f4:	681a      	ldr	r2, [r3, #0]
   193f6:	0c12      	lsrs	r2, r2, #16
   193f8:	0412      	lsls	r2, r2, #16
   193fa:	f042 0202 	orr.w	r2, r2, #2
   193fe:	e794      	b.n	1932a <rpc_gnss_event_handler+0x56>
   19400:	681a      	ldr	r2, [r3, #0]
   19402:	b292      	uxth	r2, r2
   19404:	2a03      	cmp	r2, #3
   19406:	e7f4      	b.n	193f2 <rpc_gnss_event_handler+0x11e>
   19408:	681a      	ldr	r2, [r3, #0]
   1940a:	0291      	lsls	r1, r2, #10
   1940c:	d59e      	bpl.n	1934c <rpc_gnss_event_handler+0x78>
   1940e:	6842      	ldr	r2, [r0, #4]
   19410:	b93a      	cbnz	r2, 19422 <rpc_gnss_event_handler+0x14e>
   19412:	681a      	ldr	r2, [r3, #0]
   19414:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   19418:	601a      	str	r2, [r3, #0]
   1941a:	681a      	ldr	r2, [r3, #0]
   1941c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   19420:	e7d3      	b.n	193ca <rpc_gnss_event_handler+0xf6>
   19422:	681a      	ldr	r2, [r3, #0]
   19424:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   19428:	e7cf      	b.n	193ca <rpc_gnss_event_handler+0xf6>
   1942a:	b118      	cbz	r0, 19434 <rpc_gnss_event_handler+0x160>
   1942c:	f008 f849 	bl	214c2 <rpc_gnss_client_data_free>
   19430:	4b06      	ldr	r3, [pc, #24]	; (1944c <rpc_gnss_event_handler+0x178>)
   19432:	601e      	str	r6, [r3, #0]
   19434:	2000      	movs	r0, #0
   19436:	b005      	add	sp, #20
   19438:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1943a:	683b      	ldr	r3, [r7, #0]
   1943c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   19440:	603b      	str	r3, [r7, #0]
   19442:	e7f7      	b.n	19434 <rpc_gnss_event_handler+0x160>
   19444:	20016c78 	.word	0x20016c78
   19448:	20016bb8 	.word	0x20016bb8
   1944c:	20016bbc 	.word	0x20016bbc
   19450:	20016bc0 	.word	0x20016bc0

00019454 <send_message>:
   19454:	b5f0      	push	{r4, r5, r6, r7, lr}
   19456:	b085      	sub	sp, #20
   19458:	4606      	mov	r6, r0
   1945a:	460f      	mov	r7, r1
   1945c:	a803      	add	r0, sp, #12
   1945e:	4611      	mov	r1, r2
   19460:	9201      	str	r2, [sp, #4]
   19462:	f008 f812 	bl	2148a <rpc_gnss_client_request_alloc>
   19466:	9b03      	ldr	r3, [sp, #12]
   19468:	4604      	mov	r4, r0
   1946a:	b958      	cbnz	r0, 19484 <send_message+0x30>
   1946c:	9a01      	ldr	r2, [sp, #4]
   1946e:	b98b      	cbnz	r3, 19494 <send_message+0x40>
   19470:	9803      	ldr	r0, [sp, #12]
   19472:	f008 f823 	bl	214bc <rpc_gnss_client_message_free>
   19476:	2023      	movs	r0, #35	; 0x23
   19478:	f7fb ff82 	bl	15380 <nrf_modem_os_errno_set>
   1947c:	f04f 30ff 	mov.w	r0, #4294967295
   19480:	b005      	add	sp, #20
   19482:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19484:	2b00      	cmp	r3, #0
   19486:	d0f3      	beq.n	19470 <send_message+0x1c>
   19488:	6818      	ldr	r0, [r3, #0]
   1948a:	2800      	cmp	r0, #0
   1948c:	d0f0      	beq.n	19470 <send_message+0x1c>
   1948e:	f008 f818 	bl	214c2 <rpc_gnss_client_data_free>
   19492:	e7ed      	b.n	19470 <send_message+0x1c>
   19494:	4910      	ldr	r1, [pc, #64]	; (194d8 <send_message+0x84>)
   19496:	880d      	ldrh	r5, [r1, #0]
   19498:	3501      	adds	r5, #1
   1949a:	b2ad      	uxth	r5, r5
   1949c:	800d      	strh	r5, [r1, #0]
   1949e:	2143      	movs	r1, #67	; 0x43
   194a0:	ea46 4505 	orr.w	r5, r6, r5, lsl #16
   194a4:	603d      	str	r5, [r7, #0]
   194a6:	7319      	strb	r1, [r3, #12]
   194a8:	2154      	movs	r1, #84	; 0x54
   194aa:	7359      	strb	r1, [r3, #13]
   194ac:	2176      	movs	r1, #118	; 0x76
   194ae:	7399      	strb	r1, [r3, #14]
   194b0:	2149      	movs	r1, #73	; 0x49
   194b2:	605a      	str	r2, [r3, #4]
   194b4:	7218      	strb	r0, [r3, #8]
   194b6:	7258      	strb	r0, [r3, #9]
   194b8:	7298      	strb	r0, [r3, #10]
   194ba:	72d8      	strb	r0, [r3, #11]
   194bc:	73d9      	strb	r1, [r3, #15]
   194be:	6818      	ldr	r0, [r3, #0]
   194c0:	4639      	mov	r1, r7
   194c2:	f009 fd58 	bl	22f76 <memcpy>
   194c6:	4b05      	ldr	r3, [pc, #20]	; (194dc <send_message+0x88>)
   194c8:	9803      	ldr	r0, [sp, #12]
   194ca:	4631      	mov	r1, r6
   194cc:	601c      	str	r4, [r3, #0]
   194ce:	f007 ffeb 	bl	214a8 <rpc_gnss_client_request_send>
   194d2:	4620      	mov	r0, r4
   194d4:	e7d4      	b.n	19480 <send_message+0x2c>
   194d6:	bf00      	nop
   194d8:	20016c78 	.word	0x20016c78
   194dc:	20016bbc 	.word	0x20016bbc

000194e0 <gnss_interface_write>:
   194e0:	b570      	push	{r4, r5, r6, lr}
   194e2:	4604      	mov	r4, r0
   194e4:	4a40      	ldr	r2, [pc, #256]	; (195e8 <gnss_interface_write+0x108>)
   194e6:	b09e      	sub	sp, #120	; 0x78
   194e8:	4294      	cmp	r4, r2
   194ea:	4608      	mov	r0, r1
   194ec:	9d22      	ldr	r5, [sp, #136]	; 0x88
   194ee:	d005      	beq.n	194fc <gnss_interface_write+0x1c>
   194f0:	2009      	movs	r0, #9
   194f2:	f7fb ff45 	bl	15380 <nrf_modem_os_errno_set>
   194f6:	f04f 33ff 	mov.w	r3, #4294967295
   194fa:	e061      	b.n	195c0 <gnss_interface_write+0xe0>
   194fc:	b119      	cbz	r1, 19506 <gnss_interface_write+0x26>
   194fe:	b115      	cbz	r5, 19506 <gnss_interface_write+0x26>
   19500:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   19502:	2a02      	cmp	r2, #2
   19504:	d001      	beq.n	1950a <gnss_interface_write+0x2a>
   19506:	2016      	movs	r0, #22
   19508:	e7f3      	b.n	194f2 <gnss_interface_write+0x12>
   1950a:	4a38      	ldr	r2, [pc, #224]	; (195ec <gnss_interface_write+0x10c>)
   1950c:	6811      	ldr	r1, [r2, #0]
   1950e:	4614      	mov	r4, r2
   19510:	b289      	uxth	r1, r1
   19512:	2902      	cmp	r1, #2
   19514:	d005      	beq.n	19522 <gnss_interface_write+0x42>
   19516:	6812      	ldr	r2, [r2, #0]
   19518:	b292      	uxth	r2, r2
   1951a:	2a04      	cmp	r2, #4
   1951c:	d001      	beq.n	19522 <gnss_interface_write+0x42>
   1951e:	2039      	movs	r0, #57	; 0x39
   19520:	e7e7      	b.n	194f2 <gnss_interface_write+0x12>
   19522:	b10b      	cbz	r3, 19528 <gnss_interface_write+0x48>
   19524:	202d      	movs	r0, #45	; 0x2d
   19526:	e7e4      	b.n	194f2 <gnss_interface_write+0x12>
   19528:	6822      	ldr	r2, [r4, #0]
   1952a:	0396      	lsls	r6, r2, #14
   1952c:	d548      	bpl.n	195c0 <gnss_interface_write+0xe0>
   1952e:	6823      	ldr	r3, [r4, #0]
   19530:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   19534:	6023      	str	r3, [r4, #0]
   19536:	6823      	ldr	r3, [r4, #0]
   19538:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   1953c:	6023      	str	r3, [r4, #0]
   1953e:	882b      	ldrh	r3, [r5, #0]
   19540:	3b01      	subs	r3, #1
   19542:	2b07      	cmp	r3, #7
   19544:	d8df      	bhi.n	19506 <gnss_interface_write+0x26>
   19546:	e8df f003 	tbb	[pc, r3]
   1954a:	1704      	.short	0x1704
   1954c:	27231f1b 	.word	0x27231f1b
   19550:	2f2b      	.short	0x2f2b
   19552:	a902      	add	r1, sp, #8
   19554:	f007 ffb7 	bl	214c6 <rpc_gnss_serialize_utc>
   19558:	2272      	movs	r2, #114	; 0x72
   1955a:	f241 0005 	movw	r0, #4101	; 0x1005
   1955e:	a901      	add	r1, sp, #4
   19560:	f7ff ff78 	bl	19454 <send_message>
   19564:	4603      	mov	r3, r0
   19566:	bb18      	cbnz	r0, 195b0 <gnss_interface_write+0xd0>
   19568:	4d21      	ldr	r5, [pc, #132]	; (195f0 <gnss_interface_write+0x110>)
   1956a:	4e1f      	ldr	r6, [pc, #124]	; (195e8 <gnss_interface_write+0x108>)
   1956c:	6822      	ldr	r2, [r4, #0]
   1956e:	0291      	lsls	r1, r2, #10
   19570:	d52f      	bpl.n	195d2 <gnss_interface_write+0xf2>
   19572:	b343      	cbz	r3, 195c6 <gnss_interface_write+0xe6>
   19574:	4618      	mov	r0, r3
   19576:	e7bc      	b.n	194f2 <gnss_interface_write+0x12>
   19578:	a902      	add	r1, sp, #8
   1957a:	f007 ffc1 	bl	21500 <rpc_gnss_serialize_ephe>
   1957e:	e7eb      	b.n	19558 <gnss_interface_write+0x78>
   19580:	a902      	add	r1, sp, #8
   19582:	f008 f807 	bl	21594 <rpc_gnss_serialize_alm>
   19586:	e7e7      	b.n	19558 <gnss_interface_write+0x78>
   19588:	a902      	add	r1, sp, #8
   1958a:	f008 f830 	bl	215ee <rpc_gnss_serialize_klob>
   1958e:	e7e3      	b.n	19558 <gnss_interface_write+0x78>
   19590:	a902      	add	r1, sp, #8
   19592:	f008 f847 	bl	21624 <rpc_gnss_serialize_nequick>
   19596:	e7df      	b.n	19558 <gnss_interface_write+0x78>
   19598:	a902      	add	r1, sp, #8
   1959a:	f008 f858 	bl	2164e <rpc_gnss_serialize_time_and_sv_tow>
   1959e:	e7db      	b.n	19558 <gnss_interface_write+0x78>
   195a0:	a902      	add	r1, sp, #8
   195a2:	f008 f877 	bl	21694 <rpc_gnss_serialize_location>
   195a6:	e7d7      	b.n	19558 <gnss_interface_write+0x78>
   195a8:	a902      	add	r1, sp, #8
   195aa:	f008 f890 	bl	216ce <rpc_gnss_serialize_integrity>
   195ae:	e7d3      	b.n	19558 <gnss_interface_write+0x78>
   195b0:	6822      	ldr	r2, [r4, #0]
   195b2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   195b6:	6022      	str	r2, [r4, #0]
   195b8:	6822      	ldr	r2, [r4, #0]
   195ba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   195be:	6022      	str	r2, [r4, #0]
   195c0:	4618      	mov	r0, r3
   195c2:	b01e      	add	sp, #120	; 0x78
   195c4:	bd70      	pop	{r4, r5, r6, pc}
   195c6:	4629      	mov	r1, r5
   195c8:	4630      	mov	r0, r6
   195ca:	f006 fe34 	bl	20236 <nrf_modem_os_timedwait>
   195ce:	4603      	mov	r3, r0
   195d0:	e7cc      	b.n	1956c <gnss_interface_write+0x8c>
   195d2:	2b00      	cmp	r3, #0
   195d4:	d1ce      	bne.n	19574 <gnss_interface_write+0x94>
   195d6:	6822      	ldr	r2, [r4, #0]
   195d8:	0392      	lsls	r2, r2, #14
   195da:	d4f1      	bmi.n	195c0 <gnss_interface_write+0xe0>
   195dc:	6823      	ldr	r3, [r4, #0]
   195de:	2005      	movs	r0, #5
   195e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   195e4:	6023      	str	r3, [r4, #0]
   195e6:	e784      	b.n	194f2 <gnss_interface_write+0x12>
   195e8:	49765443 	.word	0x49765443
   195ec:	20016bb8 	.word	0x20016bb8
   195f0:	20014588 	.word	0x20014588

000195f4 <gnss_interface_read>:
   195f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   195f8:	469a      	mov	sl, r3
   195fa:	4b7d      	ldr	r3, [pc, #500]	; (197f0 <gnss_interface_read+0x1fc>)
   195fc:	460c      	mov	r4, r1
   195fe:	4298      	cmp	r0, r3
   19600:	b0b5      	sub	sp, #212	; 0xd4
   19602:	d008      	beq.n	19616 <gnss_interface_read+0x22>
   19604:	2009      	movs	r0, #9
   19606:	f7fb febb 	bl	15380 <nrf_modem_os_errno_set>
   1960a:	f04f 35ff 	mov.w	r5, #4294967295
   1960e:	4628      	mov	r0, r5
   19610:	b035      	add	sp, #212	; 0xd4
   19612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19616:	b109      	cbz	r1, 1961c <gnss_interface_read+0x28>
   19618:	2ad7      	cmp	r2, #215	; 0xd7
   1961a:	d801      	bhi.n	19620 <gnss_interface_read+0x2c>
   1961c:	2016      	movs	r0, #22
   1961e:	e7f2      	b.n	19606 <gnss_interface_read+0x12>
   19620:	4b74      	ldr	r3, [pc, #464]	; (197f4 <gnss_interface_read+0x200>)
   19622:	681a      	ldr	r2, [r3, #0]
   19624:	461e      	mov	r6, r3
   19626:	b292      	uxth	r2, r2
   19628:	2a04      	cmp	r2, #4
   1962a:	d005      	beq.n	19638 <gnss_interface_read+0x44>
   1962c:	681b      	ldr	r3, [r3, #0]
   1962e:	b29b      	uxth	r3, r3
   19630:	2b02      	cmp	r3, #2
   19632:	d001      	beq.n	19638 <gnss_interface_read+0x44>
   19634:	2039      	movs	r0, #57	; 0x39
   19636:	e7e6      	b.n	19606 <gnss_interface_read+0x12>
   19638:	f1ba 0f00 	cmp.w	sl, #0
   1963c:	d004      	beq.n	19648 <gnss_interface_read+0x54>
   1963e:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   19642:	d101      	bne.n	19648 <gnss_interface_read+0x54>
   19644:	202d      	movs	r0, #45	; 0x2d
   19646:	e7de      	b.n	19606 <gnss_interface_read+0x12>
   19648:	6833      	ldr	r3, [r6, #0]
   1964a:	f04f 0900 	mov.w	r9, #0
   1964e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   19652:	6033      	str	r3, [r6, #0]
   19654:	23ba      	movs	r3, #186	; 0xba
   19656:	9302      	str	r3, [sp, #8]
   19658:	f10d 0302 	add.w	r3, sp, #2
   1965c:	9303      	str	r3, [sp, #12]
   1965e:	2302      	movs	r3, #2
   19660:	f10d 0814 	add.w	r8, sp, #20
   19664:	4f64      	ldr	r7, [pc, #400]	; (197f8 <gnss_interface_read+0x204>)
   19666:	f8df b188 	ldr.w	fp, [pc, #392]	; 197f0 <gnss_interface_read+0x1fc>
   1966a:	f8cd 8004 	str.w	r8, [sp, #4]
   1966e:	9304      	str	r3, [sp, #16]
   19670:	6838      	ldr	r0, [r7, #0]
   19672:	a901      	add	r1, sp, #4
   19674:	6802      	ldr	r2, [r0, #0]
   19676:	6895      	ldr	r5, [r2, #8]
   19678:	4652      	mov	r2, sl
   1967a:	47a8      	blx	r5
   1967c:	1e05      	subs	r5, r0, #0
   1967e:	da13      	bge.n	196a8 <gnss_interface_read+0xb4>
   19680:	f01a 0f02 	tst.w	sl, #2
   19684:	d10e      	bne.n	196a4 <gnss_interface_read+0xb0>
   19686:	4d5d      	ldr	r5, [pc, #372]	; (197fc <gnss_interface_read+0x208>)
   19688:	6832      	ldr	r2, [r6, #0]
   1968a:	495d      	ldr	r1, [pc, #372]	; (19800 <gnss_interface_read+0x20c>)
   1968c:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
   19690:	ea52 0309 	orrs.w	r3, r2, r9
   19694:	7828      	ldrb	r0, [r5, #0]
   19696:	d027      	beq.n	196e8 <gnss_interface_read+0xf4>
   19698:	2800      	cmp	r0, #0
   1969a:	d1e9      	bne.n	19670 <gnss_interface_read+0x7c>
   1969c:	f04f 0970 	mov.w	r9, #112	; 0x70
   196a0:	4648      	mov	r0, r9
   196a2:	e7b0      	b.n	19606 <gnss_interface_read+0x12>
   196a4:	1c6b      	adds	r3, r5, #1
   196a6:	d026      	beq.n	196f6 <gnss_interface_read+0x102>
   196a8:	f244 0202 	movw	r2, #16386	; 0x4002
   196ac:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   196b0:	4293      	cmp	r3, r2
   196b2:	d127      	bne.n	19704 <gnss_interface_read+0x110>
   196b4:	4640      	mov	r0, r8
   196b6:	f7f7 fbdb 	bl	10e70 <strlen>
   196ba:	2302      	movs	r3, #2
   196bc:	1c45      	adds	r5, r0, #1
   196be:	f804 3b08 	strb.w	r3, [r4], #8
   196c2:	b2ad      	uxth	r5, r5
   196c4:	462a      	mov	r2, r5
   196c6:	4641      	mov	r1, r8
   196c8:	4620      	mov	r0, r4
   196ca:	f009 fc54 	bl	22f76 <memcpy>
   196ce:	3508      	adds	r5, #8
   196d0:	4b49      	ldr	r3, [pc, #292]	; (197f8 <gnss_interface_read+0x204>)
   196d2:	6818      	ldr	r0, [r3, #0]
   196d4:	6803      	ldr	r3, [r0, #0]
   196d6:	68db      	ldr	r3, [r3, #12]
   196d8:	4798      	blx	r3
   196da:	2800      	cmp	r0, #0
   196dc:	bfc2      	ittt	gt
   196de:	6833      	ldrgt	r3, [r6, #0]
   196e0:	f443 3380 	orrgt.w	r3, r3, #65536	; 0x10000
   196e4:	6033      	strgt	r3, [r6, #0]
   196e6:	e792      	b.n	1960e <gnss_interface_read+0x1a>
   196e8:	2800      	cmp	r0, #0
   196ea:	d0d7      	beq.n	1969c <gnss_interface_read+0xa8>
   196ec:	4658      	mov	r0, fp
   196ee:	f006 fda2 	bl	20236 <nrf_modem_os_timedwait>
   196f2:	4681      	mov	r9, r0
   196f4:	e7c8      	b.n	19688 <gnss_interface_read+0x94>
   196f6:	f1b9 0f00 	cmp.w	r9, #0
   196fa:	d1d1      	bne.n	196a0 <gnss_interface_read+0xac>
   196fc:	2023      	movs	r0, #35	; 0x23
   196fe:	f7fb fe3f 	bl	15380 <nrf_modem_os_errno_set>
   19702:	e784      	b.n	1960e <gnss_interface_read+0x1a>
   19704:	f244 0201 	movw	r2, #16385	; 0x4001
   19708:	4293      	cmp	r3, r2
   1970a:	d160      	bne.n	197ce <gnss_interface_read+0x1da>
   1970c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   19710:	2301      	movs	r3, #1
   19712:	f89d 5051 	ldrb.w	r5, [sp, #81]	; 0x51
   19716:	7023      	strb	r3, [r4, #0]
   19718:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1971c:	e9c4 2304 	strd	r2, r3, [r4, #16]
   19720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19722:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
   19726:	61a3      	str	r3, [r4, #24]
   19728:	f8dd 5041 	ldr.w	r5, [sp, #65]	; 0x41
   1972c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1972e:	6365      	str	r5, [r4, #52]	; 0x34
   19730:	61e3      	str	r3, [r4, #28]
   19732:	f8dd 5045 	ldr.w	r5, [sp, #69]	; 0x45
   19736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19738:	63a5      	str	r5, [r4, #56]	; 0x38
   1973a:	6223      	str	r3, [r4, #32]
   1973c:	f8dd 5049 	ldr.w	r5, [sp, #73]	; 0x49
   19740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19742:	63e5      	str	r5, [r4, #60]	; 0x3c
   19744:	6263      	str	r3, [r4, #36]	; 0x24
   19746:	f8dd 504d 	ldr.w	r5, [sp, #77]	; 0x4d
   1974a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1974c:	6425      	str	r5, [r4, #64]	; 0x40
   1974e:	62a3      	str	r3, [r4, #40]	; 0x28
   19750:	f89d 503e 	ldrb.w	r5, [sp, #62]	; 0x3e
   19754:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   19758:	e9c4 0102 	strd	r0, r1, [r4, #8]
   1975c:	85a3      	strh	r3, [r4, #44]	; 0x2c
   1975e:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
   19762:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
   19766:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1976a:	200a      	movs	r0, #10
   1976c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   19770:	2200      	movs	r2, #0
   19772:	8623      	strh	r3, [r4, #48]	; 0x30
   19774:	f8b8 303e 	ldrh.w	r3, [r8, #62]	; 0x3e
   19778:	340c      	adds	r4, #12
   1977a:	8763      	strh	r3, [r4, #58]	; 0x3a
   1977c:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
   19780:	f108 080a 	add.w	r8, r8, #10
   19784:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   19788:	ab34      	add	r3, sp, #208	; 0xd0
   1978a:	fb00 3302 	mla	r3, r0, r2, r3
   1978e:	f813 5c7a 	ldrb.w	r5, [r3, #-122]
   19792:	f813 1c7b 	ldrb.w	r1, [r3, #-123]
   19796:	3201      	adds	r2, #1
   19798:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   1979c:	87e1      	strh	r1, [r4, #62]	; 0x3e
   1979e:	f813 1c79 	ldrb.w	r1, [r3, #-121]
   197a2:	f813 5c78 	ldrb.w	r5, [r3, #-120]
   197a6:	2a0c      	cmp	r2, #12
   197a8:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   197ac:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
   197b0:	f813 1c77 	ldrb.w	r1, [r3, #-119]
   197b4:	f813 3c76 	ldrb.w	r3, [r3, #-118]
   197b8:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
   197bc:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
   197c0:	f898 303d 	ldrb.w	r3, [r8, #61]	; 0x3d
   197c4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   197c8:	d1d4      	bne.n	19774 <gnss_interface_read+0x180>
   197ca:	25d8      	movs	r5, #216	; 0xd8
   197cc:	e780      	b.n	196d0 <gnss_interface_read+0xdc>
   197ce:	f244 0203 	movw	r2, #16387	; 0x4003
   197d2:	4293      	cmp	r3, r2
   197d4:	f47f af22 	bne.w	1961c <gnss_interface_read+0x28>
   197d8:	2303      	movs	r3, #3
   197da:	7023      	strb	r3, [r4, #0]
   197dc:	9b05      	ldr	r3, [sp, #20]
   197de:	2514      	movs	r5, #20
   197e0:	60a3      	str	r3, [r4, #8]
   197e2:	9b06      	ldr	r3, [sp, #24]
   197e4:	60e3      	str	r3, [r4, #12]
   197e6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   197ea:	6123      	str	r3, [r4, #16]
   197ec:	e770      	b.n	196d0 <gnss_interface_read+0xdc>
   197ee:	bf00      	nop
   197f0:	49765443 	.word	0x49765443
   197f4:	20016bb8 	.word	0x20016bb8
   197f8:	20016bc0 	.word	0x20016bc0
   197fc:	20016dcf 	.word	0x20016dcf
   19800:	20014588 	.word	0x20014588

00019804 <gnss_interface_setopt>:
   19804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19808:	4c75      	ldr	r4, [pc, #468]	; (199e0 <gnss_interface_setopt+0x1dc>)
   1980a:	4616      	mov	r6, r2
   1980c:	6822      	ldr	r2, [r4, #0]
   1980e:	b087      	sub	sp, #28
   19810:	b292      	uxth	r2, r2
   19812:	2a02      	cmp	r2, #2
   19814:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   19816:	d007      	beq.n	19828 <gnss_interface_setopt+0x24>
   19818:	2e08      	cmp	r6, #8
   1981a:	d005      	beq.n	19828 <gnss_interface_setopt+0x24>
   1981c:	f1a6 020a 	sub.w	r2, r6, #10
   19820:	2a01      	cmp	r2, #1
   19822:	d901      	bls.n	19828 <gnss_interface_setopt+0x24>
   19824:	200e      	movs	r0, #14
   19826:	e003      	b.n	19830 <gnss_interface_setopt+0x2c>
   19828:	6822      	ldr	r2, [r4, #0]
   1982a:	0252      	lsls	r2, r2, #9
   1982c:	d508      	bpl.n	19840 <gnss_interface_setopt+0x3c>
   1982e:	2073      	movs	r0, #115	; 0x73
   19830:	f7fb fda6 	bl	15380 <nrf_modem_os_errno_set>
   19834:	f04f 35ff 	mov.w	r5, #4294967295
   19838:	4628      	mov	r0, r5
   1983a:	b007      	add	sp, #28
   1983c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19840:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   19844:	d001      	beq.n	1984a <gnss_interface_setopt+0x46>
   19846:	202a      	movs	r0, #42	; 0x2a
   19848:	e7f2      	b.n	19830 <gnss_interface_setopt+0x2c>
   1984a:	4a66      	ldr	r2, [pc, #408]	; (199e4 <gnss_interface_setopt+0x1e0>)
   1984c:	4290      	cmp	r0, r2
   1984e:	d001      	beq.n	19854 <gnss_interface_setopt+0x50>
   19850:	2009      	movs	r0, #9
   19852:	e7ed      	b.n	19830 <gnss_interface_setopt+0x2c>
   19854:	f1a6 020a 	sub.w	r2, r6, #10
   19858:	2a01      	cmp	r2, #1
   1985a:	d902      	bls.n	19862 <gnss_interface_setopt+0x5e>
   1985c:	b90b      	cbnz	r3, 19862 <gnss_interface_setopt+0x5e>
   1985e:	2016      	movs	r0, #22
   19860:	e7e6      	b.n	19830 <gnss_interface_setopt+0x2c>
   19862:	1e72      	subs	r2, r6, #1
   19864:	2a0a      	cmp	r2, #10
   19866:	d8fa      	bhi.n	1985e <gnss_interface_setopt+0x5a>
   19868:	e8df f002 	tbb	[pc, r2]
   1986c:	4b45063d 	.word	0x4b45063d
   19870:	806a5a53 	.word	0x806a5a53
   19874:	9362      	.short	0x9362
   19876:	a5          	.byte	0xa5
   19877:	00          	.byte	0x00
   19878:	2d02      	cmp	r5, #2
   1987a:	d1f0      	bne.n	1985e <gnss_interface_setopt+0x5a>
   1987c:	2210      	movs	r2, #16
   1987e:	881b      	ldrh	r3, [r3, #0]
   19880:	9202      	str	r2, [sp, #8]
   19882:	f8ad 3011 	strh.w	r3, [sp, #17]
   19886:	f241 1003 	movw	r0, #4355	; 0x1103
   1988a:	6823      	ldr	r3, [r4, #0]
   1988c:	2214      	movs	r2, #20
   1988e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   19892:	a901      	add	r1, sp, #4
   19894:	6023      	str	r3, [r4, #0]
   19896:	f7ff fddd 	bl	19454 <send_message>
   1989a:	4605      	mov	r5, r0
   1989c:	2800      	cmp	r0, #0
   1989e:	f040 8091 	bne.w	199c4 <gnss_interface_setopt+0x1c0>
   198a2:	f8df 9148 	ldr.w	r9, [pc, #328]	; 199ec <gnss_interface_setopt+0x1e8>
   198a6:	f8df 813c 	ldr.w	r8, [pc, #316]	; 199e4 <gnss_interface_setopt+0x1e0>
   198aa:	4649      	mov	r1, r9
   198ac:	4640      	mov	r0, r8
   198ae:	f006 fcc2 	bl	20236 <nrf_modem_os_timedwait>
   198b2:	6827      	ldr	r7, [r4, #0]
   198b4:	f417 0780 	ands.w	r7, r7, #4194304	; 0x400000
   198b8:	d1f7      	bne.n	198aa <gnss_interface_setopt+0xa6>
   198ba:	f8df 8134 	ldr.w	r8, [pc, #308]	; 199f0 <gnss_interface_setopt+0x1ec>
   198be:	f8d8 0000 	ldr.w	r0, [r8]
   198c2:	b118      	cbz	r0, 198cc <gnss_interface_setopt+0xc8>
   198c4:	f007 fdfd 	bl	214c2 <rpc_gnss_client_data_free>
   198c8:	f8c8 7000 	str.w	r7, [r8]
   198cc:	6823      	ldr	r3, [r4, #0]
   198ce:	021b      	lsls	r3, r3, #8
   198d0:	d47d      	bmi.n	199ce <gnss_interface_setopt+0x1ca>
   198d2:	200e      	movs	r0, #14
   198d4:	f7fb fd54 	bl	15380 <nrf_modem_os_errno_set>
   198d8:	f04f 35ff 	mov.w	r5, #4294967295
   198dc:	6823      	ldr	r3, [r4, #0]
   198de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   198e2:	6023      	str	r3, [r4, #0]
   198e4:	e7a8      	b.n	19838 <gnss_interface_setopt+0x34>
   198e6:	2d02      	cmp	r5, #2
   198e8:	d1b9      	bne.n	1985e <gnss_interface_setopt+0x5a>
   198ea:	2208      	movs	r2, #8
   198ec:	881b      	ldrh	r3, [r3, #0]
   198ee:	9202      	str	r2, [sp, #8]
   198f0:	f8ad 300f 	strh.w	r3, [sp, #15]
   198f4:	e7c7      	b.n	19886 <gnss_interface_setopt+0x82>
   198f6:	2d01      	cmp	r5, #1
   198f8:	d1b1      	bne.n	1985e <gnss_interface_setopt+0x5a>
   198fa:	781b      	ldrb	r3, [r3, #0]
   198fc:	2b01      	cmp	r3, #1
   198fe:	d0c2      	beq.n	19886 <gnss_interface_setopt+0x82>
   19900:	e7ad      	b.n	1985e <gnss_interface_setopt+0x5a>
   19902:	2d02      	cmp	r5, #2
   19904:	d1ab      	bne.n	1985e <gnss_interface_setopt+0x5a>
   19906:	2220      	movs	r2, #32
   19908:	881b      	ldrh	r3, [r3, #0]
   1990a:	9202      	str	r2, [sp, #8]
   1990c:	f8ad 3013 	strh.w	r3, [sp, #19]
   19910:	e7b9      	b.n	19886 <gnss_interface_setopt+0x82>
   19912:	2d01      	cmp	r5, #1
   19914:	d1a3      	bne.n	1985e <gnss_interface_setopt+0x5a>
   19916:	781b      	ldrb	r3, [r3, #0]
   19918:	9502      	str	r5, [sp, #8]
   1991a:	f88d 300c 	strb.w	r3, [sp, #12]
   1991e:	e7b2      	b.n	19886 <gnss_interface_setopt+0x82>
   19920:	2d01      	cmp	r5, #1
   19922:	d19c      	bne.n	1985e <gnss_interface_setopt+0x5a>
   19924:	2202      	movs	r2, #2
   19926:	781b      	ldrb	r3, [r3, #0]
   19928:	9202      	str	r2, [sp, #8]
   1992a:	f88d 300d 	strb.w	r3, [sp, #13]
   1992e:	e7aa      	b.n	19886 <gnss_interface_setopt+0x82>
   19930:	2d01      	cmp	r5, #1
   19932:	d194      	bne.n	1985e <gnss_interface_setopt+0x5a>
   19934:	2240      	movs	r2, #64	; 0x40
   19936:	781b      	ldrb	r3, [r3, #0]
   19938:	9202      	str	r2, [sp, #8]
   1993a:	f88d 3015 	strb.w	r3, [sp, #21]
   1993e:	e7a2      	b.n	19886 <gnss_interface_setopt+0x82>
   19940:	6822      	ldr	r2, [r4, #0]
   19942:	b292      	uxth	r2, r2
   19944:	2a02      	cmp	r2, #2
   19946:	f47f af6d 	bne.w	19824 <gnss_interface_setopt+0x20>
   1994a:	2d04      	cmp	r5, #4
   1994c:	d187      	bne.n	1985e <gnss_interface_setopt+0x5a>
   1994e:	2201      	movs	r2, #1
   19950:	681b      	ldr	r3, [r3, #0]
   19952:	f88d 2008 	strb.w	r2, [sp, #8]
   19956:	f8cd 3009 	str.w	r3, [sp, #9]
   1995a:	6823      	ldr	r3, [r4, #0]
   1995c:	0c1b      	lsrs	r3, r3, #16
   1995e:	041b      	lsls	r3, r3, #16
   19960:	f043 0303 	orr.w	r3, r3, #3
   19964:	6023      	str	r3, [r4, #0]
   19966:	f241 0004 	movw	r0, #4100	; 0x1004
   1996a:	e78e      	b.n	1988a <gnss_interface_setopt+0x86>
   1996c:	6822      	ldr	r2, [r4, #0]
   1996e:	b292      	uxth	r2, r2
   19970:	2a04      	cmp	r2, #4
   19972:	d004      	beq.n	1997e <gnss_interface_setopt+0x17a>
   19974:	6822      	ldr	r2, [r4, #0]
   19976:	b292      	uxth	r2, r2
   19978:	2a02      	cmp	r2, #2
   1997a:	f47f af53 	bne.w	19824 <gnss_interface_setopt+0x20>
   1997e:	2200      	movs	r2, #0
   19980:	2d04      	cmp	r5, #4
   19982:	f88d 2008 	strb.w	r2, [sp, #8]
   19986:	f47f af6a 	bne.w	1985e <gnss_interface_setopt+0x5a>
   1998a:	681b      	ldr	r3, [r3, #0]
   1998c:	f8cd 3009 	str.w	r3, [sp, #9]
   19990:	e7e9      	b.n	19966 <gnss_interface_setopt+0x162>
   19992:	6823      	ldr	r3, [r4, #0]
   19994:	b29b      	uxth	r3, r3
   19996:	2b04      	cmp	r3, #4
   19998:	f47f af44 	bne.w	19824 <gnss_interface_setopt+0x20>
   1999c:	2302      	movs	r3, #2
   1999e:	f88d 3008 	strb.w	r3, [sp, #8]
   199a2:	2300      	movs	r3, #0
   199a4:	f88d 3009 	strb.w	r3, [sp, #9]
   199a8:	f88d 300a 	strb.w	r3, [sp, #10]
   199ac:	f88d 300b 	strb.w	r3, [sp, #11]
   199b0:	f88d 300c 	strb.w	r3, [sp, #12]
   199b4:	e7d7      	b.n	19966 <gnss_interface_setopt+0x162>
   199b6:	6823      	ldr	r3, [r4, #0]
   199b8:	b29b      	uxth	r3, r3
   199ba:	2b04      	cmp	r3, #4
   199bc:	f47f af32 	bne.w	19824 <gnss_interface_setopt+0x20>
   199c0:	2303      	movs	r3, #3
   199c2:	e7ec      	b.n	1999e <gnss_interface_setopt+0x19a>
   199c4:	6823      	ldr	r3, [r4, #0]
   199c6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   199ca:	6023      	str	r3, [r4, #0]
   199cc:	e72a      	b.n	19824 <gnss_interface_setopt+0x20>
   199ce:	2e08      	cmp	r6, #8
   199d0:	d184      	bne.n	198dc <gnss_interface_setopt+0xd8>
   199d2:	4b05      	ldr	r3, [pc, #20]	; (199e8 <gnss_interface_setopt+0x1e4>)
   199d4:	6818      	ldr	r0, [r3, #0]
   199d6:	6803      	ldr	r3, [r0, #0]
   199d8:	691b      	ldr	r3, [r3, #16]
   199da:	4798      	blx	r3
   199dc:	e77e      	b.n	198dc <gnss_interface_setopt+0xd8>
   199de:	bf00      	nop
   199e0:	20016bb8 	.word	0x20016bb8
   199e4:	49765443 	.word	0x49765443
   199e8:	20016bc0 	.word	0x20016bc0
   199ec:	20014588 	.word	0x20014588
   199f0:	20016bbc 	.word	0x20016bbc

000199f4 <gnss_interface_getopt>:
   199f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   199f8:	461d      	mov	r5, r3
   199fa:	4b44      	ldr	r3, [pc, #272]	; (19b0c <gnss_interface_getopt+0x118>)
   199fc:	b087      	sub	sp, #28
   199fe:	681e      	ldr	r6, [r3, #0]
   19a00:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   19a02:	b2b6      	uxth	r6, r6
   19a04:	2e02      	cmp	r6, #2
   19a06:	461e      	mov	r6, r3
   19a08:	d001      	beq.n	19a0e <gnss_interface_getopt+0x1a>
   19a0a:	200e      	movs	r0, #14
   19a0c:	e003      	b.n	19a16 <gnss_interface_getopt+0x22>
   19a0e:	681f      	ldr	r7, [r3, #0]
   19a10:	03ff      	lsls	r7, r7, #15
   19a12:	d508      	bpl.n	19a26 <gnss_interface_getopt+0x32>
   19a14:	2005      	movs	r0, #5
   19a16:	f7fb fcb3 	bl	15380 <nrf_modem_os_errno_set>
   19a1a:	f04f 34ff 	mov.w	r4, #4294967295
   19a1e:	4620      	mov	r0, r4
   19a20:	b007      	add	sp, #28
   19a22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19a26:	681b      	ldr	r3, [r3, #0]
   19a28:	01df      	lsls	r7, r3, #7
   19a2a:	d501      	bpl.n	19a30 <gnss_interface_getopt+0x3c>
   19a2c:	2073      	movs	r0, #115	; 0x73
   19a2e:	e7f2      	b.n	19a16 <gnss_interface_getopt+0x22>
   19a30:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   19a34:	d001      	beq.n	19a3a <gnss_interface_getopt+0x46>
   19a36:	202a      	movs	r0, #42	; 0x2a
   19a38:	e7ed      	b.n	19a16 <gnss_interface_getopt+0x22>
   19a3a:	4b35      	ldr	r3, [pc, #212]	; (19b10 <gnss_interface_getopt+0x11c>)
   19a3c:	4298      	cmp	r0, r3
   19a3e:	d001      	beq.n	19a44 <gnss_interface_getopt+0x50>
   19a40:	2009      	movs	r0, #9
   19a42:	e7e8      	b.n	19a16 <gnss_interface_getopt+0x22>
   19a44:	b105      	cbz	r5, 19a48 <gnss_interface_getopt+0x54>
   19a46:	b90c      	cbnz	r4, 19a4c <gnss_interface_getopt+0x58>
   19a48:	2016      	movs	r0, #22
   19a4a:	e7e4      	b.n	19a16 <gnss_interface_getopt+0x22>
   19a4c:	1e57      	subs	r7, r2, #1
   19a4e:	2f05      	cmp	r7, #5
   19a50:	d8fa      	bhi.n	19a48 <gnss_interface_getopt+0x54>
   19a52:	e8df f007 	tbb	[pc, r7]
   19a56:	0303      	.short	0x0303
   19a58:	30300330 	.word	0x30300330
   19a5c:	6823      	ldr	r3, [r4, #0]
   19a5e:	2b02      	cmp	r3, #2
   19a60:	d1f2      	bne.n	19a48 <gnss_interface_getopt+0x54>
   19a62:	6833      	ldr	r3, [r6, #0]
   19a64:	2214      	movs	r2, #20
   19a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   19a6a:	2100      	movs	r1, #0
   19a6c:	a801      	add	r0, sp, #4
   19a6e:	6033      	str	r3, [r6, #0]
   19a70:	f009 faa1 	bl	22fb6 <memset>
   19a74:	2214      	movs	r2, #20
   19a76:	f241 1002 	movw	r0, #4354	; 0x1102
   19a7a:	a901      	add	r1, sp, #4
   19a7c:	f7ff fcea 	bl	19454 <send_message>
   19a80:	4604      	mov	r4, r0
   19a82:	b9d8      	cbnz	r0, 19abc <gnss_interface_getopt+0xc8>
   19a84:	f8df 9090 	ldr.w	r9, [pc, #144]	; 19b18 <gnss_interface_getopt+0x124>
   19a88:	f8df 8084 	ldr.w	r8, [pc, #132]	; 19b10 <gnss_interface_getopt+0x11c>
   19a8c:	4649      	mov	r1, r9
   19a8e:	4640      	mov	r0, r8
   19a90:	f006 fbd1 	bl	20236 <nrf_modem_os_timedwait>
   19a94:	6833      	ldr	r3, [r6, #0]
   19a96:	01d9      	lsls	r1, r3, #7
   19a98:	d4f8      	bmi.n	19a8c <gnss_interface_getopt+0x98>
   19a9a:	4a1e      	ldr	r2, [pc, #120]	; (19b14 <gnss_interface_getopt+0x120>)
   19a9c:	6813      	ldr	r3, [r2, #0]
   19a9e:	4690      	mov	r8, r2
   19aa0:	b1db      	cbz	r3, 19ada <gnss_interface_getopt+0xe6>
   19aa2:	6832      	ldr	r2, [r6, #0]
   19aa4:	0192      	lsls	r2, r2, #6
   19aa6:	d518      	bpl.n	19ada <gnss_interface_getopt+0xe6>
   19aa8:	2f05      	cmp	r7, #5
   19aaa:	d828      	bhi.n	19afe <gnss_interface_getopt+0x10a>
   19aac:	e8df f007 	tbb	[pc, r7]
   19ab0:	201d1a0b 	.word	0x201d1a0b
   19ab4:	2523      	.short	0x2523
   19ab6:	6823      	ldr	r3, [r4, #0]
   19ab8:	2b01      	cmp	r3, #1
   19aba:	e7d1      	b.n	19a60 <gnss_interface_getopt+0x6c>
   19abc:	6833      	ldr	r3, [r6, #0]
   19abe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   19ac2:	6033      	str	r3, [r6, #0]
   19ac4:	e7a1      	b.n	19a0a <gnss_interface_getopt+0x16>
   19ac6:	f8b3 300f 	ldrh.w	r3, [r3, #15]
   19aca:	802b      	strh	r3, [r5, #0]
   19acc:	f8d8 0000 	ldr.w	r0, [r8]
   19ad0:	f007 fcf7 	bl	214c2 <rpc_gnss_client_data_free>
   19ad4:	2300      	movs	r3, #0
   19ad6:	f8c8 3000 	str.w	r3, [r8]
   19ada:	6833      	ldr	r3, [r6, #0]
   19adc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   19ae0:	6033      	str	r3, [r6, #0]
   19ae2:	e79c      	b.n	19a1e <gnss_interface_getopt+0x2a>
   19ae4:	f8b3 3011 	ldrh.w	r3, [r3, #17]
   19ae8:	e7ef      	b.n	19aca <gnss_interface_getopt+0xd6>
   19aea:	7b9b      	ldrb	r3, [r3, #14]
   19aec:	702b      	strb	r3, [r5, #0]
   19aee:	e7ed      	b.n	19acc <gnss_interface_getopt+0xd8>
   19af0:	f8b3 3013 	ldrh.w	r3, [r3, #19]
   19af4:	e7e9      	b.n	19aca <gnss_interface_getopt+0xd6>
   19af6:	7b1b      	ldrb	r3, [r3, #12]
   19af8:	e7f8      	b.n	19aec <gnss_interface_getopt+0xf8>
   19afa:	7b5b      	ldrb	r3, [r3, #13]
   19afc:	e7f6      	b.n	19aec <gnss_interface_getopt+0xf8>
   19afe:	2016      	movs	r0, #22
   19b00:	f7fb fc3e 	bl	15380 <nrf_modem_os_errno_set>
   19b04:	f04f 34ff 	mov.w	r4, #4294967295
   19b08:	e7e0      	b.n	19acc <gnss_interface_getopt+0xd8>
   19b0a:	bf00      	nop
   19b0c:	20016bb8 	.word	0x20016bb8
   19b10:	49765443 	.word	0x49765443
   19b14:	20016bbc 	.word	0x20016bbc
   19b18:	20014588 	.word	0x20014588

00019b1c <gnss_interface_init>:
   19b1c:	b510      	push	{r4, lr}
   19b1e:	2400      	movs	r4, #0
   19b20:	4a0a      	ldr	r2, [pc, #40]	; (19b4c <gnss_interface_init+0x30>)
   19b22:	480b      	ldr	r0, [pc, #44]	; (19b50 <gnss_interface_init+0x34>)
   19b24:	6811      	ldr	r1, [r2, #0]
   19b26:	4b0b      	ldr	r3, [pc, #44]	; (19b54 <gnss_interface_init+0x38>)
   19b28:	4001      	ands	r1, r0
   19b2a:	801c      	strh	r4, [r3, #0]
   19b2c:	4b0a      	ldr	r3, [pc, #40]	; (19b58 <gnss_interface_init+0x3c>)
   19b2e:	6011      	str	r1, [r2, #0]
   19b30:	601c      	str	r4, [r3, #0]
   19b32:	6813      	ldr	r3, [r2, #0]
   19b34:	4003      	ands	r3, r0
   19b36:	f043 0301 	orr.w	r3, r3, #1
   19b3a:	6013      	str	r3, [r2, #0]
   19b3c:	2201      	movs	r2, #1
   19b3e:	4b07      	ldr	r3, [pc, #28]	; (19b5c <gnss_interface_init+0x40>)
   19b40:	4807      	ldr	r0, [pc, #28]	; (19b60 <gnss_interface_init+0x44>)
   19b42:	701a      	strb	r2, [r3, #0]
   19b44:	f7fd fbca 	bl	172dc <rpc_gnss_client_set_handler>
   19b48:	4620      	mov	r0, r4
   19b4a:	bd10      	pop	{r4, pc}
   19b4c:	20016bb8 	.word	0x20016bb8
   19b50:	ffff0000 	.word	0xffff0000
   19b54:	20016c78 	.word	0x20016c78
   19b58:	20016bbc 	.word	0x20016bbc
   19b5c:	20016dcf 	.word	0x20016dcf
   19b60:	000192d5 	.word	0x000192d5

00019b64 <gnss_interface_open>:
   19b64:	4b16      	ldr	r3, [pc, #88]	; (19bc0 <gnss_interface_open+0x5c>)
   19b66:	4608      	mov	r0, r1
   19b68:	781b      	ldrb	r3, [r3, #0]
   19b6a:	b510      	push	{r4, lr}
   19b6c:	b92b      	cbnz	r3, 19b7a <gnss_interface_open+0x16>
   19b6e:	2070      	movs	r0, #112	; 0x70
   19b70:	f7fb fc06 	bl	15380 <nrf_modem_os_errno_set>
   19b74:	f04f 30ff 	mov.w	r0, #4294967295
   19b78:	e01f      	b.n	19bba <gnss_interface_open+0x56>
   19b7a:	2902      	cmp	r1, #2
   19b7c:	d001      	beq.n	19b82 <gnss_interface_open+0x1e>
   19b7e:	2029      	movs	r0, #41	; 0x29
   19b80:	e7f6      	b.n	19b70 <gnss_interface_open+0xc>
   19b82:	4c10      	ldr	r4, [pc, #64]	; (19bc4 <gnss_interface_open+0x60>)
   19b84:	6823      	ldr	r3, [r4, #0]
   19b86:	b29b      	uxth	r3, r3
   19b88:	2b01      	cmp	r3, #1
   19b8a:	d001      	beq.n	19b90 <gnss_interface_open+0x2c>
   19b8c:	2005      	movs	r0, #5
   19b8e:	e7ef      	b.n	19b70 <gnss_interface_open+0xc>
   19b90:	6823      	ldr	r3, [r4, #0]
   19b92:	2200      	movs	r2, #0
   19b94:	0c1b      	lsrs	r3, r3, #16
   19b96:	041b      	lsls	r3, r3, #16
   19b98:	f043 0302 	orr.w	r3, r3, #2
   19b9c:	490a      	ldr	r1, [pc, #40]	; (19bc8 <gnss_interface_open+0x64>)
   19b9e:	6023      	str	r3, [r4, #0]
   19ba0:	f001 f846 	bl	1ac30 <packet_handler_create>
   19ba4:	4a09      	ldr	r2, [pc, #36]	; (19bcc <gnss_interface_open+0x68>)
   19ba6:	6010      	str	r0, [r2, #0]
   19ba8:	b140      	cbz	r0, 19bbc <gnss_interface_open+0x58>
   19baa:	6822      	ldr	r2, [r4, #0]
   19bac:	6803      	ldr	r3, [r0, #0]
   19bae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   19bb2:	681b      	ldr	r3, [r3, #0]
   19bb4:	6022      	str	r2, [r4, #0]
   19bb6:	4798      	blx	r3
   19bb8:	4805      	ldr	r0, [pc, #20]	; (19bd0 <gnss_interface_open+0x6c>)
   19bba:	bd10      	pop	{r4, pc}
   19bbc:	200e      	movs	r0, #14
   19bbe:	e7d7      	b.n	19b70 <gnss_interface_open+0xc>
   19bc0:	20016dcf 	.word	0x20016dcf
   19bc4:	20016bb8 	.word	0x20016bb8
   19bc8:	00022055 	.word	0x00022055
   19bcc:	20016bc0 	.word	0x20016bc0
   19bd0:	49765443 	.word	0x49765443

00019bd4 <gnss_interface_close>:
   19bd4:	b530      	push	{r4, r5, lr}
   19bd6:	4b14      	ldr	r3, [pc, #80]	; (19c28 <gnss_interface_close+0x54>)
   19bd8:	b085      	sub	sp, #20
   19bda:	4298      	cmp	r0, r3
   19bdc:	d006      	beq.n	19bec <gnss_interface_close+0x18>
   19bde:	2009      	movs	r0, #9
   19be0:	f7fb fbce 	bl	15380 <nrf_modem_os_errno_set>
   19be4:	f04f 30ff 	mov.w	r0, #4294967295
   19be8:	b005      	add	sp, #20
   19bea:	bd30      	pop	{r4, r5, pc}
   19bec:	4c0f      	ldr	r4, [pc, #60]	; (19c2c <gnss_interface_close+0x58>)
   19bee:	6823      	ldr	r3, [r4, #0]
   19bf0:	b29b      	uxth	r3, r3
   19bf2:	2b04      	cmp	r3, #4
   19bf4:	d108      	bne.n	19c08 <gnss_interface_close+0x34>
   19bf6:	2200      	movs	r2, #0
   19bf8:	9300      	str	r3, [sp, #0]
   19bfa:	9203      	str	r2, [sp, #12]
   19bfc:	f44f 7101 	mov.w	r1, #516	; 0x204
   19c00:	2208      	movs	r2, #8
   19c02:	ab03      	add	r3, sp, #12
   19c04:	f008 fd1c 	bl	22640 <nrf_setsockopt>
   19c08:	4d09      	ldr	r5, [pc, #36]	; (19c30 <gnss_interface_close+0x5c>)
   19c0a:	6828      	ldr	r0, [r5, #0]
   19c0c:	b118      	cbz	r0, 19c16 <gnss_interface_close+0x42>
   19c0e:	f008 fbc8 	bl	223a2 <packet_handler_delete>
   19c12:	2300      	movs	r3, #0
   19c14:	602b      	str	r3, [r5, #0]
   19c16:	6823      	ldr	r3, [r4, #0]
   19c18:	2000      	movs	r0, #0
   19c1a:	0c1b      	lsrs	r3, r3, #16
   19c1c:	041b      	lsls	r3, r3, #16
   19c1e:	f043 0301 	orr.w	r3, r3, #1
   19c22:	6023      	str	r3, [r4, #0]
   19c24:	e7e0      	b.n	19be8 <gnss_interface_close+0x14>
   19c26:	bf00      	nop
   19c28:	49765443 	.word	0x49765443
   19c2c:	20016bb8 	.word	0x20016bb8
   19c30:	20016bc0 	.word	0x20016bc0

00019c34 <rpc_gnss2_event_handler>:
   19c34:	b570      	push	{r4, r5, r6, lr}
   19c36:	6804      	ldr	r4, [r0, #0]
   19c38:	4606      	mov	r6, r0
   19c3a:	2c00      	cmp	r4, #0
   19c3c:	d04c      	beq.n	19cd8 <rpc_gnss2_event_handler+0xa4>
   19c3e:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   19c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   19c46:	d114      	bne.n	19c72 <rpc_gnss2_event_handler+0x3e>
   19c48:	4b3e      	ldr	r3, [pc, #248]	; (19d44 <rpc_gnss2_event_handler+0x110>)
   19c4a:	681a      	ldr	r2, [r3, #0]
   19c4c:	2a03      	cmp	r2, #3
   19c4e:	d10a      	bne.n	19c66 <rpc_gnss2_event_handler+0x32>
   19c50:	4a3d      	ldr	r2, [pc, #244]	; (19d48 <rpc_gnss2_event_handler+0x114>)
   19c52:	6821      	ldr	r1, [r4, #0]
   19c54:	8812      	ldrh	r2, [r2, #0]
   19c56:	ebb2 4f11 	cmp.w	r2, r1, lsr #16
   19c5a:	d104      	bne.n	19c66 <rpc_gnss2_event_handler+0x32>
   19c5c:	6862      	ldr	r2, [r4, #4]
   19c5e:	b932      	cbnz	r2, 19c6e <rpc_gnss2_event_handler+0x3a>
   19c60:	4a3a      	ldr	r2, [pc, #232]	; (19d4c <rpc_gnss2_event_handler+0x118>)
   19c62:	6812      	ldr	r2, [r2, #0]
   19c64:	601a      	str	r2, [r3, #0]
   19c66:	6830      	ldr	r0, [r6, #0]
   19c68:	f007 fc2b 	bl	214c2 <rpc_gnss_client_data_free>
   19c6c:	e034      	b.n	19cd8 <rpc_gnss2_event_handler+0xa4>
   19c6e:	2204      	movs	r2, #4
   19c70:	e7f8      	b.n	19c64 <rpc_gnss2_event_handler+0x30>
   19c72:	4d37      	ldr	r5, [pc, #220]	; (19d50 <rpc_gnss2_event_handler+0x11c>)
   19c74:	682b      	ldr	r3, [r5, #0]
   19c76:	2b00      	cmp	r3, #0
   19c78:	d0f5      	beq.n	19c66 <rpc_gnss2_event_handler+0x32>
   19c7a:	f244 0204 	movw	r2, #16388	; 0x4004
   19c7e:	4291      	cmp	r1, r2
   19c80:	d80b      	bhi.n	19c9a <rpc_gnss2_event_handler+0x66>
   19c82:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   19c86:	d9ee      	bls.n	19c66 <rpc_gnss2_event_handler+0x32>
   19c88:	f5a1 4180 	sub.w	r1, r1, #16384	; 0x4000
   19c8c:	3902      	subs	r1, #2
   19c8e:	2902      	cmp	r1, #2
   19c90:	d824      	bhi.n	19cdc <rpc_gnss2_event_handler+0xa8>
   19c92:	e8df f001 	tbb	[pc, r1]
   19c96:	3c32      	.short	0x3c32
   19c98:	46          	.byte	0x46
   19c99:	00          	.byte	0x00
   19c9a:	f244 1301 	movw	r3, #16641	; 0x4101
   19c9e:	4299      	cmp	r1, r3
   19ca0:	d1e1      	bne.n	19c66 <rpc_gnss2_event_handler+0x32>
   19ca2:	4e2c      	ldr	r6, [pc, #176]	; (19d54 <rpc_gnss2_event_handler+0x120>)
   19ca4:	6830      	ldr	r0, [r6, #0]
   19ca6:	b108      	cbz	r0, 19cac <rpc_gnss2_event_handler+0x78>
   19ca8:	f007 fc0b 	bl	214c2 <rpc_gnss_client_data_free>
   19cac:	6034      	str	r4, [r6, #0]
   19cae:	f894 4041 	ldrb.w	r4, [r4, #65]	; 0x41
   19cb2:	07e3      	lsls	r3, r4, #31
   19cb4:	d502      	bpl.n	19cbc <rpc_gnss2_event_handler+0x88>
   19cb6:	2002      	movs	r0, #2
   19cb8:	682b      	ldr	r3, [r5, #0]
   19cba:	4798      	blx	r3
   19cbc:	4e26      	ldr	r6, [pc, #152]	; (19d58 <rpc_gnss2_event_handler+0x124>)
   19cbe:	f014 0418 	ands.w	r4, r4, #24
   19cc2:	682b      	ldr	r3, [r5, #0]
   19cc4:	7832      	ldrb	r2, [r6, #0]
   19cc6:	d012      	beq.n	19cee <rpc_gnss2_event_handler+0xba>
   19cc8:	b91a      	cbnz	r2, 19cd2 <rpc_gnss2_event_handler+0x9e>
   19cca:	2005      	movs	r0, #5
   19ccc:	4798      	blx	r3
   19cce:	2301      	movs	r3, #1
   19cd0:	7033      	strb	r3, [r6, #0]
   19cd2:	2001      	movs	r0, #1
   19cd4:	682b      	ldr	r3, [r5, #0]
   19cd6:	4798      	blx	r3
   19cd8:	2000      	movs	r0, #0
   19cda:	bd70      	pop	{r4, r5, r6, pc}
   19cdc:	4e1f      	ldr	r6, [pc, #124]	; (19d5c <rpc_gnss2_event_handler+0x128>)
   19cde:	6830      	ldr	r0, [r6, #0]
   19ce0:	b108      	cbz	r0, 19ce6 <rpc_gnss2_event_handler+0xb2>
   19ce2:	f007 fbee 	bl	214c2 <rpc_gnss_client_data_free>
   19ce6:	6034      	str	r4, [r6, #0]
   19ce8:	f894 403d 	ldrb.w	r4, [r4, #61]	; 0x3d
   19cec:	e7e1      	b.n	19cb2 <rpc_gnss2_event_handler+0x7e>
   19cee:	2a00      	cmp	r2, #0
   19cf0:	d0ef      	beq.n	19cd2 <rpc_gnss2_event_handler+0x9e>
   19cf2:	2006      	movs	r0, #6
   19cf4:	4798      	blx	r3
   19cf6:	7034      	strb	r4, [r6, #0]
   19cf8:	e7eb      	b.n	19cd2 <rpc_gnss2_event_handler+0x9e>
   19cfa:	4c19      	ldr	r4, [pc, #100]	; (19d60 <rpc_gnss2_event_handler+0x12c>)
   19cfc:	6820      	ldr	r0, [r4, #0]
   19cfe:	b108      	cbz	r0, 19d04 <rpc_gnss2_event_handler+0xd0>
   19d00:	f007 fbdf 	bl	214c2 <rpc_gnss_client_data_free>
   19d04:	6833      	ldr	r3, [r6, #0]
   19d06:	2003      	movs	r0, #3
   19d08:	6023      	str	r3, [r4, #0]
   19d0a:	682b      	ldr	r3, [r5, #0]
   19d0c:	e7e3      	b.n	19cd6 <rpc_gnss2_event_handler+0xa2>
   19d0e:	4c15      	ldr	r4, [pc, #84]	; (19d64 <rpc_gnss2_event_handler+0x130>)
   19d10:	6820      	ldr	r0, [r4, #0]
   19d12:	b108      	cbz	r0, 19d18 <rpc_gnss2_event_handler+0xe4>
   19d14:	f007 fbd5 	bl	214c2 <rpc_gnss_client_data_free>
   19d18:	6833      	ldr	r3, [r6, #0]
   19d1a:	2004      	movs	r0, #4
   19d1c:	6023      	str	r3, [r4, #0]
   19d1e:	682b      	ldr	r3, [r5, #0]
   19d20:	e7d9      	b.n	19cd6 <rpc_gnss2_event_handler+0xa2>
   19d22:	7822      	ldrb	r2, [r4, #0]
   19d24:	2a03      	cmp	r2, #3
   19d26:	d89e      	bhi.n	19c66 <rpc_gnss2_event_handler+0x32>
   19d28:	e8df f002 	tbb	[pc, r2]
   19d2c:	09070502 	.word	0x09070502
   19d30:	2007      	movs	r0, #7
   19d32:	4798      	blx	r3
   19d34:	e797      	b.n	19c66 <rpc_gnss2_event_handler+0x32>
   19d36:	2008      	movs	r0, #8
   19d38:	e7fb      	b.n	19d32 <rpc_gnss2_event_handler+0xfe>
   19d3a:	2009      	movs	r0, #9
   19d3c:	e7f9      	b.n	19d32 <rpc_gnss2_event_handler+0xfe>
   19d3e:	200a      	movs	r0, #10
   19d40:	e7f7      	b.n	19d32 <rpc_gnss2_event_handler+0xfe>
   19d42:	bf00      	nop
   19d44:	20016bcc 	.word	0x20016bcc
   19d48:	20016c7a 	.word	0x20016c7a
   19d4c:	20016bc8 	.word	0x20016bc8
   19d50:	20016bc4 	.word	0x20016bc4
   19d54:	20016bdc 	.word	0x20016bdc
   19d58:	20016dd0 	.word	0x20016dd0
   19d5c:	20016bd8 	.word	0x20016bd8
   19d60:	20016bd4 	.word	0x20016bd4
   19d64:	20016bd0 	.word	0x20016bd0

00019d68 <send_message>:
   19d68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   19d6a:	4605      	mov	r5, r0
   19d6c:	460e      	mov	r6, r1
   19d6e:	a803      	add	r0, sp, #12
   19d70:	4611      	mov	r1, r2
   19d72:	9201      	str	r2, [sp, #4]
   19d74:	f007 fb89 	bl	2148a <rpc_gnss_client_request_alloc>
   19d78:	4604      	mov	r4, r0
   19d7a:	bb08      	cbnz	r0, 19dc0 <send_message+0x58>
   19d7c:	4911      	ldr	r1, [pc, #68]	; (19dc4 <send_message+0x5c>)
   19d7e:	9a01      	ldr	r2, [sp, #4]
   19d80:	880b      	ldrh	r3, [r1, #0]
   19d82:	3301      	adds	r3, #1
   19d84:	b29b      	uxth	r3, r3
   19d86:	800b      	strh	r3, [r1, #0]
   19d88:	2143      	movs	r1, #67	; 0x43
   19d8a:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   19d8e:	6033      	str	r3, [r6, #0]
   19d90:	9b03      	ldr	r3, [sp, #12]
   19d92:	7319      	strb	r1, [r3, #12]
   19d94:	2154      	movs	r1, #84	; 0x54
   19d96:	7359      	strb	r1, [r3, #13]
   19d98:	2176      	movs	r1, #118	; 0x76
   19d9a:	7399      	strb	r1, [r3, #14]
   19d9c:	2149      	movs	r1, #73	; 0x49
   19d9e:	7218      	strb	r0, [r3, #8]
   19da0:	7258      	strb	r0, [r3, #9]
   19da2:	7298      	strb	r0, [r3, #10]
   19da4:	72d8      	strb	r0, [r3, #11]
   19da6:	73d9      	strb	r1, [r3, #15]
   19da8:	6818      	ldr	r0, [r3, #0]
   19daa:	4631      	mov	r1, r6
   19dac:	605a      	str	r2, [r3, #4]
   19dae:	f009 f8e2 	bl	22f76 <memcpy>
   19db2:	9803      	ldr	r0, [sp, #12]
   19db4:	4629      	mov	r1, r5
   19db6:	f007 fb77 	bl	214a8 <rpc_gnss_client_request_send>
   19dba:	4620      	mov	r0, r4
   19dbc:	b004      	add	sp, #16
   19dbe:	bd70      	pop	{r4, r5, r6, pc}
   19dc0:	2023      	movs	r0, #35	; 0x23
   19dc2:	e7fb      	b.n	19dbc <send_message+0x54>
   19dc4:	20016c7a 	.word	0x20016c7a

00019dc8 <send_configuration>:
   19dc8:	2303      	movs	r3, #3
   19dca:	b5f0      	push	{r4, r5, r6, r7, lr}
   19dcc:	4e11      	ldr	r6, [pc, #68]	; (19e14 <send_configuration+0x4c>)
   19dce:	b085      	sub	sp, #20
   19dd0:	6834      	ldr	r4, [r6, #0]
   19dd2:	6033      	str	r3, [r6, #0]
   19dd4:	4b10      	ldr	r3, [pc, #64]	; (19e18 <send_configuration+0x50>)
   19dd6:	9101      	str	r1, [sp, #4]
   19dd8:	601a      	str	r2, [r3, #0]
   19dda:	2214      	movs	r2, #20
   19ddc:	f7ff ffc4 	bl	19d68 <send_message>
   19de0:	4637      	mov	r7, r6
   19de2:	4605      	mov	r5, r0
   19de4:	b120      	cbz	r0, 19df0 <send_configuration+0x28>
   19de6:	b2e4      	uxtb	r4, r4
   19de8:	6034      	str	r4, [r6, #0]
   19dea:	4628      	mov	r0, r5
   19dec:	b005      	add	sp, #20
   19dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19df0:	f04f 33ff 	mov.w	r3, #4294967295
   19df4:	9303      	str	r3, [sp, #12]
   19df6:	a903      	add	r1, sp, #12
   19df8:	a801      	add	r0, sp, #4
   19dfa:	f006 fa1c 	bl	20236 <nrf_modem_os_timedwait>
   19dfe:	683b      	ldr	r3, [r7, #0]
   19e00:	2b03      	cmp	r3, #3
   19e02:	d0f8      	beq.n	19df6 <send_configuration+0x2e>
   19e04:	683b      	ldr	r3, [r7, #0]
   19e06:	2b04      	cmp	r3, #4
   19e08:	bf02      	ittt	eq
   19e0a:	b2e4      	uxtbeq	r4, r4
   19e0c:	2516      	moveq	r5, #22
   19e0e:	603c      	streq	r4, [r7, #0]
   19e10:	e7eb      	b.n	19dea <send_configuration+0x22>
   19e12:	bf00      	nop
   19e14:	20016bcc 	.word	0x20016bcc
   19e18:	20016bc8 	.word	0x20016bc8

00019e1c <ntf_api_version_set>:
   19e1c:	b510      	push	{r4, lr}
   19e1e:	b086      	sub	sp, #24
   19e20:	4604      	mov	r4, r0
   19e22:	2214      	movs	r2, #20
   19e24:	2100      	movs	r1, #0
   19e26:	a801      	add	r0, sp, #4
   19e28:	f009 f8c5 	bl	22fb6 <memset>
   19e2c:	2305      	movs	r3, #5
   19e2e:	f88d 3008 	strb.w	r3, [sp, #8]
   19e32:	4b06      	ldr	r3, [pc, #24]	; (19e4c <ntf_api_version_set+0x30>)
   19e34:	a901      	add	r1, sp, #4
   19e36:	681a      	ldr	r2, [r3, #0]
   19e38:	f241 0004 	movw	r0, #4100	; 0x1004
   19e3c:	b2d2      	uxtb	r2, r2
   19e3e:	f8cd 4009 	str.w	r4, [sp, #9]
   19e42:	f7ff ffc1 	bl	19dc8 <send_configuration>
   19e46:	b006      	add	sp, #24
   19e48:	bd10      	pop	{r4, pc}
   19e4a:	bf00      	nop
   19e4c:	20016bcc 	.word	0x20016bcc

00019e50 <signal_ntf_subscribe>:
   19e50:	b510      	push	{r4, lr}
   19e52:	b086      	sub	sp, #24
   19e54:	4604      	mov	r4, r0
   19e56:	2214      	movs	r2, #20
   19e58:	2100      	movs	r1, #0
   19e5a:	a801      	add	r0, sp, #4
   19e5c:	f009 f8ab 	bl	22fb6 <memset>
   19e60:	2380      	movs	r3, #128	; 0x80
   19e62:	9302      	str	r3, [sp, #8]
   19e64:	4b05      	ldr	r3, [pc, #20]	; (19e7c <signal_ntf_subscribe+0x2c>)
   19e66:	a901      	add	r1, sp, #4
   19e68:	681a      	ldr	r2, [r3, #0]
   19e6a:	f241 2003 	movw	r0, #4611	; 0x1203
   19e6e:	b2d2      	uxtb	r2, r2
   19e70:	f88d 4016 	strb.w	r4, [sp, #22]
   19e74:	f7ff ffa8 	bl	19dc8 <send_configuration>
   19e78:	b006      	add	sp, #24
   19e7a:	bd10      	pop	{r4, pc}
   19e7c:	20016bcc 	.word	0x20016bcc

00019e80 <rpc_api_configure.part.0>:
   19e80:	b510      	push	{r4, lr}
   19e82:	2001      	movs	r0, #1
   19e84:	f7ff ffca 	bl	19e1c <ntf_api_version_set>
   19e88:	4604      	mov	r4, r0
   19e8a:	2001      	movs	r0, #1
   19e8c:	f7ff ffe0 	bl	19e50 <signal_ntf_subscribe>
   19e90:	ea54 0300 	orrs.w	r3, r4, r0
   19e94:	bf02      	ittt	eq
   19e96:	2201      	moveq	r2, #1
   19e98:	4b01      	ldreq	r3, [pc, #4]	; (19ea0 <rpc_api_configure.part.0+0x20>)
   19e9a:	701a      	strbeq	r2, [r3, #0]
   19e9c:	bd10      	pop	{r4, pc}
   19e9e:	bf00      	nop
   19ea0:	20016dd1 	.word	0x20016dd1

00019ea4 <nrf_modem_gnss_read>:
   19ea4:	4b89      	ldr	r3, [pc, #548]	; (1a0cc <nrf_modem_gnss_read+0x228>)
   19ea6:	b570      	push	{r4, r5, r6, lr}
   19ea8:	681b      	ldr	r3, [r3, #0]
   19eaa:	4604      	mov	r4, r0
   19eac:	2b00      	cmp	r3, #0
   19eae:	f000 8107 	beq.w	1a0c0 <nrf_modem_gnss_read+0x21c>
   19eb2:	2800      	cmp	r0, #0
   19eb4:	f000 8106 	beq.w	1a0c4 <nrf_modem_gnss_read+0x220>
   19eb8:	2a02      	cmp	r2, #2
   19eba:	f000 80e3 	beq.w	1a084 <nrf_modem_gnss_read+0x1e0>
   19ebe:	2a03      	cmp	r2, #3
   19ec0:	f000 80ee 	beq.w	1a0a0 <nrf_modem_gnss_read+0x1fc>
   19ec4:	2a01      	cmp	r2, #1
   19ec6:	f040 80fd 	bne.w	1a0c4 <nrf_modem_gnss_read+0x220>
   19eca:	29d7      	cmp	r1, #215	; 0xd7
   19ecc:	f240 80fc 	bls.w	1a0c8 <nrf_modem_gnss_read+0x224>
   19ed0:	f007 fa20 	bl	21314 <rpc_transport_rx_data_suspend>
   19ed4:	4b7e      	ldr	r3, [pc, #504]	; (1a0d0 <nrf_modem_gnss_read+0x22c>)
   19ed6:	681b      	ldr	r3, [r3, #0]
   19ed8:	2b00      	cmp	r3, #0
   19eda:	d068      	beq.n	19fae <nrf_modem_gnss_read+0x10a>
   19edc:	6858      	ldr	r0, [r3, #4]
   19ede:	6899      	ldr	r1, [r3, #8]
   19ee0:	260a      	movs	r6, #10
   19ee2:	e9c4 0100 	strd	r0, r1, [r4]
   19ee6:	6919      	ldr	r1, [r3, #16]
   19ee8:	68d8      	ldr	r0, [r3, #12]
   19eea:	e9c4 0102 	strd	r0, r1, [r4, #8]
   19eee:	695a      	ldr	r2, [r3, #20]
   19ef0:	6122      	str	r2, [r4, #16]
   19ef2:	699a      	ldr	r2, [r3, #24]
   19ef4:	6162      	str	r2, [r4, #20]
   19ef6:	69da      	ldr	r2, [r3, #28]
   19ef8:	61a2      	str	r2, [r4, #24]
   19efa:	6a1a      	ldr	r2, [r3, #32]
   19efc:	61e2      	str	r2, [r4, #28]
   19efe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   19f00:	6222      	str	r2, [r4, #32]
   19f02:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
   19f06:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
   19f0a:	f8d3 2031 	ldr.w	r2, [r3, #49]	; 0x31
   19f0e:	6322      	str	r2, [r4, #48]	; 0x30
   19f10:	f8d3 2035 	ldr.w	r2, [r3, #53]	; 0x35
   19f14:	6362      	str	r2, [r4, #52]	; 0x34
   19f16:	f8d3 2039 	ldr.w	r2, [r3, #57]	; 0x39
   19f1a:	63a2      	str	r2, [r4, #56]	; 0x38
   19f1c:	f8d3 203d 	ldr.w	r2, [r3, #61]	; 0x3d
   19f20:	63e2      	str	r2, [r4, #60]	; 0x3c
   19f22:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
   19f26:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   19f2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   19f2e:	84a2      	strh	r2, [r4, #36]	; 0x24
   19f30:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   19f34:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
   19f38:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
   19f3c:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
   19f40:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
   19f44:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
   19f48:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
   19f4c:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
   19f50:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   19f54:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
   19f58:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
   19f5c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
   19f60:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   19f64:	85a2      	strh	r2, [r4, #44]	; 0x2c
   19f66:	4619      	mov	r1, r3
   19f68:	2200      	movs	r2, #0
   19f6a:	fb06 3002 	mla	r0, r6, r2, r3
   19f6e:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
   19f72:	3201      	adds	r2, #1
   19f74:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
   19f78:	f891 5044 	ldrb.w	r5, [r1, #68]	; 0x44
   19f7c:	2a0c      	cmp	r2, #12
   19f7e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
   19f82:	f8b0 5045 	ldrh.w	r5, [r0, #69]	; 0x45
   19f86:	f104 040c 	add.w	r4, r4, #12
   19f8a:	8765      	strh	r5, [r4, #58]	; 0x3a
   19f8c:	f9b0 5047 	ldrsh.w	r5, [r0, #71]	; 0x47
   19f90:	f101 010a 	add.w	r1, r1, #10
   19f94:	87a5      	strh	r5, [r4, #60]	; 0x3c
   19f96:	f9b0 0049 	ldrsh.w	r0, [r0, #73]	; 0x49
   19f9a:	87e0      	strh	r0, [r4, #62]	; 0x3e
   19f9c:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
   19fa0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
   19fa4:	d1e1      	bne.n	19f6a <nrf_modem_gnss_read+0xc6>
   19fa6:	f007 f9b7 	bl	21318 <rpc_transport_rx_data_resume>
   19faa:	2000      	movs	r0, #0
   19fac:	bd70      	pop	{r4, r5, r6, pc}
   19fae:	4a49      	ldr	r2, [pc, #292]	; (1a0d4 <nrf_modem_gnss_read+0x230>)
   19fb0:	6812      	ldr	r2, [r2, #0]
   19fb2:	b91a      	cbnz	r2, 19fbc <nrf_modem_gnss_read+0x118>
   19fb4:	f007 f9b0 	bl	21318 <rpc_transport_rx_data_resume>
   19fb8:	2005      	movs	r0, #5
   19fba:	e7f7      	b.n	19fac <nrf_modem_gnss_read+0x108>
   19fbc:	6850      	ldr	r0, [r2, #4]
   19fbe:	6891      	ldr	r1, [r2, #8]
   19fc0:	260a      	movs	r6, #10
   19fc2:	e9c4 0100 	strd	r0, r1, [r4]
   19fc6:	68d0      	ldr	r0, [r2, #12]
   19fc8:	6911      	ldr	r1, [r2, #16]
   19fca:	e9c4 0102 	strd	r0, r1, [r4, #8]
   19fce:	6951      	ldr	r1, [r2, #20]
   19fd0:	6121      	str	r1, [r4, #16]
   19fd2:	6991      	ldr	r1, [r2, #24]
   19fd4:	6161      	str	r1, [r4, #20]
   19fd6:	69d1      	ldr	r1, [r2, #28]
   19fd8:	61a1      	str	r1, [r4, #24]
   19fda:	2100      	movs	r1, #0
   19fdc:	61e1      	str	r1, [r4, #28]
   19fde:	6a11      	ldr	r1, [r2, #32]
   19fe0:	6221      	str	r1, [r4, #32]
   19fe2:	f892 103d 	ldrb.w	r1, [r2, #61]	; 0x3d
   19fe6:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
   19fea:	f8d2 102d 	ldr.w	r1, [r2, #45]	; 0x2d
   19fee:	6321      	str	r1, [r4, #48]	; 0x30
   19ff0:	f8d2 1031 	ldr.w	r1, [r2, #49]	; 0x31
   19ff4:	6361      	str	r1, [r4, #52]	; 0x34
   19ff6:	f8d2 1035 	ldr.w	r1, [r2, #53]	; 0x35
   19ffa:	63a1      	str	r1, [r4, #56]	; 0x38
   19ffc:	f8d2 1039 	ldr.w	r1, [r2, #57]	; 0x39
   1a000:	63e1      	str	r1, [r4, #60]	; 0x3c
   1a002:	f892 0025 	ldrb.w	r0, [r2, #37]	; 0x25
   1a006:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   1a00a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   1a00e:	84a1      	strh	r1, [r4, #36]	; 0x24
   1a010:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
   1a014:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
   1a018:	f892 1027 	ldrb.w	r1, [r2, #39]	; 0x27
   1a01c:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
   1a020:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
   1a024:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
   1a028:	f892 1029 	ldrb.w	r1, [r2, #41]	; 0x29
   1a02c:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
   1a030:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
   1a034:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
   1a038:	f892 102b 	ldrb.w	r1, [r2, #43]	; 0x2b
   1a03c:	f892 002c 	ldrb.w	r0, [r2, #44]	; 0x2c
   1a040:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   1a044:	85a1      	strh	r1, [r4, #44]	; 0x2c
   1a046:	4611      	mov	r1, r2
   1a048:	fb06 2003 	mla	r0, r6, r3, r2
   1a04c:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
   1a04e:	3301      	adds	r3, #1
   1a050:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
   1a054:	f891 5040 	ldrb.w	r5, [r1, #64]	; 0x40
   1a058:	2b0c      	cmp	r3, #12
   1a05a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
   1a05e:	f8b0 5041 	ldrh.w	r5, [r0, #65]	; 0x41
   1a062:	f104 040c 	add.w	r4, r4, #12
   1a066:	8765      	strh	r5, [r4, #58]	; 0x3a
   1a068:	f9b0 5043 	ldrsh.w	r5, [r0, #67]	; 0x43
   1a06c:	f101 010a 	add.w	r1, r1, #10
   1a070:	87a5      	strh	r5, [r4, #60]	; 0x3c
   1a072:	f9b0 0045 	ldrsh.w	r0, [r0, #69]	; 0x45
   1a076:	87e0      	strh	r0, [r4, #62]	; 0x3e
   1a078:	f891 003d 	ldrb.w	r0, [r1, #61]	; 0x3d
   1a07c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
   1a080:	d1e2      	bne.n	1a048 <nrf_modem_gnss_read+0x1a4>
   1a082:	e790      	b.n	19fa6 <nrf_modem_gnss_read+0x102>
   1a084:	2952      	cmp	r1, #82	; 0x52
   1a086:	d91f      	bls.n	1a0c8 <nrf_modem_gnss_read+0x224>
   1a088:	4d13      	ldr	r5, [pc, #76]	; (1a0d8 <nrf_modem_gnss_read+0x234>)
   1a08a:	682b      	ldr	r3, [r5, #0]
   1a08c:	2b00      	cmp	r3, #0
   1a08e:	d093      	beq.n	19fb8 <nrf_modem_gnss_read+0x114>
   1a090:	f007 f940 	bl	21314 <rpc_transport_rx_data_suspend>
   1a094:	2253      	movs	r2, #83	; 0x53
   1a096:	4620      	mov	r0, r4
   1a098:	6829      	ldr	r1, [r5, #0]
   1a09a:	f008 ff6c 	bl	22f76 <memcpy>
   1a09e:	e782      	b.n	19fa6 <nrf_modem_gnss_read+0x102>
   1a0a0:	290b      	cmp	r1, #11
   1a0a2:	d911      	bls.n	1a0c8 <nrf_modem_gnss_read+0x224>
   1a0a4:	4d0d      	ldr	r5, [pc, #52]	; (1a0dc <nrf_modem_gnss_read+0x238>)
   1a0a6:	682b      	ldr	r3, [r5, #0]
   1a0a8:	2b00      	cmp	r3, #0
   1a0aa:	d085      	beq.n	19fb8 <nrf_modem_gnss_read+0x114>
   1a0ac:	f007 f932 	bl	21314 <rpc_transport_rx_data_suspend>
   1a0b0:	682b      	ldr	r3, [r5, #0]
   1a0b2:	681a      	ldr	r2, [r3, #0]
   1a0b4:	6022      	str	r2, [r4, #0]
   1a0b6:	685a      	ldr	r2, [r3, #4]
   1a0b8:	6062      	str	r2, [r4, #4]
   1a0ba:	891b      	ldrh	r3, [r3, #8]
   1a0bc:	60a3      	str	r3, [r4, #8]
   1a0be:	e772      	b.n	19fa6 <nrf_modem_gnss_read+0x102>
   1a0c0:	2001      	movs	r0, #1
   1a0c2:	e773      	b.n	19fac <nrf_modem_gnss_read+0x108>
   1a0c4:	2016      	movs	r0, #22
   1a0c6:	e771      	b.n	19fac <nrf_modem_gnss_read+0x108>
   1a0c8:	2028      	movs	r0, #40	; 0x28
   1a0ca:	e76f      	b.n	19fac <nrf_modem_gnss_read+0x108>
   1a0cc:	20016bcc 	.word	0x20016bcc
   1a0d0:	20016bdc 	.word	0x20016bdc
   1a0d4:	20016bd8 	.word	0x20016bd8
   1a0d8:	20016bd4 	.word	0x20016bd4
   1a0dc:	20016bd0 	.word	0x20016bd0

0001a0e0 <nrf_modem_gnss_init>:
   1a0e0:	b538      	push	{r3, r4, r5, lr}
   1a0e2:	4d0a      	ldr	r5, [pc, #40]	; (1a10c <nrf_modem_gnss_init+0x2c>)
   1a0e4:	682c      	ldr	r4, [r5, #0]
   1a0e6:	b96c      	cbnz	r4, 1a104 <nrf_modem_gnss_init+0x24>
   1a0e8:	4b09      	ldr	r3, [pc, #36]	; (1a110 <nrf_modem_gnss_init+0x30>)
   1a0ea:	480a      	ldr	r0, [pc, #40]	; (1a114 <nrf_modem_gnss_init+0x34>)
   1a0ec:	801c      	strh	r4, [r3, #0]
   1a0ee:	f7fd f8f5 	bl	172dc <rpc_gnss_client_set_handler>
   1a0f2:	2301      	movs	r3, #1
   1a0f4:	602b      	str	r3, [r5, #0]
   1a0f6:	4b08      	ldr	r3, [pc, #32]	; (1a118 <nrf_modem_gnss_init+0x38>)
   1a0f8:	781d      	ldrb	r5, [r3, #0]
   1a0fa:	b92d      	cbnz	r5, 1a108 <nrf_modem_gnss_init+0x28>
   1a0fc:	f7ff fec0 	bl	19e80 <rpc_api_configure.part.0>
   1a100:	4628      	mov	r0, r5
   1a102:	bd38      	pop	{r3, r4, r5, pc}
   1a104:	2001      	movs	r0, #1
   1a106:	e7fc      	b.n	1a102 <nrf_modem_gnss_init+0x22>
   1a108:	4620      	mov	r0, r4
   1a10a:	e7fa      	b.n	1a102 <nrf_modem_gnss_init+0x22>
   1a10c:	20016bcc 	.word	0x20016bcc
   1a110:	20016c7a 	.word	0x20016c7a
   1a114:	00019c35 	.word	0x00019c35
   1a118:	20016dd1 	.word	0x20016dd1

0001a11c <nrf_modem_gnss_start>:
   1a11c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1a11e:	4b0e      	ldr	r3, [pc, #56]	; (1a158 <nrf_modem_gnss_start+0x3c>)
   1a120:	681b      	ldr	r3, [r3, #0]
   1a122:	2b01      	cmp	r3, #1
   1a124:	d115      	bne.n	1a152 <nrf_modem_gnss_start+0x36>
   1a126:	4b0d      	ldr	r3, [pc, #52]	; (1a15c <nrf_modem_gnss_start+0x40>)
   1a128:	781b      	ldrb	r3, [r3, #0]
   1a12a:	b90b      	cbnz	r3, 1a130 <nrf_modem_gnss_start+0x14>
   1a12c:	f7ff fea8 	bl	19e80 <rpc_api_configure.part.0>
   1a130:	2214      	movs	r2, #20
   1a132:	2100      	movs	r1, #0
   1a134:	a801      	add	r0, sp, #4
   1a136:	f008 ff3e 	bl	22fb6 <memset>
   1a13a:	2301      	movs	r3, #1
   1a13c:	2202      	movs	r2, #2
   1a13e:	f241 0004 	movw	r0, #4100	; 0x1004
   1a142:	a901      	add	r1, sp, #4
   1a144:	f88d 3008 	strb.w	r3, [sp, #8]
   1a148:	f7ff fe3e 	bl	19dc8 <send_configuration>
   1a14c:	b007      	add	sp, #28
   1a14e:	f85d fb04 	ldr.w	pc, [sp], #4
   1a152:	2001      	movs	r0, #1
   1a154:	e7fa      	b.n	1a14c <nrf_modem_gnss_start+0x30>
   1a156:	bf00      	nop
   1a158:	20016bcc 	.word	0x20016bcc
   1a15c:	20016dd1 	.word	0x20016dd1

0001a160 <nrf_modem_gnss_fix_interval_set>:
   1a160:	b530      	push	{r4, r5, lr}
   1a162:	4b0c      	ldr	r3, [pc, #48]	; (1a194 <nrf_modem_gnss_fix_interval_set+0x34>)
   1a164:	4604      	mov	r4, r0
   1a166:	681d      	ldr	r5, [r3, #0]
   1a168:	b087      	sub	sp, #28
   1a16a:	2d01      	cmp	r5, #1
   1a16c:	d110      	bne.n	1a190 <nrf_modem_gnss_fix_interval_set+0x30>
   1a16e:	2214      	movs	r2, #20
   1a170:	2100      	movs	r1, #0
   1a172:	a801      	add	r0, sp, #4
   1a174:	f008 ff1f 	bl	22fb6 <memset>
   1a178:	2308      	movs	r3, #8
   1a17a:	462a      	mov	r2, r5
   1a17c:	f241 1003 	movw	r0, #4355	; 0x1103
   1a180:	a901      	add	r1, sp, #4
   1a182:	9302      	str	r3, [sp, #8]
   1a184:	f8ad 400f 	strh.w	r4, [sp, #15]
   1a188:	f7ff fe1e 	bl	19dc8 <send_configuration>
   1a18c:	b007      	add	sp, #28
   1a18e:	bd30      	pop	{r4, r5, pc}
   1a190:	2001      	movs	r0, #1
   1a192:	e7fb      	b.n	1a18c <nrf_modem_gnss_fix_interval_set+0x2c>
   1a194:	20016bcc 	.word	0x20016bcc

0001a198 <nrf_modem_gnss_fix_retry_set>:
   1a198:	b530      	push	{r4, r5, lr}
   1a19a:	4b0c      	ldr	r3, [pc, #48]	; (1a1cc <nrf_modem_gnss_fix_retry_set+0x34>)
   1a19c:	4604      	mov	r4, r0
   1a19e:	681d      	ldr	r5, [r3, #0]
   1a1a0:	b087      	sub	sp, #28
   1a1a2:	2d01      	cmp	r5, #1
   1a1a4:	d110      	bne.n	1a1c8 <nrf_modem_gnss_fix_retry_set+0x30>
   1a1a6:	2214      	movs	r2, #20
   1a1a8:	2100      	movs	r1, #0
   1a1aa:	a801      	add	r0, sp, #4
   1a1ac:	f008 ff03 	bl	22fb6 <memset>
   1a1b0:	2310      	movs	r3, #16
   1a1b2:	462a      	mov	r2, r5
   1a1b4:	f241 1003 	movw	r0, #4355	; 0x1103
   1a1b8:	a901      	add	r1, sp, #4
   1a1ba:	9302      	str	r3, [sp, #8]
   1a1bc:	f8ad 4011 	strh.w	r4, [sp, #17]
   1a1c0:	f7ff fe02 	bl	19dc8 <send_configuration>
   1a1c4:	b007      	add	sp, #28
   1a1c6:	bd30      	pop	{r4, r5, pc}
   1a1c8:	2001      	movs	r0, #1
   1a1ca:	e7fb      	b.n	1a1c4 <nrf_modem_gnss_fix_retry_set+0x2c>
   1a1cc:	20016bcc 	.word	0x20016bcc

0001a1d0 <nrf_modem_gnss_nmea_mask_set>:
   1a1d0:	b530      	push	{r4, r5, lr}
   1a1d2:	4b0c      	ldr	r3, [pc, #48]	; (1a204 <nrf_modem_gnss_nmea_mask_set+0x34>)
   1a1d4:	4604      	mov	r4, r0
   1a1d6:	681d      	ldr	r5, [r3, #0]
   1a1d8:	b087      	sub	sp, #28
   1a1da:	2d01      	cmp	r5, #1
   1a1dc:	d110      	bne.n	1a200 <nrf_modem_gnss_nmea_mask_set+0x30>
   1a1de:	2214      	movs	r2, #20
   1a1e0:	2100      	movs	r1, #0
   1a1e2:	a801      	add	r0, sp, #4
   1a1e4:	f008 fee7 	bl	22fb6 <memset>
   1a1e8:	2320      	movs	r3, #32
   1a1ea:	462a      	mov	r2, r5
   1a1ec:	f241 1003 	movw	r0, #4355	; 0x1103
   1a1f0:	a901      	add	r1, sp, #4
   1a1f2:	9302      	str	r3, [sp, #8]
   1a1f4:	f8ad 4013 	strh.w	r4, [sp, #19]
   1a1f8:	f7ff fde6 	bl	19dc8 <send_configuration>
   1a1fc:	b007      	add	sp, #28
   1a1fe:	bd30      	pop	{r4, r5, pc}
   1a200:	2001      	movs	r0, #1
   1a202:	e7fb      	b.n	1a1fc <nrf_modem_gnss_nmea_mask_set+0x2c>
   1a204:	20016bcc 	.word	0x20016bcc

0001a208 <nrf_modem_gnss_event_handler_set>:
   1a208:	4b04      	ldr	r3, [pc, #16]	; (1a21c <nrf_modem_gnss_event_handler_set+0x14>)
   1a20a:	681b      	ldr	r3, [r3, #0]
   1a20c:	2b01      	cmp	r3, #1
   1a20e:	bf03      	ittte	eq
   1a210:	4b03      	ldreq	r3, [pc, #12]	; (1a220 <nrf_modem_gnss_event_handler_set+0x18>)
   1a212:	6018      	streq	r0, [r3, #0]
   1a214:	2000      	moveq	r0, #0
   1a216:	2001      	movne	r0, #1
   1a218:	4770      	bx	lr
   1a21a:	bf00      	nop
   1a21c:	20016bcc 	.word	0x20016bcc
   1a220:	20016bc4 	.word	0x20016bc4

0001a224 <handle_verify_and_covert>:
   1a224:	4a0b      	ldr	r2, [pc, #44]	; (1a254 <handle_verify_and_covert+0x30>)
   1a226:	0c03      	lsrs	r3, r0, #16
   1a228:	041b      	lsls	r3, r3, #16
   1a22a:	4293      	cmp	r3, r2
   1a22c:	d10f      	bne.n	1a24e <handle_verify_and_covert+0x2a>
   1a22e:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   1a232:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   1a236:	2809      	cmp	r0, #9
   1a238:	dc09      	bgt.n	1a24e <handle_verify_and_covert+0x2a>
   1a23a:	4b07      	ldr	r3, [pc, #28]	; (1a258 <handle_verify_and_covert+0x34>)
   1a23c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a240:	b12b      	cbz	r3, 1a24e <handle_verify_and_covert+0x2a>
   1a242:	689b      	ldr	r3, [r3, #8]
   1a244:	2b00      	cmp	r3, #0
   1a246:	bf08      	it	eq
   1a248:	f06f 0008 	mvneq.w	r0, #8
   1a24c:	4770      	bx	lr
   1a24e:	f06f 0008 	mvn.w	r0, #8
   1a252:	4770      	bx	lr
   1a254:	789a0000 	.word	0x789a0000
   1a258:	20016be4 	.word	0x20016be4

0001a25c <command_write>:
   1a25c:	4b0c      	ldr	r3, [pc, #48]	; (1a290 <command_write+0x34>)
   1a25e:	b513      	push	{r0, r1, r4, lr}
   1a260:	480c      	ldr	r0, [pc, #48]	; (1a294 <command_write+0x38>)
   1a262:	681c      	ldr	r4, [r3, #0]
   1a264:	f7f6 fe04 	bl	10e70 <strlen>
   1a268:	2300      	movs	r3, #0
   1a26a:	4602      	mov	r2, r0
   1a26c:	e9cd 3300 	strd	r3, r3, [sp]
   1a270:	4908      	ldr	r1, [pc, #32]	; (1a294 <command_write+0x38>)
   1a272:	4620      	mov	r0, r4
   1a274:	f007 fde2 	bl	21e3c <at_interface_write>
   1a278:	4604      	mov	r4, r0
   1a27a:	4806      	ldr	r0, [pc, #24]	; (1a294 <command_write+0x38>)
   1a27c:	f7f6 fdf8 	bl	10e70 <strlen>
   1a280:	42a0      	cmp	r0, r4
   1a282:	bf14      	ite	ne
   1a284:	f06f 0004 	mvnne.w	r0, #4
   1a288:	2000      	moveq	r0, #0
   1a28a:	b002      	add	sp, #8
   1a28c:	bd10      	pop	{r4, pc}
   1a28e:	bf00      	nop
   1a290:	20016be0 	.word	0x20016be0
   1a294:	20016dd3 	.word	0x20016dd3

0001a298 <event_wait>:
   1a298:	2300      	movs	r3, #0
   1a29a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a29e:	e9cd 3300 	strd	r3, r3, [sp]
   1a2a2:	4606      	mov	r6, r0
   1a2a4:	4818      	ldr	r0, [pc, #96]	; (1a308 <event_wait+0x70>)
   1a2a6:	460d      	mov	r5, r1
   1a2a8:	f44f 7280 	mov.w	r2, #256	; 0x100
   1a2ac:	4917      	ldr	r1, [pc, #92]	; (1a30c <event_wait+0x74>)
   1a2ae:	6800      	ldr	r0, [r0, #0]
   1a2b0:	f007 fe2e 	bl	21f10 <at_interface_read>
   1a2b4:	4c16      	ldr	r4, [pc, #88]	; (1a310 <event_wait+0x78>)
   1a2b6:	4607      	mov	r7, r0
   1a2b8:	f854 8035 	ldr.w	r8, [r4, r5, lsl #3]
   1a2bc:	4640      	mov	r0, r8
   1a2be:	f7f6 fdd7 	bl	10e70 <strlen>
   1a2c2:	4287      	cmp	r7, r0
   1a2c4:	4602      	mov	r2, r0
   1a2c6:	db0d      	blt.n	1a2e4 <event_wait+0x4c>
   1a2c8:	4640      	mov	r0, r8
   1a2ca:	4910      	ldr	r1, [pc, #64]	; (1a30c <event_wait+0x74>)
   1a2cc:	f008 fff1 	bl	232b2 <strncmp>
   1a2d0:	b940      	cbnz	r0, 1a2e4 <event_wait+0x4c>
   1a2d2:	4630      	mov	r0, r6
   1a2d4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   1a2d8:	684b      	ldr	r3, [r1, #4]
   1a2da:	490c      	ldr	r1, [pc, #48]	; (1a30c <event_wait+0x74>)
   1a2dc:	b002      	add	sp, #8
   1a2de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a2e2:	4718      	bx	r3
   1a2e4:	480b      	ldr	r0, [pc, #44]	; (1a314 <event_wait+0x7c>)
   1a2e6:	f7f6 fdc3 	bl	10e70 <strlen>
   1a2ea:	4908      	ldr	r1, [pc, #32]	; (1a30c <event_wait+0x74>)
   1a2ec:	4602      	mov	r2, r0
   1a2ee:	4809      	ldr	r0, [pc, #36]	; (1a314 <event_wait+0x7c>)
   1a2f0:	f008 ffdf 	bl	232b2 <strncmp>
   1a2f4:	2800      	cmp	r0, #0
   1a2f6:	bf14      	ite	ne
   1a2f8:	f06f 0004 	mvnne.w	r0, #4
   1a2fc:	f06f 0007 	mvneq.w	r0, #7
   1a300:	b002      	add	sp, #8
   1a302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a306:	bf00      	nop
   1a308:	20016be0 	.word	0x20016be0
   1a30c:	20016dd3 	.word	0x20016dd3
   1a310:	00024950 	.word	0x00024950
   1a314:	00024c55 	.word	0x00024c55

0001a318 <pdn_state_get_parser>:
   1a318:	2300      	movs	r3, #0
   1a31a:	b530      	push	{r4, r5, lr}
   1a31c:	4605      	mov	r5, r0
   1a31e:	460c      	mov	r4, r1
   1a320:	b085      	sub	sp, #20
   1a322:	4608      	mov	r0, r1
   1a324:	e9cd 3300 	strd	r3, r3, [sp]
   1a328:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1a32c:	f007 fea0 	bl	22070 <spaces_remove>
   1a330:	4b08      	ldr	r3, [pc, #32]	; (1a354 <pdn_state_get_parser+0x3c>)
   1a332:	4a09      	ldr	r2, [pc, #36]	; (1a358 <pdn_state_get_parser+0x40>)
   1a334:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   1a338:	2110      	movs	r1, #16
   1a33a:	681b      	ldr	r3, [r3, #0]
   1a33c:	4668      	mov	r0, sp
   1a33e:	f002 fffb 	bl	1d338 <sniprintf>
   1a342:	4669      	mov	r1, sp
   1a344:	4620      	mov	r0, r4
   1a346:	f008 ffe6 	bl	23316 <strstr>
   1a34a:	3800      	subs	r0, #0
   1a34c:	bf18      	it	ne
   1a34e:	2001      	movne	r0, #1
   1a350:	b005      	add	sp, #20
   1a352:	bd30      	pop	{r4, r5, pc}
   1a354:	20016be4 	.word	0x20016be4
   1a358:	00024c5b 	.word	0x00024c5b

0001a35c <pdn_id_get_parser>:
   1a35c:	b510      	push	{r4, lr}
   1a35e:	4604      	mov	r4, r0
   1a360:	4608      	mov	r0, r1
   1a362:	f007 fe85 	bl	22070 <spaces_remove>
   1a366:	213a      	movs	r1, #58	; 0x3a
   1a368:	f008 ff7a 	bl	23260 <strchr>
   1a36c:	b130      	cbz	r0, 1a37c <pdn_id_get_parser+0x20>
   1a36e:	3001      	adds	r0, #1
   1a370:	f008 fde1 	bl	22f36 <atoi>
   1a374:	4b02      	ldr	r3, [pc, #8]	; (1a380 <pdn_id_get_parser+0x24>)
   1a376:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1a37a:	6058      	str	r0, [r3, #4]
   1a37c:	2000      	movs	r0, #0
   1a37e:	bd10      	pop	{r4, pc}
   1a380:	20016be4 	.word	0x20016be4

0001a384 <context_create_parser>:
   1a384:	b510      	push	{r4, lr}
   1a386:	4604      	mov	r4, r0
   1a388:	4608      	mov	r0, r1
   1a38a:	f007 fe71 	bl	22070 <spaces_remove>
   1a38e:	213a      	movs	r1, #58	; 0x3a
   1a390:	f008 ff66 	bl	23260 <strchr>
   1a394:	b130      	cbz	r0, 1a3a4 <context_create_parser+0x20>
   1a396:	4b04      	ldr	r3, [pc, #16]	; (1a3a8 <context_create_parser+0x24>)
   1a398:	3001      	adds	r0, #1
   1a39a:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   1a39e:	f008 fdca 	bl	22f36 <atoi>
   1a3a2:	6020      	str	r0, [r4, #0]
   1a3a4:	2000      	movs	r0, #0
   1a3a6:	bd10      	pop	{r4, pc}
   1a3a8:	20016be4 	.word	0x20016be4

0001a3ac <connection_free>:
   1a3ac:	b538      	push	{r3, r4, r5, lr}
   1a3ae:	4d05      	ldr	r5, [pc, #20]	; (1a3c4 <connection_free+0x18>)
   1a3b0:	4604      	mov	r4, r0
   1a3b2:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   1a3b6:	f7fb f97b 	bl	156b0 <nrf_modem_os_free>
   1a3ba:	2300      	movs	r3, #0
   1a3bc:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   1a3c0:	bd38      	pop	{r3, r4, r5, pc}
   1a3c2:	bf00      	nop
   1a3c4:	20016be4 	.word	0x20016be4

0001a3c8 <pdn_id_get>:
   1a3c8:	b538      	push	{r3, r4, r5, lr}
   1a3ca:	4d0e      	ldr	r5, [pc, #56]	; (1a404 <pdn_id_get+0x3c>)
   1a3cc:	4604      	mov	r4, r0
   1a3ce:	f44f 7180 	mov.w	r1, #256	; 0x100
   1a3d2:	4b0d      	ldr	r3, [pc, #52]	; (1a408 <pdn_id_get+0x40>)
   1a3d4:	4a0d      	ldr	r2, [pc, #52]	; (1a40c <pdn_id_get+0x44>)
   1a3d6:	4628      	mov	r0, r5
   1a3d8:	f002 ffae 	bl	1d338 <sniprintf>
   1a3dc:	4b0c      	ldr	r3, [pc, #48]	; (1a410 <pdn_id_get+0x48>)
   1a3de:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1a3e2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1a3e6:	4a0b      	ldr	r2, [pc, #44]	; (1a414 <pdn_id_get+0x4c>)
   1a3e8:	681b      	ldr	r3, [r3, #0]
   1a3ea:	4428      	add	r0, r5
   1a3ec:	f002 ffa4 	bl	1d338 <sniprintf>
   1a3f0:	f7ff ff34 	bl	1a25c <command_write>
   1a3f4:	b928      	cbnz	r0, 1a402 <pdn_id_get+0x3a>
   1a3f6:	4620      	mov	r0, r4
   1a3f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1a3fc:	2102      	movs	r1, #2
   1a3fe:	f7ff bf4b 	b.w	1a298 <event_wait>
   1a402:	bd38      	pop	{r3, r4, r5, pc}
   1a404:	20016dd3 	.word	0x20016dd3
   1a408:	00024c67 	.word	0x00024c67
   1a40c:	00024c75 	.word	0x00024c75
   1a410:	20016be4 	.word	0x20016be4
   1a414:	00024c78 	.word	0x00024c78

0001a418 <pdn_interface_init>:
   1a418:	b538      	push	{r3, r4, r5, lr}
   1a41a:	f04f 34ff 	mov.w	r4, #4294967295
   1a41e:	4d0b      	ldr	r5, [pc, #44]	; (1a44c <pdn_interface_init+0x34>)
   1a420:	2228      	movs	r2, #40	; 0x28
   1a422:	2100      	movs	r1, #0
   1a424:	480a      	ldr	r0, [pc, #40]	; (1a450 <pdn_interface_init+0x38>)
   1a426:	602c      	str	r4, [r5, #0]
   1a428:	f008 fdc5 	bl	22fb6 <memset>
   1a42c:	f240 2201 	movw	r2, #513	; 0x201
   1a430:	2102      	movs	r1, #2
   1a432:	2066      	movs	r0, #102	; 0x66
   1a434:	f7fe fcea 	bl	18e0c <at_interface_open>
   1a438:	2800      	cmp	r0, #0
   1a43a:	bfa4      	itt	ge
   1a43c:	2201      	movge	r2, #1
   1a43e:	4b05      	ldrge	r3, [pc, #20]	; (1a454 <pdn_interface_init+0x3c>)
   1a440:	6028      	str	r0, [r5, #0]
   1a442:	bfa6      	itte	ge
   1a444:	701a      	strbge	r2, [r3, #0]
   1a446:	2000      	movge	r0, #0
   1a448:	4620      	movlt	r0, r4
   1a44a:	bd38      	pop	{r3, r4, r5, pc}
   1a44c:	20016be0 	.word	0x20016be0
   1a450:	20016be4 	.word	0x20016be4
   1a454:	20016dd2 	.word	0x20016dd2

0001a458 <pdn_interface_open>:
   1a458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a45a:	4b28      	ldr	r3, [pc, #160]	; (1a4fc <pdn_interface_open+0xa4>)
   1a45c:	781b      	ldrb	r3, [r3, #0]
   1a45e:	b92b      	cbnz	r3, 1a46c <pdn_interface_open+0x14>
   1a460:	2070      	movs	r0, #112	; 0x70
   1a462:	f7fa ff8d 	bl	15380 <nrf_modem_os_errno_set>
   1a466:	f04f 30ff 	mov.w	r0, #4294967295
   1a46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a46c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1a470:	d141      	bne.n	1a4f6 <pdn_interface_open+0x9e>
   1a472:	4b23      	ldr	r3, [pc, #140]	; (1a500 <pdn_interface_open+0xa8>)
   1a474:	2500      	movs	r5, #0
   1a476:	461e      	mov	r6, r3
   1a478:	f853 4b04 	ldr.w	r4, [r3], #4
   1a47c:	bb24      	cbnz	r4, 1a4c8 <pdn_interface_open+0x70>
   1a47e:	2020      	movs	r0, #32
   1a480:	f7fb f90c 	bl	1569c <nrf_modem_os_alloc>
   1a484:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
   1a488:	b308      	cbz	r0, 1a4ce <pdn_interface_open+0x76>
   1a48a:	4621      	mov	r1, r4
   1a48c:	2220      	movs	r2, #32
   1a48e:	f008 fd92 	bl	22fb6 <memset>
   1a492:	2203      	movs	r2, #3
   1a494:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   1a498:	2701      	movs	r7, #1
   1a49a:	60da      	str	r2, [r3, #12]
   1a49c:	f04f 32ff 	mov.w	r2, #4294967295
   1a4a0:	f44f 7180 	mov.w	r1, #256	; 0x100
   1a4a4:	605a      	str	r2, [r3, #4]
   1a4a6:	609f      	str	r7, [r3, #8]
   1a4a8:	4a16      	ldr	r2, [pc, #88]	; (1a504 <pdn_interface_open+0xac>)
   1a4aa:	4b17      	ldr	r3, [pc, #92]	; (1a508 <pdn_interface_open+0xb0>)
   1a4ac:	4817      	ldr	r0, [pc, #92]	; (1a50c <pdn_interface_open+0xb4>)
   1a4ae:	f002 ff43 	bl	1d338 <sniprintf>
   1a4b2:	f7ff fed3 	bl	1a25c <command_write>
   1a4b6:	4604      	mov	r4, r0
   1a4b8:	b160      	cbz	r0, 1a4d4 <pdn_interface_open+0x7c>
   1a4ba:	4628      	mov	r0, r5
   1a4bc:	f7ff ff76 	bl	1a3ac <connection_free>
   1a4c0:	2c00      	cmp	r4, #0
   1a4c2:	da13      	bge.n	1a4ec <pdn_interface_open+0x94>
   1a4c4:	4260      	negs	r0, r4
   1a4c6:	e7cc      	b.n	1a462 <pdn_interface_open+0xa>
   1a4c8:	3501      	adds	r5, #1
   1a4ca:	2d0a      	cmp	r5, #10
   1a4cc:	d1d4      	bne.n	1a478 <pdn_interface_open+0x20>
   1a4ce:	f06f 040b 	mvn.w	r4, #11
   1a4d2:	e7f7      	b.n	1a4c4 <pdn_interface_open+0x6c>
   1a4d4:	4639      	mov	r1, r7
   1a4d6:	4628      	mov	r0, r5
   1a4d8:	f7ff fede 	bl	1a298 <event_wait>
   1a4dc:	4604      	mov	r4, r0
   1a4de:	2800      	cmp	r0, #0
   1a4e0:	d1eb      	bne.n	1a4ba <pdn_interface_open+0x62>
   1a4e2:	2202      	movs	r2, #2
   1a4e4:	462c      	mov	r4, r5
   1a4e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   1a4ea:	609a      	str	r2, [r3, #8]
   1a4ec:	f044 40f1 	orr.w	r0, r4, #2021654528	; 0x78800000
   1a4f0:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   1a4f4:	e7b9      	b.n	1a46a <pdn_interface_open+0x12>
   1a4f6:	2029      	movs	r0, #41	; 0x29
   1a4f8:	e7b3      	b.n	1a462 <pdn_interface_open+0xa>
   1a4fa:	bf00      	nop
   1a4fc:	20016dd2 	.word	0x20016dd2
   1a500:	20016be4 	.word	0x20016be4
   1a504:	00024c75 	.word	0x00024c75
   1a508:	00024c7b 	.word	0x00024c7b
   1a50c:	20016dd3 	.word	0x20016dd3

0001a510 <pdn_interface_connect>:
   1a510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a514:	4690      	mov	r8, r2
   1a516:	4689      	mov	r9, r1
   1a518:	b109      	cbz	r1, 1a51e <pdn_interface_connect+0xe>
   1a51a:	2a64      	cmp	r2, #100	; 0x64
   1a51c:	d905      	bls.n	1a52a <pdn_interface_connect+0x1a>
   1a51e:	2016      	movs	r0, #22
   1a520:	f7fa ff2e 	bl	15380 <nrf_modem_os_errno_set>
   1a524:	f04f 30ff 	mov.w	r0, #4294967295
   1a528:	e0f1      	b.n	1a70e <pdn_interface_connect+0x1fe>
   1a52a:	f7ff fe7b 	bl	1a224 <handle_verify_and_covert>
   1a52e:	1e04      	subs	r4, r0, #0
   1a530:	da01      	bge.n	1a536 <pdn_interface_connect+0x26>
   1a532:	4260      	negs	r0, r4
   1a534:	e7f4      	b.n	1a520 <pdn_interface_connect+0x10>
   1a536:	4e78      	ldr	r6, [pc, #480]	; (1a718 <pdn_interface_connect+0x208>)
   1a538:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   1a53c:	689b      	ldr	r3, [r3, #8]
   1a53e:	2b02      	cmp	r3, #2
   1a540:	d001      	beq.n	1a546 <pdn_interface_connect+0x36>
   1a542:	2009      	movs	r0, #9
   1a544:	e7ec      	b.n	1a520 <pdn_interface_connect+0x10>
   1a546:	4f75      	ldr	r7, [pc, #468]	; (1a71c <pdn_interface_connect+0x20c>)
   1a548:	f44f 7180 	mov.w	r1, #256	; 0x100
   1a54c:	4b74      	ldr	r3, [pc, #464]	; (1a720 <pdn_interface_connect+0x210>)
   1a54e:	4a75      	ldr	r2, [pc, #468]	; (1a724 <pdn_interface_connect+0x214>)
   1a550:	4638      	mov	r0, r7
   1a552:	f002 fef1 	bl	1d338 <sniprintf>
   1a556:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   1a55a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1a55e:	4605      	mov	r5, r0
   1a560:	681b      	ldr	r3, [r3, #0]
   1a562:	4a71      	ldr	r2, [pc, #452]	; (1a728 <pdn_interface_connect+0x218>)
   1a564:	1838      	adds	r0, r7, r0
   1a566:	f002 fee7 	bl	1d338 <sniprintf>
   1a56a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   1a56e:	4405      	add	r5, r0
   1a570:	68db      	ldr	r3, [r3, #12]
   1a572:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   1a576:	f003 0203 	and.w	r2, r3, #3
   1a57a:	2a03      	cmp	r2, #3
   1a57c:	eb07 0005 	add.w	r0, r7, r5
   1a580:	d159      	bne.n	1a636 <pdn_interface_connect+0x126>
   1a582:	4b6a      	ldr	r3, [pc, #424]	; (1a72c <pdn_interface_connect+0x21c>)
   1a584:	4a6a      	ldr	r2, [pc, #424]	; (1a730 <pdn_interface_connect+0x220>)
   1a586:	f002 fed7 	bl	1d338 <sniprintf>
   1a58a:	f108 0303 	add.w	r3, r8, #3
   1a58e:	4428      	add	r0, r5
   1a590:	4403      	add	r3, r0
   1a592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1a596:	f300 80bc 	bgt.w	1a712 <pdn_interface_connect+0x202>
   1a59a:	f04f 0a22 	mov.w	sl, #34	; 0x22
   1a59e:	1c45      	adds	r5, r0, #1
   1a5a0:	4642      	mov	r2, r8
   1a5a2:	f807 a000 	strb.w	sl, [r7, r0]
   1a5a6:	4649      	mov	r1, r9
   1a5a8:	1978      	adds	r0, r7, r5
   1a5aa:	f008 fe94 	bl	232d6 <strncpy>
   1a5ae:	eb08 0305 	add.w	r3, r8, r5
   1a5b2:	18fa      	adds	r2, r7, r3
   1a5b4:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   1a5b8:	b902      	cbnz	r2, 1a5bc <pdn_interface_connect+0xac>
   1a5ba:	3b01      	subs	r3, #1
   1a5bc:	2200      	movs	r2, #0
   1a5be:	f807 a003 	strb.w	sl, [r7, r3]
   1a5c2:	443b      	add	r3, r7
   1a5c4:	705a      	strb	r2, [r3, #1]
   1a5c6:	f7ff fe49 	bl	1a25c <command_write>
   1a5ca:	2800      	cmp	r0, #0
   1a5cc:	d17d      	bne.n	1a6ca <pdn_interface_connect+0x1ba>
   1a5ce:	4601      	mov	r1, r0
   1a5d0:	4620      	mov	r0, r4
   1a5d2:	f7ff fe61 	bl	1a298 <event_wait>
   1a5d6:	2800      	cmp	r0, #0
   1a5d8:	d177      	bne.n	1a6ca <pdn_interface_connect+0x1ba>
   1a5da:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   1a5de:	7c1b      	ldrb	r3, [r3, #16]
   1a5e0:	2b00      	cmp	r3, #0
   1a5e2:	d133      	bne.n	1a64c <pdn_interface_connect+0x13c>
   1a5e4:	f44f 7180 	mov.w	r1, #256	; 0x100
   1a5e8:	4b52      	ldr	r3, [pc, #328]	; (1a734 <pdn_interface_connect+0x224>)
   1a5ea:	4a4e      	ldr	r2, [pc, #312]	; (1a724 <pdn_interface_connect+0x214>)
   1a5ec:	484b      	ldr	r0, [pc, #300]	; (1a71c <pdn_interface_connect+0x20c>)
   1a5ee:	f002 fea3 	bl	1d338 <sniprintf>
   1a5f2:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   1a5f6:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1a5fa:	681b      	ldr	r3, [r3, #0]
   1a5fc:	4a4e      	ldr	r2, [pc, #312]	; (1a738 <pdn_interface_connect+0x228>)
   1a5fe:	4438      	add	r0, r7
   1a600:	f002 fe9a 	bl	1d338 <sniprintf>
   1a604:	f7ff fe2a 	bl	1a25c <command_write>
   1a608:	2800      	cmp	r0, #0
   1a60a:	d15e      	bne.n	1a6ca <pdn_interface_connect+0x1ba>
   1a60c:	4601      	mov	r1, r0
   1a60e:	4620      	mov	r0, r4
   1a610:	f7ff fe42 	bl	1a298 <event_wait>
   1a614:	2800      	cmp	r0, #0
   1a616:	d158      	bne.n	1a6ca <pdn_interface_connect+0x1ba>
   1a618:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   1a61c:	f108 0320 	add.w	r3, r8, #32
   1a620:	6950      	ldr	r0, [r2, #20]
   1a622:	4403      	add	r3, r0
   1a624:	6990      	ldr	r0, [r2, #24]
   1a626:	4418      	add	r0, r3
   1a628:	f7fb f838 	bl	1569c <nrf_modem_os_alloc>
   1a62c:	4605      	mov	r5, r0
   1a62e:	2800      	cmp	r0, #0
   1a630:	d14d      	bne.n	1a6ce <pdn_interface_connect+0x1be>
   1a632:	200c      	movs	r0, #12
   1a634:	e774      	b.n	1a520 <pdn_interface_connect+0x10>
   1a636:	f003 0205 	and.w	r2, r3, #5
   1a63a:	2a05      	cmp	r2, #5
   1a63c:	d101      	bne.n	1a642 <pdn_interface_connect+0x132>
   1a63e:	4b3f      	ldr	r3, [pc, #252]	; (1a73c <pdn_interface_connect+0x22c>)
   1a640:	e7a0      	b.n	1a584 <pdn_interface_connect+0x74>
   1a642:	079b      	lsls	r3, r3, #30
   1a644:	bf4c      	ite	mi
   1a646:	4b3e      	ldrmi	r3, [pc, #248]	; (1a740 <pdn_interface_connect+0x230>)
   1a648:	4b3e      	ldrpl	r3, [pc, #248]	; (1a744 <pdn_interface_connect+0x234>)
   1a64a:	e79b      	b.n	1a584 <pdn_interface_connect+0x74>
   1a64c:	f44f 7180 	mov.w	r1, #256	; 0x100
   1a650:	4b3d      	ldr	r3, [pc, #244]	; (1a748 <pdn_interface_connect+0x238>)
   1a652:	4a34      	ldr	r2, [pc, #208]	; (1a724 <pdn_interface_connect+0x214>)
   1a654:	4831      	ldr	r0, [pc, #196]	; (1a71c <pdn_interface_connect+0x20c>)
   1a656:	f002 fe6f 	bl	1d338 <sniprintf>
   1a65a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   1a65e:	4a32      	ldr	r2, [pc, #200]	; (1a728 <pdn_interface_connect+0x218>)
   1a660:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1a664:	4682      	mov	sl, r0
   1a666:	681b      	ldr	r3, [r3, #0]
   1a668:	1838      	adds	r0, r7, r0
   1a66a:	f002 fe65 	bl	1d338 <sniprintf>
   1a66e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   1a672:	4482      	add	sl, r0
   1a674:	7c1b      	ldrb	r3, [r3, #16]
   1a676:	f5ca 7180 	rsb	r1, sl, #256	; 0x100
   1a67a:	2b01      	cmp	r3, #1
   1a67c:	bf0c      	ite	eq
   1a67e:	4a33      	ldreq	r2, [pc, #204]	; (1a74c <pdn_interface_connect+0x23c>)
   1a680:	4a33      	ldrne	r2, [pc, #204]	; (1a750 <pdn_interface_connect+0x240>)
   1a682:	eb07 000a 	add.w	r0, r7, sl
   1a686:	f002 fe57 	bl	1d338 <sniprintf>
   1a68a:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   1a68e:	4482      	add	sl, r0
   1a690:	4a27      	ldr	r2, [pc, #156]	; (1a730 <pdn_interface_connect+0x220>)
   1a692:	3320      	adds	r3, #32
   1a694:	f5ca 7180 	rsb	r1, sl, #256	; 0x100
   1a698:	eb07 000a 	add.w	r0, r7, sl
   1a69c:	f002 fe4c 	bl	1d338 <sniprintf>
   1a6a0:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
   1a6a4:	4450      	add	r0, sl
   1a6a6:	695a      	ldr	r2, [r3, #20]
   1a6a8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1a6ac:	3220      	adds	r2, #32
   1a6ae:	4413      	add	r3, r2
   1a6b0:	4438      	add	r0, r7
   1a6b2:	4a28      	ldr	r2, [pc, #160]	; (1a754 <pdn_interface_connect+0x244>)
   1a6b4:	f002 fe40 	bl	1d338 <sniprintf>
   1a6b8:	f7ff fdd0 	bl	1a25c <command_write>
   1a6bc:	b928      	cbnz	r0, 1a6ca <pdn_interface_connect+0x1ba>
   1a6be:	4601      	mov	r1, r0
   1a6c0:	4620      	mov	r0, r4
   1a6c2:	f7ff fde9 	bl	1a298 <event_wait>
   1a6c6:	2800      	cmp	r0, #0
   1a6c8:	d08c      	beq.n	1a5e4 <pdn_interface_connect+0xd4>
   1a6ca:	4240      	negs	r0, r0
   1a6cc:	e728      	b.n	1a520 <pdn_interface_connect+0x10>
   1a6ce:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
   1a6d2:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   1a6d6:	441a      	add	r2, r3
   1a6d8:	3220      	adds	r2, #32
   1a6da:	f008 fc4c 	bl	22f76 <memcpy>
   1a6de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
   1a6e2:	f7fa ffe5 	bl	156b0 <nrf_modem_os_free>
   1a6e6:	2303      	movs	r3, #3
   1a6e8:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
   1a6ec:	60ab      	str	r3, [r5, #8]
   1a6ee:	e9d5 3005 	ldrd	r3, r0, [r5, #20]
   1a6f2:	4403      	add	r3, r0
   1a6f4:	3320      	adds	r3, #32
   1a6f6:	4642      	mov	r2, r8
   1a6f8:	4649      	mov	r1, r9
   1a6fa:	f8c5 801c 	str.w	r8, [r5, #28]
   1a6fe:	18e8      	adds	r0, r5, r3
   1a700:	f008 fc39 	bl	22f76 <memcpy>
   1a704:	4620      	mov	r0, r4
   1a706:	f7ff fe5f 	bl	1a3c8 <pdn_id_get>
   1a70a:	2800      	cmp	r0, #0
   1a70c:	d1dd      	bne.n	1a6ca <pdn_interface_connect+0x1ba>
   1a70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a712:	f04f 30ff 	mov.w	r0, #4294967295
   1a716:	e7d8      	b.n	1a6ca <pdn_interface_connect+0x1ba>
   1a718:	20016be4 	.word	0x20016be4
   1a71c:	20016dd3 	.word	0x20016dd3
   1a720:	00024c87 	.word	0x00024c87
   1a724:	00024c75 	.word	0x00024c75
   1a728:	00024c93 	.word	0x00024c93
   1a72c:	00024c97 	.word	0x00024c97
   1a730:	00024c9e 	.word	0x00024c9e
   1a734:	00024cb0 	.word	0x00024cb0
   1a738:	00024c78 	.word	0x00024c78
   1a73c:	00024ca4 	.word	0x00024ca4
   1a740:	00024cab 	.word	0x00024cab
   1a744:	00024ca8 	.word	0x00024ca8
   1a748:	00024cbc 	.word	0x00024cbc
   1a74c:	00024cb9 	.word	0x00024cb9
   1a750:	00024cc7 	.word	0x00024cc7
   1a754:	00024cca 	.word	0x00024cca

0001a758 <pdn_interface_close>:
   1a758:	b570      	push	{r4, r5, r6, lr}
   1a75a:	f7ff fd63 	bl	1a224 <handle_verify_and_covert>
   1a75e:	1e04      	subs	r4, r0, #0
   1a760:	da05      	bge.n	1a76e <pdn_interface_close+0x16>
   1a762:	4260      	negs	r0, r4
   1a764:	f7fa fe0c 	bl	15380 <nrf_modem_os_errno_set>
   1a768:	f04f 30ff 	mov.w	r0, #4294967295
   1a76c:	bd70      	pop	{r4, r5, r6, pc}
   1a76e:	4d22      	ldr	r5, [pc, #136]	; (1a7f8 <pdn_interface_close+0xa0>)
   1a770:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1a774:	689b      	ldr	r3, [r3, #8]
   1a776:	2b03      	cmp	r3, #3
   1a778:	d11b      	bne.n	1a7b2 <pdn_interface_close+0x5a>
   1a77a:	4e20      	ldr	r6, [pc, #128]	; (1a7fc <pdn_interface_close+0xa4>)
   1a77c:	f44f 7180 	mov.w	r1, #256	; 0x100
   1a780:	4b1f      	ldr	r3, [pc, #124]	; (1a800 <pdn_interface_close+0xa8>)
   1a782:	4a20      	ldr	r2, [pc, #128]	; (1a804 <pdn_interface_close+0xac>)
   1a784:	4630      	mov	r0, r6
   1a786:	f002 fdd7 	bl	1d338 <sniprintf>
   1a78a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1a78e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1a792:	681b      	ldr	r3, [r3, #0]
   1a794:	4a1c      	ldr	r2, [pc, #112]	; (1a808 <pdn_interface_close+0xb0>)
   1a796:	4430      	add	r0, r6
   1a798:	f002 fdce 	bl	1d338 <sniprintf>
   1a79c:	f7ff fd5e 	bl	1a25c <command_write>
   1a7a0:	4601      	mov	r1, r0
   1a7a2:	b910      	cbnz	r0, 1a7aa <pdn_interface_close+0x52>
   1a7a4:	4620      	mov	r0, r4
   1a7a6:	f7ff fd77 	bl	1a298 <event_wait>
   1a7aa:	2202      	movs	r2, #2
   1a7ac:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1a7b0:	609a      	str	r2, [r3, #8]
   1a7b2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1a7b6:	689b      	ldr	r3, [r3, #8]
   1a7b8:	2b02      	cmp	r3, #2
   1a7ba:	d117      	bne.n	1a7ec <pdn_interface_close+0x94>
   1a7bc:	4e0f      	ldr	r6, [pc, #60]	; (1a7fc <pdn_interface_close+0xa4>)
   1a7be:	f44f 7180 	mov.w	r1, #256	; 0x100
   1a7c2:	4b12      	ldr	r3, [pc, #72]	; (1a80c <pdn_interface_close+0xb4>)
   1a7c4:	4a0f      	ldr	r2, [pc, #60]	; (1a804 <pdn_interface_close+0xac>)
   1a7c6:	4630      	mov	r0, r6
   1a7c8:	f002 fdb6 	bl	1d338 <sniprintf>
   1a7cc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   1a7d0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   1a7d4:	681b      	ldr	r3, [r3, #0]
   1a7d6:	4a0c      	ldr	r2, [pc, #48]	; (1a808 <pdn_interface_close+0xb0>)
   1a7d8:	4430      	add	r0, r6
   1a7da:	f002 fdad 	bl	1d338 <sniprintf>
   1a7de:	f7ff fd3d 	bl	1a25c <command_write>
   1a7e2:	4601      	mov	r1, r0
   1a7e4:	b910      	cbnz	r0, 1a7ec <pdn_interface_close+0x94>
   1a7e6:	4620      	mov	r0, r4
   1a7e8:	f7ff fd56 	bl	1a298 <event_wait>
   1a7ec:	4620      	mov	r0, r4
   1a7ee:	f7ff fddd 	bl	1a3ac <connection_free>
   1a7f2:	2000      	movs	r0, #0
   1a7f4:	e7ba      	b.n	1a76c <pdn_interface_close+0x14>
   1a7f6:	bf00      	nop
   1a7f8:	20016be4 	.word	0x20016be4
   1a7fc:	20016dd3 	.word	0x20016dd3
   1a800:	00024ccf 	.word	0x00024ccf
   1a804:	00024c75 	.word	0x00024c75
   1a808:	00024c78 	.word	0x00024c78
   1a80c:	00024c87 	.word	0x00024c87

0001a810 <pdn_interface_setopt>:
   1a810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a814:	461c      	mov	r4, r3
   1a816:	f240 2302 	movw	r3, #514	; 0x202
   1a81a:	4299      	cmp	r1, r3
   1a81c:	4617      	mov	r7, r2
   1a81e:	9d08      	ldr	r5, [sp, #32]
   1a820:	d101      	bne.n	1a826 <pdn_interface_setopt+0x16>
   1a822:	b104      	cbz	r4, 1a826 <pdn_interface_setopt+0x16>
   1a824:	b92d      	cbnz	r5, 1a832 <pdn_interface_setopt+0x22>
   1a826:	2016      	movs	r0, #22
   1a828:	f7fa fdaa 	bl	15380 <nrf_modem_os_errno_set>
   1a82c:	f04f 30ff 	mov.w	r0, #4294967295
   1a830:	e02a      	b.n	1a888 <pdn_interface_setopt+0x78>
   1a832:	f7ff fcf7 	bl	1a224 <handle_verify_and_covert>
   1a836:	1e06      	subs	r6, r0, #0
   1a838:	da01      	bge.n	1a83e <pdn_interface_setopt+0x2e>
   1a83a:	4270      	negs	r0, r6
   1a83c:	e7f4      	b.n	1a828 <pdn_interface_setopt+0x18>
   1a83e:	2f01      	cmp	r7, #1
   1a840:	d005      	beq.n	1a84e <pdn_interface_setopt+0x3e>
   1a842:	2f04      	cmp	r7, #4
   1a844:	d033      	beq.n	1a8ae <pdn_interface_setopt+0x9e>
   1a846:	f06f 002c 	mvn.w	r0, #44	; 0x2c
   1a84a:	4240      	negs	r0, r0
   1a84c:	e7ec      	b.n	1a828 <pdn_interface_setopt+0x18>
   1a84e:	4b3f      	ldr	r3, [pc, #252]	; (1a94c <pdn_interface_setopt+0x13c>)
   1a850:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
   1a854:	688b      	ldr	r3, [r1, #8]
   1a856:	2b00      	cmp	r3, #0
   1a858:	d072      	beq.n	1a940 <pdn_interface_setopt+0x130>
   1a85a:	688b      	ldr	r3, [r1, #8]
   1a85c:	2b03      	cmp	r3, #3
   1a85e:	d06f      	beq.n	1a940 <pdn_interface_setopt+0x130>
   1a860:	688b      	ldr	r3, [r1, #8]
   1a862:	2b04      	cmp	r3, #4
   1a864:	d06c      	beq.n	1a940 <pdn_interface_setopt+0x130>
   1a866:	08a8      	lsrs	r0, r5, #2
   1a868:	1e43      	subs	r3, r0, #1
   1a86a:	2b01      	cmp	r3, #1
   1a86c:	f005 0503 	and.w	r5, r5, #3
   1a870:	d902      	bls.n	1a878 <pdn_interface_setopt+0x68>
   1a872:	f06f 0015 	mvn.w	r0, #21
   1a876:	e7e8      	b.n	1a84a <pdn_interface_setopt+0x3a>
   1a878:	2d00      	cmp	r5, #0
   1a87a:	d1fa      	bne.n	1a872 <pdn_interface_setopt+0x62>
   1a87c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   1a880:	4284      	cmp	r4, r0
   1a882:	d103      	bne.n	1a88c <pdn_interface_setopt+0x7c>
   1a884:	60cd      	str	r5, [r1, #12]
   1a886:	2000      	movs	r0, #0
   1a888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a88c:	f854 3b04 	ldr.w	r3, [r4], #4
   1a890:	2b02      	cmp	r3, #2
   1a892:	d102      	bne.n	1a89a <pdn_interface_setopt+0x8a>
   1a894:	f045 0501 	orr.w	r5, r5, #1
   1a898:	e7f2      	b.n	1a880 <pdn_interface_setopt+0x70>
   1a89a:	2b0a      	cmp	r3, #10
   1a89c:	d102      	bne.n	1a8a4 <pdn_interface_setopt+0x94>
   1a89e:	f045 0502 	orr.w	r5, r5, #2
   1a8a2:	e7ed      	b.n	1a880 <pdn_interface_setopt+0x70>
   1a8a4:	2b05      	cmp	r3, #5
   1a8a6:	d1e4      	bne.n	1a872 <pdn_interface_setopt+0x62>
   1a8a8:	f045 0505 	orr.w	r5, r5, #5
   1a8ac:	e7e8      	b.n	1a880 <pdn_interface_setopt+0x70>
   1a8ae:	4f27      	ldr	r7, [pc, #156]	; (1a94c <pdn_interface_setopt+0x13c>)
   1a8b0:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   1a8b4:	689a      	ldr	r2, [r3, #8]
   1a8b6:	2a00      	cmp	r2, #0
   1a8b8:	d042      	beq.n	1a940 <pdn_interface_setopt+0x130>
   1a8ba:	689a      	ldr	r2, [r3, #8]
   1a8bc:	2a03      	cmp	r2, #3
   1a8be:	d03f      	beq.n	1a940 <pdn_interface_setopt+0x130>
   1a8c0:	689b      	ldr	r3, [r3, #8]
   1a8c2:	2b04      	cmp	r3, #4
   1a8c4:	d03c      	beq.n	1a940 <pdn_interface_setopt+0x130>
   1a8c6:	4620      	mov	r0, r4
   1a8c8:	f7f6 fad2 	bl	10e70 <strlen>
   1a8cc:	f104 0a64 	add.w	sl, r4, #100	; 0x64
   1a8d0:	f100 0801 	add.w	r8, r0, #1
   1a8d4:	4650      	mov	r0, sl
   1a8d6:	f7f6 facb 	bl	10e70 <strlen>
   1a8da:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   1a8de:	f100 0901 	add.w	r9, r0, #1
   1a8e2:	3b01      	subs	r3, #1
   1a8e4:	2b01      	cmp	r3, #1
   1a8e6:	d8c4      	bhi.n	1a872 <pdn_interface_setopt+0x62>
   1a8e8:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
   1a8ec:	d8c1      	bhi.n	1a872 <pdn_interface_setopt+0x62>
   1a8ee:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
   1a8f2:	d8be      	bhi.n	1a872 <pdn_interface_setopt+0x62>
   1a8f4:	eb08 0009 	add.w	r0, r8, r9
   1a8f8:	3020      	adds	r0, #32
   1a8fa:	f7fa fecf 	bl	1569c <nrf_modem_os_alloc>
   1a8fe:	4605      	mov	r5, r0
   1a900:	b308      	cbz	r0, 1a946 <pdn_interface_setopt+0x136>
   1a902:	2220      	movs	r2, #32
   1a904:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
   1a908:	f008 fb35 	bl	22f76 <memcpy>
   1a90c:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
   1a910:	f7fa fece 	bl	156b0 <nrf_modem_os_free>
   1a914:	e9c5 8905 	strd	r8, r9, [r5, #20]
   1a918:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   1a91c:	4641      	mov	r1, r8
   1a91e:	4a0c      	ldr	r2, [pc, #48]	; (1a950 <pdn_interface_setopt+0x140>)
   1a920:	742b      	strb	r3, [r5, #16]
   1a922:	f105 0020 	add.w	r0, r5, #32
   1a926:	4623      	mov	r3, r4
   1a928:	f002 fd06 	bl	1d338 <sniprintf>
   1a92c:	3021      	adds	r0, #33	; 0x21
   1a92e:	4653      	mov	r3, sl
   1a930:	4a07      	ldr	r2, [pc, #28]	; (1a950 <pdn_interface_setopt+0x140>)
   1a932:	69a9      	ldr	r1, [r5, #24]
   1a934:	4428      	add	r0, r5
   1a936:	f002 fcff 	bl	1d338 <sniprintf>
   1a93a:	f847 5026 	str.w	r5, [r7, r6, lsl #2]
   1a93e:	e7a2      	b.n	1a886 <pdn_interface_setopt+0x76>
   1a940:	f06f 000d 	mvn.w	r0, #13
   1a944:	e781      	b.n	1a84a <pdn_interface_setopt+0x3a>
   1a946:	f06f 000b 	mvn.w	r0, #11
   1a94a:	e77e      	b.n	1a84a <pdn_interface_setopt+0x3a>
   1a94c:	20016be4 	.word	0x20016be4
   1a950:	00024c75 	.word	0x00024c75

0001a954 <pdn_interface_getopt>:
   1a954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a958:	461d      	mov	r5, r3
   1a95a:	f240 2302 	movw	r3, #514	; 0x202
   1a95e:	4299      	cmp	r1, r3
   1a960:	4690      	mov	r8, r2
   1a962:	9e06      	ldr	r6, [sp, #24]
   1a964:	d101      	bne.n	1a96a <pdn_interface_getopt+0x16>
   1a966:	b105      	cbz	r5, 1a96a <pdn_interface_getopt+0x16>
   1a968:	b92e      	cbnz	r6, 1a976 <pdn_interface_getopt+0x22>
   1a96a:	2016      	movs	r0, #22
   1a96c:	f7fa fd08 	bl	15380 <nrf_modem_os_errno_set>
   1a970:	f04f 34ff 	mov.w	r4, #4294967295
   1a974:	e034      	b.n	1a9e0 <pdn_interface_getopt+0x8c>
   1a976:	f7ff fc55 	bl	1a224 <handle_verify_and_covert>
   1a97a:	1e07      	subs	r7, r0, #0
   1a97c:	da01      	bge.n	1a982 <pdn_interface_getopt+0x2e>
   1a97e:	4278      	negs	r0, r7
   1a980:	e7f4      	b.n	1a96c <pdn_interface_getopt+0x18>
   1a982:	f1b8 0f02 	cmp.w	r8, #2
   1a986:	d02e      	beq.n	1a9e6 <pdn_interface_getopt+0x92>
   1a988:	f1b8 0f03 	cmp.w	r8, #3
   1a98c:	d035      	beq.n	1a9fa <pdn_interface_getopt+0xa6>
   1a98e:	f1b8 0f01 	cmp.w	r8, #1
   1a992:	d149      	bne.n	1aa28 <pdn_interface_getopt+0xd4>
   1a994:	4b2b      	ldr	r3, [pc, #172]	; (1aa44 <pdn_interface_getopt+0xf0>)
   1a996:	6831      	ldr	r1, [r6, #0]
   1a998:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   1a99c:	689a      	ldr	r2, [r3, #8]
   1a99e:	2a00      	cmp	r2, #0
   1a9a0:	d046      	beq.n	1aa30 <pdn_interface_getopt+0xdc>
   1a9a2:	689a      	ldr	r2, [r3, #8]
   1a9a4:	2a04      	cmp	r2, #4
   1a9a6:	d043      	beq.n	1aa30 <pdn_interface_getopt+0xdc>
   1a9a8:	2907      	cmp	r1, #7
   1a9aa:	f001 0203 	and.w	r2, r1, #3
   1a9ae:	d942      	bls.n	1aa36 <pdn_interface_getopt+0xe2>
   1a9b0:	2a00      	cmp	r2, #0
   1a9b2:	d140      	bne.n	1aa36 <pdn_interface_getopt+0xe2>
   1a9b4:	68db      	ldr	r3, [r3, #12]
   1a9b6:	0798      	lsls	r0, r3, #30
   1a9b8:	bf42      	ittt	mi
   1a9ba:	220a      	movmi	r2, #10
   1a9bc:	602a      	strmi	r2, [r5, #0]
   1a9be:	2201      	movmi	r2, #1
   1a9c0:	07d9      	lsls	r1, r3, #31
   1a9c2:	bf42      	ittt	mi
   1a9c4:	2102      	movmi	r1, #2
   1a9c6:	f845 1022 	strmi.w	r1, [r5, r2, lsl #2]
   1a9ca:	3201      	addmi	r2, #1
   1a9cc:	f013 0f05 	tst.w	r3, #5
   1a9d0:	bf1e      	ittt	ne
   1a9d2:	2305      	movne	r3, #5
   1a9d4:	f845 3022 	strne.w	r3, [r5, r2, lsl #2]
   1a9d8:	3201      	addne	r2, #1
   1a9da:	0092      	lsls	r2, r2, #2
   1a9dc:	6032      	str	r2, [r6, #0]
   1a9de:	2400      	movs	r4, #0
   1a9e0:	4620      	mov	r0, r4
   1a9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a9e6:	6833      	ldr	r3, [r6, #0]
   1a9e8:	b343      	cbz	r3, 1aa3c <pdn_interface_getopt+0xe8>
   1a9ea:	4b16      	ldr	r3, [pc, #88]	; (1aa44 <pdn_interface_getopt+0xf0>)
   1a9ec:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   1a9f0:	681b      	ldr	r3, [r3, #0]
   1a9f2:	702b      	strb	r3, [r5, #0]
   1a9f4:	2301      	movs	r3, #1
   1a9f6:	6033      	str	r3, [r6, #0]
   1a9f8:	e7f1      	b.n	1a9de <pdn_interface_getopt+0x8a>
   1a9fa:	6833      	ldr	r3, [r6, #0]
   1a9fc:	b1f3      	cbz	r3, 1aa3c <pdn_interface_getopt+0xe8>
   1a9fe:	f44f 7180 	mov.w	r1, #256	; 0x100
   1aa02:	4b11      	ldr	r3, [pc, #68]	; (1aa48 <pdn_interface_getopt+0xf4>)
   1aa04:	4a11      	ldr	r2, [pc, #68]	; (1aa4c <pdn_interface_getopt+0xf8>)
   1aa06:	4812      	ldr	r0, [pc, #72]	; (1aa50 <pdn_interface_getopt+0xfc>)
   1aa08:	f002 fc96 	bl	1d338 <sniprintf>
   1aa0c:	f7ff fc26 	bl	1a25c <command_write>
   1aa10:	4604      	mov	r4, r0
   1aa12:	b958      	cbnz	r0, 1aa2c <pdn_interface_getopt+0xd8>
   1aa14:	4641      	mov	r1, r8
   1aa16:	4638      	mov	r0, r7
   1aa18:	f7ff fc3e 	bl	1a298 <event_wait>
   1aa1c:	2800      	cmp	r0, #0
   1aa1e:	db0f      	blt.n	1aa40 <pdn_interface_getopt+0xec>
   1aa20:	2301      	movs	r3, #1
   1aa22:	7028      	strb	r0, [r5, #0]
   1aa24:	6033      	str	r3, [r6, #0]
   1aa26:	e7db      	b.n	1a9e0 <pdn_interface_getopt+0x8c>
   1aa28:	f06f 042c 	mvn.w	r4, #44	; 0x2c
   1aa2c:	4260      	negs	r0, r4
   1aa2e:	e79d      	b.n	1a96c <pdn_interface_getopt+0x18>
   1aa30:	f06f 040d 	mvn.w	r4, #13
   1aa34:	e7fa      	b.n	1aa2c <pdn_interface_getopt+0xd8>
   1aa36:	f06f 0415 	mvn.w	r4, #21
   1aa3a:	e7f7      	b.n	1aa2c <pdn_interface_getopt+0xd8>
   1aa3c:	2416      	movs	r4, #22
   1aa3e:	e7f5      	b.n	1aa2c <pdn_interface_getopt+0xd8>
   1aa40:	4604      	mov	r4, r0
   1aa42:	e7f3      	b.n	1aa2c <pdn_interface_getopt+0xd8>
   1aa44:	20016be4 	.word	0x20016be4
   1aa48:	00024cdb 	.word	0x00024cdb
   1aa4c:	00024c75 	.word	0x00024c75
   1aa50:	20016dd3 	.word	0x20016dd3

0001aa54 <pdn_interface_pdn_id_get>:
   1aa54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aa58:	4607      	mov	r7, r0
   1aa5a:	4688      	mov	r8, r1
   1aa5c:	2900      	cmp	r1, #0
   1aa5e:	d04a      	beq.n	1aaf6 <pdn_interface_pdn_id_get+0xa2>
   1aa60:	4c26      	ldr	r4, [pc, #152]	; (1aafc <pdn_interface_pdn_id_get+0xa8>)
   1aa62:	2500      	movs	r5, #0
   1aa64:	4626      	mov	r6, r4
   1aa66:	f854 3b04 	ldr.w	r3, [r4], #4
   1aa6a:	2b00      	cmp	r3, #0
   1aa6c:	d040      	beq.n	1aaf0 <pdn_interface_pdn_id_get+0x9c>
   1aa6e:	689b      	ldr	r3, [r3, #8]
   1aa70:	2b03      	cmp	r3, #3
   1aa72:	d13d      	bne.n	1aaf0 <pdn_interface_pdn_id_get+0x9c>
   1aa74:	4640      	mov	r0, r8
   1aa76:	f7f6 f9fb 	bl	10e70 <strlen>
   1aa7a:	f854 1c04 	ldr.w	r1, [r4, #-4]
   1aa7e:	69ca      	ldr	r2, [r1, #28]
   1aa80:	4282      	cmp	r2, r0
   1aa82:	d135      	bne.n	1aaf0 <pdn_interface_pdn_id_get+0x9c>
   1aa84:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
   1aa88:	4403      	add	r3, r0
   1aa8a:	3320      	adds	r3, #32
   1aa8c:	4640      	mov	r0, r8
   1aa8e:	4419      	add	r1, r3
   1aa90:	f008 fc0f 	bl	232b2 <strncmp>
   1aa94:	bb60      	cbnz	r0, 1aaf0 <pdn_interface_pdn_id_get+0x9c>
   1aa96:	2f0a      	cmp	r7, #10
   1aa98:	d114      	bne.n	1aac4 <pdn_interface_pdn_id_get+0x70>
   1aa9a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1aa9e:	68db      	ldr	r3, [r3, #12]
   1aaa0:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1aaa4:	b323      	cbz	r3, 1aaf0 <pdn_interface_pdn_id_get+0x9c>
   1aaa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   1aaaa:	685c      	ldr	r4, [r3, #4]
   1aaac:	3401      	adds	r4, #1
   1aaae:	d11a      	bne.n	1aae6 <pdn_interface_pdn_id_get+0x92>
   1aab0:	4628      	mov	r0, r5
   1aab2:	f7ff fc89 	bl	1a3c8 <pdn_id_get>
   1aab6:	b1b0      	cbz	r0, 1aae6 <pdn_interface_pdn_id_get+0x92>
   1aab8:	4240      	negs	r0, r0
   1aaba:	f7fa fc61 	bl	15380 <nrf_modem_os_errno_set>
   1aabe:	f04f 30ff 	mov.w	r0, #4294967295
   1aac2:	e013      	b.n	1aaec <pdn_interface_pdn_id_get+0x98>
   1aac4:	2f02      	cmp	r7, #2
   1aac6:	d105      	bne.n	1aad4 <pdn_interface_pdn_id_get+0x80>
   1aac8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1aacc:	68db      	ldr	r3, [r3, #12]
   1aace:	f003 0301 	and.w	r3, r3, #1
   1aad2:	e7e7      	b.n	1aaa4 <pdn_interface_pdn_id_get+0x50>
   1aad4:	2f05      	cmp	r7, #5
   1aad6:	d10b      	bne.n	1aaf0 <pdn_interface_pdn_id_get+0x9c>
   1aad8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1aadc:	68db      	ldr	r3, [r3, #12]
   1aade:	3b00      	subs	r3, #0
   1aae0:	bf18      	it	ne
   1aae2:	2301      	movne	r3, #1
   1aae4:	e7de      	b.n	1aaa4 <pdn_interface_pdn_id_get+0x50>
   1aae6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   1aaea:	6858      	ldr	r0, [r3, #4]
   1aaec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aaf0:	3501      	adds	r5, #1
   1aaf2:	2d0a      	cmp	r5, #10
   1aaf4:	d1b7      	bne.n	1aa66 <pdn_interface_pdn_id_get+0x12>
   1aaf6:	2016      	movs	r0, #22
   1aaf8:	e7df      	b.n	1aaba <pdn_interface_pdn_id_get+0x66>
   1aafa:	bf00      	nop
   1aafc:	20016be4 	.word	0x20016be4

0001ab00 <full_dfu_ipc_irq_handler>:
   1ab00:	2301      	movs	r3, #1
   1ab02:	4a03      	ldr	r2, [pc, #12]	; (1ab10 <full_dfu_ipc_irq_handler+0x10>)
   1ab04:	6013      	str	r3, [r2, #0]
   1ab06:	07c2      	lsls	r2, r0, #31
   1ab08:	bf44      	itt	mi
   1ab0a:	4a02      	ldrmi	r2, [pc, #8]	; (1ab14 <full_dfu_ipc_irq_handler+0x14>)
   1ab0c:	7013      	strbmi	r3, [r2, #0]
   1ab0e:	4770      	bx	lr
   1ab10:	20016c0c 	.word	0x20016c0c
   1ab14:	20016ed3 	.word	0x20016ed3

0001ab18 <modem_ipc_wait_for_event>:
   1ab18:	b538      	push	{r3, r4, r5, lr}
   1ab1a:	2300      	movs	r3, #0
   1ab1c:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   1ab20:	4c0a      	ldr	r4, [pc, #40]	; (1ab4c <modem_ipc_wait_for_event+0x34>)
   1ab22:	6023      	str	r3, [r4, #0]
   1ab24:	6823      	ldr	r3, [r4, #0]
   1ab26:	b92b      	cbnz	r3, 1ab34 <modem_ipc_wait_for_event+0x1c>
   1ab28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1ab2c:	f005 fb7f 	bl	2022e <nrf_modem_os_busywait>
   1ab30:	3d01      	subs	r5, #1
   1ab32:	d1f7      	bne.n	1ab24 <modem_ipc_wait_for_event+0xc>
   1ab34:	6823      	ldr	r3, [r4, #0]
   1ab36:	b90b      	cbnz	r3, 1ab3c <modem_ipc_wait_for_event+0x24>
   1ab38:	203c      	movs	r0, #60	; 0x3c
   1ab3a:	e005      	b.n	1ab48 <modem_ipc_wait_for_event+0x30>
   1ab3c:	4b04      	ldr	r3, [pc, #16]	; (1ab50 <modem_ipc_wait_for_event+0x38>)
   1ab3e:	781b      	ldrb	r3, [r3, #0]
   1ab40:	2b01      	cmp	r3, #1
   1ab42:	bf14      	ite	ne
   1ab44:	2000      	movne	r0, #0
   1ab46:	2005      	moveq	r0, #5
   1ab48:	bd38      	pop	{r3, r4, r5, pc}
   1ab4a:	bf00      	nop
   1ab4c:	20016c0c 	.word	0x20016c0c
   1ab50:	20016ed3 	.word	0x20016ed3

0001ab54 <nrf_modem_full_dfu_setup>:
   1ab54:	2200      	movs	r2, #0
   1ab56:	2300      	movs	r3, #0
   1ab58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ab5a:	4d2d      	ldr	r5, [pc, #180]	; (1ac10 <nrf_modem_full_dfu_setup+0xbc>)
   1ab5c:	4f2d      	ldr	r7, [pc, #180]	; (1ac14 <nrf_modem_full_dfu_setup+0xc0>)
   1ab5e:	e9c5 2302 	strd	r2, r3, [r5, #8]
   1ab62:	e9c5 2304 	strd	r2, r3, [r5, #16]
   1ab66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1ab6a:	4b2b      	ldr	r3, [pc, #172]	; (1ac18 <nrf_modem_full_dfu_setup+0xc4>)
   1ab6c:	2400      	movs	r4, #0
   1ab6e:	601a      	str	r2, [r3, #0]
   1ab70:	f100 031c 	add.w	r3, r0, #28
   1ab74:	603b      	str	r3, [r7, #0]
   1ab76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1ab7a:	6043      	str	r3, [r0, #4]
   1ab7c:	231c      	movs	r3, #28
   1ab7e:	7203      	strb	r3, [r0, #8]
   1ab80:	2320      	movs	r3, #32
   1ab82:	2601      	movs	r6, #1
   1ab84:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   1ab88:	7243      	strb	r3, [r0, #9]
   1ab8a:	4b24      	ldr	r3, [pc, #144]	; (1ac1c <nrf_modem_full_dfu_setup+0xc8>)
   1ab8c:	7086      	strb	r6, [r0, #2]
   1ab8e:	70c2      	strb	r2, [r0, #3]
   1ab90:	7004      	strb	r4, [r0, #0]
   1ab92:	7044      	strb	r4, [r0, #1]
   1ab94:	7284      	strb	r4, [r0, #10]
   1ab96:	72c4      	strb	r4, [r0, #11]
   1ab98:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   1ab9c:	702c      	strb	r4, [r5, #0]
   1ab9e:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   1aba2:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   1aba6:	4b1e      	ldr	r3, [pc, #120]	; (1ac20 <nrf_modem_full_dfu_setup+0xcc>)
   1aba8:	b093      	sub	sp, #76	; 0x4c
   1abaa:	4622      	mov	r2, r4
   1abac:	491d      	ldr	r1, [pc, #116]	; (1ac24 <nrf_modem_full_dfu_setup+0xd0>)
   1abae:	4620      	mov	r0, r4
   1abb0:	701c      	strb	r4, [r3, #0]
   1abb2:	f7fb ff4b 	bl	16a4c <nrfx_ipc_init>
   1abb6:	2240      	movs	r2, #64	; 0x40
   1abb8:	4621      	mov	r1, r4
   1abba:	a801      	add	r0, sp, #4
   1abbc:	f008 f9fb 	bl	22fb6 <memset>
   1abc0:	2302      	movs	r3, #2
   1abc2:	9302      	str	r3, [sp, #8]
   1abc4:	2304      	movs	r3, #4
   1abc6:	9609      	str	r6, [sp, #36]	; 0x24
   1abc8:	2605      	movs	r6, #5
   1abca:	eb0d 0003 	add.w	r0, sp, r3
   1abce:	930b      	str	r3, [sp, #44]	; 0x2c
   1abd0:	9611      	str	r6, [sp, #68]	; 0x44
   1abd2:	f7fb ff53 	bl	16a7c <nrfx_ipc_config_load>
   1abd6:	4b14      	ldr	r3, [pc, #80]	; (1ac28 <nrf_modem_full_dfu_setup+0xd4>)
   1abd8:	9400      	str	r4, [sp, #0]
   1abda:	683f      	ldr	r7, [r7, #0]
   1abdc:	601c      	str	r4, [r3, #0]
   1abde:	681b      	ldr	r3, [r3, #0]
   1abe0:	9300      	str	r3, [sp, #0]
   1abe2:	9b00      	ldr	r3, [sp, #0]
   1abe4:	f7ff ff98 	bl	1ab18 <modem_ipc_wait_for_event>
   1abe8:	4603      	mov	r3, r0
   1abea:	b150      	cbz	r0, 1ac02 <nrf_modem_full_dfu_setup+0xae>
   1abec:	2303      	movs	r3, #3
   1abee:	702b      	strb	r3, [r5, #0]
   1abf0:	f7fa fbc6 	bl	15380 <nrf_modem_os_errno_set>
   1abf4:	f7fb ff68 	bl	16ac8 <nrfx_ipc_uninit>
   1abf8:	f04f 33ff 	mov.w	r3, #4294967295
   1abfc:	4618      	mov	r0, r3
   1abfe:	b013      	add	sp, #76	; 0x4c
   1ac00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ac02:	6839      	ldr	r1, [r7, #0]
   1ac04:	4a09      	ldr	r2, [pc, #36]	; (1ac2c <nrf_modem_full_dfu_setup+0xd8>)
   1ac06:	4291      	cmp	r1, r2
   1ac08:	d0f8      	beq.n	1abfc <nrf_modem_full_dfu_setup+0xa8>
   1ac0a:	4630      	mov	r0, r6
   1ac0c:	e7f0      	b.n	1abf0 <nrf_modem_full_dfu_setup+0x9c>
   1ac0e:	bf00      	nop
   1ac10:	20014ed0 	.word	0x20014ed0
   1ac14:	20016c10 	.word	0x20016c10
   1ac18:	20016c14 	.word	0x20016c14
   1ac1c:	4002a000 	.word	0x4002a000
   1ac20:	20016ed3 	.word	0x20016ed3
   1ac24:	0001ab01 	.word	0x0001ab01
   1ac28:	40005610 	.word	0x40005610
   1ac2c:	a5000001 	.word	0xa5000001

0001ac30 <packet_handler_create>:
   1ac30:	2801      	cmp	r0, #1
   1ac32:	b570      	push	{r4, r5, r6, lr}
   1ac34:	4604      	mov	r4, r0
   1ac36:	460e      	mov	r6, r1
   1ac38:	4615      	mov	r5, r2
   1ac3a:	d00f      	beq.n	1ac5c <packet_handler_create+0x2c>
   1ac3c:	1e84      	subs	r4, r0, #2
   1ac3e:	2c01      	cmp	r4, #1
   1ac40:	d810      	bhi.n	1ac64 <packet_handler_create+0x34>
   1ac42:	2010      	movs	r0, #16
   1ac44:	f7fa fd2a 	bl	1569c <nrf_modem_os_alloc>
   1ac48:	2400      	movs	r4, #0
   1ac4a:	b130      	cbz	r0, 1ac5a <packet_handler_create+0x2a>
   1ac4c:	2218      	movs	r2, #24
   1ac4e:	4b08      	ldr	r3, [pc, #32]	; (1ac70 <packet_handler_create+0x40>)
   1ac50:	6085      	str	r5, [r0, #8]
   1ac52:	fb02 3404 	mla	r4, r2, r4, r3
   1ac56:	e9c0 4600 	strd	r4, r6, [r0]
   1ac5a:	bd70      	pop	{r4, r5, r6, pc}
   1ac5c:	2014      	movs	r0, #20
   1ac5e:	f7fa fd1d 	bl	1569c <nrf_modem_os_alloc>
   1ac62:	e7f2      	b.n	1ac4a <packet_handler_create+0x1a>
   1ac64:	200c      	movs	r0, #12
   1ac66:	f7fa fd19 	bl	1569c <nrf_modem_os_alloc>
   1ac6a:	2402      	movs	r4, #2
   1ac6c:	e7ed      	b.n	1ac4a <packet_handler_create+0x1a>
   1ac6e:	bf00      	nop
   1ac70:	00024978 	.word	0x00024978

0001ac74 <modem_off>:
   1ac74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ac76:	2501      	movs	r5, #1
   1ac78:	4c07      	ldr	r4, [pc, #28]	; (1ac98 <modem_off+0x24>)
   1ac7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   1ac7e:	6065      	str	r5, [r4, #4]
   1ac80:	f005 fad5 	bl	2022e <nrf_modem_os_busywait>
   1ac84:	2300      	movs	r3, #0
   1ac86:	6063      	str	r3, [r4, #4]
   1ac88:	9301      	str	r3, [sp, #4]
   1ac8a:	6025      	str	r5, [r4, #0]
   1ac8c:	6823      	ldr	r3, [r4, #0]
   1ac8e:	9301      	str	r3, [sp, #4]
   1ac90:	9b01      	ldr	r3, [sp, #4]
   1ac92:	b003      	add	sp, #12
   1ac94:	bd30      	pop	{r4, r5, pc}
   1ac96:	bf00      	nop
   1ac98:	40005610 	.word	0x40005610

0001ac9c <nrf_modem_init>:
   1ac9c:	b570      	push	{r4, r5, r6, lr}
   1ac9e:	460d      	mov	r5, r1
   1aca0:	b300      	cbz	r0, 1ace4 <nrf_modem_init+0x48>
   1aca2:	4e13      	ldr	r6, [pc, #76]	; (1acf0 <nrf_modem_init+0x54>)
   1aca4:	7832      	ldrb	r2, [r6, #0]
   1aca6:	b9ea      	cbnz	r2, 1ace4 <nrf_modem_init+0x48>
   1aca8:	2901      	cmp	r1, #1
   1acaa:	d113      	bne.n	1acd4 <nrf_modem_init+0x38>
   1acac:	68c1      	ldr	r1, [r0, #12]
   1acae:	6842      	ldr	r2, [r0, #4]
   1acb0:	440a      	add	r2, r1
   1acb2:	6941      	ldr	r1, [r0, #20]
   1acb4:	440a      	add	r2, r1
   1acb6:	69c1      	ldr	r1, [r0, #28]
   1acb8:	440a      	add	r2, r1
   1acba:	f242 011b 	movw	r1, #8219	; 0x201b
   1acbe:	428a      	cmp	r2, r1
   1acc0:	d913      	bls.n	1acea <nrf_modem_init+0x4e>
   1acc2:	6800      	ldr	r0, [r0, #0]
   1acc4:	f7ff ff46 	bl	1ab54 <nrf_modem_full_dfu_setup>
   1acc8:	4604      	mov	r4, r0
   1acca:	b130      	cbz	r0, 1acda <nrf_modem_init+0x3e>
   1accc:	f7ff ffd2 	bl	1ac74 <modem_off>
   1acd0:	4620      	mov	r0, r4
   1acd2:	bd70      	pop	{r4, r5, r6, pc}
   1acd4:	f007 fb84 	bl	223e0 <nrf_modem_platform_init>
   1acd8:	e7f6      	b.n	1acc8 <nrf_modem_init+0x2c>
   1acda:	4b06      	ldr	r3, [pc, #24]	; (1acf4 <nrf_modem_init+0x58>)
   1acdc:	701d      	strb	r5, [r3, #0]
   1acde:	2301      	movs	r3, #1
   1ace0:	7033      	strb	r3, [r6, #0]
   1ace2:	e7f5      	b.n	1acd0 <nrf_modem_init+0x34>
   1ace4:	f04f 34ff 	mov.w	r4, #4294967295
   1ace8:	e7f2      	b.n	1acd0 <nrf_modem_init+0x34>
   1acea:	240c      	movs	r4, #12
   1acec:	e7f0      	b.n	1acd0 <nrf_modem_init+0x34>
   1acee:	bf00      	nop
   1acf0:	20016ed4 	.word	0x20016ed4
   1acf4:	20016ed5 	.word	0x20016ed5

0001acf8 <nrf_modem_platform_af_method_table_get>:
   1acf8:	280a      	cmp	r0, #10
   1acfa:	b508      	push	{r3, lr}
   1acfc:	d80b      	bhi.n	1ad16 <nrf_modem_platform_af_method_table_get+0x1e>
   1acfe:	2800      	cmp	r0, #0
   1ad00:	d036      	beq.n	1ad70 <nrf_modem_platform_af_method_table_get+0x78>
   1ad02:	3801      	subs	r0, #1
   1ad04:	2809      	cmp	r0, #9
   1ad06:	d833      	bhi.n	1ad70 <nrf_modem_platform_af_method_table_get+0x78>
   1ad08:	e8df f000 	tbb	[pc, r0]
   1ad0c:	32321429 	.word	0x32321429
   1ad10:	32323224 	.word	0x32323224
   1ad14:	1432      	.short	0x1432
   1ad16:	2866      	cmp	r0, #102	; 0x66
   1ad18:	d12a      	bne.n	1ad70 <nrf_modem_platform_af_method_table_get+0x78>
   1ad1a:	f240 2301 	movw	r3, #513	; 0x201
   1ad1e:	429a      	cmp	r2, r3
   1ad20:	d028      	beq.n	1ad74 <nrf_modem_platform_af_method_table_get+0x7c>
   1ad22:	f240 2302 	movw	r3, #514	; 0x202
   1ad26:	429a      	cmp	r2, r3
   1ad28:	d026      	beq.n	1ad78 <nrf_modem_platform_af_method_table_get+0x80>
   1ad2a:	202b      	movs	r0, #43	; 0x2b
   1ad2c:	f7fa fb28 	bl	15380 <nrf_modem_os_errno_set>
   1ad30:	2000      	movs	r0, #0
   1ad32:	e009      	b.n	1ad48 <nrf_modem_platform_af_method_table_get+0x50>
   1ad34:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   1ad38:	d207      	bcs.n	1ad4a <nrf_modem_platform_af_method_table_get+0x52>
   1ad3a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   1ad3e:	d207      	bcs.n	1ad50 <nrf_modem_platform_af_method_table_get+0x58>
   1ad40:	3a01      	subs	r2, #1
   1ad42:	2a01      	cmp	r2, #1
   1ad44:	d8f1      	bhi.n	1ad2a <nrf_modem_platform_af_method_table_get+0x32>
   1ad46:	480e      	ldr	r0, [pc, #56]	; (1ad80 <nrf_modem_platform_af_method_table_get+0x88>)
   1ad48:	bd08      	pop	{r3, pc}
   1ad4a:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   1ad4e:	d1ec      	bne.n	1ad2a <nrf_modem_platform_af_method_table_get+0x32>
   1ad50:	480c      	ldr	r0, [pc, #48]	; (1ad84 <nrf_modem_platform_af_method_table_get+0x8c>)
   1ad52:	e7f9      	b.n	1ad48 <nrf_modem_platform_af_method_table_get+0x50>
   1ad54:	2903      	cmp	r1, #3
   1ad56:	480c      	ldr	r0, [pc, #48]	; (1ad88 <nrf_modem_platform_af_method_table_get+0x90>)
   1ad58:	bf18      	it	ne
   1ad5a:	2000      	movne	r0, #0
   1ad5c:	e7f4      	b.n	1ad48 <nrf_modem_platform_af_method_table_get+0x50>
   1ad5e:	f240 2303 	movw	r3, #515	; 0x203
   1ad62:	429a      	cmp	r2, r3
   1ad64:	d00a      	beq.n	1ad7c <nrf_modem_platform_af_method_table_get+0x84>
   1ad66:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   1ad6a:	d1de      	bne.n	1ad2a <nrf_modem_platform_af_method_table_get+0x32>
   1ad6c:	4807      	ldr	r0, [pc, #28]	; (1ad8c <nrf_modem_platform_af_method_table_get+0x94>)
   1ad6e:	e7eb      	b.n	1ad48 <nrf_modem_platform_af_method_table_get+0x50>
   1ad70:	2016      	movs	r0, #22
   1ad72:	e7db      	b.n	1ad2c <nrf_modem_platform_af_method_table_get+0x34>
   1ad74:	4806      	ldr	r0, [pc, #24]	; (1ad90 <nrf_modem_platform_af_method_table_get+0x98>)
   1ad76:	e7e7      	b.n	1ad48 <nrf_modem_platform_af_method_table_get+0x50>
   1ad78:	4806      	ldr	r0, [pc, #24]	; (1ad94 <nrf_modem_platform_af_method_table_get+0x9c>)
   1ad7a:	e7e5      	b.n	1ad48 <nrf_modem_platform_af_method_table_get+0x50>
   1ad7c:	4806      	ldr	r0, [pc, #24]	; (1ad98 <nrf_modem_platform_af_method_table_get+0xa0>)
   1ad7e:	e7e3      	b.n	1ad48 <nrf_modem_platform_af_method_table_get+0x50>
   1ad80:	000249e8 	.word	0x000249e8
   1ad84:	00024a10 	.word	0x00024a10
   1ad88:	00024ab0 	.word	0x00024ab0
   1ad8c:	00024a88 	.word	0x00024a88
   1ad90:	000249c0 	.word	0x000249c0
   1ad94:	00024a60 	.word	0x00024a60
   1ad98:	00024a38 	.word	0x00024a38

0001ad9c <nrf_modem_platform_fd_method_table_get>:
   1ad9c:	b538      	push	{r3, r4, r5, lr}
   1ad9e:	4605      	mov	r5, r0
   1ada0:	f7fc fb38 	bl	17414 <interface_socket_from_handle_get>
   1ada4:	4604      	mov	r4, r0
   1ada6:	b130      	cbz	r0, 1adb6 <nrf_modem_platform_fd_method_table_get+0x1a>
   1ada8:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
   1adac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1adb0:	68c0      	ldr	r0, [r0, #12]
   1adb2:	f7ff bfa1 	b.w	1acf8 <nrf_modem_platform_af_method_table_get>
   1adb6:	4b0b      	ldr	r3, [pc, #44]	; (1ade4 <nrf_modem_platform_fd_method_table_get+0x48>)
   1adb8:	429d      	cmp	r5, r3
   1adba:	d00c      	beq.n	1add6 <nrf_modem_platform_fd_method_table_get+0x3a>
   1adbc:	4a0a      	ldr	r2, [pc, #40]	; (1ade8 <nrf_modem_platform_fd_method_table_get+0x4c>)
   1adbe:	0c2b      	lsrs	r3, r5, #16
   1adc0:	041b      	lsls	r3, r3, #16
   1adc2:	4293      	cmp	r3, r2
   1adc4:	d009      	beq.n	1adda <nrf_modem_platform_fd_method_table_get+0x3e>
   1adc6:	4b09      	ldr	r3, [pc, #36]	; (1adec <nrf_modem_platform_fd_method_table_get+0x50>)
   1adc8:	429d      	cmp	r5, r3
   1adca:	d008      	beq.n	1adde <nrf_modem_platform_fd_method_table_get+0x42>
   1adcc:	2009      	movs	r0, #9
   1adce:	f7fa fad7 	bl	15380 <nrf_modem_os_errno_set>
   1add2:	4620      	mov	r0, r4
   1add4:	bd38      	pop	{r3, r4, r5, pc}
   1add6:	4c06      	ldr	r4, [pc, #24]	; (1adf0 <nrf_modem_platform_fd_method_table_get+0x54>)
   1add8:	e7fb      	b.n	1add2 <nrf_modem_platform_fd_method_table_get+0x36>
   1adda:	4c06      	ldr	r4, [pc, #24]	; (1adf4 <nrf_modem_platform_fd_method_table_get+0x58>)
   1addc:	e7f9      	b.n	1add2 <nrf_modem_platform_fd_method_table_get+0x36>
   1adde:	4c06      	ldr	r4, [pc, #24]	; (1adf8 <nrf_modem_platform_fd_method_table_get+0x5c>)
   1ade0:	e7f7      	b.n	1add2 <nrf_modem_platform_fd_method_table_get+0x36>
   1ade2:	bf00      	nop
   1ade4:	49765432 	.word	0x49765432
   1ade8:	789a0000 	.word	0x789a0000
   1adec:	49765443 	.word	0x49765443
   1adf0:	00024a38 	.word	0x00024a38
   1adf4:	00024a60 	.word	0x00024a60
   1adf8:	00024a88 	.word	0x00024a88

0001adfc <nrf_modem_platform_fcntl>:
   1adfc:	b508      	push	{r3, lr}
   1adfe:	4b06      	ldr	r3, [pc, #24]	; (1ae18 <nrf_modem_platform_fcntl+0x1c>)
   1ae00:	4298      	cmp	r0, r3
   1ae02:	d003      	beq.n	1ae0c <nrf_modem_platform_fcntl+0x10>
   1ae04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1ae08:	f7fc bb84 	b.w	17514 <interface_socket_fcntl>
   1ae0c:	202d      	movs	r0, #45	; 0x2d
   1ae0e:	f7fa fab7 	bl	15380 <nrf_modem_os_errno_set>
   1ae12:	f04f 30ff 	mov.w	r0, #4294967295
   1ae16:	bd08      	pop	{r3, pc}
   1ae18:	49765432 	.word	0x49765432

0001ae1c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   1ae1c:	4b03      	ldr	r3, [pc, #12]	; (1ae2c <z_device_state_init+0x10>)

	while (dev < __device_end) {
   1ae1e:	4a04      	ldr	r2, [pc, #16]	; (1ae30 <z_device_state_init+0x14>)
   1ae20:	4293      	cmp	r3, r2
   1ae22:	d201      	bcs.n	1ae28 <z_device_state_init+0xc>
		device_pm_state_init(dev);
		z_object_init(dev);
		++dev;
   1ae24:	3318      	adds	r3, #24
   1ae26:	e7fa      	b.n	1ae1e <z_device_state_init+0x2>
	}
}
   1ae28:	4770      	bx	lr
   1ae2a:	bf00      	nop
   1ae2c:	00023e18 	.word	0x00023e18
   1ae30:	00023ec0 	.word	0x00023ec0

0001ae34 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1ae34:	b570      	push	{r4, r5, r6, lr}
   1ae36:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ae38:	4b11      	ldr	r3, [pc, #68]	; (1ae80 <z_sys_init_run_level+0x4c>)
   1ae3a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1ae3e:	e009      	b.n	1ae54 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   1ae40:	4240      	negs	r0, r0
   1ae42:	e017      	b.n	1ae74 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   1ae44:	68eb      	ldr	r3, [r5, #12]
   1ae46:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   1ae48:	68ea      	ldr	r2, [r5, #12]
   1ae4a:	7853      	ldrb	r3, [r2, #1]
   1ae4c:	f043 0301 	orr.w	r3, r3, #1
   1ae50:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1ae52:	3408      	adds	r4, #8
   1ae54:	1c73      	adds	r3, r6, #1
   1ae56:	4a0a      	ldr	r2, [pc, #40]	; (1ae80 <z_sys_init_run_level+0x4c>)
   1ae58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1ae5c:	42a3      	cmp	r3, r4
   1ae5e:	d90d      	bls.n	1ae7c <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   1ae60:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   1ae62:	6823      	ldr	r3, [r4, #0]
   1ae64:	4628      	mov	r0, r5
   1ae66:	4798      	blx	r3
		if (dev != NULL) {
   1ae68:	2d00      	cmp	r5, #0
   1ae6a:	d0f2      	beq.n	1ae52 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   1ae6c:	2800      	cmp	r0, #0
   1ae6e:	d0eb      	beq.n	1ae48 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   1ae70:	2800      	cmp	r0, #0
   1ae72:	dbe5      	blt.n	1ae40 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   1ae74:	28ff      	cmp	r0, #255	; 0xff
   1ae76:	dde5      	ble.n	1ae44 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   1ae78:	20ff      	movs	r0, #255	; 0xff
   1ae7a:	e7e3      	b.n	1ae44 <z_sys_init_run_level+0x10>
		}
	}
}
   1ae7c:	bd70      	pop	{r4, r5, r6, pc}
   1ae7e:	bf00      	nop
   1ae80:	00024ad8 	.word	0x00024ad8

0001ae84 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1ae84:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1ae86:	4605      	mov	r5, r0
   1ae88:	b328      	cbz	r0, 1aed6 <z_impl_device_get_binding+0x52>
   1ae8a:	7803      	ldrb	r3, [r0, #0]
   1ae8c:	b32b      	cbz	r3, 1aeda <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1ae8e:	4c14      	ldr	r4, [pc, #80]	; (1aee0 <z_impl_device_get_binding+0x5c>)
   1ae90:	e000      	b.n	1ae94 <z_impl_device_get_binding+0x10>
   1ae92:	3418      	adds	r4, #24
   1ae94:	4b13      	ldr	r3, [pc, #76]	; (1aee4 <z_impl_device_get_binding+0x60>)
   1ae96:	429c      	cmp	r4, r3
   1ae98:	d008      	beq.n	1aeac <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
   1ae9a:	4620      	mov	r0, r4
   1ae9c:	f007 fc3a 	bl	22714 <z_device_ready>
   1aea0:	2800      	cmp	r0, #0
   1aea2:	d0f6      	beq.n	1ae92 <z_impl_device_get_binding+0xe>
   1aea4:	6823      	ldr	r3, [r4, #0]
   1aea6:	42ab      	cmp	r3, r5
   1aea8:	d1f3      	bne.n	1ae92 <z_impl_device_get_binding+0xe>
   1aeaa:	e012      	b.n	1aed2 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   1aeac:	4c0c      	ldr	r4, [pc, #48]	; (1aee0 <z_impl_device_get_binding+0x5c>)
   1aeae:	e000      	b.n	1aeb2 <z_impl_device_get_binding+0x2e>
   1aeb0:	3418      	adds	r4, #24
   1aeb2:	4b0c      	ldr	r3, [pc, #48]	; (1aee4 <z_impl_device_get_binding+0x60>)
   1aeb4:	429c      	cmp	r4, r3
   1aeb6:	d00b      	beq.n	1aed0 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1aeb8:	4620      	mov	r0, r4
   1aeba:	f007 fc2b 	bl	22714 <z_device_ready>
   1aebe:	2800      	cmp	r0, #0
   1aec0:	d0f6      	beq.n	1aeb0 <z_impl_device_get_binding+0x2c>
   1aec2:	6821      	ldr	r1, [r4, #0]
   1aec4:	4628      	mov	r0, r5
   1aec6:	f7f5 ffc9 	bl	10e5c <strcmp>
   1aeca:	2800      	cmp	r0, #0
   1aecc:	d1f0      	bne.n	1aeb0 <z_impl_device_get_binding+0x2c>
   1aece:	e000      	b.n	1aed2 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   1aed0:	2400      	movs	r4, #0
}
   1aed2:	4620      	mov	r0, r4
   1aed4:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   1aed6:	4604      	mov	r4, r0
   1aed8:	e7fb      	b.n	1aed2 <z_impl_device_get_binding+0x4e>
   1aeda:	2400      	movs	r4, #0
   1aedc:	e7f9      	b.n	1aed2 <z_impl_device_get_binding+0x4e>
   1aede:	bf00      	nop
   1aee0:	00023e18 	.word	0x00023e18
   1aee4:	00023ec0 	.word	0x00023ec0

0001aee8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1aee8:	4b01      	ldr	r3, [pc, #4]	; (1aef0 <z_impl_z_errno+0x8>)
   1aeea:	6898      	ldr	r0, [r3, #8]
}
   1aeec:	3098      	adds	r0, #152	; 0x98
   1aeee:	4770      	bx	lr
   1aef0:	20016c18 	.word	0x20016c18

0001aef4 <init_idle_thread>:
/* LCOV_EXCL_STOP */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1aef4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1aef8:	b089      	sub	sp, #36	; 0x24
   1aefa:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   1aefc:	4e17      	ldr	r6, [pc, #92]	; (1af5c <init_idle_thread+0x68>)
   1aefe:	ebc0 1540 	rsb	r5, r0, r0, lsl #5
   1af02:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
	k_thread_stack_t *stack = z_idle_stacks[i];
   1af06:	eb00 0880 	add.w	r8, r0, r0, lsl #2
   1af0a:	4b15      	ldr	r3, [pc, #84]	; (1af60 <init_idle_thread+0x6c>)
   1af0c:	eb03 1888 	add.w	r8, r3, r8, lsl #6

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   1af10:	f10d 0918 	add.w	r9, sp, #24
   1af14:	4603      	mov	r3, r0
   1af16:	4a13      	ldr	r2, [pc, #76]	; (1af64 <init_idle_thread+0x70>)
   1af18:	2108      	movs	r1, #8
   1af1a:	4648      	mov	r0, r9
   1af1c:	f003 f82f 	bl	1df7e <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1af20:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1af24:	4b10      	ldr	r3, [pc, #64]	; (1af68 <init_idle_thread+0x74>)
   1af26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
   1af2a:	f8cd 9014 	str.w	r9, [sp, #20]
   1af2e:	2201      	movs	r2, #1
   1af30:	9204      	str	r2, [sp, #16]
   1af32:	220f      	movs	r2, #15
   1af34:	9203      	str	r2, [sp, #12]
   1af36:	2200      	movs	r2, #0
   1af38:	9202      	str	r2, [sp, #8]
   1af3a:	9201      	str	r2, [sp, #4]
   1af3c:	9300      	str	r3, [sp, #0]
   1af3e:	4b0b      	ldr	r3, [pc, #44]	; (1af6c <init_idle_thread+0x78>)
   1af40:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1af44:	4641      	mov	r1, r8
   1af46:	4628      	mov	r0, r5
   1af48:	f000 f924 	bl	1b194 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1af4c:	7b6b      	ldrb	r3, [r5, #13]
   1af4e:	f023 0304 	bic.w	r3, r3, #4
   1af52:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1af54:	b009      	add	sp, #36	; 0x24
   1af56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1af5a:	bf00      	nop
   1af5c:	20014ee8 	.word	0x20014ee8
   1af60:	20018420 	.word	0x20018420
   1af64:	00024af0 	.word	0x00024af0
   1af68:	20016c18 	.word	0x20016c18
   1af6c:	00022905 	.word	0x00022905

0001af70 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   1af70:	b570      	push	{r4, r5, r6, lr}
   1af72:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   1af74:	f000 fea0 	bl	1bcb8 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   1af78:	4d1d      	ldr	r5, [pc, #116]	; (1aff0 <prepare_multithreading+0x80>)
   1af7a:	4b1e      	ldr	r3, [pc, #120]	; (1aff4 <prepare_multithreading+0x84>)
   1af7c:	625d      	str	r5, [r3, #36]	; 0x24
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1af7e:	4b1e      	ldr	r3, [pc, #120]	; (1aff8 <prepare_multithreading+0x88>)
   1af80:	9305      	str	r3, [sp, #20]
   1af82:	2301      	movs	r3, #1
   1af84:	9304      	str	r3, [sp, #16]
   1af86:	2400      	movs	r4, #0
   1af88:	9403      	str	r4, [sp, #12]
   1af8a:	9402      	str	r4, [sp, #8]
   1af8c:	9401      	str	r4, [sp, #4]
   1af8e:	9400      	str	r4, [sp, #0]
   1af90:	4b1a      	ldr	r3, [pc, #104]	; (1affc <prepare_multithreading+0x8c>)
   1af92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1af96:	491a      	ldr	r1, [pc, #104]	; (1b000 <prepare_multithreading+0x90>)
   1af98:	4628      	mov	r0, r5
   1af9a:	f000 f8fb 	bl	1b194 <z_setup_new_thread>
   1af9e:	4606      	mov	r6, r0
   1afa0:	7b6b      	ldrb	r3, [r5, #13]
   1afa2:	f023 0304 	bic.w	r3, r3, #4
   1afa6:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   1afa8:	4628      	mov	r0, r5
   1afaa:	f007 fd87 	bl	22abc <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1afae:	2c00      	cmp	r4, #0
   1afb0:	dd07      	ble.n	1afc2 <prepare_multithreading+0x52>
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1afb2:	4b10      	ldr	r3, [pc, #64]	; (1aff4 <prepare_multithreading+0x84>)
   1afb4:	f103 0218 	add.w	r2, r3, #24
   1afb8:	619a      	str	r2, [r3, #24]
	list->tail = (sys_dnode_t *)list;
   1afba:	61da      	str	r2, [r3, #28]
	}

	initialize_timeouts();

	return stack_ptr;
}
   1afbc:	4630      	mov	r0, r6
   1afbe:	b006      	add	sp, #24
   1afc0:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   1afc2:	4620      	mov	r0, r4
   1afc4:	f7ff ff96 	bl	1aef4 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1afc8:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
   1afcc:	4a0d      	ldr	r2, [pc, #52]	; (1b004 <prepare_multithreading+0x94>)
   1afce:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1afd2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   1afd6:	4b07      	ldr	r3, [pc, #28]	; (1aff4 <prepare_multithreading+0x84>)
   1afd8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1afdc:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   1afde:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   1afe0:	4a09      	ldr	r2, [pc, #36]	; (1b008 <prepare_multithreading+0x98>)
   1afe2:	eb02 22c4 	add.w	r2, r2, r4, lsl #11
   1afe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
		_kernel.cpus[i].irq_stack =
   1afea:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1afec:	3401      	adds	r4, #1
   1afee:	e7de      	b.n	1afae <prepare_multithreading+0x3e>
   1aff0:	20014fe0 	.word	0x20014fe0
   1aff4:	20016c18 	.word	0x20016c18
   1aff8:	00024afc 	.word	0x00024afc
   1affc:	0001b039 	.word	0x0001b039
   1b000:	20017420 	.word	0x20017420
   1b004:	20014ee8 	.word	0x20014ee8
   1b008:	20018560 	.word	0x20018560

0001b00c <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   1b00c:	b508      	push	{r3, lr}
   1b00e:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1b010:	4a01      	ldr	r2, [pc, #4]	; (1b018 <switch_to_main_thread+0xc>)
   1b012:	4802      	ldr	r0, [pc, #8]	; (1b01c <switch_to_main_thread+0x10>)
   1b014:	f7f8 ff18 	bl	13e48 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1b018:	0001b039 	.word	0x0001b039
   1b01c:	20014fe0 	.word	0x20014fe0

0001b020 <z_bss_zero>:
{
   1b020:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1b022:	4803      	ldr	r0, [pc, #12]	; (1b030 <z_bss_zero+0x10>)
__ssp_bos_icheck3(memset, void *, int)
   1b024:	4a03      	ldr	r2, [pc, #12]	; (1b034 <z_bss_zero+0x14>)
   1b026:	1a12      	subs	r2, r2, r0
   1b028:	2100      	movs	r1, #0
   1b02a:	f007 ffc4 	bl	22fb6 <memset>
}
   1b02e:	bd08      	pop	{r3, pc}
   1b030:	20014900 	.word	0x20014900
   1b034:	20016edc 	.word	0x20016edc

0001b038 <bg_thread_main>:
{
   1b038:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1b03a:	4b0a      	ldr	r3, [pc, #40]	; (1b064 <bg_thread_main+0x2c>)
   1b03c:	2201      	movs	r2, #1
   1b03e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1b040:	2002      	movs	r0, #2
   1b042:	f7ff fef7 	bl	1ae34 <z_sys_init_run_level>
	boot_banner();
   1b046:	f001 fbb9 	bl	1c7bc <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1b04a:	2003      	movs	r0, #3
   1b04c:	f7ff fef2 	bl	1ae34 <z_sys_init_run_level>
	z_init_static_threads();
   1b050:	f000 f904 	bl	1b25c <z_init_static_threads>
	main();
   1b054:	f7f6 ff54 	bl	11f00 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1b058:	4a03      	ldr	r2, [pc, #12]	; (1b068 <bg_thread_main+0x30>)
   1b05a:	7b13      	ldrb	r3, [r2, #12]
   1b05c:	f023 0301 	bic.w	r3, r3, #1
   1b060:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1b062:	bd08      	pop	{r3, pc}
   1b064:	20016ed6 	.word	0x20016ed6
   1b068:	20014fe0 	.word	0x20014fe0

0001b06c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1b06c:	b500      	push	{lr}
   1b06e:	b0bf      	sub	sp, #252	; 0xfc
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1b070:	4b1a      	ldr	r3, [pc, #104]	; (1b0dc <z_cstart+0x70>)
	uint32_t msp =
   1b072:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1b076:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   1b07a:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b07e:	4c18      	ldr	r4, [pc, #96]	; (1b0e0 <z_cstart+0x74>)
   1b080:	23e0      	movs	r3, #224	; 0xe0
   1b082:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1b086:	2500      	movs	r5, #0
   1b088:	77e5      	strb	r5, [r4, #31]
   1b08a:	7625      	strb	r5, [r4, #24]
   1b08c:	7665      	strb	r5, [r4, #25]
   1b08e:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1b090:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b092:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1b096:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1b098:	f7f9 f878 	bl	1418c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1b09c:	f7f8 fef0 	bl	13e80 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1b0a0:	f04f 33ff 	mov.w	r3, #4294967295
   1b0a4:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1b0a6:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1b0a8:	f7f9 fa32 	bl	14510 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1b0ac:	f7f9 f8b8 	bl	14220 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   1b0b0:	2401      	movs	r4, #1
   1b0b2:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1b0b6:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   1b0ba:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   1b0bc:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1b0be:	4b09      	ldr	r3, [pc, #36]	; (1b0e4 <z_cstart+0x78>)
   1b0c0:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1b0c4:	f7ff feaa 	bl	1ae1c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1b0c8:	4628      	mov	r0, r5
   1b0ca:	f7ff feb3 	bl	1ae34 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1b0ce:	4620      	mov	r0, r4
   1b0d0:	f7ff feb0 	bl	1ae34 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   1b0d4:	f7ff ff4c 	bl	1af70 <prepare_multithreading>
   1b0d8:	f7ff ff98 	bl	1b00c <switch_to_main_thread>
   1b0dc:	20018560 	.word	0x20018560
   1b0e0:	e000ed00 	.word	0xe000ed00
   1b0e4:	20016c18 	.word	0x20016c18

0001b0e8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1b0e8:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1b0ea:	4c06      	ldr	r4, [pc, #24]	; (1b104 <statics_init+0x1c>)
   1b0ec:	4b06      	ldr	r3, [pc, #24]	; (1b108 <statics_init+0x20>)
   1b0ee:	429c      	cmp	r4, r3
   1b0f0:	d206      	bcs.n	1b100 <statics_init+0x18>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1b0f2:	68a2      	ldr	r2, [r4, #8]
   1b0f4:	6861      	ldr	r1, [r4, #4]
   1b0f6:	4620      	mov	r0, r4
   1b0f8:	f007 fb3f 	bl	2277a <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1b0fc:	3414      	adds	r4, #20
   1b0fe:	e7f5      	b.n	1b0ec <statics_init+0x4>
	}
	return 0;
}
   1b100:	2000      	movs	r0, #0
   1b102:	bd10      	pop	{r4, pc}
   1b104:	2001476c 	.word	0x2001476c
   1b108:	20014794 	.word	0x20014794

0001b10c <z_thread_monitor_exit>:
   1b10c:	f04f 0320 	mov.w	r3, #32
   1b110:	f3ef 8111 	mrs	r1, BASEPRI
   1b114:	f383 8811 	msr	BASEPRI, r3
   1b118:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   1b11c:	4b0a      	ldr	r3, [pc, #40]	; (1b148 <z_thread_monitor_exit+0x3c>)
   1b11e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1b120:	4283      	cmp	r3, r0
   1b122:	d104      	bne.n	1b12e <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   1b124:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1b126:	4b08      	ldr	r3, [pc, #32]	; (1b148 <z_thread_monitor_exit+0x3c>)
   1b128:	635a      	str	r2, [r3, #52]	; 0x34
   1b12a:	e007      	b.n	1b13c <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   1b12c:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   1b12e:	b113      	cbz	r3, 1b136 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   1b130:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   1b132:	4282      	cmp	r2, r0
   1b134:	d1fa      	bne.n	1b12c <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   1b136:	b10b      	cbz	r3, 1b13c <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   1b138:	6f42      	ldr	r2, [r0, #116]	; 0x74
   1b13a:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   1b13c:	f381 8811 	msr	BASEPRI, r1
   1b140:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   1b144:	4770      	bx	lr
   1b146:	bf00      	nop
   1b148:	20016c18 	.word	0x20016c18

0001b14c <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   1b14c:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   1b14e:	4604      	mov	r4, r0
   1b150:	b140      	cbz	r0, 1b164 <z_impl_k_thread_name_set+0x18>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1b152:	2220      	movs	r2, #32
   1b154:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1b158:	f008 f8bd 	bl	232d6 <strncpy>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1b15c:	2000      	movs	r0, #0
   1b15e:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   1b162:	bd10      	pop	{r4, pc}
		thread = _current;
   1b164:	4b01      	ldr	r3, [pc, #4]	; (1b16c <z_impl_k_thread_name_set+0x20>)
   1b166:	689c      	ldr	r4, [r3, #8]
   1b168:	e7f3      	b.n	1b152 <z_impl_k_thread_name_set+0x6>
   1b16a:	bf00      	nop
   1b16c:	20016c18 	.word	0x20016c18

0001b170 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   1b170:	b538      	push	{r3, r4, r5, lr}
   1b172:	4614      	mov	r4, r2
   1b174:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b176:	ea54 0305 	orrs.w	r3, r4, r5
   1b17a:	d102      	bne.n	1b182 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   1b17c:	f007 fb8a 	bl	22894 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   1b180:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1b182:	462b      	mov	r3, r5
   1b184:	4902      	ldr	r1, [pc, #8]	; (1b190 <schedule_new_thread+0x20>)
   1b186:	3018      	adds	r0, #24
   1b188:	f000 ff16 	bl	1bfb8 <z_add_timeout>
   1b18c:	e7f8      	b.n	1b180 <schedule_new_thread+0x10>
   1b18e:	bf00      	nop
   1b190:	00022af5 	.word	0x00022af5

0001b194 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1b194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b198:	b085      	sub	sp, #20
   1b19a:	4604      	mov	r4, r0
   1b19c:	460f      	mov	r7, r1
   1b19e:	4615      	mov	r5, r2
   1b1a0:	461e      	mov	r6, r3
   1b1a2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   1b1a6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   1b1aa:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   1b1ae:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1b1b2:	f100 0358 	add.w	r3, r0, #88	; 0x58
	list->head = (sys_dnode_t *)list;
   1b1b6:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   1b1b8:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   1b1ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b1bc:	2204      	movs	r2, #4
   1b1be:	9911      	ldr	r1, [sp, #68]	; 0x44
   1b1c0:	f007 fb6c 	bl	2289c <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   1b1c4:	462a      	mov	r2, r5
   1b1c6:	4639      	mov	r1, r7
   1b1c8:	4620      	mov	r0, r4
   1b1ca:	f007 fb51 	bl	22870 <setup_thread_stack>
   1b1ce:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1b1d0:	f8cd 8008 	str.w	r8, [sp, #8]
   1b1d4:	f8cd 9004 	str.w	r9, [sp, #4]
   1b1d8:	f8cd a000 	str.w	sl, [sp]
   1b1dc:	4633      	mov	r3, r6
   1b1de:	4602      	mov	r2, r0
   1b1e0:	4639      	mov	r1, r7
   1b1e2:	4620      	mov	r0, r4
   1b1e4:	f7f8 fe0a 	bl	13dfc <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   1b1e8:	2300      	movs	r3, #0
   1b1ea:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   1b1ec:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   1b1ee:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   1b1f2:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   1b1f6:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   1b1fa:	f04f 0320 	mov.w	r3, #32
   1b1fe:	f3ef 8211 	mrs	r2, BASEPRI
   1b202:	f383 8811 	msr	BASEPRI, r3
   1b206:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   1b20a:	4b13      	ldr	r3, [pc, #76]	; (1b258 <z_setup_new_thread+0xc4>)
   1b20c:	6b59      	ldr	r1, [r3, #52]	; 0x34
   1b20e:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   1b210:	635c      	str	r4, [r3, #52]	; 0x34
	__asm__ volatile(
   1b212:	f382 8811 	msr	BASEPRI, r2
   1b216:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   1b21a:	f1bb 0f00 	cmp.w	fp, #0
   1b21e:	d013      	beq.n	1b248 <z_setup_new_thread+0xb4>
   1b220:	221f      	movs	r2, #31
   1b222:	4659      	mov	r1, fp
   1b224:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1b228:	f008 f855 	bl	232d6 <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1b22c:	2300      	movs	r3, #0
   1b22e:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1b232:	4b09      	ldr	r3, [pc, #36]	; (1b258 <z_setup_new_thread+0xc4>)
   1b234:	689b      	ldr	r3, [r3, #8]
   1b236:	b15b      	cbz	r3, 1b250 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1b238:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1b23c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
   1b240:	4628      	mov	r0, r5
   1b242:	b005      	add	sp, #20
   1b244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   1b248:	2300      	movs	r3, #0
   1b24a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1b24e:	e7f0      	b.n	1b232 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   1b250:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   1b254:	e7f4      	b.n	1b240 <z_setup_new_thread+0xac>
   1b256:	bf00      	nop
   1b258:	20016c18 	.word	0x20016c18

0001b25c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1b25c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1b260:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1b262:	4c23      	ldr	r4, [pc, #140]	; (1b2f0 <z_init_static_threads+0x94>)
   1b264:	4b23      	ldr	r3, [pc, #140]	; (1b2f4 <z_init_static_threads+0x98>)
   1b266:	429c      	cmp	r4, r3
   1b268:	d215      	bcs.n	1b296 <z_init_static_threads+0x3a>
		z_setup_new_thread(
   1b26a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b26c:	9305      	str	r3, [sp, #20]
   1b26e:	6a23      	ldr	r3, [r4, #32]
   1b270:	9304      	str	r3, [sp, #16]
   1b272:	69e3      	ldr	r3, [r4, #28]
   1b274:	9303      	str	r3, [sp, #12]
   1b276:	69a3      	ldr	r3, [r4, #24]
   1b278:	9302      	str	r3, [sp, #8]
   1b27a:	6963      	ldr	r3, [r4, #20]
   1b27c:	9301      	str	r3, [sp, #4]
   1b27e:	6923      	ldr	r3, [r4, #16]
   1b280:	9300      	str	r3, [sp, #0]
   1b282:	68e3      	ldr	r3, [r4, #12]
   1b284:	68a2      	ldr	r2, [r4, #8]
   1b286:	6861      	ldr	r1, [r4, #4]
   1b288:	6820      	ldr	r0, [r4, #0]
   1b28a:	f7ff ff83 	bl	1b194 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   1b28e:	6823      	ldr	r3, [r4, #0]
   1b290:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1b292:	3430      	adds	r4, #48	; 0x30
   1b294:	e7e6      	b.n	1b264 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1b296:	f000 fa9d 	bl	1b7d4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b29a:	4c15      	ldr	r4, [pc, #84]	; (1b2f0 <z_init_static_threads+0x94>)
   1b29c:	e01b      	b.n	1b2d6 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
   1b29e:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   1b2a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1b2a4:	ea4f 79e3 	mov.w	r9, r3, asr #31
			return (t * to_hz + off) / from_hz;
   1b2a8:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   1b2ac:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   1b2b0:	03d8      	lsls	r0, r3, #15
   1b2b2:	f240 35e7 	movw	r5, #999	; 0x3e7
   1b2b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b2ba:	2300      	movs	r3, #0
   1b2bc:	1940      	adds	r0, r0, r5
   1b2be:	f04f 0500 	mov.w	r5, #0
   1b2c2:	eb45 0101 	adc.w	r1, r5, r1
   1b2c6:	f7f5 fc4f 	bl	10b68 <__aeabi_uldivmod>
   1b2ca:	4602      	mov	r2, r0
   1b2cc:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   1b2ce:	4630      	mov	r0, r6
   1b2d0:	f7ff ff4e 	bl	1b170 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   1b2d4:	3430      	adds	r4, #48	; 0x30
   1b2d6:	4b07      	ldr	r3, [pc, #28]	; (1b2f4 <z_init_static_threads+0x98>)
   1b2d8:	429c      	cmp	r4, r3
   1b2da:	d204      	bcs.n	1b2e6 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1b2dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1b2de:	f1b3 3fff 	cmp.w	r3, #4294967295
   1b2e2:	d0f7      	beq.n	1b2d4 <z_init_static_threads+0x78>
   1b2e4:	e7db      	b.n	1b29e <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
   1b2e6:	f000 fb25 	bl	1b934 <k_sched_unlock>
}
   1b2ea:	b006      	add	sp, #24
   1b2ec:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   1b2f0:	2001476c 	.word	0x2001476c
   1b2f4:	2001476c 	.word	0x2001476c

0001b2f8 <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
   1b2f8:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
   1b2fa:	f007 fcd7 	bl	22cac <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   1b2fe:	4b04      	ldr	r3, [pc, #16]	; (1b310 <pm_save_idle+0x18>)
   1b300:	6218      	str	r0, [r3, #32]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   1b302:	f7f8 f99f 	bl	13644 <pm_system_suspend>
   1b306:	b100      	cbz	r0, 1b30a <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
   1b308:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
   1b30a:	f7f8 fdbf 	bl	13e8c <arch_cpu_idle>
   1b30e:	e7fb      	b.n	1b308 <pm_save_idle+0x10>
   1b310:	20016c18 	.word	0x20016c18

0001b314 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   1b314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b318:	b082      	sub	sp, #8
   1b31a:	4604      	mov	r4, r0
   1b31c:	460d      	mov	r5, r1
   1b31e:	4610      	mov	r0, r2
   1b320:	4619      	mov	r1, r3

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   1b322:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
   1b326:	f04f 0320 	mov.w	r3, #32
   1b32a:	f3ef 8611 	mrs	r6, BASEPRI
   1b32e:	f383 8811 	msr	BASEPRI, r3
   1b332:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   1b336:	6a22      	ldr	r2, [r4, #32]
   1b338:	68e3      	ldr	r3, [r4, #12]
   1b33a:	429a      	cmp	r2, r3
   1b33c:	d30b      	bcc.n	1b356 <z_impl_k_msgq_put+0x42>
#ifdef CONFIG_POLL
			handle_poll_events(msgq, K_POLL_STATE_MSGQ_DATA_AVAILABLE);
#endif /* CONFIG_POLL */
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b33e:	ea50 0301 	orrs.w	r3, r0, r1
   1b342:	d137      	bne.n	1b3b4 <z_impl_k_msgq_put+0xa0>
		/* don't wait for message space to become available */
		result = -ENOMSG;
   1b344:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   1b348:	f386 8811 	msr	BASEPRI, r6
   1b34c:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1b350:	b002      	add	sp, #8
   1b352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1b356:	4620      	mov	r0, r4
   1b358:	f007 fc00 	bl	22b5c <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1b35c:	4680      	mov	r8, r0
   1b35e:	b180      	cbz	r0, 1b382 <z_impl_k_msgq_put+0x6e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b360:	68a2      	ldr	r2, [r4, #8]
   1b362:	4629      	mov	r1, r5
   1b364:	6940      	ldr	r0, [r0, #20]
   1b366:	f007 fe06 	bl	22f76 <memcpy>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1b36a:	2400      	movs	r4, #0
   1b36c:	f8c8 40b0 	str.w	r4, [r8, #176]	; 0xb0
			z_ready_thread(pending_thread);
   1b370:	4640      	mov	r0, r8
   1b372:	f007 fba3 	bl	22abc <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1b376:	4631      	mov	r1, r6
   1b378:	4638      	mov	r0, r7
   1b37a:	f000 fa0f 	bl	1b79c <z_reschedule>
			return 0;
   1b37e:	4620      	mov	r0, r4
   1b380:	e7e6      	b.n	1b350 <z_impl_k_msgq_put+0x3c>
   1b382:	68a2      	ldr	r2, [r4, #8]
   1b384:	4629      	mov	r1, r5
   1b386:	69e0      	ldr	r0, [r4, #28]
   1b388:	f007 fdf5 	bl	22f76 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   1b38c:	68a2      	ldr	r2, [r4, #8]
   1b38e:	69e3      	ldr	r3, [r4, #28]
   1b390:	4413      	add	r3, r2
   1b392:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1b394:	6962      	ldr	r2, [r4, #20]
   1b396:	4293      	cmp	r3, r2
   1b398:	d009      	beq.n	1b3ae <z_impl_k_msgq_put+0x9a>
			msgq->used_msgs++;
   1b39a:	6a23      	ldr	r3, [r4, #32]
   1b39c:	3301      	adds	r3, #1
   1b39e:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   1b3a0:	2110      	movs	r1, #16
   1b3a2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   1b3a6:	f007 fd72 	bl	22e8e <z_handle_obj_poll_events>
		result = 0;
   1b3aa:	2000      	movs	r0, #0
   1b3ac:	e7cc      	b.n	1b348 <z_impl_k_msgq_put+0x34>
				msgq->write_ptr = msgq->buffer_start;
   1b3ae:	6923      	ldr	r3, [r4, #16]
   1b3b0:	61e3      	str	r3, [r4, #28]
   1b3b2:	e7f2      	b.n	1b39a <z_impl_k_msgq_put+0x86>
		_current->base.swap_data = (void *) data;
   1b3b4:	4b05      	ldr	r3, [pc, #20]	; (1b3cc <z_impl_k_msgq_put+0xb8>)
   1b3b6:	689b      	ldr	r3, [r3, #8]
   1b3b8:	615d      	str	r5, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b3ba:	e9cd 0100 	strd	r0, r1, [sp]
   1b3be:	4622      	mov	r2, r4
   1b3c0:	4631      	mov	r1, r6
   1b3c2:	4638      	mov	r0, r7
   1b3c4:	f000 fa60 	bl	1b888 <z_pend_curr>
		return result;
   1b3c8:	e7c2      	b.n	1b350 <z_impl_k_msgq_put+0x3c>
   1b3ca:	bf00      	nop
   1b3cc:	20016c18 	.word	0x20016c18

0001b3d0 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   1b3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b3d4:	b082      	sub	sp, #8
   1b3d6:	4604      	mov	r4, r0
   1b3d8:	4608      	mov	r0, r1
   1b3da:	461f      	mov	r7, r3

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   1b3dc:	f104 0808 	add.w	r8, r4, #8
	__asm__ volatile(
   1b3e0:	f04f 0320 	mov.w	r3, #32
   1b3e4:	f3ef 8511 	mrs	r5, BASEPRI
   1b3e8:	f383 8811 	msr	BASEPRI, r3
   1b3ec:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   1b3f0:	6a23      	ldr	r3, [r4, #32]
   1b3f2:	2b00      	cmp	r3, #0
   1b3f4:	d034      	beq.n	1b460 <z_impl_k_msgq_get+0x90>
   1b3f6:	68a2      	ldr	r2, [r4, #8]
   1b3f8:	69a1      	ldr	r1, [r4, #24]
   1b3fa:	f007 fdbc 	bl	22f76 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   1b3fe:	68a2      	ldr	r2, [r4, #8]
   1b400:	69a3      	ldr	r3, [r4, #24]
   1b402:	4413      	add	r3, r2
   1b404:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   1b406:	6962      	ldr	r2, [r4, #20]
   1b408:	4293      	cmp	r3, r2
   1b40a:	d023      	beq.n	1b454 <z_impl_k_msgq_get+0x84>
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;
   1b40c:	6a23      	ldr	r3, [r4, #32]
   1b40e:	3b01      	subs	r3, #1
   1b410:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   1b412:	4620      	mov	r0, r4
   1b414:	f007 fba2 	bl	22b5c <z_unpend_first_thread>
		if (pending_thread != NULL) {
   1b418:	4606      	mov	r6, r0
   1b41a:	2800      	cmp	r0, #0
   1b41c:	d038      	beq.n	1b490 <z_impl_k_msgq_get+0xc0>
   1b41e:	68a2      	ldr	r2, [r4, #8]
   1b420:	6941      	ldr	r1, [r0, #20]
   1b422:	69e0      	ldr	r0, [r4, #28]
   1b424:	f007 fda7 	bl	22f76 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   1b428:	68a2      	ldr	r2, [r4, #8]
   1b42a:	69e3      	ldr	r3, [r4, #28]
   1b42c:	4413      	add	r3, r2
   1b42e:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   1b430:	6962      	ldr	r2, [r4, #20]
   1b432:	4293      	cmp	r3, r2
   1b434:	d011      	beq.n	1b45a <z_impl_k_msgq_get+0x8a>
				msgq->write_ptr = msgq->buffer_start;
			}
			msgq->used_msgs++;
   1b436:	6a23      	ldr	r3, [r4, #32]
   1b438:	3301      	adds	r3, #1
   1b43a:	6223      	str	r3, [r4, #32]
   1b43c:	2400      	movs	r4, #0
   1b43e:	f8c6 40b0 	str.w	r4, [r6, #176]	; 0xb0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   1b442:	4630      	mov	r0, r6
   1b444:	f007 fb3a 	bl	22abc <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   1b448:	4629      	mov	r1, r5
   1b44a:	4640      	mov	r0, r8
   1b44c:	f000 f9a6 	bl	1b79c <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   1b450:	4620      	mov	r0, r4
   1b452:	e00f      	b.n	1b474 <z_impl_k_msgq_get+0xa4>
			msgq->read_ptr = msgq->buffer_start;
   1b454:	6923      	ldr	r3, [r4, #16]
   1b456:	61a3      	str	r3, [r4, #24]
   1b458:	e7d8      	b.n	1b40c <z_impl_k_msgq_get+0x3c>
				msgq->write_ptr = msgq->buffer_start;
   1b45a:	6923      	ldr	r3, [r4, #16]
   1b45c:	61e3      	str	r3, [r4, #28]
   1b45e:	e7ea      	b.n	1b436 <z_impl_k_msgq_get+0x66>
   1b460:	4616      	mov	r6, r2
		}
		result = 0;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b462:	ea56 0307 	orrs.w	r3, r6, r7
   1b466:	d108      	bne.n	1b47a <z_impl_k_msgq_get+0xaa>
		/* don't wait for a message to become available */
		result = -ENOMSG;
   1b468:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   1b46c:	f385 8811 	msr	BASEPRI, r5
   1b470:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   1b474:	b002      	add	sp, #8
   1b476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_current->base.swap_data = data;
   1b47a:	4b06      	ldr	r3, [pc, #24]	; (1b494 <z_impl_k_msgq_get+0xc4>)
   1b47c:	689b      	ldr	r3, [r3, #8]
   1b47e:	6159      	str	r1, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   1b480:	e9cd 6700 	strd	r6, r7, [sp]
   1b484:	4622      	mov	r2, r4
   1b486:	4629      	mov	r1, r5
   1b488:	4640      	mov	r0, r8
   1b48a:	f000 f9fd 	bl	1b888 <z_pend_curr>
		return result;
   1b48e:	e7f1      	b.n	1b474 <z_impl_k_msgq_get+0xa4>
		result = 0;
   1b490:	2000      	movs	r0, #0
   1b492:	e7eb      	b.n	1b46c <z_impl_k_msgq_get+0x9c>
   1b494:	20016c18 	.word	0x20016c18

0001b498 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1b498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b49c:	b083      	sub	sp, #12
   1b49e:	4604      	mov	r4, r0
   1b4a0:	461d      	mov	r5, r3
	__asm__ volatile(
   1b4a2:	f04f 0320 	mov.w	r3, #32
   1b4a6:	f3ef 8711 	mrs	r7, BASEPRI
   1b4aa:	f383 8811 	msr	BASEPRI, r3
   1b4ae:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1b4b2:	68c1      	ldr	r1, [r0, #12]
   1b4b4:	b999      	cbnz	r1, 1b4de <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   1b4b6:	2900      	cmp	r1, #0
   1b4b8:	d14f      	bne.n	1b55a <z_impl_k_mutex_lock+0xc2>
   1b4ba:	4b3a      	ldr	r3, [pc, #232]	; (1b5a4 <z_impl_k_mutex_lock+0x10c>)
   1b4bc:	689b      	ldr	r3, [r3, #8]
   1b4be:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1b4c2:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   1b4c4:	3101      	adds	r1, #1
   1b4c6:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   1b4c8:	4b36      	ldr	r3, [pc, #216]	; (1b5a4 <z_impl_k_mutex_lock+0x10c>)
   1b4ca:	689b      	ldr	r3, [r3, #8]
   1b4cc:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1b4ce:	f387 8811 	msr	BASEPRI, r7
   1b4d2:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   1b4d6:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1b4d8:	b003      	add	sp, #12
   1b4da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b4de:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1b4e0:	6882      	ldr	r2, [r0, #8]
   1b4e2:	4b30      	ldr	r3, [pc, #192]	; (1b5a4 <z_impl_k_mutex_lock+0x10c>)
   1b4e4:	689b      	ldr	r3, [r3, #8]
   1b4e6:	429a      	cmp	r2, r3
   1b4e8:	d0e5      	beq.n	1b4b6 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1b4ea:	ea55 0106 	orrs.w	r1, r5, r6
   1b4ee:	bf0c      	ite	eq
   1b4f0:	f04f 0801 	moveq.w	r8, #1
   1b4f4:	f04f 0800 	movne.w	r8, #0
   1b4f8:	d031      	beq.n	1b55e <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   1b4fa:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1b4fe:	4649      	mov	r1, r9
   1b500:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1b504:	f007 fa0a 	bl	2291c <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1b508:	4581      	cmp	r9, r0
   1b50a:	dc2f      	bgt.n	1b56c <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   1b50c:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1b510:	9600      	str	r6, [sp, #0]
   1b512:	9501      	str	r5, [sp, #4]
   1b514:	4622      	mov	r2, r4
   1b516:	4639      	mov	r1, r7
   1b518:	4823      	ldr	r0, [pc, #140]	; (1b5a8 <z_impl_k_mutex_lock+0x110>)
   1b51a:	f000 f9b5 	bl	1b888 <z_pend_curr>
	if (got_mutex == 0) {
   1b51e:	2800      	cmp	r0, #0
   1b520:	d0da      	beq.n	1b4d8 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   1b522:	f04f 0320 	mov.w	r3, #32
   1b526:	f3ef 8511 	mrs	r5, BASEPRI
   1b52a:	f383 8811 	msr	BASEPRI, r3
   1b52e:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1b532:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b534:	429c      	cmp	r4, r3
   1b536:	d01f      	beq.n	1b578 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1b538:	b1f3      	cbz	r3, 1b578 <z_impl_k_mutex_lock+0xe0>
   1b53a:	6921      	ldr	r1, [r4, #16]
   1b53c:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1b540:	f007 f9ec 	bl	2291c <new_prio_for_inheritance>
   1b544:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b546:	4620      	mov	r0, r4
   1b548:	f007 f9f3 	bl	22932 <adjust_owner_prio>
   1b54c:	b9b0      	cbnz	r0, 1b57c <z_impl_k_mutex_lock+0xe4>
   1b54e:	f1b9 0f00 	cmp.w	r9, #0
   1b552:	d015      	beq.n	1b580 <z_impl_k_mutex_lock+0xe8>
   1b554:	f04f 0801 	mov.w	r8, #1
   1b558:	e012      	b.n	1b580 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   1b55a:	6923      	ldr	r3, [r4, #16]
   1b55c:	e7b1      	b.n	1b4c2 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   1b55e:	f387 8811 	msr	BASEPRI, r7
   1b562:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1b566:	f06f 000f 	mvn.w	r0, #15
   1b56a:	e7b5      	b.n	1b4d8 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   1b56c:	4601      	mov	r1, r0
   1b56e:	4620      	mov	r0, r4
   1b570:	f007 f9df 	bl	22932 <adjust_owner_prio>
   1b574:	4681      	mov	r9, r0
   1b576:	e7cb      	b.n	1b510 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1b578:	6921      	ldr	r1, [r4, #16]
   1b57a:	e7e4      	b.n	1b546 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b57c:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   1b580:	f1b8 0f00 	cmp.w	r8, #0
   1b584:	d106      	bne.n	1b594 <z_impl_k_mutex_lock+0xfc>
   1b586:	f385 8811 	msr	BASEPRI, r5
   1b58a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   1b58e:	f06f 000a 	mvn.w	r0, #10
   1b592:	e7a1      	b.n	1b4d8 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   1b594:	4629      	mov	r1, r5
   1b596:	4804      	ldr	r0, [pc, #16]	; (1b5a8 <z_impl_k_mutex_lock+0x110>)
   1b598:	f000 f900 	bl	1b79c <z_reschedule>
	return -EAGAIN;
   1b59c:	f06f 000a 	mvn.w	r0, #10
   1b5a0:	e79a      	b.n	1b4d8 <z_impl_k_mutex_lock+0x40>
   1b5a2:	bf00      	nop
   1b5a4:	20016c18 	.word	0x20016c18
   1b5a8:	20016c50 	.word	0x20016c50

0001b5ac <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1b5ac:	6882      	ldr	r2, [r0, #8]
   1b5ae:	2a00      	cmp	r2, #0
   1b5b0:	d035      	beq.n	1b61e <z_impl_k_mutex_unlock+0x72>
{
   1b5b2:	b538      	push	{r3, r4, r5, lr}
   1b5b4:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1b5b6:	4b1d      	ldr	r3, [pc, #116]	; (1b62c <z_impl_k_mutex_unlock+0x80>)
   1b5b8:	689b      	ldr	r3, [r3, #8]
   1b5ba:	429a      	cmp	r2, r3
   1b5bc:	d132      	bne.n	1b624 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1b5be:	7bda      	ldrb	r2, [r3, #15]
   1b5c0:	3a01      	subs	r2, #1
   1b5c2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1b5c4:	68c3      	ldr	r3, [r0, #12]
   1b5c6:	2b01      	cmp	r3, #1
   1b5c8:	d905      	bls.n	1b5d6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1b5ca:	3b01      	subs	r3, #1
   1b5cc:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1b5ce:	f000 f9b1 	bl	1b934 <k_sched_unlock>

	return 0;
   1b5d2:	2000      	movs	r0, #0
}
   1b5d4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1b5d6:	f04f 0320 	mov.w	r3, #32
   1b5da:	f3ef 8511 	mrs	r5, BASEPRI
   1b5de:	f383 8811 	msr	BASEPRI, r3
   1b5e2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1b5e6:	6901      	ldr	r1, [r0, #16]
   1b5e8:	f007 f9a3 	bl	22932 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1b5ec:	4620      	mov	r0, r4
   1b5ee:	f007 fab5 	bl	22b5c <z_unpend_first_thread>
	mutex->owner = new_owner;
   1b5f2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1b5f4:	b160      	cbz	r0, 1b610 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1b5f6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b5fa:	6123      	str	r3, [r4, #16]
   1b5fc:	2300      	movs	r3, #0
   1b5fe:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   1b602:	f007 fa5b 	bl	22abc <z_ready_thread>
		z_reschedule(&lock, key);
   1b606:	4629      	mov	r1, r5
   1b608:	4809      	ldr	r0, [pc, #36]	; (1b630 <z_impl_k_mutex_unlock+0x84>)
   1b60a:	f000 f8c7 	bl	1b79c <z_reschedule>
   1b60e:	e7de      	b.n	1b5ce <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1b610:	2300      	movs	r3, #0
   1b612:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   1b614:	f385 8811 	msr	BASEPRI, r5
   1b618:	f3bf 8f6f 	isb	sy
   1b61c:	e7d7      	b.n	1b5ce <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1b61e:	f06f 0015 	mvn.w	r0, #21
}
   1b622:	4770      	bx	lr
		return -EPERM;
   1b624:	f04f 30ff 	mov.w	r0, #4294967295
   1b628:	e7d4      	b.n	1b5d4 <z_impl_k_mutex_unlock+0x28>
   1b62a:	bf00      	nop
   1b62c:	20016c18 	.word	0x20016c18
   1b630:	20016c50 	.word	0x20016c50

0001b634 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1b634:	b538      	push	{r3, r4, r5, lr}
   1b636:	4604      	mov	r4, r0
	__asm__ volatile(
   1b638:	f04f 0320 	mov.w	r3, #32
   1b63c:	f3ef 8511 	mrs	r5, BASEPRI
   1b640:	f383 8811 	msr	BASEPRI, r3
   1b644:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1b648:	f007 fa88 	bl	22b5c <z_unpend_first_thread>

	if (thread != NULL) {
   1b64c:	b148      	cbz	r0, 1b662 <z_impl_k_sem_give+0x2e>
   1b64e:	2200      	movs	r2, #0
   1b650:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1b654:	f007 fa32 	bl	22abc <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1b658:	4629      	mov	r1, r5
   1b65a:	4809      	ldr	r0, [pc, #36]	; (1b680 <z_impl_k_sem_give+0x4c>)
   1b65c:	f000 f89e 	bl	1b79c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1b660:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b662:	68a3      	ldr	r3, [r4, #8]
   1b664:	68e2      	ldr	r2, [r4, #12]
   1b666:	4293      	cmp	r3, r2
   1b668:	d008      	beq.n	1b67c <z_impl_k_sem_give+0x48>
   1b66a:	2201      	movs	r2, #1
   1b66c:	4413      	add	r3, r2
   1b66e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b670:	2102      	movs	r1, #2
   1b672:	f104 0010 	add.w	r0, r4, #16
   1b676:	f007 fc0a 	bl	22e8e <z_handle_obj_poll_events>
}
   1b67a:	e7ed      	b.n	1b658 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b67c:	2200      	movs	r2, #0
   1b67e:	e7f5      	b.n	1b66c <z_impl_k_sem_give+0x38>
   1b680:	20016c50 	.word	0x20016c50

0001b684 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1b684:	b530      	push	{r4, r5, lr}
   1b686:	b083      	sub	sp, #12
   1b688:	461d      	mov	r5, r3
   1b68a:	f04f 0320 	mov.w	r3, #32
   1b68e:	f3ef 8111 	mrs	r1, BASEPRI
   1b692:	f383 8811 	msr	BASEPRI, r3
   1b696:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1b69a:	6883      	ldr	r3, [r0, #8]
   1b69c:	b143      	cbz	r3, 1b6b0 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1b69e:	3b01      	subs	r3, #1
   1b6a0:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1b6a2:	f381 8811 	msr	BASEPRI, r1
   1b6a6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1b6aa:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1b6ac:	b003      	add	sp, #12
   1b6ae:	bd30      	pop	{r4, r5, pc}
   1b6b0:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b6b2:	ea54 0305 	orrs.w	r3, r4, r5
   1b6b6:	d006      	beq.n	1b6c6 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1b6b8:	e9cd 4500 	strd	r4, r5, [sp]
   1b6bc:	4602      	mov	r2, r0
   1b6be:	4805      	ldr	r0, [pc, #20]	; (1b6d4 <z_impl_k_sem_take+0x50>)
   1b6c0:	f000 f8e2 	bl	1b888 <z_pend_curr>
	return ret;
   1b6c4:	e7f2      	b.n	1b6ac <z_impl_k_sem_take+0x28>
   1b6c6:	f381 8811 	msr	BASEPRI, r1
   1b6ca:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1b6ce:	f06f 000f 	mvn.w	r0, #15
   1b6d2:	e7eb      	b.n	1b6ac <z_impl_k_sem_take+0x28>
   1b6d4:	20016c50 	.word	0x20016c50

0001b6d8 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   1b6d8:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b6da:	f1b3 3fff 	cmp.w	r3, #4294967295
   1b6de:	bf08      	it	eq
   1b6e0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1b6e4:	d100      	bne.n	1b6e8 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   1b6e6:	bd38      	pop	{r3, r4, r5, pc}
   1b6e8:	4902      	ldr	r1, [pc, #8]	; (1b6f4 <add_thread_timeout+0x1c>)
   1b6ea:	3018      	adds	r0, #24
   1b6ec:	f000 fc64 	bl	1bfb8 <z_add_timeout>
   1b6f0:	e7f9      	b.n	1b6e6 <add_thread_timeout+0xe>
   1b6f2:	bf00      	nop
   1b6f4:	00022af5 	.word	0x00022af5

0001b6f8 <z_reset_time_slice>:
{
   1b6f8:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   1b6fa:	4b08      	ldr	r3, [pc, #32]	; (1b71c <z_reset_time_slice+0x24>)
   1b6fc:	681b      	ldr	r3, [r3, #0]
   1b6fe:	b903      	cbnz	r3, 1b702 <z_reset_time_slice+0xa>
}
   1b700:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1b702:	f7f8 faa3 	bl	13c4c <sys_clock_elapsed>
   1b706:	4603      	mov	r3, r0
   1b708:	4a04      	ldr	r2, [pc, #16]	; (1b71c <z_reset_time_slice+0x24>)
   1b70a:	6810      	ldr	r0, [r2, #0]
   1b70c:	4403      	add	r3, r0
   1b70e:	4a04      	ldr	r2, [pc, #16]	; (1b720 <z_reset_time_slice+0x28>)
   1b710:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1b712:	2100      	movs	r1, #0
   1b714:	f007 fae0 	bl	22cd8 <z_set_timeout_expiry>
}
   1b718:	e7f2      	b.n	1b700 <z_reset_time_slice+0x8>
   1b71a:	bf00      	nop
   1b71c:	20016c58 	.word	0x20016c58
   1b720:	20016c18 	.word	0x20016c18

0001b724 <k_sched_time_slice_set>:
{
   1b724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b728:	4606      	mov	r6, r0
   1b72a:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   1b72c:	2300      	movs	r3, #0
	__asm__ volatile(
   1b72e:	f04f 0220 	mov.w	r2, #32
   1b732:	f3ef 8711 	mrs	r7, BASEPRI
   1b736:	f382 8811 	msr	BASEPRI, r2
   1b73a:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1b73e:	e009      	b.n	1b754 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
   1b740:	4b13      	ldr	r3, [pc, #76]	; (1b790 <k_sched_time_slice_set+0x6c>)
   1b742:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   1b746:	f7ff ffd7 	bl	1b6f8 <z_reset_time_slice>
	__asm__ volatile(
   1b74a:	f387 8811 	msr	BASEPRI, r7
   1b74e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1b752:	2301      	movs	r3, #1
   1b754:	b9cb      	cbnz	r3, 1b78a <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
   1b756:	2300      	movs	r3, #0
   1b758:	4a0e      	ldr	r2, [pc, #56]	; (1b794 <k_sched_time_slice_set+0x70>)
   1b75a:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   1b75c:	0c75      	lsrs	r5, r6, #17
   1b75e:	03f4      	lsls	r4, r6, #15
   1b760:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b764:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b768:	2300      	movs	r3, #0
   1b76a:	1820      	adds	r0, r4, r0
   1b76c:	f04f 0100 	mov.w	r1, #0
   1b770:	eb45 0101 	adc.w	r1, r5, r1
   1b774:	f7f5 f9f8 	bl	10b68 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1b778:	4b07      	ldr	r3, [pc, #28]	; (1b798 <k_sched_time_slice_set+0x74>)
   1b77a:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1b77c:	2e00      	cmp	r6, #0
   1b77e:	dddf      	ble.n	1b740 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
   1b780:	2802      	cmp	r0, #2
   1b782:	bfb8      	it	lt
   1b784:	2002      	movlt	r0, #2
   1b786:	6018      	str	r0, [r3, #0]
   1b788:	e7da      	b.n	1b740 <k_sched_time_slice_set+0x1c>
}
   1b78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b78e:	bf00      	nop
   1b790:	20016c54 	.word	0x20016c54
   1b794:	20016c18 	.word	0x20016c18
   1b798:	20016c58 	.word	0x20016c58

0001b79c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1b79c:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   1b79e:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1b7a0:	b921      	cbnz	r1, 1b7ac <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1b7a2:	f3ef 8305 	mrs	r3, IPSR
   1b7a6:	b913      	cbnz	r3, 1b7ae <z_reschedule+0x12>
   1b7a8:	2101      	movs	r1, #1
   1b7aa:	e000      	b.n	1b7ae <z_reschedule+0x12>
   1b7ac:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   1b7ae:	f011 0f01 	tst.w	r1, #1
   1b7b2:	d007      	beq.n	1b7c4 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   1b7b4:	4b06      	ldr	r3, [pc, #24]	; (1b7d0 <z_reschedule+0x34>)
   1b7b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	return new_thread != _current;
   1b7b8:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   1b7ba:	429a      	cmp	r2, r3
   1b7bc:	d002      	beq.n	1b7c4 <z_reschedule+0x28>
	ret = arch_swap(key);
   1b7be:	f7f8 fa63 	bl	13c88 <arch_swap>
		z_swap(lock, key);
   1b7c2:	e003      	b.n	1b7cc <z_reschedule+0x30>
   1b7c4:	f380 8811 	msr	BASEPRI, r0
   1b7c8:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   1b7cc:	bd08      	pop	{r3, pc}
   1b7ce:	bf00      	nop
   1b7d0:	20016c18 	.word	0x20016c18

0001b7d4 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   1b7d4:	2300      	movs	r3, #0
	__asm__ volatile(
   1b7d6:	f04f 0220 	mov.w	r2, #32
   1b7da:	f3ef 8111 	mrs	r1, BASEPRI
   1b7de:	f382 8811 	msr	BASEPRI, r2
   1b7e2:	f3bf 8f6f 	isb	sy
   1b7e6:	b953      	cbnz	r3, 1b7fe <k_sched_lock+0x2a>
   1b7e8:	4b05      	ldr	r3, [pc, #20]	; (1b800 <k_sched_lock+0x2c>)
   1b7ea:	689a      	ldr	r2, [r3, #8]
   1b7ec:	7bd3      	ldrb	r3, [r2, #15]
   1b7ee:	3b01      	subs	r3, #1
   1b7f0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1b7f2:	f381 8811 	msr	BASEPRI, r1
   1b7f6:	f3bf 8f6f 	isb	sy
   1b7fa:	2301      	movs	r3, #1
   1b7fc:	e7f3      	b.n	1b7e6 <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1b7fe:	4770      	bx	lr
   1b800:	20016c18 	.word	0x20016c18

0001b804 <update_cache>:
{
   1b804:	b538      	push	{r3, r4, r5, lr}
   1b806:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1b808:	480f      	ldr	r0, [pc, #60]	; (1b848 <update_cache+0x44>)
   1b80a:	f007 f905 	bl	22a18 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1b80e:	4605      	mov	r5, r0
   1b810:	b170      	cbz	r0, 1b830 <update_cache+0x2c>
	if (preempt_ok != 0) {
   1b812:	b984      	cbnz	r4, 1b836 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   1b814:	4b0d      	ldr	r3, [pc, #52]	; (1b84c <update_cache+0x48>)
   1b816:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   1b818:	7b5a      	ldrb	r2, [r3, #13]
   1b81a:	f012 0f1f 	tst.w	r2, #31
   1b81e:	d10a      	bne.n	1b836 <update_cache+0x32>
	return node->next != NULL;
   1b820:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b822:	b942      	cbnz	r2, 1b836 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1b824:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   1b826:	2a7f      	cmp	r2, #127	; 0x7f
   1b828:	d905      	bls.n	1b836 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   1b82a:	4a08      	ldr	r2, [pc, #32]	; (1b84c <update_cache+0x48>)
   1b82c:	6253      	str	r3, [r2, #36]	; 0x24
   1b82e:	e00a      	b.n	1b846 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1b830:	4b06      	ldr	r3, [pc, #24]	; (1b84c <update_cache+0x48>)
   1b832:	68dd      	ldr	r5, [r3, #12]
   1b834:	e7ed      	b.n	1b812 <update_cache+0xe>
		if (thread != _current) {
   1b836:	4b05      	ldr	r3, [pc, #20]	; (1b84c <update_cache+0x48>)
   1b838:	689b      	ldr	r3, [r3, #8]
   1b83a:	42ab      	cmp	r3, r5
   1b83c:	d001      	beq.n	1b842 <update_cache+0x3e>
			z_reset_time_slice();
   1b83e:	f7ff ff5b 	bl	1b6f8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1b842:	4b02      	ldr	r3, [pc, #8]	; (1b84c <update_cache+0x48>)
   1b844:	625d      	str	r5, [r3, #36]	; 0x24
}
   1b846:	bd38      	pop	{r3, r4, r5, pc}
   1b848:	20016c40 	.word	0x20016c40
   1b84c:	20016c18 	.word	0x20016c18

0001b850 <unready_thread>:
{
   1b850:	b510      	push	{r4, lr}
   1b852:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   1b854:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1b856:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1b85a:	2b00      	cmp	r3, #0
   1b85c:	db08      	blt.n	1b870 <unready_thread+0x20>
	update_cache(thread == _current);
   1b85e:	4b08      	ldr	r3, [pc, #32]	; (1b880 <unready_thread+0x30>)
   1b860:	6898      	ldr	r0, [r3, #8]
   1b862:	42a0      	cmp	r0, r4
   1b864:	bf14      	ite	ne
   1b866:	2000      	movne	r0, #0
   1b868:	2001      	moveq	r0, #1
   1b86a:	f7ff ffcb 	bl	1b804 <update_cache>
}
   1b86e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b870:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1b874:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   1b876:	4601      	mov	r1, r0
   1b878:	4802      	ldr	r0, [pc, #8]	; (1b884 <unready_thread+0x34>)
   1b87a:	f007 f8a2 	bl	229c2 <z_priq_dumb_remove>
}
   1b87e:	e7ee      	b.n	1b85e <unready_thread+0xe>
   1b880:	20016c18 	.word	0x20016c18
   1b884:	20016c40 	.word	0x20016c40

0001b888 <z_pend_curr>:
{
   1b888:	b510      	push	{r4, lr}
   1b88a:	460c      	mov	r4, r1
   1b88c:	4611      	mov	r1, r2
	pending_current = _current;
   1b88e:	4b06      	ldr	r3, [pc, #24]	; (1b8a8 <z_pend_curr+0x20>)
   1b890:	6898      	ldr	r0, [r3, #8]
   1b892:	4b06      	ldr	r3, [pc, #24]	; (1b8ac <z_pend_curr+0x24>)
   1b894:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1b896:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1b89a:	f007 f8ee 	bl	22a7a <pend>
   1b89e:	4620      	mov	r0, r4
   1b8a0:	f7f8 f9f2 	bl	13c88 <arch_swap>
}
   1b8a4:	bd10      	pop	{r4, pc}
   1b8a6:	bf00      	nop
   1b8a8:	20016c18 	.word	0x20016c18
   1b8ac:	20016c50 	.word	0x20016c50

0001b8b0 <z_impl_k_thread_suspend>:
{
   1b8b0:	b538      	push	{r3, r4, r5, lr}
   1b8b2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1b8b4:	3018      	adds	r0, #24
   1b8b6:	f007 f9db 	bl	22c70 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   1b8ba:	2300      	movs	r3, #0
	__asm__ volatile(
   1b8bc:	f04f 0220 	mov.w	r2, #32
   1b8c0:	f3ef 8511 	mrs	r5, BASEPRI
   1b8c4:	f382 8811 	msr	BASEPRI, r2
   1b8c8:	f3bf 8f6f 	isb	sy
   1b8cc:	e010      	b.n	1b8f0 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b8ce:	7b63      	ldrb	r3, [r4, #13]
   1b8d0:	f043 0310 	orr.w	r3, r3, #16
   1b8d4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1b8d6:	4b15      	ldr	r3, [pc, #84]	; (1b92c <z_impl_k_thread_suspend+0x7c>)
   1b8d8:	6898      	ldr	r0, [r3, #8]
   1b8da:	42a0      	cmp	r0, r4
   1b8dc:	bf14      	ite	ne
   1b8de:	2000      	movne	r0, #0
   1b8e0:	2001      	moveq	r0, #1
   1b8e2:	f7ff ff8f 	bl	1b804 <update_cache>
	__asm__ volatile(
   1b8e6:	f385 8811 	msr	BASEPRI, r5
   1b8ea:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1b8ee:	2301      	movs	r3, #1
   1b8f0:	b963      	cbnz	r3, 1b90c <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   1b8f2:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   1b8f4:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1b8f8:	2b00      	cmp	r3, #0
   1b8fa:	dae8      	bge.n	1b8ce <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b8fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1b900:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
   1b902:	4621      	mov	r1, r4
   1b904:	480a      	ldr	r0, [pc, #40]	; (1b930 <z_impl_k_thread_suspend+0x80>)
   1b906:	f007 f85c 	bl	229c2 <z_priq_dumb_remove>
}
   1b90a:	e7e0      	b.n	1b8ce <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   1b90c:	4b07      	ldr	r3, [pc, #28]	; (1b92c <z_impl_k_thread_suspend+0x7c>)
   1b90e:	689b      	ldr	r3, [r3, #8]
   1b910:	42a3      	cmp	r3, r4
   1b912:	d000      	beq.n	1b916 <z_impl_k_thread_suspend+0x66>
}
   1b914:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1b916:	f04f 0320 	mov.w	r3, #32
   1b91a:	f3ef 8011 	mrs	r0, BASEPRI
   1b91e:	f383 8811 	msr	BASEPRI, r3
   1b922:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1b926:	f007 f837 	bl	22998 <z_reschedule_irqlock>
   1b92a:	e7f3      	b.n	1b914 <z_impl_k_thread_suspend+0x64>
   1b92c:	20016c18 	.word	0x20016c18
   1b930:	20016c40 	.word	0x20016c40

0001b934 <k_sched_unlock>:

void k_sched_unlock(void)
{
   1b934:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   1b936:	2300      	movs	r3, #0
   1b938:	f04f 0220 	mov.w	r2, #32
   1b93c:	f3ef 8411 	mrs	r4, BASEPRI
   1b940:	f382 8811 	msr	BASEPRI, r2
   1b944:	f3bf 8f6f 	isb	sy
   1b948:	b96b      	cbnz	r3, 1b966 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   1b94a:	4b0c      	ldr	r3, [pc, #48]	; (1b97c <k_sched_unlock+0x48>)
   1b94c:	689a      	ldr	r2, [r3, #8]
   1b94e:	7bd3      	ldrb	r3, [r2, #15]
   1b950:	3301      	adds	r3, #1
   1b952:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b954:	2000      	movs	r0, #0
   1b956:	f7ff ff55 	bl	1b804 <update_cache>
	__asm__ volatile(
   1b95a:	f384 8811 	msr	BASEPRI, r4
   1b95e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1b962:	2301      	movs	r3, #1
   1b964:	e7f0      	b.n	1b948 <k_sched_unlock+0x14>
	__asm__ volatile(
   1b966:	f04f 0320 	mov.w	r3, #32
   1b96a:	f3ef 8011 	mrs	r0, BASEPRI
   1b96e:	f383 8811 	msr	BASEPRI, r3
   1b972:	f3bf 8f6f 	isb	sy
   1b976:	f007 f80f 	bl	22998 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   1b97a:	bd10      	pop	{r4, pc}
   1b97c:	20016c18 	.word	0x20016c18

0001b980 <move_thread_to_end_of_prio_q>:
{
   1b980:	b538      	push	{r3, r4, r5, lr}
   1b982:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   1b984:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1b986:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1b98a:	2b00      	cmp	r3, #0
   1b98c:	db28      	blt.n	1b9e0 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b98e:	7b6b      	ldrb	r3, [r5, #13]
   1b990:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b994:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1b996:	4b1a      	ldr	r3, [pc, #104]	; (1ba00 <move_thread_to_end_of_prio_q+0x80>)
   1b998:	f853 4f28 	ldr.w	r4, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b99c:	429c      	cmp	r4, r3
   1b99e:	d02d      	beq.n	1b9fc <move_thread_to_end_of_prio_q+0x7c>
{
	struct k_thread *t;

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b9a0:	b16c      	cbz	r4, 1b9be <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b9a2:	4621      	mov	r1, r4
   1b9a4:	4628      	mov	r0, r5
   1b9a6:	f006 ffed 	bl	22984 <z_sched_prio_cmp>
   1b9aa:	2800      	cmp	r0, #0
   1b9ac:	dc20      	bgt.n	1b9f0 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b9ae:	b134      	cbz	r4, 1b9be <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1b9b0:	4b13      	ldr	r3, [pc, #76]	; (1ba00 <move_thread_to_end_of_prio_q+0x80>)
   1b9b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b9b4:	429c      	cmp	r4, r3
   1b9b6:	d002      	beq.n	1b9be <move_thread_to_end_of_prio_q+0x3e>
   1b9b8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b9ba:	2c00      	cmp	r4, #0
   1b9bc:	d1f0      	bne.n	1b9a0 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   1b9be:	4b10      	ldr	r3, [pc, #64]	; (1ba00 <move_thread_to_end_of_prio_q+0x80>)
   1b9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c

	node->next = list;
   1b9c2:	f103 0128 	add.w	r1, r3, #40	; 0x28
   1b9c6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1b9c8:	606a      	str	r2, [r5, #4]

	tail->next = node;
   1b9ca:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1b9cc:	62dd      	str	r5, [r3, #44]	; 0x2c
	update_cache(thread == _current);
   1b9ce:	4b0c      	ldr	r3, [pc, #48]	; (1ba00 <move_thread_to_end_of_prio_q+0x80>)
   1b9d0:	6898      	ldr	r0, [r3, #8]
   1b9d2:	42a8      	cmp	r0, r5
   1b9d4:	bf14      	ite	ne
   1b9d6:	2000      	movne	r0, #0
   1b9d8:	2001      	moveq	r0, #1
   1b9da:	f7ff ff13 	bl	1b804 <update_cache>
}
   1b9de:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b9e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1b9e4:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   1b9e6:	4601      	mov	r1, r0
   1b9e8:	4806      	ldr	r0, [pc, #24]	; (1ba04 <move_thread_to_end_of_prio_q+0x84>)
   1b9ea:	f006 ffea 	bl	229c2 <z_priq_dumb_remove>
}
   1b9ee:	e7ce      	b.n	1b98e <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1b9f0:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   1b9f2:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1b9f4:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1b9f6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1b9f8:	6065      	str	r5, [r4, #4]
}
   1b9fa:	e7e8      	b.n	1b9ce <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b9fc:	2400      	movs	r4, #0
   1b9fe:	e7cf      	b.n	1b9a0 <move_thread_to_end_of_prio_q+0x20>
   1ba00:	20016c18 	.word	0x20016c18
   1ba04:	20016c40 	.word	0x20016c40

0001ba08 <z_time_slice>:
{
   1ba08:	b510      	push	{r4, lr}
   1ba0a:	f04f 0320 	mov.w	r3, #32
   1ba0e:	f3ef 8411 	mrs	r4, BASEPRI
   1ba12:	f383 8811 	msr	BASEPRI, r3
   1ba16:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1ba1a:	4b1c      	ldr	r3, [pc, #112]	; (1ba8c <z_time_slice+0x84>)
   1ba1c:	689b      	ldr	r3, [r3, #8]
   1ba1e:	4a1c      	ldr	r2, [pc, #112]	; (1ba90 <z_time_slice+0x88>)
   1ba20:	6812      	ldr	r2, [r2, #0]
   1ba22:	4293      	cmp	r3, r2
   1ba24:	d01d      	beq.n	1ba62 <z_time_slice+0x5a>
	pending_current = NULL;
   1ba26:	4a1a      	ldr	r2, [pc, #104]	; (1ba90 <z_time_slice+0x88>)
   1ba28:	2100      	movs	r1, #0
   1ba2a:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1ba2c:	4a19      	ldr	r2, [pc, #100]	; (1ba94 <z_time_slice+0x8c>)
   1ba2e:	6812      	ldr	r2, [r2, #0]
   1ba30:	b322      	cbz	r2, 1ba7c <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1ba32:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   1ba34:	2a7f      	cmp	r2, #127	; 0x7f
   1ba36:	d821      	bhi.n	1ba7c <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
   1ba38:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   1ba3a:	f012 0f1f 	tst.w	r2, #31
   1ba3e:	d11d      	bne.n	1ba7c <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1ba40:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1ba44:	4a14      	ldr	r2, [pc, #80]	; (1ba98 <z_time_slice+0x90>)
   1ba46:	6812      	ldr	r2, [r2, #0]
   1ba48:	4291      	cmp	r1, r2
   1ba4a:	db17      	blt.n	1ba7c <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   1ba4c:	4a13      	ldr	r2, [pc, #76]	; (1ba9c <z_time_slice+0x94>)
   1ba4e:	4293      	cmp	r3, r2
   1ba50:	d014      	beq.n	1ba7c <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
   1ba52:	4a0e      	ldr	r2, [pc, #56]	; (1ba8c <z_time_slice+0x84>)
   1ba54:	6912      	ldr	r2, [r2, #16]
   1ba56:	4282      	cmp	r2, r0
   1ba58:	dd0a      	ble.n	1ba70 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
   1ba5a:	1a10      	subs	r0, r2, r0
   1ba5c:	4b0b      	ldr	r3, [pc, #44]	; (1ba8c <z_time_slice+0x84>)
   1ba5e:	6118      	str	r0, [r3, #16]
   1ba60:	e00f      	b.n	1ba82 <z_time_slice+0x7a>
		z_reset_time_slice();
   1ba62:	f7ff fe49 	bl	1b6f8 <z_reset_time_slice>
	__asm__ volatile(
   1ba66:	f384 8811 	msr	BASEPRI, r4
   1ba6a:	f3bf 8f6f 	isb	sy
		return;
   1ba6e:	e00c      	b.n	1ba8a <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
   1ba70:	4618      	mov	r0, r3
   1ba72:	f7ff ff85 	bl	1b980 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   1ba76:	f7ff fe3f 	bl	1b6f8 <z_reset_time_slice>
   1ba7a:	e002      	b.n	1ba82 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
   1ba7c:	4b03      	ldr	r3, [pc, #12]	; (1ba8c <z_time_slice+0x84>)
   1ba7e:	2200      	movs	r2, #0
   1ba80:	611a      	str	r2, [r3, #16]
   1ba82:	f384 8811 	msr	BASEPRI, r4
   1ba86:	f3bf 8f6f 	isb	sy
}
   1ba8a:	bd10      	pop	{r4, pc}
   1ba8c:	20016c18 	.word	0x20016c18
   1ba90:	20016c50 	.word	0x20016c50
   1ba94:	20016c58 	.word	0x20016c58
   1ba98:	20016c54 	.word	0x20016c54
   1ba9c:	20014ee8 	.word	0x20014ee8

0001baa0 <ready_thread>:
{
   1baa0:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   1baa2:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1baa4:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1baa8:	2a00      	cmp	r2, #0
   1baaa:	db2d      	blt.n	1bb08 <ready_thread+0x68>
   1baac:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1baae:	f013 0f1f 	tst.w	r3, #31
   1bab2:	d105      	bne.n	1bac0 <ready_thread+0x20>
	return node->next != NULL;
   1bab4:	6982      	ldr	r2, [r0, #24]
   1bab6:	b10a      	cbz	r2, 1babc <ready_thread+0x1c>
   1bab8:	2200      	movs	r2, #0
   1baba:	e002      	b.n	1bac2 <ready_thread+0x22>
   1babc:	2201      	movs	r2, #1
   1babe:	e000      	b.n	1bac2 <ready_thread+0x22>
   1bac0:	2200      	movs	r2, #0
   1bac2:	b30a      	cbz	r2, 1bb08 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   1bac4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1bac8:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1baca:	4b14      	ldr	r3, [pc, #80]	; (1bb1c <ready_thread+0x7c>)
   1bacc:	f853 5f28 	ldr.w	r5, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bad0:	429d      	cmp	r5, r3
   1bad2:	d020      	beq.n	1bb16 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bad4:	b16d      	cbz	r5, 1baf2 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1bad6:	4629      	mov	r1, r5
   1bad8:	4620      	mov	r0, r4
   1bada:	f006 ff53 	bl	22984 <z_sched_prio_cmp>
   1bade:	2800      	cmp	r0, #0
   1bae0:	dc13      	bgt.n	1bb0a <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bae2:	b135      	cbz	r5, 1baf2 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   1bae4:	4b0d      	ldr	r3, [pc, #52]	; (1bb1c <ready_thread+0x7c>)
   1bae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bae8:	429d      	cmp	r5, r3
   1baea:	d002      	beq.n	1baf2 <ready_thread+0x52>
   1baec:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1baee:	2d00      	cmp	r5, #0
   1baf0:	d1f0      	bne.n	1bad4 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   1baf2:	4b0a      	ldr	r3, [pc, #40]	; (1bb1c <ready_thread+0x7c>)
   1baf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	node->next = list;
   1baf6:	f103 0128 	add.w	r1, r3, #40	; 0x28
   1bafa:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   1bafc:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1bafe:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1bb00:	62dc      	str	r4, [r3, #44]	; 0x2c
		update_cache(0);
   1bb02:	2000      	movs	r0, #0
   1bb04:	f7ff fe7e 	bl	1b804 <update_cache>
}
   1bb08:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   1bb0a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   1bb0c:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1bb0e:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1bb10:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1bb12:	606c      	str	r4, [r5, #4]
}
   1bb14:	e7f5      	b.n	1bb02 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bb16:	2500      	movs	r5, #0
   1bb18:	e7dc      	b.n	1bad4 <ready_thread+0x34>
   1bb1a:	bf00      	nop
   1bb1c:	20016c18 	.word	0x20016c18

0001bb20 <z_sched_start>:
{
   1bb20:	b510      	push	{r4, lr}
	__asm__ volatile(
   1bb22:	f04f 0320 	mov.w	r3, #32
   1bb26:	f3ef 8411 	mrs	r4, BASEPRI
   1bb2a:	f383 8811 	msr	BASEPRI, r3
   1bb2e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1bb32:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   1bb34:	f013 0f04 	tst.w	r3, #4
   1bb38:	d104      	bne.n	1bb44 <z_sched_start+0x24>
	__asm__ volatile(
   1bb3a:	f384 8811 	msr	BASEPRI, r4
   1bb3e:	f3bf 8f6f 	isb	sy
}
   1bb42:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1bb44:	f023 0304 	bic.w	r3, r3, #4
   1bb48:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   1bb4a:	f7ff ffa9 	bl	1baa0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1bb4e:	4621      	mov	r1, r4
   1bb50:	4801      	ldr	r0, [pc, #4]	; (1bb58 <z_sched_start+0x38>)
   1bb52:	f7ff fe23 	bl	1b79c <z_reschedule>
   1bb56:	e7f4      	b.n	1bb42 <z_sched_start+0x22>
   1bb58:	20016c54 	.word	0x20016c54

0001bb5c <z_set_prio>:
{
   1bb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bb60:	4604      	mov	r4, r0
   1bb62:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   1bb64:	2300      	movs	r3, #0
	__asm__ volatile(
   1bb66:	f04f 0220 	mov.w	r2, #32
   1bb6a:	f3ef 8611 	mrs	r6, BASEPRI
   1bb6e:	f382 8811 	msr	BASEPRI, r2
   1bb72:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   1bb76:	4698      	mov	r8, r3
   1bb78:	e008      	b.n	1bb8c <z_set_prio+0x30>
		if (need_sched) {
   1bb7a:	f012 0801 	ands.w	r8, r2, #1
   1bb7e:	d111      	bne.n	1bba4 <z_set_prio+0x48>
			thread->base.prio = prio;
   1bb80:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
   1bb82:	f386 8811 	msr	BASEPRI, r6
   1bb86:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1bb8a:	2301      	movs	r3, #1
   1bb8c:	461a      	mov	r2, r3
   1bb8e:	2b00      	cmp	r3, #0
   1bb90:	d13d      	bne.n	1bc0e <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   1bb92:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1bb94:	f013 0f1f 	tst.w	r3, #31
   1bb98:	d1ef      	bne.n	1bb7a <z_set_prio+0x1e>
	return node->next != NULL;
   1bb9a:	69a1      	ldr	r1, [r4, #24]
   1bb9c:	2900      	cmp	r1, #0
   1bb9e:	d1ec      	bne.n	1bb7a <z_set_prio+0x1e>
   1bba0:	2201      	movs	r2, #1
   1bba2:	e7ea      	b.n	1bb7a <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bba8:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   1bbaa:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1bc18 <z_set_prio+0xbc>
   1bbae:	4621      	mov	r1, r4
   1bbb0:	4648      	mov	r0, r9
   1bbb2:	f006 ff06 	bl	229c2 <z_priq_dumb_remove>
				thread->base.prio = prio;
   1bbb6:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1bbb8:	7b63      	ldrb	r3, [r4, #13]
   1bbba:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1bbbe:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1bbc0:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bbc4:	454d      	cmp	r5, r9
   1bbc6:	d020      	beq.n	1bc0a <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bbc8:	b16d      	cbz	r5, 1bbe6 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1bbca:	4629      	mov	r1, r5
   1bbcc:	4620      	mov	r0, r4
   1bbce:	f006 fed9 	bl	22984 <z_sched_prio_cmp>
   1bbd2:	2800      	cmp	r0, #0
   1bbd4:	dc13      	bgt.n	1bbfe <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bbd6:	b135      	cbz	r5, 1bbe6 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   1bbd8:	4b0e      	ldr	r3, [pc, #56]	; (1bc14 <z_set_prio+0xb8>)
   1bbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bbdc:	429d      	cmp	r5, r3
   1bbde:	d002      	beq.n	1bbe6 <z_set_prio+0x8a>
   1bbe0:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bbe2:	2d00      	cmp	r5, #0
   1bbe4:	d1f0      	bne.n	1bbc8 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   1bbe6:	4b0b      	ldr	r3, [pc, #44]	; (1bc14 <z_set_prio+0xb8>)
   1bbe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	node->next = list;
   1bbea:	f103 0128 	add.w	r1, r3, #40	; 0x28
   1bbee:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   1bbf0:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1bbf2:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1bbf4:	62dc      	str	r4, [r3, #44]	; 0x2c
			update_cache(1);
   1bbf6:	2001      	movs	r0, #1
   1bbf8:	f7ff fe04 	bl	1b804 <update_cache>
   1bbfc:	e7c1      	b.n	1bb82 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   1bbfe:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   1bc00:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1bc02:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1bc04:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1bc06:	606c      	str	r4, [r5, #4]
}
   1bc08:	e7f5      	b.n	1bbf6 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bc0a:	2500      	movs	r5, #0
   1bc0c:	e7dc      	b.n	1bbc8 <z_set_prio+0x6c>
}
   1bc0e:	4640      	mov	r0, r8
   1bc10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1bc14:	20016c18 	.word	0x20016c18
   1bc18:	20016c40 	.word	0x20016c40

0001bc1c <end_thread>:
		ready_thread(thread);
	}
}

static void end_thread(struct k_thread *thread)
{
   1bc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   1bc1e:	7b43      	ldrb	r3, [r0, #13]
   1bc20:	f013 0f08 	tst.w	r3, #8
   1bc24:	d145      	bne.n	1bcb2 <end_thread+0x96>
   1bc26:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   1bc28:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1bc2c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1bc30:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   1bc32:	f013 0f80 	tst.w	r3, #128	; 0x80
   1bc36:	d114      	bne.n	1bc62 <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
   1bc38:	68ab      	ldr	r3, [r5, #8]
   1bc3a:	b15b      	cbz	r3, 1bc54 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1bc3c:	4628      	mov	r0, r5
   1bc3e:	f006 fe9f 	bl	22980 <pended_on_thread>
   1bc42:	4629      	mov	r1, r5
   1bc44:	f006 febd 	bl	229c2 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1bc48:	7b6b      	ldrb	r3, [r5, #13]
   1bc4a:	f023 0302 	bic.w	r3, r3, #2
   1bc4e:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   1bc50:	2300      	movs	r3, #0
   1bc52:	60ab      	str	r3, [r5, #8]
   1bc54:	f105 0018 	add.w	r0, r5, #24
   1bc58:	f007 f80a 	bl	22c70 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   1bc5c:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1bc60:	e01c      	b.n	1bc9c <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bc62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bc66:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   1bc68:	4601      	mov	r1, r0
   1bc6a:	4812      	ldr	r0, [pc, #72]	; (1bcb4 <end_thread+0x98>)
   1bc6c:	f006 fea9 	bl	229c2 <z_priq_dumb_remove>
}
   1bc70:	e7e2      	b.n	1bc38 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1bc72:	4620      	mov	r0, r4
   1bc74:	f006 fe84 	bl	22980 <pended_on_thread>
   1bc78:	4621      	mov	r1, r4
   1bc7a:	f006 fea2 	bl	229c2 <z_priq_dumb_remove>
   1bc7e:	7b63      	ldrb	r3, [r4, #13]
   1bc80:	f023 0302 	bic.w	r3, r3, #2
   1bc84:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1bc86:	2600      	movs	r6, #0
   1bc88:	60a6      	str	r6, [r4, #8]
   1bc8a:	f104 0018 	add.w	r0, r4, #24
   1bc8e:	f006 ffef 	bl	22c70 <z_abort_timeout>
   1bc92:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
   1bc96:	4620      	mov	r0, r4
   1bc98:	f7ff ff02 	bl	1baa0 <ready_thread>
	return list->head == list;
   1bc9c:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bc9e:	42bc      	cmp	r4, r7
   1bca0:	d001      	beq.n	1bca6 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1bca2:	2c00      	cmp	r4, #0
   1bca4:	d1e5      	bne.n	1bc72 <end_thread+0x56>
		update_cache(1);
   1bca6:	2001      	movs	r0, #1
   1bca8:	f7ff fdac 	bl	1b804 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   1bcac:	4628      	mov	r0, r5
   1bcae:	f7ff fa2d 	bl	1b10c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   1bcb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bcb4:	20016c40 	.word	0x20016c40

0001bcb8 <z_sched_init>:
{
   1bcb8:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
   1bcba:	4b05      	ldr	r3, [pc, #20]	; (1bcd0 <z_sched_init+0x18>)
   1bcbc:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1bcc0:	629a      	str	r2, [r3, #40]	; 0x28
	list->tail = (sys_dnode_t *)list;
   1bcc2:	62da      	str	r2, [r3, #44]	; 0x2c
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1bcc4:	2100      	movs	r1, #0
   1bcc6:	4608      	mov	r0, r1
   1bcc8:	f7ff fd2c 	bl	1b724 <k_sched_time_slice_set>
}
   1bccc:	bd08      	pop	{r3, pc}
   1bcce:	bf00      	nop
   1bcd0:	20016c18 	.word	0x20016c18

0001bcd4 <z_impl_k_yield>:
{
   1bcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1bcd6:	f04f 0320 	mov.w	r3, #32
   1bcda:	f3ef 8611 	mrs	r6, BASEPRI
   1bcde:	f383 8811 	msr	BASEPRI, r3
   1bce2:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
   1bce6:	4c1c      	ldr	r4, [pc, #112]	; (1bd58 <z_impl_k_yield+0x84>)
   1bce8:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1bcea:	7b4b      	ldrb	r3, [r1, #13]
   1bcec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bcf0:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   1bcf2:	f104 0728 	add.w	r7, r4, #40	; 0x28
   1bcf6:	4638      	mov	r0, r7
   1bcf8:	f006 fe63 	bl	229c2 <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
   1bcfc:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1bcfe:	7b6b      	ldrb	r3, [r5, #13]
   1bd00:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1bd04:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1bd06:	6aa4      	ldr	r4, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bd08:	42bc      	cmp	r4, r7
   1bd0a:	d023      	beq.n	1bd54 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bd0c:	b16c      	cbz	r4, 1bd2a <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1bd0e:	4621      	mov	r1, r4
   1bd10:	4628      	mov	r0, r5
   1bd12:	f006 fe37 	bl	22984 <z_sched_prio_cmp>
   1bd16:	2800      	cmp	r0, #0
   1bd18:	dc16      	bgt.n	1bd48 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bd1a:	b134      	cbz	r4, 1bd2a <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   1bd1c:	4b0e      	ldr	r3, [pc, #56]	; (1bd58 <z_impl_k_yield+0x84>)
   1bd1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bd20:	429c      	cmp	r4, r3
   1bd22:	d002      	beq.n	1bd2a <z_impl_k_yield+0x56>
   1bd24:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bd26:	2c00      	cmp	r4, #0
   1bd28:	d1f0      	bne.n	1bd0c <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   1bd2a:	4b0b      	ldr	r3, [pc, #44]	; (1bd58 <z_impl_k_yield+0x84>)
   1bd2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	node->next = list;
   1bd2e:	f103 0128 	add.w	r1, r3, #40	; 0x28
   1bd32:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1bd34:	606a      	str	r2, [r5, #4]
	tail->next = node;
   1bd36:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1bd38:	62dd      	str	r5, [r3, #44]	; 0x2c
	update_cache(1);
   1bd3a:	2001      	movs	r0, #1
   1bd3c:	f7ff fd62 	bl	1b804 <update_cache>
   1bd40:	4630      	mov	r0, r6
   1bd42:	f7f7 ffa1 	bl	13c88 <arch_swap>
}
   1bd46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   1bd48:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1bd4a:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1bd4c:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1bd4e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1bd50:	6065      	str	r5, [r4, #4]
}
   1bd52:	e7f2      	b.n	1bd3a <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bd54:	2400      	movs	r4, #0
   1bd56:	e7d9      	b.n	1bd0c <z_impl_k_yield+0x38>
   1bd58:	20016c18 	.word	0x20016c18

0001bd5c <z_tick_sleep>:
{
   1bd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd60:	4604      	mov	r4, r0
   1bd62:	460d      	mov	r5, r1
	if (ticks == 0) {
   1bd64:	ea54 0105 	orrs.w	r1, r4, r5
   1bd68:	d037      	beq.n	1bdda <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1bd6a:	f06f 0101 	mvn.w	r1, #1
   1bd6e:	1a0a      	subs	r2, r1, r0
   1bd70:	f04f 31ff 	mov.w	r1, #4294967295
   1bd74:	eb61 0305 	sbc.w	r3, r1, r5
   1bd78:	2a01      	cmp	r2, #1
   1bd7a:	f173 0300 	sbcs.w	r3, r3, #0
   1bd7e:	db30      	blt.n	1bde2 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1bd80:	f06f 0601 	mvn.w	r6, #1
   1bd84:	1a36      	subs	r6, r6, r0
   1bd86:	f04f 0320 	mov.w	r3, #32
   1bd8a:	f3ef 8811 	mrs	r8, BASEPRI
   1bd8e:	f383 8811 	msr	BASEPRI, r3
   1bd92:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1bd96:	4f16      	ldr	r7, [pc, #88]	; (1bdf0 <z_tick_sleep+0x94>)
   1bd98:	68b8      	ldr	r0, [r7, #8]
   1bd9a:	4b16      	ldr	r3, [pc, #88]	; (1bdf4 <z_tick_sleep+0x98>)
   1bd9c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1bd9e:	f7ff fd57 	bl	1b850 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1bda2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1bda4:	4622      	mov	r2, r4
   1bda6:	462b      	mov	r3, r5
   1bda8:	4913      	ldr	r1, [pc, #76]	; (1bdf8 <z_tick_sleep+0x9c>)
   1bdaa:	3018      	adds	r0, #24
   1bdac:	f000 f904 	bl	1bfb8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1bdb0:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1bdb2:	7b53      	ldrb	r3, [r2, #13]
   1bdb4:	f043 0310 	orr.w	r3, r3, #16
   1bdb8:	7353      	strb	r3, [r2, #13]
   1bdba:	4640      	mov	r0, r8
   1bdbc:	f7f7 ff64 	bl	13c88 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1bdc0:	2500      	movs	r5, #0
   1bdc2:	f006 ffb4 	bl	22d2e <sys_clock_tick_get_32>
   1bdc6:	1a34      	subs	r4, r6, r0
   1bdc8:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   1bdcc:	2c01      	cmp	r4, #1
   1bdce:	f175 0300 	sbcs.w	r3, r5, #0
   1bdd2:	da0a      	bge.n	1bdea <z_tick_sleep+0x8e>
	return 0;
   1bdd4:	2000      	movs	r0, #0
}
   1bdd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   1bdda:	f7ff ff7b 	bl	1bcd4 <z_impl_k_yield>
		return 0;
   1bdde:	2000      	movs	r0, #0
   1bde0:	e7f9      	b.n	1bdd6 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1bde2:	f006 ffa4 	bl	22d2e <sys_clock_tick_get_32>
   1bde6:	1906      	adds	r6, r0, r4
   1bde8:	e7cd      	b.n	1bd86 <z_tick_sleep+0x2a>
		return ticks;
   1bdea:	4620      	mov	r0, r4
   1bdec:	e7f3      	b.n	1bdd6 <z_tick_sleep+0x7a>
   1bdee:	bf00      	nop
   1bdf0:	20016c18 	.word	0x20016c18
   1bdf4:	20016c50 	.word	0x20016c50
   1bdf8:	00022af5 	.word	0x00022af5

0001bdfc <z_impl_k_sleep>:
{
   1bdfc:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bdfe:	f1b1 3fff 	cmp.w	r1, #4294967295
   1be02:	bf08      	it	eq
   1be04:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1be08:	d01a      	beq.n	1be40 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   1be0a:	f7ff ffa7 	bl	1bd5c <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   1be0e:	4604      	mov	r4, r0
   1be10:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   1be12:	0169      	lsls	r1, r5, #5
   1be14:	0143      	lsls	r3, r0, #5
   1be16:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   1be1a:	1a18      	subs	r0, r3, r0
   1be1c:	eb62 0305 	sbc.w	r3, r2, r5
   1be20:	009a      	lsls	r2, r3, #2
   1be22:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   1be26:	0081      	lsls	r1, r0, #2
   1be28:	4613      	mov	r3, r2
   1be2a:	1908      	adds	r0, r1, r4
   1be2c:	eb45 0303 	adc.w	r3, r5, r3
   1be30:	00da      	lsls	r2, r3, #3
   1be32:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   1be36:	00c1      	lsls	r1, r0, #3
   1be38:	0bc8      	lsrs	r0, r1, #15
   1be3a:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   1be3e:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   1be40:	4b03      	ldr	r3, [pc, #12]	; (1be50 <z_impl_k_sleep+0x54>)
   1be42:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1be44:	f7ff fd34 	bl	1b8b0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1be48:	f04f 30ff 	mov.w	r0, #4294967295
   1be4c:	e7f7      	b.n	1be3e <z_impl_k_sleep+0x42>
   1be4e:	bf00      	nop
   1be50:	20016c18 	.word	0x20016c18

0001be54 <z_impl_k_current_get>:
}
   1be54:	4b01      	ldr	r3, [pc, #4]	; (1be5c <z_impl_k_current_get+0x8>)
   1be56:	6898      	ldr	r0, [r3, #8]
   1be58:	4770      	bx	lr
   1be5a:	bf00      	nop
   1be5c:	20016c18 	.word	0x20016c18

0001be60 <z_impl_k_is_preempt_thread>:
   1be60:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   1be64:	b933      	cbnz	r3, 1be74 <z_impl_k_is_preempt_thread+0x14>
   1be66:	4b05      	ldr	r3, [pc, #20]	; (1be7c <z_impl_k_is_preempt_thread+0x1c>)
   1be68:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1be6a:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   1be6c:	2b7f      	cmp	r3, #127	; 0x7f
   1be6e:	d803      	bhi.n	1be78 <z_impl_k_is_preempt_thread+0x18>
   1be70:	2001      	movs	r0, #1
   1be72:	4770      	bx	lr
   1be74:	2000      	movs	r0, #0
   1be76:	4770      	bx	lr
   1be78:	2000      	movs	r0, #0
}
   1be7a:	4770      	bx	lr
   1be7c:	20016c18 	.word	0x20016c18

0001be80 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   1be80:	b538      	push	{r3, r4, r5, lr}
   1be82:	f04f 0320 	mov.w	r3, #32
   1be86:	f3ef 8511 	mrs	r5, BASEPRI
   1be8a:	f383 8811 	msr	BASEPRI, r3
   1be8e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1be92:	7b43      	ldrb	r3, [r0, #13]
   1be94:	f013 0f08 	tst.w	r3, #8
   1be98:	d004      	beq.n	1bea4 <z_thread_abort+0x24>
	__asm__ volatile(
   1be9a:	f385 8811 	msr	BASEPRI, r5
   1be9e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1bea2:	bd38      	pop	{r3, r4, r5, pc}
   1bea4:	4604      	mov	r4, r0
	end_thread(thread);
   1bea6:	f7ff feb9 	bl	1bc1c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   1beaa:	4b08      	ldr	r3, [pc, #32]	; (1becc <z_thread_abort+0x4c>)
   1beac:	689b      	ldr	r3, [r3, #8]
   1beae:	42a3      	cmp	r3, r4
   1beb0:	d004      	beq.n	1bebc <z_thread_abort+0x3c>
   1beb2:	f385 8811 	msr	BASEPRI, r5
   1beb6:	f3bf 8f6f 	isb	sy
   1beba:	e7f2      	b.n	1bea2 <z_thread_abort+0x22>
   1bebc:	f3ef 8305 	mrs	r3, IPSR
   1bec0:	2b00      	cmp	r3, #0
   1bec2:	d1f6      	bne.n	1beb2 <z_thread_abort+0x32>
   1bec4:	4628      	mov	r0, r5
   1bec6:	f7f7 fedf 	bl	13c88 <arch_swap>
	return ret;
   1beca:	e7f2      	b.n	1beb2 <z_thread_abort+0x32>
   1becc:	20016c18 	.word	0x20016c18

0001bed0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1bed0:	b5d0      	push	{r4, r6, r7, lr}
   1bed2:	b082      	sub	sp, #8
   1bed4:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1bed6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   1beda:	e9cd 6700 	strd	r6, r7, [sp]
   1bede:	f7ff fcd3 	bl	1b888 <z_pend_curr>

	if (data != NULL) {
   1bee2:	b11c      	cbz	r4, 1beec <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   1bee4:	4b02      	ldr	r3, [pc, #8]	; (1bef0 <z_sched_wait+0x20>)
   1bee6:	689b      	ldr	r3, [r3, #8]
   1bee8:	695b      	ldr	r3, [r3, #20]
   1beea:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1beec:	b002      	add	sp, #8
   1beee:	bdd0      	pop	{r4, r6, r7, pc}
   1bef0:	20016c18 	.word	0x20016c18

0001bef4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1bef4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1bef6:	4806      	ldr	r0, [pc, #24]	; (1bf10 <z_data_copy+0x1c>)
   1bef8:	4a06      	ldr	r2, [pc, #24]	; (1bf14 <z_data_copy+0x20>)
   1befa:	1a12      	subs	r2, r2, r0
   1befc:	4906      	ldr	r1, [pc, #24]	; (1bf18 <z_data_copy+0x24>)
   1befe:	f007 f83a 	bl	22f76 <memcpy>
   1bf02:	4a06      	ldr	r2, [pc, #24]	; (1bf1c <z_data_copy+0x28>)
   1bf04:	4906      	ldr	r1, [pc, #24]	; (1bf20 <z_data_copy+0x2c>)
   1bf06:	4807      	ldr	r0, [pc, #28]	; (1bf24 <z_data_copy+0x30>)
   1bf08:	f007 f835 	bl	22f76 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1bf0c:	bd08      	pop	{r3, pc}
   1bf0e:	bf00      	nop
   1bf10:	20014500 	.word	0x20014500
   1bf14:	200148fc 	.word	0x200148fc
   1bf18:	00024ea4 	.word	0x00024ea4
   1bf1c:	00000000 	.word	0x00000000
   1bf20:	00024e8c 	.word	0x00024e8c
   1bf24:	20014500 	.word	0x20014500

0001bf28 <first>:
	return list->head == list;
   1bf28:	4b03      	ldr	r3, [pc, #12]	; (1bf38 <first+0x10>)
   1bf2a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bf2c:	4298      	cmp	r0, r3
   1bf2e:	d000      	beq.n	1bf32 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   1bf30:	4770      	bx	lr
   1bf32:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   1bf34:	e7fc      	b.n	1bf30 <first+0x8>
   1bf36:	bf00      	nop
   1bf38:	2001458c 	.word	0x2001458c

0001bf3c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bf3c:	b130      	cbz	r0, 1bf4c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   1bf3e:	4a04      	ldr	r2, [pc, #16]	; (1bf50 <next+0x14>)
   1bf40:	6852      	ldr	r2, [r2, #4]
   1bf42:	4290      	cmp	r0, r2
   1bf44:	d001      	beq.n	1bf4a <next+0xe>
   1bf46:	6800      	ldr	r0, [r0, #0]
   1bf48:	4770      	bx	lr
   1bf4a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   1bf4c:	4770      	bx	lr
   1bf4e:	bf00      	nop
   1bf50:	2001458c 	.word	0x2001458c

0001bf54 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   1bf54:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1bf56:	4b04      	ldr	r3, [pc, #16]	; (1bf68 <elapsed+0x14>)
   1bf58:	681b      	ldr	r3, [r3, #0]
   1bf5a:	b10b      	cbz	r3, 1bf60 <elapsed+0xc>
   1bf5c:	2000      	movs	r0, #0
}
   1bf5e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1bf60:	f7f7 fe74 	bl	13c4c <sys_clock_elapsed>
   1bf64:	e7fb      	b.n	1bf5e <elapsed+0xa>
   1bf66:	bf00      	nop
   1bf68:	20016c5c 	.word	0x20016c5c

0001bf6c <next_timeout>:

static int32_t next_timeout(void)
{
   1bf6c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   1bf6e:	f7ff ffdb 	bl	1bf28 <first>
   1bf72:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   1bf74:	f7ff ffee 	bl	1bf54 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   1bf78:	b18c      	cbz	r4, 1bf9e <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1bf7a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1bf7e:	1a12      	subs	r2, r2, r0
   1bf80:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1bf84:	2a01      	cmp	r2, #1
   1bf86:	f173 0100 	sbcs.w	r1, r3, #0
   1bf8a:	db11      	blt.n	1bfb0 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1bf8c:	4610      	mov	r0, r2
   1bf8e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1bf92:	f173 0300 	sbcs.w	r3, r3, #0
   1bf96:	db04      	blt.n	1bfa2 <next_timeout+0x36>
   1bf98:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1bf9c:	e001      	b.n	1bfa2 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   1bf9e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1bfa2:	4b04      	ldr	r3, [pc, #16]	; (1bfb4 <next_timeout+0x48>)
   1bfa4:	691b      	ldr	r3, [r3, #16]
   1bfa6:	b113      	cbz	r3, 1bfae <next_timeout+0x42>
   1bfa8:	4283      	cmp	r3, r0
   1bfaa:	da00      	bge.n	1bfae <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   1bfac:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   1bfae:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1bfb0:	2000      	movs	r0, #0
   1bfb2:	e7f6      	b.n	1bfa2 <next_timeout+0x36>
   1bfb4:	20016c18 	.word	0x20016c18

0001bfb8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1bfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfbc:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bfbe:	f1b3 3fff 	cmp.w	r3, #4294967295
   1bfc2:	bf08      	it	eq
   1bfc4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1bfc8:	f000 8096 	beq.w	1c0f8 <z_add_timeout+0x140>
   1bfcc:	4682      	mov	sl, r0
   1bfce:	4614      	mov	r4, r2
   1bfd0:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1bfd2:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   1bfd4:	2300      	movs	r3, #0
	__asm__ volatile(
   1bfd6:	f04f 0220 	mov.w	r2, #32
   1bfda:	f3ef 8b11 	mrs	fp, BASEPRI
   1bfde:	f382 8811 	msr	BASEPRI, r2
   1bfe2:	f3bf 8f6f 	isb	sy
   1bfe6:	e02e      	b.n	1c046 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   1bfe8:	2201      	movs	r2, #1
   1bfea:	2300      	movs	r3, #0
   1bfec:	e04b      	b.n	1c086 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1bfee:	f7ff ffb1 	bl	1bf54 <elapsed>
   1bff2:	1822      	adds	r2, r4, r0
   1bff4:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   1bff8:	3201      	adds	r2, #1
   1bffa:	f143 0300 	adc.w	r3, r3, #0
   1bffe:	f8ca 2010 	str.w	r2, [sl, #16]
   1c002:	f8ca 3014 	str.w	r3, [sl, #20]
   1c006:	e042      	b.n	1c08e <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   1c008:	9b00      	ldr	r3, [sp, #0]
   1c00a:	1ac2      	subs	r2, r0, r3
   1c00c:	9b01      	ldr	r3, [sp, #4]
   1c00e:	eb61 0303 	sbc.w	r3, r1, r3
   1c012:	f8cc 2010 	str.w	r2, [ip, #16]
   1c016:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   1c01a:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   1c01e:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   1c022:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   1c026:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   1c02a:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   1c02e:	f1bc 0f00 	cmp.w	ip, #0
   1c032:	d049      	beq.n	1c0c8 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1c034:	f7ff ff78 	bl	1bf28 <first>
   1c038:	4582      	cmp	sl, r0
   1c03a:	d050      	beq.n	1c0de <z_add_timeout+0x126>
	__asm__ volatile(
   1c03c:	f38b 8811 	msr	BASEPRI, fp
   1c040:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1c044:	2301      	movs	r3, #1
   1c046:	2b00      	cmp	r3, #0
   1c048:	d156      	bne.n	1c0f8 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1c04a:	f06f 0301 	mvn.w	r3, #1
   1c04e:	ebb3 0804 	subs.w	r8, r3, r4
   1c052:	f04f 30ff 	mov.w	r0, #4294967295
   1c056:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1c05a:	f1b8 0f00 	cmp.w	r8, #0
   1c05e:	f179 0300 	sbcs.w	r3, r9, #0
   1c062:	dbc4      	blt.n	1bfee <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1c064:	4a26      	ldr	r2, [pc, #152]	; (1c100 <z_add_timeout+0x148>)
   1c066:	6813      	ldr	r3, [r2, #0]
   1c068:	6852      	ldr	r2, [r2, #4]
   1c06a:	18e3      	adds	r3, r4, r3
   1c06c:	eb45 0202 	adc.w	r2, r5, r2
   1c070:	f06f 0101 	mvn.w	r1, #1
   1c074:	1ace      	subs	r6, r1, r3
   1c076:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   1c07a:	4632      	mov	r2, r6
   1c07c:	463b      	mov	r3, r7
   1c07e:	2e01      	cmp	r6, #1
   1c080:	f177 0100 	sbcs.w	r1, r7, #0
   1c084:	dbb0      	blt.n	1bfe8 <z_add_timeout+0x30>
   1c086:	f8ca 2010 	str.w	r2, [sl, #16]
   1c08a:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1c08e:	f7ff ff4b 	bl	1bf28 <first>
   1c092:	4684      	mov	ip, r0
   1c094:	f1bc 0f00 	cmp.w	ip, #0
   1c098:	d0c9      	beq.n	1c02e <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   1c09a:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   1c09e:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   1c0a2:	e9cd 2300 	strd	r2, r3, [sp]
   1c0a6:	4282      	cmp	r2, r0
   1c0a8:	418b      	sbcs	r3, r1
   1c0aa:	dbad      	blt.n	1c008 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   1c0ac:	9b00      	ldr	r3, [sp, #0]
   1c0ae:	1a1a      	subs	r2, r3, r0
   1c0b0:	9b01      	ldr	r3, [sp, #4]
   1c0b2:	eb63 0301 	sbc.w	r3, r3, r1
   1c0b6:	f8ca 2010 	str.w	r2, [sl, #16]
   1c0ba:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1c0be:	4660      	mov	r0, ip
   1c0c0:	f7ff ff3c 	bl	1bf3c <next>
   1c0c4:	4684      	mov	ip, r0
   1c0c6:	e7e5      	b.n	1c094 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   1c0c8:	4b0e      	ldr	r3, [pc, #56]	; (1c104 <z_add_timeout+0x14c>)
   1c0ca:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1c0cc:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   1c0d0:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   1c0d4:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1c0d8:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1c0dc:	e7aa      	b.n	1c034 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1c0de:	f7ff ff45 	bl	1bf6c <next_timeout>

			if (next_time == 0 ||
   1c0e2:	4603      	mov	r3, r0
   1c0e4:	b118      	cbz	r0, 1c0ee <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   1c0e6:	4a08      	ldr	r2, [pc, #32]	; (1c108 <z_add_timeout+0x150>)
   1c0e8:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   1c0ea:	4282      	cmp	r2, r0
   1c0ec:	d0a6      	beq.n	1c03c <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   1c0ee:	2100      	movs	r1, #0
   1c0f0:	4618      	mov	r0, r3
   1c0f2:	f7f7 fd7b 	bl	13bec <sys_clock_set_timeout>
   1c0f6:	e7a1      	b.n	1c03c <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1c0f8:	b003      	add	sp, #12
   1c0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0fe:	bf00      	nop
   1c100:	200150d8 	.word	0x200150d8
   1c104:	2001458c 	.word	0x2001458c
   1c108:	20016c18 	.word	0x20016c18

0001c10c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1c10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c10e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1c110:	f7ff fc7a 	bl	1ba08 <z_time_slice>
	__asm__ volatile(
   1c114:	f04f 0320 	mov.w	r3, #32
   1c118:	f3ef 8511 	mrs	r5, BASEPRI
   1c11c:	f383 8811 	msr	BASEPRI, r3
   1c120:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1c124:	4b28      	ldr	r3, [pc, #160]	; (1c1c8 <sys_clock_announce+0xbc>)
   1c126:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1c128:	f7ff fefe 	bl	1bf28 <first>
   1c12c:	4604      	mov	r4, r0
   1c12e:	b350      	cbz	r0, 1c186 <sys_clock_announce+0x7a>
   1c130:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1c134:	4b24      	ldr	r3, [pc, #144]	; (1c1c8 <sys_clock_announce+0xbc>)
   1c136:	681b      	ldr	r3, [r3, #0]
   1c138:	17d9      	asrs	r1, r3, #31
   1c13a:	42b3      	cmp	r3, r6
   1c13c:	eb71 0207 	sbcs.w	r2, r1, r7
   1c140:	db21      	blt.n	1c186 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1c142:	4a22      	ldr	r2, [pc, #136]	; (1c1cc <sys_clock_announce+0xc0>)
   1c144:	e9d2 0100 	ldrd	r0, r1, [r2]
   1c148:	1980      	adds	r0, r0, r6
   1c14a:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   1c14e:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   1c152:	1b9b      	subs	r3, r3, r6
   1c154:	4a1c      	ldr	r2, [pc, #112]	; (1c1c8 <sys_clock_announce+0xbc>)
   1c156:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   1c158:	2200      	movs	r2, #0
   1c15a:	2300      	movs	r3, #0
   1c15c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1c160:	4620      	mov	r0, r4
   1c162:	f006 fd6e 	bl	22c42 <remove_timeout>
	__asm__ volatile(
   1c166:	f385 8811 	msr	BASEPRI, r5
   1c16a:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   1c16e:	68a3      	ldr	r3, [r4, #8]
   1c170:	4620      	mov	r0, r4
   1c172:	4798      	blx	r3
	__asm__ volatile(
   1c174:	f04f 0320 	mov.w	r3, #32
   1c178:	f3ef 8511 	mrs	r5, BASEPRI
   1c17c:	f383 8811 	msr	BASEPRI, r3
   1c180:	f3bf 8f6f 	isb	sy
   1c184:	e7d0      	b.n	1c128 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   1c186:	b144      	cbz	r4, 1c19a <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   1c188:	4b0f      	ldr	r3, [pc, #60]	; (1c1c8 <sys_clock_announce+0xbc>)
   1c18a:	6819      	ldr	r1, [r3, #0]
   1c18c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1c190:	1a52      	subs	r2, r2, r1
   1c192:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   1c196:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   1c19a:	480c      	ldr	r0, [pc, #48]	; (1c1cc <sys_clock_announce+0xc0>)
   1c19c:	490a      	ldr	r1, [pc, #40]	; (1c1c8 <sys_clock_announce+0xbc>)
   1c19e:	680c      	ldr	r4, [r1, #0]
   1c1a0:	e9d0 2300 	ldrd	r2, r3, [r0]
   1c1a4:	1912      	adds	r2, r2, r4
   1c1a6:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   1c1aa:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   1c1ae:	2400      	movs	r4, #0
   1c1b0:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1c1b2:	f7ff fedb 	bl	1bf6c <next_timeout>
   1c1b6:	4621      	mov	r1, r4
   1c1b8:	f7f7 fd18 	bl	13bec <sys_clock_set_timeout>
	__asm__ volatile(
   1c1bc:	f385 8811 	msr	BASEPRI, r5
   1c1c0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1c1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c1c6:	bf00      	nop
   1c1c8:	20016c5c 	.word	0x20016c5c
   1c1cc:	200150d8 	.word	0x200150d8

0001c1d0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1c1d0:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   1c1d2:	2100      	movs	r1, #0
	__asm__ volatile(
   1c1d4:	f04f 0320 	mov.w	r3, #32
   1c1d8:	f3ef 8411 	mrs	r4, BASEPRI
   1c1dc:	f383 8811 	msr	BASEPRI, r3
   1c1e0:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   1c1e4:	2200      	movs	r2, #0
   1c1e6:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   1c1e8:	b969      	cbnz	r1, 1c206 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   1c1ea:	f7f7 fd2f 	bl	13c4c <sys_clock_elapsed>
   1c1ee:	4b07      	ldr	r3, [pc, #28]	; (1c20c <sys_clock_tick_get+0x3c>)
   1c1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c1f4:	1812      	adds	r2, r2, r0
   1c1f6:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1c1fa:	f384 8811 	msr	BASEPRI, r4
   1c1fe:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1c202:	2101      	movs	r1, #1
   1c204:	e7f0      	b.n	1c1e8 <sys_clock_tick_get+0x18>
	}
	return t;
}
   1c206:	4610      	mov	r0, r2
   1c208:	4619      	mov	r1, r3
   1c20a:	bd10      	pop	{r4, pc}
   1c20c:	200150d8 	.word	0x200150d8

0001c210 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1c210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c214:	b08d      	sub	sp, #52	; 0x34
   1c216:	4605      	mov	r5, r0
   1c218:	9107      	str	r1, [sp, #28]
   1c21a:	9202      	str	r2, [sp, #8]
   1c21c:	9303      	str	r3, [sp, #12]
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1c21e:	4ba4      	ldr	r3, [pc, #656]	; (1c4b0 <z_impl_k_poll+0x2a0>)
   1c220:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1c224:	f109 0760 	add.w	r7, r9, #96	; 0x60

	poller->is_polling = true;
   1c228:	2301      	movs	r3, #1
   1c22a:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60
	poller->mode = MODE_POLL;
   1c22e:	f889 3061 	strb.w	r3, [r9, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1c232:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1c236:	4613      	mov	r3, r2
   1c238:	430b      	orrs	r3, r1
   1c23a:	bf0c      	ite	eq
   1c23c:	2301      	moveq	r3, #1
   1c23e:	2300      	movne	r3, #0
   1c240:	9306      	str	r3, [sp, #24]
	for (int ii = 0; ii < num_events; ii++) {
   1c242:	2600      	movs	r6, #0
	int events_registered = 0;
   1c244:	46b3      	mov	fp, r6
	for (int ii = 0; ii < num_events; ii++) {
   1c246:	e02e      	b.n	1c2a6 <z_impl_k_poll+0x96>
		if (k_sem_count_get(event->sem) > 0U) {
   1c248:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   1c24a:	689b      	ldr	r3, [r3, #8]
   1c24c:	b1c3      	cbz	r3, 1c280 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1c24e:	2302      	movs	r3, #2
   1c250:	9305      	str	r3, [sp, #20]
			return true;
   1c252:	2301      	movs	r3, #1
   1c254:	e014      	b.n	1c280 <z_impl_k_poll+0x70>
		if (!k_queue_is_empty(event->queue)) {
   1c256:	6923      	ldr	r3, [r4, #16]
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1c258:	681b      	ldr	r3, [r3, #0]
   1c25a:	b18b      	cbz	r3, 1c280 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1c25c:	2304      	movs	r3, #4
   1c25e:	9305      	str	r3, [sp, #20]
			return true;
   1c260:	2301      	movs	r3, #1
   1c262:	e00d      	b.n	1c280 <z_impl_k_poll+0x70>
		if (event->signal->signaled != 0U) {
   1c264:	6923      	ldr	r3, [r4, #16]
   1c266:	689b      	ldr	r3, [r3, #8]
   1c268:	b153      	cbz	r3, 1c280 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SIGNALED;
   1c26a:	2301      	movs	r3, #1
   1c26c:	9305      	str	r3, [sp, #20]
   1c26e:	e007      	b.n	1c280 <z_impl_k_poll+0x70>
		if (event->msgq->used_msgs > 0) {
   1c270:	6923      	ldr	r3, [r4, #16]
   1c272:	6a1b      	ldr	r3, [r3, #32]
   1c274:	b123      	cbz	r3, 1c280 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1c276:	2310      	movs	r3, #16
   1c278:	9305      	str	r3, [sp, #20]
			return true;
   1c27a:	2301      	movs	r3, #1
   1c27c:	e000      	b.n	1c280 <z_impl_k_poll+0x70>
	switch (event->type) {
   1c27e:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
   1c280:	2b00      	cmp	r3, #0
   1c282:	d03d      	beq.n	1c300 <z_impl_k_poll+0xf0>
	event->poller = NULL;
   1c284:	2100      	movs	r1, #0
   1c286:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   1c288:	68e3      	ldr	r3, [r4, #12]
   1c28a:	f3c3 3245 	ubfx	r2, r3, #13, #6
   1c28e:	9805      	ldr	r0, [sp, #20]
   1c290:	4302      	orrs	r2, r0
   1c292:	f362 3352 	bfi	r3, r2, #13, #6
   1c296:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   1c298:	7039      	strb	r1, [r7, #0]
   1c29a:	9b08      	ldr	r3, [sp, #32]
   1c29c:	f383 8811 	msr	BASEPRI, r3
   1c2a0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1c2a4:	3601      	adds	r6, #1
   1c2a6:	9b07      	ldr	r3, [sp, #28]
   1c2a8:	42b3      	cmp	r3, r6
   1c2aa:	f340 81bf 	ble.w	1c62c <z_impl_k_poll+0x41c>
	__asm__ volatile(
   1c2ae:	f04f 0320 	mov.w	r3, #32
   1c2b2:	f3ef 8211 	mrs	r2, BASEPRI
   1c2b6:	f383 8811 	msr	BASEPRI, r3
   1c2ba:	f3bf 8f6f 	isb	sy
   1c2be:	9208      	str	r2, [sp, #32]
		if (is_condition_met(&events[ii], &state)) {
   1c2c0:	eb06 0486 	add.w	r4, r6, r6, lsl #2
   1c2c4:	00a3      	lsls	r3, r4, #2
   1c2c6:	9309      	str	r3, [sp, #36]	; 0x24
   1c2c8:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	switch (event->type) {
   1c2cc:	7b63      	ldrb	r3, [r4, #13]
   1c2ce:	f003 031f 	and.w	r3, r3, #31
   1c2d2:	3b01      	subs	r3, #1
   1c2d4:	2b07      	cmp	r3, #7
   1c2d6:	d8d2      	bhi.n	1c27e <z_impl_k_poll+0x6e>
   1c2d8:	a201      	add	r2, pc, #4	; (adr r2, 1c2e0 <z_impl_k_poll+0xd0>)
   1c2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c2de:	bf00      	nop
   1c2e0:	0001c265 	.word	0x0001c265
   1c2e4:	0001c249 	.word	0x0001c249
   1c2e8:	0001c27f 	.word	0x0001c27f
   1c2ec:	0001c257 	.word	0x0001c257
   1c2f0:	0001c27f 	.word	0x0001c27f
   1c2f4:	0001c27f 	.word	0x0001c27f
   1c2f8:	0001c27f 	.word	0x0001c27f
   1c2fc:	0001c271 	.word	0x0001c271
		} else if (!just_check && poller->is_polling) {
   1c300:	9b06      	ldr	r3, [sp, #24]
   1c302:	2b00      	cmp	r3, #0
   1c304:	d1c9      	bne.n	1c29a <z_impl_k_poll+0x8a>
   1c306:	783b      	ldrb	r3, [r7, #0]
   1c308:	2b00      	cmp	r3, #0
   1c30a:	d0c6      	beq.n	1c29a <z_impl_k_poll+0x8a>
	switch (event->type) {
   1c30c:	7b63      	ldrb	r3, [r4, #13]
   1c30e:	f003 031f 	and.w	r3, r3, #31
   1c312:	3b01      	subs	r3, #1
   1c314:	2b07      	cmp	r3, #7
   1c316:	d846      	bhi.n	1c3a6 <z_impl_k_poll+0x196>
   1c318:	e8df f013 	tbh	[pc, r3, lsl #1]
   1c31c:	000800cc 	.word	0x000800cc
   1c320:	006a0045 	.word	0x006a0045
   1c324:	00450045 	.word	0x00450045
   1c328:	01290045 	.word	0x01290045
		add_event(&event->sem->poll_events, event, poller);
   1c32c:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1c330:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   1c334:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1c338:	4598      	cmp	r8, r3
   1c33a:	d02b      	beq.n	1c394 <z_impl_k_poll+0x184>
   1c33c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1c340:	b343      	cbz	r3, 1c394 <z_impl_k_poll+0x184>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1c342:	6898      	ldr	r0, [r3, #8]
   1c344:	f006 fd31 	bl	22daa <poller_thread>
   1c348:	900b      	str	r0, [sp, #44]	; 0x2c
   1c34a:	4638      	mov	r0, r7
   1c34c:	f006 fd2d 	bl	22daa <poller_thread>
   1c350:	4601      	mov	r1, r0
   1c352:	900a      	str	r0, [sp, #40]	; 0x28
   1c354:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c356:	f006 fb15 	bl	22984 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1c35a:	2800      	cmp	r0, #0
   1c35c:	dc1a      	bgt.n	1c394 <z_impl_k_poll+0x184>
	return list->head == list;
   1c35e:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c362:	45d0      	cmp	r8, sl
   1c364:	d02f      	beq.n	1c3c6 <z_impl_k_poll+0x1b6>
   1c366:	4653      	mov	r3, sl
   1c368:	46a2      	mov	sl, r4
   1c36a:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c36c:	b38c      	cbz	r4, 1c3d2 <z_impl_k_poll+0x1c2>
		if (z_sched_prio_cmp(poller_thread(poller),
   1c36e:	68a0      	ldr	r0, [r4, #8]
   1c370:	f006 fd1b 	bl	22daa <poller_thread>
   1c374:	4601      	mov	r1, r0
   1c376:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c378:	f006 fb04 	bl	22984 <z_sched_prio_cmp>
   1c37c:	2800      	cmp	r0, #0
   1c37e:	dc16      	bgt.n	1c3ae <z_impl_k_poll+0x19e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c380:	b34c      	cbz	r4, 1c3d6 <z_impl_k_poll+0x1c6>
	return (node == list->tail) ? NULL : node->next;
   1c382:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c386:	429c      	cmp	r4, r3
   1c388:	d030      	beq.n	1c3ec <z_impl_k_poll+0x1dc>
   1c38a:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c38c:	2c00      	cmp	r4, #0
   1c38e:	d1ed      	bne.n	1c36c <z_impl_k_poll+0x15c>
   1c390:	4654      	mov	r4, sl
   1c392:	e021      	b.n	1c3d8 <z_impl_k_poll+0x1c8>
	sys_dnode_t *const tail = list->tail;
   1c394:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c398:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c39a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c39e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c3a0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c3a2:	f8c8 4004 	str.w	r4, [r8, #4]
	event->poller = poller;
   1c3a6:	60a7      	str	r7, [r4, #8]
			events_registered += 1;
   1c3a8:	f10b 0b01 	add.w	fp, fp, #1
   1c3ac:	e775      	b.n	1c29a <z_impl_k_poll+0x8a>
   1c3ae:	4623      	mov	r3, r4
   1c3b0:	4654      	mov	r4, sl
   1c3b2:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1c3b4:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1c3b6:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1c3b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c3ba:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1c3be:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1c3c0:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1c3c4:	e7ef      	b.n	1c3a6 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c3c6:	f04f 0a00 	mov.w	sl, #0
   1c3ca:	4653      	mov	r3, sl
   1c3cc:	46a2      	mov	sl, r4
   1c3ce:	461c      	mov	r4, r3
   1c3d0:	e7cc      	b.n	1c36c <z_impl_k_poll+0x15c>
   1c3d2:	4654      	mov	r4, sl
   1c3d4:	e000      	b.n	1c3d8 <z_impl_k_poll+0x1c8>
   1c3d6:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1c3d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c3dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c3de:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c3e2:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c3e4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c3e6:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1c3ea:	e7dc      	b.n	1c3a6 <z_impl_k_poll+0x196>
   1c3ec:	4654      	mov	r4, sl
   1c3ee:	e7f3      	b.n	1c3d8 <z_impl_k_poll+0x1c8>
		add_event(&event->queue->poll_events, event, poller);
   1c3f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1c3f4:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   1c3f8:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1c3fc:	4598      	cmp	r8, r3
   1c3fe:	d02b      	beq.n	1c458 <z_impl_k_poll+0x248>
   1c400:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1c404:	b343      	cbz	r3, 1c458 <z_impl_k_poll+0x248>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1c406:	6898      	ldr	r0, [r3, #8]
   1c408:	f006 fccf 	bl	22daa <poller_thread>
   1c40c:	900b      	str	r0, [sp, #44]	; 0x2c
   1c40e:	4638      	mov	r0, r7
   1c410:	f006 fccb 	bl	22daa <poller_thread>
   1c414:	4601      	mov	r1, r0
   1c416:	900a      	str	r0, [sp, #40]	; 0x28
   1c418:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c41a:	f006 fab3 	bl	22984 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1c41e:	2800      	cmp	r0, #0
   1c420:	dc1a      	bgt.n	1c458 <z_impl_k_poll+0x248>
	return list->head == list;
   1c422:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c426:	45d0      	cmp	r8, sl
   1c428:	d02c      	beq.n	1c484 <z_impl_k_poll+0x274>
   1c42a:	4653      	mov	r3, sl
   1c42c:	46a2      	mov	sl, r4
   1c42e:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c430:	b374      	cbz	r4, 1c490 <z_impl_k_poll+0x280>
		if (z_sched_prio_cmp(poller_thread(poller),
   1c432:	68a0      	ldr	r0, [r4, #8]
   1c434:	f006 fcb9 	bl	22daa <poller_thread>
   1c438:	4601      	mov	r1, r0
   1c43a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c43c:	f006 faa2 	bl	22984 <z_sched_prio_cmp>
   1c440:	2800      	cmp	r0, #0
   1c442:	dc13      	bgt.n	1c46c <z_impl_k_poll+0x25c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c444:	b334      	cbz	r4, 1c494 <z_impl_k_poll+0x284>
	return (node == list->tail) ? NULL : node->next;
   1c446:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c44a:	429c      	cmp	r4, r3
   1c44c:	d02d      	beq.n	1c4aa <z_impl_k_poll+0x29a>
   1c44e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c450:	2c00      	cmp	r4, #0
   1c452:	d1ed      	bne.n	1c430 <z_impl_k_poll+0x220>
   1c454:	4654      	mov	r4, sl
   1c456:	e01e      	b.n	1c496 <z_impl_k_poll+0x286>
	sys_dnode_t *const tail = list->tail;
   1c458:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c45c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c45e:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c462:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c464:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c466:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1c46a:	e79c      	b.n	1c3a6 <z_impl_k_poll+0x196>
   1c46c:	4623      	mov	r3, r4
   1c46e:	4654      	mov	r4, sl
   1c470:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1c472:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1c474:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1c476:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c478:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1c47c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1c47e:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1c482:	e790      	b.n	1c3a6 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c484:	f04f 0a00 	mov.w	sl, #0
   1c488:	4653      	mov	r3, sl
   1c48a:	46a2      	mov	sl, r4
   1c48c:	461c      	mov	r4, r3
   1c48e:	e7cf      	b.n	1c430 <z_impl_k_poll+0x220>
   1c490:	4654      	mov	r4, sl
   1c492:	e000      	b.n	1c496 <z_impl_k_poll+0x286>
   1c494:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1c496:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c49a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c49c:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c4a0:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c4a2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c4a4:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1c4a8:	e77d      	b.n	1c3a6 <z_impl_k_poll+0x196>
   1c4aa:	4654      	mov	r4, sl
   1c4ac:	e7f3      	b.n	1c496 <z_impl_k_poll+0x286>
   1c4ae:	bf00      	nop
   1c4b0:	20016c18 	.word	0x20016c18
		add_event(&event->signal->poll_events, event, poller);
   1c4b4:	f8d4 8010 	ldr.w	r8, [r4, #16]
	return list->head == list;
   1c4b8:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1c4bc:	4598      	cmp	r8, r3
   1c4be:	d02b      	beq.n	1c518 <z_impl_k_poll+0x308>
   1c4c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1c4c4:	b343      	cbz	r3, 1c518 <z_impl_k_poll+0x308>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1c4c6:	6898      	ldr	r0, [r3, #8]
   1c4c8:	f006 fc6f 	bl	22daa <poller_thread>
   1c4cc:	4682      	mov	sl, r0
   1c4ce:	4638      	mov	r0, r7
   1c4d0:	f006 fc6b 	bl	22daa <poller_thread>
   1c4d4:	4601      	mov	r1, r0
   1c4d6:	900a      	str	r0, [sp, #40]	; 0x28
   1c4d8:	4650      	mov	r0, sl
   1c4da:	f006 fa53 	bl	22984 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1c4de:	2800      	cmp	r0, #0
   1c4e0:	dc1a      	bgt.n	1c518 <z_impl_k_poll+0x308>
	return list->head == list;
   1c4e2:	f8d8 a000 	ldr.w	sl, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c4e6:	45d0      	cmp	r8, sl
   1c4e8:	d02c      	beq.n	1c544 <z_impl_k_poll+0x334>
   1c4ea:	4653      	mov	r3, sl
   1c4ec:	46a2      	mov	sl, r4
   1c4ee:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c4f0:	b374      	cbz	r4, 1c550 <z_impl_k_poll+0x340>
		if (z_sched_prio_cmp(poller_thread(poller),
   1c4f2:	68a0      	ldr	r0, [r4, #8]
   1c4f4:	f006 fc59 	bl	22daa <poller_thread>
   1c4f8:	4601      	mov	r1, r0
   1c4fa:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c4fc:	f006 fa42 	bl	22984 <z_sched_prio_cmp>
   1c500:	2800      	cmp	r0, #0
   1c502:	dc13      	bgt.n	1c52c <z_impl_k_poll+0x31c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c504:	b334      	cbz	r4, 1c554 <z_impl_k_poll+0x344>
	return (node == list->tail) ? NULL : node->next;
   1c506:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c50a:	429c      	cmp	r4, r3
   1c50c:	d02d      	beq.n	1c56a <z_impl_k_poll+0x35a>
   1c50e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c510:	2c00      	cmp	r4, #0
   1c512:	d1ed      	bne.n	1c4f0 <z_impl_k_poll+0x2e0>
   1c514:	4654      	mov	r4, sl
   1c516:	e01e      	b.n	1c556 <z_impl_k_poll+0x346>
	sys_dnode_t *const tail = list->tail;
   1c518:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c51c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c51e:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c522:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c524:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c526:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1c52a:	e73c      	b.n	1c3a6 <z_impl_k_poll+0x196>
   1c52c:	4623      	mov	r3, r4
   1c52e:	4654      	mov	r4, sl
   1c530:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1c532:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1c534:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1c536:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c538:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1c53c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1c53e:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1c542:	e730      	b.n	1c3a6 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c544:	f04f 0a00 	mov.w	sl, #0
   1c548:	4653      	mov	r3, sl
   1c54a:	46a2      	mov	sl, r4
   1c54c:	461c      	mov	r4, r3
   1c54e:	e7cf      	b.n	1c4f0 <z_impl_k_poll+0x2e0>
   1c550:	4654      	mov	r4, sl
   1c552:	e000      	b.n	1c556 <z_impl_k_poll+0x346>
   1c554:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1c556:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c55a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c55c:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c560:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c562:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c564:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1c568:	e71d      	b.n	1c3a6 <z_impl_k_poll+0x196>
   1c56a:	4654      	mov	r4, sl
   1c56c:	e7f3      	b.n	1c556 <z_impl_k_poll+0x346>
		add_event(&event->msgq->poll_events, event, poller);
   1c56e:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1c572:	f10a 0824 	add.w	r8, sl, #36	; 0x24
	return list->head == list;
   1c576:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1c57a:	4598      	cmp	r8, r3
   1c57c:	d02b      	beq.n	1c5d6 <z_impl_k_poll+0x3c6>
   1c57e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1c582:	b343      	cbz	r3, 1c5d6 <z_impl_k_poll+0x3c6>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1c584:	6898      	ldr	r0, [r3, #8]
   1c586:	f006 fc10 	bl	22daa <poller_thread>
   1c58a:	900b      	str	r0, [sp, #44]	; 0x2c
   1c58c:	4638      	mov	r0, r7
   1c58e:	f006 fc0c 	bl	22daa <poller_thread>
   1c592:	4601      	mov	r1, r0
   1c594:	900a      	str	r0, [sp, #40]	; 0x28
   1c596:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c598:	f006 f9f4 	bl	22984 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1c59c:	2800      	cmp	r0, #0
   1c59e:	dc1a      	bgt.n	1c5d6 <z_impl_k_poll+0x3c6>
	return list->head == list;
   1c5a0:	f8da a024 	ldr.w	sl, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c5a4:	45d0      	cmp	r8, sl
   1c5a6:	d02c      	beq.n	1c602 <z_impl_k_poll+0x3f2>
   1c5a8:	4653      	mov	r3, sl
   1c5aa:	46a2      	mov	sl, r4
   1c5ac:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c5ae:	b374      	cbz	r4, 1c60e <z_impl_k_poll+0x3fe>
		if (z_sched_prio_cmp(poller_thread(poller),
   1c5b0:	68a0      	ldr	r0, [r4, #8]
   1c5b2:	f006 fbfa 	bl	22daa <poller_thread>
   1c5b6:	4601      	mov	r1, r0
   1c5b8:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c5ba:	f006 f9e3 	bl	22984 <z_sched_prio_cmp>
   1c5be:	2800      	cmp	r0, #0
   1c5c0:	dc13      	bgt.n	1c5ea <z_impl_k_poll+0x3da>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c5c2:	b334      	cbz	r4, 1c612 <z_impl_k_poll+0x402>
	return (node == list->tail) ? NULL : node->next;
   1c5c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c5c8:	429c      	cmp	r4, r3
   1c5ca:	d02d      	beq.n	1c628 <z_impl_k_poll+0x418>
   1c5cc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c5ce:	2c00      	cmp	r4, #0
   1c5d0:	d1ed      	bne.n	1c5ae <z_impl_k_poll+0x39e>
   1c5d2:	4654      	mov	r4, sl
   1c5d4:	e01e      	b.n	1c614 <z_impl_k_poll+0x404>
	sys_dnode_t *const tail = list->tail;
   1c5d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c5da:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c5dc:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c5e0:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c5e2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c5e4:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1c5e8:	e6dd      	b.n	1c3a6 <z_impl_k_poll+0x196>
   1c5ea:	4623      	mov	r3, r4
   1c5ec:	4654      	mov	r4, sl
   1c5ee:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1c5f0:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1c5f2:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1c5f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c5f6:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1c5fa:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1c5fc:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1c600:	e6d1      	b.n	1c3a6 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c602:	f04f 0a00 	mov.w	sl, #0
   1c606:	4653      	mov	r3, sl
   1c608:	46a2      	mov	sl, r4
   1c60a:	461c      	mov	r4, r3
   1c60c:	e7cf      	b.n	1c5ae <z_impl_k_poll+0x39e>
   1c60e:	4654      	mov	r4, sl
   1c610:	e000      	b.n	1c614 <z_impl_k_poll+0x404>
   1c612:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1c614:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c618:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c61a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c61e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c620:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c622:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1c626:	e6be      	b.n	1c3a6 <z_impl_k_poll+0x196>
   1c628:	4654      	mov	r4, sl
   1c62a:	e7f3      	b.n	1c614 <z_impl_k_poll+0x404>
   1c62c:	f04f 0320 	mov.w	r3, #32
   1c630:	f3ef 8111 	mrs	r1, BASEPRI
   1c634:	f383 8811 	msr	BASEPRI, r3
   1c638:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1c63c:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
   1c640:	b1cb      	cbz	r3, 1c676 <z_impl_k_poll+0x466>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   1c642:	2300      	movs	r3, #0
   1c644:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c648:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1c64c:	4323      	orrs	r3, r4
   1c64e:	d045      	beq.n	1c6dc <z_impl_k_poll+0x4cc>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c650:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1c654:	e9cd 3400 	strd	r3, r4, [sp]
   1c658:	4a3c      	ldr	r2, [pc, #240]	; (1c74c <z_impl_k_poll+0x53c>)
   1c65a:	483d      	ldr	r0, [pc, #244]	; (1c750 <z_impl_k_poll+0x540>)
   1c65c:	f7ff f914 	bl	1b888 <z_pend_curr>
   1c660:	f04f 0320 	mov.w	r3, #32
   1c664:	f3ef 8c11 	mrs	ip, BASEPRI
   1c668:	f383 8811 	msr	BASEPRI, r3
   1c66c:	f3bf 8f6f 	isb	sy
   1c670:	4661      	mov	r1, ip
	while (num_events--) {
   1c672:	465b      	mov	r3, fp
   1c674:	e04e      	b.n	1c714 <z_impl_k_poll+0x504>
		clear_event_registrations(events, events_registered, key);
   1c676:	4608      	mov	r0, r1
	while (num_events--) {
   1c678:	465b      	mov	r3, fp
   1c67a:	e014      	b.n	1c6a6 <z_impl_k_poll+0x496>
	return node->next != NULL;
   1c67c:	59aa      	ldr	r2, [r5, r6]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1c67e:	b12a      	cbz	r2, 1c68c <z_impl_k_poll+0x47c>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1c680:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1c682:	6022      	str	r2, [r4, #0]
	next->prev = prev;
   1c684:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   1c686:	2200      	movs	r2, #0
   1c688:	51aa      	str	r2, [r5, r6]
	node->prev = NULL;
   1c68a:	605a      	str	r2, [r3, #4]
	__asm__ volatile(
   1c68c:	f380 8811 	msr	BASEPRI, r0
   1c690:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c694:	f04f 0320 	mov.w	r3, #32
   1c698:	f3ef 8011 	mrs	r0, BASEPRI
   1c69c:	f383 8811 	msr	BASEPRI, r3
   1c6a0:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   1c6a4:	463b      	mov	r3, r7
   1c6a6:	1e5f      	subs	r7, r3, #1
   1c6a8:	b193      	cbz	r3, 1c6d0 <z_impl_k_poll+0x4c0>
		clear_event_registration(&events[num_events]);
   1c6aa:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   1c6ae:	009e      	lsls	r6, r3, #2
   1c6b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   1c6b4:	2200      	movs	r2, #0
   1c6b6:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   1c6b8:	7b5a      	ldrb	r2, [r3, #13]
   1c6ba:	f002 021f 	and.w	r2, r2, #31
   1c6be:	2a08      	cmp	r2, #8
   1c6c0:	d8e4      	bhi.n	1c68c <z_impl_k_poll+0x47c>
   1c6c2:	2401      	movs	r4, #1
   1c6c4:	fa04 f202 	lsl.w	r2, r4, r2
   1c6c8:	f412 7f8b 	tst.w	r2, #278	; 0x116
   1c6cc:	d0de      	beq.n	1c68c <z_impl_k_poll+0x47c>
   1c6ce:	e7d5      	b.n	1c67c <z_impl_k_poll+0x46c>
	__asm__ volatile(
   1c6d0:	f381 8811 	msr	BASEPRI, r1
   1c6d4:	f3bf 8f6f 	isb	sy
		return 0;
   1c6d8:	4618      	mov	r0, r3
   1c6da:	e034      	b.n	1c746 <z_impl_k_poll+0x536>
   1c6dc:	f381 8811 	msr	BASEPRI, r1
   1c6e0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c6e4:	f06f 000a 	mvn.w	r0, #10
   1c6e8:	e02d      	b.n	1c746 <z_impl_k_poll+0x536>
	return node->next != NULL;
   1c6ea:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1c6ec:	b12a      	cbz	r2, 1c6fa <z_impl_k_poll+0x4ea>
	sys_dnode_t *const prev = node->prev;
   1c6ee:	685e      	ldr	r6, [r3, #4]
	prev->next = next;
   1c6f0:	6032      	str	r2, [r6, #0]
	next->prev = prev;
   1c6f2:	6056      	str	r6, [r2, #4]
	node->next = NULL;
   1c6f4:	2200      	movs	r2, #0
   1c6f6:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
   1c6f8:	605a      	str	r2, [r3, #4]
   1c6fa:	f381 8811 	msr	BASEPRI, r1
   1c6fe:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c702:	f04f 0320 	mov.w	r3, #32
   1c706:	f3ef 8111 	mrs	r1, BASEPRI
   1c70a:	f383 8811 	msr	BASEPRI, r3
   1c70e:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   1c712:	4623      	mov	r3, r4
   1c714:	1e5c      	subs	r4, r3, #1
   1c716:	b193      	cbz	r3, 1c73e <z_impl_k_poll+0x52e>
		clear_event_registration(&events[num_events]);
   1c718:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1c71c:	009f      	lsls	r7, r3, #2
   1c71e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   1c722:	2200      	movs	r2, #0
   1c724:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   1c726:	7b5a      	ldrb	r2, [r3, #13]
   1c728:	f002 021f 	and.w	r2, r2, #31
   1c72c:	2a08      	cmp	r2, #8
   1c72e:	d8e4      	bhi.n	1c6fa <z_impl_k_poll+0x4ea>
   1c730:	2601      	movs	r6, #1
   1c732:	fa06 f202 	lsl.w	r2, r6, r2
   1c736:	f412 7f8b 	tst.w	r2, #278	; 0x116
   1c73a:	d0de      	beq.n	1c6fa <z_impl_k_poll+0x4ea>
   1c73c:	e7d5      	b.n	1c6ea <z_impl_k_poll+0x4da>
	__asm__ volatile(
   1c73e:	f38c 8811 	msr	BASEPRI, ip
   1c742:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1c746:	b00d      	add	sp, #52	; 0x34
   1c748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c74c:	20014594 	.word	0x20014594
   1c750:	20016c60 	.word	0x20016c60

0001c754 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1c754:	b538      	push	{r3, r4, r5, lr}
   1c756:	4603      	mov	r3, r0
	__asm__ volatile(
   1c758:	f04f 0220 	mov.w	r2, #32
   1c75c:	f3ef 8511 	mrs	r5, BASEPRI
   1c760:	f382 8811 	msr	BASEPRI, r2
   1c764:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1c768:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1c76a:	2201      	movs	r2, #1
   1c76c:	6082      	str	r2, [r0, #8]
	return list->head == list;
   1c76e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c770:	4283      	cmp	r3, r0
   1c772:	d011      	beq.n	1c798 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
   1c774:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   1c776:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   1c778:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c77a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c77c:	2300      	movs	r3, #0
   1c77e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1c780:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   1c782:	b148      	cbz	r0, 1c798 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c784:	2101      	movs	r1, #1
   1c786:	f006 fb60 	bl	22e4a <signal_poll_event>
   1c78a:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   1c78c:	4629      	mov	r1, r5
   1c78e:	4805      	ldr	r0, [pc, #20]	; (1c7a4 <z_impl_k_poll_signal_raise+0x50>)
   1c790:	f7ff f804 	bl	1b79c <z_reschedule>
	return rc;
}
   1c794:	4620      	mov	r0, r4
   1c796:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1c798:	f385 8811 	msr	BASEPRI, r5
   1c79c:	f3bf 8f6f 	isb	sy
		return 0;
   1c7a0:	2400      	movs	r4, #0
   1c7a2:	e7f7      	b.n	1c794 <z_impl_k_poll_signal_raise+0x40>
   1c7a4:	20016c60 	.word	0x20016c60

0001c7a8 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   1c7a8:	b508      	push	{r3, lr}
   1c7aa:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   1c7ac:	4601      	mov	r1, r0
   1c7ae:	4802      	ldr	r0, [pc, #8]	; (1c7b8 <k_aligned_alloc+0x10>)
   1c7b0:	f006 fb7d 	bl	22eae <z_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   1c7b4:	bd08      	pop	{r3, pc}
   1c7b6:	bf00      	nop
   1c7b8:	2001476c 	.word	0x2001476c

0001c7bc <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   1c7bc:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1c7be:	4a03      	ldr	r2, [pc, #12]	; (1c7cc <boot_banner+0x10>)
   1c7c0:	4903      	ldr	r1, [pc, #12]	; (1c7d0 <boot_banner+0x14>)
   1c7c2:	4804      	ldr	r0, [pc, #16]	; (1c7d4 <boot_banner+0x18>)
   1c7c4:	f001 fbcd 	bl	1df62 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   1c7c8:	bd08      	pop	{r3, pc}
   1c7ca:	bf00      	nop
   1c7cc:	000245a4 	.word	0x000245a4
   1c7d0:	00024b04 	.word	0x00024b04
   1c7d4:	00024b14 	.word	0x00024b14

0001c7d8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1c7d8:	b510      	push	{r4, lr}
   1c7da:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1c7dc:	4b08      	ldr	r3, [pc, #32]	; (1c800 <k_sys_work_q_init+0x28>)
   1c7de:	9302      	str	r3, [sp, #8]
   1c7e0:	2400      	movs	r4, #0
   1c7e2:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1c7e6:	ab02      	add	r3, sp, #8
   1c7e8:	9300      	str	r3, [sp, #0]
   1c7ea:	f04f 33ff 	mov.w	r3, #4294967295
   1c7ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1c7f2:	4904      	ldr	r1, [pc, #16]	; (1c804 <k_sys_work_q_init+0x2c>)
   1c7f4:	4804      	ldr	r0, [pc, #16]	; (1c808 <k_sys_work_q_init+0x30>)
   1c7f6:	f000 f929 	bl	1ca4c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1c7fa:	4620      	mov	r0, r4
   1c7fc:	b004      	add	sp, #16
   1c7fe:	bd10      	pop	{r4, pc}
   1c800:	00024b3c 	.word	0x00024b3c
   1c804:	20018d60 	.word	0x20018d60
   1c808:	200158e0 	.word	0x200158e0

0001c80c <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   1c80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c80e:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   1c810:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1c812:	f013 0f02 	tst.w	r3, #2
   1c816:	d15b      	bne.n	1c8d0 <submit_to_queue_locked+0xc4>
   1c818:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1c81a:	f013 0f04 	tst.w	r3, #4
   1c81e:	d15c      	bne.n	1c8da <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   1c820:	680b      	ldr	r3, [r1, #0]
   1c822:	2b00      	cmp	r3, #0
   1c824:	d037      	beq.n	1c896 <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
   1c826:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1c828:	f013 0f01 	tst.w	r3, #1
   1c82c:	d036      	beq.n	1c89c <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   1c82e:	68a3      	ldr	r3, [r4, #8]
   1c830:	602b      	str	r3, [r5, #0]
			ret = 2;
   1c832:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   1c834:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   1c836:	2e00      	cmp	r6, #0
   1c838:	d03e      	beq.n	1c8b8 <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1c83a:	4b29      	ldr	r3, [pc, #164]	; (1c8e0 <submit_to_queue_locked+0xd4>)
   1c83c:	689b      	ldr	r3, [r3, #8]
   1c83e:	42b3      	cmp	r3, r6
   1c840:	d02e      	beq.n	1c8a0 <submit_to_queue_locked+0x94>
   1c842:	2300      	movs	r3, #0
   1c844:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   1c846:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
   1c84a:	f3c3 0180 	ubfx	r1, r3, #2, #1
   1c84e:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1c852:	f013 0f01 	tst.w	r3, #1
   1c856:	d032      	beq.n	1c8be <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
   1c858:	b101      	cbz	r1, 1c85c <submit_to_queue_locked+0x50>
   1c85a:	b39a      	cbz	r2, 1c8c4 <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
   1c85c:	b100      	cbz	r0, 1c860 <submit_to_queue_locked+0x54>
   1c85e:	b3a1      	cbz	r1, 1c8ca <submit_to_queue_locked+0xbe>
	parent->next = child;
   1c860:	2300      	movs	r3, #0
   1c862:	6023      	str	r3, [r4, #0]
	return list->tail;
   1c864:	f8d6 30fc 	ldr.w	r3, [r6, #252]	; 0xfc
Z_GENLIST_APPEND(slist, snode)
   1c868:	b30b      	cbz	r3, 1c8ae <submit_to_queue_locked+0xa2>
	parent->next = child;
   1c86a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c86c:	f8c6 40fc 	str.w	r4, [r6, #252]	; 0xfc
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1c870:	2200      	movs	r2, #0
   1c872:	4611      	mov	r1, r2
   1c874:	f506 7080 	add.w	r0, r6, #256	; 0x100
   1c878:	f006 f9ac 	bl	22bd4 <z_sched_wake>
		ret = 1;
   1c87c:	2001      	movs	r0, #1

		if (rc < 0) {
   1c87e:	2800      	cmp	r0, #0
   1c880:	db06      	blt.n	1c890 <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
   1c882:	68e3      	ldr	r3, [r4, #12]
   1c884:	f043 0304 	orr.w	r3, r3, #4
   1c888:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   1c88a:	682b      	ldr	r3, [r5, #0]
   1c88c:	60a3      	str	r3, [r4, #8]
   1c88e:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   1c890:	2800      	cmp	r0, #0
   1c892:	dc21      	bgt.n	1c8d8 <submit_to_queue_locked+0xcc>
   1c894:	e01e      	b.n	1c8d4 <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
   1c896:	6883      	ldr	r3, [r0, #8]
   1c898:	600b      	str	r3, [r1, #0]
   1c89a:	e7c4      	b.n	1c826 <submit_to_queue_locked+0x1a>
		ret = 1;
   1c89c:	2701      	movs	r7, #1
   1c89e:	e7c9      	b.n	1c834 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1c8a0:	f005 fff2 	bl	22888 <k_is_in_isr>
   1c8a4:	b908      	cbnz	r0, 1c8aa <submit_to_queue_locked+0x9e>
   1c8a6:	2301      	movs	r3, #1
   1c8a8:	e7cc      	b.n	1c844 <submit_to_queue_locked+0x38>
   1c8aa:	2300      	movs	r3, #0
   1c8ac:	e7ca      	b.n	1c844 <submit_to_queue_locked+0x38>
   1c8ae:	f8c6 40fc 	str.w	r4, [r6, #252]	; 0xfc
	list->head = node;
   1c8b2:	f8c6 40f8 	str.w	r4, [r6, #248]	; 0xf8
}
   1c8b6:	e7db      	b.n	1c870 <submit_to_queue_locked+0x64>
		return -EINVAL;
   1c8b8:	f06f 0015 	mvn.w	r0, #21
   1c8bc:	e7df      	b.n	1c87e <submit_to_queue_locked+0x72>
		ret = -ENODEV;
   1c8be:	f06f 0012 	mvn.w	r0, #18
   1c8c2:	e7dc      	b.n	1c87e <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1c8c4:	f06f 000f 	mvn.w	r0, #15
   1c8c8:	e7d9      	b.n	1c87e <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1c8ca:	f06f 000f 	mvn.w	r0, #15
   1c8ce:	e7d6      	b.n	1c87e <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1c8d0:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   1c8d4:	2300      	movs	r3, #0
   1c8d6:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   1c8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   1c8da:	2000      	movs	r0, #0
   1c8dc:	e7fa      	b.n	1c8d4 <submit_to_queue_locked+0xc8>
   1c8de:	bf00      	nop
   1c8e0:	20016c18 	.word	0x20016c18

0001c8e4 <finalize_cancel_locked>:
{
   1c8e4:	b570      	push	{r4, r5, r6, lr}
   1c8e6:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   1c8e8:	68c3      	ldr	r3, [r0, #12]
   1c8ea:	f023 0302 	bic.w	r3, r3, #2
   1c8ee:	60c3      	str	r3, [r0, #12]
	return list->head;
   1c8f0:	4b19      	ldr	r3, [pc, #100]	; (1c958 <finalize_cancel_locked+0x74>)
   1c8f2:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1c8f4:	b1e8      	cbz	r0, 1c932 <finalize_cancel_locked+0x4e>
   1c8f6:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c8f8:	b100      	cbz	r0, 1c8fc <finalize_cancel_locked+0x18>
	return node->next;
   1c8fa:	6804      	ldr	r4, [r0, #0]
   1c8fc:	2600      	movs	r6, #0
   1c8fe:	e01d      	b.n	1c93c <finalize_cancel_locked+0x58>
Z_GENLIST_REMOVE(slist, snode)
   1c900:	b15e      	cbz	r6, 1c91a <finalize_cancel_locked+0x36>
	return node->next;
   1c902:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   1c904:	6033      	str	r3, [r6, #0]
	return list->tail;
   1c906:	4b14      	ldr	r3, [pc, #80]	; (1c958 <finalize_cancel_locked+0x74>)
   1c908:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c90a:	4298      	cmp	r0, r3
   1c90c:	d00e      	beq.n	1c92c <finalize_cancel_locked+0x48>
	parent->next = child;
   1c90e:	2300      	movs	r3, #0
   1c910:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1c914:	f7fe fe8e 	bl	1b634 <z_impl_k_sem_give>
}
   1c918:	e015      	b.n	1c946 <finalize_cancel_locked+0x62>
	return node->next;
   1c91a:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1c91c:	4b0e      	ldr	r3, [pc, #56]	; (1c958 <finalize_cancel_locked+0x74>)
   1c91e:	601a      	str	r2, [r3, #0]
	return list->tail;
   1c920:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c922:	4298      	cmp	r0, r3
   1c924:	d1f3      	bne.n	1c90e <finalize_cancel_locked+0x2a>
	list->tail = node;
   1c926:	4b0c      	ldr	r3, [pc, #48]	; (1c958 <finalize_cancel_locked+0x74>)
   1c928:	605a      	str	r2, [r3, #4]
}
   1c92a:	e7f0      	b.n	1c90e <finalize_cancel_locked+0x2a>
	list->tail = node;
   1c92c:	4b0a      	ldr	r3, [pc, #40]	; (1c958 <finalize_cancel_locked+0x74>)
   1c92e:	605e      	str	r6, [r3, #4]
}
   1c930:	e7ed      	b.n	1c90e <finalize_cancel_locked+0x2a>
   1c932:	4604      	mov	r4, r0
   1c934:	e7e2      	b.n	1c8fc <finalize_cancel_locked+0x18>
   1c936:	4623      	mov	r3, r4
   1c938:	4620      	mov	r0, r4
   1c93a:	461c      	mov	r4, r3
   1c93c:	b150      	cbz	r0, 1c954 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
   1c93e:	6843      	ldr	r3, [r0, #4]
   1c940:	42ab      	cmp	r3, r5
   1c942:	d0dd      	beq.n	1c900 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   1c944:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1c946:	2c00      	cmp	r4, #0
   1c948:	d0f5      	beq.n	1c936 <finalize_cancel_locked+0x52>
   1c94a:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c94c:	2c00      	cmp	r4, #0
   1c94e:	d0f3      	beq.n	1c938 <finalize_cancel_locked+0x54>
	return node->next;
   1c950:	6823      	ldr	r3, [r4, #0]
   1c952:	e7f1      	b.n	1c938 <finalize_cancel_locked+0x54>
}
   1c954:	bd70      	pop	{r4, r5, r6, pc}
   1c956:	bf00      	nop
   1c958:	20016c60 	.word	0x20016c60

0001c95c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1c95c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c95e:	b085      	sub	sp, #20
   1c960:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   1c962:	e016      	b.n	1c992 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   1c964:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	*flagp &= ~BIT(bit);
   1c968:	f023 0204 	bic.w	r2, r3, #4
   1c96c:	f8c5 2110 	str.w	r2, [r5, #272]	; 0x110
			flag_set(&queue->flags, K_WORK_QUEUE_BUSY_BIT);
			work = CONTAINER_OF(node, struct k_work, node);
			flag_set(&work->flags, K_WORK_RUNNING_BIT);
			flag_clear(&work->flags, K_WORK_QUEUED_BIT);
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   1c970:	f013 0f04 	tst.w	r3, #4
   1c974:	d158      	bne.n	1ca28 <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1c976:	2300      	movs	r3, #0
   1c978:	9302      	str	r3, [sp, #8]
   1c97a:	f04f 32ff 	mov.w	r2, #4294967295
   1c97e:	f04f 33ff 	mov.w	r3, #4294967295
   1c982:	e9cd 2300 	strd	r2, r3, [sp]
   1c986:	f505 7280 	add.w	r2, r5, #256	; 0x100
   1c98a:	4631      	mov	r1, r6
   1c98c:	482e      	ldr	r0, [pc, #184]	; (1ca48 <work_queue_main+0xec>)
   1c98e:	f7ff fa9f 	bl	1bed0 <z_sched_wait>
	__asm__ volatile(
   1c992:	f04f 0320 	mov.w	r3, #32
   1c996:	f3ef 8611 	mrs	r6, BASEPRI
   1c99a:	f383 8811 	msr	BASEPRI, r3
   1c99e:	f3bf 8f6f 	isb	sy
	return list->head;
   1c9a2:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
Z_GENLIST_GET(slist, snode)
   1c9a6:	2c00      	cmp	r4, #0
   1c9a8:	d0dc      	beq.n	1c964 <work_queue_main+0x8>
	return node->next;
   1c9aa:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   1c9ac:	f8c5 30f8 	str.w	r3, [r5, #248]	; 0xf8
	return list->tail;
   1c9b0:	f8d5 20fc 	ldr.w	r2, [r5, #252]	; 0xfc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c9b4:	4294      	cmp	r4, r2
   1c9b6:	d034      	beq.n	1ca22 <work_queue_main+0xc6>
	*flagp |= BIT(bit);
   1c9b8:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
   1c9bc:	f043 0302 	orr.w	r3, r3, #2
   1c9c0:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1c9c4:	68e3      	ldr	r3, [r4, #12]
   1c9c6:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
   1c9ca:	f023 0304 	bic.w	r3, r3, #4
   1c9ce:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   1c9d0:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
   1c9d2:	2c00      	cmp	r4, #0
   1c9d4:	d0cf      	beq.n	1c976 <work_queue_main+0x1a>
	__asm__ volatile(
   1c9d6:	f386 8811 	msr	BASEPRI, r6
   1c9da:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   1c9de:	4620      	mov	r0, r4
   1c9e0:	4798      	blx	r3
	__asm__ volatile(
   1c9e2:	f04f 0320 	mov.w	r3, #32
   1c9e6:	f3ef 8611 	mrs	r6, BASEPRI
   1c9ea:	f383 8811 	msr	BASEPRI, r3
   1c9ee:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1c9f2:	68e3      	ldr	r3, [r4, #12]
   1c9f4:	f023 0301 	bic.w	r3, r3, #1
   1c9f8:	60e3      	str	r3, [r4, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1c9fa:	f013 0f02 	tst.w	r3, #2
   1c9fe:	d11e      	bne.n	1ca3e <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
   1ca00:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
   1ca04:	f023 0302 	bic.w	r3, r3, #2
   1ca08:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
	return (*flagp & BIT(bit)) != 0U;
   1ca0c:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   1ca10:	f386 8811 	msr	BASEPRI, r6
   1ca14:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   1ca18:	2b00      	cmp	r3, #0
   1ca1a:	d1ba      	bne.n	1c992 <work_queue_main+0x36>
	z_impl_k_yield();
   1ca1c:	f7ff f95a 	bl	1bcd4 <z_impl_k_yield>
}
   1ca20:	e7b7      	b.n	1c992 <work_queue_main+0x36>
	list->tail = node;
   1ca22:	f8c5 30fc 	str.w	r3, [r5, #252]	; 0xfc
}
   1ca26:	e7c7      	b.n	1c9b8 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1ca28:	f505 7784 	add.w	r7, r5, #264	; 0x108
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1ca2c:	2200      	movs	r2, #0
   1ca2e:	2101      	movs	r1, #1
   1ca30:	4638      	mov	r0, r7
   1ca32:	f006 f8cf 	bl	22bd4 <z_sched_wake>
   1ca36:	2800      	cmp	r0, #0
   1ca38:	d1f8      	bne.n	1ca2c <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
   1ca3a:	2300      	movs	r3, #0
   1ca3c:	e7c9      	b.n	1c9d2 <work_queue_main+0x76>
				finalize_cancel_locked(work);
   1ca3e:	4620      	mov	r0, r4
   1ca40:	f7ff ff50 	bl	1c8e4 <finalize_cancel_locked>
   1ca44:	e7dc      	b.n	1ca00 <work_queue_main+0xa4>
   1ca46:	bf00      	nop
   1ca48:	20016c60 	.word	0x20016c60

0001ca4c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1ca4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ca4e:	b089      	sub	sp, #36	; 0x24
   1ca50:	4604      	mov	r4, r0
   1ca52:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   1ca54:	2000      	movs	r0, #0
   1ca56:	f8c4 00f8 	str.w	r0, [r4, #248]	; 0xf8
	list->tail = NULL;
   1ca5a:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
   1ca5e:	f504 7080 	add.w	r0, r4, #256	; 0x100
	list->head = (sys_dnode_t *)list;
   1ca62:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
	list->tail = (sys_dnode_t *)list;
   1ca66:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1ca6a:	f504 7084 	add.w	r0, r4, #264	; 0x108
	list->head = (sys_dnode_t *)list;
   1ca6e:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
	list->tail = (sys_dnode_t *)list;
   1ca72:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1ca76:	b1fd      	cbz	r5, 1cab8 <k_work_queue_start+0x6c>
   1ca78:	7928      	ldrb	r0, [r5, #4]
   1ca7a:	b9f8      	cbnz	r0, 1cabc <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1ca7c:	2001      	movs	r0, #1
	*flagp = flags;
   1ca7e:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ca82:	f04f 36ff 	mov.w	r6, #4294967295
   1ca86:	f04f 37ff 	mov.w	r7, #4294967295
   1ca8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1ca8e:	2000      	movs	r0, #0
   1ca90:	9004      	str	r0, [sp, #16]
   1ca92:	9303      	str	r3, [sp, #12]
   1ca94:	9002      	str	r0, [sp, #8]
   1ca96:	9001      	str	r0, [sp, #4]
   1ca98:	9400      	str	r4, [sp, #0]
   1ca9a:	4b0a      	ldr	r3, [pc, #40]	; (1cac4 <k_work_queue_start+0x78>)
   1ca9c:	4620      	mov	r0, r4
   1ca9e:	f005 ff09 	bl	228b4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1caa2:	b125      	cbz	r5, 1caae <k_work_queue_start+0x62>
   1caa4:	6829      	ldr	r1, [r5, #0]
   1caa6:	b111      	cbz	r1, 1caae <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   1caa8:	4620      	mov	r0, r4
   1caaa:	f7fe fb4f 	bl	1b14c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1caae:	4620      	mov	r0, r4
   1cab0:	f005 fef0 	bl	22894 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1cab4:	b009      	add	sp, #36	; 0x24
   1cab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1cab8:	2001      	movs	r0, #1
   1caba:	e7e0      	b.n	1ca7e <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   1cabc:	f240 1001 	movw	r0, #257	; 0x101
   1cac0:	e7dd      	b.n	1ca7e <k_work_queue_start+0x32>
   1cac2:	bf00      	nop
   1cac4:	0001c95d 	.word	0x0001c95d

0001cac8 <fabs>:
   1cac8:	ec51 0b10 	vmov	r0, r1, d0
   1cacc:	ee10 2a10 	vmov	r2, s0
   1cad0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1cad4:	ec43 2b10 	vmov	d0, r2, r3
   1cad8:	4770      	bx	lr
   1cada:	bf00      	nop

0001cadc <malloc>:
   1cadc:	4b02      	ldr	r3, [pc, #8]	; (1cae8 <malloc+0xc>)
   1cade:	4601      	mov	r1, r0
   1cae0:	6818      	ldr	r0, [r3, #0]
   1cae2:	f000 b85b 	b.w	1cb9c <_malloc_r>
   1cae6:	bf00      	nop
   1cae8:	2001459c 	.word	0x2001459c

0001caec <free>:
   1caec:	4b02      	ldr	r3, [pc, #8]	; (1caf8 <free+0xc>)
   1caee:	4601      	mov	r1, r0
   1caf0:	6818      	ldr	r0, [r3, #0]
   1caf2:	f000 b803 	b.w	1cafc <_free_r>
   1caf6:	bf00      	nop
   1caf8:	2001459c 	.word	0x2001459c

0001cafc <_free_r>:
   1cafc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cafe:	2900      	cmp	r1, #0
   1cb00:	d047      	beq.n	1cb92 <_free_r+0x96>
   1cb02:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1cb06:	1f0c      	subs	r4, r1, #4
   1cb08:	9001      	str	r0, [sp, #4]
   1cb0a:	2b00      	cmp	r3, #0
   1cb0c:	bfb8      	it	lt
   1cb0e:	18e4      	addlt	r4, r4, r3
   1cb10:	f7f7 fd56 	bl	145c0 <__malloc_lock>
   1cb14:	4a20      	ldr	r2, [pc, #128]	; (1cb98 <_free_r+0x9c>)
   1cb16:	9801      	ldr	r0, [sp, #4]
   1cb18:	6813      	ldr	r3, [r2, #0]
   1cb1a:	4615      	mov	r5, r2
   1cb1c:	b933      	cbnz	r3, 1cb2c <_free_r+0x30>
   1cb1e:	6063      	str	r3, [r4, #4]
   1cb20:	6014      	str	r4, [r2, #0]
   1cb22:	b003      	add	sp, #12
   1cb24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1cb28:	f7f7 bd56 	b.w	145d8 <__malloc_unlock>
   1cb2c:	42a3      	cmp	r3, r4
   1cb2e:	d90b      	bls.n	1cb48 <_free_r+0x4c>
   1cb30:	6821      	ldr	r1, [r4, #0]
   1cb32:	1862      	adds	r2, r4, r1
   1cb34:	4293      	cmp	r3, r2
   1cb36:	bf02      	ittt	eq
   1cb38:	681a      	ldreq	r2, [r3, #0]
   1cb3a:	685b      	ldreq	r3, [r3, #4]
   1cb3c:	1852      	addeq	r2, r2, r1
   1cb3e:	6063      	str	r3, [r4, #4]
   1cb40:	bf08      	it	eq
   1cb42:	6022      	streq	r2, [r4, #0]
   1cb44:	602c      	str	r4, [r5, #0]
   1cb46:	e7ec      	b.n	1cb22 <_free_r+0x26>
   1cb48:	461a      	mov	r2, r3
   1cb4a:	685b      	ldr	r3, [r3, #4]
   1cb4c:	b10b      	cbz	r3, 1cb52 <_free_r+0x56>
   1cb4e:	42a3      	cmp	r3, r4
   1cb50:	d9fa      	bls.n	1cb48 <_free_r+0x4c>
   1cb52:	6811      	ldr	r1, [r2, #0]
   1cb54:	1855      	adds	r5, r2, r1
   1cb56:	42a5      	cmp	r5, r4
   1cb58:	d10b      	bne.n	1cb72 <_free_r+0x76>
   1cb5a:	6824      	ldr	r4, [r4, #0]
   1cb5c:	4421      	add	r1, r4
   1cb5e:	1854      	adds	r4, r2, r1
   1cb60:	6011      	str	r1, [r2, #0]
   1cb62:	42a3      	cmp	r3, r4
   1cb64:	d1dd      	bne.n	1cb22 <_free_r+0x26>
   1cb66:	681c      	ldr	r4, [r3, #0]
   1cb68:	685b      	ldr	r3, [r3, #4]
   1cb6a:	4421      	add	r1, r4
   1cb6c:	6053      	str	r3, [r2, #4]
   1cb6e:	6011      	str	r1, [r2, #0]
   1cb70:	e7d7      	b.n	1cb22 <_free_r+0x26>
   1cb72:	d902      	bls.n	1cb7a <_free_r+0x7e>
   1cb74:	230c      	movs	r3, #12
   1cb76:	6003      	str	r3, [r0, #0]
   1cb78:	e7d3      	b.n	1cb22 <_free_r+0x26>
   1cb7a:	6825      	ldr	r5, [r4, #0]
   1cb7c:	1961      	adds	r1, r4, r5
   1cb7e:	428b      	cmp	r3, r1
   1cb80:	bf02      	ittt	eq
   1cb82:	6819      	ldreq	r1, [r3, #0]
   1cb84:	685b      	ldreq	r3, [r3, #4]
   1cb86:	1949      	addeq	r1, r1, r5
   1cb88:	6063      	str	r3, [r4, #4]
   1cb8a:	bf08      	it	eq
   1cb8c:	6021      	streq	r1, [r4, #0]
   1cb8e:	6054      	str	r4, [r2, #4]
   1cb90:	e7c7      	b.n	1cb22 <_free_r+0x26>
   1cb92:	b003      	add	sp, #12
   1cb94:	bd30      	pop	{r4, r5, pc}
   1cb96:	bf00      	nop
   1cb98:	20016c68 	.word	0x20016c68

0001cb9c <_malloc_r>:
   1cb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cb9e:	1ccd      	adds	r5, r1, #3
   1cba0:	4606      	mov	r6, r0
   1cba2:	f025 0503 	bic.w	r5, r5, #3
   1cba6:	3508      	adds	r5, #8
   1cba8:	2d0c      	cmp	r5, #12
   1cbaa:	bf38      	it	cc
   1cbac:	250c      	movcc	r5, #12
   1cbae:	2d00      	cmp	r5, #0
   1cbb0:	db01      	blt.n	1cbb6 <_malloc_r+0x1a>
   1cbb2:	42a9      	cmp	r1, r5
   1cbb4:	d903      	bls.n	1cbbe <_malloc_r+0x22>
   1cbb6:	230c      	movs	r3, #12
   1cbb8:	6033      	str	r3, [r6, #0]
   1cbba:	2000      	movs	r0, #0
   1cbbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cbbe:	f7f7 fcff 	bl	145c0 <__malloc_lock>
   1cbc2:	4921      	ldr	r1, [pc, #132]	; (1cc48 <_malloc_r+0xac>)
   1cbc4:	680a      	ldr	r2, [r1, #0]
   1cbc6:	4614      	mov	r4, r2
   1cbc8:	b99c      	cbnz	r4, 1cbf2 <_malloc_r+0x56>
   1cbca:	4f20      	ldr	r7, [pc, #128]	; (1cc4c <_malloc_r+0xb0>)
   1cbcc:	683b      	ldr	r3, [r7, #0]
   1cbce:	b923      	cbnz	r3, 1cbda <_malloc_r+0x3e>
   1cbd0:	4621      	mov	r1, r4
   1cbd2:	4630      	mov	r0, r6
   1cbd4:	f000 fba0 	bl	1d318 <_sbrk_r>
   1cbd8:	6038      	str	r0, [r7, #0]
   1cbda:	4629      	mov	r1, r5
   1cbdc:	4630      	mov	r0, r6
   1cbde:	f000 fb9b 	bl	1d318 <_sbrk_r>
   1cbe2:	1c43      	adds	r3, r0, #1
   1cbe4:	d123      	bne.n	1cc2e <_malloc_r+0x92>
   1cbe6:	230c      	movs	r3, #12
   1cbe8:	4630      	mov	r0, r6
   1cbea:	6033      	str	r3, [r6, #0]
   1cbec:	f7f7 fcf4 	bl	145d8 <__malloc_unlock>
   1cbf0:	e7e3      	b.n	1cbba <_malloc_r+0x1e>
   1cbf2:	6823      	ldr	r3, [r4, #0]
   1cbf4:	1b5b      	subs	r3, r3, r5
   1cbf6:	d417      	bmi.n	1cc28 <_malloc_r+0x8c>
   1cbf8:	2b0b      	cmp	r3, #11
   1cbfa:	d903      	bls.n	1cc04 <_malloc_r+0x68>
   1cbfc:	6023      	str	r3, [r4, #0]
   1cbfe:	441c      	add	r4, r3
   1cc00:	6025      	str	r5, [r4, #0]
   1cc02:	e004      	b.n	1cc0e <_malloc_r+0x72>
   1cc04:	6863      	ldr	r3, [r4, #4]
   1cc06:	42a2      	cmp	r2, r4
   1cc08:	bf0c      	ite	eq
   1cc0a:	600b      	streq	r3, [r1, #0]
   1cc0c:	6053      	strne	r3, [r2, #4]
   1cc0e:	4630      	mov	r0, r6
   1cc10:	f7f7 fce2 	bl	145d8 <__malloc_unlock>
   1cc14:	f104 000b 	add.w	r0, r4, #11
   1cc18:	1d23      	adds	r3, r4, #4
   1cc1a:	f020 0007 	bic.w	r0, r0, #7
   1cc1e:	1ac2      	subs	r2, r0, r3
   1cc20:	d0cc      	beq.n	1cbbc <_malloc_r+0x20>
   1cc22:	1a1b      	subs	r3, r3, r0
   1cc24:	50a3      	str	r3, [r4, r2]
   1cc26:	e7c9      	b.n	1cbbc <_malloc_r+0x20>
   1cc28:	4622      	mov	r2, r4
   1cc2a:	6864      	ldr	r4, [r4, #4]
   1cc2c:	e7cc      	b.n	1cbc8 <_malloc_r+0x2c>
   1cc2e:	1cc4      	adds	r4, r0, #3
   1cc30:	f024 0403 	bic.w	r4, r4, #3
   1cc34:	42a0      	cmp	r0, r4
   1cc36:	d0e3      	beq.n	1cc00 <_malloc_r+0x64>
   1cc38:	1a21      	subs	r1, r4, r0
   1cc3a:	4630      	mov	r0, r6
   1cc3c:	f000 fb6c 	bl	1d318 <_sbrk_r>
   1cc40:	3001      	adds	r0, #1
   1cc42:	d1dd      	bne.n	1cc00 <_malloc_r+0x64>
   1cc44:	e7cf      	b.n	1cbe6 <_malloc_r+0x4a>
   1cc46:	bf00      	nop
   1cc48:	20016c68 	.word	0x20016c68
   1cc4c:	20016c6c 	.word	0x20016c6c

0001cc50 <_printf_float>:
   1cc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc54:	ed2d 8b02 	vpush	{d8}
   1cc58:	b08d      	sub	sp, #52	; 0x34
   1cc5a:	460c      	mov	r4, r1
   1cc5c:	4616      	mov	r6, r2
   1cc5e:	461f      	mov	r7, r3
   1cc60:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   1cc64:	4605      	mov	r5, r0
   1cc66:	f000 fcfb 	bl	1d660 <_localeconv_r>
   1cc6a:	f8d0 a000 	ldr.w	sl, [r0]
   1cc6e:	4650      	mov	r0, sl
   1cc70:	f7f4 f8fe 	bl	10e70 <strlen>
   1cc74:	2300      	movs	r3, #0
   1cc76:	f894 b018 	ldrb.w	fp, [r4, #24]
   1cc7a:	ee08 0a10 	vmov	s16, r0
   1cc7e:	930a      	str	r3, [sp, #40]	; 0x28
   1cc80:	6823      	ldr	r3, [r4, #0]
   1cc82:	9305      	str	r3, [sp, #20]
   1cc84:	f8d8 3000 	ldr.w	r3, [r8]
   1cc88:	3307      	adds	r3, #7
   1cc8a:	f023 0307 	bic.w	r3, r3, #7
   1cc8e:	f103 0208 	add.w	r2, r3, #8
   1cc92:	f8c8 2000 	str.w	r2, [r8]
   1cc96:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cc9a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   1cc9e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   1cca2:	f04f 32ff 	mov.w	r2, #4294967295
   1cca6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   1ccaa:	f8cd 8018 	str.w	r8, [sp, #24]
   1ccae:	9307      	str	r3, [sp, #28]
   1ccb0:	4b9e      	ldr	r3, [pc, #632]	; (1cf2c <_printf_float+0x2dc>)
   1ccb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1ccb6:	f7f3 ff19 	bl	10aec <__aeabi_dcmpun>
   1ccba:	bb88      	cbnz	r0, 1cd20 <_printf_float+0xd0>
   1ccbc:	f04f 32ff 	mov.w	r2, #4294967295
   1ccc0:	4b9a      	ldr	r3, [pc, #616]	; (1cf2c <_printf_float+0x2dc>)
   1ccc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1ccc6:	f7f3 fef3 	bl	10ab0 <__aeabi_dcmple>
   1ccca:	bb48      	cbnz	r0, 1cd20 <_printf_float+0xd0>
   1cccc:	2200      	movs	r2, #0
   1ccce:	2300      	movs	r3, #0
   1ccd0:	4640      	mov	r0, r8
   1ccd2:	4649      	mov	r1, r9
   1ccd4:	f7f3 fee2 	bl	10a9c <__aeabi_dcmplt>
   1ccd8:	b110      	cbz	r0, 1cce0 <_printf_float+0x90>
   1ccda:	232d      	movs	r3, #45	; 0x2d
   1ccdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1cce0:	4b93      	ldr	r3, [pc, #588]	; (1cf30 <_printf_float+0x2e0>)
   1cce2:	4894      	ldr	r0, [pc, #592]	; (1cf34 <_printf_float+0x2e4>)
   1cce4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   1cce8:	bf94      	ite	ls
   1ccea:	4698      	movls	r8, r3
   1ccec:	4680      	movhi	r8, r0
   1ccee:	2303      	movs	r3, #3
   1ccf0:	f04f 0900 	mov.w	r9, #0
   1ccf4:	6123      	str	r3, [r4, #16]
   1ccf6:	9b05      	ldr	r3, [sp, #20]
   1ccf8:	f023 0204 	bic.w	r2, r3, #4
   1ccfc:	6022      	str	r2, [r4, #0]
   1ccfe:	4633      	mov	r3, r6
   1cd00:	aa0b      	add	r2, sp, #44	; 0x2c
   1cd02:	4621      	mov	r1, r4
   1cd04:	4628      	mov	r0, r5
   1cd06:	9700      	str	r7, [sp, #0]
   1cd08:	f006 fa06 	bl	23118 <_printf_common>
   1cd0c:	3001      	adds	r0, #1
   1cd0e:	f040 8090 	bne.w	1ce32 <_printf_float+0x1e2>
   1cd12:	f04f 30ff 	mov.w	r0, #4294967295
   1cd16:	b00d      	add	sp, #52	; 0x34
   1cd18:	ecbd 8b02 	vpop	{d8}
   1cd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd20:	4642      	mov	r2, r8
   1cd22:	464b      	mov	r3, r9
   1cd24:	4640      	mov	r0, r8
   1cd26:	4649      	mov	r1, r9
   1cd28:	f7f3 fee0 	bl	10aec <__aeabi_dcmpun>
   1cd2c:	b140      	cbz	r0, 1cd40 <_printf_float+0xf0>
   1cd2e:	464b      	mov	r3, r9
   1cd30:	4881      	ldr	r0, [pc, #516]	; (1cf38 <_printf_float+0x2e8>)
   1cd32:	2b00      	cmp	r3, #0
   1cd34:	bfbc      	itt	lt
   1cd36:	232d      	movlt	r3, #45	; 0x2d
   1cd38:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   1cd3c:	4b7f      	ldr	r3, [pc, #508]	; (1cf3c <_printf_float+0x2ec>)
   1cd3e:	e7d1      	b.n	1cce4 <_printf_float+0x94>
   1cd40:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   1cd44:	6863      	ldr	r3, [r4, #4]
   1cd46:	9206      	str	r2, [sp, #24]
   1cd48:	1c5a      	adds	r2, r3, #1
   1cd4a:	d13f      	bne.n	1cdcc <_printf_float+0x17c>
   1cd4c:	2306      	movs	r3, #6
   1cd4e:	6063      	str	r3, [r4, #4]
   1cd50:	9b05      	ldr	r3, [sp, #20]
   1cd52:	4628      	mov	r0, r5
   1cd54:	6861      	ldr	r1, [r4, #4]
   1cd56:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
   1cd5a:	2300      	movs	r3, #0
   1cd5c:	9303      	str	r3, [sp, #12]
   1cd5e:	ab0a      	add	r3, sp, #40	; 0x28
   1cd60:	6022      	str	r2, [r4, #0]
   1cd62:	e9cd b301 	strd	fp, r3, [sp, #4]
   1cd66:	ab09      	add	r3, sp, #36	; 0x24
   1cd68:	ec49 8b10 	vmov	d0, r8, r9
   1cd6c:	9300      	str	r3, [sp, #0]
   1cd6e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1cd72:	f006 f931 	bl	22fd8 <__cvt>
   1cd76:	9b06      	ldr	r3, [sp, #24]
   1cd78:	4680      	mov	r8, r0
   1cd7a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1cd7c:	2b47      	cmp	r3, #71	; 0x47
   1cd7e:	d108      	bne.n	1cd92 <_printf_float+0x142>
   1cd80:	1cc8      	adds	r0, r1, #3
   1cd82:	db02      	blt.n	1cd8a <_printf_float+0x13a>
   1cd84:	6863      	ldr	r3, [r4, #4]
   1cd86:	4299      	cmp	r1, r3
   1cd88:	dd41      	ble.n	1ce0e <_printf_float+0x1be>
   1cd8a:	f1ab 0b02 	sub.w	fp, fp, #2
   1cd8e:	fa5f fb8b 	uxtb.w	fp, fp
   1cd92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   1cd96:	d820      	bhi.n	1cdda <_printf_float+0x18a>
   1cd98:	3901      	subs	r1, #1
   1cd9a:	465a      	mov	r2, fp
   1cd9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
   1cda0:	9109      	str	r1, [sp, #36]	; 0x24
   1cda2:	f006 f97b 	bl	2309c <__exponent>
   1cda6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cda8:	4681      	mov	r9, r0
   1cdaa:	1813      	adds	r3, r2, r0
   1cdac:	2a01      	cmp	r2, #1
   1cdae:	6123      	str	r3, [r4, #16]
   1cdb0:	dc02      	bgt.n	1cdb8 <_printf_float+0x168>
   1cdb2:	6822      	ldr	r2, [r4, #0]
   1cdb4:	07d2      	lsls	r2, r2, #31
   1cdb6:	d501      	bpl.n	1cdbc <_printf_float+0x16c>
   1cdb8:	3301      	adds	r3, #1
   1cdba:	6123      	str	r3, [r4, #16]
   1cdbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1cdc0:	2b00      	cmp	r3, #0
   1cdc2:	d09c      	beq.n	1ccfe <_printf_float+0xae>
   1cdc4:	232d      	movs	r3, #45	; 0x2d
   1cdc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1cdca:	e798      	b.n	1ccfe <_printf_float+0xae>
   1cdcc:	9a06      	ldr	r2, [sp, #24]
   1cdce:	2a47      	cmp	r2, #71	; 0x47
   1cdd0:	d1be      	bne.n	1cd50 <_printf_float+0x100>
   1cdd2:	2b00      	cmp	r3, #0
   1cdd4:	d1bc      	bne.n	1cd50 <_printf_float+0x100>
   1cdd6:	2301      	movs	r3, #1
   1cdd8:	e7b9      	b.n	1cd4e <_printf_float+0xfe>
   1cdda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   1cdde:	d118      	bne.n	1ce12 <_printf_float+0x1c2>
   1cde0:	2900      	cmp	r1, #0
   1cde2:	6863      	ldr	r3, [r4, #4]
   1cde4:	dd0b      	ble.n	1cdfe <_printf_float+0x1ae>
   1cde6:	6121      	str	r1, [r4, #16]
   1cde8:	b913      	cbnz	r3, 1cdf0 <_printf_float+0x1a0>
   1cdea:	6822      	ldr	r2, [r4, #0]
   1cdec:	07d0      	lsls	r0, r2, #31
   1cdee:	d502      	bpl.n	1cdf6 <_printf_float+0x1a6>
   1cdf0:	3301      	adds	r3, #1
   1cdf2:	440b      	add	r3, r1
   1cdf4:	6123      	str	r3, [r4, #16]
   1cdf6:	f04f 0900 	mov.w	r9, #0
   1cdfa:	65a1      	str	r1, [r4, #88]	; 0x58
   1cdfc:	e7de      	b.n	1cdbc <_printf_float+0x16c>
   1cdfe:	b913      	cbnz	r3, 1ce06 <_printf_float+0x1b6>
   1ce00:	6822      	ldr	r2, [r4, #0]
   1ce02:	07d2      	lsls	r2, r2, #31
   1ce04:	d501      	bpl.n	1ce0a <_printf_float+0x1ba>
   1ce06:	3302      	adds	r3, #2
   1ce08:	e7f4      	b.n	1cdf4 <_printf_float+0x1a4>
   1ce0a:	2301      	movs	r3, #1
   1ce0c:	e7f2      	b.n	1cdf4 <_printf_float+0x1a4>
   1ce0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
   1ce12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ce14:	4299      	cmp	r1, r3
   1ce16:	db05      	blt.n	1ce24 <_printf_float+0x1d4>
   1ce18:	6823      	ldr	r3, [r4, #0]
   1ce1a:	6121      	str	r1, [r4, #16]
   1ce1c:	07d8      	lsls	r0, r3, #31
   1ce1e:	d5ea      	bpl.n	1cdf6 <_printf_float+0x1a6>
   1ce20:	1c4b      	adds	r3, r1, #1
   1ce22:	e7e7      	b.n	1cdf4 <_printf_float+0x1a4>
   1ce24:	2900      	cmp	r1, #0
   1ce26:	bfd4      	ite	le
   1ce28:	f1c1 0202 	rsble	r2, r1, #2
   1ce2c:	2201      	movgt	r2, #1
   1ce2e:	4413      	add	r3, r2
   1ce30:	e7e0      	b.n	1cdf4 <_printf_float+0x1a4>
   1ce32:	6823      	ldr	r3, [r4, #0]
   1ce34:	055a      	lsls	r2, r3, #21
   1ce36:	d407      	bmi.n	1ce48 <_printf_float+0x1f8>
   1ce38:	6923      	ldr	r3, [r4, #16]
   1ce3a:	4642      	mov	r2, r8
   1ce3c:	4631      	mov	r1, r6
   1ce3e:	4628      	mov	r0, r5
   1ce40:	47b8      	blx	r7
   1ce42:	3001      	adds	r0, #1
   1ce44:	d12c      	bne.n	1cea0 <_printf_float+0x250>
   1ce46:	e764      	b.n	1cd12 <_printf_float+0xc2>
   1ce48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   1ce4c:	f240 80e0 	bls.w	1d010 <_printf_float+0x3c0>
   1ce50:	2200      	movs	r2, #0
   1ce52:	2300      	movs	r3, #0
   1ce54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1ce58:	f7f3 fe16 	bl	10a88 <__aeabi_dcmpeq>
   1ce5c:	2800      	cmp	r0, #0
   1ce5e:	d034      	beq.n	1ceca <_printf_float+0x27a>
   1ce60:	2301      	movs	r3, #1
   1ce62:	4a37      	ldr	r2, [pc, #220]	; (1cf40 <_printf_float+0x2f0>)
   1ce64:	4631      	mov	r1, r6
   1ce66:	4628      	mov	r0, r5
   1ce68:	47b8      	blx	r7
   1ce6a:	3001      	adds	r0, #1
   1ce6c:	f43f af51 	beq.w	1cd12 <_printf_float+0xc2>
   1ce70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   1ce74:	429a      	cmp	r2, r3
   1ce76:	db02      	blt.n	1ce7e <_printf_float+0x22e>
   1ce78:	6823      	ldr	r3, [r4, #0]
   1ce7a:	07d8      	lsls	r0, r3, #31
   1ce7c:	d510      	bpl.n	1cea0 <_printf_float+0x250>
   1ce7e:	ee18 3a10 	vmov	r3, s16
   1ce82:	4652      	mov	r2, sl
   1ce84:	4631      	mov	r1, r6
   1ce86:	4628      	mov	r0, r5
   1ce88:	47b8      	blx	r7
   1ce8a:	3001      	adds	r0, #1
   1ce8c:	f43f af41 	beq.w	1cd12 <_printf_float+0xc2>
   1ce90:	f04f 0800 	mov.w	r8, #0
   1ce94:	f104 091a 	add.w	r9, r4, #26
   1ce98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ce9a:	3b01      	subs	r3, #1
   1ce9c:	4543      	cmp	r3, r8
   1ce9e:	dc09      	bgt.n	1ceb4 <_printf_float+0x264>
   1cea0:	6823      	ldr	r3, [r4, #0]
   1cea2:	079b      	lsls	r3, r3, #30
   1cea4:	f100 8105 	bmi.w	1d0b2 <_printf_float+0x462>
   1cea8:	68e0      	ldr	r0, [r4, #12]
   1ceaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ceac:	4298      	cmp	r0, r3
   1ceae:	bfb8      	it	lt
   1ceb0:	4618      	movlt	r0, r3
   1ceb2:	e730      	b.n	1cd16 <_printf_float+0xc6>
   1ceb4:	2301      	movs	r3, #1
   1ceb6:	464a      	mov	r2, r9
   1ceb8:	4631      	mov	r1, r6
   1ceba:	4628      	mov	r0, r5
   1cebc:	47b8      	blx	r7
   1cebe:	3001      	adds	r0, #1
   1cec0:	f43f af27 	beq.w	1cd12 <_printf_float+0xc2>
   1cec4:	f108 0801 	add.w	r8, r8, #1
   1cec8:	e7e6      	b.n	1ce98 <_printf_float+0x248>
   1ceca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cecc:	2b00      	cmp	r3, #0
   1cece:	dc39      	bgt.n	1cf44 <_printf_float+0x2f4>
   1ced0:	2301      	movs	r3, #1
   1ced2:	4a1b      	ldr	r2, [pc, #108]	; (1cf40 <_printf_float+0x2f0>)
   1ced4:	4631      	mov	r1, r6
   1ced6:	4628      	mov	r0, r5
   1ced8:	47b8      	blx	r7
   1ceda:	3001      	adds	r0, #1
   1cedc:	f43f af19 	beq.w	1cd12 <_printf_float+0xc2>
   1cee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   1cee4:	4313      	orrs	r3, r2
   1cee6:	d102      	bne.n	1ceee <_printf_float+0x29e>
   1cee8:	6823      	ldr	r3, [r4, #0]
   1ceea:	07d9      	lsls	r1, r3, #31
   1ceec:	d5d8      	bpl.n	1cea0 <_printf_float+0x250>
   1ceee:	ee18 3a10 	vmov	r3, s16
   1cef2:	4652      	mov	r2, sl
   1cef4:	4631      	mov	r1, r6
   1cef6:	4628      	mov	r0, r5
   1cef8:	47b8      	blx	r7
   1cefa:	3001      	adds	r0, #1
   1cefc:	f43f af09 	beq.w	1cd12 <_printf_float+0xc2>
   1cf00:	f04f 0900 	mov.w	r9, #0
   1cf04:	f104 0a1a 	add.w	sl, r4, #26
   1cf08:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1cf0a:	425b      	negs	r3, r3
   1cf0c:	454b      	cmp	r3, r9
   1cf0e:	dc01      	bgt.n	1cf14 <_printf_float+0x2c4>
   1cf10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1cf12:	e792      	b.n	1ce3a <_printf_float+0x1ea>
   1cf14:	2301      	movs	r3, #1
   1cf16:	4652      	mov	r2, sl
   1cf18:	4631      	mov	r1, r6
   1cf1a:	4628      	mov	r0, r5
   1cf1c:	47b8      	blx	r7
   1cf1e:	3001      	adds	r0, #1
   1cf20:	f43f aef7 	beq.w	1cd12 <_printf_float+0xc2>
   1cf24:	f109 0901 	add.w	r9, r9, #1
   1cf28:	e7ee      	b.n	1cf08 <_printf_float+0x2b8>
   1cf2a:	bf00      	nop
   1cf2c:	7fefffff 	.word	0x7fefffff
   1cf30:	00024e11 	.word	0x00024e11
   1cf34:	00024e15 	.word	0x00024e15
   1cf38:	00024e1d 	.word	0x00024e1d
   1cf3c:	00024e19 	.word	0x00024e19
   1cf40:	00024e6f 	.word	0x00024e6f
   1cf44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cf46:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1cf48:	429a      	cmp	r2, r3
   1cf4a:	bfa8      	it	ge
   1cf4c:	461a      	movge	r2, r3
   1cf4e:	2a00      	cmp	r2, #0
   1cf50:	4691      	mov	r9, r2
   1cf52:	dc37      	bgt.n	1cfc4 <_printf_float+0x374>
   1cf54:	f04f 0b00 	mov.w	fp, #0
   1cf58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   1cf5c:	f104 021a 	add.w	r2, r4, #26
   1cf60:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1cf62:	9305      	str	r3, [sp, #20]
   1cf64:	eba3 0309 	sub.w	r3, r3, r9
   1cf68:	455b      	cmp	r3, fp
   1cf6a:	dc33      	bgt.n	1cfd4 <_printf_float+0x384>
   1cf6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   1cf70:	429a      	cmp	r2, r3
   1cf72:	db3b      	blt.n	1cfec <_printf_float+0x39c>
   1cf74:	6823      	ldr	r3, [r4, #0]
   1cf76:	07da      	lsls	r2, r3, #31
   1cf78:	d438      	bmi.n	1cfec <_printf_float+0x39c>
   1cf7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1cf7c:	9b05      	ldr	r3, [sp, #20]
   1cf7e:	9909      	ldr	r1, [sp, #36]	; 0x24
   1cf80:	1ad3      	subs	r3, r2, r3
   1cf82:	eba2 0901 	sub.w	r9, r2, r1
   1cf86:	4599      	cmp	r9, r3
   1cf88:	bfa8      	it	ge
   1cf8a:	4699      	movge	r9, r3
   1cf8c:	f1b9 0f00 	cmp.w	r9, #0
   1cf90:	dc35      	bgt.n	1cffe <_printf_float+0x3ae>
   1cf92:	f04f 0800 	mov.w	r8, #0
   1cf96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   1cf9a:	f104 0a1a 	add.w	sl, r4, #26
   1cf9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   1cfa2:	1a9b      	subs	r3, r3, r2
   1cfa4:	eba3 0309 	sub.w	r3, r3, r9
   1cfa8:	4543      	cmp	r3, r8
   1cfaa:	f77f af79 	ble.w	1cea0 <_printf_float+0x250>
   1cfae:	2301      	movs	r3, #1
   1cfb0:	4652      	mov	r2, sl
   1cfb2:	4631      	mov	r1, r6
   1cfb4:	4628      	mov	r0, r5
   1cfb6:	47b8      	blx	r7
   1cfb8:	3001      	adds	r0, #1
   1cfba:	f43f aeaa 	beq.w	1cd12 <_printf_float+0xc2>
   1cfbe:	f108 0801 	add.w	r8, r8, #1
   1cfc2:	e7ec      	b.n	1cf9e <_printf_float+0x34e>
   1cfc4:	4613      	mov	r3, r2
   1cfc6:	4631      	mov	r1, r6
   1cfc8:	4642      	mov	r2, r8
   1cfca:	4628      	mov	r0, r5
   1cfcc:	47b8      	blx	r7
   1cfce:	3001      	adds	r0, #1
   1cfd0:	d1c0      	bne.n	1cf54 <_printf_float+0x304>
   1cfd2:	e69e      	b.n	1cd12 <_printf_float+0xc2>
   1cfd4:	2301      	movs	r3, #1
   1cfd6:	4631      	mov	r1, r6
   1cfd8:	4628      	mov	r0, r5
   1cfda:	9205      	str	r2, [sp, #20]
   1cfdc:	47b8      	blx	r7
   1cfde:	3001      	adds	r0, #1
   1cfe0:	f43f ae97 	beq.w	1cd12 <_printf_float+0xc2>
   1cfe4:	f10b 0b01 	add.w	fp, fp, #1
   1cfe8:	9a05      	ldr	r2, [sp, #20]
   1cfea:	e7b9      	b.n	1cf60 <_printf_float+0x310>
   1cfec:	ee18 3a10 	vmov	r3, s16
   1cff0:	4652      	mov	r2, sl
   1cff2:	4631      	mov	r1, r6
   1cff4:	4628      	mov	r0, r5
   1cff6:	47b8      	blx	r7
   1cff8:	3001      	adds	r0, #1
   1cffa:	d1be      	bne.n	1cf7a <_printf_float+0x32a>
   1cffc:	e689      	b.n	1cd12 <_printf_float+0xc2>
   1cffe:	9a05      	ldr	r2, [sp, #20]
   1d000:	464b      	mov	r3, r9
   1d002:	4631      	mov	r1, r6
   1d004:	4628      	mov	r0, r5
   1d006:	4442      	add	r2, r8
   1d008:	47b8      	blx	r7
   1d00a:	3001      	adds	r0, #1
   1d00c:	d1c1      	bne.n	1cf92 <_printf_float+0x342>
   1d00e:	e680      	b.n	1cd12 <_printf_float+0xc2>
   1d010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1d012:	2a01      	cmp	r2, #1
   1d014:	dc01      	bgt.n	1d01a <_printf_float+0x3ca>
   1d016:	07db      	lsls	r3, r3, #31
   1d018:	d538      	bpl.n	1d08c <_printf_float+0x43c>
   1d01a:	2301      	movs	r3, #1
   1d01c:	4642      	mov	r2, r8
   1d01e:	4631      	mov	r1, r6
   1d020:	4628      	mov	r0, r5
   1d022:	47b8      	blx	r7
   1d024:	3001      	adds	r0, #1
   1d026:	f43f ae74 	beq.w	1cd12 <_printf_float+0xc2>
   1d02a:	ee18 3a10 	vmov	r3, s16
   1d02e:	4652      	mov	r2, sl
   1d030:	4631      	mov	r1, r6
   1d032:	4628      	mov	r0, r5
   1d034:	47b8      	blx	r7
   1d036:	3001      	adds	r0, #1
   1d038:	f43f ae6b 	beq.w	1cd12 <_printf_float+0xc2>
   1d03c:	2200      	movs	r2, #0
   1d03e:	2300      	movs	r3, #0
   1d040:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1d044:	f7f3 fd20 	bl	10a88 <__aeabi_dcmpeq>
   1d048:	b9d8      	cbnz	r0, 1d082 <_printf_float+0x432>
   1d04a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d04c:	f108 0201 	add.w	r2, r8, #1
   1d050:	3b01      	subs	r3, #1
   1d052:	4631      	mov	r1, r6
   1d054:	4628      	mov	r0, r5
   1d056:	47b8      	blx	r7
   1d058:	3001      	adds	r0, #1
   1d05a:	d10e      	bne.n	1d07a <_printf_float+0x42a>
   1d05c:	e659      	b.n	1cd12 <_printf_float+0xc2>
   1d05e:	2301      	movs	r3, #1
   1d060:	4652      	mov	r2, sl
   1d062:	4631      	mov	r1, r6
   1d064:	4628      	mov	r0, r5
   1d066:	47b8      	blx	r7
   1d068:	3001      	adds	r0, #1
   1d06a:	f43f ae52 	beq.w	1cd12 <_printf_float+0xc2>
   1d06e:	f108 0801 	add.w	r8, r8, #1
   1d072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d074:	3b01      	subs	r3, #1
   1d076:	4543      	cmp	r3, r8
   1d078:	dcf1      	bgt.n	1d05e <_printf_float+0x40e>
   1d07a:	464b      	mov	r3, r9
   1d07c:	f104 0250 	add.w	r2, r4, #80	; 0x50
   1d080:	e6dc      	b.n	1ce3c <_printf_float+0x1ec>
   1d082:	f04f 0800 	mov.w	r8, #0
   1d086:	f104 0a1a 	add.w	sl, r4, #26
   1d08a:	e7f2      	b.n	1d072 <_printf_float+0x422>
   1d08c:	2301      	movs	r3, #1
   1d08e:	4642      	mov	r2, r8
   1d090:	e7df      	b.n	1d052 <_printf_float+0x402>
   1d092:	2301      	movs	r3, #1
   1d094:	464a      	mov	r2, r9
   1d096:	4631      	mov	r1, r6
   1d098:	4628      	mov	r0, r5
   1d09a:	47b8      	blx	r7
   1d09c:	3001      	adds	r0, #1
   1d09e:	f43f ae38 	beq.w	1cd12 <_printf_float+0xc2>
   1d0a2:	f108 0801 	add.w	r8, r8, #1
   1d0a6:	68e3      	ldr	r3, [r4, #12]
   1d0a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1d0aa:	1a5b      	subs	r3, r3, r1
   1d0ac:	4543      	cmp	r3, r8
   1d0ae:	dcf0      	bgt.n	1d092 <_printf_float+0x442>
   1d0b0:	e6fa      	b.n	1cea8 <_printf_float+0x258>
   1d0b2:	f04f 0800 	mov.w	r8, #0
   1d0b6:	f104 0919 	add.w	r9, r4, #25
   1d0ba:	e7f4      	b.n	1d0a6 <_printf_float+0x456>

0001d0bc <_printf_i>:
   1d0bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1d0c0:	460c      	mov	r4, r1
   1d0c2:	4691      	mov	r9, r2
   1d0c4:	4680      	mov	r8, r0
   1d0c6:	469a      	mov	sl, r3
   1d0c8:	7e27      	ldrb	r7, [r4, #24]
   1d0ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
   1d0ce:	990c      	ldr	r1, [sp, #48]	; 0x30
   1d0d0:	2f78      	cmp	r7, #120	; 0x78
   1d0d2:	d807      	bhi.n	1d0e4 <_printf_i+0x28>
   1d0d4:	2f62      	cmp	r7, #98	; 0x62
   1d0d6:	d80a      	bhi.n	1d0ee <_printf_i+0x32>
   1d0d8:	2f00      	cmp	r7, #0
   1d0da:	f000 80d8 	beq.w	1d28e <_printf_i+0x1d2>
   1d0de:	2f58      	cmp	r7, #88	; 0x58
   1d0e0:	f000 80a3 	beq.w	1d22a <_printf_i+0x16e>
   1d0e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1d0e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   1d0ec:	e03a      	b.n	1d164 <_printf_i+0xa8>
   1d0ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   1d0f2:	2b15      	cmp	r3, #21
   1d0f4:	d8f6      	bhi.n	1d0e4 <_printf_i+0x28>
   1d0f6:	a001      	add	r0, pc, #4	; (adr r0, 1d0fc <_printf_i+0x40>)
   1d0f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1d0fc:	0001d155 	.word	0x0001d155
   1d100:	0001d169 	.word	0x0001d169
   1d104:	0001d0e5 	.word	0x0001d0e5
   1d108:	0001d0e5 	.word	0x0001d0e5
   1d10c:	0001d0e5 	.word	0x0001d0e5
   1d110:	0001d0e5 	.word	0x0001d0e5
   1d114:	0001d169 	.word	0x0001d169
   1d118:	0001d0e5 	.word	0x0001d0e5
   1d11c:	0001d0e5 	.word	0x0001d0e5
   1d120:	0001d0e5 	.word	0x0001d0e5
   1d124:	0001d0e5 	.word	0x0001d0e5
   1d128:	0001d275 	.word	0x0001d275
   1d12c:	0001d199 	.word	0x0001d199
   1d130:	0001d257 	.word	0x0001d257
   1d134:	0001d0e5 	.word	0x0001d0e5
   1d138:	0001d0e5 	.word	0x0001d0e5
   1d13c:	0001d297 	.word	0x0001d297
   1d140:	0001d0e5 	.word	0x0001d0e5
   1d144:	0001d199 	.word	0x0001d199
   1d148:	0001d0e5 	.word	0x0001d0e5
   1d14c:	0001d0e5 	.word	0x0001d0e5
   1d150:	0001d25f 	.word	0x0001d25f
   1d154:	680b      	ldr	r3, [r1, #0]
   1d156:	f104 0642 	add.w	r6, r4, #66	; 0x42
   1d15a:	1d1a      	adds	r2, r3, #4
   1d15c:	681b      	ldr	r3, [r3, #0]
   1d15e:	600a      	str	r2, [r1, #0]
   1d160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1d164:	2301      	movs	r3, #1
   1d166:	e0a3      	b.n	1d2b0 <_printf_i+0x1f4>
   1d168:	6825      	ldr	r5, [r4, #0]
   1d16a:	6808      	ldr	r0, [r1, #0]
   1d16c:	062e      	lsls	r6, r5, #24
   1d16e:	f100 0304 	add.w	r3, r0, #4
   1d172:	d50a      	bpl.n	1d18a <_printf_i+0xce>
   1d174:	6805      	ldr	r5, [r0, #0]
   1d176:	600b      	str	r3, [r1, #0]
   1d178:	2d00      	cmp	r5, #0
   1d17a:	da03      	bge.n	1d184 <_printf_i+0xc8>
   1d17c:	232d      	movs	r3, #45	; 0x2d
   1d17e:	426d      	negs	r5, r5
   1d180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1d184:	485e      	ldr	r0, [pc, #376]	; (1d300 <_printf_i+0x244>)
   1d186:	230a      	movs	r3, #10
   1d188:	e019      	b.n	1d1be <_printf_i+0x102>
   1d18a:	f015 0f40 	tst.w	r5, #64	; 0x40
   1d18e:	6805      	ldr	r5, [r0, #0]
   1d190:	600b      	str	r3, [r1, #0]
   1d192:	bf18      	it	ne
   1d194:	b22d      	sxthne	r5, r5
   1d196:	e7ef      	b.n	1d178 <_printf_i+0xbc>
   1d198:	680b      	ldr	r3, [r1, #0]
   1d19a:	6825      	ldr	r5, [r4, #0]
   1d19c:	1d18      	adds	r0, r3, #4
   1d19e:	6008      	str	r0, [r1, #0]
   1d1a0:	0628      	lsls	r0, r5, #24
   1d1a2:	d501      	bpl.n	1d1a8 <_printf_i+0xec>
   1d1a4:	681d      	ldr	r5, [r3, #0]
   1d1a6:	e002      	b.n	1d1ae <_printf_i+0xf2>
   1d1a8:	0669      	lsls	r1, r5, #25
   1d1aa:	d5fb      	bpl.n	1d1a4 <_printf_i+0xe8>
   1d1ac:	881d      	ldrh	r5, [r3, #0]
   1d1ae:	2f6f      	cmp	r7, #111	; 0x6f
   1d1b0:	4853      	ldr	r0, [pc, #332]	; (1d300 <_printf_i+0x244>)
   1d1b2:	bf0c      	ite	eq
   1d1b4:	2308      	moveq	r3, #8
   1d1b6:	230a      	movne	r3, #10
   1d1b8:	2100      	movs	r1, #0
   1d1ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   1d1be:	6866      	ldr	r6, [r4, #4]
   1d1c0:	2e00      	cmp	r6, #0
   1d1c2:	60a6      	str	r6, [r4, #8]
   1d1c4:	bfa2      	ittt	ge
   1d1c6:	6821      	ldrge	r1, [r4, #0]
   1d1c8:	f021 0104 	bicge.w	r1, r1, #4
   1d1cc:	6021      	strge	r1, [r4, #0]
   1d1ce:	b90d      	cbnz	r5, 1d1d4 <_printf_i+0x118>
   1d1d0:	2e00      	cmp	r6, #0
   1d1d2:	d04d      	beq.n	1d270 <_printf_i+0x1b4>
   1d1d4:	4616      	mov	r6, r2
   1d1d6:	fbb5 f1f3 	udiv	r1, r5, r3
   1d1da:	fb03 5711 	mls	r7, r3, r1, r5
   1d1de:	5dc7      	ldrb	r7, [r0, r7]
   1d1e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
   1d1e4:	462f      	mov	r7, r5
   1d1e6:	460d      	mov	r5, r1
   1d1e8:	42bb      	cmp	r3, r7
   1d1ea:	d9f4      	bls.n	1d1d6 <_printf_i+0x11a>
   1d1ec:	2b08      	cmp	r3, #8
   1d1ee:	d10b      	bne.n	1d208 <_printf_i+0x14c>
   1d1f0:	6823      	ldr	r3, [r4, #0]
   1d1f2:	07df      	lsls	r7, r3, #31
   1d1f4:	d508      	bpl.n	1d208 <_printf_i+0x14c>
   1d1f6:	6923      	ldr	r3, [r4, #16]
   1d1f8:	6861      	ldr	r1, [r4, #4]
   1d1fa:	4299      	cmp	r1, r3
   1d1fc:	bfde      	ittt	le
   1d1fe:	2330      	movle	r3, #48	; 0x30
   1d200:	f806 3c01 	strble.w	r3, [r6, #-1]
   1d204:	f106 36ff 	addle.w	r6, r6, #4294967295
   1d208:	1b92      	subs	r2, r2, r6
   1d20a:	6122      	str	r2, [r4, #16]
   1d20c:	464b      	mov	r3, r9
   1d20e:	aa03      	add	r2, sp, #12
   1d210:	4621      	mov	r1, r4
   1d212:	4640      	mov	r0, r8
   1d214:	f8cd a000 	str.w	sl, [sp]
   1d218:	f005 ff7e 	bl	23118 <_printf_common>
   1d21c:	3001      	adds	r0, #1
   1d21e:	d14c      	bne.n	1d2ba <_printf_i+0x1fe>
   1d220:	f04f 30ff 	mov.w	r0, #4294967295
   1d224:	b004      	add	sp, #16
   1d226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d22a:	4835      	ldr	r0, [pc, #212]	; (1d300 <_printf_i+0x244>)
   1d22c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   1d230:	6823      	ldr	r3, [r4, #0]
   1d232:	680e      	ldr	r6, [r1, #0]
   1d234:	061f      	lsls	r7, r3, #24
   1d236:	f856 5b04 	ldr.w	r5, [r6], #4
   1d23a:	600e      	str	r6, [r1, #0]
   1d23c:	d514      	bpl.n	1d268 <_printf_i+0x1ac>
   1d23e:	07d9      	lsls	r1, r3, #31
   1d240:	bf44      	itt	mi
   1d242:	f043 0320 	orrmi.w	r3, r3, #32
   1d246:	6023      	strmi	r3, [r4, #0]
   1d248:	b91d      	cbnz	r5, 1d252 <_printf_i+0x196>
   1d24a:	6823      	ldr	r3, [r4, #0]
   1d24c:	f023 0320 	bic.w	r3, r3, #32
   1d250:	6023      	str	r3, [r4, #0]
   1d252:	2310      	movs	r3, #16
   1d254:	e7b0      	b.n	1d1b8 <_printf_i+0xfc>
   1d256:	6823      	ldr	r3, [r4, #0]
   1d258:	f043 0320 	orr.w	r3, r3, #32
   1d25c:	6023      	str	r3, [r4, #0]
   1d25e:	2378      	movs	r3, #120	; 0x78
   1d260:	4828      	ldr	r0, [pc, #160]	; (1d304 <_printf_i+0x248>)
   1d262:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   1d266:	e7e3      	b.n	1d230 <_printf_i+0x174>
   1d268:	065e      	lsls	r6, r3, #25
   1d26a:	bf48      	it	mi
   1d26c:	b2ad      	uxthmi	r5, r5
   1d26e:	e7e6      	b.n	1d23e <_printf_i+0x182>
   1d270:	4616      	mov	r6, r2
   1d272:	e7bb      	b.n	1d1ec <_printf_i+0x130>
   1d274:	680b      	ldr	r3, [r1, #0]
   1d276:	6826      	ldr	r6, [r4, #0]
   1d278:	1d1d      	adds	r5, r3, #4
   1d27a:	6960      	ldr	r0, [r4, #20]
   1d27c:	600d      	str	r5, [r1, #0]
   1d27e:	0635      	lsls	r5, r6, #24
   1d280:	681b      	ldr	r3, [r3, #0]
   1d282:	d501      	bpl.n	1d288 <_printf_i+0x1cc>
   1d284:	6018      	str	r0, [r3, #0]
   1d286:	e002      	b.n	1d28e <_printf_i+0x1d2>
   1d288:	0671      	lsls	r1, r6, #25
   1d28a:	d5fb      	bpl.n	1d284 <_printf_i+0x1c8>
   1d28c:	8018      	strh	r0, [r3, #0]
   1d28e:	2300      	movs	r3, #0
   1d290:	4616      	mov	r6, r2
   1d292:	6123      	str	r3, [r4, #16]
   1d294:	e7ba      	b.n	1d20c <_printf_i+0x150>
   1d296:	680b      	ldr	r3, [r1, #0]
   1d298:	1d1a      	adds	r2, r3, #4
   1d29a:	600a      	str	r2, [r1, #0]
   1d29c:	2100      	movs	r1, #0
   1d29e:	681e      	ldr	r6, [r3, #0]
   1d2a0:	6862      	ldr	r2, [r4, #4]
   1d2a2:	4630      	mov	r0, r6
   1d2a4:	f005 fe4b 	bl	22f3e <memchr>
   1d2a8:	b108      	cbz	r0, 1d2ae <_printf_i+0x1f2>
   1d2aa:	1b80      	subs	r0, r0, r6
   1d2ac:	6060      	str	r0, [r4, #4]
   1d2ae:	6863      	ldr	r3, [r4, #4]
   1d2b0:	6123      	str	r3, [r4, #16]
   1d2b2:	2300      	movs	r3, #0
   1d2b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   1d2b8:	e7a8      	b.n	1d20c <_printf_i+0x150>
   1d2ba:	6923      	ldr	r3, [r4, #16]
   1d2bc:	4632      	mov	r2, r6
   1d2be:	4649      	mov	r1, r9
   1d2c0:	4640      	mov	r0, r8
   1d2c2:	47d0      	blx	sl
   1d2c4:	3001      	adds	r0, #1
   1d2c6:	d0ab      	beq.n	1d220 <_printf_i+0x164>
   1d2c8:	6823      	ldr	r3, [r4, #0]
   1d2ca:	079b      	lsls	r3, r3, #30
   1d2cc:	d413      	bmi.n	1d2f6 <_printf_i+0x23a>
   1d2ce:	68e0      	ldr	r0, [r4, #12]
   1d2d0:	9b03      	ldr	r3, [sp, #12]
   1d2d2:	4298      	cmp	r0, r3
   1d2d4:	bfb8      	it	lt
   1d2d6:	4618      	movlt	r0, r3
   1d2d8:	e7a4      	b.n	1d224 <_printf_i+0x168>
   1d2da:	2301      	movs	r3, #1
   1d2dc:	4632      	mov	r2, r6
   1d2de:	4649      	mov	r1, r9
   1d2e0:	4640      	mov	r0, r8
   1d2e2:	47d0      	blx	sl
   1d2e4:	3001      	adds	r0, #1
   1d2e6:	d09b      	beq.n	1d220 <_printf_i+0x164>
   1d2e8:	3501      	adds	r5, #1
   1d2ea:	68e3      	ldr	r3, [r4, #12]
   1d2ec:	9903      	ldr	r1, [sp, #12]
   1d2ee:	1a5b      	subs	r3, r3, r1
   1d2f0:	42ab      	cmp	r3, r5
   1d2f2:	dcf2      	bgt.n	1d2da <_printf_i+0x21e>
   1d2f4:	e7eb      	b.n	1d2ce <_printf_i+0x212>
   1d2f6:	2500      	movs	r5, #0
   1d2f8:	f104 0619 	add.w	r6, r4, #25
   1d2fc:	e7f5      	b.n	1d2ea <_printf_i+0x22e>
   1d2fe:	bf00      	nop
   1d300:	00024e21 	.word	0x00024e21
   1d304:	00024e32 	.word	0x00024e32

0001d308 <realloc>:
   1d308:	4b02      	ldr	r3, [pc, #8]	; (1d314 <realloc+0xc>)
   1d30a:	460a      	mov	r2, r1
   1d30c:	4601      	mov	r1, r0
   1d30e:	6818      	ldr	r0, [r3, #0]
   1d310:	f006 bbbe 	b.w	23a90 <_realloc_r>
   1d314:	2001459c 	.word	0x2001459c

0001d318 <_sbrk_r>:
   1d318:	b538      	push	{r3, r4, r5, lr}
   1d31a:	2300      	movs	r3, #0
   1d31c:	4d05      	ldr	r5, [pc, #20]	; (1d334 <_sbrk_r+0x1c>)
   1d31e:	4604      	mov	r4, r0
   1d320:	4608      	mov	r0, r1
   1d322:	602b      	str	r3, [r5, #0]
   1d324:	f7f7 f936 	bl	14594 <_sbrk>
   1d328:	1c43      	adds	r3, r0, #1
   1d32a:	d102      	bne.n	1d332 <_sbrk_r+0x1a>
   1d32c:	682b      	ldr	r3, [r5, #0]
   1d32e:	b103      	cbz	r3, 1d332 <_sbrk_r+0x1a>
   1d330:	6023      	str	r3, [r4, #0]
   1d332:	bd38      	pop	{r3, r4, r5, pc}
   1d334:	20016ed8 	.word	0x20016ed8

0001d338 <sniprintf>:
   1d338:	b40c      	push	{r2, r3}
   1d33a:	4b18      	ldr	r3, [pc, #96]	; (1d39c <sniprintf+0x64>)
   1d33c:	b530      	push	{r4, r5, lr}
   1d33e:	1e0c      	subs	r4, r1, #0
   1d340:	b09d      	sub	sp, #116	; 0x74
   1d342:	681d      	ldr	r5, [r3, #0]
   1d344:	da08      	bge.n	1d358 <sniprintf+0x20>
   1d346:	238b      	movs	r3, #139	; 0x8b
   1d348:	f04f 30ff 	mov.w	r0, #4294967295
   1d34c:	602b      	str	r3, [r5, #0]
   1d34e:	b01d      	add	sp, #116	; 0x74
   1d350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1d354:	b002      	add	sp, #8
   1d356:	4770      	bx	lr
   1d358:	f44f 7302 	mov.w	r3, #520	; 0x208
   1d35c:	9002      	str	r0, [sp, #8]
   1d35e:	9006      	str	r0, [sp, #24]
   1d360:	a902      	add	r1, sp, #8
   1d362:	f8ad 3014 	strh.w	r3, [sp, #20]
   1d366:	bf14      	ite	ne
   1d368:	f104 33ff 	addne.w	r3, r4, #4294967295
   1d36c:	4623      	moveq	r3, r4
   1d36e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1d370:	4628      	mov	r0, r5
   1d372:	9304      	str	r3, [sp, #16]
   1d374:	9307      	str	r3, [sp, #28]
   1d376:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d37a:	f8ad 3016 	strh.w	r3, [sp, #22]
   1d37e:	ab21      	add	r3, sp, #132	; 0x84
   1d380:	9301      	str	r3, [sp, #4]
   1d382:	f000 f9bf 	bl	1d704 <_svfiprintf_r>
   1d386:	1c43      	adds	r3, r0, #1
   1d388:	bfbc      	itt	lt
   1d38a:	238b      	movlt	r3, #139	; 0x8b
   1d38c:	602b      	strlt	r3, [r5, #0]
   1d38e:	2c00      	cmp	r4, #0
   1d390:	d0dd      	beq.n	1d34e <sniprintf+0x16>
   1d392:	9b02      	ldr	r3, [sp, #8]
   1d394:	2200      	movs	r2, #0
   1d396:	701a      	strb	r2, [r3, #0]
   1d398:	e7d9      	b.n	1d34e <sniprintf+0x16>
   1d39a:	bf00      	nop
   1d39c:	2001459c 	.word	0x2001459c

0001d3a0 <siscanf>:
   1d3a0:	b40e      	push	{r1, r2, r3}
   1d3a2:	b510      	push	{r4, lr}
   1d3a4:	b09f      	sub	sp, #124	; 0x7c
   1d3a6:	f44f 7101 	mov.w	r1, #516	; 0x204
   1d3aa:	ac21      	add	r4, sp, #132	; 0x84
   1d3ac:	f8ad 101c 	strh.w	r1, [sp, #28]
   1d3b0:	9004      	str	r0, [sp, #16]
   1d3b2:	f854 2b04 	ldr.w	r2, [r4], #4
   1d3b6:	9008      	str	r0, [sp, #32]
   1d3b8:	9201      	str	r2, [sp, #4]
   1d3ba:	f7f3 fd59 	bl	10e70 <strlen>
   1d3be:	4b0c      	ldr	r3, [pc, #48]	; (1d3f0 <siscanf+0x50>)
   1d3c0:	a904      	add	r1, sp, #16
   1d3c2:	9005      	str	r0, [sp, #20]
   1d3c4:	930d      	str	r3, [sp, #52]	; 0x34
   1d3c6:	2300      	movs	r3, #0
   1d3c8:	9009      	str	r0, [sp, #36]	; 0x24
   1d3ca:	9311      	str	r3, [sp, #68]	; 0x44
   1d3cc:	9316      	str	r3, [sp, #88]	; 0x58
   1d3ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d3d2:	4808      	ldr	r0, [pc, #32]	; (1d3f4 <siscanf+0x54>)
   1d3d4:	f8ad 301e 	strh.w	r3, [sp, #30]
   1d3d8:	4623      	mov	r3, r4
   1d3da:	9a01      	ldr	r2, [sp, #4]
   1d3dc:	6800      	ldr	r0, [r0, #0]
   1d3de:	9403      	str	r4, [sp, #12]
   1d3e0:	f000 fa90 	bl	1d904 <__ssvfiscanf_r>
   1d3e4:	b01f      	add	sp, #124	; 0x7c
   1d3e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d3ea:	b003      	add	sp, #12
   1d3ec:	4770      	bx	lr
   1d3ee:	bf00      	nop
   1d3f0:	0002322d 	.word	0x0002322d
   1d3f4:	2001459c 	.word	0x2001459c

0001d3f8 <_strtol_l.isra.0>:
   1d3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d3fc:	468c      	mov	ip, r1
   1d3fe:	4686      	mov	lr, r0
   1d400:	4e38      	ldr	r6, [pc, #224]	; (1d4e4 <_strtol_l.isra.0+0xec>)
   1d402:	4660      	mov	r0, ip
   1d404:	f81c 4b01 	ldrb.w	r4, [ip], #1
   1d408:	5da5      	ldrb	r5, [r4, r6]
   1d40a:	f015 0508 	ands.w	r5, r5, #8
   1d40e:	d1f8      	bne.n	1d402 <_strtol_l.isra.0+0xa>
   1d410:	2c2d      	cmp	r4, #45	; 0x2d
   1d412:	d133      	bne.n	1d47c <_strtol_l.isra.0+0x84>
   1d414:	f89c 4000 	ldrb.w	r4, [ip]
   1d418:	f04f 0801 	mov.w	r8, #1
   1d41c:	f100 0c02 	add.w	ip, r0, #2
   1d420:	2b00      	cmp	r3, #0
   1d422:	d05b      	beq.n	1d4dc <_strtol_l.isra.0+0xe4>
   1d424:	2b10      	cmp	r3, #16
   1d426:	d10c      	bne.n	1d442 <_strtol_l.isra.0+0x4a>
   1d428:	2c30      	cmp	r4, #48	; 0x30
   1d42a:	d10a      	bne.n	1d442 <_strtol_l.isra.0+0x4a>
   1d42c:	f89c 0000 	ldrb.w	r0, [ip]
   1d430:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   1d434:	2858      	cmp	r0, #88	; 0x58
   1d436:	d14c      	bne.n	1d4d2 <_strtol_l.isra.0+0xda>
   1d438:	f89c 4001 	ldrb.w	r4, [ip, #1]
   1d43c:	2310      	movs	r3, #16
   1d43e:	f10c 0c02 	add.w	ip, ip, #2
   1d442:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   1d446:	2600      	movs	r6, #0
   1d448:	3f01      	subs	r7, #1
   1d44a:	4630      	mov	r0, r6
   1d44c:	fbb7 f9f3 	udiv	r9, r7, r3
   1d450:	fb03 7a19 	mls	sl, r3, r9, r7
   1d454:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   1d458:	2d09      	cmp	r5, #9
   1d45a:	d817      	bhi.n	1d48c <_strtol_l.isra.0+0x94>
   1d45c:	462c      	mov	r4, r5
   1d45e:	42a3      	cmp	r3, r4
   1d460:	dd23      	ble.n	1d4aa <_strtol_l.isra.0+0xb2>
   1d462:	1c75      	adds	r5, r6, #1
   1d464:	d007      	beq.n	1d476 <_strtol_l.isra.0+0x7e>
   1d466:	4581      	cmp	r9, r0
   1d468:	d31c      	bcc.n	1d4a4 <_strtol_l.isra.0+0xac>
   1d46a:	d101      	bne.n	1d470 <_strtol_l.isra.0+0x78>
   1d46c:	45a2      	cmp	sl, r4
   1d46e:	db19      	blt.n	1d4a4 <_strtol_l.isra.0+0xac>
   1d470:	fb00 4003 	mla	r0, r0, r3, r4
   1d474:	2601      	movs	r6, #1
   1d476:	f81c 4b01 	ldrb.w	r4, [ip], #1
   1d47a:	e7eb      	b.n	1d454 <_strtol_l.isra.0+0x5c>
   1d47c:	2c2b      	cmp	r4, #43	; 0x2b
   1d47e:	46a8      	mov	r8, r5
   1d480:	bf04      	itt	eq
   1d482:	f89c 4000 	ldrbeq.w	r4, [ip]
   1d486:	f100 0c02 	addeq.w	ip, r0, #2
   1d48a:	e7c9      	b.n	1d420 <_strtol_l.isra.0+0x28>
   1d48c:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   1d490:	2d19      	cmp	r5, #25
   1d492:	d801      	bhi.n	1d498 <_strtol_l.isra.0+0xa0>
   1d494:	3c37      	subs	r4, #55	; 0x37
   1d496:	e7e2      	b.n	1d45e <_strtol_l.isra.0+0x66>
   1d498:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   1d49c:	2d19      	cmp	r5, #25
   1d49e:	d804      	bhi.n	1d4aa <_strtol_l.isra.0+0xb2>
   1d4a0:	3c57      	subs	r4, #87	; 0x57
   1d4a2:	e7dc      	b.n	1d45e <_strtol_l.isra.0+0x66>
   1d4a4:	f04f 36ff 	mov.w	r6, #4294967295
   1d4a8:	e7e5      	b.n	1d476 <_strtol_l.isra.0+0x7e>
   1d4aa:	1c73      	adds	r3, r6, #1
   1d4ac:	d106      	bne.n	1d4bc <_strtol_l.isra.0+0xc4>
   1d4ae:	2322      	movs	r3, #34	; 0x22
   1d4b0:	4638      	mov	r0, r7
   1d4b2:	f8ce 3000 	str.w	r3, [lr]
   1d4b6:	b942      	cbnz	r2, 1d4ca <_strtol_l.isra.0+0xd2>
   1d4b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d4bc:	f1b8 0f00 	cmp.w	r8, #0
   1d4c0:	d000      	beq.n	1d4c4 <_strtol_l.isra.0+0xcc>
   1d4c2:	4240      	negs	r0, r0
   1d4c4:	2a00      	cmp	r2, #0
   1d4c6:	d0f7      	beq.n	1d4b8 <_strtol_l.isra.0+0xc0>
   1d4c8:	b10e      	cbz	r6, 1d4ce <_strtol_l.isra.0+0xd6>
   1d4ca:	f10c 31ff 	add.w	r1, ip, #4294967295
   1d4ce:	6011      	str	r1, [r2, #0]
   1d4d0:	e7f2      	b.n	1d4b8 <_strtol_l.isra.0+0xc0>
   1d4d2:	2430      	movs	r4, #48	; 0x30
   1d4d4:	2b00      	cmp	r3, #0
   1d4d6:	d1b4      	bne.n	1d442 <_strtol_l.isra.0+0x4a>
   1d4d8:	2308      	movs	r3, #8
   1d4da:	e7b2      	b.n	1d442 <_strtol_l.isra.0+0x4a>
   1d4dc:	2c30      	cmp	r4, #48	; 0x30
   1d4de:	d0a5      	beq.n	1d42c <_strtol_l.isra.0+0x34>
   1d4e0:	230a      	movs	r3, #10
   1d4e2:	e7ae      	b.n	1d442 <_strtol_l.isra.0+0x4a>
   1d4e4:	00024d11 	.word	0x00024d11

0001d4e8 <strtol>:
   1d4e8:	4613      	mov	r3, r2
   1d4ea:	460a      	mov	r2, r1
   1d4ec:	4601      	mov	r1, r0
   1d4ee:	4802      	ldr	r0, [pc, #8]	; (1d4f8 <strtol+0x10>)
   1d4f0:	6800      	ldr	r0, [r0, #0]
   1d4f2:	f7ff bf81 	b.w	1d3f8 <_strtol_l.isra.0>
   1d4f6:	bf00      	nop
   1d4f8:	2001459c 	.word	0x2001459c

0001d4fc <_strtoul_l.isra.0>:
   1d4fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d500:	468c      	mov	ip, r1
   1d502:	4686      	mov	lr, r0
   1d504:	4e39      	ldr	r6, [pc, #228]	; (1d5ec <_strtoul_l.isra.0+0xf0>)
   1d506:	4660      	mov	r0, ip
   1d508:	f81c 4b01 	ldrb.w	r4, [ip], #1
   1d50c:	5da5      	ldrb	r5, [r4, r6]
   1d50e:	f015 0508 	ands.w	r5, r5, #8
   1d512:	d1f8      	bne.n	1d506 <_strtoul_l.isra.0+0xa>
   1d514:	2c2d      	cmp	r4, #45	; 0x2d
   1d516:	d134      	bne.n	1d582 <_strtoul_l.isra.0+0x86>
   1d518:	f89c 4000 	ldrb.w	r4, [ip]
   1d51c:	f04f 0801 	mov.w	r8, #1
   1d520:	f100 0c02 	add.w	ip, r0, #2
   1d524:	2b00      	cmp	r3, #0
   1d526:	d05d      	beq.n	1d5e4 <_strtoul_l.isra.0+0xe8>
   1d528:	2b10      	cmp	r3, #16
   1d52a:	d10c      	bne.n	1d546 <_strtoul_l.isra.0+0x4a>
   1d52c:	2c30      	cmp	r4, #48	; 0x30
   1d52e:	d10a      	bne.n	1d546 <_strtoul_l.isra.0+0x4a>
   1d530:	f89c 0000 	ldrb.w	r0, [ip]
   1d534:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   1d538:	2858      	cmp	r0, #88	; 0x58
   1d53a:	d14e      	bne.n	1d5da <_strtoul_l.isra.0+0xde>
   1d53c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   1d540:	2310      	movs	r3, #16
   1d542:	f10c 0c02 	add.w	ip, ip, #2
   1d546:	f04f 37ff 	mov.w	r7, #4294967295
   1d54a:	2500      	movs	r5, #0
   1d54c:	fbb7 f7f3 	udiv	r7, r7, r3
   1d550:	fb03 f907 	mul.w	r9, r3, r7
   1d554:	4628      	mov	r0, r5
   1d556:	ea6f 0909 	mvn.w	r9, r9
   1d55a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   1d55e:	2e09      	cmp	r6, #9
   1d560:	d817      	bhi.n	1d592 <_strtoul_l.isra.0+0x96>
   1d562:	4634      	mov	r4, r6
   1d564:	42a3      	cmp	r3, r4
   1d566:	dd23      	ble.n	1d5b0 <_strtoul_l.isra.0+0xb4>
   1d568:	2d00      	cmp	r5, #0
   1d56a:	db1e      	blt.n	1d5aa <_strtoul_l.isra.0+0xae>
   1d56c:	4287      	cmp	r7, r0
   1d56e:	d31c      	bcc.n	1d5aa <_strtoul_l.isra.0+0xae>
   1d570:	d101      	bne.n	1d576 <_strtoul_l.isra.0+0x7a>
   1d572:	45a1      	cmp	r9, r4
   1d574:	db19      	blt.n	1d5aa <_strtoul_l.isra.0+0xae>
   1d576:	fb00 4003 	mla	r0, r0, r3, r4
   1d57a:	2501      	movs	r5, #1
   1d57c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   1d580:	e7eb      	b.n	1d55a <_strtoul_l.isra.0+0x5e>
   1d582:	2c2b      	cmp	r4, #43	; 0x2b
   1d584:	46a8      	mov	r8, r5
   1d586:	bf04      	itt	eq
   1d588:	f89c 4000 	ldrbeq.w	r4, [ip]
   1d58c:	f100 0c02 	addeq.w	ip, r0, #2
   1d590:	e7c8      	b.n	1d524 <_strtoul_l.isra.0+0x28>
   1d592:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   1d596:	2e19      	cmp	r6, #25
   1d598:	d801      	bhi.n	1d59e <_strtoul_l.isra.0+0xa2>
   1d59a:	3c37      	subs	r4, #55	; 0x37
   1d59c:	e7e2      	b.n	1d564 <_strtoul_l.isra.0+0x68>
   1d59e:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   1d5a2:	2e19      	cmp	r6, #25
   1d5a4:	d804      	bhi.n	1d5b0 <_strtoul_l.isra.0+0xb4>
   1d5a6:	3c57      	subs	r4, #87	; 0x57
   1d5a8:	e7dc      	b.n	1d564 <_strtoul_l.isra.0+0x68>
   1d5aa:	f04f 35ff 	mov.w	r5, #4294967295
   1d5ae:	e7e5      	b.n	1d57c <_strtoul_l.isra.0+0x80>
   1d5b0:	2d00      	cmp	r5, #0
   1d5b2:	da07      	bge.n	1d5c4 <_strtoul_l.isra.0+0xc8>
   1d5b4:	2322      	movs	r3, #34	; 0x22
   1d5b6:	f04f 30ff 	mov.w	r0, #4294967295
   1d5ba:	f8ce 3000 	str.w	r3, [lr]
   1d5be:	b942      	cbnz	r2, 1d5d2 <_strtoul_l.isra.0+0xd6>
   1d5c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d5c4:	f1b8 0f00 	cmp.w	r8, #0
   1d5c8:	d000      	beq.n	1d5cc <_strtoul_l.isra.0+0xd0>
   1d5ca:	4240      	negs	r0, r0
   1d5cc:	2a00      	cmp	r2, #0
   1d5ce:	d0f7      	beq.n	1d5c0 <_strtoul_l.isra.0+0xc4>
   1d5d0:	b10d      	cbz	r5, 1d5d6 <_strtoul_l.isra.0+0xda>
   1d5d2:	f10c 31ff 	add.w	r1, ip, #4294967295
   1d5d6:	6011      	str	r1, [r2, #0]
   1d5d8:	e7f2      	b.n	1d5c0 <_strtoul_l.isra.0+0xc4>
   1d5da:	2430      	movs	r4, #48	; 0x30
   1d5dc:	2b00      	cmp	r3, #0
   1d5de:	d1b2      	bne.n	1d546 <_strtoul_l.isra.0+0x4a>
   1d5e0:	2308      	movs	r3, #8
   1d5e2:	e7b0      	b.n	1d546 <_strtoul_l.isra.0+0x4a>
   1d5e4:	2c30      	cmp	r4, #48	; 0x30
   1d5e6:	d0a3      	beq.n	1d530 <_strtoul_l.isra.0+0x34>
   1d5e8:	230a      	movs	r3, #10
   1d5ea:	e7ac      	b.n	1d546 <_strtoul_l.isra.0+0x4a>
   1d5ec:	00024d11 	.word	0x00024d11

0001d5f0 <strtoul>:
   1d5f0:	4613      	mov	r3, r2
   1d5f2:	460a      	mov	r2, r1
   1d5f4:	4601      	mov	r1, r0
   1d5f6:	4802      	ldr	r0, [pc, #8]	; (1d600 <strtoul+0x10>)
   1d5f8:	6800      	ldr	r0, [r0, #0]
   1d5fa:	f7ff bf7f 	b.w	1d4fc <_strtoul_l.isra.0>
   1d5fe:	bf00      	nop
   1d600:	2001459c 	.word	0x2001459c

0001d604 <vsniprintf>:
   1d604:	b507      	push	{r0, r1, r2, lr}
   1d606:	9300      	str	r3, [sp, #0]
   1d608:	4613      	mov	r3, r2
   1d60a:	460a      	mov	r2, r1
   1d60c:	4601      	mov	r1, r0
   1d60e:	4803      	ldr	r0, [pc, #12]	; (1d61c <vsniprintf+0x18>)
   1d610:	6800      	ldr	r0, [r0, #0]
   1d612:	f005 fe9b 	bl	2334c <_vsniprintf_r>
   1d616:	b003      	add	sp, #12
   1d618:	f85d fb04 	ldr.w	pc, [sp], #4
   1d61c:	2001459c 	.word	0x2001459c

0001d620 <_vsiprintf_r>:
   1d620:	b500      	push	{lr}
   1d622:	b09b      	sub	sp, #108	; 0x6c
   1d624:	9100      	str	r1, [sp, #0]
   1d626:	9104      	str	r1, [sp, #16]
   1d628:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d62c:	9105      	str	r1, [sp, #20]
   1d62e:	9102      	str	r1, [sp, #8]
   1d630:	4905      	ldr	r1, [pc, #20]	; (1d648 <_vsiprintf_r+0x28>)
   1d632:	9103      	str	r1, [sp, #12]
   1d634:	4669      	mov	r1, sp
   1d636:	f000 f865 	bl	1d704 <_svfiprintf_r>
   1d63a:	9b00      	ldr	r3, [sp, #0]
   1d63c:	2200      	movs	r2, #0
   1d63e:	701a      	strb	r2, [r3, #0]
   1d640:	b01b      	add	sp, #108	; 0x6c
   1d642:	f85d fb04 	ldr.w	pc, [sp], #4
   1d646:	bf00      	nop
   1d648:	ffff0208 	.word	0xffff0208

0001d64c <vsiprintf>:
   1d64c:	4613      	mov	r3, r2
   1d64e:	460a      	mov	r2, r1
   1d650:	4601      	mov	r1, r0
   1d652:	4802      	ldr	r0, [pc, #8]	; (1d65c <vsiprintf+0x10>)
   1d654:	6800      	ldr	r0, [r0, #0]
   1d656:	f7ff bfe3 	b.w	1d620 <_vsiprintf_r>
   1d65a:	bf00      	nop
   1d65c:	2001459c 	.word	0x2001459c

0001d660 <_localeconv_r>:
   1d660:	4800      	ldr	r0, [pc, #0]	; (1d664 <_localeconv_r+0x4>)
   1d662:	4770      	bx	lr
   1d664:	200146f0 	.word	0x200146f0

0001d668 <__pow5mult>:
   1d668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d66c:	4615      	mov	r5, r2
   1d66e:	f012 0203 	ands.w	r2, r2, #3
   1d672:	4606      	mov	r6, r0
   1d674:	460f      	mov	r7, r1
   1d676:	d007      	beq.n	1d688 <__pow5mult+0x20>
   1d678:	3a01      	subs	r2, #1
   1d67a:	4c21      	ldr	r4, [pc, #132]	; (1d700 <__pow5mult+0x98>)
   1d67c:	2300      	movs	r3, #0
   1d67e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   1d682:	f005 ff7b 	bl	2357c <__multadd>
   1d686:	4607      	mov	r7, r0
   1d688:	10ad      	asrs	r5, r5, #2
   1d68a:	d035      	beq.n	1d6f8 <__pow5mult+0x90>
   1d68c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   1d68e:	b93c      	cbnz	r4, 1d6a0 <__pow5mult+0x38>
   1d690:	2010      	movs	r0, #16
   1d692:	f7ff fa23 	bl	1cadc <malloc>
   1d696:	6270      	str	r0, [r6, #36]	; 0x24
   1d698:	6004      	str	r4, [r0, #0]
   1d69a:	60c4      	str	r4, [r0, #12]
   1d69c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   1d6a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   1d6a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   1d6a8:	b94c      	cbnz	r4, 1d6be <__pow5mult+0x56>
   1d6aa:	f240 2171 	movw	r1, #625	; 0x271
   1d6ae:	4630      	mov	r0, r6
   1d6b0:	f005 fff3 	bl	2369a <__i2b>
   1d6b4:	2300      	movs	r3, #0
   1d6b6:	4604      	mov	r4, r0
   1d6b8:	f8c8 0008 	str.w	r0, [r8, #8]
   1d6bc:	6003      	str	r3, [r0, #0]
   1d6be:	f04f 0900 	mov.w	r9, #0
   1d6c2:	07eb      	lsls	r3, r5, #31
   1d6c4:	d50a      	bpl.n	1d6dc <__pow5mult+0x74>
   1d6c6:	4639      	mov	r1, r7
   1d6c8:	4622      	mov	r2, r4
   1d6ca:	4630      	mov	r0, r6
   1d6cc:	f005 ffee 	bl	236ac <__multiply>
   1d6d0:	4680      	mov	r8, r0
   1d6d2:	4639      	mov	r1, r7
   1d6d4:	4630      	mov	r0, r6
   1d6d6:	4647      	mov	r7, r8
   1d6d8:	f005 ff39 	bl	2354e <_Bfree>
   1d6dc:	106d      	asrs	r5, r5, #1
   1d6de:	d00b      	beq.n	1d6f8 <__pow5mult+0x90>
   1d6e0:	6820      	ldr	r0, [r4, #0]
   1d6e2:	b938      	cbnz	r0, 1d6f4 <__pow5mult+0x8c>
   1d6e4:	4622      	mov	r2, r4
   1d6e6:	4621      	mov	r1, r4
   1d6e8:	4630      	mov	r0, r6
   1d6ea:	f005 ffdf 	bl	236ac <__multiply>
   1d6ee:	6020      	str	r0, [r4, #0]
   1d6f0:	f8c0 9000 	str.w	r9, [r0]
   1d6f4:	4604      	mov	r4, r0
   1d6f6:	e7e4      	b.n	1d6c2 <__pow5mult+0x5a>
   1d6f8:	4638      	mov	r0, r7
   1d6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d6fe:	bf00      	nop
   1d700:	00024b48 	.word	0x00024b48

0001d704 <_svfiprintf_r>:
   1d704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d708:	4698      	mov	r8, r3
   1d70a:	898b      	ldrh	r3, [r1, #12]
   1d70c:	b09d      	sub	sp, #116	; 0x74
   1d70e:	4607      	mov	r7, r0
   1d710:	061b      	lsls	r3, r3, #24
   1d712:	460d      	mov	r5, r1
   1d714:	4614      	mov	r4, r2
   1d716:	d50e      	bpl.n	1d736 <_svfiprintf_r+0x32>
   1d718:	690b      	ldr	r3, [r1, #16]
   1d71a:	b963      	cbnz	r3, 1d736 <_svfiprintf_r+0x32>
   1d71c:	2140      	movs	r1, #64	; 0x40
   1d71e:	f7ff fa3d 	bl	1cb9c <_malloc_r>
   1d722:	6028      	str	r0, [r5, #0]
   1d724:	6128      	str	r0, [r5, #16]
   1d726:	b920      	cbnz	r0, 1d732 <_svfiprintf_r+0x2e>
   1d728:	230c      	movs	r3, #12
   1d72a:	603b      	str	r3, [r7, #0]
   1d72c:	f04f 30ff 	mov.w	r0, #4294967295
   1d730:	e0d1      	b.n	1d8d6 <_svfiprintf_r+0x1d2>
   1d732:	2340      	movs	r3, #64	; 0x40
   1d734:	616b      	str	r3, [r5, #20]
   1d736:	2300      	movs	r3, #0
   1d738:	f8cd 800c 	str.w	r8, [sp, #12]
   1d73c:	f04f 0901 	mov.w	r9, #1
   1d740:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 1d8f0 <_svfiprintf_r+0x1ec>
   1d744:	9309      	str	r3, [sp, #36]	; 0x24
   1d746:	2320      	movs	r3, #32
   1d748:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   1d74c:	2330      	movs	r3, #48	; 0x30
   1d74e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   1d752:	4623      	mov	r3, r4
   1d754:	469a      	mov	sl, r3
   1d756:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d75a:	b10a      	cbz	r2, 1d760 <_svfiprintf_r+0x5c>
   1d75c:	2a25      	cmp	r2, #37	; 0x25
   1d75e:	d1f9      	bne.n	1d754 <_svfiprintf_r+0x50>
   1d760:	ebba 0b04 	subs.w	fp, sl, r4
   1d764:	d00b      	beq.n	1d77e <_svfiprintf_r+0x7a>
   1d766:	465b      	mov	r3, fp
   1d768:	4622      	mov	r2, r4
   1d76a:	4629      	mov	r1, r5
   1d76c:	4638      	mov	r0, r7
   1d76e:	f006 f9b5 	bl	23adc <__ssputs_r>
   1d772:	3001      	adds	r0, #1
   1d774:	f000 80aa 	beq.w	1d8cc <_svfiprintf_r+0x1c8>
   1d778:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1d77a:	445a      	add	r2, fp
   1d77c:	9209      	str	r2, [sp, #36]	; 0x24
   1d77e:	f89a 3000 	ldrb.w	r3, [sl]
   1d782:	2b00      	cmp	r3, #0
   1d784:	f000 80a2 	beq.w	1d8cc <_svfiprintf_r+0x1c8>
   1d788:	2300      	movs	r3, #0
   1d78a:	f04f 32ff 	mov.w	r2, #4294967295
   1d78e:	f10a 0a01 	add.w	sl, sl, #1
   1d792:	9304      	str	r3, [sp, #16]
   1d794:	9307      	str	r3, [sp, #28]
   1d796:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   1d79a:	931a      	str	r3, [sp, #104]	; 0x68
   1d79c:	e9cd 2305 	strd	r2, r3, [sp, #20]
   1d7a0:	4654      	mov	r4, sl
   1d7a2:	2205      	movs	r2, #5
   1d7a4:	4852      	ldr	r0, [pc, #328]	; (1d8f0 <_svfiprintf_r+0x1ec>)
   1d7a6:	f814 1b01 	ldrb.w	r1, [r4], #1
   1d7aa:	f005 fbc8 	bl	22f3e <memchr>
   1d7ae:	9a04      	ldr	r2, [sp, #16]
   1d7b0:	b9d8      	cbnz	r0, 1d7ea <_svfiprintf_r+0xe6>
   1d7b2:	06d0      	lsls	r0, r2, #27
   1d7b4:	bf44      	itt	mi
   1d7b6:	2320      	movmi	r3, #32
   1d7b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1d7bc:	0711      	lsls	r1, r2, #28
   1d7be:	bf44      	itt	mi
   1d7c0:	232b      	movmi	r3, #43	; 0x2b
   1d7c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   1d7c6:	f89a 3000 	ldrb.w	r3, [sl]
   1d7ca:	2b2a      	cmp	r3, #42	; 0x2a
   1d7cc:	d015      	beq.n	1d7fa <_svfiprintf_r+0xf6>
   1d7ce:	9a07      	ldr	r2, [sp, #28]
   1d7d0:	4654      	mov	r4, sl
   1d7d2:	2000      	movs	r0, #0
   1d7d4:	f04f 0c0a 	mov.w	ip, #10
   1d7d8:	4621      	mov	r1, r4
   1d7da:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d7de:	3b30      	subs	r3, #48	; 0x30
   1d7e0:	2b09      	cmp	r3, #9
   1d7e2:	d94e      	bls.n	1d882 <_svfiprintf_r+0x17e>
   1d7e4:	b1b0      	cbz	r0, 1d814 <_svfiprintf_r+0x110>
   1d7e6:	9207      	str	r2, [sp, #28]
   1d7e8:	e014      	b.n	1d814 <_svfiprintf_r+0x110>
   1d7ea:	eba0 0308 	sub.w	r3, r0, r8
   1d7ee:	46a2      	mov	sl, r4
   1d7f0:	fa09 f303 	lsl.w	r3, r9, r3
   1d7f4:	4313      	orrs	r3, r2
   1d7f6:	9304      	str	r3, [sp, #16]
   1d7f8:	e7d2      	b.n	1d7a0 <_svfiprintf_r+0x9c>
   1d7fa:	9b03      	ldr	r3, [sp, #12]
   1d7fc:	1d19      	adds	r1, r3, #4
   1d7fe:	681b      	ldr	r3, [r3, #0]
   1d800:	2b00      	cmp	r3, #0
   1d802:	9103      	str	r1, [sp, #12]
   1d804:	bfbb      	ittet	lt
   1d806:	425b      	neglt	r3, r3
   1d808:	f042 0202 	orrlt.w	r2, r2, #2
   1d80c:	9307      	strge	r3, [sp, #28]
   1d80e:	9307      	strlt	r3, [sp, #28]
   1d810:	bfb8      	it	lt
   1d812:	9204      	strlt	r2, [sp, #16]
   1d814:	7823      	ldrb	r3, [r4, #0]
   1d816:	2b2e      	cmp	r3, #46	; 0x2e
   1d818:	d10c      	bne.n	1d834 <_svfiprintf_r+0x130>
   1d81a:	7863      	ldrb	r3, [r4, #1]
   1d81c:	2b2a      	cmp	r3, #42	; 0x2a
   1d81e:	d135      	bne.n	1d88c <_svfiprintf_r+0x188>
   1d820:	9b03      	ldr	r3, [sp, #12]
   1d822:	3402      	adds	r4, #2
   1d824:	1d1a      	adds	r2, r3, #4
   1d826:	681b      	ldr	r3, [r3, #0]
   1d828:	2b00      	cmp	r3, #0
   1d82a:	9203      	str	r2, [sp, #12]
   1d82c:	bfb8      	it	lt
   1d82e:	f04f 33ff 	movlt.w	r3, #4294967295
   1d832:	9305      	str	r3, [sp, #20]
   1d834:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1d900 <_svfiprintf_r+0x1fc>
   1d838:	2203      	movs	r2, #3
   1d83a:	7821      	ldrb	r1, [r4, #0]
   1d83c:	4650      	mov	r0, sl
   1d83e:	f005 fb7e 	bl	22f3e <memchr>
   1d842:	b140      	cbz	r0, 1d856 <_svfiprintf_r+0x152>
   1d844:	2340      	movs	r3, #64	; 0x40
   1d846:	eba0 000a 	sub.w	r0, r0, sl
   1d84a:	3401      	adds	r4, #1
   1d84c:	fa03 f000 	lsl.w	r0, r3, r0
   1d850:	9b04      	ldr	r3, [sp, #16]
   1d852:	4303      	orrs	r3, r0
   1d854:	9304      	str	r3, [sp, #16]
   1d856:	f814 1b01 	ldrb.w	r1, [r4], #1
   1d85a:	2206      	movs	r2, #6
   1d85c:	4825      	ldr	r0, [pc, #148]	; (1d8f4 <_svfiprintf_r+0x1f0>)
   1d85e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1d862:	f005 fb6c 	bl	22f3e <memchr>
   1d866:	2800      	cmp	r0, #0
   1d868:	d038      	beq.n	1d8dc <_svfiprintf_r+0x1d8>
   1d86a:	4b23      	ldr	r3, [pc, #140]	; (1d8f8 <_svfiprintf_r+0x1f4>)
   1d86c:	bb1b      	cbnz	r3, 1d8b6 <_svfiprintf_r+0x1b2>
   1d86e:	9b03      	ldr	r3, [sp, #12]
   1d870:	3307      	adds	r3, #7
   1d872:	f023 0307 	bic.w	r3, r3, #7
   1d876:	3308      	adds	r3, #8
   1d878:	9303      	str	r3, [sp, #12]
   1d87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d87c:	4433      	add	r3, r6
   1d87e:	9309      	str	r3, [sp, #36]	; 0x24
   1d880:	e767      	b.n	1d752 <_svfiprintf_r+0x4e>
   1d882:	fb0c 3202 	mla	r2, ip, r2, r3
   1d886:	460c      	mov	r4, r1
   1d888:	2001      	movs	r0, #1
   1d88a:	e7a5      	b.n	1d7d8 <_svfiprintf_r+0xd4>
   1d88c:	2300      	movs	r3, #0
   1d88e:	3401      	adds	r4, #1
   1d890:	f04f 0c0a 	mov.w	ip, #10
   1d894:	4619      	mov	r1, r3
   1d896:	9305      	str	r3, [sp, #20]
   1d898:	4620      	mov	r0, r4
   1d89a:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d89e:	3a30      	subs	r2, #48	; 0x30
   1d8a0:	2a09      	cmp	r2, #9
   1d8a2:	d903      	bls.n	1d8ac <_svfiprintf_r+0x1a8>
   1d8a4:	2b00      	cmp	r3, #0
   1d8a6:	d0c5      	beq.n	1d834 <_svfiprintf_r+0x130>
   1d8a8:	9105      	str	r1, [sp, #20]
   1d8aa:	e7c3      	b.n	1d834 <_svfiprintf_r+0x130>
   1d8ac:	fb0c 2101 	mla	r1, ip, r1, r2
   1d8b0:	4604      	mov	r4, r0
   1d8b2:	2301      	movs	r3, #1
   1d8b4:	e7f0      	b.n	1d898 <_svfiprintf_r+0x194>
   1d8b6:	ab03      	add	r3, sp, #12
   1d8b8:	462a      	mov	r2, r5
   1d8ba:	a904      	add	r1, sp, #16
   1d8bc:	4638      	mov	r0, r7
   1d8be:	9300      	str	r3, [sp, #0]
   1d8c0:	4b0e      	ldr	r3, [pc, #56]	; (1d8fc <_svfiprintf_r+0x1f8>)
   1d8c2:	f7ff f9c5 	bl	1cc50 <_printf_float>
   1d8c6:	1c42      	adds	r2, r0, #1
   1d8c8:	4606      	mov	r6, r0
   1d8ca:	d1d6      	bne.n	1d87a <_svfiprintf_r+0x176>
   1d8cc:	89ab      	ldrh	r3, [r5, #12]
   1d8ce:	065b      	lsls	r3, r3, #25
   1d8d0:	f53f af2c 	bmi.w	1d72c <_svfiprintf_r+0x28>
   1d8d4:	9809      	ldr	r0, [sp, #36]	; 0x24
   1d8d6:	b01d      	add	sp, #116	; 0x74
   1d8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d8dc:	ab03      	add	r3, sp, #12
   1d8de:	462a      	mov	r2, r5
   1d8e0:	a904      	add	r1, sp, #16
   1d8e2:	4638      	mov	r0, r7
   1d8e4:	9300      	str	r3, [sp, #0]
   1d8e6:	4b05      	ldr	r3, [pc, #20]	; (1d8fc <_svfiprintf_r+0x1f8>)
   1d8e8:	f7ff fbe8 	bl	1d0bc <_printf_i>
   1d8ec:	e7eb      	b.n	1d8c6 <_svfiprintf_r+0x1c2>
   1d8ee:	bf00      	nop
   1d8f0:	00024e5a 	.word	0x00024e5a
   1d8f4:	00024e64 	.word	0x00024e64
   1d8f8:	0001cc51 	.word	0x0001cc51
   1d8fc:	00023add 	.word	0x00023add
   1d900:	00024e60 	.word	0x00024e60

0001d904 <__ssvfiscanf_r>:
   1d904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d908:	460c      	mov	r4, r1
   1d90a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   1d90e:	2100      	movs	r1, #0
   1d910:	4606      	mov	r6, r0
   1d912:	f10d 0804 	add.w	r8, sp, #4
   1d916:	4fb4      	ldr	r7, [pc, #720]	; (1dbe8 <__ssvfiscanf_r+0x2e4>)
   1d918:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 1dbf4 <__ssvfiscanf_r+0x2f0>
   1d91c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   1d920:	9300      	str	r3, [sp, #0]
   1d922:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   1d926:	49b1      	ldr	r1, [pc, #708]	; (1dbec <__ssvfiscanf_r+0x2e8>)
   1d928:	91a0      	str	r1, [sp, #640]	; 0x280
   1d92a:	49b1      	ldr	r1, [pc, #708]	; (1dbf0 <__ssvfiscanf_r+0x2ec>)
   1d92c:	91a1      	str	r1, [sp, #644]	; 0x284
   1d92e:	f892 a000 	ldrb.w	sl, [r2]
   1d932:	f1ba 0f00 	cmp.w	sl, #0
   1d936:	f000 8154 	beq.w	1dbe2 <__ssvfiscanf_r+0x2de>
   1d93a:	f81a 3007 	ldrb.w	r3, [sl, r7]
   1d93e:	1c55      	adds	r5, r2, #1
   1d940:	f013 0308 	ands.w	r3, r3, #8
   1d944:	d019      	beq.n	1d97a <__ssvfiscanf_r+0x76>
   1d946:	6863      	ldr	r3, [r4, #4]
   1d948:	2b00      	cmp	r3, #0
   1d94a:	dd0f      	ble.n	1d96c <__ssvfiscanf_r+0x68>
   1d94c:	6823      	ldr	r3, [r4, #0]
   1d94e:	781a      	ldrb	r2, [r3, #0]
   1d950:	5cba      	ldrb	r2, [r7, r2]
   1d952:	0712      	lsls	r2, r2, #28
   1d954:	d401      	bmi.n	1d95a <__ssvfiscanf_r+0x56>
   1d956:	462a      	mov	r2, r5
   1d958:	e7e9      	b.n	1d92e <__ssvfiscanf_r+0x2a>
   1d95a:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1d95c:	3301      	adds	r3, #1
   1d95e:	3201      	adds	r2, #1
   1d960:	6023      	str	r3, [r4, #0]
   1d962:	9245      	str	r2, [sp, #276]	; 0x114
   1d964:	6862      	ldr	r2, [r4, #4]
   1d966:	3a01      	subs	r2, #1
   1d968:	6062      	str	r2, [r4, #4]
   1d96a:	e7ec      	b.n	1d946 <__ssvfiscanf_r+0x42>
   1d96c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1d96e:	4621      	mov	r1, r4
   1d970:	4630      	mov	r0, r6
   1d972:	4798      	blx	r3
   1d974:	2800      	cmp	r0, #0
   1d976:	d0e9      	beq.n	1d94c <__ssvfiscanf_r+0x48>
   1d978:	e7ed      	b.n	1d956 <__ssvfiscanf_r+0x52>
   1d97a:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   1d97e:	f040 8086 	bne.w	1da8e <__ssvfiscanf_r+0x18a>
   1d982:	9341      	str	r3, [sp, #260]	; 0x104
   1d984:	9343      	str	r3, [sp, #268]	; 0x10c
   1d986:	7853      	ldrb	r3, [r2, #1]
   1d988:	2b2a      	cmp	r3, #42	; 0x2a
   1d98a:	bf04      	itt	eq
   1d98c:	2310      	moveq	r3, #16
   1d98e:	1c95      	addeq	r5, r2, #2
   1d990:	f04f 020a 	mov.w	r2, #10
   1d994:	bf08      	it	eq
   1d996:	9341      	streq	r3, [sp, #260]	; 0x104
   1d998:	46ab      	mov	fp, r5
   1d99a:	f81b 1b01 	ldrb.w	r1, [fp], #1
   1d99e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1d9a2:	2b09      	cmp	r3, #9
   1d9a4:	d91d      	bls.n	1d9e2 <__ssvfiscanf_r+0xde>
   1d9a6:	2203      	movs	r2, #3
   1d9a8:	4892      	ldr	r0, [pc, #584]	; (1dbf4 <__ssvfiscanf_r+0x2f0>)
   1d9aa:	f005 fac8 	bl	22f3e <memchr>
   1d9ae:	b140      	cbz	r0, 1d9c2 <__ssvfiscanf_r+0xbe>
   1d9b0:	2301      	movs	r3, #1
   1d9b2:	eba0 0009 	sub.w	r0, r0, r9
   1d9b6:	465d      	mov	r5, fp
   1d9b8:	fa03 f000 	lsl.w	r0, r3, r0
   1d9bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1d9be:	4318      	orrs	r0, r3
   1d9c0:	9041      	str	r0, [sp, #260]	; 0x104
   1d9c2:	f815 3b01 	ldrb.w	r3, [r5], #1
   1d9c6:	2b78      	cmp	r3, #120	; 0x78
   1d9c8:	d806      	bhi.n	1d9d8 <__ssvfiscanf_r+0xd4>
   1d9ca:	2b57      	cmp	r3, #87	; 0x57
   1d9cc:	d810      	bhi.n	1d9f0 <__ssvfiscanf_r+0xec>
   1d9ce:	2b25      	cmp	r3, #37	; 0x25
   1d9d0:	d05d      	beq.n	1da8e <__ssvfiscanf_r+0x18a>
   1d9d2:	d857      	bhi.n	1da84 <__ssvfiscanf_r+0x180>
   1d9d4:	2b00      	cmp	r3, #0
   1d9d6:	d075      	beq.n	1dac4 <__ssvfiscanf_r+0x1c0>
   1d9d8:	2303      	movs	r3, #3
   1d9da:	9347      	str	r3, [sp, #284]	; 0x11c
   1d9dc:	230a      	movs	r3, #10
   1d9de:	9342      	str	r3, [sp, #264]	; 0x108
   1d9e0:	e082      	b.n	1dae8 <__ssvfiscanf_r+0x1e4>
   1d9e2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   1d9e4:	465d      	mov	r5, fp
   1d9e6:	fb02 1303 	mla	r3, r2, r3, r1
   1d9ea:	3b30      	subs	r3, #48	; 0x30
   1d9ec:	9343      	str	r3, [sp, #268]	; 0x10c
   1d9ee:	e7d3      	b.n	1d998 <__ssvfiscanf_r+0x94>
   1d9f0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   1d9f4:	2a20      	cmp	r2, #32
   1d9f6:	d8ef      	bhi.n	1d9d8 <__ssvfiscanf_r+0xd4>
   1d9f8:	a101      	add	r1, pc, #4	; (adr r1, 1da00 <__ssvfiscanf_r+0xfc>)
   1d9fa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   1d9fe:	bf00      	nop
   1da00:	0001dad3 	.word	0x0001dad3
   1da04:	0001d9d9 	.word	0x0001d9d9
   1da08:	0001d9d9 	.word	0x0001d9d9
   1da0c:	0001db31 	.word	0x0001db31
   1da10:	0001d9d9 	.word	0x0001d9d9
   1da14:	0001d9d9 	.word	0x0001d9d9
   1da18:	0001d9d9 	.word	0x0001d9d9
   1da1c:	0001d9d9 	.word	0x0001d9d9
   1da20:	0001d9d9 	.word	0x0001d9d9
   1da24:	0001d9d9 	.word	0x0001d9d9
   1da28:	0001d9d9 	.word	0x0001d9d9
   1da2c:	0001db47 	.word	0x0001db47
   1da30:	0001db1d 	.word	0x0001db1d
   1da34:	0001da8b 	.word	0x0001da8b
   1da38:	0001da8b 	.word	0x0001da8b
   1da3c:	0001da8b 	.word	0x0001da8b
   1da40:	0001d9d9 	.word	0x0001d9d9
   1da44:	0001db21 	.word	0x0001db21
   1da48:	0001d9d9 	.word	0x0001d9d9
   1da4c:	0001d9d9 	.word	0x0001d9d9
   1da50:	0001d9d9 	.word	0x0001d9d9
   1da54:	0001d9d9 	.word	0x0001d9d9
   1da58:	0001db57 	.word	0x0001db57
   1da5c:	0001db29 	.word	0x0001db29
   1da60:	0001dacb 	.word	0x0001dacb
   1da64:	0001d9d9 	.word	0x0001d9d9
   1da68:	0001d9d9 	.word	0x0001d9d9
   1da6c:	0001db53 	.word	0x0001db53
   1da70:	0001d9d9 	.word	0x0001d9d9
   1da74:	0001db1d 	.word	0x0001db1d
   1da78:	0001d9d9 	.word	0x0001d9d9
   1da7c:	0001d9d9 	.word	0x0001d9d9
   1da80:	0001dad3 	.word	0x0001dad3
   1da84:	3b45      	subs	r3, #69	; 0x45
   1da86:	2b02      	cmp	r3, #2
   1da88:	d8a6      	bhi.n	1d9d8 <__ssvfiscanf_r+0xd4>
   1da8a:	2305      	movs	r3, #5
   1da8c:	e02b      	b.n	1dae6 <__ssvfiscanf_r+0x1e2>
   1da8e:	6863      	ldr	r3, [r4, #4]
   1da90:	2b00      	cmp	r3, #0
   1da92:	dd0d      	ble.n	1dab0 <__ssvfiscanf_r+0x1ac>
   1da94:	6823      	ldr	r3, [r4, #0]
   1da96:	781a      	ldrb	r2, [r3, #0]
   1da98:	4552      	cmp	r2, sl
   1da9a:	f040 80a2 	bne.w	1dbe2 <__ssvfiscanf_r+0x2de>
   1da9e:	3301      	adds	r3, #1
   1daa0:	6862      	ldr	r2, [r4, #4]
   1daa2:	6023      	str	r3, [r4, #0]
   1daa4:	3a01      	subs	r2, #1
   1daa6:	9b45      	ldr	r3, [sp, #276]	; 0x114
   1daa8:	6062      	str	r2, [r4, #4]
   1daaa:	3301      	adds	r3, #1
   1daac:	9345      	str	r3, [sp, #276]	; 0x114
   1daae:	e752      	b.n	1d956 <__ssvfiscanf_r+0x52>
   1dab0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1dab2:	4621      	mov	r1, r4
   1dab4:	4630      	mov	r0, r6
   1dab6:	4798      	blx	r3
   1dab8:	2800      	cmp	r0, #0
   1daba:	d0eb      	beq.n	1da94 <__ssvfiscanf_r+0x190>
   1dabc:	9844      	ldr	r0, [sp, #272]	; 0x110
   1dabe:	2800      	cmp	r0, #0
   1dac0:	f040 8085 	bne.w	1dbce <__ssvfiscanf_r+0x2ca>
   1dac4:	f04f 30ff 	mov.w	r0, #4294967295
   1dac8:	e087      	b.n	1dbda <__ssvfiscanf_r+0x2d6>
   1daca:	9a41      	ldr	r2, [sp, #260]	; 0x104
   1dacc:	f042 0220 	orr.w	r2, r2, #32
   1dad0:	9241      	str	r2, [sp, #260]	; 0x104
   1dad2:	9a41      	ldr	r2, [sp, #260]	; 0x104
   1dad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   1dad8:	9241      	str	r2, [sp, #260]	; 0x104
   1dada:	2210      	movs	r2, #16
   1dadc:	2b6f      	cmp	r3, #111	; 0x6f
   1dade:	9242      	str	r2, [sp, #264]	; 0x108
   1dae0:	bf34      	ite	cc
   1dae2:	2303      	movcc	r3, #3
   1dae4:	2304      	movcs	r3, #4
   1dae6:	9347      	str	r3, [sp, #284]	; 0x11c
   1dae8:	6863      	ldr	r3, [r4, #4]
   1daea:	2b00      	cmp	r3, #0
   1daec:	dd42      	ble.n	1db74 <__ssvfiscanf_r+0x270>
   1daee:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1daf0:	0659      	lsls	r1, r3, #25
   1daf2:	d404      	bmi.n	1dafe <__ssvfiscanf_r+0x1fa>
   1daf4:	6823      	ldr	r3, [r4, #0]
   1daf6:	781a      	ldrb	r2, [r3, #0]
   1daf8:	5cba      	ldrb	r2, [r7, r2]
   1dafa:	0712      	lsls	r2, r2, #28
   1dafc:	d441      	bmi.n	1db82 <__ssvfiscanf_r+0x27e>
   1dafe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   1db00:	2b02      	cmp	r3, #2
   1db02:	dc50      	bgt.n	1dba6 <__ssvfiscanf_r+0x2a2>
   1db04:	466b      	mov	r3, sp
   1db06:	4622      	mov	r2, r4
   1db08:	a941      	add	r1, sp, #260	; 0x104
   1db0a:	4630      	mov	r0, r6
   1db0c:	f000 f876 	bl	1dbfc <_scanf_chars>
   1db10:	2801      	cmp	r0, #1
   1db12:	d066      	beq.n	1dbe2 <__ssvfiscanf_r+0x2de>
   1db14:	2802      	cmp	r0, #2
   1db16:	f47f af1e 	bne.w	1d956 <__ssvfiscanf_r+0x52>
   1db1a:	e7cf      	b.n	1dabc <__ssvfiscanf_r+0x1b8>
   1db1c:	220a      	movs	r2, #10
   1db1e:	e7dd      	b.n	1dadc <__ssvfiscanf_r+0x1d8>
   1db20:	2300      	movs	r3, #0
   1db22:	9342      	str	r3, [sp, #264]	; 0x108
   1db24:	2303      	movs	r3, #3
   1db26:	e7de      	b.n	1dae6 <__ssvfiscanf_r+0x1e2>
   1db28:	2308      	movs	r3, #8
   1db2a:	9342      	str	r3, [sp, #264]	; 0x108
   1db2c:	2304      	movs	r3, #4
   1db2e:	e7da      	b.n	1dae6 <__ssvfiscanf_r+0x1e2>
   1db30:	4629      	mov	r1, r5
   1db32:	4640      	mov	r0, r8
   1db34:	f006 f887 	bl	23c46 <__sccl>
   1db38:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1db3a:	4605      	mov	r5, r0
   1db3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1db40:	9341      	str	r3, [sp, #260]	; 0x104
   1db42:	2301      	movs	r3, #1
   1db44:	e7cf      	b.n	1dae6 <__ssvfiscanf_r+0x1e2>
   1db46:	9b41      	ldr	r3, [sp, #260]	; 0x104
   1db48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1db4c:	9341      	str	r3, [sp, #260]	; 0x104
   1db4e:	2300      	movs	r3, #0
   1db50:	e7c9      	b.n	1dae6 <__ssvfiscanf_r+0x1e2>
   1db52:	2302      	movs	r3, #2
   1db54:	e7c7      	b.n	1dae6 <__ssvfiscanf_r+0x1e2>
   1db56:	9841      	ldr	r0, [sp, #260]	; 0x104
   1db58:	06c3      	lsls	r3, r0, #27
   1db5a:	f53f aefc 	bmi.w	1d956 <__ssvfiscanf_r+0x52>
   1db5e:	9b00      	ldr	r3, [sp, #0]
   1db60:	07c0      	lsls	r0, r0, #31
   1db62:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1db64:	f103 0104 	add.w	r1, r3, #4
   1db68:	9100      	str	r1, [sp, #0]
   1db6a:	681b      	ldr	r3, [r3, #0]
   1db6c:	bf4c      	ite	mi
   1db6e:	801a      	strhmi	r2, [r3, #0]
   1db70:	601a      	strpl	r2, [r3, #0]
   1db72:	e6f0      	b.n	1d956 <__ssvfiscanf_r+0x52>
   1db74:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1db76:	4621      	mov	r1, r4
   1db78:	4630      	mov	r0, r6
   1db7a:	4798      	blx	r3
   1db7c:	2800      	cmp	r0, #0
   1db7e:	d0b6      	beq.n	1daee <__ssvfiscanf_r+0x1ea>
   1db80:	e79c      	b.n	1dabc <__ssvfiscanf_r+0x1b8>
   1db82:	9a45      	ldr	r2, [sp, #276]	; 0x114
   1db84:	3201      	adds	r2, #1
   1db86:	9245      	str	r2, [sp, #276]	; 0x114
   1db88:	6862      	ldr	r2, [r4, #4]
   1db8a:	3a01      	subs	r2, #1
   1db8c:	2a00      	cmp	r2, #0
   1db8e:	6062      	str	r2, [r4, #4]
   1db90:	dd02      	ble.n	1db98 <__ssvfiscanf_r+0x294>
   1db92:	3301      	adds	r3, #1
   1db94:	6023      	str	r3, [r4, #0]
   1db96:	e7ad      	b.n	1daf4 <__ssvfiscanf_r+0x1f0>
   1db98:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   1db9a:	4621      	mov	r1, r4
   1db9c:	4630      	mov	r0, r6
   1db9e:	4798      	blx	r3
   1dba0:	2800      	cmp	r0, #0
   1dba2:	d0a7      	beq.n	1daf4 <__ssvfiscanf_r+0x1f0>
   1dba4:	e78a      	b.n	1dabc <__ssvfiscanf_r+0x1b8>
   1dba6:	2b04      	cmp	r3, #4
   1dba8:	dc06      	bgt.n	1dbb8 <__ssvfiscanf_r+0x2b4>
   1dbaa:	466b      	mov	r3, sp
   1dbac:	4622      	mov	r2, r4
   1dbae:	a941      	add	r1, sp, #260	; 0x104
   1dbb0:	4630      	mov	r0, r6
   1dbb2:	f000 f87b 	bl	1dcac <_scanf_i>
   1dbb6:	e7ab      	b.n	1db10 <__ssvfiscanf_r+0x20c>
   1dbb8:	4b0f      	ldr	r3, [pc, #60]	; (1dbf8 <__ssvfiscanf_r+0x2f4>)
   1dbba:	2b00      	cmp	r3, #0
   1dbbc:	f43f aecb 	beq.w	1d956 <__ssvfiscanf_r+0x52>
   1dbc0:	466b      	mov	r3, sp
   1dbc2:	4622      	mov	r2, r4
   1dbc4:	a941      	add	r1, sp, #260	; 0x104
   1dbc6:	4630      	mov	r0, r6
   1dbc8:	e000      	b.n	1dbcc <__ssvfiscanf_r+0x2c8>
   1dbca:	bf00      	nop
   1dbcc:	e7a0      	b.n	1db10 <__ssvfiscanf_r+0x20c>
   1dbce:	89a3      	ldrh	r3, [r4, #12]
   1dbd0:	f013 0f40 	tst.w	r3, #64	; 0x40
   1dbd4:	bf18      	it	ne
   1dbd6:	f04f 30ff 	movne.w	r0, #4294967295
   1dbda:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   1dbde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dbe2:	9844      	ldr	r0, [sp, #272]	; 0x110
   1dbe4:	e7f9      	b.n	1dbda <__ssvfiscanf_r+0x2d6>
   1dbe6:	bf00      	nop
   1dbe8:	00024d11 	.word	0x00024d11
   1dbec:	00023b93 	.word	0x00023b93
   1dbf0:	00023c0d 	.word	0x00023c0d
   1dbf4:	00024e60 	.word	0x00024e60
   1dbf8:	00000000 	.word	0x00000000

0001dbfc <_scanf_chars>:
   1dbfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1dc00:	4615      	mov	r5, r2
   1dc02:	688a      	ldr	r2, [r1, #8]
   1dc04:	4680      	mov	r8, r0
   1dc06:	460c      	mov	r4, r1
   1dc08:	b932      	cbnz	r2, 1dc18 <_scanf_chars+0x1c>
   1dc0a:	698a      	ldr	r2, [r1, #24]
   1dc0c:	2a00      	cmp	r2, #0
   1dc0e:	bf0c      	ite	eq
   1dc10:	2201      	moveq	r2, #1
   1dc12:	f04f 32ff 	movne.w	r2, #4294967295
   1dc16:	608a      	str	r2, [r1, #8]
   1dc18:	6822      	ldr	r2, [r4, #0]
   1dc1a:	2700      	movs	r7, #0
   1dc1c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1dca8 <_scanf_chars+0xac>
   1dc20:	06d1      	lsls	r1, r2, #27
   1dc22:	bf5f      	itttt	pl
   1dc24:	681a      	ldrpl	r2, [r3, #0]
   1dc26:	1d11      	addpl	r1, r2, #4
   1dc28:	6019      	strpl	r1, [r3, #0]
   1dc2a:	6816      	ldrpl	r6, [r2, #0]
   1dc2c:	69a0      	ldr	r0, [r4, #24]
   1dc2e:	b188      	cbz	r0, 1dc54 <_scanf_chars+0x58>
   1dc30:	2801      	cmp	r0, #1
   1dc32:	d107      	bne.n	1dc44 <_scanf_chars+0x48>
   1dc34:	682b      	ldr	r3, [r5, #0]
   1dc36:	781a      	ldrb	r2, [r3, #0]
   1dc38:	6963      	ldr	r3, [r4, #20]
   1dc3a:	5c9b      	ldrb	r3, [r3, r2]
   1dc3c:	b953      	cbnz	r3, 1dc54 <_scanf_chars+0x58>
   1dc3e:	bb27      	cbnz	r7, 1dc8a <_scanf_chars+0x8e>
   1dc40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1dc44:	2802      	cmp	r0, #2
   1dc46:	d120      	bne.n	1dc8a <_scanf_chars+0x8e>
   1dc48:	682b      	ldr	r3, [r5, #0]
   1dc4a:	781b      	ldrb	r3, [r3, #0]
   1dc4c:	f813 3009 	ldrb.w	r3, [r3, r9]
   1dc50:	071b      	lsls	r3, r3, #28
   1dc52:	d41a      	bmi.n	1dc8a <_scanf_chars+0x8e>
   1dc54:	6823      	ldr	r3, [r4, #0]
   1dc56:	3701      	adds	r7, #1
   1dc58:	06da      	lsls	r2, r3, #27
   1dc5a:	bf5e      	ittt	pl
   1dc5c:	682b      	ldrpl	r3, [r5, #0]
   1dc5e:	781b      	ldrbpl	r3, [r3, #0]
   1dc60:	f806 3b01 	strbpl.w	r3, [r6], #1
   1dc64:	682a      	ldr	r2, [r5, #0]
   1dc66:	686b      	ldr	r3, [r5, #4]
   1dc68:	3201      	adds	r2, #1
   1dc6a:	3b01      	subs	r3, #1
   1dc6c:	602a      	str	r2, [r5, #0]
   1dc6e:	68a2      	ldr	r2, [r4, #8]
   1dc70:	606b      	str	r3, [r5, #4]
   1dc72:	3a01      	subs	r2, #1
   1dc74:	60a2      	str	r2, [r4, #8]
   1dc76:	b142      	cbz	r2, 1dc8a <_scanf_chars+0x8e>
   1dc78:	2b00      	cmp	r3, #0
   1dc7a:	dcd7      	bgt.n	1dc2c <_scanf_chars+0x30>
   1dc7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   1dc80:	4629      	mov	r1, r5
   1dc82:	4640      	mov	r0, r8
   1dc84:	4798      	blx	r3
   1dc86:	2800      	cmp	r0, #0
   1dc88:	d0d0      	beq.n	1dc2c <_scanf_chars+0x30>
   1dc8a:	6823      	ldr	r3, [r4, #0]
   1dc8c:	f013 0310 	ands.w	r3, r3, #16
   1dc90:	d105      	bne.n	1dc9e <_scanf_chars+0xa2>
   1dc92:	68e2      	ldr	r2, [r4, #12]
   1dc94:	3201      	adds	r2, #1
   1dc96:	60e2      	str	r2, [r4, #12]
   1dc98:	69a2      	ldr	r2, [r4, #24]
   1dc9a:	b102      	cbz	r2, 1dc9e <_scanf_chars+0xa2>
   1dc9c:	7033      	strb	r3, [r6, #0]
   1dc9e:	6923      	ldr	r3, [r4, #16]
   1dca0:	2000      	movs	r0, #0
   1dca2:	441f      	add	r7, r3
   1dca4:	6127      	str	r7, [r4, #16]
   1dca6:	e7cb      	b.n	1dc40 <_scanf_chars+0x44>
   1dca8:	00024d11 	.word	0x00024d11

0001dcac <_scanf_i>:
   1dcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dcb0:	4698      	mov	r8, r3
   1dcb2:	b087      	sub	sp, #28
   1dcb4:	4b72      	ldr	r3, [pc, #456]	; (1de80 <_scanf_i+0x1d4>)
   1dcb6:	460c      	mov	r4, r1
   1dcb8:	4682      	mov	sl, r0
   1dcba:	4616      	mov	r6, r2
   1dcbc:	4627      	mov	r7, r4
   1dcbe:	f04f 0b00 	mov.w	fp, #0
   1dcc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1dcc6:	ab03      	add	r3, sp, #12
   1dcc8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   1dccc:	4b6d      	ldr	r3, [pc, #436]	; (1de84 <_scanf_i+0x1d8>)
   1dcce:	69a1      	ldr	r1, [r4, #24]
   1dcd0:	4a6d      	ldr	r2, [pc, #436]	; (1de88 <_scanf_i+0x1dc>)
   1dcd2:	2903      	cmp	r1, #3
   1dcd4:	bf18      	it	ne
   1dcd6:	461a      	movne	r2, r3
   1dcd8:	68a3      	ldr	r3, [r4, #8]
   1dcda:	9201      	str	r2, [sp, #4]
   1dcdc:	1e5a      	subs	r2, r3, #1
   1dcde:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   1dce2:	bf89      	itett	hi
   1dce4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   1dce8:	f04f 0900 	movls.w	r9, #0
   1dcec:	eb03 0905 	addhi.w	r9, r3, r5
   1dcf0:	f240 135d 	movwhi	r3, #349	; 0x15d
   1dcf4:	bf88      	it	hi
   1dcf6:	60a3      	strhi	r3, [r4, #8]
   1dcf8:	f857 3b1c 	ldr.w	r3, [r7], #28
   1dcfc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   1dd00:	463d      	mov	r5, r7
   1dd02:	6023      	str	r3, [r4, #0]
   1dd04:	6831      	ldr	r1, [r6, #0]
   1dd06:	ab03      	add	r3, sp, #12
   1dd08:	2202      	movs	r2, #2
   1dd0a:	7809      	ldrb	r1, [r1, #0]
   1dd0c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   1dd10:	f005 f915 	bl	22f3e <memchr>
   1dd14:	b328      	cbz	r0, 1dd62 <_scanf_i+0xb6>
   1dd16:	f1bb 0f01 	cmp.w	fp, #1
   1dd1a:	d159      	bne.n	1ddd0 <_scanf_i+0x124>
   1dd1c:	6862      	ldr	r2, [r4, #4]
   1dd1e:	b92a      	cbnz	r2, 1dd2c <_scanf_i+0x80>
   1dd20:	6822      	ldr	r2, [r4, #0]
   1dd22:	2308      	movs	r3, #8
   1dd24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   1dd28:	6063      	str	r3, [r4, #4]
   1dd2a:	6022      	str	r2, [r4, #0]
   1dd2c:	6822      	ldr	r2, [r4, #0]
   1dd2e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   1dd32:	6022      	str	r2, [r4, #0]
   1dd34:	68a2      	ldr	r2, [r4, #8]
   1dd36:	1e51      	subs	r1, r2, #1
   1dd38:	60a1      	str	r1, [r4, #8]
   1dd3a:	b192      	cbz	r2, 1dd62 <_scanf_i+0xb6>
   1dd3c:	6832      	ldr	r2, [r6, #0]
   1dd3e:	1c51      	adds	r1, r2, #1
   1dd40:	6031      	str	r1, [r6, #0]
   1dd42:	7812      	ldrb	r2, [r2, #0]
   1dd44:	f805 2b01 	strb.w	r2, [r5], #1
   1dd48:	6872      	ldr	r2, [r6, #4]
   1dd4a:	3a01      	subs	r2, #1
   1dd4c:	2a00      	cmp	r2, #0
   1dd4e:	6072      	str	r2, [r6, #4]
   1dd50:	dc07      	bgt.n	1dd62 <_scanf_i+0xb6>
   1dd52:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   1dd56:	4631      	mov	r1, r6
   1dd58:	4650      	mov	r0, sl
   1dd5a:	4790      	blx	r2
   1dd5c:	2800      	cmp	r0, #0
   1dd5e:	f040 8085 	bne.w	1de6c <_scanf_i+0x1c0>
   1dd62:	f10b 0b01 	add.w	fp, fp, #1
   1dd66:	f1bb 0f03 	cmp.w	fp, #3
   1dd6a:	d1cb      	bne.n	1dd04 <_scanf_i+0x58>
   1dd6c:	6863      	ldr	r3, [r4, #4]
   1dd6e:	b90b      	cbnz	r3, 1dd74 <_scanf_i+0xc8>
   1dd70:	230a      	movs	r3, #10
   1dd72:	6063      	str	r3, [r4, #4]
   1dd74:	6863      	ldr	r3, [r4, #4]
   1dd76:	f04f 0b00 	mov.w	fp, #0
   1dd7a:	4944      	ldr	r1, [pc, #272]	; (1de8c <_scanf_i+0x1e0>)
   1dd7c:	6960      	ldr	r0, [r4, #20]
   1dd7e:	1ac9      	subs	r1, r1, r3
   1dd80:	f005 ff61 	bl	23c46 <__sccl>
   1dd84:	68a3      	ldr	r3, [r4, #8]
   1dd86:	6822      	ldr	r2, [r4, #0]
   1dd88:	2b00      	cmp	r3, #0
   1dd8a:	d03d      	beq.n	1de08 <_scanf_i+0x15c>
   1dd8c:	6831      	ldr	r1, [r6, #0]
   1dd8e:	6960      	ldr	r0, [r4, #20]
   1dd90:	f891 c000 	ldrb.w	ip, [r1]
   1dd94:	f810 000c 	ldrb.w	r0, [r0, ip]
   1dd98:	2800      	cmp	r0, #0
   1dd9a:	d035      	beq.n	1de08 <_scanf_i+0x15c>
   1dd9c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   1dda0:	d124      	bne.n	1ddec <_scanf_i+0x140>
   1dda2:	0510      	lsls	r0, r2, #20
   1dda4:	d522      	bpl.n	1ddec <_scanf_i+0x140>
   1dda6:	f10b 0b01 	add.w	fp, fp, #1
   1ddaa:	f1b9 0f00 	cmp.w	r9, #0
   1ddae:	d003      	beq.n	1ddb8 <_scanf_i+0x10c>
   1ddb0:	3301      	adds	r3, #1
   1ddb2:	f109 39ff 	add.w	r9, r9, #4294967295
   1ddb6:	60a3      	str	r3, [r4, #8]
   1ddb8:	6873      	ldr	r3, [r6, #4]
   1ddba:	3b01      	subs	r3, #1
   1ddbc:	2b00      	cmp	r3, #0
   1ddbe:	6073      	str	r3, [r6, #4]
   1ddc0:	dd1b      	ble.n	1ddfa <_scanf_i+0x14e>
   1ddc2:	6833      	ldr	r3, [r6, #0]
   1ddc4:	3301      	adds	r3, #1
   1ddc6:	6033      	str	r3, [r6, #0]
   1ddc8:	68a3      	ldr	r3, [r4, #8]
   1ddca:	3b01      	subs	r3, #1
   1ddcc:	60a3      	str	r3, [r4, #8]
   1ddce:	e7d9      	b.n	1dd84 <_scanf_i+0xd8>
   1ddd0:	f1bb 0f02 	cmp.w	fp, #2
   1ddd4:	d1ae      	bne.n	1dd34 <_scanf_i+0x88>
   1ddd6:	6822      	ldr	r2, [r4, #0]
   1ddd8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   1dddc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1dde0:	d1bf      	bne.n	1dd62 <_scanf_i+0xb6>
   1dde2:	2310      	movs	r3, #16
   1dde4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1dde8:	6063      	str	r3, [r4, #4]
   1ddea:	e7a2      	b.n	1dd32 <_scanf_i+0x86>
   1ddec:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   1ddf0:	6022      	str	r2, [r4, #0]
   1ddf2:	780b      	ldrb	r3, [r1, #0]
   1ddf4:	f805 3b01 	strb.w	r3, [r5], #1
   1ddf8:	e7de      	b.n	1ddb8 <_scanf_i+0x10c>
   1ddfa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   1ddfe:	4631      	mov	r1, r6
   1de00:	4650      	mov	r0, sl
   1de02:	4798      	blx	r3
   1de04:	2800      	cmp	r0, #0
   1de06:	d0df      	beq.n	1ddc8 <_scanf_i+0x11c>
   1de08:	6823      	ldr	r3, [r4, #0]
   1de0a:	05d9      	lsls	r1, r3, #23
   1de0c:	d50d      	bpl.n	1de2a <_scanf_i+0x17e>
   1de0e:	42bd      	cmp	r5, r7
   1de10:	d909      	bls.n	1de26 <_scanf_i+0x17a>
   1de12:	f105 39ff 	add.w	r9, r5, #4294967295
   1de16:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1de1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   1de1e:	4632      	mov	r2, r6
   1de20:	464d      	mov	r5, r9
   1de22:	4650      	mov	r0, sl
   1de24:	4798      	blx	r3
   1de26:	42bd      	cmp	r5, r7
   1de28:	d028      	beq.n	1de7c <_scanf_i+0x1d0>
   1de2a:	6822      	ldr	r2, [r4, #0]
   1de2c:	f012 0210 	ands.w	r2, r2, #16
   1de30:	d113      	bne.n	1de5a <_scanf_i+0x1ae>
   1de32:	702a      	strb	r2, [r5, #0]
   1de34:	4639      	mov	r1, r7
   1de36:	6863      	ldr	r3, [r4, #4]
   1de38:	4650      	mov	r0, sl
   1de3a:	9e01      	ldr	r6, [sp, #4]
   1de3c:	47b0      	blx	r6
   1de3e:	f8d8 3000 	ldr.w	r3, [r8]
   1de42:	6821      	ldr	r1, [r4, #0]
   1de44:	1d1a      	adds	r2, r3, #4
   1de46:	f011 0f20 	tst.w	r1, #32
   1de4a:	f8c8 2000 	str.w	r2, [r8]
   1de4e:	681b      	ldr	r3, [r3, #0]
   1de50:	d00f      	beq.n	1de72 <_scanf_i+0x1c6>
   1de52:	6018      	str	r0, [r3, #0]
   1de54:	68e3      	ldr	r3, [r4, #12]
   1de56:	3301      	adds	r3, #1
   1de58:	60e3      	str	r3, [r4, #12]
   1de5a:	1bed      	subs	r5, r5, r7
   1de5c:	2000      	movs	r0, #0
   1de5e:	44ab      	add	fp, r5
   1de60:	6925      	ldr	r5, [r4, #16]
   1de62:	445d      	add	r5, fp
   1de64:	6125      	str	r5, [r4, #16]
   1de66:	b007      	add	sp, #28
   1de68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de6c:	f04f 0b00 	mov.w	fp, #0
   1de70:	e7ca      	b.n	1de08 <_scanf_i+0x15c>
   1de72:	07ca      	lsls	r2, r1, #31
   1de74:	bf4c      	ite	mi
   1de76:	8018      	strhmi	r0, [r3, #0]
   1de78:	6018      	strpl	r0, [r3, #0]
   1de7a:	e7eb      	b.n	1de54 <_scanf_i+0x1a8>
   1de7c:	2001      	movs	r0, #1
   1de7e:	e7f2      	b.n	1de66 <_scanf_i+0x1ba>
   1de80:	00024178 	.word	0x00024178
   1de84:	00023349 	.word	0x00023349
   1de88:	00023345 	.word	0x00023345
   1de8c:	00024e84 	.word	0x00024e84

0001de90 <agps_data_download_ongoing>:
}
   1de90:	2000      	movs	r0, #0
   1de92:	4770      	bx	lr

0001de94 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   1de94:	b40c      	push	{r2, r3}
   1de96:	b500      	push	{lr}
   1de98:	b083      	sub	sp, #12
   1de9a:	4603      	mov	r3, r0
   1de9c:	4608      	mov	r0, r1
   1de9e:	aa04      	add	r2, sp, #16
   1dea0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
   1dea4:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   1dea6:	68db      	ldr	r3, [r3, #12]
   1dea8:	4798      	blx	r3
	va_end(args);

	return res;
}
   1deaa:	b003      	add	sp, #12
   1deac:	f85d eb04 	ldr.w	lr, [sp], #4
   1deb0:	b002      	add	sp, #8
   1deb2:	4770      	bx	lr

0001deb4 <z_free_fd>:

void z_free_fd(int fd)
{
   1deb4:	b508      	push	{r3, lr}
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
   1deb6:	f7f4 f951 	bl	1215c <z_fd_unref>
}
   1deba:	bd08      	pop	{r3, pc}

0001debc <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1debc:	4602      	mov	r2, r0
   1debe:	b1b0      	cbz	r0, 1deee <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1dec0:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1dec2:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1dec6:	2b02      	cmp	r3, #2
   1dec8:	d00b      	beq.n	1dee2 <sys_notify_validate+0x26>
   1deca:	2b03      	cmp	r3, #3
   1decc:	d004      	beq.n	1ded8 <sys_notify_validate+0x1c>
   1dece:	2b01      	cmp	r3, #1
   1ded0:	d004      	beq.n	1dedc <sys_notify_validate+0x20>
   1ded2:	f06f 0015 	mvn.w	r0, #21
   1ded6:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   1ded8:	6803      	ldr	r3, [r0, #0]
   1deda:	b15b      	cbz	r3, 1def4 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   1dedc:	2000      	movs	r0, #0
   1dede:	6090      	str	r0, [r2, #8]
   1dee0:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1dee2:	6803      	ldr	r3, [r0, #0]
   1dee4:	2b00      	cmp	r3, #0
   1dee6:	d1f9      	bne.n	1dedc <sys_notify_validate+0x20>
			rv = -EINVAL;
   1dee8:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   1deec:	4770      	bx	lr
		return -EINVAL;
   1deee:	f06f 0015 	mvn.w	r0, #21
   1def2:	4770      	bx	lr
			rv = -EINVAL;
   1def4:	f06f 0015 	mvn.w	r0, #21
   1def8:	4770      	bx	lr

0001defa <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1defa:	b510      	push	{r4, lr}
   1defc:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1defe:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1df00:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   1df04:	6081      	str	r1, [r0, #8]
	switch (method) {
   1df06:	2a02      	cmp	r2, #2
   1df08:	d004      	beq.n	1df14 <sys_notify_finalize+0x1a>
   1df0a:	2a03      	cmp	r2, #3
   1df0c:	d105      	bne.n	1df1a <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1df0e:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1df10:	2000      	movs	r0, #0
		break;
   1df12:	e004      	b.n	1df1e <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   1df14:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1df16:	2400      	movs	r4, #0
		break;
   1df18:	e001      	b.n	1df1e <sys_notify_finalize+0x24>
	switch (method) {
   1df1a:	2400      	movs	r4, #0
   1df1c:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1df1e:	2200      	movs	r2, #0
   1df20:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1df22:	b108      	cbz	r0, 1df28 <sys_notify_finalize+0x2e>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1df24:	f7fe fc16 	bl	1c754 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1df28:	4620      	mov	r0, r4
   1df2a:	bd10      	pop	{r4, pc}

0001df2c <arch_printk_char_out>:
}
   1df2c:	2000      	movs	r0, #0
   1df2e:	4770      	bx	lr

0001df30 <str_out>:
{
   1df30:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1df32:	680c      	ldr	r4, [r1, #0]
   1df34:	b154      	cbz	r4, 1df4c <str_out+0x1c>
   1df36:	688a      	ldr	r2, [r1, #8]
   1df38:	684b      	ldr	r3, [r1, #4]
   1df3a:	429a      	cmp	r2, r3
   1df3c:	da06      	bge.n	1df4c <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   1df3e:	3b01      	subs	r3, #1
   1df40:	429a      	cmp	r2, r3
   1df42:	d009      	beq.n	1df58 <str_out+0x28>
		ctx->str[ctx->count++] = c;
   1df44:	1c53      	adds	r3, r2, #1
   1df46:	608b      	str	r3, [r1, #8]
   1df48:	54a0      	strb	r0, [r4, r2]
   1df4a:	e002      	b.n	1df52 <str_out+0x22>
		ctx->count++;
   1df4c:	688b      	ldr	r3, [r1, #8]
   1df4e:	3301      	adds	r3, #1
   1df50:	608b      	str	r3, [r1, #8]
}
   1df52:	f85d 4b04 	ldr.w	r4, [sp], #4
   1df56:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   1df58:	1c53      	adds	r3, r2, #1
   1df5a:	608b      	str	r3, [r1, #8]
   1df5c:	2300      	movs	r3, #0
   1df5e:	54a3      	strb	r3, [r4, r2]
   1df60:	e7f7      	b.n	1df52 <str_out+0x22>

0001df62 <printk>:
{
   1df62:	b40f      	push	{r0, r1, r2, r3}
   1df64:	b500      	push	{lr}
   1df66:	b083      	sub	sp, #12
   1df68:	a904      	add	r1, sp, #16
   1df6a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1df6e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1df70:	f7f4 f9b2 	bl	122d8 <vprintk>
}
   1df74:	b003      	add	sp, #12
   1df76:	f85d eb04 	ldr.w	lr, [sp], #4
   1df7a:	b004      	add	sp, #16
   1df7c:	4770      	bx	lr

0001df7e <snprintk>:
{
   1df7e:	b40c      	push	{r2, r3}
   1df80:	b500      	push	{lr}
   1df82:	b083      	sub	sp, #12
   1df84:	ab04      	add	r3, sp, #16
   1df86:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1df8a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1df8c:	f7f4 f9b4 	bl	122f8 <vsnprintk>
}
   1df90:	b003      	add	sp, #12
   1df92:	f85d eb04 	ldr.w	lr, [sp], #4
   1df96:	b002      	add	sp, #8
   1df98:	4770      	bx	lr

0001df9a <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   1df9a:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1df9e:	8b01      	ldrh	r1, [r0, #24]
   1dfa0:	f021 0107 	bic.w	r1, r1, #7
   1dfa4:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1dfa6:	8301      	strh	r1, [r0, #24]
}
   1dfa8:	4770      	bx	lr

0001dfaa <notify_monitors>:
{
   1dfaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dfae:	4606      	mov	r6, r0
   1dfb0:	460f      	mov	r7, r1
   1dfb2:	4690      	mov	r8, r2
	return list->head;
   1dfb4:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1dfb6:	b119      	cbz	r1, 1dfc0 <notify_monitors+0x16>
   1dfb8:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1dfba:	b131      	cbz	r1, 1dfca <notify_monitors+0x20>
	return node->next;
   1dfbc:	680c      	ldr	r4, [r1, #0]
   1dfbe:	e004      	b.n	1dfca <notify_monitors+0x20>
   1dfc0:	460c      	mov	r4, r1
   1dfc2:	e002      	b.n	1dfca <notify_monitors+0x20>
   1dfc4:	4623      	mov	r3, r4
   1dfc6:	4621      	mov	r1, r4
   1dfc8:	461c      	mov	r4, r3
   1dfca:	b159      	cbz	r1, 1dfe4 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   1dfcc:	684d      	ldr	r5, [r1, #4]
   1dfce:	4643      	mov	r3, r8
   1dfd0:	463a      	mov	r2, r7
   1dfd2:	4630      	mov	r0, r6
   1dfd4:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1dfd6:	2c00      	cmp	r4, #0
   1dfd8:	d0f4      	beq.n	1dfc4 <notify_monitors+0x1a>
   1dfda:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1dfdc:	2c00      	cmp	r4, #0
   1dfde:	d0f2      	beq.n	1dfc6 <notify_monitors+0x1c>
	return node->next;
   1dfe0:	6823      	ldr	r3, [r4, #0]
   1dfe2:	e7f0      	b.n	1dfc6 <notify_monitors+0x1c>
}
   1dfe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001dfe8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1dfe8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1dfea:	f013 0307 	ands.w	r3, r3, #7
   1dfee:	d103      	bne.n	1dff8 <process_recheck+0x10>
	return list->head;
   1dff0:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   1dff2:	b10a      	cbz	r2, 1dff8 <process_recheck+0x10>
		evt = EVT_START;
   1dff4:	2003      	movs	r0, #3
   1dff6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1dff8:	2b02      	cmp	r3, #2
   1dffa:	d003      	beq.n	1e004 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   1dffc:	2b01      	cmp	r3, #1
   1dffe:	d006      	beq.n	1e00e <process_recheck+0x26>
	int evt = EVT_NOP;
   1e000:	2000      	movs	r0, #0
   1e002:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   1e004:	8b42      	ldrh	r2, [r0, #26]
   1e006:	2a00      	cmp	r2, #0
   1e008:	d1f8      	bne.n	1dffc <process_recheck+0x14>
		evt = EVT_STOP;
   1e00a:	2004      	movs	r0, #4
   1e00c:	4770      	bx	lr
   1e00e:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   1e010:	b10b      	cbz	r3, 1e016 <process_recheck+0x2e>
		evt = EVT_RESET;
   1e012:	2005      	movs	r0, #5
}
   1e014:	4770      	bx	lr
	int evt = EVT_NOP;
   1e016:	2000      	movs	r0, #0
   1e018:	4770      	bx	lr

0001e01a <process_complete>:
{
   1e01a:	b538      	push	{r3, r4, r5, lr}
   1e01c:	4604      	mov	r4, r0
   1e01e:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1e020:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   1e022:	2a00      	cmp	r2, #0
   1e024:	db07      	blt.n	1e036 <process_complete+0x1c>
   1e026:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1e02a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1e02c:	2a01      	cmp	r2, #1
   1e02e:	d90e      	bls.n	1e04e <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1e030:	2b04      	cmp	r3, #4
   1e032:	d032      	beq.n	1e09a <process_complete+0x80>
}
   1e034:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   1e036:	e9d0 0100 	ldrd	r0, r1, [r0]
   1e03a:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   1e03e:	2300      	movs	r3, #0
   1e040:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   1e042:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   1e044:	2101      	movs	r1, #1
   1e046:	4620      	mov	r0, r4
   1e048:	f7ff ffa7 	bl	1df9a <set_state>
   1e04c:	e7f2      	b.n	1e034 <process_complete+0x1a>
		*clients = mgr->clients;
   1e04e:	e9d0 0100 	ldrd	r0, r1, [r0]
   1e052:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   1e056:	2200      	movs	r2, #0
   1e058:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   1e05a:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   1e05c:	2b06      	cmp	r3, #6
   1e05e:	d117      	bne.n	1e090 <process_complete+0x76>
	return list->head;
   1e060:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1e062:	b13b      	cbz	r3, 1e074 <process_complete+0x5a>
				mgr->refs += 1U;
   1e064:	8b62      	ldrh	r2, [r4, #26]
   1e066:	3201      	adds	r2, #1
   1e068:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e06a:	2b00      	cmp	r3, #0
   1e06c:	d0f9      	beq.n	1e062 <process_complete+0x48>
	return node->next;
   1e06e:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1e070:	2b00      	cmp	r3, #0
   1e072:	d1f6      	bne.n	1e062 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   1e074:	2102      	movs	r1, #2
   1e076:	4620      	mov	r0, r4
   1e078:	f7ff ff8f 	bl	1df9a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1e07c:	4620      	mov	r0, r4
   1e07e:	f7ff ffb3 	bl	1dfe8 <process_recheck>
   1e082:	2800      	cmp	r0, #0
   1e084:	d0d6      	beq.n	1e034 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1e086:	8b23      	ldrh	r3, [r4, #24]
   1e088:	f043 0320 	orr.w	r3, r3, #32
   1e08c:	8323      	strh	r3, [r4, #24]
   1e08e:	e7d1      	b.n	1e034 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   1e090:	2100      	movs	r1, #0
   1e092:	4620      	mov	r0, r4
   1e094:	f7ff ff81 	bl	1df9a <set_state>
   1e098:	e7f0      	b.n	1e07c <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   1e09a:	2100      	movs	r1, #0
   1e09c:	f7ff ff7d 	bl	1df9a <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1e0a0:	4620      	mov	r0, r4
   1e0a2:	f7ff ffa1 	bl	1dfe8 <process_recheck>
   1e0a6:	2800      	cmp	r0, #0
   1e0a8:	d0c4      	beq.n	1e034 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1e0aa:	8b23      	ldrh	r3, [r4, #24]
   1e0ac:	f043 0320 	orr.w	r3, r3, #32
   1e0b0:	8323      	strh	r3, [r4, #24]
}
   1e0b2:	e7bf      	b.n	1e034 <process_complete+0x1a>

0001e0b4 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   1e0b4:	b158      	cbz	r0, 1e0ce <validate_args+0x1a>
{
   1e0b6:	b510      	push	{r4, lr}
   1e0b8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1e0ba:	b159      	cbz	r1, 1e0d4 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   1e0bc:	1d08      	adds	r0, r1, #4
   1e0be:	f7ff fefd 	bl	1debc <sys_notify_validate>
	if ((rv == 0)
   1e0c2:	b918      	cbnz	r0, 1e0cc <validate_args+0x18>
	    && ((cli->notify.flags
   1e0c4:	68a3      	ldr	r3, [r4, #8]
   1e0c6:	f033 0303 	bics.w	r3, r3, #3
   1e0ca:	d106      	bne.n	1e0da <validate_args+0x26>
}
   1e0cc:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1e0ce:	f06f 0015 	mvn.w	r0, #21
}
   1e0d2:	4770      	bx	lr
		return -EINVAL;
   1e0d4:	f06f 0015 	mvn.w	r0, #21
   1e0d8:	e7f8      	b.n	1e0cc <validate_args+0x18>
		rv = -EINVAL;
   1e0da:	f06f 0015 	mvn.w	r0, #21
   1e0de:	e7f5      	b.n	1e0cc <validate_args+0x18>

0001e0e0 <notify_one>:
{
   1e0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e0e4:	4607      	mov	r7, r0
   1e0e6:	460c      	mov	r4, r1
   1e0e8:	4616      	mov	r6, r2
   1e0ea:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1e0ec:	4619      	mov	r1, r3
   1e0ee:	1d20      	adds	r0, r4, #4
   1e0f0:	f7ff ff03 	bl	1defa <sys_notify_finalize>
	if (cb) {
   1e0f4:	b128      	cbz	r0, 1e102 <notify_one+0x22>
   1e0f6:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   1e0f8:	462b      	mov	r3, r5
   1e0fa:	4632      	mov	r2, r6
   1e0fc:	4621      	mov	r1, r4
   1e0fe:	4638      	mov	r0, r7
   1e100:	47c0      	blx	r8
}
   1e102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e106 <notify_all>:
{
   1e106:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e10a:	4681      	mov	r9, r0
   1e10c:	460c      	mov	r4, r1
   1e10e:	4690      	mov	r8, r2
   1e110:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   1e112:	e005      	b.n	1e120 <notify_all+0x1a>
	list->tail = node;
   1e114:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   1e116:	463b      	mov	r3, r7
   1e118:	4642      	mov	r2, r8
   1e11a:	4648      	mov	r0, r9
   1e11c:	f7ff ffe0 	bl	1e0e0 <notify_one>
	return list->head;
   1e120:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   1e122:	b129      	cbz	r1, 1e130 <notify_all+0x2a>
	return node->next;
   1e124:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   1e126:	6025      	str	r5, [r4, #0]
	return list->tail;
   1e128:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e12a:	428e      	cmp	r6, r1
   1e12c:	d1f3      	bne.n	1e116 <notify_all+0x10>
   1e12e:	e7f1      	b.n	1e114 <notify_all+0xe>
}
   1e130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e134 <transition_complete>:
{
   1e134:	b510      	push	{r4, lr}
	__asm__ volatile(
   1e136:	f04f 0420 	mov.w	r4, #32
   1e13a:	f3ef 8211 	mrs	r2, BASEPRI
   1e13e:	f384 8811 	msr	BASEPRI, r4
   1e142:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1e146:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   1e148:	2101      	movs	r1, #1
   1e14a:	f7f4 f8eb 	bl	12324 <process_event>
}
   1e14e:	bd10      	pop	{r4, pc}

0001e150 <onoff_manager_init>:
	if ((mgr == NULL)
   1e150:	4603      	mov	r3, r0
   1e152:	b168      	cbz	r0, 1e170 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1e154:	b179      	cbz	r1, 1e176 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   1e156:	680a      	ldr	r2, [r1, #0]
   1e158:	b182      	cbz	r2, 1e17c <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   1e15a:	684a      	ldr	r2, [r1, #4]
   1e15c:	b18a      	cbz	r2, 1e182 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1e15e:	2000      	movs	r0, #0
   1e160:	6018      	str	r0, [r3, #0]
   1e162:	6058      	str	r0, [r3, #4]
   1e164:	6098      	str	r0, [r3, #8]
   1e166:	60d8      	str	r0, [r3, #12]
   1e168:	6158      	str	r0, [r3, #20]
   1e16a:	6198      	str	r0, [r3, #24]
   1e16c:	6119      	str	r1, [r3, #16]
	return 0;
   1e16e:	4770      	bx	lr
		return -EINVAL;
   1e170:	f06f 0015 	mvn.w	r0, #21
   1e174:	4770      	bx	lr
   1e176:	f06f 0015 	mvn.w	r0, #21
   1e17a:	4770      	bx	lr
   1e17c:	f06f 0015 	mvn.w	r0, #21
   1e180:	4770      	bx	lr
   1e182:	f06f 0015 	mvn.w	r0, #21
}
   1e186:	4770      	bx	lr

0001e188 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1e188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e18a:	4604      	mov	r4, r0
   1e18c:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1e18e:	f7ff ff91 	bl	1e0b4 <validate_args>

	if (rv < 0) {
   1e192:	1e06      	subs	r6, r0, #0
   1e194:	db37      	blt.n	1e206 <onoff_request+0x7e>
   1e196:	f04f 0320 	mov.w	r3, #32
   1e19a:	f3ef 8211 	mrs	r2, BASEPRI
   1e19e:	f383 8811 	msr	BASEPRI, r3
   1e1a2:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1e1a6:	8b25      	ldrh	r5, [r4, #24]
   1e1a8:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1e1ac:	8b63      	ldrh	r3, [r4, #26]
   1e1ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1e1b2:	428b      	cmp	r3, r1
   1e1b4:	d02f      	beq.n	1e216 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   1e1b6:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   1e1b8:	2d02      	cmp	r5, #2
   1e1ba:	d00c      	beq.n	1e1d6 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   1e1bc:	b18d      	cbz	r5, 1e1e2 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   1e1be:	2d04      	cmp	r5, #4
   1e1c0:	d00f      	beq.n	1e1e2 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   1e1c2:	2d06      	cmp	r5, #6
   1e1c4:	d00d      	beq.n	1e1e2 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   1e1c6:	2d05      	cmp	r5, #5
   1e1c8:	d01f      	beq.n	1e20a <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   1e1ca:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   1e1ce:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1e1d0:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1e1d2:	4608      	mov	r0, r1
   1e1d4:	e00a      	b.n	1e1ec <onoff_request+0x64>
		mgr->refs += 1U;
   1e1d6:	3301      	adds	r3, #1
   1e1d8:	8363      	strh	r3, [r4, #26]
		notify = true;
   1e1da:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   1e1dc:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   1e1de:	4618      	mov	r0, r3
   1e1e0:	e004      	b.n	1e1ec <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   1e1e2:	fab5 f385 	clz	r3, r5
   1e1e6:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   1e1e8:	2100      	movs	r1, #0
		add_client = true;
   1e1ea:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   1e1ec:	b128      	cbz	r0, 1e1fa <onoff_request+0x72>
	parent->next = child;
   1e1ee:	2000      	movs	r0, #0
   1e1f0:	6038      	str	r0, [r7, #0]
	return list->tail;
   1e1f2:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1e1f4:	b1a8      	cbz	r0, 1e222 <onoff_request+0x9a>
	parent->next = child;
   1e1f6:	6007      	str	r7, [r0, #0]
	list->tail = node;
   1e1f8:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   1e1fa:	b9ab      	cbnz	r3, 1e228 <onoff_request+0xa0>
	__asm__ volatile(
   1e1fc:	f382 8811 	msr	BASEPRI, r2
   1e200:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1e204:	b9a9      	cbnz	r1, 1e232 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1e206:	4630      	mov	r0, r6
   1e208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   1e20a:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   1e20e:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1e210:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1e212:	4608      	mov	r0, r1
   1e214:	e7ea      	b.n	1e1ec <onoff_request+0x64>
		rv = -EAGAIN;
   1e216:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   1e21a:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1e21c:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1e21e:	4608      	mov	r0, r1
   1e220:	e7e4      	b.n	1e1ec <onoff_request+0x64>
   1e222:	6067      	str	r7, [r4, #4]
	list->head = node;
   1e224:	6027      	str	r7, [r4, #0]
}
   1e226:	e7e8      	b.n	1e1fa <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   1e228:	2102      	movs	r1, #2
   1e22a:	4620      	mov	r0, r4
   1e22c:	f7f4 f87a 	bl	12324 <process_event>
   1e230:	e7e9      	b.n	1e206 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   1e232:	2300      	movs	r3, #0
   1e234:	462a      	mov	r2, r5
   1e236:	4639      	mov	r1, r7
   1e238:	4620      	mov	r0, r4
   1e23a:	f7ff ff51 	bl	1e0e0 <notify_one>
   1e23e:	e7e2      	b.n	1e206 <onoff_request+0x7e>

0001e240 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1e240:	b508      	push	{r3, lr}
   1e242:	4604      	mov	r4, r0
   1e244:	4608      	mov	r0, r1
   1e246:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1e248:	461a      	mov	r2, r3
   1e24a:	47a0      	blx	r4
	return z_impl_k_current_get();
   1e24c:	f7fd fe02 	bl	1be54 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1e250:	f7f5 ffd0 	bl	141f4 <z_impl_k_thread_abort>

0001e254 <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1e254:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(bytes / CHUNK_UNIT);
}

static inline bool big_heap(struct z_heap *h)
{
	return big_heap_chunks(h->end_chunk);
   1e256:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1e258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e25c:	d303      	bcc.n	1e266 <chunk_mem+0x12>
   1e25e:	2308      	movs	r3, #8
   1e260:	4419      	add	r1, r3

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   1e262:	4408      	add	r0, r1
   1e264:	4770      	bx	lr
   1e266:	2304      	movs	r3, #4
   1e268:	e7fa      	b.n	1e260 <chunk_mem+0xc>

0001e26a <free_list_remove_bidx>:

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   1e26a:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   1e26c:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1e270:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1e272:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1e276:	d317      	bcc.n	1e2a8 <free_list_remove_bidx+0x3e>
		return ((uint32_t *)cmem)[f];
   1e278:	68eb      	ldr	r3, [r5, #12]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   1e27a:	4299      	cmp	r1, r3
   1e27c:	d016      	beq.n	1e2ac <free_list_remove_bidx+0x42>
	if (big_heap(h)) {
   1e27e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1e282:	d320      	bcc.n	1e2c6 <free_list_remove_bidx+0x5c>
		return ((uint32_t *)cmem)[f];
   1e284:	68a9      	ldr	r1, [r5, #8]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   1e286:	3204      	adds	r2, #4
   1e288:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   1e28c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   1e290:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1e294:	d319      	bcc.n	1e2ca <free_list_remove_bidx+0x60>
		((uint32_t *)cmem)[f] = val;
   1e296:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
   1e298:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   1e29c:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   1e29e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1e2a2:	d314      	bcc.n	1e2ce <free_list_remove_bidx+0x64>
		((uint32_t *)cmem)[f] = val;
   1e2a4:	6099      	str	r1, [r3, #8]
   1e2a6:	e00c      	b.n	1e2c2 <free_list_remove_bidx+0x58>
		return ((uint16_t *)cmem)[f];
   1e2a8:	88eb      	ldrh	r3, [r5, #6]
   1e2aa:	e7e6      	b.n	1e27a <free_list_remove_bidx+0x10>
		h->avail_buckets &= ~(1 << bidx);
   1e2ac:	2301      	movs	r3, #1
   1e2ae:	fa03 f102 	lsl.w	r1, r3, r2
   1e2b2:	68c3      	ldr	r3, [r0, #12]
   1e2b4:	ea23 0301 	bic.w	r3, r3, r1
   1e2b8:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1e2ba:	3204      	adds	r2, #4
   1e2bc:	2300      	movs	r3, #0
   1e2be:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   1e2c2:	bc30      	pop	{r4, r5}
   1e2c4:	4770      	bx	lr
   1e2c6:	88a9      	ldrh	r1, [r5, #4]
   1e2c8:	e7dd      	b.n	1e286 <free_list_remove_bidx+0x1c>
		((uint16_t *)cmem)[f] = val;
   1e2ca:	80d3      	strh	r3, [r2, #6]
   1e2cc:	e7e4      	b.n	1e298 <free_list_remove_bidx+0x2e>
   1e2ce:	8099      	strh	r1, [r3, #4]
   1e2d0:	e7f7      	b.n	1e2c2 <free_list_remove_bidx+0x58>

0001e2d2 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   1e2d2:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   1e2d4:	1d13      	adds	r3, r2, #4
   1e2d6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1e2da:	b9d3      	cbnz	r3, 1e312 <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
   1e2dc:	2301      	movs	r3, #1
   1e2de:	fa03 f402 	lsl.w	r4, r3, r2
   1e2e2:	68c3      	ldr	r3, [r0, #12]
   1e2e4:	4323      	orrs	r3, r4
   1e2e6:	60c3      	str	r3, [r0, #12]
		b->next = c;
   1e2e8:	3204      	adds	r2, #4
   1e2ea:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   1e2ee:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1e2f2:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   1e2f4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1e2f8:	d307      	bcc.n	1e30a <free_list_add_bidx+0x38>
		((uint32_t *)cmem)[f] = val;
   1e2fa:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
   1e2fc:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   1e2fe:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1e302:	d304      	bcc.n	1e30e <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
   1e304:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
   1e306:	bc70      	pop	{r4, r5, r6}
   1e308:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
   1e30a:	8099      	strh	r1, [r3, #4]
   1e30c:	e7f6      	b.n	1e2fc <free_list_add_bidx+0x2a>
   1e30e:	80d9      	strh	r1, [r3, #6]
   1e310:	e7f9      	b.n	1e306 <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
   1e312:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   1e316:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   1e318:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1e31c:	d318      	bcc.n	1e350 <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
   1e31e:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
   1e320:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
   1e324:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1e328:	d314      	bcc.n	1e354 <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
   1e32a:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
   1e32c:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   1e32e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1e332:	d311      	bcc.n	1e358 <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
   1e334:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
   1e336:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   1e33a:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   1e33c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e340:	d30c      	bcc.n	1e35c <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
   1e342:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
   1e344:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   1e346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e34a:	d309      	bcc.n	1e360 <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
   1e34c:	60a1      	str	r1, [r4, #8]
   1e34e:	e7da      	b.n	1e306 <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
   1e350:	88a2      	ldrh	r2, [r4, #4]
   1e352:	e7e5      	b.n	1e320 <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
   1e354:	80aa      	strh	r2, [r5, #4]
   1e356:	e7e9      	b.n	1e32c <free_list_add_bidx+0x5a>
   1e358:	80eb      	strh	r3, [r5, #6]
   1e35a:	e7ec      	b.n	1e336 <free_list_add_bidx+0x64>
   1e35c:	80d1      	strh	r1, [r2, #6]
   1e35e:	e7f1      	b.n	1e344 <free_list_add_bidx+0x72>
   1e360:	80a1      	strh	r1, [r4, #4]
   1e362:	e7d0      	b.n	1e306 <free_list_add_bidx+0x34>

0001e364 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1e364:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
   1e366:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1e36a:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
   1e36c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1e370:	d325      	bcc.n	1e3be <split_chunks+0x5a>
		return ((uint32_t *)cmem)[f];
   1e372:	6866      	ldr	r6, [r4, #4]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   1e374:	1a53      	subs	r3, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1e376:	1a89      	subs	r1, r1, r2
   1e378:	eb01 0156 	add.w	r1, r1, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e37c:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
   1e37e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1e382:	d31e      	bcc.n	1e3c2 <split_chunks+0x5e>
		((uint32_t *)cmem)[f] = val;
   1e384:	6066      	str	r6, [r4, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e386:	004d      	lsls	r5, r1, #1
	void *cmem = &buf[c];
   1e388:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   1e38c:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   1e38e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1e392:	d318      	bcc.n	1e3c6 <split_chunks+0x62>
		((uint32_t *)cmem)[f] = val;
   1e394:	6065      	str	r5, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   1e396:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
   1e398:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1e39c:	d315      	bcc.n	1e3ca <split_chunks+0x66>
		((uint32_t *)cmem)[f] = val;
   1e39e:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->end_chunk);
   1e3a2:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   1e3a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e3a8:	d312      	bcc.n	1e3d0 <split_chunks+0x6c>
		return ((uint32_t *)cmem)[f];
   1e3aa:	6864      	ldr	r4, [r4, #4]
	return c + chunk_size(h, c);
   1e3ac:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   1e3b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e3b4:	d30e      	bcc.n	1e3d4 <split_chunks+0x70>
		((uint32_t *)cmem)[f] = val;
   1e3b6:	f840 1032 	str.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   1e3ba:	bc70      	pop	{r4, r5, r6}
   1e3bc:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   1e3be:	8866      	ldrh	r6, [r4, #2]
   1e3c0:	e7d8      	b.n	1e374 <split_chunks+0x10>
		((uint16_t *)cmem)[f] = val;
   1e3c2:	8066      	strh	r6, [r4, #2]
   1e3c4:	e7df      	b.n	1e386 <split_chunks+0x22>
   1e3c6:	8065      	strh	r5, [r4, #2]
   1e3c8:	e7e5      	b.n	1e396 <split_chunks+0x32>
   1e3ca:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   1e3ce:	e7e8      	b.n	1e3a2 <split_chunks+0x3e>
		return ((uint16_t *)cmem)[f];
   1e3d0:	8864      	ldrh	r4, [r4, #2]
   1e3d2:	e7eb      	b.n	1e3ac <split_chunks+0x48>
		((uint16_t *)cmem)[f] = val;
   1e3d4:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
   1e3d8:	e7ef      	b.n	1e3ba <split_chunks+0x56>

0001e3da <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1e3da:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
   1e3dc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1e3e0:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1e3e2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1e3e6:	d31c      	bcc.n	1e422 <merge_chunks+0x48>
		return ((uint32_t *)cmem)[f];
   1e3e8:	684b      	ldr	r3, [r1, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1e3ea:	085b      	lsrs	r3, r3, #1
	void *cmem = &buf[c];
   1e3ec:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
	if (big_heap(h)) {
   1e3f0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1e3f4:	d317      	bcc.n	1e426 <merge_chunks+0x4c>
		return ((uint32_t *)cmem)[f];
   1e3f6:	686e      	ldr	r6, [r5, #4]
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1e3f8:	eb03 0356 	add.w	r3, r3, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e3fc:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
   1e3fe:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1e402:	d312      	bcc.n	1e42a <merge_chunks+0x50>
		((uint32_t *)cmem)[f] = val;
   1e404:	604e      	str	r6, [r1, #4]
	return big_heap_chunks(h->end_chunk);
   1e406:	6881      	ldr	r1, [r0, #8]
	if (big_heap(h)) {
   1e408:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   1e40c:	d30f      	bcc.n	1e42e <merge_chunks+0x54>
		return ((uint32_t *)cmem)[f];
   1e40e:	686c      	ldr	r4, [r5, #4]
	return c + chunk_size(h, c);
   1e410:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   1e414:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   1e418:	d30b      	bcc.n	1e432 <merge_chunks+0x58>
		((uint32_t *)cmem)[f] = val;
   1e41a:	f840 3032 	str.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1e41e:	bc70      	pop	{r4, r5, r6}
   1e420:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   1e422:	884b      	ldrh	r3, [r1, #2]
   1e424:	e7e1      	b.n	1e3ea <merge_chunks+0x10>
   1e426:	886e      	ldrh	r6, [r5, #2]
   1e428:	e7e6      	b.n	1e3f8 <merge_chunks+0x1e>
		((uint16_t *)cmem)[f] = val;
   1e42a:	804e      	strh	r6, [r1, #2]
   1e42c:	e7eb      	b.n	1e406 <merge_chunks+0x2c>
		return ((uint16_t *)cmem)[f];
   1e42e:	886c      	ldrh	r4, [r5, #2]
   1e430:	e7ee      	b.n	1e410 <merge_chunks+0x36>
		((uint16_t *)cmem)[f] = val;
   1e432:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   1e436:	e7f2      	b.n	1e41e <merge_chunks+0x44>

0001e438 <mem_to_chunkid>:
	return big_heap_chunks(h->end_chunk);
   1e438:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
   1e43a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e43e:	d304      	bcc.n	1e44a <mem_to_chunkid+0x12>
   1e440:	2308      	movs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1e442:	1ac9      	subs	r1, r1, r3
   1e444:	1a08      	subs	r0, r1, r0
}
   1e446:	08c0      	lsrs	r0, r0, #3
   1e448:	4770      	bx	lr
   1e44a:	2304      	movs	r3, #4
   1e44c:	e7f9      	b.n	1e442 <mem_to_chunkid+0xa>

0001e44e <free_list_remove>:
{
   1e44e:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   1e450:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   1e452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e456:	d307      	bcc.n	1e468 <free_list_remove+0x1a>
	void *cmem = &buf[c];
   1e458:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   1e45c:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1e45e:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   1e460:	2a01      	cmp	r2, #1
   1e462:	d002      	beq.n	1e46a <free_list_remove+0x1c>
   1e464:	2200      	movs	r2, #0
   1e466:	e000      	b.n	1e46a <free_list_remove+0x1c>
   1e468:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   1e46a:	b9a2      	cbnz	r2, 1e496 <free_list_remove+0x48>
	void *cmem = &buf[c];
   1e46c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   1e470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e474:	d310      	bcc.n	1e498 <free_list_remove+0x4a>
		return ((uint32_t *)cmem)[f];
   1e476:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1e478:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   1e47a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e47e:	d30d      	bcc.n	1e49c <free_list_remove+0x4e>
   1e480:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e482:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1e484:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   1e488:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   1e48a:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   1e48e:	f1c2 021f 	rsb	r2, r2, #31
   1e492:	f7ff feea 	bl	1e26a <free_list_remove_bidx>
}
   1e496:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   1e498:	8852      	ldrh	r2, [r2, #2]
   1e49a:	e7ed      	b.n	1e478 <free_list_remove+0x2a>
	return big_heap(h) ? 8 : 4;
   1e49c:	2304      	movs	r3, #4
   1e49e:	e7f0      	b.n	1e482 <free_list_remove+0x34>

0001e4a0 <free_list_add>:
{
   1e4a0:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   1e4a2:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   1e4a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e4a8:	d307      	bcc.n	1e4ba <free_list_add+0x1a>
	void *cmem = &buf[c];
   1e4aa:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   1e4ae:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1e4b0:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   1e4b2:	2a01      	cmp	r2, #1
   1e4b4:	d002      	beq.n	1e4bc <free_list_add+0x1c>
   1e4b6:	2200      	movs	r2, #0
   1e4b8:	e000      	b.n	1e4bc <free_list_add+0x1c>
   1e4ba:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   1e4bc:	b9a2      	cbnz	r2, 1e4e8 <free_list_add+0x48>
	void *cmem = &buf[c];
   1e4be:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   1e4c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e4c6:	d310      	bcc.n	1e4ea <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
   1e4c8:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1e4ca:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   1e4cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e4d0:	d30d      	bcc.n	1e4ee <free_list_add+0x4e>
   1e4d2:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e4d4:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1e4d6:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   1e4da:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   1e4dc:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   1e4e0:	f1c2 021f 	rsb	r2, r2, #31
   1e4e4:	f7ff fef5 	bl	1e2d2 <free_list_add_bidx>
}
   1e4e8:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   1e4ea:	8852      	ldrh	r2, [r2, #2]
   1e4ec:	e7ed      	b.n	1e4ca <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
   1e4ee:	2304      	movs	r3, #4
   1e4f0:	e7f0      	b.n	1e4d4 <free_list_add+0x34>

0001e4f2 <free_chunk>:
{
   1e4f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e4f4:	4604      	mov	r4, r0
   1e4f6:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   1e4f8:	00ce      	lsls	r6, r1, #3
   1e4fa:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1e4fe:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   1e500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e504:	d31f      	bcc.n	1e546 <free_chunk+0x54>
		return ((uint32_t *)cmem)[f];
   1e506:	6879      	ldr	r1, [r7, #4]
	return c + chunk_size(h, c);
   1e508:	eb05 0151 	add.w	r1, r5, r1, lsr #1
	void *cmem = &buf[c];
   1e50c:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   1e510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e514:	d319      	bcc.n	1e54a <free_chunk+0x58>
		return ((uint32_t *)cmem)[f];
   1e516:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, right_chunk(h, c))) {
   1e518:	f013 0f01 	tst.w	r3, #1
   1e51c:	d017      	beq.n	1e54e <free_chunk+0x5c>
	return big_heap_chunks(h->end_chunk);
   1e51e:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   1e520:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e524:	d324      	bcc.n	1e570 <free_chunk+0x7e>
		return ((uint32_t *)cmem)[f];
   1e526:	59a1      	ldr	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   1e528:	1a69      	subs	r1, r5, r1
	void *cmem = &buf[c];
   1e52a:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   1e52e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e532:	d31f      	bcc.n	1e574 <free_chunk+0x82>
		return ((uint32_t *)cmem)[f];
   1e534:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, left_chunk(h, c))) {
   1e536:	f013 0f01 	tst.w	r3, #1
   1e53a:	d01d      	beq.n	1e578 <free_chunk+0x86>
	free_list_add(h, c);
   1e53c:	4629      	mov	r1, r5
   1e53e:	4620      	mov	r0, r4
   1e540:	f7ff ffae 	bl	1e4a0 <free_list_add>
}
   1e544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((uint16_t *)cmem)[f];
   1e546:	8879      	ldrh	r1, [r7, #2]
   1e548:	e7de      	b.n	1e508 <free_chunk+0x16>
   1e54a:	8853      	ldrh	r3, [r2, #2]
   1e54c:	e7e4      	b.n	1e518 <free_chunk+0x26>
		free_list_remove(h, right_chunk(h, c));
   1e54e:	4620      	mov	r0, r4
   1e550:	f7ff ff7d 	bl	1e44e <free_list_remove>
	return big_heap_chunks(h->end_chunk);
   1e554:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   1e556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e55a:	d307      	bcc.n	1e56c <free_chunk+0x7a>
		return ((uint32_t *)cmem)[f];
   1e55c:	687a      	ldr	r2, [r7, #4]
		merge_chunks(h, c, right_chunk(h, c));
   1e55e:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   1e562:	4629      	mov	r1, r5
   1e564:	4620      	mov	r0, r4
   1e566:	f7ff ff38 	bl	1e3da <merge_chunks>
   1e56a:	e7d8      	b.n	1e51e <free_chunk+0x2c>
		return ((uint16_t *)cmem)[f];
   1e56c:	887a      	ldrh	r2, [r7, #2]
   1e56e:	e7f6      	b.n	1e55e <free_chunk+0x6c>
   1e570:	5ba1      	ldrh	r1, [r4, r6]
   1e572:	e7d9      	b.n	1e528 <free_chunk+0x36>
   1e574:	8853      	ldrh	r3, [r2, #2]
   1e576:	e7de      	b.n	1e536 <free_chunk+0x44>
		free_list_remove(h, left_chunk(h, c));
   1e578:	4620      	mov	r0, r4
   1e57a:	f7ff ff68 	bl	1e44e <free_list_remove>
	return big_heap_chunks(h->end_chunk);
   1e57e:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   1e580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e584:	d30c      	bcc.n	1e5a0 <free_chunk+0xae>
		return ((uint32_t *)cmem)[f];
   1e586:	59a1      	ldr	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   1e588:	462a      	mov	r2, r5
   1e58a:	1a69      	subs	r1, r5, r1
   1e58c:	4620      	mov	r0, r4
   1e58e:	f7ff ff24 	bl	1e3da <merge_chunks>
	return big_heap_chunks(h->end_chunk);
   1e592:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   1e594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e598:	d304      	bcc.n	1e5a4 <free_chunk+0xb2>
		return ((uint32_t *)cmem)[f];
   1e59a:	59a3      	ldr	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   1e59c:	1aed      	subs	r5, r5, r3
   1e59e:	e7cd      	b.n	1e53c <free_chunk+0x4a>
		return ((uint16_t *)cmem)[f];
   1e5a0:	5ba1      	ldrh	r1, [r4, r6]
   1e5a2:	e7f1      	b.n	1e588 <free_chunk+0x96>
   1e5a4:	5ba3      	ldrh	r3, [r4, r6]
   1e5a6:	e7f9      	b.n	1e59c <free_chunk+0xaa>

0001e5a8 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1e5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->end_chunk);
   1e5aa:	6885      	ldr	r5, [r0, #8]
	return big_heap(h) ? 8 : 4;
   1e5ac:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1e5b0:	d311      	bcc.n	1e5d6 <alloc_chunk+0x2e>
   1e5b2:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e5b4:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1e5b6:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
   1e5ba:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   1e5bc:	fab3 f383 	clz	r3, r3
   1e5c0:	f1c3 021f 	rsb	r2, r3, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1e5c4:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   1e5c8:	f850 c024 	ldr.w	ip, [r0, r4, lsl #2]
   1e5cc:	f1bc 0f00 	cmp.w	ip, #0
   1e5d0:	d024      	beq.n	1e61c <alloc_chunk+0x74>
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   1e5d2:	2603      	movs	r6, #3
   1e5d4:	e010      	b.n	1e5f8 <alloc_chunk+0x50>
	return big_heap(h) ? 8 : 4;
   1e5d6:	2304      	movs	r3, #4
   1e5d8:	e7ec      	b.n	1e5b4 <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
   1e5da:	f8b7 e002 	ldrh.w	lr, [r7, #2]
   1e5de:	e015      	b.n	1e60c <alloc_chunk+0x64>
		do {
			chunkid_t c = b->next;
			if (chunk_size(h, c) >= sz) {
				free_list_remove_bidx(h, c, bi);
   1e5e0:	4621      	mov	r1, r4
   1e5e2:	f7ff fe42 	bl	1e26a <free_list_remove_bidx>
				return c;
   1e5e6:	e021      	b.n	1e62c <alloc_chunk+0x84>
   1e5e8:	88fc      	ldrh	r4, [r7, #6]
			}
			b->next = next_free_chunk(h, c);
   1e5ea:	1d17      	adds	r7, r2, #4
   1e5ec:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   1e5f0:	3e01      	subs	r6, #1
   1e5f2:	d013      	beq.n	1e61c <alloc_chunk+0x74>
   1e5f4:	45a4      	cmp	ip, r4
   1e5f6:	d011      	beq.n	1e61c <alloc_chunk+0x74>
			chunkid_t c = b->next;
   1e5f8:	1d14      	adds	r4, r2, #4
   1e5fa:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   1e5fe:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
	if (big_heap(h)) {
   1e602:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1e606:	d3e8      	bcc.n	1e5da <alloc_chunk+0x32>
		return ((uint32_t *)cmem)[f];
   1e608:	f8d7 e004 	ldr.w	lr, [r7, #4]
			if (chunk_size(h, c) >= sz) {
   1e60c:	ebb1 0f5e 	cmp.w	r1, lr, lsr #1
   1e610:	d9e6      	bls.n	1e5e0 <alloc_chunk+0x38>
	if (big_heap(h)) {
   1e612:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1e616:	d3e7      	bcc.n	1e5e8 <alloc_chunk+0x40>
		return ((uint32_t *)cmem)[f];
   1e618:	68fc      	ldr	r4, [r7, #12]
   1e61a:	e7e6      	b.n	1e5ea <alloc_chunk+0x42>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1e61c:	68c4      	ldr	r4, [r0, #12]
   1e61e:	f1c3 0220 	rsb	r2, r3, #32
   1e622:	2301      	movs	r3, #1
   1e624:	4093      	lsls	r3, r2
   1e626:	425b      	negs	r3, r3

	if (bmask != 0U) {
   1e628:	401c      	ands	r4, r3
   1e62a:	d101      	bne.n	1e630 <alloc_chunk+0x88>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1e62c:	4620      	mov	r0, r4
   1e62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask);
   1e630:	fa94 f2a4 	rbit	r2, r4
   1e634:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1e638:	1d13      	adds	r3, r2, #4
   1e63a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1e63e:	4621      	mov	r1, r4
   1e640:	f7ff fe13 	bl	1e26a <free_list_remove_bidx>
		return c;
   1e644:	e7f2      	b.n	1e62c <alloc_chunk+0x84>

0001e646 <sys_heap_free>:
	if (mem == NULL) {
   1e646:	b1c1      	cbz	r1, 1e67a <sys_heap_free+0x34>
{
   1e648:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   1e64a:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   1e64c:	4620      	mov	r0, r4
   1e64e:	f7ff fef3 	bl	1e438 <mem_to_chunkid>
   1e652:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   1e654:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   1e658:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
   1e65a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1e65e:	d307      	bcc.n	1e670 <sys_heap_free+0x2a>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1e660:	685a      	ldr	r2, [r3, #4]
   1e662:	f022 0201 	bic.w	r2, r2, #1
   1e666:	605a      	str	r2, [r3, #4]
	free_chunk(h, c);
   1e668:	4620      	mov	r0, r4
   1e66a:	f7ff ff42 	bl	1e4f2 <free_chunk>
}
   1e66e:	bd10      	pop	{r4, pc}
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1e670:	885a      	ldrh	r2, [r3, #2]
   1e672:	f022 0201 	bic.w	r2, r2, #1
   1e676:	805a      	strh	r2, [r3, #2]
   1e678:	e7f6      	b.n	1e668 <sys_heap_free+0x22>
   1e67a:	4770      	bx	lr

0001e67c <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1e67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   1e67e:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1e680:	2900      	cmp	r1, #0
   1e682:	d03c      	beq.n	1e6fe <sys_heap_alloc+0x82>
   1e684:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1e686:	68aa      	ldr	r2, [r5, #8]
   1e688:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   1e68c:	d939      	bls.n	1e702 <sys_heap_alloc+0x86>
	return big_heap(h) ? 8 : 4;
   1e68e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1e692:	d320      	bcc.n	1e6d6 <sys_heap_alloc+0x5a>
   1e694:	2408      	movs	r4, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   1e696:	441c      	add	r4, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e698:	3407      	adds	r4, #7
   1e69a:	08e4      	lsrs	r4, r4, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1e69c:	4621      	mov	r1, r4
   1e69e:	4628      	mov	r0, r5
   1e6a0:	f7ff ff82 	bl	1e5a8 <alloc_chunk>
	if (c == 0U) {
   1e6a4:	4607      	mov	r7, r0
   1e6a6:	b370      	cbz	r0, 1e706 <sys_heap_alloc+0x8a>
	void *cmem = &buf[c];
   1e6a8:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   1e6ac:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   1e6ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e6b2:	d312      	bcc.n	1e6da <sys_heap_alloc+0x5e>
		return ((uint32_t *)cmem)[f];
   1e6b4:	6873      	ldr	r3, [r6, #4]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   1e6b6:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   1e6ba:	d310      	bcc.n	1e6de <sys_heap_alloc+0x62>
	return big_heap_chunks(h->end_chunk);
   1e6bc:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   1e6be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e6c2:	d317      	bcc.n	1e6f4 <sys_heap_alloc+0x78>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e6c4:	6873      	ldr	r3, [r6, #4]
   1e6c6:	f043 0301 	orr.w	r3, r3, #1
   1e6ca:	6073      	str	r3, [r6, #4]
		split_chunks(h, c, c + chunk_sz);
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
   1e6cc:	4639      	mov	r1, r7
   1e6ce:	4628      	mov	r0, r5
   1e6d0:	f7ff fdc0 	bl	1e254 <chunk_mem>
}
   1e6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return big_heap(h) ? 8 : 4;
   1e6d6:	2404      	movs	r4, #4
   1e6d8:	e7dd      	b.n	1e696 <sys_heap_alloc+0x1a>
		return ((uint16_t *)cmem)[f];
   1e6da:	8873      	ldrh	r3, [r6, #2]
   1e6dc:	e7eb      	b.n	1e6b6 <sys_heap_alloc+0x3a>
		split_chunks(h, c, c + chunk_sz);
   1e6de:	443c      	add	r4, r7
   1e6e0:	4622      	mov	r2, r4
   1e6e2:	4639      	mov	r1, r7
   1e6e4:	4628      	mov	r0, r5
   1e6e6:	f7ff fe3d 	bl	1e364 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1e6ea:	4621      	mov	r1, r4
   1e6ec:	4628      	mov	r0, r5
   1e6ee:	f7ff fed7 	bl	1e4a0 <free_list_add>
   1e6f2:	e7e3      	b.n	1e6bc <sys_heap_alloc+0x40>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e6f4:	8873      	ldrh	r3, [r6, #2]
   1e6f6:	f043 0301 	orr.w	r3, r3, #1
   1e6fa:	8073      	strh	r3, [r6, #2]
   1e6fc:	e7e6      	b.n	1e6cc <sys_heap_alloc+0x50>
		return NULL;
   1e6fe:	2000      	movs	r0, #0
   1e700:	e7e8      	b.n	1e6d4 <sys_heap_alloc+0x58>
   1e702:	2000      	movs	r0, #0
   1e704:	e7e6      	b.n	1e6d4 <sys_heap_alloc+0x58>
		return NULL;
   1e706:	2000      	movs	r0, #0
   1e708:	e7e4      	b.n	1e6d4 <sys_heap_alloc+0x58>

0001e70a <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1e70a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e70e:	460d      	mov	r5, r1
   1e710:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   1e712:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1e714:	424b      	negs	r3, r1
   1e716:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   1e71a:	ea31 0303 	bics.w	r3, r1, r3
   1e71e:	d04e      	beq.n	1e7be <sys_heap_aligned_alloc+0xb4>
		align -= rew;
   1e720:	eba1 0508 	sub.w	r5, r1, r8
	return big_heap_chunks(h->end_chunk);
   1e724:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   1e726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e72a:	d346      	bcc.n	1e7ba <sys_heap_aligned_alloc+0xb0>
   1e72c:	2308      	movs	r3, #8
		gap = MIN(rew, chunk_header_bytes(h));
   1e72e:	4598      	cmp	r8, r3
   1e730:	d200      	bcs.n	1e734 <sys_heap_aligned_alloc+0x2a>
   1e732:	4643      	mov	r3, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1e734:	2c00      	cmp	r4, #0
   1e736:	d070      	beq.n	1e81a <sys_heap_aligned_alloc+0x110>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1e738:	68b2      	ldr	r2, [r6, #8]
   1e73a:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
   1e73e:	d96e      	bls.n	1e81e <sys_heap_aligned_alloc+0x114>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1e740:	1929      	adds	r1, r5, r4
   1e742:	1ac9      	subs	r1, r1, r3
	return big_heap(h) ? 8 : 4;
   1e744:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1e748:	d34a      	bcc.n	1e7e0 <sys_heap_aligned_alloc+0xd6>
   1e74a:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   1e74c:	4419      	add	r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e74e:	3107      	adds	r1, #7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1e750:	08c9      	lsrs	r1, r1, #3
   1e752:	4630      	mov	r0, r6
   1e754:	f7ff ff28 	bl	1e5a8 <alloc_chunk>

	if (c0 == 0) {
   1e758:	4607      	mov	r7, r0
   1e75a:	2800      	cmp	r0, #0
   1e75c:	d061      	beq.n	1e822 <sys_heap_aligned_alloc+0x118>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   1e75e:	4601      	mov	r1, r0
   1e760:	4630      	mov	r0, r6
   1e762:	f7ff fd77 	bl	1e254 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1e766:	4440      	add	r0, r8
   1e768:	4428      	add	r0, r5
   1e76a:	3801      	subs	r0, #1
   1e76c:	426d      	negs	r5, r5
   1e76e:	4005      	ands	r5, r0
   1e770:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1e774:	442c      	add	r4, r5
   1e776:	3407      	adds	r4, #7
   1e778:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   1e77c:	4629      	mov	r1, r5
   1e77e:	4630      	mov	r0, r6
   1e780:	f7ff fe5a 	bl	1e438 <mem_to_chunkid>
   1e784:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   1e786:	1ba4      	subs	r4, r4, r6
   1e788:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   1e78a:	4287      	cmp	r7, r0
   1e78c:	d32a      	bcc.n	1e7e4 <sys_heap_aligned_alloc+0xda>
	void *cmem = &buf[c];
   1e78e:	eb06 07c8 	add.w	r7, r6, r8, lsl #3
	return big_heap_chunks(h->end_chunk);
   1e792:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   1e794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e798:	d32e      	bcc.n	1e7f8 <sys_heap_aligned_alloc+0xee>
		return ((uint32_t *)cmem)[f];
   1e79a:	687b      	ldr	r3, [r7, #4]
	return c + chunk_size(h, c);
   1e79c:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   1e7a0:	429c      	cmp	r4, r3
   1e7a2:	d32b      	bcc.n	1e7fc <sys_heap_aligned_alloc+0xf2>
	return big_heap_chunks(h->end_chunk);
   1e7a4:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   1e7a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e7aa:	d331      	bcc.n	1e810 <sys_heap_aligned_alloc+0x106>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e7ac:	687b      	ldr	r3, [r7, #4]
   1e7ae:	f043 0301 	orr.w	r3, r3, #1
   1e7b2:	607b      	str	r3, [r7, #4]
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1e7b4:	4628      	mov	r0, r5
   1e7b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return big_heap(h) ? 8 : 4;
   1e7ba:	2304      	movs	r3, #4
   1e7bc:	e7b7      	b.n	1e72e <sys_heap_aligned_alloc+0x24>
	return big_heap_chunks(h->end_chunk);
   1e7be:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   1e7c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e7c4:	d305      	bcc.n	1e7d2 <sys_heap_aligned_alloc+0xc8>
   1e7c6:	2308      	movs	r3, #8
		if (align <= chunk_header_bytes(h)) {
   1e7c8:	429d      	cmp	r5, r3
   1e7ca:	d904      	bls.n	1e7d6 <sys_heap_aligned_alloc+0xcc>
		rew = 0;
   1e7cc:	f04f 0800 	mov.w	r8, #0
   1e7d0:	e7b0      	b.n	1e734 <sys_heap_aligned_alloc+0x2a>
   1e7d2:	2304      	movs	r3, #4
   1e7d4:	e7f8      	b.n	1e7c8 <sys_heap_aligned_alloc+0xbe>
			return sys_heap_alloc(heap, bytes);
   1e7d6:	4621      	mov	r1, r4
   1e7d8:	f7ff ff50 	bl	1e67c <sys_heap_alloc>
   1e7dc:	4605      	mov	r5, r0
   1e7de:	e7e9      	b.n	1e7b4 <sys_heap_aligned_alloc+0xaa>
   1e7e0:	2304      	movs	r3, #4
   1e7e2:	e7b3      	b.n	1e74c <sys_heap_aligned_alloc+0x42>
		split_chunks(h, c0, c);
   1e7e4:	4602      	mov	r2, r0
   1e7e6:	4639      	mov	r1, r7
   1e7e8:	4630      	mov	r0, r6
   1e7ea:	f7ff fdbb 	bl	1e364 <split_chunks>
		free_list_add(h, c0);
   1e7ee:	4639      	mov	r1, r7
   1e7f0:	4630      	mov	r0, r6
   1e7f2:	f7ff fe55 	bl	1e4a0 <free_list_add>
   1e7f6:	e7ca      	b.n	1e78e <sys_heap_aligned_alloc+0x84>
		return ((uint16_t *)cmem)[f];
   1e7f8:	887b      	ldrh	r3, [r7, #2]
   1e7fa:	e7cf      	b.n	1e79c <sys_heap_aligned_alloc+0x92>
		split_chunks(h, c, c_end);
   1e7fc:	4622      	mov	r2, r4
   1e7fe:	4641      	mov	r1, r8
   1e800:	4630      	mov	r0, r6
   1e802:	f7ff fdaf 	bl	1e364 <split_chunks>
		free_list_add(h, c_end);
   1e806:	4621      	mov	r1, r4
   1e808:	4630      	mov	r0, r6
   1e80a:	f7ff fe49 	bl	1e4a0 <free_list_add>
   1e80e:	e7c9      	b.n	1e7a4 <sys_heap_aligned_alloc+0x9a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e810:	887b      	ldrh	r3, [r7, #2]
   1e812:	f043 0301 	orr.w	r3, r3, #1
   1e816:	807b      	strh	r3, [r7, #2]
   1e818:	e7cc      	b.n	1e7b4 <sys_heap_aligned_alloc+0xaa>
		return NULL;
   1e81a:	2500      	movs	r5, #0
   1e81c:	e7ca      	b.n	1e7b4 <sys_heap_aligned_alloc+0xaa>
   1e81e:	2500      	movs	r5, #0
   1e820:	e7c8      	b.n	1e7b4 <sys_heap_aligned_alloc+0xaa>
		return NULL;
   1e822:	2500      	movs	r5, #0
   1e824:	e7c6      	b.n	1e7b4 <sys_heap_aligned_alloc+0xaa>

0001e826 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1e826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e828:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
   1e82a:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   1e82e:	d32a      	bcc.n	1e886 <sys_heap_init+0x60>
   1e830:	2508      	movs	r5, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1e832:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1e834:	1dc8      	adds	r0, r1, #7
   1e836:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1e83a:	440d      	add	r5, r1
   1e83c:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1e840:	1a2d      	subs	r5, r5, r0
   1e842:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   1e844:	4606      	mov	r6, r0
	heap->heap = h;
   1e846:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   1e848:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
   1e84a:	2300      	movs	r3, #0
   1e84c:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
   1e84e:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1e852:	d31a      	bcc.n	1e88a <sys_heap_init+0x64>
   1e854:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e856:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1e858:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
   1e85c:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   1e85e:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1e862:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1e866:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
   1e86a:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1e86c:	f103 0e07 	add.w	lr, r3, #7
   1e870:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1e874:	2300      	movs	r3, #0
   1e876:	4563      	cmp	r3, ip
   1e878:	da09      	bge.n	1e88e <sys_heap_init+0x68>
		h->buckets[i].next = 0;
   1e87a:	1d1a      	adds	r2, r3, #4
   1e87c:	2400      	movs	r4, #0
   1e87e:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   1e882:	3301      	adds	r3, #1
   1e884:	e7f7      	b.n	1e876 <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
   1e886:	2504      	movs	r5, #4
   1e888:	e7d3      	b.n	1e832 <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
   1e88a:	2304      	movs	r3, #4
   1e88c:	e7e3      	b.n	1e856 <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e88e:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
   1e890:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1e894:	d333      	bcc.n	1e8fe <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
   1e896:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
   1e898:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1e89c:	d331      	bcc.n	1e902 <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
   1e89e:	2300      	movs	r3, #0
   1e8a0:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
   1e8a2:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1e8a6:	d32f      	bcc.n	1e908 <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e8a8:	6843      	ldr	r3, [r0, #4]
   1e8aa:	f043 0301 	orr.w	r3, r3, #1
   1e8ae:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1e8b0:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1e8b2:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
   1e8b4:	f02e 0307 	bic.w	r3, lr, #7
   1e8b8:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
   1e8ba:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1e8be:	d328      	bcc.n	1e912 <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
   1e8c0:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   1e8c2:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1e8c4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1e8c8:	d325      	bcc.n	1e916 <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
   1e8ca:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
   1e8cc:	f025 0307 	bic.w	r3, r5, #7
   1e8d0:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
   1e8d2:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1e8d4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1e8d8:	d31f      	bcc.n	1e91a <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
   1e8da:	2400      	movs	r4, #0
   1e8dc:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
   1e8de:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1e8e0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1e8e4:	d31c      	bcc.n	1e920 <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
   1e8e6:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
   1e8e8:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   1e8ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1e8ee:	d319      	bcc.n	1e924 <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e8f0:	686b      	ldr	r3, [r5, #4]
   1e8f2:	f043 0301 	orr.w	r3, r3, #1
   1e8f6:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   1e8f8:	f7ff fdd2 	bl	1e4a0 <free_list_add>
}
   1e8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
   1e8fe:	8043      	strh	r3, [r0, #2]
   1e900:	e7ca      	b.n	1e898 <sys_heap_init+0x72>
   1e902:	2300      	movs	r3, #0
   1e904:	8003      	strh	r3, [r0, #0]
   1e906:	e7cc      	b.n	1e8a2 <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e908:	8843      	ldrh	r3, [r0, #2]
   1e90a:	f043 0301 	orr.w	r3, r3, #1
   1e90e:	8043      	strh	r3, [r0, #2]
   1e910:	e7ce      	b.n	1e8b0 <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
   1e912:	8066      	strh	r6, [r4, #2]
   1e914:	e7d5      	b.n	1e8c2 <sys_heap_init+0x9c>
   1e916:	52c1      	strh	r1, [r0, r3]
   1e918:	e7d8      	b.n	1e8cc <sys_heap_init+0xa6>
   1e91a:	2400      	movs	r4, #0
   1e91c:	806c      	strh	r4, [r5, #2]
   1e91e:	e7de      	b.n	1e8de <sys_heap_init+0xb8>
   1e920:	52c2      	strh	r2, [r0, r3]
   1e922:	e7e1      	b.n	1e8e8 <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1e924:	886b      	ldrh	r3, [r5, #2]
   1e926:	f043 0301 	orr.w	r3, r3, #1
   1e92a:	806b      	strh	r3, [r5, #2]
   1e92c:	e7e4      	b.n	1e8f8 <sys_heap_init+0xd2>

0001e92e <_ldiv5>:
{
   1e92e:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t v_lo = *v;
   1e930:	6806      	ldr	r6, [r0, #0]
   1e932:	6845      	ldr	r5, [r0, #4]
	uint32_t v_hi = *v >> 32;
   1e934:	f04f 0c00 	mov.w	ip, #0
	__asm__ ("" : "+r" (m));
   1e938:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
	result = ((uint64_t)m << 32) | m;
   1e93c:	4611      	mov	r1, r2
	result += (uint64_t)v_lo * m;
   1e93e:	fba6 6702 	umull	r6, r7, r6, r2
   1e942:	1871      	adds	r1, r6, r1
   1e944:	eb47 0102 	adc.w	r1, r7, r2
	result >>= 32;
   1e948:	4664      	mov	r4, ip
	result += (uint64_t)v_lo * m;
   1e94a:	1871      	adds	r1, r6, r1
   1e94c:	eb47 0404 	adc.w	r4, r7, r4
	result += (uint64_t)v_hi * m;
   1e950:	fba5 2302 	umull	r2, r3, r5, r2
   1e954:	1851      	adds	r1, r2, r1
   1e956:	eb43 0404 	adc.w	r4, r3, r4
	result >>= 32;
   1e95a:	4665      	mov	r5, ip
	result += (uint64_t)v_hi * m;
   1e95c:	1911      	adds	r1, r2, r4
   1e95e:	eb43 0505 	adc.w	r5, r3, r5
	*v = result;
   1e962:	6001      	str	r1, [r0, #0]
   1e964:	6045      	str	r5, [r0, #4]
}
   1e966:	bcf0      	pop	{r4, r5, r6, r7}
   1e968:	4770      	bx	lr

0001e96a <_ldiv10>:
{
   1e96a:	b508      	push	{r3, lr}
	*v >>= 1;
   1e96c:	6802      	ldr	r2, [r0, #0]
   1e96e:	6841      	ldr	r1, [r0, #4]
   1e970:	0852      	lsrs	r2, r2, #1
   1e972:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   1e976:	0849      	lsrs	r1, r1, #1
   1e978:	6002      	str	r2, [r0, #0]
   1e97a:	6041      	str	r1, [r0, #4]
	_ldiv5(v);
   1e97c:	f7ff ffd7 	bl	1e92e <_ldiv5>
}
   1e980:	bd08      	pop	{r3, pc}

0001e982 <_get_digit>:
	if (*digit_count > 0) {
   1e982:	680b      	ldr	r3, [r1, #0]
   1e984:	2b00      	cmp	r3, #0
   1e986:	dd16      	ble.n	1e9b6 <_get_digit+0x34>
{
   1e988:	b430      	push	{r4, r5}
   1e98a:	4604      	mov	r4, r0
		--*digit_count;
   1e98c:	3b01      	subs	r3, #1
   1e98e:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   1e990:	6801      	ldr	r1, [r0, #0]
   1e992:	6840      	ldr	r0, [r0, #4]
   1e994:	0085      	lsls	r5, r0, #2
   1e996:	008b      	lsls	r3, r1, #2
   1e998:	ea45 7291 	orr.w	r2, r5, r1, lsr #30
   1e99c:	185b      	adds	r3, r3, r1
   1e99e:	eb40 0202 	adc.w	r2, r0, r2
   1e9a2:	18db      	adds	r3, r3, r3
   1e9a4:	4152      	adcs	r2, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   1e9a6:	0f10      	lsrs	r0, r2, #28
   1e9a8:	3030      	adds	r0, #48	; 0x30
		*fr &= (BIT64(60) - 1U);
   1e9aa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   1e9ae:	6023      	str	r3, [r4, #0]
   1e9b0:	6062      	str	r2, [r4, #4]
}
   1e9b2:	bc30      	pop	{r4, r5}
   1e9b4:	4770      	bx	lr
		rval = '0';
   1e9b6:	2030      	movs	r0, #48	; 0x30
}
   1e9b8:	4770      	bx	lr

0001e9ba <outs>:
{
   1e9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e9be:	4607      	mov	r7, r0
   1e9c0:	460e      	mov	r6, r1
   1e9c2:	4614      	mov	r4, r2
   1e9c4:	4698      	mov	r8, r3
	size_t count = 0;
   1e9c6:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1e9c8:	e006      	b.n	1e9d8 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   1e9ca:	4631      	mov	r1, r6
   1e9cc:	f814 0b01 	ldrb.w	r0, [r4], #1
   1e9d0:	47b8      	blx	r7
		if (rc < 0) {
   1e9d2:	2800      	cmp	r0, #0
   1e9d4:	db09      	blt.n	1e9ea <outs+0x30>
		++count;
   1e9d6:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1e9d8:	4544      	cmp	r4, r8
   1e9da:	d3f6      	bcc.n	1e9ca <outs+0x10>
   1e9dc:	f1b8 0f00 	cmp.w	r8, #0
   1e9e0:	d102      	bne.n	1e9e8 <outs+0x2e>
   1e9e2:	7823      	ldrb	r3, [r4, #0]
   1e9e4:	2b00      	cmp	r3, #0
   1e9e6:	d1f0      	bne.n	1e9ca <outs+0x10>
	return (int)count;
   1e9e8:	4628      	mov	r0, r5
}
   1e9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e9ee <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1e9ee:	4770      	bx	lr

0001e9f0 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1e9f0:	b084      	sub	sp, #16
   1e9f2:	ab04      	add	r3, sp, #16
   1e9f4:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1e9f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1e9fc:	2b06      	cmp	r3, #6
   1e9fe:	d001      	beq.n	1ea04 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1ea00:	b004      	add	sp, #16
   1ea02:	4770      	bx	lr
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   1ea04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   1ea08:	2201      	movs	r2, #1
   1ea0a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1ea0e:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   1ea12:	bf20      	wfe
    while (true)
   1ea14:	e7fd      	b.n	1ea12 <pm_power_state_set+0x22>

0001ea16 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1ea16:	b084      	sub	sp, #16
   1ea18:	ab04      	add	r3, sp, #16
   1ea1a:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1ea1e:	2300      	movs	r3, #0
   1ea20:	f383 8811 	msr	BASEPRI, r3
   1ea24:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1ea28:	b004      	add	sp, #16
   1ea2a:	4770      	bx	lr

0001ea2c <nvs_flash_rd>:
}

/* basic flash read from nvs address */
static int nvs_flash_rd(struct nvs_fs *fs, uint32_t addr, void *data,
			 size_t len)
{
   1ea2c:	b570      	push	{r4, r5, r6, lr}
	int rc;
	off_t offset;

	offset = fs->offset;
   1ea2e:	6805      	ldr	r5, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1ea30:	8984      	ldrh	r4, [r0, #12]
   1ea32:	0c0e      	lsrs	r6, r1, #16
   1ea34:	fb06 5404 	mla	r4, r6, r4, r5
	offset += addr & ADDR_OFFS_MASK;
   1ea38:	fa14 f181 	uxtah	r1, r4, r1

	rc = flash_read(fs->flash_device, offset, data, len);
   1ea3c:	6a80      	ldr	r0, [r0, #40]	; 0x28

static inline int z_impl_flash_read(const struct device *dev, off_t offset,
				    void *data,
				    size_t len)
{
	const struct flash_driver_api *api =
   1ea3e:	6884      	ldr	r4, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
   1ea40:	6824      	ldr	r4, [r4, #0]
   1ea42:	47a0      	blx	r4
	return rc;

}
   1ea44:	bd70      	pop	{r4, r5, r6, pc}

0001ea46 <nvs_flash_ate_rd>:
}

/* flash ate read */
static int nvs_flash_ate_rd(struct nvs_fs *fs, uint32_t addr,
			     struct nvs_ate *entry)
{
   1ea46:	b508      	push	{r3, lr}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1ea48:	2308      	movs	r3, #8
   1ea4a:	f7ff ffef 	bl	1ea2c <nvs_flash_rd>
}
   1ea4e:	bd08      	pop	{r3, pc}

0001ea50 <nvs_ate_cmp_const>:
static int nvs_ate_cmp_const(const struct nvs_ate *entry, uint8_t value)
{
	const uint8_t *data8 = (const uint8_t *)entry;
	int i;

	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1ea50:	2300      	movs	r3, #0
   1ea52:	e000      	b.n	1ea56 <nvs_ate_cmp_const+0x6>
   1ea54:	3301      	adds	r3, #1
   1ea56:	2b07      	cmp	r3, #7
   1ea58:	d804      	bhi.n	1ea64 <nvs_ate_cmp_const+0x14>
		if (data8[i] != value) {
   1ea5a:	5cc2      	ldrb	r2, [r0, r3]
   1ea5c:	428a      	cmp	r2, r1
   1ea5e:	d0f9      	beq.n	1ea54 <nvs_ate_cmp_const+0x4>
			return 1;
   1ea60:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   1ea62:	4770      	bx	lr
	return 0;
   1ea64:	2000      	movs	r0, #0
   1ea66:	4770      	bx	lr

0001ea68 <nvs_sector_advance>:
	return nvs_recover_last_ate(fs, addr);
}

static void nvs_sector_advance(struct nvs_fs *fs, uint32_t *addr)
{
	*addr += (1 << ADDR_SECT_SHIFT);
   1ea68:	680b      	ldr	r3, [r1, #0]
   1ea6a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   1ea6e:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   1ea70:	89c2      	ldrh	r2, [r0, #14]
   1ea72:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   1ea76:	d000      	beq.n	1ea7a <nvs_sector_advance+0x12>
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
	}
}
   1ea78:	4770      	bx	lr
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   1ea7a:	eba3 4302 	sub.w	r3, r3, r2, lsl #16
   1ea7e:	600b      	str	r3, [r1, #0]
}
   1ea80:	e7fa      	b.n	1ea78 <nvs_sector_advance+0x10>

0001ea82 <nvs_flash_block_cmp>:
{
   1ea82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ea86:	b089      	sub	sp, #36	; 0x24
   1ea88:	4681      	mov	r9, r0
   1ea8a:	460e      	mov	r6, r1
   1ea8c:	4617      	mov	r7, r2
   1ea8e:	461d      	mov	r5, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1ea90:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1ea92:	681b      	ldr	r3, [r3, #0]
   1ea94:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
   1ea98:	f008 0820 	and.w	r8, r8, #32
	while (len) {
   1ea9c:	e002      	b.n	1eaa4 <nvs_flash_block_cmp+0x22>
		len -= bytes_to_cmp;
   1ea9e:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_cmp;
   1eaa0:	4426      	add	r6, r4
		data8 += bytes_to_cmp;
   1eaa2:	4427      	add	r7, r4
	while (len) {
   1eaa4:	b1a5      	cbz	r5, 1ead0 <nvs_flash_block_cmp+0x4e>
		bytes_to_cmp = MIN(block_size, len);
   1eaa6:	462c      	mov	r4, r5
   1eaa8:	4545      	cmp	r5, r8
   1eaaa:	bf28      	it	cs
   1eaac:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   1eaae:	4623      	mov	r3, r4
   1eab0:	466a      	mov	r2, sp
   1eab2:	4631      	mov	r1, r6
   1eab4:	4648      	mov	r0, r9
   1eab6:	f7ff ffb9 	bl	1ea2c <nvs_flash_rd>
		if (rc) {
   1eaba:	4603      	mov	r3, r0
   1eabc:	b948      	cbnz	r0, 1ead2 <nvs_flash_block_cmp+0x50>
		rc = memcmp(data8, buf, bytes_to_cmp);
   1eabe:	4622      	mov	r2, r4
   1eac0:	4669      	mov	r1, sp
   1eac2:	4638      	mov	r0, r7
   1eac4:	f004 fa49 	bl	22f5a <memcmp>
		if (rc) {
   1eac8:	2800      	cmp	r0, #0
   1eaca:	d0e8      	beq.n	1ea9e <nvs_flash_block_cmp+0x1c>
			return 1;
   1eacc:	2301      	movs	r3, #1
   1eace:	e000      	b.n	1ead2 <nvs_flash_block_cmp+0x50>
	return 0;
   1ead0:	2300      	movs	r3, #0
}
   1ead2:	4618      	mov	r0, r3
   1ead4:	b009      	add	sp, #36	; 0x24
   1ead6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001eada <nvs_flash_cmp_const>:
{
   1eada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eade:	b088      	sub	sp, #32
   1eae0:	4680      	mov	r8, r0
   1eae2:	460e      	mov	r6, r1
   1eae4:	4611      	mov	r1, r2
   1eae6:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1eae8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1eaea:	681f      	ldr	r7, [r3, #0]
   1eaec:	427f      	negs	r7, r7
	block_size =
   1eaee:	f007 0720 	and.w	r7, r7, #32
	(void)memset(cmp, value, block_size);
   1eaf2:	2320      	movs	r3, #32
   1eaf4:	463a      	mov	r2, r7
   1eaf6:	4668      	mov	r0, sp
   1eaf8:	f004 fa65 	bl	22fc6 <__memset_chk>
	while (len) {
   1eafc:	b174      	cbz	r4, 1eb1c <nvs_flash_cmp_const+0x42>
		bytes_to_cmp = MIN(block_size, len);
   1eafe:	4625      	mov	r5, r4
   1eb00:	42bc      	cmp	r4, r7
   1eb02:	bf28      	it	cs
   1eb04:	463d      	movcs	r5, r7
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   1eb06:	462b      	mov	r3, r5
   1eb08:	466a      	mov	r2, sp
   1eb0a:	4631      	mov	r1, r6
   1eb0c:	4640      	mov	r0, r8
   1eb0e:	f7ff ffb8 	bl	1ea82 <nvs_flash_block_cmp>
		if (rc) {
   1eb12:	4603      	mov	r3, r0
   1eb14:	b918      	cbnz	r0, 1eb1e <nvs_flash_cmp_const+0x44>
		len -= bytes_to_cmp;
   1eb16:	1b64      	subs	r4, r4, r5
		addr += bytes_to_cmp;
   1eb18:	442e      	add	r6, r5
   1eb1a:	e7ef      	b.n	1eafc <nvs_flash_cmp_const+0x22>
	return 0;
   1eb1c:	2300      	movs	r3, #0
}
   1eb1e:	4618      	mov	r0, r3
   1eb20:	b008      	add	sp, #32
   1eb22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001eb26 <nvs_flash_erase_sector>:
{
   1eb26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1eb2a:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   1eb2c:	ea4f 4811 	mov.w	r8, r1, lsr #16
   1eb30:	ea4f 4808 	mov.w	r8, r8, lsl #16
	offset = fs->offset;
   1eb34:	6805      	ldr	r5, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1eb36:	f8b0 900c 	ldrh.w	r9, [r0, #12]
   1eb3a:	0c09      	lsrs	r1, r1, #16
   1eb3c:	fb01 5509 	mla	r5, r1, r9, r5
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   1eb40:	6a87      	ldr	r7, [r0, #40]	; 0x28
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
   1eb42:	f8d7 a008 	ldr.w	sl, [r7, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
   1eb46:	f8da 300c 	ldr.w	r3, [sl, #12]
   1eb4a:	b123      	cbz	r3, 1eb56 <nvs_flash_erase_sector+0x30>
		rc = api->write_protection(dev, false);
   1eb4c:	2100      	movs	r1, #0
   1eb4e:	4638      	mov	r0, r7
   1eb50:	4798      	blx	r3
		if (rc) {
   1eb52:	4606      	mov	r6, r0
   1eb54:	b960      	cbnz	r0, 1eb70 <nvs_flash_erase_sector+0x4a>
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
   1eb56:	f8da 3008 	ldr.w	r3, [sl, #8]
   1eb5a:	464a      	mov	r2, r9
   1eb5c:	4629      	mov	r1, r5
   1eb5e:	4638      	mov	r0, r7
   1eb60:	4798      	blx	r3
   1eb62:	4606      	mov	r6, r0

	if (api->write_protection != NULL) {
   1eb64:	f8da 300c 	ldr.w	r3, [sl, #12]
   1eb68:	b113      	cbz	r3, 1eb70 <nvs_flash_erase_sector+0x4a>
		(void) api->write_protection(dev, true);
   1eb6a:	2101      	movs	r1, #1
   1eb6c:	4638      	mov	r0, r7
   1eb6e:	4798      	blx	r3
	if (rc) {
   1eb70:	b116      	cbz	r6, 1eb78 <nvs_flash_erase_sector+0x52>
}
   1eb72:	4630      	mov	r0, r6
   1eb74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   1eb78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1eb7a:	89a3      	ldrh	r3, [r4, #12]
   1eb7c:	7912      	ldrb	r2, [r2, #4]
   1eb7e:	4641      	mov	r1, r8
   1eb80:	4620      	mov	r0, r4
   1eb82:	f7ff ffaa 	bl	1eada <nvs_flash_cmp_const>
   1eb86:	2800      	cmp	r0, #0
   1eb88:	d0f3      	beq.n	1eb72 <nvs_flash_erase_sector+0x4c>
		rc = -ENXIO;
   1eb8a:	f06f 0605 	mvn.w	r6, #5
   1eb8e:	e7f0      	b.n	1eb72 <nvs_flash_erase_sector+0x4c>

0001eb90 <nvs_ate_crc8_check>:
{
   1eb90:	b510      	push	{r4, lr}
   1eb92:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1eb94:	2207      	movs	r2, #7
   1eb96:	4601      	mov	r1, r0
   1eb98:	20ff      	movs	r0, #255	; 0xff
   1eb9a:	f7f3 fa93 	bl	120c4 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   1eb9e:	79e3      	ldrb	r3, [r4, #7]
   1eba0:	4283      	cmp	r3, r0
   1eba2:	d001      	beq.n	1eba8 <nvs_ate_crc8_check+0x18>
	return 1;
   1eba4:	2001      	movs	r0, #1
}
   1eba6:	bd10      	pop	{r4, pc}
		return 0;
   1eba8:	2000      	movs	r0, #0
   1ebaa:	e7fc      	b.n	1eba6 <nvs_ate_crc8_check+0x16>

0001ebac <nvs_ate_valid>:
{
   1ebac:	b570      	push	{r4, r5, r6, lr}
   1ebae:	4604      	mov	r4, r0
   1ebb0:	460d      	mov	r5, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   1ebb2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1ebb4:	681b      	ldr	r3, [r3, #0]
   1ebb6:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   1ebb8:	2a01      	cmp	r2, #1
   1ebba:	d90d      	bls.n	1ebd8 <nvs_ate_valid+0x2c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1ebbc:	1dd6      	adds	r6, r2, #7
   1ebbe:	4253      	negs	r3, r2
   1ebc0:	401e      	ands	r6, r3
	if ((nvs_ate_crc8_check(entry)) ||
   1ebc2:	4628      	mov	r0, r5
   1ebc4:	f7ff ffe4 	bl	1eb90 <nvs_ate_crc8_check>
   1ebc8:	b940      	cbnz	r0, 1ebdc <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   1ebca:	886a      	ldrh	r2, [r5, #2]
   1ebcc:	89a3      	ldrh	r3, [r4, #12]
   1ebce:	1b9b      	subs	r3, r3, r6
	if ((nvs_ate_crc8_check(entry)) ||
   1ebd0:	429a      	cmp	r2, r3
   1ebd2:	d205      	bcs.n	1ebe0 <nvs_ate_valid+0x34>
	return 1;
   1ebd4:	2001      	movs	r0, #1
}
   1ebd6:	bd70      	pop	{r4, r5, r6, pc}
		return len;
   1ebd8:	2608      	movs	r6, #8
   1ebda:	e7f2      	b.n	1ebc2 <nvs_ate_valid+0x16>
		return 0;
   1ebdc:	2000      	movs	r0, #0
   1ebde:	e7fa      	b.n	1ebd6 <nvs_ate_valid+0x2a>
   1ebe0:	2000      	movs	r0, #0
   1ebe2:	e7f8      	b.n	1ebd6 <nvs_ate_valid+0x2a>

0001ebe4 <nvs_recover_last_ate>:
{
   1ebe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ebe8:	b082      	sub	sp, #8
   1ebea:	4606      	mov	r6, r0
   1ebec:	4688      	mov	r8, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   1ebee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1ebf0:	681f      	ldr	r7, [r3, #0]
   1ebf2:	b2fb      	uxtb	r3, r7
	if (write_block_size <= 1U) {
   1ebf4:	2b01      	cmp	r3, #1
   1ebf6:	d90b      	bls.n	1ec10 <nvs_recover_last_ate+0x2c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1ebf8:	461f      	mov	r7, r3
   1ebfa:	3307      	adds	r3, #7
   1ebfc:	427f      	negs	r7, r7
   1ebfe:	401f      	ands	r7, r3
	*addr -= ate_size;
   1ec00:	f8d8 4000 	ldr.w	r4, [r8]
   1ec04:	1be4      	subs	r4, r4, r7
   1ec06:	f8c8 4000 	str.w	r4, [r8]
	data_end_addr = *addr & ADDR_SECT_MASK;
   1ec0a:	0c25      	lsrs	r5, r4, #16
   1ec0c:	042d      	lsls	r5, r5, #16
	while (ate_end_addr > data_end_addr) {
   1ec0e:	e002      	b.n	1ec16 <nvs_recover_last_ate+0x32>
		return len;
   1ec10:	2708      	movs	r7, #8
   1ec12:	e7f5      	b.n	1ec00 <nvs_recover_last_ate+0x1c>
		ate_end_addr -= ate_size;
   1ec14:	1be4      	subs	r4, r4, r7
	while (ate_end_addr > data_end_addr) {
   1ec16:	42ac      	cmp	r4, r5
   1ec18:	d917      	bls.n	1ec4a <nvs_recover_last_ate+0x66>
		rc = nvs_flash_ate_rd(fs, ate_end_addr, &end_ate);
   1ec1a:	466a      	mov	r2, sp
   1ec1c:	4621      	mov	r1, r4
   1ec1e:	4630      	mov	r0, r6
   1ec20:	f7ff ff11 	bl	1ea46 <nvs_flash_ate_rd>
		if (rc) {
   1ec24:	4603      	mov	r3, r0
   1ec26:	b988      	cbnz	r0, 1ec4c <nvs_recover_last_ate+0x68>
		if (nvs_ate_valid(fs, &end_ate)) {
   1ec28:	4669      	mov	r1, sp
   1ec2a:	4630      	mov	r0, r6
   1ec2c:	f7ff ffbe 	bl	1ebac <nvs_ate_valid>
   1ec30:	2800      	cmp	r0, #0
   1ec32:	d0ef      	beq.n	1ec14 <nvs_recover_last_ate+0x30>
			data_end_addr &= ADDR_SECT_MASK;
   1ec34:	0c2d      	lsrs	r5, r5, #16
   1ec36:	042d      	lsls	r5, r5, #16
			data_end_addr += end_ate.offset + end_ate.len;
   1ec38:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1ec3c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1ec40:	4413      	add	r3, r2
   1ec42:	441d      	add	r5, r3
			*addr = ate_end_addr;
   1ec44:	f8c8 4000 	str.w	r4, [r8]
   1ec48:	e7e4      	b.n	1ec14 <nvs_recover_last_ate+0x30>
	return 0;
   1ec4a:	2300      	movs	r3, #0
}
   1ec4c:	4618      	mov	r0, r3
   1ec4e:	b002      	add	sp, #8
   1ec50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ec54 <nvs_close_ate_valid>:
{
   1ec54:	b538      	push	{r3, r4, r5, lr}
   1ec56:	4605      	mov	r5, r0
   1ec58:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   1ec5a:	f7ff ffa7 	bl	1ebac <nvs_ate_valid>
   1ec5e:	b1e0      	cbz	r0, 1ec9a <nvs_close_ate_valid+0x46>
   1ec60:	88a3      	ldrh	r3, [r4, #4]
   1ec62:	b9cb      	cbnz	r3, 1ec98 <nvs_close_ate_valid+0x44>
	    (entry->id != 0xFFFF)) {
   1ec64:	8822      	ldrh	r2, [r4, #0]
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   1ec66:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ec6a:	429a      	cmp	r2, r3
   1ec6c:	d116      	bne.n	1ec9c <nvs_close_ate_valid+0x48>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   1ec6e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1ec70:	681b      	ldr	r3, [r3, #0]
   1ec72:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   1ec74:	2a01      	cmp	r2, #1
   1ec76:	d90d      	bls.n	1ec94 <nvs_close_ate_valid+0x40>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1ec78:	4613      	mov	r3, r2
   1ec7a:	3207      	adds	r2, #7
   1ec7c:	425b      	negs	r3, r3
   1ec7e:	4013      	ands	r3, r2
	if ((fs->sector_size - entry->offset) % ate_size) {
   1ec80:	89aa      	ldrh	r2, [r5, #12]
   1ec82:	8861      	ldrh	r1, [r4, #2]
   1ec84:	1a52      	subs	r2, r2, r1
   1ec86:	fbb2 f1f3 	udiv	r1, r2, r3
   1ec8a:	fb03 2311 	mls	r3, r3, r1, r2
   1ec8e:	b93b      	cbnz	r3, 1eca0 <nvs_close_ate_valid+0x4c>
	return 1;
   1ec90:	2001      	movs	r0, #1
   1ec92:	e002      	b.n	1ec9a <nvs_close_ate_valid+0x46>
		return len;
   1ec94:	2308      	movs	r3, #8
   1ec96:	e7f3      	b.n	1ec80 <nvs_close_ate_valid+0x2c>
		return 0;
   1ec98:	2000      	movs	r0, #0
}
   1ec9a:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   1ec9c:	2000      	movs	r0, #0
   1ec9e:	e7fc      	b.n	1ec9a <nvs_close_ate_valid+0x46>
		return 0;
   1eca0:	2000      	movs	r0, #0
   1eca2:	e7fa      	b.n	1ec9a <nvs_close_ate_valid+0x46>

0001eca4 <nvs_prev_ate>:
{
   1eca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eca6:	b083      	sub	sp, #12
   1eca8:	4604      	mov	r4, r0
   1ecaa:	460d      	mov	r5, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   1ecac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1ecae:	681b      	ldr	r3, [r3, #0]
   1ecb0:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
   1ecb2:	2901      	cmp	r1, #1
   1ecb4:	d92a      	bls.n	1ed0c <nvs_prev_ate+0x68>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1ecb6:	1dce      	adds	r6, r1, #7
   1ecb8:	424b      	negs	r3, r1
   1ecba:	401e      	ands	r6, r3
	rc = nvs_flash_ate_rd(fs, *addr, ate);
   1ecbc:	6829      	ldr	r1, [r5, #0]
   1ecbe:	4620      	mov	r0, r4
   1ecc0:	f7ff fec1 	bl	1ea46 <nvs_flash_ate_rd>
	if (rc) {
   1ecc4:	4607      	mov	r7, r0
   1ecc6:	b9f0      	cbnz	r0, 1ed06 <nvs_prev_ate+0x62>
	*addr += ate_size;
   1ecc8:	682a      	ldr	r2, [r5, #0]
   1ecca:	4432      	add	r2, r6
   1eccc:	602a      	str	r2, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1ecce:	b291      	uxth	r1, r2
   1ecd0:	89a3      	ldrh	r3, [r4, #12]
   1ecd2:	1b9b      	subs	r3, r3, r6
   1ecd4:	4299      	cmp	r1, r3
   1ecd6:	d116      	bne.n	1ed06 <nvs_prev_ate+0x62>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   1ecd8:	0c13      	lsrs	r3, r2, #16
   1ecda:	d119      	bne.n	1ed10 <nvs_prev_ate+0x6c>
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   1ecdc:	89e3      	ldrh	r3, [r4, #14]
   1ecde:	3b01      	subs	r3, #1
   1ece0:	eb02 4203 	add.w	r2, r2, r3, lsl #16
   1ece4:	602a      	str	r2, [r5, #0]
	rc = nvs_flash_ate_rd(fs, *addr, &close_ate);
   1ece6:	466a      	mov	r2, sp
   1ece8:	6829      	ldr	r1, [r5, #0]
   1ecea:	4620      	mov	r0, r4
   1ecec:	f7ff feab 	bl	1ea46 <nvs_flash_ate_rd>
	if (rc) {
   1ecf0:	4607      	mov	r7, r0
   1ecf2:	b940      	cbnz	r0, 1ed06 <nvs_prev_ate+0x62>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   1ecf4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ecf6:	7919      	ldrb	r1, [r3, #4]
   1ecf8:	4668      	mov	r0, sp
   1ecfa:	f7ff fea9 	bl	1ea50 <nvs_ate_cmp_const>
	if (!rc) {
   1ecfe:	b958      	cbnz	r0, 1ed18 <nvs_prev_ate+0x74>
		*addr = fs->ate_wra;
   1ed00:	6862      	ldr	r2, [r4, #4]
   1ed02:	602a      	str	r2, [r5, #0]
		return 0;
   1ed04:	4607      	mov	r7, r0
}
   1ed06:	4638      	mov	r0, r7
   1ed08:	b003      	add	sp, #12
   1ed0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return len;
   1ed0c:	2608      	movs	r6, #8
   1ed0e:	e7d5      	b.n	1ecbc <nvs_prev_ate+0x18>
		*addr -= (1 << ADDR_SECT_SHIFT);
   1ed10:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   1ed14:	602a      	str	r2, [r5, #0]
   1ed16:	e7e6      	b.n	1ece6 <nvs_prev_ate+0x42>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   1ed18:	4669      	mov	r1, sp
   1ed1a:	4620      	mov	r0, r4
   1ed1c:	f7ff ff9a 	bl	1ec54 <nvs_close_ate_valid>
   1ed20:	b130      	cbz	r0, 1ed30 <nvs_prev_ate+0x8c>
		(*addr) &= ADDR_SECT_MASK;
   1ed22:	886a      	ldrh	r2, [r5, #2]
		(*addr) += close_ate.offset;
   1ed24:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1ed28:	eb03 4302 	add.w	r3, r3, r2, lsl #16
   1ed2c:	602b      	str	r3, [r5, #0]
		return 0;
   1ed2e:	e7ea      	b.n	1ed06 <nvs_prev_ate+0x62>
	return nvs_recover_last_ate(fs, addr);
   1ed30:	4629      	mov	r1, r5
   1ed32:	4620      	mov	r0, r4
   1ed34:	f7ff ff56 	bl	1ebe4 <nvs_recover_last_ate>
   1ed38:	4607      	mov	r7, r0
   1ed3a:	e7e4      	b.n	1ed06 <nvs_prev_ate+0x62>

0001ed3c <nvs_ate_crc8_update>:
{
   1ed3c:	b510      	push	{r4, lr}
   1ed3e:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1ed40:	2207      	movs	r2, #7
   1ed42:	4601      	mov	r1, r0
   1ed44:	20ff      	movs	r0, #255	; 0xff
   1ed46:	f7f3 f9bd 	bl	120c4 <crc8_ccitt>
	entry->crc8 = crc8;
   1ed4a:	71e0      	strb	r0, [r4, #7]
}
   1ed4c:	bd10      	pop	{r4, pc}

0001ed4e <nvs_flash_al_wrt>:
{
   1ed4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed52:	b089      	sub	sp, #36	; 0x24
	if (!len) {
   1ed54:	2b00      	cmp	r3, #0
   1ed56:	d063      	beq.n	1ee20 <nvs_flash_al_wrt+0xd2>
   1ed58:	4605      	mov	r5, r0
   1ed5a:	4691      	mov	r9, r2
   1ed5c:	4698      	mov	r8, r3
	offset = fs->offset;
   1ed5e:	6803      	ldr	r3, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1ed60:	8984      	ldrh	r4, [r0, #12]
   1ed62:	0c0a      	lsrs	r2, r1, #16
   1ed64:	fb02 3404 	mla	r4, r2, r4, r3
	offset += addr & ADDR_OFFS_MASK;
   1ed68:	fa14 f481 	uxtah	r4, r4, r1
   1ed6c:	46a2      	mov	sl, r4
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   1ed6e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1ed70:	681b      	ldr	r3, [r3, #0]
   1ed72:	425b      	negs	r3, r3
	if (blen > 0) {
   1ed74:	ea13 0608 	ands.w	r6, r3, r8
   1ed78:	d107      	bne.n	1ed8a <nvs_flash_al_wrt+0x3c>
	int rc = 0;
   1ed7a:	2700      	movs	r7, #0
	if (len) {
   1ed7c:	f1b8 0f00 	cmp.w	r8, #0
   1ed80:	d125      	bne.n	1edce <nvs_flash_al_wrt+0x80>
}
   1ed82:	4638      	mov	r0, r7
   1ed84:	b009      	add	sp, #36	; 0x24
   1ed86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = flash_write(fs->flash_device, offset, data8, blen);
   1ed8a:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
   1ed8e:	f8da b008 	ldr.w	fp, [sl, #8]
	if (api->write_protection != NULL) {
   1ed92:	f8db 300c 	ldr.w	r3, [fp, #12]
   1ed96:	b123      	cbz	r3, 1eda2 <nvs_flash_al_wrt+0x54>
		rc = api->write_protection(dev, false);
   1ed98:	2100      	movs	r1, #0
   1ed9a:	4650      	mov	r0, sl
   1ed9c:	4798      	blx	r3
		if (rc) {
   1ed9e:	4607      	mov	r7, r0
   1eda0:	b968      	cbnz	r0, 1edbe <nvs_flash_al_wrt+0x70>
	rc = api->write(dev, offset, data, len);
   1eda2:	f8db 7004 	ldr.w	r7, [fp, #4]
   1eda6:	4633      	mov	r3, r6
   1eda8:	464a      	mov	r2, r9
   1edaa:	4621      	mov	r1, r4
   1edac:	4650      	mov	r0, sl
   1edae:	47b8      	blx	r7
   1edb0:	4607      	mov	r7, r0
	if (api->write_protection != NULL) {
   1edb2:	f8db 300c 	ldr.w	r3, [fp, #12]
   1edb6:	b113      	cbz	r3, 1edbe <nvs_flash_al_wrt+0x70>
		(void) api->write_protection(dev, true);
   1edb8:	2101      	movs	r1, #1
   1edba:	4650      	mov	r0, sl
   1edbc:	4798      	blx	r3
		if (rc) {
   1edbe:	2f00      	cmp	r7, #0
   1edc0:	d1df      	bne.n	1ed82 <nvs_flash_al_wrt+0x34>
		len -= blen;
   1edc2:	eba8 0806 	sub.w	r8, r8, r6
		offset += blen;
   1edc6:	eb04 0a06 	add.w	sl, r4, r6
		data8 += blen;
   1edca:	44b1      	add	r9, r6
   1edcc:	e7d6      	b.n	1ed7c <nvs_flash_al_wrt+0x2e>
		memcpy(buf, data8, len);
   1edce:	2320      	movs	r3, #32
   1edd0:	4642      	mov	r2, r8
   1edd2:	4649      	mov	r1, r9
   1edd4:	4668      	mov	r0, sp
   1edd6:	f004 f8db 	bl	22f90 <__memcpy_chk>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   1edda:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1eddc:	681a      	ldr	r2, [r3, #0]
__ssp_bos_icheck3(memset, void *, int)
   1edde:	eba2 0208 	sub.w	r2, r2, r8
   1ede2:	7919      	ldrb	r1, [r3, #4]
   1ede4:	eb0d 0008 	add.w	r0, sp, r8
   1ede8:	f004 f8e5 	bl	22fb6 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   1edec:	6aac      	ldr	r4, [r5, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   1edee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		rc = flash_write(fs->flash_device, offset, buf,
   1edf0:	681e      	ldr	r6, [r3, #0]
	const struct flash_driver_api *api =
   1edf2:	68a5      	ldr	r5, [r4, #8]
	if (api->write_protection != NULL) {
   1edf4:	68eb      	ldr	r3, [r5, #12]
   1edf6:	b12b      	cbz	r3, 1ee04 <nvs_flash_al_wrt+0xb6>
		rc = api->write_protection(dev, false);
   1edf8:	2100      	movs	r1, #0
   1edfa:	4620      	mov	r0, r4
   1edfc:	4798      	blx	r3
		if (rc) {
   1edfe:	4607      	mov	r7, r0
   1ee00:	2800      	cmp	r0, #0
   1ee02:	d1be      	bne.n	1ed82 <nvs_flash_al_wrt+0x34>
	rc = api->write(dev, offset, data, len);
   1ee04:	686f      	ldr	r7, [r5, #4]
   1ee06:	4633      	mov	r3, r6
   1ee08:	466a      	mov	r2, sp
   1ee0a:	4651      	mov	r1, sl
   1ee0c:	4620      	mov	r0, r4
   1ee0e:	47b8      	blx	r7
   1ee10:	4607      	mov	r7, r0
	if (api->write_protection != NULL) {
   1ee12:	68eb      	ldr	r3, [r5, #12]
   1ee14:	2b00      	cmp	r3, #0
   1ee16:	d0b4      	beq.n	1ed82 <nvs_flash_al_wrt+0x34>
		(void) api->write_protection(dev, true);
   1ee18:	2101      	movs	r1, #1
   1ee1a:	4620      	mov	r0, r4
   1ee1c:	4798      	blx	r3
   1ee1e:	e7b0      	b.n	1ed82 <nvs_flash_al_wrt+0x34>
		return 0;
   1ee20:	2700      	movs	r7, #0
   1ee22:	e7ae      	b.n	1ed82 <nvs_flash_al_wrt+0x34>

0001ee24 <nvs_flash_data_wrt>:
{
   1ee24:	b538      	push	{r3, r4, r5, lr}
   1ee26:	4605      	mov	r5, r0
   1ee28:	4614      	mov	r4, r2
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   1ee2a:	4613      	mov	r3, r2
   1ee2c:	460a      	mov	r2, r1
   1ee2e:	6881      	ldr	r1, [r0, #8]
   1ee30:	f7ff ff8d 	bl	1ed4e <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   1ee34:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1ee36:	681a      	ldr	r2, [r3, #0]
   1ee38:	b2d3      	uxtb	r3, r2
	if (write_block_size <= 1U) {
   1ee3a:	2b01      	cmp	r3, #1
   1ee3c:	d903      	bls.n	1ee46 <nvs_flash_data_wrt+0x22>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1ee3e:	441c      	add	r4, r3
   1ee40:	3c01      	subs	r4, #1
   1ee42:	425a      	negs	r2, r3
   1ee44:	4014      	ands	r4, r2
	fs->data_wra += nvs_al_size(fs, len);
   1ee46:	68aa      	ldr	r2, [r5, #8]
   1ee48:	4422      	add	r2, r4
   1ee4a:	60aa      	str	r2, [r5, #8]
}
   1ee4c:	bd38      	pop	{r3, r4, r5, pc}

0001ee4e <nvs_flash_block_move>:
{
   1ee4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ee52:	b088      	sub	sp, #32
   1ee54:	4607      	mov	r7, r0
   1ee56:	460e      	mov	r6, r1
   1ee58:	4615      	mov	r5, r2
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1ee5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1ee5c:	681b      	ldr	r3, [r3, #0]
   1ee5e:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
   1ee62:	f008 0820 	and.w	r8, r8, #32
	while (len) {
   1ee66:	e001      	b.n	1ee6c <nvs_flash_block_move+0x1e>
		len -= bytes_to_copy;
   1ee68:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_copy;
   1ee6a:	4426      	add	r6, r4
	while (len) {
   1ee6c:	b1a5      	cbz	r5, 1ee98 <nvs_flash_block_move+0x4a>
		bytes_to_copy = MIN(block_size, len);
   1ee6e:	462c      	mov	r4, r5
   1ee70:	4545      	cmp	r5, r8
   1ee72:	bf28      	it	cs
   1ee74:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   1ee76:	4623      	mov	r3, r4
   1ee78:	466a      	mov	r2, sp
   1ee7a:	4631      	mov	r1, r6
   1ee7c:	4638      	mov	r0, r7
   1ee7e:	f7ff fdd5 	bl	1ea2c <nvs_flash_rd>
		if (rc) {
   1ee82:	4603      	mov	r3, r0
   1ee84:	b948      	cbnz	r0, 1ee9a <nvs_flash_block_move+0x4c>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   1ee86:	4622      	mov	r2, r4
   1ee88:	4669      	mov	r1, sp
   1ee8a:	4638      	mov	r0, r7
   1ee8c:	f7ff ffca 	bl	1ee24 <nvs_flash_data_wrt>
		if (rc) {
   1ee90:	4603      	mov	r3, r0
   1ee92:	2800      	cmp	r0, #0
   1ee94:	d0e8      	beq.n	1ee68 <nvs_flash_block_move+0x1a>
   1ee96:	e000      	b.n	1ee9a <nvs_flash_block_move+0x4c>
	return 0;
   1ee98:	2300      	movs	r3, #0
}
   1ee9a:	4618      	mov	r0, r3
   1ee9c:	b008      	add	sp, #32
   1ee9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001eea2 <nvs_flash_ate_wrt>:
{
   1eea2:	b510      	push	{r4, lr}
   1eea4:	4604      	mov	r4, r0
   1eea6:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   1eea8:	2308      	movs	r3, #8
   1eeaa:	6841      	ldr	r1, [r0, #4]
   1eeac:	f7ff ff4f 	bl	1ed4e <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   1eeb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1eeb2:	681b      	ldr	r3, [r3, #0]
   1eeb4:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   1eeb6:	2a01      	cmp	r2, #1
   1eeb8:	d907      	bls.n	1eeca <nvs_flash_ate_wrt+0x28>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1eeba:	4613      	mov	r3, r2
   1eebc:	3207      	adds	r2, #7
   1eebe:	425b      	negs	r3, r3
   1eec0:	4013      	ands	r3, r2
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   1eec2:	6862      	ldr	r2, [r4, #4]
   1eec4:	1ad2      	subs	r2, r2, r3
   1eec6:	6062      	str	r2, [r4, #4]
}
   1eec8:	bd10      	pop	{r4, pc}
		return len;
   1eeca:	2308      	movs	r3, #8
   1eecc:	e7f9      	b.n	1eec2 <nvs_flash_ate_wrt+0x20>

0001eece <nvs_add_gc_done_ate>:

	return 0;
}

static int nvs_add_gc_done_ate(struct nvs_fs *fs)
{
   1eece:	b510      	push	{r4, lr}
   1eed0:	b082      	sub	sp, #8
   1eed2:	4604      	mov	r4, r0
	struct nvs_ate gc_done_ate;

	LOG_DBG("Adding gc done ate at %x", fs->ate_wra & ADDR_OFFS_MASK);
	gc_done_ate.id = 0xffff;
   1eed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1eed8:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   1eedc:	2300      	movs	r3, #0
   1eede:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   1eee2:	8903      	ldrh	r3, [r0, #8]
   1eee4:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   1eee8:	4668      	mov	r0, sp
   1eeea:	f7ff ff27 	bl	1ed3c <nvs_ate_crc8_update>

	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   1eeee:	4669      	mov	r1, sp
   1eef0:	4620      	mov	r0, r4
   1eef2:	f7ff ffd6 	bl	1eea2 <nvs_flash_ate_wrt>
}
   1eef6:	b002      	add	sp, #8
   1eef8:	bd10      	pop	{r4, pc}

0001eefa <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
   1eefa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eefe:	b08a      	sub	sp, #40	; 0x28
   1ef00:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   1ef02:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1ef04:	681e      	ldr	r6, [r3, #0]
   1ef06:	b2f3      	uxtb	r3, r6
	if (write_block_size <= 1U) {
   1ef08:	2b01      	cmp	r3, #1
   1ef0a:	d92e      	bls.n	1ef6a <nvs_gc+0x70>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1ef0c:	461e      	mov	r6, r3
   1ef0e:	3307      	adds	r3, #7
   1ef10:	4276      	negs	r6, r6
   1ef12:	401e      	ands	r6, r3
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   1ef14:	88e3      	ldrh	r3, [r4, #6]
   1ef16:	041b      	lsls	r3, r3, #16
   1ef18:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   1ef1a:	a903      	add	r1, sp, #12
   1ef1c:	4620      	mov	r0, r4
   1ef1e:	f7ff fda3 	bl	1ea68 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   1ef22:	89a1      	ldrh	r1, [r4, #12]
   1ef24:	9b03      	ldr	r3, [sp, #12]
   1ef26:	4419      	add	r1, r3
   1ef28:	1b89      	subs	r1, r1, r6
   1ef2a:	9102      	str	r1, [sp, #8]

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
   1ef2c:	aa08      	add	r2, sp, #32
   1ef2e:	4620      	mov	r0, r4
   1ef30:	f7ff fd89 	bl	1ea46 <nvs_flash_ate_rd>
	if (rc < 0) {
   1ef34:	1e03      	subs	r3, r0, #0
   1ef36:	db14      	blt.n	1ef62 <nvs_gc+0x68>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   1ef38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ef3a:	7919      	ldrb	r1, [r3, #4]
   1ef3c:	a808      	add	r0, sp, #32
   1ef3e:	f7ff fd87 	bl	1ea50 <nvs_ate_cmp_const>
	if (!rc) {
   1ef42:	b9a0      	cbnz	r0, 1ef6e <nvs_gc+0x74>
	 * gc done ate to the sector. In the field we might have nvs systems
	 * that do not have sufficient space to add this ate, so for these
	 * situations avoid adding the gc done ate.
	 */

	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   1ef44:	6863      	ldr	r3, [r4, #4]
   1ef46:	68a2      	ldr	r2, [r4, #8]
   1ef48:	4416      	add	r6, r2
   1ef4a:	42b3      	cmp	r3, r6
   1ef4c:	d304      	bcc.n	1ef58 <nvs_gc+0x5e>
		rc = nvs_add_gc_done_ate(fs);
   1ef4e:	4620      	mov	r0, r4
   1ef50:	f7ff ffbd 	bl	1eece <nvs_add_gc_done_ate>
		if (rc) {
   1ef54:	4603      	mov	r3, r0
   1ef56:	b920      	cbnz	r0, 1ef62 <nvs_gc+0x68>
			return rc;
		}
	}

	/* Erase the gc'ed sector */
	rc = nvs_flash_erase_sector(fs, sec_addr);
   1ef58:	9903      	ldr	r1, [sp, #12]
   1ef5a:	4620      	mov	r0, r4
   1ef5c:	f7ff fde3 	bl	1eb26 <nvs_flash_erase_sector>
   1ef60:	4603      	mov	r3, r0
	if (rc) {
		return rc;
	}
	return 0;
}
   1ef62:	4618      	mov	r0, r3
   1ef64:	b00a      	add	sp, #40	; 0x28
   1ef66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return len;
   1ef6a:	2608      	movs	r6, #8
   1ef6c:	e7d2      	b.n	1ef14 <nvs_gc+0x1a>
	stop_addr = gc_addr - ate_size;
   1ef6e:	9b02      	ldr	r3, [sp, #8]
   1ef70:	eba3 0806 	sub.w	r8, r3, r6
	if (nvs_close_ate_valid(fs, &close_ate)) {
   1ef74:	a908      	add	r1, sp, #32
   1ef76:	4620      	mov	r0, r4
   1ef78:	f7ff fe6c 	bl	1ec54 <nvs_close_ate_valid>
   1ef7c:	b138      	cbz	r0, 1ef8e <nvs_gc+0x94>
		gc_addr &= ADDR_SECT_MASK;
   1ef7e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
		gc_addr += close_ate.offset;
   1ef82:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   1ef86:	eb03 4302 	add.w	r3, r3, r2, lsl #16
   1ef8a:	9302      	str	r3, [sp, #8]
   1ef8c:	e023      	b.n	1efd6 <nvs_gc+0xdc>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   1ef8e:	a902      	add	r1, sp, #8
   1ef90:	4620      	mov	r0, r4
   1ef92:	f7ff fe27 	bl	1ebe4 <nvs_recover_last_ate>
		if (rc) {
   1ef96:	4603      	mov	r3, r0
   1ef98:	b1e8      	cbz	r0, 1efd6 <nvs_gc+0xdc>
   1ef9a:	e7e2      	b.n	1ef62 <nvs_gc+0x68>
		} while (wlk_addr != fs->ate_wra);
   1ef9c:	6862      	ldr	r2, [r4, #4]
   1ef9e:	9b01      	ldr	r3, [sp, #4]
   1efa0:	429a      	cmp	r2, r3
   1efa2:	d014      	beq.n	1efce <nvs_gc+0xd4>
			wlk_prev_addr = wlk_addr;
   1efa4:	9d01      	ldr	r5, [sp, #4]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1efa6:	aa04      	add	r2, sp, #16
   1efa8:	a901      	add	r1, sp, #4
   1efaa:	4620      	mov	r0, r4
   1efac:	f7ff fe7a 	bl	1eca4 <nvs_prev_ate>
			if (rc) {
   1efb0:	4603      	mov	r3, r0
   1efb2:	2800      	cmp	r0, #0
   1efb4:	d1d5      	bne.n	1ef62 <nvs_gc+0x68>
			if ((wlk_ate.id == gc_ate.id) &&
   1efb6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   1efba:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1efbe:	429a      	cmp	r2, r3
   1efc0:	d1ec      	bne.n	1ef9c <nvs_gc+0xa2>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   1efc2:	a904      	add	r1, sp, #16
   1efc4:	4620      	mov	r0, r4
   1efc6:	f7ff fdf1 	bl	1ebac <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   1efca:	2800      	cmp	r0, #0
   1efcc:	d0e6      	beq.n	1ef9c <nvs_gc+0xa2>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   1efce:	42bd      	cmp	r5, r7
   1efd0:	d013      	beq.n	1effa <nvs_gc+0x100>
	} while (gc_prev_addr != stop_addr);
   1efd2:	4547      	cmp	r7, r8
   1efd4:	d0b6      	beq.n	1ef44 <nvs_gc+0x4a>
		gc_prev_addr = gc_addr;
   1efd6:	9f02      	ldr	r7, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   1efd8:	aa06      	add	r2, sp, #24
   1efda:	a902      	add	r1, sp, #8
   1efdc:	4620      	mov	r0, r4
   1efde:	f7ff fe61 	bl	1eca4 <nvs_prev_ate>
		if (rc) {
   1efe2:	4603      	mov	r3, r0
   1efe4:	2800      	cmp	r0, #0
   1efe6:	d1bc      	bne.n	1ef62 <nvs_gc+0x68>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   1efe8:	a906      	add	r1, sp, #24
   1efea:	4620      	mov	r0, r4
   1efec:	f7ff fdde 	bl	1ebac <nvs_ate_valid>
   1eff0:	2800      	cmp	r0, #0
   1eff2:	d0ee      	beq.n	1efd2 <nvs_gc+0xd8>
		wlk_addr = fs->ate_wra;
   1eff4:	6863      	ldr	r3, [r4, #4]
   1eff6:	9301      	str	r3, [sp, #4]
   1eff8:	e7d4      	b.n	1efa4 <nvs_gc+0xaa>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   1effa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   1effe:	2b00      	cmp	r3, #0
   1f000:	d0e7      	beq.n	1efd2 <nvs_gc+0xd8>
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   1f002:	0c3b      	lsrs	r3, r7, #16
   1f004:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   1f006:	f8bd 501a 	ldrh.w	r5, [sp, #26]
   1f00a:	441d      	add	r5, r3
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   1f00c:	8923      	ldrh	r3, [r4, #8]
   1f00e:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   1f012:	a806      	add	r0, sp, #24
   1f014:	f7ff fe92 	bl	1ed3c <nvs_ate_crc8_update>
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   1f018:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   1f01c:	4629      	mov	r1, r5
   1f01e:	4620      	mov	r0, r4
   1f020:	f7ff ff15 	bl	1ee4e <nvs_flash_block_move>
			if (rc) {
   1f024:	4603      	mov	r3, r0
   1f026:	2800      	cmp	r0, #0
   1f028:	d19b      	bne.n	1ef62 <nvs_gc+0x68>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   1f02a:	a906      	add	r1, sp, #24
   1f02c:	4620      	mov	r0, r4
   1f02e:	f7ff ff38 	bl	1eea2 <nvs_flash_ate_wrt>
			if (rc) {
   1f032:	4603      	mov	r3, r0
   1f034:	2800      	cmp	r0, #0
   1f036:	d0cc      	beq.n	1efd2 <nvs_gc+0xd8>
   1f038:	e793      	b.n	1ef62 <nvs_gc+0x68>

0001f03a <nvs_startup>:

static int nvs_startup(struct nvs_fs *fs)
{
   1f03a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f03e:	b087      	sub	sp, #28
   1f040:	4604      	mov	r4, r0
	size_t ate_size, empty_len;
	/* Initialize addr to 0 for the case fs->sector_count == 0. This
	 * should never happen as this is verified in nvs_init() but both
	 * Coverity and GCC believe the contrary.
	 */
	uint32_t addr = 0U;
   1f042:	2300      	movs	r3, #0
   1f044:	9303      	str	r3, [sp, #12]
	uint16_t i, closed_sectors = 0;
	uint8_t erase_value = fs->flash_parameters->erase_value;
   1f046:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1f048:	791f      	ldrb	r7, [r3, #4]

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   1f04a:	f100 0914 	add.w	r9, r0, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   1f04e:	f04f 32ff 	mov.w	r2, #4294967295
   1f052:	f04f 33ff 	mov.w	r3, #4294967295
   1f056:	4648      	mov	r0, r9
   1f058:	f7fc fa1e 	bl	1b498 <z_impl_k_mutex_lock>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   1f05c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f05e:	681b      	ldr	r3, [r3, #0]
   1f060:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   1f062:	2a01      	cmp	r2, #1
   1f064:	d906      	bls.n	1f074 <nvs_startup+0x3a>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1f066:	1dd6      	adds	r6, r2, #7
   1f068:	4253      	negs	r3, r2
   1f06a:	401e      	ands	r6, r3
	uint16_t i, closed_sectors = 0;
   1f06c:	f04f 0800 	mov.w	r8, #0

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
	/* step through the sectors to find a open sector following
	 * a closed sector, this is where NVS can to write.
	 */
	for (i = 0; i < fs->sector_count; i++) {
   1f070:	4645      	mov	r5, r8
   1f072:	e003      	b.n	1f07c <nvs_startup+0x42>
		return len;
   1f074:	2608      	movs	r6, #8
   1f076:	e7f9      	b.n	1f06c <nvs_startup+0x32>
	for (i = 0; i < fs->sector_count; i++) {
   1f078:	3501      	adds	r5, #1
   1f07a:	b2ad      	uxth	r5, r5
   1f07c:	89e3      	ldrh	r3, [r4, #14]
   1f07e:	42ab      	cmp	r3, r5
   1f080:	d91c      	bls.n	1f0bc <nvs_startup+0x82>
		addr = (i << ADDR_SECT_SHIFT) +
		       (uint16_t)(fs->sector_size - ate_size);
   1f082:	89a1      	ldrh	r1, [r4, #12]
   1f084:	1b89      	subs	r1, r1, r6
   1f086:	b289      	uxth	r1, r1
		addr = (i << ADDR_SECT_SHIFT) +
   1f088:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   1f08c:	9103      	str	r1, [sp, #12]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1f08e:	2308      	movs	r3, #8
   1f090:	463a      	mov	r2, r7
   1f092:	4620      	mov	r0, r4
   1f094:	f7ff fd21 	bl	1eada <nvs_flash_cmp_const>
					 sizeof(struct nvs_ate));
		if (rc) {
   1f098:	2800      	cmp	r0, #0
   1f09a:	d0ed      	beq.n	1f078 <nvs_startup+0x3e>
			/* closed sector */
			closed_sectors++;
   1f09c:	f108 0801 	add.w	r8, r8, #1
   1f0a0:	fa1f f888 	uxth.w	r8, r8
			nvs_sector_advance(fs, &addr);
   1f0a4:	a903      	add	r1, sp, #12
   1f0a6:	4620      	mov	r0, r4
   1f0a8:	f7ff fcde 	bl	1ea68 <nvs_sector_advance>
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   1f0ac:	2308      	movs	r3, #8
   1f0ae:	463a      	mov	r2, r7
   1f0b0:	9903      	ldr	r1, [sp, #12]
   1f0b2:	4620      	mov	r0, r4
   1f0b4:	f7ff fd11 	bl	1eada <nvs_flash_cmp_const>
						 sizeof(struct nvs_ate));
			if (!rc) {
   1f0b8:	2800      	cmp	r0, #0
   1f0ba:	d1dd      	bne.n	1f078 <nvs_startup+0x3e>
				break;
			}
		}
	}
	/* all sectors are closed, this is not a nvs fs */
	if (closed_sectors == fs->sector_count) {
   1f0bc:	89e3      	ldrh	r3, [r4, #14]
   1f0be:	4543      	cmp	r3, r8
   1f0c0:	f000 80ea 	beq.w	1f298 <nvs_startup+0x25e>
		rc = -EDEADLK;
		goto end;
	}

	if (i == fs->sector_count) {
   1f0c4:	42ab      	cmp	r3, r5
   1f0c6:	d00d      	beq.n	1f0e4 <nvs_startup+0xaa>

	/* addr contains address of closing ate in the most recent sector,
	 * search for the last valid ate using the recover_last_ate routine
	 */

	rc = nvs_recover_last_ate(fs, &addr);
   1f0c8:	a903      	add	r1, sp, #12
   1f0ca:	4620      	mov	r0, r4
   1f0cc:	f7ff fd8a 	bl	1ebe4 <nvs_recover_last_ate>
	if (rc) {
   1f0d0:	4605      	mov	r5, r0
   1f0d2:	2800      	cmp	r0, #0
   1f0d4:	f040 80be 	bne.w	1f254 <nvs_startup+0x21a>

	/* addr contains address of the last valid ate in the most recent sector
	 * search for the first ate containing all cells erased, in the process
	 * also update fs->data_wra.
	 */
	fs->ate_wra = addr;
   1f0d8:	9b03      	ldr	r3, [sp, #12]
   1f0da:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   1f0dc:	0c1b      	lsrs	r3, r3, #16
   1f0de:	041b      	lsls	r3, r3, #16
   1f0e0:	60a3      	str	r3, [r4, #8]

	while (fs->ate_wra >= fs->data_wra) {
   1f0e2:	e010      	b.n	1f106 <nvs_startup+0xcc>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   1f0e4:	2308      	movs	r3, #8
   1f0e6:	463a      	mov	r2, r7
   1f0e8:	9903      	ldr	r1, [sp, #12]
   1f0ea:	1b89      	subs	r1, r1, r6
   1f0ec:	4620      	mov	r0, r4
   1f0ee:	f7ff fcf4 	bl	1eada <nvs_flash_cmp_const>
		if (!rc) {
   1f0f2:	2800      	cmp	r0, #0
   1f0f4:	d1e8      	bne.n	1f0c8 <nvs_startup+0x8e>
			nvs_sector_advance(fs, &addr);
   1f0f6:	a903      	add	r1, sp, #12
   1f0f8:	4620      	mov	r0, r4
   1f0fa:	f7ff fcb5 	bl	1ea68 <nvs_sector_advance>
   1f0fe:	e7e3      	b.n	1f0c8 <nvs_startup+0x8e>
				rc = -ESPIPE;
				goto end;
			}
		}

		fs->ate_wra -= ate_size;
   1f100:	6863      	ldr	r3, [r4, #4]
   1f102:	1b9b      	subs	r3, r3, r6
   1f104:	6063      	str	r3, [r4, #4]
	while (fs->ate_wra >= fs->data_wra) {
   1f106:	6861      	ldr	r1, [r4, #4]
   1f108:	68a3      	ldr	r3, [r4, #8]
   1f10a:	4299      	cmp	r1, r3
   1f10c:	d32e      	bcc.n	1f16c <nvs_startup+0x132>
		rc = nvs_flash_ate_rd(fs, fs->ate_wra, &last_ate);
   1f10e:	aa04      	add	r2, sp, #16
   1f110:	4620      	mov	r0, r4
   1f112:	f7ff fc98 	bl	1ea46 <nvs_flash_ate_rd>
		if (rc) {
   1f116:	4605      	mov	r5, r0
   1f118:	2800      	cmp	r0, #0
   1f11a:	f040 809b 	bne.w	1f254 <nvs_startup+0x21a>
		rc = nvs_ate_cmp_const(&last_ate, erase_value);
   1f11e:	4639      	mov	r1, r7
   1f120:	a804      	add	r0, sp, #16
   1f122:	f7ff fc95 	bl	1ea50 <nvs_ate_cmp_const>
		if (!rc) {
   1f126:	b308      	cbz	r0, 1f16c <nvs_startup+0x132>
		if (nvs_ate_valid(fs, &last_ate)) {
   1f128:	a904      	add	r1, sp, #16
   1f12a:	4620      	mov	r0, r4
   1f12c:	f7ff fd3e 	bl	1ebac <nvs_ate_valid>
   1f130:	2800      	cmp	r0, #0
   1f132:	d0e5      	beq.n	1f100 <nvs_startup+0xc6>
			fs->data_wra = addr & ADDR_SECT_MASK;
   1f134:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1f138:	0419      	lsls	r1, r3, #16
   1f13a:	60a1      	str	r1, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   1f13c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1f140:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   1f144:	4403      	add	r3, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   1f146:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1f148:	6812      	ldr	r2, [r2, #0]
   1f14a:	b2d5      	uxtb	r5, r2
	if (write_block_size <= 1U) {
   1f14c:	2d01      	cmp	r5, #1
   1f14e:	d903      	bls.n	1f158 <nvs_startup+0x11e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1f150:	442b      	add	r3, r5
   1f152:	3b01      	subs	r3, #1
   1f154:	426a      	negs	r2, r5
   1f156:	4013      	ands	r3, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   1f158:	440b      	add	r3, r1
   1f15a:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   1f15c:	6862      	ldr	r2, [r4, #4]
   1f15e:	4293      	cmp	r3, r2
   1f160:	d1ce      	bne.n	1f100 <nvs_startup+0xc6>
   1f162:	2800      	cmp	r0, #0
   1f164:	d0cc      	beq.n	1f100 <nvs_startup+0xc6>
				rc = -ESPIPE;
   1f166:	f06f 051c 	mvn.w	r5, #28
   1f16a:	e07a      	b.n	1f262 <nvs_startup+0x228>
	 * we might need to restart gc if it has not yet finished. Otherwise
	 * just erase the sector.
	 * When gc needs to be restarted, first erase the sector otherwise the
	 * data might not fit into the sector.
	 */
	addr = fs->ate_wra & ADDR_SECT_MASK;
   1f16c:	88e3      	ldrh	r3, [r4, #6]
   1f16e:	041b      	lsls	r3, r3, #16
   1f170:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &addr);
   1f172:	a903      	add	r1, sp, #12
   1f174:	4620      	mov	r0, r4
   1f176:	f7ff fc77 	bl	1ea68 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   1f17a:	89a3      	ldrh	r3, [r4, #12]
   1f17c:	463a      	mov	r2, r7
   1f17e:	9903      	ldr	r1, [sp, #12]
   1f180:	4620      	mov	r0, r4
   1f182:	f7ff fcaa 	bl	1eada <nvs_flash_cmp_const>
	if (rc < 0) {
   1f186:	1e05      	subs	r5, r0, #0
   1f188:	db64      	blt.n	1f254 <nvs_startup+0x21a>
		goto end;
	}
	if (rc) {
   1f18a:	2d00      	cmp	r5, #0
   1f18c:	d04a      	beq.n	1f224 <nvs_startup+0x1ea>
		 * (gc_done_ate) that indicates that gc was finished.
		 */
		bool gc_done_marker = false;
		struct nvs_ate gc_done_ate;

		addr = fs->ate_wra + ate_size;
   1f18e:	6863      	ldr	r3, [r4, #4]
   1f190:	4433      	add	r3, r6
   1f192:	9303      	str	r3, [sp, #12]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   1f194:	e002      	b.n	1f19c <nvs_startup+0x162>
			    (gc_done_ate.id == 0xffff) &&
			    (gc_done_ate.len == 0U)) {
				gc_done_marker = true;
				break;
			}
			addr += ate_size;
   1f196:	9b03      	ldr	r3, [sp, #12]
   1f198:	4433      	add	r3, r6
   1f19a:	9303      	str	r3, [sp, #12]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   1f19c:	9903      	ldr	r1, [sp, #12]
   1f19e:	b28a      	uxth	r2, r1
   1f1a0:	89a3      	ldrh	r3, [r4, #12]
   1f1a2:	1b9b      	subs	r3, r3, r6
   1f1a4:	429a      	cmp	r2, r3
   1f1a6:	d218      	bcs.n	1f1da <nvs_startup+0x1a0>
			rc = nvs_flash_ate_rd(fs, addr, &gc_done_ate);
   1f1a8:	aa01      	add	r2, sp, #4
   1f1aa:	4620      	mov	r0, r4
   1f1ac:	f7ff fc4b 	bl	1ea46 <nvs_flash_ate_rd>
			if (rc) {
   1f1b0:	4605      	mov	r5, r0
   1f1b2:	2800      	cmp	r0, #0
   1f1b4:	d14e      	bne.n	1f254 <nvs_startup+0x21a>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   1f1b6:	a901      	add	r1, sp, #4
   1f1b8:	4620      	mov	r0, r4
   1f1ba:	f7ff fcf7 	bl	1ebac <nvs_ate_valid>
   1f1be:	2800      	cmp	r0, #0
   1f1c0:	d0e9      	beq.n	1f196 <nvs_startup+0x15c>
			    (gc_done_ate.id == 0xffff) &&
   1f1c2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   1f1c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f1ca:	429a      	cmp	r2, r3
   1f1cc:	d1e3      	bne.n	1f196 <nvs_startup+0x15c>
			    (gc_done_ate.len == 0U)) {
   1f1ce:	f8bd 3008 	ldrh.w	r3, [sp, #8]
			    (gc_done_ate.id == 0xffff) &&
   1f1d2:	2b00      	cmp	r3, #0
   1f1d4:	d1df      	bne.n	1f196 <nvs_startup+0x15c>
				gc_done_marker = true;
   1f1d6:	2301      	movs	r3, #1
   1f1d8:	e000      	b.n	1f1dc <nvs_startup+0x1a2>
		bool gc_done_marker = false;
   1f1da:	2300      	movs	r3, #0
		}

		if (gc_done_marker) {
   1f1dc:	b9ab      	cbnz	r3, 1f20a <nvs_startup+0x1d0>
			nvs_sector_advance(fs, &addr);
			rc = nvs_flash_erase_sector(fs, addr);
			goto end;
		}
		LOG_INF("No GC Done marker found: restarting gc");
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   1f1de:	6861      	ldr	r1, [r4, #4]
   1f1e0:	4620      	mov	r0, r4
   1f1e2:	f7ff fca0 	bl	1eb26 <nvs_flash_erase_sector>
		if (rc) {
   1f1e6:	4605      	mov	r5, r0
   1f1e8:	2800      	cmp	r0, #0
   1f1ea:	d133      	bne.n	1f254 <nvs_startup+0x21a>
			goto end;
		}
		fs->ate_wra &= ADDR_SECT_MASK;
   1f1ec:	88e2      	ldrh	r2, [r4, #6]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   1f1ee:	89a3      	ldrh	r3, [r4, #12]
   1f1f0:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
   1f1f4:	eb03 4302 	add.w	r3, r3, r2, lsl #16
   1f1f8:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   1f1fa:	0c1b      	lsrs	r3, r3, #16
   1f1fc:	041b      	lsls	r3, r3, #16
   1f1fe:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   1f200:	4620      	mov	r0, r4
   1f202:	f7ff fe7a 	bl	1eefa <nvs_gc>
   1f206:	4605      	mov	r5, r0
		goto end;
   1f208:	e024      	b.n	1f254 <nvs_startup+0x21a>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   1f20a:	88e3      	ldrh	r3, [r4, #6]
   1f20c:	041b      	lsls	r3, r3, #16
   1f20e:	9303      	str	r3, [sp, #12]
			nvs_sector_advance(fs, &addr);
   1f210:	a903      	add	r1, sp, #12
   1f212:	4620      	mov	r0, r4
   1f214:	f7ff fc28 	bl	1ea68 <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
   1f218:	9903      	ldr	r1, [sp, #12]
   1f21a:	4620      	mov	r0, r4
   1f21c:	f7ff fc83 	bl	1eb26 <nvs_flash_erase_sector>
   1f220:	4605      	mov	r5, r0
			goto end;
   1f222:	e017      	b.n	1f254 <nvs_startup+0x21a>
	}

	/* possible data write after last ate write, update data_wra */
	while (fs->ate_wra > fs->data_wra) {
   1f224:	6863      	ldr	r3, [r4, #4]
   1f226:	68a1      	ldr	r1, [r4, #8]
   1f228:	428b      	cmp	r3, r1
   1f22a:	d90d      	bls.n	1f248 <nvs_startup+0x20e>
		empty_len = fs->ate_wra - fs->data_wra;

		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   1f22c:	1a5b      	subs	r3, r3, r1
   1f22e:	463a      	mov	r2, r7
   1f230:	4620      	mov	r0, r4
   1f232:	f7ff fc52 	bl	1eada <nvs_flash_cmp_const>
				empty_len);
		if (rc < 0) {
   1f236:	1e05      	subs	r5, r0, #0
   1f238:	db0c      	blt.n	1f254 <nvs_startup+0x21a>
			goto end;
		}
		if (!rc) {
   1f23a:	b12d      	cbz	r5, 1f248 <nvs_startup+0x20e>
			break;
		}

		fs->data_wra += fs->flash_parameters->write_block_size;
   1f23c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1f23e:	681a      	ldr	r2, [r3, #0]
   1f240:	68a3      	ldr	r3, [r4, #8]
   1f242:	4413      	add	r3, r2
   1f244:	60a3      	str	r3, [r4, #8]
   1f246:	e7ed      	b.n	1f224 <nvs_startup+0x1ea>

	/* If the ate_wra is pointing to the first ate write location in a
	 * sector and data_wra is not 0, erase the sector as it contains no
	 * valid data (this also avoids closing a sector without any data).
	 */
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   1f248:	6861      	ldr	r1, [r4, #4]
   1f24a:	eb01 0246 	add.w	r2, r1, r6, lsl #1
   1f24e:	89a3      	ldrh	r3, [r4, #12]
   1f250:	429a      	cmp	r2, r3
   1f252:	d00d      	beq.n	1f270 <nvs_startup+0x236>

end:
	/* If the sector is empty add a gc done ate to avoid having insufficient
	 * space when doing gc.
	 */
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   1f254:	b92d      	cbnz	r5, 1f262 <nvs_startup+0x228>
   1f256:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   1f258:	89a3      	ldrh	r3, [r4, #12]
   1f25a:	eba3 0646 	sub.w	r6, r3, r6, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   1f25e:	42b2      	cmp	r2, r6
   1f260:	d015      	beq.n	1f28e <nvs_startup+0x254>
	return z_impl_k_mutex_unlock(mutex);
   1f262:	4648      	mov	r0, r9
   1f264:	f7fc f9a2 	bl	1b5ac <z_impl_k_mutex_unlock>

		rc = nvs_add_gc_done_ate(fs);
	}
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   1f268:	4628      	mov	r0, r5
   1f26a:	b007      	add	sp, #28
   1f26c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   1f270:	68a2      	ldr	r2, [r4, #8]
   1f272:	0c0b      	lsrs	r3, r1, #16
   1f274:	041b      	lsls	r3, r3, #16
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   1f276:	429a      	cmp	r2, r3
   1f278:	d0ec      	beq.n	1f254 <nvs_startup+0x21a>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   1f27a:	4620      	mov	r0, r4
   1f27c:	f7ff fc53 	bl	1eb26 <nvs_flash_erase_sector>
		if (rc) {
   1f280:	4605      	mov	r5, r0
   1f282:	2800      	cmp	r0, #0
   1f284:	d1e6      	bne.n	1f254 <nvs_startup+0x21a>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   1f286:	88e3      	ldrh	r3, [r4, #6]
   1f288:	041b      	lsls	r3, r3, #16
   1f28a:	60a3      	str	r3, [r4, #8]
   1f28c:	e7e2      	b.n	1f254 <nvs_startup+0x21a>
		rc = nvs_add_gc_done_ate(fs);
   1f28e:	4620      	mov	r0, r4
   1f290:	f7ff fe1d 	bl	1eece <nvs_add_gc_done_ate>
   1f294:	4605      	mov	r5, r0
   1f296:	e7e4      	b.n	1f262 <nvs_startup+0x228>
		rc = -EDEADLK;
   1f298:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   1f29c:	e7e1      	b.n	1f262 <nvs_startup+0x228>

0001f29e <nvs_flash_wrt_entry>:
{
   1f29e:	b570      	push	{r4, r5, r6, lr}
   1f2a0:	b082      	sub	sp, #8
   1f2a2:	4604      	mov	r4, r0
   1f2a4:	4616      	mov	r6, r2
   1f2a6:	461d      	mov	r5, r3
	entry.id = id;
   1f2a8:	f8ad 1000 	strh.w	r1, [sp]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   1f2ac:	8903      	ldrh	r3, [r0, #8]
   1f2ae:	f8ad 3002 	strh.w	r3, [sp, #2]
	entry.len = (uint16_t)len;
   1f2b2:	f8ad 5004 	strh.w	r5, [sp, #4]
	entry.part = 0xff;
   1f2b6:	23ff      	movs	r3, #255	; 0xff
   1f2b8:	f88d 3006 	strb.w	r3, [sp, #6]
	nvs_ate_crc8_update(&entry);
   1f2bc:	4668      	mov	r0, sp
   1f2be:	f7ff fd3d 	bl	1ed3c <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
   1f2c2:	462a      	mov	r2, r5
   1f2c4:	4631      	mov	r1, r6
   1f2c6:	4620      	mov	r0, r4
   1f2c8:	f7ff fdac 	bl	1ee24 <nvs_flash_data_wrt>
	if (rc) {
   1f2cc:	b108      	cbz	r0, 1f2d2 <nvs_flash_wrt_entry+0x34>
}
   1f2ce:	b002      	add	sp, #8
   1f2d0:	bd70      	pop	{r4, r5, r6, pc}
	rc = nvs_flash_ate_wrt(fs, &entry);
   1f2d2:	4669      	mov	r1, sp
   1f2d4:	4620      	mov	r0, r4
   1f2d6:	f7ff fde4 	bl	1eea2 <nvs_flash_ate_wrt>
	if (rc) {
   1f2da:	e7f8      	b.n	1f2ce <nvs_flash_wrt_entry+0x30>

0001f2dc <nvs_sector_close>:
{
   1f2dc:	b530      	push	{r4, r5, lr}
   1f2de:	b083      	sub	sp, #12
   1f2e0:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   1f2e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1f2e4:	681b      	ldr	r3, [r3, #0]
   1f2e6:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   1f2e8:	2a01      	cmp	r2, #1
   1f2ea:	d925      	bls.n	1f338 <nvs_sector_close+0x5c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1f2ec:	4613      	mov	r3, r2
   1f2ee:	3207      	adds	r2, #7
   1f2f0:	425b      	negs	r3, r3
   1f2f2:	401a      	ands	r2, r3
	close_ate.id = 0xFFFF;
   1f2f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f2f8:	f8ad 3000 	strh.w	r3, [sp]
	close_ate.len = 0U;
   1f2fc:	2500      	movs	r5, #0
   1f2fe:	f8ad 5004 	strh.w	r5, [sp, #4]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   1f302:	6863      	ldr	r3, [r4, #4]
   1f304:	1899      	adds	r1, r3, r2
   1f306:	f8ad 1002 	strh.w	r1, [sp, #2]
	fs->ate_wra &= ADDR_SECT_MASK;
   1f30a:	0c1b      	lsrs	r3, r3, #16
   1f30c:	041b      	lsls	r3, r3, #16
	fs->ate_wra += (fs->sector_size - ate_size);
   1f30e:	89a1      	ldrh	r1, [r4, #12]
   1f310:	1a8a      	subs	r2, r1, r2
   1f312:	4413      	add	r3, r2
   1f314:	6063      	str	r3, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   1f316:	4668      	mov	r0, sp
   1f318:	f7ff fd10 	bl	1ed3c <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   1f31c:	4669      	mov	r1, sp
   1f31e:	4620      	mov	r0, r4
   1f320:	f7ff fdbf 	bl	1eea2 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   1f324:	1d21      	adds	r1, r4, #4
   1f326:	4620      	mov	r0, r4
   1f328:	f7ff fb9e 	bl	1ea68 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   1f32c:	88e3      	ldrh	r3, [r4, #6]
   1f32e:	041b      	lsls	r3, r3, #16
   1f330:	60a3      	str	r3, [r4, #8]
}
   1f332:	4628      	mov	r0, r5
   1f334:	b003      	add	sp, #12
   1f336:	bd30      	pop	{r4, r5, pc}
		return len;
   1f338:	2208      	movs	r2, #8
   1f33a:	e7db      	b.n	1f2f4 <nvs_sector_close+0x18>

0001f33c <nvs_init>:

	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
   1f33c:	b530      	push	{r4, r5, lr}
   1f33e:	b085      	sub	sp, #20
   1f340:	4604      	mov	r4, r0
   1f342:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   1f344:	3014      	adds	r0, #20
	return z_impl_k_mutex_init(mutex);
   1f346:	f003 faff 	bl	22948 <z_impl_k_mutex_init>
   1f34a:	4628      	mov	r0, r5
   1f34c:	f7fb fd9a 	bl	1ae84 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
   1f350:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
   1f352:	b328      	cbz	r0, 1f3a0 <nvs_init+0x64>
 */
__syscall const struct flash_parameters *flash_get_parameters(const struct device *dev);

static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
   1f354:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   1f356:	691b      	ldr	r3, [r3, #16]
   1f358:	4798      	blx	r3
		LOG_ERR("No valid flash device found");
		return -ENXIO;
	}

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   1f35a:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   1f35c:	b318      	cbz	r0, 1f3a6 <nvs_init+0x6a>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
	}

	write_block_size = flash_get_write_block_size(fs->flash_device);
   1f35e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	const struct flash_driver_api *api =
   1f360:	6883      	ldr	r3, [r0, #8]
	return api->get_parameters(dev)->write_block_size;
   1f362:	691b      	ldr	r3, [r3, #16]
   1f364:	4798      	blx	r3
   1f366:	6803      	ldr	r3, [r0, #0]

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   1f368:	3b01      	subs	r3, #1
   1f36a:	2b1f      	cmp	r3, #31
   1f36c:	d81e      	bhi.n	1f3ac <nvs_init+0x70>
		LOG_ERR("Unsupported write block size");
		return -EINVAL;
	}

	/* check that sector size is a multiple of pagesize */
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   1f36e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1f370:	6821      	ldr	r1, [r4, #0]
   1f372:	aa01      	add	r2, sp, #4
   1f374:	f000 fd01 	bl	1fd7a <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   1f378:	b9d8      	cbnz	r0, 1f3b2 <nvs_init+0x76>
		LOG_ERR("Unable to get page info");
		return -EINVAL;
	}
	if (!fs->sector_size || fs->sector_size % info.size) {
   1f37a:	89a3      	ldrh	r3, [r4, #12]
   1f37c:	b1e3      	cbz	r3, 1f3b8 <nvs_init+0x7c>
   1f37e:	9902      	ldr	r1, [sp, #8]
   1f380:	fbb3 f2f1 	udiv	r2, r3, r1
   1f384:	fb01 3312 	mls	r3, r1, r2, r3
   1f388:	b9cb      	cbnz	r3, 1f3be <nvs_init+0x82>
		LOG_ERR("Invalid sector size");
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
   1f38a:	89e3      	ldrh	r3, [r4, #14]
   1f38c:	2b01      	cmp	r3, #1
   1f38e:	d919      	bls.n	1f3c4 <nvs_init+0x88>
		LOG_ERR("Configuration error - sector count");
		return -EINVAL;
	}

	rc = nvs_startup(fs);
   1f390:	4620      	mov	r0, r4
   1f392:	f7ff fe52 	bl	1f03a <nvs_startup>
	if (rc) {
   1f396:	b908      	cbnz	r0, 1f39c <nvs_init+0x60>
		return rc;
	}

	/* nvs is ready for use */
	fs->ready = true;
   1f398:	2301      	movs	r3, #1
   1f39a:	7423      	strb	r3, [r4, #16]
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   1f39c:	b005      	add	sp, #20
   1f39e:	bd30      	pop	{r4, r5, pc}
		return -ENXIO;
   1f3a0:	f06f 0005 	mvn.w	r0, #5
   1f3a4:	e7fa      	b.n	1f39c <nvs_init+0x60>
		return -EINVAL;
   1f3a6:	f06f 0015 	mvn.w	r0, #21
   1f3aa:	e7f7      	b.n	1f39c <nvs_init+0x60>
		return -EINVAL;
   1f3ac:	f06f 0015 	mvn.w	r0, #21
   1f3b0:	e7f4      	b.n	1f39c <nvs_init+0x60>
		return -EINVAL;
   1f3b2:	f06f 0015 	mvn.w	r0, #21
   1f3b6:	e7f1      	b.n	1f39c <nvs_init+0x60>
		return -EINVAL;
   1f3b8:	f06f 0015 	mvn.w	r0, #21
   1f3bc:	e7ee      	b.n	1f39c <nvs_init+0x60>
   1f3be:	f06f 0015 	mvn.w	r0, #21
   1f3c2:	e7eb      	b.n	1f39c <nvs_init+0x60>
		return -EINVAL;
   1f3c4:	f06f 0015 	mvn.w	r0, #21
   1f3c8:	e7e8      	b.n	1f39c <nvs_init+0x60>

0001f3ca <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   1f3ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3ce:	b087      	sub	sp, #28
   1f3d0:	9201      	str	r2, [sp, #4]
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   1f3d2:	f890 b010 	ldrb.w	fp, [r0, #16]
   1f3d6:	f1bb 0f00 	cmp.w	fp, #0
   1f3da:	f000 80a0 	beq.w	1f51e <nvs_write+0x154>
   1f3de:	4604      	mov	r4, r0
   1f3e0:	460e      	mov	r6, r1
   1f3e2:	4699      	mov	r9, r3
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   1f3e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1f3e6:	681b      	ldr	r3, [r3, #0]
   1f3e8:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
   1f3ea:	2901      	cmp	r1, #1
   1f3ec:	d91e      	bls.n	1f42c <nvs_write+0x62>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1f3ee:	f101 0a07 	add.w	sl, r1, #7
   1f3f2:	424a      	negs	r2, r1
   1f3f4:	ea0a 0a02 	and.w	sl, sl, r2
	if (write_block_size <= 1U) {
   1f3f8:	2901      	cmp	r1, #1
   1f3fa:	d91a      	bls.n	1f432 <nvs_write+0x68>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1f3fc:	b2db      	uxtb	r3, r3
   1f3fe:	eb03 0809 	add.w	r8, r3, r9
   1f402:	f108 38ff 	add.w	r8, r8, #4294967295
   1f406:	425b      	negs	r3, r3
   1f408:	ea03 0808 	and.w	r8, r3, r8

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   1f40c:	89a3      	ldrh	r3, [r4, #12]
   1f40e:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   1f412:	4599      	cmp	r9, r3
   1f414:	f200 8086 	bhi.w	1f524 <nvs_write+0x15a>
   1f418:	f1b9 0f00 	cmp.w	r9, #0
   1f41c:	d003      	beq.n	1f426 <nvs_write+0x5c>
	    ((len > 0) && (data == NULL))) {
   1f41e:	9b01      	ldr	r3, [sp, #4]
   1f420:	2b00      	cmp	r3, #0
   1f422:	f000 8082 	beq.w	1f52a <nvs_write+0x160>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
   1f426:	6863      	ldr	r3, [r4, #4]
   1f428:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;
   1f42a:	e008      	b.n	1f43e <nvs_write+0x74>
		return len;
   1f42c:	f04f 0a08 	mov.w	sl, #8
   1f430:	e7e2      	b.n	1f3f8 <nvs_write+0x2e>
   1f432:	46c8      	mov	r8, r9
   1f434:	e7ea      	b.n	1f40c <nvs_write+0x42>
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   1f436:	6862      	ldr	r2, [r4, #4]
   1f438:	9b03      	ldr	r3, [sp, #12]
   1f43a:	429a      	cmp	r2, r3
   1f43c:	d013      	beq.n	1f466 <nvs_write+0x9c>
		rd_addr = wlk_addr;
   1f43e:	9f03      	ldr	r7, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1f440:	aa04      	add	r2, sp, #16
   1f442:	a903      	add	r1, sp, #12
   1f444:	4620      	mov	r0, r4
   1f446:	f7ff fc2d 	bl	1eca4 <nvs_prev_ate>
		if (rc) {
   1f44a:	4605      	mov	r5, r0
   1f44c:	2800      	cmp	r0, #0
   1f44e:	d160      	bne.n	1f512 <nvs_write+0x148>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   1f450:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1f454:	429e      	cmp	r6, r3
   1f456:	d1ee      	bne.n	1f436 <nvs_write+0x6c>
   1f458:	a904      	add	r1, sp, #16
   1f45a:	4620      	mov	r0, r4
   1f45c:	f7ff fba6 	bl	1ebac <nvs_ate_valid>
   1f460:	2800      	cmp	r0, #0
   1f462:	d0e8      	beq.n	1f436 <nvs_write+0x6c>
   1f464:	e001      	b.n	1f46a <nvs_write+0xa0>
	bool prev_found = false;
   1f466:	f04f 0b00 	mov.w	fp, #0
			break;
		}
	}

	if (prev_found) {
   1f46a:	f1bb 0f00 	cmp.w	fp, #0
   1f46e:	d018      	beq.n	1f4a2 <nvs_write+0xd8>
		/* previous entry found */
		rd_addr &= ADDR_SECT_MASK;
   1f470:	0c3f      	lsrs	r7, r7, #16
   1f472:	043f      	lsls	r7, r7, #16
		rd_addr += wlk_ate.offset;
   1f474:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   1f478:	4439      	add	r1, r7

		if (len == 0) {
   1f47a:	f1b9 0f00 	cmp.w	r9, #0
   1f47e:	d103      	bne.n	1f488 <nvs_write+0xbe>
			/* do not try to compare with empty data */
			if (wlk_ate.len == 0U) {
   1f480:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1f484:	b983      	cbnz	r3, 1f4a8 <nvs_write+0xde>
   1f486:	e044      	b.n	1f512 <nvs_write+0x148>
				/* skip delete entry as it is already the
				 * last one
				 */
				return 0;
			}
		} else if (len == wlk_ate.len) {
   1f488:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1f48c:	4599      	cmp	r9, r3
   1f48e:	d10b      	bne.n	1f4a8 <nvs_write+0xde>
			/* do not try to compare if lengths are not equal */
			/* compare the data and if equal return 0 */
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   1f490:	464b      	mov	r3, r9
   1f492:	9a01      	ldr	r2, [sp, #4]
   1f494:	4620      	mov	r0, r4
   1f496:	f7ff faf4 	bl	1ea82 <nvs_flash_block_cmp>
			if (rc <= 0) {
   1f49a:	2800      	cmp	r0, #0
   1f49c:	dc04      	bgt.n	1f4a8 <nvs_write+0xde>
				return rc;
   1f49e:	4605      	mov	r5, r0
   1f4a0:	e037      	b.n	1f512 <nvs_write+0x148>
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   1f4a2:	f1b9 0f00 	cmp.w	r9, #0
   1f4a6:	d034      	beq.n	1f512 <nvs_write+0x148>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   1f4a8:	f1b8 0f00 	cmp.w	r8, #0
   1f4ac:	d003      	beq.n	1f4b6 <nvs_write+0xec>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
   1f4ae:	fa1a f788 	uxtah	r7, sl, r8
   1f4b2:	b2bf      	uxth	r7, r7
   1f4b4:	e000      	b.n	1f4b8 <nvs_write+0xee>
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
   1f4b6:	2700      	movs	r7, #0
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   1f4b8:	f104 0814 	add.w	r8, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   1f4bc:	f04f 32ff 	mov.w	r2, #4294967295
   1f4c0:	f04f 33ff 	mov.w	r3, #4294967295
   1f4c4:	4640      	mov	r0, r8
   1f4c6:	f7fb ffe7 	bl	1b498 <z_impl_k_mutex_lock>

	gc_count = 0;
   1f4ca:	e00a      	b.n	1f4e2 <nvs_write+0x118>
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {

			rc = nvs_flash_wrt_entry(fs, id, data, len);
   1f4cc:	464b      	mov	r3, r9
   1f4ce:	9a01      	ldr	r2, [sp, #4]
   1f4d0:	4631      	mov	r1, r6
   1f4d2:	4620      	mov	r0, r4
   1f4d4:	f7ff fee3 	bl	1f29e <nvs_flash_wrt_entry>
			if (rc) {
   1f4d8:	4605      	mov	r5, r0
   1f4da:	b9b8      	cbnz	r0, 1f50c <nvs_write+0x142>
		if (rc) {
			goto end;
		}
		gc_count++;
	}
	rc = len;
   1f4dc:	464d      	mov	r5, r9
   1f4de:	e015      	b.n	1f50c <nvs_write+0x142>
		gc_count++;
   1f4e0:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
   1f4e2:	89e3      	ldrh	r3, [r4, #14]
   1f4e4:	429d      	cmp	r5, r3
   1f4e6:	d00f      	beq.n	1f508 <nvs_write+0x13e>
		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   1f4e8:	6862      	ldr	r2, [r4, #4]
   1f4ea:	68a3      	ldr	r3, [r4, #8]
   1f4ec:	443b      	add	r3, r7
   1f4ee:	429a      	cmp	r2, r3
   1f4f0:	d2ec      	bcs.n	1f4cc <nvs_write+0x102>
		rc = nvs_sector_close(fs);
   1f4f2:	4620      	mov	r0, r4
   1f4f4:	f7ff fef2 	bl	1f2dc <nvs_sector_close>
		if (rc) {
   1f4f8:	b978      	cbnz	r0, 1f51a <nvs_write+0x150>
		rc = nvs_gc(fs);
   1f4fa:	4620      	mov	r0, r4
   1f4fc:	f7ff fcfd 	bl	1eefa <nvs_gc>
		if (rc) {
   1f500:	2800      	cmp	r0, #0
   1f502:	d0ed      	beq.n	1f4e0 <nvs_write+0x116>
		rc = nvs_gc(fs);
   1f504:	4605      	mov	r5, r0
   1f506:	e001      	b.n	1f50c <nvs_write+0x142>
			rc = -ENOSPC;
   1f508:	f06f 051b 	mvn.w	r5, #27
	return z_impl_k_mutex_unlock(mutex);
   1f50c:	4640      	mov	r0, r8
   1f50e:	f7fc f84d 	bl	1b5ac <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   1f512:	4628      	mov	r0, r5
   1f514:	b007      	add	sp, #28
   1f516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = nvs_sector_close(fs);
   1f51a:	4605      	mov	r5, r0
   1f51c:	e7f6      	b.n	1f50c <nvs_write+0x142>
		return -EACCES;
   1f51e:	f06f 050c 	mvn.w	r5, #12
   1f522:	e7f6      	b.n	1f512 <nvs_write+0x148>
		return -EINVAL;
   1f524:	f06f 0515 	mvn.w	r5, #21
   1f528:	e7f3      	b.n	1f512 <nvs_write+0x148>
   1f52a:	f06f 0515 	mvn.w	r5, #21
   1f52e:	e7f0      	b.n	1f512 <nvs_write+0x148>

0001f530 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   1f530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f534:	b084      	sub	sp, #16
   1f536:	4699      	mov	r9, r3
   1f538:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   1f53c:	7c03      	ldrb	r3, [r0, #16]
   1f53e:	2b00      	cmp	r3, #0
   1f540:	d055      	beq.n	1f5ee <nvs_read_hist+0xbe>
   1f542:	4604      	mov	r4, r0
   1f544:	460f      	mov	r7, r1
   1f546:	4692      	mov	sl, r2
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   1f548:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1f54a:	681b      	ldr	r3, [r3, #0]
   1f54c:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   1f54e:	2a01      	cmp	r2, #1
   1f550:	d90c      	bls.n	1f56c <nvs_read_hist+0x3c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1f552:	4613      	mov	r3, r2
   1f554:	3207      	adds	r2, #7
   1f556:	425b      	negs	r3, r3
   1f558:	401a      	ands	r2, r3
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));

	if (len > (fs->sector_size - 2 * ate_size)) {
   1f55a:	89a3      	ldrh	r3, [r4, #12]
   1f55c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   1f560:	4599      	cmp	r9, r3
   1f562:	d847      	bhi.n	1f5f4 <nvs_read_hist+0xc4>
		return -EINVAL;
	}

	cnt_his = 0U;

	wlk_addr = fs->ate_wra;
   1f564:	6866      	ldr	r6, [r4, #4]
   1f566:	9603      	str	r6, [sp, #12]
	cnt_his = 0U;
   1f568:	2500      	movs	r5, #0
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
   1f56a:	e005      	b.n	1f578 <nvs_read_hist+0x48>
		return len;
   1f56c:	2208      	movs	r2, #8
   1f56e:	e7f4      	b.n	1f55a <nvs_read_hist+0x2a>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
			cnt_his++;
		}
		if (wlk_addr == fs->ate_wra) {
   1f570:	6862      	ldr	r2, [r4, #4]
   1f572:	9b03      	ldr	r3, [sp, #12]
   1f574:	429a      	cmp	r2, r3
   1f576:	d016      	beq.n	1f5a6 <nvs_read_hist+0x76>
	while (cnt_his <= cnt) {
   1f578:	45a8      	cmp	r8, r5
   1f57a:	d314      	bcc.n	1f5a6 <nvs_read_hist+0x76>
		rd_addr = wlk_addr;
   1f57c:	9e03      	ldr	r6, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   1f57e:	aa01      	add	r2, sp, #4
   1f580:	a903      	add	r1, sp, #12
   1f582:	4620      	mov	r0, r4
   1f584:	f7ff fb8e 	bl	1eca4 <nvs_prev_ate>
		if (rc) {
   1f588:	4603      	mov	r3, r0
   1f58a:	bb28      	cbnz	r0, 1f5d8 <nvs_read_hist+0xa8>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   1f58c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1f590:	429f      	cmp	r7, r3
   1f592:	d1ed      	bne.n	1f570 <nvs_read_hist+0x40>
   1f594:	a901      	add	r1, sp, #4
   1f596:	4620      	mov	r0, r4
   1f598:	f7ff fb08 	bl	1ebac <nvs_ate_valid>
   1f59c:	2800      	cmp	r0, #0
   1f59e:	d0e7      	beq.n	1f570 <nvs_read_hist+0x40>
			cnt_his++;
   1f5a0:	3501      	adds	r5, #1
   1f5a2:	b2ad      	uxth	r5, r5
   1f5a4:	e7e4      	b.n	1f570 <nvs_read_hist+0x40>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   1f5a6:	6862      	ldr	r2, [r4, #4]
   1f5a8:	9b03      	ldr	r3, [sp, #12]
   1f5aa:	429a      	cmp	r2, r3
   1f5ac:	d018      	beq.n	1f5e0 <nvs_read_hist+0xb0>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   1f5ae:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   1f5b2:	b313      	cbz	r3, 1f5fa <nvs_read_hist+0xca>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   1f5b4:	45a8      	cmp	r8, r5
   1f5b6:	d823      	bhi.n	1f600 <nvs_read_hist+0xd0>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
   1f5b8:	0c36      	lsrs	r6, r6, #16
   1f5ba:	0436      	lsls	r6, r6, #16
	rd_addr += wlk_ate.offset;
   1f5bc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   1f5c0:	454b      	cmp	r3, r9
   1f5c2:	bf28      	it	cs
   1f5c4:	464b      	movcs	r3, r9
   1f5c6:	4652      	mov	r2, sl
   1f5c8:	4431      	add	r1, r6
   1f5ca:	4620      	mov	r0, r4
   1f5cc:	f7ff fa2e 	bl	1ea2c <nvs_flash_rd>
	if (rc) {
   1f5d0:	4603      	mov	r3, r0
   1f5d2:	b908      	cbnz	r0, 1f5d8 <nvs_read_hist+0xa8>
		goto err;
	}

	return wlk_ate.len;
   1f5d4:	f8bd 3008 	ldrh.w	r3, [sp, #8]

err:
	return rc;
}
   1f5d8:	4618      	mov	r0, r3
   1f5da:	b004      	add	sp, #16
   1f5dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   1f5e0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1f5e4:	429f      	cmp	r7, r3
   1f5e6:	d0e2      	beq.n	1f5ae <nvs_read_hist+0x7e>
		return -ENOENT;
   1f5e8:	f06f 0301 	mvn.w	r3, #1
   1f5ec:	e7f4      	b.n	1f5d8 <nvs_read_hist+0xa8>
		return -EACCES;
   1f5ee:	f06f 030c 	mvn.w	r3, #12
   1f5f2:	e7f1      	b.n	1f5d8 <nvs_read_hist+0xa8>
		return -EINVAL;
   1f5f4:	f06f 0315 	mvn.w	r3, #21
   1f5f8:	e7ee      	b.n	1f5d8 <nvs_read_hist+0xa8>
		return -ENOENT;
   1f5fa:	f06f 0301 	mvn.w	r3, #1
   1f5fe:	e7eb      	b.n	1f5d8 <nvs_read_hist+0xa8>
   1f600:	f06f 0301 	mvn.w	r3, #1
   1f604:	e7e8      	b.n	1f5d8 <nvs_read_hist+0xa8>

0001f606 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   1f606:	b510      	push	{r4, lr}
   1f608:	b082      	sub	sp, #8
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   1f60a:	2400      	movs	r4, #0
   1f60c:	9400      	str	r4, [sp, #0]
   1f60e:	f7ff ff8f 	bl	1f530 <nvs_read_hist>
	return rc;
}
   1f612:	b002      	add	sp, #8
   1f614:	bd10      	pop	{r4, pc}

0001f616 <z_impl_zsock_close>:

	return 0;
}

int z_impl_zsock_close(int sock)
{
   1f616:	b530      	push	{r4, r5, lr}
   1f618:	b083      	sub	sp, #12
   1f61a:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   1f61c:	466a      	mov	r2, sp
   1f61e:	a901      	add	r1, sp, #4
   1f620:	f7f2 fdee 	bl	12200 <z_get_fd_obj_and_vtable>
	struct k_mutex *lock;
	void *ctx;
	int ret;

	ctx = get_sock_vtable(sock, &vtable, &lock);
	if (ctx == NULL) {
   1f624:	b1a8      	cbz	r0, 1f652 <z_impl_zsock_close+0x3c>
   1f626:	4604      	mov	r4, r0
		errno = EBADF;
		return -1;
	}

	(void)k_mutex_lock(lock, K_FOREVER);
   1f628:	9800      	ldr	r0, [sp, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   1f62a:	f04f 32ff 	mov.w	r2, #4294967295
   1f62e:	f04f 33ff 	mov.w	r3, #4294967295
   1f632:	f7fb ff31 	bl	1b498 <z_impl_k_mutex_lock>

	NET_DBG("close: ctx=%p, fd=%d", ctx, sock);

	ret = vtable->fd_vtable.close(ctx);
   1f636:	9b01      	ldr	r3, [sp, #4]
   1f638:	689b      	ldr	r3, [r3, #8]
   1f63a:	4620      	mov	r0, r4
   1f63c:	4798      	blx	r3
   1f63e:	4604      	mov	r4, r0

	k_mutex_unlock(lock);
   1f640:	9800      	ldr	r0, [sp, #0]
	return z_impl_k_mutex_unlock(mutex);
   1f642:	f7fb ffb3 	bl	1b5ac <z_impl_k_mutex_unlock>

	z_free_fd(sock);
   1f646:	4628      	mov	r0, r5
   1f648:	f7fe fc34 	bl	1deb4 <z_free_fd>

	return ret;
}
   1f64c:	4620      	mov	r0, r4
   1f64e:	b003      	add	sp, #12
   1f650:	bd30      	pop	{r4, r5, pc}
		errno = EBADF;
   1f652:	f000 fa76 	bl	1fb42 <__errno>
   1f656:	2309      	movs	r3, #9
   1f658:	6003      	str	r3, [r0, #0]
		return -1;
   1f65a:	f04f 34ff 	mov.w	r4, #4294967295
   1f65e:	e7f5      	b.n	1f64c <z_impl_zsock_close+0x36>

0001f660 <z_impl_zsock_sendto>:
	return status;
}

ssize_t z_impl_zsock_sendto(int sock, const void *buf, size_t len, int flags,
			   const struct sockaddr *dest_addr, socklen_t addrlen)
{
   1f660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f664:	b084      	sub	sp, #16
   1f666:	460e      	mov	r6, r1
   1f668:	4615      	mov	r5, r2
   1f66a:	461c      	mov	r4, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   1f66c:	aa03      	add	r2, sp, #12
   1f66e:	a902      	add	r1, sp, #8
   1f670:	f7f2 fdc6 	bl	12200 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   1f674:	b1f0      	cbz	r0, 1f6b4 <z_impl_zsock_sendto+0x54>
   1f676:	4607      	mov	r7, r0
   1f678:	9b02      	ldr	r3, [sp, #8]
   1f67a:	6a1b      	ldr	r3, [r3, #32]
   1f67c:	b1d3      	cbz	r3, 1f6b4 <z_impl_zsock_sendto+0x54>
   1f67e:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   1f680:	f04f 32ff 	mov.w	r2, #4294967295
   1f684:	f04f 33ff 	mov.w	r3, #4294967295
   1f688:	f7fb ff06 	bl	1b498 <z_impl_k_mutex_lock>
   1f68c:	9b02      	ldr	r3, [sp, #8]
   1f68e:	f8d3 8020 	ldr.w	r8, [r3, #32]
   1f692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f694:	9301      	str	r3, [sp, #4]
   1f696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f698:	9300      	str	r3, [sp, #0]
   1f69a:	4623      	mov	r3, r4
   1f69c:	462a      	mov	r2, r5
   1f69e:	4631      	mov	r1, r6
   1f6a0:	4638      	mov	r0, r7
   1f6a2:	47c0      	blx	r8
   1f6a4:	4604      	mov	r4, r0
   1f6a6:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_unlock(mutex);
   1f6a8:	f7fb ff80 	bl	1b5ac <z_impl_k_mutex_unlock>
}
   1f6ac:	4620      	mov	r0, r4
   1f6ae:	b004      	add	sp, #16
   1f6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   1f6b4:	f000 fa45 	bl	1fb42 <__errno>
   1f6b8:	2309      	movs	r3, #9
   1f6ba:	6003      	str	r3, [r0, #0]
   1f6bc:	f04f 34ff 	mov.w	r4, #4294967295
   1f6c0:	e7f4      	b.n	1f6ac <z_impl_zsock_sendto+0x4c>

0001f6c2 <z_impl_zsock_recvfrom>:
	return 0;
}

ssize_t z_impl_zsock_recvfrom(int sock, void *buf, size_t max_len, int flags,
			     struct sockaddr *src_addr, socklen_t *addrlen)
{
   1f6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f6c6:	b084      	sub	sp, #16
   1f6c8:	460e      	mov	r6, r1
   1f6ca:	4615      	mov	r5, r2
   1f6cc:	461c      	mov	r4, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   1f6ce:	aa03      	add	r2, sp, #12
   1f6d0:	a902      	add	r1, sp, #8
   1f6d2:	f7f2 fd95 	bl	12200 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   1f6d6:	b1f0      	cbz	r0, 1f716 <z_impl_zsock_recvfrom+0x54>
   1f6d8:	4607      	mov	r7, r0
   1f6da:	9b02      	ldr	r3, [sp, #8]
   1f6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f6de:	b1d3      	cbz	r3, 1f716 <z_impl_zsock_recvfrom+0x54>
   1f6e0:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   1f6e2:	f04f 32ff 	mov.w	r2, #4294967295
   1f6e6:	f04f 33ff 	mov.w	r3, #4294967295
   1f6ea:	f7fb fed5 	bl	1b498 <z_impl_k_mutex_lock>
   1f6ee:	9b02      	ldr	r3, [sp, #8]
   1f6f0:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   1f6f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f6f6:	9301      	str	r3, [sp, #4]
   1f6f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f6fa:	9300      	str	r3, [sp, #0]
   1f6fc:	4623      	mov	r3, r4
   1f6fe:	462a      	mov	r2, r5
   1f700:	4631      	mov	r1, r6
   1f702:	4638      	mov	r0, r7
   1f704:	47c0      	blx	r8
   1f706:	4604      	mov	r4, r0
   1f708:	9803      	ldr	r0, [sp, #12]
	return z_impl_k_mutex_unlock(mutex);
   1f70a:	f7fb ff4f 	bl	1b5ac <z_impl_k_mutex_unlock>
}
   1f70e:	4620      	mov	r0, r4
   1f710:	b004      	add	sp, #16
   1f712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   1f716:	f000 fa14 	bl	1fb42 <__errno>
   1f71a:	2309      	movs	r3, #9
   1f71c:	6003      	str	r3, [r0, #0]
   1f71e:	f04f 34ff 	mov.w	r4, #4294967295
   1f722:	e7f4      	b.n	1f70e <z_impl_zsock_recvfrom+0x4c>

0001f724 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1f724:	2200      	movs	r2, #0
   1f726:	6002      	str	r2, [r0, #0]
   1f728:	6042      	str	r2, [r0, #4]
   1f72a:	6082      	str	r2, [r0, #8]
}
   1f72c:	4770      	bx	lr

0001f72e <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   1f72e:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1f730:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1f734:	0089      	lsls	r1, r1, #2
   1f736:	3138      	adds	r1, #56	; 0x38
}
   1f738:	4408      	add	r0, r1
   1f73a:	4770      	bx	lr

0001f73c <get_sub_config>:
	const struct nrf_clock_control_config *config =
   1f73c:	6840      	ldr	r0, [r0, #4]
}
   1f73e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1f742:	4770      	bx	lr

0001f744 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   1f744:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   1f746:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   1f74a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1f74e:	4770      	bx	lr

0001f750 <get_status>:
{
   1f750:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1f752:	b2c9      	uxtb	r1, r1
   1f754:	f7ff ffeb 	bl	1f72e <get_sub_data>
   1f758:	6880      	ldr	r0, [r0, #8]
}
   1f75a:	f000 0007 	and.w	r0, r0, #7
   1f75e:	bd08      	pop	{r3, pc}

0001f760 <set_off_state>:
	__asm__ volatile(
   1f760:	f04f 0320 	mov.w	r3, #32
   1f764:	f3ef 8211 	mrs	r2, BASEPRI
   1f768:	f383 8811 	msr	BASEPRI, r3
   1f76c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1f770:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1f772:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1f776:	d001      	beq.n	1f77c <set_off_state+0x1c>
   1f778:	428b      	cmp	r3, r1
   1f77a:	d107      	bne.n	1f78c <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1f77c:	2301      	movs	r3, #1
   1f77e:	6003      	str	r3, [r0, #0]
	int err = 0;
   1f780:	2000      	movs	r0, #0
	__asm__ volatile(
   1f782:	f382 8811 	msr	BASEPRI, r2
   1f786:	f3bf 8f6f 	isb	sy
}
   1f78a:	4770      	bx	lr
		err = -EPERM;
   1f78c:	f04f 30ff 	mov.w	r0, #4294967295
   1f790:	e7f7      	b.n	1f782 <set_off_state+0x22>

0001f792 <set_starting_state>:
{
   1f792:	b410      	push	{r4}
	__asm__ volatile(
   1f794:	f04f 0320 	mov.w	r3, #32
   1f798:	f3ef 8211 	mrs	r2, BASEPRI
   1f79c:	f383 8811 	msr	BASEPRI, r3
   1f7a0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1f7a4:	6803      	ldr	r3, [r0, #0]
   1f7a6:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1f7aa:	f003 0307 	and.w	r3, r3, #7
   1f7ae:	2b01      	cmp	r3, #1
   1f7b0:	d00a      	beq.n	1f7c8 <set_starting_state+0x36>
	} else if (current_ctx != ctx) {
   1f7b2:	428c      	cmp	r4, r1
   1f7b4:	d00b      	beq.n	1f7ce <set_starting_state+0x3c>
		err = -EPERM;
   1f7b6:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   1f7ba:	f382 8811 	msr	BASEPRI, r2
   1f7be:	f3bf 8f6f 	isb	sy
}
   1f7c2:	f85d 4b04 	ldr.w	r4, [sp], #4
   1f7c6:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1f7c8:	6001      	str	r1, [r0, #0]
	int err = 0;
   1f7ca:	2000      	movs	r0, #0
   1f7cc:	e7f5      	b.n	1f7ba <set_starting_state+0x28>
		err = -EALREADY;
   1f7ce:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1f7d2:	e7f2      	b.n	1f7ba <set_starting_state+0x28>

0001f7d4 <set_on_state>:
	__asm__ volatile(
   1f7d4:	f04f 0320 	mov.w	r3, #32
   1f7d8:	f3ef 8211 	mrs	r2, BASEPRI
   1f7dc:	f383 8811 	msr	BASEPRI, r3
   1f7e0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1f7e4:	6803      	ldr	r3, [r0, #0]
   1f7e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1f7ea:	f043 0302 	orr.w	r3, r3, #2
   1f7ee:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1f7f0:	f382 8811 	msr	BASEPRI, r2
   1f7f4:	f3bf 8f6f 	isb	sy
}
   1f7f8:	4770      	bx	lr

0001f7fa <clkstarted_handle>:
{
   1f7fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f7fc:	4606      	mov	r6, r0
   1f7fe:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   1f800:	f7ff ff95 	bl	1f72e <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   1f804:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   1f806:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   1f808:	2300      	movs	r3, #0
   1f80a:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   1f80e:	f7ff ffe1 	bl	1f7d4 <set_on_state>
	if (callback) {
   1f812:	b11d      	cbz	r5, 1f81c <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1f814:	463a      	mov	r2, r7
   1f816:	4621      	mov	r1, r4
   1f818:	4630      	mov	r0, r6
   1f81a:	47a8      	blx	r5
}
   1f81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f81e <stop>:
{
   1f81e:	b570      	push	{r4, r5, r6, lr}
   1f820:	4606      	mov	r6, r0
   1f822:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1f824:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1f826:	4621      	mov	r1, r4
   1f828:	f7ff ff81 	bl	1f72e <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   1f82c:	4629      	mov	r1, r5
   1f82e:	3008      	adds	r0, #8
   1f830:	f7ff ff96 	bl	1f760 <set_off_state>
	if (err < 0) {
   1f834:	2800      	cmp	r0, #0
   1f836:	db06      	blt.n	1f846 <stop+0x28>
	get_sub_config(dev, type)->stop();
   1f838:	4621      	mov	r1, r4
   1f83a:	4630      	mov	r0, r6
   1f83c:	f7ff ff7e 	bl	1f73c <get_sub_config>
   1f840:	6843      	ldr	r3, [r0, #4]
   1f842:	4798      	blx	r3
	return 0;
   1f844:	2000      	movs	r0, #0
}
   1f846:	bd70      	pop	{r4, r5, r6, pc}

0001f848 <api_stop>:
{
   1f848:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   1f84a:	2280      	movs	r2, #128	; 0x80
   1f84c:	f7ff ffe7 	bl	1f81e <stop>
}
   1f850:	bd08      	pop	{r3, pc}

0001f852 <async_start>:
{
   1f852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f856:	4606      	mov	r6, r0
   1f858:	4690      	mov	r8, r2
   1f85a:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1f85c:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1f85e:	4629      	mov	r1, r5
   1f860:	f7ff ff65 	bl	1f72e <get_sub_data>
   1f864:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   1f866:	9906      	ldr	r1, [sp, #24]
   1f868:	3008      	adds	r0, #8
   1f86a:	f7ff ff92 	bl	1f792 <set_starting_state>
	if (err < 0) {
   1f86e:	2800      	cmp	r0, #0
   1f870:	db09      	blt.n	1f886 <async_start+0x34>
	subdata->cb = cb;
   1f872:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   1f876:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   1f878:	4629      	mov	r1, r5
   1f87a:	4630      	mov	r0, r6
   1f87c:	f7ff ff5e 	bl	1f73c <get_sub_config>
   1f880:	6803      	ldr	r3, [r0, #0]
   1f882:	4798      	blx	r3
	return 0;
   1f884:	2000      	movs	r0, #0
}
   1f886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f88a <api_start>:
{
   1f88a:	b510      	push	{r4, lr}
   1f88c:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1f88e:	2480      	movs	r4, #128	; 0x80
   1f890:	9400      	str	r4, [sp, #0]
   1f892:	f7ff ffde 	bl	1f852 <async_start>
}
   1f896:	b002      	add	sp, #8
   1f898:	bd10      	pop	{r4, pc}

0001f89a <onoff_started_callback>:
{
   1f89a:	b510      	push	{r4, lr}
   1f89c:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   1f89e:	b2c9      	uxtb	r1, r1
   1f8a0:	f7ff ff50 	bl	1f744 <get_onoff_manager>
	notify(mgr, 0);
   1f8a4:	2100      	movs	r1, #0
   1f8a6:	47a0      	blx	r4
}
   1f8a8:	bd10      	pop	{r4, pc}

0001f8aa <hfclk_start>:
{
   1f8aa:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1f8ac:	2001      	movs	r0, #1
   1f8ae:	f7f6 ff43 	bl	16738 <nrfx_clock_start>
}
   1f8b2:	bd08      	pop	{r3, pc}

0001f8b4 <lfclk_start>:
{
   1f8b4:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1f8b6:	2000      	movs	r0, #0
   1f8b8:	f7f6 ff3e 	bl	16738 <nrfx_clock_start>
}
   1f8bc:	bd08      	pop	{r3, pc}

0001f8be <hfclk_stop>:
{
   1f8be:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1f8c0:	2001      	movs	r0, #1
   1f8c2:	f7f6 ff6f 	bl	167a4 <nrfx_clock_stop>
}
   1f8c6:	bd08      	pop	{r3, pc}

0001f8c8 <lfclk_stop>:
{
   1f8c8:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1f8ca:	2000      	movs	r0, #0
   1f8cc:	f7f6 ff6a 	bl	167a4 <nrfx_clock_stop>
}
   1f8d0:	bd08      	pop	{r3, pc}

0001f8d2 <blocking_start_callback>:
{
   1f8d2:	b508      	push	{r3, lr}
   1f8d4:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1f8d6:	f7fb fead 	bl	1b634 <z_impl_k_sem_give>
}
   1f8da:	bd08      	pop	{r3, pc}

0001f8dc <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1f8dc:	4770      	bx	lr

0001f8de <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1f8de:	4770      	bx	lr

0001f8e0 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   1f8e0:	1a40      	subs	r0, r0, r1
}
   1f8e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1f8e6:	4770      	bx	lr

0001f8e8 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1f8e8:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1f8ec:	009b      	lsls	r3, r3, #2
   1f8ee:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1f8f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f8f4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   1f8f8:	2200      	movs	r2, #0
   1f8fa:	601a      	str	r2, [r3, #0]
   1f8fc:	681b      	ldr	r3, [r3, #0]
}
   1f8fe:	4770      	bx	lr

0001f900 <set_absolute_alarm>:
{
   1f900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f902:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1f904:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   1f908:	f7f4 f8c4 	bl	13a94 <get_comparator>
   1f90c:	4607      	mov	r7, r0
   1f90e:	e019      	b.n	1f944 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   1f910:	2013      	movs	r0, #19
   1f912:	f003 fa14 	bl	22d3e <z_impl_k_busy_wait>
}
   1f916:	e022      	b.n	1f95e <set_absolute_alarm+0x5e>
		event_clear(chan);
   1f918:	4630      	mov	r0, r6
   1f91a:	f7ff ffe5 	bl	1f8e8 <event_clear>
		event_enable(chan);
   1f91e:	4630      	mov	r0, r6
   1f920:	f7f4 f8c0 	bl	13aa4 <event_enable>
		set_comparator(chan, cc_val);
   1f924:	4629      	mov	r1, r5
   1f926:	4630      	mov	r0, r6
   1f928:	f7f4 f8aa 	bl	13a80 <set_comparator>
		now2 = counter();
   1f92c:	f7f4 f8ce 	bl	13acc <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1f930:	4284      	cmp	r4, r0
   1f932:	d01e      	beq.n	1f972 <set_absolute_alarm+0x72>
   1f934:	1c81      	adds	r1, r0, #2
   1f936:	4628      	mov	r0, r5
   1f938:	f7ff ffd2 	bl	1f8e0 <counter_sub>
	} while ((now2 != now) &&
   1f93c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1f940:	d917      	bls.n	1f972 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   1f942:	462f      	mov	r7, r5
		now = counter();
   1f944:	f7f4 f8c2 	bl	13acc <counter>
   1f948:	4604      	mov	r4, r0
		set_comparator(chan, now);
   1f94a:	4601      	mov	r1, r0
   1f94c:	4630      	mov	r0, r6
   1f94e:	f7f4 f897 	bl	13a80 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   1f952:	4621      	mov	r1, r4
   1f954:	4638      	mov	r0, r7
   1f956:	f7ff ffc3 	bl	1f8e0 <counter_sub>
   1f95a:	2801      	cmp	r0, #1
   1f95c:	d0d8      	beq.n	1f910 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1f95e:	1ca7      	adds	r7, r4, #2
   1f960:	4639      	mov	r1, r7
   1f962:	4628      	mov	r0, r5
   1f964:	f7ff ffbc 	bl	1f8e0 <counter_sub>
   1f968:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1f96c:	d9d4      	bls.n	1f918 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   1f96e:	463d      	mov	r5, r7
   1f970:	e7d2      	b.n	1f918 <set_absolute_alarm+0x18>
}
   1f972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f974 <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   1f974:	b510      	push	{r4, lr}
   1f976:	b40f      	push	{r0, r1, r2, r3}
   1f978:	f7f4 f972 	bl	13c60 <before_nse>
   1f97c:	bc0f      	pop	{r0, r1, r2, r3}
   1f97e:	f7f0 fb33 	bl	ffe8 <spm_request_random_number_nse>
   1f982:	b40f      	push	{r0, r1, r2, r3}
   1f984:	f7f4 f976 	bl	13c74 <after_nse>
   1f988:	bc0f      	pop	{r0, r1, r2, r3}
   1f98a:	bd10      	pop	{r4, pc}

0001f98c <spm_request_read>:
					size_t *olen);
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_READ
NRF_NSE(int, spm_request_read, void *destination, uint32_t addr, size_t len);
   1f98c:	b510      	push	{r4, lr}
   1f98e:	b40f      	push	{r0, r1, r2, r3}
   1f990:	f7f4 f966 	bl	13c60 <before_nse>
   1f994:	bc0f      	pop	{r0, r1, r2, r3}
   1f996:	f7f0 fb2b 	bl	fff0 <spm_request_read_nse>
   1f99a:	b40f      	push	{r0, r1, r2, r3}
   1f99c:	f7f4 f96a 	bl	13c74 <after_nse>
   1f9a0:	bc0f      	pop	{r0, r1, r2, r3}
   1f9a2:	bd10      	pop	{r4, pc}

0001f9a4 <z_irq_spurious>:
{
   1f9a4:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1f9a6:	2100      	movs	r1, #0
   1f9a8:	2001      	movs	r0, #1
   1f9aa:	f000 f812 	bl	1f9d2 <z_arm_fatal_error>
}
   1f9ae:	bd08      	pop	{r3, pc}

0001f9b0 <z_arm_prepare_switch_to_main>:
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   1f9b0:	2300      	movs	r3, #0
   1f9b2:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1f9b6:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   1f9ba:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   1f9be:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   1f9c2:	f3bf 8f6f 	isb	sy
}
   1f9c6:	4770      	bx	lr

0001f9c8 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
   1f9c8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   1f9cc:	f383 880b 	msr	PSPLIM, r3
}
   1f9d0:	4770      	bx	lr

0001f9d2 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1f9d2:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1f9d4:	f002 feb7 	bl	22746 <z_fatal_error>
}
   1f9d8:	bd08      	pop	{r3, pc}

0001f9da <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1f9da:	b508      	push	{r3, lr}
   1f9dc:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1f9de:	6800      	ldr	r0, [r0, #0]
   1f9e0:	f7ff fff7 	bl	1f9d2 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   1f9e4:	bd08      	pop	{r3, pc}

0001f9e6 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1f9e6:	b508      	push	{r3, lr}
	handler();
   1f9e8:	f7f4 fa68 	bl	13ebc <z_SysNmiOnReset>
	z_arm_int_exit();
   1f9ec:	f7f4 fbda 	bl	141a4 <z_arm_exc_exit>
}
   1f9f0:	bd08      	pop	{r3, pc}

0001f9f2 <memory_fault_recoverable>:
}
   1f9f2:	2000      	movs	r0, #0
   1f9f4:	4770      	bx	lr

0001f9f6 <debug_monitor>:
	*recoverable = false;
   1f9f6:	2300      	movs	r3, #0
   1f9f8:	700b      	strb	r3, [r1, #0]
}
   1f9fa:	4770      	bx	lr

0001f9fc <fault_handle>:
{
   1f9fc:	b508      	push	{r3, lr}
	*recoverable = false;
   1f9fe:	2300      	movs	r3, #0
   1fa00:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   1fa02:	1ecb      	subs	r3, r1, #3
   1fa04:	2b09      	cmp	r3, #9
   1fa06:	d81a      	bhi.n	1fa3e <fault_handle+0x42>
   1fa08:	e8df f003 	tbb	[pc, r3]
   1fa0c:	110d0905 	.word	0x110d0905
   1fa10:	19191919 	.word	0x19191919
   1fa14:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   1fa16:	4611      	mov	r1, r2
   1fa18:	f7f4 fb32 	bl	14080 <hard_fault>
		break;
   1fa1c:	e010      	b.n	1fa40 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   1fa1e:	2100      	movs	r1, #0
   1fa20:	f7f4 fac0 	bl	13fa4 <mem_manage_fault>
		break;
   1fa24:	e00c      	b.n	1fa40 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
   1fa26:	2100      	movs	r1, #0
   1fa28:	f7f4 fae8 	bl	13ffc <bus_fault>
		break;
   1fa2c:	e008      	b.n	1fa40 <fault_handle+0x44>
		reason = usage_fault(esf);
   1fa2e:	f7f4 fb0f 	bl	14050 <usage_fault>
		break;
   1fa32:	e005      	b.n	1fa40 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
   1fa34:	4611      	mov	r1, r2
   1fa36:	f7ff ffde 	bl	1f9f6 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1fa3a:	2000      	movs	r0, #0
		break;
   1fa3c:	e000      	b.n	1fa40 <fault_handle+0x44>
	*recoverable = false;
   1fa3e:	2000      	movs	r0, #0
}
   1fa40:	bd08      	pop	{r3, pc}

0001fa42 <z_arm_save_fp_context>:
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1fa42:	f3ef 8314 	mrs	r3, CONTROL
#if defined(CONFIG_FPU_SHARING)
	__ASSERT_NO_MSG(buffer != NULL);

	uint32_t CONTROL = __get_CONTROL();

	if (CONTROL & CONTROL_FPCA_Msk) {
   1fa46:	f013 0f04 	tst.w	r3, #4
   1fa4a:	d010      	beq.n	1fa6e <z_arm_save_fp_context+0x2c>
		/* Store caller-saved and callee-saved FP registers. */
		__asm__ volatile(
   1fa4c:	f100 0240 	add.w	r2, r0, #64	; 0x40
   1fa50:	ec80 0a10 	vstmia	r0, {s0-s15}
   1fa54:	ec82 8a10 	vstmia	r2, {s16-s31}
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
   1fa58:	eef1 2a10 	vmrs	r2, fpscr
			"vstmia %0, {s0-s15}\n"
			"vstmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);

		buffer->fpscr = __get_FPSCR();
   1fa5c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		buffer->ctx_saved = true;
   1fa60:	2201      	movs	r2, #1
   1fa62:	f880 2084 	strb.w	r2, [r0, #132]	; 0x84

		/* Disable FPCA so no stacking of FP registers happens in TFM. */
		__set_CONTROL(CONTROL & ~CONTROL_FPCA_Msk);
   1fa66:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   1fa6a:	f383 8814 	msr	CONTROL, r3
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   1fa6e:	4770      	bx	lr

0001fa70 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
{
#if defined(CONFIG_FPU_SHARING)
	if (buffer->ctx_saved) {
   1fa70:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
   1fa74:	b17b      	cbz	r3, 1fa96 <z_arm_restore_fp_context+0x26>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1fa76:	f3ef 8314 	mrs	r3, CONTROL
		/* Set FPCA first so it is set even if an interrupt happens
		 * during restoration.
		 */
		__set_CONTROL(__get_CONTROL() | CONTROL_FPCA_Msk);
   1fa7a:	f043 0304 	orr.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   1fa7e:	f383 8814 	msr	CONTROL, r3

		/* Restore FP state. */
		__set_FPSCR(buffer->fpscr);
   1fa82:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   1fa86:	eee1 3a10 	vmsr	fpscr, r3

		__asm__ volatile(
   1fa8a:	f100 0340 	add.w	r3, r0, #64	; 0x40
   1fa8e:	ec90 0a10 	vldmia	r0, {s0-s15}
   1fa92:	ec93 8a10 	vldmia	r3, {s16-s31}
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   1fa96:	4770      	bx	lr

0001fa98 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   1fa98:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   1fa9c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   1faa0:	d001      	beq.n	1faa6 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
   1faa2:	b2c0      	uxtb	r0, r0
   1faa4:	4770      	bx	lr
	}

	return -EINVAL;
   1faa6:	f06f 0015 	mvn.w	r0, #21
}
   1faaa:	4770      	bx	lr

0001faac <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   1faac:	6843      	ldr	r3, [r0, #4]
		&&
   1faae:	2b1f      	cmp	r3, #31
   1fab0:	d90a      	bls.n	1fac8 <mpu_partition_is_valid+0x1c>
		&&
   1fab2:	f013 0f1f 	tst.w	r3, #31
   1fab6:	d001      	beq.n	1fabc <mpu_partition_is_valid+0x10>
		&&
   1fab8:	2000      	movs	r0, #0
   1faba:	4770      	bx	lr
		((part->start &
   1fabc:	6803      	ldr	r3, [r0, #0]
		&&
   1fabe:	f013 0f1f 	tst.w	r3, #31
   1fac2:	d003      	beq.n	1facc <mpu_partition_is_valid+0x20>
   1fac4:	2000      	movs	r0, #0
   1fac6:	4770      	bx	lr
   1fac8:	2000      	movs	r0, #0
   1faca:	4770      	bx	lr
   1facc:	2001      	movs	r0, #1
}
   1face:	4770      	bx	lr

0001fad0 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
   1fad0:	280f      	cmp	r0, #15
   1fad2:	d805      	bhi.n	1fae0 <region_allocate_and_init+0x10>
{
   1fad4:	b510      	push	{r4, lr}
   1fad6:	4604      	mov	r4, r0
	region_init(index, region_conf);
   1fad8:	f7f4 fbc8 	bl	1426c <region_init>
	return index;
   1fadc:	4620      	mov	r0, r4
}
   1fade:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1fae0:	f06f 0015 	mvn.w	r0, #21
}
   1fae4:	4770      	bx	lr

0001fae6 <mpu_configure_region>:
{
   1fae6:	b530      	push	{r4, r5, lr}
   1fae8:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   1faea:	680b      	ldr	r3, [r1, #0]
   1faec:	9300      	str	r3, [sp, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   1faee:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   1faf0:	890d      	ldrh	r5, [r1, #8]
   1faf2:	f89d 2008 	ldrb.w	r2, [sp, #8]
   1faf6:	f365 0204 	bfi	r2, r5, #0, #5
	p_attr->mair_idx = attr->mair_idx;
   1fafa:	7a89      	ldrb	r1, [r1, #10]
   1fafc:	f361 1247 	bfi	r2, r1, #5, #3
   1fb00:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   1fb04:	f023 031f 	bic.w	r3, r3, #31
   1fb08:	4423      	add	r3, r4
   1fb0a:	3b01      	subs	r3, #1
   1fb0c:	f023 031f 	bic.w	r3, r3, #31
   1fb10:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   1fb12:	4669      	mov	r1, sp
   1fb14:	f7ff ffdc 	bl	1fad0 <region_allocate_and_init>
}
   1fb18:	b005      	add	sp, #20
   1fb1a:	bd30      	pop	{r4, r5, pc}

0001fb1c <arm_core_mpu_configure_static_mpu_regions>:
{
   1fb1c:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1fb1e:	f7f4 fc85 	bl	1442c <mpu_configure_static_mpu_regions>
}
   1fb22:	bd08      	pop	{r3, pc}

0001fb24 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   1fb24:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1fb26:	f7f4 fc8b 	bl	14440 <mpu_mark_areas_for_dynamic_regions>
}
   1fb2a:	bd08      	pop	{r3, pc}

0001fb2c <malloc_prepare>:
}
   1fb2c:	2000      	movs	r0, #0
   1fb2e:	4770      	bx	lr

0001fb30 <_stdout_hook_default>:
}
   1fb30:	f04f 30ff 	mov.w	r0, #4294967295
   1fb34:	4770      	bx	lr

0001fb36 <_write>:
{
   1fb36:	b508      	push	{r3, lr}
   1fb38:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1fb3a:	4611      	mov	r1, r2
   1fb3c:	f7f4 fd10 	bl	14560 <z_impl_zephyr_write_stdout>
}
   1fb40:	bd08      	pop	{r3, pc}

0001fb42 <__errno>:
{
   1fb42:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1fb44:	f7fb f9d0 	bl	1aee8 <z_impl_z_errno>
}
   1fb48:	bd08      	pop	{r3, pc}

0001fb4a <init_rx_queues>:
	net_gptp_init();
#endif
}

static void init_rx_queues(void)
{
   1fb4a:	b508      	push	{r3, lr}
	/* Starting TX side. The ordering is important here and the TX
	 * can only be started when RX side is ready to receive packets.
	 */
	net_if_init();
   1fb4c:	f7f4 fda4 	bl	14698 <net_if_init>

	net_tc_rx_init();

	/* This will take the interface up and start everything. */
	net_if_post_init();
   1fb50:	f7f4 fdc6 	bl	146e0 <net_if_post_init>

	/* Things to init after network interface is working */
	net_post_init();
}
   1fb54:	bd08      	pop	{r3, pc}

0001fb56 <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   1fb56:	b508      	push	{r3, lr}

	l3_init();

	net_mgmt_event_init();

	init_rx_queues();
   1fb58:	f7ff fff7 	bl	1fb4a <init_rx_queues>

	return services_init();
}
   1fb5c:	2000      	movs	r0, #0
   1fb5e:	bd08      	pop	{r3, pc}

0001fb60 <l2_flags_get>:
	if (!iface || !iface->if_dev) {
   1fb60:	b140      	cbz	r0, 1fb74 <l2_flags_get+0x14>
{
   1fb62:	b508      	push	{r3, lr}
   1fb64:	6803      	ldr	r3, [r0, #0]
   1fb66:	b13b      	cbz	r3, 1fb78 <l2_flags_get+0x18>
	return iface->if_dev->l2;
   1fb68:	685b      	ldr	r3, [r3, #4]
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   1fb6a:	b13b      	cbz	r3, 1fb7c <l2_flags_get+0x1c>
   1fb6c:	68db      	ldr	r3, [r3, #12]
   1fb6e:	b13b      	cbz	r3, 1fb80 <l2_flags_get+0x20>
		flags = net_if_l2(iface)->get_flags(iface);
   1fb70:	4798      	blx	r3
}
   1fb72:	bd08      	pop	{r3, pc}
	enum net_l2_flags flags = 0;
   1fb74:	2000      	movs	r0, #0
}
   1fb76:	4770      	bx	lr
	enum net_l2_flags flags = 0;
   1fb78:	2000      	movs	r0, #0
   1fb7a:	e7fa      	b.n	1fb72 <l2_flags_get+0x12>
   1fb7c:	2000      	movs	r0, #0
   1fb7e:	e7f8      	b.n	1fb72 <l2_flags_get+0x12>
   1fb80:	2000      	movs	r0, #0
   1fb82:	e7f6      	b.n	1fb72 <l2_flags_get+0x12>

0001fb84 <gpio_nrfx_port_get_raw>:
	return port->config;
   1fb84:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fb86:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1fb88:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   1fb8a:	600b      	str	r3, [r1, #0]
}
   1fb8c:	2000      	movs	r0, #0
   1fb8e:	4770      	bx	lr

0001fb90 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   1fb90:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fb92:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1fb94:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1fb96:	4042      	eors	r2, r0
   1fb98:	400a      	ands	r2, r1
   1fb9a:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1fb9c:	605a      	str	r2, [r3, #4]
}
   1fb9e:	2000      	movs	r0, #0
   1fba0:	4770      	bx	lr

0001fba2 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   1fba2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fba4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1fba6:	6099      	str	r1, [r3, #8]
}
   1fba8:	2000      	movs	r0, #0
   1fbaa:	4770      	bx	lr

0001fbac <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   1fbac:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fbae:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1fbb0:	60d9      	str	r1, [r3, #12]
}
   1fbb2:	2000      	movs	r0, #0
   1fbb4:	4770      	bx	lr

0001fbb6 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   1fbb6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fbb8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1fbba:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   1fbbc:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1fbbe:	6053      	str	r3, [r2, #4]
}
   1fbc0:	2000      	movs	r0, #0
   1fbc2:	4770      	bx	lr

0001fbc4 <gpio_nrfx_manage_callback>:
{
   1fbc4:	b470      	push	{r4, r5, r6}
	return port->data;
   1fbc6:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1fbc8:	1d05      	adds	r5, r0, #4
	return list->head;
   1fbca:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
   1fbcc:	b1db      	cbz	r3, 1fc06 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   1fbce:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1fbd0:	2400      	movs	r4, #0
   1fbd2:	e00a      	b.n	1fbea <gpio_nrfx_manage_callback+0x26>
	return node->next;
   1fbd4:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   1fbd6:	6043      	str	r3, [r0, #4]
	return list->tail;
   1fbd8:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1fbda:	42a1      	cmp	r1, r4
   1fbdc:	d10f      	bne.n	1fbfe <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   1fbde:	606b      	str	r3, [r5, #4]
}
   1fbe0:	e00d      	b.n	1fbfe <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   1fbe2:	606c      	str	r4, [r5, #4]
}
   1fbe4:	e00b      	b.n	1fbfe <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1fbe6:	461c      	mov	r4, r3
   1fbe8:	681b      	ldr	r3, [r3, #0]
   1fbea:	b15b      	cbz	r3, 1fc04 <gpio_nrfx_manage_callback+0x40>
   1fbec:	429e      	cmp	r6, r3
   1fbee:	d1fa      	bne.n	1fbe6 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   1fbf0:	2c00      	cmp	r4, #0
   1fbf2:	d0ef      	beq.n	1fbd4 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   1fbf4:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   1fbf6:	6023      	str	r3, [r4, #0]
	return list->tail;
   1fbf8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   1fbfa:	4299      	cmp	r1, r3
   1fbfc:	d0f1      	beq.n	1fbe2 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   1fbfe:	2300      	movs	r3, #0
   1fc00:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1fc02:	e000      	b.n	1fc06 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   1fc04:	b152      	cbz	r2, 1fc1c <gpio_nrfx_manage_callback+0x58>
	if (set) {
   1fc06:	b162      	cbz	r2, 1fc22 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   1fc08:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   1fc0a:	600b      	str	r3, [r1, #0]
	list->head = node;
   1fc0c:	6041      	str	r1, [r0, #4]
	return list->tail;
   1fc0e:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1fc10:	b10b      	cbz	r3, 1fc16 <gpio_nrfx_manage_callback+0x52>
	return 0;
   1fc12:	2000      	movs	r0, #0
   1fc14:	e006      	b.n	1fc24 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1fc16:	6069      	str	r1, [r5, #4]
   1fc18:	2000      	movs	r0, #0
}
   1fc1a:	e003      	b.n	1fc24 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   1fc1c:	f06f 0015 	mvn.w	r0, #21
   1fc20:	e000      	b.n	1fc24 <gpio_nrfx_manage_callback+0x60>
	return 0;
   1fc22:	2000      	movs	r0, #0
}
   1fc24:	bc70      	pop	{r4, r5, r6}
   1fc26:	4770      	bx	lr

0001fc28 <shift_write_context>:
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
}

static void shift_write_context(uint32_t shift, struct flash_context *w_ctx)
{
	w_ctx->flash_addr += shift;
   1fc28:	684b      	ldr	r3, [r1, #4]
   1fc2a:	4403      	add	r3, r0
   1fc2c:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
   1fc2e:	680b      	ldr	r3, [r1, #0]
   1fc30:	4403      	add	r3, r0
   1fc32:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
   1fc34:	688b      	ldr	r3, [r1, #8]
   1fc36:	1a18      	subs	r0, r3, r0
   1fc38:	6088      	str	r0, [r1, #8]
}
   1fc3a:	4770      	bx	lr

0001fc3c <erase_op>:
{
   1fc3c:	b538      	push	{r3, r4, r5, lr}
   1fc3e:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1fc40:	f001 fb10 	bl	21264 <nrfx_nvmc_flash_page_size_get>
   1fc44:	4605      	mov	r5, r0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   1fc46:	6860      	ldr	r0, [r4, #4]
   1fc48:	f7f6 ffbc 	bl	16bc4 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   1fc4c:	68a3      	ldr	r3, [r4, #8]
   1fc4e:	1b5b      	subs	r3, r3, r5
   1fc50:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   1fc52:	6862      	ldr	r2, [r4, #4]
   1fc54:	442a      	add	r2, r5
   1fc56:	6062      	str	r2, [r4, #4]
	} while (e_ctx->len > 0);
   1fc58:	2b00      	cmp	r3, #0
   1fc5a:	d1f4      	bne.n	1fc46 <erase_op+0xa>
}
   1fc5c:	2000      	movs	r0, #0
   1fc5e:	bd38      	pop	{r3, r4, r5, pc}

0001fc60 <erase>:

	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
   1fc60:	b500      	push	{lr}
   1fc62:	b085      	sub	sp, #20
	struct flash_context context = {
   1fc64:	2300      	movs	r3, #0
   1fc66:	9301      	str	r3, [sp, #4]
   1fc68:	9002      	str	r0, [sp, #8]
   1fc6a:	9103      	str	r1, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   1fc6c:	a801      	add	r0, sp, #4
   1fc6e:	f7ff ffe5 	bl	1fc3c <erase_op>
}
   1fc72:	b005      	add	sp, #20
   1fc74:	f85d fb04 	ldr.w	pc, [sp], #4

0001fc78 <write_op>:
{
   1fc78:	b510      	push	{r4, lr}
   1fc7a:	4604      	mov	r4, r0
	while (w_ctx->len >= sizeof(uint32_t)) {
   1fc7c:	68a3      	ldr	r3, [r4, #8]
   1fc7e:	2b03      	cmp	r3, #3
   1fc80:	d909      	bls.n	1fc96 <write_op+0x1e>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1fc82:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1fc84:	6819      	ldr	r1, [r3, #0]
   1fc86:	6860      	ldr	r0, [r4, #4]
   1fc88:	f001 fadc 	bl	21244 <nrfx_nvmc_word_write>
		shift_write_context(sizeof(uint32_t), w_ctx);
   1fc8c:	4621      	mov	r1, r4
   1fc8e:	2004      	movs	r0, #4
   1fc90:	f7ff ffca 	bl	1fc28 <shift_write_context>
   1fc94:	e7f2      	b.n	1fc7c <write_op+0x4>
	nvmc_wait_ready();
   1fc96:	f7f4 ffb5 	bl	14c04 <nvmc_wait_ready>
}
   1fc9a:	2000      	movs	r0, #0
   1fc9c:	bd10      	pop	{r4, pc}

0001fc9e <write>:

static int write(off_t addr, const void *data, size_t len)
{
   1fc9e:	b500      	push	{lr}
   1fca0:	b085      	sub	sp, #20
	struct flash_context context = {
   1fca2:	9101      	str	r1, [sp, #4]
   1fca4:	9002      	str	r0, [sp, #8]
   1fca6:	9203      	str	r2, [sp, #12]
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   1fca8:	a801      	add	r0, sp, #4
   1fcaa:	f7ff ffe5 	bl	1fc78 <write_op>
}
   1fcae:	b005      	add	sp, #20
   1fcb0:	f85d fb04 	ldr.w	pc, [sp], #4

0001fcb4 <flash_nrf_read>:
{
   1fcb4:	b570      	push	{r4, r5, r6, lr}
   1fcb6:	460c      	mov	r4, r1
   1fcb8:	4616      	mov	r6, r2
   1fcba:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
   1fcbc:	f001 face 	bl	2125c <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   1fcc0:	42a0      	cmp	r0, r4
   1fcc2:	d917      	bls.n	1fcf4 <flash_nrf_read+0x40>
   1fcc4:	2c00      	cmp	r4, #0
   1fcc6:	db18      	blt.n	1fcfa <flash_nrf_read+0x46>
	    addr < 0 ||
   1fcc8:	42a8      	cmp	r0, r5
   1fcca:	d319      	bcc.n	1fd00 <flash_nrf_read+0x4c>
	    (addr) + len > flash_size) {
   1fccc:	1963      	adds	r3, r4, r5
	    len > flash_size ||
   1fcce:	4298      	cmp	r0, r3
   1fcd0:	d319      	bcc.n	1fd06 <flash_nrf_read+0x52>
	if (!len) {
   1fcd2:	b1dd      	cbz	r5, 1fd0c <flash_nrf_read+0x58>
	if (addr < PM_APP_ADDRESS) {
   1fcd4:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   1fcd8:	db06      	blt.n	1fce8 <flash_nrf_read+0x34>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1fcda:	462a      	mov	r2, r5
   1fcdc:	4621      	mov	r1, r4
   1fcde:	4630      	mov	r0, r6
   1fce0:	f003 f949 	bl	22f76 <memcpy>
	return 0;
   1fce4:	2000      	movs	r0, #0
   1fce6:	e007      	b.n	1fcf8 <flash_nrf_read+0x44>
		return spm_request_read(data, addr, len);
   1fce8:	462a      	mov	r2, r5
   1fcea:	4621      	mov	r1, r4
   1fcec:	4630      	mov	r0, r6
   1fcee:	f7ff fe4d 	bl	1f98c <spm_request_read>
   1fcf2:	e001      	b.n	1fcf8 <flash_nrf_read+0x44>
		return -EINVAL;
   1fcf4:	f06f 0015 	mvn.w	r0, #21
}
   1fcf8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1fcfa:	f06f 0015 	mvn.w	r0, #21
   1fcfe:	e7fb      	b.n	1fcf8 <flash_nrf_read+0x44>
   1fd00:	f06f 0015 	mvn.w	r0, #21
   1fd04:	e7f8      	b.n	1fcf8 <flash_nrf_read+0x44>
   1fd06:	f06f 0015 	mvn.w	r0, #21
   1fd0a:	e7f5      	b.n	1fcf8 <flash_nrf_read+0x44>
		return 0;
   1fd0c:	2000      	movs	r0, #0
   1fd0e:	e7f3      	b.n	1fcf8 <flash_nrf_read+0x44>

0001fd10 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   1fd10:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fd12:	b083      	sub	sp, #12
   1fd14:	460e      	mov	r6, r1
   1fd16:	4617      	mov	r7, r2
   1fd18:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   1fd1a:	6882      	ldr	r2, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   1fd1c:	2300      	movs	r3, #0
   1fd1e:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   1fd20:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   1fd22:	6953      	ldr	r3, [r2, #20]
   1fd24:	466a      	mov	r2, sp
   1fd26:	a901      	add	r1, sp, #4
   1fd28:	4798      	blx	r3

	while (layout_size--) {
   1fd2a:	e014      	b.n	1fd56 <flash_get_page_info+0x46>
		info->size = layout->pages_size;
		if (offs == 0) {
			index_jmp = index - info->index;
		} else {
			index_jmp = (offs - info->start_offset) / info->size;
   1fd2c:	6823      	ldr	r3, [r4, #0]
   1fd2e:	1af3      	subs	r3, r6, r3
   1fd30:	fbb3 f5f0 	udiv	r5, r3, r0
		}

		index_jmp = MIN(index_jmp, layout->pages_count);
   1fd34:	6813      	ldr	r3, [r2, #0]
   1fd36:	42ab      	cmp	r3, r5
   1fd38:	bf28      	it	cs
   1fd3a:	462b      	movcs	r3, r5
		info->start_offset += (index_jmp * info->size);
   1fd3c:	6822      	ldr	r2, [r4, #0]
   1fd3e:	fb03 2000 	mla	r0, r3, r0, r2
   1fd42:	6020      	str	r0, [r4, #0]
		info->index += index_jmp;
   1fd44:	68a2      	ldr	r2, [r4, #8]
   1fd46:	441a      	add	r2, r3
   1fd48:	60a2      	str	r2, [r4, #8]
		if (index_jmp < layout->pages_count) {
   1fd4a:	9a01      	ldr	r2, [sp, #4]
   1fd4c:	6811      	ldr	r1, [r2, #0]
   1fd4e:	4299      	cmp	r1, r3
   1fd50:	d811      	bhi.n	1fd76 <flash_get_page_info+0x66>
			return 0;
		}

		layout++;
   1fd52:	3208      	adds	r2, #8
   1fd54:	9201      	str	r2, [sp, #4]
	while (layout_size--) {
   1fd56:	9b00      	ldr	r3, [sp, #0]
   1fd58:	1e5a      	subs	r2, r3, #1
   1fd5a:	9200      	str	r2, [sp, #0]
   1fd5c:	b13b      	cbz	r3, 1fd6e <flash_get_page_info+0x5e>
		info->size = layout->pages_size;
   1fd5e:	9a01      	ldr	r2, [sp, #4]
   1fd60:	6850      	ldr	r0, [r2, #4]
   1fd62:	6060      	str	r0, [r4, #4]
		if (offs == 0) {
   1fd64:	2e00      	cmp	r6, #0
   1fd66:	d1e1      	bne.n	1fd2c <flash_get_page_info+0x1c>
			index_jmp = index - info->index;
   1fd68:	68a3      	ldr	r3, [r4, #8]
   1fd6a:	1afd      	subs	r5, r7, r3
   1fd6c:	e7e2      	b.n	1fd34 <flash_get_page_info+0x24>
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   1fd6e:	f06f 0015 	mvn.w	r0, #21
}
   1fd72:	b003      	add	sp, #12
   1fd74:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return 0;
   1fd76:	2000      	movs	r0, #0
   1fd78:	e7fb      	b.n	1fd72 <flash_get_page_info+0x62>

0001fd7a <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   1fd7a:	b508      	push	{r3, lr}
   1fd7c:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   1fd7e:	2200      	movs	r2, #0
   1fd80:	f7ff ffc6 	bl	1fd10 <flash_get_page_info>
}
   1fd84:	bd08      	pop	{r3, pc}

0001fd86 <endtx_isr>:
	return dev->config;
   1fd86:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1fd88:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1fd8a:	f04f 0120 	mov.w	r1, #32
   1fd8e:	f3ef 8211 	mrs	r2, BASEPRI
   1fd92:	f381 8811 	msr	BASEPRI, r1
   1fd96:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fd9a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1fd9e:	b131      	cbz	r1, 1fdae <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fda0:	2100      	movs	r1, #0
   1fda2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1fda6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fdaa:	2101      	movs	r1, #1
   1fdac:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1fdae:	f382 8811 	msr	BASEPRI, r2
   1fdb2:	f3bf 8f6f 	isb	sy
}
   1fdb6:	4770      	bx	lr

0001fdb8 <uarte_nrfx_isr_int>:
{
   1fdb8:	b538      	push	{r3, r4, r5, lr}
   1fdba:	4604      	mov	r4, r0
	return dev->config;
   1fdbc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1fdbe:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   1fdc0:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1fdc4:	f413 7f80 	tst.w	r3, #256	; 0x100
   1fdc8:	d003      	beq.n	1fdd2 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fdca:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   1fdce:	2b00      	cmp	r3, #0
   1fdd0:	d139      	bne.n	1fe46 <uarte_nrfx_isr_int+0x8e>
	return dev->config;
   1fdd2:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1fdd4:	685b      	ldr	r3, [r3, #4]
   1fdd6:	f013 0f10 	tst.w	r3, #16
   1fdda:	d01a      	beq.n	1fe12 <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
   1fddc:	f04f 0320 	mov.w	r3, #32
   1fde0:	f3ef 8211 	mrs	r2, BASEPRI
   1fde4:	f383 8811 	msr	BASEPRI, r3
   1fde8:	f3bf 8f6f 	isb	sy
   1fdec:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1fdf0:	b113      	cbz	r3, 1fdf8 <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1fdf2:	2300      	movs	r3, #0
   1fdf4:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
   1fdf8:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   1fdfa:	68db      	ldr	r3, [r3, #12]
   1fdfc:	b10b      	cbz	r3, 1fe02 <uarte_nrfx_isr_int+0x4a>
   1fdfe:	691b      	ldr	r3, [r3, #16]
   1fe00:	b91b      	cbnz	r3, 1fe0a <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
   1fe02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1fe06:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
   1fe0a:	f382 8811 	msr	BASEPRI, r2
   1fe0e:	f3bf 8f6f 	isb	sy
	return dev->data;
   1fe12:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
   1fe14:	68da      	ldr	r2, [r3, #12]
   1fe16:	b1aa      	cbz	r2, 1fe44 <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fe18:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1fe1c:	b121      	cbz	r1, 1fe28 <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
   1fe1e:	2100      	movs	r1, #0
   1fe20:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   1fe22:	68da      	ldr	r2, [r3, #12]
   1fe24:	7b92      	ldrb	r2, [r2, #14]
   1fe26:	b98a      	cbnz	r2, 1fe4c <uarte_nrfx_isr_int+0x94>
   1fe28:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1fe2c:	b122      	cbz	r2, 1fe38 <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fe2e:	2200      	movs	r2, #0
   1fe30:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
   1fe34:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
   1fe38:	68da      	ldr	r2, [r3, #12]
   1fe3a:	6813      	ldr	r3, [r2, #0]
   1fe3c:	b113      	cbz	r3, 1fe44 <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   1fe3e:	6851      	ldr	r1, [r2, #4]
   1fe40:	4620      	mov	r0, r4
   1fe42:	4798      	blx	r3
}
   1fe44:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   1fe46:	f7ff ff9e 	bl	1fd86 <endtx_isr>
   1fe4a:	e7c2      	b.n	1fdd2 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
   1fe4c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1fe50:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   1fe54:	68db      	ldr	r3, [r3, #12]
   1fe56:	7399      	strb	r1, [r3, #14]
			return;
   1fe58:	e7f4      	b.n	1fe44 <uarte_nrfx_isr_int+0x8c>

0001fe5a <uarte_nrfx_configure>:
{
   1fe5a:	b570      	push	{r4, r5, r6, lr}
   1fe5c:	b082      	sub	sp, #8
   1fe5e:	4605      	mov	r5, r0
   1fe60:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   1fe62:	794b      	ldrb	r3, [r1, #5]
   1fe64:	2b01      	cmp	r3, #1
   1fe66:	d006      	beq.n	1fe76 <uarte_nrfx_configure+0x1c>
   1fe68:	2b03      	cmp	r3, #3
   1fe6a:	d011      	beq.n	1fe90 <uarte_nrfx_configure+0x36>
   1fe6c:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   1fe70:	4618      	mov	r0, r3
   1fe72:	b002      	add	sp, #8
   1fe74:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   1fe76:	2300      	movs	r3, #0
   1fe78:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1fe7c:	79a3      	ldrb	r3, [r4, #6]
   1fe7e:	2b03      	cmp	r3, #3
   1fe80:	d140      	bne.n	1ff04 <uarte_nrfx_configure+0xaa>
	switch (cfg->flow_ctrl) {
   1fe82:	79e3      	ldrb	r3, [r4, #7]
   1fe84:	b143      	cbz	r3, 1fe98 <uarte_nrfx_configure+0x3e>
   1fe86:	2b01      	cmp	r3, #1
   1fe88:	d010      	beq.n	1feac <uarte_nrfx_configure+0x52>
   1fe8a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1fe8e:	e7ef      	b.n	1fe70 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1fe90:	2310      	movs	r3, #16
   1fe92:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   1fe96:	e7f1      	b.n	1fe7c <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   1fe98:	2300      	movs	r3, #0
   1fe9a:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   1fe9e:	7923      	ldrb	r3, [r4, #4]
   1fea0:	b183      	cbz	r3, 1fec4 <uarte_nrfx_configure+0x6a>
   1fea2:	2b02      	cmp	r3, #2
   1fea4:	d02a      	beq.n	1fefc <uarte_nrfx_configure+0xa2>
   1fea6:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1feaa:	e7e1      	b.n	1fe70 <uarte_nrfx_configure+0x16>
	return dev->config;
   1feac:	686b      	ldr	r3, [r5, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   1feae:	685b      	ldr	r3, [r3, #4]
   1feb0:	f003 0201 	and.w	r2, r3, #1
   1feb4:	f003 0302 	and.w	r3, r3, #2
   1feb8:	4313      	orrs	r3, r2
   1feba:	d026      	beq.n	1ff0a <uarte_nrfx_configure+0xb0>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   1febc:	2301      	movs	r3, #1
   1febe:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   1fec2:	e7ec      	b.n	1fe9e <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   1fec4:	2300      	movs	r3, #0
   1fec6:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1feca:	6821      	ldr	r1, [r4, #0]
   1fecc:	4628      	mov	r0, r5
   1fece:	f7f4 ff49 	bl	14d64 <baudrate_set>
   1fed2:	4603      	mov	r3, r0
   1fed4:	b9e0      	cbnz	r0, 1ff10 <uarte_nrfx_configure+0xb6>
	return dev->config;
   1fed6:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   1fed8:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1feda:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   1fede:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   1fee2:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1fee6:	4331      	orrs	r1, r6
   1fee8:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1feea:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   1feee:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   1fef0:	3204      	adds	r2, #4
   1fef2:	e894 0003 	ldmia.w	r4, {r0, r1}
   1fef6:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   1fefa:	e7b9      	b.n	1fe70 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1fefc:	230e      	movs	r3, #14
   1fefe:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   1ff02:	e7e2      	b.n	1feca <uarte_nrfx_configure+0x70>
		return -ENOTSUP;
   1ff04:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1ff08:	e7b2      	b.n	1fe70 <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
   1ff0a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1ff0e:	e7af      	b.n	1fe70 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   1ff10:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1ff14:	e7ac      	b.n	1fe70 <uarte_nrfx_configure+0x16>

0001ff16 <uarte_nrfx_config_get>:
{
   1ff16:	460b      	mov	r3, r1
	return dev->data;
   1ff18:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   1ff1a:	6891      	ldr	r1, [r2, #8]
   1ff1c:	6850      	ldr	r0, [r2, #4]
   1ff1e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1ff22:	2000      	movs	r0, #0
   1ff24:	4770      	bx	lr

0001ff26 <uarte_nrfx_err_check>:
	return dev->config;
   1ff26:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1ff28:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1ff2a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1ff2e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1ff32:	4770      	bx	lr

0001ff34 <is_tx_ready>:
	return dev->config;
   1ff34:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1ff36:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1ff38:	685b      	ldr	r3, [r3, #4]
   1ff3a:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ff3e:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1ff42:	b929      	cbnz	r1, 1ff50 <is_tx_ready+0x1c>
   1ff44:	b933      	cbnz	r3, 1ff54 <is_tx_ready+0x20>
   1ff46:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   1ff4a:	b92b      	cbnz	r3, 1ff58 <is_tx_ready+0x24>
   1ff4c:	2000      	movs	r0, #0
   1ff4e:	4770      	bx	lr
   1ff50:	2001      	movs	r0, #1
   1ff52:	4770      	bx	lr
   1ff54:	2000      	movs	r0, #0
   1ff56:	4770      	bx	lr
   1ff58:	2001      	movs	r0, #1
}
   1ff5a:	4770      	bx	lr

0001ff5c <uarte_enable>:
	return dev->config;
   1ff5c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1ff5e:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1ff60:	2208      	movs	r2, #8
   1ff62:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1ff66:	4770      	bx	lr

0001ff68 <tx_start>:
{
   1ff68:	b510      	push	{r4, lr}
	return dev->config;
   1ff6a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1ff6c:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1ff6e:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1ff72:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ff76:	2300      	movs	r3, #0
   1ff78:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1ff7c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   1ff80:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   1ff84:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   1ff88:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1ff8a:	685b      	ldr	r3, [r3, #4]
   1ff8c:	f013 0f10 	tst.w	r3, #16
   1ff90:	d102      	bne.n	1ff98 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ff92:	2301      	movs	r3, #1
   1ff94:	60a3      	str	r3, [r4, #8]
}
   1ff96:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   1ff98:	2101      	movs	r1, #1
   1ff9a:	f7ff ffdf 	bl	1ff5c <uarte_enable>
    p_reg->INTENSET = mask;
   1ff9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1ffa2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1ffa6:	e7f4      	b.n	1ff92 <tx_start+0x2a>

0001ffa8 <uarte_nrfx_poll_in>:
{
   1ffa8:	b410      	push	{r4}
	return dev->data;
   1ffaa:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   1ffac:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1ffae:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ffb0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1ffb4:	b15a      	cbz	r2, 1ffce <uarte_nrfx_poll_in+0x26>
	*c = data->rx_data;
   1ffb6:	7d62      	ldrb	r2, [r4, #21]
   1ffb8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ffba:	2000      	movs	r0, #0
   1ffbc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1ffc0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ffc4:	2201      	movs	r2, #1
   1ffc6:	601a      	str	r2, [r3, #0]
}
   1ffc8:	f85d 4b04 	ldr.w	r4, [sp], #4
   1ffcc:	4770      	bx	lr
		return -1;
   1ffce:	f04f 30ff 	mov.w	r0, #4294967295
   1ffd2:	e7f9      	b.n	1ffc8 <uarte_nrfx_poll_in+0x20>

0001ffd4 <uarte_nrfx_fifo_fill>:
{
   1ffd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ffd8:	4680      	mov	r8, r0
	return dev->data;
   1ffda:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   1ffdc:	68fb      	ldr	r3, [r7, #12]
   1ffde:	899e      	ldrh	r6, [r3, #12]
   1ffe0:	4296      	cmp	r6, r2
   1ffe2:	bfa8      	it	ge
   1ffe4:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   1ffe6:	3310      	adds	r3, #16
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ffe8:	2201      	movs	r2, #1
   1ffea:	e8d3 0fef 	ldaex	r0, [r3]
   1ffee:	2800      	cmp	r0, #0
   1fff0:	d103      	bne.n	1fffa <uarte_nrfx_fifo_fill+0x26>
   1fff2:	e8c3 2fe4 	stlex	r4, r2, [r3]
   1fff6:	2c00      	cmp	r4, #0
   1fff8:	d1f7      	bne.n	1ffea <uarte_nrfx_fifo_fill+0x16>
   1fffa:	d101      	bne.n	20000 <uarte_nrfx_fifo_fill+0x2c>
	for (int i = 0; i < len; i++) {
   1fffc:	2300      	movs	r3, #0
   1fffe:	e006      	b.n	2000e <uarte_nrfx_fifo_fill+0x3a>
		return 0;
   20000:	2600      	movs	r6, #0
   20002:	e019      	b.n	20038 <uarte_nrfx_fifo_fill+0x64>
		data->int_driven->tx_buffer[i] = tx_data[i];
   20004:	68fc      	ldr	r4, [r7, #12]
   20006:	68a4      	ldr	r4, [r4, #8]
   20008:	5ccd      	ldrb	r5, [r1, r3]
   2000a:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
   2000c:	3301      	adds	r3, #1
   2000e:	42b3      	cmp	r3, r6
   20010:	dbf8      	blt.n	20004 <uarte_nrfx_fifo_fill+0x30>
	__asm__ volatile(
   20012:	f04f 0320 	mov.w	r3, #32
   20016:	f3ef 8411 	mrs	r4, BASEPRI
   2001a:	f383 8811 	msr	BASEPRI, r3
   2001e:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   20022:	4640      	mov	r0, r8
   20024:	f7ff ff86 	bl	1ff34 <is_tx_ready>
   20028:	b948      	cbnz	r0, 2003e <uarte_nrfx_fifo_fill+0x6a>
		data->int_driven->fifo_fill_lock = 0;
   2002a:	68fb      	ldr	r3, [r7, #12]
   2002c:	2600      	movs	r6, #0
   2002e:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
   20030:	f384 8811 	msr	BASEPRI, r4
   20034:	f3bf 8f6f 	isb	sy
}
   20038:	4630      	mov	r0, r6
   2003a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   2003e:	68fb      	ldr	r3, [r7, #12]
   20040:	4632      	mov	r2, r6
   20042:	6899      	ldr	r1, [r3, #8]
   20044:	4640      	mov	r0, r8
   20046:	f7ff ff8f 	bl	1ff68 <tx_start>
   2004a:	e7f1      	b.n	20030 <uarte_nrfx_fifo_fill+0x5c>

0002004c <uarte_nrfx_fifo_read>:
	return dev->config;
   2004c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2004e:	681b      	ldr	r3, [r3, #0]
	return dev->data;
   20050:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   20052:	2a00      	cmp	r2, #0
   20054:	dd0c      	ble.n	20070 <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20056:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   2005a:	b15a      	cbz	r2, 20074 <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2005c:	2200      	movs	r2, #0
   2005e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   20062:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   20066:	7d42      	ldrb	r2, [r0, #21]
   20068:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2006a:	2001      	movs	r0, #1
   2006c:	6018      	str	r0, [r3, #0]
}
   2006e:	4770      	bx	lr
	int num_rx = 0;
   20070:	2000      	movs	r0, #0
   20072:	4770      	bx	lr
   20074:	2000      	movs	r0, #0
}
   20076:	4770      	bx	lr

00020078 <uarte_nrfx_irq_tx_enable>:
	return dev->config;
   20078:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2007a:	681a      	ldr	r2, [r3, #0]
	return dev->data;
   2007c:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
   2007e:	f04f 0020 	mov.w	r0, #32
   20082:	f3ef 8311 	mrs	r3, BASEPRI
   20086:	f380 8811 	msr	BASEPRI, r0
   2008a:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   2008e:	68c9      	ldr	r1, [r1, #12]
   20090:	2000      	movs	r0, #0
   20092:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   20094:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   20098:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   2009c:	f383 8811 	msr	BASEPRI, r3
   200a0:	f3bf 8f6f 	isb	sy
}
   200a4:	4770      	bx	lr

000200a6 <uarte_nrfx_irq_tx_disable>:
	return dev->data;
   200a6:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
   200a8:	68db      	ldr	r3, [r3, #12]
   200aa:	2201      	movs	r2, #1
   200ac:	739a      	strb	r2, [r3, #14]
}
   200ae:	4770      	bx	lr

000200b0 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
   200b0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   200b2:	6819      	ldr	r1, [r3, #0]
	return dev->data;
   200b4:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
   200b6:	68db      	ldr	r3, [r3, #12]
   200b8:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   200ba:	b94a      	cbnz	r2, 200d0 <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   200bc:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   200c0:	b15a      	cbz	r2, 200da <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
   200c2:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   200c6:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
   200ca:	d008      	beq.n	200de <uarte_nrfx_irq_tx_ready_complete+0x2e>
   200cc:	2001      	movs	r0, #1
   200ce:	e000      	b.n	200d2 <uarte_nrfx_irq_tx_ready_complete+0x22>
   200d0:	2000      	movs	r0, #0
	if (ready) {
   200d2:	b108      	cbz	r0, 200d8 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   200d4:	2200      	movs	r2, #0
   200d6:	611a      	str	r2, [r3, #16]
}
   200d8:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   200da:	2000      	movs	r0, #0
   200dc:	e7f9      	b.n	200d2 <uarte_nrfx_irq_tx_ready_complete+0x22>
   200de:	2000      	movs	r0, #0
   200e0:	e7f7      	b.n	200d2 <uarte_nrfx_irq_tx_ready_complete+0x22>

000200e2 <uarte_nrfx_irq_rx_ready>:
	return dev->config;
   200e2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   200e4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   200e6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   200ea:	3800      	subs	r0, #0
   200ec:	bf18      	it	ne
   200ee:	2001      	movne	r0, #1
   200f0:	4770      	bx	lr

000200f2 <uarte_nrfx_irq_rx_enable>:
	return dev->config;
   200f2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   200f4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   200f6:	2210      	movs	r2, #16
   200f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   200fc:	4770      	bx	lr

000200fe <uarte_nrfx_irq_rx_disable>:
	return dev->config;
   200fe:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   20100:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   20102:	2210      	movs	r2, #16
   20104:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   20108:	4770      	bx	lr

0002010a <uarte_nrfx_irq_err_enable>:
	return dev->config;
   2010a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2010c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2010e:	f44f 7200 	mov.w	r2, #512	; 0x200
   20112:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20116:	4770      	bx	lr

00020118 <uarte_nrfx_irq_err_disable>:
	return dev->config;
   20118:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2011a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2011c:	f44f 7200 	mov.w	r2, #512	; 0x200
   20120:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   20124:	4770      	bx	lr

00020126 <uarte_nrfx_irq_is_pending>:
{
   20126:	b538      	push	{r3, r4, r5, lr}
   20128:	4604      	mov	r4, r0
	return dev->config;
   2012a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2012c:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   2012e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   20132:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   20136:	d106      	bne.n	20146 <uarte_nrfx_irq_is_pending+0x20>
   20138:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   2013c:	f013 0f10 	tst.w	r3, #16
   20140:	d107      	bne.n	20152 <uarte_nrfx_irq_is_pending+0x2c>
   20142:	2000      	movs	r0, #0
}
   20144:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   20146:	f7ff ffb3 	bl	200b0 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   2014a:	2800      	cmp	r0, #0
   2014c:	d0f4      	beq.n	20138 <uarte_nrfx_irq_is_pending+0x12>
		||
   2014e:	2001      	movs	r0, #1
   20150:	e7f8      	b.n	20144 <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
   20152:	4620      	mov	r0, r4
   20154:	f7ff ffc5 	bl	200e2 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   20158:	2800      	cmp	r0, #0
   2015a:	d0f3      	beq.n	20144 <uarte_nrfx_irq_is_pending+0x1e>
		||
   2015c:	2001      	movs	r0, #1
   2015e:	e7f1      	b.n	20144 <uarte_nrfx_irq_is_pending+0x1e>

00020160 <uarte_nrfx_irq_update>:
}
   20160:	2001      	movs	r0, #1
   20162:	4770      	bx	lr

00020164 <uarte_nrfx_irq_callback_set>:
	return dev->data;
   20164:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   20166:	68d8      	ldr	r0, [r3, #12]
   20168:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   2016a:	68db      	ldr	r3, [r3, #12]
   2016c:	605a      	str	r2, [r3, #4]
}
   2016e:	4770      	bx	lr

00020170 <wait_tx_ready>:
{
   20170:	b570      	push	{r4, r5, r6, lr}
   20172:	4606      	mov	r6, r0
   20174:	e014      	b.n	201a0 <wait_tx_ready+0x30>
		if (res) {
   20176:	b17d      	cbz	r5, 20198 <wait_tx_ready+0x28>
	__asm__ volatile(
   20178:	f04f 0320 	mov.w	r3, #32
   2017c:	f3ef 8411 	mrs	r4, BASEPRI
   20180:	f383 8811 	msr	BASEPRI, r3
   20184:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   20188:	4630      	mov	r0, r6
   2018a:	f7ff fed3 	bl	1ff34 <is_tx_ready>
   2018e:	b9a0      	cbnz	r0, 201ba <wait_tx_ready+0x4a>
	__asm__ volatile(
   20190:	f384 8811 	msr	BASEPRI, r4
   20194:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   20198:	2021      	movs	r0, #33	; 0x21
   2019a:	2100      	movs	r1, #0
   2019c:	f7fb fe2e 	bl	1bdfc <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   201a0:	2464      	movs	r4, #100	; 0x64
   201a2:	4630      	mov	r0, r6
   201a4:	f7ff fec6 	bl	1ff34 <is_tx_ready>
   201a8:	4605      	mov	r5, r0
   201aa:	2800      	cmp	r0, #0
   201ac:	d1e3      	bne.n	20176 <wait_tx_ready+0x6>
   201ae:	2001      	movs	r0, #1
   201b0:	f001 f817 	bl	211e2 <nrfx_busy_wait>
   201b4:	3c01      	subs	r4, #1
   201b6:	d1f4      	bne.n	201a2 <wait_tx_ready+0x32>
   201b8:	e7dd      	b.n	20176 <wait_tx_ready+0x6>
}
   201ba:	4620      	mov	r0, r4
   201bc:	bd70      	pop	{r4, r5, r6, pc}

000201be <entropy_cc3xx_rng_init>:
			return -EINVAL;
		}
	#endif

	return 0;
}
   201be:	2000      	movs	r0, #0
   201c0:	4770      	bx	lr

000201c2 <entropy_cc3xx_rng_get_entropy>:
{
   201c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   201c4:	b083      	sub	sp, #12
   201c6:	460f      	mov	r7, r1
   201c8:	4616      	mov	r6, r2
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   201ca:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   201ce:	2400      	movs	r4, #0
	int res = -EINVAL;
   201d0:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   201d4:	e009      	b.n	201ea <entropy_cc3xx_rng_get_entropy+0x28>
			res = spm_request_random_number(buffer + offset,
   201d6:	aa01      	add	r2, sp, #4
   201d8:	4629      	mov	r1, r5
   201da:	1938      	adds	r0, r7, r4
   201dc:	f7ff fbca 	bl	1f974 <spm_request_random_number>
		if (olen != chunk_size) {
   201e0:	9b01      	ldr	r3, [sp, #4]
   201e2:	42ab      	cmp	r3, r5
   201e4:	d109      	bne.n	201fa <entropy_cc3xx_rng_get_entropy+0x38>
		if (res != 0) {
   201e6:	b950      	cbnz	r0, 201fe <entropy_cc3xx_rng_get_entropy+0x3c>
		offset += chunk_size;
   201e8:	442c      	add	r4, r5
	while (offset < length) {
   201ea:	42a6      	cmp	r6, r4
   201ec:	d907      	bls.n	201fe <entropy_cc3xx_rng_get_entropy+0x3c>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   201ee:	1b33      	subs	r3, r6, r4
   201f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   201f4:	d2ef      	bcs.n	201d6 <entropy_cc3xx_rng_get_entropy+0x14>
			chunk_size = length - offset;
   201f6:	461d      	mov	r5, r3
   201f8:	e7ed      	b.n	201d6 <entropy_cc3xx_rng_get_entropy+0x14>
			return -EINVAL;
   201fa:	f06f 0015 	mvn.w	r0, #21
}
   201fe:	b003      	add	sp, #12
   20200:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020202 <sleeping_thread_init>:
{
   20202:	b508      	push	{r3, lr}
	k_sem_init(&thread->sem, 0, 1);
   20204:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
   20206:	2201      	movs	r2, #1
   20208:	2100      	movs	r1, #0
   2020a:	f002 fba4 	bl	22956 <z_impl_k_sem_init>
}
   2020e:	bd08      	pop	{r3, pc}

00020210 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   20210:	4668      	mov	r0, sp
   20212:	f020 0107 	bic.w	r1, r0, #7
   20216:	468d      	mov	sp, r1
   20218:	b501      	push	{r0, lr}
	nrf_modem_os_trace_irq_handler();
   2021a:	f7f6 fd13 	bl	16c44 <nrf_modem_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2021e:	f7f3 fddf 	bl	13de0 <_arch_isr_direct_pm>
   20222:	f7f3 ffbf 	bl	141a4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   20226:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2022a:	4685      	mov	sp, r0
   2022c:	4770      	bx	lr

0002022e <nrf_modem_os_busywait>:
{
   2022e:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   20230:	f002 fd85 	bl	22d3e <z_impl_k_busy_wait>
}
   20234:	bd08      	pop	{r3, pc}

00020236 <nrf_modem_os_timedwait>:
{
   20236:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2023a:	b088      	sub	sp, #32
   2023c:	460e      	mov	r6, r1
	return z_impl_k_uptime_ticks();
   2023e:	f002 fd7a 	bl	22d36 <z_impl_k_uptime_ticks>
   20242:	014b      	lsls	r3, r1, #5
   20244:	0142      	lsls	r2, r0, #5
   20246:	ea43 67d0 	orr.w	r7, r3, r0, lsr #27
   2024a:	1a13      	subs	r3, r2, r0
   2024c:	eb67 0201 	sbc.w	r2, r7, r1
   20250:	0097      	lsls	r7, r2, #2
   20252:	ea47 7793 	orr.w	r7, r7, r3, lsr #30
   20256:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   2025a:	463a      	mov	r2, r7
   2025c:	eb1c 0300 	adds.w	r3, ip, r0
   20260:	eb41 0202 	adc.w	r2, r1, r2
   20264:	00d1      	lsls	r1, r2, #3
   20266:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   2026a:	00d8      	lsls	r0, r3, #3
   2026c:	0bc3      	lsrs	r3, r0, #15
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   2026e:	ea43 4741 	orr.w	r7, r3, r1, lsl #17
	if (*timeout == 0) {
   20272:	6833      	ldr	r3, [r6, #0]
   20274:	2b00      	cmp	r3, #0
   20276:	d060      	beq.n	2033a <nrf_modem_os_timedwait+0x104>
   20278:	ea4f 3ad1 	mov.w	sl, r1, lsr #15
	if (*timeout < 0) {
   2027c:	2b00      	cmp	r3, #0
   2027e:	db60      	blt.n	20342 <nrf_modem_os_timedwait+0x10c>
	sleeping_thread_init(&thread);
   20280:	a801      	add	r0, sp, #4
   20282:	f7ff ffbe 	bl	20202 <sleeping_thread_init>
	if (!sleeping_thread_add(&thread)) {
   20286:	a801      	add	r0, sp, #4
   20288:	f7f4 fff6 	bl	15278 <sleeping_thread_add>
   2028c:	2800      	cmp	r0, #0
   2028e:	d062      	beq.n	20356 <nrf_modem_os_timedwait+0x120>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   20290:	6833      	ldr	r3, [r6, #0]
   20292:	f1b3 3fff 	cmp.w	r3, #4294967295
   20296:	d058      	beq.n	2034a <nrf_modem_os_timedwait+0x114>
   20298:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2029c:	ea4f 79e3 	mov.w	r9, r3, asr #31
   202a0:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   202a4:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   202a8:	03d8      	lsls	r0, r3, #15
   202aa:	f240 3ce7 	movw	ip, #999	; 0x3e7
   202ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   202b2:	2300      	movs	r3, #0
   202b4:	eb10 000c 	adds.w	r0, r0, ip
   202b8:	f04f 0c00 	mov.w	ip, #0
   202bc:	eb41 010c 	adc.w	r1, r1, ip
   202c0:	f7f0 fc52 	bl	10b68 <__aeabi_uldivmod>
   202c4:	4602      	mov	r2, r0
   202c6:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   202c8:	a802      	add	r0, sp, #8
   202ca:	f7fb f9db 	bl	1b684 <z_impl_k_sem_take>
	sleeping_thread_remove(&thread);
   202ce:	a801      	add	r0, sp, #4
   202d0:	f7f4 fff6 	bl	152c0 <sleeping_thread_remove>
	if (*timeout == SYS_FOREVER_MS) {
   202d4:	6833      	ldr	r3, [r6, #0]
   202d6:	f1b3 3fff 	cmp.w	r3, #4294967295
   202da:	d040      	beq.n	2035e <nrf_modem_os_timedwait+0x128>
	remaining = *timeout - k_uptime_delta(&start);
   202dc:	4698      	mov	r8, r3
   202de:	ea4f 79e3 	mov.w	r9, r3, asr #31
	return z_impl_k_uptime_ticks();
   202e2:	f002 fd28 	bl	22d36 <z_impl_k_uptime_ticks>
   202e6:	014b      	lsls	r3, r1, #5
   202e8:	0142      	lsls	r2, r0, #5
   202ea:	ea43 6cd0 	orr.w	ip, r3, r0, lsr #27
   202ee:	1a13      	subs	r3, r2, r0
   202f0:	eb6c 0201 	sbc.w	r2, ip, r1
   202f4:	ea4f 0c82 	mov.w	ip, r2, lsl #2
   202f8:	ea4c 7c93 	orr.w	ip, ip, r3, lsr #30
   202fc:	ea4f 0e83 	mov.w	lr, r3, lsl #2
   20300:	4662      	mov	r2, ip
   20302:	eb1e 0300 	adds.w	r3, lr, r0
   20306:	eb41 0202 	adc.w	r2, r1, r2
   2030a:	00d1      	lsls	r1, r2, #3
   2030c:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
   20310:	00d8      	lsls	r0, r3, #3
   20312:	0bc3      	lsrs	r3, r0, #15
   20314:	ea43 4241 	orr.w	r2, r3, r1, lsl #17
   20318:	0bc8      	lsrs	r0, r1, #15
   2031a:	1abf      	subs	r7, r7, r2
   2031c:	eb6a 0a00 	sbc.w	sl, sl, r0
   20320:	eb17 0408 	adds.w	r4, r7, r8
   20324:	eb4a 0509 	adc.w	r5, sl, r9
	*timeout = remaining > 0 ? remaining : 0;
   20328:	4623      	mov	r3, r4
   2032a:	2c00      	cmp	r4, #0
   2032c:	f175 0200 	sbcs.w	r2, r5, #0
   20330:	db0f      	blt.n	20352 <nrf_modem_os_timedwait+0x11c>
   20332:	6033      	str	r3, [r6, #0]
	if (*timeout == 0) {
   20334:	b1ab      	cbz	r3, 20362 <nrf_modem_os_timedwait+0x12c>
	return 0;
   20336:	2000      	movs	r0, #0
   20338:	e00e      	b.n	20358 <nrf_modem_os_timedwait+0x122>
	z_impl_k_yield();
   2033a:	f7fb fccb 	bl	1bcd4 <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   2033e:	203c      	movs	r0, #60	; 0x3c
   20340:	e00a      	b.n	20358 <nrf_modem_os_timedwait+0x122>
		*timeout = SYS_FOREVER_MS;
   20342:	f04f 33ff 	mov.w	r3, #4294967295
   20346:	6033      	str	r3, [r6, #0]
   20348:	e79a      	b.n	20280 <nrf_modem_os_timedwait+0x4a>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   2034a:	f04f 32ff 	mov.w	r2, #4294967295
   2034e:	4613      	mov	r3, r2
   20350:	e7ba      	b.n	202c8 <nrf_modem_os_timedwait+0x92>
	*timeout = remaining > 0 ? remaining : 0;
   20352:	2300      	movs	r3, #0
   20354:	e7ed      	b.n	20332 <nrf_modem_os_timedwait+0xfc>
		return 0;
   20356:	2000      	movs	r0, #0
}
   20358:	b008      	add	sp, #32
   2035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   2035e:	2000      	movs	r0, #0
   20360:	e7fa      	b.n	20358 <nrf_modem_os_timedwait+0x122>
		return NRF_ETIMEDOUT;
   20362:	203c      	movs	r0, #60	; 0x3c
   20364:	e7f8      	b.n	20358 <nrf_modem_os_timedwait+0x122>

00020366 <nrf_modem_os_is_in_isr>:
{
   20366:	b508      	push	{r3, lr}
	return k_is_in_isr();
   20368:	f002 fa8e 	bl	22888 <k_is_in_isr>
}
   2036c:	bd08      	pop	{r3, pc}

0002036e <trace_task_create>:
{
   2036e:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   20370:	2200      	movs	r2, #0
   20372:	2106      	movs	r1, #6
   20374:	201d      	movs	r0, #29
   20376:	f7f3 fd1d 	bl	13db4 <z_arm_irq_priority_set>
	irq_enable(TRACE_IRQ);
   2037a:	201d      	movs	r0, #29
   2037c:	f7f3 fcfc 	bl	13d78 <arch_irq_enable>
}
   20380:	bd08      	pop	{r3, pc}

00020382 <read_task_create>:
{
   20382:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(NRF_MODEM_APPLICATION_IRQ,
   20384:	2200      	movs	r2, #0
   20386:	2106      	movs	r1, #6
   20388:	201c      	movs	r0, #28
   2038a:	f7f3 fd13 	bl	13db4 <z_arm_irq_priority_set>
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
   2038e:	201c      	movs	r0, #28
   20390:	f7f3 fcf2 	bl	13d78 <arch_irq_enable>
}
   20394:	bd08      	pop	{r3, pc}

00020396 <nrf_modem_os_trace_put>:
			transfer_len);
		remaining_bytes -= transfer_len;
	}
#endif
	return 0;
}
   20396:	2000      	movs	r0, #0
   20398:	4770      	bx	lr

0002039a <z_to_nrf_ipv4>:
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   2039a:	2310      	movs	r3, #16
   2039c:	700b      	strb	r3, [r1, #0]
	nrf_out->sin_port = ptr->sin_port;
   2039e:	8843      	ldrh	r3, [r0, #2]
   203a0:	810b      	strh	r3, [r1, #8]
	nrf_out->sin_family = NRF_AF_INET;
   203a2:	2302      	movs	r3, #2
   203a4:	604b      	str	r3, [r1, #4]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   203a6:	6843      	ldr	r3, [r0, #4]
   203a8:	60cb      	str	r3, [r1, #12]
}
   203aa:	4770      	bx	lr

000203ac <nrf_to_z_ipv4>:
	ptr->sin_port = nrf_in->sin_port;
   203ac:	890b      	ldrh	r3, [r1, #8]
   203ae:	8043      	strh	r3, [r0, #2]
	ptr->sin_family = AF_INET;
   203b0:	2301      	movs	r3, #1
   203b2:	8003      	strh	r3, [r0, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   203b4:	68cb      	ldr	r3, [r1, #12]
   203b6:	6043      	str	r3, [r0, #4]
}
   203b8:	4770      	bx	lr

000203ba <z_to_nrf_level>:
	switch (z_in_level) {
   203ba:	f240 2302 	movw	r3, #514	; 0x202
   203be:	4298      	cmp	r0, r3
   203c0:	d01d      	beq.n	203fe <z_to_nrf_level+0x44>
   203c2:	dc0c      	bgt.n	203de <z_to_nrf_level+0x24>
   203c4:	2801      	cmp	r0, #1
   203c6:	d016      	beq.n	203f6 <z_to_nrf_level+0x3c>
   203c8:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   203cc:	d104      	bne.n	203d8 <z_to_nrf_level+0x1e>
		*nrf_out_level = NRF_SOL_SECURE;
   203ce:	f44f 738d 	mov.w	r3, #282	; 0x11a
   203d2:	600b      	str	r3, [r1, #0]
	int retval = 0;
   203d4:	2000      	movs	r0, #0
		break;
   203d6:	4770      	bx	lr
	switch (z_in_level) {
   203d8:	f04f 30ff 	mov.w	r0, #4294967295
   203dc:	4770      	bx	lr
   203de:	f240 2303 	movw	r3, #515	; 0x203
   203e2:	4298      	cmp	r0, r3
   203e4:	d104      	bne.n	203f0 <z_to_nrf_level+0x36>
		*nrf_out_level = NRF_SOL_DFU;
   203e6:	f240 2303 	movw	r3, #515	; 0x203
   203ea:	600b      	str	r3, [r1, #0]
	int retval = 0;
   203ec:	2000      	movs	r0, #0
		break;
   203ee:	4770      	bx	lr
	switch (z_in_level) {
   203f0:	f04f 30ff 	mov.w	r0, #4294967295
   203f4:	4770      	bx	lr
		*nrf_out_level = NRF_SOL_SOCKET;
   203f6:	2301      	movs	r3, #1
   203f8:	600b      	str	r3, [r1, #0]
	int retval = 0;
   203fa:	2000      	movs	r0, #0
		break;
   203fc:	4770      	bx	lr
		*nrf_out_level = NRF_SOL_PDN;
   203fe:	f240 2302 	movw	r3, #514	; 0x202
   20402:	600b      	str	r3, [r1, #0]
	int retval = 0;
   20404:	2000      	movs	r0, #0
}
   20406:	4770      	bx	lr

00020408 <z_to_nrf_optname>:
	switch (z_in_level) {
   20408:	f240 2302 	movw	r3, #514	; 0x202
   2040c:	4298      	cmp	r0, r3
   2040e:	f000 80d9 	beq.w	205c4 <z_to_nrf_optname+0x1bc>
   20412:	dc19      	bgt.n	20448 <z_to_nrf_optname+0x40>
   20414:	2801      	cmp	r0, #1
   20416:	d05c      	beq.n	204d2 <z_to_nrf_optname+0xca>
   20418:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   2041c:	d111      	bne.n	20442 <z_to_nrf_optname+0x3a>
		switch (z_in_optname) {
   2041e:	3901      	subs	r1, #1
   20420:	290b      	cmp	r1, #11
   20422:	f200 80e4 	bhi.w	205ee <z_to_nrf_optname+0x1e6>
   20426:	e8df f011 	tbh	[pc, r1, lsl #1]
   2042a:	0030      	.short	0x0030
   2042c:	00380034 	.word	0x00380034
   20430:	0040003c 	.word	0x0040003c
   20434:	00e20044 	.word	0x00e20044
   20438:	00e200e2 	.word	0x00e200e2
   2043c:	004c0048 	.word	0x004c0048
   20440:	0050      	.short	0x0050
	switch (z_in_level) {
   20442:	f04f 30ff 	mov.w	r0, #4294967295
   20446:	4770      	bx	lr
   20448:	f240 2303 	movw	r3, #515	; 0x203
   2044c:	4298      	cmp	r0, r3
   2044e:	d119      	bne.n	20484 <z_to_nrf_optname+0x7c>
		switch (z_in_optname) {
   20450:	3901      	subs	r1, #1
   20452:	2913      	cmp	r1, #19
   20454:	f200 80d1 	bhi.w	205fa <z_to_nrf_optname+0x1f2>
   20458:	e8df f011 	tbh	[pc, r1, lsl #1]
   2045c:	00980094 	.word	0x00980094
   20460:	00a0009c 	.word	0x00a0009c
   20464:	00a800a4 	.word	0x00a800a4
   20468:	00cf00ac 	.word	0x00cf00ac
   2046c:	00cf00cf 	.word	0x00cf00cf
   20470:	00cf00cf 	.word	0x00cf00cf
   20474:	00cf00cf 	.word	0x00cf00cf
   20478:	00cf00cf 	.word	0x00cf00cf
   2047c:	00cf00cf 	.word	0x00cf00cf
   20480:	00b000cf 	.word	0x00b000cf
	switch (z_in_level) {
   20484:	f04f 30ff 	mov.w	r0, #4294967295
   20488:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   2048a:	2302      	movs	r3, #2
   2048c:	6013      	str	r3, [r2, #0]
	int retval = 0;
   2048e:	2000      	movs	r0, #0
			break;
   20490:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_HOSTNAME;
   20492:	2305      	movs	r3, #5
   20494:	6013      	str	r3, [r2, #0]
	int retval = 0;
   20496:	2000      	movs	r0, #0
			break;
   20498:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_CIPHERSUITE_LIST;
   2049a:	2306      	movs	r3, #6
   2049c:	6013      	str	r3, [r2, #0]
	int retval = 0;
   2049e:	2000      	movs	r0, #0
			break;
   204a0:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_CIPHER_IN_USE;
   204a2:	2307      	movs	r3, #7
   204a4:	6013      	str	r3, [r2, #0]
	int retval = 0;
   204a6:	2000      	movs	r0, #0
			break;
   204a8:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   204aa:	2304      	movs	r3, #4
   204ac:	6013      	str	r3, [r2, #0]
	int retval = 0;
   204ae:	2000      	movs	r0, #0
			break;
   204b0:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   204b2:	2301      	movs	r3, #1
   204b4:	6013      	str	r3, [r2, #0]
	int retval = 0;
   204b6:	2000      	movs	r0, #0
			break;
   204b8:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE;
   204ba:	2303      	movs	r3, #3
   204bc:	6013      	str	r3, [r2, #0]
	int retval = 0;
   204be:	2000      	movs	r0, #0
			break;
   204c0:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE_PURGE;
   204c2:	2309      	movs	r3, #9
   204c4:	6013      	str	r3, [r2, #0]
	int retval = 0;
   204c6:	2000      	movs	r0, #0
			break;
   204c8:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_DTLS_HANDSHAKE_TIMEO;
   204ca:	2308      	movs	r3, #8
   204cc:	6013      	str	r3, [r2, #0]
	int retval = 0;
   204ce:	2000      	movs	r0, #0
			break;
   204d0:	4770      	bx	lr
		switch (z_in_optname) {
   204d2:	3902      	subs	r1, #2
   204d4:	2935      	cmp	r1, #53	; 0x35
   204d6:	f200 808d 	bhi.w	205f4 <z_to_nrf_optname+0x1ec>
   204da:	e8df f001 	tbb	[pc, r1]
   204de:	8b2b      	.short	0x8b2b
   204e0:	8b8b8b1b 	.word	0x8b8b8b1b
   204e4:	8b8b8b8b 	.word	0x8b8b8b8b
   204e8:	8b8b8b8b 	.word	0x8b8b8b8b
   204ec:	8b8b8b8b 	.word	0x8b8b8b8b
   204f0:	8b8b231f 	.word	0x8b8b231f
   204f4:	8b8b278b 	.word	0x8b8b278b
   204f8:	332f8b8b 	.word	0x332f8b8b
   204fc:	8b8b8b37 	.word	0x8b8b8b37
   20500:	8b8b8b8b 	.word	0x8b8b8b8b
   20504:	8b8b8b8b 	.word	0x8b8b8b8b
   20508:	8b8b8b8b 	.word	0x8b8b8b8b
   2050c:	433f8b8b 	.word	0x433f8b8b
   20510:	3b4f4b47 	.word	0x3b4f4b47
			*nrf_out_optname = NRF_SO_ERROR;
   20514:	2304      	movs	r3, #4
   20516:	6013      	str	r3, [r2, #0]
	int retval = 0;
   20518:	2000      	movs	r0, #0
			break;
   2051a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   2051c:	2314      	movs	r3, #20
   2051e:	6013      	str	r3, [r2, #0]
	int retval = 0;
   20520:	2000      	movs	r0, #0
			break;
   20522:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   20524:	2315      	movs	r3, #21
   20526:	6013      	str	r3, [r2, #0]
	int retval = 0;
   20528:	2000      	movs	r0, #0
			break;
   2052a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   2052c:	2319      	movs	r3, #25
   2052e:	6013      	str	r3, [r2, #0]
	int retval = 0;
   20530:	2000      	movs	r0, #0
			break;
   20532:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_REUSEADDR;
   20534:	2328      	movs	r3, #40	; 0x28
   20536:	6013      	str	r3, [r2, #0]
	int retval = 0;
   20538:	2000      	movs	r0, #0
			break;
   2053a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   2053c:	231e      	movs	r3, #30
   2053e:	6013      	str	r3, [r2, #0]
	int retval = 0;
   20540:	2000      	movs	r0, #0
			break;
   20542:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_IP_ECHO_REPLY;
   20544:	231f      	movs	r3, #31
   20546:	6013      	str	r3, [r2, #0]
	int retval = 0;
   20548:	2000      	movs	r0, #0
			break;
   2054a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_IPV6_ECHO_REPLY;
   2054c:	2320      	movs	r3, #32
   2054e:	6013      	str	r3, [r2, #0]
	int retval = 0;
   20550:	2000      	movs	r0, #0
			break;
   20552:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_TCP_SRV_SESSTIMEO;
   20554:	2337      	movs	r3, #55	; 0x37
   20556:	6013      	str	r3, [r2, #0]
	int retval = 0;
   20558:	2000      	movs	r0, #0
			break;
   2055a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RAI_LAST;
   2055c:	2332      	movs	r3, #50	; 0x32
   2055e:	6013      	str	r3, [r2, #0]
	int retval = 0;
   20560:	2000      	movs	r0, #0
			break;
   20562:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RAI_NO_DATA;
   20564:	2333      	movs	r3, #51	; 0x33
   20566:	6013      	str	r3, [r2, #0]
	int retval = 0;
   20568:	2000      	movs	r0, #0
			break;
   2056a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RAI_ONE_RESP;
   2056c:	2334      	movs	r3, #52	; 0x34
   2056e:	6013      	str	r3, [r2, #0]
	int retval = 0;
   20570:	2000      	movs	r0, #0
			break;
   20572:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RAI_ONGOING;
   20574:	2335      	movs	r3, #53	; 0x35
   20576:	6013      	str	r3, [r2, #0]
	int retval = 0;
   20578:	2000      	movs	r0, #0
			break;
   2057a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_RAI_WAIT_MORE;
   2057c:	2336      	movs	r3, #54	; 0x36
   2057e:	6013      	str	r3, [r2, #0]
	int retval = 0;
   20580:	2000      	movs	r0, #0
			break;
   20582:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_FW_VERSION;
   20584:	2301      	movs	r3, #1
   20586:	6013      	str	r3, [r2, #0]
	int retval = 0;
   20588:	2000      	movs	r0, #0
			break;
   2058a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   2058c:	2302      	movs	r3, #2
   2058e:	6013      	str	r3, [r2, #0]
	int retval = 0;
   20590:	2000      	movs	r0, #0
			break;
   20592:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   20594:	2303      	movs	r3, #3
   20596:	6013      	str	r3, [r2, #0]
	int retval = 0;
   20598:	2000      	movs	r0, #0
			break;
   2059a:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   2059c:	2304      	movs	r3, #4
   2059e:	6013      	str	r3, [r2, #0]
	int retval = 0;
   205a0:	2000      	movs	r0, #0
			break;
   205a2:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   205a4:	2305      	movs	r3, #5
   205a6:	6013      	str	r3, [r2, #0]
	int retval = 0;
   205a8:	2000      	movs	r0, #0
			break;
   205aa:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   205ac:	2306      	movs	r3, #6
   205ae:	6013      	str	r3, [r2, #0]
	int retval = 0;
   205b0:	2000      	movs	r0, #0
			break;
   205b2:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   205b4:	2307      	movs	r3, #7
   205b6:	6013      	str	r3, [r2, #0]
	int retval = 0;
   205b8:	2000      	movs	r0, #0
			break;
   205ba:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   205bc:	2314      	movs	r3, #20
   205be:	6013      	str	r3, [r2, #0]
	int retval = 0;
   205c0:	2000      	movs	r0, #0
			break;
   205c2:	4770      	bx	lr
		switch (z_in_optname) {
   205c4:	2902      	cmp	r1, #2
   205c6:	d00a      	beq.n	205de <z_to_nrf_optname+0x1d6>
   205c8:	2903      	cmp	r1, #3
   205ca:	d00c      	beq.n	205e6 <z_to_nrf_optname+0x1de>
   205cc:	2901      	cmp	r1, #1
   205ce:	d002      	beq.n	205d6 <z_to_nrf_optname+0x1ce>
   205d0:	f04f 30ff 	mov.w	r0, #4294967295
}
   205d4:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_PDN_AF;
   205d6:	2301      	movs	r3, #1
   205d8:	6013      	str	r3, [r2, #0]
	int retval = 0;
   205da:	2000      	movs	r0, #0
			break;
   205dc:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_PDN_CONTEXT_ID;
   205de:	2302      	movs	r3, #2
   205e0:	6013      	str	r3, [r2, #0]
	int retval = 0;
   205e2:	2000      	movs	r0, #0
			break;
   205e4:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_PDN_STATE;
   205e6:	2303      	movs	r3, #3
   205e8:	6013      	str	r3, [r2, #0]
	int retval = 0;
   205ea:	2000      	movs	r0, #0
			break;
   205ec:	4770      	bx	lr
	switch (z_in_level) {
   205ee:	f04f 30ff 	mov.w	r0, #4294967295
   205f2:	4770      	bx	lr
   205f4:	f04f 30ff 	mov.w	r0, #4294967295
   205f8:	4770      	bx	lr
   205fa:	f04f 30ff 	mov.w	r0, #4294967295
   205fe:	4770      	bx	lr

00020600 <z_to_nrf_flags>:
{
   20600:	4603      	mov	r3, r0
	if (z_flags & MSG_DONTWAIT) {
   20602:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   20606:	d000      	beq.n	2060a <z_to_nrf_flags+0xa>
		nrf_flags |= NRF_MSG_DONTWAIT;
   20608:	2002      	movs	r0, #2
	if (z_flags & MSG_PEEK) {
   2060a:	f013 0f02 	tst.w	r3, #2
   2060e:	d001      	beq.n	20614 <z_to_nrf_flags+0x14>
		nrf_flags |= NRF_MSG_PEEK;
   20610:	f040 0008 	orr.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   20614:	f013 0f20 	tst.w	r3, #32
   20618:	d001      	beq.n	2061e <z_to_nrf_flags+0x1e>
		nrf_flags |= NRF_MSG_TRUNC;
   2061a:	f040 0020 	orr.w	r0, r0, #32
	if (z_flags & MSG_WAITALL) {
   2061e:	f413 7f80 	tst.w	r3, #256	; 0x100
   20622:	d001      	beq.n	20628 <z_to_nrf_flags+0x28>
		nrf_flags |= NRF_MSG_WAITALL;
   20624:	f040 0010 	orr.w	r0, r0, #16
}
   20628:	4770      	bx	lr

0002062a <z_to_nrf_addrinfo_flags>:
{
   2062a:	4603      	mov	r3, r0
	if (flags & AI_NUMERICSERV) {
   2062c:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
   20630:	d001      	beq.n	20636 <z_to_nrf_addrinfo_flags+0xc>
		nrf_flags |= NRF_AI_NUMERICSERV;
   20632:	f44f 6080 	mov.w	r0, #1024	; 0x400
	if (flags & AI_PDNSERV) {
   20636:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   2063a:	d001      	beq.n	20640 <z_to_nrf_addrinfo_flags+0x16>
		nrf_flags |= NRF_AI_PDNSERV;
   2063c:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
}
   20640:	4770      	bx	lr

00020642 <nrf_to_z_addrinfo_flags>:
}
   20642:	2000      	movs	r0, #0
   20644:	4770      	bx	lr

00020646 <z_to_nrf_family>:
	switch (z_family) {
   20646:	2806      	cmp	r0, #6
   20648:	d809      	bhi.n	2065e <z_to_nrf_family+0x18>
   2064a:	2806      	cmp	r0, #6
   2064c:	d810      	bhi.n	20670 <z_to_nrf_family+0x2a>
   2064e:	e8df f000 	tbb	[pc, r0]
   20652:	040d      	.short	0x040d
   20654:	0f0f0b12 	.word	0x0f0f0b12
   20658:	09          	.byte	0x09
   20659:	00          	.byte	0x00
   2065a:	2002      	movs	r0, #2
   2065c:	4770      	bx	lr
   2065e:	2866      	cmp	r0, #102	; 0x66
   20660:	d10b      	bne.n	2067a <z_to_nrf_family+0x34>
   20662:	4770      	bx	lr
		return NRF_AF_LOCAL;
   20664:	2001      	movs	r0, #1
   20666:	4770      	bx	lr
		return NRF_AF_PACKET;
   20668:	2005      	movs	r0, #5
   2066a:	4770      	bx	lr
		return NRF_AF_UNSPEC;
   2066c:	2000      	movs	r0, #0
   2066e:	4770      	bx	lr
		return -EAFNOSUPPORT;
   20670:	f06f 0069 	mvn.w	r0, #105	; 0x69
   20674:	4770      	bx	lr
		return NRF_AF_INET6;
   20676:	200a      	movs	r0, #10
   20678:	4770      	bx	lr
		return -EAFNOSUPPORT;
   2067a:	f06f 0069 	mvn.w	r0, #105	; 0x69
}
   2067e:	4770      	bx	lr

00020680 <nrf_to_z_family>:
	switch (nrf_family) {
   20680:	280a      	cmp	r0, #10
   20682:	dc10      	bgt.n	206a6 <nrf_to_z_family+0x26>
   20684:	2800      	cmp	r0, #0
   20686:	db15      	blt.n	206b4 <nrf_to_z_family+0x34>
   20688:	280a      	cmp	r0, #10
   2068a:	d809      	bhi.n	206a0 <nrf_to_z_family+0x20>
   2068c:	e8df f000 	tbb	[pc, r0]
   20690:	08060e19 	.word	0x08060e19
   20694:	08081008 	.word	0x08081008
   20698:	0808      	.short	0x0808
   2069a:	15          	.byte	0x15
   2069b:	00          	.byte	0x00
   2069c:	2001      	movs	r0, #1
   2069e:	4770      	bx	lr
		return -EAFNOSUPPORT;
   206a0:	f06f 0069 	mvn.w	r0, #105	; 0x69
   206a4:	4770      	bx	lr
	switch (nrf_family) {
   206a6:	2866      	cmp	r0, #102	; 0x66
   206a8:	d109      	bne.n	206be <nrf_to_z_family+0x3e>
   206aa:	4770      	bx	lr
		return AF_LOCAL;
   206ac:	2006      	movs	r0, #6
   206ae:	4770      	bx	lr
		return AF_PACKET;
   206b0:	2003      	movs	r0, #3
   206b2:	4770      	bx	lr
		return -EAFNOSUPPORT;
   206b4:	f06f 0069 	mvn.w	r0, #105	; 0x69
   206b8:	4770      	bx	lr
		return AF_INET6;
   206ba:	2002      	movs	r0, #2
   206bc:	4770      	bx	lr
		return -EAFNOSUPPORT;
   206be:	f06f 0069 	mvn.w	r0, #105	; 0x69
}
   206c2:	4770      	bx	lr

000206c4 <nrf_to_z_protocol>:
	switch (proto) {
   206c4:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
   206c8:	d01e      	beq.n	20708 <nrf_to_z_protocol+0x44>
   206ca:	dc0d      	bgt.n	206e8 <nrf_to_z_protocol+0x24>
   206cc:	2802      	cmp	r0, #2
   206ce:	d01e      	beq.n	2070e <nrf_to_z_protocol+0x4a>
   206d0:	dd05      	ble.n	206de <nrf_to_z_protocol+0x1a>
   206d2:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
   206d6:	d11f      	bne.n	20718 <nrf_to_z_protocol+0x54>
		return IPPROTO_TLS_1_2;
   206d8:	f44f 7081 	mov.w	r0, #258	; 0x102
   206dc:	4770      	bx	lr
	switch (proto) {
   206de:	b158      	cbz	r0, 206f8 <nrf_to_z_protocol+0x34>
   206e0:	2801      	cmp	r0, #1
   206e2:	d116      	bne.n	20712 <nrf_to_z_protocol+0x4e>
   206e4:	2006      	movs	r0, #6
   206e6:	4770      	bx	lr
   206e8:	f240 2302 	movw	r3, #514	; 0x202
   206ec:	4298      	cmp	r0, r3
   206ee:	d003      	beq.n	206f8 <nrf_to_z_protocol+0x34>
   206f0:	f240 2303 	movw	r3, #515	; 0x203
   206f4:	4298      	cmp	r0, r3
   206f6:	d100      	bne.n	206fa <nrf_to_z_protocol+0x36>
}
   206f8:	4770      	bx	lr
	switch (proto) {
   206fa:	f240 2301 	movw	r3, #513	; 0x201
   206fe:	4298      	cmp	r0, r3
   20700:	d0fa      	beq.n	206f8 <nrf_to_z_protocol+0x34>
		return -EPROTONOSUPPORT;
   20702:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   20706:	e7f7      	b.n	206f8 <nrf_to_z_protocol+0x34>
		return IPPROTO_DTLS_1_2;
   20708:	f240 1011 	movw	r0, #273	; 0x111
   2070c:	4770      	bx	lr
		return IPPROTO_UDP;
   2070e:	2011      	movs	r0, #17
   20710:	4770      	bx	lr
		return -EPROTONOSUPPORT;
   20712:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   20716:	4770      	bx	lr
   20718:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   2071c:	4770      	bx	lr

0002071e <z_to_nrf_socktype>:
	switch (socktype) {
   2071e:	2803      	cmp	r0, #3
   20720:	d003      	beq.n	2072a <z_to_nrf_socktype+0xc>
   20722:	2804      	cmp	r0, #4
   20724:	d101      	bne.n	2072a <z_to_nrf_socktype+0xc>
   20726:	f44f 7000 	mov.w	r0, #512	; 0x200
}
   2072a:	4770      	bx	lr

0002072c <z_to_nrf_protocol>:
	switch (proto) {
   2072c:	f240 1311 	movw	r3, #273	; 0x111
   20730:	4298      	cmp	r0, r3
   20732:	d020      	beq.n	20776 <z_to_nrf_protocol+0x4a>
   20734:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   20738:	da0d      	bge.n	20756 <z_to_nrf_protocol+0x2a>
   2073a:	2811      	cmp	r0, #17
   2073c:	d01e      	beq.n	2077c <z_to_nrf_protocol+0x50>
   2073e:	dd05      	ble.n	2074c <z_to_nrf_protocol+0x20>
   20740:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   20744:	d11f      	bne.n	20786 <z_to_nrf_protocol+0x5a>
		return NRF_SPROTO_TLS1v2;
   20746:	f44f 7082 	mov.w	r0, #260	; 0x104
   2074a:	4770      	bx	lr
	switch (proto) {
   2074c:	b158      	cbz	r0, 20766 <z_to_nrf_protocol+0x3a>
   2074e:	2806      	cmp	r0, #6
   20750:	d116      	bne.n	20780 <z_to_nrf_protocol+0x54>
   20752:	2001      	movs	r0, #1
   20754:	4770      	bx	lr
   20756:	f240 2302 	movw	r3, #514	; 0x202
   2075a:	4298      	cmp	r0, r3
   2075c:	d003      	beq.n	20766 <z_to_nrf_protocol+0x3a>
   2075e:	f240 2303 	movw	r3, #515	; 0x203
   20762:	4298      	cmp	r0, r3
   20764:	d100      	bne.n	20768 <z_to_nrf_protocol+0x3c>
}
   20766:	4770      	bx	lr
	switch (proto) {
   20768:	f240 2301 	movw	r3, #513	; 0x201
   2076c:	4298      	cmp	r0, r3
   2076e:	d0fa      	beq.n	20766 <z_to_nrf_protocol+0x3a>
		return -EPROTONOSUPPORT;
   20770:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   20774:	e7f7      	b.n	20766 <z_to_nrf_protocol+0x3a>
		return NRF_SPROTO_DTLS1v2;
   20776:	f44f 7087 	mov.w	r0, #270	; 0x10e
   2077a:	4770      	bx	lr
		return NRF_IPPROTO_UDP;
   2077c:	2002      	movs	r0, #2
   2077e:	4770      	bx	lr
		return -EPROTONOSUPPORT;
   20780:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   20784:	4770      	bx	lr
   20786:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   2078a:	4770      	bx	lr

0002078c <nrf91_socket_is_supported>:
}
   2078c:	2001      	movs	r0, #1
   2078e:	4770      	bx	lr

00020790 <nrf_to_z_dns_error_code>:
	switch (nrf_error) {
   20790:	282f      	cmp	r0, #47	; 0x2f
   20792:	d016      	beq.n	207c2 <nrf_to_z_dns_error_code+0x32>
   20794:	dd06      	ble.n	207a4 <nrf_to_z_dns_error_code+0x14>
   20796:	2833      	cmp	r0, #51	; 0x33
   20798:	d00b      	beq.n	207b2 <nrf_to_z_dns_error_code+0x22>
   2079a:	2873      	cmp	r0, #115	; 0x73
   2079c:	d11a      	bne.n	207d4 <nrf_to_z_dns_error_code+0x44>
		return DNS_EAI_INPROGRESS;
   2079e:	f06f 0063 	mvn.w	r0, #99	; 0x63
   207a2:	4770      	bx	lr
	switch (nrf_error) {
   207a4:	280c      	cmp	r0, #12
   207a6:	d00f      	beq.n	207c8 <nrf_to_z_dns_error_code+0x38>
   207a8:	2823      	cmp	r0, #35	; 0x23
   207aa:	d110      	bne.n	207ce <nrf_to_z_dns_error_code+0x3e>
		return DNS_EAI_AGAIN;
   207ac:	f06f 0002 	mvn.w	r0, #2
   207b0:	4770      	bx	lr
{
   207b2:	b508      	push	{r3, lr}
		errno = ENETUNREACH;
   207b4:	f7ff f9c5 	bl	1fb42 <__errno>
   207b8:	2372      	movs	r3, #114	; 0x72
   207ba:	6003      	str	r3, [r0, #0]
		return DNS_EAI_SYSTEM;
   207bc:	f06f 000a 	mvn.w	r0, #10
}
   207c0:	bd08      	pop	{r3, pc}
		return DNS_EAI_NONAME;
   207c2:	f06f 0001 	mvn.w	r0, #1
   207c6:	4770      	bx	lr
	switch (nrf_error) {
   207c8:	f06f 0009 	mvn.w	r0, #9
   207cc:	4770      	bx	lr
		return DNS_EAI_SYSTEM;
   207ce:	f06f 000a 	mvn.w	r0, #10
   207d2:	4770      	bx	lr
   207d4:	f06f 000a 	mvn.w	r0, #10
}
   207d8:	4770      	bx	lr

000207da <nrf_to_z_ipv6>:
{
   207da:	b470      	push	{r4, r5, r6}
	ptr->sin6_port = nrf_in->sin6_port;
   207dc:	890b      	ldrh	r3, [r1, #8]
   207de:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   207e0:	4603      	mov	r3, r0
   207e2:	2202      	movs	r2, #2
   207e4:	f823 2b04 	strh.w	r2, [r3], #4
	memcpy(ptr->sin6_addr.s6_addr, nrf_in->sin6_addr.s6_addr,
   207e8:	460a      	mov	r2, r1
   207ea:	f852 6f10 	ldr.w	r6, [r2, #16]!
   207ee:	6855      	ldr	r5, [r2, #4]
   207f0:	6894      	ldr	r4, [r2, #8]
   207f2:	68d2      	ldr	r2, [r2, #12]
   207f4:	6046      	str	r6, [r0, #4]
   207f6:	605d      	str	r5, [r3, #4]
   207f8:	609c      	str	r4, [r3, #8]
   207fa:	60da      	str	r2, [r3, #12]
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   207fc:	f891 3020 	ldrb.w	r3, [r1, #32]
   20800:	7503      	strb	r3, [r0, #20]
}
   20802:	bc70      	pop	{r4, r5, r6}
   20804:	4770      	bx	lr

00020806 <z_to_nrf_ipv6>:
{
   20806:	b430      	push	{r4, r5}
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   20808:	2324      	movs	r3, #36	; 0x24
   2080a:	700b      	strb	r3, [r1, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   2080c:	8843      	ldrh	r3, [r0, #2]
   2080e:	810b      	strh	r3, [r1, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   20810:	230a      	movs	r3, #10
   20812:	604b      	str	r3, [r1, #4]
	memcpy(nrf_out->sin6_addr.s6_addr, ptr->sin6_addr.s6_addr,
   20814:	4603      	mov	r3, r0
   20816:	f853 5f04 	ldr.w	r5, [r3, #4]!
   2081a:	685c      	ldr	r4, [r3, #4]
   2081c:	689a      	ldr	r2, [r3, #8]
   2081e:	68db      	ldr	r3, [r3, #12]
   20820:	610d      	str	r5, [r1, #16]
   20822:	614c      	str	r4, [r1, #20]
   20824:	618a      	str	r2, [r1, #24]
   20826:	61cb      	str	r3, [r1, #28]
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   20828:	7d03      	ldrb	r3, [r0, #20]
   2082a:	620b      	str	r3, [r1, #32]
}
   2082c:	bc30      	pop	{r4, r5}
   2082e:	4770      	bx	lr

00020830 <nrf91_socket_offload_close>:
{
   20830:	b538      	push	{r3, r4, r5, lr}
   20832:	4604      	mov	r4, r0
	retval = nrf_close(ctx->nrf_fd);
   20834:	6800      	ldr	r0, [r0, #0]
   20836:	f001 fe76 	bl	22526 <nrf_close>
	if (retval == 0) {
   2083a:	4605      	mov	r5, r0
   2083c:	b108      	cbz	r0, 20842 <nrf91_socket_offload_close+0x12>
}
   2083e:	4628      	mov	r0, r5
   20840:	bd38      	pop	{r3, r4, r5, pc}
		release_ctx(ctx);
   20842:	4620      	mov	r0, r4
   20844:	f7f4 ff84 	bl	15750 <release_ctx>
	return retval;
   20848:	e7f9      	b.n	2083e <nrf91_socket_offload_close+0xe>

0002084a <nrf91_socket_offload_setsockopt>:
{
   2084a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2084c:	b087      	sub	sp, #28
   2084e:	460c      	mov	r4, r1
   20850:	4615      	mov	r5, r2
   20852:	461e      	mov	r6, r3
	int sd = OBJ_TO_SD(obj);
   20854:	6807      	ldr	r7, [r0, #0]
	if (z_to_nrf_level(level, &nrf_level) < 0)
   20856:	a905      	add	r1, sp, #20
   20858:	4620      	mov	r0, r4
   2085a:	f7ff fdae 	bl	203ba <z_to_nrf_level>
   2085e:	2800      	cmp	r0, #0
   20860:	db27      	blt.n	208b2 <nrf91_socket_offload_setsockopt+0x68>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   20862:	aa04      	add	r2, sp, #16
   20864:	4629      	mov	r1, r5
   20866:	4620      	mov	r0, r4
   20868:	f7ff fdce 	bl	20408 <z_to_nrf_optname>
   2086c:	2800      	cmp	r0, #0
   2086e:	db20      	blt.n	208b2 <nrf91_socket_offload_setsockopt+0x68>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   20870:	2c01      	cmp	r4, #1
   20872:	d00c      	beq.n	2088e <nrf91_socket_offload_setsockopt+0x44>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   20874:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   20878:	d016      	beq.n	208a8 <nrf91_socket_offload_setsockopt+0x5e>
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   2087a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2087c:	9300      	str	r3, [sp, #0]
   2087e:	4633      	mov	r3, r6
   20880:	9a04      	ldr	r2, [sp, #16]
   20882:	9905      	ldr	r1, [sp, #20]
   20884:	4638      	mov	r0, r7
   20886:	f001 fedb 	bl	22640 <nrf_setsockopt>
}
   2088a:	b007      	add	sp, #28
   2088c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   2088e:	f1a5 0314 	sub.w	r3, r5, #20
   20892:	2b01      	cmp	r3, #1
   20894:	d8ee      	bhi.n	20874 <nrf91_socket_offload_setsockopt+0x2a>
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   20896:	6833      	ldr	r3, [r6, #0]
   20898:	9302      	str	r3, [sp, #8]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   2089a:	6873      	ldr	r3, [r6, #4]
   2089c:	9303      	str	r3, [sp, #12]
		nrf_optlen = sizeof(struct nrf_timeval);
   2089e:	2308      	movs	r3, #8
   208a0:	930c      	str	r3, [sp, #48]	; 0x30
		nrf_optval = &nrf_timeo;
   208a2:	eb0d 0603 	add.w	r6, sp, r3
		nrf_optlen = sizeof(struct nrf_timeval);
   208a6:	e7e8      	b.n	2087a <nrf91_socket_offload_setsockopt+0x30>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   208a8:	2d0a      	cmp	r5, #10
   208aa:	d1e6      	bne.n	2087a <nrf91_socket_offload_setsockopt+0x30>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   208ac:	2301      	movs	r3, #1
   208ae:	930c      	str	r3, [sp, #48]	; 0x30
   208b0:	e7e3      	b.n	2087a <nrf91_socket_offload_setsockopt+0x30>
	errno = ENOPROTOOPT;
   208b2:	f7ff f946 	bl	1fb42 <__errno>
   208b6:	236d      	movs	r3, #109	; 0x6d
   208b8:	6003      	str	r3, [r0, #0]
	return retval;
   208ba:	f04f 30ff 	mov.w	r0, #4294967295
   208be:	e7e4      	b.n	2088a <nrf91_socket_offload_setsockopt+0x40>

000208c0 <nrf91_socket_offload_getsockopt>:
{
   208c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   208c4:	b088      	sub	sp, #32
   208c6:	460c      	mov	r4, r1
   208c8:	4615      	mov	r5, r2
   208ca:	461e      	mov	r6, r3
   208cc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	int sd = OBJ_TO_SD(obj);
   208ce:	f8d0 8000 	ldr.w	r8, [r0]
	struct nrf_timeval nrf_timeo = {0, 0};
   208d2:	2200      	movs	r2, #0
   208d4:	9204      	str	r2, [sp, #16]
   208d6:	9205      	str	r2, [sp, #20]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   208d8:	683b      	ldr	r3, [r7, #0]
   208da:	9303      	str	r3, [sp, #12]
	if (z_to_nrf_level(level, &nrf_level) < 0)
   208dc:	a907      	add	r1, sp, #28
   208de:	4620      	mov	r0, r4
   208e0:	f7ff fd6b 	bl	203ba <z_to_nrf_level>
   208e4:	2800      	cmp	r0, #0
   208e6:	db3b      	blt.n	20960 <nrf91_socket_offload_getsockopt+0xa0>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   208e8:	aa06      	add	r2, sp, #24
   208ea:	4629      	mov	r1, r5
   208ec:	4620      	mov	r0, r4
   208ee:	f7ff fd8b 	bl	20408 <z_to_nrf_optname>
   208f2:	2800      	cmp	r0, #0
   208f4:	db34      	blt.n	20960 <nrf91_socket_offload_getsockopt+0xa0>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   208f6:	2c01      	cmp	r4, #1
   208f8:	d012      	beq.n	20920 <nrf91_socket_offload_getsockopt+0x60>
	void *nrf_optval = optval;
   208fa:	4633      	mov	r3, r6
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   208fc:	aa03      	add	r2, sp, #12
   208fe:	9200      	str	r2, [sp, #0]
   20900:	9a06      	ldr	r2, [sp, #24]
   20902:	9907      	ldr	r1, [sp, #28]
   20904:	4640      	mov	r0, r8
   20906:	f001 feb4 	bl	22672 <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   2090a:	4680      	mov	r8, r0
   2090c:	b920      	cbnz	r0, 20918 <nrf91_socket_offload_getsockopt+0x58>
   2090e:	b11e      	cbz	r6, 20918 <nrf91_socket_offload_getsockopt+0x58>
		*optlen = nrf_optlen;
   20910:	9b03      	ldr	r3, [sp, #12]
   20912:	603b      	str	r3, [r7, #0]
		if (level == SOL_SOCKET) {
   20914:	2c01      	cmp	r4, #1
   20916:	d00d      	beq.n	20934 <nrf91_socket_offload_getsockopt+0x74>
}
   20918:	4640      	mov	r0, r8
   2091a:	b008      	add	sp, #32
   2091c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   20920:	f1a5 0314 	sub.w	r3, r5, #20
   20924:	2b01      	cmp	r3, #1
   20926:	d901      	bls.n	2092c <nrf91_socket_offload_getsockopt+0x6c>
	void *nrf_optval = optval;
   20928:	4633      	mov	r3, r6
   2092a:	e7e7      	b.n	208fc <nrf91_socket_offload_getsockopt+0x3c>
		nrf_optlen = sizeof(struct nrf_timeval);
   2092c:	2308      	movs	r3, #8
   2092e:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   20930:	ab04      	add	r3, sp, #16
   20932:	e7e3      	b.n	208fc <nrf91_socket_offload_getsockopt+0x3c>
			if (optname == SO_ERROR) {
   20934:	2d04      	cmp	r5, #4
   20936:	d009      	beq.n	2094c <nrf91_socket_offload_getsockopt+0x8c>
			} else if ((optname == SO_RCVTIMEO) ||
   20938:	3d14      	subs	r5, #20
   2093a:	2d01      	cmp	r5, #1
   2093c:	d8ec      	bhi.n	20918 <nrf91_socket_offload_getsockopt+0x58>
					nrf_timeo.tv_sec;
   2093e:	9b04      	ldr	r3, [sp, #16]
				((struct timeval *)optval)->tv_sec =
   20940:	6033      	str	r3, [r6, #0]
					nrf_timeo.tv_usec;
   20942:	9b05      	ldr	r3, [sp, #20]
				((struct timeval *)optval)->tv_usec =
   20944:	6073      	str	r3, [r6, #4]
				*optlen = sizeof(struct timeval);
   20946:	2308      	movs	r3, #8
   20948:	603b      	str	r3, [r7, #0]
   2094a:	e7e5      	b.n	20918 <nrf91_socket_offload_getsockopt+0x58>
				if (*(int *)optval != 0) {
   2094c:	6830      	ldr	r0, [r6, #0]
   2094e:	2800      	cmp	r0, #0
   20950:	d0e2      	beq.n	20918 <nrf91_socket_offload_getsockopt+0x58>
					nrf_modem_os_errno_set(*(int *)optval);
   20952:	f7f4 fd15 	bl	15380 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   20956:	f7ff f8f4 	bl	1fb42 <__errno>
   2095a:	6803      	ldr	r3, [r0, #0]
   2095c:	6033      	str	r3, [r6, #0]
   2095e:	e7db      	b.n	20918 <nrf91_socket_offload_getsockopt+0x58>
	errno = ENOPROTOOPT;
   20960:	f7ff f8ef 	bl	1fb42 <__errno>
   20964:	236d      	movs	r3, #109	; 0x6d
   20966:	6003      	str	r3, [r0, #0]
	return retval;
   20968:	f04f 38ff 	mov.w	r8, #4294967295
   2096c:	e7d4      	b.n	20918 <nrf91_socket_offload_getsockopt+0x58>

0002096e <nrf91_socket_offload_recvfrom>:
{
   2096e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20972:	b08c      	sub	sp, #48	; 0x30
   20974:	4604      	mov	r4, r0
   20976:	460d      	mov	r5, r1
   20978:	4617      	mov	r7, r2
   2097a:	4698      	mov	r8, r3
   2097c:	9e12      	ldr	r6, [sp, #72]	; 0x48
	k_mutex_unlock(ctx->lock);
   2097e:	6840      	ldr	r0, [r0, #4]
	return z_impl_k_mutex_unlock(mutex);
   20980:	f7fa fe14 	bl	1b5ac <z_impl_k_mutex_unlock>
	if (from == NULL) {
   20984:	b1fe      	cbz	r6, 209c6 <nrf91_socket_offload_recvfrom+0x58>
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   20986:	2324      	movs	r3, #36	; 0x24
   20988:	9302      	str	r3, [sp, #8]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   2098a:	4640      	mov	r0, r8
   2098c:	f7ff fe38 	bl	20600 <z_to_nrf_flags>
   20990:	4603      	mov	r3, r0
   20992:	aa02      	add	r2, sp, #8
   20994:	9201      	str	r2, [sp, #4]
   20996:	aa03      	add	r2, sp, #12
   20998:	9200      	str	r2, [sp, #0]
   2099a:	463a      	mov	r2, r7
   2099c:	4629      	mov	r1, r5
   2099e:	6820      	ldr	r0, [r4, #0]
   209a0:	f001 fde8 	bl	22574 <nrf_recvfrom>
   209a4:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   209a6:	9b04      	ldr	r3, [sp, #16]
   209a8:	2b02      	cmp	r3, #2
   209aa:	d01a      	beq.n	209e2 <nrf91_socket_offload_recvfrom+0x74>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   209ac:	2b0a      	cmp	r3, #10
   209ae:	d020      	beq.n	209f2 <nrf91_socket_offload_recvfrom+0x84>
	k_mutex_lock(ctx->lock, K_FOREVER);
   209b0:	6860      	ldr	r0, [r4, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   209b2:	f04f 32ff 	mov.w	r2, #4294967295
   209b6:	f04f 33ff 	mov.w	r3, #4294967295
   209ba:	f7fa fd6d 	bl	1b498 <z_impl_k_mutex_lock>
}
   209be:	4628      	mov	r0, r5
   209c0:	b00c      	add	sp, #48	; 0x30
   209c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, z_to_nrf_flags(flags),
   209c6:	4640      	mov	r0, r8
   209c8:	f7ff fe1a 	bl	20600 <z_to_nrf_flags>
   209cc:	4603      	mov	r3, r0
   209ce:	2200      	movs	r2, #0
   209d0:	9201      	str	r2, [sp, #4]
   209d2:	9200      	str	r2, [sp, #0]
   209d4:	463a      	mov	r2, r7
   209d6:	4629      	mov	r1, r5
   209d8:	6820      	ldr	r0, [r4, #0]
   209da:	f001 fdcb 	bl	22574 <nrf_recvfrom>
   209de:	4605      	mov	r5, r0
   209e0:	e7e6      	b.n	209b0 <nrf91_socket_offload_recvfrom+0x42>
			nrf_to_z_ipv4(from, (struct nrf_sockaddr_in *)cliaddr);
   209e2:	a903      	add	r1, sp, #12
   209e4:	4630      	mov	r0, r6
   209e6:	f7ff fce1 	bl	203ac <nrf_to_z_ipv4>
			*fromlen = sizeof(struct sockaddr_in);
   209ea:	2308      	movs	r3, #8
   209ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   209ee:	6013      	str	r3, [r2, #0]
   209f0:	e7de      	b.n	209b0 <nrf91_socket_offload_recvfrom+0x42>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   209f2:	a903      	add	r1, sp, #12
   209f4:	4630      	mov	r0, r6
   209f6:	f7ff fef0 	bl	207da <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   209fa:	2318      	movs	r3, #24
   209fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   209fe:	6013      	str	r3, [r2, #0]
   20a00:	e7d6      	b.n	209b0 <nrf91_socket_offload_recvfrom+0x42>

00020a02 <nrf91_socket_offload_read>:
{
   20a02:	b500      	push	{lr}
   20a04:	b083      	sub	sp, #12
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   20a06:	2300      	movs	r3, #0
   20a08:	9301      	str	r3, [sp, #4]
   20a0a:	9300      	str	r3, [sp, #0]
   20a0c:	f7ff ffaf 	bl	2096e <nrf91_socket_offload_recvfrom>
}
   20a10:	b003      	add	sp, #12
   20a12:	f85d fb04 	ldr.w	pc, [sp], #4

00020a16 <nrf91_socket_offload_sendto>:
{
   20a16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20a1a:	b08d      	sub	sp, #52	; 0x34
   20a1c:	460f      	mov	r7, r1
   20a1e:	4616      	mov	r6, r2
   20a20:	461d      	mov	r5, r3
   20a22:	9c14      	ldr	r4, [sp, #80]	; 0x50
	int sd = OBJ_TO_SD(obj);
   20a24:	f8d0 8000 	ldr.w	r8, [r0]
	if (to == NULL) {
   20a28:	b1d4      	cbz	r4, 20a60 <nrf91_socket_offload_sendto+0x4a>
	} else if (to->sa_family == AF_INET) {
   20a2a:	8820      	ldrh	r0, [r4, #0]
   20a2c:	2801      	cmp	r0, #1
   20a2e:	d024      	beq.n	20a7a <nrf91_socket_offload_sendto+0x64>
	} else if (to->sa_family == AF_INET6) {
   20a30:	2802      	cmp	r0, #2
   20a32:	d136      	bne.n	20aa2 <nrf91_socket_offload_sendto+0x8c>
		z_to_nrf_ipv6(to, &ipv6);
   20a34:	f10d 090c 	add.w	r9, sp, #12
   20a38:	4649      	mov	r1, r9
   20a3a:	4620      	mov	r0, r4
   20a3c:	f7ff fee3 	bl	20806 <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   20a40:	4628      	mov	r0, r5
   20a42:	f7ff fddd 	bl	20600 <z_to_nrf_flags>
   20a46:	4603      	mov	r3, r0
   20a48:	2224      	movs	r2, #36	; 0x24
   20a4a:	9201      	str	r2, [sp, #4]
   20a4c:	f8cd 9000 	str.w	r9, [sp]
   20a50:	4632      	mov	r2, r6
   20a52:	4639      	mov	r1, r7
   20a54:	4640      	mov	r0, r8
   20a56:	f001 fd73 	bl	22540 <nrf_sendto>
}
   20a5a:	b00d      	add	sp, #52	; 0x34
   20a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   20a60:	4618      	mov	r0, r3
   20a62:	f7ff fdcd 	bl	20600 <z_to_nrf_flags>
   20a66:	4603      	mov	r3, r0
   20a68:	2200      	movs	r2, #0
   20a6a:	9201      	str	r2, [sp, #4]
   20a6c:	9200      	str	r2, [sp, #0]
   20a6e:	4632      	mov	r2, r6
   20a70:	4639      	mov	r1, r7
   20a72:	4640      	mov	r0, r8
   20a74:	f001 fd64 	bl	22540 <nrf_sendto>
   20a78:	e7ef      	b.n	20a5a <nrf91_socket_offload_sendto+0x44>
		z_to_nrf_ipv4(to, &ipv4);
   20a7a:	f10d 090c 	add.w	r9, sp, #12
   20a7e:	4649      	mov	r1, r9
   20a80:	4620      	mov	r0, r4
   20a82:	f7ff fc8a 	bl	2039a <z_to_nrf_ipv4>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   20a86:	4628      	mov	r0, r5
   20a88:	f7ff fdba 	bl	20600 <z_to_nrf_flags>
   20a8c:	4603      	mov	r3, r0
   20a8e:	2210      	movs	r2, #16
   20a90:	9201      	str	r2, [sp, #4]
   20a92:	f8cd 9000 	str.w	r9, [sp]
   20a96:	4632      	mov	r2, r6
   20a98:	4639      	mov	r1, r7
   20a9a:	4640      	mov	r0, r8
   20a9c:	f001 fd50 	bl	22540 <nrf_sendto>
   20aa0:	e7db      	b.n	20a5a <nrf91_socket_offload_sendto+0x44>
	errno = ENOTSUP;
   20aa2:	f7ff f84e 	bl	1fb42 <__errno>
   20aa6:	2386      	movs	r3, #134	; 0x86
   20aa8:	6003      	str	r3, [r0, #0]
	return retval;
   20aaa:	f04f 30ff 	mov.w	r0, #4294967295
   20aae:	e7d4      	b.n	20a5a <nrf91_socket_offload_sendto+0x44>

00020ab0 <nrf91_socket_offload_write>:
{
   20ab0:	b500      	push	{lr}
   20ab2:	b083      	sub	sp, #12
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   20ab4:	2300      	movs	r3, #0
   20ab6:	9301      	str	r3, [sp, #4]
   20ab8:	9300      	str	r3, [sp, #0]
   20aba:	f7ff ffac 	bl	20a16 <nrf91_socket_offload_sendto>
}
   20abe:	b003      	add	sp, #12
   20ac0:	f85d fb04 	ldr.w	pc, [sp], #4

00020ac4 <nrf91_socket_offload_listen>:
{
   20ac4:	b508      	push	{r3, lr}
	return nrf_listen(sd, backlog);
   20ac6:	6800      	ldr	r0, [r0, #0]
   20ac8:	f001 fd81 	bl	225ce <nrf_listen>
}
   20acc:	bd08      	pop	{r3, pc}

00020ace <nrf91_socket_offload_connect>:
{
   20ace:	b510      	push	{r4, lr}
   20ad0:	b08a      	sub	sp, #40	; 0x28
   20ad2:	460b      	mov	r3, r1
	int sd = OBJ_TO_SD(obj);
   20ad4:	6804      	ldr	r4, [r0, #0]
	if (addr->sa_family == AF_INET) {
   20ad6:	8809      	ldrh	r1, [r1, #0]
   20ad8:	2901      	cmp	r1, #1
   20ada:	d009      	beq.n	20af0 <nrf91_socket_offload_connect+0x22>
	} else if (addr->sa_family == AF_INET6) {
   20adc:	2902      	cmp	r1, #2
   20ade:	d011      	beq.n	20b04 <nrf91_socket_offload_connect+0x36>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   20ae0:	4619      	mov	r1, r3
   20ae2:	4620      	mov	r0, r4
   20ae4:	f001 fd60 	bl	225a8 <nrf_connect>
		if (retval < 0) {
   20ae8:	2800      	cmp	r0, #0
   20aea:	db15      	blt.n	20b18 <nrf91_socket_offload_connect+0x4a>
}
   20aec:	b00a      	add	sp, #40	; 0x28
   20aee:	bd10      	pop	{r4, pc}
		z_to_nrf_ipv4(addr, &ipv4);
   20af0:	a901      	add	r1, sp, #4
   20af2:	4618      	mov	r0, r3
   20af4:	f7ff fc51 	bl	2039a <z_to_nrf_ipv4>
		retval = nrf_connect(sd, (const struct nrf_sockaddr_in *)&ipv4,
   20af8:	2210      	movs	r2, #16
   20afa:	a901      	add	r1, sp, #4
   20afc:	4620      	mov	r0, r4
   20afe:	f001 fd53 	bl	225a8 <nrf_connect>
   20b02:	e7f3      	b.n	20aec <nrf91_socket_offload_connect+0x1e>
		z_to_nrf_ipv6(addr, &ipv6);
   20b04:	a901      	add	r1, sp, #4
   20b06:	4618      	mov	r0, r3
   20b08:	f7ff fe7d 	bl	20806 <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   20b0c:	2224      	movs	r2, #36	; 0x24
   20b0e:	a901      	add	r1, sp, #4
   20b10:	4620      	mov	r0, r4
   20b12:	f001 fd49 	bl	225a8 <nrf_connect>
   20b16:	e7e9      	b.n	20aec <nrf91_socket_offload_connect+0x1e>
	errno = ENOTSUP;
   20b18:	f7ff f813 	bl	1fb42 <__errno>
   20b1c:	2386      	movs	r3, #134	; 0x86
   20b1e:	6003      	str	r3, [r0, #0]
	return retval;
   20b20:	f04f 30ff 	mov.w	r0, #4294967295
   20b24:	e7e2      	b.n	20aec <nrf91_socket_offload_connect+0x1e>

00020b26 <nrf91_socket_offload_bind>:
{
   20b26:	b510      	push	{r4, lr}
   20b28:	b08a      	sub	sp, #40	; 0x28
   20b2a:	460b      	mov	r3, r1
	int sd = OBJ_TO_SD(obj);
   20b2c:	6804      	ldr	r4, [r0, #0]
	if (addr->sa_family == AF_INET) {
   20b2e:	880a      	ldrh	r2, [r1, #0]
   20b30:	2a01      	cmp	r2, #1
   20b32:	d00c      	beq.n	20b4e <nrf91_socket_offload_bind+0x28>
	} else if (addr->sa_family == AF_INET6) {
   20b34:	2a02      	cmp	r2, #2
   20b36:	d114      	bne.n	20b62 <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   20b38:	a901      	add	r1, sp, #4
   20b3a:	4618      	mov	r0, r3
   20b3c:	f7ff fe63 	bl	20806 <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   20b40:	2224      	movs	r2, #36	; 0x24
   20b42:	a901      	add	r1, sp, #4
   20b44:	4620      	mov	r0, r4
   20b46:	f001 fd68 	bl	2261a <nrf_bind>
}
   20b4a:	b00a      	add	sp, #40	; 0x28
   20b4c:	bd10      	pop	{r4, pc}
		z_to_nrf_ipv4(addr, &ipv4);
   20b4e:	a901      	add	r1, sp, #4
   20b50:	4618      	mov	r0, r3
   20b52:	f7ff fc22 	bl	2039a <z_to_nrf_ipv4>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv4,
   20b56:	2210      	movs	r2, #16
   20b58:	a901      	add	r1, sp, #4
   20b5a:	4620      	mov	r0, r4
   20b5c:	f001 fd5d 	bl	2261a <nrf_bind>
   20b60:	e7f3      	b.n	20b4a <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   20b62:	f7fe ffee 	bl	1fb42 <__errno>
   20b66:	2386      	movs	r3, #134	; 0x86
   20b68:	6003      	str	r3, [r0, #0]
	return retval;
   20b6a:	f04f 30ff 	mov.w	r0, #4294967295
   20b6e:	e7ec      	b.n	20b4a <nrf91_socket_offload_bind+0x24>

00020b70 <nrf91_socket_offload_fcntl>:
{
   20b70:	b500      	push	{lr}
   20b72:	b083      	sub	sp, #12
   20b74:	9201      	str	r2, [sp, #4]
	switch (cmd) {
   20b76:	2903      	cmp	r1, #3
   20b78:	d00f      	beq.n	20b9a <nrf91_socket_offload_fcntl+0x2a>
   20b7a:	2904      	cmp	r1, #4
   20b7c:	d115      	bne.n	20baa <nrf91_socket_offload_fcntl+0x3a>
		flags = va_arg(args, int);
   20b7e:	4613      	mov	r3, r2
   20b80:	3204      	adds	r2, #4
   20b82:	9201      	str	r2, [sp, #4]
   20b84:	681a      	ldr	r2, [r3, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   20b86:	b112      	cbz	r2, 20b8e <nrf91_socket_offload_fcntl+0x1e>
   20b88:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
   20b8c:	d10d      	bne.n	20baa <nrf91_socket_offload_fcntl+0x3a>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   20b8e:	f3c2 3280 	ubfx	r2, r2, #14, #1
   20b92:	2101      	movs	r1, #1
   20b94:	f001 fd8c 	bl	226b0 <nrf_fcntl>
		break;
   20b98:	e00d      	b.n	20bb6 <nrf91_socket_offload_fcntl+0x46>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   20b9a:	2200      	movs	r2, #0
   20b9c:	2102      	movs	r1, #2
   20b9e:	f001 fd87 	bl	226b0 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   20ba2:	0380      	lsls	r0, r0, #14
   20ba4:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
		break;
   20ba8:	e005      	b.n	20bb6 <nrf91_socket_offload_fcntl+0x46>
	errno = EINVAL;
   20baa:	f7fe ffca 	bl	1fb42 <__errno>
   20bae:	2316      	movs	r3, #22
   20bb0:	6003      	str	r3, [r0, #0]
	return retval;
   20bb2:	f04f 30ff 	mov.w	r0, #4294967295
}
   20bb6:	b003      	add	sp, #12
   20bb8:	f85d fb04 	ldr.w	pc, [sp], #4

00020bbc <nrf91_socket_offload_socket>:
{
   20bbc:	b570      	push	{r4, r5, r6, lr}
   20bbe:	460e      	mov	r6, r1
   20bc0:	4615      	mov	r5, r2
	family = z_to_nrf_family(family);
   20bc2:	b280      	uxth	r0, r0
   20bc4:	f7ff fd3f 	bl	20646 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   20bc8:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   20bcc:	d010      	beq.n	20bf0 <nrf91_socket_offload_socket+0x34>
   20bce:	4604      	mov	r4, r0
	type = z_to_nrf_socktype(type);
   20bd0:	4630      	mov	r0, r6
   20bd2:	f7ff fda4 	bl	2071e <z_to_nrf_socktype>
   20bd6:	4606      	mov	r6, r0
	proto = z_to_nrf_protocol(proto);
   20bd8:	4628      	mov	r0, r5
   20bda:	f7ff fda7 	bl	2072c <z_to_nrf_protocol>
   20bde:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   20be0:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   20be4:	d00b      	beq.n	20bfe <nrf91_socket_offload_socket+0x42>
	retval = nrf_socket(family, type, proto);
   20be6:	4631      	mov	r1, r6
   20be8:	4620      	mov	r0, r4
   20bea:	f001 fc8b 	bl	22504 <nrf_socket>
}
   20bee:	bd70      	pop	{r4, r5, r6, pc}
		errno = EAFNOSUPPORT;
   20bf0:	f7fe ffa7 	bl	1fb42 <__errno>
   20bf4:	236a      	movs	r3, #106	; 0x6a
   20bf6:	6003      	str	r3, [r0, #0]
		return -1;
   20bf8:	f04f 30ff 	mov.w	r0, #4294967295
   20bfc:	e7f7      	b.n	20bee <nrf91_socket_offload_socket+0x32>
		errno = EPROTONOSUPPORT;
   20bfe:	f7fe ffa0 	bl	1fb42 <__errno>
   20c02:	237b      	movs	r3, #123	; 0x7b
   20c04:	6003      	str	r3, [r0, #0]
		return -1;
   20c06:	f04f 30ff 	mov.w	r0, #4294967295
   20c0a:	e7f0      	b.n	20bee <nrf91_socket_offload_socket+0x32>

00020c0c <nrf91_socket_offload_freeaddrinfo>:
{
   20c0c:	b538      	push	{r3, r4, r5, lr}
   20c0e:	4604      	mov	r4, r0
	while (next != NULL) {
   20c10:	b144      	cbz	r4, 20c24 <nrf91_socket_offload_freeaddrinfo+0x18>
		next = next->ai_next;
   20c12:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   20c14:	69a0      	ldr	r0, [r4, #24]
   20c16:	f002 f95e 	bl	22ed6 <k_free>
		k_free(this);
   20c1a:	4620      	mov	r0, r4
   20c1c:	f002 f95b 	bl	22ed6 <k_free>
		next = next->ai_next;
   20c20:	462c      	mov	r4, r5
   20c22:	e7f5      	b.n	20c10 <nrf91_socket_offload_freeaddrinfo+0x4>
}
   20c24:	bd38      	pop	{r3, r4, r5, pc}

00020c26 <nrf_to_z_addrinfo>:
{
   20c26:	b538      	push	{r3, r4, r5, lr}
   20c28:	4604      	mov	r4, r0
   20c2a:	460d      	mov	r5, r1
	z_out->ai_next = NULL;
   20c2c:	2300      	movs	r3, #0
   20c2e:	6003      	str	r3, [r0, #0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   20c30:	61c3      	str	r3, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   20c32:	6808      	ldr	r0, [r1, #0]
   20c34:	f7ff fd05 	bl	20642 <nrf_to_z_addrinfo_flags>
   20c38:	6060      	str	r0, [r4, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   20c3a:	68ab      	ldr	r3, [r5, #8]
   20c3c:	60e3      	str	r3, [r4, #12]
	family = nrf_to_z_family(nrf_in->ai_family);
   20c3e:	6868      	ldr	r0, [r5, #4]
   20c40:	f7ff fd1e 	bl	20680 <nrf_to_z_family>
	if (family == -EAFNOSUPPORT) {
   20c44:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   20c48:	d017      	beq.n	20c7a <nrf_to_z_addrinfo+0x54>
	z_out->ai_family = family;
   20c4a:	60a0      	str	r0, [r4, #8]
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   20c4c:	68e8      	ldr	r0, [r5, #12]
   20c4e:	f7ff fd39 	bl	206c4 <nrf_to_z_protocol>
   20c52:	6120      	str	r0, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   20c54:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   20c58:	d010      	beq.n	20c7c <nrf_to_z_addrinfo+0x56>
	if (nrf_in->ai_family == NRF_AF_INET) {
   20c5a:	686b      	ldr	r3, [r5, #4]
   20c5c:	2b02      	cmp	r3, #2
   20c5e:	d010      	beq.n	20c82 <nrf_to_z_addrinfo+0x5c>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   20c60:	2b0a      	cmp	r3, #10
   20c62:	d11d      	bne.n	20ca0 <nrf_to_z_addrinfo+0x7a>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   20c64:	2018      	movs	r0, #24
   20c66:	f002 f93f 	bl	22ee8 <k_malloc>
   20c6a:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   20c6c:	b1d8      	cbz	r0, 20ca6 <nrf_to_z_addrinfo+0x80>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   20c6e:	2318      	movs	r3, #24
   20c70:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   20c72:	6969      	ldr	r1, [r5, #20]
   20c74:	f7ff fdb1 	bl	207da <nrf_to_z_ipv6>
	return 0;
   20c78:	2000      	movs	r0, #0
}
   20c7a:	bd38      	pop	{r3, r4, r5, pc}
		z_out->ai_addr = NULL;
   20c7c:	2300      	movs	r3, #0
   20c7e:	61a3      	str	r3, [r4, #24]
		return -EPROTONOSUPPORT;
   20c80:	e7fb      	b.n	20c7a <nrf_to_z_addrinfo+0x54>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   20c82:	2008      	movs	r0, #8
   20c84:	f002 f930 	bl	22ee8 <k_malloc>
   20c88:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   20c8a:	b130      	cbz	r0, 20c9a <nrf_to_z_addrinfo+0x74>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   20c8c:	2308      	movs	r3, #8
   20c8e:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv4(z_out->ai_addr,
   20c90:	6969      	ldr	r1, [r5, #20]
   20c92:	f7ff fb8b 	bl	203ac <nrf_to_z_ipv4>
	return 0;
   20c96:	2000      	movs	r0, #0
   20c98:	e7ef      	b.n	20c7a <nrf_to_z_addrinfo+0x54>
			return -ENOMEM;
   20c9a:	f06f 000b 	mvn.w	r0, #11
   20c9e:	e7ec      	b.n	20c7a <nrf_to_z_addrinfo+0x54>
		return -EPROTONOSUPPORT;
   20ca0:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   20ca4:	e7e9      	b.n	20c7a <nrf_to_z_addrinfo+0x54>
			return -ENOMEM;
   20ca6:	f06f 000b 	mvn.w	r0, #11
   20caa:	e7e6      	b.n	20c7a <nrf_to_z_addrinfo+0x54>

00020cac <z_to_nrf_addrinfo_hints>:
{
   20cac:	b538      	push	{r3, r4, r5, lr}
   20cae:	4605      	mov	r5, r0
   20cb0:	460c      	mov	r4, r1
__ssp_bos_icheck3(memset, void *, int)
   20cb2:	2220      	movs	r2, #32
   20cb4:	2100      	movs	r1, #0
   20cb6:	4620      	mov	r0, r4
   20cb8:	f002 f97d 	bl	22fb6 <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   20cbc:	6868      	ldr	r0, [r5, #4]
   20cbe:	f7ff fcb4 	bl	2062a <z_to_nrf_addrinfo_flags>
   20cc2:	6020      	str	r0, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   20cc4:	68e8      	ldr	r0, [r5, #12]
   20cc6:	f7ff fd2a 	bl	2071e <z_to_nrf_socktype>
   20cca:	60a0      	str	r0, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   20ccc:	8928      	ldrh	r0, [r5, #8]
   20cce:	f7ff fcba 	bl	20646 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   20cd2:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   20cd6:	d00b      	beq.n	20cf0 <z_to_nrf_addrinfo_hints+0x44>
	nrf_out->ai_family = family;
   20cd8:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   20cda:	6928      	ldr	r0, [r5, #16]
   20cdc:	f7ff fd26 	bl	2072c <z_to_nrf_protocol>
   20ce0:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   20ce2:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   20ce6:	d003      	beq.n	20cf0 <z_to_nrf_addrinfo_hints+0x44>
	if (z_in->ai_canonname != NULL) {
   20ce8:	69eb      	ldr	r3, [r5, #28]
   20cea:	b113      	cbz	r3, 20cf2 <z_to_nrf_addrinfo_hints+0x46>
		nrf_out->ai_canonname = z_in->ai_canonname;
   20cec:	61a3      	str	r3, [r4, #24]
	return 0;
   20cee:	2000      	movs	r0, #0
}
   20cf0:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   20cf2:	2000      	movs	r0, #0
   20cf4:	e7fc      	b.n	20cf0 <z_to_nrf_addrinfo_hints+0x44>

00020cf6 <check_cmd>:
	if (cmd == NULL) {
   20cf6:	4602      	mov	r2, r0
   20cf8:	b140      	cbz	r0, 20d0c <check_cmd+0x16>
	for (const char *c = cmd; *c != '\0'; c++) {
   20cfa:	7813      	ldrb	r3, [r2, #0]
   20cfc:	b11b      	cbz	r3, 20d06 <check_cmd+0x10>
		if (*c > ' ') {
   20cfe:	2b20      	cmp	r3, #32
   20d00:	d807      	bhi.n	20d12 <check_cmd+0x1c>
	for (const char *c = cmd; *c != '\0'; c++) {
   20d02:	3201      	adds	r2, #1
   20d04:	e7f9      	b.n	20cfa <check_cmd+0x4>
	return -EINVAL;
   20d06:	f06f 0015 	mvn.w	r0, #21
   20d0a:	4770      	bx	lr
		return -EINVAL;
   20d0c:	f06f 0015 	mvn.w	r0, #21
   20d10:	4770      	bx	lr
			return 0;
   20d12:	2000      	movs	r0, #0
}
   20d14:	4770      	bx	lr

00020d16 <ext_api_satisfies_req>:
{
   20d16:	b430      	push	{r4, r5}
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   20d18:	690b      	ldr	r3, [r1, #16]
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   20d1a:	694d      	ldr	r5, [r1, #20]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   20d1c:	698c      	ldr	r4, [r1, #24]
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   20d1e:	69c9      	ldr	r1, [r1, #28]
	return ((ext_api->ext_api_id == req_id)
   20d20:	6902      	ldr	r2, [r0, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   20d22:	429a      	cmp	r2, r3
   20d24:	d002      	beq.n	20d2c <ext_api_satisfies_req+0x16>
   20d26:	2000      	movs	r0, #0
}
   20d28:	bc30      	pop	{r4, r5}
   20d2a:	4770      	bx	lr
		&&  (ext_api->ext_api_version >= req_min_version)
   20d2c:	6983      	ldr	r3, [r0, #24]
   20d2e:	42a3      	cmp	r3, r4
   20d30:	d307      	bcc.n	20d42 <ext_api_satisfies_req+0x2c>
		&&  (ext_api->ext_api_version <  req_max_version)
   20d32:	428b      	cmp	r3, r1
   20d34:	d207      	bcs.n	20d46 <ext_api_satisfies_req+0x30>
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   20d36:	6943      	ldr	r3, [r0, #20]
   20d38:	ea35 0303 	bics.w	r3, r5, r3
   20d3c:	d005      	beq.n	20d4a <ext_api_satisfies_req+0x34>
   20d3e:	2000      	movs	r0, #0
   20d40:	e7f2      	b.n	20d28 <ext_api_satisfies_req+0x12>
   20d42:	2000      	movs	r0, #0
   20d44:	e7f0      	b.n	20d28 <ext_api_satisfies_req+0x12>
   20d46:	2000      	movs	r0, #0
   20d48:	e7ee      	b.n	20d28 <ext_api_satisfies_req+0x12>
   20d4a:	2001      	movs	r0, #1
   20d4c:	e7ec      	b.n	20d28 <ext_api_satisfies_req+0x12>

00020d4e <skip_ext_apis>:
{
   20d4e:	4601      	mov	r1, r0
	const struct fw_info_ext_api *ext_api = &fw_info->ext_apis[0];
   20d50:	303c      	adds	r0, #60	; 0x3c
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
   20d52:	2300      	movs	r3, #0
   20d54:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   20d56:	429a      	cmp	r2, r3
   20d58:	d903      	bls.n	20d62 <skip_ext_apis+0x14>
		ADVANCE_EXT_API(ext_api);
   20d5a:	68c2      	ldr	r2, [r0, #12]
   20d5c:	4410      	add	r0, r2
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
   20d5e:	3301      	adds	r3, #1
   20d60:	e7f8      	b.n	20d54 <skip_ext_apis+0x6>
}
   20d62:	4770      	bx	lr

00020d64 <get_decimal_point>:
}
   20d64:	202e      	movs	r0, #46	; 0x2e
   20d66:	4770      	bx	lr

00020d68 <suffix_object>:
    prev->next = item;
   20d68:	6001      	str	r1, [r0, #0]
    item->prev = prev;
   20d6a:	6048      	str	r0, [r1, #4]
}
   20d6c:	4770      	bx	lr

00020d6e <add_item_to_array>:
    if ((item == NULL) || (array == NULL) || (array == item))
   20d6e:	b1a1      	cbz	r1, 20d9a <add_item_to_array+0x2c>
{
   20d70:	b538      	push	{r3, r4, r5, lr}
   20d72:	4604      	mov	r4, r0
   20d74:	460d      	mov	r5, r1
    if ((item == NULL) || (array == NULL) || (array == item))
   20d76:	b190      	cbz	r0, 20d9e <add_item_to_array+0x30>
   20d78:	4281      	cmp	r1, r0
   20d7a:	d012      	beq.n	20da2 <add_item_to_array+0x34>
    child = array->child;
   20d7c:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   20d7e:	b13b      	cbz	r3, 20d90 <add_item_to_array+0x22>
        if (child->prev)
   20d80:	6858      	ldr	r0, [r3, #4]
   20d82:	b180      	cbz	r0, 20da6 <add_item_to_array+0x38>
            suffix_object(child->prev, item);
   20d84:	f7ff fff0 	bl	20d68 <suffix_object>
            array->child->prev = item;
   20d88:	68a3      	ldr	r3, [r4, #8]
   20d8a:	605d      	str	r5, [r3, #4]
    return true;
   20d8c:	2001      	movs	r0, #1
}
   20d8e:	bd38      	pop	{r3, r4, r5, pc}
        array->child = item;
   20d90:	6081      	str	r1, [r0, #8]
        item->prev = item;
   20d92:	6049      	str	r1, [r1, #4]
        item->next = NULL;
   20d94:	600b      	str	r3, [r1, #0]
    return true;
   20d96:	2001      	movs	r0, #1
   20d98:	e7f9      	b.n	20d8e <add_item_to_array+0x20>
        return false;
   20d9a:	2000      	movs	r0, #0
}
   20d9c:	4770      	bx	lr
        return false;
   20d9e:	2000      	movs	r0, #0
   20da0:	e7f5      	b.n	20d8e <add_item_to_array+0x20>
   20da2:	2000      	movs	r0, #0
   20da4:	e7f3      	b.n	20d8e <add_item_to_array+0x20>
    return true;
   20da6:	2001      	movs	r0, #1
   20da8:	e7f1      	b.n	20d8e <add_item_to_array+0x20>

00020daa <cast_away_const>:
}
   20daa:	4770      	bx	lr

00020dac <update_offset>:
    if ((buffer == NULL) || (buffer->buffer == NULL))
   20dac:	b158      	cbz	r0, 20dc6 <update_offset+0x1a>
{
   20dae:	b510      	push	{r4, lr}
   20db0:	4604      	mov	r4, r0
    if ((buffer == NULL) || (buffer->buffer == NULL))
   20db2:	6803      	ldr	r3, [r0, #0]
   20db4:	b133      	cbz	r3, 20dc4 <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   20db6:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   20db8:	4418      	add	r0, r3
   20dba:	f7f0 f859 	bl	10e70 <strlen>
   20dbe:	68a3      	ldr	r3, [r4, #8]
   20dc0:	4403      	add	r3, r0
   20dc2:	60a3      	str	r3, [r4, #8]
}
   20dc4:	bd10      	pop	{r4, pc}
   20dc6:	4770      	bx	lr

00020dc8 <cJSON_strdup>:
{
   20dc8:	b570      	push	{r4, r5, r6, lr}
    if (string == NULL)
   20dca:	4606      	mov	r6, r0
   20dcc:	b170      	cbz	r0, 20dec <cJSON_strdup+0x24>
   20dce:	460d      	mov	r5, r1
    length = strlen((const char*)string) + sizeof("");
   20dd0:	f7f0 f84e 	bl	10e70 <strlen>
   20dd4:	1c44      	adds	r4, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   20dd6:	682b      	ldr	r3, [r5, #0]
   20dd8:	4620      	mov	r0, r4
   20dda:	4798      	blx	r3
    if (copy == NULL)
   20ddc:	4605      	mov	r5, r0
   20dde:	b118      	cbz	r0, 20de8 <cJSON_strdup+0x20>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20de0:	4622      	mov	r2, r4
   20de2:	4631      	mov	r1, r6
   20de4:	f002 f8c7 	bl	22f76 <memcpy>
}
   20de8:	4628      	mov	r0, r5
   20dea:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
   20dec:	4605      	mov	r5, r0
   20dee:	e7fb      	b.n	20de8 <cJSON_strdup+0x20>

00020df0 <add_item_to_object>:
    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
   20df0:	b368      	cbz	r0, 20e4e <add_item_to_object+0x5e>
{
   20df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20df6:	460d      	mov	r5, r1
   20df8:	4614      	mov	r4, r2
   20dfa:	461e      	mov	r6, r3
   20dfc:	4607      	mov	r7, r0
    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
   20dfe:	b341      	cbz	r1, 20e52 <add_item_to_object+0x62>
   20e00:	b34a      	cbz	r2, 20e56 <add_item_to_object+0x66>
   20e02:	4290      	cmp	r0, r2
   20e04:	d029      	beq.n	20e5a <add_item_to_object+0x6a>
    if (constant_key)
   20e06:	9b06      	ldr	r3, [sp, #24]
   20e08:	b1bb      	cbz	r3, 20e3a <add_item_to_object+0x4a>
        new_key = (char*)cast_away_const(string);
   20e0a:	4608      	mov	r0, r1
   20e0c:	f7ff ffcd 	bl	20daa <cast_away_const>
   20e10:	4680      	mov	r8, r0
        new_type = item->type | cJSON_StringIsConst;
   20e12:	68e5      	ldr	r5, [r4, #12]
   20e14:	f445 7500 	orr.w	r5, r5, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   20e18:	68e3      	ldr	r3, [r4, #12]
   20e1a:	f413 7f00 	tst.w	r3, #512	; 0x200
   20e1e:	d103      	bne.n	20e28 <add_item_to_object+0x38>
   20e20:	6a20      	ldr	r0, [r4, #32]
   20e22:	b108      	cbz	r0, 20e28 <add_item_to_object+0x38>
        hooks->deallocate(item->string);
   20e24:	6873      	ldr	r3, [r6, #4]
   20e26:	4798      	blx	r3
    item->string = new_key;
   20e28:	f8c4 8020 	str.w	r8, [r4, #32]
    item->type = new_type;
   20e2c:	60e5      	str	r5, [r4, #12]
    return add_item_to_array(object, item);
   20e2e:	4621      	mov	r1, r4
   20e30:	4638      	mov	r0, r7
   20e32:	f7ff ff9c 	bl	20d6e <add_item_to_array>
}
   20e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   20e3a:	4631      	mov	r1, r6
   20e3c:	4628      	mov	r0, r5
   20e3e:	f7ff ffc3 	bl	20dc8 <cJSON_strdup>
        if (new_key == NULL)
   20e42:	4680      	mov	r8, r0
   20e44:	b158      	cbz	r0, 20e5e <add_item_to_object+0x6e>
        new_type = item->type & ~cJSON_StringIsConst;
   20e46:	68e5      	ldr	r5, [r4, #12]
   20e48:	f425 7500 	bic.w	r5, r5, #512	; 0x200
   20e4c:	e7e4      	b.n	20e18 <add_item_to_object+0x28>
        return false;
   20e4e:	2000      	movs	r0, #0
}
   20e50:	4770      	bx	lr
        return false;
   20e52:	2000      	movs	r0, #0
   20e54:	e7ef      	b.n	20e36 <add_item_to_object+0x46>
   20e56:	2000      	movs	r0, #0
   20e58:	e7ed      	b.n	20e36 <add_item_to_object+0x46>
   20e5a:	2000      	movs	r0, #0
   20e5c:	e7eb      	b.n	20e36 <add_item_to_object+0x46>
            return false;
   20e5e:	9806      	ldr	r0, [sp, #24]
   20e60:	e7e9      	b.n	20e36 <add_item_to_object+0x46>

00020e62 <ensure>:
{
   20e62:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   20e64:	4605      	mov	r5, r0
   20e66:	2800      	cmp	r0, #0
   20e68:	d046      	beq.n	20ef8 <ensure+0x96>
   20e6a:	6806      	ldr	r6, [r0, #0]
   20e6c:	b336      	cbz	r6, 20ebc <ensure+0x5a>
    if ((p->length > 0) && (p->offset >= p->length))
   20e6e:	6843      	ldr	r3, [r0, #4]
   20e70:	b113      	cbz	r3, 20e78 <ensure+0x16>
   20e72:	6882      	ldr	r2, [r0, #8]
   20e74:	4293      	cmp	r3, r2
   20e76:	d941      	bls.n	20efc <ensure+0x9a>
    if (needed > INT_MAX)
   20e78:	2900      	cmp	r1, #0
   20e7a:	db41      	blt.n	20f00 <ensure+0x9e>
    needed += p->offset + 1;
   20e7c:	68a8      	ldr	r0, [r5, #8]
   20e7e:	4401      	add	r1, r0
   20e80:	1c4a      	adds	r2, r1, #1
    if (needed <= p->length)
   20e82:	4293      	cmp	r3, r2
   20e84:	d20a      	bcs.n	20e9c <ensure+0x3a>
    if (p->noalloc) {
   20e86:	692b      	ldr	r3, [r5, #16]
   20e88:	2b00      	cmp	r3, #0
   20e8a:	d13b      	bne.n	20f04 <ensure+0xa2>
    if (needed > (INT_MAX / 2))
   20e8c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
   20e90:	d308      	bcc.n	20ea4 <ensure+0x42>
        if (needed <= INT_MAX)
   20e92:	2a00      	cmp	r2, #0
   20e94:	db04      	blt.n	20ea0 <ensure+0x3e>
            newsize = INT_MAX;
   20e96:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   20e9a:	e004      	b.n	20ea6 <ensure+0x44>
        return p->buffer + p->offset;
   20e9c:	4406      	add	r6, r0
   20e9e:	e00d      	b.n	20ebc <ensure+0x5a>
            return NULL;
   20ea0:	2600      	movs	r6, #0
   20ea2:	e00b      	b.n	20ebc <ensure+0x5a>
        newsize = needed + 1;
   20ea4:	1c8c      	adds	r4, r1, #2
    if (p->hooks.reallocate != NULL)
   20ea6:	6a2b      	ldr	r3, [r5, #32]
   20ea8:	b18b      	cbz	r3, 20ece <ensure+0x6c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   20eaa:	4621      	mov	r1, r4
   20eac:	4630      	mov	r0, r6
   20eae:	4798      	blx	r3
        if (newbuffer == NULL)
   20eb0:	4606      	mov	r6, r0
   20eb2:	b128      	cbz	r0, 20ec0 <ensure+0x5e>
    p->length = newsize;
   20eb4:	606c      	str	r4, [r5, #4]
    p->buffer = newbuffer;
   20eb6:	602e      	str	r6, [r5, #0]
    return newbuffer + p->offset;
   20eb8:	68ab      	ldr	r3, [r5, #8]
   20eba:	441e      	add	r6, r3
}
   20ebc:	4630      	mov	r0, r6
   20ebe:	bd70      	pop	{r4, r5, r6, pc}
            p->hooks.deallocate(p->buffer);
   20ec0:	69eb      	ldr	r3, [r5, #28]
   20ec2:	6828      	ldr	r0, [r5, #0]
   20ec4:	4798      	blx	r3
            p->length = 0;
   20ec6:	2300      	movs	r3, #0
   20ec8:	606b      	str	r3, [r5, #4]
            p->buffer = NULL;
   20eca:	602b      	str	r3, [r5, #0]
            return NULL;
   20ecc:	e7f6      	b.n	20ebc <ensure+0x5a>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   20ece:	69ab      	ldr	r3, [r5, #24]
   20ed0:	4620      	mov	r0, r4
   20ed2:	4798      	blx	r3
        if (!newbuffer)
   20ed4:	4606      	mov	r6, r0
   20ed6:	b140      	cbz	r0, 20eea <ensure+0x88>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   20ed8:	68aa      	ldr	r2, [r5, #8]
   20eda:	3201      	adds	r2, #1
   20edc:	6829      	ldr	r1, [r5, #0]
   20ede:	f002 f84a 	bl	22f76 <memcpy>
        p->hooks.deallocate(p->buffer);
   20ee2:	69eb      	ldr	r3, [r5, #28]
   20ee4:	6828      	ldr	r0, [r5, #0]
   20ee6:	4798      	blx	r3
   20ee8:	e7e4      	b.n	20eb4 <ensure+0x52>
            p->hooks.deallocate(p->buffer);
   20eea:	69eb      	ldr	r3, [r5, #28]
   20eec:	6828      	ldr	r0, [r5, #0]
   20eee:	4798      	blx	r3
            p->length = 0;
   20ef0:	2300      	movs	r3, #0
   20ef2:	606b      	str	r3, [r5, #4]
            p->buffer = NULL;
   20ef4:	602b      	str	r3, [r5, #0]
            return NULL;
   20ef6:	e7e1      	b.n	20ebc <ensure+0x5a>
        return NULL;
   20ef8:	4606      	mov	r6, r0
   20efa:	e7df      	b.n	20ebc <ensure+0x5a>
        return NULL;
   20efc:	2600      	movs	r6, #0
   20efe:	e7dd      	b.n	20ebc <ensure+0x5a>
        return NULL;
   20f00:	2600      	movs	r6, #0
   20f02:	e7db      	b.n	20ebc <ensure+0x5a>
        return NULL;
   20f04:	2600      	movs	r6, #0
   20f06:	e7d9      	b.n	20ebc <ensure+0x5a>

00020f08 <cJSON_New_Item>:
{
   20f08:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   20f0a:	6803      	ldr	r3, [r0, #0]
   20f0c:	2028      	movs	r0, #40	; 0x28
   20f0e:	4798      	blx	r3
    if (node)
   20f10:	4604      	mov	r4, r0
   20f12:	b118      	cbz	r0, 20f1c <cJSON_New_Item+0x14>
__ssp_bos_icheck3(memset, void *, int)
   20f14:	2228      	movs	r2, #40	; 0x28
   20f16:	2100      	movs	r1, #0
   20f18:	f002 f84d 	bl	22fb6 <memset>
}
   20f1c:	4620      	mov	r0, r4
   20f1e:	bd10      	pop	{r4, pc}

00020f20 <print_string>:
{
   20f20:	b508      	push	{r3, lr}
    return print_string_ptr((unsigned char*)item->valuestring, p);
   20f22:	6900      	ldr	r0, [r0, #16]
   20f24:	f7f5 fa22 	bl	1636c <print_string_ptr>
}
   20f28:	bd08      	pop	{r3, pc}

00020f2a <print_object>:
{
   20f2a:	b570      	push	{r4, r5, r6, lr}
    cJSON *current_item = item->child;
   20f2c:	6885      	ldr	r5, [r0, #8]
    if (output_buffer == NULL)
   20f2e:	2900      	cmp	r1, #0
   20f30:	f000 80a3 	beq.w	2107a <print_object+0x150>
   20f34:	460c      	mov	r4, r1
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   20f36:	694b      	ldr	r3, [r1, #20]
   20f38:	b1a3      	cbz	r3, 20f64 <print_object+0x3a>
   20f3a:	2602      	movs	r6, #2
    output_pointer = ensure(output_buffer, length + 1);
   20f3c:	1c71      	adds	r1, r6, #1
   20f3e:	4620      	mov	r0, r4
   20f40:	f7ff ff8f 	bl	20e62 <ensure>
    if (output_pointer == NULL)
   20f44:	2800      	cmp	r0, #0
   20f46:	f000 809b 	beq.w	21080 <print_object+0x156>
    *output_pointer++ = '{';
   20f4a:	237b      	movs	r3, #123	; 0x7b
   20f4c:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   20f4e:	68e3      	ldr	r3, [r4, #12]
   20f50:	3301      	adds	r3, #1
   20f52:	60e3      	str	r3, [r4, #12]
    if (output_buffer->format)
   20f54:	6963      	ldr	r3, [r4, #20]
   20f56:	b10b      	cbz	r3, 20f5c <print_object+0x32>
        *output_pointer++ = '\n';
   20f58:	230a      	movs	r3, #10
   20f5a:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   20f5c:	68a3      	ldr	r3, [r4, #8]
   20f5e:	4433      	add	r3, r6
   20f60:	60a3      	str	r3, [r4, #8]
    while (current_item)
   20f62:	e022      	b.n	20faa <print_object+0x80>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   20f64:	2601      	movs	r6, #1
   20f66:	e7e9      	b.n	20f3c <print_object+0x12>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   20f68:	68e1      	ldr	r1, [r4, #12]
   20f6a:	4620      	mov	r0, r4
   20f6c:	f7ff ff79 	bl	20e62 <ensure>
            if (output_pointer == NULL)
   20f70:	4603      	mov	r3, r0
   20f72:	2800      	cmp	r0, #0
   20f74:	f000 8086 	beq.w	21084 <print_object+0x15a>
            for (i = 0; i < output_buffer->depth; i++)
   20f78:	2200      	movs	r2, #0
   20f7a:	68e1      	ldr	r1, [r4, #12]
   20f7c:	4291      	cmp	r1, r2
   20f7e:	d904      	bls.n	20f8a <print_object+0x60>
                *output_pointer++ = '\t';
   20f80:	2109      	movs	r1, #9
   20f82:	f803 1b01 	strb.w	r1, [r3], #1
            for (i = 0; i < output_buffer->depth; i++)
   20f86:	3201      	adds	r2, #1
   20f88:	e7f7      	b.n	20f7a <print_object+0x50>
            output_buffer->offset += output_buffer->depth;
   20f8a:	68a3      	ldr	r3, [r4, #8]
   20f8c:	4419      	add	r1, r3
   20f8e:	60a1      	str	r1, [r4, #8]
   20f90:	e010      	b.n	20fb4 <print_object+0x8a>
        length = (size_t) (output_buffer->format ? 2 : 1);
   20f92:	2601      	movs	r6, #1
   20f94:	e01c      	b.n	20fd0 <print_object+0xa6>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   20f96:	2600      	movs	r6, #0
   20f98:	e037      	b.n	2100a <print_object+0xe0>
   20f9a:	2300      	movs	r3, #0
   20f9c:	e039      	b.n	21012 <print_object+0xe8>
        *output_pointer = '\0';
   20f9e:	2200      	movs	r2, #0
   20fa0:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
   20fa2:	68a3      	ldr	r3, [r4, #8]
   20fa4:	441e      	add	r6, r3
   20fa6:	60a6      	str	r6, [r4, #8]
        current_item = current_item->next;
   20fa8:	682d      	ldr	r5, [r5, #0]
    while (current_item)
   20faa:	2d00      	cmp	r5, #0
   20fac:	d044      	beq.n	21038 <print_object+0x10e>
        if (output_buffer->format)
   20fae:	6963      	ldr	r3, [r4, #20]
   20fb0:	2b00      	cmp	r3, #0
   20fb2:	d1d9      	bne.n	20f68 <print_object+0x3e>
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   20fb4:	4621      	mov	r1, r4
   20fb6:	6a28      	ldr	r0, [r5, #32]
   20fb8:	f7f5 f9d8 	bl	1636c <print_string_ptr>
   20fbc:	4603      	mov	r3, r0
   20fbe:	2800      	cmp	r0, #0
   20fc0:	d05c      	beq.n	2107c <print_object+0x152>
        update_offset(output_buffer);
   20fc2:	4620      	mov	r0, r4
   20fc4:	f7ff fef2 	bl	20dac <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   20fc8:	6963      	ldr	r3, [r4, #20]
   20fca:	2b00      	cmp	r3, #0
   20fcc:	d0e1      	beq.n	20f92 <print_object+0x68>
   20fce:	2602      	movs	r6, #2
        output_pointer = ensure(output_buffer, length);
   20fd0:	4631      	mov	r1, r6
   20fd2:	4620      	mov	r0, r4
   20fd4:	f7ff ff45 	bl	20e62 <ensure>
        if (output_pointer == NULL)
   20fd8:	2800      	cmp	r0, #0
   20fda:	d055      	beq.n	21088 <print_object+0x15e>
        *output_pointer++ = ':';
   20fdc:	223a      	movs	r2, #58	; 0x3a
   20fde:	7002      	strb	r2, [r0, #0]
        if (output_buffer->format)
   20fe0:	6962      	ldr	r2, [r4, #20]
   20fe2:	b10a      	cbz	r2, 20fe8 <print_object+0xbe>
            *output_pointer++ = '\t';
   20fe4:	2209      	movs	r2, #9
   20fe6:	7042      	strb	r2, [r0, #1]
        output_buffer->offset += length;
   20fe8:	68a1      	ldr	r1, [r4, #8]
   20fea:	4431      	add	r1, r6
   20fec:	60a1      	str	r1, [r4, #8]
        if (!print_value(current_item, output_buffer))
   20fee:	4621      	mov	r1, r4
   20ff0:	4628      	mov	r0, r5
   20ff2:	f7f5 fa75 	bl	164e0 <print_value>
   20ff6:	4603      	mov	r3, r0
   20ff8:	2800      	cmp	r0, #0
   20ffa:	d03f      	beq.n	2107c <print_object+0x152>
        update_offset(output_buffer);
   20ffc:	4620      	mov	r0, r4
   20ffe:	f7ff fed5 	bl	20dac <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   21002:	6963      	ldr	r3, [r4, #20]
   21004:	2b00      	cmp	r3, #0
   21006:	d0c6      	beq.n	20f96 <print_object+0x6c>
   21008:	2601      	movs	r6, #1
   2100a:	682b      	ldr	r3, [r5, #0]
   2100c:	2b00      	cmp	r3, #0
   2100e:	d0c4      	beq.n	20f9a <print_object+0x70>
   21010:	2301      	movs	r3, #1
   21012:	441e      	add	r6, r3
        output_pointer = ensure(output_buffer, length + 1);
   21014:	1c71      	adds	r1, r6, #1
   21016:	4620      	mov	r0, r4
   21018:	f7ff ff23 	bl	20e62 <ensure>
        if (output_pointer == NULL)
   2101c:	4603      	mov	r3, r0
   2101e:	b3a8      	cbz	r0, 2108c <print_object+0x162>
        if (current_item->next)
   21020:	682a      	ldr	r2, [r5, #0]
   21022:	b112      	cbz	r2, 2102a <print_object+0x100>
            *output_pointer++ = ',';
   21024:	222c      	movs	r2, #44	; 0x2c
   21026:	f803 2b01 	strb.w	r2, [r3], #1
        if (output_buffer->format)
   2102a:	6962      	ldr	r2, [r4, #20]
   2102c:	2a00      	cmp	r2, #0
   2102e:	d0b6      	beq.n	20f9e <print_object+0x74>
            *output_pointer++ = '\n';
   21030:	220a      	movs	r2, #10
   21032:	f803 2b01 	strb.w	r2, [r3], #1
   21036:	e7b2      	b.n	20f9e <print_object+0x74>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   21038:	6963      	ldr	r3, [r4, #20]
   2103a:	b18b      	cbz	r3, 21060 <print_object+0x136>
   2103c:	68e1      	ldr	r1, [r4, #12]
   2103e:	3101      	adds	r1, #1
   21040:	4620      	mov	r0, r4
   21042:	f7ff ff0e 	bl	20e62 <ensure>
    if (output_pointer == NULL)
   21046:	4603      	mov	r3, r0
   21048:	b310      	cbz	r0, 21090 <print_object+0x166>
    if (output_buffer->format)
   2104a:	6962      	ldr	r2, [r4, #20]
   2104c:	b99a      	cbnz	r2, 21076 <print_object+0x14c>
    *output_pointer++ = '}';
   2104e:	227d      	movs	r2, #125	; 0x7d
   21050:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   21052:	2200      	movs	r2, #0
   21054:	705a      	strb	r2, [r3, #1]
    output_buffer->depth--;
   21056:	68e3      	ldr	r3, [r4, #12]
   21058:	3b01      	subs	r3, #1
   2105a:	60e3      	str	r3, [r4, #12]
    return true;
   2105c:	2301      	movs	r3, #1
   2105e:	e00d      	b.n	2107c <print_object+0x152>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   21060:	2102      	movs	r1, #2
   21062:	e7ed      	b.n	21040 <print_object+0x116>
            *output_pointer++ = '\t';
   21064:	2209      	movs	r2, #9
   21066:	f803 2b01 	strb.w	r2, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   2106a:	3101      	adds	r1, #1
   2106c:	68e2      	ldr	r2, [r4, #12]
   2106e:	3a01      	subs	r2, #1
   21070:	428a      	cmp	r2, r1
   21072:	d8f7      	bhi.n	21064 <print_object+0x13a>
   21074:	e7eb      	b.n	2104e <print_object+0x124>
   21076:	2100      	movs	r1, #0
   21078:	e7f8      	b.n	2106c <print_object+0x142>
        return false;
   2107a:	2300      	movs	r3, #0
}
   2107c:	4618      	mov	r0, r3
   2107e:	bd70      	pop	{r4, r5, r6, pc}
        return false;
   21080:	2300      	movs	r3, #0
   21082:	e7fb      	b.n	2107c <print_object+0x152>
                return false;
   21084:	2300      	movs	r3, #0
   21086:	e7f9      	b.n	2107c <print_object+0x152>
            return false;
   21088:	2300      	movs	r3, #0
   2108a:	e7f7      	b.n	2107c <print_object+0x152>
            return false;
   2108c:	2300      	movs	r3, #0
   2108e:	e7f5      	b.n	2107c <print_object+0x152>
        return false;
   21090:	2300      	movs	r3, #0
   21092:	e7f3      	b.n	2107c <print_object+0x152>

00021094 <print>:
{
   21094:	b5f0      	push	{r4, r5, r6, r7, lr}
   21096:	b08b      	sub	sp, #44	; 0x2c
   21098:	4607      	mov	r7, r0
   2109a:	460d      	mov	r5, r1
   2109c:	4616      	mov	r6, r2
    memset(buffer, 0, sizeof(buffer));
   2109e:	2224      	movs	r2, #36	; 0x24
   210a0:	2100      	movs	r1, #0
   210a2:	a801      	add	r0, sp, #4
   210a4:	f001 ff87 	bl	22fb6 <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   210a8:	6833      	ldr	r3, [r6, #0]
   210aa:	f44f 7080 	mov.w	r0, #256	; 0x100
   210ae:	4798      	blx	r3
   210b0:	4604      	mov	r4, r0
   210b2:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   210b4:	f44f 7380 	mov.w	r3, #256	; 0x100
   210b8:	9302      	str	r3, [sp, #8]
    buffer->format = format;
   210ba:	9506      	str	r5, [sp, #24]
    buffer->hooks = *hooks;
   210bc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   210c0:	ab0a      	add	r3, sp, #40	; 0x28
   210c2:	e903 0007 	stmdb	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
   210c6:	b12c      	cbz	r4, 210d4 <print+0x40>
    if (!print_value(item, buffer))
   210c8:	a901      	add	r1, sp, #4
   210ca:	4638      	mov	r0, r7
   210cc:	f7f5 fa08 	bl	164e0 <print_value>
   210d0:	b960      	cbnz	r0, 210ec <print+0x58>
    unsigned char *printed = NULL;
   210d2:	2400      	movs	r4, #0
    if (buffer->buffer != NULL)
   210d4:	9801      	ldr	r0, [sp, #4]
   210d6:	b108      	cbz	r0, 210dc <print+0x48>
        hooks->deallocate(buffer->buffer);
   210d8:	6873      	ldr	r3, [r6, #4]
   210da:	4798      	blx	r3
    if (printed != NULL)
   210dc:	b11c      	cbz	r4, 210e6 <print+0x52>
        hooks->deallocate(printed);
   210de:	6873      	ldr	r3, [r6, #4]
   210e0:	4620      	mov	r0, r4
   210e2:	4798      	blx	r3
    return NULL;
   210e4:	2400      	movs	r4, #0
}
   210e6:	4620      	mov	r0, r4
   210e8:	b00b      	add	sp, #44	; 0x2c
   210ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    update_offset(buffer);
   210ec:	a801      	add	r0, sp, #4
   210ee:	f7ff fe5d 	bl	20dac <update_offset>
    if (hooks->reallocate != NULL)
   210f2:	68b3      	ldr	r3, [r6, #8]
   210f4:	b13b      	cbz	r3, 21106 <print+0x72>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   210f6:	9903      	ldr	r1, [sp, #12]
   210f8:	3101      	adds	r1, #1
   210fa:	9801      	ldr	r0, [sp, #4]
   210fc:	4798      	blx	r3
        if (printed == NULL) {
   210fe:	4604      	mov	r4, r0
   21100:	2800      	cmp	r0, #0
   21102:	d1f0      	bne.n	210e6 <print+0x52>
   21104:	e7e6      	b.n	210d4 <print+0x40>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   21106:	6833      	ldr	r3, [r6, #0]
   21108:	9803      	ldr	r0, [sp, #12]
   2110a:	3001      	adds	r0, #1
   2110c:	4798      	blx	r3
        if (printed == NULL)
   2110e:	4604      	mov	r4, r0
   21110:	2800      	cmp	r0, #0
   21112:	d0df      	beq.n	210d4 <print+0x40>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   21114:	9a03      	ldr	r2, [sp, #12]
   21116:	3201      	adds	r2, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21118:	9b02      	ldr	r3, [sp, #8]
   2111a:	429a      	cmp	r2, r3
   2111c:	bf28      	it	cs
   2111e:	461a      	movcs	r2, r3
   21120:	9901      	ldr	r1, [sp, #4]
   21122:	f001 ff28 	bl	22f76 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   21126:	9b03      	ldr	r3, [sp, #12]
   21128:	2200      	movs	r2, #0
   2112a:	54e2      	strb	r2, [r4, r3]
        hooks->deallocate(buffer->buffer);
   2112c:	6873      	ldr	r3, [r6, #4]
   2112e:	9801      	ldr	r0, [sp, #4]
   21130:	4798      	blx	r3
   21132:	e7d8      	b.n	210e6 <print+0x52>

00021134 <print_array>:
{
   21134:	b570      	push	{r4, r5, r6, lr}
    cJSON *current_element = item->child;
   21136:	6885      	ldr	r5, [r0, #8]
    if (output_buffer == NULL)
   21138:	2900      	cmp	r1, #0
   2113a:	d046      	beq.n	211ca <print_array+0x96>
   2113c:	460c      	mov	r4, r1
    output_pointer = ensure(output_buffer, 1);
   2113e:	2101      	movs	r1, #1
   21140:	4620      	mov	r0, r4
   21142:	f7ff fe8e 	bl	20e62 <ensure>
    if (output_pointer == NULL)
   21146:	2800      	cmp	r0, #0
   21148:	d042      	beq.n	211d0 <print_array+0x9c>
    *output_pointer = '[';
   2114a:	225b      	movs	r2, #91	; 0x5b
   2114c:	7002      	strb	r2, [r0, #0]
    output_buffer->offset++;
   2114e:	68a3      	ldr	r3, [r4, #8]
   21150:	3301      	adds	r3, #1
   21152:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   21154:	68e3      	ldr	r3, [r4, #12]
   21156:	3301      	adds	r3, #1
   21158:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   2115a:	e007      	b.n	2116c <print_array+0x38>
            length = (size_t) (output_buffer->format ? 2 : 1);
   2115c:	2601      	movs	r6, #1
   2115e:	e016      	b.n	2118e <print_array+0x5a>
            *output_pointer = '\0';
   21160:	2200      	movs	r2, #0
   21162:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
   21164:	68a3      	ldr	r3, [r4, #8]
   21166:	4433      	add	r3, r6
   21168:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   2116a:	682d      	ldr	r5, [r5, #0]
    while (current_element != NULL)
   2116c:	b1fd      	cbz	r5, 211ae <print_array+0x7a>
        if (!print_value(current_element, output_buffer))
   2116e:	4621      	mov	r1, r4
   21170:	4628      	mov	r0, r5
   21172:	f7f5 f9b5 	bl	164e0 <print_value>
   21176:	4603      	mov	r3, r0
   21178:	b340      	cbz	r0, 211cc <print_array+0x98>
        update_offset(output_buffer);
   2117a:	4620      	mov	r0, r4
   2117c:	f7ff fe16 	bl	20dac <update_offset>
        if (current_element->next)
   21180:	682b      	ldr	r3, [r5, #0]
   21182:	2b00      	cmp	r3, #0
   21184:	d0f1      	beq.n	2116a <print_array+0x36>
            length = (size_t) (output_buffer->format ? 2 : 1);
   21186:	6963      	ldr	r3, [r4, #20]
   21188:	2b00      	cmp	r3, #0
   2118a:	d0e7      	beq.n	2115c <print_array+0x28>
   2118c:	2602      	movs	r6, #2
            output_pointer = ensure(output_buffer, length + 1);
   2118e:	1c71      	adds	r1, r6, #1
   21190:	4620      	mov	r0, r4
   21192:	f7ff fe66 	bl	20e62 <ensure>
            if (output_pointer == NULL)
   21196:	b1e8      	cbz	r0, 211d4 <print_array+0xa0>
            *output_pointer++ = ',';
   21198:	4603      	mov	r3, r0
   2119a:	212c      	movs	r1, #44	; 0x2c
   2119c:	f803 1b01 	strb.w	r1, [r3], #1
            if(output_buffer->format)
   211a0:	6961      	ldr	r1, [r4, #20]
   211a2:	2900      	cmp	r1, #0
   211a4:	d0dc      	beq.n	21160 <print_array+0x2c>
                *output_pointer++ = ' ';
   211a6:	1c83      	adds	r3, r0, #2
   211a8:	2120      	movs	r1, #32
   211aa:	7041      	strb	r1, [r0, #1]
   211ac:	e7d8      	b.n	21160 <print_array+0x2c>
    output_pointer = ensure(output_buffer, 2);
   211ae:	2102      	movs	r1, #2
   211b0:	4620      	mov	r0, r4
   211b2:	f7ff fe56 	bl	20e62 <ensure>
    if (output_pointer == NULL)
   211b6:	b178      	cbz	r0, 211d8 <print_array+0xa4>
    *output_pointer++ = ']';
   211b8:	225d      	movs	r2, #93	; 0x5d
   211ba:	7002      	strb	r2, [r0, #0]
    *output_pointer = '\0';
   211bc:	2200      	movs	r2, #0
   211be:	7042      	strb	r2, [r0, #1]
    output_buffer->depth--;
   211c0:	68e3      	ldr	r3, [r4, #12]
   211c2:	3b01      	subs	r3, #1
   211c4:	60e3      	str	r3, [r4, #12]
    return true;
   211c6:	2301      	movs	r3, #1
   211c8:	e000      	b.n	211cc <print_array+0x98>
        return false;
   211ca:	2300      	movs	r3, #0
}
   211cc:	4618      	mov	r0, r3
   211ce:	bd70      	pop	{r4, r5, r6, pc}
        return false;
   211d0:	2300      	movs	r3, #0
   211d2:	e7fb      	b.n	211cc <print_array+0x98>
                return false;
   211d4:	2300      	movs	r3, #0
   211d6:	e7f9      	b.n	211cc <print_array+0x98>
        return false;
   211d8:	2300      	movs	r3, #0
   211da:	e7f7      	b.n	211cc <print_array+0x98>

000211dc <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   211dc:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   211de:	4780      	blx	r0
}
   211e0:	bd08      	pop	{r3, pc}

000211e2 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   211e2:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   211e4:	f001 fdab 	bl	22d3e <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   211e8:	bd08      	pop	{r3, pc}

000211ea <nrfx_clock_enable>:
{
   211ea:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   211ec:	2005      	movs	r0, #5
   211ee:	f7f2 fdd3 	bl	13d98 <arch_irq_is_enabled>
   211f2:	b100      	cbz	r0, 211f6 <nrfx_clock_enable+0xc>
}
   211f4:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   211f6:	2005      	movs	r0, #5
   211f8:	f7f2 fdbe 	bl	13d78 <arch_irq_enable>
   211fc:	e7fa      	b.n	211f4 <nrfx_clock_enable+0xa>

000211fe <is_app_channel>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   211fe:	2301      	movs	r3, #1
   21200:	4083      	lsls	r3, r0
   21202:	f013 0fff 	tst.w	r3, #255	; 0xff
}
   21206:	bf14      	ite	ne
   21208:	2001      	movne	r0, #1
   2120a:	2000      	moveq	r0, #0
   2120c:	4770      	bx	lr

0002120e <flash_page_size_get>:
}
   2120e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   21212:	4770      	bx	lr

00021214 <flash_page_count_get>:
}
   21214:	f44f 7080 	mov.w	r0, #256	; 0x100
   21218:	4770      	bx	lr

0002121a <flash_total_size_get>:
{
   2121a:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
   2121c:	f7ff fff7 	bl	2120e <flash_page_size_get>
   21220:	4604      	mov	r4, r0
   21222:	f7ff fff7 	bl	21214 <flash_page_count_get>
}
   21226:	fb00 f004 	mul.w	r0, r0, r4
   2122a:	bd10      	pop	{r4, pc}

0002122c <is_page_aligned_check>:
{
   2122c:	b510      	push	{r4, lr}
   2122e:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
   21230:	f7ff ffed 	bl	2120e <flash_page_size_get>
   21234:	fbb4 f3f0 	udiv	r3, r4, r0
   21238:	fb00 4013 	mls	r0, r0, r3, r4
}
   2123c:	fab0 f080 	clz	r0, r0
   21240:	0940      	lsrs	r0, r0, #5
   21242:	bd10      	pop	{r4, pc}

00021244 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   21244:	b538      	push	{r3, r4, r5, lr}
   21246:	4604      	mov	r4, r0
   21248:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();
   2124a:	f7f5 fc9f 	bl	16b8c <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
   2124e:	4629      	mov	r1, r5
   21250:	4620      	mov	r0, r4
   21252:	f7f5 fcab 	bl	16bac <nvmc_word_write>

    nvmc_readonly_mode_set();
   21256:	f7f5 fc91 	bl	16b7c <nvmc_readonly_mode_set>
}
   2125a:	bd38      	pop	{r3, r4, r5, pc}

0002125c <nrfx_nvmc_flash_size_get>:
    return (nrfx_is_word_aligned((void const *)addr) ? (uint16_t)(val32)
                                                     : (uint16_t)(val32 >> 16));
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
   2125c:	b508      	push	{r3, lr}
    return flash_total_size_get();
   2125e:	f7ff ffdc 	bl	2121a <flash_total_size_get>
}
   21262:	bd08      	pop	{r3, pc}

00021264 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
   21264:	b508      	push	{r3, lr}
    return flash_page_size_get();
   21266:	f7ff ffd2 	bl	2120e <flash_page_size_get>
}
   2126a:	bd08      	pop	{r3, pc}

0002126c <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
   2126c:	b508      	push	{r3, lr}
    return flash_page_count_get();
   2126e:	f7ff ffd1 	bl	21214 <flash_page_count_get>
}
   21272:	bd08      	pop	{r3, pc}

00021274 <rpc_handle_ctrl_message>:
   21274:	2902      	cmp	r1, #2
   21276:	b510      	push	{r4, lr}
   21278:	4604      	mov	r4, r0
   2127a:	d005      	beq.n	21288 <rpc_handle_ctrl_message+0x14>
   2127c:	2904      	cmp	r1, #4
   2127e:	d001      	beq.n	21284 <rpc_handle_ctrl_message+0x10>
   21280:	2901      	cmp	r1, #1
   21282:	d107      	bne.n	21294 <rpc_handle_ctrl_message+0x20>
   21284:	2000      	movs	r0, #0
   21286:	bd10      	pop	{r4, pc}
   21288:	6880      	ldr	r0, [r0, #8]
   2128a:	2800      	cmp	r0, #0
   2128c:	d0fa      	beq.n	21284 <rpc_handle_ctrl_message+0x10>
   2128e:	f000 f83b 	bl	21308 <rpc_transport_local_data_free>
   21292:	e7f7      	b.n	21284 <rpc_handle_ctrl_message+0x10>
   21294:	6880      	ldr	r0, [r0, #8]
   21296:	b108      	cbz	r0, 2129c <rpc_handle_ctrl_message+0x28>
   21298:	f000 f836 	bl	21308 <rpc_transport_local_data_free>
   2129c:	4620      	mov	r0, r4
   2129e:	f000 f82f 	bl	21300 <rpc_transport_msg_free>
   212a2:	e7ef      	b.n	21284 <rpc_handle_ctrl_message+0x10>

000212a4 <rpc_message_send>:
   212a4:	684b      	ldr	r3, [r1, #4]
   212a6:	8008      	strh	r0, [r1, #0]
   212a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   212ac:	f043 0302 	orr.w	r3, r3, #2
   212b0:	4608      	mov	r0, r1
   212b2:	604b      	str	r3, [r1, #4]
   212b4:	f000 b82c 	b.w	21310 <rpc_transport_data_msg_send>

000212b8 <rpc_message_alloc>:
   212b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   212ba:	2300      	movs	r3, #0
   212bc:	4607      	mov	r7, r0
   212be:	4616      	mov	r6, r2
   212c0:	460d      	mov	r5, r1
   212c2:	6013      	str	r3, [r2, #0]
   212c4:	b131      	cbz	r1, 212d4 <rpc_message_alloc+0x1c>
   212c6:	4608      	mov	r0, r1
   212c8:	f000 f81c 	bl	21304 <rpc_transport_data_alloc>
   212cc:	4604      	mov	r4, r0
   212ce:	b910      	cbnz	r0, 212d6 <rpc_message_alloc+0x1e>
   212d0:	200c      	movs	r0, #12
   212d2:	e008      	b.n	212e6 <rpc_message_alloc+0x2e>
   212d4:	460c      	mov	r4, r1
   212d6:	f000 f811 	bl	212fc <rpc_transport_data_msg_alloc>
   212da:	b128      	cbz	r0, 212e8 <rpc_message_alloc+0x30>
   212dc:	60c5      	str	r5, [r0, #12]
   212de:	6084      	str	r4, [r0, #8]
   212e0:	8007      	strh	r7, [r0, #0]
   212e2:	6030      	str	r0, [r6, #0]
   212e4:	2000      	movs	r0, #0
   212e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   212e8:	2c00      	cmp	r4, #0
   212ea:	d0f1      	beq.n	212d0 <rpc_message_alloc+0x18>
   212ec:	4620      	mov	r0, r4
   212ee:	f000 f80b 	bl	21308 <rpc_transport_local_data_free>
   212f2:	e7ed      	b.n	212d0 <rpc_message_alloc+0x18>

000212f4 <rpc_message_free>:
   212f4:	f000 b804 	b.w	21300 <rpc_transport_msg_free>

000212f8 <rpc_message_data_free>:
   212f8:	f000 b808 	b.w	2130c <rpc_transport_peer_data_free>

000212fc <rpc_transport_data_msg_alloc>:
   212fc:	f7f5 be0e 	b.w	16f1c <rpc_transport_ipc_data_msg_alloc>

00021300 <rpc_transport_msg_free>:
   21300:	f7f5 be58 	b.w	16fb4 <rpc_transport_ipc_msg_free>

00021304 <rpc_transport_data_alloc>:
   21304:	f7f5 be3c 	b.w	16f80 <rpc_transport_ipc_data_alloc>

00021308 <rpc_transport_local_data_free>:
   21308:	f000 b84a 	b.w	213a0 <rpc_transport_ipc_local_data_free>

0002130c <rpc_transport_peer_data_free>:
   2130c:	f7f5 be78 	b.w	17000 <rpc_transport_ipc_peer_data_free>

00021310 <rpc_transport_data_msg_send>:
   21310:	f7f5 bdc8 	b.w	16ea4 <rpc_transport_ipc_data_msg_send>

00021314 <rpc_transport_rx_data_suspend>:
   21314:	f000 b84b 	b.w	213ae <rpc_transport_ipc_rx_data_suspend>

00021318 <rpc_transport_rx_data_resume>:
   21318:	f000 b84c 	b.w	213b4 <rpc_transport_ipc_rx_data_resume>

0002131c <trace_write>:
   2131c:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   21320:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21322:	f8ad 3000 	strh.w	r3, [sp]
   21326:	7803      	ldrb	r3, [r0, #0]
   21328:	4604      	mov	r4, r0
   2132a:	f88d 3004 	strb.w	r3, [sp, #4]
   2132e:	6843      	ldr	r3, [r0, #4]
   21330:	6882      	ldr	r2, [r0, #8]
   21332:	2105      	movs	r1, #5
   21334:	4293      	cmp	r3, r2
   21336:	bf96      	itet	ls
   21338:	6906      	ldrls	r6, [r0, #16]
   2133a:	1a9e      	subhi	r6, r3, r2
   2133c:	1ab6      	subls	r6, r6, r2
   2133e:	4293      	cmp	r3, r2
   21340:	bf2c      	ite	cs
   21342:	2500      	movcs	r5, #0
   21344:	68c5      	ldrcc	r5, [r0, #12]
   21346:	b2b6      	uxth	r6, r6
   21348:	bf38      	it	cc
   2134a:	1b5b      	subcc	r3, r3, r5
   2134c:	4668      	mov	r0, sp
   2134e:	bf38      	it	cc
   21350:	b29d      	uxthcc	r5, r3
   21352:	f8ad 6002 	strh.w	r6, [sp, #2]
   21356:	f7ff f81e 	bl	20396 <nrf_modem_os_trace_put>
   2135a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   2135e:	68a0      	ldr	r0, [r4, #8]
   21360:	b289      	uxth	r1, r1
   21362:	f7ff f818 	bl	20396 <nrf_modem_os_trace_put>
   21366:	68a3      	ldr	r3, [r4, #8]
   21368:	441e      	add	r6, r3
   2136a:	6923      	ldr	r3, [r4, #16]
   2136c:	60a6      	str	r6, [r4, #8]
   2136e:	429e      	cmp	r6, r3
   21370:	bf04      	itt	eq
   21372:	68e3      	ldreq	r3, [r4, #12]
   21374:	60a3      	streq	r3, [r4, #8]
   21376:	b18d      	cbz	r5, 2139c <trace_write+0x80>
   21378:	2105      	movs	r1, #5
   2137a:	4668      	mov	r0, sp
   2137c:	f8ad 5002 	strh.w	r5, [sp, #2]
   21380:	f7ff f809 	bl	20396 <nrf_modem_os_trace_put>
   21384:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   21388:	68e0      	ldr	r0, [r4, #12]
   2138a:	b289      	uxth	r1, r1
   2138c:	f7ff f803 	bl	20396 <nrf_modem_os_trace_put>
   21390:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   21394:	68e2      	ldr	r2, [r4, #12]
   21396:	fa12 f383 	uxtah	r3, r2, r3
   2139a:	60a3      	str	r3, [r4, #8]
   2139c:	b002      	add	sp, #8
   2139e:	bd70      	pop	{r4, r5, r6, pc}

000213a0 <rpc_transport_ipc_local_data_free>:
   213a0:	b508      	push	{r3, lr}
   213a2:	f7f4 f997 	bl	156d4 <nrf_modem_os_shm_tx_free>
   213a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   213aa:	f7f4 b957 	b.w	1565c <nrf_modem_os_application_irq_set>

000213ae <rpc_transport_ipc_rx_data_suspend>:
   213ae:	2004      	movs	r0, #4
   213b0:	f7f5 bbb8 	b.w	16b24 <nrfx_ipc_receive_event_disable>

000213b4 <rpc_transport_ipc_rx_data_resume>:
   213b4:	2004      	movs	r0, #4
   213b6:	f7f5 bbad 	b.w	16b14 <nrfx_ipc_receive_event_enable>

000213ba <at_client_evt_handler>:
   213ba:	460a      	mov	r2, r1
   213bc:	b118      	cbz	r0, 213c6 <at_client_evt_handler+0xc>
   213be:	f850 1b08 	ldr.w	r1, [r0], #8
   213c2:	0c09      	lsrs	r1, r1, #16
   213c4:	4710      	bx	r2
   213c6:	4770      	bx	lr

000213c8 <rpc_at_client_request_alloc>:
   213c8:	2300      	movs	r3, #0
   213ca:	b513      	push	{r0, r1, r4, lr}
   213cc:	4604      	mov	r4, r0
   213ce:	aa01      	add	r2, sp, #4
   213d0:	2003      	movs	r0, #3
   213d2:	9301      	str	r3, [sp, #4]
   213d4:	f7ff ff70 	bl	212b8 <rpc_message_alloc>
   213d8:	b918      	cbnz	r0, 213e2 <rpc_at_client_request_alloc+0x1a>
   213da:	9b01      	ldr	r3, [sp, #4]
   213dc:	b10b      	cbz	r3, 213e2 <rpc_at_client_request_alloc+0x1a>
   213de:	3308      	adds	r3, #8
   213e0:	6023      	str	r3, [r4, #0]
   213e2:	b002      	add	sp, #8
   213e4:	bd10      	pop	{r4, pc}

000213e6 <rpc_at_client_request_send>:
   213e6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   213ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   213ee:	4601      	mov	r1, r0
   213f0:	2003      	movs	r0, #3
   213f2:	f841 2d08 	str.w	r2, [r1, #-8]!
   213f6:	f7ff bf55 	b.w	212a4 <rpc_message_send>

000213fa <rpc_at_client_data_free>:
   213fa:	f7ff bf7d 	b.w	212f8 <rpc_message_data_free>

000213fe <ip_client_event_handler>:
   213fe:	f850 1b08 	ldr.w	r1, [r0], #8
   21402:	0c09      	lsrs	r1, r1, #16
   21404:	f7f6 be8a 	b.w	1811c <rpc_ip_event_handler>

00021408 <rpc_ip_client_request_alloc>:
   21408:	2300      	movs	r3, #0
   2140a:	b513      	push	{r0, r1, r4, lr}
   2140c:	4604      	mov	r4, r0
   2140e:	aa01      	add	r2, sp, #4
   21410:	2004      	movs	r0, #4
   21412:	9301      	str	r3, [sp, #4]
   21414:	f7ff ff50 	bl	212b8 <rpc_message_alloc>
   21418:	b918      	cbnz	r0, 21422 <rpc_ip_client_request_alloc+0x1a>
   2141a:	9b01      	ldr	r3, [sp, #4]
   2141c:	b10b      	cbz	r3, 21422 <rpc_ip_client_request_alloc+0x1a>
   2141e:	3308      	adds	r3, #8
   21420:	6023      	str	r3, [r4, #0]
   21422:	b002      	add	sp, #8
   21424:	bd10      	pop	{r4, pc}

00021426 <rpc_ip_client_request_send>:
   21426:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   2142a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   2142e:	4601      	mov	r1, r0
   21430:	2004      	movs	r0, #4
   21432:	f841 2d08 	str.w	r2, [r1, #-8]!
   21436:	f7ff bf35 	b.w	212a4 <rpc_message_send>

0002143a <rpc_ip_client_message_free>:
   2143a:	3808      	subs	r0, #8
   2143c:	f7ff bf5a 	b.w	212f4 <rpc_message_free>

00021440 <rpc_ip_client_data_free>:
   21440:	f7ff bf5a 	b.w	212f8 <rpc_message_data_free>

00021444 <dfu_client_event_handler>:
   21444:	460b      	mov	r3, r1
   21446:	f850 1b08 	ldr.w	r1, [r0], #8
   2144a:	0c09      	lsrs	r1, r1, #16
   2144c:	4718      	bx	r3

0002144e <rpc_dfu_client_request_alloc>:
   2144e:	2300      	movs	r3, #0
   21450:	b513      	push	{r0, r1, r4, lr}
   21452:	4604      	mov	r4, r0
   21454:	aa01      	add	r2, sp, #4
   21456:	2006      	movs	r0, #6
   21458:	9301      	str	r3, [sp, #4]
   2145a:	f7ff ff2d 	bl	212b8 <rpc_message_alloc>
   2145e:	b918      	cbnz	r0, 21468 <rpc_dfu_client_request_alloc+0x1a>
   21460:	9b01      	ldr	r3, [sp, #4]
   21462:	b10b      	cbz	r3, 21468 <rpc_dfu_client_request_alloc+0x1a>
   21464:	3308      	adds	r3, #8
   21466:	6023      	str	r3, [r4, #0]
   21468:	b002      	add	sp, #8
   2146a:	bd10      	pop	{r4, pc}

0002146c <rpc_dfu_client_request_send>:
   2146c:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   21470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   21474:	4601      	mov	r1, r0
   21476:	2006      	movs	r0, #6
   21478:	f841 2d08 	str.w	r2, [r1, #-8]!
   2147c:	f7ff bf12 	b.w	212a4 <rpc_message_send>

00021480 <rpc_dfu_client_message_free>:
   21480:	3808      	subs	r0, #8
   21482:	f7ff bf37 	b.w	212f4 <rpc_message_free>

00021486 <rpc_dfu_client_data_free>:
   21486:	f7ff bf37 	b.w	212f8 <rpc_message_data_free>

0002148a <rpc_gnss_client_request_alloc>:
   2148a:	2300      	movs	r3, #0
   2148c:	b513      	push	{r0, r1, r4, lr}
   2148e:	4604      	mov	r4, r0
   21490:	aa01      	add	r2, sp, #4
   21492:	2007      	movs	r0, #7
   21494:	9301      	str	r3, [sp, #4]
   21496:	f7ff ff0f 	bl	212b8 <rpc_message_alloc>
   2149a:	b918      	cbnz	r0, 214a4 <rpc_gnss_client_request_alloc+0x1a>
   2149c:	9b01      	ldr	r3, [sp, #4]
   2149e:	b10b      	cbz	r3, 214a4 <rpc_gnss_client_request_alloc+0x1a>
   214a0:	3308      	adds	r3, #8
   214a2:	6023      	str	r3, [r4, #0]
   214a4:	b002      	add	sp, #8
   214a6:	bd10      	pop	{r4, pc}

000214a8 <rpc_gnss_client_request_send>:
   214a8:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   214ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   214b0:	4601      	mov	r1, r0
   214b2:	2007      	movs	r0, #7
   214b4:	f841 2d08 	str.w	r2, [r1, #-8]!
   214b8:	f7ff bef4 	b.w	212a4 <rpc_message_send>

000214bc <rpc_gnss_client_message_free>:
   214bc:	3808      	subs	r0, #8
   214be:	f7ff bf19 	b.w	212f4 <rpc_message_free>

000214c2 <rpc_gnss_client_data_free>:
   214c2:	f7ff bf19 	b.w	212f8 <rpc_message_data_free>

000214c6 <rpc_gnss_serialize_utc>:
   214c6:	b1c0      	cbz	r0, 214fa <rpc_gnss_serialize_utc+0x34>
   214c8:	b1b9      	cbz	r1, 214fa <rpc_gnss_serialize_utc+0x34>
   214ca:	2301      	movs	r3, #1
   214cc:	700b      	strb	r3, [r1, #0]
   214ce:	2300      	movs	r3, #0
   214d0:	704b      	strb	r3, [r1, #1]
   214d2:	6843      	ldr	r3, [r0, #4]
   214d4:	f8c1 3006 	str.w	r3, [r1, #6]
   214d8:	6803      	ldr	r3, [r0, #0]
   214da:	f8c1 3002 	str.w	r3, [r1, #2]
   214de:	7a83      	ldrb	r3, [r0, #10]
   214e0:	730b      	strb	r3, [r1, #12]
   214e2:	7b43      	ldrb	r3, [r0, #13]
   214e4:	73cb      	strb	r3, [r1, #15]
   214e6:	7b03      	ldrb	r3, [r0, #12]
   214e8:	738b      	strb	r3, [r1, #14]
   214ea:	7a03      	ldrb	r3, [r0, #8]
   214ec:	728b      	strb	r3, [r1, #10]
   214ee:	7ac3      	ldrb	r3, [r0, #11]
   214f0:	734b      	strb	r3, [r1, #13]
   214f2:	7a43      	ldrb	r3, [r0, #9]
   214f4:	2010      	movs	r0, #16
   214f6:	72cb      	strb	r3, [r1, #11]
   214f8:	4770      	bx	lr
   214fa:	f04f 30ff 	mov.w	r0, #4294967295
   214fe:	4770      	bx	lr

00021500 <rpc_gnss_serialize_ephe>:
   21500:	2800      	cmp	r0, #0
   21502:	d044      	beq.n	2158e <rpc_gnss_serialize_ephe+0x8e>
   21504:	2900      	cmp	r1, #0
   21506:	d042      	beq.n	2158e <rpc_gnss_serialize_ephe+0x8e>
   21508:	2302      	movs	r3, #2
   2150a:	700b      	strb	r3, [r1, #0]
   2150c:	2300      	movs	r3, #0
   2150e:	704b      	strb	r3, [r1, #1]
   21510:	68c3      	ldr	r3, [r0, #12]
   21512:	f8c1 300b 	str.w	r3, [r1, #11]
   21516:	8903      	ldrh	r3, [r0, #8]
   21518:	f8a1 3009 	strh.w	r3, [r1, #9]
   2151c:	7983      	ldrb	r3, [r0, #6]
   2151e:	720b      	strb	r3, [r1, #8]
   21520:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   21524:	878b      	strh	r3, [r1, #60]	; 0x3c
   21526:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   21528:	86cb      	strh	r3, [r1, #54]	; 0x36
   2152a:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   2152e:	874b      	strh	r3, [r1, #58]	; 0x3a
   21530:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   21532:	868b      	strh	r3, [r1, #52]	; 0x34
   21534:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   21538:	87cb      	strh	r3, [r1, #62]	; 0x3e
   2153a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   2153e:	870b      	strh	r3, [r1, #56]	; 0x38
   21540:	8b83      	ldrh	r3, [r0, #28]
   21542:	830b      	strh	r3, [r1, #24]
   21544:	6a83      	ldr	r3, [r0, #40]	; 0x28
   21546:	f8c1 3022 	str.w	r3, [r1, #34]	; 0x22
   2154a:	7c83      	ldrb	r3, [r0, #18]
   2154c:	744b      	strb	r3, [r1, #17]
   2154e:	7843      	ldrb	r3, [r0, #1]
   21550:	70cb      	strb	r3, [r1, #3]
   21552:	6b43      	ldr	r3, [r0, #52]	; 0x34
   21554:	62cb      	str	r3, [r1, #44]	; 0x2c
   21556:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   21558:	84cb      	strh	r3, [r1, #38]	; 0x26
   2155a:	8843      	ldrh	r3, [r0, #2]
   2155c:	808b      	strh	r3, [r1, #4]
   2155e:	6a03      	ldr	r3, [r0, #32]
   21560:	f8c1 301a 	str.w	r3, [r1, #26]
   21564:	6b83      	ldr	r3, [r0, #56]	; 0x38
   21566:	630b      	str	r3, [r1, #48]	; 0x30
   21568:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2156a:	f8c1 301e 	str.w	r3, [r1, #30]
   2156e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   21570:	628b      	str	r3, [r1, #40]	; 0x28
   21572:	7803      	ldrb	r3, [r0, #0]
   21574:	708b      	strb	r3, [r1, #2]
   21576:	7c03      	ldrb	r3, [r0, #16]
   21578:	73cb      	strb	r3, [r1, #15]
   2157a:	8883      	ldrh	r3, [r0, #4]
   2157c:	80cb      	strh	r3, [r1, #6]
   2157e:	8a83      	ldrh	r3, [r0, #20]
   21580:	824b      	strh	r3, [r1, #18]
   21582:	7c43      	ldrb	r3, [r0, #17]
   21584:	740b      	strb	r3, [r1, #16]
   21586:	6983      	ldr	r3, [r0, #24]
   21588:	2040      	movs	r0, #64	; 0x40
   2158a:	614b      	str	r3, [r1, #20]
   2158c:	4770      	bx	lr
   2158e:	f04f 30ff 	mov.w	r0, #4294967295
   21592:	4770      	bx	lr

00021594 <rpc_gnss_serialize_alm>:
   21594:	b340      	cbz	r0, 215e8 <rpc_gnss_serialize_alm+0x54>
   21596:	b339      	cbz	r1, 215e8 <rpc_gnss_serialize_alm+0x54>
   21598:	2303      	movs	r3, #3
   2159a:	700b      	strb	r3, [r1, #0]
   2159c:	2300      	movs	r3, #0
   2159e:	704b      	strb	r3, [r1, #1]
   215a0:	8b83      	ldrh	r3, [r0, #28]
   215a2:	f8a1 301d 	strh.w	r3, [r1, #29]
   215a6:	8bc3      	ldrh	r3, [r0, #30]
   215a8:	f8a1 301f 	strh.w	r3, [r1, #31]
   215ac:	88c3      	ldrh	r3, [r0, #6]
   215ae:	810b      	strh	r3, [r1, #8]
   215b0:	8883      	ldrh	r3, [r0, #4]
   215b2:	80cb      	strh	r3, [r1, #6]
   215b4:	78c3      	ldrb	r3, [r0, #3]
   215b6:	714b      	strb	r3, [r1, #5]
   215b8:	6983      	ldr	r3, [r0, #24]
   215ba:	f8c1 3019 	str.w	r3, [r1, #25]
   215be:	6903      	ldr	r3, [r0, #16]
   215c0:	f8c1 3011 	str.w	r3, [r1, #17]
   215c4:	8903      	ldrh	r3, [r0, #8]
   215c6:	814b      	strh	r3, [r1, #10]
   215c8:	68c3      	ldr	r3, [r0, #12]
   215ca:	f8c1 300d 	str.w	r3, [r1, #13]
   215ce:	7a83      	ldrb	r3, [r0, #10]
   215d0:	730b      	strb	r3, [r1, #12]
   215d2:	7803      	ldrb	r3, [r0, #0]
   215d4:	708b      	strb	r3, [r1, #2]
   215d6:	7883      	ldrb	r3, [r0, #2]
   215d8:	710b      	strb	r3, [r1, #4]
   215da:	6943      	ldr	r3, [r0, #20]
   215dc:	f8c1 3015 	str.w	r3, [r1, #21]
   215e0:	7843      	ldrb	r3, [r0, #1]
   215e2:	2021      	movs	r0, #33	; 0x21
   215e4:	70cb      	strb	r3, [r1, #3]
   215e6:	4770      	bx	lr
   215e8:	f04f 30ff 	mov.w	r0, #4294967295
   215ec:	4770      	bx	lr

000215ee <rpc_gnss_serialize_klob>:
   215ee:	b1b0      	cbz	r0, 2161e <rpc_gnss_serialize_klob+0x30>
   215f0:	b1a9      	cbz	r1, 2161e <rpc_gnss_serialize_klob+0x30>
   215f2:	2304      	movs	r3, #4
   215f4:	700b      	strb	r3, [r1, #0]
   215f6:	2300      	movs	r3, #0
   215f8:	704b      	strb	r3, [r1, #1]
   215fa:	7803      	ldrb	r3, [r0, #0]
   215fc:	708b      	strb	r3, [r1, #2]
   215fe:	7843      	ldrb	r3, [r0, #1]
   21600:	70cb      	strb	r3, [r1, #3]
   21602:	7883      	ldrb	r3, [r0, #2]
   21604:	710b      	strb	r3, [r1, #4]
   21606:	78c3      	ldrb	r3, [r0, #3]
   21608:	714b      	strb	r3, [r1, #5]
   2160a:	7903      	ldrb	r3, [r0, #4]
   2160c:	718b      	strb	r3, [r1, #6]
   2160e:	7943      	ldrb	r3, [r0, #5]
   21610:	71cb      	strb	r3, [r1, #7]
   21612:	7983      	ldrb	r3, [r0, #6]
   21614:	720b      	strb	r3, [r1, #8]
   21616:	79c3      	ldrb	r3, [r0, #7]
   21618:	200a      	movs	r0, #10
   2161a:	724b      	strb	r3, [r1, #9]
   2161c:	4770      	bx	lr
   2161e:	f04f 30ff 	mov.w	r0, #4294967295
   21622:	4770      	bx	lr

00021624 <rpc_gnss_serialize_nequick>:
   21624:	b180      	cbz	r0, 21648 <rpc_gnss_serialize_nequick+0x24>
   21626:	b179      	cbz	r1, 21648 <rpc_gnss_serialize_nequick+0x24>
   21628:	2305      	movs	r3, #5
   2162a:	700b      	strb	r3, [r1, #0]
   2162c:	2300      	movs	r3, #0
   2162e:	704b      	strb	r3, [r1, #1]
   21630:	8803      	ldrh	r3, [r0, #0]
   21632:	804b      	strh	r3, [r1, #2]
   21634:	8843      	ldrh	r3, [r0, #2]
   21636:	808b      	strh	r3, [r1, #4]
   21638:	8883      	ldrh	r3, [r0, #4]
   2163a:	80cb      	strh	r3, [r1, #6]
   2163c:	7983      	ldrb	r3, [r0, #6]
   2163e:	720b      	strb	r3, [r1, #8]
   21640:	79c3      	ldrb	r3, [r0, #7]
   21642:	200a      	movs	r0, #10
   21644:	724b      	strb	r3, [r1, #9]
   21646:	4770      	bx	lr
   21648:	f04f 30ff 	mov.w	r0, #4294967295
   2164c:	4770      	bx	lr

0002164e <rpc_gnss_serialize_time_and_sv_tow>:
   2164e:	b570      	push	{r4, r5, r6, lr}
   21650:	b1e8      	cbz	r0, 2168e <rpc_gnss_serialize_time_and_sv_tow+0x40>
   21652:	b1e1      	cbz	r1, 2168e <rpc_gnss_serialize_time_and_sv_tow+0x40>
   21654:	2206      	movs	r2, #6
   21656:	2300      	movs	r3, #0
   21658:	700a      	strb	r2, [r1, #0]
   2165a:	8802      	ldrh	r2, [r0, #0]
   2165c:	704b      	strb	r3, [r1, #1]
   2165e:	804a      	strh	r2, [r1, #2]
   21660:	68c2      	ldr	r2, [r0, #12]
   21662:	f101 0410 	add.w	r4, r1, #16
   21666:	f8c1 200a 	str.w	r2, [r1, #10]
   2166a:	8902      	ldrh	r2, [r0, #8]
   2166c:	810a      	strh	r2, [r1, #8]
   2166e:	6842      	ldr	r2, [r0, #4]
   21670:	604a      	str	r2, [r1, #4]
   21672:	8a06      	ldrh	r6, [r0, #16]
   21674:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   21678:	188d      	adds	r5, r1, r2
   2167a:	81ee      	strh	r6, [r5, #14]
   2167c:	7c85      	ldrb	r5, [r0, #18]
   2167e:	3301      	adds	r3, #1
   21680:	2b20      	cmp	r3, #32
   21682:	54a5      	strb	r5, [r4, r2]
   21684:	f100 0004 	add.w	r0, r0, #4
   21688:	d1f3      	bne.n	21672 <rpc_gnss_serialize_time_and_sv_tow+0x24>
   2168a:	206e      	movs	r0, #110	; 0x6e
   2168c:	bd70      	pop	{r4, r5, r6, pc}
   2168e:	f04f 30ff 	mov.w	r0, #4294967295
   21692:	e7fb      	b.n	2168c <rpc_gnss_serialize_time_and_sv_tow+0x3e>

00021694 <rpc_gnss_serialize_location>:
   21694:	b1c0      	cbz	r0, 216c8 <rpc_gnss_serialize_location+0x34>
   21696:	b1b9      	cbz	r1, 216c8 <rpc_gnss_serialize_location+0x34>
   21698:	2307      	movs	r3, #7
   2169a:	700b      	strb	r3, [r1, #0]
   2169c:	2300      	movs	r3, #0
   2169e:	704b      	strb	r3, [r1, #1]
   216a0:	8903      	ldrh	r3, [r0, #8]
   216a2:	814b      	strh	r3, [r1, #10]
   216a4:	7b83      	ldrb	r3, [r0, #14]
   216a6:	740b      	strb	r3, [r1, #16]
   216a8:	6803      	ldr	r3, [r0, #0]
   216aa:	f8c1 3002 	str.w	r3, [r1, #2]
   216ae:	6843      	ldr	r3, [r0, #4]
   216b0:	f8c1 3006 	str.w	r3, [r1, #6]
   216b4:	7b03      	ldrb	r3, [r0, #12]
   216b6:	738b      	strb	r3, [r1, #14]
   216b8:	7b43      	ldrb	r3, [r0, #13]
   216ba:	73cb      	strb	r3, [r1, #15]
   216bc:	7a83      	ldrb	r3, [r0, #10]
   216be:	730b      	strb	r3, [r1, #12]
   216c0:	7ac3      	ldrb	r3, [r0, #11]
   216c2:	2011      	movs	r0, #17
   216c4:	734b      	strb	r3, [r1, #13]
   216c6:	4770      	bx	lr
   216c8:	f04f 30ff 	mov.w	r0, #4294967295
   216cc:	4770      	bx	lr

000216ce <rpc_gnss_serialize_integrity>:
   216ce:	b148      	cbz	r0, 216e4 <rpc_gnss_serialize_integrity+0x16>
   216d0:	b141      	cbz	r1, 216e4 <rpc_gnss_serialize_integrity+0x16>
   216d2:	2308      	movs	r3, #8
   216d4:	700b      	strb	r3, [r1, #0]
   216d6:	2300      	movs	r3, #0
   216d8:	704b      	strb	r3, [r1, #1]
   216da:	6803      	ldr	r3, [r0, #0]
   216dc:	2006      	movs	r0, #6
   216de:	f8c1 3002 	str.w	r3, [r1, #2]
   216e2:	4770      	bx	lr
   216e4:	f04f 30ff 	mov.w	r0, #4294967295
   216e8:	4770      	bx	lr

000216ea <packet_handler_alloc_and_init>:
   216ea:	b538      	push	{r3, r4, r5, lr}
   216ec:	4604      	mov	r4, r0
   216ee:	4608      	mov	r0, r1
   216f0:	4611      	mov	r1, r2
   216f2:	4622      	mov	r2, r4
   216f4:	f7f9 fa9c 	bl	1ac30 <packet_handler_create>
   216f8:	61e0      	str	r0, [r4, #28]
   216fa:	b158      	cbz	r0, 21714 <packet_handler_alloc_and_init+0x2a>
   216fc:	6803      	ldr	r3, [r0, #0]
   216fe:	681b      	ldr	r3, [r3, #0]
   21700:	4798      	blx	r3
   21702:	4605      	mov	r5, r0
   21704:	b120      	cbz	r0, 21710 <packet_handler_alloc_and_init+0x26>
   21706:	69e0      	ldr	r0, [r4, #28]
   21708:	f000 fe4b 	bl	223a2 <packet_handler_delete>
   2170c:	2300      	movs	r3, #0
   2170e:	61e3      	str	r3, [r4, #28]
   21710:	4628      	mov	r0, r5
   21712:	bd38      	pop	{r3, r4, r5, pc}
   21714:	250c      	movs	r5, #12
   21716:	e7fb      	b.n	21710 <packet_handler_alloc_and_init+0x26>

00021718 <socket_free>:
   21718:	b510      	push	{r4, lr}
   2171a:	4604      	mov	r4, r0
   2171c:	69c0      	ldr	r0, [r0, #28]
   2171e:	b108      	cbz	r0, 21724 <socket_free+0xc>
   21720:	f000 fe3f 	bl	223a2 <packet_handler_delete>
   21724:	4620      	mov	r0, r4
   21726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2172a:	222c      	movs	r2, #44	; 0x2c
   2172c:	2100      	movs	r1, #0
   2172e:	f001 bc42 	b.w	22fb6 <memset>

00021732 <interface_socket_event_get>:
   21732:	b510      	push	{r4, lr}
   21734:	4604      	mov	r4, r0
   21736:	b189      	cbz	r1, 2175c <interface_socket_event_get+0x2a>
   21738:	f7f5 fe6c 	bl	17414 <interface_socket_from_handle_get>
   2173c:	b158      	cbz	r0, 21756 <interface_socket_event_get+0x24>
   2173e:	6803      	ldr	r3, [r0, #0]
   21740:	0c1b      	lsrs	r3, r3, #16
   21742:	f003 020a 	and.w	r2, r3, #10
   21746:	2a0a      	cmp	r2, #10
   21748:	bf14      	ite	ne
   2174a:	f003 030f 	andne.w	r3, r3, #15
   2174e:	f003 030d 	andeq.w	r3, r3, #13
   21752:	600b      	str	r3, [r1, #0]
   21754:	e002      	b.n	2175c <interface_socket_event_get+0x2a>
   21756:	2c00      	cmp	r4, #0
   21758:	da01      	bge.n	2175e <interface_socket_event_get+0x2c>
   2175a:	6008      	str	r0, [r1, #0]
   2175c:	bd10      	pop	{r4, pc}
   2175e:	2310      	movs	r3, #16
   21760:	e7f7      	b.n	21752 <interface_socket_event_get+0x20>

00021762 <ip_recvd_packet_free_cb>:
   21762:	b510      	push	{r4, lr}
   21764:	4604      	mov	r4, r0
   21766:	6800      	ldr	r0, [r0, #0]
   21768:	f7ff fe6a 	bl	21440 <rpc_ip_client_data_free>
   2176c:	68a0      	ldr	r0, [r4, #8]
   2176e:	b118      	cbz	r0, 21778 <ip_recvd_packet_free_cb+0x16>
   21770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21774:	f7f3 bf9c 	b.w	156b0 <nrf_modem_os_free>
   21778:	bd10      	pop	{r4, pc}

0002177a <protocol_verify>:
   2177a:	b508      	push	{r3, lr}
   2177c:	4603      	mov	r3, r0
   2177e:	b171      	cbz	r1, 2179e <protocol_verify+0x24>
   21780:	2801      	cmp	r0, #1
   21782:	d108      	bne.n	21796 <protocol_verify+0x1c>
   21784:	2901      	cmp	r1, #1
   21786:	d014      	beq.n	217b2 <protocol_verify+0x38>
   21788:	2029      	movs	r0, #41	; 0x29
   2178a:	f7f3 fdf9 	bl	15380 <nrf_modem_os_errno_set>
   2178e:	f04f 31ff 	mov.w	r1, #4294967295
   21792:	4608      	mov	r0, r1
   21794:	bd08      	pop	{r3, pc}
   21796:	2802      	cmp	r0, #2
   21798:	d10b      	bne.n	217b2 <protocol_verify+0x38>
   2179a:	2902      	cmp	r1, #2
   2179c:	e7f3      	b.n	21786 <protocol_verify+0xc>
   2179e:	2801      	cmp	r0, #1
   217a0:	d101      	bne.n	217a6 <protocol_verify+0x2c>
   217a2:	6013      	str	r3, [r2, #0]
   217a4:	e7f5      	b.n	21792 <protocol_verify+0x18>
   217a6:	2803      	cmp	r0, #3
   217a8:	d101      	bne.n	217ae <protocol_verify+0x34>
   217aa:	6011      	str	r1, [r2, #0]
   217ac:	e7f1      	b.n	21792 <protocol_verify+0x18>
   217ae:	2302      	movs	r3, #2
   217b0:	e7f7      	b.n	217a2 <protocol_verify+0x28>
   217b2:	2100      	movs	r1, #0
   217b4:	e7ed      	b.n	21792 <protocol_verify+0x18>

000217b6 <ip_addr_parse>:
   217b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   217b8:	684d      	ldr	r5, [r1, #4]
   217ba:	e9dd 7606 	ldrd	r7, r6, [sp, #24]
   217be:	4285      	cmp	r5, r0
   217c0:	d11a      	bne.n	217f8 <ip_addr_parse+0x42>
   217c2:	780c      	ldrb	r4, [r1, #0]
   217c4:	4294      	cmp	r4, r2
   217c6:	d119      	bne.n	217fc <ip_addr_parse+0x46>
   217c8:	2d02      	cmp	r5, #2
   217ca:	d10b      	bne.n	217e4 <ip_addr_parse+0x2e>
   217cc:	2c10      	cmp	r4, #16
   217ce:	d115      	bne.n	217fc <ip_addr_parse+0x46>
   217d0:	890a      	ldrh	r2, [r1, #8]
   217d2:	310c      	adds	r1, #12
   217d4:	803a      	strh	r2, [r7, #0]
   217d6:	2204      	movs	r2, #4
   217d8:	801a      	strh	r2, [r3, #0]
   217da:	4630      	mov	r0, r6
   217dc:	f001 fbcb 	bl	22f76 <memcpy>
   217e0:	2000      	movs	r0, #0
   217e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   217e4:	2d0a      	cmp	r5, #10
   217e6:	d109      	bne.n	217fc <ip_addr_parse+0x46>
   217e8:	2c24      	cmp	r4, #36	; 0x24
   217ea:	d107      	bne.n	217fc <ip_addr_parse+0x46>
   217ec:	890a      	ldrh	r2, [r1, #8]
   217ee:	803a      	strh	r2, [r7, #0]
   217f0:	2210      	movs	r2, #16
   217f2:	801a      	strh	r2, [r3, #0]
   217f4:	4411      	add	r1, r2
   217f6:	e7f0      	b.n	217da <ip_addr_parse+0x24>
   217f8:	202f      	movs	r0, #47	; 0x2f
   217fa:	e7f2      	b.n	217e2 <ip_addr_parse+0x2c>
   217fc:	2016      	movs	r0, #22
   217fe:	e7f0      	b.n	217e2 <ip_addr_parse+0x2c>

00021800 <ip_interface_request_create>:
   21800:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21802:	4614      	mov	r4, r2
   21804:	2200      	movs	r2, #0
   21806:	4606      	mov	r6, r0
   21808:	460d      	mov	r5, r1
   2180a:	a801      	add	r0, sp, #4
   2180c:	4619      	mov	r1, r3
   2180e:	9201      	str	r2, [sp, #4]
   21810:	f7ff fdfa 	bl	21408 <rpc_ip_client_request_alloc>
   21814:	9b01      	ldr	r3, [sp, #4]
   21816:	b940      	cbnz	r0, 2182a <ip_interface_request_create+0x2a>
   21818:	2208      	movs	r2, #8
   2181a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   2181e:	60dc      	str	r4, [r3, #12]
   21820:	611d      	str	r5, [r3, #16]
   21822:	721a      	strb	r2, [r3, #8]
   21824:	7258      	strb	r0, [r3, #9]
   21826:	7298      	strb	r0, [r3, #10]
   21828:	72d8      	strb	r0, [r3, #11]
   2182a:	4618      	mov	r0, r3
   2182c:	b002      	add	sp, #8
   2182e:	bd70      	pop	{r4, r5, r6, pc}

00021830 <ip_interface_wait>:
   21830:	b538      	push	{r3, r4, r5, lr}
   21832:	4605      	mov	r5, r0
   21834:	f7f5 fdb0 	bl	17398 <interface_socket_wait>
   21838:	4604      	mov	r4, r0
   2183a:	b938      	cbnz	r0, 2184c <ip_interface_wait+0x1c>
   2183c:	4628      	mov	r0, r5
   2183e:	f7f5 fde9 	bl	17414 <interface_socket_from_handle_get>
   21842:	b118      	cbz	r0, 2184c <ip_interface_wait+0x1c>
   21844:	6844      	ldr	r4, [r0, #4]
   21846:	b10c      	cbz	r4, 2184c <ip_interface_wait+0x1c>
   21848:	2300      	movs	r3, #0
   2184a:	6043      	str	r3, [r0, #4]
   2184c:	4620      	mov	r0, r4
   2184e:	bd38      	pop	{r3, r4, r5, pc}

00021850 <ip_interface_recvfrom>:
   21850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21854:	b087      	sub	sp, #28
   21856:	4681      	mov	r9, r0
   21858:	461e      	mov	r6, r3
   2185a:	4690      	mov	r8, r2
   2185c:	9f11      	ldr	r7, [sp, #68]	; 0x44
   2185e:	9101      	str	r1, [sp, #4]
   21860:	2a00      	cmp	r2, #0
   21862:	f000 80e3 	beq.w	21a2c <ip_interface_recvfrom+0x1dc>
   21866:	b11b      	cbz	r3, 21870 <ip_interface_recvfrom+0x20>
   21868:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   2186c:	f000 80e0 	beq.w	21a30 <ip_interface_recvfrom+0x1e0>
   21870:	4648      	mov	r0, r9
   21872:	f7f5 fdcf 	bl	17414 <interface_socket_from_handle_get>
   21876:	4604      	mov	r4, r0
   21878:	2800      	cmp	r0, #0
   2187a:	f000 80db 	beq.w	21a34 <ip_interface_recvfrom+0x1e4>
   2187e:	6803      	ldr	r3, [r0, #0]
   21880:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
   21884:	d10f      	bne.n	218a6 <ip_interface_recvfrom+0x56>
   21886:	6802      	ldr	r2, [r0, #0]
   21888:	b292      	uxth	r2, r2
   2188a:	2a06      	cmp	r2, #6
   2188c:	f000 8094 	beq.w	219b8 <ip_interface_recvfrom+0x168>
   21890:	6802      	ldr	r2, [r0, #0]
   21892:	461e      	mov	r6, r3
   21894:	b292      	uxth	r2, r2
   21896:	2a07      	cmp	r2, #7
   21898:	469a      	mov	sl, r3
   2189a:	f000 808f 	beq.w	219bc <ip_interface_recvfrom+0x16c>
   2189e:	2239      	movs	r2, #57	; 0x39
   218a0:	f04f 35ff 	mov.w	r5, #4294967295
   218a4:	e07a      	b.n	2199c <ip_interface_recvfrom+0x14c>
   218a6:	07b1      	lsls	r1, r6, #30
   218a8:	d422      	bmi.n	218f0 <ip_interface_recvfrom+0xa0>
   218aa:	6803      	ldr	r3, [r0, #0]
   218ac:	00da      	lsls	r2, r3, #3
   218ae:	d522      	bpl.n	218f6 <ip_interface_recvfrom+0xa6>
   218b0:	f3c6 1a00 	ubfx	sl, r6, #4, #1
   218b4:	f04f 35ff 	mov.w	r5, #4294967295
   218b8:	f006 0b10 	and.w	fp, r6, #16
   218bc:	6822      	ldr	r2, [r4, #0]
   218be:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
   218c2:	d01b      	beq.n	218fc <ip_interface_recvfrom+0xac>
   218c4:	6822      	ldr	r2, [r4, #0]
   218c6:	69e0      	ldr	r0, [r4, #28]
   218c8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   218cc:	6022      	str	r2, [r4, #0]
   218ce:	6802      	ldr	r2, [r0, #0]
   218d0:	68d2      	ldr	r2, [r2, #12]
   218d2:	4790      	blx	r2
   218d4:	1c43      	adds	r3, r0, #1
   218d6:	4605      	mov	r5, r0
   218d8:	d029      	beq.n	2192e <ip_interface_recvfrom+0xde>
   218da:	4580      	cmp	r8, r0
   218dc:	dd05      	ble.n	218ea <ip_interface_recvfrom+0x9a>
   218de:	6923      	ldr	r3, [r4, #16]
   218e0:	2b01      	cmp	r3, #1
   218e2:	d102      	bne.n	218ea <ip_interface_recvfrom+0x9a>
   218e4:	f1bb 0f00 	cmp.w	fp, #0
   218e8:	d125      	bne.n	21936 <ip_interface_recvfrom+0xe6>
   218ea:	f04f 0a00 	mov.w	sl, #0
   218ee:	e040      	b.n	21972 <ip_interface_recvfrom+0x122>
   218f0:	f04f 0a00 	mov.w	sl, #0
   218f4:	e7de      	b.n	218b4 <ip_interface_recvfrom+0x64>
   218f6:	f04f 0a01 	mov.w	sl, #1
   218fa:	e7db      	b.n	218b4 <ip_interface_recvfrom+0x64>
   218fc:	6821      	ldr	r1, [r4, #0]
   218fe:	0308      	lsls	r0, r1, #12
   21900:	d515      	bpl.n	2192e <ip_interface_recvfrom+0xde>
   21902:	6821      	ldr	r1, [r4, #0]
   21904:	b289      	uxth	r1, r1
   21906:	290d      	cmp	r1, #13
   21908:	d011      	beq.n	2192e <ip_interface_recvfrom+0xde>
   2190a:	6923      	ldr	r3, [r4, #16]
   2190c:	2b01      	cmp	r3, #1
   2190e:	f000 8099 	beq.w	21a44 <ip_interface_recvfrom+0x1f4>
   21912:	4692      	mov	sl, r2
   21914:	2239      	movs	r2, #57	; 0x39
   21916:	6823      	ldr	r3, [r4, #0]
   21918:	0c1b      	lsrs	r3, r3, #16
   2191a:	041b      	lsls	r3, r3, #16
   2191c:	f043 030d 	orr.w	r3, r3, #13
   21920:	6023      	str	r3, [r4, #0]
   21922:	6823      	ldr	r3, [r4, #0]
   21924:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   21928:	6023      	str	r3, [r4, #0]
   2192a:	2600      	movs	r6, #0
   2192c:	e036      	b.n	2199c <ip_interface_recvfrom+0x14c>
   2192e:	f1ba 0f00 	cmp.w	sl, #0
   21932:	f000 8088 	beq.w	21a46 <ip_interface_recvfrom+0x1f6>
   21936:	6a23      	ldr	r3, [r4, #32]
   21938:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2193c:	2b00      	cmp	r3, #0
   2193e:	bf08      	it	eq
   21940:	f04f 33ff 	moveq.w	r3, #4294967295
   21944:	4611      	mov	r1, r2
   21946:	9302      	str	r3, [sp, #8]
   21948:	4648      	mov	r0, r9
   2194a:	ab02      	add	r3, sp, #8
   2194c:	f7ff ff70 	bl	21830 <ip_interface_wait>
   21950:	4602      	mov	r2, r0
   21952:	2800      	cmp	r0, #0
   21954:	d070      	beq.n	21a38 <ip_interface_recvfrom+0x1e8>
   21956:	6823      	ldr	r3, [r4, #0]
   21958:	f413 2300 	ands.w	r3, r3, #524288	; 0x80000
   2195c:	d06f      	beq.n	21a3e <ip_interface_recvfrom+0x1ee>
   2195e:	6823      	ldr	r3, [r4, #0]
   21960:	b29b      	uxth	r3, r3
   21962:	2b0d      	cmp	r3, #13
   21964:	d06b      	beq.n	21a3e <ip_interface_recvfrom+0x1ee>
   21966:	6923      	ldr	r3, [r4, #16]
   21968:	1e59      	subs	r1, r3, #1
   2196a:	f1d1 0a00 	rsbs	sl, r1, #0
   2196e:	eb4a 0a01 	adc.w	sl, sl, r1
   21972:	b107      	cbz	r7, 21976 <ip_interface_recvfrom+0x126>
   21974:	683f      	ldr	r7, [r7, #0]
   21976:	9a10      	ldr	r2, [sp, #64]	; 0x40
   21978:	69e0      	ldr	r0, [r4, #28]
   2197a:	e9cd 2704 	strd	r2, r7, [sp, #16]
   2197e:	9b01      	ldr	r3, [sp, #4]
   21980:	6802      	ldr	r2, [r0, #0]
   21982:	e9cd 3802 	strd	r3, r8, [sp, #8]
   21986:	6895      	ldr	r5, [r2, #8]
   21988:	a902      	add	r1, sp, #8
   2198a:	4632      	mov	r2, r6
   2198c:	47a8      	blx	r5
   2198e:	1c42      	adds	r2, r0, #1
   21990:	4605      	mov	r5, r0
   21992:	bf0b      	itete	eq
   21994:	2600      	moveq	r6, #0
   21996:	2601      	movne	r6, #1
   21998:	2223      	moveq	r2, #35	; 0x23
   2199a:	2200      	movne	r2, #0
   2199c:	69e0      	ldr	r0, [r4, #28]
   2199e:	9201      	str	r2, [sp, #4]
   219a0:	6801      	ldr	r1, [r0, #0]
   219a2:	68c9      	ldr	r1, [r1, #12]
   219a4:	4788      	blx	r1
   219a6:	3001      	adds	r0, #1
   219a8:	9a01      	ldr	r2, [sp, #4]
   219aa:	d009      	beq.n	219c0 <ip_interface_recvfrom+0x170>
   219ac:	6823      	ldr	r3, [r4, #0]
   219ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   219b2:	6023      	str	r3, [r4, #0]
   219b4:	b1a2      	cbz	r2, 219e0 <ip_interface_recvfrom+0x190>
   219b6:	e028      	b.n	21a0a <ip_interface_recvfrom+0x1ba>
   219b8:	461e      	mov	r6, r3
   219ba:	469a      	mov	sl, r3
   219bc:	2209      	movs	r2, #9
   219be:	e76f      	b.n	218a0 <ip_interface_recvfrom+0x50>
   219c0:	f1ba 0f00 	cmp.w	sl, #0
   219c4:	d010      	beq.n	219e8 <ip_interface_recvfrom+0x198>
   219c6:	2e00      	cmp	r6, #0
   219c8:	d1f4      	bne.n	219b4 <ip_interface_recvfrom+0x164>
   219ca:	4635      	mov	r5, r6
   219cc:	6823      	ldr	r3, [r4, #0]
   219ce:	0c1b      	lsrs	r3, r3, #16
   219d0:	041b      	lsls	r3, r3, #16
   219d2:	f043 030d 	orr.w	r3, r3, #13
   219d6:	6023      	str	r3, [r4, #0]
   219d8:	6823      	ldr	r3, [r4, #0]
   219da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   219de:	6023      	str	r3, [r4, #0]
   219e0:	4628      	mov	r0, r5
   219e2:	b007      	add	sp, #28
   219e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   219e8:	2e00      	cmp	r6, #0
   219ea:	d1e3      	bne.n	219b4 <ip_interface_recvfrom+0x164>
   219ec:	6823      	ldr	r3, [r4, #0]
   219ee:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   219f2:	6823      	ldr	r3, [r4, #0]
   219f4:	d00f      	beq.n	21a16 <ip_interface_recvfrom+0x1c6>
   219f6:	2269      	movs	r2, #105	; 0x69
   219f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   219fc:	6023      	str	r3, [r4, #0]
   219fe:	6823      	ldr	r3, [r4, #0]
   21a00:	0c1b      	lsrs	r3, r3, #16
   21a02:	041b      	lsls	r3, r3, #16
   21a04:	f043 030d 	orr.w	r3, r3, #13
   21a08:	6023      	str	r3, [r4, #0]
   21a0a:	4610      	mov	r0, r2
   21a0c:	f7f3 fcb8 	bl	15380 <nrf_modem_os_errno_set>
   21a10:	f04f 35ff 	mov.w	r5, #4294967295
   21a14:	e7e4      	b.n	219e0 <ip_interface_recvfrom+0x190>
   21a16:	031b      	lsls	r3, r3, #12
   21a18:	d5cc      	bpl.n	219b4 <ip_interface_recvfrom+0x164>
   21a1a:	6823      	ldr	r3, [r4, #0]
   21a1c:	b29b      	uxth	r3, r3
   21a1e:	2b0d      	cmp	r3, #13
   21a20:	d1c8      	bne.n	219b4 <ip_interface_recvfrom+0x164>
   21a22:	68a3      	ldr	r3, [r4, #8]
   21a24:	2b00      	cmp	r3, #0
   21a26:	d0c5      	beq.n	219b4 <ip_interface_recvfrom+0x164>
   21a28:	68a2      	ldr	r2, [r4, #8]
   21a2a:	e7c3      	b.n	219b4 <ip_interface_recvfrom+0x164>
   21a2c:	2216      	movs	r2, #22
   21a2e:	e7ec      	b.n	21a0a <ip_interface_recvfrom+0x1ba>
   21a30:	222d      	movs	r2, #45	; 0x2d
   21a32:	e7ea      	b.n	21a0a <ip_interface_recvfrom+0x1ba>
   21a34:	2209      	movs	r2, #9
   21a36:	e7e8      	b.n	21a0a <ip_interface_recvfrom+0x1ba>
   21a38:	f04f 0a01 	mov.w	sl, #1
   21a3c:	e73e      	b.n	218bc <ip_interface_recvfrom+0x6c>
   21a3e:	2600      	movs	r6, #0
   21a40:	46b2      	mov	sl, r6
   21a42:	e7ab      	b.n	2199c <ip_interface_recvfrom+0x14c>
   21a44:	469a      	mov	sl, r3
   21a46:	2223      	movs	r2, #35	; 0x23
   21a48:	e76f      	b.n	2192a <ip_interface_recvfrom+0xda>

00021a4a <ip_interface_connect>:
   21a4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21a4e:	4606      	mov	r6, r0
   21a50:	4691      	mov	r9, r2
   21a52:	460f      	mov	r7, r1
   21a54:	b085      	sub	sp, #20
   21a56:	2900      	cmp	r1, #0
   21a58:	d062      	beq.n	21b20 <ip_interface_connect+0xd6>
   21a5a:	2a00      	cmp	r2, #0
   21a5c:	d060      	beq.n	21b20 <ip_interface_connect+0xd6>
   21a5e:	f7f5 fcd9 	bl	17414 <interface_socket_from_handle_get>
   21a62:	4604      	mov	r4, r0
   21a64:	2800      	cmp	r0, #0
   21a66:	d05d      	beq.n	21b24 <ip_interface_connect+0xda>
   21a68:	6803      	ldr	r3, [r0, #0]
   21a6a:	b29b      	uxth	r3, r3
   21a6c:	2b02      	cmp	r3, #2
   21a6e:	d003      	beq.n	21a78 <ip_interface_connect+0x2e>
   21a70:	6803      	ldr	r3, [r0, #0]
   21a72:	b29b      	uxth	r3, r3
   21a74:	2b04      	cmp	r3, #4
   21a76:	d14c      	bne.n	21b12 <ip_interface_connect+0xc8>
   21a78:	6823      	ldr	r3, [r4, #0]
   21a7a:	f013 5300 	ands.w	r3, r3, #536870912	; 0x20000000
   21a7e:	d153      	bne.n	21b28 <ip_interface_connect+0xde>
   21a80:	f247 0202 	movw	r2, #28674	; 0x7002
   21a84:	4630      	mov	r0, r6
   21a86:	69a1      	ldr	r1, [r4, #24]
   21a88:	f7ff feba 	bl	21800 <ip_interface_request_create>
   21a8c:	4605      	mov	r5, r0
   21a8e:	2800      	cmp	r0, #0
   21a90:	d04c      	beq.n	21b2c <ip_interface_connect+0xe2>
   21a92:	f247 0802 	movw	r8, #28674	; 0x7002
   21a96:	ea48 4306 	orr.w	r3, r8, r6, lsl #16
   21a9a:	60c3      	str	r3, [r0, #12]
   21a9c:	69a3      	ldr	r3, [r4, #24]
   21a9e:	464a      	mov	r2, r9
   21aa0:	6103      	str	r3, [r0, #16]
   21aa2:	6883      	ldr	r3, [r0, #8]
   21aa4:	4639      	mov	r1, r7
   21aa6:	3304      	adds	r3, #4
   21aa8:	6083      	str	r3, [r0, #8]
   21aaa:	f100 0318 	add.w	r3, r0, #24
   21aae:	9301      	str	r3, [sp, #4]
   21ab0:	f100 0314 	add.w	r3, r0, #20
   21ab4:	9300      	str	r3, [sp, #0]
   21ab6:	f100 0316 	add.w	r3, r0, #22
   21aba:	68e0      	ldr	r0, [r4, #12]
   21abc:	f7ff fe7b 	bl	217b6 <ip_addr_parse>
   21ac0:	bb00      	cbnz	r0, 21b04 <ip_interface_connect+0xba>
   21ac2:	68ab      	ldr	r3, [r5, #8]
   21ac4:	8aea      	ldrh	r2, [r5, #22]
   21ac6:	6827      	ldr	r7, [r4, #0]
   21ac8:	4413      	add	r3, r2
   21aca:	60ab      	str	r3, [r5, #8]
   21acc:	6823      	ldr	r3, [r4, #0]
   21ace:	4641      	mov	r1, r8
   21ad0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   21ad4:	6023      	str	r3, [r4, #0]
   21ad6:	4628      	mov	r0, r5
   21ad8:	f7ff fca5 	bl	21426 <rpc_ip_client_request_send>
   21adc:	6823      	ldr	r3, [r4, #0]
   21ade:	00db      	lsls	r3, r3, #3
   21ae0:	d426      	bmi.n	21b30 <ip_interface_connect+0xe6>
   21ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   21ae8:	2b00      	cmp	r3, #0
   21aea:	bf08      	it	eq
   21aec:	f04f 33ff 	moveq.w	r3, #4294967295
   21af0:	2105      	movs	r1, #5
   21af2:	9303      	str	r3, [sp, #12]
   21af4:	4630      	mov	r0, r6
   21af6:	ab03      	add	r3, sp, #12
   21af8:	f7ff fe9a 	bl	21830 <ip_interface_wait>
   21afc:	b130      	cbz	r0, 21b0c <ip_interface_connect+0xc2>
   21afe:	2873      	cmp	r0, #115	; 0x73
   21b00:	d000      	beq.n	21b04 <ip_interface_connect+0xba>
   21b02:	6027      	str	r7, [r4, #0]
   21b04:	f7f3 fc3c 	bl	15380 <nrf_modem_os_errno_set>
   21b08:	f04f 30ff 	mov.w	r0, #4294967295
   21b0c:	b005      	add	sp, #20
   21b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21b12:	6803      	ldr	r3, [r0, #0]
   21b14:	b29b      	uxth	r3, r3
   21b16:	2b05      	cmp	r3, #5
   21b18:	bf14      	ite	ne
   21b1a:	2009      	movne	r0, #9
   21b1c:	2038      	moveq	r0, #56	; 0x38
   21b1e:	e7f1      	b.n	21b04 <ip_interface_connect+0xba>
   21b20:	2016      	movs	r0, #22
   21b22:	e7ef      	b.n	21b04 <ip_interface_connect+0xba>
   21b24:	2009      	movs	r0, #9
   21b26:	e7ed      	b.n	21b04 <ip_interface_connect+0xba>
   21b28:	2072      	movs	r0, #114	; 0x72
   21b2a:	e7eb      	b.n	21b04 <ip_interface_connect+0xba>
   21b2c:	200c      	movs	r0, #12
   21b2e:	e7e9      	b.n	21b04 <ip_interface_connect+0xba>
   21b30:	2073      	movs	r0, #115	; 0x73
   21b32:	e7e7      	b.n	21b04 <ip_interface_connect+0xba>

00021b34 <getopt_check_and_send_int>:
   21b34:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21b36:	4604      	mov	r4, r0
   21b38:	460d      	mov	r5, r1
   21b3a:	4618      	mov	r0, r3
   21b3c:	4611      	mov	r1, r2
   21b3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   21b42:	b193      	cbz	r3, 21b6a <getopt_check_and_send_int+0x36>
   21b44:	681e      	ldr	r6, [r3, #0]
   21b46:	2e04      	cmp	r6, #4
   21b48:	d10f      	bne.n	21b6a <getopt_check_and_send_int+0x36>
   21b4a:	b172      	cbz	r2, 21b6a <getopt_check_and_send_int+0x36>
   21b4c:	e9cd 2300 	strd	r2, r3, [sp]
   21b50:	462b      	mov	r3, r5
   21b52:	4622      	mov	r2, r4
   21b54:	f7f5 fef8 	bl	17948 <ip_interface_socketoption_get>
   21b58:	4603      	mov	r3, r0
   21b5a:	b118      	cbz	r0, 21b64 <getopt_check_and_send_int+0x30>
   21b5c:	f7f3 fc10 	bl	15380 <nrf_modem_os_errno_set>
   21b60:	f04f 33ff 	mov.w	r3, #4294967295
   21b64:	4618      	mov	r0, r3
   21b66:	b002      	add	sp, #8
   21b68:	bd70      	pop	{r4, r5, r6, pc}
   21b6a:	2016      	movs	r0, #22
   21b6c:	e7f6      	b.n	21b5c <getopt_check_and_send_int+0x28>

00021b6e <ip_interface_socketoption_send>:
   21b6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b72:	4698      	mov	r8, r3
   21b74:	e9dd b70c 	ldrd	fp, r7, [sp, #48]	; 0x30
   21b78:	f04f 33ff 	mov.w	r3, #4294967295
   21b7c:	9301      	str	r3, [sp, #4]
   21b7e:	680b      	ldr	r3, [r1, #0]
   21b80:	4606      	mov	r6, r0
   21b82:	025d      	lsls	r5, r3, #9
   21b84:	460c      	mov	r4, r1
   21b86:	4692      	mov	sl, r2
   21b88:	d439      	bmi.n	21bfe <ip_interface_socketoption_send+0x90>
   21b8a:	680b      	ldr	r3, [r1, #0]
   21b8c:	0219      	lsls	r1, r3, #8
   21b8e:	d436      	bmi.n	21bfe <ip_interface_socketoption_send+0x90>
   21b90:	6823      	ldr	r3, [r4, #0]
   21b92:	01da      	lsls	r2, r3, #7
   21b94:	d433      	bmi.n	21bfe <ip_interface_socketoption_send+0x90>
   21b96:	6823      	ldr	r3, [r4, #0]
   21b98:	019b      	lsls	r3, r3, #6
   21b9a:	d430      	bmi.n	21bfe <ip_interface_socketoption_send+0x90>
   21b9c:	f8d4 9000 	ldr.w	r9, [r4]
   21ba0:	6823      	ldr	r3, [r4, #0]
   21ba2:	f247 0203 	movw	r2, #28675	; 0x7003
   21ba6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   21baa:	6023      	str	r3, [r4, #0]
   21bac:	69a1      	ldr	r1, [r4, #24]
   21bae:	463b      	mov	r3, r7
   21bb0:	f7ff fe26 	bl	21800 <ip_interface_request_create>
   21bb4:	4605      	mov	r5, r0
   21bb6:	b300      	cbz	r0, 21bfa <ip_interface_socketoption_send+0x8c>
   21bb8:	6883      	ldr	r3, [r0, #8]
   21bba:	f8c0 a014 	str.w	sl, [r0, #20]
   21bbe:	3308      	adds	r3, #8
   21bc0:	6083      	str	r3, [r0, #8]
   21bc2:	f8c0 8018 	str.w	r8, [r0, #24]
   21bc6:	b13f      	cbz	r7, 21bd8 <ip_interface_socketoption_send+0x6a>
   21bc8:	f1bb 0f00 	cmp.w	fp, #0
   21bcc:	d004      	beq.n	21bd8 <ip_interface_socketoption_send+0x6a>
   21bce:	463a      	mov	r2, r7
   21bd0:	4659      	mov	r1, fp
   21bd2:	6800      	ldr	r0, [r0, #0]
   21bd4:	f001 f9cf 	bl	22f76 <memcpy>
   21bd8:	f247 0103 	movw	r1, #28675	; 0x7003
   21bdc:	4628      	mov	r0, r5
   21bde:	f7ff fc22 	bl	21426 <rpc_ip_client_request_send>
   21be2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   21be6:	4630      	mov	r0, r6
   21be8:	4611      	mov	r1, r2
   21bea:	ab01      	add	r3, sp, #4
   21bec:	f7ff fe20 	bl	21830 <ip_interface_wait>
   21bf0:	f8c4 9000 	str.w	r9, [r4]
   21bf4:	b003      	add	sp, #12
   21bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21bfa:	200c      	movs	r0, #12
   21bfc:	e7f8      	b.n	21bf0 <ip_interface_socketoption_send+0x82>
   21bfe:	2023      	movs	r0, #35	; 0x23
   21c00:	e7f8      	b.n	21bf4 <ip_interface_socketoption_send+0x86>

00021c02 <setopt_check_and_send_int>:
   21c02:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21c04:	4604      	mov	r4, r0
   21c06:	460d      	mov	r5, r1
   21c08:	4618      	mov	r0, r3
   21c0a:	4611      	mov	r1, r2
   21c0c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   21c10:	2a04      	cmp	r2, #4
   21c12:	d10f      	bne.n	21c34 <setopt_check_and_send_int+0x32>
   21c14:	b173      	cbz	r3, 21c34 <setopt_check_and_send_int+0x32>
   21c16:	e9cd 3200 	strd	r3, r2, [sp]
   21c1a:	462b      	mov	r3, r5
   21c1c:	4622      	mov	r2, r4
   21c1e:	f7ff ffa6 	bl	21b6e <ip_interface_socketoption_send>
   21c22:	4603      	mov	r3, r0
   21c24:	b118      	cbz	r0, 21c2e <setopt_check_and_send_int+0x2c>
   21c26:	f7f3 fbab 	bl	15380 <nrf_modem_os_errno_set>
   21c2a:	f04f 33ff 	mov.w	r3, #4294967295
   21c2e:	4618      	mov	r0, r3
   21c30:	b003      	add	sp, #12
   21c32:	bd30      	pop	{r4, r5, pc}
   21c34:	2016      	movs	r0, #22
   21c36:	e7f6      	b.n	21c26 <setopt_check_and_send_int+0x24>

00021c38 <ip_interface_getopt>:
   21c38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21c3c:	2901      	cmp	r1, #1
   21c3e:	4604      	mov	r4, r0
   21c40:	460f      	mov	r7, r1
   21c42:	4616      	mov	r6, r2
   21c44:	461d      	mov	r5, r3
   21c46:	f8dd 8020 	ldr.w	r8, [sp, #32]
   21c4a:	d007      	beq.n	21c5c <ip_interface_getopt+0x24>
   21c4c:	202a      	movs	r0, #42	; 0x2a
   21c4e:	f7f3 fb97 	bl	15380 <nrf_modem_os_errno_set>
   21c52:	f04f 30ff 	mov.w	r0, #4294967295
   21c56:	b002      	add	sp, #8
   21c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21c5c:	f7f5 fbda 	bl	17414 <interface_socket_from_handle_get>
   21c60:	4602      	mov	r2, r0
   21c62:	b908      	cbnz	r0, 21c68 <ip_interface_getopt+0x30>
   21c64:	2009      	movs	r0, #9
   21c66:	e7f2      	b.n	21c4e <ip_interface_getopt+0x16>
   21c68:	2e28      	cmp	r6, #40	; 0x28
   21c6a:	dc0d      	bgt.n	21c88 <ip_interface_getopt+0x50>
   21c6c:	2e1d      	cmp	r6, #29
   21c6e:	dd0d      	ble.n	21c8c <ip_interface_getopt+0x54>
   21c70:	f1a6 031e 	sub.w	r3, r6, #30
   21c74:	2b0a      	cmp	r3, #10
   21c76:	d809      	bhi.n	21c8c <ip_interface_getopt+0x54>
   21c78:	e8df f003 	tbb	[pc, r3]
   21c7c:	08241d13 	.word	0x08241d13
   21c80:	08080808 	.word	0x08080808
   21c84:	0808      	.short	0x0808
   21c86:	2b          	.byte	0x2b
   21c87:	00          	.byte	0x00
   21c88:	2e37      	cmp	r6, #55	; 0x37
   21c8a:	d029      	beq.n	21ce0 <ip_interface_getopt+0xa8>
   21c8c:	462b      	mov	r3, r5
   21c8e:	4632      	mov	r2, r6
   21c90:	2101      	movs	r1, #1
   21c92:	4620      	mov	r0, r4
   21c94:	f8cd 8020 	str.w	r8, [sp, #32]
   21c98:	b002      	add	sp, #8
   21c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21c9e:	f7f5 bbfd 	b.w	1749c <interface_socket_getopt>
   21ca2:	4623      	mov	r3, r4
   21ca4:	f248 0101 	movw	r1, #32769	; 0x8001
   21ca8:	f44f 7000 	mov.w	r0, #512	; 0x200
   21cac:	e9cd 5800 	strd	r5, r8, [sp]
   21cb0:	f7ff ff40 	bl	21b34 <getopt_check_and_send_int>
   21cb4:	e7cf      	b.n	21c56 <ip_interface_getopt+0x1e>
   21cb6:	4623      	mov	r3, r4
   21cb8:	f244 0110 	movw	r1, #16400	; 0x4010
   21cbc:	2004      	movs	r0, #4
   21cbe:	e9cd 5800 	strd	r5, r8, [sp]
   21cc2:	e7f5      	b.n	21cb0 <ip_interface_getopt+0x78>
   21cc4:	4623      	mov	r3, r4
   21cc6:	f246 0110 	movw	r1, #24592	; 0x6010
   21cca:	2006      	movs	r0, #6
   21ccc:	e9cd 5800 	strd	r5, r8, [sp]
   21cd0:	e7ee      	b.n	21cb0 <ip_interface_getopt+0x78>
   21cd2:	4623      	mov	r3, r4
   21cd4:	f241 0104 	movw	r1, #4100	; 0x1004
   21cd8:	2008      	movs	r0, #8
   21cda:	e9cd 5800 	strd	r5, r8, [sp]
   21cde:	e7e7      	b.n	21cb0 <ip_interface_getopt+0x78>
   21ce0:	4623      	mov	r3, r4
   21ce2:	f245 0106 	movw	r1, #20486	; 0x5006
   21ce6:	4638      	mov	r0, r7
   21ce8:	e9cd 5800 	strd	r5, r8, [sp]
   21cec:	e7e0      	b.n	21cb0 <ip_interface_getopt+0x78>

00021cee <attach_trigger_condition_verify>:
   21cee:	6903      	ldr	r3, [r0, #16]
   21cf0:	2b01      	cmp	r3, #1
   21cf2:	d105      	bne.n	21d00 <attach_trigger_condition_verify+0x12>
   21cf4:	6800      	ldr	r0, [r0, #0]
   21cf6:	b280      	uxth	r0, r0
   21cf8:	1f43      	subs	r3, r0, #5
   21cfa:	4258      	negs	r0, r3
   21cfc:	4158      	adcs	r0, r3
   21cfe:	4770      	bx	lr
   21d00:	2b02      	cmp	r3, #2
   21d02:	d109      	bne.n	21d18 <attach_trigger_condition_verify+0x2a>
   21d04:	6803      	ldr	r3, [r0, #0]
   21d06:	b29b      	uxth	r3, r3
   21d08:	2b02      	cmp	r3, #2
   21d0a:	d003      	beq.n	21d14 <attach_trigger_condition_verify+0x26>
   21d0c:	6803      	ldr	r3, [r0, #0]
   21d0e:	b29b      	uxth	r3, r3
   21d10:	2b04      	cmp	r3, #4
   21d12:	d1ef      	bne.n	21cf4 <attach_trigger_condition_verify+0x6>
   21d14:	2001      	movs	r0, #1
   21d16:	4770      	bx	lr
   21d18:	2000      	movs	r0, #0
   21d1a:	4770      	bx	lr

00021d1c <secure_client_socket>:
   21d1c:	f04f 33ff 	mov.w	r3, #4294967295
   21d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21d22:	9301      	str	r3, [sp, #4]
   21d24:	680b      	ldr	r3, [r1, #0]
   21d26:	4606      	mov	r6, r0
   21d28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   21d2c:	600b      	str	r3, [r1, #0]
   21d2e:	680b      	ldr	r3, [r1, #0]
   21d30:	460c      	mov	r4, r1
   21d32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   21d36:	600b      	str	r3, [r1, #0]
   21d38:	680f      	ldr	r7, [r1, #0]
   21d3a:	463a      	mov	r2, r7
   21d3c:	f7f6 fc64 	bl	18608 <secure_socket_attach_initiate>
   21d40:	4605      	mov	r5, r0
   21d42:	b950      	cbnz	r0, 21d5a <secure_client_socket+0x3e>
   21d44:	220c      	movs	r2, #12
   21d46:	4630      	mov	r0, r6
   21d48:	4611      	mov	r1, r2
   21d4a:	ab01      	add	r3, sp, #4
   21d4c:	f7ff fd70 	bl	21830 <ip_interface_wait>
   21d50:	4605      	mov	r5, r0
   21d52:	b128      	cbz	r0, 21d60 <secure_client_socket+0x44>
   21d54:	2873      	cmp	r0, #115	; 0x73
   21d56:	d000      	beq.n	21d5a <secure_client_socket+0x3e>
   21d58:	6027      	str	r7, [r4, #0]
   21d5a:	4628      	mov	r0, r5
   21d5c:	b003      	add	sp, #12
   21d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21d60:	4630      	mov	r0, r6
   21d62:	f7f6 fc3f 	bl	185e4 <hostname_free>
   21d66:	6823      	ldr	r3, [r4, #0]
   21d68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   21d6c:	6023      	str	r3, [r4, #0]
   21d6e:	6823      	ldr	r3, [r4, #0]
   21d70:	0c1b      	lsrs	r3, r3, #16
   21d72:	041b      	lsls	r3, r3, #16
   21d74:	f043 030c 	orr.w	r3, r3, #12
   21d78:	6023      	str	r3, [r4, #0]
   21d7a:	6823      	ldr	r3, [r4, #0]
   21d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   21d80:	6023      	str	r3, [r4, #0]
   21d82:	6823      	ldr	r3, [r4, #0]
   21d84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   21d88:	6023      	str	r3, [r4, #0]
   21d8a:	e7e6      	b.n	21d5a <secure_client_socket+0x3e>

00021d8c <tls_interface_close>:
   21d8c:	b510      	push	{r4, lr}
   21d8e:	4604      	mov	r4, r0
   21d90:	f7f5 fb40 	bl	17414 <interface_socket_from_handle_get>
   21d94:	b138      	cbz	r0, 21da6 <tls_interface_close+0x1a>
   21d96:	4620      	mov	r0, r4
   21d98:	f7f6 fc24 	bl	185e4 <hostname_free>
   21d9c:	4620      	mov	r0, r4
   21d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21da2:	f7f5 bca5 	b.w	176f0 <ip_interface_close>
   21da6:	2009      	movs	r0, #9
   21da8:	f7f3 faea 	bl	15380 <nrf_modem_os_errno_set>
   21dac:	f04f 30ff 	mov.w	r0, #4294967295
   21db0:	bd10      	pop	{r4, pc}

00021db2 <packet_free_cb>:
   21db2:	6800      	ldr	r0, [r0, #0]
   21db4:	f7ff bb21 	b.w	213fa <rpc_at_client_data_free>

00021db8 <at_interface_wait>:
   21db8:	b538      	push	{r3, r4, r5, lr}
   21dba:	4605      	mov	r5, r0
   21dbc:	f7f5 faec 	bl	17398 <interface_socket_wait>
   21dc0:	4604      	mov	r4, r0
   21dc2:	b938      	cbnz	r0, 21dd4 <at_interface_wait+0x1c>
   21dc4:	4628      	mov	r0, r5
   21dc6:	f7f5 fb25 	bl	17414 <interface_socket_from_handle_get>
   21dca:	b118      	cbz	r0, 21dd4 <at_interface_wait+0x1c>
   21dcc:	6844      	ldr	r4, [r0, #4]
   21dce:	b10c      	cbz	r4, 21dd4 <at_interface_wait+0x1c>
   21dd0:	2300      	movs	r3, #0
   21dd2:	6043      	str	r3, [r0, #4]
   21dd4:	4620      	mov	r0, r4
   21dd6:	bd38      	pop	{r3, r4, r5, pc}

00021dd8 <send_message>:
   21dd8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   21ddc:	4606      	mov	r6, r0
   21dde:	4668      	mov	r0, sp
   21de0:	460f      	mov	r7, r1
   21de2:	4692      	mov	sl, r2
   21de4:	4699      	mov	r9, r3
   21de6:	f7ff faef 	bl	213c8 <rpc_at_client_request_alloc>
   21dea:	4605      	mov	r5, r0
   21dec:	4630      	mov	r0, r6
   21dee:	f7f5 fb11 	bl	17414 <interface_socket_from_handle_get>
   21df2:	4680      	mov	r8, r0
   21df4:	bb05      	cbnz	r5, 21e38 <send_message+0x60>
   21df6:	2304      	movs	r3, #4
   21df8:	9c00      	ldr	r4, [sp, #0]
   21dfa:	7223      	strb	r3, [r4, #8]
   21dfc:	7265      	strb	r5, [r4, #9]
   21dfe:	72a5      	strb	r5, [r4, #10]
   21e00:	72e5      	strb	r5, [r4, #11]
   21e02:	60e6      	str	r6, [r4, #12]
   21e04:	b127      	cbz	r7, 21e10 <send_message+0x38>
   21e06:	463a      	mov	r2, r7
   21e08:	4651      	mov	r1, sl
   21e0a:	6820      	ldr	r0, [r4, #0]
   21e0c:	f001 f8b3 	bl	22f76 <memcpy>
   21e10:	4649      	mov	r1, r9
   21e12:	9800      	ldr	r0, [sp, #0]
   21e14:	f7ff fae7 	bl	213e6 <rpc_at_client_request_send>
   21e18:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   21e1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21e1e:	2b00      	cmp	r3, #0
   21e20:	bf08      	it	eq
   21e22:	f04f 33ff 	moveq.w	r3, #4294967295
   21e26:	4611      	mov	r1, r2
   21e28:	9301      	str	r3, [sp, #4]
   21e2a:	4630      	mov	r0, r6
   21e2c:	ab01      	add	r3, sp, #4
   21e2e:	f7ff ffc3 	bl	21db8 <at_interface_wait>
   21e32:	b002      	add	sp, #8
   21e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21e38:	200c      	movs	r0, #12
   21e3a:	e7fa      	b.n	21e32 <send_message+0x5a>

00021e3c <at_interface_write>:
   21e3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21e40:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   21e42:	4607      	mov	r7, r0
   21e44:	4688      	mov	r8, r1
   21e46:	4615      	mov	r5, r2
   21e48:	4699      	mov	r9, r3
   21e4a:	b146      	cbz	r6, 21e5e <at_interface_write+0x22>
   21e4c:	2038      	movs	r0, #56	; 0x38
   21e4e:	f7f3 fa97 	bl	15380 <nrf_modem_os_errno_set>
   21e52:	f04f 35ff 	mov.w	r5, #4294967295
   21e56:	4628      	mov	r0, r5
   21e58:	b003      	add	sp, #12
   21e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21e5e:	f7f5 fad9 	bl	17414 <interface_socket_from_handle_get>
   21e62:	4604      	mov	r4, r0
   21e64:	f1b9 0f00 	cmp.w	r9, #0
   21e68:	d124      	bne.n	21eb4 <at_interface_write+0x78>
   21e6a:	b908      	cbnz	r0, 21e70 <at_interface_write+0x34>
   21e6c:	2016      	movs	r0, #22
   21e6e:	e7ee      	b.n	21e4e <at_interface_write+0x12>
   21e70:	2601      	movs	r6, #1
   21e72:	6822      	ldr	r2, [r4, #0]
   21e74:	0393      	lsls	r3, r2, #14
   21e76:	d518      	bpl.n	21eaa <at_interface_write+0x6e>
   21e78:	b1f6      	cbz	r6, 21eb8 <at_interface_write+0x7c>
   21e7a:	6823      	ldr	r3, [r4, #0]
   21e7c:	4642      	mov	r2, r8
   21e7e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   21e82:	6023      	str	r3, [r4, #0]
   21e84:	6823      	ldr	r3, [r4, #0]
   21e86:	4629      	mov	r1, r5
   21e88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   21e8c:	6023      	str	r3, [r4, #0]
   21e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   21e92:	4638      	mov	r0, r7
   21e94:	9300      	str	r3, [sp, #0]
   21e96:	2301      	movs	r3, #1
   21e98:	f7ff ff9e 	bl	21dd8 <send_message>
   21e9c:	2800      	cmp	r0, #0
   21e9e:	d0da      	beq.n	21e56 <at_interface_write+0x1a>
   21ea0:	6823      	ldr	r3, [r4, #0]
   21ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   21ea6:	6023      	str	r3, [r4, #0]
   21ea8:	e7d1      	b.n	21e4e <at_interface_write+0x12>
   21eaa:	2e00      	cmp	r6, #0
   21eac:	bf14      	ite	ne
   21eae:	2016      	movne	r0, #22
   21eb0:	202d      	moveq	r0, #45	; 0x2d
   21eb2:	e7cc      	b.n	21e4e <at_interface_write+0x12>
   21eb4:	2800      	cmp	r0, #0
   21eb6:	d1dc      	bne.n	21e72 <at_interface_write+0x36>
   21eb8:	202d      	movs	r0, #45	; 0x2d
   21eba:	e7c8      	b.n	21e4e <at_interface_write+0x12>

00021ebc <at_interface_close>:
   21ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21ebe:	4606      	mov	r6, r0
   21ec0:	f7f5 faa8 	bl	17414 <interface_socket_from_handle_get>
   21ec4:	4604      	mov	r4, r0
   21ec6:	b308      	cbz	r0, 21f0c <at_interface_close+0x50>
   21ec8:	230d      	movs	r3, #13
   21eca:	6807      	ldr	r7, [r0, #0]
   21ecc:	6003      	str	r3, [r0, #0]
   21ece:	6803      	ldr	r3, [r0, #0]
   21ed0:	2200      	movs	r2, #0
   21ed2:	039b      	lsls	r3, r3, #14
   21ed4:	bf48      	it	mi
   21ed6:	6803      	ldrmi	r3, [r0, #0]
   21ed8:	4611      	mov	r1, r2
   21eda:	bf44      	itt	mi
   21edc:	f423 3300 	bicmi.w	r3, r3, #131072	; 0x20000
   21ee0:	6003      	strmi	r3, [r0, #0]
   21ee2:	230e      	movs	r3, #14
   21ee4:	4630      	mov	r0, r6
   21ee6:	9300      	str	r3, [sp, #0]
   21ee8:	2306      	movs	r3, #6
   21eea:	f7ff ff75 	bl	21dd8 <send_message>
   21eee:	4605      	mov	r5, r0
   21ef0:	b130      	cbz	r0, 21f00 <at_interface_close+0x44>
   21ef2:	6027      	str	r7, [r4, #0]
   21ef4:	4628      	mov	r0, r5
   21ef6:	f7f3 fa43 	bl	15380 <nrf_modem_os_errno_set>
   21efa:	f04f 35ff 	mov.w	r5, #4294967295
   21efe:	e002      	b.n	21f06 <at_interface_close+0x4a>
   21f00:	4630      	mov	r0, r6
   21f02:	f7f5 fa23 	bl	1734c <interface_socket_free>
   21f06:	4628      	mov	r0, r5
   21f08:	b003      	add	sp, #12
   21f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21f0c:	2516      	movs	r5, #22
   21f0e:	e7f1      	b.n	21ef4 <at_interface_close+0x38>

00021f10 <at_interface_read>:
   21f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21f14:	b087      	sub	sp, #28
   21f16:	4680      	mov	r8, r0
   21f18:	460e      	mov	r6, r1
   21f1a:	4614      	mov	r4, r2
   21f1c:	461f      	mov	r7, r3
   21f1e:	f7f5 fa79 	bl	17414 <interface_socket_from_handle_get>
   21f22:	4605      	mov	r5, r0
   21f24:	2800      	cmp	r0, #0
   21f26:	d045      	beq.n	21fb4 <at_interface_read+0xa4>
   21f28:	2300      	movs	r3, #0
   21f2a:	e9cd 6402 	strd	r6, r4, [sp, #8]
   21f2e:	9304      	str	r3, [sp, #16]
   21f30:	b117      	cbz	r7, 21f38 <at_interface_read+0x28>
   21f32:	f017 0f2a 	tst.w	r7, #42	; 0x2a
   21f36:	d022      	beq.n	21f7e <at_interface_read+0x6e>
   21f38:	2400      	movs	r4, #0
   21f3a:	9305      	str	r3, [sp, #20]
   21f3c:	f007 0902 	and.w	r9, r7, #2
   21f40:	682b      	ldr	r3, [r5, #0]
   21f42:	69e8      	ldr	r0, [r5, #28]
   21f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   21f48:	602b      	str	r3, [r5, #0]
   21f4a:	6803      	ldr	r3, [r0, #0]
   21f4c:	463a      	mov	r2, r7
   21f4e:	689b      	ldr	r3, [r3, #8]
   21f50:	a902      	add	r1, sp, #8
   21f52:	4798      	blx	r3
   21f54:	1e06      	subs	r6, r0, #0
   21f56:	da1b      	bge.n	21f90 <at_interface_read+0x80>
   21f58:	f1b9 0f00 	cmp.w	r9, #0
   21f5c:	d113      	bne.n	21f86 <at_interface_read+0x76>
   21f5e:	b9bc      	cbnz	r4, 21f90 <at_interface_read+0x80>
   21f60:	6a2b      	ldr	r3, [r5, #32]
   21f62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   21f66:	2b00      	cmp	r3, #0
   21f68:	bf08      	it	eq
   21f6a:	f04f 33ff 	moveq.w	r3, #4294967295
   21f6e:	4611      	mov	r1, r2
   21f70:	9301      	str	r3, [sp, #4]
   21f72:	4640      	mov	r0, r8
   21f74:	ab01      	add	r3, sp, #4
   21f76:	f7ff ff1f 	bl	21db8 <at_interface_wait>
   21f7a:	4604      	mov	r4, r0
   21f7c:	e7e0      	b.n	21f40 <at_interface_read+0x30>
   21f7e:	242d      	movs	r4, #45	; 0x2d
   21f80:	f04f 36ff 	mov.w	r6, #4294967295
   21f84:	e00f      	b.n	21fa6 <at_interface_read+0x96>
   21f86:	1c73      	adds	r3, r6, #1
   21f88:	d102      	bne.n	21f90 <at_interface_read+0x80>
   21f8a:	2c00      	cmp	r4, #0
   21f8c:	bf08      	it	eq
   21f8e:	2423      	moveq	r4, #35	; 0x23
   21f90:	69e8      	ldr	r0, [r5, #28]
   21f92:	6803      	ldr	r3, [r0, #0]
   21f94:	68db      	ldr	r3, [r3, #12]
   21f96:	4798      	blx	r3
   21f98:	3001      	adds	r0, #1
   21f9a:	bf1e      	ittt	ne
   21f9c:	682b      	ldrne	r3, [r5, #0]
   21f9e:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
   21fa2:	602b      	strne	r3, [r5, #0]
   21fa4:	b114      	cbz	r4, 21fac <at_interface_read+0x9c>
   21fa6:	4620      	mov	r0, r4
   21fa8:	f7f3 f9ea 	bl	15380 <nrf_modem_os_errno_set>
   21fac:	4630      	mov	r0, r6
   21fae:	b007      	add	sp, #28
   21fb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21fb4:	2416      	movs	r4, #22
   21fb6:	e7e3      	b.n	21f80 <at_interface_read+0x70>

00021fb8 <at_interface_getopt>:
   21fb8:	f7f5 ba70 	b.w	1749c <interface_socket_getopt>

00021fbc <at_interface_setopt>:
   21fbc:	f7f5 ba3a 	b.w	17434 <interface_socket_setopt>

00021fc0 <rpc_at_event_handler>:
   21fc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   21fc2:	4606      	mov	r6, r0
   21fc4:	68c0      	ldr	r0, [r0, #12]
   21fc6:	460d      	mov	r5, r1
   21fc8:	f7f5 fa24 	bl	17414 <interface_socket_from_handle_get>
   21fcc:	4604      	mov	r4, r0
   21fce:	2800      	cmp	r0, #0
   21fd0:	d03a      	beq.n	22048 <rpc_at_event_handler+0x88>
   21fd2:	6803      	ldr	r3, [r0, #0]
   21fd4:	b29b      	uxth	r3, r3
   21fd6:	2b01      	cmp	r3, #1
   21fd8:	d104      	bne.n	21fe4 <rpc_at_event_handler+0x24>
   21fda:	2d02      	cmp	r5, #2
   21fdc:	d11c      	bne.n	22018 <rpc_at_event_handler+0x58>
   21fde:	6005      	str	r5, [r0, #0]
   21fe0:	2000      	movs	r0, #0
   21fe2:	e02b      	b.n	2203c <rpc_at_event_handler+0x7c>
   21fe4:	6803      	ldr	r3, [r0, #0]
   21fe6:	b29b      	uxth	r3, r3
   21fe8:	2b0d      	cmp	r3, #13
   21fea:	d104      	bne.n	21ff6 <rpc_at_event_handler+0x36>
   21fec:	2d02      	cmp	r5, #2
   21fee:	d113      	bne.n	22018 <rpc_at_event_handler+0x58>
   21ff0:	230e      	movs	r3, #14
   21ff2:	6023      	str	r3, [r4, #0]
   21ff4:	e7f4      	b.n	21fe0 <rpc_at_event_handler+0x20>
   21ff6:	6803      	ldr	r3, [r0, #0]
   21ff8:	b29b      	uxth	r3, r3
   21ffa:	2b02      	cmp	r3, #2
   21ffc:	d10c      	bne.n	22018 <rpc_at_event_handler+0x58>
   21ffe:	6803      	ldr	r3, [r0, #0]
   22000:	029b      	lsls	r3, r3, #10
   22002:	d509      	bpl.n	22018 <rpc_at_event_handler+0x58>
   22004:	2d02      	cmp	r5, #2
   22006:	d107      	bne.n	22018 <rpc_at_event_handler+0x58>
   22008:	6803      	ldr	r3, [r0, #0]
   2200a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   2200e:	6003      	str	r3, [r0, #0]
   22010:	6803      	ldr	r3, [r0, #0]
   22012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   22016:	e7ec      	b.n	21ff2 <rpc_at_event_handler+0x32>
   22018:	3d03      	subs	r5, #3
   2201a:	2d01      	cmp	r5, #1
   2201c:	d8e0      	bhi.n	21fe0 <rpc_at_event_handler+0x20>
   2201e:	2500      	movs	r5, #0
   22020:	6833      	ldr	r3, [r6, #0]
   22022:	69e0      	ldr	r0, [r4, #28]
   22024:	9300      	str	r3, [sp, #0]
   22026:	6873      	ldr	r3, [r6, #4]
   22028:	4669      	mov	r1, sp
   2202a:	9301      	str	r3, [sp, #4]
   2202c:	6803      	ldr	r3, [r0, #0]
   2202e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   22032:	685b      	ldr	r3, [r3, #4]
   22034:	4798      	blx	r3
   22036:	3001      	adds	r0, #1
   22038:	d102      	bne.n	22040 <rpc_at_event_handler+0x80>
   2203a:	2002      	movs	r0, #2
   2203c:	b004      	add	sp, #16
   2203e:	bd70      	pop	{r4, r5, r6, pc}
   22040:	6823      	ldr	r3, [r4, #0]
   22042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   22046:	e7d4      	b.n	21ff2 <rpc_at_event_handler+0x32>
   22048:	6830      	ldr	r0, [r6, #0]
   2204a:	2800      	cmp	r0, #0
   2204c:	d0c8      	beq.n	21fe0 <rpc_at_event_handler+0x20>
   2204e:	f7ff f9d4 	bl	213fa <rpc_at_client_data_free>
   22052:	e7c5      	b.n	21fe0 <rpc_at_event_handler+0x20>

00022054 <packet_free_cb>:
   22054:	b510      	push	{r4, lr}
   22056:	4604      	mov	r4, r0
   22058:	b118      	cbz	r0, 22062 <packet_free_cb+0xe>
   2205a:	6800      	ldr	r0, [r0, #0]
   2205c:	b108      	cbz	r0, 22062 <packet_free_cb+0xe>
   2205e:	f7ff fa30 	bl	214c2 <rpc_gnss_client_data_free>
   22062:	68a0      	ldr	r0, [r4, #8]
   22064:	b118      	cbz	r0, 2206e <packet_free_cb+0x1a>
   22066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2206a:	f7f3 bb21 	b.w	156b0 <nrf_modem_os_free>
   2206e:	bd10      	pop	{r4, pc}

00022070 <spaces_remove>:
   22070:	2200      	movs	r2, #0
   22072:	b510      	push	{r4, lr}
   22074:	1e44      	subs	r4, r0, #1
   22076:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2207a:	1881      	adds	r1, r0, r2
   2207c:	b90b      	cbnz	r3, 22082 <spaces_remove+0x12>
   2207e:	700b      	strb	r3, [r1, #0]
   22080:	bd10      	pop	{r4, pc}
   22082:	2b20      	cmp	r3, #32
   22084:	bf1c      	itt	ne
   22086:	700b      	strbne	r3, [r1, #0]
   22088:	3201      	addne	r2, #1
   2208a:	e7f4      	b.n	22076 <spaces_remove+0x6>

0002208c <ok_rsp_parser>:
   2208c:	2000      	movs	r0, #0
   2208e:	4770      	bx	lr

00022090 <context_query_parser>:
   22090:	f06f 0004 	mvn.w	r0, #4
   22094:	4770      	bx	lr

00022096 <null_handler_init>:
   22096:	2000      	movs	r0, #0
   22098:	4770      	bx	lr

0002209a <null_handler_put>:
   2209a:	b510      	push	{r4, lr}
   2209c:	460c      	mov	r4, r1
   2209e:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   220a2:	4620      	mov	r0, r4
   220a4:	4798      	blx	r3
   220a6:	6860      	ldr	r0, [r4, #4]
   220a8:	bd10      	pop	{r4, pc}

000220aa <null_handler_get>:
   220aa:	f04f 30ff 	mov.w	r0, #4294967295
   220ae:	4770      	bx	lr

000220b0 <null_handler_available>:
   220b0:	f04f 30ff 	mov.w	r0, #4294967295
   220b4:	4770      	bx	lr

000220b6 <null_handler_flush>:
   220b6:	2000      	movs	r0, #0
   220b8:	4770      	bx	lr

000220ba <null_handler_free>:
   220ba:	4770      	bx	lr

000220bc <stream_handler_free_packet>:
   220bc:	b530      	push	{r4, r5, lr}
   220be:	4605      	mov	r5, r0
   220c0:	b085      	sub	sp, #20
   220c2:	68c0      	ldr	r0, [r0, #12]
   220c4:	f000 fb12 	bl	226ec <linked_list_pop>
   220c8:	4604      	mov	r4, r0
   220ca:	b170      	cbz	r0, 220ea <stream_handler_free_packet+0x2e>
   220cc:	6843      	ldr	r3, [r0, #4]
   220ce:	9300      	str	r3, [sp, #0]
   220d0:	6883      	ldr	r3, [r0, #8]
   220d2:	9301      	str	r3, [sp, #4]
   220d4:	6903      	ldr	r3, [r0, #16]
   220d6:	9302      	str	r3, [sp, #8]
   220d8:	68c3      	ldr	r3, [r0, #12]
   220da:	4668      	mov	r0, sp
   220dc:	9303      	str	r3, [sp, #12]
   220de:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   220e2:	4798      	blx	r3
   220e4:	4620      	mov	r0, r4
   220e6:	f7f3 fae3 	bl	156b0 <nrf_modem_os_free>
   220ea:	b005      	add	sp, #20
   220ec:	bd30      	pop	{r4, r5, pc}

000220ee <stream_handler_init>:
   220ee:	b510      	push	{r4, lr}
   220f0:	4604      	mov	r4, r0
   220f2:	200c      	movs	r0, #12
   220f4:	f7f3 fad2 	bl	1569c <nrf_modem_os_alloc>
   220f8:	60e0      	str	r0, [r4, #12]
   220fa:	b128      	cbz	r0, 22108 <stream_handler_init+0x1a>
   220fc:	2300      	movs	r3, #0
   220fe:	6123      	str	r3, [r4, #16]
   22100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22104:	f000 bad6 	b.w	226b4 <linked_list_init>
   22108:	200c      	movs	r0, #12
   2210a:	bd10      	pop	{r4, pc}

0002210c <stream_handler_put>:
   2210c:	b570      	push	{r4, r5, r6, lr}
   2210e:	4606      	mov	r6, r0
   22110:	2014      	movs	r0, #20
   22112:	460d      	mov	r5, r1
   22114:	f7f3 fac2 	bl	1569c <nrf_modem_os_alloc>
   22118:	4604      	mov	r4, r0
   2211a:	b178      	cbz	r0, 2213c <stream_handler_put+0x30>
   2211c:	682b      	ldr	r3, [r5, #0]
   2211e:	4601      	mov	r1, r0
   22120:	6043      	str	r3, [r0, #4]
   22122:	686b      	ldr	r3, [r5, #4]
   22124:	6083      	str	r3, [r0, #8]
   22126:	68eb      	ldr	r3, [r5, #12]
   22128:	60c3      	str	r3, [r0, #12]
   2212a:	68ab      	ldr	r3, [r5, #8]
   2212c:	6103      	str	r3, [r0, #16]
   2212e:	68f0      	ldr	r0, [r6, #12]
   22130:	f000 fac9 	bl	226c6 <linked_list_push>
   22134:	b128      	cbz	r0, 22142 <stream_handler_put+0x36>
   22136:	4620      	mov	r0, r4
   22138:	f7f3 faba 	bl	156b0 <nrf_modem_os_free>
   2213c:	f04f 30ff 	mov.w	r0, #4294967295
   22140:	e000      	b.n	22144 <stream_handler_put+0x38>
   22142:	6868      	ldr	r0, [r5, #4]
   22144:	bd70      	pop	{r4, r5, r6, pc}

00022146 <stream_handler_get>:
   22146:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2214a:	4606      	mov	r6, r0
   2214c:	b085      	sub	sp, #20
   2214e:	68c0      	ldr	r0, [r0, #12]
   22150:	468a      	mov	sl, r1
   22152:	4617      	mov	r7, r2
   22154:	f000 fad4 	bl	22700 <linked_list_peek>
   22158:	4604      	mov	r4, r0
   2215a:	2800      	cmp	r0, #0
   2215c:	d055      	beq.n	2220a <stream_handler_get+0xc4>
   2215e:	f8da 0008 	ldr.w	r0, [sl, #8]
   22162:	2800      	cmp	r0, #0
   22164:	d049      	beq.n	221fa <stream_handler_get+0xb4>
   22166:	6921      	ldr	r1, [r4, #16]
   22168:	2900      	cmp	r1, #0
   2216a:	d046      	beq.n	221fa <stream_handler_get+0xb4>
   2216c:	68e2      	ldr	r2, [r4, #12]
   2216e:	2a00      	cmp	r2, #0
   22170:	d043      	beq.n	221fa <stream_handler_get+0xb4>
   22172:	f8da 500c 	ldr.w	r5, [sl, #12]
   22176:	42aa      	cmp	r2, r5
   22178:	bf28      	it	cs
   2217a:	462a      	movcs	r2, r5
   2217c:	f8ca 200c 	str.w	r2, [sl, #12]
   22180:	f000 fef9 	bl	22f76 <memcpy>
   22184:	2500      	movs	r5, #0
   22186:	f8da 3004 	ldr.w	r3, [sl, #4]
   2218a:	6931      	ldr	r1, [r6, #16]
   2218c:	9301      	str	r3, [sp, #4]
   2218e:	f8da 3000 	ldr.w	r3, [sl]
   22192:	9302      	str	r3, [sp, #8]
   22194:	f007 0320 	and.w	r3, r7, #32
   22198:	9303      	str	r3, [sp, #12]
   2219a:	f007 0708 	and.w	r7, r7, #8
   2219e:	9b01      	ldr	r3, [sp, #4]
   221a0:	42ab      	cmp	r3, r5
   221a2:	d924      	bls.n	221ee <stream_handler_get+0xa8>
   221a4:	68a2      	ldr	r2, [r4, #8]
   221a6:	9b01      	ldr	r3, [sp, #4]
   221a8:	eba2 0801 	sub.w	r8, r2, r1
   221ac:	eba3 0b05 	sub.w	fp, r3, r5
   221b0:	f8da 2000 	ldr.w	r2, [sl]
   221b4:	45d8      	cmp	r8, fp
   221b6:	46c1      	mov	r9, r8
   221b8:	bf28      	it	cs
   221ba:	46d9      	movcs	r9, fp
   221bc:	b142      	cbz	r2, 221d0 <stream_handler_get+0x8a>
   221be:	9b03      	ldr	r3, [sp, #12]
   221c0:	b933      	cbnz	r3, 221d0 <stream_handler_get+0x8a>
   221c2:	6860      	ldr	r0, [r4, #4]
   221c4:	9b02      	ldr	r3, [sp, #8]
   221c6:	4401      	add	r1, r0
   221c8:	464a      	mov	r2, r9
   221ca:	1958      	adds	r0, r3, r5
   221cc:	f000 fed3 	bl	22f76 <memcpy>
   221d0:	4620      	mov	r0, r4
   221d2:	f000 fa9d 	bl	22710 <linked_list_get_next>
   221d6:	4604      	mov	r4, r0
   221d8:	b92f      	cbnz	r7, 221e6 <stream_handler_get+0xa0>
   221da:	45d8      	cmp	r8, fp
   221dc:	d811      	bhi.n	22202 <stream_handler_get+0xbc>
   221de:	4630      	mov	r0, r6
   221e0:	f7ff ff6c 	bl	220bc <stream_handler_free_packet>
   221e4:	6137      	str	r7, [r6, #16]
   221e6:	2100      	movs	r1, #0
   221e8:	444d      	add	r5, r9
   221ea:	2c00      	cmp	r4, #0
   221ec:	d1d7      	bne.n	2219e <stream_handler_get+0x58>
   221ee:	4628      	mov	r0, r5
   221f0:	f8ca 5004 	str.w	r5, [sl, #4]
   221f4:	b005      	add	sp, #20
   221f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   221fa:	2200      	movs	r2, #0
   221fc:	f8ca 200c 	str.w	r2, [sl, #12]
   22200:	e7c0      	b.n	22184 <stream_handler_get+0x3e>
   22202:	6932      	ldr	r2, [r6, #16]
   22204:	444a      	add	r2, r9
   22206:	6132      	str	r2, [r6, #16]
   22208:	e7ed      	b.n	221e6 <stream_handler_get+0xa0>
   2220a:	f04f 30ff 	mov.w	r0, #4294967295
   2220e:	e7f1      	b.n	221f4 <stream_handler_get+0xae>

00022210 <stream_handler_available>:
   22210:	b510      	push	{r4, lr}
   22212:	4604      	mov	r4, r0
   22214:	68c0      	ldr	r0, [r0, #12]
   22216:	f000 fa73 	bl	22700 <linked_list_peek>
   2221a:	b150      	cbz	r0, 22232 <stream_handler_available+0x22>
   2221c:	6924      	ldr	r4, [r4, #16]
   2221e:	4264      	negs	r4, r4
   22220:	6883      	ldr	r3, [r0, #8]
   22222:	441c      	add	r4, r3
   22224:	f000 fa74 	bl	22710 <linked_list_get_next>
   22228:	2800      	cmp	r0, #0
   2222a:	d1f9      	bne.n	22220 <stream_handler_available+0x10>
   2222c:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   22230:	bd10      	pop	{r4, pc}
   22232:	f04f 30ff 	mov.w	r0, #4294967295
   22236:	e7fb      	b.n	22230 <stream_handler_available+0x20>

00022238 <stream_handler_flush>:
   22238:	68c3      	ldr	r3, [r0, #12]
   2223a:	b510      	push	{r4, lr}
   2223c:	4604      	mov	r4, r0
   2223e:	b923      	cbnz	r3, 2224a <stream_handler_flush+0x12>
   22240:	2016      	movs	r0, #22
   22242:	e007      	b.n	22254 <stream_handler_flush+0x1c>
   22244:	4620      	mov	r0, r4
   22246:	f7ff ff39 	bl	220bc <stream_handler_free_packet>
   2224a:	68e0      	ldr	r0, [r4, #12]
   2224c:	f000 fa5e 	bl	2270c <linked_list_size_get>
   22250:	2800      	cmp	r0, #0
   22252:	d1f7      	bne.n	22244 <stream_handler_flush+0xc>
   22254:	bd10      	pop	{r4, pc}

00022256 <stream_handler_free>:
   22256:	68c3      	ldr	r3, [r0, #12]
   22258:	b510      	push	{r4, lr}
   2225a:	4604      	mov	r4, r0
   2225c:	b133      	cbz	r3, 2226c <stream_handler_free+0x16>
   2225e:	f7ff ffeb 	bl	22238 <stream_handler_flush>
   22262:	68e0      	ldr	r0, [r4, #12]
   22264:	f7f3 fa24 	bl	156b0 <nrf_modem_os_free>
   22268:	2300      	movs	r3, #0
   2226a:	60e3      	str	r3, [r4, #12]
   2226c:	bd10      	pop	{r4, pc}

0002226e <datagram_handler_free_packet>:
   2226e:	b530      	push	{r4, r5, lr}
   22270:	4605      	mov	r5, r0
   22272:	b085      	sub	sp, #20
   22274:	68c0      	ldr	r0, [r0, #12]
   22276:	f000 fa39 	bl	226ec <linked_list_pop>
   2227a:	4604      	mov	r4, r0
   2227c:	b170      	cbz	r0, 2229c <datagram_handler_free_packet+0x2e>
   2227e:	6843      	ldr	r3, [r0, #4]
   22280:	9300      	str	r3, [sp, #0]
   22282:	6883      	ldr	r3, [r0, #8]
   22284:	9301      	str	r3, [sp, #4]
   22286:	6903      	ldr	r3, [r0, #16]
   22288:	9302      	str	r3, [sp, #8]
   2228a:	68c3      	ldr	r3, [r0, #12]
   2228c:	4668      	mov	r0, sp
   2228e:	9303      	str	r3, [sp, #12]
   22290:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   22294:	4798      	blx	r3
   22296:	4620      	mov	r0, r4
   22298:	f7f3 fa0a 	bl	156b0 <nrf_modem_os_free>
   2229c:	b005      	add	sp, #20
   2229e:	bd30      	pop	{r4, r5, pc}

000222a0 <datagram_handler_init>:
   222a0:	b510      	push	{r4, lr}
   222a2:	4604      	mov	r4, r0
   222a4:	200c      	movs	r0, #12
   222a6:	f7f3 f9f9 	bl	1569c <nrf_modem_os_alloc>
   222aa:	60e0      	str	r0, [r4, #12]
   222ac:	b118      	cbz	r0, 222b6 <datagram_handler_init+0x16>
   222ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   222b2:	f000 b9ff 	b.w	226b4 <linked_list_init>
   222b6:	200c      	movs	r0, #12
   222b8:	bd10      	pop	{r4, pc}

000222ba <datagram_handler_put>:
   222ba:	b570      	push	{r4, r5, r6, lr}
   222bc:	4606      	mov	r6, r0
   222be:	2014      	movs	r0, #20
   222c0:	460d      	mov	r5, r1
   222c2:	f7f3 f9eb 	bl	1569c <nrf_modem_os_alloc>
   222c6:	4604      	mov	r4, r0
   222c8:	b178      	cbz	r0, 222ea <datagram_handler_put+0x30>
   222ca:	682b      	ldr	r3, [r5, #0]
   222cc:	4601      	mov	r1, r0
   222ce:	6043      	str	r3, [r0, #4]
   222d0:	686b      	ldr	r3, [r5, #4]
   222d2:	6083      	str	r3, [r0, #8]
   222d4:	68eb      	ldr	r3, [r5, #12]
   222d6:	60c3      	str	r3, [r0, #12]
   222d8:	68ab      	ldr	r3, [r5, #8]
   222da:	6103      	str	r3, [r0, #16]
   222dc:	68f0      	ldr	r0, [r6, #12]
   222de:	f000 f9f2 	bl	226c6 <linked_list_push>
   222e2:	b128      	cbz	r0, 222f0 <datagram_handler_put+0x36>
   222e4:	4620      	mov	r0, r4
   222e6:	f7f3 f9e3 	bl	156b0 <nrf_modem_os_free>
   222ea:	f04f 30ff 	mov.w	r0, #4294967295
   222ee:	e000      	b.n	222f2 <datagram_handler_put+0x38>
   222f0:	6868      	ldr	r0, [r5, #4]
   222f2:	bd70      	pop	{r4, r5, r6, pc}

000222f4 <datagram_handler_get>:
   222f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   222f6:	4607      	mov	r7, r0
   222f8:	68c0      	ldr	r0, [r0, #12]
   222fa:	460c      	mov	r4, r1
   222fc:	4616      	mov	r6, r2
   222fe:	f000 f9ff 	bl	22700 <linked_list_peek>
   22302:	4605      	mov	r5, r0
   22304:	b328      	cbz	r0, 22352 <datagram_handler_get+0x5e>
   22306:	6882      	ldr	r2, [r0, #8]
   22308:	6863      	ldr	r3, [r4, #4]
   2230a:	6820      	ldr	r0, [r4, #0]
   2230c:	429a      	cmp	r2, r3
   2230e:	bf28      	it	cs
   22310:	461a      	movcs	r2, r3
   22312:	6062      	str	r2, [r4, #4]
   22314:	b110      	cbz	r0, 2231c <datagram_handler_get+0x28>
   22316:	6869      	ldr	r1, [r5, #4]
   22318:	f000 fe2d 	bl	22f76 <memcpy>
   2231c:	68a0      	ldr	r0, [r4, #8]
   2231e:	b1a8      	cbz	r0, 2234c <datagram_handler_get+0x58>
   22320:	6929      	ldr	r1, [r5, #16]
   22322:	b199      	cbz	r1, 2234c <datagram_handler_get+0x58>
   22324:	68eb      	ldr	r3, [r5, #12]
   22326:	b18b      	cbz	r3, 2234c <datagram_handler_get+0x58>
   22328:	68e2      	ldr	r2, [r4, #12]
   2232a:	429a      	cmp	r2, r3
   2232c:	bf28      	it	cs
   2232e:	461a      	movcs	r2, r3
   22330:	60e2      	str	r2, [r4, #12]
   22332:	f000 fe20 	bl	22f76 <memcpy>
   22336:	0732      	lsls	r2, r6, #28
   22338:	68ad      	ldr	r5, [r5, #8]
   2233a:	d402      	bmi.n	22342 <datagram_handler_get+0x4e>
   2233c:	4638      	mov	r0, r7
   2233e:	f7ff ff96 	bl	2226e <datagram_handler_free_packet>
   22342:	06b3      	lsls	r3, r6, #26
   22344:	bf4c      	ite	mi
   22346:	4628      	movmi	r0, r5
   22348:	6860      	ldrpl	r0, [r4, #4]
   2234a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2234c:	2300      	movs	r3, #0
   2234e:	60e3      	str	r3, [r4, #12]
   22350:	e7f1      	b.n	22336 <datagram_handler_get+0x42>
   22352:	f04f 30ff 	mov.w	r0, #4294967295
   22356:	e7f8      	b.n	2234a <datagram_handler_get+0x56>

00022358 <datagram_handler_available>:
   22358:	b508      	push	{r3, lr}
   2235a:	68c0      	ldr	r0, [r0, #12]
   2235c:	f000 f9d0 	bl	22700 <linked_list_peek>
   22360:	b108      	cbz	r0, 22366 <datagram_handler_available+0xe>
   22362:	6880      	ldr	r0, [r0, #8]
   22364:	bd08      	pop	{r3, pc}
   22366:	f04f 30ff 	mov.w	r0, #4294967295
   2236a:	e7fb      	b.n	22364 <datagram_handler_available+0xc>

0002236c <datagram_handler_flush>:
   2236c:	68c3      	ldr	r3, [r0, #12]
   2236e:	b510      	push	{r4, lr}
   22370:	4604      	mov	r4, r0
   22372:	b923      	cbnz	r3, 2237e <datagram_handler_flush+0x12>
   22374:	2016      	movs	r0, #22
   22376:	e007      	b.n	22388 <datagram_handler_flush+0x1c>
   22378:	4620      	mov	r0, r4
   2237a:	f7ff ff78 	bl	2226e <datagram_handler_free_packet>
   2237e:	68e0      	ldr	r0, [r4, #12]
   22380:	f000 f9c4 	bl	2270c <linked_list_size_get>
   22384:	2800      	cmp	r0, #0
   22386:	d1f7      	bne.n	22378 <datagram_handler_flush+0xc>
   22388:	bd10      	pop	{r4, pc}

0002238a <datagram_handler_free>:
   2238a:	68c3      	ldr	r3, [r0, #12]
   2238c:	b510      	push	{r4, lr}
   2238e:	4604      	mov	r4, r0
   22390:	b133      	cbz	r3, 223a0 <datagram_handler_free+0x16>
   22392:	f7ff ffeb 	bl	2236c <datagram_handler_flush>
   22396:	68e0      	ldr	r0, [r4, #12]
   22398:	f7f3 f98a 	bl	156b0 <nrf_modem_os_free>
   2239c:	2300      	movs	r3, #0
   2239e:	60e3      	str	r3, [r4, #12]
   223a0:	bd10      	pop	{r4, pc}

000223a2 <packet_handler_delete>:
   223a2:	b510      	push	{r4, lr}
   223a4:	4604      	mov	r4, r0
   223a6:	6803      	ldr	r3, [r0, #0]
   223a8:	691b      	ldr	r3, [r3, #16]
   223aa:	4798      	blx	r3
   223ac:	6823      	ldr	r3, [r4, #0]
   223ae:	4620      	mov	r0, r4
   223b0:	695b      	ldr	r3, [r3, #20]
   223b2:	4798      	blx	r3
   223b4:	4620      	mov	r0, r4
   223b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   223ba:	f7f3 b979 	b.w	156b0 <nrf_modem_os_free>

000223be <nrf_modem_platform_error_handler>:
   223be:	b508      	push	{r3, lr}
   223c0:	f7ef fc72 	bl	11ca8 <nrf_modem_recoverable_error_handler>
   223c4:	bd08      	pop	{r3, pc}

000223c6 <unimplemented_method>:
   223c6:	b40f      	push	{r0, r1, r2, r3}
   223c8:	b508      	push	{r3, lr}
   223ca:	202d      	movs	r0, #45	; 0x2d
   223cc:	f7f2 ffd8 	bl	15380 <nrf_modem_os_errno_set>
   223d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   223d4:	f04f 30ff 	mov.w	r0, #4294967295
   223d8:	b004      	add	sp, #16
   223da:	4770      	bx	lr

000223dc <rpc_transport_ipc_fault_handler>:
   223dc:	f7ff bfef 	b.w	223be <nrf_modem_platform_error_handler>

000223e0 <nrf_modem_platform_init>:
   223e0:	b513      	push	{r0, r1, r4, lr}
   223e2:	4604      	mov	r4, r0
   223e4:	f7f3 f97e 	bl	156e4 <nrf_modem_os_init>
   223e8:	6a23      	ldr	r3, [r4, #32]
   223ea:	4668      	mov	r0, sp
   223ec:	9400      	str	r4, [sp, #0]
   223ee:	f88d 3004 	strb.w	r3, [sp, #4]
   223f2:	f7f4 fe15 	bl	17020 <rpc_transport_ipc_init>
   223f6:	b920      	cbnz	r0, 22402 <nrf_modem_platform_init+0x22>
   223f8:	f7f4 ff76 	bl	172e8 <interface_init>
   223fc:	b118      	cbz	r0, 22406 <nrf_modem_platform_init+0x26>
   223fe:	f04f 30ff 	mov.w	r0, #4294967295
   22402:	b002      	add	sp, #8
   22404:	bd10      	pop	{r4, pc}
   22406:	f7f6 fcf9 	bl	18dfc <at_interface_init>
   2240a:	2800      	cmp	r0, #0
   2240c:	d1f7      	bne.n	223fe <nrf_modem_platform_init+0x1e>
   2240e:	f7f6 fd5b 	bl	18ec8 <nrf_modem_at_init>
   22412:	2800      	cmp	r0, #0
   22414:	d1f5      	bne.n	22402 <nrf_modem_platform_init+0x22>
   22416:	f7f5 f8d9 	bl	175cc <ip_interface_init>
   2241a:	2800      	cmp	r0, #0
   2241c:	d1ef      	bne.n	223fe <nrf_modem_platform_init+0x1e>
   2241e:	f7f6 f93d 	bl	1869c <tls_interface_init>
   22422:	2800      	cmp	r0, #0
   22424:	d1eb      	bne.n	223fe <nrf_modem_platform_init+0x1e>
   22426:	f7f6 fe07 	bl	19038 <mfu_interface_init>
   2242a:	2800      	cmp	r0, #0
   2242c:	d1e7      	bne.n	223fe <nrf_modem_platform_init+0x1e>
   2242e:	f7f7 fff3 	bl	1a418 <pdn_interface_init>
   22432:	2800      	cmp	r0, #0
   22434:	d1e3      	bne.n	223fe <nrf_modem_platform_init+0x1e>
   22436:	f7f7 fb71 	bl	19b1c <gnss_interface_init>
   2243a:	3800      	subs	r0, #0
   2243c:	bf18      	it	ne
   2243e:	2001      	movne	r0, #1
   22440:	4240      	negs	r0, r0
   22442:	e7de      	b.n	22402 <nrf_modem_platform_init+0x22>

00022444 <internal_poll>:
   22444:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22448:	2600      	movs	r6, #0
   2244a:	4688      	mov	r8, r1
   2244c:	4604      	mov	r4, r0
   2244e:	4637      	mov	r7, r6
   22450:	4546      	cmp	r6, r8
   22452:	d103      	bne.n	2245c <internal_poll+0x18>
   22454:	4638      	mov	r0, r7
   22456:	b002      	add	sp, #8
   22458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2245c:	88a5      	ldrh	r5, [r4, #4]
   2245e:	6820      	ldr	r0, [r4, #0]
   22460:	a901      	add	r1, sp, #4
   22462:	f7ff f966 	bl	21732 <interface_socket_event_get>
   22466:	f005 0503 	and.w	r5, r5, #3
   2246a:	9b01      	ldr	r3, [sp, #4]
   2246c:	f045 051c 	orr.w	r5, r5, #28
   22470:	401d      	ands	r5, r3
   22472:	6820      	ldr	r0, [r4, #0]
   22474:	80e5      	strh	r5, [r4, #6]
   22476:	f7f4 ffcd 	bl	17414 <interface_socket_from_handle_get>
   2247a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   2247e:	b168      	cbz	r0, 2249c <internal_poll+0x58>
   22480:	071a      	lsls	r2, r3, #28
   22482:	d50b      	bpl.n	2249c <internal_poll+0x58>
   22484:	6942      	ldr	r2, [r0, #20]
   22486:	2a01      	cmp	r2, #1
   22488:	d003      	beq.n	22492 <internal_poll+0x4e>
   2248a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
   2248e:	2a01      	cmp	r2, #1
   22490:	d802      	bhi.n	22498 <internal_poll+0x54>
   22492:	f043 0301 	orr.w	r3, r3, #1
   22496:	80e3      	strh	r3, [r4, #6]
   22498:	3701      	adds	r7, #1
   2249a:	e001      	b.n	224a0 <internal_poll+0x5c>
   2249c:	2b00      	cmp	r3, #0
   2249e:	d1fb      	bne.n	22498 <internal_poll+0x54>
   224a0:	3601      	adds	r6, #1
   224a2:	3408      	adds	r4, #8
   224a4:	e7d4      	b.n	22450 <internal_poll+0xc>

000224a6 <nrf_modem_platform_getaddrinfo>:
   224a6:	f7f5 bd07 	b.w	17eb8 <ip_interface_getaddrinfo>

000224aa <nrf_modem_platform_freeaddrinfo>:
   224aa:	f7f5 be1d 	b.w	180e8 <ip_interface_freeaddrinfo>

000224ae <nrf_modem_platform_poll>:
   224ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   224b0:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   224b4:	2909      	cmp	r1, #9
   224b6:	4605      	mov	r5, r0
   224b8:	460e      	mov	r6, r1
   224ba:	9201      	str	r2, [sp, #4]
   224bc:	d906      	bls.n	224cc <nrf_modem_platform_poll+0x1e>
   224be:	2016      	movs	r0, #22
   224c0:	f7f2 ff5e 	bl	15380 <nrf_modem_os_errno_set>
   224c4:	f04f 30ff 	mov.w	r0, #4294967295
   224c8:	b002      	add	sp, #8
   224ca:	bd70      	pop	{r4, r5, r6, pc}
   224cc:	b910      	cbnz	r0, 224d4 <nrf_modem_platform_poll+0x26>
   224ce:	b109      	cbz	r1, 224d4 <nrf_modem_platform_poll+0x26>
   224d0:	200e      	movs	r0, #14
   224d2:	e7f5      	b.n	224c0 <nrf_modem_platform_poll+0x12>
   224d4:	4631      	mov	r1, r6
   224d6:	4628      	mov	r0, r5
   224d8:	f7ff ffb4 	bl	22444 <internal_poll>
   224dc:	2400      	movs	r4, #0
   224de:	2800      	cmp	r0, #0
   224e0:	d1f2      	bne.n	224c8 <nrf_modem_platform_poll+0x1a>
   224e2:	2c00      	cmp	r4, #0
   224e4:	d1f0      	bne.n	224c8 <nrf_modem_platform_poll+0x1a>
   224e6:	4628      	mov	r0, r5
   224e8:	a901      	add	r1, sp, #4
   224ea:	f7fd fea4 	bl	20236 <nrf_modem_os_timedwait>
   224ee:	4604      	mov	r4, r0
   224f0:	b118      	cbz	r0, 224fa <nrf_modem_platform_poll+0x4c>
   224f2:	283c      	cmp	r0, #60	; 0x3c
   224f4:	d001      	beq.n	224fa <nrf_modem_platform_poll+0x4c>
   224f6:	2023      	movs	r0, #35	; 0x23
   224f8:	e7e2      	b.n	224c0 <nrf_modem_platform_poll+0x12>
   224fa:	4631      	mov	r1, r6
   224fc:	4628      	mov	r0, r5
   224fe:	f7ff ffa1 	bl	22444 <internal_poll>
   22502:	e7ec      	b.n	224de <nrf_modem_platform_poll+0x30>

00022504 <nrf_socket>:
   22504:	b570      	push	{r4, r5, r6, lr}
   22506:	4604      	mov	r4, r0
   22508:	460d      	mov	r5, r1
   2250a:	4616      	mov	r6, r2
   2250c:	f7f8 fbf4 	bl	1acf8 <nrf_modem_platform_af_method_table_get>
   22510:	b130      	cbz	r0, 22520 <nrf_socket+0x1c>
   22512:	4632      	mov	r2, r6
   22514:	4629      	mov	r1, r5
   22516:	6803      	ldr	r3, [r0, #0]
   22518:	4620      	mov	r0, r4
   2251a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2251e:	4718      	bx	r3
   22520:	f04f 30ff 	mov.w	r0, #4294967295
   22524:	bd70      	pop	{r4, r5, r6, pc}

00022526 <nrf_close>:
   22526:	b510      	push	{r4, lr}
   22528:	4604      	mov	r4, r0
   2252a:	f7f8 fc37 	bl	1ad9c <nrf_modem_platform_fd_method_table_get>
   2252e:	b120      	cbz	r0, 2253a <nrf_close+0x14>
   22530:	6843      	ldr	r3, [r0, #4]
   22532:	4620      	mov	r0, r4
   22534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22538:	4718      	bx	r3
   2253a:	f04f 30ff 	mov.w	r0, #4294967295
   2253e:	bd10      	pop	{r4, pc}

00022540 <nrf_sendto>:
   22540:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   22542:	4604      	mov	r4, r0
   22544:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   22548:	e9cd 2102 	strd	r2, r1, [sp, #8]
   2254c:	9301      	str	r3, [sp, #4]
   2254e:	f7f8 fc25 	bl	1ad9c <nrf_modem_platform_fd_method_table_get>
   22552:	b158      	cbz	r0, 2256c <nrf_sendto+0x2c>
   22554:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   22558:	e9cd 5608 	strd	r5, r6, [sp, #32]
   2255c:	6885      	ldr	r5, [r0, #8]
   2255e:	4620      	mov	r0, r4
   22560:	46ac      	mov	ip, r5
   22562:	9903      	ldr	r1, [sp, #12]
   22564:	b004      	add	sp, #16
   22566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2256a:	4760      	bx	ip
   2256c:	f04f 30ff 	mov.w	r0, #4294967295
   22570:	b004      	add	sp, #16
   22572:	bd70      	pop	{r4, r5, r6, pc}

00022574 <nrf_recvfrom>:
   22574:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   22576:	4604      	mov	r4, r0
   22578:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   2257c:	e9cd 2102 	strd	r2, r1, [sp, #8]
   22580:	9301      	str	r3, [sp, #4]
   22582:	f7f8 fc0b 	bl	1ad9c <nrf_modem_platform_fd_method_table_get>
   22586:	b158      	cbz	r0, 225a0 <nrf_recvfrom+0x2c>
   22588:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   2258c:	e9cd 5608 	strd	r5, r6, [sp, #32]
   22590:	68c5      	ldr	r5, [r0, #12]
   22592:	4620      	mov	r0, r4
   22594:	46ac      	mov	ip, r5
   22596:	9903      	ldr	r1, [sp, #12]
   22598:	b004      	add	sp, #16
   2259a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2259e:	4760      	bx	ip
   225a0:	f04f 30ff 	mov.w	r0, #4294967295
   225a4:	b004      	add	sp, #16
   225a6:	bd70      	pop	{r4, r5, r6, pc}

000225a8 <nrf_connect>:
   225a8:	b513      	push	{r0, r1, r4, lr}
   225aa:	4604      	mov	r4, r0
   225ac:	e9cd 2100 	strd	r2, r1, [sp]
   225b0:	f7f8 fbf4 	bl	1ad9c <nrf_modem_platform_fd_method_table_get>
   225b4:	b138      	cbz	r0, 225c6 <nrf_connect+0x1e>
   225b6:	e9dd 2100 	ldrd	r2, r1, [sp]
   225ba:	6943      	ldr	r3, [r0, #20]
   225bc:	4620      	mov	r0, r4
   225be:	b002      	add	sp, #8
   225c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   225c4:	4718      	bx	r3
   225c6:	f04f 30ff 	mov.w	r0, #4294967295
   225ca:	b002      	add	sp, #8
   225cc:	bd10      	pop	{r4, pc}

000225ce <nrf_listen>:
   225ce:	b513      	push	{r0, r1, r4, lr}
   225d0:	4604      	mov	r4, r0
   225d2:	9101      	str	r1, [sp, #4]
   225d4:	f7f8 fbe2 	bl	1ad9c <nrf_modem_platform_fd_method_table_get>
   225d8:	b130      	cbz	r0, 225e8 <nrf_listen+0x1a>
   225da:	6983      	ldr	r3, [r0, #24]
   225dc:	4620      	mov	r0, r4
   225de:	9901      	ldr	r1, [sp, #4]
   225e0:	b002      	add	sp, #8
   225e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   225e6:	4718      	bx	r3
   225e8:	f04f 30ff 	mov.w	r0, #4294967295
   225ec:	b002      	add	sp, #8
   225ee:	bd10      	pop	{r4, pc}

000225f0 <nrf_accept>:
   225f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   225f2:	4604      	mov	r4, r0
   225f4:	e9cd 2100 	strd	r2, r1, [sp]
   225f8:	f7f8 fbd0 	bl	1ad9c <nrf_modem_platform_fd_method_table_get>
   225fc:	b148      	cbz	r0, 22612 <nrf_accept+0x22>
   225fe:	e9dd 2100 	ldrd	r2, r1, [sp]
   22602:	69c5      	ldr	r5, [r0, #28]
   22604:	2300      	movs	r3, #0
   22606:	4620      	mov	r0, r4
   22608:	46ac      	mov	ip, r5
   2260a:	b003      	add	sp, #12
   2260c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   22610:	4760      	bx	ip
   22612:	f04f 30ff 	mov.w	r0, #4294967295
   22616:	b003      	add	sp, #12
   22618:	bd30      	pop	{r4, r5, pc}

0002261a <nrf_bind>:
   2261a:	b513      	push	{r0, r1, r4, lr}
   2261c:	4604      	mov	r4, r0
   2261e:	e9cd 2100 	strd	r2, r1, [sp]
   22622:	f7f8 fbbb 	bl	1ad9c <nrf_modem_platform_fd_method_table_get>
   22626:	b138      	cbz	r0, 22638 <nrf_bind+0x1e>
   22628:	e9dd 2100 	ldrd	r2, r1, [sp]
   2262c:	6903      	ldr	r3, [r0, #16]
   2262e:	4620      	mov	r0, r4
   22630:	b002      	add	sp, #8
   22632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22636:	4718      	bx	r3
   22638:	f04f 30ff 	mov.w	r0, #4294967295
   2263c:	b002      	add	sp, #8
   2263e:	bd10      	pop	{r4, pc}

00022640 <nrf_setsockopt>:
   22640:	b530      	push	{r4, r5, lr}
   22642:	b085      	sub	sp, #20
   22644:	4604      	mov	r4, r0
   22646:	e9cd 2102 	strd	r2, r1, [sp, #8]
   2264a:	9d08      	ldr	r5, [sp, #32]
   2264c:	9301      	str	r3, [sp, #4]
   2264e:	f7f8 fba5 	bl	1ad9c <nrf_modem_platform_fd_method_table_get>
   22652:	b150      	cbz	r0, 2266a <nrf_setsockopt+0x2a>
   22654:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   22658:	9508      	str	r5, [sp, #32]
   2265a:	6a05      	ldr	r5, [r0, #32]
   2265c:	4620      	mov	r0, r4
   2265e:	46ac      	mov	ip, r5
   22660:	9903      	ldr	r1, [sp, #12]
   22662:	b005      	add	sp, #20
   22664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   22668:	4760      	bx	ip
   2266a:	f04f 30ff 	mov.w	r0, #4294967295
   2266e:	b005      	add	sp, #20
   22670:	bd30      	pop	{r4, r5, pc}

00022672 <nrf_getsockopt>:
   22672:	b530      	push	{r4, r5, lr}
   22674:	b085      	sub	sp, #20
   22676:	4604      	mov	r4, r0
   22678:	e9cd 2102 	strd	r2, r1, [sp, #8]
   2267c:	9d08      	ldr	r5, [sp, #32]
   2267e:	9301      	str	r3, [sp, #4]
   22680:	f7f8 fb8c 	bl	1ad9c <nrf_modem_platform_fd_method_table_get>
   22684:	b150      	cbz	r0, 2269c <nrf_getsockopt+0x2a>
   22686:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   2268a:	9508      	str	r5, [sp, #32]
   2268c:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2268e:	4620      	mov	r0, r4
   22690:	46ac      	mov	ip, r5
   22692:	9903      	ldr	r1, [sp, #12]
   22694:	b005      	add	sp, #20
   22696:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2269a:	4760      	bx	ip
   2269c:	f04f 30ff 	mov.w	r0, #4294967295
   226a0:	b005      	add	sp, #20
   226a2:	bd30      	pop	{r4, r5, pc}

000226a4 <nrf_getaddrinfo>:
   226a4:	f7ff beff 	b.w	224a6 <nrf_modem_platform_getaddrinfo>

000226a8 <nrf_freeaddrinfo>:
   226a8:	f7ff beff 	b.w	224aa <nrf_modem_platform_freeaddrinfo>

000226ac <nrf_poll>:
   226ac:	f7ff beff 	b.w	224ae <nrf_modem_platform_poll>

000226b0 <nrf_fcntl>:
   226b0:	f7f8 bba4 	b.w	1adfc <nrf_modem_platform_fcntl>

000226b4 <linked_list_init>:
   226b4:	b128      	cbz	r0, 226c2 <linked_list_init+0xe>
   226b6:	2300      	movs	r3, #0
   226b8:	e9c0 3301 	strd	r3, r3, [r0, #4]
   226bc:	6003      	str	r3, [r0, #0]
   226be:	4618      	mov	r0, r3
   226c0:	4770      	bx	lr
   226c2:	2016      	movs	r0, #22
   226c4:	4770      	bx	lr

000226c6 <linked_list_push>:
   226c6:	6803      	ldr	r3, [r0, #0]
   226c8:	3301      	adds	r3, #1
   226ca:	d00d      	beq.n	226e8 <linked_list_push+0x22>
   226cc:	2300      	movs	r3, #0
   226ce:	600b      	str	r3, [r1, #0]
   226d0:	6803      	ldr	r3, [r0, #0]
   226d2:	b933      	cbnz	r3, 226e2 <linked_list_push+0x1c>
   226d4:	6041      	str	r1, [r0, #4]
   226d6:	6803      	ldr	r3, [r0, #0]
   226d8:	6081      	str	r1, [r0, #8]
   226da:	3301      	adds	r3, #1
   226dc:	6003      	str	r3, [r0, #0]
   226de:	2000      	movs	r0, #0
   226e0:	4770      	bx	lr
   226e2:	6883      	ldr	r3, [r0, #8]
   226e4:	6019      	str	r1, [r3, #0]
   226e6:	e7f6      	b.n	226d6 <linked_list_push+0x10>
   226e8:	200c      	movs	r0, #12
   226ea:	4770      	bx	lr

000226ec <linked_list_pop>:
   226ec:	4603      	mov	r3, r0
   226ee:	6800      	ldr	r0, [r0, #0]
   226f0:	b128      	cbz	r0, 226fe <linked_list_pop+0x12>
   226f2:	6858      	ldr	r0, [r3, #4]
   226f4:	6802      	ldr	r2, [r0, #0]
   226f6:	605a      	str	r2, [r3, #4]
   226f8:	681a      	ldr	r2, [r3, #0]
   226fa:	3a01      	subs	r2, #1
   226fc:	601a      	str	r2, [r3, #0]
   226fe:	4770      	bx	lr

00022700 <linked_list_peek>:
   22700:	6803      	ldr	r3, [r0, #0]
   22702:	b10b      	cbz	r3, 22708 <linked_list_peek+0x8>
   22704:	6840      	ldr	r0, [r0, #4]
   22706:	4770      	bx	lr
   22708:	4618      	mov	r0, r3
   2270a:	4770      	bx	lr

0002270c <linked_list_size_get>:
   2270c:	6800      	ldr	r0, [r0, #0]
   2270e:	4770      	bx	lr

00022710 <linked_list_get_next>:
   22710:	6800      	ldr	r0, [r0, #0]
   22712:	4770      	bx	lr

00022714 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   22714:	b148      	cbz	r0, 2272a <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   22716:	68c3      	ldr	r3, [r0, #12]
   22718:	8818      	ldrh	r0, [r3, #0]
   2271a:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2271e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   22722:	bf14      	ite	ne
   22724:	2000      	movne	r0, #0
   22726:	2001      	moveq	r0, #1
   22728:	4770      	bx	lr
		return false;
   2272a:	2000      	movs	r0, #0
}
   2272c:	4770      	bx	lr

0002272e <arch_system_halt>:
	__asm__ volatile(
   2272e:	f04f 0220 	mov.w	r2, #32
   22732:	f3ef 8311 	mrs	r3, BASEPRI
   22736:	f382 8811 	msr	BASEPRI, r2
   2273a:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   2273e:	e7fe      	b.n	2273e <arch_system_halt+0x10>

00022740 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   22740:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   22742:	f7ff fff4 	bl	2272e <arch_system_halt>

00022746 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   22746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22748:	4605      	mov	r5, r0
   2274a:	460e      	mov	r6, r1
   2274c:	f04f 0320 	mov.w	r3, #32
   22750:	f3ef 8711 	mrs	r7, BASEPRI
   22754:	f383 8811 	msr	BASEPRI, r3
   22758:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   2275c:	f7f9 fb7a 	bl	1be54 <z_impl_k_current_get>
   22760:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   22762:	4631      	mov	r1, r6
   22764:	4628      	mov	r0, r5
   22766:	f7ff ffeb 	bl	22740 <k_sys_fatal_error_handler>
	__asm__ volatile(
   2276a:	f387 8811 	msr	BASEPRI, r7
   2276e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   22772:	4620      	mov	r0, r4
   22774:	f7f1 fd3e 	bl	141f4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   22778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002277a <k_heap_init>:
{
   2277a:	b510      	push	{r4, lr}
   2277c:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   22780:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   22782:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   22784:	f7fc f84f 	bl	1e826 <sys_heap_init>
}
   22788:	bd10      	pop	{r4, pc}

0002278a <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2278a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2278e:	b087      	sub	sp, #28
   22790:	4680      	mov	r8, r0
   22792:	9103      	str	r1, [sp, #12]
   22794:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   22796:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   2279a:	f000 fad6 	bl	22d4a <sys_clock_timeout_end_calc>
   2279e:	4681      	mov	r9, r0
   227a0:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   227a2:	f108 0314 	add.w	r3, r8, #20
   227a6:	9305      	str	r3, [sp, #20]
	__asm__ volatile(
   227a8:	f04f 0320 	mov.w	r3, #32
   227ac:	f3ef 8511 	mrs	r5, BASEPRI
   227b0:	f383 8811 	msr	BASEPRI, r3
   227b4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   227b8:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   227bc:	4654      	mov	r4, sl

	while (ret == NULL) {
   227be:	e00f      	b.n	227e0 <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   227c0:	e9cd 6700 	strd	r6, r7, [sp]
   227c4:	f108 020c 	add.w	r2, r8, #12
   227c8:	4629      	mov	r1, r5
   227ca:	9805      	ldr	r0, [sp, #20]
   227cc:	f7f9 f85c 	bl	1b888 <z_pend_curr>
   227d0:	f04f 0320 	mov.w	r3, #32
   227d4:	f3ef 8511 	mrs	r5, BASEPRI
   227d8:	f383 8811 	msr	BASEPRI, r3
   227dc:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   227e0:	b9b4      	cbnz	r4, 22810 <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   227e2:	9a04      	ldr	r2, [sp, #16]
   227e4:	9903      	ldr	r1, [sp, #12]
   227e6:	4640      	mov	r0, r8
   227e8:	f7fb ff8f 	bl	1e70a <sys_heap_aligned_alloc>
   227ec:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   227ee:	f7f9 fcef 	bl	1c1d0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   227f2:	b96c      	cbnz	r4, 22810 <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
   227f4:	ebb9 0600 	subs.w	r6, r9, r0
   227f8:	eb6b 0701 	sbc.w	r7, fp, r1
   227fc:	2e01      	cmp	r6, #1
   227fe:	f177 0300 	sbcs.w	r3, r7, #0
   22802:	db05      	blt.n	22810 <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
   22804:	f1ba 0f00 	cmp.w	sl, #0
   22808:	d1da      	bne.n	227c0 <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
   2280a:	f04f 0a01 	mov.w	sl, #1
   2280e:	e7d7      	b.n	227c0 <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
   22810:	f385 8811 	msr	BASEPRI, r5
   22814:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   22818:	4620      	mov	r0, r4
   2281a:	b007      	add	sp, #28
   2281c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022820 <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   22820:	b500      	push	{lr}
   22822:	b083      	sub	sp, #12
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   22824:	e9cd 2300 	strd	r2, r3, [sp]
   22828:	460a      	mov	r2, r1
   2282a:	2104      	movs	r1, #4
   2282c:	f7ff ffad 	bl	2278a <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   22830:	b003      	add	sp, #12
   22832:	f85d fb04 	ldr.w	pc, [sp], #4

00022836 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   22836:	b570      	push	{r4, r5, r6, lr}
   22838:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2283a:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   2283e:	f04f 0320 	mov.w	r3, #32
   22842:	f3ef 8511 	mrs	r5, BASEPRI
   22846:	f383 8811 	msr	BASEPRI, r3
   2284a:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   2284e:	f7fb fefa 	bl	1e646 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   22852:	f104 000c 	add.w	r0, r4, #12
   22856:	f000 f9ac 	bl	22bb2 <z_unpend_all>
   2285a:	b920      	cbnz	r0, 22866 <k_heap_free+0x30>
	__asm__ volatile(
   2285c:	f385 8811 	msr	BASEPRI, r5
   22860:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   22864:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   22866:	4629      	mov	r1, r5
   22868:	4630      	mov	r0, r6
   2286a:	f7f8 ff97 	bl	1b79c <z_reschedule>
   2286e:	e7f9      	b.n	22864 <k_heap_free+0x2e>

00022870 <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   22870:	3207      	adds	r2, #7
   22872:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   22876:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   2287a:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   2287e:	2300      	movs	r3, #0
   22880:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
   22884:	1888      	adds	r0, r1, r2
   22886:	4770      	bx	lr

00022888 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   22888:	f3ef 8005 	mrs	r0, IPSR
}
   2288c:	3800      	subs	r0, #0
   2288e:	bf18      	it	ne
   22890:	2001      	movne	r0, #1
   22892:	4770      	bx	lr

00022894 <z_impl_k_thread_start>:
{
   22894:	b508      	push	{r3, lr}
	z_sched_start(thread);
   22896:	f7f9 f943 	bl	1bb20 <z_sched_start>
}
   2289a:	bd08      	pop	{r3, pc}

0002289c <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   2289c:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   2289e:	2400      	movs	r4, #0
   228a0:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   228a2:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   228a4:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   228a6:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   228a8:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   228aa:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   228ac:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   228ae:	f85d 4b04 	ldr.w	r4, [sp], #4
   228b2:	4770      	bx	lr

000228b4 <z_impl_k_thread_create>:
{
   228b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   228b6:	b087      	sub	sp, #28
   228b8:	4604      	mov	r4, r0
   228ba:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   228be:	2500      	movs	r5, #0
   228c0:	9505      	str	r5, [sp, #20]
   228c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
   228c4:	9504      	str	r5, [sp, #16]
   228c6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   228c8:	9503      	str	r5, [sp, #12]
   228ca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   228cc:	9502      	str	r5, [sp, #8]
   228ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   228d0:	9501      	str	r5, [sp, #4]
   228d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   228d4:	9500      	str	r5, [sp, #0]
   228d6:	f7f8 fc5d 	bl	1b194 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   228da:	f1b7 3fff 	cmp.w	r7, #4294967295
   228de:	bf08      	it	eq
   228e0:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   228e4:	d102      	bne.n	228ec <z_impl_k_thread_create+0x38>
}
   228e6:	4620      	mov	r0, r4
   228e8:	b007      	add	sp, #28
   228ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   228ec:	4632      	mov	r2, r6
   228ee:	463b      	mov	r3, r7
   228f0:	4620      	mov	r0, r4
   228f2:	f7f8 fc3d 	bl	1b170 <schedule_new_thread>
   228f6:	e7f6      	b.n	228e6 <z_impl_k_thread_create+0x32>

000228f8 <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
   228f8:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
   228fa:	f7f0 fe63 	bl	135c4 <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
   228fe:	f7fc ffee 	bl	1f8de <sys_clock_idle_exit>
}
   22902:	bd08      	pop	{r3, pc}

00022904 <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
   22904:	b508      	push	{r3, lr}
	__asm__ volatile(
   22906:	f04f 0220 	mov.w	r2, #32
   2290a:	f3ef 8311 	mrs	r3, BASEPRI
   2290e:	f382 8811 	msr	BASEPRI, r2
   22912:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
   22916:	f7f8 fcef 	bl	1b2f8 <pm_save_idle>
   2291a:	e7f4      	b.n	22906 <idle+0x2>

0002291c <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   2291c:	4288      	cmp	r0, r1
   2291e:	da00      	bge.n	22922 <new_prio_for_inheritance+0x6>
   22920:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   22922:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   22926:	db01      	blt.n	2292c <new_prio_for_inheritance+0x10>
   22928:	4608      	mov	r0, r1
   2292a:	4770      	bx	lr
   2292c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   22930:	4770      	bx	lr

00022932 <adjust_owner_prio>:
{
   22932:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   22934:	6880      	ldr	r0, [r0, #8]
   22936:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2293a:	428b      	cmp	r3, r1
   2293c:	d101      	bne.n	22942 <adjust_owner_prio+0x10>
	return false;
   2293e:	2000      	movs	r0, #0
}
   22940:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   22942:	f7f9 f90b 	bl	1bb5c <z_set_prio>
   22946:	e7fb      	b.n	22940 <adjust_owner_prio+0xe>

00022948 <z_impl_k_mutex_init>:
{
   22948:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2294a:	2000      	movs	r0, #0
   2294c:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   2294e:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   22950:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   22952:	605b      	str	r3, [r3, #4]
}
   22954:	4770      	bx	lr

00022956 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   22956:	b15a      	cbz	r2, 22970 <z_impl_k_sem_init+0x1a>
   22958:	428a      	cmp	r2, r1
   2295a:	d30c      	bcc.n	22976 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   2295c:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   2295e:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   22960:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   22962:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   22964:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   22968:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2296a:	6143      	str	r3, [r0, #20]
	return 0;
   2296c:	2000      	movs	r0, #0
   2296e:	4770      	bx	lr
		return -EINVAL;
   22970:	f06f 0015 	mvn.w	r0, #21
   22974:	4770      	bx	lr
   22976:	f06f 0015 	mvn.w	r0, #21
}
   2297a:	4770      	bx	lr

0002297c <thread_active_elsewhere>:
}
   2297c:	2000      	movs	r0, #0
   2297e:	4770      	bx	lr

00022980 <pended_on_thread>:
}
   22980:	6880      	ldr	r0, [r0, #8]
   22982:	4770      	bx	lr

00022984 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   22984:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   22988:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2298c:	4283      	cmp	r3, r0
   2298e:	d001      	beq.n	22994 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   22990:	1ac0      	subs	r0, r0, r3
   22992:	4770      	bx	lr
	return 0;
   22994:	2000      	movs	r0, #0
}
   22996:	4770      	bx	lr

00022998 <z_reschedule_irqlock>:
{
   22998:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2299a:	4603      	mov	r3, r0
   2299c:	b920      	cbnz	r0, 229a8 <z_reschedule_irqlock+0x10>
   2299e:	f3ef 8205 	mrs	r2, IPSR
   229a2:	b942      	cbnz	r2, 229b6 <z_reschedule_irqlock+0x1e>
   229a4:	2201      	movs	r2, #1
   229a6:	e000      	b.n	229aa <z_reschedule_irqlock+0x12>
   229a8:	2200      	movs	r2, #0
	if (resched(key)) {
   229aa:	b932      	cbnz	r2, 229ba <z_reschedule_irqlock+0x22>
	__asm__ volatile(
   229ac:	f383 8811 	msr	BASEPRI, r3
   229b0:	f3bf 8f6f 	isb	sy
}
   229b4:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   229b6:	2200      	movs	r2, #0
   229b8:	e7f7      	b.n	229aa <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   229ba:	4618      	mov	r0, r3
   229bc:	f7f1 f964 	bl	13c88 <arch_swap>
	return ret;
   229c0:	e7f8      	b.n	229b4 <z_reschedule_irqlock+0x1c>

000229c2 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   229c2:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   229c4:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   229c6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   229c8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   229ca:	2300      	movs	r3, #0
   229cc:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   229ce:	604b      	str	r3, [r1, #4]
}
   229d0:	4770      	bx	lr

000229d2 <z_unpend_thread>:
{
   229d2:	b538      	push	{r3, r4, r5, lr}
   229d4:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   229d6:	2300      	movs	r3, #0
	__asm__ volatile(
   229d8:	f04f 0220 	mov.w	r2, #32
   229dc:	f3ef 8511 	mrs	r5, BASEPRI
   229e0:	f382 8811 	msr	BASEPRI, r2
   229e4:	f3bf 8f6f 	isb	sy
   229e8:	b98b      	cbnz	r3, 22a0e <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   229ea:	4620      	mov	r0, r4
   229ec:	f7ff ffc8 	bl	22980 <pended_on_thread>
   229f0:	4621      	mov	r1, r4
   229f2:	f7ff ffe6 	bl	229c2 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   229f6:	7b63      	ldrb	r3, [r4, #13]
   229f8:	f023 0302 	bic.w	r3, r3, #2
   229fc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   229fe:	2300      	movs	r3, #0
   22a00:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   22a02:	f385 8811 	msr	BASEPRI, r5
   22a06:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   22a0a:	2301      	movs	r3, #1
   22a0c:	e7ec      	b.n	229e8 <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
   22a0e:	f104 0018 	add.w	r0, r4, #24
   22a12:	f000 f92d 	bl	22c70 <z_abort_timeout>
}
   22a16:	bd38      	pop	{r3, r4, r5, pc}

00022a18 <z_priq_dumb_best>:
{
   22a18:	4603      	mov	r3, r0
	return list->head == list;
   22a1a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22a1c:	4283      	cmp	r3, r0
   22a1e:	d000      	beq.n	22a22 <z_priq_dumb_best+0xa>
}
   22a20:	4770      	bx	lr
	struct k_thread *thread = NULL;
   22a22:	2000      	movs	r0, #0
	return thread;
   22a24:	e7fc      	b.n	22a20 <z_priq_dumb_best+0x8>

00022a26 <add_to_waitq_locked>:
{
   22a26:	b570      	push	{r4, r5, r6, lr}
   22a28:	4605      	mov	r5, r0
   22a2a:	460e      	mov	r6, r1
	unready_thread(thread);
   22a2c:	f7f8 ff10 	bl	1b850 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   22a30:	7b6b      	ldrb	r3, [r5, #13]
   22a32:	f043 0302 	orr.w	r3, r3, #2
   22a36:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   22a38:	b1b6      	cbz	r6, 22a68 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   22a3a:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   22a3c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22a3e:	42a6      	cmp	r6, r4
   22a40:	d019      	beq.n	22a76 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22a42:	b164      	cbz	r4, 22a5e <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   22a44:	4621      	mov	r1, r4
   22a46:	4628      	mov	r0, r5
   22a48:	f7ff ff9c 	bl	22984 <z_sched_prio_cmp>
   22a4c:	2800      	cmp	r0, #0
   22a4e:	dc0c      	bgt.n	22a6a <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22a50:	b12c      	cbz	r4, 22a5e <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   22a52:	6873      	ldr	r3, [r6, #4]
   22a54:	429c      	cmp	r4, r3
   22a56:	d002      	beq.n	22a5e <add_to_waitq_locked+0x38>
   22a58:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22a5a:	2c00      	cmp	r4, #0
   22a5c:	d1f1      	bne.n	22a42 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   22a5e:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   22a60:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   22a62:	606b      	str	r3, [r5, #4]
	tail->next = node;
   22a64:	601d      	str	r5, [r3, #0]
	list->tail = node;
   22a66:	6075      	str	r5, [r6, #4]
}
   22a68:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   22a6a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   22a6c:	606b      	str	r3, [r5, #4]
	node->next = successor;
   22a6e:	602c      	str	r4, [r5, #0]
	prev->next = node;
   22a70:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   22a72:	6065      	str	r5, [r4, #4]
}
   22a74:	e7f8      	b.n	22a68 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22a76:	2400      	movs	r4, #0
   22a78:	e7e3      	b.n	22a42 <add_to_waitq_locked+0x1c>

00022a7a <pend>:
{
   22a7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22a7e:	4605      	mov	r5, r0
   22a80:	460f      	mov	r7, r1
   22a82:	4691      	mov	r9, r2
   22a84:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   22a86:	2400      	movs	r4, #0
	__asm__ volatile(
   22a88:	f04f 0320 	mov.w	r3, #32
   22a8c:	f3ef 8611 	mrs	r6, BASEPRI
   22a90:	f383 8811 	msr	BASEPRI, r3
   22a94:	f3bf 8f6f 	isb	sy
   22a98:	b94c      	cbnz	r4, 22aae <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   22a9a:	4639      	mov	r1, r7
   22a9c:	4628      	mov	r0, r5
   22a9e:	f7ff ffc2 	bl	22a26 <add_to_waitq_locked>
	__asm__ volatile(
   22aa2:	f386 8811 	msr	BASEPRI, r6
   22aa6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   22aaa:	2401      	movs	r4, #1
   22aac:	e7f4      	b.n	22a98 <pend+0x1e>
	add_thread_timeout(thread, timeout);
   22aae:	464a      	mov	r2, r9
   22ab0:	4643      	mov	r3, r8
   22ab2:	4628      	mov	r0, r5
   22ab4:	f7f8 fe10 	bl	1b6d8 <add_thread_timeout>
}
   22ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00022abc <z_ready_thread>:
{
   22abc:	b538      	push	{r3, r4, r5, lr}
   22abe:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   22ac0:	2300      	movs	r3, #0
	__asm__ volatile(
   22ac2:	f04f 0220 	mov.w	r2, #32
   22ac6:	f3ef 8511 	mrs	r5, BASEPRI
   22aca:	f382 8811 	msr	BASEPRI, r2
   22ace:	f3bf 8f6f 	isb	sy
   22ad2:	e007      	b.n	22ae4 <z_ready_thread+0x28>
			ready_thread(thread);
   22ad4:	4620      	mov	r0, r4
   22ad6:	f7f8 ffe3 	bl	1baa0 <ready_thread>
	__asm__ volatile(
   22ada:	f385 8811 	msr	BASEPRI, r5
   22ade:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   22ae2:	2301      	movs	r3, #1
   22ae4:	b92b      	cbnz	r3, 22af2 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   22ae6:	4620      	mov	r0, r4
   22ae8:	f7ff ff48 	bl	2297c <thread_active_elsewhere>
   22aec:	2800      	cmp	r0, #0
   22aee:	d1f4      	bne.n	22ada <z_ready_thread+0x1e>
   22af0:	e7f0      	b.n	22ad4 <z_ready_thread+0x18>
}
   22af2:	bd38      	pop	{r3, r4, r5, pc}

00022af4 <z_thread_timeout>:
{
   22af4:	b570      	push	{r4, r5, r6, lr}
   22af6:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   22af8:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   22afc:	2300      	movs	r3, #0
	__asm__ volatile(
   22afe:	f04f 0220 	mov.w	r2, #32
   22b02:	f3ef 8611 	mrs	r6, BASEPRI
   22b06:	f382 8811 	msr	BASEPRI, r2
   22b0a:	f3bf 8f6f 	isb	sy
   22b0e:	e019      	b.n	22b44 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   22b10:	4628      	mov	r0, r5
   22b12:	f7ff ff35 	bl	22980 <pended_on_thread>
   22b16:	4629      	mov	r1, r5
   22b18:	f7ff ff53 	bl	229c2 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22b1c:	7b6b      	ldrb	r3, [r5, #13]
   22b1e:	f023 0302 	bic.w	r3, r3, #2
   22b22:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   22b24:	2300      	movs	r3, #0
   22b26:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   22b28:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   22b2c:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   22b30:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   22b34:	4628      	mov	r0, r5
   22b36:	f7f8 ffb3 	bl	1baa0 <ready_thread>
	__asm__ volatile(
   22b3a:	f386 8811 	msr	BASEPRI, r6
   22b3e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   22b42:	2301      	movs	r3, #1
   22b44:	b94b      	cbnz	r3, 22b5a <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   22b46:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   22b4a:	f013 0f28 	tst.w	r3, #40	; 0x28
   22b4e:	d1f4      	bne.n	22b3a <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   22b50:	f854 3c10 	ldr.w	r3, [r4, #-16]
   22b54:	2b00      	cmp	r3, #0
   22b56:	d1db      	bne.n	22b10 <z_thread_timeout+0x1c>
   22b58:	e7e6      	b.n	22b28 <z_thread_timeout+0x34>
}
   22b5a:	bd70      	pop	{r4, r5, r6, pc}

00022b5c <z_unpend_first_thread>:
{
   22b5c:	b570      	push	{r4, r5, r6, lr}
   22b5e:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   22b60:	2300      	movs	r3, #0
	__asm__ volatile(
   22b62:	f04f 0220 	mov.w	r2, #32
   22b66:	f3ef 8511 	mrs	r5, BASEPRI
   22b6a:	f382 8811 	msr	BASEPRI, r2
   22b6e:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   22b72:	461c      	mov	r4, r3
   22b74:	e013      	b.n	22b9e <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   22b76:	f7ff ff03 	bl	22980 <pended_on_thread>
   22b7a:	4621      	mov	r1, r4
   22b7c:	f7ff ff21 	bl	229c2 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22b80:	7b63      	ldrb	r3, [r4, #13]
   22b82:	f023 0302 	bic.w	r3, r3, #2
   22b86:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   22b88:	2300      	movs	r3, #0
   22b8a:	60a3      	str	r3, [r4, #8]
   22b8c:	f104 0018 	add.w	r0, r4, #24
   22b90:	f000 f86e 	bl	22c70 <z_abort_timeout>
	__asm__ volatile(
   22b94:	f385 8811 	msr	BASEPRI, r5
   22b98:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   22b9c:	2301      	movs	r3, #1
   22b9e:	b933      	cbnz	r3, 22bae <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   22ba0:	4630      	mov	r0, r6
   22ba2:	f7ff ff39 	bl	22a18 <z_priq_dumb_best>
		if (thread != NULL) {
   22ba6:	4604      	mov	r4, r0
   22ba8:	2800      	cmp	r0, #0
   22baa:	d1e4      	bne.n	22b76 <z_unpend_first_thread+0x1a>
   22bac:	e7f2      	b.n	22b94 <z_unpend_first_thread+0x38>
}
   22bae:	4620      	mov	r0, r4
   22bb0:	bd70      	pop	{r4, r5, r6, pc}

00022bb2 <z_unpend_all>:
{
   22bb2:	b538      	push	{r3, r4, r5, lr}
   22bb4:	4605      	mov	r5, r0
	int need_sched = 0;
   22bb6:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   22bb8:	e006      	b.n	22bc8 <z_unpend_all+0x16>
		z_unpend_thread(thread);
   22bba:	4620      	mov	r0, r4
   22bbc:	f7ff ff09 	bl	229d2 <z_unpend_thread>
		z_ready_thread(thread);
   22bc0:	4620      	mov	r0, r4
   22bc2:	f7ff ff7b 	bl	22abc <z_ready_thread>
		need_sched = 1;
   22bc6:	2001      	movs	r0, #1
	return list->head == list;
   22bc8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22bca:	42a5      	cmp	r5, r4
   22bcc:	d001      	beq.n	22bd2 <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   22bce:	2c00      	cmp	r4, #0
   22bd0:	d1f3      	bne.n	22bba <z_unpend_all+0x8>
}
   22bd2:	bd38      	pop	{r3, r4, r5, pc}

00022bd4 <z_sched_wake>:
{
   22bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22bd8:	4606      	mov	r6, r0
   22bda:	4688      	mov	r8, r1
   22bdc:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   22bde:	2300      	movs	r3, #0
	__asm__ volatile(
   22be0:	f04f 0220 	mov.w	r2, #32
   22be4:	f3ef 8511 	mrs	r5, BASEPRI
   22be8:	f382 8811 	msr	BASEPRI, r2
   22bec:	f3bf 8f6f 	isb	sy
	bool ret = false;
   22bf0:	4699      	mov	r9, r3
   22bf2:	e01b      	b.n	22c2c <z_sched_wake+0x58>
   22bf4:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   22bf8:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   22bfa:	f7ff fec1 	bl	22980 <pended_on_thread>
   22bfe:	4621      	mov	r1, r4
   22c00:	f7ff fedf 	bl	229c2 <z_priq_dumb_remove>
   22c04:	7b63      	ldrb	r3, [r4, #13]
   22c06:	f023 0302 	bic.w	r3, r3, #2
   22c0a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   22c0c:	2300      	movs	r3, #0
   22c0e:	60a3      	str	r3, [r4, #8]
   22c10:	f104 0018 	add.w	r0, r4, #24
   22c14:	f000 f82c 	bl	22c70 <z_abort_timeout>
			ready_thread(thread);
   22c18:	4620      	mov	r0, r4
   22c1a:	f7f8 ff41 	bl	1baa0 <ready_thread>
			ret = true;
   22c1e:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
   22c22:	f385 8811 	msr	BASEPRI, r5
   22c26:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   22c2a:	2301      	movs	r3, #1
   22c2c:	b933      	cbnz	r3, 22c3c <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   22c2e:	4630      	mov	r0, r6
   22c30:	f7ff fef2 	bl	22a18 <z_priq_dumb_best>
		if (thread != NULL) {
   22c34:	4604      	mov	r4, r0
   22c36:	2800      	cmp	r0, #0
   22c38:	d1dc      	bne.n	22bf4 <z_sched_wake+0x20>
   22c3a:	e7f2      	b.n	22c22 <z_sched_wake+0x4e>
}
   22c3c:	4648      	mov	r0, r9
   22c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00022c42 <remove_timeout>:
{
   22c42:	b538      	push	{r3, r4, r5, lr}
   22c44:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   22c46:	f7f9 f979 	bl	1bf3c <next>
   22c4a:	b148      	cbz	r0, 22c60 <remove_timeout+0x1e>
   22c4c:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   22c4e:	6920      	ldr	r0, [r4, #16]
   22c50:	6965      	ldr	r5, [r4, #20]
   22c52:	6913      	ldr	r3, [r2, #16]
   22c54:	6951      	ldr	r1, [r2, #20]
   22c56:	181b      	adds	r3, r3, r0
   22c58:	eb45 0101 	adc.w	r1, r5, r1
   22c5c:	6113      	str	r3, [r2, #16]
   22c5e:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   22c60:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   22c62:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   22c64:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22c66:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22c68:	2300      	movs	r3, #0
   22c6a:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   22c6c:	6063      	str	r3, [r4, #4]
}
   22c6e:	bd38      	pop	{r3, r4, r5, pc}

00022c70 <z_abort_timeout>:
{
   22c70:	b570      	push	{r4, r5, r6, lr}
   22c72:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   22c74:	2300      	movs	r3, #0
	__asm__ volatile(
   22c76:	f04f 0220 	mov.w	r2, #32
   22c7a:	f3ef 8611 	mrs	r6, BASEPRI
   22c7e:	f382 8811 	msr	BASEPRI, r2
   22c82:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   22c86:	f06f 0015 	mvn.w	r0, #21
   22c8a:	e008      	b.n	22c9e <z_abort_timeout+0x2e>
			remove_timeout(to);
   22c8c:	4620      	mov	r0, r4
   22c8e:	f7ff ffd8 	bl	22c42 <remove_timeout>
			ret = 0;
   22c92:	4628      	mov	r0, r5
	__asm__ volatile(
   22c94:	f386 8811 	msr	BASEPRI, r6
   22c98:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   22c9c:	2301      	movs	r3, #1
   22c9e:	461d      	mov	r5, r3
   22ca0:	b91b      	cbnz	r3, 22caa <z_abort_timeout+0x3a>
	return node->next != NULL;
   22ca2:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   22ca4:	2b00      	cmp	r3, #0
   22ca6:	d1f1      	bne.n	22c8c <z_abort_timeout+0x1c>
   22ca8:	e7f4      	b.n	22c94 <z_abort_timeout+0x24>
}
   22caa:	bd70      	pop	{r4, r5, r6, pc}

00022cac <z_get_next_timeout_expiry>:
{
   22cac:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   22cae:	2300      	movs	r3, #0
	__asm__ volatile(
   22cb0:	f04f 0220 	mov.w	r2, #32
   22cb4:	f3ef 8411 	mrs	r4, BASEPRI
   22cb8:	f382 8811 	msr	BASEPRI, r2
   22cbc:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   22cc0:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   22cc4:	b93b      	cbnz	r3, 22cd6 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   22cc6:	f7f9 f951 	bl	1bf6c <next_timeout>
	__asm__ volatile(
   22cca:	f384 8811 	msr	BASEPRI, r4
   22cce:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   22cd2:	2301      	movs	r3, #1
   22cd4:	e7f6      	b.n	22cc4 <z_get_next_timeout_expiry+0x18>
}
   22cd6:	bd10      	pop	{r4, pc}

00022cd8 <z_set_timeout_expiry>:
{
   22cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22cda:	4606      	mov	r6, r0
   22cdc:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   22cde:	2300      	movs	r3, #0
	__asm__ volatile(
   22ce0:	f04f 0220 	mov.w	r2, #32
   22ce4:	f3ef 8511 	mrs	r5, BASEPRI
   22ce8:	f382 8811 	msr	BASEPRI, r2
   22cec:	f3bf 8f6f 	isb	sy
   22cf0:	e00a      	b.n	22d08 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   22cf2:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   22cf4:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   22cf8:	2801      	cmp	r0, #1
   22cfa:	dd00      	ble.n	22cfe <z_set_timeout_expiry+0x26>
   22cfc:	b97c      	cbnz	r4, 22d1e <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   22cfe:	f385 8811 	msr	BASEPRI, r5
   22d02:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   22d06:	2301      	movs	r3, #1
   22d08:	461c      	mov	r4, r3
   22d0a:	b97b      	cbnz	r3, 22d2c <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   22d0c:	f7f9 f92e 	bl	1bf6c <next_timeout>
			      || (ticks <= next_to);
   22d10:	f1b0 3fff 	cmp.w	r0, #4294967295
   22d14:	d0ed      	beq.n	22cf2 <z_set_timeout_expiry+0x1a>
   22d16:	42b0      	cmp	r0, r6
   22d18:	dbec      	blt.n	22cf4 <z_set_timeout_expiry+0x1c>
   22d1a:	2401      	movs	r4, #1
   22d1c:	e7ea      	b.n	22cf4 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   22d1e:	4639      	mov	r1, r7
   22d20:	42b0      	cmp	r0, r6
   22d22:	bfa8      	it	ge
   22d24:	4630      	movge	r0, r6
   22d26:	f7f0 ff61 	bl	13bec <sys_clock_set_timeout>
   22d2a:	e7e8      	b.n	22cfe <z_set_timeout_expiry+0x26>
}
   22d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022d2e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   22d2e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   22d30:	f7f9 fa4e 	bl	1c1d0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   22d34:	bd08      	pop	{r3, pc}

00022d36 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   22d36:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   22d38:	f7f9 fa4a 	bl	1c1d0 <sys_clock_tick_get>
}
   22d3c:	bd08      	pop	{r3, pc}

00022d3e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   22d3e:	b900      	cbnz	r0, 22d42 <z_impl_k_busy_wait+0x4>
   22d40:	4770      	bx	lr
{
   22d42:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   22d44:	f7f0 fbf6 	bl	13534 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   22d48:	bd08      	pop	{r3, pc}

00022d4a <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   22d4a:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22d4c:	f1b1 3fff 	cmp.w	r1, #4294967295
   22d50:	bf08      	it	eq
   22d52:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   22d56:	d024      	beq.n	22da2 <sys_clock_timeout_end_calc+0x58>
   22d58:	4604      	mov	r4, r0
   22d5a:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22d5c:	ea54 0105 	orrs.w	r1, r4, r5
   22d60:	d00d      	beq.n	22d7e <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   22d62:	f06f 0101 	mvn.w	r1, #1
   22d66:	1a0a      	subs	r2, r1, r0
   22d68:	f04f 31ff 	mov.w	r1, #4294967295
   22d6c:	eb61 0305 	sbc.w	r3, r1, r5
   22d70:	2a00      	cmp	r2, #0
   22d72:	f173 0100 	sbcs.w	r1, r3, #0
   22d76:	db05      	blt.n	22d84 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   22d78:	4610      	mov	r0, r2
   22d7a:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   22d7c:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   22d7e:	f7f9 fa27 	bl	1c1d0 <sys_clock_tick_get>
   22d82:	e7fb      	b.n	22d7c <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   22d84:	f7f9 fa24 	bl	1c1d0 <sys_clock_tick_get>
   22d88:	4623      	mov	r3, r4
   22d8a:	462a      	mov	r2, r5
   22d8c:	2c01      	cmp	r4, #1
   22d8e:	f175 0400 	sbcs.w	r4, r5, #0
   22d92:	db03      	blt.n	22d9c <sys_clock_timeout_end_calc+0x52>
   22d94:	18c0      	adds	r0, r0, r3
   22d96:	eb42 0101 	adc.w	r1, r2, r1
   22d9a:	e7ef      	b.n	22d7c <sys_clock_timeout_end_calc+0x32>
   22d9c:	2301      	movs	r3, #1
   22d9e:	2200      	movs	r2, #0
   22da0:	e7f8      	b.n	22d94 <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   22da2:	f04f 30ff 	mov.w	r0, #4294967295
   22da6:	4601      	mov	r1, r0
   22da8:	e7e8      	b.n	22d7c <sys_clock_timeout_end_calc+0x32>

00022daa <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   22daa:	b108      	cbz	r0, 22db0 <poller_thread+0x6>
   22dac:	3860      	subs	r0, #96	; 0x60
   22dae:	4770      	bx	lr
}
   22db0:	4770      	bx	lr

00022db2 <signal_poller>:
{
   22db2:	b538      	push	{r3, r4, r5, lr}
   22db4:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   22db6:	6880      	ldr	r0, [r0, #8]
   22db8:	f7ff fff7 	bl	22daa <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   22dbc:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   22dbe:	f013 0f02 	tst.w	r3, #2
   22dc2:	d028      	beq.n	22e16 <signal_poller+0x64>
   22dc4:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   22dc6:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
	if (z_is_thread_timeout_expired(thread)) {
   22dca:	f06f 0001 	mvn.w	r0, #1
   22dce:	f04f 31ff 	mov.w	r1, #4294967295
   22dd2:	428b      	cmp	r3, r1
   22dd4:	bf08      	it	eq
   22dd6:	4282      	cmpeq	r2, r0
   22dd8:	d01f      	beq.n	22e1a <signal_poller+0x68>
	z_unpend_thread(thread);
   22dda:	4620      	mov	r0, r4
   22ddc:	f7ff fdf9 	bl	229d2 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   22de0:	2d08      	cmp	r5, #8
   22de2:	d00a      	beq.n	22dfa <signal_poller+0x48>
   22de4:	2300      	movs	r3, #0
   22de6:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   22dea:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   22dec:	f013 0f1f 	tst.w	r3, #31
   22df0:	d108      	bne.n	22e04 <signal_poller+0x52>
   22df2:	69a3      	ldr	r3, [r4, #24]
   22df4:	b123      	cbz	r3, 22e00 <signal_poller+0x4e>
   22df6:	2300      	movs	r3, #0
   22df8:	e005      	b.n	22e06 <signal_poller+0x54>
   22dfa:	f06f 0303 	mvn.w	r3, #3
   22dfe:	e7f2      	b.n	22de6 <signal_poller+0x34>
   22e00:	2301      	movs	r3, #1
   22e02:	e000      	b.n	22e06 <signal_poller+0x54>
   22e04:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   22e06:	b90b      	cbnz	r3, 22e0c <signal_poller+0x5a>
		return 0;
   22e08:	2000      	movs	r0, #0
   22e0a:	e005      	b.n	22e18 <signal_poller+0x66>
	z_ready_thread(thread);
   22e0c:	4620      	mov	r0, r4
   22e0e:	f7ff fe55 	bl	22abc <z_ready_thread>
	return 0;
   22e12:	2000      	movs	r0, #0
   22e14:	e000      	b.n	22e18 <signal_poller+0x66>
		return 0;
   22e16:	2000      	movs	r0, #0
}
   22e18:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   22e1a:	f06f 000a 	mvn.w	r0, #10
   22e1e:	e7fb      	b.n	22e18 <signal_poller+0x66>

00022e20 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   22e20:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   22e22:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   22e24:	7823      	ldrb	r3, [r4, #0]
   22e26:	b173      	cbz	r3, 22e46 <signal_triggered_work+0x26>
   22e28:	f854 5c04 	ldr.w	r5, [r4, #-4]
   22e2c:	b15d      	cbz	r5, 22e46 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   22e2e:	f1a4 0614 	sub.w	r6, r4, #20
   22e32:	f104 0014 	add.w	r0, r4, #20
   22e36:	f7ff ff1b 	bl	22c70 <z_abort_timeout>
		twork->poll_result = 0;
   22e3a:	2300      	movs	r3, #0
   22e3c:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   22e3e:	4631      	mov	r1, r6
   22e40:	4628      	mov	r0, r5
   22e42:	f000 f857 	bl	22ef4 <k_work_submit_to_queue>
	}

	return 0;
}
   22e46:	2000      	movs	r0, #0
   22e48:	bd70      	pop	{r4, r5, r6, pc}

00022e4a <signal_poll_event>:
{
   22e4a:	b570      	push	{r4, r5, r6, lr}
   22e4c:	4604      	mov	r4, r0
   22e4e:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   22e50:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   22e52:	b1d6      	cbz	r6, 22e8a <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   22e54:	7873      	ldrb	r3, [r6, #1]
   22e56:	2b01      	cmp	r3, #1
   22e58:	d00d      	beq.n	22e76 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   22e5a:	2b02      	cmp	r3, #2
   22e5c:	d012      	beq.n	22e84 <signal_poll_event+0x3a>
		poller->is_polling = false;
   22e5e:	2000      	movs	r0, #0
   22e60:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   22e62:	2300      	movs	r3, #0
   22e64:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   22e66:	68e3      	ldr	r3, [r4, #12]
   22e68:	f3c3 3145 	ubfx	r1, r3, #13, #6
   22e6c:	430d      	orrs	r5, r1
   22e6e:	f365 3352 	bfi	r3, r5, #13, #6
   22e72:	60e3      	str	r3, [r4, #12]
}
   22e74:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   22e76:	f7ff ff9c 	bl	22db2 <signal_poller>
		poller->is_polling = false;
   22e7a:	2300      	movs	r3, #0
   22e7c:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   22e7e:	4298      	cmp	r0, r3
   22e80:	daef      	bge.n	22e62 <signal_poll_event+0x18>
   22e82:	e7f7      	b.n	22e74 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   22e84:	f7ff ffcc 	bl	22e20 <signal_triggered_work>
   22e88:	e7f7      	b.n	22e7a <signal_poll_event+0x30>
	int retcode = 0;
   22e8a:	2000      	movs	r0, #0
   22e8c:	e7e9      	b.n	22e62 <signal_poll_event+0x18>

00022e8e <z_handle_obj_poll_events>:
{
   22e8e:	b508      	push	{r3, lr}
   22e90:	4603      	mov	r3, r0
	return list->head == list;
   22e92:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   22e94:	4283      	cmp	r3, r0
   22e96:	d009      	beq.n	22eac <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   22e98:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   22e9a:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   22e9c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22e9e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22ea0:	2300      	movs	r3, #0
   22ea2:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   22ea4:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   22ea6:	b108      	cbz	r0, 22eac <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   22ea8:	f7ff ffcf 	bl	22e4a <signal_poll_event>
}
   22eac:	bd08      	pop	{r3, pc}

00022eae <z_heap_aligned_alloc>:
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   22eae:	3204      	adds	r2, #4
   22eb0:	d20f      	bcs.n	22ed2 <z_heap_aligned_alloc+0x24>
{
   22eb2:	b5d0      	push	{r4, r6, r7, lr}
   22eb4:	b082      	sub	sp, #8
   22eb6:	4604      	mov	r4, r0
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   22eb8:	2600      	movs	r6, #0
   22eba:	2700      	movs	r7, #0
   22ebc:	e9cd 6700 	strd	r6, r7, [sp]
   22ec0:	f041 0104 	orr.w	r1, r1, #4
   22ec4:	f7ff fc61 	bl	2278a <k_heap_aligned_alloc>
	if (mem == NULL) {
   22ec8:	b108      	cbz	r0, 22ece <z_heap_aligned_alloc+0x20>
	*heap_ref = heap;
   22eca:	f840 4b04 	str.w	r4, [r0], #4
}
   22ece:	b002      	add	sp, #8
   22ed0:	bdd0      	pop	{r4, r6, r7, pc}
		return NULL;
   22ed2:	2000      	movs	r0, #0
}
   22ed4:	4770      	bx	lr

00022ed6 <k_free>:
	if (ptr != NULL) {
   22ed6:	b130      	cbz	r0, 22ee6 <k_free+0x10>
{
   22ed8:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   22eda:	1f01      	subs	r1, r0, #4
   22edc:	f850 0c04 	ldr.w	r0, [r0, #-4]
   22ee0:	f7ff fca9 	bl	22836 <k_heap_free>
}
   22ee4:	bd08      	pop	{r3, pc}
   22ee6:	4770      	bx	lr

00022ee8 <k_malloc>:

void *k_malloc(size_t size)
{
   22ee8:	b508      	push	{r3, lr}
   22eea:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_malloc, _SYSTEM_HEAP);

	void *ret = k_aligned_alloc(sizeof(void *), size);
   22eec:	2004      	movs	r0, #4
   22eee:	f7f9 fc5b 	bl	1c7a8 <k_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_malloc, _SYSTEM_HEAP, ret);

	return ret;
}
   22ef2:	bd08      	pop	{r3, pc}

00022ef4 <k_work_submit_to_queue>:
{
   22ef4:	b530      	push	{r4, r5, lr}
   22ef6:	b083      	sub	sp, #12
   22ef8:	9001      	str	r0, [sp, #4]
   22efa:	4608      	mov	r0, r1
	__asm__ volatile(
   22efc:	f04f 0320 	mov.w	r3, #32
   22f00:	f3ef 8511 	mrs	r5, BASEPRI
   22f04:	f383 8811 	msr	BASEPRI, r3
   22f08:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   22f0c:	a901      	add	r1, sp, #4
   22f0e:	f7f9 fc7d 	bl	1c80c <submit_to_queue_locked>
   22f12:	4604      	mov	r4, r0
	__asm__ volatile(
   22f14:	f385 8811 	msr	BASEPRI, r5
   22f18:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   22f1c:	2800      	cmp	r0, #0
   22f1e:	dc02      	bgt.n	22f26 <k_work_submit_to_queue+0x32>
}
   22f20:	4620      	mov	r0, r4
   22f22:	b003      	add	sp, #12
   22f24:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
   22f26:	f7f8 ff9b 	bl	1be60 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   22f2a:	2800      	cmp	r0, #0
   22f2c:	d0f8      	beq.n	22f20 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
   22f2e:	f7f8 fed1 	bl	1bcd4 <z_impl_k_yield>
	return ret;
   22f32:	e7f5      	b.n	22f20 <k_work_submit_to_queue+0x2c>

00022f34 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   22f34:	4770      	bx	lr

00022f36 <atoi>:
   22f36:	220a      	movs	r2, #10
   22f38:	2100      	movs	r1, #0
   22f3a:	f7fa bad5 	b.w	1d4e8 <strtol>

00022f3e <memchr>:
   22f3e:	b2c9      	uxtb	r1, r1
   22f40:	4402      	add	r2, r0
   22f42:	b510      	push	{r4, lr}
   22f44:	4290      	cmp	r0, r2
   22f46:	4603      	mov	r3, r0
   22f48:	d101      	bne.n	22f4e <memchr+0x10>
   22f4a:	2300      	movs	r3, #0
   22f4c:	e003      	b.n	22f56 <memchr+0x18>
   22f4e:	781c      	ldrb	r4, [r3, #0]
   22f50:	3001      	adds	r0, #1
   22f52:	428c      	cmp	r4, r1
   22f54:	d1f6      	bne.n	22f44 <memchr+0x6>
   22f56:	4618      	mov	r0, r3
   22f58:	bd10      	pop	{r4, pc}

00022f5a <memcmp>:
   22f5a:	b530      	push	{r4, r5, lr}
   22f5c:	3901      	subs	r1, #1
   22f5e:	2400      	movs	r4, #0
   22f60:	42a2      	cmp	r2, r4
   22f62:	d101      	bne.n	22f68 <memcmp+0xe>
   22f64:	2000      	movs	r0, #0
   22f66:	e005      	b.n	22f74 <memcmp+0x1a>
   22f68:	5d03      	ldrb	r3, [r0, r4]
   22f6a:	3401      	adds	r4, #1
   22f6c:	5d0d      	ldrb	r5, [r1, r4]
   22f6e:	42ab      	cmp	r3, r5
   22f70:	d0f6      	beq.n	22f60 <memcmp+0x6>
   22f72:	1b58      	subs	r0, r3, r5
   22f74:	bd30      	pop	{r4, r5, pc}

00022f76 <memcpy>:
   22f76:	440a      	add	r2, r1
   22f78:	1e43      	subs	r3, r0, #1
   22f7a:	4291      	cmp	r1, r2
   22f7c:	d100      	bne.n	22f80 <memcpy+0xa>
   22f7e:	4770      	bx	lr
   22f80:	b510      	push	{r4, lr}
   22f82:	f811 4b01 	ldrb.w	r4, [r1], #1
   22f86:	4291      	cmp	r1, r2
   22f88:	f803 4f01 	strb.w	r4, [r3, #1]!
   22f8c:	d1f9      	bne.n	22f82 <memcpy+0xc>
   22f8e:	bd10      	pop	{r4, pc}

00022f90 <__memcpy_chk>:
   22f90:	429a      	cmp	r2, r3
   22f92:	b508      	push	{r3, lr}
   22f94:	d901      	bls.n	22f9a <__memcpy_chk+0xa>
   22f96:	f7f1 fb27 	bl	145e8 <__chk_fail>
   22f9a:	4281      	cmp	r1, r0
   22f9c:	d804      	bhi.n	22fa8 <__memcpy_chk+0x18>
   22f9e:	188b      	adds	r3, r1, r2
   22fa0:	4298      	cmp	r0, r3
   22fa2:	d3f8      	bcc.n	22f96 <__memcpy_chk+0x6>
   22fa4:	4281      	cmp	r1, r0
   22fa6:	d102      	bne.n	22fae <__memcpy_chk+0x1e>
   22fa8:	1883      	adds	r3, r0, r2
   22faa:	4299      	cmp	r1, r3
   22fac:	d3f3      	bcc.n	22f96 <__memcpy_chk+0x6>
   22fae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   22fb2:	f7ff bfe0 	b.w	22f76 <memcpy>

00022fb6 <memset>:
   22fb6:	4402      	add	r2, r0
   22fb8:	4603      	mov	r3, r0
   22fba:	4293      	cmp	r3, r2
   22fbc:	d100      	bne.n	22fc0 <memset+0xa>
   22fbe:	4770      	bx	lr
   22fc0:	f803 1b01 	strb.w	r1, [r3], #1
   22fc4:	e7f9      	b.n	22fba <memset+0x4>

00022fc6 <__memset_chk>:
   22fc6:	429a      	cmp	r2, r3
   22fc8:	b508      	push	{r3, lr}
   22fca:	d901      	bls.n	22fd0 <__memset_chk+0xa>
   22fcc:	f7f1 fb0c 	bl	145e8 <__chk_fail>
   22fd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   22fd4:	f7ff bfef 	b.w	22fb6 <memset>

00022fd8 <__cvt>:
   22fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   22fdc:	ec55 4b10 	vmov	r4, r5, d0
   22fe0:	2d00      	cmp	r5, #0
   22fe2:	460e      	mov	r6, r1
   22fe4:	4619      	mov	r1, r3
   22fe6:	462b      	mov	r3, r5
   22fe8:	bfb4      	ite	lt
   22fea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
   22fee:	2300      	movge	r3, #0
   22ff0:	4691      	mov	r9, r2
   22ff2:	bfbf      	itttt	lt
   22ff4:	4622      	movlt	r2, r4
   22ff6:	461d      	movlt	r5, r3
   22ff8:	232d      	movlt	r3, #45	; 0x2d
   22ffa:	4614      	movlt	r4, r2
   22ffc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   23000:	700b      	strb	r3, [r1, #0]
   23002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   23004:	f023 0820 	bic.w	r8, r3, #32
   23008:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   2300c:	d005      	beq.n	2301a <__cvt+0x42>
   2300e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   23012:	d100      	bne.n	23016 <__cvt+0x3e>
   23014:	3601      	adds	r6, #1
   23016:	2102      	movs	r1, #2
   23018:	e000      	b.n	2301c <__cvt+0x44>
   2301a:	2103      	movs	r1, #3
   2301c:	ab03      	add	r3, sp, #12
   2301e:	4632      	mov	r2, r6
   23020:	9301      	str	r3, [sp, #4]
   23022:	ab02      	add	r3, sp, #8
   23024:	ec45 4b10 	vmov	d0, r4, r5
   23028:	9300      	str	r3, [sp, #0]
   2302a:	4653      	mov	r3, sl
   2302c:	f7ed ff5c 	bl	10ee8 <_dtoa_r>
   23030:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   23034:	4607      	mov	r7, r0
   23036:	d102      	bne.n	2303e <__cvt+0x66>
   23038:	f019 0f01 	tst.w	r9, #1
   2303c:	d022      	beq.n	23084 <__cvt+0xac>
   2303e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   23042:	eb07 0906 	add.w	r9, r7, r6
   23046:	d110      	bne.n	2306a <__cvt+0x92>
   23048:	783b      	ldrb	r3, [r7, #0]
   2304a:	2b30      	cmp	r3, #48	; 0x30
   2304c:	d10a      	bne.n	23064 <__cvt+0x8c>
   2304e:	2200      	movs	r2, #0
   23050:	2300      	movs	r3, #0
   23052:	4620      	mov	r0, r4
   23054:	4629      	mov	r1, r5
   23056:	f7ed fd17 	bl	10a88 <__aeabi_dcmpeq>
   2305a:	b918      	cbnz	r0, 23064 <__cvt+0x8c>
   2305c:	f1c6 0601 	rsb	r6, r6, #1
   23060:	f8ca 6000 	str.w	r6, [sl]
   23064:	f8da 3000 	ldr.w	r3, [sl]
   23068:	4499      	add	r9, r3
   2306a:	2200      	movs	r2, #0
   2306c:	2300      	movs	r3, #0
   2306e:	4620      	mov	r0, r4
   23070:	4629      	mov	r1, r5
   23072:	f7ed fd09 	bl	10a88 <__aeabi_dcmpeq>
   23076:	b108      	cbz	r0, 2307c <__cvt+0xa4>
   23078:	f8cd 900c 	str.w	r9, [sp, #12]
   2307c:	2230      	movs	r2, #48	; 0x30
   2307e:	9b03      	ldr	r3, [sp, #12]
   23080:	454b      	cmp	r3, r9
   23082:	d307      	bcc.n	23094 <__cvt+0xbc>
   23084:	9b03      	ldr	r3, [sp, #12]
   23086:	4638      	mov	r0, r7
   23088:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2308a:	1bdb      	subs	r3, r3, r7
   2308c:	6013      	str	r3, [r2, #0]
   2308e:	b004      	add	sp, #16
   23090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23094:	1c59      	adds	r1, r3, #1
   23096:	9103      	str	r1, [sp, #12]
   23098:	701a      	strb	r2, [r3, #0]
   2309a:	e7f0      	b.n	2307e <__cvt+0xa6>

0002309c <__exponent>:
   2309c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2309e:	2900      	cmp	r1, #0
   230a0:	4603      	mov	r3, r0
   230a2:	bfb8      	it	lt
   230a4:	4249      	neglt	r1, r1
   230a6:	f803 2b02 	strb.w	r2, [r3], #2
   230aa:	bfb4      	ite	lt
   230ac:	222d      	movlt	r2, #45	; 0x2d
   230ae:	222b      	movge	r2, #43	; 0x2b
   230b0:	2909      	cmp	r1, #9
   230b2:	7042      	strb	r2, [r0, #1]
   230b4:	dd2a      	ble.n	2310c <__exponent+0x70>
   230b6:	f10d 0407 	add.w	r4, sp, #7
   230ba:	270a      	movs	r7, #10
   230bc:	46a4      	mov	ip, r4
   230be:	460a      	mov	r2, r1
   230c0:	46a6      	mov	lr, r4
   230c2:	3c01      	subs	r4, #1
   230c4:	2a63      	cmp	r2, #99	; 0x63
   230c6:	fb91 f6f7 	sdiv	r6, r1, r7
   230ca:	fb07 1516 	mls	r5, r7, r6, r1
   230ce:	4631      	mov	r1, r6
   230d0:	f105 0530 	add.w	r5, r5, #48	; 0x30
   230d4:	f80e 5c01 	strb.w	r5, [lr, #-1]
   230d8:	dcf1      	bgt.n	230be <__exponent+0x22>
   230da:	3130      	adds	r1, #48	; 0x30
   230dc:	f1ae 0502 	sub.w	r5, lr, #2
   230e0:	f804 1c01 	strb.w	r1, [r4, #-1]
   230e4:	1c44      	adds	r4, r0, #1
   230e6:	4629      	mov	r1, r5
   230e8:	4561      	cmp	r1, ip
   230ea:	d30a      	bcc.n	23102 <__exponent+0x66>
   230ec:	f10d 0209 	add.w	r2, sp, #9
   230f0:	eba2 020e 	sub.w	r2, r2, lr
   230f4:	4565      	cmp	r5, ip
   230f6:	bf88      	it	hi
   230f8:	2200      	movhi	r2, #0
   230fa:	4413      	add	r3, r2
   230fc:	1a18      	subs	r0, r3, r0
   230fe:	b003      	add	sp, #12
   23100:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23102:	f811 2b01 	ldrb.w	r2, [r1], #1
   23106:	f804 2f01 	strb.w	r2, [r4, #1]!
   2310a:	e7ed      	b.n	230e8 <__exponent+0x4c>
   2310c:	2330      	movs	r3, #48	; 0x30
   2310e:	3130      	adds	r1, #48	; 0x30
   23110:	7083      	strb	r3, [r0, #2]
   23112:	1d03      	adds	r3, r0, #4
   23114:	70c1      	strb	r1, [r0, #3]
   23116:	e7f1      	b.n	230fc <__exponent+0x60>

00023118 <_printf_common>:
   23118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2311c:	4616      	mov	r6, r2
   2311e:	4699      	mov	r9, r3
   23120:	688a      	ldr	r2, [r1, #8]
   23122:	4607      	mov	r7, r0
   23124:	690b      	ldr	r3, [r1, #16]
   23126:	460c      	mov	r4, r1
   23128:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2312c:	4293      	cmp	r3, r2
   2312e:	bfb8      	it	lt
   23130:	4613      	movlt	r3, r2
   23132:	6033      	str	r3, [r6, #0]
   23134:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   23138:	b10a      	cbz	r2, 2313e <_printf_common+0x26>
   2313a:	3301      	adds	r3, #1
   2313c:	6033      	str	r3, [r6, #0]
   2313e:	6823      	ldr	r3, [r4, #0]
   23140:	0699      	lsls	r1, r3, #26
   23142:	bf42      	ittt	mi
   23144:	6833      	ldrmi	r3, [r6, #0]
   23146:	3302      	addmi	r3, #2
   23148:	6033      	strmi	r3, [r6, #0]
   2314a:	6825      	ldr	r5, [r4, #0]
   2314c:	f015 0506 	ands.w	r5, r5, #6
   23150:	d106      	bne.n	23160 <_printf_common+0x48>
   23152:	f104 0a19 	add.w	sl, r4, #25
   23156:	68e3      	ldr	r3, [r4, #12]
   23158:	6832      	ldr	r2, [r6, #0]
   2315a:	1a9b      	subs	r3, r3, r2
   2315c:	42ab      	cmp	r3, r5
   2315e:	dc29      	bgt.n	231b4 <_printf_common+0x9c>
   23160:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   23164:	1e13      	subs	r3, r2, #0
   23166:	6822      	ldr	r2, [r4, #0]
   23168:	bf18      	it	ne
   2316a:	2301      	movne	r3, #1
   2316c:	0692      	lsls	r2, r2, #26
   2316e:	d42e      	bmi.n	231ce <_printf_common+0xb6>
   23170:	f104 0243 	add.w	r2, r4, #67	; 0x43
   23174:	4649      	mov	r1, r9
   23176:	4638      	mov	r0, r7
   23178:	47c0      	blx	r8
   2317a:	3001      	adds	r0, #1
   2317c:	d021      	beq.n	231c2 <_printf_common+0xaa>
   2317e:	6823      	ldr	r3, [r4, #0]
   23180:	341a      	adds	r4, #26
   23182:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   23186:	f003 0306 	and.w	r3, r3, #6
   2318a:	6832      	ldr	r2, [r6, #0]
   2318c:	2600      	movs	r6, #0
   2318e:	2b04      	cmp	r3, #4
   23190:	f854 3c12 	ldr.w	r3, [r4, #-18]
   23194:	bf08      	it	eq
   23196:	1aad      	subeq	r5, r5, r2
   23198:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   2319c:	bf14      	ite	ne
   2319e:	2500      	movne	r5, #0
   231a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   231a4:	4293      	cmp	r3, r2
   231a6:	bfc4      	itt	gt
   231a8:	1a9b      	subgt	r3, r3, r2
   231aa:	18ed      	addgt	r5, r5, r3
   231ac:	42b5      	cmp	r5, r6
   231ae:	d11a      	bne.n	231e6 <_printf_common+0xce>
   231b0:	2000      	movs	r0, #0
   231b2:	e008      	b.n	231c6 <_printf_common+0xae>
   231b4:	2301      	movs	r3, #1
   231b6:	4652      	mov	r2, sl
   231b8:	4649      	mov	r1, r9
   231ba:	4638      	mov	r0, r7
   231bc:	47c0      	blx	r8
   231be:	3001      	adds	r0, #1
   231c0:	d103      	bne.n	231ca <_printf_common+0xb2>
   231c2:	f04f 30ff 	mov.w	r0, #4294967295
   231c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   231ca:	3501      	adds	r5, #1
   231cc:	e7c3      	b.n	23156 <_printf_common+0x3e>
   231ce:	18e1      	adds	r1, r4, r3
   231d0:	1c5a      	adds	r2, r3, #1
   231d2:	2030      	movs	r0, #48	; 0x30
   231d4:	3302      	adds	r3, #2
   231d6:	4422      	add	r2, r4
   231d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   231dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   231e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   231e4:	e7c4      	b.n	23170 <_printf_common+0x58>
   231e6:	2301      	movs	r3, #1
   231e8:	4622      	mov	r2, r4
   231ea:	4649      	mov	r1, r9
   231ec:	4638      	mov	r0, r7
   231ee:	47c0      	blx	r8
   231f0:	3001      	adds	r0, #1
   231f2:	d0e6      	beq.n	231c2 <_printf_common+0xaa>
   231f4:	3601      	adds	r6, #1
   231f6:	e7d9      	b.n	231ac <_printf_common+0x94>

000231f8 <__sprintf_chk>:
   231f8:	b408      	push	{r3}
   231fa:	b517      	push	{r0, r1, r2, r4, lr}
   231fc:	ab05      	add	r3, sp, #20
   231fe:	1e14      	subs	r4, r2, #0
   23200:	f853 1b04 	ldr.w	r1, [r3], #4
   23204:	9301      	str	r3, [sp, #4]
   23206:	da07      	bge.n	23218 <__sprintf_chk+0x20>
   23208:	461a      	mov	r2, r3
   2320a:	f7fa fa1f 	bl	1d64c <vsiprintf>
   2320e:	b003      	add	sp, #12
   23210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   23214:	b001      	add	sp, #4
   23216:	4770      	bx	lr
   23218:	460a      	mov	r2, r1
   2321a:	4621      	mov	r1, r4
   2321c:	f7fa f9f2 	bl	1d604 <vsniprintf>
   23220:	2800      	cmp	r0, #0
   23222:	dbf4      	blt.n	2320e <__sprintf_chk+0x16>
   23224:	42a0      	cmp	r0, r4
   23226:	d3f2      	bcc.n	2320e <__sprintf_chk+0x16>
   23228:	f7f1 f9de 	bl	145e8 <__chk_fail>

0002322c <__seofread>:
   2322c:	2000      	movs	r0, #0
   2322e:	4770      	bx	lr

00023230 <__strcat_chk>:
   23230:	b538      	push	{r3, r4, r5, lr}
   23232:	4604      	mov	r4, r0
   23234:	4623      	mov	r3, r4
   23236:	f814 5b01 	ldrb.w	r5, [r4], #1
   2323a:	b935      	cbnz	r5, 2324a <__strcat_chk+0x1a>
   2323c:	3901      	subs	r1, #1
   2323e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   23242:	b93c      	cbnz	r4, 23254 <__strcat_chk+0x24>
   23244:	b112      	cbz	r2, 2324c <__strcat_chk+0x1c>
   23246:	701c      	strb	r4, [r3, #0]
   23248:	bd38      	pop	{r3, r4, r5, pc}
   2324a:	b90a      	cbnz	r2, 23250 <__strcat_chk+0x20>
   2324c:	f7f1 f9cc 	bl	145e8 <__chk_fail>
   23250:	3a01      	subs	r2, #1
   23252:	e7ef      	b.n	23234 <__strcat_chk+0x4>
   23254:	2a00      	cmp	r2, #0
   23256:	d0f9      	beq.n	2324c <__strcat_chk+0x1c>
   23258:	3a01      	subs	r2, #1
   2325a:	f803 4b01 	strb.w	r4, [r3], #1
   2325e:	e7ee      	b.n	2323e <__strcat_chk+0xe>

00023260 <strchr>:
   23260:	b2c9      	uxtb	r1, r1
   23262:	4603      	mov	r3, r0
   23264:	f810 2b01 	ldrb.w	r2, [r0], #1
   23268:	b11a      	cbz	r2, 23272 <strchr+0x12>
   2326a:	428a      	cmp	r2, r1
   2326c:	d1f9      	bne.n	23262 <strchr+0x2>
   2326e:	4618      	mov	r0, r3
   23270:	4770      	bx	lr
   23272:	2900      	cmp	r1, #0
   23274:	bf18      	it	ne
   23276:	2300      	movne	r3, #0
   23278:	e7f9      	b.n	2326e <strchr+0xe>

0002327a <__strcpy_chk>:
   2327a:	b570      	push	{r4, r5, r6, lr}
   2327c:	4605      	mov	r5, r0
   2327e:	4608      	mov	r0, r1
   23280:	4616      	mov	r6, r2
   23282:	460c      	mov	r4, r1
   23284:	f7ed fdf4 	bl	10e70 <strlen>
   23288:	1c42      	adds	r2, r0, #1
   2328a:	42b2      	cmp	r2, r6
   2328c:	d901      	bls.n	23292 <__strcpy_chk+0x18>
   2328e:	f7f1 f9ab 	bl	145e8 <__chk_fail>
   23292:	42ac      	cmp	r4, r5
   23294:	d804      	bhi.n	232a0 <__strcpy_chk+0x26>
   23296:	18a3      	adds	r3, r4, r2
   23298:	429d      	cmp	r5, r3
   2329a:	d3f8      	bcc.n	2328e <__strcpy_chk+0x14>
   2329c:	42ac      	cmp	r4, r5
   2329e:	d102      	bne.n	232a6 <__strcpy_chk+0x2c>
   232a0:	18ab      	adds	r3, r5, r2
   232a2:	429c      	cmp	r4, r3
   232a4:	d3f3      	bcc.n	2328e <__strcpy_chk+0x14>
   232a6:	4621      	mov	r1, r4
   232a8:	4628      	mov	r0, r5
   232aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   232ae:	f7ff be62 	b.w	22f76 <memcpy>

000232b2 <strncmp>:
   232b2:	b510      	push	{r4, lr}
   232b4:	b16a      	cbz	r2, 232d2 <strncmp+0x20>
   232b6:	3901      	subs	r1, #1
   232b8:	1884      	adds	r4, r0, r2
   232ba:	f810 3b01 	ldrb.w	r3, [r0], #1
   232be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   232c2:	4293      	cmp	r3, r2
   232c4:	d103      	bne.n	232ce <strncmp+0x1c>
   232c6:	42a0      	cmp	r0, r4
   232c8:	d001      	beq.n	232ce <strncmp+0x1c>
   232ca:	2b00      	cmp	r3, #0
   232cc:	d1f5      	bne.n	232ba <strncmp+0x8>
   232ce:	1a98      	subs	r0, r3, r2
   232d0:	bd10      	pop	{r4, pc}
   232d2:	4610      	mov	r0, r2
   232d4:	e7fc      	b.n	232d0 <strncmp+0x1e>

000232d6 <strncpy>:
   232d6:	3901      	subs	r1, #1
   232d8:	4603      	mov	r3, r0
   232da:	b510      	push	{r4, lr}
   232dc:	b132      	cbz	r2, 232ec <strncpy+0x16>
   232de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   232e2:	3a01      	subs	r2, #1
   232e4:	f803 4b01 	strb.w	r4, [r3], #1
   232e8:	2c00      	cmp	r4, #0
   232ea:	d1f7      	bne.n	232dc <strncpy+0x6>
   232ec:	441a      	add	r2, r3
   232ee:	2100      	movs	r1, #0
   232f0:	4293      	cmp	r3, r2
   232f2:	d100      	bne.n	232f6 <strncpy+0x20>
   232f4:	bd10      	pop	{r4, pc}
   232f6:	f803 1b01 	strb.w	r1, [r3], #1
   232fa:	e7f9      	b.n	232f0 <strncpy+0x1a>

000232fc <strnlen>:
   232fc:	4602      	mov	r2, r0
   232fe:	4401      	add	r1, r0
   23300:	b510      	push	{r4, lr}
   23302:	428a      	cmp	r2, r1
   23304:	4613      	mov	r3, r2
   23306:	d101      	bne.n	2330c <strnlen+0x10>
   23308:	1a18      	subs	r0, r3, r0
   2330a:	bd10      	pop	{r4, pc}
   2330c:	781c      	ldrb	r4, [r3, #0]
   2330e:	3201      	adds	r2, #1
   23310:	2c00      	cmp	r4, #0
   23312:	d1f6      	bne.n	23302 <strnlen+0x6>
   23314:	e7f8      	b.n	23308 <strnlen+0xc>

00023316 <strstr>:
   23316:	b5f0      	push	{r4, r5, r6, r7, lr}
   23318:	780c      	ldrb	r4, [r1, #0]
   2331a:	b164      	cbz	r4, 23336 <strstr+0x20>
   2331c:	4603      	mov	r3, r0
   2331e:	781a      	ldrb	r2, [r3, #0]
   23320:	4618      	mov	r0, r3
   23322:	1c5e      	adds	r6, r3, #1
   23324:	b90a      	cbnz	r2, 2332a <strstr+0x14>
   23326:	4610      	mov	r0, r2
   23328:	e005      	b.n	23336 <strstr+0x20>
   2332a:	4294      	cmp	r4, r2
   2332c:	d108      	bne.n	23340 <strstr+0x2a>
   2332e:	460d      	mov	r5, r1
   23330:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   23334:	b902      	cbnz	r2, 23338 <strstr+0x22>
   23336:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23338:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   2333c:	4297      	cmp	r7, r2
   2333e:	d0f7      	beq.n	23330 <strstr+0x1a>
   23340:	4633      	mov	r3, r6
   23342:	e7ec      	b.n	2331e <strstr+0x8>

00023344 <_strtol_r>:
   23344:	f7fa b858 	b.w	1d3f8 <_strtol_l.isra.0>

00023348 <_strtoul_r>:
   23348:	f7fa b8d8 	b.w	1d4fc <_strtoul_l.isra.0>

0002334c <_vsniprintf_r>:
   2334c:	b530      	push	{r4, r5, lr}
   2334e:	1e14      	subs	r4, r2, #0
   23350:	4605      	mov	r5, r0
   23352:	b09b      	sub	sp, #108	; 0x6c
   23354:	4618      	mov	r0, r3
   23356:	da05      	bge.n	23364 <_vsniprintf_r+0x18>
   23358:	238b      	movs	r3, #139	; 0x8b
   2335a:	f04f 30ff 	mov.w	r0, #4294967295
   2335e:	602b      	str	r3, [r5, #0]
   23360:	b01b      	add	sp, #108	; 0x6c
   23362:	bd30      	pop	{r4, r5, pc}
   23364:	f44f 7302 	mov.w	r3, #520	; 0x208
   23368:	4602      	mov	r2, r0
   2336a:	9100      	str	r1, [sp, #0]
   2336c:	4628      	mov	r0, r5
   2336e:	f8ad 300c 	strh.w	r3, [sp, #12]
   23372:	bf14      	ite	ne
   23374:	f104 33ff 	addne.w	r3, r4, #4294967295
   23378:	4623      	moveq	r3, r4
   2337a:	9104      	str	r1, [sp, #16]
   2337c:	4669      	mov	r1, sp
   2337e:	9302      	str	r3, [sp, #8]
   23380:	9305      	str	r3, [sp, #20]
   23382:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23386:	f8ad 300e 	strh.w	r3, [sp, #14]
   2338a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2338c:	f7fa f9ba 	bl	1d704 <_svfiprintf_r>
   23390:	1c43      	adds	r3, r0, #1
   23392:	bfbc      	itt	lt
   23394:	238b      	movlt	r3, #139	; 0x8b
   23396:	602b      	strlt	r3, [r5, #0]
   23398:	2c00      	cmp	r4, #0
   2339a:	d0e1      	beq.n	23360 <_vsniprintf_r+0x14>
   2339c:	9b00      	ldr	r3, [sp, #0]
   2339e:	2200      	movs	r2, #0
   233a0:	701a      	strb	r2, [r3, #0]
   233a2:	e7dd      	b.n	23360 <_vsniprintf_r+0x14>

000233a4 <quorem>:
   233a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   233a8:	6903      	ldr	r3, [r0, #16]
   233aa:	4607      	mov	r7, r0
   233ac:	690c      	ldr	r4, [r1, #16]
   233ae:	42a3      	cmp	r3, r4
   233b0:	f2c0 8085 	blt.w	234be <quorem+0x11a>
   233b4:	3c01      	subs	r4, #1
   233b6:	f100 0514 	add.w	r5, r0, #20
   233ba:	f101 0814 	add.w	r8, r1, #20
   233be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   233c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   233c6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   233ca:	9301      	str	r3, [sp, #4]
   233cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   233d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   233d4:	3301      	adds	r3, #1
   233d6:	429a      	cmp	r2, r3
   233d8:	fbb2 f6f3 	udiv	r6, r2, r3
   233dc:	d333      	bcc.n	23446 <quorem+0xa2>
   233de:	f04f 0e00 	mov.w	lr, #0
   233e2:	4640      	mov	r0, r8
   233e4:	46ac      	mov	ip, r5
   233e6:	46f2      	mov	sl, lr
   233e8:	f850 2b04 	ldr.w	r2, [r0], #4
   233ec:	b293      	uxth	r3, r2
   233ee:	4581      	cmp	r9, r0
   233f0:	ea4f 4212 	mov.w	r2, r2, lsr #16
   233f4:	fb06 e303 	mla	r3, r6, r3, lr
   233f8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   233fc:	b29b      	uxth	r3, r3
   233fe:	fb06 e202 	mla	r2, r6, r2, lr
   23402:	ebaa 0303 	sub.w	r3, sl, r3
   23406:	f8dc a000 	ldr.w	sl, [ip]
   2340a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   2340e:	fa1f fa8a 	uxth.w	sl, sl
   23412:	4453      	add	r3, sl
   23414:	fa1f fa82 	uxth.w	sl, r2
   23418:	f8dc 2000 	ldr.w	r2, [ip]
   2341c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   23420:	eb02 4223 	add.w	r2, r2, r3, asr #16
   23424:	b29b      	uxth	r3, r3
   23426:	ea4f 4a22 	mov.w	sl, r2, asr #16
   2342a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2342e:	f84c 3b04 	str.w	r3, [ip], #4
   23432:	d2d9      	bcs.n	233e8 <quorem+0x44>
   23434:	f855 300b 	ldr.w	r3, [r5, fp]
   23438:	b92b      	cbnz	r3, 23446 <quorem+0xa2>
   2343a:	9b01      	ldr	r3, [sp, #4]
   2343c:	3b04      	subs	r3, #4
   2343e:	429d      	cmp	r5, r3
   23440:	461a      	mov	r2, r3
   23442:	d330      	bcc.n	234a6 <quorem+0x102>
   23444:	613c      	str	r4, [r7, #16]
   23446:	4638      	mov	r0, r7
   23448:	f000 fa2a 	bl	238a0 <__mcmp>
   2344c:	2800      	cmp	r0, #0
   2344e:	db26      	blt.n	2349e <quorem+0xfa>
   23450:	3601      	adds	r6, #1
   23452:	4628      	mov	r0, r5
   23454:	f04f 0c00 	mov.w	ip, #0
   23458:	f858 1b04 	ldr.w	r1, [r8], #4
   2345c:	f8d0 e000 	ldr.w	lr, [r0]
   23460:	b28b      	uxth	r3, r1
   23462:	45c1      	cmp	r9, r8
   23464:	fa1f f28e 	uxth.w	r2, lr
   23468:	ebac 0303 	sub.w	r3, ip, r3
   2346c:	4413      	add	r3, r2
   2346e:	ea4f 4211 	mov.w	r2, r1, lsr #16
   23472:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   23476:	eb02 4223 	add.w	r2, r2, r3, asr #16
   2347a:	b29b      	uxth	r3, r3
   2347c:	ea4f 4c22 	mov.w	ip, r2, asr #16
   23480:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   23484:	f840 3b04 	str.w	r3, [r0], #4
   23488:	d2e6      	bcs.n	23458 <quorem+0xb4>
   2348a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2348e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   23492:	b922      	cbnz	r2, 2349e <quorem+0xfa>
   23494:	3b04      	subs	r3, #4
   23496:	429d      	cmp	r5, r3
   23498:	461a      	mov	r2, r3
   2349a:	d30a      	bcc.n	234b2 <quorem+0x10e>
   2349c:	613c      	str	r4, [r7, #16]
   2349e:	4630      	mov	r0, r6
   234a0:	b003      	add	sp, #12
   234a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   234a6:	6812      	ldr	r2, [r2, #0]
   234a8:	3b04      	subs	r3, #4
   234aa:	2a00      	cmp	r2, #0
   234ac:	d1ca      	bne.n	23444 <quorem+0xa0>
   234ae:	3c01      	subs	r4, #1
   234b0:	e7c5      	b.n	2343e <quorem+0x9a>
   234b2:	6812      	ldr	r2, [r2, #0]
   234b4:	3b04      	subs	r3, #4
   234b6:	2a00      	cmp	r2, #0
   234b8:	d1f0      	bne.n	2349c <quorem+0xf8>
   234ba:	3c01      	subs	r4, #1
   234bc:	e7eb      	b.n	23496 <quorem+0xf2>
   234be:	2000      	movs	r0, #0
   234c0:	e7ee      	b.n	234a0 <quorem+0xfc>

000234c2 <__ascii_mbtowc>:
   234c2:	b082      	sub	sp, #8
   234c4:	b901      	cbnz	r1, 234c8 <__ascii_mbtowc+0x6>
   234c6:	a901      	add	r1, sp, #4
   234c8:	b142      	cbz	r2, 234dc <__ascii_mbtowc+0x1a>
   234ca:	b14b      	cbz	r3, 234e0 <__ascii_mbtowc+0x1e>
   234cc:	7813      	ldrb	r3, [r2, #0]
   234ce:	600b      	str	r3, [r1, #0]
   234d0:	7812      	ldrb	r2, [r2, #0]
   234d2:	1e10      	subs	r0, r2, #0
   234d4:	bf18      	it	ne
   234d6:	2001      	movne	r0, #1
   234d8:	b002      	add	sp, #8
   234da:	4770      	bx	lr
   234dc:	4610      	mov	r0, r2
   234de:	e7fb      	b.n	234d8 <__ascii_mbtowc+0x16>
   234e0:	f06f 0001 	mvn.w	r0, #1
   234e4:	e7f8      	b.n	234d8 <__ascii_mbtowc+0x16>

000234e6 <_Balloc>:
   234e6:	b570      	push	{r4, r5, r6, lr}
   234e8:	6a46      	ldr	r6, [r0, #36]	; 0x24
   234ea:	4604      	mov	r4, r0
   234ec:	460d      	mov	r5, r1
   234ee:	b93e      	cbnz	r6, 23500 <_Balloc+0x1a>
   234f0:	2010      	movs	r0, #16
   234f2:	f7f9 faf3 	bl	1cadc <malloc>
   234f6:	6260      	str	r0, [r4, #36]	; 0x24
   234f8:	6006      	str	r6, [r0, #0]
   234fa:	60c6      	str	r6, [r0, #12]
   234fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   23500:	6a66      	ldr	r6, [r4, #36]	; 0x24
   23502:	68f3      	ldr	r3, [r6, #12]
   23504:	b183      	cbz	r3, 23528 <_Balloc+0x42>
   23506:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23508:	68db      	ldr	r3, [r3, #12]
   2350a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2350e:	b9b8      	cbnz	r0, 23540 <_Balloc+0x5a>
   23510:	2101      	movs	r1, #1
   23512:	4620      	mov	r0, r4
   23514:	fa01 f605 	lsl.w	r6, r1, r5
   23518:	1d72      	adds	r2, r6, #5
   2351a:	0092      	lsls	r2, r2, #2
   2351c:	f000 faa9 	bl	23a72 <_calloc_r>
   23520:	b160      	cbz	r0, 2353c <_Balloc+0x56>
   23522:	e9c0 5601 	strd	r5, r6, [r0, #4]
   23526:	e00e      	b.n	23546 <_Balloc+0x60>
   23528:	2221      	movs	r2, #33	; 0x21
   2352a:	2104      	movs	r1, #4
   2352c:	4620      	mov	r0, r4
   2352e:	f000 faa0 	bl	23a72 <_calloc_r>
   23532:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23534:	60f0      	str	r0, [r6, #12]
   23536:	68db      	ldr	r3, [r3, #12]
   23538:	2b00      	cmp	r3, #0
   2353a:	d1e4      	bne.n	23506 <_Balloc+0x20>
   2353c:	2000      	movs	r0, #0
   2353e:	bd70      	pop	{r4, r5, r6, pc}
   23540:	6802      	ldr	r2, [r0, #0]
   23542:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   23546:	2300      	movs	r3, #0
   23548:	e9c0 3303 	strd	r3, r3, [r0, #12]
   2354c:	e7f7      	b.n	2353e <_Balloc+0x58>

0002354e <_Bfree>:
   2354e:	b570      	push	{r4, r5, r6, lr}
   23550:	6a46      	ldr	r6, [r0, #36]	; 0x24
   23552:	4605      	mov	r5, r0
   23554:	460c      	mov	r4, r1
   23556:	b93e      	cbnz	r6, 23568 <_Bfree+0x1a>
   23558:	2010      	movs	r0, #16
   2355a:	f7f9 fabf 	bl	1cadc <malloc>
   2355e:	6268      	str	r0, [r5, #36]	; 0x24
   23560:	6006      	str	r6, [r0, #0]
   23562:	60c6      	str	r6, [r0, #12]
   23564:	e9c0 6601 	strd	r6, r6, [r0, #4]
   23568:	b13c      	cbz	r4, 2357a <_Bfree+0x2c>
   2356a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2356c:	6862      	ldr	r2, [r4, #4]
   2356e:	68db      	ldr	r3, [r3, #12]
   23570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   23574:	6021      	str	r1, [r4, #0]
   23576:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   2357a:	bd70      	pop	{r4, r5, r6, pc}

0002357c <__multadd>:
   2357c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23580:	4607      	mov	r7, r0
   23582:	4698      	mov	r8, r3
   23584:	460c      	mov	r4, r1
   23586:	690e      	ldr	r6, [r1, #16]
   23588:	f101 0014 	add.w	r0, r1, #20
   2358c:	2300      	movs	r3, #0
   2358e:	6805      	ldr	r5, [r0, #0]
   23590:	3301      	adds	r3, #1
   23592:	b2a9      	uxth	r1, r5
   23594:	429e      	cmp	r6, r3
   23596:	ea4f 4515 	mov.w	r5, r5, lsr #16
   2359a:	fb02 8101 	mla	r1, r2, r1, r8
   2359e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   235a2:	b289      	uxth	r1, r1
   235a4:	fb02 c505 	mla	r5, r2, r5, ip
   235a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   235ac:	ea4f 4815 	mov.w	r8, r5, lsr #16
   235b0:	f840 1b04 	str.w	r1, [r0], #4
   235b4:	dceb      	bgt.n	2358e <__multadd+0x12>
   235b6:	f1b8 0f00 	cmp.w	r8, #0
   235ba:	d01b      	beq.n	235f4 <__multadd+0x78>
   235bc:	68a3      	ldr	r3, [r4, #8]
   235be:	42b3      	cmp	r3, r6
   235c0:	dc12      	bgt.n	235e8 <__multadd+0x6c>
   235c2:	6861      	ldr	r1, [r4, #4]
   235c4:	4638      	mov	r0, r7
   235c6:	3101      	adds	r1, #1
   235c8:	f7ff ff8d 	bl	234e6 <_Balloc>
   235cc:	6922      	ldr	r2, [r4, #16]
   235ce:	4605      	mov	r5, r0
   235d0:	f104 010c 	add.w	r1, r4, #12
   235d4:	3202      	adds	r2, #2
   235d6:	300c      	adds	r0, #12
   235d8:	0092      	lsls	r2, r2, #2
   235da:	f7ff fccc 	bl	22f76 <memcpy>
   235de:	4621      	mov	r1, r4
   235e0:	462c      	mov	r4, r5
   235e2:	4638      	mov	r0, r7
   235e4:	f7ff ffb3 	bl	2354e <_Bfree>
   235e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   235ec:	3601      	adds	r6, #1
   235ee:	f8c3 8014 	str.w	r8, [r3, #20]
   235f2:	6126      	str	r6, [r4, #16]
   235f4:	4620      	mov	r0, r4
   235f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000235fa <__hi0bits>:
   235fa:	0c03      	lsrs	r3, r0, #16
   235fc:	041b      	lsls	r3, r3, #16
   235fe:	b9d3      	cbnz	r3, 23636 <__hi0bits+0x3c>
   23600:	0400      	lsls	r0, r0, #16
   23602:	2310      	movs	r3, #16
   23604:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   23608:	bf04      	itt	eq
   2360a:	0200      	lsleq	r0, r0, #8
   2360c:	3308      	addeq	r3, #8
   2360e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   23612:	bf04      	itt	eq
   23614:	0100      	lsleq	r0, r0, #4
   23616:	3304      	addeq	r3, #4
   23618:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   2361c:	bf04      	itt	eq
   2361e:	0080      	lsleq	r0, r0, #2
   23620:	3302      	addeq	r3, #2
   23622:	2800      	cmp	r0, #0
   23624:	db05      	blt.n	23632 <__hi0bits+0x38>
   23626:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   2362a:	f103 0301 	add.w	r3, r3, #1
   2362e:	bf08      	it	eq
   23630:	2320      	moveq	r3, #32
   23632:	4618      	mov	r0, r3
   23634:	4770      	bx	lr
   23636:	2300      	movs	r3, #0
   23638:	e7e4      	b.n	23604 <__hi0bits+0xa>

0002363a <__lo0bits>:
   2363a:	6803      	ldr	r3, [r0, #0]
   2363c:	4601      	mov	r1, r0
   2363e:	f013 0207 	ands.w	r2, r3, #7
   23642:	d00b      	beq.n	2365c <__lo0bits+0x22>
   23644:	07da      	lsls	r2, r3, #31
   23646:	d424      	bmi.n	23692 <__lo0bits+0x58>
   23648:	0798      	lsls	r0, r3, #30
   2364a:	bf47      	ittee	mi
   2364c:	085b      	lsrmi	r3, r3, #1
   2364e:	2001      	movmi	r0, #1
   23650:	089b      	lsrpl	r3, r3, #2
   23652:	2002      	movpl	r0, #2
   23654:	bf4c      	ite	mi
   23656:	600b      	strmi	r3, [r1, #0]
   23658:	600b      	strpl	r3, [r1, #0]
   2365a:	4770      	bx	lr
   2365c:	b298      	uxth	r0, r3
   2365e:	b9b0      	cbnz	r0, 2368e <__lo0bits+0x54>
   23660:	0c1b      	lsrs	r3, r3, #16
   23662:	2010      	movs	r0, #16
   23664:	f013 0fff 	tst.w	r3, #255	; 0xff
   23668:	bf04      	itt	eq
   2366a:	0a1b      	lsreq	r3, r3, #8
   2366c:	3008      	addeq	r0, #8
   2366e:	071a      	lsls	r2, r3, #28
   23670:	bf04      	itt	eq
   23672:	091b      	lsreq	r3, r3, #4
   23674:	3004      	addeq	r0, #4
   23676:	079a      	lsls	r2, r3, #30
   23678:	bf04      	itt	eq
   2367a:	089b      	lsreq	r3, r3, #2
   2367c:	3002      	addeq	r0, #2
   2367e:	07da      	lsls	r2, r3, #31
   23680:	d403      	bmi.n	2368a <__lo0bits+0x50>
   23682:	085b      	lsrs	r3, r3, #1
   23684:	f100 0001 	add.w	r0, r0, #1
   23688:	d005      	beq.n	23696 <__lo0bits+0x5c>
   2368a:	600b      	str	r3, [r1, #0]
   2368c:	4770      	bx	lr
   2368e:	4610      	mov	r0, r2
   23690:	e7e8      	b.n	23664 <__lo0bits+0x2a>
   23692:	2000      	movs	r0, #0
   23694:	4770      	bx	lr
   23696:	2020      	movs	r0, #32
   23698:	4770      	bx	lr

0002369a <__i2b>:
   2369a:	b510      	push	{r4, lr}
   2369c:	460c      	mov	r4, r1
   2369e:	2101      	movs	r1, #1
   236a0:	f7ff ff21 	bl	234e6 <_Balloc>
   236a4:	2201      	movs	r2, #1
   236a6:	6144      	str	r4, [r0, #20]
   236a8:	6102      	str	r2, [r0, #16]
   236aa:	bd10      	pop	{r4, pc}

000236ac <__multiply>:
   236ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   236b0:	4615      	mov	r5, r2
   236b2:	690a      	ldr	r2, [r1, #16]
   236b4:	460c      	mov	r4, r1
   236b6:	b085      	sub	sp, #20
   236b8:	692b      	ldr	r3, [r5, #16]
   236ba:	429a      	cmp	r2, r3
   236bc:	bfbe      	ittt	lt
   236be:	460b      	movlt	r3, r1
   236c0:	462c      	movlt	r4, r5
   236c2:	461d      	movlt	r5, r3
   236c4:	6927      	ldr	r7, [r4, #16]
   236c6:	68a3      	ldr	r3, [r4, #8]
   236c8:	f8d5 9010 	ldr.w	r9, [r5, #16]
   236cc:	6861      	ldr	r1, [r4, #4]
   236ce:	eb07 0609 	add.w	r6, r7, r9
   236d2:	42b3      	cmp	r3, r6
   236d4:	bfb8      	it	lt
   236d6:	3101      	addlt	r1, #1
   236d8:	f7ff ff05 	bl	234e6 <_Balloc>
   236dc:	f100 0114 	add.w	r1, r0, #20
   236e0:	2200      	movs	r2, #0
   236e2:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   236e6:	460b      	mov	r3, r1
   236e8:	4543      	cmp	r3, r8
   236ea:	d31d      	bcc.n	23728 <__multiply+0x7c>
   236ec:	f104 0314 	add.w	r3, r4, #20
   236f0:	f105 0214 	add.w	r2, r5, #20
   236f4:	f104 0515 	add.w	r5, r4, #21
   236f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   236fc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   23700:	9302      	str	r3, [sp, #8]
   23702:	1b3b      	subs	r3, r7, r4
   23704:	3b15      	subs	r3, #21
   23706:	f023 0303 	bic.w	r3, r3, #3
   2370a:	3304      	adds	r3, #4
   2370c:	42af      	cmp	r7, r5
   2370e:	bf38      	it	cc
   23710:	2304      	movcc	r3, #4
   23712:	9301      	str	r3, [sp, #4]
   23714:	9b02      	ldr	r3, [sp, #8]
   23716:	9203      	str	r2, [sp, #12]
   23718:	4293      	cmp	r3, r2
   2371a:	d808      	bhi.n	2372e <__multiply+0x82>
   2371c:	2e00      	cmp	r6, #0
   2371e:	dc5a      	bgt.n	237d6 <__multiply+0x12a>
   23720:	6106      	str	r6, [r0, #16]
   23722:	b005      	add	sp, #20
   23724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23728:	f843 2b04 	str.w	r2, [r3], #4
   2372c:	e7dc      	b.n	236e8 <__multiply+0x3c>
   2372e:	f8b2 a000 	ldrh.w	sl, [r2]
   23732:	f1ba 0f00 	cmp.w	sl, #0
   23736:	d024      	beq.n	23782 <__multiply+0xd6>
   23738:	f104 0e14 	add.w	lr, r4, #20
   2373c:	4689      	mov	r9, r1
   2373e:	f04f 0c00 	mov.w	ip, #0
   23742:	f85e 5b04 	ldr.w	r5, [lr], #4
   23746:	f8d9 b000 	ldr.w	fp, [r9]
   2374a:	b2ab      	uxth	r3, r5
   2374c:	4577      	cmp	r7, lr
   2374e:	fa1f fb8b 	uxth.w	fp, fp
   23752:	fb0a b303 	mla	r3, sl, r3, fp
   23756:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   2375a:	f8d9 5000 	ldr.w	r5, [r9]
   2375e:	4463      	add	r3, ip
   23760:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   23764:	fb0a c50b 	mla	r5, sl, fp, ip
   23768:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   2376c:	b29b      	uxth	r3, r3
   2376e:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   23772:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   23776:	f849 3b04 	str.w	r3, [r9], #4
   2377a:	d8e2      	bhi.n	23742 <__multiply+0x96>
   2377c:	9b01      	ldr	r3, [sp, #4]
   2377e:	f841 c003 	str.w	ip, [r1, r3]
   23782:	9b03      	ldr	r3, [sp, #12]
   23784:	3204      	adds	r2, #4
   23786:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   2378a:	f1b9 0f00 	cmp.w	r9, #0
   2378e:	d020      	beq.n	237d2 <__multiply+0x126>
   23790:	680b      	ldr	r3, [r1, #0]
   23792:	f104 0c14 	add.w	ip, r4, #20
   23796:	468e      	mov	lr, r1
   23798:	f04f 0a00 	mov.w	sl, #0
   2379c:	f8bc 5000 	ldrh.w	r5, [ip]
   237a0:	b29b      	uxth	r3, r3
   237a2:	f8be b002 	ldrh.w	fp, [lr, #2]
   237a6:	fb09 b505 	mla	r5, r9, r5, fp
   237aa:	44aa      	add	sl, r5
   237ac:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   237b0:	f84e 3b04 	str.w	r3, [lr], #4
   237b4:	f85c 3b04 	ldr.w	r3, [ip], #4
   237b8:	f8be 5000 	ldrh.w	r5, [lr]
   237bc:	0c1b      	lsrs	r3, r3, #16
   237be:	4567      	cmp	r7, ip
   237c0:	fb09 5303 	mla	r3, r9, r3, r5
   237c4:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   237c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   237cc:	d8e6      	bhi.n	2379c <__multiply+0xf0>
   237ce:	9d01      	ldr	r5, [sp, #4]
   237d0:	514b      	str	r3, [r1, r5]
   237d2:	3104      	adds	r1, #4
   237d4:	e79e      	b.n	23714 <__multiply+0x68>
   237d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   237da:	2b00      	cmp	r3, #0
   237dc:	d1a0      	bne.n	23720 <__multiply+0x74>
   237de:	3e01      	subs	r6, #1
   237e0:	e79c      	b.n	2371c <__multiply+0x70>

000237e2 <__lshift>:
   237e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   237e6:	460c      	mov	r4, r1
   237e8:	4607      	mov	r7, r0
   237ea:	4691      	mov	r9, r2
   237ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
   237f0:	6923      	ldr	r3, [r4, #16]
   237f2:	6849      	ldr	r1, [r1, #4]
   237f4:	eb03 1862 	add.w	r8, r3, r2, asr #5
   237f8:	68a3      	ldr	r3, [r4, #8]
   237fa:	f108 0601 	add.w	r6, r8, #1
   237fe:	42b3      	cmp	r3, r6
   23800:	db3f      	blt.n	23882 <__lshift+0xa0>
   23802:	4638      	mov	r0, r7
   23804:	f7ff fe6f 	bl	234e6 <_Balloc>
   23808:	2300      	movs	r3, #0
   2380a:	4605      	mov	r5, r0
   2380c:	f100 0114 	add.w	r1, r0, #20
   23810:	f100 0210 	add.w	r2, r0, #16
   23814:	4618      	mov	r0, r3
   23816:	4553      	cmp	r3, sl
   23818:	db36      	blt.n	23888 <__lshift+0xa6>
   2381a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   2381e:	f104 0314 	add.w	r3, r4, #20
   23822:	6920      	ldr	r0, [r4, #16]
   23824:	f019 091f 	ands.w	r9, r9, #31
   23828:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   2382c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   23830:	d02e      	beq.n	23890 <__lshift+0xae>
   23832:	f1c9 0e20 	rsb	lr, r9, #32
   23836:	468a      	mov	sl, r1
   23838:	2200      	movs	r2, #0
   2383a:	6818      	ldr	r0, [r3, #0]
   2383c:	fa00 f009 	lsl.w	r0, r0, r9
   23840:	4302      	orrs	r2, r0
   23842:	f84a 2b04 	str.w	r2, [sl], #4
   23846:	f853 2b04 	ldr.w	r2, [r3], #4
   2384a:	459c      	cmp	ip, r3
   2384c:	fa22 f20e 	lsr.w	r2, r2, lr
   23850:	d8f3      	bhi.n	2383a <__lshift+0x58>
   23852:	ebac 0304 	sub.w	r3, ip, r4
   23856:	f104 0015 	add.w	r0, r4, #21
   2385a:	3b15      	subs	r3, #21
   2385c:	f023 0303 	bic.w	r3, r3, #3
   23860:	3304      	adds	r3, #4
   23862:	4560      	cmp	r0, ip
   23864:	bf88      	it	hi
   23866:	2304      	movhi	r3, #4
   23868:	50ca      	str	r2, [r1, r3]
   2386a:	b10a      	cbz	r2, 23870 <__lshift+0x8e>
   2386c:	f108 0602 	add.w	r6, r8, #2
   23870:	3e01      	subs	r6, #1
   23872:	4638      	mov	r0, r7
   23874:	4621      	mov	r1, r4
   23876:	612e      	str	r6, [r5, #16]
   23878:	f7ff fe69 	bl	2354e <_Bfree>
   2387c:	4628      	mov	r0, r5
   2387e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23882:	3101      	adds	r1, #1
   23884:	005b      	lsls	r3, r3, #1
   23886:	e7ba      	b.n	237fe <__lshift+0x1c>
   23888:	3301      	adds	r3, #1
   2388a:	f842 0f04 	str.w	r0, [r2, #4]!
   2388e:	e7c2      	b.n	23816 <__lshift+0x34>
   23890:	3904      	subs	r1, #4
   23892:	f853 2b04 	ldr.w	r2, [r3], #4
   23896:	459c      	cmp	ip, r3
   23898:	f841 2f04 	str.w	r2, [r1, #4]!
   2389c:	d8f9      	bhi.n	23892 <__lshift+0xb0>
   2389e:	e7e7      	b.n	23870 <__lshift+0x8e>

000238a0 <__mcmp>:
   238a0:	6902      	ldr	r2, [r0, #16]
   238a2:	b530      	push	{r4, r5, lr}
   238a4:	690c      	ldr	r4, [r1, #16]
   238a6:	1b12      	subs	r2, r2, r4
   238a8:	d10e      	bne.n	238c8 <__mcmp+0x28>
   238aa:	f100 0314 	add.w	r3, r0, #20
   238ae:	3114      	adds	r1, #20
   238b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   238b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   238b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   238bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   238c0:	42a5      	cmp	r5, r4
   238c2:	d003      	beq.n	238cc <__mcmp+0x2c>
   238c4:	d305      	bcc.n	238d2 <__mcmp+0x32>
   238c6:	2201      	movs	r2, #1
   238c8:	4610      	mov	r0, r2
   238ca:	bd30      	pop	{r4, r5, pc}
   238cc:	4283      	cmp	r3, r0
   238ce:	d3f3      	bcc.n	238b8 <__mcmp+0x18>
   238d0:	e7fa      	b.n	238c8 <__mcmp+0x28>
   238d2:	f04f 32ff 	mov.w	r2, #4294967295
   238d6:	e7f7      	b.n	238c8 <__mcmp+0x28>

000238d8 <__mdiff>:
   238d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   238dc:	460c      	mov	r4, r1
   238de:	4606      	mov	r6, r0
   238e0:	4611      	mov	r1, r2
   238e2:	4692      	mov	sl, r2
   238e4:	4620      	mov	r0, r4
   238e6:	f7ff ffdb 	bl	238a0 <__mcmp>
   238ea:	1e05      	subs	r5, r0, #0
   238ec:	d108      	bne.n	23900 <__mdiff+0x28>
   238ee:	4629      	mov	r1, r5
   238f0:	4630      	mov	r0, r6
   238f2:	f7ff fdf8 	bl	234e6 <_Balloc>
   238f6:	2301      	movs	r3, #1
   238f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
   238fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23900:	bfa3      	ittte	ge
   23902:	4653      	movge	r3, sl
   23904:	46a2      	movge	sl, r4
   23906:	2500      	movge	r5, #0
   23908:	2501      	movlt	r5, #1
   2390a:	bfa8      	it	ge
   2390c:	461c      	movge	r4, r3
   2390e:	f8da 1004 	ldr.w	r1, [sl, #4]
   23912:	4630      	mov	r0, r6
   23914:	f7ff fde7 	bl	234e6 <_Balloc>
   23918:	f104 0914 	add.w	r9, r4, #20
   2391c:	f8da 7010 	ldr.w	r7, [sl, #16]
   23920:	f100 0814 	add.w	r8, r0, #20
   23924:	6926      	ldr	r6, [r4, #16]
   23926:	f10a 0210 	add.w	r2, sl, #16
   2392a:	60c5      	str	r5, [r0, #12]
   2392c:	f10a 0514 	add.w	r5, sl, #20
   23930:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   23934:	46c2      	mov	sl, r8
   23936:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   2393a:	f04f 0c00 	mov.w	ip, #0
   2393e:	f852 bf04 	ldr.w	fp, [r2, #4]!
   23942:	f859 3b04 	ldr.w	r3, [r9], #4
   23946:	fa1f f18b 	uxth.w	r1, fp
   2394a:	454e      	cmp	r6, r9
   2394c:	4461      	add	r1, ip
   2394e:	fa1f fc83 	uxth.w	ip, r3
   23952:	ea4f 4313 	mov.w	r3, r3, lsr #16
   23956:	eba1 010c 	sub.w	r1, r1, ip
   2395a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   2395e:	eb03 4321 	add.w	r3, r3, r1, asr #16
   23962:	b289      	uxth	r1, r1
   23964:	ea4f 4c23 	mov.w	ip, r3, asr #16
   23968:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   2396c:	f84a 3b04 	str.w	r3, [sl], #4
   23970:	d8e5      	bhi.n	2393e <__mdiff+0x66>
   23972:	1b33      	subs	r3, r6, r4
   23974:	3415      	adds	r4, #21
   23976:	3b15      	subs	r3, #21
   23978:	f023 0303 	bic.w	r3, r3, #3
   2397c:	3304      	adds	r3, #4
   2397e:	42a6      	cmp	r6, r4
   23980:	bf38      	it	cc
   23982:	2304      	movcc	r3, #4
   23984:	441d      	add	r5, r3
   23986:	4443      	add	r3, r8
   23988:	462c      	mov	r4, r5
   2398a:	461e      	mov	r6, r3
   2398c:	4574      	cmp	r4, lr
   2398e:	d30e      	bcc.n	239ae <__mdiff+0xd6>
   23990:	f10e 0203 	add.w	r2, lr, #3
   23994:	1b52      	subs	r2, r2, r5
   23996:	3d03      	subs	r5, #3
   23998:	f022 0203 	bic.w	r2, r2, #3
   2399c:	45ae      	cmp	lr, r5
   2399e:	bf38      	it	cc
   239a0:	2200      	movcc	r2, #0
   239a2:	441a      	add	r2, r3
   239a4:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   239a8:	b18b      	cbz	r3, 239ce <__mdiff+0xf6>
   239aa:	6107      	str	r7, [r0, #16]
   239ac:	e7a6      	b.n	238fc <__mdiff+0x24>
   239ae:	f854 8b04 	ldr.w	r8, [r4], #4
   239b2:	fa1f f288 	uxth.w	r2, r8
   239b6:	4462      	add	r2, ip
   239b8:	1411      	asrs	r1, r2, #16
   239ba:	b292      	uxth	r2, r2
   239bc:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   239c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   239c4:	ea4f 4c21 	mov.w	ip, r1, asr #16
   239c8:	f846 2b04 	str.w	r2, [r6], #4
   239cc:	e7de      	b.n	2398c <__mdiff+0xb4>
   239ce:	3f01      	subs	r7, #1
   239d0:	e7e8      	b.n	239a4 <__mdiff+0xcc>

000239d2 <__d2b>:
   239d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   239d6:	ec57 6b10 	vmov	r6, r7, d0
   239da:	f3c7 550a 	ubfx	r5, r7, #20, #11
   239de:	4689      	mov	r9, r1
   239e0:	2101      	movs	r1, #1
   239e2:	4690      	mov	r8, r2
   239e4:	f7ff fd7f 	bl	234e6 <_Balloc>
   239e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   239ec:	4604      	mov	r4, r0
   239ee:	bb35      	cbnz	r5, 23a3e <__d2b+0x6c>
   239f0:	2e00      	cmp	r6, #0
   239f2:	9301      	str	r3, [sp, #4]
   239f4:	d028      	beq.n	23a48 <__d2b+0x76>
   239f6:	4668      	mov	r0, sp
   239f8:	9600      	str	r6, [sp, #0]
   239fa:	f7ff fe1e 	bl	2363a <__lo0bits>
   239fe:	9900      	ldr	r1, [sp, #0]
   23a00:	b300      	cbz	r0, 23a44 <__d2b+0x72>
   23a02:	9a01      	ldr	r2, [sp, #4]
   23a04:	f1c0 0320 	rsb	r3, r0, #32
   23a08:	fa02 f303 	lsl.w	r3, r2, r3
   23a0c:	40c2      	lsrs	r2, r0
   23a0e:	430b      	orrs	r3, r1
   23a10:	9201      	str	r2, [sp, #4]
   23a12:	6163      	str	r3, [r4, #20]
   23a14:	9b01      	ldr	r3, [sp, #4]
   23a16:	2b00      	cmp	r3, #0
   23a18:	61a3      	str	r3, [r4, #24]
   23a1a:	bf14      	ite	ne
   23a1c:	2202      	movne	r2, #2
   23a1e:	2201      	moveq	r2, #1
   23a20:	6122      	str	r2, [r4, #16]
   23a22:	b1d5      	cbz	r5, 23a5a <__d2b+0x88>
   23a24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   23a28:	4405      	add	r5, r0
   23a2a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   23a2e:	f8c9 5000 	str.w	r5, [r9]
   23a32:	f8c8 0000 	str.w	r0, [r8]
   23a36:	4620      	mov	r0, r4
   23a38:	b003      	add	sp, #12
   23a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   23a42:	e7d5      	b.n	239f0 <__d2b+0x1e>
   23a44:	6161      	str	r1, [r4, #20]
   23a46:	e7e5      	b.n	23a14 <__d2b+0x42>
   23a48:	a801      	add	r0, sp, #4
   23a4a:	f7ff fdf6 	bl	2363a <__lo0bits>
   23a4e:	9b01      	ldr	r3, [sp, #4]
   23a50:	2201      	movs	r2, #1
   23a52:	3020      	adds	r0, #32
   23a54:	6163      	str	r3, [r4, #20]
   23a56:	6122      	str	r2, [r4, #16]
   23a58:	e7e3      	b.n	23a22 <__d2b+0x50>
   23a5a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   23a5e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   23a62:	f8c9 0000 	str.w	r0, [r9]
   23a66:	6918      	ldr	r0, [r3, #16]
   23a68:	f7ff fdc7 	bl	235fa <__hi0bits>
   23a6c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   23a70:	e7df      	b.n	23a32 <__d2b+0x60>

00023a72 <_calloc_r>:
   23a72:	434a      	muls	r2, r1
   23a74:	b513      	push	{r0, r1, r4, lr}
   23a76:	4611      	mov	r1, r2
   23a78:	9201      	str	r2, [sp, #4]
   23a7a:	f7f9 f88f 	bl	1cb9c <_malloc_r>
   23a7e:	4604      	mov	r4, r0
   23a80:	b118      	cbz	r0, 23a8a <_calloc_r+0x18>
   23a82:	9a01      	ldr	r2, [sp, #4]
   23a84:	2100      	movs	r1, #0
   23a86:	f7ff fa96 	bl	22fb6 <memset>
   23a8a:	4620      	mov	r0, r4
   23a8c:	b002      	add	sp, #8
   23a8e:	bd10      	pop	{r4, pc}

00023a90 <_realloc_r>:
   23a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23a92:	4607      	mov	r7, r0
   23a94:	4614      	mov	r4, r2
   23a96:	460e      	mov	r6, r1
   23a98:	b921      	cbnz	r1, 23aa4 <_realloc_r+0x14>
   23a9a:	4611      	mov	r1, r2
   23a9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   23aa0:	f7f9 b87c 	b.w	1cb9c <_malloc_r>
   23aa4:	b922      	cbnz	r2, 23ab0 <_realloc_r+0x20>
   23aa6:	4625      	mov	r5, r4
   23aa8:	f7f9 f828 	bl	1cafc <_free_r>
   23aac:	4628      	mov	r0, r5
   23aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23ab0:	f000 f960 	bl	23d74 <_malloc_usable_size_r>
   23ab4:	42a0      	cmp	r0, r4
   23ab6:	d20f      	bcs.n	23ad8 <_realloc_r+0x48>
   23ab8:	4621      	mov	r1, r4
   23aba:	4638      	mov	r0, r7
   23abc:	f7f9 f86e 	bl	1cb9c <_malloc_r>
   23ac0:	4605      	mov	r5, r0
   23ac2:	2800      	cmp	r0, #0
   23ac4:	d0f2      	beq.n	23aac <_realloc_r+0x1c>
   23ac6:	4631      	mov	r1, r6
   23ac8:	4622      	mov	r2, r4
   23aca:	f7ff fa54 	bl	22f76 <memcpy>
   23ace:	4631      	mov	r1, r6
   23ad0:	4638      	mov	r0, r7
   23ad2:	f7f9 f813 	bl	1cafc <_free_r>
   23ad6:	e7e9      	b.n	23aac <_realloc_r+0x1c>
   23ad8:	4635      	mov	r5, r6
   23ada:	e7e7      	b.n	23aac <_realloc_r+0x1c>

00023adc <__ssputs_r>:
   23adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23ae0:	688e      	ldr	r6, [r1, #8]
   23ae2:	4682      	mov	sl, r0
   23ae4:	460c      	mov	r4, r1
   23ae6:	4690      	mov	r8, r2
   23ae8:	429e      	cmp	r6, r3
   23aea:	461f      	mov	r7, r3
   23aec:	d838      	bhi.n	23b60 <__ssputs_r+0x84>
   23aee:	898a      	ldrh	r2, [r1, #12]
   23af0:	f412 6f90 	tst.w	r2, #1152	; 0x480
   23af4:	d032      	beq.n	23b5c <__ssputs_r+0x80>
   23af6:	6825      	ldr	r5, [r4, #0]
   23af8:	3301      	adds	r3, #1
   23afa:	6909      	ldr	r1, [r1, #16]
   23afc:	eba5 0901 	sub.w	r9, r5, r1
   23b00:	6965      	ldr	r5, [r4, #20]
   23b02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   23b06:	444b      	add	r3, r9
   23b08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   23b0c:	106d      	asrs	r5, r5, #1
   23b0e:	429d      	cmp	r5, r3
   23b10:	bf38      	it	cc
   23b12:	461d      	movcc	r5, r3
   23b14:	0553      	lsls	r3, r2, #21
   23b16:	d531      	bpl.n	23b7c <__ssputs_r+0xa0>
   23b18:	4629      	mov	r1, r5
   23b1a:	f7f9 f83f 	bl	1cb9c <_malloc_r>
   23b1e:	4606      	mov	r6, r0
   23b20:	b950      	cbnz	r0, 23b38 <__ssputs_r+0x5c>
   23b22:	230c      	movs	r3, #12
   23b24:	f04f 30ff 	mov.w	r0, #4294967295
   23b28:	f8ca 3000 	str.w	r3, [sl]
   23b2c:	89a3      	ldrh	r3, [r4, #12]
   23b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23b32:	81a3      	strh	r3, [r4, #12]
   23b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23b38:	464a      	mov	r2, r9
   23b3a:	6921      	ldr	r1, [r4, #16]
   23b3c:	f7ff fa1b 	bl	22f76 <memcpy>
   23b40:	89a3      	ldrh	r3, [r4, #12]
   23b42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   23b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   23b4a:	81a3      	strh	r3, [r4, #12]
   23b4c:	6126      	str	r6, [r4, #16]
   23b4e:	444e      	add	r6, r9
   23b50:	6165      	str	r5, [r4, #20]
   23b52:	eba5 0509 	sub.w	r5, r5, r9
   23b56:	6026      	str	r6, [r4, #0]
   23b58:	463e      	mov	r6, r7
   23b5a:	60a5      	str	r5, [r4, #8]
   23b5c:	42be      	cmp	r6, r7
   23b5e:	d900      	bls.n	23b62 <__ssputs_r+0x86>
   23b60:	463e      	mov	r6, r7
   23b62:	4632      	mov	r2, r6
   23b64:	4641      	mov	r1, r8
   23b66:	6820      	ldr	r0, [r4, #0]
   23b68:	f000 f8ea 	bl	23d40 <memmove>
   23b6c:	68a3      	ldr	r3, [r4, #8]
   23b6e:	6822      	ldr	r2, [r4, #0]
   23b70:	2000      	movs	r0, #0
   23b72:	1b9b      	subs	r3, r3, r6
   23b74:	4432      	add	r2, r6
   23b76:	60a3      	str	r3, [r4, #8]
   23b78:	6022      	str	r2, [r4, #0]
   23b7a:	e7db      	b.n	23b34 <__ssputs_r+0x58>
   23b7c:	462a      	mov	r2, r5
   23b7e:	f7ff ff87 	bl	23a90 <_realloc_r>
   23b82:	4606      	mov	r6, r0
   23b84:	2800      	cmp	r0, #0
   23b86:	d1e1      	bne.n	23b4c <__ssputs_r+0x70>
   23b88:	6921      	ldr	r1, [r4, #16]
   23b8a:	4650      	mov	r0, sl
   23b8c:	f7f8 ffb6 	bl	1cafc <_free_r>
   23b90:	e7c7      	b.n	23b22 <__ssputs_r+0x46>

00023b92 <_sungetc_r>:
   23b92:	b538      	push	{r3, r4, r5, lr}
   23b94:	1c4b      	adds	r3, r1, #1
   23b96:	4614      	mov	r4, r2
   23b98:	d103      	bne.n	23ba2 <_sungetc_r+0x10>
   23b9a:	f04f 35ff 	mov.w	r5, #4294967295
   23b9e:	4628      	mov	r0, r5
   23ba0:	bd38      	pop	{r3, r4, r5, pc}
   23ba2:	8993      	ldrh	r3, [r2, #12]
   23ba4:	b2cd      	uxtb	r5, r1
   23ba6:	f023 0320 	bic.w	r3, r3, #32
   23baa:	8193      	strh	r3, [r2, #12]
   23bac:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23bae:	6852      	ldr	r2, [r2, #4]
   23bb0:	b18b      	cbz	r3, 23bd6 <_sungetc_r+0x44>
   23bb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   23bb4:	4293      	cmp	r3, r2
   23bb6:	dd08      	ble.n	23bca <_sungetc_r+0x38>
   23bb8:	6823      	ldr	r3, [r4, #0]
   23bba:	1e5a      	subs	r2, r3, #1
   23bbc:	6022      	str	r2, [r4, #0]
   23bbe:	f803 5c01 	strb.w	r5, [r3, #-1]
   23bc2:	6863      	ldr	r3, [r4, #4]
   23bc4:	3301      	adds	r3, #1
   23bc6:	6063      	str	r3, [r4, #4]
   23bc8:	e7e9      	b.n	23b9e <_sungetc_r+0xc>
   23bca:	4621      	mov	r1, r4
   23bcc:	f000 f874 	bl	23cb8 <__submore>
   23bd0:	2800      	cmp	r0, #0
   23bd2:	d0f1      	beq.n	23bb8 <_sungetc_r+0x26>
   23bd4:	e7e1      	b.n	23b9a <_sungetc_r+0x8>
   23bd6:	6921      	ldr	r1, [r4, #16]
   23bd8:	6823      	ldr	r3, [r4, #0]
   23bda:	b151      	cbz	r1, 23bf2 <_sungetc_r+0x60>
   23bdc:	4299      	cmp	r1, r3
   23bde:	d208      	bcs.n	23bf2 <_sungetc_r+0x60>
   23be0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   23be4:	42a9      	cmp	r1, r5
   23be6:	d104      	bne.n	23bf2 <_sungetc_r+0x60>
   23be8:	3b01      	subs	r3, #1
   23bea:	3201      	adds	r2, #1
   23bec:	6023      	str	r3, [r4, #0]
   23bee:	6062      	str	r2, [r4, #4]
   23bf0:	e7d5      	b.n	23b9e <_sungetc_r+0xc>
   23bf2:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   23bf6:	f104 0344 	add.w	r3, r4, #68	; 0x44
   23bfa:	6363      	str	r3, [r4, #52]	; 0x34
   23bfc:	2303      	movs	r3, #3
   23bfe:	63a3      	str	r3, [r4, #56]	; 0x38
   23c00:	4623      	mov	r3, r4
   23c02:	f803 5f46 	strb.w	r5, [r3, #70]!
   23c06:	6023      	str	r3, [r4, #0]
   23c08:	2301      	movs	r3, #1
   23c0a:	e7dc      	b.n	23bc6 <_sungetc_r+0x34>

00023c0c <__ssrefill_r>:
   23c0c:	b510      	push	{r4, lr}
   23c0e:	460c      	mov	r4, r1
   23c10:	6b49      	ldr	r1, [r1, #52]	; 0x34
   23c12:	b169      	cbz	r1, 23c30 <__ssrefill_r+0x24>
   23c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
   23c18:	4299      	cmp	r1, r3
   23c1a:	d001      	beq.n	23c20 <__ssrefill_r+0x14>
   23c1c:	f7f8 ff6e 	bl	1cafc <_free_r>
   23c20:	2000      	movs	r0, #0
   23c22:	6c23      	ldr	r3, [r4, #64]	; 0x40
   23c24:	6360      	str	r0, [r4, #52]	; 0x34
   23c26:	6063      	str	r3, [r4, #4]
   23c28:	b113      	cbz	r3, 23c30 <__ssrefill_r+0x24>
   23c2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   23c2c:	6023      	str	r3, [r4, #0]
   23c2e:	bd10      	pop	{r4, pc}
   23c30:	6923      	ldr	r3, [r4, #16]
   23c32:	f04f 30ff 	mov.w	r0, #4294967295
   23c36:	6023      	str	r3, [r4, #0]
   23c38:	2300      	movs	r3, #0
   23c3a:	6063      	str	r3, [r4, #4]
   23c3c:	89a3      	ldrh	r3, [r4, #12]
   23c3e:	f043 0320 	orr.w	r3, r3, #32
   23c42:	81a3      	strh	r3, [r4, #12]
   23c44:	e7f3      	b.n	23c2e <__ssrefill_r+0x22>

00023c46 <__sccl>:
   23c46:	b570      	push	{r4, r5, r6, lr}
   23c48:	780b      	ldrb	r3, [r1, #0]
   23c4a:	4604      	mov	r4, r0
   23c4c:	2b5e      	cmp	r3, #94	; 0x5e
   23c4e:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   23c52:	bf13      	iteet	ne
   23c54:	1c48      	addne	r0, r1, #1
   23c56:	1c88      	addeq	r0, r1, #2
   23c58:	784b      	ldrbeq	r3, [r1, #1]
   23c5a:	2200      	movne	r2, #0
   23c5c:	bf08      	it	eq
   23c5e:	2201      	moveq	r2, #1
   23c60:	1e61      	subs	r1, r4, #1
   23c62:	f801 2f01 	strb.w	r2, [r1, #1]!
   23c66:	42a9      	cmp	r1, r5
   23c68:	d1fb      	bne.n	23c62 <__sccl+0x1c>
   23c6a:	b90b      	cbnz	r3, 23c70 <__sccl+0x2a>
   23c6c:	3801      	subs	r0, #1
   23c6e:	bd70      	pop	{r4, r5, r6, pc}
   23c70:	f082 0101 	eor.w	r1, r2, #1
   23c74:	1c42      	adds	r2, r0, #1
   23c76:	54e1      	strb	r1, [r4, r3]
   23c78:	f812 5c01 	ldrb.w	r5, [r2, #-1]
   23c7c:	1e56      	subs	r6, r2, #1
   23c7e:	4610      	mov	r0, r2
   23c80:	2d2d      	cmp	r5, #45	; 0x2d
   23c82:	d006      	beq.n	23c92 <__sccl+0x4c>
   23c84:	2d5d      	cmp	r5, #93	; 0x5d
   23c86:	d0f2      	beq.n	23c6e <__sccl+0x28>
   23c88:	b90d      	cbnz	r5, 23c8e <__sccl+0x48>
   23c8a:	4630      	mov	r0, r6
   23c8c:	e7ef      	b.n	23c6e <__sccl+0x28>
   23c8e:	462b      	mov	r3, r5
   23c90:	e7f0      	b.n	23c74 <__sccl+0x2e>
   23c92:	7816      	ldrb	r6, [r2, #0]
   23c94:	2e5d      	cmp	r6, #93	; 0x5d
   23c96:	d0fa      	beq.n	23c8e <__sccl+0x48>
   23c98:	42b3      	cmp	r3, r6
   23c9a:	dcf8      	bgt.n	23c8e <__sccl+0x48>
   23c9c:	4618      	mov	r0, r3
   23c9e:	3001      	adds	r0, #1
   23ca0:	4286      	cmp	r6, r0
   23ca2:	5421      	strb	r1, [r4, r0]
   23ca4:	dcfb      	bgt.n	23c9e <__sccl+0x58>
   23ca6:	43d8      	mvns	r0, r3
   23ca8:	1c5d      	adds	r5, r3, #1
   23caa:	3202      	adds	r2, #2
   23cac:	4430      	add	r0, r6
   23cae:	42b3      	cmp	r3, r6
   23cb0:	bfa8      	it	ge
   23cb2:	2000      	movge	r0, #0
   23cb4:	182b      	adds	r3, r5, r0
   23cb6:	e7df      	b.n	23c78 <__sccl+0x32>

00023cb8 <__submore>:
   23cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23cbc:	460c      	mov	r4, r1
   23cbe:	6b49      	ldr	r1, [r1, #52]	; 0x34
   23cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   23cc4:	4299      	cmp	r1, r3
   23cc6:	d11a      	bne.n	23cfe <__submore+0x46>
   23cc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
   23ccc:	f7f8 ff66 	bl	1cb9c <_malloc_r>
   23cd0:	b918      	cbnz	r0, 23cda <__submore+0x22>
   23cd2:	f04f 30ff 	mov.w	r0, #4294967295
   23cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
   23cde:	6360      	str	r0, [r4, #52]	; 0x34
   23ce0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   23ce4:	63a3      	str	r3, [r4, #56]	; 0x38
   23ce6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   23cea:	7083      	strb	r3, [r0, #2]
   23cec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   23cf0:	7043      	strb	r3, [r0, #1]
   23cf2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   23cf6:	7003      	strb	r3, [r0, #0]
   23cf8:	6020      	str	r0, [r4, #0]
   23cfa:	2000      	movs	r0, #0
   23cfc:	e7eb      	b.n	23cd6 <__submore+0x1e>
   23cfe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   23d00:	0077      	lsls	r7, r6, #1
   23d02:	463a      	mov	r2, r7
   23d04:	f7ff fec4 	bl	23a90 <_realloc_r>
   23d08:	4605      	mov	r5, r0
   23d0a:	2800      	cmp	r0, #0
   23d0c:	d0e1      	beq.n	23cd2 <__submore+0x1a>
   23d0e:	eb00 0806 	add.w	r8, r0, r6
   23d12:	4601      	mov	r1, r0
   23d14:	4632      	mov	r2, r6
   23d16:	4640      	mov	r0, r8
   23d18:	f7ff f92d 	bl	22f76 <memcpy>
   23d1c:	f8c4 8000 	str.w	r8, [r4]
   23d20:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   23d24:	e7e9      	b.n	23cfa <__submore+0x42>

00023d26 <__ascii_wctomb>:
   23d26:	b149      	cbz	r1, 23d3c <__ascii_wctomb+0x16>
   23d28:	2aff      	cmp	r2, #255	; 0xff
   23d2a:	bf8d      	iteet	hi
   23d2c:	238a      	movhi	r3, #138	; 0x8a
   23d2e:	2001      	movls	r0, #1
   23d30:	700a      	strbls	r2, [r1, #0]
   23d32:	6003      	strhi	r3, [r0, #0]
   23d34:	bf88      	it	hi
   23d36:	f04f 30ff 	movhi.w	r0, #4294967295
   23d3a:	4770      	bx	lr
   23d3c:	4608      	mov	r0, r1
   23d3e:	4770      	bx	lr

00023d40 <memmove>:
   23d40:	4288      	cmp	r0, r1
   23d42:	b510      	push	{r4, lr}
   23d44:	eb01 0402 	add.w	r4, r1, r2
   23d48:	d902      	bls.n	23d50 <memmove+0x10>
   23d4a:	4284      	cmp	r4, r0
   23d4c:	4623      	mov	r3, r4
   23d4e:	d807      	bhi.n	23d60 <memmove+0x20>
   23d50:	1e43      	subs	r3, r0, #1
   23d52:	42a1      	cmp	r1, r4
   23d54:	d008      	beq.n	23d68 <memmove+0x28>
   23d56:	f811 2b01 	ldrb.w	r2, [r1], #1
   23d5a:	f803 2f01 	strb.w	r2, [r3, #1]!
   23d5e:	e7f8      	b.n	23d52 <memmove+0x12>
   23d60:	4402      	add	r2, r0
   23d62:	4601      	mov	r1, r0
   23d64:	428a      	cmp	r2, r1
   23d66:	d100      	bne.n	23d6a <memmove+0x2a>
   23d68:	bd10      	pop	{r4, pc}
   23d6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   23d6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   23d72:	e7f7      	b.n	23d64 <memmove+0x24>

00023d74 <_malloc_usable_size_r>:
   23d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
   23d78:	1f18      	subs	r0, r3, #4
   23d7a:	2b00      	cmp	r3, #0
   23d7c:	bfbc      	itt	lt
   23d7e:	580b      	ldrlt	r3, [r1, r0]
   23d80:	18c0      	addlt	r0, r0, r3
   23d82:	4770      	bx	lr

00023d84 <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   23d84:	f7f2 bcb4 	b.w	166f0 <SystemInit>
