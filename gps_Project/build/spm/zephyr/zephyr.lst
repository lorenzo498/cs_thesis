
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200024e0 	.word	0x200024e0
}
   4:	000023b5 	.word	0x000023b5
   8:	000084ad 	.word	0x000084ad
   c:	00002415 	.word	0x00002415
  10:	00002415 	.word	0x00002415
  14:	00002415 	.word	0x00002415
  18:	00002415 	.word	0x00002415
  1c:	00002415 	.word	0x00002415
	...
  2c:	00002195 	.word	0x00002195
  30:	00002415 	.word	0x00002415
  34:	00000000 	.word	0x00000000
  38:	0000213d 	.word	0x0000213d
  3c:	000018a5 	.word	0x000018a5

00000040 <_irq_vector_table>:
  40:	00002375 00002375 00002375 00002375     u#..u#..u#..u#..
  50:	00002375 00002375 00002375 00002375     u#..u#..u#..u#..
  60:	00002375 00002375 00002375 00002375     u#..u#..u#..u#..
  70:	00002375 00002375 00002375 00002375     u#..u#..u#..u#..
  80:	00002375 00002375 00002375 00002375     u#..u#..u#..u#..
  90:	00002375 00002375 00002375 00002375     u#..u#..u#..u#..
  a0:	00002375 00002375 00002375 00002375     u#..u#..u#..u#..
  b0:	00002375 00002375 00002375 00002375     u#..u#..u#..u#..
  c0:	00002375 00002375 00002375 00002375     u#..u#..u#..u#..
  d0:	00002375 00002375 00002375 00002375     u#..u#..u#..u#..
  e0:	00002375 00002375 00002375 00002375     u#..u#..u#..u#..
  f0:	00002375 00002375 00002375 00002375     u#..u#..u#..u#..
 100:	00002375 00002375 00002375 00002375     u#..u#..u#..u#..
 110:	00002375 00002375 00002375 00002375     u#..u#..u#..u#..
 120:	00002375 00002375 00002375 00002375     u#..u#..u#..u#..
 130:	00002375 00002375 00002375 00002375     u#..u#..u#..u#..
 140:	00002375                                u#..

00000144 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
 210:	00010000 00000001 00000000 00000000     ................
 220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000023c <__aeabi_uldivmod>:
     23c:	b953      	cbnz	r3, 254 <__aeabi_uldivmod+0x18>
     23e:	b94a      	cbnz	r2, 254 <__aeabi_uldivmod+0x18>
     240:	2900      	cmp	r1, #0
     242:	bf08      	it	eq
     244:	2800      	cmpeq	r0, #0
     246:	bf1c      	itt	ne
     248:	f04f 31ff 	movne.w	r1, #4294967295
     24c:	f04f 30ff 	movne.w	r0, #4294967295
     250:	f000 b970 	b.w	534 <__aeabi_idiv0>
     254:	f1ad 0c08 	sub.w	ip, sp, #8
     258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     25c:	f000 f806 	bl	26c <__udivmoddi4>
     260:	f8dd e004 	ldr.w	lr, [sp, #4]
     264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     268:	b004      	add	sp, #16
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	9e08      	ldr	r6, [sp, #32]
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	468a      	mov	sl, r1
     278:	2b00      	cmp	r3, #0
     27a:	d17f      	bne.n	37c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xfc>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d941      	bls.n	306 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x86>
     282:	fab2 f282 	clz	r2, r2
     286:	b14a      	cbz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     288:	f1c2 0120 	rsb	r1, r2, #32
     28c:	fa05 f302 	lsl.w	r3, r5, r2
     290:	4097      	lsls	r7, r2
     292:	4094      	lsls	r4, r2
     294:	fa20 f101 	lsr.w	r1, r0, r1
     298:	ea41 0a03 	orr.w	sl, r1, r3
     29c:	ea4f 4817 	mov.w	r8, r7, lsr #16
     2a0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     2a4:	fa1f f987 	uxth.w	r9, r7
     2a8:	fbba fef8 	udiv	lr, sl, r8
     2ac:	fb08 a31e 	mls	r3, r8, lr, sl
     2b0:	fb0e f109 	mul.w	r1, lr, r9
     2b4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     2b8:	4299      	cmp	r1, r3
     2ba:	d906      	bls.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     2bc:	18fb      	adds	r3, r7, r3
     2be:	d202      	bcs.n	2c6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x46>
     2c0:	4299      	cmp	r1, r3
     2c2:	f200 8124 	bhi.w	50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
     2c6:	f10e 3eff 	add.w	lr, lr, #4294967295
     2ca:	1a59      	subs	r1, r3, r1
     2cc:	b2a3      	uxth	r3, r4
     2ce:	fbb1 f0f8 	udiv	r0, r1, r8
     2d2:	fb08 1110 	mls	r1, r8, r0, r1
     2d6:	fb00 f909 	mul.w	r9, r0, r9
     2da:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     2de:	45a1      	cmp	r9, r4
     2e0:	d905      	bls.n	2ee <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6e>
     2e2:	193c      	adds	r4, r7, r4
     2e4:	d202      	bcs.n	2ec <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6c>
     2e6:	45a1      	cmp	r9, r4
     2e8:	f200 810e 	bhi.w	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
     2ec:	3801      	subs	r0, #1
     2ee:	eba4 0409 	sub.w	r4, r4, r9
     2f2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     2f6:	2100      	movs	r1, #0
     2f8:	b11e      	cbz	r6, 302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     2fa:	40d4      	lsrs	r4, r2
     2fc:	2300      	movs	r3, #0
     2fe:	e9c6 4300 	strd	r4, r3, [r6]
     302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     306:	b902      	cbnz	r2, 30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     308:	deff      	udf	#255	; 0xff
     30a:	fab2 f282 	clz	r2, r2
     30e:	2a00      	cmp	r2, #0
     310:	d14f      	bne.n	3b2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x132>
     312:	1bcb      	subs	r3, r1, r7
     314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     318:	fa1f f887 	uxth.w	r8, r7
     31c:	2101      	movs	r1, #1
     31e:	0c25      	lsrs	r5, r4, #16
     320:	fbb3 fcfe 	udiv	ip, r3, lr
     324:	fb0e 301c 	mls	r0, lr, ip, r3
     328:	462b      	mov	r3, r5
     32a:	fb08 f90c 	mul.w	r9, r8, ip
     32e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     332:	45a9      	cmp	r9, r5
     334:	d90a      	bls.n	34c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xcc>
     336:	197d      	adds	r5, r7, r5
     338:	bf2c      	ite	cs
     33a:	2301      	movcs	r3, #1
     33c:	2300      	movcc	r3, #0
     33e:	45a9      	cmp	r9, r5
     340:	d902      	bls.n	348 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc8>
     342:	2b00      	cmp	r3, #0
     344:	f000 80d9 	beq.w	4fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12>
     348:	f10c 3cff 	add.w	ip, ip, #4294967295
     34c:	eba5 0509 	sub.w	r5, r5, r9
     350:	b2a3      	uxth	r3, r4
     352:	fbb5 f0fe 	udiv	r0, r5, lr
     356:	fb0e 5510 	mls	r5, lr, r0, r5
     35a:	fb08 f800 	mul.w	r8, r8, r0
     35e:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     362:	45a0      	cmp	r8, r4
     364:	d905      	bls.n	372 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf2>
     366:	193c      	adds	r4, r7, r4
     368:	d202      	bcs.n	370 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf0>
     36a:	45a0      	cmp	r8, r4
     36c:	f200 80c9 	bhi.w	502 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a>
     370:	3801      	subs	r0, #1
     372:	eba4 0408 	sub.w	r4, r4, r8
     376:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     37a:	e7bd      	b.n	2f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x78>
     37c:	428b      	cmp	r3, r1
     37e:	d908      	bls.n	392 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x112>
     380:	2e00      	cmp	r6, #0
     382:	f000 80b1 	beq.w	4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
     386:	2100      	movs	r1, #0
     388:	e9c6 0500 	strd	r0, r5, [r6]
     38c:	4608      	mov	r0, r1
     38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     392:	fab3 f183 	clz	r1, r3
     396:	2900      	cmp	r1, #0
     398:	d146      	bne.n	428 <CONFIG_FLASH_SIZE+0x28>
     39a:	42ab      	cmp	r3, r5
     39c:	f0c0 80a7 	bcc.w	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     3a0:	4282      	cmp	r2, r0
     3a2:	f240 80a4 	bls.w	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     3a6:	4608      	mov	r0, r1
     3a8:	2e00      	cmp	r6, #0
     3aa:	d0aa      	beq.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     3ac:	e9c6 4a00 	strd	r4, sl, [r6]
     3b0:	e7a7      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     3b2:	f1c2 0020 	rsb	r0, r2, #32
     3b6:	4097      	lsls	r7, r2
     3b8:	fa01 f302 	lsl.w	r3, r1, r2
     3bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     3c0:	40c1      	lsrs	r1, r0
     3c2:	fa24 f500 	lsr.w	r5, r4, r0
     3c6:	fa1f f887 	uxth.w	r8, r7
     3ca:	4094      	lsls	r4, r2
     3cc:	431d      	orrs	r5, r3
     3ce:	fbb1 f0fe 	udiv	r0, r1, lr
     3d2:	0c2b      	lsrs	r3, r5, #16
     3d4:	fb0e 1110 	mls	r1, lr, r0, r1
     3d8:	fb00 fc08 	mul.w	ip, r0, r8
     3dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     3e0:	459c      	cmp	ip, r3
     3e2:	d909      	bls.n	3f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x178>
     3e4:	18fb      	adds	r3, r7, r3
     3e6:	bf2c      	ite	cs
     3e8:	2101      	movcs	r1, #1
     3ea:	2100      	movcc	r1, #0
     3ec:	459c      	cmp	ip, r3
     3ee:	d902      	bls.n	3f6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x176>
     3f0:	2900      	cmp	r1, #0
     3f2:	f000 8095 	beq.w	520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>
     3f6:	3801      	subs	r0, #1
     3f8:	eba3 030c 	sub.w	r3, r3, ip
     3fc:	b2ad      	uxth	r5, r5
     3fe:	fbb3 f1fe 	udiv	r1, r3, lr
     402:	fb0e 3311 	mls	r3, lr, r1, r3
     406:	fb01 fc08 	mul.w	ip, r1, r8
     40a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     40e:	45ac      	cmp	ip, r5
     410:	d905      	bls.n	41e <CONFIG_FLASH_SIZE+0x1e>
     412:	197d      	adds	r5, r7, r5
     414:	d202      	bcs.n	41c <CONFIG_FLASH_SIZE+0x1c>
     416:	45ac      	cmp	ip, r5
     418:	f200 8089 	bhi.w	52e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x46>
     41c:	3901      	subs	r1, #1
     41e:	eba5 030c 	sub.w	r3, r5, ip
     422:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     426:	e77a      	b.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     428:	f1c1 0420 	rsb	r4, r1, #32
     42c:	408b      	lsls	r3, r1
     42e:	fa02 f701 	lsl.w	r7, r2, r1
     432:	fa05 fc01 	lsl.w	ip, r5, r1
     436:	40e2      	lsrs	r2, r4
     438:	fa20 f804 	lsr.w	r8, r0, r4
     43c:	40e5      	lsrs	r5, r4
     43e:	fa00 fe01 	lsl.w	lr, r0, r1
     442:	4313      	orrs	r3, r2
     444:	ea48 020c 	orr.w	r2, r8, ip
     448:	ea4f 4813 	mov.w	r8, r3, lsr #16
     44c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     450:	fa1f f983 	uxth.w	r9, r3
     454:	fbb5 faf8 	udiv	sl, r5, r8
     458:	fb08 551a 	mls	r5, r8, sl, r5
     45c:	fb0a f009 	mul.w	r0, sl, r9
     460:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     464:	4560      	cmp	r0, ip
     466:	d90a      	bls.n	47e <CONFIG_FLASH_SIZE+0x7e>
     468:	eb13 0c0c 	adds.w	ip, r3, ip
     46c:	bf2c      	ite	cs
     46e:	2501      	movcs	r5, #1
     470:	2500      	movcc	r5, #0
     472:	4560      	cmp	r0, ip
     474:	d901      	bls.n	47a <CONFIG_FLASH_SIZE+0x7a>
     476:	2d00      	cmp	r5, #0
     478:	d055      	beq.n	526 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3e>
     47a:	f10a 3aff 	add.w	sl, sl, #4294967295
     47e:	ebac 0c00 	sub.w	ip, ip, r0
     482:	b292      	uxth	r2, r2
     484:	fbbc f0f8 	udiv	r0, ip, r8
     488:	fb08 cc10 	mls	ip, r8, r0, ip
     48c:	fb00 f909 	mul.w	r9, r0, r9
     490:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     494:	45e1      	cmp	r9, ip
     496:	d905      	bls.n	4a4 <CONFIG_FLASH_SIZE+0xa4>
     498:	eb13 0c0c 	adds.w	ip, r3, ip
     49c:	d201      	bcs.n	4a2 <CONFIG_FLASH_SIZE+0xa2>
     49e:	45e1      	cmp	r9, ip
     4a0:	d83b      	bhi.n	51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
     4a2:	3801      	subs	r0, #1
     4a4:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     4a8:	ebac 0c09 	sub.w	ip, ip, r9
     4ac:	fba0 8907 	umull	r8, r9, r0, r7
     4b0:	45cc      	cmp	ip, r9
     4b2:	4645      	mov	r5, r8
     4b4:	464a      	mov	r2, r9
     4b6:	d302      	bcc.n	4be <CONFIG_FLASH_SIZE+0xbe>
     4b8:	d106      	bne.n	4c8 <CONFIG_FLASH_SIZE+0xc8>
     4ba:	45c6      	cmp	lr, r8
     4bc:	d204      	bcs.n	4c8 <CONFIG_FLASH_SIZE+0xc8>
     4be:	3801      	subs	r0, #1
     4c0:	ebb8 0507 	subs.w	r5, r8, r7
     4c4:	eb69 0203 	sbc.w	r2, r9, r3
     4c8:	b32e      	cbz	r6, 516 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e>
     4ca:	ebbe 0305 	subs.w	r3, lr, r5
     4ce:	eb6c 0c02 	sbc.w	ip, ip, r2
     4d2:	fa23 f201 	lsr.w	r2, r3, r1
     4d6:	fa0c f404 	lsl.w	r4, ip, r4
     4da:	fa2c f301 	lsr.w	r3, ip, r1
     4de:	2100      	movs	r1, #0
     4e0:	4314      	orrs	r4, r2
     4e2:	e9c6 4300 	strd	r4, r3, [r6]
     4e6:	e70c      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     4e8:	4631      	mov	r1, r6
     4ea:	4630      	mov	r0, r6
     4ec:	e709      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     4ee:	1a84      	subs	r4, r0, r2
     4f0:	eb65 0303 	sbc.w	r3, r5, r3
     4f4:	2001      	movs	r0, #1
     4f6:	469a      	mov	sl, r3
     4f8:	e756      	b.n	3a8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x128>
     4fa:	f1ac 0c02 	sub.w	ip, ip, #2
     4fe:	443d      	add	r5, r7
     500:	e724      	b.n	34c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xcc>
     502:	3802      	subs	r0, #2
     504:	443c      	add	r4, r7
     506:	e734      	b.n	372 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf2>
     508:	3802      	subs	r0, #2
     50a:	443c      	add	r4, r7
     50c:	e6ef      	b.n	2ee <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6e>
     50e:	f1ae 0e02 	sub.w	lr, lr, #2
     512:	443b      	add	r3, r7
     514:	e6d9      	b.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     516:	4631      	mov	r1, r6
     518:	e6f3      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     51a:	3802      	subs	r0, #2
     51c:	449c      	add	ip, r3
     51e:	e7c1      	b.n	4a4 <CONFIG_FLASH_SIZE+0xa4>
     520:	3802      	subs	r0, #2
     522:	443b      	add	r3, r7
     524:	e768      	b.n	3f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x178>
     526:	f1aa 0a02 	sub.w	sl, sl, #2
     52a:	449c      	add	ip, r3
     52c:	e7a7      	b.n	47e <CONFIG_FLASH_SIZE+0x7e>
     52e:	3902      	subs	r1, #2
     530:	443d      	add	r5, r7
     532:	e774      	b.n	41e <CONFIG_FLASH_SIZE+0x1e>

00000534 <__aeabi_idiv0>:
     534:	4770      	bx	lr
     536:	bf00      	nop

00000538 <__gnu_cmse_nonsecure_call>:
     538:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     53c:	4627      	mov	r7, r4
     53e:	46a0      	mov	r8, r4
     540:	46a1      	mov	r9, r4
     542:	46a2      	mov	sl, r4
     544:	46a3      	mov	fp, r4
     546:	46a4      	mov	ip, r4
     548:	b0a2      	sub	sp, #136	; 0x88
     54a:	ec2d 0a00 	vlstm	sp
     54e:	f384 8800 	msr	CPSR_f, r4
     552:	4625      	mov	r5, r4
     554:	4626      	mov	r6, r4
     556:	47a4      	blxns	r4
     558:	ec3d 0a00 	vlldm	sp
     55c:	b022      	add	sp, #136	; 0x88
     55e:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
	...

00000564 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     564:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     566:	6844      	ldr	r4, [r0, #4]
     568:	4605      	mov	r5, r0

	return method & SYS_NOTIFY_METHOD_MASK;
     56a:	f004 0403 	and.w	r4, r4, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
     56e:	2c03      	cmp	r4, #3
	notify->result = res;
     570:	6081      	str	r1, [r0, #8]
	switch (method) {
     572:	d002      	beq.n	57a <sys_notify_finalize+0x16>
     574:	b12c      	cbz	r4, 582 <sys_notify_finalize+0x1e>
     576:	2000      	movs	r0, #0
     578:	e000      	b.n	57c <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     57a:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     57c:	2300      	movs	r3, #0
     57e:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     580:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
     582:	2245      	movs	r2, #69	; 0x45
     584:	4904      	ldr	r1, [pc, #16]	; (598 <sys_notify_finalize+0x34>)
     586:	4805      	ldr	r0, [pc, #20]	; (59c <sys_notify_finalize+0x38>)
     588:	f007 fe02 	bl	8190 <printk>
     58c:	2145      	movs	r1, #69	; 0x45
     58e:	4802      	ldr	r0, [pc, #8]	; (598 <sys_notify_finalize+0x34>)
     590:	f007 feca 	bl	8328 <assert_post_action>
     594:	e7ef      	b.n	576 <sys_notify_finalize+0x12>
     596:	bf00      	nop
     598:	00008f83 	.word	0x00008f83
     59c:	00008fa6 	.word	0x00008fa6

000005a0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     5a0:	680b      	ldr	r3, [r1, #0]
     5a2:	3301      	adds	r3, #1
     5a4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     5a6:	4b01      	ldr	r3, [pc, #4]	; (5ac <char_out+0xc>)
     5a8:	681b      	ldr	r3, [r3, #0]
     5aa:	4718      	bx	r3
     5ac:	20000000 	.word	0x20000000

000005b0 <__printk_hook_install>:
	_char_out = fn;
     5b0:	4b01      	ldr	r3, [pc, #4]	; (5b8 <__printk_hook_install+0x8>)
     5b2:	6018      	str	r0, [r3, #0]
}
     5b4:	4770      	bx	lr
     5b6:	bf00      	nop
     5b8:	20000000 	.word	0x20000000

000005bc <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     5bc:	b507      	push	{r0, r1, r2, lr}
     5be:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     5c0:	2100      	movs	r1, #0
{
     5c2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     5c4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     5c6:	4803      	ldr	r0, [pc, #12]	; (5d4 <vprintk+0x18>)
     5c8:	a901      	add	r1, sp, #4
     5ca:	f000 fa6d 	bl	aa8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     5ce:	b003      	add	sp, #12
     5d0:	f85d fb04 	ldr.w	pc, [sp], #4
     5d4:	000005a1 	.word	0x000005a1

000005d8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     5d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5dc:	f8b0 a01c 	ldrh.w	sl, [r0, #28]
{
     5e0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     5e2:	f01a 0f08 	tst.w	sl, #8
{
     5e6:	4693      	mov	fp, r2
	if (processing) {
     5e8:	d01c      	beq.n	624 <process_event+0x4c>
		if (evt == EVT_COMPLETE) {
     5ea:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     5ec:	bf0c      	ite	eq
     5ee:	f04a 0a10 	orreq.w	sl, sl, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     5f2:	f04a 0a20 	orrne.w	sl, sl, #32
     5f6:	f8a0 a01c 	strh.w	sl, [r0, #28]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     5fa:	f104 0014 	add.w	r0, r4, #20
     5fe:	f003 fb97 	bl	3d30 <z_spin_unlock_valid>
     602:	b940      	cbnz	r0, 616 <process_event+0x3e>
     604:	49ba      	ldr	r1, [pc, #744]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     606:	48bb      	ldr	r0, [pc, #748]	; (8f4 <CONFIG_ISR_STACK_SIZE+0xf4>)
     608:	22ac      	movs	r2, #172	; 0xac
     60a:	f007 fdc1 	bl	8190 <printk>
     60e:	21ac      	movs	r1, #172	; 0xac
     610:	48b7      	ldr	r0, [pc, #732]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     612:	f007 fe89 	bl	8328 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     616:	f38b 8811 	msr	BASEPRI, fp
     61a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     61e:	b003      	add	sp, #12
     620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
     624:	4fb4      	ldr	r7, [pc, #720]	; (8f8 <CONFIG_ISR_STACK_SIZE+0xf8>)
     626:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     62a:	f00a 0a07 	and.w	sl, sl, #7
		if (evt == EVT_RECHECK) {
     62e:	2902      	cmp	r1, #2
     630:	d106      	bne.n	640 <process_event+0x68>
			evt = process_recheck(mgr);
     632:	4620      	mov	r0, r4
     634:	f007 fdb9 	bl	81aa <process_recheck>
		if (evt == EVT_NOP) {
     638:	2800      	cmp	r0, #0
     63a:	d0de      	beq.n	5fa <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     63c:	2801      	cmp	r0, #1
     63e:	d165      	bne.n	70c <process_event+0x134>
			res = mgr->last_res;
     640:	f8d4 9018 	ldr.w	r9, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     644:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
     646:	f1b9 0f00 	cmp.w	r9, #0
     64a:	da19      	bge.n	680 <process_event+0xa8>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     64c:	2600      	movs	r6, #0
		*clients = mgr->clients;
     64e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     650:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
     654:	e9c4 6600 	strd	r6, r6, [r4]
     658:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     65c:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     65e:	8ba3      	ldrh	r3, [r4, #28]
     660:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     664:	4552      	cmp	r2, sl
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     666:	9200      	str	r2, [sp, #0]
				   && !sys_slist_is_empty(&mgr->monitors);
     668:	d003      	beq.n	672 <process_event+0x9a>
		if (do_monitors
     66a:	68a2      	ldr	r2, [r4, #8]
     66c:	2a00      	cmp	r2, #0
     66e:	f040 80f1 	bne.w	854 <CONFIG_ISR_STACK_SIZE+0x54>
		    || !sys_slist_is_empty(&clients)
     672:	b915      	cbnz	r5, 67a <process_event+0xa2>
		    || (transit != NULL)) {
     674:	2e00      	cmp	r6, #0
     676:	f000 812b 	beq.w	8d0 <CONFIG_ISR_STACK_SIZE+0xd0>
     67a:	f04f 0a00 	mov.w	sl, #0
     67e:	e0eb      	b.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     680:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     684:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     686:	2901      	cmp	r1, #1
     688:	d822      	bhi.n	6d0 <process_event+0xf8>
	list->head = NULL;
     68a:	2100      	movs	r1, #0
     68c:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
     690:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
     692:	6825      	ldr	r5, [r4, #0]
     694:	b29b      	uxth	r3, r3
	list->tail = NULL;
     696:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     69a:	d10c      	bne.n	6b6 <process_event+0xde>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     69c:	428d      	cmp	r5, r1
     69e:	462a      	mov	r2, r5
     6a0:	bf38      	it	cc
     6a2:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     6a4:	b12a      	cbz	r2, 6b2 <process_event+0xda>
				mgr->refs += 1U;
     6a6:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     6a8:	6812      	ldr	r2, [r2, #0]
     6aa:	3101      	adds	r1, #1
     6ac:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     6ae:	2a00      	cmp	r2, #0
     6b0:	d1f8      	bne.n	6a4 <process_event+0xcc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6b2:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
     6b6:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     6b8:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     6ba:	f007 fd76 	bl	81aa <process_recheck>
     6be:	4606      	mov	r6, r0
     6c0:	2800      	cmp	r0, #0
     6c2:	d0cc      	beq.n	65e <process_event+0x86>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     6c4:	8ba3      	ldrh	r3, [r4, #28]
     6c6:	f043 0320 	orr.w	r3, r3, #32
     6ca:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
     6cc:	2600      	movs	r6, #0
     6ce:	e7c6      	b.n	65e <process_event+0x86>
	} else if (state == ONOFF_STATE_TO_OFF) {
     6d0:	2a04      	cmp	r2, #4
     6d2:	d10d      	bne.n	6f0 <process_event+0x118>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6d4:	f023 0307 	bic.w	r3, r3, #7
     6d8:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
     6da:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     6dc:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     6de:	f007 fd64 	bl	81aa <process_recheck>
     6e2:	4605      	mov	r5, r0
     6e4:	b180      	cbz	r0, 708 <process_event+0x130>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     6e6:	f042 0220 	orr.w	r2, r2, #32
     6ea:	2500      	movs	r5, #0
     6ec:	83a2      	strh	r2, [r4, #28]
     6ee:	e7ed      	b.n	6cc <process_event+0xf4>
		__ASSERT_NO_MSG(false);
     6f0:	f240 121b 	movw	r2, #283	; 0x11b
     6f4:	4639      	mov	r1, r7
     6f6:	4640      	mov	r0, r8
     6f8:	f007 fd4a 	bl	8190 <printk>
     6fc:	f240 111b 	movw	r1, #283	; 0x11b
     700:	4638      	mov	r0, r7
     702:	f007 fe11 	bl	8328 <assert_post_action>
     706:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     708:	462e      	mov	r6, r5
     70a:	e7a8      	b.n	65e <process_event+0x86>
		} else if (evt == EVT_START) {
     70c:	2803      	cmp	r0, #3
     70e:	d131      	bne.n	774 <process_event+0x19c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     710:	f1ba 0f00 	cmp.w	sl, #0
     714:	d00a      	beq.n	72c <process_event+0x154>
     716:	4639      	mov	r1, r7
     718:	4640      	mov	r0, r8
     71a:	f44f 72ab 	mov.w	r2, #342	; 0x156
     71e:	f007 fd37 	bl	8190 <printk>
     722:	f44f 71ab 	mov.w	r1, #342	; 0x156
     726:	4638      	mov	r0, r7
     728:	f007 fdfe 	bl	8328 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     72c:	6823      	ldr	r3, [r4, #0]
     72e:	b953      	cbnz	r3, 746 <process_event+0x16e>
     730:	4639      	mov	r1, r7
     732:	4640      	mov	r0, r8
     734:	f240 1257 	movw	r2, #343	; 0x157
     738:	f007 fd2a 	bl	8190 <printk>
     73c:	f240 1157 	movw	r1, #343	; 0x157
     740:	4638      	mov	r0, r7
     742:	f007 fdf1 	bl	8328 <assert_post_action>
			transit = mgr->transitions->start;
     746:	6923      	ldr	r3, [r4, #16]
     748:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
     74a:	b956      	cbnz	r6, 762 <process_event+0x18a>
     74c:	4639      	mov	r1, r7
     74e:	4640      	mov	r0, r8
     750:	f44f 72ad 	mov.w	r2, #346	; 0x15a
     754:	f007 fd1c 	bl	8190 <printk>
     758:	f44f 71ad 	mov.w	r1, #346	; 0x15a
     75c:	4638      	mov	r0, r7
     75e:	f007 fde3 	bl	8328 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     762:	8ba3      	ldrh	r3, [r4, #28]
     764:	f023 0307 	bic.w	r3, r3, #7
     768:	f043 0306 	orr.w	r3, r3, #6
}
     76c:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
     76e:	83a3      	strh	r3, [r4, #28]
		res = 0;
     770:	46a9      	mov	r9, r5
}
     772:	e774      	b.n	65e <process_event+0x86>
		} else if (evt == EVT_STOP) {
     774:	2804      	cmp	r0, #4
     776:	d12e      	bne.n	7d6 <process_event+0x1fe>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     778:	f1ba 0f02 	cmp.w	sl, #2
     77c:	d00a      	beq.n	794 <process_event+0x1bc>
     77e:	4639      	mov	r1, r7
     780:	4640      	mov	r0, r8
     782:	f240 125d 	movw	r2, #349	; 0x15d
     786:	f007 fd03 	bl	8190 <printk>
     78a:	f240 115d 	movw	r1, #349	; 0x15d
     78e:	4638      	mov	r0, r7
     790:	f007 fdca 	bl	8328 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
     794:	8be3      	ldrh	r3, [r4, #30]
     796:	b153      	cbz	r3, 7ae <process_event+0x1d6>
     798:	4639      	mov	r1, r7
     79a:	4640      	mov	r0, r8
     79c:	f44f 72af 	mov.w	r2, #350	; 0x15e
     7a0:	f007 fcf6 	bl	8190 <printk>
     7a4:	f44f 71af 	mov.w	r1, #350	; 0x15e
     7a8:	4638      	mov	r0, r7
     7aa:	f007 fdbd 	bl	8328 <assert_post_action>
			transit = mgr->transitions->stop;
     7ae:	6923      	ldr	r3, [r4, #16]
     7b0:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
     7b2:	b956      	cbnz	r6, 7ca <process_event+0x1f2>
     7b4:	4639      	mov	r1, r7
     7b6:	4640      	mov	r0, r8
     7b8:	f240 1261 	movw	r2, #353	; 0x161
     7bc:	f007 fce8 	bl	8190 <printk>
     7c0:	f240 1161 	movw	r1, #353	; 0x161
     7c4:	4638      	mov	r0, r7
     7c6:	f007 fdaf 	bl	8328 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     7ca:	8ba3      	ldrh	r3, [r4, #28]
     7cc:	f023 0307 	bic.w	r3, r3, #7
     7d0:	f043 0304 	orr.w	r3, r3, #4
     7d4:	e7ca      	b.n	76c <process_event+0x194>
		} else if (evt == EVT_RESET) {
     7d6:	2805      	cmp	r0, #5
     7d8:	d12e      	bne.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     7da:	f1ba 0f01 	cmp.w	sl, #1
     7de:	d00a      	beq.n	7f6 <process_event+0x21e>
     7e0:	4639      	mov	r1, r7
     7e2:	4640      	mov	r0, r8
     7e4:	f44f 72b2 	mov.w	r2, #356	; 0x164
     7e8:	f007 fcd2 	bl	8190 <printk>
     7ec:	f44f 71b2 	mov.w	r1, #356	; 0x164
     7f0:	4638      	mov	r0, r7
     7f2:	f007 fd99 	bl	8328 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     7f6:	6823      	ldr	r3, [r4, #0]
     7f8:	b953      	cbnz	r3, 810 <CONFIG_ISR_STACK_SIZE+0x10>
     7fa:	4639      	mov	r1, r7
     7fc:	4640      	mov	r0, r8
     7fe:	f240 1265 	movw	r2, #357	; 0x165
     802:	f007 fcc5 	bl	8190 <printk>
     806:	f240 1165 	movw	r1, #357	; 0x165
     80a:	4638      	mov	r0, r7
     80c:	f007 fd8c 	bl	8328 <assert_post_action>
			transit = mgr->transitions->reset;
     810:	6923      	ldr	r3, [r4, #16]
     812:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
     814:	b956      	cbnz	r6, 82c <CONFIG_ISR_STACK_SIZE+0x2c>
     816:	4639      	mov	r1, r7
     818:	4640      	mov	r0, r8
     81a:	f44f 72b4 	mov.w	r2, #360	; 0x168
     81e:	f007 fcb7 	bl	8190 <printk>
     822:	f44f 71b4 	mov.w	r1, #360	; 0x168
     826:	4638      	mov	r0, r7
     828:	f007 fd7e 	bl	8328 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     82c:	8ba3      	ldrh	r3, [r4, #28]
     82e:	f023 0307 	bic.w	r3, r3, #7
     832:	f043 0305 	orr.w	r3, r3, #5
     836:	e799      	b.n	76c <process_event+0x194>
			__ASSERT_NO_MSG(false);
     838:	2500      	movs	r5, #0
     83a:	f240 126b 	movw	r2, #363	; 0x16b
     83e:	4639      	mov	r1, r7
     840:	4640      	mov	r0, r8
     842:	f007 fca5 	bl	8190 <printk>
     846:	f240 116b 	movw	r1, #363	; 0x16b
     84a:	4638      	mov	r0, r7
     84c:	f007 fd6c 	bl	8328 <assert_post_action>
		onoff_transition_fn transit = NULL;
     850:	462e      	mov	r6, r5
     852:	e78d      	b.n	770 <process_event+0x198>
				   && !sys_slist_is_empty(&mgr->monitors);
     854:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     858:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     85c:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
     85e:	f104 0314 	add.w	r3, r4, #20
     862:	4618      	mov	r0, r3
     864:	9301      	str	r3, [sp, #4]
     866:	f003 fa63 	bl	3d30 <z_spin_unlock_valid>
     86a:	b940      	cbnz	r0, 87e <CONFIG_ISR_STACK_SIZE+0x7e>
     86c:	4640      	mov	r0, r8
     86e:	4920      	ldr	r1, [pc, #128]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     870:	22ac      	movs	r2, #172	; 0xac
     872:	f007 fc8d 	bl	8190 <printk>
     876:	21ac      	movs	r1, #172	; 0xac
     878:	481d      	ldr	r0, [pc, #116]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     87a:	f007 fd55 	bl	8328 <assert_post_action>
     87e:	f38b 8811 	msr	BASEPRI, fp
     882:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     886:	f1ba 0f00 	cmp.w	sl, #0
     88a:	d139      	bne.n	900 <CONFIG_ISR_STACK_SIZE+0x100>
	while (!sys_slist_is_empty(list)) {
     88c:	2d00      	cmp	r5, #0
     88e:	d14c      	bne.n	92a <CONFIG_ISR_STACK_SIZE+0x12a>
			if (transit != NULL) {
     890:	b116      	cbz	r6, 898 <CONFIG_ISR_STACK_SIZE+0x98>
				transit(mgr, transition_complete);
     892:	4620      	mov	r0, r4
     894:	4919      	ldr	r1, [pc, #100]	; (8fc <CONFIG_ISR_STACK_SIZE+0xfc>)
     896:	47b0      	blx	r6
	__asm__ volatile(
     898:	f04f 0320 	mov.w	r3, #32
     89c:	f3ef 8b11 	mrs	fp, BASEPRI
     8a0:	f383 8811 	msr	BASEPRI, r3
     8a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     8a8:	9801      	ldr	r0, [sp, #4]
     8aa:	f003 fa33 	bl	3d14 <z_spin_lock_valid>
     8ae:	b940      	cbnz	r0, 8c2 <CONFIG_ISR_STACK_SIZE+0xc2>
     8b0:	4640      	mov	r0, r8
     8b2:	490f      	ldr	r1, [pc, #60]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     8b4:	2281      	movs	r2, #129	; 0x81
     8b6:	f007 fc6b 	bl	8190 <printk>
     8ba:	2181      	movs	r1, #129	; 0x81
     8bc:	480c      	ldr	r0, [pc, #48]	; (8f0 <CONFIG_ISR_STACK_SIZE+0xf0>)
     8be:	f007 fd33 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
     8c2:	9801      	ldr	r0, [sp, #4]
     8c4:	f003 fa42 	bl	3d4c <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     8c8:	8ba3      	ldrh	r3, [r4, #28]
     8ca:	f023 0308 	bic.w	r3, r3, #8
     8ce:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     8d0:	8ba3      	ldrh	r3, [r4, #28]
     8d2:	06da      	lsls	r2, r3, #27
     8d4:	d531      	bpl.n	93a <CONFIG_ISR_STACK_SIZE+0x13a>
			evt = EVT_COMPLETE;
     8d6:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     8d8:	f023 0310 	bic.w	r3, r3, #16
     8dc:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
     8de:	f8b4 a01c 	ldrh.w	sl, [r4, #28]
     8e2:	f00a 0a07 	and.w	sl, sl, #7
	} while (evt != EVT_NOP);
     8e6:	2900      	cmp	r1, #0
     8e8:	f47f aea1 	bne.w	62e <process_event+0x56>
out:
     8ec:	e685      	b.n	5fa <process_event+0x22>
     8ee:	bf00      	nop
     8f0:	00008fe0 	.word	0x00008fe0
     8f4:	00008fa6 	.word	0x00008fa6
     8f8:	00008fbe 	.word	0x00008fbe
     8fc:	0000094d 	.word	0x0000094d
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     900:	68a1      	ldr	r1, [r4, #8]
     902:	2900      	cmp	r1, #0
     904:	d0c2      	beq.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
	return node->next;
     906:	680b      	ldr	r3, [r1, #0]
     908:	2b00      	cmp	r3, #0
     90a:	bf38      	it	cc
     90c:	2300      	movcc	r3, #0
     90e:	469a      	mov	sl, r3
		mon->callback(mgr, mon, state, res);
     910:	4620      	mov	r0, r4
     912:	464b      	mov	r3, r9
     914:	f8d1 b004 	ldr.w	fp, [r1, #4]
     918:	9a00      	ldr	r2, [sp, #0]
     91a:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     91c:	f1ba 0f00 	cmp.w	sl, #0
     920:	d0b4      	beq.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     922:	4651      	mov	r1, sl
     924:	f8da 3000 	ldr.w	r3, [sl]
     928:	e7ee      	b.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     92a:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     92c:	464b      	mov	r3, r9
     92e:	4620      	mov	r0, r4
     930:	9a00      	ldr	r2, [sp, #0]
     932:	682d      	ldr	r5, [r5, #0]
     934:	f007 fc55 	bl	81e2 <notify_one>
     938:	e7a8      	b.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     93a:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     93e:	bf1e      	ittt	ne
     940:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
     944:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     946:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
     948:	e7c9      	b.n	8de <CONFIG_ISR_STACK_SIZE+0xde>
     94a:	bf00      	nop

0000094c <transition_complete>:
{
     94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     94e:	4604      	mov	r4, r0
     950:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     952:	f100 0614 	add.w	r6, r0, #20
     956:	f04f 0320 	mov.w	r3, #32
     95a:	f3ef 8711 	mrs	r7, BASEPRI
     95e:	f383 8811 	msr	BASEPRI, r3
     962:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     966:	4630      	mov	r0, r6
     968:	f003 f9d4 	bl	3d14 <z_spin_lock_valid>
     96c:	b940      	cbnz	r0, 980 <transition_complete+0x34>
     96e:	490a      	ldr	r1, [pc, #40]	; (998 <transition_complete+0x4c>)
     970:	480a      	ldr	r0, [pc, #40]	; (99c <transition_complete+0x50>)
     972:	2281      	movs	r2, #129	; 0x81
     974:	f007 fc0c 	bl	8190 <printk>
     978:	2181      	movs	r1, #129	; 0x81
     97a:	4807      	ldr	r0, [pc, #28]	; (998 <transition_complete+0x4c>)
     97c:	f007 fcd4 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
     980:	4630      	mov	r0, r6
     982:	f003 f9e3 	bl	3d4c <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
     986:	463a      	mov	r2, r7
     988:	4620      	mov	r0, r4
	mgr->last_res = res;
     98a:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
     98c:	2101      	movs	r1, #1
}
     98e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
     992:	f7ff be21 	b.w	5d8 <process_event>
     996:	bf00      	nop
     998:	00008fe0 	.word	0x00008fe0
     99c:	00008fa6 	.word	0x00008fa6

000009a0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
     9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     9a4:	4604      	mov	r4, r0
     9a6:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
     9a8:	f007 fc31 	bl	820e <validate_args>

	if (rv < 0) {
     9ac:	1e05      	subs	r5, r0, #0
     9ae:	db54      	blt.n	a5a <onoff_request+0xba>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     9b0:	f104 0914 	add.w	r9, r4, #20
     9b4:	f04f 0320 	mov.w	r3, #32
     9b8:	f3ef 8a11 	mrs	sl, BASEPRI
     9bc:	f383 8811 	msr	BASEPRI, r3
     9c0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     9c4:	4648      	mov	r0, r9
     9c6:	f003 f9a5 	bl	3d14 <z_spin_lock_valid>
     9ca:	b940      	cbnz	r0, 9de <onoff_request+0x3e>
     9cc:	4933      	ldr	r1, [pc, #204]	; (a9c <onoff_request+0xfc>)
     9ce:	4834      	ldr	r0, [pc, #208]	; (aa0 <onoff_request+0x100>)
     9d0:	2281      	movs	r2, #129	; 0x81
     9d2:	f007 fbdd 	bl	8190 <printk>
     9d6:	2181      	movs	r1, #129	; 0x81
     9d8:	4830      	ldr	r0, [pc, #192]	; (a9c <onoff_request+0xfc>)
     9da:	f007 fca5 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
     9de:	4648      	mov	r0, r9
     9e0:	f003 f9b4 	bl	3d4c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
     9e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
     9e8:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     9ea:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
     9ec:	428b      	cmp	r3, r1
     9ee:	f002 0607 	and.w	r6, r2, #7
     9f2:	d04a      	beq.n	a8a <onoff_request+0xea>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
     9f4:	2e02      	cmp	r6, #2
     9f6:	d11f      	bne.n	a38 <onoff_request+0x98>
	rv = state;
     9f8:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
     9fa:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
     9fe:	3301      	adds	r3, #1
     a00:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     a02:	4648      	mov	r0, r9
     a04:	f003 f994 	bl	3d30 <z_spin_unlock_valid>
     a08:	b940      	cbnz	r0, a1c <onoff_request+0x7c>
     a0a:	4924      	ldr	r1, [pc, #144]	; (a9c <onoff_request+0xfc>)
     a0c:	4824      	ldr	r0, [pc, #144]	; (aa0 <onoff_request+0x100>)
     a0e:	22ac      	movs	r2, #172	; 0xac
     a10:	f007 fbbe 	bl	8190 <printk>
     a14:	21ac      	movs	r1, #172	; 0xac
     a16:	4821      	ldr	r0, [pc, #132]	; (a9c <onoff_request+0xfc>)
     a18:	f007 fc86 	bl	8328 <assert_post_action>
	__asm__ volatile(
     a1c:	f38a 8811 	msr	BASEPRI, sl
     a20:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
     a24:	f1b8 0f00 	cmp.w	r8, #0
     a28:	d017      	beq.n	a5a <onoff_request+0xba>
			notify_one(mgr, cli, state, 0);
     a2a:	2300      	movs	r3, #0
     a2c:	4632      	mov	r2, r6
     a2e:	4639      	mov	r1, r7
     a30:	4620      	mov	r0, r4
     a32:	f007 fbd6 	bl	81e2 <notify_one>
     a36:	e010      	b.n	a5a <onoff_request+0xba>
	} else if ((state == ONOFF_STATE_OFF)
     a38:	0793      	lsls	r3, r2, #30
     a3a:	d001      	beq.n	a40 <onoff_request+0xa0>
		   || (state == ONOFF_STATE_TO_ON)) {
     a3c:	2e06      	cmp	r6, #6
     a3e:	d10f      	bne.n	a60 <onoff_request+0xc0>
	parent->next = child;
     a40:	2300      	movs	r3, #0
     a42:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
     a44:	6863      	ldr	r3, [r4, #4]
     a46:	b9eb      	cbnz	r3, a84 <onoff_request+0xe4>
	list->head = node;
     a48:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
     a4c:	4635      	mov	r5, r6
     a4e:	b9f6      	cbnz	r6, a8e <onoff_request+0xee>
		process_event(mgr, EVT_RECHECK, key);
     a50:	4652      	mov	r2, sl
     a52:	2102      	movs	r1, #2
     a54:	4620      	mov	r0, r4
     a56:	f7ff fdbf 	bl	5d8 <process_event>
		}
	}

	return rv;
}
     a5a:	4628      	mov	r0, r5
     a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
     a60:	2e05      	cmp	r6, #5
     a62:	d017      	beq.n	a94 <onoff_request+0xf4>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     a64:	2e01      	cmp	r6, #1
     a66:	d00a      	beq.n	a7e <onoff_request+0xde>
     a68:	490e      	ldr	r1, [pc, #56]	; (aa4 <onoff_request+0x104>)
     a6a:	480d      	ldr	r0, [pc, #52]	; (aa0 <onoff_request+0x100>)
     a6c:	f240 12c9 	movw	r2, #457	; 0x1c9
     a70:	f007 fb8e 	bl	8190 <printk>
     a74:	f240 11c9 	movw	r1, #457	; 0x1c9
     a78:	480a      	ldr	r0, [pc, #40]	; (aa4 <onoff_request+0x104>)
     a7a:	f007 fc55 	bl	8328 <assert_post_action>
		rv = -EIO;
     a7e:	f06f 0504 	mvn.w	r5, #4
     a82:	e004      	b.n	a8e <onoff_request+0xee>
	parent->next = child;
     a84:	601f      	str	r7, [r3, #0]
	list->tail = node;
     a86:	6067      	str	r7, [r4, #4]
}
     a88:	e7e0      	b.n	a4c <onoff_request+0xac>
		rv = -EAGAIN;
     a8a:	f06f 050a 	mvn.w	r5, #10
     a8e:	f04f 0800 	mov.w	r8, #0
     a92:	e7b6      	b.n	a02 <onoff_request+0x62>
		rv = -ENOTSUP;
     a94:	f06f 0585 	mvn.w	r5, #133	; 0x85
     a98:	e7f9      	b.n	a8e <onoff_request+0xee>
     a9a:	bf00      	nop
     a9c:	00008fe0 	.word	0x00008fe0
     aa0:	00008fa6 	.word	0x00008fa6
     aa4:	00008fbe 	.word	0x00008fbe

00000aa8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     aac:	468b      	mov	fp, r1
     aae:	4692      	mov	sl, r2
     ab0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     ab2:	2500      	movs	r5, #0
{
     ab4:	b091      	sub	sp, #68	; 0x44
     ab6:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     ab8:	f89a 0000 	ldrb.w	r0, [sl]
     abc:	b908      	cbnz	r0, ac2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     abe:	4628      	mov	r0, r5
     ac0:	e35e      	b.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
		if (*fp != '%') {
     ac2:	2825      	cmp	r0, #37	; 0x25
     ac4:	f10a 0701 	add.w	r7, sl, #1
     ac8:	d007      	beq.n	ada <cbvprintf+0x32>
			OUTC('%');
     aca:	4659      	mov	r1, fp
     acc:	9b02      	ldr	r3, [sp, #8]
     ace:	4798      	blx	r3
     ad0:	2800      	cmp	r0, #0
     ad2:	f2c0 8355 	blt.w	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
     ad6:	3501      	adds	r5, #1
			break;
     ad8:	e210      	b.n	efc <cbvprintf+0x454>
		} state = {
     ada:	2218      	movs	r2, #24
     adc:	2100      	movs	r1, #0
     ade:	a80a      	add	r0, sp, #40	; 0x28
     ae0:	f007 fd47 	bl	8572 <memset>
	if (*sp == '%') {
     ae4:	f89a 3001 	ldrb.w	r3, [sl, #1]
     ae8:	2b25      	cmp	r3, #37	; 0x25
     aea:	d078      	beq.n	bde <cbvprintf+0x136>
     aec:	2200      	movs	r2, #0
     aee:	4694      	mov	ip, r2
     af0:	4616      	mov	r6, r2
     af2:	4696      	mov	lr, r2
     af4:	4610      	mov	r0, r2
     af6:	4639      	mov	r1, r7
		switch (*sp) {
     af8:	f817 3b01 	ldrb.w	r3, [r7], #1
     afc:	2b2b      	cmp	r3, #43	; 0x2b
     afe:	f000 809d 	beq.w	c3c <cbvprintf+0x194>
     b02:	f200 8094 	bhi.w	c2e <cbvprintf+0x186>
     b06:	2b20      	cmp	r3, #32
     b08:	f000 809b 	beq.w	c42 <cbvprintf+0x19a>
     b0c:	2b23      	cmp	r3, #35	; 0x23
     b0e:	f000 809a 	beq.w	c46 <cbvprintf+0x19e>
     b12:	b128      	cbz	r0, b20 <cbvprintf+0x78>
     b14:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b18:	f040 0004 	orr.w	r0, r0, #4
     b1c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b20:	f1be 0f00 	cmp.w	lr, #0
     b24:	d005      	beq.n	b32 <cbvprintf+0x8a>
     b26:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b2a:	f040 0008 	orr.w	r0, r0, #8
     b2e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b32:	b12e      	cbz	r6, b40 <cbvprintf+0x98>
     b34:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b38:	f040 0010 	orr.w	r0, r0, #16
     b3c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b40:	f1bc 0f00 	cmp.w	ip, #0
     b44:	d005      	beq.n	b52 <cbvprintf+0xaa>
     b46:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b4a:	f040 0020 	orr.w	r0, r0, #32
     b4e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b52:	b12a      	cbz	r2, b60 <cbvprintf+0xb8>
     b54:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     b5c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     b60:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b64:	f002 0044 	and.w	r0, r2, #68	; 0x44
     b68:	2844      	cmp	r0, #68	; 0x44
     b6a:	d103      	bne.n	b74 <cbvprintf+0xcc>
		conv->flag_zero = false;
     b6c:	f36f 1286 	bfc	r2, #6, #1
     b70:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     b74:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     b78:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     b7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     b7e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     b82:	d17b      	bne.n	c7c <cbvprintf+0x1d4>
		conv->width_star = true;
     b84:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     b88:	1c4b      	adds	r3, r1, #1
     b8a:	f042 0201 	orr.w	r2, r2, #1
     b8e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     b92:	781a      	ldrb	r2, [r3, #0]
     b94:	2a2e      	cmp	r2, #46	; 0x2e
     b96:	bf0c      	ite	eq
     b98:	2101      	moveq	r1, #1
     b9a:	2100      	movne	r1, #0
     b9c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     ba0:	f361 0241 	bfi	r2, r1, #1, #1
     ba4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     ba8:	d174      	bne.n	c94 <cbvprintf+0x1ec>
	if (*sp == '*') {
     baa:	785a      	ldrb	r2, [r3, #1]
     bac:	2a2a      	cmp	r2, #42	; 0x2a
     bae:	d06a      	beq.n	c86 <cbvprintf+0x1de>
	size_t val = 0;
     bb0:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     bb2:	260a      	movs	r6, #10
     bb4:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     bb6:	4618      	mov	r0, r3
     bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
     bbc:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     bc0:	2f09      	cmp	r7, #9
     bc2:	f240 808e 	bls.w	ce2 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     bc6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     bca:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     bcc:	f3c2 0040 	ubfx	r0, r2, #1, #1
     bd0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     bd4:	f361 0241 	bfi	r2, r1, #1, #1
     bd8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     bdc:	e05a      	b.n	c94 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     bde:	f10a 0702 	add.w	r7, sl, #2
     be2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     be6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     bea:	07d9      	lsls	r1, r3, #31
     bec:	f140 8149 	bpl.w	e82 <cbvprintf+0x3da>
			width = va_arg(ap, int);
     bf0:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     bf4:	f1b9 0f00 	cmp.w	r9, #0
     bf8:	da07      	bge.n	c0a <cbvprintf+0x162>
				conv->flag_dash = true;
     bfa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
     bfe:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
     c02:	f042 0204 	orr.w	r2, r2, #4
     c06:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
     c0a:	075a      	lsls	r2, r3, #29
     c0c:	f140 8142 	bpl.w	e94 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
     c10:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     c14:	f1b8 0f00 	cmp.w	r8, #0
     c18:	f280 8141 	bge.w	e9e <cbvprintf+0x3f6>
				conv->prec_present = false;
     c1c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     c20:	f36f 0341 	bfc	r3, #1, #1
     c24:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     c28:	f04f 38ff 	mov.w	r8, #4294967295
     c2c:	e137      	b.n	e9e <cbvprintf+0x3f6>
		switch (*sp) {
     c2e:	2b2d      	cmp	r3, #45	; 0x2d
     c30:	d00c      	beq.n	c4c <cbvprintf+0x1a4>
     c32:	2b30      	cmp	r3, #48	; 0x30
     c34:	f47f af6d 	bne.w	b12 <cbvprintf+0x6a>
			conv->flag_zero = true;
     c38:	2201      	movs	r2, #1
	} while (loop);
     c3a:	e75c      	b.n	af6 <cbvprintf+0x4e>
			conv->flag_plus = true;
     c3c:	f04f 0e01 	mov.w	lr, #1
     c40:	e759      	b.n	af6 <cbvprintf+0x4e>
			conv->flag_space = true;
     c42:	2601      	movs	r6, #1
     c44:	e757      	b.n	af6 <cbvprintf+0x4e>
			conv->flag_hash = true;
     c46:	f04f 0c01 	mov.w	ip, #1
     c4a:	e754      	b.n	af6 <cbvprintf+0x4e>
		switch (*sp) {
     c4c:	2001      	movs	r0, #1
     c4e:	e752      	b.n	af6 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     c50:	4633      	mov	r3, r6
     c52:	fb0c 0202 	mla	r2, ip, r2, r0
     c56:	3a30      	subs	r2, #48	; 0x30
     c58:	461e      	mov	r6, r3
     c5a:	f816 0b01 	ldrb.w	r0, [r6], #1
     c5e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     c62:	2f09      	cmp	r7, #9
     c64:	d9f4      	bls.n	c50 <cbvprintf+0x1a8>
	if (sp != wp) {
     c66:	4299      	cmp	r1, r3
     c68:	d093      	beq.n	b92 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     c6a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     c6e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     c70:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     c72:	f362 0141 	bfi	r1, r2, #1, #1
     c76:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     c7a:	e78a      	b.n	b92 <cbvprintf+0xea>
     c7c:	460b      	mov	r3, r1
	size_t val = 0;
     c7e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     c80:	f04f 0c0a 	mov.w	ip, #10
     c84:	e7e8      	b.n	c58 <cbvprintf+0x1b0>
		conv->prec_star = true;
     c86:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     c8a:	3302      	adds	r3, #2
		conv->prec_star = true;
     c8c:	f042 0204 	orr.w	r2, r2, #4
     c90:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
     c94:	461f      	mov	r7, r3
     c96:	f817 2b01 	ldrb.w	r2, [r7], #1
     c9a:	2a6c      	cmp	r2, #108	; 0x6c
     c9c:	d041      	beq.n	d22 <cbvprintf+0x27a>
     c9e:	d825      	bhi.n	cec <cbvprintf+0x244>
     ca0:	2a68      	cmp	r2, #104	; 0x68
     ca2:	d02b      	beq.n	cfc <cbvprintf+0x254>
     ca4:	2a6a      	cmp	r2, #106	; 0x6a
     ca6:	d046      	beq.n	d36 <cbvprintf+0x28e>
     ca8:	2a4c      	cmp	r2, #76	; 0x4c
     caa:	d04c      	beq.n	d46 <cbvprintf+0x29e>
     cac:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     cae:	f817 2b01 	ldrb.w	r2, [r7], #1
     cb2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
     cb6:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     cb8:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     cbc:	f200 80d9 	bhi.w	e72 <cbvprintf+0x3ca>
     cc0:	2a57      	cmp	r2, #87	; 0x57
     cc2:	d84d      	bhi.n	d60 <cbvprintf+0x2b8>
     cc4:	2a41      	cmp	r2, #65	; 0x41
     cc6:	d003      	beq.n	cd0 <cbvprintf+0x228>
     cc8:	3a45      	subs	r2, #69	; 0x45
     cca:	2a02      	cmp	r2, #2
     ccc:	f200 80d1 	bhi.w	e72 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
     cd0:	2204      	movs	r2, #4
     cd2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     cd6:	f362 0302 	bfi	r3, r2, #0, #3
     cda:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     cde:	2301      	movs	r3, #1
			break;
     ce0:	e09e      	b.n	e20 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
     ce2:	fb06 2101 	mla	r1, r6, r1, r2
     ce6:	4603      	mov	r3, r0
     ce8:	3930      	subs	r1, #48	; 0x30
     cea:	e764      	b.n	bb6 <cbvprintf+0x10e>
	switch (*sp) {
     cec:	2a74      	cmp	r2, #116	; 0x74
     cee:	d026      	beq.n	d3e <cbvprintf+0x296>
     cf0:	2a7a      	cmp	r2, #122	; 0x7a
     cf2:	d1db      	bne.n	cac <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     cf4:	2206      	movs	r2, #6
     cf6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     cfa:	e00d      	b.n	d18 <cbvprintf+0x270>
		if (*++sp == 'h') {
     cfc:	785a      	ldrb	r2, [r3, #1]
     cfe:	2a68      	cmp	r2, #104	; 0x68
     d00:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     d04:	d106      	bne.n	d14 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     d06:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     d08:	f361 02c6 	bfi	r2, r1, #3, #4
     d0c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     d10:	1c9f      	adds	r7, r3, #2
     d12:	e7cc      	b.n	cae <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     d14:	4613      	mov	r3, r2
     d16:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     d18:	f362 03c6 	bfi	r3, r2, #3, #4
     d1c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     d20:	e7c5      	b.n	cae <cbvprintf+0x206>
		if (*++sp == 'l') {
     d22:	785a      	ldrb	r2, [r3, #1]
     d24:	2a6c      	cmp	r2, #108	; 0x6c
     d26:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     d2a:	d101      	bne.n	d30 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     d2c:	2104      	movs	r1, #4
     d2e:	e7eb      	b.n	d08 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     d30:	4613      	mov	r3, r2
     d32:	2203      	movs	r2, #3
     d34:	e7f0      	b.n	d18 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     d36:	2205      	movs	r2, #5
     d38:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d3c:	e7ec      	b.n	d18 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     d3e:	2207      	movs	r2, #7
     d40:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d44:	e7e8      	b.n	d18 <cbvprintf+0x270>
		conv->unsupported = true;
     d46:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     d4a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     d4e:	f023 0302 	bic.w	r3, r3, #2
     d52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     d56:	f043 0302 	orr.w	r3, r3, #2
     d5a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     d5e:	e7a6      	b.n	cae <cbvprintf+0x206>
     d60:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     d64:	2920      	cmp	r1, #32
     d66:	f200 8084 	bhi.w	e72 <cbvprintf+0x3ca>
     d6a:	a001      	add	r0, pc, #4	; (adr r0, d70 <cbvprintf+0x2c8>)
     d6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     d70:	00000e35 	.word	0x00000e35
     d74:	00000e73 	.word	0x00000e73
     d78:	00000e73 	.word	0x00000e73
     d7c:	00000e73 	.word	0x00000e73
     d80:	00000e73 	.word	0x00000e73
     d84:	00000e73 	.word	0x00000e73
     d88:	00000e73 	.word	0x00000e73
     d8c:	00000e73 	.word	0x00000e73
     d90:	00000e73 	.word	0x00000e73
     d94:	00000cd1 	.word	0x00000cd1
     d98:	00000e73 	.word	0x00000e73
     d9c:	00000e35 	.word	0x00000e35
     da0:	00000df5 	.word	0x00000df5
     da4:	00000cd1 	.word	0x00000cd1
     da8:	00000cd1 	.word	0x00000cd1
     dac:	00000cd1 	.word	0x00000cd1
     db0:	00000e73 	.word	0x00000e73
     db4:	00000df5 	.word	0x00000df5
     db8:	00000e73 	.word	0x00000e73
     dbc:	00000e73 	.word	0x00000e73
     dc0:	00000e73 	.word	0x00000e73
     dc4:	00000e73 	.word	0x00000e73
     dc8:	00000e3d 	.word	0x00000e3d
     dcc:	00000e35 	.word	0x00000e35
     dd0:	00000e59 	.word	0x00000e59
     dd4:	00000e73 	.word	0x00000e73
     dd8:	00000e73 	.word	0x00000e73
     ddc:	00000e59 	.word	0x00000e59
     de0:	00000e73 	.word	0x00000e73
     de4:	00000e35 	.word	0x00000e35
     de8:	00000e73 	.word	0x00000e73
     dec:	00000e73 	.word	0x00000e73
     df0:	00000e35 	.word	0x00000e35
		conv->specifier_cat = SPECIFIER_SINT;
     df4:	2001      	movs	r0, #1
     df6:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     dfa:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     dfe:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     e02:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     e04:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     e08:	bf02      	ittt	eq
     e0a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     e0e:	f041 0101 	orreq.w	r1, r1, #1
     e12:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     e16:	2a63      	cmp	r2, #99	; 0x63
     e18:	d131      	bne.n	e7e <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
     e1a:	3b00      	subs	r3, #0
     e1c:	bf18      	it	ne
     e1e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     e20:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     e24:	f3c2 0140 	ubfx	r1, r2, #1, #1
     e28:	430b      	orrs	r3, r1
     e2a:	f363 0241 	bfi	r2, r3, #1, #1
     e2e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     e32:	e6d8      	b.n	be6 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     e34:	2002      	movs	r0, #2
     e36:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     e3a:	e7de      	b.n	dfa <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
     e3c:	2103      	movs	r1, #3
     e3e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     e42:	f003 0378 	and.w	r3, r3, #120	; 0x78
     e46:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     e4a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     e4e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     e50:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     e54:	4143      	adcs	r3, r0
     e56:	e7e3      	b.n	e20 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
     e58:	2103      	movs	r1, #3
     e5a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     e5e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     e62:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     e66:	bf14      	ite	ne
     e68:	2301      	movne	r3, #1
     e6a:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
     e6c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     e70:	e7d6      	b.n	e20 <cbvprintf+0x378>
		conv->invalid = true;
     e72:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     e76:	f043 0301 	orr.w	r3, r3, #1
     e7a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     e7e:	2300      	movs	r3, #0
     e80:	e7ce      	b.n	e20 <cbvprintf+0x378>
		} else if (conv->width_present) {
     e82:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     e86:	2a00      	cmp	r2, #0
		int width = -1;
     e88:	bfac      	ite	ge
     e8a:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
     e8e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
     e92:	e6ba      	b.n	c0a <cbvprintf+0x162>
		} else if (conv->prec_present) {
     e94:	079b      	lsls	r3, r3, #30
     e96:	f57f aec7 	bpl.w	c28 <cbvprintf+0x180>
			precision = conv->prec_value;
     e9a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
     e9e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     ea0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     ea4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
     ea8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
     eac:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     eb0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     eb2:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     eb6:	d136      	bne.n	f26 <cbvprintf+0x47e>
			switch (length_mod) {
     eb8:	1ed3      	subs	r3, r2, #3
     eba:	2b04      	cmp	r3, #4
     ebc:	d820      	bhi.n	f00 <cbvprintf+0x458>
     ebe:	e8df f003 	tbb	[pc, r3]
     ec2:	0703      	.short	0x0703
     ec4:	1f07      	.short	0x1f07
     ec6:	1f          	.byte	0x1f
     ec7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     ec8:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     ecc:	17c1      	asrs	r1, r0, #31
     ece:	e004      	b.n	eda <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
     ed0:	3407      	adds	r4, #7
     ed2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     ed6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     eda:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     ede:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     ee2:	f013 0603 	ands.w	r6, r3, #3
     ee6:	d054      	beq.n	f92 <cbvprintf+0x4ea>
			OUTS(sp, fp);
     ee8:	463b      	mov	r3, r7
     eea:	4652      	mov	r2, sl
     eec:	4659      	mov	r1, fp
     eee:	9802      	ldr	r0, [sp, #8]
     ef0:	f007 fa04 	bl	82fc <outs>
     ef4:	2800      	cmp	r0, #0
     ef6:	f2c0 8143 	blt.w	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
     efa:	4405      	add	r5, r0
			continue;
     efc:	46ba      	mov	sl, r7
     efe:	e5db      	b.n	ab8 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f00:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     f04:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     f06:	ea4f 71e0 	mov.w	r1, r0, asr #31
     f0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     f0e:	d105      	bne.n	f1c <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
     f10:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     f14:	930a      	str	r3, [sp, #40]	; 0x28
     f16:	2300      	movs	r3, #0
     f18:	930b      	str	r3, [sp, #44]	; 0x2c
     f1a:	e7e0      	b.n	ede <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
     f1c:	2a02      	cmp	r2, #2
     f1e:	d1de      	bne.n	ede <cbvprintf+0x436>
				value->sint = (short)value->sint;
     f20:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     f24:	e7d2      	b.n	ecc <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
     f26:	2b02      	cmp	r3, #2
     f28:	d123      	bne.n	f72 <cbvprintf+0x4ca>
			switch (length_mod) {
     f2a:	1ed3      	subs	r3, r2, #3
     f2c:	2b04      	cmp	r3, #4
     f2e:	d813      	bhi.n	f58 <cbvprintf+0x4b0>
     f30:	e8df f003 	tbb	[pc, r3]
     f34:	120a0a03 	.word	0x120a0a03
     f38:	12          	.byte	0x12
     f39:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
     f3a:	2100      	movs	r1, #0
					value->uint = (wchar_t)va_arg(ap,
     f3c:	6820      	ldr	r0, [r4, #0]
     f3e:	1d23      	adds	r3, r4, #4
     f40:	900a      	str	r0, [sp, #40]	; 0x28
     f42:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     f44:	461c      	mov	r4, r3
     f46:	e7ca      	b.n	ede <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
     f48:	3407      	adds	r4, #7
     f4a:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     f4e:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     f52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     f56:	e7f5      	b.n	f44 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
     f58:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     f5c:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     f5e:	930a      	str	r3, [sp, #40]	; 0x28
     f60:	f04f 0300 	mov.w	r3, #0
     f64:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     f66:	d0d3      	beq.n	f10 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
     f68:	2a02      	cmp	r2, #2
     f6a:	d1b8      	bne.n	ede <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
     f6c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     f70:	e7d0      	b.n	f14 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
     f72:	2b04      	cmp	r3, #4
     f74:	d107      	bne.n	f86 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
     f76:	3407      	adds	r4, #7
     f78:	f024 0407 	bic.w	r4, r4, #7
     f7c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     f80:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     f84:	e7ab      	b.n	ede <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
     f86:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     f88:	bf04      	itt	eq
     f8a:	f854 3b04 	ldreq.w	r3, [r4], #4
     f8e:	930a      	streq	r3, [sp, #40]	; 0x28
     f90:	e7a5      	b.n	ede <cbvprintf+0x436>
		switch (conv->specifier) {
     f92:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     f96:	2878      	cmp	r0, #120	; 0x78
     f98:	d8b0      	bhi.n	efc <cbvprintf+0x454>
     f9a:	2862      	cmp	r0, #98	; 0x62
     f9c:	d822      	bhi.n	fe4 <cbvprintf+0x53c>
     f9e:	2825      	cmp	r0, #37	; 0x25
     fa0:	f43f ad93 	beq.w	aca <cbvprintf+0x22>
     fa4:	2858      	cmp	r0, #88	; 0x58
     fa6:	d1a9      	bne.n	efc <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
     fa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     fac:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     fb0:	9300      	str	r3, [sp, #0]
     fb2:	aa0c      	add	r2, sp, #48	; 0x30
     fb4:	ab04      	add	r3, sp, #16
     fb6:	f007 f956 	bl	8266 <encode_uint>
     fba:	4682      	mov	sl, r0
			if (precision >= 0) {
     fbc:	f1b8 0f00 	cmp.w	r8, #0
     fc0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     fc4:	db0c      	blt.n	fe0 <cbvprintf+0x538>
				conv->flag_zero = false;
     fc6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     fca:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     fce:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     fd2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     fd4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     fd8:	d902      	bls.n	fe0 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
     fda:	eba8 0303 	sub.w	r3, r8, r3
     fde:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     fe0:	4680      	mov	r8, r0
     fe2:	e03d      	b.n	1060 <CONFIG_MAIN_STACK_SIZE+0x60>
     fe4:	3863      	subs	r0, #99	; 0x63
     fe6:	2815      	cmp	r0, #21
     fe8:	d888      	bhi.n	efc <cbvprintf+0x454>
     fea:	a101      	add	r1, pc, #4	; (adr r1, ff0 <cbvprintf+0x548>)
     fec:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     ff0:	00001071 	.word	0x00001071
     ff4:	000010d5 	.word	0x000010d5
     ff8:	00000efd 	.word	0x00000efd
     ffc:	00000efd 	.word	0x00000efd
    1000:	00000efd 	.word	0x00000efd
    1004:	00000efd 	.word	0x00000efd
    1008:	000010d5 	.word	0x000010d5
    100c:	00000efd 	.word	0x00000efd
    1010:	00000efd 	.word	0x00000efd
    1014:	00000efd 	.word	0x00000efd
    1018:	00000efd 	.word	0x00000efd
    101c:	00001133 	.word	0x00001133
    1020:	00001101 	.word	0x00001101
    1024:	00001105 	.word	0x00001105
    1028:	00000efd 	.word	0x00000efd
    102c:	00000efd 	.word	0x00000efd
    1030:	00001049 	.word	0x00001049
    1034:	00000efd 	.word	0x00000efd
    1038:	00001101 	.word	0x00001101
    103c:	00000efd 	.word	0x00000efd
    1040:	00000efd 	.word	0x00000efd
    1044:	00001101 	.word	0x00001101
			if (precision >= 0) {
    1048:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    104c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1050:	db0a      	blt.n	1068 <CONFIG_MAIN_STACK_SIZE+0x68>
				len = strnlen(bps, precision);
    1052:	4641      	mov	r1, r8
    1054:	4650      	mov	r0, sl
    1056:	f007 fa45 	bl	84e4 <strnlen>
		char sign = 0;
    105a:	2600      	movs	r6, #0
			bpe = bps + len;
    105c:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
    1060:	f1ba 0f00 	cmp.w	sl, #0
    1064:	d10c      	bne.n	1080 <CONFIG_MAIN_STACK_SIZE+0x80>
    1066:	e749      	b.n	efc <cbvprintf+0x454>
				len = strlen(bps);
    1068:	4650      	mov	r0, sl
    106a:	f007 fa34 	bl	84d6 <strlen>
    106e:	e7f4      	b.n	105a <CONFIG_MAIN_STACK_SIZE+0x5a>
			break;
    1070:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bpe = buf + 1;
    1074:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1078:	f88d 3010 	strb.w	r3, [sp, #16]
			bps = buf;
    107c:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    1080:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1084:	b106      	cbz	r6, 1088 <CONFIG_MAIN_STACK_SIZE+0x88>
			nj_len += 1U;
    1086:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1088:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    108c:	06d0      	lsls	r0, r2, #27
    108e:	d56b      	bpl.n	1168 <CONFIG_MAIN_STACK_SIZE+0x168>
			nj_len += 2U;
    1090:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1092:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1094:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1096:	bf48      	it	mi
    1098:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    109a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    109c:	bf48      	it	mi
    109e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    10a0:	f1b9 0f00 	cmp.w	r9, #0
    10a4:	dd79      	ble.n	119a <CONFIG_MAIN_STACK_SIZE+0x19a>
			if (!conv->flag_dash) {
    10a6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    10aa:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    10ae:	f3c2 0380 	ubfx	r3, r2, #2, #1
    10b2:	9303      	str	r3, [sp, #12]
    10b4:	0753      	lsls	r3, r2, #29
    10b6:	d470      	bmi.n	119a <CONFIG_MAIN_STACK_SIZE+0x19a>
				if (conv->flag_zero) {
    10b8:	0650      	lsls	r0, r2, #25
    10ba:	d564      	bpl.n	1186 <CONFIG_MAIN_STACK_SIZE+0x186>
					if (sign != 0) {
    10bc:	b146      	cbz	r6, 10d0 <CONFIG_MAIN_STACK_SIZE+0xd0>
						OUTC(sign);
    10be:	4659      	mov	r1, fp
    10c0:	4630      	mov	r0, r6
    10c2:	9b02      	ldr	r3, [sp, #8]
    10c4:	4798      	blx	r3
    10c6:	2800      	cmp	r0, #0
    10c8:	db5a      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
						sign = 0;
    10ca:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    10cc:	3501      	adds	r5, #1
						sign = 0;
    10ce:	461e      	mov	r6, r3
					pad = '0';
    10d0:	2330      	movs	r3, #48	; 0x30
    10d2:	e059      	b.n	1188 <CONFIG_MAIN_STACK_SIZE+0x188>
			if (conv->flag_plus) {
    10d4:	071e      	lsls	r6, r3, #28
    10d6:	d411      	bmi.n	10fc <CONFIG_MAIN_STACK_SIZE+0xfc>
				sign = ' ';
    10d8:	f013 0610 	ands.w	r6, r3, #16
    10dc:	bf18      	it	ne
    10de:	2620      	movne	r6, #32
			sint = value->sint;
    10e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    10e4:	2a00      	cmp	r2, #0
    10e6:	f173 0100 	sbcs.w	r1, r3, #0
    10ea:	f6bf af5d 	bge.w	fa8 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
    10ee:	4252      	negs	r2, r2
    10f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
    10f4:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
    10f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    10fa:	e755      	b.n	fa8 <cbvprintf+0x500>
				sign = '+';
    10fc:	262b      	movs	r6, #43	; 0x2b
    10fe:	e7ef      	b.n	10e0 <CONFIG_MAIN_STACK_SIZE+0xe0>
		switch (conv->specifier) {
    1100:	2600      	movs	r6, #0
    1102:	e751      	b.n	fa8 <cbvprintf+0x500>
			if (value->ptr != NULL) {
    1104:	980a      	ldr	r0, [sp, #40]	; 0x28
    1106:	b348      	cbz	r0, 115c <CONFIG_MAIN_STACK_SIZE+0x15c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1108:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    110c:	9300      	str	r3, [sp, #0]
    110e:	2100      	movs	r1, #0
    1110:	ab04      	add	r3, sp, #16
    1112:	aa0c      	add	r2, sp, #48	; 0x30
    1114:	f007 f8a7 	bl	8266 <encode_uint>
				conv->altform_0c = true;
    1118:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
    111c:	4682      	mov	sl, r0
				conv->altform_0c = true;
    111e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1122:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1126:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
    112a:	2600      	movs	r6, #0
				conv->altform_0c = true;
    112c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
    1130:	e744      	b.n	fbc <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
    1132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1134:	2a07      	cmp	r2, #7
    1136:	f63f aee1 	bhi.w	efc <cbvprintf+0x454>
    113a:	e8df f002 	tbb	[pc, r2]
    113e:	040d      	.short	0x040d
    1140:	08080d06 	.word	0x08080d06
    1144:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    1146:	701d      	strb	r5, [r3, #0]
		break;
    1148:	e6d8      	b.n	efc <cbvprintf+0x454>
		*(short *)dp = (short)count;
    114a:	801d      	strh	r5, [r3, #0]
		break;
    114c:	e6d6      	b.n	efc <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
    114e:	4628      	mov	r0, r5
    1150:	17e9      	asrs	r1, r5, #31
    1152:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    1156:	e6d1      	b.n	efc <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1158:	601d      	str	r5, [r3, #0]
		break;
    115a:	e6cf      	b.n	efc <cbvprintf+0x454>
			bpe = bps + 5;
    115c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1224 <CONFIG_MAIN_STACK_SIZE+0x224>
    1160:	4606      	mov	r6, r0
			bps = "(nil)";
    1162:	f1a8 0a05 	sub.w	sl, r8, #5
    1166:	e78b      	b.n	1080 <CONFIG_MAIN_STACK_SIZE+0x80>
		} else if (conv->altform_0) {
    1168:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    116a:	bf48      	it	mi
    116c:	3301      	addmi	r3, #1
    116e:	e790      	b.n	1092 <CONFIG_MAIN_STACK_SIZE+0x92>
					OUTC(pad);
    1170:	4618      	mov	r0, r3
    1172:	9303      	str	r3, [sp, #12]
    1174:	4659      	mov	r1, fp
    1176:	9b02      	ldr	r3, [sp, #8]
    1178:	4798      	blx	r3
    117a:	2800      	cmp	r0, #0
    117c:	9b03      	ldr	r3, [sp, #12]
    117e:	da04      	bge.n	118a <CONFIG_MAIN_STACK_SIZE+0x18a>
#undef OUTS
#undef OUTC
}
    1180:	b011      	add	sp, #68	; 0x44
    1182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1186:	2320      	movs	r3, #32
    1188:	444d      	add	r5, r9
    118a:	464a      	mov	r2, r9
				while (width-- > 0) {
    118c:	2a00      	cmp	r2, #0
    118e:	eba5 0109 	sub.w	r1, r5, r9
    1192:	f109 39ff 	add.w	r9, r9, #4294967295
    1196:	dceb      	bgt.n	1170 <CONFIG_MAIN_STACK_SIZE+0x170>
    1198:	460d      	mov	r5, r1
		if (sign != 0) {
    119a:	b136      	cbz	r6, 11aa <CONFIG_MAIN_STACK_SIZE+0x1aa>
			OUTC(sign);
    119c:	4659      	mov	r1, fp
    119e:	4630      	mov	r0, r6
    11a0:	9b02      	ldr	r3, [sp, #8]
    11a2:	4798      	blx	r3
    11a4:	2800      	cmp	r0, #0
    11a6:	dbeb      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
    11a8:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    11aa:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    11ae:	06d9      	lsls	r1, r3, #27
    11b0:	d401      	bmi.n	11b6 <CONFIG_MAIN_STACK_SIZE+0x1b6>
    11b2:	071a      	lsls	r2, r3, #28
    11b4:	d506      	bpl.n	11c4 <CONFIG_MAIN_STACK_SIZE+0x1c4>
				OUTC('0');
    11b6:	4659      	mov	r1, fp
    11b8:	2030      	movs	r0, #48	; 0x30
    11ba:	9b02      	ldr	r3, [sp, #8]
    11bc:	4798      	blx	r3
    11be:	2800      	cmp	r0, #0
    11c0:	dbde      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
    11c2:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    11c4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    11c8:	06db      	lsls	r3, r3, #27
    11ca:	d507      	bpl.n	11dc <CONFIG_MAIN_STACK_SIZE+0x1dc>
				OUTC(conv->specifier);
    11cc:	4659      	mov	r1, fp
    11ce:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    11d2:	9b02      	ldr	r3, [sp, #8]
    11d4:	4798      	blx	r3
    11d6:	2800      	cmp	r0, #0
    11d8:	dbd2      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
    11da:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    11dc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    11de:	442e      	add	r6, r5
    11e0:	1b73      	subs	r3, r6, r5
    11e2:	2b00      	cmp	r3, #0
    11e4:	dc16      	bgt.n	1214 <CONFIG_MAIN_STACK_SIZE+0x214>
			OUTS(bps, bpe);
    11e6:	4643      	mov	r3, r8
    11e8:	4652      	mov	r2, sl
    11ea:	4659      	mov	r1, fp
    11ec:	9802      	ldr	r0, [sp, #8]
    11ee:	f007 f885 	bl	82fc <outs>
    11f2:	2800      	cmp	r0, #0
    11f4:	dbc4      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
    11f6:	4405      	add	r5, r0
		while (width > 0) {
    11f8:	44a9      	add	r9, r5
    11fa:	eba9 0305 	sub.w	r3, r9, r5
    11fe:	2b00      	cmp	r3, #0
    1200:	f77f ae7c 	ble.w	efc <cbvprintf+0x454>
			OUTC(' ');
    1204:	4659      	mov	r1, fp
    1206:	2020      	movs	r0, #32
    1208:	9b02      	ldr	r3, [sp, #8]
    120a:	4798      	blx	r3
    120c:	2800      	cmp	r0, #0
    120e:	dbb7      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
    1210:	3501      	adds	r5, #1
			--width;
    1212:	e7f2      	b.n	11fa <CONFIG_MAIN_STACK_SIZE+0x1fa>
				OUTC('0');
    1214:	4659      	mov	r1, fp
    1216:	2030      	movs	r0, #48	; 0x30
    1218:	9b02      	ldr	r3, [sp, #8]
    121a:	4798      	blx	r3
    121c:	2800      	cmp	r0, #0
    121e:	dbaf      	blt.n	1180 <CONFIG_MAIN_STACK_SIZE+0x180>
    1220:	3501      	adds	r5, #1
    1222:	e7dd      	b.n	11e0 <CONFIG_MAIN_STACK_SIZE+0x1e0>
    1224:	0000900b 	.word	0x0000900b

00001228 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    1228:	4604      	mov	r4, r0
    122a:	b508      	push	{r3, lr}
	__asm__ volatile(
    122c:	f04f 0220 	mov.w	r2, #32
    1230:	f3ef 8311 	mrs	r3, BASEPRI
    1234:	f382 8811 	msr	BASEPRI, r2
    1238:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    123c:	f007 f8f7 	bl	842e <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    1240:	4620      	mov	r0, r4
    1242:	f001 fb61 	bl	2908 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1246:	4803      	ldr	r0, [pc, #12]	; (1254 <sys_reboot+0x2c>)
    1248:	f006 ffa2 	bl	8190 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    124c:	f001 f82c 	bl	22a8 <arch_cpu_idle>
    1250:	e7fc      	b.n	124c <sys_reboot+0x24>
    1252:	bf00      	nop
    1254:	0000900c 	.word	0x0000900c

00001258 <nordicsemi_nrf91_init>:
    1258:	f04f 0220 	mov.w	r2, #32
    125c:	f3ef 8311 	mrs	r3, BASEPRI
    1260:	f382 8811 	msr	BASEPRI, r2
    1264:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1268:	2101      	movs	r1, #1
    126a:	4a04      	ldr	r2, [pc, #16]	; (127c <nordicsemi_nrf91_init+0x24>)
    126c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    1270:	f383 8811 	msr	BASEPRI, r3
    1274:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1278:	2000      	movs	r0, #0
    127a:	4770      	bx	lr
    127c:	50039000 	.word	0x50039000

00001280 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1280:	b120      	cbz	r0, 128c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1282:	4b03      	ldr	r3, [pc, #12]	; (1290 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1284:	0180      	lsls	r0, r0, #6
    1286:	f043 0301 	orr.w	r3, r3, #1
    128a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    128c:	4770      	bx	lr
    128e:	bf00      	nop
    1290:	00008c10 	.word	0x00008c10

00001294 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    1294:	b084      	sub	sp, #16
    1296:	ab04      	add	r3, sp, #16
    1298:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    129c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    12a0:	2b06      	cmp	r3, #6
    12a2:	d107      	bne.n	12b4 <pm_power_state_set+0x20>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    12a4:	2201      	movs	r2, #1
    12a6:	4b04      	ldr	r3, [pc, #16]	; (12b8 <pm_power_state_set+0x24>)
    12a8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    12ac:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
    12b0:	bf20      	wfe
    while (true)
    12b2:	e7fd      	b.n	12b0 <pm_power_state_set+0x1c>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    12b4:	b004      	add	sp, #16
    12b6:	4770      	bx	lr
    12b8:	50004000 	.word	0x50004000

000012bc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    12bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12be:	4605      	mov	r5, r0
	__asm__ volatile(
    12c0:	f04f 0320 	mov.w	r3, #32
    12c4:	f3ef 8611 	mrs	r6, BASEPRI
    12c8:	f383 8811 	msr	BASEPRI, r3
    12cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    12d0:	4819      	ldr	r0, [pc, #100]	; (1338 <pm_state_notify+0x7c>)
    12d2:	f002 fd1f 	bl	3d14 <z_spin_lock_valid>
    12d6:	b940      	cbnz	r0, 12ea <pm_state_notify+0x2e>
    12d8:	4918      	ldr	r1, [pc, #96]	; (133c <pm_state_notify+0x80>)
    12da:	4819      	ldr	r0, [pc, #100]	; (1340 <pm_state_notify+0x84>)
    12dc:	2281      	movs	r2, #129	; 0x81
    12de:	f006 ff57 	bl	8190 <printk>
    12e2:	2181      	movs	r1, #129	; 0x81
    12e4:	4815      	ldr	r0, [pc, #84]	; (133c <pm_state_notify+0x80>)
    12e6:	f007 f81f 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    12ea:	4813      	ldr	r0, [pc, #76]	; (1338 <pm_state_notify+0x7c>)
    12ec:	f002 fd2e 	bl	3d4c <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    12f0:	4b14      	ldr	r3, [pc, #80]	; (1344 <pm_state_notify+0x88>)
    12f2:	681c      	ldr	r4, [r3, #0]
    12f4:	2c00      	cmp	r4, #0
    12f6:	bf38      	it	cc
    12f8:	2400      	movcc	r4, #0
    12fa:	b15c      	cbz	r4, 1314 <pm_state_notify+0x58>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    12fc:	4f12      	ldr	r7, [pc, #72]	; (1348 <pm_state_notify+0x8c>)
			callback = notifier->state_exit;
    12fe:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1302:	2d00      	cmp	r5, #0
    1304:	bf08      	it	eq
    1306:	4613      	moveq	r3, r2
		if (callback) {
    1308:	b10b      	cbz	r3, 130e <pm_state_notify+0x52>
			callback(z_power_state.state);
    130a:	7838      	ldrb	r0, [r7, #0]
    130c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    130e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1310:	2c00      	cmp	r4, #0
    1312:	d1f4      	bne.n	12fe <pm_state_notify+0x42>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1314:	4808      	ldr	r0, [pc, #32]	; (1338 <pm_state_notify+0x7c>)
    1316:	f002 fd0b 	bl	3d30 <z_spin_unlock_valid>
    131a:	b940      	cbnz	r0, 132e <pm_state_notify+0x72>
    131c:	4907      	ldr	r1, [pc, #28]	; (133c <pm_state_notify+0x80>)
    131e:	4808      	ldr	r0, [pc, #32]	; (1340 <pm_state_notify+0x84>)
    1320:	22ac      	movs	r2, #172	; 0xac
    1322:	f006 ff35 	bl	8190 <printk>
    1326:	21ac      	movs	r1, #172	; 0xac
    1328:	4804      	ldr	r0, [pc, #16]	; (133c <pm_state_notify+0x80>)
    132a:	f006 fffd 	bl	8328 <assert_post_action>
	__asm__ volatile(
    132e:	f386 8811 	msr	BASEPRI, r6
    1332:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1338:	20000228 	.word	0x20000228
    133c:	00008fe0 	.word	0x00008fe0
    1340:	00008fa6 	.word	0x00008fa6
    1344:	2000022c 	.word	0x2000022c
    1348:	20000234 	.word	0x20000234

0000134c <pm_system_resume>:

void pm_system_resume(void)
{
    134c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    134e:	4b0f      	ldr	r3, [pc, #60]	; (138c <pm_system_resume+0x40>)
    1350:	681a      	ldr	r2, [r3, #0]
    1352:	b9ba      	cbnz	r2, 1384 <pm_system_resume+0x38>
		post_ops_done = 1;
    1354:	2201      	movs	r2, #1
    1356:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    1358:	4a0d      	ldr	r2, [pc, #52]	; (1390 <pm_system_resume+0x44>)
    135a:	ab01      	add	r3, sp, #4
    135c:	ca07      	ldmia	r2, {r0, r1, r2}
    135e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    1362:	4a0c      	ldr	r2, [pc, #48]	; (1394 <pm_system_resume+0x48>)
    1364:	b14a      	cbz	r2, 137a <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
    1366:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    136a:	f006 ffe5 	bl	8338 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    136e:	2000      	movs	r0, #0
	}
}
    1370:	b005      	add	sp, #20
    1372:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
    1376:	f7ff bfa1 	b.w	12bc <pm_state_notify>
    137a:	f382 8811 	msr	BASEPRI, r2
    137e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1382:	e7f4      	b.n	136e <pm_system_resume+0x22>
}
    1384:	b005      	add	sp, #20
    1386:	f85d fb04 	ldr.w	pc, [sp], #4
    138a:	bf00      	nop
    138c:	20000004 	.word	0x20000004
    1390:	20000234 	.word	0x20000234
    1394:	00008339 	.word	0x00008339

00001398 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    1398:	b5f0      	push	{r4, r5, r6, r7, lr}
    139a:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    139c:	466e      	mov	r6, sp
    139e:	4c21      	ldr	r4, [pc, #132]	; (1424 <pm_system_suspend+0x8c>)
    13a0:	4601      	mov	r1, r0
{
    13a2:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    13a4:	4630      	mov	r0, r6
    13a6:	f006 ffdf 	bl	8368 <pm_policy_next_state>
    13aa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    13ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    13b2:	7820      	ldrb	r0, [r4, #0]
    13b4:	b398      	cbz	r0, 141e <pm_system_suspend+0x86>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    13b6:	2000      	movs	r0, #0
    13b8:	4b1b      	ldr	r3, [pc, #108]	; (1428 <pm_system_suspend+0x90>)
    13ba:	6018      	str	r0, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    13bc:	1c6b      	adds	r3, r5, #1
    13be:	d019      	beq.n	13f4 <pm_system_suspend+0x5c>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
    13c0:	4291      	cmp	r1, r2
    13c2:	d208      	bcs.n	13d6 <pm_system_suspend+0x3e>
    13c4:	4919      	ldr	r1, [pc, #100]	; (142c <pm_system_suspend+0x94>)
    13c6:	481a      	ldr	r0, [pc, #104]	; (1430 <pm_system_suspend+0x98>)
    13c8:	22cb      	movs	r2, #203	; 0xcb
    13ca:	f006 fee1 	bl	8190 <printk>
    13ce:	21cb      	movs	r1, #203	; 0xcb
    13d0:	4816      	ldr	r0, [pc, #88]	; (142c <pm_system_suspend+0x94>)
    13d2:	f006 ffa9 	bl	8328 <assert_post_action>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    13d6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    13da:	2100      	movs	r1, #0
    13dc:	68a7      	ldr	r7, [r4, #8]
    13de:	4815      	ldr	r0, [pc, #84]	; (1434 <pm_system_suspend+0x9c>)
    13e0:	2300      	movs	r3, #0
    13e2:	fbe6 0107 	umlal	r0, r1, r6, r7
    13e6:	4a14      	ldr	r2, [pc, #80]	; (1438 <pm_system_suspend+0xa0>)
    13e8:	f7fe ff28 	bl	23c <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    13ec:	2101      	movs	r1, #1
    13ee:	1a28      	subs	r0, r5, r0
    13f0:	f003 ffea 	bl	53c8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    13f4:	f002 ff8e 	bl	4314 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    13f8:	2001      	movs	r0, #1
    13fa:	f7ff ff5f 	bl	12bc <pm_state_notify>
	pm_state_set(z_power_state);
    13fe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    1402:	ab05      	add	r3, sp, #20
    1404:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    1408:	4a0c      	ldr	r2, [pc, #48]	; (143c <pm_system_suspend+0xa4>)
    140a:	b11a      	cbz	r2, 1414 <pm_system_suspend+0x7c>
		pm_power_state_set(info);
    140c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1410:	f7ff ff40 	bl	1294 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    1414:	f7ff ff9a 	bl	134c <pm_system_resume>
	k_sched_unlock();
    1418:	f003 f964 	bl	46e4 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    141c:	7820      	ldrb	r0, [r4, #0]
}
    141e:	b009      	add	sp, #36	; 0x24
    1420:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1422:	bf00      	nop
    1424:	20000234 	.word	0x20000234
    1428:	20000004 	.word	0x20000004
    142c:	00009039 	.word	0x00009039
    1430:	00008fa6 	.word	0x00008fa6
    1434:	000f423f 	.word	0x000f423f
    1438:	000f4240 	.word	0x000f4240
    143c:	00001295 	.word	0x00001295

00001440 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1440:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1442:	4807      	ldr	r0, [pc, #28]	; (1460 <uart_console_init+0x20>)
    1444:	f002 f970 	bl	3728 <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    1448:	4c06      	ldr	r4, [pc, #24]	; (1464 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    144a:	4b07      	ldr	r3, [pc, #28]	; (1468 <uart_console_init+0x28>)
    144c:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    144e:	4620      	mov	r0, r4
    1450:	f001 fd20 	bl	2e94 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1454:	4620      	mov	r0, r4
    1456:	f7ff f8ab 	bl	5b0 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    145a:	2000      	movs	r0, #0
    145c:	bd10      	pop	{r4, pc}
    145e:	bf00      	nop
    1460:	00009064 	.word	0x00009064
    1464:	0000146d 	.word	0x0000146d
    1468:	20000240 	.word	0x20000240

0000146c <console_out>:
	if ('\n' == c) {
    146c:	280a      	cmp	r0, #10
{
    146e:	b538      	push	{r3, r4, r5, lr}
    1470:	4604      	mov	r4, r0
    1472:	4d07      	ldr	r5, [pc, #28]	; (1490 <console_out+0x24>)
	if ('\n' == c) {
    1474:	d104      	bne.n	1480 <console_out+0x14>
    1476:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1478:	6883      	ldr	r3, [r0, #8]
    147a:	210d      	movs	r1, #13
    147c:	685b      	ldr	r3, [r3, #4]
    147e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    1480:	6828      	ldr	r0, [r5, #0]
    1482:	6883      	ldr	r3, [r0, #8]
    1484:	b2e1      	uxtb	r1, r4
    1486:	685b      	ldr	r3, [r3, #4]
    1488:	4798      	blx	r3
}
    148a:	4620      	mov	r0, r4
    148c:	bd38      	pop	{r3, r4, r5, pc}
    148e:	bf00      	nop
    1490:	20000240 	.word	0x20000240

00001494 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1498:	4c0e      	ldr	r4, [pc, #56]	; (14d4 <onoff_start+0x40>)
{
    149a:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
    149c:	1b05      	subs	r5, r0, r4
    149e:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    14a2:	250c      	movs	r5, #12
    14a4:	435d      	muls	r5, r3
    14a6:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
    14aa:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    14ac:	4420      	add	r0, r4
    14ae:	2140      	movs	r1, #64	; 0x40
    14b0:	f006 ff5f 	bl	8372 <set_starting_state>
	if (err < 0) {
    14b4:	1e01      	subs	r1, r0, #0
    14b6:	db08      	blt.n	14ca <onoff_start+0x36>
	subdata->cb = cb;
    14b8:	4b07      	ldr	r3, [pc, #28]	; (14d8 <onoff_start+0x44>)
    14ba:	442c      	add	r4, r5
	subdata->user_data = user_data;
    14bc:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    14c0:	4b06      	ldr	r3, [pc, #24]	; (14dc <onoff_start+0x48>)
    14c2:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    14c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    14c8:	4718      	bx	r3
		notify(mgr, err);
    14ca:	4638      	mov	r0, r7
    14cc:	4633      	mov	r3, r6
}
    14ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    14d2:	4718      	bx	r3
    14d4:	20000258 	.word	0x20000258
    14d8:	000083d5 	.word	0x000083d5
    14dc:	00008c2c 	.word	0x00008c2c

000014e0 <get_status>:
{
    14e0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    14e2:	b2cc      	uxtb	r4, r1
    14e4:	2c01      	cmp	r4, #1
{
    14e6:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    14e8:	d908      	bls.n	14fc <get_status+0x1c>
    14ea:	4908      	ldr	r1, [pc, #32]	; (150c <get_status+0x2c>)
    14ec:	4808      	ldr	r0, [pc, #32]	; (1510 <get_status+0x30>)
    14ee:	227e      	movs	r2, #126	; 0x7e
    14f0:	f006 fe4e 	bl	8190 <printk>
    14f4:	217e      	movs	r1, #126	; 0x7e
    14f6:	4805      	ldr	r0, [pc, #20]	; (150c <get_status+0x2c>)
    14f8:	f006 ff16 	bl	8328 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    14fc:	210c      	movs	r1, #12
    14fe:	692b      	ldr	r3, [r5, #16]
    1500:	fb04 3401 	mla	r4, r4, r1, r3
    1504:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    1506:	f000 0007 	and.w	r0, r0, #7
    150a:	bd38      	pop	{r3, r4, r5, pc}
    150c:	0000906b 	.word	0x0000906b
    1510:	00008fa6 	.word	0x00008fa6

00001514 <stop>:
{
    1514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1516:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    1518:	2c01      	cmp	r4, #1
{
    151a:	4605      	mov	r5, r0
    151c:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    151e:	6907      	ldr	r7, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    1520:	d90a      	bls.n	1538 <stop+0x24>
    1522:	4918      	ldr	r1, [pc, #96]	; (1584 <stop+0x70>)
    1524:	4818      	ldr	r0, [pc, #96]	; (1588 <stop+0x74>)
    1526:	f240 1253 	movw	r2, #339	; 0x153
    152a:	f006 fe31 	bl	8190 <printk>
    152e:	f240 1153 	movw	r1, #339	; 0x153
    1532:	4814      	ldr	r0, [pc, #80]	; (1584 <stop+0x70>)
    1534:	f006 fef8 	bl	8328 <assert_post_action>
	__asm__ volatile(
    1538:	f04f 0320 	mov.w	r3, #32
    153c:	f3ef 8211 	mrs	r2, BASEPRI
    1540:	f383 8811 	msr	BASEPRI, r3
    1544:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    1548:	230c      	movs	r3, #12
    154a:	fb03 7104 	mla	r1, r3, r4, r7
    154e:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    1550:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    1554:	d001      	beq.n	155a <stop+0x46>
    1556:	428e      	cmp	r6, r1
    1558:	d111      	bne.n	157e <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    155a:	2101      	movs	r1, #1
	int err = 0;
    155c:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    155e:	fb03 7304 	mla	r3, r3, r4, r7
    1562:	6499      	str	r1, [r3, #72]	; 0x48
	__asm__ volatile(
    1564:	f382 8811 	msr	BASEPRI, r2
    1568:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    156c:	b930      	cbnz	r0, 157c <stop+0x68>
	get_sub_config(dev, type)->stop();
    156e:	230c      	movs	r3, #12
    1570:	6869      	ldr	r1, [r5, #4]
    1572:	fb03 1404 	mla	r4, r3, r4, r1
    1576:	6863      	ldr	r3, [r4, #4]
    1578:	4798      	blx	r3
	return 0;
    157a:	2000      	movs	r0, #0
}
    157c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    157e:	f04f 30ff 	mov.w	r0, #4294967295
    1582:	e7ef      	b.n	1564 <stop+0x50>
    1584:	0000906b 	.word	0x0000906b
    1588:	00008fa6 	.word	0x00008fa6

0000158c <onoff_stop>:
{
    158c:	b570      	push	{r4, r5, r6, lr}
    158e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    1590:	4906      	ldr	r1, [pc, #24]	; (15ac <onoff_stop+0x20>)
{
    1592:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    1594:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1596:	1149      	asrs	r1, r1, #5
    1598:	2240      	movs	r2, #64	; 0x40
    159a:	4805      	ldr	r0, [pc, #20]	; (15b0 <onoff_stop+0x24>)
    159c:	f7ff ffba 	bl	1514 <stop>
	notify(mgr, res);
    15a0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    15a2:	4601      	mov	r1, r0
	notify(mgr, res);
    15a4:	4620      	mov	r0, r4
}
    15a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    15aa:	4718      	bx	r3
    15ac:	20000258 	.word	0x20000258
    15b0:	000088d4 	.word	0x000088d4

000015b4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    15b4:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    15b6:	2200      	movs	r2, #0
    15b8:	2101      	movs	r1, #1
{
    15ba:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    15bc:	2005      	movs	r0, #5
    15be:	f000 fe17 	bl	21f0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    15c2:	2005      	movs	r0, #5
    15c4:	f000 fdf6 	bl	21b4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    15c8:	480f      	ldr	r0, [pc, #60]	; (1608 <clk_init+0x54>)
    15ca:	f001 ff65 	bl	3498 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    15ce:	4b0f      	ldr	r3, [pc, #60]	; (160c <clk_init+0x58>)
    15d0:	4298      	cmp	r0, r3
    15d2:	d115      	bne.n	1600 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    15d4:	f001 ff80 	bl	34d8 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    15d8:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    15da:	490d      	ldr	r1, [pc, #52]	; (1610 <clk_init+0x5c>)
    15dc:	4630      	mov	r0, r6
    15de:	f006 fe25 	bl	822c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    15e2:	2800      	cmp	r0, #0
    15e4:	db0b      	blt.n	15fe <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    15e6:	2501      	movs	r5, #1
    15e8:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    15ea:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    15ec:	4908      	ldr	r1, [pc, #32]	; (1610 <clk_init+0x5c>)
    15ee:	f104 0020 	add.w	r0, r4, #32
    15f2:	f006 fe1b 	bl	822c <onoff_manager_init>
		if (err < 0) {
    15f6:	2800      	cmp	r0, #0
    15f8:	db01      	blt.n	15fe <clk_init+0x4a>
	}

	return 0;
    15fa:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    15fc:	6565      	str	r5, [r4, #84]	; 0x54
}
    15fe:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1600:	f06f 0004 	mvn.w	r0, #4
    1604:	e7fb      	b.n	15fe <clk_init+0x4a>
    1606:	bf00      	nop
    1608:	00001649 	.word	0x00001649
    160c:	0bad0000 	.word	0x0bad0000
    1610:	00008c44 	.word	0x00008c44

00001614 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1614:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1616:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    1618:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    161a:	434b      	muls	r3, r1
    161c:	4808      	ldr	r0, [pc, #32]	; (1640 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    161e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1620:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    1622:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
    1624:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    1628:	4418      	add	r0, r3
	sub_data->cb = NULL;
    162a:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    162c:	f006 febf 	bl	83ae <set_on_state>
	if (callback) {
    1630:	b12d      	cbz	r5, 163e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1632:	4632      	mov	r2, r6
    1634:	462b      	mov	r3, r5
}
    1636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    163a:	4802      	ldr	r0, [pc, #8]	; (1644 <clkstarted_handle.constprop.0+0x30>)
    163c:	4718      	bx	r3
}
    163e:	bd70      	pop	{r4, r5, r6, pc}
    1640:	20000258 	.word	0x20000258
    1644:	000088d4 	.word	0x000088d4

00001648 <clock_event_handler>:
	switch (event) {
    1648:	2801      	cmp	r0, #1
{
    164a:	b508      	push	{r3, lr}
	switch (event) {
    164c:	d006      	beq.n	165c <clock_event_handler+0x14>
    164e:	2803      	cmp	r0, #3
    1650:	d008      	beq.n	1664 <clock_event_handler+0x1c>
    1652:	b9a0      	cbnz	r0, 167e <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1654:	4b0f      	ldr	r3, [pc, #60]	; (1694 <clock_event_handler+0x4c>)
    1656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    1658:	075b      	lsls	r3, r3, #29
    165a:	d119      	bne.n	1690 <clock_event_handler+0x48>
}
    165c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1660:	f7ff bfd8 	b.w	1614 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    1664:	490c      	ldr	r1, [pc, #48]	; (1698 <clock_event_handler+0x50>)
    1666:	f240 2266 	movw	r2, #614	; 0x266
    166a:	480c      	ldr	r0, [pc, #48]	; (169c <clock_event_handler+0x54>)
    166c:	f006 fd90 	bl	8190 <printk>
    1670:	f240 2166 	movw	r1, #614	; 0x266
}
    1674:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    1678:	4807      	ldr	r0, [pc, #28]	; (1698 <clock_event_handler+0x50>)
    167a:	f006 be55 	b.w	8328 <assert_post_action>
    167e:	4906      	ldr	r1, [pc, #24]	; (1698 <clock_event_handler+0x50>)
    1680:	f240 226a 	movw	r2, #618	; 0x26a
    1684:	4805      	ldr	r0, [pc, #20]	; (169c <clock_event_handler+0x54>)
    1686:	f006 fd83 	bl	8190 <printk>
    168a:	f240 216a 	movw	r1, #618	; 0x26a
    168e:	e7f1      	b.n	1674 <clock_event_handler+0x2c>
}
    1690:	bd08      	pop	{r3, pc}
    1692:	bf00      	nop
    1694:	20000258 	.word	0x20000258
    1698:	0000906b 	.word	0x0000906b
    169c:	00008fa6 	.word	0x00008fa6

000016a0 <generic_hfclk_start>:
{
    16a0:	b508      	push	{r3, lr}
	__asm__ volatile(
    16a2:	f04f 0320 	mov.w	r3, #32
    16a6:	f3ef 8111 	mrs	r1, BASEPRI
    16aa:	f383 8811 	msr	BASEPRI, r3
    16ae:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    16b2:	4a12      	ldr	r2, [pc, #72]	; (16fc <generic_hfclk_start+0x5c>)
    16b4:	6813      	ldr	r3, [r2, #0]
    16b6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    16ba:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    16be:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    16c0:	d00c      	beq.n	16dc <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    16c2:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    16c6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    16ca:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    16ce:	f013 0301 	ands.w	r3, r3, #1
    16d2:	d003      	beq.n	16dc <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    16d4:	480a      	ldr	r0, [pc, #40]	; (1700 <generic_hfclk_start+0x60>)
    16d6:	f006 fe6a 	bl	83ae <set_on_state>
			already_started = true;
    16da:	2301      	movs	r3, #1
	__asm__ volatile(
    16dc:	f381 8811 	msr	BASEPRI, r1
    16e0:	f3bf 8f6f 	isb	sy
	if (already_started) {
    16e4:	b123      	cbz	r3, 16f0 <generic_hfclk_start+0x50>
}
    16e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    16ea:	2000      	movs	r0, #0
    16ec:	f7ff bf92 	b.w	1614 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    16f0:	2001      	movs	r0, #1
}
    16f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    16f6:	f001 bf0d 	b.w	3514 <nrfx_clock_start>
    16fa:	bf00      	nop
    16fc:	200002b0 	.word	0x200002b0
    1700:	200002a0 	.word	0x200002a0

00001704 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1704:	4b07      	ldr	r3, [pc, #28]	; (1724 <generic_hfclk_stop+0x20>)
    1706:	e8d3 2fef 	ldaex	r2, [r3]
    170a:	f022 0102 	bic.w	r1, r2, #2
    170e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1712:	2800      	cmp	r0, #0
    1714:	d1f7      	bne.n	1706 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1716:	07d3      	lsls	r3, r2, #31
    1718:	d402      	bmi.n	1720 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    171a:	2001      	movs	r0, #1
    171c:	f001 bf4a 	b.w	35b4 <nrfx_clock_stop>
}
    1720:	4770      	bx	lr
    1722:	bf00      	nop
    1724:	200002b0 	.word	0x200002b0

00001728 <api_blocking_start>:
{
    1728:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    172a:	2200      	movs	r2, #0
    172c:	2301      	movs	r3, #1
    172e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1732:	466b      	mov	r3, sp
    1734:	4a08      	ldr	r2, [pc, #32]	; (1758 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1736:	f8cd d000 	str.w	sp, [sp]
    173a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    173e:	f006 fe5b 	bl	83f8 <api_start>
	if (err < 0) {
    1742:	2800      	cmp	r0, #0
    1744:	db05      	blt.n	1752 <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    174a:	2300      	movs	r3, #0
    174c:	4668      	mov	r0, sp
    174e:	f002 fcd7 	bl	4100 <z_impl_k_sem_take>
}
    1752:	b005      	add	sp, #20
    1754:	f85d fb04 	ldr.w	pc, [sp], #4
    1758:	000083f3 	.word	0x000083f3

0000175c <z_nrf_clock_control_lf_on>:
{
    175c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1760:	2201      	movs	r2, #1
    1762:	4605      	mov	r5, r0
    1764:	4946      	ldr	r1, [pc, #280]	; (1880 <z_nrf_clock_control_lf_on+0x124>)
    1766:	e8d1 3fef 	ldaex	r3, [r1]
    176a:	e8c1 2fe0 	stlex	r0, r2, [r1]
    176e:	2800      	cmp	r0, #0
    1770:	d1f9      	bne.n	1766 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    1772:	b99b      	cbnz	r3, 179c <z_nrf_clock_control_lf_on+0x40>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1774:	4943      	ldr	r1, [pc, #268]	; (1884 <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    1776:	4844      	ldr	r0, [pc, #272]	; (1888 <z_nrf_clock_control_lf_on+0x12c>)
    1778:	604b      	str	r3, [r1, #4]
    177a:	60cb      	str	r3, [r1, #12]
    177c:	608a      	str	r2, [r1, #8]
    177e:	f7ff f90f 	bl	9a0 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    1782:	2800      	cmp	r0, #0
    1784:	da0a      	bge.n	179c <z_nrf_clock_control_lf_on+0x40>
    1786:	4941      	ldr	r1, [pc, #260]	; (188c <z_nrf_clock_control_lf_on+0x130>)
    1788:	4841      	ldr	r0, [pc, #260]	; (1890 <z_nrf_clock_control_lf_on+0x134>)
    178a:	f240 2226 	movw	r2, #550	; 0x226
    178e:	f006 fcff 	bl	8190 <printk>
    1792:	f240 2126 	movw	r1, #550	; 0x226
    1796:	483d      	ldr	r0, [pc, #244]	; (188c <z_nrf_clock_control_lf_on+0x130>)
    1798:	f006 fdc6 	bl	8328 <assert_post_action>
	switch (start_mode) {
    179c:	b3ad      	cbz	r5, 180a <z_nrf_clock_control_lf_on+0xae>
    179e:	1e6b      	subs	r3, r5, #1
    17a0:	2b01      	cmp	r3, #1
    17a2:	d859      	bhi.n	1858 <z_nrf_clock_control_lf_on+0xfc>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    17a4:	2d01      	cmp	r5, #1
    17a6:	d107      	bne.n	17b8 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    17a8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    17ac:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    17b0:	f003 0303 	and.w	r3, r3, #3
    17b4:	2b02      	cmp	r3, #2
    17b6:	d028      	beq.n	180a <z_nrf_clock_control_lf_on+0xae>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    17b8:	f007 f81a 	bl	87f0 <k_is_in_isr>
    17bc:	4604      	mov	r4, r0
    17be:	b918      	cbnz	r0, 17c8 <z_nrf_clock_control_lf_on+0x6c>
	return !z_sys_post_kernel;
    17c0:	4b34      	ldr	r3, [pc, #208]	; (1894 <z_nrf_clock_control_lf_on+0x138>)
	int key = isr_mode ? irq_lock() : 0;
    17c2:	781b      	ldrb	r3, [r3, #0]
    17c4:	2b00      	cmp	r3, #0
    17c6:	d154      	bne.n	1872 <z_nrf_clock_control_lf_on+0x116>
	__asm__ volatile(
    17c8:	f04f 0320 	mov.w	r3, #32
    17cc:	f3ef 8611 	mrs	r6, BASEPRI
    17d0:	f383 8811 	msr	BASEPRI, r3
    17d4:	f3bf 8f6f 	isb	sy
    17d8:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    17da:	4f2f      	ldr	r7, [pc, #188]	; (1898 <z_nrf_clock_control_lf_on+0x13c>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    17dc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 189c <z_nrf_clock_control_lf_on+0x140>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    17e0:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 18a0 <z_nrf_clock_control_lf_on+0x144>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    17e4:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    17e8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    17ec:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    17f0:	03d2      	lsls	r2, r2, #15
    17f2:	d50c      	bpl.n	180e <z_nrf_clock_control_lf_on+0xb2>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    17f4:	f003 0303 	and.w	r3, r3, #3
    17f8:	2b02      	cmp	r3, #2
    17fa:	d001      	beq.n	1800 <z_nrf_clock_control_lf_on+0xa4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    17fc:	2d01      	cmp	r5, #1
    17fe:	d106      	bne.n	180e <z_nrf_clock_control_lf_on+0xb2>
	if (isr_mode) {
    1800:	b324      	cbz	r4, 184c <z_nrf_clock_control_lf_on+0xf0>
	__asm__ volatile(
    1802:	f386 8811 	msr	BASEPRI, r6
    1806:	f3bf 8f6f 	isb	sy
}
    180a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    180e:	b1c4      	cbz	r4, 1842 <z_nrf_clock_control_lf_on+0xe6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1810:	4630      	mov	r0, r6
    1812:	f000 fd57 	bl	22c4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1816:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    181a:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    181e:	b2db      	uxtb	r3, r3
    1820:	2b01      	cmp	r3, #1
    1822:	d1df      	bne.n	17e4 <z_nrf_clock_control_lf_on+0x88>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1824:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    1826:	2900      	cmp	r1, #0
    1828:	d0dc      	beq.n	17e4 <z_nrf_clock_control_lf_on+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    182a:	2100      	movs	r1, #0
    182c:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    182e:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    1830:	2102      	movs	r1, #2
    1832:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    1836:	2220      	movs	r2, #32
    1838:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    183c:	f8c9 3000 	str.w	r3, [r9]
}
    1840:	e7d0      	b.n	17e4 <z_nrf_clock_control_lf_on+0x88>
	return z_impl_k_sleep(timeout);
    1842:	2100      	movs	r1, #0
    1844:	2021      	movs	r0, #33	; 0x21
    1846:	f003 fb5f 	bl	4f08 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    184a:	e7e4      	b.n	1816 <z_nrf_clock_control_lf_on+0xba>
    p_reg->INTENSET = mask;
    184c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1850:	2202      	movs	r2, #2
    1852:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1856:	e7d8      	b.n	180a <z_nrf_clock_control_lf_on+0xae>
		__ASSERT_NO_MSG(false);
    1858:	490c      	ldr	r1, [pc, #48]	; (188c <z_nrf_clock_control_lf_on+0x130>)
    185a:	480d      	ldr	r0, [pc, #52]	; (1890 <z_nrf_clock_control_lf_on+0x134>)
    185c:	f44f 720e 	mov.w	r2, #568	; 0x238
    1860:	f006 fc96 	bl	8190 <printk>
}
    1864:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    1868:	f44f 710e 	mov.w	r1, #568	; 0x238
    186c:	4807      	ldr	r0, [pc, #28]	; (188c <z_nrf_clock_control_lf_on+0x130>)
    186e:	f006 bd5b 	b.w	8328 <assert_post_action>
    p_reg->INTENCLR = mask;
    1872:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1876:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    1878:	4606      	mov	r6, r0
    187a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    187e:	e7ac      	b.n	17da <z_nrf_clock_control_lf_on+0x7e>
    1880:	200002b4 	.word	0x200002b4
    1884:	20000248 	.word	0x20000248
    1888:	20000278 	.word	0x20000278
    188c:	0000906b 	.word	0x0000906b
    1890:	00008fa6 	.word	0x00008fa6
    1894:	20001321 	.word	0x20001321
    1898:	50005104 	.word	0x50005104
    189c:	e000e100 	.word	0xe000e100
    18a0:	50005008 	.word	0x50005008

000018a4 <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
    18a4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
    18a6:	4c06      	ldr	r4, [pc, #24]	; (18c0 <sys_clock_isr+0x1c>)
    18a8:	4806      	ldr	r0, [pc, #24]	; (18c4 <sys_clock_isr+0x20>)
    18aa:	4621      	mov	r1, r4
    18ac:	2217      	movs	r2, #23
    18ae:	f006 fc6f 	bl	8190 <printk>
    18b2:	4620      	mov	r0, r4
}
    18b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
    18b8:	2117      	movs	r1, #23
    18ba:	f006 bd35 	b.w	8328 <assert_post_action>
    18be:	bf00      	nop
    18c0:	000090c2 	.word	0x000090c2
    18c4:	00008fa6 	.word	0x00008fa6

000018c8 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    18c8:	4a04      	ldr	r2, [pc, #16]	; (18dc <sys_clock_timeout_handler+0x14>)
    18ca:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    18cc:	1ac8      	subs	r0, r1, r3
    18ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    18d2:	4403      	add	r3, r0
    18d4:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    18d6:	f003 bdb5 	b.w	5444 <sys_clock_announce>
    18da:	bf00      	nop
    18dc:	200002c8 	.word	0x200002c8

000018e0 <set_absolute_alarm>:
{
    18e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    18e4:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    18e8:	f04f 0900 	mov.w	r9, #0
    18ec:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    18ee:	f100 0450 	add.w	r4, r0, #80	; 0x50
    18f2:	f106 2650 	add.w	r6, r6, #1342197760	; 0x50005000
    18f6:	00a4      	lsls	r4, r4, #2
    18f8:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
    18fc:	b2a4      	uxth	r4, r4
    18fe:	f104 2450 	add.w	r4, r4, #1342197760	; 0x50005000
    return p_reg->CC[ch];
    1902:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    1906:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1974 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    190a:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    190e:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1912:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    1914:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1918:	eba3 030a 	sub.w	r3, r3, sl
    191c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    1920:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    1924:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    1926:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    192a:	d102      	bne.n	1932 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    192c:	2013      	movs	r0, #19
    192e:	f006 ff99 	bl	8864 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    1932:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    1936:	1aab      	subs	r3, r5, r2
    1938:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    193c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    1940:	bf88      	it	hi
    1942:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1944:	f8c4 9000 	str.w	r9, [r4]
    1948:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    194a:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    194e:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    1952:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    1956:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    195a:	459a      	cmp	sl, r3
    195c:	d006      	beq.n	196c <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    195e:	1aeb      	subs	r3, r5, r3
    1960:	3b02      	subs	r3, #2
    1962:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    1966:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    196a:	d801      	bhi.n	1970 <set_absolute_alarm+0x90>
}
    196c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    1970:	462b      	mov	r3, r5
    1972:	e7cf      	b.n	1914 <set_absolute_alarm+0x34>
    1974:	50015000 	.word	0x50015000

00001978 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    1978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    197a:	2600      	movs	r6, #0
    197c:	4c13      	ldr	r4, [pc, #76]	; (19cc <rtc_nrf_isr+0x54>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    197e:	4f14      	ldr	r7, [pc, #80]	; (19d0 <rtc_nrf_isr+0x58>)
    1980:	2000      	movs	r0, #0
    1982:	6825      	ldr	r5, [r4, #0]
    return p_reg->INTENSET & mask;
    1984:	4b13      	ldr	r3, [pc, #76]	; (19d4 <rtc_nrf_isr+0x5c>)
    1986:	b106      	cbz	r6, 198a <rtc_nrf_isr+0x12>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    1988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    198a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    198e:	03d2      	lsls	r2, r2, #15
    1990:	d5fa      	bpl.n	1988 <rtc_nrf_isr+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1992:	683a      	ldr	r2, [r7, #0]
    1994:	2a00      	cmp	r2, #0
    1996:	d0f7      	beq.n	1988 <rtc_nrf_isr+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1998:	603e      	str	r6, [r7, #0]
    199a:	683a      	ldr	r2, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    199c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    19a0:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    return p_reg->CC[ch];
    19a4:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
     return p_reg->COUNTER;
    19a8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    19ac:	2601      	movs	r6, #1
	return (a - b) & COUNTER_MAX;
    19ae:	1a53      	subs	r3, r2, r1
    19b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				cc_val = now;
    19b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    19b8:	bf88      	it	hi
    19ba:	4611      	movhi	r1, r2
			if (handler) {
    19bc:	b11d      	cbz	r5, 19c6 <rtc_nrf_isr+0x4e>
				handler(chan, cc_val,
    19be:	6862      	ldr	r2, [r4, #4]
    19c0:	6020      	str	r0, [r4, #0]
    19c2:	47a8      	blx	r5
    19c4:	e7dc      	b.n	1980 <rtc_nrf_isr+0x8>
    19c6:	6025      	str	r5, [r4, #0]
}
    19c8:	e7de      	b.n	1988 <rtc_nrf_isr+0x10>
    19ca:	bf00      	nop
    19cc:	200002bc 	.word	0x200002bc
    19d0:	50015140 	.word	0x50015140
    19d4:	50015000 	.word	0x50015000

000019d8 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    19d8:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    19da:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    19dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    19e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    19e4:	4d0d      	ldr	r5, [pc, #52]	; (1a1c <sys_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    19e6:	2101      	movs	r1, #1
    19e8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    19ec:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    19f0:	4b0b      	ldr	r3, [pc, #44]	; (1a20 <sys_clock_driver_init+0x48>)
    19f2:	2015      	movs	r0, #21
    19f4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    19f8:	4622      	mov	r2, r4
    19fa:	f000 fbf9 	bl	21f0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    19fe:	2015      	movs	r0, #21
    1a00:	f000 fbd8 	bl	21b4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1a04:	2301      	movs	r3, #1
    1a06:	4a07      	ldr	r2, [pc, #28]	; (1a24 <sys_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    1a08:	2002      	movs	r0, #2
    1a0a:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    1a0c:	4a06      	ldr	r2, [pc, #24]	; (1a28 <sys_clock_driver_init+0x50>)
    1a0e:	602b      	str	r3, [r5, #0]
    1a10:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    1a12:	f7ff fea3 	bl	175c <z_nrf_clock_control_lf_on>

	return 0;
}
    1a16:	4620      	mov	r0, r4
    1a18:	bd38      	pop	{r3, r4, r5, pc}
    1a1a:	bf00      	nop
    1a1c:	50015000 	.word	0x50015000
    1a20:	e000e100 	.word	0xe000e100
    1a24:	50015008 	.word	0x50015008
    1a28:	200002c4 	.word	0x200002c4

00001a2c <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1a2c:	4b13      	ldr	r3, [pc, #76]	; (1a7c <sys_clock_set_timeout+0x50>)
    1a2e:	f1b0 3fff 	cmp.w	r0, #4294967295
    1a32:	bf08      	it	eq
    1a34:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    1a36:	3801      	subs	r0, #1
    1a38:	2800      	cmp	r0, #0
    1a3a:	dd1c      	ble.n	1a76 <sys_clock_set_timeout+0x4a>
    1a3c:	4298      	cmp	r0, r3
    1a3e:	bfa8      	it	ge
    1a40:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    1a42:	4b0f      	ldr	r3, [pc, #60]	; (1a80 <sys_clock_set_timeout+0x54>)
    1a44:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    1a48:	4b0e      	ldr	r3, [pc, #56]	; (1a84 <sys_clock_set_timeout+0x58>)
    1a4a:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    1a4c:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    1a4e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    1a52:	bf18      	it	ne
    1a54:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
    1a56:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1a5a:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
    1a5c:	4a0a      	ldr	r2, [pc, #40]	; (1a88 <sys_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1a5e:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    1a60:	480a      	ldr	r0, [pc, #40]	; (1a8c <sys_clock_set_timeout+0x60>)
    1a62:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    1a64:	2000      	movs	r0, #0
    1a66:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    1a68:	4a04      	ldr	r2, [pc, #16]	; (1a7c <sys_clock_set_timeout+0x50>)
    1a6a:	4293      	cmp	r3, r2
    1a6c:	bf94      	ite	ls
    1a6e:	18c9      	addls	r1, r1, r3
    1a70:	1889      	addhi	r1, r1, r2
    1a72:	f7ff bf35 	b.w	18e0 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    1a76:	2000      	movs	r0, #0
    1a78:	e7e3      	b.n	1a42 <sys_clock_set_timeout+0x16>
    1a7a:	bf00      	nop
    1a7c:	007fffff 	.word	0x007fffff
    1a80:	50015000 	.word	0x50015000
    1a84:	200002c8 	.word	0x200002c8
    1a88:	200002bc 	.word	0x200002bc
    1a8c:	000018c9 	.word	0x000018c9

00001a90 <sys_clock_elapsed>:
    1a90:	4b04      	ldr	r3, [pc, #16]	; (1aa4 <sys_clock_elapsed+0x14>)
    1a92:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    1a96:	4b04      	ldr	r3, [pc, #16]	; (1aa8 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    1a98:	681b      	ldr	r3, [r3, #0]
    1a9a:	1ac0      	subs	r0, r0, r3
}
    1a9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1aa0:	4770      	bx	lr
    1aa2:	bf00      	nop
    1aa4:	50015000 	.word	0x50015000
    1aa8:	200002c8 	.word	0x200002c8

00001aac <__NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
    1aac:	2800      	cmp	r0, #0
    1aae:	db0d      	blt.n	1acc <__NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ab0:	2201      	movs	r2, #1
    1ab2:	0943      	lsrs	r3, r0, #5
    1ab4:	f000 001f 	and.w	r0, r0, #31
    1ab8:	fa02 f000 	lsl.w	r0, r2, r0
    1abc:	4a04      	ldr	r2, [pc, #16]	; (1ad0 <__NVIC_DisableIRQ+0x24>)
    1abe:	3320      	adds	r3, #32
    1ac0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1ac4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ac8:	f3bf 8f6f 	isb	sy
}
    1acc:	4770      	bx	lr
    1ace:	bf00      	nop
    1ad0:	e000e100 	.word	0xe000e100

00001ad4 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
    1ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    1ad6:	2800      	cmp	r0, #0
{
    1ad8:	461c      	mov	r4, r3
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    1ada:	bf14      	ite	ne
    1adc:	f44f 5300 	movne.w	r3, #8192	; 0x2000
    1ae0:	f44f 4300 	moveq.w	r3, #32768	; 0x8000

	__ASSERT_NO_MSG(end >= start);
    1ae4:	428a      	cmp	r2, r1
    1ae6:	d20b      	bcs.n	1b00 <config_regions+0x2c>
    1ae8:	2294      	movs	r2, #148	; 0x94
    1aea:	4927      	ldr	r1, [pc, #156]	; (1b88 <config_regions+0xb4>)
    1aec:	4827      	ldr	r0, [pc, #156]	; (1b8c <config_regions+0xb8>)
    1aee:	f006 fb4f 	bl	8190 <printk>
    1af2:	2194      	movs	r1, #148	; 0x94
    1af4:	4824      	ldr	r0, [pc, #144]	; (1b88 <config_regions+0xb4>)
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
	PRINT("\n");
}
    1af6:	b003      	add	sp, #12
    1af8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(end >= start);
    1afc:	f006 bc14 	b.w	8328 <assert_post_action>
	if (end <= start) {
    1b00:	d040      	beq.n	1b84 <config_regions+0xb0>
    1b02:	460d      	mov	r5, r1
    1b04:	4e22      	ldr	r6, [pc, #136]	; (1b90 <config_regions+0xbc>)
		if (ram) {
    1b06:	2800      	cmp	r0, #0
    1b08:	d039      	beq.n	1b7e <config_regions+0xaa>
			NRF_SPU->RAMREGION[i].PERM = perm;
    1b0a:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
	for (size_t i = start; i < end; i++) {
    1b0e:	3501      	adds	r5, #1
    1b10:	42aa      	cmp	r2, r5
			NRF_SPU->FLASHREGION[i].PERM = perm;
    1b12:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
    1b16:	d8f6      	bhi.n	1b06 <config_regions+0x32>
	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
    1b18:	fb02 f003 	mul.w	r0, r2, r3
    1b1c:	3a01      	subs	r2, #1
    1b1e:	434b      	muls	r3, r1
    1b20:	9000      	str	r0, [sp, #0]
    1b22:	481c      	ldr	r0, [pc, #112]	; (1b94 <config_regions+0xc0>)
    1b24:	f006 fb34 	bl	8190 <printk>
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
    1b28:	4b1b      	ldr	r3, [pc, #108]	; (1b98 <config_regions+0xc4>)
    1b2a:	f014 0f10 	tst.w	r4, #16
    1b2e:	491b      	ldr	r1, [pc, #108]	; (1b9c <config_regions+0xc8>)
    1b30:	481b      	ldr	r0, [pc, #108]	; (1ba0 <config_regions+0xcc>)
    1b32:	bf08      	it	eq
    1b34:	4619      	moveq	r1, r3
    1b36:	f006 fb2b 	bl	8190 <printk>
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
    1b3a:	f014 0f04 	tst.w	r4, #4
    1b3e:	bf14      	ite	ne
    1b40:	2172      	movne	r1, #114	; 0x72
    1b42:	212d      	moveq	r1, #45	; 0x2d
    1b44:	4817      	ldr	r0, [pc, #92]	; (1ba4 <config_regions+0xd0>)
    1b46:	f006 fb23 	bl	8190 <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
    1b4a:	f014 0f02 	tst.w	r4, #2
    1b4e:	bf14      	ite	ne
    1b50:	2177      	movne	r1, #119	; 0x77
    1b52:	212d      	moveq	r1, #45	; 0x2d
    1b54:	4813      	ldr	r0, [pc, #76]	; (1ba4 <config_regions+0xd0>)
    1b56:	f006 fb1b 	bl	8190 <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
    1b5a:	f014 0f01 	tst.w	r4, #1
    1b5e:	bf0c      	ite	eq
    1b60:	212d      	moveq	r1, #45	; 0x2d
    1b62:	2178      	movne	r1, #120	; 0x78
    1b64:	480f      	ldr	r0, [pc, #60]	; (1ba4 <config_regions+0xd0>)
    1b66:	f006 fb13 	bl	8190 <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
    1b6a:	216c      	movs	r1, #108	; 0x6c
    1b6c:	480d      	ldr	r0, [pc, #52]	; (1ba4 <config_regions+0xd0>)
    1b6e:	f006 fb0f 	bl	8190 <printk>
	PRINT("\n");
    1b72:	480d      	ldr	r0, [pc, #52]	; (1ba8 <config_regions+0xd4>)
}
    1b74:	b003      	add	sp, #12
    1b76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
    1b7a:	f006 bb09 	b.w	8190 <printk>
			NRF_SPU->FLASHREGION[i].PERM = perm;
    1b7e:	f505 77c0 	add.w	r7, r5, #384	; 0x180
    1b82:	e7c4      	b.n	1b0e <config_regions+0x3a>
}
    1b84:	b003      	add	sp, #12
    1b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b88:	00009113 	.word	0x00009113
    1b8c:	00008fa6 	.word	0x00008fa6
    1b90:	50003000 	.word	0x50003000
    1b94:	00009134 	.word	0x00009134
    1b98:	00009107 	.word	0x00009107
    1b9c:	000090fe 	.word	0x000090fe
    1ba0:	000092e5 	.word	0x000092e5
    1ba4:	0000914e 	.word	0x0000914e
    1ba8:	00009ccf 	.word	0x00009ccf

00001bac <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
    1bac:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    1bae:	f44f 3480 	mov.w	r4, #65536	; 0x10000
{
    1bb2:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    1bb4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1bb8:	4825      	ldr	r0, [pc, #148]	; (1c50 <spm_jump+0xa4>)
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    1bba:	4d26      	ldr	r5, [pc, #152]	; (1c54 <spm_jump+0xa8>)
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    1bbc:	f006 fae8 	bl	8190 <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    1bc0:	6821      	ldr	r1, [r4, #0]
    1bc2:	4825      	ldr	r0, [pc, #148]	; (1c58 <spm_jump+0xac>)
    1bc4:	f006 fae4 	bl	8190 <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    1bc8:	6829      	ldr	r1, [r5, #0]
    1bca:	4824      	ldr	r0, [pc, #144]	; (1c5c <spm_jump+0xb0>)
    1bcc:	f006 fae0 	bl	8190 <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    1bd0:	2210      	movs	r2, #16
    1bd2:	2100      	movs	r1, #0
    1bd4:	4668      	mov	r0, sp
    1bd6:	f006 fccc 	bl	8572 <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
    1bda:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
    1bdc:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    1bde:	9300      	str	r3, [sp, #0]
    1be0:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
    1be2:	f000 fef7 	bl	29d4 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
    1be6:	2001      	movs	r0, #1
    1be8:	f000 ff24 	bl	2a34 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
    1bec:	2000      	movs	r0, #0
    1bee:	f000 ff0d 	bl	2a0c <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
    1bf2:	2000      	movs	r0, #0
    1bf4:	f000 ff32 	bl	2a5c <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
    1bf8:	2101      	movs	r1, #1
    1bfa:	2000      	movs	r0, #0
    1bfc:	f000 ff4c 	bl	2a98 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
    1c00:	f000 ff40 	bl	2a84 <tz_nonsecure_fpu_access_enable>
	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    1c04:	4816      	ldr	r0, [pc, #88]	; (1c60 <spm_jump+0xb4>)
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    1c06:	682c      	ldr	r4, [r5, #0]
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    1c08:	f006 fac2 	bl	8190 <printk>
	NVIC_DisableIRQ(id);
    1c0c:	2008      	movs	r0, #8
    1c0e:	f7ff ff4d 	bl	1aac <__NVIC_DisableIRQ>
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1c12:	4a14      	ldr	r2, [pc, #80]	; (1c64 <spm_jump+0xb8>)
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    1c14:	f024 0401 	bic.w	r4, r4, #1
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1c18:	f8d2 3820 	ldr.w	r3, [r2, #2080]	; 0x820
	return present && (usel || split);
    1c1c:	2b00      	cmp	r3, #0
    1c1e:	da07      	bge.n	1c30 <spm_jump+0x84>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    1c20:	f003 0303 	and.w	r3, r3, #3
	return present && (usel || split);
    1c24:	3b02      	subs	r3, #2
    1c26:	2b01      	cmp	r3, #1
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    1c28:	bf9c      	itt	ls
    1c2a:	4b0f      	ldrls	r3, [pc, #60]	; (1c68 <spm_jump+0xbc>)
    1c2c:	f8c2 3820 	strls.w	r3, [r2, #2080]	; 0x820
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    1c30:	2101      	movs	r1, #1
    1c32:	2008      	movs	r0, #8
    1c34:	f006 fc03 	bl	843e <irq_target_state_set>
  __ASM volatile ("dsb 0xF":::"memory");
    1c38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c3c:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
    1c40:	0864      	lsrs	r4, r4, #1
    1c42:	0064      	lsls	r4, r4, #1
    1c44:	4620      	mov	r0, r4
    1c46:	4621      	mov	r1, r4
    1c48:	4622      	mov	r2, r4
    1c4a:	4623      	mov	r3, r4
    1c4c:	f7fe fc74 	bl	538 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
    1c50:	00009151 	.word	0x00009151
    1c54:	00010004 	.word	0x00010004
    1c58:	00009168 	.word	0x00009168
    1c5c:	0000917d 	.word	0x0000917d
    1c60:	0000919b 	.word	0x0000919b
    1c64:	50003000 	.word	0x50003000
    1c68:	80000100 	.word	0x80000100

00001c6c <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
    1c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
    1c70:	485e      	ldr	r0, [pc, #376]	; (1dec <spm_config+0x180>)
    1c72:	f006 fa8d 	bl	8190 <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
    1c76:	2100      	movs	r1, #0
    1c78:	f240 1317 	movw	r3, #279	; 0x117
    1c7c:	4608      	mov	r0, r1
    1c7e:	2202      	movs	r2, #2
    1c80:	f7ff ff28 	bl	1ad4 <config_regions>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    1c84:	4d5a      	ldr	r5, [pc, #360]	; (1df0 <spm_config+0x184>)
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
    1c86:	f240 1307 	movw	r3, #263	; 0x107
    1c8a:	2220      	movs	r2, #32
    1c8c:	2102      	movs	r1, #2
    1c8e:	2000      	movs	r0, #0
    1c90:	f7ff ff20 	bl	1ad4 <config_regions>
	PRINT("\n");
    1c94:	4857      	ldr	r0, [pc, #348]	; (1df4 <spm_config+0x188>)
    1c96:	f006 fa7b 	bl	8190 <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    1c9a:	f3c5 040e 	ubfx	r4, r5, #0, #15
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    1c9e:	4b56      	ldr	r3, [pc, #344]	; (1df8 <spm_config+0x18c>)
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    1ca0:	f5c4 4400 	rsb	r4, r4, #32768	; 0x8000
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    1ca4:	429c      	cmp	r4, r3
    1ca6:	d208      	bcs.n	1cba <spm_config+0x4e>
    1ca8:	4954      	ldr	r1, [pc, #336]	; (1dfc <spm_config+0x190>)
    1caa:	4855      	ldr	r0, [pc, #340]	; (1e00 <spm_config+0x194>)
    1cac:	2282      	movs	r2, #130	; 0x82
    1cae:	f006 fa6f 	bl	8190 <printk>
    1cb2:	2182      	movs	r1, #130	; 0x82
    1cb4:	4851      	ldr	r0, [pc, #324]	; (1dfc <spm_config+0x190>)
    1cb6:	f006 fb37 	bl	8328 <assert_post_action>
                                            uint8_t            flash_nsc_id,
                                            nrf_spu_nsc_size_t flash_nsc_size,
                                            uint8_t            region_number,
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    1cba:	4e52      	ldr	r6, [pc, #328]	; (1e04 <spm_config+0x198>)
	nrf_spu_flashnsc_set(NRF_SPU, 0, FLASH_NSC_SIZE_REG(nsc_size),
    1cbc:	f3c4 1443 	ubfx	r4, r4, #5, #4
    1cc0:	f8d6 2500 	ldr.w	r2, [r6, #1280]	; 0x500
    1cc4:	f3c5 35c4 	ubfx	r5, r5, #15, #5
    1cc8:	05d2      	lsls	r2, r2, #23
    1cca:	d50a      	bpl.n	1ce2 <spm_config+0x76>
    1ccc:	494e      	ldr	r1, [pc, #312]	; (1e08 <spm_config+0x19c>)
    1cce:	484c      	ldr	r0, [pc, #304]	; (1e00 <spm_config+0x194>)
    1cd0:	f44f 72bd 	mov.w	r2, #378	; 0x17a
    1cd4:	f006 fa5c 	bl	8190 <printk>
    1cd8:	f44f 71bd 	mov.w	r1, #378	; 0x17a
    1cdc:	484a      	ldr	r0, [pc, #296]	; (1e08 <spm_config+0x19c>)
    1cde:	f006 fb23 	bl	8328 <assert_post_action>
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));
    1ce2:	f8d6 3504 	ldr.w	r3, [r6, #1284]	; 0x504
    1ce6:	05db      	lsls	r3, r3, #23
    1ce8:	d50a      	bpl.n	1d00 <spm_config+0x94>
    1cea:	4947      	ldr	r1, [pc, #284]	; (1e08 <spm_config+0x19c>)
    1cec:	4844      	ldr	r0, [pc, #272]	; (1e00 <spm_config+0x194>)
    1cee:	f240 127b 	movw	r2, #379	; 0x17b
    1cf2:	f006 fa4d 	bl	8190 <printk>
    1cf6:	f240 117b 	movw	r1, #379	; 0x17b
    1cfa:	4843      	ldr	r0, [pc, #268]	; (1e08 <spm_config+0x19c>)
    1cfc:	f006 fb14 	bl	8328 <assert_post_action>

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
    1d00:	4b40      	ldr	r3, [pc, #256]	; (1e04 <spm_config+0x198>)
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
    1d02:	4842      	ldr	r0, [pc, #264]	; (1e0c <spm_config+0x1a0>)
    1d04:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
    1d08:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    1d0c:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
    1d10:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    1d14:	0152      	lsls	r2, r2, #5
    1d16:	f006 fa3b 	bl	8190 <printk>
	PRINT("\n");
    1d1a:	4836      	ldr	r0, [pc, #216]	; (1df4 <spm_config+0x188>)
    1d1c:	f006 fa38 	bl	8190 <printk>
	int err = spm_secure_services_init();
    1d20:	f000 f88a 	bl	1e38 <spm_secure_services_init>
	if (err != 0) {
    1d24:	4601      	mov	r1, r0
    1d26:	b110      	cbz	r0, 1d2e <spm_config+0xc2>
		PRINT("Could not initialize secure services (err %d).\n", err);
    1d28:	4839      	ldr	r0, [pc, #228]	; (1e10 <spm_config+0x1a4>)
    1d2a:	f006 fa31 	bl	8190 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    1d2e:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
    1d30:	4838      	ldr	r0, [pc, #224]	; (1e14 <spm_config+0x1a8>)
    1d32:	f006 fa2d 	bl	8190 <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
    1d36:	f240 1317 	movw	r3, #279	; 0x117
    1d3a:	2208      	movs	r2, #8
    1d3c:	2100      	movs	r1, #0
    1d3e:	2001      	movs	r0, #1
    1d40:	f7ff fec8 	bl	1ad4 <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
    1d44:	4d2f      	ldr	r5, [pc, #188]	; (1e04 <spm_config+0x198>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
    1d46:	f240 1307 	movw	r3, #263	; 0x107
    1d4a:	2220      	movs	r2, #32
    1d4c:	2108      	movs	r1, #8
    1d4e:	2001      	movs	r0, #1
    1d50:	f7ff fec0 	bl	1ad4 <config_regions>
	PRINT("\n");
    1d54:	4827      	ldr	r0, [pc, #156]	; (1df4 <spm_config+0x188>)
    1d56:	f006 fa1b 	bl	8190 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    1d5a:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
    1d5e:	482e      	ldr	r0, [pc, #184]	; (1e18 <spm_config+0x1ac>)
    1d60:	f006 fa16 	bl	8190 <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
    1d64:	4e2d      	ldr	r6, [pc, #180]	; (1e1c <spm_config+0x1b0>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
    1d66:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
    1d6a:	4f2d      	ldr	r7, [pc, #180]	; (1e20 <spm_config+0x1b4>)
    1d6c:	4d2d      	ldr	r5, [pc, #180]	; (1e24 <spm_config+0x1b8>)
    1d6e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1e34 <spm_config+0x1c8>
    1d72:	f895 9005 	ldrb.w	r9, [r5, #5]
    1d76:	4621      	mov	r1, r4
    1d78:	f1b9 0f00 	cmp.w	r9, #0
    1d7c:	bf14      	ite	ne
    1d7e:	4633      	movne	r3, r6
    1d80:	463b      	moveq	r3, r7
    1d82:	4640      	mov	r0, r8
    1d84:	682a      	ldr	r2, [r5, #0]
    1d86:	f006 fa03 	bl	8190 <printk>
		if (!periph[i].nonsecure) {
    1d8a:	f1b9 0f00 	cmp.w	r9, #0
    1d8e:	d10c      	bne.n	1daa <spm_config+0x13e>
			PRINT("\tSKIP\n");
    1d90:	4825      	ldr	r0, [pc, #148]	; (1e28 <spm_config+0x1bc>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    1d92:	3401      	adds	r4, #1
			PRINT("\tOK\n");
    1d94:	f006 f9fc 	bl	8190 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    1d98:	2c1c      	cmp	r4, #28
    1d9a:	f105 0508 	add.w	r5, r5, #8
    1d9e:	d1e8      	bne.n	1d72 <spm_config+0x106>
	PRINT("\n");
    1da0:	4814      	ldr	r0, [pc, #80]	; (1df4 <spm_config+0x188>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
    1da2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
    1da6:	f006 b9f3 	b.w	8190 <printk>
		err = spm_config_peripheral(periph[i].id, false);
    1daa:	f895 9004 	ldrb.w	r9, [r5, #4]
	NVIC_DisableIRQ(id);
    1dae:	f995 0004 	ldrsb.w	r0, [r5, #4]
    1db2:	f7ff fe7b 	bl	1aac <__NVIC_DisableIRQ>
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1db6:	ea4f 0389 	mov.w	r3, r9, lsl #2
    1dba:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    1dbe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    1dc2:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1dc6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    1dca:	d006      	beq.n	1dda <spm_config+0x16e>
	return present && (usel || split);
    1dcc:	2a00      	cmp	r2, #0
    1dce:	da07      	bge.n	1de0 <spm_config+0x174>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    1dd0:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
    1dd4:	3a02      	subs	r2, #2
    1dd6:	2a01      	cmp	r2, #1
    1dd8:	d802      	bhi.n	1de0 <spm_config+0x174>
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    1dda:	4a14      	ldr	r2, [pc, #80]	; (1e2c <spm_config+0x1c0>)
    1ddc:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    1de0:	2101      	movs	r1, #1
    1de2:	4648      	mov	r0, r9
    1de4:	f006 fb2b 	bl	843e <irq_target_state_set>
			PRINT("\tOK\n");
    1de8:	4811      	ldr	r0, [pc, #68]	; (1e30 <spm_config+0x1c4>)
    1dea:	e7d2      	b.n	1d92 <spm_config+0x126>
    1dec:	000091d1 	.word	0x000091d1
    1df0:	0000ffe0 	.word	0x0000ffe0
    1df4:	00009ccf 	.word	0x00009ccf
    1df8:	00000020 	.word	0x00000020
    1dfc:	00009113 	.word	0x00009113
    1e00:	00008fa6 	.word	0x00008fa6
    1e04:	50003000 	.word	0x50003000
    1e08:	000091f5 	.word	0x000091f5
    1e0c:	00009227 	.word	0x00009227
    1e10:	0000926d 	.word	0x0000926d
    1e14:	0000929d 	.word	0x0000929d
    1e18:	000092bf 	.word	0x000092bf
    1e1c:	000091c6 	.word	0x000091c6
    1e20:	0000910b 	.word	0x0000910b
    1e24:	00008c50 	.word	0x00008c50
    1e28:	000092e8 	.word	0x000092e8
    1e2c:	80000100 	.word	0x80000100
    1e30:	000092ef 	.word	0x000092ef
    1e34:	000092db 	.word	0x000092db

00001e38 <spm_secure_services_init>:
int spm_secure_services_init(void)
{
	int err = 0;

#ifdef CONFIG_SPM_SERVICE_RNG
	err = nrf_cc3xx_platform_ctr_drbg_init(&ctr_drbg_ctx, NULL, 0);
    1e38:	2200      	movs	r2, #0
    1e3a:	4802      	ldr	r0, [pc, #8]	; (1e44 <spm_secure_services_init+0xc>)
    1e3c:	4611      	mov	r1, r2
    1e3e:	f003 bc57 	b.w	56f0 <nrf_cc3xx_platform_ctr_drbg_init>
    1e42:	bf00      	nop
    1e44:	200002cc 	.word	0x200002cc

00001e48 <__acle_se_spm_request_read_nse>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read_nse(void *destination, uint32_t addr, size_t len)
{
    1e48:	b570      	push	{r4, r5, r6, lr}
    1e4a:	460c      	mov	r4, r1
    1e4c:	4615      	mov	r5, r2
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
    1e4e:	4606      	mov	r6, r0
    1e50:	b950      	cbnz	r0, 1e68 <__acle_se_spm_request_read_nse+0x20>
		return -EINVAL;
    1e52:	f06f 0015 	mvn.w	r0, #21
			return 0;
		}
	}

	return -EPERM;
}
    1e56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1e5a:	4671      	mov	r1, lr
    1e5c:	4672      	mov	r2, lr
    1e5e:	4673      	mov	r3, lr
    1e60:	46f4      	mov	ip, lr
    1e62:	f38e 8c00 	msr	CPSR_fs, lr
    1e66:	4774      	bxns	lr
	if (destination == NULL || len <= 0) {
    1e68:	2a00      	cmp	r2, #0
    1e6a:	d0f2      	beq.n	1e52 <__acle_se_spm_request_read_nse+0xa>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1e6c:	f006 fb2e 	bl	84cc <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)destination)) {
    1e70:	2801      	cmp	r0, #1
    1e72:	d0ee      	beq.n	1e52 <__acle_se_spm_request_read_nse+0xa>
		if (addr >= start && addr + len <= start + size) {
    1e74:	4b0c      	ldr	r3, [pc, #48]	; (1ea8 <__acle_se_spm_request_read_nse+0x60>)
    1e76:	429c      	cmp	r4, r3
    1e78:	d90b      	bls.n	1e92 <__acle_se_spm_request_read_nse+0x4a>
    1e7a:	192a      	adds	r2, r5, r4
    1e7c:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
    1e80:	429a      	cmp	r2, r3
    1e82:	d809      	bhi.n	1e98 <__acle_se_spm_request_read_nse+0x50>
			memcpy(destination, (const void *)addr, len);
    1e84:	462a      	mov	r2, r5
    1e86:	4621      	mov	r1, r4
    1e88:	4630      	mov	r0, r6
    1e8a:	f006 fb67 	bl	855c <memcpy>
			return 0;
    1e8e:	2000      	movs	r0, #0
    1e90:	e7e1      	b.n	1e56 <__acle_se_spm_request_read_nse+0xe>
		if (addr >= start && addr + len <= start + size) {
    1e92:	4b06      	ldr	r3, [pc, #24]	; (1eac <__acle_se_spm_request_read_nse+0x64>)
    1e94:	429c      	cmp	r4, r3
    1e96:	d903      	bls.n	1ea0 <__acle_se_spm_request_read_nse+0x58>
    1e98:	4b05      	ldr	r3, [pc, #20]	; (1eb0 <__acle_se_spm_request_read_nse+0x68>)
    1e9a:	192a      	adds	r2, r5, r4
    1e9c:	429a      	cmp	r2, r3
    1e9e:	d9f1      	bls.n	1e84 <__acle_se_spm_request_read_nse+0x3c>
	return -EPERM;
    1ea0:	f04f 30ff 	mov.w	r0, #4294967295
    1ea4:	e7d7      	b.n	1e56 <__acle_se_spm_request_read_nse+0xe>
    1ea6:	bf00      	nop
    1ea8:	00ff0203 	.word	0x00ff0203
    1eac:	00ff012f 	.word	0x00ff012f
    1eb0:	00ff0138 	.word	0x00ff0138

00001eb4 <__acle_se_spm_request_random_number_nse>:


#ifdef CONFIG_SPM_SERVICE_RNG
__TZ_NONSECURE_ENTRY_FUNC
int spm_request_random_number_nse(uint8_t *output, size_t len, size_t *olen)
{
    1eb4:	b570      	push	{r4, r5, r6, lr}
    1eb6:	4606      	mov	r6, r0
    1eb8:	460d      	mov	r5, r1
    1eba:	4614      	mov	r4, r2
	return arm_cmse_addr_is_secure(ptr) == 1;
    1ebc:	f006 fb06 	bl	84cc <arm_cmse_addr_is_secure>
	int err = -EINVAL;

	if (ptr_in_secure_area((intptr_t)output) ||
    1ec0:	2801      	cmp	r0, #1
    1ec2:	d00d      	beq.n	1ee0 <__acle_se_spm_request_random_number_nse+0x2c>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1ec4:	4620      	mov	r0, r4
    1ec6:	f006 fb01 	bl	84cc <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)output) ||
    1eca:	2801      	cmp	r0, #1
    1ecc:	d008      	beq.n	1ee0 <__acle_se_spm_request_random_number_nse+0x2c>
	    ptr_in_secure_area((intptr_t)olen)) {
		return -EINVAL;
	}

	err = nrf_cc3xx_platform_ctr_drbg_get(&ctr_drbg_ctx, output, len, olen);
    1ece:	4623      	mov	r3, r4
    1ed0:	462a      	mov	r2, r5
    1ed2:	4631      	mov	r1, r6
    1ed4:	4808      	ldr	r0, [pc, #32]	; (1ef8 <__acle_se_spm_request_random_number_nse+0x44>)
    1ed6:	f003 fc3f 	bl	5758 <nrf_cc3xx_platform_ctr_drbg_get>
	if (*olen != len) {
    1eda:	6823      	ldr	r3, [r4, #0]
    1edc:	42ab      	cmp	r3, r5
    1ede:	d001      	beq.n	1ee4 <__acle_se_spm_request_random_number_nse+0x30>
		return -EINVAL;
    1ee0:	f06f 0015 	mvn.w	r0, #21
	}

	return err;
}
    1ee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1ee8:	4671      	mov	r1, lr
    1eea:	4672      	mov	r2, lr
    1eec:	4673      	mov	r3, lr
    1eee:	46f4      	mov	ip, lr
    1ef0:	f38e 8c00 	msr	CPSR_fs, lr
    1ef4:	4774      	bxns	lr
    1ef6:	bf00      	nop
    1ef8:	200002cc 	.word	0x200002cc

00001efc <__acle_se_spm_firmware_info_nse>:
#endif /* CONFIG_SPM_SERVICE_S0_ACTIVE */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info_nse(uint32_t fw_address, struct fw_info *info)
{
    1efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f00:	4681      	mov	r9, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
    1f02:	460d      	mov	r5, r1
{
    1f04:	b085      	sub	sp, #20
	if (info == NULL) {
    1f06:	b381      	cbz	r1, 1f6a <__acle_se_spm_firmware_info_nse+0x6e>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1f08:	f006 fae0 	bl	84cc <arm_cmse_addr_is_secure>
		return -EINVAL;
	}

	/* Ensure that fw_address is within secure area */
	if (!ptr_in_secure_area(fw_address)) {
    1f0c:	2801      	cmp	r0, #1
    1f0e:	d12c      	bne.n	1f6a <__acle_se_spm_firmware_info_nse+0x6e>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1f10:	4628      	mov	r0, r5
    1f12:	f006 fadb 	bl	84cc <arm_cmse_addr_is_secure>
		return -EINVAL;
	}

	/* Ensure that *info is in non-secure RAM */
	if (ptr_in_secure_area((intptr_t)info)) {
    1f16:	2801      	cmp	r0, #1
    1f18:	d027      	beq.n	1f6a <__acle_se_spm_firmware_info_nse+0x6e>
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    1f1a:	f04f 0800 	mov.w	r8, #0
    1f1e:	f8df b05c 	ldr.w	fp, [pc, #92]	; 1f7c <__acle_se_spm_firmware_info_nse+0x80>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1f22:	f8df a05c 	ldr.w	sl, [pc, #92]	; 1f80 <__acle_se_spm_firmware_info_nse+0x84>
    1f26:	af01      	add	r7, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
    1f28:	f85b 6b04 	ldr.w	r6, [fp], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1f2c:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
    1f30:	444e      	add	r6, r9
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1f32:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
    1f36:	220c      	movs	r2, #12
    1f38:	4639      	mov	r1, r7
    1f3a:	4630      	mov	r0, r6
    1f3c:	f006 fae7 	bl	850e <memcmp>
    1f40:	4604      	mov	r4, r0
    1f42:	b900      	cbnz	r0, 1f46 <__acle_se_spm_firmware_info_nse+0x4a>
		if (finfo) {
    1f44:	b9a6      	cbnz	r6, 1f70 <__acle_se_spm_firmware_info_nse+0x74>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    1f46:	f108 0801 	add.w	r8, r8, #1
    1f4a:	f1b8 0f05 	cmp.w	r8, #5
    1f4e:	d1eb      	bne.n	1f28 <__acle_se_spm_firmware_info_nse+0x2c>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
    1f50:	f06f 040d 	mvn.w	r4, #13
}
    1f54:	4620      	mov	r0, r4
    1f56:	b005      	add	sp, #20
    1f58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f5c:	4671      	mov	r1, lr
    1f5e:	4672      	mov	r2, lr
    1f60:	4673      	mov	r3, lr
    1f62:	46f4      	mov	ip, lr
    1f64:	f38e 8c00 	msr	CPSR_fs, lr
    1f68:	4774      	bxns	lr
		return -EINVAL;
    1f6a:	f06f 0415 	mvn.w	r4, #21
    1f6e:	e7f1      	b.n	1f54 <__acle_se_spm_firmware_info_nse+0x58>
		memcpy(info, tmp_info, sizeof(*tmp_info));
    1f70:	223c      	movs	r2, #60	; 0x3c
    1f72:	4631      	mov	r1, r6
    1f74:	4628      	mov	r0, r5
    1f76:	f006 faf1 	bl	855c <memcpy>
		return 0;
    1f7a:	e7eb      	b.n	1f54 <__acle_se_spm_firmware_info_nse+0x58>
    1f7c:	00008d30 	.word	0x00008d30
    1f80:	00008bc0 	.word	0x00008bc0

00001f84 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1f84:	4801      	ldr	r0, [pc, #4]	; (1f8c <nrf_cc3xx_platform_abort_init+0x8>)
    1f86:	f003 bbab 	b.w	56e0 <nrf_cc3xx_platform_set_abort>
    1f8a:	bf00      	nop
    1f8c:	00008d44 	.word	0x00008d44

00001f90 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1f90:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1f92:	b1b0      	cbz	r0, 1fc2 <mutex_unlock_platform+0x32>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1f94:	6843      	ldr	r3, [r0, #4]
    1f96:	2b04      	cmp	r3, #4
    1f98:	d10d      	bne.n	1fb6 <mutex_unlock_platform+0x26>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1f9a:	2200      	movs	r2, #0
    1f9c:	6803      	ldr	r3, [r0, #0]
    1f9e:	e8d3 1fef 	ldaex	r1, [r3]
    1fa2:	2901      	cmp	r1, #1
    1fa4:	d103      	bne.n	1fae <mutex_unlock_platform+0x1e>
    1fa6:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1faa:	2800      	cmp	r0, #0
    1fac:	d1f7      	bne.n	1f9e <mutex_unlock_platform+0xe>
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1fae:	4807      	ldr	r0, [pc, #28]	; (1fcc <mutex_unlock_platform+0x3c>)
    1fb0:	bf08      	it	eq
    1fb2:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1fb4:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1fb6:	b13b      	cbz	r3, 1fc8 <mutex_unlock_platform+0x38>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1fb8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    1fba:	f001 ffcf 	bl	3f5c <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1fbe:	2000      	movs	r0, #0
    1fc0:	e7f8      	b.n	1fb4 <mutex_unlock_platform+0x24>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1fc2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1fc6:	e7f5      	b.n	1fb4 <mutex_unlock_platform+0x24>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1fc8:	4801      	ldr	r0, [pc, #4]	; (1fd0 <mutex_unlock_platform+0x40>)
    1fca:	e7f3      	b.n	1fb4 <mutex_unlock_platform+0x24>
    1fcc:	ffff8fe9 	.word	0xffff8fe9
    1fd0:	ffff8fea 	.word	0xffff8fea

00001fd4 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1fd4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1fd6:	4604      	mov	r4, r0
    1fd8:	b918      	cbnz	r0, 1fe2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1fda:	4b0d      	ldr	r3, [pc, #52]	; (2010 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10>)
    1fdc:	480d      	ldr	r0, [pc, #52]	; (2014 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x14>)
    1fde:	685b      	ldr	r3, [r3, #4]
    1fe0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1fe2:	6861      	ldr	r1, [r4, #4]
    1fe4:	2908      	cmp	r1, #8
    1fe6:	d00d      	beq.n	2004 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1fe8:	f031 0304 	bics.w	r3, r1, #4
    1fec:	d00a      	beq.n	2004 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1fee:	f011 0102 	ands.w	r1, r1, #2
    1ff2:	d008      	beq.n	2006 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1ff4:	4621      	mov	r1, r4
    1ff6:	4808      	ldr	r0, [pc, #32]	; (2018 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x18>)
    1ff8:	f001 fd66 	bl	3ac8 <k_mem_slab_free>
        mutex->mutex = NULL;
    1ffc:	2300      	movs	r3, #0
    1ffe:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2000:	2300      	movs	r3, #0
    2002:	6063      	str	r3, [r4, #4]
}
    2004:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2006:	2214      	movs	r2, #20
    2008:	6820      	ldr	r0, [r4, #0]
    200a:	f006 fab2 	bl	8572 <memset>
    200e:	e7f7      	b.n	2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>
    2010:	20000060 	.word	0x20000060
    2014:	00009400 	.word	0x00009400
    2018:	20000488 	.word	0x20000488

0000201c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    201c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    201e:	4604      	mov	r4, r0
    2020:	b918      	cbnz	r0, 202a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2022:	4b16      	ldr	r3, [pc, #88]	; (207c <mutex_init_platform+0x60>)
    2024:	4816      	ldr	r0, [pc, #88]	; (2080 <mutex_init_platform+0x64>)
    2026:	685b      	ldr	r3, [r3, #4]
    2028:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    202a:	6863      	ldr	r3, [r4, #4]
    202c:	2b04      	cmp	r3, #4
    202e:	d023      	beq.n	2078 <mutex_init_platform+0x5c>
    2030:	2b08      	cmp	r3, #8
    2032:	d021      	beq.n	2078 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2034:	b9cb      	cbnz	r3, 206a <mutex_init_platform+0x4e>
    2036:	6823      	ldr	r3, [r4, #0]
    2038:	b9bb      	cbnz	r3, 206a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    203a:	f04f 32ff 	mov.w	r2, #4294967295
    203e:	f04f 33ff 	mov.w	r3, #4294967295
    2042:	4621      	mov	r1, r4
    2044:	480f      	ldr	r0, [pc, #60]	; (2084 <mutex_init_platform+0x68>)
    2046:	f001 fce5 	bl	3a14 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    204a:	b908      	cbnz	r0, 2050 <mutex_init_platform+0x34>
    204c:	6823      	ldr	r3, [r4, #0]
    204e:	b91b      	cbnz	r3, 2058 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    2050:	4b0a      	ldr	r3, [pc, #40]	; (207c <mutex_init_platform+0x60>)
    2052:	480d      	ldr	r0, [pc, #52]	; (2088 <mutex_init_platform+0x6c>)
    2054:	685b      	ldr	r3, [r3, #4]
    2056:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2058:	2214      	movs	r2, #20
    205a:	2100      	movs	r1, #0
    205c:	6820      	ldr	r0, [r4, #0]
    205e:	f006 fa88 	bl	8572 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2062:	6863      	ldr	r3, [r4, #4]
    2064:	f043 0302 	orr.w	r3, r3, #2
    2068:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    206a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    206c:	f006 fbcf 	bl	880e <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2070:	6863      	ldr	r3, [r4, #4]
    2072:	f043 0301 	orr.w	r3, r3, #1
    2076:	6063      	str	r3, [r4, #4]
}
    2078:	bd10      	pop	{r4, pc}
    207a:	bf00      	nop
    207c:	20000060 	.word	0x20000060
    2080:	00009400 	.word	0x00009400
    2084:	20000488 	.word	0x20000488
    2088:	00009426 	.word	0x00009426

0000208c <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    208c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    208e:	b1e8      	cbz	r0, 20cc <mutex_lock_platform+0x40>
    switch (mutex->flags) {
    2090:	6843      	ldr	r3, [r0, #4]
    2092:	2b04      	cmp	r3, #4
    2094:	d10c      	bne.n	20b0 <mutex_lock_platform+0x24>
    2096:	2201      	movs	r2, #1
    2098:	6803      	ldr	r3, [r0, #0]
    209a:	e8d3 1fef 	ldaex	r1, [r3]
    209e:	2900      	cmp	r1, #0
    20a0:	d103      	bne.n	20aa <mutex_lock_platform+0x1e>
    20a2:	e8c3 2fe0 	stlex	r0, r2, [r3]
    20a6:	2800      	cmp	r0, #0
    20a8:	d1f7      	bne.n	209a <mutex_lock_platform+0xe>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    20aa:	d10b      	bne.n	20c4 <mutex_lock_platform+0x38>
    20ac:	2000      	movs	r0, #0
}
    20ae:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    20b0:	b153      	cbz	r3, 20c8 <mutex_lock_platform+0x3c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    20b2:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    20b4:	f04f 32ff 	mov.w	r2, #4294967295
    20b8:	f04f 33ff 	mov.w	r3, #4294967295
    20bc:	f001 fe76 	bl	3dac <z_impl_k_mutex_lock>
        if (ret == 0) {
    20c0:	2800      	cmp	r0, #0
    20c2:	d0f3      	beq.n	20ac <mutex_lock_platform+0x20>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    20c4:	4803      	ldr	r0, [pc, #12]	; (20d4 <mutex_lock_platform+0x48>)
    20c6:	e7f2      	b.n	20ae <mutex_lock_platform+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    20c8:	4803      	ldr	r0, [pc, #12]	; (20d8 <mutex_lock_platform+0x4c>)
    20ca:	e7f0      	b.n	20ae <mutex_lock_platform+0x22>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    20cc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    20d0:	e7ed      	b.n	20ae <mutex_lock_platform+0x22>
    20d2:	bf00      	nop
    20d4:	ffff8fe9 	.word	0xffff8fe9
    20d8:	ffff8fea 	.word	0xffff8fea

000020dc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    20dc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    20de:	4906      	ldr	r1, [pc, #24]	; (20f8 <nrf_cc3xx_platform_mutex_init+0x1c>)
    20e0:	2340      	movs	r3, #64	; 0x40
    20e2:	2214      	movs	r2, #20
    20e4:	4805      	ldr	r0, [pc, #20]	; (20fc <nrf_cc3xx_platform_mutex_init+0x20>)
    20e6:	f006 fb67 	bl	87b8 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    20ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    20ee:	4904      	ldr	r1, [pc, #16]	; (2100 <nrf_cc3xx_platform_mutex_init+0x24>)
    20f0:	4804      	ldr	r0, [pc, #16]	; (2104 <nrf_cc3xx_platform_mutex_init+0x28>)
    20f2:	f003 bba9 	b.w	5848 <nrf_cc3xx_platform_set_mutexes>
    20f6:	bf00      	nop
    20f8:	200004a8 	.word	0x200004a8
    20fc:	20000488 	.word	0x20000488
    2100:	00008d5c 	.word	0x00008d5c
    2104:	00008d4c 	.word	0x00008d4c

00002108 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2108:	4a09      	ldr	r2, [pc, #36]	; (2130 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    210a:	490a      	ldr	r1, [pc, #40]	; (2134 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    210c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    210e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    2110:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    2112:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2114:	4908      	ldr	r1, [pc, #32]	; (2138 <arch_swap+0x30>)
    2116:	684b      	ldr	r3, [r1, #4]
    2118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    211c:	604b      	str	r3, [r1, #4]
    211e:	2300      	movs	r3, #0
    2120:	f383 8811 	msr	BASEPRI, r3
    2124:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2128:	6893      	ldr	r3, [r2, #8]
}
    212a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    212c:	4770      	bx	lr
    212e:	bf00      	nop
    2130:	200009d0 	.word	0x200009d0
    2134:	00008de4 	.word	0x00008de4
    2138:	e000ed00 	.word	0xe000ed00

0000213c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    213c:	4913      	ldr	r1, [pc, #76]	; (218c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    213e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2140:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2144:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2146:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    214a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    214e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2150:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2154:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2158:	4f0d      	ldr	r7, [pc, #52]	; (2190 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    215a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    215e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    2160:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2162:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2164:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2166:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2168:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    216a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    216e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2172:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2176:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    217a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    217e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    2180:	f006 f98c 	bl	849c <configure_builtin_stack_guard>
    pop {r2, lr}
    2184:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2188:	4770      	bx	lr
    218a:	0000      	.short	0x0000
    ldr r1, =_kernel
    218c:	200009d0 	.word	0x200009d0
    ldr v4, =_SCS_ICSR
    2190:	e000ed04 	.word	0xe000ed04

00002194 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    2194:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2198:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    219a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    219e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    21a2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    21a4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    21a8:	2902      	cmp	r1, #2
    beq _oops
    21aa:	d0ff      	beq.n	21ac <_oops>

000021ac <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    21ac:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    21ae:	f006 f979 	bl	84a4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    21b2:	bd01      	pop	{r0, pc}

000021b4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    21b4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    21b6:	2b00      	cmp	r3, #0
    21b8:	db08      	blt.n	21cc <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21ba:	2201      	movs	r2, #1
    21bc:	f000 001f 	and.w	r0, r0, #31
    21c0:	fa02 f000 	lsl.w	r0, r2, r0
    21c4:	4a02      	ldr	r2, [pc, #8]	; (21d0 <arch_irq_enable+0x1c>)
    21c6:	095b      	lsrs	r3, r3, #5
    21c8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    21cc:	4770      	bx	lr
    21ce:	bf00      	nop
    21d0:	e000e100 	.word	0xe000e100

000021d4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    21d4:	4b05      	ldr	r3, [pc, #20]	; (21ec <arch_irq_is_enabled+0x18>)
    21d6:	0942      	lsrs	r2, r0, #5
    21d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    21dc:	2301      	movs	r3, #1
    21de:	f000 001f 	and.w	r0, r0, #31
    21e2:	fa03 f000 	lsl.w	r0, r3, r0
}
    21e6:	4010      	ands	r0, r2
    21e8:	4770      	bx	lr
    21ea:	bf00      	nop
    21ec:	e000e100 	.word	0xe000e100

000021f0 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    21f0:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    21f2:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    21f4:	2c07      	cmp	r4, #7
{
    21f6:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    21f8:	d908      	bls.n	220c <z_arm_irq_priority_set+0x1c>
    21fa:	490d      	ldr	r1, [pc, #52]	; (2230 <z_arm_irq_priority_set+0x40>)
    21fc:	480d      	ldr	r0, [pc, #52]	; (2234 <z_arm_irq_priority_set+0x44>)
    21fe:	2258      	movs	r2, #88	; 0x58
    2200:	f005 ffc6 	bl	8190 <printk>
    2204:	2158      	movs	r1, #88	; 0x58
    2206:	480a      	ldr	r0, [pc, #40]	; (2230 <z_arm_irq_priority_set+0x40>)
    2208:	f006 f88e 	bl	8328 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    220c:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    220e:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2210:	bfac      	ite	ge
    2212:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2216:	4b08      	ldrlt	r3, [pc, #32]	; (2238 <z_arm_irq_priority_set+0x48>)
    2218:	ea4f 1444 	mov.w	r4, r4, lsl #5
    221c:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    221e:	bfab      	itete	ge
    2220:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2224:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2228:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    222c:	555c      	strblt	r4, [r3, r5]
}
    222e:	bd38      	pop	{r3, r4, r5, pc}
    2230:	00009453 	.word	0x00009453
    2234:	00008fa6 	.word	0x00008fa6
    2238:	e000ed14 	.word	0xe000ed14

0000223c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    223c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2240:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    2242:	490b      	ldr	r1, [pc, #44]	; (2270 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    2244:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2248:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    224a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    224e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2252:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    2254:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    2258:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    225c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2260:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2264:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2266:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2268:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    226a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    226c:	4770      	bx	lr
    226e:	bf00      	nop
    2270:	00008253 	.word	0x00008253

00002274 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2274:	4b08      	ldr	r3, [pc, #32]	; (2298 <arch_switch_to_main_thread+0x24>)
    2276:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    2278:	6e43      	ldr	r3, [r0, #100]	; 0x64
    227a:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    227e:	4610      	mov	r0, r2
    2280:	f381 8809 	msr	PSP, r1
    2284:	2100      	movs	r1, #0
    2286:	b663      	cpsie	if
    2288:	f381 8811 	msr	BASEPRI, r1
    228c:	f3bf 8f6f 	isb	sy
    2290:	2200      	movs	r2, #0
    2292:	2300      	movs	r3, #0
    2294:	f005 ffdd 	bl	8252 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2298:	200009d0 	.word	0x200009d0

0000229c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    229c:	4901      	ldr	r1, [pc, #4]	; (22a4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    229e:	2210      	movs	r2, #16
	str	r2, [r1]
    22a0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    22a2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    22a4:	e000ed10 	.word	0xe000ed10

000022a8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    22a8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    22aa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    22ac:	f380 8811 	msr	BASEPRI, r0
	isb
    22b0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    22b4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    22b8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    22ba:	b662      	cpsie	i
	isb
    22bc:	f3bf 8f6f 	isb	sy

	bx	lr
    22c0:	4770      	bx	lr
    22c2:	bf00      	nop

000022c4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    22c4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    22c6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    22c8:	f381 8811 	msr	BASEPRI, r1

	wfe
    22cc:	bf20      	wfe

	msr	BASEPRI, r0
    22ce:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    22d2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    22d4:	4770      	bx	lr
    22d6:	bf00      	nop

000022d8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    22d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    22da:	4605      	mov	r5, r0

	if (esf != NULL) {
    22dc:	460c      	mov	r4, r1
    22de:	b1c9      	cbz	r1, 2314 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    22e0:	688b      	ldr	r3, [r1, #8]
    22e2:	4810      	ldr	r0, [pc, #64]	; (2324 <z_arm_fatal_error+0x4c>)
    22e4:	9300      	str	r3, [sp, #0]
    22e6:	e9d1 2300 	ldrd	r2, r3, [r1]
    22ea:	2145      	movs	r1, #69	; 0x45
    22ec:	f006 f82f 	bl	834e <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    22f0:	6963      	ldr	r3, [r4, #20]
    22f2:	2145      	movs	r1, #69	; 0x45
    22f4:	9300      	str	r3, [sp, #0]
    22f6:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    22fa:	480b      	ldr	r0, [pc, #44]	; (2328 <z_arm_fatal_error+0x50>)
    22fc:	f006 f827 	bl	834e <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2300:	2145      	movs	r1, #69	; 0x45
    2302:	69e2      	ldr	r2, [r4, #28]
    2304:	4809      	ldr	r0, [pc, #36]	; (232c <z_arm_fatal_error+0x54>)
    2306:	f006 f822 	bl	834e <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    230a:	2145      	movs	r1, #69	; 0x45
    230c:	69a2      	ldr	r2, [r4, #24]
    230e:	4808      	ldr	r0, [pc, #32]	; (2330 <z_arm_fatal_error+0x58>)
    2310:	f006 f81d 	bl	834e <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2314:	4621      	mov	r1, r4
    2316:	4628      	mov	r0, r5
}
    2318:	b003      	add	sp, #12
    231a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    231e:	f001 ba2f 	b.w	3780 <z_fatal_error>
    2322:	bf00      	nop
    2324:	00009489 	.word	0x00009489
    2328:	000094bd 	.word	0x000094bd
    232c:	000094f1 	.word	0x000094f1
    2330:	00009505 	.word	0x00009505

00002334 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2334:	bf30      	wfi
    b z_SysNmiOnReset
    2336:	f7ff bffd 	b.w	2334 <z_SysNmiOnReset>
    233a:	bf00      	nop

0000233c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    233c:	4a0b      	ldr	r2, [pc, #44]	; (236c <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    233e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2340:	4b0b      	ldr	r3, [pc, #44]	; (2370 <z_arm_prep_c+0x34>)
    2342:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2346:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2348:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    234c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2350:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2354:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    235c:	f001 fa6c 	bl	3838 <z_bss_zero>
	z_data_copy();
    2360:	f002 fe9c 	bl	509c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2364:	f000 fb18 	bl	2998 <z_arm_interrupt_init>
	z_cstart();
    2368:	f001 fa8a 	bl	3880 <z_cstart>
    236c:	00000000 	.word	0x00000000
    2370:	e000ed00 	.word	0xe000ed00

00002374 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2374:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2376:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2378:	4a0b      	ldr	r2, [pc, #44]	; (23a8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    237a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    237c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    237e:	bf1e      	ittt	ne
	movne	r1, #0
    2380:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2382:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    2384:	f006 fa3c 	blne	8800 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2388:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    238a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    238e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2392:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2396:	4905      	ldr	r1, [pc, #20]	; (23ac <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2398:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    239a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    239c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    239e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    23a2:	4903      	ldr	r1, [pc, #12]	; (23b0 <_isr_wrapper+0x3c>)
	bx r1
    23a4:	4708      	bx	r1
    23a6:	0000      	.short	0x0000
	ldr r2, =_kernel
    23a8:	200009d0 	.word	0x200009d0
	ldr r1, =_sw_isr_table
    23ac:	0000894c 	.word	0x0000894c
	ldr r1, =z_arm_int_exit
    23b0:	000028ed 	.word	0x000028ed

000023b4 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    23b4:	2000      	movs	r0, #0
    msr CONTROL, r0
    23b6:	f380 8814 	msr	CONTROL, r0
    isb
    23ba:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    23be:	2000      	movs	r0, #0
    msr MSPLIM, r0
    23c0:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    23c4:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    23c8:	f006 fa52 	bl	8870 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    23cc:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    23ce:	490e      	ldr	r1, [pc, #56]	; (2408 <__start+0x54>)
    str r0, [r1]
    23d0:	6008      	str	r0, [r1, #0]
    dsb
    23d2:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    23d6:	480d      	ldr	r0, [pc, #52]	; (240c <__start+0x58>)
    msr msp, r0
    23d8:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    23dc:	f000 fab6 	bl	294c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    23e0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    23e2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    23e6:	480a      	ldr	r0, [pc, #40]	; (2410 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    23e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    23ec:	1840      	adds	r0, r0, r1
    msr PSP, r0
    23ee:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    23f2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    23f6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    23f8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    23fa:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    23fe:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2402:	f7ff ff9b 	bl	233c <z_arm_prep_c>
    2406:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    2408:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    240c:	200024e0 	.word	0x200024e0
    ldr r0, =z_interrupt_stacks
    2410:	20002620 	.word	0x20002620

00002414 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2414:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2418:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    241c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    241e:	4672      	mov	r2, lr
	bl z_arm_fault
    2420:	f000 f970 	bl	2704 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2424:	bd01      	pop	{r0, pc}
    2426:	bf00      	nop

00002428 <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2428:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    242a:	4c2b      	ldr	r4, [pc, #172]	; (24d8 <mem_manage_fault.isra.0+0xb0>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    242c:	4606      	mov	r6, r0
    242e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2430:	482a      	ldr	r0, [pc, #168]	; (24dc <mem_manage_fault.isra.0+0xb4>)
    2432:	2145      	movs	r1, #69	; 0x45
    2434:	f005 ff8b 	bl	834e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2438:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    243a:	06d0      	lsls	r0, r2, #27
    243c:	d503      	bpl.n	2446 <mem_manage_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    243e:	2145      	movs	r1, #69	; 0x45
    2440:	4827      	ldr	r0, [pc, #156]	; (24e0 <mem_manage_fault.isra.0+0xb8>)
    2442:	f005 ff84 	bl	834e <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2446:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2448:	0719      	lsls	r1, r3, #28
    244a:	d503      	bpl.n	2454 <mem_manage_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    244c:	2145      	movs	r1, #69	; 0x45
    244e:	4825      	ldr	r0, [pc, #148]	; (24e4 <mem_manage_fault.isra.0+0xbc>)
    2450:	f005 ff7d 	bl	834e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2454:	4c20      	ldr	r4, [pc, #128]	; (24d8 <mem_manage_fault.isra.0+0xb0>)
    2456:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2458:	079a      	lsls	r2, r3, #30
    245a:	d510      	bpl.n	247e <mem_manage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    245c:	2145      	movs	r1, #69	; 0x45
    245e:	4822      	ldr	r0, [pc, #136]	; (24e8 <mem_manage_fault.isra.0+0xc0>)
    2460:	f005 ff75 	bl	834e <z_log_minimal_printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    2464:	6b62      	ldr	r2, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2466:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2468:	061b      	lsls	r3, r3, #24
    246a:	d508      	bpl.n	247e <mem_manage_fault.isra.0+0x56>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    246c:	2145      	movs	r1, #69	; 0x45
    246e:	481f      	ldr	r0, [pc, #124]	; (24ec <mem_manage_fault.isra.0+0xc4>)
    2470:	f005 ff6d 	bl	834e <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    2474:	b11e      	cbz	r6, 247e <mem_manage_fault.isra.0+0x56>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2476:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    247c:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    247e:	4c16      	ldr	r4, [pc, #88]	; (24d8 <mem_manage_fault.isra.0+0xb0>)
    2480:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2482:	07d6      	lsls	r6, r2, #31
    2484:	d503      	bpl.n	248e <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    2486:	2145      	movs	r1, #69	; 0x45
    2488:	4819      	ldr	r0, [pc, #100]	; (24f0 <mem_manage_fault.isra.0+0xc8>)
    248a:	f005 ff60 	bl	834e <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    248e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2490:	0698      	lsls	r0, r3, #26
    2492:	d503      	bpl.n	249c <mem_manage_fault.isra.0+0x74>
		PR_FAULT_INFO(
    2494:	2145      	movs	r1, #69	; 0x45
    2496:	4817      	ldr	r0, [pc, #92]	; (24f4 <mem_manage_fault.isra.0+0xcc>)
    2498:	f005 ff59 	bl	834e <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    249c:	4b0e      	ldr	r3, [pc, #56]	; (24d8 <mem_manage_fault.isra.0+0xb0>)
    249e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    24a0:	06d1      	lsls	r1, r2, #27
    24a2:	d402      	bmi.n	24aa <mem_manage_fault.isra.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    24a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    24a6:	0792      	lsls	r2, r2, #30
    24a8:	d50d      	bpl.n	24c6 <mem_manage_fault.isra.0+0x9e>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    24aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    24ac:	06db      	lsls	r3, r3, #27
    24ae:	d50a      	bpl.n	24c6 <mem_manage_fault.isra.0+0x9e>
    24b0:	4911      	ldr	r1, [pc, #68]	; (24f8 <mem_manage_fault.isra.0+0xd0>)
    24b2:	4812      	ldr	r0, [pc, #72]	; (24fc <mem_manage_fault.isra.0+0xd4>)
    24b4:	f240 124f 	movw	r2, #335	; 0x14f
    24b8:	f005 fe6a 	bl	8190 <printk>
    24bc:	f240 114f 	movw	r1, #335	; 0x14f
    24c0:	480d      	ldr	r0, [pc, #52]	; (24f8 <mem_manage_fault.isra.0+0xd0>)
    24c2:	f005 ff31 	bl	8328 <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    24c6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    24c8:	4a03      	ldr	r2, [pc, #12]	; (24d8 <mem_manage_fault.isra.0+0xb0>)
    24ca:	6a93      	ldr	r3, [r2, #40]	; 0x28
    24cc:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    24d0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    24d2:	7028      	strb	r0, [r5, #0]

	return reason;
}
    24d4:	bd70      	pop	{r4, r5, r6, pc}
    24d6:	bf00      	nop
    24d8:	e000ed00 	.word	0xe000ed00
    24dc:	00009538 	.word	0x00009538
    24e0:	00009553 	.word	0x00009553
    24e4:	0000958b 	.word	0x0000958b
    24e8:	000095a3 	.word	0x000095a3
    24ec:	000095c0 	.word	0x000095c0
    24f0:	000095db 	.word	0x000095db
    24f4:	000095ff 	.word	0x000095ff
    24f8:	00009633 	.word	0x00009633
    24fc:	00008fa6 	.word	0x00008fa6

00002500 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2500:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2502:	4c23      	ldr	r4, [pc, #140]	; (2590 <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2504:	4606      	mov	r6, r0
    2506:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2508:	4822      	ldr	r0, [pc, #136]	; (2594 <bus_fault.isra.0+0x94>)
    250a:	2145      	movs	r1, #69	; 0x45
    250c:	f005 ff1f 	bl	834e <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2510:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2512:	04d1      	lsls	r1, r2, #19
    2514:	d503      	bpl.n	251e <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    2516:	2145      	movs	r1, #69	; 0x45
    2518:	481f      	ldr	r0, [pc, #124]	; (2598 <bus_fault.isra.0+0x98>)
    251a:	f005 ff18 	bl	834e <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    251e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2520:	051a      	lsls	r2, r3, #20
    2522:	d503      	bpl.n	252c <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2524:	2145      	movs	r1, #69	; 0x45
    2526:	481d      	ldr	r0, [pc, #116]	; (259c <bus_fault.isra.0+0x9c>)
    2528:	f005 ff11 	bl	834e <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    252c:	4c18      	ldr	r4, [pc, #96]	; (2590 <bus_fault.isra.0+0x90>)
    252e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2530:	059b      	lsls	r3, r3, #22
    2532:	d510      	bpl.n	2556 <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    2534:	481a      	ldr	r0, [pc, #104]	; (25a0 <bus_fault.isra.0+0xa0>)
    2536:	2145      	movs	r1, #69	; 0x45
    2538:	f005 ff09 	bl	834e <z_log_minimal_printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    253c:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    253e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2540:	0418      	lsls	r0, r3, #16
    2542:	d508      	bpl.n	2556 <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2544:	2145      	movs	r1, #69	; 0x45
    2546:	4817      	ldr	r0, [pc, #92]	; (25a4 <bus_fault.isra.0+0xa4>)
    2548:	f005 ff01 	bl	834e <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    254c:	b11e      	cbz	r6, 2556 <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    254e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2550:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2554:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2556:	4c0e      	ldr	r4, [pc, #56]	; (2590 <bus_fault.isra.0+0x90>)
    2558:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    255a:	0559      	lsls	r1, r3, #21
    255c:	d503      	bpl.n	2566 <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    255e:	2145      	movs	r1, #69	; 0x45
    2560:	4811      	ldr	r0, [pc, #68]	; (25a8 <bus_fault.isra.0+0xa8>)
    2562:	f005 fef4 	bl	834e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2566:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2568:	05da      	lsls	r2, r3, #23
    256a:	d50b      	bpl.n	2584 <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    256c:	2145      	movs	r1, #69	; 0x45
    256e:	480f      	ldr	r0, [pc, #60]	; (25ac <bus_fault.isra.0+0xac>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2570:	f005 feed 	bl	834e <z_log_minimal_printk>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    2574:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2576:	4a06      	ldr	r2, [pc, #24]	; (2590 <bus_fault.isra.0+0x90>)
    2578:	6a93      	ldr	r3, [r2, #40]	; 0x28
    257a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    257e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2580:	7028      	strb	r0, [r5, #0]

	return reason;
}
    2582:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2584:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2586:	049b      	lsls	r3, r3, #18
    2588:	d5f4      	bpl.n	2574 <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    258a:	2145      	movs	r1, #69	; 0x45
    258c:	4808      	ldr	r0, [pc, #32]	; (25b0 <bus_fault.isra.0+0xb0>)
    258e:	e7ef      	b.n	2570 <bus_fault.isra.0+0x70>
    2590:	e000ed00 	.word	0xe000ed00
    2594:	0000966d 	.word	0x0000966d
    2598:	00009688 	.word	0x00009688
    259c:	0000958b 	.word	0x0000958b
    25a0:	0000969e 	.word	0x0000969e
    25a4:	000096bc 	.word	0x000096bc
    25a8:	000096d6 	.word	0x000096d6
    25ac:	000096f6 	.word	0x000096f6
    25b0:	000095ff 	.word	0x000095ff

000025b4 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    25b4:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    25b6:	4c21      	ldr	r4, [pc, #132]	; (263c <usage_fault.isra.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    25b8:	2145      	movs	r1, #69	; 0x45
    25ba:	4821      	ldr	r0, [pc, #132]	; (2640 <usage_fault.isra.0+0x8c>)
    25bc:	f005 fec7 	bl	834e <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    25c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    25c2:	0195      	lsls	r5, r2, #6
    25c4:	d503      	bpl.n	25ce <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    25c6:	2145      	movs	r1, #69	; 0x45
    25c8:	481e      	ldr	r0, [pc, #120]	; (2644 <usage_fault.isra.0+0x90>)
    25ca:	f005 fec0 	bl	834e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    25ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    25d0:	01dc      	lsls	r4, r3, #7
    25d2:	d503      	bpl.n	25dc <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    25d4:	2145      	movs	r1, #69	; 0x45
    25d6:	481c      	ldr	r0, [pc, #112]	; (2648 <usage_fault.isra.0+0x94>)
    25d8:	f005 feb9 	bl	834e <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    25dc:	4d17      	ldr	r5, [pc, #92]	; (263c <usage_fault.isra.0+0x88>)
    25de:	6aac      	ldr	r4, [r5, #40]	; 0x28
    25e0:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    25e4:	d004      	beq.n	25f0 <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    25e6:	2145      	movs	r1, #69	; 0x45
    25e8:	4818      	ldr	r0, [pc, #96]	; (264c <usage_fault.isra.0+0x98>)
    25ea:	f005 feb0 	bl	834e <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    25ee:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    25f0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    25f2:	0318      	lsls	r0, r3, #12
    25f4:	d503      	bpl.n	25fe <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    25f6:	2145      	movs	r1, #69	; 0x45
    25f8:	4815      	ldr	r0, [pc, #84]	; (2650 <usage_fault.isra.0+0x9c>)
    25fa:	f005 fea8 	bl	834e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    25fe:	4d0f      	ldr	r5, [pc, #60]	; (263c <usage_fault.isra.0+0x88>)
    2600:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2602:	0351      	lsls	r1, r2, #13
    2604:	d503      	bpl.n	260e <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2606:	2145      	movs	r1, #69	; 0x45
    2608:	4812      	ldr	r0, [pc, #72]	; (2654 <usage_fault.isra.0+0xa0>)
    260a:	f005 fea0 	bl	834e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    260e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2610:	039a      	lsls	r2, r3, #14
    2612:	d503      	bpl.n	261c <usage_fault.isra.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2614:	2145      	movs	r1, #69	; 0x45
    2616:	4810      	ldr	r0, [pc, #64]	; (2658 <usage_fault.isra.0+0xa4>)
    2618:	f005 fe99 	bl	834e <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    261c:	4d07      	ldr	r5, [pc, #28]	; (263c <usage_fault.isra.0+0x88>)
    261e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2620:	03db      	lsls	r3, r3, #15
    2622:	d503      	bpl.n	262c <usage_fault.isra.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2624:	2145      	movs	r1, #69	; 0x45
    2626:	480d      	ldr	r0, [pc, #52]	; (265c <usage_fault.isra.0+0xa8>)
    2628:	f005 fe91 	bl	834e <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    262c:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    262e:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2630:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2634:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2638:	62ab      	str	r3, [r5, #40]	; 0x28
}
    263a:	bd38      	pop	{r3, r4, r5, pc}
    263c:	e000ed00 	.word	0xe000ed00
    2640:	00009713 	.word	0x00009713
    2644:	00009730 	.word	0x00009730
    2648:	00009748 	.word	0x00009748
    264c:	00009767 	.word	0x00009767
    2650:	00009796 	.word	0x00009796
    2654:	000097b9 	.word	0x000097b9
    2658:	000097e3 	.word	0x000097e3
    265c:	00009802 	.word	0x00009802

00002660 <secure_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void secure_fault(const z_arch_esf_t *esf)
    2660:	b510      	push	{r4, lr}
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    2662:	4c1e      	ldr	r4, [pc, #120]	; (26dc <secure_fault.isra.0+0x7c>)
	PR_FAULT_INFO("***** SECURE FAULT *****");
    2664:	481e      	ldr	r0, [pc, #120]	; (26e0 <secure_fault.isra.0+0x80>)
    2666:	2145      	movs	r1, #69	; 0x45
    2668:	f005 fe71 	bl	834e <z_log_minimal_printk>
	STORE_xFAR(sfar, SAU->SFAR);
    266c:	69a2      	ldr	r2, [r4, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    266e:	6963      	ldr	r3, [r4, #20]
    2670:	0658      	lsls	r0, r3, #25
    2672:	d503      	bpl.n	267c <secure_fault.isra.0+0x1c>
		PR_EXC("  Address: 0x%x", sfar);
    2674:	2145      	movs	r1, #69	; 0x45
    2676:	481b      	ldr	r0, [pc, #108]	; (26e4 <secure_fault.isra.0+0x84>)
    2678:	f005 fe69 	bl	834e <z_log_minimal_printk>
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    267c:	6963      	ldr	r3, [r4, #20]
    267e:	07d9      	lsls	r1, r3, #31
    2680:	d508      	bpl.n	2694 <secure_fault.isra.0+0x34>
		PR_FAULT_INFO("  Invalid entry point");
    2682:	2145      	movs	r1, #69	; 0x45
    2684:	4818      	ldr	r0, [pc, #96]	; (26e8 <secure_fault.isra.0+0x88>)
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state error");
    2686:	f005 fe62 	bl	834e <z_log_minimal_printk>
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    268a:	6963      	ldr	r3, [r4, #20]
    268c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2690:	6163      	str	r3, [r4, #20]
}
    2692:	bd10      	pop	{r4, pc}
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    2694:	6963      	ldr	r3, [r4, #20]
    2696:	079a      	lsls	r2, r3, #30
    2698:	d502      	bpl.n	26a0 <secure_fault.isra.0+0x40>
		PR_FAULT_INFO("  Invalid integrity signature");
    269a:	2145      	movs	r1, #69	; 0x45
    269c:	4813      	ldr	r0, [pc, #76]	; (26ec <secure_fault.isra.0+0x8c>)
    269e:	e7f2      	b.n	2686 <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    26a0:	6963      	ldr	r3, [r4, #20]
    26a2:	075b      	lsls	r3, r3, #29
    26a4:	d502      	bpl.n	26ac <secure_fault.isra.0+0x4c>
		PR_FAULT_INFO("  Invalid exception return");
    26a6:	2145      	movs	r1, #69	; 0x45
    26a8:	4811      	ldr	r0, [pc, #68]	; (26f0 <secure_fault.isra.0+0x90>)
    26aa:	e7ec      	b.n	2686 <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    26ac:	6963      	ldr	r3, [r4, #20]
    26ae:	0718      	lsls	r0, r3, #28
    26b0:	d502      	bpl.n	26b8 <secure_fault.isra.0+0x58>
		PR_FAULT_INFO("  Attribution unit violation");
    26b2:	2145      	movs	r1, #69	; 0x45
    26b4:	480f      	ldr	r0, [pc, #60]	; (26f4 <secure_fault.isra.0+0x94>)
    26b6:	e7e6      	b.n	2686 <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    26b8:	6963      	ldr	r3, [r4, #20]
    26ba:	06d9      	lsls	r1, r3, #27
    26bc:	d502      	bpl.n	26c4 <secure_fault.isra.0+0x64>
		PR_FAULT_INFO("  Invalid transition");
    26be:	2145      	movs	r1, #69	; 0x45
    26c0:	480d      	ldr	r0, [pc, #52]	; (26f8 <secure_fault.isra.0+0x98>)
    26c2:	e7e0      	b.n	2686 <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    26c4:	6963      	ldr	r3, [r4, #20]
    26c6:	069a      	lsls	r2, r3, #26
    26c8:	d502      	bpl.n	26d0 <secure_fault.isra.0+0x70>
		PR_FAULT_INFO("  Lazy state preservation");
    26ca:	2145      	movs	r1, #69	; 0x45
    26cc:	480b      	ldr	r0, [pc, #44]	; (26fc <secure_fault.isra.0+0x9c>)
    26ce:	e7da      	b.n	2686 <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    26d0:	6963      	ldr	r3, [r4, #20]
    26d2:	061b      	lsls	r3, r3, #24
    26d4:	d5d9      	bpl.n	268a <secure_fault.isra.0+0x2a>
		PR_FAULT_INFO("  Lazy state error");
    26d6:	2145      	movs	r1, #69	; 0x45
    26d8:	4809      	ldr	r0, [pc, #36]	; (2700 <secure_fault.isra.0+0xa0>)
    26da:	e7d4      	b.n	2686 <secure_fault.isra.0+0x26>
    26dc:	e000edd0 	.word	0xe000edd0
    26e0:	00009832 	.word	0x00009832
    26e4:	00009850 	.word	0x00009850
    26e8:	00009865 	.word	0x00009865
    26ec:	00009880 	.word	0x00009880
    26f0:	000098a3 	.word	0x000098a3
    26f4:	000098c3 	.word	0x000098c3
    26f8:	000098e5 	.word	0x000098e5
    26fc:	000098ff 	.word	0x000098ff
    2700:	0000991e 	.word	0x0000991e

00002704 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2708:	4b62      	ldr	r3, [pc, #392]	; (2894 <z_arm_fault+0x190>)
{
    270a:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    270c:	685c      	ldr	r4, [r3, #4]
    270e:	2600      	movs	r6, #0
{
    2710:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2712:	f3c4 0708 	ubfx	r7, r4, #0, #9
    2716:	f386 8811 	msr	BASEPRI, r6
    271a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    271e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2722:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2726:	d11e      	bne.n	2766 <z_arm_fault+0x62>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    2728:	f012 0301 	ands.w	r3, r2, #1
    272c:	d039      	beq.n	27a2 <z_arm_fault+0x9e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    272e:	f012 0340 	ands.w	r3, r2, #64	; 0x40
    2732:	f002 0808 	and.w	r8, r2, #8
    2736:	f040 80a6 	bne.w	2886 <z_arm_fault+0x182>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    273a:	0752      	lsls	r2, r2, #29
			secure_esf = (z_arch_esf_t *)msp;
    273c:	bf54      	ite	pl
    273e:	4605      	movpl	r5, r0
	*nested_exc = false;
    2740:	461e      	movmi	r6, r3
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    2742:	682a      	ldr	r2, [r5, #0]
    2744:	4b54      	ldr	r3, [pc, #336]	; (2898 <z_arm_fault+0x194>)
			*nested_exc = true;
    2746:	bf58      	it	pl
    2748:	2601      	movpl	r6, #1
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    274a:	4413      	add	r3, r2
    274c:	2b01      	cmp	r3, #1
		sec_ret_addr = secure_esf->basic.pc;
    274e:	bf98      	it	ls
    2750:	6c2a      	ldrls	r2, [r5, #64]	; 0x40
	PR_FAULT_INFO("  S instruction address:  0x%x", sec_ret_addr);
    2752:	2145      	movs	r1, #69	; 0x45
    2754:	4851      	ldr	r0, [pc, #324]	; (289c <z_arm_fault+0x198>)
    2756:	f005 fdfa 	bl	834e <z_log_minimal_printk>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    275a:	f1b8 0f00 	cmp.w	r8, #0
    275e:	d01d      	beq.n	279c <z_arm_fault+0x98>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    2760:	f3ef 8589 	mrs	r5, PSP_NS

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    2764:	b95d      	cbnz	r5, 277e <z_arm_fault+0x7a>
    2766:	f240 32e1 	movw	r2, #993	; 0x3e1
    276a:	494d      	ldr	r1, [pc, #308]	; (28a0 <z_arm_fault+0x19c>)
    276c:	484d      	ldr	r0, [pc, #308]	; (28a4 <z_arm_fault+0x1a0>)
    276e:	f005 fd0f 	bl	8190 <printk>
    2772:	f240 31e1 	movw	r1, #993	; 0x3e1
    2776:	484a      	ldr	r0, [pc, #296]	; (28a0 <z_arm_fault+0x19c>)
    2778:	f005 fdd6 	bl	8328 <assert_post_action>
    277c:	2500      	movs	r5, #0
	*recoverable = false;
    277e:	2300      	movs	r3, #0
    2780:	1efa      	subs	r2, r7, #3
    2782:	4698      	mov	r8, r3
    2784:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    2788:	4613      	mov	r3, r2
    278a:	2b09      	cmp	r3, #9
    278c:	d869      	bhi.n	2862 <z_arm_fault+0x15e>
    278e:	e8df f003 	tbb	[pc, r3]
    2792:	590a      	.short	0x590a
    2794:	6861385d 	.word	0x6861385d
    2798:	65686868 	.word	0x65686868
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    279c:	f3ef 8588 	mrs	r5, MSP_NS
  return(result);
    27a0:	e7e0      	b.n	2764 <z_arm_fault+0x60>
	*nested_exc = false;
    27a2:	461e      	mov	r6, r3
    27a4:	e7df      	b.n	2766 <z_arm_fault+0x62>
	PR_FAULT_INFO("***** HARD FAULT *****");
    27a6:	2145      	movs	r1, #69	; 0x45
    27a8:	483f      	ldr	r0, [pc, #252]	; (28a8 <z_arm_fault+0x1a4>)
    27aa:	f005 fdd0 	bl	834e <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    27ae:	4b39      	ldr	r3, [pc, #228]	; (2894 <z_arm_fault+0x190>)
	*recoverable = false;
    27b0:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    27b4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    27b6:	f014 0402 	ands.w	r4, r4, #2
    27ba:	d004      	beq.n	27c6 <z_arm_fault+0xc2>
		PR_EXC("  Bus fault on vector table read");
    27bc:	2145      	movs	r1, #69	; 0x45
    27be:	483b      	ldr	r0, [pc, #236]	; (28ac <z_arm_fault+0x1a8>)
	PR_FAULT_INFO(
    27c0:	f005 fdc5 	bl	834e <z_log_minimal_printk>
    27c4:	e048      	b.n	2858 <z_arm_fault+0x154>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    27c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    27c8:	005b      	lsls	r3, r3, #1
    27ca:	d522      	bpl.n	2812 <z_arm_fault+0x10e>
		PR_EXC("  Fault escalation (see below)");
    27cc:	2145      	movs	r1, #69	; 0x45
    27ce:	4838      	ldr	r0, [pc, #224]	; (28b0 <z_arm_fault+0x1ac>)
    27d0:	f005 fdbd 	bl	834e <z_log_minimal_printk>
		if (SCB_MMFSR != 0) {
    27d4:	4b37      	ldr	r3, [pc, #220]	; (28b4 <z_arm_fault+0x1b0>)
    27d6:	781b      	ldrb	r3, [r3, #0]
    27d8:	b133      	cbz	r3, 27e8 <z_arm_fault+0xe4>
			reason = mem_manage_fault(esf, 1, recoverable);
    27da:	2001      	movs	r0, #1
    27dc:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    27e0:	f7ff fe22 	bl	2428 <mem_manage_fault.isra.0>
    27e4:	4604      	mov	r4, r0
		break;
    27e6:	e014      	b.n	2812 <z_arm_fault+0x10e>
		} else if (SCB_BFSR != 0) {
    27e8:	4b33      	ldr	r3, [pc, #204]	; (28b8 <z_arm_fault+0x1b4>)
    27ea:	781b      	ldrb	r3, [r3, #0]
    27ec:	b12b      	cbz	r3, 27fa <z_arm_fault+0xf6>
			reason = bus_fault(esf, 1, recoverable);
    27ee:	2001      	movs	r0, #1
    27f0:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    27f4:	f7ff fe84 	bl	2500 <bus_fault.isra.0>
    27f8:	e7f4      	b.n	27e4 <z_arm_fault+0xe0>
		} else if (SCB_UFSR != 0) {
    27fa:	4b30      	ldr	r3, [pc, #192]	; (28bc <z_arm_fault+0x1b8>)
    27fc:	881b      	ldrh	r3, [r3, #0]
    27fe:	b29b      	uxth	r3, r3
    2800:	b113      	cbz	r3, 2808 <z_arm_fault+0x104>
		reason = usage_fault(esf);
    2802:	f7ff fed7 	bl	25b4 <usage_fault.isra.0>
    2806:	e7ed      	b.n	27e4 <z_arm_fault+0xe0>
		} else if (SAU->SFSR != 0) {
    2808:	4b2d      	ldr	r3, [pc, #180]	; (28c0 <z_arm_fault+0x1bc>)
    280a:	695b      	ldr	r3, [r3, #20]
    280c:	b10b      	cbz	r3, 2812 <z_arm_fault+0x10e>
			secure_fault(esf);
    280e:	f7ff ff27 	bl	2660 <secure_fault.isra.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2812:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2816:	b993      	cbnz	r3, 283e <z_arm_fault+0x13a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2818:	2220      	movs	r2, #32
    281a:	4629      	mov	r1, r5
    281c:	a802      	add	r0, sp, #8
    281e:	f005 fe9d 	bl	855c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2822:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2824:	b356      	cbz	r6, 287c <z_arm_fault+0x178>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2826:	f3c3 0208 	ubfx	r2, r3, #0, #9
    282a:	b922      	cbnz	r2, 2836 <z_arm_fault+0x132>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    282c:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2830:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2834:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2836:	4620      	mov	r0, r4
    2838:	a902      	add	r1, sp, #8
    283a:	f7ff fd4d 	bl	22d8 <z_arm_fatal_error>
}
    283e:	b00a      	add	sp, #40	; 0x28
    2840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    2844:	2000      	movs	r0, #0
    2846:	f10d 0107 	add.w	r1, sp, #7
    284a:	e7c9      	b.n	27e0 <z_arm_fault+0xdc>
		reason = bus_fault(esf, 0, recoverable);
    284c:	2000      	movs	r0, #0
    284e:	f10d 0107 	add.w	r1, sp, #7
    2852:	e7cf      	b.n	27f4 <z_arm_fault+0xf0>
		secure_fault(esf);
    2854:	f7ff ff04 	bl	2660 <secure_fault.isra.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2858:	2400      	movs	r4, #0
}
    285a:	e7da      	b.n	2812 <z_arm_fault+0x10e>
	PR_FAULT_INFO(
    285c:	2145      	movs	r1, #69	; 0x45
    285e:	4819      	ldr	r0, [pc, #100]	; (28c4 <z_arm_fault+0x1c0>)
    2860:	e7ae      	b.n	27c0 <z_arm_fault+0xbc>
	PR_FAULT_INFO("***** %s %d) *****",
    2862:	4919      	ldr	r1, [pc, #100]	; (28c8 <z_arm_fault+0x1c4>)
    2864:	f414 7ff8 	tst.w	r4, #496	; 0x1f0
    2868:	4a18      	ldr	r2, [pc, #96]	; (28cc <z_arm_fault+0x1c8>)
    286a:	4819      	ldr	r0, [pc, #100]	; (28d0 <z_arm_fault+0x1cc>)
    286c:	bf08      	it	eq
    286e:	460a      	moveq	r2, r1
    2870:	f1a7 0310 	sub.w	r3, r7, #16
    2874:	2145      	movs	r1, #69	; 0x45
    2876:	f005 fd6a 	bl	834e <z_log_minimal_printk>
    287a:	e7ed      	b.n	2858 <z_arm_fault+0x154>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    287c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2880:	f023 0301 	bic.w	r3, r3, #1
    2884:	e7d6      	b.n	2834 <z_arm_fault+0x130>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2886:	f1b8 0f00 	cmp.w	r8, #0
    288a:	f47f af6b 	bne.w	2764 <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)msp;
    288e:	4605      	mov	r5, r0
			*nested_exc = true;
    2890:	2601      	movs	r6, #1
    2892:	e767      	b.n	2764 <z_arm_fault+0x60>
    2894:	e000ed00 	.word	0xe000ed00
    2898:	0105eda6 	.word	0x0105eda6
    289c:	00009964 	.word	0x00009964
    28a0:	00009633 	.word	0x00009633
    28a4:	00008fa6 	.word	0x00008fa6
    28a8:	00009988 	.word	0x00009988
    28ac:	000099a4 	.word	0x000099a4
    28b0:	000099ca 	.word	0x000099ca
    28b4:	e000ed28 	.word	0xe000ed28
    28b8:	e000ed29 	.word	0xe000ed29
    28bc:	e000ed2a 	.word	0xe000ed2a
    28c0:	e000edd0 	.word	0xe000edd0
    28c4:	000099ee 	.word	0x000099ee
    28c8:	00009936 	.word	0x00009936
    28cc:	0000994b 	.word	0x0000994b
    28d0:	00009a17 	.word	0x00009a17

000028d4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    28d4:	4b04      	ldr	r3, [pc, #16]	; (28e8 <z_arm_fault_init+0x14>)
    28d6:	695a      	ldr	r2, [r3, #20]
    28d8:	f042 0210 	orr.w	r2, r2, #16
    28dc:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    28de:	695a      	ldr	r2, [r3, #20]
    28e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    28e4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    28e6:	4770      	bx	lr
    28e8:	e000ed00 	.word	0xe000ed00

000028ec <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    28ec:	4b04      	ldr	r3, [pc, #16]	; (2900 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    28ee:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    28f0:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    28f2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    28f4:	d003      	beq.n	28fe <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    28f6:	4903      	ldr	r1, [pc, #12]	; (2904 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    28f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    28fc:	600a      	str	r2, [r1, #0]

000028fe <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    28fe:	4770      	bx	lr
	ldr r3, =_kernel
    2900:	200009d0 	.word	0x200009d0
	ldr r1, =_SCS_ICSR
    2904:	e000ed04 	.word	0xe000ed04

00002908 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    2908:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    290c:	4905      	ldr	r1, [pc, #20]	; (2924 <sys_arch_reboot+0x1c>)
    290e:	4b06      	ldr	r3, [pc, #24]	; (2928 <sys_arch_reboot+0x20>)
    2910:	68ca      	ldr	r2, [r1, #12]
    2912:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2916:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2918:	60cb      	str	r3, [r1, #12]
    291a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    291e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2920:	e7fd      	b.n	291e <sys_arch_reboot+0x16>
    2922:	bf00      	nop
    2924:	e000ed00 	.word	0xe000ed00
    2928:	05fa0004 	.word	0x05fa0004

0000292c <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    292c:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    292e:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2930:	4a05      	ldr	r2, [pc, #20]	; (2948 <z_arm_clear_arm_mpu_config+0x1c>)
    2932:	6811      	ldr	r1, [r2, #0]
	int num_regions =
    2934:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
    2938:	428b      	cmp	r3, r1
    293a:	d100      	bne.n	293e <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    293c:	4770      	bx	lr
  mpu->RNR = rnr;
    293e:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    2940:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    2942:	3301      	adds	r3, #1
    2944:	e7f8      	b.n	2938 <z_arm_clear_arm_mpu_config+0xc>
    2946:	bf00      	nop
    2948:	e000ed90 	.word	0xe000ed90

0000294c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    294c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    294e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2950:	2400      	movs	r4, #0
    2952:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2956:	f7ff ffe9 	bl	292c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    295a:	4a0e      	ldr	r2, [pc, #56]	; (2994 <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
    295c:	4623      	mov	r3, r4
    295e:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
    2960:	f04f 34ff 	mov.w	r4, #4294967295
    2964:	f103 0020 	add.w	r0, r3, #32
    2968:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    296a:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    296c:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    2970:	d1f8      	bne.n	2964 <z_arm_init_arch_hw_at_boot+0x18>
    2972:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2974:	f04f 30ff 	mov.w	r0, #4294967295
    2978:	f103 0260 	add.w	r2, r3, #96	; 0x60
    297c:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    297e:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2980:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2984:	d1f8      	bne.n	2978 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    2986:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2988:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    298c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2990:	bd10      	pop	{r4, pc}
    2992:	bf00      	nop
    2994:	e000e100 	.word	0xe000e100

00002998 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2998:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    299a:	2120      	movs	r1, #32
    299c:	4803      	ldr	r0, [pc, #12]	; (29ac <z_arm_interrupt_init+0x14>)
    299e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    29a0:	3301      	adds	r3, #1
    29a2:	2b41      	cmp	r3, #65	; 0x41
    29a4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    29a8:	d1f9      	bne.n	299e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    29aa:	4770      	bx	lr
    29ac:	e000e100 	.word	0xe000e100

000029b0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    29b0:	4b06      	ldr	r3, [pc, #24]	; (29cc <z_impl_k_thread_abort+0x1c>)
    29b2:	689b      	ldr	r3, [r3, #8]
    29b4:	4283      	cmp	r3, r0
    29b6:	d107      	bne.n	29c8 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    29b8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    29bc:	b123      	cbz	r3, 29c8 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    29be:	4a04      	ldr	r2, [pc, #16]	; (29d0 <z_impl_k_thread_abort+0x20>)
    29c0:	6853      	ldr	r3, [r2, #4]
    29c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    29c6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    29c8:	f002 bad4 	b.w	4f74 <z_thread_abort>
    29cc:	200009d0 	.word	0x200009d0
    29d0:	e000ed00 	.word	0xe000ed00

000029d4 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    29d4:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    29d6:	4b0c      	ldr	r3, [pc, #48]	; (2a08 <tz_nonsecure_state_setup+0x34>)
    29d8:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    29da:	6803      	ldr	r3, [r0, #0]
    29dc:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    29e0:	6843      	ldr	r3, [r0, #4]
    29e2:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    29e6:	7b02      	ldrb	r2, [r0, #12]
    29e8:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    29ec:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    29f0:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    29f4:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    29f6:	bf48      	it	mi
    29f8:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    29fc:	b109      	cbz	r1, 2a02 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    29fe:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    2a02:	f383 8894 	msr	CONTROL_NS, r3
}
    2a06:	4770      	bx	lr
    2a08:	e002ed00 	.word	0xe002ed00

00002a0c <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2a0c:	4a08      	ldr	r2, [pc, #32]	; (2a30 <tz_nbanked_exception_target_state_set+0x24>)
    2a0e:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    2a10:	b148      	cbz	r0, 2a26 <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    2a12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2a16:	041b      	lsls	r3, r3, #16
    2a18:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    2a1a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    2a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    2a22:	60d3      	str	r3, [r2, #12]
}
    2a24:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2a26:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    2a28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2a2c:	e7f5      	b.n	2a1a <tz_nbanked_exception_target_state_set+0xe>
    2a2e:	bf00      	nop
    2a30:	e000ed00 	.word	0xe000ed00

00002a34 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2a34:	4a08      	ldr	r2, [pc, #32]	; (2a58 <tz_nonsecure_exception_prio_config+0x24>)
    2a36:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    2a38:	b140      	cbz	r0, 2a4c <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2a3a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    2a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    2a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    2a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    2a48:	60d3      	str	r3, [r2, #12]
}
    2a4a:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    2a4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    2a50:	041b      	lsls	r3, r3, #16
    2a52:	0c1b      	lsrs	r3, r3, #16
    2a54:	e7f4      	b.n	2a40 <tz_nonsecure_exception_prio_config+0xc>
    2a56:	bf00      	nop
    2a58:	e000ed00 	.word	0xe000ed00

00002a5c <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2a5c:	4a08      	ldr	r2, [pc, #32]	; (2a80 <tz_nonsecure_system_reset_req_block+0x24>)
    2a5e:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    2a60:	b140      	cbz	r0, 2a74 <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    2a62:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    2a64:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    2a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    2a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    2a70:	60d3      	str	r3, [r2, #12]
}
    2a72:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    2a74:	f023 0308 	bic.w	r3, r3, #8
    2a78:	041b      	lsls	r3, r3, #16
    2a7a:	0c1b      	lsrs	r3, r3, #16
    2a7c:	e7f4      	b.n	2a68 <tz_nonsecure_system_reset_req_block+0xc>
    2a7e:	bf00      	nop
    2a80:	e000ed00 	.word	0xe000ed00

00002a84 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    2a84:	4a03      	ldr	r2, [pc, #12]	; (2a94 <tz_nonsecure_fpu_access_enable+0x10>)
    2a86:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2a8a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2a8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    2a92:	4770      	bx	lr
    2a94:	e000ed00 	.word	0xe000ed00

00002a98 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    2a98:	4b08      	ldr	r3, [pc, #32]	; (2abc <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    2a9a:	681a      	ldr	r2, [r3, #0]
    2a9c:	b118      	cbz	r0, 2aa6 <tz_sau_configure+0xe>
    2a9e:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    2aa2:	601a      	str	r2, [r3, #0]
		}
	}
}
    2aa4:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    2aa6:	f022 0201 	bic.w	r2, r2, #1
    2aaa:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    2aac:	681a      	ldr	r2, [r3, #0]
		if (allns) {
    2aae:	b111      	cbz	r1, 2ab6 <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    2ab0:	f042 0202 	orr.w	r2, r2, #2
    2ab4:	e7f5      	b.n	2aa2 <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    2ab6:	f022 0202 	bic.w	r2, r2, #2
    2aba:	e7f2      	b.n	2aa2 <tz_sau_configure+0xa>
    2abc:	e000edd0 	.word	0xe000edd0

00002ac0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    2ac0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2ac2:	4c09      	ldr	r4, [pc, #36]	; (2ae8 <z_arm_configure_static_mpu_regions+0x28>)
    2ac4:	4a09      	ldr	r2, [pc, #36]	; (2aec <z_arm_configure_static_mpu_regions+0x2c>)
    2ac6:	4623      	mov	r3, r4
    2ac8:	2101      	movs	r1, #1
    2aca:	4809      	ldr	r0, [pc, #36]	; (2af0 <z_arm_configure_static_mpu_regions+0x30>)
    2acc:	f000 f91a 	bl	2d04 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    2ad0:	2300      	movs	r3, #0
    2ad2:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    2ad4:	4b07      	ldr	r3, [pc, #28]	; (2af4 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2ad6:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    2ad8:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2ada:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    2adc:	9301      	str	r3, [sp, #4]
    2ade:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2ae0:	f000 f92c 	bl	2d3c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    2ae4:	b004      	add	sp, #16
    2ae6:	bd10      	pop	{r4, pc}
    2ae8:	20010000 	.word	0x20010000
    2aec:	20000000 	.word	0x20000000
    2af0:	00008d70 	.word	0x00008d70
    2af4:	20000120 	.word	0x20000120

00002af8 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    2af8:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2afa:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    2afc:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2afe:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    2b02:	f004 031f 	and.w	r3, r4, #31
    2b06:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2b08:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2b0a:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2b0c:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    2b10:	4904      	ldr	r1, [pc, #16]	; (2b24 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2b12:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    2b16:	f043 0301 	orr.w	r3, r3, #1
    2b1a:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    2b1c:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    2b1e:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    2b20:	bd10      	pop	{r4, pc}
    2b22:	bf00      	nop
    2b24:	e000ed90 	.word	0xe000ed90

00002b28 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    2b28:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    2b2a:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    2b2c:	680c      	ldr	r4, [r1, #0]
{
    2b2e:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    2b30:	890a      	ldrh	r2, [r1, #8]
    2b32:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    2b34:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2b36:	3b01      	subs	r3, #1
    2b38:	f024 041f 	bic.w	r4, r4, #31
    2b3c:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    2b3e:	f002 021f 	and.w	r2, r2, #31
    2b42:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2b46:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    2b4a:	280f      	cmp	r0, #15
    2b4c:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    2b4e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2b52:	9303      	str	r3, [sp, #12]
    2b54:	d909      	bls.n	2b6a <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2b56:	4602      	mov	r2, r0
    2b58:	2145      	movs	r1, #69	; 0x45
    2b5a:	4806      	ldr	r0, [pc, #24]	; (2b74 <mpu_configure_region+0x4c>)
    2b5c:	f005 fbf7 	bl	834e <z_log_minimal_printk>
    2b60:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    2b64:	4620      	mov	r0, r4
    2b66:	b005      	add	sp, #20
    2b68:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    2b6a:	4669      	mov	r1, sp
    2b6c:	f7ff ffc4 	bl	2af8 <region_init>
	return region_allocate_and_init(index,
    2b70:	e7f8      	b.n	2b64 <mpu_configure_region+0x3c>
    2b72:	bf00      	nop
    2b74:	00009a33 	.word	0x00009a33

00002b78 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b7c:	4689      	mov	r9, r1
    2b7e:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2b80:	4606      	mov	r6, r0
    2b82:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    2b86:	4d52      	ldr	r5, [pc, #328]	; (2cd0 <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2b88:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    2b8a:	45c8      	cmp	r8, r9
    2b8c:	da23      	bge.n	2bd6 <mpu_configure_regions_and_partition.constprop.0+0x5e>
		if (regions[i].size == 0U) {
    2b8e:	6877      	ldr	r7, [r6, #4]
    2b90:	2f00      	cmp	r7, #0
    2b92:	d042      	beq.n	2c1a <mpu_configure_regions_and_partition.constprop.0+0xa2>
		&&
    2b94:	2f1f      	cmp	r7, #31
    2b96:	d917      	bls.n	2bc8 <mpu_configure_regions_and_partition.constprop.0+0x50>
		&&
    2b98:	06fb      	lsls	r3, r7, #27
    2b9a:	d115      	bne.n	2bc8 <mpu_configure_regions_and_partition.constprop.0+0x50>
		((part->start &
    2b9c:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    2ba0:	f01a 0f1f 	tst.w	sl, #31
    2ba4:	d110      	bne.n	2bc8 <mpu_configure_regions_and_partition.constprop.0+0x50>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2ba6:	4650      	mov	r0, sl
    2ba8:	f005 fc87 	bl	84ba <arm_cmse_mpu_region_get>
    2bac:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2bae:	eb07 000a 	add.w	r0, r7, sl
    2bb2:	3801      	subs	r0, #1
    2bb4:	f005 fc81 	bl	84ba <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2bb8:	4583      	cmp	fp, r0
    2bba:	d010      	beq.n	2bde <mpu_configure_regions_and_partition.constprop.0+0x66>
	return -EINVAL;
    2bbc:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    2bc0:	465a      	mov	r2, fp
    2bc2:	2145      	movs	r1, #69	; 0x45
    2bc4:	4843      	ldr	r0, [pc, #268]	; (2cd4 <mpu_configure_regions_and_partition.constprop.0+0x15c>)
    2bc6:	e002      	b.n	2bce <mpu_configure_regions_and_partition.constprop.0+0x56>
			LOG_ERR("Partition %u: sanity check failed.", i);
    2bc8:	4642      	mov	r2, r8
    2bca:	2145      	movs	r1, #69	; 0x45
    2bcc:	4842      	ldr	r0, [pc, #264]	; (2cd8 <mpu_configure_regions_and_partition.constprop.0+0x160>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2bce:	f005 fbbe 	bl	834e <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    2bd2:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    2bd6:	4620      	mov	r0, r4
    2bd8:	b005      	add	sp, #20
    2bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    2bde:	f11b 0f16 	cmn.w	fp, #22
    2be2:	d0ed      	beq.n	2bc0 <mpu_configure_regions_and_partition.constprop.0+0x48>
			(u_reg_index > (reg_index - 1))) {
    2be4:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    2be6:	455b      	cmp	r3, fp
    2be8:	dbea      	blt.n	2bc0 <mpu_configure_regions_and_partition.constprop.0+0x48>
	MPU->RNR = index;
    2bea:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2bee:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    2bf0:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2bf4:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2bf6:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    2bfa:	e9d6 3200 	ldrd	r3, r2, [r6]
    2bfe:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    2c00:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2c02:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    2c06:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    2c0a:	d11c      	bne.n	2c46 <mpu_configure_regions_and_partition.constprop.0+0xce>
    2c0c:	4557      	cmp	r7, sl
    2c0e:	d108      	bne.n	2c22 <mpu_configure_regions_and_partition.constprop.0+0xaa>
			mpu_configure_region(u_reg_index, &regions[i]);
    2c10:	4631      	mov	r1, r6
    2c12:	fa5f f08b 	uxtb.w	r0, fp
    2c16:	f7ff ff87 	bl	2b28 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    2c1a:	f108 0801 	add.w	r8, r8, #1
    2c1e:	360c      	adds	r6, #12
    2c20:	e7b3      	b.n	2b8a <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    2c22:	4631      	mov	r1, r6
	MPU->RNR = index;
    2c24:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2c28:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    2c2a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2c2e:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    2c32:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2c34:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    2c36:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    2c38:	f7ff ff76 	bl	2b28 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    2c3c:	f110 0f16 	cmn.w	r0, #22
    2c40:	d0c7      	beq.n	2bd2 <mpu_configure_regions_and_partition.constprop.0+0x5a>
			reg_index++;
    2c42:	1c44      	adds	r4, r0, #1
    2c44:	e7e9      	b.n	2c1a <mpu_configure_regions_and_partition.constprop.0+0xa2>
		} else if (reg_last == u_reg_last) {
    2c46:	3b01      	subs	r3, #1
    2c48:	4557      	cmp	r7, sl
    2c4a:	b2e0      	uxtb	r0, r4
    2c4c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    2c50:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
    2c54:	d106      	bne.n	2c64 <mpu_configure_regions_and_partition.constprop.0+0xec>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2c56:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    2c58:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2c5a:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    2c5e:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2c60:	612b      	str	r3, [r5, #16]
			reg_index =
    2c62:	e7e9      	b.n	2c38 <mpu_configure_regions_and_partition.constprop.0+0xc0>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2c64:	6929      	ldr	r1, [r5, #16]
    2c66:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    2c6a:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2c6c:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    2c6e:	4631      	mov	r1, r6
    2c70:	f7ff ff5a 	bl	2b28 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    2c74:	f110 0f16 	cmn.w	r0, #22
    2c78:	d0ab      	beq.n	2bd2 <mpu_configure_regions_and_partition.constprop.0+0x5a>
	MPU->RNR = index;
    2c7a:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    2c7e:	68ea      	ldr	r2, [r5, #12]
    2c80:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    2c84:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
    2c86:	f362 0304 	bfi	r3, r2, #0, #5
    2c8a:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2c8e:	692b      	ldr	r3, [r5, #16]
    2c90:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2c94:	085b      	lsrs	r3, r3, #1
    2c96:	f363 1247 	bfi	r2, r3, #5, #3
    2c9a:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    2c9e:	e9d6 3200 	ldrd	r3, r2, [r6]
    2ca2:	4413      	add	r3, r2
    2ca4:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    2ca6:	f023 031f 	bic.w	r3, r3, #31
    2caa:	443b      	add	r3, r7
			reg_index++;
    2cac:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    2cae:	eba3 0a0a 	sub.w	sl, r3, sl
    2cb2:	b2e0      	uxtb	r0, r4
    2cb4:	f02a 031f 	bic.w	r3, sl, #31
	if (index > (get_num_regions() - 1U)) {
    2cb8:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    2cba:	9303      	str	r3, [sp, #12]
    2cbc:	d903      	bls.n	2cc6 <mpu_configure_regions_and_partition.constprop.0+0x14e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2cbe:	4602      	mov	r2, r0
    2cc0:	2145      	movs	r1, #69	; 0x45
    2cc2:	4806      	ldr	r0, [pc, #24]	; (2cdc <mpu_configure_regions_and_partition.constprop.0+0x164>)
    2cc4:	e783      	b.n	2bce <mpu_configure_regions_and_partition.constprop.0+0x56>
	region_init(index, region_conf);
    2cc6:	4669      	mov	r1, sp
    2cc8:	f7ff ff16 	bl	2af8 <region_init>
    2ccc:	e7b9      	b.n	2c42 <mpu_configure_regions_and_partition.constprop.0+0xca>
    2cce:	bf00      	nop
    2cd0:	e000ed90 	.word	0xe000ed90
    2cd4:	00009a86 	.word	0x00009a86
    2cd8:	00009a5e 	.word	0x00009a5e
    2cdc:	00009a33 	.word	0x00009a33

00002ce0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2ce0:	2205      	movs	r2, #5
    2ce2:	4b03      	ldr	r3, [pc, #12]	; (2cf0 <arm_core_mpu_enable+0x10>)
    2ce4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2ce6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2cea:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2cee:	4770      	bx	lr
    2cf0:	e000ed90 	.word	0xe000ed90

00002cf4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2cf4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2cf8:	2200      	movs	r2, #0
    2cfa:	4b01      	ldr	r3, [pc, #4]	; (2d00 <arm_core_mpu_disable+0xc>)
    2cfc:	605a      	str	r2, [r3, #4]
}
    2cfe:	4770      	bx	lr
    2d00:	e000ed90 	.word	0xe000ed90

00002d04 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2d04:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2d06:	4c0a      	ldr	r4, [pc, #40]	; (2d30 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    2d08:	7822      	ldrb	r2, [r4, #0]
    2d0a:	f7ff ff35 	bl	2b78 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2d0e:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    2d10:	3016      	adds	r0, #22
    2d12:	d10c      	bne.n	2d2e <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2d14:	4907      	ldr	r1, [pc, #28]	; (2d34 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    2d16:	4808      	ldr	r0, [pc, #32]	; (2d38 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    2d18:	f240 1205 	movw	r2, #261	; 0x105
    2d1c:	f005 fa38 	bl	8190 <printk>
			regions_num);
	}
}
    2d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2d24:	f240 1105 	movw	r1, #261	; 0x105
    2d28:	4802      	ldr	r0, [pc, #8]	; (2d34 <arm_core_mpu_configure_static_mpu_regions+0x30>)
    2d2a:	f005 bafd 	b.w	8328 <assert_post_action>
}
    2d2e:	bd10      	pop	{r4, pc}
    2d30:	20001320 	.word	0x20001320
    2d34:	00009aae 	.word	0x00009aae
    2d38:	00008fa6 	.word	0x00008fa6

00002d3c <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    2d3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d40:	4d2d      	ldr	r5, [pc, #180]	; (2df8 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>)
    2d42:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2d44:	4606      	mov	r6, r0
    2d46:	f04f 0800 	mov.w	r8, #0
    2d4a:	46ab      	mov	fp, r5
	MPU->RNR = index;
    2d4c:	4f2b      	ldr	r7, [pc, #172]	; (2dfc <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2d4e:	45d0      	cmp	r8, sl
    2d50:	db02      	blt.n	2d58 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    2d52:	b003      	add	sp, #12
    2d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    2d58:	f8d6 9004 	ldr.w	r9, [r6, #4]
    2d5c:	f1b9 0f00 	cmp.w	r9, #0
    2d60:	d044      	beq.n	2dec <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    2d62:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2d64:	4608      	mov	r0, r1
    2d66:	9101      	str	r1, [sp, #4]
    2d68:	f005 fba7 	bl	84ba <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2d6c:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2d6e:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2d70:	eb09 0001 	add.w	r0, r9, r1
    2d74:	3801      	subs	r0, #1
    2d76:	f005 fba0 	bl	84ba <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2d7a:	4284      	cmp	r4, r0
    2d7c:	f04f 0214 	mov.w	r2, #20
    2d80:	4b1f      	ldr	r3, [pc, #124]	; (2e00 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
    2d82:	d013      	beq.n	2dac <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    2d84:	f06f 0315 	mvn.w	r3, #21
    2d88:	fb02 f808 	mul.w	r8, r2, r8
    2d8c:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    2d90:	f240 1215 	movw	r2, #277	; 0x115
    2d94:	491b      	ldr	r1, [pc, #108]	; (2e04 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    2d96:	481c      	ldr	r0, [pc, #112]	; (2e08 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    2d98:	f005 f9fa 	bl	8190 <printk>
    2d9c:	f240 1115 	movw	r1, #277	; 0x115
    2da0:	4818      	ldr	r0, [pc, #96]	; (2e04 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
}
    2da2:	b003      	add	sp, #12
    2da4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    2da8:	f005 babe 	b.w	8328 <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    2dac:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    2db0:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    2db2:	d0ed      	beq.n	2d90 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    2db4:	7819      	ldrb	r1, [r3, #0]
    2db6:	42a1      	cmp	r1, r4
    2db8:	ddea      	ble.n	2d90 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    2dba:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    2dbe:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    2dc0:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    2dc2:	68fc      	ldr	r4, [r7, #12]
    2dc4:	f100 0108 	add.w	r1, r0, #8
    2dc8:	7b00      	ldrb	r0, [r0, #12]
    2dca:	f364 0004 	bfi	r0, r4, #0, #5
    2dce:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2dd0:	6938      	ldr	r0, [r7, #16]
    2dd2:	790c      	ldrb	r4, [r1, #4]
    2dd4:	0840      	lsrs	r0, r0, #1
    2dd6:	f360 1447 	bfi	r4, r0, #5, #3
    2dda:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    2ddc:	68f9      	ldr	r1, [r7, #12]
    2dde:	f021 011f 	bic.w	r1, r1, #31
    2de2:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    2de4:	6939      	ldr	r1, [r7, #16]
    2de6:	f021 011f 	bic.w	r1, r1, #31
    2dea:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2dec:	f108 0801 	add.w	r8, r8, #1
    2df0:	3514      	adds	r5, #20
    2df2:	360c      	adds	r6, #12
    2df4:	e7ab      	b.n	2d4e <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    2df6:	bf00      	nop
    2df8:	200009a8 	.word	0x200009a8
    2dfc:	e000ed90 	.word	0xe000ed90
    2e00:	20001320 	.word	0x20001320
    2e04:	00009aae 	.word	0x00009aae
    2e08:	00008fa6 	.word	0x00008fa6

00002e0c <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    2e0c:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2e0e:	4d1b      	ldr	r5, [pc, #108]	; (2e7c <z_arm_mpu_init+0x70>)
    2e10:	682e      	ldr	r6, [r5, #0]
    2e12:	2e10      	cmp	r6, #16
    2e14:	d90d      	bls.n	2e32 <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    2e16:	f44f 729e 	mov.w	r2, #316	; 0x13c
    2e1a:	4919      	ldr	r1, [pc, #100]	; (2e80 <z_arm_mpu_init+0x74>)
    2e1c:	4819      	ldr	r0, [pc, #100]	; (2e84 <z_arm_mpu_init+0x78>)
    2e1e:	f005 f9b7 	bl	8190 <printk>
    2e22:	4817      	ldr	r0, [pc, #92]	; (2e80 <z_arm_mpu_init+0x74>)
    2e24:	f44f 719e 	mov.w	r1, #316	; 0x13c
    2e28:	f005 fa7e 	bl	8328 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    2e2c:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    2e30:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
    2e32:	f7ff ff5f 	bl	2cf4 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2e36:	2000      	movs	r0, #0
	MPU->MAIR0 =
    2e38:	4c13      	ldr	r4, [pc, #76]	; (2e88 <z_arm_mpu_init+0x7c>)
    2e3a:	4a14      	ldr	r2, [pc, #80]	; (2e8c <z_arm_mpu_init+0x80>)
    2e3c:	6322      	str	r2, [r4, #48]	; 0x30
    2e3e:	4286      	cmp	r6, r0
    2e40:	d115      	bne.n	2e6e <z_arm_mpu_init+0x62>
	static_regions_num = mpu_config.num_regions;
    2e42:	4b13      	ldr	r3, [pc, #76]	; (2e90 <z_arm_mpu_init+0x84>)
    2e44:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
    2e46:	f7ff ff4b 	bl	2ce0 <arm_core_mpu_enable>
	__ASSERT(
    2e4a:	6823      	ldr	r3, [r4, #0]
    2e4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2e50:	2b10      	cmp	r3, #16
    2e52:	d00a      	beq.n	2e6a <z_arm_mpu_init+0x5e>
    2e54:	490a      	ldr	r1, [pc, #40]	; (2e80 <z_arm_mpu_init+0x74>)
    2e56:	480b      	ldr	r0, [pc, #44]	; (2e84 <z_arm_mpu_init+0x78>)
    2e58:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    2e5c:	f005 f998 	bl	8190 <printk>
    2e60:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    2e64:	4806      	ldr	r0, [pc, #24]	; (2e80 <z_arm_mpu_init+0x74>)
    2e66:	f005 fa5f 	bl	8328 <assert_post_action>
	return 0;
    2e6a:	2000      	movs	r0, #0
    2e6c:	e7e0      	b.n	2e30 <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    2e6e:	6869      	ldr	r1, [r5, #4]
    2e70:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    2e74:	f7ff fe40 	bl	2af8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2e78:	3001      	adds	r0, #1
    2e7a:	e7e0      	b.n	2e3e <z_arm_mpu_init+0x32>
    2e7c:	00008d7c 	.word	0x00008d7c
    2e80:	00009aae 	.word	0x00009aae
    2e84:	00008fa6 	.word	0x00008fa6
    2e88:	e000ed90 	.word	0xe000ed90
    2e8c:	0044ffaa 	.word	0x0044ffaa
    2e90:	20001320 	.word	0x20001320

00002e94 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2e94:	4b01      	ldr	r3, [pc, #4]	; (2e9c <__stdout_hook_install+0x8>)
    2e96:	6018      	str	r0, [r3, #0]
}
    2e98:	4770      	bx	lr
    2e9a:	bf00      	nop
    2e9c:	20000028 	.word	0x20000028

00002ea0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2ea2:	794b      	ldrb	r3, [r1, #5]
    2ea4:	2b01      	cmp	r3, #1
    2ea6:	d02a      	beq.n	2efe <uarte_nrfx_configure+0x5e>
    2ea8:	2b03      	cmp	r3, #3
    2eaa:	d125      	bne.n	2ef8 <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2eac:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2eae:	798b      	ldrb	r3, [r1, #6]
    2eb0:	2b03      	cmp	r3, #3
    2eb2:	d121      	bne.n	2ef8 <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2eb4:	79cc      	ldrb	r4, [r1, #7]
    2eb6:	b12c      	cbz	r4, 2ec4 <uarte_nrfx_configure+0x24>
    2eb8:	2c01      	cmp	r4, #1
    2eba:	d11d      	bne.n	2ef8 <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    2ebc:	6843      	ldr	r3, [r0, #4]
    2ebe:	685b      	ldr	r3, [r3, #4]
    2ec0:	079b      	lsls	r3, r3, #30
    2ec2:	d019      	beq.n	2ef8 <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2ec4:	790a      	ldrb	r2, [r1, #4]
    2ec6:	b112      	cbz	r2, 2ece <uarte_nrfx_configure+0x2e>
    2ec8:	2a02      	cmp	r2, #2
    2eca:	d115      	bne.n	2ef8 <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2ecc:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2ece:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2ed0:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2ed2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2ed6:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2ed8:	d065      	beq.n	2fa6 <uarte_nrfx_configure+0x106>
    2eda:	d82d      	bhi.n	2f38 <uarte_nrfx_configure+0x98>
    2edc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2ee0:	d064      	beq.n	2fac <uarte_nrfx_configure+0x10c>
    2ee2:	d816      	bhi.n	2f12 <uarte_nrfx_configure+0x72>
    2ee4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2ee8:	d062      	beq.n	2fb0 <uarte_nrfx_configure+0x110>
    2eea:	d80a      	bhi.n	2f02 <uarte_nrfx_configure+0x62>
    2eec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2ef0:	d061      	beq.n	2fb6 <uarte_nrfx_configure+0x116>
    2ef2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2ef6:	d061      	beq.n	2fbc <uarte_nrfx_configure+0x11c>
    2ef8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2efc:	e052      	b.n	2fa4 <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
    2efe:	2600      	movs	r6, #0
    2f00:	e7d5      	b.n	2eae <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2f02:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2f06:	d05c      	beq.n	2fc2 <uarte_nrfx_configure+0x122>
    2f08:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2f0c:	d1f4      	bne.n	2ef8 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2f0e:	4b37      	ldr	r3, [pc, #220]	; (2fec <uarte_nrfx_configure+0x14c>)
    2f10:	e03c      	b.n	2f8c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2f12:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2f16:	d057      	beq.n	2fc8 <uarte_nrfx_configure+0x128>
    2f18:	d807      	bhi.n	2f2a <uarte_nrfx_configure+0x8a>
    2f1a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2f1e:	d055      	beq.n	2fcc <uarte_nrfx_configure+0x12c>
    2f20:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2f24:	d1e8      	bne.n	2ef8 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2f26:	4b32      	ldr	r3, [pc, #200]	; (2ff0 <uarte_nrfx_configure+0x150>)
    2f28:	e030      	b.n	2f8c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2f2a:	f647 2712 	movw	r7, #31250	; 0x7a12
    2f2e:	42bb      	cmp	r3, r7
    2f30:	d1e2      	bne.n	2ef8 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2f32:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2f36:	e029      	b.n	2f8c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2f38:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2f3c:	d048      	beq.n	2fd0 <uarte_nrfx_configure+0x130>
    2f3e:	d813      	bhi.n	2f68 <uarte_nrfx_configure+0xc8>
    2f40:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2f44:	d047      	beq.n	2fd6 <uarte_nrfx_configure+0x136>
    2f46:	d809      	bhi.n	2f5c <uarte_nrfx_configure+0xbc>
    2f48:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2f4c:	42bb      	cmp	r3, r7
    2f4e:	d044      	beq.n	2fda <uarte_nrfx_configure+0x13a>
    2f50:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2f54:	d1d0      	bne.n	2ef8 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2f56:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2f5a:	e017      	b.n	2f8c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2f5c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2f60:	d1ca      	bne.n	2ef8 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2f62:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2f66:	e011      	b.n	2f8c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2f68:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2f6c:	d038      	beq.n	2fe0 <uarte_nrfx_configure+0x140>
    2f6e:	d808      	bhi.n	2f82 <uarte_nrfx_configure+0xe2>
    2f70:	4f20      	ldr	r7, [pc, #128]	; (2ff4 <uarte_nrfx_configure+0x154>)
    2f72:	42bb      	cmp	r3, r7
    2f74:	d037      	beq.n	2fe6 <uarte_nrfx_configure+0x146>
    2f76:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2f7a:	d1bd      	bne.n	2ef8 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2f7c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2f80:	e004      	b.n	2f8c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2f82:	4f1d      	ldr	r7, [pc, #116]	; (2ff8 <uarte_nrfx_configure+0x158>)
    2f84:	42bb      	cmp	r3, r7
    2f86:	d1b7      	bne.n	2ef8 <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2f88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2f8c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2f90:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
    2f92:	4334      	orrs	r4, r6
    2f94:	4322      	orrs	r2, r4
    2f96:	3304      	adds	r3, #4
    2f98:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2f9a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2f9e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2fa2:	2000      	movs	r0, #0
}
    2fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2fa6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2faa:	e7ef      	b.n	2f8c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2fac:	4b13      	ldr	r3, [pc, #76]	; (2ffc <uarte_nrfx_configure+0x15c>)
    2fae:	e7ed      	b.n	2f8c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2fb0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2fb4:	e7ea      	b.n	2f8c <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
    2fb6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2fba:	e7e7      	b.n	2f8c <uarte_nrfx_configure+0xec>
	switch (baudrate) {
    2fbc:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2fc0:	e7e4      	b.n	2f8c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2fc2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2fc6:	e7e1      	b.n	2f8c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2fc8:	4b0d      	ldr	r3, [pc, #52]	; (3000 <uarte_nrfx_configure+0x160>)
    2fca:	e7df      	b.n	2f8c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2fcc:	4b0d      	ldr	r3, [pc, #52]	; (3004 <uarte_nrfx_configure+0x164>)
    2fce:	e7dd      	b.n	2f8c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2fd0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2fd4:	e7da      	b.n	2f8c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2fd6:	4b0c      	ldr	r3, [pc, #48]	; (3008 <uarte_nrfx_configure+0x168>)
    2fd8:	e7d8      	b.n	2f8c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2fda:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2fde:	e7d5      	b.n	2f8c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2fe0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2fe4:	e7d2      	b.n	2f8c <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2fe6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2fea:	e7cf      	b.n	2f8c <uarte_nrfx_configure+0xec>
    2fec:	0013b000 	.word	0x0013b000
    2ff0:	004ea000 	.word	0x004ea000
    2ff4:	0003d090 	.word	0x0003d090
    2ff8:	000f4240 	.word	0x000f4240
    2ffc:	00275000 	.word	0x00275000
    3000:	0075c000 	.word	0x0075c000
    3004:	003af000 	.word	0x003af000
    3008:	013a9000 	.word	0x013a9000

0000300c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    300c:	6803      	ldr	r3, [r0, #0]
{
    300e:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    3010:	095a      	lsrs	r2, r3, #5
    3012:	bf0c      	ite	eq
    3014:	f04f 32ff 	moveq.w	r2, #4294967295
    3018:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    301a:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
    301e:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3022:	07db      	lsls	r3, r3, #31
{
    3024:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3026:	d40a      	bmi.n	303e <nrf_gpio_pin_port_decode+0x32>
    3028:	490e      	ldr	r1, [pc, #56]	; (3064 <nrf_gpio_pin_port_decode+0x58>)
    302a:	480f      	ldr	r0, [pc, #60]	; (3068 <nrf_gpio_pin_port_decode+0x5c>)
    302c:	f44f 7205 	mov.w	r2, #532	; 0x214
    3030:	f005 f8ae 	bl	8190 <printk>
    3034:	f44f 7105 	mov.w	r1, #532	; 0x214
    3038:	480a      	ldr	r0, [pc, #40]	; (3064 <nrf_gpio_pin_port_decode+0x58>)
    303a:	f005 f975 	bl	8328 <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    303e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3040:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3044:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3046:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3048:	d00a      	beq.n	3060 <nrf_gpio_pin_port_decode+0x54>
            NRFX_ASSERT(0);
    304a:	4906      	ldr	r1, [pc, #24]	; (3064 <nrf_gpio_pin_port_decode+0x58>)
    304c:	4806      	ldr	r0, [pc, #24]	; (3068 <nrf_gpio_pin_port_decode+0x5c>)
    304e:	f240 2219 	movw	r2, #537	; 0x219
    3052:	f005 f89d 	bl	8190 <printk>
    3056:	f240 2119 	movw	r1, #537	; 0x219
    305a:	4802      	ldr	r0, [pc, #8]	; (3064 <nrf_gpio_pin_port_decode+0x58>)
    305c:	f005 f964 	bl	8328 <assert_post_action>
}
    3060:	4802      	ldr	r0, [pc, #8]	; (306c <nrf_gpio_pin_port_decode+0x60>)
    3062:	bd10      	pop	{r4, pc}
    3064:	00009af4 	.word	0x00009af4
    3068:	00008fa6 	.word	0x00008fa6
    306c:	50842500 	.word	0x50842500

00003070 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    3070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3072:	4605      	mov	r5, r0
    3074:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3076:	6906      	ldr	r6, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3078:	f005 fbba 	bl	87f0 <k_is_in_isr>
    307c:	b910      	cbnz	r0, 3084 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    307e:	4b2c      	ldr	r3, [pc, #176]	; (3130 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    3080:	781b      	ldrb	r3, [r3, #0]
    3082:	b983      	cbnz	r3, 30a6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    3084:	f04f 0320 	mov.w	r3, #32
    3088:	f3ef 8411 	mrs	r4, BASEPRI
    308c:	f383 8811 	msr	BASEPRI, r3
    3090:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    3094:	4628      	mov	r0, r5
    3096:	f005 fac1 	bl	861c <is_tx_ready>
    309a:	bb28      	cbnz	r0, 30e8 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    309c:	f384 8811 	msr	BASEPRI, r4
    30a0:	f3bf 8f6f 	isb	sy
}
    30a4:	e7ee      	b.n	3084 <uarte_nrfx_poll_out+0x14>
{
    30a6:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    30a8:	4628      	mov	r0, r5
    30aa:	f005 fab7 	bl	861c <is_tx_ready>
    30ae:	b970      	cbnz	r0, 30ce <uarte_nrfx_poll_out+0x5e>
    30b0:	2001      	movs	r0, #1
    30b2:	f005 fb74 	bl	879e <nrfx_busy_wait>
    30b6:	3c01      	subs	r4, #1
    30b8:	d1f6      	bne.n	30a8 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    30ba:	2100      	movs	r1, #0
    30bc:	2021      	movs	r0, #33	; 0x21
    30be:	f001 ff23 	bl	4f08 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    30c2:	e7f0      	b.n	30a6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    30c4:	f384 8811 	msr	BASEPRI, r4
    30c8:	f3bf 8f6f 	isb	sy
}
    30cc:	e7f5      	b.n	30ba <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    30ce:	f04f 0320 	mov.w	r3, #32
    30d2:	f3ef 8411 	mrs	r4, BASEPRI
    30d6:	f383 8811 	msr	BASEPRI, r3
    30da:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    30de:	4628      	mov	r0, r5
    30e0:	f005 fa9c 	bl	861c <is_tx_ready>
    30e4:	2800      	cmp	r0, #0
    30e6:	d0ed      	beq.n	30c4 <uarte_nrfx_poll_out+0x54>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    30e8:	2201      	movs	r2, #1
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    30ea:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    30ee:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    30f0:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    30f2:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    30f6:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30fa:	2200      	movs	r2, #0
    30fc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3100:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    3104:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    3108:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    310c:	684a      	ldr	r2, [r1, #4]
    310e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3110:	bf41      	itttt	mi
    3112:	2208      	movmi	r2, #8
    3114:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3118:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    311c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3120:	2201      	movs	r2, #1
    3122:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    3124:	f384 8811 	msr	BASEPRI, r4
    3128:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    312c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    312e:	bf00      	nop
    3130:	20001321 	.word	0x20001321

00003134 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    3134:	b530      	push	{r4, r5, lr}
    3136:	b085      	sub	sp, #20
    3138:	466c      	mov	r4, sp
    313a:	4605      	mov	r5, r0
    313c:	4b08      	ldr	r3, [pc, #32]	; (3160 <uarte_0_init+0x2c>)
    313e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3140:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    3144:	2200      	movs	r2, #0
    3146:	2101      	movs	r1, #1
    3148:	2008      	movs	r0, #8
    314a:	f7ff f851 	bl	21f0 <z_arm_irq_priority_set>
    314e:	2008      	movs	r0, #8
    3150:	f7ff f830 	bl	21b4 <arch_irq_enable>
    3154:	4621      	mov	r1, r4
    3156:	4628      	mov	r0, r5
    3158:	f005 fa83 	bl	8662 <uarte_instance_init.isra.0>
    315c:	b005      	add	sp, #20
    315e:	bd30      	pop	{r4, r5, pc}
    3160:	00008bcc 	.word	0x00008bcc

00003164 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    3164:	b530      	push	{r4, r5, lr}
    3166:	b085      	sub	sp, #20
    3168:	466c      	mov	r4, sp
    316a:	4605      	mov	r5, r0
    316c:	4b08      	ldr	r3, [pc, #32]	; (3190 <uarte_1_init+0x2c>)
    316e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3170:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    3174:	2200      	movs	r2, #0
    3176:	2101      	movs	r1, #1
    3178:	2009      	movs	r0, #9
    317a:	f7ff f839 	bl	21f0 <z_arm_irq_priority_set>
    317e:	2009      	movs	r0, #9
    3180:	f7ff f818 	bl	21b4 <arch_irq_enable>
    3184:	4621      	mov	r1, r4
    3186:	4628      	mov	r0, r5
    3188:	f005 fa6b 	bl	8662 <uarte_instance_init.isra.0>
    318c:	b005      	add	sp, #20
    318e:	bd30      	pop	{r4, r5, pc}
    3190:	00008bdc 	.word	0x00008bdc

00003194 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
    3194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3196:	460f      	mov	r7, r1
    3198:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
    319a:	b940      	cbnz	r0, 31ae <entropy_cc3xx_rng_get_entropy+0x1a>
    319c:	4918      	ldr	r1, [pc, #96]	; (3200 <entropy_cc3xx_rng_get_entropy+0x6c>)
    319e:	4819      	ldr	r0, [pc, #100]	; (3204 <entropy_cc3xx_rng_get_entropy+0x70>)
    31a0:	2224      	movs	r2, #36	; 0x24
    31a2:	f004 fff5 	bl	8190 <printk>
    31a6:	2124      	movs	r1, #36	; 0x24
    31a8:	4815      	ldr	r0, [pc, #84]	; (3200 <entropy_cc3xx_rng_get_entropy+0x6c>)
    31aa:	f005 f8bd 	bl	8328 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
    31ae:	b947      	cbnz	r7, 31c2 <entropy_cc3xx_rng_get_entropy+0x2e>
    31b0:	4913      	ldr	r1, [pc, #76]	; (3200 <entropy_cc3xx_rng_get_entropy+0x6c>)
    31b2:	4814      	ldr	r0, [pc, #80]	; (3204 <entropy_cc3xx_rng_get_entropy+0x70>)
    31b4:	2225      	movs	r2, #37	; 0x25
    31b6:	f004 ffeb 	bl	8190 <printk>
    31ba:	2125      	movs	r1, #37	; 0x25
    31bc:	4810      	ldr	r0, [pc, #64]	; (3200 <entropy_cc3xx_rng_get_entropy+0x6c>)
    31be:	f005 f8b3 	bl	8328 <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    31c2:	f44f 6580 	mov.w	r5, #1024	; 0x400
    31c6:	2400      	movs	r4, #0
    31c8:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
    31cc:	42a6      	cmp	r6, r4
    31ce:	d801      	bhi.n	31d4 <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
	}
#endif

	return res;
}
    31d0:	b003      	add	sp, #12
    31d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    31d4:	1b33      	subs	r3, r6, r4
    31d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    31da:	bf38      	it	cc
    31dc:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
    31de:	2000      	movs	r0, #0
    31e0:	ab01      	add	r3, sp, #4
    31e2:	462a      	mov	r2, r5
    31e4:	1939      	adds	r1, r7, r4
    31e6:	f002 fab7 	bl	5758 <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
    31ea:	9b01      	ldr	r3, [sp, #4]
    31ec:	42ab      	cmp	r3, r5
    31ee:	d103      	bne.n	31f8 <entropy_cc3xx_rng_get_entropy+0x64>
		if (res != 0) {
    31f0:	2800      	cmp	r0, #0
    31f2:	d1ed      	bne.n	31d0 <entropy_cc3xx_rng_get_entropy+0x3c>
		offset += chunk_size;
    31f4:	442c      	add	r4, r5
    31f6:	e7e9      	b.n	31cc <entropy_cc3xx_rng_get_entropy+0x38>
			return -EINVAL;
    31f8:	f06f 0015 	mvn.w	r0, #21
    31fc:	e7e8      	b.n	31d0 <entropy_cc3xx_rng_get_entropy+0x3c>
    31fe:	bf00      	nop
    3200:	00009b3e 	.word	0x00009b3e
    3204:	00008fa6 	.word	0x00008fa6

00003208 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    3208:	4803      	ldr	r0, [pc, #12]	; (3218 <k_sys_fatal_error_handler+0x10>)
    320a:	2145      	movs	r1, #69	; 0x45
{
    320c:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    320e:	f005 f89e 	bl	834e <z_log_minimal_printk>
		sys_arch_reboot(0);
    3212:	2000      	movs	r0, #0
    3214:	f7ff fb78 	bl	2908 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    3218:	00009b79 	.word	0x00009b79

0000321c <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
    321c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    3220:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    3222:	4c21      	ldr	r4, [pc, #132]	; (32a8 <check_ext_api_requests+0x8c>)
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
    3224:	4e21      	ldr	r6, [pc, #132]	; (32ac <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    3226:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    322a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 32b4 <check_ext_api_requests+0x98>
{
    322e:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    3230:	45a8      	cmp	r8, r5
    3232:	d803      	bhi.n	323c <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    3234:	2000      	movs	r0, #0
    3236:	b005      	add	sp, #20
    3238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
    323c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    323e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    3242:	681f      	ldr	r7, [r3, #0]
    3244:	ab01      	add	r3, sp, #4
    3246:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    324a:	220c      	movs	r2, #12
    324c:	4619      	mov	r1, r3
    324e:	4638      	mov	r0, r7
    3250:	f005 f95d 	bl	850e <memcmp>
    3254:	b990      	cbnz	r0, 327c <check_ext_api_requests+0x60>
    3256:	b18f      	cbz	r7, 327c <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    3258:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
    325a:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    325c:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    325e:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    3260:	4291      	cmp	r1, r2
    3262:	d10b      	bne.n	327c <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    3264:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
    3266:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    3268:	4291      	cmp	r1, r2
    326a:	d807      	bhi.n	327c <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
    326c:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    326e:	4291      	cmp	r1, r2
    3270:	d904      	bls.n	327c <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
    3272:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    3274:	695b      	ldr	r3, [r3, #20]
    3276:	ea32 0303 	bics.w	r3, r2, r3
    327a:	d00a      	beq.n	3292 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    327c:	6a27      	ldr	r7, [r4, #32]
    327e:	b167      	cbz	r7, 329a <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    3280:	480b      	ldr	r0, [pc, #44]	; (32b0 <check_ext_api_requests+0x94>)
    3282:	f004 ff85 	bl	8190 <printk>
			k_panic();
    3286:	4040      	eors	r0, r0
    3288:	f380 8811 	msr	BASEPRI, r0
    328c:	f04f 0004 	mov.w	r0, #4
    3290:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    3292:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    3294:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    3296:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    3298:	e7ca      	b.n	3230 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    329a:	4648      	mov	r0, r9
    329c:	f004 ff78 	bl	8190 <printk>
			*ext_api_req->ext_api = NULL;
    32a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    32a2:	601f      	str	r7, [r3, #0]
    32a4:	e7f5      	b.n	3292 <check_ext_api_requests+0x76>
    32a6:	bf00      	nop
    32a8:	0000023c 	.word	0x0000023c
    32ac:	00008bec 	.word	0x00008bec
    32b0:	00009b9b 	.word	0x00009b9b
    32b4:	00009bc4 	.word	0x00009bc4

000032b8 <nrf91_errata_14>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    32b8:	4b05      	ldr	r3, [pc, #20]	; (32d0 <nrf91_errata_14+0x18>)
    32ba:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    32bc:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    32be:	681b      	ldr	r3, [r3, #0]
    32c0:	2b09      	cmp	r3, #9
    32c2:	d103      	bne.n	32cc <nrf91_errata_14+0x14>
            {
                switch(var2)
    32c4:	1e43      	subs	r3, r0, #1
    32c6:	4258      	negs	r0, r3
    32c8:	4158      	adcs	r0, r3
    32ca:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    32cc:	2000      	movs	r0, #0
    #endif
}
    32ce:	4770      	bx	lr
    32d0:	00ff0134 	.word	0x00ff0134

000032d4 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    32d4:	4a4a      	ldr	r2, [pc, #296]	; (3400 <SystemInit+0x12c>)
{
    32d6:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    32d8:	6813      	ldr	r3, [r2, #0]
    32da:	f043 0302 	orr.w	r3, r3, #2
    32de:	6013      	str	r3, [r2, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    32e0:	4b48      	ldr	r3, [pc, #288]	; (3404 <SystemInit+0x130>)
            if (var1 == 0x09)
    32e2:	681b      	ldr	r3, [r3, #0]
    32e4:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    32e6:	bf01      	itttt	eq
    32e8:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    32ec:	2200      	moveq	r2, #0
    32ee:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    32f2:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    32f6:	f7ff ffdf 	bl	32b8 <nrf91_errata_14>
    32fa:	b130      	cbz	r0, 330a <SystemInit+0x36>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    32fc:	2301      	movs	r3, #1
    32fe:	4a42      	ldr	r2, [pc, #264]	; (3408 <SystemInit+0x134>)
    3300:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    3302:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    3306:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    330a:	4b3e      	ldr	r3, [pc, #248]	; (3404 <SystemInit+0x130>)
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    330c:	681b      	ldr	r3, [r3, #0]
    330e:	2b09      	cmp	r3, #9
    3310:	d107      	bne.n	3322 <SystemInit+0x4e>
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    3312:	4b3e      	ldr	r3, [pc, #248]	; (340c <SystemInit+0x138>)
            {
                switch(var2)
    3314:	681b      	ldr	r3, [r3, #0]
    3316:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    3318:	bf1e      	ittt	ne
    331a:	2201      	movne	r2, #1
    331c:	4b3c      	ldrne	r3, [pc, #240]	; (3410 <SystemInit+0x13c>)
    331e:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    3322:	f7ff ffc9 	bl	32b8 <nrf91_errata_14>
    3326:	b110      	cbz	r0, 332e <SystemInit+0x5a>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    3328:	220e      	movs	r2, #14
    332a:	4b3a      	ldr	r3, [pc, #232]	; (3414 <SystemInit+0x140>)
    332c:	601a      	str	r2, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    332e:	4b35      	ldr	r3, [pc, #212]	; (3404 <SystemInit+0x130>)
            if (var1 == 0x09)
    3330:	681b      	ldr	r3, [r3, #0]
    3332:	2b09      	cmp	r3, #9
    3334:	d104      	bne.n	3340 <SystemInit+0x6c>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    3336:	2200      	movs	r2, #0
    3338:	4b37      	ldr	r3, [pc, #220]	; (3418 <SystemInit+0x144>)
    333a:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    333c:	2201      	movs	r2, #1
    333e:	605a      	str	r2, [r3, #4]
{
    3340:	2200      	movs	r2, #0
    3342:	00d3      	lsls	r3, r2, #3
    3344:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3348:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    334c:	3101      	adds	r1, #1
    334e:	d008      	beq.n	3362 <SystemInit+0x8e>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    3350:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3354:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    3356:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    335a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    335e:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    3360:	d1ef      	bne.n	3342 <SystemInit+0x6e>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    3362:	4b2e      	ldr	r3, [pc, #184]	; (341c <SystemInit+0x148>)
    3364:	69da      	ldr	r2, [r3, #28]
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    3366:	07d1      	lsls	r1, r2, #31
    3368:	d53b      	bpl.n	33e2 <SystemInit+0x10e>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    336a:	4b2d      	ldr	r3, [pc, #180]	; (3420 <SystemInit+0x14c>)
    336c:	4619      	mov	r1, r3
    336e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3372:	2a01      	cmp	r2, #1
    3374:	d1fb      	bne.n	336e <SystemInit+0x9a>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    3376:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    337a:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    337e:	2b01      	cmp	r3, #1
    3380:	d1fb      	bne.n	337a <SystemInit+0xa6>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    3382:	4b26      	ldr	r3, [pc, #152]	; (341c <SystemInit+0x148>)
    3384:	69da      	ldr	r2, [r3, #28]
          if (uicr_HFXOSRC_erased()){
    3386:	07d2      	lsls	r2, r2, #31
    3388:	d508      	bpl.n	339c <SystemInit+0xc8>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    338a:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    338c:	4924      	ldr	r1, [pc, #144]	; (3420 <SystemInit+0x14c>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    338e:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    3392:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3394:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    3398:	2a01      	cmp	r2, #1
    339a:	d1fb      	bne.n	3394 <SystemInit+0xc0>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    339c:	6a1a      	ldr	r2, [r3, #32]
    339e:	3201      	adds	r2, #1
    33a0:	d10a      	bne.n	33b8 <SystemInit+0xe4>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    33a2:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    33a4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    33a8:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    33ac:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    33ae:	4a1c      	ldr	r2, [pc, #112]	; (3420 <SystemInit+0x14c>)
    33b0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    33b4:	2b01      	cmp	r3, #1
    33b6:	d1fb      	bne.n	33b0 <SystemInit+0xdc>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    33b8:	2200      	movs	r2, #0
    33ba:	4b19      	ldr	r3, [pc, #100]	; (3420 <SystemInit+0x14c>)
    33bc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    33c0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    33c4:	2a01      	cmp	r2, #1
    33c6:	d1fb      	bne.n	33c0 <SystemInit+0xec>
  __ASM volatile ("dsb 0xF":::"memory");
    33c8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    33cc:	4915      	ldr	r1, [pc, #84]	; (3424 <SystemInit+0x150>)
    33ce:	4b16      	ldr	r3, [pc, #88]	; (3428 <SystemInit+0x154>)
    33d0:	68ca      	ldr	r2, [r1, #12]
    33d2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    33d6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    33d8:	60cb      	str	r3, [r1, #12]
    33da:	f3bf 8f4f 	dsb	sy
    __NOP();
    33de:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    33e0:	e7fd      	b.n	33de <SystemInit+0x10a>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    33e2:	6a1b      	ldr	r3, [r3, #32]
    33e4:	3301      	adds	r3, #1
    33e6:	d0c0      	beq.n	336a <SystemInit+0x96>
        SCB->NSACR |= (3UL << 10);
    33e8:	4a0e      	ldr	r2, [pc, #56]	; (3424 <SystemInit+0x150>)
    33ea:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    33ee:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    33f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClock = __SYSTEM_CLOCK;
    33f6:	4b0d      	ldr	r3, [pc, #52]	; (342c <SystemInit+0x158>)
    33f8:	4a0d      	ldr	r2, [pc, #52]	; (3430 <SystemInit+0x15c>)
    33fa:	601a      	str	r2, [r3, #0]
}
    33fc:	bd08      	pop	{r3, pc}
    33fe:	bf00      	nop
    3400:	e000edd0 	.word	0xe000edd0
    3404:	00ff0130 	.word	0x00ff0130
    3408:	50004a38 	.word	0x50004a38
    340c:	00ff0134 	.word	0x00ff0134
    3410:	50004000 	.word	0x50004000
    3414:	5003aee4 	.word	0x5003aee4
    3418:	5000470c 	.word	0x5000470c
    341c:	00ff8000 	.word	0x00ff8000
    3420:	50039000 	.word	0x50039000
    3424:	e000ed00 	.word	0xe000ed00
    3428:	05fa0004 	.word	0x05fa0004
    342c:	20000054 	.word	0x20000054
    3430:	03d09000 	.word	0x03d09000

00003434 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    3434:	b508      	push	{r3, lr}
    switch (domain)
    3436:	b170      	cbz	r0, 3456 <nrf_clock_is_running.constprop.0+0x22>
    3438:	2801      	cmp	r0, #1
    343a:	d01b      	beq.n	3474 <nrf_clock_is_running.constprop.0+0x40>
            NRFX_ASSERT(0);
    343c:	f44f 724f 	mov.w	r2, #828	; 0x33c
    3440:	4913      	ldr	r1, [pc, #76]	; (3490 <nrf_clock_is_running.constprop.0+0x5c>)
    3442:	4814      	ldr	r0, [pc, #80]	; (3494 <nrf_clock_is_running.constprop.0+0x60>)
    3444:	f004 fea4 	bl	8190 <printk>
    3448:	4811      	ldr	r0, [pc, #68]	; (3490 <nrf_clock_is_running.constprop.0+0x5c>)
    344a:	f44f 714f 	mov.w	r1, #828	; 0x33c
    344e:	f004 ff6b 	bl	8328 <assert_post_action>
            return false;
    3452:	2000      	movs	r0, #0
    3454:	e00d      	b.n	3472 <nrf_clock_is_running.constprop.0+0x3e>
            if (p_clk_src != NULL)
    3456:	b131      	cbz	r1, 3466 <nrf_clock_is_running.constprop.0+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3458:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    345c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    3460:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    3464:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3466:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    346a:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    346e:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    3472:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    3474:	b131      	cbz	r1, 3484 <nrf_clock_is_running.constprop.0+0x50>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3476:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    347a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    347e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3482:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3484:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3488:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    348c:	e7ef      	b.n	346e <nrf_clock_is_running.constprop.0+0x3a>
    348e:	bf00      	nop
    3490:	00009bf7 	.word	0x00009bf7
    3494:	00008fa6 	.word	0x00008fa6

00003498 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    3498:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    349a:	4604      	mov	r4, r0
    349c:	b940      	cbnz	r0, 34b0 <nrfx_clock_init+0x18>
    349e:	4909      	ldr	r1, [pc, #36]	; (34c4 <nrfx_clock_init+0x2c>)
    34a0:	4809      	ldr	r0, [pc, #36]	; (34c8 <nrfx_clock_init+0x30>)
    34a2:	22b5      	movs	r2, #181	; 0xb5
    34a4:	f004 fe74 	bl	8190 <printk>
    34a8:	21b5      	movs	r1, #181	; 0xb5
    34aa:	4806      	ldr	r0, [pc, #24]	; (34c4 <nrfx_clock_init+0x2c>)
    34ac:	f004 ff3c 	bl	8328 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    34b0:	4b06      	ldr	r3, [pc, #24]	; (34cc <nrfx_clock_init+0x34>)
    34b2:	791a      	ldrb	r2, [r3, #4]
    34b4:	b922      	cbnz	r2, 34c0 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    34b6:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    34b8:	4805      	ldr	r0, [pc, #20]	; (34d0 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
    34ba:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    34bc:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    34be:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    34c0:	4804      	ldr	r0, [pc, #16]	; (34d4 <nrfx_clock_init+0x3c>)
    return err_code;
    34c2:	e7fc      	b.n	34be <nrfx_clock_init+0x26>
    34c4:	00009c2b 	.word	0x00009c2b
    34c8:	00008fa6 	.word	0x00008fa6
    34cc:	200009c8 	.word	0x200009c8
    34d0:	0bad0000 	.word	0x0bad0000
    34d4:	0bad000c 	.word	0x0bad000c

000034d8 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    34d8:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    34da:	4b0b      	ldr	r3, [pc, #44]	; (3508 <nrfx_clock_enable+0x30>)
    34dc:	791b      	ldrb	r3, [r3, #4]
    34de:	b943      	cbnz	r3, 34f2 <nrfx_clock_enable+0x1a>
    34e0:	490a      	ldr	r1, [pc, #40]	; (350c <nrfx_clock_enable+0x34>)
    34e2:	480b      	ldr	r0, [pc, #44]	; (3510 <nrfx_clock_enable+0x38>)
    34e4:	22ce      	movs	r2, #206	; 0xce
    34e6:	f004 fe53 	bl	8190 <printk>
    34ea:	21ce      	movs	r1, #206	; 0xce
    34ec:	4807      	ldr	r0, [pc, #28]	; (350c <nrfx_clock_enable+0x34>)
    34ee:	f004 ff1b 	bl	8328 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    34f2:	2005      	movs	r0, #5
    34f4:	f7fe fe6e 	bl	21d4 <arch_irq_is_enabled>
    34f8:	b920      	cbnz	r0, 3504 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    34fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    34fe:	2005      	movs	r0, #5
    3500:	f7fe be58 	b.w	21b4 <arch_irq_enable>
    3504:	bd08      	pop	{r3, pc}
    3506:	bf00      	nop
    3508:	200009c8 	.word	0x200009c8
    350c:	00009c2b 	.word	0x00009c2b
    3510:	00008fa6 	.word	0x00008fa6

00003514 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3514:	4b22      	ldr	r3, [pc, #136]	; (35a0 <nrfx_clock_start+0x8c>)
{
    3516:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3518:	791b      	ldrb	r3, [r3, #4]
{
    351a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    351c:	b953      	cbnz	r3, 3534 <nrfx_clock_start+0x20>
    351e:	4921      	ldr	r1, [pc, #132]	; (35a4 <nrfx_clock_start+0x90>)
    3520:	4821      	ldr	r0, [pc, #132]	; (35a8 <nrfx_clock_start+0x94>)
    3522:	f44f 7285 	mov.w	r2, #266	; 0x10a
    3526:	f004 fe33 	bl	8190 <printk>
    352a:	f44f 7185 	mov.w	r1, #266	; 0x10a
    352e:	481d      	ldr	r0, [pc, #116]	; (35a4 <nrfx_clock_start+0x90>)
    3530:	f004 fefa 	bl	8328 <assert_post_action>
    switch (domain)
    3534:	b16c      	cbz	r4, 3552 <nrfx_clock_start+0x3e>
    3536:	2c01      	cmp	r4, #1
    3538:	d028      	beq.n	358c <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    353a:	f44f 729e 	mov.w	r2, #316	; 0x13c
    353e:	4919      	ldr	r1, [pc, #100]	; (35a4 <nrfx_clock_start+0x90>)
    3540:	4819      	ldr	r0, [pc, #100]	; (35a8 <nrfx_clock_start+0x94>)
    3542:	f004 fe25 	bl	8190 <printk>
    3546:	f44f 719e 	mov.w	r1, #316	; 0x13c
    354a:	4816      	ldr	r0, [pc, #88]	; (35a4 <nrfx_clock_start+0x90>)
    354c:	f004 feec 	bl	8328 <assert_post_action>
            break;
    }
}
    3550:	e018      	b.n	3584 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    3552:	4620      	mov	r0, r4
    3554:	f10d 0107 	add.w	r1, sp, #7
    3558:	f7ff ff6c 	bl	3434 <nrf_clock_is_running.constprop.0>
    355c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3560:	b190      	cbz	r0, 3588 <nrfx_clock_start+0x74>
    3562:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3566:	2a02      	cmp	r2, #2
    3568:	d10e      	bne.n	3588 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
    356a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    356e:	2200      	movs	r2, #0
    3570:	4b0e      	ldr	r3, [pc, #56]	; (35ac <nrfx_clock_start+0x98>)
    3572:	601a      	str	r2, [r3, #0]
    3574:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3576:	2202      	movs	r2, #2
    3578:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    357c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3580:	2201      	movs	r2, #1
    3582:	609a      	str	r2, [r3, #8]
}
    3584:	b002      	add	sp, #8
    3586:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    3588:	2201      	movs	r2, #1
    358a:	e7ee      	b.n	356a <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    358c:	2200      	movs	r2, #0
    358e:	4b08      	ldr	r3, [pc, #32]	; (35b0 <nrfx_clock_start+0x9c>)
    3590:	601a      	str	r2, [r3, #0]
    3592:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3594:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3598:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    359c:	601c      	str	r4, [r3, #0]
}
    359e:	e7f1      	b.n	3584 <nrfx_clock_start+0x70>
    35a0:	200009c8 	.word	0x200009c8
    35a4:	00009c2b 	.word	0x00009c2b
    35a8:	00008fa6 	.word	0x00008fa6
    35ac:	50005104 	.word	0x50005104
    35b0:	50005100 	.word	0x50005100

000035b4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    35b4:	4b2d      	ldr	r3, [pc, #180]	; (366c <nrfx_clock_stop+0xb8>)
{
    35b6:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    35b8:	791b      	ldrb	r3, [r3, #4]
{
    35ba:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    35bc:	b953      	cbnz	r3, 35d4 <nrfx_clock_stop+0x20>
    35be:	492c      	ldr	r1, [pc, #176]	; (3670 <nrfx_clock_stop+0xbc>)
    35c0:	482c      	ldr	r0, [pc, #176]	; (3674 <nrfx_clock_stop+0xc0>)
    35c2:	f240 1243 	movw	r2, #323	; 0x143
    35c6:	f004 fde3 	bl	8190 <printk>
    35ca:	f240 1143 	movw	r1, #323	; 0x143
    35ce:	4828      	ldr	r0, [pc, #160]	; (3670 <nrfx_clock_stop+0xbc>)
    35d0:	f004 feaa 	bl	8328 <assert_post_action>
    switch (domain)
    35d4:	b174      	cbz	r4, 35f4 <nrfx_clock_stop+0x40>
    35d6:	2c01      	cmp	r4, #1
    35d8:	d027      	beq.n	362a <nrfx_clock_stop+0x76>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    35da:	4925      	ldr	r1, [pc, #148]	; (3670 <nrfx_clock_stop+0xbc>)
    35dc:	4825      	ldr	r0, [pc, #148]	; (3674 <nrfx_clock_stop+0xc0>)
    35de:	f240 125f 	movw	r2, #351	; 0x15f
    35e2:	f004 fdd5 	bl	8190 <printk>
    35e6:	f240 115f 	movw	r1, #351	; 0x15f
    35ea:	4821      	ldr	r0, [pc, #132]	; (3670 <nrfx_clock_stop+0xbc>)
    35ec:	f004 fe9c 	bl	8328 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    35f0:	b002      	add	sp, #8
    35f2:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    35f4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    35f8:	2202      	movs	r2, #2
    35fa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    35fe:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3600:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3604:	f242 7410 	movw	r4, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3608:	f503 7382 	add.w	r3, r3, #260	; 0x104
    360c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    360e:	4b1a      	ldr	r3, [pc, #104]	; (3678 <nrfx_clock_stop+0xc4>)
    3610:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    3612:	2100      	movs	r1, #0
    3614:	4608      	mov	r0, r1
    3616:	f7ff ff0d 	bl	3434 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    361a:	2800      	cmp	r0, #0
    361c:	d0e8      	beq.n	35f0 <nrfx_clock_stop+0x3c>
    361e:	2001      	movs	r0, #1
    3620:	f005 f8bd 	bl	879e <nrfx_busy_wait>
    3624:	3c01      	subs	r4, #1
    3626:	d1f4      	bne.n	3612 <nrfx_clock_stop+0x5e>
    3628:	e7e2      	b.n	35f0 <nrfx_clock_stop+0x3c>
    p_reg->INTENCLR = mask;
    362a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    362e:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    3630:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3634:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3638:	f503 7380 	add.w	r3, r3, #256	; 0x100
    363c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    363e:	4b0f      	ldr	r3, [pc, #60]	; (367c <nrfx_clock_stop+0xc8>)
    3640:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    3642:	f88d 4007 	strb.w	r4, [sp, #7]
    3646:	f242 7410 	movw	r4, #10000	; 0x2710
    364a:	2001      	movs	r0, #1
    364c:	f10d 0107 	add.w	r1, sp, #7
    3650:	f7ff fef0 	bl	3434 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3654:	2800      	cmp	r0, #0
    3656:	d0cb      	beq.n	35f0 <nrfx_clock_stop+0x3c>
    3658:	f89d 0007 	ldrb.w	r0, [sp, #7]
    365c:	2801      	cmp	r0, #1
    365e:	d1c7      	bne.n	35f0 <nrfx_clock_stop+0x3c>
    3660:	f005 f89d 	bl	879e <nrfx_busy_wait>
    3664:	3c01      	subs	r4, #1
    3666:	d1f0      	bne.n	364a <nrfx_clock_stop+0x96>
    3668:	e7c2      	b.n	35f0 <nrfx_clock_stop+0x3c>
    366a:	bf00      	nop
    366c:	200009c8 	.word	0x200009c8
    3670:	00009c2b 	.word	0x00009c2b
    3674:	00008fa6 	.word	0x00008fa6
    3678:	5000500c 	.word	0x5000500c
    367c:	50005004 	.word	0x50005004

00003680 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3680:	4b16      	ldr	r3, [pc, #88]	; (36dc <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3682:	b507      	push	{r0, r1, r2, lr}
    3684:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3686:	b152      	cbz	r2, 369e <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3688:	2000      	movs	r0, #0
    368a:	6018      	str	r0, [r3, #0]
    368c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    368e:	2201      	movs	r2, #1
    3690:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3694:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3698:	4b11      	ldr	r3, [pc, #68]	; (36e0 <nrfx_power_clock_irq_handler+0x60>)
    369a:	681b      	ldr	r3, [r3, #0]
    369c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    369e:	4b11      	ldr	r3, [pc, #68]	; (36e4 <nrfx_power_clock_irq_handler+0x64>)
    36a0:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    36a2:	b18a      	cbz	r2, 36c8 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    36a4:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    36a6:	f10d 0107 	add.w	r1, sp, #7
    36aa:	6018      	str	r0, [r3, #0]
    36ac:	681b      	ldr	r3, [r3, #0]
    36ae:	f7ff fec1 	bl	3434 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    36b2:	f89d 1007 	ldrb.w	r1, [sp, #7]
    36b6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    36ba:	2901      	cmp	r1, #1
    36bc:	f04f 0202 	mov.w	r2, #2
    36c0:	d105      	bne.n	36ce <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    36c2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    36c6:	6099      	str	r1, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    36c8:	b003      	add	sp, #12
    36ca:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    36ce:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    36d2:	4b03      	ldr	r3, [pc, #12]	; (36e0 <nrfx_power_clock_irq_handler+0x60>)
    36d4:	2001      	movs	r0, #1
    36d6:	681b      	ldr	r3, [r3, #0]
    36d8:	4798      	blx	r3
}
    36da:	e7f5      	b.n	36c8 <nrfx_power_clock_irq_handler+0x48>
    36dc:	50005100 	.word	0x50005100
    36e0:	200009c8 	.word	0x200009c8
    36e4:	50005104 	.word	0x50005104

000036e8 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    36e8:	4b0e      	ldr	r3, [pc, #56]	; (3724 <z_sys_init_run_level+0x3c>)
{
    36ea:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    36ec:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    36f0:	3001      	adds	r0, #1
    36f2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    36f6:	42a6      	cmp	r6, r4
    36f8:	d800      	bhi.n	36fc <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    36fa:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    36fc:	e9d4 3500 	ldrd	r3, r5, [r4]
    3700:	4628      	mov	r0, r5
    3702:	4798      	blx	r3
		if (dev != NULL) {
    3704:	b165      	cbz	r5, 3720 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    3706:	68eb      	ldr	r3, [r5, #12]
    3708:	b130      	cbz	r0, 3718 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    370a:	2800      	cmp	r0, #0
    370c:	bfb8      	it	lt
    370e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    3710:	28ff      	cmp	r0, #255	; 0xff
    3712:	bfa8      	it	ge
    3714:	20ff      	movge	r0, #255	; 0xff
    3716:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3718:	785a      	ldrb	r2, [r3, #1]
    371a:	f042 0201 	orr.w	r2, r2, #1
    371e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3720:	3408      	adds	r4, #8
    3722:	e7e8      	b.n	36f6 <z_sys_init_run_level+0xe>
    3724:	00008dd0 	.word	0x00008dd0

00003728 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    3728:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    372a:	4605      	mov	r5, r0
    372c:	b910      	cbnz	r0, 3734 <z_impl_device_get_binding+0xc>
		return NULL;
    372e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    3730:	4620      	mov	r0, r4
    3732:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    3734:	7803      	ldrb	r3, [r0, #0]
    3736:	2b00      	cmp	r3, #0
    3738:	d0f9      	beq.n	372e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    373a:	4a0f      	ldr	r2, [pc, #60]	; (3778 <z_impl_device_get_binding+0x50>)
    373c:	4c0f      	ldr	r4, [pc, #60]	; (377c <z_impl_device_get_binding+0x54>)
    373e:	4616      	mov	r6, r2
    3740:	4294      	cmp	r4, r2
    3742:	d108      	bne.n	3756 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    3744:	4c0d      	ldr	r4, [pc, #52]	; (377c <z_impl_device_get_binding+0x54>)
    3746:	42b4      	cmp	r4, r6
    3748:	d0f1      	beq.n	372e <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    374a:	4620      	mov	r0, r4
    374c:	f005 f82a 	bl	87a4 <z_device_ready>
    3750:	b950      	cbnz	r0, 3768 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    3752:	3418      	adds	r4, #24
    3754:	e7f7      	b.n	3746 <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    3756:	4620      	mov	r0, r4
    3758:	f005 f824 	bl	87a4 <z_device_ready>
    375c:	b110      	cbz	r0, 3764 <z_impl_device_get_binding+0x3c>
    375e:	6823      	ldr	r3, [r4, #0]
    3760:	42ab      	cmp	r3, r5
    3762:	d0e5      	beq.n	3730 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    3764:	3418      	adds	r4, #24
    3766:	e7eb      	b.n	3740 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    3768:	4628      	mov	r0, r5
    376a:	6821      	ldr	r1, [r4, #0]
    376c:	f004 fec3 	bl	84f6 <strcmp>
    3770:	2800      	cmp	r0, #0
    3772:	d1ee      	bne.n	3752 <z_impl_device_get_binding+0x2a>
    3774:	e7dc      	b.n	3730 <z_impl_device_get_binding+0x8>
    3776:	bf00      	nop
    3778:	0000894c 	.word	0x0000894c
    377c:	000088d4 	.word	0x000088d4

00003780 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3782:	4604      	mov	r4, r0
    3784:	460e      	mov	r6, r1
	__asm__ volatile(
    3786:	f04f 0320 	mov.w	r3, #32
    378a:	f3ef 8711 	mrs	r7, BASEPRI
    378e:	f383 8811 	msr	BASEPRI, r3
    3792:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    3796:	f001 fbe7 	bl	4f68 <z_impl_k_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    379a:	2200      	movs	r2, #0
    379c:	2c04      	cmp	r4, #4
    379e:	bf98      	it	ls
    37a0:	4b1d      	ldrls	r3, [pc, #116]	; (3818 <z_fatal_error+0x98>)
    37a2:	4605      	mov	r5, r0
	switch (reason) {
    37a4:	bf94      	ite	ls
    37a6:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
    37aa:	4b1c      	ldrhi	r3, [pc, #112]	; (381c <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    37ac:	9200      	str	r2, [sp, #0]
    37ae:	2145      	movs	r1, #69	; 0x45
    37b0:	4622      	mov	r2, r4
    37b2:	481b      	ldr	r0, [pc, #108]	; (3820 <z_fatal_error+0xa0>)
    37b4:	f004 fdcb 	bl	834e <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    37b8:	b13e      	cbz	r6, 37ca <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    37ba:	69f3      	ldr	r3, [r6, #28]
    37bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
    37c0:	b11b      	cbz	r3, 37ca <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
    37c2:	2145      	movs	r1, #69	; 0x45
    37c4:	4817      	ldr	r0, [pc, #92]	; (3824 <z_fatal_error+0xa4>)
    37c6:	f004 fdc2 	bl	834e <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    37ca:	b135      	cbz	r5, 37da <z_fatal_error+0x5a>
    37cc:	4628      	mov	r0, r5
    37ce:	f005 f815 	bl	87fc <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    37d2:	4603      	mov	r3, r0
    37d4:	b108      	cbz	r0, 37da <z_fatal_error+0x5a>
    37d6:	7802      	ldrb	r2, [r0, #0]
    37d8:	b902      	cbnz	r2, 37dc <z_fatal_error+0x5c>
		thread_name = "unknown";
    37da:	4b13      	ldr	r3, [pc, #76]	; (3828 <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    37dc:	462a      	mov	r2, r5
    37de:	2145      	movs	r1, #69	; 0x45
    37e0:	4812      	ldr	r0, [pc, #72]	; (382c <z_fatal_error+0xac>)
    37e2:	f004 fdb4 	bl	834e <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    37e6:	4631      	mov	r1, r6
    37e8:	4620      	mov	r0, r4
    37ea:	f7ff fd0d 	bl	3208 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    37ee:	2c04      	cmp	r4, #4
    37f0:	d108      	bne.n	3804 <z_fatal_error+0x84>
    37f2:	490f      	ldr	r1, [pc, #60]	; (3830 <z_fatal_error+0xb0>)
    37f4:	480f      	ldr	r0, [pc, #60]	; (3834 <z_fatal_error+0xb4>)
    37f6:	228f      	movs	r2, #143	; 0x8f
    37f8:	f004 fcca 	bl	8190 <printk>
    37fc:	218f      	movs	r1, #143	; 0x8f
    37fe:	480c      	ldr	r0, [pc, #48]	; (3830 <z_fatal_error+0xb0>)
    3800:	f004 fd92 	bl	8328 <assert_post_action>
	__asm__ volatile(
    3804:	f387 8811 	msr	BASEPRI, r7
    3808:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    380c:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    380e:	b003      	add	sp, #12
    3810:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3814:	f7ff b8cc 	b.w	29b0 <z_impl_k_thread_abort>
    3818:	00008de8 	.word	0x00008de8
    381c:	00009c68 	.word	0x00009c68
    3820:	00009c7e 	.word	0x00009c7e
    3824:	00009cab 	.word	0x00009cab
    3828:	00009c76 	.word	0x00009c76
    382c:	00009cd1 	.word	0x00009cd1
    3830:	00009cee 	.word	0x00009cee
    3834:	00008fa6 	.word	0x00008fa6

00003838 <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3838:	4802      	ldr	r0, [pc, #8]	; (3844 <z_bss_zero+0xc>)
    383a:	4a03      	ldr	r2, [pc, #12]	; (3848 <z_bss_zero+0x10>)
    383c:	2100      	movs	r1, #0
    383e:	1a12      	subs	r2, r2, r0
    3840:	f004 be97 	b.w	8572 <memset>
    3844:	20000120 	.word	0x20000120
    3848:	200014e0 	.word	0x200014e0

0000384c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    384c:	2201      	movs	r2, #1
{
    384e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3850:	4b09      	ldr	r3, [pc, #36]	; (3878 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3852:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3854:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3856:	f7ff ff47 	bl	36e8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    385a:	f001 fee5 	bl	5628 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    385e:	2003      	movs	r0, #3
    3860:	f7ff ff42 	bl	36e8 <z_sys_init_run_level>

	z_init_static_threads();
    3864:	f000 f9d6 	bl	3c14 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
    3868:	f004 fc78 	bl	815c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    386c:	4a03      	ldr	r2, [pc, #12]	; (387c <bg_thread_main+0x30>)
    386e:	7b13      	ldrb	r3, [r2, #12]
    3870:	f023 0301 	bic.w	r3, r3, #1
    3874:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3876:	bd08      	pop	{r3, pc}
    3878:	20001321 	.word	0x20001321
    387c:	200001a0 	.word	0x200001a0

00003880 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3880:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    3884:	4b3f      	ldr	r3, [pc, #252]	; (3984 <z_cstart+0x104>)
    3886:	b0a7      	sub	sp, #156	; 0x9c
	uint32_t msp =
    3888:	f503 6700 	add.w	r7, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    388c:	f387 8808 	msr	MSP, r7
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    3890:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3894:	2400      	movs	r4, #0
    3896:	23e0      	movs	r3, #224	; 0xe0
    3898:	4d3b      	ldr	r5, [pc, #236]	; (3988 <z_cstart+0x108>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    389a:	f04f 0b01 	mov.w	fp, #1
    389e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    38a2:	77ec      	strb	r4, [r5, #31]
    38a4:	762c      	strb	r4, [r5, #24]
    38a6:	766c      	strb	r4, [r5, #25]
    38a8:	76ac      	strb	r4, [r5, #26]
    38aa:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    38ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    38ae:	4e37      	ldr	r6, [pc, #220]	; (398c <z_cstart+0x10c>)
    38b0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    38b4:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    38b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    38b8:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 39a4 <z_cstart+0x124>
    38bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    38c0:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    38c2:	63ac      	str	r4, [r5, #56]	; 0x38
	/* Set NMI, Hard, and Bus Faults as Non-Secure.
	 * NMI and Bus Faults targeting the Secure state will
	 * escalate to a SecureFault or SecureHardFault.
	 */
	SCB->AIRCR =
		(SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk)))
    38c4:	68eb      	ldr	r3, [r5, #12]
	z_setup_new_thread(thread, stack,
    38c6:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 39a8 <z_cstart+0x128>
    38ca:	b29b      	uxth	r3, r3
		| SCB_AIRCR_BFHFNMINS_Msk
		| ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos) &
    38cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    38d0:	f443 3308 	orr.w	r3, r3, #139264	; 0x22000
	SCB->AIRCR =
    38d4:	60eb      	str	r3, [r5, #12]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    38d6:	f7fe fffd 	bl	28d4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    38da:	f7fe fcdf 	bl	229c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    38de:	f04f 33ff 	mov.w	r3, #4294967295
    38e2:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    38e4:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    38e6:	f7ff fa91 	bl	2e0c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    38ea:	f7ff f8e9 	bl	2ac0 <z_arm_configure_static_mpu_regions>
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    38ee:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    38f2:	4d27      	ldr	r5, [pc, #156]	; (3990 <z_cstart+0x110>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    38f4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    38f8:	ab06      	add	r3, sp, #24
    38fa:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
    38fc:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3900:	f004 ff4f 	bl	87a2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3904:	4620      	mov	r0, r4
    3906:	f7ff feef 	bl	36e8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    390a:	2001      	movs	r0, #1
    390c:	f7ff feec 	bl	36e8 <z_sys_init_run_level>
	z_sched_init();
    3910:	f001 f9d8 	bl	4cc4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3914:	4b1f      	ldr	r3, [pc, #124]	; (3994 <z_cstart+0x114>)
	_kernel.ready_q.cache = &z_main_thread;
    3916:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3918:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    391c:	491e      	ldr	r1, [pc, #120]	; (3998 <z_cstart+0x118>)
    391e:	9305      	str	r3, [sp, #20]
    3920:	4630      	mov	r0, r6
    3922:	4653      	mov	r3, sl
    3924:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    3928:	e9cd 4401 	strd	r4, r4, [sp, #4]
    392c:	9400      	str	r4, [sp, #0]
    392e:	f000 f91d 	bl	3b6c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3932:	7b73      	ldrb	r3, [r6, #13]
    3934:	4681      	mov	r9, r0
    3936:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    393a:	4630      	mov	r0, r6
    393c:	7373      	strb	r3, [r6, #13]
    393e:	f001 f839 	bl	49b4 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    3942:	230f      	movs	r3, #15
    3944:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3948:	e9cd 4302 	strd	r4, r3, [sp, #8]
    394c:	4913      	ldr	r1, [pc, #76]	; (399c <z_cstart+0x11c>)
    394e:	4b14      	ldr	r3, [pc, #80]	; (39a0 <z_cstart+0x120>)
    3950:	4640      	mov	r0, r8
    3952:	e9cd b404 	strd	fp, r4, [sp, #16]
    3956:	e9cd 5400 	strd	r5, r4, [sp]
    395a:	f000 f907 	bl	3b6c <z_setup_new_thread>
    395e:	f898 300d 	ldrb.w	r3, [r8, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3962:	4652      	mov	r2, sl
    3964:	f023 0304 	bic.w	r3, r3, #4
    3968:	f888 300d 	strb.w	r3, [r8, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    396c:	f105 0318 	add.w	r3, r5, #24
    3970:	4649      	mov	r1, r9
    3972:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
    3974:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3978:	f8c5 800c 	str.w	r8, [r5, #12]
		_kernel.cpus[i].id = i;
    397c:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    397e:	606f      	str	r7, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3980:	f7fe fc78 	bl	2274 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3984:	20002620 	.word	0x20002620
    3988:	e000ed00 	.word	0xe000ed00
    398c:	200001a0 	.word	0x200001a0
    3990:	200009d0 	.word	0x200009d0
    3994:	00009d5a 	.word	0x00009d5a
    3998:	200014e0 	.word	0x200014e0
    399c:	200024e0 	.word	0x200024e0
    39a0:	00003d5d 	.word	0x00003d5d
    39a4:	0000384d 	.word	0x0000384d
    39a8:	20000120 	.word	0x20000120

000039ac <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    39ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    39b0:	4d14      	ldr	r5, [pc, #80]	; (3a04 <init_mem_slab_module+0x58>)
    39b2:	4c15      	ldr	r4, [pc, #84]	; (3a08 <init_mem_slab_module+0x5c>)
    39b4:	46a8      	mov	r8, r5
    39b6:	4e15      	ldr	r6, [pc, #84]	; (3a0c <init_mem_slab_module+0x60>)
    39b8:	42ac      	cmp	r4, r5
    39ba:	d908      	bls.n	39ce <init_mem_slab_module+0x22>
    39bc:	4631      	mov	r1, r6
    39be:	4814      	ldr	r0, [pc, #80]	; (3a10 <init_mem_slab_module+0x64>)
    39c0:	223c      	movs	r2, #60	; 0x3c
    39c2:	f004 fbe5 	bl	8190 <printk>
    39c6:	213c      	movs	r1, #60	; 0x3c
    39c8:	4630      	mov	r0, r6
    39ca:	f004 fcad 	bl	8328 <assert_post_action>
    39ce:	4544      	cmp	r4, r8
    39d0:	d302      	bcc.n	39d8 <init_mem_slab_module+0x2c>
			goto out;
		}
		z_object_init(slab);
	}

out:
    39d2:	2000      	movs	r0, #0
	return rc;
}
    39d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    39d8:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    39dc:	ea42 0301 	orr.w	r3, r2, r1
    39e0:	f013 0303 	ands.w	r3, r3, #3
    39e4:	d10b      	bne.n	39fe <init_mem_slab_module+0x52>
	for (j = 0U; j < slab->num_blocks; j++) {
    39e6:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    39e8:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    39ea:	4283      	cmp	r3, r0
    39ec:	d101      	bne.n	39f2 <init_mem_slab_module+0x46>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    39ee:	3420      	adds	r4, #32
    39f0:	e7e2      	b.n	39b8 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    39f2:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    39f4:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    39f6:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
    39f8:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
    39fa:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    39fc:	e7f5      	b.n	39ea <init_mem_slab_module+0x3e>
		return -EINVAL;
    39fe:	f06f 0015 	mvn.w	r0, #21
	return rc;
    3a02:	e7e7      	b.n	39d4 <init_mem_slab_module+0x28>
    3a04:	200000d0 	.word	0x200000d0
    3a08:	200000d0 	.word	0x200000d0
    3a0c:	00009d62 	.word	0x00009d62
    3a10:	00008fa6 	.word	0x00008fa6

00003a14 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3a14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3a18:	4604      	mov	r4, r0
    3a1a:	460d      	mov	r5, r1
    3a1c:	4690      	mov	r8, r2
    3a1e:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    3a20:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    3a24:	f04f 0320 	mov.w	r3, #32
    3a28:	f3ef 8711 	mrs	r7, BASEPRI
    3a2c:	f383 8811 	msr	BASEPRI, r3
    3a30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3a34:	4630      	mov	r0, r6
    3a36:	f000 f96d 	bl	3d14 <z_spin_lock_valid>
    3a3a:	b940      	cbnz	r0, 3a4e <k_mem_slab_alloc+0x3a>
    3a3c:	491f      	ldr	r1, [pc, #124]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3a3e:	4820      	ldr	r0, [pc, #128]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
    3a40:	2281      	movs	r2, #129	; 0x81
    3a42:	f004 fba5 	bl	8190 <printk>
    3a46:	2181      	movs	r1, #129	; 0x81
    3a48:	481c      	ldr	r0, [pc, #112]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3a4a:	f004 fc6d 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    3a4e:	4630      	mov	r0, r6
    3a50:	f000 f97c 	bl	3d4c <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3a54:	69a3      	ldr	r3, [r4, #24]
    3a56:	b1c3      	cbz	r3, 3a8a <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
    3a58:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    3a5a:	681b      	ldr	r3, [r3, #0]
    3a5c:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    3a5e:	69e3      	ldr	r3, [r4, #28]
    3a60:	3301      	adds	r3, #1
    3a62:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3a64:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3a66:	4630      	mov	r0, r6
    3a68:	f000 f962 	bl	3d30 <z_spin_unlock_valid>
    3a6c:	b940      	cbnz	r0, 3a80 <k_mem_slab_alloc+0x6c>
    3a6e:	4913      	ldr	r1, [pc, #76]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3a70:	4813      	ldr	r0, [pc, #76]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
    3a72:	22ac      	movs	r2, #172	; 0xac
    3a74:	f004 fb8c 	bl	8190 <printk>
    3a78:	21ac      	movs	r1, #172	; 0xac
    3a7a:	4810      	ldr	r0, [pc, #64]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3a7c:	f004 fc54 	bl	8328 <assert_post_action>
	__asm__ volatile(
    3a80:	f387 8811 	msr	BASEPRI, r7
    3a84:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    3a88:	e013      	b.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    3a8a:	ea58 0209 	orrs.w	r2, r8, r9
    3a8e:	d103      	bne.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
		result = -ENOMEM;
    3a90:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
    3a94:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    3a96:	e7e6      	b.n	3a66 <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    3a98:	4622      	mov	r2, r4
    3a9a:	4639      	mov	r1, r7
    3a9c:	4630      	mov	r0, r6
    3a9e:	e9cd 8900 	strd	r8, r9, [sp]
    3aa2:	f000 fda1 	bl	45e8 <z_pend_curr>
		if (result == 0) {
    3aa6:	4604      	mov	r4, r0
    3aa8:	b918      	cbnz	r0, 3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
			*mem = _current->base.swap_data;
    3aaa:	4b06      	ldr	r3, [pc, #24]	; (3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>)
    3aac:	689b      	ldr	r3, [r3, #8]
    3aae:	695b      	ldr	r3, [r3, #20]
    3ab0:	602b      	str	r3, [r5, #0]
}
    3ab2:	4620      	mov	r0, r4
    3ab4:	b003      	add	sp, #12
    3ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3aba:	bf00      	nop
    3abc:	00008fe0 	.word	0x00008fe0
    3ac0:	00008fa6 	.word	0x00008fa6
    3ac4:	200009d0 	.word	0x200009d0

00003ac8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    3ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3acc:	4604      	mov	r4, r0
    3ace:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    3ad0:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    3ad4:	f04f 0320 	mov.w	r3, #32
    3ad8:	f3ef 8711 	mrs	r7, BASEPRI
    3adc:	f383 8811 	msr	BASEPRI, r3
    3ae0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3ae4:	4630      	mov	r0, r6
    3ae6:	f000 f915 	bl	3d14 <z_spin_lock_valid>
    3aea:	b940      	cbnz	r0, 3afe <k_mem_slab_free+0x36>
    3aec:	491d      	ldr	r1, [pc, #116]	; (3b64 <k_mem_slab_free+0x9c>)
    3aee:	481e      	ldr	r0, [pc, #120]	; (3b68 <k_mem_slab_free+0xa0>)
    3af0:	2281      	movs	r2, #129	; 0x81
    3af2:	f004 fb4d 	bl	8190 <printk>
    3af6:	2181      	movs	r1, #129	; 0x81
    3af8:	481a      	ldr	r0, [pc, #104]	; (3b64 <k_mem_slab_free+0x9c>)
    3afa:	f004 fc15 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    3afe:	4630      	mov	r0, r6
    3b00:	f000 f924 	bl	3d4c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    3b04:	f8d4 8018 	ldr.w	r8, [r4, #24]
    3b08:	f1b8 0f00 	cmp.w	r8, #0
    3b0c:	d10f      	bne.n	3b2e <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    3b0e:	4620      	mov	r0, r4
    3b10:	f001 f89a 	bl	4c48 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    3b14:	b158      	cbz	r0, 3b2e <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    3b16:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3b18:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    3b1c:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    3b1e:	f000 ff49 	bl	49b4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    3b22:	4639      	mov	r1, r7
    3b24:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    3b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    3b2a:	f000 bbbd 	b.w	42a8 <z_reschedule>
	**(char ***) mem = slab->free_list;
    3b2e:	682b      	ldr	r3, [r5, #0]
    3b30:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3b32:	4630      	mov	r0, r6
    3b34:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    3b36:	682b      	ldr	r3, [r5, #0]
    3b38:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    3b3a:	69e3      	ldr	r3, [r4, #28]
    3b3c:	3b01      	subs	r3, #1
    3b3e:	61e3      	str	r3, [r4, #28]
    3b40:	f000 f8f6 	bl	3d30 <z_spin_unlock_valid>
    3b44:	b940      	cbnz	r0, 3b58 <k_mem_slab_free+0x90>
    3b46:	4907      	ldr	r1, [pc, #28]	; (3b64 <k_mem_slab_free+0x9c>)
    3b48:	4807      	ldr	r0, [pc, #28]	; (3b68 <k_mem_slab_free+0xa0>)
    3b4a:	22ac      	movs	r2, #172	; 0xac
    3b4c:	f004 fb20 	bl	8190 <printk>
    3b50:	21ac      	movs	r1, #172	; 0xac
    3b52:	4804      	ldr	r0, [pc, #16]	; (3b64 <k_mem_slab_free+0x9c>)
    3b54:	f004 fbe8 	bl	8328 <assert_post_action>
	__asm__ volatile(
    3b58:	f387 8811 	msr	BASEPRI, r7
    3b5c:	f3bf 8f6f 	isb	sy
}
    3b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b64:	00008fe0 	.word	0x00008fe0
    3b68:	00008fa6 	.word	0x00008fa6

00003b6c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3b70:	b085      	sub	sp, #20
    3b72:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    3b76:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    3b78:	f1b9 0f0f 	cmp.w	r9, #15
{
    3b7c:	460f      	mov	r7, r1
    3b7e:	4615      	mov	r5, r2
    3b80:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    3b82:	d12e      	bne.n	3be2 <z_setup_new_thread+0x76>
    3b84:	4b1f      	ldr	r3, [pc, #124]	; (3c04 <z_setup_new_thread+0x98>)
    3b86:	4598      	cmp	r8, r3
    3b88:	d12f      	bne.n	3bea <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3b8a:	f104 0358 	add.w	r3, r4, #88	; 0x58
    3b8e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    3b92:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
    3b94:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
    3b96:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    3b98:	2304      	movs	r3, #4
    3b9a:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3b9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3b9e:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3ba0:	9302      	str	r3, [sp, #8]
    3ba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3ba4:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3ba8:	9301      	str	r3, [sp, #4]
    3baa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
    3bac:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
    3bae:	e9c4 7019 	strd	r7, r0, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3bb2:	9300      	str	r3, [sp, #0]
    3bb4:	462a      	mov	r2, r5
    3bb6:	4643      	mov	r3, r8
    3bb8:	4639      	mov	r1, r7
    3bba:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    3bbc:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    3bc0:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
    3bc2:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
    3bc6:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    3bc8:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3bca:	f7fe fb37 	bl	223c <arch_new_thread>
	if (!_current) {
    3bce:	4b0e      	ldr	r3, [pc, #56]	; (3c08 <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
    3bd0:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    3bd2:	689b      	ldr	r3, [r3, #8]
    3bd4:	b103      	cbz	r3, 3bd8 <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
    3bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    3bd8:	4628      	mov	r0, r5
    3bda:	6723      	str	r3, [r4, #112]	; 0x70
    3bdc:	b005      	add	sp, #20
    3bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    3be2:	f109 0310 	add.w	r3, r9, #16
    3be6:	2b1e      	cmp	r3, #30
    3be8:	d9cf      	bls.n	3b8a <z_setup_new_thread+0x1e>
    3bea:	f240 2205 	movw	r2, #517	; 0x205
    3bee:	4907      	ldr	r1, [pc, #28]	; (3c0c <z_setup_new_thread+0xa0>)
    3bf0:	4807      	ldr	r0, [pc, #28]	; (3c10 <z_setup_new_thread+0xa4>)
    3bf2:	f004 facd 	bl	8190 <printk>
    3bf6:	f240 2105 	movw	r1, #517	; 0x205
    3bfa:	4804      	ldr	r0, [pc, #16]	; (3c0c <z_setup_new_thread+0xa0>)
    3bfc:	f004 fb94 	bl	8328 <assert_post_action>
    3c00:	e7c3      	b.n	3b8a <z_setup_new_thread+0x1e>
    3c02:	bf00      	nop
    3c04:	00003d5d 	.word	0x00003d5d
    3c08:	200009d0 	.word	0x200009d0
    3c0c:	00009d87 	.word	0x00009d87
    3c10:	00008fa6 	.word	0x00008fa6

00003c14 <z_init_static_threads>:
{
    3c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    3c18:	4f39      	ldr	r7, [pc, #228]	; (3d00 <z_init_static_threads+0xec>)
    3c1a:	4d3a      	ldr	r5, [pc, #232]	; (3d04 <z_init_static_threads+0xf0>)
    3c1c:	463e      	mov	r6, r7
    3c1e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 3d0c <z_init_static_threads+0xf8>
{
    3c22:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    3c24:	42bd      	cmp	r5, r7
    3c26:	d90a      	bls.n	3c3e <z_init_static_threads+0x2a>
    3c28:	4641      	mov	r1, r8
    3c2a:	4837      	ldr	r0, [pc, #220]	; (3d08 <z_init_static_threads+0xf4>)
    3c2c:	f240 22d5 	movw	r2, #725	; 0x2d5
    3c30:	f004 faae 	bl	8190 <printk>
    3c34:	f240 21d5 	movw	r1, #725	; 0x2d5
    3c38:	4640      	mov	r0, r8
    3c3a:	f004 fb75 	bl	8328 <assert_post_action>
    3c3e:	42b5      	cmp	r5, r6
    3c40:	f105 0430 	add.w	r4, r5, #48	; 0x30
    3c44:	d31d      	bcc.n	3c82 <z_init_static_threads+0x6e>
	k_sched_lock();
    3c46:	f000 fb65 	bl	4314 <k_sched_lock>
		} else {
			return (t * to_hz + off) / from_hz;
    3c4a:	f240 38e7 	movw	r8, #999	; 0x3e7
    3c4e:	f04f 0900 	mov.w	r9, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    3c52:	4c2c      	ldr	r4, [pc, #176]	; (3d04 <z_init_static_threads+0xf0>)
    3c54:	4d2d      	ldr	r5, [pc, #180]	; (3d0c <z_init_static_threads+0xf8>)
    3c56:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 3d08 <z_init_static_threads+0xf4>
    3c5a:	42b4      	cmp	r4, r6
    3c5c:	d90a      	bls.n	3c74 <z_init_static_threads+0x60>
    3c5e:	4629      	mov	r1, r5
    3c60:	4650      	mov	r0, sl
    3c62:	f44f 723d 	mov.w	r2, #756	; 0x2f4
    3c66:	f004 fa93 	bl	8190 <printk>
    3c6a:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    3c6e:	4628      	mov	r0, r5
    3c70:	f004 fb5a 	bl	8328 <assert_post_action>
    3c74:	42b4      	cmp	r4, r6
    3c76:	d321      	bcc.n	3cbc <z_init_static_threads+0xa8>
}
    3c78:	b006      	add	sp, #24
    3c7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    3c7e:	f000 bd31 	b.w	46e4 <k_sched_unlock>
		z_setup_new_thread(
    3c82:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3c86:	9305      	str	r3, [sp, #20]
    3c88:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3c8c:	9304      	str	r3, [sp, #16]
    3c8e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3c92:	9303      	str	r3, [sp, #12]
    3c94:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3c98:	9302      	str	r3, [sp, #8]
    3c9a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3c9e:	9301      	str	r3, [sp, #4]
    3ca0:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3ca4:	9300      	str	r3, [sp, #0]
    3ca6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3caa:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3cae:	f7ff ff5d 	bl	3b6c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3cb2:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3cb6:	655d      	str	r5, [r3, #84]	; 0x54
    3cb8:	4625      	mov	r5, r4
    3cba:	e7b3      	b.n	3c24 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3cbe:	1c5a      	adds	r2, r3, #1
    3cc0:	d00f      	beq.n	3ce2 <z_init_static_threads+0xce>
    3cc2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3cc6:	4640      	mov	r0, r8
    3cc8:	4649      	mov	r1, r9
					    K_MSEC(thread_data->init_delay));
    3cca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3cce:	fbc2 0103 	smlal	r0, r1, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3cd2:	4549      	cmp	r1, r9
    3cd4:	bf08      	it	eq
    3cd6:	4540      	cmpeq	r0, r8
			schedule_new_thread(thread_data->init_thread,
    3cd8:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3cda:	d104      	bne.n	3ce6 <z_init_static_threads+0xd2>
	z_sched_start(thread);
    3cdc:	4638      	mov	r0, r7
    3cde:	f000 fe9f 	bl	4a20 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    3ce2:	3430      	adds	r4, #48	; 0x30
    3ce4:	e7b9      	b.n	3c5a <z_init_static_threads+0x46>
    3ce6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3cea:	2300      	movs	r3, #0
    3cec:	f7fc faa6 	bl	23c <__aeabi_uldivmod>
    3cf0:	4602      	mov	r2, r0
    3cf2:	460b      	mov	r3, r1

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3cf4:	f107 0018 	add.w	r0, r7, #24
    3cf8:	4905      	ldr	r1, [pc, #20]	; (3d10 <z_init_static_threads+0xfc>)
    3cfa:	f001 fa39 	bl	5170 <z_add_timeout>
    3cfe:	e7f0      	b.n	3ce2 <z_init_static_threads+0xce>
    3d00:	200000d0 	.word	0x200000d0
    3d04:	200000d0 	.word	0x200000d0
    3d08:	00008fa6 	.word	0x00008fa6
    3d0c:	00009d87 	.word	0x00009d87
    3d10:	00004aa5 	.word	0x00004aa5

00003d14 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    3d14:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    3d16:	b138      	cbz	r0, 3d28 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    3d18:	4b04      	ldr	r3, [pc, #16]	; (3d2c <z_spin_lock_valid+0x18>)
    3d1a:	f000 0003 	and.w	r0, r0, #3
    3d1e:	7d1b      	ldrb	r3, [r3, #20]
    3d20:	1ac0      	subs	r0, r0, r3
    3d22:	bf18      	it	ne
    3d24:	2001      	movne	r0, #1
    3d26:	4770      	bx	lr
			return false;
		}
	}
	return true;
    3d28:	2001      	movs	r0, #1
}
    3d2a:	4770      	bx	lr
    3d2c:	200009d0 	.word	0x200009d0

00003d30 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    3d30:	4905      	ldr	r1, [pc, #20]	; (3d48 <z_spin_unlock_valid+0x18>)
{
    3d32:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    3d34:	688a      	ldr	r2, [r1, #8]
    3d36:	7d08      	ldrb	r0, [r1, #20]
    3d38:	6819      	ldr	r1, [r3, #0]
    3d3a:	4302      	orrs	r2, r0
    3d3c:	2000      	movs	r0, #0
    3d3e:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
    3d40:	bf04      	itt	eq
    3d42:	6018      	streq	r0, [r3, #0]
	return true;
    3d44:	2001      	moveq	r0, #1
}
    3d46:	4770      	bx	lr
    3d48:	200009d0 	.word	0x200009d0

00003d4c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    3d4c:	4a02      	ldr	r2, [pc, #8]	; (3d58 <z_spin_lock_set_owner+0xc>)
    3d4e:	7d11      	ldrb	r1, [r2, #20]
    3d50:	6893      	ldr	r3, [r2, #8]
    3d52:	430b      	orrs	r3, r1
    3d54:	6003      	str	r3, [r0, #0]
}
    3d56:	4770      	bx	lr
    3d58:	200009d0 	.word	0x200009d0

00003d5c <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    3d5c:	4c10      	ldr	r4, [pc, #64]	; (3da0 <idle+0x44>)
{
    3d5e:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    3d60:	68a2      	ldr	r2, [r4, #8]
    3d62:	f992 200e 	ldrsb.w	r2, [r2, #14]
    3d66:	2a00      	cmp	r2, #0
    3d68:	da08      	bge.n	3d7c <idle+0x20>
    3d6a:	490e      	ldr	r1, [pc, #56]	; (3da4 <idle+0x48>)
    3d6c:	480e      	ldr	r0, [pc, #56]	; (3da8 <idle+0x4c>)
    3d6e:	2246      	movs	r2, #70	; 0x46
    3d70:	f004 fa0e 	bl	8190 <printk>
    3d74:	2146      	movs	r1, #70	; 0x46
    3d76:	480b      	ldr	r0, [pc, #44]	; (3da4 <idle+0x48>)
    3d78:	f004 fad6 	bl	8328 <assert_post_action>
	__asm__ volatile(
    3d7c:	f04f 0220 	mov.w	r2, #32
    3d80:	f3ef 8311 	mrs	r3, BASEPRI
    3d84:	f382 8811 	msr	BASEPRI, r2
    3d88:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    3d8c:	f001 fae6 	bl	535c <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    3d90:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    3d92:	f7fd fb01 	bl	1398 <pm_system_suspend>
    3d96:	2800      	cmp	r0, #0
    3d98:	d1f0      	bne.n	3d7c <idle+0x20>
	arch_cpu_idle();
    3d9a:	f7fe fa85 	bl	22a8 <arch_cpu_idle>
}
    3d9e:	e7ed      	b.n	3d7c <idle+0x20>
    3da0:	200009d0 	.word	0x200009d0
    3da4:	00009daa 	.word	0x00009daa
    3da8:	00008fa6 	.word	0x00008fa6

00003dac <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3dac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3db0:	4604      	mov	r4, r0
    3db2:	4616      	mov	r6, r2
    3db4:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3db6:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    3dba:	b143      	cbz	r3, 3dce <z_impl_k_mutex_lock+0x22>
    3dbc:	4962      	ldr	r1, [pc, #392]	; (3f48 <z_impl_k_mutex_lock+0x19c>)
    3dbe:	4863      	ldr	r0, [pc, #396]	; (3f4c <z_impl_k_mutex_lock+0x1a0>)
    3dc0:	2265      	movs	r2, #101	; 0x65
    3dc2:	f004 f9e5 	bl	8190 <printk>
    3dc6:	2165      	movs	r1, #101	; 0x65
    3dc8:	485f      	ldr	r0, [pc, #380]	; (3f48 <z_impl_k_mutex_lock+0x19c>)
    3dca:	f004 faad 	bl	8328 <assert_post_action>
    3dce:	f04f 0320 	mov.w	r3, #32
    3dd2:	f3ef 8811 	mrs	r8, BASEPRI
    3dd6:	f383 8811 	msr	BASEPRI, r3
    3dda:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3dde:	485c      	ldr	r0, [pc, #368]	; (3f50 <z_impl_k_mutex_lock+0x1a4>)
    3de0:	f7ff ff98 	bl	3d14 <z_spin_lock_valid>
    3de4:	b940      	cbnz	r0, 3df8 <z_impl_k_mutex_lock+0x4c>
    3de6:	495b      	ldr	r1, [pc, #364]	; (3f54 <z_impl_k_mutex_lock+0x1a8>)
    3de8:	4858      	ldr	r0, [pc, #352]	; (3f4c <z_impl_k_mutex_lock+0x1a0>)
    3dea:	2281      	movs	r2, #129	; 0x81
    3dec:	f004 f9d0 	bl	8190 <printk>
    3df0:	2181      	movs	r1, #129	; 0x81
    3df2:	4858      	ldr	r0, [pc, #352]	; (3f54 <z_impl_k_mutex_lock+0x1a8>)
    3df4:	f004 fa98 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    3df8:	4855      	ldr	r0, [pc, #340]	; (3f50 <z_impl_k_mutex_lock+0x1a4>)
    3dfa:	f7ff ffa7 	bl	3d4c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3dfe:	68e3      	ldr	r3, [r4, #12]
    3e00:	4a55      	ldr	r2, [pc, #340]	; (3f58 <z_impl_k_mutex_lock+0x1ac>)
    3e02:	b1d3      	cbz	r3, 3e3a <z_impl_k_mutex_lock+0x8e>
    3e04:	68a0      	ldr	r0, [r4, #8]
    3e06:	6891      	ldr	r1, [r2, #8]
    3e08:	4288      	cmp	r0, r1
    3e0a:	d033      	beq.n	3e74 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3e0c:	ea56 0307 	orrs.w	r3, r6, r7
    3e10:	d132      	bne.n	3e78 <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3e12:	484f      	ldr	r0, [pc, #316]	; (3f50 <z_impl_k_mutex_lock+0x1a4>)
    3e14:	f7ff ff8c 	bl	3d30 <z_spin_unlock_valid>
    3e18:	b940      	cbnz	r0, 3e2c <z_impl_k_mutex_lock+0x80>
    3e1a:	494e      	ldr	r1, [pc, #312]	; (3f54 <z_impl_k_mutex_lock+0x1a8>)
    3e1c:	484b      	ldr	r0, [pc, #300]	; (3f4c <z_impl_k_mutex_lock+0x1a0>)
    3e1e:	22ac      	movs	r2, #172	; 0xac
    3e20:	f004 f9b6 	bl	8190 <printk>
    3e24:	21ac      	movs	r1, #172	; 0xac
    3e26:	484b      	ldr	r0, [pc, #300]	; (3f54 <z_impl_k_mutex_lock+0x1a8>)
    3e28:	f004 fa7e 	bl	8328 <assert_post_action>
	__asm__ volatile(
    3e2c:	f388 8811 	msr	BASEPRI, r8
    3e30:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    3e34:	f06f 000f 	mvn.w	r0, #15
    3e38:	e019      	b.n	3e6e <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
    3e3a:	6891      	ldr	r1, [r2, #8]
    3e3c:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    3e40:	3301      	adds	r3, #1
    3e42:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    3e44:	6893      	ldr	r3, [r2, #8]
    3e46:	4842      	ldr	r0, [pc, #264]	; (3f50 <z_impl_k_mutex_lock+0x1a4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3e48:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    3e4a:	60a3      	str	r3, [r4, #8]
    3e4c:	f7ff ff70 	bl	3d30 <z_spin_unlock_valid>
    3e50:	b940      	cbnz	r0, 3e64 <z_impl_k_mutex_lock+0xb8>
    3e52:	4940      	ldr	r1, [pc, #256]	; (3f54 <z_impl_k_mutex_lock+0x1a8>)
    3e54:	483d      	ldr	r0, [pc, #244]	; (3f4c <z_impl_k_mutex_lock+0x1a0>)
    3e56:	22ac      	movs	r2, #172	; 0xac
    3e58:	f004 f99a 	bl	8190 <printk>
    3e5c:	21ac      	movs	r1, #172	; 0xac
    3e5e:	483d      	ldr	r0, [pc, #244]	; (3f54 <z_impl_k_mutex_lock+0x1a8>)
    3e60:	f004 fa62 	bl	8328 <assert_post_action>
    3e64:	f388 8811 	msr	BASEPRI, r8
    3e68:	f3bf 8f6f 	isb	sy
		return 0;
    3e6c:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    3e6e:	b002      	add	sp, #8
    3e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    3e74:	6921      	ldr	r1, [r4, #16]
    3e76:	e7e3      	b.n	3e40 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3e78:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3e7c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    3e80:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    3e84:	4299      	cmp	r1, r3
    3e86:	bfa8      	it	ge
    3e88:	4619      	movge	r1, r3
    3e8a:	4291      	cmp	r1, r2
    3e8c:	bfb8      	it	lt
    3e8e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3e90:	428b      	cmp	r3, r1
    3e92:	dd3f      	ble.n	3f14 <z_impl_k_mutex_lock+0x168>
		return z_set_prio(mutex->owner, new_prio);
    3e94:	f000 fe4e 	bl	4b34 <z_set_prio>
    3e98:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3e9a:	4622      	mov	r2, r4
    3e9c:	4641      	mov	r1, r8
    3e9e:	e9cd 6700 	strd	r6, r7, [sp]
    3ea2:	482b      	ldr	r0, [pc, #172]	; (3f50 <z_impl_k_mutex_lock+0x1a4>)
    3ea4:	f000 fba0 	bl	45e8 <z_pend_curr>
	if (got_mutex == 0) {
    3ea8:	2800      	cmp	r0, #0
    3eaa:	d0e0      	beq.n	3e6e <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
    3eac:	f04f 0320 	mov.w	r3, #32
    3eb0:	f3ef 8611 	mrs	r6, BASEPRI
    3eb4:	f383 8811 	msr	BASEPRI, r3
    3eb8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3ebc:	4824      	ldr	r0, [pc, #144]	; (3f50 <z_impl_k_mutex_lock+0x1a4>)
    3ebe:	f7ff ff29 	bl	3d14 <z_spin_lock_valid>
    3ec2:	b940      	cbnz	r0, 3ed6 <z_impl_k_mutex_lock+0x12a>
    3ec4:	4923      	ldr	r1, [pc, #140]	; (3f54 <z_impl_k_mutex_lock+0x1a8>)
    3ec6:	4821      	ldr	r0, [pc, #132]	; (3f4c <z_impl_k_mutex_lock+0x1a0>)
    3ec8:	2281      	movs	r2, #129	; 0x81
    3eca:	f004 f961 	bl	8190 <printk>
    3ece:	2181      	movs	r1, #129	; 0x81
    3ed0:	4820      	ldr	r0, [pc, #128]	; (3f54 <z_impl_k_mutex_lock+0x1a8>)
    3ed2:	f004 fa29 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    3ed6:	481e      	ldr	r0, [pc, #120]	; (3f50 <z_impl_k_mutex_lock+0x1a4>)
    3ed8:	f7ff ff38 	bl	3d4c <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3edc:	6823      	ldr	r3, [r4, #0]
    3ede:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ee0:	429c      	cmp	r4, r3
    3ee2:	d00a      	beq.n	3efa <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3ee4:	b14b      	cbz	r3, 3efa <z_impl_k_mutex_lock+0x14e>
    3ee6:	f993 300e 	ldrsb.w	r3, [r3, #14]
    3eea:	4299      	cmp	r1, r3
    3eec:	bfa8      	it	ge
    3eee:	4619      	movge	r1, r3
    3ef0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    3ef4:	4299      	cmp	r1, r3
    3ef6:	bfb8      	it	lt
    3ef8:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    3efa:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    3efc:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3f00:	4299      	cmp	r1, r3
    3f02:	d109      	bne.n	3f18 <z_impl_k_mutex_lock+0x16c>
	if (resched) {
    3f04:	b16d      	cbz	r5, 3f22 <z_impl_k_mutex_lock+0x176>
		z_reschedule(&lock, key);
    3f06:	4631      	mov	r1, r6
    3f08:	4811      	ldr	r0, [pc, #68]	; (3f50 <z_impl_k_mutex_lock+0x1a4>)
    3f0a:	f000 f9cd 	bl	42a8 <z_reschedule>
	return -EAGAIN;
    3f0e:	f06f 000a 	mvn.w	r0, #10
    3f12:	e7ac      	b.n	3e6e <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
    3f14:	2500      	movs	r5, #0
    3f16:	e7c0      	b.n	3e9a <z_impl_k_mutex_lock+0xee>
		return z_set_prio(mutex->owner, new_prio);
    3f18:	f000 fe0c 	bl	4b34 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    3f1c:	2800      	cmp	r0, #0
    3f1e:	d1f2      	bne.n	3f06 <z_impl_k_mutex_lock+0x15a>
    3f20:	e7f0      	b.n	3f04 <z_impl_k_mutex_lock+0x158>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3f22:	480b      	ldr	r0, [pc, #44]	; (3f50 <z_impl_k_mutex_lock+0x1a4>)
    3f24:	f7ff ff04 	bl	3d30 <z_spin_unlock_valid>
    3f28:	b940      	cbnz	r0, 3f3c <z_impl_k_mutex_lock+0x190>
    3f2a:	490a      	ldr	r1, [pc, #40]	; (3f54 <z_impl_k_mutex_lock+0x1a8>)
    3f2c:	4807      	ldr	r0, [pc, #28]	; (3f4c <z_impl_k_mutex_lock+0x1a0>)
    3f2e:	22ac      	movs	r2, #172	; 0xac
    3f30:	f004 f92e 	bl	8190 <printk>
    3f34:	21ac      	movs	r1, #172	; 0xac
    3f36:	4807      	ldr	r0, [pc, #28]	; (3f54 <z_impl_k_mutex_lock+0x1a8>)
    3f38:	f004 f9f6 	bl	8328 <assert_post_action>
	__asm__ volatile(
    3f3c:	f386 8811 	msr	BASEPRI, r6
    3f40:	f3bf 8f6f 	isb	sy
    3f44:	e7e3      	b.n	3f0e <z_impl_k_mutex_lock+0x162>
    3f46:	bf00      	nop
    3f48:	00009dcb 	.word	0x00009dcb
    3f4c:	00008fa6 	.word	0x00008fa6
    3f50:	20000a00 	.word	0x20000a00
    3f54:	00008fe0 	.word	0x00008fe0
    3f58:	200009d0 	.word	0x200009d0

00003f5c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    3f5c:	b538      	push	{r3, r4, r5, lr}
    3f5e:	4604      	mov	r4, r0
    3f60:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    3f64:	b143      	cbz	r3, 3f78 <z_impl_k_mutex_unlock+0x1c>
    3f66:	4945      	ldr	r1, [pc, #276]	; (407c <z_impl_k_mutex_unlock+0x120>)
    3f68:	4845      	ldr	r0, [pc, #276]	; (4080 <z_impl_k_mutex_unlock+0x124>)
    3f6a:	22c7      	movs	r2, #199	; 0xc7
    3f6c:	f004 f910 	bl	8190 <printk>
    3f70:	21c7      	movs	r1, #199	; 0xc7
    3f72:	4842      	ldr	r0, [pc, #264]	; (407c <z_impl_k_mutex_unlock+0x120>)
    3f74:	f004 f9d8 	bl	8328 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    3f78:	68a3      	ldr	r3, [r4, #8]
    3f7a:	2b00      	cmp	r3, #0
    3f7c:	d078      	beq.n	4070 <z_impl_k_mutex_unlock+0x114>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3f7e:	4d41      	ldr	r5, [pc, #260]	; (4084 <z_impl_k_mutex_unlock+0x128>)
    3f80:	68aa      	ldr	r2, [r5, #8]
    3f82:	4293      	cmp	r3, r2
    3f84:	d177      	bne.n	4076 <z_impl_k_mutex_unlock+0x11a>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    3f86:	68e3      	ldr	r3, [r4, #12]
    3f88:	b943      	cbnz	r3, 3f9c <z_impl_k_mutex_unlock+0x40>
    3f8a:	493c      	ldr	r1, [pc, #240]	; (407c <z_impl_k_mutex_unlock+0x120>)
    3f8c:	483c      	ldr	r0, [pc, #240]	; (4080 <z_impl_k_mutex_unlock+0x124>)
    3f8e:	22df      	movs	r2, #223	; 0xdf
    3f90:	f004 f8fe 	bl	8190 <printk>
    3f94:	21df      	movs	r1, #223	; 0xdf
    3f96:	4839      	ldr	r0, [pc, #228]	; (407c <z_impl_k_mutex_unlock+0x120>)
    3f98:	f004 f9c6 	bl	8328 <assert_post_action>
    3f9c:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    3fa0:	b143      	cbz	r3, 3fb4 <z_impl_k_mutex_unlock+0x58>
    3fa2:	4939      	ldr	r1, [pc, #228]	; (4088 <z_impl_k_mutex_unlock+0x12c>)
    3fa4:	4836      	ldr	r0, [pc, #216]	; (4080 <z_impl_k_mutex_unlock+0x124>)
    3fa6:	22fd      	movs	r2, #253	; 0xfd
    3fa8:	f004 f8f2 	bl	8190 <printk>
    3fac:	21fd      	movs	r1, #253	; 0xfd
    3fae:	4836      	ldr	r0, [pc, #216]	; (4088 <z_impl_k_mutex_unlock+0x12c>)
    3fb0:	f004 f9ba 	bl	8328 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    3fb4:	68ab      	ldr	r3, [r5, #8]
    3fb6:	7bdb      	ldrb	r3, [r3, #15]
    3fb8:	2b01      	cmp	r3, #1
    3fba:	d108      	bne.n	3fce <z_impl_k_mutex_unlock+0x72>
    3fbc:	4932      	ldr	r1, [pc, #200]	; (4088 <z_impl_k_mutex_unlock+0x12c>)
    3fbe:	4830      	ldr	r0, [pc, #192]	; (4080 <z_impl_k_mutex_unlock+0x124>)
    3fc0:	22fe      	movs	r2, #254	; 0xfe
    3fc2:	f004 f8e5 	bl	8190 <printk>
    3fc6:	21fe      	movs	r1, #254	; 0xfe
    3fc8:	482f      	ldr	r0, [pc, #188]	; (4088 <z_impl_k_mutex_unlock+0x12c>)
    3fca:	f004 f9ad 	bl	8328 <assert_post_action>

	--_current->base.sched_locked;
    3fce:	68aa      	ldr	r2, [r5, #8]
    3fd0:	7bd3      	ldrb	r3, [r2, #15]
    3fd2:	3b01      	subs	r3, #1
    3fd4:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    3fd6:	68e3      	ldr	r3, [r4, #12]
    3fd8:	2b01      	cmp	r3, #1
    3fda:	d905      	bls.n	3fe8 <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
    3fdc:	3b01      	subs	r3, #1
    3fde:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    3fe0:	f000 fb80 	bl	46e4 <k_sched_unlock>

	return 0;
    3fe4:	2000      	movs	r0, #0
}
    3fe6:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    3fe8:	f04f 0320 	mov.w	r3, #32
    3fec:	f3ef 8511 	mrs	r5, BASEPRI
    3ff0:	f383 8811 	msr	BASEPRI, r3
    3ff4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3ff8:	4824      	ldr	r0, [pc, #144]	; (408c <z_impl_k_mutex_unlock+0x130>)
    3ffa:	f7ff fe8b 	bl	3d14 <z_spin_lock_valid>
    3ffe:	b940      	cbnz	r0, 4012 <z_impl_k_mutex_unlock+0xb6>
    4000:	4923      	ldr	r1, [pc, #140]	; (4090 <z_impl_k_mutex_unlock+0x134>)
    4002:	481f      	ldr	r0, [pc, #124]	; (4080 <z_impl_k_mutex_unlock+0x124>)
    4004:	2281      	movs	r2, #129	; 0x81
    4006:	f004 f8c3 	bl	8190 <printk>
    400a:	2181      	movs	r1, #129	; 0x81
    400c:	4820      	ldr	r0, [pc, #128]	; (4090 <z_impl_k_mutex_unlock+0x134>)
    400e:	f004 f98b 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    4012:	481e      	ldr	r0, [pc, #120]	; (408c <z_impl_k_mutex_unlock+0x130>)
    4014:	f7ff fe9a 	bl	3d4c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    4018:	68a0      	ldr	r0, [r4, #8]
    401a:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    401c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4020:	4299      	cmp	r1, r3
    4022:	d001      	beq.n	4028 <z_impl_k_mutex_unlock+0xcc>
		return z_set_prio(mutex->owner, new_prio);
    4024:	f000 fd86 	bl	4b34 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4028:	4620      	mov	r0, r4
    402a:	f000 fe0d 	bl	4c48 <z_unpend_first_thread>
	mutex->owner = new_owner;
    402e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4030:	b158      	cbz	r0, 404a <z_impl_k_mutex_unlock+0xee>
		mutex->owner_orig_prio = new_owner->base.prio;
    4032:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4036:	6122      	str	r2, [r4, #16]
    4038:	2200      	movs	r2, #0
    403a:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    403c:	f000 fcba 	bl	49b4 <z_ready_thread>
		z_reschedule(&lock, key);
    4040:	4629      	mov	r1, r5
    4042:	4812      	ldr	r0, [pc, #72]	; (408c <z_impl_k_mutex_unlock+0x130>)
    4044:	f000 f930 	bl	42a8 <z_reschedule>
    4048:	e7ca      	b.n	3fe0 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
    404a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    404c:	480f      	ldr	r0, [pc, #60]	; (408c <z_impl_k_mutex_unlock+0x130>)
    404e:	f7ff fe6f 	bl	3d30 <z_spin_unlock_valid>
    4052:	b940      	cbnz	r0, 4066 <z_impl_k_mutex_unlock+0x10a>
    4054:	490e      	ldr	r1, [pc, #56]	; (4090 <z_impl_k_mutex_unlock+0x134>)
    4056:	480a      	ldr	r0, [pc, #40]	; (4080 <z_impl_k_mutex_unlock+0x124>)
    4058:	22ac      	movs	r2, #172	; 0xac
    405a:	f004 f899 	bl	8190 <printk>
    405e:	21ac      	movs	r1, #172	; 0xac
    4060:	480b      	ldr	r0, [pc, #44]	; (4090 <z_impl_k_mutex_unlock+0x134>)
    4062:	f004 f961 	bl	8328 <assert_post_action>
	__asm__ volatile(
    4066:	f385 8811 	msr	BASEPRI, r5
    406a:	f3bf 8f6f 	isb	sy
    406e:	e7b7      	b.n	3fe0 <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
    4070:	f06f 0015 	mvn.w	r0, #21
    4074:	e7b7      	b.n	3fe6 <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
    4076:	f04f 30ff 	mov.w	r0, #4294967295
    407a:	e7b4      	b.n	3fe6 <z_impl_k_mutex_unlock+0x8a>
    407c:	00009dcb 	.word	0x00009dcb
    4080:	00008fa6 	.word	0x00008fa6
    4084:	200009d0 	.word	0x200009d0
    4088:	00009ded 	.word	0x00009ded
    408c:	20000a00 	.word	0x20000a00
    4090:	00008fe0 	.word	0x00008fe0

00004094 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4094:	b538      	push	{r3, r4, r5, lr}
    4096:	4604      	mov	r4, r0
	__asm__ volatile(
    4098:	f04f 0320 	mov.w	r3, #32
    409c:	f3ef 8511 	mrs	r5, BASEPRI
    40a0:	f383 8811 	msr	BASEPRI, r3
    40a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    40a8:	4812      	ldr	r0, [pc, #72]	; (40f4 <z_impl_k_sem_give+0x60>)
    40aa:	f7ff fe33 	bl	3d14 <z_spin_lock_valid>
    40ae:	b940      	cbnz	r0, 40c2 <z_impl_k_sem_give+0x2e>
    40b0:	4911      	ldr	r1, [pc, #68]	; (40f8 <z_impl_k_sem_give+0x64>)
    40b2:	4812      	ldr	r0, [pc, #72]	; (40fc <z_impl_k_sem_give+0x68>)
    40b4:	2281      	movs	r2, #129	; 0x81
    40b6:	f004 f86b 	bl	8190 <printk>
    40ba:	2181      	movs	r1, #129	; 0x81
    40bc:	480e      	ldr	r0, [pc, #56]	; (40f8 <z_impl_k_sem_give+0x64>)
    40be:	f004 f933 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    40c2:	480c      	ldr	r0, [pc, #48]	; (40f4 <z_impl_k_sem_give+0x60>)
    40c4:	f7ff fe42 	bl	3d4c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    40c8:	4620      	mov	r0, r4
    40ca:	f000 fdbd 	bl	4c48 <z_unpend_first_thread>

	if (thread != NULL) {
    40ce:	b148      	cbz	r0, 40e4 <z_impl_k_sem_give+0x50>
    40d0:	2200      	movs	r2, #0
    40d2:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    40d4:	f000 fc6e 	bl	49b4 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    40d8:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    40da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    40de:	4805      	ldr	r0, [pc, #20]	; (40f4 <z_impl_k_sem_give+0x60>)
    40e0:	f000 b8e2 	b.w	42a8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    40e4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    40e8:	429a      	cmp	r2, r3
    40ea:	bf18      	it	ne
    40ec:	3301      	addne	r3, #1
    40ee:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    40f0:	e7f2      	b.n	40d8 <z_impl_k_sem_give+0x44>
    40f2:	bf00      	nop
    40f4:	20000a04 	.word	0x20000a04
    40f8:	00008fe0 	.word	0x00008fe0
    40fc:	00008fa6 	.word	0x00008fa6

00004100 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4102:	4604      	mov	r4, r0
    4104:	4616      	mov	r6, r2
    4106:	461f      	mov	r7, r3
    4108:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    410c:	b15b      	cbz	r3, 4126 <z_impl_k_sem_take+0x26>
    410e:	ea56 0307 	orrs.w	r3, r6, r7
    4112:	d008      	beq.n	4126 <z_impl_k_sem_take+0x26>
    4114:	492b      	ldr	r1, [pc, #172]	; (41c4 <z_impl_k_sem_take+0xc4>)
    4116:	482c      	ldr	r0, [pc, #176]	; (41c8 <z_impl_k_sem_take+0xc8>)
    4118:	2279      	movs	r2, #121	; 0x79
    411a:	f004 f839 	bl	8190 <printk>
    411e:	2179      	movs	r1, #121	; 0x79
    4120:	4828      	ldr	r0, [pc, #160]	; (41c4 <z_impl_k_sem_take+0xc4>)
    4122:	f004 f901 	bl	8328 <assert_post_action>
    4126:	f04f 0320 	mov.w	r3, #32
    412a:	f3ef 8511 	mrs	r5, BASEPRI
    412e:	f383 8811 	msr	BASEPRI, r3
    4132:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4136:	4825      	ldr	r0, [pc, #148]	; (41cc <z_impl_k_sem_take+0xcc>)
    4138:	f7ff fdec 	bl	3d14 <z_spin_lock_valid>
    413c:	b940      	cbnz	r0, 4150 <z_impl_k_sem_take+0x50>
    413e:	4924      	ldr	r1, [pc, #144]	; (41d0 <z_impl_k_sem_take+0xd0>)
    4140:	4821      	ldr	r0, [pc, #132]	; (41c8 <z_impl_k_sem_take+0xc8>)
    4142:	2281      	movs	r2, #129	; 0x81
    4144:	f004 f824 	bl	8190 <printk>
    4148:	2181      	movs	r1, #129	; 0x81
    414a:	4821      	ldr	r0, [pc, #132]	; (41d0 <z_impl_k_sem_take+0xd0>)
    414c:	f004 f8ec 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    4150:	481e      	ldr	r0, [pc, #120]	; (41cc <z_impl_k_sem_take+0xcc>)
    4152:	f7ff fdfb 	bl	3d4c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    4156:	68a3      	ldr	r3, [r4, #8]
    4158:	b1ab      	cbz	r3, 4186 <z_impl_k_sem_take+0x86>
		sem->count--;
    415a:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    415c:	481b      	ldr	r0, [pc, #108]	; (41cc <z_impl_k_sem_take+0xcc>)
    415e:	60a3      	str	r3, [r4, #8]
    4160:	f7ff fde6 	bl	3d30 <z_spin_unlock_valid>
    4164:	b940      	cbnz	r0, 4178 <z_impl_k_sem_take+0x78>
    4166:	491a      	ldr	r1, [pc, #104]	; (41d0 <z_impl_k_sem_take+0xd0>)
    4168:	4817      	ldr	r0, [pc, #92]	; (41c8 <z_impl_k_sem_take+0xc8>)
    416a:	22ac      	movs	r2, #172	; 0xac
    416c:	f004 f810 	bl	8190 <printk>
    4170:	21ac      	movs	r1, #172	; 0xac
    4172:	4817      	ldr	r0, [pc, #92]	; (41d0 <z_impl_k_sem_take+0xd0>)
    4174:	f004 f8d8 	bl	8328 <assert_post_action>
	__asm__ volatile(
    4178:	f385 8811 	msr	BASEPRI, r5
    417c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    4180:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    4182:	b003      	add	sp, #12
    4184:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4186:	ea56 0307 	orrs.w	r3, r6, r7
    418a:	d113      	bne.n	41b4 <z_impl_k_sem_take+0xb4>
    418c:	480f      	ldr	r0, [pc, #60]	; (41cc <z_impl_k_sem_take+0xcc>)
    418e:	f7ff fdcf 	bl	3d30 <z_spin_unlock_valid>
    4192:	b940      	cbnz	r0, 41a6 <z_impl_k_sem_take+0xa6>
    4194:	490e      	ldr	r1, [pc, #56]	; (41d0 <z_impl_k_sem_take+0xd0>)
    4196:	480c      	ldr	r0, [pc, #48]	; (41c8 <z_impl_k_sem_take+0xc8>)
    4198:	22ac      	movs	r2, #172	; 0xac
    419a:	f003 fff9 	bl	8190 <printk>
    419e:	21ac      	movs	r1, #172	; 0xac
    41a0:	480b      	ldr	r0, [pc, #44]	; (41d0 <z_impl_k_sem_take+0xd0>)
    41a2:	f004 f8c1 	bl	8328 <assert_post_action>
    41a6:	f385 8811 	msr	BASEPRI, r5
    41aa:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    41ae:	f06f 000f 	mvn.w	r0, #15
    41b2:	e7e6      	b.n	4182 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    41b4:	4622      	mov	r2, r4
    41b6:	4629      	mov	r1, r5
    41b8:	e9cd 6700 	strd	r6, r7, [sp]
    41bc:	4803      	ldr	r0, [pc, #12]	; (41cc <z_impl_k_sem_take+0xcc>)
    41be:	f000 fa13 	bl	45e8 <z_pend_curr>
	return ret;
    41c2:	e7de      	b.n	4182 <z_impl_k_sem_take+0x82>
    41c4:	00009e18 	.word	0x00009e18
    41c8:	00008fa6 	.word	0x00008fa6
    41cc:	20000a04 	.word	0x20000a04
    41d0:	00008fe0 	.word	0x00008fe0

000041d4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    41d4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    41d6:	4c08      	ldr	r4, [pc, #32]	; (41f8 <z_reset_time_slice+0x24>)
    41d8:	6823      	ldr	r3, [r4, #0]
    41da:	b15b      	cbz	r3, 41f4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    41dc:	f7fd fc58 	bl	1a90 <sys_clock_elapsed>
    41e0:	4603      	mov	r3, r0
    41e2:	6820      	ldr	r0, [r4, #0]
    41e4:	4a05      	ldr	r2, [pc, #20]	; (41fc <z_reset_time_slice+0x28>)
    41e6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    41e8:	2100      	movs	r1, #0
	}
}
    41ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    41ee:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    41f0:	f001 b8ea 	b.w	53c8 <z_set_timeout_expiry>
}
    41f4:	bd10      	pop	{r4, pc}
    41f6:	bf00      	nop
    41f8:	20000a14 	.word	0x20000a14
    41fc:	200009d0 	.word	0x200009d0

00004200 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    4200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4202:	4604      	mov	r4, r0
    4204:	460d      	mov	r5, r1
	__asm__ volatile(
    4206:	f04f 0320 	mov.w	r3, #32
    420a:	f3ef 8611 	mrs	r6, BASEPRI
    420e:	f383 8811 	msr	BASEPRI, r3
    4212:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4216:	481e      	ldr	r0, [pc, #120]	; (4290 <k_sched_time_slice_set+0x90>)
    4218:	f7ff fd7c 	bl	3d14 <z_spin_lock_valid>
    421c:	b940      	cbnz	r0, 4230 <k_sched_time_slice_set+0x30>
    421e:	491d      	ldr	r1, [pc, #116]	; (4294 <k_sched_time_slice_set+0x94>)
    4220:	481d      	ldr	r0, [pc, #116]	; (4298 <k_sched_time_slice_set+0x98>)
    4222:	2281      	movs	r2, #129	; 0x81
    4224:	f003 ffb4 	bl	8190 <printk>
    4228:	2181      	movs	r1, #129	; 0x81
    422a:	481a      	ldr	r0, [pc, #104]	; (4294 <k_sched_time_slice_set+0x94>)
    422c:	f004 f87c 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    4230:	4817      	ldr	r0, [pc, #92]	; (4290 <k_sched_time_slice_set+0x90>)
    4232:	f7ff fd8b 	bl	3d4c <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
    4236:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    423a:	2200      	movs	r2, #0
    423c:	f240 30e7 	movw	r0, #999	; 0x3e7
    4240:	2100      	movs	r1, #0
    4242:	4b16      	ldr	r3, [pc, #88]	; (429c <k_sched_time_slice_set+0x9c>)
    4244:	fbe7 0104 	umlal	r0, r1, r7, r4
    4248:	611a      	str	r2, [r3, #16]
    424a:	2300      	movs	r3, #0
    424c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4250:	f7fb fff4 	bl	23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4254:	2c00      	cmp	r4, #0
    4256:	4b12      	ldr	r3, [pc, #72]	; (42a0 <k_sched_time_slice_set+0xa0>)
    4258:	dc16      	bgt.n	4288 <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    425a:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    425c:	4b11      	ldr	r3, [pc, #68]	; (42a4 <k_sched_time_slice_set+0xa4>)
    425e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    4260:	f7ff ffb8 	bl	41d4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4264:	480a      	ldr	r0, [pc, #40]	; (4290 <k_sched_time_slice_set+0x90>)
    4266:	f7ff fd63 	bl	3d30 <z_spin_unlock_valid>
    426a:	b940      	cbnz	r0, 427e <k_sched_time_slice_set+0x7e>
    426c:	4909      	ldr	r1, [pc, #36]	; (4294 <k_sched_time_slice_set+0x94>)
    426e:	480a      	ldr	r0, [pc, #40]	; (4298 <k_sched_time_slice_set+0x98>)
    4270:	22ac      	movs	r2, #172	; 0xac
    4272:	f003 ff8d 	bl	8190 <printk>
    4276:	21ac      	movs	r1, #172	; 0xac
    4278:	4806      	ldr	r0, [pc, #24]	; (4294 <k_sched_time_slice_set+0x94>)
    427a:	f004 f855 	bl	8328 <assert_post_action>
	__asm__ volatile(
    427e:	f386 8811 	msr	BASEPRI, r6
    4282:	f3bf 8f6f 	isb	sy
	}
}
    4286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    4288:	2802      	cmp	r0, #2
    428a:	bfb8      	it	lt
    428c:	2002      	movlt	r0, #2
    428e:	e7e4      	b.n	425a <k_sched_time_slice_set+0x5a>
    4290:	20000a0c 	.word	0x20000a0c
    4294:	00008fe0 	.word	0x00008fe0
    4298:	00008fa6 	.word	0x00008fa6
    429c:	200009d0 	.word	0x200009d0
    42a0:	20000a14 	.word	0x20000a14
    42a4:	20000a10 	.word	0x20000a10

000042a8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    42a8:	b510      	push	{r4, lr}
    42aa:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    42ac:	460c      	mov	r4, r1
    42ae:	b9c1      	cbnz	r1, 42e2 <z_reschedule+0x3a>
    42b0:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
    42b4:	b9aa      	cbnz	r2, 42e2 <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
    42b6:	4a14      	ldr	r2, [pc, #80]	; (4308 <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
    42b8:	6a51      	ldr	r1, [r2, #36]	; 0x24
    42ba:	6892      	ldr	r2, [r2, #8]
    42bc:	4291      	cmp	r1, r2
    42be:	d010      	beq.n	42e2 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    42c0:	f7ff fd36 	bl	3d30 <z_spin_unlock_valid>
    42c4:	b940      	cbnz	r0, 42d8 <z_reschedule+0x30>
    42c6:	4911      	ldr	r1, [pc, #68]	; (430c <z_reschedule+0x64>)
    42c8:	4811      	ldr	r0, [pc, #68]	; (4310 <z_reschedule+0x68>)
    42ca:	22c3      	movs	r2, #195	; 0xc3
    42cc:	f003 ff60 	bl	8190 <printk>
    42d0:	21c3      	movs	r1, #195	; 0xc3
    42d2:	480e      	ldr	r0, [pc, #56]	; (430c <z_reschedule+0x64>)
    42d4:	f004 f828 	bl	8328 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    42d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
    42dc:	2000      	movs	r0, #0
    42de:	f7fd bf13 	b.w	2108 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    42e2:	4618      	mov	r0, r3
    42e4:	f7ff fd24 	bl	3d30 <z_spin_unlock_valid>
    42e8:	b940      	cbnz	r0, 42fc <z_reschedule+0x54>
    42ea:	4908      	ldr	r1, [pc, #32]	; (430c <z_reschedule+0x64>)
    42ec:	4808      	ldr	r0, [pc, #32]	; (4310 <z_reschedule+0x68>)
    42ee:	22ac      	movs	r2, #172	; 0xac
    42f0:	f003 ff4e 	bl	8190 <printk>
    42f4:	21ac      	movs	r1, #172	; 0xac
    42f6:	4805      	ldr	r0, [pc, #20]	; (430c <z_reschedule+0x64>)
    42f8:	f004 f816 	bl	8328 <assert_post_action>
    42fc:	f384 8811 	msr	BASEPRI, r4
    4300:	f3bf 8f6f 	isb	sy
    4304:	bd10      	pop	{r4, pc}
    4306:	bf00      	nop
    4308:	200009d0 	.word	0x200009d0
    430c:	00008fe0 	.word	0x00008fe0
    4310:	00008fa6 	.word	0x00008fa6

00004314 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    4314:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4316:	f04f 0320 	mov.w	r3, #32
    431a:	f3ef 8511 	mrs	r5, BASEPRI
    431e:	f383 8811 	msr	BASEPRI, r3
    4322:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4326:	4820      	ldr	r0, [pc, #128]	; (43a8 <k_sched_lock+0x94>)
    4328:	f7ff fcf4 	bl	3d14 <z_spin_lock_valid>
    432c:	b940      	cbnz	r0, 4340 <k_sched_lock+0x2c>
    432e:	491f      	ldr	r1, [pc, #124]	; (43ac <k_sched_lock+0x98>)
    4330:	481f      	ldr	r0, [pc, #124]	; (43b0 <k_sched_lock+0x9c>)
    4332:	2281      	movs	r2, #129	; 0x81
    4334:	f003 ff2c 	bl	8190 <printk>
    4338:	2181      	movs	r1, #129	; 0x81
    433a:	481c      	ldr	r0, [pc, #112]	; (43ac <k_sched_lock+0x98>)
    433c:	f003 fff4 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    4340:	4819      	ldr	r0, [pc, #100]	; (43a8 <k_sched_lock+0x94>)
    4342:	f7ff fd03 	bl	3d4c <z_spin_lock_set_owner>
    4346:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    434a:	b143      	cbz	r3, 435e <k_sched_lock+0x4a>
    434c:	4919      	ldr	r1, [pc, #100]	; (43b4 <k_sched_lock+0xa0>)
    434e:	4818      	ldr	r0, [pc, #96]	; (43b0 <k_sched_lock+0x9c>)
    4350:	22fd      	movs	r2, #253	; 0xfd
    4352:	f003 ff1d 	bl	8190 <printk>
    4356:	21fd      	movs	r1, #253	; 0xfd
    4358:	4816      	ldr	r0, [pc, #88]	; (43b4 <k_sched_lock+0xa0>)
    435a:	f003 ffe5 	bl	8328 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    435e:	4c16      	ldr	r4, [pc, #88]	; (43b8 <k_sched_lock+0xa4>)
    4360:	68a2      	ldr	r2, [r4, #8]
    4362:	7bd2      	ldrb	r2, [r2, #15]
    4364:	2a01      	cmp	r2, #1
    4366:	d108      	bne.n	437a <k_sched_lock+0x66>
    4368:	4912      	ldr	r1, [pc, #72]	; (43b4 <k_sched_lock+0xa0>)
    436a:	4811      	ldr	r0, [pc, #68]	; (43b0 <k_sched_lock+0x9c>)
    436c:	22fe      	movs	r2, #254	; 0xfe
    436e:	f003 ff0f 	bl	8190 <printk>
    4372:	21fe      	movs	r1, #254	; 0xfe
    4374:	480f      	ldr	r0, [pc, #60]	; (43b4 <k_sched_lock+0xa0>)
    4376:	f003 ffd7 	bl	8328 <assert_post_action>
	--_current->base.sched_locked;
    437a:	68a2      	ldr	r2, [r4, #8]
    437c:	7bd3      	ldrb	r3, [r2, #15]
    437e:	3b01      	subs	r3, #1
    4380:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4382:	4809      	ldr	r0, [pc, #36]	; (43a8 <k_sched_lock+0x94>)
    4384:	f7ff fcd4 	bl	3d30 <z_spin_unlock_valid>
    4388:	b940      	cbnz	r0, 439c <k_sched_lock+0x88>
    438a:	4908      	ldr	r1, [pc, #32]	; (43ac <k_sched_lock+0x98>)
    438c:	4808      	ldr	r0, [pc, #32]	; (43b0 <k_sched_lock+0x9c>)
    438e:	22ac      	movs	r2, #172	; 0xac
    4390:	f003 fefe 	bl	8190 <printk>
    4394:	21ac      	movs	r1, #172	; 0xac
    4396:	4805      	ldr	r0, [pc, #20]	; (43ac <k_sched_lock+0x98>)
    4398:	f003 ffc6 	bl	8328 <assert_post_action>
	__asm__ volatile(
    439c:	f385 8811 	msr	BASEPRI, r5
    43a0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    43a4:	bd38      	pop	{r3, r4, r5, pc}
    43a6:	bf00      	nop
    43a8:	20000a0c 	.word	0x20000a0c
    43ac:	00008fe0 	.word	0x00008fe0
    43b0:	00008fa6 	.word	0x00008fa6
    43b4:	00009ded 	.word	0x00009ded
    43b8:	200009d0 	.word	0x200009d0

000043bc <z_priq_dumb_remove>:
	sys_dlist_append(pq, &thread->base.qnode_dlist);
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    43bc:	4b0b      	ldr	r3, [pc, #44]	; (43ec <z_priq_dumb_remove+0x30>)
{
    43be:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    43c0:	4299      	cmp	r1, r3
{
    43c2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    43c4:	d10a      	bne.n	43dc <z_priq_dumb_remove+0x20>
    43c6:	490a      	ldr	r1, [pc, #40]	; (43f0 <z_priq_dumb_remove+0x34>)
    43c8:	480a      	ldr	r0, [pc, #40]	; (43f4 <z_priq_dumb_remove+0x38>)
    43ca:	f240 32b5 	movw	r2, #949	; 0x3b5
    43ce:	f003 fedf 	bl	8190 <printk>
    43d2:	f240 31b5 	movw	r1, #949	; 0x3b5
    43d6:	4806      	ldr	r0, [pc, #24]	; (43f0 <z_priq_dumb_remove+0x34>)
    43d8:	f003 ffa6 	bl	8328 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    43dc:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    43e0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    43e2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    43e4:	2300      	movs	r3, #0
	node->prev = NULL;
    43e6:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    43ea:	bd10      	pop	{r4, pc}
    43ec:	20000120 	.word	0x20000120
    43f0:	00009e38 	.word	0x00009e38
    43f4:	00008fa6 	.word	0x00008fa6

000043f8 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    43f8:	6883      	ldr	r3, [r0, #8]
{
    43fa:	b510      	push	{r4, lr}
    43fc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    43fe:	b953      	cbnz	r3, 4416 <unpend_thread_no_timeout+0x1e>
    4400:	490a      	ldr	r1, [pc, #40]	; (442c <unpend_thread_no_timeout+0x34>)
    4402:	480b      	ldr	r0, [pc, #44]	; (4430 <unpend_thread_no_timeout+0x38>)
    4404:	f240 2242 	movw	r2, #578	; 0x242
    4408:	f003 fec2 	bl	8190 <printk>
    440c:	f240 2142 	movw	r1, #578	; 0x242
    4410:	4806      	ldr	r0, [pc, #24]	; (442c <unpend_thread_no_timeout+0x34>)
    4412:	f003 ff89 	bl	8328 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    4416:	4621      	mov	r1, r4
    4418:	68a0      	ldr	r0, [r4, #8]
    441a:	f7ff ffcf 	bl	43bc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    441e:	7b63      	ldrb	r3, [r4, #13]
    4420:	f023 0302 	bic.w	r3, r3, #2
    4424:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    4426:	2300      	movs	r3, #0
    4428:	60a3      	str	r3, [r4, #8]
}
    442a:	bd10      	pop	{r4, pc}
    442c:	00009e38 	.word	0x00009e38
    4430:	00008fa6 	.word	0x00008fa6

00004434 <update_cache>:
{
    4434:	b538      	push	{r3, r4, r5, lr}
    4436:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    4438:	4812      	ldr	r0, [pc, #72]	; (4484 <update_cache+0x50>)
    443a:	f004 fa05 	bl	8848 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    443e:	4d12      	ldr	r5, [pc, #72]	; (4488 <update_cache+0x54>)
    4440:	4604      	mov	r4, r0
    4442:	b900      	cbnz	r0, 4446 <update_cache+0x12>
    4444:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    4446:	b9aa      	cbnz	r2, 4474 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
    4448:	68ab      	ldr	r3, [r5, #8]
    444a:	b943      	cbnz	r3, 445e <update_cache+0x2a>
    444c:	490f      	ldr	r1, [pc, #60]	; (448c <update_cache+0x58>)
    444e:	4810      	ldr	r0, [pc, #64]	; (4490 <update_cache+0x5c>)
    4450:	2281      	movs	r2, #129	; 0x81
    4452:	f003 fe9d 	bl	8190 <printk>
    4456:	2181      	movs	r1, #129	; 0x81
    4458:	480c      	ldr	r0, [pc, #48]	; (448c <update_cache+0x58>)
    445a:	f003 ff65 	bl	8328 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    445e:	68ab      	ldr	r3, [r5, #8]
    4460:	7b5a      	ldrb	r2, [r3, #13]
    4462:	06d2      	lsls	r2, r2, #27
    4464:	d106      	bne.n	4474 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4466:	69a2      	ldr	r2, [r4, #24]
    4468:	b922      	cbnz	r2, 4474 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    446a:	89da      	ldrh	r2, [r3, #14]
    446c:	2a7f      	cmp	r2, #127	; 0x7f
    446e:	d901      	bls.n	4474 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    4470:	626b      	str	r3, [r5, #36]	; 0x24
}
    4472:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    4474:	68ab      	ldr	r3, [r5, #8]
    4476:	42a3      	cmp	r3, r4
    4478:	d001      	beq.n	447e <update_cache+0x4a>
			z_reset_time_slice();
    447a:	f7ff feab 	bl	41d4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    447e:	626c      	str	r4, [r5, #36]	; 0x24
}
    4480:	e7f7      	b.n	4472 <update_cache+0x3e>
    4482:	bf00      	nop
    4484:	200009f8 	.word	0x200009f8
    4488:	200009d0 	.word	0x200009d0
    448c:	00009e38 	.word	0x00009e38
    4490:	00008fa6 	.word	0x00008fa6

00004494 <unready_thread>:
{
    4494:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    4496:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    449a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    449c:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    449e:	7b43      	ldrb	r3, [r0, #13]
    44a0:	da06      	bge.n	44b0 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    44a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    44a6:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    44a8:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    44aa:	4806      	ldr	r0, [pc, #24]	; (44c4 <unready_thread+0x30>)
    44ac:	f7ff ff86 	bl	43bc <z_priq_dumb_remove>
	update_cache(thread == _current);
    44b0:	4b05      	ldr	r3, [pc, #20]	; (44c8 <unready_thread+0x34>)
    44b2:	6898      	ldr	r0, [r3, #8]
    44b4:	1b03      	subs	r3, r0, r4
    44b6:	4258      	negs	r0, r3
    44b8:	4158      	adcs	r0, r3
}
    44ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    44be:	f7ff bfb9 	b.w	4434 <update_cache>
    44c2:	bf00      	nop
    44c4:	200009f8 	.word	0x200009f8
    44c8:	200009d0 	.word	0x200009d0

000044cc <add_to_waitq_locked>:
{
    44cc:	b538      	push	{r3, r4, r5, lr}
    44ce:	4604      	mov	r4, r0
    44d0:	460d      	mov	r5, r1
	unready_thread(thread);
    44d2:	f7ff ffdf 	bl	4494 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    44d6:	7b63      	ldrb	r3, [r4, #13]
    44d8:	f043 0302 	orr.w	r3, r3, #2
    44dc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    44de:	b325      	cbz	r5, 452a <add_to_waitq_locked+0x5e>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    44e0:	4b18      	ldr	r3, [pc, #96]	; (4544 <add_to_waitq_locked+0x78>)
		thread->base.pended_on = wait_q;
    44e2:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    44e4:	429c      	cmp	r4, r3
    44e6:	d10a      	bne.n	44fe <add_to_waitq_locked+0x32>
    44e8:	4917      	ldr	r1, [pc, #92]	; (4548 <add_to_waitq_locked+0x7c>)
    44ea:	4818      	ldr	r0, [pc, #96]	; (454c <add_to_waitq_locked+0x80>)
    44ec:	f240 32a6 	movw	r2, #934	; 0x3a6
    44f0:	f003 fe4e 	bl	8190 <printk>
    44f4:	f240 31a6 	movw	r1, #934	; 0x3a6
    44f8:	4813      	ldr	r0, [pc, #76]	; (4548 <add_to_waitq_locked+0x7c>)
    44fa:	f003 ff15 	bl	8328 <assert_post_action>
	return list->head == list;
    44fe:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4500:	429d      	cmp	r5, r3
    4502:	bf08      	it	eq
    4504:	2300      	moveq	r3, #0
    4506:	2b00      	cmp	r3, #0
    4508:	bf38      	it	cc
    450a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    450c:	b19b      	cbz	r3, 4536 <add_to_waitq_locked+0x6a>
	int32_t b1 = thread_1->base.prio;
    450e:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4512:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    4516:	4291      	cmp	r1, r2
    4518:	d008      	beq.n	452c <add_to_waitq_locked+0x60>
		return b2 - b1;
    451a:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    451c:	2a00      	cmp	r2, #0
    451e:	dd05      	ble.n	452c <add_to_waitq_locked+0x60>
	sys_dnode_t *const prev = successor->prev;
    4520:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4522:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4526:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4528:	605c      	str	r4, [r3, #4]
}
    452a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    452c:	686a      	ldr	r2, [r5, #4]
    452e:	4293      	cmp	r3, r2
    4530:	d001      	beq.n	4536 <add_to_waitq_locked+0x6a>
    4532:	681b      	ldr	r3, [r3, #0]
    4534:	e7ea      	b.n	450c <add_to_waitq_locked+0x40>
	sys_dnode_t *const tail = list->tail;
    4536:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    4538:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    453c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    453e:	606c      	str	r4, [r5, #4]
    4540:	e7f3      	b.n	452a <add_to_waitq_locked+0x5e>
    4542:	bf00      	nop
    4544:	20000120 	.word	0x20000120
    4548:	00009e38 	.word	0x00009e38
    454c:	00008fa6 	.word	0x00008fa6

00004550 <pend>:
{
    4550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4554:	4604      	mov	r4, r0
    4556:	460d      	mov	r5, r1
    4558:	4616      	mov	r6, r2
    455a:	461f      	mov	r7, r3
	__asm__ volatile(
    455c:	f04f 0320 	mov.w	r3, #32
    4560:	f3ef 8811 	mrs	r8, BASEPRI
    4564:	f383 8811 	msr	BASEPRI, r3
    4568:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    456c:	481a      	ldr	r0, [pc, #104]	; (45d8 <pend+0x88>)
    456e:	f7ff fbd1 	bl	3d14 <z_spin_lock_valid>
    4572:	b940      	cbnz	r0, 4586 <pend+0x36>
    4574:	4919      	ldr	r1, [pc, #100]	; (45dc <pend+0x8c>)
    4576:	481a      	ldr	r0, [pc, #104]	; (45e0 <pend+0x90>)
    4578:	2281      	movs	r2, #129	; 0x81
    457a:	f003 fe09 	bl	8190 <printk>
    457e:	2181      	movs	r1, #129	; 0x81
    4580:	4816      	ldr	r0, [pc, #88]	; (45dc <pend+0x8c>)
    4582:	f003 fed1 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    4586:	4814      	ldr	r0, [pc, #80]	; (45d8 <pend+0x88>)
    4588:	f7ff fbe0 	bl	3d4c <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    458c:	4620      	mov	r0, r4
    458e:	4629      	mov	r1, r5
    4590:	f7ff ff9c 	bl	44cc <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4594:	4810      	ldr	r0, [pc, #64]	; (45d8 <pend+0x88>)
    4596:	f7ff fbcb 	bl	3d30 <z_spin_unlock_valid>
    459a:	b940      	cbnz	r0, 45ae <pend+0x5e>
    459c:	490f      	ldr	r1, [pc, #60]	; (45dc <pend+0x8c>)
    459e:	4810      	ldr	r0, [pc, #64]	; (45e0 <pend+0x90>)
    45a0:	22ac      	movs	r2, #172	; 0xac
    45a2:	f003 fdf5 	bl	8190 <printk>
    45a6:	21ac      	movs	r1, #172	; 0xac
    45a8:	480c      	ldr	r0, [pc, #48]	; (45dc <pend+0x8c>)
    45aa:	f003 febd 	bl	8328 <assert_post_action>
	__asm__ volatile(
    45ae:	f388 8811 	msr	BASEPRI, r8
    45b2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    45b6:	1c7b      	adds	r3, r7, #1
    45b8:	bf08      	it	eq
    45ba:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    45be:	d008      	beq.n	45d2 <pend+0x82>
    45c0:	4632      	mov	r2, r6
    45c2:	463b      	mov	r3, r7
    45c4:	f104 0018 	add.w	r0, r4, #24
    45c8:	4906      	ldr	r1, [pc, #24]	; (45e4 <pend+0x94>)
}
    45ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    45ce:	f000 bdcf 	b.w	5170 <z_add_timeout>
    45d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45d6:	bf00      	nop
    45d8:	20000a0c 	.word	0x20000a0c
    45dc:	00008fe0 	.word	0x00008fe0
    45e0:	00008fa6 	.word	0x00008fa6
    45e4:	00004aa5 	.word	0x00004aa5

000045e8 <z_pend_curr>:
{
    45e8:	b538      	push	{r3, r4, r5, lr}
    45ea:	4605      	mov	r5, r0
	pending_current = _current;
    45ec:	4b0d      	ldr	r3, [pc, #52]	; (4624 <z_pend_curr+0x3c>)
{
    45ee:	460c      	mov	r4, r1
	pending_current = _current;
    45f0:	6898      	ldr	r0, [r3, #8]
    45f2:	4b0d      	ldr	r3, [pc, #52]	; (4628 <z_pend_curr+0x40>)
{
    45f4:	4611      	mov	r1, r2
	pending_current = _current;
    45f6:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    45f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    45fc:	f7ff ffa8 	bl	4550 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4600:	4628      	mov	r0, r5
    4602:	f7ff fb95 	bl	3d30 <z_spin_unlock_valid>
    4606:	b940      	cbnz	r0, 461a <z_pend_curr+0x32>
    4608:	4908      	ldr	r1, [pc, #32]	; (462c <z_pend_curr+0x44>)
    460a:	4809      	ldr	r0, [pc, #36]	; (4630 <z_pend_curr+0x48>)
    460c:	22c3      	movs	r2, #195	; 0xc3
    460e:	f003 fdbf 	bl	8190 <printk>
    4612:	21c3      	movs	r1, #195	; 0xc3
    4614:	4805      	ldr	r0, [pc, #20]	; (462c <z_pend_curr+0x44>)
    4616:	f003 fe87 	bl	8328 <assert_post_action>
    461a:	4620      	mov	r0, r4
}
    461c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4620:	f7fd bd72 	b.w	2108 <arch_swap>
    4624:	200009d0 	.word	0x200009d0
    4628:	20000a08 	.word	0x20000a08
    462c:	00008fe0 	.word	0x00008fe0
    4630:	00008fa6 	.word	0x00008fa6

00004634 <z_impl_k_thread_suspend>:
{
    4634:	b570      	push	{r4, r5, r6, lr}
    4636:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4638:	3018      	adds	r0, #24
    463a:	f000 fe53 	bl	52e4 <z_abort_timeout>
	__asm__ volatile(
    463e:	f04f 0320 	mov.w	r3, #32
    4642:	f3ef 8611 	mrs	r6, BASEPRI
    4646:	f383 8811 	msr	BASEPRI, r3
    464a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    464e:	4820      	ldr	r0, [pc, #128]	; (46d0 <z_impl_k_thread_suspend+0x9c>)
    4650:	f7ff fb60 	bl	3d14 <z_spin_lock_valid>
    4654:	b940      	cbnz	r0, 4668 <z_impl_k_thread_suspend+0x34>
    4656:	491f      	ldr	r1, [pc, #124]	; (46d4 <z_impl_k_thread_suspend+0xa0>)
    4658:	481f      	ldr	r0, [pc, #124]	; (46d8 <z_impl_k_thread_suspend+0xa4>)
    465a:	2281      	movs	r2, #129	; 0x81
    465c:	f003 fd98 	bl	8190 <printk>
    4660:	2181      	movs	r1, #129	; 0x81
    4662:	481c      	ldr	r0, [pc, #112]	; (46d4 <z_impl_k_thread_suspend+0xa0>)
    4664:	f003 fe60 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    4668:	4819      	ldr	r0, [pc, #100]	; (46d0 <z_impl_k_thread_suspend+0x9c>)
    466a:	f7ff fb6f 	bl	3d4c <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    466e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    4672:	7b63      	ldrb	r3, [r4, #13]
    4674:	2a00      	cmp	r2, #0
    4676:	da06      	bge.n	4686 <z_impl_k_thread_suspend+0x52>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    467c:	4621      	mov	r1, r4
    467e:	4817      	ldr	r0, [pc, #92]	; (46dc <z_impl_k_thread_suspend+0xa8>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4680:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    4682:	f7ff fe9b 	bl	43bc <z_priq_dumb_remove>
		update_cache(thread == _current);
    4686:	4d16      	ldr	r5, [pc, #88]	; (46e0 <z_impl_k_thread_suspend+0xac>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4688:	7b63      	ldrb	r3, [r4, #13]
    468a:	68a8      	ldr	r0, [r5, #8]
    468c:	f043 0310 	orr.w	r3, r3, #16
    4690:	7363      	strb	r3, [r4, #13]
    4692:	1b03      	subs	r3, r0, r4
    4694:	4258      	negs	r0, r3
    4696:	4158      	adcs	r0, r3
    4698:	f7ff fecc 	bl	4434 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    469c:	480c      	ldr	r0, [pc, #48]	; (46d0 <z_impl_k_thread_suspend+0x9c>)
    469e:	f7ff fb47 	bl	3d30 <z_spin_unlock_valid>
    46a2:	b940      	cbnz	r0, 46b6 <z_impl_k_thread_suspend+0x82>
    46a4:	490b      	ldr	r1, [pc, #44]	; (46d4 <z_impl_k_thread_suspend+0xa0>)
    46a6:	480c      	ldr	r0, [pc, #48]	; (46d8 <z_impl_k_thread_suspend+0xa4>)
    46a8:	22ac      	movs	r2, #172	; 0xac
    46aa:	f003 fd71 	bl	8190 <printk>
    46ae:	21ac      	movs	r1, #172	; 0xac
    46b0:	4808      	ldr	r0, [pc, #32]	; (46d4 <z_impl_k_thread_suspend+0xa0>)
    46b2:	f003 fe39 	bl	8328 <assert_post_action>
	__asm__ volatile(
    46b6:	f386 8811 	msr	BASEPRI, r6
    46ba:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    46be:	68ab      	ldr	r3, [r5, #8]
    46c0:	42a3      	cmp	r3, r4
    46c2:	d103      	bne.n	46cc <z_impl_k_thread_suspend+0x98>
}
    46c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    46c8:	f004 b8b4 	b.w	8834 <z_reschedule_unlocked>
}
    46cc:	bd70      	pop	{r4, r5, r6, pc}
    46ce:	bf00      	nop
    46d0:	20000a0c 	.word	0x20000a0c
    46d4:	00008fe0 	.word	0x00008fe0
    46d8:	00008fa6 	.word	0x00008fa6
    46dc:	200009f8 	.word	0x200009f8
    46e0:	200009d0 	.word	0x200009d0

000046e4 <k_sched_unlock>:
{
    46e4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    46e6:	f04f 0320 	mov.w	r3, #32
    46ea:	f3ef 8511 	mrs	r5, BASEPRI
    46ee:	f383 8811 	msr	BASEPRI, r3
    46f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    46f6:	4824      	ldr	r0, [pc, #144]	; (4788 <k_sched_unlock+0xa4>)
    46f8:	f7ff fb0c 	bl	3d14 <z_spin_lock_valid>
    46fc:	b940      	cbnz	r0, 4710 <k_sched_unlock+0x2c>
    46fe:	4923      	ldr	r1, [pc, #140]	; (478c <k_sched_unlock+0xa8>)
    4700:	4823      	ldr	r0, [pc, #140]	; (4790 <k_sched_unlock+0xac>)
    4702:	2281      	movs	r2, #129	; 0x81
    4704:	f003 fd44 	bl	8190 <printk>
    4708:	2181      	movs	r1, #129	; 0x81
    470a:	4820      	ldr	r0, [pc, #128]	; (478c <k_sched_unlock+0xa8>)
    470c:	f003 fe0c 	bl	8328 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    4710:	4c20      	ldr	r4, [pc, #128]	; (4794 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
    4712:	481d      	ldr	r0, [pc, #116]	; (4788 <k_sched_unlock+0xa4>)
    4714:	f7ff fb1a 	bl	3d4c <z_spin_lock_set_owner>
    4718:	68a2      	ldr	r2, [r4, #8]
    471a:	7bd2      	ldrb	r2, [r2, #15]
    471c:	b952      	cbnz	r2, 4734 <k_sched_unlock+0x50>
    471e:	491e      	ldr	r1, [pc, #120]	; (4798 <k_sched_unlock+0xb4>)
    4720:	481b      	ldr	r0, [pc, #108]	; (4790 <k_sched_unlock+0xac>)
    4722:	f44f 7251 	mov.w	r2, #836	; 0x344
    4726:	f003 fd33 	bl	8190 <printk>
    472a:	f44f 7151 	mov.w	r1, #836	; 0x344
    472e:	481a      	ldr	r0, [pc, #104]	; (4798 <k_sched_unlock+0xb4>)
    4730:	f003 fdfa 	bl	8328 <assert_post_action>
    4734:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    4738:	b153      	cbz	r3, 4750 <k_sched_unlock+0x6c>
    473a:	4917      	ldr	r1, [pc, #92]	; (4798 <k_sched_unlock+0xb4>)
    473c:	4814      	ldr	r0, [pc, #80]	; (4790 <k_sched_unlock+0xac>)
    473e:	f240 3245 	movw	r2, #837	; 0x345
    4742:	f003 fd25 	bl	8190 <printk>
    4746:	f240 3145 	movw	r1, #837	; 0x345
    474a:	4813      	ldr	r0, [pc, #76]	; (4798 <k_sched_unlock+0xb4>)
    474c:	f003 fdec 	bl	8328 <assert_post_action>
		++_current->base.sched_locked;
    4750:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
    4752:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    4754:	7bd3      	ldrb	r3, [r2, #15]
    4756:	3301      	adds	r3, #1
    4758:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    475a:	f7ff fe6b 	bl	4434 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    475e:	480a      	ldr	r0, [pc, #40]	; (4788 <k_sched_unlock+0xa4>)
    4760:	f7ff fae6 	bl	3d30 <z_spin_unlock_valid>
    4764:	b940      	cbnz	r0, 4778 <k_sched_unlock+0x94>
    4766:	4909      	ldr	r1, [pc, #36]	; (478c <k_sched_unlock+0xa8>)
    4768:	4809      	ldr	r0, [pc, #36]	; (4790 <k_sched_unlock+0xac>)
    476a:	22ac      	movs	r2, #172	; 0xac
    476c:	f003 fd10 	bl	8190 <printk>
    4770:	21ac      	movs	r1, #172	; 0xac
    4772:	4806      	ldr	r0, [pc, #24]	; (478c <k_sched_unlock+0xa8>)
    4774:	f003 fdd8 	bl	8328 <assert_post_action>
	__asm__ volatile(
    4778:	f385 8811 	msr	BASEPRI, r5
    477c:	f3bf 8f6f 	isb	sy
}
    4780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    4784:	f004 b856 	b.w	8834 <z_reschedule_unlocked>
    4788:	20000a0c 	.word	0x20000a0c
    478c:	00008fe0 	.word	0x00008fe0
    4790:	00008fa6 	.word	0x00008fa6
    4794:	200009d0 	.word	0x200009d0
    4798:	00009e38 	.word	0x00009e38

0000479c <move_thread_to_end_of_prio_q>:
{
    479c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    479e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    47a2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    47a4:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    47a6:	7b43      	ldrb	r3, [r0, #13]
    47a8:	da06      	bge.n	47b8 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    47aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		_priq_run_remove(pq, thread);
    47ae:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    47b0:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    47b2:	4820      	ldr	r0, [pc, #128]	; (4834 <move_thread_to_end_of_prio_q+0x98>)
    47b4:	f7ff fe02 	bl	43bc <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    47b8:	7b63      	ldrb	r3, [r4, #13]
    47ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
    47be:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    47c0:	4b1d      	ldr	r3, [pc, #116]	; (4838 <move_thread_to_end_of_prio_q+0x9c>)
    47c2:	429c      	cmp	r4, r3
    47c4:	d10a      	bne.n	47dc <move_thread_to_end_of_prio_q+0x40>
    47c6:	491d      	ldr	r1, [pc, #116]	; (483c <move_thread_to_end_of_prio_q+0xa0>)
    47c8:	481d      	ldr	r0, [pc, #116]	; (4840 <move_thread_to_end_of_prio_q+0xa4>)
    47ca:	f240 32a6 	movw	r2, #934	; 0x3a6
    47ce:	f003 fcdf 	bl	8190 <printk>
    47d2:	f240 31a6 	movw	r1, #934	; 0x3a6
    47d6:	4819      	ldr	r0, [pc, #100]	; (483c <move_thread_to_end_of_prio_q+0xa0>)
    47d8:	f003 fda6 	bl	8328 <assert_post_action>
	return list->head == list;
    47dc:	4a19      	ldr	r2, [pc, #100]	; (4844 <move_thread_to_end_of_prio_q+0xa8>)
    47de:	4611      	mov	r1, r2
    47e0:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    47e4:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    47e6:	428b      	cmp	r3, r1
    47e8:	bf08      	it	eq
    47ea:	2300      	moveq	r3, #0
    47ec:	2b00      	cmp	r3, #0
    47ee:	bf38      	it	cc
    47f0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    47f2:	b1cb      	cbz	r3, 4828 <move_thread_to_end_of_prio_q+0x8c>
	int32_t b1 = thread_1->base.prio;
    47f4:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    47f8:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    47fc:	4286      	cmp	r6, r0
    47fe:	d00f      	beq.n	4820 <move_thread_to_end_of_prio_q+0x84>
		return b2 - b1;
    4800:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4802:	2800      	cmp	r0, #0
    4804:	dd0c      	ble.n	4820 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
    4806:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    4808:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    480c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    480e:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    4810:	6890      	ldr	r0, [r2, #8]
    4812:	1b03      	subs	r3, r0, r4
    4814:	4258      	negs	r0, r3
    4816:	4158      	adcs	r0, r3
}
    4818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    481c:	f7ff be0a 	b.w	4434 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4820:	42ab      	cmp	r3, r5
    4822:	d001      	beq.n	4828 <move_thread_to_end_of_prio_q+0x8c>
    4824:	681b      	ldr	r3, [r3, #0]
    4826:	e7e4      	b.n	47f2 <move_thread_to_end_of_prio_q+0x56>
	node->prev = tail;
    4828:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    482c:	602c      	str	r4, [r5, #0]
	list->tail = node;
    482e:	62d4      	str	r4, [r2, #44]	; 0x2c
}
    4830:	e7ee      	b.n	4810 <move_thread_to_end_of_prio_q+0x74>
    4832:	bf00      	nop
    4834:	200009f8 	.word	0x200009f8
    4838:	20000120 	.word	0x20000120
    483c:	00009e38 	.word	0x00009e38
    4840:	00008fa6 	.word	0x00008fa6
    4844:	200009d0 	.word	0x200009d0

00004848 <z_time_slice>:
{
    4848:	b570      	push	{r4, r5, r6, lr}
    484a:	4604      	mov	r4, r0
	__asm__ volatile(
    484c:	f04f 0320 	mov.w	r3, #32
    4850:	f3ef 8511 	mrs	r5, BASEPRI
    4854:	f383 8811 	msr	BASEPRI, r3
    4858:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    485c:	4825      	ldr	r0, [pc, #148]	; (48f4 <z_time_slice+0xac>)
    485e:	f7ff fa59 	bl	3d14 <z_spin_lock_valid>
    4862:	b940      	cbnz	r0, 4876 <z_time_slice+0x2e>
    4864:	4924      	ldr	r1, [pc, #144]	; (48f8 <z_time_slice+0xb0>)
    4866:	4825      	ldr	r0, [pc, #148]	; (48fc <z_time_slice+0xb4>)
    4868:	2281      	movs	r2, #129	; 0x81
    486a:	f003 fc91 	bl	8190 <printk>
    486e:	2181      	movs	r1, #129	; 0x81
    4870:	4821      	ldr	r0, [pc, #132]	; (48f8 <z_time_slice+0xb0>)
    4872:	f003 fd59 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    4876:	481f      	ldr	r0, [pc, #124]	; (48f4 <z_time_slice+0xac>)
    4878:	f7ff fa68 	bl	3d4c <z_spin_lock_set_owner>
	if (pending_current == _current) {
    487c:	4b20      	ldr	r3, [pc, #128]	; (4900 <z_time_slice+0xb8>)
    487e:	4a21      	ldr	r2, [pc, #132]	; (4904 <z_time_slice+0xbc>)
    4880:	6898      	ldr	r0, [r3, #8]
    4882:	6811      	ldr	r1, [r2, #0]
    4884:	4288      	cmp	r0, r1
    4886:	4619      	mov	r1, r3
    4888:	d113      	bne.n	48b2 <z_time_slice+0x6a>
			z_reset_time_slice();
    488a:	f7ff fca3 	bl	41d4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    488e:	4819      	ldr	r0, [pc, #100]	; (48f4 <z_time_slice+0xac>)
    4890:	f7ff fa4e 	bl	3d30 <z_spin_unlock_valid>
    4894:	b940      	cbnz	r0, 48a8 <z_time_slice+0x60>
    4896:	4918      	ldr	r1, [pc, #96]	; (48f8 <z_time_slice+0xb0>)
    4898:	4818      	ldr	r0, [pc, #96]	; (48fc <z_time_slice+0xb4>)
    489a:	22ac      	movs	r2, #172	; 0xac
    489c:	f003 fc78 	bl	8190 <printk>
    48a0:	21ac      	movs	r1, #172	; 0xac
    48a2:	4815      	ldr	r0, [pc, #84]	; (48f8 <z_time_slice+0xb0>)
    48a4:	f003 fd40 	bl	8328 <assert_post_action>
	__asm__ volatile(
    48a8:	f385 8811 	msr	BASEPRI, r5
    48ac:	f3bf 8f6f 	isb	sy
}
    48b0:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    48b2:	2600      	movs	r6, #0
    48b4:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    48b6:	4a14      	ldr	r2, [pc, #80]	; (4908 <z_time_slice+0xc0>)
    48b8:	6812      	ldr	r2, [r2, #0]
    48ba:	b1ba      	cbz	r2, 48ec <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
    48bc:	89c2      	ldrh	r2, [r0, #14]
    48be:	2a7f      	cmp	r2, #127	; 0x7f
    48c0:	d814      	bhi.n	48ec <z_time_slice+0xa4>
		&& !z_is_thread_prevented_from_running(thread)
    48c2:	7b42      	ldrb	r2, [r0, #13]
    48c4:	06d2      	lsls	r2, r2, #27
    48c6:	d111      	bne.n	48ec <z_time_slice+0xa4>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    48c8:	4a10      	ldr	r2, [pc, #64]	; (490c <z_time_slice+0xc4>)
    48ca:	f990 600e 	ldrsb.w	r6, [r0, #14]
    48ce:	6812      	ldr	r2, [r2, #0]
    48d0:	4296      	cmp	r6, r2
    48d2:	db0b      	blt.n	48ec <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
    48d4:	4a0e      	ldr	r2, [pc, #56]	; (4910 <z_time_slice+0xc8>)
    48d6:	4290      	cmp	r0, r2
    48d8:	d008      	beq.n	48ec <z_time_slice+0xa4>
		if (ticks >= _current_cpu->slice_ticks) {
    48da:	691a      	ldr	r2, [r3, #16]
    48dc:	42a2      	cmp	r2, r4
    48de:	dc02      	bgt.n	48e6 <z_time_slice+0x9e>
			move_thread_to_end_of_prio_q(_current);
    48e0:	f7ff ff5c 	bl	479c <move_thread_to_end_of_prio_q>
    48e4:	e7d1      	b.n	488a <z_time_slice+0x42>
			_current_cpu->slice_ticks -= ticks;
    48e6:	1b12      	subs	r2, r2, r4
    48e8:	611a      	str	r2, [r3, #16]
    48ea:	e7d0      	b.n	488e <z_time_slice+0x46>
		_current_cpu->slice_ticks = 0;
    48ec:	2300      	movs	r3, #0
    48ee:	610b      	str	r3, [r1, #16]
    48f0:	e7cd      	b.n	488e <z_time_slice+0x46>
    48f2:	bf00      	nop
    48f4:	20000a0c 	.word	0x20000a0c
    48f8:	00008fe0 	.word	0x00008fe0
    48fc:	00008fa6 	.word	0x00008fa6
    4900:	200009d0 	.word	0x200009d0
    4904:	20000a08 	.word	0x20000a08
    4908:	20000a14 	.word	0x20000a14
    490c:	20000a10 	.word	0x20000a10
    4910:	20000120 	.word	0x20000120

00004914 <ready_thread>:
{
    4914:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4916:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    491a:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    491c:	2a00      	cmp	r2, #0
    491e:	7b43      	ldrb	r3, [r0, #13]
    4920:	db3f      	blt.n	49a2 <ready_thread+0x8e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4922:	06da      	lsls	r2, r3, #27
    4924:	d13d      	bne.n	49a2 <ready_thread+0x8e>
	return !sys_dnode_is_linked(&to->node);
    4926:	6985      	ldr	r5, [r0, #24]
    4928:	2d00      	cmp	r5, #0
    492a:	d13a      	bne.n	49a2 <ready_thread+0x8e>
	thread->base.thread_state |= _THREAD_QUEUED;
    492c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4930:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4932:	4b1c      	ldr	r3, [pc, #112]	; (49a4 <ready_thread+0x90>)
    4934:	4298      	cmp	r0, r3
    4936:	d10a      	bne.n	494e <ready_thread+0x3a>
    4938:	491b      	ldr	r1, [pc, #108]	; (49a8 <ready_thread+0x94>)
    493a:	481c      	ldr	r0, [pc, #112]	; (49ac <ready_thread+0x98>)
    493c:	f240 32a6 	movw	r2, #934	; 0x3a6
    4940:	f003 fc26 	bl	8190 <printk>
    4944:	f240 31a6 	movw	r1, #934	; 0x3a6
    4948:	4817      	ldr	r0, [pc, #92]	; (49a8 <ready_thread+0x94>)
    494a:	f003 fced 	bl	8328 <assert_post_action>
	return list->head == list;
    494e:	4918      	ldr	r1, [pc, #96]	; (49b0 <ready_thread+0x9c>)
    4950:	460b      	mov	r3, r1
    4952:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4956:	4298      	cmp	r0, r3
    4958:	bf18      	it	ne
    495a:	4605      	movne	r5, r0
    495c:	2d00      	cmp	r5, #0
    495e:	461a      	mov	r2, r3
    4960:	462b      	mov	r3, r5
    4962:	bf38      	it	cc
    4964:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4966:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4968:	b1b3      	cbz	r3, 4998 <ready_thread+0x84>
	int32_t b1 = thread_1->base.prio;
    496a:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    496e:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4972:	4286      	cmp	r6, r0
    4974:	d00c      	beq.n	4990 <ready_thread+0x7c>
		return b2 - b1;
    4976:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4978:	2800      	cmp	r0, #0
    497a:	dd09      	ble.n	4990 <ready_thread+0x7c>
	sys_dnode_t *const prev = successor->prev;
    497c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    497e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4982:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4984:	605c      	str	r4, [r3, #4]
		update_cache(0);
    4986:	2000      	movs	r0, #0
}
    4988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    498c:	f7ff bd52 	b.w	4434 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4990:	42ab      	cmp	r3, r5
    4992:	d001      	beq.n	4998 <ready_thread+0x84>
    4994:	681b      	ldr	r3, [r3, #0]
    4996:	e7e7      	b.n	4968 <ready_thread+0x54>
	node->prev = tail;
    4998:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    499c:	602c      	str	r4, [r5, #0]
	list->tail = node;
    499e:	62cc      	str	r4, [r1, #44]	; 0x2c
}
    49a0:	e7f1      	b.n	4986 <ready_thread+0x72>
}
    49a2:	bd70      	pop	{r4, r5, r6, pc}
    49a4:	20000120 	.word	0x20000120
    49a8:	00009e38 	.word	0x00009e38
    49ac:	00008fa6 	.word	0x00008fa6
    49b0:	200009d0 	.word	0x200009d0

000049b4 <z_ready_thread>:
{
    49b4:	b538      	push	{r3, r4, r5, lr}
    49b6:	4604      	mov	r4, r0
	__asm__ volatile(
    49b8:	f04f 0320 	mov.w	r3, #32
    49bc:	f3ef 8511 	mrs	r5, BASEPRI
    49c0:	f383 8811 	msr	BASEPRI, r3
    49c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    49c8:	4812      	ldr	r0, [pc, #72]	; (4a14 <z_ready_thread+0x60>)
    49ca:	f7ff f9a3 	bl	3d14 <z_spin_lock_valid>
    49ce:	b940      	cbnz	r0, 49e2 <z_ready_thread+0x2e>
    49d0:	4911      	ldr	r1, [pc, #68]	; (4a18 <z_ready_thread+0x64>)
    49d2:	4812      	ldr	r0, [pc, #72]	; (4a1c <z_ready_thread+0x68>)
    49d4:	2281      	movs	r2, #129	; 0x81
    49d6:	f003 fbdb 	bl	8190 <printk>
    49da:	2181      	movs	r1, #129	; 0x81
    49dc:	480e      	ldr	r0, [pc, #56]	; (4a18 <z_ready_thread+0x64>)
    49de:	f003 fca3 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    49e2:	480c      	ldr	r0, [pc, #48]	; (4a14 <z_ready_thread+0x60>)
    49e4:	f7ff f9b2 	bl	3d4c <z_spin_lock_set_owner>
			ready_thread(thread);
    49e8:	4620      	mov	r0, r4
    49ea:	f7ff ff93 	bl	4914 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    49ee:	4809      	ldr	r0, [pc, #36]	; (4a14 <z_ready_thread+0x60>)
    49f0:	f7ff f99e 	bl	3d30 <z_spin_unlock_valid>
    49f4:	b940      	cbnz	r0, 4a08 <z_ready_thread+0x54>
    49f6:	4908      	ldr	r1, [pc, #32]	; (4a18 <z_ready_thread+0x64>)
    49f8:	4808      	ldr	r0, [pc, #32]	; (4a1c <z_ready_thread+0x68>)
    49fa:	22ac      	movs	r2, #172	; 0xac
    49fc:	f003 fbc8 	bl	8190 <printk>
    4a00:	21ac      	movs	r1, #172	; 0xac
    4a02:	4805      	ldr	r0, [pc, #20]	; (4a18 <z_ready_thread+0x64>)
    4a04:	f003 fc90 	bl	8328 <assert_post_action>
	__asm__ volatile(
    4a08:	f385 8811 	msr	BASEPRI, r5
    4a0c:	f3bf 8f6f 	isb	sy
}
    4a10:	bd38      	pop	{r3, r4, r5, pc}
    4a12:	bf00      	nop
    4a14:	20000a0c 	.word	0x20000a0c
    4a18:	00008fe0 	.word	0x00008fe0
    4a1c:	00008fa6 	.word	0x00008fa6

00004a20 <z_sched_start>:
{
    4a20:	b538      	push	{r3, r4, r5, lr}
    4a22:	4604      	mov	r4, r0
	__asm__ volatile(
    4a24:	f04f 0320 	mov.w	r3, #32
    4a28:	f3ef 8511 	mrs	r5, BASEPRI
    4a2c:	f383 8811 	msr	BASEPRI, r3
    4a30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4a34:	4818      	ldr	r0, [pc, #96]	; (4a98 <z_sched_start+0x78>)
    4a36:	f7ff f96d 	bl	3d14 <z_spin_lock_valid>
    4a3a:	b940      	cbnz	r0, 4a4e <z_sched_start+0x2e>
    4a3c:	4917      	ldr	r1, [pc, #92]	; (4a9c <z_sched_start+0x7c>)
    4a3e:	4818      	ldr	r0, [pc, #96]	; (4aa0 <z_sched_start+0x80>)
    4a40:	2281      	movs	r2, #129	; 0x81
    4a42:	f003 fba5 	bl	8190 <printk>
    4a46:	2181      	movs	r1, #129	; 0x81
    4a48:	4814      	ldr	r0, [pc, #80]	; (4a9c <z_sched_start+0x7c>)
    4a4a:	f003 fc6d 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    4a4e:	4812      	ldr	r0, [pc, #72]	; (4a98 <z_sched_start+0x78>)
    4a50:	f7ff f97c 	bl	3d4c <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    4a54:	7b63      	ldrb	r3, [r4, #13]
    4a56:	075a      	lsls	r2, r3, #29
    4a58:	d411      	bmi.n	4a7e <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4a5a:	480f      	ldr	r0, [pc, #60]	; (4a98 <z_sched_start+0x78>)
    4a5c:	f7ff f968 	bl	3d30 <z_spin_unlock_valid>
    4a60:	b940      	cbnz	r0, 4a74 <z_sched_start+0x54>
    4a62:	490e      	ldr	r1, [pc, #56]	; (4a9c <z_sched_start+0x7c>)
    4a64:	480e      	ldr	r0, [pc, #56]	; (4aa0 <z_sched_start+0x80>)
    4a66:	22ac      	movs	r2, #172	; 0xac
    4a68:	f003 fb92 	bl	8190 <printk>
    4a6c:	21ac      	movs	r1, #172	; 0xac
    4a6e:	480b      	ldr	r0, [pc, #44]	; (4a9c <z_sched_start+0x7c>)
    4a70:	f003 fc5a 	bl	8328 <assert_post_action>
	__asm__ volatile(
    4a74:	f385 8811 	msr	BASEPRI, r5
    4a78:	f3bf 8f6f 	isb	sy
}
    4a7c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4a7e:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    4a82:	4620      	mov	r0, r4
    4a84:	7363      	strb	r3, [r4, #13]
    4a86:	f7ff ff45 	bl	4914 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4a8a:	4629      	mov	r1, r5
}
    4a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    4a90:	4801      	ldr	r0, [pc, #4]	; (4a98 <z_sched_start+0x78>)
    4a92:	f7ff bc09 	b.w	42a8 <z_reschedule>
    4a96:	bf00      	nop
    4a98:	20000a0c 	.word	0x20000a0c
    4a9c:	00008fe0 	.word	0x00008fe0
    4aa0:	00008fa6 	.word	0x00008fa6

00004aa4 <z_thread_timeout>:
{
    4aa4:	b570      	push	{r4, r5, r6, lr}
    4aa6:	4604      	mov	r4, r0
	__asm__ volatile(
    4aa8:	f04f 0320 	mov.w	r3, #32
    4aac:	f3ef 8611 	mrs	r6, BASEPRI
    4ab0:	f383 8811 	msr	BASEPRI, r3
    4ab4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4ab8:	481b      	ldr	r0, [pc, #108]	; (4b28 <z_thread_timeout+0x84>)
    4aba:	f7ff f92b 	bl	3d14 <z_spin_lock_valid>
    4abe:	b940      	cbnz	r0, 4ad2 <z_thread_timeout+0x2e>
    4ac0:	491a      	ldr	r1, [pc, #104]	; (4b2c <z_thread_timeout+0x88>)
    4ac2:	481b      	ldr	r0, [pc, #108]	; (4b30 <z_thread_timeout+0x8c>)
    4ac4:	2281      	movs	r2, #129	; 0x81
    4ac6:	f003 fb63 	bl	8190 <printk>
    4aca:	2181      	movs	r1, #129	; 0x81
    4acc:	4817      	ldr	r0, [pc, #92]	; (4b2c <z_thread_timeout+0x88>)
    4ace:	f003 fc2b 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    4ad2:	4815      	ldr	r0, [pc, #84]	; (4b28 <z_thread_timeout+0x84>)
    4ad4:	f7ff f93a 	bl	3d4c <z_spin_lock_set_owner>
		if (!killed) {
    4ad8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    4adc:	f013 0f28 	tst.w	r3, #40	; 0x28
    4ae0:	d110      	bne.n	4b04 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
    4ae2:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    4ae6:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    4aea:	b113      	cbz	r3, 4af2 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
    4aec:	4628      	mov	r0, r5
    4aee:	f7ff fc83 	bl	43f8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4af2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
    4af6:	4628      	mov	r0, r5
    4af8:	f023 0314 	bic.w	r3, r3, #20
    4afc:	f804 3c0b 	strb.w	r3, [r4, #-11]
    4b00:	f7ff ff08 	bl	4914 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4b04:	4808      	ldr	r0, [pc, #32]	; (4b28 <z_thread_timeout+0x84>)
    4b06:	f7ff f913 	bl	3d30 <z_spin_unlock_valid>
    4b0a:	b940      	cbnz	r0, 4b1e <z_thread_timeout+0x7a>
    4b0c:	4907      	ldr	r1, [pc, #28]	; (4b2c <z_thread_timeout+0x88>)
    4b0e:	4808      	ldr	r0, [pc, #32]	; (4b30 <z_thread_timeout+0x8c>)
    4b10:	22ac      	movs	r2, #172	; 0xac
    4b12:	f003 fb3d 	bl	8190 <printk>
    4b16:	21ac      	movs	r1, #172	; 0xac
    4b18:	4804      	ldr	r0, [pc, #16]	; (4b2c <z_thread_timeout+0x88>)
    4b1a:	f003 fc05 	bl	8328 <assert_post_action>
	__asm__ volatile(
    4b1e:	f386 8811 	msr	BASEPRI, r6
    4b22:	f3bf 8f6f 	isb	sy
}
    4b26:	bd70      	pop	{r4, r5, r6, pc}
    4b28:	20000a0c 	.word	0x20000a0c
    4b2c:	00008fe0 	.word	0x00008fe0
    4b30:	00008fa6 	.word	0x00008fa6

00004b34 <z_set_prio>:
{
    4b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b36:	4604      	mov	r4, r0
    4b38:	460e      	mov	r6, r1
	__asm__ volatile(
    4b3a:	f04f 0320 	mov.w	r3, #32
    4b3e:	f3ef 8711 	mrs	r7, BASEPRI
    4b42:	f383 8811 	msr	BASEPRI, r3
    4b46:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4b4a:	4838      	ldr	r0, [pc, #224]	; (4c2c <z_set_prio+0xf8>)
    4b4c:	f7ff f8e2 	bl	3d14 <z_spin_lock_valid>
    4b50:	b940      	cbnz	r0, 4b64 <z_set_prio+0x30>
    4b52:	4937      	ldr	r1, [pc, #220]	; (4c30 <z_set_prio+0xfc>)
    4b54:	4837      	ldr	r0, [pc, #220]	; (4c34 <z_set_prio+0x100>)
    4b56:	2281      	movs	r2, #129	; 0x81
    4b58:	f003 fb1a 	bl	8190 <printk>
    4b5c:	2181      	movs	r1, #129	; 0x81
    4b5e:	4834      	ldr	r0, [pc, #208]	; (4c30 <z_set_prio+0xfc>)
    4b60:	f003 fbe2 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    4b64:	4831      	ldr	r0, [pc, #196]	; (4c2c <z_set_prio+0xf8>)
    4b66:	f7ff f8f1 	bl	3d4c <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4b6a:	7b63      	ldrb	r3, [r4, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
    4b6c:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4b6e:	06da      	lsls	r2, r3, #27
    4b70:	d158      	bne.n	4c24 <z_set_prio+0xf0>
    4b72:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    4b74:	2d00      	cmp	r5, #0
    4b76:	d155      	bne.n	4c24 <z_set_prio+0xf0>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4b7c:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    4b7e:	4621      	mov	r1, r4
    4b80:	482d      	ldr	r0, [pc, #180]	; (4c38 <z_set_prio+0x104>)
    4b82:	f7ff fc1b 	bl	43bc <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4b86:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    4b88:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    4b8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4b8e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4b90:	4b2a      	ldr	r3, [pc, #168]	; (4c3c <z_set_prio+0x108>)
    4b92:	429c      	cmp	r4, r3
    4b94:	d10a      	bne.n	4bac <z_set_prio+0x78>
    4b96:	492a      	ldr	r1, [pc, #168]	; (4c40 <z_set_prio+0x10c>)
    4b98:	4826      	ldr	r0, [pc, #152]	; (4c34 <z_set_prio+0x100>)
    4b9a:	f240 32a6 	movw	r2, #934	; 0x3a6
    4b9e:	f003 faf7 	bl	8190 <printk>
    4ba2:	f240 31a6 	movw	r1, #934	; 0x3a6
    4ba6:	4826      	ldr	r0, [pc, #152]	; (4c40 <z_set_prio+0x10c>)
    4ba8:	f003 fbbe 	bl	8328 <assert_post_action>
	return list->head == list;
    4bac:	4925      	ldr	r1, [pc, #148]	; (4c44 <z_set_prio+0x110>)
    4bae:	460b      	mov	r3, r1
    4bb0:	f853 0f28 	ldr.w	r0, [r3, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4bb4:	4298      	cmp	r0, r3
    4bb6:	bf18      	it	ne
    4bb8:	4605      	movne	r5, r0
    4bba:	2d00      	cmp	r5, #0
    4bbc:	461a      	mov	r2, r3
    4bbe:	462b      	mov	r3, r5
    4bc0:	bf38      	it	cc
    4bc2:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4bc4:	6acd      	ldr	r5, [r1, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4bc6:	b343      	cbz	r3, 4c1a <z_set_prio+0xe6>
	int32_t b1 = thread_1->base.prio;
    4bc8:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4bcc:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4bd0:	4286      	cmp	r6, r0
    4bd2:	d01e      	beq.n	4c12 <z_set_prio+0xde>
		return b2 - b1;
    4bd4:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4bd6:	2800      	cmp	r0, #0
    4bd8:	dd1b      	ble.n	4c12 <z_set_prio+0xde>
	sys_dnode_t *const prev = successor->prev;
    4bda:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4bdc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4be0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4be2:	605c      	str	r4, [r3, #4]
			update_cache(1);
    4be4:	2001      	movs	r0, #1
    4be6:	f7ff fc25 	bl	4434 <update_cache>
    4bea:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4bec:	480f      	ldr	r0, [pc, #60]	; (4c2c <z_set_prio+0xf8>)
    4bee:	f7ff f89f 	bl	3d30 <z_spin_unlock_valid>
    4bf2:	b940      	cbnz	r0, 4c06 <z_set_prio+0xd2>
    4bf4:	490e      	ldr	r1, [pc, #56]	; (4c30 <z_set_prio+0xfc>)
    4bf6:	480f      	ldr	r0, [pc, #60]	; (4c34 <z_set_prio+0x100>)
    4bf8:	22ac      	movs	r2, #172	; 0xac
    4bfa:	f003 fac9 	bl	8190 <printk>
    4bfe:	21ac      	movs	r1, #172	; 0xac
    4c00:	480b      	ldr	r0, [pc, #44]	; (4c30 <z_set_prio+0xfc>)
    4c02:	f003 fb91 	bl	8328 <assert_post_action>
	__asm__ volatile(
    4c06:	f387 8811 	msr	BASEPRI, r7
    4c0a:	f3bf 8f6f 	isb	sy
}
    4c0e:	4620      	mov	r0, r4
    4c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    4c12:	42ab      	cmp	r3, r5
    4c14:	d001      	beq.n	4c1a <z_set_prio+0xe6>
    4c16:	681b      	ldr	r3, [r3, #0]
    4c18:	e7d5      	b.n	4bc6 <z_set_prio+0x92>
	node->prev = tail;
    4c1a:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    4c1e:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4c20:	62cc      	str	r4, [r1, #44]	; 0x2c
}
    4c22:	e7df      	b.n	4be4 <z_set_prio+0xb0>
			thread->base.prio = prio;
    4c24:	73a6      	strb	r6, [r4, #14]
    4c26:	2400      	movs	r4, #0
    4c28:	e7e0      	b.n	4bec <z_set_prio+0xb8>
    4c2a:	bf00      	nop
    4c2c:	20000a0c 	.word	0x20000a0c
    4c30:	00008fe0 	.word	0x00008fe0
    4c34:	00008fa6 	.word	0x00008fa6
    4c38:	200009f8 	.word	0x200009f8
    4c3c:	20000120 	.word	0x20000120
    4c40:	00009e38 	.word	0x00009e38
    4c44:	200009d0 	.word	0x200009d0

00004c48 <z_unpend_first_thread>:
{
    4c48:	b538      	push	{r3, r4, r5, lr}
    4c4a:	4604      	mov	r4, r0
	__asm__ volatile(
    4c4c:	f04f 0320 	mov.w	r3, #32
    4c50:	f3ef 8511 	mrs	r5, BASEPRI
    4c54:	f383 8811 	msr	BASEPRI, r3
    4c58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4c5c:	4816      	ldr	r0, [pc, #88]	; (4cb8 <z_unpend_first_thread+0x70>)
    4c5e:	f7ff f859 	bl	3d14 <z_spin_lock_valid>
    4c62:	b940      	cbnz	r0, 4c76 <z_unpend_first_thread+0x2e>
    4c64:	4915      	ldr	r1, [pc, #84]	; (4cbc <z_unpend_first_thread+0x74>)
    4c66:	4816      	ldr	r0, [pc, #88]	; (4cc0 <z_unpend_first_thread+0x78>)
    4c68:	2281      	movs	r2, #129	; 0x81
    4c6a:	f003 fa91 	bl	8190 <printk>
    4c6e:	2181      	movs	r1, #129	; 0x81
    4c70:	4812      	ldr	r0, [pc, #72]	; (4cbc <z_unpend_first_thread+0x74>)
    4c72:	f003 fb59 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    4c76:	4810      	ldr	r0, [pc, #64]	; (4cb8 <z_unpend_first_thread+0x70>)
    4c78:	f7ff f868 	bl	3d4c <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    4c7c:	4620      	mov	r0, r4
    4c7e:	f003 fde3 	bl	8848 <z_priq_dumb_best>
		if (thread != NULL) {
    4c82:	4604      	mov	r4, r0
    4c84:	b128      	cbz	r0, 4c92 <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
    4c86:	f7ff fbb7 	bl	43f8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    4c8a:	f104 0018 	add.w	r0, r4, #24
    4c8e:	f000 fb29 	bl	52e4 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4c92:	4809      	ldr	r0, [pc, #36]	; (4cb8 <z_unpend_first_thread+0x70>)
    4c94:	f7ff f84c 	bl	3d30 <z_spin_unlock_valid>
    4c98:	b940      	cbnz	r0, 4cac <z_unpend_first_thread+0x64>
    4c9a:	4908      	ldr	r1, [pc, #32]	; (4cbc <z_unpend_first_thread+0x74>)
    4c9c:	4808      	ldr	r0, [pc, #32]	; (4cc0 <z_unpend_first_thread+0x78>)
    4c9e:	22ac      	movs	r2, #172	; 0xac
    4ca0:	f003 fa76 	bl	8190 <printk>
    4ca4:	21ac      	movs	r1, #172	; 0xac
    4ca6:	4805      	ldr	r0, [pc, #20]	; (4cbc <z_unpend_first_thread+0x74>)
    4ca8:	f003 fb3e 	bl	8328 <assert_post_action>
	__asm__ volatile(
    4cac:	f385 8811 	msr	BASEPRI, r5
    4cb0:	f3bf 8f6f 	isb	sy
}
    4cb4:	4620      	mov	r0, r4
    4cb6:	bd38      	pop	{r3, r4, r5, pc}
    4cb8:	20000a0c 	.word	0x20000a0c
    4cbc:	00008fe0 	.word	0x00008fe0
    4cc0:	00008fa6 	.word	0x00008fa6

00004cc4 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4cc4:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    4cc6:	4b04      	ldr	r3, [pc, #16]	; (4cd8 <z_sched_init+0x14>)
    4cc8:	4608      	mov	r0, r1
    4cca:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    4cce:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    4cd2:	f7ff ba95 	b.w	4200 <k_sched_time_slice_set>
    4cd6:	bf00      	nop
    4cd8:	200009d0 	.word	0x200009d0

00004cdc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    4cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cde:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    4ce2:	b153      	cbz	r3, 4cfa <z_impl_k_yield+0x1e>
    4ce4:	493a      	ldr	r1, [pc, #232]	; (4dd0 <z_impl_k_yield+0xf4>)
    4ce6:	483b      	ldr	r0, [pc, #236]	; (4dd4 <z_impl_k_yield+0xf8>)
    4ce8:	f240 42a1 	movw	r2, #1185	; 0x4a1
    4cec:	f003 fa50 	bl	8190 <printk>
    4cf0:	f240 41a1 	movw	r1, #1185	; 0x4a1
    4cf4:	4836      	ldr	r0, [pc, #216]	; (4dd0 <z_impl_k_yield+0xf4>)
    4cf6:	f003 fb17 	bl	8328 <assert_post_action>
	__asm__ volatile(
    4cfa:	f04f 0320 	mov.w	r3, #32
    4cfe:	f3ef 8611 	mrs	r6, BASEPRI
    4d02:	f383 8811 	msr	BASEPRI, r3
    4d06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4d0a:	4833      	ldr	r0, [pc, #204]	; (4dd8 <z_impl_k_yield+0xfc>)
    4d0c:	f7ff f802 	bl	3d14 <z_spin_lock_valid>
    4d10:	b940      	cbnz	r0, 4d24 <z_impl_k_yield+0x48>
    4d12:	4932      	ldr	r1, [pc, #200]	; (4ddc <z_impl_k_yield+0x100>)
    4d14:	482f      	ldr	r0, [pc, #188]	; (4dd4 <z_impl_k_yield+0xf8>)
    4d16:	2281      	movs	r2, #129	; 0x81
    4d18:	f003 fa3a 	bl	8190 <printk>
    4d1c:	2181      	movs	r1, #129	; 0x81
    4d1e:	482f      	ldr	r0, [pc, #188]	; (4ddc <z_impl_k_yield+0x100>)
    4d20:	f003 fb02 	bl	8328 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
    4d24:	4d2e      	ldr	r5, [pc, #184]	; (4de0 <z_impl_k_yield+0x104>)
	z_spin_lock_set_owner(l);
    4d26:	482c      	ldr	r0, [pc, #176]	; (4dd8 <z_impl_k_yield+0xfc>)
    4d28:	f7ff f810 	bl	3d4c <z_spin_lock_set_owner>
    4d2c:	68a9      	ldr	r1, [r5, #8]
		_priq_run_remove(pq, thread);
    4d2e:	f105 0028 	add.w	r0, r5, #40	; 0x28
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4d32:	7b4b      	ldrb	r3, [r1, #13]
    4d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4d38:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
    4d3a:	f7ff fb3f 	bl	43bc <z_priq_dumb_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
    4d3e:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4d40:	7b63      	ldrb	r3, [r4, #13]
    4d42:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4d46:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4d48:	4b26      	ldr	r3, [pc, #152]	; (4de4 <z_impl_k_yield+0x108>)
    4d4a:	429c      	cmp	r4, r3
    4d4c:	d10a      	bne.n	4d64 <z_impl_k_yield+0x88>
    4d4e:	4920      	ldr	r1, [pc, #128]	; (4dd0 <z_impl_k_yield+0xf4>)
    4d50:	4820      	ldr	r0, [pc, #128]	; (4dd4 <z_impl_k_yield+0xf8>)
    4d52:	f240 32a6 	movw	r2, #934	; 0x3a6
    4d56:	f003 fa1b 	bl	8190 <printk>
    4d5a:	f240 31a6 	movw	r1, #934	; 0x3a6
    4d5e:	481c      	ldr	r0, [pc, #112]	; (4dd0 <z_impl_k_yield+0xf4>)
    4d60:	f003 fae2 	bl	8328 <assert_post_action>
	return list->head == list;
    4d64:	6aab      	ldr	r3, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d66:	4820      	ldr	r0, [pc, #128]	; (4de8 <z_impl_k_yield+0x10c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4d68:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d6a:	4283      	cmp	r3, r0
    4d6c:	bf08      	it	eq
    4d6e:	2300      	moveq	r3, #0
    4d70:	2b00      	cmp	r3, #0
    4d72:	bf38      	it	cc
    4d74:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d76:	b333      	cbz	r3, 4dc6 <z_impl_k_yield+0xea>
	int32_t b1 = thread_1->base.prio;
    4d78:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4d7c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    4d80:	4297      	cmp	r7, r2
    4d82:	d01c      	beq.n	4dbe <z_impl_k_yield+0xe2>
		return b2 - b1;
    4d84:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    4d86:	2a00      	cmp	r2, #0
    4d88:	dd19      	ble.n	4dbe <z_impl_k_yield+0xe2>
	sys_dnode_t *const prev = successor->prev;
    4d8a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4d8c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4d90:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4d92:	605c      	str	r4, [r3, #4]
	update_cache(1);
    4d94:	2001      	movs	r0, #1
    4d96:	f7ff fb4d 	bl	4434 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4d9a:	480f      	ldr	r0, [pc, #60]	; (4dd8 <z_impl_k_yield+0xfc>)
    4d9c:	f7fe ffc8 	bl	3d30 <z_spin_unlock_valid>
    4da0:	b940      	cbnz	r0, 4db4 <z_impl_k_yield+0xd8>
    4da2:	490e      	ldr	r1, [pc, #56]	; (4ddc <z_impl_k_yield+0x100>)
    4da4:	480b      	ldr	r0, [pc, #44]	; (4dd4 <z_impl_k_yield+0xf8>)
    4da6:	22c3      	movs	r2, #195	; 0xc3
    4da8:	f003 f9f2 	bl	8190 <printk>
    4dac:	21c3      	movs	r1, #195	; 0xc3
    4dae:	480b      	ldr	r0, [pc, #44]	; (4ddc <z_impl_k_yield+0x100>)
    4db0:	f003 faba 	bl	8328 <assert_post_action>
    4db4:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    4db6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4dba:	f7fd b9a5 	b.w	2108 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    4dbe:	428b      	cmp	r3, r1
    4dc0:	d001      	beq.n	4dc6 <z_impl_k_yield+0xea>
    4dc2:	681b      	ldr	r3, [r3, #0]
    4dc4:	e7d7      	b.n	4d76 <z_impl_k_yield+0x9a>
	node->prev = tail;
    4dc6:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    4dca:	600c      	str	r4, [r1, #0]
	list->tail = node;
    4dcc:	62ec      	str	r4, [r5, #44]	; 0x2c
}
    4dce:	e7e1      	b.n	4d94 <z_impl_k_yield+0xb8>
    4dd0:	00009e38 	.word	0x00009e38
    4dd4:	00008fa6 	.word	0x00008fa6
    4dd8:	20000a0c 	.word	0x20000a0c
    4ddc:	00008fe0 	.word	0x00008fe0
    4de0:	200009d0 	.word	0x200009d0
    4de4:	20000120 	.word	0x20000120
    4de8:	200009f8 	.word	0x200009f8

00004dec <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    4dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4df0:	4604      	mov	r4, r0
    4df2:	460d      	mov	r5, r1
    4df4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    4df8:	b153      	cbz	r3, 4e10 <z_tick_sleep+0x24>
    4dfa:	493c      	ldr	r1, [pc, #240]	; (4eec <z_tick_sleep+0x100>)
    4dfc:	483c      	ldr	r0, [pc, #240]	; (4ef0 <z_tick_sleep+0x104>)
    4dfe:	f240 42be 	movw	r2, #1214	; 0x4be
    4e02:	f003 f9c5 	bl	8190 <printk>
    4e06:	f240 41be 	movw	r1, #1214	; 0x4be
    4e0a:	4838      	ldr	r0, [pc, #224]	; (4eec <z_tick_sleep+0x100>)
    4e0c:	f003 fa8c 	bl	8328 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    4e10:	ea54 0305 	orrs.w	r3, r4, r5
    4e14:	d104      	bne.n	4e20 <z_tick_sleep+0x34>
	z_impl_k_yield();
    4e16:	f7ff ff61 	bl	4cdc <z_impl_k_yield>
		k_yield();
		return 0;
    4e1a:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    4e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    4e20:	f06f 0301 	mvn.w	r3, #1
    4e24:	1b1e      	subs	r6, r3, r4
    4e26:	f04f 33ff 	mov.w	r3, #4294967295
    4e2a:	eb63 0705 	sbc.w	r7, r3, r5
    4e2e:	2e01      	cmp	r6, #1
    4e30:	f177 0300 	sbcs.w	r3, r7, #0
    4e34:	da56      	bge.n	4ee4 <z_tick_sleep+0xf8>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4e36:	f003 fd11 	bl	885c <sys_clock_tick_get_32>
    4e3a:	1906      	adds	r6, r0, r4
    4e3c:	f04f 0320 	mov.w	r3, #32
    4e40:	f3ef 8811 	mrs	r8, BASEPRI
    4e44:	f383 8811 	msr	BASEPRI, r3
    4e48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4e4c:	4829      	ldr	r0, [pc, #164]	; (4ef4 <z_tick_sleep+0x108>)
    4e4e:	f7fe ff61 	bl	3d14 <z_spin_lock_valid>
    4e52:	b940      	cbnz	r0, 4e66 <z_tick_sleep+0x7a>
    4e54:	4928      	ldr	r1, [pc, #160]	; (4ef8 <z_tick_sleep+0x10c>)
    4e56:	4826      	ldr	r0, [pc, #152]	; (4ef0 <z_tick_sleep+0x104>)
    4e58:	2281      	movs	r2, #129	; 0x81
    4e5a:	f003 f999 	bl	8190 <printk>
    4e5e:	2181      	movs	r1, #129	; 0x81
    4e60:	4825      	ldr	r0, [pc, #148]	; (4ef8 <z_tick_sleep+0x10c>)
    4e62:	f003 fa61 	bl	8328 <assert_post_action>
	pending_current = _current;
    4e66:	4f25      	ldr	r7, [pc, #148]	; (4efc <z_tick_sleep+0x110>)
	z_spin_lock_set_owner(l);
    4e68:	4822      	ldr	r0, [pc, #136]	; (4ef4 <z_tick_sleep+0x108>)
    4e6a:	f7fe ff6f 	bl	3d4c <z_spin_lock_set_owner>
    4e6e:	68b8      	ldr	r0, [r7, #8]
    4e70:	4b23      	ldr	r3, [pc, #140]	; (4f00 <z_tick_sleep+0x114>)
    4e72:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4e74:	f7ff fb0e 	bl	4494 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    4e78:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4e7a:	4622      	mov	r2, r4
    4e7c:	462b      	mov	r3, r5
    4e7e:	3018      	adds	r0, #24
    4e80:	4920      	ldr	r1, [pc, #128]	; (4f04 <z_tick_sleep+0x118>)
    4e82:	f000 f975 	bl	5170 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4e86:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4e88:	481a      	ldr	r0, [pc, #104]	; (4ef4 <z_tick_sleep+0x108>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4e8a:	7b53      	ldrb	r3, [r2, #13]
    4e8c:	f043 0310 	orr.w	r3, r3, #16
    4e90:	7353      	strb	r3, [r2, #13]
    4e92:	f7fe ff4d 	bl	3d30 <z_spin_unlock_valid>
    4e96:	b940      	cbnz	r0, 4eaa <z_tick_sleep+0xbe>
    4e98:	4917      	ldr	r1, [pc, #92]	; (4ef8 <z_tick_sleep+0x10c>)
    4e9a:	4815      	ldr	r0, [pc, #84]	; (4ef0 <z_tick_sleep+0x104>)
    4e9c:	22c3      	movs	r2, #195	; 0xc3
    4e9e:	f003 f977 	bl	8190 <printk>
    4ea2:	21c3      	movs	r1, #195	; 0xc3
    4ea4:	4814      	ldr	r0, [pc, #80]	; (4ef8 <z_tick_sleep+0x10c>)
    4ea6:	f003 fa3f 	bl	8328 <assert_post_action>
    4eaa:	4640      	mov	r0, r8
    4eac:	f7fd f92c 	bl	2108 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    4eb0:	68bb      	ldr	r3, [r7, #8]
    4eb2:	7b5b      	ldrb	r3, [r3, #13]
    4eb4:	06db      	lsls	r3, r3, #27
    4eb6:	d50a      	bpl.n	4ece <z_tick_sleep+0xe2>
    4eb8:	490c      	ldr	r1, [pc, #48]	; (4eec <z_tick_sleep+0x100>)
    4eba:	480d      	ldr	r0, [pc, #52]	; (4ef0 <z_tick_sleep+0x104>)
    4ebc:	f240 42df 	movw	r2, #1247	; 0x4df
    4ec0:	f003 f966 	bl	8190 <printk>
    4ec4:	f240 41df 	movw	r1, #1247	; 0x4df
    4ec8:	4808      	ldr	r0, [pc, #32]	; (4eec <z_tick_sleep+0x100>)
    4eca:	f003 fa2d 	bl	8328 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4ece:	f003 fcc5 	bl	885c <sys_clock_tick_get_32>
    4ed2:	1a30      	subs	r0, r6, r0
    4ed4:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    4ed8:	2801      	cmp	r0, #1
    4eda:	f171 0300 	sbcs.w	r3, r1, #0
    4ede:	bfb8      	it	lt
    4ee0:	2000      	movlt	r0, #0
    4ee2:	e79b      	b.n	4e1c <z_tick_sleep+0x30>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    4ee4:	f06f 0601 	mvn.w	r6, #1
    4ee8:	1b36      	subs	r6, r6, r4
    4eea:	e7a7      	b.n	4e3c <z_tick_sleep+0x50>
    4eec:	00009e38 	.word	0x00009e38
    4ef0:	00008fa6 	.word	0x00008fa6
    4ef4:	20000a0c 	.word	0x20000a0c
    4ef8:	00008fe0 	.word	0x00008fe0
    4efc:	200009d0 	.word	0x200009d0
    4f00:	20000a08 	.word	0x20000a08
    4f04:	00004aa5 	.word	0x00004aa5

00004f08 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    4f08:	b538      	push	{r3, r4, r5, lr}
    4f0a:	4604      	mov	r4, r0
    4f0c:	460d      	mov	r5, r1
    4f0e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    4f12:	b153      	cbz	r3, 4f2a <z_impl_k_sleep+0x22>
    4f14:	4911      	ldr	r1, [pc, #68]	; (4f5c <z_impl_k_sleep+0x54>)
    4f16:	4812      	ldr	r0, [pc, #72]	; (4f60 <z_impl_k_sleep+0x58>)
    4f18:	f240 42ee 	movw	r2, #1262	; 0x4ee
    4f1c:	f003 f938 	bl	8190 <printk>
    4f20:	f240 41ee 	movw	r1, #1262	; 0x4ee
    4f24:	480d      	ldr	r0, [pc, #52]	; (4f5c <z_impl_k_sleep+0x54>)
    4f26:	f003 f9ff 	bl	8328 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4f2a:	1c6b      	adds	r3, r5, #1
    4f2c:	bf08      	it	eq
    4f2e:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    4f32:	d106      	bne.n	4f42 <z_impl_k_sleep+0x3a>
		k_thread_suspend(_current);
    4f34:	4b0b      	ldr	r3, [pc, #44]	; (4f64 <z_impl_k_sleep+0x5c>)
    4f36:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4f38:	f7ff fb7c 	bl	4634 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    4f3c:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    4f40:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    4f42:	4620      	mov	r0, r4
    4f44:	4629      	mov	r1, r5
    4f46:	f7ff ff51 	bl	4dec <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    4f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4f4e:	fb80 3403 	smull	r3, r4, r0, r3
    4f52:	0bd8      	lsrs	r0, r3, #15
    4f54:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    4f58:	e7f2      	b.n	4f40 <z_impl_k_sleep+0x38>
    4f5a:	bf00      	nop
    4f5c:	00009e38 	.word	0x00009e38
    4f60:	00008fa6 	.word	0x00008fa6
    4f64:	200009d0 	.word	0x200009d0

00004f68 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4f68:	4b01      	ldr	r3, [pc, #4]	; (4f70 <z_impl_k_current_get+0x8>)
    4f6a:	6898      	ldr	r0, [r3, #8]
    4f6c:	4770      	bx	lr
    4f6e:	bf00      	nop
    4f70:	200009d0 	.word	0x200009d0

00004f74 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    4f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f78:	4604      	mov	r4, r0
    4f7a:	f04f 0320 	mov.w	r3, #32
    4f7e:	f3ef 8611 	mrs	r6, BASEPRI
    4f82:	f383 8811 	msr	BASEPRI, r3
    4f86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4f8a:	483e      	ldr	r0, [pc, #248]	; (5084 <z_thread_abort+0x110>)
    4f8c:	f7fe fec2 	bl	3d14 <z_spin_lock_valid>
    4f90:	b940      	cbnz	r0, 4fa4 <z_thread_abort+0x30>
    4f92:	493d      	ldr	r1, [pc, #244]	; (5088 <z_thread_abort+0x114>)
    4f94:	483d      	ldr	r0, [pc, #244]	; (508c <z_thread_abort+0x118>)
    4f96:	2281      	movs	r2, #129	; 0x81
    4f98:	f003 f8fa 	bl	8190 <printk>
    4f9c:	2181      	movs	r1, #129	; 0x81
    4f9e:	483a      	ldr	r0, [pc, #232]	; (5088 <z_thread_abort+0x114>)
    4fa0:	f003 f9c2 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    4fa4:	4837      	ldr	r0, [pc, #220]	; (5084 <z_thread_abort+0x110>)
    4fa6:	f7fe fed1 	bl	3d4c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4faa:	7b63      	ldrb	r3, [r4, #13]
    4fac:	071a      	lsls	r2, r3, #28
    4fae:	d512      	bpl.n	4fd6 <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4fb0:	4834      	ldr	r0, [pc, #208]	; (5084 <z_thread_abort+0x110>)
    4fb2:	f7fe febd 	bl	3d30 <z_spin_unlock_valid>
    4fb6:	b940      	cbnz	r0, 4fca <z_thread_abort+0x56>
    4fb8:	4933      	ldr	r1, [pc, #204]	; (5088 <z_thread_abort+0x114>)
    4fba:	4834      	ldr	r0, [pc, #208]	; (508c <z_thread_abort+0x118>)
    4fbc:	22ac      	movs	r2, #172	; 0xac
    4fbe:	f003 f8e7 	bl	8190 <printk>
    4fc2:	21ac      	movs	r1, #172	; 0xac
    4fc4:	4830      	ldr	r0, [pc, #192]	; (5088 <z_thread_abort+0x114>)
    4fc6:	f003 f9af 	bl	8328 <assert_post_action>
	__asm__ volatile(
    4fca:	f386 8811 	msr	BASEPRI, r6
    4fce:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4fd6:	f023 0220 	bic.w	r2, r3, #32
    4fda:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    4fde:	09d2      	lsrs	r2, r2, #7
    4fe0:	d138      	bne.n	5054 <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4fe2:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    4fe4:	68a3      	ldr	r3, [r4, #8]
    4fe6:	b113      	cbz	r3, 4fee <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
    4fe8:	4620      	mov	r0, r4
    4fea:	f7ff fa05 	bl	43f8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    4fee:	f104 0018 	add.w	r0, r4, #24
    4ff2:	f000 f977 	bl	52e4 <z_abort_timeout>
    4ff6:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4ffa:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    4ffe:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5000:	42bd      	cmp	r5, r7
    5002:	d000      	beq.n	5006 <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    5004:	bb85      	cbnz	r5, 5068 <z_thread_abort+0xf4>
		update_cache(1);
    5006:	2001      	movs	r0, #1
    5008:	f7ff fa14 	bl	4434 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    500c:	4b20      	ldr	r3, [pc, #128]	; (5090 <z_thread_abort+0x11c>)
    500e:	689b      	ldr	r3, [r3, #8]
    5010:	42a3      	cmp	r3, r4
    5012:	d1cd      	bne.n	4fb0 <z_thread_abort+0x3c>
    5014:	f3ef 8305 	mrs	r3, IPSR
    5018:	2b00      	cmp	r3, #0
    501a:	d1c9      	bne.n	4fb0 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    501c:	4819      	ldr	r0, [pc, #100]	; (5084 <z_thread_abort+0x110>)
    501e:	f7fe fe87 	bl	3d30 <z_spin_unlock_valid>
    5022:	b940      	cbnz	r0, 5036 <z_thread_abort+0xc2>
    5024:	4918      	ldr	r1, [pc, #96]	; (5088 <z_thread_abort+0x114>)
    5026:	4819      	ldr	r0, [pc, #100]	; (508c <z_thread_abort+0x118>)
    5028:	22c3      	movs	r2, #195	; 0xc3
    502a:	f003 f8b1 	bl	8190 <printk>
    502e:	21c3      	movs	r1, #195	; 0xc3
    5030:	4815      	ldr	r0, [pc, #84]	; (5088 <z_thread_abort+0x114>)
    5032:	f003 f979 	bl	8328 <assert_post_action>
    5036:	4630      	mov	r0, r6
    5038:	f7fd f866 	bl	2108 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    503c:	f240 6201 	movw	r2, #1537	; 0x601
    5040:	4914      	ldr	r1, [pc, #80]	; (5094 <z_thread_abort+0x120>)
    5042:	4812      	ldr	r0, [pc, #72]	; (508c <z_thread_abort+0x118>)
    5044:	f003 f8a4 	bl	8190 <printk>
    5048:	f240 6101 	movw	r1, #1537	; 0x601
    504c:	4811      	ldr	r0, [pc, #68]	; (5094 <z_thread_abort+0x120>)
    504e:	f003 f96b 	bl	8328 <assert_post_action>
    5052:	e7ad      	b.n	4fb0 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5054:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5058:	f043 0308 	orr.w	r3, r3, #8
		_priq_run_remove(pq, thread);
    505c:	4621      	mov	r1, r4
    505e:	480e      	ldr	r0, [pc, #56]	; (5098 <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5060:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    5062:	f7ff f9ab 	bl	43bc <z_priq_dumb_remove>
}
    5066:	e7bd      	b.n	4fe4 <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
    5068:	4628      	mov	r0, r5
    506a:	f7ff f9c5 	bl	43f8 <unpend_thread_no_timeout>
    506e:	f105 0018 	add.w	r0, r5, #24
    5072:	f000 f937 	bl	52e4 <z_abort_timeout>
		ready_thread(thread);
    5076:	4628      	mov	r0, r5
    5078:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    507c:	f7ff fc4a 	bl	4914 <ready_thread>
    5080:	e7bd      	b.n	4ffe <z_thread_abort+0x8a>
    5082:	bf00      	nop
    5084:	20000a0c 	.word	0x20000a0c
    5088:	00008fe0 	.word	0x00008fe0
    508c:	00008fa6 	.word	0x00008fa6
    5090:	200009d0 	.word	0x200009d0
    5094:	00009e38 	.word	0x00009e38
    5098:	200009f8 	.word	0x200009f8

0000509c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    509c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    509e:	4806      	ldr	r0, [pc, #24]	; (50b8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    50a0:	4a06      	ldr	r2, [pc, #24]	; (50bc <z_data_copy+0x20>)
    50a2:	4907      	ldr	r1, [pc, #28]	; (50c0 <z_data_copy+0x24>)
    50a4:	1a12      	subs	r2, r2, r0
    50a6:	f003 fa59 	bl	855c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    50aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    50ae:	4a05      	ldr	r2, [pc, #20]	; (50c4 <z_data_copy+0x28>)
    50b0:	4905      	ldr	r1, [pc, #20]	; (50c8 <z_data_copy+0x2c>)
    50b2:	4806      	ldr	r0, [pc, #24]	; (50cc <z_data_copy+0x30>)
    50b4:	f003 ba52 	b.w	855c <memcpy>
    50b8:	20000000 	.word	0x20000000
    50bc:	20000120 	.word	0x20000120
    50c0:	00009eb8 	.word	0x00009eb8
    50c4:	00000000 	.word	0x00000000
    50c8:	00009eb8 	.word	0x00009eb8
    50cc:	20000000 	.word	0x20000000

000050d0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    50d0:	4b03      	ldr	r3, [pc, #12]	; (50e0 <elapsed+0x10>)
    50d2:	681b      	ldr	r3, [r3, #0]
    50d4:	b90b      	cbnz	r3, 50da <elapsed+0xa>
    50d6:	f7fc bcdb 	b.w	1a90 <sys_clock_elapsed>
}
    50da:	2000      	movs	r0, #0
    50dc:	4770      	bx	lr
    50de:	bf00      	nop
    50e0:	20000a18 	.word	0x20000a18

000050e4 <remove_timeout>:
{
    50e4:	b530      	push	{r4, r5, lr}
    50e6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    50e8:	b168      	cbz	r0, 5106 <remove_timeout+0x22>
    50ea:	4a0a      	ldr	r2, [pc, #40]	; (5114 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    50ec:	6852      	ldr	r2, [r2, #4]
    50ee:	4290      	cmp	r0, r2
    50f0:	d009      	beq.n	5106 <remove_timeout+0x22>
	if (next(t) != NULL) {
    50f2:	b143      	cbz	r3, 5106 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    50f4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    50f8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    50fc:	1912      	adds	r2, r2, r4
    50fe:	eb45 0101 	adc.w	r1, r5, r1
    5102:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    5106:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    5108:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    510a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    510c:	2300      	movs	r3, #0
	node->prev = NULL;
    510e:	e9c0 3300 	strd	r3, r3, [r0]
}
    5112:	bd30      	pop	{r4, r5, pc}
    5114:	20000058 	.word	0x20000058

00005118 <next_timeout>:

static int32_t next_timeout(void)
{
    5118:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    511a:	4b13      	ldr	r3, [pc, #76]	; (5168 <next_timeout+0x50>)
    511c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    511e:	429c      	cmp	r4, r3
    5120:	bf08      	it	eq
    5122:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5124:	f7ff ffd4 	bl	50d0 <elapsed>
    5128:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    512a:	b1bc      	cbz	r4, 515c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    512c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    5130:	1b40      	subs	r0, r0, r5
    5132:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    5136:	2801      	cmp	r0, #1
    5138:	f171 0300 	sbcs.w	r3, r1, #0
    513c:	db11      	blt.n	5162 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    513e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    5142:	2300      	movs	r3, #0
    5144:	4282      	cmp	r2, r0
    5146:	eb73 0401 	sbcs.w	r4, r3, r1
    514a:	da00      	bge.n	514e <next_timeout+0x36>
    514c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    514e:	4b07      	ldr	r3, [pc, #28]	; (516c <next_timeout+0x54>)
    5150:	691b      	ldr	r3, [r3, #16]
    5152:	b113      	cbz	r3, 515a <next_timeout+0x42>
    5154:	4298      	cmp	r0, r3
    5156:	bfa8      	it	ge
    5158:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    515a:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    515c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5160:	e7f5      	b.n	514e <next_timeout+0x36>
    5162:	2000      	movs	r0, #0
    5164:	e7f3      	b.n	514e <next_timeout+0x36>
    5166:	bf00      	nop
    5168:	20000058 	.word	0x20000058
    516c:	200009d0 	.word	0x200009d0

00005170 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    5170:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5174:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5176:	1c6b      	adds	r3, r5, #1
    5178:	bf08      	it	eq
    517a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    517e:	4682      	mov	sl, r0
    5180:	468b      	mov	fp, r1
    5182:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5184:	f000 809c 	beq.w	52c0 <z_add_timeout+0x150>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    5188:	6803      	ldr	r3, [r0, #0]
    518a:	b143      	cbz	r3, 519e <z_add_timeout+0x2e>
    518c:	494e      	ldr	r1, [pc, #312]	; (52c8 <z_add_timeout+0x158>)
    518e:	484f      	ldr	r0, [pc, #316]	; (52cc <z_add_timeout+0x15c>)
    5190:	225d      	movs	r2, #93	; 0x5d
    5192:	f002 fffd 	bl	8190 <printk>
    5196:	215d      	movs	r1, #93	; 0x5d
    5198:	484b      	ldr	r0, [pc, #300]	; (52c8 <z_add_timeout+0x158>)
    519a:	f003 f8c5 	bl	8328 <assert_post_action>
	to->fn = fn;
    519e:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    51a2:	f04f 0320 	mov.w	r3, #32
    51a6:	f3ef 8b11 	mrs	fp, BASEPRI
    51aa:	f383 8811 	msr	BASEPRI, r3
    51ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    51b2:	4847      	ldr	r0, [pc, #284]	; (52d0 <z_add_timeout+0x160>)
    51b4:	f7fe fdae 	bl	3d14 <z_spin_lock_valid>
    51b8:	b940      	cbnz	r0, 51cc <z_add_timeout+0x5c>
    51ba:	4946      	ldr	r1, [pc, #280]	; (52d4 <z_add_timeout+0x164>)
    51bc:	4843      	ldr	r0, [pc, #268]	; (52cc <z_add_timeout+0x15c>)
    51be:	2281      	movs	r2, #129	; 0x81
    51c0:	f002 ffe6 	bl	8190 <printk>
    51c4:	2181      	movs	r1, #129	; 0x81
    51c6:	4843      	ldr	r0, [pc, #268]	; (52d4 <z_add_timeout+0x164>)
    51c8:	f003 f8ae 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    51cc:	4840      	ldr	r0, [pc, #256]	; (52d0 <z_add_timeout+0x160>)
    51ce:	f7fe fdbd 	bl	3d4c <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    51d2:	f06f 0301 	mvn.w	r3, #1
    51d6:	f04f 32ff 	mov.w	r2, #4294967295
    51da:	ebb3 0804 	subs.w	r8, r3, r4
    51de:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    51e2:	f1b8 0f00 	cmp.w	r8, #0
    51e6:	f179 0100 	sbcs.w	r1, r9, #0
    51ea:	db1c      	blt.n	5226 <z_add_timeout+0xb6>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    51ec:	483a      	ldr	r0, [pc, #232]	; (52d8 <z_add_timeout+0x168>)
    51ee:	e9d0 1000 	ldrd	r1, r0, [r0]
    51f2:	1a5b      	subs	r3, r3, r1
    51f4:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    51f8:	1b1e      	subs	r6, r3, r4
    51fa:	eb62 0705 	sbc.w	r7, r2, r5
    51fe:	2e01      	cmp	r6, #1
    5200:	f177 0300 	sbcs.w	r3, r7, #0
    5204:	bfbc      	itt	lt
    5206:	2601      	movlt	r6, #1
    5208:	2700      	movlt	r7, #0
    520a:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    520e:	4a33      	ldr	r2, [pc, #204]	; (52dc <z_add_timeout+0x16c>)
    5210:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5214:	4293      	cmp	r3, r2
    5216:	d11d      	bne.n	5254 <z_add_timeout+0xe4>
	node->prev = tail;
    5218:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    521c:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    5220:	f8c2 a004 	str.w	sl, [r2, #4]
}
    5224:	e02c      	b.n	5280 <z_add_timeout+0x110>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    5226:	f7ff ff53 	bl	50d0 <elapsed>
    522a:	1c63      	adds	r3, r4, #1
    522c:	9300      	str	r3, [sp, #0]
    522e:	f145 0300 	adc.w	r3, r5, #0
    5232:	9301      	str	r3, [sp, #4]
    5234:	e9dd 2300 	ldrd	r2, r3, [sp]
    5238:	1812      	adds	r2, r2, r0
    523a:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    523e:	e9ca 2304 	strd	r2, r3, [sl, #16]
    5242:	e7e4      	b.n	520e <z_add_timeout+0x9e>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    5244:	1be0      	subs	r0, r4, r7
    5246:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    524a:	42b3      	cmp	r3, r6
    524c:	e9ca 0104 	strd	r0, r1, [sl, #16]
    5250:	d0e2      	beq.n	5218 <z_add_timeout+0xa8>
    5252:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    5254:	2b00      	cmp	r3, #0
    5256:	d0df      	beq.n	5218 <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
    5258:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    525c:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    5260:	42bc      	cmp	r4, r7
    5262:	eb75 0108 	sbcs.w	r1, r5, r8
    5266:	daed      	bge.n	5244 <z_add_timeout+0xd4>
				t->dticks -= to->dticks;
    5268:	1b38      	subs	r0, r7, r4
    526a:	eb68 0105 	sbc.w	r1, r8, r5
    526e:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    5272:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    5274:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    5278:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    527c:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    5280:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5282:	4293      	cmp	r3, r2
    5284:	d00b      	beq.n	529e <z_add_timeout+0x12e>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5286:	459a      	cmp	sl, r3
    5288:	d109      	bne.n	529e <z_add_timeout+0x12e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    528a:	f7ff ff45 	bl	5118 <next_timeout>

			if (next_time == 0 ||
    528e:	b118      	cbz	r0, 5298 <z_add_timeout+0x128>
			    _current_cpu->slice_ticks != next_time) {
    5290:	4b13      	ldr	r3, [pc, #76]	; (52e0 <z_add_timeout+0x170>)
			if (next_time == 0 ||
    5292:	691b      	ldr	r3, [r3, #16]
    5294:	4283      	cmp	r3, r0
    5296:	d002      	beq.n	529e <z_add_timeout+0x12e>
				sys_clock_set_timeout(next_time, false);
    5298:	2100      	movs	r1, #0
    529a:	f7fc fbc7 	bl	1a2c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    529e:	480c      	ldr	r0, [pc, #48]	; (52d0 <z_add_timeout+0x160>)
    52a0:	f7fe fd46 	bl	3d30 <z_spin_unlock_valid>
    52a4:	b940      	cbnz	r0, 52b8 <z_add_timeout+0x148>
    52a6:	490b      	ldr	r1, [pc, #44]	; (52d4 <z_add_timeout+0x164>)
    52a8:	4808      	ldr	r0, [pc, #32]	; (52cc <z_add_timeout+0x15c>)
    52aa:	22ac      	movs	r2, #172	; 0xac
    52ac:	f002 ff70 	bl	8190 <printk>
    52b0:	21ac      	movs	r1, #172	; 0xac
    52b2:	4808      	ldr	r0, [pc, #32]	; (52d4 <z_add_timeout+0x164>)
    52b4:	f003 f838 	bl	8328 <assert_post_action>
	__asm__ volatile(
    52b8:	f38b 8811 	msr	BASEPRI, fp
    52bc:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    52c0:	b003      	add	sp, #12
    52c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    52c6:	bf00      	nop
    52c8:	00009e5a 	.word	0x00009e5a
    52cc:	00008fa6 	.word	0x00008fa6
    52d0:	20000a1c 	.word	0x20000a1c
    52d4:	00008fe0 	.word	0x00008fe0
    52d8:	20000220 	.word	0x20000220
    52dc:	20000058 	.word	0x20000058
    52e0:	200009d0 	.word	0x200009d0

000052e4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    52e4:	b538      	push	{r3, r4, r5, lr}
    52e6:	4604      	mov	r4, r0
	__asm__ volatile(
    52e8:	f04f 0320 	mov.w	r3, #32
    52ec:	f3ef 8511 	mrs	r5, BASEPRI
    52f0:	f383 8811 	msr	BASEPRI, r3
    52f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    52f8:	4815      	ldr	r0, [pc, #84]	; (5350 <z_abort_timeout+0x6c>)
    52fa:	f7fe fd0b 	bl	3d14 <z_spin_lock_valid>
    52fe:	b940      	cbnz	r0, 5312 <z_abort_timeout+0x2e>
    5300:	4914      	ldr	r1, [pc, #80]	; (5354 <z_abort_timeout+0x70>)
    5302:	4815      	ldr	r0, [pc, #84]	; (5358 <z_abort_timeout+0x74>)
    5304:	2281      	movs	r2, #129	; 0x81
    5306:	f002 ff43 	bl	8190 <printk>
    530a:	2181      	movs	r1, #129	; 0x81
    530c:	4811      	ldr	r0, [pc, #68]	; (5354 <z_abort_timeout+0x70>)
    530e:	f003 f80b 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    5312:	480f      	ldr	r0, [pc, #60]	; (5350 <z_abort_timeout+0x6c>)
    5314:	f7fe fd1a 	bl	3d4c <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    5318:	6823      	ldr	r3, [r4, #0]
    531a:	b1b3      	cbz	r3, 534a <z_abort_timeout+0x66>
			remove_timeout(to);
    531c:	4620      	mov	r0, r4
    531e:	f7ff fee1 	bl	50e4 <remove_timeout>
			ret = 0;
    5322:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5324:	480a      	ldr	r0, [pc, #40]	; (5350 <z_abort_timeout+0x6c>)
    5326:	f7fe fd03 	bl	3d30 <z_spin_unlock_valid>
    532a:	b940      	cbnz	r0, 533e <z_abort_timeout+0x5a>
    532c:	4909      	ldr	r1, [pc, #36]	; (5354 <z_abort_timeout+0x70>)
    532e:	480a      	ldr	r0, [pc, #40]	; (5358 <z_abort_timeout+0x74>)
    5330:	22ac      	movs	r2, #172	; 0xac
    5332:	f002 ff2d 	bl	8190 <printk>
    5336:	21ac      	movs	r1, #172	; 0xac
    5338:	4806      	ldr	r0, [pc, #24]	; (5354 <z_abort_timeout+0x70>)
    533a:	f002 fff5 	bl	8328 <assert_post_action>
	__asm__ volatile(
    533e:	f385 8811 	msr	BASEPRI, r5
    5342:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    5346:	4620      	mov	r0, r4
    5348:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    534a:	f06f 0415 	mvn.w	r4, #21
    534e:	e7e9      	b.n	5324 <z_abort_timeout+0x40>
    5350:	20000a1c 	.word	0x20000a1c
    5354:	00008fe0 	.word	0x00008fe0
    5358:	00008fa6 	.word	0x00008fa6

0000535c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    535c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    535e:	f04f 0320 	mov.w	r3, #32
    5362:	f3ef 8511 	mrs	r5, BASEPRI
    5366:	f383 8811 	msr	BASEPRI, r3
    536a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    536e:	4813      	ldr	r0, [pc, #76]	; (53bc <z_get_next_timeout_expiry+0x60>)
    5370:	f7fe fcd0 	bl	3d14 <z_spin_lock_valid>
    5374:	b940      	cbnz	r0, 5388 <z_get_next_timeout_expiry+0x2c>
    5376:	4912      	ldr	r1, [pc, #72]	; (53c0 <z_get_next_timeout_expiry+0x64>)
    5378:	4812      	ldr	r0, [pc, #72]	; (53c4 <z_get_next_timeout_expiry+0x68>)
    537a:	2281      	movs	r2, #129	; 0x81
    537c:	f002 ff08 	bl	8190 <printk>
    5380:	2181      	movs	r1, #129	; 0x81
    5382:	480f      	ldr	r0, [pc, #60]	; (53c0 <z_get_next_timeout_expiry+0x64>)
    5384:	f002 ffd0 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    5388:	480c      	ldr	r0, [pc, #48]	; (53bc <z_get_next_timeout_expiry+0x60>)
    538a:	f7fe fcdf 	bl	3d4c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    538e:	f7ff fec3 	bl	5118 <next_timeout>
    5392:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5394:	4809      	ldr	r0, [pc, #36]	; (53bc <z_get_next_timeout_expiry+0x60>)
    5396:	f7fe fccb 	bl	3d30 <z_spin_unlock_valid>
    539a:	b940      	cbnz	r0, 53ae <z_get_next_timeout_expiry+0x52>
    539c:	4908      	ldr	r1, [pc, #32]	; (53c0 <z_get_next_timeout_expiry+0x64>)
    539e:	4809      	ldr	r0, [pc, #36]	; (53c4 <z_get_next_timeout_expiry+0x68>)
    53a0:	22ac      	movs	r2, #172	; 0xac
    53a2:	f002 fef5 	bl	8190 <printk>
    53a6:	21ac      	movs	r1, #172	; 0xac
    53a8:	4805      	ldr	r0, [pc, #20]	; (53c0 <z_get_next_timeout_expiry+0x64>)
    53aa:	f002 ffbd 	bl	8328 <assert_post_action>
	__asm__ volatile(
    53ae:	f385 8811 	msr	BASEPRI, r5
    53b2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    53b6:	4620      	mov	r0, r4
    53b8:	bd38      	pop	{r3, r4, r5, pc}
    53ba:	bf00      	nop
    53bc:	20000a1c 	.word	0x20000a1c
    53c0:	00008fe0 	.word	0x00008fe0
    53c4:	00008fa6 	.word	0x00008fa6

000053c8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    53c8:	b570      	push	{r4, r5, r6, lr}
    53ca:	4604      	mov	r4, r0
    53cc:	460d      	mov	r5, r1
	__asm__ volatile(
    53ce:	f04f 0320 	mov.w	r3, #32
    53d2:	f3ef 8611 	mrs	r6, BASEPRI
    53d6:	f383 8811 	msr	BASEPRI, r3
    53da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    53de:	4816      	ldr	r0, [pc, #88]	; (5438 <z_set_timeout_expiry+0x70>)
    53e0:	f7fe fc98 	bl	3d14 <z_spin_lock_valid>
    53e4:	b940      	cbnz	r0, 53f8 <z_set_timeout_expiry+0x30>
    53e6:	4915      	ldr	r1, [pc, #84]	; (543c <z_set_timeout_expiry+0x74>)
    53e8:	4815      	ldr	r0, [pc, #84]	; (5440 <z_set_timeout_expiry+0x78>)
    53ea:	2281      	movs	r2, #129	; 0x81
    53ec:	f002 fed0 	bl	8190 <printk>
    53f0:	2181      	movs	r1, #129	; 0x81
    53f2:	4812      	ldr	r0, [pc, #72]	; (543c <z_set_timeout_expiry+0x74>)
    53f4:	f002 ff98 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    53f8:	480f      	ldr	r0, [pc, #60]	; (5438 <z_set_timeout_expiry+0x70>)
    53fa:	f7fe fca7 	bl	3d4c <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    53fe:	f7ff fe8b 	bl	5118 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    5402:	2801      	cmp	r0, #1
    5404:	dd05      	ble.n	5412 <z_set_timeout_expiry+0x4a>
    5406:	42a0      	cmp	r0, r4
    5408:	db03      	blt.n	5412 <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    540a:	4629      	mov	r1, r5
    540c:	4620      	mov	r0, r4
    540e:	f7fc fb0d 	bl	1a2c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5412:	4809      	ldr	r0, [pc, #36]	; (5438 <z_set_timeout_expiry+0x70>)
    5414:	f7fe fc8c 	bl	3d30 <z_spin_unlock_valid>
    5418:	b940      	cbnz	r0, 542c <z_set_timeout_expiry+0x64>
    541a:	4908      	ldr	r1, [pc, #32]	; (543c <z_set_timeout_expiry+0x74>)
    541c:	4808      	ldr	r0, [pc, #32]	; (5440 <z_set_timeout_expiry+0x78>)
    541e:	22ac      	movs	r2, #172	; 0xac
    5420:	f002 feb6 	bl	8190 <printk>
    5424:	21ac      	movs	r1, #172	; 0xac
    5426:	4805      	ldr	r0, [pc, #20]	; (543c <z_set_timeout_expiry+0x74>)
    5428:	f002 ff7e 	bl	8328 <assert_post_action>
	__asm__ volatile(
    542c:	f386 8811 	msr	BASEPRI, r6
    5430:	f3bf 8f6f 	isb	sy
		}
	}
}
    5434:	bd70      	pop	{r4, r5, r6, pc}
    5436:	bf00      	nop
    5438:	20000a1c 	.word	0x20000a1c
    543c:	00008fe0 	.word	0x00008fe0
    5440:	00008fa6 	.word	0x00008fa6

00005444 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    5444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5448:	b085      	sub	sp, #20
    544a:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    544c:	f7ff f9fc 	bl	4848 <z_time_slice>
	__asm__ volatile(
    5450:	f04f 0320 	mov.w	r3, #32
    5454:	f3ef 8911 	mrs	r9, BASEPRI
    5458:	f383 8811 	msr	BASEPRI, r3
    545c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5460:	484c      	ldr	r0, [pc, #304]	; (5594 <sys_clock_announce+0x150>)
    5462:	f7fe fc57 	bl	3d14 <z_spin_lock_valid>
    5466:	b940      	cbnz	r0, 547a <sys_clock_announce+0x36>
    5468:	494b      	ldr	r1, [pc, #300]	; (5598 <sys_clock_announce+0x154>)
    546a:	484c      	ldr	r0, [pc, #304]	; (559c <sys_clock_announce+0x158>)
    546c:	2281      	movs	r2, #129	; 0x81
    546e:	f002 fe8f 	bl	8190 <printk>
    5472:	2181      	movs	r1, #129	; 0x81
    5474:	4848      	ldr	r0, [pc, #288]	; (5598 <sys_clock_announce+0x154>)
    5476:	f002 ff57 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    547a:	4f49      	ldr	r7, [pc, #292]	; (55a0 <sys_clock_announce+0x15c>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    547c:	4e49      	ldr	r6, [pc, #292]	; (55a4 <sys_clock_announce+0x160>)
    547e:	46bb      	mov	fp, r7
    5480:	4844      	ldr	r0, [pc, #272]	; (5594 <sys_clock_announce+0x150>)
	return list->head == list;
    5482:	f8df a124 	ldr.w	sl, [pc, #292]	; 55a8 <sys_clock_announce+0x164>
    5486:	f7fe fc61 	bl	3d4c <z_spin_lock_set_owner>
    548a:	6034      	str	r4, [r6, #0]
    548c:	f8d6 c000 	ldr.w	ip, [r6]
    5490:	f8da 8000 	ldr.w	r8, [sl]
    5494:	4662      	mov	r2, ip
    5496:	e9d7 3400 	ldrd	r3, r4, [r7]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    549a:	45d0      	cmp	r8, sl
    549c:	e9cd 3402 	strd	r3, r4, [sp, #8]
    54a0:	ea4f 73e2 	mov.w	r3, r2, asr #31
    54a4:	e9cd 2300 	strd	r2, r3, [sp]
    54a8:	d011      	beq.n	54ce <sys_clock_announce+0x8a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    54aa:	f1b8 0f00 	cmp.w	r8, #0
    54ae:	d00e      	beq.n	54ce <sys_clock_announce+0x8a>
    54b0:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
    54b4:	e9dd 3400 	ldrd	r3, r4, [sp]
    54b8:	428b      	cmp	r3, r1
    54ba:	eb74 0302 	sbcs.w	r3, r4, r2
    54be:	da2a      	bge.n	5516 <sys_clock_announce+0xd2>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    54c0:	9b00      	ldr	r3, [sp, #0]
    54c2:	1ac8      	subs	r0, r1, r3
    54c4:	9b01      	ldr	r3, [sp, #4]
    54c6:	eb62 0103 	sbc.w	r1, r2, r3
    54ca:	e9c8 0104 	strd	r0, r1, [r8, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    54ce:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    54d0:	9b00      	ldr	r3, [sp, #0]
    54d2:	9a02      	ldr	r2, [sp, #8]
    54d4:	9903      	ldr	r1, [sp, #12]
    54d6:	189a      	adds	r2, r3, r2
    54d8:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    54da:	6034      	str	r4, [r6, #0]
	curr_tick += announce_remaining;
    54dc:	eb41 0303 	adc.w	r3, r1, r3
    54e0:	e9cb 2300 	strd	r2, r3, [fp]

	sys_clock_set_timeout(next_timeout(), false);
    54e4:	f7ff fe18 	bl	5118 <next_timeout>
    54e8:	4621      	mov	r1, r4
    54ea:	f7fc fa9f 	bl	1a2c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    54ee:	4829      	ldr	r0, [pc, #164]	; (5594 <sys_clock_announce+0x150>)
    54f0:	f7fe fc1e 	bl	3d30 <z_spin_unlock_valid>
    54f4:	b940      	cbnz	r0, 5508 <sys_clock_announce+0xc4>
    54f6:	4928      	ldr	r1, [pc, #160]	; (5598 <sys_clock_announce+0x154>)
    54f8:	4828      	ldr	r0, [pc, #160]	; (559c <sys_clock_announce+0x158>)
    54fa:	22ac      	movs	r2, #172	; 0xac
    54fc:	f002 fe48 	bl	8190 <printk>
    5500:	21ac      	movs	r1, #172	; 0xac
    5502:	4825      	ldr	r0, [pc, #148]	; (5598 <sys_clock_announce+0x154>)
    5504:	f002 ff10 	bl	8328 <assert_post_action>
	__asm__ volatile(
    5508:	f389 8811 	msr	BASEPRI, r9
    550c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5510:	b005      	add	sp, #20
    5512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    5516:	2200      	movs	r2, #0
		curr_tick += dt;
    5518:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
		t->dticks = 0;
    551c:	2300      	movs	r3, #0
		curr_tick += dt;
    551e:	1864      	adds	r4, r4, r1
		announce_remaining -= dt;
    5520:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    5524:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		announce_remaining -= dt;
    5528:	6030      	str	r0, [r6, #0]
		t->dticks = 0;
    552a:	e9c8 2304 	strd	r2, r3, [r8, #16]
		remove_timeout(t);
    552e:	4640      	mov	r0, r8
		curr_tick += dt;
    5530:	e9c7 4500 	strd	r4, r5, [r7]
		remove_timeout(t);
    5534:	f7ff fdd6 	bl	50e4 <remove_timeout>
    5538:	4816      	ldr	r0, [pc, #88]	; (5594 <sys_clock_announce+0x150>)
    553a:	f7fe fbf9 	bl	3d30 <z_spin_unlock_valid>
    553e:	b940      	cbnz	r0, 5552 <sys_clock_announce+0x10e>
    5540:	4915      	ldr	r1, [pc, #84]	; (5598 <sys_clock_announce+0x154>)
    5542:	4816      	ldr	r0, [pc, #88]	; (559c <sys_clock_announce+0x158>)
    5544:	22ac      	movs	r2, #172	; 0xac
    5546:	f002 fe23 	bl	8190 <printk>
    554a:	21ac      	movs	r1, #172	; 0xac
    554c:	4812      	ldr	r0, [pc, #72]	; (5598 <sys_clock_announce+0x154>)
    554e:	f002 feeb 	bl	8328 <assert_post_action>
    5552:	f389 8811 	msr	BASEPRI, r9
    5556:	f3bf 8f6f 	isb	sy
		t->fn(t);
    555a:	4640      	mov	r0, r8
    555c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    5560:	4798      	blx	r3
	__asm__ volatile(
    5562:	f04f 0320 	mov.w	r3, #32
    5566:	f3ef 8911 	mrs	r9, BASEPRI
    556a:	f383 8811 	msr	BASEPRI, r3
    556e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5572:	4808      	ldr	r0, [pc, #32]	; (5594 <sys_clock_announce+0x150>)
    5574:	f7fe fbce 	bl	3d14 <z_spin_lock_valid>
    5578:	b940      	cbnz	r0, 558c <sys_clock_announce+0x148>
    557a:	4907      	ldr	r1, [pc, #28]	; (5598 <sys_clock_announce+0x154>)
    557c:	4807      	ldr	r0, [pc, #28]	; (559c <sys_clock_announce+0x158>)
    557e:	2281      	movs	r2, #129	; 0x81
    5580:	f002 fe06 	bl	8190 <printk>
    5584:	2181      	movs	r1, #129	; 0x81
    5586:	4804      	ldr	r0, [pc, #16]	; (5598 <sys_clock_announce+0x154>)
    5588:	f002 fece 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    558c:	4801      	ldr	r0, [pc, #4]	; (5594 <sys_clock_announce+0x150>)
    558e:	f7fe fbdd 	bl	3d4c <z_spin_lock_set_owner>
	return k;
    5592:	e77b      	b.n	548c <sys_clock_announce+0x48>
    5594:	20000a1c 	.word	0x20000a1c
    5598:	00008fe0 	.word	0x00008fe0
    559c:	00008fa6 	.word	0x00008fa6
    55a0:	20000220 	.word	0x20000220
    55a4:	20000a18 	.word	0x20000a18
    55a8:	20000058 	.word	0x20000058

000055ac <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    55ac:	b570      	push	{r4, r5, r6, lr}
    55ae:	f04f 0320 	mov.w	r3, #32
    55b2:	f3ef 8611 	mrs	r6, BASEPRI
    55b6:	f383 8811 	msr	BASEPRI, r3
    55ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    55be:	4816      	ldr	r0, [pc, #88]	; (5618 <sys_clock_tick_get+0x6c>)
    55c0:	f7fe fba8 	bl	3d14 <z_spin_lock_valid>
    55c4:	b940      	cbnz	r0, 55d8 <sys_clock_tick_get+0x2c>
    55c6:	4915      	ldr	r1, [pc, #84]	; (561c <sys_clock_tick_get+0x70>)
    55c8:	4815      	ldr	r0, [pc, #84]	; (5620 <sys_clock_tick_get+0x74>)
    55ca:	2281      	movs	r2, #129	; 0x81
    55cc:	f002 fde0 	bl	8190 <printk>
    55d0:	2181      	movs	r1, #129	; 0x81
    55d2:	4812      	ldr	r0, [pc, #72]	; (561c <sys_clock_tick_get+0x70>)
    55d4:	f002 fea8 	bl	8328 <assert_post_action>
	z_spin_lock_set_owner(l);
    55d8:	480f      	ldr	r0, [pc, #60]	; (5618 <sys_clock_tick_get+0x6c>)
    55da:	f7fe fbb7 	bl	3d4c <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    55de:	f7fc fa57 	bl	1a90 <sys_clock_elapsed>
    55e2:	4b10      	ldr	r3, [pc, #64]	; (5624 <sys_clock_tick_get+0x78>)
    55e4:	e9d3 4500 	ldrd	r4, r5, [r3]
    55e8:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    55ea:	480b      	ldr	r0, [pc, #44]	; (5618 <sys_clock_tick_get+0x6c>)
    55ec:	f145 0500 	adc.w	r5, r5, #0
    55f0:	f7fe fb9e 	bl	3d30 <z_spin_unlock_valid>
    55f4:	b940      	cbnz	r0, 5608 <sys_clock_tick_get+0x5c>
    55f6:	4909      	ldr	r1, [pc, #36]	; (561c <sys_clock_tick_get+0x70>)
    55f8:	4809      	ldr	r0, [pc, #36]	; (5620 <sys_clock_tick_get+0x74>)
    55fa:	22ac      	movs	r2, #172	; 0xac
    55fc:	f002 fdc8 	bl	8190 <printk>
    5600:	21ac      	movs	r1, #172	; 0xac
    5602:	4806      	ldr	r0, [pc, #24]	; (561c <sys_clock_tick_get+0x70>)
    5604:	f002 fe90 	bl	8328 <assert_post_action>
	__asm__ volatile(
    5608:	f386 8811 	msr	BASEPRI, r6
    560c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    5610:	4620      	mov	r0, r4
    5612:	4629      	mov	r1, r5
    5614:	bd70      	pop	{r4, r5, r6, pc}
    5616:	bf00      	nop
    5618:	20000a1c 	.word	0x20000a1c
    561c:	00008fe0 	.word	0x00008fe0
    5620:	00008fa6 	.word	0x00008fa6
    5624:	20000220 	.word	0x20000220

00005628 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5628:	4a02      	ldr	r2, [pc, #8]	; (5634 <boot_banner+0xc>)
    562a:	4903      	ldr	r1, [pc, #12]	; (5638 <boot_banner+0x10>)
    562c:	4803      	ldr	r0, [pc, #12]	; (563c <boot_banner+0x14>)
    562e:	f002 bdaf 	b.w	8190 <printk>
    5632:	bf00      	nop
    5634:	00009106 	.word	0x00009106
    5638:	00009e7e 	.word	0x00009e7e
    563c:	00009e8d 	.word	0x00009e8d

00005640 <nrf_cc3xx_platform_init>:
    5640:	b510      	push	{r4, lr}
    5642:	4c0c      	ldr	r4, [pc, #48]	; (5674 <nrf_cc3xx_platform_init+0x34>)
    5644:	6823      	ldr	r3, [r4, #0]
    5646:	b113      	cbz	r3, 564e <nrf_cc3xx_platform_init+0xe>
    5648:	4b0b      	ldr	r3, [pc, #44]	; (5678 <nrf_cc3xx_platform_init+0x38>)
    564a:	681b      	ldr	r3, [r3, #0]
    564c:	b92b      	cbnz	r3, 565a <nrf_cc3xx_platform_init+0x1a>
    564e:	f000 fabb 	bl	5bc8 <CC_LibInit>
    5652:	b930      	cbnz	r0, 5662 <nrf_cc3xx_platform_init+0x22>
    5654:	2201      	movs	r2, #1
    5656:	4b08      	ldr	r3, [pc, #32]	; (5678 <nrf_cc3xx_platform_init+0x38>)
    5658:	601a      	str	r2, [r3, #0]
    565a:	2301      	movs	r3, #1
    565c:	2000      	movs	r0, #0
    565e:	6023      	str	r3, [r4, #0]
    5660:	bd10      	pop	{r4, pc}
    5662:	3801      	subs	r0, #1
    5664:	2806      	cmp	r0, #6
    5666:	d901      	bls.n	566c <nrf_cc3xx_platform_init+0x2c>
    5668:	4804      	ldr	r0, [pc, #16]	; (567c <nrf_cc3xx_platform_init+0x3c>)
    566a:	bd10      	pop	{r4, pc}
    566c:	4b04      	ldr	r3, [pc, #16]	; (5680 <nrf_cc3xx_platform_init+0x40>)
    566e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5672:	bd10      	pop	{r4, pc}
    5674:	20000a20 	.word	0x20000a20
    5678:	20000a24 	.word	0x20000a24
    567c:	ffff8ffe 	.word	0xffff8ffe
    5680:	00008dfc 	.word	0x00008dfc

00005684 <nrf_cc3xx_platform_abort>:
    5684:	f3bf 8f4f 	dsb	sy
    5688:	4905      	ldr	r1, [pc, #20]	; (56a0 <nrf_cc3xx_platform_abort+0x1c>)
    568a:	4b06      	ldr	r3, [pc, #24]	; (56a4 <nrf_cc3xx_platform_abort+0x20>)
    568c:	68ca      	ldr	r2, [r1, #12]
    568e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5692:	4313      	orrs	r3, r2
    5694:	60cb      	str	r3, [r1, #12]
    5696:	f3bf 8f4f 	dsb	sy
    569a:	bf00      	nop
    569c:	e7fd      	b.n	569a <nrf_cc3xx_platform_abort+0x16>
    569e:	bf00      	nop
    56a0:	e000ed00 	.word	0xe000ed00
    56a4:	05fa0004 	.word	0x05fa0004

000056a8 <CC_PalAbort>:
    56a8:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    56ac:	2100      	movs	r1, #0
    56ae:	b430      	push	{r4, r5}
    56b0:	4a06      	ldr	r2, [pc, #24]	; (56cc <CC_PalAbort+0x24>)
    56b2:	4d07      	ldr	r5, [pc, #28]	; (56d0 <CC_PalAbort+0x28>)
    56b4:	4c07      	ldr	r4, [pc, #28]	; (56d4 <CC_PalAbort+0x2c>)
    56b6:	602b      	str	r3, [r5, #0]
    56b8:	6013      	str	r3, [r2, #0]
    56ba:	6023      	str	r3, [r4, #0]
    56bc:	4a06      	ldr	r2, [pc, #24]	; (56d8 <CC_PalAbort+0x30>)
    56be:	4c07      	ldr	r4, [pc, #28]	; (56dc <CC_PalAbort+0x34>)
    56c0:	60eb      	str	r3, [r5, #12]
    56c2:	6863      	ldr	r3, [r4, #4]
    56c4:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    56c8:	bc30      	pop	{r4, r5}
    56ca:	4718      	bx	r3
    56cc:	50841404 	.word	0x50841404
    56d0:	50841400 	.word	0x50841400
    56d4:	50841408 	.word	0x50841408
    56d8:	50840000 	.word	0x50840000
    56dc:	20000060 	.word	0x20000060

000056e0 <nrf_cc3xx_platform_set_abort>:
    56e0:	4b02      	ldr	r3, [pc, #8]	; (56ec <nrf_cc3xx_platform_set_abort+0xc>)
    56e2:	e9d0 1200 	ldrd	r1, r2, [r0]
    56e6:	e9c3 1200 	strd	r1, r2, [r3]
    56ea:	4770      	bx	lr
    56ec:	20000060 	.word	0x20000060

000056f0 <nrf_cc3xx_platform_ctr_drbg_init>:
    56f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    56f4:	4c15      	ldr	r4, [pc, #84]	; (574c <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
    56f6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5754 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
    56fa:	2800      	cmp	r0, #0
    56fc:	bf18      	it	ne
    56fe:	4604      	movne	r4, r0
    5700:	6820      	ldr	r0, [r4, #0]
    5702:	b083      	sub	sp, #12
    5704:	4540      	cmp	r0, r8
    5706:	d01d      	beq.n	5744 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
    5708:	4616      	mov	r6, r2
    570a:	460d      	mov	r5, r1
    570c:	4620      	mov	r0, r4
    570e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    5712:	f104 0904 	add.w	r9, r4, #4
    5716:	f000 fe9b 	bl	6450 <mbedtls_platform_zeroize>
    571a:	f504 778c 	add.w	r7, r4, #280	; 0x118
    571e:	4648      	mov	r0, r9
    5720:	f000 f93e 	bl	59a0 <cc_mbedtls_entropy_init>
    5724:	4638      	mov	r0, r7
    5726:	f001 fa75 	bl	6c14 <cc_mbedtls_ctr_drbg_init>
    572a:	464a      	mov	r2, r9
    572c:	4638      	mov	r0, r7
    572e:	462b      	mov	r3, r5
    5730:	4907      	ldr	r1, [pc, #28]	; (5750 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
    5732:	9600      	str	r6, [sp, #0]
    5734:	f001 fa80 	bl	6c38 <cc_mbedtls_ctr_drbg_seed>
    5738:	b908      	cbnz	r0, 573e <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
    573a:	f8c4 8000 	str.w	r8, [r4]
    573e:	b003      	add	sp, #12
    5740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5744:	2000      	movs	r0, #0
    5746:	b003      	add	sp, #12
    5748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    574c:	20001324 	.word	0x20001324
    5750:	00005a21 	.word	0x00005a21
    5754:	5ac9bca5 	.word	0x5ac9bca5

00005758 <nrf_cc3xx_platform_ctr_drbg_get>:
    5758:	b5f0      	push	{r4, r5, r6, r7, lr}
    575a:	4c0d      	ldr	r4, [pc, #52]	; (5790 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
    575c:	4e0d      	ldr	r6, [pc, #52]	; (5794 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
    575e:	2800      	cmp	r0, #0
    5760:	bf08      	it	eq
    5762:	4620      	moveq	r0, r4
    5764:	6807      	ldr	r7, [r0, #0]
    5766:	b083      	sub	sp, #12
    5768:	42b7      	cmp	r7, r6
    576a:	d10e      	bne.n	578a <nrf_cc3xx_platform_ctr_drbg_get+0x32>
    576c:	2600      	movs	r6, #0
    576e:	461d      	mov	r5, r3
    5770:	f500 708c 	add.w	r0, r0, #280	; 0x118
    5774:	4633      	mov	r3, r6
    5776:	9600      	str	r6, [sp, #0]
    5778:	4614      	mov	r4, r2
    577a:	f001 faad 	bl	6cd8 <cc_mbedtls_ctr_drbg_random_with_add>
    577e:	2800      	cmp	r0, #0
    5780:	bf18      	it	ne
    5782:	4634      	movne	r4, r6
    5784:	602c      	str	r4, [r5, #0]
    5786:	b003      	add	sp, #12
    5788:	bdf0      	pop	{r4, r5, r6, r7, pc}
    578a:	4803      	ldr	r0, [pc, #12]	; (5798 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
    578c:	e7fb      	b.n	5786 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
    578e:	bf00      	nop
    5790:	20001324 	.word	0x20001324
    5794:	5ac9bca5 	.word	0x5ac9bca5
    5798:	ffff8fe8 	.word	0xffff8fe8

0000579c <mutex_free>:
    579c:	b510      	push	{r4, lr}
    579e:	4604      	mov	r4, r0
    57a0:	b130      	cbz	r0, 57b0 <mutex_free+0x14>
    57a2:	6863      	ldr	r3, [r4, #4]
    57a4:	06db      	lsls	r3, r3, #27
    57a6:	d502      	bpl.n	57ae <mutex_free+0x12>
    57a8:	2300      	movs	r3, #0
    57aa:	6023      	str	r3, [r4, #0]
    57ac:	6063      	str	r3, [r4, #4]
    57ae:	bd10      	pop	{r4, pc}
    57b0:	4b02      	ldr	r3, [pc, #8]	; (57bc <mutex_free+0x20>)
    57b2:	4803      	ldr	r0, [pc, #12]	; (57c0 <mutex_free+0x24>)
    57b4:	685b      	ldr	r3, [r3, #4]
    57b6:	4798      	blx	r3
    57b8:	e7f3      	b.n	57a2 <mutex_free+0x6>
    57ba:	bf00      	nop
    57bc:	20000060 	.word	0x20000060
    57c0:	00008e18 	.word	0x00008e18

000057c4 <mutex_unlock>:
    57c4:	b168      	cbz	r0, 57e2 <mutex_unlock+0x1e>
    57c6:	6843      	ldr	r3, [r0, #4]
    57c8:	b13b      	cbz	r3, 57da <mutex_unlock+0x16>
    57ca:	06db      	lsls	r3, r3, #27
    57cc:	d507      	bpl.n	57de <mutex_unlock+0x1a>
    57ce:	f3bf 8f5f 	dmb	sy
    57d2:	2300      	movs	r3, #0
    57d4:	6003      	str	r3, [r0, #0]
    57d6:	4618      	mov	r0, r3
    57d8:	4770      	bx	lr
    57da:	4803      	ldr	r0, [pc, #12]	; (57e8 <mutex_unlock+0x24>)
    57dc:	4770      	bx	lr
    57de:	4803      	ldr	r0, [pc, #12]	; (57ec <mutex_unlock+0x28>)
    57e0:	4770      	bx	lr
    57e2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    57e6:	4770      	bx	lr
    57e8:	ffff8fea 	.word	0xffff8fea
    57ec:	ffff8fe9 	.word	0xffff8fe9

000057f0 <mutex_init>:
    57f0:	b510      	push	{r4, lr}
    57f2:	4604      	mov	r4, r0
    57f4:	b120      	cbz	r0, 5800 <mutex_init+0x10>
    57f6:	2200      	movs	r2, #0
    57f8:	2311      	movs	r3, #17
    57fa:	6022      	str	r2, [r4, #0]
    57fc:	6063      	str	r3, [r4, #4]
    57fe:	bd10      	pop	{r4, pc}
    5800:	4801      	ldr	r0, [pc, #4]	; (5808 <mutex_init+0x18>)
    5802:	f7ff ff51 	bl	56a8 <CC_PalAbort>
    5806:	e7f6      	b.n	57f6 <mutex_init+0x6>
    5808:	00008e40 	.word	0x00008e40

0000580c <mutex_lock>:
    580c:	b1a0      	cbz	r0, 5838 <mutex_lock+0x2c>
    580e:	6843      	ldr	r3, [r0, #4]
    5810:	b183      	cbz	r3, 5834 <mutex_lock+0x28>
    5812:	06db      	lsls	r3, r3, #27
    5814:	d50c      	bpl.n	5830 <mutex_lock+0x24>
    5816:	2201      	movs	r2, #1
    5818:	e8d0 3fef 	ldaex	r3, [r0]
    581c:	e8c0 2fe1 	stlex	r1, r2, [r0]
    5820:	2900      	cmp	r1, #0
    5822:	d1f9      	bne.n	5818 <mutex_lock+0xc>
    5824:	2b01      	cmp	r3, #1
    5826:	d0f7      	beq.n	5818 <mutex_lock+0xc>
    5828:	f3bf 8f5f 	dmb	sy
    582c:	2000      	movs	r0, #0
    582e:	4770      	bx	lr
    5830:	4803      	ldr	r0, [pc, #12]	; (5840 <mutex_lock+0x34>)
    5832:	4770      	bx	lr
    5834:	4803      	ldr	r0, [pc, #12]	; (5844 <mutex_lock+0x38>)
    5836:	4770      	bx	lr
    5838:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    583c:	4770      	bx	lr
    583e:	bf00      	nop
    5840:	ffff8fe9 	.word	0xffff8fe9
    5844:	ffff8fea 	.word	0xffff8fea

00005848 <nrf_cc3xx_platform_set_mutexes>:
    5848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    584c:	4c14      	ldr	r4, [pc, #80]	; (58a0 <nrf_cc3xx_platform_set_mutexes+0x58>)
    584e:	6802      	ldr	r2, [r0, #0]
    5850:	68c3      	ldr	r3, [r0, #12]
    5852:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
    5856:	e9c4 6302 	strd	r6, r3, [r4, #8]
    585a:	e9c4 2500 	strd	r2, r5, [r4]
    585e:	4b11      	ldr	r3, [pc, #68]	; (58a4 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    5860:	680e      	ldr	r6, [r1, #0]
    5862:	6848      	ldr	r0, [r1, #4]
    5864:	4d10      	ldr	r5, [pc, #64]	; (58a8 <nrf_cc3xx_platform_set_mutexes+0x60>)
    5866:	e9c3 6000 	strd	r6, r0, [r3]
    586a:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
    586e:	6908      	ldr	r0, [r1, #16]
    5870:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    5874:	e9c3 7602 	strd	r7, r6, [r3, #8]
    5878:	6118      	str	r0, [r3, #16]
    587a:	06cb      	lsls	r3, r1, #27
    587c:	d50d      	bpl.n	589a <nrf_cc3xx_platform_set_mutexes+0x52>
    587e:	2300      	movs	r3, #0
    5880:	f505 7088 	add.w	r0, r5, #272	; 0x110
    5884:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    5888:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    588c:	4790      	blx	r2
    588e:	6823      	ldr	r3, [r4, #0]
    5890:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    5894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5898:	4718      	bx	r3
    589a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    589e:	bf00      	nop
    58a0:	20000070 	.word	0x20000070
    58a4:	20000080 	.word	0x20000080
    58a8:	20001324 	.word	0x20001324

000058ac <entropy_update>:
    58ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    58b0:	2b20      	cmp	r3, #32
    58b2:	461d      	mov	r5, r3
    58b4:	4606      	mov	r6, r0
    58b6:	4689      	mov	r9, r1
    58b8:	4690      	mov	r8, r2
    58ba:	b08b      	sub	sp, #44	; 0x2c
    58bc:	d826      	bhi.n	590c <entropy_update+0x60>
    58be:	b2db      	uxtb	r3, r3
    58c0:	af02      	add	r7, sp, #8
    58c2:	6831      	ldr	r1, [r6, #0]
    58c4:	f88d 9004 	strb.w	r9, [sp, #4]
    58c8:	f88d 3005 	strb.w	r3, [sp, #5]
    58cc:	f106 0904 	add.w	r9, r6, #4
    58d0:	b921      	cbnz	r1, 58dc <entropy_update+0x30>
    58d2:	4648      	mov	r0, r9
    58d4:	f000 fe62 	bl	659c <cc_mbedtls_sha256_starts_ret>
    58d8:	4604      	mov	r4, r0
    58da:	b940      	cbnz	r0, 58ee <entropy_update+0x42>
    58dc:	2301      	movs	r3, #1
    58de:	2202      	movs	r2, #2
    58e0:	4648      	mov	r0, r9
    58e2:	6033      	str	r3, [r6, #0]
    58e4:	a901      	add	r1, sp, #4
    58e6:	f000 fe6d 	bl	65c4 <cc_mbedtls_sha256_update_ret>
    58ea:	4604      	mov	r4, r0
    58ec:	b138      	cbz	r0, 58fe <entropy_update+0x52>
    58ee:	4638      	mov	r0, r7
    58f0:	2120      	movs	r1, #32
    58f2:	f000 fdad 	bl	6450 <mbedtls_platform_zeroize>
    58f6:	4620      	mov	r0, r4
    58f8:	b00b      	add	sp, #44	; 0x2c
    58fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    58fe:	462a      	mov	r2, r5
    5900:	4641      	mov	r1, r8
    5902:	4648      	mov	r0, r9
    5904:	f000 fe5e 	bl	65c4 <cc_mbedtls_sha256_update_ret>
    5908:	4604      	mov	r4, r0
    590a:	e7f0      	b.n	58ee <entropy_update+0x42>
    590c:	af02      	add	r7, sp, #8
    590e:	4619      	mov	r1, r3
    5910:	4610      	mov	r0, r2
    5912:	2300      	movs	r3, #0
    5914:	463a      	mov	r2, r7
    5916:	f001 fad3 	bl	6ec0 <cc_mbedtls_sha256_ret>
    591a:	4604      	mov	r4, r0
    591c:	2800      	cmp	r0, #0
    591e:	d1e6      	bne.n	58ee <entropy_update+0x42>
    5920:	2320      	movs	r3, #32
    5922:	46b8      	mov	r8, r7
    5924:	461d      	mov	r5, r3
    5926:	e7cc      	b.n	58c2 <entropy_update+0x16>

00005928 <entropy_gather_internal.part.0>:
    5928:	b5f0      	push	{r4, r5, r6, r7, lr}
    592a:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    592e:	b0a7      	sub	sp, #156	; 0x9c
    5930:	2b00      	cmp	r3, #0
    5932:	bfd8      	it	le
    5934:	ae02      	addle	r6, sp, #8
    5936:	dd2c      	ble.n	5992 <entropy_gather_internal.part.0+0x6a>
    5938:	4605      	mov	r5, r0
    593a:	2300      	movs	r3, #0
    593c:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    5940:	ae02      	add	r6, sp, #8
    5942:	9301      	str	r3, [sp, #4]
    5944:	f1a4 0701 	sub.w	r7, r4, #1
    5948:	4631      	mov	r1, r6
    594a:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
    594e:	2290      	movs	r2, #144	; 0x90
    5950:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
    5954:	ab01      	add	r3, sp, #4
    5956:	fab7 f787 	clz	r7, r7
    595a:	47a0      	blx	r4
    595c:	097f      	lsrs	r7, r7, #5
    595e:	4604      	mov	r4, r0
    5960:	b910      	cbnz	r0, 5968 <entropy_gather_internal.part.0+0x40>
    5962:	9b01      	ldr	r3, [sp, #4]
    5964:	b93b      	cbnz	r3, 5976 <entropy_gather_internal.part.0+0x4e>
    5966:	b1a7      	cbz	r7, 5992 <entropy_gather_internal.part.0+0x6a>
    5968:	4630      	mov	r0, r6
    596a:	2190      	movs	r1, #144	; 0x90
    596c:	f000 fd70 	bl	6450 <mbedtls_platform_zeroize>
    5970:	4620      	mov	r0, r4
    5972:	b027      	add	sp, #156	; 0x9c
    5974:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5976:	4601      	mov	r1, r0
    5978:	4632      	mov	r2, r6
    597a:	4628      	mov	r0, r5
    597c:	f7ff ff96 	bl	58ac <entropy_update>
    5980:	b950      	cbnz	r0, 5998 <entropy_gather_internal.part.0+0x70>
    5982:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    5986:	9a01      	ldr	r2, [sp, #4]
    5988:	4413      	add	r3, r2
    598a:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
    598e:	2f00      	cmp	r7, #0
    5990:	d1ea      	bne.n	5968 <entropy_gather_internal.part.0+0x40>
    5992:	f06f 043c 	mvn.w	r4, #60	; 0x3c
    5996:	e7e7      	b.n	5968 <entropy_gather_internal.part.0+0x40>
    5998:	4604      	mov	r4, r0
    599a:	4620      	mov	r0, r4
    599c:	b027      	add	sp, #156	; 0x9c
    599e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000059a0 <cc_mbedtls_entropy_init>:
    59a0:	b570      	push	{r4, r5, r6, lr}
    59a2:	2500      	movs	r5, #0
    59a4:	4604      	mov	r4, r0
    59a6:	4629      	mov	r1, r5
    59a8:	2214      	movs	r2, #20
    59aa:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
    59ae:	30f8      	adds	r0, #248	; 0xf8
    59b0:	f002 fddf 	bl	8572 <memset>
    59b4:	4b16      	ldr	r3, [pc, #88]	; (5a10 <cc_mbedtls_entropy_init+0x70>)
    59b6:	f504 7686 	add.w	r6, r4, #268	; 0x10c
    59ba:	681b      	ldr	r3, [r3, #0]
    59bc:	4630      	mov	r0, r6
    59be:	4798      	blx	r3
    59c0:	4620      	mov	r0, r4
    59c2:	f840 5b04 	str.w	r5, [r0], #4
    59c6:	f000 fdcf 	bl	6568 <cc_mbedtls_sha256_init>
    59ca:	4b12      	ldr	r3, [pc, #72]	; (5a14 <cc_mbedtls_entropy_init+0x74>)
    59cc:	4630      	mov	r0, r6
    59ce:	681b      	ldr	r3, [r3, #0]
    59d0:	4798      	blx	r3
    59d2:	b9d8      	cbnz	r0, 5a0c <cc_mbedtls_entropy_init+0x6c>
    59d4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    59d8:	42ab      	cmp	r3, r5
    59da:	dc11      	bgt.n	5a00 <cc_mbedtls_entropy_init+0x60>
    59dc:	2101      	movs	r1, #1
    59de:	2520      	movs	r5, #32
    59e0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    59e4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    59e8:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    59ec:	480a      	ldr	r0, [pc, #40]	; (5a18 <cc_mbedtls_entropy_init+0x78>)
    59ee:	440b      	add	r3, r1
    59f0:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
    59f4:	f8c2 00f8 	str.w	r0, [r2, #248]	; 0xf8
    59f8:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
    59fc:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
    5a00:	4b06      	ldr	r3, [pc, #24]	; (5a1c <cc_mbedtls_entropy_init+0x7c>)
    5a02:	4630      	mov	r0, r6
    5a04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5a08:	681b      	ldr	r3, [r3, #0]
    5a0a:	4718      	bx	r3
    5a0c:	bd70      	pop	{r4, r5, r6, pc}
    5a0e:	bf00      	nop
    5a10:	200000c4 	.word	0x200000c4
    5a14:	200000c8 	.word	0x200000c8
    5a18:	00006465 	.word	0x00006465
    5a1c:	200000cc 	.word	0x200000cc

00005a20 <cc_mbedtls_entropy_func>:
    5a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a24:	2a20      	cmp	r2, #32
    5a26:	b088      	sub	sp, #32
    5a28:	d878      	bhi.n	5b1c <cc_mbedtls_entropy_func+0xfc>
    5a2a:	4b3e      	ldr	r3, [pc, #248]	; (5b24 <cc_mbedtls_entropy_func+0x104>)
    5a2c:	f500 7986 	add.w	r9, r0, #268	; 0x10c
    5a30:	4604      	mov	r4, r0
    5a32:	681b      	ldr	r3, [r3, #0]
    5a34:	4648      	mov	r0, r9
    5a36:	4617      	mov	r7, r2
    5a38:	4688      	mov	r8, r1
    5a3a:	4798      	blx	r3
    5a3c:	4605      	mov	r5, r0
    5a3e:	bb40      	cbnz	r0, 5a92 <cc_mbedtls_entropy_func+0x72>
    5a40:	f240 1601 	movw	r6, #257	; 0x101
    5a44:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    5a48:	2b00      	cmp	r3, #0
    5a4a:	d063      	beq.n	5b14 <cc_mbedtls_entropy_func+0xf4>
    5a4c:	4620      	mov	r0, r4
    5a4e:	f7ff ff6b 	bl	5928 <entropy_gather_internal.part.0>
    5a52:	4605      	mov	r5, r0
    5a54:	2800      	cmp	r0, #0
    5a56:	d15f      	bne.n	5b18 <cc_mbedtls_entropy_func+0xf8>
    5a58:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    5a5c:	2b00      	cmp	r3, #0
    5a5e:	dd07      	ble.n	5a70 <cc_mbedtls_entropy_func+0x50>
    5a60:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
    5a64:	4290      	cmp	r0, r2
    5a66:	d303      	bcc.n	5a70 <cc_mbedtls_entropy_func+0x50>
    5a68:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    5a6c:	2a01      	cmp	r2, #1
    5a6e:	d014      	beq.n	5a9a <cc_mbedtls_entropy_func+0x7a>
    5a70:	3e01      	subs	r6, #1
    5a72:	d1e9      	bne.n	5a48 <cc_mbedtls_entropy_func+0x28>
    5a74:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    5a78:	466e      	mov	r6, sp
    5a7a:	4630      	mov	r0, r6
    5a7c:	2120      	movs	r1, #32
    5a7e:	f000 fce7 	bl	6450 <mbedtls_platform_zeroize>
    5a82:	4b29      	ldr	r3, [pc, #164]	; (5b28 <cc_mbedtls_entropy_func+0x108>)
    5a84:	4648      	mov	r0, r9
    5a86:	681b      	ldr	r3, [r3, #0]
    5a88:	4798      	blx	r3
    5a8a:	2800      	cmp	r0, #0
    5a8c:	bf18      	it	ne
    5a8e:	f06f 051d 	mvnne.w	r5, #29
    5a92:	4628      	mov	r0, r5
    5a94:	b008      	add	sp, #32
    5a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a9a:	281f      	cmp	r0, #31
    5a9c:	d9e8      	bls.n	5a70 <cc_mbedtls_entropy_func+0x50>
    5a9e:	466e      	mov	r6, sp
    5aa0:	4629      	mov	r1, r5
    5aa2:	2220      	movs	r2, #32
    5aa4:	4630      	mov	r0, r6
    5aa6:	f104 0a04 	add.w	sl, r4, #4
    5aaa:	f002 fd62 	bl	8572 <memset>
    5aae:	4631      	mov	r1, r6
    5ab0:	4650      	mov	r0, sl
    5ab2:	f000 fd8f 	bl	65d4 <cc_mbedtls_sha256_finish_ret>
    5ab6:	4605      	mov	r5, r0
    5ab8:	2800      	cmp	r0, #0
    5aba:	d1de      	bne.n	5a7a <cc_mbedtls_entropy_func+0x5a>
    5abc:	4650      	mov	r0, sl
    5abe:	f000 fd67 	bl	6590 <cc_mbedtls_sha256_free>
    5ac2:	4650      	mov	r0, sl
    5ac4:	f000 fd50 	bl	6568 <cc_mbedtls_sha256_init>
    5ac8:	4629      	mov	r1, r5
    5aca:	4650      	mov	r0, sl
    5acc:	f000 fd66 	bl	659c <cc_mbedtls_sha256_starts_ret>
    5ad0:	4605      	mov	r5, r0
    5ad2:	2800      	cmp	r0, #0
    5ad4:	d1d1      	bne.n	5a7a <cc_mbedtls_entropy_func+0x5a>
    5ad6:	4650      	mov	r0, sl
    5ad8:	2220      	movs	r2, #32
    5ada:	4631      	mov	r1, r6
    5adc:	f000 fd72 	bl	65c4 <cc_mbedtls_sha256_update_ret>
    5ae0:	4605      	mov	r5, r0
    5ae2:	2800      	cmp	r0, #0
    5ae4:	d1c9      	bne.n	5a7a <cc_mbedtls_entropy_func+0x5a>
    5ae6:	4603      	mov	r3, r0
    5ae8:	4632      	mov	r2, r6
    5aea:	2120      	movs	r1, #32
    5aec:	4630      	mov	r0, r6
    5aee:	f001 f9e7 	bl	6ec0 <cc_mbedtls_sha256_ret>
    5af2:	4605      	mov	r5, r0
    5af4:	2800      	cmp	r0, #0
    5af6:	d1c0      	bne.n	5a7a <cc_mbedtls_entropy_func+0x5a>
    5af8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    5afc:	463a      	mov	r2, r7
    5afe:	2b00      	cmp	r3, #0
    5b00:	bfc8      	it	gt
    5b02:	2300      	movgt	r3, #0
    5b04:	4640      	mov	r0, r8
    5b06:	4631      	mov	r1, r6
    5b08:	bfc8      	it	gt
    5b0a:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
    5b0e:	f002 fd25 	bl	855c <memcpy>
    5b12:	e7b2      	b.n	5a7a <cc_mbedtls_entropy_func+0x5a>
    5b14:	f06f 053f 	mvn.w	r5, #63	; 0x3f
    5b18:	466e      	mov	r6, sp
    5b1a:	e7ae      	b.n	5a7a <cc_mbedtls_entropy_func+0x5a>
    5b1c:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    5b20:	e7b7      	b.n	5a92 <cc_mbedtls_entropy_func+0x72>
    5b22:	bf00      	nop
    5b24:	200000c8 	.word	0x200000c8
    5b28:	200000cc 	.word	0x200000cc

00005b2c <RndStartupTest.constprop.0>:
    5b2c:	2100      	movs	r1, #0
    5b2e:	b530      	push	{r4, r5, lr}
    5b30:	b08d      	sub	sp, #52	; 0x34
    5b32:	2228      	movs	r2, #40	; 0x28
    5b34:	a802      	add	r0, sp, #8
    5b36:	9101      	str	r1, [sp, #4]
    5b38:	f002 fd1b 	bl	8572 <memset>
    5b3c:	a802      	add	r0, sp, #8
    5b3e:	f001 f9e7 	bl	6f10 <RNG_PLAT_SetUserRngParameters>
    5b42:	4604      	mov	r4, r0
    5b44:	b110      	cbz	r0, 5b4c <RndStartupTest.constprop.0+0x20>
    5b46:	4620      	mov	r0, r4
    5b48:	b00d      	add	sp, #52	; 0x34
    5b4a:	bd30      	pop	{r4, r5, pc}
    5b4c:	4d18      	ldr	r5, [pc, #96]	; (5bb0 <RndStartupTest.constprop.0+0x84>)
    5b4e:	f04f 31ff 	mov.w	r1, #4294967295
    5b52:	6828      	ldr	r0, [r5, #0]
    5b54:	f000 f93a 	bl	5dcc <CC_PalMutexLock>
    5b58:	4604      	mov	r4, r0
    5b5a:	b9c0      	cbnz	r0, 5b8e <RndStartupTest.constprop.0+0x62>
    5b5c:	2000      	movs	r0, #0
    5b5e:	f000 f965 	bl	5e2c <CC_PalPowerSaveModeSelect>
    5b62:	bb00      	cbnz	r0, 5ba6 <RndStartupTest.constprop.0+0x7a>
    5b64:	4a13      	ldr	r2, [pc, #76]	; (5bb4 <RndStartupTest.constprop.0+0x88>)
    5b66:	a902      	add	r1, sp, #8
    5b68:	a801      	add	r0, sp, #4
    5b6a:	f000 fc63 	bl	6434 <LLF_RND_RunTrngStartupTest>
    5b6e:	4604      	mov	r4, r0
    5b70:	2001      	movs	r0, #1
    5b72:	f000 f95b 	bl	5e2c <CC_PalPowerSaveModeSelect>
    5b76:	b990      	cbnz	r0, 5b9e <RndStartupTest.constprop.0+0x72>
    5b78:	6828      	ldr	r0, [r5, #0]
    5b7a:	f000 f92f 	bl	5ddc <CC_PalMutexUnlock>
    5b7e:	2800      	cmp	r0, #0
    5b80:	d0e1      	beq.n	5b46 <RndStartupTest.constprop.0+0x1a>
    5b82:	480d      	ldr	r0, [pc, #52]	; (5bb8 <RndStartupTest.constprop.0+0x8c>)
    5b84:	f7ff fd90 	bl	56a8 <CC_PalAbort>
    5b88:	4620      	mov	r0, r4
    5b8a:	b00d      	add	sp, #52	; 0x34
    5b8c:	bd30      	pop	{r4, r5, pc}
    5b8e:	480b      	ldr	r0, [pc, #44]	; (5bbc <RndStartupTest.constprop.0+0x90>)
    5b90:	f7ff fd8a 	bl	56a8 <CC_PalAbort>
    5b94:	2c01      	cmp	r4, #1
    5b96:	bf08      	it	eq
    5b98:	2405      	moveq	r4, #5
    5b9a:	d0ed      	beq.n	5b78 <RndStartupTest.constprop.0+0x4c>
    5b9c:	e7de      	b.n	5b5c <RndStartupTest.constprop.0+0x30>
    5b9e:	4808      	ldr	r0, [pc, #32]	; (5bc0 <RndStartupTest.constprop.0+0x94>)
    5ba0:	f7ff fd82 	bl	56a8 <CC_PalAbort>
    5ba4:	e7e8      	b.n	5b78 <RndStartupTest.constprop.0+0x4c>
    5ba6:	4807      	ldr	r0, [pc, #28]	; (5bc4 <RndStartupTest.constprop.0+0x98>)
    5ba8:	f7ff fd7e 	bl	56a8 <CC_PalAbort>
    5bac:	e7da      	b.n	5b64 <RndStartupTest.constprop.0+0x38>
    5bae:	bf00      	nop
    5bb0:	200000c0 	.word	0x200000c0
    5bb4:	20000aa0 	.word	0x20000aa0
    5bb8:	00008ebc 	.word	0x00008ebc
    5bbc:	00008e64 	.word	0x00008e64
    5bc0:	00008e9c 	.word	0x00008e9c
    5bc4:	00008e7c 	.word	0x00008e7c

00005bc8 <CC_LibInit>:
    5bc8:	b510      	push	{r4, lr}
    5bca:	b082      	sub	sp, #8
    5bcc:	f000 f854 	bl	5c78 <CC_HalInit>
    5bd0:	b128      	cbz	r0, 5bde <CC_LibInit+0x16>
    5bd2:	f000 f8a3 	bl	5d1c <CC_PalTerminate>
    5bd6:	2403      	movs	r4, #3
    5bd8:	4620      	mov	r0, r4
    5bda:	b002      	add	sp, #8
    5bdc:	bd10      	pop	{r4, pc}
    5bde:	f000 f86f 	bl	5cc0 <CC_PalInit>
    5be2:	b9d0      	cbnz	r0, 5c1a <CC_LibInit+0x52>
    5be4:	f000 f922 	bl	5e2c <CC_PalPowerSaveModeSelect>
    5be8:	b9d8      	cbnz	r0, 5c22 <CC_LibInit+0x5a>
    5bea:	4b1e      	ldr	r3, [pc, #120]	; (5c64 <CC_LibInit+0x9c>)
    5bec:	681b      	ldr	r3, [r3, #0]
    5bee:	0e1b      	lsrs	r3, r3, #24
    5bf0:	2bf0      	cmp	r3, #240	; 0xf0
    5bf2:	d10a      	bne.n	5c0a <CC_LibInit+0x42>
    5bf4:	4a1c      	ldr	r2, [pc, #112]	; (5c68 <CC_LibInit+0xa0>)
    5bf6:	4b1d      	ldr	r3, [pc, #116]	; (5c6c <CC_LibInit+0xa4>)
    5bf8:	6812      	ldr	r2, [r2, #0]
    5bfa:	429a      	cmp	r2, r3
    5bfc:	d029      	beq.n	5c52 <CC_LibInit+0x8a>
    5bfe:	f000 f83d 	bl	5c7c <CC_HalTerminate>
    5c02:	2407      	movs	r4, #7
    5c04:	f000 f88a 	bl	5d1c <CC_PalTerminate>
    5c08:	e7e6      	b.n	5bd8 <CC_LibInit+0x10>
    5c0a:	2406      	movs	r4, #6
    5c0c:	f000 f836 	bl	5c7c <CC_HalTerminate>
    5c10:	f000 f884 	bl	5d1c <CC_PalTerminate>
    5c14:	4620      	mov	r0, r4
    5c16:	b002      	add	sp, #8
    5c18:	bd10      	pop	{r4, pc}
    5c1a:	2404      	movs	r4, #4
    5c1c:	4620      	mov	r0, r4
    5c1e:	b002      	add	sp, #8
    5c20:	bd10      	pop	{r4, pc}
    5c22:	f000 f82b 	bl	5c7c <CC_HalTerminate>
    5c26:	f000 f879 	bl	5d1c <CC_PalTerminate>
    5c2a:	f7ff ff7f 	bl	5b2c <RndStartupTest.constprop.0>
    5c2e:	4604      	mov	r4, r0
    5c30:	b958      	cbnz	r0, 5c4a <CC_LibInit+0x82>
    5c32:	4602      	mov	r2, r0
    5c34:	4601      	mov	r1, r0
    5c36:	f7ff fd5b 	bl	56f0 <nrf_cc3xx_platform_ctr_drbg_init>
    5c3a:	b930      	cbnz	r0, 5c4a <CC_LibInit+0x82>
    5c3c:	2268      	movs	r2, #104	; 0x68
    5c3e:	490c      	ldr	r1, [pc, #48]	; (5c70 <CC_LibInit+0xa8>)
    5c40:	ab01      	add	r3, sp, #4
    5c42:	f7ff fd89 	bl	5758 <nrf_cc3xx_platform_ctr_drbg_get>
    5c46:	2800      	cmp	r0, #0
    5c48:	d0c6      	beq.n	5bd8 <CC_LibInit+0x10>
    5c4a:	2405      	movs	r4, #5
    5c4c:	4620      	mov	r0, r4
    5c4e:	b002      	add	sp, #8
    5c50:	bd10      	pop	{r4, pc}
    5c52:	2001      	movs	r0, #1
    5c54:	f000 f8ea 	bl	5e2c <CC_PalPowerSaveModeSelect>
    5c58:	2800      	cmp	r0, #0
    5c5a:	d1e2      	bne.n	5c22 <CC_LibInit+0x5a>
    5c5c:	4b05      	ldr	r3, [pc, #20]	; (5c74 <CC_LibInit+0xac>)
    5c5e:	6018      	str	r0, [r3, #0]
    5c60:	e7e3      	b.n	5c2a <CC_LibInit+0x62>
    5c62:	bf00      	nop
    5c64:	50841928 	.word	0x50841928
    5c68:	50841a24 	.word	0x50841a24
    5c6c:	20e00000 	.word	0x20e00000
    5c70:	20000a38 	.word	0x20000a38
    5c74:	50841a0c 	.word	0x50841a0c

00005c78 <CC_HalInit>:
    5c78:	2000      	movs	r0, #0
    5c7a:	4770      	bx	lr

00005c7c <CC_HalTerminate>:
    5c7c:	2000      	movs	r0, #0
    5c7e:	4770      	bx	lr

00005c80 <CC_HalClearInterruptBit>:
    5c80:	0543      	lsls	r3, r0, #21
    5c82:	d503      	bpl.n	5c8c <CC_HalClearInterruptBit+0xc>
    5c84:	f04f 32ff 	mov.w	r2, #4294967295
    5c88:	4b02      	ldr	r3, [pc, #8]	; (5c94 <CC_HalClearInterruptBit+0x14>)
    5c8a:	601a      	str	r2, [r3, #0]
    5c8c:	4b02      	ldr	r3, [pc, #8]	; (5c98 <CC_HalClearInterruptBit+0x18>)
    5c8e:	6018      	str	r0, [r3, #0]
    5c90:	4770      	bx	lr
    5c92:	bf00      	nop
    5c94:	50841108 	.word	0x50841108
    5c98:	50841a08 	.word	0x50841a08

00005c9c <CC_HalMaskInterrupt>:
    5c9c:	4b01      	ldr	r3, [pc, #4]	; (5ca4 <CC_HalMaskInterrupt+0x8>)
    5c9e:	6018      	str	r0, [r3, #0]
    5ca0:	4770      	bx	lr
    5ca2:	bf00      	nop
    5ca4:	50841a04 	.word	0x50841a04

00005ca8 <CC_HalWaitInterrupt>:
    5ca8:	b108      	cbz	r0, 5cae <CC_HalWaitInterrupt+0x6>
    5caa:	f000 b86d 	b.w	5d88 <CC_PalWaitInterrupt>
    5cae:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    5cb2:	4770      	bx	lr

00005cb4 <CC_HalWaitInterruptRND>:
    5cb4:	b108      	cbz	r0, 5cba <CC_HalWaitInterruptRND+0x6>
    5cb6:	f000 b84f 	b.w	5d58 <CC_PalWaitInterruptRND>
    5cba:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    5cbe:	4770      	bx	lr

00005cc0 <CC_PalInit>:
    5cc0:	b510      	push	{r4, lr}
    5cc2:	4811      	ldr	r0, [pc, #68]	; (5d08 <CC_PalInit+0x48>)
    5cc4:	f000 f86e 	bl	5da4 <CC_PalMutexCreate>
    5cc8:	b100      	cbz	r0, 5ccc <CC_PalInit+0xc>
    5cca:	bd10      	pop	{r4, pc}
    5ccc:	480f      	ldr	r0, [pc, #60]	; (5d0c <CC_PalInit+0x4c>)
    5cce:	f000 f869 	bl	5da4 <CC_PalMutexCreate>
    5cd2:	2800      	cmp	r0, #0
    5cd4:	d1f9      	bne.n	5cca <CC_PalInit+0xa>
    5cd6:	4c0e      	ldr	r4, [pc, #56]	; (5d10 <CC_PalInit+0x50>)
    5cd8:	4620      	mov	r0, r4
    5cda:	f000 f863 	bl	5da4 <CC_PalMutexCreate>
    5cde:	2800      	cmp	r0, #0
    5ce0:	d1f3      	bne.n	5cca <CC_PalInit+0xa>
    5ce2:	4b0c      	ldr	r3, [pc, #48]	; (5d14 <CC_PalInit+0x54>)
    5ce4:	480c      	ldr	r0, [pc, #48]	; (5d18 <CC_PalInit+0x58>)
    5ce6:	601c      	str	r4, [r3, #0]
    5ce8:	f000 f85c 	bl	5da4 <CC_PalMutexCreate>
    5cec:	4601      	mov	r1, r0
    5cee:	2800      	cmp	r0, #0
    5cf0:	d1eb      	bne.n	5cca <CC_PalInit+0xa>
    5cf2:	f000 f82d 	bl	5d50 <CC_PalDmaInit>
    5cf6:	4604      	mov	r4, r0
    5cf8:	b108      	cbz	r0, 5cfe <CC_PalInit+0x3e>
    5cfa:	4620      	mov	r0, r4
    5cfc:	bd10      	pop	{r4, pc}
    5cfe:	f000 f877 	bl	5df0 <CC_PalPowerSaveModeInit>
    5d02:	4620      	mov	r0, r4
    5d04:	e7fa      	b.n	5cfc <CC_PalInit+0x3c>
    5d06:	bf00      	nop
    5d08:	200000bc 	.word	0x200000bc
    5d0c:	200000b0 	.word	0x200000b0
    5d10:	200000b8 	.word	0x200000b8
    5d14:	200000c0 	.word	0x200000c0
    5d18:	200000b4 	.word	0x200000b4

00005d1c <CC_PalTerminate>:
    5d1c:	b508      	push	{r3, lr}
    5d1e:	4808      	ldr	r0, [pc, #32]	; (5d40 <CC_PalTerminate+0x24>)
    5d20:	f000 f84a 	bl	5db8 <CC_PalMutexDestroy>
    5d24:	4807      	ldr	r0, [pc, #28]	; (5d44 <CC_PalTerminate+0x28>)
    5d26:	f000 f847 	bl	5db8 <CC_PalMutexDestroy>
    5d2a:	4807      	ldr	r0, [pc, #28]	; (5d48 <CC_PalTerminate+0x2c>)
    5d2c:	f000 f844 	bl	5db8 <CC_PalMutexDestroy>
    5d30:	4806      	ldr	r0, [pc, #24]	; (5d4c <CC_PalTerminate+0x30>)
    5d32:	f000 f841 	bl	5db8 <CC_PalMutexDestroy>
    5d36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5d3a:	f000 b80b 	b.w	5d54 <CC_PalDmaTerminate>
    5d3e:	bf00      	nop
    5d40:	200000bc 	.word	0x200000bc
    5d44:	200000b0 	.word	0x200000b0
    5d48:	200000b8 	.word	0x200000b8
    5d4c:	200000b4 	.word	0x200000b4

00005d50 <CC_PalDmaInit>:
    5d50:	2000      	movs	r0, #0
    5d52:	4770      	bx	lr

00005d54 <CC_PalDmaTerminate>:
    5d54:	4770      	bx	lr
    5d56:	bf00      	nop

00005d58 <CC_PalWaitInterruptRND>:
    5d58:	4602      	mov	r2, r0
    5d5a:	4807      	ldr	r0, [pc, #28]	; (5d78 <CC_PalWaitInterruptRND+0x20>)
    5d5c:	6803      	ldr	r3, [r0, #0]
    5d5e:	4213      	tst	r3, r2
    5d60:	d0fc      	beq.n	5d5c <CC_PalWaitInterruptRND+0x4>
    5d62:	b121      	cbz	r1, 5d6e <CC_PalWaitInterruptRND+0x16>
    5d64:	4b05      	ldr	r3, [pc, #20]	; (5d7c <CC_PalWaitInterruptRND+0x24>)
    5d66:	4806      	ldr	r0, [pc, #24]	; (5d80 <CC_PalWaitInterruptRND+0x28>)
    5d68:	681b      	ldr	r3, [r3, #0]
    5d6a:	600b      	str	r3, [r1, #0]
    5d6c:	6003      	str	r3, [r0, #0]
    5d6e:	4b05      	ldr	r3, [pc, #20]	; (5d84 <CC_PalWaitInterruptRND+0x2c>)
    5d70:	2000      	movs	r0, #0
    5d72:	601a      	str	r2, [r3, #0]
    5d74:	4770      	bx	lr
    5d76:	bf00      	nop
    5d78:	50841a00 	.word	0x50841a00
    5d7c:	50841104 	.word	0x50841104
    5d80:	50841108 	.word	0x50841108
    5d84:	50841a08 	.word	0x50841a08

00005d88 <CC_PalWaitInterrupt>:
    5d88:	4602      	mov	r2, r0
    5d8a:	4904      	ldr	r1, [pc, #16]	; (5d9c <CC_PalWaitInterrupt+0x14>)
    5d8c:	680b      	ldr	r3, [r1, #0]
    5d8e:	421a      	tst	r2, r3
    5d90:	d0fc      	beq.n	5d8c <CC_PalWaitInterrupt+0x4>
    5d92:	4b03      	ldr	r3, [pc, #12]	; (5da0 <CC_PalWaitInterrupt+0x18>)
    5d94:	2000      	movs	r0, #0
    5d96:	601a      	str	r2, [r3, #0]
    5d98:	4770      	bx	lr
    5d9a:	bf00      	nop
    5d9c:	50841a00 	.word	0x50841a00
    5da0:	50841a08 	.word	0x50841a08

00005da4 <CC_PalMutexCreate>:
    5da4:	b508      	push	{r3, lr}
    5da6:	4b03      	ldr	r3, [pc, #12]	; (5db4 <CC_PalMutexCreate+0x10>)
    5da8:	6802      	ldr	r2, [r0, #0]
    5daa:	681b      	ldr	r3, [r3, #0]
    5dac:	6810      	ldr	r0, [r2, #0]
    5dae:	4798      	blx	r3
    5db0:	2000      	movs	r0, #0
    5db2:	bd08      	pop	{r3, pc}
    5db4:	20000070 	.word	0x20000070

00005db8 <CC_PalMutexDestroy>:
    5db8:	b508      	push	{r3, lr}
    5dba:	4b03      	ldr	r3, [pc, #12]	; (5dc8 <CC_PalMutexDestroy+0x10>)
    5dbc:	6802      	ldr	r2, [r0, #0]
    5dbe:	685b      	ldr	r3, [r3, #4]
    5dc0:	6810      	ldr	r0, [r2, #0]
    5dc2:	4798      	blx	r3
    5dc4:	2000      	movs	r0, #0
    5dc6:	bd08      	pop	{r3, pc}
    5dc8:	20000070 	.word	0x20000070

00005dcc <CC_PalMutexLock>:
    5dcc:	4b02      	ldr	r3, [pc, #8]	; (5dd8 <CC_PalMutexLock+0xc>)
    5dce:	6802      	ldr	r2, [r0, #0]
    5dd0:	689b      	ldr	r3, [r3, #8]
    5dd2:	6810      	ldr	r0, [r2, #0]
    5dd4:	4718      	bx	r3
    5dd6:	bf00      	nop
    5dd8:	20000070 	.word	0x20000070

00005ddc <CC_PalMutexUnlock>:
    5ddc:	b508      	push	{r3, lr}
    5dde:	4b03      	ldr	r3, [pc, #12]	; (5dec <CC_PalMutexUnlock+0x10>)
    5de0:	6802      	ldr	r2, [r0, #0]
    5de2:	68db      	ldr	r3, [r3, #12]
    5de4:	6810      	ldr	r0, [r2, #0]
    5de6:	4798      	blx	r3
    5de8:	2000      	movs	r0, #0
    5dea:	bd08      	pop	{r3, pc}
    5dec:	20000070 	.word	0x20000070

00005df0 <CC_PalPowerSaveModeInit>:
    5df0:	b570      	push	{r4, r5, r6, lr}
    5df2:	4c09      	ldr	r4, [pc, #36]	; (5e18 <CC_PalPowerSaveModeInit+0x28>)
    5df4:	4d09      	ldr	r5, [pc, #36]	; (5e1c <CC_PalPowerSaveModeInit+0x2c>)
    5df6:	6920      	ldr	r0, [r4, #16]
    5df8:	68ab      	ldr	r3, [r5, #8]
    5dfa:	4798      	blx	r3
    5dfc:	b118      	cbz	r0, 5e06 <CC_PalPowerSaveModeInit+0x16>
    5dfe:	4b08      	ldr	r3, [pc, #32]	; (5e20 <CC_PalPowerSaveModeInit+0x30>)
    5e00:	4808      	ldr	r0, [pc, #32]	; (5e24 <CC_PalPowerSaveModeInit+0x34>)
    5e02:	685b      	ldr	r3, [r3, #4]
    5e04:	4798      	blx	r3
    5e06:	2100      	movs	r1, #0
    5e08:	4a07      	ldr	r2, [pc, #28]	; (5e28 <CC_PalPowerSaveModeInit+0x38>)
    5e0a:	68eb      	ldr	r3, [r5, #12]
    5e0c:	6011      	str	r1, [r2, #0]
    5e0e:	6920      	ldr	r0, [r4, #16]
    5e10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5e14:	4718      	bx	r3
    5e16:	bf00      	nop
    5e18:	20000080 	.word	0x20000080
    5e1c:	20000070 	.word	0x20000070
    5e20:	20000060 	.word	0x20000060
    5e24:	00008ed4 	.word	0x00008ed4
    5e28:	20000cc0 	.word	0x20000cc0

00005e2c <CC_PalPowerSaveModeSelect>:
    5e2c:	b570      	push	{r4, r5, r6, lr}
    5e2e:	4d1a      	ldr	r5, [pc, #104]	; (5e98 <CC_PalPowerSaveModeSelect+0x6c>)
    5e30:	4e1a      	ldr	r6, [pc, #104]	; (5e9c <CC_PalPowerSaveModeSelect+0x70>)
    5e32:	4604      	mov	r4, r0
    5e34:	68b2      	ldr	r2, [r6, #8]
    5e36:	6928      	ldr	r0, [r5, #16]
    5e38:	4790      	blx	r2
    5e3a:	b9f0      	cbnz	r0, 5e7a <CC_PalPowerSaveModeSelect+0x4e>
    5e3c:	b15c      	cbz	r4, 5e56 <CC_PalPowerSaveModeSelect+0x2a>
    5e3e:	4c18      	ldr	r4, [pc, #96]	; (5ea0 <CC_PalPowerSaveModeSelect+0x74>)
    5e40:	6823      	ldr	r3, [r4, #0]
    5e42:	b1ab      	cbz	r3, 5e70 <CC_PalPowerSaveModeSelect+0x44>
    5e44:	2b01      	cmp	r3, #1
    5e46:	d01a      	beq.n	5e7e <CC_PalPowerSaveModeSelect+0x52>
    5e48:	3b01      	subs	r3, #1
    5e4a:	6023      	str	r3, [r4, #0]
    5e4c:	6928      	ldr	r0, [r5, #16]
    5e4e:	68f3      	ldr	r3, [r6, #12]
    5e50:	4798      	blx	r3
    5e52:	2000      	movs	r0, #0
    5e54:	bd70      	pop	{r4, r5, r6, pc}
    5e56:	4c12      	ldr	r4, [pc, #72]	; (5ea0 <CC_PalPowerSaveModeSelect+0x74>)
    5e58:	6821      	ldr	r1, [r4, #0]
    5e5a:	b939      	cbnz	r1, 5e6c <CC_PalPowerSaveModeSelect+0x40>
    5e5c:	2001      	movs	r0, #1
    5e5e:	4b11      	ldr	r3, [pc, #68]	; (5ea4 <CC_PalPowerSaveModeSelect+0x78>)
    5e60:	4a11      	ldr	r2, [pc, #68]	; (5ea8 <CC_PalPowerSaveModeSelect+0x7c>)
    5e62:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    5e66:	6813      	ldr	r3, [r2, #0]
    5e68:	2b00      	cmp	r3, #0
    5e6a:	d1fc      	bne.n	5e66 <CC_PalPowerSaveModeSelect+0x3a>
    5e6c:	3101      	adds	r1, #1
    5e6e:	6021      	str	r1, [r4, #0]
    5e70:	68f3      	ldr	r3, [r6, #12]
    5e72:	6928      	ldr	r0, [r5, #16]
    5e74:	4798      	blx	r3
    5e76:	2000      	movs	r0, #0
    5e78:	bd70      	pop	{r4, r5, r6, pc}
    5e7a:	480c      	ldr	r0, [pc, #48]	; (5eac <CC_PalPowerSaveModeSelect+0x80>)
    5e7c:	bd70      	pop	{r4, r5, r6, pc}
    5e7e:	4a0a      	ldr	r2, [pc, #40]	; (5ea8 <CC_PalPowerSaveModeSelect+0x7c>)
    5e80:	6813      	ldr	r3, [r2, #0]
    5e82:	2b00      	cmp	r3, #0
    5e84:	d1fc      	bne.n	5e80 <CC_PalPowerSaveModeSelect+0x54>
    5e86:	4a07      	ldr	r2, [pc, #28]	; (5ea4 <CC_PalPowerSaveModeSelect+0x78>)
    5e88:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    5e8c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    5e90:	f7ff ff04 	bl	5c9c <CC_HalMaskInterrupt>
    5e94:	6823      	ldr	r3, [r4, #0]
    5e96:	e7d7      	b.n	5e48 <CC_PalPowerSaveModeSelect+0x1c>
    5e98:	20000080 	.word	0x20000080
    5e9c:	20000070 	.word	0x20000070
    5ea0:	20000cc0 	.word	0x20000cc0
    5ea4:	50840000 	.word	0x50840000
    5ea8:	50841910 	.word	0x50841910
    5eac:	ffff8fe9 	.word	0xffff8fe9

00005eb0 <mutex_init>:
    5eb0:	4b01      	ldr	r3, [pc, #4]	; (5eb8 <mutex_init+0x8>)
    5eb2:	681b      	ldr	r3, [r3, #0]
    5eb4:	4718      	bx	r3
    5eb6:	bf00      	nop
    5eb8:	20000070 	.word	0x20000070

00005ebc <mutex_lock>:
    5ebc:	4b01      	ldr	r3, [pc, #4]	; (5ec4 <mutex_lock+0x8>)
    5ebe:	689b      	ldr	r3, [r3, #8]
    5ec0:	4718      	bx	r3
    5ec2:	bf00      	nop
    5ec4:	20000070 	.word	0x20000070

00005ec8 <mutex_unlock>:
    5ec8:	4b01      	ldr	r3, [pc, #4]	; (5ed0 <mutex_unlock+0x8>)
    5eca:	68db      	ldr	r3, [r3, #12]
    5ecc:	4718      	bx	r3
    5ece:	bf00      	nop
    5ed0:	20000070 	.word	0x20000070

00005ed4 <startTrngHW>:
    5ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5ed8:	2800      	cmp	r0, #0
    5eda:	d078      	beq.n	5fce <startTrngHW+0xfa>
    5edc:	460c      	mov	r4, r1
    5ede:	2900      	cmp	r1, #0
    5ee0:	d075      	beq.n	5fce <startTrngHW+0xfa>
    5ee2:	461d      	mov	r5, r3
    5ee4:	2b00      	cmp	r3, #0
    5ee6:	d072      	beq.n	5fce <startTrngHW+0xfa>
    5ee8:	4606      	mov	r6, r0
    5eea:	b11a      	cbz	r2, 5ef4 <startTrngHW+0x20>
    5eec:	2201      	movs	r2, #1
    5eee:	2300      	movs	r3, #0
    5ef0:	602a      	str	r2, [r5, #0]
    5ef2:	6003      	str	r3, [r0, #0]
    5ef4:	682b      	ldr	r3, [r5, #0]
    5ef6:	2b00      	cmp	r3, #0
    5ef8:	d065      	beq.n	5fc6 <startTrngHW+0xf2>
    5efa:	4629      	mov	r1, r5
    5efc:	4620      	mov	r0, r4
    5efe:	f001 f903 	bl	7108 <LLF_RND_GetFastestRosc>
    5f02:	4607      	mov	r7, r0
    5f04:	2800      	cmp	r0, #0
    5f06:	d15f      	bne.n	5fc8 <startTrngHW+0xf4>
    5f08:	4621      	mov	r1, r4
    5f0a:	6828      	ldr	r0, [r5, #0]
    5f0c:	f001 f8de 	bl	70cc <LLF_RND_GetRoscSampleCnt>
    5f10:	4607      	mov	r7, r0
    5f12:	2800      	cmp	r0, #0
    5f14:	d158      	bne.n	5fc8 <startTrngHW+0xf4>
    5f16:	682b      	ldr	r3, [r5, #0]
    5f18:	2b08      	cmp	r3, #8
    5f1a:	d067      	beq.n	5fec <startTrngHW+0x118>
    5f1c:	2b04      	cmp	r3, #4
    5f1e:	d068      	beq.n	5ff2 <startTrngHW+0x11e>
    5f20:	f1a3 0802 	sub.w	r8, r3, #2
    5f24:	fab8 f888 	clz	r8, r8
    5f28:	ea4f 1858 	mov.w	r8, r8, lsr #5
    5f2c:	2301      	movs	r3, #1
    5f2e:	469c      	mov	ip, r3
    5f30:	4a31      	ldr	r2, [pc, #196]	; (5ff8 <startTrngHW+0x124>)
    5f32:	4932      	ldr	r1, [pc, #200]	; (5ffc <startTrngHW+0x128>)
    5f34:	6013      	str	r3, [r2, #0]
    5f36:	4610      	mov	r0, r2
    5f38:	600b      	str	r3, [r1, #0]
    5f3a:	3a94      	subs	r2, #148	; 0x94
    5f3c:	f8c0 c000 	str.w	ip, [r0]
    5f40:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5f42:	6013      	str	r3, [r2, #0]
    5f44:	6811      	ldr	r1, [r2, #0]
    5f46:	428b      	cmp	r3, r1
    5f48:	d1f8      	bne.n	5f3c <startTrngHW+0x68>
    5f4a:	f04f 0900 	mov.w	r9, #0
    5f4e:	4b2c      	ldr	r3, [pc, #176]	; (6000 <startTrngHW+0x12c>)
    5f50:	f04f 30ff 	mov.w	r0, #4294967295
    5f54:	f8c3 9000 	str.w	r9, [r3]
    5f58:	f7ff fe92 	bl	5c80 <CC_HalClearInterruptBit>
    5f5c:	f06f 021b 	mvn.w	r2, #27
    5f60:	4b28      	ldr	r3, [pc, #160]	; (6004 <startTrngHW+0x130>)
    5f62:	4648      	mov	r0, r9
    5f64:	601a      	str	r2, [r3, #0]
    5f66:	f7ff fe99 	bl	5c9c <CC_HalMaskInterrupt>
    5f6a:	4a27      	ldr	r2, [pc, #156]	; (6008 <startTrngHW+0x134>)
    5f6c:	4b27      	ldr	r3, [pc, #156]	; (600c <startTrngHW+0x138>)
    5f6e:	f8c2 8000 	str.w	r8, [r2]
    5f72:	6818      	ldr	r0, [r3, #0]
    5f74:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5f78:	f7ff fe90 	bl	5c9c <CC_HalMaskInterrupt>
    5f7c:	220a      	movs	r2, #10
    5f7e:	4b24      	ldr	r3, [pc, #144]	; (6010 <startTrngHW+0x13c>)
    5f80:	601a      	str	r2, [r3, #0]
    5f82:	9a08      	ldr	r2, [sp, #32]
    5f84:	6923      	ldr	r3, [r4, #16]
    5f86:	2a01      	cmp	r2, #1
    5f88:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5f8a:	d024      	beq.n	5fd6 <startTrngHW+0x102>
    5f8c:	4a21      	ldr	r2, [pc, #132]	; (6014 <startTrngHW+0x140>)
    5f8e:	fba2 2303 	umull	r2, r3, r2, r3
    5f92:	091b      	lsrs	r3, r3, #4
    5f94:	2201      	movs	r2, #1
    5f96:	fb03 f301 	mul.w	r3, r3, r1
    5f9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5f9e:	491e      	ldr	r1, [pc, #120]	; (6018 <startTrngHW+0x144>)
    5fa0:	03db      	lsls	r3, r3, #15
    5fa2:	099b      	lsrs	r3, r3, #6
    5fa4:	600b      	str	r3, [r1, #0]
    5fa6:	4b16      	ldr	r3, [pc, #88]	; (6000 <startTrngHW+0x12c>)
    5fa8:	4638      	mov	r0, r7
    5faa:	601a      	str	r2, [r3, #0]
    5fac:	6833      	ldr	r3, [r6, #0]
    5fae:	682a      	ldr	r2, [r5, #0]
    5fb0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    5fb4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    5fb8:	6033      	str	r3, [r6, #0]
    5fba:	682a      	ldr	r2, [r5, #0]
    5fbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5fc0:	6033      	str	r3, [r6, #0]
    5fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5fc6:	4f15      	ldr	r7, [pc, #84]	; (601c <startTrngHW+0x148>)
    5fc8:	4638      	mov	r0, r7
    5fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5fce:	4f14      	ldr	r7, [pc, #80]	; (6020 <startTrngHW+0x14c>)
    5fd0:	4638      	mov	r0, r7
    5fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5fd6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5fda:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
    5fde:	3201      	adds	r2, #1
    5fe0:	d002      	beq.n	5fe8 <startTrngHW+0x114>
    5fe2:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    5fe6:	e7d1      	b.n	5f8c <startTrngHW+0xb8>
    5fe8:	2316      	movs	r3, #22
    5fea:	e7d3      	b.n	5f94 <startTrngHW+0xc0>
    5fec:	f04f 0803 	mov.w	r8, #3
    5ff0:	e79c      	b.n	5f2c <startTrngHW+0x58>
    5ff2:	f04f 0802 	mov.w	r8, #2
    5ff6:	e799      	b.n	5f2c <startTrngHW+0x58>
    5ff8:	508411c4 	.word	0x508411c4
    5ffc:	50841140 	.word	0x50841140
    6000:	5084112c 	.word	0x5084112c
    6004:	50841100 	.word	0x50841100
    6008:	5084110c 	.word	0x5084110c
    600c:	50841a04 	.word	0x50841a04
    6010:	50841138 	.word	0x50841138
    6014:	aaaaaaab 	.word	0xaaaaaaab
    6018:	508411d8 	.word	0x508411d8
    601c:	00f10c31 	.word	0x00f10c31
    6020:	00f10c35 	.word	0x00f10c35

00006024 <LLF_RND_RepetitionCounterTest.part.0>:
    6024:	b4f0      	push	{r4, r5, r6, r7}
    6026:	2400      	movs	r4, #0
    6028:	00c9      	lsls	r1, r1, #3
    602a:	4626      	mov	r6, r4
    602c:	4627      	mov	r7, r4
    602e:	f101 3cff 	add.w	ip, r1, #4294967295
    6032:	e006      	b.n	6042 <LLF_RND_RepetitionCounterTest.part.0+0x1e>
    6034:	429f      	cmp	r7, r3
    6036:	d015      	beq.n	6064 <LLF_RND_RepetitionCounterTest.part.0+0x40>
    6038:	2601      	movs	r6, #1
    603a:	4565      	cmp	r5, ip
    603c:	d818      	bhi.n	6070 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
    603e:	462c      	mov	r4, r5
    6040:	461f      	mov	r7, r3
    6042:	0963      	lsrs	r3, r4, #5
    6044:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6048:	f004 011f 	and.w	r1, r4, #31
    604c:	40cb      	lsrs	r3, r1
    604e:	291f      	cmp	r1, #31
    6050:	f104 0501 	add.w	r5, r4, #1
    6054:	bf18      	it	ne
    6056:	f003 0301 	andne.w	r3, r3, #1
    605a:	2c00      	cmp	r4, #0
    605c:	d1ea      	bne.n	6034 <LLF_RND_RepetitionCounterTest.part.0+0x10>
    605e:	2601      	movs	r6, #1
    6060:	4635      	mov	r5, r6
    6062:	e7ec      	b.n	603e <LLF_RND_RepetitionCounterTest.part.0+0x1a>
    6064:	3601      	adds	r6, #1
    6066:	4296      	cmp	r6, r2
    6068:	d1e7      	bne.n	603a <LLF_RND_RepetitionCounterTest.part.0+0x16>
    606a:	4803      	ldr	r0, [pc, #12]	; (6078 <LLF_RND_RepetitionCounterTest.part.0+0x54>)
    606c:	bcf0      	pop	{r4, r5, r6, r7}
    606e:	4770      	bx	lr
    6070:	2000      	movs	r0, #0
    6072:	bcf0      	pop	{r4, r5, r6, r7}
    6074:	4770      	bx	lr
    6076:	bf00      	nop
    6078:	00f10c36 	.word	0x00f10c36

0000607c <LLF_RND_AdaptiveProportionTest>:
    607c:	2800      	cmp	r0, #0
    607e:	d05f      	beq.n	6140 <LLF_RND_AdaptiveProportionTest+0xc4>
    6080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6084:	1e4c      	subs	r4, r1, #1
    6086:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    608a:	d226      	bcs.n	60da <LLF_RND_AdaptiveProportionTest+0x5e>
    608c:	b32b      	cbz	r3, 60da <LLF_RND_AdaptiveProportionTest+0x5e>
    608e:	b322      	cbz	r2, 60da <LLF_RND_AdaptiveProportionTest+0x5e>
    6090:	00cc      	lsls	r4, r1, #3
    6092:	2b01      	cmp	r3, #1
    6094:	f104 3eff 	add.w	lr, r4, #4294967295
    6098:	d02f      	beq.n	60fa <LLF_RND_AdaptiveProportionTest+0x7e>
    609a:	2100      	movs	r1, #0
    609c:	468c      	mov	ip, r1
    609e:	460f      	mov	r7, r1
    60a0:	460d      	mov	r5, r1
    60a2:	f103 38ff 	add.w	r8, r3, #4294967295
    60a6:	094c      	lsrs	r4, r1, #5
    60a8:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    60ac:	f001 061f 	and.w	r6, r1, #31
    60b0:	40f4      	lsrs	r4, r6
    60b2:	2e1f      	cmp	r6, #31
    60b4:	bf18      	it	ne
    60b6:	f004 0401 	andne.w	r4, r4, #1
    60ba:	b921      	cbnz	r1, 60c6 <LLF_RND_AdaptiveProportionTest+0x4a>
    60bc:	2501      	movs	r5, #1
    60be:	46ac      	mov	ip, r5
    60c0:	4629      	mov	r1, r5
    60c2:	4627      	mov	r7, r4
    60c4:	e7ef      	b.n	60a6 <LLF_RND_AdaptiveProportionTest+0x2a>
    60c6:	42ab      	cmp	r3, r5
    60c8:	d013      	beq.n	60f2 <LLF_RND_AdaptiveProportionTest+0x76>
    60ca:	42a7      	cmp	r7, r4
    60cc:	d101      	bne.n	60d2 <LLF_RND_AdaptiveProportionTest+0x56>
    60ce:	f10c 0c01 	add.w	ip, ip, #1
    60d2:	4545      	cmp	r5, r8
    60d4:	d104      	bne.n	60e0 <LLF_RND_AdaptiveProportionTest+0x64>
    60d6:	4562      	cmp	r2, ip
    60d8:	d202      	bcs.n	60e0 <LLF_RND_AdaptiveProportionTest+0x64>
    60da:	481a      	ldr	r0, [pc, #104]	; (6144 <LLF_RND_AdaptiveProportionTest+0xc8>)
    60dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    60e0:	463c      	mov	r4, r7
    60e2:	3101      	adds	r1, #1
    60e4:	458e      	cmp	lr, r1
    60e6:	f105 0501 	add.w	r5, r5, #1
    60ea:	d2ea      	bcs.n	60c2 <LLF_RND_AdaptiveProportionTest+0x46>
    60ec:	2000      	movs	r0, #0
    60ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    60f2:	2500      	movs	r5, #0
    60f4:	f04f 0c01 	mov.w	ip, #1
    60f8:	e7f3      	b.n	60e2 <LLF_RND_AdaptiveProportionTest+0x66>
    60fa:	2600      	movs	r6, #0
    60fc:	46b4      	mov	ip, r6
    60fe:	4637      	mov	r7, r6
    6100:	4631      	mov	r1, r6
    6102:	094b      	lsrs	r3, r1, #5
    6104:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6108:	f001 051f 	and.w	r5, r1, #31
    610c:	40eb      	lsrs	r3, r5
    610e:	2d1f      	cmp	r5, #31
    6110:	bf18      	it	ne
    6112:	f003 0301 	andne.w	r3, r3, #1
    6116:	b139      	cbz	r1, 6128 <LLF_RND_AdaptiveProportionTest+0xac>
    6118:	b95f      	cbnz	r7, 6132 <LLF_RND_AdaptiveProportionTest+0xb6>
    611a:	459c      	cmp	ip, r3
    611c:	d001      	beq.n	6122 <LLF_RND_AdaptiveProportionTest+0xa6>
    611e:	4663      	mov	r3, ip
    6120:	e008      	b.n	6134 <LLF_RND_AdaptiveProportionTest+0xb8>
    6122:	4663      	mov	r3, ip
    6124:	3601      	adds	r6, #1
    6126:	e005      	b.n	6134 <LLF_RND_AdaptiveProportionTest+0xb8>
    6128:	2601      	movs	r6, #1
    612a:	4631      	mov	r1, r6
    612c:	469c      	mov	ip, r3
    612e:	2701      	movs	r7, #1
    6130:	e7e7      	b.n	6102 <LLF_RND_AdaptiveProportionTest+0x86>
    6132:	463e      	mov	r6, r7
    6134:	42b2      	cmp	r2, r6
    6136:	d3d0      	bcc.n	60da <LLF_RND_AdaptiveProportionTest+0x5e>
    6138:	3101      	adds	r1, #1
    613a:	42a1      	cmp	r1, r4
    613c:	d1f6      	bne.n	612c <LLF_RND_AdaptiveProportionTest+0xb0>
    613e:	e7d5      	b.n	60ec <LLF_RND_AdaptiveProportionTest+0x70>
    6140:	4800      	ldr	r0, [pc, #0]	; (6144 <LLF_RND_AdaptiveProportionTest+0xc8>)
    6142:	4770      	bx	lr
    6144:	00f10c37 	.word	0x00f10c37

00006148 <getTrngSource>:
    6148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    614c:	b08d      	sub	sp, #52	; 0x34
    614e:	9e18      	ldr	r6, [sp, #96]	; 0x60
    6150:	4607      	mov	r7, r0
    6152:	460c      	mov	r4, r1
    6154:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    6156:	2e00      	cmp	r6, #0
    6158:	d14c      	bne.n	61f4 <getTrngSource+0xac>
    615a:	f8d1 b010 	ldr.w	fp, [r1, #16]
    615e:	2100      	movs	r1, #0
    6160:	601d      	str	r5, [r3, #0]
    6162:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6164:	6019      	str	r1, [r3, #0]
    6166:	2a00      	cmp	r2, #0
    6168:	f000 8122 	beq.w	63b0 <getTrngSource+0x268>
    616c:	4a9c      	ldr	r2, [pc, #624]	; (63e0 <getTrngSource+0x298>)
    616e:	4b9d      	ldr	r3, [pc, #628]	; (63e4 <getTrngSource+0x29c>)
    6170:	6811      	ldr	r1, [r2, #0]
    6172:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6174:	681b      	ldr	r3, [r3, #0]
    6176:	429a      	cmp	r2, r3
    6178:	d147      	bne.n	620a <getTrngSource+0xc2>
    617a:	290a      	cmp	r1, #10
    617c:	d145      	bne.n	620a <getTrngSource+0xc2>
    617e:	78fb      	ldrb	r3, [r7, #3]
    6180:	9304      	str	r3, [sp, #16]
    6182:	2304      	movs	r3, #4
    6184:	46b8      	mov	r8, r7
    6186:	9302      	str	r3, [sp, #8]
    6188:	4b97      	ldr	r3, [pc, #604]	; (63e8 <getTrngSource+0x2a0>)
    618a:	fba3 230b 	umull	r2, r3, r3, fp
    618e:	ea4f 0a93 	mov.w	sl, r3, lsr #2
    6192:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
    6196:	f105 0208 	add.w	r2, r5, #8
    619a:	9203      	str	r2, [sp, #12]
    619c:	ebab 0a43 	sub.w	sl, fp, r3, lsl #1
    61a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    61a2:	f8c3 b000 	str.w	fp, [r3]
    61a6:	f1bb 0f00 	cmp.w	fp, #0
    61aa:	f000 80c7 	beq.w	633c <getTrngSource+0x1f4>
    61ae:	465d      	mov	r5, fp
    61b0:	f04f 0900 	mov.w	r9, #0
    61b4:	9e03      	ldr	r6, [sp, #12]
    61b6:	f000 ffb7 	bl	7128 <LLF_RND_TurnOffTrng>
    61ba:	2300      	movs	r3, #0
    61bc:	9305      	str	r3, [sp, #20]
    61be:	f1b8 0f00 	cmp.w	r8, #0
    61c2:	f000 80e9 	beq.w	6398 <getTrngSource+0x250>
    61c6:	2c00      	cmp	r4, #0
    61c8:	f000 80e6 	beq.w	6398 <getTrngSource+0x250>
    61cc:	9b04      	ldr	r3, [sp, #16]
    61ce:	2b00      	cmp	r3, #0
    61d0:	f000 80e0 	beq.w	6394 <getTrngSource+0x24c>
    61d4:	4620      	mov	r0, r4
    61d6:	a904      	add	r1, sp, #16
    61d8:	f000 ff96 	bl	7108 <LLF_RND_GetFastestRosc>
    61dc:	b1b8      	cbz	r0, 620e <getTrngSource+0xc6>
    61de:	4b83      	ldr	r3, [pc, #524]	; (63ec <getTrngSource+0x2a4>)
    61e0:	4298      	cmp	r0, r3
    61e2:	f040 80ab 	bne.w	633c <getTrngSource+0x1f4>
    61e6:	9002      	str	r0, [sp, #8]
    61e8:	f000 ff9e 	bl	7128 <LLF_RND_TurnOffTrng>
    61ec:	9802      	ldr	r0, [sp, #8]
    61ee:	b00d      	add	sp, #52	; 0x34
    61f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    61f4:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    61f8:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    61fc:	3001      	adds	r0, #1
    61fe:	bf0c      	ite	eq
    6200:	f44f 7b04 	moveq.w	fp, #528	; 0x210
    6204:	f8d1 bc0c 	ldrne.w	fp, [r1, #3084]	; 0xc0c
    6208:	e7a9      	b.n	615e <getTrngSource+0x16>
    620a:	4879      	ldr	r0, [pc, #484]	; (63f0 <getTrngSource+0x2a8>)
    620c:	e7eb      	b.n	61e6 <getTrngSource+0x9e>
    620e:	4621      	mov	r1, r4
    6210:	9804      	ldr	r0, [sp, #16]
    6212:	f000 ff5b 	bl	70cc <LLF_RND_GetRoscSampleCnt>
    6216:	2800      	cmp	r0, #0
    6218:	d1e1      	bne.n	61de <getTrngSource+0x96>
    621a:	9f04      	ldr	r7, [sp, #16]
    621c:	2f08      	cmp	r7, #8
    621e:	f000 80bd 	beq.w	639c <getTrngSource+0x254>
    6222:	2f04      	cmp	r7, #4
    6224:	f000 80bc 	beq.w	63a0 <getTrngSource+0x258>
    6228:	f1a7 0702 	sub.w	r7, r7, #2
    622c:	fab7 f787 	clz	r7, r7
    6230:	097f      	lsrs	r7, r7, #5
    6232:	2301      	movs	r3, #1
    6234:	4619      	mov	r1, r3
    6236:	486f      	ldr	r0, [pc, #444]	; (63f4 <getTrngSource+0x2ac>)
    6238:	6003      	str	r3, [r0, #0]
    623a:	f840 3c84 	str.w	r3, [r0, #-132]
    623e:	4b6d      	ldr	r3, [pc, #436]	; (63f4 <getTrngSource+0x2ac>)
    6240:	4868      	ldr	r0, [pc, #416]	; (63e4 <getTrngSource+0x29c>)
    6242:	6019      	str	r1, [r3, #0]
    6244:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6246:	6003      	str	r3, [r0, #0]
    6248:	6800      	ldr	r0, [r0, #0]
    624a:	4283      	cmp	r3, r0
    624c:	d1f7      	bne.n	623e <getTrngSource+0xf6>
    624e:	2300      	movs	r3, #0
    6250:	4a69      	ldr	r2, [pc, #420]	; (63f8 <getTrngSource+0x2b0>)
    6252:	f04f 30ff 	mov.w	r0, #4294967295
    6256:	6013      	str	r3, [r2, #0]
    6258:	f7ff fd12 	bl	5c80 <CC_HalClearInterruptBit>
    625c:	2300      	movs	r3, #0
    625e:	f06f 011b 	mvn.w	r1, #27
    6262:	4618      	mov	r0, r3
    6264:	4b65      	ldr	r3, [pc, #404]	; (63fc <getTrngSource+0x2b4>)
    6266:	6019      	str	r1, [r3, #0]
    6268:	f7ff fd18 	bl	5c9c <CC_HalMaskInterrupt>
    626c:	4964      	ldr	r1, [pc, #400]	; (6400 <getTrngSource+0x2b8>)
    626e:	4b65      	ldr	r3, [pc, #404]	; (6404 <getTrngSource+0x2bc>)
    6270:	600f      	str	r7, [r1, #0]
    6272:	6818      	ldr	r0, [r3, #0]
    6274:	4f5c      	ldr	r7, [pc, #368]	; (63e8 <getTrngSource+0x2a0>)
    6276:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    627a:	f7ff fd0f 	bl	5c9c <CC_HalMaskInterrupt>
    627e:	210a      	movs	r1, #10
    6280:	2201      	movs	r2, #1
    6282:	4b57      	ldr	r3, [pc, #348]	; (63e0 <getTrngSource+0x298>)
    6284:	4860      	ldr	r0, [pc, #384]	; (6408 <getTrngSource+0x2c0>)
    6286:	6019      	str	r1, [r3, #0]
    6288:	6921      	ldr	r1, [r4, #16]
    628a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    628c:	fba7 c101 	umull	ip, r1, r7, r1
    6290:	0909      	lsrs	r1, r1, #4
    6292:	fb03 f301 	mul.w	r3, r3, r1
    6296:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    629a:	03db      	lsls	r3, r3, #15
    629c:	099b      	lsrs	r3, r3, #6
    629e:	6003      	str	r3, [r0, #0]
    62a0:	4b55      	ldr	r3, [pc, #340]	; (63f8 <getTrngSource+0x2b0>)
    62a2:	a805      	add	r0, sp, #20
    62a4:	601a      	str	r2, [r3, #0]
    62a6:	9904      	ldr	r1, [sp, #16]
    62a8:	f8d8 2000 	ldr.w	r2, [r8]
    62ac:	020b      	lsls	r3, r1, #8
    62ae:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    62b2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    62b6:	4313      	orrs	r3, r2
    62b8:	f8c8 3000 	str.w	r3, [r8]
    62bc:	f000 fef6 	bl	70ac <LLF_RND_WaitRngInterrupt>
    62c0:	9b05      	ldr	r3, [sp, #20]
    62c2:	f003 031a 	and.w	r3, r3, #26
    62c6:	4303      	orrs	r3, r0
    62c8:	d138      	bne.n	633c <getTrngSource+0x1f4>
    62ca:	4b50      	ldr	r3, [pc, #320]	; (640c <getTrngSource+0x2c4>)
    62cc:	fba7 2705 	umull	r2, r7, r7, r5
    62d0:	681a      	ldr	r2, [r3, #0]
    62d2:	3314      	adds	r3, #20
    62d4:	9206      	str	r2, [sp, #24]
    62d6:	f853 2c10 	ldr.w	r2, [r3, #-16]
    62da:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
    62de:	9207      	str	r2, [sp, #28]
    62e0:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    62e4:	9208      	str	r2, [sp, #32]
    62e6:	f853 2c08 	ldr.w	r2, [r3, #-8]
    62ea:	9209      	str	r2, [sp, #36]	; 0x24
    62ec:	f853 2c04 	ldr.w	r2, [r3, #-4]
    62f0:	920a      	str	r2, [sp, #40]	; 0x28
    62f2:	681b      	ldr	r3, [r3, #0]
    62f4:	930b      	str	r3, [sp, #44]	; 0x2c
    62f6:	d102      	bne.n	62fe <getTrngSource+0x1b6>
    62f8:	f1ba 0f00 	cmp.w	sl, #0
    62fc:	d141      	bne.n	6382 <getTrngSource+0x23a>
    62fe:	2218      	movs	r2, #24
    6300:	4630      	mov	r0, r6
    6302:	eb0d 0102 	add.w	r1, sp, r2
    6306:	f000 fe41 	bl	6f8c <CC_PalMemCopyPlat>
    630a:	3d18      	subs	r5, #24
    630c:	3618      	adds	r6, #24
    630e:	f109 0901 	add.w	r9, r9, #1
    6312:	2d00      	cmp	r5, #0
    6314:	f47f af4f 	bne.w	61b6 <getTrngSource+0x6e>
    6318:	f5bb 7f04 	cmp.w	fp, #528	; 0x210
    631c:	d85d      	bhi.n	63da <getTrngSource+0x292>
    631e:	9d03      	ldr	r5, [sp, #12]
    6320:	4659      	mov	r1, fp
    6322:	4628      	mov	r0, r5
    6324:	6962      	ldr	r2, [r4, #20]
    6326:	f7ff fe7d 	bl	6024 <LLF_RND_RepetitionCounterTest.part.0>
    632a:	2800      	cmp	r0, #0
    632c:	d04b      	beq.n	63c6 <getTrngSource+0x27e>
    632e:	2300      	movs	r3, #0
    6330:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6332:	6013      	str	r3, [r2, #0]
    6334:	4b2d      	ldr	r3, [pc, #180]	; (63ec <getTrngSource+0x2a4>)
    6336:	4298      	cmp	r0, r3
    6338:	f43f af55 	beq.w	61e6 <getTrngSource+0x9e>
    633c:	9d04      	ldr	r5, [sp, #16]
    633e:	2d08      	cmp	r5, #8
    6340:	d034      	beq.n	63ac <getTrngSource+0x264>
    6342:	2200      	movs	r2, #0
    6344:	ab04      	add	r3, sp, #16
    6346:	4621      	mov	r1, r4
    6348:	4640      	mov	r0, r8
    634a:	006d      	lsls	r5, r5, #1
    634c:	9200      	str	r2, [sp, #0]
    634e:	9504      	str	r5, [sp, #16]
    6350:	f7ff fdc0 	bl	5ed4 <startTrngHW>
    6354:	4b2e      	ldr	r3, [pc, #184]	; (6410 <getTrngSource+0x2c8>)
    6356:	4298      	cmp	r0, r3
    6358:	d024      	beq.n	63a4 <getTrngSource+0x25c>
    635a:	2800      	cmp	r0, #0
    635c:	f47f af43 	bne.w	61e6 <getTrngSource+0x9e>
    6360:	f8d8 2000 	ldr.w	r2, [r8]
    6364:	0a13      	lsrs	r3, r2, #8
    6366:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    636a:	4313      	orrs	r3, r2
    636c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6370:	f8c8 3000 	str.w	r3, [r8]
    6374:	9b02      	ldr	r3, [sp, #8]
    6376:	3b01      	subs	r3, #1
    6378:	9302      	str	r3, [sp, #8]
    637a:	f47f af11 	bne.w	61a0 <getTrngSource+0x58>
    637e:	2000      	movs	r0, #0
    6380:	e731      	b.n	61e6 <getTrngSource+0x9e>
    6382:	4630      	mov	r0, r6
    6384:	4652      	mov	r2, sl
    6386:	a906      	add	r1, sp, #24
    6388:	f000 fe00 	bl	6f8c <CC_PalMemCopyPlat>
    638c:	eba5 050a 	sub.w	r5, r5, sl
    6390:	4456      	add	r6, sl
    6392:	e7bc      	b.n	630e <getTrngSource+0x1c6>
    6394:	481e      	ldr	r0, [pc, #120]	; (6410 <getTrngSource+0x2c8>)
    6396:	e722      	b.n	61de <getTrngSource+0x96>
    6398:	481e      	ldr	r0, [pc, #120]	; (6414 <getTrngSource+0x2cc>)
    639a:	e720      	b.n	61de <getTrngSource+0x96>
    639c:	2703      	movs	r7, #3
    639e:	e748      	b.n	6232 <getTrngSource+0xea>
    63a0:	2702      	movs	r7, #2
    63a2:	e746      	b.n	6232 <getTrngSource+0xea>
    63a4:	6a23      	ldr	r3, [r4, #32]
    63a6:	2b00      	cmp	r3, #0
    63a8:	f43f af1d 	beq.w	61e6 <getTrngSource+0x9e>
    63ac:	481a      	ldr	r0, [pc, #104]	; (6418 <getTrngSource+0x2d0>)
    63ae:	e71a      	b.n	61e6 <getTrngSource+0x9e>
    63b0:	2201      	movs	r2, #1
    63b2:	4621      	mov	r1, r4
    63b4:	4638      	mov	r0, r7
    63b6:	9600      	str	r6, [sp, #0]
    63b8:	ab04      	add	r3, sp, #16
    63ba:	f7ff fd8b 	bl	5ed4 <startTrngHW>
    63be:	2800      	cmp	r0, #0
    63c0:	f43f aedf 	beq.w	6182 <getTrngSource+0x3a>
    63c4:	e70f      	b.n	61e6 <getTrngSource+0x9e>
    63c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    63ca:	4659      	mov	r1, fp
    63cc:	4628      	mov	r0, r5
    63ce:	69a2      	ldr	r2, [r4, #24]
    63d0:	f7ff fe54 	bl	607c <LLF_RND_AdaptiveProportionTest>
    63d4:	2800      	cmp	r0, #0
    63d6:	d1aa      	bne.n	632e <getTrngSource+0x1e6>
    63d8:	e7d1      	b.n	637e <getTrngSource+0x236>
    63da:	9b16      	ldr	r3, [sp, #88]	; 0x58
    63dc:	601d      	str	r5, [r3, #0]
    63de:	e7ad      	b.n	633c <getTrngSource+0x1f4>
    63e0:	50841138 	.word	0x50841138
    63e4:	50841130 	.word	0x50841130
    63e8:	aaaaaaab 	.word	0xaaaaaaab
    63ec:	00f10c02 	.word	0x00f10c02
    63f0:	00f10c30 	.word	0x00f10c30
    63f4:	508411c4 	.word	0x508411c4
    63f8:	5084112c 	.word	0x5084112c
    63fc:	50841100 	.word	0x50841100
    6400:	5084110c 	.word	0x5084110c
    6404:	50841a04 	.word	0x50841a04
    6408:	508411d8 	.word	0x508411d8
    640c:	50841114 	.word	0x50841114
    6410:	00f10c31 	.word	0x00f10c31
    6414:	00f10c35 	.word	0x00f10c35
    6418:	00f10c32 	.word	0x00f10c32

0000641c <LLF_RND_GetTrngSource>:
    641c:	2300      	movs	r3, #0
    641e:	b430      	push	{r4, r5}
    6420:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
    6424:	9304      	str	r3, [sp, #16]
    6426:	9b02      	ldr	r3, [sp, #8]
    6428:	e9cd 4502 	strd	r4, r5, [sp, #8]
    642c:	bc30      	pop	{r4, r5}
    642e:	f7ff be8b 	b.w	6148 <getTrngSource>
    6432:	bf00      	nop

00006434 <LLF_RND_RunTrngStartupTest>:
    6434:	b510      	push	{r4, lr}
    6436:	2401      	movs	r4, #1
    6438:	b086      	sub	sp, #24
    643a:	ab05      	add	r3, sp, #20
    643c:	e9cd 2401 	strd	r2, r4, [sp, #4]
    6440:	9300      	str	r3, [sp, #0]
    6442:	2200      	movs	r2, #0
    6444:	ab04      	add	r3, sp, #16
    6446:	f7ff fe7f 	bl	6148 <getTrngSource>
    644a:	b006      	add	sp, #24
    644c:	bd10      	pop	{r4, pc}
    644e:	bf00      	nop

00006450 <mbedtls_platform_zeroize>:
    6450:	b138      	cbz	r0, 6462 <mbedtls_platform_zeroize+0x12>
    6452:	b131      	cbz	r1, 6462 <mbedtls_platform_zeroize+0x12>
    6454:	2200      	movs	r2, #0
    6456:	4401      	add	r1, r0
    6458:	4603      	mov	r3, r0
    645a:	3001      	adds	r0, #1
    645c:	4281      	cmp	r1, r0
    645e:	701a      	strb	r2, [r3, #0]
    6460:	d1fa      	bne.n	6458 <mbedtls_platform_zeroize+0x8>
    6462:	4770      	bx	lr

00006464 <mbedtls_hardware_poll>:
    6464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6468:	b088      	sub	sp, #32
    646a:	9205      	str	r2, [sp, #20]
    646c:	2900      	cmp	r1, #0
    646e:	d068      	beq.n	6542 <mbedtls_hardware_poll+0xde>
    6470:	461c      	mov	r4, r3
    6472:	2b00      	cmp	r3, #0
    6474:	d065      	beq.n	6542 <mbedtls_hardware_poll+0xde>
    6476:	4615      	mov	r5, r2
    6478:	2a00      	cmp	r2, #0
    647a:	d062      	beq.n	6542 <mbedtls_hardware_poll+0xde>
    647c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 6564 <mbedtls_hardware_poll+0x100>
    6480:	460e      	mov	r6, r1
    6482:	f8d8 0000 	ldr.w	r0, [r8]
    6486:	f04f 31ff 	mov.w	r1, #4294967295
    648a:	f7ff fc9f 	bl	5dcc <CC_PalMutexLock>
    648e:	2800      	cmp	r0, #0
    6490:	d14c      	bne.n	652c <mbedtls_hardware_poll+0xc8>
    6492:	2000      	movs	r0, #0
    6494:	f7ff fcca 	bl	5e2c <CC_PalPowerSaveModeSelect>
    6498:	2800      	cmp	r0, #0
    649a:	d143      	bne.n	6524 <mbedtls_hardware_poll+0xc0>
    649c:	482a      	ldr	r0, [pc, #168]	; (6548 <mbedtls_hardware_poll+0xe4>)
    649e:	f000 fd37 	bl	6f10 <RNG_PLAT_SetUserRngParameters>
    64a2:	b1e8      	cbz	r0, 64e0 <mbedtls_hardware_poll+0x7c>
    64a4:	2001      	movs	r0, #1
    64a6:	f04f 37ff 	mov.w	r7, #4294967295
    64aa:	f7ff fcbf 	bl	5e2c <CC_PalPowerSaveModeSelect>
    64ae:	2800      	cmp	r0, #0
    64b0:	d134      	bne.n	651c <mbedtls_hardware_poll+0xb8>
    64b2:	f44f 7108 	mov.w	r1, #544	; 0x220
    64b6:	4825      	ldr	r0, [pc, #148]	; (654c <mbedtls_hardware_poll+0xe8>)
    64b8:	f7ff ffca 	bl	6450 <mbedtls_platform_zeroize>
    64bc:	2104      	movs	r1, #4
    64be:	4824      	ldr	r0, [pc, #144]	; (6550 <mbedtls_hardware_poll+0xec>)
    64c0:	f7ff ffc6 	bl	6450 <mbedtls_platform_zeroize>
    64c4:	4820      	ldr	r0, [pc, #128]	; (6548 <mbedtls_hardware_poll+0xe4>)
    64c6:	2128      	movs	r1, #40	; 0x28
    64c8:	f7ff ffc2 	bl	6450 <mbedtls_platform_zeroize>
    64cc:	f8d8 0000 	ldr.w	r0, [r8]
    64d0:	f7ff fc84 	bl	5ddc <CC_PalMutexUnlock>
    64d4:	2800      	cmp	r0, #0
    64d6:	d12d      	bne.n	6534 <mbedtls_hardware_poll+0xd0>
    64d8:	4638      	mov	r0, r7
    64da:	b008      	add	sp, #32
    64dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64e0:	491a      	ldr	r1, [pc, #104]	; (654c <mbedtls_hardware_poll+0xe8>)
    64e2:	ab07      	add	r3, sp, #28
    64e4:	4602      	mov	r2, r0
    64e6:	9003      	str	r0, [sp, #12]
    64e8:	9102      	str	r1, [sp, #8]
    64ea:	9300      	str	r3, [sp, #0]
    64ec:	4916      	ldr	r1, [pc, #88]	; (6548 <mbedtls_hardware_poll+0xe4>)
    64ee:	4818      	ldr	r0, [pc, #96]	; (6550 <mbedtls_hardware_poll+0xec>)
    64f0:	9401      	str	r4, [sp, #4]
    64f2:	ab05      	add	r3, sp, #20
    64f4:	f7ff ff92 	bl	641c <LLF_RND_GetTrngSource>
    64f8:	2800      	cmp	r0, #0
    64fa:	d1d3      	bne.n	64a4 <mbedtls_hardware_poll+0x40>
    64fc:	6823      	ldr	r3, [r4, #0]
    64fe:	42ab      	cmp	r3, r5
    6500:	d3d0      	bcc.n	64a4 <mbedtls_hardware_poll+0x40>
    6502:	9907      	ldr	r1, [sp, #28]
    6504:	4607      	mov	r7, r0
    6506:	462a      	mov	r2, r5
    6508:	4630      	mov	r0, r6
    650a:	3108      	adds	r1, #8
    650c:	f000 fd3e 	bl	6f8c <CC_PalMemCopyPlat>
    6510:	2001      	movs	r0, #1
    6512:	6025      	str	r5, [r4, #0]
    6514:	f7ff fc8a 	bl	5e2c <CC_PalPowerSaveModeSelect>
    6518:	2800      	cmp	r0, #0
    651a:	d0ca      	beq.n	64b2 <mbedtls_hardware_poll+0x4e>
    651c:	480d      	ldr	r0, [pc, #52]	; (6554 <mbedtls_hardware_poll+0xf0>)
    651e:	f7ff f8c3 	bl	56a8 <CC_PalAbort>
    6522:	e7c6      	b.n	64b2 <mbedtls_hardware_poll+0x4e>
    6524:	480c      	ldr	r0, [pc, #48]	; (6558 <mbedtls_hardware_poll+0xf4>)
    6526:	f7ff f8bf 	bl	56a8 <CC_PalAbort>
    652a:	e7b7      	b.n	649c <mbedtls_hardware_poll+0x38>
    652c:	480b      	ldr	r0, [pc, #44]	; (655c <mbedtls_hardware_poll+0xf8>)
    652e:	f7ff f8bb 	bl	56a8 <CC_PalAbort>
    6532:	e7ae      	b.n	6492 <mbedtls_hardware_poll+0x2e>
    6534:	480a      	ldr	r0, [pc, #40]	; (6560 <mbedtls_hardware_poll+0xfc>)
    6536:	f7ff f8b7 	bl	56a8 <CC_PalAbort>
    653a:	4638      	mov	r0, r7
    653c:	b008      	add	sp, #32
    653e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6542:	f04f 37ff 	mov.w	r7, #4294967295
    6546:	e7c7      	b.n	64d8 <mbedtls_hardware_poll+0x74>
    6548:	20000ee8 	.word	0x20000ee8
    654c:	20000cc8 	.word	0x20000cc8
    6550:	20000cc4 	.word	0x20000cc4
    6554:	00008e9c 	.word	0x00008e9c
    6558:	00008e7c 	.word	0x00008e7c
    655c:	00008e64 	.word	0x00008e64
    6560:	00008ef4 	.word	0x00008ef4
    6564:	200000c0 	.word	0x200000c0

00006568 <cc_mbedtls_sha256_init>:
    6568:	b510      	push	{r4, lr}
    656a:	4604      	mov	r4, r0
    656c:	b128      	cbz	r0, 657a <cc_mbedtls_sha256_init+0x12>
    656e:	4620      	mov	r0, r4
    6570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6574:	21f0      	movs	r1, #240	; 0xf0
    6576:	f000 bd0d 	b.w	6f94 <CC_PalMemSetZeroPlat>
    657a:	4804      	ldr	r0, [pc, #16]	; (658c <cc_mbedtls_sha256_init+0x24>)
    657c:	f7ff f894 	bl	56a8 <CC_PalAbort>
    6580:	4620      	mov	r0, r4
    6582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6586:	21f0      	movs	r1, #240	; 0xf0
    6588:	f000 bd04 	b.w	6f94 <CC_PalMemSetZeroPlat>
    658c:	00008f0c 	.word	0x00008f0c

00006590 <cc_mbedtls_sha256_free>:
    6590:	b110      	cbz	r0, 6598 <cc_mbedtls_sha256_free+0x8>
    6592:	21f0      	movs	r1, #240	; 0xf0
    6594:	f7ff bf5c 	b.w	6450 <mbedtls_platform_zeroize>
    6598:	4770      	bx	lr
    659a:	bf00      	nop

0000659c <cc_mbedtls_sha256_starts_ret>:
    659c:	b508      	push	{r3, lr}
    659e:	b161      	cbz	r1, 65ba <cc_mbedtls_sha256_starts_ret+0x1e>
    65a0:	2901      	cmp	r1, #1
    65a2:	d107      	bne.n	65b4 <cc_mbedtls_sha256_starts_ret+0x18>
    65a4:	2102      	movs	r1, #2
    65a6:	f000 f839 	bl	661c <mbedtls_sha_starts_internal>
    65aa:	2800      	cmp	r0, #0
    65ac:	bf18      	it	ne
    65ae:	f06f 0036 	mvnne.w	r0, #54	; 0x36
    65b2:	bd08      	pop	{r3, pc}
    65b4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    65b8:	bd08      	pop	{r3, pc}
    65ba:	2101      	movs	r1, #1
    65bc:	f000 f82e 	bl	661c <mbedtls_sha_starts_internal>
    65c0:	e7f3      	b.n	65aa <cc_mbedtls_sha256_starts_ret+0xe>
    65c2:	bf00      	nop

000065c4 <cc_mbedtls_sha256_update_ret>:
    65c4:	b508      	push	{r3, lr}
    65c6:	f000 f86b 	bl	66a0 <mbedtls_sha_update_internal>
    65ca:	2800      	cmp	r0, #0
    65cc:	bf18      	it	ne
    65ce:	f06f 0036 	mvnne.w	r0, #54	; 0x36
    65d2:	bd08      	pop	{r3, pc}

000065d4 <cc_mbedtls_sha256_finish_ret>:
    65d4:	b570      	push	{r4, r5, r6, lr}
    65d6:	b1e8      	cbz	r0, 6614 <cc_mbedtls_sha256_finish_ret+0x40>
    65d8:	460e      	mov	r6, r1
    65da:	b1d9      	cbz	r1, 6614 <cc_mbedtls_sha256_finish_ret+0x40>
    65dc:	4604      	mov	r4, r0
    65de:	f000 f831 	bl	6644 <mbedtls_sha_finish_internal>
    65e2:	4605      	mov	r5, r0
    65e4:	b9b0      	cbnz	r0, 6614 <cc_mbedtls_sha256_finish_ret+0x40>
    65e6:	6823      	ldr	r3, [r4, #0]
    65e8:	2b01      	cmp	r3, #1
    65ea:	d00b      	beq.n	6604 <cc_mbedtls_sha256_finish_ret+0x30>
    65ec:	2b02      	cmp	r3, #2
    65ee:	d001      	beq.n	65f4 <cc_mbedtls_sha256_finish_ret+0x20>
    65f0:	4628      	mov	r0, r5
    65f2:	bd70      	pop	{r4, r5, r6, pc}
    65f4:	4630      	mov	r0, r6
    65f6:	221c      	movs	r2, #28
    65f8:	f104 0108 	add.w	r1, r4, #8
    65fc:	f000 fcc6 	bl	6f8c <CC_PalMemCopyPlat>
    6600:	4628      	mov	r0, r5
    6602:	bd70      	pop	{r4, r5, r6, pc}
    6604:	4630      	mov	r0, r6
    6606:	2220      	movs	r2, #32
    6608:	f104 0108 	add.w	r1, r4, #8
    660c:	f000 fcbe 	bl	6f8c <CC_PalMemCopyPlat>
    6610:	4628      	mov	r0, r5
    6612:	bd70      	pop	{r4, r5, r6, pc}
    6614:	f06f 0536 	mvn.w	r5, #54	; 0x36
    6618:	e7ea      	b.n	65f0 <cc_mbedtls_sha256_finish_ret+0x1c>
    661a:	bf00      	nop

0000661c <mbedtls_sha_starts_internal>:
    661c:	b178      	cbz	r0, 663e <mbedtls_sha_starts_internal+0x22>
    661e:	b538      	push	{r3, r4, r5, lr}
    6620:	460d      	mov	r5, r1
    6622:	21f0      	movs	r1, #240	; 0xf0
    6624:	4604      	mov	r4, r0
    6626:	f000 fcb5 	bl	6f94 <CC_PalMemSetZeroPlat>
    662a:	2340      	movs	r3, #64	; 0x40
    662c:	4620      	mov	r0, r4
    662e:	6025      	str	r5, [r4, #0]
    6630:	65e3      	str	r3, [r4, #92]	; 0x5c
    6632:	f000 fdbf 	bl	71b4 <InitHashDrv>
    6636:	3800      	subs	r0, #0
    6638:	bf18      	it	ne
    663a:	2001      	movne	r0, #1
    663c:	bd38      	pop	{r3, r4, r5, pc}
    663e:	2001      	movs	r0, #1
    6640:	4770      	bx	lr
    6642:	bf00      	nop

00006644 <mbedtls_sha_finish_internal>:
    6644:	b570      	push	{r4, r5, r6, lr}
    6646:	6e05      	ldr	r5, [r0, #96]	; 0x60
    6648:	b0a4      	sub	sp, #144	; 0x90
    664a:	4604      	mov	r4, r0
    664c:	ae04      	add	r6, sp, #16
    664e:	b9e5      	cbnz	r5, 668a <mbedtls_sha_finish_internal+0x46>
    6650:	2201      	movs	r2, #1
    6652:	2300      	movs	r3, #0
    6654:	6062      	str	r2, [r4, #4]
    6656:	4630      	mov	r0, r6
    6658:	4629      	mov	r1, r5
    665a:	e9cd 3300 	strd	r3, r3, [sp]
    665e:	aa02      	add	r2, sp, #8
    6660:	f000 fd70 	bl	7144 <SetDataBuffersInfo>
    6664:	b110      	cbz	r0, 666c <mbedtls_sha_finish_internal+0x28>
    6666:	2001      	movs	r0, #1
    6668:	b024      	add	sp, #144	; 0x90
    666a:	bd70      	pop	{r4, r5, r6, pc}
    666c:	462a      	mov	r2, r5
    666e:	4620      	mov	r0, r4
    6670:	a902      	add	r1, sp, #8
    6672:	f000 fdc9 	bl	7208 <ProcessHashDrv>
    6676:	2800      	cmp	r0, #0
    6678:	d1f5      	bne.n	6666 <mbedtls_sha_finish_internal+0x22>
    667a:	4620      	mov	r0, r4
    667c:	f000 feee 	bl	745c <FinishHashDrv>
    6680:	2800      	cmp	r0, #0
    6682:	d1f0      	bne.n	6666 <mbedtls_sha_finish_internal+0x22>
    6684:	6620      	str	r0, [r4, #96]	; 0x60
    6686:	b024      	add	sp, #144	; 0x90
    6688:	bd70      	pop	{r4, r5, r6, pc}
    668a:	2d80      	cmp	r5, #128	; 0x80
    668c:	462a      	mov	r2, r5
    668e:	4630      	mov	r0, r6
    6690:	bf28      	it	cs
    6692:	2280      	movcs	r2, #128	; 0x80
    6694:	f104 0164 	add.w	r1, r4, #100	; 0x64
    6698:	f000 fc78 	bl	6f8c <CC_PalMemCopyPlat>
    669c:	6e25      	ldr	r5, [r4, #96]	; 0x60
    669e:	e7d7      	b.n	6650 <mbedtls_sha_finish_internal+0xc>

000066a0 <mbedtls_sha_update_internal>:
    66a0:	2800      	cmp	r0, #0
    66a2:	d055      	beq.n	6750 <mbedtls_sha_update_internal+0xb0>
    66a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    66a6:	4615      	mov	r5, r2
    66a8:	b0a5      	sub	sp, #148	; 0x94
    66aa:	b1b2      	cbz	r2, 66da <mbedtls_sha_update_internal+0x3a>
    66ac:	460e      	mov	r6, r1
    66ae:	b351      	cbz	r1, 6706 <mbedtls_sha_update_internal+0x66>
    66b0:	4604      	mov	r4, r0
    66b2:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
    66b6:	1a1a      	subs	r2, r3, r0
    66b8:	fbb2 f7f3 	udiv	r7, r2, r3
    66bc:	fb03 2717 	mls	r7, r3, r7, r2
    66c0:	42af      	cmp	r7, r5
    66c2:	bf28      	it	cs
    66c4:	462f      	movcs	r7, r5
    66c6:	2f00      	cmp	r7, #0
    66c8:	d144      	bne.n	6754 <mbedtls_sha_update_internal+0xb4>
    66ca:	4283      	cmp	r3, r0
    66cc:	d008      	beq.n	66e0 <mbedtls_sha_update_internal+0x40>
    66ce:	fbb5 f7f3 	udiv	r7, r5, r3
    66d2:	fb03 f707 	mul.w	r7, r3, r7
    66d6:	b9cf      	cbnz	r7, 670c <mbedtls_sha_update_internal+0x6c>
    66d8:	bb6d      	cbnz	r5, 6736 <mbedtls_sha_update_internal+0x96>
    66da:	4628      	mov	r0, r5
    66dc:	b025      	add	sp, #148	; 0x94
    66de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66e0:	2b80      	cmp	r3, #128	; 0x80
    66e2:	bf28      	it	cs
    66e4:	2380      	movcs	r3, #128	; 0x80
    66e6:	f104 0164 	add.w	r1, r4, #100	; 0x64
    66ea:	461a      	mov	r2, r3
    66ec:	a804      	add	r0, sp, #16
    66ee:	f000 fc4d 	bl	6f8c <CC_PalMemCopyPlat>
    66f2:	2300      	movs	r3, #0
    66f4:	e9cd 3300 	strd	r3, r3, [sp]
    66f8:	a804      	add	r0, sp, #16
    66fa:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    66fc:	aa02      	add	r2, sp, #8
    66fe:	f000 fd21 	bl	7144 <SetDataBuffersInfo>
    6702:	2800      	cmp	r0, #0
    6704:	d033      	beq.n	676e <mbedtls_sha_update_internal+0xce>
    6706:	2001      	movs	r0, #1
    6708:	b025      	add	sp, #148	; 0x94
    670a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    670c:	2300      	movs	r3, #0
    670e:	4639      	mov	r1, r7
    6710:	4630      	mov	r0, r6
    6712:	e9cd 3300 	strd	r3, r3, [sp]
    6716:	aa02      	add	r2, sp, #8
    6718:	f000 fd14 	bl	7144 <SetDataBuffersInfo>
    671c:	2800      	cmp	r0, #0
    671e:	d1f2      	bne.n	6706 <mbedtls_sha_update_internal+0x66>
    6720:	463a      	mov	r2, r7
    6722:	4620      	mov	r0, r4
    6724:	a902      	add	r1, sp, #8
    6726:	f000 fd6f 	bl	7208 <ProcessHashDrv>
    672a:	2800      	cmp	r0, #0
    672c:	d1eb      	bne.n	6706 <mbedtls_sha_update_internal+0x66>
    672e:	1bed      	subs	r5, r5, r7
    6730:	443e      	add	r6, r7
    6732:	2d00      	cmp	r5, #0
    6734:	d0d1      	beq.n	66da <mbedtls_sha_update_internal+0x3a>
    6736:	6e20      	ldr	r0, [r4, #96]	; 0x60
    6738:	462a      	mov	r2, r5
    673a:	3019      	adds	r0, #25
    673c:	4631      	mov	r1, r6
    673e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    6742:	f000 fc23 	bl	6f8c <CC_PalMemCopyPlat>
    6746:	6e22      	ldr	r2, [r4, #96]	; 0x60
    6748:	2000      	movs	r0, #0
    674a:	442a      	add	r2, r5
    674c:	6622      	str	r2, [r4, #96]	; 0x60
    674e:	e7c5      	b.n	66dc <mbedtls_sha_update_internal+0x3c>
    6750:	2001      	movs	r0, #1
    6752:	4770      	bx	lr
    6754:	f104 0364 	add.w	r3, r4, #100	; 0x64
    6758:	4418      	add	r0, r3
    675a:	463a      	mov	r2, r7
    675c:	f000 fc16 	bl	6f8c <CC_PalMemCopyPlat>
    6760:	e9d4 3017 	ldrd	r3, r0, [r4, #92]	; 0x5c
    6764:	4438      	add	r0, r7
    6766:	443e      	add	r6, r7
    6768:	1bed      	subs	r5, r5, r7
    676a:	6620      	str	r0, [r4, #96]	; 0x60
    676c:	e7ad      	b.n	66ca <mbedtls_sha_update_internal+0x2a>
    676e:	4620      	mov	r0, r4
    6770:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    6772:	a902      	add	r1, sp, #8
    6774:	f000 fd48 	bl	7208 <ProcessHashDrv>
    6778:	2800      	cmp	r0, #0
    677a:	d1c4      	bne.n	6706 <mbedtls_sha_update_internal+0x66>
    677c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    677e:	6620      	str	r0, [r4, #96]	; 0x60
    6780:	e7a5      	b.n	66ce <mbedtls_sha_update_internal+0x2e>
    6782:	bf00      	nop

00006784 <block_cipher_df>:
    6784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6788:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
    678c:	b0af      	sub	sp, #188	; 0xbc
    678e:	f200 812c 	bhi.w	69ea <block_cipher_df+0x266>
    6792:	f8df 926c 	ldr.w	r9, [pc, #620]	; 6a00 <block_cipher_df+0x27c>
    6796:	4690      	mov	r8, r2
    6798:	460c      	mov	r4, r1
    679a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    679e:	2100      	movs	r1, #0
    67a0:	4682      	mov	sl, r0
    67a2:	4648      	mov	r0, r9
    67a4:	f001 fee5 	bl	8572 <memset>
    67a8:	a811      	add	r0, sp, #68	; 0x44
    67aa:	f000 fe97 	bl	74dc <cc_mbedtls_aes_init>
    67ae:	2200      	movs	r2, #0
    67b0:	2320      	movs	r3, #32
    67b2:	4621      	mov	r1, r4
    67b4:	f8a9 2010 	strh.w	r2, [r9, #16]
    67b8:	fa98 f498 	rev16.w	r4, r8
    67bc:	4642      	mov	r2, r8
    67be:	f109 0018 	add.w	r0, r9, #24
    67c2:	f8a9 4012 	strh.w	r4, [r9, #18]
    67c6:	f889 3017 	strb.w	r3, [r9, #23]
    67ca:	f001 fec7 	bl	855c <memcpy>
    67ce:	2280      	movs	r2, #128	; 0x80
    67d0:	4b87      	ldr	r3, [pc, #540]	; (69f0 <block_cipher_df+0x26c>)
    67d2:	4988      	ldr	r1, [pc, #544]	; (69f4 <block_cipher_df+0x270>)
    67d4:	4c88      	ldr	r4, [pc, #544]	; (69f8 <block_cipher_df+0x274>)
    67d6:	eb09 0008 	add.w	r0, r9, r8
    67da:	e9cd 4102 	strd	r4, r1, [sp, #8]
    67de:	7602      	strb	r2, [r0, #24]
    67e0:	9301      	str	r3, [sp, #4]
    67e2:	a811      	add	r0, sp, #68	; 0x44
    67e4:	f103 330c 	add.w	r3, r3, #202116108	; 0xc0c0c0c
    67e8:	a901      	add	r1, sp, #4
    67ea:	9304      	str	r3, [sp, #16]
    67ec:	f000 fe8c 	bl	7508 <cc_mbedtls_aes_setkey_enc>
    67f0:	4607      	mov	r7, r0
    67f2:	2800      	cmp	r0, #0
    67f4:	f040 80d8 	bne.w	69a8 <block_cipher_df+0x224>
    67f8:	f108 0819 	add.w	r8, r8, #25
    67fc:	ae05      	add	r6, sp, #20
    67fe:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    6802:	2210      	movs	r2, #16
    6804:	2100      	movs	r1, #0
    6806:	4630      	mov	r0, r6
    6808:	f001 feb3 	bl	8572 <memset>
    680c:	4645      	mov	r5, r8
    680e:	4c7b      	ldr	r4, [pc, #492]	; (69fc <block_cipher_df+0x278>)
    6810:	f89d 2014 	ldrb.w	r2, [sp, #20]
    6814:	f814 3c10 	ldrb.w	r3, [r4, #-16]
    6818:	f89d c015 	ldrb.w	ip, [sp, #21]
    681c:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
    6820:	f89d 0016 	ldrb.w	r0, [sp, #22]
    6824:	4053      	eors	r3, r2
    6826:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
    682a:	ea8c 0c01 	eor.w	ip, ip, r1
    682e:	4050      	eors	r0, r2
    6830:	f89d 1017 	ldrb.w	r1, [sp, #23]
    6834:	f814 2c0d 	ldrb.w	r2, [r4, #-13]
    6838:	f89d e018 	ldrb.w	lr, [sp, #24]
    683c:	4051      	eors	r1, r2
    683e:	f814 2c0c 	ldrb.w	r2, [r4, #-12]
    6842:	f88d 3014 	strb.w	r3, [sp, #20]
    6846:	ea8e 0202 	eor.w	r2, lr, r2
    684a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    684e:	f89d e019 	ldrb.w	lr, [sp, #25]
    6852:	f88d c015 	strb.w	ip, [sp, #21]
    6856:	ea8e 0303 	eor.w	r3, lr, r3
    685a:	f814 cc0a 	ldrb.w	ip, [r4, #-10]
    685e:	f89d e01a 	ldrb.w	lr, [sp, #26]
    6862:	f88d 0016 	strb.w	r0, [sp, #22]
    6866:	ea8e 0c0c 	eor.w	ip, lr, ip
    686a:	f814 0c09 	ldrb.w	r0, [r4, #-9]
    686e:	f89d e01b 	ldrb.w	lr, [sp, #27]
    6872:	f88d 1017 	strb.w	r1, [sp, #23]
    6876:	ea8e 0000 	eor.w	r0, lr, r0
    687a:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    687e:	f89d e01c 	ldrb.w	lr, [sp, #28]
    6882:	f88d 2018 	strb.w	r2, [sp, #24]
    6886:	ea8e 0101 	eor.w	r1, lr, r1
    688a:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    688e:	f89d e01d 	ldrb.w	lr, [sp, #29]
    6892:	f88d 3019 	strb.w	r3, [sp, #25]
    6896:	ea8e 0202 	eor.w	r2, lr, r2
    689a:	f89d 301e 	ldrb.w	r3, [sp, #30]
    689e:	f814 ec06 	ldrb.w	lr, [r4, #-6]
    68a2:	f88d c01a 	strb.w	ip, [sp, #26]
    68a6:	ea83 030e 	eor.w	r3, r3, lr
    68aa:	f88d 001b 	strb.w	r0, [sp, #27]
    68ae:	f88d 101c 	strb.w	r1, [sp, #28]
    68b2:	f88d 201d 	strb.w	r2, [sp, #29]
    68b6:	f88d 301e 	strb.w	r3, [sp, #30]
    68ba:	f89d 101f 	ldrb.w	r1, [sp, #31]
    68be:	f814 3c05 	ldrb.w	r3, [r4, #-5]
    68c2:	f89d c020 	ldrb.w	ip, [sp, #32]
    68c6:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
    68ca:	404b      	eors	r3, r1
    68cc:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    68d0:	f814 1c03 	ldrb.w	r1, [r4, #-3]
    68d4:	ea8c 0202 	eor.w	r2, ip, r2
    68d8:	4041      	eors	r1, r0
    68da:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
    68de:	f814 0c02 	ldrb.w	r0, [r4, #-2]
    68e2:	f89d e023 	ldrb.w	lr, [sp, #35]	; 0x23
    68e6:	ea8c 0000 	eor.w	r0, ip, r0
    68ea:	f814 cc01 	ldrb.w	ip, [r4, #-1]
    68ee:	f88d 301f 	strb.w	r3, [sp, #31]
    68f2:	ea8e 0c0c 	eor.w	ip, lr, ip
    68f6:	f88d 2020 	strb.w	r2, [sp, #32]
    68fa:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    68fe:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    6902:	4633      	mov	r3, r6
    6904:	4632      	mov	r2, r6
    6906:	2101      	movs	r1, #1
    6908:	a811      	add	r0, sp, #68	; 0x44
    690a:	f88d c023 	strb.w	ip, [sp, #35]	; 0x23
    690e:	f000 fe15 	bl	753c <cc_mbedtls_aes_crypt_ecb>
    6912:	2d10      	cmp	r5, #16
    6914:	bf94      	ite	ls
    6916:	1b6d      	subls	r5, r5, r5
    6918:	3d10      	subhi	r5, #16
    691a:	2800      	cmp	r0, #0
    691c:	d163      	bne.n	69e6 <block_cipher_df+0x262>
    691e:	3410      	adds	r4, #16
    6920:	2d00      	cmp	r5, #0
    6922:	f47f af75 	bne.w	6810 <block_cipher_df+0x8c>
    6926:	eb0b 0007 	add.w	r0, fp, r7
    692a:	2210      	movs	r2, #16
    692c:	4631      	mov	r1, r6
    692e:	f001 fe15 	bl	855c <memcpy>
    6932:	f899 3003 	ldrb.w	r3, [r9, #3]
    6936:	3710      	adds	r7, #16
    6938:	3301      	adds	r3, #1
    693a:	2f20      	cmp	r7, #32
    693c:	f889 3003 	strb.w	r3, [r9, #3]
    6940:	f47f af5f 	bne.w	6802 <block_cipher_df+0x7e>
    6944:	2280      	movs	r2, #128	; 0x80
    6946:	4659      	mov	r1, fp
    6948:	a811      	add	r0, sp, #68	; 0x44
    694a:	f000 fddd 	bl	7508 <cc_mbedtls_aes_setkey_enc>
    694e:	4607      	mov	r7, r0
    6950:	bb68      	cbnz	r0, 69ae <block_cipher_df+0x22a>
    6952:	4654      	mov	r4, sl
    6954:	f10a 0520 	add.w	r5, sl, #32
    6958:	ab0d      	add	r3, sp, #52	; 0x34
    695a:	461a      	mov	r2, r3
    695c:	2101      	movs	r1, #1
    695e:	a811      	add	r0, sp, #68	; 0x44
    6960:	f000 fdec 	bl	753c <cc_mbedtls_aes_crypt_ecb>
    6964:	4607      	mov	r7, r0
    6966:	bb10      	cbnz	r0, 69ae <block_cipher_df+0x22a>
    6968:	2210      	movs	r2, #16
    696a:	4620      	mov	r0, r4
    696c:	a90d      	add	r1, sp, #52	; 0x34
    696e:	4414      	add	r4, r2
    6970:	f001 fdf4 	bl	855c <memcpy>
    6974:	42ac      	cmp	r4, r5
    6976:	d1ef      	bne.n	6958 <block_cipher_df+0x1d4>
    6978:	a811      	add	r0, sp, #68	; 0x44
    697a:	f000 fdbf 	bl	74fc <cc_mbedtls_aes_free>
    697e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    6982:	481f      	ldr	r0, [pc, #124]	; (6a00 <block_cipher_df+0x27c>)
    6984:	f7ff fd64 	bl	6450 <mbedtls_platform_zeroize>
    6988:	4658      	mov	r0, fp
    698a:	2120      	movs	r1, #32
    698c:	f7ff fd60 	bl	6450 <mbedtls_platform_zeroize>
    6990:	a801      	add	r0, sp, #4
    6992:	2110      	movs	r1, #16
    6994:	f7ff fd5c 	bl	6450 <mbedtls_platform_zeroize>
    6998:	4630      	mov	r0, r6
    699a:	2110      	movs	r1, #16
    699c:	f7ff fd58 	bl	6450 <mbedtls_platform_zeroize>
    69a0:	4638      	mov	r0, r7
    69a2:	b02f      	add	sp, #188	; 0xbc
    69a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    69a8:	ae05      	add	r6, sp, #20
    69aa:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    69ae:	a811      	add	r0, sp, #68	; 0x44
    69b0:	f000 fda4 	bl	74fc <cc_mbedtls_aes_free>
    69b4:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    69b8:	4811      	ldr	r0, [pc, #68]	; (6a00 <block_cipher_df+0x27c>)
    69ba:	f7ff fd49 	bl	6450 <mbedtls_platform_zeroize>
    69be:	4658      	mov	r0, fp
    69c0:	2120      	movs	r1, #32
    69c2:	f7ff fd45 	bl	6450 <mbedtls_platform_zeroize>
    69c6:	2110      	movs	r1, #16
    69c8:	a801      	add	r0, sp, #4
    69ca:	f7ff fd41 	bl	6450 <mbedtls_platform_zeroize>
    69ce:	4630      	mov	r0, r6
    69d0:	2110      	movs	r1, #16
    69d2:	f7ff fd3d 	bl	6450 <mbedtls_platform_zeroize>
    69d6:	4650      	mov	r0, sl
    69d8:	2120      	movs	r1, #32
    69da:	f7ff fd39 	bl	6450 <mbedtls_platform_zeroize>
    69de:	4638      	mov	r0, r7
    69e0:	b02f      	add	sp, #188	; 0xbc
    69e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    69e6:	4607      	mov	r7, r0
    69e8:	e7e1      	b.n	69ae <block_cipher_df+0x22a>
    69ea:	f06f 0737 	mvn.w	r7, #55	; 0x37
    69ee:	e7f6      	b.n	69de <block_cipher_df+0x25a>
    69f0:	03020100 	.word	0x03020100
    69f4:	0b0a0908 	.word	0x0b0a0908
    69f8:	07060504 	.word	0x07060504
    69fc:	20000f20 	.word	0x20000f20
    6a00:	20000f10 	.word	0x20000f10

00006a04 <ctr_drbg_update_internal>:
    6a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a08:	2220      	movs	r2, #32
    6a0a:	4604      	mov	r4, r0
    6a0c:	b088      	sub	sp, #32
    6a0e:	460d      	mov	r5, r1
    6a10:	4668      	mov	r0, sp
    6a12:	2100      	movs	r1, #0
    6a14:	18a6      	adds	r6, r4, r2
    6a16:	466f      	mov	r7, sp
    6a18:	f001 fdab 	bl	8572 <memset>
    6a1c:	7be2      	ldrb	r2, [r4, #15]
    6a1e:	3201      	adds	r2, #1
    6a20:	b2d2      	uxtb	r2, r2
    6a22:	73e2      	strb	r2, [r4, #15]
    6a24:	2a00      	cmp	r2, #0
    6a26:	d14d      	bne.n	6ac4 <ctr_drbg_update_internal+0xc0>
    6a28:	7ba2      	ldrb	r2, [r4, #14]
    6a2a:	3201      	adds	r2, #1
    6a2c:	b2d2      	uxtb	r2, r2
    6a2e:	73a2      	strb	r2, [r4, #14]
    6a30:	2a00      	cmp	r2, #0
    6a32:	d147      	bne.n	6ac4 <ctr_drbg_update_internal+0xc0>
    6a34:	7b63      	ldrb	r3, [r4, #13]
    6a36:	3301      	adds	r3, #1
    6a38:	b2db      	uxtb	r3, r3
    6a3a:	7363      	strb	r3, [r4, #13]
    6a3c:	2b00      	cmp	r3, #0
    6a3e:	d141      	bne.n	6ac4 <ctr_drbg_update_internal+0xc0>
    6a40:	7b23      	ldrb	r3, [r4, #12]
    6a42:	3301      	adds	r3, #1
    6a44:	b2db      	uxtb	r3, r3
    6a46:	7323      	strb	r3, [r4, #12]
    6a48:	2b00      	cmp	r3, #0
    6a4a:	d13b      	bne.n	6ac4 <ctr_drbg_update_internal+0xc0>
    6a4c:	7ae3      	ldrb	r3, [r4, #11]
    6a4e:	3301      	adds	r3, #1
    6a50:	b2db      	uxtb	r3, r3
    6a52:	72e3      	strb	r3, [r4, #11]
    6a54:	2b00      	cmp	r3, #0
    6a56:	d135      	bne.n	6ac4 <ctr_drbg_update_internal+0xc0>
    6a58:	7aa3      	ldrb	r3, [r4, #10]
    6a5a:	3301      	adds	r3, #1
    6a5c:	b2db      	uxtb	r3, r3
    6a5e:	72a3      	strb	r3, [r4, #10]
    6a60:	2b00      	cmp	r3, #0
    6a62:	d12f      	bne.n	6ac4 <ctr_drbg_update_internal+0xc0>
    6a64:	7a63      	ldrb	r3, [r4, #9]
    6a66:	3301      	adds	r3, #1
    6a68:	b2db      	uxtb	r3, r3
    6a6a:	7263      	strb	r3, [r4, #9]
    6a6c:	bb53      	cbnz	r3, 6ac4 <ctr_drbg_update_internal+0xc0>
    6a6e:	7a23      	ldrb	r3, [r4, #8]
    6a70:	3301      	adds	r3, #1
    6a72:	b2db      	uxtb	r3, r3
    6a74:	7223      	strb	r3, [r4, #8]
    6a76:	bb2b      	cbnz	r3, 6ac4 <ctr_drbg_update_internal+0xc0>
    6a78:	79e3      	ldrb	r3, [r4, #7]
    6a7a:	3301      	adds	r3, #1
    6a7c:	b2db      	uxtb	r3, r3
    6a7e:	71e3      	strb	r3, [r4, #7]
    6a80:	bb03      	cbnz	r3, 6ac4 <ctr_drbg_update_internal+0xc0>
    6a82:	79a3      	ldrb	r3, [r4, #6]
    6a84:	3301      	adds	r3, #1
    6a86:	b2db      	uxtb	r3, r3
    6a88:	71a3      	strb	r3, [r4, #6]
    6a8a:	b9db      	cbnz	r3, 6ac4 <ctr_drbg_update_internal+0xc0>
    6a8c:	7963      	ldrb	r3, [r4, #5]
    6a8e:	3301      	adds	r3, #1
    6a90:	b2db      	uxtb	r3, r3
    6a92:	7163      	strb	r3, [r4, #5]
    6a94:	b9b3      	cbnz	r3, 6ac4 <ctr_drbg_update_internal+0xc0>
    6a96:	7923      	ldrb	r3, [r4, #4]
    6a98:	3301      	adds	r3, #1
    6a9a:	b2db      	uxtb	r3, r3
    6a9c:	7123      	strb	r3, [r4, #4]
    6a9e:	b98b      	cbnz	r3, 6ac4 <ctr_drbg_update_internal+0xc0>
    6aa0:	78e3      	ldrb	r3, [r4, #3]
    6aa2:	3301      	adds	r3, #1
    6aa4:	b2db      	uxtb	r3, r3
    6aa6:	70e3      	strb	r3, [r4, #3]
    6aa8:	b963      	cbnz	r3, 6ac4 <ctr_drbg_update_internal+0xc0>
    6aaa:	78a3      	ldrb	r3, [r4, #2]
    6aac:	3301      	adds	r3, #1
    6aae:	b2db      	uxtb	r3, r3
    6ab0:	70a3      	strb	r3, [r4, #2]
    6ab2:	b93b      	cbnz	r3, 6ac4 <ctr_drbg_update_internal+0xc0>
    6ab4:	7863      	ldrb	r3, [r4, #1]
    6ab6:	3301      	adds	r3, #1
    6ab8:	b2db      	uxtb	r3, r3
    6aba:	7063      	strb	r3, [r4, #1]
    6abc:	b913      	cbnz	r3, 6ac4 <ctr_drbg_update_internal+0xc0>
    6abe:	7823      	ldrb	r3, [r4, #0]
    6ac0:	3301      	adds	r3, #1
    6ac2:	7023      	strb	r3, [r4, #0]
    6ac4:	463b      	mov	r3, r7
    6ac6:	4622      	mov	r2, r4
    6ac8:	2101      	movs	r1, #1
    6aca:	4630      	mov	r0, r6
    6acc:	f000 fd36 	bl	753c <cc_mbedtls_aes_crypt_ecb>
    6ad0:	4680      	mov	r8, r0
    6ad2:	2800      	cmp	r0, #0
    6ad4:	d12a      	bne.n	6b2c <ctr_drbg_update_internal+0x128>
    6ad6:	3710      	adds	r7, #16
    6ad8:	ab08      	add	r3, sp, #32
    6ada:	429f      	cmp	r7, r3
    6adc:	d19e      	bne.n	6a1c <ctr_drbg_update_internal+0x18>
    6ade:	9900      	ldr	r1, [sp, #0]
    6ae0:	682b      	ldr	r3, [r5, #0]
    6ae2:	686a      	ldr	r2, [r5, #4]
    6ae4:	404b      	eors	r3, r1
    6ae6:	9901      	ldr	r1, [sp, #4]
    6ae8:	4630      	mov	r0, r6
    6aea:	404a      	eors	r2, r1
    6aec:	68ae      	ldr	r6, [r5, #8]
    6aee:	9902      	ldr	r1, [sp, #8]
    6af0:	9300      	str	r3, [sp, #0]
    6af2:	4071      	eors	r1, r6
    6af4:	68eb      	ldr	r3, [r5, #12]
    6af6:	9e03      	ldr	r6, [sp, #12]
    6af8:	9201      	str	r2, [sp, #4]
    6afa:	4073      	eors	r3, r6
    6afc:	692a      	ldr	r2, [r5, #16]
    6afe:	9e04      	ldr	r6, [sp, #16]
    6b00:	9102      	str	r1, [sp, #8]
    6b02:	4056      	eors	r6, r2
    6b04:	9905      	ldr	r1, [sp, #20]
    6b06:	696a      	ldr	r2, [r5, #20]
    6b08:	9303      	str	r3, [sp, #12]
    6b0a:	4051      	eors	r1, r2
    6b0c:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
    6b10:	9d06      	ldr	r5, [sp, #24]
    6b12:	9105      	str	r1, [sp, #20]
    6b14:	4055      	eors	r5, r2
    6b16:	9a07      	ldr	r2, [sp, #28]
    6b18:	4669      	mov	r1, sp
    6b1a:	4053      	eors	r3, r2
    6b1c:	2280      	movs	r2, #128	; 0x80
    6b1e:	e9cd 5306 	strd	r5, r3, [sp, #24]
    6b22:	9604      	str	r6, [sp, #16]
    6b24:	f000 fcf0 	bl	7508 <cc_mbedtls_aes_setkey_enc>
    6b28:	4680      	mov	r8, r0
    6b2a:	b138      	cbz	r0, 6b3c <ctr_drbg_update_internal+0x138>
    6b2c:	4668      	mov	r0, sp
    6b2e:	2120      	movs	r1, #32
    6b30:	f7ff fc8e 	bl	6450 <mbedtls_platform_zeroize>
    6b34:	4640      	mov	r0, r8
    6b36:	b008      	add	sp, #32
    6b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b3c:	2210      	movs	r2, #16
    6b3e:	4620      	mov	r0, r4
    6b40:	eb0d 0102 	add.w	r1, sp, r2
    6b44:	f001 fd0a 	bl	855c <memcpy>
    6b48:	e7f0      	b.n	6b2c <ctr_drbg_update_internal+0x128>
    6b4a:	bf00      	nop

00006b4c <mbedtls_ctr_drbg_reseed_internal>:
    6b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6b50:	4604      	mov	r4, r0
    6b52:	6980      	ldr	r0, [r0, #24]
    6b54:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
    6b58:	d853      	bhi.n	6c02 <mbedtls_ctr_drbg_reseed_internal+0xb6>
    6b5a:	461d      	mov	r5, r3
    6b5c:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
    6b60:	42ab      	cmp	r3, r5
    6b62:	d34e      	bcc.n	6c02 <mbedtls_ctr_drbg_reseed_internal+0xb6>
    6b64:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
    6b68:	1a18      	subs	r0, r3, r0
    6b6a:	4290      	cmp	r0, r2
    6b6c:	4616      	mov	r6, r2
    6b6e:	d348      	bcc.n	6c02 <mbedtls_ctr_drbg_reseed_internal+0xb6>
    6b70:	f8df 809c 	ldr.w	r8, [pc, #156]	; 6c10 <mbedtls_ctr_drbg_reseed_internal+0xc4>
    6b74:	f44f 72c0 	mov.w	r2, #384	; 0x180
    6b78:	460f      	mov	r7, r1
    6b7a:	4640      	mov	r0, r8
    6b7c:	2100      	movs	r1, #0
    6b7e:	f001 fcf8 	bl	8572 <memset>
    6b82:	4641      	mov	r1, r8
    6b84:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    6b88:	69a2      	ldr	r2, [r4, #24]
    6b8a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    6b8e:	4798      	blx	r3
    6b90:	2800      	cmp	r0, #0
    6b92:	d139      	bne.n	6c08 <mbedtls_ctr_drbg_reseed_internal+0xbc>
    6b94:	f8d4 9018 	ldr.w	r9, [r4, #24]
    6b98:	b145      	cbz	r5, 6bac <mbedtls_ctr_drbg_reseed_internal+0x60>
    6b9a:	462a      	mov	r2, r5
    6b9c:	4641      	mov	r1, r8
    6b9e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    6ba2:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    6ba6:	4798      	blx	r3
    6ba8:	bb70      	cbnz	r0, 6c08 <mbedtls_ctr_drbg_reseed_internal+0xbc>
    6baa:	44a9      	add	r9, r5
    6bac:	b107      	cbz	r7, 6bb0 <mbedtls_ctr_drbg_reseed_internal+0x64>
    6bae:	b9c6      	cbnz	r6, 6be2 <mbedtls_ctr_drbg_reseed_internal+0x96>
    6bb0:	4917      	ldr	r1, [pc, #92]	; (6c10 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
    6bb2:	464a      	mov	r2, r9
    6bb4:	4608      	mov	r0, r1
    6bb6:	f7ff fde5 	bl	6784 <block_cipher_df>
    6bba:	4605      	mov	r5, r0
    6bbc:	b138      	cbz	r0, 6bce <mbedtls_ctr_drbg_reseed_internal+0x82>
    6bbe:	f44f 71c0 	mov.w	r1, #384	; 0x180
    6bc2:	4813      	ldr	r0, [pc, #76]	; (6c10 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
    6bc4:	f7ff fc44 	bl	6450 <mbedtls_platform_zeroize>
    6bc8:	4628      	mov	r0, r5
    6bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6bce:	4620      	mov	r0, r4
    6bd0:	490f      	ldr	r1, [pc, #60]	; (6c10 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
    6bd2:	f7ff ff17 	bl	6a04 <ctr_drbg_update_internal>
    6bd6:	4605      	mov	r5, r0
    6bd8:	2800      	cmp	r0, #0
    6bda:	d1f0      	bne.n	6bbe <mbedtls_ctr_drbg_reseed_internal+0x72>
    6bdc:	2301      	movs	r3, #1
    6bde:	6123      	str	r3, [r4, #16]
    6be0:	e7ed      	b.n	6bbe <mbedtls_ctr_drbg_reseed_internal+0x72>
    6be2:	4639      	mov	r1, r7
    6be4:	4632      	mov	r2, r6
    6be6:	eb08 0009 	add.w	r0, r8, r9
    6bea:	f001 fcb7 	bl	855c <memcpy>
    6bee:	4908      	ldr	r1, [pc, #32]	; (6c10 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
    6bf0:	44b1      	add	r9, r6
    6bf2:	464a      	mov	r2, r9
    6bf4:	4608      	mov	r0, r1
    6bf6:	f7ff fdc5 	bl	6784 <block_cipher_df>
    6bfa:	4605      	mov	r5, r0
    6bfc:	2800      	cmp	r0, #0
    6bfe:	d1de      	bne.n	6bbe <mbedtls_ctr_drbg_reseed_internal+0x72>
    6c00:	e7e5      	b.n	6bce <mbedtls_ctr_drbg_reseed_internal+0x82>
    6c02:	f06f 0537 	mvn.w	r5, #55	; 0x37
    6c06:	e7df      	b.n	6bc8 <mbedtls_ctr_drbg_reseed_internal+0x7c>
    6c08:	f06f 0533 	mvn.w	r5, #51	; 0x33
    6c0c:	e7dc      	b.n	6bc8 <mbedtls_ctr_drbg_reseed_internal+0x7c>
    6c0e:	bf00      	nop
    6c10:	200010b0 	.word	0x200010b0

00006c14 <cc_mbedtls_ctr_drbg_init>:
    6c14:	b510      	push	{r4, lr}
    6c16:	22a4      	movs	r2, #164	; 0xa4
    6c18:	2100      	movs	r1, #0
    6c1a:	4604      	mov	r4, r0
    6c1c:	f001 fca9 	bl	8572 <memset>
    6c20:	f04f 32ff 	mov.w	r2, #4294967295
    6c24:	4b03      	ldr	r3, [pc, #12]	; (6c34 <cc_mbedtls_ctr_drbg_init+0x20>)
    6c26:	6122      	str	r2, [r4, #16]
    6c28:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    6c2c:	681b      	ldr	r3, [r3, #0]
    6c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6c32:	4718      	bx	r3
    6c34:	200000c4 	.word	0x200000c4

00006c38 <cc_mbedtls_ctr_drbg_seed>:
    6c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6c3c:	4605      	mov	r5, r0
    6c3e:	b085      	sub	sp, #20
    6c40:	460f      	mov	r7, r1
    6c42:	4616      	mov	r6, r2
    6c44:	4668      	mov	r0, sp
    6c46:	2210      	movs	r2, #16
    6c48:	2100      	movs	r1, #0
    6c4a:	4699      	mov	r9, r3
    6c4c:	f001 fc91 	bl	8572 <memset>
    6c50:	4b1f      	ldr	r3, [pc, #124]	; (6cd0 <cc_mbedtls_ctr_drbg_seed+0x98>)
    6c52:	f105 089c 	add.w	r8, r5, #156	; 0x9c
    6c56:	4640      	mov	r0, r8
    6c58:	681b      	ldr	r3, [r3, #0]
    6c5a:	4798      	blx	r3
    6c5c:	b120      	cbz	r0, 6c68 <cc_mbedtls_ctr_drbg_seed+0x30>
    6c5e:	4604      	mov	r4, r0
    6c60:	4620      	mov	r0, r4
    6c62:	b005      	add	sp, #20
    6c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6c68:	f105 0420 	add.w	r4, r5, #32
    6c6c:	4620      	mov	r0, r4
    6c6e:	f000 fc35 	bl	74dc <cc_mbedtls_aes_init>
    6c72:	69aa      	ldr	r2, [r5, #24]
    6c74:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
    6c78:	bb02      	cbnz	r2, 6cbc <cc_mbedtls_ctr_drbg_seed+0x84>
    6c7a:	2220      	movs	r2, #32
    6c7c:	692e      	ldr	r6, [r5, #16]
    6c7e:	61aa      	str	r2, [r5, #24]
    6c80:	2e00      	cmp	r6, #0
    6c82:	db23      	blt.n	6ccc <cc_mbedtls_ctr_drbg_seed+0x94>
    6c84:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    6c88:	4620      	mov	r0, r4
    6c8a:	4669      	mov	r1, sp
    6c8c:	2280      	movs	r2, #128	; 0x80
    6c8e:	61eb      	str	r3, [r5, #28]
    6c90:	f000 fc3a 	bl	7508 <cc_mbedtls_aes_setkey_enc>
    6c94:	4604      	mov	r4, r0
    6c96:	b930      	cbnz	r0, 6ca6 <cc_mbedtls_ctr_drbg_seed+0x6e>
    6c98:	4633      	mov	r3, r6
    6c9a:	4649      	mov	r1, r9
    6c9c:	4628      	mov	r0, r5
    6c9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6ca0:	f7ff ff54 	bl	6b4c <mbedtls_ctr_drbg_reseed_internal>
    6ca4:	4604      	mov	r4, r0
    6ca6:	4b0b      	ldr	r3, [pc, #44]	; (6cd4 <cc_mbedtls_ctr_drbg_seed+0x9c>)
    6ca8:	4640      	mov	r0, r8
    6caa:	681b      	ldr	r3, [r3, #0]
    6cac:	4798      	blx	r3
    6cae:	2800      	cmp	r0, #0
    6cb0:	bf18      	it	ne
    6cb2:	4604      	movne	r4, r0
    6cb4:	4620      	mov	r0, r4
    6cb6:	b005      	add	sp, #20
    6cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6cbc:	692e      	ldr	r6, [r5, #16]
    6cbe:	2e00      	cmp	r6, #0
    6cc0:	dae0      	bge.n	6c84 <cc_mbedtls_ctr_drbg_seed+0x4c>
    6cc2:	2a17      	cmp	r2, #23
    6cc4:	d802      	bhi.n	6ccc <cc_mbedtls_ctr_drbg_seed+0x94>
    6cc6:	1c53      	adds	r3, r2, #1
    6cc8:	085e      	lsrs	r6, r3, #1
    6cca:	e7db      	b.n	6c84 <cc_mbedtls_ctr_drbg_seed+0x4c>
    6ccc:	2600      	movs	r6, #0
    6cce:	e7d9      	b.n	6c84 <cc_mbedtls_ctr_drbg_seed+0x4c>
    6cd0:	200000c8 	.word	0x200000c8
    6cd4:	200000cc 	.word	0x200000cc

00006cd8 <cc_mbedtls_ctr_drbg_random_with_add>:
    6cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6cdc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    6ce0:	b08d      	sub	sp, #52	; 0x34
    6ce2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
    6ce6:	f200 80e4 	bhi.w	6eb2 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
    6cea:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
    6cee:	f200 80dd 	bhi.w	6eac <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
    6cf2:	4604      	mov	r4, r0
    6cf4:	4615      	mov	r5, r2
    6cf6:	460e      	mov	r6, r1
    6cf8:	2220      	movs	r2, #32
    6cfa:	2100      	movs	r1, #0
    6cfc:	a804      	add	r0, sp, #16
    6cfe:	461f      	mov	r7, r3
    6d00:	f001 fc37 	bl	8572 <memset>
    6d04:	4b6c      	ldr	r3, [pc, #432]	; (6eb8 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
    6d06:	f104 099c 	add.w	r9, r4, #156	; 0x9c
    6d0a:	4648      	mov	r0, r9
    6d0c:	681b      	ldr	r3, [r3, #0]
    6d0e:	4798      	blx	r3
    6d10:	4683      	mov	fp, r0
    6d12:	2800      	cmp	r0, #0
    6d14:	f040 8093 	bne.w	6e3e <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    6d18:	6922      	ldr	r2, [r4, #16]
    6d1a:	69e3      	ldr	r3, [r4, #28]
    6d1c:	429a      	cmp	r2, r3
    6d1e:	f300 8092 	bgt.w	6e46 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
    6d22:	6963      	ldr	r3, [r4, #20]
    6d24:	2b00      	cmp	r3, #0
    6d26:	f040 808e 	bne.w	6e46 <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
    6d2a:	f1b8 0f00 	cmp.w	r8, #0
    6d2e:	f040 80a9 	bne.w	6e84 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
    6d32:	f8df a188 	ldr.w	sl, [pc, #392]	; 6ebc <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
    6d36:	466f      	mov	r7, sp
    6d38:	2d00      	cmp	r5, #0
    6d3a:	f000 8098 	beq.w	6e6e <cc_mbedtls_ctr_drbg_random_with_add+0x196>
    6d3e:	466f      	mov	r7, sp
    6d40:	f104 0820 	add.w	r8, r4, #32
    6d44:	e00e      	b.n	6d64 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
    6d46:	2d10      	cmp	r5, #16
    6d48:	46ab      	mov	fp, r5
    6d4a:	bf28      	it	cs
    6d4c:	f04f 0b10 	movcs.w	fp, #16
    6d50:	4630      	mov	r0, r6
    6d52:	4639      	mov	r1, r7
    6d54:	465a      	mov	r2, fp
    6d56:	f001 fc01 	bl	855c <memcpy>
    6d5a:	ebb5 050b 	subs.w	r5, r5, fp
    6d5e:	445e      	add	r6, fp
    6d60:	f000 8085 	beq.w	6e6e <cc_mbedtls_ctr_drbg_random_with_add+0x196>
    6d64:	7be3      	ldrb	r3, [r4, #15]
    6d66:	3301      	adds	r3, #1
    6d68:	b2db      	uxtb	r3, r3
    6d6a:	73e3      	strb	r3, [r4, #15]
    6d6c:	2b00      	cmp	r3, #0
    6d6e:	d14d      	bne.n	6e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    6d70:	7ba3      	ldrb	r3, [r4, #14]
    6d72:	3301      	adds	r3, #1
    6d74:	b2db      	uxtb	r3, r3
    6d76:	73a3      	strb	r3, [r4, #14]
    6d78:	2b00      	cmp	r3, #0
    6d7a:	d147      	bne.n	6e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    6d7c:	7b63      	ldrb	r3, [r4, #13]
    6d7e:	3301      	adds	r3, #1
    6d80:	b2db      	uxtb	r3, r3
    6d82:	7363      	strb	r3, [r4, #13]
    6d84:	2b00      	cmp	r3, #0
    6d86:	d141      	bne.n	6e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    6d88:	7b23      	ldrb	r3, [r4, #12]
    6d8a:	3301      	adds	r3, #1
    6d8c:	b2db      	uxtb	r3, r3
    6d8e:	7323      	strb	r3, [r4, #12]
    6d90:	2b00      	cmp	r3, #0
    6d92:	d13b      	bne.n	6e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    6d94:	7ae3      	ldrb	r3, [r4, #11]
    6d96:	3301      	adds	r3, #1
    6d98:	b2db      	uxtb	r3, r3
    6d9a:	72e3      	strb	r3, [r4, #11]
    6d9c:	2b00      	cmp	r3, #0
    6d9e:	d135      	bne.n	6e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    6da0:	7aa3      	ldrb	r3, [r4, #10]
    6da2:	3301      	adds	r3, #1
    6da4:	b2db      	uxtb	r3, r3
    6da6:	72a3      	strb	r3, [r4, #10]
    6da8:	2b00      	cmp	r3, #0
    6daa:	d12f      	bne.n	6e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    6dac:	7a63      	ldrb	r3, [r4, #9]
    6dae:	3301      	adds	r3, #1
    6db0:	b2db      	uxtb	r3, r3
    6db2:	7263      	strb	r3, [r4, #9]
    6db4:	bb53      	cbnz	r3, 6e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    6db6:	7a23      	ldrb	r3, [r4, #8]
    6db8:	3301      	adds	r3, #1
    6dba:	b2db      	uxtb	r3, r3
    6dbc:	7223      	strb	r3, [r4, #8]
    6dbe:	bb2b      	cbnz	r3, 6e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    6dc0:	79e3      	ldrb	r3, [r4, #7]
    6dc2:	3301      	adds	r3, #1
    6dc4:	b2db      	uxtb	r3, r3
    6dc6:	71e3      	strb	r3, [r4, #7]
    6dc8:	bb03      	cbnz	r3, 6e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    6dca:	79a3      	ldrb	r3, [r4, #6]
    6dcc:	3301      	adds	r3, #1
    6dce:	b2db      	uxtb	r3, r3
    6dd0:	71a3      	strb	r3, [r4, #6]
    6dd2:	b9db      	cbnz	r3, 6e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    6dd4:	7963      	ldrb	r3, [r4, #5]
    6dd6:	3301      	adds	r3, #1
    6dd8:	b2db      	uxtb	r3, r3
    6dda:	7163      	strb	r3, [r4, #5]
    6ddc:	b9b3      	cbnz	r3, 6e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    6dde:	7923      	ldrb	r3, [r4, #4]
    6de0:	3301      	adds	r3, #1
    6de2:	b2db      	uxtb	r3, r3
    6de4:	7123      	strb	r3, [r4, #4]
    6de6:	b98b      	cbnz	r3, 6e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    6de8:	78e3      	ldrb	r3, [r4, #3]
    6dea:	3301      	adds	r3, #1
    6dec:	b2db      	uxtb	r3, r3
    6dee:	70e3      	strb	r3, [r4, #3]
    6df0:	b963      	cbnz	r3, 6e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    6df2:	78a3      	ldrb	r3, [r4, #2]
    6df4:	3301      	adds	r3, #1
    6df6:	b2db      	uxtb	r3, r3
    6df8:	70a3      	strb	r3, [r4, #2]
    6dfa:	b93b      	cbnz	r3, 6e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    6dfc:	7863      	ldrb	r3, [r4, #1]
    6dfe:	3301      	adds	r3, #1
    6e00:	b2db      	uxtb	r3, r3
    6e02:	7063      	strb	r3, [r4, #1]
    6e04:	b913      	cbnz	r3, 6e0c <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    6e06:	7823      	ldrb	r3, [r4, #0]
    6e08:	3301      	adds	r3, #1
    6e0a:	7023      	strb	r3, [r4, #0]
    6e0c:	463b      	mov	r3, r7
    6e0e:	4622      	mov	r2, r4
    6e10:	2101      	movs	r1, #1
    6e12:	4640      	mov	r0, r8
    6e14:	f000 fb92 	bl	753c <cc_mbedtls_aes_crypt_ecb>
    6e18:	4683      	mov	fp, r0
    6e1a:	2800      	cmp	r0, #0
    6e1c:	d093      	beq.n	6d46 <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
    6e1e:	f8da 3000 	ldr.w	r3, [sl]
    6e22:	4648      	mov	r0, r9
    6e24:	4798      	blx	r3
    6e26:	4603      	mov	r3, r0
    6e28:	2120      	movs	r1, #32
    6e2a:	a804      	add	r0, sp, #16
    6e2c:	2b00      	cmp	r3, #0
    6e2e:	bf18      	it	ne
    6e30:	469b      	movne	fp, r3
    6e32:	f7ff fb0d 	bl	6450 <mbedtls_platform_zeroize>
    6e36:	4638      	mov	r0, r7
    6e38:	2110      	movs	r1, #16
    6e3a:	f7ff fb09 	bl	6450 <mbedtls_platform_zeroize>
    6e3e:	4658      	mov	r0, fp
    6e40:	b00d      	add	sp, #52	; 0x34
    6e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e46:	4642      	mov	r2, r8
    6e48:	4639      	mov	r1, r7
    6e4a:	2300      	movs	r3, #0
    6e4c:	4620      	mov	r0, r4
    6e4e:	f7ff fe7d 	bl	6b4c <mbedtls_ctr_drbg_reseed_internal>
    6e52:	f8df a068 	ldr.w	sl, [pc, #104]	; 6ebc <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
    6e56:	2800      	cmp	r0, #0
    6e58:	f43f af6d 	beq.w	6d36 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
    6e5c:	4648      	mov	r0, r9
    6e5e:	f8da 3000 	ldr.w	r3, [sl]
    6e62:	4798      	blx	r3
    6e64:	4683      	mov	fp, r0
    6e66:	2800      	cmp	r0, #0
    6e68:	f43f af65 	beq.w	6d36 <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
    6e6c:	e7e7      	b.n	6e3e <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    6e6e:	4620      	mov	r0, r4
    6e70:	a904      	add	r1, sp, #16
    6e72:	f7ff fdc7 	bl	6a04 <ctr_drbg_update_internal>
    6e76:	4683      	mov	fp, r0
    6e78:	2800      	cmp	r0, #0
    6e7a:	d1d0      	bne.n	6e1e <cc_mbedtls_ctr_drbg_random_with_add+0x146>
    6e7c:	6923      	ldr	r3, [r4, #16]
    6e7e:	3301      	adds	r3, #1
    6e80:	6123      	str	r3, [r4, #16]
    6e82:	e7cc      	b.n	6e1e <cc_mbedtls_ctr_drbg_random_with_add+0x146>
    6e84:	4642      	mov	r2, r8
    6e86:	4639      	mov	r1, r7
    6e88:	a804      	add	r0, sp, #16
    6e8a:	f7ff fc7b 	bl	6784 <block_cipher_df>
    6e8e:	4683      	mov	fp, r0
    6e90:	b118      	cbz	r0, 6e9a <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
    6e92:	466f      	mov	r7, sp
    6e94:	f8df a024 	ldr.w	sl, [pc, #36]	; 6ebc <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
    6e98:	e7c1      	b.n	6e1e <cc_mbedtls_ctr_drbg_random_with_add+0x146>
    6e9a:	4620      	mov	r0, r4
    6e9c:	a904      	add	r1, sp, #16
    6e9e:	f7ff fdb1 	bl	6a04 <ctr_drbg_update_internal>
    6ea2:	4683      	mov	fp, r0
    6ea4:	2800      	cmp	r0, #0
    6ea6:	f43f af44 	beq.w	6d32 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
    6eaa:	e7f2      	b.n	6e92 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
    6eac:	f06f 0b37 	mvn.w	fp, #55	; 0x37
    6eb0:	e7c5      	b.n	6e3e <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    6eb2:	f06f 0b35 	mvn.w	fp, #53	; 0x35
    6eb6:	e7c2      	b.n	6e3e <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    6eb8:	200000c8 	.word	0x200000c8
    6ebc:	200000cc 	.word	0x200000cc

00006ec0 <cc_mbedtls_sha256_ret>:
    6ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ec2:	461c      	mov	r4, r3
    6ec4:	4605      	mov	r5, r0
    6ec6:	4811      	ldr	r0, [pc, #68]	; (6f0c <cc_mbedtls_sha256_ret+0x4c>)
    6ec8:	460e      	mov	r6, r1
    6eca:	4617      	mov	r7, r2
    6ecc:	f7ff fb4c 	bl	6568 <cc_mbedtls_sha256_init>
    6ed0:	4621      	mov	r1, r4
    6ed2:	480e      	ldr	r0, [pc, #56]	; (6f0c <cc_mbedtls_sha256_ret+0x4c>)
    6ed4:	f7ff fb62 	bl	659c <cc_mbedtls_sha256_starts_ret>
    6ed8:	4604      	mov	r4, r0
    6eda:	b120      	cbz	r0, 6ee6 <cc_mbedtls_sha256_ret+0x26>
    6edc:	480b      	ldr	r0, [pc, #44]	; (6f0c <cc_mbedtls_sha256_ret+0x4c>)
    6ede:	f7ff fb57 	bl	6590 <cc_mbedtls_sha256_free>
    6ee2:	4620      	mov	r0, r4
    6ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ee6:	4632      	mov	r2, r6
    6ee8:	4629      	mov	r1, r5
    6eea:	4808      	ldr	r0, [pc, #32]	; (6f0c <cc_mbedtls_sha256_ret+0x4c>)
    6eec:	f7ff fb6a 	bl	65c4 <cc_mbedtls_sha256_update_ret>
    6ef0:	4604      	mov	r4, r0
    6ef2:	2800      	cmp	r0, #0
    6ef4:	d1f2      	bne.n	6edc <cc_mbedtls_sha256_ret+0x1c>
    6ef6:	4639      	mov	r1, r7
    6ef8:	4804      	ldr	r0, [pc, #16]	; (6f0c <cc_mbedtls_sha256_ret+0x4c>)
    6efa:	f7ff fb6b 	bl	65d4 <cc_mbedtls_sha256_finish_ret>
    6efe:	4604      	mov	r4, r0
    6f00:	4802      	ldr	r0, [pc, #8]	; (6f0c <cc_mbedtls_sha256_ret+0x4c>)
    6f02:	f7ff fb45 	bl	6590 <cc_mbedtls_sha256_free>
    6f06:	4620      	mov	r0, r4
    6f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f0a:	bf00      	nop
    6f0c:	20001230 	.word	0x20001230

00006f10 <RNG_PLAT_SetUserRngParameters>:
    6f10:	231c      	movs	r3, #28
    6f12:	b530      	push	{r4, r5, lr}
    6f14:	b083      	sub	sp, #12
    6f16:	a901      	add	r1, sp, #4
    6f18:	4604      	mov	r4, r0
    6f1a:	9301      	str	r3, [sp, #4]
    6f1c:	f000 f83e 	bl	6f9c <CC_PalTrngParamGet>
    6f20:	4605      	mov	r5, r0
    6f22:	b938      	cbnz	r0, 6f34 <RNG_PLAT_SetUserRngParameters+0x24>
    6f24:	9b01      	ldr	r3, [sp, #4]
    6f26:	2b1c      	cmp	r3, #28
    6f28:	d007      	beq.n	6f3a <RNG_PLAT_SetUserRngParameters+0x2a>
    6f2a:	4d16      	ldr	r5, [pc, #88]	; (6f84 <RNG_PLAT_SetUserRngParameters+0x74>)
    6f2c:	4620      	mov	r0, r4
    6f2e:	211c      	movs	r1, #28
    6f30:	f000 f830 	bl	6f94 <CC_PalMemSetZeroPlat>
    6f34:	4628      	mov	r0, r5
    6f36:	b003      	add	sp, #12
    6f38:	bd30      	pop	{r4, r5, pc}
    6f3a:	2101      	movs	r1, #1
    6f3c:	e9d4 3200 	ldrd	r3, r2, [r4]
    6f40:	3b00      	subs	r3, #0
    6f42:	bf18      	it	ne
    6f44:	2301      	movne	r3, #1
    6f46:	61e1      	str	r1, [r4, #28]
    6f48:	b10a      	cbz	r2, 6f4e <RNG_PLAT_SetUserRngParameters+0x3e>
    6f4a:	f043 0302 	orr.w	r3, r3, #2
    6f4e:	68a2      	ldr	r2, [r4, #8]
    6f50:	b932      	cbnz	r2, 6f60 <RNG_PLAT_SetUserRngParameters+0x50>
    6f52:	68e2      	ldr	r2, [r4, #12]
    6f54:	b942      	cbnz	r2, 6f68 <RNG_PLAT_SetUserRngParameters+0x58>
    6f56:	e9c4 3208 	strd	r3, r2, [r4, #32]
    6f5a:	b98b      	cbnz	r3, 6f80 <RNG_PLAT_SetUserRngParameters+0x70>
    6f5c:	4d0a      	ldr	r5, [pc, #40]	; (6f88 <RNG_PLAT_SetUserRngParameters+0x78>)
    6f5e:	e7e5      	b.n	6f2c <RNG_PLAT_SetUserRngParameters+0x1c>
    6f60:	68e2      	ldr	r2, [r4, #12]
    6f62:	f043 0304 	orr.w	r3, r3, #4
    6f66:	b13a      	cbz	r2, 6f78 <RNG_PLAT_SetUserRngParameters+0x68>
    6f68:	2200      	movs	r2, #0
    6f6a:	4628      	mov	r0, r5
    6f6c:	f043 0308 	orr.w	r3, r3, #8
    6f70:	e9c4 3208 	strd	r3, r2, [r4, #32]
    6f74:	b003      	add	sp, #12
    6f76:	bd30      	pop	{r4, r5, pc}
    6f78:	4615      	mov	r5, r2
    6f7a:	e9c4 3208 	strd	r3, r2, [r4, #32]
    6f7e:	e7d9      	b.n	6f34 <RNG_PLAT_SetUserRngParameters+0x24>
    6f80:	4615      	mov	r5, r2
    6f82:	e7d7      	b.n	6f34 <RNG_PLAT_SetUserRngParameters+0x24>
    6f84:	00f00c37 	.word	0x00f00c37
    6f88:	00f00c0e 	.word	0x00f00c0e

00006f8c <CC_PalMemCopyPlat>:
    6f8c:	f001 bacf 	b.w	852e <memmove>

00006f90 <CC_PalMemSetPlat>:
    6f90:	f001 baef 	b.w	8572 <memset>

00006f94 <CC_PalMemSetZeroPlat>:
    6f94:	460a      	mov	r2, r1
    6f96:	2100      	movs	r1, #0
    6f98:	f001 baeb 	b.w	8572 <memset>

00006f9c <CC_PalTrngParamGet>:
    6f9c:	2800      	cmp	r0, #0
    6f9e:	d066      	beq.n	706e <CC_PalTrngParamGet+0xd2>
    6fa0:	2900      	cmp	r1, #0
    6fa2:	d064      	beq.n	706e <CC_PalTrngParamGet+0xd2>
    6fa4:	680b      	ldr	r3, [r1, #0]
    6fa6:	2b1c      	cmp	r3, #28
    6fa8:	d161      	bne.n	706e <CC_PalTrngParamGet+0xd2>
    6faa:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6fae:	4a3b      	ldr	r2, [pc, #236]	; (709c <CC_PalTrngParamGet+0x100>)
    6fb0:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
    6fb4:	4291      	cmp	r1, r2
    6fb6:	d05c      	beq.n	7072 <CC_PalTrngParamGet+0xd6>
    6fb8:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    6fbc:	3201      	adds	r2, #1
    6fbe:	d058      	beq.n	7072 <CC_PalTrngParamGet+0xd6>
    6fc0:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    6fc4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6fc8:	6002      	str	r2, [r0, #0]
    6fca:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
    6fce:	4a34      	ldr	r2, [pc, #208]	; (70a0 <CC_PalTrngParamGet+0x104>)
    6fd0:	4291      	cmp	r1, r2
    6fd2:	d060      	beq.n	7096 <CC_PalTrngParamGet+0xfa>
    6fd4:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    6fd8:	3201      	adds	r2, #1
    6fda:	d05c      	beq.n	7096 <CC_PalTrngParamGet+0xfa>
    6fdc:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    6fe0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6fe4:	6042      	str	r2, [r0, #4]
    6fe6:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    6fea:	f512 7f94 	cmn.w	r2, #296	; 0x128
    6fee:	d04f      	beq.n	7090 <CC_PalTrngParamGet+0xf4>
    6ff0:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    6ff4:	3201      	adds	r2, #1
    6ff6:	d04b      	beq.n	7090 <CC_PalTrngParamGet+0xf4>
    6ff8:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    6ffc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7000:	6082      	str	r2, [r0, #8]
    7002:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
    7006:	4a27      	ldr	r2, [pc, #156]	; (70a4 <CC_PalTrngParamGet+0x108>)
    7008:	4291      	cmp	r1, r2
    700a:	d03e      	beq.n	708a <CC_PalTrngParamGet+0xee>
    700c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    7010:	3201      	adds	r2, #1
    7012:	d03a      	beq.n	708a <CC_PalTrngParamGet+0xee>
    7014:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    7018:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    701c:	60c2      	str	r2, [r0, #12]
    701e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    7022:	3270      	adds	r2, #112	; 0x70
    7024:	d02f      	beq.n	7086 <CC_PalTrngParamGet+0xea>
    7026:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    702a:	3201      	adds	r2, #1
    702c:	d02b      	beq.n	7086 <CC_PalTrngParamGet+0xea>
    702e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    7032:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7036:	6102      	str	r2, [r0, #16]
    7038:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    703c:	32af      	adds	r2, #175	; 0xaf
    703e:	d020      	beq.n	7082 <CC_PalTrngParamGet+0xe6>
    7040:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    7044:	3201      	adds	r2, #1
    7046:	d01c      	beq.n	7082 <CC_PalTrngParamGet+0xe6>
    7048:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    704c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7050:	6142      	str	r2, [r0, #20]
    7052:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
    7056:	4a14      	ldr	r2, [pc, #80]	; (70a8 <CC_PalTrngParamGet+0x10c>)
    7058:	4291      	cmp	r1, r2
    705a:	d00d      	beq.n	7078 <CC_PalTrngParamGet+0xdc>
    705c:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    7060:	3201      	adds	r2, #1
    7062:	d009      	beq.n	7078 <CC_PalTrngParamGet+0xdc>
    7064:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
    7068:	6183      	str	r3, [r0, #24]
    706a:	2000      	movs	r0, #0
    706c:	4770      	bx	lr
    706e:	2001      	movs	r0, #1
    7070:	4770      	bx	lr
    7072:	f640 02fc 	movw	r2, #2300	; 0x8fc
    7076:	e7a5      	b.n	6fc4 <CC_PalTrngParamGet+0x28>
    7078:	f240 3337 	movw	r3, #823	; 0x337
    707c:	6183      	str	r3, [r0, #24]
    707e:	2000      	movs	r0, #0
    7080:	4770      	bx	lr
    7082:	2251      	movs	r2, #81	; 0x51
    7084:	e7e2      	b.n	704c <CC_PalTrngParamGet+0xb0>
    7086:	2290      	movs	r2, #144	; 0x90
    7088:	e7d3      	b.n	7032 <CC_PalTrngParamGet+0x96>
    708a:	f642 1204 	movw	r2, #10500	; 0x2904
    708e:	e7c3      	b.n	7018 <CC_PalTrngParamGet+0x7c>
    7090:	f640 62d8 	movw	r2, #3800	; 0xed8
    7094:	e7b2      	b.n	6ffc <CC_PalTrngParamGet+0x60>
    7096:	f242 02d0 	movw	r2, #8400	; 0x20d0
    709a:	e7a1      	b.n	6fe0 <CC_PalTrngParamGet+0x44>
    709c:	fffff8fc 	.word	0xfffff8fc
    70a0:	ffff20d0 	.word	0xffff20d0
    70a4:	ffff2904 	.word	0xffff2904
    70a8:	fffff337 	.word	0xfffff337

000070ac <LLF_RND_WaitRngInterrupt>:
    70ac:	4601      	mov	r1, r0
    70ae:	b508      	push	{r3, lr}
    70b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
    70b4:	f7fe fdfe 	bl	5cb4 <CC_HalWaitInterruptRND>
    70b8:	2300      	movs	r3, #0
    70ba:	4902      	ldr	r1, [pc, #8]	; (70c4 <LLF_RND_WaitRngInterrupt+0x18>)
    70bc:	4a02      	ldr	r2, [pc, #8]	; (70c8 <LLF_RND_WaitRngInterrupt+0x1c>)
    70be:	600b      	str	r3, [r1, #0]
    70c0:	6013      	str	r3, [r2, #0]
    70c2:	bd08      	pop	{r3, pc}
    70c4:	508411c8 	.word	0x508411c8
    70c8:	5084112c 	.word	0x5084112c

000070cc <LLF_RND_GetRoscSampleCnt>:
    70cc:	3801      	subs	r0, #1
    70ce:	2807      	cmp	r0, #7
    70d0:	d805      	bhi.n	70de <LLF_RND_GetRoscSampleCnt+0x12>
    70d2:	e8df f000 	tbb	[pc, r0]
    70d6:	0e0a      	.short	0x0e0a
    70d8:	04041204 	.word	0x04041204
    70dc:	0604      	.short	0x0604
    70de:	4809      	ldr	r0, [pc, #36]	; (7104 <LLF_RND_GetRoscSampleCnt+0x38>)
    70e0:	4770      	bx	lr
    70e2:	68cb      	ldr	r3, [r1, #12]
    70e4:	2000      	movs	r0, #0
    70e6:	624b      	str	r3, [r1, #36]	; 0x24
    70e8:	4770      	bx	lr
    70ea:	680b      	ldr	r3, [r1, #0]
    70ec:	2000      	movs	r0, #0
    70ee:	624b      	str	r3, [r1, #36]	; 0x24
    70f0:	4770      	bx	lr
    70f2:	684b      	ldr	r3, [r1, #4]
    70f4:	2000      	movs	r0, #0
    70f6:	624b      	str	r3, [r1, #36]	; 0x24
    70f8:	4770      	bx	lr
    70fa:	688b      	ldr	r3, [r1, #8]
    70fc:	2000      	movs	r0, #0
    70fe:	624b      	str	r3, [r1, #36]	; 0x24
    7100:	4770      	bx	lr
    7102:	bf00      	nop
    7104:	00f10c31 	.word	0x00f10c31

00007108 <LLF_RND_GetFastestRosc>:
    7108:	680b      	ldr	r3, [r1, #0]
    710a:	e002      	b.n	7112 <LLF_RND_GetFastestRosc+0xa>
    710c:	2b08      	cmp	r3, #8
    710e:	600b      	str	r3, [r1, #0]
    7110:	d806      	bhi.n	7120 <LLF_RND_GetFastestRosc+0x18>
    7112:	6a02      	ldr	r2, [r0, #32]
    7114:	4213      	tst	r3, r2
    7116:	ea4f 0343 	mov.w	r3, r3, lsl #1
    711a:	d0f7      	beq.n	710c <LLF_RND_GetFastestRosc+0x4>
    711c:	2000      	movs	r0, #0
    711e:	4770      	bx	lr
    7120:	4800      	ldr	r0, [pc, #0]	; (7124 <LLF_RND_GetFastestRosc+0x1c>)
    7122:	4770      	bx	lr
    7124:	00f10c31 	.word	0x00f10c31

00007128 <LLF_RND_TurnOffTrng>:
    7128:	2300      	movs	r3, #0
    712a:	4904      	ldr	r1, [pc, #16]	; (713c <LLF_RND_TurnOffTrng+0x14>)
    712c:	4a04      	ldr	r2, [pc, #16]	; (7140 <LLF_RND_TurnOffTrng+0x18>)
    712e:	600b      	str	r3, [r1, #0]
    7130:	f44f 6080 	mov.w	r0, #1024	; 0x400
    7134:	6013      	str	r3, [r2, #0]
    7136:	f7fe bda3 	b.w	5c80 <CC_HalClearInterruptBit>
    713a:	bf00      	nop
    713c:	5084112c 	.word	0x5084112c
    7140:	508411c4 	.word	0x508411c4

00007144 <SetDataBuffersInfo>:
    7144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7148:	2600      	movs	r6, #0
    714a:	b082      	sub	sp, #8
    714c:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    7150:	f88d 6007 	strb.w	r6, [sp, #7]
    7154:	9e09      	ldr	r6, [sp, #36]	; 0x24
    7156:	d327      	bcc.n	71a8 <SetDataBuffersInfo+0x64>
    7158:	460c      	mov	r4, r1
    715a:	4404      	add	r4, r0
    715c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    7160:	4605      	mov	r5, r0
    7162:	d821      	bhi.n	71a8 <SetDataBuffersInfo+0x64>
    7164:	4617      	mov	r7, r2
    7166:	4698      	mov	r8, r3
    7168:	2201      	movs	r2, #1
    716a:	f10d 0307 	add.w	r3, sp, #7
    716e:	f000 fa0f 	bl	7590 <CC_PalDataBufferAttrGet>
    7172:	4604      	mov	r4, r0
    7174:	b9c0      	cbnz	r0, 71a8 <SetDataBuffersInfo+0x64>
    7176:	f89d 3007 	ldrb.w	r3, [sp, #7]
    717a:	603d      	str	r5, [r7, #0]
    717c:	713b      	strb	r3, [r7, #4]
    717e:	b1ae      	cbz	r6, 71ac <SetDataBuffersInfo+0x68>
    7180:	f1b8 0f00 	cmp.w	r8, #0
    7184:	d009      	beq.n	719a <SetDataBuffersInfo+0x56>
    7186:	4602      	mov	r2, r0
    7188:	9908      	ldr	r1, [sp, #32]
    718a:	4640      	mov	r0, r8
    718c:	f10d 0307 	add.w	r3, sp, #7
    7190:	f000 f9fe 	bl	7590 <CC_PalDataBufferAttrGet>
    7194:	b940      	cbnz	r0, 71a8 <SetDataBuffersInfo+0x64>
    7196:	f89d 3007 	ldrb.w	r3, [sp, #7]
    719a:	4620      	mov	r0, r4
    719c:	f8c6 8000 	str.w	r8, [r6]
    71a0:	7133      	strb	r3, [r6, #4]
    71a2:	b002      	add	sp, #8
    71a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    71a8:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
    71ac:	4620      	mov	r0, r4
    71ae:	b002      	add	sp, #8
    71b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000071b4 <InitHashDrv>:
    71b4:	b1e8      	cbz	r0, 71f2 <InitHashDrv+0x3e>
    71b6:	b510      	push	{r4, lr}
    71b8:	6804      	ldr	r4, [r0, #0]
    71ba:	2c01      	cmp	r4, #1
    71bc:	d004      	beq.n	71c8 <InitHashDrv+0x14>
    71be:	2c02      	cmp	r4, #2
    71c0:	d010      	beq.n	71e4 <InitHashDrv+0x30>
    71c2:	b144      	cbz	r4, 71d6 <InitHashDrv+0x22>
    71c4:	480c      	ldr	r0, [pc, #48]	; (71f8 <InitHashDrv+0x44>)
    71c6:	bd10      	pop	{r4, pc}
    71c8:	2220      	movs	r2, #32
    71ca:	490c      	ldr	r1, [pc, #48]	; (71fc <InitHashDrv+0x48>)
    71cc:	3008      	adds	r0, #8
    71ce:	f7ff fedd 	bl	6f8c <CC_PalMemCopyPlat>
    71d2:	2000      	movs	r0, #0
    71d4:	bd10      	pop	{r4, pc}
    71d6:	2214      	movs	r2, #20
    71d8:	4909      	ldr	r1, [pc, #36]	; (7200 <InitHashDrv+0x4c>)
    71da:	3008      	adds	r0, #8
    71dc:	f7ff fed6 	bl	6f8c <CC_PalMemCopyPlat>
    71e0:	4620      	mov	r0, r4
    71e2:	bd10      	pop	{r4, pc}
    71e4:	2220      	movs	r2, #32
    71e6:	4907      	ldr	r1, [pc, #28]	; (7204 <InitHashDrv+0x50>)
    71e8:	3008      	adds	r0, #8
    71ea:	f7ff fecf 	bl	6f8c <CC_PalMemCopyPlat>
    71ee:	2000      	movs	r0, #0
    71f0:	bd10      	pop	{r4, pc}
    71f2:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
    71f6:	4770      	bx	lr
    71f8:	00f30001 	.word	0x00f30001
    71fc:	00008f50 	.word	0x00008f50
    7200:	00008f1c 	.word	0x00008f1c
    7204:	00008f30 	.word	0x00008f30

00007208 <ProcessHashDrv>:
    7208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    720c:	2900      	cmp	r1, #0
    720e:	f000 80ef 	beq.w	73f0 <ProcessHashDrv+0x1e8>
    7212:	4604      	mov	r4, r0
    7214:	2800      	cmp	r0, #0
    7216:	f000 80ef 	beq.w	73f8 <ProcessHashDrv+0x1f0>
    721a:	6803      	ldr	r3, [r0, #0]
    721c:	4617      	mov	r7, r2
    721e:	460e      	mov	r6, r1
    7220:	2b00      	cmp	r3, #0
    7222:	f000 80b9 	beq.w	7398 <ProcessHashDrv+0x190>
    7226:	3b01      	subs	r3, #1
    7228:	2b01      	cmp	r3, #1
    722a:	f200 80cd 	bhi.w	73c8 <ProcessHashDrv+0x1c0>
    722e:	f04f 31ff 	mov.w	r1, #4294967295
    7232:	4873      	ldr	r0, [pc, #460]	; (7400 <ProcessHashDrv+0x1f8>)
    7234:	f04f 0802 	mov.w	r8, #2
    7238:	f7fe fdc8 	bl	5dcc <CC_PalMutexLock>
    723c:	2800      	cmp	r0, #0
    723e:	f040 80b5 	bne.w	73ac <ProcessHashDrv+0x1a4>
    7242:	2000      	movs	r0, #0
    7244:	f7fe fdf2 	bl	5e2c <CC_PalPowerSaveModeSelect>
    7248:	4605      	mov	r5, r0
    724a:	2800      	cmp	r0, #0
    724c:	f040 80b8 	bne.w	73c0 <ProcessHashDrv+0x1b8>
    7250:	4a6c      	ldr	r2, [pc, #432]	; (7404 <ProcessHashDrv+0x1fc>)
    7252:	6813      	ldr	r3, [r2, #0]
    7254:	2b00      	cmp	r3, #0
    7256:	d1fc      	bne.n	7252 <ProcessHashDrv+0x4a>
    7258:	486b      	ldr	r0, [pc, #428]	; (7408 <ProcessHashDrv+0x200>)
    725a:	6803      	ldr	r3, [r0, #0]
    725c:	2b00      	cmp	r3, #0
    725e:	d1fc      	bne.n	725a <ProcessHashDrv+0x52>
    7260:	f04f 30ff 	mov.w	r0, #4294967295
    7264:	f7fe fd0c 	bl	5c80 <CC_HalClearInterruptBit>
    7268:	4b68      	ldr	r3, [pc, #416]	; (740c <ProcessHashDrv+0x204>)
    726a:	6818      	ldr	r0, [r3, #0]
    726c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    7270:	f7fe fd14 	bl	5c9c <CC_HalMaskInterrupt>
    7274:	2301      	movs	r3, #1
    7276:	2007      	movs	r0, #7
    7278:	4a65      	ldr	r2, [pc, #404]	; (7410 <ProcessHashDrv+0x208>)
    727a:	4966      	ldr	r1, [pc, #408]	; (7414 <ProcessHashDrv+0x20c>)
    727c:	6013      	str	r3, [r2, #0]
    727e:	6008      	str	r0, [r1, #0]
    7280:	f842 3c54 	str.w	r3, [r2, #-84]
    7284:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    7286:	4b64      	ldr	r3, [pc, #400]	; (7418 <ProcessHashDrv+0x210>)
    7288:	3a48      	subs	r2, #72	; 0x48
    728a:	6019      	str	r1, [r3, #0]
    728c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    728e:	6011      	str	r1, [r2, #0]
    7290:	f843 8c0c 	str.w	r8, [r3, #-12]
    7294:	6823      	ldr	r3, [r4, #0]
    7296:	b163      	cbz	r3, 72b2 <ProcessHashDrv+0xaa>
    7298:	3b01      	subs	r3, #1
    729a:	2b01      	cmp	r3, #1
    729c:	d818      	bhi.n	72d0 <ProcessHashDrv+0xc8>
    729e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    72a0:	4b5e      	ldr	r3, [pc, #376]	; (741c <ProcessHashDrv+0x214>)
    72a2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
    72a6:	6019      	str	r1, [r3, #0]
    72a8:	6a21      	ldr	r1, [r4, #32]
    72aa:	6011      	str	r1, [r2, #0]
    72ac:	69e2      	ldr	r2, [r4, #28]
    72ae:	f843 2c08 	str.w	r2, [r3, #-8]
    72b2:	69a1      	ldr	r1, [r4, #24]
    72b4:	4b5a      	ldr	r3, [pc, #360]	; (7420 <ProcessHashDrv+0x218>)
    72b6:	4a5b      	ldr	r2, [pc, #364]	; (7424 <ProcessHashDrv+0x21c>)
    72b8:	6019      	str	r1, [r3, #0]
    72ba:	6961      	ldr	r1, [r4, #20]
    72bc:	6011      	str	r1, [r2, #0]
    72be:	6921      	ldr	r1, [r4, #16]
    72c0:	f843 1c08 	str.w	r1, [r3, #-8]
    72c4:	68e1      	ldr	r1, [r4, #12]
    72c6:	f842 1c08 	str.w	r1, [r2, #-8]
    72ca:	68a2      	ldr	r2, [r4, #8]
    72cc:	f843 2c10 	str.w	r2, [r3, #-16]
    72d0:	4a55      	ldr	r2, [pc, #340]	; (7428 <ProcessHashDrv+0x220>)
    72d2:	6813      	ldr	r3, [r2, #0]
    72d4:	2b00      	cmp	r3, #0
    72d6:	d1fc      	bne.n	72d2 <ProcessHashDrv+0xca>
    72d8:	2f00      	cmp	r7, #0
    72da:	d059      	beq.n	7390 <ProcessHashDrv+0x188>
    72dc:	6863      	ldr	r3, [r4, #4]
    72de:	2040      	movs	r0, #64	; 0x40
    72e0:	2b01      	cmp	r3, #1
    72e2:	bf04      	itt	eq
    72e4:	4a51      	ldreq	r2, [pc, #324]	; (742c <ProcessHashDrv+0x224>)
    72e6:	6013      	streq	r3, [r2, #0]
    72e8:	6831      	ldr	r1, [r6, #0]
    72ea:	4a51      	ldr	r2, [pc, #324]	; (7430 <ProcessHashDrv+0x228>)
    72ec:	4b51      	ldr	r3, [pc, #324]	; (7434 <ProcessHashDrv+0x22c>)
    72ee:	6011      	str	r1, [r2, #0]
    72f0:	601f      	str	r7, [r3, #0]
    72f2:	f7fe fcd9 	bl	5ca8 <CC_HalWaitInterrupt>
    72f6:	4605      	mov	r5, r0
    72f8:	4a4b      	ldr	r2, [pc, #300]	; (7428 <ProcessHashDrv+0x220>)
    72fa:	6813      	ldr	r3, [r2, #0]
    72fc:	2b00      	cmp	r3, #0
    72fe:	d1fc      	bne.n	72fa <ProcessHashDrv+0xf2>
    7300:	4a41      	ldr	r2, [pc, #260]	; (7408 <ProcessHashDrv+0x200>)
    7302:	6813      	ldr	r3, [r2, #0]
    7304:	2b00      	cmp	r3, #0
    7306:	d1fc      	bne.n	7302 <ProcessHashDrv+0xfa>
    7308:	6823      	ldr	r3, [r4, #0]
    730a:	b15b      	cbz	r3, 7324 <ProcessHashDrv+0x11c>
    730c:	3b01      	subs	r3, #1
    730e:	2b01      	cmp	r3, #1
    7310:	d816      	bhi.n	7340 <ProcessHashDrv+0x138>
    7312:	4b42      	ldr	r3, [pc, #264]	; (741c <ProcessHashDrv+0x214>)
    7314:	4a48      	ldr	r2, [pc, #288]	; (7438 <ProcessHashDrv+0x230>)
    7316:	6819      	ldr	r1, [r3, #0]
    7318:	3b08      	subs	r3, #8
    731a:	6261      	str	r1, [r4, #36]	; 0x24
    731c:	6812      	ldr	r2, [r2, #0]
    731e:	6222      	str	r2, [r4, #32]
    7320:	681b      	ldr	r3, [r3, #0]
    7322:	61e3      	str	r3, [r4, #28]
    7324:	4b3e      	ldr	r3, [pc, #248]	; (7420 <ProcessHashDrv+0x218>)
    7326:	4a3f      	ldr	r2, [pc, #252]	; (7424 <ProcessHashDrv+0x21c>)
    7328:	6819      	ldr	r1, [r3, #0]
    732a:	3a08      	subs	r2, #8
    732c:	61a1      	str	r1, [r4, #24]
    732e:	6891      	ldr	r1, [r2, #8]
    7330:	3b10      	subs	r3, #16
    7332:	6161      	str	r1, [r4, #20]
    7334:	6899      	ldr	r1, [r3, #8]
    7336:	6121      	str	r1, [r4, #16]
    7338:	6812      	ldr	r2, [r2, #0]
    733a:	60e2      	str	r2, [r4, #12]
    733c:	681b      	ldr	r3, [r3, #0]
    733e:	60a3      	str	r3, [r4, #8]
    7340:	2101      	movs	r1, #1
    7342:	2300      	movs	r3, #0
    7344:	4834      	ldr	r0, [pc, #208]	; (7418 <ProcessHashDrv+0x210>)
    7346:	4a3d      	ldr	r2, [pc, #244]	; (743c <ProcessHashDrv+0x234>)
    7348:	6800      	ldr	r0, [r0, #0]
    734a:	64a0      	str	r0, [r4, #72]	; 0x48
    734c:	6810      	ldr	r0, [r2, #0]
    734e:	64e0      	str	r0, [r4, #76]	; 0x4c
    7350:	f842 1c0c 	str.w	r1, [r2, #-12]
    7354:	4835      	ldr	r0, [pc, #212]	; (742c <ProcessHashDrv+0x224>)
    7356:	493a      	ldr	r1, [pc, #232]	; (7440 <ProcessHashDrv+0x238>)
    7358:	6003      	str	r3, [r0, #0]
    735a:	f502 72a0 	add.w	r2, r2, #320	; 0x140
    735e:	600b      	str	r3, [r1, #0]
    7360:	6813      	ldr	r3, [r2, #0]
    7362:	2b00      	cmp	r3, #0
    7364:	d1fc      	bne.n	7360 <ProcessHashDrv+0x158>
    7366:	4a2a      	ldr	r2, [pc, #168]	; (7410 <ProcessHashDrv+0x208>)
    7368:	6013      	str	r3, [r2, #0]
    736a:	2d00      	cmp	r5, #0
    736c:	d13a      	bne.n	73e4 <ProcessHashDrv+0x1dc>
    736e:	4b27      	ldr	r3, [pc, #156]	; (740c <ProcessHashDrv+0x204>)
    7370:	6818      	ldr	r0, [r3, #0]
    7372:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7376:	f7fe fc91 	bl	5c9c <CC_HalMaskInterrupt>
    737a:	2001      	movs	r0, #1
    737c:	f7fe fd56 	bl	5e2c <CC_PalPowerSaveModeSelect>
    7380:	bb60      	cbnz	r0, 73dc <ProcessHashDrv+0x1d4>
    7382:	481f      	ldr	r0, [pc, #124]	; (7400 <ProcessHashDrv+0x1f8>)
    7384:	f7fe fd2a 	bl	5ddc <CC_PalMutexUnlock>
    7388:	bb10      	cbnz	r0, 73d0 <ProcessHashDrv+0x1c8>
    738a:	4628      	mov	r0, r5
    738c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7390:	2204      	movs	r2, #4
    7392:	4b2b      	ldr	r3, [pc, #172]	; (7440 <ProcessHashDrv+0x238>)
    7394:	601a      	str	r2, [r3, #0]
    7396:	e7af      	b.n	72f8 <ProcessHashDrv+0xf0>
    7398:	f04f 31ff 	mov.w	r1, #4294967295
    739c:	4818      	ldr	r0, [pc, #96]	; (7400 <ProcessHashDrv+0x1f8>)
    739e:	f04f 0801 	mov.w	r8, #1
    73a2:	f7fe fd13 	bl	5dcc <CC_PalMutexLock>
    73a6:	2800      	cmp	r0, #0
    73a8:	f43f af4b 	beq.w	7242 <ProcessHashDrv+0x3a>
    73ac:	4825      	ldr	r0, [pc, #148]	; (7444 <ProcessHashDrv+0x23c>)
    73ae:	f7fe f97b 	bl	56a8 <CC_PalAbort>
    73b2:	2000      	movs	r0, #0
    73b4:	f7fe fd3a 	bl	5e2c <CC_PalPowerSaveModeSelect>
    73b8:	4605      	mov	r5, r0
    73ba:	2800      	cmp	r0, #0
    73bc:	f43f af48 	beq.w	7250 <ProcessHashDrv+0x48>
    73c0:	4821      	ldr	r0, [pc, #132]	; (7448 <ProcessHashDrv+0x240>)
    73c2:	f7fe f971 	bl	56a8 <CC_PalAbort>
    73c6:	e743      	b.n	7250 <ProcessHashDrv+0x48>
    73c8:	4d20      	ldr	r5, [pc, #128]	; (744c <ProcessHashDrv+0x244>)
    73ca:	4628      	mov	r0, r5
    73cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    73d0:	481f      	ldr	r0, [pc, #124]	; (7450 <ProcessHashDrv+0x248>)
    73d2:	f7fe f969 	bl	56a8 <CC_PalAbort>
    73d6:	4628      	mov	r0, r5
    73d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    73dc:	481d      	ldr	r0, [pc, #116]	; (7454 <ProcessHashDrv+0x24c>)
    73de:	f7fe f963 	bl	56a8 <CC_PalAbort>
    73e2:	e7ce      	b.n	7382 <ProcessHashDrv+0x17a>
    73e4:	2110      	movs	r1, #16
    73e6:	f104 0008 	add.w	r0, r4, #8
    73ea:	f7ff fdd3 	bl	6f94 <CC_PalMemSetZeroPlat>
    73ee:	e7be      	b.n	736e <ProcessHashDrv+0x166>
    73f0:	4d19      	ldr	r5, [pc, #100]	; (7458 <ProcessHashDrv+0x250>)
    73f2:	4628      	mov	r0, r5
    73f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    73f8:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
    73fc:	e7c5      	b.n	738a <ProcessHashDrv+0x182>
    73fe:	bf00      	nop
    7400:	200000bc 	.word	0x200000bc
    7404:	5084191c 	.word	0x5084191c
    7408:	50841c20 	.word	0x50841c20
    740c:	50841a04 	.word	0x50841a04
    7410:	50841818 	.word	0x50841818
    7414:	50841900 	.word	0x50841900
    7418:	508417cc 	.word	0x508417cc
    741c:	5084165c 	.word	0x5084165c
    7420:	50841650 	.word	0x50841650
    7424:	5084164c 	.word	0x5084164c
    7428:	50841910 	.word	0x50841910
    742c:	50841684 	.word	0x50841684
    7430:	50841c28 	.word	0x50841c28
    7434:	50841c2c 	.word	0x50841c2c
    7438:	50841658 	.word	0x50841658
    743c:	508417d0 	.word	0x508417d0
    7440:	508417c8 	.word	0x508417c8
    7444:	00008e64 	.word	0x00008e64
    7448:	00008e7c 	.word	0x00008e7c
    744c:	00f30001 	.word	0x00f30001
    7450:	00008ebc 	.word	0x00008ebc
    7454:	00008e9c 	.word	0x00008e9c
    7458:	00f30003 	.word	0x00f30003

0000745c <FinishHashDrv>:
    745c:	2800      	cmp	r0, #0
    745e:	d03a      	beq.n	74d6 <FinishHashDrv+0x7a>
    7460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7464:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
    7468:	fa92 f882 	rev.w	r8, r2
    746c:	fa93 fe83 	rev.w	lr, r3
    7470:	6a02      	ldr	r2, [r0, #32]
    7472:	6a43      	ldr	r3, [r0, #36]	; 0x24
    7474:	e9d0 4104 	ldrd	r4, r1, [r0, #16]
    7478:	ba12      	rev	r2, r2
    747a:	ba24      	rev	r4, r4
    747c:	ba1b      	rev	r3, r3
    747e:	6104      	str	r4, [r0, #16]
    7480:	6202      	str	r2, [r0, #32]
    7482:	6a84      	ldr	r4, [r0, #40]	; 0x28
    7484:	6b82      	ldr	r2, [r0, #56]	; 0x38
    7486:	6243      	str	r3, [r0, #36]	; 0x24
    7488:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    748a:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
    748e:	ba09      	rev	r1, r1
    7490:	ba36      	rev	r6, r6
    7492:	ba2d      	rev	r5, r5
    7494:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    7496:	6086      	str	r6, [r0, #8]
    7498:	60c5      	str	r5, [r0, #12]
    749a:	6b06      	ldr	r6, [r0, #48]	; 0x30
    749c:	6b45      	ldr	r5, [r0, #52]	; 0x34
    749e:	6141      	str	r1, [r0, #20]
    74a0:	fa94 fc84 	rev.w	ip, r4
    74a4:	ba19      	rev	r1, r3
    74a6:	ba14      	rev	r4, r2
    74a8:	6c43      	ldr	r3, [r0, #68]	; 0x44
    74aa:	6c02      	ldr	r2, [r0, #64]	; 0x40
    74ac:	ba3f      	rev	r7, r7
    74ae:	ba36      	rev	r6, r6
    74b0:	ba2d      	rev	r5, r5
    74b2:	ba12      	rev	r2, r2
    74b4:	ba1b      	rev	r3, r3
    74b6:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
    74ba:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
    74be:	f8c0 8018 	str.w	r8, [r0, #24]
    74c2:	f8c0 e01c 	str.w	lr, [r0, #28]
    74c6:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
    74ca:	62c7      	str	r7, [r0, #44]	; 0x2c
    74cc:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    74d0:	2000      	movs	r0, #0
    74d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    74d6:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
    74da:	4770      	bx	lr

000074dc <cc_mbedtls_aes_init>:
    74dc:	b510      	push	{r4, lr}
    74de:	4604      	mov	r4, r0
    74e0:	b130      	cbz	r0, 74f0 <cc_mbedtls_aes_init+0x14>
    74e2:	2200      	movs	r2, #0
    74e4:	2301      	movs	r3, #1
    74e6:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
    74ea:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
    74ee:	bd10      	pop	{r4, pc}
    74f0:	4801      	ldr	r0, [pc, #4]	; (74f8 <cc_mbedtls_aes_init+0x1c>)
    74f2:	f7fe f8d9 	bl	56a8 <CC_PalAbort>
    74f6:	e7f4      	b.n	74e2 <cc_mbedtls_aes_init+0x6>
    74f8:	00008f70 	.word	0x00008f70

000074fc <cc_mbedtls_aes_free>:
    74fc:	b118      	cbz	r0, 7506 <cc_mbedtls_aes_free+0xa>
    74fe:	2274      	movs	r2, #116	; 0x74
    7500:	2100      	movs	r1, #0
    7502:	f7ff bd45 	b.w	6f90 <CC_PalMemSetPlat>
    7506:	4770      	bx	lr

00007508 <cc_mbedtls_aes_setkey_enc>:
    7508:	b188      	cbz	r0, 752e <cc_mbedtls_aes_setkey_enc+0x26>
    750a:	b199      	cbz	r1, 7534 <cc_mbedtls_aes_setkey_enc+0x2c>
    750c:	b510      	push	{r4, lr}
    750e:	2400      	movs	r4, #0
    7510:	2a80      	cmp	r2, #128	; 0x80
    7512:	6384      	str	r4, [r0, #56]	; 0x38
    7514:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    7518:	d106      	bne.n	7528 <cc_mbedtls_aes_setkey_enc+0x20>
    751a:	6304      	str	r4, [r0, #48]	; 0x30
    751c:	2210      	movs	r2, #16
    751e:	3010      	adds	r0, #16
    7520:	f7ff fd34 	bl	6f8c <CC_PalMemCopyPlat>
    7524:	4620      	mov	r0, r4
    7526:	bd10      	pop	{r4, pc}
    7528:	f06f 001f 	mvn.w	r0, #31
    752c:	bd10      	pop	{r4, pc}
    752e:	f06f 0021 	mvn.w	r0, #33	; 0x21
    7532:	4770      	bx	lr
    7534:	f06f 001f 	mvn.w	r0, #31
    7538:	4770      	bx	lr
    753a:	bf00      	nop

0000753c <cc_mbedtls_aes_crypt_ecb>:
    753c:	b328      	cbz	r0, 758a <cc_mbedtls_aes_crypt_ecb+0x4e>
    753e:	b322      	cbz	r2, 758a <cc_mbedtls_aes_crypt_ecb+0x4e>
    7540:	b31b      	cbz	r3, 758a <cc_mbedtls_aes_crypt_ecb+0x4e>
    7542:	2901      	cmp	r1, #1
    7544:	d821      	bhi.n	758a <cc_mbedtls_aes_crypt_ecb+0x4e>
    7546:	b570      	push	{r4, r5, r6, lr}
    7548:	4604      	mov	r4, r0
    754a:	6b81      	ldr	r1, [r0, #56]	; 0x38
    754c:	b086      	sub	sp, #24
    754e:	d017      	beq.n	7580 <cc_mbedtls_aes_crypt_ecb+0x44>
    7550:	2901      	cmp	r1, #1
    7552:	d117      	bne.n	7584 <cc_mbedtls_aes_crypt_ecb+0x48>
    7554:	2510      	movs	r5, #16
    7556:	2100      	movs	r1, #0
    7558:	eb0d 0605 	add.w	r6, sp, r5
    755c:	6361      	str	r1, [r4, #52]	; 0x34
    755e:	4610      	mov	r0, r2
    7560:	4629      	mov	r1, r5
    7562:	9500      	str	r5, [sp, #0]
    7564:	aa02      	add	r2, sp, #8
    7566:	9601      	str	r6, [sp, #4]
    7568:	f7ff fdec 	bl	7144 <SetDataBuffersInfo>
    756c:	b950      	cbnz	r0, 7584 <cc_mbedtls_aes_crypt_ecb+0x48>
    756e:	462b      	mov	r3, r5
    7570:	4632      	mov	r2, r6
    7572:	4620      	mov	r0, r4
    7574:	a902      	add	r1, sp, #8
    7576:	f000 f8fd 	bl	7774 <ProcessAesDrv>
    757a:	b918      	cbnz	r0, 7584 <cc_mbedtls_aes_crypt_ecb+0x48>
    757c:	b006      	add	sp, #24
    757e:	bd70      	pop	{r4, r5, r6, pc}
    7580:	2900      	cmp	r1, #0
    7582:	d0e7      	beq.n	7554 <cc_mbedtls_aes_crypt_ecb+0x18>
    7584:	f06f 0021 	mvn.w	r0, #33	; 0x21
    7588:	e7f8      	b.n	757c <cc_mbedtls_aes_crypt_ecb+0x40>
    758a:	f06f 0021 	mvn.w	r0, #33	; 0x21
    758e:	4770      	bx	lr

00007590 <CC_PalDataBufferAttrGet>:
    7590:	2000      	movs	r0, #0
    7592:	7018      	strb	r0, [r3, #0]
    7594:	4770      	bx	lr
    7596:	bf00      	nop

00007598 <LoadAesKey>:
    7598:	2800      	cmp	r0, #0
    759a:	d060      	beq.n	765e <LoadAesKey+0xc6>
    759c:	b538      	push	{r3, r4, r5, lr}
    759e:	4604      	mov	r4, r0
    75a0:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
    75a4:	2802      	cmp	r0, #2
    75a6:	d016      	beq.n	75d6 <LoadAesKey+0x3e>
    75a8:	2803      	cmp	r0, #3
    75aa:	d03c      	beq.n	7626 <LoadAesKey+0x8e>
    75ac:	2800      	cmp	r0, #0
    75ae:	d02f      	beq.n	7610 <LoadAesKey+0x78>
    75b0:	482c      	ldr	r0, [pc, #176]	; (7664 <LoadAesKey+0xcc>)
    75b2:	4d2d      	ldr	r5, [pc, #180]	; (7668 <LoadAesKey+0xd0>)
    75b4:	682a      	ldr	r2, [r5, #0]
    75b6:	4b2d      	ldr	r3, [pc, #180]	; (766c <LoadAesKey+0xd4>)
    75b8:	6812      	ldr	r2, [r2, #0]
    75ba:	492d      	ldr	r1, [pc, #180]	; (7670 <LoadAesKey+0xd8>)
    75bc:	601a      	str	r2, [r3, #0]
    75be:	682b      	ldr	r3, [r5, #0]
    75c0:	4a2c      	ldr	r2, [pc, #176]	; (7674 <LoadAesKey+0xdc>)
    75c2:	685c      	ldr	r4, [r3, #4]
    75c4:	4b2c      	ldr	r3, [pc, #176]	; (7678 <LoadAesKey+0xe0>)
    75c6:	600c      	str	r4, [r1, #0]
    75c8:	6829      	ldr	r1, [r5, #0]
    75ca:	6889      	ldr	r1, [r1, #8]
    75cc:	6011      	str	r1, [r2, #0]
    75ce:	682a      	ldr	r2, [r5, #0]
    75d0:	68d2      	ldr	r2, [r2, #12]
    75d2:	601a      	str	r2, [r3, #0]
    75d4:	bd38      	pop	{r3, r4, r5, pc}
    75d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    75d8:	6c20      	ldr	r0, [r4, #64]	; 0x40
    75da:	f000 fbdd 	bl	7d98 <kmu_validate_slot_and_size_no_kdr>
    75de:	4d22      	ldr	r5, [pc, #136]	; (7668 <LoadAesKey+0xd0>)
    75e0:	2800      	cmp	r0, #0
    75e2:	d1e7      	bne.n	75b4 <LoadAesKey+0x1c>
    75e4:	682a      	ldr	r2, [r5, #0]
    75e6:	4b21      	ldr	r3, [pc, #132]	; (766c <LoadAesKey+0xd4>)
    75e8:	6810      	ldr	r0, [r2, #0]
    75ea:	4921      	ldr	r1, [pc, #132]	; (7670 <LoadAesKey+0xd8>)
    75ec:	6018      	str	r0, [r3, #0]
    75ee:	6828      	ldr	r0, [r5, #0]
    75f0:	4a20      	ldr	r2, [pc, #128]	; (7674 <LoadAesKey+0xdc>)
    75f2:	6840      	ldr	r0, [r0, #4]
    75f4:	6008      	str	r0, [r1, #0]
    75f6:	6829      	ldr	r1, [r5, #0]
    75f8:	6889      	ldr	r1, [r1, #8]
    75fa:	6011      	str	r1, [r2, #0]
    75fc:	682a      	ldr	r2, [r5, #0]
    75fe:	68d2      	ldr	r2, [r2, #12]
    7600:	60da      	str	r2, [r3, #12]
    7602:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7604:	6c20      	ldr	r0, [r4, #64]	; 0x40
    7606:	f000 fc35 	bl	7e74 <kmu_load_key_aes>
    760a:	2800      	cmp	r0, #0
    760c:	d025      	beq.n	765a <LoadAesKey+0xc2>
    760e:	e7d1      	b.n	75b4 <LoadAesKey+0x1c>
    7610:	6921      	ldr	r1, [r4, #16]
    7612:	4a16      	ldr	r2, [pc, #88]	; (766c <LoadAesKey+0xd4>)
    7614:	4b16      	ldr	r3, [pc, #88]	; (7670 <LoadAesKey+0xd8>)
    7616:	6011      	str	r1, [r2, #0]
    7618:	6961      	ldr	r1, [r4, #20]
    761a:	6019      	str	r1, [r3, #0]
    761c:	69a1      	ldr	r1, [r4, #24]
    761e:	6091      	str	r1, [r2, #8]
    7620:	69e2      	ldr	r2, [r4, #28]
    7622:	609a      	str	r2, [r3, #8]
    7624:	bd38      	pop	{r3, r4, r5, pc}
    7626:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7628:	6c20      	ldr	r0, [r4, #64]	; 0x40
    762a:	f000 fbf3 	bl	7e14 <kmu_validate_kdr_slot_and_size>
    762e:	4d0e      	ldr	r5, [pc, #56]	; (7668 <LoadAesKey+0xd0>)
    7630:	2800      	cmp	r0, #0
    7632:	d1bf      	bne.n	75b4 <LoadAesKey+0x1c>
    7634:	682a      	ldr	r2, [r5, #0]
    7636:	4b0d      	ldr	r3, [pc, #52]	; (766c <LoadAesKey+0xd4>)
    7638:	6810      	ldr	r0, [r2, #0]
    763a:	490d      	ldr	r1, [pc, #52]	; (7670 <LoadAesKey+0xd8>)
    763c:	6018      	str	r0, [r3, #0]
    763e:	6828      	ldr	r0, [r5, #0]
    7640:	4a0c      	ldr	r2, [pc, #48]	; (7674 <LoadAesKey+0xdc>)
    7642:	6840      	ldr	r0, [r0, #4]
    7644:	6008      	str	r0, [r1, #0]
    7646:	6829      	ldr	r1, [r5, #0]
    7648:	6889      	ldr	r1, [r1, #8]
    764a:	6011      	str	r1, [r2, #0]
    764c:	682a      	ldr	r2, [r5, #0]
    764e:	68d2      	ldr	r2, [r2, #12]
    7650:	60da      	str	r2, [r3, #12]
    7652:	f000 fc03 	bl	7e5c <kmu_use_kdr_key>
    7656:	2800      	cmp	r0, #0
    7658:	d1ac      	bne.n	75b4 <LoadAesKey+0x1c>
    765a:	2000      	movs	r0, #0
    765c:	bd38      	pop	{r3, r4, r5, pc}
    765e:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
    7662:	4770      	bx	lr
    7664:	00f10009 	.word	0x00f10009
    7668:	200000ac 	.word	0x200000ac
    766c:	50841400 	.word	0x50841400
    7670:	50841404 	.word	0x50841404
    7674:	50841408 	.word	0x50841408
    7678:	5084140c 	.word	0x5084140c

0000767c <InitAes.part.0>:
    767c:	b510      	push	{r4, lr}
    767e:	4604      	mov	r4, r0
    7680:	4a31      	ldr	r2, [pc, #196]	; (7748 <InitAes.part.0+0xcc>)
    7682:	6813      	ldr	r3, [r2, #0]
    7684:	2b00      	cmp	r3, #0
    7686:	d1fc      	bne.n	7682 <InitAes.part.0+0x6>
    7688:	4a30      	ldr	r2, [pc, #192]	; (774c <InitAes.part.0+0xd0>)
    768a:	6813      	ldr	r3, [r2, #0]
    768c:	2b00      	cmp	r3, #0
    768e:	d1fc      	bne.n	768a <InitAes.part.0+0xe>
    7690:	4a2f      	ldr	r2, [pc, #188]	; (7750 <InitAes.part.0+0xd4>)
    7692:	6813      	ldr	r3, [r2, #0]
    7694:	2b00      	cmp	r3, #0
    7696:	d1fc      	bne.n	7692 <InitAes.part.0+0x16>
    7698:	4a2e      	ldr	r2, [pc, #184]	; (7754 <InitAes.part.0+0xd8>)
    769a:	6813      	ldr	r3, [r2, #0]
    769c:	2b00      	cmp	r3, #0
    769e:	d1fc      	bne.n	769a <InitAes.part.0+0x1e>
    76a0:	4a2d      	ldr	r2, [pc, #180]	; (7758 <InitAes.part.0+0xdc>)
    76a2:	6813      	ldr	r3, [r2, #0]
    76a4:	2b00      	cmp	r3, #0
    76a6:	d1fc      	bne.n	76a2 <InitAes.part.0+0x26>
    76a8:	4a2c      	ldr	r2, [pc, #176]	; (775c <InitAes.part.0+0xe0>)
    76aa:	6813      	ldr	r3, [r2, #0]
    76ac:	2b00      	cmp	r3, #0
    76ae:	d1fc      	bne.n	76aa <InitAes.part.0+0x2e>
    76b0:	f04f 30ff 	mov.w	r0, #4294967295
    76b4:	f7fe fae4 	bl	5c80 <CC_HalClearInterruptBit>
    76b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    76ba:	f023 0304 	bic.w	r3, r3, #4
    76be:	2b03      	cmp	r3, #3
    76c0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    76c2:	d036      	beq.n	7732 <InitAes.part.0+0xb6>
    76c4:	2b01      	cmp	r3, #1
    76c6:	4b26      	ldr	r3, [pc, #152]	; (7760 <InitAes.part.0+0xe4>)
    76c8:	6818      	ldr	r0, [r3, #0]
    76ca:	bf0c      	ite	eq
    76cc:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
    76d0:	f020 0020 	bicne.w	r0, r0, #32
    76d4:	f7fe fae2 	bl	5c9c <CC_HalMaskInterrupt>
    76d8:	2101      	movs	r1, #1
    76da:	4b22      	ldr	r3, [pc, #136]	; (7764 <InitAes.part.0+0xe8>)
    76dc:	4a1a      	ldr	r2, [pc, #104]	; (7748 <InitAes.part.0+0xcc>)
    76de:	6019      	str	r1, [r3, #0]
    76e0:	6813      	ldr	r3, [r2, #0]
    76e2:	2b00      	cmp	r3, #0
    76e4:	d1fc      	bne.n	76e0 <InitAes.part.0+0x64>
    76e6:	4a19      	ldr	r2, [pc, #100]	; (774c <InitAes.part.0+0xd0>)
    76e8:	6813      	ldr	r3, [r2, #0]
    76ea:	2b00      	cmp	r3, #0
    76ec:	d1fc      	bne.n	76e8 <InitAes.part.0+0x6c>
    76ee:	491e      	ldr	r1, [pc, #120]	; (7768 <InitAes.part.0+0xec>)
    76f0:	4a15      	ldr	r2, [pc, #84]	; (7748 <InitAes.part.0+0xcc>)
    76f2:	600b      	str	r3, [r1, #0]
    76f4:	6813      	ldr	r3, [r2, #0]
    76f6:	2b00      	cmp	r3, #0
    76f8:	d1fc      	bne.n	76f4 <InitAes.part.0+0x78>
    76fa:	4a14      	ldr	r2, [pc, #80]	; (774c <InitAes.part.0+0xd0>)
    76fc:	6813      	ldr	r3, [r2, #0]
    76fe:	2b00      	cmp	r3, #0
    7700:	d1fc      	bne.n	76fc <InitAes.part.0+0x80>
    7702:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7704:	f022 0104 	bic.w	r1, r2, #4
    7708:	2903      	cmp	r1, #3
    770a:	bf18      	it	ne
    770c:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
    770e:	ea4f 0282 	mov.w	r2, r2, lsl #2
    7712:	bf18      	it	ne
    7714:	f003 0301 	andne.w	r3, r3, #1
    7718:	4914      	ldr	r1, [pc, #80]	; (776c <InitAes.part.0+0xf0>)
    771a:	f002 021c 	and.w	r2, r2, #28
    771e:	4313      	orrs	r3, r2
    7720:	600b      	str	r3, [r1, #0]
    7722:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7724:	2b07      	cmp	r3, #7
    7726:	d102      	bne.n	772e <InitAes.part.0+0xb2>
    7728:	2201      	movs	r2, #1
    772a:	4b11      	ldr	r3, [pc, #68]	; (7770 <InitAes.part.0+0xf4>)
    772c:	601a      	str	r2, [r3, #0]
    772e:	2000      	movs	r0, #0
    7730:	bd10      	pop	{r4, pc}
    7732:	2b01      	cmp	r3, #1
    7734:	4b0a      	ldr	r3, [pc, #40]	; (7760 <InitAes.part.0+0xe4>)
    7736:	6818      	ldr	r0, [r3, #0]
    7738:	bf0c      	ite	eq
    773a:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
    773e:	f020 0010 	bicne.w	r0, r0, #16
    7742:	f7fe faab 	bl	5c9c <CC_HalMaskInterrupt>
    7746:	e7c7      	b.n	76d8 <InitAes.part.0+0x5c>
    7748:	50841910 	.word	0x50841910
    774c:	50841470 	.word	0x50841470
    7750:	50841d20 	.word	0x50841d20
    7754:	50841c20 	.word	0x50841c20
    7758:	50841d38 	.word	0x50841d38
    775c:	50841c38 	.word	0x50841c38
    7760:	50841a04 	.word	0x50841a04
    7764:	50841900 	.word	0x50841900
    7768:	508414bc 	.word	0x508414bc
    776c:	508414c0 	.word	0x508414c0
    7770:	5084147c 	.word	0x5084147c

00007774 <ProcessAesDrv>:
    7774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7778:	b087      	sub	sp, #28
    777a:	2900      	cmp	r1, #0
    777c:	f000 80a5 	beq.w	78ca <ProcessAesDrv+0x156>
    7780:	4616      	mov	r6, r2
    7782:	2a00      	cmp	r2, #0
    7784:	f000 80a1 	beq.w	78ca <ProcessAesDrv+0x156>
    7788:	4604      	mov	r4, r0
    778a:	2800      	cmp	r0, #0
    778c:	f000 8141 	beq.w	7a12 <ProcessAesDrv+0x29e>
    7790:	461f      	mov	r7, r3
    7792:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    7794:	460d      	mov	r5, r1
    7796:	2b00      	cmp	r3, #0
    7798:	d150      	bne.n	783c <ProcessAesDrv+0xc8>
    779a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    779e:	d252      	bcs.n	7846 <ProcessAesDrv+0xd2>
    77a0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    77a4:	2b04      	cmp	r3, #4
    77a6:	f000 810b 	beq.w	79c0 <ProcessAesDrv+0x24c>
    77aa:	f04f 0800 	mov.w	r8, #0
    77ae:	f04f 31ff 	mov.w	r1, #4294967295
    77b2:	48a9      	ldr	r0, [pc, #676]	; (7a58 <ProcessAesDrv+0x2e4>)
    77b4:	f7fe fb0a 	bl	5dcc <CC_PalMutexLock>
    77b8:	2800      	cmp	r0, #0
    77ba:	f040 80e0 	bne.w	797e <ProcessAesDrv+0x20a>
    77be:	2000      	movs	r0, #0
    77c0:	f7fe fb34 	bl	5e2c <CC_PalPowerSaveModeSelect>
    77c4:	2800      	cmp	r0, #0
    77c6:	f040 80e3 	bne.w	7990 <ProcessAesDrv+0x21c>
    77ca:	2101      	movs	r1, #1
    77cc:	4ba3      	ldr	r3, [pc, #652]	; (7a5c <ProcessAesDrv+0x2e8>)
    77ce:	4aa4      	ldr	r2, [pc, #656]	; (7a60 <ProcessAesDrv+0x2ec>)
    77d0:	6019      	str	r1, [r3, #0]
    77d2:	6813      	ldr	r3, [r2, #0]
    77d4:	2b00      	cmp	r3, #0
    77d6:	d1fc      	bne.n	77d2 <ProcessAesDrv+0x5e>
    77d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    77da:	2b03      	cmp	r3, #3
    77dc:	dc39      	bgt.n	7852 <ProcessAesDrv+0xde>
    77de:	2b00      	cmp	r3, #0
    77e0:	da3a      	bge.n	7858 <ProcessAesDrv+0xe4>
    77e2:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 7aac <ProcessAesDrv+0x338>
    77e6:	4a9e      	ldr	r2, [pc, #632]	; (7a60 <ProcessAesDrv+0x2ec>)
    77e8:	6813      	ldr	r3, [r2, #0]
    77ea:	2b00      	cmp	r3, #0
    77ec:	d1fc      	bne.n	77e8 <ProcessAesDrv+0x74>
    77ee:	f1b8 0f00 	cmp.w	r8, #0
    77f2:	f040 80dc 	bne.w	79ae <ProcessAesDrv+0x23a>
    77f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    77f8:	f023 0304 	bic.w	r3, r3, #4
    77fc:	2b03      	cmp	r3, #3
    77fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7800:	d058      	beq.n	78b4 <ProcessAesDrv+0x140>
    7802:	2b01      	cmp	r3, #1
    7804:	4b97      	ldr	r3, [pc, #604]	; (7a64 <ProcessAesDrv+0x2f0>)
    7806:	6818      	ldr	r0, [r3, #0]
    7808:	bf0c      	ite	eq
    780a:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
    780e:	f040 0020 	orrne.w	r0, r0, #32
    7812:	f7fe fa43 	bl	5c9c <CC_HalMaskInterrupt>
    7816:	2200      	movs	r2, #0
    7818:	4b90      	ldr	r3, [pc, #576]	; (7a5c <ProcessAesDrv+0x2e8>)
    781a:	2001      	movs	r0, #1
    781c:	601a      	str	r2, [r3, #0]
    781e:	f7fe fb05 	bl	5e2c <CC_PalPowerSaveModeSelect>
    7822:	2800      	cmp	r0, #0
    7824:	f040 80bf 	bne.w	79a6 <ProcessAesDrv+0x232>
    7828:	488b      	ldr	r0, [pc, #556]	; (7a58 <ProcessAesDrv+0x2e4>)
    782a:	f7fe fad7 	bl	5ddc <CC_PalMutexUnlock>
    782e:	2800      	cmp	r0, #0
    7830:	f040 80b2 	bne.w	7998 <ProcessAesDrv+0x224>
    7834:	4648      	mov	r0, r9
    7836:	b007      	add	sp, #28
    7838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    783c:	2b01      	cmp	r3, #1
    783e:	d1af      	bne.n	77a0 <ProcessAesDrv+0x2c>
    7840:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    7844:	d3ac      	bcc.n	77a0 <ProcessAesDrv+0x2c>
    7846:	f8df 9268 	ldr.w	r9, [pc, #616]	; 7ab0 <ProcessAesDrv+0x33c>
    784a:	4648      	mov	r0, r9
    784c:	b007      	add	sp, #28
    784e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7852:	3b06      	subs	r3, #6
    7854:	2b01      	cmp	r3, #1
    7856:	d8c4      	bhi.n	77e2 <ProcessAesDrv+0x6e>
    7858:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    785a:	2b01      	cmp	r3, #1
    785c:	f200 80d6 	bhi.w	7a0c <ProcessAesDrv+0x298>
    7860:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7862:	2b01      	cmp	r3, #1
    7864:	d837      	bhi.n	78d6 <ProcessAesDrv+0x162>
    7866:	6e23      	ldr	r3, [r4, #96]	; 0x60
    7868:	2b01      	cmp	r3, #1
    786a:	f200 8134 	bhi.w	7ad6 <ProcessAesDrv+0x362>
    786e:	4620      	mov	r0, r4
    7870:	f7ff ff04 	bl	767c <InitAes.part.0>
    7874:	4681      	mov	r9, r0
    7876:	2800      	cmp	r0, #0
    7878:	d1b5      	bne.n	77e6 <ProcessAesDrv+0x72>
    787a:	4620      	mov	r0, r4
    787c:	f7ff fe8c 	bl	7598 <LoadAesKey>
    7880:	4681      	mov	r9, r0
    7882:	2800      	cmp	r0, #0
    7884:	d1af      	bne.n	77e6 <ProcessAesDrv+0x72>
    7886:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7888:	2b07      	cmp	r3, #7
    788a:	d8aa      	bhi.n	77e2 <ProcessAesDrv+0x6e>
    788c:	a201      	add	r2, pc, #4	; (adr r2, 7894 <ProcessAesDrv+0x120>)
    788e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7892:	bf00      	nop
    7894:	000078f3 	.word	0x000078f3
    7898:	000078dd 	.word	0x000078dd
    789c:	00007a4f 	.word	0x00007a4f
    78a0:	000078dd 	.word	0x000078dd
    78a4:	000077e3 	.word	0x000077e3
    78a8:	000077e3 	.word	0x000077e3
    78ac:	00007a4f 	.word	0x00007a4f
    78b0:	000078dd 	.word	0x000078dd
    78b4:	2b01      	cmp	r3, #1
    78b6:	4b6b      	ldr	r3, [pc, #428]	; (7a64 <ProcessAesDrv+0x2f0>)
    78b8:	6818      	ldr	r0, [r3, #0]
    78ba:	bf0c      	ite	eq
    78bc:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
    78c0:	f040 0010 	orrne.w	r0, r0, #16
    78c4:	f7fe f9ea 	bl	5c9c <CC_HalMaskInterrupt>
    78c8:	e7a5      	b.n	7816 <ProcessAesDrv+0xa2>
    78ca:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 7ab4 <ProcessAesDrv+0x340>
    78ce:	4648      	mov	r0, r9
    78d0:	b007      	add	sp, #28
    78d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    78d6:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 7ab8 <ProcessAesDrv+0x344>
    78da:	e784      	b.n	77e6 <ProcessAesDrv+0x72>
    78dc:	6821      	ldr	r1, [r4, #0]
    78de:	4a62      	ldr	r2, [pc, #392]	; (7a68 <ProcessAesDrv+0x2f4>)
    78e0:	4b62      	ldr	r3, [pc, #392]	; (7a6c <ProcessAesDrv+0x2f8>)
    78e2:	6011      	str	r1, [r2, #0]
    78e4:	6861      	ldr	r1, [r4, #4]
    78e6:	6019      	str	r1, [r3, #0]
    78e8:	68a1      	ldr	r1, [r4, #8]
    78ea:	6091      	str	r1, [r2, #8]
    78ec:	68e2      	ldr	r2, [r4, #12]
    78ee:	609a      	str	r2, [r3, #8]
    78f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    78f2:	f023 0304 	bic.w	r3, r3, #4
    78f6:	2b03      	cmp	r3, #3
    78f8:	682a      	ldr	r2, [r5, #0]
    78fa:	d009      	beq.n	7910 <ProcessAesDrv+0x19c>
    78fc:	6e21      	ldr	r1, [r4, #96]	; 0x60
    78fe:	6833      	ldr	r3, [r6, #0]
    7900:	2901      	cmp	r1, #1
    7902:	bf07      	ittee	eq
    7904:	485a      	ldreq	r0, [pc, #360]	; (7a70 <ProcessAesDrv+0x2fc>)
    7906:	495b      	ldreq	r1, [pc, #364]	; (7a74 <ProcessAesDrv+0x300>)
    7908:	485b      	ldrne	r0, [pc, #364]	; (7a78 <ProcessAesDrv+0x304>)
    790a:	495c      	ldrne	r1, [pc, #368]	; (7a7c <ProcessAesDrv+0x308>)
    790c:	6003      	str	r3, [r0, #0]
    790e:	600f      	str	r7, [r1, #0]
    7910:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7912:	2b01      	cmp	r3, #1
    7914:	bf0b      	itete	eq
    7916:	4b5a      	ldreq	r3, [pc, #360]	; (7a80 <ProcessAesDrv+0x30c>)
    7918:	4b5a      	ldrne	r3, [pc, #360]	; (7a84 <ProcessAesDrv+0x310>)
    791a:	495b      	ldreq	r1, [pc, #364]	; (7a88 <ProcessAesDrv+0x314>)
    791c:	495b      	ldrne	r1, [pc, #364]	; (7a8c <ProcessAesDrv+0x318>)
    791e:	600a      	str	r2, [r1, #0]
    7920:	601f      	str	r7, [r3, #0]
    7922:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7924:	f023 0304 	bic.w	r3, r3, #4
    7928:	2b03      	cmp	r3, #3
    792a:	d075      	beq.n	7a18 <ProcessAesDrv+0x2a4>
    792c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    792e:	2b01      	cmp	r3, #1
    7930:	bf0c      	ite	eq
    7932:	2080      	moveq	r0, #128	; 0x80
    7934:	2020      	movne	r0, #32
    7936:	f7fe f9b7 	bl	5ca8 <CC_HalWaitInterrupt>
    793a:	4681      	mov	r9, r0
    793c:	2800      	cmp	r0, #0
    793e:	f47f af52 	bne.w	77e6 <ProcessAesDrv+0x72>
    7942:	4b47      	ldr	r3, [pc, #284]	; (7a60 <ProcessAesDrv+0x2ec>)
    7944:	681a      	ldr	r2, [r3, #0]
    7946:	2a00      	cmp	r2, #0
    7948:	d1fc      	bne.n	7944 <ProcessAesDrv+0x1d0>
    794a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    794c:	4691      	mov	r9, r2
    794e:	3b01      	subs	r3, #1
    7950:	2b06      	cmp	r3, #6
    7952:	d811      	bhi.n	7978 <ProcessAesDrv+0x204>
    7954:	e8df f003 	tbb	[pc, r3]
    7958:	1004bc04 	.word	0x1004bc04
    795c:	bc10      	.short	0xbc10
    795e:	04          	.byte	0x04
    795f:	00          	.byte	0x00
    7960:	4a41      	ldr	r2, [pc, #260]	; (7a68 <ProcessAesDrv+0x2f4>)
    7962:	4b42      	ldr	r3, [pc, #264]	; (7a6c <ProcessAesDrv+0x2f8>)
    7964:	6811      	ldr	r1, [r2, #0]
    7966:	3208      	adds	r2, #8
    7968:	6021      	str	r1, [r4, #0]
    796a:	6819      	ldr	r1, [r3, #0]
    796c:	3308      	adds	r3, #8
    796e:	6061      	str	r1, [r4, #4]
    7970:	6812      	ldr	r2, [r2, #0]
    7972:	60a2      	str	r2, [r4, #8]
    7974:	681b      	ldr	r3, [r3, #0]
    7976:	60e3      	str	r3, [r4, #12]
    7978:	2301      	movs	r3, #1
    797a:	65a3      	str	r3, [r4, #88]	; 0x58
    797c:	e733      	b.n	77e6 <ProcessAesDrv+0x72>
    797e:	4844      	ldr	r0, [pc, #272]	; (7a90 <ProcessAesDrv+0x31c>)
    7980:	f7fd fe92 	bl	56a8 <CC_PalAbort>
    7984:	2000      	movs	r0, #0
    7986:	f7fe fa51 	bl	5e2c <CC_PalPowerSaveModeSelect>
    798a:	2800      	cmp	r0, #0
    798c:	f43f af1d 	beq.w	77ca <ProcessAesDrv+0x56>
    7990:	4840      	ldr	r0, [pc, #256]	; (7a94 <ProcessAesDrv+0x320>)
    7992:	f7fd fe89 	bl	56a8 <CC_PalAbort>
    7996:	e718      	b.n	77ca <ProcessAesDrv+0x56>
    7998:	483f      	ldr	r0, [pc, #252]	; (7a98 <ProcessAesDrv+0x324>)
    799a:	f7fd fe85 	bl	56a8 <CC_PalAbort>
    799e:	4648      	mov	r0, r9
    79a0:	b007      	add	sp, #28
    79a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    79a6:	483d      	ldr	r0, [pc, #244]	; (7a9c <ProcessAesDrv+0x328>)
    79a8:	f7fd fe7e 	bl	56a8 <CC_PalAbort>
    79ac:	e73c      	b.n	7828 <ProcessAesDrv+0xb4>
    79ae:	2304      	movs	r3, #4
    79b0:	2120      	movs	r1, #32
    79b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    79b6:	f104 0010 	add.w	r0, r4, #16
    79ba:	f7ff faeb 	bl	6f94 <CC_PalMemSetZeroPlat>
    79be:	e71a      	b.n	77f6 <ProcessAesDrv+0x82>
    79c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    79c2:	6c20      	ldr	r0, [r4, #64]	; 0x40
    79c4:	f000 f9d2 	bl	7d6c <kmu_validate_slot_and_size>
    79c8:	b9e8      	cbnz	r0, 7a06 <ProcessAesDrv+0x292>
    79ca:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 7abc <ProcessAesDrv+0x348>
    79ce:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 7ac0 <ProcessAesDrv+0x34c>
    79d2:	f8d8 3000 	ldr.w	r3, [r8]
    79d6:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 7ac4 <ProcessAesDrv+0x350>
    79da:	681b      	ldr	r3, [r3, #0]
    79dc:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 7ac8 <ProcessAesDrv+0x354>
    79e0:	f8cb 3000 	str.w	r3, [fp]
    79e4:	f8d8 3000 	ldr.w	r3, [r8]
    79e8:	4a2d      	ldr	r2, [pc, #180]	; (7aa0 <ProcessAesDrv+0x32c>)
    79ea:	685b      	ldr	r3, [r3, #4]
    79ec:	f8ca 3000 	str.w	r3, [sl]
    79f0:	f8d8 3000 	ldr.w	r3, [r8]
    79f4:	689b      	ldr	r3, [r3, #8]
    79f6:	f8c9 3000 	str.w	r3, [r9]
    79fa:	f8d8 3000 	ldr.w	r3, [r8]
    79fe:	68db      	ldr	r3, [r3, #12]
    7a00:	6013      	str	r3, [r2, #0]
    7a02:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7a04:	b171      	cbz	r1, 7a24 <ProcessAesDrv+0x2b0>
    7a06:	f04f 0801 	mov.w	r8, #1
    7a0a:	e6d0      	b.n	77ae <ProcessAesDrv+0x3a>
    7a0c:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 7acc <ProcessAesDrv+0x358>
    7a10:	e6e9      	b.n	77e6 <ProcessAesDrv+0x72>
    7a12:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
    7a16:	e70d      	b.n	7834 <ProcessAesDrv+0xc0>
    7a18:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7a1a:	2b01      	cmp	r3, #1
    7a1c:	bf0c      	ite	eq
    7a1e:	2040      	moveq	r0, #64	; 0x40
    7a20:	2010      	movne	r0, #16
    7a22:	e788      	b.n	7936 <ProcessAesDrv+0x1c2>
    7a24:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
    7a28:	9300      	str	r3, [sp, #0]
    7a2a:	2310      	movs	r3, #16
    7a2c:	f104 0010 	add.w	r0, r4, #16
    7a30:	e9cd 2001 	strd	r2, r0, [sp, #4]
    7a34:	9303      	str	r3, [sp, #12]
    7a36:	9005      	str	r0, [sp, #20]
    7a38:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
    7a3c:	6c20      	ldr	r0, [r4, #64]	; 0x40
    7a3e:	f000 fa8b 	bl	7f58 <kmu_derive_cmac>
    7a42:	2800      	cmp	r0, #0
    7a44:	d14a      	bne.n	7adc <ProcessAesDrv+0x368>
    7a46:	2300      	movs	r3, #0
    7a48:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    7a4c:	e7db      	b.n	7a06 <ProcessAesDrv+0x292>
    7a4e:	6821      	ldr	r1, [r4, #0]
    7a50:	4a14      	ldr	r2, [pc, #80]	; (7aa4 <ProcessAesDrv+0x330>)
    7a52:	4b15      	ldr	r3, [pc, #84]	; (7aa8 <ProcessAesDrv+0x334>)
    7a54:	e745      	b.n	78e2 <ProcessAesDrv+0x16e>
    7a56:	bf00      	nop
    7a58:	200000bc 	.word	0x200000bc
    7a5c:	50841810 	.word	0x50841810
    7a60:	50841910 	.word	0x50841910
    7a64:	50841a04 	.word	0x50841a04
    7a68:	50841440 	.word	0x50841440
    7a6c:	50841444 	.word	0x50841444
    7a70:	50841d28 	.word	0x50841d28
    7a74:	50841d2c 	.word	0x50841d2c
    7a78:	50841d30 	.word	0x50841d30
    7a7c:	50841d34 	.word	0x50841d34
    7a80:	50841c2c 	.word	0x50841c2c
    7a84:	50841c34 	.word	0x50841c34
    7a88:	50841c28 	.word	0x50841c28
    7a8c:	50841c30 	.word	0x50841c30
    7a90:	00008e64 	.word	0x00008e64
    7a94:	00008e7c 	.word	0x00008e7c
    7a98:	00008ebc 	.word	0x00008ebc
    7a9c:	00008e9c 	.word	0x00008e9c
    7aa0:	5084140c 	.word	0x5084140c
    7aa4:	50841460 	.word	0x50841460
    7aa8:	50841464 	.word	0x50841464
    7aac:	00f10001 	.word	0x00f10001
    7ab0:	00f10005 	.word	0x00f10005
    7ab4:	00f1000b 	.word	0x00f1000b
    7ab8:	00f10003 	.word	0x00f10003
    7abc:	200000ac 	.word	0x200000ac
    7ac0:	50841400 	.word	0x50841400
    7ac4:	50841404 	.word	0x50841404
    7ac8:	50841408 	.word	0x50841408
    7acc:	00f10002 	.word	0x00f10002
    7ad0:	4a0f      	ldr	r2, [pc, #60]	; (7b10 <ProcessAesDrv+0x39c>)
    7ad2:	4b10      	ldr	r3, [pc, #64]	; (7b14 <ProcessAesDrv+0x3a0>)
    7ad4:	e746      	b.n	7964 <ProcessAesDrv+0x1f0>
    7ad6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 7b1c <ProcessAesDrv+0x3a8>
    7ada:	e684      	b.n	77e6 <ProcessAesDrv+0x72>
    7adc:	f8d8 3000 	ldr.w	r3, [r8]
    7ae0:	9805      	ldr	r0, [sp, #20]
    7ae2:	681b      	ldr	r3, [r3, #0]
    7ae4:	4a0c      	ldr	r2, [pc, #48]	; (7b18 <ProcessAesDrv+0x3a4>)
    7ae6:	f8cb 3000 	str.w	r3, [fp]
    7aea:	f8d8 3000 	ldr.w	r3, [r8]
    7aee:	2110      	movs	r1, #16
    7af0:	685b      	ldr	r3, [r3, #4]
    7af2:	f8ca 3000 	str.w	r3, [sl]
    7af6:	f8d8 3000 	ldr.w	r3, [r8]
    7afa:	689b      	ldr	r3, [r3, #8]
    7afc:	f8c9 3000 	str.w	r3, [r9]
    7b00:	f8d8 3000 	ldr.w	r3, [r8]
    7b04:	68db      	ldr	r3, [r3, #12]
    7b06:	6013      	str	r3, [r2, #0]
    7b08:	f7ff fa44 	bl	6f94 <CC_PalMemSetZeroPlat>
    7b0c:	e79b      	b.n	7a46 <ProcessAesDrv+0x2d2>
    7b0e:	bf00      	nop
    7b10:	50841460 	.word	0x50841460
    7b14:	50841464 	.word	0x50841464
    7b18:	5084140c 	.word	0x5084140c
    7b1c:	00f10004 	.word	0x00f10004

00007b20 <FinishAesDrv>:
    7b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b24:	b301      	cbz	r1, 7b68 <FinishAesDrv+0x48>
    7b26:	b1fa      	cbz	r2, 7b68 <FinishAesDrv+0x48>
    7b28:	4604      	mov	r4, r0
    7b2a:	2800      	cmp	r0, #0
    7b2c:	d07a      	beq.n	7c24 <FinishAesDrv+0x104>
    7b2e:	461d      	mov	r5, r3
    7b30:	6b43      	ldr	r3, [r0, #52]	; 0x34
    7b32:	460e      	mov	r6, r1
    7b34:	2b07      	cmp	r3, #7
    7b36:	d01b      	beq.n	7b70 <FinishAesDrv+0x50>
    7b38:	b95d      	cbnz	r5, 7b52 <FinishAesDrv+0x32>
    7b3a:	2b03      	cmp	r3, #3
    7b3c:	d110      	bne.n	7b60 <FinishAesDrv+0x40>
    7b3e:	6d83      	ldr	r3, [r0, #88]	; 0x58
    7b40:	b973      	cbnz	r3, 7b60 <FinishAesDrv+0x40>
    7b42:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
    7b46:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
    7b4a:	2510      	movs	r5, #16
    7b4c:	f100 0364 	add.w	r3, r0, #100	; 0x64
    7b50:	600b      	str	r3, [r1, #0]
    7b52:	462b      	mov	r3, r5
    7b54:	4631      	mov	r1, r6
    7b56:	4620      	mov	r0, r4
    7b58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7b5c:	f7ff be0a 	b.w	7774 <ProcessAesDrv>
    7b60:	462f      	mov	r7, r5
    7b62:	4638      	mov	r0, r7
    7b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b68:	4f68      	ldr	r7, [pc, #416]	; (7d0c <FinishAesDrv+0x1ec>)
    7b6a:	4638      	mov	r0, r7
    7b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b70:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    7b72:	2b00      	cmp	r3, #0
    7b74:	d159      	bne.n	7c2a <FinishAesDrv+0x10a>
    7b76:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    7b7a:	d25b      	bcs.n	7c34 <FinishAesDrv+0x114>
    7b7c:	b915      	cbnz	r5, 7b84 <FinishAesDrv+0x64>
    7b7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
    7b80:	2b00      	cmp	r3, #0
    7b82:	d157      	bne.n	7c34 <FinishAesDrv+0x114>
    7b84:	f04f 31ff 	mov.w	r1, #4294967295
    7b88:	4861      	ldr	r0, [pc, #388]	; (7d10 <FinishAesDrv+0x1f0>)
    7b8a:	f7fe f91f 	bl	5dcc <CC_PalMutexLock>
    7b8e:	2800      	cmp	r0, #0
    7b90:	f040 809a 	bne.w	7cc8 <FinishAesDrv+0x1a8>
    7b94:	2000      	movs	r0, #0
    7b96:	f7fe f949 	bl	5e2c <CC_PalPowerSaveModeSelect>
    7b9a:	2800      	cmp	r0, #0
    7b9c:	f040 8090 	bne.w	7cc0 <FinishAesDrv+0x1a0>
    7ba0:	2101      	movs	r1, #1
    7ba2:	4b5c      	ldr	r3, [pc, #368]	; (7d14 <FinishAesDrv+0x1f4>)
    7ba4:	4a5c      	ldr	r2, [pc, #368]	; (7d18 <FinishAesDrv+0x1f8>)
    7ba6:	6019      	str	r1, [r3, #0]
    7ba8:	6813      	ldr	r3, [r2, #0]
    7baa:	2b00      	cmp	r3, #0
    7bac:	d1fc      	bne.n	7ba8 <FinishAesDrv+0x88>
    7bae:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7bb0:	2b03      	cmp	r3, #3
    7bb2:	dd20      	ble.n	7bf6 <FinishAesDrv+0xd6>
    7bb4:	3b06      	subs	r3, #6
    7bb6:	2b01      	cmp	r3, #1
    7bb8:	d81f      	bhi.n	7bfa <FinishAesDrv+0xda>
    7bba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7bbc:	2b01      	cmp	r3, #1
    7bbe:	d83b      	bhi.n	7c38 <FinishAesDrv+0x118>
    7bc0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7bc2:	2b01      	cmp	r3, #1
    7bc4:	f200 8088 	bhi.w	7cd8 <FinishAesDrv+0x1b8>
    7bc8:	6e23      	ldr	r3, [r4, #96]	; 0x60
    7bca:	2b01      	cmp	r3, #1
    7bcc:	f200 8086 	bhi.w	7cdc <FinishAesDrv+0x1bc>
    7bd0:	4620      	mov	r0, r4
    7bd2:	f7ff fd53 	bl	767c <InitAes.part.0>
    7bd6:	4607      	mov	r7, r0
    7bd8:	b980      	cbnz	r0, 7bfc <FinishAesDrv+0xdc>
    7bda:	4620      	mov	r0, r4
    7bdc:	f7ff fcdc 	bl	7598 <LoadAesKey>
    7be0:	4607      	mov	r7, r0
    7be2:	b958      	cbnz	r0, 7bfc <FinishAesDrv+0xdc>
    7be4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7be6:	2b07      	cmp	r3, #7
    7be8:	d807      	bhi.n	7bfa <FinishAesDrv+0xda>
    7bea:	e8df f003 	tbb	[pc, r3]
    7bee:	2731      	.short	0x2731
    7bf0:	06062755 	.word	0x06062755
    7bf4:	2755      	.short	0x2755
    7bf6:	2b00      	cmp	r3, #0
    7bf8:	dadf      	bge.n	7bba <FinishAesDrv+0x9a>
    7bfa:	4f48      	ldr	r7, [pc, #288]	; (7d1c <FinishAesDrv+0x1fc>)
    7bfc:	4a46      	ldr	r2, [pc, #280]	; (7d18 <FinishAesDrv+0x1f8>)
    7bfe:	6813      	ldr	r3, [r2, #0]
    7c00:	2b00      	cmp	r3, #0
    7c02:	d1fc      	bne.n	7bfe <FinishAesDrv+0xde>
    7c04:	4a43      	ldr	r2, [pc, #268]	; (7d14 <FinishAesDrv+0x1f4>)
    7c06:	2001      	movs	r0, #1
    7c08:	6013      	str	r3, [r2, #0]
    7c0a:	f7fe f90f 	bl	5e2c <CC_PalPowerSaveModeSelect>
    7c0e:	2800      	cmp	r0, #0
    7c10:	d15e      	bne.n	7cd0 <FinishAesDrv+0x1b0>
    7c12:	483f      	ldr	r0, [pc, #252]	; (7d10 <FinishAesDrv+0x1f0>)
    7c14:	f7fe f8e2 	bl	5ddc <CC_PalMutexUnlock>
    7c18:	2800      	cmp	r0, #0
    7c1a:	d0a2      	beq.n	7b62 <FinishAesDrv+0x42>
    7c1c:	4840      	ldr	r0, [pc, #256]	; (7d20 <FinishAesDrv+0x200>)
    7c1e:	f7fd fd43 	bl	56a8 <CC_PalAbort>
    7c22:	e79e      	b.n	7b62 <FinishAesDrv+0x42>
    7c24:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
    7c28:	e79b      	b.n	7b62 <FinishAesDrv+0x42>
    7c2a:	2b01      	cmp	r3, #1
    7c2c:	d1a6      	bne.n	7b7c <FinishAesDrv+0x5c>
    7c2e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    7c32:	d3a3      	bcc.n	7b7c <FinishAesDrv+0x5c>
    7c34:	4f3b      	ldr	r7, [pc, #236]	; (7d24 <FinishAesDrv+0x204>)
    7c36:	e794      	b.n	7b62 <FinishAesDrv+0x42>
    7c38:	4f3b      	ldr	r7, [pc, #236]	; (7d28 <FinishAesDrv+0x208>)
    7c3a:	e7df      	b.n	7bfc <FinishAesDrv+0xdc>
    7c3c:	6821      	ldr	r1, [r4, #0]
    7c3e:	4a3b      	ldr	r2, [pc, #236]	; (7d2c <FinishAesDrv+0x20c>)
    7c40:	4b3b      	ldr	r3, [pc, #236]	; (7d30 <FinishAesDrv+0x210>)
    7c42:	6011      	str	r1, [r2, #0]
    7c44:	6861      	ldr	r1, [r4, #4]
    7c46:	6019      	str	r1, [r3, #0]
    7c48:	68a1      	ldr	r1, [r4, #8]
    7c4a:	6091      	str	r1, [r2, #8]
    7c4c:	68e2      	ldr	r2, [r4, #12]
    7c4e:	609a      	str	r2, [r3, #8]
    7c50:	2301      	movs	r3, #1
    7c52:	4938      	ldr	r1, [pc, #224]	; (7d34 <FinishAesDrv+0x214>)
    7c54:	4a38      	ldr	r2, [pc, #224]	; (7d38 <FinishAesDrv+0x218>)
    7c56:	600b      	str	r3, [r1, #0]
    7c58:	6015      	str	r5, [r2, #0]
    7c5a:	2d00      	cmp	r5, #0
    7c5c:	d140      	bne.n	7ce0 <FinishAesDrv+0x1c0>
    7c5e:	6da2      	ldr	r2, [r4, #88]	; 0x58
    7c60:	b90a      	cbnz	r2, 7c66 <FinishAesDrv+0x146>
    7c62:	4a36      	ldr	r2, [pc, #216]	; (7d3c <FinishAesDrv+0x21c>)
    7c64:	6013      	str	r3, [r2, #0]
    7c66:	4b2c      	ldr	r3, [pc, #176]	; (7d18 <FinishAesDrv+0x1f8>)
    7c68:	681f      	ldr	r7, [r3, #0]
    7c6a:	2f00      	cmp	r7, #0
    7c6c:	d1fc      	bne.n	7c68 <FinishAesDrv+0x148>
    7c6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7c70:	3b01      	subs	r3, #1
    7c72:	2b06      	cmp	r3, #6
    7c74:	d8c2      	bhi.n	7bfc <FinishAesDrv+0xdc>
    7c76:	a201      	add	r2, pc, #4	; (adr r2, 7c7c <FinishAesDrv+0x15c>)
    7c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7c7c:	00007ca1 	.word	0x00007ca1
    7c80:	00007cbb 	.word	0x00007cbb
    7c84:	00007ca1 	.word	0x00007ca1
    7c88:	00007bfd 	.word	0x00007bfd
    7c8c:	00007bfd 	.word	0x00007bfd
    7c90:	00007cbb 	.word	0x00007cbb
    7c94:	00007ca1 	.word	0x00007ca1
    7c98:	6821      	ldr	r1, [r4, #0]
    7c9a:	4a29      	ldr	r2, [pc, #164]	; (7d40 <FinishAesDrv+0x220>)
    7c9c:	4b29      	ldr	r3, [pc, #164]	; (7d44 <FinishAesDrv+0x224>)
    7c9e:	e7d0      	b.n	7c42 <FinishAesDrv+0x122>
    7ca0:	4a22      	ldr	r2, [pc, #136]	; (7d2c <FinishAesDrv+0x20c>)
    7ca2:	4b23      	ldr	r3, [pc, #140]	; (7d30 <FinishAesDrv+0x210>)
    7ca4:	6811      	ldr	r1, [r2, #0]
    7ca6:	3208      	adds	r2, #8
    7ca8:	6021      	str	r1, [r4, #0]
    7caa:	6819      	ldr	r1, [r3, #0]
    7cac:	3308      	adds	r3, #8
    7cae:	6061      	str	r1, [r4, #4]
    7cb0:	6812      	ldr	r2, [r2, #0]
    7cb2:	60a2      	str	r2, [r4, #8]
    7cb4:	681b      	ldr	r3, [r3, #0]
    7cb6:	60e3      	str	r3, [r4, #12]
    7cb8:	e7a0      	b.n	7bfc <FinishAesDrv+0xdc>
    7cba:	4a21      	ldr	r2, [pc, #132]	; (7d40 <FinishAesDrv+0x220>)
    7cbc:	4b21      	ldr	r3, [pc, #132]	; (7d44 <FinishAesDrv+0x224>)
    7cbe:	e7f1      	b.n	7ca4 <FinishAesDrv+0x184>
    7cc0:	4821      	ldr	r0, [pc, #132]	; (7d48 <FinishAesDrv+0x228>)
    7cc2:	f7fd fcf1 	bl	56a8 <CC_PalAbort>
    7cc6:	e76b      	b.n	7ba0 <FinishAesDrv+0x80>
    7cc8:	4820      	ldr	r0, [pc, #128]	; (7d4c <FinishAesDrv+0x22c>)
    7cca:	f7fd fced 	bl	56a8 <CC_PalAbort>
    7cce:	e761      	b.n	7b94 <FinishAesDrv+0x74>
    7cd0:	481f      	ldr	r0, [pc, #124]	; (7d50 <FinishAesDrv+0x230>)
    7cd2:	f7fd fce9 	bl	56a8 <CC_PalAbort>
    7cd6:	e79c      	b.n	7c12 <FinishAesDrv+0xf2>
    7cd8:	4f1e      	ldr	r7, [pc, #120]	; (7d54 <FinishAesDrv+0x234>)
    7cda:	e78f      	b.n	7bfc <FinishAesDrv+0xdc>
    7cdc:	4f1e      	ldr	r7, [pc, #120]	; (7d58 <FinishAesDrv+0x238>)
    7cde:	e78d      	b.n	7bfc <FinishAesDrv+0xdc>
    7ce0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    7ce2:	6833      	ldr	r3, [r6, #0]
    7ce4:	2a01      	cmp	r2, #1
    7ce6:	d00a      	beq.n	7cfe <FinishAesDrv+0x1de>
    7ce8:	2010      	movs	r0, #16
    7cea:	491c      	ldr	r1, [pc, #112]	; (7d5c <FinishAesDrv+0x23c>)
    7cec:	4a1c      	ldr	r2, [pc, #112]	; (7d60 <FinishAesDrv+0x240>)
    7cee:	600b      	str	r3, [r1, #0]
    7cf0:	6015      	str	r5, [r2, #0]
    7cf2:	f7fd ffd9 	bl	5ca8 <CC_HalWaitInterrupt>
    7cf6:	4607      	mov	r7, r0
    7cf8:	2800      	cmp	r0, #0
    7cfa:	d0b4      	beq.n	7c66 <FinishAesDrv+0x146>
    7cfc:	e77e      	b.n	7bfc <FinishAesDrv+0xdc>
    7cfe:	4919      	ldr	r1, [pc, #100]	; (7d64 <FinishAesDrv+0x244>)
    7d00:	4a19      	ldr	r2, [pc, #100]	; (7d68 <FinishAesDrv+0x248>)
    7d02:	600b      	str	r3, [r1, #0]
    7d04:	2040      	movs	r0, #64	; 0x40
    7d06:	6015      	str	r5, [r2, #0]
    7d08:	e7f3      	b.n	7cf2 <FinishAesDrv+0x1d2>
    7d0a:	bf00      	nop
    7d0c:	00f1000b 	.word	0x00f1000b
    7d10:	200000bc 	.word	0x200000bc
    7d14:	50841810 	.word	0x50841810
    7d18:	50841910 	.word	0x50841910
    7d1c:	00f10001 	.word	0x00f10001
    7d20:	00008ebc 	.word	0x00008ebc
    7d24:	00f10005 	.word	0x00f10005
    7d28:	00f10002 	.word	0x00f10002
    7d2c:	50841440 	.word	0x50841440
    7d30:	50841444 	.word	0x50841444
    7d34:	5084147c 	.word	0x5084147c
    7d38:	508414bc 	.word	0x508414bc
    7d3c:	50841524 	.word	0x50841524
    7d40:	50841460 	.word	0x50841460
    7d44:	50841464 	.word	0x50841464
    7d48:	00008e7c 	.word	0x00008e7c
    7d4c:	00008e64 	.word	0x00008e64
    7d50:	00008e9c 	.word	0x00008e9c
    7d54:	00f10003 	.word	0x00f10003
    7d58:	00f10004 	.word	0x00f10004
    7d5c:	50841c30 	.word	0x50841c30
    7d60:	50841c34 	.word	0x50841c34
    7d64:	50841c28 	.word	0x50841c28
    7d68:	50841c2c 	.word	0x50841c2c

00007d6c <kmu_validate_slot_and_size>:
    7d6c:	287f      	cmp	r0, #127	; 0x7f
    7d6e:	d80c      	bhi.n	7d8a <kmu_validate_slot_and_size+0x1e>
    7d70:	b149      	cbz	r1, 7d86 <kmu_validate_slot_and_size+0x1a>
    7d72:	2903      	cmp	r1, #3
    7d74:	d001      	beq.n	7d7a <kmu_validate_slot_and_size+0xe>
    7d76:	4806      	ldr	r0, [pc, #24]	; (7d90 <kmu_validate_slot_and_size+0x24>)
    7d78:	4770      	bx	lr
    7d7a:	4906      	ldr	r1, [pc, #24]	; (7d94 <kmu_validate_slot_and_size+0x28>)
    7d7c:	287f      	cmp	r0, #127	; 0x7f
    7d7e:	bf0c      	ite	eq
    7d80:	4608      	moveq	r0, r1
    7d82:	2000      	movne	r0, #0
    7d84:	4770      	bx	lr
    7d86:	4608      	mov	r0, r1
    7d88:	4770      	bx	lr
    7d8a:	4802      	ldr	r0, [pc, #8]	; (7d94 <kmu_validate_slot_and_size+0x28>)
    7d8c:	4770      	bx	lr
    7d8e:	bf00      	nop
    7d90:	00f70003 	.word	0x00f70003
    7d94:	00f70001 	.word	0x00f70001

00007d98 <kmu_validate_slot_and_size_no_kdr>:
    7d98:	b470      	push	{r4, r5, r6}
    7d9a:	2400      	movs	r4, #0
    7d9c:	4a19      	ldr	r2, [pc, #100]	; (7e04 <kmu_validate_slot_and_size_no_kdr+0x6c>)
    7d9e:	00c3      	lsls	r3, r0, #3
    7da0:	1c45      	adds	r5, r0, #1
    7da2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    7da6:	f8c2 5500 	str.w	r5, [r2, #1280]	; 0x500
    7daa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
    7dae:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
    7db2:	b083      	sub	sp, #12
    7db4:	9600      	str	r6, [sp, #0]
    7db6:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
    7dba:	4d13      	ldr	r5, [pc, #76]	; (7e08 <kmu_validate_slot_and_size_no_kdr+0x70>)
    7dbc:	9e00      	ldr	r6, [sp, #0]
    7dbe:	42ae      	cmp	r6, r5
    7dc0:	d015      	beq.n	7dee <kmu_validate_slot_and_size_no_kdr+0x56>
    7dc2:	b191      	cbz	r1, 7dea <kmu_validate_slot_and_size_no_kdr+0x52>
    7dc4:	1c86      	adds	r6, r0, #2
    7dc6:	f8c2 6500 	str.w	r6, [r2, #1280]	; 0x500
    7dca:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
    7dce:	9301      	str	r3, [sp, #4]
    7dd0:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
    7dd4:	9b01      	ldr	r3, [sp, #4]
    7dd6:	42ab      	cmp	r3, r5
    7dd8:	d009      	beq.n	7dee <kmu_validate_slot_and_size_no_kdr+0x56>
    7dda:	287f      	cmp	r0, #127	; 0x7f
    7ddc:	d807      	bhi.n	7dee <kmu_validate_slot_and_size_no_kdr+0x56>
    7dde:	2903      	cmp	r1, #3
    7de0:	d10b      	bne.n	7dfa <kmu_validate_slot_and_size_no_kdr+0x62>
    7de2:	287f      	cmp	r0, #127	; 0x7f
    7de4:	d003      	beq.n	7dee <kmu_validate_slot_and_size_no_kdr+0x56>
    7de6:	4620      	mov	r0, r4
    7de8:	e002      	b.n	7df0 <kmu_validate_slot_and_size_no_kdr+0x58>
    7dea:	287f      	cmp	r0, #127	; 0x7f
    7dec:	d903      	bls.n	7df6 <kmu_validate_slot_and_size_no_kdr+0x5e>
    7dee:	4807      	ldr	r0, [pc, #28]	; (7e0c <kmu_validate_slot_and_size_no_kdr+0x74>)
    7df0:	b003      	add	sp, #12
    7df2:	bc70      	pop	{r4, r5, r6}
    7df4:	4770      	bx	lr
    7df6:	4608      	mov	r0, r1
    7df8:	e7fa      	b.n	7df0 <kmu_validate_slot_and_size_no_kdr+0x58>
    7dfa:	4805      	ldr	r0, [pc, #20]	; (7e10 <kmu_validate_slot_and_size_no_kdr+0x78>)
    7dfc:	b003      	add	sp, #12
    7dfe:	bc70      	pop	{r4, r5, r6}
    7e00:	4770      	bx	lr
    7e02:	bf00      	nop
    7e04:	50039000 	.word	0x50039000
    7e08:	50841a50 	.word	0x50841a50
    7e0c:	00f70001 	.word	0x00f70001
    7e10:	00f70003 	.word	0x00f70003

00007e14 <kmu_validate_kdr_slot_and_size>:
    7e14:	b9a9      	cbnz	r1, 7e42 <kmu_validate_kdr_slot_and_size+0x2e>
    7e16:	b410      	push	{r4}
    7e18:	4b0b      	ldr	r3, [pc, #44]	; (7e48 <kmu_validate_kdr_slot_and_size+0x34>)
    7e1a:	1c44      	adds	r4, r0, #1
    7e1c:	4a0b      	ldr	r2, [pc, #44]	; (7e4c <kmu_validate_kdr_slot_and_size+0x38>)
    7e1e:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    7e22:	3080      	adds	r0, #128	; 0x80
    7e24:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    7e28:	b083      	sub	sp, #12
    7e2a:	9001      	str	r0, [sp, #4]
    7e2c:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    7e30:	4a07      	ldr	r2, [pc, #28]	; (7e50 <kmu_validate_kdr_slot_and_size+0x3c>)
    7e32:	9b01      	ldr	r3, [sp, #4]
    7e34:	4807      	ldr	r0, [pc, #28]	; (7e54 <kmu_validate_kdr_slot_and_size+0x40>)
    7e36:	4293      	cmp	r3, r2
    7e38:	bf08      	it	eq
    7e3a:	2000      	moveq	r0, #0
    7e3c:	b003      	add	sp, #12
    7e3e:	bc10      	pop	{r4}
    7e40:	4770      	bx	lr
    7e42:	4805      	ldr	r0, [pc, #20]	; (7e58 <kmu_validate_kdr_slot_and_size+0x44>)
    7e44:	4770      	bx	lr
    7e46:	bf00      	nop
    7e48:	50039000 	.word	0x50039000
    7e4c:	00ff8000 	.word	0x00ff8000
    7e50:	50841a50 	.word	0x50841a50
    7e54:	00f70001 	.word	0x00f70001
    7e58:	00f70003 	.word	0x00f70003

00007e5c <kmu_use_kdr_key>:
    7e5c:	2000      	movs	r0, #0
    7e5e:	2201      	movs	r2, #1
    7e60:	4902      	ldr	r1, [pc, #8]	; (7e6c <kmu_use_kdr_key+0x10>)
    7e62:	4b03      	ldr	r3, [pc, #12]	; (7e70 <kmu_use_kdr_key+0x14>)
    7e64:	6008      	str	r0, [r1, #0]
    7e66:	601a      	str	r2, [r3, #0]
    7e68:	4770      	bx	lr
    7e6a:	bf00      	nop
    7e6c:	50841a38 	.word	0x50841a38
    7e70:	50841478 	.word	0x50841478

00007e74 <kmu_load_key_aes>:
    7e74:	b109      	cbz	r1, 7e7a <kmu_load_key_aes+0x6>
    7e76:	4830      	ldr	r0, [pc, #192]	; (7f38 <kmu_load_key_aes+0xc4>)
    7e78:	4770      	bx	lr
    7e7a:	b430      	push	{r4, r5}
    7e7c:	2401      	movs	r4, #1
    7e7e:	4b2f      	ldr	r3, [pc, #188]	; (7f3c <kmu_load_key_aes+0xc8>)
    7e80:	4a2f      	ldr	r2, [pc, #188]	; (7f40 <kmu_load_key_aes+0xcc>)
    7e82:	b084      	sub	sp, #16
    7e84:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
    7e88:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
    7e8c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    7e90:	1905      	adds	r5, r0, r4
    7e92:	9202      	str	r2, [sp, #8]
    7e94:	9a02      	ldr	r2, [sp, #8]
    7e96:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    7e9a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    7e9e:	3080      	adds	r0, #128	; 0x80
    7ea0:	9202      	str	r2, [sp, #8]
    7ea2:	9a02      	ldr	r2, [sp, #8]
    7ea4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    7ea8:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    7eac:	4a25      	ldr	r2, [pc, #148]	; (7f44 <kmu_load_key_aes+0xd0>)
    7eae:	9102      	str	r1, [sp, #8]
    7eb0:	9902      	ldr	r1, [sp, #8]
    7eb2:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
    7eb6:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
    7eba:	4a23      	ldr	r2, [pc, #140]	; (7f48 <kmu_load_key_aes+0xd4>)
    7ebc:	9103      	str	r1, [sp, #12]
    7ebe:	9903      	ldr	r1, [sp, #12]
    7ec0:	4291      	cmp	r1, r2
    7ec2:	d132      	bne.n	7f2a <kmu_load_key_aes+0xb6>
    7ec4:	461a      	mov	r2, r3
    7ec6:	601c      	str	r4, [r3, #0]
    7ec8:	e005      	b.n	7ed6 <kmu_load_key_aes+0x62>
    7eca:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7ece:	b9db      	cbnz	r3, 7f08 <kmu_load_key_aes+0x94>
    7ed0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7ed4:	b9c3      	cbnz	r3, 7f08 <kmu_load_key_aes+0x94>
    7ed6:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    7eda:	3b00      	subs	r3, #0
    7edc:	bf18      	it	ne
    7ede:	2301      	movne	r3, #1
    7ee0:	f88d 3005 	strb.w	r3, [sp, #5]
    7ee4:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
    7ee8:	3b00      	subs	r3, #0
    7eea:	bf18      	it	ne
    7eec:	2301      	movne	r3, #1
    7eee:	f88d 3006 	strb.w	r3, [sp, #6]
    7ef2:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    7ef6:	3b00      	subs	r3, #0
    7ef8:	bf18      	it	ne
    7efa:	2301      	movne	r3, #1
    7efc:	f88d 3007 	strb.w	r3, [sp, #7]
    7f00:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7f04:	2b00      	cmp	r3, #0
    7f06:	d0e0      	beq.n	7eca <kmu_load_key_aes+0x56>
    7f08:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7f0c:	b98b      	cbnz	r3, 7f32 <kmu_load_key_aes+0xbe>
    7f0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7f12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    7f16:	b933      	cbnz	r3, 7f26 <kmu_load_key_aes+0xb2>
    7f18:	4610      	mov	r0, r2
    7f1a:	4b08      	ldr	r3, [pc, #32]	; (7f3c <kmu_load_key_aes+0xc8>)
    7f1c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    7f20:	b004      	add	sp, #16
    7f22:	bc30      	pop	{r4, r5}
    7f24:	4770      	bx	lr
    7f26:	4809      	ldr	r0, [pc, #36]	; (7f4c <kmu_load_key_aes+0xd8>)
    7f28:	e7fa      	b.n	7f20 <kmu_load_key_aes+0xac>
    7f2a:	4809      	ldr	r0, [pc, #36]	; (7f50 <kmu_load_key_aes+0xdc>)
    7f2c:	b004      	add	sp, #16
    7f2e:	bc30      	pop	{r4, r5}
    7f30:	4770      	bx	lr
    7f32:	4808      	ldr	r0, [pc, #32]	; (7f54 <kmu_load_key_aes+0xe0>)
    7f34:	e7f4      	b.n	7f20 <kmu_load_key_aes+0xac>
    7f36:	bf00      	nop
    7f38:	00f1000c 	.word	0x00f1000c
    7f3c:	50039000 	.word	0x50039000
    7f40:	50840000 	.word	0x50840000
    7f44:	00ff8000 	.word	0x00ff8000
    7f48:	50841400 	.word	0x50841400
    7f4c:	00f70002 	.word	0x00f70002
    7f50:	00f70006 	.word	0x00f70006
    7f54:	00f70001 	.word	0x00f70001

00007f58 <kmu_derive_cmac>:
    7f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f5c:	2400      	movs	r4, #0
    7f5e:	b0ce      	sub	sp, #312	; 0x138
    7f60:	4605      	mov	r5, r0
    7f62:	e9dd 9658 	ldrd	r9, r6, [sp, #352]	; 0x160
    7f66:	468a      	mov	sl, r1
    7f68:	4617      	mov	r7, r2
    7f6a:	4621      	mov	r1, r4
    7f6c:	2274      	movs	r2, #116	; 0x74
    7f6e:	a810      	add	r0, sp, #64	; 0x40
    7f70:	4698      	mov	r8, r3
    7f72:	f000 fafe 	bl	8572 <memset>
    7f76:	4621      	mov	r1, r4
    7f78:	2280      	movs	r2, #128	; 0x80
    7f7a:	a82e      	add	r0, sp, #184	; 0xb8
    7f7c:	942d      	str	r4, [sp, #180]	; 0xb4
    7f7e:	f000 faf8 	bl	8572 <memset>
    7f82:	2384      	movs	r3, #132	; 0x84
    7f84:	f5b6 6f7f 	cmp.w	r6, #4080	; 0xff0
    7f88:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    7f8c:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    7f90:	9306      	str	r3, [sp, #24]
    7f92:	d870      	bhi.n	8076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
    7f94:	ab06      	add	r3, sp, #24
    7f96:	ac2d      	add	r4, sp, #180	; 0xb4
    7f98:	9301      	str	r3, [sp, #4]
    7f9a:	4641      	mov	r1, r8
    7f9c:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
    7fa0:	4638      	mov	r0, r7
    7fa2:	9602      	str	r6, [sp, #8]
    7fa4:	9400      	str	r4, [sp, #0]
    7fa6:	f000 f87d 	bl	80a4 <UtilCmacBuildDataForDerivation>
    7faa:	2800      	cmp	r0, #0
    7fac:	d16a      	bne.n	8084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
    7fae:	2200      	movs	r2, #0
    7fb0:	2301      	movs	r3, #1
    7fb2:	2107      	movs	r1, #7
    7fb4:	2701      	movs	r7, #1
    7fb6:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
    7fba:	4b35      	ldr	r3, [pc, #212]	; (8090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>)
    7fbc:	911d      	str	r1, [sp, #116]	; 0x74
    7fbe:	4a35      	ldr	r2, [pc, #212]	; (8094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>)
    7fc0:	19e9      	adds	r1, r5, r7
    7fc2:	9520      	str	r5, [sp, #128]	; 0x80
    7fc4:	901e      	str	r0, [sp, #120]	; 0x78
    7fc6:	f8cd a070 	str.w	sl, [sp, #112]	; 0x70
    7fca:	9728      	str	r7, [sp, #160]	; 0xa0
    7fcc:	3580      	adds	r5, #128	; 0x80
    7fce:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    7fd2:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    7fd6:	9207      	str	r2, [sp, #28]
    7fd8:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    7fdc:	9a07      	ldr	r2, [sp, #28]
    7fde:	4b2e      	ldr	r3, [pc, #184]	; (8098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>)
    7fe0:	429a      	cmp	r2, r3
    7fe2:	d142      	bne.n	806a <CONFIG_FPROTECT_BLOCK_SIZE+0x6a>
    7fe4:	2203      	movs	r2, #3
    7fe6:	f10d 0317 	add.w	r3, sp, #23
    7fea:	701a      	strb	r2, [r3, #0]
    7fec:	781b      	ldrb	r3, [r3, #0]
    7fee:	2110      	movs	r1, #16
    7ff0:	a810      	add	r0, sp, #64	; 0x40
    7ff2:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    7ff6:	f7fe ffcd 	bl	6f94 <CC_PalMemSetZeroPlat>
    7ffa:	2210      	movs	r2, #16
    7ffc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    8000:	9200      	str	r2, [sp, #0]
    8002:	4620      	mov	r0, r4
    8004:	9906      	ldr	r1, [sp, #24]
    8006:	ab0c      	add	r3, sp, #48	; 0x30
    8008:	aa08      	add	r2, sp, #32
    800a:	f8cd 8004 	str.w	r8, [sp, #4]
    800e:	f7ff f899 	bl	7144 <SetDataBuffersInfo>
    8012:	4607      	mov	r7, r0
    8014:	bb00      	cbnz	r0, 8058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
    8016:	2401      	movs	r4, #1
    8018:	e010      	b.n	803c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
    801a:	2e10      	cmp	r6, #16
    801c:	4635      	mov	r5, r6
    801e:	bf28      	it	cs
    8020:	2510      	movcs	r5, #16
    8022:	a910      	add	r1, sp, #64	; 0x40
    8024:	462a      	mov	r2, r5
    8026:	f7fe ffb1 	bl	6f8c <CC_PalMemCopyPlat>
    802a:	2110      	movs	r1, #16
    802c:	a810      	add	r0, sp, #64	; 0x40
    802e:	f7fe ffb1 	bl	6f94 <CC_PalMemSetZeroPlat>
    8032:	3401      	adds	r4, #1
    8034:	1b76      	subs	r6, r6, r5
    8036:	442f      	add	r7, r5
    8038:	b2e4      	uxtb	r4, r4
    803a:	d021      	beq.n	8080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>
    803c:	9b06      	ldr	r3, [sp, #24]
    803e:	4642      	mov	r2, r8
    8040:	a908      	add	r1, sp, #32
    8042:	a810      	add	r0, sp, #64	; 0x40
    8044:	f88d 40b4 	strb.w	r4, [sp, #180]	; 0xb4
    8048:	f7ff fd6a 	bl	7b20 <FinishAesDrv>
    804c:	4603      	mov	r3, r0
    804e:	eb09 0007 	add.w	r0, r9, r7
    8052:	2b00      	cmp	r3, #0
    8054:	d0e1      	beq.n	801a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
    8056:	461f      	mov	r7, r3
    8058:	a810      	add	r0, sp, #64	; 0x40
    805a:	2274      	movs	r2, #116	; 0x74
    805c:	2100      	movs	r1, #0
    805e:	f7fe ff97 	bl	6f90 <CC_PalMemSetPlat>
    8062:	4638      	mov	r0, r7
    8064:	b04e      	add	sp, #312	; 0x138
    8066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    806a:	2202      	movs	r2, #2
    806c:	f10d 0317 	add.w	r3, sp, #23
    8070:	f88d 2017 	strb.w	r2, [sp, #23]
    8074:	e7ba      	b.n	7fec <kmu_derive_cmac+0x94>
    8076:	4f09      	ldr	r7, [pc, #36]	; (809c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>)
    8078:	4638      	mov	r0, r7
    807a:	b04e      	add	sp, #312	; 0x138
    807c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8080:	4637      	mov	r7, r6
    8082:	e7e9      	b.n	8058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
    8084:	4f06      	ldr	r7, [pc, #24]	; (80a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>)
    8086:	4638      	mov	r0, r7
    8088:	b04e      	add	sp, #312	; 0x138
    808a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    808e:	bf00      	nop
    8090:	50039000 	.word	0x50039000
    8094:	00ff8000 	.word	0x00ff8000
    8098:	50841a50 	.word	0x50841a50
    809c:	00f1000f 	.word	0x00f1000f
    80a0:	00f1000e 	.word	0x00f1000e

000080a4 <UtilCmacBuildDataForDerivation>:
    80a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80a8:	2600      	movs	r6, #0
    80aa:	b082      	sub	sp, #8
    80ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    80ae:	9601      	str	r6, [sp, #4]
    80b0:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
    80b4:	d83b      	bhi.n	812e <UtilCmacBuildDataForDerivation+0x8a>
    80b6:	00ee      	lsls	r6, r5, #3
    80b8:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    80bc:	461f      	mov	r7, r3
    80be:	bf34      	ite	cc
    80c0:	2303      	movcc	r3, #3
    80c2:	2304      	movcs	r3, #4
    80c4:	1e4d      	subs	r5, r1, #1
    80c6:	2d3f      	cmp	r5, #63	; 0x3f
    80c8:	460c      	mov	r4, r1
    80ca:	9300      	str	r3, [sp, #0]
    80cc:	d82f      	bhi.n	812e <UtilCmacBuildDataForDerivation+0x8a>
    80ce:	b370      	cbz	r0, 812e <UtilCmacBuildDataForDerivation+0x8a>
    80d0:	4690      	mov	r8, r2
    80d2:	b117      	cbz	r7, 80da <UtilCmacBuildDataForDerivation+0x36>
    80d4:	b35a      	cbz	r2, 812e <UtilCmacBuildDataForDerivation+0x8a>
    80d6:	2f40      	cmp	r7, #64	; 0x40
    80d8:	d829      	bhi.n	812e <UtilCmacBuildDataForDerivation+0x8a>
    80da:	9a08      	ldr	r2, [sp, #32]
    80dc:	b33a      	cbz	r2, 812e <UtilCmacBuildDataForDerivation+0x8a>
    80de:	9a09      	ldr	r2, [sp, #36]	; 0x24
    80e0:	6811      	ldr	r1, [r2, #0]
    80e2:	b321      	cbz	r1, 812e <UtilCmacBuildDataForDerivation+0x8a>
    80e4:	19e2      	adds	r2, r4, r7
    80e6:	4413      	add	r3, r2
    80e8:	4299      	cmp	r1, r3
    80ea:	d320      	bcc.n	812e <UtilCmacBuildDataForDerivation+0x8a>
    80ec:	9b08      	ldr	r3, [sp, #32]
    80ee:	4622      	mov	r2, r4
    80f0:	4601      	mov	r1, r0
    80f2:	1c58      	adds	r0, r3, #1
    80f4:	f7fe ff4a 	bl	6f8c <CC_PalMemCopyPlat>
    80f8:	2200      	movs	r2, #0
    80fa:	9b08      	ldr	r3, [sp, #32]
    80fc:	4423      	add	r3, r4
    80fe:	705a      	strb	r2, [r3, #1]
    8100:	3402      	adds	r4, #2
    8102:	bb07      	cbnz	r7, 8146 <UtilCmacBuildDataForDerivation+0xa2>
    8104:	2eff      	cmp	r6, #255	; 0xff
    8106:	9600      	str	r6, [sp, #0]
    8108:	d915      	bls.n	8136 <UtilCmacBuildDataForDerivation+0x92>
    810a:	9b08      	ldr	r3, [sp, #32]
    810c:	0235      	lsls	r5, r6, #8
    810e:	b2ad      	uxth	r5, r5
    8110:	1918      	adds	r0, r3, r4
    8112:	2202      	movs	r2, #2
    8114:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
    8118:	a901      	add	r1, sp, #4
    811a:	9501      	str	r5, [sp, #4]
    811c:	f7fe ff36 	bl	6f8c <CC_PalMemCopyPlat>
    8120:	3402      	adds	r4, #2
    8122:	2000      	movs	r0, #0
    8124:	9b09      	ldr	r3, [sp, #36]	; 0x24
    8126:	601c      	str	r4, [r3, #0]
    8128:	b002      	add	sp, #8
    812a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    812e:	480a      	ldr	r0, [pc, #40]	; (8158 <UtilCmacBuildDataForDerivation+0xb4>)
    8130:	b002      	add	sp, #8
    8132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8136:	9b08      	ldr	r3, [sp, #32]
    8138:	2201      	movs	r2, #1
    813a:	1918      	adds	r0, r3, r4
    813c:	4669      	mov	r1, sp
    813e:	f7fe ff25 	bl	6f8c <CC_PalMemCopyPlat>
    8142:	3401      	adds	r4, #1
    8144:	e7ed      	b.n	8122 <UtilCmacBuildDataForDerivation+0x7e>
    8146:	9b08      	ldr	r3, [sp, #32]
    8148:	4641      	mov	r1, r8
    814a:	1918      	adds	r0, r3, r4
    814c:	463a      	mov	r2, r7
    814e:	f7fe ff1d 	bl	6f8c <CC_PalMemCopyPlat>
    8152:	443c      	add	r4, r7
    8154:	e7d6      	b.n	8104 <UtilCmacBuildDataForDerivation+0x60>
    8156:	bf00      	nop
    8158:	80000006 	.word	0x80000006

0000815c <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    815c:	b508      	push	{r3, lr}
	spm_config();
    815e:	f7f9 fd85 	bl	1c6c <spm_config>
	spm_jump();
}
    8162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    8166:	f7f9 bd21 	b.w	1bac <spm_jump>

0000816a <sys_notify_validate>:
	if (notify == NULL) {
    816a:	4603      	mov	r3, r0
    816c:	b158      	cbz	r0, 8186 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    816e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    8170:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    8174:	2a01      	cmp	r2, #1
    8176:	d003      	beq.n	8180 <sys_notify_validate+0x16>
    8178:	2a03      	cmp	r2, #3
    817a:	d104      	bne.n	8186 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    817c:	6802      	ldr	r2, [r0, #0]
    817e:	b112      	cbz	r2, 8186 <sys_notify_validate+0x1c>
		notify->result = 0;
    8180:	2000      	movs	r0, #0
    8182:	6098      	str	r0, [r3, #8]
    8184:	4770      	bx	lr
		return -EINVAL;
    8186:	f06f 0015 	mvn.w	r0, #21
}
    818a:	4770      	bx	lr

0000818c <arch_printk_char_out>:
}
    818c:	2000      	movs	r0, #0
    818e:	4770      	bx	lr

00008190 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    8190:	b40f      	push	{r0, r1, r2, r3}
    8192:	b507      	push	{r0, r1, r2, lr}
    8194:	a904      	add	r1, sp, #16
    8196:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    819a:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    819c:	f7f8 fa0e 	bl	5bc <vprintk>
	}
	va_end(ap);
}
    81a0:	b003      	add	sp, #12
    81a2:	f85d eb04 	ldr.w	lr, [sp], #4
    81a6:	b004      	add	sp, #16
    81a8:	4770      	bx	lr

000081aa <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    81aa:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    81ac:	f013 0307 	ands.w	r3, r3, #7
    81b0:	d105      	bne.n	81be <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    81b2:	6803      	ldr	r3, [r0, #0]
    81b4:	2b00      	cmp	r3, #0
		evt = EVT_START;
    81b6:	bf0c      	ite	eq
    81b8:	2000      	moveq	r0, #0
    81ba:	2003      	movne	r0, #3
    81bc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    81be:	2b02      	cmp	r3, #2
    81c0:	d105      	bne.n	81ce <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    81c2:	8bc3      	ldrh	r3, [r0, #30]
    81c4:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    81c6:	bf14      	ite	ne
    81c8:	2000      	movne	r0, #0
    81ca:	2004      	moveq	r0, #4
    81cc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    81ce:	2b01      	cmp	r3, #1
    81d0:	d105      	bne.n	81de <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    81d2:	6803      	ldr	r3, [r0, #0]
    81d4:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    81d6:	bf0c      	ite	eq
    81d8:	2000      	moveq	r0, #0
    81da:	2005      	movne	r0, #5
    81dc:	4770      	bx	lr
	int evt = EVT_NOP;
    81de:	2000      	movs	r0, #0
}
    81e0:	4770      	bx	lr

000081e2 <notify_one>:
{
    81e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81e6:	460d      	mov	r5, r1
    81e8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    81ea:	4619      	mov	r1, r3
    81ec:	1d28      	adds	r0, r5, #4
{
    81ee:	4690      	mov	r8, r2
    81f0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    81f2:	f7f8 f9b7 	bl	564 <sys_notify_finalize>
	if (cb) {
    81f6:	4604      	mov	r4, r0
    81f8:	b138      	cbz	r0, 820a <notify_one+0x28>
		cb(mgr, cli, state, res);
    81fa:	4633      	mov	r3, r6
    81fc:	4642      	mov	r2, r8
    81fe:	4629      	mov	r1, r5
    8200:	4638      	mov	r0, r7
    8202:	46a4      	mov	ip, r4
}
    8204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    8208:	4760      	bx	ip
}
    820a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000820e <validate_args>:
{
    820e:	b510      	push	{r4, lr}
    8210:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    8212:	b140      	cbz	r0, 8226 <validate_args+0x18>
    8214:	b139      	cbz	r1, 8226 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    8216:	1d08      	adds	r0, r1, #4
    8218:	f7ff ffa7 	bl	816a <sys_notify_validate>
	if ((rv == 0)
    821c:	b928      	cbnz	r0, 822a <validate_args+0x1c>
	    && ((cli->notify.flags
    821e:	68a3      	ldr	r3, [r4, #8]
    8220:	f033 0303 	bics.w	r3, r3, #3
    8224:	d001      	beq.n	822a <validate_args+0x1c>
		rv = -EINVAL;
    8226:	f06f 0015 	mvn.w	r0, #21
}
    822a:	bd10      	pop	{r4, pc}

0000822c <onoff_manager_init>:
{
    822c:	b538      	push	{r3, r4, r5, lr}
    822e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    8230:	4605      	mov	r5, r0
    8232:	b158      	cbz	r0, 824c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    8234:	b151      	cbz	r1, 824c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    8236:	680b      	ldr	r3, [r1, #0]
    8238:	b143      	cbz	r3, 824c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    823a:	684b      	ldr	r3, [r1, #4]
    823c:	b133      	cbz	r3, 824c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    823e:	2220      	movs	r2, #32
    8240:	2100      	movs	r1, #0
    8242:	f000 f996 	bl	8572 <memset>
	return 0;
    8246:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    8248:	612c      	str	r4, [r5, #16]
}
    824a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    824c:	f06f 0015 	mvn.w	r0, #21
    8250:	e7fb      	b.n	824a <onoff_manager_init+0x1e>

00008252 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    8252:	4604      	mov	r4, r0
    8254:	b508      	push	{r3, lr}
    8256:	4608      	mov	r0, r1
    8258:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    825a:	461a      	mov	r2, r3
    825c:	47a0      	blx	r4
	return z_impl_k_current_get();
    825e:	f7fc fe83 	bl	4f68 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    8262:	f7fa fba5 	bl	29b0 <z_impl_k_thread_abort>

00008266 <encode_uint>:
{
    8266:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    826a:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    826c:	78d3      	ldrb	r3, [r2, #3]
{
    826e:	4614      	mov	r4, r2
	switch (specifier) {
    8270:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    8272:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    8276:	4606      	mov	r6, r0
    8278:	460f      	mov	r7, r1
    827a:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    827c:	d02d      	beq.n	82da <encode_uint+0x74>
    827e:	d828      	bhi.n	82d2 <encode_uint+0x6c>
		return 16;
    8280:	2b58      	cmp	r3, #88	; 0x58
    8282:	bf14      	ite	ne
    8284:	250a      	movne	r5, #10
    8286:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
    8288:	46aa      	mov	sl, r5
    828a:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
    828e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    8292:	4652      	mov	r2, sl
    8294:	465b      	mov	r3, fp
    8296:	4630      	mov	r0, r6
    8298:	4639      	mov	r1, r7
    829a:	f7f7 ffcf 	bl	23c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    829e:	2a09      	cmp	r2, #9
    82a0:	b2d3      	uxtb	r3, r2
    82a2:	d81f      	bhi.n	82e4 <encode_uint+0x7e>
    82a4:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    82a6:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    82a8:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    82aa:	bf08      	it	eq
    82ac:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    82ae:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    82b2:	d301      	bcc.n	82b8 <encode_uint+0x52>
    82b4:	45c8      	cmp	r8, r9
    82b6:	d812      	bhi.n	82de <encode_uint+0x78>
	if (conv->flag_hash) {
    82b8:	7823      	ldrb	r3, [r4, #0]
    82ba:	069b      	lsls	r3, r3, #26
    82bc:	d505      	bpl.n	82ca <encode_uint+0x64>
		if (radix == 8) {
    82be:	2d08      	cmp	r5, #8
    82c0:	d116      	bne.n	82f0 <encode_uint+0x8a>
			conv->altform_0 = true;
    82c2:	78a3      	ldrb	r3, [r4, #2]
    82c4:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    82c8:	70a3      	strb	r3, [r4, #2]
}
    82ca:	4640      	mov	r0, r8
    82cc:	b003      	add	sp, #12
    82ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    82d2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    82d6:	2b70      	cmp	r3, #112	; 0x70
    82d8:	e7d3      	b.n	8282 <encode_uint+0x1c>
	switch (specifier) {
    82da:	2508      	movs	r5, #8
    82dc:	e7d4      	b.n	8288 <encode_uint+0x22>
		value /= radix;
    82de:	4606      	mov	r6, r0
    82e0:	460f      	mov	r7, r1
    82e2:	e7d6      	b.n	8292 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    82e4:	9a01      	ldr	r2, [sp, #4]
    82e6:	2a19      	cmp	r2, #25
    82e8:	bf94      	ite	ls
    82ea:	3337      	addls	r3, #55	; 0x37
    82ec:	3357      	addhi	r3, #87	; 0x57
    82ee:	e7da      	b.n	82a6 <encode_uint+0x40>
		} else if (radix == 16) {
    82f0:	2d10      	cmp	r5, #16
    82f2:	d1ea      	bne.n	82ca <encode_uint+0x64>
			conv->altform_0c = true;
    82f4:	78a3      	ldrb	r3, [r4, #2]
    82f6:	f043 0310 	orr.w	r3, r3, #16
    82fa:	e7e5      	b.n	82c8 <encode_uint+0x62>

000082fc <outs>:
{
    82fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8300:	4607      	mov	r7, r0
    8302:	4688      	mov	r8, r1
    8304:	4615      	mov	r5, r2
    8306:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8308:	4614      	mov	r4, r2
    830a:	42b4      	cmp	r4, r6
    830c:	eba4 0005 	sub.w	r0, r4, r5
    8310:	d302      	bcc.n	8318 <outs+0x1c>
    8312:	b93e      	cbnz	r6, 8324 <outs+0x28>
    8314:	7823      	ldrb	r3, [r4, #0]
    8316:	b12b      	cbz	r3, 8324 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    8318:	4641      	mov	r1, r8
    831a:	f814 0b01 	ldrb.w	r0, [r4], #1
    831e:	47b8      	blx	r7
		if (rc < 0) {
    8320:	2800      	cmp	r0, #0
    8322:	daf2      	bge.n	830a <outs+0xe>
}
    8324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008328 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    8328:	4040      	eors	r0, r0
    832a:	f380 8811 	msr	BASEPRI, r0
    832e:	f04f 0004 	mov.w	r0, #4
    8332:	df02      	svc	2
}
    8334:	4770      	bx	lr

00008336 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    8336:	4770      	bx	lr

00008338 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    8338:	b084      	sub	sp, #16
    833a:	ab04      	add	r3, sp, #16
    833c:	e903 0007 	stmdb	r3, {r0, r1, r2}
    8340:	2300      	movs	r3, #0
    8342:	f383 8811 	msr	BASEPRI, r3
    8346:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    834a:	b004      	add	sp, #16
    834c:	4770      	bx	lr

0000834e <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    834e:	b40f      	push	{r0, r1, r2, r3}
    8350:	b507      	push	{r0, r1, r2, lr}
    8352:	a904      	add	r1, sp, #16
    8354:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8358:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    835a:	f7f8 f92f 	bl	5bc <vprintk>
	va_end(ap);
}
    835e:	b003      	add	sp, #12
    8360:	f85d eb04 	ldr.w	lr, [sp], #4
    8364:	b004      	add	sp, #16
    8366:	4770      	bx	lr

00008368 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    8368:	2200      	movs	r2, #0
    836a:	e9c0 2200 	strd	r2, r2, [r0]
    836e:	6082      	str	r2, [r0, #8]
}
    8370:	4770      	bx	lr

00008372 <set_starting_state>:
{
    8372:	b510      	push	{r4, lr}
	__asm__ volatile(
    8374:	f04f 0320 	mov.w	r3, #32
    8378:	f3ef 8211 	mrs	r2, BASEPRI
    837c:	f383 8811 	msr	BASEPRI, r3
    8380:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    8384:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    8386:	f003 0407 	and.w	r4, r3, #7
    838a:	2c01      	cmp	r4, #1
    838c:	d106      	bne.n	839c <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    838e:	6001      	str	r1, [r0, #0]
	int err = 0;
    8390:	2000      	movs	r0, #0
	__asm__ volatile(
    8392:	f382 8811 	msr	BASEPRI, r2
    8396:	f3bf 8f6f 	isb	sy
}
    839a:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    839c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    83a0:	428b      	cmp	r3, r1
		err = -EALREADY;
    83a2:	bf14      	ite	ne
    83a4:	f04f 30ff 	movne.w	r0, #4294967295
    83a8:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    83ac:	e7f1      	b.n	8392 <set_starting_state+0x20>

000083ae <set_on_state>:
	__asm__ volatile(
    83ae:	f04f 0320 	mov.w	r3, #32
    83b2:	f3ef 8211 	mrs	r2, BASEPRI
    83b6:	f383 8811 	msr	BASEPRI, r3
    83ba:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    83be:	6803      	ldr	r3, [r0, #0]
    83c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    83c4:	f043 0302 	orr.w	r3, r3, #2
    83c8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    83ca:	f382 8811 	msr	BASEPRI, r2
    83ce:	f3bf 8f6f 	isb	sy
}
    83d2:	4770      	bx	lr

000083d4 <onoff_started_callback>:
	return &data->mgr[type];
    83d4:	6900      	ldr	r0, [r0, #16]
    83d6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    83d8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    83dc:	2100      	movs	r1, #0
    83de:	4710      	bx	r2

000083e0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    83e0:	2000      	movs	r0, #0
    83e2:	f7fb b897 	b.w	3514 <nrfx_clock_start>

000083e6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    83e6:	2000      	movs	r0, #0
    83e8:	f7fb b8e4 	b.w	35b4 <nrfx_clock_stop>

000083ec <api_stop>:
	return stop(dev, subsys, CTX_API);
    83ec:	2280      	movs	r2, #128	; 0x80
    83ee:	f7f9 b891 	b.w	1514 <stop>

000083f2 <blocking_start_callback>:
{
    83f2:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    83f4:	f7fb be4e 	b.w	4094 <z_impl_k_sem_give>

000083f8 <api_start>:
{
    83f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    83fc:	240c      	movs	r4, #12
    83fe:	b2c9      	uxtb	r1, r1
    8400:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    8402:	6905      	ldr	r5, [r0, #16]
{
    8404:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    8406:	f104 0048 	add.w	r0, r4, #72	; 0x48
    840a:	2180      	movs	r1, #128	; 0x80
    840c:	4428      	add	r0, r5
{
    840e:	4690      	mov	r8, r2
    8410:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    8412:	f7ff ffae 	bl	8372 <set_starting_state>
	if (err < 0) {
    8416:	2800      	cmp	r0, #0
    8418:	db06      	blt.n	8428 <api_start+0x30>
	subdata->cb = cb;
    841a:	4425      	add	r5, r4
	subdata->user_data = user_data;
    841c:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    8420:	6873      	ldr	r3, [r6, #4]
    8422:	591b      	ldr	r3, [r3, r4]
    8424:	4798      	blx	r3
	return 0;
    8426:	2000      	movs	r0, #0
}
    8428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000842c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    842c:	4770      	bx	lr

0000842e <sys_clock_disable>:
    842e:	4770      	bx	lr

00008430 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    8430:	2000      	movs	r0, #0
    8432:	f7f8 bef9 	b.w	1228 <sys_reboot>

00008436 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    8436:	2100      	movs	r1, #0
    8438:	2001      	movs	r0, #1
    843a:	f7f9 bf4d 	b.w	22d8 <z_arm_fatal_error>

0000843e <irq_target_state_set>:
 *
 * @return The resulting target state of the given IRQ
 */
irq_target_state_t irq_target_state_set(unsigned int irq,
	irq_target_state_t irq_target_state)
{
    843e:	4602      	mov	r2, r0
    8440:	b243      	sxtb	r3, r0
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
    8442:	4608      	mov	r0, r1
    8444:	b9c1      	cbnz	r1, 8478 <irq_target_state_set+0x3a>
  if ((int32_t)(IRQn) >= 0)
    8446:	2b00      	cmp	r3, #0
    8448:	db27      	blt.n	849a <irq_target_state_set+0x5c>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    844a:	2001      	movs	r0, #1
    844c:	095b      	lsrs	r3, r3, #5
    844e:	009b      	lsls	r3, r3, #2
    8450:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    8454:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    8458:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    845c:	f002 021f 	and.w	r2, r2, #31
    8460:	4090      	lsls	r0, r2
    8462:	ea21 0100 	bic.w	r1, r1, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    8466:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    846a:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
    846e:	40d0      	lsrs	r0, r2
    8470:	f000 0001 	and.w	r0, r0, #1
	} else {
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
    8474:	b2c0      	uxtb	r0, r0
    8476:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    8478:	2b00      	cmp	r3, #0
    847a:	db0d      	blt.n	8498 <irq_target_state_set+0x5a>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    847c:	2101      	movs	r1, #1
    847e:	095b      	lsrs	r3, r3, #5
    8480:	009b      	lsls	r3, r3, #2
    8482:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    8486:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    848a:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
    848e:	f002 021f 	and.w	r2, r2, #31
    8492:	4091      	lsls	r1, r2
    8494:	4301      	orrs	r1, r0
    8496:	e7e6      	b.n	8466 <irq_target_state_set+0x28>
		return IRQ_TARGET_STATE_NON_SECURE;
	} else {
		return IRQ_TARGET_STATE_SECURE;
    8498:	2000      	movs	r0, #0
	}
}
    849a:	4770      	bx	lr

0000849c <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    849c:	6e43      	ldr	r3, [r0, #100]	; 0x64
    849e:	f383 880b 	msr	PSPLIM, r3
}
    84a2:	4770      	bx	lr

000084a4 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    84a4:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    84a6:	6800      	ldr	r0, [r0, #0]
    84a8:	f7f9 bf16 	b.w	22d8 <z_arm_fatal_error>

000084ac <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    84ac:	b508      	push	{r3, lr}
	handler();
    84ae:	f7f9 ff41 	bl	2334 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    84b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    84b6:	f7fa ba19 	b.w	28ec <z_arm_exc_exit>

000084ba <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    84ba:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    84be:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    84c2:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    84c4:	bf08      	it	eq
    84c6:	f06f 0015 	mvneq.w	r0, #21
    84ca:	4770      	bx	lr

000084cc <arm_cmse_addr_is_secure>:
    84cc:	e840 f000 	tt	r0, r0
int arm_cmse_addr_is_secure(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	return addr_info.flags.secure;
}
    84d0:	f3c0 5080 	ubfx	r0, r0, #22, #1
    84d4:	4770      	bx	lr

000084d6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    84d6:	4603      	mov	r3, r0
	size_t n = 0;
    84d8:	2000      	movs	r0, #0

	while (*s != '\0') {
    84da:	5c1a      	ldrb	r2, [r3, r0]
    84dc:	b902      	cbnz	r2, 84e0 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    84de:	4770      	bx	lr
		n++;
    84e0:	3001      	adds	r0, #1
    84e2:	e7fa      	b.n	84da <strlen+0x4>

000084e4 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    84e4:	4603      	mov	r3, r0
	size_t n = 0;
    84e6:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    84e8:	5c1a      	ldrb	r2, [r3, r0]
    84ea:	b10a      	cbz	r2, 84f0 <strnlen+0xc>
    84ec:	4288      	cmp	r0, r1
    84ee:	d100      	bne.n	84f2 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    84f0:	4770      	bx	lr
		n++;
    84f2:	3001      	adds	r0, #1
    84f4:	e7f8      	b.n	84e8 <strnlen+0x4>

000084f6 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    84f6:	1e43      	subs	r3, r0, #1
    84f8:	3901      	subs	r1, #1
    84fa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    84fe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    8502:	4282      	cmp	r2, r0
    8504:	d101      	bne.n	850a <strcmp+0x14>
    8506:	2a00      	cmp	r2, #0
    8508:	d1f7      	bne.n	84fa <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    850a:	1a10      	subs	r0, r2, r0
    850c:	4770      	bx	lr

0000850e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    850e:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    8510:	b15a      	cbz	r2, 852a <memcmp+0x1c>
    8512:	3901      	subs	r1, #1
    8514:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    8516:	f810 2b01 	ldrb.w	r2, [r0], #1
    851a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    851e:	42a0      	cmp	r0, r4
    8520:	d001      	beq.n	8526 <memcmp+0x18>
    8522:	429a      	cmp	r2, r3
    8524:	d0f7      	beq.n	8516 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    8526:	1ad0      	subs	r0, r2, r3
}
    8528:	bd10      	pop	{r4, pc}
		return 0;
    852a:	4610      	mov	r0, r2
    852c:	e7fc      	b.n	8528 <memcmp+0x1a>

0000852e <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    852e:	1a43      	subs	r3, r0, r1
    8530:	4293      	cmp	r3, r2
{
    8532:	b510      	push	{r4, lr}
    8534:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    8538:	d308      	bcc.n	854c <memmove+0x1e>
	char *dest = d;
    853a:	4602      	mov	r2, r0
    853c:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    853e:	429a      	cmp	r2, r3
    8540:	d00b      	beq.n	855a <memmove+0x2c>
			*dest = *src;
    8542:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    8546:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    854a:	e7f8      	b.n	853e <memmove+0x10>
    854c:	440a      	add	r2, r1
			dest[n] = src[n];
    854e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    8552:	428a      	cmp	r2, r1
			dest[n] = src[n];
    8554:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    8558:	d1f9      	bne.n	854e <memmove+0x20>
		}
	}

	return d;
}
    855a:	bd10      	pop	{r4, pc}

0000855c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    855c:	b510      	push	{r4, lr}
    855e:	1e43      	subs	r3, r0, #1
    8560:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    8562:	4291      	cmp	r1, r2
    8564:	d100      	bne.n	8568 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    8566:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    8568:	f811 4b01 	ldrb.w	r4, [r1], #1
    856c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    8570:	e7f7      	b.n	8562 <memcpy+0x6>

00008572 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    8572:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    8574:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    8576:	4402      	add	r2, r0
    8578:	4293      	cmp	r3, r2
    857a:	d100      	bne.n	857e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    857c:	4770      	bx	lr
		*(d_byte++) = c_byte;
    857e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    8582:	e7f9      	b.n	8578 <memset+0x6>

00008584 <_stdout_hook_default>:
}
    8584:	f04f 30ff 	mov.w	r0, #4294967295
    8588:	4770      	bx	lr

0000858a <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    858a:	6843      	ldr	r3, [r0, #4]
    858c:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    858e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    8592:	05d1      	lsls	r1, r2, #23
    8594:	d518      	bpl.n	85c8 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8596:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    859a:	b1aa      	cbz	r2, 85c8 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    859c:	f04f 0120 	mov.w	r1, #32
    85a0:	f3ef 8211 	mrs	r2, BASEPRI
    85a4:	f381 8811 	msr	BASEPRI, r1
    85a8:	f3bf 8f6f 	isb	sy
    85ac:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    85b0:	b131      	cbz	r1, 85c0 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    85b2:	2100      	movs	r1, #0
    85b4:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    85b8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    85bc:	2101      	movs	r1, #1
    85be:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    85c0:	f382 8811 	msr	BASEPRI, r2
    85c4:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    85c8:	6842      	ldr	r2, [r0, #4]
    85ca:	6852      	ldr	r2, [r2, #4]
    85cc:	06d2      	lsls	r2, r2, #27
    85ce:	d515      	bpl.n	85fc <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    85d0:	f04f 0120 	mov.w	r1, #32
    85d4:	f3ef 8211 	mrs	r2, BASEPRI
    85d8:	f381 8811 	msr	BASEPRI, r1
    85dc:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    85e0:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    85e4:	b111      	cbz	r1, 85ec <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    85e6:	2100      	movs	r1, #0
    85e8:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    85ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    85f0:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    85f4:	f382 8811 	msr	BASEPRI, r2
    85f8:	f3bf 8f6f 	isb	sy
}
    85fc:	4770      	bx	lr

000085fe <uarte_nrfx_config_get>:
{
    85fe:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    8600:	6902      	ldr	r2, [r0, #16]
    8602:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    8606:	e883 0003 	stmia.w	r3, {r0, r1}
}
    860a:	2000      	movs	r0, #0
    860c:	4770      	bx	lr

0000860e <uarte_nrfx_err_check>:
	return config->uarte_regs;
    860e:	6843      	ldr	r3, [r0, #4]
    8610:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    8612:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    8616:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    861a:	4770      	bx	lr

0000861c <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    861c:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    861e:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8620:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    8624:	b940      	cbnz	r0, 8638 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    8626:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    8628:	0712      	lsls	r2, r2, #28
    862a:	d406      	bmi.n	863a <is_tx_ready+0x1e>
    862c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    8630:	3800      	subs	r0, #0
    8632:	bf18      	it	ne
    8634:	2001      	movne	r0, #1
    8636:	4770      	bx	lr
    8638:	2001      	movs	r0, #1
}
    863a:	4770      	bx	lr

0000863c <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    863c:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    863e:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    8640:	681b      	ldr	r3, [r3, #0]
    8642:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8646:	b148      	cbz	r0, 865c <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8648:	2000      	movs	r0, #0
	*c = data->rx_data;
    864a:	7c52      	ldrb	r2, [r2, #17]
    864c:	700a      	strb	r2, [r1, #0]
    864e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    8652:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8656:	2201      	movs	r2, #1
    8658:	601a      	str	r2, [r3, #0]
	return 0;
    865a:	4770      	bx	lr
		return -1;
    865c:	f04f 30ff 	mov.w	r0, #4294967295
}
    8660:	4770      	bx	lr

00008662 <uarte_instance_init.isra.0>:
	return config->uarte_regs;
    8662:	6843      	ldr	r3, [r0, #4]
static int uarte_instance_init(const struct device *dev,
    8664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
    8666:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    8668:	2300      	movs	r3, #0
	struct uarte_nrfx_data *data = get_dev_data(dev);
    866a:	6907      	ldr	r7, [r0, #16]
    866c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
    8670:	680b      	ldr	r3, [r1, #0]
    8672:	6038      	str	r0, [r7, #0]
static int uarte_instance_init(const struct device *dev,
    8674:	4606      	mov	r6, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8676:	a801      	add	r0, sp, #4
    8678:	460d      	mov	r5, r1
    867a:	9301      	str	r3, [sp, #4]
    867c:	f7fa fcc6 	bl	300c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8680:	2301      	movs	r3, #1
    8682:	9a01      	ldr	r2, [sp, #4]
    8684:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    8686:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
    8688:	682b      	ldr	r3, [r5, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    868a:	a801      	add	r0, sp, #4
    868c:	9301      	str	r3, [sp, #4]
    868e:	f7fa fcbd 	bl	300c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    8692:	2203      	movs	r2, #3
    8694:	9b01      	ldr	r3, [sp, #4]
    8696:	3380      	adds	r3, #128	; 0x80
    8698:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    869c:	686b      	ldr	r3, [r5, #4]
    869e:	1c5a      	adds	r2, r3, #1
    86a0:	d008      	beq.n	86b4 <uarte_instance_init.isra.0+0x52>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    86a2:	a801      	add	r0, sp, #4
    86a4:	9301      	str	r3, [sp, #4]
    86a6:	f7fa fcb1 	bl	300c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    86aa:	220c      	movs	r2, #12
    86ac:	9b01      	ldr	r3, [sp, #4]
    86ae:	3380      	adds	r3, #128	; 0x80
    86b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
    86b4:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
    86b8:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    86bc:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    86c0:	68ab      	ldr	r3, [r5, #8]
    86c2:	1c58      	adds	r0, r3, #1
    86c4:	d008      	beq.n	86d8 <uarte_instance_init.isra.0+0x76>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    86c6:	a801      	add	r0, sp, #4
    86c8:	9301      	str	r3, [sp, #4]
    86ca:	f7fa fc9f 	bl	300c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    86ce:	220c      	movs	r2, #12
    86d0:	9b01      	ldr	r3, [sp, #4]
    86d2:	3380      	adds	r3, #128	; 0x80
    86d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    86d8:	68eb      	ldr	r3, [r5, #12]
    86da:	1c59      	adds	r1, r3, #1
    86dc:	d011      	beq.n	8702 <uarte_instance_init.isra.0+0xa0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    86de:	a801      	add	r0, sp, #4
    86e0:	9301      	str	r3, [sp, #4]
    86e2:	f7fa fc93 	bl	300c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    86e6:	2301      	movs	r3, #1
    86e8:	9a01      	ldr	r2, [sp, #4]
    86ea:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    86ec:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
    86ee:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    86f0:	a801      	add	r0, sp, #4
    86f2:	9301      	str	r3, [sp, #4]
    86f4:	f7fa fc8a 	bl	300c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    86f8:	2203      	movs	r2, #3
    86fa:	9b01      	ldr	r3, [sp, #4]
    86fc:	3380      	adds	r3, #128	; 0x80
    86fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    8702:	6931      	ldr	r1, [r6, #16]
	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
    8704:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    8708:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
    870a:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    870e:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
    8710:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    8714:	f7fa fbc4 	bl	2ea0 <uarte_nrfx_configure>
	if (err) {
    8718:	bb40      	cbnz	r0, 876c <uarte_instance_init.isra.0+0x10a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    871a:	2308      	movs	r3, #8
    871c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    8720:	686b      	ldr	r3, [r5, #4]
    8722:	3301      	adds	r3, #1
    8724:	d00b      	beq.n	873e <uarte_instance_init.isra.0+0xdc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8726:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    872a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    872e:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    8732:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    8736:	2301      	movs	r3, #1
    8738:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    873c:	6023      	str	r3, [r4, #0]
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    873e:	6873      	ldr	r3, [r6, #4]
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    8740:	3710      	adds	r7, #16
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    8742:	685b      	ldr	r3, [r3, #4]
    8744:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
    8746:	bf5c      	itt	pl
    8748:	f44f 7280 	movpl.w	r2, #256	; 0x100
    874c:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8750:	06db      	lsls	r3, r3, #27
    8752:	bf44      	itt	mi
    8754:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    8758:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    875c:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    875e:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    8762:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8766:	2301      	movs	r3, #1
    8768:	60a3      	str	r3, [r4, #8]
    876a:	60e3      	str	r3, [r4, #12]
}
    876c:	b003      	add	sp, #12
    876e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008770 <entropy_cc3xx_rng_init>:
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
    8770:	2200      	movs	r2, #0
{
    8772:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
    8774:	4611      	mov	r1, r2
    8776:	4610      	mov	r0, r2
    8778:	f7fc ffba 	bl	56f0 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
    877c:	2800      	cmp	r0, #0
			return -EINVAL;
		}
	#endif

	return 0;
}
    877e:	bf18      	it	ne
    8780:	f06f 0015 	mvnne.w	r0, #21
    8784:	bd08      	pop	{r3, pc}

00008786 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
    8786:	f7fc bf5b 	b.w	5640 <nrf_cc3xx_platform_init>

0000878a <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    878a:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    878c:	f7f9 fbfa 	bl	1f84 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    8790:	f7f9 fca4 	bl	20dc <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    8794:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
    8798:	f7fc bf52 	b.w	5640 <nrf_cc3xx_platform_init>

0000879c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    879c:	4700      	bx	r0

0000879e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    879e:	f000 b861 	b.w	8864 <z_impl_k_busy_wait>

000087a2 <z_device_state_init>:
}
    87a2:	4770      	bx	lr

000087a4 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    87a4:	b138      	cbz	r0, 87b6 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    87a6:	68c3      	ldr	r3, [r0, #12]
    87a8:	8818      	ldrh	r0, [r3, #0]
    87aa:	f3c0 0008 	ubfx	r0, r0, #0, #9
    87ae:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    87b2:	4258      	negs	r0, r3
    87b4:	4158      	adcs	r0, r3
}
    87b6:	4770      	bx	lr

000087b8 <k_mem_slab_init>:
{
    87b8:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    87ba:	2400      	movs	r4, #0
    87bc:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    87be:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    87c0:	ea41 0402 	orr.w	r4, r1, r2
    87c4:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    87c8:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    87cc:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    87ce:	d10c      	bne.n	87ea <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    87d0:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    87d2:	42a3      	cmp	r3, r4
    87d4:	d103      	bne.n	87de <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    87d6:	e9c0 0000 	strd	r0, r0, [r0]
}
    87da:	2000      	movs	r0, #0
}
    87dc:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    87de:	6985      	ldr	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    87e0:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    87e2:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    87e4:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    87e6:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    87e8:	e7f3      	b.n	87d2 <k_mem_slab_init+0x1a>
		return -EINVAL;
    87ea:	f06f 0015 	mvn.w	r0, #21
	return rc;
    87ee:	e7f5      	b.n	87dc <k_mem_slab_init+0x24>

000087f0 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    87f0:	f3ef 8005 	mrs	r0, IPSR
}
    87f4:	3800      	subs	r0, #0
    87f6:	bf18      	it	ne
    87f8:	2001      	movne	r0, #1
    87fa:	4770      	bx	lr

000087fc <k_thread_name_get>:
}
    87fc:	2000      	movs	r0, #0
    87fe:	4770      	bx	lr

00008800 <z_pm_save_idle_exit>:
{
    8800:	b508      	push	{r3, lr}
	pm_system_resume();
    8802:	f7f8 fda3 	bl	134c <pm_system_resume>
}
    8806:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    880a:	f7ff be0f 	b.w	842c <sys_clock_idle_exit>

0000880e <z_impl_k_mutex_init>:
{
    880e:	4603      	mov	r3, r0
	mutex->owner = NULL;
    8810:	2000      	movs	r0, #0
    8812:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    8816:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    881a:	4770      	bx	lr

0000881c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    881c:	4603      	mov	r3, r0
    881e:	b920      	cbnz	r0, 882a <z_reschedule_irqlock+0xe>
    8820:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    8824:	b90a      	cbnz	r2, 882a <z_reschedule_irqlock+0xe>
    8826:	f7f9 bc6f 	b.w	2108 <arch_swap>
    882a:	f383 8811 	msr	BASEPRI, r3
    882e:	f3bf 8f6f 	isb	sy
}
    8832:	4770      	bx	lr

00008834 <z_reschedule_unlocked>:
	__asm__ volatile(
    8834:	f04f 0320 	mov.w	r3, #32
    8838:	f3ef 8011 	mrs	r0, BASEPRI
    883c:	f383 8811 	msr	BASEPRI, r3
    8840:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8844:	f7ff bfea 	b.w	881c <z_reschedule_irqlock>

00008848 <z_priq_dumb_best>:
{
    8848:	4603      	mov	r3, r0
	return list->head == list;
    884a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    884c:	4283      	cmp	r3, r0
    884e:	d003      	beq.n	8858 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    8850:	2800      	cmp	r0, #0
    8852:	bf38      	it	cc
    8854:	2000      	movcc	r0, #0
    8856:	4770      	bx	lr
	struct k_thread *thread = NULL;
    8858:	2000      	movs	r0, #0
}
    885a:	4770      	bx	lr

0000885c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    885c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    885e:	f7fc fea5 	bl	55ac <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    8862:	bd08      	pop	{r3, pc}

00008864 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8864:	b108      	cbz	r0, 886a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    8866:	f7f8 bd0b 	b.w	1280 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    886a:	4770      	bx	lr

0000886c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    886c:	4770      	bx	lr
	...

00008870 <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    8870:	f7fa bd30 	b.w	32d4 <SystemInit>

Disassembly of section .gnu.sgstubs:

00009fe0 <spm_firmware_info_nse-0x6000>:
	...

0000ffe0 <spm_firmware_info_nse>:
    ffe0:	e97f e97f 	sg
    ffe4:	f7f1 bf8a 	b.w	1efc <__acle_se_spm_firmware_info_nse>

0000ffe8 <spm_request_random_number_nse>:
    ffe8:	e97f e97f 	sg
    ffec:	f7f1 bf62 	b.w	1eb4 <__acle_se_spm_request_random_number_nse>

0000fff0 <spm_request_read_nse>:
    fff0:	e97f e97f 	sg
    fff4:	f7f1 bf28 	b.w	1e48 <__acle_se_spm_request_read_nse>
	...
