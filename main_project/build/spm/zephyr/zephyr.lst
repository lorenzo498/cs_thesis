
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	200025d8 	.word	0x200025d8
}
   4:	00001e55 	.word	0x00001e55
   8:	000082eb 	.word	0x000082eb
   c:	00001e29 	.word	0x00001e29
  10:	00001e29 	.word	0x00001e29
  14:	00001e29 	.word	0x00001e29
  18:	00001e29 	.word	0x00001e29
  1c:	00001e29 	.word	0x00001e29
	...
  2c:	00001825 	.word	0x00001825
  30:	00001e29 	.word	0x00001e29
  34:	00000000 	.word	0x00000000
  38:	000017cd 	.word	0x000017cd
  3c:	00002b71 	.word	0x00002b71

00000040 <_irq_vector_table>:
  40:	000018a5 000018a5 000018a5 000018a5     ................
  50:	000018a5 000018a5 000018a5 000018a5     ................
  60:	000018a5 000018a5 000018a5 000018a5     ................
  70:	000018a5 000018a5 000018a5 000018a5     ................
  80:	000018a5 000018a5 000018a5 000018a5     ................
  90:	000018a5 000018a5 000018a5 000018a5     ................
  a0:	000018a5 000018a5 000018a5 000018a5     ................
  b0:	000018a5 000018a5 000018a5 000018a5     ................
  c0:	000018a5 000018a5 000018a5 000018a5     ................
  d0:	000018a5 000018a5 000018a5 000018a5     ................
  e0:	000018a5 000018a5 000018a5 000018a5     ................
  f0:	000018a5 000018a5 000018a5 000018a5     ................
 100:	000018a5 000018a5 000018a5 000018a5     ................
 110:	000018a5 000018a5 000018a5 000018a5     ................
 120:	000018a5 000018a5 000018a5 000018a5     ................
 130:	000018a5 000018a5 000018a5 000018a5     ................
 140:	000018a5                                ....

00000144 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
 210:	00010000 00000001 00000000 00000000     ................
 220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000023c <__aeabi_uldivmod>:
     23c:	b953      	cbnz	r3, 254 <__aeabi_uldivmod+0x18>
     23e:	b94a      	cbnz	r2, 254 <__aeabi_uldivmod+0x18>
     240:	2900      	cmp	r1, #0
     242:	bf08      	it	eq
     244:	2800      	cmpeq	r0, #0
     246:	bf1c      	itt	ne
     248:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     24c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     250:	f000 b970 	b.w	534 <__aeabi_idiv0>
     254:	f1ad 0c08 	sub.w	ip, sp, #8
     258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     25c:	f000 f806 	bl	26c <__udivmoddi4>
     260:	f8dd e004 	ldr.w	lr, [sp, #4]
     264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     268:	b004      	add	sp, #16
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     270:	9e08      	ldr	r6, [sp, #32]
     272:	460d      	mov	r5, r1
     274:	4604      	mov	r4, r0
     276:	468a      	mov	sl, r1
     278:	2b00      	cmp	r3, #0
     27a:	d17f      	bne.n	37c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xfc>
     27c:	428a      	cmp	r2, r1
     27e:	4617      	mov	r7, r2
     280:	d941      	bls.n	306 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x86>
     282:	fab2 f282 	clz	r2, r2
     286:	b14a      	cbz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     288:	f1c2 0120 	rsb	r1, r2, #32
     28c:	fa05 f302 	lsl.w	r3, r5, r2
     290:	4097      	lsls	r7, r2
     292:	4094      	lsls	r4, r2
     294:	fa20 f101 	lsr.w	r1, r0, r1
     298:	ea41 0a03 	orr.w	sl, r1, r3
     29c:	ea4f 4817 	mov.w	r8, r7, lsr #16
     2a0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     2a4:	fa1f f987 	uxth.w	r9, r7
     2a8:	fbba fef8 	udiv	lr, sl, r8
     2ac:	fb08 a31e 	mls	r3, r8, lr, sl
     2b0:	fb0e f109 	mul.w	r1, lr, r9
     2b4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     2b8:	4299      	cmp	r1, r3
     2ba:	d906      	bls.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     2bc:	18fb      	adds	r3, r7, r3
     2be:	d202      	bcs.n	2c6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x46>
     2c0:	4299      	cmp	r1, r3
     2c2:	f200 8124 	bhi.w	50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
     2c6:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
     2ca:	1a59      	subs	r1, r3, r1
     2cc:	b2a3      	uxth	r3, r4
     2ce:	fbb1 f0f8 	udiv	r0, r1, r8
     2d2:	fb08 1110 	mls	r1, r8, r0, r1
     2d6:	fb00 f909 	mul.w	r9, r0, r9
     2da:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     2de:	45a1      	cmp	r9, r4
     2e0:	d905      	bls.n	2ee <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6e>
     2e2:	193c      	adds	r4, r7, r4
     2e4:	d202      	bcs.n	2ec <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6c>
     2e6:	45a1      	cmp	r9, r4
     2e8:	f200 810e 	bhi.w	508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>
     2ec:	3801      	subs	r0, #1
     2ee:	eba4 0409 	sub.w	r4, r4, r9
     2f2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     2f6:	2100      	movs	r1, #0
     2f8:	b11e      	cbz	r6, 302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     2fa:	40d4      	lsrs	r4, r2
     2fc:	2300      	movs	r3, #0
     2fe:	e9c6 4300 	strd	r4, r3, [r6]
     302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     306:	b902      	cbnz	r2, 30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     308:	deff      	udf	#255	; 0xff
     30a:	fab2 f282 	clz	r2, r2
     30e:	2a00      	cmp	r2, #0
     310:	d14f      	bne.n	3b2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x132>
     312:	1bcb      	subs	r3, r1, r7
     314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     318:	fa1f f887 	uxth.w	r8, r7
     31c:	2101      	movs	r1, #1
     31e:	0c25      	lsrs	r5, r4, #16
     320:	fbb3 fcfe 	udiv	ip, r3, lr
     324:	fb0e 301c 	mls	r0, lr, ip, r3
     328:	462b      	mov	r3, r5
     32a:	fb08 f90c 	mul.w	r9, r8, ip
     32e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     332:	45a9      	cmp	r9, r5
     334:	d90a      	bls.n	34c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xcc>
     336:	197d      	adds	r5, r7, r5
     338:	bf2c      	ite	cs
     33a:	2301      	movcs	r3, #1
     33c:	2300      	movcc	r3, #0
     33e:	45a9      	cmp	r9, r5
     340:	d902      	bls.n	348 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc8>
     342:	2b00      	cmp	r3, #0
     344:	f000 80d9 	beq.w	4fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12>
     348:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     34c:	eba5 0509 	sub.w	r5, r5, r9
     350:	b2a3      	uxth	r3, r4
     352:	fbb5 f0fe 	udiv	r0, r5, lr
     356:	fb0e 5510 	mls	r5, lr, r0, r5
     35a:	fb08 f800 	mul.w	r8, r8, r0
     35e:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     362:	45a0      	cmp	r8, r4
     364:	d905      	bls.n	372 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf2>
     366:	193c      	adds	r4, r7, r4
     368:	d202      	bcs.n	370 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf0>
     36a:	45a0      	cmp	r8, r4
     36c:	f200 80c9 	bhi.w	502 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a>
     370:	3801      	subs	r0, #1
     372:	eba4 0408 	sub.w	r4, r4, r8
     376:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     37a:	e7bd      	b.n	2f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x78>
     37c:	428b      	cmp	r3, r1
     37e:	d908      	bls.n	392 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x112>
     380:	2e00      	cmp	r6, #0
     382:	f000 80b1 	beq.w	4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
     386:	2100      	movs	r1, #0
     388:	e9c6 0500 	strd	r0, r5, [r6]
     38c:	4608      	mov	r0, r1
     38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     392:	fab3 f183 	clz	r1, r3
     396:	2900      	cmp	r1, #0
     398:	d146      	bne.n	428 <CONFIG_FLASH_SIZE+0x28>
     39a:	42ab      	cmp	r3, r5
     39c:	f0c0 80a7 	bcc.w	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     3a0:	4282      	cmp	r2, r0
     3a2:	f240 80a4 	bls.w	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     3a6:	4608      	mov	r0, r1
     3a8:	2e00      	cmp	r6, #0
     3aa:	d0aa      	beq.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     3ac:	e9c6 4a00 	strd	r4, sl, [r6]
     3b0:	e7a7      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     3b2:	f1c2 0020 	rsb	r0, r2, #32
     3b6:	4097      	lsls	r7, r2
     3b8:	fa01 f302 	lsl.w	r3, r1, r2
     3bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     3c0:	40c1      	lsrs	r1, r0
     3c2:	fa24 f500 	lsr.w	r5, r4, r0
     3c6:	fa1f f887 	uxth.w	r8, r7
     3ca:	4094      	lsls	r4, r2
     3cc:	431d      	orrs	r5, r3
     3ce:	fbb1 f0fe 	udiv	r0, r1, lr
     3d2:	0c2b      	lsrs	r3, r5, #16
     3d4:	fb0e 1110 	mls	r1, lr, r0, r1
     3d8:	fb00 fc08 	mul.w	ip, r0, r8
     3dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     3e0:	459c      	cmp	ip, r3
     3e2:	d909      	bls.n	3f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x178>
     3e4:	18fb      	adds	r3, r7, r3
     3e6:	bf2c      	ite	cs
     3e8:	2101      	movcs	r1, #1
     3ea:	2100      	movcc	r1, #0
     3ec:	459c      	cmp	ip, r3
     3ee:	d902      	bls.n	3f6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x176>
     3f0:	2900      	cmp	r1, #0
     3f2:	f000 8095 	beq.w	520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>
     3f6:	3801      	subs	r0, #1
     3f8:	eba3 030c 	sub.w	r3, r3, ip
     3fc:	b2ad      	uxth	r5, r5
     3fe:	fbb3 f1fe 	udiv	r1, r3, lr
     402:	fb0e 3311 	mls	r3, lr, r1, r3
     406:	fb01 fc08 	mul.w	ip, r1, r8
     40a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     40e:	45ac      	cmp	ip, r5
     410:	d905      	bls.n	41e <CONFIG_FLASH_SIZE+0x1e>
     412:	197d      	adds	r5, r7, r5
     414:	d202      	bcs.n	41c <CONFIG_FLASH_SIZE+0x1c>
     416:	45ac      	cmp	ip, r5
     418:	f200 8089 	bhi.w	52e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x46>
     41c:	3901      	subs	r1, #1
     41e:	eba5 030c 	sub.w	r3, r5, ip
     422:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     426:	e77a      	b.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     428:	f1c1 0420 	rsb	r4, r1, #32
     42c:	408b      	lsls	r3, r1
     42e:	fa02 f701 	lsl.w	r7, r2, r1
     432:	fa05 fc01 	lsl.w	ip, r5, r1
     436:	40e2      	lsrs	r2, r4
     438:	fa20 f804 	lsr.w	r8, r0, r4
     43c:	40e5      	lsrs	r5, r4
     43e:	fa00 fe01 	lsl.w	lr, r0, r1
     442:	4313      	orrs	r3, r2
     444:	ea48 020c 	orr.w	r2, r8, ip
     448:	ea4f 4813 	mov.w	r8, r3, lsr #16
     44c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     450:	fa1f f983 	uxth.w	r9, r3
     454:	fbb5 faf8 	udiv	sl, r5, r8
     458:	fb08 551a 	mls	r5, r8, sl, r5
     45c:	fb0a f009 	mul.w	r0, sl, r9
     460:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     464:	4560      	cmp	r0, ip
     466:	d90a      	bls.n	47e <CONFIG_FLASH_SIZE+0x7e>
     468:	eb13 0c0c 	adds.w	ip, r3, ip
     46c:	bf2c      	ite	cs
     46e:	2501      	movcs	r5, #1
     470:	2500      	movcc	r5, #0
     472:	4560      	cmp	r0, ip
     474:	d901      	bls.n	47a <CONFIG_FLASH_SIZE+0x7a>
     476:	2d00      	cmp	r5, #0
     478:	d055      	beq.n	526 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3e>
     47a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     47e:	ebac 0c00 	sub.w	ip, ip, r0
     482:	b292      	uxth	r2, r2
     484:	fbbc f0f8 	udiv	r0, ip, r8
     488:	fb08 cc10 	mls	ip, r8, r0, ip
     48c:	fb00 f909 	mul.w	r9, r0, r9
     490:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     494:	45e1      	cmp	r9, ip
     496:	d905      	bls.n	4a4 <CONFIG_FLASH_SIZE+0xa4>
     498:	eb13 0c0c 	adds.w	ip, r3, ip
     49c:	d201      	bcs.n	4a2 <CONFIG_FLASH_SIZE+0xa2>
     49e:	45e1      	cmp	r9, ip
     4a0:	d83b      	bhi.n	51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
     4a2:	3801      	subs	r0, #1
     4a4:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     4a8:	ebac 0c09 	sub.w	ip, ip, r9
     4ac:	fba0 8907 	umull	r8, r9, r0, r7
     4b0:	45cc      	cmp	ip, r9
     4b2:	4645      	mov	r5, r8
     4b4:	464a      	mov	r2, r9
     4b6:	d302      	bcc.n	4be <CONFIG_FLASH_SIZE+0xbe>
     4b8:	d106      	bne.n	4c8 <CONFIG_FLASH_SIZE+0xc8>
     4ba:	45c6      	cmp	lr, r8
     4bc:	d204      	bcs.n	4c8 <CONFIG_FLASH_SIZE+0xc8>
     4be:	3801      	subs	r0, #1
     4c0:	ebb8 0507 	subs.w	r5, r8, r7
     4c4:	eb69 0203 	sbc.w	r2, r9, r3
     4c8:	b32e      	cbz	r6, 516 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e>
     4ca:	ebbe 0305 	subs.w	r3, lr, r5
     4ce:	eb6c 0c02 	sbc.w	ip, ip, r2
     4d2:	fa23 f201 	lsr.w	r2, r3, r1
     4d6:	fa0c f404 	lsl.w	r4, ip, r4
     4da:	fa2c f301 	lsr.w	r3, ip, r1
     4de:	2100      	movs	r1, #0
     4e0:	4314      	orrs	r4, r2
     4e2:	e9c6 4300 	strd	r4, r3, [r6]
     4e6:	e70c      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     4e8:	4631      	mov	r1, r6
     4ea:	4630      	mov	r0, r6
     4ec:	e709      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     4ee:	1a84      	subs	r4, r0, r2
     4f0:	eb65 0303 	sbc.w	r3, r5, r3
     4f4:	2001      	movs	r0, #1
     4f6:	469a      	mov	sl, r3
     4f8:	e756      	b.n	3a8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x128>
     4fa:	f1ac 0c02 	sub.w	ip, ip, #2
     4fe:	443d      	add	r5, r7
     500:	e724      	b.n	34c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xcc>
     502:	3802      	subs	r0, #2
     504:	443c      	add	r4, r7
     506:	e734      	b.n	372 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf2>
     508:	3802      	subs	r0, #2
     50a:	443c      	add	r4, r7
     50c:	e6ef      	b.n	2ee <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6e>
     50e:	f1ae 0e02 	sub.w	lr, lr, #2
     512:	443b      	add	r3, r7
     514:	e6d9      	b.n	2ca <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4a>
     516:	4631      	mov	r1, r6
     518:	e6f3      	b.n	302 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x82>
     51a:	3802      	subs	r0, #2
     51c:	449c      	add	ip, r3
     51e:	e7c1      	b.n	4a4 <CONFIG_FLASH_SIZE+0xa4>
     520:	3802      	subs	r0, #2
     522:	443b      	add	r3, r7
     524:	e768      	b.n	3f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x178>
     526:	f1aa 0a02 	sub.w	sl, sl, #2
     52a:	449c      	add	ip, r3
     52c:	e7a7      	b.n	47e <CONFIG_FLASH_SIZE+0x7e>
     52e:	3902      	subs	r1, #2
     530:	443d      	add	r5, r7
     532:	e774      	b.n	41e <CONFIG_FLASH_SIZE+0x1e>

00000534 <__aeabi_idiv0>:
     534:	4770      	bx	lr
     536:	bf00      	nop

00000538 <__gnu_cmse_nonsecure_call>:
     538:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     53c:	4627      	mov	r7, r4
     53e:	46a0      	mov	r8, r4
     540:	46a1      	mov	r9, r4
     542:	46a2      	mov	sl, r4
     544:	46a3      	mov	fp, r4
     546:	46a4      	mov	ip, r4
     548:	b0a2      	sub	sp, #136	; 0x88
     54a:	ec2d 0a00 	vlstm	sp
     54e:	f384 8800 	msr	CPSR_f, r4
     552:	4625      	mov	r5, r4
     554:	4626      	mov	r6, r4
     556:	47a4      	blxns	r4
     558:	ec3d 0a00 	vlldm	sp
     55c:	b022      	add	sp, #136	; 0x88
     55e:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
	...

00000564 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     564:	680b      	ldr	r3, [r1, #0]
     566:	3301      	adds	r3, #1
     568:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     56a:	4b01      	ldr	r3, [pc, #4]	; (570 <char_out+0xc>)
     56c:	681b      	ldr	r3, [r3, #0]
     56e:	4718      	bx	r3
     570:	20000000 	.word	0x20000000

00000574 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     574:	b507      	push	{r0, r1, r2, lr}
     576:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     578:	2100      	movs	r1, #0
{
     57a:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     57c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     57e:	4803      	ldr	r0, [pc, #12]	; (58c <vprintk+0x18>)
     580:	a901      	add	r1, sp, #4
     582:	f000 f805 	bl	590 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     586:	b003      	add	sp, #12
     588:	f85d fb04 	ldr.w	pc, [sp], #4
     58c:	00000565 	.word	0x00000565

00000590 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     594:	468b      	mov	fp, r1
     596:	4692      	mov	sl, r2
     598:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     59a:	2500      	movs	r5, #0
{
     59c:	b091      	sub	sp, #68	; 0x44
     59e:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     5a0:	f89a 0000 	ldrb.w	r0, [sl]
     5a4:	b908      	cbnz	r0, 5aa <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     5a6:	4628      	mov	r0, r5
     5a8:	e35e      	b.n	c68 <CONFIG_ISR_STACK_SIZE+0x468>
		if (*fp != '%') {
     5aa:	2825      	cmp	r0, #37	; 0x25
     5ac:	f10a 0701 	add.w	r7, sl, #1
     5b0:	d007      	beq.n	5c2 <cbvprintf+0x32>
			OUTC('%');
     5b2:	4659      	mov	r1, fp
     5b4:	9b02      	ldr	r3, [sp, #8]
     5b6:	4798      	blx	r3
     5b8:	2800      	cmp	r0, #0
     5ba:	f2c0 8355 	blt.w	c68 <CONFIG_ISR_STACK_SIZE+0x468>
     5be:	3501      	adds	r5, #1
			break;
     5c0:	e210      	b.n	9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>
		} state = {
     5c2:	2218      	movs	r2, #24
     5c4:	2100      	movs	r1, #0
     5c6:	a80a      	add	r0, sp, #40	; 0x28
     5c8:	f007 feea 	bl	83a0 <memset>
	if (*sp == '%') {
     5cc:	f89a 3001 	ldrb.w	r3, [sl, #1]
     5d0:	2b25      	cmp	r3, #37	; 0x25
     5d2:	d078      	beq.n	6c6 <cbvprintf+0x136>
     5d4:	2200      	movs	r2, #0
     5d6:	4694      	mov	ip, r2
     5d8:	4616      	mov	r6, r2
     5da:	4696      	mov	lr, r2
     5dc:	4610      	mov	r0, r2
     5de:	4639      	mov	r1, r7
		switch (*sp) {
     5e0:	f817 3b01 	ldrb.w	r3, [r7], #1
     5e4:	2b2b      	cmp	r3, #43	; 0x2b
     5e6:	f000 809d 	beq.w	724 <cbvprintf+0x194>
     5ea:	f200 8094 	bhi.w	716 <cbvprintf+0x186>
     5ee:	2b20      	cmp	r3, #32
     5f0:	f000 809b 	beq.w	72a <cbvprintf+0x19a>
     5f4:	2b23      	cmp	r3, #35	; 0x23
     5f6:	f000 809a 	beq.w	72e <cbvprintf+0x19e>
     5fa:	b128      	cbz	r0, 608 <cbvprintf+0x78>
     5fc:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     600:	f040 0004 	orr.w	r0, r0, #4
     604:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     608:	f1be 0f00 	cmp.w	lr, #0
     60c:	d005      	beq.n	61a <cbvprintf+0x8a>
     60e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     612:	f040 0008 	orr.w	r0, r0, #8
     616:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     61a:	b12e      	cbz	r6, 628 <cbvprintf+0x98>
     61c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     620:	f040 0010 	orr.w	r0, r0, #16
     624:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     628:	f1bc 0f00 	cmp.w	ip, #0
     62c:	d005      	beq.n	63a <cbvprintf+0xaa>
     62e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     632:	f040 0020 	orr.w	r0, r0, #32
     636:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     63a:	b12a      	cbz	r2, 648 <cbvprintf+0xb8>
     63c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     644:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     648:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     64c:	f002 0044 	and.w	r0, r2, #68	; 0x44
     650:	2844      	cmp	r0, #68	; 0x44
     652:	d103      	bne.n	65c <cbvprintf+0xcc>
		conv->flag_zero = false;
     654:	f36f 1286 	bfc	r2, #6, #1
     658:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     65c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     660:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     662:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     666:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     66a:	d17b      	bne.n	764 <cbvprintf+0x1d4>
		conv->width_star = true;
     66c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     670:	1c4b      	adds	r3, r1, #1
     672:	f042 0201 	orr.w	r2, r2, #1
     676:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     67a:	781a      	ldrb	r2, [r3, #0]
     67c:	2a2e      	cmp	r2, #46	; 0x2e
     67e:	bf0c      	ite	eq
     680:	2101      	moveq	r1, #1
     682:	2100      	movne	r1, #0
     684:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     688:	f361 0241 	bfi	r2, r1, #1, #1
     68c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     690:	d174      	bne.n	77c <cbvprintf+0x1ec>
	if (*sp == '*') {
     692:	785a      	ldrb	r2, [r3, #1]
     694:	2a2a      	cmp	r2, #42	; 0x2a
     696:	d06a      	beq.n	76e <cbvprintf+0x1de>
	size_t val = 0;
     698:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     69a:	260a      	movs	r6, #10
     69c:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     69e:	4618      	mov	r0, r3
     6a0:	f810 2b01 	ldrb.w	r2, [r0], #1
     6a4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     6a8:	2f09      	cmp	r7, #9
     6aa:	f240 808e 	bls.w	7ca <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     6ae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     6b2:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     6b4:	f3c2 0040 	ubfx	r0, r2, #1, #1
     6b8:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     6bc:	f361 0241 	bfi	r2, r1, #1, #1
     6c0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     6c4:	e05a      	b.n	77c <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     6c6:	f10a 0702 	add.w	r7, sl, #2
     6ca:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     6ce:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     6d2:	07d9      	lsls	r1, r3, #31
     6d4:	f140 8149 	bpl.w	96a <CONFIG_ISR_STACK_SIZE+0x16a>
			width = va_arg(ap, int);
     6d8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     6dc:	f1b9 0f00 	cmp.w	r9, #0
     6e0:	da07      	bge.n	6f2 <cbvprintf+0x162>
				conv->flag_dash = true;
     6e2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
     6e6:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
     6ea:	f042 0204 	orr.w	r2, r2, #4
     6ee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
     6f2:	075a      	lsls	r2, r3, #29
     6f4:	f140 8142 	bpl.w	97c <CONFIG_ISR_STACK_SIZE+0x17c>
			int arg = va_arg(ap, int);
     6f8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     6fc:	f1b8 0f00 	cmp.w	r8, #0
     700:	f280 8141 	bge.w	986 <CONFIG_ISR_STACK_SIZE+0x186>
				conv->prec_present = false;
     704:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     708:	f36f 0341 	bfc	r3, #1, #1
     70c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     710:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
     714:	e137      	b.n	986 <CONFIG_ISR_STACK_SIZE+0x186>
		switch (*sp) {
     716:	2b2d      	cmp	r3, #45	; 0x2d
     718:	d00c      	beq.n	734 <cbvprintf+0x1a4>
     71a:	2b30      	cmp	r3, #48	; 0x30
     71c:	f47f af6d 	bne.w	5fa <cbvprintf+0x6a>
			conv->flag_zero = true;
     720:	2201      	movs	r2, #1
	} while (loop);
     722:	e75c      	b.n	5de <cbvprintf+0x4e>
			conv->flag_plus = true;
     724:	f04f 0e01 	mov.w	lr, #1
     728:	e759      	b.n	5de <cbvprintf+0x4e>
			conv->flag_space = true;
     72a:	2601      	movs	r6, #1
     72c:	e757      	b.n	5de <cbvprintf+0x4e>
			conv->flag_hash = true;
     72e:	f04f 0c01 	mov.w	ip, #1
     732:	e754      	b.n	5de <cbvprintf+0x4e>
		switch (*sp) {
     734:	2001      	movs	r0, #1
     736:	e752      	b.n	5de <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     738:	4633      	mov	r3, r6
     73a:	fb0c 0202 	mla	r2, ip, r2, r0
     73e:	3a30      	subs	r2, #48	; 0x30
     740:	461e      	mov	r6, r3
     742:	f816 0b01 	ldrb.w	r0, [r6], #1
     746:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     74a:	2f09      	cmp	r7, #9
     74c:	d9f4      	bls.n	738 <cbvprintf+0x1a8>
	if (sp != wp) {
     74e:	4299      	cmp	r1, r3
     750:	d093      	beq.n	67a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     752:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     756:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     758:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     75a:	f362 0141 	bfi	r1, r2, #1, #1
     75e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     762:	e78a      	b.n	67a <cbvprintf+0xea>
     764:	460b      	mov	r3, r1
	size_t val = 0;
     766:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     768:	f04f 0c0a 	mov.w	ip, #10
     76c:	e7e8      	b.n	740 <cbvprintf+0x1b0>
		conv->prec_star = true;
     76e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     772:	3302      	adds	r3, #2
		conv->prec_star = true;
     774:	f042 0204 	orr.w	r2, r2, #4
     778:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
     77c:	461f      	mov	r7, r3
     77e:	f817 2b01 	ldrb.w	r2, [r7], #1
     782:	2a6c      	cmp	r2, #108	; 0x6c
     784:	d041      	beq.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
     786:	d825      	bhi.n	7d4 <cbvprintf+0x244>
     788:	2a68      	cmp	r2, #104	; 0x68
     78a:	d02b      	beq.n	7e4 <cbvprintf+0x254>
     78c:	2a6a      	cmp	r2, #106	; 0x6a
     78e:	d046      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
     790:	2a4c      	cmp	r2, #76	; 0x4c
     792:	d04c      	beq.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
     794:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     796:	f817 2b01 	ldrb.w	r2, [r7], #1
     79a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
     79e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     7a0:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     7a4:	f200 80d9 	bhi.w	95a <CONFIG_ISR_STACK_SIZE+0x15a>
     7a8:	2a57      	cmp	r2, #87	; 0x57
     7aa:	d84d      	bhi.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
     7ac:	2a41      	cmp	r2, #65	; 0x41
     7ae:	d003      	beq.n	7b8 <cbvprintf+0x228>
     7b0:	3a45      	subs	r2, #69	; 0x45
     7b2:	2a02      	cmp	r2, #2
     7b4:	f200 80d1 	bhi.w	95a <CONFIG_ISR_STACK_SIZE+0x15a>
		conv->specifier_cat = SPECIFIER_FP;
     7b8:	2204      	movs	r2, #4
     7ba:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     7be:	f362 0302 	bfi	r3, r2, #0, #3
     7c2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     7c6:	2301      	movs	r3, #1
			break;
     7c8:	e09e      	b.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
		val = 10U * val + *sp++ - '0';
     7ca:	fb06 2101 	mla	r1, r6, r1, r2
     7ce:	4603      	mov	r3, r0
     7d0:	3930      	subs	r1, #48	; 0x30
     7d2:	e764      	b.n	69e <cbvprintf+0x10e>
	switch (*sp) {
     7d4:	2a74      	cmp	r2, #116	; 0x74
     7d6:	d026      	beq.n	826 <CONFIG_ISR_STACK_SIZE+0x26>
     7d8:	2a7a      	cmp	r2, #122	; 0x7a
     7da:	d1db      	bne.n	794 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     7dc:	2206      	movs	r2, #6
     7de:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     7e2:	e00d      	b.n	800 <CONFIG_ISR_STACK_SIZE>
		if (*++sp == 'h') {
     7e4:	785a      	ldrb	r2, [r3, #1]
     7e6:	2a68      	cmp	r2, #104	; 0x68
     7e8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     7ec:	d106      	bne.n	7fc <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     7ee:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     7f0:	f361 02c6 	bfi	r2, r1, #3, #4
     7f4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     7f8:	1c9f      	adds	r7, r3, #2
     7fa:	e7cc      	b.n	796 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     7fc:	4613      	mov	r3, r2
     7fe:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     800:	f362 03c6 	bfi	r3, r2, #3, #4
     804:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     808:	e7c5      	b.n	796 <cbvprintf+0x206>
		if (*++sp == 'l') {
     80a:	785a      	ldrb	r2, [r3, #1]
     80c:	2a6c      	cmp	r2, #108	; 0x6c
     80e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     812:	d101      	bne.n	818 <CONFIG_ISR_STACK_SIZE+0x18>
			conv->length_mod = LENGTH_LL;
     814:	2104      	movs	r1, #4
     816:	e7eb      	b.n	7f0 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     818:	4613      	mov	r3, r2
     81a:	2203      	movs	r2, #3
     81c:	e7f0      	b.n	800 <CONFIG_ISR_STACK_SIZE>
		conv->length_mod = LENGTH_J;
     81e:	2205      	movs	r2, #5
     820:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     824:	e7ec      	b.n	800 <CONFIG_ISR_STACK_SIZE>
		conv->length_mod = LENGTH_T;
     826:	2207      	movs	r2, #7
     828:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     82c:	e7e8      	b.n	800 <CONFIG_ISR_STACK_SIZE>
		conv->unsupported = true;
     82e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     832:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     836:	f023 0302 	bic.w	r3, r3, #2
     83a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     83e:	f043 0302 	orr.w	r3, r3, #2
     842:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     846:	e7a6      	b.n	796 <cbvprintf+0x206>
     848:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     84c:	2920      	cmp	r1, #32
     84e:	f200 8084 	bhi.w	95a <CONFIG_ISR_STACK_SIZE+0x15a>
     852:	a001      	add	r0, pc, #4	; (adr r0, 858 <CONFIG_ISR_STACK_SIZE+0x58>)
     854:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     858:	0000091d 	.word	0x0000091d
     85c:	0000095b 	.word	0x0000095b
     860:	0000095b 	.word	0x0000095b
     864:	0000095b 	.word	0x0000095b
     868:	0000095b 	.word	0x0000095b
     86c:	0000095b 	.word	0x0000095b
     870:	0000095b 	.word	0x0000095b
     874:	0000095b 	.word	0x0000095b
     878:	0000095b 	.word	0x0000095b
     87c:	000007b9 	.word	0x000007b9
     880:	0000095b 	.word	0x0000095b
     884:	0000091d 	.word	0x0000091d
     888:	000008dd 	.word	0x000008dd
     88c:	000007b9 	.word	0x000007b9
     890:	000007b9 	.word	0x000007b9
     894:	000007b9 	.word	0x000007b9
     898:	0000095b 	.word	0x0000095b
     89c:	000008dd 	.word	0x000008dd
     8a0:	0000095b 	.word	0x0000095b
     8a4:	0000095b 	.word	0x0000095b
     8a8:	0000095b 	.word	0x0000095b
     8ac:	0000095b 	.word	0x0000095b
     8b0:	00000925 	.word	0x00000925
     8b4:	0000091d 	.word	0x0000091d
     8b8:	00000941 	.word	0x00000941
     8bc:	0000095b 	.word	0x0000095b
     8c0:	0000095b 	.word	0x0000095b
     8c4:	00000941 	.word	0x00000941
     8c8:	0000095b 	.word	0x0000095b
     8cc:	0000091d 	.word	0x0000091d
     8d0:	0000095b 	.word	0x0000095b
     8d4:	0000095b 	.word	0x0000095b
     8d8:	0000091d 	.word	0x0000091d
		conv->specifier_cat = SPECIFIER_SINT;
     8dc:	2001      	movs	r0, #1
     8de:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     8e2:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     8e6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     8ea:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     8ec:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     8f0:	bf02      	ittt	eq
     8f2:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     8f6:	f041 0101 	orreq.w	r1, r1, #1
     8fa:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     8fe:	2a63      	cmp	r2, #99	; 0x63
     900:	d131      	bne.n	966 <CONFIG_ISR_STACK_SIZE+0x166>
			unsupported = (conv->length_mod != LENGTH_NONE);
     902:	3b00      	subs	r3, #0
     904:	bf18      	it	ne
     906:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     908:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     90c:	f3c2 0140 	ubfx	r1, r2, #1, #1
     910:	430b      	orrs	r3, r1
     912:	f363 0241 	bfi	r2, r3, #1, #1
     916:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     91a:	e6d8      	b.n	6ce <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     91c:	2002      	movs	r0, #2
     91e:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     922:	e7de      	b.n	8e2 <CONFIG_ISR_STACK_SIZE+0xe2>
		conv->specifier_cat = SPECIFIER_PTR;
     924:	2103      	movs	r1, #3
     926:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     92a:	f003 0378 	and.w	r3, r3, #120	; 0x78
     92e:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     932:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     936:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     938:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     93c:	4143      	adcs	r3, r0
     93e:	e7e3      	b.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
		conv->specifier_cat = SPECIFIER_PTR;
     940:	2103      	movs	r1, #3
     942:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     946:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     94a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     94e:	bf14      	ite	ne
     950:	2301      	movne	r3, #1
     952:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
     954:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     958:	e7d6      	b.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
		conv->invalid = true;
     95a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     95e:	f043 0301 	orr.w	r3, r3, #1
     962:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     966:	2300      	movs	r3, #0
     968:	e7ce      	b.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
		} else if (conv->width_present) {
     96a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     96e:	2a00      	cmp	r2, #0
		int width = -1;
     970:	bfac      	ite	ge
     972:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
			width = conv->width_value;
     976:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
     97a:	e6ba      	b.n	6f2 <cbvprintf+0x162>
		} else if (conv->prec_present) {
     97c:	079b      	lsls	r3, r3, #30
     97e:	f57f aec7 	bpl.w	710 <cbvprintf+0x180>
			precision = conv->prec_value;
     982:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
     986:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     988:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     98c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
     990:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
     994:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     998:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     99a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     99e:	d136      	bne.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
			switch (length_mod) {
     9a0:	1ed3      	subs	r3, r2, #3
     9a2:	2b04      	cmp	r3, #4
     9a4:	d820      	bhi.n	9e8 <CONFIG_ISR_STACK_SIZE+0x1e8>
     9a6:	e8df f003 	tbb	[pc, r3]
     9aa:	0703      	.short	0x0703
     9ac:	1f07      	.short	0x1f07
     9ae:	1f          	.byte	0x1f
     9af:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     9b0:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     9b4:	17c1      	asrs	r1, r0, #31
     9b6:	e004      	b.n	9c2 <CONFIG_ISR_STACK_SIZE+0x1c2>
					(sint_value_type)va_arg(ap, intmax_t);
     9b8:	3407      	adds	r4, #7
     9ba:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     9be:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     9c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     9c6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     9ca:	f013 0603 	ands.w	r6, r3, #3
     9ce:	d054      	beq.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
			OUTS(sp, fp);
     9d0:	463b      	mov	r3, r7
     9d2:	4652      	mov	r2, sl
     9d4:	4659      	mov	r1, fp
     9d6:	9802      	ldr	r0, [sp, #8]
     9d8:	f007 fc11 	bl	81fe <outs>
     9dc:	2800      	cmp	r0, #0
     9de:	f2c0 8143 	blt.w	c68 <CONFIG_ISR_STACK_SIZE+0x468>
     9e2:	4405      	add	r5, r0
			continue;
     9e4:	46ba      	mov	sl, r7
     9e6:	e5db      	b.n	5a0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     9e8:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     9ec:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     9ee:	ea4f 71e0 	mov.w	r1, r0, asr #31
     9f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     9f6:	d105      	bne.n	a04 <CONFIG_ISR_STACK_SIZE+0x204>
				value->uint = (unsigned char)value->uint;
     9f8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     9fc:	930a      	str	r3, [sp, #40]	; 0x28
     9fe:	2300      	movs	r3, #0
     a00:	930b      	str	r3, [sp, #44]	; 0x2c
     a02:	e7e0      	b.n	9c6 <CONFIG_ISR_STACK_SIZE+0x1c6>
			} else if (length_mod == LENGTH_H) {
     a04:	2a02      	cmp	r2, #2
     a06:	d1de      	bne.n	9c6 <CONFIG_ISR_STACK_SIZE+0x1c6>
				value->sint = (short)value->sint;
     a08:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     a0c:	e7d2      	b.n	9b4 <CONFIG_ISR_STACK_SIZE+0x1b4>
		} else if (specifier_cat == SPECIFIER_UINT) {
     a0e:	2b02      	cmp	r3, #2
     a10:	d123      	bne.n	a5a <CONFIG_ISR_STACK_SIZE+0x25a>
			switch (length_mod) {
     a12:	1ed3      	subs	r3, r2, #3
     a14:	2b04      	cmp	r3, #4
     a16:	d813      	bhi.n	a40 <CONFIG_ISR_STACK_SIZE+0x240>
     a18:	e8df f003 	tbb	[pc, r3]
     a1c:	120a0a03 	.word	0x120a0a03
     a20:	12          	.byte	0x12
     a21:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
     a22:	2100      	movs	r1, #0
					value->uint = (wchar_t)va_arg(ap,
     a24:	6820      	ldr	r0, [r4, #0]
     a26:	1d23      	adds	r3, r4, #4
     a28:	900a      	str	r0, [sp, #40]	; 0x28
     a2a:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     a2c:	461c      	mov	r4, r3
     a2e:	e7ca      	b.n	9c6 <CONFIG_ISR_STACK_SIZE+0x1c6>
					(uint_value_type)va_arg(ap,
     a30:	3407      	adds	r4, #7
     a32:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     a36:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     a3a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     a3e:	e7f5      	b.n	a2c <CONFIG_ISR_STACK_SIZE+0x22c>
					(uint_value_type)va_arg(ap, size_t);
     a40:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     a44:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     a46:	930a      	str	r3, [sp, #40]	; 0x28
     a48:	f04f 0300 	mov.w	r3, #0
     a4c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     a4e:	d0d3      	beq.n	9f8 <CONFIG_ISR_STACK_SIZE+0x1f8>
			} else if (length_mod == LENGTH_H) {
     a50:	2a02      	cmp	r2, #2
     a52:	d1b8      	bne.n	9c6 <CONFIG_ISR_STACK_SIZE+0x1c6>
				value->uint = (unsigned short)value->uint;
     a54:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     a58:	e7d0      	b.n	9fc <CONFIG_ISR_STACK_SIZE+0x1fc>
		} else if (specifier_cat == SPECIFIER_FP) {
     a5a:	2b04      	cmp	r3, #4
     a5c:	d107      	bne.n	a6e <CONFIG_ISR_STACK_SIZE+0x26e>
			if (length_mod == LENGTH_UPPER_L) {
     a5e:	3407      	adds	r4, #7
     a60:	f024 0407 	bic.w	r4, r4, #7
     a64:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     a68:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     a6c:	e7ab      	b.n	9c6 <CONFIG_ISR_STACK_SIZE+0x1c6>
		} else if (specifier_cat == SPECIFIER_PTR) {
     a6e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     a70:	bf04      	itt	eq
     a72:	f854 3b04 	ldreq.w	r3, [r4], #4
     a76:	930a      	streq	r3, [sp, #40]	; 0x28
     a78:	e7a5      	b.n	9c6 <CONFIG_ISR_STACK_SIZE+0x1c6>
		switch (conv->specifier) {
     a7a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     a7e:	2878      	cmp	r0, #120	; 0x78
     a80:	d8b0      	bhi.n	9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>
     a82:	2862      	cmp	r0, #98	; 0x62
     a84:	d822      	bhi.n	acc <CONFIG_ISR_STACK_SIZE+0x2cc>
     a86:	2825      	cmp	r0, #37	; 0x25
     a88:	f43f ad93 	beq.w	5b2 <cbvprintf+0x22>
     a8c:	2858      	cmp	r0, #88	; 0x58
     a8e:	d1a9      	bne.n	9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>
			bps = encode_uint(value->uint, conv, buf, bpe);
     a90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     a94:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     a98:	9300      	str	r3, [sp, #0]
     a9a:	aa0c      	add	r2, sp, #48	; 0x30
     a9c:	ab04      	add	r3, sp, #16
     a9e:	f007 fb63 	bl	8168 <encode_uint>
     aa2:	4682      	mov	sl, r0
			if (precision >= 0) {
     aa4:	f1b8 0f00 	cmp.w	r8, #0
     aa8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     aac:	db0c      	blt.n	ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
				conv->flag_zero = false;
     aae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     ab2:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     ab6:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     aba:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     abc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     ac0:	d902      	bls.n	ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
					conv->pad0_value = precision - (int)len;
     ac2:	eba8 0303 	sub.w	r3, r8, r3
     ac6:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     ac8:	4680      	mov	r8, r0
     aca:	e03d      	b.n	b48 <CONFIG_ISR_STACK_SIZE+0x348>
     acc:	3863      	subs	r0, #99	; 0x63
     ace:	2815      	cmp	r0, #21
     ad0:	d888      	bhi.n	9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>
     ad2:	a101      	add	r1, pc, #4	; (adr r1, ad8 <CONFIG_ISR_STACK_SIZE+0x2d8>)
     ad4:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     ad8:	00000b59 	.word	0x00000b59
     adc:	00000bbd 	.word	0x00000bbd
     ae0:	000009e5 	.word	0x000009e5
     ae4:	000009e5 	.word	0x000009e5
     ae8:	000009e5 	.word	0x000009e5
     aec:	000009e5 	.word	0x000009e5
     af0:	00000bbd 	.word	0x00000bbd
     af4:	000009e5 	.word	0x000009e5
     af8:	000009e5 	.word	0x000009e5
     afc:	000009e5 	.word	0x000009e5
     b00:	000009e5 	.word	0x000009e5
     b04:	00000c1b 	.word	0x00000c1b
     b08:	00000be9 	.word	0x00000be9
     b0c:	00000bed 	.word	0x00000bed
     b10:	000009e5 	.word	0x000009e5
     b14:	000009e5 	.word	0x000009e5
     b18:	00000b31 	.word	0x00000b31
     b1c:	000009e5 	.word	0x000009e5
     b20:	00000be9 	.word	0x00000be9
     b24:	000009e5 	.word	0x000009e5
     b28:	000009e5 	.word	0x000009e5
     b2c:	00000be9 	.word	0x00000be9
			if (precision >= 0) {
     b30:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     b34:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     b38:	db0a      	blt.n	b50 <CONFIG_ISR_STACK_SIZE+0x350>
				len = strnlen(bps, precision);
     b3a:	4641      	mov	r1, r8
     b3c:	4650      	mov	r0, sl
     b3e:	f007 fbf4 	bl	832a <strnlen>
		char sign = 0;
     b42:	2600      	movs	r6, #0
			bpe = bps + len;
     b44:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
     b48:	f1ba 0f00 	cmp.w	sl, #0
     b4c:	d10c      	bne.n	b68 <CONFIG_ISR_STACK_SIZE+0x368>
     b4e:	e749      	b.n	9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>
				len = strlen(bps);
     b50:	4650      	mov	r0, sl
     b52:	f007 fbe3 	bl	831c <strlen>
     b56:	e7f4      	b.n	b42 <CONFIG_ISR_STACK_SIZE+0x342>
			break;
     b58:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bpe = buf + 1;
     b5c:	f10d 0811 	add.w	r8, sp, #17
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     b60:	f88d 3010 	strb.w	r3, [sp, #16]
			bps = buf;
     b64:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
     b68:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     b6c:	b106      	cbz	r6, b70 <CONFIG_ISR_STACK_SIZE+0x370>
			nj_len += 1U;
     b6e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     b70:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     b74:	06d0      	lsls	r0, r2, #27
     b76:	d56b      	bpl.n	c50 <CONFIG_ISR_STACK_SIZE+0x450>
			nj_len += 2U;
     b78:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     b7a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     b7c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     b7e:	bf48      	it	mi
     b80:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     b82:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     b84:	bf48      	it	mi
     b86:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     b88:	f1b9 0f00 	cmp.w	r9, #0
     b8c:	dd79      	ble.n	c82 <CONFIG_ISR_STACK_SIZE+0x482>
			if (!conv->flag_dash) {
     b8e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     b92:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     b96:	f3c2 0380 	ubfx	r3, r2, #2, #1
     b9a:	9303      	str	r3, [sp, #12]
     b9c:	0753      	lsls	r3, r2, #29
     b9e:	d470      	bmi.n	c82 <CONFIG_ISR_STACK_SIZE+0x482>
				if (conv->flag_zero) {
     ba0:	0650      	lsls	r0, r2, #25
     ba2:	d564      	bpl.n	c6e <CONFIG_ISR_STACK_SIZE+0x46e>
					if (sign != 0) {
     ba4:	b146      	cbz	r6, bb8 <CONFIG_ISR_STACK_SIZE+0x3b8>
						OUTC(sign);
     ba6:	4659      	mov	r1, fp
     ba8:	4630      	mov	r0, r6
     baa:	9b02      	ldr	r3, [sp, #8]
     bac:	4798      	blx	r3
     bae:	2800      	cmp	r0, #0
     bb0:	db5a      	blt.n	c68 <CONFIG_ISR_STACK_SIZE+0x468>
						sign = 0;
     bb2:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     bb4:	3501      	adds	r5, #1
						sign = 0;
     bb6:	461e      	mov	r6, r3
					pad = '0';
     bb8:	2330      	movs	r3, #48	; 0x30
     bba:	e059      	b.n	c70 <CONFIG_ISR_STACK_SIZE+0x470>
			if (conv->flag_plus) {
     bbc:	071e      	lsls	r6, r3, #28
     bbe:	d411      	bmi.n	be4 <CONFIG_ISR_STACK_SIZE+0x3e4>
				sign = ' ';
     bc0:	f013 0610 	ands.w	r6, r3, #16
     bc4:	bf18      	it	ne
     bc6:	2620      	movne	r6, #32
			sint = value->sint;
     bc8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     bcc:	2a00      	cmp	r2, #0
     bce:	f173 0100 	sbcs.w	r1, r3, #0
     bd2:	f6bf af5d 	bge.w	a90 <CONFIG_ISR_STACK_SIZE+0x290>
				value->uint = (uint_value_type)-sint;
     bd6:	4252      	negs	r2, r2
     bd8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
     bdc:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
     bde:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     be2:	e755      	b.n	a90 <CONFIG_ISR_STACK_SIZE+0x290>
				sign = '+';
     be4:	262b      	movs	r6, #43	; 0x2b
     be6:	e7ef      	b.n	bc8 <CONFIG_ISR_STACK_SIZE+0x3c8>
		switch (conv->specifier) {
     be8:	2600      	movs	r6, #0
     bea:	e751      	b.n	a90 <CONFIG_ISR_STACK_SIZE+0x290>
			if (value->ptr != NULL) {
     bec:	980a      	ldr	r0, [sp, #40]	; 0x28
     bee:	b348      	cbz	r0, c44 <CONFIG_ISR_STACK_SIZE+0x444>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     bf0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     bf4:	9300      	str	r3, [sp, #0]
     bf6:	2100      	movs	r1, #0
     bf8:	ab04      	add	r3, sp, #16
     bfa:	aa0c      	add	r2, sp, #48	; 0x30
     bfc:	f007 fab4 	bl	8168 <encode_uint>
				conv->altform_0c = true;
     c00:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c04:	4682      	mov	sl, r0
				conv->altform_0c = true;
     c06:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     c0a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     c0e:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
     c12:	2600      	movs	r6, #0
				conv->altform_0c = true;
     c14:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
     c18:	e744      	b.n	aa4 <CONFIG_ISR_STACK_SIZE+0x2a4>
				store_count(conv, value->ptr, count);
     c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     c1c:	2a07      	cmp	r2, #7
     c1e:	f63f aee1 	bhi.w	9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>
     c22:	e8df f002 	tbb	[pc, r2]
     c26:	040d      	.short	0x040d
     c28:	08080d06 	.word	0x08080d06
     c2c:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
     c2e:	701d      	strb	r5, [r3, #0]
		break;
     c30:	e6d8      	b.n	9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>
		*(short *)dp = (short)count;
     c32:	801d      	strh	r5, [r3, #0]
		break;
     c34:	e6d6      	b.n	9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>
		*(intmax_t *)dp = (intmax_t)count;
     c36:	4628      	mov	r0, r5
     c38:	17e9      	asrs	r1, r5, #31
     c3a:	e9c3 0100 	strd	r0, r1, [r3]
		break;
     c3e:	e6d1      	b.n	9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     c40:	601d      	str	r5, [r3, #0]
		break;
     c42:	e6cf      	b.n	9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>
			bpe = bps + 5;
     c44:	f8df 80c4 	ldr.w	r8, [pc, #196]	; d0c <CONFIG_ISR_STACK_SIZE+0x50c>
     c48:	4606      	mov	r6, r0
			bps = "(nil)";
     c4a:	f1a8 0a05 	sub.w	sl, r8, #5
     c4e:	e78b      	b.n	b68 <CONFIG_ISR_STACK_SIZE+0x368>
		} else if (conv->altform_0) {
     c50:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     c52:	bf48      	it	mi
     c54:	3301      	addmi	r3, #1
     c56:	e790      	b.n	b7a <CONFIG_ISR_STACK_SIZE+0x37a>
					OUTC(pad);
     c58:	4618      	mov	r0, r3
     c5a:	9303      	str	r3, [sp, #12]
     c5c:	4659      	mov	r1, fp
     c5e:	9b02      	ldr	r3, [sp, #8]
     c60:	4798      	blx	r3
     c62:	2800      	cmp	r0, #0
     c64:	9b03      	ldr	r3, [sp, #12]
     c66:	da04      	bge.n	c72 <CONFIG_ISR_STACK_SIZE+0x472>
#undef OUTS
#undef OUTC
}
     c68:	b011      	add	sp, #68	; 0x44
     c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     c6e:	2320      	movs	r3, #32
     c70:	444d      	add	r5, r9
     c72:	464a      	mov	r2, r9
				while (width-- > 0) {
     c74:	2a00      	cmp	r2, #0
     c76:	eba5 0109 	sub.w	r1, r5, r9
     c7a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
     c7e:	dceb      	bgt.n	c58 <CONFIG_ISR_STACK_SIZE+0x458>
     c80:	460d      	mov	r5, r1
		if (sign != 0) {
     c82:	b136      	cbz	r6, c92 <CONFIG_ISR_STACK_SIZE+0x492>
			OUTC(sign);
     c84:	4659      	mov	r1, fp
     c86:	4630      	mov	r0, r6
     c88:	9b02      	ldr	r3, [sp, #8]
     c8a:	4798      	blx	r3
     c8c:	2800      	cmp	r0, #0
     c8e:	dbeb      	blt.n	c68 <CONFIG_ISR_STACK_SIZE+0x468>
     c90:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     c92:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     c96:	06d9      	lsls	r1, r3, #27
     c98:	d401      	bmi.n	c9e <CONFIG_ISR_STACK_SIZE+0x49e>
     c9a:	071a      	lsls	r2, r3, #28
     c9c:	d506      	bpl.n	cac <CONFIG_ISR_STACK_SIZE+0x4ac>
				OUTC('0');
     c9e:	4659      	mov	r1, fp
     ca0:	2030      	movs	r0, #48	; 0x30
     ca2:	9b02      	ldr	r3, [sp, #8]
     ca4:	4798      	blx	r3
     ca6:	2800      	cmp	r0, #0
     ca8:	dbde      	blt.n	c68 <CONFIG_ISR_STACK_SIZE+0x468>
     caa:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     cac:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     cb0:	06db      	lsls	r3, r3, #27
     cb2:	d507      	bpl.n	cc4 <CONFIG_ISR_STACK_SIZE+0x4c4>
				OUTC(conv->specifier);
     cb4:	4659      	mov	r1, fp
     cb6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     cba:	9b02      	ldr	r3, [sp, #8]
     cbc:	4798      	blx	r3
     cbe:	2800      	cmp	r0, #0
     cc0:	dbd2      	blt.n	c68 <CONFIG_ISR_STACK_SIZE+0x468>
     cc2:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     cc4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     cc6:	442e      	add	r6, r5
     cc8:	1b73      	subs	r3, r6, r5
     cca:	2b00      	cmp	r3, #0
     ccc:	dc16      	bgt.n	cfc <CONFIG_ISR_STACK_SIZE+0x4fc>
			OUTS(bps, bpe);
     cce:	4643      	mov	r3, r8
     cd0:	4652      	mov	r2, sl
     cd2:	4659      	mov	r1, fp
     cd4:	9802      	ldr	r0, [sp, #8]
     cd6:	f007 fa92 	bl	81fe <outs>
     cda:	2800      	cmp	r0, #0
     cdc:	dbc4      	blt.n	c68 <CONFIG_ISR_STACK_SIZE+0x468>
     cde:	4405      	add	r5, r0
		while (width > 0) {
     ce0:	44a9      	add	r9, r5
     ce2:	eba9 0305 	sub.w	r3, r9, r5
     ce6:	2b00      	cmp	r3, #0
     ce8:	f77f ae7c 	ble.w	9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>
			OUTC(' ');
     cec:	4659      	mov	r1, fp
     cee:	2020      	movs	r0, #32
     cf0:	9b02      	ldr	r3, [sp, #8]
     cf2:	4798      	blx	r3
     cf4:	2800      	cmp	r0, #0
     cf6:	dbb7      	blt.n	c68 <CONFIG_ISR_STACK_SIZE+0x468>
     cf8:	3501      	adds	r5, #1
			--width;
     cfa:	e7f2      	b.n	ce2 <CONFIG_ISR_STACK_SIZE+0x4e2>
				OUTC('0');
     cfc:	4659      	mov	r1, fp
     cfe:	2030      	movs	r0, #48	; 0x30
     d00:	9b02      	ldr	r3, [sp, #8]
     d02:	4798      	blx	r3
     d04:	2800      	cmp	r0, #0
     d06:	dbaf      	blt.n	c68 <CONFIG_ISR_STACK_SIZE+0x468>
     d08:	3501      	adds	r5, #1
     d0a:	e7dd      	b.n	cc8 <CONFIG_ISR_STACK_SIZE+0x4c8>
     d0c:	00008d1d 	.word	0x00008d1d

00000d10 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     d10:	4604      	mov	r4, r0
     d12:	b508      	push	{r3, lr}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     d14:	f04f 0220 	mov.w	r2, #32
     d18:	f3ef 8311 	mrs	r3, BASEPRI
     d1c:	f382 8812 	msr	BASEPRI_MAX, r2
     d20:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();
     d24:	f002 f816 	bl	2d54 <sys_clock_disable>

	sys_arch_reboot(type);
     d28:	4620      	mov	r0, r4
     d2a:	f001 f8c3 	bl	1eb4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     d2e:	4803      	ldr	r0, [pc, #12]	; (d3c <sys_reboot+0x2c>)
     d30:	f007 f9f0 	bl	8114 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     d34:	f000 fc90 	bl	1658 <arch_cpu_idle>
     d38:	e7fc      	b.n	d34 <sys_reboot+0x24>
     d3a:	bf00      	nop
     d3c:	00008d1e 	.word	0x00008d1e

00000d40 <nordicsemi_nrf91_init>:
     d40:	f04f 0220 	mov.w	r2, #32
     d44:	f3ef 8311 	mrs	r3, BASEPRI
     d48:	f382 8812 	msr	BASEPRI_MAX, r2
     d4c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     d50:	2101      	movs	r1, #1
     d52:	4a04      	ldr	r2, [pc, #16]	; (d64 <nordicsemi_nrf91_init+0x24>)
     d54:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     d58:	f383 8811 	msr	BASEPRI, r3
     d5c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     d60:	2000      	movs	r0, #0
     d62:	4770      	bx	lr
     d64:	50039000 	.word	0x50039000

00000d68 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     d68:	b120      	cbz	r0, d74 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     d6a:	4b03      	ldr	r3, [pc, #12]	; (d78 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
     d6c:	0180      	lsls	r0, r0, #6
     d6e:	f043 0301 	orr.w	r3, r3, #1
     d72:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     d74:	4770      	bx	lr
     d76:	bf00      	nop
     d78:	00008970 	.word	0x00008970

00000d7c <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
     d7c:	b084      	sub	sp, #16
     d7e:	ab04      	add	r3, sp, #16
     d80:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
     d84:	f89d 3004 	ldrb.w	r3, [sp, #4]
     d88:	2b06      	cmp	r3, #6
     d8a:	d107      	bne.n	d9c <pm_power_state_set+0x20>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
     d8c:	2201      	movs	r2, #1
     d8e:	4b04      	ldr	r3, [pc, #16]	; (da0 <pm_power_state_set+0x24>)
     d90:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     d94:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
     d98:	bf20      	wfe
    while (true)
     d9a:	e7fd      	b.n	d98 <pm_power_state_set+0x1c>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
     d9c:	b004      	add	sp, #16
     d9e:	4770      	bx	lr
     da0:	50004000 	.word	0x50004000

00000da4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     da8:	4605      	mov	r5, r0
	__asm__ volatile(
     daa:	f04f 0320 	mov.w	r3, #32
     dae:	f3ef 8611 	mrs	r6, BASEPRI
     db2:	f383 8812 	msr	BASEPRI_MAX, r3
     db6:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     dba:	481e      	ldr	r0, [pc, #120]	; (e34 <pm_state_notify+0x90>)
     dbc:	f003 f92c 	bl	4018 <z_spin_lock_valid>
     dc0:	b940      	cbnz	r0, dd4 <pm_state_notify+0x30>
     dc2:	491d      	ldr	r1, [pc, #116]	; (e38 <pm_state_notify+0x94>)
     dc4:	481d      	ldr	r0, [pc, #116]	; (e3c <pm_state_notify+0x98>)
     dc6:	2281      	movs	r2, #129	; 0x81
     dc8:	f007 f9a4 	bl	8114 <printk>
     dcc:	2181      	movs	r1, #129	; 0x81
     dce:	481a      	ldr	r0, [pc, #104]	; (e38 <pm_state_notify+0x94>)
     dd0:	f007 fa2b 	bl	822a <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
     dd4:	4817      	ldr	r0, [pc, #92]	; (e34 <pm_state_notify+0x90>)
     dd6:	f003 f93b 	bl	4050 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     dda:	4b19      	ldr	r3, [pc, #100]	; (e40 <pm_state_notify+0x9c>)
     ddc:	681c      	ldr	r4, [r3, #0]
     dde:	2c00      	cmp	r4, #0
     de0:	bf38      	it	cc
     de2:	2400      	movcc	r4, #0
     de4:	b19c      	cbz	r4, e0e <pm_state_notify+0x6a>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
     de6:	f04f 090c 	mov.w	r9, #12
     dea:	4f16      	ldr	r7, [pc, #88]	; (e44 <pm_state_notify+0xa0>)
     dec:	f8df 8058 	ldr.w	r8, [pc, #88]	; e48 <pm_state_notify+0xa4>
			callback = notifier->state_exit;
     df0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
     df4:	2d00      	cmp	r5, #0
     df6:	bf08      	it	eq
     df8:	4613      	moveq	r3, r2
		if (callback) {
     dfa:	b12b      	cbz	r3, e08 <pm_state_notify+0x64>
			callback(z_power_states[_current_cpu->id].state);
     dfc:	f898 2014 	ldrb.w	r2, [r8, #20]
     e00:	fb09 f202 	mul.w	r2, r9, r2
     e04:	5cb8      	ldrb	r0, [r7, r2]
     e06:	4798      	blx	r3
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     e08:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     e0a:	2c00      	cmp	r4, #0
     e0c:	d1f0      	bne.n	df0 <pm_state_notify+0x4c>
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     e0e:	4809      	ldr	r0, [pc, #36]	; (e34 <pm_state_notify+0x90>)
     e10:	f003 f910 	bl	4034 <z_spin_unlock_valid>
     e14:	b940      	cbnz	r0, e28 <pm_state_notify+0x84>
     e16:	4908      	ldr	r1, [pc, #32]	; (e38 <pm_state_notify+0x94>)
     e18:	4808      	ldr	r0, [pc, #32]	; (e3c <pm_state_notify+0x98>)
     e1a:	22ac      	movs	r2, #172	; 0xac
     e1c:	f007 f97a 	bl	8114 <printk>
     e20:	21ac      	movs	r1, #172	; 0xac
     e22:	4805      	ldr	r0, [pc, #20]	; (e38 <pm_state_notify+0x94>)
     e24:	f007 fa01 	bl	822a <assert_post_action>
	__asm__ volatile(
     e28:	f386 8811 	msr	BASEPRI, r6
     e2c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     e34:	20000260 	.word	0x20000260
     e38:	00008d4b 	.word	0x00008d4b
     e3c:	00008d71 	.word	0x00008d71
     e40:	20000264 	.word	0x20000264
     e44:	20000270 	.word	0x20000270
     e48:	200009f4 	.word	0x200009f4

00000e4c <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     e4c:	2201      	movs	r2, #1
     e4e:	f000 031f 	and.w	r3, r0, #31
     e52:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
     e54:	4b08      	ldr	r3, [pc, #32]	; (e78 <atomic_test_and_set_bit.constprop.0+0x2c>)
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
     e56:	0940      	lsrs	r0, r0, #5
     e58:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     e5c:	e8d0 3fef 	ldaex	r3, [r0]
     e60:	ea43 0102 	orr.w	r1, r3, r2
     e64:	e8c0 1fec 	stlex	ip, r1, [r0]
     e68:	f1bc 0f00 	cmp.w	ip, #0
     e6c:	d1f6      	bne.n	e5c <atomic_test_and_set_bit.constprop.0+0x10>

	return (old & mask) != 0;
     e6e:	421a      	tst	r2, r3
}
     e70:	bf14      	ite	ne
     e72:	2001      	movne	r0, #1
     e74:	2000      	moveq	r0, #0
     e76:	4770      	bx	lr
     e78:	2000027c 	.word	0x2000027c

00000e7c <pm_system_resume>:
	atomic_val_t mask = ATOMIC_MASK(bit);
     e7c:	2201      	movs	r2, #1

void pm_system_resume(void)
{
     e7e:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
     e80:	4b1a      	ldr	r3, [pc, #104]	; (eec <pm_system_resume+0x70>)
{
     e82:	b085      	sub	sp, #20
	uint8_t id = _current_cpu->id;
     e84:	7d1d      	ldrb	r5, [r3, #20]
     e86:	f005 031f 	and.w	r3, r5, #31
     e8a:	409a      	lsls	r2, r3
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     e8c:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     e8e:	4b18      	ldr	r3, [pc, #96]	; (ef0 <pm_system_resume+0x74>)
     e90:	0969      	lsrs	r1, r5, #5
     e92:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     e96:	e8d3 1fef 	ldaex	r1, [r3]
     e9a:	ea01 0400 	and.w	r4, r1, r0
     e9e:	e8c3 4fec 	stlex	ip, r4, [r3]
     ea2:	f1bc 0f00 	cmp.w	ip, #0
     ea6:	d1f6      	bne.n	e96 <pm_system_resume+0x1a>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     ea8:	4211      	tst	r1, r2
     eaa:	d017      	beq.n	edc <pm_system_resume+0x60>
		exit_pos_ops(z_power_states[id]);
     eac:	220c      	movs	r2, #12
     eae:	4c11      	ldr	r4, [pc, #68]	; (ef4 <pm_system_resume+0x78>)
     eb0:	ab01      	add	r3, sp, #4
     eb2:	fb02 4205 	mla	r2, r2, r5, r4
     eb6:	ca07      	ldmia	r2, {r0, r1, r2}
     eb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
     ebc:	4a0e      	ldr	r2, [pc, #56]	; (ef8 <pm_system_resume+0x7c>)
     ebe:	b17a      	cbz	r2, ee0 <pm_system_resume+0x64>
		pm_power_state_exit_post_ops(info);
     ec0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     ec4:	f007 f9b9 	bl	823a <pm_power_state_exit_post_ops>
		pm_state_notify(false);
     ec8:	2000      	movs	r0, #0
     eca:	f7ff ff6b 	bl	da4 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     ece:	230c      	movs	r3, #12
     ed0:	2200      	movs	r2, #0
     ed2:	436b      	muls	r3, r5
     ed4:	18e1      	adds	r1, r4, r3
     ed6:	50e2      	str	r2, [r4, r3]
     ed8:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
     edc:	b005      	add	sp, #20
     ede:	bd30      	pop	{r4, r5, pc}
     ee0:	f382 8811 	msr	BASEPRI, r2
     ee4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     ee8:	e7ee      	b.n	ec8 <pm_system_resume+0x4c>
     eea:	bf00      	nop
     eec:	200009f4 	.word	0x200009f4
     ef0:	2000026c 	.word	0x2000026c
     ef4:	20000270 	.word	0x20000270
     ef8:	0000823b 	.word	0x0000823b

00000efc <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
     efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
     f00:	4b33      	ldr	r3, [pc, #204]	; (fd0 <pm_system_suspend+0xd4>)
{
     f02:	4607      	mov	r7, r0
	uint8_t id = _current_cpu->id;
     f04:	7d1c      	ldrb	r4, [r3, #20]
{
     f06:	b088      	sub	sp, #32

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
     f08:	4620      	mov	r0, r4
     f0a:	f7ff ff9f 	bl	e4c <atomic_test_and_set_bit.constprop.0>
     f0e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; fe8 <pm_system_suspend+0xec>
     f12:	b960      	cbnz	r0, f2e <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
     f14:	250c      	movs	r5, #12
     f16:	466e      	mov	r6, sp
     f18:	fb05 8504 	mla	r5, r5, r4, r8
     f1c:	463a      	mov	r2, r7
     f1e:	4621      	mov	r1, r4
     f20:	4630      	mov	r0, r6
     f22:	f007 f9a2 	bl	826a <pm_policy_next_state>
     f26:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
     f2a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
     f2e:	230c      	movs	r3, #12
     f30:	4363      	muls	r3, r4
     f32:	f818 0003 	ldrb.w	r0, [r8, r3]
     f36:	eb08 0203 	add.w	r2, r8, r3
     f3a:	0965      	lsrs	r5, r4, #5
     f3c:	f004 061f 	and.w	r6, r4, #31
     f40:	b3a8      	cbz	r0, fae <pm_system_suspend+0xb2>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
     f42:	1c7b      	adds	r3, r7, #1
     f44:	d00f      	beq.n	f66 <pm_system_suspend+0x6a>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     f46:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
     f4a:	2100      	movs	r1, #0
     f4c:	f8d2 e008 	ldr.w	lr, [r2, #8]
     f50:	4820      	ldr	r0, [pc, #128]	; (fd4 <pm_system_suspend+0xd8>)
     f52:	2300      	movs	r3, #0
     f54:	fbec 010e 	umlal	r0, r1, ip, lr
     f58:	4a1f      	ldr	r2, [pc, #124]	; (fd8 <pm_system_suspend+0xdc>)
     f5a:	f7ff f96f 	bl	23c <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
     f5e:	2101      	movs	r1, #1
     f60:	1a38      	subs	r0, r7, r0
     f62:	f004 fa0d 	bl	5380 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     f66:	f003 fb57 	bl	4618 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
     f6a:	2001      	movs	r0, #1
     f6c:	f7ff ff1a 	bl	da4 <pm_state_notify>
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     f70:	2201      	movs	r2, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
     f72:	4b1a      	ldr	r3, [pc, #104]	; (fdc <pm_system_suspend+0xe0>)
     f74:	40b2      	lsls	r2, r6
     f76:	eb03 0385 	add.w	r3, r3, r5, lsl #2
     f7a:	e8d3 1fef 	ldaex	r1, [r3]
     f7e:	4311      	orrs	r1, r2
     f80:	e8c3 1fe0 	stlex	r0, r1, [r3]
     f84:	2800      	cmp	r0, #0
     f86:	d1f8      	bne.n	f7a <pm_system_suspend+0x7e>
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
     f88:	230c      	movs	r3, #12
     f8a:	fb03 8404 	mla	r4, r3, r4, r8
     f8e:	ab05      	add	r3, sp, #20
     f90:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
     f94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
     f98:	4a11      	ldr	r2, [pc, #68]	; (fe0 <pm_system_suspend+0xe4>)
     f9a:	b11a      	cbz	r2, fa4 <pm_system_suspend+0xa8>
		pm_power_state_set(info);
     f9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     fa0:	f7ff feec 	bl	d7c <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
     fa4:	f7ff ff6a 	bl	e7c <pm_system_resume>
	k_sched_unlock();
     fa8:	f003 ff14 	bl	4dd4 <k_sched_unlock>
	bool ret = true;
     fac:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
     fae:	2301      	movs	r3, #1
     fb0:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     fb2:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     fb4:	4a0b      	ldr	r2, [pc, #44]	; (fe4 <pm_system_suspend+0xe8>)
     fb6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
     fba:	e8d5 2fef 	ldaex	r2, [r5]
     fbe:	401a      	ands	r2, r3
     fc0:	e8c5 2fe1 	stlex	r1, r2, [r5]
     fc4:	2900      	cmp	r1, #0
     fc6:	d1f8      	bne.n	fba <pm_system_suspend+0xbe>
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
     fc8:	b008      	add	sp, #32
     fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     fce:	bf00      	nop
     fd0:	200009f4 	.word	0x200009f4
     fd4:	000f423f 	.word	0x000f423f
     fd8:	000f4240 	.word	0x000f4240
     fdc:	2000026c 	.word	0x2000026c
     fe0:	00000d7d 	.word	0x00000d7d
     fe4:	2000027c 	.word	0x2000027c
     fe8:	20000270 	.word	0x20000270

00000fec <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     fec:	2800      	cmp	r0, #0
     fee:	db0d      	blt.n	100c <CONFIG_MAIN_STACK_SIZE+0xc>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ff0:	2201      	movs	r2, #1
     ff2:	0943      	lsrs	r3, r0, #5
     ff4:	f000 001f 	and.w	r0, r0, #31
     ff8:	fa02 f000 	lsl.w	r0, r2, r0
     ffc:	4a04      	ldr	r2, [pc, #16]	; (1010 <CONFIG_MAIN_STACK_SIZE+0x10>)
     ffe:	3320      	adds	r3, #32
    1000:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1004:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1008:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    100c:	4770      	bx	lr
    100e:	bf00      	nop
    1010:	e000e100 	.word	0xe000e100

00001014 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
    1014:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    1016:	2800      	cmp	r0, #0
{
    1018:	461c      	mov	r4, r3
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
    101a:	bf14      	ite	ne
    101c:	f44f 5300 	movne.w	r3, #8192	; 0x2000
    1020:	f44f 4300 	moveq.w	r3, #32768	; 0x8000

	__ASSERT_NO_MSG(end >= start);
    1024:	428a      	cmp	r2, r1
    1026:	d20b      	bcs.n	1040 <config_regions+0x2c>
    1028:	2294      	movs	r2, #148	; 0x94
    102a:	4927      	ldr	r1, [pc, #156]	; (10c8 <config_regions+0xb4>)
    102c:	4827      	ldr	r0, [pc, #156]	; (10cc <config_regions+0xb8>)
    102e:	f007 f871 	bl	8114 <printk>
    1032:	2194      	movs	r1, #148	; 0x94
    1034:	4824      	ldr	r0, [pc, #144]	; (10c8 <config_regions+0xb4>)
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
	PRINT("\n");
}
    1036:	b003      	add	sp, #12
    1038:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(end >= start);
    103c:	f007 b8f5 	b.w	822a <assert_post_action>
	if (end <= start) {
    1040:	d040      	beq.n	10c4 <config_regions+0xb0>
    1042:	460d      	mov	r5, r1
    1044:	4e22      	ldr	r6, [pc, #136]	; (10d0 <config_regions+0xbc>)
		if (ram) {
    1046:	2800      	cmp	r0, #0
    1048:	d039      	beq.n	10be <config_regions+0xaa>
			NRF_SPU->RAMREGION[i].PERM = perm;
    104a:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
	for (size_t i = start; i < end; i++) {
    104e:	3501      	adds	r5, #1
    1050:	42aa      	cmp	r2, r5
			NRF_SPU->FLASHREGION[i].PERM = perm;
    1052:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
    1056:	d8f6      	bhi.n	1046 <config_regions+0x32>
	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
    1058:	fb02 f003 	mul.w	r0, r2, r3
    105c:	3a01      	subs	r2, #1
    105e:	434b      	muls	r3, r1
    1060:	9000      	str	r0, [sp, #0]
    1062:	481c      	ldr	r0, [pc, #112]	; (10d4 <config_regions+0xc0>)
    1064:	f007 f856 	bl	8114 <printk>
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
    1068:	4b1b      	ldr	r3, [pc, #108]	; (10d8 <config_regions+0xc4>)
    106a:	f014 0f10 	tst.w	r4, #16
    106e:	491b      	ldr	r1, [pc, #108]	; (10dc <config_regions+0xc8>)
    1070:	481b      	ldr	r0, [pc, #108]	; (10e0 <config_regions+0xcc>)
    1072:	bf08      	it	eq
    1074:	4619      	moveq	r1, r3
    1076:	f007 f84d 	bl	8114 <printk>
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
    107a:	f014 0f04 	tst.w	r4, #4
    107e:	bf14      	ite	ne
    1080:	2172      	movne	r1, #114	; 0x72
    1082:	212d      	moveq	r1, #45	; 0x2d
    1084:	4817      	ldr	r0, [pc, #92]	; (10e4 <config_regions+0xd0>)
    1086:	f007 f845 	bl	8114 <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
    108a:	f014 0f02 	tst.w	r4, #2
    108e:	bf14      	ite	ne
    1090:	2177      	movne	r1, #119	; 0x77
    1092:	212d      	moveq	r1, #45	; 0x2d
    1094:	4813      	ldr	r0, [pc, #76]	; (10e4 <config_regions+0xd0>)
    1096:	f007 f83d 	bl	8114 <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
    109a:	f014 0f01 	tst.w	r4, #1
    109e:	bf0c      	ite	eq
    10a0:	212d      	moveq	r1, #45	; 0x2d
    10a2:	2178      	movne	r1, #120	; 0x78
    10a4:	480f      	ldr	r0, [pc, #60]	; (10e4 <config_regions+0xd0>)
    10a6:	f007 f835 	bl	8114 <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
    10aa:	216c      	movs	r1, #108	; 0x6c
    10ac:	480d      	ldr	r0, [pc, #52]	; (10e4 <config_regions+0xd0>)
    10ae:	f007 f831 	bl	8114 <printk>
	PRINT("\n");
    10b2:	480d      	ldr	r0, [pc, #52]	; (10e8 <config_regions+0xd4>)
}
    10b4:	b003      	add	sp, #12
    10b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
    10ba:	f007 b82b 	b.w	8114 <printk>
			NRF_SPU->FLASHREGION[i].PERM = perm;
    10be:	f505 77c0 	add.w	r7, r5, #384	; 0x180
    10c2:	e7c4      	b.n	104e <config_regions+0x3a>
}
    10c4:	b003      	add	sp, #12
    10c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10c8:	00008da1 	.word	0x00008da1
    10cc:	00008d71 	.word	0x00008d71
    10d0:	50003000 	.word	0x50003000
    10d4:	00008dc2 	.word	0x00008dc2
    10d8:	00008d95 	.word	0x00008d95
    10dc:	00008d8c 	.word	0x00008d8c
    10e0:	00008f73 	.word	0x00008f73
    10e4:	00008ddc 	.word	0x00008ddc
    10e8:	00009a67 	.word	0x00009a67

000010ec <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
    10ec:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    10ee:	f44f 3480 	mov.w	r4, #65536	; 0x10000
{
    10f2:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    10f4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    10f8:	4825      	ldr	r0, [pc, #148]	; (1190 <spm_jump+0xa4>)
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    10fa:	4d26      	ldr	r5, [pc, #152]	; (1194 <spm_jump+0xa8>)
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
    10fc:	f007 f80a 	bl	8114 <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
    1100:	6821      	ldr	r1, [r4, #0]
    1102:	4825      	ldr	r0, [pc, #148]	; (1198 <spm_jump+0xac>)
    1104:	f007 f806 	bl	8114 <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
    1108:	6829      	ldr	r1, [r5, #0]
    110a:	4824      	ldr	r0, [pc, #144]	; (119c <spm_jump+0xb0>)
    110c:	f007 f802 	bl	8114 <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    1110:	2210      	movs	r2, #16
    1112:	2100      	movs	r1, #0
    1114:	4668      	mov	r0, sp
    1116:	f007 f943 	bl	83a0 <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
    111a:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
    111c:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
    111e:	9300      	str	r3, [sp, #0]
    1120:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
    1122:	f000 ff21 	bl	1f68 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
    1126:	2001      	movs	r0, #1
    1128:	f000 ff50 	bl	1fcc <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
    112c:	2000      	movs	r0, #0
    112e:	f000 ff39 	bl	1fa4 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
    1132:	2000      	movs	r0, #0
    1134:	f000 ff5e 	bl	1ff4 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
    1138:	2101      	movs	r1, #1
    113a:	2000      	movs	r0, #0
    113c:	f000 ff78 	bl	2030 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
    1140:	f000 ff6c 	bl	201c <tz_nonsecure_fpu_access_enable>
	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    1144:	4816      	ldr	r0, [pc, #88]	; (11a0 <spm_jump+0xb4>)
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    1146:	682c      	ldr	r4, [r5, #0]
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
    1148:	f006 ffe4 	bl	8114 <printk>
	NVIC_DisableIRQ(id);
    114c:	2008      	movs	r0, #8
    114e:	f7ff ff4d 	bl	fec <__NVIC_DisableIRQ>
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1152:	4a14      	ldr	r2, [pc, #80]	; (11a4 <spm_jump+0xb8>)
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
    1154:	f024 0401 	bic.w	r4, r4, #1
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    1158:	f8d2 3820 	ldr.w	r3, [r2, #2080]	; 0x820
	return present && (usel || split);
    115c:	2b00      	cmp	r3, #0
    115e:	da07      	bge.n	1170 <spm_jump+0x84>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    1160:	f003 0303 	and.w	r3, r3, #3
	return present && (usel || split);
    1164:	3b02      	subs	r3, #2
    1166:	2b01      	cmp	r3, #1
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    1168:	bf9c      	itt	ls
    116a:	4b0f      	ldrls	r3, [pc, #60]	; (11a8 <spm_jump+0xbc>)
    116c:	f8c2 3820 	strls.w	r3, [r2, #2080]	; 0x820
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    1170:	2101      	movs	r1, #1
    1172:	2008      	movs	r0, #8
    1174:	f007 f88a 	bl	828c <irq_target_state_set>
  __ASM volatile ("dsb 0xF":::"memory");
    1178:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    117c:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
    1180:	0864      	lsrs	r4, r4, #1
    1182:	0064      	lsls	r4, r4, #1
    1184:	4620      	mov	r0, r4
    1186:	4621      	mov	r1, r4
    1188:	4622      	mov	r2, r4
    118a:	4623      	mov	r3, r4
    118c:	f7ff f9d4 	bl	538 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
    1190:	00008ddf 	.word	0x00008ddf
    1194:	00010004 	.word	0x00010004
    1198:	00008df6 	.word	0x00008df6
    119c:	00008e0b 	.word	0x00008e0b
    11a0:	00008e29 	.word	0x00008e29
    11a4:	50003000 	.word	0x50003000
    11a8:	80000100 	.word	0x80000100

000011ac <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
    11ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
    11b0:	4860      	ldr	r0, [pc, #384]	; (1334 <spm_config+0x188>)
    11b2:	f006 ffaf 	bl	8114 <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
    11b6:	2100      	movs	r1, #0
    11b8:	f240 1317 	movw	r3, #279	; 0x117
    11bc:	4608      	mov	r0, r1
    11be:	2202      	movs	r2, #2
    11c0:	f7ff ff28 	bl	1014 <config_regions>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    11c4:	4d5c      	ldr	r5, [pc, #368]	; (1338 <spm_config+0x18c>)
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
    11c6:	f240 1307 	movw	r3, #263	; 0x107
    11ca:	2220      	movs	r2, #32
    11cc:	2102      	movs	r1, #2
    11ce:	2000      	movs	r0, #0
    11d0:	f7ff ff20 	bl	1014 <config_regions>
	PRINT("\n");
    11d4:	4859      	ldr	r0, [pc, #356]	; (133c <spm_config+0x190>)
    11d6:	f006 ff9d 	bl	8114 <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    11da:	f3c5 040e 	ubfx	r4, r5, #0, #15
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    11de:	4b58      	ldr	r3, [pc, #352]	; (1340 <spm_config+0x194>)
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
    11e0:	f5c4 4400 	rsb	r4, r4, #32768	; 0x8000
	__ASSERT((uint32_t)__sg_size <= nsc_size,
    11e4:	429c      	cmp	r4, r3
    11e6:	d208      	bcs.n	11fa <spm_config+0x4e>
    11e8:	4956      	ldr	r1, [pc, #344]	; (1344 <spm_config+0x198>)
    11ea:	4857      	ldr	r0, [pc, #348]	; (1348 <spm_config+0x19c>)
    11ec:	2282      	movs	r2, #130	; 0x82
    11ee:	f006 ff91 	bl	8114 <printk>
    11f2:	2182      	movs	r1, #130	; 0x82
    11f4:	4853      	ldr	r0, [pc, #332]	; (1344 <spm_config+0x198>)
    11f6:	f007 f818 	bl	822a <assert_post_action>
	nrf_spu_flashnsc_set(NRF_SPU, 0, FLASH_NSC_SIZE_REG(nsc_size),
    11fa:	fab4 f484 	clz	r4, r4
                                            uint8_t            flash_nsc_id,
                                            nrf_spu_nsc_size_t flash_nsc_size,
                                            uint8_t            region_number,
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    11fe:	4e53      	ldr	r6, [pc, #332]	; (134c <spm_config+0x1a0>)
    1200:	f1c4 041b 	rsb	r4, r4, #27
    1204:	f8d6 2500 	ldr.w	r2, [r6, #1280]	; 0x500
    1208:	b2e4      	uxtb	r4, r4
    120a:	05d2      	lsls	r2, r2, #23
    120c:	f3c5 35c4 	ubfx	r5, r5, #15, #5
    1210:	d50a      	bpl.n	1228 <spm_config+0x7c>
    1212:	494f      	ldr	r1, [pc, #316]	; (1350 <spm_config+0x1a4>)
    1214:	484c      	ldr	r0, [pc, #304]	; (1348 <spm_config+0x19c>)
    1216:	f44f 72bd 	mov.w	r2, #378	; 0x17a
    121a:	f006 ff7b 	bl	8114 <printk>
    121e:	f44f 71bd 	mov.w	r1, #378	; 0x17a
    1222:	484b      	ldr	r0, [pc, #300]	; (1350 <spm_config+0x1a4>)
    1224:	f007 f801 	bl	822a <assert_post_action>
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));
    1228:	f8d6 3504 	ldr.w	r3, [r6, #1284]	; 0x504
    122c:	05db      	lsls	r3, r3, #23
    122e:	d50a      	bpl.n	1246 <spm_config+0x9a>
    1230:	4947      	ldr	r1, [pc, #284]	; (1350 <spm_config+0x1a4>)
    1232:	4845      	ldr	r0, [pc, #276]	; (1348 <spm_config+0x19c>)
    1234:	f240 127b 	movw	r2, #379	; 0x17b
    1238:	f006 ff6c 	bl	8114 <printk>
    123c:	f240 117b 	movw	r1, #379	; 0x17b
    1240:	4843      	ldr	r0, [pc, #268]	; (1350 <spm_config+0x1a4>)
    1242:	f006 fff2 	bl	822a <assert_post_action>

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
    1246:	4b41      	ldr	r3, [pc, #260]	; (134c <spm_config+0x1a0>)
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
    1248:	4842      	ldr	r0, [pc, #264]	; (1354 <spm_config+0x1a8>)
    124a:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
    124e:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    1252:	f8d3 1500 	ldr.w	r1, [r3, #1280]	; 0x500
    1256:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
    125a:	0152      	lsls	r2, r2, #5
    125c:	f006 ff5a 	bl	8114 <printk>
	PRINT("\n");
    1260:	4836      	ldr	r0, [pc, #216]	; (133c <spm_config+0x190>)
    1262:	f006 ff57 	bl	8114 <printk>
	int err = spm_secure_services_init();
    1266:	f000 f88b 	bl	1380 <spm_secure_services_init>
	if (err != 0) {
    126a:	4601      	mov	r1, r0
    126c:	b110      	cbz	r0, 1274 <spm_config+0xc8>
		PRINT("Could not initialize secure services (err %d).\n", err);
    126e:	483a      	ldr	r0, [pc, #232]	; (1358 <spm_config+0x1ac>)
    1270:	f006 ff50 	bl	8114 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    1274:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
    1276:	4839      	ldr	r0, [pc, #228]	; (135c <spm_config+0x1b0>)
    1278:	f006 ff4c 	bl	8114 <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
    127c:	f240 1317 	movw	r3, #279	; 0x117
    1280:	2204      	movs	r2, #4
    1282:	2100      	movs	r1, #0
    1284:	2001      	movs	r0, #1
    1286:	f7ff fec5 	bl	1014 <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
    128a:	4d30      	ldr	r5, [pc, #192]	; (134c <spm_config+0x1a0>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
    128c:	f240 1307 	movw	r3, #263	; 0x107
    1290:	2220      	movs	r2, #32
    1292:	2104      	movs	r1, #4
    1294:	2001      	movs	r0, #1
    1296:	f7ff febd 	bl	1014 <config_regions>
	PRINT("\n");
    129a:	4828      	ldr	r0, [pc, #160]	; (133c <spm_config+0x190>)
    129c:	f006 ff3a 	bl	8114 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
    12a0:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
    12a4:	482e      	ldr	r0, [pc, #184]	; (1360 <spm_config+0x1b4>)
    12a6:	f006 ff35 	bl	8114 <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
    12aa:	4e2e      	ldr	r6, [pc, #184]	; (1364 <spm_config+0x1b8>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
    12ac:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
    12b0:	4f2d      	ldr	r7, [pc, #180]	; (1368 <spm_config+0x1bc>)
    12b2:	4d2e      	ldr	r5, [pc, #184]	; (136c <spm_config+0x1c0>)
    12b4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 137c <spm_config+0x1d0>
    12b8:	f895 9005 	ldrb.w	r9, [r5, #5]
    12bc:	4621      	mov	r1, r4
    12be:	f1b9 0f00 	cmp.w	r9, #0
    12c2:	bf14      	ite	ne
    12c4:	4633      	movne	r3, r6
    12c6:	463b      	moveq	r3, r7
    12c8:	4640      	mov	r0, r8
    12ca:	682a      	ldr	r2, [r5, #0]
    12cc:	f006 ff22 	bl	8114 <printk>
		if (!periph[i].nonsecure) {
    12d0:	f1b9 0f00 	cmp.w	r9, #0
    12d4:	d10c      	bne.n	12f0 <spm_config+0x144>
			PRINT("\tSKIP\n");
    12d6:	4826      	ldr	r0, [pc, #152]	; (1370 <spm_config+0x1c4>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    12d8:	3401      	adds	r4, #1
			PRINT("\tOK\n");
    12da:	f006 ff1b 	bl	8114 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
    12de:	2c20      	cmp	r4, #32
    12e0:	f105 0508 	add.w	r5, r5, #8
    12e4:	d1e8      	bne.n	12b8 <spm_config+0x10c>
	PRINT("\n");
    12e6:	4815      	ldr	r0, [pc, #84]	; (133c <spm_config+0x190>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
    12e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
    12ec:	f006 bf12 	b.w	8114 <printk>
		err = spm_config_peripheral(periph[i].id, false);
    12f0:	f895 9004 	ldrb.w	r9, [r5, #4]
	NVIC_DisableIRQ(id);
    12f4:	f995 0004 	ldrsb.w	r0, [r5, #4]
    12f8:	f7ff fe78 	bl	fec <__NVIC_DisableIRQ>
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    12fc:	ea4f 0389 	mov.w	r3, r9, lsl #2
    1300:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    1304:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    1308:	f1b9 0f31 	cmp.w	r9, #49	; 0x31
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
    130c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
    1310:	d006      	beq.n	1320 <spm_config+0x174>
	return present && (usel || split);
    1312:	2a00      	cmp	r2, #0
    1314:	da07      	bge.n	1326 <spm_config+0x17a>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
    1316:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
    131a:	3a02      	subs	r2, #2
    131c:	2a01      	cmp	r2, #1
    131e:	d802      	bhi.n	1326 <spm_config+0x17a>
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
    1320:	4a14      	ldr	r2, [pc, #80]	; (1374 <spm_config+0x1c8>)
    1322:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
    1326:	2101      	movs	r1, #1
    1328:	4648      	mov	r0, r9
    132a:	f006 ffaf 	bl	828c <irq_target_state_set>
			PRINT("\tOK\n");
    132e:	4812      	ldr	r0, [pc, #72]	; (1378 <spm_config+0x1cc>)
    1330:	e7d2      	b.n	12d8 <spm_config+0x12c>
    1332:	bf00      	nop
    1334:	00008e5f 	.word	0x00008e5f
    1338:	0000ffe0 	.word	0x0000ffe0
    133c:	00009a67 	.word	0x00009a67
    1340:	00000020 	.word	0x00000020
    1344:	00008da1 	.word	0x00008da1
    1348:	00008d71 	.word	0x00008d71
    134c:	50003000 	.word	0x50003000
    1350:	00008e83 	.word	0x00008e83
    1354:	00008eb5 	.word	0x00008eb5
    1358:	00008efb 	.word	0x00008efb
    135c:	00008f2b 	.word	0x00008f2b
    1360:	00008f4d 	.word	0x00008f4d
    1364:	00008e54 	.word	0x00008e54
    1368:	00008d99 	.word	0x00008d99
    136c:	00008978 	.word	0x00008978
    1370:	00008f76 	.word	0x00008f76
    1374:	80000100 	.word	0x80000100
    1378:	00008f7d 	.word	0x00008f7d
    137c:	00008f69 	.word	0x00008f69

00001380 <spm_secure_services_init>:
int spm_secure_services_init(void)
{
	int err = 0;

#ifdef CONFIG_SPM_SERVICE_RNG
	err = nrf_cc3xx_platform_ctr_drbg_init(&ctr_drbg_ctx, NULL, 0);
    1380:	2200      	movs	r2, #0
    1382:	4802      	ldr	r0, [pc, #8]	; (138c <spm_secure_services_init+0xc>)
    1384:	4611      	mov	r1, r2
    1386:	f004 b945 	b.w	5614 <nrf_cc3xx_platform_ctr_drbg_init>
    138a:	bf00      	nop
    138c:	20000280 	.word	0x20000280

00001390 <__acle_se_spm_request_read_nse>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read_nse(void *destination, uint32_t addr, size_t len)
{
    1390:	b570      	push	{r4, r5, r6, lr}
    1392:	460c      	mov	r4, r1
    1394:	4615      	mov	r5, r2
#endif
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
    1396:	4606      	mov	r6, r0
    1398:	b950      	cbnz	r0, 13b0 <__acle_se_spm_request_read_nse+0x20>
		return -EINVAL;
    139a:	f06f 0015 	mvn.w	r0, #21
			return 0;
		}
	}

	return -EPERM;
}
    139e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    13a2:	4671      	mov	r1, lr
    13a4:	4672      	mov	r2, lr
    13a6:	4673      	mov	r3, lr
    13a8:	46f4      	mov	ip, lr
    13aa:	f38e 8c00 	msr	CPSR_fs, lr
    13ae:	4774      	bxns	lr
	if (destination == NULL || len <= 0) {
    13b0:	2a00      	cmp	r2, #0
    13b2:	d0f2      	beq.n	139a <__acle_se_spm_request_read_nse+0xa>
	return arm_cmse_addr_is_secure(ptr) == 1;
    13b4:	f006 ffad 	bl	8312 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)destination)) {
    13b8:	2801      	cmp	r0, #1
    13ba:	d0ee      	beq.n	139a <__acle_se_spm_request_read_nse+0xa>
		if (addr >= start && addr + len <= start + size) {
    13bc:	4b0b      	ldr	r3, [pc, #44]	; (13ec <__acle_se_spm_request_read_nse+0x5c>)
    13be:	429c      	cmp	r4, r3
    13c0:	d90a      	bls.n	13d8 <__acle_se_spm_request_read_nse+0x48>
    13c2:	192a      	adds	r2, r5, r4
    13c4:	332d      	adds	r3, #45	; 0x2d
    13c6:	429a      	cmp	r2, r3
    13c8:	d809      	bhi.n	13de <__acle_se_spm_request_read_nse+0x4e>
			memcpy(destination, (const void *)addr, len);
    13ca:	462a      	mov	r2, r5
    13cc:	4621      	mov	r1, r4
    13ce:	4630      	mov	r0, r6
    13d0:	f006 ffdb 	bl	838a <memcpy>
			return 0;
    13d4:	2000      	movs	r0, #0
    13d6:	e7e2      	b.n	139e <__acle_se_spm_request_read_nse+0xe>
		if (addr >= start && addr + len <= start + size) {
    13d8:	4b05      	ldr	r3, [pc, #20]	; (13f0 <__acle_se_spm_request_read_nse+0x60>)
    13da:	429c      	cmp	r4, r3
    13dc:	d903      	bls.n	13e6 <__acle_se_spm_request_read_nse+0x56>
    13de:	4b05      	ldr	r3, [pc, #20]	; (13f4 <__acle_se_spm_request_read_nse+0x64>)
    13e0:	192a      	adds	r2, r5, r4
    13e2:	429a      	cmp	r2, r3
    13e4:	d9f1      	bls.n	13ca <__acle_se_spm_request_read_nse+0x3a>
	return -EPERM;
    13e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    13ea:	e7d8      	b.n	139e <__acle_se_spm_request_read_nse+0xe>
    13ec:	00ff01ff 	.word	0x00ff01ff
    13f0:	00ff012f 	.word	0x00ff012f
    13f4:	00ff0138 	.word	0x00ff0138

000013f8 <__acle_se_spm_request_random_number_nse>:


#ifdef CONFIG_SPM_SERVICE_RNG
__TZ_NONSECURE_ENTRY_FUNC
int spm_request_random_number_nse(uint8_t *output, size_t len, size_t *olen)
{
    13f8:	b570      	push	{r4, r5, r6, lr}
    13fa:	4606      	mov	r6, r0
    13fc:	460d      	mov	r5, r1
    13fe:	4614      	mov	r4, r2
	return arm_cmse_addr_is_secure(ptr) == 1;
    1400:	f006 ff87 	bl	8312 <arm_cmse_addr_is_secure>
	int err = -EINVAL;

	if (ptr_in_secure_area((intptr_t)output) ||
    1404:	2801      	cmp	r0, #1
    1406:	d00d      	beq.n	1424 <__acle_se_spm_request_random_number_nse+0x2c>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1408:	4620      	mov	r0, r4
    140a:	f006 ff82 	bl	8312 <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)output) ||
    140e:	2801      	cmp	r0, #1
    1410:	d008      	beq.n	1424 <__acle_se_spm_request_random_number_nse+0x2c>
	    ptr_in_secure_area((intptr_t)olen)) {
		return -EINVAL;
	}

	err = nrf_cc3xx_platform_ctr_drbg_get(&ctr_drbg_ctx, output, len, olen);
    1412:	4623      	mov	r3, r4
    1414:	462a      	mov	r2, r5
    1416:	4631      	mov	r1, r6
    1418:	4808      	ldr	r0, [pc, #32]	; (143c <__acle_se_spm_request_random_number_nse+0x44>)
    141a:	f004 f92f 	bl	567c <nrf_cc3xx_platform_ctr_drbg_get>
	if (*olen != len) {
    141e:	6823      	ldr	r3, [r4, #0]
    1420:	42ab      	cmp	r3, r5
    1422:	d001      	beq.n	1428 <__acle_se_spm_request_random_number_nse+0x30>
		return -EINVAL;
    1424:	f06f 0015 	mvn.w	r0, #21
	}

	return err;
}
    1428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    142c:	4671      	mov	r1, lr
    142e:	4672      	mov	r2, lr
    1430:	4673      	mov	r3, lr
    1432:	46f4      	mov	ip, lr
    1434:	f38e 8c00 	msr	CPSR_fs, lr
    1438:	4774      	bxns	lr
    143a:	bf00      	nop
    143c:	20000280 	.word	0x20000280

00001440 <__acle_se_spm_firmware_info_nse>:
#endif /* CONFIG_SPM_SERVICE_S0_ACTIVE */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info_nse(uint32_t fw_address, struct fw_info *info)
{
    1440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1444:	4681      	mov	r9, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
    1446:	460d      	mov	r5, r1
{
    1448:	b085      	sub	sp, #20
	if (info == NULL) {
    144a:	b381      	cbz	r1, 14ae <__acle_se_spm_firmware_info_nse+0x6e>
	return arm_cmse_addr_is_secure(ptr) == 1;
    144c:	f006 ff61 	bl	8312 <arm_cmse_addr_is_secure>
		return -EINVAL;
	}

	/* Ensure that fw_address is within secure area */
	if (!ptr_in_secure_area(fw_address)) {
    1450:	2801      	cmp	r0, #1
    1452:	d12c      	bne.n	14ae <__acle_se_spm_firmware_info_nse+0x6e>
	return arm_cmse_addr_is_secure(ptr) == 1;
    1454:	4628      	mov	r0, r5
    1456:	f006 ff5c 	bl	8312 <arm_cmse_addr_is_secure>
		return -EINVAL;
	}

	/* Ensure that *info is in non-secure RAM */
	if (ptr_in_secure_area((intptr_t)info)) {
    145a:	2801      	cmp	r0, #1
    145c:	d027      	beq.n	14ae <__acle_se_spm_firmware_info_nse+0x6e>
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    145e:	f04f 0800 	mov.w	r8, #0
    1462:	f8df b05c 	ldr.w	fp, [pc, #92]	; 14c0 <__acle_se_spm_firmware_info_nse+0x80>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1466:	f8df a05c 	ldr.w	sl, [pc, #92]	; 14c4 <__acle_se_spm_firmware_info_nse+0x84>
    146a:	af01      	add	r7, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
    146c:	f85b 6b04 	ldr.w	r6, [fp], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1470:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
    1474:	444e      	add	r6, r9
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1476:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
    147a:	220c      	movs	r2, #12
    147c:	4639      	mov	r1, r7
    147e:	4630      	mov	r0, r6
    1480:	f006 ff5c 	bl	833c <memcmp>
    1484:	4604      	mov	r4, r0
    1486:	b900      	cbnz	r0, 148a <__acle_se_spm_firmware_info_nse+0x4a>
		if (finfo) {
    1488:	b9a6      	cbnz	r6, 14b4 <__acle_se_spm_firmware_info_nse+0x74>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    148a:	f108 0801 	add.w	r8, r8, #1
    148e:	f1b8 0f05 	cmp.w	r8, #5
    1492:	d1eb      	bne.n	146c <__acle_se_spm_firmware_info_nse+0x2c>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
    1494:	f06f 040d 	mvn.w	r4, #13
}
    1498:	4620      	mov	r0, r4
    149a:	b005      	add	sp, #20
    149c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14a0:	4671      	mov	r1, lr
    14a2:	4672      	mov	r2, lr
    14a4:	4673      	mov	r3, lr
    14a6:	46f4      	mov	ip, lr
    14a8:	f38e 8c00 	msr	CPSR_fs, lr
    14ac:	4774      	bxns	lr
		return -EINVAL;
    14ae:	f06f 0415 	mvn.w	r4, #21
    14b2:	e7f1      	b.n	1498 <__acle_se_spm_firmware_info_nse+0x58>
		memcpy(info, tmp_info, sizeof(*tmp_info));
    14b4:	223c      	movs	r2, #60	; 0x3c
    14b6:	4631      	mov	r1, r6
    14b8:	4628      	mov	r0, r5
    14ba:	f006 ff66 	bl	838a <memcpy>
		return 0;
    14be:	e7eb      	b.n	1498 <__acle_se_spm_firmware_info_nse+0x58>
    14c0:	00008a78 	.word	0x00008a78
    14c4:	00008940 	.word	0x00008940

000014c8 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    14c8:	4801      	ldr	r0, [pc, #4]	; (14d0 <nrf_cc3xx_platform_abort_init+0x8>)
    14ca:	f004 b89b 	b.w	5604 <nrf_cc3xx_platform_set_abort>
    14ce:	bf00      	nop
    14d0:	00008a8c 	.word	0x00008a8c

000014d4 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    14d4:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    14d6:	b1b0      	cbz	r0, 1506 <mutex_unlock_platform+0x32>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    14d8:	6843      	ldr	r3, [r0, #4]
    14da:	2b04      	cmp	r3, #4
    14dc:	d10d      	bne.n	14fa <mutex_unlock_platform+0x26>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    14de:	2200      	movs	r2, #0
    14e0:	6803      	ldr	r3, [r0, #0]
    14e2:	e8d3 1fef 	ldaex	r1, [r3]
    14e6:	2901      	cmp	r1, #1
    14e8:	d103      	bne.n	14f2 <mutex_unlock_platform+0x1e>
    14ea:	e8c3 2fe0 	stlex	r0, r2, [r3]
    14ee:	2800      	cmp	r0, #0
    14f0:	d1f7      	bne.n	14e2 <mutex_unlock_platform+0xe>
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    14f2:	4807      	ldr	r0, [pc, #28]	; (1510 <mutex_unlock_platform+0x3c>)
    14f4:	bf08      	it	eq
    14f6:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    14f8:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    14fa:	b13b      	cbz	r3, 150c <mutex_unlock_platform+0x38>
        p_mutex = (struct k_mutex *)mutex->mutex;
    14fc:	6800      	ldr	r0, [r0, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    14fe:	f002 feaf 	bl	4260 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1502:	2000      	movs	r0, #0
    1504:	e7f8      	b.n	14f8 <mutex_unlock_platform+0x24>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1506:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    150a:	e7f5      	b.n	14f8 <mutex_unlock_platform+0x24>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    150c:	4801      	ldr	r0, [pc, #4]	; (1514 <mutex_unlock_platform+0x40>)
    150e:	e7f3      	b.n	14f8 <mutex_unlock_platform+0x24>
    1510:	ffff8fe9 	.word	0xffff8fe9
    1514:	ffff8fea 	.word	0xffff8fea

00001518 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1518:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    151a:	4604      	mov	r4, r0
    151c:	b918      	cbnz	r0, 1526 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    151e:	4b0d      	ldr	r3, [pc, #52]	; (1554 <mutex_free_platform+0x3c>)
    1520:	480d      	ldr	r0, [pc, #52]	; (1558 <mutex_free_platform+0x40>)
    1522:	685b      	ldr	r3, [r3, #4]
    1524:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1526:	6861      	ldr	r1, [r4, #4]
    1528:	2908      	cmp	r1, #8
    152a:	d00d      	beq.n	1548 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    152c:	f031 0304 	bics.w	r3, r1, #4
    1530:	d00a      	beq.n	1548 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1532:	f011 0102 	ands.w	r1, r1, #2
    1536:	d008      	beq.n	154a <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1538:	4621      	mov	r1, r4
    153a:	4808      	ldr	r0, [pc, #32]	; (155c <mutex_free_platform+0x44>)
    153c:	f002 fc46 	bl	3dcc <k_mem_slab_free>
        mutex->mutex = NULL;
    1540:	2300      	movs	r3, #0
    1542:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1544:	2300      	movs	r3, #0
    1546:	6063      	str	r3, [r4, #4]
}
    1548:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    154a:	2214      	movs	r2, #20
    154c:	6820      	ldr	r0, [r4, #0]
    154e:	f006 ff27 	bl	83a0 <memset>
    1552:	e7f7      	b.n	1544 <mutex_free_platform+0x2c>
    1554:	2000008c 	.word	0x2000008c
    1558:	000090b2 	.word	0x000090b2
    155c:	2000043c 	.word	0x2000043c

00001560 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1560:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1562:	4604      	mov	r4, r0
    1564:	b918      	cbnz	r0, 156e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1566:	4b16      	ldr	r3, [pc, #88]	; (15c0 <mutex_init_platform+0x60>)
    1568:	4816      	ldr	r0, [pc, #88]	; (15c4 <mutex_init_platform+0x64>)
    156a:	685b      	ldr	r3, [r3, #4]
    156c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    156e:	6863      	ldr	r3, [r4, #4]
    1570:	2b04      	cmp	r3, #4
    1572:	d023      	beq.n	15bc <mutex_init_platform+0x5c>
    1574:	2b08      	cmp	r3, #8
    1576:	d021      	beq.n	15bc <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1578:	b9cb      	cbnz	r3, 15ae <mutex_init_platform+0x4e>
    157a:	6823      	ldr	r3, [r4, #0]
    157c:	b9bb      	cbnz	r3, 15ae <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    157e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1586:	4621      	mov	r1, r4
    1588:	480f      	ldr	r0, [pc, #60]	; (15c8 <mutex_init_platform+0x68>)
    158a:	f002 fbc5 	bl	3d18 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    158e:	b908      	cbnz	r0, 1594 <mutex_init_platform+0x34>
    1590:	6823      	ldr	r3, [r4, #0]
    1592:	b91b      	cbnz	r3, 159c <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1594:	4b0a      	ldr	r3, [pc, #40]	; (15c0 <mutex_init_platform+0x60>)
    1596:	480d      	ldr	r0, [pc, #52]	; (15cc <mutex_init_platform+0x6c>)
    1598:	685b      	ldr	r3, [r3, #4]
    159a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    159c:	2214      	movs	r2, #20
    159e:	2100      	movs	r1, #0
    15a0:	6820      	ldr	r0, [r4, #0]
    15a2:	f006 fefd 	bl	83a0 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    15a6:	6863      	ldr	r3, [r4, #4]
    15a8:	f043 0302 	orr.w	r3, r3, #2
    15ac:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    15ae:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    15b0:	f007 f825 	bl	85fe <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    15b4:	6863      	ldr	r3, [r4, #4]
    15b6:	f043 0301 	orr.w	r3, r3, #1
    15ba:	6063      	str	r3, [r4, #4]
}
    15bc:	bd10      	pop	{r4, pc}
    15be:	bf00      	nop
    15c0:	2000008c 	.word	0x2000008c
    15c4:	000090b2 	.word	0x000090b2
    15c8:	2000043c 	.word	0x2000043c
    15cc:	000090d8 	.word	0x000090d8

000015d0 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    15d0:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    15d2:	b1e8      	cbz	r0, 1610 <mutex_lock_platform+0x40>
    switch (mutex->flags) {
    15d4:	6843      	ldr	r3, [r0, #4]
    15d6:	2b04      	cmp	r3, #4
    15d8:	d10c      	bne.n	15f4 <mutex_lock_platform+0x24>
    15da:	2201      	movs	r2, #1
    15dc:	6803      	ldr	r3, [r0, #0]
    15de:	e8d3 1fef 	ldaex	r1, [r3]
    15e2:	2900      	cmp	r1, #0
    15e4:	d103      	bne.n	15ee <mutex_lock_platform+0x1e>
    15e6:	e8c3 2fe0 	stlex	r0, r2, [r3]
    15ea:	2800      	cmp	r0, #0
    15ec:	d1f7      	bne.n	15de <mutex_lock_platform+0xe>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    15ee:	d10b      	bne.n	1608 <mutex_lock_platform+0x38>
    15f0:	2000      	movs	r0, #0
}
    15f2:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    15f4:	b153      	cbz	r3, 160c <mutex_lock_platform+0x3c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    15f6:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    15f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    15fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1600:	f002 fd56 	bl	40b0 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1604:	2800      	cmp	r0, #0
    1606:	d0f3      	beq.n	15f0 <mutex_lock_platform+0x20>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1608:	4803      	ldr	r0, [pc, #12]	; (1618 <mutex_lock_platform+0x48>)
    160a:	e7f2      	b.n	15f2 <mutex_lock_platform+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    160c:	4803      	ldr	r0, [pc, #12]	; (161c <mutex_lock_platform+0x4c>)
    160e:	e7f0      	b.n	15f2 <mutex_lock_platform+0x22>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1610:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1614:	e7ed      	b.n	15f2 <mutex_lock_platform+0x22>
    1616:	bf00      	nop
    1618:	ffff8fe9 	.word	0xffff8fe9
    161c:	ffff8fea 	.word	0xffff8fea

00001620 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1620:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1622:	4906      	ldr	r1, [pc, #24]	; (163c <nrf_cc3xx_platform_mutex_init+0x1c>)
    1624:	2340      	movs	r3, #64	; 0x40
    1626:	2214      	movs	r2, #20
    1628:	4805      	ldr	r0, [pc, #20]	; (1640 <nrf_cc3xx_platform_mutex_init+0x20>)
    162a:	f006 ffc3 	bl	85b4 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    162e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1632:	4904      	ldr	r1, [pc, #16]	; (1644 <nrf_cc3xx_platform_mutex_init+0x24>)
    1634:	4804      	ldr	r0, [pc, #16]	; (1648 <nrf_cc3xx_platform_mutex_init+0x28>)
    1636:	f004 b899 	b.w	576c <nrf_cc3xx_platform_set_mutexes>
    163a:	bf00      	nop
    163c:	2000045c 	.word	0x2000045c
    1640:	2000043c 	.word	0x2000043c
    1644:	00008aa4 	.word	0x00008aa4
    1648:	00008a94 	.word	0x00008a94

0000164c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    164c:	4901      	ldr	r1, [pc, #4]	; (1654 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    164e:	2210      	movs	r2, #16
	str	r2, [r1]
    1650:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1652:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1654:	e000ed10 	.word	0xe000ed10

00001658 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1658:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    165a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    165c:	f380 8811 	msr	BASEPRI, r0
	isb
    1660:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1664:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1668:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    166a:	b662      	cpsie	i
	isb
    166c:	f3bf 8f6f 	isb	sy

	bx	lr
    1670:	4770      	bx	lr
    1672:	bf00      	nop

00001674 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1674:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1676:	4605      	mov	r5, r0

	if (esf != NULL) {
    1678:	460c      	mov	r4, r1
    167a:	b1c9      	cbz	r1, 16b0 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    167c:	688b      	ldr	r3, [r1, #8]
    167e:	4810      	ldr	r0, [pc, #64]	; (16c0 <z_arm_fatal_error+0x4c>)
    1680:	9300      	str	r3, [sp, #0]
    1682:	e9d1 2300 	ldrd	r2, r3, [r1]
    1686:	2145      	movs	r1, #69	; 0x45
    1688:	f006 fde2 	bl	8250 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    168c:	6963      	ldr	r3, [r4, #20]
    168e:	2145      	movs	r1, #69	; 0x45
    1690:	9300      	str	r3, [sp, #0]
    1692:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    1696:	480b      	ldr	r0, [pc, #44]	; (16c4 <z_arm_fatal_error+0x50>)
    1698:	f006 fdda 	bl	8250 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    169c:	2145      	movs	r1, #69	; 0x45
    169e:	69e2      	ldr	r2, [r4, #28]
    16a0:	4809      	ldr	r0, [pc, #36]	; (16c8 <z_arm_fatal_error+0x54>)
    16a2:	f006 fdd5 	bl	8250 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    16a6:	2145      	movs	r1, #69	; 0x45
    16a8:	69a2      	ldr	r2, [r4, #24]
    16aa:	4808      	ldr	r0, [pc, #32]	; (16cc <z_arm_fatal_error+0x58>)
    16ac:	f006 fdd0 	bl	8250 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    16b0:	4621      	mov	r1, r4
    16b2:	4628      	mov	r0, r5
}
    16b4:	b003      	add	sp, #12
    16b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    16ba:	f002 b9d3 	b.w	3a64 <z_fatal_error>
    16be:	bf00      	nop
    16c0:	00009105 	.word	0x00009105
    16c4:	00009139 	.word	0x00009139
    16c8:	0000916d 	.word	0x0000916d
    16cc:	00009181 	.word	0x00009181

000016d0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    16d0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    16d2:	2b00      	cmp	r3, #0
    16d4:	db08      	blt.n	16e8 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    16d6:	2201      	movs	r2, #1
    16d8:	f000 001f 	and.w	r0, r0, #31
    16dc:	fa02 f000 	lsl.w	r0, r2, r0
    16e0:	4a02      	ldr	r2, [pc, #8]	; (16ec <arch_irq_enable+0x1c>)
    16e2:	095b      	lsrs	r3, r3, #5
    16e4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    16e8:	4770      	bx	lr
    16ea:	bf00      	nop
    16ec:	e000e100 	.word	0xe000e100

000016f0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    16f0:	4b05      	ldr	r3, [pc, #20]	; (1708 <arch_irq_is_enabled+0x18>)
    16f2:	0942      	lsrs	r2, r0, #5
    16f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    16f8:	2301      	movs	r3, #1
    16fa:	f000 001f 	and.w	r0, r0, #31
    16fe:	fa03 f000 	lsl.w	r0, r3, r0
}
    1702:	4010      	ands	r0, r2
    1704:	4770      	bx	lr
    1706:	bf00      	nop
    1708:	e000e100 	.word	0xe000e100

0000170c <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    170c:	b538      	push	{r3, r4, r5, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    170e:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1710:	2c07      	cmp	r4, #7
{
    1712:	4605      	mov	r5, r0
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1714:	d908      	bls.n	1728 <z_arm_irq_priority_set+0x1c>
    1716:	490d      	ldr	r1, [pc, #52]	; (174c <z_arm_irq_priority_set+0x40>)
    1718:	480d      	ldr	r0, [pc, #52]	; (1750 <z_arm_irq_priority_set+0x44>)
    171a:	2259      	movs	r2, #89	; 0x59
    171c:	f006 fcfa 	bl	8114 <printk>
    1720:	2159      	movs	r1, #89	; 0x59
    1722:	480a      	ldr	r0, [pc, #40]	; (174c <z_arm_irq_priority_set+0x40>)
    1724:	f006 fd81 	bl	822a <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1728:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    172a:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    172c:	bfac      	ite	ge
    172e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1732:	4b08      	ldrlt	r3, [pc, #32]	; (1754 <z_arm_irq_priority_set+0x48>)
    1734:	ea4f 1444 	mov.w	r4, r4, lsl #5
    1738:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    173a:	bfab      	itete	ge
    173c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1740:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1744:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1748:	555c      	strblt	r4, [r3, r5]
}
    174a:	bd38      	pop	{r3, r4, r5, pc}
    174c:	000091b4 	.word	0x000091b4
    1750:	00008d71 	.word	0x00008d71
    1754:	e000ed14 	.word	0xe000ed14

00001758 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1758:	bf30      	wfi
    b z_SysNmiOnReset
    175a:	f7ff bffd 	b.w	1758 <z_SysNmiOnReset>
    175e:	bf00      	nop

00001760 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1760:	4a0b      	ldr	r2, [pc, #44]	; (1790 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1762:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1764:	4b0b      	ldr	r3, [pc, #44]	; (1794 <z_arm_prep_c+0x34>)
    1766:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    176a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    176c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1770:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1774:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1778:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    177c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1780:	f002 fa10 	bl	3ba4 <z_bss_zero>
	z_data_copy();
    1784:	f003 fc66 	bl	5054 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1788:	f000 fb58 	bl	1e3c <z_arm_interrupt_init>
	z_cstart();
    178c:	f002 fa14 	bl	3bb8 <z_cstart>
    1790:	00000000 	.word	0x00000000
    1794:	e000ed00 	.word	0xe000ed00

00001798 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1798:	4a09      	ldr	r2, [pc, #36]	; (17c0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    179a:	490a      	ldr	r1, [pc, #40]	; (17c4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    179c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    179e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    17a0:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    17a2:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    17a4:	4908      	ldr	r1, [pc, #32]	; (17c8 <arch_swap+0x30>)
    17a6:	684b      	ldr	r3, [r1, #4]
    17a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    17ac:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    17ae:	2300      	movs	r3, #0
    17b0:	f383 8811 	msr	BASEPRI, r3
    17b4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    17b8:	6893      	ldr	r3, [r2, #8]
}
    17ba:	6f98      	ldr	r0, [r3, #120]	; 0x78
    17bc:	4770      	bx	lr
    17be:	bf00      	nop
    17c0:	200009f4 	.word	0x200009f4
    17c4:	00008b78 	.word	0x00008b78
    17c8:	e000ed00 	.word	0xe000ed00

000017cc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    17cc:	4913      	ldr	r1, [pc, #76]	; (181c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    17ce:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    17d0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    17d4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    17d6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    17da:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    17de:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    17e0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    17e4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    17e8:	4f0d      	ldr	r7, [pc, #52]	; (1820 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    17ea:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    17ee:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    17f0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    17f2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    17f4:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    17f6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    17f8:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    17fa:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    17fe:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1802:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1806:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    180a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    180e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    1810:	f006 fd72 	bl	82f8 <configure_builtin_stack_guard>
    pop {r2, lr}
    1814:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1818:	4770      	bx	lr
    181a:	0000      	.short	0x0000
    ldr r1, =_kernel
    181c:	200009f4 	.word	0x200009f4
    ldr v4, =_SCS_ICSR
    1820:	e000ed04 	.word	0xe000ed04

00001824 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1824:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1828:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    182a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    182e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1832:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1834:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1838:	2902      	cmp	r1, #2
    beq _oops
    183a:	d0ff      	beq.n	183c <_oops>

0000183c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    183c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    183e:	f006 fd1d 	bl	827c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1842:	bd01      	pop	{r0, pc}

00001844 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1844:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1848:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    184a:	490b      	ldr	r1, [pc, #44]	; (1878 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    184c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    1850:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    1852:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    1856:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    185a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    185c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    1860:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1864:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1868:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    186c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    186e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1870:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1872:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1874:	4770      	bx	lr
    1876:	bf00      	nop
    1878:	00008155 	.word	0x00008155

0000187c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    187c:	4b08      	ldr	r3, [pc, #32]	; (18a0 <arch_switch_to_main_thread+0x24>)
    187e:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    1880:	6e43      	ldr	r3, [r0, #100]	; 0x64
    1882:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1886:	4610      	mov	r0, r2
    1888:	f381 8809 	msr	PSP, r1
    188c:	2100      	movs	r1, #0
    188e:	b663      	cpsie	if
    1890:	f381 8811 	msr	BASEPRI, r1
    1894:	f3bf 8f6f 	isb	sy
    1898:	2200      	movs	r2, #0
    189a:	2300      	movs	r3, #0
    189c:	f006 fc5a 	bl	8154 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    18a0:	200009f4 	.word	0x200009f4

000018a4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    18a4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    18a6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    18a8:	4a0b      	ldr	r2, [pc, #44]	; (18d8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    18aa:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    18ac:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    18ae:	bf1e      	ittt	ne
	movne	r1, #0
    18b0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    18b2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    18b4:	f006 fe9c 	blne	85f0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    18b8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    18ba:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    18be:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    18c2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    18c6:	4905      	ldr	r1, [pc, #20]	; (18dc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    18c8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    18ca:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    18cc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    18ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    18d2:	4903      	ldr	r1, [pc, #12]	; (18e0 <_isr_wrapper+0x3c>)
	bx r1
    18d4:	4708      	bx	r1
    18d6:	0000      	.short	0x0000
	ldr r2, =_kernel
    18d8:	200009f4 	.word	0x200009f4
	ldr r1, =_sw_isr_table
    18dc:	000086f4 	.word	0x000086f4
	ldr r1, =z_arm_int_exit
    18e0:	000018e5 	.word	0x000018e5

000018e4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    18e4:	4b04      	ldr	r3, [pc, #16]	; (18f8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    18e6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    18e8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    18ea:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    18ec:	d003      	beq.n	18f6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    18ee:	4903      	ldr	r1, [pc, #12]	; (18fc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    18f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    18f4:	600a      	str	r2, [r1, #0]

000018f6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    18f6:	4770      	bx	lr
	ldr r3, =_kernel
    18f8:	200009f4 	.word	0x200009f4
	ldr r1, =_SCS_ICSR
    18fc:	e000ed04 	.word	0xe000ed04

00001900 <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1900:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1902:	4c2b      	ldr	r4, [pc, #172]	; (19b0 <mem_manage_fault.isra.0+0xb0>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1904:	4606      	mov	r6, r0
    1906:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    1908:	482a      	ldr	r0, [pc, #168]	; (19b4 <mem_manage_fault.isra.0+0xb4>)
    190a:	2145      	movs	r1, #69	; 0x45
    190c:	f006 fca0 	bl	8250 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1910:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1912:	06d0      	lsls	r0, r2, #27
    1914:	d503      	bpl.n	191e <mem_manage_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    1916:	2145      	movs	r1, #69	; 0x45
    1918:	4827      	ldr	r0, [pc, #156]	; (19b8 <mem_manage_fault.isra.0+0xb8>)
    191a:	f006 fc99 	bl	8250 <z_log_minimal_printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    191e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1920:	0719      	lsls	r1, r3, #28
    1922:	d503      	bpl.n	192c <mem_manage_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    1924:	2145      	movs	r1, #69	; 0x45
    1926:	4825      	ldr	r0, [pc, #148]	; (19bc <mem_manage_fault.isra.0+0xbc>)
    1928:	f006 fc92 	bl	8250 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    192c:	4c20      	ldr	r4, [pc, #128]	; (19b0 <mem_manage_fault.isra.0+0xb0>)
    192e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1930:	079a      	lsls	r2, r3, #30
    1932:	d510      	bpl.n	1956 <mem_manage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    1934:	2145      	movs	r1, #69	; 0x45
    1936:	4822      	ldr	r0, [pc, #136]	; (19c0 <mem_manage_fault.isra.0+0xc0>)
    1938:	f006 fc8a 	bl	8250 <z_log_minimal_printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    193c:	6b62      	ldr	r2, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    193e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1940:	061b      	lsls	r3, r3, #24
    1942:	d508      	bpl.n	1956 <mem_manage_fault.isra.0+0x56>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    1944:	2145      	movs	r1, #69	; 0x45
    1946:	481f      	ldr	r0, [pc, #124]	; (19c4 <mem_manage_fault.isra.0+0xc4>)
    1948:	f006 fc82 	bl	8250 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    194c:	b11e      	cbz	r6, 1956 <mem_manage_fault.isra.0+0x56>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    194e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1954:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1956:	4c16      	ldr	r4, [pc, #88]	; (19b0 <mem_manage_fault.isra.0+0xb0>)
    1958:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    195a:	07d6      	lsls	r6, r2, #31
    195c:	d503      	bpl.n	1966 <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    195e:	2145      	movs	r1, #69	; 0x45
    1960:	4819      	ldr	r0, [pc, #100]	; (19c8 <mem_manage_fault.isra.0+0xc8>)
    1962:	f006 fc75 	bl	8250 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1966:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1968:	0698      	lsls	r0, r3, #26
    196a:	d503      	bpl.n	1974 <mem_manage_fault.isra.0+0x74>
		PR_FAULT_INFO(
    196c:	2145      	movs	r1, #69	; 0x45
    196e:	4817      	ldr	r0, [pc, #92]	; (19cc <mem_manage_fault.isra.0+0xcc>)
    1970:	f006 fc6e 	bl	8250 <z_log_minimal_printk>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1974:	4b0e      	ldr	r3, [pc, #56]	; (19b0 <mem_manage_fault.isra.0+0xb0>)
    1976:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1978:	06d1      	lsls	r1, r2, #27
    197a:	d402      	bmi.n	1982 <mem_manage_fault.isra.0+0x82>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    197c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    197e:	0792      	lsls	r2, r2, #30
    1980:	d50d      	bpl.n	199e <mem_manage_fault.isra.0+0x9e>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    1982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1984:	06db      	lsls	r3, r3, #27
    1986:	d50a      	bpl.n	199e <mem_manage_fault.isra.0+0x9e>
    1988:	4911      	ldr	r1, [pc, #68]	; (19d0 <mem_manage_fault.isra.0+0xd0>)
    198a:	4812      	ldr	r0, [pc, #72]	; (19d4 <mem_manage_fault.isra.0+0xd4>)
    198c:	f240 124f 	movw	r2, #335	; 0x14f
    1990:	f006 fbc0 	bl	8114 <printk>
    1994:	f240 114f 	movw	r1, #335	; 0x14f
    1998:	480d      	ldr	r0, [pc, #52]	; (19d0 <mem_manage_fault.isra.0+0xd0>)
    199a:	f006 fc46 	bl	822a <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    199e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    19a0:	4a03      	ldr	r2, [pc, #12]	; (19b0 <mem_manage_fault.isra.0+0xb0>)
    19a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    19a4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    19a8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    19aa:	7028      	strb	r0, [r5, #0]

	return reason;
}
    19ac:	bd70      	pop	{r4, r5, r6, pc}
    19ae:	bf00      	nop
    19b0:	e000ed00 	.word	0xe000ed00
    19b4:	000091ea 	.word	0x000091ea
    19b8:	00009205 	.word	0x00009205
    19bc:	0000923d 	.word	0x0000923d
    19c0:	00009255 	.word	0x00009255
    19c4:	00009272 	.word	0x00009272
    19c8:	0000928d 	.word	0x0000928d
    19cc:	000092b1 	.word	0x000092b1
    19d0:	000092e5 	.word	0x000092e5
    19d4:	00008d71 	.word	0x00008d71

000019d8 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    19d8:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    19da:	4c23      	ldr	r4, [pc, #140]	; (1a68 <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    19dc:	4606      	mov	r6, r0
    19de:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    19e0:	4822      	ldr	r0, [pc, #136]	; (1a6c <bus_fault.isra.0+0x94>)
    19e2:	2145      	movs	r1, #69	; 0x45
    19e4:	f006 fc34 	bl	8250 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    19e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    19ea:	04d1      	lsls	r1, r2, #19
    19ec:	d503      	bpl.n	19f6 <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    19ee:	2145      	movs	r1, #69	; 0x45
    19f0:	481f      	ldr	r0, [pc, #124]	; (1a70 <bus_fault.isra.0+0x98>)
    19f2:	f006 fc2d 	bl	8250 <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    19f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    19f8:	051a      	lsls	r2, r3, #20
    19fa:	d503      	bpl.n	1a04 <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    19fc:	2145      	movs	r1, #69	; 0x45
    19fe:	481d      	ldr	r0, [pc, #116]	; (1a74 <bus_fault.isra.0+0x9c>)
    1a00:	f006 fc26 	bl	8250 <z_log_minimal_printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1a04:	4c18      	ldr	r4, [pc, #96]	; (1a68 <bus_fault.isra.0+0x90>)
    1a06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a08:	059b      	lsls	r3, r3, #22
    1a0a:	d510      	bpl.n	1a2e <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    1a0c:	481a      	ldr	r0, [pc, #104]	; (1a78 <bus_fault.isra.0+0xa0>)
    1a0e:	2145      	movs	r1, #69	; 0x45
    1a10:	f006 fc1e 	bl	8250 <z_log_minimal_printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1a14:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1a16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a18:	0418      	lsls	r0, r3, #16
    1a1a:	d508      	bpl.n	1a2e <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    1a1c:	2145      	movs	r1, #69	; 0x45
    1a1e:	4817      	ldr	r0, [pc, #92]	; (1a7c <bus_fault.isra.0+0xa4>)
    1a20:	f006 fc16 	bl	8250 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1a24:	b11e      	cbz	r6, 1a2e <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1a26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1a2c:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1a2e:	4c0e      	ldr	r4, [pc, #56]	; (1a68 <bus_fault.isra.0+0x90>)
    1a30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a32:	0559      	lsls	r1, r3, #21
    1a34:	d503      	bpl.n	1a3e <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    1a36:	2145      	movs	r1, #69	; 0x45
    1a38:	4811      	ldr	r0, [pc, #68]	; (1a80 <bus_fault.isra.0+0xa8>)
    1a3a:	f006 fc09 	bl	8250 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1a3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a40:	05da      	lsls	r2, r3, #23
    1a42:	d50b      	bpl.n	1a5c <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    1a44:	2145      	movs	r1, #69	; 0x45
    1a46:	480f      	ldr	r0, [pc, #60]	; (1a84 <bus_fault.isra.0+0xac>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1a48:	f006 fc02 	bl	8250 <z_log_minimal_printk>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
    1a4c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1a4e:	4a06      	ldr	r2, [pc, #24]	; (1a68 <bus_fault.isra.0+0x90>)
    1a50:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1a52:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1a56:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1a58:	7028      	strb	r0, [r5, #0]

	return reason;
}
    1a5a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1a5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1a5e:	049b      	lsls	r3, r3, #18
    1a60:	d5f4      	bpl.n	1a4c <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1a62:	2145      	movs	r1, #69	; 0x45
    1a64:	4808      	ldr	r0, [pc, #32]	; (1a88 <bus_fault.isra.0+0xb0>)
    1a66:	e7ef      	b.n	1a48 <bus_fault.isra.0+0x70>
    1a68:	e000ed00 	.word	0xe000ed00
    1a6c:	0000931f 	.word	0x0000931f
    1a70:	0000933a 	.word	0x0000933a
    1a74:	0000923d 	.word	0x0000923d
    1a78:	00009350 	.word	0x00009350
    1a7c:	0000936e 	.word	0x0000936e
    1a80:	00009388 	.word	0x00009388
    1a84:	000093a8 	.word	0x000093a8
    1a88:	000092b1 	.word	0x000092b1

00001a8c <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    1a8c:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1a8e:	4c21      	ldr	r4, [pc, #132]	; (1b14 <usage_fault.isra.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    1a90:	2145      	movs	r1, #69	; 0x45
    1a92:	4821      	ldr	r0, [pc, #132]	; (1b18 <usage_fault.isra.0+0x8c>)
    1a94:	f006 fbdc 	bl	8250 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1a98:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1a9a:	0195      	lsls	r5, r2, #6
    1a9c:	d503      	bpl.n	1aa6 <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    1a9e:	2145      	movs	r1, #69	; 0x45
    1aa0:	481e      	ldr	r0, [pc, #120]	; (1b1c <usage_fault.isra.0+0x90>)
    1aa2:	f006 fbd5 	bl	8250 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1aa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1aa8:	01dc      	lsls	r4, r3, #7
    1aaa:	d503      	bpl.n	1ab4 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    1aac:	2145      	movs	r1, #69	; 0x45
    1aae:	481c      	ldr	r0, [pc, #112]	; (1b20 <usage_fault.isra.0+0x94>)
    1ab0:	f006 fbce 	bl	8250 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1ab4:	4d17      	ldr	r5, [pc, #92]	; (1b14 <usage_fault.isra.0+0x88>)
    1ab6:	6aac      	ldr	r4, [r5, #40]	; 0x28
    1ab8:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    1abc:	d004      	beq.n	1ac8 <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    1abe:	2145      	movs	r1, #69	; 0x45
    1ac0:	4818      	ldr	r0, [pc, #96]	; (1b24 <usage_fault.isra.0+0x98>)
    1ac2:	f006 fbc5 	bl	8250 <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    1ac6:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1ac8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1aca:	0318      	lsls	r0, r3, #12
    1acc:	d503      	bpl.n	1ad6 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    1ace:	2145      	movs	r1, #69	; 0x45
    1ad0:	4815      	ldr	r0, [pc, #84]	; (1b28 <usage_fault.isra.0+0x9c>)
    1ad2:	f006 fbbd 	bl	8250 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1ad6:	4d0f      	ldr	r5, [pc, #60]	; (1b14 <usage_fault.isra.0+0x88>)
    1ad8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    1ada:	0351      	lsls	r1, r2, #13
    1adc:	d503      	bpl.n	1ae6 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    1ade:	2145      	movs	r1, #69	; 0x45
    1ae0:	4812      	ldr	r0, [pc, #72]	; (1b2c <usage_fault.isra.0+0xa0>)
    1ae2:	f006 fbb5 	bl	8250 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1ae6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1ae8:	039a      	lsls	r2, r3, #14
    1aea:	d503      	bpl.n	1af4 <usage_fault.isra.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    1aec:	2145      	movs	r1, #69	; 0x45
    1aee:	4810      	ldr	r0, [pc, #64]	; (1b30 <usage_fault.isra.0+0xa4>)
    1af0:	f006 fbae 	bl	8250 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1af4:	4d07      	ldr	r5, [pc, #28]	; (1b14 <usage_fault.isra.0+0x88>)
    1af6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1af8:	03db      	lsls	r3, r3, #15
    1afa:	d503      	bpl.n	1b04 <usage_fault.isra.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    1afc:	2145      	movs	r1, #69	; 0x45
    1afe:	480d      	ldr	r0, [pc, #52]	; (1b34 <usage_fault.isra.0+0xa8>)
    1b00:	f006 fba6 	bl	8250 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1b04:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    1b06:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1b08:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1b0c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1b10:	62ab      	str	r3, [r5, #40]	; 0x28
}
    1b12:	bd38      	pop	{r3, r4, r5, pc}
    1b14:	e000ed00 	.word	0xe000ed00
    1b18:	000093c5 	.word	0x000093c5
    1b1c:	000093e2 	.word	0x000093e2
    1b20:	000093fa 	.word	0x000093fa
    1b24:	00009419 	.word	0x00009419
    1b28:	00009448 	.word	0x00009448
    1b2c:	0000946b 	.word	0x0000946b
    1b30:	00009495 	.word	0x00009495
    1b34:	000094b4 	.word	0x000094b4

00001b38 <secure_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void secure_fault(const z_arch_esf_t *esf)
    1b38:	b510      	push	{r4, lr}
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    1b3a:	4c1e      	ldr	r4, [pc, #120]	; (1bb4 <secure_fault.isra.0+0x7c>)
	PR_FAULT_INFO("***** SECURE FAULT *****");
    1b3c:	481e      	ldr	r0, [pc, #120]	; (1bb8 <secure_fault.isra.0+0x80>)
    1b3e:	2145      	movs	r1, #69	; 0x45
    1b40:	f006 fb86 	bl	8250 <z_log_minimal_printk>
	STORE_xFAR(sfar, SAU->SFAR);
    1b44:	69a2      	ldr	r2, [r4, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    1b46:	6963      	ldr	r3, [r4, #20]
    1b48:	0658      	lsls	r0, r3, #25
    1b4a:	d503      	bpl.n	1b54 <secure_fault.isra.0+0x1c>
		PR_EXC("  Address: 0x%x", sfar);
    1b4c:	2145      	movs	r1, #69	; 0x45
    1b4e:	481b      	ldr	r0, [pc, #108]	; (1bbc <secure_fault.isra.0+0x84>)
    1b50:	f006 fb7e 	bl	8250 <z_log_minimal_printk>
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    1b54:	6963      	ldr	r3, [r4, #20]
    1b56:	07d9      	lsls	r1, r3, #31
    1b58:	d508      	bpl.n	1b6c <secure_fault.isra.0+0x34>
		PR_FAULT_INFO("  Invalid entry point");
    1b5a:	2145      	movs	r1, #69	; 0x45
    1b5c:	4818      	ldr	r0, [pc, #96]	; (1bc0 <secure_fault.isra.0+0x88>)
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
		PR_FAULT_INFO("  Lazy state error");
    1b5e:	f006 fb77 	bl	8250 <z_log_minimal_printk>
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    1b62:	6963      	ldr	r3, [r4, #20]
    1b64:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1b68:	6163      	str	r3, [r4, #20]
}
    1b6a:	bd10      	pop	{r4, pc}
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    1b6c:	6963      	ldr	r3, [r4, #20]
    1b6e:	079a      	lsls	r2, r3, #30
    1b70:	d502      	bpl.n	1b78 <secure_fault.isra.0+0x40>
		PR_FAULT_INFO("  Invalid integrity signature");
    1b72:	2145      	movs	r1, #69	; 0x45
    1b74:	4813      	ldr	r0, [pc, #76]	; (1bc4 <secure_fault.isra.0+0x8c>)
    1b76:	e7f2      	b.n	1b5e <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    1b78:	6963      	ldr	r3, [r4, #20]
    1b7a:	075b      	lsls	r3, r3, #29
    1b7c:	d502      	bpl.n	1b84 <secure_fault.isra.0+0x4c>
		PR_FAULT_INFO("  Invalid exception return");
    1b7e:	2145      	movs	r1, #69	; 0x45
    1b80:	4811      	ldr	r0, [pc, #68]	; (1bc8 <secure_fault.isra.0+0x90>)
    1b82:	e7ec      	b.n	1b5e <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    1b84:	6963      	ldr	r3, [r4, #20]
    1b86:	0718      	lsls	r0, r3, #28
    1b88:	d502      	bpl.n	1b90 <secure_fault.isra.0+0x58>
		PR_FAULT_INFO("  Attribution unit violation");
    1b8a:	2145      	movs	r1, #69	; 0x45
    1b8c:	480f      	ldr	r0, [pc, #60]	; (1bcc <secure_fault.isra.0+0x94>)
    1b8e:	e7e6      	b.n	1b5e <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    1b90:	6963      	ldr	r3, [r4, #20]
    1b92:	06d9      	lsls	r1, r3, #27
    1b94:	d502      	bpl.n	1b9c <secure_fault.isra.0+0x64>
		PR_FAULT_INFO("  Invalid transition");
    1b96:	2145      	movs	r1, #69	; 0x45
    1b98:	480d      	ldr	r0, [pc, #52]	; (1bd0 <secure_fault.isra.0+0x98>)
    1b9a:	e7e0      	b.n	1b5e <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    1b9c:	6963      	ldr	r3, [r4, #20]
    1b9e:	069a      	lsls	r2, r3, #26
    1ba0:	d502      	bpl.n	1ba8 <secure_fault.isra.0+0x70>
		PR_FAULT_INFO("  Lazy state preservation");
    1ba2:	2145      	movs	r1, #69	; 0x45
    1ba4:	480b      	ldr	r0, [pc, #44]	; (1bd4 <secure_fault.isra.0+0x9c>)
    1ba6:	e7da      	b.n	1b5e <secure_fault.isra.0+0x26>
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    1ba8:	6963      	ldr	r3, [r4, #20]
    1baa:	061b      	lsls	r3, r3, #24
    1bac:	d5d9      	bpl.n	1b62 <secure_fault.isra.0+0x2a>
		PR_FAULT_INFO("  Lazy state error");
    1bae:	2145      	movs	r1, #69	; 0x45
    1bb0:	4809      	ldr	r0, [pc, #36]	; (1bd8 <secure_fault.isra.0+0xa0>)
    1bb2:	e7d4      	b.n	1b5e <secure_fault.isra.0+0x26>
    1bb4:	e000edd0 	.word	0xe000edd0
    1bb8:	000094e4 	.word	0x000094e4
    1bbc:	00009502 	.word	0x00009502
    1bc0:	00009517 	.word	0x00009517
    1bc4:	00009532 	.word	0x00009532
    1bc8:	00009555 	.word	0x00009555
    1bcc:	00009575 	.word	0x00009575
    1bd0:	00009597 	.word	0x00009597
    1bd4:	000095b1 	.word	0x000095b1
    1bd8:	000095d0 	.word	0x000095d0

00001bdc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1be0:	4b7a      	ldr	r3, [pc, #488]	; (1dcc <z_arm_fault+0x1f0>)
{
    1be2:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1be4:	685c      	ldr	r4, [r3, #4]
    1be6:	2600      	movs	r6, #0
{
    1be8:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1bea:	f3c4 0708 	ubfx	r7, r4, #0, #9
    1bee:	f386 8811 	msr	BASEPRI, r6
    1bf2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1bf6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1bfa:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1bfe:	d11e      	bne.n	1c3e <z_arm_fault+0x62>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    1c00:	f012 0301 	ands.w	r3, r2, #1
    1c04:	d03a      	beq.n	1c7c <z_arm_fault+0xa0>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    1c06:	f012 0340 	ands.w	r3, r2, #64	; 0x40
    1c0a:	f002 0808 	and.w	r8, r2, #8
    1c0e:	f040 80d6 	bne.w	1dbe <z_arm_fault+0x1e2>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    1c12:	0752      	lsls	r2, r2, #29
			secure_esf = (z_arch_esf_t *)msp;
    1c14:	bf54      	ite	pl
    1c16:	4605      	movpl	r5, r0
	*nested_exc = false;
    1c18:	461e      	movmi	r6, r3
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    1c1a:	682a      	ldr	r2, [r5, #0]
    1c1c:	4b6c      	ldr	r3, [pc, #432]	; (1dd0 <z_arm_fault+0x1f4>)
			*nested_exc = true;
    1c1e:	bf58      	it	pl
    1c20:	2601      	movpl	r6, #1
	if ((*top_of_sec_stack == INTEGRITY_SIGNATURE_STD) ||
    1c22:	4413      	add	r3, r2
    1c24:	2b01      	cmp	r3, #1
		sec_ret_addr = secure_esf->basic.pc;
    1c26:	bf98      	it	ls
    1c28:	6c2a      	ldrls	r2, [r5, #64]	; 0x40
	PR_FAULT_INFO("  S instruction address:  0x%x", sec_ret_addr);
    1c2a:	2145      	movs	r1, #69	; 0x45
    1c2c:	4869      	ldr	r0, [pc, #420]	; (1dd4 <z_arm_fault+0x1f8>)
    1c2e:	f006 fb0f 	bl	8250 <z_log_minimal_printk>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1c32:	f1b8 0f00 	cmp.w	r8, #0
    1c36:	d01e      	beq.n	1c76 <z_arm_fault+0x9a>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    1c38:	f3ef 8589 	mrs	r5, PSP_NS

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    1c3c:	b95d      	cbnz	r5, 1c56 <z_arm_fault+0x7a>
    1c3e:	f240 32f2 	movw	r2, #1010	; 0x3f2
    1c42:	4965      	ldr	r1, [pc, #404]	; (1dd8 <z_arm_fault+0x1fc>)
    1c44:	4865      	ldr	r0, [pc, #404]	; (1ddc <z_arm_fault+0x200>)
    1c46:	f006 fa65 	bl	8114 <printk>
    1c4a:	f240 31f2 	movw	r1, #1010	; 0x3f2
    1c4e:	4862      	ldr	r0, [pc, #392]	; (1dd8 <z_arm_fault+0x1fc>)
    1c50:	f006 faeb 	bl	822a <assert_post_action>
    1c54:	2500      	movs	r5, #0
	*recoverable = false;
    1c56:	2300      	movs	r3, #0
    1c58:	1efa      	subs	r2, r7, #3
    1c5a:	4698      	mov	r8, r3
    1c5c:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    1c60:	4613      	mov	r3, r2
    1c62:	2b09      	cmp	r3, #9
    1c64:	f200 8099 	bhi.w	1d9a <z_arm_fault+0x1be>
    1c68:	e8df f003 	tbb	[pc, r3]
    1c6c:	6a8c880a 	.word	0x6a8c880a
    1c70:	97979790 	.word	0x97979790
    1c74:	9497      	.short	0x9497
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    1c76:	f3ef 8588 	mrs	r5, MSP_NS
  return(result);
    1c7a:	e7df      	b.n	1c3c <z_arm_fault+0x60>
	*nested_exc = false;
    1c7c:	461e      	mov	r6, r3
    1c7e:	e7de      	b.n	1c3e <z_arm_fault+0x62>
	PR_FAULT_INFO("***** HARD FAULT *****");
    1c80:	2145      	movs	r1, #69	; 0x45
    1c82:	4857      	ldr	r0, [pc, #348]	; (1de0 <z_arm_fault+0x204>)
    1c84:	f006 fae4 	bl	8250 <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1c88:	4b50      	ldr	r3, [pc, #320]	; (1dcc <z_arm_fault+0x1f0>)
	*recoverable = false;
    1c8a:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1c8e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1c90:	f014 0402 	ands.w	r4, r4, #2
    1c94:	d004      	beq.n	1ca0 <z_arm_fault+0xc4>
		PR_EXC("  Bus fault on vector table read");
    1c96:	2145      	movs	r1, #69	; 0x45
    1c98:	4852      	ldr	r0, [pc, #328]	; (1de4 <z_arm_fault+0x208>)
	PR_FAULT_INFO(
    1c9a:	f006 fad9 	bl	8250 <z_log_minimal_printk>
    1c9e:	e077      	b.n	1d90 <z_arm_fault+0x1b4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1ca2:	2a00      	cmp	r2, #0
    1ca4:	da1d      	bge.n	1ce2 <z_arm_fault+0x106>
		PR_EXC("  Debug event");
    1ca6:	2145      	movs	r1, #69	; 0x45
    1ca8:	484f      	ldr	r0, [pc, #316]	; (1de8 <z_arm_fault+0x20c>)
    1caa:	f006 fad1 	bl	8250 <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1cae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1cb2:	b99b      	cbnz	r3, 1cdc <z_arm_fault+0x100>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1cb4:	2220      	movs	r2, #32
    1cb6:	4629      	mov	r1, r5
    1cb8:	a802      	add	r0, sp, #8
    1cba:	f006 fb66 	bl	838a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1cc0:	2e00      	cmp	r6, #0
    1cc2:	d077      	beq.n	1db4 <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1cc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1cc8:	b922      	cbnz	r2, 1cd4 <z_arm_fault+0xf8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1cca:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1cce:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1cd2:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1cd4:	4620      	mov	r0, r4
    1cd6:	a902      	add	r1, sp, #8
    1cd8:	f7ff fccc 	bl	1674 <z_arm_fatal_error>
}
    1cdc:	b00a      	add	sp, #40	; 0x28
    1cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1ce4:	005b      	lsls	r3, r3, #1
    1ce6:	d540      	bpl.n	1d6a <z_arm_fault+0x18e>
		PR_EXC("  Fault escalation (see below)");
    1ce8:	2145      	movs	r1, #69	; 0x45
    1cea:	4840      	ldr	r0, [pc, #256]	; (1dec <z_arm_fault+0x210>)
    1cec:	f006 fab0 	bl	8250 <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
    1cf0:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1cf2:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    1cf6:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1cfa:	429a      	cmp	r2, r3
    1cfc:	d00c      	beq.n	1d18 <z_arm_fault+0x13c>
		} else if (SCB_MMFSR != 0) {
    1cfe:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1d02:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    1d06:	781b      	ldrb	r3, [r3, #0]
    1d08:	b16b      	cbz	r3, 1d26 <z_arm_fault+0x14a>
			reason = mem_manage_fault(esf, 1, recoverable);
    1d0a:	2001      	movs	r0, #1
    1d0c:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    1d10:	f7ff fdf6 	bl	1900 <mem_manage_fault.isra.0>
		reason = bus_fault(esf, 0, recoverable);
    1d14:	4604      	mov	r4, r0
		break;
    1d16:	e7ca      	b.n	1cae <z_arm_fault+0xd2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    1d18:	2145      	movs	r1, #69	; 0x45
    1d1a:	682a      	ldr	r2, [r5, #0]
    1d1c:	4834      	ldr	r0, [pc, #208]	; (1df0 <z_arm_fault+0x214>)
    1d1e:	f006 fa97 	bl	8250 <z_log_minimal_printk>
			reason = esf->basic.r0;
    1d22:	682c      	ldr	r4, [r5, #0]
    1d24:	e7c3      	b.n	1cae <z_arm_fault+0xd2>
		} else if (SCB_BFSR != 0) {
    1d26:	4b33      	ldr	r3, [pc, #204]	; (1df4 <z_arm_fault+0x218>)
    1d28:	781b      	ldrb	r3, [r3, #0]
    1d2a:	b12b      	cbz	r3, 1d38 <z_arm_fault+0x15c>
			reason = bus_fault(esf, 1, recoverable);
    1d2c:	2001      	movs	r0, #1
    1d2e:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    1d32:	f7ff fe51 	bl	19d8 <bus_fault.isra.0>
    1d36:	e7ed      	b.n	1d14 <z_arm_fault+0x138>
		} else if (SCB_UFSR != 0) {
    1d38:	4b2f      	ldr	r3, [pc, #188]	; (1df8 <z_arm_fault+0x21c>)
    1d3a:	881b      	ldrh	r3, [r3, #0]
    1d3c:	b29b      	uxth	r3, r3
    1d3e:	b113      	cbz	r3, 1d46 <z_arm_fault+0x16a>
		reason = usage_fault(esf);
    1d40:	f7ff fea4 	bl	1a8c <usage_fault.isra.0>
    1d44:	e7e6      	b.n	1d14 <z_arm_fault+0x138>
		} else if (SAU->SFSR != 0) {
    1d46:	4b2d      	ldr	r3, [pc, #180]	; (1dfc <z_arm_fault+0x220>)
    1d48:	695b      	ldr	r3, [r3, #20]
    1d4a:	b113      	cbz	r3, 1d52 <z_arm_fault+0x176>
			secure_fault(esf);
    1d4c:	f7ff fef4 	bl	1b38 <secure_fault.isra.0>
    1d50:	e7ad      	b.n	1cae <z_arm_fault+0xd2>
			__ASSERT(0,
    1d52:	4921      	ldr	r1, [pc, #132]	; (1dd8 <z_arm_fault+0x1fc>)
    1d54:	f240 22c3 	movw	r2, #707	; 0x2c3
    1d58:	4820      	ldr	r0, [pc, #128]	; (1ddc <z_arm_fault+0x200>)
    1d5a:	f006 f9db 	bl	8114 <printk>
    1d5e:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    1d62:	481d      	ldr	r0, [pc, #116]	; (1dd8 <z_arm_fault+0x1fc>)
    1d64:	f006 fa61 	bl	822a <assert_post_action>
    1d68:	e7a1      	b.n	1cae <z_arm_fault+0xd2>
    1d6a:	491b      	ldr	r1, [pc, #108]	; (1dd8 <z_arm_fault+0x1fc>)
    1d6c:	f240 22c7 	movw	r2, #711	; 0x2c7
    1d70:	481a      	ldr	r0, [pc, #104]	; (1ddc <z_arm_fault+0x200>)
    1d72:	f006 f9cf 	bl	8114 <printk>
    1d76:	f240 21c7 	movw	r1, #711	; 0x2c7
    1d7a:	e7f2      	b.n	1d62 <z_arm_fault+0x186>
		reason = mem_manage_fault(esf, 0, recoverable);
    1d7c:	2000      	movs	r0, #0
    1d7e:	f10d 0107 	add.w	r1, sp, #7
    1d82:	e7c5      	b.n	1d10 <z_arm_fault+0x134>
		reason = bus_fault(esf, 0, recoverable);
    1d84:	2000      	movs	r0, #0
    1d86:	f10d 0107 	add.w	r1, sp, #7
    1d8a:	e7d2      	b.n	1d32 <z_arm_fault+0x156>
		secure_fault(esf);
    1d8c:	f7ff fed4 	bl	1b38 <secure_fault.isra.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1d90:	2400      	movs	r4, #0
}
    1d92:	e78c      	b.n	1cae <z_arm_fault+0xd2>
	PR_FAULT_INFO(
    1d94:	2145      	movs	r1, #69	; 0x45
    1d96:	481a      	ldr	r0, [pc, #104]	; (1e00 <z_arm_fault+0x224>)
    1d98:	e77f      	b.n	1c9a <z_arm_fault+0xbe>
	PR_FAULT_INFO("***** %s %d) *****",
    1d9a:	491a      	ldr	r1, [pc, #104]	; (1e04 <z_arm_fault+0x228>)
    1d9c:	f414 7ff8 	tst.w	r4, #496	; 0x1f0
    1da0:	4a19      	ldr	r2, [pc, #100]	; (1e08 <z_arm_fault+0x22c>)
    1da2:	481a      	ldr	r0, [pc, #104]	; (1e0c <z_arm_fault+0x230>)
    1da4:	bf08      	it	eq
    1da6:	460a      	moveq	r2, r1
    1da8:	f1a7 0310 	sub.w	r3, r7, #16
    1dac:	2145      	movs	r1, #69	; 0x45
    1dae:	f006 fa4f 	bl	8250 <z_log_minimal_printk>
    1db2:	e7ed      	b.n	1d90 <z_arm_fault+0x1b4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1db4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1db8:	f023 0301 	bic.w	r3, r3, #1
    1dbc:	e789      	b.n	1cd2 <z_arm_fault+0xf6>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1dbe:	f1b8 0f00 	cmp.w	r8, #0
    1dc2:	f47f af3b 	bne.w	1c3c <z_arm_fault+0x60>
			ptr_esf = (z_arch_esf_t *)msp;
    1dc6:	4605      	mov	r5, r0
			*nested_exc = true;
    1dc8:	2601      	movs	r6, #1
    1dca:	e737      	b.n	1c3c <z_arm_fault+0x60>
    1dcc:	e000ed00 	.word	0xe000ed00
    1dd0:	0105eda6 	.word	0x0105eda6
    1dd4:	00009616 	.word	0x00009616
    1dd8:	000092e5 	.word	0x000092e5
    1ddc:	00008d71 	.word	0x00008d71
    1de0:	0000963a 	.word	0x0000963a
    1de4:	00009656 	.word	0x00009656
    1de8:	0000967c 	.word	0x0000967c
    1dec:	0000968f 	.word	0x0000968f
    1df0:	000096b3 	.word	0x000096b3
    1df4:	e000ed29 	.word	0xe000ed29
    1df8:	e000ed2a 	.word	0xe000ed2a
    1dfc:	e000edd0 	.word	0xe000edd0
    1e00:	000096d4 	.word	0x000096d4
    1e04:	000095e8 	.word	0x000095e8
    1e08:	000095fd 	.word	0x000095fd
    1e0c:	000096fd 	.word	0x000096fd

00001e10 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1e10:	4b04      	ldr	r3, [pc, #16]	; (1e24 <z_arm_fault_init+0x14>)
    1e12:	695a      	ldr	r2, [r3, #20]
    1e14:	f042 0210 	orr.w	r2, r2, #16
    1e18:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    1e1a:	695a      	ldr	r2, [r3, #20]
    1e1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1e20:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1e22:	4770      	bx	lr
    1e24:	e000ed00 	.word	0xe000ed00

00001e28 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1e28:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1e2c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1e30:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1e32:	4672      	mov	r2, lr
	bl z_arm_fault
    1e34:	f7ff fed2 	bl	1bdc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1e38:	bd01      	pop	{r0, pc}
    1e3a:	bf00      	nop

00001e3c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1e3c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1e3e:	2120      	movs	r1, #32
    1e40:	4803      	ldr	r0, [pc, #12]	; (1e50 <z_arm_interrupt_init+0x14>)
    1e42:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1e44:	3301      	adds	r3, #1
    1e46:	2b41      	cmp	r3, #65	; 0x41
    1e48:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1e4c:	d1f9      	bne.n	1e42 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1e4e:	4770      	bx	lr
    1e50:	e000e100 	.word	0xe000e100

00001e54 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1e54:	2000      	movs	r0, #0
    msr CONTROL, r0
    1e56:	f380 8814 	msr	CONTROL, r0
    isb
    1e5a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    1e5e:	2000      	movs	r0, #0
    msr MSPLIM, r0
    1e60:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    1e64:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1e68:	f006 fbf6 	bl	8658 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1e6c:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1e6e:	490e      	ldr	r1, [pc, #56]	; (1ea8 <__start+0x54>)
    str r0, [r1]
    1e70:	6008      	str	r0, [r1, #0]
    dsb
    1e72:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1e76:	480d      	ldr	r0, [pc, #52]	; (1eac <__start+0x58>)
    msr msp, r0
    1e78:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1e7c:	f000 f83c 	bl	1ef8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1e80:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1e82:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1e86:	480a      	ldr	r0, [pc, #40]	; (1eb0 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1e88:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1e8c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1e8e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1e92:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1e96:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1e98:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1e9a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1e9e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1ea2:	f7ff fc5d 	bl	1760 <z_arm_prep_c>
    1ea6:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    1ea8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1eac:	200025d8 	.word	0x200025d8
    ldr r0, =z_interrupt_stacks
    1eb0:	20002718 	.word	0x20002718

00001eb4 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    1eb4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1eb8:	4905      	ldr	r1, [pc, #20]	; (1ed0 <sys_arch_reboot+0x1c>)
    1eba:	4b06      	ldr	r3, [pc, #24]	; (1ed4 <sys_arch_reboot+0x20>)
    1ebc:	68ca      	ldr	r2, [r1, #12]
    1ebe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1ec2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1ec4:	60cb      	str	r3, [r1, #12]
    1ec6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1eca:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1ecc:	e7fd      	b.n	1eca <sys_arch_reboot+0x16>
    1ece:	bf00      	nop
    1ed0:	e000ed00 	.word	0xe000ed00
    1ed4:	05fa0004 	.word	0x05fa0004

00001ed8 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    1ed8:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    1eda:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1edc:	4a05      	ldr	r2, [pc, #20]	; (1ef4 <z_arm_clear_arm_mpu_config+0x1c>)
    1ede:	6811      	ldr	r1, [r2, #0]
	int num_regions =
    1ee0:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
    1ee4:	428b      	cmp	r3, r1
    1ee6:	d100      	bne.n	1eea <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    1ee8:	4770      	bx	lr
  mpu->RNR = rnr;
    1eea:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
    1eec:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    1eee:	3301      	adds	r3, #1
    1ef0:	e7f8      	b.n	1ee4 <z_arm_clear_arm_mpu_config+0xc>
    1ef2:	bf00      	nop
    1ef4:	e000ed90 	.word	0xe000ed90

00001ef8 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1ef8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1efa:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1efc:	2400      	movs	r4, #0
    1efe:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1f02:	f7ff ffe9 	bl	1ed8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1f06:	4a0e      	ldr	r2, [pc, #56]	; (1f40 <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
    1f08:	4623      	mov	r3, r4
    1f0a:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
    1f0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    1f10:	f103 0020 	add.w	r0, r3, #32
    1f14:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1f16:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    1f18:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1f1c:	d1f8      	bne.n	1f10 <z_arm_init_arch_hw_at_boot+0x18>
    1f1e:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1f24:	f103 0260 	add.w	r2, r3, #96	; 0x60
    1f28:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1f2a:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1f2c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1f30:	d1f8      	bne.n	1f24 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    1f32:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1f34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f38:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1f3c:	bd10      	pop	{r4, pc}
    1f3e:	bf00      	nop
    1f40:	e000e100 	.word	0xe000e100

00001f44 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1f44:	4b06      	ldr	r3, [pc, #24]	; (1f60 <z_impl_k_thread_abort+0x1c>)
    1f46:	689b      	ldr	r3, [r3, #8]
    1f48:	4283      	cmp	r3, r0
    1f4a:	d107      	bne.n	1f5c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1f4c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1f50:	b123      	cbz	r3, 1f5c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1f52:	4a04      	ldr	r2, [pc, #16]	; (1f64 <z_impl_k_thread_abort+0x20>)
    1f54:	6853      	ldr	r3, [r2, #4]
    1f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1f5a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    1f5c:	f002 bfe6 	b.w	4f2c <z_thread_abort>
    1f60:	200009f4 	.word	0x200009f4
    1f64:	e000ed00 	.word	0xe000ed00

00001f68 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    1f68:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    1f6a:	4b0d      	ldr	r3, [pc, #52]	; (1fa0 <tz_nonsecure_state_setup+0x38>)
    1f6c:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    1f6e:	6803      	ldr	r3, [r0, #0]
    1f70:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    1f74:	6843      	ldr	r3, [r0, #4]
    1f76:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    1f7a:	7b02      	ldrb	r2, [r0, #12]
    1f7c:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    1f80:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    1f84:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    1f88:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    1f8a:	bf48      	it	mi
    1f8c:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    1f90:	b109      	cbz	r1, 1f96 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    1f92:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    1f96:	f383 8894 	msr	CONTROL_NS, r3
  __ASM volatile ("isb 0xF":::"memory");
    1f9a:	f3bf 8f6f 	isb	sy
}
    1f9e:	4770      	bx	lr
    1fa0:	e002ed00 	.word	0xe002ed00

00001fa4 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1fa4:	4a08      	ldr	r2, [pc, #32]	; (1fc8 <tz_nbanked_exception_target_state_set+0x24>)
    1fa6:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    1fa8:	b148      	cbz	r0, 1fbe <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    1faa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1fae:	041b      	lsls	r3, r3, #16
    1fb0:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1fb2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    1fba:	60d3      	str	r3, [r2, #12]
}
    1fbc:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1fbe:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    1fc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1fc4:	e7f5      	b.n	1fb2 <tz_nbanked_exception_target_state_set+0xe>
    1fc6:	bf00      	nop
    1fc8:	e000ed00 	.word	0xe000ed00

00001fcc <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1fcc:	4a08      	ldr	r2, [pc, #32]	; (1ff0 <tz_nonsecure_exception_prio_config+0x24>)
    1fce:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    1fd0:	b140      	cbz	r0, 1fe4 <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1fd2:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    1fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    1fe0:	60d3      	str	r3, [r2, #12]
}
    1fe2:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    1fe4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1fe8:	041b      	lsls	r3, r3, #16
    1fea:	0c1b      	lsrs	r3, r3, #16
    1fec:	e7f4      	b.n	1fd8 <tz_nonsecure_exception_prio_config+0xc>
    1fee:	bf00      	nop
    1ff0:	e000ed00 	.word	0xe000ed00

00001ff4 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1ff4:	4a08      	ldr	r2, [pc, #32]	; (2018 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x18>)
    1ff6:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    1ff8:	b140      	cbz	r0, 200c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1ffa:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    1ffc:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    2000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    2004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    2008:	60d3      	str	r3, [r2, #12]
}
    200a:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    200c:	f023 0308 	bic.w	r3, r3, #8
    2010:	041b      	lsls	r3, r3, #16
    2012:	0c1b      	lsrs	r3, r3, #16
    2014:	e7f4      	b.n	2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>
    2016:	bf00      	nop
    2018:	e000ed00 	.word	0xe000ed00

0000201c <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    201c:	4a03      	ldr	r2, [pc, #12]	; (202c <tz_nonsecure_fpu_access_enable+0x10>)
    201e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2022:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2026:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    202a:	4770      	bx	lr
    202c:	e000ed00 	.word	0xe000ed00

00002030 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    2030:	4b08      	ldr	r3, [pc, #32]	; (2054 <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    2032:	681a      	ldr	r2, [r3, #0]
    2034:	b118      	cbz	r0, 203e <tz_sau_configure+0xe>
    2036:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    203a:	601a      	str	r2, [r3, #0]
		}
	}
}
    203c:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    203e:	f022 0201 	bic.w	r2, r2, #1
    2042:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    2044:	681a      	ldr	r2, [r3, #0]
		if (allns) {
    2046:	b111      	cbz	r1, 204e <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    2048:	f042 0202 	orr.w	r2, r2, #2
    204c:	e7f5      	b.n	203a <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    204e:	f022 0202 	bic.w	r2, r2, #2
    2052:	e7f2      	b.n	203a <tz_sau_configure+0xa>
    2054:	e000edd0 	.word	0xe000edd0

00002058 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    2058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    205a:	4c09      	ldr	r4, [pc, #36]	; (2080 <z_arm_configure_static_mpu_regions+0x28>)
    205c:	4a09      	ldr	r2, [pc, #36]	; (2084 <z_arm_configure_static_mpu_regions+0x2c>)
    205e:	4623      	mov	r3, r4
    2060:	2101      	movs	r1, #1
    2062:	4809      	ldr	r0, [pc, #36]	; (2088 <z_arm_configure_static_mpu_regions+0x30>)
    2064:	f000 f91a 	bl	229c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    2068:	2300      	movs	r3, #0
    206a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    206c:	4b07      	ldr	r3, [pc, #28]	; (208c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    206e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    2070:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2072:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    2074:	9301      	str	r3, [sp, #4]
    2076:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    2078:	f000 f92c 	bl	22d4 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    207c:	b004      	add	sp, #16
    207e:	bd10      	pop	{r4, pc}
    2080:	20008000 	.word	0x20008000
    2084:	20000000 	.word	0x20000000
    2088:	00008ab8 	.word	0x00008ab8
    208c:	20000158 	.word	0x20000158

00002090 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    2090:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2092:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    2094:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2096:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    209a:	f004 031f 	and.w	r3, r4, #31
    209e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    20a0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    20a2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    20a4:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    20a8:	4904      	ldr	r1, [pc, #16]	; (20bc <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    20aa:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    20ae:	f043 0301 	orr.w	r3, r3, #1
    20b2:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    20b4:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    20b6:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    20b8:	bd10      	pop	{r4, pc}
    20ba:	bf00      	nop
    20bc:	e000ed90 	.word	0xe000ed90

000020c0 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    20c0:	b530      	push	{r4, r5, lr}
	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
#if defined(CONFIG_CPU_CORTEX_R)
	region_conf.size = size_to_mpu_rasr_size(new_region->size);
#endif
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    20c2:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    20c4:	680c      	ldr	r4, [r1, #0]
{
    20c6:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    20c8:	890a      	ldrh	r2, [r1, #8]
    20ca:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    20cc:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    20ce:	3b01      	subs	r3, #1
    20d0:	f024 041f 	bic.w	r4, r4, #31
    20d4:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    20d6:	f002 021f 	and.w	r2, r2, #31
    20da:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    20de:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    20e2:	280f      	cmp	r0, #15
    20e4:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    20e6:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    20ea:	9303      	str	r3, [sp, #12]
    20ec:	d909      	bls.n	2102 <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    20ee:	4602      	mov	r2, r0
    20f0:	2145      	movs	r1, #69	; 0x45
    20f2:	4806      	ldr	r0, [pc, #24]	; (210c <mpu_configure_region+0x4c>)
    20f4:	f006 f8ac 	bl	8250 <z_log_minimal_printk>
    20f8:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    20fc:	4620      	mov	r0, r4
    20fe:	b005      	add	sp, #20
    2100:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    2102:	4669      	mov	r1, sp
    2104:	f7ff ffc4 	bl	2090 <region_init>
	return region_allocate_and_init(index,
    2108:	e7f8      	b.n	20fc <mpu_configure_region+0x3c>
    210a:	bf00      	nop
    210c:	00009719 	.word	0x00009719

00002110 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2114:	4689      	mov	r9, r1
    2116:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2118:	4606      	mov	r6, r0
    211a:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    211e:	4d52      	ldr	r5, [pc, #328]	; (2268 <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    2120:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    2122:	45c8      	cmp	r8, r9
    2124:	da23      	bge.n	216e <mpu_configure_regions_and_partition.constprop.0+0x5e>
		if (regions[i].size == 0U) {
    2126:	6877      	ldr	r7, [r6, #4]
    2128:	2f00      	cmp	r7, #0
    212a:	d042      	beq.n	21b2 <mpu_configure_regions_and_partition.constprop.0+0xa2>
		&&
    212c:	2f1f      	cmp	r7, #31
    212e:	d917      	bls.n	2160 <mpu_configure_regions_and_partition.constprop.0+0x50>
		&&
    2130:	06fb      	lsls	r3, r7, #27
    2132:	d115      	bne.n	2160 <mpu_configure_regions_and_partition.constprop.0+0x50>
		((part->start &
    2134:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    2138:	f01a 0f1f 	tst.w	sl, #31
    213c:	d110      	bne.n	2160 <mpu_configure_regions_and_partition.constprop.0+0x50>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    213e:	4650      	mov	r0, sl
    2140:	f006 f8de 	bl	8300 <arm_cmse_mpu_region_get>
    2144:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2146:	eb07 000a 	add.w	r0, r7, sl
    214a:	3801      	subs	r0, #1
    214c:	f006 f8d8 	bl	8300 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2150:	4583      	cmp	fp, r0
    2152:	d010      	beq.n	2176 <mpu_configure_regions_and_partition.constprop.0+0x66>
	return -EINVAL;
    2154:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    2158:	465a      	mov	r2, fp
    215a:	2145      	movs	r1, #69	; 0x45
    215c:	4843      	ldr	r0, [pc, #268]	; (226c <mpu_configure_regions_and_partition.constprop.0+0x15c>)
    215e:	e002      	b.n	2166 <mpu_configure_regions_and_partition.constprop.0+0x56>
			LOG_ERR("Partition %u: sanity check failed.", i);
    2160:	4642      	mov	r2, r8
    2162:	2145      	movs	r1, #69	; 0x45
    2164:	4842      	ldr	r0, [pc, #264]	; (2270 <mpu_configure_regions_and_partition.constprop.0+0x160>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2166:	f006 f873 	bl	8250 <z_log_minimal_printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    216a:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    216e:	4620      	mov	r0, r4
    2170:	b005      	add	sp, #20
    2172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    2176:	f11b 0f16 	cmn.w	fp, #22
    217a:	d0ed      	beq.n	2158 <mpu_configure_regions_and_partition.constprop.0+0x48>
			(u_reg_index > (reg_index - 1))) {
    217c:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    217e:	455b      	cmp	r3, fp
    2180:	dbea      	blt.n	2158 <mpu_configure_regions_and_partition.constprop.0+0x48>
	MPU->RNR = index;
    2182:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2186:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    2188:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    218c:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    218e:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    2192:	e9d6 3200 	ldrd	r3, r2, [r6]
    2196:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    2198:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    219a:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    219e:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    21a2:	d11c      	bne.n	21de <mpu_configure_regions_and_partition.constprop.0+0xce>
    21a4:	4557      	cmp	r7, sl
    21a6:	d108      	bne.n	21ba <mpu_configure_regions_and_partition.constprop.0+0xaa>
			mpu_configure_region(u_reg_index, &regions[i]);
    21a8:	4631      	mov	r1, r6
    21aa:	fa5f f08b 	uxtb.w	r0, fp
    21ae:	f7ff ff87 	bl	20c0 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    21b2:	f108 0801 	add.w	r8, r8, #1
    21b6:	360c      	adds	r6, #12
    21b8:	e7b3      	b.n	2122 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    21ba:	4631      	mov	r1, r6
	MPU->RNR = index;
    21bc:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    21c0:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    21c2:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    21c6:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    21ca:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    21cc:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    21ce:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    21d0:	f7ff ff76 	bl	20c0 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    21d4:	f110 0f16 	cmn.w	r0, #22
    21d8:	d0c7      	beq.n	216a <mpu_configure_regions_and_partition.constprop.0+0x5a>
			reg_index++;
    21da:	1c44      	adds	r4, r0, #1
    21dc:	e7e9      	b.n	21b2 <mpu_configure_regions_and_partition.constprop.0+0xa2>
		} else if (reg_last == u_reg_last) {
    21de:	3b01      	subs	r3, #1
    21e0:	4557      	cmp	r7, sl
    21e2:	b2e0      	uxtb	r0, r4
    21e4:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    21e8:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
    21ec:	d106      	bne.n	21fc <mpu_configure_regions_and_partition.constprop.0+0xec>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    21ee:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    21f0:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    21f2:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    21f6:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    21f8:	612b      	str	r3, [r5, #16]
			reg_index =
    21fa:	e7e9      	b.n	21d0 <mpu_configure_regions_and_partition.constprop.0+0xc0>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    21fc:	6929      	ldr	r1, [r5, #16]
    21fe:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    2202:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2204:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    2206:	4631      	mov	r1, r6
    2208:	f7ff ff5a 	bl	20c0 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    220c:	f110 0f16 	cmn.w	r0, #22
    2210:	d0ab      	beq.n	216a <mpu_configure_regions_and_partition.constprop.0+0x5a>
	MPU->RNR = index;
    2212:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    2216:	68ea      	ldr	r2, [r5, #12]
    2218:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    221c:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
    221e:	f362 0304 	bfi	r3, r2, #0, #5
    2222:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2226:	692b      	ldr	r3, [r5, #16]
    2228:	f89d 2008 	ldrb.w	r2, [sp, #8]
    222c:	085b      	lsrs	r3, r3, #1
    222e:	f363 1247 	bfi	r2, r3, #5, #3
    2232:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    2236:	e9d6 3200 	ldrd	r3, r2, [r6]
    223a:	4413      	add	r3, r2
    223c:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    223e:	f023 031f 	bic.w	r3, r3, #31
    2242:	443b      	add	r3, r7
			reg_index++;
    2244:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    2246:	eba3 0a0a 	sub.w	sl, r3, sl
    224a:	b2e0      	uxtb	r0, r4
    224c:	f02a 031f 	bic.w	r3, sl, #31
	if (index > (get_num_regions() - 1U)) {
    2250:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    2252:	9303      	str	r3, [sp, #12]
    2254:	d903      	bls.n	225e <mpu_configure_regions_and_partition.constprop.0+0x14e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2256:	4602      	mov	r2, r0
    2258:	2145      	movs	r1, #69	; 0x45
    225a:	4806      	ldr	r0, [pc, #24]	; (2274 <mpu_configure_regions_and_partition.constprop.0+0x164>)
    225c:	e783      	b.n	2166 <mpu_configure_regions_and_partition.constprop.0+0x56>
	region_init(index, region_conf);
    225e:	4669      	mov	r1, sp
    2260:	f7ff ff16 	bl	2090 <region_init>
    2264:	e7b9      	b.n	21da <mpu_configure_regions_and_partition.constprop.0+0xca>
    2266:	bf00      	nop
    2268:	e000ed90 	.word	0xe000ed90
    226c:	0000976c 	.word	0x0000976c
    2270:	00009744 	.word	0x00009744
    2274:	00009719 	.word	0x00009719

00002278 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2278:	2205      	movs	r2, #5
    227a:	4b03      	ldr	r3, [pc, #12]	; (2288 <arm_core_mpu_enable+0x10>)
    227c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    227e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2282:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2286:	4770      	bx	lr
    2288:	e000ed90 	.word	0xe000ed90

0000228c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    228c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2290:	2200      	movs	r2, #0
    2292:	4b01      	ldr	r3, [pc, #4]	; (2298 <arm_core_mpu_disable+0xc>)
    2294:	605a      	str	r2, [r3, #4]
}
    2296:	4770      	bx	lr
    2298:	e000ed90 	.word	0xe000ed90

0000229c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    229c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    229e:	4c0a      	ldr	r4, [pc, #40]	; (22c8 <arm_core_mpu_configure_static_mpu_regions+0x2c>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    22a0:	7822      	ldrb	r2, [r4, #0]
    22a2:	f7ff ff35 	bl	2110 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    22a6:	7020      	strb	r0, [r4, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    22a8:	3016      	adds	r0, #22
    22aa:	d10c      	bne.n	22c6 <arm_core_mpu_configure_static_mpu_regions+0x2a>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    22ac:	4907      	ldr	r1, [pc, #28]	; (22cc <arm_core_mpu_configure_static_mpu_regions+0x30>)
    22ae:	4808      	ldr	r0, [pc, #32]	; (22d0 <arm_core_mpu_configure_static_mpu_regions+0x34>)
    22b0:	f240 1211 	movw	r2, #273	; 0x111
    22b4:	f005 ff2e 	bl	8114 <printk>
			regions_num);
	}
}
    22b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    22bc:	f240 1111 	movw	r1, #273	; 0x111
    22c0:	4802      	ldr	r0, [pc, #8]	; (22cc <arm_core_mpu_configure_static_mpu_regions+0x30>)
    22c2:	f005 bfb2 	b.w	822a <assert_post_action>
}
    22c6:	bd10      	pop	{r4, pc}
    22c8:	20001414 	.word	0x20001414
    22cc:	00009794 	.word	0x00009794
    22d0:	00008d71 	.word	0x00008d71

000022d4 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    22d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22d8:	4d2d      	ldr	r5, [pc, #180]	; (2390 <arm_core_mpu_mark_areas_for_dynamic_regions+0xbc>)
    22da:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    22dc:	4606      	mov	r6, r0
    22de:	f04f 0800 	mov.w	r8, #0
    22e2:	46ab      	mov	fp, r5
	MPU->RNR = index;
    22e4:	4f2b      	ldr	r7, [pc, #172]	; (2394 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    22e6:	45d0      	cmp	r8, sl
    22e8:	db02      	blt.n	22f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    22ea:	b003      	add	sp, #12
    22ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
    22f0:	f8d6 9004 	ldr.w	r9, [r6, #4]
    22f4:	f1b9 0f00 	cmp.w	r9, #0
    22f8:	d044      	beq.n	2384 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    22fa:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    22fc:	4608      	mov	r0, r1
    22fe:	9101      	str	r1, [sp, #4]
    2300:	f005 fffe 	bl	8300 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2304:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    2306:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    2308:	eb09 0001 	add.w	r0, r9, r1
    230c:	3801      	subs	r0, #1
    230e:	f005 fff7 	bl	8300 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    2312:	4284      	cmp	r4, r0
    2314:	f04f 0214 	mov.w	r2, #20
    2318:	4b1f      	ldr	r3, [pc, #124]	; (2398 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
    231a:	d013      	beq.n	2344 <arm_core_mpu_mark_areas_for_dynamic_regions+0x70>
		dyn_reg_info[i].index =
    231c:	f06f 0315 	mvn.w	r3, #21
    2320:	fb02 f808 	mul.w	r8, r2, r8
    2324:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    2328:	f240 1221 	movw	r2, #289	; 0x121
    232c:	491b      	ldr	r1, [pc, #108]	; (239c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
    232e:	481c      	ldr	r0, [pc, #112]	; (23a0 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
    2330:	f005 fef0 	bl	8114 <printk>
    2334:	f240 1121 	movw	r1, #289	; 0x121
    2338:	4818      	ldr	r0, [pc, #96]	; (239c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
}
    233a:	b003      	add	sp, #12
    233c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    2340:	f005 bf73 	b.w	822a <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    2344:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    2348:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    234a:	d0ed      	beq.n	2328 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    234c:	7819      	ldrb	r1, [r3, #0]
    234e:	42a1      	cmp	r1, r4
    2350:	ddea      	ble.n	2328 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
    2352:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    2356:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    2358:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    235a:	68fc      	ldr	r4, [r7, #12]
    235c:	f100 0108 	add.w	r1, r0, #8
    2360:	7b00      	ldrb	r0, [r0, #12]
    2362:	f364 0004 	bfi	r0, r4, #0, #5
    2366:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    2368:	6938      	ldr	r0, [r7, #16]
    236a:	790c      	ldrb	r4, [r1, #4]
    236c:	0840      	lsrs	r0, r0, #1
    236e:	f360 1447 	bfi	r4, r0, #5, #3
    2372:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    2374:	68f9      	ldr	r1, [r7, #12]
    2376:	f021 011f 	bic.w	r1, r1, #31
    237a:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    237c:	6939      	ldr	r1, [r7, #16]
    237e:	f021 011f 	bic.w	r1, r1, #31
    2382:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    2384:	f108 0801 	add.w	r8, r8, #1
    2388:	3514      	adds	r5, #20
    238a:	360c      	adds	r6, #12
    238c:	e7ab      	b.n	22e6 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    238e:	bf00      	nop
    2390:	2000095c 	.word	0x2000095c
    2394:	e000ed90 	.word	0xe000ed90
    2398:	20001414 	.word	0x20001414
    239c:	00009794 	.word	0x00009794
    23a0:	00008d71 	.word	0x00008d71

000023a4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    23a4:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    23a6:	4d1b      	ldr	r5, [pc, #108]	; (2414 <z_arm_mpu_init+0x70>)
    23a8:	682e      	ldr	r6, [r5, #0]
    23aa:	2e10      	cmp	r6, #16
    23ac:	d90d      	bls.n	23ca <z_arm_mpu_init+0x26>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    23ae:	f44f 72a4 	mov.w	r2, #328	; 0x148
    23b2:	4919      	ldr	r1, [pc, #100]	; (2418 <z_arm_mpu_init+0x74>)
    23b4:	4819      	ldr	r0, [pc, #100]	; (241c <z_arm_mpu_init+0x78>)
    23b6:	f005 fead 	bl	8114 <printk>
    23ba:	4817      	ldr	r0, [pc, #92]	; (2418 <z_arm_mpu_init+0x74>)
    23bc:	f44f 71a4 	mov.w	r1, #328	; 0x148
    23c0:	f005 ff33 	bl	822a <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    23c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    23c8:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
    23ca:	f7ff ff5f 	bl	228c <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    23ce:	2000      	movs	r0, #0
	MPU->MAIR0 =
    23d0:	4c13      	ldr	r4, [pc, #76]	; (2420 <z_arm_mpu_init+0x7c>)
    23d2:	4a14      	ldr	r2, [pc, #80]	; (2424 <z_arm_mpu_init+0x80>)
    23d4:	6322      	str	r2, [r4, #48]	; 0x30
    23d6:	4286      	cmp	r6, r0
    23d8:	d115      	bne.n	2406 <z_arm_mpu_init+0x62>
	static_regions_num = mpu_config.num_regions;
    23da:	4b13      	ldr	r3, [pc, #76]	; (2428 <z_arm_mpu_init+0x84>)
    23dc:	701e      	strb	r6, [r3, #0]
	arm_core_mpu_enable();
    23de:	f7ff ff4b 	bl	2278 <arm_core_mpu_enable>
	__ASSERT(
    23e2:	6823      	ldr	r3, [r4, #0]
    23e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    23e8:	2b10      	cmp	r3, #16
    23ea:	d00a      	beq.n	2402 <z_arm_mpu_init+0x5e>
    23ec:	490a      	ldr	r1, [pc, #40]	; (2418 <z_arm_mpu_init+0x74>)
    23ee:	480b      	ldr	r0, [pc, #44]	; (241c <z_arm_mpu_init+0x78>)
    23f0:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
    23f4:	f005 fe8e 	bl	8114 <printk>
    23f8:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    23fc:	4806      	ldr	r0, [pc, #24]	; (2418 <z_arm_mpu_init+0x74>)
    23fe:	f005 ff14 	bl	822a <assert_post_action>
	return 0;
    2402:	2000      	movs	r0, #0
    2404:	e7e0      	b.n	23c8 <z_arm_mpu_init+0x24>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    2406:	6869      	ldr	r1, [r5, #4]
    2408:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    240c:	f7ff fe40 	bl	2090 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2410:	3001      	adds	r0, #1
    2412:	e7e0      	b.n	23d6 <z_arm_mpu_init+0x32>
    2414:	00008ac4 	.word	0x00008ac4
    2418:	00009794 	.word	0x00009794
    241c:	00008d71 	.word	0x00008d71
    2420:	e000ed90 	.word	0xe000ed90
    2424:	0044ffaa 	.word	0x0044ffaa
    2428:	20001414 	.word	0x20001414

0000242c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    242c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2430:	4c0e      	ldr	r4, [pc, #56]	; (246c <onoff_start+0x40>)
{
    2432:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
    2434:	1b05      	subs	r5, r0, r4
    2436:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    243a:	250c      	movs	r5, #12
    243c:	435d      	muls	r5, r3
    243e:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
    2442:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    2444:	4420      	add	r0, r4
    2446:	2140      	movs	r1, #64	; 0x40
    2448:	f005 ffb3 	bl	83b2 <set_starting_state>
	if (err < 0) {
    244c:	1e01      	subs	r1, r0, #0
    244e:	db08      	blt.n	2462 <onoff_start+0x36>
	subdata->cb = cb;
    2450:	4b07      	ldr	r3, [pc, #28]	; (2470 <onoff_start+0x44>)
    2452:	442c      	add	r4, r5
	subdata->user_data = user_data;
    2454:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    2458:	4b06      	ldr	r3, [pc, #24]	; (2474 <onoff_start+0x48>)
    245a:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    245c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    2460:	4718      	bx	r3
		notify(mgr, err);
    2462:	4638      	mov	r0, r7
    2464:	4633      	mov	r3, r6
}
    2466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    246a:	4718      	bx	r3
    246c:	20000970 	.word	0x20000970
    2470:	00008415 	.word	0x00008415
    2474:	00008b04 	.word	0x00008b04

00002478 <get_status>:
{
    2478:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    247a:	b2cc      	uxtb	r4, r1
    247c:	2c01      	cmp	r4, #1
{
    247e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2480:	d908      	bls.n	2494 <get_status+0x1c>
    2482:	4908      	ldr	r1, [pc, #32]	; (24a4 <get_status+0x2c>)
    2484:	4808      	ldr	r0, [pc, #32]	; (24a8 <get_status+0x30>)
    2486:	2279      	movs	r2, #121	; 0x79
    2488:	f005 fe44 	bl	8114 <printk>
    248c:	2179      	movs	r1, #121	; 0x79
    248e:	4805      	ldr	r0, [pc, #20]	; (24a4 <get_status+0x2c>)
    2490:	f005 fecb 	bl	822a <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    2494:	210c      	movs	r1, #12
    2496:	692b      	ldr	r3, [r5, #16]
    2498:	fb04 3401 	mla	r4, r4, r1, r3
    249c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    249e:	f000 0007 	and.w	r0, r0, #7
    24a2:	bd38      	pop	{r3, r4, r5, pc}
    24a4:	000097da 	.word	0x000097da
    24a8:	00008d71 	.word	0x00008d71

000024ac <stop>:
{
    24ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24ae:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    24b0:	2c01      	cmp	r4, #1
{
    24b2:	4605      	mov	r5, r0
    24b4:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    24b6:	6907      	ldr	r7, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    24b8:	d90a      	bls.n	24d0 <stop+0x24>
    24ba:	4918      	ldr	r1, [pc, #96]	; (251c <stop+0x70>)
    24bc:	4818      	ldr	r0, [pc, #96]	; (2520 <stop+0x74>)
    24be:	f240 124d 	movw	r2, #333	; 0x14d
    24c2:	f005 fe27 	bl	8114 <printk>
    24c6:	f240 114d 	movw	r1, #333	; 0x14d
    24ca:	4814      	ldr	r0, [pc, #80]	; (251c <stop+0x70>)
    24cc:	f005 fead 	bl	822a <assert_post_action>
	__asm__ volatile(
    24d0:	f04f 0320 	mov.w	r3, #32
    24d4:	f3ef 8211 	mrs	r2, BASEPRI
    24d8:	f383 8812 	msr	BASEPRI_MAX, r3
    24dc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    24e0:	230c      	movs	r3, #12
    24e2:	fb03 7104 	mla	r1, r3, r4, r7
    24e6:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    24e8:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    24ec:	d001      	beq.n	24f2 <stop+0x46>
    24ee:	428e      	cmp	r6, r1
    24f0:	d111      	bne.n	2516 <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    24f2:	2101      	movs	r1, #1
	int err = 0;
    24f4:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
    24f6:	fb03 7304 	mla	r3, r3, r4, r7
    24fa:	6499      	str	r1, [r3, #72]	; 0x48
	__asm__ volatile(
    24fc:	f382 8811 	msr	BASEPRI, r2
    2500:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    2504:	b930      	cbnz	r0, 2514 <stop+0x68>
	get_sub_config(dev, type)->stop();
    2506:	230c      	movs	r3, #12
    2508:	6869      	ldr	r1, [r5, #4]
    250a:	fb03 1404 	mla	r4, r3, r4, r1
    250e:	6863      	ldr	r3, [r4, #4]
    2510:	4798      	blx	r3
	return 0;
    2512:	2000      	movs	r0, #0
}
    2514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    2516:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    251a:	e7ef      	b.n	24fc <stop+0x50>
    251c:	000097da 	.word	0x000097da
    2520:	00008d71 	.word	0x00008d71

00002524 <onoff_stop>:
{
    2524:	b570      	push	{r4, r5, r6, lr}
    2526:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    2528:	4906      	ldr	r1, [pc, #24]	; (2544 <onoff_stop+0x20>)
{
    252a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    252c:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    252e:	1149      	asrs	r1, r1, #5
    2530:	2240      	movs	r2, #64	; 0x40
    2532:	4805      	ldr	r0, [pc, #20]	; (2548 <onoff_stop+0x24>)
    2534:	f7ff ffba 	bl	24ac <stop>
	notify(mgr, res);
    2538:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    253a:	4601      	mov	r1, r0
	notify(mgr, res);
    253c:	4620      	mov	r0, r4
}
    253e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2542:	4718      	bx	r3
    2544:	20000970 	.word	0x20000970
    2548:	000086ac 	.word	0x000086ac

0000254c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    254c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    254e:	2200      	movs	r2, #0
    2550:	2101      	movs	r1, #1
{
    2552:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2554:	2005      	movs	r0, #5
    2556:	f7ff f8d9 	bl	170c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    255a:	2005      	movs	r0, #5
    255c:	f7ff f8b8 	bl	16d0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2560:	480f      	ldr	r0, [pc, #60]	; (25a0 <clk_init+0x54>)
    2562:	f000 fda5 	bl	30b0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2566:	4b0f      	ldr	r3, [pc, #60]	; (25a4 <clk_init+0x58>)
    2568:	4298      	cmp	r0, r3
    256a:	d115      	bne.n	2598 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    256c:	f000 fdc0 	bl	30f0 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    2570:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2572:	490d      	ldr	r1, [pc, #52]	; (25a8 <clk_init+0x5c>)
    2574:	4630      	mov	r0, r6
    2576:	f005 fdda 	bl	812e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    257a:	2800      	cmp	r0, #0
    257c:	db0b      	blt.n	2596 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    257e:	2501      	movs	r5, #1
    2580:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    2582:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2584:	4908      	ldr	r1, [pc, #32]	; (25a8 <clk_init+0x5c>)
    2586:	f104 0020 	add.w	r0, r4, #32
    258a:	f005 fdd0 	bl	812e <onoff_manager_init>
		if (err < 0) {
    258e:	2800      	cmp	r0, #0
    2590:	db01      	blt.n	2596 <clk_init+0x4a>
	}

	return 0;
    2592:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2594:	6565      	str	r5, [r4, #84]	; 0x54
}
    2596:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2598:	f06f 0004 	mvn.w	r0, #4
    259c:	e7fb      	b.n	2596 <clk_init+0x4a>
    259e:	bf00      	nop
    25a0:	000025e1 	.word	0x000025e1
    25a4:	0bad0000 	.word	0x0bad0000
    25a8:	00008b1c 	.word	0x00008b1c

000025ac <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    25ac:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    25ae:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    25b0:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    25b2:	434b      	muls	r3, r1
    25b4:	4808      	ldr	r0, [pc, #32]	; (25d8 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    25b6:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    25b8:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    25ba:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
    25bc:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    25c0:	4418      	add	r0, r3
	sub_data->cb = NULL;
    25c2:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    25c4:	f005 ff13 	bl	83ee <set_on_state>
	if (callback) {
    25c8:	b12d      	cbz	r5, 25d6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    25ca:	4632      	mov	r2, r6
    25cc:	462b      	mov	r3, r5
}
    25ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    25d2:	4802      	ldr	r0, [pc, #8]	; (25dc <clkstarted_handle.constprop.0+0x30>)
    25d4:	4718      	bx	r3
}
    25d6:	bd70      	pop	{r4, r5, r6, pc}
    25d8:	20000970 	.word	0x20000970
    25dc:	000086ac 	.word	0x000086ac

000025e0 <clock_event_handler>:
	switch (event) {
    25e0:	2801      	cmp	r0, #1
{
    25e2:	b508      	push	{r3, lr}
	switch (event) {
    25e4:	d006      	beq.n	25f4 <clock_event_handler+0x14>
    25e6:	2803      	cmp	r0, #3
    25e8:	d008      	beq.n	25fc <clock_event_handler+0x1c>
    25ea:	b9a0      	cbnz	r0, 2616 <clock_event_handler+0x36>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    25ec:	4b0f      	ldr	r3, [pc, #60]	; (262c <clock_event_handler+0x4c>)
    25ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    25f0:	075b      	lsls	r3, r3, #29
    25f2:	d119      	bne.n	2628 <clock_event_handler+0x48>
}
    25f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    25f8:	f7ff bfd8 	b.w	25ac <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    25fc:	490c      	ldr	r1, [pc, #48]	; (2630 <clock_event_handler+0x50>)
    25fe:	f240 225e 	movw	r2, #606	; 0x25e
    2602:	480c      	ldr	r0, [pc, #48]	; (2634 <clock_event_handler+0x54>)
    2604:	f005 fd86 	bl	8114 <printk>
    2608:	f240 215e 	movw	r1, #606	; 0x25e
}
    260c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    2610:	4807      	ldr	r0, [pc, #28]	; (2630 <clock_event_handler+0x50>)
    2612:	f005 be0a 	b.w	822a <assert_post_action>
    2616:	4906      	ldr	r1, [pc, #24]	; (2630 <clock_event_handler+0x50>)
    2618:	f240 2262 	movw	r2, #610	; 0x262
    261c:	4805      	ldr	r0, [pc, #20]	; (2634 <clock_event_handler+0x54>)
    261e:	f005 fd79 	bl	8114 <printk>
    2622:	f240 2162 	movw	r1, #610	; 0x262
    2626:	e7f1      	b.n	260c <clock_event_handler+0x2c>
}
    2628:	bd08      	pop	{r3, pc}
    262a:	bf00      	nop
    262c:	20000970 	.word	0x20000970
    2630:	000097da 	.word	0x000097da
    2634:	00008d71 	.word	0x00008d71

00002638 <generic_hfclk_start>:
{
    2638:	b508      	push	{r3, lr}
	__asm__ volatile(
    263a:	f04f 0320 	mov.w	r3, #32
    263e:	f3ef 8111 	mrs	r1, BASEPRI
    2642:	f383 8812 	msr	BASEPRI_MAX, r3
    2646:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    264a:	4a12      	ldr	r2, [pc, #72]	; (2694 <generic_hfclk_start+0x5c>)
    264c:	6813      	ldr	r3, [r2, #0]
    264e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2652:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2656:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2658:	d00c      	beq.n	2674 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    265a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    265e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2662:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2666:	f013 0301 	ands.w	r3, r3, #1
    266a:	d003      	beq.n	2674 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    266c:	480a      	ldr	r0, [pc, #40]	; (2698 <generic_hfclk_start+0x60>)
    266e:	f005 febe 	bl	83ee <set_on_state>
			already_started = true;
    2672:	2301      	movs	r3, #1
	__asm__ volatile(
    2674:	f381 8811 	msr	BASEPRI, r1
    2678:	f3bf 8f6f 	isb	sy
	if (already_started) {
    267c:	b123      	cbz	r3, 2688 <generic_hfclk_start+0x50>
}
    267e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2682:	2000      	movs	r0, #0
    2684:	f7ff bf92 	b.w	25ac <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2688:	2001      	movs	r0, #1
}
    268a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    268e:	f000 bd4d 	b.w	312c <nrfx_clock_start>
    2692:	bf00      	nop
    2694:	200009c8 	.word	0x200009c8
    2698:	200009b8 	.word	0x200009b8

0000269c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    269c:	4b07      	ldr	r3, [pc, #28]	; (26bc <generic_hfclk_stop+0x20>)
    269e:	e8d3 2fef 	ldaex	r2, [r3]
    26a2:	f022 0102 	bic.w	r1, r2, #2
    26a6:	e8c3 1fe0 	stlex	r0, r1, [r3]
    26aa:	2800      	cmp	r0, #0
    26ac:	d1f7      	bne.n	269e <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    26ae:	07d3      	lsls	r3, r2, #31
    26b0:	d402      	bmi.n	26b8 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    26b2:	2001      	movs	r0, #1
    26b4:	f000 bd8a 	b.w	31cc <nrfx_clock_stop>
}
    26b8:	4770      	bx	lr
    26ba:	bf00      	nop
    26bc:	200009c8 	.word	0x200009c8

000026c0 <api_blocking_start>:
{
    26c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    26c2:	2200      	movs	r2, #0
    26c4:	2301      	movs	r3, #1
    26c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    26ca:	466b      	mov	r3, sp
    26cc:	4a08      	ldr	r2, [pc, #32]	; (26f0 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    26ce:	f8cd d000 	str.w	sp, [sp]
    26d2:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    26d6:	f005 feaf 	bl	8438 <api_start>
	if (err < 0) {
    26da:	2800      	cmp	r0, #0
    26dc:	db05      	blt.n	26ea <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    26de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    26e2:	2300      	movs	r3, #0
    26e4:	4668      	mov	r0, sp
    26e6:	f001 fe8d 	bl	4404 <z_impl_k_sem_take>
}
    26ea:	b005      	add	sp, #20
    26ec:	f85d fb04 	ldr.w	pc, [sp], #4
    26f0:	00008433 	.word	0x00008433

000026f4 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    26f4:	b570      	push	{r4, r5, r6, lr}
    26f6:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    26f8:	460c      	mov	r4, r1
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    26fa:	6905      	ldr	r5, [r0, #16]
    26fc:	b941      	cbnz	r1, 2710 <gpio_nrfx_manage_callback+0x1c>
    26fe:	491e      	ldr	r1, [pc, #120]	; (2778 <gpio_nrfx_manage_callback+0x84>)
    2700:	481e      	ldr	r0, [pc, #120]	; (277c <gpio_nrfx_manage_callback+0x88>)
    2702:	2224      	movs	r2, #36	; 0x24
    2704:	f005 fd06 	bl	8114 <printk>
    2708:	2124      	movs	r1, #36	; 0x24
    270a:	481b      	ldr	r0, [pc, #108]	; (2778 <gpio_nrfx_manage_callback+0x84>)
    270c:	f005 fd8d 	bl	822a <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    2710:	6863      	ldr	r3, [r4, #4]
    2712:	b943      	cbnz	r3, 2726 <gpio_nrfx_manage_callback+0x32>
    2714:	4918      	ldr	r1, [pc, #96]	; (2778 <gpio_nrfx_manage_callback+0x84>)
    2716:	4819      	ldr	r0, [pc, #100]	; (277c <gpio_nrfx_manage_callback+0x88>)
    2718:	2225      	movs	r2, #37	; 0x25
    271a:	f005 fcfb 	bl	8114 <printk>
    271e:	2125      	movs	r1, #37	; 0x25
    2720:	4815      	ldr	r0, [pc, #84]	; (2778 <gpio_nrfx_manage_callback+0x84>)
    2722:	f005 fd82 	bl	822a <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    2726:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    2728:	b15b      	cbz	r3, 2742 <gpio_nrfx_manage_callback+0x4e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    272a:	2200      	movs	r2, #0
    272c:	429c      	cmp	r4, r3
    272e:	d113      	bne.n	2758 <gpio_nrfx_manage_callback+0x64>
Z_GENLIST_REMOVE(slist, snode)
    2730:	6823      	ldr	r3, [r4, #0]
    2732:	b95a      	cbnz	r2, 274c <gpio_nrfx_manage_callback+0x58>
    2734:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    2736:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    2738:	4294      	cmp	r4, r2
    273a:	d100      	bne.n	273e <gpio_nrfx_manage_callback+0x4a>
	list->tail = node;
    273c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    273e:	2300      	movs	r3, #0
    2740:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    2742:	b976      	cbnz	r6, 2762 <gpio_nrfx_manage_callback+0x6e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    2744:	2000      	movs	r0, #0
				     callback, set);
}
    2746:	bd70      	pop	{r4, r5, r6, pc}
    2748:	460b      	mov	r3, r1
    274a:	e7ef      	b.n	272c <gpio_nrfx_manage_callback+0x38>
    274c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    274e:	68ab      	ldr	r3, [r5, #8]
    2750:	429c      	cmp	r4, r3
	list->tail = node;
    2752:	bf08      	it	eq
    2754:	60aa      	streq	r2, [r5, #8]
}
    2756:	e7f2      	b.n	273e <gpio_nrfx_manage_callback+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2758:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    275a:	461a      	mov	r2, r3
    275c:	2900      	cmp	r1, #0
    275e:	d1f3      	bne.n	2748 <gpio_nrfx_manage_callback+0x54>
			if (!set) {
    2760:	b13e      	cbz	r6, 2772 <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_PREPEND(slist, snode)
    2762:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    2764:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    2766:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    2768:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    276a:	2800      	cmp	r0, #0
    276c:	d1ea      	bne.n	2744 <gpio_nrfx_manage_callback+0x50>
	list->tail = node;
    276e:	60ac      	str	r4, [r5, #8]
}
    2770:	e7e9      	b.n	2746 <gpio_nrfx_manage_callback+0x52>
				return -EINVAL;
    2772:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    2776:	e7e6      	b.n	2746 <gpio_nrfx_manage_callback+0x52>
    2778:	00009831 	.word	0x00009831
    277c:	00008d71 	.word	0x00008d71

00002780 <gpio_nrfx_pin_interrupt_configure>:
{
    2780:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2782:	6840      	ldr	r0, [r0, #4]
    2784:	f001 041f 	and.w	r4, r1, #31
    2788:	7b05      	ldrb	r5, [r0, #12]
	if (mode == GPIO_INT_MODE_DISABLED) {
    278a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    278e:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2792:	f04f 0500 	mov.w	r5, #0
    2796:	d104      	bne.n	27a2 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    2798:	4620      	mov	r0, r4
    279a:	f001 f849 	bl	3830 <nrfx_gpiote_trigger_disable>
	return 0;
    279e:	2000      	movs	r0, #0
    27a0:	e04b      	b.n	283a <gpio_nrfx_pin_interrupt_configure+0xba>
	if (mode == GPIO_INT_MODE_LEVEL) {
    27a2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    27a6:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    27aa:	d148      	bne.n	283e <gpio_nrfx_pin_interrupt_configure+0xbe>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    27ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    27b0:	bf0c      	ite	eq
    27b2:	2304      	moveq	r3, #4
    27b4:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    27b6:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    27ba:	6883      	ldr	r3, [r0, #8]
    27bc:	fa23 f101 	lsr.w	r1, r3, r1
    27c0:	07c9      	lsls	r1, r1, #31
    27c2:	d448      	bmi.n	2856 <gpio_nrfx_pin_interrupt_configure+0xd6>
    27c4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    27c8:	d145      	bne.n	2856 <gpio_nrfx_pin_interrupt_configure+0xd6>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    27ca:	0966      	lsrs	r6, r4, #5
    27cc:	bf0c      	ite	eq
    27ce:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    27d2:	2300      	movne	r3, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
    27d4:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
    27d8:	40eb      	lsrs	r3, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    27da:	07da      	lsls	r2, r3, #31
    27dc:	d40a      	bmi.n	27f4 <gpio_nrfx_pin_interrupt_configure+0x74>
    27de:	4926      	ldr	r1, [pc, #152]	; (2878 <gpio_nrfx_pin_interrupt_configure+0xf8>)
    27e0:	4826      	ldr	r0, [pc, #152]	; (287c <gpio_nrfx_pin_interrupt_configure+0xfc>)
    27e2:	f240 2229 	movw	r2, #553	; 0x229
    27e6:	f005 fc95 	bl	8114 <printk>
    27ea:	f240 2129 	movw	r1, #553	; 0x229
    27ee:	4822      	ldr	r0, [pc, #136]	; (2878 <gpio_nrfx_pin_interrupt_configure+0xf8>)
    27f0:	f005 fd1b 	bl	822a <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    27f4:	b156      	cbz	r6, 280c <gpio_nrfx_pin_interrupt_configure+0x8c>
            NRFX_ASSERT(0);
    27f6:	4920      	ldr	r1, [pc, #128]	; (2878 <gpio_nrfx_pin_interrupt_configure+0xf8>)
    27f8:	4820      	ldr	r0, [pc, #128]	; (287c <gpio_nrfx_pin_interrupt_configure+0xfc>)
    27fa:	f240 222e 	movw	r2, #558	; 0x22e
    27fe:	f005 fc89 	bl	8114 <printk>
    2802:	f240 212e 	movw	r1, #558	; 0x22e
    2806:	481c      	ldr	r0, [pc, #112]	; (2878 <gpio_nrfx_pin_interrupt_configure+0xf8>)
    2808:	f005 fd0f 	bl	822a <assert_post_action>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    280c:	4b1c      	ldr	r3, [pc, #112]	; (2880 <gpio_nrfx_pin_interrupt_configure+0x100>)
    280e:	3580      	adds	r5, #128	; 0x80
    2810:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2814:	07db      	lsls	r3, r3, #31
    2816:	d41e      	bmi.n	2856 <gpio_nrfx_pin_interrupt_configure+0xd6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2818:	f10d 0507 	add.w	r5, sp, #7
    281c:	4629      	mov	r1, r5
    281e:	4620      	mov	r0, r4
    2820:	f000 ff3c 	bl	369c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2824:	4b17      	ldr	r3, [pc, #92]	; (2884 <gpio_nrfx_pin_interrupt_configure+0x104>)
    2826:	4298      	cmp	r0, r3
    2828:	d114      	bne.n	2854 <gpio_nrfx_pin_interrupt_configure+0xd4>
			err = nrfx_gpiote_channel_alloc(&ch);
    282a:	4628      	mov	r0, r5
    282c:	f000 ff92 	bl	3754 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2830:	4b15      	ldr	r3, [pc, #84]	; (2888 <gpio_nrfx_pin_interrupt_configure+0x108>)
    2832:	4298      	cmp	r0, r3
    2834:	d00e      	beq.n	2854 <gpio_nrfx_pin_interrupt_configure+0xd4>
				return -ENOMEM;
    2836:	f06f 000b 	mvn.w	r0, #11
}
    283a:	b004      	add	sp, #16
    283c:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    283e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    2842:	d005      	beq.n	2850 <gpio_nrfx_pin_interrupt_configure+0xd0>
    2844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    2848:	bf0c      	ite	eq
    284a:	2302      	moveq	r3, #2
    284c:	2301      	movne	r3, #1
    284e:	e7b2      	b.n	27b6 <gpio_nrfx_pin_interrupt_configure+0x36>
    2850:	2303      	movs	r3, #3
    2852:	e7b0      	b.n	27b6 <gpio_nrfx_pin_interrupt_configure+0x36>
		trigger_config.p_in_channel = &ch;
    2854:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2856:	2300      	movs	r3, #0
    2858:	4620      	mov	r0, r4
    285a:	4619      	mov	r1, r3
    285c:	aa02      	add	r2, sp, #8
    285e:	f000 fdff 	bl	3460 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2862:	4b09      	ldr	r3, [pc, #36]	; (2888 <gpio_nrfx_pin_interrupt_configure+0x108>)
    2864:	4298      	cmp	r0, r3
    2866:	d104      	bne.n	2872 <gpio_nrfx_pin_interrupt_configure+0xf2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2868:	2101      	movs	r1, #1
    286a:	4620      	mov	r0, r4
    286c:	f000 ff78 	bl	3760 <nrfx_gpiote_trigger_enable>
    2870:	e795      	b.n	279e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    2872:	f06f 0004 	mvn.w	r0, #4
    2876:	e7e0      	b.n	283a <gpio_nrfx_pin_interrupt_configure+0xba>
    2878:	0000985e 	.word	0x0000985e
    287c:	00008d71 	.word	0x00008d71
    2880:	50842500 	.word	0x50842500
    2884:	0bad0004 	.word	0x0bad0004
    2888:	0bad0000 	.word	0x0bad0000

0000288c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    288c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    288e:	f000 ff51 	bl	3734 <nrfx_gpiote_is_init>
    2892:	4604      	mov	r4, r0
    2894:	b968      	cbnz	r0, 28b2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2896:	f000 ff25 	bl	36e4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    289a:	4b08      	ldr	r3, [pc, #32]	; (28bc <gpio_nrfx_init+0x30>)
    289c:	4298      	cmp	r0, r3
    289e:	d10a      	bne.n	28b6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    28a0:	4621      	mov	r1, r4
    28a2:	4807      	ldr	r0, [pc, #28]	; (28c0 <gpio_nrfx_init+0x34>)
    28a4:	f000 fef4 	bl	3690 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    28a8:	4622      	mov	r2, r4
    28aa:	2105      	movs	r1, #5
    28ac:	200d      	movs	r0, #13
    28ae:	f7fe ff2d 	bl	170c <z_arm_irq_priority_set>
		return 0;
    28b2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    28b4:	bd10      	pop	{r4, pc}
		return -EIO;
    28b6:	f06f 0004 	mvn.w	r0, #4
    28ba:	e7fb      	b.n	28b4 <gpio_nrfx_init+0x28>
    28bc:	0bad0000 	.word	0x0bad0000
    28c0:	000028c5 	.word	0x000028c5

000028c4 <nrfx_gpio_handler>:
{
    28c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    28c8:	0943      	lsrs	r3, r0, #5
    28ca:	d129      	bne.n	2920 <nrfx_gpio_handler+0x5c>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    28cc:	4b15      	ldr	r3, [pc, #84]	; (2924 <nrfx_gpio_handler+0x60>)
    28ce:	685c      	ldr	r4, [r3, #4]
    28d0:	b334      	cbz	r4, 2920 <nrfx_gpio_handler+0x5c>
    28d2:	6825      	ldr	r5, [r4, #0]
	gpio_fire_callbacks(list, port, BIT(pin));
    28d4:	2601      	movs	r6, #1
    28d6:	2d00      	cmp	r5, #0
    28d8:	bf38      	it	cc
    28da:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    28dc:	f8df 804c 	ldr.w	r8, [pc, #76]	; 292c <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
    28e0:	4f11      	ldr	r7, [pc, #68]	; (2928 <nrfx_gpio_handler+0x64>)
    28e2:	f8df 904c 	ldr.w	r9, [pc, #76]	; 2930 <nrfx_gpio_handler+0x6c>
    28e6:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
    28e8:	68a3      	ldr	r3, [r4, #8]
    28ea:	421e      	tst	r6, r3
    28ec:	d010      	beq.n	2910 <nrfx_gpio_handler+0x4c>
			__ASSERT(cb->handler, "No callback handler!");
    28ee:	6863      	ldr	r3, [r4, #4]
    28f0:	b943      	cbnz	r3, 2904 <nrfx_gpio_handler+0x40>
    28f2:	4639      	mov	r1, r7
    28f4:	4648      	mov	r0, r9
    28f6:	2245      	movs	r2, #69	; 0x45
    28f8:	f005 fc0c 	bl	8114 <printk>
    28fc:	2145      	movs	r1, #69	; 0x45
    28fe:	4638      	mov	r0, r7
    2900:	f005 fc93 	bl	822a <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    2904:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    2908:	4621      	mov	r1, r4
    290a:	4640      	mov	r0, r8
    290c:	4032      	ands	r2, r6
    290e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2910:	b135      	cbz	r5, 2920 <nrfx_gpio_handler+0x5c>
	return node->next;
    2912:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2914:	462c      	mov	r4, r5
    2916:	2b00      	cmp	r3, #0
    2918:	bf38      	it	cc
    291a:	2300      	movcc	r3, #0
    291c:	461d      	mov	r5, r3
    291e:	e7e3      	b.n	28e8 <nrfx_gpio_handler+0x24>
}
    2920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2924:	200009cc 	.word	0x200009cc
    2928:	00009831 	.word	0x00009831
    292c:	000086c4 	.word	0x000086c4
    2930:	00008d71 	.word	0x00008d71

00002934 <gpio_nrfx_pin_configure>:
{
    2934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    2938:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    293a:	f001 051f 	and.w	r5, r1, #31
    293e:	7b3b      	ldrb	r3, [r7, #12]
{
    2940:	460e      	mov	r6, r1
	if (flags == GPIO_DISCONNECTED) {
    2942:	4614      	mov	r4, r2
{
    2944:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2946:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    294a:	b9ca      	cbnz	r2, 2980 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    294c:	a902      	add	r1, sp, #8
    294e:	4628      	mov	r0, r5
    2950:	f000 fea4 	bl	369c <nrfx_gpiote_channel_get>
    2954:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    2956:	4628      	mov	r0, r5
    2958:	f000 ff8c 	bl	3874 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    295c:	4b47      	ldr	r3, [pc, #284]	; (2a7c <gpio_nrfx_pin_configure+0x148>)
    295e:	4298      	cmp	r0, r3
    2960:	d004      	beq.n	296c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    2962:	f06f 0004 	mvn.w	r0, #4
}
    2966:	b005      	add	sp, #20
    2968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    296c:	4284      	cmp	r4, r0
    296e:	d105      	bne.n	297c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    2970:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2974:	f000 fee8 	bl	3748 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    2978:	42a0      	cmp	r0, r4
    297a:	d1f2      	bne.n	2962 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    297c:	2000      	movs	r0, #0
    297e:	e7f2      	b.n	2966 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2980:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    2984:	f10d 0103 	add.w	r1, sp, #3
    2988:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    298a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    298e:	f000 fe85 	bl	369c <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2992:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    2994:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2996:	4649      	mov	r1, r9
    2998:	4628      	mov	r0, r5
    299a:	aa02      	add	r2, sp, #8
    299c:	f000 fd60 	bl	3460 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    29a0:	4b36      	ldr	r3, [pc, #216]	; (2a7c <gpio_nrfx_pin_configure+0x148>)
    29a2:	4298      	cmp	r0, r3
    29a4:	d002      	beq.n	29ac <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    29a6:	f06f 0015 	mvn.w	r0, #21
    29aa:	e7dc      	b.n	2966 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    29ac:	4580      	cmp	r8, r0
    29ae:	d103      	bne.n	29b8 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    29b0:	f89d 0003 	ldrb.w	r0, [sp, #3]
    29b4:	f000 fec8 	bl	3748 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    29b8:	05a3      	lsls	r3, r4, #22
    29ba:	d54c      	bpl.n	2a56 <gpio_nrfx_pin_configure+0x122>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    29bc:	4b30      	ldr	r3, [pc, #192]	; (2a80 <gpio_nrfx_pin_configure+0x14c>)
    29be:	4a31      	ldr	r2, [pc, #196]	; (2a84 <gpio_nrfx_pin_configure+0x150>)
    29c0:	4023      	ands	r3, r4
    29c2:	4293      	cmp	r3, r2
    29c4:	d039      	beq.n	2a3a <gpio_nrfx_pin_configure+0x106>
    29c6:	d80c      	bhi.n	29e2 <gpio_nrfx_pin_configure+0xae>
    29c8:	2b06      	cmp	r3, #6
    29ca:	d014      	beq.n	29f6 <gpio_nrfx_pin_configure+0xc2>
    29cc:	d804      	bhi.n	29d8 <gpio_nrfx_pin_configure+0xa4>
    29ce:	b193      	cbz	r3, 29f6 <gpio_nrfx_pin_configure+0xc2>
    29d0:	2b02      	cmp	r3, #2
    29d2:	d1e8      	bne.n	29a6 <gpio_nrfx_pin_configure+0x72>
    29d4:	2304      	movs	r3, #4
    29d6:	e00e      	b.n	29f6 <gpio_nrfx_pin_configure+0xc2>
    29d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    29dc:	d1e3      	bne.n	29a6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    29de:	2301      	movs	r3, #1
    29e0:	e009      	b.n	29f6 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    29e2:	4a29      	ldr	r2, [pc, #164]	; (2a88 <gpio_nrfx_pin_configure+0x154>)
    29e4:	4293      	cmp	r3, r2
    29e6:	d02a      	beq.n	2a3e <gpio_nrfx_pin_configure+0x10a>
    29e8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    29ec:	d029      	beq.n	2a42 <gpio_nrfx_pin_configure+0x10e>
    29ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    29f2:	d1d8      	bne.n	29a6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    29f4:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    29f6:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    29fa:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    29fe:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    2a02:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2a04:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    2a08:	bf4c      	ite	mi
    2a0a:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
    2a0c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2a10:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    2a12:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2a16:	d516      	bpl.n	2a46 <gpio_nrfx_pin_configure+0x112>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2a18:	2101      	movs	r1, #1
    2a1a:	687b      	ldr	r3, [r7, #4]
    2a1c:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    2a20:	609e      	str	r6, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2a22:	2200      	movs	r2, #0
    2a24:	4628      	mov	r0, r5
    2a26:	a901      	add	r1, sp, #4
    2a28:	f000 fdc0 	bl	35ac <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2a2c:	4b13      	ldr	r3, [pc, #76]	; (2a7c <gpio_nrfx_pin_configure+0x148>)
    2a2e:	4298      	cmp	r0, r3
    2a30:	bf14      	ite	ne
    2a32:	f06f 0015 	mvnne.w	r0, #21
    2a36:	2000      	moveq	r0, #0
    2a38:	e795      	b.n	2966 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    2a3a:	2307      	movs	r3, #7
    2a3c:	e7db      	b.n	29f6 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    2a3e:	2305      	movs	r3, #5
    2a40:	e7d9      	b.n	29f6 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    2a42:	2303      	movs	r3, #3
    2a44:	e7d7      	b.n	29f6 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2a46:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2a48:	bf41      	itttt	mi
    2a4a:	2101      	movmi	r1, #1
    2a4c:	687b      	ldrmi	r3, [r7, #4]
    2a4e:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    2a52:	60de      	strmi	r6, [r3, #12]
}
    2a54:	e7e5      	b.n	2a22 <gpio_nrfx_pin_configure+0xee>
	if (flags & GPIO_PULL_UP) {
    2a56:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2a58:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2a5c:	bf4c      	ite	mi
    2a5e:	2403      	movmi	r4, #3
    2a60:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2a64:	461a      	mov	r2, r3
    2a66:	4628      	mov	r0, r5
    2a68:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    2a6a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2a6e:	f000 fcf7 	bl	3460 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2a72:	4b02      	ldr	r3, [pc, #8]	; (2a7c <gpio_nrfx_pin_configure+0x148>)
    2a74:	4298      	cmp	r0, r3
    2a76:	d081      	beq.n	297c <gpio_nrfx_pin_configure+0x48>
    2a78:	e795      	b.n	29a6 <gpio_nrfx_pin_configure+0x72>
    2a7a:	bf00      	nop
    2a7c:	0bad0000 	.word	0x0bad0000
    2a80:	00f00006 	.word	0x00f00006
    2a84:	00100006 	.word	0x00100006
    2a88:	00400002 	.word	0x00400002

00002a8c <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
    2a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2a8e:	460f      	mov	r7, r1
    2a90:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
    2a92:	b940      	cbnz	r0, 2aa6 <entropy_cc3xx_rng_get_entropy+0x1a>
    2a94:	4918      	ldr	r1, [pc, #96]	; (2af8 <entropy_cc3xx_rng_get_entropy+0x6c>)
    2a96:	4819      	ldr	r0, [pc, #100]	; (2afc <entropy_cc3xx_rng_get_entropy+0x70>)
    2a98:	2224      	movs	r2, #36	; 0x24
    2a9a:	f005 fb3b 	bl	8114 <printk>
    2a9e:	2124      	movs	r1, #36	; 0x24
    2aa0:	4815      	ldr	r0, [pc, #84]	; (2af8 <entropy_cc3xx_rng_get_entropy+0x6c>)
    2aa2:	f005 fbc2 	bl	822a <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
    2aa6:	b947      	cbnz	r7, 2aba <entropy_cc3xx_rng_get_entropy+0x2e>
    2aa8:	4913      	ldr	r1, [pc, #76]	; (2af8 <entropy_cc3xx_rng_get_entropy+0x6c>)
    2aaa:	4814      	ldr	r0, [pc, #80]	; (2afc <entropy_cc3xx_rng_get_entropy+0x70>)
    2aac:	2225      	movs	r2, #37	; 0x25
    2aae:	f005 fb31 	bl	8114 <printk>
    2ab2:	2125      	movs	r1, #37	; 0x25
    2ab4:	4810      	ldr	r0, [pc, #64]	; (2af8 <entropy_cc3xx_rng_get_entropy+0x6c>)
    2ab6:	f005 fbb8 	bl	822a <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    2aba:	f44f 6580 	mov.w	r5, #1024	; 0x400
    2abe:	2400      	movs	r4, #0
    2ac0:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
    2ac4:	42a6      	cmp	r6, r4
    2ac6:	d801      	bhi.n	2acc <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
	}
#endif

	return res;
}
    2ac8:	b003      	add	sp, #12
    2aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
    2acc:	1b33      	subs	r3, r6, r4
    2ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    2ad2:	bf38      	it	cc
    2ad4:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
    2ad6:	2000      	movs	r0, #0
    2ad8:	ab01      	add	r3, sp, #4
    2ada:	462a      	mov	r2, r5
    2adc:	1939      	adds	r1, r7, r4
    2ade:	f002 fdcd 	bl	567c <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
    2ae2:	9b01      	ldr	r3, [sp, #4]
    2ae4:	42ab      	cmp	r3, r5
    2ae6:	d103      	bne.n	2af0 <entropy_cc3xx_rng_get_entropy+0x64>
		if (res != 0) {
    2ae8:	2800      	cmp	r0, #0
    2aea:	d1ed      	bne.n	2ac8 <entropy_cc3xx_rng_get_entropy+0x3c>
		offset += chunk_size;
    2aec:	442c      	add	r4, r5
    2aee:	e7e9      	b.n	2ac4 <entropy_cc3xx_rng_get_entropy+0x38>
			return -EINVAL;
    2af0:	f06f 0015 	mvn.w	r0, #21
    2af4:	e7e8      	b.n	2ac8 <entropy_cc3xx_rng_get_entropy+0x3c>
    2af6:	bf00      	nop
    2af8:	00009898 	.word	0x00009898
    2afc:	00008d71 	.word	0x00008d71

00002b00 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
    2b00:	4b0b      	ldr	r3, [pc, #44]	; (2b30 <elapsed+0x30>)
{
    2b02:	b510      	push	{r4, lr}
	uint32_t val1 = SysTick->VAL;	/* A */
    2b04:	689a      	ldr	r2, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
    2b06:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
    2b08:	6898      	ldr	r0, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    2b0a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    2b0e:	4b09      	ldr	r3, [pc, #36]	; (2b34 <elapsed+0x34>)
    2b10:	4909      	ldr	r1, [pc, #36]	; (2b38 <elapsed+0x38>)
    2b12:	d101      	bne.n	2b18 <elapsed+0x18>
	    || (val1 < val2)) {
    2b14:	4282      	cmp	r2, r0
    2b16:	d205      	bcs.n	2b24 <elapsed+0x24>
		overflow_cyc += last_load;
    2b18:	681a      	ldr	r2, [r3, #0]
    2b1a:	680c      	ldr	r4, [r1, #0]
    2b1c:	4422      	add	r2, r4
    2b1e:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
    2b20:	4a03      	ldr	r2, [pc, #12]	; (2b30 <elapsed+0x30>)
    2b22:	6812      	ldr	r2, [r2, #0]
	}

	return (last_load - val2) + overflow_cyc;
    2b24:	681b      	ldr	r3, [r3, #0]
    2b26:	680a      	ldr	r2, [r1, #0]
    2b28:	4413      	add	r3, r2
}
    2b2a:	1a18      	subs	r0, r3, r0
    2b2c:	bd10      	pop	{r4, pc}
    2b2e:	bf00      	nop
    2b30:	e000e010 	.word	0xe000e010
    2b34:	200009e8 	.word	0x200009e8
    2b38:	200009e0 	.word	0x200009e0

00002b3c <sys_clock_driver_init>:
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b3c:	2220      	movs	r2, #32
static int sys_clock_driver_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
    2b3e:	2000      	movs	r0, #0
    2b40:	4b07      	ldr	r3, [pc, #28]	; (2b60 <sys_clock_driver_init+0x24>)
    2b42:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    2b46:	4b07      	ldr	r3, [pc, #28]	; (2b64 <sys_clock_driver_init+0x28>)
    2b48:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
    2b4a:	4b07      	ldr	r3, [pc, #28]	; (2b68 <sys_clock_driver_init+0x2c>)
    2b4c:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
    2b4e:	4b07      	ldr	r3, [pc, #28]	; (2b6c <sys_clock_driver_init+0x30>)
    2b50:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
    2b52:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
    2b54:	681a      	ldr	r2, [r3, #0]
    2b56:	f042 0207 	orr.w	r2, r2, #7
    2b5a:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
    2b5c:	4770      	bx	lr
    2b5e:	bf00      	nop
    2b60:	e000ed00 	.word	0xe000ed00
    2b64:	200009e0 	.word	0x200009e0
    2b68:	200009e8 	.word	0x200009e8
    2b6c:	e000e010 	.word	0xe000e010

00002b70 <sys_clock_isr>:
{
    2b70:	b508      	push	{r3, lr}
	elapsed();
    2b72:	f7ff ffc5 	bl	2b00 <elapsed>
	cycle_count += overflow_cyc;
    2b76:	4a09      	ldr	r2, [pc, #36]	; (2b9c <sys_clock_isr+0x2c>)
    2b78:	4909      	ldr	r1, [pc, #36]	; (2ba0 <sys_clock_isr+0x30>)
    2b7a:	6813      	ldr	r3, [r2, #0]
    2b7c:	6808      	ldr	r0, [r1, #0]
    2b7e:	4403      	add	r3, r0
    2b80:	600b      	str	r3, [r1, #0]
	overflow_cyc = 0;
    2b82:	2100      	movs	r1, #0
    2b84:	6011      	str	r1, [r2, #0]
		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    2b86:	4a07      	ldr	r2, [pc, #28]	; (2ba4 <sys_clock_isr+0x34>)
    2b88:	6810      	ldr	r0, [r2, #0]
		announced_cycles += dticks * CYC_PER_TICK;
    2b8a:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
    2b8c:	1a18      	subs	r0, r3, r0
    2b8e:	f002 fc35 	bl	53fc <sys_clock_announce>
}
    2b92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    2b96:	f7fe bea5 	b.w	18e4 <z_arm_exc_exit>
    2b9a:	bf00      	nop
    2b9c:	200009e8 	.word	0x200009e8
    2ba0:	200009dc 	.word	0x200009dc
    2ba4:	200009d8 	.word	0x200009d8

00002ba8 <sys_clock_set_timeout>:
{
    2ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2bac:	4f39      	ldr	r7, [pc, #228]	; (2c94 <sys_clock_set_timeout+0xec>)
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
    2bae:	b159      	cbz	r1, 2bc8 <sys_clock_set_timeout+0x20>
    2bb0:	1c43      	adds	r3, r0, #1
    2bb2:	d109      	bne.n	2bc8 <sys_clock_set_timeout+0x20>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    2bb4:	4a38      	ldr	r2, [pc, #224]	; (2c98 <sys_clock_set_timeout+0xf0>)
    2bb6:	6813      	ldr	r3, [r2, #0]
    2bb8:	f023 0301 	bic.w	r3, r3, #1
    2bbc:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
    2bbe:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
    2bc2:	603b      	str	r3, [r7, #0]
}
    2bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2bc8:	4b34      	ldr	r3, [pc, #208]	; (2c9c <sys_clock_set_timeout+0xf4>)
	uint32_t last_load_ = last_load;
    2bca:	683d      	ldr	r5, [r7, #0]
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2bcc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2bd0:	bf08      	it	eq
    2bd2:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2bd4:	1e44      	subs	r4, r0, #1
    2bd6:	2c00      	cmp	r4, #0
    2bd8:	dd54      	ble.n	2c84 <sys_clock_set_timeout+0xdc>
    2bda:	429c      	cmp	r4, r3
    2bdc:	bfa8      	it	ge
    2bde:	461c      	movge	r4, r3
	__asm__ volatile(
    2be0:	f04f 0320 	mov.w	r3, #32
    2be4:	f3ef 8611 	mrs	r6, BASEPRI
    2be8:	f383 8812 	msr	BASEPRI_MAX, r3
    2bec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2bf0:	482b      	ldr	r0, [pc, #172]	; (2ca0 <sys_clock_set_timeout+0xf8>)
    2bf2:	f001 fa11 	bl	4018 <z_spin_lock_valid>
    2bf6:	b940      	cbnz	r0, 2c0a <sys_clock_set_timeout+0x62>
    2bf8:	492a      	ldr	r1, [pc, #168]	; (2ca4 <sys_clock_set_timeout+0xfc>)
    2bfa:	482b      	ldr	r0, [pc, #172]	; (2ca8 <sys_clock_set_timeout+0x100>)
    2bfc:	2281      	movs	r2, #129	; 0x81
    2bfe:	f005 fa89 	bl	8114 <printk>
    2c02:	2181      	movs	r1, #129	; 0x81
    2c04:	4827      	ldr	r0, [pc, #156]	; (2ca4 <sys_clock_set_timeout+0xfc>)
    2c06:	f005 fb10 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    2c0a:	4825      	ldr	r0, [pc, #148]	; (2ca0 <sys_clock_set_timeout+0xf8>)
    2c0c:	f001 fa20 	bl	4050 <z_spin_lock_set_owner>
	uint32_t pending = elapsed();
    2c10:	f7ff ff76 	bl	2b00 <elapsed>
	overflow_cyc = 0U;
    2c14:	f04f 0e00 	mov.w	lr, #0
	val1 = SysTick->VAL;
    2c18:	f8df 807c 	ldr.w	r8, [pc, #124]	; 2c98 <sys_clock_set_timeout+0xf0>
	overflow_cyc = 0U;
    2c1c:	f8df c090 	ldr.w	ip, [pc, #144]	; 2cb0 <sys_clock_set_timeout+0x108>
	cycle_count += pending;
    2c20:	4a22      	ldr	r2, [pc, #136]	; (2cac <sys_clock_set_timeout+0x104>)
	val1 = SysTick->VAL;
    2c22:	f8d8 1008 	ldr.w	r1, [r8, #8]
	overflow_cyc = 0U;
    2c26:	f8cc e000 	str.w	lr, [ip]
	uint32_t unannounced = cycle_count - announced_cycles;
    2c2a:	f8df c088 	ldr.w	ip, [pc, #136]	; 2cb4 <sys_clock_set_timeout+0x10c>
	cycle_count += pending;
    2c2e:	6813      	ldr	r3, [r2, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
    2c30:	f8dc c000 	ldr.w	ip, [ip]
	cycle_count += pending;
    2c34:	4418      	add	r0, r3
	uint32_t unannounced = cycle_count - announced_cycles;
    2c36:	eba0 0c0c 	sub.w	ip, r0, ip
	if ((int32_t)unannounced < 0) {
    2c3a:	45f4      	cmp	ip, lr
    2c3c:	4643      	mov	r3, r8
	cycle_count += pending;
    2c3e:	6010      	str	r0, [r2, #0]
	if ((int32_t)unannounced < 0) {
    2c40:	da22      	bge.n	2c88 <sys_clock_set_timeout+0xe0>
		last_load = MIN_DELAY;
    2c42:	f44f 6480 	mov.w	r4, #1024	; 0x400
			last_load = delay;
    2c46:	603c      	str	r4, [r7, #0]
	SysTick->LOAD = last_load - 1;
    2c48:	683f      	ldr	r7, [r7, #0]
	val2 = SysTick->VAL;
    2c4a:	689c      	ldr	r4, [r3, #8]
	SysTick->LOAD = last_load - 1;
    2c4c:	3f01      	subs	r7, #1
    2c4e:	605f      	str	r7, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
    2c50:	2700      	movs	r7, #0
	if (val1 < val2) {
    2c52:	42a1      	cmp	r1, r4
		cycle_count += (val1 + (last_load_ - val2));
    2c54:	bf38      	it	cc
    2c56:	1949      	addcc	r1, r1, r5
		cycle_count += (val1 - val2);
    2c58:	1b09      	subs	r1, r1, r4
    2c5a:	4408      	add	r0, r1
	SysTick->VAL = 0; /* resets timer to last_load */
    2c5c:	609f      	str	r7, [r3, #8]
		cycle_count += (val1 - val2);
    2c5e:	6010      	str	r0, [r2, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2c60:	480f      	ldr	r0, [pc, #60]	; (2ca0 <sys_clock_set_timeout+0xf8>)
    2c62:	f001 f9e7 	bl	4034 <z_spin_unlock_valid>
    2c66:	b940      	cbnz	r0, 2c7a <sys_clock_set_timeout+0xd2>
    2c68:	490e      	ldr	r1, [pc, #56]	; (2ca4 <sys_clock_set_timeout+0xfc>)
    2c6a:	480f      	ldr	r0, [pc, #60]	; (2ca8 <sys_clock_set_timeout+0x100>)
    2c6c:	22ac      	movs	r2, #172	; 0xac
    2c6e:	f005 fa51 	bl	8114 <printk>
    2c72:	21ac      	movs	r1, #172	; 0xac
    2c74:	480b      	ldr	r0, [pc, #44]	; (2ca4 <sys_clock_set_timeout+0xfc>)
    2c76:	f005 fad8 	bl	822a <assert_post_action>
	__asm__ volatile(
    2c7a:	f386 8811 	msr	BASEPRI, r6
    2c7e:	f3bf 8f6f 	isb	sy
    2c82:	e79f      	b.n	2bc4 <sys_clock_set_timeout+0x1c>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2c84:	2400      	movs	r4, #0
    2c86:	e7ab      	b.n	2be0 <sys_clock_set_timeout+0x38>
			last_load = delay;
    2c88:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    2c8c:	bfb8      	it	lt
    2c8e:	f44f 6480 	movlt.w	r4, #1024	; 0x400
    2c92:	e7d8      	b.n	2c46 <sys_clock_set_timeout+0x9e>
    2c94:	200009e0 	.word	0x200009e0
    2c98:	e000e010 	.word	0xe000e010
    2c9c:	00fffffe 	.word	0x00fffffe
    2ca0:	200009e4 	.word	0x200009e4
    2ca4:	00008d4b 	.word	0x00008d4b
    2ca8:	00008d71 	.word	0x00008d71
    2cac:	200009dc 	.word	0x200009dc
    2cb0:	200009e8 	.word	0x200009e8
    2cb4:	200009d8 	.word	0x200009d8

00002cb8 <sys_clock_elapsed>:
{
    2cb8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    2cba:	f04f 0320 	mov.w	r3, #32
    2cbe:	f3ef 8511 	mrs	r5, BASEPRI
    2cc2:	f383 8812 	msr	BASEPRI_MAX, r3
    2cc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2cca:	4815      	ldr	r0, [pc, #84]	; (2d20 <sys_clock_elapsed+0x68>)
    2ccc:	f001 f9a4 	bl	4018 <z_spin_lock_valid>
    2cd0:	b940      	cbnz	r0, 2ce4 <sys_clock_elapsed+0x2c>
    2cd2:	4914      	ldr	r1, [pc, #80]	; (2d24 <sys_clock_elapsed+0x6c>)
    2cd4:	4814      	ldr	r0, [pc, #80]	; (2d28 <sys_clock_elapsed+0x70>)
    2cd6:	2281      	movs	r2, #129	; 0x81
    2cd8:	f005 fa1c 	bl	8114 <printk>
    2cdc:	2181      	movs	r1, #129	; 0x81
    2cde:	4811      	ldr	r0, [pc, #68]	; (2d24 <sys_clock_elapsed+0x6c>)
    2ce0:	f005 faa3 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    2ce4:	480e      	ldr	r0, [pc, #56]	; (2d20 <sys_clock_elapsed+0x68>)
    2ce6:	f001 f9b3 	bl	4050 <z_spin_lock_set_owner>
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
    2cea:	f7ff ff09 	bl	2b00 <elapsed>
    2cee:	4b0f      	ldr	r3, [pc, #60]	; (2d2c <sys_clock_elapsed+0x74>)
    2cf0:	681c      	ldr	r4, [r3, #0]
    2cf2:	4b0f      	ldr	r3, [pc, #60]	; (2d30 <sys_clock_elapsed+0x78>)
    2cf4:	681b      	ldr	r3, [r3, #0]
    2cf6:	1ae4      	subs	r4, r4, r3
    2cf8:	4404      	add	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2cfa:	4809      	ldr	r0, [pc, #36]	; (2d20 <sys_clock_elapsed+0x68>)
    2cfc:	f001 f99a 	bl	4034 <z_spin_unlock_valid>
    2d00:	b940      	cbnz	r0, 2d14 <sys_clock_elapsed+0x5c>
    2d02:	4908      	ldr	r1, [pc, #32]	; (2d24 <sys_clock_elapsed+0x6c>)
    2d04:	4808      	ldr	r0, [pc, #32]	; (2d28 <sys_clock_elapsed+0x70>)
    2d06:	22ac      	movs	r2, #172	; 0xac
    2d08:	f005 fa04 	bl	8114 <printk>
    2d0c:	21ac      	movs	r1, #172	; 0xac
    2d0e:	4805      	ldr	r0, [pc, #20]	; (2d24 <sys_clock_elapsed+0x6c>)
    2d10:	f005 fa8b 	bl	822a <assert_post_action>
	__asm__ volatile(
    2d14:	f385 8811 	msr	BASEPRI, r5
    2d18:	f3bf 8f6f 	isb	sy
}
    2d1c:	4620      	mov	r0, r4
    2d1e:	bd38      	pop	{r3, r4, r5, pc}
    2d20:	200009e4 	.word	0x200009e4
    2d24:	00008d4b 	.word	0x00008d4b
    2d28:	00008d71 	.word	0x00008d71
    2d2c:	200009dc 	.word	0x200009dc
    2d30:	200009d8 	.word	0x200009d8

00002d34 <sys_clock_idle_exit>:
	if (last_load == TIMER_STOPPED) {
    2d34:	4b05      	ldr	r3, [pc, #20]	; (2d4c <sys_clock_idle_exit+0x18>)
    2d36:	681b      	ldr	r3, [r3, #0]
    2d38:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
		SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
    2d3c:	bf01      	itttt	eq
    2d3e:	4a04      	ldreq	r2, [pc, #16]	; (2d50 <sys_clock_idle_exit+0x1c>)
    2d40:	6813      	ldreq	r3, [r2, #0]
    2d42:	f043 0301 	orreq.w	r3, r3, #1
    2d46:	6013      	streq	r3, [r2, #0]
}
    2d48:	4770      	bx	lr
    2d4a:	bf00      	nop
    2d4c:	200009e0 	.word	0x200009e0
    2d50:	e000e010 	.word	0xe000e010

00002d54 <sys_clock_disable>:
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    2d54:	4a02      	ldr	r2, [pc, #8]	; (2d60 <sys_clock_disable+0xc>)
    2d56:	6813      	ldr	r3, [r2, #0]
    2d58:	f023 0301 	bic.w	r3, r3, #1
    2d5c:	6013      	str	r3, [r2, #0]
}
    2d5e:	4770      	bx	lr
    2d60:	e000e010 	.word	0xe000e010

00002d64 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    2d64:	4803      	ldr	r0, [pc, #12]	; (2d74 <k_sys_fatal_error_handler+0x10>)
    2d66:	2145      	movs	r1, #69	; 0x45
{
    2d68:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    2d6a:	f005 fa71 	bl	8250 <z_log_minimal_printk>
		sys_arch_reboot(0);
    2d6e:	2000      	movs	r0, #0
    2d70:	f7ff f8a0 	bl	1eb4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    2d74:	000098d3 	.word	0x000098d3

00002d78 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
    2d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2d7c:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    2d7e:	4c21      	ldr	r4, [pc, #132]	; (2e04 <check_ext_api_requests+0x8c>)
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
    2d80:	4e21      	ldr	r6, [pc, #132]	; (2e08 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2d82:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    2d86:	f8df 9088 	ldr.w	r9, [pc, #136]	; 2e10 <check_ext_api_requests+0x98>
{
    2d8a:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2d8c:	45a8      	cmp	r8, r5
    2d8e:	d803      	bhi.n	2d98 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    2d90:	2000      	movs	r0, #0
    2d92:	b005      	add	sp, #20
    2d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
    2d98:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2d9a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2d9e:	681f      	ldr	r7, [r3, #0]
    2da0:	ab01      	add	r3, sp, #4
    2da2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    2da6:	220c      	movs	r2, #12
    2da8:	4619      	mov	r1, r3
    2daa:	4638      	mov	r0, r7
    2dac:	f005 fac6 	bl	833c <memcmp>
    2db0:	b990      	cbnz	r0, 2dd8 <check_ext_api_requests+0x60>
    2db2:	b18f      	cbz	r7, 2dd8 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    2db4:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
    2db6:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    2db8:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    2dba:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    2dbc:	4291      	cmp	r1, r2
    2dbe:	d10b      	bne.n	2dd8 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    2dc0:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
    2dc2:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    2dc4:	4291      	cmp	r1, r2
    2dc6:	d807      	bhi.n	2dd8 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
    2dc8:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    2dca:	4291      	cmp	r1, r2
    2dcc:	d904      	bls.n	2dd8 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
    2dce:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    2dd0:	695b      	ldr	r3, [r3, #20]
    2dd2:	ea32 0303 	bics.w	r3, r2, r3
    2dd6:	d00a      	beq.n	2dee <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    2dd8:	6a27      	ldr	r7, [r4, #32]
    2dda:	b167      	cbz	r7, 2df6 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    2ddc:	480b      	ldr	r0, [pc, #44]	; (2e0c <check_ext_api_requests+0x94>)
    2dde:	f005 f999 	bl	8114 <printk>
			k_panic();
    2de2:	4040      	eors	r0, r0
    2de4:	f380 8811 	msr	BASEPRI, r0
    2de8:	f04f 0004 	mov.w	r0, #4
    2dec:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    2dee:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2df0:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    2df2:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    2df4:	e7ca      	b.n	2d8c <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    2df6:	4648      	mov	r0, r9
    2df8:	f005 f98c 	bl	8114 <printk>
			*ext_api_req->ext_api = NULL;
    2dfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2dfe:	601f      	str	r7, [r3, #0]
    2e00:	e7f5      	b.n	2dee <check_ext_api_requests+0x76>
    2e02:	bf00      	nop
    2e04:	0000023c 	.word	0x0000023c
    2e08:	0000894c 	.word	0x0000894c
    2e0c:	000098f5 	.word	0x000098f5
    2e10:	0000991e 	.word	0x0000991e

00002e14 <nrf91_errata_14>:
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2e14:	4a06      	ldr	r2, [pc, #24]	; (2e30 <nrf91_errata_14+0x1c>)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2e16:	4b07      	ldr	r3, [pc, #28]	; (2e34 <nrf91_errata_14+0x20>)
    2e18:	681b      	ldr	r3, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2e1a:	6810      	ldr	r0, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    2e1c:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    2e20:	2b09      	cmp	r3, #9
    2e22:	d103      	bne.n	2e2c <nrf91_errata_14+0x18>
            {
                switch(var2)
    2e24:	1e43      	subs	r3, r0, #1
    2e26:	4258      	negs	r0, r3
    2e28:	4158      	adcs	r0, r3
    2e2a:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    2e2c:	2000      	movs	r0, #0
    #endif
}
    2e2e:	4770      	bx	lr
    2e30:	00ff0134 	.word	0x00ff0134
    2e34:	00ff0130 	.word	0x00ff0130

00002e38 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    2e38:	4a57      	ldr	r2, [pc, #348]	; (2f98 <SystemInit+0x160>)
{
    2e3a:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    2e3c:	6813      	ldr	r3, [r2, #0]
    2e3e:	f043 0302 	orr.w	r3, r3, #2
    2e42:	6013      	str	r3, [r2, #0]
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2e44:	4b55      	ldr	r3, [pc, #340]	; (2f9c <SystemInit+0x164>)
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2e46:	4a56      	ldr	r2, [pc, #344]	; (2fa0 <SystemInit+0x168>)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2e48:	681b      	ldr	r3, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2e4a:	6812      	ldr	r2, [r2, #0]
    2e4c:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    2e50:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    2e52:	bf01      	itttt	eq
    2e54:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    2e58:	2200      	moveq	r2, #0
    2e5a:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    2e5e:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    2e62:	f7ff ffd7 	bl	2e14 <nrf91_errata_14>
    2e66:	b130      	cbz	r0, 2e76 <SystemInit+0x3e>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    2e68:	2301      	movs	r3, #1
    2e6a:	4a4e      	ldr	r2, [pc, #312]	; (2fa4 <SystemInit+0x16c>)
    2e6c:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    2e6e:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    2e72:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2e76:	4b49      	ldr	r3, [pc, #292]	; (2f9c <SystemInit+0x164>)
    2e78:	681a      	ldr	r2, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2e7a:	3304      	adds	r3, #4
    2e7c:	681b      	ldr	r3, [r3, #0]
    2e7e:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    2e82:	2a09      	cmp	r2, #9
    2e84:	d105      	bne.n	2e92 <SystemInit+0x5a>
            {
                switch(var2)
    2e86:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    2e88:	bf1e      	ittt	ne
    2e8a:	2201      	movne	r2, #1
    2e8c:	4b46      	ldrne	r3, [pc, #280]	; (2fa8 <SystemInit+0x170>)
    2e8e:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    2e92:	f7ff ffbf 	bl	2e14 <nrf91_errata_14>
    2e96:	b110      	cbz	r0, 2e9e <SystemInit+0x66>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    2e98:	220e      	movs	r2, #14
    2e9a:	4b44      	ldr	r3, [pc, #272]	; (2fac <SystemInit+0x174>)
    2e9c:	601a      	str	r2, [r3, #0]
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2e9e:	4b3f      	ldr	r3, [pc, #252]	; (2f9c <SystemInit+0x164>)
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2ea0:	4a3f      	ldr	r2, [pc, #252]	; (2fa0 <SystemInit+0x168>)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2ea2:	681b      	ldr	r3, [r3, #0]
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2ea4:	6812      	ldr	r2, [r2, #0]
    2ea6:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    2eaa:	2b09      	cmp	r3, #9
    2eac:	d104      	bne.n	2eb8 <SystemInit+0x80>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    2eae:	2200      	movs	r2, #0
    2eb0:	4b3f      	ldr	r3, [pc, #252]	; (2fb0 <SystemInit+0x178>)
    2eb2:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    2eb4:	2201      	movs	r2, #1
    2eb6:	605a      	str	r2, [r3, #4]
{
    2eb8:	2200      	movs	r2, #0
    2eba:	00d3      	lsls	r3, r2, #3
    2ebc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        return false;
    }
    
    bool is_empty_word(uint32_t const volatile * word)
    {
        uint32_t val = *word;
    2ec0:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    2ec4:	f3bf 8f4f 	dsb	sy
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    2ec8:	3101      	adds	r1, #1
    2eca:	d008      	beq.n	2ede <SystemInit+0xa6>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    2ecc:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    2ed0:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    2ed2:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    2ed6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    2eda:	600b      	str	r3, [r1, #0]
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    2edc:	d1ed      	bne.n	2eba <SystemInit+0x82>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    2ede:	4b35      	ldr	r3, [pc, #212]	; (2fb4 <SystemInit+0x17c>)
    2ee0:	69db      	ldr	r3, [r3, #28]
    2ee2:	f3bf 8f4f 	dsb	sy
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    2ee6:	07d9      	lsls	r1, r3, #31
    2ee8:	d545      	bpl.n	2f76 <SystemInit+0x13e>
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2eea:	4b33      	ldr	r3, [pc, #204]	; (2fb8 <SystemInit+0x180>)
    2eec:	4619      	mov	r1, r3
    2eee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2ef2:	2a01      	cmp	r2, #1
    2ef4:	d1fb      	bne.n	2eee <SystemInit+0xb6>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    2ef6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2efa:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    2efe:	2b01      	cmp	r3, #1
    2f00:	d1fb      	bne.n	2efa <SystemInit+0xc2>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    2f02:	4b2c      	ldr	r3, [pc, #176]	; (2fb4 <SystemInit+0x17c>)
    2f04:	69da      	ldr	r2, [r3, #28]
    2f06:	f3bf 8f4f 	dsb	sy
              if (uicr_HFXOSRC_erased()){
    2f0a:	07d2      	lsls	r2, r2, #31
    2f0c:	d50a      	bpl.n	2f24 <SystemInit+0xec>
                    uicr_erased_value = NRF_UICR_S->HFXOSRC;
    2f0e:	69da      	ldr	r2, [r3, #28]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    2f10:	f022 0201 	bic.w	r2, r2, #1
                    NRF_UICR_S->HFXOSRC = uicr_new_value;
    2f14:	61da      	str	r2, [r3, #28]
    2f16:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2f1a:	4a27      	ldr	r2, [pc, #156]	; (2fb8 <SystemInit+0x180>)
    2f1c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2f20:	2b01      	cmp	r3, #1
    2f22:	d1fb      	bne.n	2f1c <SystemInit+0xe4>
        uint32_t val = *word;
    2f24:	4b25      	ldr	r3, [pc, #148]	; (2fbc <SystemInit+0x184>)
    2f26:	681b      	ldr	r3, [r3, #0]
    2f28:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    2f2c:	3301      	adds	r3, #1
    2f2e:	d10d      	bne.n	2f4c <SystemInit+0x114>
                    uicr_erased_value = NRF_UICR_S->HFXOCNT;
    2f30:	4a20      	ldr	r2, [pc, #128]	; (2fb4 <SystemInit+0x17c>)
    2f32:	6a13      	ldr	r3, [r2, #32]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    2f34:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    2f38:	f043 0320 	orr.w	r3, r3, #32
                    NRF_UICR_S->HFXOCNT = uicr_new_value;
    2f3c:	6213      	str	r3, [r2, #32]
    2f3e:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2f42:	4a1d      	ldr	r2, [pc, #116]	; (2fb8 <SystemInit+0x180>)
    2f44:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2f48:	2b01      	cmp	r3, #1
    2f4a:	d1fb      	bne.n	2f44 <SystemInit+0x10c>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    2f4c:	2200      	movs	r2, #0
    2f4e:	4b1a      	ldr	r3, [pc, #104]	; (2fb8 <SystemInit+0x180>)
    2f50:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    2f54:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2f58:	2a01      	cmp	r2, #1
    2f5a:	d1fb      	bne.n	2f54 <SystemInit+0x11c>
    2f5c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2f60:	4917      	ldr	r1, [pc, #92]	; (2fc0 <SystemInit+0x188>)
    2f62:	4b18      	ldr	r3, [pc, #96]	; (2fc4 <SystemInit+0x18c>)
    2f64:	68ca      	ldr	r2, [r1, #12]
    2f66:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2f6a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2f6c:	60cb      	str	r3, [r1, #12]
    2f6e:	f3bf 8f4f 	dsb	sy
    __NOP();
    2f72:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2f74:	e7fd      	b.n	2f72 <SystemInit+0x13a>
        uint32_t val = *word;
    2f76:	4b11      	ldr	r3, [pc, #68]	; (2fbc <SystemInit+0x184>)
    2f78:	681b      	ldr	r3, [r3, #0]
    2f7a:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    2f7e:	3301      	adds	r3, #1
    2f80:	d0b3      	beq.n	2eea <SystemInit+0xb2>
        SCB->NSACR |= (3UL << 10);
    2f82:	4a0f      	ldr	r2, [pc, #60]	; (2fc0 <SystemInit+0x188>)
    2f84:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2f88:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2f8c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClock = __SYSTEM_CLOCK;
    2f90:	4b0d      	ldr	r3, [pc, #52]	; (2fc8 <SystemInit+0x190>)
    2f92:	4a0e      	ldr	r2, [pc, #56]	; (2fcc <SystemInit+0x194>)
    2f94:	601a      	str	r2, [r3, #0]
}
    2f96:	bd08      	pop	{r3, pc}
    2f98:	e000edd0 	.word	0xe000edd0
    2f9c:	00ff0130 	.word	0x00ff0130
    2fa0:	00ff0134 	.word	0x00ff0134
    2fa4:	50004a38 	.word	0x50004a38
    2fa8:	50004000 	.word	0x50004000
    2fac:	5003aee4 	.word	0x5003aee4
    2fb0:	5000470c 	.word	0x5000470c
    2fb4:	00ff8000 	.word	0x00ff8000
    2fb8:	50039000 	.word	0x50039000
    2fbc:	00ff8020 	.word	0x00ff8020
    2fc0:	e000ed00 	.word	0xe000ed00
    2fc4:	05fa0004 	.word	0x05fa0004
    2fc8:	20000024 	.word	0x20000024
    2fcc:	03d09000 	.word	0x03d09000

00002fd0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2fd0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2fd2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    2fd4:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    2fd6:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    2fda:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    2fdc:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    2fe0:	d010      	beq.n	3004 <nrfx_flag32_alloc+0x34>
        new_mask = prev_mask & ~NRFX_BIT(idx);
    2fe2:	fa05 f204 	lsl.w	r2, r5, r4
    2fe6:	ea23 0202 	bic.w	r2, r3, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2fea:	e8d0 6fef 	ldaex	r6, [r0]
    2fee:	429e      	cmp	r6, r3
    2ff0:	d104      	bne.n	2ffc <nrfx_flag32_alloc+0x2c>
    2ff2:	e8c0 2fec 	stlex	ip, r2, [r0]
    2ff6:	f1bc 0f00 	cmp.w	ip, #0
    2ffa:	d1f6      	bne.n	2fea <nrfx_flag32_alloc+0x1a>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2ffc:	d1ea      	bne.n	2fd4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    2ffe:	4802      	ldr	r0, [pc, #8]	; (3008 <nrfx_flag32_alloc+0x38>)
    *p_flag = idx;
    3000:	700c      	strb	r4, [r1, #0]
}
    3002:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    3004:	4801      	ldr	r0, [pc, #4]	; (300c <nrfx_flag32_alloc+0x3c>)
    3006:	e7fc      	b.n	3002 <nrfx_flag32_alloc+0x32>
    3008:	0bad0000 	.word	0x0bad0000
    300c:	0bad0002 	.word	0x0bad0002

00003010 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3010:	6803      	ldr	r3, [r0, #0]
{
    3012:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    3014:	40cb      	lsrs	r3, r1
    3016:	07db      	lsls	r3, r3, #31
    3018:	d411      	bmi.n	303e <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    301a:	2301      	movs	r3, #1
    301c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    3020:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    3022:	ea41 0203 	orr.w	r2, r1, r3
    3026:	e8d0 4fef 	ldaex	r4, [r0]
    302a:	429c      	cmp	r4, r3
    302c:	d104      	bne.n	3038 <nrfx_flag32_free+0x28>
    302e:	e8c0 2fec 	stlex	ip, r2, [r0]
    3032:	f1bc 0f00 	cmp.w	ip, #0
    3036:	d1f6      	bne.n	3026 <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3038:	d1f2      	bne.n	3020 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    303a:	4802      	ldr	r0, [pc, #8]	; (3044 <nrfx_flag32_free+0x34>)
}
    303c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    303e:	4802      	ldr	r0, [pc, #8]	; (3048 <nrfx_flag32_free+0x38>)
    3040:	e7fc      	b.n	303c <nrfx_flag32_free+0x2c>
    3042:	bf00      	nop
    3044:	0bad0000 	.word	0x0bad0000
    3048:	0bad0004 	.word	0x0bad0004

0000304c <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    304c:	b508      	push	{r3, lr}
    switch (domain)
    304e:	b170      	cbz	r0, 306e <nrf_clock_is_running.constprop.0+0x22>
    3050:	2801      	cmp	r0, #1
    3052:	d01b      	beq.n	308c <nrf_clock_is_running.constprop.0+0x40>
        case NRF_CLOCK_DOMAIN_HFCLKAUDIO:
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
                   CLOCK_HFCLKAUDIOSTAT_STATE_Msk;
#endif
        default:
            NRFX_ASSERT(0);
    3054:	f44f 724f 	mov.w	r2, #828	; 0x33c
    3058:	4913      	ldr	r1, [pc, #76]	; (30a8 <nrf_clock_is_running.constprop.0+0x5c>)
    305a:	4814      	ldr	r0, [pc, #80]	; (30ac <nrf_clock_is_running.constprop.0+0x60>)
    305c:	f005 f85a 	bl	8114 <printk>
    3060:	4811      	ldr	r0, [pc, #68]	; (30a8 <nrf_clock_is_running.constprop.0+0x5c>)
    3062:	f44f 714f 	mov.w	r1, #828	; 0x33c
    3066:	f005 f8e0 	bl	822a <assert_post_action>
            return false;
    306a:	2000      	movs	r0, #0
    306c:	e00d      	b.n	308a <nrf_clock_is_running.constprop.0+0x3e>
            if (p_clk_src != NULL)
    306e:	b131      	cbz	r1, 307e <nrf_clock_is_running.constprop.0+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3070:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3074:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    3078:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    307c:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    307e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3082:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3086:	f3c0 4000 	ubfx	r0, r0, #16, #1
    }
    return false;
}
    308a:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    308c:	b131      	cbz	r1, 309c <nrf_clock_is_running.constprop.0+0x50>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    308e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3092:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    3096:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    309a:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    309c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30a0:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    30a4:	e7ef      	b.n	3086 <nrf_clock_is_running.constprop.0+0x3a>
    30a6:	bf00      	nop
    30a8:	00009951 	.word	0x00009951
    30ac:	00008d71 	.word	0x00008d71

000030b0 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    30b0:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    30b2:	4604      	mov	r4, r0
    30b4:	b940      	cbnz	r0, 30c8 <nrfx_clock_init+0x18>
    30b6:	4909      	ldr	r1, [pc, #36]	; (30dc <nrfx_clock_init+0x2c>)
    30b8:	4809      	ldr	r0, [pc, #36]	; (30e0 <nrfx_clock_init+0x30>)
    30ba:	22bd      	movs	r2, #189	; 0xbd
    30bc:	f005 f82a 	bl	8114 <printk>
    30c0:	21bd      	movs	r1, #189	; 0xbd
    30c2:	4806      	ldr	r0, [pc, #24]	; (30dc <nrfx_clock_init+0x2c>)
    30c4:	f005 f8b1 	bl	822a <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    30c8:	4b06      	ldr	r3, [pc, #24]	; (30e4 <nrfx_clock_init+0x34>)
    30ca:	791a      	ldrb	r2, [r3, #4]
    30cc:	b922      	cbnz	r2, 30d8 <nrfx_clock_init+0x28>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    30ce:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    30d0:	4805      	ldr	r0, [pc, #20]	; (30e8 <nrfx_clock_init+0x38>)
        m_clock_cb.event_handler = event_handler;
    30d2:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    30d4:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    30d6:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    30d8:	4804      	ldr	r0, [pc, #16]	; (30ec <nrfx_clock_init+0x3c>)
    return err_code;
    30da:	e7fc      	b.n	30d6 <nrfx_clock_init+0x26>
    30dc:	00009985 	.word	0x00009985
    30e0:	00008d71 	.word	0x00008d71
    30e4:	200009ec 	.word	0x200009ec
    30e8:	0bad0000 	.word	0x0bad0000
    30ec:	0bad000c 	.word	0x0bad000c

000030f0 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    30f0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    30f2:	4b0b      	ldr	r3, [pc, #44]	; (3120 <nrfx_clock_enable+0x30>)
    30f4:	791b      	ldrb	r3, [r3, #4]
    30f6:	b943      	cbnz	r3, 310a <nrfx_clock_enable+0x1a>
    30f8:	490a      	ldr	r1, [pc, #40]	; (3124 <nrfx_clock_enable+0x34>)
    30fa:	480b      	ldr	r0, [pc, #44]	; (3128 <nrfx_clock_enable+0x38>)
    30fc:	22d6      	movs	r2, #214	; 0xd6
    30fe:	f005 f809 	bl	8114 <printk>
    3102:	21d6      	movs	r1, #214	; 0xd6
    3104:	4807      	ldr	r0, [pc, #28]	; (3124 <nrfx_clock_enable+0x34>)
    3106:	f005 f890 	bl	822a <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    310a:	2005      	movs	r0, #5
    310c:	f7fe faf0 	bl	16f0 <arch_irq_is_enabled>
    3110:	b920      	cbnz	r0, 311c <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    3112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    3116:	2005      	movs	r0, #5
    3118:	f7fe bada 	b.w	16d0 <arch_irq_enable>
    311c:	bd08      	pop	{r3, pc}
    311e:	bf00      	nop
    3120:	200009ec 	.word	0x200009ec
    3124:	00009985 	.word	0x00009985
    3128:	00008d71 	.word	0x00008d71

0000312c <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    312c:	4b22      	ldr	r3, [pc, #136]	; (31b8 <nrfx_clock_start+0x8c>)
{
    312e:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3130:	791b      	ldrb	r3, [r3, #4]
{
    3132:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3134:	b953      	cbnz	r3, 314c <nrfx_clock_start+0x20>
    3136:	4921      	ldr	r1, [pc, #132]	; (31bc <nrfx_clock_start+0x90>)
    3138:	4821      	ldr	r0, [pc, #132]	; (31c0 <nrfx_clock_start+0x94>)
    313a:	f44f 7289 	mov.w	r2, #274	; 0x112
    313e:	f004 ffe9 	bl	8114 <printk>
    3142:	f44f 7189 	mov.w	r1, #274	; 0x112
    3146:	481d      	ldr	r0, [pc, #116]	; (31bc <nrfx_clock_start+0x90>)
    3148:	f005 f86f 	bl	822a <assert_post_action>
    switch (domain)
    314c:	b16c      	cbz	r4, 316a <nrfx_clock_start+0x3e>
    314e:	2c01      	cmp	r4, #1
    3150:	d028      	beq.n	31a4 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3152:	f44f 72a2 	mov.w	r2, #324	; 0x144
    3156:	4919      	ldr	r1, [pc, #100]	; (31bc <nrfx_clock_start+0x90>)
    3158:	4819      	ldr	r0, [pc, #100]	; (31c0 <nrfx_clock_start+0x94>)
    315a:	f004 ffdb 	bl	8114 <printk>
    315e:	f44f 71a2 	mov.w	r1, #324	; 0x144
    3162:	4816      	ldr	r0, [pc, #88]	; (31bc <nrfx_clock_start+0x90>)
    3164:	f005 f861 	bl	822a <assert_post_action>
            break;
    }
}
    3168:	e018      	b.n	319c <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    316a:	4620      	mov	r0, r4
    316c:	f10d 0107 	add.w	r1, sp, #7
    3170:	f7ff ff6c 	bl	304c <nrf_clock_is_running.constprop.0>
    3174:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3178:	b190      	cbz	r0, 31a0 <nrfx_clock_start+0x74>
    317a:	f89d 2007 	ldrb.w	r2, [sp, #7]
    317e:	2a02      	cmp	r2, #2
    3180:	d10e      	bne.n	31a0 <nrfx_clock_start+0x74>

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    3182:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3186:	2200      	movs	r2, #0
    3188:	4b0e      	ldr	r3, [pc, #56]	; (31c4 <nrfx_clock_start+0x98>)
    318a:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    318c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    318e:	2202      	movs	r2, #2
    3190:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3194:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3198:	2201      	movs	r2, #1
    319a:	609a      	str	r2, [r3, #8]
}
    319c:	b002      	add	sp, #8
    319e:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    31a0:	2201      	movs	r2, #1
    31a2:	e7ee      	b.n	3182 <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    31a4:	2200      	movs	r2, #0
    31a6:	4b08      	ldr	r3, [pc, #32]	; (31c8 <nrfx_clock_start+0x9c>)
    31a8:	601a      	str	r2, [r3, #0]
    31aa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    31ac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    31b0:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    31b4:	601c      	str	r4, [r3, #0]
}
    31b6:	e7f1      	b.n	319c <nrfx_clock_start+0x70>
    31b8:	200009ec 	.word	0x200009ec
    31bc:	00009985 	.word	0x00009985
    31c0:	00008d71 	.word	0x00008d71
    31c4:	50005104 	.word	0x50005104
    31c8:	50005100 	.word	0x50005100

000031cc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    31cc:	4b2d      	ldr	r3, [pc, #180]	; (3284 <nrfx_clock_stop+0xb8>)
{
    31ce:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    31d0:	791b      	ldrb	r3, [r3, #4]
{
    31d2:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    31d4:	b953      	cbnz	r3, 31ec <nrfx_clock_stop+0x20>
    31d6:	492c      	ldr	r1, [pc, #176]	; (3288 <nrfx_clock_stop+0xbc>)
    31d8:	482c      	ldr	r0, [pc, #176]	; (328c <nrfx_clock_stop+0xc0>)
    31da:	f240 124b 	movw	r2, #331	; 0x14b
    31de:	f004 ff99 	bl	8114 <printk>
    31e2:	f240 114b 	movw	r1, #331	; 0x14b
    31e6:	4828      	ldr	r0, [pc, #160]	; (3288 <nrfx_clock_stop+0xbc>)
    31e8:	f005 f81f 	bl	822a <assert_post_action>
    switch (domain)
    31ec:	b174      	cbz	r4, 320c <nrfx_clock_stop+0x40>
    31ee:	2c01      	cmp	r4, #1
    31f0:	d027      	beq.n	3242 <nrfx_clock_stop+0x76>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    31f2:	4925      	ldr	r1, [pc, #148]	; (3288 <nrfx_clock_stop+0xbc>)
    31f4:	4825      	ldr	r0, [pc, #148]	; (328c <nrfx_clock_stop+0xc0>)
    31f6:	f240 1267 	movw	r2, #359	; 0x167
    31fa:	f004 ff8b 	bl	8114 <printk>
    31fe:	f240 1167 	movw	r1, #359	; 0x167
    3202:	4821      	ldr	r0, [pc, #132]	; (3288 <nrfx_clock_stop+0xbc>)
    3204:	f005 f811 	bl	822a <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3208:	b002      	add	sp, #8
    320a:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    320c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3210:	2202      	movs	r2, #2
    3212:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3216:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3218:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    321c:	f242 7410 	movw	r4, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3220:	f503 7382 	add.w	r3, r3, #260	; 0x104
    3224:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3226:	4b1a      	ldr	r3, [pc, #104]	; (3290 <nrfx_clock_stop+0xc4>)
    3228:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    322a:	2100      	movs	r1, #0
    322c:	4608      	mov	r0, r1
    322e:	f7ff ff0d 	bl	304c <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3232:	2800      	cmp	r0, #0
    3234:	d0e8      	beq.n	3208 <nrfx_clock_stop+0x3c>
    3236:	2001      	movs	r0, #1
    3238:	f005 f94f 	bl	84da <nrfx_busy_wait>
    323c:	3c01      	subs	r4, #1
    323e:	d1f4      	bne.n	322a <nrfx_clock_stop+0x5e>
    3240:	e7e2      	b.n	3208 <nrfx_clock_stop+0x3c>
    p_reg->INTENCLR = mask;
    3242:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3246:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    3248:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    324c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3250:	f503 7380 	add.w	r3, r3, #256	; 0x100
    3254:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3256:	4b0f      	ldr	r3, [pc, #60]	; (3294 <nrfx_clock_stop+0xc8>)
    3258:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    325a:	f88d 4007 	strb.w	r4, [sp, #7]
    325e:	f242 7410 	movw	r4, #10000	; 0x2710
    3262:	2001      	movs	r0, #1
    3264:	f10d 0107 	add.w	r1, sp, #7
    3268:	f7ff fef0 	bl	304c <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    326c:	2800      	cmp	r0, #0
    326e:	d0cb      	beq.n	3208 <nrfx_clock_stop+0x3c>
    3270:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3274:	2801      	cmp	r0, #1
    3276:	d1c7      	bne.n	3208 <nrfx_clock_stop+0x3c>
    3278:	f005 f92f 	bl	84da <nrfx_busy_wait>
    327c:	3c01      	subs	r4, #1
    327e:	d1f0      	bne.n	3262 <nrfx_clock_stop+0x96>
    3280:	e7c2      	b.n	3208 <nrfx_clock_stop+0x3c>
    3282:	bf00      	nop
    3284:	200009ec 	.word	0x200009ec
    3288:	00009985 	.word	0x00009985
    328c:	00008d71 	.word	0x00008d71
    3290:	5000500c 	.word	0x5000500c
    3294:	50005004 	.word	0x50005004

00003298 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3298:	4b16      	ldr	r3, [pc, #88]	; (32f4 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    329a:	b507      	push	{r0, r1, r2, lr}
    329c:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    329e:	b152      	cbz	r2, 32b6 <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    32a0:	2000      	movs	r0, #0
    32a2:	6018      	str	r0, [r3, #0]
    32a4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    32a6:	2201      	movs	r2, #1
    32a8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    32ac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    32b0:	4b11      	ldr	r3, [pc, #68]	; (32f8 <nrfx_power_clock_irq_handler+0x60>)
    32b2:	681b      	ldr	r3, [r3, #0]
    32b4:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    32b6:	4b11      	ldr	r3, [pc, #68]	; (32fc <nrfx_power_clock_irq_handler+0x64>)
    32b8:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    32ba:	b18a      	cbz	r2, 32e0 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    32bc:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    32be:	f10d 0107 	add.w	r1, sp, #7
    32c2:	6018      	str	r0, [r3, #0]
    32c4:	681b      	ldr	r3, [r3, #0]
    32c6:	f7ff fec1 	bl	304c <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    32ca:	f89d 1007 	ldrb.w	r1, [sp, #7]
    32ce:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    32d2:	2901      	cmp	r1, #1
    32d4:	f04f 0202 	mov.w	r2, #2
    32d8:	d105      	bne.n	32e6 <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    32da:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    32de:	6099      	str	r1, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    32e0:	b003      	add	sp, #12
    32e2:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    32e6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    32ea:	4b03      	ldr	r3, [pc, #12]	; (32f8 <nrfx_power_clock_irq_handler+0x60>)
    32ec:	2001      	movs	r0, #1
    32ee:	681b      	ldr	r3, [r3, #0]
    32f0:	4798      	blx	r3
}
    32f2:	e7f5      	b.n	32e0 <nrfx_power_clock_irq_handler+0x48>
    32f4:	50005100 	.word	0x50005100
    32f8:	200009ec 	.word	0x200009ec
    32fc:	50005104 	.word	0x50005104

00003300 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3300:	4b05      	ldr	r3, [pc, #20]	; (3318 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3302:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3304:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    3308:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
    330c:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    3310:	4258      	negs	r0, r3
    3312:	4158      	adcs	r0, r3
    3314:	4770      	bx	lr
    3316:	bf00      	nop
    3318:	20000028 	.word	0x20000028

0000331c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    331c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    331e:	4c0d      	ldr	r4, [pc, #52]	; (3354 <call_handler+0x38>)
    3320:	f100 0308 	add.w	r3, r0, #8
    3324:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    3328:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    332a:	05da      	lsls	r2, r3, #23
{
    332c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    332e:	d507      	bpl.n	3340 <call_handler+0x24>
    3330:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    3334:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    3338:	6852      	ldr	r2, [r2, #4]
    333a:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    333e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3340:	68a3      	ldr	r3, [r4, #8]
    3342:	b12b      	cbz	r3, 3350 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3344:	4631      	mov	r1, r6
    3346:	4628      	mov	r0, r5
    3348:	68e2      	ldr	r2, [r4, #12]
    }
}
    334a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    334e:	4718      	bx	r3
}
    3350:	bd70      	pop	{r4, r5, r6, pc}
    3352:	bf00      	nop
    3354:	20000028 	.word	0x20000028

00003358 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3358:	4b19      	ldr	r3, [pc, #100]	; (33c0 <release_handler+0x68>)
    335a:	3008      	adds	r0, #8
    335c:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
{
    3360:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3362:	05d1      	lsls	r1, r2, #23
    3364:	d51d      	bpl.n	33a2 <release_handler+0x4a>
    3366:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    336a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    336e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3372:	2000      	movs	r0, #0
    3374:	f103 0410 	add.w	r4, r3, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3378:	f834 2b02 	ldrh.w	r2, [r4], #2
    337c:	f412 7f80 	tst.w	r2, #256	; 0x100
    3380:	d003      	beq.n	338a <release_handler+0x32>
    3382:	f3c2 2243 	ubfx	r2, r2, #9, #4
    3386:	4291      	cmp	r1, r2
    3388:	d00b      	beq.n	33a2 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    338a:	3001      	adds	r0, #1
    338c:	2820      	cmp	r0, #32
    338e:	d1f3      	bne.n	3378 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    3390:	2200      	movs	r2, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3392:	480c      	ldr	r0, [pc, #48]	; (33c4 <release_handler+0x6c>)
        m_cb.handlers[handler_id].handler = NULL;
    3394:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3398:	f7ff fe3a 	bl	3010 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    339c:	4b0a      	ldr	r3, [pc, #40]	; (33c8 <release_handler+0x70>)
    339e:	4298      	cmp	r0, r3
    33a0:	d100      	bne.n	33a4 <release_handler+0x4c>
}
    33a2:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    33a4:	4909      	ldr	r1, [pc, #36]	; (33cc <release_handler+0x74>)
    33a6:	480a      	ldr	r0, [pc, #40]	; (33d0 <release_handler+0x78>)
    33a8:	f44f 7299 	mov.w	r2, #306	; 0x132
    33ac:	f004 feb2 	bl	8114 <printk>
}
    33b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    33b4:	f44f 7199 	mov.w	r1, #306	; 0x132
    33b8:	4804      	ldr	r0, [pc, #16]	; (33cc <release_handler+0x74>)
    33ba:	f004 bf36 	b.w	822a <assert_post_action>
    33be:	bf00      	nop
    33c0:	20000028 	.word	0x20000028
    33c4:	2000007c 	.word	0x2000007c
    33c8:	0bad0000 	.word	0x0bad0000
    33cc:	000099c2 	.word	0x000099c2
    33d0:	00008d71 	.word	0x00008d71

000033d4 <pin_handler_trigger_uninit>:
{
    33d4:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    33d6:	4c0c      	ldr	r4, [pc, #48]	; (3408 <pin_handler_trigger_uninit+0x34>)
    33d8:	f100 0508 	add.w	r5, r0, #8
    33dc:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    33e0:	069a      	lsls	r2, r3, #26
    33e2:	d50a      	bpl.n	33fa <pin_handler_trigger_uninit+0x26>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    33e4:	2200      	movs	r2, #0
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    33e6:	0b5b      	lsrs	r3, r3, #13
    33e8:	009b      	lsls	r3, r3, #2
    33ea:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    33ee:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    33f2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    33f6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    release_handler(pin);
    33fa:	f7ff ffad 	bl	3358 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    33fe:	2300      	movs	r3, #0
    3400:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    3404:	bd38      	pop	{r3, r4, r5, pc}
    3406:	bf00      	nop
    3408:	20000028 	.word	0x20000028

0000340c <nrf_gpio_pin_port_decode>:
{
    340c:	b510      	push	{r4, lr}
    340e:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3410:	6800      	ldr	r0, [r0, #0]
    3412:	f005 f864 	bl	84de <nrf_gpio_pin_present_check>
    3416:	b950      	cbnz	r0, 342e <nrf_gpio_pin_port_decode+0x22>
    3418:	490e      	ldr	r1, [pc, #56]	; (3454 <nrf_gpio_pin_port_decode+0x48>)
    341a:	480f      	ldr	r0, [pc, #60]	; (3458 <nrf_gpio_pin_port_decode+0x4c>)
    341c:	f240 2229 	movw	r2, #553	; 0x229
    3420:	f004 fe78 	bl	8114 <printk>
    3424:	f240 2129 	movw	r1, #553	; 0x229
    3428:	480a      	ldr	r0, [pc, #40]	; (3454 <nrf_gpio_pin_port_decode+0x48>)
    342a:	f004 fefe 	bl	822a <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    342e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3430:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3434:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3436:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3438:	d00a      	beq.n	3450 <nrf_gpio_pin_port_decode+0x44>
            NRFX_ASSERT(0);
    343a:	4906      	ldr	r1, [pc, #24]	; (3454 <nrf_gpio_pin_port_decode+0x48>)
    343c:	4806      	ldr	r0, [pc, #24]	; (3458 <nrf_gpio_pin_port_decode+0x4c>)
    343e:	f240 222e 	movw	r2, #558	; 0x22e
    3442:	f004 fe67 	bl	8114 <printk>
    3446:	f240 212e 	movw	r1, #558	; 0x22e
    344a:	4802      	ldr	r0, [pc, #8]	; (3454 <nrf_gpio_pin_port_decode+0x48>)
    344c:	f004 feed 	bl	822a <assert_post_action>
}
    3450:	4802      	ldr	r0, [pc, #8]	; (345c <nrf_gpio_pin_port_decode+0x50>)
    3452:	bd10      	pop	{r4, pc}
    3454:	0000985e 	.word	0x0000985e
    3458:	00008d71 	.word	0x00008d71
    345c:	50842500 	.word	0x50842500

00003460 <nrfx_gpiote_input_configure>:
{
    3460:	b5f0      	push	{r4, r5, r6, r7, lr}
    3462:	4604      	mov	r4, r0
    3464:	4616      	mov	r6, r2
    3466:	461d      	mov	r5, r3
    3468:	b085      	sub	sp, #20
    if (p_input_config)
    346a:	b1f1      	cbz	r1, 34aa <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    346c:	f7ff ff48 	bl	3300 <pin_is_task_output>
    3470:	b110      	cbz	r0, 3478 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    3472:	484a      	ldr	r0, [pc, #296]	; (359c <nrfx_gpiote_input_configure+0x13c>)
}
    3474:	b005      	add	sp, #20
    3476:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3478:	460b      	mov	r3, r1
    347a:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    347e:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    3482:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3486:	f10d 020f 	add.w	r2, sp, #15
    348a:	f10d 010e 	add.w	r1, sp, #14
    348e:	4620      	mov	r0, r4
    3490:	f005 f835 	bl	84fe <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3494:	4a42      	ldr	r2, [pc, #264]	; (35a0 <nrfx_gpiote_input_configure+0x140>)
    3496:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    349a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    349e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    34a2:	f043 0301 	orr.w	r3, r3, #1
    34a6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    34aa:	b196      	cbz	r6, 34d2 <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    34ac:	4b3c      	ldr	r3, [pc, #240]	; (35a0 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    34ae:	7830      	ldrb	r0, [r6, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    34b0:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    34b2:	f104 0608 	add.w	r6, r4, #8
    34b6:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    34ba:	078f      	lsls	r7, r1, #30
    34bc:	d50c      	bpl.n	34d8 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
    34be:	2a00      	cmp	r2, #0
    34c0:	d1d7      	bne.n	3472 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    34c2:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    34c6:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    34ca:	ea42 0080 	orr.w	r0, r2, r0, lsl #2
    34ce:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
    if (p_handler_config)
    34d2:	bbcd      	cbnz	r5, 3548 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
    34d4:	4833      	ldr	r0, [pc, #204]	; (35a4 <nrfx_gpiote_input_configure+0x144>)
    34d6:	e7cd      	b.n	3474 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    34d8:	f021 0120 	bic.w	r1, r1, #32
    34dc:	04c9      	lsls	r1, r1, #19
    34de:	0cc9      	lsrs	r1, r1, #19
    34e0:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    34e4:	2a00      	cmp	r2, #0
    34e6:	d0ec      	beq.n	34c2 <nrfx_gpiote_input_configure+0x62>
                if (!edge)
    34e8:	2803      	cmp	r0, #3
    34ea:	d8c2      	bhi.n	3472 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    34ec:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    34f0:	4662      	mov	r2, ip
    34f2:	0092      	lsls	r2, r2, #2
    34f4:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    34f8:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    34fc:	b920      	cbnz	r0, 3508 <nrfx_gpiote_input_configure+0xa8>
    p_reg->CONFIG[idx] = 0;
    34fe:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    3502:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
#endif
}
    3506:	e7dc      	b.n	34c2 <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3508:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    350c:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    3510:	f027 0703 	bic.w	r7, r7, #3
    3514:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3518:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
    351c:	f041 0120 	orr.w	r1, r1, #32
    3520:	f427 3747 	bic.w	r7, r7, #203776	; 0x31c00
    3524:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    3528:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    352c:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    3530:	0227      	lsls	r7, r4, #8
    3532:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    3536:	ea4e 4e00 	orr.w	lr, lr, r0, lsl #16
    353a:	ea47 070e 	orr.w	r7, r7, lr
    353e:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
    3542:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    3546:	e7bc      	b.n	34c2 <nrfx_gpiote_input_configure+0x62>
    release_handler(pin);
    3548:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    354a:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    354e:	f7ff ff03 	bl	3358 <release_handler>
    if (!handler)
    3552:	2e00      	cmp	r6, #0
    3554:	d0be      	beq.n	34d4 <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3556:	4d12      	ldr	r5, [pc, #72]	; (35a0 <nrfx_gpiote_input_configure+0x140>)
    3558:	682b      	ldr	r3, [r5, #0]
    355a:	429e      	cmp	r6, r3
    355c:	d104      	bne.n	3568 <nrfx_gpiote_input_configure+0x108>
    355e:	686b      	ldr	r3, [r5, #4]
    3560:	429f      	cmp	r7, r3
    3562:	d101      	bne.n	3568 <nrfx_gpiote_input_configure+0x108>
    3564:	2200      	movs	r2, #0
    3566:	e00a      	b.n	357e <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3568:	480f      	ldr	r0, [pc, #60]	; (35a8 <nrfx_gpiote_input_configure+0x148>)
    356a:	f10d 010f 	add.w	r1, sp, #15
    356e:	f7ff fd2f 	bl	2fd0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3572:	4b0c      	ldr	r3, [pc, #48]	; (35a4 <nrfx_gpiote_input_configure+0x144>)
    3574:	4298      	cmp	r0, r3
    3576:	f47f af7d 	bne.w	3474 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    357a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    357e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3582:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3584:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3586:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    358a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    358e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    3592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3596:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    359a:	e79b      	b.n	34d4 <nrfx_gpiote_input_configure+0x74>
    359c:	0bad0004 	.word	0x0bad0004
    35a0:	20000028 	.word	0x20000028
    35a4:	0bad0000 	.word	0x0bad0000
    35a8:	2000007c 	.word	0x2000007c

000035ac <nrfx_gpiote_output_configure>:
{
    35ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ae:	4604      	mov	r4, r0
    35b0:	4615      	mov	r5, r2
    35b2:	b085      	sub	sp, #20
    if (p_config)
    35b4:	b309      	cbz	r1, 35fa <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    35b6:	4e33      	ldr	r6, [pc, #204]	; (3684 <nrfx_gpiote_output_configure+0xd8>)
    35b8:	f100 0708 	add.w	r7, r0, #8
    35bc:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    35c0:	0798      	lsls	r0, r3, #30
    35c2:	d401      	bmi.n	35c8 <nrfx_gpiote_output_configure+0x1c>
    35c4:	069a      	lsls	r2, r3, #26
    35c6:	d45a      	bmi.n	367e <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    35c8:	f013 0f1c 	tst.w	r3, #28
    35cc:	d002      	beq.n	35d4 <nrfx_gpiote_output_configure+0x28>
    35ce:	784b      	ldrb	r3, [r1, #1]
    35d0:	2b01      	cmp	r3, #1
    35d2:	d054      	beq.n	367e <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    35d4:	2301      	movs	r3, #1
    35d6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    35da:	2300      	movs	r3, #0
    35dc:	1c4a      	adds	r2, r1, #1
    35de:	e9cd 1300 	strd	r1, r3, [sp]
    35e2:	4620      	mov	r0, r4
    35e4:	1c8b      	adds	r3, r1, #2
    35e6:	f10d 010f 	add.w	r1, sp, #15
    35ea:	f004 ff88 	bl	84fe <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    35ee:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    35f2:	f043 0303 	orr.w	r3, r3, #3
    35f6:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    35fa:	b915      	cbnz	r5, 3602 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    35fc:	4822      	ldr	r0, [pc, #136]	; (3688 <nrfx_gpiote_output_configure+0xdc>)
}
    35fe:	b005      	add	sp, #20
    3600:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3602:	4e20      	ldr	r6, [pc, #128]	; (3684 <nrfx_gpiote_output_configure+0xd8>)
    3604:	f104 0708 	add.w	r7, r4, #8
    3608:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    360c:	0783      	lsls	r3, r0, #30
    360e:	d536      	bpl.n	367e <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    3610:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    3614:	2300      	movs	r3, #0
    3616:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3618:	f020 0020 	bic.w	r0, r0, #32
    361c:	0089      	lsls	r1, r1, #2
    361e:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    3622:	04c0      	lsls	r0, r0, #19
    3624:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    3628:	0cc0      	lsrs	r0, r0, #19
    362a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    362e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    3632:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3636:	786a      	ldrb	r2, [r5, #1]
    3638:	2a00      	cmp	r2, #0
    363a:	d0df      	beq.n	35fc <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    363c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3640:	78ad      	ldrb	r5, [r5, #2]
    3642:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    3646:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    364a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    364e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3652:	0223      	lsls	r3, r4, #8
    3654:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3658:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    365a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    365e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3662:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3664:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3666:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    366a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    366e:	432b      	orrs	r3, r5
    3670:	f040 0020 	orr.w	r0, r0, #32
    3674:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3678:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    367c:	e7be      	b.n	35fc <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    367e:	4803      	ldr	r0, [pc, #12]	; (368c <nrfx_gpiote_output_configure+0xe0>)
    3680:	e7bd      	b.n	35fe <nrfx_gpiote_output_configure+0x52>
    3682:	bf00      	nop
    3684:	20000028 	.word	0x20000028
    3688:	0bad0000 	.word	0x0bad0000
    368c:	0bad0004 	.word	0x0bad0004

00003690 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3690:	4b01      	ldr	r3, [pc, #4]	; (3698 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    3692:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3696:	4770      	bx	lr
    3698:	20000028 	.word	0x20000028

0000369c <nrfx_gpiote_channel_get>:
{
    369c:	b538      	push	{r3, r4, r5, lr}
    369e:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    36a0:	460d      	mov	r5, r1
    36a2:	b951      	cbnz	r1, 36ba <nrfx_gpiote_channel_get+0x1e>
    36a4:	490a      	ldr	r1, [pc, #40]	; (36d0 <nrfx_gpiote_channel_get+0x34>)
    36a6:	480b      	ldr	r0, [pc, #44]	; (36d4 <nrfx_gpiote_channel_get+0x38>)
    36a8:	f240 2235 	movw	r2, #565	; 0x235
    36ac:	f004 fd32 	bl	8114 <printk>
    36b0:	f240 2135 	movw	r1, #565	; 0x235
    36b4:	4806      	ldr	r0, [pc, #24]	; (36d0 <nrfx_gpiote_channel_get+0x34>)
    36b6:	f004 fdb8 	bl	822a <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    36ba:	4b07      	ldr	r3, [pc, #28]	; (36d8 <nrfx_gpiote_channel_get+0x3c>)
    36bc:	3408      	adds	r4, #8
    36be:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
    36c2:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    36c4:	bf43      	ittte	mi
    36c6:	0b5b      	lsrmi	r3, r3, #13
    36c8:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
    36ca:	4804      	ldrmi	r0, [pc, #16]	; (36dc <nrfx_gpiote_channel_get+0x40>)
        return NRFX_ERROR_INVALID_PARAM;
    36cc:	4804      	ldrpl	r0, [pc, #16]	; (36e0 <nrfx_gpiote_channel_get+0x44>)
}
    36ce:	bd38      	pop	{r3, r4, r5, pc}
    36d0:	000099c2 	.word	0x000099c2
    36d4:	00008d71 	.word	0x00008d71
    36d8:	20000028 	.word	0x20000028
    36dc:	0bad0000 	.word	0x0bad0000
    36e0:	0bad0004 	.word	0x0bad0004

000036e4 <nrfx_gpiote_init>:
{
    36e4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    36e6:	4c0e      	ldr	r4, [pc, #56]	; (3720 <nrfx_gpiote_init+0x3c>)
    36e8:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    36ec:	b9b5      	cbnz	r5, 371c <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    36ee:	2240      	movs	r2, #64	; 0x40
    36f0:	4629      	mov	r1, r5
    36f2:	f104 0010 	add.w	r0, r4, #16
    36f6:	f004 fe53 	bl	83a0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    36fa:	200d      	movs	r0, #13
    36fc:	f7fd ffe8 	bl	16d0 <arch_irq_enable>
    p_reg->INTENSET = mask;
    3700:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3704:	4b07      	ldr	r3, [pc, #28]	; (3724 <nrfx_gpiote_init+0x40>)
    return err_code;
    3706:	4808      	ldr	r0, [pc, #32]	; (3728 <nrfx_gpiote_init+0x44>)
    3708:	601d      	str	r5, [r3, #0]
    370a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    370c:	4b07      	ldr	r3, [pc, #28]	; (372c <nrfx_gpiote_init+0x48>)
    370e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3712:	2301      	movs	r3, #1
    3714:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3718:	6563      	str	r3, [r4, #84]	; 0x54
}
    371a:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    371c:	4804      	ldr	r0, [pc, #16]	; (3730 <nrfx_gpiote_init+0x4c>)
    371e:	e7fc      	b.n	371a <nrfx_gpiote_init+0x36>
    3720:	20000028 	.word	0x20000028
    3724:	5000d17c 	.word	0x5000d17c
    3728:	0bad0000 	.word	0x0bad0000
    372c:	5000d000 	.word	0x5000d000
    3730:	0bad0005 	.word	0x0bad0005

00003734 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3734:	4b03      	ldr	r3, [pc, #12]	; (3744 <nrfx_gpiote_is_init+0x10>)
    3736:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    373a:	3800      	subs	r0, #0
    373c:	bf18      	it	ne
    373e:	2001      	movne	r0, #1
    3740:	4770      	bx	lr
    3742:	bf00      	nop
    3744:	20000028 	.word	0x20000028

00003748 <nrfx_gpiote_channel_free>:
{
    3748:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    374a:	4801      	ldr	r0, [pc, #4]	; (3750 <nrfx_gpiote_channel_free+0x8>)
    374c:	f7ff bc60 	b.w	3010 <nrfx_flag32_free>
    3750:	20000078 	.word	0x20000078

00003754 <nrfx_gpiote_channel_alloc>:
{
    3754:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3756:	4801      	ldr	r0, [pc, #4]	; (375c <nrfx_gpiote_channel_alloc+0x8>)
    3758:	f7ff bc3a 	b.w	2fd0 <nrfx_flag32_alloc>
    375c:	20000078 	.word	0x20000078

00003760 <nrfx_gpiote_trigger_enable>:
{
    3760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3762:	4d2f      	ldr	r5, [pc, #188]	; (3820 <nrfx_gpiote_trigger_enable+0xc0>)
    3764:	f100 0708 	add.w	r7, r0, #8
    3768:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
{
    376c:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
    376e:	f013 0f1c 	tst.w	r3, #28
{
    3772:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    3774:	d10a      	bne.n	378c <nrfx_gpiote_trigger_enable+0x2c>
    3776:	492b      	ldr	r1, [pc, #172]	; (3824 <nrfx_gpiote_trigger_enable+0xc4>)
    3778:	482b      	ldr	r0, [pc, #172]	; (3828 <nrfx_gpiote_trigger_enable+0xc8>)
    377a:	f240 32df 	movw	r2, #991	; 0x3df
    377e:	f004 fcc9 	bl	8114 <printk>
    3782:	f240 31df 	movw	r1, #991	; 0x3df
    3786:	4827      	ldr	r0, [pc, #156]	; (3824 <nrfx_gpiote_trigger_enable+0xc4>)
    3788:	f004 fd4f 	bl	822a <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    378c:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3790:	0683      	lsls	r3, r0, #26
    3792:	d51f      	bpl.n	37d4 <nrfx_gpiote_trigger_enable+0x74>
    3794:	f010 0302 	ands.w	r3, r0, #2
    3798:	d11c      	bne.n	37d4 <nrfx_gpiote_trigger_enable+0x74>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    379a:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    379c:	4608      	mov	r0, r1
    379e:	f004 feaa 	bl	84f6 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    37a2:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    37a6:	f500 4050 	add.w	r0, r0, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    37aa:	6003      	str	r3, [r0, #0]
    37ac:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    37ae:	008b      	lsls	r3, r1, #2
    37b0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    37b4:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    37b8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    37bc:	f042 0201 	orr.w	r2, r2, #1
    37c0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    37c4:	b126      	cbz	r6, 37d0 <nrfx_gpiote_trigger_enable+0x70>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    37c6:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
    37c8:	4a18      	ldr	r2, [pc, #96]	; (382c <nrfx_gpiote_trigger_enable+0xcc>)
    37ca:	408b      	lsls	r3, r1
    37cc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    37d0:	b003      	add	sp, #12
    37d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    37d4:	b956      	cbnz	r6, 37ec <nrfx_gpiote_trigger_enable+0x8c>
    37d6:	4913      	ldr	r1, [pc, #76]	; (3824 <nrfx_gpiote_trigger_enable+0xc4>)
    37d8:	4813      	ldr	r0, [pc, #76]	; (3828 <nrfx_gpiote_trigger_enable+0xc8>)
    37da:	f240 32ee 	movw	r2, #1006	; 0x3ee
    37de:	f004 fc99 	bl	8114 <printk>
    37e2:	f240 31ee 	movw	r1, #1006	; 0x3ee
    37e6:	480f      	ldr	r0, [pc, #60]	; (3824 <nrfx_gpiote_trigger_enable+0xc4>)
    37e8:	f004 fd1f 	bl	822a <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    37ec:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    37f0:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    37f4:	2b04      	cmp	r3, #4
    37f6:	d00f      	beq.n	3818 <nrfx_gpiote_trigger_enable+0xb8>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    37f8:	2b05      	cmp	r3, #5
    37fa:	d00f      	beq.n	381c <nrfx_gpiote_trigger_enable+0xbc>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    37fc:	a801      	add	r0, sp, #4
    37fe:	9401      	str	r4, [sp, #4]
    3800:	f7ff fe04 	bl	340c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3804:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    3806:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3808:	40d9      	lsrs	r1, r3
    380a:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    380e:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3810:	4620      	mov	r0, r4
    3812:	f004 febf 	bl	8594 <nrf_gpio_cfg_sense_set>
}
    3816:	e7db      	b.n	37d0 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3818:	2103      	movs	r1, #3
    381a:	e7f9      	b.n	3810 <nrfx_gpiote_trigger_enable+0xb0>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    381c:	2102      	movs	r1, #2
    381e:	e7f7      	b.n	3810 <nrfx_gpiote_trigger_enable+0xb0>
    3820:	20000028 	.word	0x20000028
    3824:	000099c2 	.word	0x000099c2
    3828:	00008d71 	.word	0x00008d71
    382c:	5000d000 	.word	0x5000d000

00003830 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3830:	4b0e      	ldr	r3, [pc, #56]	; (386c <nrfx_gpiote_trigger_disable+0x3c>)
    3832:	f100 0208 	add.w	r2, r0, #8
    3836:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    383a:	0699      	lsls	r1, r3, #26
    383c:	d513      	bpl.n	3866 <nrfx_gpiote_trigger_disable+0x36>
    383e:	079a      	lsls	r2, r3, #30
    3840:	d411      	bmi.n	3866 <nrfx_gpiote_trigger_disable+0x36>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3842:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3844:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3846:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    3848:	4909      	ldr	r1, [pc, #36]	; (3870 <nrfx_gpiote_trigger_disable+0x40>)
    384a:	009b      	lsls	r3, r3, #2
    384c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3850:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3854:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    3858:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    385c:	f022 0203 	bic.w	r2, r2, #3
    3860:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    3864:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3866:	2100      	movs	r1, #0
    3868:	f004 be94 	b.w	8594 <nrf_gpio_cfg_sense_set>
    386c:	20000028 	.word	0x20000028
    3870:	5000d000 	.word	0x5000d000

00003874 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3874:	4b0d      	ldr	r3, [pc, #52]	; (38ac <nrfx_gpiote_pin_uninit+0x38>)
    3876:	f100 0208 	add.w	r2, r0, #8
    387a:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
{
    387e:	b513      	push	{r0, r1, r4, lr}
    if (!pin_in_use(pin))
    3880:	07db      	lsls	r3, r3, #31
{
    3882:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3884:	d510      	bpl.n	38a8 <nrfx_gpiote_pin_uninit+0x34>
    nrfx_gpiote_trigger_disable(pin);
    3886:	f7ff ffd3 	bl	3830 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    388a:	4620      	mov	r0, r4
    388c:	f7ff fda2 	bl	33d4 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3890:	a801      	add	r0, sp, #4
    3892:	9401      	str	r4, [sp, #4]
    3894:	f7ff fdba 	bl	340c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3898:	2202      	movs	r2, #2
    389a:	9b01      	ldr	r3, [sp, #4]
    389c:	3380      	adds	r3, #128	; 0x80
    389e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    38a2:	4803      	ldr	r0, [pc, #12]	; (38b0 <nrfx_gpiote_pin_uninit+0x3c>)
}
    38a4:	b002      	add	sp, #8
    38a6:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    38a8:	4802      	ldr	r0, [pc, #8]	; (38b4 <nrfx_gpiote_pin_uninit+0x40>)
    38aa:	e7fb      	b.n	38a4 <nrfx_gpiote_pin_uninit+0x30>
    38ac:	20000028 	.word	0x20000028
    38b0:	0bad0000 	.word	0x0bad0000
    38b4:	0bad0004 	.word	0x0bad0004

000038b8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    38b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    38bc:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    38be:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    38c0:	4634      	mov	r4, r6
{
    38c2:	4b52      	ldr	r3, [pc, #328]	; (3a0c <nrfx_gpiote_irq_handler+0x154>)
    return p_reg->INTENSET & mask;
    38c4:	4852      	ldr	r0, [pc, #328]	; (3a10 <nrfx_gpiote_irq_handler+0x158>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    38c6:	4953      	ldr	r1, [pc, #332]	; (3a14 <nrfx_gpiote_irq_handler+0x15c>)
{
    38c8:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    38ca:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    38cc:	b135      	cbz	r5, 38dc <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    38ce:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    38d2:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    38d4:	bf1e      	ittt	ne
    38d6:	601c      	strne	r4, [r3, #0]
    38d8:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    38da:	4316      	orrne	r6, r2
        }
        mask <<= 1;
    38dc:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    38de:	428b      	cmp	r3, r1
        mask <<= 1;
    38e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    38e4:	d1f1      	bne.n	38ca <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    38e6:	4b4c      	ldr	r3, [pc, #304]	; (3a18 <nrfx_gpiote_irq_handler+0x160>)
    38e8:	681a      	ldr	r2, [r3, #0]
    38ea:	4698      	mov	r8, r3
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    38ec:	b182      	cbz	r2, 3910 <nrfx_gpiote_irq_handler+0x58>
        *p_masks = gpio_regs[i]->LATCH;
    38ee:	4f4b      	ldr	r7, [pc, #300]	; (3a1c <nrfx_gpiote_irq_handler+0x164>)
    38f0:	6a3b      	ldr	r3, [r7, #32]
    38f2:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
    38f4:	623b      	str	r3, [r7, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    38f6:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
    38fa:	9c02      	ldr	r4, [sp, #8]
    38fc:	b954      	cbnz	r4, 3914 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    38fe:	f8c8 4000 	str.w	r4, [r8]
    3902:	f8d8 3000 	ldr.w	r3, [r8]
        *p_masks = gpio_regs[i]->LATCH;
    3906:	6a3b      	ldr	r3, [r7, #32]
    3908:	9302      	str	r3, [sp, #8]
        gpio_regs[i]->LATCH = *p_masks;
    390a:	623b      	str	r3, [r7, #32]
        if (latch[port_idx])
    390c:	2b00      	cmp	r3, #0
    390e:	d1f2      	bne.n	38f6 <nrfx_gpiote_irq_handler+0x3e>
        mask &= ~NRFX_BIT(ch);
    3910:	2401      	movs	r4, #1
    3912:	e076      	b.n	3a02 <nrfx_gpiote_irq_handler+0x14a>
                uint32_t pin = NRF_CTZ(latch[i]);
    3914:	fa94 f4a4 	rbit	r4, r4
    3918:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    391c:	4a40      	ldr	r2, [pc, #256]	; (3a20 <nrfx_gpiote_irq_handler+0x168>)
    391e:	f104 0308 	add.w	r3, r4, #8
    3922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3926:	08e5      	lsrs	r5, r4, #3
    3928:	089a      	lsrs	r2, r3, #2
    392a:	f3c3 0b82 	ubfx	fp, r3, #2, #3
    bit = BITMASK_RELBIT_GET(bit);
    392e:	f004 0107 	and.w	r1, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3932:	ab02      	add	r3, sp, #8
    3934:	fa09 f001 	lsl.w	r0, r9, r1
    3938:	5d59      	ldrb	r1, [r3, r5]
    393a:	9201      	str	r2, [sp, #4]
    393c:	ea21 0100 	bic.w	r1, r1, r0
    3940:	5559      	strb	r1, [r3, r5]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3942:	a803      	add	r0, sp, #12
    3944:	9403      	str	r4, [sp, #12]
    3946:	f7ff fd61 	bl	340c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    394a:	9903      	ldr	r1, [sp, #12]
    if (is_level(trigger))
    394c:	9a01      	ldr	r2, [sp, #4]
    394e:	3180      	adds	r1, #128	; 0x80
    3950:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    3954:	0753      	lsls	r3, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3956:	46da      	mov	sl, fp
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    3958:	f3c5 4501 	ubfx	r5, r5, #16, #2
    if (is_level(trigger))
    395c:	d521      	bpl.n	39a2 <nrfx_gpiote_irq_handler+0xea>
        call_handler(pin, trigger);
    395e:	4659      	mov	r1, fp
    3960:	4620      	mov	r0, r4
    3962:	f7ff fcdb 	bl	331c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3966:	a803      	add	r0, sp, #12
    3968:	9403      	str	r4, [sp, #12]
    396a:	f7ff fd4f 	bl	340c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    396e:	9b03      	ldr	r3, [sp, #12]
    3970:	b2ed      	uxtb	r5, r5
    3972:	3380      	adds	r3, #128	; 0x80
    3974:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3978:	f3c3 4301 	ubfx	r3, r3, #16, #2
    397c:	429d      	cmp	r5, r3
    397e:	d107      	bne.n	3990 <nrfx_gpiote_irq_handler+0xd8>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3980:	2100      	movs	r1, #0
    3982:	4620      	mov	r0, r4
    3984:	f004 fe06 	bl	8594 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    3988:	4629      	mov	r1, r5
    398a:	4620      	mov	r0, r4
    398c:	f004 fe02 	bl	8594 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3990:	a803      	add	r0, sp, #12
    3992:	9403      	str	r4, [sp, #12]
    3994:	f7ff fd3a 	bl	340c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    3998:	9b03      	ldr	r3, [sp, #12]
    399a:	fa09 f303 	lsl.w	r3, r9, r3
    399e:	6203      	str	r3, [r0, #32]
    39a0:	e7ab      	b.n	38fa <nrfx_gpiote_irq_handler+0x42>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    39a2:	2d02      	cmp	r5, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    39a4:	bf0c      	ite	eq
    39a6:	2103      	moveq	r1, #3
    39a8:	2102      	movne	r1, #2
    39aa:	4620      	mov	r0, r4
    39ac:	f004 fdf2 	bl	8594 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    39b0:	f1bb 0f03 	cmp.w	fp, #3
    39b4:	d004      	beq.n	39c0 <nrfx_gpiote_irq_handler+0x108>
    39b6:	2d02      	cmp	r5, #2
    39b8:	d107      	bne.n	39ca <nrfx_gpiote_irq_handler+0x112>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    39ba:	f1bb 0f01 	cmp.w	fp, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    39be:	d1e7      	bne.n	3990 <nrfx_gpiote_irq_handler+0xd8>
            call_handler(pin, trigger);
    39c0:	4651      	mov	r1, sl
    39c2:	4620      	mov	r0, r4
    39c4:	f7ff fcaa 	bl	331c <call_handler>
    39c8:	e7e2      	b.n	3990 <nrfx_gpiote_irq_handler+0xd8>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    39ca:	2d03      	cmp	r5, #3
    39cc:	d1e0      	bne.n	3990 <nrfx_gpiote_irq_handler+0xd8>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    39ce:	f1bb 0f02 	cmp.w	fp, #2
    39d2:	e7f4      	b.n	39be <nrfx_gpiote_irq_handler+0x106>
        uint32_t ch = NRF_CTZ(mask);
    39d4:	fa96 f3a6 	rbit	r3, r6
    39d8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    39dc:	fa04 f203 	lsl.w	r2, r4, r3
    39e0:	009b      	lsls	r3, r3, #2
    39e2:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    39e6:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    39ea:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    39ee:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    39f2:	f3c0 2004 	ubfx	r0, r0, #8, #5
    39f6:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    39fa:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    39fe:	f7ff fc8d 	bl	331c <call_handler>
    while (mask)
    3a02:	2e00      	cmp	r6, #0
    3a04:	d1e6      	bne.n	39d4 <nrfx_gpiote_irq_handler+0x11c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    3a06:	b005      	add	sp, #20
    3a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a0c:	5000d100 	.word	0x5000d100
    3a10:	5000d000 	.word	0x5000d000
    3a14:	5000d120 	.word	0x5000d120
    3a18:	5000d17c 	.word	0x5000d17c
    3a1c:	50842500 	.word	0x50842500
    3a20:	20000028 	.word	0x20000028

00003a24 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3a24:	4b0e      	ldr	r3, [pc, #56]	; (3a60 <z_sys_init_run_level+0x3c>)
{
    3a26:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3a28:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3a2c:	3001      	adds	r0, #1
    3a2e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    3a32:	42a6      	cmp	r6, r4
    3a34:	d800      	bhi.n	3a38 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    3a36:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    3a38:	e9d4 3500 	ldrd	r3, r5, [r4]
    3a3c:	4628      	mov	r0, r5
    3a3e:	4798      	blx	r3
		if (dev != NULL) {
    3a40:	b165      	cbz	r5, 3a5c <z_sys_init_run_level+0x38>
			if (rc != 0) {
    3a42:	68eb      	ldr	r3, [r5, #12]
    3a44:	b130      	cbz	r0, 3a54 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    3a46:	2800      	cmp	r0, #0
    3a48:	bfb8      	it	lt
    3a4a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    3a4c:	28ff      	cmp	r0, #255	; 0xff
    3a4e:	bfa8      	it	ge
    3a50:	20ff      	movge	r0, #255	; 0xff
    3a52:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3a54:	785a      	ldrb	r2, [r3, #1]
    3a56:	f042 0201 	orr.w	r2, r2, #1
    3a5a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3a5c:	3408      	adds	r4, #8
    3a5e:	e7e8      	b.n	3a32 <z_sys_init_run_level+0xe>
    3a60:	00008b64 	.word	0x00008b64

00003a64 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3a66:	4604      	mov	r4, r0
    3a68:	460e      	mov	r6, r1
	__asm__ volatile(
    3a6a:	f04f 0320 	mov.w	r3, #32
    3a6e:	f3ef 8711 	mrs	r7, BASEPRI
    3a72:	f383 8812 	msr	BASEPRI_MAX, r3
    3a76:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    3a7a:	f001 fa51 	bl	4f20 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    3a7e:	2200      	movs	r2, #0
    3a80:	2c04      	cmp	r4, #4
    3a82:	bf98      	it	ls
    3a84:	4b1d      	ldrls	r3, [pc, #116]	; (3afc <z_fatal_error+0x98>)
    3a86:	4605      	mov	r5, r0
	switch (reason) {
    3a88:	bf94      	ite	ls
    3a8a:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
    3a8e:	4b1c      	ldrhi	r3, [pc, #112]	; (3b00 <z_fatal_error+0x9c>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    3a90:	9200      	str	r2, [sp, #0]
    3a92:	2145      	movs	r1, #69	; 0x45
    3a94:	4622      	mov	r2, r4
    3a96:	481b      	ldr	r0, [pc, #108]	; (3b04 <z_fatal_error+0xa0>)
    3a98:	f004 fbda 	bl	8250 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    3a9c:	b13e      	cbz	r6, 3aae <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    3a9e:	69f3      	ldr	r3, [r6, #28]
    3aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3aa4:	b11b      	cbz	r3, 3aae <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
    3aa6:	2145      	movs	r1, #69	; 0x45
    3aa8:	4817      	ldr	r0, [pc, #92]	; (3b08 <z_fatal_error+0xa4>)
    3aaa:	f004 fbd1 	bl	8250 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    3aae:	b135      	cbz	r5, 3abe <z_fatal_error+0x5a>
    3ab0:	4628      	mov	r0, r5
    3ab2:	f004 fd9b 	bl	85ec <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    3ab6:	4603      	mov	r3, r0
    3ab8:	b108      	cbz	r0, 3abe <z_fatal_error+0x5a>
    3aba:	7802      	ldrb	r2, [r0, #0]
    3abc:	b902      	cbnz	r2, 3ac0 <z_fatal_error+0x5c>
		thread_name = "unknown";
    3abe:	4b13      	ldr	r3, [pc, #76]	; (3b0c <z_fatal_error+0xa8>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    3ac0:	462a      	mov	r2, r5
    3ac2:	2145      	movs	r1, #69	; 0x45
    3ac4:	4812      	ldr	r0, [pc, #72]	; (3b10 <z_fatal_error+0xac>)
    3ac6:	f004 fbc3 	bl	8250 <z_log_minimal_printk>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    3aca:	4631      	mov	r1, r6
    3acc:	4620      	mov	r0, r4
    3ace:	f7ff f949 	bl	2d64 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    3ad2:	2c04      	cmp	r4, #4
    3ad4:	d108      	bne.n	3ae8 <z_fatal_error+0x84>
    3ad6:	490f      	ldr	r1, [pc, #60]	; (3b14 <z_fatal_error+0xb0>)
    3ad8:	480f      	ldr	r0, [pc, #60]	; (3b18 <z_fatal_error+0xb4>)
    3ada:	228f      	movs	r2, #143	; 0x8f
    3adc:	f004 fb1a 	bl	8114 <printk>
    3ae0:	218f      	movs	r1, #143	; 0x8f
    3ae2:	480c      	ldr	r0, [pc, #48]	; (3b14 <z_fatal_error+0xb0>)
    3ae4:	f004 fba1 	bl	822a <assert_post_action>
	__asm__ volatile(
    3ae8:	f387 8811 	msr	BASEPRI, r7
    3aec:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    3af0:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    3af2:	b003      	add	sp, #12
    3af4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    3af8:	f7fe ba24 	b.w	1f44 <z_impl_k_thread_abort>
    3afc:	00008b7c 	.word	0x00008b7c
    3b00:	00009a00 	.word	0x00009a00
    3b04:	00009a16 	.word	0x00009a16
    3b08:	00009a43 	.word	0x00009a43
    3b0c:	00009a0e 	.word	0x00009a0e
    3b10:	00009a69 	.word	0x00009a69
    3b14:	00009a86 	.word	0x00009a86
    3b18:	00008d71 	.word	0x00008d71

00003b1c <init_idle_thread>:
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    3b1c:	2300      	movs	r3, #0
    3b1e:	2201      	movs	r2, #1
{
    3b20:	b510      	push	{r4, lr}
    3b22:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    3b24:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3b28:	220f      	movs	r2, #15
    3b2a:	9301      	str	r3, [sp, #4]
    3b2c:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3b30:	2318      	movs	r3, #24
    3b32:	4a0b      	ldr	r2, [pc, #44]	; (3b60 <init_idle_thread+0x44>)
	struct k_thread *thread = &z_idle_threads[i];
    3b34:	4c0b      	ldr	r4, [pc, #44]	; (3b64 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3b36:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    3b3a:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3b3e:	490a      	ldr	r1, [pc, #40]	; (3b68 <init_idle_thread+0x4c>)
	struct k_thread *thread = &z_idle_threads[i];
    3b40:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
	z_setup_new_thread(thread, stack,
    3b44:	fb02 1100 	mla	r1, r2, r0, r1
    3b48:	9300      	str	r3, [sp, #0]
    3b4a:	4620      	mov	r0, r4
    3b4c:	4b07      	ldr	r3, [pc, #28]	; (3b6c <init_idle_thread+0x50>)
    3b4e:	f000 f98f 	bl	3e70 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3b52:	7b63      	ldrb	r3, [r4, #13]
    3b54:	f023 0304 	bic.w	r3, r3, #4
    3b58:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    3b5a:	b006      	add	sp, #24
    3b5c:	bd10      	pop	{r4, pc}
    3b5e:	bf00      	nop
    3b60:	200009f4 	.word	0x200009f4
    3b64:	20000158 	.word	0x20000158
    3b68:	200025d8 	.word	0x200025d8
    3b6c:	00004061 	.word	0x00004061

00003b70 <bg_thread_main>:
	z_sys_post_kernel = true;
    3b70:	2201      	movs	r2, #1
{
    3b72:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3b74:	4b09      	ldr	r3, [pc, #36]	; (3b9c <bg_thread_main+0x2c>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3b76:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3b78:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3b7a:	f7ff ff53 	bl	3a24 <z_sys_init_run_level>
	boot_banner();
    3b7e:	f004 fd69 	bl	8654 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3b82:	2003      	movs	r0, #3
    3b84:	f7ff ff4e 	bl	3a24 <z_sys_init_run_level>
	z_init_static_threads();
    3b88:	f000 f9c6 	bl	3f18 <z_init_static_threads>
	main();
    3b8c:	f004 fab9 	bl	8102 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3b90:	4a03      	ldr	r2, [pc, #12]	; (3ba0 <bg_thread_main+0x30>)
    3b92:	7b13      	ldrb	r3, [r2, #12]
    3b94:	f023 0301 	bic.w	r3, r3, #1
    3b98:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3b9a:	bd08      	pop	{r3, pc}
    3b9c:	20001415 	.word	0x20001415
    3ba0:	200001d8 	.word	0x200001d8

00003ba4 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3ba4:	4802      	ldr	r0, [pc, #8]	; (3bb0 <z_bss_zero+0xc>)
    3ba6:	4a03      	ldr	r2, [pc, #12]	; (3bb4 <z_bss_zero+0x10>)
    3ba8:	2100      	movs	r1, #0
    3baa:	1a12      	subs	r2, r2, r0
    3bac:	f004 bbf8 	b.w	83a0 <memset>
    3bb0:	20000158 	.word	0x20000158
    3bb4:	200015d4 	.word	0x200015d4

00003bb8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3bb8:	b580      	push	{r7, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    3bba:	4b35      	ldr	r3, [pc, #212]	; (3c90 <z_cstart+0xd8>)
    3bbc:	b0a6      	sub	sp, #152	; 0x98
	uint32_t msp =
    3bbe:	f503 6700 	add.w	r7, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3bc2:	f387 8808 	msr	MSP, r7
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    3bc6:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3bca:	2400      	movs	r4, #0
    3bcc:	23e0      	movs	r3, #224	; 0xe0
    3bce:	4d31      	ldr	r5, [pc, #196]	; (3c94 <z_cstart+0xdc>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    3bd0:	4e31      	ldr	r6, [pc, #196]	; (3c98 <z_cstart+0xe0>)
    3bd2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3bd6:	77ec      	strb	r4, [r5, #31]
    3bd8:	762c      	strb	r4, [r5, #24]
    3bda:	766c      	strb	r4, [r5, #25]
    3bdc:	76ac      	strb	r4, [r5, #26]
    3bde:	f885 4020 	strb.w	r4, [r5, #32]
    3be2:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3be4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3be6:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 3cac <z_cstart+0xf4>
    3bea:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3bee:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    3bf0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3bf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    3bf6:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    3bf8:	63ac      	str	r4, [r5, #56]	; 0x38
	/* Set NMI, Hard, and Bus Faults as Non-Secure.
	 * NMI and Bus Faults targeting the Secure state will
	 * escalate to a SecureFault or SecureHardFault.
	 */
	SCB->AIRCR =
		(SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk)))
    3bfa:	68eb      	ldr	r3, [r5, #12]
    3bfc:	b29b      	uxth	r3, r3
		| SCB_AIRCR_BFHFNMINS_Msk
		| ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos) &
    3bfe:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    3c02:	f443 3308 	orr.w	r3, r3, #139264	; 0x22000
	SCB->AIRCR =
    3c06:	60eb      	str	r3, [r5, #12]

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3c08:	f7fe f902 	bl	1e10 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3c0c:	f7fd fd1e 	bl	164c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3c14:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3c16:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3c18:	f7fe fbc4 	bl	23a4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3c1c:	f7fe fa1c 	bl	2058 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    3c20:	f240 1301 	movw	r3, #257	; 0x101
    3c24:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    3c28:	ab06      	add	r3, sp, #24
    3c2a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    3c2c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3c30:	f004 fcbf 	bl	85b2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3c34:	4620      	mov	r0, r4
    3c36:	f7ff fef5 	bl	3a24 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3c3a:	2001      	movs	r0, #1
    3c3c:	f7ff fef2 	bl	3a24 <z_sys_init_run_level>
	z_sched_init();
    3c40:	f001 f962 	bl	4f08 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3c44:	4b15      	ldr	r3, [pc, #84]	; (3c9c <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
    3c46:	4d16      	ldr	r5, [pc, #88]	; (3ca0 <z_cstart+0xe8>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3c48:	9305      	str	r3, [sp, #20]
    3c4a:	2301      	movs	r3, #1
    3c4c:	4915      	ldr	r1, [pc, #84]	; (3ca4 <z_cstart+0xec>)
    3c4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    3c52:	e9cd 4303 	strd	r4, r3, [sp, #12]
    3c56:	4628      	mov	r0, r5
    3c58:	464b      	mov	r3, r9
    3c5a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3c5e:	9400      	str	r4, [sp, #0]
	_kernel.ready_q.cache = &z_main_thread;
    3c60:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3c62:	f000 f905 	bl	3e70 <z_setup_new_thread>
    3c66:	4680      	mov	r8, r0
    3c68:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    3c6a:	4628      	mov	r0, r5
    3c6c:	f022 0204 	bic.w	r2, r2, #4
    3c70:	736a      	strb	r2, [r5, #13]
    3c72:	f000 fe99 	bl	49a8 <z_ready_thread>
		init_idle_thread(i);
    3c76:	4620      	mov	r0, r4
    3c78:	f7ff ff50 	bl	3b1c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3c7c:	4b0a      	ldr	r3, [pc, #40]	; (3ca8 <z_cstart+0xf0>)
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3c7e:	464a      	mov	r2, r9
    3c80:	4641      	mov	r1, r8
    3c82:	4628      	mov	r0, r5
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3c84:	60f3      	str	r3, [r6, #12]
		_kernel.cpus[i].id = i;
    3c86:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    3c88:	6077      	str	r7, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3c8a:	f7fd fdf7 	bl	187c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3c8e:	bf00      	nop
    3c90:	20002718 	.word	0x20002718
    3c94:	e000ed00 	.word	0xe000ed00
    3c98:	200009f4 	.word	0x200009f4
    3c9c:	00009af2 	.word	0x00009af2
    3ca0:	200001d8 	.word	0x200001d8
    3ca4:	200015d8 	.word	0x200015d8
    3ca8:	20000158 	.word	0x20000158
    3cac:	00003b71 	.word	0x00003b71

00003cb0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    3cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3cb4:	4d14      	ldr	r5, [pc, #80]	; (3d08 <init_mem_slab_module+0x58>)
    3cb6:	4c15      	ldr	r4, [pc, #84]	; (3d0c <init_mem_slab_module+0x5c>)
    3cb8:	46a8      	mov	r8, r5
    3cba:	4e15      	ldr	r6, [pc, #84]	; (3d10 <init_mem_slab_module+0x60>)
    3cbc:	42ac      	cmp	r4, r5
    3cbe:	d908      	bls.n	3cd2 <init_mem_slab_module+0x22>
    3cc0:	4631      	mov	r1, r6
    3cc2:	4814      	ldr	r0, [pc, #80]	; (3d14 <init_mem_slab_module+0x64>)
    3cc4:	223c      	movs	r2, #60	; 0x3c
    3cc6:	f004 fa25 	bl	8114 <printk>
    3cca:	213c      	movs	r1, #60	; 0x3c
    3ccc:	4630      	mov	r0, r6
    3cce:	f004 faac 	bl	822a <assert_post_action>
    3cd2:	4544      	cmp	r4, r8
    3cd4:	d302      	bcc.n	3cdc <init_mem_slab_module+0x2c>
			goto out;
		}
		z_object_init(slab);
	}

out:
    3cd6:	2000      	movs	r0, #0
	return rc;
}
    3cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    3cdc:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    3ce0:	ea42 0301 	orr.w	r3, r2, r1
    3ce4:	f013 0303 	ands.w	r3, r3, #3
    3ce8:	d10b      	bne.n	3d02 <init_mem_slab_module+0x52>
	for (j = 0U; j < slab->num_blocks; j++) {
    3cea:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    3cec:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    3cee:	4283      	cmp	r3, r0
    3cf0:	d101      	bne.n	3cf6 <init_mem_slab_module+0x46>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3cf2:	3420      	adds	r4, #32
    3cf4:	e7e2      	b.n	3cbc <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    3cf6:	69a7      	ldr	r7, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    3cf8:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    3cfa:	6017      	str	r7, [r2, #0]
		slab->free_list = p;
    3cfc:	61a2      	str	r2, [r4, #24]
		p += slab->block_size;
    3cfe:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    3d00:	e7f5      	b.n	3cee <init_mem_slab_module+0x3e>
		return -EINVAL;
    3d02:	f06f 0015 	mvn.w	r0, #21
	return rc;
    3d06:	e7e7      	b.n	3cd8 <init_mem_slab_module+0x28>
    3d08:	20000108 	.word	0x20000108
    3d0c:	20000108 	.word	0x20000108
    3d10:	00009afa 	.word	0x00009afa
    3d14:	00008d71 	.word	0x00008d71

00003d18 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3d18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3d1c:	4604      	mov	r4, r0
    3d1e:	460d      	mov	r5, r1
    3d20:	4690      	mov	r8, r2
    3d22:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    3d24:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    3d28:	f04f 0320 	mov.w	r3, #32
    3d2c:	f3ef 8711 	mrs	r7, BASEPRI
    3d30:	f383 8812 	msr	BASEPRI_MAX, r3
    3d34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3d38:	4630      	mov	r0, r6
    3d3a:	f000 f96d 	bl	4018 <z_spin_lock_valid>
    3d3e:	b940      	cbnz	r0, 3d52 <k_mem_slab_alloc+0x3a>
    3d40:	491f      	ldr	r1, [pc, #124]	; (3dc0 <k_mem_slab_alloc+0xa8>)
    3d42:	4820      	ldr	r0, [pc, #128]	; (3dc4 <k_mem_slab_alloc+0xac>)
    3d44:	2281      	movs	r2, #129	; 0x81
    3d46:	f004 f9e5 	bl	8114 <printk>
    3d4a:	2181      	movs	r1, #129	; 0x81
    3d4c:	481c      	ldr	r0, [pc, #112]	; (3dc0 <k_mem_slab_alloc+0xa8>)
    3d4e:	f004 fa6c 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    3d52:	4630      	mov	r0, r6
    3d54:	f000 f97c 	bl	4050 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3d58:	69a3      	ldr	r3, [r4, #24]
    3d5a:	b1c3      	cbz	r3, 3d8e <k_mem_slab_alloc+0x76>
		/* take a free block */
		*mem = slab->free_list;
    3d5c:	602b      	str	r3, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    3d5e:	681b      	ldr	r3, [r3, #0]
    3d60:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    3d62:	69e3      	ldr	r3, [r4, #28]
    3d64:	3301      	adds	r3, #1
    3d66:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3d68:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3d6a:	4630      	mov	r0, r6
    3d6c:	f000 f962 	bl	4034 <z_spin_unlock_valid>
    3d70:	b940      	cbnz	r0, 3d84 <k_mem_slab_alloc+0x6c>
    3d72:	4913      	ldr	r1, [pc, #76]	; (3dc0 <k_mem_slab_alloc+0xa8>)
    3d74:	4813      	ldr	r0, [pc, #76]	; (3dc4 <k_mem_slab_alloc+0xac>)
    3d76:	22ac      	movs	r2, #172	; 0xac
    3d78:	f004 f9cc 	bl	8114 <printk>
    3d7c:	21ac      	movs	r1, #172	; 0xac
    3d7e:	4810      	ldr	r0, [pc, #64]	; (3dc0 <k_mem_slab_alloc+0xa8>)
    3d80:	f004 fa53 	bl	822a <assert_post_action>
	__asm__ volatile(
    3d84:	f387 8811 	msr	BASEPRI, r7
    3d88:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    3d8c:	e013      	b.n	3db6 <k_mem_slab_alloc+0x9e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    3d8e:	ea58 0209 	orrs.w	r2, r8, r9
    3d92:	d103      	bne.n	3d9c <k_mem_slab_alloc+0x84>
		result = -ENOMEM;
    3d94:	f06f 040b 	mvn.w	r4, #11
		*mem = NULL;
    3d98:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    3d9a:	e7e6      	b.n	3d6a <k_mem_slab_alloc+0x52>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    3d9c:	4622      	mov	r2, r4
    3d9e:	4639      	mov	r1, r7
    3da0:	4630      	mov	r0, r6
    3da2:	e9cd 8900 	strd	r8, r9, [sp]
    3da6:	f000 ff67 	bl	4c78 <z_pend_curr>
		if (result == 0) {
    3daa:	4604      	mov	r4, r0
    3dac:	b918      	cbnz	r0, 3db6 <k_mem_slab_alloc+0x9e>
			*mem = _current->base.swap_data;
    3dae:	4b06      	ldr	r3, [pc, #24]	; (3dc8 <k_mem_slab_alloc+0xb0>)
    3db0:	689b      	ldr	r3, [r3, #8]
    3db2:	695b      	ldr	r3, [r3, #20]
    3db4:	602b      	str	r3, [r5, #0]
}
    3db6:	4620      	mov	r0, r4
    3db8:	b003      	add	sp, #12
    3dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3dbe:	bf00      	nop
    3dc0:	00008d4b 	.word	0x00008d4b
    3dc4:	00008d71 	.word	0x00008d71
    3dc8:	200009f4 	.word	0x200009f4

00003dcc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    3dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3dd0:	4604      	mov	r4, r0
    3dd2:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    3dd4:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    3dd8:	f04f 0320 	mov.w	r3, #32
    3ddc:	f3ef 8711 	mrs	r7, BASEPRI
    3de0:	f383 8812 	msr	BASEPRI_MAX, r3
    3de4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3de8:	4630      	mov	r0, r6
    3dea:	f000 f915 	bl	4018 <z_spin_lock_valid>
    3dee:	b940      	cbnz	r0, 3e02 <k_mem_slab_free+0x36>
    3df0:	491d      	ldr	r1, [pc, #116]	; (3e68 <k_mem_slab_free+0x9c>)
    3df2:	481e      	ldr	r0, [pc, #120]	; (3e6c <k_mem_slab_free+0xa0>)
    3df4:	2281      	movs	r2, #129	; 0x81
    3df6:	f004 f98d 	bl	8114 <printk>
    3dfa:	2181      	movs	r1, #129	; 0x81
    3dfc:	481a      	ldr	r0, [pc, #104]	; (3e68 <k_mem_slab_free+0x9c>)
    3dfe:	f004 fa14 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    3e02:	4630      	mov	r0, r6
    3e04:	f000 f924 	bl	4050 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    3e08:	f8d4 8018 	ldr.w	r8, [r4, #24]
    3e0c:	f1b8 0f00 	cmp.w	r8, #0
    3e10:	d10f      	bne.n	3e32 <k_mem_slab_free+0x66>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    3e12:	4620      	mov	r0, r4
    3e14:	f001 f83a 	bl	4e8c <z_unpend_first_thread>

		if (pending_thread != NULL) {
    3e18:	b158      	cbz	r0, 3e32 <k_mem_slab_free+0x66>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    3e1a:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3e1c:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    3e20:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    3e22:	f000 fdc1 	bl	49a8 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    3e26:	4639      	mov	r1, r7
    3e28:	4630      	mov	r0, r6
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    3e2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    3e2e:	f000 bbbd 	b.w	45ac <z_reschedule>
	**(char ***) mem = slab->free_list;
    3e32:	682b      	ldr	r3, [r5, #0]
    3e34:	69a2      	ldr	r2, [r4, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3e36:	4630      	mov	r0, r6
    3e38:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    3e3a:	682b      	ldr	r3, [r5, #0]
    3e3c:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    3e3e:	69e3      	ldr	r3, [r4, #28]
    3e40:	3b01      	subs	r3, #1
    3e42:	61e3      	str	r3, [r4, #28]
    3e44:	f000 f8f6 	bl	4034 <z_spin_unlock_valid>
    3e48:	b940      	cbnz	r0, 3e5c <k_mem_slab_free+0x90>
    3e4a:	4907      	ldr	r1, [pc, #28]	; (3e68 <k_mem_slab_free+0x9c>)
    3e4c:	4807      	ldr	r0, [pc, #28]	; (3e6c <k_mem_slab_free+0xa0>)
    3e4e:	22ac      	movs	r2, #172	; 0xac
    3e50:	f004 f960 	bl	8114 <printk>
    3e54:	21ac      	movs	r1, #172	; 0xac
    3e56:	4804      	ldr	r0, [pc, #16]	; (3e68 <k_mem_slab_free+0x9c>)
    3e58:	f004 f9e7 	bl	822a <assert_post_action>
	__asm__ volatile(
    3e5c:	f387 8811 	msr	BASEPRI, r7
    3e60:	f3bf 8f6f 	isb	sy
}
    3e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e68:	00008d4b 	.word	0x00008d4b
    3e6c:	00008d71 	.word	0x00008d71

00003e70 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3e74:	b085      	sub	sp, #20
    3e76:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    3e7a:	4604      	mov	r4, r0
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    3e7c:	f1b9 0f0f 	cmp.w	r9, #15
{
    3e80:	460f      	mov	r7, r1
    3e82:	4615      	mov	r5, r2
    3e84:	4698      	mov	r8, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    3e86:	d12e      	bne.n	3ee6 <z_setup_new_thread+0x76>
    3e88:	4b1f      	ldr	r3, [pc, #124]	; (3f08 <z_setup_new_thread+0x98>)
    3e8a:	4598      	cmp	r8, r3
    3e8c:	d12f      	bne.n	3eee <z_setup_new_thread+0x7e>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3e8e:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    3e92:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    3e96:	9b10      	ldr	r3, [sp, #64]	; 0x40
	thread_base->pended_on = NULL;
    3e98:	2600      	movs	r6, #0
	thread_base->user_options = (uint8_t)options;
    3e9a:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    3e9c:	2304      	movs	r3, #4
    3e9e:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3ea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3ea2:	1de8      	adds	r0, r5, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3ea4:	9302      	str	r3, [sp, #8]
    3ea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3ea8:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3eac:	9301      	str	r3, [sp, #4]
    3eae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	stack_ptr = (char *)stack + stack_obj_size;
    3eb0:	183d      	adds	r5, r7, r0
	new_thread->stack_info.size = stack_buf_size;
    3eb2:	e9c4 7019 	strd	r7, r0, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3eb6:	9300      	str	r3, [sp, #0]
    3eb8:	462a      	mov	r2, r5
    3eba:	4643      	mov	r3, r8
    3ebc:	4639      	mov	r1, r7
    3ebe:	4620      	mov	r0, r4
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    3ec0:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    3ec4:	60a6      	str	r6, [r4, #8]

	thread_base->prio = priority;
    3ec6:	f884 900e 	strb.w	r9, [r4, #14]

	thread_base->sched_locked = 0U;
    3eca:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    3ecc:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3ece:	f7fd fcb9 	bl	1844 <arch_new_thread>
	if (!_current) {
    3ed2:	4b0e      	ldr	r3, [pc, #56]	; (3f0c <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
    3ed4:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    3ed6:	689b      	ldr	r3, [r3, #8]
    3ed8:	b103      	cbz	r3, 3edc <z_setup_new_thread+0x6c>
	new_thread->resource_pool = _current->resource_pool;
    3eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    3edc:	4628      	mov	r0, r5
    3ede:	6723      	str	r3, [r4, #112]	; 0x70
    3ee0:	b005      	add	sp, #20
    3ee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    3ee6:	f109 0310 	add.w	r3, r9, #16
    3eea:	2b1e      	cmp	r3, #30
    3eec:	d9cf      	bls.n	3e8e <z_setup_new_thread+0x1e>
    3eee:	f240 12ff 	movw	r2, #511	; 0x1ff
    3ef2:	4907      	ldr	r1, [pc, #28]	; (3f10 <z_setup_new_thread+0xa0>)
    3ef4:	4807      	ldr	r0, [pc, #28]	; (3f14 <z_setup_new_thread+0xa4>)
    3ef6:	f004 f90d 	bl	8114 <printk>
    3efa:	f240 11ff 	movw	r1, #511	; 0x1ff
    3efe:	4804      	ldr	r0, [pc, #16]	; (3f10 <z_setup_new_thread+0xa0>)
    3f00:	f004 f993 	bl	822a <assert_post_action>
    3f04:	e7c3      	b.n	3e8e <z_setup_new_thread+0x1e>
    3f06:	bf00      	nop
    3f08:	00004061 	.word	0x00004061
    3f0c:	200009f4 	.word	0x200009f4
    3f10:	00009b1f 	.word	0x00009b1f
    3f14:	00008d71 	.word	0x00008d71

00003f18 <z_init_static_threads>:
{
    3f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    3f1c:	4f39      	ldr	r7, [pc, #228]	; (4004 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x8>)
    3f1e:	4d3a      	ldr	r5, [pc, #232]	; (4008 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0xc>)
    3f20:	463e      	mov	r6, r7
    3f22:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 4010 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x14>
{
    3f26:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    3f28:	42bd      	cmp	r5, r7
    3f2a:	d90a      	bls.n	3f42 <z_init_static_threads+0x2a>
    3f2c:	4641      	mov	r1, r8
    3f2e:	4837      	ldr	r0, [pc, #220]	; (400c <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x10>)
    3f30:	f240 22cf 	movw	r2, #719	; 0x2cf
    3f34:	f004 f8ee 	bl	8114 <printk>
    3f38:	f240 21cf 	movw	r1, #719	; 0x2cf
    3f3c:	4640      	mov	r0, r8
    3f3e:	f004 f974 	bl	822a <assert_post_action>
    3f42:	42b5      	cmp	r5, r6
    3f44:	f105 0430 	add.w	r4, r5, #48	; 0x30
    3f48:	d31d      	bcc.n	3f86 <z_init_static_threads+0x6e>
	k_sched_lock();
    3f4a:	f000 fb65 	bl	4618 <k_sched_lock>
		} else {
			return (t * to_hz + off) / from_hz;
    3f4e:	f240 38e7 	movw	r8, #999	; 0x3e7
    3f52:	f04f 0900 	mov.w	r9, #0
	_FOREACH_STATIC_THREAD(thread_data) {
    3f56:	4c2c      	ldr	r4, [pc, #176]	; (4008 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0xc>)
    3f58:	4d2d      	ldr	r5, [pc, #180]	; (4010 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x14>)
    3f5a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 400c <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x10>
    3f5e:	42b4      	cmp	r4, r6
    3f60:	d90a      	bls.n	3f78 <z_init_static_threads+0x60>
    3f62:	4629      	mov	r1, r5
    3f64:	4650      	mov	r0, sl
    3f66:	f240 22ee 	movw	r2, #750	; 0x2ee
    3f6a:	f004 f8d3 	bl	8114 <printk>
    3f6e:	f240 21ee 	movw	r1, #750	; 0x2ee
    3f72:	4628      	mov	r0, r5
    3f74:	f004 f959 	bl	822a <assert_post_action>
    3f78:	42b4      	cmp	r4, r6
    3f7a:	d321      	bcc.n	3fc0 <z_init_static_threads+0xa8>
}
    3f7c:	b006      	add	sp, #24
    3f7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    3f82:	f000 bf27 	b.w	4dd4 <k_sched_unlock>
		z_setup_new_thread(
    3f86:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3f8a:	9305      	str	r3, [sp, #20]
    3f8c:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3f90:	9304      	str	r3, [sp, #16]
    3f92:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3f96:	9303      	str	r3, [sp, #12]
    3f98:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3f9c:	9302      	str	r3, [sp, #8]
    3f9e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3fa2:	9301      	str	r3, [sp, #4]
    3fa4:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3fa8:	9300      	str	r3, [sp, #0]
    3faa:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3fae:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3fb2:	f7ff ff5d 	bl	3e70 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3fb6:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3fba:	655d      	str	r5, [r3, #84]	; 0x54
    3fbc:	4625      	mov	r5, r4
    3fbe:	e7b3      	b.n	3f28 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3fc2:	1c5a      	adds	r2, r3, #1
    3fc4:	d00f      	beq.n	3fe6 <z_init_static_threads+0xce>
    3fc6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3fca:	4640      	mov	r0, r8
    3fcc:	4649      	mov	r1, r9
					    K_MSEC(thread_data->init_delay));
    3fce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3fd2:	fbc2 0103 	smlal	r0, r1, r2, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3fd6:	4549      	cmp	r1, r9
    3fd8:	bf08      	it	eq
    3fda:	4540      	cmpeq	r0, r8
			schedule_new_thread(thread_data->init_thread,
    3fdc:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3fde:	d104      	bne.n	3fea <z_init_static_threads+0xd2>
	z_sched_start(thread);
    3fe0:	4638      	mov	r0, r7
    3fe2:	f000 fd17 	bl	4a14 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    3fe6:	3430      	adds	r4, #48	; 0x30
    3fe8:	e7b9      	b.n	3f5e <z_init_static_threads+0x46>
    3fea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3fee:	2300      	movs	r3, #0
    3ff0:	f7fc f924 	bl	23c <__aeabi_uldivmod>
    3ff4:	4602      	mov	r2, r0
    3ff6:	460b      	mov	r3, r1

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3ff8:	f107 0018 	add.w	r0, r7, #24
    3ffc:	4905      	ldr	r1, [pc, #20]	; (4014 <CONFIG_MBEDTLS_SSL_IN_CONTENT_LEN+0x18>)
    3ffe:	f001 f893 	bl	5128 <z_add_timeout>
    4002:	e7f0      	b.n	3fe6 <z_init_static_threads+0xce>
    4004:	20000108 	.word	0x20000108
    4008:	20000108 	.word	0x20000108
    400c:	00008d71 	.word	0x00008d71
    4010:	00009b1f 	.word	0x00009b1f
    4014:	00004a99 	.word	0x00004a99

00004018 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    4018:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    401a:	b138      	cbz	r0, 402c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    401c:	4b04      	ldr	r3, [pc, #16]	; (4030 <z_spin_lock_valid+0x18>)
    401e:	f000 0003 	and.w	r0, r0, #3
    4022:	7d1b      	ldrb	r3, [r3, #20]
    4024:	1ac0      	subs	r0, r0, r3
    4026:	bf18      	it	ne
    4028:	2001      	movne	r0, #1
    402a:	4770      	bx	lr
			return false;
		}
	}
	return true;
    402c:	2001      	movs	r0, #1
}
    402e:	4770      	bx	lr
    4030:	200009f4 	.word	0x200009f4

00004034 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    4034:	4905      	ldr	r1, [pc, #20]	; (404c <z_spin_unlock_valid+0x18>)
{
    4036:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    4038:	688a      	ldr	r2, [r1, #8]
    403a:	7d08      	ldrb	r0, [r1, #20]
    403c:	6819      	ldr	r1, [r3, #0]
    403e:	4302      	orrs	r2, r0
    4040:	2000      	movs	r0, #0
    4042:	4291      	cmp	r1, r2
		return false;
	}
	l->thread_cpu = 0;
    4044:	bf04      	itt	eq
    4046:	6018      	streq	r0, [r3, #0]
	return true;
    4048:	2001      	moveq	r0, #1
}
    404a:	4770      	bx	lr
    404c:	200009f4 	.word	0x200009f4

00004050 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    4050:	4a02      	ldr	r2, [pc, #8]	; (405c <z_spin_lock_set_owner+0xc>)
    4052:	7d11      	ldrb	r1, [r2, #20]
    4054:	6893      	ldr	r3, [r2, #8]
    4056:	430b      	orrs	r3, r1
    4058:	6003      	str	r3, [r0, #0]
}
    405a:	4770      	bx	lr
    405c:	200009f4 	.word	0x200009f4

00004060 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4060:	4c10      	ldr	r4, [pc, #64]	; (40a4 <idle+0x44>)
{
    4062:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4064:	68a2      	ldr	r2, [r4, #8]
    4066:	f992 200e 	ldrsb.w	r2, [r2, #14]
    406a:	2a00      	cmp	r2, #0
    406c:	da08      	bge.n	4080 <idle+0x20>
    406e:	490e      	ldr	r1, [pc, #56]	; (40a8 <idle+0x48>)
    4070:	480e      	ldr	r0, [pc, #56]	; (40ac <idle+0x4c>)
    4072:	2227      	movs	r2, #39	; 0x27
    4074:	f004 f84e 	bl	8114 <printk>
    4078:	2127      	movs	r1, #39	; 0x27
    407a:	480b      	ldr	r0, [pc, #44]	; (40a8 <idle+0x48>)
    407c:	f004 f8d5 	bl	822a <assert_post_action>
	__asm__ volatile(
    4080:	f04f 0220 	mov.w	r2, #32
    4084:	f3ef 8311 	mrs	r3, BASEPRI
    4088:	f382 8812 	msr	BASEPRI_MAX, r2
    408c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4090:	f001 f940 	bl	5314 <z_get_next_timeout_expiry>
    4094:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    4096:	f7fc ff31 	bl	efc <pm_system_suspend>
    409a:	2800      	cmp	r0, #0
    409c:	d1f0      	bne.n	4080 <idle+0x20>
    409e:	f7fd fadb 	bl	1658 <arch_cpu_idle>
}
    40a2:	e7ed      	b.n	4080 <idle+0x20>
    40a4:	200009f4 	.word	0x200009f4
    40a8:	00009b42 	.word	0x00009b42
    40ac:	00008d71 	.word	0x00008d71

000040b0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    40b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    40b4:	4604      	mov	r4, r0
    40b6:	4616      	mov	r6, r2
    40b8:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    40ba:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    40be:	b143      	cbz	r3, 40d2 <z_impl_k_mutex_lock+0x22>
    40c0:	4962      	ldr	r1, [pc, #392]	; (424c <z_impl_k_mutex_lock+0x19c>)
    40c2:	4863      	ldr	r0, [pc, #396]	; (4250 <z_impl_k_mutex_lock+0x1a0>)
    40c4:	2265      	movs	r2, #101	; 0x65
    40c6:	f004 f825 	bl	8114 <printk>
    40ca:	2165      	movs	r1, #101	; 0x65
    40cc:	485f      	ldr	r0, [pc, #380]	; (424c <z_impl_k_mutex_lock+0x19c>)
    40ce:	f004 f8ac 	bl	822a <assert_post_action>
    40d2:	f04f 0320 	mov.w	r3, #32
    40d6:	f3ef 8811 	mrs	r8, BASEPRI
    40da:	f383 8812 	msr	BASEPRI_MAX, r3
    40de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    40e2:	485c      	ldr	r0, [pc, #368]	; (4254 <z_impl_k_mutex_lock+0x1a4>)
    40e4:	f7ff ff98 	bl	4018 <z_spin_lock_valid>
    40e8:	b940      	cbnz	r0, 40fc <z_impl_k_mutex_lock+0x4c>
    40ea:	495b      	ldr	r1, [pc, #364]	; (4258 <z_impl_k_mutex_lock+0x1a8>)
    40ec:	4858      	ldr	r0, [pc, #352]	; (4250 <z_impl_k_mutex_lock+0x1a0>)
    40ee:	2281      	movs	r2, #129	; 0x81
    40f0:	f004 f810 	bl	8114 <printk>
    40f4:	2181      	movs	r1, #129	; 0x81
    40f6:	4858      	ldr	r0, [pc, #352]	; (4258 <z_impl_k_mutex_lock+0x1a8>)
    40f8:	f004 f897 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    40fc:	4855      	ldr	r0, [pc, #340]	; (4254 <z_impl_k_mutex_lock+0x1a4>)
    40fe:	f7ff ffa7 	bl	4050 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4102:	68e3      	ldr	r3, [r4, #12]
    4104:	4a55      	ldr	r2, [pc, #340]	; (425c <z_impl_k_mutex_lock+0x1ac>)
    4106:	b1d3      	cbz	r3, 413e <z_impl_k_mutex_lock+0x8e>
    4108:	68a0      	ldr	r0, [r4, #8]
    410a:	6891      	ldr	r1, [r2, #8]
    410c:	4288      	cmp	r0, r1
    410e:	d033      	beq.n	4178 <z_impl_k_mutex_lock+0xc8>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4110:	ea56 0307 	orrs.w	r3, r6, r7
    4114:	d132      	bne.n	417c <z_impl_k_mutex_lock+0xcc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4116:	484f      	ldr	r0, [pc, #316]	; (4254 <z_impl_k_mutex_lock+0x1a4>)
    4118:	f7ff ff8c 	bl	4034 <z_spin_unlock_valid>
    411c:	b940      	cbnz	r0, 4130 <z_impl_k_mutex_lock+0x80>
    411e:	494e      	ldr	r1, [pc, #312]	; (4258 <z_impl_k_mutex_lock+0x1a8>)
    4120:	484b      	ldr	r0, [pc, #300]	; (4250 <z_impl_k_mutex_lock+0x1a0>)
    4122:	22ac      	movs	r2, #172	; 0xac
    4124:	f003 fff6 	bl	8114 <printk>
    4128:	21ac      	movs	r1, #172	; 0xac
    412a:	484b      	ldr	r0, [pc, #300]	; (4258 <z_impl_k_mutex_lock+0x1a8>)
    412c:	f004 f87d 	bl	822a <assert_post_action>
	__asm__ volatile(
    4130:	f388 8811 	msr	BASEPRI, r8
    4134:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    4138:	f06f 000f 	mvn.w	r0, #15
    413c:	e019      	b.n	4172 <z_impl_k_mutex_lock+0xc2>
					_current->base.prio :
    413e:	6891      	ldr	r1, [r2, #8]
    4140:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    4144:	3301      	adds	r3, #1
    4146:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    4148:	6893      	ldr	r3, [r2, #8]
    414a:	4842      	ldr	r0, [pc, #264]	; (4254 <z_impl_k_mutex_lock+0x1a4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    414c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    414e:	60a3      	str	r3, [r4, #8]
    4150:	f7ff ff70 	bl	4034 <z_spin_unlock_valid>
    4154:	b940      	cbnz	r0, 4168 <z_impl_k_mutex_lock+0xb8>
    4156:	4940      	ldr	r1, [pc, #256]	; (4258 <z_impl_k_mutex_lock+0x1a8>)
    4158:	483d      	ldr	r0, [pc, #244]	; (4250 <z_impl_k_mutex_lock+0x1a0>)
    415a:	22ac      	movs	r2, #172	; 0xac
    415c:	f003 ffda 	bl	8114 <printk>
    4160:	21ac      	movs	r1, #172	; 0xac
    4162:	483d      	ldr	r0, [pc, #244]	; (4258 <z_impl_k_mutex_lock+0x1a8>)
    4164:	f004 f861 	bl	822a <assert_post_action>
    4168:	f388 8811 	msr	BASEPRI, r8
    416c:	f3bf 8f6f 	isb	sy
		return 0;
    4170:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4172:	b002      	add	sp, #8
    4174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    4178:	6921      	ldr	r1, [r4, #16]
    417a:	e7e3      	b.n	4144 <z_impl_k_mutex_lock+0x94>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    417c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4180:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    4184:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    4188:	4299      	cmp	r1, r3
    418a:	bfa8      	it	ge
    418c:	4619      	movge	r1, r3
    418e:	4291      	cmp	r1, r2
    4190:	bfb8      	it	lt
    4192:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4194:	428b      	cmp	r3, r1
    4196:	dd3f      	ble.n	4218 <z_impl_k_mutex_lock+0x168>
		return z_set_prio(mutex->owner, new_prio);
    4198:	f000 fd94 	bl	4cc4 <z_set_prio>
    419c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    419e:	4622      	mov	r2, r4
    41a0:	4641      	mov	r1, r8
    41a2:	e9cd 6700 	strd	r6, r7, [sp]
    41a6:	482b      	ldr	r0, [pc, #172]	; (4254 <z_impl_k_mutex_lock+0x1a4>)
    41a8:	f000 fd66 	bl	4c78 <z_pend_curr>
	if (got_mutex == 0) {
    41ac:	2800      	cmp	r0, #0
    41ae:	d0e0      	beq.n	4172 <z_impl_k_mutex_lock+0xc2>
	__asm__ volatile(
    41b0:	f04f 0320 	mov.w	r3, #32
    41b4:	f3ef 8611 	mrs	r6, BASEPRI
    41b8:	f383 8812 	msr	BASEPRI_MAX, r3
    41bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    41c0:	4824      	ldr	r0, [pc, #144]	; (4254 <z_impl_k_mutex_lock+0x1a4>)
    41c2:	f7ff ff29 	bl	4018 <z_spin_lock_valid>
    41c6:	b940      	cbnz	r0, 41da <z_impl_k_mutex_lock+0x12a>
    41c8:	4923      	ldr	r1, [pc, #140]	; (4258 <z_impl_k_mutex_lock+0x1a8>)
    41ca:	4821      	ldr	r0, [pc, #132]	; (4250 <z_impl_k_mutex_lock+0x1a0>)
    41cc:	2281      	movs	r2, #129	; 0x81
    41ce:	f003 ffa1 	bl	8114 <printk>
    41d2:	2181      	movs	r1, #129	; 0x81
    41d4:	4820      	ldr	r0, [pc, #128]	; (4258 <z_impl_k_mutex_lock+0x1a8>)
    41d6:	f004 f828 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    41da:	481e      	ldr	r0, [pc, #120]	; (4254 <z_impl_k_mutex_lock+0x1a4>)
    41dc:	f7ff ff38 	bl	4050 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    41e0:	6823      	ldr	r3, [r4, #0]
    41e2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    41e4:	429c      	cmp	r4, r3
    41e6:	d00a      	beq.n	41fe <z_impl_k_mutex_lock+0x14e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    41e8:	b14b      	cbz	r3, 41fe <z_impl_k_mutex_lock+0x14e>
    41ea:	f993 300e 	ldrsb.w	r3, [r3, #14]
    41ee:	4299      	cmp	r1, r3
    41f0:	bfa8      	it	ge
    41f2:	4619      	movge	r1, r3
    41f4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    41f8:	4299      	cmp	r1, r3
    41fa:	bfb8      	it	lt
    41fc:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    41fe:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    4200:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4204:	4299      	cmp	r1, r3
    4206:	d109      	bne.n	421c <z_impl_k_mutex_lock+0x16c>
	if (resched) {
    4208:	b16d      	cbz	r5, 4226 <z_impl_k_mutex_lock+0x176>
		z_reschedule(&lock, key);
    420a:	4631      	mov	r1, r6
    420c:	4811      	ldr	r0, [pc, #68]	; (4254 <z_impl_k_mutex_lock+0x1a4>)
    420e:	f000 f9cd 	bl	45ac <z_reschedule>
	return -EAGAIN;
    4212:	f06f 000a 	mvn.w	r0, #10
    4216:	e7ac      	b.n	4172 <z_impl_k_mutex_lock+0xc2>
	bool resched = false;
    4218:	2500      	movs	r5, #0
    421a:	e7c0      	b.n	419e <z_impl_k_mutex_lock+0xee>
		return z_set_prio(mutex->owner, new_prio);
    421c:	f000 fd52 	bl	4cc4 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4220:	2800      	cmp	r0, #0
    4222:	d1f2      	bne.n	420a <z_impl_k_mutex_lock+0x15a>
    4224:	e7f0      	b.n	4208 <z_impl_k_mutex_lock+0x158>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4226:	480b      	ldr	r0, [pc, #44]	; (4254 <z_impl_k_mutex_lock+0x1a4>)
    4228:	f7ff ff04 	bl	4034 <z_spin_unlock_valid>
    422c:	b940      	cbnz	r0, 4240 <z_impl_k_mutex_lock+0x190>
    422e:	490a      	ldr	r1, [pc, #40]	; (4258 <z_impl_k_mutex_lock+0x1a8>)
    4230:	4807      	ldr	r0, [pc, #28]	; (4250 <z_impl_k_mutex_lock+0x1a0>)
    4232:	22ac      	movs	r2, #172	; 0xac
    4234:	f003 ff6e 	bl	8114 <printk>
    4238:	21ac      	movs	r1, #172	; 0xac
    423a:	4807      	ldr	r0, [pc, #28]	; (4258 <z_impl_k_mutex_lock+0x1a8>)
    423c:	f003 fff5 	bl	822a <assert_post_action>
	__asm__ volatile(
    4240:	f386 8811 	msr	BASEPRI, r6
    4244:	f3bf 8f6f 	isb	sy
    4248:	e7e3      	b.n	4212 <z_impl_k_mutex_lock+0x162>
    424a:	bf00      	nop
    424c:	00009b63 	.word	0x00009b63
    4250:	00008d71 	.word	0x00008d71
    4254:	20000a1c 	.word	0x20000a1c
    4258:	00008d4b 	.word	0x00008d4b
    425c:	200009f4 	.word	0x200009f4

00004260 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4260:	b538      	push	{r3, r4, r5, lr}
    4262:	4604      	mov	r4, r0
    4264:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    4268:	b143      	cbz	r3, 427c <z_impl_k_mutex_unlock+0x1c>
    426a:	4945      	ldr	r1, [pc, #276]	; (4380 <z_impl_k_mutex_unlock+0x120>)
    426c:	4845      	ldr	r0, [pc, #276]	; (4384 <z_impl_k_mutex_unlock+0x124>)
    426e:	22c7      	movs	r2, #199	; 0xc7
    4270:	f003 ff50 	bl	8114 <printk>
    4274:	21c7      	movs	r1, #199	; 0xc7
    4276:	4842      	ldr	r0, [pc, #264]	; (4380 <z_impl_k_mutex_unlock+0x120>)
    4278:	f003 ffd7 	bl	822a <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    427c:	68a3      	ldr	r3, [r4, #8]
    427e:	2b00      	cmp	r3, #0
    4280:	d078      	beq.n	4374 <z_impl_k_mutex_unlock+0x114>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4282:	4d41      	ldr	r5, [pc, #260]	; (4388 <z_impl_k_mutex_unlock+0x128>)
    4284:	68aa      	ldr	r2, [r5, #8]
    4286:	4293      	cmp	r3, r2
    4288:	d177      	bne.n	437a <z_impl_k_mutex_unlock+0x11a>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    428a:	68e3      	ldr	r3, [r4, #12]
    428c:	b943      	cbnz	r3, 42a0 <z_impl_k_mutex_unlock+0x40>
    428e:	493c      	ldr	r1, [pc, #240]	; (4380 <z_impl_k_mutex_unlock+0x120>)
    4290:	483c      	ldr	r0, [pc, #240]	; (4384 <z_impl_k_mutex_unlock+0x124>)
    4292:	22df      	movs	r2, #223	; 0xdf
    4294:	f003 ff3e 	bl	8114 <printk>
    4298:	21df      	movs	r1, #223	; 0xdf
    429a:	4839      	ldr	r0, [pc, #228]	; (4380 <z_impl_k_mutex_unlock+0x120>)
    429c:	f003 ffc5 	bl	822a <assert_post_action>
    42a0:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    42a4:	b143      	cbz	r3, 42b8 <z_impl_k_mutex_unlock+0x58>
    42a6:	4939      	ldr	r1, [pc, #228]	; (438c <z_impl_k_mutex_unlock+0x12c>)
    42a8:	4836      	ldr	r0, [pc, #216]	; (4384 <z_impl_k_mutex_unlock+0x124>)
    42aa:	22fd      	movs	r2, #253	; 0xfd
    42ac:	f003 ff32 	bl	8114 <printk>
    42b0:	21fd      	movs	r1, #253	; 0xfd
    42b2:	4836      	ldr	r0, [pc, #216]	; (438c <z_impl_k_mutex_unlock+0x12c>)
    42b4:	f003 ffb9 	bl	822a <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    42b8:	68ab      	ldr	r3, [r5, #8]
    42ba:	7bdb      	ldrb	r3, [r3, #15]
    42bc:	2b01      	cmp	r3, #1
    42be:	d108      	bne.n	42d2 <z_impl_k_mutex_unlock+0x72>
    42c0:	4932      	ldr	r1, [pc, #200]	; (438c <z_impl_k_mutex_unlock+0x12c>)
    42c2:	4830      	ldr	r0, [pc, #192]	; (4384 <z_impl_k_mutex_unlock+0x124>)
    42c4:	22fe      	movs	r2, #254	; 0xfe
    42c6:	f003 ff25 	bl	8114 <printk>
    42ca:	21fe      	movs	r1, #254	; 0xfe
    42cc:	482f      	ldr	r0, [pc, #188]	; (438c <z_impl_k_mutex_unlock+0x12c>)
    42ce:	f003 ffac 	bl	822a <assert_post_action>

	--_current->base.sched_locked;
    42d2:	68aa      	ldr	r2, [r5, #8]
    42d4:	7bd3      	ldrb	r3, [r2, #15]
    42d6:	3b01      	subs	r3, #1
    42d8:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    42da:	68e3      	ldr	r3, [r4, #12]
    42dc:	2b01      	cmp	r3, #1
    42de:	d905      	bls.n	42ec <z_impl_k_mutex_unlock+0x8c>
		mutex->lock_count--;
    42e0:	3b01      	subs	r3, #1
    42e2:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    42e4:	f000 fd76 	bl	4dd4 <k_sched_unlock>

	return 0;
    42e8:	2000      	movs	r0, #0
}
    42ea:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    42ec:	f04f 0320 	mov.w	r3, #32
    42f0:	f3ef 8511 	mrs	r5, BASEPRI
    42f4:	f383 8812 	msr	BASEPRI_MAX, r3
    42f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    42fc:	4824      	ldr	r0, [pc, #144]	; (4390 <z_impl_k_mutex_unlock+0x130>)
    42fe:	f7ff fe8b 	bl	4018 <z_spin_lock_valid>
    4302:	b940      	cbnz	r0, 4316 <z_impl_k_mutex_unlock+0xb6>
    4304:	4923      	ldr	r1, [pc, #140]	; (4394 <z_impl_k_mutex_unlock+0x134>)
    4306:	481f      	ldr	r0, [pc, #124]	; (4384 <z_impl_k_mutex_unlock+0x124>)
    4308:	2281      	movs	r2, #129	; 0x81
    430a:	f003 ff03 	bl	8114 <printk>
    430e:	2181      	movs	r1, #129	; 0x81
    4310:	4820      	ldr	r0, [pc, #128]	; (4394 <z_impl_k_mutex_unlock+0x134>)
    4312:	f003 ff8a 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    4316:	481e      	ldr	r0, [pc, #120]	; (4390 <z_impl_k_mutex_unlock+0x130>)
    4318:	f7ff fe9a 	bl	4050 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    431c:	68a0      	ldr	r0, [r4, #8]
    431e:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    4320:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4324:	4299      	cmp	r1, r3
    4326:	d001      	beq.n	432c <z_impl_k_mutex_unlock+0xcc>
		return z_set_prio(mutex->owner, new_prio);
    4328:	f000 fccc 	bl	4cc4 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    432c:	4620      	mov	r0, r4
    432e:	f000 fdad 	bl	4e8c <z_unpend_first_thread>
	mutex->owner = new_owner;
    4332:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    4334:	b158      	cbz	r0, 434e <z_impl_k_mutex_unlock+0xee>
		mutex->owner_orig_prio = new_owner->base.prio;
    4336:	f990 200e 	ldrsb.w	r2, [r0, #14]
    433a:	6122      	str	r2, [r4, #16]
    433c:	2200      	movs	r2, #0
    433e:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    4340:	f000 fb32 	bl	49a8 <z_ready_thread>
		z_reschedule(&lock, key);
    4344:	4629      	mov	r1, r5
    4346:	4812      	ldr	r0, [pc, #72]	; (4390 <z_impl_k_mutex_unlock+0x130>)
    4348:	f000 f930 	bl	45ac <z_reschedule>
    434c:	e7ca      	b.n	42e4 <z_impl_k_mutex_unlock+0x84>
		mutex->lock_count = 0U;
    434e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4350:	480f      	ldr	r0, [pc, #60]	; (4390 <z_impl_k_mutex_unlock+0x130>)
    4352:	f7ff fe6f 	bl	4034 <z_spin_unlock_valid>
    4356:	b940      	cbnz	r0, 436a <z_impl_k_mutex_unlock+0x10a>
    4358:	490e      	ldr	r1, [pc, #56]	; (4394 <z_impl_k_mutex_unlock+0x134>)
    435a:	480a      	ldr	r0, [pc, #40]	; (4384 <z_impl_k_mutex_unlock+0x124>)
    435c:	22ac      	movs	r2, #172	; 0xac
    435e:	f003 fed9 	bl	8114 <printk>
    4362:	21ac      	movs	r1, #172	; 0xac
    4364:	480b      	ldr	r0, [pc, #44]	; (4394 <z_impl_k_mutex_unlock+0x134>)
    4366:	f003 ff60 	bl	822a <assert_post_action>
	__asm__ volatile(
    436a:	f385 8811 	msr	BASEPRI, r5
    436e:	f3bf 8f6f 	isb	sy
    4372:	e7b7      	b.n	42e4 <z_impl_k_mutex_unlock+0x84>
		return -EINVAL;
    4374:	f06f 0015 	mvn.w	r0, #21
    4378:	e7b7      	b.n	42ea <z_impl_k_mutex_unlock+0x8a>
		return -EPERM;
    437a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    437e:	e7b4      	b.n	42ea <z_impl_k_mutex_unlock+0x8a>
    4380:	00009b63 	.word	0x00009b63
    4384:	00008d71 	.word	0x00008d71
    4388:	200009f4 	.word	0x200009f4
    438c:	00009b85 	.word	0x00009b85
    4390:	20000a1c 	.word	0x20000a1c
    4394:	00008d4b 	.word	0x00008d4b

00004398 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4398:	b538      	push	{r3, r4, r5, lr}
    439a:	4604      	mov	r4, r0
	__asm__ volatile(
    439c:	f04f 0320 	mov.w	r3, #32
    43a0:	f3ef 8511 	mrs	r5, BASEPRI
    43a4:	f383 8812 	msr	BASEPRI_MAX, r3
    43a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    43ac:	4812      	ldr	r0, [pc, #72]	; (43f8 <z_impl_k_sem_give+0x60>)
    43ae:	f7ff fe33 	bl	4018 <z_spin_lock_valid>
    43b2:	b940      	cbnz	r0, 43c6 <z_impl_k_sem_give+0x2e>
    43b4:	4911      	ldr	r1, [pc, #68]	; (43fc <z_impl_k_sem_give+0x64>)
    43b6:	4812      	ldr	r0, [pc, #72]	; (4400 <z_impl_k_sem_give+0x68>)
    43b8:	2281      	movs	r2, #129	; 0x81
    43ba:	f003 feab 	bl	8114 <printk>
    43be:	2181      	movs	r1, #129	; 0x81
    43c0:	480e      	ldr	r0, [pc, #56]	; (43fc <z_impl_k_sem_give+0x64>)
    43c2:	f003 ff32 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    43c6:	480c      	ldr	r0, [pc, #48]	; (43f8 <z_impl_k_sem_give+0x60>)
    43c8:	f7ff fe42 	bl	4050 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    43cc:	4620      	mov	r0, r4
    43ce:	f000 fd5d 	bl	4e8c <z_unpend_first_thread>

	if (thread != NULL) {
    43d2:	b148      	cbz	r0, 43e8 <z_impl_k_sem_give+0x50>
    43d4:	2200      	movs	r2, #0
    43d6:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    43d8:	f000 fae6 	bl	49a8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    43dc:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    43de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    43e2:	4805      	ldr	r0, [pc, #20]	; (43f8 <z_impl_k_sem_give+0x60>)
    43e4:	f000 b8e2 	b.w	45ac <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    43e8:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    43ec:	429a      	cmp	r2, r3
    43ee:	bf18      	it	ne
    43f0:	3301      	addne	r3, #1
    43f2:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    43f4:	e7f2      	b.n	43dc <z_impl_k_sem_give+0x44>
    43f6:	bf00      	nop
    43f8:	20000a20 	.word	0x20000a20
    43fc:	00008d4b 	.word	0x00008d4b
    4400:	00008d71 	.word	0x00008d71

00004404 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4406:	4604      	mov	r4, r0
    4408:	4616      	mov	r6, r2
    440a:	461f      	mov	r7, r3
    440c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    4410:	b15b      	cbz	r3, 442a <z_impl_k_sem_take+0x26>
    4412:	ea56 0307 	orrs.w	r3, r6, r7
    4416:	d008      	beq.n	442a <z_impl_k_sem_take+0x26>
    4418:	492b      	ldr	r1, [pc, #172]	; (44c8 <z_impl_k_sem_take+0xc4>)
    441a:	482c      	ldr	r0, [pc, #176]	; (44cc <z_impl_k_sem_take+0xc8>)
    441c:	2279      	movs	r2, #121	; 0x79
    441e:	f003 fe79 	bl	8114 <printk>
    4422:	2179      	movs	r1, #121	; 0x79
    4424:	4828      	ldr	r0, [pc, #160]	; (44c8 <z_impl_k_sem_take+0xc4>)
    4426:	f003 ff00 	bl	822a <assert_post_action>
    442a:	f04f 0320 	mov.w	r3, #32
    442e:	f3ef 8511 	mrs	r5, BASEPRI
    4432:	f383 8812 	msr	BASEPRI_MAX, r3
    4436:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    443a:	4825      	ldr	r0, [pc, #148]	; (44d0 <z_impl_k_sem_take+0xcc>)
    443c:	f7ff fdec 	bl	4018 <z_spin_lock_valid>
    4440:	b940      	cbnz	r0, 4454 <z_impl_k_sem_take+0x50>
    4442:	4924      	ldr	r1, [pc, #144]	; (44d4 <z_impl_k_sem_take+0xd0>)
    4444:	4821      	ldr	r0, [pc, #132]	; (44cc <z_impl_k_sem_take+0xc8>)
    4446:	2281      	movs	r2, #129	; 0x81
    4448:	f003 fe64 	bl	8114 <printk>
    444c:	2181      	movs	r1, #129	; 0x81
    444e:	4821      	ldr	r0, [pc, #132]	; (44d4 <z_impl_k_sem_take+0xd0>)
    4450:	f003 feeb 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    4454:	481e      	ldr	r0, [pc, #120]	; (44d0 <z_impl_k_sem_take+0xcc>)
    4456:	f7ff fdfb 	bl	4050 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    445a:	68a3      	ldr	r3, [r4, #8]
    445c:	b1ab      	cbz	r3, 448a <z_impl_k_sem_take+0x86>
		sem->count--;
    445e:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4460:	481b      	ldr	r0, [pc, #108]	; (44d0 <z_impl_k_sem_take+0xcc>)
    4462:	60a3      	str	r3, [r4, #8]
    4464:	f7ff fde6 	bl	4034 <z_spin_unlock_valid>
    4468:	b940      	cbnz	r0, 447c <z_impl_k_sem_take+0x78>
    446a:	491a      	ldr	r1, [pc, #104]	; (44d4 <z_impl_k_sem_take+0xd0>)
    446c:	4817      	ldr	r0, [pc, #92]	; (44cc <z_impl_k_sem_take+0xc8>)
    446e:	22ac      	movs	r2, #172	; 0xac
    4470:	f003 fe50 	bl	8114 <printk>
    4474:	21ac      	movs	r1, #172	; 0xac
    4476:	4817      	ldr	r0, [pc, #92]	; (44d4 <z_impl_k_sem_take+0xd0>)
    4478:	f003 fed7 	bl	822a <assert_post_action>
	__asm__ volatile(
    447c:	f385 8811 	msr	BASEPRI, r5
    4480:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    4484:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    4486:	b003      	add	sp, #12
    4488:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    448a:	ea56 0307 	orrs.w	r3, r6, r7
    448e:	d113      	bne.n	44b8 <z_impl_k_sem_take+0xb4>
    4490:	480f      	ldr	r0, [pc, #60]	; (44d0 <z_impl_k_sem_take+0xcc>)
    4492:	f7ff fdcf 	bl	4034 <z_spin_unlock_valid>
    4496:	b940      	cbnz	r0, 44aa <z_impl_k_sem_take+0xa6>
    4498:	490e      	ldr	r1, [pc, #56]	; (44d4 <z_impl_k_sem_take+0xd0>)
    449a:	480c      	ldr	r0, [pc, #48]	; (44cc <z_impl_k_sem_take+0xc8>)
    449c:	22ac      	movs	r2, #172	; 0xac
    449e:	f003 fe39 	bl	8114 <printk>
    44a2:	21ac      	movs	r1, #172	; 0xac
    44a4:	480b      	ldr	r0, [pc, #44]	; (44d4 <z_impl_k_sem_take+0xd0>)
    44a6:	f003 fec0 	bl	822a <assert_post_action>
    44aa:	f385 8811 	msr	BASEPRI, r5
    44ae:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    44b2:	f06f 000f 	mvn.w	r0, #15
    44b6:	e7e6      	b.n	4486 <z_impl_k_sem_take+0x82>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    44b8:	4622      	mov	r2, r4
    44ba:	4629      	mov	r1, r5
    44bc:	e9cd 6700 	strd	r6, r7, [sp]
    44c0:	4803      	ldr	r0, [pc, #12]	; (44d0 <z_impl_k_sem_take+0xcc>)
    44c2:	f000 fbd9 	bl	4c78 <z_pend_curr>
	return ret;
    44c6:	e7de      	b.n	4486 <z_impl_k_sem_take+0x82>
    44c8:	00009bb0 	.word	0x00009bb0
    44cc:	00008d71 	.word	0x00008d71
    44d0:	20000a20 	.word	0x20000a20
    44d4:	00008d4b 	.word	0x00008d4b

000044d8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    44d8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    44da:	4c08      	ldr	r4, [pc, #32]	; (44fc <z_reset_time_slice+0x24>)
    44dc:	6823      	ldr	r3, [r4, #0]
    44de:	b15b      	cbz	r3, 44f8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    44e0:	f7fe fbea 	bl	2cb8 <sys_clock_elapsed>
    44e4:	4603      	mov	r3, r0
    44e6:	6820      	ldr	r0, [r4, #0]
    44e8:	4a05      	ldr	r2, [pc, #20]	; (4500 <z_reset_time_slice+0x28>)
    44ea:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    44ec:	2100      	movs	r1, #0
	}
}
    44ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    44f2:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    44f4:	f000 bf44 	b.w	5380 <z_set_timeout_expiry>
}
    44f8:	bd10      	pop	{r4, pc}
    44fa:	bf00      	nop
    44fc:	20000a30 	.word	0x20000a30
    4500:	200009f4 	.word	0x200009f4

00004504 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    4504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4506:	4604      	mov	r4, r0
    4508:	460d      	mov	r5, r1
	__asm__ volatile(
    450a:	f04f 0320 	mov.w	r3, #32
    450e:	f3ef 8611 	mrs	r6, BASEPRI
    4512:	f383 8812 	msr	BASEPRI_MAX, r3
    4516:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    451a:	481e      	ldr	r0, [pc, #120]	; (4594 <k_sched_time_slice_set+0x90>)
    451c:	f7ff fd7c 	bl	4018 <z_spin_lock_valid>
    4520:	b940      	cbnz	r0, 4534 <k_sched_time_slice_set+0x30>
    4522:	491d      	ldr	r1, [pc, #116]	; (4598 <k_sched_time_slice_set+0x94>)
    4524:	481d      	ldr	r0, [pc, #116]	; (459c <k_sched_time_slice_set+0x98>)
    4526:	2281      	movs	r2, #129	; 0x81
    4528:	f003 fdf4 	bl	8114 <printk>
    452c:	2181      	movs	r1, #129	; 0x81
    452e:	481a      	ldr	r0, [pc, #104]	; (4598 <k_sched_time_slice_set+0x94>)
    4530:	f003 fe7b 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    4534:	4817      	ldr	r0, [pc, #92]	; (4594 <k_sched_time_slice_set+0x90>)
    4536:	f7ff fd8b 	bl	4050 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
    453a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    453e:	2200      	movs	r2, #0
    4540:	f240 30e7 	movw	r0, #999	; 0x3e7
    4544:	2100      	movs	r1, #0
    4546:	4b16      	ldr	r3, [pc, #88]	; (45a0 <k_sched_time_slice_set+0x9c>)
    4548:	fbe7 0104 	umlal	r0, r1, r7, r4
    454c:	611a      	str	r2, [r3, #16]
    454e:	2300      	movs	r3, #0
    4550:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4554:	f7fb fe72 	bl	23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4558:	2c00      	cmp	r4, #0
    455a:	4b12      	ldr	r3, [pc, #72]	; (45a4 <k_sched_time_slice_set+0xa0>)
    455c:	dc16      	bgt.n	458c <k_sched_time_slice_set+0x88>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    455e:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    4560:	4b11      	ldr	r3, [pc, #68]	; (45a8 <k_sched_time_slice_set+0xa4>)
    4562:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    4564:	f7ff ffb8 	bl	44d8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4568:	480a      	ldr	r0, [pc, #40]	; (4594 <k_sched_time_slice_set+0x90>)
    456a:	f7ff fd63 	bl	4034 <z_spin_unlock_valid>
    456e:	b940      	cbnz	r0, 4582 <k_sched_time_slice_set+0x7e>
    4570:	4909      	ldr	r1, [pc, #36]	; (4598 <k_sched_time_slice_set+0x94>)
    4572:	480a      	ldr	r0, [pc, #40]	; (459c <k_sched_time_slice_set+0x98>)
    4574:	22ac      	movs	r2, #172	; 0xac
    4576:	f003 fdcd 	bl	8114 <printk>
    457a:	21ac      	movs	r1, #172	; 0xac
    457c:	4806      	ldr	r0, [pc, #24]	; (4598 <k_sched_time_slice_set+0x94>)
    457e:	f003 fe54 	bl	822a <assert_post_action>
	__asm__ volatile(
    4582:	f386 8811 	msr	BASEPRI, r6
    4586:	f3bf 8f6f 	isb	sy
	}
}
    458a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    458c:	2802      	cmp	r0, #2
    458e:	bfb8      	it	lt
    4590:	2002      	movlt	r0, #2
    4592:	e7e4      	b.n	455e <k_sched_time_slice_set+0x5a>
    4594:	20000a28 	.word	0x20000a28
    4598:	00008d4b 	.word	0x00008d4b
    459c:	00008d71 	.word	0x00008d71
    45a0:	200009f4 	.word	0x200009f4
    45a4:	20000a30 	.word	0x20000a30
    45a8:	20000a2c 	.word	0x20000a2c

000045ac <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    45ac:	b510      	push	{r4, lr}
    45ae:	4603      	mov	r3, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    45b0:	460c      	mov	r4, r1
    45b2:	b9c1      	cbnz	r1, 45e6 <z_reschedule+0x3a>
    45b4:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key.key) && need_swap()) {
    45b8:	b9aa      	cbnz	r2, 45e6 <z_reschedule+0x3a>
	new_thread = _kernel.ready_q.cache;
    45ba:	4a14      	ldr	r2, [pc, #80]	; (460c <z_reschedule+0x60>)
	if (resched(key.key) && need_swap()) {
    45bc:	69d1      	ldr	r1, [r2, #28]
    45be:	6892      	ldr	r2, [r2, #8]
    45c0:	4291      	cmp	r1, r2
    45c2:	d010      	beq.n	45e6 <z_reschedule+0x3a>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    45c4:	f7ff fd36 	bl	4034 <z_spin_unlock_valid>
    45c8:	b940      	cbnz	r0, 45dc <z_reschedule+0x30>
    45ca:	4911      	ldr	r1, [pc, #68]	; (4610 <z_reschedule+0x64>)
    45cc:	4811      	ldr	r0, [pc, #68]	; (4614 <z_reschedule+0x68>)
    45ce:	22c3      	movs	r2, #195	; 0xc3
    45d0:	f003 fda0 	bl	8114 <printk>
    45d4:	21c3      	movs	r1, #195	; 0xc3
    45d6:	480e      	ldr	r0, [pc, #56]	; (4610 <z_reschedule+0x64>)
    45d8:	f003 fe27 	bl	822a <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    45dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ret = arch_swap(key);
    45e0:	2000      	movs	r0, #0
    45e2:	f7fd b8d9 	b.w	1798 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    45e6:	4618      	mov	r0, r3
    45e8:	f7ff fd24 	bl	4034 <z_spin_unlock_valid>
    45ec:	b940      	cbnz	r0, 4600 <z_reschedule+0x54>
    45ee:	4908      	ldr	r1, [pc, #32]	; (4610 <z_reschedule+0x64>)
    45f0:	4808      	ldr	r0, [pc, #32]	; (4614 <z_reschedule+0x68>)
    45f2:	22ac      	movs	r2, #172	; 0xac
    45f4:	f003 fd8e 	bl	8114 <printk>
    45f8:	21ac      	movs	r1, #172	; 0xac
    45fa:	4805      	ldr	r0, [pc, #20]	; (4610 <z_reschedule+0x64>)
    45fc:	f003 fe15 	bl	822a <assert_post_action>
    4600:	f384 8811 	msr	BASEPRI, r4
    4604:	f3bf 8f6f 	isb	sy
    4608:	bd10      	pop	{r4, pc}
    460a:	bf00      	nop
    460c:	200009f4 	.word	0x200009f4
    4610:	00008d4b 	.word	0x00008d4b
    4614:	00008d71 	.word	0x00008d71

00004618 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    4618:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    461a:	f04f 0320 	mov.w	r3, #32
    461e:	f3ef 8511 	mrs	r5, BASEPRI
    4622:	f383 8812 	msr	BASEPRI_MAX, r3
    4626:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    462a:	4820      	ldr	r0, [pc, #128]	; (46ac <k_sched_lock+0x94>)
    462c:	f7ff fcf4 	bl	4018 <z_spin_lock_valid>
    4630:	b940      	cbnz	r0, 4644 <k_sched_lock+0x2c>
    4632:	491f      	ldr	r1, [pc, #124]	; (46b0 <k_sched_lock+0x98>)
    4634:	481f      	ldr	r0, [pc, #124]	; (46b4 <k_sched_lock+0x9c>)
    4636:	2281      	movs	r2, #129	; 0x81
    4638:	f003 fd6c 	bl	8114 <printk>
    463c:	2181      	movs	r1, #129	; 0x81
    463e:	481c      	ldr	r0, [pc, #112]	; (46b0 <k_sched_lock+0x98>)
    4640:	f003 fdf3 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    4644:	4819      	ldr	r0, [pc, #100]	; (46ac <k_sched_lock+0x94>)
    4646:	f7ff fd03 	bl	4050 <z_spin_lock_set_owner>
    464a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    464e:	b143      	cbz	r3, 4662 <k_sched_lock+0x4a>
    4650:	4919      	ldr	r1, [pc, #100]	; (46b8 <k_sched_lock+0xa0>)
    4652:	4818      	ldr	r0, [pc, #96]	; (46b4 <k_sched_lock+0x9c>)
    4654:	22fd      	movs	r2, #253	; 0xfd
    4656:	f003 fd5d 	bl	8114 <printk>
    465a:	21fd      	movs	r1, #253	; 0xfd
    465c:	4816      	ldr	r0, [pc, #88]	; (46b8 <k_sched_lock+0xa0>)
    465e:	f003 fde4 	bl	822a <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    4662:	4c16      	ldr	r4, [pc, #88]	; (46bc <k_sched_lock+0xa4>)
    4664:	68a2      	ldr	r2, [r4, #8]
    4666:	7bd2      	ldrb	r2, [r2, #15]
    4668:	2a01      	cmp	r2, #1
    466a:	d108      	bne.n	467e <k_sched_lock+0x66>
    466c:	4912      	ldr	r1, [pc, #72]	; (46b8 <k_sched_lock+0xa0>)
    466e:	4811      	ldr	r0, [pc, #68]	; (46b4 <k_sched_lock+0x9c>)
    4670:	22fe      	movs	r2, #254	; 0xfe
    4672:	f003 fd4f 	bl	8114 <printk>
    4676:	21fe      	movs	r1, #254	; 0xfe
    4678:	480f      	ldr	r0, [pc, #60]	; (46b8 <k_sched_lock+0xa0>)
    467a:	f003 fdd6 	bl	822a <assert_post_action>
	--_current->base.sched_locked;
    467e:	68a2      	ldr	r2, [r4, #8]
    4680:	7bd3      	ldrb	r3, [r2, #15]
    4682:	3b01      	subs	r3, #1
    4684:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4686:	4809      	ldr	r0, [pc, #36]	; (46ac <k_sched_lock+0x94>)
    4688:	f7ff fcd4 	bl	4034 <z_spin_unlock_valid>
    468c:	b940      	cbnz	r0, 46a0 <k_sched_lock+0x88>
    468e:	4908      	ldr	r1, [pc, #32]	; (46b0 <k_sched_lock+0x98>)
    4690:	4808      	ldr	r0, [pc, #32]	; (46b4 <k_sched_lock+0x9c>)
    4692:	22ac      	movs	r2, #172	; 0xac
    4694:	f003 fd3e 	bl	8114 <printk>
    4698:	21ac      	movs	r1, #172	; 0xac
    469a:	4805      	ldr	r0, [pc, #20]	; (46b0 <k_sched_lock+0x98>)
    469c:	f003 fdc5 	bl	822a <assert_post_action>
	__asm__ volatile(
    46a0:	f385 8811 	msr	BASEPRI, r5
    46a4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    46a8:	bd38      	pop	{r3, r4, r5, pc}
    46aa:	bf00      	nop
    46ac:	20000a28 	.word	0x20000a28
    46b0:	00008d4b 	.word	0x00008d4b
    46b4:	00008d71 	.word	0x00008d71
    46b8:	00009b85 	.word	0x00009b85
    46bc:	200009f4 	.word	0x200009f4

000046c0 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    46c0:	4b0b      	ldr	r3, [pc, #44]	; (46f0 <z_priq_dumb_remove+0x30>)
{
    46c2:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    46c4:	4299      	cmp	r1, r3
{
    46c6:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    46c8:	d10a      	bne.n	46e0 <z_priq_dumb_remove+0x20>
    46ca:	490a      	ldr	r1, [pc, #40]	; (46f4 <z_priq_dumb_remove+0x34>)
    46cc:	480a      	ldr	r0, [pc, #40]	; (46f8 <z_priq_dumb_remove+0x38>)
    46ce:	f240 32e7 	movw	r2, #999	; 0x3e7
    46d2:	f003 fd1f 	bl	8114 <printk>
    46d6:	f240 31e7 	movw	r1, #999	; 0x3e7
    46da:	4806      	ldr	r0, [pc, #24]	; (46f4 <z_priq_dumb_remove+0x34>)
    46dc:	f003 fda5 	bl	822a <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    46e0:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    46e4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    46e6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    46e8:	2300      	movs	r3, #0
	node->prev = NULL;
    46ea:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    46ee:	bd10      	pop	{r4, pc}
    46f0:	20000158 	.word	0x20000158
    46f4:	00009bd0 	.word	0x00009bd0
    46f8:	00008d71 	.word	0x00008d71

000046fc <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    46fc:	6883      	ldr	r3, [r0, #8]
{
    46fe:	b510      	push	{r4, lr}
    4700:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    4702:	b953      	cbnz	r3, 471a <unpend_thread_no_timeout+0x1e>
    4704:	490a      	ldr	r1, [pc, #40]	; (4730 <unpend_thread_no_timeout+0x34>)
    4706:	480b      	ldr	r0, [pc, #44]	; (4734 <unpend_thread_no_timeout+0x38>)
    4708:	f240 2283 	movw	r2, #643	; 0x283
    470c:	f003 fd02 	bl	8114 <printk>
    4710:	f240 2183 	movw	r1, #643	; 0x283
    4714:	4806      	ldr	r0, [pc, #24]	; (4730 <unpend_thread_no_timeout+0x34>)
    4716:	f003 fd88 	bl	822a <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    471a:	4621      	mov	r1, r4
    471c:	68a0      	ldr	r0, [r4, #8]
    471e:	f7ff ffcf 	bl	46c0 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4722:	7b63      	ldrb	r3, [r4, #13]
    4724:	f023 0302 	bic.w	r3, r3, #2
    4728:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    472a:	2300      	movs	r3, #0
    472c:	60a3      	str	r3, [r4, #8]
}
    472e:	bd10      	pop	{r4, pc}
    4730:	00009bd0 	.word	0x00009bd0
    4734:	00008d71 	.word	0x00008d71

00004738 <update_cache>:
{
    4738:	b538      	push	{r3, r4, r5, lr}
    473a:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    473c:	4812      	ldr	r0, [pc, #72]	; (4788 <update_cache+0x50>)
    473e:	f003 ff7b 	bl	8638 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4742:	4d12      	ldr	r5, [pc, #72]	; (478c <update_cache+0x54>)
    4744:	4604      	mov	r4, r0
    4746:	b900      	cbnz	r0, 474a <update_cache+0x12>
    4748:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    474a:	b9aa      	cbnz	r2, 4778 <update_cache+0x40>
	__ASSERT(_current != NULL, "");
    474c:	68ab      	ldr	r3, [r5, #8]
    474e:	b943      	cbnz	r3, 4762 <update_cache+0x2a>
    4750:	490f      	ldr	r1, [pc, #60]	; (4790 <update_cache+0x58>)
    4752:	4810      	ldr	r0, [pc, #64]	; (4794 <update_cache+0x5c>)
    4754:	2289      	movs	r2, #137	; 0x89
    4756:	f003 fcdd 	bl	8114 <printk>
    475a:	2189      	movs	r1, #137	; 0x89
    475c:	480c      	ldr	r0, [pc, #48]	; (4790 <update_cache+0x58>)
    475e:	f003 fd64 	bl	822a <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    4762:	68ab      	ldr	r3, [r5, #8]
    4764:	7b5a      	ldrb	r2, [r3, #13]
    4766:	06d2      	lsls	r2, r2, #27
    4768:	d106      	bne.n	4778 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    476a:	69a2      	ldr	r2, [r4, #24]
    476c:	b922      	cbnz	r2, 4778 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    476e:	89da      	ldrh	r2, [r3, #14]
    4770:	2a7f      	cmp	r2, #127	; 0x7f
    4772:	d901      	bls.n	4778 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    4774:	61eb      	str	r3, [r5, #28]
}
    4776:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    4778:	68ab      	ldr	r3, [r5, #8]
    477a:	42a3      	cmp	r3, r4
    477c:	d001      	beq.n	4782 <update_cache+0x4a>
			z_reset_time_slice();
    477e:	f7ff feab 	bl	44d8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    4782:	61ec      	str	r4, [r5, #28]
}
    4784:	e7f7      	b.n	4776 <update_cache+0x3e>
    4786:	bf00      	nop
    4788:	20000a14 	.word	0x20000a14
    478c:	200009f4 	.word	0x200009f4
    4790:	00009bd0 	.word	0x00009bd0
    4794:	00008d71 	.word	0x00008d71

00004798 <move_thread_to_end_of_prio_q>:
{
    4798:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    479a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    479e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    47a0:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    47a2:	7b43      	ldrb	r3, [r0, #13]
    47a4:	da06      	bge.n	47b4 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    47a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    47aa:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    47ac:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    47ae:	481f      	ldr	r0, [pc, #124]	; (482c <move_thread_to_end_of_prio_q+0x94>)
    47b0:	f7ff ff86 	bl	46c0 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    47b4:	7b63      	ldrb	r3, [r4, #13]
    47b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    47ba:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    47bc:	4b1c      	ldr	r3, [pc, #112]	; (4830 <move_thread_to_end_of_prio_q+0x98>)
    47be:	429c      	cmp	r4, r3
    47c0:	d108      	bne.n	47d4 <move_thread_to_end_of_prio_q+0x3c>
    47c2:	491c      	ldr	r1, [pc, #112]	; (4834 <move_thread_to_end_of_prio_q+0x9c>)
    47c4:	481c      	ldr	r0, [pc, #112]	; (4838 <move_thread_to_end_of_prio_q+0xa0>)
    47c6:	22ba      	movs	r2, #186	; 0xba
    47c8:	f003 fca4 	bl	8114 <printk>
    47cc:	21ba      	movs	r1, #186	; 0xba
    47ce:	4819      	ldr	r0, [pc, #100]	; (4834 <move_thread_to_end_of_prio_q+0x9c>)
    47d0:	f003 fd2b 	bl	822a <assert_post_action>
	return list->head == list;
    47d4:	4a19      	ldr	r2, [pc, #100]	; (483c <move_thread_to_end_of_prio_q+0xa4>)
    47d6:	4611      	mov	r1, r2
    47d8:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    47dc:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    47de:	428b      	cmp	r3, r1
    47e0:	bf08      	it	eq
    47e2:	2300      	moveq	r3, #0
    47e4:	2b00      	cmp	r3, #0
    47e6:	bf38      	it	cc
    47e8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    47ea:	b1cb      	cbz	r3, 4820 <move_thread_to_end_of_prio_q+0x88>
	int32_t b1 = thread_1->base.prio;
    47ec:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    47f0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    47f4:	4286      	cmp	r6, r0
    47f6:	d00f      	beq.n	4818 <move_thread_to_end_of_prio_q+0x80>
		return b2 - b1;
    47f8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    47fa:	2800      	cmp	r0, #0
    47fc:	dd0c      	ble.n	4818 <move_thread_to_end_of_prio_q+0x80>
	sys_dnode_t *const prev = successor->prev;
    47fe:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    4800:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    4804:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    4806:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    4808:	6890      	ldr	r0, [r2, #8]
    480a:	1b03      	subs	r3, r0, r4
    480c:	4258      	negs	r0, r3
    480e:	4158      	adcs	r0, r3
}
    4810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    4814:	f7ff bf90 	b.w	4738 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4818:	42ab      	cmp	r3, r5
    481a:	d001      	beq.n	4820 <move_thread_to_end_of_prio_q+0x88>
    481c:	681b      	ldr	r3, [r3, #0]
    481e:	e7e4      	b.n	47ea <move_thread_to_end_of_prio_q+0x52>
	node->prev = tail;
    4820:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    4824:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4826:	6254      	str	r4, [r2, #36]	; 0x24
}
    4828:	e7ee      	b.n	4808 <move_thread_to_end_of_prio_q+0x70>
    482a:	bf00      	nop
    482c:	20000a14 	.word	0x20000a14
    4830:	20000158 	.word	0x20000158
    4834:	00009bd0 	.word	0x00009bd0
    4838:	00008d71 	.word	0x00008d71
    483c:	200009f4 	.word	0x200009f4

00004840 <z_time_slice>:
{
    4840:	b570      	push	{r4, r5, r6, lr}
    4842:	4604      	mov	r4, r0
	__asm__ volatile(
    4844:	f04f 0320 	mov.w	r3, #32
    4848:	f3ef 8511 	mrs	r5, BASEPRI
    484c:	f383 8812 	msr	BASEPRI_MAX, r3
    4850:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4854:	4825      	ldr	r0, [pc, #148]	; (48ec <z_time_slice+0xac>)
    4856:	f7ff fbdf 	bl	4018 <z_spin_lock_valid>
    485a:	b940      	cbnz	r0, 486e <z_time_slice+0x2e>
    485c:	4924      	ldr	r1, [pc, #144]	; (48f0 <z_time_slice+0xb0>)
    485e:	4825      	ldr	r0, [pc, #148]	; (48f4 <z_time_slice+0xb4>)
    4860:	2281      	movs	r2, #129	; 0x81
    4862:	f003 fc57 	bl	8114 <printk>
    4866:	2181      	movs	r1, #129	; 0x81
    4868:	4821      	ldr	r0, [pc, #132]	; (48f0 <z_time_slice+0xb0>)
    486a:	f003 fcde 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    486e:	481f      	ldr	r0, [pc, #124]	; (48ec <z_time_slice+0xac>)
    4870:	f7ff fbee 	bl	4050 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    4874:	4b20      	ldr	r3, [pc, #128]	; (48f8 <z_time_slice+0xb8>)
    4876:	4a21      	ldr	r2, [pc, #132]	; (48fc <z_time_slice+0xbc>)
    4878:	6898      	ldr	r0, [r3, #8]
    487a:	6811      	ldr	r1, [r2, #0]
    487c:	4288      	cmp	r0, r1
    487e:	4619      	mov	r1, r3
    4880:	d113      	bne.n	48aa <z_time_slice+0x6a>
			z_reset_time_slice();
    4882:	f7ff fe29 	bl	44d8 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4886:	4819      	ldr	r0, [pc, #100]	; (48ec <z_time_slice+0xac>)
    4888:	f7ff fbd4 	bl	4034 <z_spin_unlock_valid>
    488c:	b940      	cbnz	r0, 48a0 <z_time_slice+0x60>
    488e:	4918      	ldr	r1, [pc, #96]	; (48f0 <z_time_slice+0xb0>)
    4890:	4818      	ldr	r0, [pc, #96]	; (48f4 <z_time_slice+0xb4>)
    4892:	22ac      	movs	r2, #172	; 0xac
    4894:	f003 fc3e 	bl	8114 <printk>
    4898:	21ac      	movs	r1, #172	; 0xac
    489a:	4815      	ldr	r0, [pc, #84]	; (48f0 <z_time_slice+0xb0>)
    489c:	f003 fcc5 	bl	822a <assert_post_action>
	__asm__ volatile(
    48a0:	f385 8811 	msr	BASEPRI, r5
    48a4:	f3bf 8f6f 	isb	sy
}
    48a8:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    48aa:	2600      	movs	r6, #0
    48ac:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    48ae:	4a14      	ldr	r2, [pc, #80]	; (4900 <z_time_slice+0xc0>)
    48b0:	6812      	ldr	r2, [r2, #0]
    48b2:	b1ba      	cbz	r2, 48e4 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
    48b4:	89c2      	ldrh	r2, [r0, #14]
    48b6:	2a7f      	cmp	r2, #127	; 0x7f
    48b8:	d814      	bhi.n	48e4 <z_time_slice+0xa4>
		&& !z_is_thread_prevented_from_running(thread)
    48ba:	7b42      	ldrb	r2, [r0, #13]
    48bc:	06d2      	lsls	r2, r2, #27
    48be:	d111      	bne.n	48e4 <z_time_slice+0xa4>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    48c0:	4a10      	ldr	r2, [pc, #64]	; (4904 <z_time_slice+0xc4>)
    48c2:	f990 600e 	ldrsb.w	r6, [r0, #14]
    48c6:	6812      	ldr	r2, [r2, #0]
    48c8:	4296      	cmp	r6, r2
    48ca:	db0b      	blt.n	48e4 <z_time_slice+0xa4>
		&& !z_is_idle_thread_object(thread);
    48cc:	4a0e      	ldr	r2, [pc, #56]	; (4908 <z_time_slice+0xc8>)
    48ce:	4290      	cmp	r0, r2
    48d0:	d008      	beq.n	48e4 <z_time_slice+0xa4>
		if (ticks >= _current_cpu->slice_ticks) {
    48d2:	691a      	ldr	r2, [r3, #16]
    48d4:	42a2      	cmp	r2, r4
    48d6:	dc02      	bgt.n	48de <z_time_slice+0x9e>
			move_thread_to_end_of_prio_q(_current);
    48d8:	f7ff ff5e 	bl	4798 <move_thread_to_end_of_prio_q>
    48dc:	e7d1      	b.n	4882 <z_time_slice+0x42>
			_current_cpu->slice_ticks -= ticks;
    48de:	1b12      	subs	r2, r2, r4
    48e0:	611a      	str	r2, [r3, #16]
    48e2:	e7d0      	b.n	4886 <z_time_slice+0x46>
		_current_cpu->slice_ticks = 0;
    48e4:	2300      	movs	r3, #0
    48e6:	610b      	str	r3, [r1, #16]
    48e8:	e7cd      	b.n	4886 <z_time_slice+0x46>
    48ea:	bf00      	nop
    48ec:	20000a28 	.word	0x20000a28
    48f0:	00008d4b 	.word	0x00008d4b
    48f4:	00008d71 	.word	0x00008d71
    48f8:	200009f4 	.word	0x200009f4
    48fc:	20000a24 	.word	0x20000a24
    4900:	20000a30 	.word	0x20000a30
    4904:	20000a2c 	.word	0x20000a2c
    4908:	20000158 	.word	0x20000158

0000490c <ready_thread>:
{
    490c:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    490e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    4912:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4914:	2a00      	cmp	r2, #0
    4916:	7b43      	ldrb	r3, [r0, #13]
    4918:	db3d      	blt.n	4996 <ready_thread+0x8a>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    491a:	06da      	lsls	r2, r3, #27
    491c:	d13b      	bne.n	4996 <ready_thread+0x8a>
	return !sys_dnode_is_linked(&to->node);
    491e:	6985      	ldr	r5, [r0, #24]
    4920:	2d00      	cmp	r5, #0
    4922:	d138      	bne.n	4996 <ready_thread+0x8a>
	thread->base.thread_state |= _THREAD_QUEUED;
    4924:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4928:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    492a:	4b1b      	ldr	r3, [pc, #108]	; (4998 <ready_thread+0x8c>)
    492c:	4298      	cmp	r0, r3
    492e:	d108      	bne.n	4942 <ready_thread+0x36>
    4930:	491a      	ldr	r1, [pc, #104]	; (499c <ready_thread+0x90>)
    4932:	481b      	ldr	r0, [pc, #108]	; (49a0 <ready_thread+0x94>)
    4934:	22ba      	movs	r2, #186	; 0xba
    4936:	f003 fbed 	bl	8114 <printk>
    493a:	21ba      	movs	r1, #186	; 0xba
    493c:	4817      	ldr	r0, [pc, #92]	; (499c <ready_thread+0x90>)
    493e:	f003 fc74 	bl	822a <assert_post_action>
	return list->head == list;
    4942:	4918      	ldr	r1, [pc, #96]	; (49a4 <ready_thread+0x98>)
    4944:	460b      	mov	r3, r1
    4946:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    494a:	4298      	cmp	r0, r3
    494c:	bf18      	it	ne
    494e:	4605      	movne	r5, r0
    4950:	2d00      	cmp	r5, #0
    4952:	461a      	mov	r2, r3
    4954:	462b      	mov	r3, r5
    4956:	bf38      	it	cc
    4958:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    495a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    495c:	b1b3      	cbz	r3, 498c <ready_thread+0x80>
	int32_t b1 = thread_1->base.prio;
    495e:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4962:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4966:	4286      	cmp	r6, r0
    4968:	d00c      	beq.n	4984 <ready_thread+0x78>
		return b2 - b1;
    496a:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    496c:	2800      	cmp	r0, #0
    496e:	dd09      	ble.n	4984 <ready_thread+0x78>
	sys_dnode_t *const prev = successor->prev;
    4970:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4972:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4976:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4978:	605c      	str	r4, [r3, #4]
		update_cache(0);
    497a:	2000      	movs	r0, #0
}
    497c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    4980:	f7ff beda 	b.w	4738 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    4984:	42ab      	cmp	r3, r5
    4986:	d001      	beq.n	498c <ready_thread+0x80>
    4988:	681b      	ldr	r3, [r3, #0]
    498a:	e7e7      	b.n	495c <ready_thread+0x50>
	node->prev = tail;
    498c:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    4990:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4992:	624c      	str	r4, [r1, #36]	; 0x24
}
    4994:	e7f1      	b.n	497a <ready_thread+0x6e>
}
    4996:	bd70      	pop	{r4, r5, r6, pc}
    4998:	20000158 	.word	0x20000158
    499c:	00009bd0 	.word	0x00009bd0
    49a0:	00008d71 	.word	0x00008d71
    49a4:	200009f4 	.word	0x200009f4

000049a8 <z_ready_thread>:
{
    49a8:	b538      	push	{r3, r4, r5, lr}
    49aa:	4604      	mov	r4, r0
	__asm__ volatile(
    49ac:	f04f 0320 	mov.w	r3, #32
    49b0:	f3ef 8511 	mrs	r5, BASEPRI
    49b4:	f383 8812 	msr	BASEPRI_MAX, r3
    49b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    49bc:	4812      	ldr	r0, [pc, #72]	; (4a08 <z_ready_thread+0x60>)
    49be:	f7ff fb2b 	bl	4018 <z_spin_lock_valid>
    49c2:	b940      	cbnz	r0, 49d6 <z_ready_thread+0x2e>
    49c4:	4911      	ldr	r1, [pc, #68]	; (4a0c <z_ready_thread+0x64>)
    49c6:	4812      	ldr	r0, [pc, #72]	; (4a10 <z_ready_thread+0x68>)
    49c8:	2281      	movs	r2, #129	; 0x81
    49ca:	f003 fba3 	bl	8114 <printk>
    49ce:	2181      	movs	r1, #129	; 0x81
    49d0:	480e      	ldr	r0, [pc, #56]	; (4a0c <z_ready_thread+0x64>)
    49d2:	f003 fc2a 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    49d6:	480c      	ldr	r0, [pc, #48]	; (4a08 <z_ready_thread+0x60>)
    49d8:	f7ff fb3a 	bl	4050 <z_spin_lock_set_owner>
			ready_thread(thread);
    49dc:	4620      	mov	r0, r4
    49de:	f7ff ff95 	bl	490c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    49e2:	4809      	ldr	r0, [pc, #36]	; (4a08 <z_ready_thread+0x60>)
    49e4:	f7ff fb26 	bl	4034 <z_spin_unlock_valid>
    49e8:	b940      	cbnz	r0, 49fc <z_ready_thread+0x54>
    49ea:	4908      	ldr	r1, [pc, #32]	; (4a0c <z_ready_thread+0x64>)
    49ec:	4808      	ldr	r0, [pc, #32]	; (4a10 <z_ready_thread+0x68>)
    49ee:	22ac      	movs	r2, #172	; 0xac
    49f0:	f003 fb90 	bl	8114 <printk>
    49f4:	21ac      	movs	r1, #172	; 0xac
    49f6:	4805      	ldr	r0, [pc, #20]	; (4a0c <z_ready_thread+0x64>)
    49f8:	f003 fc17 	bl	822a <assert_post_action>
	__asm__ volatile(
    49fc:	f385 8811 	msr	BASEPRI, r5
    4a00:	f3bf 8f6f 	isb	sy
}
    4a04:	bd38      	pop	{r3, r4, r5, pc}
    4a06:	bf00      	nop
    4a08:	20000a28 	.word	0x20000a28
    4a0c:	00008d4b 	.word	0x00008d4b
    4a10:	00008d71 	.word	0x00008d71

00004a14 <z_sched_start>:
{
    4a14:	b538      	push	{r3, r4, r5, lr}
    4a16:	4604      	mov	r4, r0
	__asm__ volatile(
    4a18:	f04f 0320 	mov.w	r3, #32
    4a1c:	f3ef 8511 	mrs	r5, BASEPRI
    4a20:	f383 8812 	msr	BASEPRI_MAX, r3
    4a24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4a28:	4818      	ldr	r0, [pc, #96]	; (4a8c <z_sched_start+0x78>)
    4a2a:	f7ff faf5 	bl	4018 <z_spin_lock_valid>
    4a2e:	b940      	cbnz	r0, 4a42 <z_sched_start+0x2e>
    4a30:	4917      	ldr	r1, [pc, #92]	; (4a90 <z_sched_start+0x7c>)
    4a32:	4818      	ldr	r0, [pc, #96]	; (4a94 <z_sched_start+0x80>)
    4a34:	2281      	movs	r2, #129	; 0x81
    4a36:	f003 fb6d 	bl	8114 <printk>
    4a3a:	2181      	movs	r1, #129	; 0x81
    4a3c:	4814      	ldr	r0, [pc, #80]	; (4a90 <z_sched_start+0x7c>)
    4a3e:	f003 fbf4 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    4a42:	4812      	ldr	r0, [pc, #72]	; (4a8c <z_sched_start+0x78>)
    4a44:	f7ff fb04 	bl	4050 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    4a48:	7b63      	ldrb	r3, [r4, #13]
    4a4a:	075a      	lsls	r2, r3, #29
    4a4c:	d411      	bmi.n	4a72 <z_sched_start+0x5e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4a4e:	480f      	ldr	r0, [pc, #60]	; (4a8c <z_sched_start+0x78>)
    4a50:	f7ff faf0 	bl	4034 <z_spin_unlock_valid>
    4a54:	b940      	cbnz	r0, 4a68 <z_sched_start+0x54>
    4a56:	490e      	ldr	r1, [pc, #56]	; (4a90 <z_sched_start+0x7c>)
    4a58:	480e      	ldr	r0, [pc, #56]	; (4a94 <z_sched_start+0x80>)
    4a5a:	22ac      	movs	r2, #172	; 0xac
    4a5c:	f003 fb5a 	bl	8114 <printk>
    4a60:	21ac      	movs	r1, #172	; 0xac
    4a62:	480b      	ldr	r0, [pc, #44]	; (4a90 <z_sched_start+0x7c>)
    4a64:	f003 fbe1 	bl	822a <assert_post_action>
	__asm__ volatile(
    4a68:	f385 8811 	msr	BASEPRI, r5
    4a6c:	f3bf 8f6f 	isb	sy
}
    4a70:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4a72:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    4a76:	4620      	mov	r0, r4
    4a78:	7363      	strb	r3, [r4, #13]
    4a7a:	f7ff ff47 	bl	490c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4a7e:	4629      	mov	r1, r5
}
    4a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    4a84:	4801      	ldr	r0, [pc, #4]	; (4a8c <z_sched_start+0x78>)
    4a86:	f7ff bd91 	b.w	45ac <z_reschedule>
    4a8a:	bf00      	nop
    4a8c:	20000a28 	.word	0x20000a28
    4a90:	00008d4b 	.word	0x00008d4b
    4a94:	00008d71 	.word	0x00008d71

00004a98 <z_thread_timeout>:
{
    4a98:	b570      	push	{r4, r5, r6, lr}
    4a9a:	4604      	mov	r4, r0
	__asm__ volatile(
    4a9c:	f04f 0320 	mov.w	r3, #32
    4aa0:	f3ef 8611 	mrs	r6, BASEPRI
    4aa4:	f383 8812 	msr	BASEPRI_MAX, r3
    4aa8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4aac:	481b      	ldr	r0, [pc, #108]	; (4b1c <z_thread_timeout+0x84>)
    4aae:	f7ff fab3 	bl	4018 <z_spin_lock_valid>
    4ab2:	b940      	cbnz	r0, 4ac6 <z_thread_timeout+0x2e>
    4ab4:	491a      	ldr	r1, [pc, #104]	; (4b20 <z_thread_timeout+0x88>)
    4ab6:	481b      	ldr	r0, [pc, #108]	; (4b24 <z_thread_timeout+0x8c>)
    4ab8:	2281      	movs	r2, #129	; 0x81
    4aba:	f003 fb2b 	bl	8114 <printk>
    4abe:	2181      	movs	r1, #129	; 0x81
    4ac0:	4817      	ldr	r0, [pc, #92]	; (4b20 <z_thread_timeout+0x88>)
    4ac2:	f003 fbb2 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    4ac6:	4815      	ldr	r0, [pc, #84]	; (4b1c <z_thread_timeout+0x84>)
    4ac8:	f7ff fac2 	bl	4050 <z_spin_lock_set_owner>
		if (!killed) {
    4acc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    4ad0:	f013 0f28 	tst.w	r3, #40	; 0x28
    4ad4:	d110      	bne.n	4af8 <z_thread_timeout+0x60>
			if (thread->base.pended_on != NULL) {
    4ad6:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    4ada:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    4ade:	b113      	cbz	r3, 4ae6 <z_thread_timeout+0x4e>
				unpend_thread_no_timeout(thread);
    4ae0:	4628      	mov	r0, r5
    4ae2:	f7ff fe0b 	bl	46fc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4ae6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
			ready_thread(thread);
    4aea:	4628      	mov	r0, r5
    4aec:	f023 0314 	bic.w	r3, r3, #20
    4af0:	f804 3c0b 	strb.w	r3, [r4, #-11]
    4af4:	f7ff ff0a 	bl	490c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4af8:	4808      	ldr	r0, [pc, #32]	; (4b1c <z_thread_timeout+0x84>)
    4afa:	f7ff fa9b 	bl	4034 <z_spin_unlock_valid>
    4afe:	b940      	cbnz	r0, 4b12 <z_thread_timeout+0x7a>
    4b00:	4907      	ldr	r1, [pc, #28]	; (4b20 <z_thread_timeout+0x88>)
    4b02:	4808      	ldr	r0, [pc, #32]	; (4b24 <z_thread_timeout+0x8c>)
    4b04:	22ac      	movs	r2, #172	; 0xac
    4b06:	f003 fb05 	bl	8114 <printk>
    4b0a:	21ac      	movs	r1, #172	; 0xac
    4b0c:	4804      	ldr	r0, [pc, #16]	; (4b20 <z_thread_timeout+0x88>)
    4b0e:	f003 fb8c 	bl	822a <assert_post_action>
	__asm__ volatile(
    4b12:	f386 8811 	msr	BASEPRI, r6
    4b16:	f3bf 8f6f 	isb	sy
}
    4b1a:	bd70      	pop	{r4, r5, r6, pc}
    4b1c:	20000a28 	.word	0x20000a28
    4b20:	00008d4b 	.word	0x00008d4b
    4b24:	00008d71 	.word	0x00008d71

00004b28 <unready_thread>:
{
    4b28:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    4b2a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    4b2e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    4b30:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    4b32:	7b43      	ldrb	r3, [r0, #13]
    4b34:	da06      	bge.n	4b44 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    4b3a:	4601      	mov	r1, r0
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4b3c:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4b3e:	4806      	ldr	r0, [pc, #24]	; (4b58 <unready_thread+0x30>)
    4b40:	f7ff fdbe 	bl	46c0 <z_priq_dumb_remove>
	update_cache(thread == _current);
    4b44:	4b05      	ldr	r3, [pc, #20]	; (4b5c <unready_thread+0x34>)
    4b46:	6898      	ldr	r0, [r3, #8]
    4b48:	1b03      	subs	r3, r0, r4
    4b4a:	4258      	negs	r0, r3
    4b4c:	4158      	adcs	r0, r3
}
    4b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    4b52:	f7ff bdf1 	b.w	4738 <update_cache>
    4b56:	bf00      	nop
    4b58:	20000a14 	.word	0x20000a14
    4b5c:	200009f4 	.word	0x200009f4

00004b60 <add_to_waitq_locked>:
{
    4b60:	b538      	push	{r3, r4, r5, lr}
    4b62:	4604      	mov	r4, r0
    4b64:	460d      	mov	r5, r1
	unready_thread(thread);
    4b66:	f7ff ffdf 	bl	4b28 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4b6a:	7b63      	ldrb	r3, [r4, #13]
    4b6c:	f043 0302 	orr.w	r3, r3, #2
    4b70:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4b72:	b315      	cbz	r5, 4bba <add_to_waitq_locked+0x5a>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4b74:	4b17      	ldr	r3, [pc, #92]	; (4bd4 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    4b76:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4b78:	429c      	cmp	r4, r3
    4b7a:	d108      	bne.n	4b8e <add_to_waitq_locked+0x2e>
    4b7c:	4916      	ldr	r1, [pc, #88]	; (4bd8 <add_to_waitq_locked+0x78>)
    4b7e:	4817      	ldr	r0, [pc, #92]	; (4bdc <add_to_waitq_locked+0x7c>)
    4b80:	22ba      	movs	r2, #186	; 0xba
    4b82:	f003 fac7 	bl	8114 <printk>
    4b86:	21ba      	movs	r1, #186	; 0xba
    4b88:	4813      	ldr	r0, [pc, #76]	; (4bd8 <add_to_waitq_locked+0x78>)
    4b8a:	f003 fb4e 	bl	822a <assert_post_action>
	return list->head == list;
    4b8e:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b90:	429d      	cmp	r5, r3
    4b92:	bf08      	it	eq
    4b94:	2300      	moveq	r3, #0
    4b96:	2b00      	cmp	r3, #0
    4b98:	bf38      	it	cc
    4b9a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4b9c:	b19b      	cbz	r3, 4bc6 <add_to_waitq_locked+0x66>
	int32_t b1 = thread_1->base.prio;
    4b9e:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4ba2:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    4ba6:	4291      	cmp	r1, r2
    4ba8:	d008      	beq.n	4bbc <add_to_waitq_locked+0x5c>
		return b2 - b1;
    4baa:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    4bac:	2a00      	cmp	r2, #0
    4bae:	dd05      	ble.n	4bbc <add_to_waitq_locked+0x5c>
	sys_dnode_t *const prev = successor->prev;
    4bb0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4bb2:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4bb6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4bb8:	605c      	str	r4, [r3, #4]
}
    4bba:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    4bbc:	686a      	ldr	r2, [r5, #4]
    4bbe:	4293      	cmp	r3, r2
    4bc0:	d001      	beq.n	4bc6 <add_to_waitq_locked+0x66>
    4bc2:	681b      	ldr	r3, [r3, #0]
    4bc4:	e7ea      	b.n	4b9c <add_to_waitq_locked+0x3c>
	sys_dnode_t *const tail = list->tail;
    4bc6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    4bc8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    4bcc:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4bce:	606c      	str	r4, [r5, #4]
    4bd0:	e7f3      	b.n	4bba <add_to_waitq_locked+0x5a>
    4bd2:	bf00      	nop
    4bd4:	20000158 	.word	0x20000158
    4bd8:	00009bd0 	.word	0x00009bd0
    4bdc:	00008d71 	.word	0x00008d71

00004be0 <pend>:
{
    4be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4be4:	4604      	mov	r4, r0
    4be6:	460d      	mov	r5, r1
    4be8:	4616      	mov	r6, r2
    4bea:	461f      	mov	r7, r3
	__asm__ volatile(
    4bec:	f04f 0320 	mov.w	r3, #32
    4bf0:	f3ef 8811 	mrs	r8, BASEPRI
    4bf4:	f383 8812 	msr	BASEPRI_MAX, r3
    4bf8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4bfc:	481a      	ldr	r0, [pc, #104]	; (4c68 <pend+0x88>)
    4bfe:	f7ff fa0b 	bl	4018 <z_spin_lock_valid>
    4c02:	b940      	cbnz	r0, 4c16 <pend+0x36>
    4c04:	4919      	ldr	r1, [pc, #100]	; (4c6c <pend+0x8c>)
    4c06:	481a      	ldr	r0, [pc, #104]	; (4c70 <pend+0x90>)
    4c08:	2281      	movs	r2, #129	; 0x81
    4c0a:	f003 fa83 	bl	8114 <printk>
    4c0e:	2181      	movs	r1, #129	; 0x81
    4c10:	4816      	ldr	r0, [pc, #88]	; (4c6c <pend+0x8c>)
    4c12:	f003 fb0a 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    4c16:	4814      	ldr	r0, [pc, #80]	; (4c68 <pend+0x88>)
    4c18:	f7ff fa1a 	bl	4050 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    4c1c:	4620      	mov	r0, r4
    4c1e:	4629      	mov	r1, r5
    4c20:	f7ff ff9e 	bl	4b60 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4c24:	4810      	ldr	r0, [pc, #64]	; (4c68 <pend+0x88>)
    4c26:	f7ff fa05 	bl	4034 <z_spin_unlock_valid>
    4c2a:	b940      	cbnz	r0, 4c3e <pend+0x5e>
    4c2c:	490f      	ldr	r1, [pc, #60]	; (4c6c <pend+0x8c>)
    4c2e:	4810      	ldr	r0, [pc, #64]	; (4c70 <pend+0x90>)
    4c30:	22ac      	movs	r2, #172	; 0xac
    4c32:	f003 fa6f 	bl	8114 <printk>
    4c36:	21ac      	movs	r1, #172	; 0xac
    4c38:	480c      	ldr	r0, [pc, #48]	; (4c6c <pend+0x8c>)
    4c3a:	f003 faf6 	bl	822a <assert_post_action>
	__asm__ volatile(
    4c3e:	f388 8811 	msr	BASEPRI, r8
    4c42:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4c46:	1c7b      	adds	r3, r7, #1
    4c48:	bf08      	it	eq
    4c4a:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    4c4e:	d008      	beq.n	4c62 <pend+0x82>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4c50:	4632      	mov	r2, r6
    4c52:	463b      	mov	r3, r7
    4c54:	f104 0018 	add.w	r0, r4, #24
    4c58:	4906      	ldr	r1, [pc, #24]	; (4c74 <pend+0x94>)
}
    4c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4c5e:	f000 ba63 	b.w	5128 <z_add_timeout>
    4c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c66:	bf00      	nop
    4c68:	20000a28 	.word	0x20000a28
    4c6c:	00008d4b 	.word	0x00008d4b
    4c70:	00008d71 	.word	0x00008d71
    4c74:	00004a99 	.word	0x00004a99

00004c78 <z_pend_curr>:
{
    4c78:	b538      	push	{r3, r4, r5, lr}
    4c7a:	4605      	mov	r5, r0
	pending_current = _current;
    4c7c:	4b0d      	ldr	r3, [pc, #52]	; (4cb4 <z_pend_curr+0x3c>)
{
    4c7e:	460c      	mov	r4, r1
	pending_current = _current;
    4c80:	6898      	ldr	r0, [r3, #8]
    4c82:	4b0d      	ldr	r3, [pc, #52]	; (4cb8 <z_pend_curr+0x40>)
{
    4c84:	4611      	mov	r1, r2
	pending_current = _current;
    4c86:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    4c88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    4c8c:	f7ff ffa8 	bl	4be0 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4c90:	4628      	mov	r0, r5
    4c92:	f7ff f9cf 	bl	4034 <z_spin_unlock_valid>
    4c96:	b940      	cbnz	r0, 4caa <z_pend_curr+0x32>
    4c98:	4908      	ldr	r1, [pc, #32]	; (4cbc <z_pend_curr+0x44>)
    4c9a:	4809      	ldr	r0, [pc, #36]	; (4cc0 <z_pend_curr+0x48>)
    4c9c:	22c3      	movs	r2, #195	; 0xc3
    4c9e:	f003 fa39 	bl	8114 <printk>
    4ca2:	21c3      	movs	r1, #195	; 0xc3
    4ca4:	4805      	ldr	r0, [pc, #20]	; (4cbc <z_pend_curr+0x44>)
    4ca6:	f003 fac0 	bl	822a <assert_post_action>
    4caa:	4620      	mov	r0, r4
}
    4cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4cb0:	f7fc bd72 	b.w	1798 <arch_swap>
    4cb4:	200009f4 	.word	0x200009f4
    4cb8:	20000a24 	.word	0x20000a24
    4cbc:	00008d4b 	.word	0x00008d4b
    4cc0:	00008d71 	.word	0x00008d71

00004cc4 <z_set_prio>:
{
    4cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cc6:	4604      	mov	r4, r0
    4cc8:	460e      	mov	r6, r1
	__asm__ volatile(
    4cca:	f04f 0320 	mov.w	r3, #32
    4cce:	f3ef 8711 	mrs	r7, BASEPRI
    4cd2:	f383 8812 	msr	BASEPRI_MAX, r3
    4cd6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4cda:	4837      	ldr	r0, [pc, #220]	; (4db8 <z_set_prio+0xf4>)
    4cdc:	f7ff f99c 	bl	4018 <z_spin_lock_valid>
    4ce0:	b940      	cbnz	r0, 4cf4 <z_set_prio+0x30>
    4ce2:	4936      	ldr	r1, [pc, #216]	; (4dbc <z_set_prio+0xf8>)
    4ce4:	4836      	ldr	r0, [pc, #216]	; (4dc0 <z_set_prio+0xfc>)
    4ce6:	2281      	movs	r2, #129	; 0x81
    4ce8:	f003 fa14 	bl	8114 <printk>
    4cec:	2181      	movs	r1, #129	; 0x81
    4cee:	4833      	ldr	r0, [pc, #204]	; (4dbc <z_set_prio+0xf8>)
    4cf0:	f003 fa9b 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    4cf4:	4830      	ldr	r0, [pc, #192]	; (4db8 <z_set_prio+0xf4>)
    4cf6:	f7ff f9ab 	bl	4050 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4cfa:	7b63      	ldrb	r3, [r4, #13]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
    4cfc:	b276      	sxtb	r6, r6
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4cfe:	06da      	lsls	r2, r3, #27
    4d00:	d156      	bne.n	4db0 <z_set_prio+0xec>
	return !sys_dnode_is_linked(&to->node);
    4d02:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    4d04:	2d00      	cmp	r5, #0
    4d06:	d153      	bne.n	4db0 <z_set_prio+0xec>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4d0c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4d0e:	4621      	mov	r1, r4
    4d10:	482c      	ldr	r0, [pc, #176]	; (4dc4 <z_set_prio+0x100>)
    4d12:	f7ff fcd5 	bl	46c0 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    4d16:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    4d18:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    4d1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4d1e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    4d20:	4b29      	ldr	r3, [pc, #164]	; (4dc8 <z_set_prio+0x104>)
    4d22:	429c      	cmp	r4, r3
    4d24:	d108      	bne.n	4d38 <z_set_prio+0x74>
    4d26:	4929      	ldr	r1, [pc, #164]	; (4dcc <z_set_prio+0x108>)
    4d28:	4825      	ldr	r0, [pc, #148]	; (4dc0 <z_set_prio+0xfc>)
    4d2a:	22ba      	movs	r2, #186	; 0xba
    4d2c:	f003 f9f2 	bl	8114 <printk>
    4d30:	21ba      	movs	r1, #186	; 0xba
    4d32:	4826      	ldr	r0, [pc, #152]	; (4dcc <z_set_prio+0x108>)
    4d34:	f003 fa79 	bl	822a <assert_post_action>
	return list->head == list;
    4d38:	4925      	ldr	r1, [pc, #148]	; (4dd0 <z_set_prio+0x10c>)
    4d3a:	460b      	mov	r3, r1
    4d3c:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d40:	4298      	cmp	r0, r3
    4d42:	bf18      	it	ne
    4d44:	4605      	movne	r5, r0
    4d46:	2d00      	cmp	r5, #0
    4d48:	461a      	mov	r2, r3
    4d4a:	462b      	mov	r3, r5
    4d4c:	bf38      	it	cc
    4d4e:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4d50:	6a4d      	ldr	r5, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4d52:	b343      	cbz	r3, 4da6 <z_set_prio+0xe2>
	int32_t b1 = thread_1->base.prio;
    4d54:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4d58:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    4d5c:	4286      	cmp	r6, r0
    4d5e:	d01e      	beq.n	4d9e <z_set_prio+0xda>
		return b2 - b1;
    4d60:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4d62:	2800      	cmp	r0, #0
    4d64:	dd1b      	ble.n	4d9e <z_set_prio+0xda>
	sys_dnode_t *const prev = successor->prev;
    4d66:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4d68:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4d6c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4d6e:	605c      	str	r4, [r3, #4]
			update_cache(1);
    4d70:	2001      	movs	r0, #1
    4d72:	f7ff fce1 	bl	4738 <update_cache>
    4d76:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4d78:	480f      	ldr	r0, [pc, #60]	; (4db8 <z_set_prio+0xf4>)
    4d7a:	f7ff f95b 	bl	4034 <z_spin_unlock_valid>
    4d7e:	b940      	cbnz	r0, 4d92 <z_set_prio+0xce>
    4d80:	490e      	ldr	r1, [pc, #56]	; (4dbc <z_set_prio+0xf8>)
    4d82:	480f      	ldr	r0, [pc, #60]	; (4dc0 <z_set_prio+0xfc>)
    4d84:	22ac      	movs	r2, #172	; 0xac
    4d86:	f003 f9c5 	bl	8114 <printk>
    4d8a:	21ac      	movs	r1, #172	; 0xac
    4d8c:	480b      	ldr	r0, [pc, #44]	; (4dbc <z_set_prio+0xf8>)
    4d8e:	f003 fa4c 	bl	822a <assert_post_action>
	__asm__ volatile(
    4d92:	f387 8811 	msr	BASEPRI, r7
    4d96:	f3bf 8f6f 	isb	sy
}
    4d9a:	4620      	mov	r0, r4
    4d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    4d9e:	42ab      	cmp	r3, r5
    4da0:	d001      	beq.n	4da6 <z_set_prio+0xe2>
    4da2:	681b      	ldr	r3, [r3, #0]
    4da4:	e7d5      	b.n	4d52 <z_set_prio+0x8e>
	node->prev = tail;
    4da6:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    4daa:	602c      	str	r4, [r5, #0]
	list->tail = node;
    4dac:	624c      	str	r4, [r1, #36]	; 0x24
}
    4dae:	e7df      	b.n	4d70 <z_set_prio+0xac>
			thread->base.prio = prio;
    4db0:	73a6      	strb	r6, [r4, #14]
    4db2:	2400      	movs	r4, #0
    4db4:	e7e0      	b.n	4d78 <z_set_prio+0xb4>
    4db6:	bf00      	nop
    4db8:	20000a28 	.word	0x20000a28
    4dbc:	00008d4b 	.word	0x00008d4b
    4dc0:	00008d71 	.word	0x00008d71
    4dc4:	20000a14 	.word	0x20000a14
    4dc8:	20000158 	.word	0x20000158
    4dcc:	00009bd0 	.word	0x00009bd0
    4dd0:	200009f4 	.word	0x200009f4

00004dd4 <k_sched_unlock>:
{
    4dd4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4dd6:	f04f 0320 	mov.w	r3, #32
    4dda:	f3ef 8511 	mrs	r5, BASEPRI
    4dde:	f383 8812 	msr	BASEPRI_MAX, r3
    4de2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4de6:	4824      	ldr	r0, [pc, #144]	; (4e78 <k_sched_unlock+0xa4>)
    4de8:	f7ff f916 	bl	4018 <z_spin_lock_valid>
    4dec:	b940      	cbnz	r0, 4e00 <k_sched_unlock+0x2c>
    4dee:	4923      	ldr	r1, [pc, #140]	; (4e7c <k_sched_unlock+0xa8>)
    4df0:	4823      	ldr	r0, [pc, #140]	; (4e80 <k_sched_unlock+0xac>)
    4df2:	2281      	movs	r2, #129	; 0x81
    4df4:	f003 f98e 	bl	8114 <printk>
    4df8:	2181      	movs	r1, #129	; 0x81
    4dfa:	4820      	ldr	r0, [pc, #128]	; (4e7c <k_sched_unlock+0xa8>)
    4dfc:	f003 fa15 	bl	822a <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    4e00:	4c20      	ldr	r4, [pc, #128]	; (4e84 <k_sched_unlock+0xb0>)
	z_spin_lock_set_owner(l);
    4e02:	481d      	ldr	r0, [pc, #116]	; (4e78 <k_sched_unlock+0xa4>)
    4e04:	f7ff f924 	bl	4050 <z_spin_lock_set_owner>
    4e08:	68a2      	ldr	r2, [r4, #8]
    4e0a:	7bd2      	ldrb	r2, [r2, #15]
    4e0c:	b952      	cbnz	r2, 4e24 <k_sched_unlock+0x50>
    4e0e:	491e      	ldr	r1, [pc, #120]	; (4e88 <k_sched_unlock+0xb4>)
    4e10:	481b      	ldr	r0, [pc, #108]	; (4e80 <k_sched_unlock+0xac>)
    4e12:	f240 3285 	movw	r2, #901	; 0x385
    4e16:	f003 f97d 	bl	8114 <printk>
    4e1a:	f240 3185 	movw	r1, #901	; 0x385
    4e1e:	481a      	ldr	r0, [pc, #104]	; (4e88 <k_sched_unlock+0xb4>)
    4e20:	f003 fa03 	bl	822a <assert_post_action>
    4e24:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    4e28:	b153      	cbz	r3, 4e40 <k_sched_unlock+0x6c>
    4e2a:	4917      	ldr	r1, [pc, #92]	; (4e88 <k_sched_unlock+0xb4>)
    4e2c:	4814      	ldr	r0, [pc, #80]	; (4e80 <k_sched_unlock+0xac>)
    4e2e:	f240 3286 	movw	r2, #902	; 0x386
    4e32:	f003 f96f 	bl	8114 <printk>
    4e36:	f240 3186 	movw	r1, #902	; 0x386
    4e3a:	4813      	ldr	r0, [pc, #76]	; (4e88 <k_sched_unlock+0xb4>)
    4e3c:	f003 f9f5 	bl	822a <assert_post_action>
		++_current->base.sched_locked;
    4e40:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
    4e42:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    4e44:	7bd3      	ldrb	r3, [r2, #15]
    4e46:	3301      	adds	r3, #1
    4e48:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4e4a:	f7ff fc75 	bl	4738 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4e4e:	480a      	ldr	r0, [pc, #40]	; (4e78 <k_sched_unlock+0xa4>)
    4e50:	f7ff f8f0 	bl	4034 <z_spin_unlock_valid>
    4e54:	b940      	cbnz	r0, 4e68 <k_sched_unlock+0x94>
    4e56:	4909      	ldr	r1, [pc, #36]	; (4e7c <k_sched_unlock+0xa8>)
    4e58:	4809      	ldr	r0, [pc, #36]	; (4e80 <k_sched_unlock+0xac>)
    4e5a:	22ac      	movs	r2, #172	; 0xac
    4e5c:	f003 f95a 	bl	8114 <printk>
    4e60:	21ac      	movs	r1, #172	; 0xac
    4e62:	4806      	ldr	r0, [pc, #24]	; (4e7c <k_sched_unlock+0xa8>)
    4e64:	f003 f9e1 	bl	822a <assert_post_action>
	__asm__ volatile(
    4e68:	f385 8811 	msr	BASEPRI, r5
    4e6c:	f3bf 8f6f 	isb	sy
}
    4e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    4e74:	f003 bbd6 	b.w	8624 <z_reschedule_unlocked>
    4e78:	20000a28 	.word	0x20000a28
    4e7c:	00008d4b 	.word	0x00008d4b
    4e80:	00008d71 	.word	0x00008d71
    4e84:	200009f4 	.word	0x200009f4
    4e88:	00009bd0 	.word	0x00009bd0

00004e8c <z_unpend_first_thread>:
{
    4e8c:	b538      	push	{r3, r4, r5, lr}
    4e8e:	4604      	mov	r4, r0
	__asm__ volatile(
    4e90:	f04f 0320 	mov.w	r3, #32
    4e94:	f3ef 8511 	mrs	r5, BASEPRI
    4e98:	f383 8812 	msr	BASEPRI_MAX, r3
    4e9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4ea0:	4816      	ldr	r0, [pc, #88]	; (4efc <z_unpend_first_thread+0x70>)
    4ea2:	f7ff f8b9 	bl	4018 <z_spin_lock_valid>
    4ea6:	b940      	cbnz	r0, 4eba <z_unpend_first_thread+0x2e>
    4ea8:	4915      	ldr	r1, [pc, #84]	; (4f00 <z_unpend_first_thread+0x74>)
    4eaa:	4816      	ldr	r0, [pc, #88]	; (4f04 <z_unpend_first_thread+0x78>)
    4eac:	2281      	movs	r2, #129	; 0x81
    4eae:	f003 f931 	bl	8114 <printk>
    4eb2:	2181      	movs	r1, #129	; 0x81
    4eb4:	4812      	ldr	r0, [pc, #72]	; (4f00 <z_unpend_first_thread+0x74>)
    4eb6:	f003 f9b8 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    4eba:	4810      	ldr	r0, [pc, #64]	; (4efc <z_unpend_first_thread+0x70>)
    4ebc:	f7ff f8c8 	bl	4050 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    4ec0:	4620      	mov	r0, r4
    4ec2:	f003 fbb9 	bl	8638 <z_priq_dumb_best>
		if (thread != NULL) {
    4ec6:	4604      	mov	r4, r0
    4ec8:	b128      	cbz	r0, 4ed6 <z_unpend_first_thread+0x4a>
			unpend_thread_no_timeout(thread);
    4eca:	f7ff fc17 	bl	46fc <unpend_thread_no_timeout>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4ece:	f104 0018 	add.w	r0, r4, #24
    4ed2:	f000 f9e3 	bl	529c <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4ed6:	4809      	ldr	r0, [pc, #36]	; (4efc <z_unpend_first_thread+0x70>)
    4ed8:	f7ff f8ac 	bl	4034 <z_spin_unlock_valid>
    4edc:	b940      	cbnz	r0, 4ef0 <z_unpend_first_thread+0x64>
    4ede:	4908      	ldr	r1, [pc, #32]	; (4f00 <z_unpend_first_thread+0x74>)
    4ee0:	4808      	ldr	r0, [pc, #32]	; (4f04 <z_unpend_first_thread+0x78>)
    4ee2:	22ac      	movs	r2, #172	; 0xac
    4ee4:	f003 f916 	bl	8114 <printk>
    4ee8:	21ac      	movs	r1, #172	; 0xac
    4eea:	4805      	ldr	r0, [pc, #20]	; (4f00 <z_unpend_first_thread+0x74>)
    4eec:	f003 f99d 	bl	822a <assert_post_action>
	__asm__ volatile(
    4ef0:	f385 8811 	msr	BASEPRI, r5
    4ef4:	f3bf 8f6f 	isb	sy
}
    4ef8:	4620      	mov	r0, r4
    4efa:	bd38      	pop	{r3, r4, r5, pc}
    4efc:	20000a28 	.word	0x20000a28
    4f00:	00008d4b 	.word	0x00008d4b
    4f04:	00008d71 	.word	0x00008d71

00004f08 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4f08:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    4f0a:	4b04      	ldr	r3, [pc, #16]	; (4f1c <z_sched_init+0x14>)
    4f0c:	4608      	mov	r0, r1
    4f0e:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    4f12:	e9c3 2208 	strd	r2, r2, [r3, #32]
    4f16:	f7ff baf5 	b.w	4504 <k_sched_time_slice_set>
    4f1a:	bf00      	nop
    4f1c:	200009f4 	.word	0x200009f4

00004f20 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4f20:	4b01      	ldr	r3, [pc, #4]	; (4f28 <z_impl_z_current_get+0x8>)
    4f22:	6898      	ldr	r0, [r3, #8]
    4f24:	4770      	bx	lr
    4f26:	bf00      	nop
    4f28:	200009f4 	.word	0x200009f4

00004f2c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    4f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f30:	4604      	mov	r4, r0
	__asm__ volatile(
    4f32:	f04f 0320 	mov.w	r3, #32
    4f36:	f3ef 8611 	mrs	r6, BASEPRI
    4f3a:	f383 8812 	msr	BASEPRI_MAX, r3
    4f3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4f42:	483e      	ldr	r0, [pc, #248]	; (503c <z_thread_abort+0x110>)
    4f44:	f7ff f868 	bl	4018 <z_spin_lock_valid>
    4f48:	b940      	cbnz	r0, 4f5c <z_thread_abort+0x30>
    4f4a:	493d      	ldr	r1, [pc, #244]	; (5040 <z_thread_abort+0x114>)
    4f4c:	483d      	ldr	r0, [pc, #244]	; (5044 <z_thread_abort+0x118>)
    4f4e:	2281      	movs	r2, #129	; 0x81
    4f50:	f003 f8e0 	bl	8114 <printk>
    4f54:	2181      	movs	r1, #129	; 0x81
    4f56:	483a      	ldr	r0, [pc, #232]	; (5040 <z_thread_abort+0x114>)
    4f58:	f003 f967 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    4f5c:	4837      	ldr	r0, [pc, #220]	; (503c <z_thread_abort+0x110>)
    4f5e:	f7ff f877 	bl	4050 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4f62:	7b63      	ldrb	r3, [r4, #13]
    4f64:	071a      	lsls	r2, r3, #28
    4f66:	d512      	bpl.n	4f8e <z_thread_abort+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4f68:	4834      	ldr	r0, [pc, #208]	; (503c <z_thread_abort+0x110>)
    4f6a:	f7ff f863 	bl	4034 <z_spin_unlock_valid>
    4f6e:	b940      	cbnz	r0, 4f82 <z_thread_abort+0x56>
    4f70:	4933      	ldr	r1, [pc, #204]	; (5040 <z_thread_abort+0x114>)
    4f72:	4834      	ldr	r0, [pc, #208]	; (5044 <z_thread_abort+0x118>)
    4f74:	22ac      	movs	r2, #172	; 0xac
    4f76:	f003 f8cd 	bl	8114 <printk>
    4f7a:	21ac      	movs	r1, #172	; 0xac
    4f7c:	4830      	ldr	r0, [pc, #192]	; (5040 <z_thread_abort+0x114>)
    4f7e:	f003 f954 	bl	822a <assert_post_action>
	__asm__ volatile(
    4f82:	f386 8811 	msr	BASEPRI, r6
    4f86:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4f8e:	f023 0220 	bic.w	r2, r3, #32
    4f92:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    4f96:	09d2      	lsrs	r2, r2, #7
    4f98:	d138      	bne.n	500c <z_thread_abort+0xe0>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4f9a:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    4f9c:	68a3      	ldr	r3, [r4, #8]
    4f9e:	b113      	cbz	r3, 4fa6 <z_thread_abort+0x7a>
			unpend_thread_no_timeout(thread);
    4fa0:	4620      	mov	r0, r4
    4fa2:	f7ff fbab 	bl	46fc <unpend_thread_no_timeout>
    4fa6:	f104 0018 	add.w	r0, r4, #24
    4faa:	f000 f977 	bl	529c <z_abort_timeout>
    4fae:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4fb2:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    4fb6:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4fb8:	42bd      	cmp	r5, r7
    4fba:	d000      	beq.n	4fbe <z_thread_abort+0x92>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    4fbc:	bb85      	cbnz	r5, 5020 <z_thread_abort+0xf4>
		update_cache(1);
    4fbe:	2001      	movs	r0, #1
    4fc0:	f7ff fbba 	bl	4738 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    4fc4:	4b20      	ldr	r3, [pc, #128]	; (5048 <z_thread_abort+0x11c>)
    4fc6:	689b      	ldr	r3, [r3, #8]
    4fc8:	42a3      	cmp	r3, r4
    4fca:	d1cd      	bne.n	4f68 <z_thread_abort+0x3c>
    4fcc:	f3ef 8305 	mrs	r3, IPSR
    4fd0:	2b00      	cmp	r3, #0
    4fd2:	d1c9      	bne.n	4f68 <z_thread_abort+0x3c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4fd4:	4819      	ldr	r0, [pc, #100]	; (503c <z_thread_abort+0x110>)
    4fd6:	f7ff f82d 	bl	4034 <z_spin_unlock_valid>
    4fda:	b940      	cbnz	r0, 4fee <z_thread_abort+0xc2>
    4fdc:	4918      	ldr	r1, [pc, #96]	; (5040 <z_thread_abort+0x114>)
    4fde:	4819      	ldr	r0, [pc, #100]	; (5044 <z_thread_abort+0x118>)
    4fe0:	22c3      	movs	r2, #195	; 0xc3
    4fe2:	f003 f897 	bl	8114 <printk>
    4fe6:	21c3      	movs	r1, #195	; 0xc3
    4fe8:	4815      	ldr	r0, [pc, #84]	; (5040 <z_thread_abort+0x114>)
    4fea:	f003 f91e 	bl	822a <assert_post_action>
    4fee:	4630      	mov	r0, r6
    4ff0:	f7fc fbd2 	bl	1798 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    4ff4:	f240 624b 	movw	r2, #1611	; 0x64b
    4ff8:	4914      	ldr	r1, [pc, #80]	; (504c <z_thread_abort+0x120>)
    4ffa:	4812      	ldr	r0, [pc, #72]	; (5044 <z_thread_abort+0x118>)
    4ffc:	f003 f88a 	bl	8114 <printk>
    5000:	f240 614b 	movw	r1, #1611	; 0x64b
    5004:	4811      	ldr	r0, [pc, #68]	; (504c <z_thread_abort+0x120>)
    5006:	f003 f910 	bl	822a <assert_post_action>
    500a:	e7ad      	b.n	4f68 <z_thread_abort+0x3c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    500c:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5010:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    5014:	4621      	mov	r1, r4
    5016:	480e      	ldr	r0, [pc, #56]	; (5050 <z_thread_abort+0x124>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5018:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    501a:	f7ff fb51 	bl	46c0 <z_priq_dumb_remove>
}
    501e:	e7bd      	b.n	4f9c <z_thread_abort+0x70>
		unpend_thread_no_timeout(thread);
    5020:	4628      	mov	r0, r5
    5022:	f7ff fb6b 	bl	46fc <unpend_thread_no_timeout>
    5026:	f105 0018 	add.w	r0, r5, #24
    502a:	f000 f937 	bl	529c <z_abort_timeout>
		ready_thread(thread);
    502e:	4628      	mov	r0, r5
    5030:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    5034:	f7ff fc6a 	bl	490c <ready_thread>
    5038:	e7bd      	b.n	4fb6 <z_thread_abort+0x8a>
    503a:	bf00      	nop
    503c:	20000a28 	.word	0x20000a28
    5040:	00008d4b 	.word	0x00008d4b
    5044:	00008d71 	.word	0x00008d71
    5048:	200009f4 	.word	0x200009f4
    504c:	00009bd0 	.word	0x00009bd0
    5050:	20000a14 	.word	0x20000a14

00005054 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    5054:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    5056:	4806      	ldr	r0, [pc, #24]	; (5070 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    5058:	4a06      	ldr	r2, [pc, #24]	; (5074 <z_data_copy+0x20>)
    505a:	4907      	ldr	r1, [pc, #28]	; (5078 <z_data_copy+0x24>)
    505c:	1a12      	subs	r2, r2, r0
    505e:	f003 f994 	bl	838a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    5062:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    5066:	4a05      	ldr	r2, [pc, #20]	; (507c <z_data_copy+0x28>)
    5068:	4905      	ldr	r1, [pc, #20]	; (5080 <z_data_copy+0x2c>)
    506a:	4806      	ldr	r0, [pc, #24]	; (5084 <z_data_copy+0x30>)
    506c:	f003 b98d 	b.w	838a <memcpy>
    5070:	20000000 	.word	0x20000000
    5074:	20000158 	.word	0x20000158
    5078:	00009c1c 	.word	0x00009c1c
    507c:	00000000 	.word	0x00000000
    5080:	00009c1c 	.word	0x00009c1c
    5084:	20000000 	.word	0x20000000

00005088 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5088:	4b03      	ldr	r3, [pc, #12]	; (5098 <elapsed+0x10>)
    508a:	681b      	ldr	r3, [r3, #0]
    508c:	b90b      	cbnz	r3, 5092 <elapsed+0xa>
    508e:	f7fd be13 	b.w	2cb8 <sys_clock_elapsed>
}
    5092:	2000      	movs	r0, #0
    5094:	4770      	bx	lr
    5096:	bf00      	nop
    5098:	20000a34 	.word	0x20000a34

0000509c <remove_timeout>:
{
    509c:	b530      	push	{r4, r5, lr}
    509e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    50a0:	b168      	cbz	r0, 50be <remove_timeout+0x22>
    50a2:	4a0a      	ldr	r2, [pc, #40]	; (50cc <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    50a4:	6852      	ldr	r2, [r2, #4]
    50a6:	4290      	cmp	r0, r2
    50a8:	d009      	beq.n	50be <remove_timeout+0x22>
	if (next(t) != NULL) {
    50aa:	b143      	cbz	r3, 50be <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    50ac:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    50b0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    50b4:	1912      	adds	r2, r2, r4
    50b6:	eb45 0101 	adc.w	r1, r5, r1
    50ba:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    50be:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    50c0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    50c2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    50c4:	2300      	movs	r3, #0
	node->prev = NULL;
    50c6:	e9c0 3300 	strd	r3, r3, [r0]
}
    50ca:	bd30      	pop	{r4, r5, pc}
    50cc:	20000084 	.word	0x20000084

000050d0 <next_timeout>:

static int32_t next_timeout(void)
{
    50d0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    50d2:	4b13      	ldr	r3, [pc, #76]	; (5120 <next_timeout+0x50>)
    50d4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    50d6:	429c      	cmp	r4, r3
    50d8:	bf08      	it	eq
    50da:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    50dc:	f7ff ffd4 	bl	5088 <elapsed>
    50e0:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    50e2:	b1bc      	cbz	r4, 5114 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    50e4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    50e8:	1b40      	subs	r0, r0, r5
    50ea:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    50ee:	2801      	cmp	r0, #1
    50f0:	f171 0300 	sbcs.w	r3, r1, #0
    50f4:	db11      	blt.n	511a <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    50f6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    50fa:	2300      	movs	r3, #0
    50fc:	4282      	cmp	r2, r0
    50fe:	eb73 0401 	sbcs.w	r4, r3, r1
    5102:	da00      	bge.n	5106 <next_timeout+0x36>
    5104:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    5106:	4b07      	ldr	r3, [pc, #28]	; (5124 <next_timeout+0x54>)
    5108:	691b      	ldr	r3, [r3, #16]
    510a:	b113      	cbz	r3, 5112 <next_timeout+0x42>
    510c:	4298      	cmp	r0, r3
    510e:	bfa8      	it	ge
    5110:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5112:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    5114:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5118:	e7f5      	b.n	5106 <next_timeout+0x36>
    511a:	2000      	movs	r0, #0
    511c:	e7f3      	b.n	5106 <next_timeout+0x36>
    511e:	bf00      	nop
    5120:	20000084 	.word	0x20000084
    5124:	200009f4 	.word	0x200009f4

00005128 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    5128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    512c:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    512e:	1c6b      	adds	r3, r5, #1
    5130:	bf08      	it	eq
    5132:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    5136:	4682      	mov	sl, r0
    5138:	468b      	mov	fp, r1
    513a:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    513c:	f000 809c 	beq.w	5278 <z_add_timeout+0x150>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    5140:	6803      	ldr	r3, [r0, #0]
    5142:	b143      	cbz	r3, 5156 <z_add_timeout+0x2e>
    5144:	494e      	ldr	r1, [pc, #312]	; (5280 <z_add_timeout+0x158>)
    5146:	484f      	ldr	r0, [pc, #316]	; (5284 <z_add_timeout+0x15c>)
    5148:	225d      	movs	r2, #93	; 0x5d
    514a:	f002 ffe3 	bl	8114 <printk>
    514e:	215d      	movs	r1, #93	; 0x5d
    5150:	484b      	ldr	r0, [pc, #300]	; (5280 <z_add_timeout+0x158>)
    5152:	f003 f86a 	bl	822a <assert_post_action>
	to->fn = fn;
    5156:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    515a:	f04f 0320 	mov.w	r3, #32
    515e:	f3ef 8b11 	mrs	fp, BASEPRI
    5162:	f383 8812 	msr	BASEPRI_MAX, r3
    5166:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    516a:	4847      	ldr	r0, [pc, #284]	; (5288 <z_add_timeout+0x160>)
    516c:	f7fe ff54 	bl	4018 <z_spin_lock_valid>
    5170:	b940      	cbnz	r0, 5184 <z_add_timeout+0x5c>
    5172:	4946      	ldr	r1, [pc, #280]	; (528c <z_add_timeout+0x164>)
    5174:	4843      	ldr	r0, [pc, #268]	; (5284 <z_add_timeout+0x15c>)
    5176:	2281      	movs	r2, #129	; 0x81
    5178:	f002 ffcc 	bl	8114 <printk>
    517c:	2181      	movs	r1, #129	; 0x81
    517e:	4843      	ldr	r0, [pc, #268]	; (528c <z_add_timeout+0x164>)
    5180:	f003 f853 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    5184:	4840      	ldr	r0, [pc, #256]	; (5288 <z_add_timeout+0x160>)
    5186:	f7fe ff63 	bl	4050 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    518a:	f06f 0301 	mvn.w	r3, #1
    518e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5192:	ebb3 0804 	subs.w	r8, r3, r4
    5196:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    519a:	f1b8 0f00 	cmp.w	r8, #0
    519e:	f179 0100 	sbcs.w	r1, r9, #0
    51a2:	db1c      	blt.n	51de <z_add_timeout+0xb6>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    51a4:	483a      	ldr	r0, [pc, #232]	; (5290 <z_add_timeout+0x168>)
    51a6:	e9d0 1000 	ldrd	r1, r0, [r0]
    51aa:	1a5b      	subs	r3, r3, r1
    51ac:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    51b0:	1b1e      	subs	r6, r3, r4
    51b2:	eb62 0705 	sbc.w	r7, r2, r5
    51b6:	2e01      	cmp	r6, #1
    51b8:	f177 0300 	sbcs.w	r3, r7, #0
    51bc:	bfbc      	itt	lt
    51be:	2601      	movlt	r6, #1
    51c0:	2700      	movlt	r7, #0
    51c2:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    51c6:	4a33      	ldr	r2, [pc, #204]	; (5294 <z_add_timeout+0x16c>)
    51c8:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    51cc:	4293      	cmp	r3, r2
    51ce:	d11d      	bne.n	520c <z_add_timeout+0xe4>
	node->prev = tail;
    51d0:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    51d4:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    51d8:	f8c2 a004 	str.w	sl, [r2, #4]
}
    51dc:	e02c      	b.n	5238 <z_add_timeout+0x110>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    51de:	f7ff ff53 	bl	5088 <elapsed>
    51e2:	1c63      	adds	r3, r4, #1
    51e4:	9300      	str	r3, [sp, #0]
    51e6:	f145 0300 	adc.w	r3, r5, #0
    51ea:	9301      	str	r3, [sp, #4]
    51ec:	e9dd 2300 	ldrd	r2, r3, [sp]
    51f0:	1812      	adds	r2, r2, r0
    51f2:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    51f6:	e9ca 2304 	strd	r2, r3, [sl, #16]
    51fa:	e7e4      	b.n	51c6 <z_add_timeout+0x9e>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    51fc:	1be0      	subs	r0, r4, r7
    51fe:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    5202:	42b3      	cmp	r3, r6
    5204:	e9ca 0104 	strd	r0, r1, [sl, #16]
    5208:	d0e2      	beq.n	51d0 <z_add_timeout+0xa8>
    520a:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    520c:	2b00      	cmp	r3, #0
    520e:	d0df      	beq.n	51d0 <z_add_timeout+0xa8>
			if (t->dticks > to->dticks) {
    5210:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    5214:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    5218:	42bc      	cmp	r4, r7
    521a:	eb75 0108 	sbcs.w	r1, r5, r8
    521e:	daed      	bge.n	51fc <z_add_timeout+0xd4>
				t->dticks -= to->dticks;
    5220:	1b38      	subs	r0, r7, r4
    5222:	eb68 0105 	sbc.w	r1, r8, r5
    5226:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    522a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    522c:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    5230:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    5234:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    5238:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    523a:	4293      	cmp	r3, r2
    523c:	d00b      	beq.n	5256 <z_add_timeout+0x12e>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    523e:	459a      	cmp	sl, r3
    5240:	d109      	bne.n	5256 <z_add_timeout+0x12e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    5242:	f7ff ff45 	bl	50d0 <next_timeout>

			if (next_time == 0 ||
    5246:	b118      	cbz	r0, 5250 <z_add_timeout+0x128>
			    _current_cpu->slice_ticks != next_time) {
    5248:	4b13      	ldr	r3, [pc, #76]	; (5298 <z_add_timeout+0x170>)
			if (next_time == 0 ||
    524a:	691b      	ldr	r3, [r3, #16]
    524c:	4283      	cmp	r3, r0
    524e:	d002      	beq.n	5256 <z_add_timeout+0x12e>
				sys_clock_set_timeout(next_time, false);
    5250:	2100      	movs	r1, #0
    5252:	f7fd fca9 	bl	2ba8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5256:	480c      	ldr	r0, [pc, #48]	; (5288 <z_add_timeout+0x160>)
    5258:	f7fe feec 	bl	4034 <z_spin_unlock_valid>
    525c:	b940      	cbnz	r0, 5270 <z_add_timeout+0x148>
    525e:	490b      	ldr	r1, [pc, #44]	; (528c <z_add_timeout+0x164>)
    5260:	4808      	ldr	r0, [pc, #32]	; (5284 <z_add_timeout+0x15c>)
    5262:	22ac      	movs	r2, #172	; 0xac
    5264:	f002 ff56 	bl	8114 <printk>
    5268:	21ac      	movs	r1, #172	; 0xac
    526a:	4808      	ldr	r0, [pc, #32]	; (528c <z_add_timeout+0x164>)
    526c:	f002 ffdd 	bl	822a <assert_post_action>
	__asm__ volatile(
    5270:	f38b 8811 	msr	BASEPRI, fp
    5274:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5278:	b003      	add	sp, #12
    527a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    527e:	bf00      	nop
    5280:	00009bf2 	.word	0x00009bf2
    5284:	00008d71 	.word	0x00008d71
    5288:	20000a38 	.word	0x20000a38
    528c:	00008d4b 	.word	0x00008d4b
    5290:	20000258 	.word	0x20000258
    5294:	20000084 	.word	0x20000084
    5298:	200009f4 	.word	0x200009f4

0000529c <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    529c:	b538      	push	{r3, r4, r5, lr}
    529e:	4604      	mov	r4, r0
	__asm__ volatile(
    52a0:	f04f 0320 	mov.w	r3, #32
    52a4:	f3ef 8511 	mrs	r5, BASEPRI
    52a8:	f383 8812 	msr	BASEPRI_MAX, r3
    52ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    52b0:	4815      	ldr	r0, [pc, #84]	; (5308 <z_abort_timeout+0x6c>)
    52b2:	f7fe feb1 	bl	4018 <z_spin_lock_valid>
    52b6:	b940      	cbnz	r0, 52ca <z_abort_timeout+0x2e>
    52b8:	4914      	ldr	r1, [pc, #80]	; (530c <z_abort_timeout+0x70>)
    52ba:	4815      	ldr	r0, [pc, #84]	; (5310 <z_abort_timeout+0x74>)
    52bc:	2281      	movs	r2, #129	; 0x81
    52be:	f002 ff29 	bl	8114 <printk>
    52c2:	2181      	movs	r1, #129	; 0x81
    52c4:	4811      	ldr	r0, [pc, #68]	; (530c <z_abort_timeout+0x70>)
    52c6:	f002 ffb0 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    52ca:	480f      	ldr	r0, [pc, #60]	; (5308 <z_abort_timeout+0x6c>)
    52cc:	f7fe fec0 	bl	4050 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    52d0:	6823      	ldr	r3, [r4, #0]
    52d2:	b1b3      	cbz	r3, 5302 <z_abort_timeout+0x66>
			remove_timeout(to);
    52d4:	4620      	mov	r0, r4
    52d6:	f7ff fee1 	bl	509c <remove_timeout>
			ret = 0;
    52da:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    52dc:	480a      	ldr	r0, [pc, #40]	; (5308 <z_abort_timeout+0x6c>)
    52de:	f7fe fea9 	bl	4034 <z_spin_unlock_valid>
    52e2:	b940      	cbnz	r0, 52f6 <z_abort_timeout+0x5a>
    52e4:	4909      	ldr	r1, [pc, #36]	; (530c <z_abort_timeout+0x70>)
    52e6:	480a      	ldr	r0, [pc, #40]	; (5310 <z_abort_timeout+0x74>)
    52e8:	22ac      	movs	r2, #172	; 0xac
    52ea:	f002 ff13 	bl	8114 <printk>
    52ee:	21ac      	movs	r1, #172	; 0xac
    52f0:	4806      	ldr	r0, [pc, #24]	; (530c <z_abort_timeout+0x70>)
    52f2:	f002 ff9a 	bl	822a <assert_post_action>
	__asm__ volatile(
    52f6:	f385 8811 	msr	BASEPRI, r5
    52fa:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    52fe:	4620      	mov	r0, r4
    5300:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    5302:	f06f 0415 	mvn.w	r4, #21
    5306:	e7e9      	b.n	52dc <z_abort_timeout+0x40>
    5308:	20000a38 	.word	0x20000a38
    530c:	00008d4b 	.word	0x00008d4b
    5310:	00008d71 	.word	0x00008d71

00005314 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    5314:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5316:	f04f 0320 	mov.w	r3, #32
    531a:	f3ef 8511 	mrs	r5, BASEPRI
    531e:	f383 8812 	msr	BASEPRI_MAX, r3
    5322:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5326:	4813      	ldr	r0, [pc, #76]	; (5374 <z_get_next_timeout_expiry+0x60>)
    5328:	f7fe fe76 	bl	4018 <z_spin_lock_valid>
    532c:	b940      	cbnz	r0, 5340 <z_get_next_timeout_expiry+0x2c>
    532e:	4912      	ldr	r1, [pc, #72]	; (5378 <z_get_next_timeout_expiry+0x64>)
    5330:	4812      	ldr	r0, [pc, #72]	; (537c <z_get_next_timeout_expiry+0x68>)
    5332:	2281      	movs	r2, #129	; 0x81
    5334:	f002 feee 	bl	8114 <printk>
    5338:	2181      	movs	r1, #129	; 0x81
    533a:	480f      	ldr	r0, [pc, #60]	; (5378 <z_get_next_timeout_expiry+0x64>)
    533c:	f002 ff75 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    5340:	480c      	ldr	r0, [pc, #48]	; (5374 <z_get_next_timeout_expiry+0x60>)
    5342:	f7fe fe85 	bl	4050 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    5346:	f7ff fec3 	bl	50d0 <next_timeout>
    534a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    534c:	4809      	ldr	r0, [pc, #36]	; (5374 <z_get_next_timeout_expiry+0x60>)
    534e:	f7fe fe71 	bl	4034 <z_spin_unlock_valid>
    5352:	b940      	cbnz	r0, 5366 <z_get_next_timeout_expiry+0x52>
    5354:	4908      	ldr	r1, [pc, #32]	; (5378 <z_get_next_timeout_expiry+0x64>)
    5356:	4809      	ldr	r0, [pc, #36]	; (537c <z_get_next_timeout_expiry+0x68>)
    5358:	22ac      	movs	r2, #172	; 0xac
    535a:	f002 fedb 	bl	8114 <printk>
    535e:	21ac      	movs	r1, #172	; 0xac
    5360:	4805      	ldr	r0, [pc, #20]	; (5378 <z_get_next_timeout_expiry+0x64>)
    5362:	f002 ff62 	bl	822a <assert_post_action>
	__asm__ volatile(
    5366:	f385 8811 	msr	BASEPRI, r5
    536a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    536e:	4620      	mov	r0, r4
    5370:	bd38      	pop	{r3, r4, r5, pc}
    5372:	bf00      	nop
    5374:	20000a38 	.word	0x20000a38
    5378:	00008d4b 	.word	0x00008d4b
    537c:	00008d71 	.word	0x00008d71

00005380 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    5380:	b570      	push	{r4, r5, r6, lr}
    5382:	4604      	mov	r4, r0
    5384:	460d      	mov	r5, r1
	__asm__ volatile(
    5386:	f04f 0320 	mov.w	r3, #32
    538a:	f3ef 8611 	mrs	r6, BASEPRI
    538e:	f383 8812 	msr	BASEPRI_MAX, r3
    5392:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5396:	4816      	ldr	r0, [pc, #88]	; (53f0 <z_set_timeout_expiry+0x70>)
    5398:	f7fe fe3e 	bl	4018 <z_spin_lock_valid>
    539c:	b940      	cbnz	r0, 53b0 <z_set_timeout_expiry+0x30>
    539e:	4915      	ldr	r1, [pc, #84]	; (53f4 <z_set_timeout_expiry+0x74>)
    53a0:	4815      	ldr	r0, [pc, #84]	; (53f8 <z_set_timeout_expiry+0x78>)
    53a2:	2281      	movs	r2, #129	; 0x81
    53a4:	f002 feb6 	bl	8114 <printk>
    53a8:	2181      	movs	r1, #129	; 0x81
    53aa:	4812      	ldr	r0, [pc, #72]	; (53f4 <z_set_timeout_expiry+0x74>)
    53ac:	f002 ff3d 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    53b0:	480f      	ldr	r0, [pc, #60]	; (53f0 <z_set_timeout_expiry+0x70>)
    53b2:	f7fe fe4d 	bl	4050 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    53b6:	f7ff fe8b 	bl	50d0 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    53ba:	2801      	cmp	r0, #1
    53bc:	dd05      	ble.n	53ca <z_set_timeout_expiry+0x4a>
    53be:	42a0      	cmp	r0, r4
    53c0:	db03      	blt.n	53ca <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    53c2:	4629      	mov	r1, r5
    53c4:	4620      	mov	r0, r4
    53c6:	f7fd fbef 	bl	2ba8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    53ca:	4809      	ldr	r0, [pc, #36]	; (53f0 <z_set_timeout_expiry+0x70>)
    53cc:	f7fe fe32 	bl	4034 <z_spin_unlock_valid>
    53d0:	b940      	cbnz	r0, 53e4 <z_set_timeout_expiry+0x64>
    53d2:	4908      	ldr	r1, [pc, #32]	; (53f4 <z_set_timeout_expiry+0x74>)
    53d4:	4808      	ldr	r0, [pc, #32]	; (53f8 <z_set_timeout_expiry+0x78>)
    53d6:	22ac      	movs	r2, #172	; 0xac
    53d8:	f002 fe9c 	bl	8114 <printk>
    53dc:	21ac      	movs	r1, #172	; 0xac
    53de:	4805      	ldr	r0, [pc, #20]	; (53f4 <z_set_timeout_expiry+0x74>)
    53e0:	f002 ff23 	bl	822a <assert_post_action>
	__asm__ volatile(
    53e4:	f386 8811 	msr	BASEPRI, r6
    53e8:	f3bf 8f6f 	isb	sy
		}
	}
}
    53ec:	bd70      	pop	{r4, r5, r6, pc}
    53ee:	bf00      	nop
    53f0:	20000a38 	.word	0x20000a38
    53f4:	00008d4b 	.word	0x00008d4b
    53f8:	00008d71 	.word	0x00008d71

000053fc <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    53fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5400:	b085      	sub	sp, #20
    5402:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    5404:	f7ff fa1c 	bl	4840 <z_time_slice>
	__asm__ volatile(
    5408:	f04f 0320 	mov.w	r3, #32
    540c:	f3ef 8911 	mrs	r9, BASEPRI
    5410:	f383 8812 	msr	BASEPRI_MAX, r3
    5414:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5418:	484c      	ldr	r0, [pc, #304]	; (554c <sys_clock_announce+0x150>)
    541a:	f7fe fdfd 	bl	4018 <z_spin_lock_valid>
    541e:	b940      	cbnz	r0, 5432 <sys_clock_announce+0x36>
    5420:	494b      	ldr	r1, [pc, #300]	; (5550 <sys_clock_announce+0x154>)
    5422:	484c      	ldr	r0, [pc, #304]	; (5554 <sys_clock_announce+0x158>)
    5424:	2281      	movs	r2, #129	; 0x81
    5426:	f002 fe75 	bl	8114 <printk>
    542a:	2181      	movs	r1, #129	; 0x81
    542c:	4848      	ldr	r0, [pc, #288]	; (5550 <sys_clock_announce+0x154>)
    542e:	f002 fefc 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    5432:	4f49      	ldr	r7, [pc, #292]	; (5558 <sys_clock_announce+0x15c>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    5434:	4e49      	ldr	r6, [pc, #292]	; (555c <sys_clock_announce+0x160>)
    5436:	46bb      	mov	fp, r7
    5438:	4844      	ldr	r0, [pc, #272]	; (554c <sys_clock_announce+0x150>)
	return list->head == list;
    543a:	f8df a124 	ldr.w	sl, [pc, #292]	; 5560 <sys_clock_announce+0x164>
    543e:	f7fe fe07 	bl	4050 <z_spin_lock_set_owner>
    5442:	6034      	str	r4, [r6, #0]
    5444:	f8d6 c000 	ldr.w	ip, [r6]
    5448:	f8da 8000 	ldr.w	r8, [sl]
    544c:	4662      	mov	r2, ip
    544e:	e9d7 3400 	ldrd	r3, r4, [r7]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5452:	45d0      	cmp	r8, sl
    5454:	e9cd 3402 	strd	r3, r4, [sp, #8]
    5458:	ea4f 73e2 	mov.w	r3, r2, asr #31
    545c:	e9cd 2300 	strd	r2, r3, [sp]
    5460:	d011      	beq.n	5486 <sys_clock_announce+0x8a>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    5462:	f1b8 0f00 	cmp.w	r8, #0
    5466:	d00e      	beq.n	5486 <sys_clock_announce+0x8a>
    5468:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
    546c:	e9dd 3400 	ldrd	r3, r4, [sp]
    5470:	428b      	cmp	r3, r1
    5472:	eb74 0302 	sbcs.w	r3, r4, r2
    5476:	da2a      	bge.n	54ce <sys_clock_announce+0xd2>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5478:	9b00      	ldr	r3, [sp, #0]
    547a:	1ac8      	subs	r0, r1, r3
    547c:	9b01      	ldr	r3, [sp, #4]
    547e:	eb62 0103 	sbc.w	r1, r2, r3
    5482:	e9c8 0104 	strd	r0, r1, [r8, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    5486:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    5488:	9b00      	ldr	r3, [sp, #0]
    548a:	9a02      	ldr	r2, [sp, #8]
    548c:	9903      	ldr	r1, [sp, #12]
    548e:	189a      	adds	r2, r3, r2
    5490:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    5492:	6034      	str	r4, [r6, #0]
	curr_tick += announce_remaining;
    5494:	eb41 0303 	adc.w	r3, r1, r3
    5498:	e9cb 2300 	strd	r2, r3, [fp]

	sys_clock_set_timeout(next_timeout(), false);
    549c:	f7ff fe18 	bl	50d0 <next_timeout>
    54a0:	4621      	mov	r1, r4
    54a2:	f7fd fb81 	bl	2ba8 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    54a6:	4829      	ldr	r0, [pc, #164]	; (554c <sys_clock_announce+0x150>)
    54a8:	f7fe fdc4 	bl	4034 <z_spin_unlock_valid>
    54ac:	b940      	cbnz	r0, 54c0 <sys_clock_announce+0xc4>
    54ae:	4928      	ldr	r1, [pc, #160]	; (5550 <sys_clock_announce+0x154>)
    54b0:	4828      	ldr	r0, [pc, #160]	; (5554 <sys_clock_announce+0x158>)
    54b2:	22ac      	movs	r2, #172	; 0xac
    54b4:	f002 fe2e 	bl	8114 <printk>
    54b8:	21ac      	movs	r1, #172	; 0xac
    54ba:	4825      	ldr	r0, [pc, #148]	; (5550 <sys_clock_announce+0x154>)
    54bc:	f002 feb5 	bl	822a <assert_post_action>
	__asm__ volatile(
    54c0:	f389 8811 	msr	BASEPRI, r9
    54c4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    54c8:	b005      	add	sp, #20
    54ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    54ce:	2200      	movs	r2, #0
		curr_tick += dt;
    54d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
		t->dticks = 0;
    54d4:	2300      	movs	r3, #0
		curr_tick += dt;
    54d6:	1864      	adds	r4, r4, r1
		announce_remaining -= dt;
    54d8:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    54dc:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
		announce_remaining -= dt;
    54e0:	6030      	str	r0, [r6, #0]
		t->dticks = 0;
    54e2:	e9c8 2304 	strd	r2, r3, [r8, #16]
		remove_timeout(t);
    54e6:	4640      	mov	r0, r8
		curr_tick += dt;
    54e8:	e9c7 4500 	strd	r4, r5, [r7]
		remove_timeout(t);
    54ec:	f7ff fdd6 	bl	509c <remove_timeout>
    54f0:	4816      	ldr	r0, [pc, #88]	; (554c <sys_clock_announce+0x150>)
    54f2:	f7fe fd9f 	bl	4034 <z_spin_unlock_valid>
    54f6:	b940      	cbnz	r0, 550a <sys_clock_announce+0x10e>
    54f8:	4915      	ldr	r1, [pc, #84]	; (5550 <sys_clock_announce+0x154>)
    54fa:	4816      	ldr	r0, [pc, #88]	; (5554 <sys_clock_announce+0x158>)
    54fc:	22ac      	movs	r2, #172	; 0xac
    54fe:	f002 fe09 	bl	8114 <printk>
    5502:	21ac      	movs	r1, #172	; 0xac
    5504:	4812      	ldr	r0, [pc, #72]	; (5550 <sys_clock_announce+0x154>)
    5506:	f002 fe90 	bl	822a <assert_post_action>
    550a:	f389 8811 	msr	BASEPRI, r9
    550e:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5512:	4640      	mov	r0, r8
    5514:	f8d8 3008 	ldr.w	r3, [r8, #8]
    5518:	4798      	blx	r3
	__asm__ volatile(
    551a:	f04f 0320 	mov.w	r3, #32
    551e:	f3ef 8911 	mrs	r9, BASEPRI
    5522:	f383 8812 	msr	BASEPRI_MAX, r3
    5526:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    552a:	4808      	ldr	r0, [pc, #32]	; (554c <sys_clock_announce+0x150>)
    552c:	f7fe fd74 	bl	4018 <z_spin_lock_valid>
    5530:	b940      	cbnz	r0, 5544 <sys_clock_announce+0x148>
    5532:	4907      	ldr	r1, [pc, #28]	; (5550 <sys_clock_announce+0x154>)
    5534:	4807      	ldr	r0, [pc, #28]	; (5554 <sys_clock_announce+0x158>)
    5536:	2281      	movs	r2, #129	; 0x81
    5538:	f002 fdec 	bl	8114 <printk>
    553c:	2181      	movs	r1, #129	; 0x81
    553e:	4804      	ldr	r0, [pc, #16]	; (5550 <sys_clock_announce+0x154>)
    5540:	f002 fe73 	bl	822a <assert_post_action>
	z_spin_lock_set_owner(l);
    5544:	4801      	ldr	r0, [pc, #4]	; (554c <sys_clock_announce+0x150>)
    5546:	f7fe fd83 	bl	4050 <z_spin_lock_set_owner>
	return k;
    554a:	e77b      	b.n	5444 <sys_clock_announce+0x48>
    554c:	20000a38 	.word	0x20000a38
    5550:	00008d4b 	.word	0x00008d4b
    5554:	00008d71 	.word	0x00008d71
    5558:	20000258 	.word	0x20000258
    555c:	20000a34 	.word	0x20000a34
    5560:	20000084 	.word	0x20000084

00005564 <nrf_cc3xx_platform_init>:
    5564:	b510      	push	{r4, lr}
    5566:	4c0c      	ldr	r4, [pc, #48]	; (5598 <nrf_cc3xx_platform_init+0x34>)
    5568:	6823      	ldr	r3, [r4, #0]
    556a:	b113      	cbz	r3, 5572 <nrf_cc3xx_platform_init+0xe>
    556c:	4b0b      	ldr	r3, [pc, #44]	; (559c <nrf_cc3xx_platform_init+0x38>)
    556e:	681b      	ldr	r3, [r3, #0]
    5570:	b92b      	cbnz	r3, 557e <nrf_cc3xx_platform_init+0x1a>
    5572:	f000 fe73 	bl	625c <CC_LibInit>
    5576:	b930      	cbnz	r0, 5586 <nrf_cc3xx_platform_init+0x22>
    5578:	2201      	movs	r2, #1
    557a:	4b08      	ldr	r3, [pc, #32]	; (559c <nrf_cc3xx_platform_init+0x38>)
    557c:	601a      	str	r2, [r3, #0]
    557e:	2301      	movs	r3, #1
    5580:	2000      	movs	r0, #0
    5582:	6023      	str	r3, [r4, #0]
    5584:	bd10      	pop	{r4, pc}
    5586:	3801      	subs	r0, #1
    5588:	2806      	cmp	r0, #6
    558a:	d901      	bls.n	5590 <nrf_cc3xx_platform_init+0x2c>
    558c:	4804      	ldr	r0, [pc, #16]	; (55a0 <nrf_cc3xx_platform_init+0x3c>)
    558e:	bd10      	pop	{r4, pc}
    5590:	4b04      	ldr	r3, [pc, #16]	; (55a4 <nrf_cc3xx_platform_init+0x40>)
    5592:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5596:	bd10      	pop	{r4, pc}
    5598:	20000a3c 	.word	0x20000a3c
    559c:	20000a40 	.word	0x20000a40
    55a0:	ffff8ffe 	.word	0xffff8ffe
    55a4:	00008b90 	.word	0x00008b90

000055a8 <nrf_cc3xx_platform_abort>:
    55a8:	f3bf 8f4f 	dsb	sy
    55ac:	4905      	ldr	r1, [pc, #20]	; (55c4 <nrf_cc3xx_platform_abort+0x1c>)
    55ae:	4b06      	ldr	r3, [pc, #24]	; (55c8 <nrf_cc3xx_platform_abort+0x20>)
    55b0:	68ca      	ldr	r2, [r1, #12]
    55b2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    55b6:	4313      	orrs	r3, r2
    55b8:	60cb      	str	r3, [r1, #12]
    55ba:	f3bf 8f4f 	dsb	sy
    55be:	bf00      	nop
    55c0:	e7fd      	b.n	55be <nrf_cc3xx_platform_abort+0x16>
    55c2:	bf00      	nop
    55c4:	e000ed00 	.word	0xe000ed00
    55c8:	05fa0004 	.word	0x05fa0004

000055cc <CC_PalAbort>:
    55cc:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    55d0:	2100      	movs	r1, #0
    55d2:	b430      	push	{r4, r5}
    55d4:	4a06      	ldr	r2, [pc, #24]	; (55f0 <CC_PalAbort+0x24>)
    55d6:	4d07      	ldr	r5, [pc, #28]	; (55f4 <CC_PalAbort+0x28>)
    55d8:	4c07      	ldr	r4, [pc, #28]	; (55f8 <CC_PalAbort+0x2c>)
    55da:	602b      	str	r3, [r5, #0]
    55dc:	6013      	str	r3, [r2, #0]
    55de:	6023      	str	r3, [r4, #0]
    55e0:	4a06      	ldr	r2, [pc, #24]	; (55fc <CC_PalAbort+0x30>)
    55e2:	4c07      	ldr	r4, [pc, #28]	; (5600 <CC_PalAbort+0x34>)
    55e4:	60eb      	str	r3, [r5, #12]
    55e6:	6863      	ldr	r3, [r4, #4]
    55e8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    55ec:	bc30      	pop	{r4, r5}
    55ee:	4718      	bx	r3
    55f0:	50841404 	.word	0x50841404
    55f4:	50841400 	.word	0x50841400
    55f8:	50841408 	.word	0x50841408
    55fc:	50840000 	.word	0x50840000
    5600:	2000008c 	.word	0x2000008c

00005604 <nrf_cc3xx_platform_set_abort>:
    5604:	4b02      	ldr	r3, [pc, #8]	; (5610 <nrf_cc3xx_platform_set_abort+0xc>)
    5606:	e9d0 1200 	ldrd	r1, r2, [r0]
    560a:	e9c3 1200 	strd	r1, r2, [r3]
    560e:	4770      	bx	lr
    5610:	2000008c 	.word	0x2000008c

00005614 <nrf_cc3xx_platform_ctr_drbg_init>:
    5614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5618:	4c15      	ldr	r4, [pc, #84]	; (5670 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
    561a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5678 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
    561e:	2800      	cmp	r0, #0
    5620:	bf18      	it	ne
    5622:	4604      	movne	r4, r0
    5624:	6820      	ldr	r0, [r4, #0]
    5626:	b083      	sub	sp, #12
    5628:	4540      	cmp	r0, r8
    562a:	d01d      	beq.n	5668 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
    562c:	4616      	mov	r6, r2
    562e:	460d      	mov	r5, r1
    5630:	4620      	mov	r0, r4
    5632:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    5636:	f104 0904 	add.w	r9, r4, #4
    563a:	f000 f8d3 	bl	57e4 <mbedtls_platform_zeroize>
    563e:	f504 778c 	add.w	r7, r4, #280	; 0x118
    5642:	4648      	mov	r0, r9
    5644:	f000 fcf2 	bl	602c <cc_mbedtls_entropy_init>
    5648:	4638      	mov	r0, r7
    564a:	f000 fb1d 	bl	5c88 <cc_mbedtls_ctr_drbg_init>
    564e:	464a      	mov	r2, r9
    5650:	4638      	mov	r0, r7
    5652:	462b      	mov	r3, r5
    5654:	4907      	ldr	r1, [pc, #28]	; (5674 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
    5656:	9600      	str	r6, [sp, #0]
    5658:	f000 fb2c 	bl	5cb4 <cc_mbedtls_ctr_drbg_seed>
    565c:	b908      	cbnz	r0, 5662 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
    565e:	f8c4 8000 	str.w	r8, [r4]
    5662:	b003      	add	sp, #12
    5664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5668:	2000      	movs	r0, #0
    566a:	b003      	add	sp, #12
    566c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5670:	20001418 	.word	0x20001418
    5674:	000060ad 	.word	0x000060ad
    5678:	5ac9bca5 	.word	0x5ac9bca5

0000567c <nrf_cc3xx_platform_ctr_drbg_get>:
    567c:	b5f0      	push	{r4, r5, r6, r7, lr}
    567e:	4c0d      	ldr	r4, [pc, #52]	; (56b4 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
    5680:	4e0d      	ldr	r6, [pc, #52]	; (56b8 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
    5682:	2800      	cmp	r0, #0
    5684:	bf08      	it	eq
    5686:	4620      	moveq	r0, r4
    5688:	6807      	ldr	r7, [r0, #0]
    568a:	b083      	sub	sp, #12
    568c:	42b7      	cmp	r7, r6
    568e:	d10e      	bne.n	56ae <nrf_cc3xx_platform_ctr_drbg_get+0x32>
    5690:	2600      	movs	r6, #0
    5692:	461d      	mov	r5, r3
    5694:	f500 708c 	add.w	r0, r0, #280	; 0x118
    5698:	4633      	mov	r3, r6
    569a:	9600      	str	r6, [sp, #0]
    569c:	4614      	mov	r4, r2
    569e:	f000 fb57 	bl	5d50 <cc_mbedtls_ctr_drbg_random_with_add>
    56a2:	2800      	cmp	r0, #0
    56a4:	bf18      	it	ne
    56a6:	4634      	movne	r4, r6
    56a8:	602c      	str	r4, [r5, #0]
    56aa:	b003      	add	sp, #12
    56ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56ae:	4803      	ldr	r0, [pc, #12]	; (56bc <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
    56b0:	e7fb      	b.n	56aa <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
    56b2:	bf00      	nop
    56b4:	20001418 	.word	0x20001418
    56b8:	5ac9bca5 	.word	0x5ac9bca5
    56bc:	ffff8fe8 	.word	0xffff8fe8

000056c0 <mutex_free>:
    56c0:	b510      	push	{r4, lr}
    56c2:	4604      	mov	r4, r0
    56c4:	b130      	cbz	r0, 56d4 <mutex_free+0x14>
    56c6:	6863      	ldr	r3, [r4, #4]
    56c8:	06db      	lsls	r3, r3, #27
    56ca:	d502      	bpl.n	56d2 <mutex_free+0x12>
    56cc:	2300      	movs	r3, #0
    56ce:	6023      	str	r3, [r4, #0]
    56d0:	6063      	str	r3, [r4, #4]
    56d2:	bd10      	pop	{r4, pc}
    56d4:	4b02      	ldr	r3, [pc, #8]	; (56e0 <mutex_free+0x20>)
    56d6:	4803      	ldr	r0, [pc, #12]	; (56e4 <mutex_free+0x24>)
    56d8:	685b      	ldr	r3, [r3, #4]
    56da:	4798      	blx	r3
    56dc:	e7f3      	b.n	56c6 <mutex_free+0x6>
    56de:	bf00      	nop
    56e0:	2000008c 	.word	0x2000008c
    56e4:	00008bac 	.word	0x00008bac

000056e8 <mutex_unlock>:
    56e8:	b168      	cbz	r0, 5706 <mutex_unlock+0x1e>
    56ea:	6843      	ldr	r3, [r0, #4]
    56ec:	b13b      	cbz	r3, 56fe <mutex_unlock+0x16>
    56ee:	06db      	lsls	r3, r3, #27
    56f0:	d507      	bpl.n	5702 <mutex_unlock+0x1a>
    56f2:	f3bf 8f5f 	dmb	sy
    56f6:	2300      	movs	r3, #0
    56f8:	6003      	str	r3, [r0, #0]
    56fa:	4618      	mov	r0, r3
    56fc:	4770      	bx	lr
    56fe:	4803      	ldr	r0, [pc, #12]	; (570c <mutex_unlock+0x24>)
    5700:	4770      	bx	lr
    5702:	4803      	ldr	r0, [pc, #12]	; (5710 <mutex_unlock+0x28>)
    5704:	4770      	bx	lr
    5706:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    570a:	4770      	bx	lr
    570c:	ffff8fea 	.word	0xffff8fea
    5710:	ffff8fe9 	.word	0xffff8fe9

00005714 <mutex_init>:
    5714:	b510      	push	{r4, lr}
    5716:	4604      	mov	r4, r0
    5718:	b120      	cbz	r0, 5724 <mutex_init+0x10>
    571a:	2200      	movs	r2, #0
    571c:	2311      	movs	r3, #17
    571e:	6022      	str	r2, [r4, #0]
    5720:	6063      	str	r3, [r4, #4]
    5722:	bd10      	pop	{r4, pc}
    5724:	4801      	ldr	r0, [pc, #4]	; (572c <mutex_init+0x18>)
    5726:	f7ff ff51 	bl	55cc <CC_PalAbort>
    572a:	e7f6      	b.n	571a <mutex_init+0x6>
    572c:	00008bd4 	.word	0x00008bd4

00005730 <mutex_lock>:
    5730:	b1a0      	cbz	r0, 575c <mutex_lock+0x2c>
    5732:	6843      	ldr	r3, [r0, #4]
    5734:	b183      	cbz	r3, 5758 <mutex_lock+0x28>
    5736:	06db      	lsls	r3, r3, #27
    5738:	d50c      	bpl.n	5754 <mutex_lock+0x24>
    573a:	2201      	movs	r2, #1
    573c:	e8d0 3fef 	ldaex	r3, [r0]
    5740:	e8c0 2fe1 	stlex	r1, r2, [r0]
    5744:	2900      	cmp	r1, #0
    5746:	d1f9      	bne.n	573c <mutex_lock+0xc>
    5748:	2b01      	cmp	r3, #1
    574a:	d0f7      	beq.n	573c <mutex_lock+0xc>
    574c:	f3bf 8f5f 	dmb	sy
    5750:	2000      	movs	r0, #0
    5752:	4770      	bx	lr
    5754:	4803      	ldr	r0, [pc, #12]	; (5764 <mutex_lock+0x34>)
    5756:	4770      	bx	lr
    5758:	4803      	ldr	r0, [pc, #12]	; (5768 <mutex_lock+0x38>)
    575a:	4770      	bx	lr
    575c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5760:	4770      	bx	lr
    5762:	bf00      	nop
    5764:	ffff8fe9 	.word	0xffff8fe9
    5768:	ffff8fea 	.word	0xffff8fea

0000576c <nrf_cc3xx_platform_set_mutexes>:
    576c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5770:	4c14      	ldr	r4, [pc, #80]	; (57c4 <nrf_cc3xx_platform_set_mutexes+0x58>)
    5772:	6802      	ldr	r2, [r0, #0]
    5774:	68c3      	ldr	r3, [r0, #12]
    5776:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
    577a:	e9c4 6302 	strd	r6, r3, [r4, #8]
    577e:	e9c4 2500 	strd	r2, r5, [r4]
    5782:	4b11      	ldr	r3, [pc, #68]	; (57c8 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    5784:	680e      	ldr	r6, [r1, #0]
    5786:	6848      	ldr	r0, [r1, #4]
    5788:	4d10      	ldr	r5, [pc, #64]	; (57cc <nrf_cc3xx_platform_set_mutexes+0x60>)
    578a:	e9c3 6000 	strd	r6, r0, [r3]
    578e:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
    5792:	6908      	ldr	r0, [r1, #16]
    5794:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    5798:	e9c3 7602 	strd	r7, r6, [r3, #8]
    579c:	6118      	str	r0, [r3, #16]
    579e:	06cb      	lsls	r3, r1, #27
    57a0:	d50d      	bpl.n	57be <nrf_cc3xx_platform_set_mutexes+0x52>
    57a2:	2300      	movs	r3, #0
    57a4:	f505 7088 	add.w	r0, r5, #272	; 0x110
    57a8:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    57ac:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    57b0:	4790      	blx	r2
    57b2:	6823      	ldr	r3, [r4, #0]
    57b4:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    57b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    57bc:	4718      	bx	r3
    57be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    57c2:	bf00      	nop
    57c4:	2000009c 	.word	0x2000009c
    57c8:	200000ac 	.word	0x200000ac
    57cc:	20001418 	.word	0x20001418

000057d0 <mbedtls_zeroize_internal>:
    57d0:	b138      	cbz	r0, 57e2 <mbedtls_zeroize_internal+0x12>
    57d2:	b131      	cbz	r1, 57e2 <mbedtls_zeroize_internal+0x12>
    57d4:	2200      	movs	r2, #0
    57d6:	4401      	add	r1, r0
    57d8:	4603      	mov	r3, r0
    57da:	3001      	adds	r0, #1
    57dc:	4281      	cmp	r1, r0
    57de:	701a      	strb	r2, [r3, #0]
    57e0:	d1fa      	bne.n	57d8 <mbedtls_zeroize_internal+0x8>
    57e2:	4770      	bx	lr

000057e4 <mbedtls_platform_zeroize>:
    57e4:	b138      	cbz	r0, 57f6 <mbedtls_platform_zeroize+0x12>
    57e6:	b131      	cbz	r1, 57f6 <mbedtls_platform_zeroize+0x12>
    57e8:	2200      	movs	r2, #0
    57ea:	4401      	add	r1, r0
    57ec:	4603      	mov	r3, r0
    57ee:	3001      	adds	r0, #1
    57f0:	4288      	cmp	r0, r1
    57f2:	701a      	strb	r2, [r3, #0]
    57f4:	d1fa      	bne.n	57ec <mbedtls_platform_zeroize+0x8>
    57f6:	4770      	bx	lr

000057f8 <block_cipher_df>:
    57f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57fc:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
    5800:	b0af      	sub	sp, #188	; 0xbc
    5802:	f200 812c 	bhi.w	5a5e <block_cipher_df+0x266>
    5806:	f8df 926c 	ldr.w	r9, [pc, #620]	; 5a74 <block_cipher_df+0x27c>
    580a:	4690      	mov	r8, r2
    580c:	460c      	mov	r4, r1
    580e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
    5812:	2100      	movs	r1, #0
    5814:	4682      	mov	sl, r0
    5816:	4648      	mov	r0, r9
    5818:	f002 fdc2 	bl	83a0 <memset>
    581c:	a811      	add	r0, sp, #68	; 0x44
    581e:	f001 f9e9 	bl	6bf4 <cc_mbedtls_aes_init>
    5822:	2200      	movs	r2, #0
    5824:	2320      	movs	r3, #32
    5826:	4621      	mov	r1, r4
    5828:	f8a9 2010 	strh.w	r2, [r9, #16]
    582c:	fa98 f498 	rev16.w	r4, r8
    5830:	4642      	mov	r2, r8
    5832:	f109 0018 	add.w	r0, r9, #24
    5836:	f8a9 4012 	strh.w	r4, [r9, #18]
    583a:	f889 3017 	strb.w	r3, [r9, #23]
    583e:	f002 fda4 	bl	838a <memcpy>
    5842:	2280      	movs	r2, #128	; 0x80
    5844:	4b87      	ldr	r3, [pc, #540]	; (5a64 <block_cipher_df+0x26c>)
    5846:	4988      	ldr	r1, [pc, #544]	; (5a68 <block_cipher_df+0x270>)
    5848:	4c88      	ldr	r4, [pc, #544]	; (5a6c <block_cipher_df+0x274>)
    584a:	eb09 0008 	add.w	r0, r9, r8
    584e:	e9cd 4102 	strd	r4, r1, [sp, #8]
    5852:	7602      	strb	r2, [r0, #24]
    5854:	9301      	str	r3, [sp, #4]
    5856:	a811      	add	r0, sp, #68	; 0x44
    5858:	f103 330c 	add.w	r3, r3, #202116108	; 0xc0c0c0c
    585c:	a901      	add	r1, sp, #4
    585e:	9304      	str	r3, [sp, #16]
    5860:	f001 f9de 	bl	6c20 <cc_mbedtls_aes_setkey_enc>
    5864:	4607      	mov	r7, r0
    5866:	2800      	cmp	r0, #0
    5868:	f040 80d8 	bne.w	5a1c <block_cipher_df+0x224>
    586c:	f108 0819 	add.w	r8, r8, #25
    5870:	ae05      	add	r6, sp, #20
    5872:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    5876:	2210      	movs	r2, #16
    5878:	2100      	movs	r1, #0
    587a:	4630      	mov	r0, r6
    587c:	f002 fd90 	bl	83a0 <memset>
    5880:	4645      	mov	r5, r8
    5882:	4c7b      	ldr	r4, [pc, #492]	; (5a70 <block_cipher_df+0x278>)
    5884:	f89d 2014 	ldrb.w	r2, [sp, #20]
    5888:	f814 3c10 	ldrb.w	r3, [r4, #-16]
    588c:	f89d c015 	ldrb.w	ip, [sp, #21]
    5890:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
    5894:	f89d 0016 	ldrb.w	r0, [sp, #22]
    5898:	4053      	eors	r3, r2
    589a:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
    589e:	ea8c 0c01 	eor.w	ip, ip, r1
    58a2:	4050      	eors	r0, r2
    58a4:	f89d 1017 	ldrb.w	r1, [sp, #23]
    58a8:	f814 2c0d 	ldrb.w	r2, [r4, #-13]
    58ac:	f89d e018 	ldrb.w	lr, [sp, #24]
    58b0:	4051      	eors	r1, r2
    58b2:	f814 2c0c 	ldrb.w	r2, [r4, #-12]
    58b6:	f88d 3014 	strb.w	r3, [sp, #20]
    58ba:	ea8e 0202 	eor.w	r2, lr, r2
    58be:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    58c2:	f89d e019 	ldrb.w	lr, [sp, #25]
    58c6:	f88d c015 	strb.w	ip, [sp, #21]
    58ca:	ea8e 0303 	eor.w	r3, lr, r3
    58ce:	f814 cc0a 	ldrb.w	ip, [r4, #-10]
    58d2:	f89d e01a 	ldrb.w	lr, [sp, #26]
    58d6:	f88d 0016 	strb.w	r0, [sp, #22]
    58da:	ea8e 0c0c 	eor.w	ip, lr, ip
    58de:	f814 0c09 	ldrb.w	r0, [r4, #-9]
    58e2:	f89d e01b 	ldrb.w	lr, [sp, #27]
    58e6:	f88d 1017 	strb.w	r1, [sp, #23]
    58ea:	ea8e 0000 	eor.w	r0, lr, r0
    58ee:	f814 1c08 	ldrb.w	r1, [r4, #-8]
    58f2:	f89d e01c 	ldrb.w	lr, [sp, #28]
    58f6:	f88d 2018 	strb.w	r2, [sp, #24]
    58fa:	ea8e 0101 	eor.w	r1, lr, r1
    58fe:	f814 2c07 	ldrb.w	r2, [r4, #-7]
    5902:	f89d e01d 	ldrb.w	lr, [sp, #29]
    5906:	f88d 3019 	strb.w	r3, [sp, #25]
    590a:	ea8e 0202 	eor.w	r2, lr, r2
    590e:	f89d 301e 	ldrb.w	r3, [sp, #30]
    5912:	f814 ec06 	ldrb.w	lr, [r4, #-6]
    5916:	f88d c01a 	strb.w	ip, [sp, #26]
    591a:	ea83 030e 	eor.w	r3, r3, lr
    591e:	f88d 001b 	strb.w	r0, [sp, #27]
    5922:	f88d 101c 	strb.w	r1, [sp, #28]
    5926:	f88d 201d 	strb.w	r2, [sp, #29]
    592a:	f88d 301e 	strb.w	r3, [sp, #30]
    592e:	f89d 101f 	ldrb.w	r1, [sp, #31]
    5932:	f814 3c05 	ldrb.w	r3, [r4, #-5]
    5936:	f89d c020 	ldrb.w	ip, [sp, #32]
    593a:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
    593e:	404b      	eors	r3, r1
    5940:	f814 2c04 	ldrb.w	r2, [r4, #-4]
    5944:	f814 1c03 	ldrb.w	r1, [r4, #-3]
    5948:	ea8c 0202 	eor.w	r2, ip, r2
    594c:	4041      	eors	r1, r0
    594e:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
    5952:	f814 0c02 	ldrb.w	r0, [r4, #-2]
    5956:	f89d e023 	ldrb.w	lr, [sp, #35]	; 0x23
    595a:	ea8c 0000 	eor.w	r0, ip, r0
    595e:	f814 cc01 	ldrb.w	ip, [r4, #-1]
    5962:	f88d 301f 	strb.w	r3, [sp, #31]
    5966:	ea8e 0c0c 	eor.w	ip, lr, ip
    596a:	f88d 2020 	strb.w	r2, [sp, #32]
    596e:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    5972:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    5976:	4633      	mov	r3, r6
    5978:	4632      	mov	r2, r6
    597a:	2101      	movs	r1, #1
    597c:	a811      	add	r0, sp, #68	; 0x44
    597e:	f88d c023 	strb.w	ip, [sp, #35]	; 0x23
    5982:	f001 f967 	bl	6c54 <cc_mbedtls_aes_crypt_ecb>
    5986:	2d10      	cmp	r5, #16
    5988:	bf94      	ite	ls
    598a:	1b6d      	subls	r5, r5, r5
    598c:	3d10      	subhi	r5, #16
    598e:	2800      	cmp	r0, #0
    5990:	d163      	bne.n	5a5a <block_cipher_df+0x262>
    5992:	3410      	adds	r4, #16
    5994:	2d00      	cmp	r5, #0
    5996:	f47f af75 	bne.w	5884 <block_cipher_df+0x8c>
    599a:	eb0b 0007 	add.w	r0, fp, r7
    599e:	2210      	movs	r2, #16
    59a0:	4631      	mov	r1, r6
    59a2:	f002 fcf2 	bl	838a <memcpy>
    59a6:	f899 3003 	ldrb.w	r3, [r9, #3]
    59aa:	3710      	adds	r7, #16
    59ac:	3301      	adds	r3, #1
    59ae:	2f20      	cmp	r7, #32
    59b0:	f889 3003 	strb.w	r3, [r9, #3]
    59b4:	f47f af5f 	bne.w	5876 <block_cipher_df+0x7e>
    59b8:	2280      	movs	r2, #128	; 0x80
    59ba:	4659      	mov	r1, fp
    59bc:	a811      	add	r0, sp, #68	; 0x44
    59be:	f001 f92f 	bl	6c20 <cc_mbedtls_aes_setkey_enc>
    59c2:	4607      	mov	r7, r0
    59c4:	bb68      	cbnz	r0, 5a22 <block_cipher_df+0x22a>
    59c6:	4654      	mov	r4, sl
    59c8:	f10a 0520 	add.w	r5, sl, #32
    59cc:	ab0d      	add	r3, sp, #52	; 0x34
    59ce:	461a      	mov	r2, r3
    59d0:	2101      	movs	r1, #1
    59d2:	a811      	add	r0, sp, #68	; 0x44
    59d4:	f001 f93e 	bl	6c54 <cc_mbedtls_aes_crypt_ecb>
    59d8:	4607      	mov	r7, r0
    59da:	bb10      	cbnz	r0, 5a22 <block_cipher_df+0x22a>
    59dc:	2210      	movs	r2, #16
    59de:	4620      	mov	r0, r4
    59e0:	a90d      	add	r1, sp, #52	; 0x34
    59e2:	4414      	add	r4, r2
    59e4:	f002 fcd1 	bl	838a <memcpy>
    59e8:	42ac      	cmp	r4, r5
    59ea:	d1ef      	bne.n	59cc <block_cipher_df+0x1d4>
    59ec:	a811      	add	r0, sp, #68	; 0x44
    59ee:	f001 f911 	bl	6c14 <cc_mbedtls_aes_free>
    59f2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    59f6:	481f      	ldr	r0, [pc, #124]	; (5a74 <block_cipher_df+0x27c>)
    59f8:	f7ff fef4 	bl	57e4 <mbedtls_platform_zeroize>
    59fc:	4658      	mov	r0, fp
    59fe:	2120      	movs	r1, #32
    5a00:	f7ff fef0 	bl	57e4 <mbedtls_platform_zeroize>
    5a04:	a801      	add	r0, sp, #4
    5a06:	2110      	movs	r1, #16
    5a08:	f7ff feec 	bl	57e4 <mbedtls_platform_zeroize>
    5a0c:	4630      	mov	r0, r6
    5a0e:	2110      	movs	r1, #16
    5a10:	f7ff fee8 	bl	57e4 <mbedtls_platform_zeroize>
    5a14:	4638      	mov	r0, r7
    5a16:	b02f      	add	sp, #188	; 0xbc
    5a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a1c:	ae05      	add	r6, sp, #20
    5a1e:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
    5a22:	a811      	add	r0, sp, #68	; 0x44
    5a24:	f001 f8f6 	bl	6c14 <cc_mbedtls_aes_free>
    5a28:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    5a2c:	4811      	ldr	r0, [pc, #68]	; (5a74 <block_cipher_df+0x27c>)
    5a2e:	f7ff fed9 	bl	57e4 <mbedtls_platform_zeroize>
    5a32:	4658      	mov	r0, fp
    5a34:	2120      	movs	r1, #32
    5a36:	f7ff fed5 	bl	57e4 <mbedtls_platform_zeroize>
    5a3a:	2110      	movs	r1, #16
    5a3c:	a801      	add	r0, sp, #4
    5a3e:	f7ff fed1 	bl	57e4 <mbedtls_platform_zeroize>
    5a42:	4630      	mov	r0, r6
    5a44:	2110      	movs	r1, #16
    5a46:	f7ff fecd 	bl	57e4 <mbedtls_platform_zeroize>
    5a4a:	4650      	mov	r0, sl
    5a4c:	2120      	movs	r1, #32
    5a4e:	f7ff fec9 	bl	57e4 <mbedtls_platform_zeroize>
    5a52:	4638      	mov	r0, r7
    5a54:	b02f      	add	sp, #188	; 0xbc
    5a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a5a:	4607      	mov	r7, r0
    5a5c:	e7e1      	b.n	5a22 <block_cipher_df+0x22a>
    5a5e:	f06f 0737 	mvn.w	r7, #55	; 0x37
    5a62:	e7f6      	b.n	5a52 <block_cipher_df+0x25a>
    5a64:	03020100 	.word	0x03020100
    5a68:	0b0a0908 	.word	0x0b0a0908
    5a6c:	07060504 	.word	0x07060504
    5a70:	20000a64 	.word	0x20000a64
    5a74:	20000a54 	.word	0x20000a54

00005a78 <ctr_drbg_update_internal>:
    5a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a7c:	2220      	movs	r2, #32
    5a7e:	4604      	mov	r4, r0
    5a80:	b088      	sub	sp, #32
    5a82:	460d      	mov	r5, r1
    5a84:	4668      	mov	r0, sp
    5a86:	2100      	movs	r1, #0
    5a88:	18a6      	adds	r6, r4, r2
    5a8a:	466f      	mov	r7, sp
    5a8c:	f002 fc88 	bl	83a0 <memset>
    5a90:	7be2      	ldrb	r2, [r4, #15]
    5a92:	3201      	adds	r2, #1
    5a94:	b2d2      	uxtb	r2, r2
    5a96:	73e2      	strb	r2, [r4, #15]
    5a98:	2a00      	cmp	r2, #0
    5a9a:	d14d      	bne.n	5b38 <ctr_drbg_update_internal+0xc0>
    5a9c:	7ba2      	ldrb	r2, [r4, #14]
    5a9e:	3201      	adds	r2, #1
    5aa0:	b2d2      	uxtb	r2, r2
    5aa2:	73a2      	strb	r2, [r4, #14]
    5aa4:	2a00      	cmp	r2, #0
    5aa6:	d147      	bne.n	5b38 <ctr_drbg_update_internal+0xc0>
    5aa8:	7b63      	ldrb	r3, [r4, #13]
    5aaa:	3301      	adds	r3, #1
    5aac:	b2db      	uxtb	r3, r3
    5aae:	7363      	strb	r3, [r4, #13]
    5ab0:	2b00      	cmp	r3, #0
    5ab2:	d141      	bne.n	5b38 <ctr_drbg_update_internal+0xc0>
    5ab4:	7b23      	ldrb	r3, [r4, #12]
    5ab6:	3301      	adds	r3, #1
    5ab8:	b2db      	uxtb	r3, r3
    5aba:	7323      	strb	r3, [r4, #12]
    5abc:	2b00      	cmp	r3, #0
    5abe:	d13b      	bne.n	5b38 <ctr_drbg_update_internal+0xc0>
    5ac0:	7ae3      	ldrb	r3, [r4, #11]
    5ac2:	3301      	adds	r3, #1
    5ac4:	b2db      	uxtb	r3, r3
    5ac6:	72e3      	strb	r3, [r4, #11]
    5ac8:	2b00      	cmp	r3, #0
    5aca:	d135      	bne.n	5b38 <ctr_drbg_update_internal+0xc0>
    5acc:	7aa3      	ldrb	r3, [r4, #10]
    5ace:	3301      	adds	r3, #1
    5ad0:	b2db      	uxtb	r3, r3
    5ad2:	72a3      	strb	r3, [r4, #10]
    5ad4:	2b00      	cmp	r3, #0
    5ad6:	d12f      	bne.n	5b38 <ctr_drbg_update_internal+0xc0>
    5ad8:	7a63      	ldrb	r3, [r4, #9]
    5ada:	3301      	adds	r3, #1
    5adc:	b2db      	uxtb	r3, r3
    5ade:	7263      	strb	r3, [r4, #9]
    5ae0:	bb53      	cbnz	r3, 5b38 <ctr_drbg_update_internal+0xc0>
    5ae2:	7a23      	ldrb	r3, [r4, #8]
    5ae4:	3301      	adds	r3, #1
    5ae6:	b2db      	uxtb	r3, r3
    5ae8:	7223      	strb	r3, [r4, #8]
    5aea:	bb2b      	cbnz	r3, 5b38 <ctr_drbg_update_internal+0xc0>
    5aec:	79e3      	ldrb	r3, [r4, #7]
    5aee:	3301      	adds	r3, #1
    5af0:	b2db      	uxtb	r3, r3
    5af2:	71e3      	strb	r3, [r4, #7]
    5af4:	bb03      	cbnz	r3, 5b38 <ctr_drbg_update_internal+0xc0>
    5af6:	79a3      	ldrb	r3, [r4, #6]
    5af8:	3301      	adds	r3, #1
    5afa:	b2db      	uxtb	r3, r3
    5afc:	71a3      	strb	r3, [r4, #6]
    5afe:	b9db      	cbnz	r3, 5b38 <ctr_drbg_update_internal+0xc0>
    5b00:	7963      	ldrb	r3, [r4, #5]
    5b02:	3301      	adds	r3, #1
    5b04:	b2db      	uxtb	r3, r3
    5b06:	7163      	strb	r3, [r4, #5]
    5b08:	b9b3      	cbnz	r3, 5b38 <ctr_drbg_update_internal+0xc0>
    5b0a:	7923      	ldrb	r3, [r4, #4]
    5b0c:	3301      	adds	r3, #1
    5b0e:	b2db      	uxtb	r3, r3
    5b10:	7123      	strb	r3, [r4, #4]
    5b12:	b98b      	cbnz	r3, 5b38 <ctr_drbg_update_internal+0xc0>
    5b14:	78e3      	ldrb	r3, [r4, #3]
    5b16:	3301      	adds	r3, #1
    5b18:	b2db      	uxtb	r3, r3
    5b1a:	70e3      	strb	r3, [r4, #3]
    5b1c:	b963      	cbnz	r3, 5b38 <ctr_drbg_update_internal+0xc0>
    5b1e:	78a3      	ldrb	r3, [r4, #2]
    5b20:	3301      	adds	r3, #1
    5b22:	b2db      	uxtb	r3, r3
    5b24:	70a3      	strb	r3, [r4, #2]
    5b26:	b93b      	cbnz	r3, 5b38 <ctr_drbg_update_internal+0xc0>
    5b28:	7863      	ldrb	r3, [r4, #1]
    5b2a:	3301      	adds	r3, #1
    5b2c:	b2db      	uxtb	r3, r3
    5b2e:	7063      	strb	r3, [r4, #1]
    5b30:	b913      	cbnz	r3, 5b38 <ctr_drbg_update_internal+0xc0>
    5b32:	7823      	ldrb	r3, [r4, #0]
    5b34:	3301      	adds	r3, #1
    5b36:	7023      	strb	r3, [r4, #0]
    5b38:	463b      	mov	r3, r7
    5b3a:	4622      	mov	r2, r4
    5b3c:	2101      	movs	r1, #1
    5b3e:	4630      	mov	r0, r6
    5b40:	f001 f888 	bl	6c54 <cc_mbedtls_aes_crypt_ecb>
    5b44:	4680      	mov	r8, r0
    5b46:	2800      	cmp	r0, #0
    5b48:	d12a      	bne.n	5ba0 <ctr_drbg_update_internal+0x128>
    5b4a:	3710      	adds	r7, #16
    5b4c:	ab08      	add	r3, sp, #32
    5b4e:	429f      	cmp	r7, r3
    5b50:	d19e      	bne.n	5a90 <ctr_drbg_update_internal+0x18>
    5b52:	9900      	ldr	r1, [sp, #0]
    5b54:	682b      	ldr	r3, [r5, #0]
    5b56:	686a      	ldr	r2, [r5, #4]
    5b58:	404b      	eors	r3, r1
    5b5a:	9901      	ldr	r1, [sp, #4]
    5b5c:	4630      	mov	r0, r6
    5b5e:	404a      	eors	r2, r1
    5b60:	68ae      	ldr	r6, [r5, #8]
    5b62:	9902      	ldr	r1, [sp, #8]
    5b64:	9300      	str	r3, [sp, #0]
    5b66:	4071      	eors	r1, r6
    5b68:	68eb      	ldr	r3, [r5, #12]
    5b6a:	9e03      	ldr	r6, [sp, #12]
    5b6c:	9201      	str	r2, [sp, #4]
    5b6e:	4073      	eors	r3, r6
    5b70:	692a      	ldr	r2, [r5, #16]
    5b72:	9e04      	ldr	r6, [sp, #16]
    5b74:	9102      	str	r1, [sp, #8]
    5b76:	4056      	eors	r6, r2
    5b78:	9905      	ldr	r1, [sp, #20]
    5b7a:	696a      	ldr	r2, [r5, #20]
    5b7c:	9303      	str	r3, [sp, #12]
    5b7e:	4051      	eors	r1, r2
    5b80:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
    5b84:	9d06      	ldr	r5, [sp, #24]
    5b86:	9105      	str	r1, [sp, #20]
    5b88:	4055      	eors	r5, r2
    5b8a:	9a07      	ldr	r2, [sp, #28]
    5b8c:	4669      	mov	r1, sp
    5b8e:	4053      	eors	r3, r2
    5b90:	2280      	movs	r2, #128	; 0x80
    5b92:	e9cd 5306 	strd	r5, r3, [sp, #24]
    5b96:	9604      	str	r6, [sp, #16]
    5b98:	f001 f842 	bl	6c20 <cc_mbedtls_aes_setkey_enc>
    5b9c:	4680      	mov	r8, r0
    5b9e:	b138      	cbz	r0, 5bb0 <ctr_drbg_update_internal+0x138>
    5ba0:	4668      	mov	r0, sp
    5ba2:	2120      	movs	r1, #32
    5ba4:	f7ff fe1e 	bl	57e4 <mbedtls_platform_zeroize>
    5ba8:	4640      	mov	r0, r8
    5baa:	b008      	add	sp, #32
    5bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5bb0:	2210      	movs	r2, #16
    5bb2:	4620      	mov	r0, r4
    5bb4:	eb0d 0102 	add.w	r1, sp, r2
    5bb8:	f002 fbe7 	bl	838a <memcpy>
    5bbc:	e7f0      	b.n	5ba0 <ctr_drbg_update_internal+0x128>
    5bbe:	bf00      	nop

00005bc0 <mbedtls_ctr_drbg_reseed_internal>:
    5bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5bc4:	4604      	mov	r4, r0
    5bc6:	6980      	ldr	r0, [r0, #24]
    5bc8:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
    5bcc:	d854      	bhi.n	5c78 <mbedtls_ctr_drbg_reseed_internal+0xb8>
    5bce:	461d      	mov	r5, r3
    5bd0:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
    5bd4:	42ab      	cmp	r3, r5
    5bd6:	d34f      	bcc.n	5c78 <mbedtls_ctr_drbg_reseed_internal+0xb8>
    5bd8:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
    5bdc:	1a18      	subs	r0, r3, r0
    5bde:	4290      	cmp	r0, r2
    5be0:	4616      	mov	r6, r2
    5be2:	d349      	bcc.n	5c78 <mbedtls_ctr_drbg_reseed_internal+0xb8>
    5be4:	f8df 909c 	ldr.w	r9, [pc, #156]	; 5c84 <mbedtls_ctr_drbg_reseed_internal+0xc4>
    5be8:	f44f 72c0 	mov.w	r2, #384	; 0x180
    5bec:	460f      	mov	r7, r1
    5bee:	4648      	mov	r0, r9
    5bf0:	2100      	movs	r1, #0
    5bf2:	f002 fbd5 	bl	83a0 <memset>
    5bf6:	4649      	mov	r1, r9
    5bf8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    5bfc:	69a2      	ldr	r2, [r4, #24]
    5bfe:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    5c02:	4798      	blx	r3
    5c04:	2800      	cmp	r0, #0
    5c06:	d13a      	bne.n	5c7e <mbedtls_ctr_drbg_reseed_internal+0xbe>
    5c08:	f8d4 8018 	ldr.w	r8, [r4, #24]
    5c0c:	b14d      	cbz	r5, 5c22 <mbedtls_ctr_drbg_reseed_internal+0x62>
    5c0e:	462a      	mov	r2, r5
    5c10:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    5c14:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    5c18:	eb09 0108 	add.w	r1, r9, r8
    5c1c:	4798      	blx	r3
    5c1e:	bb70      	cbnz	r0, 5c7e <mbedtls_ctr_drbg_reseed_internal+0xbe>
    5c20:	44a8      	add	r8, r5
    5c22:	b107      	cbz	r7, 5c26 <mbedtls_ctr_drbg_reseed_internal+0x66>
    5c24:	b9c6      	cbnz	r6, 5c58 <mbedtls_ctr_drbg_reseed_internal+0x98>
    5c26:	4917      	ldr	r1, [pc, #92]	; (5c84 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
    5c28:	4642      	mov	r2, r8
    5c2a:	4608      	mov	r0, r1
    5c2c:	f7ff fde4 	bl	57f8 <block_cipher_df>
    5c30:	4605      	mov	r5, r0
    5c32:	b138      	cbz	r0, 5c44 <mbedtls_ctr_drbg_reseed_internal+0x84>
    5c34:	f44f 71c0 	mov.w	r1, #384	; 0x180
    5c38:	4812      	ldr	r0, [pc, #72]	; (5c84 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
    5c3a:	f7ff fdd3 	bl	57e4 <mbedtls_platform_zeroize>
    5c3e:	4628      	mov	r0, r5
    5c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5c44:	4620      	mov	r0, r4
    5c46:	490f      	ldr	r1, [pc, #60]	; (5c84 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
    5c48:	f7ff ff16 	bl	5a78 <ctr_drbg_update_internal>
    5c4c:	4605      	mov	r5, r0
    5c4e:	2800      	cmp	r0, #0
    5c50:	d1f0      	bne.n	5c34 <mbedtls_ctr_drbg_reseed_internal+0x74>
    5c52:	2301      	movs	r3, #1
    5c54:	6123      	str	r3, [r4, #16]
    5c56:	e7ed      	b.n	5c34 <mbedtls_ctr_drbg_reseed_internal+0x74>
    5c58:	4639      	mov	r1, r7
    5c5a:	4632      	mov	r2, r6
    5c5c:	eb09 0008 	add.w	r0, r9, r8
    5c60:	f002 fb93 	bl	838a <memcpy>
    5c64:	4907      	ldr	r1, [pc, #28]	; (5c84 <mbedtls_ctr_drbg_reseed_internal+0xc4>)
    5c66:	44b0      	add	r8, r6
    5c68:	4642      	mov	r2, r8
    5c6a:	4608      	mov	r0, r1
    5c6c:	f7ff fdc4 	bl	57f8 <block_cipher_df>
    5c70:	4605      	mov	r5, r0
    5c72:	2800      	cmp	r0, #0
    5c74:	d1de      	bne.n	5c34 <mbedtls_ctr_drbg_reseed_internal+0x74>
    5c76:	e7e5      	b.n	5c44 <mbedtls_ctr_drbg_reseed_internal+0x84>
    5c78:	f06f 0537 	mvn.w	r5, #55	; 0x37
    5c7c:	e7df      	b.n	5c3e <mbedtls_ctr_drbg_reseed_internal+0x7e>
    5c7e:	f06f 0533 	mvn.w	r5, #51	; 0x33
    5c82:	e7dc      	b.n	5c3e <mbedtls_ctr_drbg_reseed_internal+0x7e>
    5c84:	20000bf4 	.word	0x20000bf4

00005c88 <cc_mbedtls_ctr_drbg_init>:
    5c88:	b510      	push	{r4, lr}
    5c8a:	22a4      	movs	r2, #164	; 0xa4
    5c8c:	2100      	movs	r1, #0
    5c8e:	4604      	mov	r4, r0
    5c90:	f002 fb86 	bl	83a0 <memset>
    5c94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5c98:	f64f 72f0 	movw	r2, #65520	; 0xfff0
    5c9c:	4b04      	ldr	r3, [pc, #16]	; (5cb0 <cc_mbedtls_ctr_drbg_init+0x28>)
    5c9e:	6121      	str	r1, [r4, #16]
    5ca0:	61e2      	str	r2, [r4, #28]
    5ca2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    5ca6:	681b      	ldr	r3, [r3, #0]
    5ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5cac:	4718      	bx	r3
    5cae:	bf00      	nop
    5cb0:	200000f0 	.word	0x200000f0

00005cb4 <cc_mbedtls_ctr_drbg_seed>:
    5cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5cb8:	4605      	mov	r5, r0
    5cba:	b085      	sub	sp, #20
    5cbc:	460f      	mov	r7, r1
    5cbe:	4616      	mov	r6, r2
    5cc0:	4668      	mov	r0, sp
    5cc2:	2210      	movs	r2, #16
    5cc4:	2100      	movs	r1, #0
    5cc6:	4699      	mov	r9, r3
    5cc8:	f002 fb6a 	bl	83a0 <memset>
    5ccc:	4b1e      	ldr	r3, [pc, #120]	; (5d48 <cc_mbedtls_ctr_drbg_seed+0x94>)
    5cce:	f105 089c 	add.w	r8, r5, #156	; 0x9c
    5cd2:	4640      	mov	r0, r8
    5cd4:	681b      	ldr	r3, [r3, #0]
    5cd6:	4798      	blx	r3
    5cd8:	b120      	cbz	r0, 5ce4 <cc_mbedtls_ctr_drbg_seed+0x30>
    5cda:	4604      	mov	r4, r0
    5cdc:	4620      	mov	r0, r4
    5cde:	b005      	add	sp, #20
    5ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5ce4:	f105 0420 	add.w	r4, r5, #32
    5ce8:	4620      	mov	r0, r4
    5cea:	f000 ff83 	bl	6bf4 <cc_mbedtls_aes_init>
    5cee:	69aa      	ldr	r2, [r5, #24]
    5cf0:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
    5cf4:	b9ea      	cbnz	r2, 5d32 <cc_mbedtls_ctr_drbg_seed+0x7e>
    5cf6:	2220      	movs	r2, #32
    5cf8:	692e      	ldr	r6, [r5, #16]
    5cfa:	61aa      	str	r2, [r5, #24]
    5cfc:	2e00      	cmp	r6, #0
    5cfe:	db20      	blt.n	5d42 <cc_mbedtls_ctr_drbg_seed+0x8e>
    5d00:	4620      	mov	r0, r4
    5d02:	4669      	mov	r1, sp
    5d04:	2280      	movs	r2, #128	; 0x80
    5d06:	f000 ff8b 	bl	6c20 <cc_mbedtls_aes_setkey_enc>
    5d0a:	4604      	mov	r4, r0
    5d0c:	b930      	cbnz	r0, 5d1c <cc_mbedtls_ctr_drbg_seed+0x68>
    5d0e:	4633      	mov	r3, r6
    5d10:	4649      	mov	r1, r9
    5d12:	4628      	mov	r0, r5
    5d14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5d16:	f7ff ff53 	bl	5bc0 <mbedtls_ctr_drbg_reseed_internal>
    5d1a:	4604      	mov	r4, r0
    5d1c:	4b0b      	ldr	r3, [pc, #44]	; (5d4c <cc_mbedtls_ctr_drbg_seed+0x98>)
    5d1e:	4640      	mov	r0, r8
    5d20:	681b      	ldr	r3, [r3, #0]
    5d22:	4798      	blx	r3
    5d24:	2800      	cmp	r0, #0
    5d26:	bf18      	it	ne
    5d28:	4604      	movne	r4, r0
    5d2a:	4620      	mov	r0, r4
    5d2c:	b005      	add	sp, #20
    5d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5d32:	692e      	ldr	r6, [r5, #16]
    5d34:	2e00      	cmp	r6, #0
    5d36:	dae3      	bge.n	5d00 <cc_mbedtls_ctr_drbg_seed+0x4c>
    5d38:	2a17      	cmp	r2, #23
    5d3a:	d802      	bhi.n	5d42 <cc_mbedtls_ctr_drbg_seed+0x8e>
    5d3c:	1c53      	adds	r3, r2, #1
    5d3e:	085e      	lsrs	r6, r3, #1
    5d40:	e7de      	b.n	5d00 <cc_mbedtls_ctr_drbg_seed+0x4c>
    5d42:	2600      	movs	r6, #0
    5d44:	e7dc      	b.n	5d00 <cc_mbedtls_ctr_drbg_seed+0x4c>
    5d46:	bf00      	nop
    5d48:	200000f4 	.word	0x200000f4
    5d4c:	200000f8 	.word	0x200000f8

00005d50 <cc_mbedtls_ctr_drbg_random_with_add>:
    5d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d54:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    5d58:	b08d      	sub	sp, #52	; 0x34
    5d5a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
    5d5e:	f200 80e4 	bhi.w	5f2a <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
    5d62:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
    5d66:	f200 80dd 	bhi.w	5f24 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
    5d6a:	4604      	mov	r4, r0
    5d6c:	4615      	mov	r5, r2
    5d6e:	460e      	mov	r6, r1
    5d70:	2220      	movs	r2, #32
    5d72:	2100      	movs	r1, #0
    5d74:	a804      	add	r0, sp, #16
    5d76:	461f      	mov	r7, r3
    5d78:	f002 fb12 	bl	83a0 <memset>
    5d7c:	4b6c      	ldr	r3, [pc, #432]	; (5f30 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
    5d7e:	f104 099c 	add.w	r9, r4, #156	; 0x9c
    5d82:	4648      	mov	r0, r9
    5d84:	681b      	ldr	r3, [r3, #0]
    5d86:	4798      	blx	r3
    5d88:	4683      	mov	fp, r0
    5d8a:	2800      	cmp	r0, #0
    5d8c:	f040 8093 	bne.w	5eb6 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    5d90:	6922      	ldr	r2, [r4, #16]
    5d92:	69e3      	ldr	r3, [r4, #28]
    5d94:	429a      	cmp	r2, r3
    5d96:	f300 8092 	bgt.w	5ebe <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
    5d9a:	6963      	ldr	r3, [r4, #20]
    5d9c:	2b00      	cmp	r3, #0
    5d9e:	f040 808e 	bne.w	5ebe <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
    5da2:	f1b8 0f00 	cmp.w	r8, #0
    5da6:	f040 80a9 	bne.w	5efc <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
    5daa:	f8df a188 	ldr.w	sl, [pc, #392]	; 5f34 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
    5dae:	466f      	mov	r7, sp
    5db0:	2d00      	cmp	r5, #0
    5db2:	f000 8098 	beq.w	5ee6 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
    5db6:	466f      	mov	r7, sp
    5db8:	f104 0820 	add.w	r8, r4, #32
    5dbc:	e00e      	b.n	5ddc <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
    5dbe:	2d10      	cmp	r5, #16
    5dc0:	46ab      	mov	fp, r5
    5dc2:	bf28      	it	cs
    5dc4:	f04f 0b10 	movcs.w	fp, #16
    5dc8:	4630      	mov	r0, r6
    5dca:	4639      	mov	r1, r7
    5dcc:	465a      	mov	r2, fp
    5dce:	f002 fadc 	bl	838a <memcpy>
    5dd2:	ebb5 050b 	subs.w	r5, r5, fp
    5dd6:	445e      	add	r6, fp
    5dd8:	f000 8085 	beq.w	5ee6 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
    5ddc:	7be3      	ldrb	r3, [r4, #15]
    5dde:	3301      	adds	r3, #1
    5de0:	b2db      	uxtb	r3, r3
    5de2:	73e3      	strb	r3, [r4, #15]
    5de4:	2b00      	cmp	r3, #0
    5de6:	d14d      	bne.n	5e84 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5de8:	7ba3      	ldrb	r3, [r4, #14]
    5dea:	3301      	adds	r3, #1
    5dec:	b2db      	uxtb	r3, r3
    5dee:	73a3      	strb	r3, [r4, #14]
    5df0:	2b00      	cmp	r3, #0
    5df2:	d147      	bne.n	5e84 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5df4:	7b63      	ldrb	r3, [r4, #13]
    5df6:	3301      	adds	r3, #1
    5df8:	b2db      	uxtb	r3, r3
    5dfa:	7363      	strb	r3, [r4, #13]
    5dfc:	2b00      	cmp	r3, #0
    5dfe:	d141      	bne.n	5e84 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5e00:	7b23      	ldrb	r3, [r4, #12]
    5e02:	3301      	adds	r3, #1
    5e04:	b2db      	uxtb	r3, r3
    5e06:	7323      	strb	r3, [r4, #12]
    5e08:	2b00      	cmp	r3, #0
    5e0a:	d13b      	bne.n	5e84 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5e0c:	7ae3      	ldrb	r3, [r4, #11]
    5e0e:	3301      	adds	r3, #1
    5e10:	b2db      	uxtb	r3, r3
    5e12:	72e3      	strb	r3, [r4, #11]
    5e14:	2b00      	cmp	r3, #0
    5e16:	d135      	bne.n	5e84 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5e18:	7aa3      	ldrb	r3, [r4, #10]
    5e1a:	3301      	adds	r3, #1
    5e1c:	b2db      	uxtb	r3, r3
    5e1e:	72a3      	strb	r3, [r4, #10]
    5e20:	2b00      	cmp	r3, #0
    5e22:	d12f      	bne.n	5e84 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5e24:	7a63      	ldrb	r3, [r4, #9]
    5e26:	3301      	adds	r3, #1
    5e28:	b2db      	uxtb	r3, r3
    5e2a:	7263      	strb	r3, [r4, #9]
    5e2c:	bb53      	cbnz	r3, 5e84 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5e2e:	7a23      	ldrb	r3, [r4, #8]
    5e30:	3301      	adds	r3, #1
    5e32:	b2db      	uxtb	r3, r3
    5e34:	7223      	strb	r3, [r4, #8]
    5e36:	bb2b      	cbnz	r3, 5e84 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5e38:	79e3      	ldrb	r3, [r4, #7]
    5e3a:	3301      	adds	r3, #1
    5e3c:	b2db      	uxtb	r3, r3
    5e3e:	71e3      	strb	r3, [r4, #7]
    5e40:	bb03      	cbnz	r3, 5e84 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5e42:	79a3      	ldrb	r3, [r4, #6]
    5e44:	3301      	adds	r3, #1
    5e46:	b2db      	uxtb	r3, r3
    5e48:	71a3      	strb	r3, [r4, #6]
    5e4a:	b9db      	cbnz	r3, 5e84 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5e4c:	7963      	ldrb	r3, [r4, #5]
    5e4e:	3301      	adds	r3, #1
    5e50:	b2db      	uxtb	r3, r3
    5e52:	7163      	strb	r3, [r4, #5]
    5e54:	b9b3      	cbnz	r3, 5e84 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5e56:	7923      	ldrb	r3, [r4, #4]
    5e58:	3301      	adds	r3, #1
    5e5a:	b2db      	uxtb	r3, r3
    5e5c:	7123      	strb	r3, [r4, #4]
    5e5e:	b98b      	cbnz	r3, 5e84 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5e60:	78e3      	ldrb	r3, [r4, #3]
    5e62:	3301      	adds	r3, #1
    5e64:	b2db      	uxtb	r3, r3
    5e66:	70e3      	strb	r3, [r4, #3]
    5e68:	b963      	cbnz	r3, 5e84 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5e6a:	78a3      	ldrb	r3, [r4, #2]
    5e6c:	3301      	adds	r3, #1
    5e6e:	b2db      	uxtb	r3, r3
    5e70:	70a3      	strb	r3, [r4, #2]
    5e72:	b93b      	cbnz	r3, 5e84 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5e74:	7863      	ldrb	r3, [r4, #1]
    5e76:	3301      	adds	r3, #1
    5e78:	b2db      	uxtb	r3, r3
    5e7a:	7063      	strb	r3, [r4, #1]
    5e7c:	b913      	cbnz	r3, 5e84 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
    5e7e:	7823      	ldrb	r3, [r4, #0]
    5e80:	3301      	adds	r3, #1
    5e82:	7023      	strb	r3, [r4, #0]
    5e84:	463b      	mov	r3, r7
    5e86:	4622      	mov	r2, r4
    5e88:	2101      	movs	r1, #1
    5e8a:	4640      	mov	r0, r8
    5e8c:	f000 fee2 	bl	6c54 <cc_mbedtls_aes_crypt_ecb>
    5e90:	4683      	mov	fp, r0
    5e92:	2800      	cmp	r0, #0
    5e94:	d093      	beq.n	5dbe <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
    5e96:	f8da 3000 	ldr.w	r3, [sl]
    5e9a:	4648      	mov	r0, r9
    5e9c:	4798      	blx	r3
    5e9e:	4603      	mov	r3, r0
    5ea0:	2120      	movs	r1, #32
    5ea2:	a804      	add	r0, sp, #16
    5ea4:	2b00      	cmp	r3, #0
    5ea6:	bf18      	it	ne
    5ea8:	469b      	movne	fp, r3
    5eaa:	f7ff fc9b 	bl	57e4 <mbedtls_platform_zeroize>
    5eae:	4638      	mov	r0, r7
    5eb0:	2110      	movs	r1, #16
    5eb2:	f7ff fc97 	bl	57e4 <mbedtls_platform_zeroize>
    5eb6:	4658      	mov	r0, fp
    5eb8:	b00d      	add	sp, #52	; 0x34
    5eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ebe:	4642      	mov	r2, r8
    5ec0:	4639      	mov	r1, r7
    5ec2:	2300      	movs	r3, #0
    5ec4:	4620      	mov	r0, r4
    5ec6:	f7ff fe7b 	bl	5bc0 <mbedtls_ctr_drbg_reseed_internal>
    5eca:	f8df a068 	ldr.w	sl, [pc, #104]	; 5f34 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
    5ece:	2800      	cmp	r0, #0
    5ed0:	f43f af6d 	beq.w	5dae <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
    5ed4:	4648      	mov	r0, r9
    5ed6:	f8da 3000 	ldr.w	r3, [sl]
    5eda:	4798      	blx	r3
    5edc:	4683      	mov	fp, r0
    5ede:	2800      	cmp	r0, #0
    5ee0:	f43f af65 	beq.w	5dae <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
    5ee4:	e7e7      	b.n	5eb6 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    5ee6:	4620      	mov	r0, r4
    5ee8:	a904      	add	r1, sp, #16
    5eea:	f7ff fdc5 	bl	5a78 <ctr_drbg_update_internal>
    5eee:	4683      	mov	fp, r0
    5ef0:	2800      	cmp	r0, #0
    5ef2:	d1d0      	bne.n	5e96 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
    5ef4:	6923      	ldr	r3, [r4, #16]
    5ef6:	3301      	adds	r3, #1
    5ef8:	6123      	str	r3, [r4, #16]
    5efa:	e7cc      	b.n	5e96 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
    5efc:	4642      	mov	r2, r8
    5efe:	4639      	mov	r1, r7
    5f00:	a804      	add	r0, sp, #16
    5f02:	f7ff fc79 	bl	57f8 <block_cipher_df>
    5f06:	4683      	mov	fp, r0
    5f08:	b118      	cbz	r0, 5f12 <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
    5f0a:	466f      	mov	r7, sp
    5f0c:	f8df a024 	ldr.w	sl, [pc, #36]	; 5f34 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
    5f10:	e7c1      	b.n	5e96 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
    5f12:	4620      	mov	r0, r4
    5f14:	a904      	add	r1, sp, #16
    5f16:	f7ff fdaf 	bl	5a78 <ctr_drbg_update_internal>
    5f1a:	4683      	mov	fp, r0
    5f1c:	2800      	cmp	r0, #0
    5f1e:	f43f af44 	beq.w	5daa <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
    5f22:	e7f2      	b.n	5f0a <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
    5f24:	f06f 0b37 	mvn.w	fp, #55	; 0x37
    5f28:	e7c5      	b.n	5eb6 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    5f2a:	f06f 0b35 	mvn.w	fp, #53	; 0x35
    5f2e:	e7c2      	b.n	5eb6 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
    5f30:	200000f4 	.word	0x200000f4
    5f34:	200000f8 	.word	0x200000f8

00005f38 <entropy_update>:
    5f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5f3c:	2b20      	cmp	r3, #32
    5f3e:	461d      	mov	r5, r3
    5f40:	4606      	mov	r6, r0
    5f42:	4689      	mov	r9, r1
    5f44:	4690      	mov	r8, r2
    5f46:	b08b      	sub	sp, #44	; 0x2c
    5f48:	d826      	bhi.n	5f98 <entropy_update+0x60>
    5f4a:	b2db      	uxtb	r3, r3
    5f4c:	af02      	add	r7, sp, #8
    5f4e:	6831      	ldr	r1, [r6, #0]
    5f50:	f88d 9004 	strb.w	r9, [sp, #4]
    5f54:	f88d 3005 	strb.w	r3, [sp, #5]
    5f58:	f106 0904 	add.w	r9, r6, #4
    5f5c:	b921      	cbnz	r1, 5f68 <entropy_update+0x30>
    5f5e:	4648      	mov	r0, r9
    5f60:	f000 febc 	bl	6cdc <cc_mbedtls_sha256_starts>
    5f64:	4604      	mov	r4, r0
    5f66:	b940      	cbnz	r0, 5f7a <entropy_update+0x42>
    5f68:	2301      	movs	r3, #1
    5f6a:	2202      	movs	r2, #2
    5f6c:	4648      	mov	r0, r9
    5f6e:	6033      	str	r3, [r6, #0]
    5f70:	a901      	add	r1, sp, #4
    5f72:	f000 fec7 	bl	6d04 <cc_mbedtls_sha256_update>
    5f76:	4604      	mov	r4, r0
    5f78:	b138      	cbz	r0, 5f8a <entropy_update+0x52>
    5f7a:	4638      	mov	r0, r7
    5f7c:	2120      	movs	r1, #32
    5f7e:	f7ff fc31 	bl	57e4 <mbedtls_platform_zeroize>
    5f82:	4620      	mov	r0, r4
    5f84:	b00b      	add	sp, #44	; 0x2c
    5f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5f8a:	462a      	mov	r2, r5
    5f8c:	4641      	mov	r1, r8
    5f8e:	4648      	mov	r0, r9
    5f90:	f000 feb8 	bl	6d04 <cc_mbedtls_sha256_update>
    5f94:	4604      	mov	r4, r0
    5f96:	e7f0      	b.n	5f7a <entropy_update+0x42>
    5f98:	af02      	add	r7, sp, #8
    5f9a:	4619      	mov	r1, r3
    5f9c:	4610      	mov	r0, r2
    5f9e:	2300      	movs	r3, #0
    5fa0:	463a      	mov	r2, r7
    5fa2:	f000 ffb1 	bl	6f08 <cc_mbedtls_sha256>
    5fa6:	4604      	mov	r4, r0
    5fa8:	2800      	cmp	r0, #0
    5faa:	d1e6      	bne.n	5f7a <entropy_update+0x42>
    5fac:	2320      	movs	r3, #32
    5fae:	46b8      	mov	r8, r7
    5fb0:	461d      	mov	r5, r3
    5fb2:	e7cc      	b.n	5f4e <entropy_update+0x16>

00005fb4 <entropy_gather_internal.part.0>:
    5fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fb6:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
    5fba:	b0a7      	sub	sp, #156	; 0x9c
    5fbc:	2b00      	cmp	r3, #0
    5fbe:	bfd8      	it	le
    5fc0:	ae02      	addle	r6, sp, #8
    5fc2:	dd2c      	ble.n	601e <entropy_gather_internal.part.0+0x6a>
    5fc4:	4605      	mov	r5, r0
    5fc6:	2300      	movs	r3, #0
    5fc8:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    5fcc:	ae02      	add	r6, sp, #8
    5fce:	9301      	str	r3, [sp, #4]
    5fd0:	f1a4 0701 	sub.w	r7, r4, #1
    5fd4:	4631      	mov	r1, r6
    5fd6:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
    5fda:	2290      	movs	r2, #144	; 0x90
    5fdc:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
    5fe0:	ab01      	add	r3, sp, #4
    5fe2:	fab7 f787 	clz	r7, r7
    5fe6:	47a0      	blx	r4
    5fe8:	097f      	lsrs	r7, r7, #5
    5fea:	4604      	mov	r4, r0
    5fec:	b910      	cbnz	r0, 5ff4 <entropy_gather_internal.part.0+0x40>
    5fee:	9b01      	ldr	r3, [sp, #4]
    5ff0:	b93b      	cbnz	r3, 6002 <entropy_gather_internal.part.0+0x4e>
    5ff2:	b1a7      	cbz	r7, 601e <entropy_gather_internal.part.0+0x6a>
    5ff4:	4630      	mov	r0, r6
    5ff6:	2190      	movs	r1, #144	; 0x90
    5ff8:	f7ff fbf4 	bl	57e4 <mbedtls_platform_zeroize>
    5ffc:	4620      	mov	r0, r4
    5ffe:	b027      	add	sp, #156	; 0x9c
    6000:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6002:	4601      	mov	r1, r0
    6004:	4632      	mov	r2, r6
    6006:	4628      	mov	r0, r5
    6008:	f7ff ff96 	bl	5f38 <entropy_update>
    600c:	b950      	cbnz	r0, 6024 <entropy_gather_internal.part.0+0x70>
    600e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
    6012:	9a01      	ldr	r2, [sp, #4]
    6014:	4413      	add	r3, r2
    6016:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
    601a:	2f00      	cmp	r7, #0
    601c:	d1ea      	bne.n	5ff4 <entropy_gather_internal.part.0+0x40>
    601e:	f06f 043c 	mvn.w	r4, #60	; 0x3c
    6022:	e7e7      	b.n	5ff4 <entropy_gather_internal.part.0+0x40>
    6024:	4604      	mov	r4, r0
    6026:	4620      	mov	r0, r4
    6028:	b027      	add	sp, #156	; 0x9c
    602a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000602c <cc_mbedtls_entropy_init>:
    602c:	b570      	push	{r4, r5, r6, lr}
    602e:	2500      	movs	r5, #0
    6030:	4604      	mov	r4, r0
    6032:	4629      	mov	r1, r5
    6034:	2214      	movs	r2, #20
    6036:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
    603a:	30f8      	adds	r0, #248	; 0xf8
    603c:	f002 f9b0 	bl	83a0 <memset>
    6040:	4b16      	ldr	r3, [pc, #88]	; (609c <cc_mbedtls_entropy_init+0x70>)
    6042:	f504 7686 	add.w	r6, r4, #268	; 0x10c
    6046:	681b      	ldr	r3, [r3, #0]
    6048:	4630      	mov	r0, r6
    604a:	4798      	blx	r3
    604c:	4620      	mov	r0, r4
    604e:	f840 5b04 	str.w	r5, [r0], #4
    6052:	f000 fe29 	bl	6ca8 <cc_mbedtls_sha256_init>
    6056:	4b12      	ldr	r3, [pc, #72]	; (60a0 <cc_mbedtls_entropy_init+0x74>)
    6058:	4630      	mov	r0, r6
    605a:	681b      	ldr	r3, [r3, #0]
    605c:	4798      	blx	r3
    605e:	b9d8      	cbnz	r0, 6098 <cc_mbedtls_entropy_init+0x6c>
    6060:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    6064:	42ab      	cmp	r3, r5
    6066:	dc11      	bgt.n	608c <cc_mbedtls_entropy_init+0x60>
    6068:	2101      	movs	r1, #1
    606a:	2520      	movs	r5, #32
    606c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    6070:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    6074:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    6078:	480a      	ldr	r0, [pc, #40]	; (60a4 <cc_mbedtls_entropy_init+0x78>)
    607a:	440b      	add	r3, r1
    607c:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
    6080:	f8c2 00f8 	str.w	r0, [r2, #248]	; 0xf8
    6084:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
    6088:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
    608c:	4b06      	ldr	r3, [pc, #24]	; (60a8 <cc_mbedtls_entropy_init+0x7c>)
    608e:	4630      	mov	r0, r6
    6090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6094:	681b      	ldr	r3, [r3, #0]
    6096:	4718      	bx	r3
    6098:	bd70      	pop	{r4, r5, r6, pc}
    609a:	bf00      	nop
    609c:	200000f0 	.word	0x200000f0
    60a0:	200000f4 	.word	0x200000f4
    60a4:	00006af1 	.word	0x00006af1
    60a8:	200000f8 	.word	0x200000f8

000060ac <cc_mbedtls_entropy_func>:
    60ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    60b0:	2a20      	cmp	r2, #32
    60b2:	b088      	sub	sp, #32
    60b4:	d878      	bhi.n	61a8 <cc_mbedtls_entropy_func+0xfc>
    60b6:	4b3e      	ldr	r3, [pc, #248]	; (61b0 <cc_mbedtls_entropy_func+0x104>)
    60b8:	f500 7986 	add.w	r9, r0, #268	; 0x10c
    60bc:	4604      	mov	r4, r0
    60be:	681b      	ldr	r3, [r3, #0]
    60c0:	4648      	mov	r0, r9
    60c2:	4617      	mov	r7, r2
    60c4:	4688      	mov	r8, r1
    60c6:	4798      	blx	r3
    60c8:	4605      	mov	r5, r0
    60ca:	bb40      	cbnz	r0, 611e <cc_mbedtls_entropy_func+0x72>
    60cc:	f240 1601 	movw	r6, #257	; 0x101
    60d0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    60d4:	2b00      	cmp	r3, #0
    60d6:	d063      	beq.n	61a0 <cc_mbedtls_entropy_func+0xf4>
    60d8:	4620      	mov	r0, r4
    60da:	f7ff ff6b 	bl	5fb4 <entropy_gather_internal.part.0>
    60de:	4605      	mov	r5, r0
    60e0:	2800      	cmp	r0, #0
    60e2:	d15f      	bne.n	61a4 <cc_mbedtls_entropy_func+0xf8>
    60e4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    60e8:	2b00      	cmp	r3, #0
    60ea:	dd07      	ble.n	60fc <cc_mbedtls_entropy_func+0x50>
    60ec:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
    60f0:	4290      	cmp	r0, r2
    60f2:	d303      	bcc.n	60fc <cc_mbedtls_entropy_func+0x50>
    60f4:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    60f8:	2a01      	cmp	r2, #1
    60fa:	d014      	beq.n	6126 <cc_mbedtls_entropy_func+0x7a>
    60fc:	3e01      	subs	r6, #1
    60fe:	d1e9      	bne.n	60d4 <cc_mbedtls_entropy_func+0x28>
    6100:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    6104:	466e      	mov	r6, sp
    6106:	4630      	mov	r0, r6
    6108:	2120      	movs	r1, #32
    610a:	f7ff fb6b 	bl	57e4 <mbedtls_platform_zeroize>
    610e:	4b29      	ldr	r3, [pc, #164]	; (61b4 <cc_mbedtls_entropy_func+0x108>)
    6110:	4648      	mov	r0, r9
    6112:	681b      	ldr	r3, [r3, #0]
    6114:	4798      	blx	r3
    6116:	2800      	cmp	r0, #0
    6118:	bf18      	it	ne
    611a:	f06f 051d 	mvnne.w	r5, #29
    611e:	4628      	mov	r0, r5
    6120:	b008      	add	sp, #32
    6122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6126:	281f      	cmp	r0, #31
    6128:	d9e8      	bls.n	60fc <cc_mbedtls_entropy_func+0x50>
    612a:	466e      	mov	r6, sp
    612c:	4629      	mov	r1, r5
    612e:	2220      	movs	r2, #32
    6130:	4630      	mov	r0, r6
    6132:	f104 0a04 	add.w	sl, r4, #4
    6136:	f002 f933 	bl	83a0 <memset>
    613a:	4631      	mov	r1, r6
    613c:	4650      	mov	r0, sl
    613e:	f000 fe0b 	bl	6d58 <cc_mbedtls_sha256_finish>
    6142:	4605      	mov	r5, r0
    6144:	2800      	cmp	r0, #0
    6146:	d1de      	bne.n	6106 <cc_mbedtls_entropy_func+0x5a>
    6148:	4650      	mov	r0, sl
    614a:	f000 fdc1 	bl	6cd0 <cc_mbedtls_sha256_free>
    614e:	4650      	mov	r0, sl
    6150:	f000 fdaa 	bl	6ca8 <cc_mbedtls_sha256_init>
    6154:	4629      	mov	r1, r5
    6156:	4650      	mov	r0, sl
    6158:	f000 fdc0 	bl	6cdc <cc_mbedtls_sha256_starts>
    615c:	4605      	mov	r5, r0
    615e:	2800      	cmp	r0, #0
    6160:	d1d1      	bne.n	6106 <cc_mbedtls_entropy_func+0x5a>
    6162:	4650      	mov	r0, sl
    6164:	2220      	movs	r2, #32
    6166:	4631      	mov	r1, r6
    6168:	f000 fdcc 	bl	6d04 <cc_mbedtls_sha256_update>
    616c:	4605      	mov	r5, r0
    616e:	2800      	cmp	r0, #0
    6170:	d1c9      	bne.n	6106 <cc_mbedtls_entropy_func+0x5a>
    6172:	4603      	mov	r3, r0
    6174:	4632      	mov	r2, r6
    6176:	2120      	movs	r1, #32
    6178:	4630      	mov	r0, r6
    617a:	f000 fec5 	bl	6f08 <cc_mbedtls_sha256>
    617e:	4605      	mov	r5, r0
    6180:	2800      	cmp	r0, #0
    6182:	d1c0      	bne.n	6106 <cc_mbedtls_entropy_func+0x5a>
    6184:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
    6188:	463a      	mov	r2, r7
    618a:	2b00      	cmp	r3, #0
    618c:	bfc8      	it	gt
    618e:	2300      	movgt	r3, #0
    6190:	4640      	mov	r0, r8
    6192:	4631      	mov	r1, r6
    6194:	bfc8      	it	gt
    6196:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
    619a:	f002 f8f6 	bl	838a <memcpy>
    619e:	e7b2      	b.n	6106 <cc_mbedtls_entropy_func+0x5a>
    61a0:	f06f 053f 	mvn.w	r5, #63	; 0x3f
    61a4:	466e      	mov	r6, sp
    61a6:	e7ae      	b.n	6106 <cc_mbedtls_entropy_func+0x5a>
    61a8:	f06f 053b 	mvn.w	r5, #59	; 0x3b
    61ac:	e7b7      	b.n	611e <cc_mbedtls_entropy_func+0x72>
    61ae:	bf00      	nop
    61b0:	200000f4 	.word	0x200000f4
    61b4:	200000f8 	.word	0x200000f8

000061b8 <RndStartupTest.constprop.0>:
    61b8:	b530      	push	{r4, r5, lr}
    61ba:	b0c3      	sub	sp, #268	; 0x10c
    61bc:	22dc      	movs	r2, #220	; 0xdc
    61be:	2100      	movs	r1, #0
    61c0:	a80b      	add	r0, sp, #44	; 0x2c
    61c2:	f002 f8ed 	bl	83a0 <memset>
    61c6:	2228      	movs	r2, #40	; 0x28
    61c8:	2100      	movs	r1, #0
    61ca:	a801      	add	r0, sp, #4
    61cc:	f002 f8e8 	bl	83a0 <memset>
    61d0:	a801      	add	r0, sp, #4
    61d2:	f000 fec1 	bl	6f58 <RNG_PLAT_SetUserRngParameters>
    61d6:	4604      	mov	r4, r0
    61d8:	b110      	cbz	r0, 61e0 <RndStartupTest.constprop.0+0x28>
    61da:	4620      	mov	r0, r4
    61dc:	b043      	add	sp, #268	; 0x10c
    61de:	bd30      	pop	{r4, r5, pc}
    61e0:	4d18      	ldr	r5, [pc, #96]	; (6244 <RndStartupTest.constprop.0+0x8c>)
    61e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    61e6:	6828      	ldr	r0, [r5, #0]
    61e8:	f000 f93a 	bl	6460 <CC_PalMutexLock>
    61ec:	4604      	mov	r4, r0
    61ee:	b9c0      	cbnz	r0, 6222 <RndStartupTest.constprop.0+0x6a>
    61f0:	2000      	movs	r0, #0
    61f2:	f000 f965 	bl	64c0 <CC_PalPowerSaveModeSelect>
    61f6:	bb00      	cbnz	r0, 623a <RndStartupTest.constprop.0+0x82>
    61f8:	4a13      	ldr	r2, [pc, #76]	; (6248 <RndStartupTest.constprop.0+0x90>)
    61fa:	a901      	add	r1, sp, #4
    61fc:	a80b      	add	r0, sp, #44	; 0x2c
    61fe:	f000 fc69 	bl	6ad4 <LLF_RND_RunTrngStartupTest>
    6202:	4604      	mov	r4, r0
    6204:	2001      	movs	r0, #1
    6206:	f000 f95b 	bl	64c0 <CC_PalPowerSaveModeSelect>
    620a:	b990      	cbnz	r0, 6232 <RndStartupTest.constprop.0+0x7a>
    620c:	6828      	ldr	r0, [r5, #0]
    620e:	f000 f92f 	bl	6470 <CC_PalMutexUnlock>
    6212:	2800      	cmp	r0, #0
    6214:	d0e1      	beq.n	61da <RndStartupTest.constprop.0+0x22>
    6216:	480d      	ldr	r0, [pc, #52]	; (624c <RndStartupTest.constprop.0+0x94>)
    6218:	f7ff f9d8 	bl	55cc <CC_PalAbort>
    621c:	4620      	mov	r0, r4
    621e:	b043      	add	sp, #268	; 0x10c
    6220:	bd30      	pop	{r4, r5, pc}
    6222:	480b      	ldr	r0, [pc, #44]	; (6250 <RndStartupTest.constprop.0+0x98>)
    6224:	f7ff f9d2 	bl	55cc <CC_PalAbort>
    6228:	2c01      	cmp	r4, #1
    622a:	bf08      	it	eq
    622c:	2405      	moveq	r4, #5
    622e:	d0ed      	beq.n	620c <RndStartupTest.constprop.0+0x54>
    6230:	e7de      	b.n	61f0 <RndStartupTest.constprop.0+0x38>
    6232:	4808      	ldr	r0, [pc, #32]	; (6254 <RndStartupTest.constprop.0+0x9c>)
    6234:	f7ff f9ca 	bl	55cc <CC_PalAbort>
    6238:	e7e8      	b.n	620c <RndStartupTest.constprop.0+0x54>
    623a:	4807      	ldr	r0, [pc, #28]	; (6258 <RndStartupTest.constprop.0+0xa0>)
    623c:	f7ff f9c6 	bl	55cc <CC_PalAbort>
    6240:	e7da      	b.n	61f8 <RndStartupTest.constprop.0+0x40>
    6242:	bf00      	nop
    6244:	200000ec 	.word	0x200000ec
    6248:	20000ddc 	.word	0x20000ddc
    624c:	00008c50 	.word	0x00008c50
    6250:	00008bf8 	.word	0x00008bf8
    6254:	00008c30 	.word	0x00008c30
    6258:	00008c10 	.word	0x00008c10

0000625c <CC_LibInit>:
    625c:	b510      	push	{r4, lr}
    625e:	b082      	sub	sp, #8
    6260:	f000 f854 	bl	630c <CC_HalInit>
    6264:	b128      	cbz	r0, 6272 <CC_LibInit+0x16>
    6266:	f000 f8a3 	bl	63b0 <CC_PalTerminate>
    626a:	2403      	movs	r4, #3
    626c:	4620      	mov	r0, r4
    626e:	b002      	add	sp, #8
    6270:	bd10      	pop	{r4, pc}
    6272:	f000 f86f 	bl	6354 <CC_PalInit>
    6276:	b9d0      	cbnz	r0, 62ae <CC_LibInit+0x52>
    6278:	f000 f922 	bl	64c0 <CC_PalPowerSaveModeSelect>
    627c:	b9d8      	cbnz	r0, 62b6 <CC_LibInit+0x5a>
    627e:	4b1e      	ldr	r3, [pc, #120]	; (62f8 <CC_LibInit+0x9c>)
    6280:	681b      	ldr	r3, [r3, #0]
    6282:	0e1b      	lsrs	r3, r3, #24
    6284:	2bf0      	cmp	r3, #240	; 0xf0
    6286:	d10a      	bne.n	629e <CC_LibInit+0x42>
    6288:	4a1c      	ldr	r2, [pc, #112]	; (62fc <CC_LibInit+0xa0>)
    628a:	4b1d      	ldr	r3, [pc, #116]	; (6300 <CC_LibInit+0xa4>)
    628c:	6812      	ldr	r2, [r2, #0]
    628e:	429a      	cmp	r2, r3
    6290:	d029      	beq.n	62e6 <CC_LibInit+0x8a>
    6292:	f000 f83d 	bl	6310 <CC_HalTerminate>
    6296:	2407      	movs	r4, #7
    6298:	f000 f88a 	bl	63b0 <CC_PalTerminate>
    629c:	e7e6      	b.n	626c <CC_LibInit+0x10>
    629e:	2406      	movs	r4, #6
    62a0:	f000 f836 	bl	6310 <CC_HalTerminate>
    62a4:	f000 f884 	bl	63b0 <CC_PalTerminate>
    62a8:	4620      	mov	r0, r4
    62aa:	b002      	add	sp, #8
    62ac:	bd10      	pop	{r4, pc}
    62ae:	2404      	movs	r4, #4
    62b0:	4620      	mov	r0, r4
    62b2:	b002      	add	sp, #8
    62b4:	bd10      	pop	{r4, pc}
    62b6:	f000 f82b 	bl	6310 <CC_HalTerminate>
    62ba:	f000 f879 	bl	63b0 <CC_PalTerminate>
    62be:	f7ff ff7b 	bl	61b8 <RndStartupTest.constprop.0>
    62c2:	4604      	mov	r4, r0
    62c4:	b958      	cbnz	r0, 62de <CC_LibInit+0x82>
    62c6:	4602      	mov	r2, r0
    62c8:	4601      	mov	r1, r0
    62ca:	f7ff f9a3 	bl	5614 <nrf_cc3xx_platform_ctr_drbg_init>
    62ce:	b930      	cbnz	r0, 62de <CC_LibInit+0x82>
    62d0:	2268      	movs	r2, #104	; 0x68
    62d2:	490c      	ldr	r1, [pc, #48]	; (6304 <CC_LibInit+0xa8>)
    62d4:	ab01      	add	r3, sp, #4
    62d6:	f7ff f9d1 	bl	567c <nrf_cc3xx_platform_ctr_drbg_get>
    62da:	2800      	cmp	r0, #0
    62dc:	d0c6      	beq.n	626c <CC_LibInit+0x10>
    62de:	2405      	movs	r4, #5
    62e0:	4620      	mov	r0, r4
    62e2:	b002      	add	sp, #8
    62e4:	bd10      	pop	{r4, pc}
    62e6:	2001      	movs	r0, #1
    62e8:	f000 f8ea 	bl	64c0 <CC_PalPowerSaveModeSelect>
    62ec:	2800      	cmp	r0, #0
    62ee:	d1e2      	bne.n	62b6 <CC_LibInit+0x5a>
    62f0:	4b05      	ldr	r3, [pc, #20]	; (6308 <CC_LibInit+0xac>)
    62f2:	6018      	str	r0, [r3, #0]
    62f4:	e7e3      	b.n	62be <CC_LibInit+0x62>
    62f6:	bf00      	nop
    62f8:	50841928 	.word	0x50841928
    62fc:	50841a24 	.word	0x50841a24
    6300:	20e00000 	.word	0x20e00000
    6304:	20000d74 	.word	0x20000d74
    6308:	50841a0c 	.word	0x50841a0c

0000630c <CC_HalInit>:
    630c:	2000      	movs	r0, #0
    630e:	4770      	bx	lr

00006310 <CC_HalTerminate>:
    6310:	2000      	movs	r0, #0
    6312:	4770      	bx	lr

00006314 <CC_HalClearInterruptBit>:
    6314:	0543      	lsls	r3, r0, #21
    6316:	d503      	bpl.n	6320 <CC_HalClearInterruptBit+0xc>
    6318:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    631c:	4b02      	ldr	r3, [pc, #8]	; (6328 <CC_HalClearInterruptBit+0x14>)
    631e:	601a      	str	r2, [r3, #0]
    6320:	4b02      	ldr	r3, [pc, #8]	; (632c <CC_HalClearInterruptBit+0x18>)
    6322:	6018      	str	r0, [r3, #0]
    6324:	4770      	bx	lr
    6326:	bf00      	nop
    6328:	50841108 	.word	0x50841108
    632c:	50841a08 	.word	0x50841a08

00006330 <CC_HalMaskInterrupt>:
    6330:	4b01      	ldr	r3, [pc, #4]	; (6338 <CC_HalMaskInterrupt+0x8>)
    6332:	6018      	str	r0, [r3, #0]
    6334:	4770      	bx	lr
    6336:	bf00      	nop
    6338:	50841a04 	.word	0x50841a04

0000633c <CC_HalWaitInterrupt>:
    633c:	b108      	cbz	r0, 6342 <CC_HalWaitInterrupt+0x6>
    633e:	f000 b86d 	b.w	641c <CC_PalWaitInterrupt>
    6342:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    6346:	4770      	bx	lr

00006348 <CC_HalWaitInterruptRND>:
    6348:	b108      	cbz	r0, 634e <CC_HalWaitInterruptRND+0x6>
    634a:	f000 b84f 	b.w	63ec <CC_PalWaitInterruptRND>
    634e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    6352:	4770      	bx	lr

00006354 <CC_PalInit>:
    6354:	b510      	push	{r4, lr}
    6356:	4811      	ldr	r0, [pc, #68]	; (639c <CC_PalInit+0x48>)
    6358:	f000 f86e 	bl	6438 <CC_PalMutexCreate>
    635c:	b100      	cbz	r0, 6360 <CC_PalInit+0xc>
    635e:	bd10      	pop	{r4, pc}
    6360:	480f      	ldr	r0, [pc, #60]	; (63a0 <CC_PalInit+0x4c>)
    6362:	f000 f869 	bl	6438 <CC_PalMutexCreate>
    6366:	2800      	cmp	r0, #0
    6368:	d1f9      	bne.n	635e <CC_PalInit+0xa>
    636a:	4c0e      	ldr	r4, [pc, #56]	; (63a4 <CC_PalInit+0x50>)
    636c:	4620      	mov	r0, r4
    636e:	f000 f863 	bl	6438 <CC_PalMutexCreate>
    6372:	2800      	cmp	r0, #0
    6374:	d1f3      	bne.n	635e <CC_PalInit+0xa>
    6376:	4b0c      	ldr	r3, [pc, #48]	; (63a8 <CC_PalInit+0x54>)
    6378:	480c      	ldr	r0, [pc, #48]	; (63ac <CC_PalInit+0x58>)
    637a:	601c      	str	r4, [r3, #0]
    637c:	f000 f85c 	bl	6438 <CC_PalMutexCreate>
    6380:	4601      	mov	r1, r0
    6382:	2800      	cmp	r0, #0
    6384:	d1eb      	bne.n	635e <CC_PalInit+0xa>
    6386:	f000 f82d 	bl	63e4 <CC_PalDmaInit>
    638a:	4604      	mov	r4, r0
    638c:	b108      	cbz	r0, 6392 <CC_PalInit+0x3e>
    638e:	4620      	mov	r0, r4
    6390:	bd10      	pop	{r4, pc}
    6392:	f000 f877 	bl	6484 <CC_PalPowerSaveModeInit>
    6396:	4620      	mov	r0, r4
    6398:	e7fa      	b.n	6390 <CC_PalInit+0x3c>
    639a:	bf00      	nop
    639c:	200000e8 	.word	0x200000e8
    63a0:	200000dc 	.word	0x200000dc
    63a4:	200000e4 	.word	0x200000e4
    63a8:	200000ec 	.word	0x200000ec
    63ac:	200000e0 	.word	0x200000e0

000063b0 <CC_PalTerminate>:
    63b0:	b508      	push	{r3, lr}
    63b2:	4808      	ldr	r0, [pc, #32]	; (63d4 <CC_PalTerminate+0x24>)
    63b4:	f000 f84a 	bl	644c <CC_PalMutexDestroy>
    63b8:	4807      	ldr	r0, [pc, #28]	; (63d8 <CC_PalTerminate+0x28>)
    63ba:	f000 f847 	bl	644c <CC_PalMutexDestroy>
    63be:	4807      	ldr	r0, [pc, #28]	; (63dc <CC_PalTerminate+0x2c>)
    63c0:	f000 f844 	bl	644c <CC_PalMutexDestroy>
    63c4:	4806      	ldr	r0, [pc, #24]	; (63e0 <CC_PalTerminate+0x30>)
    63c6:	f000 f841 	bl	644c <CC_PalMutexDestroy>
    63ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    63ce:	f000 b80b 	b.w	63e8 <CC_PalDmaTerminate>
    63d2:	bf00      	nop
    63d4:	200000e8 	.word	0x200000e8
    63d8:	200000dc 	.word	0x200000dc
    63dc:	200000e4 	.word	0x200000e4
    63e0:	200000e0 	.word	0x200000e0

000063e4 <CC_PalDmaInit>:
    63e4:	2000      	movs	r0, #0
    63e6:	4770      	bx	lr

000063e8 <CC_PalDmaTerminate>:
    63e8:	4770      	bx	lr
    63ea:	bf00      	nop

000063ec <CC_PalWaitInterruptRND>:
    63ec:	4602      	mov	r2, r0
    63ee:	4807      	ldr	r0, [pc, #28]	; (640c <CC_PalWaitInterruptRND+0x20>)
    63f0:	6803      	ldr	r3, [r0, #0]
    63f2:	4213      	tst	r3, r2
    63f4:	d0fc      	beq.n	63f0 <CC_PalWaitInterruptRND+0x4>
    63f6:	b121      	cbz	r1, 6402 <CC_PalWaitInterruptRND+0x16>
    63f8:	4b05      	ldr	r3, [pc, #20]	; (6410 <CC_PalWaitInterruptRND+0x24>)
    63fa:	4806      	ldr	r0, [pc, #24]	; (6414 <CC_PalWaitInterruptRND+0x28>)
    63fc:	681b      	ldr	r3, [r3, #0]
    63fe:	600b      	str	r3, [r1, #0]
    6400:	6003      	str	r3, [r0, #0]
    6402:	4b05      	ldr	r3, [pc, #20]	; (6418 <CC_PalWaitInterruptRND+0x2c>)
    6404:	2000      	movs	r0, #0
    6406:	601a      	str	r2, [r3, #0]
    6408:	4770      	bx	lr
    640a:	bf00      	nop
    640c:	50841a00 	.word	0x50841a00
    6410:	50841104 	.word	0x50841104
    6414:	50841108 	.word	0x50841108
    6418:	50841a08 	.word	0x50841a08

0000641c <CC_PalWaitInterrupt>:
    641c:	4602      	mov	r2, r0
    641e:	4904      	ldr	r1, [pc, #16]	; (6430 <CC_PalWaitInterrupt+0x14>)
    6420:	680b      	ldr	r3, [r1, #0]
    6422:	421a      	tst	r2, r3
    6424:	d0fc      	beq.n	6420 <CC_PalWaitInterrupt+0x4>
    6426:	4b03      	ldr	r3, [pc, #12]	; (6434 <CC_PalWaitInterrupt+0x18>)
    6428:	2000      	movs	r0, #0
    642a:	601a      	str	r2, [r3, #0]
    642c:	4770      	bx	lr
    642e:	bf00      	nop
    6430:	50841a00 	.word	0x50841a00
    6434:	50841a08 	.word	0x50841a08

00006438 <CC_PalMutexCreate>:
    6438:	b508      	push	{r3, lr}
    643a:	4b03      	ldr	r3, [pc, #12]	; (6448 <CC_PalMutexCreate+0x10>)
    643c:	6802      	ldr	r2, [r0, #0]
    643e:	681b      	ldr	r3, [r3, #0]
    6440:	6810      	ldr	r0, [r2, #0]
    6442:	4798      	blx	r3
    6444:	2000      	movs	r0, #0
    6446:	bd08      	pop	{r3, pc}
    6448:	2000009c 	.word	0x2000009c

0000644c <CC_PalMutexDestroy>:
    644c:	b508      	push	{r3, lr}
    644e:	4b03      	ldr	r3, [pc, #12]	; (645c <CC_PalMutexDestroy+0x10>)
    6450:	6802      	ldr	r2, [r0, #0]
    6452:	685b      	ldr	r3, [r3, #4]
    6454:	6810      	ldr	r0, [r2, #0]
    6456:	4798      	blx	r3
    6458:	2000      	movs	r0, #0
    645a:	bd08      	pop	{r3, pc}
    645c:	2000009c 	.word	0x2000009c

00006460 <CC_PalMutexLock>:
    6460:	4b02      	ldr	r3, [pc, #8]	; (646c <CC_PalMutexLock+0xc>)
    6462:	6802      	ldr	r2, [r0, #0]
    6464:	689b      	ldr	r3, [r3, #8]
    6466:	6810      	ldr	r0, [r2, #0]
    6468:	4718      	bx	r3
    646a:	bf00      	nop
    646c:	2000009c 	.word	0x2000009c

00006470 <CC_PalMutexUnlock>:
    6470:	b508      	push	{r3, lr}
    6472:	4b03      	ldr	r3, [pc, #12]	; (6480 <CC_PalMutexUnlock+0x10>)
    6474:	6802      	ldr	r2, [r0, #0]
    6476:	68db      	ldr	r3, [r3, #12]
    6478:	6810      	ldr	r0, [r2, #0]
    647a:	4798      	blx	r3
    647c:	2000      	movs	r0, #0
    647e:	bd08      	pop	{r3, pc}
    6480:	2000009c 	.word	0x2000009c

00006484 <CC_PalPowerSaveModeInit>:
    6484:	b570      	push	{r4, r5, r6, lr}
    6486:	4c09      	ldr	r4, [pc, #36]	; (64ac <CC_PalPowerSaveModeInit+0x28>)
    6488:	4d09      	ldr	r5, [pc, #36]	; (64b0 <CC_PalPowerSaveModeInit+0x2c>)
    648a:	6920      	ldr	r0, [r4, #16]
    648c:	68ab      	ldr	r3, [r5, #8]
    648e:	4798      	blx	r3
    6490:	b118      	cbz	r0, 649a <CC_PalPowerSaveModeInit+0x16>
    6492:	4b08      	ldr	r3, [pc, #32]	; (64b4 <CC_PalPowerSaveModeInit+0x30>)
    6494:	4808      	ldr	r0, [pc, #32]	; (64b8 <CC_PalPowerSaveModeInit+0x34>)
    6496:	685b      	ldr	r3, [r3, #4]
    6498:	4798      	blx	r3
    649a:	2100      	movs	r1, #0
    649c:	4a07      	ldr	r2, [pc, #28]	; (64bc <CC_PalPowerSaveModeInit+0x38>)
    649e:	68eb      	ldr	r3, [r5, #12]
    64a0:	6011      	str	r1, [r2, #0]
    64a2:	6920      	ldr	r0, [r4, #16]
    64a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    64a8:	4718      	bx	r3
    64aa:	bf00      	nop
    64ac:	200000ac 	.word	0x200000ac
    64b0:	2000009c 	.word	0x2000009c
    64b4:	2000008c 	.word	0x2000008c
    64b8:	00008c68 	.word	0x00008c68
    64bc:	20000ffc 	.word	0x20000ffc

000064c0 <CC_PalPowerSaveModeSelect>:
    64c0:	b570      	push	{r4, r5, r6, lr}
    64c2:	4d1a      	ldr	r5, [pc, #104]	; (652c <CC_PalPowerSaveModeSelect+0x6c>)
    64c4:	4e1a      	ldr	r6, [pc, #104]	; (6530 <CC_PalPowerSaveModeSelect+0x70>)
    64c6:	4604      	mov	r4, r0
    64c8:	68b2      	ldr	r2, [r6, #8]
    64ca:	6928      	ldr	r0, [r5, #16]
    64cc:	4790      	blx	r2
    64ce:	b9f0      	cbnz	r0, 650e <CC_PalPowerSaveModeSelect+0x4e>
    64d0:	b15c      	cbz	r4, 64ea <CC_PalPowerSaveModeSelect+0x2a>
    64d2:	4c18      	ldr	r4, [pc, #96]	; (6534 <CC_PalPowerSaveModeSelect+0x74>)
    64d4:	6823      	ldr	r3, [r4, #0]
    64d6:	b1ab      	cbz	r3, 6504 <CC_PalPowerSaveModeSelect+0x44>
    64d8:	2b01      	cmp	r3, #1
    64da:	d01a      	beq.n	6512 <CC_PalPowerSaveModeSelect+0x52>
    64dc:	3b01      	subs	r3, #1
    64de:	6023      	str	r3, [r4, #0]
    64e0:	6928      	ldr	r0, [r5, #16]
    64e2:	68f3      	ldr	r3, [r6, #12]
    64e4:	4798      	blx	r3
    64e6:	2000      	movs	r0, #0
    64e8:	bd70      	pop	{r4, r5, r6, pc}
    64ea:	4c12      	ldr	r4, [pc, #72]	; (6534 <CC_PalPowerSaveModeSelect+0x74>)
    64ec:	6821      	ldr	r1, [r4, #0]
    64ee:	b939      	cbnz	r1, 6500 <CC_PalPowerSaveModeSelect+0x40>
    64f0:	2001      	movs	r0, #1
    64f2:	4b11      	ldr	r3, [pc, #68]	; (6538 <CC_PalPowerSaveModeSelect+0x78>)
    64f4:	4a11      	ldr	r2, [pc, #68]	; (653c <CC_PalPowerSaveModeSelect+0x7c>)
    64f6:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    64fa:	6813      	ldr	r3, [r2, #0]
    64fc:	2b00      	cmp	r3, #0
    64fe:	d1fc      	bne.n	64fa <CC_PalPowerSaveModeSelect+0x3a>
    6500:	3101      	adds	r1, #1
    6502:	6021      	str	r1, [r4, #0]
    6504:	68f3      	ldr	r3, [r6, #12]
    6506:	6928      	ldr	r0, [r5, #16]
    6508:	4798      	blx	r3
    650a:	2000      	movs	r0, #0
    650c:	bd70      	pop	{r4, r5, r6, pc}
    650e:	480c      	ldr	r0, [pc, #48]	; (6540 <CC_PalPowerSaveModeSelect+0x80>)
    6510:	bd70      	pop	{r4, r5, r6, pc}
    6512:	4a0a      	ldr	r2, [pc, #40]	; (653c <CC_PalPowerSaveModeSelect+0x7c>)
    6514:	6813      	ldr	r3, [r2, #0]
    6516:	2b00      	cmp	r3, #0
    6518:	d1fc      	bne.n	6514 <CC_PalPowerSaveModeSelect+0x54>
    651a:	4a07      	ldr	r2, [pc, #28]	; (6538 <CC_PalPowerSaveModeSelect+0x78>)
    651c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    6520:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    6524:	f7ff ff04 	bl	6330 <CC_HalMaskInterrupt>
    6528:	6823      	ldr	r3, [r4, #0]
    652a:	e7d7      	b.n	64dc <CC_PalPowerSaveModeSelect+0x1c>
    652c:	200000ac 	.word	0x200000ac
    6530:	2000009c 	.word	0x2000009c
    6534:	20000ffc 	.word	0x20000ffc
    6538:	50840000 	.word	0x50840000
    653c:	50841910 	.word	0x50841910
    6540:	ffff8fe9 	.word	0xffff8fe9

00006544 <mutex_init>:
    6544:	4b01      	ldr	r3, [pc, #4]	; (654c <mutex_init+0x8>)
    6546:	681b      	ldr	r3, [r3, #0]
    6548:	4718      	bx	r3
    654a:	bf00      	nop
    654c:	2000009c 	.word	0x2000009c

00006550 <mutex_lock>:
    6550:	4b01      	ldr	r3, [pc, #4]	; (6558 <mutex_lock+0x8>)
    6552:	689b      	ldr	r3, [r3, #8]
    6554:	4718      	bx	r3
    6556:	bf00      	nop
    6558:	2000009c 	.word	0x2000009c

0000655c <mutex_unlock>:
    655c:	4b01      	ldr	r3, [pc, #4]	; (6564 <mutex_unlock+0x8>)
    655e:	68db      	ldr	r3, [r3, #12]
    6560:	4718      	bx	r3
    6562:	bf00      	nop
    6564:	2000009c 	.word	0x2000009c

00006568 <startTrngHW>:
    6568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    656c:	2800      	cmp	r0, #0
    656e:	d07c      	beq.n	666a <startTrngHW+0x102>
    6570:	460c      	mov	r4, r1
    6572:	2900      	cmp	r1, #0
    6574:	d079      	beq.n	666a <startTrngHW+0x102>
    6576:	461d      	mov	r5, r3
    6578:	2b00      	cmp	r3, #0
    657a:	d076      	beq.n	666a <startTrngHW+0x102>
    657c:	4606      	mov	r6, r0
    657e:	b122      	cbz	r2, 658a <startTrngHW+0x22>
    6580:	2201      	movs	r2, #1
    6582:	2300      	movs	r3, #0
    6584:	602a      	str	r2, [r5, #0]
    6586:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
    658a:	682b      	ldr	r3, [r5, #0]
    658c:	2b00      	cmp	r3, #0
    658e:	d068      	beq.n	6662 <startTrngHW+0xfa>
    6590:	4629      	mov	r1, r5
    6592:	4620      	mov	r0, r4
    6594:	f000 fddc 	bl	7150 <LLF_RND_GetFastestRosc>
    6598:	4607      	mov	r7, r0
    659a:	2800      	cmp	r0, #0
    659c:	d162      	bne.n	6664 <startTrngHW+0xfc>
    659e:	4621      	mov	r1, r4
    65a0:	6828      	ldr	r0, [r5, #0]
    65a2:	f000 fdb7 	bl	7114 <LLF_RND_GetRoscSampleCnt>
    65a6:	4607      	mov	r7, r0
    65a8:	2800      	cmp	r0, #0
    65aa:	d15b      	bne.n	6664 <startTrngHW+0xfc>
    65ac:	682b      	ldr	r3, [r5, #0]
    65ae:	2b08      	cmp	r3, #8
    65b0:	d06a      	beq.n	6688 <startTrngHW+0x120>
    65b2:	2b04      	cmp	r3, #4
    65b4:	d06b      	beq.n	668e <startTrngHW+0x126>
    65b6:	f1a3 0802 	sub.w	r8, r3, #2
    65ba:	fab8 f888 	clz	r8, r8
    65be:	ea4f 1858 	mov.w	r8, r8, lsr #5
    65c2:	2301      	movs	r3, #1
    65c4:	469c      	mov	ip, r3
    65c6:	4a33      	ldr	r2, [pc, #204]	; (6694 <startTrngHW+0x12c>)
    65c8:	4933      	ldr	r1, [pc, #204]	; (6698 <startTrngHW+0x130>)
    65ca:	6013      	str	r3, [r2, #0]
    65cc:	4610      	mov	r0, r2
    65ce:	600b      	str	r3, [r1, #0]
    65d0:	3a94      	subs	r2, #148	; 0x94
    65d2:	f8c0 c000 	str.w	ip, [r0]
    65d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    65d8:	6013      	str	r3, [r2, #0]
    65da:	6811      	ldr	r1, [r2, #0]
    65dc:	428b      	cmp	r3, r1
    65de:	d1f8      	bne.n	65d2 <startTrngHW+0x6a>
    65e0:	f04f 0900 	mov.w	r9, #0
    65e4:	4b2d      	ldr	r3, [pc, #180]	; (669c <startTrngHW+0x134>)
    65e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    65ea:	f8c3 9000 	str.w	r9, [r3]
    65ee:	f7ff fe91 	bl	6314 <CC_HalClearInterruptBit>
    65f2:	f06f 021b 	mvn.w	r2, #27
    65f6:	4b2a      	ldr	r3, [pc, #168]	; (66a0 <startTrngHW+0x138>)
    65f8:	4648      	mov	r0, r9
    65fa:	601a      	str	r2, [r3, #0]
    65fc:	f7ff fe98 	bl	6330 <CC_HalMaskInterrupt>
    6600:	4a28      	ldr	r2, [pc, #160]	; (66a4 <startTrngHW+0x13c>)
    6602:	4b29      	ldr	r3, [pc, #164]	; (66a8 <startTrngHW+0x140>)
    6604:	f8c2 8000 	str.w	r8, [r2]
    6608:	6818      	ldr	r0, [r3, #0]
    660a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    660e:	f7ff fe8f 	bl	6330 <CC_HalMaskInterrupt>
    6612:	220a      	movs	r2, #10
    6614:	4b25      	ldr	r3, [pc, #148]	; (66ac <startTrngHW+0x144>)
    6616:	601a      	str	r2, [r3, #0]
    6618:	9a08      	ldr	r2, [sp, #32]
    661a:	6923      	ldr	r3, [r4, #16]
    661c:	2a01      	cmp	r2, #1
    661e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6620:	d027      	beq.n	6672 <startTrngHW+0x10a>
    6622:	4a23      	ldr	r2, [pc, #140]	; (66b0 <startTrngHW+0x148>)
    6624:	fba2 2303 	umull	r2, r3, r2, r3
    6628:	091b      	lsrs	r3, r3, #4
    662a:	2201      	movs	r2, #1
    662c:	fb03 f301 	mul.w	r3, r3, r1
    6630:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6634:	491f      	ldr	r1, [pc, #124]	; (66b4 <startTrngHW+0x14c>)
    6636:	03db      	lsls	r3, r3, #15
    6638:	099b      	lsrs	r3, r3, #6
    663a:	600b      	str	r3, [r1, #0]
    663c:	4b17      	ldr	r3, [pc, #92]	; (669c <startTrngHW+0x134>)
    663e:	4638      	mov	r0, r7
    6640:	601a      	str	r2, [r3, #0]
    6642:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
    6646:	682a      	ldr	r2, [r5, #0]
    6648:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    664c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    6650:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
    6654:	682a      	ldr	r2, [r5, #0]
    6656:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    665a:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
    665e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6662:	4f15      	ldr	r7, [pc, #84]	; (66b8 <startTrngHW+0x150>)
    6664:	4638      	mov	r0, r7
    6666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    666a:	4f14      	ldr	r7, [pc, #80]	; (66bc <startTrngHW+0x154>)
    666c:	4638      	mov	r0, r7
    666e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6672:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6676:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
    667a:	3201      	adds	r2, #1
    667c:	d002      	beq.n	6684 <startTrngHW+0x11c>
    667e:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    6682:	e7ce      	b.n	6622 <startTrngHW+0xba>
    6684:	2316      	movs	r3, #22
    6686:	e7d0      	b.n	662a <startTrngHW+0xc2>
    6688:	f04f 0803 	mov.w	r8, #3
    668c:	e799      	b.n	65c2 <startTrngHW+0x5a>
    668e:	f04f 0802 	mov.w	r8, #2
    6692:	e796      	b.n	65c2 <startTrngHW+0x5a>
    6694:	508411c4 	.word	0x508411c4
    6698:	50841140 	.word	0x50841140
    669c:	5084112c 	.word	0x5084112c
    66a0:	50841100 	.word	0x50841100
    66a4:	5084110c 	.word	0x5084110c
    66a8:	50841a04 	.word	0x50841a04
    66ac:	50841138 	.word	0x50841138
    66b0:	aaaaaaab 	.word	0xaaaaaaab
    66b4:	508411d8 	.word	0x508411d8
    66b8:	00f10c31 	.word	0x00f10c31
    66bc:	00f10c35 	.word	0x00f10c35

000066c0 <LLF_RND_RepetitionCounterTest.part.0>:
    66c0:	b4f0      	push	{r4, r5, r6, r7}
    66c2:	2400      	movs	r4, #0
    66c4:	00c9      	lsls	r1, r1, #3
    66c6:	4626      	mov	r6, r4
    66c8:	4627      	mov	r7, r4
    66ca:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    66ce:	e006      	b.n	66de <LLF_RND_RepetitionCounterTest.part.0+0x1e>
    66d0:	429f      	cmp	r7, r3
    66d2:	d015      	beq.n	6700 <LLF_RND_RepetitionCounterTest.part.0+0x40>
    66d4:	2601      	movs	r6, #1
    66d6:	4565      	cmp	r5, ip
    66d8:	d818      	bhi.n	670c <LLF_RND_RepetitionCounterTest.part.0+0x4c>
    66da:	462c      	mov	r4, r5
    66dc:	461f      	mov	r7, r3
    66de:	0963      	lsrs	r3, r4, #5
    66e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    66e4:	f004 011f 	and.w	r1, r4, #31
    66e8:	40cb      	lsrs	r3, r1
    66ea:	291f      	cmp	r1, #31
    66ec:	f104 0501 	add.w	r5, r4, #1
    66f0:	bf18      	it	ne
    66f2:	f003 0301 	andne.w	r3, r3, #1
    66f6:	2c00      	cmp	r4, #0
    66f8:	d1ea      	bne.n	66d0 <LLF_RND_RepetitionCounterTest.part.0+0x10>
    66fa:	2601      	movs	r6, #1
    66fc:	4635      	mov	r5, r6
    66fe:	e7ec      	b.n	66da <LLF_RND_RepetitionCounterTest.part.0+0x1a>
    6700:	3601      	adds	r6, #1
    6702:	4296      	cmp	r6, r2
    6704:	d1e7      	bne.n	66d6 <LLF_RND_RepetitionCounterTest.part.0+0x16>
    6706:	4803      	ldr	r0, [pc, #12]	; (6714 <LLF_RND_RepetitionCounterTest.part.0+0x54>)
    6708:	bcf0      	pop	{r4, r5, r6, r7}
    670a:	4770      	bx	lr
    670c:	2000      	movs	r0, #0
    670e:	bcf0      	pop	{r4, r5, r6, r7}
    6710:	4770      	bx	lr
    6712:	bf00      	nop
    6714:	00f10c36 	.word	0x00f10c36

00006718 <LLF_RND_AdaptiveProportionTest>:
    6718:	2800      	cmp	r0, #0
    671a:	d05f      	beq.n	67dc <LLF_RND_AdaptiveProportionTest+0xc4>
    671c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6720:	1e4c      	subs	r4, r1, #1
    6722:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    6726:	d226      	bcs.n	6776 <LLF_RND_AdaptiveProportionTest+0x5e>
    6728:	b32b      	cbz	r3, 6776 <LLF_RND_AdaptiveProportionTest+0x5e>
    672a:	b322      	cbz	r2, 6776 <LLF_RND_AdaptiveProportionTest+0x5e>
    672c:	00cc      	lsls	r4, r1, #3
    672e:	2b01      	cmp	r3, #1
    6730:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
    6734:	d02f      	beq.n	6796 <LLF_RND_AdaptiveProportionTest+0x7e>
    6736:	2100      	movs	r1, #0
    6738:	468c      	mov	ip, r1
    673a:	460f      	mov	r7, r1
    673c:	460d      	mov	r5, r1
    673e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    6742:	094c      	lsrs	r4, r1, #5
    6744:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
    6748:	f001 061f 	and.w	r6, r1, #31
    674c:	40f4      	lsrs	r4, r6
    674e:	2e1f      	cmp	r6, #31
    6750:	bf18      	it	ne
    6752:	f004 0401 	andne.w	r4, r4, #1
    6756:	b921      	cbnz	r1, 6762 <LLF_RND_AdaptiveProportionTest+0x4a>
    6758:	2501      	movs	r5, #1
    675a:	46ac      	mov	ip, r5
    675c:	4629      	mov	r1, r5
    675e:	4627      	mov	r7, r4
    6760:	e7ef      	b.n	6742 <LLF_RND_AdaptiveProportionTest+0x2a>
    6762:	42ab      	cmp	r3, r5
    6764:	d013      	beq.n	678e <LLF_RND_AdaptiveProportionTest+0x76>
    6766:	42a7      	cmp	r7, r4
    6768:	d101      	bne.n	676e <LLF_RND_AdaptiveProportionTest+0x56>
    676a:	f10c 0c01 	add.w	ip, ip, #1
    676e:	4545      	cmp	r5, r8
    6770:	d104      	bne.n	677c <LLF_RND_AdaptiveProportionTest+0x64>
    6772:	4562      	cmp	r2, ip
    6774:	d202      	bcs.n	677c <LLF_RND_AdaptiveProportionTest+0x64>
    6776:	481a      	ldr	r0, [pc, #104]	; (67e0 <LLF_RND_AdaptiveProportionTest+0xc8>)
    6778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    677c:	463c      	mov	r4, r7
    677e:	3101      	adds	r1, #1
    6780:	458e      	cmp	lr, r1
    6782:	f105 0501 	add.w	r5, r5, #1
    6786:	d2ea      	bcs.n	675e <LLF_RND_AdaptiveProportionTest+0x46>
    6788:	2000      	movs	r0, #0
    678a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    678e:	2500      	movs	r5, #0
    6790:	f04f 0c01 	mov.w	ip, #1
    6794:	e7f3      	b.n	677e <LLF_RND_AdaptiveProportionTest+0x66>
    6796:	2600      	movs	r6, #0
    6798:	46b4      	mov	ip, r6
    679a:	4637      	mov	r7, r6
    679c:	4631      	mov	r1, r6
    679e:	094b      	lsrs	r3, r1, #5
    67a0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    67a4:	f001 051f 	and.w	r5, r1, #31
    67a8:	40eb      	lsrs	r3, r5
    67aa:	2d1f      	cmp	r5, #31
    67ac:	bf18      	it	ne
    67ae:	f003 0301 	andne.w	r3, r3, #1
    67b2:	b139      	cbz	r1, 67c4 <LLF_RND_AdaptiveProportionTest+0xac>
    67b4:	b95f      	cbnz	r7, 67ce <LLF_RND_AdaptiveProportionTest+0xb6>
    67b6:	459c      	cmp	ip, r3
    67b8:	d001      	beq.n	67be <LLF_RND_AdaptiveProportionTest+0xa6>
    67ba:	4663      	mov	r3, ip
    67bc:	e008      	b.n	67d0 <LLF_RND_AdaptiveProportionTest+0xb8>
    67be:	4663      	mov	r3, ip
    67c0:	3601      	adds	r6, #1
    67c2:	e005      	b.n	67d0 <LLF_RND_AdaptiveProportionTest+0xb8>
    67c4:	2601      	movs	r6, #1
    67c6:	4631      	mov	r1, r6
    67c8:	469c      	mov	ip, r3
    67ca:	2701      	movs	r7, #1
    67cc:	e7e7      	b.n	679e <LLF_RND_AdaptiveProportionTest+0x86>
    67ce:	463e      	mov	r6, r7
    67d0:	42b2      	cmp	r2, r6
    67d2:	d3d0      	bcc.n	6776 <LLF_RND_AdaptiveProportionTest+0x5e>
    67d4:	3101      	adds	r1, #1
    67d6:	42a1      	cmp	r1, r4
    67d8:	d1f6      	bne.n	67c8 <LLF_RND_AdaptiveProportionTest+0xb0>
    67da:	e7d5      	b.n	6788 <LLF_RND_AdaptiveProportionTest+0x70>
    67dc:	4800      	ldr	r0, [pc, #0]	; (67e0 <LLF_RND_AdaptiveProportionTest+0xc8>)
    67de:	4770      	bx	lr
    67e0:	00f10c37 	.word	0x00f10c37

000067e4 <getTrngSource>:
    67e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    67e8:	b08d      	sub	sp, #52	; 0x34
    67ea:	9e18      	ldr	r6, [sp, #96]	; 0x60
    67ec:	4607      	mov	r7, r0
    67ee:	460c      	mov	r4, r1
    67f0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    67f2:	2e00      	cmp	r6, #0
    67f4:	d14d      	bne.n	6892 <getTrngSource+0xae>
    67f6:	f8d1 b010 	ldr.w	fp, [r1, #16]
    67fa:	2100      	movs	r1, #0
    67fc:	601d      	str	r5, [r3, #0]
    67fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6800:	6019      	str	r1, [r3, #0]
    6802:	2a00      	cmp	r2, #0
    6804:	f000 8123 	beq.w	6a4e <getTrngSource+0x26a>
    6808:	4a9d      	ldr	r2, [pc, #628]	; (6a80 <getTrngSource+0x29c>)
    680a:	4b9e      	ldr	r3, [pc, #632]	; (6a84 <getTrngSource+0x2a0>)
    680c:	6811      	ldr	r1, [r2, #0]
    680e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    6810:	681b      	ldr	r3, [r3, #0]
    6812:	429a      	cmp	r2, r3
    6814:	d148      	bne.n	68a8 <getTrngSource+0xc4>
    6816:	290a      	cmp	r1, #10
    6818:	d146      	bne.n	68a8 <getTrngSource+0xc4>
    681a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    681e:	9304      	str	r3, [sp, #16]
    6820:	2304      	movs	r3, #4
    6822:	46b8      	mov	r8, r7
    6824:	9302      	str	r3, [sp, #8]
    6826:	4b98      	ldr	r3, [pc, #608]	; (6a88 <getTrngSource+0x2a4>)
    6828:	fba3 230b 	umull	r2, r3, r3, fp
    682c:	ea4f 0a93 	mov.w	sl, r3, lsr #2
    6830:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
    6834:	f105 0208 	add.w	r2, r5, #8
    6838:	9203      	str	r2, [sp, #12]
    683a:	ebab 0a43 	sub.w	sl, fp, r3, lsl #1
    683e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6840:	f8c3 b000 	str.w	fp, [r3]
    6844:	f1bb 0f00 	cmp.w	fp, #0
    6848:	f000 80c7 	beq.w	69da <getTrngSource+0x1f6>
    684c:	465d      	mov	r5, fp
    684e:	f04f 0900 	mov.w	r9, #0
    6852:	9e03      	ldr	r6, [sp, #12]
    6854:	f000 fc8c 	bl	7170 <LLF_RND_TurnOffTrng>
    6858:	2300      	movs	r3, #0
    685a:	9305      	str	r3, [sp, #20]
    685c:	f1b8 0f00 	cmp.w	r8, #0
    6860:	f000 80e9 	beq.w	6a36 <getTrngSource+0x252>
    6864:	2c00      	cmp	r4, #0
    6866:	f000 80e6 	beq.w	6a36 <getTrngSource+0x252>
    686a:	9b04      	ldr	r3, [sp, #16]
    686c:	2b00      	cmp	r3, #0
    686e:	f000 80e0 	beq.w	6a32 <getTrngSource+0x24e>
    6872:	4620      	mov	r0, r4
    6874:	a904      	add	r1, sp, #16
    6876:	f000 fc6b 	bl	7150 <LLF_RND_GetFastestRosc>
    687a:	b1b8      	cbz	r0, 68ac <getTrngSource+0xc8>
    687c:	4b83      	ldr	r3, [pc, #524]	; (6a8c <getTrngSource+0x2a8>)
    687e:	4298      	cmp	r0, r3
    6880:	f040 80ab 	bne.w	69da <getTrngSource+0x1f6>
    6884:	9002      	str	r0, [sp, #8]
    6886:	f000 fc73 	bl	7170 <LLF_RND_TurnOffTrng>
    688a:	9802      	ldr	r0, [sp, #8]
    688c:	b00d      	add	sp, #52	; 0x34
    688e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6892:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    6896:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    689a:	3001      	adds	r0, #1
    689c:	bf0c      	ite	eq
    689e:	f44f 7b04 	moveq.w	fp, #528	; 0x210
    68a2:	f8d1 bc0c 	ldrne.w	fp, [r1, #3084]	; 0xc0c
    68a6:	e7a8      	b.n	67fa <getTrngSource+0x16>
    68a8:	4879      	ldr	r0, [pc, #484]	; (6a90 <getTrngSource+0x2ac>)
    68aa:	e7eb      	b.n	6884 <getTrngSource+0xa0>
    68ac:	4621      	mov	r1, r4
    68ae:	9804      	ldr	r0, [sp, #16]
    68b0:	f000 fc30 	bl	7114 <LLF_RND_GetRoscSampleCnt>
    68b4:	2800      	cmp	r0, #0
    68b6:	d1e1      	bne.n	687c <getTrngSource+0x98>
    68b8:	9f04      	ldr	r7, [sp, #16]
    68ba:	2f08      	cmp	r7, #8
    68bc:	f000 80bd 	beq.w	6a3a <getTrngSource+0x256>
    68c0:	2f04      	cmp	r7, #4
    68c2:	f000 80bc 	beq.w	6a3e <getTrngSource+0x25a>
    68c6:	f1a7 0702 	sub.w	r7, r7, #2
    68ca:	fab7 f787 	clz	r7, r7
    68ce:	097f      	lsrs	r7, r7, #5
    68d0:	2301      	movs	r3, #1
    68d2:	4619      	mov	r1, r3
    68d4:	486f      	ldr	r0, [pc, #444]	; (6a94 <getTrngSource+0x2b0>)
    68d6:	6003      	str	r3, [r0, #0]
    68d8:	f840 3c84 	str.w	r3, [r0, #-132]
    68dc:	4b6d      	ldr	r3, [pc, #436]	; (6a94 <getTrngSource+0x2b0>)
    68de:	4869      	ldr	r0, [pc, #420]	; (6a84 <getTrngSource+0x2a0>)
    68e0:	6019      	str	r1, [r3, #0]
    68e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    68e4:	6003      	str	r3, [r0, #0]
    68e6:	6800      	ldr	r0, [r0, #0]
    68e8:	4283      	cmp	r3, r0
    68ea:	d1f7      	bne.n	68dc <getTrngSource+0xf8>
    68ec:	2300      	movs	r3, #0
    68ee:	4a6a      	ldr	r2, [pc, #424]	; (6a98 <getTrngSource+0x2b4>)
    68f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    68f4:	6013      	str	r3, [r2, #0]
    68f6:	f7ff fd0d 	bl	6314 <CC_HalClearInterruptBit>
    68fa:	2300      	movs	r3, #0
    68fc:	f06f 011b 	mvn.w	r1, #27
    6900:	4618      	mov	r0, r3
    6902:	4b66      	ldr	r3, [pc, #408]	; (6a9c <getTrngSource+0x2b8>)
    6904:	6019      	str	r1, [r3, #0]
    6906:	f7ff fd13 	bl	6330 <CC_HalMaskInterrupt>
    690a:	4965      	ldr	r1, [pc, #404]	; (6aa0 <getTrngSource+0x2bc>)
    690c:	4b65      	ldr	r3, [pc, #404]	; (6aa4 <getTrngSource+0x2c0>)
    690e:	600f      	str	r7, [r1, #0]
    6910:	6818      	ldr	r0, [r3, #0]
    6912:	4f5d      	ldr	r7, [pc, #372]	; (6a88 <getTrngSource+0x2a4>)
    6914:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    6918:	f7ff fd0a 	bl	6330 <CC_HalMaskInterrupt>
    691c:	210a      	movs	r1, #10
    691e:	2201      	movs	r2, #1
    6920:	4b57      	ldr	r3, [pc, #348]	; (6a80 <getTrngSource+0x29c>)
    6922:	4861      	ldr	r0, [pc, #388]	; (6aa8 <getTrngSource+0x2c4>)
    6924:	6019      	str	r1, [r3, #0]
    6926:	6921      	ldr	r1, [r4, #16]
    6928:	6a63      	ldr	r3, [r4, #36]	; 0x24
    692a:	fba7 c101 	umull	ip, r1, r7, r1
    692e:	0909      	lsrs	r1, r1, #4
    6930:	fb03 f301 	mul.w	r3, r3, r1
    6934:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6938:	03db      	lsls	r3, r3, #15
    693a:	099b      	lsrs	r3, r3, #6
    693c:	6003      	str	r3, [r0, #0]
    693e:	4b56      	ldr	r3, [pc, #344]	; (6a98 <getTrngSource+0x2b4>)
    6940:	a805      	add	r0, sp, #20
    6942:	601a      	str	r2, [r3, #0]
    6944:	9904      	ldr	r1, [sp, #16]
    6946:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
    694a:	020b      	lsls	r3, r1, #8
    694c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    6950:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    6954:	4313      	orrs	r3, r2
    6956:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
    695a:	f000 fbcb 	bl	70f4 <LLF_RND_WaitRngInterrupt>
    695e:	9b05      	ldr	r3, [sp, #20]
    6960:	f003 031a 	and.w	r3, r3, #26
    6964:	4303      	orrs	r3, r0
    6966:	d138      	bne.n	69da <getTrngSource+0x1f6>
    6968:	4b50      	ldr	r3, [pc, #320]	; (6aac <getTrngSource+0x2c8>)
    696a:	fba7 2705 	umull	r2, r7, r7, r5
    696e:	681a      	ldr	r2, [r3, #0]
    6970:	3314      	adds	r3, #20
    6972:	9206      	str	r2, [sp, #24]
    6974:	f853 2c10 	ldr.w	r2, [r3, #-16]
    6978:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
    697c:	9207      	str	r2, [sp, #28]
    697e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    6982:	9208      	str	r2, [sp, #32]
    6984:	f853 2c08 	ldr.w	r2, [r3, #-8]
    6988:	9209      	str	r2, [sp, #36]	; 0x24
    698a:	f853 2c04 	ldr.w	r2, [r3, #-4]
    698e:	920a      	str	r2, [sp, #40]	; 0x28
    6990:	681b      	ldr	r3, [r3, #0]
    6992:	930b      	str	r3, [sp, #44]	; 0x2c
    6994:	d102      	bne.n	699c <getTrngSource+0x1b8>
    6996:	f1ba 0f00 	cmp.w	sl, #0
    699a:	d141      	bne.n	6a20 <getTrngSource+0x23c>
    699c:	2218      	movs	r2, #24
    699e:	4630      	mov	r0, r6
    69a0:	eb0d 0102 	add.w	r1, sp, r2
    69a4:	f000 fb16 	bl	6fd4 <CC_PalMemCopyPlat>
    69a8:	3d18      	subs	r5, #24
    69aa:	3618      	adds	r6, #24
    69ac:	f109 0901 	add.w	r9, r9, #1
    69b0:	2d00      	cmp	r5, #0
    69b2:	f47f af4f 	bne.w	6854 <getTrngSource+0x70>
    69b6:	f5bb 7f04 	cmp.w	fp, #528	; 0x210
    69ba:	d85d      	bhi.n	6a78 <getTrngSource+0x294>
    69bc:	9d03      	ldr	r5, [sp, #12]
    69be:	4659      	mov	r1, fp
    69c0:	4628      	mov	r0, r5
    69c2:	6962      	ldr	r2, [r4, #20]
    69c4:	f7ff fe7c 	bl	66c0 <LLF_RND_RepetitionCounterTest.part.0>
    69c8:	2800      	cmp	r0, #0
    69ca:	d04b      	beq.n	6a64 <getTrngSource+0x280>
    69cc:	2300      	movs	r3, #0
    69ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
    69d0:	6013      	str	r3, [r2, #0]
    69d2:	4b2e      	ldr	r3, [pc, #184]	; (6a8c <getTrngSource+0x2a8>)
    69d4:	4298      	cmp	r0, r3
    69d6:	f43f af55 	beq.w	6884 <getTrngSource+0xa0>
    69da:	9d04      	ldr	r5, [sp, #16]
    69dc:	2d08      	cmp	r5, #8
    69de:	d034      	beq.n	6a4a <getTrngSource+0x266>
    69e0:	2200      	movs	r2, #0
    69e2:	ab04      	add	r3, sp, #16
    69e4:	4621      	mov	r1, r4
    69e6:	4640      	mov	r0, r8
    69e8:	006d      	lsls	r5, r5, #1
    69ea:	9200      	str	r2, [sp, #0]
    69ec:	9504      	str	r5, [sp, #16]
    69ee:	f7ff fdbb 	bl	6568 <startTrngHW>
    69f2:	4b2f      	ldr	r3, [pc, #188]	; (6ab0 <getTrngSource+0x2cc>)
    69f4:	4298      	cmp	r0, r3
    69f6:	d024      	beq.n	6a42 <getTrngSource+0x25e>
    69f8:	2800      	cmp	r0, #0
    69fa:	f47f af43 	bne.w	6884 <getTrngSource+0xa0>
    69fe:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
    6a02:	0a13      	lsrs	r3, r2, #8
    6a04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    6a08:	4313      	orrs	r3, r2
    6a0a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    6a0e:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
    6a12:	9b02      	ldr	r3, [sp, #8]
    6a14:	3b01      	subs	r3, #1
    6a16:	9302      	str	r3, [sp, #8]
    6a18:	f47f af11 	bne.w	683e <getTrngSource+0x5a>
    6a1c:	2000      	movs	r0, #0
    6a1e:	e731      	b.n	6884 <getTrngSource+0xa0>
    6a20:	4630      	mov	r0, r6
    6a22:	4652      	mov	r2, sl
    6a24:	a906      	add	r1, sp, #24
    6a26:	f000 fad5 	bl	6fd4 <CC_PalMemCopyPlat>
    6a2a:	eba5 050a 	sub.w	r5, r5, sl
    6a2e:	4456      	add	r6, sl
    6a30:	e7bc      	b.n	69ac <getTrngSource+0x1c8>
    6a32:	481f      	ldr	r0, [pc, #124]	; (6ab0 <getTrngSource+0x2cc>)
    6a34:	e722      	b.n	687c <getTrngSource+0x98>
    6a36:	481f      	ldr	r0, [pc, #124]	; (6ab4 <getTrngSource+0x2d0>)
    6a38:	e720      	b.n	687c <getTrngSource+0x98>
    6a3a:	2703      	movs	r7, #3
    6a3c:	e748      	b.n	68d0 <getTrngSource+0xec>
    6a3e:	2702      	movs	r7, #2
    6a40:	e746      	b.n	68d0 <getTrngSource+0xec>
    6a42:	6a23      	ldr	r3, [r4, #32]
    6a44:	2b00      	cmp	r3, #0
    6a46:	f43f af1d 	beq.w	6884 <getTrngSource+0xa0>
    6a4a:	481b      	ldr	r0, [pc, #108]	; (6ab8 <getTrngSource+0x2d4>)
    6a4c:	e71a      	b.n	6884 <getTrngSource+0xa0>
    6a4e:	2201      	movs	r2, #1
    6a50:	4621      	mov	r1, r4
    6a52:	4638      	mov	r0, r7
    6a54:	9600      	str	r6, [sp, #0]
    6a56:	ab04      	add	r3, sp, #16
    6a58:	f7ff fd86 	bl	6568 <startTrngHW>
    6a5c:	2800      	cmp	r0, #0
    6a5e:	f43f aedf 	beq.w	6820 <getTrngSource+0x3c>
    6a62:	e70f      	b.n	6884 <getTrngSource+0xa0>
    6a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
    6a68:	4659      	mov	r1, fp
    6a6a:	4628      	mov	r0, r5
    6a6c:	69a2      	ldr	r2, [r4, #24]
    6a6e:	f7ff fe53 	bl	6718 <LLF_RND_AdaptiveProportionTest>
    6a72:	2800      	cmp	r0, #0
    6a74:	d1aa      	bne.n	69cc <getTrngSource+0x1e8>
    6a76:	e7d1      	b.n	6a1c <getTrngSource+0x238>
    6a78:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6a7a:	601d      	str	r5, [r3, #0]
    6a7c:	e7ad      	b.n	69da <getTrngSource+0x1f6>
    6a7e:	bf00      	nop
    6a80:	50841138 	.word	0x50841138
    6a84:	50841130 	.word	0x50841130
    6a88:	aaaaaaab 	.word	0xaaaaaaab
    6a8c:	00f10c02 	.word	0x00f10c02
    6a90:	00f10c30 	.word	0x00f10c30
    6a94:	508411c4 	.word	0x508411c4
    6a98:	5084112c 	.word	0x5084112c
    6a9c:	50841100 	.word	0x50841100
    6aa0:	5084110c 	.word	0x5084110c
    6aa4:	50841a04 	.word	0x50841a04
    6aa8:	508411d8 	.word	0x508411d8
    6aac:	50841114 	.word	0x50841114
    6ab0:	00f10c31 	.word	0x00f10c31
    6ab4:	00f10c35 	.word	0x00f10c35
    6ab8:	00f10c32 	.word	0x00f10c32

00006abc <LLF_RND_GetTrngSource>:
    6abc:	2300      	movs	r3, #0
    6abe:	b430      	push	{r4, r5}
    6ac0:	e9dd 4503 	ldrd	r4, r5, [sp, #12]
    6ac4:	9304      	str	r3, [sp, #16]
    6ac6:	9b02      	ldr	r3, [sp, #8]
    6ac8:	e9cd 4502 	strd	r4, r5, [sp, #8]
    6acc:	bc30      	pop	{r4, r5}
    6ace:	f7ff be89 	b.w	67e4 <getTrngSource>
    6ad2:	bf00      	nop

00006ad4 <LLF_RND_RunTrngStartupTest>:
    6ad4:	b510      	push	{r4, lr}
    6ad6:	2401      	movs	r4, #1
    6ad8:	b086      	sub	sp, #24
    6ada:	ab05      	add	r3, sp, #20
    6adc:	e9cd 2401 	strd	r2, r4, [sp, #4]
    6ae0:	9300      	str	r3, [sp, #0]
    6ae2:	2200      	movs	r2, #0
    6ae4:	ab04      	add	r3, sp, #16
    6ae6:	f7ff fe7d 	bl	67e4 <getTrngSource>
    6aea:	b006      	add	sp, #24
    6aec:	bd10      	pop	{r4, pc}
    6aee:	bf00      	nop

00006af0 <mbedtls_hardware_poll>:
    6af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6af4:	b088      	sub	sp, #32
    6af6:	9205      	str	r2, [sp, #20]
    6af8:	2900      	cmp	r1, #0
    6afa:	d068      	beq.n	6bce <mbedtls_hardware_poll+0xde>
    6afc:	461c      	mov	r4, r3
    6afe:	2b00      	cmp	r3, #0
    6b00:	d065      	beq.n	6bce <mbedtls_hardware_poll+0xde>
    6b02:	4615      	mov	r5, r2
    6b04:	2a00      	cmp	r2, #0
    6b06:	d062      	beq.n	6bce <mbedtls_hardware_poll+0xde>
    6b08:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 6bf0 <mbedtls_hardware_poll+0x100>
    6b0c:	460e      	mov	r6, r1
    6b0e:	f8d8 0000 	ldr.w	r0, [r8]
    6b12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6b16:	f7ff fca3 	bl	6460 <CC_PalMutexLock>
    6b1a:	2800      	cmp	r0, #0
    6b1c:	d14c      	bne.n	6bb8 <mbedtls_hardware_poll+0xc8>
    6b1e:	2000      	movs	r0, #0
    6b20:	f7ff fcce 	bl	64c0 <CC_PalPowerSaveModeSelect>
    6b24:	2800      	cmp	r0, #0
    6b26:	d143      	bne.n	6bb0 <mbedtls_hardware_poll+0xc0>
    6b28:	482a      	ldr	r0, [pc, #168]	; (6bd4 <mbedtls_hardware_poll+0xe4>)
    6b2a:	f000 fa15 	bl	6f58 <RNG_PLAT_SetUserRngParameters>
    6b2e:	b1e8      	cbz	r0, 6b6c <mbedtls_hardware_poll+0x7c>
    6b30:	2001      	movs	r0, #1
    6b32:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    6b36:	f7ff fcc3 	bl	64c0 <CC_PalPowerSaveModeSelect>
    6b3a:	2800      	cmp	r0, #0
    6b3c:	d134      	bne.n	6ba8 <mbedtls_hardware_poll+0xb8>
    6b3e:	f44f 7108 	mov.w	r1, #544	; 0x220
    6b42:	4825      	ldr	r0, [pc, #148]	; (6bd8 <mbedtls_hardware_poll+0xe8>)
    6b44:	f7fe fe44 	bl	57d0 <mbedtls_zeroize_internal>
    6b48:	21dc      	movs	r1, #220	; 0xdc
    6b4a:	4824      	ldr	r0, [pc, #144]	; (6bdc <mbedtls_hardware_poll+0xec>)
    6b4c:	f7fe fe40 	bl	57d0 <mbedtls_zeroize_internal>
    6b50:	4820      	ldr	r0, [pc, #128]	; (6bd4 <mbedtls_hardware_poll+0xe4>)
    6b52:	2128      	movs	r1, #40	; 0x28
    6b54:	f7fe fe3c 	bl	57d0 <mbedtls_zeroize_internal>
    6b58:	f8d8 0000 	ldr.w	r0, [r8]
    6b5c:	f7ff fc88 	bl	6470 <CC_PalMutexUnlock>
    6b60:	2800      	cmp	r0, #0
    6b62:	d12d      	bne.n	6bc0 <mbedtls_hardware_poll+0xd0>
    6b64:	4638      	mov	r0, r7
    6b66:	b008      	add	sp, #32
    6b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b6c:	491a      	ldr	r1, [pc, #104]	; (6bd8 <mbedtls_hardware_poll+0xe8>)
    6b6e:	ab07      	add	r3, sp, #28
    6b70:	4602      	mov	r2, r0
    6b72:	9003      	str	r0, [sp, #12]
    6b74:	9102      	str	r1, [sp, #8]
    6b76:	9300      	str	r3, [sp, #0]
    6b78:	4916      	ldr	r1, [pc, #88]	; (6bd4 <mbedtls_hardware_poll+0xe4>)
    6b7a:	4818      	ldr	r0, [pc, #96]	; (6bdc <mbedtls_hardware_poll+0xec>)
    6b7c:	9401      	str	r4, [sp, #4]
    6b7e:	ab05      	add	r3, sp, #20
    6b80:	f7ff ff9c 	bl	6abc <LLF_RND_GetTrngSource>
    6b84:	2800      	cmp	r0, #0
    6b86:	d1d3      	bne.n	6b30 <mbedtls_hardware_poll+0x40>
    6b88:	6823      	ldr	r3, [r4, #0]
    6b8a:	42ab      	cmp	r3, r5
    6b8c:	d3d0      	bcc.n	6b30 <mbedtls_hardware_poll+0x40>
    6b8e:	9907      	ldr	r1, [sp, #28]
    6b90:	4607      	mov	r7, r0
    6b92:	462a      	mov	r2, r5
    6b94:	4630      	mov	r0, r6
    6b96:	3108      	adds	r1, #8
    6b98:	f000 fa1c 	bl	6fd4 <CC_PalMemCopyPlat>
    6b9c:	2001      	movs	r0, #1
    6b9e:	6025      	str	r5, [r4, #0]
    6ba0:	f7ff fc8e 	bl	64c0 <CC_PalPowerSaveModeSelect>
    6ba4:	2800      	cmp	r0, #0
    6ba6:	d0ca      	beq.n	6b3e <mbedtls_hardware_poll+0x4e>
    6ba8:	480d      	ldr	r0, [pc, #52]	; (6be0 <mbedtls_hardware_poll+0xf0>)
    6baa:	f7fe fd0f 	bl	55cc <CC_PalAbort>
    6bae:	e7c6      	b.n	6b3e <mbedtls_hardware_poll+0x4e>
    6bb0:	480c      	ldr	r0, [pc, #48]	; (6be4 <mbedtls_hardware_poll+0xf4>)
    6bb2:	f7fe fd0b 	bl	55cc <CC_PalAbort>
    6bb6:	e7b7      	b.n	6b28 <mbedtls_hardware_poll+0x38>
    6bb8:	480b      	ldr	r0, [pc, #44]	; (6be8 <mbedtls_hardware_poll+0xf8>)
    6bba:	f7fe fd07 	bl	55cc <CC_PalAbort>
    6bbe:	e7ae      	b.n	6b1e <mbedtls_hardware_poll+0x2e>
    6bc0:	480a      	ldr	r0, [pc, #40]	; (6bec <mbedtls_hardware_poll+0xfc>)
    6bc2:	f7fe fd03 	bl	55cc <CC_PalAbort>
    6bc6:	4638      	mov	r0, r7
    6bc8:	b008      	add	sp, #32
    6bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6bce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    6bd2:	e7c7      	b.n	6b64 <mbedtls_hardware_poll+0x74>
    6bd4:	200012fc 	.word	0x200012fc
    6bd8:	200010dc 	.word	0x200010dc
    6bdc:	20001000 	.word	0x20001000
    6be0:	00008c30 	.word	0x00008c30
    6be4:	00008c10 	.word	0x00008c10
    6be8:	00008bf8 	.word	0x00008bf8
    6bec:	00008c88 	.word	0x00008c88
    6bf0:	200000ec 	.word	0x200000ec

00006bf4 <cc_mbedtls_aes_init>:
    6bf4:	b510      	push	{r4, lr}
    6bf6:	4604      	mov	r4, r0
    6bf8:	b130      	cbz	r0, 6c08 <cc_mbedtls_aes_init+0x14>
    6bfa:	2200      	movs	r2, #0
    6bfc:	2301      	movs	r3, #1
    6bfe:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
    6c02:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
    6c06:	bd10      	pop	{r4, pc}
    6c08:	4801      	ldr	r0, [pc, #4]	; (6c10 <cc_mbedtls_aes_init+0x1c>)
    6c0a:	f7fe fcdf 	bl	55cc <CC_PalAbort>
    6c0e:	e7f4      	b.n	6bfa <cc_mbedtls_aes_init+0x6>
    6c10:	00008ca0 	.word	0x00008ca0

00006c14 <cc_mbedtls_aes_free>:
    6c14:	b118      	cbz	r0, 6c1e <cc_mbedtls_aes_free+0xa>
    6c16:	2274      	movs	r2, #116	; 0x74
    6c18:	2100      	movs	r1, #0
    6c1a:	f000 b9dd 	b.w	6fd8 <CC_PalMemSetPlat>
    6c1e:	4770      	bx	lr

00006c20 <cc_mbedtls_aes_setkey_enc>:
    6c20:	b188      	cbz	r0, 6c46 <cc_mbedtls_aes_setkey_enc+0x26>
    6c22:	b199      	cbz	r1, 6c4c <cc_mbedtls_aes_setkey_enc+0x2c>
    6c24:	b510      	push	{r4, lr}
    6c26:	2400      	movs	r4, #0
    6c28:	2a80      	cmp	r2, #128	; 0x80
    6c2a:	6384      	str	r4, [r0, #56]	; 0x38
    6c2c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    6c30:	d106      	bne.n	6c40 <cc_mbedtls_aes_setkey_enc+0x20>
    6c32:	6304      	str	r4, [r0, #48]	; 0x30
    6c34:	2210      	movs	r2, #16
    6c36:	3010      	adds	r0, #16
    6c38:	f000 f9cc 	bl	6fd4 <CC_PalMemCopyPlat>
    6c3c:	4620      	mov	r0, r4
    6c3e:	bd10      	pop	{r4, pc}
    6c40:	f06f 001f 	mvn.w	r0, #31
    6c44:	bd10      	pop	{r4, pc}
    6c46:	f06f 0021 	mvn.w	r0, #33	; 0x21
    6c4a:	4770      	bx	lr
    6c4c:	f06f 001f 	mvn.w	r0, #31
    6c50:	4770      	bx	lr
    6c52:	bf00      	nop

00006c54 <cc_mbedtls_aes_crypt_ecb>:
    6c54:	b328      	cbz	r0, 6ca2 <cc_mbedtls_aes_crypt_ecb+0x4e>
    6c56:	b322      	cbz	r2, 6ca2 <cc_mbedtls_aes_crypt_ecb+0x4e>
    6c58:	b31b      	cbz	r3, 6ca2 <cc_mbedtls_aes_crypt_ecb+0x4e>
    6c5a:	2901      	cmp	r1, #1
    6c5c:	d821      	bhi.n	6ca2 <cc_mbedtls_aes_crypt_ecb+0x4e>
    6c5e:	b570      	push	{r4, r5, r6, lr}
    6c60:	4604      	mov	r4, r0
    6c62:	6b81      	ldr	r1, [r0, #56]	; 0x38
    6c64:	b086      	sub	sp, #24
    6c66:	d017      	beq.n	6c98 <cc_mbedtls_aes_crypt_ecb+0x44>
    6c68:	2901      	cmp	r1, #1
    6c6a:	d117      	bne.n	6c9c <cc_mbedtls_aes_crypt_ecb+0x48>
    6c6c:	2510      	movs	r5, #16
    6c6e:	2100      	movs	r1, #0
    6c70:	eb0d 0605 	add.w	r6, sp, r5
    6c74:	6361      	str	r1, [r4, #52]	; 0x34
    6c76:	4610      	mov	r0, r2
    6c78:	4629      	mov	r1, r5
    6c7a:	9500      	str	r5, [sp, #0]
    6c7c:	aa02      	add	r2, sp, #8
    6c7e:	9601      	str	r6, [sp, #4]
    6c80:	f000 fa84 	bl	718c <SetDataBuffersInfo>
    6c84:	b950      	cbnz	r0, 6c9c <cc_mbedtls_aes_crypt_ecb+0x48>
    6c86:	462b      	mov	r3, r5
    6c88:	4632      	mov	r2, r6
    6c8a:	4620      	mov	r0, r4
    6c8c:	a902      	add	r1, sp, #8
    6c8e:	f000 fd37 	bl	7700 <ProcessAesDrv>
    6c92:	b918      	cbnz	r0, 6c9c <cc_mbedtls_aes_crypt_ecb+0x48>
    6c94:	b006      	add	sp, #24
    6c96:	bd70      	pop	{r4, r5, r6, pc}
    6c98:	2900      	cmp	r1, #0
    6c9a:	d0e7      	beq.n	6c6c <cc_mbedtls_aes_crypt_ecb+0x18>
    6c9c:	f06f 0021 	mvn.w	r0, #33	; 0x21
    6ca0:	e7f8      	b.n	6c94 <cc_mbedtls_aes_crypt_ecb+0x40>
    6ca2:	f06f 0021 	mvn.w	r0, #33	; 0x21
    6ca6:	4770      	bx	lr

00006ca8 <cc_mbedtls_sha256_init>:
    6ca8:	b510      	push	{r4, lr}
    6caa:	4604      	mov	r4, r0
    6cac:	b128      	cbz	r0, 6cba <cc_mbedtls_sha256_init+0x12>
    6cae:	4620      	mov	r0, r4
    6cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6cb4:	21f0      	movs	r1, #240	; 0xf0
    6cb6:	f000 b991 	b.w	6fdc <CC_PalMemSetZeroPlat>
    6cba:	4804      	ldr	r0, [pc, #16]	; (6ccc <cc_mbedtls_sha256_init+0x24>)
    6cbc:	f7fe fc86 	bl	55cc <CC_PalAbort>
    6cc0:	4620      	mov	r0, r4
    6cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6cc6:	21f0      	movs	r1, #240	; 0xf0
    6cc8:	f000 b988 	b.w	6fdc <CC_PalMemSetZeroPlat>
    6ccc:	00008cb4 	.word	0x00008cb4

00006cd0 <cc_mbedtls_sha256_free>:
    6cd0:	b110      	cbz	r0, 6cd8 <cc_mbedtls_sha256_free+0x8>
    6cd2:	21f0      	movs	r1, #240	; 0xf0
    6cd4:	f7fe bd7c 	b.w	57d0 <mbedtls_zeroize_internal>
    6cd8:	4770      	bx	lr
    6cda:	bf00      	nop

00006cdc <cc_mbedtls_sha256_starts>:
    6cdc:	b508      	push	{r3, lr}
    6cde:	b161      	cbz	r1, 6cfa <cc_mbedtls_sha256_starts+0x1e>
    6ce0:	2901      	cmp	r1, #1
    6ce2:	d107      	bne.n	6cf4 <cc_mbedtls_sha256_starts+0x18>
    6ce4:	2102      	movs	r1, #2
    6ce6:	f000 f85b 	bl	6da0 <mbedtls_sha_starts_internal>
    6cea:	2800      	cmp	r0, #0
    6cec:	bf18      	it	ne
    6cee:	f06f 0036 	mvnne.w	r0, #54	; 0x36
    6cf2:	bd08      	pop	{r3, pc}
    6cf4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    6cf8:	bd08      	pop	{r3, pc}
    6cfa:	2101      	movs	r1, #1
    6cfc:	f000 f850 	bl	6da0 <mbedtls_sha_starts_internal>
    6d00:	e7f3      	b.n	6cea <cc_mbedtls_sha256_starts+0xe>
    6d02:	bf00      	nop

00006d04 <cc_mbedtls_sha256_update>:
    6d04:	b570      	push	{r4, r5, r6, lr}
    6d06:	188e      	adds	r6, r1, r2
    6d08:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
    6d0c:	460b      	mov	r3, r1
    6d0e:	4614      	mov	r4, r2
    6d10:	4605      	mov	r5, r0
    6d12:	b0a0      	sub	sp, #128	; 0x80
    6d14:	d801      	bhi.n	6d1a <cc_mbedtls_sha256_update+0x16>
    6d16:	2a80      	cmp	r2, #128	; 0x80
    6d18:	d90c      	bls.n	6d34 <cc_mbedtls_sha256_update+0x30>
    6d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    6d1e:	d917      	bls.n	6d50 <cc_mbedtls_sha256_update+0x4c>
    6d20:	4622      	mov	r2, r4
    6d22:	4619      	mov	r1, r3
    6d24:	4628      	mov	r0, r5
    6d26:	f000 f87d 	bl	6e24 <mbedtls_sha_update_internal>
    6d2a:	4604      	mov	r4, r0
    6d2c:	b984      	cbnz	r4, 6d50 <cc_mbedtls_sha256_update+0x4c>
    6d2e:	4620      	mov	r0, r4
    6d30:	b020      	add	sp, #128	; 0x80
    6d32:	bd70      	pop	{r4, r5, r6, pc}
    6d34:	4668      	mov	r0, sp
    6d36:	f000 f94d 	bl	6fd4 <CC_PalMemCopyPlat>
    6d3a:	4622      	mov	r2, r4
    6d3c:	4669      	mov	r1, sp
    6d3e:	4628      	mov	r0, r5
    6d40:	f000 f870 	bl	6e24 <mbedtls_sha_update_internal>
    6d44:	2180      	movs	r1, #128	; 0x80
    6d46:	4604      	mov	r4, r0
    6d48:	4668      	mov	r0, sp
    6d4a:	f000 f947 	bl	6fdc <CC_PalMemSetZeroPlat>
    6d4e:	e7ed      	b.n	6d2c <cc_mbedtls_sha256_update+0x28>
    6d50:	f06f 0436 	mvn.w	r4, #54	; 0x36
    6d54:	e7eb      	b.n	6d2e <cc_mbedtls_sha256_update+0x2a>
    6d56:	bf00      	nop

00006d58 <cc_mbedtls_sha256_finish>:
    6d58:	b570      	push	{r4, r5, r6, lr}
    6d5a:	b1e8      	cbz	r0, 6d98 <cc_mbedtls_sha256_finish+0x40>
    6d5c:	460e      	mov	r6, r1
    6d5e:	b1d9      	cbz	r1, 6d98 <cc_mbedtls_sha256_finish+0x40>
    6d60:	4604      	mov	r4, r0
    6d62:	f000 f831 	bl	6dc8 <mbedtls_sha_finish_internal>
    6d66:	4605      	mov	r5, r0
    6d68:	b9b0      	cbnz	r0, 6d98 <cc_mbedtls_sha256_finish+0x40>
    6d6a:	6823      	ldr	r3, [r4, #0]
    6d6c:	2b01      	cmp	r3, #1
    6d6e:	d00b      	beq.n	6d88 <cc_mbedtls_sha256_finish+0x30>
    6d70:	2b02      	cmp	r3, #2
    6d72:	d001      	beq.n	6d78 <cc_mbedtls_sha256_finish+0x20>
    6d74:	4628      	mov	r0, r5
    6d76:	bd70      	pop	{r4, r5, r6, pc}
    6d78:	4630      	mov	r0, r6
    6d7a:	221c      	movs	r2, #28
    6d7c:	f104 0108 	add.w	r1, r4, #8
    6d80:	f000 f928 	bl	6fd4 <CC_PalMemCopyPlat>
    6d84:	4628      	mov	r0, r5
    6d86:	bd70      	pop	{r4, r5, r6, pc}
    6d88:	4630      	mov	r0, r6
    6d8a:	2220      	movs	r2, #32
    6d8c:	f104 0108 	add.w	r1, r4, #8
    6d90:	f000 f920 	bl	6fd4 <CC_PalMemCopyPlat>
    6d94:	4628      	mov	r0, r5
    6d96:	bd70      	pop	{r4, r5, r6, pc}
    6d98:	f06f 0536 	mvn.w	r5, #54	; 0x36
    6d9c:	e7ea      	b.n	6d74 <cc_mbedtls_sha256_finish+0x1c>
    6d9e:	bf00      	nop

00006da0 <mbedtls_sha_starts_internal>:
    6da0:	b178      	cbz	r0, 6dc2 <mbedtls_sha_starts_internal+0x22>
    6da2:	b538      	push	{r3, r4, r5, lr}
    6da4:	460d      	mov	r5, r1
    6da6:	21f0      	movs	r1, #240	; 0xf0
    6da8:	4604      	mov	r4, r0
    6daa:	f000 f917 	bl	6fdc <CC_PalMemSetZeroPlat>
    6dae:	2340      	movs	r3, #64	; 0x40
    6db0:	4620      	mov	r0, r4
    6db2:	6025      	str	r5, [r4, #0]
    6db4:	65e3      	str	r3, [r4, #92]	; 0x5c
    6db6:	f000 fa21 	bl	71fc <InitHashDrv>
    6dba:	3800      	subs	r0, #0
    6dbc:	bf18      	it	ne
    6dbe:	2001      	movne	r0, #1
    6dc0:	bd38      	pop	{r3, r4, r5, pc}
    6dc2:	2001      	movs	r0, #1
    6dc4:	4770      	bx	lr
    6dc6:	bf00      	nop

00006dc8 <mbedtls_sha_finish_internal>:
    6dc8:	b570      	push	{r4, r5, r6, lr}
    6dca:	6e05      	ldr	r5, [r0, #96]	; 0x60
    6dcc:	b0a4      	sub	sp, #144	; 0x90
    6dce:	4604      	mov	r4, r0
    6dd0:	ae04      	add	r6, sp, #16
    6dd2:	b9e5      	cbnz	r5, 6e0e <mbedtls_sha_finish_internal+0x46>
    6dd4:	2201      	movs	r2, #1
    6dd6:	2300      	movs	r3, #0
    6dd8:	6062      	str	r2, [r4, #4]
    6dda:	4630      	mov	r0, r6
    6ddc:	4629      	mov	r1, r5
    6dde:	e9cd 3300 	strd	r3, r3, [sp]
    6de2:	aa02      	add	r2, sp, #8
    6de4:	f000 f9d2 	bl	718c <SetDataBuffersInfo>
    6de8:	b110      	cbz	r0, 6df0 <mbedtls_sha_finish_internal+0x28>
    6dea:	2001      	movs	r0, #1
    6dec:	b024      	add	sp, #144	; 0x90
    6dee:	bd70      	pop	{r4, r5, r6, pc}
    6df0:	462a      	mov	r2, r5
    6df2:	4620      	mov	r0, r4
    6df4:	a902      	add	r1, sp, #8
    6df6:	f000 fa2b 	bl	7250 <ProcessHashDrv>
    6dfa:	2800      	cmp	r0, #0
    6dfc:	d1f5      	bne.n	6dea <mbedtls_sha_finish_internal+0x22>
    6dfe:	4620      	mov	r0, r4
    6e00:	f000 fb50 	bl	74a4 <FinishHashDrv>
    6e04:	2800      	cmp	r0, #0
    6e06:	d1f0      	bne.n	6dea <mbedtls_sha_finish_internal+0x22>
    6e08:	6620      	str	r0, [r4, #96]	; 0x60
    6e0a:	b024      	add	sp, #144	; 0x90
    6e0c:	bd70      	pop	{r4, r5, r6, pc}
    6e0e:	2d80      	cmp	r5, #128	; 0x80
    6e10:	462a      	mov	r2, r5
    6e12:	4630      	mov	r0, r6
    6e14:	bf28      	it	cs
    6e16:	2280      	movcs	r2, #128	; 0x80
    6e18:	f104 0164 	add.w	r1, r4, #100	; 0x64
    6e1c:	f000 f8da 	bl	6fd4 <CC_PalMemCopyPlat>
    6e20:	6e25      	ldr	r5, [r4, #96]	; 0x60
    6e22:	e7d7      	b.n	6dd4 <mbedtls_sha_finish_internal+0xc>

00006e24 <mbedtls_sha_update_internal>:
    6e24:	2800      	cmp	r0, #0
    6e26:	d055      	beq.n	6ed4 <mbedtls_sha_update_internal+0xb0>
    6e28:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e2a:	4615      	mov	r5, r2
    6e2c:	b0a5      	sub	sp, #148	; 0x94
    6e2e:	b1b2      	cbz	r2, 6e5e <mbedtls_sha_update_internal+0x3a>
    6e30:	460e      	mov	r6, r1
    6e32:	b351      	cbz	r1, 6e8a <mbedtls_sha_update_internal+0x66>
    6e34:	4604      	mov	r4, r0
    6e36:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
    6e3a:	1a1a      	subs	r2, r3, r0
    6e3c:	fbb2 f7f3 	udiv	r7, r2, r3
    6e40:	fb03 2717 	mls	r7, r3, r7, r2
    6e44:	42af      	cmp	r7, r5
    6e46:	bf28      	it	cs
    6e48:	462f      	movcs	r7, r5
    6e4a:	2f00      	cmp	r7, #0
    6e4c:	d144      	bne.n	6ed8 <mbedtls_sha_update_internal+0xb4>
    6e4e:	4283      	cmp	r3, r0
    6e50:	d008      	beq.n	6e64 <mbedtls_sha_update_internal+0x40>
    6e52:	fbb5 f7f3 	udiv	r7, r5, r3
    6e56:	fb03 f707 	mul.w	r7, r3, r7
    6e5a:	b9cf      	cbnz	r7, 6e90 <mbedtls_sha_update_internal+0x6c>
    6e5c:	bb6d      	cbnz	r5, 6eba <mbedtls_sha_update_internal+0x96>
    6e5e:	4628      	mov	r0, r5
    6e60:	b025      	add	sp, #148	; 0x94
    6e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e64:	2b80      	cmp	r3, #128	; 0x80
    6e66:	bf28      	it	cs
    6e68:	2380      	movcs	r3, #128	; 0x80
    6e6a:	f104 0164 	add.w	r1, r4, #100	; 0x64
    6e6e:	461a      	mov	r2, r3
    6e70:	a804      	add	r0, sp, #16
    6e72:	f000 f8af 	bl	6fd4 <CC_PalMemCopyPlat>
    6e76:	2300      	movs	r3, #0
    6e78:	e9cd 3300 	strd	r3, r3, [sp]
    6e7c:	a804      	add	r0, sp, #16
    6e7e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    6e80:	aa02      	add	r2, sp, #8
    6e82:	f000 f983 	bl	718c <SetDataBuffersInfo>
    6e86:	2800      	cmp	r0, #0
    6e88:	d033      	beq.n	6ef2 <mbedtls_sha_update_internal+0xce>
    6e8a:	2001      	movs	r0, #1
    6e8c:	b025      	add	sp, #148	; 0x94
    6e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e90:	2300      	movs	r3, #0
    6e92:	4639      	mov	r1, r7
    6e94:	4630      	mov	r0, r6
    6e96:	e9cd 3300 	strd	r3, r3, [sp]
    6e9a:	aa02      	add	r2, sp, #8
    6e9c:	f000 f976 	bl	718c <SetDataBuffersInfo>
    6ea0:	2800      	cmp	r0, #0
    6ea2:	d1f2      	bne.n	6e8a <mbedtls_sha_update_internal+0x66>
    6ea4:	463a      	mov	r2, r7
    6ea6:	4620      	mov	r0, r4
    6ea8:	a902      	add	r1, sp, #8
    6eaa:	f000 f9d1 	bl	7250 <ProcessHashDrv>
    6eae:	2800      	cmp	r0, #0
    6eb0:	d1eb      	bne.n	6e8a <mbedtls_sha_update_internal+0x66>
    6eb2:	1bed      	subs	r5, r5, r7
    6eb4:	443e      	add	r6, r7
    6eb6:	2d00      	cmp	r5, #0
    6eb8:	d0d1      	beq.n	6e5e <mbedtls_sha_update_internal+0x3a>
    6eba:	6e20      	ldr	r0, [r4, #96]	; 0x60
    6ebc:	462a      	mov	r2, r5
    6ebe:	3019      	adds	r0, #25
    6ec0:	4631      	mov	r1, r6
    6ec2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    6ec6:	f000 f885 	bl	6fd4 <CC_PalMemCopyPlat>
    6eca:	6e22      	ldr	r2, [r4, #96]	; 0x60
    6ecc:	2000      	movs	r0, #0
    6ece:	442a      	add	r2, r5
    6ed0:	6622      	str	r2, [r4, #96]	; 0x60
    6ed2:	e7c5      	b.n	6e60 <mbedtls_sha_update_internal+0x3c>
    6ed4:	2001      	movs	r0, #1
    6ed6:	4770      	bx	lr
    6ed8:	f104 0364 	add.w	r3, r4, #100	; 0x64
    6edc:	4418      	add	r0, r3
    6ede:	463a      	mov	r2, r7
    6ee0:	f000 f878 	bl	6fd4 <CC_PalMemCopyPlat>
    6ee4:	e9d4 3017 	ldrd	r3, r0, [r4, #92]	; 0x5c
    6ee8:	4438      	add	r0, r7
    6eea:	443e      	add	r6, r7
    6eec:	1bed      	subs	r5, r5, r7
    6eee:	6620      	str	r0, [r4, #96]	; 0x60
    6ef0:	e7ad      	b.n	6e4e <mbedtls_sha_update_internal+0x2a>
    6ef2:	4620      	mov	r0, r4
    6ef4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    6ef6:	a902      	add	r1, sp, #8
    6ef8:	f000 f9aa 	bl	7250 <ProcessHashDrv>
    6efc:	2800      	cmp	r0, #0
    6efe:	d1c4      	bne.n	6e8a <mbedtls_sha_update_internal+0x66>
    6f00:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    6f02:	6620      	str	r0, [r4, #96]	; 0x60
    6f04:	e7a5      	b.n	6e52 <mbedtls_sha_update_internal+0x2e>
    6f06:	bf00      	nop

00006f08 <cc_mbedtls_sha256>:
    6f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f0a:	461c      	mov	r4, r3
    6f0c:	4605      	mov	r5, r0
    6f0e:	4811      	ldr	r0, [pc, #68]	; (6f54 <cc_mbedtls_sha256+0x4c>)
    6f10:	460e      	mov	r6, r1
    6f12:	4617      	mov	r7, r2
    6f14:	f7ff fec8 	bl	6ca8 <cc_mbedtls_sha256_init>
    6f18:	4621      	mov	r1, r4
    6f1a:	480e      	ldr	r0, [pc, #56]	; (6f54 <cc_mbedtls_sha256+0x4c>)
    6f1c:	f7ff fede 	bl	6cdc <cc_mbedtls_sha256_starts>
    6f20:	4604      	mov	r4, r0
    6f22:	b120      	cbz	r0, 6f2e <cc_mbedtls_sha256+0x26>
    6f24:	480b      	ldr	r0, [pc, #44]	; (6f54 <cc_mbedtls_sha256+0x4c>)
    6f26:	f7ff fed3 	bl	6cd0 <cc_mbedtls_sha256_free>
    6f2a:	4620      	mov	r0, r4
    6f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f2e:	4632      	mov	r2, r6
    6f30:	4629      	mov	r1, r5
    6f32:	4808      	ldr	r0, [pc, #32]	; (6f54 <cc_mbedtls_sha256+0x4c>)
    6f34:	f7ff fee6 	bl	6d04 <cc_mbedtls_sha256_update>
    6f38:	4604      	mov	r4, r0
    6f3a:	2800      	cmp	r0, #0
    6f3c:	d1f2      	bne.n	6f24 <cc_mbedtls_sha256+0x1c>
    6f3e:	4639      	mov	r1, r7
    6f40:	4804      	ldr	r0, [pc, #16]	; (6f54 <cc_mbedtls_sha256+0x4c>)
    6f42:	f7ff ff09 	bl	6d58 <cc_mbedtls_sha256_finish>
    6f46:	4604      	mov	r4, r0
    6f48:	4802      	ldr	r0, [pc, #8]	; (6f54 <cc_mbedtls_sha256+0x4c>)
    6f4a:	f7ff fec1 	bl	6cd0 <cc_mbedtls_sha256_free>
    6f4e:	4620      	mov	r0, r4
    6f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f52:	bf00      	nop
    6f54:	20001324 	.word	0x20001324

00006f58 <RNG_PLAT_SetUserRngParameters>:
    6f58:	231c      	movs	r3, #28
    6f5a:	b530      	push	{r4, r5, lr}
    6f5c:	b083      	sub	sp, #12
    6f5e:	a901      	add	r1, sp, #4
    6f60:	4604      	mov	r4, r0
    6f62:	9301      	str	r3, [sp, #4]
    6f64:	f000 f83e 	bl	6fe4 <CC_PalTrngParamGet>
    6f68:	4605      	mov	r5, r0
    6f6a:	b938      	cbnz	r0, 6f7c <RNG_PLAT_SetUserRngParameters+0x24>
    6f6c:	9b01      	ldr	r3, [sp, #4]
    6f6e:	2b1c      	cmp	r3, #28
    6f70:	d007      	beq.n	6f82 <RNG_PLAT_SetUserRngParameters+0x2a>
    6f72:	4d16      	ldr	r5, [pc, #88]	; (6fcc <RNG_PLAT_SetUserRngParameters+0x74>)
    6f74:	4620      	mov	r0, r4
    6f76:	211c      	movs	r1, #28
    6f78:	f000 f830 	bl	6fdc <CC_PalMemSetZeroPlat>
    6f7c:	4628      	mov	r0, r5
    6f7e:	b003      	add	sp, #12
    6f80:	bd30      	pop	{r4, r5, pc}
    6f82:	2101      	movs	r1, #1
    6f84:	e9d4 3200 	ldrd	r3, r2, [r4]
    6f88:	3b00      	subs	r3, #0
    6f8a:	bf18      	it	ne
    6f8c:	2301      	movne	r3, #1
    6f8e:	61e1      	str	r1, [r4, #28]
    6f90:	b10a      	cbz	r2, 6f96 <RNG_PLAT_SetUserRngParameters+0x3e>
    6f92:	f043 0302 	orr.w	r3, r3, #2
    6f96:	68a2      	ldr	r2, [r4, #8]
    6f98:	b932      	cbnz	r2, 6fa8 <RNG_PLAT_SetUserRngParameters+0x50>
    6f9a:	68e2      	ldr	r2, [r4, #12]
    6f9c:	b942      	cbnz	r2, 6fb0 <RNG_PLAT_SetUserRngParameters+0x58>
    6f9e:	e9c4 3208 	strd	r3, r2, [r4, #32]
    6fa2:	b98b      	cbnz	r3, 6fc8 <RNG_PLAT_SetUserRngParameters+0x70>
    6fa4:	4d0a      	ldr	r5, [pc, #40]	; (6fd0 <RNG_PLAT_SetUserRngParameters+0x78>)
    6fa6:	e7e5      	b.n	6f74 <RNG_PLAT_SetUserRngParameters+0x1c>
    6fa8:	68e2      	ldr	r2, [r4, #12]
    6faa:	f043 0304 	orr.w	r3, r3, #4
    6fae:	b13a      	cbz	r2, 6fc0 <RNG_PLAT_SetUserRngParameters+0x68>
    6fb0:	2200      	movs	r2, #0
    6fb2:	4628      	mov	r0, r5
    6fb4:	f043 0308 	orr.w	r3, r3, #8
    6fb8:	e9c4 3208 	strd	r3, r2, [r4, #32]
    6fbc:	b003      	add	sp, #12
    6fbe:	bd30      	pop	{r4, r5, pc}
    6fc0:	4615      	mov	r5, r2
    6fc2:	e9c4 3208 	strd	r3, r2, [r4, #32]
    6fc6:	e7d9      	b.n	6f7c <RNG_PLAT_SetUserRngParameters+0x24>
    6fc8:	4615      	mov	r5, r2
    6fca:	e7d7      	b.n	6f7c <RNG_PLAT_SetUserRngParameters+0x24>
    6fcc:	00f00c37 	.word	0x00f00c37
    6fd0:	00f00c0e 	.word	0x00f00c0e

00006fd4 <CC_PalMemCopyPlat>:
    6fd4:	f001 b9c2 	b.w	835c <memmove>

00006fd8 <CC_PalMemSetPlat>:
    6fd8:	f001 b9e2 	b.w	83a0 <memset>

00006fdc <CC_PalMemSetZeroPlat>:
    6fdc:	460a      	mov	r2, r1
    6fde:	2100      	movs	r1, #0
    6fe0:	f001 b9de 	b.w	83a0 <memset>

00006fe4 <CC_PalTrngParamGet>:
    6fe4:	2800      	cmp	r0, #0
    6fe6:	d066      	beq.n	70b6 <CC_PalTrngParamGet+0xd2>
    6fe8:	2900      	cmp	r1, #0
    6fea:	d064      	beq.n	70b6 <CC_PalTrngParamGet+0xd2>
    6fec:	680b      	ldr	r3, [r1, #0]
    6fee:	2b1c      	cmp	r3, #28
    6ff0:	d161      	bne.n	70b6 <CC_PalTrngParamGet+0xd2>
    6ff2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6ff6:	4a3b      	ldr	r2, [pc, #236]	; (70e4 <CC_PalTrngParamGet+0x100>)
    6ff8:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
    6ffc:	4291      	cmp	r1, r2
    6ffe:	d05c      	beq.n	70ba <CC_PalTrngParamGet+0xd6>
    7000:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    7004:	3201      	adds	r2, #1
    7006:	d058      	beq.n	70ba <CC_PalTrngParamGet+0xd6>
    7008:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    700c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7010:	6002      	str	r2, [r0, #0]
    7012:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
    7016:	4a34      	ldr	r2, [pc, #208]	; (70e8 <CC_PalTrngParamGet+0x104>)
    7018:	4291      	cmp	r1, r2
    701a:	d060      	beq.n	70de <CC_PalTrngParamGet+0xfa>
    701c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    7020:	3201      	adds	r2, #1
    7022:	d05c      	beq.n	70de <CC_PalTrngParamGet+0xfa>
    7024:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    7028:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    702c:	6042      	str	r2, [r0, #4]
    702e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    7032:	f512 7f94 	cmn.w	r2, #296	; 0x128
    7036:	d04f      	beq.n	70d8 <CC_PalTrngParamGet+0xf4>
    7038:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    703c:	3201      	adds	r2, #1
    703e:	d04b      	beq.n	70d8 <CC_PalTrngParamGet+0xf4>
    7040:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    7044:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7048:	6082      	str	r2, [r0, #8]
    704a:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
    704e:	4a27      	ldr	r2, [pc, #156]	; (70ec <CC_PalTrngParamGet+0x108>)
    7050:	4291      	cmp	r1, r2
    7052:	d03e      	beq.n	70d2 <CC_PalTrngParamGet+0xee>
    7054:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    7058:	3201      	adds	r2, #1
    705a:	d03a      	beq.n	70d2 <CC_PalTrngParamGet+0xee>
    705c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    7060:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7064:	60c2      	str	r2, [r0, #12]
    7066:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    706a:	3270      	adds	r2, #112	; 0x70
    706c:	d02f      	beq.n	70ce <CC_PalTrngParamGet+0xea>
    706e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    7072:	3201      	adds	r2, #1
    7074:	d02b      	beq.n	70ce <CC_PalTrngParamGet+0xea>
    7076:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    707a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    707e:	6102      	str	r2, [r0, #16]
    7080:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    7084:	32af      	adds	r2, #175	; 0xaf
    7086:	d020      	beq.n	70ca <CC_PalTrngParamGet+0xe6>
    7088:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    708c:	3201      	adds	r2, #1
    708e:	d01c      	beq.n	70ca <CC_PalTrngParamGet+0xe6>
    7090:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    7094:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    7098:	6142      	str	r2, [r0, #20]
    709a:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
    709e:	4a14      	ldr	r2, [pc, #80]	; (70f0 <CC_PalTrngParamGet+0x10c>)
    70a0:	4291      	cmp	r1, r2
    70a2:	d00d      	beq.n	70c0 <CC_PalTrngParamGet+0xdc>
    70a4:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    70a8:	3201      	adds	r2, #1
    70aa:	d009      	beq.n	70c0 <CC_PalTrngParamGet+0xdc>
    70ac:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
    70b0:	6183      	str	r3, [r0, #24]
    70b2:	2000      	movs	r0, #0
    70b4:	4770      	bx	lr
    70b6:	2001      	movs	r0, #1
    70b8:	4770      	bx	lr
    70ba:	f640 02fc 	movw	r2, #2300	; 0x8fc
    70be:	e7a5      	b.n	700c <CC_PalTrngParamGet+0x28>
    70c0:	f240 3337 	movw	r3, #823	; 0x337
    70c4:	6183      	str	r3, [r0, #24]
    70c6:	2000      	movs	r0, #0
    70c8:	4770      	bx	lr
    70ca:	2251      	movs	r2, #81	; 0x51
    70cc:	e7e2      	b.n	7094 <CC_PalTrngParamGet+0xb0>
    70ce:	2290      	movs	r2, #144	; 0x90
    70d0:	e7d3      	b.n	707a <CC_PalTrngParamGet+0x96>
    70d2:	f642 1204 	movw	r2, #10500	; 0x2904
    70d6:	e7c3      	b.n	7060 <CC_PalTrngParamGet+0x7c>
    70d8:	f640 62d8 	movw	r2, #3800	; 0xed8
    70dc:	e7b2      	b.n	7044 <CC_PalTrngParamGet+0x60>
    70de:	f242 02d0 	movw	r2, #8400	; 0x20d0
    70e2:	e7a1      	b.n	7028 <CC_PalTrngParamGet+0x44>
    70e4:	fffff8fc 	.word	0xfffff8fc
    70e8:	ffff20d0 	.word	0xffff20d0
    70ec:	ffff2904 	.word	0xffff2904
    70f0:	fffff337 	.word	0xfffff337

000070f4 <LLF_RND_WaitRngInterrupt>:
    70f4:	4601      	mov	r1, r0
    70f6:	b508      	push	{r3, lr}
    70f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
    70fc:	f7ff f924 	bl	6348 <CC_HalWaitInterruptRND>
    7100:	2300      	movs	r3, #0
    7102:	4902      	ldr	r1, [pc, #8]	; (710c <LLF_RND_WaitRngInterrupt+0x18>)
    7104:	4a02      	ldr	r2, [pc, #8]	; (7110 <LLF_RND_WaitRngInterrupt+0x1c>)
    7106:	600b      	str	r3, [r1, #0]
    7108:	6013      	str	r3, [r2, #0]
    710a:	bd08      	pop	{r3, pc}
    710c:	508411c8 	.word	0x508411c8
    7110:	5084112c 	.word	0x5084112c

00007114 <LLF_RND_GetRoscSampleCnt>:
    7114:	3801      	subs	r0, #1
    7116:	2807      	cmp	r0, #7
    7118:	d805      	bhi.n	7126 <LLF_RND_GetRoscSampleCnt+0x12>
    711a:	e8df f000 	tbb	[pc, r0]
    711e:	0e0a      	.short	0x0e0a
    7120:	04041204 	.word	0x04041204
    7124:	0604      	.short	0x0604
    7126:	4809      	ldr	r0, [pc, #36]	; (714c <LLF_RND_GetRoscSampleCnt+0x38>)
    7128:	4770      	bx	lr
    712a:	68cb      	ldr	r3, [r1, #12]
    712c:	2000      	movs	r0, #0
    712e:	624b      	str	r3, [r1, #36]	; 0x24
    7130:	4770      	bx	lr
    7132:	680b      	ldr	r3, [r1, #0]
    7134:	2000      	movs	r0, #0
    7136:	624b      	str	r3, [r1, #36]	; 0x24
    7138:	4770      	bx	lr
    713a:	684b      	ldr	r3, [r1, #4]
    713c:	2000      	movs	r0, #0
    713e:	624b      	str	r3, [r1, #36]	; 0x24
    7140:	4770      	bx	lr
    7142:	688b      	ldr	r3, [r1, #8]
    7144:	2000      	movs	r0, #0
    7146:	624b      	str	r3, [r1, #36]	; 0x24
    7148:	4770      	bx	lr
    714a:	bf00      	nop
    714c:	00f10c31 	.word	0x00f10c31

00007150 <LLF_RND_GetFastestRosc>:
    7150:	680b      	ldr	r3, [r1, #0]
    7152:	e002      	b.n	715a <LLF_RND_GetFastestRosc+0xa>
    7154:	2b08      	cmp	r3, #8
    7156:	600b      	str	r3, [r1, #0]
    7158:	d806      	bhi.n	7168 <LLF_RND_GetFastestRosc+0x18>
    715a:	6a02      	ldr	r2, [r0, #32]
    715c:	4213      	tst	r3, r2
    715e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    7162:	d0f7      	beq.n	7154 <LLF_RND_GetFastestRosc+0x4>
    7164:	2000      	movs	r0, #0
    7166:	4770      	bx	lr
    7168:	4800      	ldr	r0, [pc, #0]	; (716c <LLF_RND_GetFastestRosc+0x1c>)
    716a:	4770      	bx	lr
    716c:	00f10c31 	.word	0x00f10c31

00007170 <LLF_RND_TurnOffTrng>:
    7170:	2300      	movs	r3, #0
    7172:	4904      	ldr	r1, [pc, #16]	; (7184 <LLF_RND_TurnOffTrng+0x14>)
    7174:	4a04      	ldr	r2, [pc, #16]	; (7188 <LLF_RND_TurnOffTrng+0x18>)
    7176:	600b      	str	r3, [r1, #0]
    7178:	f44f 6080 	mov.w	r0, #1024	; 0x400
    717c:	6013      	str	r3, [r2, #0]
    717e:	f7ff b8c9 	b.w	6314 <CC_HalClearInterruptBit>
    7182:	bf00      	nop
    7184:	5084112c 	.word	0x5084112c
    7188:	508411c4 	.word	0x508411c4

0000718c <SetDataBuffersInfo>:
    718c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7190:	2600      	movs	r6, #0
    7192:	b082      	sub	sp, #8
    7194:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
    7198:	f88d 6007 	strb.w	r6, [sp, #7]
    719c:	9e09      	ldr	r6, [sp, #36]	; 0x24
    719e:	d327      	bcc.n	71f0 <SetDataBuffersInfo+0x64>
    71a0:	460c      	mov	r4, r1
    71a2:	4404      	add	r4, r0
    71a4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
    71a8:	4605      	mov	r5, r0
    71aa:	d821      	bhi.n	71f0 <SetDataBuffersInfo+0x64>
    71ac:	4617      	mov	r7, r2
    71ae:	4698      	mov	r8, r3
    71b0:	2201      	movs	r2, #1
    71b2:	f10d 0307 	add.w	r3, sp, #7
    71b6:	f000 ff9f 	bl	80f8 <CC_PalDataBufferAttrGet>
    71ba:	4604      	mov	r4, r0
    71bc:	b9c0      	cbnz	r0, 71f0 <SetDataBuffersInfo+0x64>
    71be:	f89d 3007 	ldrb.w	r3, [sp, #7]
    71c2:	603d      	str	r5, [r7, #0]
    71c4:	713b      	strb	r3, [r7, #4]
    71c6:	b1ae      	cbz	r6, 71f4 <SetDataBuffersInfo+0x68>
    71c8:	f1b8 0f00 	cmp.w	r8, #0
    71cc:	d009      	beq.n	71e2 <SetDataBuffersInfo+0x56>
    71ce:	4602      	mov	r2, r0
    71d0:	9908      	ldr	r1, [sp, #32]
    71d2:	4640      	mov	r0, r8
    71d4:	f10d 0307 	add.w	r3, sp, #7
    71d8:	f000 ff8e 	bl	80f8 <CC_PalDataBufferAttrGet>
    71dc:	b940      	cbnz	r0, 71f0 <SetDataBuffersInfo+0x64>
    71de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    71e2:	4620      	mov	r0, r4
    71e4:	f8c6 8000 	str.w	r8, [r6]
    71e8:	7133      	strb	r3, [r6, #4]
    71ea:	b002      	add	sp, #8
    71ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    71f0:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
    71f4:	4620      	mov	r0, r4
    71f6:	b002      	add	sp, #8
    71f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000071fc <InitHashDrv>:
    71fc:	b1e8      	cbz	r0, 723a <InitHashDrv+0x3e>
    71fe:	b510      	push	{r4, lr}
    7200:	6804      	ldr	r4, [r0, #0]
    7202:	2c01      	cmp	r4, #1
    7204:	d004      	beq.n	7210 <InitHashDrv+0x14>
    7206:	2c02      	cmp	r4, #2
    7208:	d010      	beq.n	722c <InitHashDrv+0x30>
    720a:	b144      	cbz	r4, 721e <InitHashDrv+0x22>
    720c:	480c      	ldr	r0, [pc, #48]	; (7240 <InitHashDrv+0x44>)
    720e:	bd10      	pop	{r4, pc}
    7210:	2220      	movs	r2, #32
    7212:	490c      	ldr	r1, [pc, #48]	; (7244 <InitHashDrv+0x48>)
    7214:	3008      	adds	r0, #8
    7216:	f7ff fedd 	bl	6fd4 <CC_PalMemCopyPlat>
    721a:	2000      	movs	r0, #0
    721c:	bd10      	pop	{r4, pc}
    721e:	2214      	movs	r2, #20
    7220:	4909      	ldr	r1, [pc, #36]	; (7248 <InitHashDrv+0x4c>)
    7222:	3008      	adds	r0, #8
    7224:	f7ff fed6 	bl	6fd4 <CC_PalMemCopyPlat>
    7228:	4620      	mov	r0, r4
    722a:	bd10      	pop	{r4, pc}
    722c:	2220      	movs	r2, #32
    722e:	4907      	ldr	r1, [pc, #28]	; (724c <InitHashDrv+0x50>)
    7230:	3008      	adds	r0, #8
    7232:	f7ff fecf 	bl	6fd4 <CC_PalMemCopyPlat>
    7236:	2000      	movs	r0, #0
    7238:	bd10      	pop	{r4, pc}
    723a:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
    723e:	4770      	bx	lr
    7240:	00f30001 	.word	0x00f30001
    7244:	00008cf8 	.word	0x00008cf8
    7248:	00008cc4 	.word	0x00008cc4
    724c:	00008cd8 	.word	0x00008cd8

00007250 <ProcessHashDrv>:
    7250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7254:	2900      	cmp	r1, #0
    7256:	f000 80ef 	beq.w	7438 <ProcessHashDrv+0x1e8>
    725a:	4604      	mov	r4, r0
    725c:	2800      	cmp	r0, #0
    725e:	f000 80ef 	beq.w	7440 <ProcessHashDrv+0x1f0>
    7262:	6803      	ldr	r3, [r0, #0]
    7264:	4617      	mov	r7, r2
    7266:	460e      	mov	r6, r1
    7268:	2b00      	cmp	r3, #0
    726a:	f000 80b9 	beq.w	73e0 <ProcessHashDrv+0x190>
    726e:	3b01      	subs	r3, #1
    7270:	2b01      	cmp	r3, #1
    7272:	f200 80cd 	bhi.w	7410 <ProcessHashDrv+0x1c0>
    7276:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    727a:	4873      	ldr	r0, [pc, #460]	; (7448 <ProcessHashDrv+0x1f8>)
    727c:	f04f 0802 	mov.w	r8, #2
    7280:	f7ff f8ee 	bl	6460 <CC_PalMutexLock>
    7284:	2800      	cmp	r0, #0
    7286:	f040 80b5 	bne.w	73f4 <ProcessHashDrv+0x1a4>
    728a:	2000      	movs	r0, #0
    728c:	f7ff f918 	bl	64c0 <CC_PalPowerSaveModeSelect>
    7290:	4605      	mov	r5, r0
    7292:	2800      	cmp	r0, #0
    7294:	f040 80b8 	bne.w	7408 <ProcessHashDrv+0x1b8>
    7298:	4a6c      	ldr	r2, [pc, #432]	; (744c <ProcessHashDrv+0x1fc>)
    729a:	6813      	ldr	r3, [r2, #0]
    729c:	2b00      	cmp	r3, #0
    729e:	d1fc      	bne.n	729a <ProcessHashDrv+0x4a>
    72a0:	486b      	ldr	r0, [pc, #428]	; (7450 <ProcessHashDrv+0x200>)
    72a2:	6803      	ldr	r3, [r0, #0]
    72a4:	2b00      	cmp	r3, #0
    72a6:	d1fc      	bne.n	72a2 <ProcessHashDrv+0x52>
    72a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    72ac:	f7ff f832 	bl	6314 <CC_HalClearInterruptBit>
    72b0:	4b68      	ldr	r3, [pc, #416]	; (7454 <ProcessHashDrv+0x204>)
    72b2:	6818      	ldr	r0, [r3, #0]
    72b4:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    72b8:	f7ff f83a 	bl	6330 <CC_HalMaskInterrupt>
    72bc:	2301      	movs	r3, #1
    72be:	2007      	movs	r0, #7
    72c0:	4a65      	ldr	r2, [pc, #404]	; (7458 <ProcessHashDrv+0x208>)
    72c2:	4966      	ldr	r1, [pc, #408]	; (745c <ProcessHashDrv+0x20c>)
    72c4:	6013      	str	r3, [r2, #0]
    72c6:	6008      	str	r0, [r1, #0]
    72c8:	f842 3c54 	str.w	r3, [r2, #-84]
    72cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    72ce:	4b64      	ldr	r3, [pc, #400]	; (7460 <ProcessHashDrv+0x210>)
    72d0:	3a48      	subs	r2, #72	; 0x48
    72d2:	6019      	str	r1, [r3, #0]
    72d4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    72d6:	6011      	str	r1, [r2, #0]
    72d8:	f843 8c0c 	str.w	r8, [r3, #-12]
    72dc:	6823      	ldr	r3, [r4, #0]
    72de:	b163      	cbz	r3, 72fa <ProcessHashDrv+0xaa>
    72e0:	3b01      	subs	r3, #1
    72e2:	2b01      	cmp	r3, #1
    72e4:	d818      	bhi.n	7318 <ProcessHashDrv+0xc8>
    72e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    72e8:	4b5e      	ldr	r3, [pc, #376]	; (7464 <ProcessHashDrv+0x214>)
    72ea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
    72ee:	6019      	str	r1, [r3, #0]
    72f0:	6a21      	ldr	r1, [r4, #32]
    72f2:	6011      	str	r1, [r2, #0]
    72f4:	69e2      	ldr	r2, [r4, #28]
    72f6:	f843 2c08 	str.w	r2, [r3, #-8]
    72fa:	69a1      	ldr	r1, [r4, #24]
    72fc:	4b5a      	ldr	r3, [pc, #360]	; (7468 <ProcessHashDrv+0x218>)
    72fe:	4a5b      	ldr	r2, [pc, #364]	; (746c <ProcessHashDrv+0x21c>)
    7300:	6019      	str	r1, [r3, #0]
    7302:	6961      	ldr	r1, [r4, #20]
    7304:	6011      	str	r1, [r2, #0]
    7306:	6921      	ldr	r1, [r4, #16]
    7308:	f843 1c08 	str.w	r1, [r3, #-8]
    730c:	68e1      	ldr	r1, [r4, #12]
    730e:	f842 1c08 	str.w	r1, [r2, #-8]
    7312:	68a2      	ldr	r2, [r4, #8]
    7314:	f843 2c10 	str.w	r2, [r3, #-16]
    7318:	4a55      	ldr	r2, [pc, #340]	; (7470 <ProcessHashDrv+0x220>)
    731a:	6813      	ldr	r3, [r2, #0]
    731c:	2b00      	cmp	r3, #0
    731e:	d1fc      	bne.n	731a <ProcessHashDrv+0xca>
    7320:	2f00      	cmp	r7, #0
    7322:	d059      	beq.n	73d8 <ProcessHashDrv+0x188>
    7324:	6863      	ldr	r3, [r4, #4]
    7326:	2040      	movs	r0, #64	; 0x40
    7328:	2b01      	cmp	r3, #1
    732a:	bf04      	itt	eq
    732c:	4a51      	ldreq	r2, [pc, #324]	; (7474 <ProcessHashDrv+0x224>)
    732e:	6013      	streq	r3, [r2, #0]
    7330:	6831      	ldr	r1, [r6, #0]
    7332:	4a51      	ldr	r2, [pc, #324]	; (7478 <ProcessHashDrv+0x228>)
    7334:	4b51      	ldr	r3, [pc, #324]	; (747c <ProcessHashDrv+0x22c>)
    7336:	6011      	str	r1, [r2, #0]
    7338:	601f      	str	r7, [r3, #0]
    733a:	f7fe ffff 	bl	633c <CC_HalWaitInterrupt>
    733e:	4605      	mov	r5, r0
    7340:	4a4b      	ldr	r2, [pc, #300]	; (7470 <ProcessHashDrv+0x220>)
    7342:	6813      	ldr	r3, [r2, #0]
    7344:	2b00      	cmp	r3, #0
    7346:	d1fc      	bne.n	7342 <ProcessHashDrv+0xf2>
    7348:	4a41      	ldr	r2, [pc, #260]	; (7450 <ProcessHashDrv+0x200>)
    734a:	6813      	ldr	r3, [r2, #0]
    734c:	2b00      	cmp	r3, #0
    734e:	d1fc      	bne.n	734a <ProcessHashDrv+0xfa>
    7350:	6823      	ldr	r3, [r4, #0]
    7352:	b15b      	cbz	r3, 736c <ProcessHashDrv+0x11c>
    7354:	3b01      	subs	r3, #1
    7356:	2b01      	cmp	r3, #1
    7358:	d816      	bhi.n	7388 <ProcessHashDrv+0x138>
    735a:	4b42      	ldr	r3, [pc, #264]	; (7464 <ProcessHashDrv+0x214>)
    735c:	4a48      	ldr	r2, [pc, #288]	; (7480 <ProcessHashDrv+0x230>)
    735e:	6819      	ldr	r1, [r3, #0]
    7360:	3b08      	subs	r3, #8
    7362:	6261      	str	r1, [r4, #36]	; 0x24
    7364:	6812      	ldr	r2, [r2, #0]
    7366:	6222      	str	r2, [r4, #32]
    7368:	681b      	ldr	r3, [r3, #0]
    736a:	61e3      	str	r3, [r4, #28]
    736c:	4b3e      	ldr	r3, [pc, #248]	; (7468 <ProcessHashDrv+0x218>)
    736e:	4a3f      	ldr	r2, [pc, #252]	; (746c <ProcessHashDrv+0x21c>)
    7370:	6819      	ldr	r1, [r3, #0]
    7372:	3a08      	subs	r2, #8
    7374:	61a1      	str	r1, [r4, #24]
    7376:	6891      	ldr	r1, [r2, #8]
    7378:	3b10      	subs	r3, #16
    737a:	6161      	str	r1, [r4, #20]
    737c:	6899      	ldr	r1, [r3, #8]
    737e:	6121      	str	r1, [r4, #16]
    7380:	6812      	ldr	r2, [r2, #0]
    7382:	60e2      	str	r2, [r4, #12]
    7384:	681b      	ldr	r3, [r3, #0]
    7386:	60a3      	str	r3, [r4, #8]
    7388:	2101      	movs	r1, #1
    738a:	2300      	movs	r3, #0
    738c:	4834      	ldr	r0, [pc, #208]	; (7460 <ProcessHashDrv+0x210>)
    738e:	4a3d      	ldr	r2, [pc, #244]	; (7484 <ProcessHashDrv+0x234>)
    7390:	6800      	ldr	r0, [r0, #0]
    7392:	64a0      	str	r0, [r4, #72]	; 0x48
    7394:	6810      	ldr	r0, [r2, #0]
    7396:	64e0      	str	r0, [r4, #76]	; 0x4c
    7398:	f842 1c0c 	str.w	r1, [r2, #-12]
    739c:	4835      	ldr	r0, [pc, #212]	; (7474 <ProcessHashDrv+0x224>)
    739e:	493a      	ldr	r1, [pc, #232]	; (7488 <ProcessHashDrv+0x238>)
    73a0:	6003      	str	r3, [r0, #0]
    73a2:	f502 72a0 	add.w	r2, r2, #320	; 0x140
    73a6:	600b      	str	r3, [r1, #0]
    73a8:	6813      	ldr	r3, [r2, #0]
    73aa:	2b00      	cmp	r3, #0
    73ac:	d1fc      	bne.n	73a8 <ProcessHashDrv+0x158>
    73ae:	4a2a      	ldr	r2, [pc, #168]	; (7458 <ProcessHashDrv+0x208>)
    73b0:	6013      	str	r3, [r2, #0]
    73b2:	2d00      	cmp	r5, #0
    73b4:	d13a      	bne.n	742c <ProcessHashDrv+0x1dc>
    73b6:	4b27      	ldr	r3, [pc, #156]	; (7454 <ProcessHashDrv+0x204>)
    73b8:	6818      	ldr	r0, [r3, #0]
    73ba:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    73be:	f7fe ffb7 	bl	6330 <CC_HalMaskInterrupt>
    73c2:	2001      	movs	r0, #1
    73c4:	f7ff f87c 	bl	64c0 <CC_PalPowerSaveModeSelect>
    73c8:	bb60      	cbnz	r0, 7424 <ProcessHashDrv+0x1d4>
    73ca:	481f      	ldr	r0, [pc, #124]	; (7448 <ProcessHashDrv+0x1f8>)
    73cc:	f7ff f850 	bl	6470 <CC_PalMutexUnlock>
    73d0:	bb10      	cbnz	r0, 7418 <ProcessHashDrv+0x1c8>
    73d2:	4628      	mov	r0, r5
    73d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    73d8:	2204      	movs	r2, #4
    73da:	4b2b      	ldr	r3, [pc, #172]	; (7488 <ProcessHashDrv+0x238>)
    73dc:	601a      	str	r2, [r3, #0]
    73de:	e7af      	b.n	7340 <ProcessHashDrv+0xf0>
    73e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    73e4:	4818      	ldr	r0, [pc, #96]	; (7448 <ProcessHashDrv+0x1f8>)
    73e6:	f04f 0801 	mov.w	r8, #1
    73ea:	f7ff f839 	bl	6460 <CC_PalMutexLock>
    73ee:	2800      	cmp	r0, #0
    73f0:	f43f af4b 	beq.w	728a <ProcessHashDrv+0x3a>
    73f4:	4825      	ldr	r0, [pc, #148]	; (748c <ProcessHashDrv+0x23c>)
    73f6:	f7fe f8e9 	bl	55cc <CC_PalAbort>
    73fa:	2000      	movs	r0, #0
    73fc:	f7ff f860 	bl	64c0 <CC_PalPowerSaveModeSelect>
    7400:	4605      	mov	r5, r0
    7402:	2800      	cmp	r0, #0
    7404:	f43f af48 	beq.w	7298 <ProcessHashDrv+0x48>
    7408:	4821      	ldr	r0, [pc, #132]	; (7490 <ProcessHashDrv+0x240>)
    740a:	f7fe f8df 	bl	55cc <CC_PalAbort>
    740e:	e743      	b.n	7298 <ProcessHashDrv+0x48>
    7410:	4d20      	ldr	r5, [pc, #128]	; (7494 <ProcessHashDrv+0x244>)
    7412:	4628      	mov	r0, r5
    7414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7418:	481f      	ldr	r0, [pc, #124]	; (7498 <ProcessHashDrv+0x248>)
    741a:	f7fe f8d7 	bl	55cc <CC_PalAbort>
    741e:	4628      	mov	r0, r5
    7420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7424:	481d      	ldr	r0, [pc, #116]	; (749c <ProcessHashDrv+0x24c>)
    7426:	f7fe f8d1 	bl	55cc <CC_PalAbort>
    742a:	e7ce      	b.n	73ca <ProcessHashDrv+0x17a>
    742c:	2110      	movs	r1, #16
    742e:	f104 0008 	add.w	r0, r4, #8
    7432:	f7ff fdd3 	bl	6fdc <CC_PalMemSetZeroPlat>
    7436:	e7be      	b.n	73b6 <ProcessHashDrv+0x166>
    7438:	4d19      	ldr	r5, [pc, #100]	; (74a0 <ProcessHashDrv+0x250>)
    743a:	4628      	mov	r0, r5
    743c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7440:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
    7444:	e7c5      	b.n	73d2 <ProcessHashDrv+0x182>
    7446:	bf00      	nop
    7448:	200000e8 	.word	0x200000e8
    744c:	5084191c 	.word	0x5084191c
    7450:	50841c20 	.word	0x50841c20
    7454:	50841a04 	.word	0x50841a04
    7458:	50841818 	.word	0x50841818
    745c:	50841900 	.word	0x50841900
    7460:	508417cc 	.word	0x508417cc
    7464:	5084165c 	.word	0x5084165c
    7468:	50841650 	.word	0x50841650
    746c:	5084164c 	.word	0x5084164c
    7470:	50841910 	.word	0x50841910
    7474:	50841684 	.word	0x50841684
    7478:	50841c28 	.word	0x50841c28
    747c:	50841c2c 	.word	0x50841c2c
    7480:	50841658 	.word	0x50841658
    7484:	508417d0 	.word	0x508417d0
    7488:	508417c8 	.word	0x508417c8
    748c:	00008bf8 	.word	0x00008bf8
    7490:	00008c10 	.word	0x00008c10
    7494:	00f30001 	.word	0x00f30001
    7498:	00008c50 	.word	0x00008c50
    749c:	00008c30 	.word	0x00008c30
    74a0:	00f30003 	.word	0x00f30003

000074a4 <FinishHashDrv>:
    74a4:	2800      	cmp	r0, #0
    74a6:	d03a      	beq.n	751e <FinishHashDrv+0x7a>
    74a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74ac:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
    74b0:	fa92 f882 	rev.w	r8, r2
    74b4:	fa93 fe83 	rev.w	lr, r3
    74b8:	6a02      	ldr	r2, [r0, #32]
    74ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
    74bc:	e9d0 4104 	ldrd	r4, r1, [r0, #16]
    74c0:	ba12      	rev	r2, r2
    74c2:	ba24      	rev	r4, r4
    74c4:	ba1b      	rev	r3, r3
    74c6:	6104      	str	r4, [r0, #16]
    74c8:	6202      	str	r2, [r0, #32]
    74ca:	6a84      	ldr	r4, [r0, #40]	; 0x28
    74cc:	6b82      	ldr	r2, [r0, #56]	; 0x38
    74ce:	6243      	str	r3, [r0, #36]	; 0x24
    74d0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    74d2:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
    74d6:	ba09      	rev	r1, r1
    74d8:	ba36      	rev	r6, r6
    74da:	ba2d      	rev	r5, r5
    74dc:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
    74de:	6086      	str	r6, [r0, #8]
    74e0:	60c5      	str	r5, [r0, #12]
    74e2:	6b06      	ldr	r6, [r0, #48]	; 0x30
    74e4:	6b45      	ldr	r5, [r0, #52]	; 0x34
    74e6:	6141      	str	r1, [r0, #20]
    74e8:	fa94 fc84 	rev.w	ip, r4
    74ec:	ba19      	rev	r1, r3
    74ee:	ba14      	rev	r4, r2
    74f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
    74f2:	6c02      	ldr	r2, [r0, #64]	; 0x40
    74f4:	ba3f      	rev	r7, r7
    74f6:	ba36      	rev	r6, r6
    74f8:	ba2d      	rev	r5, r5
    74fa:	ba12      	rev	r2, r2
    74fc:	ba1b      	rev	r3, r3
    74fe:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
    7502:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
    7506:	f8c0 8018 	str.w	r8, [r0, #24]
    750a:	f8c0 e01c 	str.w	lr, [r0, #28]
    750e:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
    7512:	62c7      	str	r7, [r0, #44]	; 0x2c
    7514:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    7518:	2000      	movs	r0, #0
    751a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    751e:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
    7522:	4770      	bx	lr

00007524 <LoadAesKey>:
    7524:	2800      	cmp	r0, #0
    7526:	d060      	beq.n	75ea <LoadAesKey+0xc6>
    7528:	b538      	push	{r3, r4, r5, lr}
    752a:	4604      	mov	r4, r0
    752c:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
    7530:	2802      	cmp	r0, #2
    7532:	d016      	beq.n	7562 <LoadAesKey+0x3e>
    7534:	2803      	cmp	r0, #3
    7536:	d03c      	beq.n	75b2 <LoadAesKey+0x8e>
    7538:	2800      	cmp	r0, #0
    753a:	d02f      	beq.n	759c <LoadAesKey+0x78>
    753c:	482c      	ldr	r0, [pc, #176]	; (75f0 <LoadAesKey+0xcc>)
    753e:	4d2d      	ldr	r5, [pc, #180]	; (75f4 <LoadAesKey+0xd0>)
    7540:	682a      	ldr	r2, [r5, #0]
    7542:	4b2d      	ldr	r3, [pc, #180]	; (75f8 <LoadAesKey+0xd4>)
    7544:	6812      	ldr	r2, [r2, #0]
    7546:	492d      	ldr	r1, [pc, #180]	; (75fc <LoadAesKey+0xd8>)
    7548:	601a      	str	r2, [r3, #0]
    754a:	682b      	ldr	r3, [r5, #0]
    754c:	4a2c      	ldr	r2, [pc, #176]	; (7600 <LoadAesKey+0xdc>)
    754e:	685c      	ldr	r4, [r3, #4]
    7550:	4b2c      	ldr	r3, [pc, #176]	; (7604 <LoadAesKey+0xe0>)
    7552:	600c      	str	r4, [r1, #0]
    7554:	6829      	ldr	r1, [r5, #0]
    7556:	6889      	ldr	r1, [r1, #8]
    7558:	6011      	str	r1, [r2, #0]
    755a:	682a      	ldr	r2, [r5, #0]
    755c:	68d2      	ldr	r2, [r2, #12]
    755e:	601a      	str	r2, [r3, #0]
    7560:	bd38      	pop	{r3, r4, r5, pc}
    7562:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7564:	6c20      	ldr	r0, [r4, #64]	; 0x40
    7566:	f000 fbdd 	bl	7d24 <kmu_validate_slot_and_size_no_kdr>
    756a:	4d22      	ldr	r5, [pc, #136]	; (75f4 <LoadAesKey+0xd0>)
    756c:	2800      	cmp	r0, #0
    756e:	d1e7      	bne.n	7540 <LoadAesKey+0x1c>
    7570:	682a      	ldr	r2, [r5, #0]
    7572:	4b21      	ldr	r3, [pc, #132]	; (75f8 <LoadAesKey+0xd4>)
    7574:	6810      	ldr	r0, [r2, #0]
    7576:	4921      	ldr	r1, [pc, #132]	; (75fc <LoadAesKey+0xd8>)
    7578:	6018      	str	r0, [r3, #0]
    757a:	6828      	ldr	r0, [r5, #0]
    757c:	4a20      	ldr	r2, [pc, #128]	; (7600 <LoadAesKey+0xdc>)
    757e:	6840      	ldr	r0, [r0, #4]
    7580:	6008      	str	r0, [r1, #0]
    7582:	6829      	ldr	r1, [r5, #0]
    7584:	6889      	ldr	r1, [r1, #8]
    7586:	6011      	str	r1, [r2, #0]
    7588:	682a      	ldr	r2, [r5, #0]
    758a:	68d2      	ldr	r2, [r2, #12]
    758c:	60da      	str	r2, [r3, #12]
    758e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7590:	6c20      	ldr	r0, [r4, #64]	; 0x40
    7592:	f000 fc3b 	bl	7e0c <kmu_load_key_aes>
    7596:	2800      	cmp	r0, #0
    7598:	d025      	beq.n	75e6 <LoadAesKey+0xc2>
    759a:	e7d1      	b.n	7540 <LoadAesKey+0x1c>
    759c:	6921      	ldr	r1, [r4, #16]
    759e:	4a16      	ldr	r2, [pc, #88]	; (75f8 <LoadAesKey+0xd4>)
    75a0:	4b16      	ldr	r3, [pc, #88]	; (75fc <LoadAesKey+0xd8>)
    75a2:	6011      	str	r1, [r2, #0]
    75a4:	6961      	ldr	r1, [r4, #20]
    75a6:	6019      	str	r1, [r3, #0]
    75a8:	69a1      	ldr	r1, [r4, #24]
    75aa:	6091      	str	r1, [r2, #8]
    75ac:	69e2      	ldr	r2, [r4, #28]
    75ae:	609a      	str	r2, [r3, #8]
    75b0:	bd38      	pop	{r3, r4, r5, pc}
    75b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    75b4:	6c20      	ldr	r0, [r4, #64]	; 0x40
    75b6:	f000 fbf9 	bl	7dac <kmu_validate_kdr_slot_and_size>
    75ba:	4d0e      	ldr	r5, [pc, #56]	; (75f4 <LoadAesKey+0xd0>)
    75bc:	2800      	cmp	r0, #0
    75be:	d1bf      	bne.n	7540 <LoadAesKey+0x1c>
    75c0:	682a      	ldr	r2, [r5, #0]
    75c2:	4b0d      	ldr	r3, [pc, #52]	; (75f8 <LoadAesKey+0xd4>)
    75c4:	6810      	ldr	r0, [r2, #0]
    75c6:	490d      	ldr	r1, [pc, #52]	; (75fc <LoadAesKey+0xd8>)
    75c8:	6018      	str	r0, [r3, #0]
    75ca:	6828      	ldr	r0, [r5, #0]
    75cc:	4a0c      	ldr	r2, [pc, #48]	; (7600 <LoadAesKey+0xdc>)
    75ce:	6840      	ldr	r0, [r0, #4]
    75d0:	6008      	str	r0, [r1, #0]
    75d2:	6829      	ldr	r1, [r5, #0]
    75d4:	6889      	ldr	r1, [r1, #8]
    75d6:	6011      	str	r1, [r2, #0]
    75d8:	682a      	ldr	r2, [r5, #0]
    75da:	68d2      	ldr	r2, [r2, #12]
    75dc:	60da      	str	r2, [r3, #12]
    75de:	f000 fc09 	bl	7df4 <kmu_use_kdr_key>
    75e2:	2800      	cmp	r0, #0
    75e4:	d1ac      	bne.n	7540 <LoadAesKey+0x1c>
    75e6:	2000      	movs	r0, #0
    75e8:	bd38      	pop	{r3, r4, r5, pc}
    75ea:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
    75ee:	4770      	bx	lr
    75f0:	00f10009 	.word	0x00f10009
    75f4:	200000d8 	.word	0x200000d8
    75f8:	50841400 	.word	0x50841400
    75fc:	50841404 	.word	0x50841404
    7600:	50841408 	.word	0x50841408
    7604:	5084140c 	.word	0x5084140c

00007608 <InitAes.part.0>:
    7608:	b510      	push	{r4, lr}
    760a:	4604      	mov	r4, r0
    760c:	4a31      	ldr	r2, [pc, #196]	; (76d4 <InitAes.part.0+0xcc>)
    760e:	6813      	ldr	r3, [r2, #0]
    7610:	2b00      	cmp	r3, #0
    7612:	d1fc      	bne.n	760e <InitAes.part.0+0x6>
    7614:	4a30      	ldr	r2, [pc, #192]	; (76d8 <InitAes.part.0+0xd0>)
    7616:	6813      	ldr	r3, [r2, #0]
    7618:	2b00      	cmp	r3, #0
    761a:	d1fc      	bne.n	7616 <InitAes.part.0+0xe>
    761c:	4a2f      	ldr	r2, [pc, #188]	; (76dc <InitAes.part.0+0xd4>)
    761e:	6813      	ldr	r3, [r2, #0]
    7620:	2b00      	cmp	r3, #0
    7622:	d1fc      	bne.n	761e <InitAes.part.0+0x16>
    7624:	4a2e      	ldr	r2, [pc, #184]	; (76e0 <InitAes.part.0+0xd8>)
    7626:	6813      	ldr	r3, [r2, #0]
    7628:	2b00      	cmp	r3, #0
    762a:	d1fc      	bne.n	7626 <InitAes.part.0+0x1e>
    762c:	4a2d      	ldr	r2, [pc, #180]	; (76e4 <InitAes.part.0+0xdc>)
    762e:	6813      	ldr	r3, [r2, #0]
    7630:	2b00      	cmp	r3, #0
    7632:	d1fc      	bne.n	762e <InitAes.part.0+0x26>
    7634:	4a2c      	ldr	r2, [pc, #176]	; (76e8 <InitAes.part.0+0xe0>)
    7636:	6813      	ldr	r3, [r2, #0]
    7638:	2b00      	cmp	r3, #0
    763a:	d1fc      	bne.n	7636 <InitAes.part.0+0x2e>
    763c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7640:	f7fe fe68 	bl	6314 <CC_HalClearInterruptBit>
    7644:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7646:	f023 0304 	bic.w	r3, r3, #4
    764a:	2b03      	cmp	r3, #3
    764c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    764e:	d036      	beq.n	76be <InitAes.part.0+0xb6>
    7650:	2b01      	cmp	r3, #1
    7652:	4b26      	ldr	r3, [pc, #152]	; (76ec <InitAes.part.0+0xe4>)
    7654:	6818      	ldr	r0, [r3, #0]
    7656:	bf0c      	ite	eq
    7658:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
    765c:	f020 0020 	bicne.w	r0, r0, #32
    7660:	f7fe fe66 	bl	6330 <CC_HalMaskInterrupt>
    7664:	2101      	movs	r1, #1
    7666:	4b22      	ldr	r3, [pc, #136]	; (76f0 <InitAes.part.0+0xe8>)
    7668:	4a1a      	ldr	r2, [pc, #104]	; (76d4 <InitAes.part.0+0xcc>)
    766a:	6019      	str	r1, [r3, #0]
    766c:	6813      	ldr	r3, [r2, #0]
    766e:	2b00      	cmp	r3, #0
    7670:	d1fc      	bne.n	766c <InitAes.part.0+0x64>
    7672:	4a19      	ldr	r2, [pc, #100]	; (76d8 <InitAes.part.0+0xd0>)
    7674:	6813      	ldr	r3, [r2, #0]
    7676:	2b00      	cmp	r3, #0
    7678:	d1fc      	bne.n	7674 <InitAes.part.0+0x6c>
    767a:	491e      	ldr	r1, [pc, #120]	; (76f4 <InitAes.part.0+0xec>)
    767c:	4a15      	ldr	r2, [pc, #84]	; (76d4 <InitAes.part.0+0xcc>)
    767e:	600b      	str	r3, [r1, #0]
    7680:	6813      	ldr	r3, [r2, #0]
    7682:	2b00      	cmp	r3, #0
    7684:	d1fc      	bne.n	7680 <InitAes.part.0+0x78>
    7686:	4a14      	ldr	r2, [pc, #80]	; (76d8 <InitAes.part.0+0xd0>)
    7688:	6813      	ldr	r3, [r2, #0]
    768a:	2b00      	cmp	r3, #0
    768c:	d1fc      	bne.n	7688 <InitAes.part.0+0x80>
    768e:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7690:	f022 0104 	bic.w	r1, r2, #4
    7694:	2903      	cmp	r1, #3
    7696:	bf18      	it	ne
    7698:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
    769a:	ea4f 0282 	mov.w	r2, r2, lsl #2
    769e:	bf18      	it	ne
    76a0:	f003 0301 	andne.w	r3, r3, #1
    76a4:	4914      	ldr	r1, [pc, #80]	; (76f8 <InitAes.part.0+0xf0>)
    76a6:	f002 021c 	and.w	r2, r2, #28
    76aa:	4313      	orrs	r3, r2
    76ac:	600b      	str	r3, [r1, #0]
    76ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
    76b0:	2b07      	cmp	r3, #7
    76b2:	d102      	bne.n	76ba <InitAes.part.0+0xb2>
    76b4:	2201      	movs	r2, #1
    76b6:	4b11      	ldr	r3, [pc, #68]	; (76fc <InitAes.part.0+0xf4>)
    76b8:	601a      	str	r2, [r3, #0]
    76ba:	2000      	movs	r0, #0
    76bc:	bd10      	pop	{r4, pc}
    76be:	2b01      	cmp	r3, #1
    76c0:	4b0a      	ldr	r3, [pc, #40]	; (76ec <InitAes.part.0+0xe4>)
    76c2:	6818      	ldr	r0, [r3, #0]
    76c4:	bf0c      	ite	eq
    76c6:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
    76ca:	f020 0010 	bicne.w	r0, r0, #16
    76ce:	f7fe fe2f 	bl	6330 <CC_HalMaskInterrupt>
    76d2:	e7c7      	b.n	7664 <InitAes.part.0+0x5c>
    76d4:	50841910 	.word	0x50841910
    76d8:	50841470 	.word	0x50841470
    76dc:	50841d20 	.word	0x50841d20
    76e0:	50841c20 	.word	0x50841c20
    76e4:	50841d38 	.word	0x50841d38
    76e8:	50841c38 	.word	0x50841c38
    76ec:	50841a04 	.word	0x50841a04
    76f0:	50841900 	.word	0x50841900
    76f4:	508414bc 	.word	0x508414bc
    76f8:	508414c0 	.word	0x508414c0
    76fc:	5084147c 	.word	0x5084147c

00007700 <ProcessAesDrv>:
    7700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7704:	b087      	sub	sp, #28
    7706:	2900      	cmp	r1, #0
    7708:	f000 80a5 	beq.w	7856 <ProcessAesDrv+0x156>
    770c:	4616      	mov	r6, r2
    770e:	2a00      	cmp	r2, #0
    7710:	f000 80a1 	beq.w	7856 <ProcessAesDrv+0x156>
    7714:	4604      	mov	r4, r0
    7716:	2800      	cmp	r0, #0
    7718:	f000 8141 	beq.w	799e <ProcessAesDrv+0x29e>
    771c:	461f      	mov	r7, r3
    771e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    7720:	460d      	mov	r5, r1
    7722:	2b00      	cmp	r3, #0
    7724:	d150      	bne.n	77c8 <ProcessAesDrv+0xc8>
    7726:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
    772a:	d252      	bcs.n	77d2 <ProcessAesDrv+0xd2>
    772c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
    7730:	2b04      	cmp	r3, #4
    7732:	f000 810b 	beq.w	794c <ProcessAesDrv+0x24c>
    7736:	f04f 0800 	mov.w	r8, #0
    773a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    773e:	48a9      	ldr	r0, [pc, #676]	; (79e4 <ProcessAesDrv+0x2e4>)
    7740:	f7fe fe8e 	bl	6460 <CC_PalMutexLock>
    7744:	2800      	cmp	r0, #0
    7746:	f040 80e0 	bne.w	790a <ProcessAesDrv+0x20a>
    774a:	2000      	movs	r0, #0
    774c:	f7fe feb8 	bl	64c0 <CC_PalPowerSaveModeSelect>
    7750:	2800      	cmp	r0, #0
    7752:	f040 80e3 	bne.w	791c <ProcessAesDrv+0x21c>
    7756:	2101      	movs	r1, #1
    7758:	4ba3      	ldr	r3, [pc, #652]	; (79e8 <ProcessAesDrv+0x2e8>)
    775a:	4aa4      	ldr	r2, [pc, #656]	; (79ec <ProcessAesDrv+0x2ec>)
    775c:	6019      	str	r1, [r3, #0]
    775e:	6813      	ldr	r3, [r2, #0]
    7760:	2b00      	cmp	r3, #0
    7762:	d1fc      	bne.n	775e <ProcessAesDrv+0x5e>
    7764:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7766:	2b03      	cmp	r3, #3
    7768:	dc39      	bgt.n	77de <ProcessAesDrv+0xde>
    776a:	2b00      	cmp	r3, #0
    776c:	da3a      	bge.n	77e4 <ProcessAesDrv+0xe4>
    776e:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 7a38 <ProcessAesDrv+0x338>
    7772:	4a9e      	ldr	r2, [pc, #632]	; (79ec <ProcessAesDrv+0x2ec>)
    7774:	6813      	ldr	r3, [r2, #0]
    7776:	2b00      	cmp	r3, #0
    7778:	d1fc      	bne.n	7774 <ProcessAesDrv+0x74>
    777a:	f1b8 0f00 	cmp.w	r8, #0
    777e:	f040 80dc 	bne.w	793a <ProcessAesDrv+0x23a>
    7782:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7784:	f023 0304 	bic.w	r3, r3, #4
    7788:	2b03      	cmp	r3, #3
    778a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    778c:	d058      	beq.n	7840 <ProcessAesDrv+0x140>
    778e:	2b01      	cmp	r3, #1
    7790:	4b97      	ldr	r3, [pc, #604]	; (79f0 <ProcessAesDrv+0x2f0>)
    7792:	6818      	ldr	r0, [r3, #0]
    7794:	bf0c      	ite	eq
    7796:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
    779a:	f040 0020 	orrne.w	r0, r0, #32
    779e:	f7fe fdc7 	bl	6330 <CC_HalMaskInterrupt>
    77a2:	2200      	movs	r2, #0
    77a4:	4b90      	ldr	r3, [pc, #576]	; (79e8 <ProcessAesDrv+0x2e8>)
    77a6:	2001      	movs	r0, #1
    77a8:	601a      	str	r2, [r3, #0]
    77aa:	f7fe fe89 	bl	64c0 <CC_PalPowerSaveModeSelect>
    77ae:	2800      	cmp	r0, #0
    77b0:	f040 80bf 	bne.w	7932 <ProcessAesDrv+0x232>
    77b4:	488b      	ldr	r0, [pc, #556]	; (79e4 <ProcessAesDrv+0x2e4>)
    77b6:	f7fe fe5b 	bl	6470 <CC_PalMutexUnlock>
    77ba:	2800      	cmp	r0, #0
    77bc:	f040 80b2 	bne.w	7924 <ProcessAesDrv+0x224>
    77c0:	4648      	mov	r0, r9
    77c2:	b007      	add	sp, #28
    77c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    77c8:	2b01      	cmp	r3, #1
    77ca:	d1af      	bne.n	772c <ProcessAesDrv+0x2c>
    77cc:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
    77d0:	d3ac      	bcc.n	772c <ProcessAesDrv+0x2c>
    77d2:	f8df 9268 	ldr.w	r9, [pc, #616]	; 7a3c <ProcessAesDrv+0x33c>
    77d6:	4648      	mov	r0, r9
    77d8:	b007      	add	sp, #28
    77da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    77de:	3b06      	subs	r3, #6
    77e0:	2b01      	cmp	r3, #1
    77e2:	d8c4      	bhi.n	776e <ProcessAesDrv+0x6e>
    77e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    77e6:	2b01      	cmp	r3, #1
    77e8:	f200 80d6 	bhi.w	7998 <ProcessAesDrv+0x298>
    77ec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    77ee:	2b01      	cmp	r3, #1
    77f0:	d837      	bhi.n	7862 <ProcessAesDrv+0x162>
    77f2:	6e23      	ldr	r3, [r4, #96]	; 0x60
    77f4:	2b01      	cmp	r3, #1
    77f6:	f200 8134 	bhi.w	7a62 <ProcessAesDrv+0x362>
    77fa:	4620      	mov	r0, r4
    77fc:	f7ff ff04 	bl	7608 <InitAes.part.0>
    7800:	4681      	mov	r9, r0
    7802:	2800      	cmp	r0, #0
    7804:	d1b5      	bne.n	7772 <ProcessAesDrv+0x72>
    7806:	4620      	mov	r0, r4
    7808:	f7ff fe8c 	bl	7524 <LoadAesKey>
    780c:	4681      	mov	r9, r0
    780e:	2800      	cmp	r0, #0
    7810:	d1af      	bne.n	7772 <ProcessAesDrv+0x72>
    7812:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7814:	2b07      	cmp	r3, #7
    7816:	d8aa      	bhi.n	776e <ProcessAesDrv+0x6e>
    7818:	a201      	add	r2, pc, #4	; (adr r2, 7820 <ProcessAesDrv+0x120>)
    781a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    781e:	bf00      	nop
    7820:	0000787f 	.word	0x0000787f
    7824:	00007869 	.word	0x00007869
    7828:	000079db 	.word	0x000079db
    782c:	00007869 	.word	0x00007869
    7830:	0000776f 	.word	0x0000776f
    7834:	0000776f 	.word	0x0000776f
    7838:	000079db 	.word	0x000079db
    783c:	00007869 	.word	0x00007869
    7840:	2b01      	cmp	r3, #1
    7842:	4b6b      	ldr	r3, [pc, #428]	; (79f0 <ProcessAesDrv+0x2f0>)
    7844:	6818      	ldr	r0, [r3, #0]
    7846:	bf0c      	ite	eq
    7848:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
    784c:	f040 0010 	orrne.w	r0, r0, #16
    7850:	f7fe fd6e 	bl	6330 <CC_HalMaskInterrupt>
    7854:	e7a5      	b.n	77a2 <ProcessAesDrv+0xa2>
    7856:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 7a40 <ProcessAesDrv+0x340>
    785a:	4648      	mov	r0, r9
    785c:	b007      	add	sp, #28
    785e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7862:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 7a44 <ProcessAesDrv+0x344>
    7866:	e784      	b.n	7772 <ProcessAesDrv+0x72>
    7868:	6821      	ldr	r1, [r4, #0]
    786a:	4a62      	ldr	r2, [pc, #392]	; (79f4 <ProcessAesDrv+0x2f4>)
    786c:	4b62      	ldr	r3, [pc, #392]	; (79f8 <ProcessAesDrv+0x2f8>)
    786e:	6011      	str	r1, [r2, #0]
    7870:	6861      	ldr	r1, [r4, #4]
    7872:	6019      	str	r1, [r3, #0]
    7874:	68a1      	ldr	r1, [r4, #8]
    7876:	6091      	str	r1, [r2, #8]
    7878:	68e2      	ldr	r2, [r4, #12]
    787a:	609a      	str	r2, [r3, #8]
    787c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    787e:	f023 0304 	bic.w	r3, r3, #4
    7882:	2b03      	cmp	r3, #3
    7884:	682a      	ldr	r2, [r5, #0]
    7886:	d009      	beq.n	789c <ProcessAesDrv+0x19c>
    7888:	6e21      	ldr	r1, [r4, #96]	; 0x60
    788a:	6833      	ldr	r3, [r6, #0]
    788c:	2901      	cmp	r1, #1
    788e:	bf07      	ittee	eq
    7890:	485a      	ldreq	r0, [pc, #360]	; (79fc <ProcessAesDrv+0x2fc>)
    7892:	495b      	ldreq	r1, [pc, #364]	; (7a00 <ProcessAesDrv+0x300>)
    7894:	485b      	ldrne	r0, [pc, #364]	; (7a04 <ProcessAesDrv+0x304>)
    7896:	495c      	ldrne	r1, [pc, #368]	; (7a08 <ProcessAesDrv+0x308>)
    7898:	6003      	str	r3, [r0, #0]
    789a:	600f      	str	r7, [r1, #0]
    789c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    789e:	2b01      	cmp	r3, #1
    78a0:	bf0b      	itete	eq
    78a2:	4b5a      	ldreq	r3, [pc, #360]	; (7a0c <ProcessAesDrv+0x30c>)
    78a4:	4b5a      	ldrne	r3, [pc, #360]	; (7a10 <ProcessAesDrv+0x310>)
    78a6:	495b      	ldreq	r1, [pc, #364]	; (7a14 <ProcessAesDrv+0x314>)
    78a8:	495b      	ldrne	r1, [pc, #364]	; (7a18 <ProcessAesDrv+0x318>)
    78aa:	600a      	str	r2, [r1, #0]
    78ac:	601f      	str	r7, [r3, #0]
    78ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
    78b0:	f023 0304 	bic.w	r3, r3, #4
    78b4:	2b03      	cmp	r3, #3
    78b6:	d075      	beq.n	79a4 <ProcessAesDrv+0x2a4>
    78b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
    78ba:	2b01      	cmp	r3, #1
    78bc:	bf0c      	ite	eq
    78be:	2080      	moveq	r0, #128	; 0x80
    78c0:	2020      	movne	r0, #32
    78c2:	f7fe fd3b 	bl	633c <CC_HalWaitInterrupt>
    78c6:	4681      	mov	r9, r0
    78c8:	2800      	cmp	r0, #0
    78ca:	f47f af52 	bne.w	7772 <ProcessAesDrv+0x72>
    78ce:	4b47      	ldr	r3, [pc, #284]	; (79ec <ProcessAesDrv+0x2ec>)
    78d0:	681a      	ldr	r2, [r3, #0]
    78d2:	2a00      	cmp	r2, #0
    78d4:	d1fc      	bne.n	78d0 <ProcessAesDrv+0x1d0>
    78d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    78d8:	4691      	mov	r9, r2
    78da:	3b01      	subs	r3, #1
    78dc:	2b06      	cmp	r3, #6
    78de:	d811      	bhi.n	7904 <ProcessAesDrv+0x204>
    78e0:	e8df f003 	tbb	[pc, r3]
    78e4:	1004bc04 	.word	0x1004bc04
    78e8:	bc10      	.short	0xbc10
    78ea:	04          	.byte	0x04
    78eb:	00          	.byte	0x00
    78ec:	4a41      	ldr	r2, [pc, #260]	; (79f4 <ProcessAesDrv+0x2f4>)
    78ee:	4b42      	ldr	r3, [pc, #264]	; (79f8 <ProcessAesDrv+0x2f8>)
    78f0:	6811      	ldr	r1, [r2, #0]
    78f2:	3208      	adds	r2, #8
    78f4:	6021      	str	r1, [r4, #0]
    78f6:	6819      	ldr	r1, [r3, #0]
    78f8:	3308      	adds	r3, #8
    78fa:	6061      	str	r1, [r4, #4]
    78fc:	6812      	ldr	r2, [r2, #0]
    78fe:	60a2      	str	r2, [r4, #8]
    7900:	681b      	ldr	r3, [r3, #0]
    7902:	60e3      	str	r3, [r4, #12]
    7904:	2301      	movs	r3, #1
    7906:	65a3      	str	r3, [r4, #88]	; 0x58
    7908:	e733      	b.n	7772 <ProcessAesDrv+0x72>
    790a:	4844      	ldr	r0, [pc, #272]	; (7a1c <ProcessAesDrv+0x31c>)
    790c:	f7fd fe5e 	bl	55cc <CC_PalAbort>
    7910:	2000      	movs	r0, #0
    7912:	f7fe fdd5 	bl	64c0 <CC_PalPowerSaveModeSelect>
    7916:	2800      	cmp	r0, #0
    7918:	f43f af1d 	beq.w	7756 <ProcessAesDrv+0x56>
    791c:	4840      	ldr	r0, [pc, #256]	; (7a20 <ProcessAesDrv+0x320>)
    791e:	f7fd fe55 	bl	55cc <CC_PalAbort>
    7922:	e718      	b.n	7756 <ProcessAesDrv+0x56>
    7924:	483f      	ldr	r0, [pc, #252]	; (7a24 <ProcessAesDrv+0x324>)
    7926:	f7fd fe51 	bl	55cc <CC_PalAbort>
    792a:	4648      	mov	r0, r9
    792c:	b007      	add	sp, #28
    792e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7932:	483d      	ldr	r0, [pc, #244]	; (7a28 <ProcessAesDrv+0x328>)
    7934:	f7fd fe4a 	bl	55cc <CC_PalAbort>
    7938:	e73c      	b.n	77b4 <ProcessAesDrv+0xb4>
    793a:	2304      	movs	r3, #4
    793c:	2120      	movs	r1, #32
    793e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    7942:	f104 0010 	add.w	r0, r4, #16
    7946:	f7ff fb49 	bl	6fdc <CC_PalMemSetZeroPlat>
    794a:	e71a      	b.n	7782 <ProcessAesDrv+0x82>
    794c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    794e:	6c20      	ldr	r0, [r4, #64]	; 0x40
    7950:	f000 f9d2 	bl	7cf8 <kmu_validate_slot_and_size>
    7954:	b9e8      	cbnz	r0, 7992 <ProcessAesDrv+0x292>
    7956:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 7a48 <ProcessAesDrv+0x348>
    795a:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 7a4c <ProcessAesDrv+0x34c>
    795e:	f8d8 3000 	ldr.w	r3, [r8]
    7962:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 7a50 <ProcessAesDrv+0x350>
    7966:	681b      	ldr	r3, [r3, #0]
    7968:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 7a54 <ProcessAesDrv+0x354>
    796c:	f8cb 3000 	str.w	r3, [fp]
    7970:	f8d8 3000 	ldr.w	r3, [r8]
    7974:	4a2d      	ldr	r2, [pc, #180]	; (7a2c <ProcessAesDrv+0x32c>)
    7976:	685b      	ldr	r3, [r3, #4]
    7978:	f8ca 3000 	str.w	r3, [sl]
    797c:	f8d8 3000 	ldr.w	r3, [r8]
    7980:	689b      	ldr	r3, [r3, #8]
    7982:	f8c9 3000 	str.w	r3, [r9]
    7986:	f8d8 3000 	ldr.w	r3, [r8]
    798a:	68db      	ldr	r3, [r3, #12]
    798c:	6013      	str	r3, [r2, #0]
    798e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7990:	b171      	cbz	r1, 79b0 <ProcessAesDrv+0x2b0>
    7992:	f04f 0801 	mov.w	r8, #1
    7996:	e6d0      	b.n	773a <ProcessAesDrv+0x3a>
    7998:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 7a58 <ProcessAesDrv+0x358>
    799c:	e6e9      	b.n	7772 <ProcessAesDrv+0x72>
    799e:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
    79a2:	e70d      	b.n	77c0 <ProcessAesDrv+0xc0>
    79a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    79a6:	2b01      	cmp	r3, #1
    79a8:	bf0c      	ite	eq
    79aa:	2040      	moveq	r0, #64	; 0x40
    79ac:	2010      	movne	r0, #16
    79ae:	e788      	b.n	78c2 <ProcessAesDrv+0x1c2>
    79b0:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
    79b4:	9300      	str	r3, [sp, #0]
    79b6:	2310      	movs	r3, #16
    79b8:	f104 0010 	add.w	r0, r4, #16
    79bc:	e9cd 2001 	strd	r2, r0, [sp, #4]
    79c0:	9303      	str	r3, [sp, #12]
    79c2:	9005      	str	r0, [sp, #20]
    79c4:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
    79c8:	6c20      	ldr	r0, [r4, #64]	; 0x40
    79ca:	f000 fa93 	bl	7ef4 <kmu_derive_cmac>
    79ce:	2800      	cmp	r0, #0
    79d0:	d14a      	bne.n	7a68 <ProcessAesDrv+0x368>
    79d2:	2300      	movs	r3, #0
    79d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    79d8:	e7db      	b.n	7992 <ProcessAesDrv+0x292>
    79da:	6821      	ldr	r1, [r4, #0]
    79dc:	4a14      	ldr	r2, [pc, #80]	; (7a30 <ProcessAesDrv+0x330>)
    79de:	4b15      	ldr	r3, [pc, #84]	; (7a34 <ProcessAesDrv+0x334>)
    79e0:	e745      	b.n	786e <ProcessAesDrv+0x16e>
    79e2:	bf00      	nop
    79e4:	200000e8 	.word	0x200000e8
    79e8:	50841810 	.word	0x50841810
    79ec:	50841910 	.word	0x50841910
    79f0:	50841a04 	.word	0x50841a04
    79f4:	50841440 	.word	0x50841440
    79f8:	50841444 	.word	0x50841444
    79fc:	50841d28 	.word	0x50841d28
    7a00:	50841d2c 	.word	0x50841d2c
    7a04:	50841d30 	.word	0x50841d30
    7a08:	50841d34 	.word	0x50841d34
    7a0c:	50841c2c 	.word	0x50841c2c
    7a10:	50841c34 	.word	0x50841c34
    7a14:	50841c28 	.word	0x50841c28
    7a18:	50841c30 	.word	0x50841c30
    7a1c:	00008bf8 	.word	0x00008bf8
    7a20:	00008c10 	.word	0x00008c10
    7a24:	00008c50 	.word	0x00008c50
    7a28:	00008c30 	.word	0x00008c30
    7a2c:	5084140c 	.word	0x5084140c
    7a30:	50841460 	.word	0x50841460
    7a34:	50841464 	.word	0x50841464
    7a38:	00f10001 	.word	0x00f10001
    7a3c:	00f10005 	.word	0x00f10005
    7a40:	00f1000b 	.word	0x00f1000b
    7a44:	00f10003 	.word	0x00f10003
    7a48:	200000d8 	.word	0x200000d8
    7a4c:	50841400 	.word	0x50841400
    7a50:	50841404 	.word	0x50841404
    7a54:	50841408 	.word	0x50841408
    7a58:	00f10002 	.word	0x00f10002
    7a5c:	4a0f      	ldr	r2, [pc, #60]	; (7a9c <ProcessAesDrv+0x39c>)
    7a5e:	4b10      	ldr	r3, [pc, #64]	; (7aa0 <ProcessAesDrv+0x3a0>)
    7a60:	e746      	b.n	78f0 <ProcessAesDrv+0x1f0>
    7a62:	f8df 9044 	ldr.w	r9, [pc, #68]	; 7aa8 <ProcessAesDrv+0x3a8>
    7a66:	e684      	b.n	7772 <ProcessAesDrv+0x72>
    7a68:	f8d8 3000 	ldr.w	r3, [r8]
    7a6c:	9805      	ldr	r0, [sp, #20]
    7a6e:	681b      	ldr	r3, [r3, #0]
    7a70:	4a0c      	ldr	r2, [pc, #48]	; (7aa4 <ProcessAesDrv+0x3a4>)
    7a72:	f8cb 3000 	str.w	r3, [fp]
    7a76:	f8d8 3000 	ldr.w	r3, [r8]
    7a7a:	2110      	movs	r1, #16
    7a7c:	685b      	ldr	r3, [r3, #4]
    7a7e:	f8ca 3000 	str.w	r3, [sl]
    7a82:	f8d8 3000 	ldr.w	r3, [r8]
    7a86:	689b      	ldr	r3, [r3, #8]
    7a88:	f8c9 3000 	str.w	r3, [r9]
    7a8c:	f8d8 3000 	ldr.w	r3, [r8]
    7a90:	68db      	ldr	r3, [r3, #12]
    7a92:	6013      	str	r3, [r2, #0]
    7a94:	f7ff faa2 	bl	6fdc <CC_PalMemSetZeroPlat>
    7a98:	e79b      	b.n	79d2 <ProcessAesDrv+0x2d2>
    7a9a:	bf00      	nop
    7a9c:	50841460 	.word	0x50841460
    7aa0:	50841464 	.word	0x50841464
    7aa4:	5084140c 	.word	0x5084140c
    7aa8:	00f10004 	.word	0x00f10004

00007aac <FinishAesDrv>:
    7aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ab0:	b301      	cbz	r1, 7af4 <FinishAesDrv+0x48>
    7ab2:	b1fa      	cbz	r2, 7af4 <FinishAesDrv+0x48>
    7ab4:	4604      	mov	r4, r0
    7ab6:	2800      	cmp	r0, #0
    7ab8:	d07a      	beq.n	7bb0 <FinishAesDrv+0x104>
    7aba:	461d      	mov	r5, r3
    7abc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    7abe:	460e      	mov	r6, r1
    7ac0:	2b07      	cmp	r3, #7
    7ac2:	d01b      	beq.n	7afc <FinishAesDrv+0x50>
    7ac4:	b95d      	cbnz	r5, 7ade <FinishAesDrv+0x32>
    7ac6:	2b03      	cmp	r3, #3
    7ac8:	d110      	bne.n	7aec <FinishAesDrv+0x40>
    7aca:	6d83      	ldr	r3, [r0, #88]	; 0x58
    7acc:	b973      	cbnz	r3, 7aec <FinishAesDrv+0x40>
    7ace:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
    7ad2:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
    7ad6:	2510      	movs	r5, #16
    7ad8:	f100 0364 	add.w	r3, r0, #100	; 0x64
    7adc:	600b      	str	r3, [r1, #0]
    7ade:	462b      	mov	r3, r5
    7ae0:	4631      	mov	r1, r6
    7ae2:	4620      	mov	r0, r4
    7ae4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7ae8:	f7ff be0a 	b.w	7700 <ProcessAesDrv>
    7aec:	462f      	mov	r7, r5
    7aee:	4638      	mov	r0, r7
    7af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7af4:	4f68      	ldr	r7, [pc, #416]	; (7c98 <FinishAesDrv+0x1ec>)
    7af6:	4638      	mov	r0, r7
    7af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7afc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    7afe:	2b00      	cmp	r3, #0
    7b00:	d159      	bne.n	7bb6 <FinishAesDrv+0x10a>
    7b02:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
    7b06:	d25b      	bcs.n	7bc0 <FinishAesDrv+0x114>
    7b08:	b915      	cbnz	r5, 7b10 <FinishAesDrv+0x64>
    7b0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
    7b0c:	2b00      	cmp	r3, #0
    7b0e:	d157      	bne.n	7bc0 <FinishAesDrv+0x114>
    7b10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7b14:	4861      	ldr	r0, [pc, #388]	; (7c9c <FinishAesDrv+0x1f0>)
    7b16:	f7fe fca3 	bl	6460 <CC_PalMutexLock>
    7b1a:	2800      	cmp	r0, #0
    7b1c:	f040 809a 	bne.w	7c54 <FinishAesDrv+0x1a8>
    7b20:	2000      	movs	r0, #0
    7b22:	f7fe fccd 	bl	64c0 <CC_PalPowerSaveModeSelect>
    7b26:	2800      	cmp	r0, #0
    7b28:	f040 8090 	bne.w	7c4c <FinishAesDrv+0x1a0>
    7b2c:	2101      	movs	r1, #1
    7b2e:	4b5c      	ldr	r3, [pc, #368]	; (7ca0 <FinishAesDrv+0x1f4>)
    7b30:	4a5c      	ldr	r2, [pc, #368]	; (7ca4 <FinishAesDrv+0x1f8>)
    7b32:	6019      	str	r1, [r3, #0]
    7b34:	6813      	ldr	r3, [r2, #0]
    7b36:	2b00      	cmp	r3, #0
    7b38:	d1fc      	bne.n	7b34 <FinishAesDrv+0x88>
    7b3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7b3c:	2b03      	cmp	r3, #3
    7b3e:	dd20      	ble.n	7b82 <FinishAesDrv+0xd6>
    7b40:	3b06      	subs	r3, #6
    7b42:	2b01      	cmp	r3, #1
    7b44:	d81f      	bhi.n	7b86 <FinishAesDrv+0xda>
    7b46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7b48:	2b01      	cmp	r3, #1
    7b4a:	d83b      	bhi.n	7bc4 <FinishAesDrv+0x118>
    7b4c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    7b4e:	2b01      	cmp	r3, #1
    7b50:	f200 8088 	bhi.w	7c64 <FinishAesDrv+0x1b8>
    7b54:	6e23      	ldr	r3, [r4, #96]	; 0x60
    7b56:	2b01      	cmp	r3, #1
    7b58:	f200 8086 	bhi.w	7c68 <FinishAesDrv+0x1bc>
    7b5c:	4620      	mov	r0, r4
    7b5e:	f7ff fd53 	bl	7608 <InitAes.part.0>
    7b62:	4607      	mov	r7, r0
    7b64:	b980      	cbnz	r0, 7b88 <FinishAesDrv+0xdc>
    7b66:	4620      	mov	r0, r4
    7b68:	f7ff fcdc 	bl	7524 <LoadAesKey>
    7b6c:	4607      	mov	r7, r0
    7b6e:	b958      	cbnz	r0, 7b88 <FinishAesDrv+0xdc>
    7b70:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7b72:	2b07      	cmp	r3, #7
    7b74:	d807      	bhi.n	7b86 <FinishAesDrv+0xda>
    7b76:	e8df f003 	tbb	[pc, r3]
    7b7a:	2731      	.short	0x2731
    7b7c:	06062755 	.word	0x06062755
    7b80:	2755      	.short	0x2755
    7b82:	2b00      	cmp	r3, #0
    7b84:	dadf      	bge.n	7b46 <FinishAesDrv+0x9a>
    7b86:	4f48      	ldr	r7, [pc, #288]	; (7ca8 <FinishAesDrv+0x1fc>)
    7b88:	4a46      	ldr	r2, [pc, #280]	; (7ca4 <FinishAesDrv+0x1f8>)
    7b8a:	6813      	ldr	r3, [r2, #0]
    7b8c:	2b00      	cmp	r3, #0
    7b8e:	d1fc      	bne.n	7b8a <FinishAesDrv+0xde>
    7b90:	4a43      	ldr	r2, [pc, #268]	; (7ca0 <FinishAesDrv+0x1f4>)
    7b92:	2001      	movs	r0, #1
    7b94:	6013      	str	r3, [r2, #0]
    7b96:	f7fe fc93 	bl	64c0 <CC_PalPowerSaveModeSelect>
    7b9a:	2800      	cmp	r0, #0
    7b9c:	d15e      	bne.n	7c5c <FinishAesDrv+0x1b0>
    7b9e:	483f      	ldr	r0, [pc, #252]	; (7c9c <FinishAesDrv+0x1f0>)
    7ba0:	f7fe fc66 	bl	6470 <CC_PalMutexUnlock>
    7ba4:	2800      	cmp	r0, #0
    7ba6:	d0a2      	beq.n	7aee <FinishAesDrv+0x42>
    7ba8:	4840      	ldr	r0, [pc, #256]	; (7cac <FinishAesDrv+0x200>)
    7baa:	f7fd fd0f 	bl	55cc <CC_PalAbort>
    7bae:	e79e      	b.n	7aee <FinishAesDrv+0x42>
    7bb0:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
    7bb4:	e79b      	b.n	7aee <FinishAesDrv+0x42>
    7bb6:	2b01      	cmp	r3, #1
    7bb8:	d1a6      	bne.n	7b08 <FinishAesDrv+0x5c>
    7bba:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    7bbe:	d3a3      	bcc.n	7b08 <FinishAesDrv+0x5c>
    7bc0:	4f3b      	ldr	r7, [pc, #236]	; (7cb0 <FinishAesDrv+0x204>)
    7bc2:	e794      	b.n	7aee <FinishAesDrv+0x42>
    7bc4:	4f3b      	ldr	r7, [pc, #236]	; (7cb4 <FinishAesDrv+0x208>)
    7bc6:	e7df      	b.n	7b88 <FinishAesDrv+0xdc>
    7bc8:	6821      	ldr	r1, [r4, #0]
    7bca:	4a3b      	ldr	r2, [pc, #236]	; (7cb8 <FinishAesDrv+0x20c>)
    7bcc:	4b3b      	ldr	r3, [pc, #236]	; (7cbc <FinishAesDrv+0x210>)
    7bce:	6011      	str	r1, [r2, #0]
    7bd0:	6861      	ldr	r1, [r4, #4]
    7bd2:	6019      	str	r1, [r3, #0]
    7bd4:	68a1      	ldr	r1, [r4, #8]
    7bd6:	6091      	str	r1, [r2, #8]
    7bd8:	68e2      	ldr	r2, [r4, #12]
    7bda:	609a      	str	r2, [r3, #8]
    7bdc:	2301      	movs	r3, #1
    7bde:	4938      	ldr	r1, [pc, #224]	; (7cc0 <FinishAesDrv+0x214>)
    7be0:	4a38      	ldr	r2, [pc, #224]	; (7cc4 <FinishAesDrv+0x218>)
    7be2:	600b      	str	r3, [r1, #0]
    7be4:	6015      	str	r5, [r2, #0]
    7be6:	2d00      	cmp	r5, #0
    7be8:	d140      	bne.n	7c6c <FinishAesDrv+0x1c0>
    7bea:	6da2      	ldr	r2, [r4, #88]	; 0x58
    7bec:	b90a      	cbnz	r2, 7bf2 <FinishAesDrv+0x146>
    7bee:	4a36      	ldr	r2, [pc, #216]	; (7cc8 <FinishAesDrv+0x21c>)
    7bf0:	6013      	str	r3, [r2, #0]
    7bf2:	4b2c      	ldr	r3, [pc, #176]	; (7ca4 <FinishAesDrv+0x1f8>)
    7bf4:	681f      	ldr	r7, [r3, #0]
    7bf6:	2f00      	cmp	r7, #0
    7bf8:	d1fc      	bne.n	7bf4 <FinishAesDrv+0x148>
    7bfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7bfc:	3b01      	subs	r3, #1
    7bfe:	2b06      	cmp	r3, #6
    7c00:	d8c2      	bhi.n	7b88 <FinishAesDrv+0xdc>
    7c02:	a201      	add	r2, pc, #4	; (adr r2, 7c08 <FinishAesDrv+0x15c>)
    7c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7c08:	00007c2d 	.word	0x00007c2d
    7c0c:	00007c47 	.word	0x00007c47
    7c10:	00007c2d 	.word	0x00007c2d
    7c14:	00007b89 	.word	0x00007b89
    7c18:	00007b89 	.word	0x00007b89
    7c1c:	00007c47 	.word	0x00007c47
    7c20:	00007c2d 	.word	0x00007c2d
    7c24:	6821      	ldr	r1, [r4, #0]
    7c26:	4a29      	ldr	r2, [pc, #164]	; (7ccc <FinishAesDrv+0x220>)
    7c28:	4b29      	ldr	r3, [pc, #164]	; (7cd0 <FinishAesDrv+0x224>)
    7c2a:	e7d0      	b.n	7bce <FinishAesDrv+0x122>
    7c2c:	4a22      	ldr	r2, [pc, #136]	; (7cb8 <FinishAesDrv+0x20c>)
    7c2e:	4b23      	ldr	r3, [pc, #140]	; (7cbc <FinishAesDrv+0x210>)
    7c30:	6811      	ldr	r1, [r2, #0]
    7c32:	3208      	adds	r2, #8
    7c34:	6021      	str	r1, [r4, #0]
    7c36:	6819      	ldr	r1, [r3, #0]
    7c38:	3308      	adds	r3, #8
    7c3a:	6061      	str	r1, [r4, #4]
    7c3c:	6812      	ldr	r2, [r2, #0]
    7c3e:	60a2      	str	r2, [r4, #8]
    7c40:	681b      	ldr	r3, [r3, #0]
    7c42:	60e3      	str	r3, [r4, #12]
    7c44:	e7a0      	b.n	7b88 <FinishAesDrv+0xdc>
    7c46:	4a21      	ldr	r2, [pc, #132]	; (7ccc <FinishAesDrv+0x220>)
    7c48:	4b21      	ldr	r3, [pc, #132]	; (7cd0 <FinishAesDrv+0x224>)
    7c4a:	e7f1      	b.n	7c30 <FinishAesDrv+0x184>
    7c4c:	4821      	ldr	r0, [pc, #132]	; (7cd4 <FinishAesDrv+0x228>)
    7c4e:	f7fd fcbd 	bl	55cc <CC_PalAbort>
    7c52:	e76b      	b.n	7b2c <FinishAesDrv+0x80>
    7c54:	4820      	ldr	r0, [pc, #128]	; (7cd8 <FinishAesDrv+0x22c>)
    7c56:	f7fd fcb9 	bl	55cc <CC_PalAbort>
    7c5a:	e761      	b.n	7b20 <FinishAesDrv+0x74>
    7c5c:	481f      	ldr	r0, [pc, #124]	; (7cdc <FinishAesDrv+0x230>)
    7c5e:	f7fd fcb5 	bl	55cc <CC_PalAbort>
    7c62:	e79c      	b.n	7b9e <FinishAesDrv+0xf2>
    7c64:	4f1e      	ldr	r7, [pc, #120]	; (7ce0 <FinishAesDrv+0x234>)
    7c66:	e78f      	b.n	7b88 <FinishAesDrv+0xdc>
    7c68:	4f1e      	ldr	r7, [pc, #120]	; (7ce4 <FinishAesDrv+0x238>)
    7c6a:	e78d      	b.n	7b88 <FinishAesDrv+0xdc>
    7c6c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    7c6e:	6833      	ldr	r3, [r6, #0]
    7c70:	2a01      	cmp	r2, #1
    7c72:	d00a      	beq.n	7c8a <FinishAesDrv+0x1de>
    7c74:	2010      	movs	r0, #16
    7c76:	491c      	ldr	r1, [pc, #112]	; (7ce8 <FinishAesDrv+0x23c>)
    7c78:	4a1c      	ldr	r2, [pc, #112]	; (7cec <FinishAesDrv+0x240>)
    7c7a:	600b      	str	r3, [r1, #0]
    7c7c:	6015      	str	r5, [r2, #0]
    7c7e:	f7fe fb5d 	bl	633c <CC_HalWaitInterrupt>
    7c82:	4607      	mov	r7, r0
    7c84:	2800      	cmp	r0, #0
    7c86:	d0b4      	beq.n	7bf2 <FinishAesDrv+0x146>
    7c88:	e77e      	b.n	7b88 <FinishAesDrv+0xdc>
    7c8a:	4919      	ldr	r1, [pc, #100]	; (7cf0 <FinishAesDrv+0x244>)
    7c8c:	4a19      	ldr	r2, [pc, #100]	; (7cf4 <FinishAesDrv+0x248>)
    7c8e:	600b      	str	r3, [r1, #0]
    7c90:	2040      	movs	r0, #64	; 0x40
    7c92:	6015      	str	r5, [r2, #0]
    7c94:	e7f3      	b.n	7c7e <FinishAesDrv+0x1d2>
    7c96:	bf00      	nop
    7c98:	00f1000b 	.word	0x00f1000b
    7c9c:	200000e8 	.word	0x200000e8
    7ca0:	50841810 	.word	0x50841810
    7ca4:	50841910 	.word	0x50841910
    7ca8:	00f10001 	.word	0x00f10001
    7cac:	00008c50 	.word	0x00008c50
    7cb0:	00f10005 	.word	0x00f10005
    7cb4:	00f10002 	.word	0x00f10002
    7cb8:	50841440 	.word	0x50841440
    7cbc:	50841444 	.word	0x50841444
    7cc0:	5084147c 	.word	0x5084147c
    7cc4:	508414bc 	.word	0x508414bc
    7cc8:	50841524 	.word	0x50841524
    7ccc:	50841460 	.word	0x50841460
    7cd0:	50841464 	.word	0x50841464
    7cd4:	00008c10 	.word	0x00008c10
    7cd8:	00008bf8 	.word	0x00008bf8
    7cdc:	00008c30 	.word	0x00008c30
    7ce0:	00f10003 	.word	0x00f10003
    7ce4:	00f10004 	.word	0x00f10004
    7ce8:	50841c30 	.word	0x50841c30
    7cec:	50841c34 	.word	0x50841c34
    7cf0:	50841c28 	.word	0x50841c28
    7cf4:	50841c2c 	.word	0x50841c2c

00007cf8 <kmu_validate_slot_and_size>:
    7cf8:	287f      	cmp	r0, #127	; 0x7f
    7cfa:	d80c      	bhi.n	7d16 <kmu_validate_slot_and_size+0x1e>
    7cfc:	b149      	cbz	r1, 7d12 <kmu_validate_slot_and_size+0x1a>
    7cfe:	2903      	cmp	r1, #3
    7d00:	d001      	beq.n	7d06 <kmu_validate_slot_and_size+0xe>
    7d02:	4806      	ldr	r0, [pc, #24]	; (7d1c <kmu_validate_slot_and_size+0x24>)
    7d04:	4770      	bx	lr
    7d06:	4906      	ldr	r1, [pc, #24]	; (7d20 <kmu_validate_slot_and_size+0x28>)
    7d08:	287f      	cmp	r0, #127	; 0x7f
    7d0a:	bf0c      	ite	eq
    7d0c:	4608      	moveq	r0, r1
    7d0e:	2000      	movne	r0, #0
    7d10:	4770      	bx	lr
    7d12:	4608      	mov	r0, r1
    7d14:	4770      	bx	lr
    7d16:	4802      	ldr	r0, [pc, #8]	; (7d20 <kmu_validate_slot_and_size+0x28>)
    7d18:	4770      	bx	lr
    7d1a:	bf00      	nop
    7d1c:	00f70003 	.word	0x00f70003
    7d20:	00f70001 	.word	0x00f70001

00007d24 <kmu_validate_slot_and_size_no_kdr>:
    7d24:	b4f0      	push	{r4, r5, r6, r7}
    7d26:	4a1c      	ldr	r2, [pc, #112]	; (7d98 <kmu_validate_slot_and_size_no_kdr+0x74>)
    7d28:	00c5      	lsls	r5, r0, #3
    7d2a:	1c44      	adds	r4, r0, #1
    7d2c:	f505 037f 	add.w	r3, r5, #16711680	; 0xff0000
    7d30:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
    7d34:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
    7d38:	681c      	ldr	r4, [r3, #0]
    7d3a:	b082      	sub	sp, #8
    7d3c:	f3bf 8f4f 	dsb	sy
    7d40:	2300      	movs	r3, #0
    7d42:	9400      	str	r4, [sp, #0]
    7d44:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    7d48:	9e00      	ldr	r6, [sp, #0]
    7d4a:	4c14      	ldr	r4, [pc, #80]	; (7d9c <kmu_validate_slot_and_size_no_kdr+0x78>)
    7d4c:	42a6      	cmp	r6, r4
    7d4e:	d018      	beq.n	7d82 <kmu_validate_slot_and_size_no_kdr+0x5e>
    7d50:	b1a9      	cbz	r1, 7d7e <kmu_validate_slot_and_size_no_kdr+0x5a>
    7d52:	4e13      	ldr	r6, [pc, #76]	; (7da0 <kmu_validate_slot_and_size_no_kdr+0x7c>)
    7d54:	1c87      	adds	r7, r0, #2
    7d56:	442e      	add	r6, r5
    7d58:	f8c2 7500 	str.w	r7, [r2, #1280]	; 0x500
    7d5c:	6835      	ldr	r5, [r6, #0]
    7d5e:	f3bf 8f4f 	dsb	sy
    7d62:	9501      	str	r5, [sp, #4]
    7d64:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    7d68:	9a01      	ldr	r2, [sp, #4]
    7d6a:	42a2      	cmp	r2, r4
    7d6c:	d009      	beq.n	7d82 <kmu_validate_slot_and_size_no_kdr+0x5e>
    7d6e:	287f      	cmp	r0, #127	; 0x7f
    7d70:	d807      	bhi.n	7d82 <kmu_validate_slot_and_size_no_kdr+0x5e>
    7d72:	2903      	cmp	r1, #3
    7d74:	d10b      	bne.n	7d8e <kmu_validate_slot_and_size_no_kdr+0x6a>
    7d76:	287f      	cmp	r0, #127	; 0x7f
    7d78:	d003      	beq.n	7d82 <kmu_validate_slot_and_size_no_kdr+0x5e>
    7d7a:	4618      	mov	r0, r3
    7d7c:	e002      	b.n	7d84 <kmu_validate_slot_and_size_no_kdr+0x60>
    7d7e:	287f      	cmp	r0, #127	; 0x7f
    7d80:	d903      	bls.n	7d8a <kmu_validate_slot_and_size_no_kdr+0x66>
    7d82:	4808      	ldr	r0, [pc, #32]	; (7da4 <kmu_validate_slot_and_size_no_kdr+0x80>)
    7d84:	b002      	add	sp, #8
    7d86:	bcf0      	pop	{r4, r5, r6, r7}
    7d88:	4770      	bx	lr
    7d8a:	4608      	mov	r0, r1
    7d8c:	e7fa      	b.n	7d84 <kmu_validate_slot_and_size_no_kdr+0x60>
    7d8e:	4806      	ldr	r0, [pc, #24]	; (7da8 <kmu_validate_slot_and_size_no_kdr+0x84>)
    7d90:	b002      	add	sp, #8
    7d92:	bcf0      	pop	{r4, r5, r6, r7}
    7d94:	4770      	bx	lr
    7d96:	bf00      	nop
    7d98:	50039000 	.word	0x50039000
    7d9c:	50841a50 	.word	0x50841a50
    7da0:	00ff8408 	.word	0x00ff8408
    7da4:	00f70001 	.word	0x00f70001
    7da8:	00f70003 	.word	0x00f70003

00007dac <kmu_validate_kdr_slot_and_size>:
    7dac:	b9b9      	cbnz	r1, 7dde <kmu_validate_kdr_slot_and_size+0x32>
    7dae:	4a0d      	ldr	r2, [pc, #52]	; (7de4 <kmu_validate_kdr_slot_and_size+0x38>)
    7db0:	00c3      	lsls	r3, r0, #3
    7db2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    7db6:	3001      	adds	r0, #1
    7db8:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    7dbc:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
    7dc0:	b082      	sub	sp, #8
    7dc2:	681b      	ldr	r3, [r3, #0]
    7dc4:	f3bf 8f4f 	dsb	sy
    7dc8:	9301      	str	r3, [sp, #4]
    7dca:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    7dce:	9a01      	ldr	r2, [sp, #4]
    7dd0:	4b05      	ldr	r3, [pc, #20]	; (7de8 <kmu_validate_kdr_slot_and_size+0x3c>)
    7dd2:	4806      	ldr	r0, [pc, #24]	; (7dec <kmu_validate_kdr_slot_and_size+0x40>)
    7dd4:	429a      	cmp	r2, r3
    7dd6:	bf08      	it	eq
    7dd8:	2000      	moveq	r0, #0
    7dda:	b002      	add	sp, #8
    7ddc:	4770      	bx	lr
    7dde:	4804      	ldr	r0, [pc, #16]	; (7df0 <kmu_validate_kdr_slot_and_size+0x44>)
    7de0:	4770      	bx	lr
    7de2:	bf00      	nop
    7de4:	50039000 	.word	0x50039000
    7de8:	50841a50 	.word	0x50841a50
    7dec:	00f70001 	.word	0x00f70001
    7df0:	00f70003 	.word	0x00f70003

00007df4 <kmu_use_kdr_key>:
    7df4:	2000      	movs	r0, #0
    7df6:	2201      	movs	r2, #1
    7df8:	4902      	ldr	r1, [pc, #8]	; (7e04 <kmu_use_kdr_key+0x10>)
    7dfa:	4b03      	ldr	r3, [pc, #12]	; (7e08 <kmu_use_kdr_key+0x14>)
    7dfc:	6008      	str	r0, [r1, #0]
    7dfe:	601a      	str	r2, [r3, #0]
    7e00:	4770      	bx	lr
    7e02:	bf00      	nop
    7e04:	50841a38 	.word	0x50841a38
    7e08:	50841478 	.word	0x50841478

00007e0c <kmu_load_key_aes>:
    7e0c:	b109      	cbz	r1, 7e12 <kmu_load_key_aes+0x6>
    7e0e:	4832      	ldr	r0, [pc, #200]	; (7ed8 <__kernel_ram_size+0x30>)
    7e10:	4770      	bx	lr
    7e12:	b430      	push	{r4, r5}
    7e14:	2401      	movs	r4, #1
    7e16:	4b31      	ldr	r3, [pc, #196]	; (7edc <__kernel_ram_size+0x34>)
    7e18:	4a31      	ldr	r2, [pc, #196]	; (7ee0 <__kernel_ram_size+0x38>)
    7e1a:	b084      	sub	sp, #16
    7e1c:	f8c2 4500 	str.w	r4, [r2, #1280]	; 0x500
    7e20:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
    7e24:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
    7e28:	00c2      	lsls	r2, r0, #3
    7e2a:	9502      	str	r5, [sp, #8]
    7e2c:	9d02      	ldr	r5, [sp, #8]
    7e2e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    7e32:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
    7e36:	4420      	add	r0, r4
    7e38:	9502      	str	r5, [sp, #8]
    7e3a:	9d02      	ldr	r5, [sp, #8]
    7e3c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    7e40:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    7e44:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
    7e48:	9102      	str	r1, [sp, #8]
    7e4a:	9902      	ldr	r1, [sp, #8]
    7e4c:	f502 4204 	add.w	r2, r2, #33792	; 0x8400
    7e50:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    7e54:	6812      	ldr	r2, [r2, #0]
    7e56:	f3bf 8f4f 	dsb	sy
    7e5a:	9203      	str	r2, [sp, #12]
    7e5c:	9903      	ldr	r1, [sp, #12]
    7e5e:	4a21      	ldr	r2, [pc, #132]	; (7ee4 <__kernel_ram_size+0x3c>)
    7e60:	4291      	cmp	r1, r2
    7e62:	d132      	bne.n	7eca <__kernel_ram_size+0x22>
    7e64:	461a      	mov	r2, r3
    7e66:	601c      	str	r4, [r3, #0]
    7e68:	e005      	b.n	7e76 <kmu_load_key_aes+0x6a>
    7e6a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7e6e:	b9db      	cbnz	r3, 7ea8 <__kernel_ram_size>
    7e70:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7e74:	b9c3      	cbnz	r3, 7ea8 <__kernel_ram_size>
    7e76:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    7e7a:	3b00      	subs	r3, #0
    7e7c:	bf18      	it	ne
    7e7e:	2301      	movne	r3, #1
    7e80:	f88d 3005 	strb.w	r3, [sp, #5]
    7e84:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
    7e88:	3b00      	subs	r3, #0
    7e8a:	bf18      	it	ne
    7e8c:	2301      	movne	r3, #1
    7e8e:	f88d 3006 	strb.w	r3, [sp, #6]
    7e92:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    7e96:	3b00      	subs	r3, #0
    7e98:	bf18      	it	ne
    7e9a:	2301      	movne	r3, #1
    7e9c:	f88d 3007 	strb.w	r3, [sp, #7]
    7ea0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    7ea4:	2b00      	cmp	r3, #0
    7ea6:	d0e0      	beq.n	7e6a <kmu_load_key_aes+0x5e>
    7ea8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    7eac:	b98b      	cbnz	r3, 7ed2 <__kernel_ram_size+0x2a>
    7eae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7eb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    7eb6:	b933      	cbnz	r3, 7ec6 <__kernel_ram_size+0x1e>
    7eb8:	4610      	mov	r0, r2
    7eba:	4b08      	ldr	r3, [pc, #32]	; (7edc <__kernel_ram_size+0x34>)
    7ebc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    7ec0:	b004      	add	sp, #16
    7ec2:	bc30      	pop	{r4, r5}
    7ec4:	4770      	bx	lr
    7ec6:	4808      	ldr	r0, [pc, #32]	; (7ee8 <__kernel_ram_size+0x40>)
    7ec8:	e7fa      	b.n	7ec0 <__kernel_ram_size+0x18>
    7eca:	4808      	ldr	r0, [pc, #32]	; (7eec <__kernel_ram_size+0x44>)
    7ecc:	b004      	add	sp, #16
    7ece:	bc30      	pop	{r4, r5}
    7ed0:	4770      	bx	lr
    7ed2:	4807      	ldr	r0, [pc, #28]	; (7ef0 <__kernel_ram_size+0x48>)
    7ed4:	e7f4      	b.n	7ec0 <__kernel_ram_size+0x18>
    7ed6:	bf00      	nop
    7ed8:	00f1000c 	.word	0x00f1000c
    7edc:	50039000 	.word	0x50039000
    7ee0:	50840000 	.word	0x50840000
    7ee4:	50841400 	.word	0x50841400
    7ee8:	00f70002 	.word	0x00f70002
    7eec:	00f70006 	.word	0x00f70006
    7ef0:	00f70001 	.word	0x00f70001

00007ef4 <kmu_derive_cmac>:
    7ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7ef8:	2400      	movs	r4, #0
    7efa:	b0ce      	sub	sp, #312	; 0x138
    7efc:	4605      	mov	r5, r0
    7efe:	e9dd 9658 	ldrd	r9, r6, [sp, #352]	; 0x160
    7f02:	468a      	mov	sl, r1
    7f04:	4617      	mov	r7, r2
    7f06:	4621      	mov	r1, r4
    7f08:	2274      	movs	r2, #116	; 0x74
    7f0a:	a810      	add	r0, sp, #64	; 0x40
    7f0c:	4698      	mov	r8, r3
    7f0e:	f000 fa47 	bl	83a0 <memset>
    7f12:	4621      	mov	r1, r4
    7f14:	2280      	movs	r2, #128	; 0x80
    7f16:	a82e      	add	r0, sp, #184	; 0xb8
    7f18:	942d      	str	r4, [sp, #180]	; 0xb4
    7f1a:	f000 fa41 	bl	83a0 <memset>
    7f1e:	2384      	movs	r3, #132	; 0x84
    7f20:	f5b6 6f7f 	cmp.w	r6, #4080	; 0xff0
    7f24:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    7f28:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
    7f2c:	9306      	str	r3, [sp, #24]
    7f2e:	d873      	bhi.n	8018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
    7f30:	ab06      	add	r3, sp, #24
    7f32:	ac2d      	add	r4, sp, #180	; 0xb4
    7f34:	9301      	str	r3, [sp, #4]
    7f36:	4641      	mov	r1, r8
    7f38:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
    7f3c:	4638      	mov	r0, r7
    7f3e:	9602      	str	r6, [sp, #8]
    7f40:	9400      	str	r4, [sp, #0]
    7f42:	f000 f87d 	bl	8040 <UtilCmacBuildDataForDerivation>
    7f46:	2800      	cmp	r0, #0
    7f48:	d16d      	bne.n	8026 <CONFIG_FPROTECT_BLOCK_SIZE+0x26>
    7f4a:	2200      	movs	r2, #0
    7f4c:	2301      	movs	r3, #1
    7f4e:	2101      	movs	r1, #1
    7f50:	2707      	movs	r7, #7
    7f52:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
    7f56:	4a36      	ldr	r2, [pc, #216]	; (8030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>)
    7f58:	00eb      	lsls	r3, r5, #3
    7f5a:	9520      	str	r5, [sp, #128]	; 0x80
    7f5c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    7f60:	440d      	add	r5, r1
    7f62:	e9cd a71c 	strd	sl, r7, [sp, #112]	; 0x70
    7f66:	901e      	str	r0, [sp, #120]	; 0x78
    7f68:	9128      	str	r1, [sp, #160]	; 0xa0
    7f6a:	f503 4304 	add.w	r3, r3, #33792	; 0x8400
    7f6e:	f8c2 5500 	str.w	r5, [r2, #1280]	; 0x500
    7f72:	681b      	ldr	r3, [r3, #0]
    7f74:	f3bf 8f4f 	dsb	sy
    7f78:	9307      	str	r3, [sp, #28]
    7f7a:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    7f7e:	9a07      	ldr	r2, [sp, #28]
    7f80:	4b2c      	ldr	r3, [pc, #176]	; (8034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>)
    7f82:	429a      	cmp	r2, r3
    7f84:	d142      	bne.n	800c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
    7f86:	2203      	movs	r2, #3
    7f88:	f10d 0317 	add.w	r3, sp, #23
    7f8c:	701a      	strb	r2, [r3, #0]
    7f8e:	781b      	ldrb	r3, [r3, #0]
    7f90:	2110      	movs	r1, #16
    7f92:	a810      	add	r0, sp, #64	; 0x40
    7f94:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    7f98:	f7ff f820 	bl	6fdc <CC_PalMemSetZeroPlat>
    7f9c:	2210      	movs	r2, #16
    7f9e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    7fa2:	9200      	str	r2, [sp, #0]
    7fa4:	4620      	mov	r0, r4
    7fa6:	9906      	ldr	r1, [sp, #24]
    7fa8:	ab0c      	add	r3, sp, #48	; 0x30
    7faa:	aa08      	add	r2, sp, #32
    7fac:	f8cd 8004 	str.w	r8, [sp, #4]
    7fb0:	f7ff f8ec 	bl	718c <SetDataBuffersInfo>
    7fb4:	4607      	mov	r7, r0
    7fb6:	bb00      	cbnz	r0, 7ffa <kmu_derive_cmac+0x106>
    7fb8:	2401      	movs	r4, #1
    7fba:	e010      	b.n	7fde <kmu_derive_cmac+0xea>
    7fbc:	2e10      	cmp	r6, #16
    7fbe:	4635      	mov	r5, r6
    7fc0:	bf28      	it	cs
    7fc2:	2510      	movcs	r5, #16
    7fc4:	a910      	add	r1, sp, #64	; 0x40
    7fc6:	462a      	mov	r2, r5
    7fc8:	f7ff f804 	bl	6fd4 <CC_PalMemCopyPlat>
    7fcc:	2110      	movs	r1, #16
    7fce:	a810      	add	r0, sp, #64	; 0x40
    7fd0:	f7ff f804 	bl	6fdc <CC_PalMemSetZeroPlat>
    7fd4:	3401      	adds	r4, #1
    7fd6:	1b76      	subs	r6, r6, r5
    7fd8:	442f      	add	r7, r5
    7fda:	b2e4      	uxtb	r4, r4
    7fdc:	d021      	beq.n	8022 <CONFIG_FPROTECT_BLOCK_SIZE+0x22>
    7fde:	9b06      	ldr	r3, [sp, #24]
    7fe0:	4642      	mov	r2, r8
    7fe2:	a908      	add	r1, sp, #32
    7fe4:	a810      	add	r0, sp, #64	; 0x40
    7fe6:	f88d 40b4 	strb.w	r4, [sp, #180]	; 0xb4
    7fea:	f7ff fd5f 	bl	7aac <FinishAesDrv>
    7fee:	4603      	mov	r3, r0
    7ff0:	eb09 0007 	add.w	r0, r9, r7
    7ff4:	2b00      	cmp	r3, #0
    7ff6:	d0e1      	beq.n	7fbc <kmu_derive_cmac+0xc8>
    7ff8:	461f      	mov	r7, r3
    7ffa:	a810      	add	r0, sp, #64	; 0x40
    7ffc:	2274      	movs	r2, #116	; 0x74
    7ffe:	2100      	movs	r1, #0
    8000:	f7fe ffea 	bl	6fd8 <CC_PalMemSetPlat>
    8004:	4638      	mov	r0, r7
    8006:	b04e      	add	sp, #312	; 0x138
    8008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    800c:	2202      	movs	r2, #2
    800e:	f10d 0317 	add.w	r3, sp, #23
    8012:	f88d 2017 	strb.w	r2, [sp, #23]
    8016:	e7ba      	b.n	7f8e <kmu_derive_cmac+0x9a>
    8018:	4f07      	ldr	r7, [pc, #28]	; (8038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>)
    801a:	4638      	mov	r0, r7
    801c:	b04e      	add	sp, #312	; 0x138
    801e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8022:	4637      	mov	r7, r6
    8024:	e7e9      	b.n	7ffa <kmu_derive_cmac+0x106>
    8026:	4f05      	ldr	r7, [pc, #20]	; (803c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>)
    8028:	4638      	mov	r0, r7
    802a:	b04e      	add	sp, #312	; 0x138
    802c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8030:	50039000 	.word	0x50039000
    8034:	50841a50 	.word	0x50841a50
    8038:	00f1000f 	.word	0x00f1000f
    803c:	00f1000e 	.word	0x00f1000e

00008040 <UtilCmacBuildDataForDerivation>:
    8040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8044:	2600      	movs	r6, #0
    8046:	b082      	sub	sp, #8
    8048:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    804a:	9601      	str	r6, [sp, #4]
    804c:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
    8050:	d83b      	bhi.n	80ca <UtilCmacBuildDataForDerivation+0x8a>
    8052:	00ee      	lsls	r6, r5, #3
    8054:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    8058:	461f      	mov	r7, r3
    805a:	bf34      	ite	cc
    805c:	2303      	movcc	r3, #3
    805e:	2304      	movcs	r3, #4
    8060:	1e4d      	subs	r5, r1, #1
    8062:	2d3f      	cmp	r5, #63	; 0x3f
    8064:	460c      	mov	r4, r1
    8066:	9300      	str	r3, [sp, #0]
    8068:	d82f      	bhi.n	80ca <UtilCmacBuildDataForDerivation+0x8a>
    806a:	b370      	cbz	r0, 80ca <UtilCmacBuildDataForDerivation+0x8a>
    806c:	4690      	mov	r8, r2
    806e:	b117      	cbz	r7, 8076 <UtilCmacBuildDataForDerivation+0x36>
    8070:	b35a      	cbz	r2, 80ca <UtilCmacBuildDataForDerivation+0x8a>
    8072:	2f40      	cmp	r7, #64	; 0x40
    8074:	d829      	bhi.n	80ca <UtilCmacBuildDataForDerivation+0x8a>
    8076:	9a08      	ldr	r2, [sp, #32]
    8078:	b33a      	cbz	r2, 80ca <UtilCmacBuildDataForDerivation+0x8a>
    807a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    807c:	6811      	ldr	r1, [r2, #0]
    807e:	b321      	cbz	r1, 80ca <UtilCmacBuildDataForDerivation+0x8a>
    8080:	19e2      	adds	r2, r4, r7
    8082:	4413      	add	r3, r2
    8084:	4299      	cmp	r1, r3
    8086:	d320      	bcc.n	80ca <UtilCmacBuildDataForDerivation+0x8a>
    8088:	9b08      	ldr	r3, [sp, #32]
    808a:	4622      	mov	r2, r4
    808c:	4601      	mov	r1, r0
    808e:	1c58      	adds	r0, r3, #1
    8090:	f7fe ffa0 	bl	6fd4 <CC_PalMemCopyPlat>
    8094:	2200      	movs	r2, #0
    8096:	9b08      	ldr	r3, [sp, #32]
    8098:	4423      	add	r3, r4
    809a:	705a      	strb	r2, [r3, #1]
    809c:	3402      	adds	r4, #2
    809e:	bb07      	cbnz	r7, 80e2 <UtilCmacBuildDataForDerivation+0xa2>
    80a0:	2eff      	cmp	r6, #255	; 0xff
    80a2:	9600      	str	r6, [sp, #0]
    80a4:	d915      	bls.n	80d2 <UtilCmacBuildDataForDerivation+0x92>
    80a6:	9b08      	ldr	r3, [sp, #32]
    80a8:	0235      	lsls	r5, r6, #8
    80aa:	b2ad      	uxth	r5, r5
    80ac:	1918      	adds	r0, r3, r4
    80ae:	2202      	movs	r2, #2
    80b0:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
    80b4:	a901      	add	r1, sp, #4
    80b6:	9501      	str	r5, [sp, #4]
    80b8:	f7fe ff8c 	bl	6fd4 <CC_PalMemCopyPlat>
    80bc:	3402      	adds	r4, #2
    80be:	2000      	movs	r0, #0
    80c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    80c2:	601c      	str	r4, [r3, #0]
    80c4:	b002      	add	sp, #8
    80c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80ca:	480a      	ldr	r0, [pc, #40]	; (80f4 <UtilCmacBuildDataForDerivation+0xb4>)
    80cc:	b002      	add	sp, #8
    80ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80d2:	9b08      	ldr	r3, [sp, #32]
    80d4:	2201      	movs	r2, #1
    80d6:	1918      	adds	r0, r3, r4
    80d8:	4669      	mov	r1, sp
    80da:	f7fe ff7b 	bl	6fd4 <CC_PalMemCopyPlat>
    80de:	3401      	adds	r4, #1
    80e0:	e7ed      	b.n	80be <UtilCmacBuildDataForDerivation+0x7e>
    80e2:	9b08      	ldr	r3, [sp, #32]
    80e4:	4641      	mov	r1, r8
    80e6:	1918      	adds	r0, r3, r4
    80e8:	463a      	mov	r2, r7
    80ea:	f7fe ff73 	bl	6fd4 <CC_PalMemCopyPlat>
    80ee:	443c      	add	r4, r7
    80f0:	e7d6      	b.n	80a0 <UtilCmacBuildDataForDerivation+0x60>
    80f2:	bf00      	nop
    80f4:	80000006 	.word	0x80000006

000080f8 <CC_PalDataBufferAttrGet>:
    80f8:	2000      	movs	r0, #0
    80fa:	7018      	strb	r0, [r3, #0]
    80fc:	4770      	bx	lr
    80fe:	bf00      	nop

00008100 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8100:	4770      	bx	lr

00008102 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    8102:	b508      	push	{r3, lr}
	spm_config();
    8104:	f7f9 f852 	bl	11ac <spm_config>
	spm_jump();
}
    8108:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    810c:	f7f8 bfee 	b.w	10ec <spm_jump>

00008110 <arch_printk_char_out>:
}
    8110:	2000      	movs	r0, #0
    8112:	4770      	bx	lr

00008114 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    8114:	b40f      	push	{r0, r1, r2, r3}
    8116:	b507      	push	{r0, r1, r2, lr}
    8118:	a904      	add	r1, sp, #16
    811a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    811e:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    8120:	f7f8 fa28 	bl	574 <vprintk>
	}
	va_end(ap);
}
    8124:	b003      	add	sp, #12
    8126:	f85d eb04 	ldr.w	lr, [sp], #4
    812a:	b004      	add	sp, #16
    812c:	4770      	bx	lr

0000812e <onoff_manager_init>:
	return rv;
}

int onoff_manager_init(struct onoff_manager *mgr,
		       const struct onoff_transitions *transitions)
{
    812e:	b538      	push	{r3, r4, r5, lr}
    8130:	460c      	mov	r4, r1
	if ((mgr == NULL)
    8132:	4605      	mov	r5, r0
    8134:	b158      	cbz	r0, 814e <onoff_manager_init+0x20>
	    || (transitions == NULL)
    8136:	b151      	cbz	r1, 814e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    8138:	680b      	ldr	r3, [r1, #0]
    813a:	b143      	cbz	r3, 814e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    813c:	684b      	ldr	r3, [r1, #4]
    813e:	b133      	cbz	r3, 814e <onoff_manager_init+0x20>
		return -EINVAL;
	}

	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    8140:	2220      	movs	r2, #32
    8142:	2100      	movs	r1, #0
    8144:	f000 f92c 	bl	83a0 <memset>

	return 0;
    8148:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    814a:	612c      	str	r4, [r5, #16]
}
    814c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    814e:	f06f 0015 	mvn.w	r0, #21
    8152:	e7fb      	b.n	814c <onoff_manager_init+0x1e>

00008154 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    8154:	4604      	mov	r4, r0
    8156:	b508      	push	{r3, lr}
    8158:	4608      	mov	r0, r1
    815a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    815c:	461a      	mov	r2, r3
    815e:	47a0      	blx	r4
	return z_impl_z_current_get();
    8160:	f7fc fede 	bl	4f20 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    8164:	f7f9 feee 	bl	1f44 <z_impl_k_thread_abort>

00008168 <encode_uint>:
{
    8168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    816c:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    816e:	78d3      	ldrb	r3, [r2, #3]
{
    8170:	4614      	mov	r4, r2
	switch (specifier) {
    8172:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    8174:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    8178:	4606      	mov	r6, r0
    817a:	460f      	mov	r7, r1
    817c:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    817e:	d02d      	beq.n	81dc <encode_uint+0x74>
    8180:	d828      	bhi.n	81d4 <encode_uint+0x6c>
		return 16;
    8182:	2b58      	cmp	r3, #88	; 0x58
    8184:	bf14      	ite	ne
    8186:	250a      	movne	r5, #10
    8188:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
    818a:	46aa      	mov	sl, r5
    818c:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
    8190:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    8194:	4652      	mov	r2, sl
    8196:	465b      	mov	r3, fp
    8198:	4630      	mov	r0, r6
    819a:	4639      	mov	r1, r7
    819c:	f7f8 f84e 	bl	23c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    81a0:	2a09      	cmp	r2, #9
    81a2:	b2d3      	uxtb	r3, r2
    81a4:	d81f      	bhi.n	81e6 <encode_uint+0x7e>
    81a6:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    81a8:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    81aa:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    81ac:	bf08      	it	eq
    81ae:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    81b0:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    81b4:	d301      	bcc.n	81ba <encode_uint+0x52>
    81b6:	45c8      	cmp	r8, r9
    81b8:	d812      	bhi.n	81e0 <encode_uint+0x78>
	if (conv->flag_hash) {
    81ba:	7823      	ldrb	r3, [r4, #0]
    81bc:	069b      	lsls	r3, r3, #26
    81be:	d505      	bpl.n	81cc <encode_uint+0x64>
		if (radix == 8) {
    81c0:	2d08      	cmp	r5, #8
    81c2:	d116      	bne.n	81f2 <encode_uint+0x8a>
			conv->altform_0 = true;
    81c4:	78a3      	ldrb	r3, [r4, #2]
    81c6:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    81ca:	70a3      	strb	r3, [r4, #2]
}
    81cc:	4640      	mov	r0, r8
    81ce:	b003      	add	sp, #12
    81d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    81d4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    81d8:	2b70      	cmp	r3, #112	; 0x70
    81da:	e7d3      	b.n	8184 <encode_uint+0x1c>
	switch (specifier) {
    81dc:	2508      	movs	r5, #8
    81de:	e7d4      	b.n	818a <encode_uint+0x22>
		value /= radix;
    81e0:	4606      	mov	r6, r0
    81e2:	460f      	mov	r7, r1
    81e4:	e7d6      	b.n	8194 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    81e6:	9a01      	ldr	r2, [sp, #4]
    81e8:	2a19      	cmp	r2, #25
    81ea:	bf94      	ite	ls
    81ec:	3337      	addls	r3, #55	; 0x37
    81ee:	3357      	addhi	r3, #87	; 0x57
    81f0:	e7da      	b.n	81a8 <encode_uint+0x40>
		} else if (radix == 16) {
    81f2:	2d10      	cmp	r5, #16
    81f4:	d1ea      	bne.n	81cc <encode_uint+0x64>
			conv->altform_0c = true;
    81f6:	78a3      	ldrb	r3, [r4, #2]
    81f8:	f043 0310 	orr.w	r3, r3, #16
    81fc:	e7e5      	b.n	81ca <encode_uint+0x62>

000081fe <outs>:
{
    81fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8202:	4607      	mov	r7, r0
    8204:	4688      	mov	r8, r1
    8206:	4615      	mov	r5, r2
    8208:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    820a:	4614      	mov	r4, r2
    820c:	42b4      	cmp	r4, r6
    820e:	eba4 0005 	sub.w	r0, r4, r5
    8212:	d302      	bcc.n	821a <outs+0x1c>
    8214:	b93e      	cbnz	r6, 8226 <outs+0x28>
    8216:	7823      	ldrb	r3, [r4, #0]
    8218:	b12b      	cbz	r3, 8226 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    821a:	4641      	mov	r1, r8
    821c:	f814 0b01 	ldrb.w	r0, [r4], #1
    8220:	47b8      	blx	r7
		if (rc < 0) {
    8222:	2800      	cmp	r0, #0
    8224:	daf2      	bge.n	820c <outs+0xe>
}
    8226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000822a <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    822a:	4040      	eors	r0, r0
    822c:	f380 8811 	msr	BASEPRI, r0
    8230:	f04f 0004 	mov.w	r0, #4
    8234:	df02      	svc	2
}
    8236:	4770      	bx	lr

00008238 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    8238:	4770      	bx	lr

0000823a <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    823a:	b084      	sub	sp, #16
    823c:	ab04      	add	r3, sp, #16
    823e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	__asm__ volatile(
    8242:	2300      	movs	r3, #0
    8244:	f383 8811 	msr	BASEPRI, r3
    8248:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    824c:	b004      	add	sp, #16
    824e:	4770      	bx	lr

00008250 <z_log_minimal_printk>:
#include <sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    8250:	b40f      	push	{r0, r1, r2, r3}
    8252:	b507      	push	{r0, r1, r2, lr}
    8254:	a904      	add	r1, sp, #16
    8256:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    825a:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    825c:	f7f8 f98a 	bl	574 <vprintk>
	va_end(ap);
}
    8260:	b003      	add	sp, #12
    8262:	f85d eb04 	ldr.w	lr, [sp], #4
    8266:	b004      	add	sp, #16
    8268:	4770      	bx	lr

0000826a <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    826a:	2200      	movs	r2, #0
    826c:	e9c0 2200 	strd	r2, r2, [r0]
    8270:	6082      	str	r2, [r0, #8]
}
    8272:	4770      	bx	lr

00008274 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    8274:	2000      	movs	r0, #0
{
    8276:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    8278:	f7f8 fd4a 	bl	d10 <sys_reboot>

0000827c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    827c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    827e:	6800      	ldr	r0, [r0, #0]
    8280:	f7f9 b9f8 	b.w	1674 <z_arm_fatal_error>

00008284 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    8284:	2100      	movs	r1, #0
    8286:	2001      	movs	r0, #1
    8288:	f7f9 b9f4 	b.w	1674 <z_arm_fatal_error>

0000828c <irq_target_state_set>:
 *
 * @return The resulting target state of the given IRQ
 */
irq_target_state_t irq_target_state_set(unsigned int irq,
	irq_target_state_t irq_target_state)
{
    828c:	4602      	mov	r2, r0
    828e:	b243      	sxtb	r3, r0
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
    8290:	4608      	mov	r0, r1
    8292:	b9c1      	cbnz	r1, 82c6 <irq_target_state_set+0x3a>
  if ((int32_t)(IRQn) >= 0)
    8294:	2b00      	cmp	r3, #0
    8296:	db27      	blt.n	82e8 <irq_target_state_set+0x5c>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    8298:	2001      	movs	r0, #1
    829a:	095b      	lsrs	r3, r3, #5
    829c:	009b      	lsls	r3, r3, #2
    829e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    82a2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    82a6:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    82aa:	f002 021f 	and.w	r2, r2, #31
    82ae:	4090      	lsls	r0, r2
    82b0:	ea21 0100 	bic.w	r1, r1, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    82b4:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    82b8:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
    82bc:	40d0      	lsrs	r0, r2
    82be:	f000 0001 	and.w	r0, r0, #1
	} else {
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
    82c2:	b2c0      	uxtb	r0, r0
    82c4:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    82c6:	2b00      	cmp	r3, #0
    82c8:	db0d      	blt.n	82e6 <irq_target_state_set+0x5a>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    82ca:	2101      	movs	r1, #1
    82cc:	095b      	lsrs	r3, r3, #5
    82ce:	009b      	lsls	r3, r3, #2
    82d0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    82d4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    82d8:	f8d3 0280 	ldr.w	r0, [r3, #640]	; 0x280
    82dc:	f002 021f 	and.w	r2, r2, #31
    82e0:	4091      	lsls	r1, r2
    82e2:	4301      	orrs	r1, r0
    82e4:	e7e6      	b.n	82b4 <irq_target_state_set+0x28>
		return IRQ_TARGET_STATE_NON_SECURE;
	} else {
		return IRQ_TARGET_STATE_SECURE;
    82e6:	2000      	movs	r0, #0
	}
}
    82e8:	4770      	bx	lr

000082ea <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    82ea:	b508      	push	{r3, lr}
	handler();
    82ec:	f7f9 fa34 	bl	1758 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    82f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    82f4:	f7f9 baf6 	b.w	18e4 <z_arm_exc_exit>

000082f8 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    82f8:	6e43      	ldr	r3, [r0, #100]	; 0x64
    82fa:	f383 880b 	msr	PSPLIM, r3
}
    82fe:	4770      	bx	lr

00008300 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    8300:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    8304:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8308:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    830a:	bf08      	it	eq
    830c:	f06f 0015 	mvneq.w	r0, #21
    8310:	4770      	bx	lr

00008312 <arm_cmse_addr_is_secure>:
    8312:	e840 f000 	tt	r0, r0
int arm_cmse_addr_is_secure(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	return addr_info.flags.secure;
}
    8316:	f3c0 5080 	ubfx	r0, r0, #22, #1
    831a:	4770      	bx	lr

0000831c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    831c:	4603      	mov	r3, r0
	size_t n = 0;
    831e:	2000      	movs	r0, #0

	while (*s != '\0') {
    8320:	5c1a      	ldrb	r2, [r3, r0]
    8322:	b902      	cbnz	r2, 8326 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    8324:	4770      	bx	lr
		n++;
    8326:	3001      	adds	r0, #1
    8328:	e7fa      	b.n	8320 <strlen+0x4>

0000832a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    832a:	4603      	mov	r3, r0
	size_t n = 0;
    832c:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    832e:	5c1a      	ldrb	r2, [r3, r0]
    8330:	b10a      	cbz	r2, 8336 <strnlen+0xc>
    8332:	4288      	cmp	r0, r1
    8334:	d100      	bne.n	8338 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    8336:	4770      	bx	lr
		n++;
    8338:	3001      	adds	r0, #1
    833a:	e7f8      	b.n	832e <strnlen+0x4>

0000833c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    833c:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    833e:	b15a      	cbz	r2, 8358 <memcmp+0x1c>
    8340:	3901      	subs	r1, #1
    8342:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    8344:	f810 2b01 	ldrb.w	r2, [r0], #1
    8348:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    834c:	42a0      	cmp	r0, r4
    834e:	d001      	beq.n	8354 <memcmp+0x18>
    8350:	429a      	cmp	r2, r3
    8352:	d0f7      	beq.n	8344 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    8354:	1ad0      	subs	r0, r2, r3
}
    8356:	bd10      	pop	{r4, pc}
		return 0;
    8358:	4610      	mov	r0, r2
    835a:	e7fc      	b.n	8356 <memcmp+0x1a>

0000835c <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    835c:	1a43      	subs	r3, r0, r1
    835e:	4293      	cmp	r3, r2
{
    8360:	b510      	push	{r4, lr}
    8362:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    8366:	d308      	bcc.n	837a <memmove+0x1e>
	char *dest = d;
    8368:	4602      	mov	r2, r0
    836a:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    836c:	429a      	cmp	r2, r3
    836e:	d00b      	beq.n	8388 <memmove+0x2c>
			*dest = *src;
    8370:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    8374:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    8378:	e7f8      	b.n	836c <memmove+0x10>
    837a:	440a      	add	r2, r1
			dest[n] = src[n];
    837c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    8380:	428a      	cmp	r2, r1
			dest[n] = src[n];
    8382:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    8386:	d1f9      	bne.n	837c <memmove+0x20>
		}
	}

	return d;
}
    8388:	bd10      	pop	{r4, pc}

0000838a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    838a:	b510      	push	{r4, lr}
    838c:	1e43      	subs	r3, r0, #1
    838e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    8390:	4291      	cmp	r1, r2
    8392:	d100      	bne.n	8396 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    8394:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    8396:	f811 4b01 	ldrb.w	r4, [r1], #1
    839a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    839e:	e7f7      	b.n	8390 <memcpy+0x6>

000083a0 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    83a0:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    83a2:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    83a4:	4402      	add	r2, r0
    83a6:	4293      	cmp	r3, r2
    83a8:	d100      	bne.n	83ac <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    83aa:	4770      	bx	lr
		*(d_byte++) = c_byte;
    83ac:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    83b0:	e7f9      	b.n	83a6 <memset+0x6>

000083b2 <set_starting_state>:
{
    83b2:	b510      	push	{r4, lr}
	__asm__ volatile(
    83b4:	f04f 0320 	mov.w	r3, #32
    83b8:	f3ef 8211 	mrs	r2, BASEPRI
    83bc:	f383 8812 	msr	BASEPRI_MAX, r3
    83c0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    83c4:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    83c6:	f003 0407 	and.w	r4, r3, #7
    83ca:	2c01      	cmp	r4, #1
    83cc:	d106      	bne.n	83dc <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    83ce:	6001      	str	r1, [r0, #0]
	int err = 0;
    83d0:	2000      	movs	r0, #0
	__asm__ volatile(
    83d2:	f382 8811 	msr	BASEPRI, r2
    83d6:	f3bf 8f6f 	isb	sy
}
    83da:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    83dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    83e0:	428b      	cmp	r3, r1
		err = -EALREADY;
    83e2:	bf14      	ite	ne
    83e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    83e8:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    83ec:	e7f1      	b.n	83d2 <set_starting_state+0x20>

000083ee <set_on_state>:
	__asm__ volatile(
    83ee:	f04f 0320 	mov.w	r3, #32
    83f2:	f3ef 8211 	mrs	r2, BASEPRI
    83f6:	f383 8812 	msr	BASEPRI_MAX, r3
    83fa:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    83fe:	6803      	ldr	r3, [r0, #0]
    8400:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8404:	f043 0302 	orr.w	r3, r3, #2
    8408:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    840a:	f382 8811 	msr	BASEPRI, r2
    840e:	f3bf 8f6f 	isb	sy
}
    8412:	4770      	bx	lr

00008414 <onoff_started_callback>:
	return &data->mgr[type];
    8414:	6900      	ldr	r0, [r0, #16]
    8416:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    8418:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    841c:	2100      	movs	r1, #0
    841e:	4710      	bx	r2

00008420 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    8420:	2000      	movs	r0, #0
    8422:	f7fa be83 	b.w	312c <nrfx_clock_start>

00008426 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8426:	2000      	movs	r0, #0
    8428:	f7fa bed0 	b.w	31cc <nrfx_clock_stop>

0000842c <api_stop>:
	return stop(dev, subsys, CTX_API);
    842c:	2280      	movs	r2, #128	; 0x80
    842e:	f7fa b83d 	b.w	24ac <stop>

00008432 <blocking_start_callback>:
{
    8432:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    8434:	f7fb bfb0 	b.w	4398 <z_impl_k_sem_give>

00008438 <api_start>:
{
    8438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    843c:	240c      	movs	r4, #12
    843e:	b2c9      	uxtb	r1, r1
    8440:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    8442:	6905      	ldr	r5, [r0, #16]
{
    8444:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    8446:	f104 0048 	add.w	r0, r4, #72	; 0x48
    844a:	2180      	movs	r1, #128	; 0x80
    844c:	4428      	add	r0, r5
{
    844e:	4690      	mov	r8, r2
    8450:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    8452:	f7ff ffae 	bl	83b2 <set_starting_state>
	if (err < 0) {
    8456:	2800      	cmp	r0, #0
    8458:	db06      	blt.n	8468 <api_start+0x30>
	subdata->cb = cb;
    845a:	4425      	add	r5, r4
	subdata->user_data = user_data;
    845c:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    8460:	6873      	ldr	r3, [r6, #4]
    8462:	591b      	ldr	r3, [r3, r4]
    8464:	4798      	blx	r3
	return 0;
    8466:	2000      	movs	r0, #0
}
    8468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000846c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    846c:	6843      	ldr	r3, [r0, #4]
}
    846e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8470:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    8472:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    8474:	600b      	str	r3, [r1, #0]
}
    8476:	4770      	bx	lr

00008478 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8478:	6843      	ldr	r3, [r0, #4]
    847a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    847c:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    847e:	4042      	eors	r2, r0
    8480:	400a      	ands	r2, r1
    8482:	4042      	eors	r2, r0
    p_reg->OUT = value;
    8484:	605a      	str	r2, [r3, #4]
}
    8486:	2000      	movs	r0, #0
    8488:	4770      	bx	lr

0000848a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    848a:	6843      	ldr	r3, [r0, #4]
}
    848c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    848e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    8490:	6099      	str	r1, [r3, #8]
}
    8492:	4770      	bx	lr

00008494 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8494:	6843      	ldr	r3, [r0, #4]
}
    8496:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8498:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    849a:	60d9      	str	r1, [r3, #12]
}
    849c:	4770      	bx	lr

0000849e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    849e:	6843      	ldr	r3, [r0, #4]
}
    84a0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    84a2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    84a4:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    84a6:	404b      	eors	r3, r1
    p_reg->OUT = value;
    84a8:	6053      	str	r3, [r2, #4]
}
    84aa:	4770      	bx	lr

000084ac <entropy_cc3xx_rng_init>:
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
    84ac:	2200      	movs	r2, #0
{
    84ae:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
    84b0:	4611      	mov	r1, r2
    84b2:	4610      	mov	r0, r2
    84b4:	f7fd f8ae 	bl	5614 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
    84b8:	2800      	cmp	r0, #0
			return -EINVAL;
		}
	#endif

	return 0;
}
    84ba:	bf18      	it	ne
    84bc:	f06f 0015 	mvnne.w	r0, #21
    84c0:	bd08      	pop	{r3, pc}

000084c2 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
    84c2:	f7fd b84f 	b.w	5564 <nrf_cc3xx_platform_init>

000084c6 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    84c6:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    84c8:	f7f8 fffe 	bl	14c8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    84cc:	f7f9 f8a8 	bl	1620 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    84d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
    84d4:	f7fd b846 	b.w	5564 <nrf_cc3xx_platform_init>

000084d8 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    84d8:	4700      	bx	r0

000084da <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    84da:	f000 b8b7 	b.w	864c <z_impl_k_busy_wait>

000084de <nrf_gpio_pin_present_check>:
    switch (port)
    84de:	0943      	lsrs	r3, r0, #5
    84e0:	bf0c      	ite	eq
    84e2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    84e6:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    84e8:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    84ec:	fa23 f000 	lsr.w	r0, r3, r0
}
    84f0:	f000 0001 	and.w	r0, r0, #1
    84f4:	4770      	bx	lr

000084f6 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    84f6:	0080      	lsls	r0, r0, #2
}
    84f8:	f500 7080 	add.w	r0, r0, #256	; 0x100
    84fc:	4770      	bx	lr

000084fe <nrf_gpio_reconfigure>:
{
    84fe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8502:	4690      	mov	r8, r2
    8504:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    8508:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    850a:	a801      	add	r0, sp, #4
{
    850c:	460e      	mov	r6, r1
    850e:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8510:	f7fa ff7c 	bl	340c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8514:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    8516:	f1b8 0f00 	cmp.w	r8, #0
    851a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    851e:	bf14      	ite	ne
    8520:	2302      	movne	r3, #2
    8522:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    8524:	2e00      	cmp	r6, #0
    8526:	bf18      	it	ne
    8528:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    852c:	2d00      	cmp	r5, #0
    852e:	bf14      	ite	ne
    8530:	210c      	movne	r1, #12
    8532:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    8534:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    8536:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    853a:	bf14      	ite	ne
    853c:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    8540:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    8542:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8544:	ea43 0301 	orr.w	r3, r3, r1
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    8548:	bf14      	ite	ne
    854a:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    854e:	2100      	moveq	r1, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8550:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    8554:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    8556:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    855a:	b106      	cbz	r6, 855e <nrf_gpio_reconfigure+0x60>
    855c:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    855e:	f1b8 0f00 	cmp.w	r8, #0
    8562:	d003      	beq.n	856c <nrf_gpio_reconfigure+0x6e>
    8564:	f898 8000 	ldrb.w	r8, [r8]
    8568:	ea4f 0848 	mov.w	r8, r8, lsl #1
    856c:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    856e:	b10d      	cbz	r5, 8574 <nrf_gpio_reconfigure+0x76>
    8570:	782d      	ldrb	r5, [r5, #0]
    8572:	00ad      	lsls	r5, r5, #2
    8574:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    8578:	b10c      	cbz	r4, 857e <nrf_gpio_reconfigure+0x80>
    857a:	7822      	ldrb	r2, [r4, #0]
    857c:	0214      	lsls	r4, r2, #8
    857e:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    8580:	b10f      	cbz	r7, 8586 <nrf_gpio_reconfigure+0x88>
    8582:	783f      	ldrb	r7, [r7, #0]
    8584:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8586:	432c      	orrs	r4, r5
    8588:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    858a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
    858e:	b002      	add	sp, #8
    8590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008594 <nrf_gpio_cfg_sense_set>:
{
    8594:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    8596:	f10d 030f 	add.w	r3, sp, #15
    859a:	9301      	str	r3, [sp, #4]
    859c:	2300      	movs	r3, #0
{
    859e:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    85a2:	461a      	mov	r2, r3
    85a4:	4619      	mov	r1, r3
    85a6:	9300      	str	r3, [sp, #0]
    85a8:	f7ff ffa9 	bl	84fe <nrf_gpio_reconfigure>
}
    85ac:	b005      	add	sp, #20
    85ae:	f85d fb04 	ldr.w	pc, [sp], #4

000085b2 <z_device_state_init>:
}
    85b2:	4770      	bx	lr

000085b4 <k_mem_slab_init>:
{
    85b4:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    85b6:	2400      	movs	r4, #0
    85b8:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    85ba:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    85bc:	ea41 0402 	orr.w	r4, r1, r2
    85c0:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    85c4:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    85c8:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    85ca:	d10c      	bne.n	85e6 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    85cc:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    85ce:	42a3      	cmp	r3, r4
    85d0:	d103      	bne.n	85da <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    85d2:	e9c0 0000 	strd	r0, r0, [r0]
}
    85d6:	2000      	movs	r0, #0
}
    85d8:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    85da:	6985      	ldr	r5, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    85dc:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    85de:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    85e0:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    85e2:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    85e4:	e7f3      	b.n	85ce <k_mem_slab_init+0x1a>
		return -EINVAL;
    85e6:	f06f 0015 	mvn.w	r0, #21
	return rc;
    85ea:	e7f5      	b.n	85d8 <k_mem_slab_init+0x24>

000085ec <k_thread_name_get>:
}
    85ec:	2000      	movs	r0, #0
    85ee:	4770      	bx	lr

000085f0 <z_pm_save_idle_exit>:
{
    85f0:	b508      	push	{r3, lr}
	pm_system_resume();
    85f2:	f7f8 fc43 	bl	e7c <pm_system_resume>
}
    85f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    85fa:	f7fa bb9b 	b.w	2d34 <sys_clock_idle_exit>

000085fe <z_impl_k_mutex_init>:
{
    85fe:	4603      	mov	r3, r0
	mutex->owner = NULL;
    8600:	2000      	movs	r0, #0
    8602:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    8606:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    860a:	4770      	bx	lr

0000860c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    860c:	4603      	mov	r3, r0
    860e:	b920      	cbnz	r0, 861a <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8610:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    8614:	b90a      	cbnz	r2, 861a <z_reschedule_irqlock+0xe>
    8616:	f7f9 b8bf 	b.w	1798 <arch_swap>
    861a:	f383 8811 	msr	BASEPRI, r3
    861e:	f3bf 8f6f 	isb	sy
}
    8622:	4770      	bx	lr

00008624 <z_reschedule_unlocked>:
	__asm__ volatile(
    8624:	f04f 0320 	mov.w	r3, #32
    8628:	f3ef 8011 	mrs	r0, BASEPRI
    862c:	f383 8812 	msr	BASEPRI_MAX, r3
    8630:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8634:	f7ff bfea 	b.w	860c <z_reschedule_irqlock>

00008638 <z_priq_dumb_best>:
{
    8638:	4603      	mov	r3, r0
	return list->head == list;
    863a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    863c:	4283      	cmp	r3, r0
    863e:	d003      	beq.n	8648 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    8640:	2800      	cmp	r0, #0
    8642:	bf38      	it	cc
    8644:	2000      	movcc	r0, #0
    8646:	4770      	bx	lr
	struct k_thread *thread = NULL;
    8648:	2000      	movs	r0, #0
}
    864a:	4770      	bx	lr

0000864c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    864c:	b108      	cbz	r0, 8652 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    864e:	f7f8 bb8b 	b.w	d68 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    8652:	4770      	bx	lr

00008654 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    8654:	4770      	bx	lr
	...

00008658 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    8658:	f7fa bbee 	b.w	2e38 <SystemInit>

Disassembly of section .gnu.sgstubs:

00009d80 <spm_firmware_info_nse-0x6260>:
	...

0000ffe0 <spm_firmware_info_nse>:
    ffe0:	e97f e97f 	sg
    ffe4:	f7f1 ba2c 	b.w	1440 <__acle_se_spm_firmware_info_nse>

0000ffe8 <spm_request_random_number_nse>:
    ffe8:	e97f e97f 	sg
    ffec:	f7f1 ba04 	b.w	13f8 <__acle_se_spm_request_random_number_nse>

0000fff0 <spm_request_read_nse>:
    fff0:	e97f e97f 	sg
    fff4:	f7f1 b9cc 	b.w	1390 <__acle_se_spm_request_read_nse>
	...
