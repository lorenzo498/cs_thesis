
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
}
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
   0:	20001e30 	.word	0x20001e30
	return &_current->errno_var;
   4:	00005e51 	.word	0x00005e51
   8:	000127a5 	.word	0x000127a5
}
   c:	00005eb1 	.word	0x00005eb1
  10:	00005eb1 	.word	0x00005eb1
  14:	00005eb1 	.word	0x00005eb1
  18:	00005eb1 	.word	0x00005eb1
  1c:	00005eb1 	.word	0x00005eb1
	...
  2c:	000058f5 	.word	0x000058f5
  30:	00005eb1 	.word	0x00005eb1
  34:	00000000 	.word	0x00000000
  38:	0000589d 	.word	0x0000589d
  3c:	00004f81 	.word	0x00004f81

00000040 <_irq_vector_table>:
  40:	00005e11 00005e11 00005e11 00005e11     .^...^...^...^..
  50:	00005e11 00005e11 00005e11 00005e11     .^...^...^...^..
  60:	00005e11 00005e11 00005e11 00005e11     .^...^...^...^..
  70:	00005e11 00005e11 00005e11 00005e11     .^...^...^...^..
  80:	00005e11 00005e11 00005e11 00005e11     .^...^...^...^..
  90:	00005e11 00005e11 00005e11 00005e11     .^...^...^...^..
  a0:	00005e11 00005e11 00005e11 00005e11     .^...^...^...^..
  b0:	00005e11 00005e11 00005e11 00005e11     .^...^...^...^..
  c0:	00005e11 00005e11 00005e11 00005e11     .^...^...^...^..
  d0:	00005e11 00005e11 00005e11 00005e11     .^...^...^...^..
  e0:	00005e11 00005e11 00005e11 00005e11     .^...^...^...^..
  f0:	00005e11 00005e11 00005e11 00005e11     .^...^...^...^..
 100:	00005e11 00005e11 00005e11 00005e11     .^...^...^...^..
 110:	00005e11 00005e11 00005e11 00005e11     .^...^...^...^..
 120:	00005e11 00005e11 00005e11 00005e11     .^...^...^...^..
 130:	00005e11 00005e11 00005e11 00005e11     .^...^...^...^..
 140:	00005e11                                .^..

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
     144:	b953      	cbnz	r3, 15c <__aeabi_uldivmod+0x18>
     146:	b94a      	cbnz	r2, 15c <__aeabi_uldivmod+0x18>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     154:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     158:	f000 b970 	b.w	43c <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     164:	f000 f806 	bl	174 <__udivmoddi4>
     168:	f8dd e004 	ldr.w	lr, [sp, #4]
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
     172:	4770      	bx	lr

00000174 <__udivmoddi4>:
     174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     178:	9e08      	ldr	r6, [sp, #32]
     17a:	460d      	mov	r5, r1
     17c:	4604      	mov	r4, r0
     17e:	468a      	mov	sl, r1
     180:	2b00      	cmp	r3, #0
     182:	d17f      	bne.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     184:	428a      	cmp	r2, r1
     186:	4617      	mov	r7, r2
     188:	d941      	bls.n	20e <CONFIG_KOBJECT_TEXT_AREA+0xe>
     18a:	fab2 f282 	clz	r2, r2
     18e:	b14a      	cbz	r2, 1a4 <__udivmoddi4+0x30>
     190:	f1c2 0120 	rsb	r1, r2, #32
     194:	fa05 f302 	lsl.w	r3, r5, r2
     198:	4097      	lsls	r7, r2
     19a:	4094      	lsls	r4, r2
     19c:	fa20 f101 	lsr.w	r1, r0, r1
     1a0:	ea41 0a03 	orr.w	sl, r1, r3
     1a4:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1a8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     1ac:	fa1f f987 	uxth.w	r9, r7
     1b0:	fbba fef8 	udiv	lr, sl, r8
     1b4:	fb08 a31e 	mls	r3, r8, lr, sl
     1b8:	fb0e f109 	mul.w	r1, lr, r9
     1bc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     1c0:	4299      	cmp	r1, r3
     1c2:	d906      	bls.n	1d2 <__udivmoddi4+0x5e>
     1c4:	18fb      	adds	r3, r7, r3
     1c6:	d202      	bcs.n	1ce <__udivmoddi4+0x5a>
     1c8:	4299      	cmp	r1, r3
     1ca:	f200 8124 	bhi.w	416 <CONFIG_FLASH_SIZE+0x16>
     1ce:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
     1d2:	1a59      	subs	r1, r3, r1
     1d4:	b2a3      	uxth	r3, r4
     1d6:	fbb1 f0f8 	udiv	r0, r1, r8
     1da:	fb08 1110 	mls	r1, r8, r0, r1
     1de:	fb00 f909 	mul.w	r9, r0, r9
     1e2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1e6:	45a1      	cmp	r9, r4
     1e8:	d905      	bls.n	1f6 <__udivmoddi4+0x82>
     1ea:	193c      	adds	r4, r7, r4
     1ec:	d202      	bcs.n	1f4 <__udivmoddi4+0x80>
     1ee:	45a1      	cmp	r9, r4
     1f0:	f200 810e 	bhi.w	410 <CONFIG_FLASH_SIZE+0x10>
     1f4:	3801      	subs	r0, #1
     1f6:	eba4 0409 	sub.w	r4, r4, r9
     1fa:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     1fe:	2100      	movs	r1, #0
     200:	b11e      	cbz	r6, 20a <CONFIG_KOBJECT_TEXT_AREA+0xa>
     202:	40d4      	lsrs	r4, r2
     204:	2300      	movs	r3, #0
     206:	e9c6 4300 	strd	r4, r3, [r6]
     20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     20e:	b902      	cbnz	r2, 212 <CONFIG_KOBJECT_TEXT_AREA+0x12>
     210:	deff      	udf	#255	; 0xff
     212:	fab2 f282 	clz	r2, r2
     216:	2a00      	cmp	r2, #0
     218:	d14f      	bne.n	2ba <CONFIG_PM_PARTITION_SIZE_PROVISION+0x3a>
     21a:	1bcb      	subs	r3, r1, r7
     21c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     220:	fa1f f887 	uxth.w	r8, r7
     224:	2101      	movs	r1, #1
     226:	0c25      	lsrs	r5, r4, #16
     228:	fbb3 fcfe 	udiv	ip, r3, lr
     22c:	fb0e 301c 	mls	r0, lr, ip, r3
     230:	462b      	mov	r3, r5
     232:	fb08 f90c 	mul.w	r9, r8, ip
     236:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     23a:	45a9      	cmp	r9, r5
     23c:	d90a      	bls.n	254 <CONFIG_KOBJECT_TEXT_AREA+0x54>
     23e:	197d      	adds	r5, r7, r5
     240:	bf2c      	ite	cs
     242:	2301      	movcs	r3, #1
     244:	2300      	movcc	r3, #0
     246:	45a9      	cmp	r9, r5
     248:	d902      	bls.n	250 <CONFIG_KOBJECT_TEXT_AREA+0x50>
     24a:	2b00      	cmp	r3, #0
     24c:	f000 80d9 	beq.w	402 <CONFIG_FLASH_SIZE+0x2>
     250:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     254:	eba5 0509 	sub.w	r5, r5, r9
     258:	b2a3      	uxth	r3, r4
     25a:	fbb5 f0fe 	udiv	r0, r5, lr
     25e:	fb0e 5510 	mls	r5, lr, r0, r5
     262:	fb08 f800 	mul.w	r8, r8, r0
     266:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     26a:	45a0      	cmp	r8, r4
     26c:	d905      	bls.n	27a <CONFIG_KOBJECT_TEXT_AREA+0x7a>
     26e:	193c      	adds	r4, r7, r4
     270:	d202      	bcs.n	278 <CONFIG_KOBJECT_TEXT_AREA+0x78>
     272:	45a0      	cmp	r8, r4
     274:	f200 80c9 	bhi.w	40a <CONFIG_FLASH_SIZE+0xa>
     278:	3801      	subs	r0, #1
     27a:	eba4 0408 	sub.w	r4, r4, r8
     27e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     282:	e7bd      	b.n	200 <CONFIG_KOBJECT_TEXT_AREA>
     284:	428b      	cmp	r3, r1
     286:	d908      	bls.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     288:	2e00      	cmp	r6, #0
     28a:	f000 80b1 	beq.w	3f0 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x8>
     28e:	2100      	movs	r1, #0
     290:	e9c6 0500 	strd	r0, r5, [r6]
     294:	4608      	mov	r0, r1
     296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     29a:	fab3 f183 	clz	r1, r3
     29e:	2900      	cmp	r1, #0
     2a0:	d146      	bne.n	330 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb0>
     2a2:	42ab      	cmp	r3, r5
     2a4:	f0c0 80a7 	bcc.w	3f6 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0xe>
     2a8:	4282      	cmp	r2, r0
     2aa:	f240 80a4 	bls.w	3f6 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0xe>
     2ae:	4608      	mov	r0, r1
     2b0:	2e00      	cmp	r6, #0
     2b2:	d0aa      	beq.n	20a <CONFIG_KOBJECT_TEXT_AREA+0xa>
     2b4:	e9c6 4a00 	strd	r4, sl, [r6]
     2b8:	e7a7      	b.n	20a <CONFIG_KOBJECT_TEXT_AREA+0xa>
     2ba:	f1c2 0020 	rsb	r0, r2, #32
     2be:	4097      	lsls	r7, r2
     2c0:	fa01 f302 	lsl.w	r3, r1, r2
     2c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2c8:	40c1      	lsrs	r1, r0
     2ca:	fa24 f500 	lsr.w	r5, r4, r0
     2ce:	fa1f f887 	uxth.w	r8, r7
     2d2:	4094      	lsls	r4, r2
     2d4:	431d      	orrs	r5, r3
     2d6:	fbb1 f0fe 	udiv	r0, r1, lr
     2da:	0c2b      	lsrs	r3, r5, #16
     2dc:	fb0e 1110 	mls	r1, lr, r0, r1
     2e0:	fb00 fc08 	mul.w	ip, r0, r8
     2e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2e8:	459c      	cmp	ip, r3
     2ea:	d909      	bls.n	300 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x80>
     2ec:	18fb      	adds	r3, r7, r3
     2ee:	bf2c      	ite	cs
     2f0:	2101      	movcs	r1, #1
     2f2:	2100      	movcc	r1, #0
     2f4:	459c      	cmp	ip, r3
     2f6:	d902      	bls.n	2fe <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7e>
     2f8:	2900      	cmp	r1, #0
     2fa:	f000 8095 	beq.w	428 <CONFIG_FLASH_SIZE+0x28>
     2fe:	3801      	subs	r0, #1
     300:	eba3 030c 	sub.w	r3, r3, ip
     304:	b2ad      	uxth	r5, r5
     306:	fbb3 f1fe 	udiv	r1, r3, lr
     30a:	fb0e 3311 	mls	r3, lr, r1, r3
     30e:	fb01 fc08 	mul.w	ip, r1, r8
     312:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     316:	45ac      	cmp	ip, r5
     318:	d905      	bls.n	326 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa6>
     31a:	197d      	adds	r5, r7, r5
     31c:	d202      	bcs.n	324 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa4>
     31e:	45ac      	cmp	ip, r5
     320:	f200 8089 	bhi.w	436 <CONFIG_FLASH_SIZE+0x36>
     324:	3901      	subs	r1, #1
     326:	eba5 030c 	sub.w	r3, r5, ip
     32a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     32e:	e77a      	b.n	226 <CONFIG_KOBJECT_TEXT_AREA+0x26>
     330:	f1c1 0420 	rsb	r4, r1, #32
     334:	408b      	lsls	r3, r1
     336:	fa02 f701 	lsl.w	r7, r2, r1
     33a:	fa05 fc01 	lsl.w	ip, r5, r1
     33e:	40e2      	lsrs	r2, r4
     340:	fa20 f804 	lsr.w	r8, r0, r4
     344:	40e5      	lsrs	r5, r4
     346:	fa00 fe01 	lsl.w	lr, r0, r1
     34a:	4313      	orrs	r3, r2
     34c:	ea48 020c 	orr.w	r2, r8, ip
     350:	ea4f 4813 	mov.w	r8, r3, lsr #16
     354:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     358:	fa1f f983 	uxth.w	r9, r3
     35c:	fbb5 faf8 	udiv	sl, r5, r8
     360:	fb08 551a 	mls	r5, r8, sl, r5
     364:	fb0a f009 	mul.w	r0, sl, r9
     368:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     36c:	4560      	cmp	r0, ip
     36e:	d90a      	bls.n	386 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x106>
     370:	eb13 0c0c 	adds.w	ip, r3, ip
     374:	bf2c      	ite	cs
     376:	2501      	movcs	r5, #1
     378:	2500      	movcc	r5, #0
     37a:	4560      	cmp	r0, ip
     37c:	d901      	bls.n	382 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x102>
     37e:	2d00      	cmp	r5, #0
     380:	d055      	beq.n	42e <CONFIG_FLASH_SIZE+0x2e>
     382:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     386:	ebac 0c00 	sub.w	ip, ip, r0
     38a:	b292      	uxth	r2, r2
     38c:	fbbc f0f8 	udiv	r0, ip, r8
     390:	fb08 cc10 	mls	ip, r8, r0, ip
     394:	fb00 f909 	mul.w	r9, r0, r9
     398:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     39c:	45e1      	cmp	r9, ip
     39e:	d905      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a0:	eb13 0c0c 	adds.w	ip, r3, ip
     3a4:	d201      	bcs.n	3aa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12a>
     3a6:	45e1      	cmp	r9, ip
     3a8:	d83b      	bhi.n	422 <CONFIG_FLASH_SIZE+0x22>
     3aa:	3801      	subs	r0, #1
     3ac:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3b0:	ebac 0c09 	sub.w	ip, ip, r9
     3b4:	fba0 8907 	umull	r8, r9, r0, r7
     3b8:	45cc      	cmp	ip, r9
     3ba:	4645      	mov	r5, r8
     3bc:	464a      	mov	r2, r9
     3be:	d302      	bcc.n	3c6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x146>
     3c0:	d106      	bne.n	3d0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x150>
     3c2:	45c6      	cmp	lr, r8
     3c4:	d204      	bcs.n	3d0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x150>
     3c6:	3801      	subs	r0, #1
     3c8:	ebb8 0507 	subs.w	r5, r8, r7
     3cc:	eb69 0203 	sbc.w	r2, r9, r3
     3d0:	b32e      	cbz	r6, 41e <CONFIG_FLASH_SIZE+0x1e>
     3d2:	ebbe 0305 	subs.w	r3, lr, r5
     3d6:	eb6c 0c02 	sbc.w	ip, ip, r2
     3da:	fa23 f201 	lsr.w	r2, r3, r1
     3de:	fa0c f404 	lsl.w	r4, ip, r4
     3e2:	fa2c f301 	lsr.w	r3, ip, r1
     3e6:	2100      	movs	r1, #0
     3e8:	4314      	orrs	r4, r2
     3ea:	e9c6 4300 	strd	r4, r3, [r6]
     3ee:	e70c      	b.n	20a <CONFIG_KOBJECT_TEXT_AREA+0xa>
     3f0:	4631      	mov	r1, r6
     3f2:	4630      	mov	r0, r6
     3f4:	e709      	b.n	20a <CONFIG_KOBJECT_TEXT_AREA+0xa>
     3f6:	1a84      	subs	r4, r0, r2
     3f8:	eb65 0303 	sbc.w	r3, r5, r3
     3fc:	2001      	movs	r0, #1
     3fe:	469a      	mov	sl, r3
     400:	e756      	b.n	2b0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x30>
     402:	f1ac 0c02 	sub.w	ip, ip, #2
     406:	443d      	add	r5, r7
     408:	e724      	b.n	254 <CONFIG_KOBJECT_TEXT_AREA+0x54>
     40a:	3802      	subs	r0, #2
     40c:	443c      	add	r4, r7
     40e:	e734      	b.n	27a <CONFIG_KOBJECT_TEXT_AREA+0x7a>
     410:	3802      	subs	r0, #2
     412:	443c      	add	r4, r7
     414:	e6ef      	b.n	1f6 <__udivmoddi4+0x82>
     416:	f1ae 0e02 	sub.w	lr, lr, #2
     41a:	443b      	add	r3, r7
     41c:	e6d9      	b.n	1d2 <__udivmoddi4+0x5e>
     41e:	4631      	mov	r1, r6
     420:	e6f3      	b.n	20a <CONFIG_KOBJECT_TEXT_AREA+0xa>
     422:	3802      	subs	r0, #2
     424:	449c      	add	ip, r3
     426:	e7c1      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     428:	3802      	subs	r0, #2
     42a:	443b      	add	r3, r7
     42c:	e768      	b.n	300 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x80>
     42e:	f1aa 0a02 	sub.w	sl, sl, #2
     432:	449c      	add	ip, r3
     434:	e7a7      	b.n	386 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x106>
     436:	3902      	subs	r1, #2
     438:	443d      	add	r5, r7
     43a:	e774      	b.n	326 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa6>

0000043c <__aeabi_idiv0>:
     43c:	4770      	bx	lr
     43e:	bf00      	nop

00000440 <log_const_source_id>:
 *
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
     440:	b480      	push	{r7}
     442:	b083      	sub	sp, #12
     444:	af00      	add	r7, sp, #0
     446:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
     448:	687b      	ldr	r3, [r7, #4]
     44a:	4a04      	ldr	r2, [pc, #16]	; (45c <log_const_source_id+0x1c>)
     44c:	1a9b      	subs	r3, r3, r2
     44e:	08db      	lsrs	r3, r3, #3
			sizeof(struct log_source_const_data);
}
     450:	4618      	mov	r0, r3
     452:	370c      	adds	r7, #12
     454:	46bd      	mov	sp, r7
     456:	bc80      	pop	{r7}
     458:	4770      	bx	lr
     45a:	bf00      	nop
     45c:	000170bc 	.word	0x000170bc

00000460 <uart_callback>:
}

static void uart_callback(const struct device *dev,
			  struct uart_event *evt,
			  void *user_data)
{
     460:	b580      	push	{r7, lr}
     462:	b08e      	sub	sp, #56	; 0x38
     464:	af00      	add	r7, sp, #0
     466:	60f8      	str	r0, [r7, #12]
     468:	60b9      	str	r1, [r7, #8]
     46a:	607a      	str	r2, [r7, #4]
	struct device *uart = user_data;
     46c:	687b      	ldr	r3, [r7, #4]
     46e:	637b      	str	r3, [r7, #52]	; 0x34
	int err;

	switch (evt->type) {
     470:	68bb      	ldr	r3, [r7, #8]
     472:	781b      	ldrb	r3, [r3, #0]
     474:	2b06      	cmp	r3, #6
     476:	f200 80cc 	bhi.w	612 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12a>
     47a:	a201      	add	r2, pc, #4	; (adr r2, 480 <uart_callback+0x20>)
     47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     480:	00000611 	.word	0x00000611
     484:	0000049d 	.word	0x0000049d
     488:	00000515 	.word	0x00000515
     48c:	0000059d 	.word	0x0000059d
     490:	00000603 	.word	0x00000603
     494:	00000611 	.word	0x00000611
     498:	00000611 	.word	0x00000611

		// LOG_INF("Tx sent %d bytes", evt->data.tx.len);
		break;

	case UART_TX_ABORTED:
		LOG_ERR("Tx aborted");
     49c:	2303      	movs	r3, #3
     49e:	2b00      	cmp	r3, #0
     4a0:	d101      	bne.n	4a6 <uart_callback+0x46>
     4a2:	bf00      	nop
		break;
     4a4:	e0b5      	b.n	612 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12a>
		LOG_ERR("Tx aborted");
     4a6:	f00f f9a5 	bl	f7f4 <k_is_user_context>
     4aa:	4603      	mov	r3, r0
     4ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
     4b0:	2300      	movs	r3, #0
     4b2:	627b      	str	r3, [r7, #36]	; 0x24
     4b4:	2303      	movs	r3, #3
     4b6:	2b00      	cmp	r3, #0
     4b8:	d007      	beq.n	4ca <uart_callback+0x6a>
     4ba:	4b58      	ldr	r3, [pc, #352]	; (61c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x134>)
     4bc:	681b      	ldr	r3, [r3, #0]
     4be:	4618      	mov	r0, r3
     4c0:	f7ff ffbe 	bl	440 <log_const_source_id>
     4c4:	4603      	mov	r3, r0
     4c6:	b29b      	uxth	r3, r3
     4c8:	e000      	b.n	4cc <uart_callback+0x6c>
     4ca:	2300      	movs	r3, #0
     4cc:	853b      	strh	r3, [r7, #40]	; 0x28
     4ce:	f897 3020 	ldrb.w	r3, [r7, #32]
     4d2:	2201      	movs	r2, #1
     4d4:	f362 0302 	bfi	r3, r2, #0, #3
     4d8:	f887 3020 	strb.w	r3, [r7, #32]
     4dc:	f897 3020 	ldrb.w	r3, [r7, #32]
     4e0:	f36f 03c5 	bfc	r3, #3, #3
     4e4:	f887 3020 	strb.w	r3, [r7, #32]
     4e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
     4ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
     4ee:	b29a      	uxth	r2, r3
     4f0:	8c3b      	ldrh	r3, [r7, #32]
     4f2:	f362 138f 	bfi	r3, r2, #6, #10
     4f6:	843b      	strh	r3, [r7, #32]
     4f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
     4fc:	2b00      	cmp	r3, #0
     4fe:	d004      	beq.n	50a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22>
     500:	4947      	ldr	r1, [pc, #284]	; (620 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x138>)
     502:	8c38      	ldrh	r0, [r7, #32]
     504:	f002 fbba 	bl	2c7c <log_from_user>
		break;
     508:	e083      	b.n	612 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12a>
		LOG_ERR("Tx aborted");
     50a:	8c39      	ldrh	r1, [r7, #32]
     50c:	4844      	ldr	r0, [pc, #272]	; (620 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x138>)
     50e:	f010 fcae 	bl	10e6e <log_0>
		break;
     512:	e07e      	b.n	612 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12a>

	case UART_RX_RDY:
			printk("%s\n", evt->data.rx);
     514:	68bb      	ldr	r3, [r7, #8]
     516:	3304      	adds	r3, #4
     518:	cb0e      	ldmia	r3, {r1, r2, r3}
     51a:	4842      	ldr	r0, [pc, #264]	; (624 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x13c>)
     51c:	f00f fbaa 	bl	fc74 <printk>

		LOG_INF("Received data %d bytes", evt->data.rx.len);
     520:	2303      	movs	r3, #3
     522:	2b02      	cmp	r3, #2
     524:	d801      	bhi.n	52a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x42>
     526:	bf00      	nop
		break;
     528:	e073      	b.n	612 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12a>
		LOG_INF("Received data %d bytes", evt->data.rx.len);
     52a:	f00f f963 	bl	f7f4 <k_is_user_context>
     52e:	4603      	mov	r3, r0
     530:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
     534:	2300      	movs	r3, #0
     536:	61fb      	str	r3, [r7, #28]
     538:	2303      	movs	r3, #3
     53a:	2b00      	cmp	r3, #0
     53c:	d007      	beq.n	54e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x66>
     53e:	4b37      	ldr	r3, [pc, #220]	; (61c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x134>)
     540:	681b      	ldr	r3, [r3, #0]
     542:	4618      	mov	r0, r3
     544:	f7ff ff7c 	bl	440 <log_const_source_id>
     548:	4603      	mov	r3, r0
     54a:	b29b      	uxth	r3, r3
     54c:	e000      	b.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
     54e:	2300      	movs	r3, #0
     550:	85bb      	strh	r3, [r7, #44]	; 0x2c
     552:	7e3b      	ldrb	r3, [r7, #24]
     554:	2203      	movs	r2, #3
     556:	f362 0302 	bfi	r3, r2, #0, #3
     55a:	763b      	strb	r3, [r7, #24]
     55c:	7e3b      	ldrb	r3, [r7, #24]
     55e:	f36f 03c5 	bfc	r3, #3, #3
     562:	763b      	strb	r3, [r7, #24]
     564:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
     566:	f3c3 0309 	ubfx	r3, r3, #0, #10
     56a:	b29a      	uxth	r2, r3
     56c:	8b3b      	ldrh	r3, [r7, #24]
     56e:	f362 138f 	bfi	r3, r2, #6, #10
     572:	833b      	strh	r3, [r7, #24]
     574:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
     578:	2b00      	cmp	r3, #0
     57a:	d007      	beq.n	58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>
     57c:	68bb      	ldr	r3, [r7, #8]
     57e:	68db      	ldr	r3, [r3, #12]
     580:	461a      	mov	r2, r3
     582:	4929      	ldr	r1, [pc, #164]	; (628 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x140>)
     584:	8b38      	ldrh	r0, [r7, #24]
     586:	f002 fb79 	bl	2c7c <log_from_user>
		break;
     58a:	e042      	b.n	612 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12a>
		LOG_INF("Received data %d bytes", evt->data.rx.len);
     58c:	68bb      	ldr	r3, [r7, #8]
     58e:	68db      	ldr	r3, [r3, #12]
     590:	8b3a      	ldrh	r2, [r7, #24]
     592:	4619      	mov	r1, r3
     594:	4824      	ldr	r0, [pc, #144]	; (628 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x140>)
     596:	f010 fc7f 	bl	10e98 <log_1>
		break;
     59a:	e03a      	b.n	612 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12a>

	case UART_RX_BUF_REQUEST:
	{
		uint8_t *buf;

		err = k_mem_slab_alloc(&uart_slab, (void **)&buf, K_NO_WAIT);
     59c:	f04f 0200 	mov.w	r2, #0
     5a0:	f04f 0300 	mov.w	r3, #0
     5a4:	f107 0114 	add.w	r1, r7, #20
     5a8:	4820      	ldr	r0, [pc, #128]	; (62c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x144>)
     5aa:	f00a fe6f 	bl	b28c <k_mem_slab_alloc>
     5ae:	6338      	str	r0, [r7, #48]	; 0x30
		__ASSERT(err == 0, "Failed to allocate slab");
     5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     5b2:	2b00      	cmp	r3, #0
     5b4:	d00c      	beq.n	5d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe8>
     5b6:	234f      	movs	r3, #79	; 0x4f
     5b8:	4a1d      	ldr	r2, [pc, #116]	; (630 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x148>)
     5ba:	491e      	ldr	r1, [pc, #120]	; (634 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14c>)
     5bc:	481e      	ldr	r0, [pc, #120]	; (638 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x150>)
     5be:	f00f fb59 	bl	fc74 <printk>
     5c2:	481e      	ldr	r0, [pc, #120]	; (63c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x154>)
     5c4:	f00f fb56 	bl	fc74 <printk>
     5c8:	214f      	movs	r1, #79	; 0x4f
     5ca:	4819      	ldr	r0, [pc, #100]	; (630 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x148>)
     5cc:	f00f ffae 	bl	1052c <assert_post_action>

		err = uart_rx_buf_rsp(uart, buf, BUF_SIZE);
     5d0:	697b      	ldr	r3, [r7, #20]
     5d2:	2220      	movs	r2, #32
     5d4:	4619      	mov	r1, r3
     5d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
     5d8:	f00f faab 	bl	fb32 <uart_rx_buf_rsp>
     5dc:	6338      	str	r0, [r7, #48]	; 0x30
		__ASSERT(err == 0, "Failed to provide new buffer");
     5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     5e0:	2b00      	cmp	r3, #0
     5e2:	d00c      	beq.n	5fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x116>
     5e4:	2352      	movs	r3, #82	; 0x52
     5e6:	4a12      	ldr	r2, [pc, #72]	; (630 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x148>)
     5e8:	4912      	ldr	r1, [pc, #72]	; (634 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14c>)
     5ea:	4813      	ldr	r0, [pc, #76]	; (638 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x150>)
     5ec:	f00f fb42 	bl	fc74 <printk>
     5f0:	4813      	ldr	r0, [pc, #76]	; (640 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x158>)
     5f2:	f00f fb3f 	bl	fc74 <printk>
     5f6:	2152      	movs	r1, #82	; 0x52
     5f8:	480d      	ldr	r0, [pc, #52]	; (630 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x148>)
     5fa:	f00f ff97 	bl	1052c <assert_post_action>
		break;
     5fe:	bf00      	nop
		break;

	case UART_RX_STOPPED:
		break;
	}
}
     600:	e007      	b.n	612 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12a>
		k_mem_slab_free(&uart_slab, (void **)&evt->data.rx_buf.buf);
     602:	68bb      	ldr	r3, [r7, #8]
     604:	3304      	adds	r3, #4
     606:	4619      	mov	r1, r3
     608:	4808      	ldr	r0, [pc, #32]	; (62c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x144>)
     60a:	f00a fee7 	bl	b3dc <k_mem_slab_free>
		break;
     60e:	e000      	b.n	612 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12a>
		break;
     610:	bf00      	nop
}
     612:	bf00      	nop
     614:	3738      	adds	r7, #56	; 0x38
     616:	46bd      	mov	sp, r7
     618:	bd80      	pop	{r7, pc}
     61a:	bf00      	nop
     61c:	200000c8 	.word	0x200000c8
     620:	0001715c 	.word	0x0001715c
     624:	00017168 	.word	0x00017168
     628:	0001716c 	.word	0x0001716c
     62c:	200001e0 	.word	0x200001e0
     630:	00017184 	.word	0x00017184
     634:	000171a0 	.word	0x000171a0
     638:	000171ac 	.word	0x000171ac
     63c:	000171cc 	.word	0x000171cc
     640:	000171e8 	.word	0x000171e8

00000644 <async>:

static void async(const struct device *lpuart)
{
     644:	b580      	push	{r7, lr}
     646:	b086      	sub	sp, #24
     648:	af00      	add	r7, sp, #0
     64a:	6078      	str	r0, [r7, #4]
	uint8_t txbuf[5] = {1, 2, 3, 4, 5};
     64c:	4a42      	ldr	r2, [pc, #264]	; (758 <async+0x114>)
     64e:	f107 030c 	add.w	r3, r7, #12
     652:	e892 0003 	ldmia.w	r2, {r0, r1}
     656:	6018      	str	r0, [r3, #0]
     658:	3304      	adds	r3, #4
     65a:	7019      	strb	r1, [r3, #0]
	int err;
	uint8_t *buf;

	err = k_mem_slab_alloc(&uart_slab, (void **)&buf, K_NO_WAIT);
     65c:	f04f 0200 	mov.w	r2, #0
     660:	f04f 0300 	mov.w	r3, #0
     664:	f107 0108 	add.w	r1, r7, #8
     668:	483c      	ldr	r0, [pc, #240]	; (75c <async+0x118>)
     66a:	f00a fe0f 	bl	b28c <k_mem_slab_alloc>
     66e:	6178      	str	r0, [r7, #20]
	__ASSERT(err == 0, "Failed to alloc slab");
     670:	697b      	ldr	r3, [r7, #20]
     672:	2b00      	cmp	r3, #0
     674:	d00c      	beq.n	690 <async+0x4c>
     676:	2369      	movs	r3, #105	; 0x69
     678:	4a39      	ldr	r2, [pc, #228]	; (760 <async+0x11c>)
     67a:	493a      	ldr	r1, [pc, #232]	; (764 <async+0x120>)
     67c:	483a      	ldr	r0, [pc, #232]	; (768 <async+0x124>)
     67e:	f00f faf9 	bl	fc74 <printk>
     682:	483a      	ldr	r0, [pc, #232]	; (76c <async+0x128>)
     684:	f00f faf6 	bl	fc74 <printk>
     688:	2169      	movs	r1, #105	; 0x69
     68a:	4835      	ldr	r0, [pc, #212]	; (760 <async+0x11c>)
     68c:	f00f ff4e 	bl	1052c <assert_post_action>

	err = uart_callback_set(lpuart, uart_callback, (void *)lpuart);
     690:	687a      	ldr	r2, [r7, #4]
     692:	4937      	ldr	r1, [pc, #220]	; (770 <async+0x12c>)
     694:	6878      	ldr	r0, [r7, #4]
     696:	f00f fa0c 	bl	fab2 <uart_callback_set>
     69a:	6178      	str	r0, [r7, #20]
	__ASSERT(err == 0, "Failed to set callback");
     69c:	697b      	ldr	r3, [r7, #20]
     69e:	2b00      	cmp	r3, #0
     6a0:	d00c      	beq.n	6bc <async+0x78>
     6a2:	236c      	movs	r3, #108	; 0x6c
     6a4:	4a2e      	ldr	r2, [pc, #184]	; (760 <async+0x11c>)
     6a6:	492f      	ldr	r1, [pc, #188]	; (764 <async+0x120>)
     6a8:	482f      	ldr	r0, [pc, #188]	; (768 <async+0x124>)
     6aa:	f00f fae3 	bl	fc74 <printk>
     6ae:	4831      	ldr	r0, [pc, #196]	; (774 <async+0x130>)
     6b0:	f00f fae0 	bl	fc74 <printk>
     6b4:	216c      	movs	r1, #108	; 0x6c
     6b6:	482a      	ldr	r0, [pc, #168]	; (760 <async+0x11c>)
     6b8:	f00f ff38 	bl	1052c <assert_post_action>

	err = uart_rx_enable(lpuart, buf, BUF_SIZE, 10);
     6bc:	68b9      	ldr	r1, [r7, #8]
     6be:	230a      	movs	r3, #10
     6c0:	2220      	movs	r2, #32
     6c2:	6878      	ldr	r0, [r7, #4]
     6c4:	f00f fa6e 	bl	fba4 <uart_rx_enable>
     6c8:	6178      	str	r0, [r7, #20]
	__ASSERT(err == 0, "Failed to enable RX");
     6ca:	697b      	ldr	r3, [r7, #20]
     6cc:	2b00      	cmp	r3, #0
     6ce:	d00c      	beq.n	6ea <async+0xa6>
     6d0:	236f      	movs	r3, #111	; 0x6f
     6d2:	4a23      	ldr	r2, [pc, #140]	; (760 <async+0x11c>)
     6d4:	4923      	ldr	r1, [pc, #140]	; (764 <async+0x120>)
     6d6:	4824      	ldr	r0, [pc, #144]	; (768 <async+0x124>)
     6d8:	f00f facc 	bl	fc74 <printk>
     6dc:	4826      	ldr	r0, [pc, #152]	; (778 <async+0x134>)
     6de:	f00f fac9 	bl	fc74 <printk>
     6e2:	216f      	movs	r1, #111	; 0x6f
     6e4:	481e      	ldr	r0, [pc, #120]	; (760 <async+0x11c>)
     6e6:	f00f ff21 	bl	1052c <assert_post_action>

	while (1) {
		err = uart_tx(lpuart, txbuf, sizeof(txbuf), 10);
     6ea:	f107 010c 	add.w	r1, r7, #12
     6ee:	230a      	movs	r3, #10
     6f0:	2205      	movs	r2, #5
     6f2:	6878      	ldr	r0, [r7, #4]
     6f4:	f00f fa44 	bl	fb80 <uart_tx>
     6f8:	6178      	str	r0, [r7, #20]
		__ASSERT(err == 0, "Failed to initiate transmission");
     6fa:	697b      	ldr	r3, [r7, #20]
     6fc:	2b00      	cmp	r3, #0
     6fe:	d00c      	beq.n	71a <async+0xd6>
     700:	2373      	movs	r3, #115	; 0x73
     702:	4a17      	ldr	r2, [pc, #92]	; (760 <async+0x11c>)
     704:	4917      	ldr	r1, [pc, #92]	; (764 <async+0x120>)
     706:	4818      	ldr	r0, [pc, #96]	; (768 <async+0x124>)
     708:	f00f fab4 	bl	fc74 <printk>
     70c:	481b      	ldr	r0, [pc, #108]	; (77c <async+0x138>)
     70e:	f00f fab1 	bl	fc74 <printk>
     712:	2173      	movs	r1, #115	; 0x73
     714:	4812      	ldr	r0, [pc, #72]	; (760 <async+0x11c>)
     716:	f00f ff09 	bl	1052c <assert_post_action>

		k_sleep(K_MSEC(500));
     71a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     71e:	f04f 0100 	mov.w	r1, #0
     722:	f00f f86e 	bl	f802 <k_ms_to_ticks_ceil64>
     726:	4602      	mov	r2, r0
     728:	460b      	mov	r3, r1
     72a:	4610      	mov	r0, r2
     72c:	4619      	mov	r1, r3
     72e:	f00f f9a6 	bl	fa7e <k_sleep>

		uart_poll_out(lpuart, txbuf[0]);
     732:	7b3b      	ldrb	r3, [r7, #12]
     734:	4619      	mov	r1, r3
     736:	6878      	ldr	r0, [r7, #4]
     738:	f00f fa46 	bl	fbc8 <uart_poll_out>
		k_sleep(K_MSEC(100));
     73c:	f04f 0064 	mov.w	r0, #100	; 0x64
     740:	f04f 0100 	mov.w	r1, #0
     744:	f00f f85d 	bl	f802 <k_ms_to_ticks_ceil64>
     748:	4602      	mov	r2, r0
     74a:	460b      	mov	r3, r1
     74c:	4610      	mov	r0, r2
     74e:	4619      	mov	r1, r3
     750:	f00f f995 	bl	fa7e <k_sleep>
	while (1) {
     754:	e7c9      	b.n	6ea <async+0xa6>
     756:	bf00      	nop
     758:	00017154 	.word	0x00017154
     75c:	200001e0 	.word	0x200001e0
     760:	00017184 	.word	0x00017184
     764:	000171a0 	.word	0x000171a0
     768:	000171ac 	.word	0x000171ac
     76c:	00017208 	.word	0x00017208
     770:	00000461 	.word	0x00000461
     774:	00017220 	.word	0x00017220
     778:	0001723c 	.word	0x0001723c
     77c:	00017254 	.word	0x00017254

00000780 <main>:
	}
}

void main(void)
{
     780:	b580      	push	{r7, lr}
     782:	b082      	sub	sp, #8
     784:	af00      	add	r7, sp, #0
	const struct device *lpuart;

	k_msleep(1000);
     786:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     78a:	f00f f95e 	bl	fa4a <k_msleep>

	lpuart = device_get_binding("UART_1");
     78e:	480d      	ldr	r0, [pc, #52]	; (7c4 <main+0x44>)
     790:	f00f f983 	bl	fa9a <device_get_binding>
     794:	6078      	str	r0, [r7, #4]
	__ASSERT(lpuart, "Failed to get the device");
     796:	687b      	ldr	r3, [r7, #4]
     798:	2b00      	cmp	r3, #0
     79a:	d10c      	bne.n	7b6 <main+0x36>
     79c:	2383      	movs	r3, #131	; 0x83
     79e:	4a0a      	ldr	r2, [pc, #40]	; (7c8 <main+0x48>)
     7a0:	490a      	ldr	r1, [pc, #40]	; (7cc <main+0x4c>)
     7a2:	480b      	ldr	r0, [pc, #44]	; (7d0 <main+0x50>)
     7a4:	f00f fa66 	bl	fc74 <printk>
     7a8:	480a      	ldr	r0, [pc, #40]	; (7d4 <main+0x54>)
     7aa:	f00f fa63 	bl	fc74 <printk>
     7ae:	2183      	movs	r1, #131	; 0x83
     7b0:	4805      	ldr	r0, [pc, #20]	; (7c8 <main+0x48>)
     7b2:	f00f febb 	bl	1052c <assert_post_action>
	if (IS_ENABLED(CONFIG_NRF_SW_LPUART_INT_DRIVEN)) {			
		interrupt_driven(lpuart);
	} else {
		async(lpuart);
     7b6:	6878      	ldr	r0, [r7, #4]
     7b8:	f7ff ff44 	bl	644 <async>
	}
}
     7bc:	bf00      	nop
     7be:	3708      	adds	r7, #8
     7c0:	46bd      	mov	sp, r7
     7c2:	bd80      	pop	{r7, pc}
     7c4:	00017278 	.word	0x00017278
     7c8:	00017184 	.word	0x00017184
     7cc:	00017280 	.word	0x00017280
     7d0:	000171ac 	.word	0x000171ac
     7d4:	00017288 	.word	0x00017288

000007d8 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     7d8:	b580      	push	{r7, lr}
     7da:	b086      	sub	sp, #24
     7dc:	af00      	add	r7, sp, #0
     7de:	6078      	str	r0, [r7, #4]
     7e0:	6039      	str	r1, [r7, #0]
	struct k_poll_signal *sig = NULL;
     7e2:	2300      	movs	r3, #0
     7e4:	613b      	str	r3, [r7, #16]
	sys_notify_generic_callback rv = NULL;
     7e6:	2300      	movs	r3, #0
     7e8:	617b      	str	r3, [r7, #20]
	uint32_t method = sys_notify_get_method(notify);
     7ea:	6878      	ldr	r0, [r7, #4]
     7ec:	f00f f9fb 	bl	fbe6 <sys_notify_get_method>
     7f0:	60f8      	str	r0, [r7, #12]

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     7f2:	687b      	ldr	r3, [r7, #4]
     7f4:	683a      	ldr	r2, [r7, #0]
     7f6:	609a      	str	r2, [r3, #8]
	switch (method) {
     7f8:	68fb      	ldr	r3, [r7, #12]
     7fa:	2b03      	cmp	r3, #3
     7fc:	d009      	beq.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
     7fe:	68fb      	ldr	r3, [r7, #12]
     800:	2b03      	cmp	r3, #3
     802:	d80e      	bhi.n	822 <CONFIG_ISR_STACK_SIZE+0x22>
     804:	68fb      	ldr	r3, [r7, #12]
     806:	2b01      	cmp	r3, #1
     808:	d016      	beq.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
     80a:	68fb      	ldr	r3, [r7, #12]
     80c:	2b02      	cmp	r3, #2
     80e:	d004      	beq.n	81a <CONFIG_ISR_STACK_SIZE+0x1a>
     810:	e007      	b.n	822 <CONFIG_ISR_STACK_SIZE+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     812:	687b      	ldr	r3, [r7, #4]
     814:	681b      	ldr	r3, [r3, #0]
     816:	617b      	str	r3, [r7, #20]
		break;
     818:	e00f      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
     81a:	687b      	ldr	r3, [r7, #4]
     81c:	681b      	ldr	r3, [r3, #0]
     81e:	613b      	str	r3, [r7, #16]
		break;
     820:	e00b      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
	default:
		__ASSERT_NO_MSG(false);
     822:	2345      	movs	r3, #69	; 0x45
     824:	4a09      	ldr	r2, [pc, #36]	; (84c <CONFIG_ISR_STACK_SIZE+0x4c>)
     826:	490a      	ldr	r1, [pc, #40]	; (850 <CONFIG_ISR_STACK_SIZE+0x50>)
     828:	480a      	ldr	r0, [pc, #40]	; (854 <CONFIG_ISR_STACK_SIZE+0x54>)
     82a:	f00f fa23 	bl	fc74 <printk>
     82e:	2145      	movs	r1, #69	; 0x45
     830:	4806      	ldr	r0, [pc, #24]	; (84c <CONFIG_ISR_STACK_SIZE+0x4c>)
     832:	f00f fe7b 	bl	1052c <assert_post_action>
     836:	e000      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
		break;
     838:	bf00      	nop
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     83a:	687b      	ldr	r3, [r7, #4]
     83c:	2200      	movs	r2, #0
     83e:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
     840:	697b      	ldr	r3, [r7, #20]
}
     842:	4618      	mov	r0, r3
     844:	3718      	adds	r7, #24
     846:	46bd      	mov	sp, r7
     848:	bd80      	pop	{r7, pc}
     84a:	bf00      	nop
     84c:	000172a4 	.word	0x000172a4
     850:	000172c8 	.word	0x000172c8
     854:	000172cc 	.word	0x000172cc

00000858 <__printk_hook_install>:
 * @param fn putc routine to install
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
     858:	b480      	push	{r7}
     85a:	b083      	sub	sp, #12
     85c:	af00      	add	r7, sp, #0
     85e:	6078      	str	r0, [r7, #4]
	_char_out = fn;
     860:	4a03      	ldr	r2, [pc, #12]	; (870 <__printk_hook_install+0x18>)
     862:	687b      	ldr	r3, [r7, #4]
     864:	6013      	str	r3, [r2, #0]
}
     866:	bf00      	nop
     868:	370c      	adds	r7, #12
     86a:	46bd      	mov	sp, r7
     86c:	bc80      	pop	{r7}
     86e:	4770      	bx	lr
     870:	200000cc 	.word	0x200000cc

00000874 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     874:	b580      	push	{r7, lr}
     876:	b084      	sub	sp, #16
     878:	af00      	add	r7, sp, #0
     87a:	6078      	str	r0, [r7, #4]
     87c:	6039      	str	r1, [r7, #0]
	struct out_context *ctx = ctx_p;
     87e:	683b      	ldr	r3, [r7, #0]
     880:	60fb      	str	r3, [r7, #12]

	ctx->count++;
     882:	68fb      	ldr	r3, [r7, #12]
     884:	681b      	ldr	r3, [r3, #0]
     886:	1c5a      	adds	r2, r3, #1
     888:	68fb      	ldr	r3, [r7, #12]
     88a:	601a      	str	r2, [r3, #0]
	return _char_out(c);
     88c:	4b04      	ldr	r3, [pc, #16]	; (8a0 <char_out+0x2c>)
     88e:	681b      	ldr	r3, [r3, #0]
     890:	6878      	ldr	r0, [r7, #4]
     892:	4798      	blx	r3
     894:	4603      	mov	r3, r0
}
     896:	4618      	mov	r0, r3
     898:	3710      	adds	r7, #16
     89a:	46bd      	mov	sp, r7
     89c:	bd80      	pop	{r7, pc}
     89e:	bf00      	nop
     8a0:	200000cc 	.word	0x200000cc

000008a4 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     8a4:	b580      	push	{r7, lr}
     8a6:	b084      	sub	sp, #16
     8a8:	af00      	add	r7, sp, #0
     8aa:	6078      	str	r0, [r7, #4]
     8ac:	6039      	str	r1, [r7, #0]
	struct out_context ctx = { 0 };
     8ae:	2300      	movs	r3, #0
     8b0:	60fb      	str	r3, [r7, #12]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     8b2:	f107 010c 	add.w	r1, r7, #12
     8b6:	683b      	ldr	r3, [r7, #0]
     8b8:	687a      	ldr	r2, [r7, #4]
     8ba:	4803      	ldr	r0, [pc, #12]	; (8c8 <vprintk+0x24>)
     8bc:	f000 fefe 	bl	16bc <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     8c0:	bf00      	nop
     8c2:	3710      	adds	r7, #16
     8c4:	46bd      	mov	sp, r7
     8c6:	bd80      	pop	{r7, pc}
     8c8:	00000875 	.word	0x00000875

000008cc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     8cc:	b580      	push	{r7, lr}
     8ce:	b088      	sub	sp, #32
     8d0:	af00      	add	r7, sp, #0
     8d2:	60f8      	str	r0, [r7, #12]
     8d4:	60b9      	str	r1, [r7, #8]
     8d6:	607a      	str	r2, [r7, #4]
     8d8:	603b      	str	r3, [r7, #0]
	struct str_context ctx = { str, size, 0 };
     8da:	68fb      	ldr	r3, [r7, #12]
     8dc:	617b      	str	r3, [r7, #20]
     8de:	68bb      	ldr	r3, [r7, #8]
     8e0:	61bb      	str	r3, [r7, #24]
     8e2:	2300      	movs	r3, #0
     8e4:	61fb      	str	r3, [r7, #28]

	cbvprintf(str_out, &ctx, fmt, ap);
     8e6:	f107 0114 	add.w	r1, r7, #20
     8ea:	683b      	ldr	r3, [r7, #0]
     8ec:	687a      	ldr	r2, [r7, #4]
     8ee:	4809      	ldr	r0, [pc, #36]	; (914 <vsnprintk+0x48>)
     8f0:	f000 fee4 	bl	16bc <cbvprintf>

	if (ctx.count < ctx.max) {
     8f4:	69fa      	ldr	r2, [r7, #28]
     8f6:	69bb      	ldr	r3, [r7, #24]
     8f8:	429a      	cmp	r2, r3
     8fa:	da05      	bge.n	908 <vsnprintk+0x3c>
		str[ctx.count] = '\0';
     8fc:	69fb      	ldr	r3, [r7, #28]
     8fe:	461a      	mov	r2, r3
     900:	68fb      	ldr	r3, [r7, #12]
     902:	4413      	add	r3, r2
     904:	2200      	movs	r2, #0
     906:	701a      	strb	r2, [r3, #0]
	}

	return ctx.count;
     908:	69fb      	ldr	r3, [r7, #28]
}
     90a:	4618      	mov	r0, r3
     90c:	3720      	adds	r7, #32
     90e:	46bd      	mov	sp, r7
     910:	bd80      	pop	{r7, pc}
     912:	bf00      	nop
     914:	0000fc99 	.word	0x0000fc99

00000918 <transition_complete>:
			  int evt,
			  k_spinlock_key_t key);

static void transition_complete(struct onoff_manager *mgr,
				int res)
{
     918:	b580      	push	{r7, lr}
     91a:	b088      	sub	sp, #32
     91c:	af00      	add	r7, sp, #0
     91e:	6078      	str	r0, [r7, #4]
     920:	6039      	str	r1, [r7, #0]
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     922:	687b      	ldr	r3, [r7, #4]
     924:	3314      	adds	r3, #20
     926:	61fb      	str	r3, [r7, #28]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     928:	f04f 0320 	mov.w	r3, #32
     92c:	f3ef 8211 	mrs	r2, BASEPRI
     930:	f383 8811 	msr	BASEPRI, r3
     934:	f3bf 8f6f 	isb	sy
     938:	61ba      	str	r2, [r7, #24]
     93a:	617b      	str	r3, [r7, #20]
		: "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return key;
     93c:	69bb      	ldr	r3, [r7, #24]

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
     93e:	60fb      	str	r3, [r7, #12]

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     940:	69f8      	ldr	r0, [r7, #28]
     942:	f00a ffff 	bl	b944 <z_spin_lock_valid>
     946:	4603      	mov	r3, r0
     948:	f083 0301 	eor.w	r3, r3, #1
     94c:	b2db      	uxtb	r3, r3
     94e:	2b00      	cmp	r3, #0
     950:	d00d      	beq.n	96e <transition_complete+0x56>
     952:	2381      	movs	r3, #129	; 0x81
     954:	4a0e      	ldr	r2, [pc, #56]	; (990 <transition_complete+0x78>)
     956:	490f      	ldr	r1, [pc, #60]	; (994 <transition_complete+0x7c>)
     958:	480f      	ldr	r0, [pc, #60]	; (998 <transition_complete+0x80>)
     95a:	f00f f98b 	bl	fc74 <printk>
     95e:	69f9      	ldr	r1, [r7, #28]
     960:	480e      	ldr	r0, [pc, #56]	; (99c <transition_complete+0x84>)
     962:	f00f f987 	bl	fc74 <printk>
     966:	2181      	movs	r1, #129	; 0x81
     968:	4809      	ldr	r0, [pc, #36]	; (990 <transition_complete+0x78>)
     96a:	f00f fddf 	bl	1052c <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
     96e:	69f8      	ldr	r0, [r7, #28]
     970:	f00b f820 	bl	b9b4 <z_spin_lock_set_owner>
#endif
	return k;
     974:	68fb      	ldr	r3, [r7, #12]
     976:	613b      	str	r3, [r7, #16]

	mgr->last_res = res;
     978:	687b      	ldr	r3, [r7, #4]
     97a:	683a      	ldr	r2, [r7, #0]
     97c:	619a      	str	r2, [r3, #24]
	process_event(mgr, EVT_COMPLETE, key);
     97e:	693a      	ldr	r2, [r7, #16]
     980:	2101      	movs	r1, #1
     982:	6878      	ldr	r0, [r7, #4]
     984:	f000 f8bc 	bl	b00 <process_event>
}
     988:	bf00      	nop
     98a:	3720      	adds	r7, #32
     98c:	46bd      	mov	sp, r7
     98e:	bd80      	pop	{r7, pc}
     990:	000172ec 	.word	0x000172ec
     994:	00017314 	.word	0x00017314
     998:	0001732c 	.word	0x0001732c
     99c:	0001734c 	.word	0x0001734c

000009a0 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
     9a0:	b580      	push	{r7, lr}
     9a2:	b086      	sub	sp, #24
     9a4:	af00      	add	r7, sp, #0
     9a6:	60f8      	str	r0, [r7, #12]
     9a8:	60b9      	str	r1, [r7, #8]
     9aa:	607a      	str	r2, [r7, #4]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     9ac:	68fb      	ldr	r3, [r7, #12]
     9ae:	8b9b      	ldrh	r3, [r3, #28]
     9b0:	f003 0307 	and.w	r3, r3, #7
     9b4:	613b      	str	r3, [r7, #16]

	if (res < 0) {
     9b6:	687b      	ldr	r3, [r7, #4]
     9b8:	2b00      	cmp	r3, #0
     9ba:	da0e      	bge.n	9da <process_complete+0x3a>
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
     9bc:	68bb      	ldr	r3, [r7, #8]
     9be:	68fa      	ldr	r2, [r7, #12]
     9c0:	e892 0003 	ldmia.w	r2, {r0, r1}
     9c4:	e883 0003 	stmia.w	r3, {r0, r1}
		sys_slist_init(&mgr->clients);
     9c8:	68fb      	ldr	r3, [r7, #12]
     9ca:	4618      	mov	r0, r3
     9cc:	f00f f9b5 	bl	fd3a <sys_slist_init>
		set_state(mgr, ONOFF_STATE_ERROR);
     9d0:	2101      	movs	r1, #1
     9d2:	68f8      	ldr	r0, [r7, #12]
     9d4:	f00f fa82 	bl	fedc <set_state>
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
	}
}
     9d8:	e085      	b.n	ae6 <process_complete+0x146>
	} else if ((state == ONOFF_STATE_TO_ON)
     9da:	693b      	ldr	r3, [r7, #16]
     9dc:	2b06      	cmp	r3, #6
     9de:	d002      	beq.n	9e6 <process_complete+0x46>
		   || (state == ONOFF_STATE_RESETTING)) {
     9e0:	693b      	ldr	r3, [r7, #16]
     9e2:	2b05      	cmp	r3, #5
     9e4:	d15d      	bne.n	aa2 <process_complete+0x102>
		*clients = mgr->clients;
     9e6:	68bb      	ldr	r3, [r7, #8]
     9e8:	68fa      	ldr	r2, [r7, #12]
     9ea:	e892 0003 	ldmia.w	r2, {r0, r1}
     9ee:	e883 0003 	stmia.w	r3, {r0, r1}
		sys_slist_init(&mgr->clients);
     9f2:	68fb      	ldr	r3, [r7, #12]
     9f4:	4618      	mov	r0, r3
     9f6:	f00f f9a0 	bl	fd3a <sys_slist_init>
		if (state == ONOFF_STATE_TO_ON) {
     9fa:	693b      	ldr	r3, [r7, #16]
     9fc:	2b06      	cmp	r3, #6
     9fe:	d12f      	bne.n	a60 <process_complete+0xc0>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     a00:	68b8      	ldr	r0, [r7, #8]
     a02:	f00f f9db 	bl	fdbc <sys_slist_peek_head>
     a06:	4603      	mov	r3, r0
     a08:	2b00      	cmp	r3, #0
     a0a:	d004      	beq.n	a16 <process_complete+0x76>
     a0c:	68b8      	ldr	r0, [r7, #8]
     a0e:	f00f f9d5 	bl	fdbc <sys_slist_peek_head>
     a12:	4603      	mov	r3, r0
     a14:	e000      	b.n	a18 <process_complete+0x78>
     a16:	2300      	movs	r3, #0
     a18:	617b      	str	r3, [r7, #20]
     a1a:	e019      	b.n	a50 <process_complete+0xb0>
				mgr->refs += 1U;
     a1c:	68fb      	ldr	r3, [r7, #12]
     a1e:	8bdb      	ldrh	r3, [r3, #30]
     a20:	3301      	adds	r3, #1
     a22:	b29a      	uxth	r2, r3
     a24:	68fb      	ldr	r3, [r7, #12]
     a26:	83da      	strh	r2, [r3, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     a28:	697b      	ldr	r3, [r7, #20]
     a2a:	2b00      	cmp	r3, #0
     a2c:	d00e      	beq.n	a4c <process_complete+0xac>
     a2e:	697b      	ldr	r3, [r7, #20]
     a30:	4618      	mov	r0, r3
     a32:	f00f f9f6 	bl	fe22 <sys_slist_peek_next>
     a36:	4603      	mov	r3, r0
     a38:	2b00      	cmp	r3, #0
     a3a:	d005      	beq.n	a48 <process_complete+0xa8>
     a3c:	697b      	ldr	r3, [r7, #20]
     a3e:	4618      	mov	r0, r3
     a40:	f00f f9ef 	bl	fe22 <sys_slist_peek_next>
     a44:	4603      	mov	r3, r0
     a46:	e002      	b.n	a4e <process_complete+0xae>
     a48:	2300      	movs	r3, #0
     a4a:	e000      	b.n	a4e <process_complete+0xae>
     a4c:	2300      	movs	r3, #0
     a4e:	617b      	str	r3, [r7, #20]
     a50:	697b      	ldr	r3, [r7, #20]
     a52:	2b00      	cmp	r3, #0
     a54:	d1e2      	bne.n	a1c <process_complete+0x7c>
			set_state(mgr, ONOFF_STATE_ON);
     a56:	2102      	movs	r1, #2
     a58:	68f8      	ldr	r0, [r7, #12]
     a5a:	f00f fa3f 	bl	fedc <set_state>
     a5e:	e012      	b.n	a86 <process_complete+0xe6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
     a60:	693b      	ldr	r3, [r7, #16]
     a62:	2b05      	cmp	r3, #5
     a64:	d00b      	beq.n	a7e <process_complete+0xde>
     a66:	f240 1309 	movw	r3, #265	; 0x109
     a6a:	4a21      	ldr	r2, [pc, #132]	; (af0 <process_complete+0x150>)
     a6c:	4921      	ldr	r1, [pc, #132]	; (af4 <process_complete+0x154>)
     a6e:	4822      	ldr	r0, [pc, #136]	; (af8 <process_complete+0x158>)
     a70:	f00f f900 	bl	fc74 <printk>
     a74:	f240 1109 	movw	r1, #265	; 0x109
     a78:	481d      	ldr	r0, [pc, #116]	; (af0 <process_complete+0x150>)
     a7a:	f00f fd57 	bl	1052c <assert_post_action>
			set_state(mgr, ONOFF_STATE_OFF);
     a7e:	2100      	movs	r1, #0
     a80:	68f8      	ldr	r0, [r7, #12]
     a82:	f00f fa2b 	bl	fedc <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
     a86:	68f8      	ldr	r0, [r7, #12]
     a88:	f00f fb17 	bl	100ba <process_recheck>
     a8c:	4603      	mov	r3, r0
     a8e:	2b00      	cmp	r3, #0
     a90:	d029      	beq.n	ae6 <process_complete+0x146>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     a92:	68fb      	ldr	r3, [r7, #12]
     a94:	8b9b      	ldrh	r3, [r3, #28]
     a96:	f043 0320 	orr.w	r3, r3, #32
     a9a:	b29a      	uxth	r2, r3
     a9c:	68fb      	ldr	r3, [r7, #12]
     a9e:	839a      	strh	r2, [r3, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     aa0:	e021      	b.n	ae6 <process_complete+0x146>
	} else if (state == ONOFF_STATE_TO_OFF) {
     aa2:	693b      	ldr	r3, [r7, #16]
     aa4:	2b04      	cmp	r3, #4
     aa6:	d111      	bne.n	acc <process_complete+0x12c>
		set_state(mgr, ONOFF_STATE_OFF);
     aa8:	2100      	movs	r1, #0
     aaa:	68f8      	ldr	r0, [r7, #12]
     aac:	f00f fa16 	bl	fedc <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
     ab0:	68f8      	ldr	r0, [r7, #12]
     ab2:	f00f fb02 	bl	100ba <process_recheck>
     ab6:	4603      	mov	r3, r0
     ab8:	2b00      	cmp	r3, #0
     aba:	d014      	beq.n	ae6 <process_complete+0x146>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     abc:	68fb      	ldr	r3, [r7, #12]
     abe:	8b9b      	ldrh	r3, [r3, #28]
     ac0:	f043 0320 	orr.w	r3, r3, #32
     ac4:	b29a      	uxth	r2, r3
     ac6:	68fb      	ldr	r3, [r7, #12]
     ac8:	839a      	strh	r2, [r3, #28]
}
     aca:	e00c      	b.n	ae6 <process_complete+0x146>
		__ASSERT_NO_MSG(false);
     acc:	f240 131b 	movw	r3, #283	; 0x11b
     ad0:	4a07      	ldr	r2, [pc, #28]	; (af0 <process_complete+0x150>)
     ad2:	490a      	ldr	r1, [pc, #40]	; (afc <process_complete+0x15c>)
     ad4:	4808      	ldr	r0, [pc, #32]	; (af8 <process_complete+0x158>)
     ad6:	f00f f8cd 	bl	fc74 <printk>
     ada:	f240 111b 	movw	r1, #283	; 0x11b
     ade:	4804      	ldr	r0, [pc, #16]	; (af0 <process_complete+0x150>)
     ae0:	f00f fd24 	bl	1052c <assert_post_action>
}
     ae4:	e7ff      	b.n	ae6 <process_complete+0x146>
     ae6:	bf00      	nop
     ae8:	3718      	adds	r7, #24
     aea:	46bd      	mov	sp, r7
     aec:	bd80      	pop	{r7, pc}
     aee:	bf00      	nop
     af0:	00017364 	.word	0x00017364
     af4:	00017388 	.word	0x00017388
     af8:	0001732c 	.word	0x0001732c
     afc:	000173b0 	.word	0x000173b0

00000b00 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     b00:	b580      	push	{r7, lr}
     b02:	b096      	sub	sp, #88	; 0x58
     b04:	af00      	add	r7, sp, #0
     b06:	60f8      	str	r0, [r7, #12]
     b08:	60b9      	str	r1, [r7, #8]
     b0a:	607a      	str	r2, [r7, #4]
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     b0c:	68fb      	ldr	r3, [r7, #12]
     b0e:	8b9b      	ldrh	r3, [r3, #28]
     b10:	f003 0307 	and.w	r3, r3, #7
     b14:	657b      	str	r3, [r7, #84]	; 0x54
	int res = 0;
     b16:	2300      	movs	r3, #0
     b18:	653b      	str	r3, [r7, #80]	; 0x50
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
     b1a:	68fb      	ldr	r3, [r7, #12]
     b1c:	8b9b      	ldrh	r3, [r3, #28]
     b1e:	f003 0308 	and.w	r3, r3, #8
     b22:	2b00      	cmp	r3, #0
     b24:	bf14      	ite	ne
     b26:	2301      	movne	r3, #1
     b28:	2300      	moveq	r3, #0
     b2a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	__ASSERT_NO_MSG(evt != EVT_NOP);
     b2e:	68bb      	ldr	r3, [r7, #8]
     b30:	2b00      	cmp	r3, #0
     b32:	d10b      	bne.n	b4c <process_event+0x4c>
     b34:	f240 1333 	movw	r3, #307	; 0x133
     b38:	4a92      	ldr	r2, [pc, #584]	; (d84 <process_event+0x284>)
     b3a:	4993      	ldr	r1, [pc, #588]	; (d88 <process_event+0x288>)
     b3c:	4893      	ldr	r0, [pc, #588]	; (d8c <process_event+0x28c>)
     b3e:	f00f f899 	bl	fc74 <printk>
     b42:	f240 1133 	movw	r1, #307	; 0x133
     b46:	488f      	ldr	r0, [pc, #572]	; (d84 <process_event+0x284>)
     b48:	f00f fcf0 	bl	1052c <assert_post_action>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     b4c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
     b50:	2b00      	cmp	r3, #0
     b52:	d021      	beq.n	b98 <process_event+0x98>
		if (evt == EVT_COMPLETE) {
     b54:	68bb      	ldr	r3, [r7, #8]
     b56:	2b01      	cmp	r3, #1
     b58:	d107      	bne.n	b6a <process_event+0x6a>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     b5a:	68fb      	ldr	r3, [r7, #12]
     b5c:	8b9b      	ldrh	r3, [r3, #28]
     b5e:	f043 0310 	orr.w	r3, r3, #16
     b62:	b29a      	uxth	r2, r3
     b64:	68fb      	ldr	r3, [r7, #12]
     b66:	839a      	strh	r2, [r3, #28]
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
		}

		goto out;
     b68:	e1f6      	b.n	f58 <process_event+0x458>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
     b6a:	68bb      	ldr	r3, [r7, #8]
     b6c:	2b02      	cmp	r3, #2
     b6e:	d00b      	beq.n	b88 <process_event+0x88>
     b70:	f44f 739e 	mov.w	r3, #316	; 0x13c
     b74:	4a83      	ldr	r2, [pc, #524]	; (d84 <process_event+0x284>)
     b76:	4986      	ldr	r1, [pc, #536]	; (d90 <process_event+0x290>)
     b78:	4884      	ldr	r0, [pc, #528]	; (d8c <process_event+0x28c>)
     b7a:	f00f f87b 	bl	fc74 <printk>
     b7e:	f44f 719e 	mov.w	r1, #316	; 0x13c
     b82:	4880      	ldr	r0, [pc, #512]	; (d84 <process_event+0x284>)
     b84:	f00f fcd2 	bl	1052c <assert_post_action>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     b88:	68fb      	ldr	r3, [r7, #12]
     b8a:	8b9b      	ldrh	r3, [r3, #28]
     b8c:	f043 0320 	orr.w	r3, r3, #32
     b90:	b29a      	uxth	r2, r3
     b92:	68fb      	ldr	r3, [r7, #12]
     b94:	839a      	strh	r2, [r3, #28]
		goto out;
     b96:	e1df      	b.n	f58 <process_event+0x458>
	}

	sys_slist_init(&clients);
     b98:	f107 0320 	add.w	r3, r7, #32
     b9c:	4618      	mov	r0, r3
     b9e:	f00f f8cc 	bl	fd3a <sys_slist_init>
	do {
		onoff_transition_fn transit = NULL;
     ba2:	2300      	movs	r3, #0
     ba4:	64fb      	str	r3, [r7, #76]	; 0x4c

		if (evt == EVT_RECHECK) {
     ba6:	68bb      	ldr	r3, [r7, #8]
     ba8:	2b02      	cmp	r3, #2
     baa:	d103      	bne.n	bb4 <process_event+0xb4>
			evt = process_recheck(mgr);
     bac:	68f8      	ldr	r0, [r7, #12]
     bae:	f00f fa84 	bl	100ba <process_recheck>
     bb2:	60b8      	str	r0, [r7, #8]
		}

		if (evt == EVT_NOP) {
     bb4:	68bb      	ldr	r3, [r7, #8]
     bb6:	2b00      	cmp	r3, #0
     bb8:	f000 81cd 	beq.w	f56 <process_event+0x456>
			break;
		}

		res = 0;
     bbc:	2300      	movs	r3, #0
     bbe:	653b      	str	r3, [r7, #80]	; 0x50
		if (evt == EVT_COMPLETE) {
     bc0:	68bb      	ldr	r3, [r7, #8]
     bc2:	2b01      	cmp	r3, #1
     bc4:	d10a      	bne.n	bdc <process_event+0xdc>
			res = mgr->last_res;
     bc6:	68fb      	ldr	r3, [r7, #12]
     bc8:	699b      	ldr	r3, [r3, #24]
     bca:	653b      	str	r3, [r7, #80]	; 0x50
			process_complete(mgr, &clients, res);
     bcc:	f107 0320 	add.w	r3, r7, #32
     bd0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     bd2:	4619      	mov	r1, r3
     bd4:	68f8      	ldr	r0, [r7, #12]
     bd6:	f7ff fee3 	bl	9a0 <process_complete>
     bda:	e0bf      	b.n	d5c <process_event+0x25c>
			/* NB: This can trigger a RECHECK */
		} else if (evt == EVT_START) {
     bdc:	68bb      	ldr	r3, [r7, #8]
     bde:	2b03      	cmp	r3, #3
     be0:	d139      	bne.n	c56 <process_event+0x156>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     be4:	2b00      	cmp	r3, #0
     be6:	d00b      	beq.n	c00 <process_event+0x100>
     be8:	f44f 73ab 	mov.w	r3, #342	; 0x156
     bec:	4a65      	ldr	r2, [pc, #404]	; (d84 <process_event+0x284>)
     bee:	4969      	ldr	r1, [pc, #420]	; (d94 <process_event+0x294>)
     bf0:	4866      	ldr	r0, [pc, #408]	; (d8c <process_event+0x28c>)
     bf2:	f00f f83f 	bl	fc74 <printk>
     bf6:	f44f 71ab 	mov.w	r1, #342	; 0x156
     bfa:	4862      	ldr	r0, [pc, #392]	; (d84 <process_event+0x284>)
     bfc:	f00f fc96 	bl	1052c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     c00:	68fb      	ldr	r3, [r7, #12]
     c02:	4618      	mov	r0, r3
     c04:	f00f f8f0 	bl	fde8 <sys_slist_is_empty>
     c08:	4603      	mov	r3, r0
     c0a:	2b00      	cmp	r3, #0
     c0c:	d00b      	beq.n	c26 <process_event+0x126>
     c0e:	f240 1357 	movw	r3, #343	; 0x157
     c12:	4a5c      	ldr	r2, [pc, #368]	; (d84 <process_event+0x284>)
     c14:	4960      	ldr	r1, [pc, #384]	; (d98 <process_event+0x298>)
     c16:	485d      	ldr	r0, [pc, #372]	; (d8c <process_event+0x28c>)
     c18:	f00f f82c 	bl	fc74 <printk>
     c1c:	f240 1157 	movw	r1, #343	; 0x157
     c20:	4858      	ldr	r0, [pc, #352]	; (d84 <process_event+0x284>)
     c22:	f00f fc83 	bl	1052c <assert_post_action>

			transit = mgr->transitions->start;
     c26:	68fb      	ldr	r3, [r7, #12]
     c28:	691b      	ldr	r3, [r3, #16]
     c2a:	681b      	ldr	r3, [r3, #0]
     c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
			__ASSERT_NO_MSG(transit != NULL);
     c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     c30:	2b00      	cmp	r3, #0
     c32:	d10b      	bne.n	c4c <process_event+0x14c>
     c34:	f44f 73ad 	mov.w	r3, #346	; 0x15a
     c38:	4a52      	ldr	r2, [pc, #328]	; (d84 <process_event+0x284>)
     c3a:	4958      	ldr	r1, [pc, #352]	; (d9c <process_event+0x29c>)
     c3c:	4853      	ldr	r0, [pc, #332]	; (d8c <process_event+0x28c>)
     c3e:	f00f f819 	bl	fc74 <printk>
     c42:	f44f 71ad 	mov.w	r1, #346	; 0x15a
     c46:	484f      	ldr	r0, [pc, #316]	; (d84 <process_event+0x284>)
     c48:	f00f fc70 	bl	1052c <assert_post_action>
			set_state(mgr, ONOFF_STATE_TO_ON);
     c4c:	2106      	movs	r1, #6
     c4e:	68f8      	ldr	r0, [r7, #12]
     c50:	f00f f944 	bl	fedc <set_state>
     c54:	e082      	b.n	d5c <process_event+0x25c>
		} else if (evt == EVT_STOP) {
     c56:	68bb      	ldr	r3, [r7, #8]
     c58:	2b04      	cmp	r3, #4
     c5a:	d136      	bne.n	cca <process_event+0x1ca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     c5e:	2b02      	cmp	r3, #2
     c60:	d00b      	beq.n	c7a <process_event+0x17a>
     c62:	f240 135d 	movw	r3, #349	; 0x15d
     c66:	4a47      	ldr	r2, [pc, #284]	; (d84 <process_event+0x284>)
     c68:	494d      	ldr	r1, [pc, #308]	; (da0 <process_event+0x2a0>)
     c6a:	4848      	ldr	r0, [pc, #288]	; (d8c <process_event+0x28c>)
     c6c:	f00f f802 	bl	fc74 <printk>
     c70:	f240 115d 	movw	r1, #349	; 0x15d
     c74:	4843      	ldr	r0, [pc, #268]	; (d84 <process_event+0x284>)
     c76:	f00f fc59 	bl	1052c <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
     c7a:	68fb      	ldr	r3, [r7, #12]
     c7c:	8bdb      	ldrh	r3, [r3, #30]
     c7e:	2b00      	cmp	r3, #0
     c80:	d00b      	beq.n	c9a <process_event+0x19a>
     c82:	f44f 73af 	mov.w	r3, #350	; 0x15e
     c86:	4a3f      	ldr	r2, [pc, #252]	; (d84 <process_event+0x284>)
     c88:	4946      	ldr	r1, [pc, #280]	; (da4 <process_event+0x2a4>)
     c8a:	4840      	ldr	r0, [pc, #256]	; (d8c <process_event+0x28c>)
     c8c:	f00e fff2 	bl	fc74 <printk>
     c90:	f44f 71af 	mov.w	r1, #350	; 0x15e
     c94:	483b      	ldr	r0, [pc, #236]	; (d84 <process_event+0x284>)
     c96:	f00f fc49 	bl	1052c <assert_post_action>

			transit = mgr->transitions->stop;
     c9a:	68fb      	ldr	r3, [r7, #12]
     c9c:	691b      	ldr	r3, [r3, #16]
     c9e:	685b      	ldr	r3, [r3, #4]
     ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
			__ASSERT_NO_MSG(transit != NULL);
     ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     ca4:	2b00      	cmp	r3, #0
     ca6:	d10b      	bne.n	cc0 <process_event+0x1c0>
     ca8:	f240 1361 	movw	r3, #353	; 0x161
     cac:	4a35      	ldr	r2, [pc, #212]	; (d84 <process_event+0x284>)
     cae:	493b      	ldr	r1, [pc, #236]	; (d9c <process_event+0x29c>)
     cb0:	4836      	ldr	r0, [pc, #216]	; (d8c <process_event+0x28c>)
     cb2:	f00e ffdf 	bl	fc74 <printk>
     cb6:	f240 1161 	movw	r1, #353	; 0x161
     cba:	4832      	ldr	r0, [pc, #200]	; (d84 <process_event+0x284>)
     cbc:	f00f fc36 	bl	1052c <assert_post_action>
			set_state(mgr, ONOFF_STATE_TO_OFF);
     cc0:	2104      	movs	r1, #4
     cc2:	68f8      	ldr	r0, [r7, #12]
     cc4:	f00f f90a 	bl	fedc <set_state>
     cc8:	e048      	b.n	d5c <process_event+0x25c>
		} else if (evt == EVT_RESET) {
     cca:	68bb      	ldr	r3, [r7, #8]
     ccc:	2b05      	cmp	r3, #5
     cce:	d139      	bne.n	d44 <process_event+0x244>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     cd2:	2b01      	cmp	r3, #1
     cd4:	d00b      	beq.n	cee <process_event+0x1ee>
     cd6:	f44f 73b2 	mov.w	r3, #356	; 0x164
     cda:	4a2a      	ldr	r2, [pc, #168]	; (d84 <process_event+0x284>)
     cdc:	4932      	ldr	r1, [pc, #200]	; (da8 <process_event+0x2a8>)
     cde:	482b      	ldr	r0, [pc, #172]	; (d8c <process_event+0x28c>)
     ce0:	f00e ffc8 	bl	fc74 <printk>
     ce4:	f44f 71b2 	mov.w	r1, #356	; 0x164
     ce8:	4826      	ldr	r0, [pc, #152]	; (d84 <process_event+0x284>)
     cea:	f00f fc1f 	bl	1052c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     cee:	68fb      	ldr	r3, [r7, #12]
     cf0:	4618      	mov	r0, r3
     cf2:	f00f f879 	bl	fde8 <sys_slist_is_empty>
     cf6:	4603      	mov	r3, r0
     cf8:	2b00      	cmp	r3, #0
     cfa:	d00b      	beq.n	d14 <process_event+0x214>
     cfc:	f240 1365 	movw	r3, #357	; 0x165
     d00:	4a20      	ldr	r2, [pc, #128]	; (d84 <process_event+0x284>)
     d02:	4925      	ldr	r1, [pc, #148]	; (d98 <process_event+0x298>)
     d04:	4821      	ldr	r0, [pc, #132]	; (d8c <process_event+0x28c>)
     d06:	f00e ffb5 	bl	fc74 <printk>
     d0a:	f240 1165 	movw	r1, #357	; 0x165
     d0e:	481d      	ldr	r0, [pc, #116]	; (d84 <process_event+0x284>)
     d10:	f00f fc0c 	bl	1052c <assert_post_action>

			transit = mgr->transitions->reset;
     d14:	68fb      	ldr	r3, [r7, #12]
     d16:	691b      	ldr	r3, [r3, #16]
     d18:	689b      	ldr	r3, [r3, #8]
     d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
			__ASSERT_NO_MSG(transit != NULL);
     d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     d1e:	2b00      	cmp	r3, #0
     d20:	d10b      	bne.n	d3a <process_event+0x23a>
     d22:	f44f 73b4 	mov.w	r3, #360	; 0x168
     d26:	4a17      	ldr	r2, [pc, #92]	; (d84 <process_event+0x284>)
     d28:	491c      	ldr	r1, [pc, #112]	; (d9c <process_event+0x29c>)
     d2a:	4818      	ldr	r0, [pc, #96]	; (d8c <process_event+0x28c>)
     d2c:	f00e ffa2 	bl	fc74 <printk>
     d30:	f44f 71b4 	mov.w	r1, #360	; 0x168
     d34:	4813      	ldr	r0, [pc, #76]	; (d84 <process_event+0x284>)
     d36:	f00f fbf9 	bl	1052c <assert_post_action>
			set_state(mgr, ONOFF_STATE_RESETTING);
     d3a:	2105      	movs	r1, #5
     d3c:	68f8      	ldr	r0, [r7, #12]
     d3e:	f00f f8cd 	bl	fedc <set_state>
     d42:	e00b      	b.n	d5c <process_event+0x25c>
		} else {
			__ASSERT_NO_MSG(false);
     d44:	f240 136b 	movw	r3, #363	; 0x16b
     d48:	4a0e      	ldr	r2, [pc, #56]	; (d84 <process_event+0x284>)
     d4a:	4918      	ldr	r1, [pc, #96]	; (dac <process_event+0x2ac>)
     d4c:	480f      	ldr	r0, [pc, #60]	; (d8c <process_event+0x28c>)
     d4e:	f00e ff91 	bl	fc74 <printk>
     d52:	f240 116b 	movw	r1, #363	; 0x16b
     d56:	480b      	ldr	r0, [pc, #44]	; (d84 <process_event+0x284>)
     d58:	f00f fbe8 	bl	1052c <assert_post_action>
		/* Have to unlock and do something if any of:
		 * * We changed state and there are monitors;
		 * * We completed a transition and there are clients to notify;
		 * * We need to initiate a transition.
		 */
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d5c:	68fb      	ldr	r3, [r7, #12]
     d5e:	8b9b      	ldrh	r3, [r3, #28]
     d60:	f003 0307 	and.w	r3, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     d64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     d66:	429a      	cmp	r2, r3
     d68:	d022      	beq.n	db0 <process_event+0x2b0>
     d6a:	68fb      	ldr	r3, [r7, #12]
     d6c:	3308      	adds	r3, #8
     d6e:	4618      	mov	r0, r3
     d70:	f00f f83a 	bl	fde8 <sys_slist_is_empty>
     d74:	4603      	mov	r3, r0
     d76:	f083 0301 	eor.w	r3, r3, #1
     d7a:	b2db      	uxtb	r3, r3
     d7c:	2b00      	cmp	r3, #0
     d7e:	d017      	beq.n	db0 <process_event+0x2b0>
     d80:	2301      	movs	r3, #1
     d82:	e016      	b.n	db2 <process_event+0x2b2>
     d84:	00017364 	.word	0x00017364
     d88:	000173b4 	.word	0x000173b4
     d8c:	0001732c 	.word	0x0001732c
     d90:	000173c4 	.word	0x000173c4
     d94:	000173d8 	.word	0x000173d8
     d98:	000173e4 	.word	0x000173e4
     d9c:	00017408 	.word	0x00017408
     da0:	00017420 	.word	0x00017420
     da4:	00017438 	.word	0x00017438
     da8:	00017448 	.word	0x00017448
     dac:	000173b0 	.word	0x000173b0
     db0:	2300      	movs	r3, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     db2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
     db6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
     dba:	f003 0301 	and.w	r3, r3, #1
     dbe:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

		evt = EVT_NOP;
     dc2:	2300      	movs	r3, #0
     dc4:	60bb      	str	r3, [r7, #8]
		if (do_monitors
     dc6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
     dca:	2b00      	cmp	r3, #0
     dcc:	d10e      	bne.n	dec <process_event+0x2ec>
		    || !sys_slist_is_empty(&clients)
     dce:	f107 0320 	add.w	r3, r7, #32
     dd2:	4618      	mov	r0, r3
     dd4:	f00f f808 	bl	fde8 <sys_slist_is_empty>
     dd8:	4603      	mov	r3, r0
     dda:	f083 0301 	eor.w	r3, r3, #1
     dde:	b2db      	uxtb	r3, r3
     de0:	2b00      	cmp	r3, #0
     de2:	d103      	bne.n	dec <process_event+0x2ec>
		    || (transit != NULL)) {
     de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     de6:	2b00      	cmp	r3, #0
     de8:	f000 808c 	beq.w	f04 <process_event+0x404>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     dec:	68fb      	ldr	r3, [r7, #12]
     dee:	8b9b      	ldrh	r3, [r3, #28]
     df0:	f043 0308 	orr.w	r3, r3, #8
     df4:	b29b      	uxth	r3, r3
     df6:	647b      	str	r3, [r7, #68]	; 0x44

			mgr->flags = flags;
     df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     dfa:	b29a      	uxth	r2, r3
     dfc:	68fb      	ldr	r3, [r7, #12]
     dfe:	839a      	strh	r2, [r3, #28]
			state = flags & ONOFF_STATE_MASK;
     e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     e02:	f003 0307 	and.w	r3, r3, #7
     e06:	657b      	str	r3, [r7, #84]	; 0x54

			k_spin_unlock(&mgr->lock, key);
     e08:	68fb      	ldr	r3, [r7, #12]
     e0a:	3314      	adds	r3, #20
     e0c:	643b      	str	r3, [r7, #64]	; 0x40
     e0e:	687b      	ldr	r3, [r7, #4]
     e10:	617b      	str	r3, [r7, #20]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     e12:	6c38      	ldr	r0, [r7, #64]	; 0x40
     e14:	f00a fdb2 	bl	b97c <z_spin_unlock_valid>
     e18:	4603      	mov	r3, r0
     e1a:	f083 0301 	eor.w	r3, r3, #1
     e1e:	b2db      	uxtb	r3, r3
     e20:	2b00      	cmp	r3, #0
     e22:	d00d      	beq.n	e40 <process_event+0x340>
     e24:	23ac      	movs	r3, #172	; 0xac
     e26:	4a61      	ldr	r2, [pc, #388]	; (fac <process_event+0x4ac>)
     e28:	4961      	ldr	r1, [pc, #388]	; (fb0 <process_event+0x4b0>)
     e2a:	4862      	ldr	r0, [pc, #392]	; (fb4 <process_event+0x4b4>)
     e2c:	f00e ff22 	bl	fc74 <printk>
     e30:	6c39      	ldr	r1, [r7, #64]	; 0x40
     e32:	4861      	ldr	r0, [pc, #388]	; (fb8 <process_event+0x4b8>)
     e34:	f00e ff1e 	bl	fc74 <printk>
     e38:	21ac      	movs	r1, #172	; 0xac
     e3a:	485c      	ldr	r0, [pc, #368]	; (fac <process_event+0x4ac>)
     e3c:	f00f fb76 	bl	1052c <assert_post_action>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     e40:	697b      	ldr	r3, [r7, #20]
     e42:	63fb      	str	r3, [r7, #60]	; 0x3c
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     e46:	f383 8811 	msr	BASEPRI, r3
     e4a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     e4e:	bf00      	nop
}
     e50:	bf00      	nop

			if (do_monitors) {
     e52:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
     e56:	2b00      	cmp	r3, #0
     e58:	d004      	beq.n	e64 <process_event+0x364>
				notify_monitors(mgr, state, res);
     e5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     e5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
     e5e:	68f8      	ldr	r0, [r7, #12]
     e60:	f00f f89e 	bl	ffa0 <notify_monitors>
			}

			if (!sys_slist_is_empty(&clients)) {
     e64:	f107 0320 	add.w	r3, r7, #32
     e68:	4618      	mov	r0, r3
     e6a:	f00e ffbd 	bl	fde8 <sys_slist_is_empty>
     e6e:	4603      	mov	r3, r0
     e70:	f083 0301 	eor.w	r3, r3, #1
     e74:	b2db      	uxtb	r3, r3
     e76:	2b00      	cmp	r3, #0
     e78:	d006      	beq.n	e88 <process_event+0x388>
				notify_all(mgr, &clients, state, res);
     e7a:	f107 0120 	add.w	r1, r7, #32
     e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
     e80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     e82:	68f8      	ldr	r0, [r7, #12]
     e84:	f00f f8f7 	bl	10076 <notify_all>
			}

			if (transit != NULL) {
     e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     e8a:	2b00      	cmp	r3, #0
     e8c:	d003      	beq.n	e96 <process_event+0x396>
				transit(mgr, transition_complete);
     e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     e90:	494a      	ldr	r1, [pc, #296]	; (fbc <process_event+0x4bc>)
     e92:	68f8      	ldr	r0, [r7, #12]
     e94:	4798      	blx	r3
			}

			key = k_spin_lock(&mgr->lock);
     e96:	68fb      	ldr	r3, [r7, #12]
     e98:	3314      	adds	r3, #20
     e9a:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
     e9c:	f04f 0320 	mov.w	r3, #32
     ea0:	f3ef 8211 	mrs	r2, BASEPRI
     ea4:	f383 8811 	msr	BASEPRI, r3
     ea8:	f3bf 8f6f 	isb	sy
     eac:	637a      	str	r2, [r7, #52]	; 0x34
     eae:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
     eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	k.key = arch_irq_lock();
     eb2:	61bb      	str	r3, [r7, #24]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     eb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     eb6:	f00a fd45 	bl	b944 <z_spin_lock_valid>
     eba:	4603      	mov	r3, r0
     ebc:	f083 0301 	eor.w	r3, r3, #1
     ec0:	b2db      	uxtb	r3, r3
     ec2:	2b00      	cmp	r3, #0
     ec4:	d00d      	beq.n	ee2 <process_event+0x3e2>
     ec6:	2381      	movs	r3, #129	; 0x81
     ec8:	4a38      	ldr	r2, [pc, #224]	; (fac <process_event+0x4ac>)
     eca:	493d      	ldr	r1, [pc, #244]	; (fc0 <process_event+0x4c0>)
     ecc:	4839      	ldr	r0, [pc, #228]	; (fb4 <process_event+0x4b4>)
     ece:	f00e fed1 	bl	fc74 <printk>
     ed2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
     ed4:	483b      	ldr	r0, [pc, #236]	; (fc4 <process_event+0x4c4>)
     ed6:	f00e fecd 	bl	fc74 <printk>
     eda:	2181      	movs	r1, #129	; 0x81
     edc:	4833      	ldr	r0, [pc, #204]	; (fac <process_event+0x4ac>)
     ede:	f00f fb25 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
     ee2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
     ee4:	f00a fd66 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
     ee8:	69bb      	ldr	r3, [r7, #24]
     eea:	607b      	str	r3, [r7, #4]
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     eec:	68fb      	ldr	r3, [r7, #12]
     eee:	8b9b      	ldrh	r3, [r3, #28]
     ef0:	f023 0308 	bic.w	r3, r3, #8
     ef4:	b29a      	uxth	r2, r3
     ef6:	68fb      	ldr	r3, [r7, #12]
     ef8:	839a      	strh	r2, [r3, #28]
			state = mgr->flags & ONOFF_STATE_MASK;
     efa:	68fb      	ldr	r3, [r7, #12]
     efc:	8b9b      	ldrh	r3, [r3, #28]
     efe:	f003 0307 	and.w	r3, r3, #7
     f02:	657b      	str	r3, [r7, #84]	; 0x54
		}

		/* Process deferred events.  Completion takes priority
		 * over recheck.
		 */
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     f04:	68fb      	ldr	r3, [r7, #12]
     f06:	8b9b      	ldrh	r3, [r3, #28]
     f08:	f003 0310 	and.w	r3, r3, #16
     f0c:	2b00      	cmp	r3, #0
     f0e:	d009      	beq.n	f24 <process_event+0x424>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     f10:	68fb      	ldr	r3, [r7, #12]
     f12:	8b9b      	ldrh	r3, [r3, #28]
     f14:	f023 0310 	bic.w	r3, r3, #16
     f18:	b29a      	uxth	r2, r3
     f1a:	68fb      	ldr	r3, [r7, #12]
     f1c:	839a      	strh	r2, [r3, #28]
			evt = EVT_COMPLETE;
     f1e:	2301      	movs	r3, #1
     f20:	60bb      	str	r3, [r7, #8]
     f22:	e00e      	b.n	f42 <process_event+0x442>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     f24:	68fb      	ldr	r3, [r7, #12]
     f26:	8b9b      	ldrh	r3, [r3, #28]
     f28:	f003 0320 	and.w	r3, r3, #32
     f2c:	2b00      	cmp	r3, #0
     f2e:	d008      	beq.n	f42 <process_event+0x442>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     f30:	68fb      	ldr	r3, [r7, #12]
     f32:	8b9b      	ldrh	r3, [r3, #28]
     f34:	f023 0320 	bic.w	r3, r3, #32
     f38:	b29a      	uxth	r2, r3
     f3a:	68fb      	ldr	r3, [r7, #12]
     f3c:	839a      	strh	r2, [r3, #28]
			evt = EVT_RECHECK;
     f3e:	2302      	movs	r3, #2
     f40:	60bb      	str	r3, [r7, #8]
		} else {
			;
		}

		state = mgr->flags & ONOFF_STATE_MASK;
     f42:	68fb      	ldr	r3, [r7, #12]
     f44:	8b9b      	ldrh	r3, [r3, #28]
     f46:	f003 0307 	and.w	r3, r3, #7
     f4a:	657b      	str	r3, [r7, #84]	; 0x54
	} while (evt != EVT_NOP);
     f4c:	68bb      	ldr	r3, [r7, #8]
     f4e:	2b00      	cmp	r3, #0
     f50:	f47f ae27 	bne.w	ba2 <process_event+0xa2>

out:
     f54:	e000      	b.n	f58 <process_event+0x458>
			break;
     f56:	bf00      	nop
	k_spin_unlock(&mgr->lock, key);
     f58:	68fb      	ldr	r3, [r7, #12]
     f5a:	3314      	adds	r3, #20
     f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
     f5e:	687b      	ldr	r3, [r7, #4]
     f60:	61fb      	str	r3, [r7, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     f62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     f64:	f00a fd0a 	bl	b97c <z_spin_unlock_valid>
     f68:	4603      	mov	r3, r0
     f6a:	f083 0301 	eor.w	r3, r3, #1
     f6e:	b2db      	uxtb	r3, r3
     f70:	2b00      	cmp	r3, #0
     f72:	d00d      	beq.n	f90 <process_event+0x490>
     f74:	23ac      	movs	r3, #172	; 0xac
     f76:	4a0d      	ldr	r2, [pc, #52]	; (fac <process_event+0x4ac>)
     f78:	490d      	ldr	r1, [pc, #52]	; (fb0 <process_event+0x4b0>)
     f7a:	480e      	ldr	r0, [pc, #56]	; (fb4 <process_event+0x4b4>)
     f7c:	f00e fe7a 	bl	fc74 <printk>
     f80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
     f82:	480d      	ldr	r0, [pc, #52]	; (fb8 <process_event+0x4b8>)
     f84:	f00e fe76 	bl	fc74 <printk>
     f88:	21ac      	movs	r1, #172	; 0xac
     f8a:	4808      	ldr	r0, [pc, #32]	; (fac <process_event+0x4ac>)
     f8c:	f00f face 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
     f90:	69fb      	ldr	r3, [r7, #28]
     f92:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
     f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
     f96:	f383 8811 	msr	BASEPRI, r3
     f9a:	f3bf 8f6f 	isb	sy
}
     f9e:	bf00      	nop
}
     fa0:	bf00      	nop
}
     fa2:	bf00      	nop
     fa4:	3758      	adds	r7, #88	; 0x58
     fa6:	46bd      	mov	sp, r7
     fa8:	bd80      	pop	{r7, pc}
     faa:	bf00      	nop
     fac:	000172ec 	.word	0x000172ec
     fb0:	00017460 	.word	0x00017460
     fb4:	0001732c 	.word	0x0001732c
     fb8:	00017478 	.word	0x00017478
     fbc:	00000919 	.word	0x00000919
     fc0:	00017314 	.word	0x00017314
     fc4:	0001734c 	.word	0x0001734c

00000fc8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
     fc8:	b580      	push	{r7, lr}
     fca:	b08e      	sub	sp, #56	; 0x38
     fcc:	af00      	add	r7, sp, #0
     fce:	6078      	str	r0, [r7, #4]
     fd0:	6039      	str	r1, [r7, #0]
	bool add_client = false;        /* add client to pending list */
     fd2:	2300      	movs	r3, #0
     fd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	bool start = false;             /* trigger a start transition */
     fd8:	2300      	movs	r3, #0
     fda:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	bool notify = false;            /* do client notification */
     fde:	2300      	movs	r3, #0
     fe0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int rv = validate_args(mgr, cli);
     fe4:	6839      	ldr	r1, [r7, #0]
     fe6:	6878      	ldr	r0, [r7, #4]
     fe8:	f00e ff90 	bl	ff0c <validate_args>
     fec:	6338      	str	r0, [r7, #48]	; 0x30

	if (rv < 0) {
     fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ff0:	2b00      	cmp	r3, #0
     ff2:	da01      	bge.n	ff8 <onoff_request+0x30>
		return rv;
     ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     ff6:	e0b9      	b.n	116c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x16c>
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     ff8:	687b      	ldr	r3, [r7, #4]
     ffa:	3314      	adds	r3, #20
     ffc:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
     ffe:	f04f 0320 	mov.w	r3, #32
    1002:	f3ef 8211 	mrs	r2, BASEPRI
    1006:	f383 8811 	msr	BASEPRI, r3
    100a:	f3bf 8f6f 	isb	sy
    100e:	627a      	str	r2, [r7, #36]	; 0x24
    1010:	623b      	str	r3, [r7, #32]
	return key;
    1012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	k.key = arch_irq_lock();
    1014:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1018:	f00a fc94 	bl	b944 <z_spin_lock_valid>
    101c:	4603      	mov	r3, r0
    101e:	f083 0301 	eor.w	r3, r3, #1
    1022:	b2db      	uxtb	r3, r3
    1024:	2b00      	cmp	r3, #0
    1026:	d00d      	beq.n	1044 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x44>
    1028:	2381      	movs	r3, #129	; 0x81
    102a:	4a52      	ldr	r2, [pc, #328]	; (1174 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x174>)
    102c:	4952      	ldr	r1, [pc, #328]	; (1178 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x178>)
    102e:	4853      	ldr	r0, [pc, #332]	; (117c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x17c>)
    1030:	f00e fe20 	bl	fc74 <printk>
    1034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    1036:	4852      	ldr	r0, [pc, #328]	; (1180 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x180>)
    1038:	f00e fe1c 	bl	fc74 <printk>
    103c:	2181      	movs	r1, #129	; 0x81
    103e:	484d      	ldr	r0, [pc, #308]	; (1174 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x174>)
    1040:	f00f fa74 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    1044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1046:	f00a fcb5 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    104a:	68fb      	ldr	r3, [r7, #12]
    104c:	617b      	str	r3, [r7, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    104e:	687b      	ldr	r3, [r7, #4]
    1050:	8b9b      	ldrh	r3, [r3, #28]
    1052:	f003 0307 	and.w	r3, r3, #7
    1056:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    1058:	687b      	ldr	r3, [r7, #4]
    105a:	8bdb      	ldrh	r3, [r3, #30]
    105c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1060:	4293      	cmp	r3, r2
    1062:	d103      	bne.n	106c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x6c>
		rv = -EAGAIN;
    1064:	f06f 030a 	mvn.w	r3, #10
    1068:	633b      	str	r3, [r7, #48]	; 0x30
		goto out;
    106a:	e03b      	b.n	10e4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xe4>
	}

	rv = state;
    106c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    106e:	633b      	str	r3, [r7, #48]	; 0x30
	if (state == ONOFF_STATE_ON) {
    1070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1072:	2b02      	cmp	r3, #2
    1074:	d109      	bne.n	108a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x8a>
		/* Increment reference count, notify in exit */
		notify = true;
    1076:	2301      	movs	r3, #1
    1078:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		mgr->refs += 1U;
    107c:	687b      	ldr	r3, [r7, #4]
    107e:	8bdb      	ldrh	r3, [r3, #30]
    1080:	3301      	adds	r3, #1
    1082:	b29a      	uxth	r2, r3
    1084:	687b      	ldr	r3, [r7, #4]
    1086:	83da      	strh	r2, [r3, #30]
    1088:	e02c      	b.n	10e4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xe4>
	} else if ((state == ONOFF_STATE_OFF)
    108a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    108c:	2b00      	cmp	r3, #0
    108e:	d005      	beq.n	109c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x9c>
		   || (state == ONOFF_STATE_TO_OFF)
    1090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1092:	2b04      	cmp	r3, #4
    1094:	d002      	beq.n	109c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x9c>
		   || (state == ONOFF_STATE_TO_ON)) {
    1096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1098:	2b06      	cmp	r3, #6
    109a:	d10a      	bne.n	10b2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xb2>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
    109c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    109e:	2b00      	cmp	r3, #0
    10a0:	bf0c      	ite	eq
    10a2:	2301      	moveq	r3, #1
    10a4:	2300      	movne	r3, #0
    10a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		add_client = true;
    10aa:	2301      	movs	r3, #1
    10ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    10b0:	e018      	b.n	10e4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xe4>
	} else if (state == ONOFF_STATE_RESETTING) {
    10b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    10b4:	2b05      	cmp	r3, #5
    10b6:	d103      	bne.n	10c0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xc0>
		rv = -ENOTSUP;
    10b8:	f06f 0385 	mvn.w	r3, #133	; 0x85
    10bc:	633b      	str	r3, [r7, #48]	; 0x30
    10be:	e011      	b.n	10e4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xe4>
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    10c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    10c2:	2b01      	cmp	r3, #1
    10c4:	d00b      	beq.n	10de <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xde>
    10c6:	f240 13c9 	movw	r3, #457	; 0x1c9
    10ca:	4a2e      	ldr	r2, [pc, #184]	; (1184 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x184>)
    10cc:	492e      	ldr	r1, [pc, #184]	; (1188 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x188>)
    10ce:	482b      	ldr	r0, [pc, #172]	; (117c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x17c>)
    10d0:	f00e fdd0 	bl	fc74 <printk>
    10d4:	f240 11c9 	movw	r1, #457	; 0x1c9
    10d8:	482a      	ldr	r0, [pc, #168]	; (1184 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x184>)
    10da:	f00f fa27 	bl	1052c <assert_post_action>
		rv = -EIO;
    10de:	f06f 0304 	mvn.w	r3, #4
    10e2:	633b      	str	r3, [r7, #48]	; 0x30
	}

out:
	if (add_client) {
    10e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    10e8:	2b00      	cmp	r3, #0
    10ea:	d005      	beq.n	10f8 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xf8>
		sys_slist_append(&mgr->clients, &cli->node);
    10ec:	687b      	ldr	r3, [r7, #4]
    10ee:	683a      	ldr	r2, [r7, #0]
    10f0:	4611      	mov	r1, r2
    10f2:	4618      	mov	r0, r3
    10f4:	f00e fea6 	bl	fe44 <sys_slist_append>
	}

	if (start) {
    10f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    10fc:	2b00      	cmp	r3, #0
    10fe:	d005      	beq.n	110c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x10c>
		process_event(mgr, EVT_RECHECK, key);
    1100:	697a      	ldr	r2, [r7, #20]
    1102:	2102      	movs	r1, #2
    1104:	6878      	ldr	r0, [r7, #4]
    1106:	f7ff fcfb 	bl	b00 <process_event>
    110a:	e02e      	b.n	116a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x16a>
	} else {
		k_spin_unlock(&mgr->lock, key);
    110c:	687b      	ldr	r3, [r7, #4]
    110e:	3314      	adds	r3, #20
    1110:	61fb      	str	r3, [r7, #28]
    1112:	697b      	ldr	r3, [r7, #20]
    1114:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1116:	69f8      	ldr	r0, [r7, #28]
    1118:	f00a fc30 	bl	b97c <z_spin_unlock_valid>
    111c:	4603      	mov	r3, r0
    111e:	f083 0301 	eor.w	r3, r3, #1
    1122:	b2db      	uxtb	r3, r3
    1124:	2b00      	cmp	r3, #0
    1126:	d00d      	beq.n	1144 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x144>
    1128:	23ac      	movs	r3, #172	; 0xac
    112a:	4a12      	ldr	r2, [pc, #72]	; (1174 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x174>)
    112c:	4917      	ldr	r1, [pc, #92]	; (118c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x18c>)
    112e:	4813      	ldr	r0, [pc, #76]	; (117c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x17c>)
    1130:	f00e fda0 	bl	fc74 <printk>
    1134:	69f9      	ldr	r1, [r7, #28]
    1136:	4816      	ldr	r0, [pc, #88]	; (1190 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x190>)
    1138:	f00e fd9c 	bl	fc74 <printk>
    113c:	21ac      	movs	r1, #172	; 0xac
    113e:	480d      	ldr	r0, [pc, #52]	; (1174 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x174>)
    1140:	f00f f9f4 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    1144:	693b      	ldr	r3, [r7, #16]
    1146:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
    1148:	69bb      	ldr	r3, [r7, #24]
    114a:	f383 8811 	msr	BASEPRI, r3
    114e:	f3bf 8f6f 	isb	sy
}
    1152:	bf00      	nop
}
    1154:	bf00      	nop

		if (notify) {
    1156:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    115a:	2b00      	cmp	r3, #0
    115c:	d005      	beq.n	116a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x16a>
			notify_one(mgr, cli, state, 0);
    115e:	2300      	movs	r3, #0
    1160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1162:	6839      	ldr	r1, [r7, #0]
    1164:	6878      	ldr	r0, [r7, #4]
    1166:	f00e ff6b 	bl	10040 <notify_one>
		}
	}

	return rv;
    116a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
    116c:	4618      	mov	r0, r3
    116e:	3738      	adds	r7, #56	; 0x38
    1170:	46bd      	mov	sp, r7
    1172:	bd80      	pop	{r7, pc}
    1174:	000172ec 	.word	0x000172ec
    1178:	00017314 	.word	0x00017314
    117c:	0001732c 	.word	0x0001732c
    1180:	0001734c 	.word	0x0001734c
    1184:	00017364 	.word	0x00017364
    1188:	00017448 	.word	0x00017448
    118c:	00017460 	.word	0x00017460
    1190:	00017478 	.word	0x00017478

00001194 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
    1194:	b480      	push	{r7}
    1196:	b085      	sub	sp, #20
    1198:	af00      	add	r7, sp, #0
    119a:	6078      	str	r0, [r7, #4]
    119c:	6039      	str	r1, [r7, #0]
	bool loop = true;
    119e:	2301      	movs	r3, #1
    11a0:	73fb      	strb	r3, [r7, #15]

	do {
		switch (*sp) {
    11a2:	683b      	ldr	r3, [r7, #0]
    11a4:	781b      	ldrb	r3, [r3, #0]
    11a6:	3b20      	subs	r3, #32
    11a8:	2b10      	cmp	r3, #16
    11aa:	d843      	bhi.n	1234 <extract_flags+0xa0>
    11ac:	a201      	add	r2, pc, #4	; (adr r2, 11b4 <extract_flags+0x20>)
    11ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    11b2:	bf00      	nop
    11b4:	00001211 	.word	0x00001211
    11b8:	00001235 	.word	0x00001235
    11bc:	00001235 	.word	0x00001235
    11c0:	0000121d 	.word	0x0000121d
    11c4:	00001235 	.word	0x00001235
    11c8:	00001235 	.word	0x00001235
    11cc:	00001235 	.word	0x00001235
    11d0:	00001235 	.word	0x00001235
    11d4:	00001235 	.word	0x00001235
    11d8:	00001235 	.word	0x00001235
    11dc:	00001235 	.word	0x00001235
    11e0:	00001205 	.word	0x00001205
    11e4:	00001235 	.word	0x00001235
    11e8:	000011f9 	.word	0x000011f9
    11ec:	00001235 	.word	0x00001235
    11f0:	00001235 	.word	0x00001235
    11f4:	00001229 	.word	0x00001229
		case '-':
			conv->flag_dash = true;
    11f8:	687a      	ldr	r2, [r7, #4]
    11fa:	7813      	ldrb	r3, [r2, #0]
    11fc:	f043 0304 	orr.w	r3, r3, #4
    1200:	7013      	strb	r3, [r2, #0]
			break;
    1202:	e019      	b.n	1238 <extract_flags+0xa4>
		case '+':
			conv->flag_plus = true;
    1204:	687a      	ldr	r2, [r7, #4]
    1206:	7813      	ldrb	r3, [r2, #0]
    1208:	f043 0308 	orr.w	r3, r3, #8
    120c:	7013      	strb	r3, [r2, #0]
			break;
    120e:	e013      	b.n	1238 <extract_flags+0xa4>
		case ' ':
			conv->flag_space = true;
    1210:	687a      	ldr	r2, [r7, #4]
    1212:	7813      	ldrb	r3, [r2, #0]
    1214:	f043 0310 	orr.w	r3, r3, #16
    1218:	7013      	strb	r3, [r2, #0]
			break;
    121a:	e00d      	b.n	1238 <extract_flags+0xa4>
		case '#':
			conv->flag_hash = true;
    121c:	687a      	ldr	r2, [r7, #4]
    121e:	7813      	ldrb	r3, [r2, #0]
    1220:	f043 0320 	orr.w	r3, r3, #32
    1224:	7013      	strb	r3, [r2, #0]
			break;
    1226:	e007      	b.n	1238 <extract_flags+0xa4>
		case '0':
			conv->flag_zero = true;
    1228:	687a      	ldr	r2, [r7, #4]
    122a:	7813      	ldrb	r3, [r2, #0]
    122c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1230:	7013      	strb	r3, [r2, #0]
			break;
    1232:	e001      	b.n	1238 <extract_flags+0xa4>
		default:
			loop = false;
    1234:	2300      	movs	r3, #0
    1236:	73fb      	strb	r3, [r7, #15]
		}
		if (loop) {
    1238:	7bfb      	ldrb	r3, [r7, #15]
    123a:	2b00      	cmp	r3, #0
    123c:	d002      	beq.n	1244 <extract_flags+0xb0>
			++sp;
    123e:	683b      	ldr	r3, [r7, #0]
    1240:	3301      	adds	r3, #1
    1242:	603b      	str	r3, [r7, #0]
		}
	} while (loop);
    1244:	7bfb      	ldrb	r3, [r7, #15]
    1246:	2b00      	cmp	r3, #0
    1248:	d1ab      	bne.n	11a2 <extract_flags+0xe>

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
    124a:	687b      	ldr	r3, [r7, #4]
    124c:	781b      	ldrb	r3, [r3, #0]
    124e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1252:	b2db      	uxtb	r3, r3
    1254:	2b00      	cmp	r3, #0
    1256:	d00b      	beq.n	1270 <extract_flags+0xdc>
    1258:	687b      	ldr	r3, [r7, #4]
    125a:	781b      	ldrb	r3, [r3, #0]
    125c:	f003 0304 	and.w	r3, r3, #4
    1260:	b2db      	uxtb	r3, r3
    1262:	2b00      	cmp	r3, #0
    1264:	d004      	beq.n	1270 <extract_flags+0xdc>
		conv->flag_zero = false;
    1266:	687a      	ldr	r2, [r7, #4]
    1268:	7813      	ldrb	r3, [r2, #0]
    126a:	f36f 1386 	bfc	r3, #6, #1
    126e:	7013      	strb	r3, [r2, #0]
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
    1270:	683b      	ldr	r3, [r7, #0]
}
    1272:	4618      	mov	r0, r3
    1274:	3714      	adds	r7, #20
    1276:	46bd      	mov	sp, r7
    1278:	bc80      	pop	{r7}
    127a:	4770      	bx	lr

0000127c <extract_length>:
 *
 * @return a pointer the first character that follows the precision.
 */
static inline const char *extract_length(struct conversion *conv,
					 const char *sp)
{
    127c:	b480      	push	{r7}
    127e:	b083      	sub	sp, #12
    1280:	af00      	add	r7, sp, #0
    1282:	6078      	str	r0, [r7, #4]
    1284:	6039      	str	r1, [r7, #0]
	switch (*sp) {
    1286:	683b      	ldr	r3, [r7, #0]
    1288:	781b      	ldrb	r3, [r3, #0]
    128a:	3b4c      	subs	r3, #76	; 0x4c
    128c:	2b2e      	cmp	r3, #46	; 0x2e
    128e:	f200 80be 	bhi.w	140e <extract_length+0x192>
    1292:	a201      	add	r2, pc, #4	; (adr r2, 1298 <extract_length+0x1c>)
    1294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1298:	000013f1 	.word	0x000013f1
    129c:	0000140f 	.word	0x0000140f
    12a0:	0000140f 	.word	0x0000140f
    12a4:	0000140f 	.word	0x0000140f
    12a8:	0000140f 	.word	0x0000140f
    12ac:	0000140f 	.word	0x0000140f
    12b0:	0000140f 	.word	0x0000140f
    12b4:	0000140f 	.word	0x0000140f
    12b8:	0000140f 	.word	0x0000140f
    12bc:	0000140f 	.word	0x0000140f
    12c0:	0000140f 	.word	0x0000140f
    12c4:	0000140f 	.word	0x0000140f
    12c8:	0000140f 	.word	0x0000140f
    12cc:	0000140f 	.word	0x0000140f
    12d0:	0000140f 	.word	0x0000140f
    12d4:	0000140f 	.word	0x0000140f
    12d8:	0000140f 	.word	0x0000140f
    12dc:	0000140f 	.word	0x0000140f
    12e0:	0000140f 	.word	0x0000140f
    12e4:	0000140f 	.word	0x0000140f
    12e8:	0000140f 	.word	0x0000140f
    12ec:	0000140f 	.word	0x0000140f
    12f0:	0000140f 	.word	0x0000140f
    12f4:	0000140f 	.word	0x0000140f
    12f8:	0000140f 	.word	0x0000140f
    12fc:	0000140f 	.word	0x0000140f
    1300:	0000140f 	.word	0x0000140f
    1304:	0000140f 	.word	0x0000140f
    1308:	00001355 	.word	0x00001355
    130c:	0000140f 	.word	0x0000140f
    1310:	000013b5 	.word	0x000013b5
    1314:	0000140f 	.word	0x0000140f
    1318:	00001385 	.word	0x00001385
    131c:	0000140f 	.word	0x0000140f
    1320:	0000140f 	.word	0x0000140f
    1324:	0000140f 	.word	0x0000140f
    1328:	0000140f 	.word	0x0000140f
    132c:	0000140f 	.word	0x0000140f
    1330:	0000140f 	.word	0x0000140f
    1334:	0000140f 	.word	0x0000140f
    1338:	000013dd 	.word	0x000013dd
    133c:	0000140f 	.word	0x0000140f
    1340:	0000140f 	.word	0x0000140f
    1344:	0000140f 	.word	0x0000140f
    1348:	0000140f 	.word	0x0000140f
    134c:	0000140f 	.word	0x0000140f
    1350:	000013c9 	.word	0x000013c9
	case 'h':
		if (*++sp == 'h') {
    1354:	683b      	ldr	r3, [r7, #0]
    1356:	3301      	adds	r3, #1
    1358:	603b      	str	r3, [r7, #0]
    135a:	683b      	ldr	r3, [r7, #0]
    135c:	781b      	ldrb	r3, [r3, #0]
    135e:	2b68      	cmp	r3, #104	; 0x68
    1360:	d109      	bne.n	1376 <extract_length+0xfa>
			conv->length_mod = LENGTH_HH;
    1362:	687a      	ldr	r2, [r7, #4]
    1364:	7853      	ldrb	r3, [r2, #1]
    1366:	2101      	movs	r1, #1
    1368:	f361 03c6 	bfi	r3, r1, #3, #4
    136c:	7053      	strb	r3, [r2, #1]
			++sp;
    136e:	683b      	ldr	r3, [r7, #0]
    1370:	3301      	adds	r3, #1
    1372:	603b      	str	r3, [r7, #0]
		} else {
			conv->length_mod = LENGTH_H;
		}
		break;
    1374:	e051      	b.n	141a <extract_length+0x19e>
			conv->length_mod = LENGTH_H;
    1376:	687a      	ldr	r2, [r7, #4]
    1378:	7853      	ldrb	r3, [r2, #1]
    137a:	2102      	movs	r1, #2
    137c:	f361 03c6 	bfi	r3, r1, #3, #4
    1380:	7053      	strb	r3, [r2, #1]
		break;
    1382:	e04a      	b.n	141a <extract_length+0x19e>
	case 'l':
		if (*++sp == 'l') {
    1384:	683b      	ldr	r3, [r7, #0]
    1386:	3301      	adds	r3, #1
    1388:	603b      	str	r3, [r7, #0]
    138a:	683b      	ldr	r3, [r7, #0]
    138c:	781b      	ldrb	r3, [r3, #0]
    138e:	2b6c      	cmp	r3, #108	; 0x6c
    1390:	d109      	bne.n	13a6 <extract_length+0x12a>
			conv->length_mod = LENGTH_LL;
    1392:	687a      	ldr	r2, [r7, #4]
    1394:	7853      	ldrb	r3, [r2, #1]
    1396:	2104      	movs	r1, #4
    1398:	f361 03c6 	bfi	r3, r1, #3, #4
    139c:	7053      	strb	r3, [r2, #1]
			++sp;
    139e:	683b      	ldr	r3, [r7, #0]
    13a0:	3301      	adds	r3, #1
    13a2:	603b      	str	r3, [r7, #0]
		} else {
			conv->length_mod = LENGTH_L;
		}
		break;
    13a4:	e039      	b.n	141a <extract_length+0x19e>
			conv->length_mod = LENGTH_L;
    13a6:	687a      	ldr	r2, [r7, #4]
    13a8:	7853      	ldrb	r3, [r2, #1]
    13aa:	2103      	movs	r1, #3
    13ac:	f361 03c6 	bfi	r3, r1, #3, #4
    13b0:	7053      	strb	r3, [r2, #1]
		break;
    13b2:	e032      	b.n	141a <extract_length+0x19e>
	case 'j':
		conv->length_mod = LENGTH_J;
    13b4:	687a      	ldr	r2, [r7, #4]
    13b6:	7853      	ldrb	r3, [r2, #1]
    13b8:	2105      	movs	r1, #5
    13ba:	f361 03c6 	bfi	r3, r1, #3, #4
    13be:	7053      	strb	r3, [r2, #1]
		++sp;
    13c0:	683b      	ldr	r3, [r7, #0]
    13c2:	3301      	adds	r3, #1
    13c4:	603b      	str	r3, [r7, #0]
		break;
    13c6:	e028      	b.n	141a <extract_length+0x19e>
	case 'z':
		conv->length_mod = LENGTH_Z;
    13c8:	687a      	ldr	r2, [r7, #4]
    13ca:	7853      	ldrb	r3, [r2, #1]
    13cc:	2106      	movs	r1, #6
    13ce:	f361 03c6 	bfi	r3, r1, #3, #4
    13d2:	7053      	strb	r3, [r2, #1]
		++sp;
    13d4:	683b      	ldr	r3, [r7, #0]
    13d6:	3301      	adds	r3, #1
    13d8:	603b      	str	r3, [r7, #0]
		break;
    13da:	e01e      	b.n	141a <extract_length+0x19e>
	case 't':
		conv->length_mod = LENGTH_T;
    13dc:	687a      	ldr	r2, [r7, #4]
    13de:	7853      	ldrb	r3, [r2, #1]
    13e0:	2107      	movs	r1, #7
    13e2:	f361 03c6 	bfi	r3, r1, #3, #4
    13e6:	7053      	strb	r3, [r2, #1]
		++sp;
    13e8:	683b      	ldr	r3, [r7, #0]
    13ea:	3301      	adds	r3, #1
    13ec:	603b      	str	r3, [r7, #0]
		break;
    13ee:	e014      	b.n	141a <extract_length+0x19e>
	case 'L':
		conv->length_mod = LENGTH_UPPER_L;
    13f0:	687a      	ldr	r2, [r7, #4]
    13f2:	7853      	ldrb	r3, [r2, #1]
    13f4:	2108      	movs	r1, #8
    13f6:	f361 03c6 	bfi	r3, r1, #3, #4
    13fa:	7053      	strb	r3, [r2, #1]
		++sp;
    13fc:	683b      	ldr	r3, [r7, #0]
    13fe:	3301      	adds	r3, #1
    1400:	603b      	str	r3, [r7, #0]

		/* We recognize and consume these, but can't format
		 * them.
		 */
		conv->unsupported = true;
    1402:	687a      	ldr	r2, [r7, #4]
    1404:	7813      	ldrb	r3, [r2, #0]
    1406:	f043 0302 	orr.w	r3, r3, #2
    140a:	7013      	strb	r3, [r2, #0]
		break;
    140c:	e005      	b.n	141a <extract_length+0x19e>
	default:
		conv->length_mod = LENGTH_NONE;
    140e:	687a      	ldr	r2, [r7, #4]
    1410:	7853      	ldrb	r3, [r2, #1]
    1412:	f36f 03c6 	bfc	r3, #3, #4
    1416:	7053      	strb	r3, [r2, #1]
		break;
    1418:	bf00      	nop
	}
	return sp;
    141a:	683b      	ldr	r3, [r7, #0]
}
    141c:	4618      	mov	r0, r3
    141e:	370c      	adds	r7, #12
    1420:	46bd      	mov	sp, r7
    1422:	bc80      	pop	{r7}
    1424:	4770      	bx	lr
    1426:	bf00      	nop

00001428 <extract_specifier>:
 *
 * @return a pointer the first character that follows the specifier.
 */
static inline const char *extract_specifier(struct conversion *conv,
					    const char *sp)
{
    1428:	b480      	push	{r7}
    142a:	b085      	sub	sp, #20
    142c:	af00      	add	r7, sp, #0
    142e:	6078      	str	r0, [r7, #4]
    1430:	6039      	str	r1, [r7, #0]
	bool unsupported = false;
    1432:	2300      	movs	r3, #0
    1434:	73fb      	strb	r3, [r7, #15]

	conv->specifier = *sp++;
    1436:	683b      	ldr	r3, [r7, #0]
    1438:	1c5a      	adds	r2, r3, #1
    143a:	603a      	str	r2, [r7, #0]
    143c:	781a      	ldrb	r2, [r3, #0]
    143e:	687b      	ldr	r3, [r7, #4]
    1440:	70da      	strb	r2, [r3, #3]

	switch (conv->specifier) {
    1442:	687b      	ldr	r3, [r7, #4]
    1444:	78db      	ldrb	r3, [r3, #3]
    1446:	3b41      	subs	r3, #65	; 0x41
    1448:	2b37      	cmp	r3, #55	; 0x37
    144a:	f200 80c4 	bhi.w	15d6 <extract_specifier+0x1ae>
    144e:	a201      	add	r2, pc, #4	; (adr r2, 1454 <extract_specifier+0x2c>)
    1450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1454:	00001585 	.word	0x00001585
    1458:	000015d7 	.word	0x000015d7
    145c:	000015d7 	.word	0x000015d7
    1460:	000015d7 	.word	0x000015d7
    1464:	00001585 	.word	0x00001585
    1468:	00001585 	.word	0x00001585
    146c:	00001585 	.word	0x00001585
    1470:	000015d7 	.word	0x000015d7
    1474:	000015d7 	.word	0x000015d7
    1478:	000015d7 	.word	0x000015d7
    147c:	000015d7 	.word	0x000015d7
    1480:	000015d7 	.word	0x000015d7
    1484:	000015d7 	.word	0x000015d7
    1488:	000015d7 	.word	0x000015d7
    148c:	000015d7 	.word	0x000015d7
    1490:	000015d7 	.word	0x000015d7
    1494:	000015d7 	.word	0x000015d7
    1498:	000015d7 	.word	0x000015d7
    149c:	000015d7 	.word	0x000015d7
    14a0:	000015d7 	.word	0x000015d7
    14a4:	000015d7 	.word	0x000015d7
    14a8:	000015d7 	.word	0x000015d7
    14ac:	000015d7 	.word	0x000015d7
    14b0:	00001543 	.word	0x00001543
    14b4:	000015d7 	.word	0x000015d7
    14b8:	000015d7 	.word	0x000015d7
    14bc:	000015d7 	.word	0x000015d7
    14c0:	000015d7 	.word	0x000015d7
    14c4:	000015d7 	.word	0x000015d7
    14c8:	000015d7 	.word	0x000015d7
    14cc:	000015d7 	.word	0x000015d7
    14d0:	000015d7 	.word	0x000015d7
    14d4:	00001585 	.word	0x00001585
    14d8:	000015d7 	.word	0x000015d7
    14dc:	00001543 	.word	0x00001543
    14e0:	00001535 	.word	0x00001535
    14e4:	00001585 	.word	0x00001585
    14e8:	00001585 	.word	0x00001585
    14ec:	00001585 	.word	0x00001585
    14f0:	000015d7 	.word	0x000015d7
    14f4:	00001535 	.word	0x00001535
    14f8:	000015d7 	.word	0x000015d7
    14fc:	000015d7 	.word	0x000015d7
    1500:	000015d7 	.word	0x000015d7
    1504:	000015d7 	.word	0x000015d7
    1508:	00001597 	.word	0x00001597
    150c:	00001543 	.word	0x00001543
    1510:	000015b7 	.word	0x000015b7
    1514:	000015d7 	.word	0x000015d7
    1518:	000015d7 	.word	0x000015d7
    151c:	000015b7 	.word	0x000015b7
    1520:	000015d7 	.word	0x000015d7
    1524:	00001543 	.word	0x00001543
    1528:	000015d7 	.word	0x000015d7
    152c:	000015d7 	.word	0x000015d7
    1530:	00001543 	.word	0x00001543
	case SINT_CONV_CASES:
		conv->specifier_cat = SPECIFIER_SINT;
    1534:	687a      	ldr	r2, [r7, #4]
    1536:	7893      	ldrb	r3, [r2, #2]
    1538:	2101      	movs	r1, #1
    153a:	f361 0302 	bfi	r3, r1, #0, #3
    153e:	7093      	strb	r3, [r2, #2]
		goto int_conv;
    1540:	e005      	b.n	154e <extract_specifier+0x126>
	case UINT_CONV_CASES:
		conv->specifier_cat = SPECIFIER_UINT;
    1542:	687a      	ldr	r2, [r7, #4]
    1544:	7893      	ldrb	r3, [r2, #2]
    1546:	2102      	movs	r1, #2
    1548:	f361 0302 	bfi	r3, r1, #0, #3
    154c:	7093      	strb	r3, [r2, #2]
int_conv:
		/* L length specifier not acceptable */
		if (conv->length_mod == LENGTH_UPPER_L) {
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	785b      	ldrb	r3, [r3, #1]
    1552:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1556:	b2db      	uxtb	r3, r3
    1558:	2b40      	cmp	r3, #64	; 0x40
    155a:	d104      	bne.n	1566 <extract_specifier+0x13e>
			conv->invalid = true;
    155c:	687a      	ldr	r2, [r7, #4]
    155e:	7813      	ldrb	r3, [r2, #0]
    1560:	f043 0301 	orr.w	r3, r3, #1
    1564:	7013      	strb	r3, [r2, #0]
		}

		/* For c LENGTH_NONE and LENGTH_L would be ok,
		 * but we don't support formatting wide characters.
		 */
		if (conv->specifier == 'c') {
    1566:	687b      	ldr	r3, [r7, #4]
    1568:	78db      	ldrb	r3, [r3, #3]
    156a:	2b63      	cmp	r3, #99	; 0x63
    156c:	d139      	bne.n	15e2 <extract_specifier+0x1ba>
			unsupported = (conv->length_mod != LENGTH_NONE);
    156e:	687b      	ldr	r3, [r7, #4]
    1570:	785b      	ldrb	r3, [r3, #1]
    1572:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1576:	b2db      	uxtb	r3, r3
    1578:	2b00      	cmp	r3, #0
    157a:	bf14      	ite	ne
    157c:	2301      	movne	r3, #1
    157e:	2300      	moveq	r3, #0
    1580:	73fb      	strb	r3, [r7, #15]
				break;
			}
		} else {
			;
		}
		break;
    1582:	e02e      	b.n	15e2 <extract_specifier+0x1ba>

	case FP_CONV_CASES:
		conv->specifier_cat = SPECIFIER_FP;
    1584:	687a      	ldr	r2, [r7, #4]
    1586:	7893      	ldrb	r3, [r2, #2]
    1588:	2104      	movs	r1, #4
    158a:	f361 0302 	bfi	r3, r1, #0, #3
    158e:	7093      	strb	r3, [r2, #2]

		/* Don't support if disabled */
		if (!IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)) {
			unsupported = true;
    1590:	2301      	movs	r3, #1
    1592:	73fb      	strb	r3, [r7, #15]
			break;
    1594:	e02a      	b.n	15ec <extract_specifier+0x1c4>

		break;

		/* PTR cases are distinct */
	case 'n':
		conv->specifier_cat = SPECIFIER_PTR;
    1596:	687a      	ldr	r2, [r7, #4]
    1598:	7893      	ldrb	r3, [r2, #2]
    159a:	2103      	movs	r1, #3
    159c:	f361 0302 	bfi	r3, r1, #0, #3
    15a0:	7093      	strb	r3, [r2, #2]
		/* Anything except L */
		if (conv->length_mod == LENGTH_UPPER_L) {
    15a2:	687b      	ldr	r3, [r7, #4]
    15a4:	785b      	ldrb	r3, [r3, #1]
    15a6:	f003 0378 	and.w	r3, r3, #120	; 0x78
    15aa:	b2db      	uxtb	r3, r3
    15ac:	2b40      	cmp	r3, #64	; 0x40
    15ae:	d11a      	bne.n	15e6 <extract_specifier+0x1be>
			unsupported = true;
    15b0:	2301      	movs	r3, #1
    15b2:	73fb      	strb	r3, [r7, #15]
		}
		break;
    15b4:	e017      	b.n	15e6 <extract_specifier+0x1be>

	case 's':
	case 'p':
		conv->specifier_cat = SPECIFIER_PTR;
    15b6:	687a      	ldr	r2, [r7, #4]
    15b8:	7893      	ldrb	r3, [r2, #2]
    15ba:	2103      	movs	r1, #3
    15bc:	f361 0302 	bfi	r3, r1, #0, #3
    15c0:	7093      	strb	r3, [r2, #2]
		/* p: only LENGTH_NONE
		 *
		 * s: LENGTH_NONE or LENGTH_L but wide
		 * characters not supported.
		 */
		if (conv->length_mod != LENGTH_NONE) {
    15c2:	687b      	ldr	r3, [r7, #4]
    15c4:	785b      	ldrb	r3, [r3, #1]
    15c6:	f003 0378 	and.w	r3, r3, #120	; 0x78
    15ca:	b2db      	uxtb	r3, r3
    15cc:	2b00      	cmp	r3, #0
    15ce:	d00c      	beq.n	15ea <extract_specifier+0x1c2>
			unsupported = true;
    15d0:	2301      	movs	r3, #1
    15d2:	73fb      	strb	r3, [r7, #15]
		}
		break;
    15d4:	e009      	b.n	15ea <extract_specifier+0x1c2>

	default:
		conv->invalid = true;
    15d6:	687a      	ldr	r2, [r7, #4]
    15d8:	7813      	ldrb	r3, [r2, #0]
    15da:	f043 0301 	orr.w	r3, r3, #1
    15de:	7013      	strb	r3, [r2, #0]
		break;
    15e0:	e004      	b.n	15ec <extract_specifier+0x1c4>
		break;
    15e2:	bf00      	nop
    15e4:	e002      	b.n	15ec <extract_specifier+0x1c4>
		break;
    15e6:	bf00      	nop
    15e8:	e000      	b.n	15ec <extract_specifier+0x1c4>
		break;
    15ea:	bf00      	nop
	}

	conv->unsupported |= unsupported;
    15ec:	687b      	ldr	r3, [r7, #4]
    15ee:	781b      	ldrb	r3, [r3, #0]
    15f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
    15f4:	b2da      	uxtb	r2, r3
    15f6:	7bfb      	ldrb	r3, [r7, #15]
    15f8:	4313      	orrs	r3, r2
    15fa:	b2db      	uxtb	r3, r3
    15fc:	2b00      	cmp	r3, #0
    15fe:	bf14      	ite	ne
    1600:	2301      	movne	r3, #1
    1602:	2300      	moveq	r3, #0
    1604:	b2d9      	uxtb	r1, r3
    1606:	687a      	ldr	r2, [r7, #4]
    1608:	7813      	ldrb	r3, [r2, #0]
    160a:	f361 0341 	bfi	r3, r1, #1, #1
    160e:	7013      	strb	r3, [r2, #0]

	return sp;
    1610:	683b      	ldr	r3, [r7, #0]
}
    1612:	4618      	mov	r0, r3
    1614:	3714      	adds	r7, #20
    1616:	46bd      	mov	sp, r7
    1618:	bc80      	pop	{r7}
    161a:	4770      	bx	lr

0000161c <store_count>:
 * @param count the count to be stored.
 */
static inline void store_count(const struct conversion *conv,
			       void *dp,
			       int count)
{
    161c:	b480      	push	{r7}
    161e:	b085      	sub	sp, #20
    1620:	af00      	add	r7, sp, #0
    1622:	60f8      	str	r0, [r7, #12]
    1624:	60b9      	str	r1, [r7, #8]
    1626:	607a      	str	r2, [r7, #4]
	switch ((enum length_mod_enum)conv->length_mod) {
    1628:	68fb      	ldr	r3, [r7, #12]
    162a:	785b      	ldrb	r3, [r3, #1]
    162c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    1630:	b2db      	uxtb	r3, r3
    1632:	2b07      	cmp	r3, #7
    1634:	d83c      	bhi.n	16b0 <store_count+0x94>
    1636:	a201      	add	r2, pc, #4	; (adr r2, 163c <store_count+0x20>)
    1638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    163c:	0000165d 	.word	0x0000165d
    1640:	00001665 	.word	0x00001665
    1644:	0000166f 	.word	0x0000166f
    1648:	00001679 	.word	0x00001679
    164c:	00001681 	.word	0x00001681
    1650:	00001691 	.word	0x00001691
    1654:	000016a1 	.word	0x000016a1
    1658:	000016a9 	.word	0x000016a9
	case LENGTH_NONE:
		*(int *)dp = count;
    165c:	68bb      	ldr	r3, [r7, #8]
    165e:	687a      	ldr	r2, [r7, #4]
    1660:	601a      	str	r2, [r3, #0]
		break;
    1662:	e026      	b.n	16b2 <store_count+0x96>
	case LENGTH_HH:
		*(signed char *)dp = (signed char)count;
    1664:	687b      	ldr	r3, [r7, #4]
    1666:	b25a      	sxtb	r2, r3
    1668:	68bb      	ldr	r3, [r7, #8]
    166a:	701a      	strb	r2, [r3, #0]
		break;
    166c:	e021      	b.n	16b2 <store_count+0x96>
	case LENGTH_H:
		*(short *)dp = (short)count;
    166e:	687b      	ldr	r3, [r7, #4]
    1670:	b21a      	sxth	r2, r3
    1672:	68bb      	ldr	r3, [r7, #8]
    1674:	801a      	strh	r2, [r3, #0]
		break;
    1676:	e01c      	b.n	16b2 <store_count+0x96>
	case LENGTH_L:
		*(long *)dp = (long)count;
    1678:	68bb      	ldr	r3, [r7, #8]
    167a:	687a      	ldr	r2, [r7, #4]
    167c:	601a      	str	r2, [r3, #0]
		break;
    167e:	e018      	b.n	16b2 <store_count+0x96>
	case LENGTH_LL:
		*(long long *)dp = (long long)count;
    1680:	687b      	ldr	r3, [r7, #4]
    1682:	461a      	mov	r2, r3
    1684:	ea4f 73e2 	mov.w	r3, r2, asr #31
    1688:	68b9      	ldr	r1, [r7, #8]
    168a:	e9c1 2300 	strd	r2, r3, [r1]
		break;
    168e:	e010      	b.n	16b2 <store_count+0x96>
	case LENGTH_J:
		*(intmax_t *)dp = (intmax_t)count;
    1690:	687b      	ldr	r3, [r7, #4]
    1692:	461a      	mov	r2, r3
    1694:	ea4f 73e2 	mov.w	r3, r2, asr #31
    1698:	68b9      	ldr	r1, [r7, #8]
    169a:	e9c1 2300 	strd	r2, r3, [r1]
		break;
    169e:	e008      	b.n	16b2 <store_count+0x96>
	case LENGTH_Z:
		*(size_t *)dp = (size_t)count;
    16a0:	687a      	ldr	r2, [r7, #4]
    16a2:	68bb      	ldr	r3, [r7, #8]
    16a4:	601a      	str	r2, [r3, #0]
		break;
    16a6:	e004      	b.n	16b2 <store_count+0x96>
	case LENGTH_T:
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    16a8:	68bb      	ldr	r3, [r7, #8]
    16aa:	687a      	ldr	r2, [r7, #4]
    16ac:	601a      	str	r2, [r3, #0]
		break;
    16ae:	e000      	b.n	16b2 <store_count+0x96>
	default:
		/* Add an empty default with break, this is a defensive programming.
		 * Static analysis tool won't raise a violation if default is empty,
		 * but has that comment.
		 */
		break;
    16b0:	bf00      	nop
	}
}
    16b2:	bf00      	nop
    16b4:	3714      	adds	r7, #20
    16b6:	46bd      	mov	sp, r7
    16b8:	bc80      	pop	{r7}
    16ba:	4770      	bx	lr

000016bc <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    16bc:	b580      	push	{r7, lr}
    16be:	b0b0      	sub	sp, #192	; 0xc0
    16c0:	af02      	add	r7, sp, #8
    16c2:	60f8      	str	r0, [r7, #12]
    16c4:	60b9      	str	r1, [r7, #8]
    16c6:	607a      	str	r2, [r7, #4]
    16c8:	603b      	str	r3, [r7, #0]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    16ca:	2300      	movs	r3, #0
    16cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    16d0:	f000 bccd 	b.w	206e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6e>
		if (*fp != '%') {
    16d4:	687b      	ldr	r3, [r7, #4]
    16d6:	781b      	ldrb	r3, [r3, #0]
    16d8:	2b25      	cmp	r3, #37	; 0x25
    16da:	d016      	beq.n	170a <cbvprintf+0x4e>
			OUTC(*fp++);
    16dc:	687b      	ldr	r3, [r7, #4]
    16de:	1c5a      	adds	r2, r3, #1
    16e0:	607a      	str	r2, [r7, #4]
    16e2:	781b      	ldrb	r3, [r3, #0]
    16e4:	461a      	mov	r2, r3
    16e6:	68fb      	ldr	r3, [r7, #12]
    16e8:	68b9      	ldr	r1, [r7, #8]
    16ea:	4610      	mov	r0, r2
    16ec:	4798      	blx	r3
    16ee:	64b8      	str	r0, [r7, #72]	; 0x48
    16f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    16f2:	2b00      	cmp	r3, #0
    16f4:	da02      	bge.n	16fc <cbvprintf+0x40>
    16f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    16f8:	f000 bcc0 	b.w	207c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7c>
    16fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    1700:	3301      	adds	r3, #1
    1702:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			continue;
    1706:	f000 bcb2 	b.w	206e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6e>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    170a:	f107 0318 	add.w	r3, r7, #24
    170e:	2200      	movs	r2, #0
    1710:	601a      	str	r2, [r3, #0]
    1712:	605a      	str	r2, [r3, #4]
    1714:	609a      	str	r2, [r3, #8]
    1716:	60da      	str	r2, [r3, #12]
    1718:	611a      	str	r2, [r3, #16]
    171a:	615a      	str	r2, [r3, #20]
			.value = {
				.uint = 0,
			},
		};
		struct conversion *const conv = &state.conv;
    171c:	f107 0318 	add.w	r3, r7, #24
    1720:	3308      	adds	r3, #8
    1722:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		union argument_value *const value = &state.value;
    1726:	f107 0318 	add.w	r3, r7, #24
    172a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		const char *sp = fp;
    172e:	687b      	ldr	r3, [r7, #4]
    1730:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		int width = -1;
    1734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1738:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		int precision = -1;
    173c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1740:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		const char *bps = NULL;
    1744:	2300      	movs	r3, #0
    1746:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		const char *bpe = buf + sizeof(buf);
    174a:	f107 0330 	add.w	r3, r7, #48	; 0x30
    174e:	3316      	adds	r3, #22
    1750:	617b      	str	r3, [r7, #20]
		char sign = 0;
    1752:	2300      	movs	r3, #0
    1754:	74fb      	strb	r3, [r7, #19]

		fp = extract_conversion(conv, sp);
    1756:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
    175a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
    175e:	f00e fdf7 	bl	10350 <extract_conversion>
    1762:	6078      	str	r0, [r7, #4]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    1764:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1768:	785b      	ldrb	r3, [r3, #1]
    176a:	f003 0301 	and.w	r3, r3, #1
    176e:	b2db      	uxtb	r3, r3
    1770:	2b00      	cmp	r3, #0
    1772:	d015      	beq.n	17a0 <cbvprintf+0xe4>
			width = va_arg(ap, int);
    1774:	683b      	ldr	r3, [r7, #0]
    1776:	1d1a      	adds	r2, r3, #4
    1778:	603a      	str	r2, [r7, #0]
    177a:	681b      	ldr	r3, [r3, #0]
    177c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

			if (width < 0) {
    1780:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    1784:	2b00      	cmp	r3, #0
    1786:	da18      	bge.n	17ba <cbvprintf+0xfe>
				conv->flag_dash = true;
    1788:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
    178c:	7813      	ldrb	r3, [r2, #0]
    178e:	f043 0304 	orr.w	r3, r3, #4
    1792:	7013      	strb	r3, [r2, #0]
				width = -width;
    1794:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    1798:	425b      	negs	r3, r3
    179a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    179e:	e00c      	b.n	17ba <cbvprintf+0xfe>
			}
		} else if (conv->width_present) {
    17a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    17a4:	781b      	ldrb	r3, [r3, #0]
    17a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    17aa:	b2db      	uxtb	r3, r3
    17ac:	2b00      	cmp	r3, #0
    17ae:	d004      	beq.n	17ba <cbvprintf+0xfe>
			width = conv->width_value;
    17b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    17b4:	685b      	ldr	r3, [r3, #4]
    17b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    17ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    17be:	785b      	ldrb	r3, [r3, #1]
    17c0:	f003 0304 	and.w	r3, r3, #4
    17c4:	b2db      	uxtb	r3, r3
    17c6:	2b00      	cmp	r3, #0
    17c8:	d015      	beq.n	17f6 <cbvprintf+0x13a>
			int arg = va_arg(ap, int);
    17ca:	683b      	ldr	r3, [r7, #0]
    17cc:	1d1a      	adds	r2, r3, #4
    17ce:	603a      	str	r2, [r7, #0]
    17d0:	681b      	ldr	r3, [r3, #0]
    17d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

			if (arg < 0) {
    17d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    17da:	2b00      	cmp	r3, #0
    17dc:	da06      	bge.n	17ec <cbvprintf+0x130>
				conv->prec_present = false;
    17de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
    17e2:	7853      	ldrb	r3, [r2, #1]
    17e4:	f36f 0341 	bfc	r3, #1, #1
    17e8:	7053      	strb	r3, [r2, #1]
    17ea:	e011      	b.n	1810 <cbvprintf+0x154>
			} else {
				precision = arg;
    17ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    17f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    17f4:	e00c      	b.n	1810 <cbvprintf+0x154>
			}
		} else if (conv->prec_present) {
    17f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    17fa:	785b      	ldrb	r3, [r3, #1]
    17fc:	f003 0302 	and.w	r3, r3, #2
    1800:	b2db      	uxtb	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	d004      	beq.n	1810 <cbvprintf+0x154>
			precision = conv->prec_value;
    1806:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    180a:	689b      	ldr	r3, [r3, #8]
    180c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    1810:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1814:	2200      	movs	r2, #0
    1816:	605a      	str	r2, [r3, #4]
		conv->pad0_pre_exp = 0;
    1818:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    181c:	2200      	movs	r2, #0
    181e:	609a      	str	r2, [r3, #8]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    1820:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1824:	789b      	ldrb	r3, [r3, #2]
    1826:	f3c3 0302 	ubfx	r3, r3, #0, #3
    182a:	b2db      	uxtb	r3, r3
		enum specifier_cat_enum specifier_cat
    182c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    1830:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1834:	785b      	ldrb	r3, [r3, #1]
    1836:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    183a:	b2db      	uxtb	r3, r3
		enum length_mod_enum length_mod
    183c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    1840:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
    1844:	2b01      	cmp	r3, #1
    1846:	d174      	bne.n	1932 <cbvprintf+0x276>
			switch (length_mod) {
    1848:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
    184c:	3b03      	subs	r3, #3
    184e:	2b04      	cmp	r3, #4
    1850:	d80c      	bhi.n	186c <cbvprintf+0x1b0>
    1852:	a201      	add	r2, pc, #4	; (adr r2, 1858 <cbvprintf+0x19c>)
    1854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1858:	00001885 	.word	0x00001885
    185c:	0000189d 	.word	0x0000189d
    1860:	000018b9 	.word	0x000018b9
    1864:	000018d5 	.word	0x000018d5
    1868:	000018d5 	.word	0x000018d5
			default:
			case LENGTH_NONE:
			case LENGTH_HH:
			case LENGTH_H:
				value->sint = va_arg(ap, int);
    186c:	683b      	ldr	r3, [r7, #0]
    186e:	1d1a      	adds	r2, r3, #4
    1870:	603a      	str	r2, [r7, #0]
    1872:	681b      	ldr	r3, [r3, #0]
    1874:	461a      	mov	r2, r3
    1876:	ea4f 73e2 	mov.w	r3, r2, asr #31
    187a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    187e:	e9c1 2300 	strd	r2, r3, [r1]
				break;
    1882:	e033      	b.n	18ec <cbvprintf+0x230>
				if (WCHAR_IS_SIGNED
				    && (conv->specifier == 'c')) {
					value->sint = (wchar_t)va_arg(ap,
							      WINT_TYPE);
				} else {
					value->sint = va_arg(ap, long);
    1884:	683b      	ldr	r3, [r7, #0]
    1886:	1d1a      	adds	r2, r3, #4
    1888:	603a      	str	r2, [r7, #0]
    188a:	681b      	ldr	r3, [r3, #0]
    188c:	461a      	mov	r2, r3
    188e:	ea4f 73e2 	mov.w	r3, r2, asr #31
    1892:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    1896:	e9c1 2300 	strd	r2, r3, [r1]
				}
				break;
    189a:	e027      	b.n	18ec <cbvprintf+0x230>
			case LENGTH_LL:
				value->sint =
					(sint_value_type)va_arg(ap, long long);
    189c:	683b      	ldr	r3, [r7, #0]
    189e:	3307      	adds	r3, #7
    18a0:	f023 0307 	bic.w	r3, r3, #7
    18a4:	f103 0208 	add.w	r2, r3, #8
    18a8:	603a      	str	r2, [r7, #0]
    18aa:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    18ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    18b2:	e9c1 2300 	strd	r2, r3, [r1]
				break;
    18b6:	e019      	b.n	18ec <cbvprintf+0x230>
			case LENGTH_J:
				value->sint =
					(sint_value_type)va_arg(ap, intmax_t);
    18b8:	683b      	ldr	r3, [r7, #0]
    18ba:	3307      	adds	r3, #7
    18bc:	f023 0307 	bic.w	r3, r3, #7
    18c0:	f103 0208 	add.w	r2, r3, #8
    18c4:	603a      	str	r2, [r7, #0]
    18c6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    18ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    18ce:	e9c1 2300 	strd	r2, r3, [r1]
				break;
    18d2:	e00b      	b.n	18ec <cbvprintf+0x230>
				 * unsigned and signed equivalents of each
				 * other.  This can be checked in a platform
				 * test.
				 */
				value->sint =
					(sint_value_type)va_arg(ap, ptrdiff_t);
    18d4:	683b      	ldr	r3, [r7, #0]
    18d6:	1d1a      	adds	r2, r3, #4
    18d8:	603a      	str	r2, [r7, #0]
    18da:	681b      	ldr	r3, [r3, #0]
    18dc:	461a      	mov	r2, r3
    18de:	ea4f 73e2 	mov.w	r3, r2, asr #31
				value->sint =
    18e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    18e6:	e9c1 2300 	strd	r2, r3, [r1]
				break;
    18ea:	bf00      	nop
			}
			if (length_mod == LENGTH_HH) {
    18ec:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
    18f0:	2b01      	cmp	r3, #1
    18f2:	d10c      	bne.n	190e <cbvprintf+0x252>
				value->sint = (char)value->sint;
    18f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    18f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    18fc:	b2d3      	uxtb	r3, r2
    18fe:	b2da      	uxtb	r2, r3
    1900:	f04f 0300 	mov.w	r3, #0
    1904:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    1908:	e9c1 2300 	strd	r2, r3, [r1]
    190c:	e0ca      	b.n	1aa4 <cbvprintf+0x3e8>
			} else if (length_mod == LENGTH_H) {
    190e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
    1912:	2b02      	cmp	r3, #2
    1914:	f040 80c6 	bne.w	1aa4 <cbvprintf+0x3e8>
				value->sint = (short)value->sint;
    1918:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    191c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1920:	b213      	sxth	r3, r2
    1922:	b21a      	sxth	r2, r3
    1924:	ea4f 73e2 	mov.w	r3, r2, asr #31
    1928:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    192c:	e9c1 2300 	strd	r2, r3, [r1]
    1930:	e0b8      	b.n	1aa4 <cbvprintf+0x3e8>
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    1932:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
    1936:	2b02      	cmp	r3, #2
    1938:	f040 8085 	bne.w	1a46 <cbvprintf+0x38a>
			switch (length_mod) {
    193c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
    1940:	3b03      	subs	r3, #3
    1942:	2b04      	cmp	r3, #4
    1944:	d80c      	bhi.n	1960 <cbvprintf+0x2a4>
    1946:	a201      	add	r2, pc, #4	; (adr r2, 194c <cbvprintf+0x290>)
    1948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    194c:	00001979 	.word	0x00001979
    1950:	000019b3 	.word	0x000019b3
    1954:	000019cf 	.word	0x000019cf
    1958:	000019eb 	.word	0x000019eb
    195c:	000019eb 	.word	0x000019eb
			default:
			case LENGTH_NONE:
			case LENGTH_HH:
			case LENGTH_H:
				value->uint = va_arg(ap, unsigned int);
    1960:	683b      	ldr	r3, [r7, #0]
    1962:	1d1a      	adds	r2, r3, #4
    1964:	603a      	str	r2, [r7, #0]
    1966:	681b      	ldr	r3, [r3, #0]
    1968:	461a      	mov	r2, r3
    196a:	f04f 0300 	mov.w	r3, #0
    196e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    1972:	e9c1 2300 	strd	r2, r3, [r1]
				break;
    1976:	e044      	b.n	1a02 <cbvprintf+0x346>
			case LENGTH_L:
				if ((!WCHAR_IS_SIGNED)
				    && (conv->specifier == 'c')) {
    1978:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    197c:	78db      	ldrb	r3, [r3, #3]
				if ((!WCHAR_IS_SIGNED)
    197e:	2b63      	cmp	r3, #99	; 0x63
    1980:	d10b      	bne.n	199a <cbvprintf+0x2de>
					value->uint = (wchar_t)va_arg(ap,
    1982:	683b      	ldr	r3, [r7, #0]
    1984:	1d1a      	adds	r2, r3, #4
    1986:	603a      	str	r2, [r7, #0]
    1988:	681b      	ldr	r3, [r3, #0]
    198a:	461a      	mov	r2, r3
    198c:	f04f 0300 	mov.w	r3, #0
    1990:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    1994:	e9c1 2300 	strd	r2, r3, [r1]
							      WINT_TYPE);
				} else {
					value->uint = va_arg(ap, unsigned long);
				}
				break;
    1998:	e033      	b.n	1a02 <cbvprintf+0x346>
					value->uint = va_arg(ap, unsigned long);
    199a:	683b      	ldr	r3, [r7, #0]
    199c:	1d1a      	adds	r2, r3, #4
    199e:	603a      	str	r2, [r7, #0]
    19a0:	681b      	ldr	r3, [r3, #0]
    19a2:	461a      	mov	r2, r3
    19a4:	f04f 0300 	mov.w	r3, #0
    19a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    19ac:	e9c1 2300 	strd	r2, r3, [r1]
				break;
    19b0:	e027      	b.n	1a02 <cbvprintf+0x346>
			case LENGTH_LL:
				value->uint =
					(uint_value_type)va_arg(ap,
    19b2:	683b      	ldr	r3, [r7, #0]
    19b4:	3307      	adds	r3, #7
    19b6:	f023 0307 	bic.w	r3, r3, #7
    19ba:	f103 0208 	add.w	r2, r3, #8
    19be:	603a      	str	r2, [r7, #0]
    19c0:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    19c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    19c8:	e9c1 2300 	strd	r2, r3, [r1]
						unsigned long long);
				break;
    19cc:	e019      	b.n	1a02 <cbvprintf+0x346>
			case LENGTH_J:
				value->uint =
					(uint_value_type)va_arg(ap,
    19ce:	683b      	ldr	r3, [r7, #0]
    19d0:	3307      	adds	r3, #7
    19d2:	f023 0307 	bic.w	r3, r3, #7
    19d6:	f103 0208 	add.w	r2, r3, #8
    19da:	603a      	str	r2, [r7, #0]
    19dc:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    19e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    19e4:	e9c1 2300 	strd	r2, r3, [r1]
								uintmax_t);
				break;
    19e8:	e00b      	b.n	1a02 <cbvprintf+0x346>
			case LENGTH_Z:		/* size_t */
			case LENGTH_T:		/* ptrdiff_t */
				value->uint =
					(uint_value_type)va_arg(ap, size_t);
    19ea:	683b      	ldr	r3, [r7, #0]
    19ec:	1d1a      	adds	r2, r3, #4
    19ee:	603a      	str	r2, [r7, #0]
    19f0:	681b      	ldr	r3, [r3, #0]
    19f2:	461a      	mov	r2, r3
    19f4:	f04f 0300 	mov.w	r3, #0
				value->uint =
    19f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    19fc:	e9c1 2300 	strd	r2, r3, [r1]
				break;
    1a00:	bf00      	nop
			}
			if (length_mod == LENGTH_HH) {
    1a02:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
    1a06:	2b01      	cmp	r3, #1
    1a08:	d10c      	bne.n	1a24 <cbvprintf+0x368>
				value->uint = (unsigned char)value->uint;
    1a0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    1a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a12:	b2d3      	uxtb	r3, r2
    1a14:	b2da      	uxtb	r2, r3
    1a16:	f04f 0300 	mov.w	r3, #0
    1a1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    1a1e:	e9c1 2300 	strd	r2, r3, [r1]
    1a22:	e03f      	b.n	1aa4 <cbvprintf+0x3e8>
			} else if (length_mod == LENGTH_H) {
    1a24:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
    1a28:	2b02      	cmp	r3, #2
    1a2a:	d13b      	bne.n	1aa4 <cbvprintf+0x3e8>
				value->uint = (unsigned short)value->uint;
    1a2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    1a30:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a34:	b293      	uxth	r3, r2
    1a36:	b29a      	uxth	r2, r3
    1a38:	f04f 0300 	mov.w	r3, #0
    1a3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    1a40:	e9c1 2300 	strd	r2, r3, [r1]
    1a44:	e02e      	b.n	1aa4 <cbvprintf+0x3e8>
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    1a46:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
    1a4a:	2b04      	cmp	r3, #4
    1a4c:	d11f      	bne.n	1a8e <cbvprintf+0x3d2>
			if (length_mod == LENGTH_UPPER_L) {
    1a4e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
    1a52:	2b08      	cmp	r3, #8
    1a54:	d10d      	bne.n	1a72 <cbvprintf+0x3b6>
				value->ldbl = va_arg(ap, long double);
    1a56:	683b      	ldr	r3, [r7, #0]
    1a58:	3307      	adds	r3, #7
    1a5a:	f023 0307 	bic.w	r3, r3, #7
    1a5e:	f103 0208 	add.w	r2, r3, #8
    1a62:	603a      	str	r2, [r7, #0]
    1a64:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a68:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    1a6c:	e9c1 2300 	strd	r2, r3, [r1]
    1a70:	e018      	b.n	1aa4 <cbvprintf+0x3e8>
			} else {
				value->dbl = va_arg(ap, double);
    1a72:	683b      	ldr	r3, [r7, #0]
    1a74:	3307      	adds	r3, #7
    1a76:	f023 0307 	bic.w	r3, r3, #7
    1a7a:	f103 0208 	add.w	r2, r3, #8
    1a7e:	603a      	str	r2, [r7, #0]
    1a80:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a84:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    1a88:	e9c1 2300 	strd	r2, r3, [r1]
    1a8c:	e00a      	b.n	1aa4 <cbvprintf+0x3e8>
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    1a8e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
    1a92:	2b03      	cmp	r3, #3
    1a94:	d106      	bne.n	1aa4 <cbvprintf+0x3e8>
			value->ptr = va_arg(ap, void *);
    1a96:	683b      	ldr	r3, [r7, #0]
    1a98:	1d1a      	adds	r2, r3, #4
    1a9a:	603a      	str	r2, [r7, #0]
    1a9c:	681a      	ldr	r2, [r3, #0]
    1a9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    1aa2:	601a      	str	r2, [r3, #0]
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    1aa4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1aa8:	781b      	ldrb	r3, [r3, #0]
    1aaa:	f003 0301 	and.w	r3, r3, #1
    1aae:	b2db      	uxtb	r3, r3
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	d107      	bne.n	1ac4 <cbvprintf+0x408>
    1ab4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1ab8:	781b      	ldrb	r3, [r3, #0]
    1aba:	f003 0302 	and.w	r3, r3, #2
    1abe:	b2db      	uxtb	r3, r3
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	d013      	beq.n	1aec <cbvprintf+0x430>
			OUTS(sp, fp);
    1ac4:	687b      	ldr	r3, [r7, #4]
    1ac6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
    1aca:	68b9      	ldr	r1, [r7, #8]
    1acc:	68f8      	ldr	r0, [r7, #12]
    1ace:	f00e fd01 	bl	104d4 <outs>
    1ad2:	64f8      	str	r0, [r7, #76]	; 0x4c
    1ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1ad6:	2b00      	cmp	r3, #0
    1ad8:	da01      	bge.n	1ade <cbvprintf+0x422>
    1ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1adc:	e2ce      	b.n	207c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7c>
    1ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1ae0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
    1ae4:	4413      	add	r3, r2
    1ae6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			continue;
    1aea:	e2c0      	b.n	206e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6e>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    1aec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1af0:	78db      	ldrb	r3, [r3, #3]
    1af2:	3b25      	subs	r3, #37	; 0x25
    1af4:	2b53      	cmp	r3, #83	; 0x53
    1af6:	f200 8181 	bhi.w	1dfc <cbvprintf+0x740>
    1afa:	a201      	add	r2, pc, #4	; (adr r2, 1b00 <cbvprintf+0x444>)
    1afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1b00:	00001c51 	.word	0x00001c51
    1b04:	00001dfd 	.word	0x00001dfd
    1b08:	00001dfd 	.word	0x00001dfd
    1b0c:	00001dfd 	.word	0x00001dfd
    1b10:	00001dfd 	.word	0x00001dfd
    1b14:	00001dfd 	.word	0x00001dfd
    1b18:	00001dfd 	.word	0x00001dfd
    1b1c:	00001dfd 	.word	0x00001dfd
    1b20:	00001dfd 	.word	0x00001dfd
    1b24:	00001dfd 	.word	0x00001dfd
    1b28:	00001dfd 	.word	0x00001dfd
    1b2c:	00001dfd 	.word	0x00001dfd
    1b30:	00001dfd 	.word	0x00001dfd
    1b34:	00001dfd 	.word	0x00001dfd
    1b38:	00001dfd 	.word	0x00001dfd
    1b3c:	00001dfd 	.word	0x00001dfd
    1b40:	00001dfd 	.word	0x00001dfd
    1b44:	00001dfd 	.word	0x00001dfd
    1b48:	00001dfd 	.word	0x00001dfd
    1b4c:	00001dfd 	.word	0x00001dfd
    1b50:	00001dfd 	.word	0x00001dfd
    1b54:	00001dfd 	.word	0x00001dfd
    1b58:	00001dfd 	.word	0x00001dfd
    1b5c:	00001dfd 	.word	0x00001dfd
    1b60:	00001dfd 	.word	0x00001dfd
    1b64:	00001dfd 	.word	0x00001dfd
    1b68:	00001dfd 	.word	0x00001dfd
    1b6c:	00001dfd 	.word	0x00001dfd
    1b70:	00001dfd 	.word	0x00001dfd
    1b74:	00001dfd 	.word	0x00001dfd
    1b78:	00001dfd 	.word	0x00001dfd
    1b7c:	00001dfd 	.word	0x00001dfd
    1b80:	00001dfd 	.word	0x00001dfd
    1b84:	00001dfd 	.word	0x00001dfd
    1b88:	00001dfd 	.word	0x00001dfd
    1b8c:	00001dfd 	.word	0x00001dfd
    1b90:	00001dfd 	.word	0x00001dfd
    1b94:	00001dfd 	.word	0x00001dfd
    1b98:	00001dfd 	.word	0x00001dfd
    1b9c:	00001dfd 	.word	0x00001dfd
    1ba0:	00001dfd 	.word	0x00001dfd
    1ba4:	00001dfd 	.word	0x00001dfd
    1ba8:	00001dfd 	.word	0x00001dfd
    1bac:	00001dfd 	.word	0x00001dfd
    1bb0:	00001dfd 	.word	0x00001dfd
    1bb4:	00001dfd 	.word	0x00001dfd
    1bb8:	00001dfd 	.word	0x00001dfd
    1bbc:	00001dfd 	.word	0x00001dfd
    1bc0:	00001dfd 	.word	0x00001dfd
    1bc4:	00001dfd 	.word	0x00001dfd
    1bc8:	00001dfd 	.word	0x00001dfd
    1bcc:	00001d3f 	.word	0x00001d3f
    1bd0:	00001dfd 	.word	0x00001dfd
    1bd4:	00001dfd 	.word	0x00001dfd
    1bd8:	00001dfd 	.word	0x00001dfd
    1bdc:	00001dfd 	.word	0x00001dfd
    1be0:	00001dfd 	.word	0x00001dfd
    1be4:	00001dfd 	.word	0x00001dfd
    1be8:	00001dfd 	.word	0x00001dfd
    1bec:	00001dfd 	.word	0x00001dfd
    1bf0:	00001dfd 	.word	0x00001dfd
    1bf4:	00001dfd 	.word	0x00001dfd
    1bf8:	00001cb9 	.word	0x00001cb9
    1bfc:	00001cd9 	.word	0x00001cd9
    1c00:	00001dfd 	.word	0x00001dfd
    1c04:	00001dfd 	.word	0x00001dfd
    1c08:	00001dfd 	.word	0x00001dfd
    1c0c:	00001dfd 	.word	0x00001dfd
    1c10:	00001cd9 	.word	0x00001cd9
    1c14:	00001dfd 	.word	0x00001dfd
    1c18:	00001dfd 	.word	0x00001dfd
    1c1c:	00001dfd 	.word	0x00001dfd
    1c20:	00001dfd 	.word	0x00001dfd
    1c24:	00001de7 	.word	0x00001de7
    1c28:	00001d3f 	.word	0x00001d3f
    1c2c:	00001d95 	.word	0x00001d95
    1c30:	00001dfd 	.word	0x00001dfd
    1c34:	00001dfd 	.word	0x00001dfd
    1c38:	00001c71 	.word	0x00001c71
    1c3c:	00001dfd 	.word	0x00001dfd
    1c40:	00001d3f 	.word	0x00001d3f
    1c44:	00001dfd 	.word	0x00001dfd
    1c48:	00001dfd 	.word	0x00001dfd
    1c4c:	00001d3f 	.word	0x00001d3f
		case '%':
			OUTC('%');
    1c50:	68fb      	ldr	r3, [r7, #12]
    1c52:	68b9      	ldr	r1, [r7, #8]
    1c54:	2025      	movs	r0, #37	; 0x25
    1c56:	4798      	blx	r3
    1c58:	6738      	str	r0, [r7, #112]	; 0x70
    1c5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	da01      	bge.n	1c64 <cbvprintf+0x5a8>
    1c60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    1c62:	e20b      	b.n	207c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7c>
    1c64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    1c68:	3301      	adds	r3, #1
    1c6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			break;
    1c6e:	e0c8      	b.n	1e02 <cbvprintf+0x746>
		case 's': {
			bps = (const char *)value->ptr;
    1c70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    1c74:	681b      	ldr	r3, [r3, #0]
    1c76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

			size_t len;

			if (precision >= 0) {
    1c7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    1c7e:	2b00      	cmp	r3, #0
    1c80:	db09      	blt.n	1c96 <cbvprintf+0x5da>
				len = strnlen(bps, precision);
    1c82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    1c86:	4619      	mov	r1, r3
    1c88:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
    1c8c:	f010 fed2 	bl	12a34 <strnlen>
    1c90:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    1c94:	e005      	b.n	1ca2 <cbvprintf+0x5e6>
			} else {
				len = strlen(bps);
    1c96:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
    1c9a:	f010 feb4 	bl	12a06 <strlen>
    1c9e:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
			}

			bpe = bps + len;
    1ca2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
    1ca6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
    1caa:	4413      	add	r3, r2
    1cac:	617b      	str	r3, [r7, #20]
			precision = -1;
    1cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1cb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			break;
    1cb6:	e0a4      	b.n	1e02 <cbvprintf+0x746>
		}
		case 'c':
			bps = buf;
    1cb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
    1cbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1cc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    1cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
    1cc8:	b2d3      	uxtb	r3, r2
    1cca:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			bpe = buf + 1;
    1cce:	f107 0330 	add.w	r3, r7, #48	; 0x30
    1cd2:	3301      	adds	r3, #1
    1cd4:	617b      	str	r3, [r7, #20]
			break;
    1cd6:	e094      	b.n	1e02 <cbvprintf+0x746>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    1cd8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1cdc:	781b      	ldrb	r3, [r3, #0]
    1cde:	f003 0308 	and.w	r3, r3, #8
    1ce2:	b2db      	uxtb	r3, r3
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	d002      	beq.n	1cee <cbvprintf+0x632>
				sign = '+';
    1ce8:	232b      	movs	r3, #43	; 0x2b
    1cea:	74fb      	strb	r3, [r7, #19]
    1cec:	e009      	b.n	1d02 <cbvprintf+0x646>
			} else if (conv->flag_space) {
    1cee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1cf2:	781b      	ldrb	r3, [r3, #0]
    1cf4:	f003 0310 	and.w	r3, r3, #16
    1cf8:	b2db      	uxtb	r3, r3
    1cfa:	2b00      	cmp	r3, #0
    1cfc:	d001      	beq.n	1d02 <cbvprintf+0x646>
				sign = ' ';
    1cfe:	2320      	movs	r3, #32
    1d00:	74fb      	strb	r3, [r7, #19]

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    1d02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    1d06:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d0a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
			if (sint < 0) {
    1d0e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    1d12:	2a00      	cmp	r2, #0
    1d14:	f173 0300 	sbcs.w	r3, r3, #0
    1d18:	da0b      	bge.n	1d32 <cbvprintf+0x676>
				sign = '-';
    1d1a:	232d      	movs	r3, #45	; 0x2d
    1d1c:	74fb      	strb	r3, [r7, #19]
				value->uint = (uint_value_type)-sint;
    1d1e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    1d22:	4252      	negs	r2, r2
    1d24:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1d28:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    1d2c:	e9c1 2300 	strd	r2, r3, [r1]
    1d30:	e005      	b.n	1d3e <cbvprintf+0x682>
			} else {
				value->uint = (uint_value_type)sint;
    1d32:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    1d36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    1d3a:	e9c1 2300 	strd	r2, r3, [r1]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    1d3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    1d42:	e9d3 0100 	ldrd	r0, r1, [r3]
    1d46:	697b      	ldr	r3, [r7, #20]
    1d48:	f107 0230 	add.w	r2, r7, #48	; 0x30
    1d4c:	9300      	str	r3, [sp, #0]
    1d4e:	4613      	mov	r3, r2
    1d50:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
    1d54:	f00e fb50 	bl	103f8 <encode_uint>
    1d58:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    1d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    1d60:	2b00      	cmp	r3, #0
    1d62:	db4d      	blt.n	1e00 <cbvprintf+0x744>
				size_t len = bpe - bps;
    1d64:	697a      	ldr	r2, [r7, #20]
    1d66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
    1d6a:	1ad3      	subs	r3, r2, r3
    1d6c:	677b      	str	r3, [r7, #116]	; 0x74

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    1d6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
    1d72:	7813      	ldrb	r3, [r2, #0]
    1d74:	f36f 1386 	bfc	r3, #6, #1
    1d78:	7013      	strb	r3, [r2, #0]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    1d7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    1d7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    1d80:	429a      	cmp	r2, r3
    1d82:	d23d      	bcs.n	1e00 <cbvprintf+0x744>
					conv->pad0_value = precision - (int)len;
    1d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1d86:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
    1d8a:	1ad2      	subs	r2, r2, r3
    1d8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1d90:	605a      	str	r2, [r3, #4]
				}
			}

			break;
    1d92:	e035      	b.n	1e00 <cbvprintf+0x744>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    1d94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    1d98:	681b      	ldr	r3, [r3, #0]
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	d01b      	beq.n	1dd6 <cbvprintf+0x71a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1d9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    1da2:	681b      	ldr	r3, [r3, #0]
    1da4:	4618      	mov	r0, r3
    1da6:	f04f 0100 	mov.w	r1, #0
    1daa:	697b      	ldr	r3, [r7, #20]
    1dac:	f107 0230 	add.w	r2, r7, #48	; 0x30
    1db0:	9300      	str	r3, [sp, #0]
    1db2:	4613      	mov	r3, r2
    1db4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
    1db8:	f00e fb1e 	bl	103f8 <encode_uint>
    1dbc:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
						  buf, bpe);

				/* Use 0x prefix */
				conv->altform_0c = true;
    1dc0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
    1dc4:	7893      	ldrb	r3, [r2, #2]
    1dc6:	f043 0310 	orr.w	r3, r3, #16
    1dca:	7093      	strb	r3, [r2, #2]
				conv->specifier = 'x';
    1dcc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1dd0:	2278      	movs	r2, #120	; 0x78
    1dd2:	70da      	strb	r2, [r3, #3]

				goto prec_int_pad0;
    1dd4:	e7c2      	b.n	1d5c <cbvprintf+0x6a0>
			}

			bps = "(nil)";
    1dd6:	4bab      	ldr	r3, [pc, #684]	; (2084 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x84>)
    1dd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			bpe = bps + 5;
    1ddc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
    1de0:	3305      	adds	r3, #5
    1de2:	617b      	str	r3, [r7, #20]

			break;
    1de4:	e00d      	b.n	1e02 <cbvprintf+0x746>
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    1de6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    1dea:	681b      	ldr	r3, [r3, #0]
    1dec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
    1df0:	4619      	mov	r1, r3
    1df2:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
    1df6:	f7ff fc11 	bl	161c <store_count>
			}

			break;
    1dfa:	e002      	b.n	1e02 <cbvprintf+0x746>
		default:
			/* Add an empty default with break, this is a defensive
			 * programming. Static analysis tool won't raise a violation
			 * if default is empty, but has that comment.
			 */
			break;
    1dfc:	bf00      	nop
    1dfe:	e000      	b.n	1e02 <cbvprintf+0x746>
			break;
    1e00:	bf00      	nop
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    1e02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
    1e06:	2b00      	cmp	r3, #0
    1e08:	f000 8130 	beq.w	206c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6c>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    1e0c:	697a      	ldr	r2, [r7, #20]
    1e0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
    1e12:	1ad3      	subs	r3, r2, r3
    1e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		int pad_len = 0;
    1e18:	2300      	movs	r3, #0
    1e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		if (sign != 0) {
    1e1e:	7cfb      	ldrb	r3, [r7, #19]
    1e20:	2b00      	cmp	r3, #0
    1e22:	d004      	beq.n	1e2e <cbvprintf+0x772>
			nj_len += 1U;
    1e24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    1e28:	3301      	adds	r3, #1
    1e2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		}

		if (conv->altform_0c) {
    1e2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1e32:	789b      	ldrb	r3, [r3, #2]
    1e34:	f003 0310 	and.w	r3, r3, #16
    1e38:	b2db      	uxtb	r3, r3
    1e3a:	2b00      	cmp	r3, #0
    1e3c:	d005      	beq.n	1e4a <cbvprintf+0x78e>
			nj_len += 2U;
    1e3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    1e42:	3302      	adds	r3, #2
    1e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    1e48:	e00c      	b.n	1e64 <cbvprintf+0x7a8>
		} else if (conv->altform_0) {
    1e4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1e4e:	789b      	ldrb	r3, [r3, #2]
    1e50:	f003 0308 	and.w	r3, r3, #8
    1e54:	b2db      	uxtb	r3, r3
    1e56:	2b00      	cmp	r3, #0
    1e58:	d004      	beq.n	1e64 <cbvprintf+0x7a8>
			nj_len += 1U;
    1e5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    1e5e:	3301      	adds	r3, #1
    1e60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		}

		nj_len += conv->pad0_value;
    1e64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1e68:	685b      	ldr	r3, [r3, #4]
    1e6a:	461a      	mov	r2, r3
    1e6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    1e70:	4413      	add	r3, r2
    1e72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		if (conv->pad_fp) {
    1e76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1e7a:	789b      	ldrb	r3, [r3, #2]
    1e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1e80:	b2db      	uxtb	r3, r3
    1e82:	2b00      	cmp	r3, #0
    1e84:	d008      	beq.n	1e98 <cbvprintf+0x7dc>
			nj_len += conv->pad0_pre_exp;
    1e86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1e8a:	689b      	ldr	r3, [r3, #8]
    1e8c:	461a      	mov	r2, r3
    1e8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    1e92:	4413      	add	r3, r2
    1e94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    1e98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    1e9c:	2b00      	cmp	r3, #0
    1e9e:	dd4e      	ble.n	1f3e <cbvprintf+0x882>
			width -= (int)nj_len;
    1ea0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    1ea4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
    1ea8:	1ad3      	subs	r3, r2, r3
    1eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

			if (!conv->flag_dash) {
    1eae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1eb2:	781b      	ldrb	r3, [r3, #0]
    1eb4:	f3c3 0380 	ubfx	r3, r3, #2, #1
    1eb8:	b2db      	uxtb	r3, r3
    1eba:	f083 0301 	eor.w	r3, r3, #1
    1ebe:	b2db      	uxtb	r3, r3
    1ec0:	2b00      	cmp	r3, #0
    1ec2:	d03c      	beq.n	1f3e <cbvprintf+0x882>
				char pad = ' ';
    1ec4:	2320      	movs	r3, #32
    1ec6:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    1eca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1ece:	781b      	ldrb	r3, [r3, #0]
    1ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1ed4:	b2db      	uxtb	r3, r3
    1ed6:	2b00      	cmp	r3, #0
    1ed8:	d02a      	beq.n	1f30 <cbvprintf+0x874>
					if (sign != 0) {
    1eda:	7cfb      	ldrb	r3, [r7, #19]
    1edc:	2b00      	cmp	r3, #0
    1ede:	d012      	beq.n	1f06 <cbvprintf+0x84a>
						OUTC(sign);
    1ee0:	7cfb      	ldrb	r3, [r7, #19]
    1ee2:	461a      	mov	r2, r3
    1ee4:	68fb      	ldr	r3, [r7, #12]
    1ee6:	68b9      	ldr	r1, [r7, #8]
    1ee8:	4610      	mov	r0, r2
    1eea:	4798      	blx	r3
    1eec:	66f8      	str	r0, [r7, #108]	; 0x6c
    1eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1ef0:	2b00      	cmp	r3, #0
    1ef2:	da01      	bge.n	1ef8 <cbvprintf+0x83c>
    1ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    1ef6:	e0c1      	b.n	207c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7c>
    1ef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    1efc:	3301      	adds	r3, #1
    1efe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						sign = 0;
    1f02:	2300      	movs	r3, #0
    1f04:	74fb      	strb	r3, [r7, #19]
					}
					pad = '0';
    1f06:	2330      	movs	r3, #48	; 0x30
    1f08:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
				}

				while (width-- > 0) {
    1f0c:	e010      	b.n	1f30 <cbvprintf+0x874>
					OUTC(pad);
    1f0e:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
    1f12:	68fb      	ldr	r3, [r7, #12]
    1f14:	68b9      	ldr	r1, [r7, #8]
    1f16:	4610      	mov	r0, r2
    1f18:	4798      	blx	r3
    1f1a:	66b8      	str	r0, [r7, #104]	; 0x68
    1f1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1f1e:	2b00      	cmp	r3, #0
    1f20:	da01      	bge.n	1f26 <cbvprintf+0x86a>
    1f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1f24:	e0aa      	b.n	207c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7c>
    1f26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    1f2a:	3301      	adds	r3, #1
    1f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				while (width-- > 0) {
    1f30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    1f34:	1e5a      	subs	r2, r3, #1
    1f36:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    1f3a:	2b00      	cmp	r3, #0
    1f3c:	dce7      	bgt.n	1f0e <cbvprintf+0x852>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1f3e:	7cfb      	ldrb	r3, [r7, #19]
    1f40:	2b00      	cmp	r3, #0
    1f42:	d010      	beq.n	1f66 <cbvprintf+0x8aa>
			OUTC(sign);
    1f44:	7cfb      	ldrb	r3, [r7, #19]
    1f46:	461a      	mov	r2, r3
    1f48:	68fb      	ldr	r3, [r7, #12]
    1f4a:	68b9      	ldr	r1, [r7, #8]
    1f4c:	4610      	mov	r0, r2
    1f4e:	4798      	blx	r3
    1f50:	6678      	str	r0, [r7, #100]	; 0x64
    1f52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1f54:	2b00      	cmp	r3, #0
    1f56:	da01      	bge.n	1f5c <cbvprintf+0x8a0>
    1f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1f5a:	e08f      	b.n	207c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7c>
    1f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    1f60:	3301      	adds	r3, #1
    1f62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    1f66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1f6a:	789b      	ldrb	r3, [r3, #2]
    1f6c:	f3c3 1300 	ubfx	r3, r3, #4, #1
    1f70:	b2da      	uxtb	r2, r3
    1f72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1f76:	789b      	ldrb	r3, [r3, #2]
    1f78:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1f7c:	b2db      	uxtb	r3, r3
    1f7e:	4313      	orrs	r3, r2
    1f80:	b2db      	uxtb	r3, r3
    1f82:	2b00      	cmp	r3, #0
    1f84:	d00e      	beq.n	1fa4 <cbvprintf+0x8e8>
				OUTC('0');
    1f86:	68fb      	ldr	r3, [r7, #12]
    1f88:	68b9      	ldr	r1, [r7, #8]
    1f8a:	2030      	movs	r0, #48	; 0x30
    1f8c:	4798      	blx	r3
    1f8e:	6638      	str	r0, [r7, #96]	; 0x60
    1f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    1f92:	2b00      	cmp	r3, #0
    1f94:	da01      	bge.n	1f9a <cbvprintf+0x8de>
    1f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    1f98:	e070      	b.n	207c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7c>
    1f9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    1f9e:	3301      	adds	r3, #1
    1fa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			}

			if (conv->altform_0c) {
    1fa4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1fa8:	789b      	ldrb	r3, [r3, #2]
    1faa:	f003 0310 	and.w	r3, r3, #16
    1fae:	b2db      	uxtb	r3, r3
    1fb0:	2b00      	cmp	r3, #0
    1fb2:	d012      	beq.n	1fda <cbvprintf+0x91e>
				OUTC(conv->specifier);
    1fb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1fb8:	78db      	ldrb	r3, [r3, #3]
    1fba:	461a      	mov	r2, r3
    1fbc:	68fb      	ldr	r3, [r7, #12]
    1fbe:	68b9      	ldr	r1, [r7, #8]
    1fc0:	4610      	mov	r0, r2
    1fc2:	4798      	blx	r3
    1fc4:	65f8      	str	r0, [r7, #92]	; 0x5c
    1fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1fc8:	2b00      	cmp	r3, #0
    1fca:	da01      	bge.n	1fd0 <cbvprintf+0x914>
    1fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1fce:	e055      	b.n	207c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7c>
    1fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    1fd4:	3301      	adds	r3, #1
    1fd6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			}

			pad_len = conv->pad0_value;
    1fda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    1fde:	685b      	ldr	r3, [r3, #4]
    1fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			while (pad_len-- > 0) {
    1fe4:	e00e      	b.n	2004 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4>
				OUTC('0');
    1fe6:	68fb      	ldr	r3, [r7, #12]
    1fe8:	68b9      	ldr	r1, [r7, #8]
    1fea:	2030      	movs	r0, #48	; 0x30
    1fec:	4798      	blx	r3
    1fee:	6538      	str	r0, [r7, #80]	; 0x50
    1ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1ff2:	2b00      	cmp	r3, #0
    1ff4:	da01      	bge.n	1ffa <cbvprintf+0x93e>
    1ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1ff8:	e040      	b.n	207c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7c>
    1ffa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    1ffe:	3301      	adds	r3, #1
    2000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			while (pad_len-- > 0) {
    2004:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
    2008:	1e5a      	subs	r2, r3, #1
    200a:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    200e:	2b00      	cmp	r3, #0
    2010:	dce9      	bgt.n	1fe6 <cbvprintf+0x92a>
			}

			OUTS(bps, bpe);
    2012:	697b      	ldr	r3, [r7, #20]
    2014:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
    2018:	68b9      	ldr	r1, [r7, #8]
    201a:	68f8      	ldr	r0, [r7, #12]
    201c:	f00e fa5a 	bl	104d4 <outs>
    2020:	65b8      	str	r0, [r7, #88]	; 0x58
    2022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    2024:	2b00      	cmp	r3, #0
    2026:	da01      	bge.n	202c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2c>
    2028:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    202a:	e027      	b.n	207c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7c>
    202c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    202e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
    2032:	4413      	add	r3, r2
    2034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		}

		/* Finish left justification */
		while (width > 0) {
    2038:	e013      	b.n	2062 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x62>
			OUTC(' ');
    203a:	68fb      	ldr	r3, [r7, #12]
    203c:	68b9      	ldr	r1, [r7, #8]
    203e:	2020      	movs	r0, #32
    2040:	4798      	blx	r3
    2042:	6578      	str	r0, [r7, #84]	; 0x54
    2044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2046:	2b00      	cmp	r3, #0
    2048:	da01      	bge.n	204e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4e>
    204a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    204c:	e016      	b.n	207c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7c>
    204e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    2052:	3301      	adds	r3, #1
    2054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			--width;
    2058:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    205c:	3b01      	subs	r3, #1
    205e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		while (width > 0) {
    2062:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    2066:	2b00      	cmp	r3, #0
    2068:	dce7      	bgt.n	203a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3a>
    206a:	e000      	b.n	206e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6e>
			continue;
    206c:	bf00      	nop
	while (*fp != 0) {
    206e:	687b      	ldr	r3, [r7, #4]
    2070:	781b      	ldrb	r3, [r3, #0]
    2072:	2b00      	cmp	r3, #0
    2074:	f47f ab2e 	bne.w	16d4 <cbvprintf+0x18>
		}
	}

	return count;
    2078:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
#undef OUTS
#undef OUTC
}
    207c:	4618      	mov	r0, r3
    207e:	37b8      	adds	r7, #184	; 0xb8
    2080:	46bd      	mov	sp, r7
    2082:	bd80      	pop	{r7, pc}
    2084:	0001751c 	.word	0x0001751c

00002088 <nrfx_coredep_delay_us>:
}

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    2088:	b580      	push	{r7, lr}
    208a:	b084      	sub	sp, #16
    208c:	af00      	add	r7, sp, #0
    208e:	6078      	str	r0, [r7, #4]
    if (time_us == 0)
    2090:	687b      	ldr	r3, [r7, #4]
    2092:	2b00      	cmp	r3, #0
    2094:	d00a      	beq.n	20ac <nrfx_coredep_delay_us+0x24>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2096:	4b07      	ldr	r3, [pc, #28]	; (20b4 <nrfx_coredep_delay_us+0x2c>)
    2098:	f043 0301 	orr.w	r3, r3, #1
    const delay_func_t delay_cycles =
    209c:	60fb      	str	r3, [r7, #12]
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    209e:	687b      	ldr	r3, [r7, #4]
    20a0:	019b      	lsls	r3, r3, #6
    20a2:	60bb      	str	r3, [r7, #8]
    delay_cycles(cycles);
    20a4:	68fb      	ldr	r3, [r7, #12]
    20a6:	68b8      	ldr	r0, [r7, #8]
    20a8:	4798      	blx	r3
    20aa:	e000      	b.n	20ae <nrfx_coredep_delay_us+0x26>
        return;
    20ac:	bf00      	nop
}
    20ae:	3710      	adds	r7, #16
    20b0:	46bd      	mov	sp, r7
    20b2:	bd80      	pop	{r7, pc}
    20b4:	0001aa60 	.word	0x0001aa60

000020b8 <nordicsemi_nrf91_init>:

#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf91_init(const struct device *arg)
{
    20b8:	b480      	push	{r7}
    20ba:	b087      	sub	sp, #28
    20bc:	af00      	add	r7, sp, #0
    20be:	6078      	str	r0, [r7, #4]
	__asm__ volatile(
    20c0:	f04f 0320 	mov.w	r3, #32
    20c4:	f3ef 8211 	mrs	r2, BASEPRI
    20c8:	f383 8811 	msr	BASEPRI, r3
    20cc:	f3bf 8f6f 	isb	sy
    20d0:	60fa      	str	r2, [r7, #12]
    20d2:	60bb      	str	r3, [r7, #8]
	return key;
    20d4:	68fb      	ldr	r3, [r7, #12]
	uint32_t key;

	ARG_UNUSED(arg);

	key = irq_lock();
    20d6:	617b      	str	r3, [r7, #20]

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    20d8:	4b08      	ldr	r3, [pc, #32]	; (20fc <nordicsemi_nrf91_init+0x44>)
    20da:	2201      	movs	r2, #1
    20dc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    20e0:	697b      	ldr	r3, [r7, #20]
    20e2:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
    20e4:	693b      	ldr	r3, [r7, #16]
    20e6:	f383 8811 	msr	BASEPRI, r3
    20ea:	f3bf 8f6f 	isb	sy
}
    20ee:	bf00      	nop
	*/
	NMI_INIT();

	irq_unlock(key);

	return 0;
    20f0:	2300      	movs	r3, #0
}
    20f2:	4618      	mov	r0, r3
    20f4:	371c      	adds	r7, #28
    20f6:	46bd      	mov	sp, r7
    20f8:	bc80      	pop	{r7}
    20fa:	4770      	bx	lr
    20fc:	50039000 	.word	0x50039000

00002100 <log_const_source_id>:
{
    2100:	b480      	push	{r7}
    2102:	b083      	sub	sp, #12
    2104:	af00      	add	r7, sp, #0
    2106:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    2108:	687b      	ldr	r3, [r7, #4]
    210a:	4a04      	ldr	r2, [pc, #16]	; (211c <log_const_source_id+0x1c>)
    210c:	1a9b      	subs	r3, r3, r2
    210e:	08db      	lsrs	r3, r3, #3
}
    2110:	4618      	mov	r0, r3
    2112:	370c      	adds	r7, #12
    2114:	46bd      	mov	sp, r7
    2116:	bc80      	pop	{r7}
    2118:	4770      	bx	lr
    211a:	bf00      	nop
    211c:	000170bc 	.word	0x000170bc

00002120 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    2120:	b580      	push	{r7, lr}
    2122:	b088      	sub	sp, #32
    2124:	af00      	add	r7, sp, #0
    2126:	1d3b      	adds	r3, r7, #4
    2128:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	switch (info.state) {
    212c:	793b      	ldrb	r3, [r7, #4]
    212e:	2b06      	cmp	r3, #6
    2130:	d103      	bne.n	213a <pm_power_state_set+0x1a>
	case PM_STATE_SOFT_OFF:
		nrf_regulators_system_off(NRF_REGULATORS);
    2132:	4821      	ldr	r0, [pc, #132]	; (21b8 <pm_power_state_set+0x98>)
    2134:	f00e fa22 	bl	1057c <nrf_regulators_system_off>
		break;
    2138:	e03a      	b.n	21b0 <pm_power_state_set+0x90>
	default:
		LOG_DBG("Unsupported power state %u", info.state);
    213a:	2303      	movs	r3, #3
    213c:	2b03      	cmp	r3, #3
    213e:	d801      	bhi.n	2144 <pm_power_state_set+0x24>
    2140:	bf00      	nop
		break;
    2142:	e034      	b.n	21ae <pm_power_state_set+0x8e>
		LOG_DBG("Unsupported power state %u", info.state);
    2144:	f00e fa13 	bl	1056e <k_is_user_context>
    2148:	4603      	mov	r3, r0
    214a:	77fb      	strb	r3, [r7, #31]
    214c:	2300      	movs	r3, #0
    214e:	61bb      	str	r3, [r7, #24]
    2150:	2303      	movs	r3, #3
    2152:	2b00      	cmp	r3, #0
    2154:	d007      	beq.n	2166 <pm_power_state_set+0x46>
    2156:	4b19      	ldr	r3, [pc, #100]	; (21bc <pm_power_state_set+0x9c>)
    2158:	681b      	ldr	r3, [r3, #0]
    215a:	4618      	mov	r0, r3
    215c:	f7ff ffd0 	bl	2100 <log_const_source_id>
    2160:	4603      	mov	r3, r0
    2162:	b29b      	uxth	r3, r3
    2164:	e000      	b.n	2168 <pm_power_state_set+0x48>
    2166:	2300      	movs	r3, #0
    2168:	83bb      	strh	r3, [r7, #28]
    216a:	7d3b      	ldrb	r3, [r7, #20]
    216c:	2204      	movs	r2, #4
    216e:	f362 0302 	bfi	r3, r2, #0, #3
    2172:	753b      	strb	r3, [r7, #20]
    2174:	7d3b      	ldrb	r3, [r7, #20]
    2176:	f36f 03c5 	bfc	r3, #3, #3
    217a:	753b      	strb	r3, [r7, #20]
    217c:	8bbb      	ldrh	r3, [r7, #28]
    217e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2182:	b29a      	uxth	r2, r3
    2184:	8abb      	ldrh	r3, [r7, #20]
    2186:	f362 138f 	bfi	r3, r2, #6, #10
    218a:	82bb      	strh	r3, [r7, #20]
    218c:	7ffb      	ldrb	r3, [r7, #31]
    218e:	2b00      	cmp	r3, #0
    2190:	d006      	beq.n	21a0 <pm_power_state_set+0x80>
    2192:	793b      	ldrb	r3, [r7, #4]
    2194:	4a0a      	ldr	r2, [pc, #40]	; (21c0 <pm_power_state_set+0xa0>)
    2196:	490b      	ldr	r1, [pc, #44]	; (21c4 <pm_power_state_set+0xa4>)
    2198:	8ab8      	ldrh	r0, [r7, #20]
    219a:	f000 fd6f 	bl	2c7c <log_from_user>
		break;
    219e:	e006      	b.n	21ae <pm_power_state_set+0x8e>
		LOG_DBG("Unsupported power state %u", info.state);
    21a0:	4907      	ldr	r1, [pc, #28]	; (21c0 <pm_power_state_set+0xa0>)
    21a2:	793b      	ldrb	r3, [r7, #4]
    21a4:	461a      	mov	r2, r3
    21a6:	8abb      	ldrh	r3, [r7, #20]
    21a8:	4806      	ldr	r0, [pc, #24]	; (21c4 <pm_power_state_set+0xa4>)
    21aa:	f00e fe8c 	bl	10ec6 <log_2>
		break;
    21ae:	bf00      	nop
	}
}
    21b0:	bf00      	nop
    21b2:	3720      	adds	r7, #32
    21b4:	46bd      	mov	sp, r7
    21b6:	bd80      	pop	{r7, pc}
    21b8:	50004000 	.word	0x50004000
    21bc:	200000d0 	.word	0x200000d0
    21c0:	0001aa68 	.word	0x0001aa68
    21c4:	00017528 	.word	0x00017528

000021c8 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    21c8:	b580      	push	{r7, lr}
    21ca:	b088      	sub	sp, #32
    21cc:	af00      	add	r7, sp, #0
    21ce:	1d3b      	adds	r3, r7, #4
    21d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	switch (info.state) {
    21d4:	793b      	ldrb	r3, [r7, #4]
    21d6:	2b06      	cmp	r3, #6
    21d8:	d03a      	beq.n	2250 <pm_power_state_exit_post_ops+0x88>
	case PM_STATE_SOFT_OFF:
		/* Nothing to do. */
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
    21da:	2303      	movs	r3, #3
    21dc:	2b03      	cmp	r3, #3
    21de:	d801      	bhi.n	21e4 <pm_power_state_exit_post_ops+0x1c>
    21e0:	bf00      	nop
		break;
    21e2:	e036      	b.n	2252 <pm_power_state_exit_post_ops+0x8a>
		LOG_DBG("Unsupported power state %u", info.state);
    21e4:	f00e f9c3 	bl	1056e <k_is_user_context>
    21e8:	4603      	mov	r3, r0
    21ea:	77fb      	strb	r3, [r7, #31]
    21ec:	2300      	movs	r3, #0
    21ee:	617b      	str	r3, [r7, #20]
    21f0:	2303      	movs	r3, #3
    21f2:	2b00      	cmp	r3, #0
    21f4:	d007      	beq.n	2206 <pm_power_state_exit_post_ops+0x3e>
    21f6:	4b1d      	ldr	r3, [pc, #116]	; (226c <pm_power_state_exit_post_ops+0xa4>)
    21f8:	681b      	ldr	r3, [r3, #0]
    21fa:	4618      	mov	r0, r3
    21fc:	f7ff ff80 	bl	2100 <log_const_source_id>
    2200:	4603      	mov	r3, r0
    2202:	b29b      	uxth	r3, r3
    2204:	e000      	b.n	2208 <pm_power_state_exit_post_ops+0x40>
    2206:	2300      	movs	r3, #0
    2208:	83bb      	strh	r3, [r7, #28]
    220a:	7c3b      	ldrb	r3, [r7, #16]
    220c:	2204      	movs	r2, #4
    220e:	f362 0302 	bfi	r3, r2, #0, #3
    2212:	743b      	strb	r3, [r7, #16]
    2214:	7c3b      	ldrb	r3, [r7, #16]
    2216:	f36f 03c5 	bfc	r3, #3, #3
    221a:	743b      	strb	r3, [r7, #16]
    221c:	8bbb      	ldrh	r3, [r7, #28]
    221e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    2222:	b29a      	uxth	r2, r3
    2224:	8a3b      	ldrh	r3, [r7, #16]
    2226:	f362 138f 	bfi	r3, r2, #6, #10
    222a:	823b      	strh	r3, [r7, #16]
    222c:	7ffb      	ldrb	r3, [r7, #31]
    222e:	2b00      	cmp	r3, #0
    2230:	d006      	beq.n	2240 <pm_power_state_exit_post_ops+0x78>
    2232:	793b      	ldrb	r3, [r7, #4]
    2234:	4a0e      	ldr	r2, [pc, #56]	; (2270 <pm_power_state_exit_post_ops+0xa8>)
    2236:	490f      	ldr	r1, [pc, #60]	; (2274 <pm_power_state_exit_post_ops+0xac>)
    2238:	8a38      	ldrh	r0, [r7, #16]
    223a:	f000 fd1f 	bl	2c7c <log_from_user>
		break;
    223e:	e008      	b.n	2252 <pm_power_state_exit_post_ops+0x8a>
		LOG_DBG("Unsupported power state %u", info.state);
    2240:	490b      	ldr	r1, [pc, #44]	; (2270 <pm_power_state_exit_post_ops+0xa8>)
    2242:	793b      	ldrb	r3, [r7, #4]
    2244:	461a      	mov	r2, r3
    2246:	8a3b      	ldrh	r3, [r7, #16]
    2248:	480a      	ldr	r0, [pc, #40]	; (2274 <pm_power_state_exit_post_ops+0xac>)
    224a:	f00e fe3c 	bl	10ec6 <log_2>
		break;
    224e:	e000      	b.n	2252 <pm_power_state_exit_post_ops+0x8a>
		break;
    2250:	bf00      	nop
    2252:	2300      	movs	r3, #0
    2254:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
    2256:	69bb      	ldr	r3, [r7, #24]
    2258:	f383 8811 	msr	BASEPRI, r3
    225c:	f3bf 8f6f 	isb	sy
}
    2260:	bf00      	nop
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    2262:	bf00      	nop
    2264:	3720      	adds	r7, #32
    2266:	46bd      	mov	sp, r7
    2268:	bd80      	pop	{r7, pc}
    226a:	bf00      	nop
    226c:	200000d0 	.word	0x200000d0
    2270:	0001aa7c 	.word	0x0001aa7c
    2274:	00017528 	.word	0x00017528

00002278 <log_name_get>:
{
    2278:	b480      	push	{r7}
    227a:	b083      	sub	sp, #12
    227c:	af00      	add	r7, sp, #0
    227e:	6078      	str	r0, [r7, #4]
	return __log_const_start[source_id].name;
    2280:	4a04      	ldr	r2, [pc, #16]	; (2294 <log_name_get+0x1c>)
    2282:	687b      	ldr	r3, [r7, #4]
    2284:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
}
    2288:	4618      	mov	r0, r3
    228a:	370c      	adds	r7, #12
    228c:	46bd      	mov	sp, r7
    228e:	bc80      	pop	{r7}
    2290:	4770      	bx	lr
    2292:	bf00      	nop
    2294:	000170bc 	.word	0x000170bc

00002298 <log_const_source_id>:
{
    2298:	b480      	push	{r7}
    229a:	b083      	sub	sp, #12
    229c:	af00      	add	r7, sp, #0
    229e:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	4a04      	ldr	r2, [pc, #16]	; (22b4 <log_const_source_id+0x1c>)
    22a4:	1a9b      	subs	r3, r3, r2
    22a6:	08db      	lsrs	r3, r3, #3
}
    22a8:	4618      	mov	r0, r3
    22aa:	370c      	adds	r7, #12
    22ac:	46bd      	mov	sp, r7
    22ae:	bc80      	pop	{r7}
    22b0:	4770      	bx	lr
    22b2:	bf00      	nop
    22b4:	000170bc 	.word	0x000170bc

000022b8 <log_sources_count>:

/** @brief Get number of registered sources. */
static inline uint32_t log_sources_count(void)
{
    22b8:	b580      	push	{r7, lr}
    22ba:	af00      	add	r7, sp, #0
	return log_const_source_id(__log_const_end);
    22bc:	4802      	ldr	r0, [pc, #8]	; (22c8 <log_sources_count+0x10>)
    22be:	f7ff ffeb 	bl	2298 <log_const_source_id>
    22c2:	4603      	mov	r3, r0
}
    22c4:	4618      	mov	r0, r3
    22c6:	bd80      	pop	{r7, pc}
    22c8:	000170fc 	.word	0x000170fc

000022cc <log_backend_put>:
 * @param[in] backend  Pointer to the backend instance.
 * @param[in] msg      Pointer to message with log entry.
 */
static inline void log_backend_put(const struct log_backend *const backend,
				   struct log_msg *msg)
{
    22cc:	b580      	push	{r7, lr}
    22ce:	b082      	sub	sp, #8
    22d0:	af00      	add	r7, sp, #0
    22d2:	6078      	str	r0, [r7, #4]
    22d4:	6039      	str	r1, [r7, #0]
	__ASSERT_NO_MSG(backend != NULL);
    22d6:	687b      	ldr	r3, [r7, #4]
    22d8:	2b00      	cmp	r3, #0
    22da:	d109      	bne.n	22f0 <log_backend_put+0x24>
    22dc:	236b      	movs	r3, #107	; 0x6b
    22de:	4a10      	ldr	r2, [pc, #64]	; (2320 <log_backend_put+0x54>)
    22e0:	4910      	ldr	r1, [pc, #64]	; (2324 <log_backend_put+0x58>)
    22e2:	4811      	ldr	r0, [pc, #68]	; (2328 <log_backend_put+0x5c>)
    22e4:	f00d fcc6 	bl	fc74 <printk>
    22e8:	216b      	movs	r1, #107	; 0x6b
    22ea:	480d      	ldr	r0, [pc, #52]	; (2320 <log_backend_put+0x54>)
    22ec:	f00e f91e 	bl	1052c <assert_post_action>
	__ASSERT_NO_MSG(msg != NULL);
    22f0:	683b      	ldr	r3, [r7, #0]
    22f2:	2b00      	cmp	r3, #0
    22f4:	d109      	bne.n	230a <log_backend_put+0x3e>
    22f6:	236c      	movs	r3, #108	; 0x6c
    22f8:	4a09      	ldr	r2, [pc, #36]	; (2320 <log_backend_put+0x54>)
    22fa:	490c      	ldr	r1, [pc, #48]	; (232c <log_backend_put+0x60>)
    22fc:	480a      	ldr	r0, [pc, #40]	; (2328 <log_backend_put+0x5c>)
    22fe:	f00d fcb9 	bl	fc74 <printk>
    2302:	216c      	movs	r1, #108	; 0x6c
    2304:	4806      	ldr	r0, [pc, #24]	; (2320 <log_backend_put+0x54>)
    2306:	f00e f911 	bl	1052c <assert_post_action>
	backend->api->put(backend, msg);
    230a:	687b      	ldr	r3, [r7, #4]
    230c:	681b      	ldr	r3, [r3, #0]
    230e:	685b      	ldr	r3, [r3, #4]
    2310:	6839      	ldr	r1, [r7, #0]
    2312:	6878      	ldr	r0, [r7, #4]
    2314:	4798      	blx	r3
}
    2316:	bf00      	nop
    2318:	3708      	adds	r7, #8
    231a:	46bd      	mov	sp, r7
    231c:	bd80      	pop	{r7, pc}
    231e:	bf00      	nop
    2320:	00017548 	.word	0x00017548
    2324:	0001757c 	.word	0x0001757c
    2328:	00017594 	.word	0x00017594
    232c:	000175b4 	.word	0x000175b4

00002330 <log_backend_dropped>:
 * @param[in] backend  Pointer to the backend instance.
 * @param[in] cnt      Number of dropped logs since last notification.
 */
static inline void log_backend_dropped(const struct log_backend *const backend,
				       uint32_t cnt)
{
    2330:	b580      	push	{r7, lr}
    2332:	b082      	sub	sp, #8
    2334:	af00      	add	r7, sp, #0
    2336:	6078      	str	r0, [r7, #4]
    2338:	6039      	str	r1, [r7, #0]
	__ASSERT_NO_MSG(backend != NULL);
    233a:	687b      	ldr	r3, [r7, #4]
    233c:	2b00      	cmp	r3, #0
    233e:	d109      	bne.n	2354 <log_backend_dropped+0x24>
    2340:	23b4      	movs	r3, #180	; 0xb4
    2342:	4a0c      	ldr	r2, [pc, #48]	; (2374 <log_backend_dropped+0x44>)
    2344:	490c      	ldr	r1, [pc, #48]	; (2378 <log_backend_dropped+0x48>)
    2346:	480d      	ldr	r0, [pc, #52]	; (237c <log_backend_dropped+0x4c>)
    2348:	f00d fc94 	bl	fc74 <printk>
    234c:	21b4      	movs	r1, #180	; 0xb4
    234e:	4809      	ldr	r0, [pc, #36]	; (2374 <log_backend_dropped+0x44>)
    2350:	f00e f8ec 	bl	1052c <assert_post_action>

	if (backend->api->dropped != NULL) {
    2354:	687b      	ldr	r3, [r7, #4]
    2356:	681b      	ldr	r3, [r3, #0]
    2358:	691b      	ldr	r3, [r3, #16]
    235a:	2b00      	cmp	r3, #0
    235c:	d005      	beq.n	236a <log_backend_dropped+0x3a>
		backend->api->dropped(backend, cnt);
    235e:	687b      	ldr	r3, [r7, #4]
    2360:	681b      	ldr	r3, [r3, #0]
    2362:	691b      	ldr	r3, [r3, #16]
    2364:	6839      	ldr	r1, [r7, #0]
    2366:	6878      	ldr	r0, [r7, #4]
    2368:	4798      	blx	r3
	}
}
    236a:	bf00      	nop
    236c:	3708      	adds	r7, #8
    236e:	46bd      	mov	sp, r7
    2370:	bd80      	pop	{r7, pc}
    2372:	bf00      	nop
    2374:	00017548 	.word	0x00017548
    2378:	0001757c 	.word	0x0001757c
    237c:	00017594 	.word	0x00017594

00002380 <log_backend_panic>:
 * @brief Reconfigure backend to panic mode.
 *
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_panic(const struct log_backend *const backend)
{
    2380:	b580      	push	{r7, lr}
    2382:	b082      	sub	sp, #8
    2384:	af00      	add	r7, sp, #0
    2386:	6078      	str	r0, [r7, #4]
	__ASSERT_NO_MSG(backend != NULL);
    2388:	687b      	ldr	r3, [r7, #4]
    238a:	2b00      	cmp	r3, #0
    238c:	d109      	bne.n	23a2 <log_backend_panic+0x22>
    238e:	23c2      	movs	r3, #194	; 0xc2
    2390:	4a08      	ldr	r2, [pc, #32]	; (23b4 <log_backend_panic+0x34>)
    2392:	4909      	ldr	r1, [pc, #36]	; (23b8 <log_backend_panic+0x38>)
    2394:	4809      	ldr	r0, [pc, #36]	; (23bc <log_backend_panic+0x3c>)
    2396:	f00d fc6d 	bl	fc74 <printk>
    239a:	21c2      	movs	r1, #194	; 0xc2
    239c:	4805      	ldr	r0, [pc, #20]	; (23b4 <log_backend_panic+0x34>)
    239e:	f00e f8c5 	bl	1052c <assert_post_action>
	backend->api->panic(backend);
    23a2:	687b      	ldr	r3, [r7, #4]
    23a4:	681b      	ldr	r3, [r3, #0]
    23a6:	695b      	ldr	r3, [r3, #20]
    23a8:	6878      	ldr	r0, [r7, #4]
    23aa:	4798      	blx	r3
}
    23ac:	bf00      	nop
    23ae:	3708      	adds	r7, #8
    23b0:	46bd      	mov	sp, r7
    23b2:	bd80      	pop	{r7, pc}
    23b4:	00017548 	.word	0x00017548
    23b8:	0001757c 	.word	0x0001757c
    23bc:	00017594 	.word	0x00017594

000023c0 <log_backend_id_set>:
 * @param backend  Pointer to the backend instance.
 * @param id       ID.
 */
static inline void log_backend_id_set(const struct log_backend *const backend,
				      uint8_t id)
{
    23c0:	b580      	push	{r7, lr}
    23c2:	b082      	sub	sp, #8
    23c4:	af00      	add	r7, sp, #0
    23c6:	6078      	str	r0, [r7, #4]
    23c8:	460b      	mov	r3, r1
    23ca:	70fb      	strb	r3, [r7, #3]
	__ASSERT_NO_MSG(backend != NULL);
    23cc:	687b      	ldr	r3, [r7, #4]
    23ce:	2b00      	cmp	r3, #0
    23d0:	d109      	bne.n	23e6 <log_backend_id_set+0x26>
    23d2:	23d1      	movs	r3, #209	; 0xd1
    23d4:	4a08      	ldr	r2, [pc, #32]	; (23f8 <log_backend_id_set+0x38>)
    23d6:	4909      	ldr	r1, [pc, #36]	; (23fc <log_backend_id_set+0x3c>)
    23d8:	4809      	ldr	r0, [pc, #36]	; (2400 <log_backend_id_set+0x40>)
    23da:	f00d fc4b 	bl	fc74 <printk>
    23de:	21d1      	movs	r1, #209	; 0xd1
    23e0:	4805      	ldr	r0, [pc, #20]	; (23f8 <log_backend_id_set+0x38>)
    23e2:	f00e f8a3 	bl	1052c <assert_post_action>
	backend->cb->id = id;
    23e6:	687b      	ldr	r3, [r7, #4]
    23e8:	685b      	ldr	r3, [r3, #4]
    23ea:	78fa      	ldrb	r2, [r7, #3]
    23ec:	711a      	strb	r2, [r3, #4]
}
    23ee:	bf00      	nop
    23f0:	3708      	adds	r7, #8
    23f2:	46bd      	mov	sp, r7
    23f4:	bd80      	pop	{r7, pc}
    23f6:	bf00      	nop
    23f8:	00017548 	.word	0x00017548
    23fc:	0001757c 	.word	0x0001757c
    2400:	00017594 	.word	0x00017594

00002404 <log_backend_get>:
 * @param[in] idx  Pointer to the backend instance.
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
    2404:	b480      	push	{r7}
    2406:	b083      	sub	sp, #12
    2408:	af00      	add	r7, sp, #0
    240a:	6078      	str	r0, [r7, #4]
	return &__log_backends_start[idx];
    240c:	687b      	ldr	r3, [r7, #4]
    240e:	011b      	lsls	r3, r3, #4
    2410:	4a03      	ldr	r2, [pc, #12]	; (2420 <log_backend_get+0x1c>)
    2412:	4413      	add	r3, r2
}
    2414:	4618      	mov	r0, r3
    2416:	370c      	adds	r7, #12
    2418:	46bd      	mov	sp, r7
    241a:	bc80      	pop	{r7}
    241c:	4770      	bx	lr
    241e:	bf00      	nop
    2420:	000170fc 	.word	0x000170fc

00002424 <log_backend_count_get>:
 * @brief Get number of backends.
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
    2424:	b480      	push	{r7}
    2426:	af00      	add	r7, sp, #0
	return __log_backends_end - __log_backends_start;
    2428:	4a03      	ldr	r2, [pc, #12]	; (2438 <log_backend_count_get+0x14>)
    242a:	4b04      	ldr	r3, [pc, #16]	; (243c <log_backend_count_get+0x18>)
    242c:	1ad3      	subs	r3, r2, r3
    242e:	111b      	asrs	r3, r3, #4
}
    2430:	4618      	mov	r0, r3
    2432:	46bd      	mov	sp, r7
    2434:	bc80      	pop	{r7}
    2436:	4770      	bx	lr
    2438:	0001710c 	.word	0x0001710c
    243c:	000170fc 	.word	0x000170fc

00002440 <log_backend_activate>:
 * @param[in] backend  Pointer to the backend instance.
 * @param[in] ctx      User context.
 */
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
    2440:	b580      	push	{r7, lr}
    2442:	b082      	sub	sp, #8
    2444:	af00      	add	r7, sp, #0
    2446:	6078      	str	r0, [r7, #4]
    2448:	6039      	str	r1, [r7, #0]
	__ASSERT_NO_MSG(backend != NULL);
    244a:	687b      	ldr	r3, [r7, #4]
    244c:	2b00      	cmp	r3, #0
    244e:	d10b      	bne.n	2468 <log_backend_activate+0x28>
    2450:	f44f 7381 	mov.w	r3, #258	; 0x102
    2454:	4a0a      	ldr	r2, [pc, #40]	; (2480 <log_backend_activate+0x40>)
    2456:	490b      	ldr	r1, [pc, #44]	; (2484 <log_backend_activate+0x44>)
    2458:	480b      	ldr	r0, [pc, #44]	; (2488 <log_backend_activate+0x48>)
    245a:	f00d fc0b 	bl	fc74 <printk>
    245e:	f44f 7181 	mov.w	r1, #258	; 0x102
    2462:	4807      	ldr	r0, [pc, #28]	; (2480 <log_backend_activate+0x40>)
    2464:	f00e f862 	bl	1052c <assert_post_action>
	backend->cb->ctx = ctx;
    2468:	687b      	ldr	r3, [r7, #4]
    246a:	685b      	ldr	r3, [r3, #4]
    246c:	683a      	ldr	r2, [r7, #0]
    246e:	601a      	str	r2, [r3, #0]
	backend->cb->active = true;
    2470:	687b      	ldr	r3, [r7, #4]
    2472:	685b      	ldr	r3, [r3, #4]
    2474:	2201      	movs	r2, #1
    2476:	715a      	strb	r2, [r3, #5]
}
    2478:	bf00      	nop
    247a:	3708      	adds	r7, #8
    247c:	46bd      	mov	sp, r7
    247e:	bd80      	pop	{r7, pc}
    2480:	00017548 	.word	0x00017548
    2484:	0001757c 	.word	0x0001757c
    2488:	00017594 	.word	0x00017594

0000248c <log_backend_is_active>:
 *
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
    248c:	b580      	push	{r7, lr}
    248e:	b082      	sub	sp, #8
    2490:	af00      	add	r7, sp, #0
    2492:	6078      	str	r0, [r7, #4]
	__ASSERT_NO_MSG(backend != NULL);
    2494:	687b      	ldr	r3, [r7, #4]
    2496:	2b00      	cmp	r3, #0
    2498:	d10b      	bne.n	24b2 <log_backend_is_active+0x26>
    249a:	f240 131d 	movw	r3, #285	; 0x11d
    249e:	4a08      	ldr	r2, [pc, #32]	; (24c0 <log_backend_is_active+0x34>)
    24a0:	4908      	ldr	r1, [pc, #32]	; (24c4 <log_backend_is_active+0x38>)
    24a2:	4809      	ldr	r0, [pc, #36]	; (24c8 <log_backend_is_active+0x3c>)
    24a4:	f00d fbe6 	bl	fc74 <printk>
    24a8:	f240 111d 	movw	r1, #285	; 0x11d
    24ac:	4804      	ldr	r0, [pc, #16]	; (24c0 <log_backend_is_active+0x34>)
    24ae:	f00e f83d 	bl	1052c <assert_post_action>
	return backend->cb->active;
    24b2:	687b      	ldr	r3, [r7, #4]
    24b4:	685b      	ldr	r3, [r3, #4]
    24b6:	795b      	ldrb	r3, [r3, #5]
}
    24b8:	4618      	mov	r0, r3
    24ba:	3708      	adds	r7, #8
    24bc:	46bd      	mov	sp, r7
    24be:	bd80      	pop	{r7, pc}
    24c0:	00017548 	.word	0x00017548
    24c4:	0001757c 	.word	0x0001757c
    24c8:	00017594 	.word	0x00017594

000024cc <z_log_get_s_mask>:
{
	return 0;
}

uint32_t z_log_get_s_mask(const char *str, uint32_t nargs)
{
    24cc:	b580      	push	{r7, lr}
    24ce:	b086      	sub	sp, #24
    24d0:	af00      	add	r7, sp, #0
    24d2:	6078      	str	r0, [r7, #4]
    24d4:	6039      	str	r1, [r7, #0]
	char curr;
	bool arm = false;
    24d6:	2300      	movs	r3, #0
    24d8:	75fb      	strb	r3, [r7, #23]
	uint32_t arg = 0U;
    24da:	2300      	movs	r3, #0
    24dc:	613b      	str	r3, [r7, #16]
	uint32_t mask = 0U;
    24de:	2300      	movs	r3, #0
    24e0:	60fb      	str	r3, [r7, #12]

	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
    24e2:	683b      	ldr	r3, [r7, #0]
    24e4:	2b20      	cmp	r3, #32
    24e6:	d935      	bls.n	2554 <z_log_get_s_mask+0x88>
    24e8:	2380      	movs	r3, #128	; 0x80
    24ea:	4a23      	ldr	r2, [pc, #140]	; (2578 <z_log_get_s_mask+0xac>)
    24ec:	4923      	ldr	r1, [pc, #140]	; (257c <z_log_get_s_mask+0xb0>)
    24ee:	4824      	ldr	r0, [pc, #144]	; (2580 <z_log_get_s_mask+0xb4>)
    24f0:	f00d fbc0 	bl	fc74 <printk>
    24f4:	2180      	movs	r1, #128	; 0x80
    24f6:	4820      	ldr	r0, [pc, #128]	; (2578 <z_log_get_s_mask+0xac>)
    24f8:	f00e f818 	bl	1052c <assert_post_action>

	while ((curr = *str++) && arg < nargs) {
    24fc:	e02a      	b.n	2554 <z_log_get_s_mask+0x88>
		if (curr == '%') {
    24fe:	7afb      	ldrb	r3, [r7, #11]
    2500:	2b25      	cmp	r3, #37	; 0x25
    2502:	d10e      	bne.n	2522 <z_log_get_s_mask+0x56>
			arm = !arm;
    2504:	7dfb      	ldrb	r3, [r7, #23]
    2506:	2b00      	cmp	r3, #0
    2508:	bf14      	ite	ne
    250a:	2301      	movne	r3, #1
    250c:	2300      	moveq	r3, #0
    250e:	b2db      	uxtb	r3, r3
    2510:	f083 0301 	eor.w	r3, r3, #1
    2514:	b2db      	uxtb	r3, r3
    2516:	75fb      	strb	r3, [r7, #23]
    2518:	7dfb      	ldrb	r3, [r7, #23]
    251a:	f003 0301 	and.w	r3, r3, #1
    251e:	75fb      	strb	r3, [r7, #23]
    2520:	e018      	b.n	2554 <z_log_get_s_mask+0x88>
		} else if (arm && isalpha((int)curr)) {
    2522:	7dfb      	ldrb	r3, [r7, #23]
    2524:	2b00      	cmp	r3, #0
    2526:	d015      	beq.n	2554 <z_log_get_s_mask+0x88>
    2528:	7afb      	ldrb	r3, [r7, #11]
    252a:	4618      	mov	r0, r3
    252c:	f00e fc86 	bl	10e3c <isalpha>
    2530:	4603      	mov	r3, r0
    2532:	2b00      	cmp	r3, #0
    2534:	d00e      	beq.n	2554 <z_log_get_s_mask+0x88>
			if (curr == 's') {
    2536:	7afb      	ldrb	r3, [r7, #11]
    2538:	2b73      	cmp	r3, #115	; 0x73
    253a:	d106      	bne.n	254a <z_log_get_s_mask+0x7e>
				mask |= BIT(arg);
    253c:	2201      	movs	r2, #1
    253e:	693b      	ldr	r3, [r7, #16]
    2540:	fa02 f303 	lsl.w	r3, r2, r3
    2544:	68fa      	ldr	r2, [r7, #12]
    2546:	4313      	orrs	r3, r2
    2548:	60fb      	str	r3, [r7, #12]
			}
			arm = false;
    254a:	2300      	movs	r3, #0
    254c:	75fb      	strb	r3, [r7, #23]
			arg++;
    254e:	693b      	ldr	r3, [r7, #16]
    2550:	3301      	adds	r3, #1
    2552:	613b      	str	r3, [r7, #16]
	while ((curr = *str++) && arg < nargs) {
    2554:	687b      	ldr	r3, [r7, #4]
    2556:	1c5a      	adds	r2, r3, #1
    2558:	607a      	str	r2, [r7, #4]
    255a:	781b      	ldrb	r3, [r3, #0]
    255c:	72fb      	strb	r3, [r7, #11]
    255e:	7afb      	ldrb	r3, [r7, #11]
    2560:	2b00      	cmp	r3, #0
    2562:	d003      	beq.n	256c <z_log_get_s_mask+0xa0>
    2564:	693a      	ldr	r2, [r7, #16]
    2566:	683b      	ldr	r3, [r7, #0]
    2568:	429a      	cmp	r2, r3
    256a:	d3c8      	bcc.n	24fe <z_log_get_s_mask+0x32>
		} else {
			; /* standard character, continue walk */
		}
	}

	return mask;
    256c:	68fb      	ldr	r3, [r7, #12]
}
    256e:	4618      	mov	r0, r3
    2570:	3718      	adds	r7, #24
    2572:	46bd      	mov	sp, r7
    2574:	bd80      	pop	{r7, pc}
    2576:	bf00      	nop
    2578:	000175e8 	.word	0x000175e8
    257c:	00017618 	.word	0x00017618
    2580:	00017594 	.word	0x00017594

00002584 <is_rodata>:
 * @param addr Address.
 *
 * @return True if address identified within read only section.
 */
static bool is_rodata(const void *addr)
{
    2584:	b480      	push	{r7}
    2586:	b083      	sub	sp, #12
    2588:	af00      	add	r7, sp, #0
    258a:	6078      	str	r0, [r7, #4]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    258c:	687b      	ldr	r3, [r7, #4]
    258e:	4a09      	ldr	r2, [pc, #36]	; (25b4 <is_rodata+0x30>)
    2590:	4293      	cmp	r3, r2
    2592:	d305      	bcc.n	25a0 <is_rodata+0x1c>
    2594:	687b      	ldr	r3, [r7, #4]
    2596:	4a08      	ldr	r2, [pc, #32]	; (25b8 <is_rodata+0x34>)
    2598:	4293      	cmp	r3, r2
    259a:	d201      	bcs.n	25a0 <is_rodata+0x1c>
    259c:	2301      	movs	r3, #1
    259e:	e000      	b.n	25a2 <is_rodata+0x1e>
    25a0:	2300      	movs	r3, #0
    25a2:	f003 0301 	and.w	r3, r3, #1
    25a6:	b2db      	uxtb	r3, r3
		((const char *)addr < (const char *)RO_END));
}
    25a8:	4618      	mov	r0, r3
    25aa:	370c      	adds	r7, #12
    25ac:	46bd      	mov	sp, r7
    25ae:	bc80      	pop	{r7}
    25b0:	4770      	bx	lr
    25b2:	bf00      	nop
    25b4:	00016de4 	.word	0x00016de4
    25b8:	0001ae60 	.word	0x0001ae60

000025bc <detect_missed_strdup>:
 *	  only memory and not yet duplicated.
 *
 * @param msg Log message.
 */
static void detect_missed_strdup(struct log_msg *msg)
{
    25bc:	b580      	push	{r7, lr}
    25be:	b08a      	sub	sp, #40	; 0x28
    25c0:	af00      	add	r7, sp, #0
    25c2:	6078      	str	r0, [r7, #4]
	uint32_t idx;
	const char *str;
	const char *msg_str;
	uint32_t mask;

	if (!log_msg_is_std(msg)) {
    25c4:	6878      	ldr	r0, [r7, #4]
    25c6:	f00e f8a0 	bl	1070a <log_msg_is_std>
    25ca:	4603      	mov	r3, r0
    25cc:	f083 0301 	eor.w	r3, r3, #1
    25d0:	b2db      	uxtb	r3, r3
    25d2:	2b00      	cmp	r3, #0
    25d4:	d155      	bne.n	2682 <detect_missed_strdup+0xc6>
		return;
	}

	msg_str = log_msg_str_get(msg);
    25d6:	6878      	ldr	r0, [r7, #4]
    25d8:	f00e ff4b 	bl	11472 <log_msg_str_get>
    25dc:	6278      	str	r0, [r7, #36]	; 0x24
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    25de:	6878      	ldr	r0, [r7, #4]
    25e0:	f00e fee7 	bl	113b2 <log_msg_nargs_get>
    25e4:	4603      	mov	r3, r0
    25e6:	4619      	mov	r1, r3
    25e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    25ea:	f7ff ff6f 	bl	24cc <z_log_get_s_mask>
    25ee:	6238      	str	r0, [r7, #32]

	while (mask) {
    25f0:	e043      	b.n	267a <detect_missed_strdup+0xbe>
		idx = 31 - __builtin_clz(mask);
    25f2:	6a3b      	ldr	r3, [r7, #32]
    25f4:	fab3 f383 	clz	r3, r3
    25f8:	f1c3 031f 	rsb	r3, r3, #31
    25fc:	61fb      	str	r3, [r7, #28]
		str = (const char *)log_msg_arg_get(msg, idx);
    25fe:	69f9      	ldr	r1, [r7, #28]
    2600:	6878      	ldr	r0, [r7, #4]
    2602:	f00e ff0d 	bl	11420 <log_msg_arg_get>
    2606:	4603      	mov	r3, r0
    2608:	61bb      	str	r3, [r7, #24]
		if (!is_rodata(str) && !log_is_strdup(str) &&
    260a:	69b8      	ldr	r0, [r7, #24]
    260c:	f7ff ffba 	bl	2584 <is_rodata>
    2610:	4603      	mov	r3, r0
    2612:	f083 0301 	eor.w	r3, r3, #1
    2616:	b2db      	uxtb	r3, r3
    2618:	2b00      	cmp	r3, #0
    261a:	d026      	beq.n	266a <detect_missed_strdup+0xae>
    261c:	69b8      	ldr	r0, [r7, #24]
    261e:	f000 faf5 	bl	2c0c <log_is_strdup>
    2622:	4603      	mov	r3, r0
    2624:	f083 0301 	eor.w	r3, r3, #1
    2628:	b2db      	uxtb	r3, r3
    262a:	2b00      	cmp	r3, #0
    262c:	d01d      	beq.n	266a <detect_missed_strdup+0xae>
			(str != log_strdup_fail_msg)) {
    262e:	4b17      	ldr	r3, [pc, #92]	; (268c <detect_missed_strdup+0xd0>)
    2630:	681b      	ldr	r3, [r3, #0]
		if (!is_rodata(str) && !log_is_strdup(str) &&
    2632:	69ba      	ldr	r2, [r7, #24]
    2634:	429a      	cmp	r2, r3
    2636:	d018      	beq.n	266a <detect_missed_strdup+0xae>
			const char *src_name =
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    2638:	6878      	ldr	r0, [r7, #4]
    263a:	f00e f858 	bl	106ee <log_msg_source_id_get>
    263e:	4603      	mov	r3, r0
    2640:	4619      	mov	r1, r3
    2642:	2000      	movs	r0, #0
    2644:	f00e fcca 	bl	10fdc <log_source_name_get>
    2648:	6178      	str	r0, [r7, #20]
						    log_msg_source_id_get(msg));

			if (IS_ENABLED(CONFIG_ASSERT)) {
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
    264a:	23d1      	movs	r3, #209	; 0xd1
    264c:	4a10      	ldr	r2, [pc, #64]	; (2690 <detect_missed_strdup+0xd4>)
    264e:	4911      	ldr	r1, [pc, #68]	; (2694 <detect_missed_strdup+0xd8>)
    2650:	4811      	ldr	r0, [pc, #68]	; (2698 <detect_missed_strdup+0xdc>)
    2652:	f00d fb0f 	bl	fc74 <printk>
    2656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2658:	697a      	ldr	r2, [r7, #20]
    265a:	69f9      	ldr	r1, [r7, #28]
    265c:	480f      	ldr	r0, [pc, #60]	; (269c <detect_missed_strdup+0xe0>)
    265e:	f00d fb09 	bl	fc74 <printk>
    2662:	21d1      	movs	r1, #209	; 0xd1
    2664:	480a      	ldr	r0, [pc, #40]	; (2690 <detect_missed_strdup+0xd4>)
    2666:	f00d ff61 	bl	1052c <assert_post_action>
			} else {
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
			}
		}

		mask &= ~BIT(idx);
    266a:	2201      	movs	r2, #1
    266c:	69fb      	ldr	r3, [r7, #28]
    266e:	fa02 f303 	lsl.w	r3, r2, r3
    2672:	43db      	mvns	r3, r3
    2674:	6a3a      	ldr	r2, [r7, #32]
    2676:	4013      	ands	r3, r2
    2678:	623b      	str	r3, [r7, #32]
	while (mask) {
    267a:	6a3b      	ldr	r3, [r7, #32]
    267c:	2b00      	cmp	r3, #0
    267e:	d1b8      	bne.n	25f2 <detect_missed_strdup+0x36>
    2680:	e000      	b.n	2684 <detect_missed_strdup+0xc8>
		return;
    2682:	bf00      	nop
	}
#undef ERR_MSG
}
    2684:	3728      	adds	r7, #40	; 0x28
    2686:	46bd      	mov	sp, r7
    2688:	bd80      	pop	{r7, pc}
    268a:	bf00      	nop
    268c:	200000d4 	.word	0x200000d4
    2690:	000175e8 	.word	0x000175e8
    2694:	00017630 	.word	0x00017630
    2698:	00017594 	.word	0x00017594
    269c:	00017634 	.word	0x00017634

000026a0 <z_log_msg_post_finalize>:

static void z_log_msg_post_finalize(void)
{
    26a0:	b580      	push	{r7, lr}
    26a2:	b086      	sub	sp, #24
    26a4:	af02      	add	r7, sp, #8
	atomic_inc(&buffered_cnt);
    26a6:	4827      	ldr	r0, [pc, #156]	; (2744 <z_log_msg_post_finalize+0xa4>)
    26a8:	f00d ffed 	bl	10686 <atomic_inc>
	if (panic_mode) {
    26ac:	4b26      	ldr	r3, [pc, #152]	; (2748 <z_log_msg_post_finalize+0xa8>)
    26ae:	781b      	ldrb	r3, [r3, #0]
    26b0:	2b00      	cmp	r3, #0
    26b2:	d016      	beq.n	26e2 <z_log_msg_post_finalize+0x42>
	__asm__ volatile(
    26b4:	f04f 0320 	mov.w	r3, #32
    26b8:	f3ef 8211 	mrs	r2, BASEPRI
    26bc:	f383 8811 	msr	BASEPRI, r3
    26c0:	f3bf 8f6f 	isb	sy
    26c4:	607a      	str	r2, [r7, #4]
    26c6:	603b      	str	r3, [r7, #0]
	return key;
    26c8:	687b      	ldr	r3, [r7, #4]
		unsigned int key = irq_lock();
    26ca:	60fb      	str	r3, [r7, #12]
		(void)log_process(false);
    26cc:	2000      	movs	r0, #0
    26ce:	f00e fba7 	bl	10e20 <log_process>
    26d2:	68fb      	ldr	r3, [r7, #12]
    26d4:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
    26d6:	68bb      	ldr	r3, [r7, #8]
    26d8:	f383 8811 	msr	BASEPRI, r3
    26dc:	f3bf 8f6f 	isb	sy
}
    26e0:	e02c      	b.n	273c <z_log_msg_post_finalize+0x9c>
		irq_unlock(key);
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    26e2:	4b1a      	ldr	r3, [pc, #104]	; (274c <z_log_msg_post_finalize+0xac>)
    26e4:	681b      	ldr	r3, [r3, #0]
    26e6:	2b00      	cmp	r3, #0
    26e8:	d019      	beq.n	271e <z_log_msg_post_finalize+0x7e>
    26ea:	4b16      	ldr	r3, [pc, #88]	; (2744 <z_log_msg_post_finalize+0xa4>)
    26ec:	681b      	ldr	r3, [r3, #0]
    26ee:	2b01      	cmp	r3, #1
    26f0:	d115      	bne.n	271e <z_log_msg_post_finalize+0x7e>
		k_timer_start(&log_process_thread_timer,
			K_MSEC(CONFIG_LOG_PROCESS_THREAD_SLEEP_MS), K_NO_WAIT);
    26f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    26f6:	f04f 0100 	mov.w	r1, #0
    26fa:	f00e f8b3 	bl	10864 <k_ms_to_ticks_ceil64>
    26fe:	4602      	mov	r2, r0
    2700:	460b      	mov	r3, r1
    2702:	4610      	mov	r0, r2
    2704:	4619      	mov	r1, r3
    2706:	f04f 0200 	mov.w	r2, #0
    270a:	f04f 0300 	mov.w	r3, #0
		k_timer_start(&log_process_thread_timer,
    270e:	e9cd 2300 	strd	r2, r3, [sp]
    2712:	4602      	mov	r2, r0
    2714:	460b      	mov	r3, r1
    2716:	480e      	ldr	r0, [pc, #56]	; (2750 <z_log_msg_post_finalize+0xb0>)
    2718:	f00e fb40 	bl	10d9c <k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    271c:	e00e      	b.n	273c <z_log_msg_post_finalize+0x9c>
	} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    271e:	4b09      	ldr	r3, [pc, #36]	; (2744 <z_log_msg_post_finalize+0xa4>)
    2720:	681b      	ldr	r3, [r3, #0]
    2722:	2b0a      	cmp	r3, #10
    2724:	d10a      	bne.n	273c <z_log_msg_post_finalize+0x9c>
		    (proc_tid != NULL)) {
    2726:	4b09      	ldr	r3, [pc, #36]	; (274c <z_log_msg_post_finalize+0xac>)
    2728:	681b      	ldr	r3, [r3, #0]
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    272a:	2b00      	cmp	r3, #0
    272c:	d006      	beq.n	273c <z_log_msg_post_finalize+0x9c>
			k_timer_stop(&log_process_thread_timer);
    272e:	4808      	ldr	r0, [pc, #32]	; (2750 <z_log_msg_post_finalize+0xb0>)
    2730:	f00e fb47 	bl	10dc2 <k_timer_stop>
			k_sem_give(&log_process_thread_sem);
    2734:	4807      	ldr	r0, [pc, #28]	; (2754 <z_log_msg_post_finalize+0xb4>)
    2736:	f00e fb68 	bl	10e0a <k_sem_give>
		 * timeout or when number of upcoming messages exceeds the
		 * threshold.
		 */
		;
	}
}
    273a:	e7ff      	b.n	273c <z_log_msg_post_finalize+0x9c>
    273c:	bf00      	nop
    273e:	3710      	adds	r7, #16
    2740:	46bd      	mov	sp, r7
    2742:	bd80      	pop	{r7, pc}
    2744:	20000514 	.word	0x20000514
    2748:	20000c68 	.word	0x20000c68
    274c:	2000051c 	.word	0x2000051c
    2750:	20000260 	.word	0x20000260
    2754:	20000250 	.word	0x20000250

00002758 <msg_finalize>:

static inline void msg_finalize(struct log_msg *msg,
				struct log_msg_ids src_level)
{
    2758:	b580      	push	{r7, lr}
    275a:	b086      	sub	sp, #24
    275c:	af00      	add	r7, sp, #0
    275e:	6078      	str	r0, [r7, #4]
    2760:	8039      	strh	r1, [r7, #0]
	unsigned int key;

	msg->hdr.ids = src_level;
    2762:	687b      	ldr	r3, [r7, #4]
    2764:	883a      	ldrh	r2, [r7, #0]
    2766:	815a      	strh	r2, [r3, #10]
	msg->hdr.timestamp = timestamp_func();
    2768:	4b11      	ldr	r3, [pc, #68]	; (27b0 <msg_finalize+0x58>)
    276a:	681b      	ldr	r3, [r3, #0]
    276c:	4798      	blx	r3
    276e:	4602      	mov	r2, r0
    2770:	687b      	ldr	r3, [r7, #4]
    2772:	60da      	str	r2, [r3, #12]
	__asm__ volatile(
    2774:	f04f 0320 	mov.w	r3, #32
    2778:	f3ef 8211 	mrs	r2, BASEPRI
    277c:	f383 8811 	msr	BASEPRI, r3
    2780:	f3bf 8f6f 	isb	sy
    2784:	60fa      	str	r2, [r7, #12]
    2786:	60bb      	str	r3, [r7, #8]
	return key;
    2788:	68fb      	ldr	r3, [r7, #12]

	key = irq_lock();
    278a:	617b      	str	r3, [r7, #20]

	log_list_add_tail(&list, msg);
    278c:	6879      	ldr	r1, [r7, #4]
    278e:	4809      	ldr	r0, [pc, #36]	; (27b4 <msg_finalize+0x5c>)
    2790:	f00d ff10 	bl	105b4 <log_list_add_tail>
    2794:	697b      	ldr	r3, [r7, #20]
    2796:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
    2798:	693b      	ldr	r3, [r7, #16]
    279a:	f383 8811 	msr	BASEPRI, r3
    279e:	f3bf 8f6f 	isb	sy
}
    27a2:	bf00      	nop

	irq_unlock(key);

	z_log_msg_post_finalize();
    27a4:	f7ff ff7c 	bl	26a0 <z_log_msg_post_finalize>
}
    27a8:	bf00      	nop
    27aa:	3718      	adds	r7, #24
    27ac:	46bd      	mov	sp, r7
    27ae:	bd80      	pop	{r7, pc}
    27b0:	200000d8 	.word	0x200000d8
    27b4:	20000508 	.word	0x20000508

000027b8 <log_core_init>:
	return IS_ENABLED(CONFIG_LOG_TIMESTAMP_64BIT) ?
		k_uptime_get() : k_uptime_get_32();
}

void log_core_init(void)
{
    27b8:	b580      	push	{r7, lr}
    27ba:	b082      	sub	sp, #8
    27bc:	af00      	add	r7, sp, #0
	uint32_t freq;

	panic_mode = false;
    27be:	4b14      	ldr	r3, [pc, #80]	; (2810 <log_core_init+0x58>)
    27c0:	2200      	movs	r2, #0
    27c2:	701a      	strb	r2, [r3, #0]

	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
    27c4:	f00e f846 	bl	10854 <sys_clock_hw_cycles_per_sec>
    27c8:	4603      	mov	r3, r0
    27ca:	4a12      	ldr	r2, [pc, #72]	; (2814 <log_core_init+0x5c>)
    27cc:	4293      	cmp	r3, r2
    27ce:	dd06      	ble.n	27de <log_core_init+0x26>
		timestamp_func = default_lf_get_timestamp;
    27d0:	4b11      	ldr	r3, [pc, #68]	; (2818 <log_core_init+0x60>)
    27d2:	4a12      	ldr	r2, [pc, #72]	; (281c <log_core_init+0x64>)
    27d4:	601a      	str	r2, [r3, #0]
		freq = 1000U;
    27d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    27da:	607b      	str	r3, [r7, #4]
    27dc:	e006      	b.n	27ec <log_core_init+0x34>
	} else {
		timestamp_func = default_get_timestamp;
    27de:	4b0e      	ldr	r3, [pc, #56]	; (2818 <log_core_init+0x60>)
    27e0:	4a0f      	ldr	r2, [pc, #60]	; (2820 <log_core_init+0x68>)
    27e2:	601a      	str	r2, [r3, #0]
		freq = sys_clock_hw_cycles_per_sec();
    27e4:	f00e f836 	bl	10854 <sys_clock_hw_cycles_per_sec>
    27e8:	4603      	mov	r3, r0
    27ea:	607b      	str	r3, [r7, #4]
	}

	log_output_timestamp_freq_set(freq);
    27ec:	6878      	ldr	r0, [r7, #4]
    27ee:	f001 f987 	bl	3b00 <log_output_timestamp_freq_set>
			sys_clock_hw_cycles_per_sec());
		if (IS_ENABLED(CONFIG_LOG2_MODE_DEFERRED)) {
			z_log_msg2_init();
		}
	} else if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED)) {
		log_msg_pool_init();
    27f2:	f000 fae1 	bl	2db8 <log_msg_pool_init>
		log_list_init(&list);
    27f6:	480b      	ldr	r0, [pc, #44]	; (2824 <log_core_init+0x6c>)
    27f8:	f00d fecd 	bl	10596 <log_list_init>

		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    27fc:	2304      	movs	r3, #4
    27fe:	2228      	movs	r2, #40	; 0x28
    2800:	4909      	ldr	r1, [pc, #36]	; (2828 <log_core_init+0x70>)
    2802:	480a      	ldr	r0, [pc, #40]	; (282c <log_core_init+0x74>)
    2804:	f013 f841 	bl	1588a <k_mem_slab_init>
			LOG_FILTER_SLOT_SET(filters,
					    LOG_FILTER_AGGR_SLOT_IDX,
					    level);
		}
	}
}
    2808:	bf00      	nop
    280a:	3708      	adds	r7, #8
    280c:	46bd      	mov	sp, r7
    280e:	bd80      	pop	{r7, pc}
    2810:	20000c68 	.word	0x20000c68
    2814:	000f4240 	.word	0x000f4240
    2818:	200000d8 	.word	0x200000d8
    281c:	00010f6d 	.word	0x00010f6d
    2820:	00010f5f 	.word	0x00010f5f
    2824:	20000508 	.word	0x20000508
    2828:	20001fd0 	.word	0x20001fd0
    282c:	200004e8 	.word	0x200004e8

00002830 <log_init>:

void log_init(void)
{
    2830:	b580      	push	{r7, lr}
    2832:	b082      	sub	sp, #8
    2834:	af00      	add	r7, sp, #0
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    2836:	f7ff fdf5 	bl	2424 <log_backend_count_get>
    283a:	4603      	mov	r3, r0
    283c:	2b09      	cmp	r3, #9
    283e:	d90b      	bls.n	2858 <log_init+0x28>
    2840:	f44f 7315 	mov.w	r3, #596	; 0x254
    2844:	4a1d      	ldr	r2, [pc, #116]	; (28bc <log_init+0x8c>)
    2846:	491e      	ldr	r1, [pc, #120]	; (28c0 <log_init+0x90>)
    2848:	481e      	ldr	r0, [pc, #120]	; (28c4 <log_init+0x94>)
    284a:	f00d fa13 	bl	fc74 <printk>
    284e:	f44f 7115 	mov.w	r1, #596	; 0x254
    2852:	481a      	ldr	r0, [pc, #104]	; (28bc <log_init+0x8c>)
    2854:	f00d fe6a 	bl	1052c <assert_post_action>

	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_init();
	}

	if (atomic_inc(&initialized) != 0) {
    2858:	481b      	ldr	r0, [pc, #108]	; (28c8 <log_init+0x98>)
    285a:	f00d ff14 	bl	10686 <atomic_inc>
    285e:	4603      	mov	r3, r0
    2860:	2b00      	cmp	r3, #0
    2862:	d127      	bne.n	28b4 <log_init+0x84>
		return;
	}

	/* Assign ids to backends. */
	for (i = 0; i < log_backend_count_get(); i++) {
    2864:	2300      	movs	r3, #0
    2866:	607b      	str	r3, [r7, #4]
    2868:	e01d      	b.n	28a6 <log_init+0x76>
		const struct log_backend *backend = log_backend_get(i);
    286a:	687b      	ldr	r3, [r7, #4]
    286c:	4618      	mov	r0, r3
    286e:	f7ff fdc9 	bl	2404 <log_backend_get>
    2872:	6038      	str	r0, [r7, #0]

		if (backend->autostart) {
    2874:	683b      	ldr	r3, [r7, #0]
    2876:	7b1b      	ldrb	r3, [r3, #12]
    2878:	2b00      	cmp	r3, #0
    287a:	d011      	beq.n	28a0 <log_init+0x70>
			if (backend->api->init != NULL) {
    287c:	683b      	ldr	r3, [r7, #0]
    287e:	681b      	ldr	r3, [r3, #0]
    2880:	699b      	ldr	r3, [r3, #24]
    2882:	2b00      	cmp	r3, #0
    2884:	d004      	beq.n	2890 <log_init+0x60>
				backend->api->init(backend);
    2886:	683b      	ldr	r3, [r7, #0]
    2888:	681b      	ldr	r3, [r3, #0]
    288a:	699b      	ldr	r3, [r3, #24]
    288c:	6838      	ldr	r0, [r7, #0]
    288e:	4798      	blx	r3
			}

			log_backend_enable(backend,
					   backend->cb->ctx,
    2890:	683b      	ldr	r3, [r7, #0]
    2892:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    2894:	681b      	ldr	r3, [r3, #0]
    2896:	2204      	movs	r2, #4
    2898:	4619      	mov	r1, r3
    289a:	6838      	ldr	r0, [r7, #0]
    289c:	f000 f93e 	bl	2b1c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    28a0:	687b      	ldr	r3, [r7, #4]
    28a2:	3301      	adds	r3, #1
    28a4:	607b      	str	r3, [r7, #4]
    28a6:	f7ff fdbd 	bl	2424 <log_backend_count_get>
    28aa:	4602      	mov	r2, r0
    28ac:	687b      	ldr	r3, [r7, #4]
    28ae:	4293      	cmp	r3, r2
    28b0:	dbdb      	blt.n	286a <log_init+0x3a>
    28b2:	e000      	b.n	28b6 <log_init+0x86>
		return;
    28b4:	bf00      	nop
					   CONFIG_LOG_MAX_LEVEL);
		}
	}
}
    28b6:	3708      	adds	r7, #8
    28b8:	46bd      	mov	sp, r7
    28ba:	bd80      	pop	{r7, pc}
    28bc:	000175e8 	.word	0x000175e8
    28c0:	00017684 	.word	0x00017684
    28c4:	00017594 	.word	0x00017594
    28c8:	20000510 	.word	0x20000510

000028cc <thread_set>:

static void thread_set(k_tid_t process_tid)
{
    28cc:	b580      	push	{r7, lr}
    28ce:	b082      	sub	sp, #8
    28d0:	af00      	add	r7, sp, #0
    28d2:	6078      	str	r0, [r7, #4]
	proc_tid = process_tid;
    28d4:	4a07      	ldr	r2, [pc, #28]	; (28f4 <thread_set+0x28>)
    28d6:	687b      	ldr	r3, [r7, #4]
    28d8:	6013      	str	r3, [r2, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    28da:	687b      	ldr	r3, [r7, #4]
    28dc:	2b00      	cmp	r3, #0
    28de:	d006      	beq.n	28ee <thread_set+0x22>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    28e0:	4b05      	ldr	r3, [pc, #20]	; (28f8 <thread_set+0x2c>)
    28e2:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    28e4:	2b09      	cmp	r3, #9
    28e6:	dd02      	ble.n	28ee <thread_set+0x22>
		k_sem_give(&log_process_thread_sem);
    28e8:	4804      	ldr	r0, [pc, #16]	; (28fc <thread_set+0x30>)
    28ea:	f00e fa8e 	bl	10e0a <k_sem_give>
	}
}
    28ee:	3708      	adds	r7, #8
    28f0:	46bd      	mov	sp, r7
    28f2:	bd80      	pop	{r7, pc}
    28f4:	2000051c 	.word	0x2000051c
    28f8:	20000514 	.word	0x20000514
    28fc:	20000250 	.word	0x20000250

00002900 <z_impl_log_panic>:

	return 0;
}

void z_impl_log_panic(void)
{
    2900:	b580      	push	{r7, lr}
    2902:	b082      	sub	sp, #8
    2904:	af00      	add	r7, sp, #0
	struct log_backend const *backend;

	if (panic_mode) {
    2906:	4b17      	ldr	r3, [pc, #92]	; (2964 <z_impl_log_panic+0x64>)
    2908:	781b      	ldrb	r3, [r3, #0]
    290a:	2b00      	cmp	r3, #0
    290c:	d126      	bne.n	295c <z_impl_log_panic+0x5c>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	log_init();
    290e:	f7ff ff8f 	bl	2830 <log_init>

	for (int i = 0; i < log_backend_count_get(); i++) {
    2912:	2300      	movs	r3, #0
    2914:	607b      	str	r3, [r7, #4]
    2916:	e010      	b.n	293a <z_impl_log_panic+0x3a>
		backend = log_backend_get(i);
    2918:	687b      	ldr	r3, [r7, #4]
    291a:	4618      	mov	r0, r3
    291c:	f7ff fd72 	bl	2404 <log_backend_get>
    2920:	6038      	str	r0, [r7, #0]

		if (log_backend_is_active(backend)) {
    2922:	6838      	ldr	r0, [r7, #0]
    2924:	f7ff fdb2 	bl	248c <log_backend_is_active>
    2928:	4603      	mov	r3, r0
    292a:	2b00      	cmp	r3, #0
    292c:	d002      	beq.n	2934 <z_impl_log_panic+0x34>
			log_backend_panic(backend);
    292e:	6838      	ldr	r0, [r7, #0]
    2930:	f7ff fd26 	bl	2380 <log_backend_panic>
	for (int i = 0; i < log_backend_count_get(); i++) {
    2934:	687b      	ldr	r3, [r7, #4]
    2936:	3301      	adds	r3, #1
    2938:	607b      	str	r3, [r7, #4]
    293a:	f7ff fd73 	bl	2424 <log_backend_count_get>
    293e:	4602      	mov	r2, r0
    2940:	687b      	ldr	r3, [r7, #4]
    2942:	4293      	cmp	r3, r2
    2944:	dbe8      	blt.n	2918 <z_impl_log_panic+0x18>
		}
	}

	if (!IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		/* Flush */
		while (log_process(false) == true) {
    2946:	bf00      	nop
    2948:	2000      	movs	r0, #0
    294a:	f00e fa69 	bl	10e20 <log_process>
    294e:	4603      	mov	r3, r0
    2950:	2b00      	cmp	r3, #0
    2952:	d1f9      	bne.n	2948 <z_impl_log_panic+0x48>
		}
	}

	panic_mode = true;
    2954:	4b03      	ldr	r3, [pc, #12]	; (2964 <z_impl_log_panic+0x64>)
    2956:	2201      	movs	r2, #1
    2958:	701a      	strb	r2, [r3, #0]
    295a:	e000      	b.n	295e <z_impl_log_panic+0x5e>
		return;
    295c:	bf00      	nop
}
    295e:	3708      	adds	r7, #8
    2960:	46bd      	mov	sp, r7
    2962:	bd80      	pop	{r7, pc}
    2964:	20000c68 	.word	0x20000c68

00002968 <msg_process>:
		return true;
	}
}

static void msg_process(union log_msgs msg, bool bypass)
{
    2968:	b580      	push	{r7, lr}
    296a:	b084      	sub	sp, #16
    296c:	af00      	add	r7, sp, #0
    296e:	6078      	str	r0, [r7, #4]
    2970:	460b      	mov	r3, r1
    2972:	70fb      	strb	r3, [r7, #3]
	struct log_backend const *backend;

	if (!bypass) {
    2974:	78fb      	ldrb	r3, [r7, #3]
    2976:	f083 0301 	eor.w	r3, r3, #1
    297a:	b2db      	uxtb	r3, r3
    297c:	2b00      	cmp	r3, #0
    297e:	d02d      	beq.n	29dc <msg_process+0x74>
		if (!IS_ENABLED(CONFIG_LOG2) &&
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
    2980:	4b1a      	ldr	r3, [pc, #104]	; (29ec <msg_process+0x84>)
    2982:	781b      	ldrb	r3, [r3, #0]
    2984:	f083 0301 	eor.w	r3, r3, #1
    2988:	b2db      	uxtb	r3, r3
		if (!IS_ENABLED(CONFIG_LOG2) &&
    298a:	2b00      	cmp	r3, #0
    298c:	d003      	beq.n	2996 <msg_process+0x2e>
			detect_missed_strdup(msg.msg);
    298e:	687b      	ldr	r3, [r7, #4]
    2990:	4618      	mov	r0, r3
    2992:	f7ff fe13 	bl	25bc <detect_missed_strdup>
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    2996:	2300      	movs	r3, #0
    2998:	60fb      	str	r3, [r7, #12]
    299a:	e019      	b.n	29d0 <msg_process+0x68>
			backend = log_backend_get(i);
    299c:	68fb      	ldr	r3, [r7, #12]
    299e:	4618      	mov	r0, r3
    29a0:	f7ff fd30 	bl	2404 <log_backend_get>
    29a4:	60b8      	str	r0, [r7, #8]
			if (log_backend_is_active(backend) &&
    29a6:	68b8      	ldr	r0, [r7, #8]
    29a8:	f7ff fd70 	bl	248c <log_backend_is_active>
    29ac:	4603      	mov	r3, r0
    29ae:	2b00      	cmp	r3, #0
    29b0:	d00b      	beq.n	29ca <msg_process+0x62>
			    msg_filter_check(backend, msg)) {
    29b2:	6879      	ldr	r1, [r7, #4]
    29b4:	68b8      	ldr	r0, [r7, #8]
    29b6:	f00e fae0 	bl	10f7a <msg_filter_check>
    29ba:	4603      	mov	r3, r0
			if (log_backend_is_active(backend) &&
    29bc:	2b00      	cmp	r3, #0
    29be:	d004      	beq.n	29ca <msg_process+0x62>
				if (IS_ENABLED(CONFIG_LOG2)) {
					log_backend_msg2_process(backend,
								 msg.msg2);
				} else {
					log_backend_put(backend, msg.msg);
    29c0:	687b      	ldr	r3, [r7, #4]
    29c2:	4619      	mov	r1, r3
    29c4:	68b8      	ldr	r0, [r7, #8]
    29c6:	f7ff fc81 	bl	22cc <log_backend_put>
		for (int i = 0; i < log_backend_count_get(); i++) {
    29ca:	68fb      	ldr	r3, [r7, #12]
    29cc:	3301      	adds	r3, #1
    29ce:	60fb      	str	r3, [r7, #12]
    29d0:	f7ff fd28 	bl	2424 <log_backend_count_get>
    29d4:	4602      	mov	r2, r0
    29d6:	68fb      	ldr	r3, [r7, #12]
    29d8:	4293      	cmp	r3, r2
    29da:	dbdf      	blt.n	299c <msg_process+0x34>

	if (!IS_ENABLED(CONFIG_LOG2_MODE_IMMEDIATE)) {
		if (IS_ENABLED(CONFIG_LOG2)) {
			z_log_msg2_free(msg.msg2);
		} else {
			log_msg_put(msg.msg);
    29dc:	687b      	ldr	r3, [r7, #4]
    29de:	4618      	mov	r0, r3
    29e0:	f00e fcd3 	bl	1138a <log_msg_put>
		}
	}
}
    29e4:	bf00      	nop
    29e6:	3710      	adds	r7, #16
    29e8:	46bd      	mov	sp, r7
    29ea:	bd80      	pop	{r7, pc}
    29ec:	20000c68 	.word	0x20000c68

000029f0 <get_msg>:
		}
	}
}

union log_msgs get_msg(void)
{
    29f0:	b580      	push	{r7, lr}
    29f2:	b086      	sub	sp, #24
    29f4:	af00      	add	r7, sp, #0
	__asm__ volatile(
    29f6:	f04f 0320 	mov.w	r3, #32
    29fa:	f3ef 8211 	mrs	r2, BASEPRI
    29fe:	f383 8811 	msr	BASEPRI, r3
    2a02:	f3bf 8f6f 	isb	sy
    2a06:	60fa      	str	r2, [r7, #12]
    2a08:	60bb      	str	r3, [r7, #8]
	return key;
    2a0a:	68fb      	ldr	r3, [r7, #12]
		msg.msg2 = z_log_msg2_claim();

		return msg;
	}

	int key = irq_lock();
    2a0c:	617b      	str	r3, [r7, #20]

	msg.msg = log_list_head_get(&list);
    2a0e:	4809      	ldr	r0, [pc, #36]	; (2a34 <get_msg+0x44>)
    2a10:	f00d fdf7 	bl	10602 <log_list_head_get>
    2a14:	4603      	mov	r3, r0
    2a16:	607b      	str	r3, [r7, #4]
	irq_unlock(key);
    2a18:	697b      	ldr	r3, [r7, #20]
    2a1a:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
    2a1c:	693b      	ldr	r3, [r7, #16]
    2a1e:	f383 8811 	msr	BASEPRI, r3
    2a22:	f3bf 8f6f 	isb	sy
}
    2a26:	bf00      	nop

	return msg;
    2a28:	687b      	ldr	r3, [r7, #4]
}
    2a2a:	4618      	mov	r0, r3
    2a2c:	3718      	adds	r7, #24
    2a2e:	46bd      	mov	sp, r7
    2a30:	bd80      	pop	{r7, pc}
    2a32:	bf00      	nop
    2a34:	20000508 	.word	0x20000508

00002a38 <next_pending>:

static bool next_pending(void)
{
    2a38:	b580      	push	{r7, lr}
    2a3a:	af00      	add	r7, sp, #0
	if (IS_ENABLED(CONFIG_LOG2)) {
		return z_log_msg2_pending();
	}

	return (log_list_head_peek(&list) != NULL);
    2a3c:	4805      	ldr	r0, [pc, #20]	; (2a54 <next_pending+0x1c>)
    2a3e:	f00d fdd5 	bl	105ec <log_list_head_peek>
    2a42:	4603      	mov	r3, r0
    2a44:	2b00      	cmp	r3, #0
    2a46:	bf14      	ite	ne
    2a48:	2301      	movne	r3, #1
    2a4a:	2300      	moveq	r3, #0
    2a4c:	b2db      	uxtb	r3, r3
}
    2a4e:	4618      	mov	r0, r3
    2a50:	bd80      	pop	{r7, pc}
    2a52:	bf00      	nop
    2a54:	20000508 	.word	0x20000508

00002a58 <z_impl_log_process>:

bool z_impl_log_process(bool bypass)
{
    2a58:	b580      	push	{r7, lr}
    2a5a:	b084      	sub	sp, #16
    2a5c:	af00      	add	r7, sp, #0
    2a5e:	4603      	mov	r3, r0
    2a60:	71fb      	strb	r3, [r7, #7]
	union log_msgs msg;

	if (!backend_attached && !bypass) {
    2a62:	4b19      	ldr	r3, [pc, #100]	; (2ac8 <z_impl_log_process+0x70>)
    2a64:	781b      	ldrb	r3, [r3, #0]
    2a66:	f083 0301 	eor.w	r3, r3, #1
    2a6a:	b2db      	uxtb	r3, r3
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d007      	beq.n	2a80 <z_impl_log_process+0x28>
    2a70:	79fb      	ldrb	r3, [r7, #7]
    2a72:	f083 0301 	eor.w	r3, r3, #1
    2a76:	b2db      	uxtb	r3, r3
    2a78:	2b00      	cmp	r3, #0
    2a7a:	d001      	beq.n	2a80 <z_impl_log_process+0x28>
		return false;
    2a7c:	2300      	movs	r3, #0
    2a7e:	e01e      	b.n	2abe <z_impl_log_process+0x66>
	}

	msg = get_msg();
    2a80:	f7ff ffb6 	bl	29f0 <get_msg>
    2a84:	4603      	mov	r3, r0
    2a86:	60fb      	str	r3, [r7, #12]
	if (msg.msg) {
    2a88:	68fb      	ldr	r3, [r7, #12]
    2a8a:	2b00      	cmp	r3, #0
    2a8c:	d007      	beq.n	2a9e <z_impl_log_process+0x46>
		atomic_dec(&buffered_cnt);
    2a8e:	480f      	ldr	r0, [pc, #60]	; (2acc <z_impl_log_process+0x74>)
    2a90:	f00d fe06 	bl	106a0 <atomic_dec>
		msg_process(msg, bypass);
    2a94:	79fb      	ldrb	r3, [r7, #7]
    2a96:	4619      	mov	r1, r3
    2a98:	68f8      	ldr	r0, [r7, #12]
    2a9a:	f7ff ff65 	bl	2968 <msg_process>
	}

	if (!bypass && z_log_dropped_pending()) {
    2a9e:	79fb      	ldrb	r3, [r7, #7]
    2aa0:	f083 0301 	eor.w	r3, r3, #1
    2aa4:	b2db      	uxtb	r3, r3
    2aa6:	2b00      	cmp	r3, #0
    2aa8:	d006      	beq.n	2ab8 <z_impl_log_process+0x60>
    2aaa:	f000 f827 	bl	2afc <z_log_dropped_pending>
    2aae:	4603      	mov	r3, r0
    2ab0:	2b00      	cmp	r3, #0
    2ab2:	d001      	beq.n	2ab8 <z_impl_log_process+0x60>
		dropped_notify();
    2ab4:	f00e fa6c 	bl	10f90 <dropped_notify>
	}

	return next_pending();
    2ab8:	f7ff ffbe 	bl	2a38 <next_pending>
    2abc:	4603      	mov	r3, r0
}
    2abe:	4618      	mov	r0, r3
    2ac0:	3710      	adds	r7, #16
    2ac2:	46bd      	mov	sp, r7
    2ac4:	bd80      	pop	{r7, pc}
    2ac6:	bf00      	nop
    2ac8:	20000c69 	.word	0x20000c69
    2acc:	20000514 	.word	0x20000514

00002ad0 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(void)
{
    2ad0:	b580      	push	{r7, lr}
    2ad2:	af00      	add	r7, sp, #0
	atomic_inc(&dropped_cnt);
    2ad4:	4802      	ldr	r0, [pc, #8]	; (2ae0 <z_log_dropped+0x10>)
    2ad6:	f00d fdd6 	bl	10686 <atomic_inc>
}
    2ada:	bf00      	nop
    2adc:	bd80      	pop	{r7, pc}
    2ade:	bf00      	nop
    2ae0:	20000518 	.word	0x20000518

00002ae4 <z_log_dropped_read_and_clear>:

uint32_t z_log_dropped_read_and_clear(void)
{
    2ae4:	b580      	push	{r7, lr}
    2ae6:	af00      	add	r7, sp, #0
	return atomic_set(&dropped_cnt, 0);
    2ae8:	2100      	movs	r1, #0
    2aea:	4803      	ldr	r0, [pc, #12]	; (2af8 <z_log_dropped_read_and_clear+0x14>)
    2aec:	f00d fde5 	bl	106ba <atomic_set>
    2af0:	4603      	mov	r3, r0
}
    2af2:	4618      	mov	r0, r3
    2af4:	bd80      	pop	{r7, pc}
    2af6:	bf00      	nop
    2af8:	20000518 	.word	0x20000518

00002afc <z_log_dropped_pending>:

bool z_log_dropped_pending(void)
{
    2afc:	b480      	push	{r7}
    2afe:	af00      	add	r7, sp, #0
	return dropped_cnt > 0;
    2b00:	4b05      	ldr	r3, [pc, #20]	; (2b18 <z_log_dropped_pending+0x1c>)
    2b02:	681b      	ldr	r3, [r3, #0]
    2b04:	2b00      	cmp	r3, #0
    2b06:	bfcc      	ite	gt
    2b08:	2301      	movgt	r3, #1
    2b0a:	2300      	movle	r3, #0
    2b0c:	b2db      	uxtb	r3, r3
}
    2b0e:	4618      	mov	r0, r3
    2b10:	46bd      	mov	sp, r7
    2b12:	bc80      	pop	{r7}
    2b14:	4770      	bx	lr
    2b16:	bf00      	nop
    2b18:	20000518 	.word	0x20000518

00002b1c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    2b1c:	b580      	push	{r7, lr}
    2b1e:	b086      	sub	sp, #24
    2b20:	af00      	add	r7, sp, #0
    2b22:	60f8      	str	r0, [r7, #12]
    2b24:	60b9      	str	r1, [r7, #8]
    2b26:	607a      	str	r2, [r7, #4]
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;
    2b28:	2301      	movs	r3, #1
    2b2a:	617b      	str	r3, [r7, #20]

	id += backend - log_backend_get(0);
    2b2c:	2000      	movs	r0, #0
    2b2e:	f7ff fc69 	bl	2404 <log_backend_get>
    2b32:	4602      	mov	r2, r0
    2b34:	68fb      	ldr	r3, [r7, #12]
    2b36:	1a9b      	subs	r3, r3, r2
    2b38:	111b      	asrs	r3, r3, #4
    2b3a:	461a      	mov	r2, r3
    2b3c:	697b      	ldr	r3, [r7, #20]
    2b3e:	4413      	add	r3, r2
    2b40:	617b      	str	r3, [r7, #20]

	log_backend_id_set(backend, id);
    2b42:	697b      	ldr	r3, [r7, #20]
    2b44:	b2db      	uxtb	r3, r3
    2b46:	4619      	mov	r1, r3
    2b48:	68f8      	ldr	r0, [r7, #12]
    2b4a:	f7ff fc39 	bl	23c0 <log_backend_id_set>
	backend_filter_set(backend, level);
    2b4e:	6879      	ldr	r1, [r7, #4]
    2b50:	68f8      	ldr	r0, [r7, #12]
    2b52:	f00e fa58 	bl	11006 <backend_filter_set>
	log_backend_activate(backend, ctx);
    2b56:	68b9      	ldr	r1, [r7, #8]
    2b58:	68f8      	ldr	r0, [r7, #12]
    2b5a:	f7ff fc71 	bl	2440 <log_backend_activate>

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    2b5e:	4b08      	ldr	r3, [pc, #32]	; (2b80 <log_backend_enable+0x64>)
    2b60:	781b      	ldrb	r3, [r3, #0]
    2b62:	f083 0301 	eor.w	r3, r3, #1
    2b66:	b2db      	uxtb	r3, r3
    2b68:	2b00      	cmp	r3, #0
    2b6a:	d002      	beq.n	2b72 <log_backend_enable+0x56>
		k_sem_give(&log_process_thread_sem);
    2b6c:	4805      	ldr	r0, [pc, #20]	; (2b84 <log_backend_enable+0x68>)
    2b6e:	f00e f94c 	bl	10e0a <k_sem_give>
	}

	backend_attached = true;
    2b72:	4b03      	ldr	r3, [pc, #12]	; (2b80 <log_backend_enable+0x64>)
    2b74:	2201      	movs	r2, #1
    2b76:	701a      	strb	r2, [r3, #0]
}
    2b78:	bf00      	nop
    2b7a:	3718      	adds	r7, #24
    2b7c:	46bd      	mov	sp, r7
    2b7e:	bd80      	pop	{r7, pc}
    2b80:	20000c69 	.word	0x20000c69
    2b84:	20000250 	.word	0x20000250

00002b88 <z_log_strdup>:

	return log_compiled_level_get(source_id);
}

char *z_log_strdup(const char *str)
{
    2b88:	b590      	push	{r4, r7, lr}
    2b8a:	b087      	sub	sp, #28
    2b8c:	af00      	add	r7, sp, #0
    2b8e:	6078      	str	r0, [r7, #4]
	struct log_strdup_buf *dup;
	int err;

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
	    is_rodata(str) || k_is_user_context()) {
    2b90:	6878      	ldr	r0, [r7, #4]
    2b92:	f7ff fcf7 	bl	2584 <is_rodata>
    2b96:	4603      	mov	r3, r0
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    2b98:	2b00      	cmp	r3, #0
    2b9a:	d104      	bne.n	2ba6 <z_log_strdup+0x1e>
	    is_rodata(str) || k_is_user_context()) {
    2b9c:	f00d fda0 	bl	106e0 <k_is_user_context>
    2ba0:	4603      	mov	r3, r0
    2ba2:	2b00      	cmp	r3, #0
    2ba4:	d001      	beq.n	2baa <z_log_strdup+0x22>
		return (char *)str;
    2ba6:	687b      	ldr	r3, [r7, #4]
    2ba8:	e028      	b.n	2bfc <z_log_strdup+0x74>
	}

	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    2baa:	f04f 0000 	mov.w	r0, #0
    2bae:	f04f 0100 	mov.w	r1, #0
    2bb2:	f107 0410 	add.w	r4, r7, #16
    2bb6:	4602      	mov	r2, r0
    2bb8:	460b      	mov	r3, r1
    2bba:	4621      	mov	r1, r4
    2bbc:	4811      	ldr	r0, [pc, #68]	; (2c04 <z_log_strdup+0x7c>)
    2bbe:	f008 fb65 	bl	b28c <k_mem_slab_alloc>
    2bc2:	6178      	str	r0, [r7, #20]
	if (err != 0) {
    2bc4:	697b      	ldr	r3, [r7, #20]
    2bc6:	2b00      	cmp	r3, #0
    2bc8:	d002      	beq.n	2bd0 <z_log_strdup+0x48>
		/* failed to allocate */
		return (char *)log_strdup_fail_msg;
    2bca:	4b0f      	ldr	r3, [pc, #60]	; (2c08 <z_log_strdup+0x80>)
    2bcc:	681b      	ldr	r3, [r3, #0]
    2bce:	e015      	b.n	2bfc <z_log_strdup+0x74>
		log_strdup_longest = MAX(slen, log_strdup_longest);
		k_spin_unlock(&lock, key);
	}

	/* Set 'allocated' flag. */
	(void)atomic_set(&dup->refcount, 1);
    2bd0:	693b      	ldr	r3, [r7, #16]
    2bd2:	2101      	movs	r1, #1
    2bd4:	4618      	mov	r0, r3
    2bd6:	f00d fd70 	bl	106ba <atomic_set>

	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    2bda:	693b      	ldr	r3, [r7, #16]
    2bdc:	3304      	adds	r3, #4
    2bde:	221f      	movs	r2, #31
    2be0:	6879      	ldr	r1, [r7, #4]
    2be2:	4618      	mov	r0, r3
    2be4:	f00f fedf 	bl	129a6 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    2be8:	693b      	ldr	r3, [r7, #16]
    2bea:	227e      	movs	r2, #126	; 0x7e
    2bec:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    2bf0:	693b      	ldr	r3, [r7, #16]
    2bf2:	2200      	movs	r2, #0
    2bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return dup->buf;
    2bf8:	693b      	ldr	r3, [r7, #16]
    2bfa:	3304      	adds	r3, #4
}
    2bfc:	4618      	mov	r0, r3
    2bfe:	371c      	adds	r7, #28
    2c00:	46bd      	mov	sp, r7
    2c02:	bd90      	pop	{r4, r7, pc}
    2c04:	200004e8 	.word	0x200004e8
    2c08:	200000d4 	.word	0x200000d4

00002c0c <log_is_strdup>:
	return IS_ENABLED(CONFIG_LOG_STRDUP_POOL_PROFILING) ?
			log_strdup_longest : 0;
}

bool log_is_strdup(const void *buf)
{
    2c0c:	b480      	push	{r7}
    2c0e:	b083      	sub	sp, #12
    2c10:	af00      	add	r7, sp, #0
    2c12:	6078      	str	r0, [r7, #4]
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    2c14:	687b      	ldr	r3, [r7, #4]
    2c16:	2b00      	cmp	r3, #0
    2c18:	d009      	beq.n	2c2e <log_is_strdup+0x22>
    2c1a:	687b      	ldr	r3, [r7, #4]
    2c1c:	4a08      	ldr	r2, [pc, #32]	; (2c40 <log_is_strdup+0x34>)
    2c1e:	4293      	cmp	r3, r2
    2c20:	d305      	bcc.n	2c2e <log_is_strdup+0x22>
    2c22:	687b      	ldr	r3, [r7, #4]
    2c24:	4a07      	ldr	r2, [pc, #28]	; (2c44 <log_is_strdup+0x38>)
    2c26:	4293      	cmp	r3, r2
    2c28:	d201      	bcs.n	2c2e <log_is_strdup+0x22>
    2c2a:	2301      	movs	r3, #1
    2c2c:	e000      	b.n	2c30 <log_is_strdup+0x24>
    2c2e:	2300      	movs	r3, #0
    2c30:	f003 0301 	and.w	r3, r3, #1
    2c34:	b2db      	uxtb	r3, r3

}
    2c36:	4618      	mov	r0, r3
    2c38:	370c      	adds	r7, #12
    2c3a:	46bd      	mov	sp, r7
    2c3c:	bc80      	pop	{r7}
    2c3e:	4770      	bx	lr
    2c40:	20001fd0 	.word	0x20001fd0
    2c44:	20002070 	.word	0x20002070

00002c48 <log_free>:

void log_free(void *str)
{
    2c48:	b580      	push	{r7, lr}
    2c4a:	b084      	sub	sp, #16
    2c4c:	af00      	add	r7, sp, #0
    2c4e:	6078      	str	r0, [r7, #4]
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    2c50:	687b      	ldr	r3, [r7, #4]
    2c52:	3b04      	subs	r3, #4
    2c54:	60fb      	str	r3, [r7, #12]
						  buf);

	if (atomic_dec(&dup->refcount) == 1) {
    2c56:	68fb      	ldr	r3, [r7, #12]
    2c58:	4618      	mov	r0, r3
    2c5a:	f00d fd21 	bl	106a0 <atomic_dec>
    2c5e:	4603      	mov	r3, r0
    2c60:	2b01      	cmp	r3, #1
    2c62:	d105      	bne.n	2c70 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    2c64:	f107 030c 	add.w	r3, r7, #12
    2c68:	4619      	mov	r1, r3
    2c6a:	4803      	ldr	r0, [pc, #12]	; (2c78 <log_free+0x30>)
    2c6c:	f008 fbb6 	bl	b3dc <k_mem_slab_free>
		if (IS_ENABLED(CONFIG_LOG_STRDUP_POOL_PROFILING)) {
			atomic_dec((atomic_t *)&log_strdup_in_use);
		}
	}
}
    2c70:	bf00      	nop
    2c72:	3710      	adds	r7, #16
    2c74:	46bd      	mov	sp, r7
    2c76:	bd80      	pop	{r7, pc}
    2c78:	200004e8 	.word	0x200004e8

00002c7c <log_from_user>:

	__ASSERT_NO_MSG(false);
}

void log_from_user(struct log_msg_ids src_level, const char *fmt, ...)
{
    2c7c:	b40e      	push	{r1, r2, r3}
    2c7e:	b580      	push	{r7, lr}
    2c80:	b083      	sub	sp, #12
    2c82:	af00      	add	r7, sp, #0
    2c84:	80b8      	strh	r0, [r7, #4]
	ARG_UNUSED(src_level);
	ARG_UNUSED(fmt);

	__ASSERT_NO_MSG(false);
    2c86:	f240 5307 	movw	r3, #1287	; 0x507
    2c8a:	4a08      	ldr	r2, [pc, #32]	; (2cac <log_from_user+0x30>)
    2c8c:	4908      	ldr	r1, [pc, #32]	; (2cb0 <log_from_user+0x34>)
    2c8e:	4809      	ldr	r0, [pc, #36]	; (2cb4 <log_from_user+0x38>)
    2c90:	f00c fff0 	bl	fc74 <printk>
    2c94:	f240 5107 	movw	r1, #1287	; 0x507
    2c98:	4804      	ldr	r0, [pc, #16]	; (2cac <log_from_user+0x30>)
    2c9a:	f00d fc47 	bl	1052c <assert_post_action>
}
    2c9e:	bf00      	nop
    2ca0:	370c      	adds	r7, #12
    2ca2:	46bd      	mov	sp, r7
    2ca4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2ca8:	b003      	add	sp, #12
    2caa:	4770      	bx	lr
    2cac:	000175e8 	.word	0x000175e8
    2cb0:	00017630 	.word	0x00017630
    2cb4:	00017594 	.word	0x00017594

00002cb8 <log_process_thread_timer_expiry_fn>:
{
	return mpsc_pbuf_is_pending(&log_buffer);
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    2cb8:	b580      	push	{r7, lr}
    2cba:	b082      	sub	sp, #8
    2cbc:	af00      	add	r7, sp, #0
    2cbe:	6078      	str	r0, [r7, #4]
	k_sem_give(&log_process_thread_sem);
    2cc0:	4803      	ldr	r0, [pc, #12]	; (2cd0 <log_process_thread_timer_expiry_fn+0x18>)
    2cc2:	f00e f8a2 	bl	10e0a <k_sem_give>
}
    2cc6:	bf00      	nop
    2cc8:	3708      	adds	r7, #8
    2cca:	46bd      	mov	sp, r7
    2ccc:	bd80      	pop	{r7, pc}
    2cce:	bf00      	nop
    2cd0:	20000250 	.word	0x20000250

00002cd4 <log_process_thread_func>:

static void log_process_thread_func(void *dummy1, void *dummy2, void *dummy3)
{
    2cd4:	b580      	push	{r7, lr}
    2cd6:	b084      	sub	sp, #16
    2cd8:	af00      	add	r7, sp, #0
    2cda:	60f8      	str	r0, [r7, #12]
    2cdc:	60b9      	str	r1, [r7, #8]
    2cde:	607a      	str	r2, [r7, #4]
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
    2ce0:	f7ff fba0 	bl	2424 <log_backend_count_get>
    2ce4:	4603      	mov	r3, r0
    2ce6:	2b00      	cmp	r3, #0
    2ce8:	dc0b      	bgt.n	2d02 <log_process_thread_func+0x2e>
    2cea:	f240 5374 	movw	r3, #1396	; 0x574
    2cee:	4a11      	ldr	r2, [pc, #68]	; (2d34 <log_process_thread_func+0x60>)
    2cf0:	4911      	ldr	r1, [pc, #68]	; (2d38 <log_process_thread_func+0x64>)
    2cf2:	4812      	ldr	r0, [pc, #72]	; (2d3c <log_process_thread_func+0x68>)
    2cf4:	f00c ffbe 	bl	fc74 <printk>
    2cf8:	f240 5174 	movw	r1, #1396	; 0x574
    2cfc:	480d      	ldr	r0, [pc, #52]	; (2d34 <log_process_thread_func+0x60>)
    2cfe:	f00d fc15 	bl	1052c <assert_post_action>

	log_init();
    2d02:	f7ff fd95 	bl	2830 <log_init>
	thread_set(k_current_get());
    2d06:	f00e f834 	bl	10d72 <k_current_get>
    2d0a:	4603      	mov	r3, r0
    2d0c:	4618      	mov	r0, r3
    2d0e:	f7ff fddd 	bl	28cc <thread_set>

	while (true) {
		if (log_process(false) == false) {
    2d12:	2000      	movs	r0, #0
    2d14:	f00e f884 	bl	10e20 <log_process>
    2d18:	4603      	mov	r3, r0
    2d1a:	f083 0301 	eor.w	r3, r3, #1
    2d1e:	b2db      	uxtb	r3, r3
    2d20:	2b00      	cmp	r3, #0
    2d22:	d0f6      	beq.n	2d12 <log_process_thread_func+0x3e>
			k_sem_take(&log_process_thread_sem, K_FOREVER);
    2d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2d2c:	4804      	ldr	r0, [pc, #16]	; (2d40 <log_process_thread_func+0x6c>)
    2d2e:	f00e f85c 	bl	10dea <k_sem_take>
		if (log_process(false) == false) {
    2d32:	e7ee      	b.n	2d12 <log_process_thread_func+0x3e>
    2d34:	000175e8 	.word	0x000175e8
    2d38:	000176c8 	.word	0x000176c8
    2d3c:	00017594 	.word	0x00017594
    2d40:	20000250 	.word	0x20000250

00002d44 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    2d44:	b580      	push	{r7, lr}
    2d46:	b08a      	sub	sp, #40	; 0x28
    2d48:	af08      	add	r7, sp, #32
    2d4a:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    2d4c:	2200      	movs	r2, #0
    2d4e:	4914      	ldr	r1, [pc, #80]	; (2da0 <enable_logger+0x5c>)
    2d50:	4814      	ldr	r0, [pc, #80]	; (2da4 <enable_logger+0x60>)
    2d52:	f013 ffe7 	bl	16d24 <k_timer_init>
		/* start logging thread */
		k_thread_create(&logging_thread, logging_stack,
				K_KERNEL_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0,
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
    2d56:	f04f 0000 	mov.w	r0, #0
    2d5a:	f04f 0100 	mov.w	r1, #0
    2d5e:	f00d fd81 	bl	10864 <k_ms_to_ticks_ceil64>
    2d62:	4602      	mov	r2, r0
    2d64:	460b      	mov	r3, r1
		k_thread_create(&logging_thread, logging_stack,
    2d66:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2d6a:	2300      	movs	r3, #0
    2d6c:	9304      	str	r3, [sp, #16]
    2d6e:	230e      	movs	r3, #14
    2d70:	9303      	str	r3, [sp, #12]
    2d72:	2300      	movs	r3, #0
    2d74:	9302      	str	r3, [sp, #8]
    2d76:	2300      	movs	r3, #0
    2d78:	9301      	str	r3, [sp, #4]
    2d7a:	2300      	movs	r3, #0
    2d7c:	9300      	str	r3, [sp, #0]
    2d7e:	4b0a      	ldr	r3, [pc, #40]	; (2da8 <enable_logger+0x64>)
    2d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2d84:	4909      	ldr	r1, [pc, #36]	; (2dac <enable_logger+0x68>)
    2d86:	480a      	ldr	r0, [pc, #40]	; (2db0 <enable_logger+0x6c>)
    2d88:	f00d ffd3 	bl	10d32 <k_thread_create>
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
    2d8c:	4909      	ldr	r1, [pc, #36]	; (2db4 <enable_logger+0x70>)
    2d8e:	4808      	ldr	r0, [pc, #32]	; (2db0 <enable_logger+0x6c>)
    2d90:	f00d fff6 	bl	10d80 <k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
    2d94:	2300      	movs	r3, #0
}
    2d96:	4618      	mov	r0, r3
    2d98:	3708      	adds	r7, #8
    2d9a:	46bd      	mov	sp, r7
    2d9c:	bd80      	pop	{r7, pc}
    2d9e:	bf00      	nop
    2da0:	00002cb9 	.word	0x00002cb9
    2da4:	20000260 	.word	0x20000260
    2da8:	00002cd5 	.word	0x00002cd5
    2dac:	20000e30 	.word	0x20000e30
    2db0:	20000298 	.word	0x20000298
    2db4:	000176e4 	.word	0x000176e4

00002db8 <log_msg_pool_init>:
struct k_mem_slab log_msg_pool;
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
    2db8:	b580      	push	{r7, lr}
    2dba:	af00      	add	r7, sp, #0
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    2dbc:	2320      	movs	r3, #32
    2dbe:	2220      	movs	r2, #32
    2dc0:	4902      	ldr	r1, [pc, #8]	; (2dcc <log_msg_pool_init+0x14>)
    2dc2:	4803      	ldr	r0, [pc, #12]	; (2dd0 <log_msg_pool_init+0x18>)
    2dc4:	f012 fd61 	bl	1588a <k_mem_slab_init>
}
    2dc8:	bf00      	nop
    2dca:	bd80      	pop	{r7, pc}
    2dcc:	20002070 	.word	0x20002070
    2dd0:	20000520 	.word	0x20000520

00002dd4 <log_msg_chunk_alloc>:

	return (!k_is_in_isr() && is_irq_unlocked());
}

union log_msg_chunk *log_msg_chunk_alloc(void)
{
    2dd4:	b580      	push	{r7, lr}
    2dd6:	b082      	sub	sp, #8
    2dd8:	af00      	add	r7, sp, #0
	union log_msg_chunk *msg = NULL;
    2dda:	2300      	movs	r3, #0
    2ddc:	603b      	str	r3, [r7, #0]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
		   block_on_alloc()
    2dde:	f00e fac0 	bl	11362 <block_on_alloc>
    2de2:	4603      	mov	r3, r0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    2de4:	2b00      	cmp	r3, #0
    2de6:	d008      	beq.n	2dfa <log_msg_chunk_alloc+0x26>
		   ? K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS)
    2de8:	f04f 0000 	mov.w	r0, #0
    2dec:	f04f 0100 	mov.w	r1, #0
    2df0:	f00e f959 	bl	110a6 <k_ms_to_ticks_ceil64>
    2df4:	4602      	mov	r2, r0
    2df6:	460b      	mov	r3, r1
    2df8:	e003      	b.n	2e02 <log_msg_chunk_alloc+0x2e>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    2dfa:	f04f 0200 	mov.w	r2, #0
    2dfe:	f04f 0300 	mov.w	r3, #0
    2e02:	4639      	mov	r1, r7
    2e04:	4807      	ldr	r0, [pc, #28]	; (2e24 <log_msg_chunk_alloc+0x50>)
    2e06:	f008 fa41 	bl	b28c <k_mem_slab_alloc>
    2e0a:	6078      	str	r0, [r7, #4]
		   : K_NO_WAIT);

	if (err != 0) {
    2e0c:	687b      	ldr	r3, [r7, #4]
    2e0e:	2b00      	cmp	r3, #0
    2e10:	d003      	beq.n	2e1a <log_msg_chunk_alloc+0x46>
		msg = log_msg_no_space_handle();
    2e12:	f000 f885 	bl	2f20 <log_msg_no_space_handle>
    2e16:	4603      	mov	r3, r0
    2e18:	603b      	str	r3, [r7, #0]
	}

	return msg;
    2e1a:	683b      	ldr	r3, [r7, #0]
}
    2e1c:	4618      	mov	r0, r3
    2e1e:	3708      	adds	r7, #8
    2e20:	46bd      	mov	sp, r7
    2e22:	bd80      	pop	{r7, pc}
    2e24:	20000520 	.word	0x20000520

00002e28 <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
    2e28:	b580      	push	{r7, lr}
    2e2a:	b084      	sub	sp, #16
    2e2c:	af00      	add	r7, sp, #0
    2e2e:	6078      	str	r0, [r7, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
    2e30:	e009      	b.n	2e46 <cont_free+0x1e>
		next = cont->next;
    2e32:	687b      	ldr	r3, [r7, #4]
    2e34:	681b      	ldr	r3, [r3, #0]
    2e36:	60fb      	str	r3, [r7, #12]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    2e38:	1d3b      	adds	r3, r7, #4
    2e3a:	4619      	mov	r1, r3
    2e3c:	4806      	ldr	r0, [pc, #24]	; (2e58 <cont_free+0x30>)
    2e3e:	f008 facd 	bl	b3dc <k_mem_slab_free>
		cont = next;
    2e42:	68fb      	ldr	r3, [r7, #12]
    2e44:	607b      	str	r3, [r7, #4]
	while (cont != NULL) {
    2e46:	687b      	ldr	r3, [r7, #4]
    2e48:	2b00      	cmp	r3, #0
    2e4a:	d1f2      	bne.n	2e32 <cont_free+0xa>
	}
}
    2e4c:	bf00      	nop
    2e4e:	bf00      	nop
    2e50:	3710      	adds	r7, #16
    2e52:	46bd      	mov	sp, r7
    2e54:	bd80      	pop	{r7, pc}
    2e56:	bf00      	nop
    2e58:	20000520 	.word	0x20000520

00002e5c <msg_free>:

static void msg_free(struct log_msg *msg)
{
    2e5c:	b580      	push	{r7, lr}
    2e5e:	b086      	sub	sp, #24
    2e60:	af00      	add	r7, sp, #0
    2e62:	6078      	str	r0, [r7, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
    2e64:	687b      	ldr	r3, [r7, #4]
    2e66:	4618      	mov	r0, r3
    2e68:	f00e faa3 	bl	113b2 <log_msg_nargs_get>
    2e6c:	60f8      	str	r0, [r7, #12]

	/* Free any transient string found in arguments. */
	if (log_msg_is_std(msg) && nargs) {
    2e6e:	687b      	ldr	r3, [r7, #4]
    2e70:	4618      	mov	r0, r3
    2e72:	f00e fa3c 	bl	112ee <log_msg_is_std>
    2e76:	4603      	mov	r3, r0
    2e78:	2b00      	cmp	r3, #0
    2e7a:	d039      	beq.n	2ef0 <msg_free+0x94>
    2e7c:	68fb      	ldr	r3, [r7, #12]
    2e7e:	2b00      	cmp	r3, #0
    2e80:	d036      	beq.n	2ef0 <msg_free+0x94>
		uint32_t i;
		uint32_t smask = 0U;
    2e82:	2300      	movs	r3, #0
    2e84:	613b      	str	r3, [r7, #16]

		for (i = 0U; i < nargs; i++) {
    2e86:	2300      	movs	r3, #0
    2e88:	617b      	str	r3, [r7, #20]
    2e8a:	e02a      	b.n	2ee2 <msg_free+0x86>
			void *buf = (void *)log_msg_arg_get(msg, i);
    2e8c:	687b      	ldr	r3, [r7, #4]
    2e8e:	6979      	ldr	r1, [r7, #20]
    2e90:	4618      	mov	r0, r3
    2e92:	f00e fac5 	bl	11420 <log_msg_arg_get>
    2e96:	4603      	mov	r3, r0
    2e98:	60bb      	str	r3, [r7, #8]

			if (log_is_strdup(buf)) {
    2e9a:	68b8      	ldr	r0, [r7, #8]
    2e9c:	f7ff feb6 	bl	2c0c <log_is_strdup>
    2ea0:	4603      	mov	r3, r0
    2ea2:	2b00      	cmp	r3, #0
    2ea4:	d01a      	beq.n	2edc <msg_free+0x80>
				if (smask == 0U) {
    2ea6:	693b      	ldr	r3, [r7, #16]
    2ea8:	2b00      	cmp	r3, #0
    2eaa:	d10c      	bne.n	2ec6 <msg_free+0x6a>
					 * string duplication candidate detected
					 * since it is time consuming and free
					 * can be called from any context when
					 * log message is being dropped.
					 */
					smask = z_log_get_s_mask(
    2eac:	687b      	ldr	r3, [r7, #4]
    2eae:	4618      	mov	r0, r3
    2eb0:	f00e fadf 	bl	11472 <log_msg_str_get>
    2eb4:	4603      	mov	r3, r0
    2eb6:	68f9      	ldr	r1, [r7, #12]
    2eb8:	4618      	mov	r0, r3
    2eba:	f7ff fb07 	bl	24cc <z_log_get_s_mask>
    2ebe:	6138      	str	r0, [r7, #16]
							log_msg_str_get(msg),
							nargs);
					if (smask == 0U) {
    2ec0:	693b      	ldr	r3, [r7, #16]
    2ec2:	2b00      	cmp	r3, #0
    2ec4:	d012      	beq.n	2eec <msg_free+0x90>
						 * for candidates.
						 */
						break;
					}
				}
				if (smask & BIT(i)) {
    2ec6:	693a      	ldr	r2, [r7, #16]
    2ec8:	697b      	ldr	r3, [r7, #20]
    2eca:	fa22 f303 	lsr.w	r3, r2, r3
    2ece:	f003 0301 	and.w	r3, r3, #1
    2ed2:	2b00      	cmp	r3, #0
    2ed4:	d002      	beq.n	2edc <msg_free+0x80>
					log_free(buf);
    2ed6:	68b8      	ldr	r0, [r7, #8]
    2ed8:	f7ff feb6 	bl	2c48 <log_free>
		for (i = 0U; i < nargs; i++) {
    2edc:	697b      	ldr	r3, [r7, #20]
    2ede:	3301      	adds	r3, #1
    2ee0:	617b      	str	r3, [r7, #20]
    2ee2:	697a      	ldr	r2, [r7, #20]
    2ee4:	68fb      	ldr	r3, [r7, #12]
    2ee6:	429a      	cmp	r2, r3
    2ee8:	d3d0      	bcc.n	2e8c <msg_free+0x30>
	if (log_msg_is_std(msg) && nargs) {
    2eea:	e000      	b.n	2eee <msg_free+0x92>
						break;
    2eec:	bf00      	nop
	if (log_msg_is_std(msg) && nargs) {
    2eee:	bf00      	nop
		 * string. No action required.
		 */
		;
	}

	if (msg->hdr.params.generic.ext == 1) {
    2ef0:	687b      	ldr	r3, [r7, #4]
    2ef2:	7a1b      	ldrb	r3, [r3, #8]
    2ef4:	f003 0302 	and.w	r3, r3, #2
    2ef8:	b2db      	uxtb	r3, r3
    2efa:	2b00      	cmp	r3, #0
    2efc:	d004      	beq.n	2f08 <msg_free+0xac>
		cont_free(msg->payload.ext.next);
    2efe:	687b      	ldr	r3, [r7, #4]
    2f00:	695b      	ldr	r3, [r3, #20]
    2f02:	4618      	mov	r0, r3
    2f04:	f7ff ff90 	bl	2e28 <cont_free>
	}

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    2f08:	1d3b      	adds	r3, r7, #4
    2f0a:	4619      	mov	r1, r3
    2f0c:	4803      	ldr	r0, [pc, #12]	; (2f1c <msg_free+0xc0>)
    2f0e:	f008 fa65 	bl	b3dc <k_mem_slab_free>
}
    2f12:	bf00      	nop
    2f14:	3718      	adds	r7, #24
    2f16:	46bd      	mov	sp, r7
    2f18:	bd80      	pop	{r7, pc}
    2f1a:	bf00      	nop
    2f1c:	20000520 	.word	0x20000520

00002f20 <log_msg_no_space_handle>:

union log_msg_chunk *log_msg_no_space_handle(void)
{
    2f20:	b580      	push	{r7, lr}
    2f22:	b084      	sub	sp, #16
    2f24:	af00      	add	r7, sp, #0
	union log_msg_chunk *msg = NULL;
    2f26:	2300      	movs	r3, #0
    2f28:	607b      	str	r3, [r7, #4]
	bool more;
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
    2f2a:	2001      	movs	r0, #1
    2f2c:	f00e fa0b 	bl	11346 <log_process>
    2f30:	4603      	mov	r3, r0
    2f32:	73fb      	strb	r3, [r7, #15]
			z_log_dropped();
    2f34:	f7ff fdcc 	bl	2ad0 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
					       (void **)&msg,
					       K_NO_WAIT);
    2f38:	f04f 0200 	mov.w	r2, #0
    2f3c:	f04f 0300 	mov.w	r3, #0
			err = k_mem_slab_alloc(&log_msg_pool,
    2f40:	1d39      	adds	r1, r7, #4
    2f42:	4807      	ldr	r0, [pc, #28]	; (2f60 <log_msg_no_space_handle+0x40>)
    2f44:	f008 f9a2 	bl	b28c <k_mem_slab_alloc>
    2f48:	60b8      	str	r0, [r7, #8]
		} while ((err != 0) && more);
    2f4a:	68bb      	ldr	r3, [r7, #8]
    2f4c:	2b00      	cmp	r3, #0
    2f4e:	d002      	beq.n	2f56 <log_msg_no_space_handle+0x36>
    2f50:	7bfb      	ldrb	r3, [r7, #15]
    2f52:	2b00      	cmp	r3, #0
    2f54:	d1e9      	bne.n	2f2a <log_msg_no_space_handle+0xa>
	} else {
		z_log_dropped();
	}
	return msg;
    2f56:	687b      	ldr	r3, [r7, #4]

}
    2f58:	4618      	mov	r0, r3
    2f5a:	3710      	adds	r7, #16
    2f5c:	46bd      	mov	sp, r7
    2f5e:	bd80      	pop	{r7, pc}
    2f60:	20000520 	.word	0x20000520

00002f64 <log_msg_create_n>:
		cont = cont->next;
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
    2f64:	b580      	push	{r7, lr}
    2f66:	b086      	sub	sp, #24
    2f68:	af00      	add	r7, sp, #0
    2f6a:	60f8      	str	r0, [r7, #12]
    2f6c:	60b9      	str	r1, [r7, #8]
    2f6e:	607a      	str	r2, [r7, #4]
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
    2f70:	687b      	ldr	r3, [r7, #4]
    2f72:	2b0e      	cmp	r3, #14
    2f74:	d90b      	bls.n	2f8e <log_msg_create_n+0x2a>
    2f76:	f240 133b 	movw	r3, #315	; 0x13b
    2f7a:	4a14      	ldr	r2, [pc, #80]	; (2fcc <log_msg_create_n+0x68>)
    2f7c:	4914      	ldr	r1, [pc, #80]	; (2fd0 <log_msg_create_n+0x6c>)
    2f7e:	4815      	ldr	r0, [pc, #84]	; (2fd4 <log_msg_create_n+0x70>)
    2f80:	f00c fe78 	bl	fc74 <printk>
    2f84:	f240 113b 	movw	r1, #315	; 0x13b
    2f88:	4810      	ldr	r0, [pc, #64]	; (2fcc <log_msg_create_n+0x68>)
    2f8a:	f00d facf 	bl	1052c <assert_post_action>

	struct  log_msg *msg = NULL;
    2f8e:	2300      	movs	r3, #0
    2f90:	617b      	str	r3, [r7, #20]

	msg = msg_alloc(nargs);
    2f92:	6878      	ldr	r0, [r7, #4]
    2f94:	f00e fa78 	bl	11488 <msg_alloc>
    2f98:	6178      	str	r0, [r7, #20]

	if (msg != NULL) {
    2f9a:	697b      	ldr	r3, [r7, #20]
    2f9c:	2b00      	cmp	r3, #0
    2f9e:	d010      	beq.n	2fc2 <log_msg_create_n+0x5e>
		msg->str = str;
    2fa0:	697b      	ldr	r3, [r7, #20]
    2fa2:	68fa      	ldr	r2, [r7, #12]
    2fa4:	611a      	str	r2, [r3, #16]
		msg->hdr.params.std.nargs = nargs;
    2fa6:	687b      	ldr	r3, [r7, #4]
    2fa8:	f003 030f 	and.w	r3, r3, #15
    2fac:	b2d9      	uxtb	r1, r3
    2fae:	697a      	ldr	r2, [r7, #20]
    2fb0:	7a53      	ldrb	r3, [r2, #9]
    2fb2:	f361 1307 	bfi	r3, r1, #4, #4
    2fb6:	7253      	strb	r3, [r2, #9]
		copy_args_to_msg(msg, args, nargs);
    2fb8:	687a      	ldr	r2, [r7, #4]
    2fba:	68b9      	ldr	r1, [r7, #8]
    2fbc:	6978      	ldr	r0, [r7, #20]
    2fbe:	f00e faa6 	bl	1150e <copy_args_to_msg>
	}

	return msg;
    2fc2:	697b      	ldr	r3, [r7, #20]
}
    2fc4:	4618      	mov	r0, r3
    2fc6:	3718      	adds	r7, #24
    2fc8:	46bd      	mov	sp, r7
    2fca:	bd80      	pop	{r7, pc}
    2fcc:	000176ec 	.word	0x000176ec
    2fd0:	00017718 	.word	0x00017718
    2fd4:	00017724 	.word	0x00017724

00002fd8 <out_func>:

	return ret;
}

static int out_func(int c, void *ctx)
{
    2fd8:	b580      	push	{r7, lr}
    2fda:	b084      	sub	sp, #16
    2fdc:	af00      	add	r7, sp, #0
    2fde:	6078      	str	r0, [r7, #4]
    2fe0:	6039      	str	r1, [r7, #0]
	const struct log_output *out_ctx = (const struct log_output *)ctx;
    2fe2:	683b      	ldr	r3, [r7, #0]
    2fe4:	60fb      	str	r3, [r7, #12]
		/* Backend must be thread safe in synchronous operation. */
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
		return 0;
	}

	if (out_ctx->control_block->offset == out_ctx->size) {
    2fe6:	68fb      	ldr	r3, [r7, #12]
    2fe8:	685b      	ldr	r3, [r3, #4]
    2fea:	681b      	ldr	r3, [r3, #0]
    2fec:	68fa      	ldr	r2, [r7, #12]
    2fee:	68d2      	ldr	r2, [r2, #12]
    2ff0:	4293      	cmp	r3, r2
    2ff2:	d102      	bne.n	2ffa <out_func+0x22>
		log_output_flush(out_ctx);
    2ff4:	68f8      	ldr	r0, [r7, #12]
    2ff6:	f00e fc2d 	bl	11854 <log_output_flush>
	}

	idx = atomic_inc(&out_ctx->control_block->offset);
    2ffa:	68fb      	ldr	r3, [r7, #12]
    2ffc:	685b      	ldr	r3, [r3, #4]
    2ffe:	4618      	mov	r0, r3
    3000:	f00e fba4 	bl	1174c <atomic_inc>
    3004:	60b8      	str	r0, [r7, #8]
	out_ctx->buf[idx] = (uint8_t)c;
    3006:	6879      	ldr	r1, [r7, #4]
    3008:	68fb      	ldr	r3, [r7, #12]
    300a:	689a      	ldr	r2, [r3, #8]
    300c:	68bb      	ldr	r3, [r7, #8]
    300e:	4413      	add	r3, r2
    3010:	b2ca      	uxtb	r2, r1
    3012:	701a      	strb	r2, [r3, #0]

	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
    3014:	68fb      	ldr	r3, [r7, #12]
    3016:	685b      	ldr	r3, [r3, #4]
    3018:	681b      	ldr	r3, [r3, #0]
    301a:	461a      	mov	r2, r3
    301c:	68fb      	ldr	r3, [r7, #12]
    301e:	68db      	ldr	r3, [r3, #12]
    3020:	429a      	cmp	r2, r3
    3022:	d909      	bls.n	3038 <out_func+0x60>
    3024:	2373      	movs	r3, #115	; 0x73
    3026:	4a07      	ldr	r2, [pc, #28]	; (3044 <out_func+0x6c>)
    3028:	4907      	ldr	r1, [pc, #28]	; (3048 <out_func+0x70>)
    302a:	4808      	ldr	r0, [pc, #32]	; (304c <out_func+0x74>)
    302c:	f00c fe22 	bl	fc74 <printk>
    3030:	2173      	movs	r1, #115	; 0x73
    3032:	4804      	ldr	r0, [pc, #16]	; (3044 <out_func+0x6c>)
    3034:	f00d fa7a 	bl	1052c <assert_post_action>

	return 0;
    3038:	2300      	movs	r3, #0
}
    303a:	4618      	mov	r0, r3
    303c:	3710      	adds	r7, #16
    303e:	46bd      	mov	sp, r7
    3040:	bd80      	pop	{r7, pc}
    3042:	bf00      	nop
    3044:	00017764 	.word	0x00017764
    3048:	00017794 	.word	0x00017794
    304c:	000177c4 	.word	0x000177c4

00003050 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    3050:	b40e      	push	{r1, r2, r3}
    3052:	b580      	push	{r7, lr}
    3054:	b085      	sub	sp, #20
    3056:	af00      	add	r7, sp, #0
    3058:	6078      	str	r0, [r7, #4]
	va_list args;
	int length = 0;
    305a:	2300      	movs	r3, #0
    305c:	60fb      	str	r3, [r7, #12]

	va_start(args, fmt);
    305e:	f107 0320 	add.w	r3, r7, #32
    3062:	60bb      	str	r3, [r7, #8]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    3064:	68bb      	ldr	r3, [r7, #8]
    3066:	69fa      	ldr	r2, [r7, #28]
    3068:	6879      	ldr	r1, [r7, #4]
    306a:	4806      	ldr	r0, [pc, #24]	; (3084 <print_formatted+0x34>)
    306c:	f7fe fb26 	bl	16bc <cbvprintf>
    3070:	60f8      	str	r0, [r7, #12]
	va_end(args);

	return length;
    3072:	68fb      	ldr	r3, [r7, #12]
}
    3074:	4618      	mov	r0, r3
    3076:	3714      	adds	r7, #20
    3078:	46bd      	mov	sp, r7
    307a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    307e:	b003      	add	sp, #12
    3080:	4770      	bx	lr
    3082:	bf00      	nop
    3084:	00002fd9 	.word	0x00002fd9

00003088 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
    3088:	b580      	push	{r7, lr}
    308a:	b092      	sub	sp, #72	; 0x48
    308c:	af04      	add	r7, sp, #16
    308e:	60f8      	str	r0, [r7, #12]
    3090:	60b9      	str	r1, [r7, #8]
    3092:	607a      	str	r2, [r7, #4]
	int length;
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
    3094:	68bb      	ldr	r3, [r7, #8]
    3096:	f003 0344 	and.w	r3, r3, #68	; 0x44
	bool format =
    309a:	2b00      	cmp	r3, #0
    309c:	bf14      	ite	ne
    309e:	2301      	movne	r3, #1
    30a0:	2300      	moveq	r3, #0
    30a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
    30a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    30aa:	f083 0301 	eor.w	r3, r3, #1
    30ae:	b2db      	uxtb	r3, r3
    30b0:	2b00      	cmp	r3, #0
    30b2:	d006      	beq.n	30c2 <timestamp_print+0x3a>
		length = print_formatted(output, "[%08lu] ", timestamp);
    30b4:	687a      	ldr	r2, [r7, #4]
    30b6:	4938      	ldr	r1, [pc, #224]	; (3198 <timestamp_print+0x110>)
    30b8:	68f8      	ldr	r0, [r7, #12]
    30ba:	f7ff ffc9 	bl	3050 <print_formatted>
    30be:	6378      	str	r0, [r7, #52]	; 0x34
    30c0:	e065      	b.n	318e <timestamp_print+0x106>
	} else if (freq != 0U) {
    30c2:	4b36      	ldr	r3, [pc, #216]	; (319c <timestamp_print+0x114>)
    30c4:	681b      	ldr	r3, [r3, #0]
    30c6:	2b00      	cmp	r3, #0
    30c8:	d05f      	beq.n	318a <timestamp_print+0x102>
		uint32_t hours;
		uint32_t mins;
		uint32_t ms;
		uint32_t us;

		timestamp /= timestamp_div;
    30ca:	4b35      	ldr	r3, [pc, #212]	; (31a0 <timestamp_print+0x118>)
    30cc:	681b      	ldr	r3, [r3, #0]
    30ce:	687a      	ldr	r2, [r7, #4]
    30d0:	fbb2 f3f3 	udiv	r3, r2, r3
    30d4:	607b      	str	r3, [r7, #4]
		total_seconds = timestamp / freq;
    30d6:	4b31      	ldr	r3, [pc, #196]	; (319c <timestamp_print+0x114>)
    30d8:	681b      	ldr	r3, [r3, #0]
    30da:	687a      	ldr	r2, [r7, #4]
    30dc:	fbb2 f3f3 	udiv	r3, r2, r3
    30e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		seconds = total_seconds;
    30e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    30e4:	62bb      	str	r3, [r7, #40]	; 0x28
		hours = seconds / 3600U;
    30e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    30e8:	4a2e      	ldr	r2, [pc, #184]	; (31a4 <timestamp_print+0x11c>)
    30ea:	fba2 2303 	umull	r2, r3, r2, r3
    30ee:	0adb      	lsrs	r3, r3, #11
    30f0:	627b      	str	r3, [r7, #36]	; 0x24
		seconds -= hours * 3600U;
    30f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    30f4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    30f8:	fb02 f303 	mul.w	r3, r2, r3
    30fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    30fe:	1ad3      	subs	r3, r2, r3
    3100:	62bb      	str	r3, [r7, #40]	; 0x28
		mins = seconds / 60U;
    3102:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3104:	4a28      	ldr	r2, [pc, #160]	; (31a8 <timestamp_print+0x120>)
    3106:	fba2 2303 	umull	r2, r3, r2, r3
    310a:	095b      	lsrs	r3, r3, #5
    310c:	623b      	str	r3, [r7, #32]
		seconds -= mins * 60U;
    310e:	6a3a      	ldr	r2, [r7, #32]
    3110:	4613      	mov	r3, r2
    3112:	011b      	lsls	r3, r3, #4
    3114:	1a9b      	subs	r3, r3, r2
    3116:	009b      	lsls	r3, r3, #2
    3118:	461a      	mov	r2, r3
    311a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    311c:	1a9b      	subs	r3, r3, r2
    311e:	62bb      	str	r3, [r7, #40]	; 0x28

		remainder = timestamp % freq;
    3120:	4b1e      	ldr	r3, [pc, #120]	; (319c <timestamp_print+0x114>)
    3122:	681a      	ldr	r2, [r3, #0]
    3124:	687b      	ldr	r3, [r7, #4]
    3126:	fbb3 f1f2 	udiv	r1, r3, r2
    312a:	fb02 f201 	mul.w	r2, r2, r1
    312e:	1a9b      	subs	r3, r3, r2
    3130:	61fb      	str	r3, [r7, #28]
		ms = (remainder * 1000U) / freq;
    3132:	69fb      	ldr	r3, [r7, #28]
    3134:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3138:	fb02 f203 	mul.w	r2, r2, r3
    313c:	4b17      	ldr	r3, [pc, #92]	; (319c <timestamp_print+0x114>)
    313e:	681b      	ldr	r3, [r3, #0]
    3140:	fbb2 f3f3 	udiv	r3, r2, r3
    3144:	61bb      	str	r3, [r7, #24]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3146:	69fb      	ldr	r3, [r7, #28]
    3148:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    314c:	fb02 f203 	mul.w	r2, r2, r3
    3150:	4b12      	ldr	r3, [pc, #72]	; (319c <timestamp_print+0x114>)
    3152:	681b      	ldr	r3, [r3, #0]
    3154:	69b9      	ldr	r1, [r7, #24]
    3156:	fb01 f303 	mul.w	r3, r1, r3
    315a:	1ad3      	subs	r3, r2, r3
    315c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3160:	fb02 f203 	mul.w	r2, r2, r3
    3164:	4b0d      	ldr	r3, [pc, #52]	; (319c <timestamp_print+0x114>)
    3166:	681b      	ldr	r3, [r3, #0]
    3168:	fbb2 f3f3 	udiv	r3, r2, r3
    316c:	617b      	str	r3, [r7, #20]
			length = print_formatted(output,
					"1970-01-01T%02u:%02u:%02u.%06uZ ",
					hours, mins, seconds, ms * 1000U + us);
#endif
		} else {
			length = print_formatted(output,
    316e:	697b      	ldr	r3, [r7, #20]
    3170:	9302      	str	r3, [sp, #8]
    3172:	69bb      	ldr	r3, [r7, #24]
    3174:	9301      	str	r3, [sp, #4]
    3176:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3178:	9300      	str	r3, [sp, #0]
    317a:	6a3b      	ldr	r3, [r7, #32]
    317c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    317e:	490b      	ldr	r1, [pc, #44]	; (31ac <timestamp_print+0x124>)
    3180:	68f8      	ldr	r0, [r7, #12]
    3182:	f7ff ff65 	bl	3050 <print_formatted>
    3186:	6378      	str	r0, [r7, #52]	; 0x34
    3188:	e001      	b.n	318e <timestamp_print+0x106>
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
    318a:	2300      	movs	r3, #0
    318c:	637b      	str	r3, [r7, #52]	; 0x34
	}

	return length;
    318e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    3190:	4618      	mov	r0, r3
    3192:	3738      	adds	r7, #56	; 0x38
    3194:	46bd      	mov	sp, r7
    3196:	bd80      	pop	{r7, pc}
    3198:	000177e4 	.word	0x000177e4
    319c:	20000540 	.word	0x20000540
    31a0:	20000544 	.word	0x20000544
    31a4:	91a2b3c5 	.word	0x91a2b3c5
    31a8:	88888889 	.word	0x88888889
    31ac:	000177f0 	.word	0x000177f0

000031b0 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
    31b0:	b580      	push	{r7, lr}
    31b2:	b086      	sub	sp, #24
    31b4:	af00      	add	r7, sp, #0
    31b6:	60f8      	str	r0, [r7, #12]
    31b8:	607b      	str	r3, [r7, #4]
    31ba:	460b      	mov	r3, r1
    31bc:	72fb      	strb	r3, [r7, #11]
    31be:	4613      	mov	r3, r2
    31c0:	72bb      	strb	r3, [r7, #10]
	if (color) {
    31c2:	7afb      	ldrb	r3, [r7, #11]
    31c4:	2b00      	cmp	r3, #0
    31c6:	d014      	beq.n	31f2 <color_print+0x42>
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    31c8:	7abb      	ldrb	r3, [r7, #10]
    31ca:	2b00      	cmp	r3, #0
    31cc:	d00a      	beq.n	31e4 <color_print+0x34>
		const char *log_color = start && (colors[level] != NULL) ?
    31ce:	4a0b      	ldr	r2, [pc, #44]	; (31fc <color_print+0x4c>)
    31d0:	687b      	ldr	r3, [r7, #4]
    31d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    31d6:	2b00      	cmp	r3, #0
    31d8:	d004      	beq.n	31e4 <color_print+0x34>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    31da:	4a08      	ldr	r2, [pc, #32]	; (31fc <color_print+0x4c>)
    31dc:	687b      	ldr	r3, [r7, #4]
    31de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    31e2:	e000      	b.n	31e6 <color_print+0x36>
    31e4:	4b06      	ldr	r3, [pc, #24]	; (3200 <color_print+0x50>)
		const char *log_color = start && (colors[level] != NULL) ?
    31e6:	617b      	str	r3, [r7, #20]
		print_formatted(output, "%s", log_color);
    31e8:	697a      	ldr	r2, [r7, #20]
    31ea:	4906      	ldr	r1, [pc, #24]	; (3204 <color_print+0x54>)
    31ec:	68f8      	ldr	r0, [r7, #12]
    31ee:	f7ff ff2f 	bl	3050 <print_formatted>
	}
}
    31f2:	bf00      	nop
    31f4:	3718      	adds	r7, #24
    31f6:	46bd      	mov	sp, r7
    31f8:	bd80      	pop	{r7, pc}
    31fa:	bf00      	nop
    31fc:	0001aab0 	.word	0x0001aab0
    3200:	0001780c 	.word	0x0001780c
    3204:	00017814 	.word	0x00017814

00003208 <ids_print>:


static int ids_print(const struct log_output *output, bool level_on,
		     bool func_on, uint32_t domain_id, int16_t source_id,
		     uint32_t level)
{
    3208:	b590      	push	{r4, r7, lr}
    320a:	b087      	sub	sp, #28
    320c:	af00      	add	r7, sp, #0
    320e:	60f8      	str	r0, [r7, #12]
    3210:	607b      	str	r3, [r7, #4]
    3212:	460b      	mov	r3, r1
    3214:	72fb      	strb	r3, [r7, #11]
    3216:	4613      	mov	r3, r2
    3218:	72bb      	strb	r3, [r7, #10]
	int total = 0;
    321a:	2300      	movs	r3, #0
    321c:	617b      	str	r3, [r7, #20]

	if (level_on) {
    321e:	7afb      	ldrb	r3, [r7, #11]
    3220:	2b00      	cmp	r3, #0
    3222:	d00c      	beq.n	323e <ids_print+0x36>
		total += print_formatted(output, "<%s> ", severity[level]);
    3224:	4a19      	ldr	r2, [pc, #100]	; (328c <ids_print+0x84>)
    3226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    322c:	461a      	mov	r2, r3
    322e:	4918      	ldr	r1, [pc, #96]	; (3290 <ids_print+0x88>)
    3230:	68f8      	ldr	r0, [r7, #12]
    3232:	f7ff ff0d 	bl	3050 <print_formatted>
    3236:	4602      	mov	r2, r0
    3238:	697b      	ldr	r3, [r7, #20]
    323a:	4413      	add	r3, r2
    323c:	617b      	str	r3, [r7, #20]
	}

	if (source_id >= 0) {
    323e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
    3242:	2b00      	cmp	r3, #0
    3244:	db1d      	blt.n	3282 <ids_print+0x7a>
		total += print_formatted(output,
    3246:	7abb      	ldrb	r3, [r7, #10]
    3248:	2b00      	cmp	r3, #0
    324a:	d009      	beq.n	3260 <ids_print+0x58>
				(func_on &&
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    324c:	2201      	movs	r2, #1
    324e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3250:	fa02 f303 	lsl.w	r3, r2, r3
    3254:	f003 0310 	and.w	r3, r3, #16
				(func_on &&
    3258:	2b00      	cmp	r3, #0
    325a:	d001      	beq.n	3260 <ids_print+0x58>
		total += print_formatted(output,
    325c:	4c0d      	ldr	r4, [pc, #52]	; (3294 <ids_print+0x8c>)
    325e:	e000      	b.n	3262 <ids_print+0x5a>
    3260:	4c0d      	ldr	r4, [pc, #52]	; (3298 <ids_print+0x90>)
    3262:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
    3266:	4619      	mov	r1, r3
    3268:	6878      	ldr	r0, [r7, #4]
    326a:	f00d feb7 	bl	10fdc <log_source_name_get>
    326e:	4603      	mov	r3, r0
    3270:	461a      	mov	r2, r3
    3272:	4621      	mov	r1, r4
    3274:	68f8      	ldr	r0, [r7, #12]
    3276:	f7ff feeb 	bl	3050 <print_formatted>
    327a:	4602      	mov	r2, r0
    327c:	697b      	ldr	r3, [r7, #20]
    327e:	4413      	add	r3, r2
    3280:	617b      	str	r3, [r7, #20]
				"%s." : "%s: ",
				log_source_name_get(domain_id, source_id));
	}

	return total;
    3282:	697b      	ldr	r3, [r7, #20]
}
    3284:	4618      	mov	r0, r3
    3286:	371c      	adds	r7, #28
    3288:	46bd      	mov	sp, r7
    328a:	bd90      	pop	{r4, r7, pc}
    328c:	0001aa9c 	.word	0x0001aa9c
    3290:	00017818 	.word	0x00017818
    3294:	00017820 	.word	0x00017820
    3298:	00017824 	.word	0x00017824

0000329c <newline_print>:

static void newline_print(const struct log_output *ctx, uint32_t flags)
{
    329c:	b580      	push	{r7, lr}
    329e:	b082      	sub	sp, #8
    32a0:	af00      	add	r7, sp, #0
    32a2:	6078      	str	r0, [r7, #4]
    32a4:	6039      	str	r1, [r7, #0]
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    32a6:	683b      	ldr	r3, [r7, #0]
    32a8:	f003 0310 	and.w	r3, r3, #16
    32ac:	2b00      	cmp	r3, #0
    32ae:	d10e      	bne.n	32ce <newline_print+0x32>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    32b0:	683b      	ldr	r3, [r7, #0]
    32b2:	f003 0320 	and.w	r3, r3, #32
    32b6:	2b00      	cmp	r3, #0
    32b8:	d004      	beq.n	32c4 <newline_print+0x28>
		print_formatted(ctx, "\n");
    32ba:	4907      	ldr	r1, [pc, #28]	; (32d8 <newline_print+0x3c>)
    32bc:	6878      	ldr	r0, [r7, #4]
    32be:	f7ff fec7 	bl	3050 <print_formatted>
    32c2:	e005      	b.n	32d0 <newline_print+0x34>
	} else {
		print_formatted(ctx, "\r\n");
    32c4:	4905      	ldr	r1, [pc, #20]	; (32dc <newline_print+0x40>)
    32c6:	6878      	ldr	r0, [r7, #4]
    32c8:	f7ff fec2 	bl	3050 <print_formatted>
    32cc:	e000      	b.n	32d0 <newline_print+0x34>
		return;
    32ce:	bf00      	nop
	}
}
    32d0:	3708      	adds	r7, #8
    32d2:	46bd      	mov	sp, r7
    32d4:	bd80      	pop	{r7, pc}
    32d6:	bf00      	nop
    32d8:	0001782c 	.word	0x0001782c
    32dc:	00017830 	.word	0x00017830

000032e0 <std_print>:

static void std_print(struct log_msg *msg,
		      const struct log_output *output)
{
    32e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    32e2:	b09d      	sub	sp, #116	; 0x74
    32e4:	af0e      	add	r7, sp, #56	; 0x38
    32e6:	6278      	str	r0, [r7, #36]	; 0x24
    32e8:	6239      	str	r1, [r7, #32]
	const char *str = log_msg_str_get(msg);
    32ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
    32ec:	f00e f8c1 	bl	11472 <log_msg_str_get>
    32f0:	6338      	str	r0, [r7, #48]	; 0x30
	uint32_t nargs = log_msg_nargs_get(msg);
    32f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
    32f4:	f00e f85d 	bl	113b2 <log_msg_nargs_get>
    32f8:	62f8      	str	r0, [r7, #44]	; 0x2c
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
    32fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    32fc:	009b      	lsls	r3, r3, #2
    32fe:	3307      	adds	r3, #7
    3300:	08db      	lsrs	r3, r3, #3
    3302:	00db      	lsls	r3, r3, #3
    3304:	ebad 0d03 	sub.w	sp, sp, r3
    3308:	ab0e      	add	r3, sp, #56	; 0x38
    330a:	3307      	adds	r3, #7
    330c:	08db      	lsrs	r3, r3, #3
    330e:	00db      	lsls	r3, r3, #3
    3310:	62bb      	str	r3, [r7, #40]	; 0x28
	int i;

	for (i = 0; i < nargs; i++) {
    3312:	2300      	movs	r3, #0
    3314:	637b      	str	r3, [r7, #52]	; 0x34
    3316:	e00c      	b.n	3332 <std_print+0x52>
		args[i] = log_msg_arg_get(msg, i);
    3318:	6b79      	ldr	r1, [r7, #52]	; 0x34
    331a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    331c:	009b      	lsls	r3, r3, #2
    331e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3320:	18d4      	adds	r4, r2, r3
    3322:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3324:	f00e f87c 	bl	11420 <log_msg_arg_get>
    3328:	4603      	mov	r3, r0
    332a:	6023      	str	r3, [r4, #0]
	for (i = 0; i < nargs; i++) {
    332c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    332e:	3301      	adds	r3, #1
    3330:	637b      	str	r3, [r7, #52]	; 0x34
    3332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    3334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3336:	429a      	cmp	r2, r3
    3338:	d8ee      	bhi.n	3318 <std_print+0x38>
	}

	switch (log_msg_nargs_get(msg)) {
    333a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    333c:	f00e f839 	bl	113b2 <log_msg_nargs_get>
    3340:	4603      	mov	r3, r0
    3342:	2b0f      	cmp	r3, #15
    3344:	f200 828f 	bhi.w	3866 <std_print+0x586>
    3348:	a201      	add	r2, pc, #4	; (adr r2, 3350 <std_print+0x70>)
    334a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    334e:	bf00      	nop
    3350:	00003391 	.word	0x00003391
    3354:	0000339b 	.word	0x0000339b
    3358:	000033ab 	.word	0x000033ab
    335c:	000033bf 	.word	0x000033bf
    3360:	000033dd 	.word	0x000033dd
    3364:	00003405 	.word	0x00003405
    3368:	00003435 	.word	0x00003435
    336c:	0000346d 	.word	0x0000346d
    3370:	000034ad 	.word	0x000034ad
    3374:	000034f7 	.word	0x000034f7
    3378:	0000354b 	.word	0x0000354b
    337c:	000035af 	.word	0x000035af
    3380:	00003623 	.word	0x00003623
    3384:	000036a7 	.word	0x000036a7
    3388:	0000373b 	.word	0x0000373b
    338c:	000037cb 	.word	0x000037cb
	case 0:
		print_formatted(output, str);
    3390:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3392:	6a38      	ldr	r0, [r7, #32]
    3394:	f7ff fe5c 	bl	3050 <print_formatted>
		break;
    3398:	e266      	b.n	3868 <std_print+0x588>
	case 1:
		print_formatted(output, str, args[0]);
    339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    339c:	681b      	ldr	r3, [r3, #0]
    339e:	461a      	mov	r2, r3
    33a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
    33a2:	6a38      	ldr	r0, [r7, #32]
    33a4:	f7ff fe54 	bl	3050 <print_formatted>
		break;
    33a8:	e25e      	b.n	3868 <std_print+0x588>
	case 2:
		print_formatted(output, str, args[0], args[1]);
    33aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    33ac:	681a      	ldr	r2, [r3, #0]
    33ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    33b0:	3304      	adds	r3, #4
    33b2:	681b      	ldr	r3, [r3, #0]
    33b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
    33b6:	6a38      	ldr	r0, [r7, #32]
    33b8:	f7ff fe4a 	bl	3050 <print_formatted>
		break;
    33bc:	e254      	b.n	3868 <std_print+0x588>
	case 3:
		print_formatted(output, str, args[0], args[1], args[2]);
    33be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    33c0:	681a      	ldr	r2, [r3, #0]
    33c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    33c4:	3304      	adds	r3, #4
    33c6:	6819      	ldr	r1, [r3, #0]
    33c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    33ca:	3308      	adds	r3, #8
    33cc:	681b      	ldr	r3, [r3, #0]
    33ce:	9300      	str	r3, [sp, #0]
    33d0:	460b      	mov	r3, r1
    33d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
    33d4:	6a38      	ldr	r0, [r7, #32]
    33d6:	f7ff fe3b 	bl	3050 <print_formatted>
		break;
    33da:	e245      	b.n	3868 <std_print+0x588>
	case 4:
		print_formatted(output, str, args[0], args[1], args[2],
    33dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    33de:	6819      	ldr	r1, [r3, #0]
    33e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    33e2:	3304      	adds	r3, #4
    33e4:	6818      	ldr	r0, [r3, #0]
    33e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    33e8:	3308      	adds	r3, #8
    33ea:	681b      	ldr	r3, [r3, #0]
				args[3]);
    33ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
    33ee:	320c      	adds	r2, #12
		print_formatted(output, str, args[0], args[1], args[2],
    33f0:	6812      	ldr	r2, [r2, #0]
    33f2:	9201      	str	r2, [sp, #4]
    33f4:	9300      	str	r3, [sp, #0]
    33f6:	4603      	mov	r3, r0
    33f8:	460a      	mov	r2, r1
    33fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
    33fc:	6a38      	ldr	r0, [r7, #32]
    33fe:	f7ff fe27 	bl	3050 <print_formatted>
		break;
    3402:	e231      	b.n	3868 <std_print+0x588>
	case 5:
		print_formatted(output, str, args[0], args[1], args[2],
    3404:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3406:	6818      	ldr	r0, [r3, #0]
    3408:	6abb      	ldr	r3, [r7, #40]	; 0x28
    340a:	3304      	adds	r3, #4
    340c:	681c      	ldr	r4, [r3, #0]
    340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3410:	3308      	adds	r3, #8
    3412:	681b      	ldr	r3, [r3, #0]
				args[3], args[4]);
    3414:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3416:	320c      	adds	r2, #12
		print_formatted(output, str, args[0], args[1], args[2],
    3418:	6812      	ldr	r2, [r2, #0]
				args[3], args[4]);
    341a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    341c:	3110      	adds	r1, #16
		print_formatted(output, str, args[0], args[1], args[2],
    341e:	6809      	ldr	r1, [r1, #0]
    3420:	9102      	str	r1, [sp, #8]
    3422:	9201      	str	r2, [sp, #4]
    3424:	9300      	str	r3, [sp, #0]
    3426:	4623      	mov	r3, r4
    3428:	4602      	mov	r2, r0
    342a:	6b39      	ldr	r1, [r7, #48]	; 0x30
    342c:	6a38      	ldr	r0, [r7, #32]
    342e:	f7ff fe0f 	bl	3050 <print_formatted>
		break;
    3432:	e219      	b.n	3868 <std_print+0x588>
	case 6:
		print_formatted(output, str, args[0], args[1], args[2],
    3434:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3436:	681c      	ldr	r4, [r3, #0]
    3438:	6abb      	ldr	r3, [r7, #40]	; 0x28
    343a:	3304      	adds	r3, #4
    343c:	681d      	ldr	r5, [r3, #0]
    343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3440:	3308      	adds	r3, #8
    3442:	681b      	ldr	r3, [r3, #0]
				args[3], args[4], args[5]);
    3444:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3446:	320c      	adds	r2, #12
		print_formatted(output, str, args[0], args[1], args[2],
    3448:	6812      	ldr	r2, [r2, #0]
				args[3], args[4], args[5]);
    344a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    344c:	3110      	adds	r1, #16
		print_formatted(output, str, args[0], args[1], args[2],
    344e:	6809      	ldr	r1, [r1, #0]
				args[3], args[4], args[5]);
    3450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3452:	3014      	adds	r0, #20
		print_formatted(output, str, args[0], args[1], args[2],
    3454:	6800      	ldr	r0, [r0, #0]
    3456:	9003      	str	r0, [sp, #12]
    3458:	9102      	str	r1, [sp, #8]
    345a:	9201      	str	r2, [sp, #4]
    345c:	9300      	str	r3, [sp, #0]
    345e:	462b      	mov	r3, r5
    3460:	4622      	mov	r2, r4
    3462:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3464:	6a38      	ldr	r0, [r7, #32]
    3466:	f7ff fdf3 	bl	3050 <print_formatted>
		break;
    346a:	e1fd      	b.n	3868 <std_print+0x588>
	case 7:
		print_formatted(output, str, args[0], args[1], args[2],
    346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    346e:	681d      	ldr	r5, [r3, #0]
    3470:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3472:	3304      	adds	r3, #4
    3474:	681e      	ldr	r6, [r3, #0]
    3476:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3478:	3308      	adds	r3, #8
    347a:	681b      	ldr	r3, [r3, #0]
				args[3], args[4], args[5], args[6]);
    347c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    347e:	320c      	adds	r2, #12
		print_formatted(output, str, args[0], args[1], args[2],
    3480:	6812      	ldr	r2, [r2, #0]
				args[3], args[4], args[5], args[6]);
    3482:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3484:	3110      	adds	r1, #16
		print_formatted(output, str, args[0], args[1], args[2],
    3486:	6809      	ldr	r1, [r1, #0]
				args[3], args[4], args[5], args[6]);
    3488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    348a:	3014      	adds	r0, #20
		print_formatted(output, str, args[0], args[1], args[2],
    348c:	6800      	ldr	r0, [r0, #0]
				args[3], args[4], args[5], args[6]);
    348e:	6abc      	ldr	r4, [r7, #40]	; 0x28
    3490:	3418      	adds	r4, #24
		print_formatted(output, str, args[0], args[1], args[2],
    3492:	6824      	ldr	r4, [r4, #0]
    3494:	9404      	str	r4, [sp, #16]
    3496:	9003      	str	r0, [sp, #12]
    3498:	9102      	str	r1, [sp, #8]
    349a:	9201      	str	r2, [sp, #4]
    349c:	9300      	str	r3, [sp, #0]
    349e:	4633      	mov	r3, r6
    34a0:	462a      	mov	r2, r5
    34a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
    34a4:	6a38      	ldr	r0, [r7, #32]
    34a6:	f7ff fdd3 	bl	3050 <print_formatted>
		break;
    34aa:	e1dd      	b.n	3868 <std_print+0x588>
	case 8:
		print_formatted(output, str, args[0], args[1], args[2],
    34ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34ae:	681e      	ldr	r6, [r3, #0]
    34b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34b2:	3304      	adds	r3, #4
    34b4:	681b      	ldr	r3, [r3, #0]
    34b6:	61fb      	str	r3, [r7, #28]
    34b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34ba:	3308      	adds	r3, #8
    34bc:	681b      	ldr	r3, [r3, #0]
				args[3], args[4], args[5], args[6], args[7]);
    34be:	6aba      	ldr	r2, [r7, #40]	; 0x28
    34c0:	320c      	adds	r2, #12
		print_formatted(output, str, args[0], args[1], args[2],
    34c2:	6812      	ldr	r2, [r2, #0]
				args[3], args[4], args[5], args[6], args[7]);
    34c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    34c6:	3110      	adds	r1, #16
		print_formatted(output, str, args[0], args[1], args[2],
    34c8:	6809      	ldr	r1, [r1, #0]
				args[3], args[4], args[5], args[6], args[7]);
    34ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    34cc:	3014      	adds	r0, #20
		print_formatted(output, str, args[0], args[1], args[2],
    34ce:	6800      	ldr	r0, [r0, #0]
				args[3], args[4], args[5], args[6], args[7]);
    34d0:	6abc      	ldr	r4, [r7, #40]	; 0x28
    34d2:	3418      	adds	r4, #24
		print_formatted(output, str, args[0], args[1], args[2],
    34d4:	6824      	ldr	r4, [r4, #0]
				args[3], args[4], args[5], args[6], args[7]);
    34d6:	6abd      	ldr	r5, [r7, #40]	; 0x28
    34d8:	351c      	adds	r5, #28
		print_formatted(output, str, args[0], args[1], args[2],
    34da:	682d      	ldr	r5, [r5, #0]
    34dc:	9505      	str	r5, [sp, #20]
    34de:	9404      	str	r4, [sp, #16]
    34e0:	9003      	str	r0, [sp, #12]
    34e2:	9102      	str	r1, [sp, #8]
    34e4:	9201      	str	r2, [sp, #4]
    34e6:	9300      	str	r3, [sp, #0]
    34e8:	69fb      	ldr	r3, [r7, #28]
    34ea:	4632      	mov	r2, r6
    34ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
    34ee:	6a38      	ldr	r0, [r7, #32]
    34f0:	f7ff fdae 	bl	3050 <print_formatted>
		break;
    34f4:	e1b8      	b.n	3868 <std_print+0x588>
	case 9:
		print_formatted(output, str, args[0], args[1], args[2],
    34f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34f8:	681b      	ldr	r3, [r3, #0]
    34fa:	61fb      	str	r3, [r7, #28]
    34fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    34fe:	3304      	adds	r3, #4
    3500:	6819      	ldr	r1, [r3, #0]
    3502:	61b9      	str	r1, [r7, #24]
    3504:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3506:	3308      	adds	r3, #8
    3508:	681b      	ldr	r3, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
    350a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    350c:	320c      	adds	r2, #12
		print_formatted(output, str, args[0], args[1], args[2],
    350e:	6812      	ldr	r2, [r2, #0]
				args[3], args[4], args[5], args[6],  args[7],
    3510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3512:	3110      	adds	r1, #16
		print_formatted(output, str, args[0], args[1], args[2],
    3514:	6809      	ldr	r1, [r1, #0]
				args[3], args[4], args[5], args[6],  args[7],
    3516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3518:	3014      	adds	r0, #20
		print_formatted(output, str, args[0], args[1], args[2],
    351a:	6800      	ldr	r0, [r0, #0]
				args[3], args[4], args[5], args[6],  args[7],
    351c:	6abc      	ldr	r4, [r7, #40]	; 0x28
    351e:	3418      	adds	r4, #24
		print_formatted(output, str, args[0], args[1], args[2],
    3520:	6824      	ldr	r4, [r4, #0]
				args[3], args[4], args[5], args[6],  args[7],
    3522:	6abd      	ldr	r5, [r7, #40]	; 0x28
    3524:	351c      	adds	r5, #28
		print_formatted(output, str, args[0], args[1], args[2],
    3526:	682d      	ldr	r5, [r5, #0]
				args[8]);
    3528:	6abe      	ldr	r6, [r7, #40]	; 0x28
    352a:	3620      	adds	r6, #32
		print_formatted(output, str, args[0], args[1], args[2],
    352c:	6836      	ldr	r6, [r6, #0]
    352e:	9606      	str	r6, [sp, #24]
    3530:	9505      	str	r5, [sp, #20]
    3532:	9404      	str	r4, [sp, #16]
    3534:	9003      	str	r0, [sp, #12]
    3536:	9102      	str	r1, [sp, #8]
    3538:	9201      	str	r2, [sp, #4]
    353a:	9300      	str	r3, [sp, #0]
    353c:	69bb      	ldr	r3, [r7, #24]
    353e:	69fa      	ldr	r2, [r7, #28]
    3540:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3542:	6a38      	ldr	r0, [r7, #32]
    3544:	f7ff fd84 	bl	3050 <print_formatted>
		break;
    3548:	e18e      	b.n	3868 <std_print+0x588>
	case 10:
		print_formatted(output, str, args[0], args[1], args[2],
    354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    354c:	681b      	ldr	r3, [r3, #0]
    354e:	61fb      	str	r3, [r7, #28]
    3550:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3552:	3304      	adds	r3, #4
    3554:	6819      	ldr	r1, [r3, #0]
    3556:	61b9      	str	r1, [r7, #24]
    3558:	6abb      	ldr	r3, [r7, #40]	; 0x28
    355a:	3308      	adds	r3, #8
    355c:	681b      	ldr	r3, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
    355e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3560:	320c      	adds	r2, #12
		print_formatted(output, str, args[0], args[1], args[2],
    3562:	6812      	ldr	r2, [r2, #0]
				args[3], args[4], args[5], args[6],  args[7],
    3564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3566:	3110      	adds	r1, #16
		print_formatted(output, str, args[0], args[1], args[2],
    3568:	6809      	ldr	r1, [r1, #0]
				args[3], args[4], args[5], args[6],  args[7],
    356a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    356c:	3014      	adds	r0, #20
		print_formatted(output, str, args[0], args[1], args[2],
    356e:	6800      	ldr	r0, [r0, #0]
    3570:	6178      	str	r0, [r7, #20]
				args[3], args[4], args[5], args[6],  args[7],
    3572:	6abc      	ldr	r4, [r7, #40]	; 0x28
    3574:	3418      	adds	r4, #24
		print_formatted(output, str, args[0], args[1], args[2],
    3576:	6824      	ldr	r4, [r4, #0]
				args[3], args[4], args[5], args[6],  args[7],
    3578:	6abd      	ldr	r5, [r7, #40]	; 0x28
    357a:	351c      	adds	r5, #28
		print_formatted(output, str, args[0], args[1], args[2],
    357c:	682d      	ldr	r5, [r5, #0]
				args[8], args[9]);
    357e:	6abe      	ldr	r6, [r7, #40]	; 0x28
    3580:	3620      	adds	r6, #32
		print_formatted(output, str, args[0], args[1], args[2],
    3582:	6836      	ldr	r6, [r6, #0]
				args[8], args[9]);
    3584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3586:	f100 0c24 	add.w	ip, r0, #36	; 0x24
		print_formatted(output, str, args[0], args[1], args[2],
    358a:	f8dc 0000 	ldr.w	r0, [ip]
    358e:	9007      	str	r0, [sp, #28]
    3590:	9606      	str	r6, [sp, #24]
    3592:	9505      	str	r5, [sp, #20]
    3594:	9404      	str	r4, [sp, #16]
    3596:	6978      	ldr	r0, [r7, #20]
    3598:	9003      	str	r0, [sp, #12]
    359a:	9102      	str	r1, [sp, #8]
    359c:	9201      	str	r2, [sp, #4]
    359e:	9300      	str	r3, [sp, #0]
    35a0:	69bb      	ldr	r3, [r7, #24]
    35a2:	69fa      	ldr	r2, [r7, #28]
    35a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
    35a6:	6a38      	ldr	r0, [r7, #32]
    35a8:	f7ff fd52 	bl	3050 <print_formatted>
		break;
    35ac:	e15c      	b.n	3868 <std_print+0x588>
	case 11:
		print_formatted(output, str, args[0], args[1], args[2],
    35ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    35b0:	681b      	ldr	r3, [r3, #0]
    35b2:	61fb      	str	r3, [r7, #28]
    35b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    35b6:	3304      	adds	r3, #4
    35b8:	6819      	ldr	r1, [r3, #0]
    35ba:	61b9      	str	r1, [r7, #24]
    35bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    35be:	3308      	adds	r3, #8
    35c0:	681b      	ldr	r3, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
    35c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    35c4:	320c      	adds	r2, #12
		print_formatted(output, str, args[0], args[1], args[2],
    35c6:	6812      	ldr	r2, [r2, #0]
				args[3], args[4], args[5], args[6],  args[7],
    35c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    35ca:	3110      	adds	r1, #16
		print_formatted(output, str, args[0], args[1], args[2],
    35cc:	6809      	ldr	r1, [r1, #0]
				args[3], args[4], args[5], args[6],  args[7],
    35ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    35d0:	3014      	adds	r0, #20
		print_formatted(output, str, args[0], args[1], args[2],
    35d2:	6800      	ldr	r0, [r0, #0]
    35d4:	6178      	str	r0, [r7, #20]
				args[3], args[4], args[5], args[6],  args[7],
    35d6:	6abc      	ldr	r4, [r7, #40]	; 0x28
    35d8:	3418      	adds	r4, #24
		print_formatted(output, str, args[0], args[1], args[2],
    35da:	6824      	ldr	r4, [r4, #0]
				args[3], args[4], args[5], args[6],  args[7],
    35dc:	6abd      	ldr	r5, [r7, #40]	; 0x28
    35de:	351c      	adds	r5, #28
		print_formatted(output, str, args[0], args[1], args[2],
    35e0:	682d      	ldr	r5, [r5, #0]
				args[8], args[9], args[10]);
    35e2:	6abe      	ldr	r6, [r7, #40]	; 0x28
    35e4:	3620      	adds	r6, #32
		print_formatted(output, str, args[0], args[1], args[2],
    35e6:	6836      	ldr	r6, [r6, #0]
				args[8], args[9], args[10]);
    35e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    35ea:	f100 0c24 	add.w	ip, r0, #36	; 0x24
		print_formatted(output, str, args[0], args[1], args[2],
    35ee:	f8dc 0000 	ldr.w	r0, [ip]
    35f2:	6138      	str	r0, [r7, #16]
				args[8], args[9], args[10]);
    35f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    35f6:	f100 0c28 	add.w	ip, r0, #40	; 0x28
		print_formatted(output, str, args[0], args[1], args[2],
    35fa:	f8dc 0000 	ldr.w	r0, [ip]
    35fe:	9008      	str	r0, [sp, #32]
    3600:	6938      	ldr	r0, [r7, #16]
    3602:	9007      	str	r0, [sp, #28]
    3604:	9606      	str	r6, [sp, #24]
    3606:	9505      	str	r5, [sp, #20]
    3608:	9404      	str	r4, [sp, #16]
    360a:	6978      	ldr	r0, [r7, #20]
    360c:	9003      	str	r0, [sp, #12]
    360e:	9102      	str	r1, [sp, #8]
    3610:	9201      	str	r2, [sp, #4]
    3612:	9300      	str	r3, [sp, #0]
    3614:	69bb      	ldr	r3, [r7, #24]
    3616:	69fa      	ldr	r2, [r7, #28]
    3618:	6b39      	ldr	r1, [r7, #48]	; 0x30
    361a:	6a38      	ldr	r0, [r7, #32]
    361c:	f7ff fd18 	bl	3050 <print_formatted>
		break;
    3620:	e122      	b.n	3868 <std_print+0x588>
	case 12:
		print_formatted(output, str, args[0], args[1], args[2],
    3622:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3624:	681b      	ldr	r3, [r3, #0]
    3626:	61fb      	str	r3, [r7, #28]
    3628:	6abb      	ldr	r3, [r7, #40]	; 0x28
    362a:	3304      	adds	r3, #4
    362c:	6819      	ldr	r1, [r3, #0]
    362e:	61b9      	str	r1, [r7, #24]
    3630:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3632:	3308      	adds	r3, #8
    3634:	681b      	ldr	r3, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
    3636:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3638:	320c      	adds	r2, #12
		print_formatted(output, str, args[0], args[1], args[2],
    363a:	6812      	ldr	r2, [r2, #0]
				args[3], args[4], args[5], args[6],  args[7],
    363c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    363e:	3110      	adds	r1, #16
		print_formatted(output, str, args[0], args[1], args[2],
    3640:	6809      	ldr	r1, [r1, #0]
				args[3], args[4], args[5], args[6],  args[7],
    3642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3644:	3014      	adds	r0, #20
		print_formatted(output, str, args[0], args[1], args[2],
    3646:	6800      	ldr	r0, [r0, #0]
    3648:	6178      	str	r0, [r7, #20]
				args[3], args[4], args[5], args[6],  args[7],
    364a:	6abc      	ldr	r4, [r7, #40]	; 0x28
    364c:	3418      	adds	r4, #24
		print_formatted(output, str, args[0], args[1], args[2],
    364e:	6824      	ldr	r4, [r4, #0]
				args[3], args[4], args[5], args[6],  args[7],
    3650:	6abd      	ldr	r5, [r7, #40]	; 0x28
    3652:	351c      	adds	r5, #28
		print_formatted(output, str, args[0], args[1], args[2],
    3654:	682d      	ldr	r5, [r5, #0]
				args[8], args[9], args[10], args[11]);
    3656:	6abe      	ldr	r6, [r7, #40]	; 0x28
    3658:	3620      	adds	r6, #32
		print_formatted(output, str, args[0], args[1], args[2],
    365a:	6836      	ldr	r6, [r6, #0]
				args[8], args[9], args[10], args[11]);
    365c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    365e:	f100 0c24 	add.w	ip, r0, #36	; 0x24
		print_formatted(output, str, args[0], args[1], args[2],
    3662:	f8dc 0000 	ldr.w	r0, [ip]
    3666:	6138      	str	r0, [r7, #16]
				args[8], args[9], args[10], args[11]);
    3668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    366a:	f100 0c28 	add.w	ip, r0, #40	; 0x28
		print_formatted(output, str, args[0], args[1], args[2],
    366e:	f8dc 0000 	ldr.w	r0, [ip]
    3672:	60f8      	str	r0, [r7, #12]
				args[8], args[9], args[10], args[11]);
    3674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3676:	f100 0c2c 	add.w	ip, r0, #44	; 0x2c
		print_formatted(output, str, args[0], args[1], args[2],
    367a:	f8dc 0000 	ldr.w	r0, [ip]
    367e:	9009      	str	r0, [sp, #36]	; 0x24
    3680:	68f8      	ldr	r0, [r7, #12]
    3682:	9008      	str	r0, [sp, #32]
    3684:	6938      	ldr	r0, [r7, #16]
    3686:	9007      	str	r0, [sp, #28]
    3688:	9606      	str	r6, [sp, #24]
    368a:	9505      	str	r5, [sp, #20]
    368c:	9404      	str	r4, [sp, #16]
    368e:	6978      	ldr	r0, [r7, #20]
    3690:	9003      	str	r0, [sp, #12]
    3692:	9102      	str	r1, [sp, #8]
    3694:	9201      	str	r2, [sp, #4]
    3696:	9300      	str	r3, [sp, #0]
    3698:	69bb      	ldr	r3, [r7, #24]
    369a:	69fa      	ldr	r2, [r7, #28]
    369c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    369e:	6a38      	ldr	r0, [r7, #32]
    36a0:	f7ff fcd6 	bl	3050 <print_formatted>
		break;
    36a4:	e0e0      	b.n	3868 <std_print+0x588>
	case 13:
		print_formatted(output, str, args[0], args[1], args[2],
    36a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    36a8:	681b      	ldr	r3, [r3, #0]
    36aa:	61fb      	str	r3, [r7, #28]
    36ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    36ae:	3304      	adds	r3, #4
    36b0:	6819      	ldr	r1, [r3, #0]
    36b2:	61b9      	str	r1, [r7, #24]
    36b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    36b6:	3308      	adds	r3, #8
    36b8:	681b      	ldr	r3, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
    36ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
    36bc:	320c      	adds	r2, #12
		print_formatted(output, str, args[0], args[1], args[2],
    36be:	6812      	ldr	r2, [r2, #0]
				args[3], args[4], args[5], args[6],  args[7],
    36c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    36c2:	3110      	adds	r1, #16
		print_formatted(output, str, args[0], args[1], args[2],
    36c4:	6809      	ldr	r1, [r1, #0]
				args[3], args[4], args[5], args[6],  args[7],
    36c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    36c8:	3014      	adds	r0, #20
		print_formatted(output, str, args[0], args[1], args[2],
    36ca:	6800      	ldr	r0, [r0, #0]
    36cc:	6178      	str	r0, [r7, #20]
				args[3], args[4], args[5], args[6],  args[7],
    36ce:	6abc      	ldr	r4, [r7, #40]	; 0x28
    36d0:	3418      	adds	r4, #24
		print_formatted(output, str, args[0], args[1], args[2],
    36d2:	6824      	ldr	r4, [r4, #0]
				args[3], args[4], args[5], args[6],  args[7],
    36d4:	6abd      	ldr	r5, [r7, #40]	; 0x28
    36d6:	351c      	adds	r5, #28
		print_formatted(output, str, args[0], args[1], args[2],
    36d8:	682d      	ldr	r5, [r5, #0]
				args[8], args[9], args[10], args[11], args[12]);
    36da:	6abe      	ldr	r6, [r7, #40]	; 0x28
    36dc:	3620      	adds	r6, #32
		print_formatted(output, str, args[0], args[1], args[2],
    36de:	6836      	ldr	r6, [r6, #0]
				args[8], args[9], args[10], args[11], args[12]);
    36e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    36e2:	f100 0c24 	add.w	ip, r0, #36	; 0x24
		print_formatted(output, str, args[0], args[1], args[2],
    36e6:	f8dc 0000 	ldr.w	r0, [ip]
    36ea:	6138      	str	r0, [r7, #16]
				args[8], args[9], args[10], args[11], args[12]);
    36ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    36ee:	f100 0c28 	add.w	ip, r0, #40	; 0x28
		print_formatted(output, str, args[0], args[1], args[2],
    36f2:	f8dc 0000 	ldr.w	r0, [ip]
    36f6:	60f8      	str	r0, [r7, #12]
				args[8], args[9], args[10], args[11], args[12]);
    36f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    36fa:	f100 0c2c 	add.w	ip, r0, #44	; 0x2c
		print_formatted(output, str, args[0], args[1], args[2],
    36fe:	f8dc 0000 	ldr.w	r0, [ip]
    3702:	60b8      	str	r0, [r7, #8]
				args[8], args[9], args[10], args[11], args[12]);
    3704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3706:	f100 0c30 	add.w	ip, r0, #48	; 0x30
		print_formatted(output, str, args[0], args[1], args[2],
    370a:	f8dc 0000 	ldr.w	r0, [ip]
    370e:	900a      	str	r0, [sp, #40]	; 0x28
    3710:	68b8      	ldr	r0, [r7, #8]
    3712:	9009      	str	r0, [sp, #36]	; 0x24
    3714:	68f8      	ldr	r0, [r7, #12]
    3716:	9008      	str	r0, [sp, #32]
    3718:	6938      	ldr	r0, [r7, #16]
    371a:	9007      	str	r0, [sp, #28]
    371c:	9606      	str	r6, [sp, #24]
    371e:	9505      	str	r5, [sp, #20]
    3720:	9404      	str	r4, [sp, #16]
    3722:	6978      	ldr	r0, [r7, #20]
    3724:	9003      	str	r0, [sp, #12]
    3726:	9102      	str	r1, [sp, #8]
    3728:	9201      	str	r2, [sp, #4]
    372a:	9300      	str	r3, [sp, #0]
    372c:	69bb      	ldr	r3, [r7, #24]
    372e:	69fa      	ldr	r2, [r7, #28]
    3730:	6b39      	ldr	r1, [r7, #48]	; 0x30
    3732:	6a38      	ldr	r0, [r7, #32]
    3734:	f7ff fc8c 	bl	3050 <print_formatted>
		break;
    3738:	e096      	b.n	3868 <std_print+0x588>
	case 14:
		print_formatted(output, str, args[0], args[1], args[2],
    373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    373c:	681b      	ldr	r3, [r3, #0]
    373e:	61fb      	str	r3, [r7, #28]
    3740:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3742:	3304      	adds	r3, #4
    3744:	6819      	ldr	r1, [r3, #0]
    3746:	61b9      	str	r1, [r7, #24]
    3748:	6abb      	ldr	r3, [r7, #40]	; 0x28
    374a:	3308      	adds	r3, #8
    374c:	681a      	ldr	r2, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
    374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3750:	330c      	adds	r3, #12
		print_formatted(output, str, args[0], args[1], args[2],
    3752:	6819      	ldr	r1, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
    3754:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3756:	3310      	adds	r3, #16
		print_formatted(output, str, args[0], args[1], args[2],
    3758:	6818      	ldr	r0, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
    375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    375c:	3314      	adds	r3, #20
		print_formatted(output, str, args[0], args[1], args[2],
    375e:	681c      	ldr	r4, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
    3760:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3762:	3318      	adds	r3, #24
		print_formatted(output, str, args[0], args[1], args[2],
    3764:	681d      	ldr	r5, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
    3766:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3768:	331c      	adds	r3, #28
		print_formatted(output, str, args[0], args[1], args[2],
    376a:	681e      	ldr	r6, [r3, #0]
				args[8], args[9], args[10], args[11], args[12],
    376c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    376e:	3320      	adds	r3, #32
		print_formatted(output, str, args[0], args[1], args[2],
    3770:	681b      	ldr	r3, [r3, #0]
    3772:	617b      	str	r3, [r7, #20]
				args[8], args[9], args[10], args[11], args[12],
    3774:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3776:	3324      	adds	r3, #36	; 0x24
		print_formatted(output, str, args[0], args[1], args[2],
    3778:	681b      	ldr	r3, [r3, #0]
    377a:	613b      	str	r3, [r7, #16]
				args[8], args[9], args[10], args[11], args[12],
    377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    377e:	3328      	adds	r3, #40	; 0x28
		print_formatted(output, str, args[0], args[1], args[2],
    3780:	681b      	ldr	r3, [r3, #0]
    3782:	60fb      	str	r3, [r7, #12]
				args[8], args[9], args[10], args[11], args[12],
    3784:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3786:	332c      	adds	r3, #44	; 0x2c
		print_formatted(output, str, args[0], args[1], args[2],
    3788:	681b      	ldr	r3, [r3, #0]
    378a:	60bb      	str	r3, [r7, #8]
				args[8], args[9], args[10], args[11], args[12],
    378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    378e:	3330      	adds	r3, #48	; 0x30
		print_formatted(output, str, args[0], args[1], args[2],
    3790:	681b      	ldr	r3, [r3, #0]
    3792:	607b      	str	r3, [r7, #4]
				args[13]);
    3794:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3796:	3334      	adds	r3, #52	; 0x34
		print_formatted(output, str, args[0], args[1], args[2],
    3798:	681b      	ldr	r3, [r3, #0]
    379a:	930b      	str	r3, [sp, #44]	; 0x2c
    379c:	687b      	ldr	r3, [r7, #4]
    379e:	930a      	str	r3, [sp, #40]	; 0x28
    37a0:	68bb      	ldr	r3, [r7, #8]
    37a2:	9309      	str	r3, [sp, #36]	; 0x24
    37a4:	68fb      	ldr	r3, [r7, #12]
    37a6:	9308      	str	r3, [sp, #32]
    37a8:	693b      	ldr	r3, [r7, #16]
    37aa:	9307      	str	r3, [sp, #28]
    37ac:	697b      	ldr	r3, [r7, #20]
    37ae:	9306      	str	r3, [sp, #24]
    37b0:	9605      	str	r6, [sp, #20]
    37b2:	9504      	str	r5, [sp, #16]
    37b4:	9403      	str	r4, [sp, #12]
    37b6:	9002      	str	r0, [sp, #8]
    37b8:	9101      	str	r1, [sp, #4]
    37ba:	9200      	str	r2, [sp, #0]
    37bc:	69bb      	ldr	r3, [r7, #24]
    37be:	69fa      	ldr	r2, [r7, #28]
    37c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
    37c2:	6a38      	ldr	r0, [r7, #32]
    37c4:	f7ff fc44 	bl	3050 <print_formatted>
		break;
    37c8:	e04e      	b.n	3868 <std_print+0x588>
	case 15:
		print_formatted(output, str, args[0], args[1], args[2],
    37ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    37cc:	681b      	ldr	r3, [r3, #0]
    37ce:	61fb      	str	r3, [r7, #28]
    37d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    37d2:	3304      	adds	r3, #4
    37d4:	6819      	ldr	r1, [r3, #0]
    37d6:	61b9      	str	r1, [r7, #24]
    37d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    37da:	3308      	adds	r3, #8
    37dc:	6819      	ldr	r1, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
    37de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    37e0:	330c      	adds	r3, #12
		print_formatted(output, str, args[0], args[1], args[2],
    37e2:	6818      	ldr	r0, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
    37e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    37e6:	3310      	adds	r3, #16
		print_formatted(output, str, args[0], args[1], args[2],
    37e8:	681c      	ldr	r4, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
    37ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    37ec:	3314      	adds	r3, #20
		print_formatted(output, str, args[0], args[1], args[2],
    37ee:	681d      	ldr	r5, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
    37f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    37f2:	3318      	adds	r3, #24
		print_formatted(output, str, args[0], args[1], args[2],
    37f4:	681e      	ldr	r6, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
    37f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    37f8:	331c      	adds	r3, #28
		print_formatted(output, str, args[0], args[1], args[2],
    37fa:	681a      	ldr	r2, [r3, #0]
    37fc:	617a      	str	r2, [r7, #20]
				args[8], args[9], args[10], args[11], args[12],
    37fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3800:	3320      	adds	r3, #32
		print_formatted(output, str, args[0], args[1], args[2],
    3802:	681b      	ldr	r3, [r3, #0]
    3804:	613b      	str	r3, [r7, #16]
				args[8], args[9], args[10], args[11], args[12],
    3806:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3808:	3324      	adds	r3, #36	; 0x24
		print_formatted(output, str, args[0], args[1], args[2],
    380a:	681a      	ldr	r2, [r3, #0]
    380c:	60fa      	str	r2, [r7, #12]
				args[8], args[9], args[10], args[11], args[12],
    380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3810:	3328      	adds	r3, #40	; 0x28
		print_formatted(output, str, args[0], args[1], args[2],
    3812:	681b      	ldr	r3, [r3, #0]
    3814:	60bb      	str	r3, [r7, #8]
				args[8], args[9], args[10], args[11], args[12],
    3816:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3818:	332c      	adds	r3, #44	; 0x2c
		print_formatted(output, str, args[0], args[1], args[2],
    381a:	681a      	ldr	r2, [r3, #0]
    381c:	607a      	str	r2, [r7, #4]
				args[8], args[9], args[10], args[11], args[12],
    381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3820:	3330      	adds	r3, #48	; 0x30
		print_formatted(output, str, args[0], args[1], args[2],
    3822:	681b      	ldr	r3, [r3, #0]
    3824:	603b      	str	r3, [r7, #0]
				args[13], args[14]);
    3826:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3828:	3334      	adds	r3, #52	; 0x34
		print_formatted(output, str, args[0], args[1], args[2],
    382a:	681a      	ldr	r2, [r3, #0]
				args[13], args[14]);
    382c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    382e:	3338      	adds	r3, #56	; 0x38
		print_formatted(output, str, args[0], args[1], args[2],
    3830:	681b      	ldr	r3, [r3, #0]
    3832:	930c      	str	r3, [sp, #48]	; 0x30
    3834:	920b      	str	r2, [sp, #44]	; 0x2c
    3836:	683b      	ldr	r3, [r7, #0]
    3838:	930a      	str	r3, [sp, #40]	; 0x28
    383a:	687a      	ldr	r2, [r7, #4]
    383c:	9209      	str	r2, [sp, #36]	; 0x24
    383e:	68bb      	ldr	r3, [r7, #8]
    3840:	9308      	str	r3, [sp, #32]
    3842:	68fa      	ldr	r2, [r7, #12]
    3844:	9207      	str	r2, [sp, #28]
    3846:	693b      	ldr	r3, [r7, #16]
    3848:	9306      	str	r3, [sp, #24]
    384a:	697a      	ldr	r2, [r7, #20]
    384c:	9205      	str	r2, [sp, #20]
    384e:	9604      	str	r6, [sp, #16]
    3850:	9503      	str	r5, [sp, #12]
    3852:	9402      	str	r4, [sp, #8]
    3854:	9001      	str	r0, [sp, #4]
    3856:	9100      	str	r1, [sp, #0]
    3858:	69bb      	ldr	r3, [r7, #24]
    385a:	69fa      	ldr	r2, [r7, #28]
    385c:	6b39      	ldr	r1, [r7, #48]	; 0x30
    385e:	6a38      	ldr	r0, [r7, #32]
    3860:	f7ff fbf6 	bl	3050 <print_formatted>
		break;
    3864:	e000      	b.n	3868 <std_print+0x588>
	default:
		/* Unsupported number of arguments. */
		__ASSERT_NO_MSG(true);
		break;
    3866:	bf00      	nop
	}
}
    3868:	bf00      	nop
    386a:	373c      	adds	r7, #60	; 0x3c
    386c:	46bd      	mov	sp, r7
    386e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003870 <hexdump_line_print>:

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    3870:	b580      	push	{r7, lr}
    3872:	b088      	sub	sp, #32
    3874:	af00      	add	r7, sp, #0
    3876:	60f8      	str	r0, [r7, #12]
    3878:	60b9      	str	r1, [r7, #8]
    387a:	607a      	str	r2, [r7, #4]
    387c:	603b      	str	r3, [r7, #0]
	newline_print(output, flags);
    387e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3880:	68f8      	ldr	r0, [r7, #12]
    3882:	f7ff fd0b 	bl	329c <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    3886:	2300      	movs	r3, #0
    3888:	61fb      	str	r3, [r7, #28]
    388a:	e006      	b.n	389a <hexdump_line_print+0x2a>
		print_formatted(output, " ");
    388c:	4936      	ldr	r1, [pc, #216]	; (3968 <hexdump_line_print+0xf8>)
    388e:	68f8      	ldr	r0, [r7, #12]
    3890:	f7ff fbde 	bl	3050 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    3894:	69fb      	ldr	r3, [r7, #28]
    3896:	3301      	adds	r3, #1
    3898:	61fb      	str	r3, [r7, #28]
    389a:	69fa      	ldr	r2, [r7, #28]
    389c:	683b      	ldr	r3, [r7, #0]
    389e:	429a      	cmp	r2, r3
    38a0:	dbf4      	blt.n	388c <hexdump_line_print+0x1c>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    38a2:	2300      	movs	r3, #0
    38a4:	61bb      	str	r3, [r7, #24]
    38a6:	e020      	b.n	38ea <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
    38a8:	69bb      	ldr	r3, [r7, #24]
    38aa:	2b00      	cmp	r3, #0
    38ac:	dd08      	ble.n	38c0 <hexdump_line_print+0x50>
    38ae:	69bb      	ldr	r3, [r7, #24]
    38b0:	f003 0307 	and.w	r3, r3, #7
    38b4:	2b00      	cmp	r3, #0
    38b6:	d103      	bne.n	38c0 <hexdump_line_print+0x50>
			print_formatted(output, " ");
    38b8:	492b      	ldr	r1, [pc, #172]	; (3968 <hexdump_line_print+0xf8>)
    38ba:	68f8      	ldr	r0, [r7, #12]
    38bc:	f7ff fbc8 	bl	3050 <print_formatted>
		}

		if (i < length) {
    38c0:	69bb      	ldr	r3, [r7, #24]
    38c2:	687a      	ldr	r2, [r7, #4]
    38c4:	429a      	cmp	r2, r3
    38c6:	d909      	bls.n	38dc <hexdump_line_print+0x6c>
			print_formatted(output, "%02x ", data[i]);
    38c8:	69bb      	ldr	r3, [r7, #24]
    38ca:	68ba      	ldr	r2, [r7, #8]
    38cc:	4413      	add	r3, r2
    38ce:	781b      	ldrb	r3, [r3, #0]
    38d0:	461a      	mov	r2, r3
    38d2:	4926      	ldr	r1, [pc, #152]	; (396c <hexdump_line_print+0xfc>)
    38d4:	68f8      	ldr	r0, [r7, #12]
    38d6:	f7ff fbbb 	bl	3050 <print_formatted>
    38da:	e003      	b.n	38e4 <hexdump_line_print+0x74>
		} else {
			print_formatted(output, "   ");
    38dc:	4924      	ldr	r1, [pc, #144]	; (3970 <hexdump_line_print+0x100>)
    38de:	68f8      	ldr	r0, [r7, #12]
    38e0:	f7ff fbb6 	bl	3050 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    38e4:	69bb      	ldr	r3, [r7, #24]
    38e6:	3301      	adds	r3, #1
    38e8:	61bb      	str	r3, [r7, #24]
    38ea:	69bb      	ldr	r3, [r7, #24]
    38ec:	2b0f      	cmp	r3, #15
    38ee:	dddb      	ble.n	38a8 <hexdump_line_print+0x38>
		}
	}

	print_formatted(output, "|");
    38f0:	4920      	ldr	r1, [pc, #128]	; (3974 <hexdump_line_print+0x104>)
    38f2:	68f8      	ldr	r0, [r7, #12]
    38f4:	f7ff fbac 	bl	3050 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    38f8:	2300      	movs	r3, #0
    38fa:	617b      	str	r3, [r7, #20]
    38fc:	e02b      	b.n	3956 <hexdump_line_print+0xe6>
		if (i > 0 && !(i % 8)) {
    38fe:	697b      	ldr	r3, [r7, #20]
    3900:	2b00      	cmp	r3, #0
    3902:	dd08      	ble.n	3916 <hexdump_line_print+0xa6>
    3904:	697b      	ldr	r3, [r7, #20]
    3906:	f003 0307 	and.w	r3, r3, #7
    390a:	2b00      	cmp	r3, #0
    390c:	d103      	bne.n	3916 <hexdump_line_print+0xa6>
			print_formatted(output, " ");
    390e:	4916      	ldr	r1, [pc, #88]	; (3968 <hexdump_line_print+0xf8>)
    3910:	68f8      	ldr	r0, [r7, #12]
    3912:	f7ff fb9d 	bl	3050 <print_formatted>
		}

		if (i < length) {
    3916:	697b      	ldr	r3, [r7, #20]
    3918:	687a      	ldr	r2, [r7, #4]
    391a:	429a      	cmp	r2, r3
    391c:	d914      	bls.n	3948 <hexdump_line_print+0xd8>
			char c = (char)data[i];
    391e:	697b      	ldr	r3, [r7, #20]
    3920:	68ba      	ldr	r2, [r7, #8]
    3922:	4413      	add	r3, r2
    3924:	781b      	ldrb	r3, [r3, #0]
    3926:	74fb      	strb	r3, [r7, #19]

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
    3928:	7cfb      	ldrb	r3, [r7, #19]
    392a:	4618      	mov	r0, r3
    392c:	f00d ff63 	bl	117f6 <isprint>
    3930:	4603      	mov	r3, r0
			print_formatted(output, "%c",
    3932:	2b00      	cmp	r3, #0
    3934:	d001      	beq.n	393a <hexdump_line_print+0xca>
    3936:	7cfb      	ldrb	r3, [r7, #19]
    3938:	e000      	b.n	393c <hexdump_line_print+0xcc>
    393a:	232e      	movs	r3, #46	; 0x2e
    393c:	461a      	mov	r2, r3
    393e:	490e      	ldr	r1, [pc, #56]	; (3978 <hexdump_line_print+0x108>)
    3940:	68f8      	ldr	r0, [r7, #12]
    3942:	f7ff fb85 	bl	3050 <print_formatted>
    3946:	e003      	b.n	3950 <hexdump_line_print+0xe0>
		} else {
			print_formatted(output, " ");
    3948:	4907      	ldr	r1, [pc, #28]	; (3968 <hexdump_line_print+0xf8>)
    394a:	68f8      	ldr	r0, [r7, #12]
    394c:	f7ff fb80 	bl	3050 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3950:	697b      	ldr	r3, [r7, #20]
    3952:	3301      	adds	r3, #1
    3954:	617b      	str	r3, [r7, #20]
    3956:	697b      	ldr	r3, [r7, #20]
    3958:	2b0f      	cmp	r3, #15
    395a:	ddd0      	ble.n	38fe <hexdump_line_print+0x8e>
		}
	}
}
    395c:	bf00      	nop
    395e:	bf00      	nop
    3960:	3720      	adds	r7, #32
    3962:	46bd      	mov	sp, r7
    3964:	bd80      	pop	{r7, pc}
    3966:	bf00      	nop
    3968:	00017834 	.word	0x00017834
    396c:	00017838 	.word	0x00017838
    3970:	00017840 	.word	0x00017840
    3974:	00017844 	.word	0x00017844
    3978:	00017848 	.word	0x00017848

0000397c <hexdump_print>:

static void hexdump_print(struct log_msg *msg,
			  const struct log_output *output,
			  int prefix_offset, uint32_t flags)
{
    397c:	b580      	push	{r7, lr}
    397e:	b08c      	sub	sp, #48	; 0x30
    3980:	af02      	add	r7, sp, #8
    3982:	60f8      	str	r0, [r7, #12]
    3984:	60b9      	str	r1, [r7, #8]
    3986:	607a      	str	r2, [r7, #4]
    3988:	603b      	str	r3, [r7, #0]
	uint32_t offset = 0U;
    398a:	2300      	movs	r3, #0
    398c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t buf[HEXDUMP_BYTES_IN_LINE];
	size_t length;

	print_formatted(output, "%s", log_msg_str_get(msg));
    398e:	68f8      	ldr	r0, [r7, #12]
    3990:	f00d fd6f 	bl	11472 <log_msg_str_get>
    3994:	4603      	mov	r3, r0
    3996:	461a      	mov	r2, r3
    3998:	4911      	ldr	r1, [pc, #68]	; (39e0 <hexdump_print+0x64>)
    399a:	68b8      	ldr	r0, [r7, #8]
    399c:	f7ff fb58 	bl	3050 <print_formatted>

	do {
		length = sizeof(buf);
    39a0:	2310      	movs	r3, #16
    39a2:	613b      	str	r3, [r7, #16]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    39a4:	f107 0210 	add.w	r2, r7, #16
    39a8:	f107 0114 	add.w	r1, r7, #20
    39ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    39ae:	68f8      	ldr	r0, [r7, #12]
    39b0:	f00d fea3 	bl	116fa <log_msg_hexdump_data_get>

		if (length) {
    39b4:	693b      	ldr	r3, [r7, #16]
    39b6:	2b00      	cmp	r3, #0
    39b8:	d00d      	beq.n	39d6 <hexdump_print+0x5a>
			hexdump_line_print(output, buf, length,
    39ba:	693a      	ldr	r2, [r7, #16]
    39bc:	f107 0114 	add.w	r1, r7, #20
    39c0:	683b      	ldr	r3, [r7, #0]
    39c2:	9300      	str	r3, [sp, #0]
    39c4:	687b      	ldr	r3, [r7, #4]
    39c6:	68b8      	ldr	r0, [r7, #8]
    39c8:	f7ff ff52 	bl	3870 <hexdump_line_print>
					   prefix_offset, flags);
			offset += length;
    39cc:	693b      	ldr	r3, [r7, #16]
    39ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    39d0:	4413      	add	r3, r2
    39d2:	627b      	str	r3, [r7, #36]	; 0x24
		length = sizeof(buf);
    39d4:	e7e4      	b.n	39a0 <hexdump_print+0x24>
		} else {
			break;
    39d6:	bf00      	nop
		}
	} while (true);
}
    39d8:	bf00      	nop
    39da:	3728      	adds	r7, #40	; 0x28
    39dc:	46bd      	mov	sp, r7
    39de:	bd80      	pop	{r7, pc}
    39e0:	00017814 	.word	0x00017814

000039e4 <raw_string_print>:
}


static void raw_string_print(struct log_msg *msg,
			     const struct log_output *output)
{
    39e4:	b580      	push	{r7, lr}
    39e6:	b086      	sub	sp, #24
    39e8:	af00      	add	r7, sp, #0
    39ea:	6078      	str	r0, [r7, #4]
    39ec:	6039      	str	r1, [r7, #0]
	__ASSERT_NO_MSG(output->size);
    39ee:	683b      	ldr	r3, [r7, #0]
    39f0:	68db      	ldr	r3, [r3, #12]
    39f2:	2b00      	cmp	r3, #0
    39f4:	d10b      	bne.n	3a0e <raw_string_print+0x2a>
    39f6:	f240 13cf 	movw	r3, #463	; 0x1cf
    39fa:	4a20      	ldr	r2, [pc, #128]	; (3a7c <raw_string_print+0x98>)
    39fc:	4920      	ldr	r1, [pc, #128]	; (3a80 <raw_string_print+0x9c>)
    39fe:	4821      	ldr	r0, [pc, #132]	; (3a84 <raw_string_print+0xa0>)
    3a00:	f00c f938 	bl	fc74 <printk>
    3a04:	f240 11cf 	movw	r1, #463	; 0x1cf
    3a08:	481c      	ldr	r0, [pc, #112]	; (3a7c <raw_string_print+0x98>)
    3a0a:	f00c fd8f 	bl	1052c <assert_post_action>

	size_t offset = 0;
    3a0e:	2300      	movs	r3, #0
    3a10:	617b      	str	r3, [r7, #20]
	size_t length;
	bool eol = false;
    3a12:	2300      	movs	r3, #0
    3a14:	74fb      	strb	r3, [r7, #19]

	do {
		length = output->size;
    3a16:	683b      	ldr	r3, [r7, #0]
    3a18:	68db      	ldr	r3, [r3, #12]
    3a1a:	60fb      	str	r3, [r7, #12]
		/* Sting is stored in a hexdump message. */
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    3a1c:	683b      	ldr	r3, [r7, #0]
    3a1e:	6899      	ldr	r1, [r3, #8]
    3a20:	f107 020c 	add.w	r2, r7, #12
    3a24:	697b      	ldr	r3, [r7, #20]
    3a26:	6878      	ldr	r0, [r7, #4]
    3a28:	f00d fe67 	bl	116fa <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    3a2c:	68fa      	ldr	r2, [r7, #12]
    3a2e:	683b      	ldr	r3, [r7, #0]
    3a30:	685b      	ldr	r3, [r3, #4]
    3a32:	601a      	str	r2, [r3, #0]

		if (length != 0) {
    3a34:	68fb      	ldr	r3, [r7, #12]
    3a36:	2b00      	cmp	r3, #0
    3a38:	d00a      	beq.n	3a50 <raw_string_print+0x6c>
			eol = (output->buf[length - 1] == '\n');
    3a3a:	683b      	ldr	r3, [r7, #0]
    3a3c:	689a      	ldr	r2, [r3, #8]
    3a3e:	68fb      	ldr	r3, [r7, #12]
    3a40:	3b01      	subs	r3, #1
    3a42:	4413      	add	r3, r2
    3a44:	781b      	ldrb	r3, [r3, #0]
    3a46:	2b0a      	cmp	r3, #10
    3a48:	bf0c      	ite	eq
    3a4a:	2301      	moveq	r3, #1
    3a4c:	2300      	movne	r3, #0
    3a4e:	74fb      	strb	r3, [r7, #19]
		}

		log_output_flush(output);
    3a50:	6838      	ldr	r0, [r7, #0]
    3a52:	f00d feff 	bl	11854 <log_output_flush>
		offset += length;
    3a56:	68fb      	ldr	r3, [r7, #12]
    3a58:	697a      	ldr	r2, [r7, #20]
    3a5a:	4413      	add	r3, r2
    3a5c:	617b      	str	r3, [r7, #20]
	} while (length > 0);
    3a5e:	68fb      	ldr	r3, [r7, #12]
    3a60:	2b00      	cmp	r3, #0
    3a62:	d1d8      	bne.n	3a16 <raw_string_print+0x32>

	if (eol) {
    3a64:	7cfb      	ldrb	r3, [r7, #19]
    3a66:	2b00      	cmp	r3, #0
    3a68:	d003      	beq.n	3a72 <raw_string_print+0x8e>
		print_formatted(output, "\r");
    3a6a:	4907      	ldr	r1, [pc, #28]	; (3a88 <raw_string_print+0xa4>)
    3a6c:	6838      	ldr	r0, [r7, #0]
    3a6e:	f7ff faef 	bl	3050 <print_formatted>
	}
}
    3a72:	bf00      	nop
    3a74:	3718      	adds	r7, #24
    3a76:	46bd      	mov	sp, r7
    3a78:	bd80      	pop	{r7, pc}
    3a7a:	bf00      	nop
    3a7c:	00017764 	.word	0x00017764
    3a80:	0001784c 	.word	0x0001784c
    3a84:	000177c4 	.word	0x000177c4
    3a88:	0001785c 	.word	0x0001785c

00003a8c <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    3a8c:	b580      	push	{r7, lr}
    3a8e:	b086      	sub	sp, #24
    3a90:	af00      	add	r7, sp, #0
    3a92:	6078      	str	r0, [r7, #4]
    3a94:	6039      	str	r1, [r7, #0]
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    3a96:	687b      	ldr	r3, [r7, #4]
    3a98:	681b      	ldr	r3, [r3, #0]
    3a9a:	617b      	str	r3, [r7, #20]

	cnt = MIN(cnt, 9999);
    3a9c:	683b      	ldr	r3, [r7, #0]
    3a9e:	f242 720f 	movw	r2, #9999	; 0x270f
    3aa2:	4293      	cmp	r3, r2
    3aa4:	bf28      	it	cs
    3aa6:	4613      	movcs	r3, r2
    3aa8:	603b      	str	r3, [r7, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3aaa:	f107 0008 	add.w	r0, r7, #8
    3aae:	683b      	ldr	r3, [r7, #0]
    3ab0:	4a10      	ldr	r2, [pc, #64]	; (3af4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5c>)
    3ab2:	2105      	movs	r1, #5
    3ab4:	f00c f929 	bl	fd0a <snprintk>
    3ab8:	6138      	str	r0, [r7, #16]

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    3aba:	687b      	ldr	r3, [r7, #4]
    3abc:	685b      	ldr	r3, [r3, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    3abe:	685b      	ldr	r3, [r3, #4]
    3ac0:	220b      	movs	r2, #11
    3ac2:	490d      	ldr	r1, [pc, #52]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
    3ac4:	6978      	ldr	r0, [r7, #20]
    3ac6:	f00d fea8 	bl	1181a <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    3aca:	693a      	ldr	r2, [r7, #16]
    3acc:	687b      	ldr	r3, [r7, #4]
    3ace:	685b      	ldr	r3, [r3, #4]
    3ad0:	685b      	ldr	r3, [r3, #4]
    3ad2:	f107 0108 	add.w	r1, r7, #8
    3ad6:	6978      	ldr	r0, [r7, #20]
    3ad8:	f00d fe9f 	bl	1181a <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    3adc:	687b      	ldr	r3, [r7, #4]
    3ade:	685b      	ldr	r3, [r3, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    3ae0:	685b      	ldr	r3, [r3, #4]
    3ae2:	221b      	movs	r2, #27
    3ae4:	4905      	ldr	r1, [pc, #20]	; (3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>)
    3ae6:	6978      	ldr	r0, [r7, #20]
    3ae8:	f00d fe97 	bl	1181a <buffer_write>
}
    3aec:	bf00      	nop
    3aee:	3718      	adds	r7, #24
    3af0:	46bd      	mov	sp, r7
    3af2:	bd80      	pop	{r7, pc}
    3af4:	0001786c 	.word	0x0001786c
    3af8:	0001aac4 	.word	0x0001aac4
    3afc:	0001aad0 	.word	0x0001aad0

00003b00 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
    3b00:	b480      	push	{r7}
    3b02:	b083      	sub	sp, #12
    3b04:	af00      	add	r7, sp, #0
    3b06:	6078      	str	r0, [r7, #4]
	timestamp_div = 1U;
    3b08:	4b0b      	ldr	r3, [pc, #44]	; (3b38 <log_output_timestamp_freq_set+0x38>)
    3b0a:	2201      	movs	r2, #1
    3b0c:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    3b0e:	e007      	b.n	3b20 <log_output_timestamp_freq_set+0x20>
		frequency /= 2U;
    3b10:	687b      	ldr	r3, [r7, #4]
    3b12:	085b      	lsrs	r3, r3, #1
    3b14:	607b      	str	r3, [r7, #4]
		timestamp_div *= 2U;
    3b16:	4b08      	ldr	r3, [pc, #32]	; (3b38 <log_output_timestamp_freq_set+0x38>)
    3b18:	681b      	ldr	r3, [r3, #0]
    3b1a:	005b      	lsls	r3, r3, #1
    3b1c:	4a06      	ldr	r2, [pc, #24]	; (3b38 <log_output_timestamp_freq_set+0x38>)
    3b1e:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    3b20:	687b      	ldr	r3, [r7, #4]
    3b22:	4a06      	ldr	r2, [pc, #24]	; (3b3c <log_output_timestamp_freq_set+0x3c>)
    3b24:	4293      	cmp	r3, r2
    3b26:	d8f3      	bhi.n	3b10 <log_output_timestamp_freq_set+0x10>
	}

	freq = frequency;
    3b28:	4a05      	ldr	r2, [pc, #20]	; (3b40 <log_output_timestamp_freq_set+0x40>)
    3b2a:	687b      	ldr	r3, [r7, #4]
    3b2c:	6013      	str	r3, [r2, #0]
}
    3b2e:	bf00      	nop
    3b30:	370c      	adds	r7, #12
    3b32:	46bd      	mov	sp, r7
    3b34:	bc80      	pop	{r7}
    3b36:	4770      	bx	lr
    3b38:	20000544 	.word	0x20000544
    3b3c:	000f4240 	.word	0x000f4240
    3b40:	20000540 	.word	0x20000540

00003b44 <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    3b44:	b580      	push	{r7, lr}
    3b46:	b086      	sub	sp, #24
    3b48:	af00      	add	r7, sp, #0
    3b4a:	60f8      	str	r0, [r7, #12]
    3b4c:	60b9      	str	r1, [r7, #8]
    3b4e:	607a      	str	r2, [r7, #4]
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
    3b50:	2300      	movs	r3, #0
    3b52:	617b      	str	r3, [r7, #20]
    3b54:	e00b      	b.n	3b6e <char_out+0x2a>
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
    3b56:	4b0a      	ldr	r3, [pc, #40]	; (3b80 <char_out+0x3c>)
    3b58:	6818      	ldr	r0, [r3, #0]
    3b5a:	68fa      	ldr	r2, [r7, #12]
    3b5c:	697b      	ldr	r3, [r7, #20]
    3b5e:	4413      	add	r3, r2
    3b60:	781b      	ldrb	r3, [r3, #0]
    3b62:	4619      	mov	r1, r3
    3b64:	f00d ffe5 	bl	11b32 <uart_poll_out>
	for (size_t i = 0; i < length; i++) {
    3b68:	697b      	ldr	r3, [r7, #20]
    3b6a:	3301      	adds	r3, #1
    3b6c:	617b      	str	r3, [r7, #20]
    3b6e:	697a      	ldr	r2, [r7, #20]
    3b70:	68bb      	ldr	r3, [r7, #8]
    3b72:	429a      	cmp	r2, r3
    3b74:	d3ef      	bcc.n	3b56 <char_out+0x12>
#endif
	}

	return length;
    3b76:	68bb      	ldr	r3, [r7, #8]
}
    3b78:	4618      	mov	r0, r3
    3b7a:	3718      	adds	r7, #24
    3b7c:	46bd      	mov	sp, r7
    3b7e:	bd80      	pop	{r7, pc}
    3b80:	20000548 	.word	0x20000548

00003b84 <put>:

LOG_OUTPUT_DEFINE(log_output_uart, char_out, &uart_output_buf, 1);

static void put(const struct log_backend *const backend,
		struct log_msg *msg)
{
    3b84:	b580      	push	{r7, lr}
    3b86:	b084      	sub	sp, #16
    3b88:	af00      	add	r7, sp, #0
    3b8a:	6078      	str	r0, [r7, #4]
    3b8c:	6039      	str	r1, [r7, #0]
	uint32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
    3b8e:	2300      	movs	r3, #0
    3b90:	60fb      	str	r3, [r7, #12]
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_put(&log_output_uart, flag, msg);
    3b92:	683a      	ldr	r2, [r7, #0]
    3b94:	68f9      	ldr	r1, [r7, #12]
    3b96:	4803      	ldr	r0, [pc, #12]	; (3ba4 <put+0x20>)
    3b98:	f00d ff79 	bl	11a8e <log_backend_std_put>
}
    3b9c:	bf00      	nop
    3b9e:	3710      	adds	r7, #16
    3ba0:	46bd      	mov	sp, r7
    3ba2:	bd80      	pop	{r7, pc}
    3ba4:	0001aaec 	.word	0x0001aaec

00003ba8 <log_backend_uart_init>:
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
    3ba8:	b580      	push	{r7, lr}
    3baa:	b082      	sub	sp, #8
    3bac:	af00      	add	r7, sp, #0
    3bae:	6078      	str	r0, [r7, #4]
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    3bb0:	480b      	ldr	r0, [pc, #44]	; (3be0 <log_backend_uart_init+0x38>)
    3bb2:	f00d ff9f 	bl	11af4 <device_get_binding>
    3bb6:	4603      	mov	r3, r0
    3bb8:	4a0a      	ldr	r2, [pc, #40]	; (3be4 <log_backend_uart_init+0x3c>)
    3bba:	6013      	str	r3, [r2, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
    3bbc:	4b09      	ldr	r3, [pc, #36]	; (3be4 <log_backend_uart_init+0x3c>)
    3bbe:	681b      	ldr	r3, [r3, #0]
    3bc0:	2b00      	cmp	r3, #0
    3bc2:	d109      	bne.n	3bd8 <log_backend_uart_init+0x30>
    3bc4:	234f      	movs	r3, #79	; 0x4f
    3bc6:	4a08      	ldr	r2, [pc, #32]	; (3be8 <log_backend_uart_init+0x40>)
    3bc8:	4908      	ldr	r1, [pc, #32]	; (3bec <log_backend_uart_init+0x44>)
    3bca:	4809      	ldr	r0, [pc, #36]	; (3bf0 <log_backend_uart_init+0x48>)
    3bcc:	f00c f852 	bl	fc74 <printk>
    3bd0:	214f      	movs	r1, #79	; 0x4f
    3bd2:	4805      	ldr	r0, [pc, #20]	; (3be8 <log_backend_uart_init+0x40>)
    3bd4:	f00c fcaa 	bl	1052c <assert_post_action>
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
    3bd8:	bf00      	nop
    3bda:	3708      	adds	r7, #8
    3bdc:	46bd      	mov	sp, r7
    3bde:	bd80      	pop	{r7, pc}
    3be0:	00017870 	.word	0x00017870
    3be4:	20000548 	.word	0x20000548
    3be8:	00017878 	.word	0x00017878
    3bec:	000178b0 	.word	0x000178b0
    3bf0:	000178c4 	.word	0x000178c4

00003bf4 <panic>:

static void panic(struct log_backend const *const backend)
{
    3bf4:	b580      	push	{r7, lr}
    3bf6:	b082      	sub	sp, #8
    3bf8:	af00      	add	r7, sp, #0
    3bfa:	6078      	str	r0, [r7, #4]
	log_backend_std_panic(&log_output_uart);
    3bfc:	4803      	ldr	r0, [pc, #12]	; (3c0c <panic+0x18>)
    3bfe:	f00d ff61 	bl	11ac4 <log_backend_std_panic>
}
    3c02:	bf00      	nop
    3c04:	3708      	adds	r7, #8
    3c06:	46bd      	mov	sp, r7
    3c08:	bd80      	pop	{r7, pc}
    3c0a:	bf00      	nop
    3c0c:	0001aaec 	.word	0x0001aaec

00003c10 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    3c10:	b580      	push	{r7, lr}
    3c12:	b082      	sub	sp, #8
    3c14:	af00      	add	r7, sp, #0
    3c16:	6078      	str	r0, [r7, #4]
    3c18:	6039      	str	r1, [r7, #0]
	ARG_UNUSED(backend);

	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
    3c1a:	6839      	ldr	r1, [r7, #0]
    3c1c:	4803      	ldr	r0, [pc, #12]	; (3c2c <dropped+0x1c>)
    3c1e:	f00d ff5c 	bl	11ada <log_backend_std_dropped>
	}
}
    3c22:	bf00      	nop
    3c24:	3708      	adds	r7, #8
    3c26:	46bd      	mov	sp, r7
    3c28:	bd80      	pop	{r7, pc}
    3c2a:	bf00      	nop
    3c2c:	0001aaec 	.word	0x0001aaec

00003c30 <k_us_to_ticks_ceil32>:
 * Rounds up to the next highest output unit.
 *
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_us_to_ticks_ceil32(uint32_t t)
{
    3c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    3c34:	b08c      	sub	sp, #48	; 0x30
    3c36:	af00      	add	r7, sp, #0
    3c38:	6078      	str	r0, [r7, #4]
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_us, Z_HZ_ticks, true, true, true, false);
    3c3a:	687b      	ldr	r3, [r7, #4]
    3c3c:	461a      	mov	r2, r3
    3c3e:	f04f 0300 	mov.w	r3, #0
    3c42:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    3c46:	4b8c      	ldr	r3, [pc, #560]	; (3e78 <k_us_to_ticks_ceil32+0x248>)
    3c48:	627b      	str	r3, [r7, #36]	; 0x24
    3c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    3c4e:	623b      	str	r3, [r7, #32]
    3c50:	2301      	movs	r3, #1
    3c52:	77fb      	strb	r3, [r7, #31]
    3c54:	2301      	movs	r3, #1
    3c56:	77bb      	strb	r3, [r7, #30]
    3c58:	2301      	movs	r3, #1
    3c5a:	777b      	strb	r3, [r7, #29]
    3c5c:	2300      	movs	r3, #0
    3c5e:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    3c60:	7ffb      	ldrb	r3, [r7, #31]
    3c62:	2b00      	cmp	r3, #0
    3c64:	d00f      	beq.n	3c86 <k_us_to_ticks_ceil32+0x56>
	bool mul_ratio = const_hz &&
    3c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3c68:	6a3b      	ldr	r3, [r7, #32]
    3c6a:	429a      	cmp	r2, r3
    3c6c:	d20b      	bcs.n	3c86 <k_us_to_ticks_ceil32+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    3c6e:	6a3b      	ldr	r3, [r7, #32]
    3c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3c72:	fbb3 f2f2 	udiv	r2, r3, r2
    3c76:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3c78:	fb01 f202 	mul.w	r2, r1, r2
    3c7c:	1a9b      	subs	r3, r3, r2
    3c7e:	2b00      	cmp	r3, #0
    3c80:	d101      	bne.n	3c86 <k_us_to_ticks_ceil32+0x56>
    3c82:	2301      	movs	r3, #1
    3c84:	e000      	b.n	3c88 <k_us_to_ticks_ceil32+0x58>
    3c86:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
    3c88:	76fb      	strb	r3, [r7, #27]
    3c8a:	7efb      	ldrb	r3, [r7, #27]
    3c8c:	f003 0301 	and.w	r3, r3, #1
    3c90:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    3c92:	7ffb      	ldrb	r3, [r7, #31]
    3c94:	2b00      	cmp	r3, #0
    3c96:	d00f      	beq.n	3cb8 <k_us_to_ticks_ceil32+0x88>
	bool div_ratio = const_hz &&
    3c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3c9a:	6a3b      	ldr	r3, [r7, #32]
    3c9c:	429a      	cmp	r2, r3
    3c9e:	d90b      	bls.n	3cb8 <k_us_to_ticks_ceil32+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    3ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ca2:	6a3a      	ldr	r2, [r7, #32]
    3ca4:	fbb3 f2f2 	udiv	r2, r3, r2
    3ca8:	6a39      	ldr	r1, [r7, #32]
    3caa:	fb01 f202 	mul.w	r2, r1, r2
    3cae:	1a9b      	subs	r3, r3, r2
    3cb0:	2b00      	cmp	r3, #0
    3cb2:	d101      	bne.n	3cb8 <k_us_to_ticks_ceil32+0x88>
    3cb4:	2301      	movs	r3, #1
    3cb6:	e000      	b.n	3cba <k_us_to_ticks_ceil32+0x8a>
    3cb8:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
    3cba:	76bb      	strb	r3, [r7, #26]
    3cbc:	7ebb      	ldrb	r3, [r7, #26]
    3cbe:	f003 0301 	and.w	r3, r3, #1
    3cc2:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
    3cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3cc6:	6a3b      	ldr	r3, [r7, #32]
    3cc8:	429a      	cmp	r2, r3
    3cca:	d10a      	bne.n	3ce2 <k_us_to_ticks_ceil32+0xb2>
		return result32 ? ((uint32_t)t) : t;
    3ccc:	7fbb      	ldrb	r3, [r7, #30]
    3cce:	2b00      	cmp	r3, #0
    3cd0:	d004      	beq.n	3cdc <k_us_to_ticks_ceil32+0xac>
    3cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3cd4:	461a      	mov	r2, r3
    3cd6:	f04f 0300 	mov.w	r3, #0
    3cda:	e0c7      	b.n	3e6c <k_us_to_ticks_ceil32+0x23c>
    3cdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    3ce0:	e0c4      	b.n	3e6c <k_us_to_ticks_ceil32+0x23c>
	uint64_t off = 0;
    3ce2:	f04f 0200 	mov.w	r2, #0
    3ce6:	f04f 0300 	mov.w	r3, #0
    3cea:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
    3cee:	7efb      	ldrb	r3, [r7, #27]
    3cf0:	f083 0301 	eor.w	r3, r3, #1
    3cf4:	b2db      	uxtb	r3, r3
    3cf6:	2b00      	cmp	r3, #0
    3cf8:	d01d      	beq.n	3d36 <k_us_to_ticks_ceil32+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
    3cfa:	7ebb      	ldrb	r3, [r7, #26]
    3cfc:	2b00      	cmp	r3, #0
    3cfe:	d004      	beq.n	3d0a <k_us_to_ticks_ceil32+0xda>
    3d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3d02:	6a3b      	ldr	r3, [r7, #32]
    3d04:	fbb2 f3f3 	udiv	r3, r2, r3
    3d08:	e000      	b.n	3d0c <k_us_to_ticks_ceil32+0xdc>
    3d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3d0c:	60fb      	str	r3, [r7, #12]
		if (round_up) {
    3d0e:	7f7b      	ldrb	r3, [r7, #29]
    3d10:	2b00      	cmp	r3, #0
    3d12:	d006      	beq.n	3d22 <k_us_to_ticks_ceil32+0xf2>
			off = rdivisor - 1U;
    3d14:	68fb      	ldr	r3, [r7, #12]
    3d16:	3b01      	subs	r3, #1
    3d18:	461a      	mov	r2, r3
    3d1a:	f04f 0300 	mov.w	r3, #0
    3d1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
    3d22:	7f3b      	ldrb	r3, [r7, #28]
    3d24:	2b00      	cmp	r3, #0
    3d26:	d006      	beq.n	3d36 <k_us_to_ticks_ceil32+0x106>
			off = rdivisor / 2U;
    3d28:	68fb      	ldr	r3, [r7, #12]
    3d2a:	085b      	lsrs	r3, r3, #1
    3d2c:	461a      	mov	r2, r3
    3d2e:	f04f 0300 	mov.w	r3, #0
    3d32:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
    3d36:	7ebb      	ldrb	r3, [r7, #26]
    3d38:	2b00      	cmp	r3, #0
    3d3a:	d02a      	beq.n	3d92 <k_us_to_ticks_ceil32+0x162>
		t += off;
    3d3c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
    3d40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    3d44:	1884      	adds	r4, r0, r2
    3d46:	eb41 0503 	adc.w	r5, r1, r3
    3d4a:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
    3d4e:	7fbb      	ldrb	r3, [r7, #30]
    3d50:	2b00      	cmp	r3, #0
    3d52:	d010      	beq.n	3d76 <k_us_to_ticks_ceil32+0x146>
    3d54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    3d58:	2b01      	cmp	r3, #1
    3d5a:	bf08      	it	eq
    3d5c:	2a00      	cmpeq	r2, #0
    3d5e:	d20a      	bcs.n	3d76 <k_us_to_ticks_ceil32+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
    3d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3d62:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3d64:	6a3b      	ldr	r3, [r7, #32]
    3d66:	fbb1 f3f3 	udiv	r3, r1, r3
    3d6a:	fbb2 f3f3 	udiv	r3, r2, r3
    3d6e:	461a      	mov	r2, r3
    3d70:	f04f 0300 	mov.w	r3, #0
    3d74:	e07a      	b.n	3e6c <k_us_to_ticks_ceil32+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
    3d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3d78:	6a3b      	ldr	r3, [r7, #32]
    3d7a:	fbb2 f3f3 	udiv	r3, r2, r3
    3d7e:	461a      	mov	r2, r3
    3d80:	f04f 0300 	mov.w	r3, #0
    3d84:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
    3d88:	f7fc f9dc 	bl	144 <__aeabi_uldivmod>
    3d8c:	4602      	mov	r2, r0
    3d8e:	460b      	mov	r3, r1
    3d90:	e06c      	b.n	3e6c <k_us_to_ticks_ceil32+0x23c>
	} else if (mul_ratio) {
    3d92:	7efb      	ldrb	r3, [r7, #27]
    3d94:	2b00      	cmp	r3, #0
    3d96:	d021      	beq.n	3ddc <k_us_to_ticks_ceil32+0x1ac>
		if (result32) {
    3d98:	7fbb      	ldrb	r3, [r7, #30]
    3d9a:	2b00      	cmp	r3, #0
    3d9c:	d00a      	beq.n	3db4 <k_us_to_ticks_ceil32+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
    3d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3da0:	6a39      	ldr	r1, [r7, #32]
    3da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3da4:	fbb1 f2f2 	udiv	r2, r1, r2
    3da8:	fb02 f303 	mul.w	r3, r2, r3
    3dac:	461a      	mov	r2, r3
    3dae:	f04f 0300 	mov.w	r3, #0
    3db2:	e05b      	b.n	3e6c <k_us_to_ticks_ceil32+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
    3db4:	6a3a      	ldr	r2, [r7, #32]
    3db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3db8:	fbb2 f3f3 	udiv	r3, r2, r3
    3dbc:	461a      	mov	r2, r3
    3dbe:	f04f 0300 	mov.w	r3, #0
    3dc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3dc4:	fb03 f001 	mul.w	r0, r3, r1
    3dc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3dca:	fb02 f101 	mul.w	r1, r2, r1
    3dce:	4401      	add	r1, r0
    3dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3dd2:	fba0 2302 	umull	r2, r3, r0, r2
    3dd6:	4419      	add	r1, r3
    3dd8:	460b      	mov	r3, r1
    3dda:	e047      	b.n	3e6c <k_us_to_ticks_ceil32+0x23c>
		if (result32) {
    3ddc:	7fbb      	ldrb	r3, [r7, #30]
    3dde:	2b00      	cmp	r3, #0
    3de0:	d024      	beq.n	3e2c <k_us_to_ticks_ceil32+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
    3de2:	6a3b      	ldr	r3, [r7, #32]
    3de4:	461a      	mov	r2, r3
    3de6:	f04f 0300 	mov.w	r3, #0
    3dea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3dec:	fb03 f001 	mul.w	r0, r3, r1
    3df0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3df2:	fb02 f101 	mul.w	r1, r2, r1
    3df6:	4401      	add	r1, r0
    3df8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3dfa:	fba0 2302 	umull	r2, r3, r0, r2
    3dfe:	4419      	add	r1, r3
    3e00:	460b      	mov	r3, r1
    3e02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    3e06:	eb12 0a00 	adds.w	sl, r2, r0
    3e0a:	eb43 0b01 	adc.w	fp, r3, r1
    3e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e10:	461a      	mov	r2, r3
    3e12:	f04f 0300 	mov.w	r3, #0
    3e16:	4650      	mov	r0, sl
    3e18:	4659      	mov	r1, fp
    3e1a:	f7fc f993 	bl	144 <__aeabi_uldivmod>
    3e1e:	4602      	mov	r2, r0
    3e20:	460b      	mov	r3, r1
    3e22:	4613      	mov	r3, r2
    3e24:	461a      	mov	r2, r3
    3e26:	f04f 0300 	mov.w	r3, #0
    3e2a:	e01f      	b.n	3e6c <k_us_to_ticks_ceil32+0x23c>
			return (t * to_hz + off) / from_hz;
    3e2c:	6a3b      	ldr	r3, [r7, #32]
    3e2e:	461a      	mov	r2, r3
    3e30:	f04f 0300 	mov.w	r3, #0
    3e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    3e36:	fb03 f001 	mul.w	r0, r3, r1
    3e3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3e3c:	fb02 f101 	mul.w	r1, r2, r1
    3e40:	4401      	add	r1, r0
    3e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3e44:	fba0 2302 	umull	r2, r3, r0, r2
    3e48:	4419      	add	r1, r3
    3e4a:	460b      	mov	r3, r1
    3e4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    3e50:	eb12 0800 	adds.w	r8, r2, r0
    3e54:	eb43 0901 	adc.w	r9, r3, r1
    3e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3e5a:	461a      	mov	r2, r3
    3e5c:	f04f 0300 	mov.w	r3, #0
    3e60:	4640      	mov	r0, r8
    3e62:	4649      	mov	r1, r9
    3e64:	f7fc f96e 	bl	144 <__aeabi_uldivmod>
    3e68:	4602      	mov	r2, r0
    3e6a:	460b      	mov	r3, r1
	return z_tmcvt(t, Z_HZ_us, Z_HZ_ticks, true, true, true, false);
    3e6c:	4613      	mov	r3, r2
}
    3e6e:	4618      	mov	r0, r3
    3e70:	3730      	adds	r7, #48	; 0x30
    3e72:	46bd      	mov	sp, r7
    3e74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
    3e78:	000f4240 	.word	0x000f4240

00003e7c <log_const_source_id>:
{
    3e7c:	b480      	push	{r7}
    3e7e:	b083      	sub	sp, #12
    3e80:	af00      	add	r7, sp, #0
    3e82:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    3e84:	687b      	ldr	r3, [r7, #4]
    3e86:	4a04      	ldr	r2, [pc, #16]	; (3e98 <log_const_source_id+0x1c>)
    3e88:	1a9b      	subs	r3, r3, r2
    3e8a:	08db      	lsrs	r3, r3, #3
}
    3e8c:	4618      	mov	r0, r3
    3e8e:	370c      	adds	r7, #12
    3e90:	46bd      	mov	sp, r7
    3e92:	bc80      	pop	{r7}
    3e94:	4770      	bx	lr
    3e96:	bf00      	nop
    3e98:	000170bc 	.word	0x000170bc

00003e9c <exit_pos_ops>:
static void pm_log_debug_info(enum pm_state state) { }
void pm_dump_debug_info(void) { }
#endif

static inline void exit_pos_ops(struct pm_state_info info)
{
    3e9c:	b580      	push	{r7, lr}
    3e9e:	b086      	sub	sp, #24
    3ea0:	af00      	add	r7, sp, #0
    3ea2:	1d3b      	adds	r3, r7, #4
    3ea4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	extern __weak void
		pm_power_state_exit_post_ops(struct pm_state_info info);

	if (pm_power_state_exit_post_ops != NULL) {
    3ea8:	4b0a      	ldr	r3, [pc, #40]	; (3ed4 <exit_pos_ops+0x38>)
    3eaa:	2b00      	cmp	r3, #0
    3eac:	d005      	beq.n	3eba <exit_pos_ops+0x1e>
		pm_power_state_exit_post_ops(info);
    3eae:	1d3b      	adds	r3, r7, #4
    3eb0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3eb4:	f7fe f988 	bl	21c8 <pm_power_state_exit_post_ops>
		 * The kernel expects that irqs are unlocked after this.
		 */

		irq_unlock(0);
	}
}
    3eb8:	e007      	b.n	3eca <exit_pos_ops+0x2e>
    3eba:	2300      	movs	r3, #0
    3ebc:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
    3ebe:	697b      	ldr	r3, [r7, #20]
    3ec0:	f383 8811 	msr	BASEPRI, r3
    3ec4:	f3bf 8f6f 	isb	sy
}
    3ec8:	bf00      	nop
    3eca:	bf00      	nop
    3ecc:	3718      	adds	r7, #24
    3ece:	46bd      	mov	sp, r7
    3ed0:	bd80      	pop	{r7, pc}
    3ed2:	bf00      	nop
    3ed4:	000021c9 	.word	0x000021c9

00003ed8 <pm_state_set>:

static inline void pm_state_set(struct pm_state_info info)
{
    3ed8:	b580      	push	{r7, lr}
    3eda:	b084      	sub	sp, #16
    3edc:	af00      	add	r7, sp, #0
    3ede:	1d3b      	adds	r3, r7, #4
    3ee0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	extern __weak void
		pm_power_state_set(struct pm_state_info info);

	if (pm_power_state_set != NULL) {
    3ee4:	4b05      	ldr	r3, [pc, #20]	; (3efc <pm_state_set+0x24>)
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	d004      	beq.n	3ef4 <pm_state_set+0x1c>
		pm_power_state_set(info);
    3eea:	1d3b      	adds	r3, r7, #4
    3eec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3ef0:	f7fe f916 	bl	2120 <pm_power_state_set>
	}
}
    3ef4:	bf00      	nop
    3ef6:	3710      	adds	r7, #16
    3ef8:	46bd      	mov	sp, r7
    3efa:	bd80      	pop	{r7, pc}
    3efc:	00002121 	.word	0x00002121

00003f00 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    3f00:	b580      	push	{r7, lr}
    3f02:	b08c      	sub	sp, #48	; 0x30
    3f04:	af00      	add	r7, sp, #0
    3f06:	4603      	mov	r3, r0
    3f08:	71fb      	strb	r3, [r7, #7]
    3f0a:	4b44      	ldr	r3, [pc, #272]	; (401c <pm_state_notify+0x11c>)
    3f0c:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
    3f0e:	f04f 0320 	mov.w	r3, #32
    3f12:	f3ef 8211 	mrs	r2, BASEPRI
    3f16:	f383 8811 	msr	BASEPRI, r3
    3f1a:	f3bf 8f6f 	isb	sy
    3f1e:	623a      	str	r2, [r7, #32]
    3f20:	61fb      	str	r3, [r7, #28]
	return key;
    3f22:	6a3b      	ldr	r3, [r7, #32]
	k.key = arch_irq_lock();
    3f24:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    3f26:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3f28:	f007 fd0c 	bl	b944 <z_spin_lock_valid>
    3f2c:	4603      	mov	r3, r0
    3f2e:	f083 0301 	eor.w	r3, r3, #1
    3f32:	b2db      	uxtb	r3, r3
    3f34:	2b00      	cmp	r3, #0
    3f36:	d00d      	beq.n	3f54 <pm_state_notify+0x54>
    3f38:	2381      	movs	r3, #129	; 0x81
    3f3a:	4a39      	ldr	r2, [pc, #228]	; (4020 <pm_state_notify+0x120>)
    3f3c:	4939      	ldr	r1, [pc, #228]	; (4024 <pm_state_notify+0x124>)
    3f3e:	483a      	ldr	r0, [pc, #232]	; (4028 <pm_state_notify+0x128>)
    3f40:	f00b fe98 	bl	fc74 <printk>
    3f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3f46:	4839      	ldr	r0, [pc, #228]	; (402c <pm_state_notify+0x12c>)
    3f48:	f00b fe94 	bl	fc74 <printk>
    3f4c:	2181      	movs	r1, #129	; 0x81
    3f4e:	4834      	ldr	r0, [pc, #208]	; (4020 <pm_state_notify+0x120>)
    3f50:	f00c faec 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    3f54:	6a78      	ldr	r0, [r7, #36]	; 0x24
    3f56:	f007 fd2d 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    3f5a:	68bb      	ldr	r3, [r7, #8]
    3f5c:	613b      	str	r3, [r7, #16]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3f5e:	4834      	ldr	r0, [pc, #208]	; (4030 <pm_state_notify+0x130>)
    3f60:	f00d fe01 	bl	11b66 <sys_slist_peek_head>
    3f64:	4603      	mov	r3, r0
    3f66:	2b00      	cmp	r3, #0
    3f68:	d004      	beq.n	3f74 <pm_state_notify+0x74>
    3f6a:	4831      	ldr	r0, [pc, #196]	; (4030 <pm_state_notify+0x130>)
    3f6c:	f00d fdfb 	bl	11b66 <sys_slist_peek_head>
    3f70:	4603      	mov	r3, r0
    3f72:	e000      	b.n	3f76 <pm_state_notify+0x76>
    3f74:	2300      	movs	r3, #0
    3f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    3f78:	e025      	b.n	3fc6 <pm_state_notify+0xc6>
		if (entering_state) {
    3f7a:	79fb      	ldrb	r3, [r7, #7]
    3f7c:	2b00      	cmp	r3, #0
    3f7e:	d003      	beq.n	3f88 <pm_state_notify+0x88>
			callback = notifier->state_entry;
    3f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3f82:	685b      	ldr	r3, [r3, #4]
    3f84:	62bb      	str	r3, [r7, #40]	; 0x28
    3f86:	e002      	b.n	3f8e <pm_state_notify+0x8e>
		} else {
			callback = notifier->state_exit;
    3f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3f8a:	689b      	ldr	r3, [r3, #8]
    3f8c:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		if (callback) {
    3f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f90:	2b00      	cmp	r3, #0
    3f92:	d004      	beq.n	3f9e <pm_state_notify+0x9e>
			callback(z_power_state.state);
    3f94:	4b27      	ldr	r3, [pc, #156]	; (4034 <pm_state_notify+0x134>)
    3f96:	781a      	ldrb	r2, [r3, #0]
    3f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3f9a:	4610      	mov	r0, r2
    3f9c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3fa0:	2b00      	cmp	r3, #0
    3fa2:	d00e      	beq.n	3fc2 <pm_state_notify+0xc2>
    3fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3fa6:	4618      	mov	r0, r3
    3fa8:	f00d fdf4 	bl	11b94 <sys_slist_peek_next>
    3fac:	4603      	mov	r3, r0
    3fae:	2b00      	cmp	r3, #0
    3fb0:	d005      	beq.n	3fbe <pm_state_notify+0xbe>
    3fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3fb4:	4618      	mov	r0, r3
    3fb6:	f00d fded 	bl	11b94 <sys_slist_peek_next>
    3fba:	4603      	mov	r3, r0
    3fbc:	e002      	b.n	3fc4 <pm_state_notify+0xc4>
    3fbe:	2300      	movs	r3, #0
    3fc0:	e000      	b.n	3fc4 <pm_state_notify+0xc4>
    3fc2:	2300      	movs	r3, #0
    3fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    3fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3fc8:	2b00      	cmp	r3, #0
    3fca:	d1d6      	bne.n	3f7a <pm_state_notify+0x7a>
    3fcc:	4b13      	ldr	r3, [pc, #76]	; (401c <pm_state_notify+0x11c>)
    3fce:	61bb      	str	r3, [r7, #24]
    3fd0:	693b      	ldr	r3, [r7, #16]
    3fd2:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    3fd4:	69b8      	ldr	r0, [r7, #24]
    3fd6:	f007 fcd1 	bl	b97c <z_spin_unlock_valid>
    3fda:	4603      	mov	r3, r0
    3fdc:	f083 0301 	eor.w	r3, r3, #1
    3fe0:	b2db      	uxtb	r3, r3
    3fe2:	2b00      	cmp	r3, #0
    3fe4:	d00d      	beq.n	4002 <pm_state_notify+0x102>
    3fe6:	23ac      	movs	r3, #172	; 0xac
    3fe8:	4a0d      	ldr	r2, [pc, #52]	; (4020 <pm_state_notify+0x120>)
    3fea:	4913      	ldr	r1, [pc, #76]	; (4038 <pm_state_notify+0x138>)
    3fec:	480e      	ldr	r0, [pc, #56]	; (4028 <pm_state_notify+0x128>)
    3fee:	f00b fe41 	bl	fc74 <printk>
    3ff2:	69b9      	ldr	r1, [r7, #24]
    3ff4:	4811      	ldr	r0, [pc, #68]	; (403c <pm_state_notify+0x13c>)
    3ff6:	f00b fe3d 	bl	fc74 <printk>
    3ffa:	21ac      	movs	r1, #172	; 0xac
    3ffc:	4808      	ldr	r0, [pc, #32]	; (4020 <pm_state_notify+0x120>)
    3ffe:	f00c fa95 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    4002:	68fb      	ldr	r3, [r7, #12]
    4004:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
    4006:	697b      	ldr	r3, [r7, #20]
    4008:	f383 8811 	msr	BASEPRI, r3
    400c:	f3bf 8f6f 	isb	sy
}
    4010:	bf00      	nop
}
    4012:	bf00      	nop
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    4014:	bf00      	nop
    4016:	3730      	adds	r7, #48	; 0x30
    4018:	46bd      	mov	sp, r7
    401a:	bd80      	pop	{r7, pc}
    401c:	20000574 	.word	0x20000574
    4020:	00017900 	.word	0x00017900
    4024:	00017928 	.word	0x00017928
    4028:	00017940 	.word	0x00017940
    402c:	00017960 	.word	0x00017960
    4030:	2000056c 	.word	0x2000056c
    4034:	20000560 	.word	0x20000560
    4038:	00017978 	.word	0x00017978
    403c:	00017990 	.word	0x00017990

00004040 <pm_system_resume>:

void pm_system_resume(void)
{
    4040:	b580      	push	{r7, lr}
    4042:	af00      	add	r7, sp, #0
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    4044:	4b08      	ldr	r3, [pc, #32]	; (4068 <pm_system_resume+0x28>)
    4046:	681b      	ldr	r3, [r3, #0]
    4048:	2b00      	cmp	r3, #0
    404a:	d10a      	bne.n	4062 <pm_system_resume+0x22>
		post_ops_done = 1;
    404c:	4b06      	ldr	r3, [pc, #24]	; (4068 <pm_system_resume+0x28>)
    404e:	2201      	movs	r2, #1
    4050:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    4052:	4b06      	ldr	r3, [pc, #24]	; (406c <pm_system_resume+0x2c>)
    4054:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    4058:	f7ff ff20 	bl	3e9c <exit_pos_ops>
		pm_state_notify(false);
    405c:	2000      	movs	r0, #0
    405e:	f7ff ff4f 	bl	3f00 <pm_state_notify>
	}
}
    4062:	bf00      	nop
    4064:	bd80      	pop	{r7, pc}
    4066:	bf00      	nop
    4068:	200000e0 	.word	0x200000e0
    406c:	20000560 	.word	0x20000560

00004070 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    4070:	b590      	push	{r4, r7, lr}
    4072:	b08b      	sub	sp, #44	; 0x2c
    4074:	af00      	add	r7, sp, #0
    4076:	6178      	str	r0, [r7, #20]
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    4078:	4c47      	ldr	r4, [pc, #284]	; (4198 <pm_system_suspend+0x128>)
    407a:	463b      	mov	r3, r7
    407c:	6979      	ldr	r1, [r7, #20]
    407e:	4618      	mov	r0, r3
    4080:	f000 fa02 	bl	4488 <pm_policy_next_state>
    4084:	463b      	mov	r3, r7
    4086:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    408a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    408e:	4b42      	ldr	r3, [pc, #264]	; (4198 <pm_system_suspend+0x128>)
    4090:	781b      	ldrb	r3, [r3, #0]
    4092:	2b00      	cmp	r3, #0
    4094:	d13c      	bne.n	4110 <pm_system_suspend+0xa0>
		LOG_DBG("No PM operations done.");
    4096:	2303      	movs	r3, #3
    4098:	2b03      	cmp	r3, #3
    409a:	d935      	bls.n	4108 <pm_system_suspend+0x98>
    409c:	f00d fd8b 	bl	11bb6 <k_is_user_context>
    40a0:	4603      	mov	r3, r0
    40a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    40a6:	2300      	movs	r3, #0
    40a8:	623b      	str	r3, [r7, #32]
    40aa:	2303      	movs	r3, #3
    40ac:	2b00      	cmp	r3, #0
    40ae:	d007      	beq.n	40c0 <pm_system_suspend+0x50>
    40b0:	4b3a      	ldr	r3, [pc, #232]	; (419c <pm_system_suspend+0x12c>)
    40b2:	681b      	ldr	r3, [r3, #0]
    40b4:	4618      	mov	r0, r3
    40b6:	f7ff fee1 	bl	3e7c <log_const_source_id>
    40ba:	4603      	mov	r3, r0
    40bc:	b29b      	uxth	r3, r3
    40be:	e000      	b.n	40c2 <pm_system_suspend+0x52>
    40c0:	2300      	movs	r3, #0
    40c2:	84bb      	strh	r3, [r7, #36]	; 0x24
    40c4:	7f3b      	ldrb	r3, [r7, #28]
    40c6:	2204      	movs	r2, #4
    40c8:	f362 0302 	bfi	r3, r2, #0, #3
    40cc:	773b      	strb	r3, [r7, #28]
    40ce:	7f3b      	ldrb	r3, [r7, #28]
    40d0:	f36f 03c5 	bfc	r3, #3, #3
    40d4:	773b      	strb	r3, [r7, #28]
    40d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    40d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    40dc:	b29a      	uxth	r2, r3
    40de:	8bbb      	ldrh	r3, [r7, #28]
    40e0:	f362 138f 	bfi	r3, r2, #6, #10
    40e4:	83bb      	strh	r3, [r7, #28]
    40e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    40ea:	2b00      	cmp	r3, #0
    40ec:	d005      	beq.n	40fa <pm_system_suspend+0x8a>
    40ee:	4a2c      	ldr	r2, [pc, #176]	; (41a0 <pm_system_suspend+0x130>)
    40f0:	492c      	ldr	r1, [pc, #176]	; (41a4 <pm_system_suspend+0x134>)
    40f2:	8bb8      	ldrh	r0, [r7, #28]
    40f4:	f7fe fdc2 	bl	2c7c <log_from_user>
    40f8:	e007      	b.n	410a <pm_system_suspend+0x9a>
    40fa:	4b29      	ldr	r3, [pc, #164]	; (41a0 <pm_system_suspend+0x130>)
    40fc:	8bba      	ldrh	r2, [r7, #28]
    40fe:	4619      	mov	r1, r3
    4100:	4828      	ldr	r0, [pc, #160]	; (41a4 <pm_system_suspend+0x134>)
    4102:	f00c fec9 	bl	10e98 <log_1>
    4106:	e000      	b.n	410a <pm_system_suspend+0x9a>
    4108:	bf00      	nop
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
    410a:	4b23      	ldr	r3, [pc, #140]	; (4198 <pm_system_suspend+0x128>)
    410c:	781b      	ldrb	r3, [r3, #0]
    410e:	e03e      	b.n	418e <pm_system_suspend+0x11e>
	}
	post_ops_done = 0;
    4110:	4b25      	ldr	r3, [pc, #148]	; (41a8 <pm_system_suspend+0x138>)
    4112:	2200      	movs	r2, #0
    4114:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    4116:	697b      	ldr	r3, [r7, #20]
    4118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    411c:	d01e      	beq.n	415c <pm_system_suspend+0xec>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
    411e:	4b1e      	ldr	r3, [pc, #120]	; (4198 <pm_system_suspend+0x128>)
    4120:	685a      	ldr	r2, [r3, #4]
    4122:	4b1d      	ldr	r3, [pc, #116]	; (4198 <pm_system_suspend+0x128>)
    4124:	689b      	ldr	r3, [r3, #8]
    4126:	429a      	cmp	r2, r3
    4128:	d20c      	bcs.n	4144 <pm_system_suspend+0xd4>
    412a:	23cb      	movs	r3, #203	; 0xcb
    412c:	4a1f      	ldr	r2, [pc, #124]	; (41ac <pm_system_suspend+0x13c>)
    412e:	4920      	ldr	r1, [pc, #128]	; (41b0 <pm_system_suspend+0x140>)
    4130:	4820      	ldr	r0, [pc, #128]	; (41b4 <pm_system_suspend+0x144>)
    4132:	f00b fd9f 	bl	fc74 <printk>
    4136:	4820      	ldr	r0, [pc, #128]	; (41b8 <pm_system_suspend+0x148>)
    4138:	f00b fd9c 	bl	fc74 <printk>
    413c:	21cb      	movs	r1, #203	; 0xcb
    413e:	481b      	ldr	r0, [pc, #108]	; (41ac <pm_system_suspend+0x13c>)
    4140:	f00c f9f4 	bl	1052c <assert_post_action>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    4144:	697c      	ldr	r4, [r7, #20]
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
    4146:	4b14      	ldr	r3, [pc, #80]	; (4198 <pm_system_suspend+0x128>)
    4148:	689b      	ldr	r3, [r3, #8]
    414a:	4618      	mov	r0, r3
    414c:	f7ff fd70 	bl	3c30 <k_us_to_ticks_ceil32>
    4150:	4603      	mov	r3, r0
		z_set_timeout_expiry(ticks -
    4152:	1ae3      	subs	r3, r4, r3
    4154:	2101      	movs	r1, #1
    4156:	4618      	mov	r0, r3
    4158:	f00a fe36 	bl	edc8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    415c:	f009 fe38 	bl	ddd0 <k_sched_lock>
	pm_debug_start_timer();
    4160:	f00d fd30 	bl	11bc4 <pm_debug_start_timer>
	/* Enter power state */
	pm_state_notify(true);
    4164:	2001      	movs	r0, #1
    4166:	f7ff fecb 	bl	3f00 <pm_state_notify>
	pm_state_set(z_power_state);
    416a:	4b0b      	ldr	r3, [pc, #44]	; (4198 <pm_system_suspend+0x128>)
    416c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    4170:	f7ff feb2 	bl	3ed8 <pm_state_set>
	pm_debug_stop_timer();
    4174:	f00d fd2c 	bl	11bd0 <pm_debug_stop_timer>
	if (should_resume_devices) {
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
    4178:	4b07      	ldr	r3, [pc, #28]	; (4198 <pm_system_suspend+0x128>)
    417a:	781b      	ldrb	r3, [r3, #0]
    417c:	4618      	mov	r0, r3
    417e:	f00d fd2d 	bl	11bdc <pm_log_debug_info>
	pm_system_resume();
    4182:	f7ff ff5d 	bl	4040 <pm_system_resume>
	k_sched_unlock();
    4186:	f009 fe91 	bl	deac <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    418a:	4b03      	ldr	r3, [pc, #12]	; (4198 <pm_system_suspend+0x128>)
    418c:	781b      	ldrb	r3, [r3, #0]
}
    418e:	4618      	mov	r0, r3
    4190:	372c      	adds	r7, #44	; 0x2c
    4192:	46bd      	mov	sp, r7
    4194:	bd90      	pop	{r4, r7, pc}
    4196:	bf00      	nop
    4198:	20000560 	.word	0x20000560
    419c:	200000dc 	.word	0x200000dc
    41a0:	0001ab18 	.word	0x0001ab18
    41a4:	00017a24 	.word	0x00017a24
    41a8:	200000e0 	.word	0x200000e0
    41ac:	000179a8 	.word	0x000179a8
    41b0:	00017a40 	.word	0x00017a40
    41b4:	00017940 	.word	0x00017940
    41b8:	00017a80 	.word	0x00017a80

000041bc <pm_constraint_get>:
	/* Make compiler happy when assertions are disabled. */
	(void)(v);
}

bool pm_constraint_get(enum pm_state state)
{
    41bc:	b580      	push	{r7, lr}
    41be:	b082      	sub	sp, #8
    41c0:	af00      	add	r7, sp, #0
    41c2:	4603      	mov	r3, r0
    41c4:	71fb      	strb	r3, [r7, #7]
	__ASSERT(state < PM_STATES_LEN, "Invalid power state!");
    41c6:	79fb      	ldrb	r3, [r7, #7]
    41c8:	2b06      	cmp	r3, #6
    41ca:	d90c      	bls.n	41e6 <pm_constraint_get+0x2a>
    41cc:	232f      	movs	r3, #47	; 0x2f
    41ce:	4a0e      	ldr	r2, [pc, #56]	; (4208 <pm_constraint_get+0x4c>)
    41d0:	490e      	ldr	r1, [pc, #56]	; (420c <pm_constraint_get+0x50>)
    41d2:	480f      	ldr	r0, [pc, #60]	; (4210 <pm_constraint_get+0x54>)
    41d4:	f00b fd4e 	bl	fc74 <printk>
    41d8:	480e      	ldr	r0, [pc, #56]	; (4214 <pm_constraint_get+0x58>)
    41da:	f00b fd4b 	bl	fc74 <printk>
    41de:	212f      	movs	r1, #47	; 0x2f
    41e0:	4809      	ldr	r0, [pc, #36]	; (4208 <pm_constraint_get+0x4c>)
    41e2:	f00c f9a3 	bl	1052c <assert_post_action>

	return (atomic_get(&power_state_disable_count[state]) == 0);
    41e6:	79fb      	ldrb	r3, [r7, #7]
    41e8:	009b      	lsls	r3, r3, #2
    41ea:	4a0b      	ldr	r2, [pc, #44]	; (4218 <pm_constraint_get+0x5c>)
    41ec:	4413      	add	r3, r2
    41ee:	4618      	mov	r0, r3
    41f0:	f00d fcfe 	bl	11bf0 <atomic_get>
    41f4:	4603      	mov	r3, r0
    41f6:	2b00      	cmp	r3, #0
    41f8:	bf0c      	ite	eq
    41fa:	2301      	moveq	r3, #1
    41fc:	2300      	movne	r3, #0
    41fe:	b2db      	uxtb	r3, r3
}
    4200:	4618      	mov	r0, r3
    4202:	3708      	adds	r7, #8
    4204:	46bd      	mov	sp, r7
    4206:	bd80      	pop	{r7, pc}
    4208:	00017aa8 	.word	0x00017aa8
    420c:	00017ad0 	.word	0x00017ad0
    4210:	00017b04 	.word	0x00017b04
    4214:	00017b24 	.word	0x00017b24
    4218:	20000578 	.word	0x20000578

0000421c <k_us_to_ticks_ceil32>:
{
    421c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    4220:	b08c      	sub	sp, #48	; 0x30
    4222:	af00      	add	r7, sp, #0
    4224:	6078      	str	r0, [r7, #4]
	return z_tmcvt(t, Z_HZ_us, Z_HZ_ticks, true, true, true, false);
    4226:	687b      	ldr	r3, [r7, #4]
    4228:	461a      	mov	r2, r3
    422a:	f04f 0300 	mov.w	r3, #0
    422e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    4232:	4b8c      	ldr	r3, [pc, #560]	; (4464 <k_us_to_ticks_ceil32+0x248>)
    4234:	627b      	str	r3, [r7, #36]	; 0x24
    4236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    423a:	623b      	str	r3, [r7, #32]
    423c:	2301      	movs	r3, #1
    423e:	77fb      	strb	r3, [r7, #31]
    4240:	2301      	movs	r3, #1
    4242:	77bb      	strb	r3, [r7, #30]
    4244:	2301      	movs	r3, #1
    4246:	777b      	strb	r3, [r7, #29]
    4248:	2300      	movs	r3, #0
    424a:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    424c:	7ffb      	ldrb	r3, [r7, #31]
    424e:	2b00      	cmp	r3, #0
    4250:	d00f      	beq.n	4272 <k_us_to_ticks_ceil32+0x56>
	bool mul_ratio = const_hz &&
    4252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4254:	6a3b      	ldr	r3, [r7, #32]
    4256:	429a      	cmp	r2, r3
    4258:	d20b      	bcs.n	4272 <k_us_to_ticks_ceil32+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    425a:	6a3b      	ldr	r3, [r7, #32]
    425c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    425e:	fbb3 f2f2 	udiv	r2, r3, r2
    4262:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4264:	fb01 f202 	mul.w	r2, r1, r2
    4268:	1a9b      	subs	r3, r3, r2
    426a:	2b00      	cmp	r3, #0
    426c:	d101      	bne.n	4272 <k_us_to_ticks_ceil32+0x56>
    426e:	2301      	movs	r3, #1
    4270:	e000      	b.n	4274 <k_us_to_ticks_ceil32+0x58>
    4272:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
    4274:	76fb      	strb	r3, [r7, #27]
    4276:	7efb      	ldrb	r3, [r7, #27]
    4278:	f003 0301 	and.w	r3, r3, #1
    427c:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    427e:	7ffb      	ldrb	r3, [r7, #31]
    4280:	2b00      	cmp	r3, #0
    4282:	d00f      	beq.n	42a4 <k_us_to_ticks_ceil32+0x88>
	bool div_ratio = const_hz &&
    4284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4286:	6a3b      	ldr	r3, [r7, #32]
    4288:	429a      	cmp	r2, r3
    428a:	d90b      	bls.n	42a4 <k_us_to_ticks_ceil32+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    428e:	6a3a      	ldr	r2, [r7, #32]
    4290:	fbb3 f2f2 	udiv	r2, r3, r2
    4294:	6a39      	ldr	r1, [r7, #32]
    4296:	fb01 f202 	mul.w	r2, r1, r2
    429a:	1a9b      	subs	r3, r3, r2
    429c:	2b00      	cmp	r3, #0
    429e:	d101      	bne.n	42a4 <k_us_to_ticks_ceil32+0x88>
    42a0:	2301      	movs	r3, #1
    42a2:	e000      	b.n	42a6 <k_us_to_ticks_ceil32+0x8a>
    42a4:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
    42a6:	76bb      	strb	r3, [r7, #26]
    42a8:	7ebb      	ldrb	r3, [r7, #26]
    42aa:	f003 0301 	and.w	r3, r3, #1
    42ae:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
    42b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    42b2:	6a3b      	ldr	r3, [r7, #32]
    42b4:	429a      	cmp	r2, r3
    42b6:	d10a      	bne.n	42ce <k_us_to_ticks_ceil32+0xb2>
		return result32 ? ((uint32_t)t) : t;
    42b8:	7fbb      	ldrb	r3, [r7, #30]
    42ba:	2b00      	cmp	r3, #0
    42bc:	d004      	beq.n	42c8 <k_us_to_ticks_ceil32+0xac>
    42be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    42c0:	461a      	mov	r2, r3
    42c2:	f04f 0300 	mov.w	r3, #0
    42c6:	e0c7      	b.n	4458 <k_us_to_ticks_ceil32+0x23c>
    42c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    42cc:	e0c4      	b.n	4458 <k_us_to_ticks_ceil32+0x23c>
	uint64_t off = 0;
    42ce:	f04f 0200 	mov.w	r2, #0
    42d2:	f04f 0300 	mov.w	r3, #0
    42d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
    42da:	7efb      	ldrb	r3, [r7, #27]
    42dc:	f083 0301 	eor.w	r3, r3, #1
    42e0:	b2db      	uxtb	r3, r3
    42e2:	2b00      	cmp	r3, #0
    42e4:	d01d      	beq.n	4322 <k_us_to_ticks_ceil32+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
    42e6:	7ebb      	ldrb	r3, [r7, #26]
    42e8:	2b00      	cmp	r3, #0
    42ea:	d004      	beq.n	42f6 <k_us_to_ticks_ceil32+0xda>
    42ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    42ee:	6a3b      	ldr	r3, [r7, #32]
    42f0:	fbb2 f3f3 	udiv	r3, r2, r3
    42f4:	e000      	b.n	42f8 <k_us_to_ticks_ceil32+0xdc>
    42f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    42f8:	60fb      	str	r3, [r7, #12]
		if (round_up) {
    42fa:	7f7b      	ldrb	r3, [r7, #29]
    42fc:	2b00      	cmp	r3, #0
    42fe:	d006      	beq.n	430e <k_us_to_ticks_ceil32+0xf2>
			off = rdivisor - 1U;
    4300:	68fb      	ldr	r3, [r7, #12]
    4302:	3b01      	subs	r3, #1
    4304:	461a      	mov	r2, r3
    4306:	f04f 0300 	mov.w	r3, #0
    430a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
    430e:	7f3b      	ldrb	r3, [r7, #28]
    4310:	2b00      	cmp	r3, #0
    4312:	d006      	beq.n	4322 <k_us_to_ticks_ceil32+0x106>
			off = rdivisor / 2U;
    4314:	68fb      	ldr	r3, [r7, #12]
    4316:	085b      	lsrs	r3, r3, #1
    4318:	461a      	mov	r2, r3
    431a:	f04f 0300 	mov.w	r3, #0
    431e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
    4322:	7ebb      	ldrb	r3, [r7, #26]
    4324:	2b00      	cmp	r3, #0
    4326:	d02a      	beq.n	437e <k_us_to_ticks_ceil32+0x162>
		t += off;
    4328:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
    432c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    4330:	1884      	adds	r4, r0, r2
    4332:	eb41 0503 	adc.w	r5, r1, r3
    4336:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
    433a:	7fbb      	ldrb	r3, [r7, #30]
    433c:	2b00      	cmp	r3, #0
    433e:	d010      	beq.n	4362 <k_us_to_ticks_ceil32+0x146>
    4340:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    4344:	2b01      	cmp	r3, #1
    4346:	bf08      	it	eq
    4348:	2a00      	cmpeq	r2, #0
    434a:	d20a      	bcs.n	4362 <k_us_to_ticks_ceil32+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
    434c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    434e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    4350:	6a3b      	ldr	r3, [r7, #32]
    4352:	fbb1 f3f3 	udiv	r3, r1, r3
    4356:	fbb2 f3f3 	udiv	r3, r2, r3
    435a:	461a      	mov	r2, r3
    435c:	f04f 0300 	mov.w	r3, #0
    4360:	e07a      	b.n	4458 <k_us_to_ticks_ceil32+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
    4362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4364:	6a3b      	ldr	r3, [r7, #32]
    4366:	fbb2 f3f3 	udiv	r3, r2, r3
    436a:	461a      	mov	r2, r3
    436c:	f04f 0300 	mov.w	r3, #0
    4370:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
    4374:	f7fb fee6 	bl	144 <__aeabi_uldivmod>
    4378:	4602      	mov	r2, r0
    437a:	460b      	mov	r3, r1
    437c:	e06c      	b.n	4458 <k_us_to_ticks_ceil32+0x23c>
	} else if (mul_ratio) {
    437e:	7efb      	ldrb	r3, [r7, #27]
    4380:	2b00      	cmp	r3, #0
    4382:	d021      	beq.n	43c8 <k_us_to_ticks_ceil32+0x1ac>
		if (result32) {
    4384:	7fbb      	ldrb	r3, [r7, #30]
    4386:	2b00      	cmp	r3, #0
    4388:	d00a      	beq.n	43a0 <k_us_to_ticks_ceil32+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
    438a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    438c:	6a39      	ldr	r1, [r7, #32]
    438e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4390:	fbb1 f2f2 	udiv	r2, r1, r2
    4394:	fb02 f303 	mul.w	r3, r2, r3
    4398:	461a      	mov	r2, r3
    439a:	f04f 0300 	mov.w	r3, #0
    439e:	e05b      	b.n	4458 <k_us_to_ticks_ceil32+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
    43a0:	6a3a      	ldr	r2, [r7, #32]
    43a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    43a4:	fbb2 f3f3 	udiv	r3, r2, r3
    43a8:	461a      	mov	r2, r3
    43aa:	f04f 0300 	mov.w	r3, #0
    43ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    43b0:	fb03 f001 	mul.w	r0, r3, r1
    43b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    43b6:	fb02 f101 	mul.w	r1, r2, r1
    43ba:	4401      	add	r1, r0
    43bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    43be:	fba0 2302 	umull	r2, r3, r0, r2
    43c2:	4419      	add	r1, r3
    43c4:	460b      	mov	r3, r1
    43c6:	e047      	b.n	4458 <k_us_to_ticks_ceil32+0x23c>
		if (result32) {
    43c8:	7fbb      	ldrb	r3, [r7, #30]
    43ca:	2b00      	cmp	r3, #0
    43cc:	d024      	beq.n	4418 <k_us_to_ticks_ceil32+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
    43ce:	6a3b      	ldr	r3, [r7, #32]
    43d0:	461a      	mov	r2, r3
    43d2:	f04f 0300 	mov.w	r3, #0
    43d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    43d8:	fb03 f001 	mul.w	r0, r3, r1
    43dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    43de:	fb02 f101 	mul.w	r1, r2, r1
    43e2:	4401      	add	r1, r0
    43e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    43e6:	fba0 2302 	umull	r2, r3, r0, r2
    43ea:	4419      	add	r1, r3
    43ec:	460b      	mov	r3, r1
    43ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    43f2:	eb12 0a00 	adds.w	sl, r2, r0
    43f6:	eb43 0b01 	adc.w	fp, r3, r1
    43fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    43fc:	461a      	mov	r2, r3
    43fe:	f04f 0300 	mov.w	r3, #0
    4402:	4650      	mov	r0, sl
    4404:	4659      	mov	r1, fp
    4406:	f7fb fe9d 	bl	144 <__aeabi_uldivmod>
    440a:	4602      	mov	r2, r0
    440c:	460b      	mov	r3, r1
    440e:	4613      	mov	r3, r2
    4410:	461a      	mov	r2, r3
    4412:	f04f 0300 	mov.w	r3, #0
    4416:	e01f      	b.n	4458 <k_us_to_ticks_ceil32+0x23c>
			return (t * to_hz + off) / from_hz;
    4418:	6a3b      	ldr	r3, [r7, #32]
    441a:	461a      	mov	r2, r3
    441c:	f04f 0300 	mov.w	r3, #0
    4420:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    4422:	fb03 f001 	mul.w	r0, r3, r1
    4426:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    4428:	fb02 f101 	mul.w	r1, r2, r1
    442c:	4401      	add	r1, r0
    442e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    4430:	fba0 2302 	umull	r2, r3, r0, r2
    4434:	4419      	add	r1, r3
    4436:	460b      	mov	r3, r1
    4438:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    443c:	eb12 0800 	adds.w	r8, r2, r0
    4440:	eb43 0901 	adc.w	r9, r3, r1
    4444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4446:	461a      	mov	r2, r3
    4448:	f04f 0300 	mov.w	r3, #0
    444c:	4640      	mov	r0, r8
    444e:	4649      	mov	r1, r9
    4450:	f7fb fe78 	bl	144 <__aeabi_uldivmod>
    4454:	4602      	mov	r2, r0
    4456:	460b      	mov	r3, r1
	return z_tmcvt(t, Z_HZ_us, Z_HZ_ticks, true, true, true, false);
    4458:	4613      	mov	r3, r2
}
    445a:	4618      	mov	r0, r3
    445c:	3730      	adds	r7, #48	; 0x30
    445e:	46bd      	mov	sp, r7
    4460:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
    4464:	000f4240 	.word	0x000f4240

00004468 <log_const_source_id>:
{
    4468:	b480      	push	{r7}
    446a:	b083      	sub	sp, #12
    446c:	af00      	add	r7, sp, #0
    446e:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    4470:	687b      	ldr	r3, [r7, #4]
    4472:	4a04      	ldr	r2, [pc, #16]	; (4484 <log_const_source_id+0x1c>)
    4474:	1a9b      	subs	r3, r3, r2
    4476:	08db      	lsrs	r3, r3, #3
}
    4478:	4618      	mov	r0, r3
    447a:	370c      	adds	r7, #12
    447c:	46bd      	mov	sp, r7
    447e:	bc80      	pop	{r7}
    4480:	4770      	bx	lr
    4482:	bf00      	nop
    4484:	000170bc 	.word	0x000170bc

00004488 <pm_policy_next_state>:

static const struct pm_state_info pm_min_residency[] =
	PM_STATE_INFO_DT_ITEMS_LIST(DT_NODELABEL(cpu0));

struct pm_state_info pm_policy_next_state(int32_t ticks)
{
    4488:	b580      	push	{r7, lr}
    448a:	b094      	sub	sp, #80	; 0x50
    448c:	af02      	add	r7, sp, #8
    448e:	6078      	str	r0, [r7, #4]
    4490:	6039      	str	r1, [r7, #0]
	int i;

	for (i = ARRAY_SIZE(pm_min_residency) - 1; i >= 0; i--) {
    4492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4496:	647b      	str	r3, [r7, #68]	; 0x44
    4498:	e0c3      	b.n	4622 <pm_policy_next_state+0x19a>
		uint32_t min_residency, exit_latency;

		if (!pm_constraint_get(pm_min_residency[i].state)) {
    449a:	4987      	ldr	r1, [pc, #540]	; (46b8 <pm_policy_next_state+0x230>)
    449c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    449e:	4613      	mov	r3, r2
    44a0:	005b      	lsls	r3, r3, #1
    44a2:	4413      	add	r3, r2
    44a4:	009b      	lsls	r3, r3, #2
    44a6:	440b      	add	r3, r1
    44a8:	781b      	ldrb	r3, [r3, #0]
    44aa:	4618      	mov	r0, r3
    44ac:	f7ff fe86 	bl	41bc <pm_constraint_get>
    44b0:	4603      	mov	r3, r0
    44b2:	f083 0301 	eor.w	r3, r3, #1
    44b6:	b2db      	uxtb	r3, r3
    44b8:	2b00      	cmp	r3, #0
    44ba:	f040 80ae 	bne.w	461a <pm_policy_next_state+0x192>
			continue;
		}

		min_residency = k_us_to_ticks_ceil32(
    44be:	497e      	ldr	r1, [pc, #504]	; (46b8 <pm_policy_next_state+0x230>)
    44c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    44c2:	4613      	mov	r3, r2
    44c4:	005b      	lsls	r3, r3, #1
    44c6:	4413      	add	r3, r2
    44c8:	009b      	lsls	r3, r3, #2
    44ca:	440b      	add	r3, r1
    44cc:	3304      	adds	r3, #4
    44ce:	681b      	ldr	r3, [r3, #0]
    44d0:	4618      	mov	r0, r3
    44d2:	f7ff fea3 	bl	421c <k_us_to_ticks_ceil32>
    44d6:	63f8      	str	r0, [r7, #60]	; 0x3c
			    pm_min_residency[i].min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(
    44d8:	4977      	ldr	r1, [pc, #476]	; (46b8 <pm_policy_next_state+0x230>)
    44da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    44dc:	4613      	mov	r3, r2
    44de:	005b      	lsls	r3, r3, #1
    44e0:	4413      	add	r3, r2
    44e2:	009b      	lsls	r3, r3, #2
    44e4:	440b      	add	r3, r1
    44e6:	3308      	adds	r3, #8
    44e8:	681b      	ldr	r3, [r3, #0]
    44ea:	4618      	mov	r0, r3
    44ec:	f7ff fe96 	bl	421c <k_us_to_ticks_ceil32>
    44f0:	63b8      	str	r0, [r7, #56]	; 0x38
			    pm_min_residency[i].exit_latency_us);
		__ASSERT(min_residency > exit_latency,
    44f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    44f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    44f6:	429a      	cmp	r2, r3
    44f8:	d80c      	bhi.n	4514 <pm_policy_next_state+0x8c>
    44fa:	2322      	movs	r3, #34	; 0x22
    44fc:	4a6f      	ldr	r2, [pc, #444]	; (46bc <pm_policy_next_state+0x234>)
    44fe:	4970      	ldr	r1, [pc, #448]	; (46c0 <pm_policy_next_state+0x238>)
    4500:	4870      	ldr	r0, [pc, #448]	; (46c4 <pm_policy_next_state+0x23c>)
    4502:	f00b fbb7 	bl	fc74 <printk>
    4506:	4870      	ldr	r0, [pc, #448]	; (46c8 <pm_policy_next_state+0x240>)
    4508:	f00b fbb4 	bl	fc74 <printk>
    450c:	2122      	movs	r1, #34	; 0x22
    450e:	486b      	ldr	r0, [pc, #428]	; (46bc <pm_policy_next_state+0x234>)
    4510:	f00c f80c 	bl	1052c <assert_post_action>
				"min_residency_us < exit_latency_us");

		if ((ticks == K_TICKS_FOREVER) ||
    4514:	683b      	ldr	r3, [r7, #0]
    4516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    451a:	d005      	beq.n	4528 <pm_policy_next_state+0xa0>
		    (ticks >= (min_residency + exit_latency))) {
    451c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4520:	441a      	add	r2, r3
    4522:	683b      	ldr	r3, [r7, #0]
		if ((ticks == K_TICKS_FOREVER) ||
    4524:	429a      	cmp	r2, r3
    4526:	d879      	bhi.n	461c <pm_policy_next_state+0x194>
			LOG_DBG("Selected power state %d "
    4528:	2303      	movs	r3, #3
    452a:	2b03      	cmp	r3, #3
    452c:	d967      	bls.n	45fe <pm_policy_next_state+0x176>
    452e:	f00d fb6b 	bl	11c08 <k_is_user_context>
    4532:	4603      	mov	r3, r0
    4534:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    4538:	2300      	movs	r3, #0
    453a:	627b      	str	r3, [r7, #36]	; 0x24
    453c:	2303      	movs	r3, #3
    453e:	2b00      	cmp	r3, #0
    4540:	d007      	beq.n	4552 <pm_policy_next_state+0xca>
    4542:	4b62      	ldr	r3, [pc, #392]	; (46cc <pm_policy_next_state+0x244>)
    4544:	681b      	ldr	r3, [r3, #0]
    4546:	4618      	mov	r0, r3
    4548:	f7ff ff8e 	bl	4468 <log_const_source_id>
    454c:	4603      	mov	r3, r0
    454e:	b29b      	uxth	r3, r3
    4550:	e000      	b.n	4554 <pm_policy_next_state+0xcc>
    4552:	2300      	movs	r3, #0
    4554:	86bb      	strh	r3, [r7, #52]	; 0x34
    4556:	f897 3020 	ldrb.w	r3, [r7, #32]
    455a:	2204      	movs	r2, #4
    455c:	f362 0302 	bfi	r3, r2, #0, #3
    4560:	f887 3020 	strb.w	r3, [r7, #32]
    4564:	f897 3020 	ldrb.w	r3, [r7, #32]
    4568:	f36f 03c5 	bfc	r3, #3, #3
    456c:	f887 3020 	strb.w	r3, [r7, #32]
    4570:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
    4572:	f3c3 0309 	ubfx	r3, r3, #0, #10
    4576:	b29a      	uxth	r2, r3
    4578:	8c3b      	ldrh	r3, [r7, #32]
    457a:	f362 138f 	bfi	r3, r2, #6, #10
    457e:	843b      	strh	r3, [r7, #32]
    4580:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    4584:	2b00      	cmp	r3, #0
    4586:	d01b      	beq.n	45c0 <pm_policy_next_state+0x138>
    4588:	494b      	ldr	r1, [pc, #300]	; (46b8 <pm_policy_next_state+0x230>)
    458a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    458c:	4613      	mov	r3, r2
    458e:	005b      	lsls	r3, r3, #1
    4590:	4413      	add	r3, r2
    4592:	009b      	lsls	r3, r3, #2
    4594:	440b      	add	r3, r1
    4596:	781b      	ldrb	r3, [r3, #0]
    4598:	4618      	mov	r0, r3
    459a:	4947      	ldr	r1, [pc, #284]	; (46b8 <pm_policy_next_state+0x230>)
    459c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    459e:	4613      	mov	r3, r2
    45a0:	005b      	lsls	r3, r3, #1
    45a2:	4413      	add	r3, r2
    45a4:	009b      	lsls	r3, r3, #2
    45a6:	440b      	add	r3, r1
    45a8:	3304      	adds	r3, #4
    45aa:	681b      	ldr	r3, [r3, #0]
    45ac:	9301      	str	r3, [sp, #4]
    45ae:	683b      	ldr	r3, [r7, #0]
    45b0:	9300      	str	r3, [sp, #0]
    45b2:	4603      	mov	r3, r0
    45b4:	4a46      	ldr	r2, [pc, #280]	; (46d0 <pm_policy_next_state+0x248>)
    45b6:	4947      	ldr	r1, [pc, #284]	; (46d4 <pm_policy_next_state+0x24c>)
    45b8:	8c38      	ldrh	r0, [r7, #32]
    45ba:	f7fe fb5f 	bl	2c7c <log_from_user>
    45be:	e01f      	b.n	4600 <pm_policy_next_state+0x178>
    45c0:	4b43      	ldr	r3, [pc, #268]	; (46d0 <pm_policy_next_state+0x248>)
    45c2:	613b      	str	r3, [r7, #16]
    45c4:	493c      	ldr	r1, [pc, #240]	; (46b8 <pm_policy_next_state+0x230>)
    45c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    45c8:	4613      	mov	r3, r2
    45ca:	005b      	lsls	r3, r3, #1
    45cc:	4413      	add	r3, r2
    45ce:	009b      	lsls	r3, r3, #2
    45d0:	440b      	add	r3, r1
    45d2:	781b      	ldrb	r3, [r3, #0]
    45d4:	617b      	str	r3, [r7, #20]
    45d6:	683b      	ldr	r3, [r7, #0]
    45d8:	61bb      	str	r3, [r7, #24]
    45da:	4937      	ldr	r1, [pc, #220]	; (46b8 <pm_policy_next_state+0x230>)
    45dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    45de:	4613      	mov	r3, r2
    45e0:	005b      	lsls	r3, r3, #1
    45e2:	4413      	add	r3, r2
    45e4:	009b      	lsls	r3, r3, #2
    45e6:	440b      	add	r3, r1
    45e8:	3304      	adds	r3, #4
    45ea:	681b      	ldr	r3, [r3, #0]
    45ec:	61fb      	str	r3, [r7, #28]
    45ee:	f107 0110 	add.w	r1, r7, #16
    45f2:	8c3b      	ldrh	r3, [r7, #32]
    45f4:	2204      	movs	r2, #4
    45f6:	4837      	ldr	r0, [pc, #220]	; (46d4 <pm_policy_next_state+0x24c>)
    45f8:	f00c fc98 	bl	10f2c <log_n>
    45fc:	e000      	b.n	4600 <pm_policy_next_state+0x178>
    45fe:	bf00      	nop
				"(ticks: %d, min_residency: %u)",
				pm_min_residency[i].state, ticks,
				pm_min_residency[i].min_residency_us);
			return pm_min_residency[i];
    4600:	6878      	ldr	r0, [r7, #4]
    4602:	492d      	ldr	r1, [pc, #180]	; (46b8 <pm_policy_next_state+0x230>)
    4604:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    4606:	4613      	mov	r3, r2
    4608:	005b      	lsls	r3, r3, #1
    460a:	4413      	add	r3, r2
    460c:	009b      	lsls	r3, r3, #2
    460e:	18ca      	adds	r2, r1, r3
    4610:	4603      	mov	r3, r0
    4612:	ca07      	ldmia	r2, {r0, r1, r2}
    4614:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    4618:	e049      	b.n	46ae <pm_policy_next_state+0x226>
			continue;
    461a:	bf00      	nop
	for (i = ARRAY_SIZE(pm_min_residency) - 1; i >= 0; i--) {
    461c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    461e:	3b01      	subs	r3, #1
    4620:	647b      	str	r3, [r7, #68]	; 0x44
    4622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4624:	2b00      	cmp	r3, #0
    4626:	f6bf af38 	bge.w	449a <pm_policy_next_state+0x12>
		}
	}

	LOG_DBG("No suitable power state found!");
    462a:	2303      	movs	r3, #3
    462c:	2b03      	cmp	r3, #3
    462e:	d937      	bls.n	46a0 <pm_policy_next_state+0x218>
    4630:	f00d faea 	bl	11c08 <k_is_user_context>
    4634:	4603      	mov	r3, r0
    4636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    463a:	2300      	movs	r3, #0
    463c:	60fb      	str	r3, [r7, #12]
    463e:	2303      	movs	r3, #3
    4640:	2b00      	cmp	r3, #0
    4642:	d007      	beq.n	4654 <pm_policy_next_state+0x1cc>
    4644:	4b21      	ldr	r3, [pc, #132]	; (46cc <pm_policy_next_state+0x244>)
    4646:	681b      	ldr	r3, [r3, #0]
    4648:	4618      	mov	r0, r3
    464a:	f7ff ff0d 	bl	4468 <log_const_source_id>
    464e:	4603      	mov	r3, r0
    4650:	b29b      	uxth	r3, r3
    4652:	e000      	b.n	4656 <pm_policy_next_state+0x1ce>
    4654:	2300      	movs	r3, #0
    4656:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    465a:	7a3b      	ldrb	r3, [r7, #8]
    465c:	2204      	movs	r2, #4
    465e:	f362 0302 	bfi	r3, r2, #0, #3
    4662:	723b      	strb	r3, [r7, #8]
    4664:	7a3b      	ldrb	r3, [r7, #8]
    4666:	f36f 03c5 	bfc	r3, #3, #3
    466a:	723b      	strb	r3, [r7, #8]
    466c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
    4670:	f3c3 0309 	ubfx	r3, r3, #0, #10
    4674:	b29a      	uxth	r2, r3
    4676:	893b      	ldrh	r3, [r7, #8]
    4678:	f362 138f 	bfi	r3, r2, #6, #10
    467c:	813b      	strh	r3, [r7, #8]
    467e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4682:	2b00      	cmp	r3, #0
    4684:	d005      	beq.n	4692 <pm_policy_next_state+0x20a>
    4686:	4a12      	ldr	r2, [pc, #72]	; (46d0 <pm_policy_next_state+0x248>)
    4688:	4913      	ldr	r1, [pc, #76]	; (46d8 <pm_policy_next_state+0x250>)
    468a:	8938      	ldrh	r0, [r7, #8]
    468c:	f7fe faf6 	bl	2c7c <log_from_user>
    4690:	e007      	b.n	46a2 <pm_policy_next_state+0x21a>
    4692:	4b0f      	ldr	r3, [pc, #60]	; (46d0 <pm_policy_next_state+0x248>)
    4694:	893a      	ldrh	r2, [r7, #8]
    4696:	4619      	mov	r1, r3
    4698:	480f      	ldr	r0, [pc, #60]	; (46d8 <pm_policy_next_state+0x250>)
    469a:	f00c fbfd 	bl	10e98 <log_1>
    469e:	e000      	b.n	46a2 <pm_policy_next_state+0x21a>
    46a0:	bf00      	nop
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    46a2:	687b      	ldr	r3, [r7, #4]
    46a4:	461a      	mov	r2, r3
    46a6:	2300      	movs	r3, #0
    46a8:	6013      	str	r3, [r2, #0]
    46aa:	6053      	str	r3, [r2, #4]
    46ac:	6093      	str	r3, [r2, #8]
}
    46ae:	6878      	ldr	r0, [r7, #4]
    46b0:	3748      	adds	r7, #72	; 0x48
    46b2:	46bd      	mov	sp, r7
    46b4:	bd80      	pop	{r7, pc}
    46b6:	bf00      	nop
    46b8:	0001ab2c 	.word	0x0001ab2c
    46bc:	00017ba8 	.word	0x00017ba8
    46c0:	00017be0 	.word	0x00017be0
    46c4:	00017c00 	.word	0x00017c00
    46c8:	00017c20 	.word	0x00017c20
    46cc:	200000e4 	.word	0x200000e4
    46d0:	0001ab2c 	.word	0x0001ab2c
    46d4:	00017c48 	.word	0x00017c48
    46d8:	00017c84 	.word	0x00017c84

000046dc <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    46dc:	b580      	push	{r7, lr}
    46de:	b082      	sub	sp, #8
    46e0:	af00      	add	r7, sp, #0
    46e2:	6078      	str	r0, [r7, #4]
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    46e4:	687b      	ldr	r3, [r7, #4]
    46e6:	2b0a      	cmp	r3, #10
    46e8:	d105      	bne.n	46f6 <console_out+0x1a>
		uart_poll_out(uart_console_dev, '\r');
    46ea:	4b09      	ldr	r3, [pc, #36]	; (4710 <console_out+0x34>)
    46ec:	681b      	ldr	r3, [r3, #0]
    46ee:	210d      	movs	r1, #13
    46f0:	4618      	mov	r0, r3
    46f2:	f00d faaf 	bl	11c54 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    46f6:	4b06      	ldr	r3, [pc, #24]	; (4710 <console_out+0x34>)
    46f8:	681b      	ldr	r3, [r3, #0]
    46fa:	687a      	ldr	r2, [r7, #4]
    46fc:	b2d2      	uxtb	r2, r2
    46fe:	4611      	mov	r1, r2
    4700:	4618      	mov	r0, r3
    4702:	f00d faa7 	bl	11c54 <uart_poll_out>

	return c;
    4706:	687b      	ldr	r3, [r7, #4]
}
    4708:	4618      	mov	r0, r3
    470a:	3708      	adds	r7, #8
    470c:	46bd      	mov	sp, r7
    470e:	bd80      	pop	{r7, pc}
    4710:	20000594 	.word	0x20000594

00004714 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    4714:	b580      	push	{r7, lr}
    4716:	af00      	add	r7, sp, #0
	__stdout_hook_install(console_out);
    4718:	4803      	ldr	r0, [pc, #12]	; (4728 <uart_console_hook_install+0x14>)
    471a:	f003 fc8b 	bl	8034 <__stdout_hook_install>
	__printk_hook_install(console_out);
    471e:	4802      	ldr	r0, [pc, #8]	; (4728 <uart_console_hook_install+0x14>)
    4720:	f7fc f89a 	bl	858 <__printk_hook_install>
}
    4724:	bf00      	nop
    4726:	bd80      	pop	{r7, pc}
    4728:	000046dd 	.word	0x000046dd

0000472c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    472c:	b580      	push	{r7, lr}
    472e:	b082      	sub	sp, #8
    4730:	af00      	add	r7, sp, #0
    4732:	6078      	str	r0, [r7, #4]

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    4734:	4806      	ldr	r0, [pc, #24]	; (4750 <uart_console_init+0x24>)
    4736:	f00d fa6e 	bl	11c16 <device_get_binding>
    473a:	4603      	mov	r3, r0
    473c:	4a05      	ldr	r2, [pc, #20]	; (4754 <uart_console_init+0x28>)
    473e:	6013      	str	r3, [r2, #0]

	uart_console_hook_install();
    4740:	f7ff ffe8 	bl	4714 <uart_console_hook_install>

	return 0;
    4744:	2300      	movs	r3, #0
}
    4746:	4618      	mov	r0, r3
    4748:	3708      	adds	r7, #8
    474a:	46bd      	mov	sp, r7
    474c:	bd80      	pop	{r7, pc}
    474e:	bf00      	nop
    4750:	00017ca8 	.word	0x00017ca8
    4754:	20000594 	.word	0x20000594

00004758 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    4758:	b480      	push	{r7}
    475a:	b083      	sub	sp, #12
    475c:	af00      	add	r7, sp, #0
    475e:	4603      	mov	r3, r0
    4760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    4762:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4766:	2b00      	cmp	r3, #0
    4768:	db0c      	blt.n	4784 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    476a:	79fb      	ldrb	r3, [r7, #7]
    476c:	f003 021f 	and.w	r2, r3, #31
    4770:	4907      	ldr	r1, [pc, #28]	; (4790 <__NVIC_ClearPendingIRQ+0x38>)
    4772:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4776:	095b      	lsrs	r3, r3, #5
    4778:	2001      	movs	r0, #1
    477a:	fa00 f202 	lsl.w	r2, r0, r2
    477e:	3360      	adds	r3, #96	; 0x60
    4780:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    4784:	bf00      	nop
    4786:	370c      	adds	r7, #12
    4788:	46bd      	mov	sp, r7
    478a:	bc80      	pop	{r7}
    478c:	4770      	bx	lr
    478e:	bf00      	nop
    4790:	e000e100 	.word	0xe000e100

00004794 <k_is_pre_kernel>:
 *
 * @return true if invoked before post-kernel initialization
 * @return false if invoked during/after post-kernel initialization
 */
static inline bool k_is_pre_kernel(void)
{
    4794:	b480      	push	{r7}
    4796:	af00      	add	r7, sp, #0
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    4798:	4b08      	ldr	r3, [pc, #32]	; (47bc <k_is_pre_kernel+0x28>)
    479a:	781b      	ldrb	r3, [r3, #0]
    479c:	2b00      	cmp	r3, #0
    479e:	bf14      	ite	ne
    47a0:	2301      	movne	r3, #1
    47a2:	2300      	moveq	r3, #0
    47a4:	b2db      	uxtb	r3, r3
    47a6:	f083 0301 	eor.w	r3, r3, #1
    47aa:	b2db      	uxtb	r3, r3
    47ac:	f003 0301 	and.w	r3, r3, #1
    47b0:	b2db      	uxtb	r3, r3
}
    47b2:	4618      	mov	r0, r3
    47b4:	46bd      	mov	sp, r7
    47b6:	bc80      	pop	{r7}
    47b8:	4770      	bx	lr
    47ba:	bf00      	nop
    47bc:	20000c6d 	.word	0x20000c6d

000047c0 <sys_notify_init_spinwait>:
 * reinitialized before it can be re-used.
 *
 * @param notify pointer to the notification configuration object.
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
    47c0:	b580      	push	{r7, lr}
    47c2:	b086      	sub	sp, #24
    47c4:	af00      	add	r7, sp, #0
    47c6:	6078      	str	r0, [r7, #4]
	__ASSERT_NO_MSG(notify != NULL);
    47c8:	687b      	ldr	r3, [r7, #4]
    47ca:	2b00      	cmp	r3, #0
    47cc:	d10b      	bne.n	47e6 <sys_notify_init_spinwait+0x26>
    47ce:	f44f 7385 	mov.w	r3, #266	; 0x10a
    47d2:	4a0b      	ldr	r2, [pc, #44]	; (4800 <sys_notify_init_spinwait+0x40>)
    47d4:	490b      	ldr	r1, [pc, #44]	; (4804 <sys_notify_init_spinwait+0x44>)
    47d6:	480c      	ldr	r0, [pc, #48]	; (4808 <sys_notify_init_spinwait+0x48>)
    47d8:	f00b fa4c 	bl	fc74 <printk>
    47dc:	f44f 7185 	mov.w	r1, #266	; 0x10a
    47e0:	4807      	ldr	r0, [pc, #28]	; (4800 <sys_notify_init_spinwait+0x40>)
    47e2:	f00b fea3 	bl	1052c <assert_post_action>

	*notify = (struct sys_notify){
    47e6:	687b      	ldr	r3, [r7, #4]
    47e8:	461a      	mov	r2, r3
    47ea:	2300      	movs	r3, #0
    47ec:	6013      	str	r3, [r2, #0]
    47ee:	6053      	str	r3, [r2, #4]
    47f0:	6093      	str	r3, [r2, #8]
    47f2:	687b      	ldr	r3, [r7, #4]
    47f4:	2201      	movs	r2, #1
    47f6:	605a      	str	r2, [r3, #4]
		.flags = SYS_NOTIFY_METHOD_SPINWAIT,
	};
}
    47f8:	bf00      	nop
    47fa:	3718      	adds	r7, #24
    47fc:	46bd      	mov	sp, r7
    47fe:	bd80      	pop	{r7, pc}
    4800:	00017cb0 	.word	0x00017cb0
    4804:	00017cd8 	.word	0x00017cd8
    4808:	00017cf0 	.word	0x00017cf0

0000480c <nrf_clock_is_running>:
}

NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
                                            nrf_clock_domain_t     domain,
                                            void *                 p_clk_src)
{
    480c:	b580      	push	{r7, lr}
    480e:	b084      	sub	sp, #16
    4810:	af00      	add	r7, sp, #0
    4812:	60f8      	str	r0, [r7, #12]
    4814:	460b      	mov	r3, r1
    4816:	607a      	str	r2, [r7, #4]
    4818:	72fb      	strb	r3, [r7, #11]
    switch (domain)
    481a:	7afb      	ldrb	r3, [r7, #11]
    481c:	2b00      	cmp	r3, #0
    481e:	d002      	beq.n	4826 <nrf_clock_is_running+0x1a>
    4820:	2b01      	cmp	r3, #1
    4822:	d015      	beq.n	4850 <nrf_clock_is_running+0x44>
    4824:	e029      	b.n	487a <nrf_clock_is_running+0x6e>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
            if (p_clk_src != NULL)
    4826:	687b      	ldr	r3, [r7, #4]
    4828:	2b00      	cmp	r3, #0
    482a:	d008      	beq.n	483e <nrf_clock_is_running+0x32>
            {
                (*(nrf_clock_lfclk_t *)p_clk_src) =
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    482c:	68fb      	ldr	r3, [r7, #12]
    482e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    4832:	b2db      	uxtb	r3, r3
    4834:	f003 0303 	and.w	r3, r3, #3
    4838:	b2da      	uxtb	r2, r3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    483a:	687b      	ldr	r3, [r7, #4]
    483c:	701a      	strb	r2, [r3, #0]
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    483e:	68fb      	ldr	r3, [r7, #12]
    4840:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    4844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    4848:	2b00      	cmp	r3, #0
    484a:	d024      	beq.n	4896 <nrf_clock_is_running+0x8a>
                >> CLOCK_LFCLKSTAT_STATE_Pos)
            {
                return true;
    484c:	2301      	movs	r3, #1
    484e:	e026      	b.n	489e <nrf_clock_is_running+0x92>
            }
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
    4850:	687b      	ldr	r3, [r7, #4]
    4852:	2b00      	cmp	r3, #0
    4854:	d008      	beq.n	4868 <nrf_clock_is_running+0x5c>
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4856:	68fb      	ldr	r3, [r7, #12]
    4858:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    485c:	b2db      	uxtb	r3, r3
    485e:	f003 0301 	and.w	r3, r3, #1
    4862:	b2da      	uxtb	r2, r3
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4864:	687b      	ldr	r3, [r7, #4]
    4866:	701a      	strb	r2, [r3, #0]
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4868:	68fb      	ldr	r3, [r7, #12]
    486a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    486e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    4872:	2b00      	cmp	r3, #0
    4874:	d011      	beq.n	489a <nrf_clock_is_running+0x8e>
                >> CLOCK_HFCLKSTAT_STATE_Pos)
            {
                return true;
    4876:	2301      	movs	r3, #1
    4878:	e011      	b.n	489e <nrf_clock_is_running+0x92>
        case NRF_CLOCK_DOMAIN_HFCLKAUDIO:
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
                   CLOCK_HFCLKAUDIOSTAT_STATE_Msk;
#endif
        default:
            NRFX_ASSERT(0);
    487a:	f44f 734f 	mov.w	r3, #828	; 0x33c
    487e:	4a0a      	ldr	r2, [pc, #40]	; (48a8 <nrf_clock_is_running+0x9c>)
    4880:	490a      	ldr	r1, [pc, #40]	; (48ac <nrf_clock_is_running+0xa0>)
    4882:	480b      	ldr	r0, [pc, #44]	; (48b0 <nrf_clock_is_running+0xa4>)
    4884:	f00b f9f6 	bl	fc74 <printk>
    4888:	f44f 714f 	mov.w	r1, #828	; 0x33c
    488c:	4806      	ldr	r0, [pc, #24]	; (48a8 <nrf_clock_is_running+0x9c>)
    488e:	f00b fe4d 	bl	1052c <assert_post_action>
            return false;
    4892:	2300      	movs	r3, #0
    4894:	e003      	b.n	489e <nrf_clock_is_running+0x92>
            break;
    4896:	bf00      	nop
    4898:	e000      	b.n	489c <nrf_clock_is_running+0x90>
            break;
    489a:	bf00      	nop
    }
    return false;
    489c:	2300      	movs	r3, #0
}
    489e:	4618      	mov	r0, r3
    48a0:	3710      	adds	r7, #16
    48a2:	46bd      	mov	sp, r7
    48a4:	bd80      	pop	{r7, pc}
    48a6:	bf00      	nop
    48a8:	00017d10 	.word	0x00017d10
    48ac:	00017d44 	.word	0x00017d44
    48b0:	00017cf0 	.word	0x00017cf0

000048b4 <log_const_source_id>:
{
    48b4:	b480      	push	{r7}
    48b6:	b083      	sub	sp, #12
    48b8:	af00      	add	r7, sp, #0
    48ba:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    48bc:	687b      	ldr	r3, [r7, #4]
    48be:	4a04      	ldr	r2, [pc, #16]	; (48d0 <log_const_source_id+0x1c>)
    48c0:	1a9b      	subs	r3, r3, r2
    48c2:	08db      	lsrs	r3, r3, #3
}
    48c4:	4618      	mov	r0, r3
    48c6:	370c      	adds	r7, #12
    48c8:	46bd      	mov	sp, r7
    48ca:	bc80      	pop	{r7}
    48cc:	4770      	bx	lr
    48ce:	bf00      	nop
    48d0:	000170bc 	.word	0x000170bc

000048d4 <get_status>:
				(enum clock_control_nrf_type)sys);
}

static enum clock_control_status get_status(const struct device *dev,
					    clock_control_subsys_t subsys)
{
    48d4:	b580      	push	{r7, lr}
    48d6:	b084      	sub	sp, #16
    48d8:	af00      	add	r7, sp, #0
    48da:	6078      	str	r0, [r7, #4]
    48dc:	6039      	str	r1, [r7, #0]
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    48de:	683b      	ldr	r3, [r7, #0]
    48e0:	73fb      	strb	r3, [r7, #15]

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    48e2:	7bfb      	ldrb	r3, [r7, #15]
    48e4:	2b01      	cmp	r3, #1
    48e6:	d909      	bls.n	48fc <get_status+0x28>
    48e8:	237e      	movs	r3, #126	; 0x7e
    48ea:	4a0c      	ldr	r2, [pc, #48]	; (491c <get_status+0x48>)
    48ec:	490c      	ldr	r1, [pc, #48]	; (4920 <get_status+0x4c>)
    48ee:	480d      	ldr	r0, [pc, #52]	; (4924 <get_status+0x50>)
    48f0:	f00b f9c0 	bl	fc74 <printk>
    48f4:	217e      	movs	r1, #126	; 0x7e
    48f6:	4809      	ldr	r0, [pc, #36]	; (491c <get_status+0x48>)
    48f8:	f00b fe18 	bl	1052c <assert_post_action>

	return GET_STATUS(get_sub_data(dev, type)->flags);
    48fc:	7bfb      	ldrb	r3, [r7, #15]
    48fe:	4619      	mov	r1, r3
    4900:	6878      	ldr	r0, [r7, #4]
    4902:	f00d fc12 	bl	1212a <get_sub_data>
    4906:	4603      	mov	r3, r0
    4908:	689b      	ldr	r3, [r3, #8]
    490a:	b2db      	uxtb	r3, r3
    490c:	f003 0307 	and.w	r3, r3, #7
    4910:	b2db      	uxtb	r3, r3
}
    4912:	4618      	mov	r0, r3
    4914:	3710      	adds	r7, #16
    4916:	46bd      	mov	sp, r7
    4918:	bd80      	pop	{r7, pc}
    491a:	bf00      	nop
    491c:	00017d58 	.word	0x00017d58
    4920:	00017d98 	.word	0x00017d98
    4924:	00017cf0 	.word	0x00017cf0

00004928 <clkstarted_handle>:
	irq_unlock(key);
}

static void clkstarted_handle(const struct device *dev,
			      enum clock_control_nrf_type type)
{
    4928:	b590      	push	{r4, r7, lr}
    492a:	b089      	sub	sp, #36	; 0x24
    492c:	af00      	add	r7, sp, #0
    492e:	6078      	str	r0, [r7, #4]
    4930:	460b      	mov	r3, r1
    4932:	70fb      	strb	r3, [r7, #3]
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    4934:	78fb      	ldrb	r3, [r7, #3]
    4936:	4619      	mov	r1, r3
    4938:	6878      	ldr	r0, [r7, #4]
    493a:	f00d fbf6 	bl	1212a <get_sub_data>
    493e:	61f8      	str	r0, [r7, #28]
	clock_control_cb_t callback = sub_data->cb;
    4940:	69fb      	ldr	r3, [r7, #28]
    4942:	681b      	ldr	r3, [r3, #0]
    4944:	61bb      	str	r3, [r7, #24]
	void *user_data = sub_data->user_data;
    4946:	69fb      	ldr	r3, [r7, #28]
    4948:	685b      	ldr	r3, [r3, #4]
    494a:	617b      	str	r3, [r7, #20]

	sub_data->cb = NULL;
    494c:	69fb      	ldr	r3, [r7, #28]
    494e:	2200      	movs	r2, #0
    4950:	601a      	str	r2, [r3, #0]
	set_on_state(&sub_data->flags);
    4952:	69fb      	ldr	r3, [r7, #28]
    4954:	3308      	adds	r3, #8
    4956:	4618      	mov	r0, r3
    4958:	f00d fc93 	bl	12282 <set_on_state>
	DBG(dev, type, "Clock started");
    495c:	2303      	movs	r3, #3
    495e:	2b03      	cmp	r3, #3
    4960:	d942      	bls.n	49e8 <clkstarted_handle+0xc0>
    4962:	f00d f9ba 	bl	11cda <k_is_user_context>
    4966:	4603      	mov	r3, r0
    4968:	74fb      	strb	r3, [r7, #19]
    496a:	2300      	movs	r3, #0
    496c:	60fb      	str	r3, [r7, #12]
    496e:	2303      	movs	r3, #3
    4970:	2b00      	cmp	r3, #0
    4972:	d007      	beq.n	4984 <clkstarted_handle+0x5c>
    4974:	4b23      	ldr	r3, [pc, #140]	; (4a04 <clkstarted_handle+0xdc>)
    4976:	681b      	ldr	r3, [r3, #0]
    4978:	4618      	mov	r0, r3
    497a:	f7ff ff9b 	bl	48b4 <log_const_source_id>
    497e:	4603      	mov	r3, r0
    4980:	b29b      	uxth	r3, r3
    4982:	e000      	b.n	4986 <clkstarted_handle+0x5e>
    4984:	2300      	movs	r3, #0
    4986:	823b      	strh	r3, [r7, #16]
    4988:	7a3b      	ldrb	r3, [r7, #8]
    498a:	2204      	movs	r2, #4
    498c:	f362 0302 	bfi	r3, r2, #0, #3
    4990:	723b      	strb	r3, [r7, #8]
    4992:	7a3b      	ldrb	r3, [r7, #8]
    4994:	f36f 03c5 	bfc	r3, #3, #3
    4998:	723b      	strb	r3, [r7, #8]
    499a:	8a3b      	ldrh	r3, [r7, #16]
    499c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    49a0:	b29a      	uxth	r2, r3
    49a2:	893b      	ldrh	r3, [r7, #8]
    49a4:	f362 138f 	bfi	r3, r2, #6, #10
    49a8:	813b      	strh	r3, [r7, #8]
    49aa:	7cfb      	ldrb	r3, [r7, #19]
    49ac:	2b00      	cmp	r3, #0
    49ae:	d00c      	beq.n	49ca <clkstarted_handle+0xa2>
    49b0:	78fb      	ldrb	r3, [r7, #3]
    49b2:	4619      	mov	r1, r3
    49b4:	6878      	ldr	r0, [r7, #4]
    49b6:	f00d fbce 	bl	12156 <get_sub_config>
    49ba:	4603      	mov	r3, r0
    49bc:	689b      	ldr	r3, [r3, #8]
    49be:	4a12      	ldr	r2, [pc, #72]	; (4a08 <clkstarted_handle+0xe0>)
    49c0:	4912      	ldr	r1, [pc, #72]	; (4a0c <clkstarted_handle+0xe4>)
    49c2:	8938      	ldrh	r0, [r7, #8]
    49c4:	f7fe f95a 	bl	2c7c <log_from_user>
    49c8:	e00f      	b.n	49ea <clkstarted_handle+0xc2>
    49ca:	4c0f      	ldr	r4, [pc, #60]	; (4a08 <clkstarted_handle+0xe0>)
    49cc:	78fb      	ldrb	r3, [r7, #3]
    49ce:	4619      	mov	r1, r3
    49d0:	6878      	ldr	r0, [r7, #4]
    49d2:	f00d fbc0 	bl	12156 <get_sub_config>
    49d6:	4603      	mov	r3, r0
    49d8:	689b      	ldr	r3, [r3, #8]
    49da:	461a      	mov	r2, r3
    49dc:	893b      	ldrh	r3, [r7, #8]
    49de:	4621      	mov	r1, r4
    49e0:	480a      	ldr	r0, [pc, #40]	; (4a0c <clkstarted_handle+0xe4>)
    49e2:	f00c fa70 	bl	10ec6 <log_2>
    49e6:	e000      	b.n	49ea <clkstarted_handle+0xc2>
    49e8:	bf00      	nop

	if (callback) {
    49ea:	69bb      	ldr	r3, [r7, #24]
    49ec:	2b00      	cmp	r3, #0
    49ee:	d005      	beq.n	49fc <clkstarted_handle+0xd4>
		callback(dev, (clock_control_subsys_t)type, user_data);
    49f0:	78fb      	ldrb	r3, [r7, #3]
    49f2:	4619      	mov	r1, r3
    49f4:	69bb      	ldr	r3, [r7, #24]
    49f6:	697a      	ldr	r2, [r7, #20]
    49f8:	6878      	ldr	r0, [r7, #4]
    49fa:	4798      	blx	r3
	}
}
    49fc:	bf00      	nop
    49fe:	3724      	adds	r7, #36	; 0x24
    4a00:	46bd      	mov	sp, r7
    4a02:	bd90      	pop	{r4, r7, pc}
    4a04:	200000e8 	.word	0x200000e8
    4a08:	0001ab70 	.word	0x0001ab70
    4a0c:	00017dbc 	.word	0x00017dbc

00004a10 <get_hf_flags>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
}
#endif

static uint32_t *get_hf_flags(void)
{
    4a10:	b480      	push	{r7}
    4a12:	b083      	sub	sp, #12
    4a14:	af00      	add	r7, sp, #0
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
    4a16:	4b04      	ldr	r3, [pc, #16]	; (4a28 <get_hf_flags+0x18>)
    4a18:	607b      	str	r3, [r7, #4]

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
    4a1a:	687b      	ldr	r3, [r7, #4]
    4a1c:	3348      	adds	r3, #72	; 0x48
}
    4a1e:	4618      	mov	r0, r3
    4a20:	370c      	adds	r7, #12
    4a22:	46bd      	mov	sp, r7
    4a24:	bc80      	pop	{r7}
    4a26:	4770      	bx	lr
    4a28:	2000059c 	.word	0x2000059c

00004a2c <generic_hfclk_start>:

static void generic_hfclk_start(void)
{
    4a2c:	b580      	push	{r7, lr}
    4a2e:	b086      	sub	sp, #24
    4a30:	af00      	add	r7, sp, #0
	nrf_clock_hfclk_t type;
	bool already_started = false;
    4a32:	2300      	movs	r3, #0
    4a34:	75fb      	strb	r3, [r7, #23]
	__asm__ volatile(
    4a36:	f04f 0320 	mov.w	r3, #32
    4a3a:	f3ef 8211 	mrs	r2, BASEPRI
    4a3e:	f383 8811 	msr	BASEPRI, r3
    4a42:	f3bf 8f6f 	isb	sy
    4a46:	60fa      	str	r2, [r7, #12]
    4a48:	60bb      	str	r3, [r7, #8]
	return key;
    4a4a:	68fb      	ldr	r3, [r7, #12]
	int key = irq_lock();
    4a4c:	613b      	str	r3, [r7, #16]

	hfclk_users |= HF_USER_GENERIC;
    4a4e:	4b19      	ldr	r3, [pc, #100]	; (4ab4 <generic_hfclk_start+0x88>)
    4a50:	681b      	ldr	r3, [r3, #0]
    4a52:	f043 0302 	orr.w	r3, r3, #2
    4a56:	461a      	mov	r2, r3
    4a58:	4b16      	ldr	r3, [pc, #88]	; (4ab4 <generic_hfclk_start+0x88>)
    4a5a:	601a      	str	r2, [r3, #0]
	if (hfclk_users & HF_USER_BT) {
    4a5c:	4b15      	ldr	r3, [pc, #84]	; (4ab4 <generic_hfclk_start+0x88>)
    4a5e:	681b      	ldr	r3, [r3, #0]
    4a60:	f003 0301 	and.w	r3, r3, #1
    4a64:	2b00      	cmp	r3, #0
    4a66:	d00f      	beq.n	4a88 <generic_hfclk_start+0x5c>
		(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &type);
    4a68:	1cfb      	adds	r3, r7, #3
    4a6a:	4619      	mov	r1, r3
    4a6c:	2001      	movs	r0, #1
    4a6e:	f00d fb4a 	bl	12106 <nrfx_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4a72:	78fb      	ldrb	r3, [r7, #3]
    4a74:	2b01      	cmp	r3, #1
    4a76:	d107      	bne.n	4a88 <generic_hfclk_start+0x5c>
			already_started = true;
    4a78:	2301      	movs	r3, #1
    4a7a:	75fb      	strb	r3, [r7, #23]
			/* Set on state in case clock interrupt comes and we
			 * want to avoid handling that.
			 */
			set_on_state(get_hf_flags());
    4a7c:	f7ff ffc8 	bl	4a10 <get_hf_flags>
    4a80:	4603      	mov	r3, r0
    4a82:	4618      	mov	r0, r3
    4a84:	f00d fbfd 	bl	12282 <set_on_state>
		}
	}

	irq_unlock(key);
    4a88:	693b      	ldr	r3, [r7, #16]
    4a8a:	607b      	str	r3, [r7, #4]
	__asm__ volatile(
    4a8c:	687b      	ldr	r3, [r7, #4]
    4a8e:	f383 8811 	msr	BASEPRI, r3
    4a92:	f3bf 8f6f 	isb	sy
}
    4a96:	bf00      	nop

	if (already_started) {
    4a98:	7dfb      	ldrb	r3, [r7, #23]
    4a9a:	2b00      	cmp	r3, #0
    4a9c:	d004      	beq.n	4aa8 <generic_hfclk_start+0x7c>
		/* Clock already started by z_nrf_clock_bt_ctlr_hf_request */
		clkstarted_handle(CLOCK_DEVICE,
    4a9e:	2100      	movs	r1, #0
    4aa0:	4805      	ldr	r0, [pc, #20]	; (4ab8 <generic_hfclk_start+0x8c>)
    4aa2:	f7ff ff41 	bl	4928 <clkstarted_handle>
    4aa6:	e001      	b.n	4aac <generic_hfclk_start+0x80>
				  CLOCK_CONTROL_NRF_TYPE_HFCLK);
		return;
	}

	hfclk_start();
    4aa8:	f00d fc1c 	bl	122e4 <hfclk_start>
}
    4aac:	3718      	adds	r7, #24
    4aae:	46bd      	mov	sp, r7
    4ab0:	bd80      	pop	{r7, pc}
    4ab2:	bf00      	nop
    4ab4:	20000598 	.word	0x20000598
    4ab8:	00016e3c 	.word	0x00016e3c

00004abc <generic_hfclk_stop>:

static void generic_hfclk_stop(void)
{
    4abc:	b580      	push	{r7, lr}
    4abe:	af00      	add	r7, sp, #0
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4ac0:	f06f 0102 	mvn.w	r1, #2
    4ac4:	4806      	ldr	r0, [pc, #24]	; (4ae0 <generic_hfclk_stop+0x24>)
    4ac6:	f00d f8e7 	bl	11c98 <atomic_and>
    4aca:	4603      	mov	r3, r0
    4acc:	f003 0301 	and.w	r3, r3, #1
    4ad0:	2b00      	cmp	r3, #0
    4ad2:	d102      	bne.n	4ada <generic_hfclk_stop+0x1e>
		/* bt still requesting the clock. */
		return;
	}

	hfclk_stop();
    4ad4:	f00d fc0c 	bl	122f0 <hfclk_stop>
    4ad8:	e000      	b.n	4adc <generic_hfclk_stop+0x20>
		return;
    4ada:	bf00      	nop
}
    4adc:	bd80      	pop	{r7, pc}
    4ade:	bf00      	nop
    4ae0:	20000598 	.word	0x20000598

00004ae4 <stop>:
	hfclk_stop();
}

static int stop(const struct device *dev, clock_control_subsys_t subsys,
		uint32_t ctx)
{
    4ae4:	b580      	push	{r7, lr}
    4ae6:	b088      	sub	sp, #32
    4ae8:	af00      	add	r7, sp, #0
    4aea:	60f8      	str	r0, [r7, #12]
    4aec:	60b9      	str	r1, [r7, #8]
    4aee:	607a      	str	r2, [r7, #4]
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    4af0:	68bb      	ldr	r3, [r7, #8]
    4af2:	77fb      	strb	r3, [r7, #31]
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    4af4:	7ffb      	ldrb	r3, [r7, #31]
    4af6:	4619      	mov	r1, r3
    4af8:	68f8      	ldr	r0, [r7, #12]
    4afa:	f00d fb16 	bl	1212a <get_sub_data>
    4afe:	61b8      	str	r0, [r7, #24]
	int err;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4b00:	7ffb      	ldrb	r3, [r7, #31]
    4b02:	2b01      	cmp	r3, #1
    4b04:	d90b      	bls.n	4b1e <stop+0x3a>
    4b06:	f240 1353 	movw	r3, #339	; 0x153
    4b0a:	4a11      	ldr	r2, [pc, #68]	; (4b50 <stop+0x6c>)
    4b0c:	4911      	ldr	r1, [pc, #68]	; (4b54 <stop+0x70>)
    4b0e:	4812      	ldr	r0, [pc, #72]	; (4b58 <stop+0x74>)
    4b10:	f00b f8b0 	bl	fc74 <printk>
    4b14:	f240 1153 	movw	r1, #339	; 0x153
    4b18:	480d      	ldr	r0, [pc, #52]	; (4b50 <stop+0x6c>)
    4b1a:	f00b fd07 	bl	1052c <assert_post_action>

	err = set_off_state(&subdata->flags, ctx);
    4b1e:	69bb      	ldr	r3, [r7, #24]
    4b20:	3308      	adds	r3, #8
    4b22:	6879      	ldr	r1, [r7, #4]
    4b24:	4618      	mov	r0, r3
    4b26:	f00d fb3d 	bl	121a4 <set_off_state>
    4b2a:	6178      	str	r0, [r7, #20]
	if (err < 0) {
    4b2c:	697b      	ldr	r3, [r7, #20]
    4b2e:	2b00      	cmp	r3, #0
    4b30:	da01      	bge.n	4b36 <stop+0x52>
		return err;
    4b32:	697b      	ldr	r3, [r7, #20]
    4b34:	e008      	b.n	4b48 <stop+0x64>
	}

	get_sub_config(dev, type)->stop();
    4b36:	7ffb      	ldrb	r3, [r7, #31]
    4b38:	4619      	mov	r1, r3
    4b3a:	68f8      	ldr	r0, [r7, #12]
    4b3c:	f00d fb0b 	bl	12156 <get_sub_config>
    4b40:	4603      	mov	r3, r0
    4b42:	685b      	ldr	r3, [r3, #4]
    4b44:	4798      	blx	r3

	return 0;
    4b46:	2300      	movs	r3, #0
}
    4b48:	4618      	mov	r0, r3
    4b4a:	3720      	adds	r7, #32
    4b4c:	46bd      	mov	sp, r7
    4b4e:	bd80      	pop	{r7, pc}
    4b50:	00017d58 	.word	0x00017d58
    4b54:	00017d98 	.word	0x00017d98
    4b58:	00017cf0 	.word	0x00017cf0

00004b5c <api_blocking_start>:
	k_sem_give(sem);
}

static int api_blocking_start(const struct device *dev,
			      clock_control_subsys_t subsys)
{
    4b5c:	b590      	push	{r4, r7, lr}
    4b5e:	b089      	sub	sp, #36	; 0x24
    4b60:	af00      	add	r7, sp, #0
    4b62:	6078      	str	r0, [r7, #4]
    4b64:	6039      	str	r1, [r7, #0]
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4b66:	f107 030c 	add.w	r3, r7, #12
    4b6a:	60fb      	str	r3, [r7, #12]
    4b6c:	f107 030c 	add.w	r3, r7, #12
    4b70:	613b      	str	r3, [r7, #16]
    4b72:	2300      	movs	r3, #0
    4b74:	617b      	str	r3, [r7, #20]
    4b76:	2301      	movs	r3, #1
    4b78:	61bb      	str	r3, [r7, #24]

	if (!IS_ENABLED(CONFIG_MULTITHREADING)) {
		return -ENOTSUP;
	}

	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4b7a:	f107 030c 	add.w	r3, r7, #12
    4b7e:	4a10      	ldr	r2, [pc, #64]	; (4bc0 <api_blocking_start+0x64>)
    4b80:	6839      	ldr	r1, [r7, #0]
    4b82:	6878      	ldr	r0, [r7, #4]
    4b84:	f00d fbf7 	bl	12376 <api_start>
    4b88:	61f8      	str	r0, [r7, #28]
	if (err < 0) {
    4b8a:	69fb      	ldr	r3, [r7, #28]
    4b8c:	2b00      	cmp	r3, #0
    4b8e:	da01      	bge.n	4b94 <api_blocking_start+0x38>
		return err;
    4b90:	69fb      	ldr	r3, [r7, #28]
    4b92:	e011      	b.n	4bb8 <api_blocking_start+0x5c>
	}

	return k_sem_take(&sem, K_MSEC(500));
    4b94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    4b98:	f04f 0100 	mov.w	r1, #0
    4b9c:	f00d f8a4 	bl	11ce8 <k_ms_to_ticks_ceil64>
    4ba0:	4602      	mov	r2, r0
    4ba2:	460b      	mov	r3, r1
    4ba4:	4610      	mov	r0, r2
    4ba6:	4619      	mov	r1, r3
    4ba8:	f107 040c 	add.w	r4, r7, #12
    4bac:	4602      	mov	r2, r0
    4bae:	460b      	mov	r3, r1
    4bb0:	4620      	mov	r0, r4
    4bb2:	f00d f9f0 	bl	11f96 <k_sem_take>
    4bb6:	4603      	mov	r3, r0
}
    4bb8:	4618      	mov	r0, r3
    4bba:	3724      	adds	r7, #36	; 0x24
    4bbc:	46bd      	mov	sp, r7
    4bbe:	bd90      	pop	{r4, r7, pc}
    4bc0:	0001239f 	.word	0x0001239f

00004bc4 <get_subsys>:

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
    4bc4:	b480      	push	{r7}
    4bc6:	b085      	sub	sp, #20
    4bc8:	af00      	add	r7, sp, #0
    4bca:	6078      	str	r0, [r7, #4]
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
    4bcc:	4b06      	ldr	r3, [pc, #24]	; (4be8 <get_subsys+0x24>)
    4bce:	60fb      	str	r3, [r7, #12]
	size_t offset = (size_t)(mgr - data->mgr);
    4bd0:	68fb      	ldr	r3, [r7, #12]
    4bd2:	687a      	ldr	r2, [r7, #4]
    4bd4:	1ad3      	subs	r3, r2, r3
    4bd6:	115b      	asrs	r3, r3, #5
    4bd8:	60bb      	str	r3, [r7, #8]

	return (clock_control_subsys_t)offset;
    4bda:	68bb      	ldr	r3, [r7, #8]
}
    4bdc:	4618      	mov	r0, r3
    4bde:	3714      	adds	r7, #20
    4be0:	46bd      	mov	sp, r7
    4be2:	bc80      	pop	{r7}
    4be4:	4770      	bx	lr
    4be6:	bf00      	nop
    4be8:	2000059c 	.word	0x2000059c

00004bec <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4bec:	b580      	push	{r7, lr}
    4bee:	b084      	sub	sp, #16
    4bf0:	af00      	add	r7, sp, #0
    4bf2:	6078      	str	r0, [r7, #4]
    4bf4:	6039      	str	r1, [r7, #0]
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4bf6:	6878      	ldr	r0, [r7, #4]
    4bf8:	f7ff ffe4 	bl	4bc4 <get_subsys>
    4bfc:	4603      	mov	r3, r0
    4bfe:	2240      	movs	r2, #64	; 0x40
    4c00:	4619      	mov	r1, r3
    4c02:	4806      	ldr	r0, [pc, #24]	; (4c1c <onoff_stop+0x30>)
    4c04:	f7ff ff6e 	bl	4ae4 <stop>
    4c08:	60f8      	str	r0, [r7, #12]
	notify(mgr, res);
    4c0a:	683b      	ldr	r3, [r7, #0]
    4c0c:	68f9      	ldr	r1, [r7, #12]
    4c0e:	6878      	ldr	r0, [r7, #4]
    4c10:	4798      	blx	r3
}
    4c12:	bf00      	nop
    4c14:	3710      	adds	r7, #16
    4c16:	46bd      	mov	sp, r7
    4c18:	bd80      	pop	{r7, pc}
    4c1a:	bf00      	nop
    4c1c:	00016e3c 	.word	0x00016e3c

00004c20 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4c20:	b580      	push	{r7, lr}
    4c22:	b086      	sub	sp, #24
    4c24:	af02      	add	r7, sp, #8
    4c26:	6078      	str	r0, [r7, #4]
    4c28:	6039      	str	r1, [r7, #0]
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4c2a:	6878      	ldr	r0, [r7, #4]
    4c2c:	f7ff ffca 	bl	4bc4 <get_subsys>
    4c30:	4601      	mov	r1, r0
    4c32:	2340      	movs	r3, #64	; 0x40
    4c34:	9300      	str	r3, [sp, #0]
    4c36:	683b      	ldr	r3, [r7, #0]
    4c38:	4a07      	ldr	r2, [pc, #28]	; (4c58 <onoff_start+0x38>)
    4c3a:	4808      	ldr	r0, [pc, #32]	; (4c5c <onoff_start+0x3c>)
    4c3c:	f00d fb6d 	bl	1231a <async_start>
    4c40:	60f8      	str	r0, [r7, #12]
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4c42:	68fb      	ldr	r3, [r7, #12]
    4c44:	2b00      	cmp	r3, #0
    4c46:	da03      	bge.n	4c50 <onoff_start+0x30>
		notify(mgr, err);
    4c48:	683b      	ldr	r3, [r7, #0]
    4c4a:	68f9      	ldr	r1, [r7, #12]
    4c4c:	6878      	ldr	r0, [r7, #4]
    4c4e:	4798      	blx	r3
	}
}
    4c50:	bf00      	nop
    4c52:	3710      	adds	r7, #16
    4c54:	46bd      	mov	sp, r7
    4c56:	bd80      	pop	{r7, pc}
    4c58:	000123bd 	.word	0x000123bd
    4c5c:	00016e3c 	.word	0x00016e3c

00004c60 <lfclk_spinwait>:
 * This approach is implemented in nrfx_clock driver and utilized here.
 *
 * @param mode Start mode.
 */
static void lfclk_spinwait(enum nrf_lfclk_start_mode mode)
{
    4c60:	b580      	push	{r7, lr}
    4c62:	b088      	sub	sp, #32
    4c64:	af00      	add	r7, sp, #0
    4c66:	4603      	mov	r3, r0
    4c68:	71fb      	strb	r3, [r7, #7]
		 IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_EXT_FULL_SWING))
		? NRF_CLOCK_LFCLK_Xtal
		: CLOCK_CONTROL_NRF_K32SRC;
	nrf_clock_lfclk_t type;

	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4c6a:	79fb      	ldrb	r3, [r7, #7]
    4c6c:	2b01      	cmp	r3, #1
    4c6e:	d10b      	bne.n	4c88 <lfclk_spinwait+0x28>
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4c70:	4b4b      	ldr	r3, [pc, #300]	; (4da0 <lfclk_spinwait+0x140>)
    4c72:	781b      	ldrb	r3, [r3, #0]
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4c74:	2b02      	cmp	r3, #2
    4c76:	d107      	bne.n	4c88 <lfclk_spinwait+0x28>
	    (nrf_clock_lf_srccopy_get(NRF_CLOCK) == CLOCK_CONTROL_NRF_K32SRC)) {
    4c78:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    4c7c:	f00d fa17 	bl	120ae <nrf_clock_lf_srccopy_get>
    4c80:	4603      	mov	r3, r0
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4c82:	2b02      	cmp	r3, #2
    4c84:	f000 8088 	beq.w	4d98 <lfclk_spinwait+0x138>
		 * started.
		 */
		return;
	}

	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4c88:	f010 ffaf 	bl	15bea <k_is_in_isr>
    4c8c:	4603      	mov	r3, r0
    4c8e:	2b00      	cmp	r3, #0
    4c90:	d104      	bne.n	4c9c <lfclk_spinwait+0x3c>
    4c92:	f7ff fd7f 	bl	4794 <k_is_pre_kernel>
    4c96:	4603      	mov	r3, r0
    4c98:	2b00      	cmp	r3, #0
    4c9a:	d001      	beq.n	4ca0 <lfclk_spinwait+0x40>
    4c9c:	2301      	movs	r3, #1
    4c9e:	e000      	b.n	4ca2 <lfclk_spinwait+0x42>
    4ca0:	2300      	movs	r3, #0
    4ca2:	77fb      	strb	r3, [r7, #31]
    4ca4:	7ffb      	ldrb	r3, [r7, #31]
    4ca6:	f003 0301 	and.w	r3, r3, #1
    4caa:	77fb      	strb	r3, [r7, #31]
	int key = isr_mode ? irq_lock() : 0;
    4cac:	7ffb      	ldrb	r3, [r7, #31]
    4cae:	2b00      	cmp	r3, #0
    4cb0:	d00b      	beq.n	4cca <lfclk_spinwait+0x6a>
	__asm__ volatile(
    4cb2:	f04f 0320 	mov.w	r3, #32
    4cb6:	f3ef 8211 	mrs	r2, BASEPRI
    4cba:	f383 8811 	msr	BASEPRI, r3
    4cbe:	f3bf 8f6f 	isb	sy
    4cc2:	617a      	str	r2, [r7, #20]
    4cc4:	613b      	str	r3, [r7, #16]
	return key;
    4cc6:	697b      	ldr	r3, [r7, #20]
    4cc8:	e000      	b.n	4ccc <lfclk_spinwait+0x6c>
    4cca:	2300      	movs	r3, #0
    4ccc:	61bb      	str	r3, [r7, #24]

	if (!isr_mode) {
    4cce:	7ffb      	ldrb	r3, [r7, #31]
    4cd0:	f083 0301 	eor.w	r3, r3, #1
    4cd4:	b2db      	uxtb	r3, r3
    4cd6:	2b00      	cmp	r3, #0
    4cd8:	d037      	beq.n	4d4a <lfclk_spinwait+0xea>
		nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
    4cda:	2102      	movs	r1, #2
    4cdc:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    4ce0:	f00d f982 	bl	11fe8 <nrf_clock_int_disable>
	}

	while (!(nrfx_clock_is_running(d, (void *)&type)
    4ce4:	e031      	b.n	4d4a <lfclk_spinwait+0xea>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
		/* Synth source start is almost instant and LFCLKSTARTED may
		 * happen before calling idle. That would lead to deadlock.
		 */
		if (!IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_SYNTH)) {
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4ce6:	7ffb      	ldrb	r3, [r7, #31]
    4ce8:	2b00      	cmp	r3, #0
    4cea:	d004      	beq.n	4cf6 <lfclk_spinwait+0x96>
				k_cpu_atomic_idle(key);
    4cec:	69bb      	ldr	r3, [r7, #24]
    4cee:	4618      	mov	r0, r3
    4cf0:	f00d f938 	bl	11f64 <k_cpu_atomic_idle>
    4cf4:	e002      	b.n	4cfc <lfclk_spinwait+0x9c>
			} else {
				k_msleep(1);
    4cf6:	2001      	movs	r0, #1
    4cf8:	f00d f91a 	bl	11f30 <k_msleep>
			}
		}

		/* Clock interrupt is locked, LFCLKSTARTED is handled here. */
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4cfc:	4b28      	ldr	r3, [pc, #160]	; (4da0 <lfclk_spinwait+0x140>)
    4cfe:	781b      	ldrb	r3, [r3, #0]
    4d00:	2b02      	cmp	r3, #2
    4d02:	d122      	bne.n	4d4a <lfclk_spinwait+0xea>
		    && (nrf_clock_lf_src_get(NRF_CLOCK) == NRF_CLOCK_LFCLK_RC)
    4d04:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    4d08:	f00d f9c4 	bl	12094 <nrf_clock_lf_src_get>
    4d0c:	4603      	mov	r3, r0
    4d0e:	2b01      	cmp	r3, #1
    4d10:	d11b      	bne.n	4d4a <lfclk_spinwait+0xea>
		    && nrf_clock_event_check(NRF_CLOCK,
    4d12:	f44f 7182 	mov.w	r1, #260	; 0x104
    4d16:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    4d1a:	f00d f998 	bl	1204e <nrf_clock_event_check>
    4d1e:	4603      	mov	r3, r0
    4d20:	2b00      	cmp	r3, #0
    4d22:	d012      	beq.n	4d4a <lfclk_spinwait+0xea>
					     NRF_CLOCK_EVENT_LFCLKSTARTED)) {
			nrf_clock_event_clear(NRF_CLOCK,
    4d24:	f44f 7182 	mov.w	r1, #260	; 0x104
    4d28:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    4d2c:	f00d f97a 	bl	12024 <nrf_clock_event_clear>
					      NRF_CLOCK_EVENT_LFCLKSTARTED);
			nrf_clock_lf_src_set(NRF_CLOCK,
    4d30:	2102      	movs	r1, #2
    4d32:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    4d36:	f00d f99e 	bl	12076 <nrf_clock_lf_src_set>
					     CLOCK_CONTROL_NRF_K32SRC);

			/* Clear pending interrupt, otherwise new clock event
			 * would not wake up from idle.
			 */
			NVIC_ClearPendingIRQ(DT_INST_IRQN(0));
    4d3a:	2005      	movs	r0, #5
    4d3c:	f7ff fd0c 	bl	4758 <__NVIC_ClearPendingIRQ>
			nrf_clock_task_trigger(NRF_CLOCK,
    4d40:	2108      	movs	r1, #8
    4d42:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    4d46:	f00d f95d 	bl	12004 <nrf_clock_task_trigger>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4d4a:	4b16      	ldr	r3, [pc, #88]	; (4da4 <lfclk_spinwait+0x144>)
    4d4c:	781b      	ldrb	r3, [r3, #0]
    4d4e:	f107 020b 	add.w	r2, r7, #11
    4d52:	4611      	mov	r1, r2
    4d54:	4618      	mov	r0, r3
    4d56:	f00d f9d6 	bl	12106 <nrfx_clock_is_running>
    4d5a:	4603      	mov	r3, r0
    4d5c:	f083 0301 	eor.w	r3, r3, #1
    4d60:	b2db      	uxtb	r3, r3
    4d62:	2b00      	cmp	r3, #0
    4d64:	d1bf      	bne.n	4ce6 <lfclk_spinwait+0x86>
		 && ((type == target_type)
    4d66:	7afa      	ldrb	r2, [r7, #11]
    4d68:	4b0d      	ldr	r3, [pc, #52]	; (4da0 <lfclk_spinwait+0x140>)
    4d6a:	781b      	ldrb	r3, [r3, #0]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4d6c:	429a      	cmp	r2, r3
    4d6e:	d002      	beq.n	4d76 <lfclk_spinwait+0x116>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4d70:	79fb      	ldrb	r3, [r7, #7]
    4d72:	2b01      	cmp	r3, #1
    4d74:	d1b7      	bne.n	4ce6 <lfclk_spinwait+0x86>
					       NRF_CLOCK_TASK_LFCLKSTART);
		}
	}

	if (isr_mode) {
    4d76:	7ffb      	ldrb	r3, [r7, #31]
    4d78:	2b00      	cmp	r3, #0
    4d7a:	d007      	beq.n	4d8c <lfclk_spinwait+0x12c>
		irq_unlock(key);
    4d7c:	69bb      	ldr	r3, [r7, #24]
    4d7e:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
    4d80:	68fb      	ldr	r3, [r7, #12]
    4d82:	f383 8811 	msr	BASEPRI, r3
    4d86:	f3bf 8f6f 	isb	sy
}
    4d8a:	e006      	b.n	4d9a <lfclk_spinwait+0x13a>
	} else {
		nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
    4d8c:	2102      	movs	r1, #2
    4d8e:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    4d92:	f00d f91b 	bl	11fcc <nrf_clock_int_enable>
    4d96:	e000      	b.n	4d9a <lfclk_spinwait+0x13a>
		return;
    4d98:	bf00      	nop
	}
}
    4d9a:	3720      	adds	r7, #32
    4d9c:	46bd      	mov	sp, r7
    4d9e:	bd80      	pop	{r7, pc}
    4da0:	0001ae5c 	.word	0x0001ae5c
    4da4:	0001ae5d 	.word	0x0001ae5d

00004da8 <z_nrf_clock_control_lf_on>:

void z_nrf_clock_control_lf_on(enum nrf_lfclk_start_mode start_mode)
{
    4da8:	b580      	push	{r7, lr}
    4daa:	b084      	sub	sp, #16
    4dac:	af00      	add	r7, sp, #0
    4dae:	4603      	mov	r3, r0
    4db0:	71fb      	strb	r3, [r7, #7]
	static atomic_t on;
	static struct onoff_client cli;

	if (atomic_set(&on, 1) == 0) {
    4db2:	2101      	movs	r1, #1
    4db4:	481f      	ldr	r0, [pc, #124]	; (4e34 <z_nrf_clock_control_lf_on+0x8c>)
    4db6:	f00c ff5c 	bl	11c72 <atomic_set>
    4dba:	4603      	mov	r3, r0
    4dbc:	2b00      	cmp	r3, #0
    4dbe:	d11b      	bne.n	4df8 <z_nrf_clock_control_lf_on+0x50>
		int err;
		struct onoff_manager *mgr =
				get_onoff_manager(CLOCK_DEVICE,
    4dc0:	2101      	movs	r1, #1
    4dc2:	481d      	ldr	r0, [pc, #116]	; (4e38 <z_nrf_clock_control_lf_on+0x90>)
    4dc4:	f00d f9dc 	bl	12180 <get_onoff_manager>
    4dc8:	60f8      	str	r0, [r7, #12]
						  CLOCK_CONTROL_NRF_TYPE_LFCLK);

		sys_notify_init_spinwait(&cli.notify);
    4dca:	481c      	ldr	r0, [pc, #112]	; (4e3c <z_nrf_clock_control_lf_on+0x94>)
    4dcc:	f7ff fcf8 	bl	47c0 <sys_notify_init_spinwait>
		err = onoff_request(mgr, &cli);
    4dd0:	491b      	ldr	r1, [pc, #108]	; (4e40 <z_nrf_clock_control_lf_on+0x98>)
    4dd2:	68f8      	ldr	r0, [r7, #12]
    4dd4:	f7fc f8f8 	bl	fc8 <onoff_request>
    4dd8:	60b8      	str	r0, [r7, #8]
		__ASSERT_NO_MSG(err >= 0);
    4dda:	68bb      	ldr	r3, [r7, #8]
    4ddc:	2b00      	cmp	r3, #0
    4dde:	da0b      	bge.n	4df8 <z_nrf_clock_control_lf_on+0x50>
    4de0:	f240 2326 	movw	r3, #550	; 0x226
    4de4:	4a17      	ldr	r2, [pc, #92]	; (4e44 <z_nrf_clock_control_lf_on+0x9c>)
    4de6:	4918      	ldr	r1, [pc, #96]	; (4e48 <z_nrf_clock_control_lf_on+0xa0>)
    4de8:	4818      	ldr	r0, [pc, #96]	; (4e4c <z_nrf_clock_control_lf_on+0xa4>)
    4dea:	f00a ff43 	bl	fc74 <printk>
    4dee:	f240 2126 	movw	r1, #550	; 0x226
    4df2:	4814      	ldr	r0, [pc, #80]	; (4e44 <z_nrf_clock_control_lf_on+0x9c>)
    4df4:	f00b fb9a 	bl	1052c <assert_post_action>
	/* In case of simulated board leave immediately. */
	if (IS_ENABLED(CONFIG_SOC_SERIES_BSIM_NRFXX)) {
		return;
	}

	switch (start_mode) {
    4df8:	79fb      	ldrb	r3, [r7, #7]
    4dfa:	2b00      	cmp	r3, #0
    4dfc:	d016      	beq.n	4e2c <z_nrf_clock_control_lf_on+0x84>
    4dfe:	2b00      	cmp	r3, #0
    4e00:	db07      	blt.n	4e12 <z_nrf_clock_control_lf_on+0x6a>
    4e02:	3b01      	subs	r3, #1
    4e04:	2b01      	cmp	r3, #1
    4e06:	d804      	bhi.n	4e12 <z_nrf_clock_control_lf_on+0x6a>
	case CLOCK_CONTROL_NRF_LF_START_AVAILABLE:
	case CLOCK_CONTROL_NRF_LF_START_STABLE:
		lfclk_spinwait(start_mode);
    4e08:	79fb      	ldrb	r3, [r7, #7]
    4e0a:	4618      	mov	r0, r3
    4e0c:	f7ff ff28 	bl	4c60 <lfclk_spinwait>
		break;
    4e10:	e00d      	b.n	4e2e <z_nrf_clock_control_lf_on+0x86>

	case CLOCK_CONTROL_NRF_LF_START_NOWAIT:
		break;

	default:
		__ASSERT_NO_MSG(false);
    4e12:	f44f 730e 	mov.w	r3, #568	; 0x238
    4e16:	4a0b      	ldr	r2, [pc, #44]	; (4e44 <z_nrf_clock_control_lf_on+0x9c>)
    4e18:	490d      	ldr	r1, [pc, #52]	; (4e50 <z_nrf_clock_control_lf_on+0xa8>)
    4e1a:	480c      	ldr	r0, [pc, #48]	; (4e4c <z_nrf_clock_control_lf_on+0xa4>)
    4e1c:	f00a ff2a 	bl	fc74 <printk>
    4e20:	f44f 710e 	mov.w	r1, #568	; 0x238
    4e24:	4807      	ldr	r0, [pc, #28]	; (4e44 <z_nrf_clock_control_lf_on+0x9c>)
    4e26:	f00b fb81 	bl	1052c <assert_post_action>
    4e2a:	e000      	b.n	4e2e <z_nrf_clock_control_lf_on+0x86>
		break;
    4e2c:	bf00      	nop
	}
}
    4e2e:	3710      	adds	r7, #16
    4e30:	46bd      	mov	sp, r7
    4e32:	bd80      	pop	{r7, pc}
    4e34:	200005f8 	.word	0x200005f8
    4e38:	00016e3c 	.word	0x00016e3c
    4e3c:	20000600 	.word	0x20000600
    4e40:	200005fc 	.word	0x200005fc
    4e44:	00017d58 	.word	0x00017d58
    4e48:	00017dd4 	.word	0x00017dd4
    4e4c:	00017cf0 	.word	0x00017cf0
    4e50:	00017d44 	.word	0x00017d44

00004e54 <clock_event_handler>:

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    4e54:	b580      	push	{r7, lr}
    4e56:	b084      	sub	sp, #16
    4e58:	af00      	add	r7, sp, #0
    4e5a:	4603      	mov	r3, r0
    4e5c:	71fb      	strb	r3, [r7, #7]
	const struct device *dev = CLOCK_DEVICE;
    4e5e:	4b20      	ldr	r3, [pc, #128]	; (4ee0 <clock_event_handler+0x8c>)
    4e60:	60fb      	str	r3, [r7, #12]

	switch (event) {
    4e62:	79fb      	ldrb	r3, [r7, #7]
    4e64:	2b03      	cmp	r3, #3
    4e66:	d01b      	beq.n	4ea0 <clock_event_handler+0x4c>
    4e68:	2b03      	cmp	r3, #3
    4e6a:	dc26      	bgt.n	4eba <clock_event_handler+0x66>
    4e6c:	2b00      	cmp	r3, #0
    4e6e:	d002      	beq.n	4e76 <clock_event_handler+0x22>
    4e70:	2b01      	cmp	r3, #1
    4e72:	d010      	beq.n	4e96 <clock_event_handler+0x42>
    4e74:	e021      	b.n	4eba <clock_event_handler+0x66>
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    4e76:	2100      	movs	r1, #0
    4e78:	68f8      	ldr	r0, [r7, #12]
    4e7a:	f00d f956 	bl	1212a <get_sub_data>
    4e7e:	60b8      	str	r0, [r7, #8]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4e80:	68bb      	ldr	r3, [r7, #8]
    4e82:	689b      	ldr	r3, [r3, #8]
    4e84:	f003 0307 	and.w	r3, r3, #7
    4e88:	2b00      	cmp	r3, #0
    4e8a:	d123      	bne.n	4ed4 <clock_event_handler+0x80>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    4e8c:	2100      	movs	r1, #0
    4e8e:	68f8      	ldr	r0, [r7, #12]
    4e90:	f7ff fd4a 	bl	4928 <clkstarted_handle>
		}

		break;
    4e94:	e01e      	b.n	4ed4 <clock_event_handler+0x80>
	case NRFX_CLOCK_EVT_LFCLK_STARTED:
		if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION) &&
		    !IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_FORCE_ALT)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4e96:	2101      	movs	r1, #1
    4e98:	68f8      	ldr	r0, [r7, #12]
    4e9a:	f7ff fd45 	bl	4928 <clkstarted_handle>
		break;
    4e9e:	e01a      	b.n	4ed6 <clock_event_handler+0x82>
		if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION) &&
		    !IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_FORCE_ALT)) {
			z_nrf_clock_calibration_done_handler();
		} else {
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
    4ea0:	f240 2366 	movw	r3, #614	; 0x266
    4ea4:	4a0f      	ldr	r2, [pc, #60]	; (4ee4 <clock_event_handler+0x90>)
    4ea6:	4910      	ldr	r1, [pc, #64]	; (4ee8 <clock_event_handler+0x94>)
    4ea8:	4810      	ldr	r0, [pc, #64]	; (4eec <clock_event_handler+0x98>)
    4eaa:	f00a fee3 	bl	fc74 <printk>
    4eae:	f240 2166 	movw	r1, #614	; 0x266
    4eb2:	480c      	ldr	r0, [pc, #48]	; (4ee4 <clock_event_handler+0x90>)
    4eb4:	f00b fb3a 	bl	1052c <assert_post_action>
		}
		break;
    4eb8:	e00d      	b.n	4ed6 <clock_event_handler+0x82>
	default:
		__ASSERT_NO_MSG(0);
    4eba:	f240 236a 	movw	r3, #618	; 0x26a
    4ebe:	4a09      	ldr	r2, [pc, #36]	; (4ee4 <clock_event_handler+0x90>)
    4ec0:	4909      	ldr	r1, [pc, #36]	; (4ee8 <clock_event_handler+0x94>)
    4ec2:	480a      	ldr	r0, [pc, #40]	; (4eec <clock_event_handler+0x98>)
    4ec4:	f00a fed6 	bl	fc74 <printk>
    4ec8:	f240 216a 	movw	r1, #618	; 0x26a
    4ecc:	4805      	ldr	r0, [pc, #20]	; (4ee4 <clock_event_handler+0x90>)
    4ece:	f00b fb2d 	bl	1052c <assert_post_action>
		break;
    4ed2:	e000      	b.n	4ed6 <clock_event_handler+0x82>
		break;
    4ed4:	bf00      	nop
	}
}
    4ed6:	bf00      	nop
    4ed8:	3710      	adds	r7, #16
    4eda:	46bd      	mov	sp, r7
    4edc:	bd80      	pop	{r7, pc}
    4ede:	bf00      	nop
    4ee0:	00016e3c 	.word	0x00016e3c
    4ee4:	00017d58 	.word	0x00017d58
    4ee8:	00017d44 	.word	0x00017d44
    4eec:	00017cf0 	.word	0x00017cf0

00004ef0 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    4ef0:	b580      	push	{r7, lr}
    4ef2:	b086      	sub	sp, #24
    4ef4:	af00      	add	r7, sp, #0
    4ef6:	6078      	str	r0, [r7, #4]
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4ef8:	2200      	movs	r2, #0
    4efa:	2101      	movs	r1, #1
    4efc:	2005      	movs	r0, #5
    4efe:	f000 fd8b 	bl	5a18 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    4f02:	2005      	movs	r0, #5
    4f04:	f00d fbe7 	bl	126d6 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4f08:	481a      	ldr	r0, [pc, #104]	; (4f74 <clk_init+0x84>)
    4f0a:	f004 fbad 	bl	9668 <nrfx_clock_init>
    4f0e:	6138      	str	r0, [r7, #16]
	if (nrfx_err != NRFX_SUCCESS) {
    4f10:	693b      	ldr	r3, [r7, #16]
    4f12:	4a19      	ldr	r2, [pc, #100]	; (4f78 <clk_init+0x88>)
    4f14:	4293      	cmp	r3, r2
    4f16:	d002      	beq.n	4f1e <clk_init+0x2e>
		return -EIO;
    4f18:	f06f 0304 	mvn.w	r3, #4
    4f1c:	e026      	b.n	4f6c <clk_init+0x7c>
	}

	hfclkaudio_init();
    4f1e:	f00d fa65 	bl	123ec <hfclkaudio_init>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4f22:	f004 fc19 	bl	9758 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    4f26:	2300      	movs	r3, #0
    4f28:	75fb      	strb	r3, [r7, #23]
    4f2a:	e01b      	b.n	4f64 <clk_init+0x74>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    4f2c:	7dfb      	ldrb	r3, [r7, #23]
    4f2e:	4619      	mov	r1, r3
    4f30:	6878      	ldr	r0, [r7, #4]
    4f32:	f00d f8fa 	bl	1212a <get_sub_data>
    4f36:	60f8      	str	r0, [r7, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4f38:	7dfb      	ldrb	r3, [r7, #23]
    4f3a:	4619      	mov	r1, r3
    4f3c:	6878      	ldr	r0, [r7, #4]
    4f3e:	f00d f91f 	bl	12180 <get_onoff_manager>
    4f42:	4603      	mov	r3, r0
    4f44:	490d      	ldr	r1, [pc, #52]	; (4f7c <clk_init+0x8c>)
    4f46:	4618      	mov	r0, r3
    4f48:	f00b f805 	bl	ff56 <onoff_manager_init>
    4f4c:	60b8      	str	r0, [r7, #8]
					 &transitions);
		if (err < 0) {
    4f4e:	68bb      	ldr	r3, [r7, #8]
    4f50:	2b00      	cmp	r3, #0
    4f52:	da01      	bge.n	4f58 <clk_init+0x68>
			return err;
    4f54:	68bb      	ldr	r3, [r7, #8]
    4f56:	e009      	b.n	4f6c <clk_init+0x7c>
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4f58:	68fb      	ldr	r3, [r7, #12]
    4f5a:	2201      	movs	r2, #1
    4f5c:	609a      	str	r2, [r3, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    4f5e:	7dfb      	ldrb	r3, [r7, #23]
    4f60:	3301      	adds	r3, #1
    4f62:	75fb      	strb	r3, [r7, #23]
	for (enum clock_control_nrf_type i = 0;
    4f64:	7dfb      	ldrb	r3, [r7, #23]
    4f66:	2b01      	cmp	r3, #1
    4f68:	d9e0      	bls.n	4f2c <clk_init+0x3c>
	}

	return 0;
    4f6a:	2300      	movs	r3, #0
}
    4f6c:	4618      	mov	r0, r3
    4f6e:	3718      	adds	r7, #24
    4f70:	46bd      	mov	sp, r7
    4f72:	bd80      	pop	{r7, pc}
    4f74:	00004e55 	.word	0x00004e55
    4f78:	0bad0000 	.word	0x0bad0000
    4f7c:	0001ab84 	.word	0x0001ab84

00004f80 <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
    4f80:	b580      	push	{r7, lr}
    4f82:	b082      	sub	sp, #8
    4f84:	af00      	add	r7, sp, #0
    4f86:	6078      	str	r0, [r7, #4]
	__ASSERT_NO_MSG(false);
    4f88:	2317      	movs	r3, #23
    4f8a:	4a06      	ldr	r2, [pc, #24]	; (4fa4 <sys_clock_isr+0x24>)
    4f8c:	4906      	ldr	r1, [pc, #24]	; (4fa8 <sys_clock_isr+0x28>)
    4f8e:	4807      	ldr	r0, [pc, #28]	; (4fac <sys_clock_isr+0x2c>)
    4f90:	f00a fe70 	bl	fc74 <printk>
    4f94:	2117      	movs	r1, #23
    4f96:	4803      	ldr	r0, [pc, #12]	; (4fa4 <sys_clock_isr+0x24>)
    4f98:	f00b fac8 	bl	1052c <assert_post_action>
}
    4f9c:	bf00      	nop
    4f9e:	3708      	adds	r7, #8
    4fa0:	46bd      	mov	sp, r7
    4fa2:	bd80      	pop	{r7, pc}
    4fa4:	00017e90 	.word	0x00017e90
    4fa8:	00017ec4 	.word	0x00017ec4
    4fac:	00017ec8 	.word	0x00017ec8

00004fb0 <__NVIC_ClearPendingIRQ>:
{
    4fb0:	b480      	push	{r7}
    4fb2:	b083      	sub	sp, #12
    4fb4:	af00      	add	r7, sp, #0
    4fb6:	4603      	mov	r3, r0
    4fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    4fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4fbe:	2b00      	cmp	r3, #0
    4fc0:	db0c      	blt.n	4fdc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4fc2:	79fb      	ldrb	r3, [r7, #7]
    4fc4:	f003 021f 	and.w	r2, r3, #31
    4fc8:	4907      	ldr	r1, [pc, #28]	; (4fe8 <__NVIC_ClearPendingIRQ+0x38>)
    4fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4fce:	095b      	lsrs	r3, r3, #5
    4fd0:	2001      	movs	r0, #1
    4fd2:	fa00 f202 	lsl.w	r2, r0, r2
    4fd6:	3360      	adds	r3, #96	; 0x60
    4fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4fdc:	bf00      	nop
    4fde:	370c      	adds	r7, #12
    4fe0:	46bd      	mov	sp, r7
    4fe2:	bc80      	pop	{r7}
    4fe4:	4770      	bx	lr
    4fe6:	bf00      	nop
    4fe8:	e000e100 	.word	0xe000e100

00004fec <nrf_rtc_prescaler_set>:
{
     return p_reg->COUNTER;
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    4fec:	b580      	push	{r7, lr}
    4fee:	b082      	sub	sp, #8
    4ff0:	af00      	add	r7, sp, #0
    4ff2:	6078      	str	r0, [r7, #4]
    4ff4:	6039      	str	r1, [r7, #0]
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    4ff6:	683b      	ldr	r3, [r7, #0]
    4ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    4ffc:	d30b      	bcc.n	5016 <nrf_rtc_prescaler_set+0x2a>
    4ffe:	f44f 73bc 	mov.w	r3, #376	; 0x178
    5002:	4a09      	ldr	r2, [pc, #36]	; (5028 <nrf_rtc_prescaler_set+0x3c>)
    5004:	4909      	ldr	r1, [pc, #36]	; (502c <nrf_rtc_prescaler_set+0x40>)
    5006:	480a      	ldr	r0, [pc, #40]	; (5030 <nrf_rtc_prescaler_set+0x44>)
    5008:	f00a fe34 	bl	fc74 <printk>
    500c:	f44f 71bc 	mov.w	r1, #376	; 0x178
    5010:	4805      	ldr	r0, [pc, #20]	; (5028 <nrf_rtc_prescaler_set+0x3c>)
    5012:	f00b fa8b 	bl	1052c <assert_post_action>
    p_reg->PRESCALER = val;
    5016:	687b      	ldr	r3, [r7, #4]
    5018:	683a      	ldr	r2, [r7, #0]
    501a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    501e:	bf00      	nop
    5020:	3708      	adds	r7, #8
    5022:	46bd      	mov	sp, r7
    5024:	bd80      	pop	{r7, pc}
    5026:	bf00      	nop
    5028:	00017ef4 	.word	0x00017ef4
    502c:	00017f28 	.word	0x00017f28
    5030:	00017f50 	.word	0x00017f50

00005034 <set_comparator>:
{
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
    5034:	b580      	push	{r7, lr}
    5036:	b082      	sub	sp, #8
    5038:	af00      	add	r7, sp, #0
    503a:	6078      	str	r0, [r7, #4]
    503c:	6039      	str	r1, [r7, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    503e:	6879      	ldr	r1, [r7, #4]
    5040:	683b      	ldr	r3, [r7, #0]
    5042:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    5046:	461a      	mov	r2, r3
    5048:	4803      	ldr	r0, [pc, #12]	; (5058 <set_comparator+0x24>)
    504a:	f00d f9f9 	bl	12440 <nrf_rtc_cc_set>
}
    504e:	bf00      	nop
    5050:	3708      	adds	r7, #8
    5052:	46bd      	mov	sp, r7
    5054:	bd80      	pop	{r7, pc}
    5056:	bf00      	nop
    5058:	50015000 	.word	0x50015000

0000505c <get_comparator>:

static uint32_t get_comparator(int32_t chan)
{
    505c:	b580      	push	{r7, lr}
    505e:	b082      	sub	sp, #8
    5060:	af00      	add	r7, sp, #0
    5062:	6078      	str	r0, [r7, #4]
	return nrf_rtc_cc_get(RTC, chan);
    5064:	687b      	ldr	r3, [r7, #4]
    5066:	4619      	mov	r1, r3
    5068:	4803      	ldr	r0, [pc, #12]	; (5078 <get_comparator+0x1c>)
    506a:	f00d f9fb 	bl	12464 <nrf_rtc_cc_get>
    506e:	4603      	mov	r3, r0
}
    5070:	4618      	mov	r0, r3
    5072:	3708      	adds	r7, #8
    5074:	46bd      	mov	sp, r7
    5076:	bd80      	pop	{r7, pc}
    5078:	50015000 	.word	0x50015000

0000507c <event_clear>:

static void event_clear(int32_t chan)
{
    507c:	b580      	push	{r7, lr}
    507e:	b082      	sub	sp, #8
    5080:	af00      	add	r7, sp, #0
    5082:	6078      	str	r0, [r7, #4]
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5084:	687b      	ldr	r3, [r7, #4]
    5086:	b29b      	uxth	r3, r3
    5088:	3350      	adds	r3, #80	; 0x50
    508a:	b29b      	uxth	r3, r3
    508c:	009b      	lsls	r3, r3, #2
    508e:	b29b      	uxth	r3, r3
    5090:	4619      	mov	r1, r3
    5092:	4803      	ldr	r0, [pc, #12]	; (50a0 <event_clear+0x24>)
    5094:	f00d fa27 	bl	124e6 <nrf_rtc_event_clear>
}
    5098:	bf00      	nop
    509a:	3708      	adds	r7, #8
    509c:	46bd      	mov	sp, r7
    509e:	bd80      	pop	{r7, pc}
    50a0:	50015000 	.word	0x50015000

000050a4 <event_enable>:

static void event_enable(int32_t chan)
{
    50a4:	b580      	push	{r7, lr}
    50a6:	b082      	sub	sp, #8
    50a8:	af00      	add	r7, sp, #0
    50aa:	6078      	str	r0, [r7, #4]
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    50ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    50b0:	687b      	ldr	r3, [r7, #4]
    50b2:	fa02 f303 	lsl.w	r3, r2, r3
    50b6:	4619      	mov	r1, r3
    50b8:	4803      	ldr	r0, [pc, #12]	; (50c8 <event_enable+0x24>)
    50ba:	f00d fa46 	bl	1254a <nrf_rtc_event_enable>
}
    50be:	bf00      	nop
    50c0:	3708      	adds	r7, #8
    50c2:	46bd      	mov	sp, r7
    50c4:	bd80      	pop	{r7, pc}
    50c6:	bf00      	nop
    50c8:	50015000 	.word	0x50015000

000050cc <event_disable>:

static void event_disable(int32_t chan)
{
    50cc:	b580      	push	{r7, lr}
    50ce:	b082      	sub	sp, #8
    50d0:	af00      	add	r7, sp, #0
    50d2:	6078      	str	r0, [r7, #4]
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    50d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    50d8:	687b      	ldr	r3, [r7, #4]
    50da:	fa02 f303 	lsl.w	r3, r2, r3
    50de:	4619      	mov	r1, r3
    50e0:	4803      	ldr	r0, [pc, #12]	; (50f0 <event_disable+0x24>)
    50e2:	f00d fa40 	bl	12566 <nrf_rtc_event_disable>
}
    50e6:	bf00      	nop
    50e8:	3708      	adds	r7, #8
    50ea:	46bd      	mov	sp, r7
    50ec:	bd80      	pop	{r7, pc}
    50ee:	bf00      	nop
    50f0:	50015000 	.word	0x50015000

000050f4 <counter>:

static uint32_t counter(void)
{
    50f4:	b580      	push	{r7, lr}
    50f6:	af00      	add	r7, sp, #0
	return nrf_rtc_counter_get(RTC);
    50f8:	4802      	ldr	r0, [pc, #8]	; (5104 <counter+0x10>)
    50fa:	f00d fa09 	bl	12510 <nrf_rtc_counter_get>
    50fe:	4603      	mov	r3, r0
}
    5100:	4618      	mov	r0, r3
    5102:	bd80      	pop	{r7, pc}
    5104:	50015000 	.word	0x50015000

00005108 <compare_set>:
}

static void compare_set(int32_t chan, uint32_t cc_value,
			z_nrf_rtc_timer_compare_handler_t handler,
			void *user_data)
{
    5108:	b580      	push	{r7, lr}
    510a:	b084      	sub	sp, #16
    510c:	af00      	add	r7, sp, #0
    510e:	60f8      	str	r0, [r7, #12]
    5110:	60b9      	str	r1, [r7, #8]
    5112:	607a      	str	r2, [r7, #4]
    5114:	603b      	str	r3, [r7, #0]
	cc_data[chan].callback = handler;
    5116:	4909      	ldr	r1, [pc, #36]	; (513c <compare_set+0x34>)
    5118:	68fb      	ldr	r3, [r7, #12]
    511a:	687a      	ldr	r2, [r7, #4]
    511c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	cc_data[chan].user_context = user_data;
    5120:	4a06      	ldr	r2, [pc, #24]	; (513c <compare_set+0x34>)
    5122:	68fb      	ldr	r3, [r7, #12]
    5124:	00db      	lsls	r3, r3, #3
    5126:	4413      	add	r3, r2
    5128:	683a      	ldr	r2, [r7, #0]
    512a:	605a      	str	r2, [r3, #4]

	set_absolute_alarm(chan, cc_value);
    512c:	68b9      	ldr	r1, [r7, #8]
    512e:	68f8      	ldr	r0, [r7, #12]
    5130:	f00d fa36 	bl	125a0 <set_absolute_alarm>
}
    5134:	bf00      	nop
    5136:	3710      	adds	r7, #16
    5138:	46bd      	mov	sp, r7
    513a:	bd80      	pop	{r7, pc}
    513c:	20000618 	.word	0x20000618

00005140 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
    5140:	b590      	push	{r4, r7, lr}
    5142:	b087      	sub	sp, #28
    5144:	af00      	add	r7, sp, #0
    5146:	60f8      	str	r0, [r7, #12]
    5148:	60b9      	str	r1, [r7, #8]
    514a:	607a      	str	r2, [r7, #4]
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    514c:	4b16      	ldr	r3, [pc, #88]	; (51a8 <sys_clock_timeout_handler+0x68>)
    514e:	681b      	ldr	r3, [r3, #0]
    5150:	4619      	mov	r1, r3
    5152:	68b8      	ldr	r0, [r7, #8]
    5154:	f00d fa15 	bl	12582 <counter_sub>
    5158:	4604      	mov	r4, r0
    515a:	f00d f95e 	bl	1241a <sys_clock_hw_cycles_per_sec>
    515e:	4603      	mov	r3, r0
    5160:	2b00      	cmp	r3, #0
    5162:	da02      	bge.n	516a <sys_clock_timeout_handler+0x2a>
    5164:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    5168:	337f      	adds	r3, #127	; 0x7f
    516a:	13db      	asrs	r3, r3, #15
    516c:	fbb4 f3f3 	udiv	r3, r4, r3
    5170:	617b      	str	r3, [r7, #20]

	last_count += dticks * CYC_PER_TICK;
    5172:	f00d f952 	bl	1241a <sys_clock_hw_cycles_per_sec>
    5176:	4603      	mov	r3, r0
    5178:	2b00      	cmp	r3, #0
    517a:	da02      	bge.n	5182 <sys_clock_timeout_handler+0x42>
    517c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    5180:	337f      	adds	r3, #127	; 0x7f
    5182:	13db      	asrs	r3, r3, #15
    5184:	461a      	mov	r2, r3
    5186:	697b      	ldr	r3, [r7, #20]
    5188:	fb03 f202 	mul.w	r2, r3, r2
    518c:	4b06      	ldr	r3, [pc, #24]	; (51a8 <sys_clock_timeout_handler+0x68>)
    518e:	681b      	ldr	r3, [r3, #0]
    5190:	4413      	add	r3, r2
    5192:	4a05      	ldr	r2, [pc, #20]	; (51a8 <sys_clock_timeout_handler+0x68>)
    5194:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    5196:	697b      	ldr	r3, [r7, #20]
    5198:	4618      	mov	r0, r3
    519a:	f009 feb7 	bl	ef0c <sys_clock_announce>
						dticks : (dticks > 0));
}
    519e:	bf00      	nop
    51a0:	371c      	adds	r7, #28
    51a2:	46bd      	mov	sp, r7
    51a4:	bd90      	pop	{r4, r7, pc}
    51a6:	bf00      	nop
    51a8:	20000614 	.word	0x20000614

000051ac <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    51ac:	b580      	push	{r7, lr}
    51ae:	b086      	sub	sp, #24
    51b0:	af00      	add	r7, sp, #0
    51b2:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    51b4:	2300      	movs	r3, #0
    51b6:	617b      	str	r3, [r7, #20]
    51b8:	e048      	b.n	524c <rtc_nrf_isr+0xa0>
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    51ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    51be:	697b      	ldr	r3, [r7, #20]
    51c0:	fa02 f303 	lsl.w	r3, r2, r3
    51c4:	4619      	mov	r1, r3
    51c6:	4825      	ldr	r0, [pc, #148]	; (525c <rtc_nrf_isr+0xb0>)
    51c8:	f00d f96a 	bl	124a0 <nrf_rtc_int_enable_check>
    51cc:	4603      	mov	r3, r0
    51ce:	2b00      	cmp	r3, #0
    51d0:	d039      	beq.n	5246 <rtc_nrf_isr+0x9a>
		    nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan))) {
    51d2:	697b      	ldr	r3, [r7, #20]
    51d4:	b29b      	uxth	r3, r3
    51d6:	3350      	adds	r3, #80	; 0x50
    51d8:	b29b      	uxth	r3, r3
    51da:	009b      	lsls	r3, r3, #2
    51dc:	b29b      	uxth	r3, r3
    51de:	4619      	mov	r1, r3
    51e0:	481e      	ldr	r0, [pc, #120]	; (525c <rtc_nrf_isr+0xb0>)
    51e2:	f00d f96c 	bl	124be <nrf_rtc_event_check>
    51e6:	4603      	mov	r3, r0
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    51e8:	2b00      	cmp	r3, #0
    51ea:	d02c      	beq.n	5246 <rtc_nrf_isr+0x9a>
			uint32_t cc_val;
			uint32_t now;
			z_nrf_rtc_timer_compare_handler_t handler;

			event_clear(chan);
    51ec:	6978      	ldr	r0, [r7, #20]
    51ee:	f7ff ff45 	bl	507c <event_clear>
			event_disable(chan);
    51f2:	6978      	ldr	r0, [r7, #20]
    51f4:	f7ff ff6a 	bl	50cc <event_disable>
			cc_val = get_comparator(chan);
    51f8:	6978      	ldr	r0, [r7, #20]
    51fa:	f7ff ff2f 	bl	505c <get_comparator>
    51fe:	6138      	str	r0, [r7, #16]
			now = counter();
    5200:	f7ff ff78 	bl	50f4 <counter>
    5204:	60f8      	str	r0, [r7, #12]
			/* Higher priority interrupt may already changed cc_val
			 * which now points to the future. In that case return
			 * current counter value. It is less precise than
			 * returning exact CC value but this one is already lost.
			 */
			if (counter_sub(now, cc_val) > COUNTER_HALF_SPAN) {
    5206:	6939      	ldr	r1, [r7, #16]
    5208:	68f8      	ldr	r0, [r7, #12]
    520a:	f00d f9ba 	bl	12582 <counter_sub>
    520e:	4603      	mov	r3, r0
    5210:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    5214:	d901      	bls.n	521a <rtc_nrf_isr+0x6e>
				cc_val = now;
    5216:	68fb      	ldr	r3, [r7, #12]
    5218:	613b      	str	r3, [r7, #16]
			}

			handler = cc_data[chan].callback;
    521a:	4a11      	ldr	r2, [pc, #68]	; (5260 <rtc_nrf_isr+0xb4>)
    521c:	697b      	ldr	r3, [r7, #20]
    521e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    5222:	60bb      	str	r3, [r7, #8]
			cc_data[chan].callback = NULL;
    5224:	4a0e      	ldr	r2, [pc, #56]	; (5260 <rtc_nrf_isr+0xb4>)
    5226:	697b      	ldr	r3, [r7, #20]
    5228:	2100      	movs	r1, #0
    522a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
			if (handler) {
    522e:	68bb      	ldr	r3, [r7, #8]
    5230:	2b00      	cmp	r3, #0
    5232:	d008      	beq.n	5246 <rtc_nrf_isr+0x9a>
				handler(chan, cc_val,
    5234:	4a0a      	ldr	r2, [pc, #40]	; (5260 <rtc_nrf_isr+0xb4>)
    5236:	697b      	ldr	r3, [r7, #20]
    5238:	00db      	lsls	r3, r3, #3
    523a:	4413      	add	r3, r2
    523c:	685a      	ldr	r2, [r3, #4]
    523e:	68bb      	ldr	r3, [r7, #8]
    5240:	6939      	ldr	r1, [r7, #16]
    5242:	6978      	ldr	r0, [r7, #20]
    5244:	4798      	blx	r3
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5246:	697b      	ldr	r3, [r7, #20]
    5248:	3301      	adds	r3, #1
    524a:	617b      	str	r3, [r7, #20]
    524c:	697b      	ldr	r3, [r7, #20]
    524e:	2b00      	cmp	r3, #0
    5250:	ddb3      	ble.n	51ba <rtc_nrf_isr+0xe>
					cc_data[chan].user_context);
			}
		}
	}
}
    5252:	bf00      	nop
    5254:	bf00      	nop
    5256:	3718      	adds	r7, #24
    5258:	46bd      	mov	sp, r7
    525a:	bd80      	pop	{r7, pc}
    525c:	50015000 	.word	0x50015000
    5260:	20000618 	.word	0x20000618

00005264 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    5264:	b580      	push	{r7, lr}
    5266:	b084      	sub	sp, #16
    5268:	af00      	add	r7, sp, #0
    526a:	6078      	str	r0, [r7, #4]
			(IS_ENABLED(CONFIG_SYSTEM_CLOCK_WAIT_FOR_AVAILABILITY) ?
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
    526c:	2100      	movs	r1, #0
    526e:	481a      	ldr	r0, [pc, #104]	; (52d8 <sys_clock_driver_init+0x74>)
    5270:	f7ff febc 	bl	4fec <nrf_rtc_prescaler_set>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    5274:	2300      	movs	r3, #0
    5276:	60fb      	str	r3, [r7, #12]
    5278:	e00b      	b.n	5292 <sys_clock_driver_init+0x2e>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    527a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    527e:	68fb      	ldr	r3, [r7, #12]
    5280:	fa02 f303 	lsl.w	r3, r2, r3
    5284:	4619      	mov	r1, r3
    5286:	4814      	ldr	r0, [pc, #80]	; (52d8 <sys_clock_driver_init+0x74>)
    5288:	f00d f8fc 	bl	12484 <nrf_rtc_int_enable>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    528c:	68fb      	ldr	r3, [r7, #12]
    528e:	3301      	adds	r3, #1
    5290:	60fb      	str	r3, [r7, #12]
    5292:	68fb      	ldr	r3, [r7, #12]
    5294:	2b00      	cmp	r3, #0
    5296:	ddf0      	ble.n	527a <sys_clock_driver_init+0x16>
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);
    5298:	2015      	movs	r0, #21
    529a:	f7ff fe89 	bl	4fb0 <__NVIC_ClearPendingIRQ>

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    529e:	2200      	movs	r2, #0
    52a0:	2101      	movs	r1, #1
    52a2:	2015      	movs	r0, #21
    52a4:	f000 fbb8 	bl	5a18 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    52a8:	2015      	movs	r0, #21
    52aa:	f00d fa14 	bl	126d6 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
    52ae:	2108      	movs	r1, #8
    52b0:	4809      	ldr	r0, [pc, #36]	; (52d8 <sys_clock_driver_init+0x74>)
    52b2:	f00d f939 	bl	12528 <nrf_rtc_task_trigger>
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);
    52b6:	2100      	movs	r1, #0
    52b8:	4807      	ldr	r0, [pc, #28]	; (52d8 <sys_clock_driver_init+0x74>)
    52ba:	f00d f935 	bl	12528 <nrf_rtc_task_trigger>

	int_mask = BIT_MASK(CHAN_COUNT);
    52be:	4b07      	ldr	r3, [pc, #28]	; (52dc <sys_clock_driver_init+0x78>)
    52c0:	2201      	movs	r2, #1
    52c2:	601a      	str	r2, [r3, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    52c4:	4b06      	ldr	r3, [pc, #24]	; (52e0 <sys_clock_driver_init+0x7c>)
    52c6:	781b      	ldrb	r3, [r3, #0]
    52c8:	4618      	mov	r0, r3
    52ca:	f7ff fd6d 	bl	4da8 <z_nrf_clock_control_lf_on>

	return 0;
    52ce:	2300      	movs	r3, #0
}
    52d0:	4618      	mov	r0, r3
    52d2:	3710      	adds	r7, #16
    52d4:	46bd      	mov	sp, r7
    52d6:	bd80      	pop	{r7, pc}
    52d8:	50015000 	.word	0x50015000
    52dc:	20000620 	.word	0x20000620
    52e0:	0001ae5e 	.word	0x0001ae5e

000052e4 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    52e4:	b5b0      	push	{r4, r5, r7, lr}
    52e6:	b084      	sub	sp, #16
    52e8:	af00      	add	r7, sp, #0
    52ea:	6078      	str	r0, [r7, #4]
    52ec:	460b      	mov	r3, r1
    52ee:	70fb      	strb	r3, [r7, #3]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    52f0:	687b      	ldr	r3, [r7, #4]
    52f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    52f6:	d116      	bne.n	5326 <sys_clock_set_timeout+0x42>
    52f8:	f00d f88f 	bl	1241a <sys_clock_hw_cycles_per_sec>
    52fc:	4603      	mov	r3, r0
    52fe:	2b00      	cmp	r3, #0
    5300:	da02      	bge.n	5308 <sys_clock_set_timeout+0x24>
    5302:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    5306:	337f      	adds	r3, #127	; 0x7f
    5308:	13db      	asrs	r3, r3, #15
    530a:	f5c3 0400 	rsb	r4, r3, #8388608	; 0x800000
    530e:	f00d f884 	bl	1241a <sys_clock_hw_cycles_per_sec>
    5312:	4603      	mov	r3, r0
    5314:	2b00      	cmp	r3, #0
    5316:	da02      	bge.n	531e <sys_clock_set_timeout+0x3a>
    5318:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    531c:	337f      	adds	r3, #127	; 0x7f
    531e:	13db      	asrs	r3, r3, #15
    5320:	fbb4 f3f3 	udiv	r3, r4, r3
    5324:	e000      	b.n	5328 <sys_clock_set_timeout+0x44>
    5326:	687b      	ldr	r3, [r7, #4]
    5328:	607b      	str	r3, [r7, #4]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    532a:	687b      	ldr	r3, [r7, #4]
    532c:	3b01      	subs	r3, #1
    532e:	2b00      	cmp	r3, #0
    5330:	dd33      	ble.n	539a <sys_clock_set_timeout+0xb6>
    5332:	687b      	ldr	r3, [r7, #4]
    5334:	1e5c      	subs	r4, r3, #1
    5336:	f00d f870 	bl	1241a <sys_clock_hw_cycles_per_sec>
    533a:	4603      	mov	r3, r0
    533c:	2b00      	cmp	r3, #0
    533e:	da02      	bge.n	5346 <sys_clock_set_timeout+0x62>
    5340:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    5344:	337f      	adds	r3, #127	; 0x7f
    5346:	13db      	asrs	r3, r3, #15
    5348:	f5c3 0500 	rsb	r5, r3, #8388608	; 0x800000
    534c:	f00d f865 	bl	1241a <sys_clock_hw_cycles_per_sec>
    5350:	4603      	mov	r3, r0
    5352:	2b00      	cmp	r3, #0
    5354:	da02      	bge.n	535c <sys_clock_set_timeout+0x78>
    5356:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    535a:	337f      	adds	r3, #127	; 0x7f
    535c:	13db      	asrs	r3, r3, #15
    535e:	fbb5 f3f3 	udiv	r3, r5, r3
    5362:	429c      	cmp	r4, r3
    5364:	da02      	bge.n	536c <sys_clock_set_timeout+0x88>
    5366:	687b      	ldr	r3, [r7, #4]
    5368:	3b01      	subs	r3, #1
    536a:	e017      	b.n	539c <sys_clock_set_timeout+0xb8>
    536c:	f00d f855 	bl	1241a <sys_clock_hw_cycles_per_sec>
    5370:	4603      	mov	r3, r0
    5372:	2b00      	cmp	r3, #0
    5374:	da02      	bge.n	537c <sys_clock_set_timeout+0x98>
    5376:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    537a:	337f      	adds	r3, #127	; 0x7f
    537c:	13db      	asrs	r3, r3, #15
    537e:	f5c3 0400 	rsb	r4, r3, #8388608	; 0x800000
    5382:	f00d f84a 	bl	1241a <sys_clock_hw_cycles_per_sec>
    5386:	4603      	mov	r3, r0
    5388:	2b00      	cmp	r3, #0
    538a:	da02      	bge.n	5392 <sys_clock_set_timeout+0xae>
    538c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    5390:	337f      	adds	r3, #127	; 0x7f
    5392:	13db      	asrs	r3, r3, #15
    5394:	fbb4 f3f3 	udiv	r3, r4, r3
    5398:	e000      	b.n	539c <sys_clock_set_timeout+0xb8>
    539a:	2300      	movs	r3, #0
    539c:	607b      	str	r3, [r7, #4]

	uint32_t unannounced = counter_sub(counter(), last_count);
    539e:	f7ff fea9 	bl	50f4 <counter>
    53a2:	4602      	mov	r2, r0
    53a4:	4b4c      	ldr	r3, [pc, #304]	; (54d8 <sys_clock_set_timeout+0x1f4>)
    53a6:	681b      	ldr	r3, [r3, #0]
    53a8:	4619      	mov	r1, r3
    53aa:	4610      	mov	r0, r2
    53ac:	f00d f8e9 	bl	12582 <counter_sub>
    53b0:	60b8      	str	r0, [r7, #8]
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    53b2:	68bb      	ldr	r3, [r7, #8]
    53b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    53b8:	d301      	bcc.n	53be <sys_clock_set_timeout+0xda>
		ticks = 0;
    53ba:	2300      	movs	r3, #0
    53bc:	607b      	str	r3, [r7, #4]
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    53be:	f00d f82c 	bl	1241a <sys_clock_hw_cycles_per_sec>
    53c2:	4603      	mov	r3, r0
    53c4:	2b00      	cmp	r3, #0
    53c6:	da02      	bge.n	53ce <sys_clock_set_timeout+0xea>
    53c8:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    53cc:	337f      	adds	r3, #127	; 0x7f
    53ce:	13db      	asrs	r3, r3, #15
    53d0:	461a      	mov	r2, r3
    53d2:	687b      	ldr	r3, [r7, #4]
    53d4:	fb03 f302 	mul.w	r3, r3, r2
    53d8:	461a      	mov	r2, r3
    53da:	68bb      	ldr	r3, [r7, #8]
    53dc:	4413      	add	r3, r2
    53de:	3301      	adds	r3, #1
    53e0:	60fb      	str	r3, [r7, #12]
	cyc += (CYC_PER_TICK - 1);
    53e2:	f00d f81a 	bl	1241a <sys_clock_hw_cycles_per_sec>
    53e6:	4603      	mov	r3, r0
    53e8:	2b00      	cmp	r3, #0
    53ea:	da02      	bge.n	53f2 <sys_clock_set_timeout+0x10e>
    53ec:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    53f0:	337f      	adds	r3, #127	; 0x7f
    53f2:	13db      	asrs	r3, r3, #15
    53f4:	3b01      	subs	r3, #1
    53f6:	461a      	mov	r2, r3
    53f8:	68fb      	ldr	r3, [r7, #12]
    53fa:	4413      	add	r3, r2
    53fc:	60fb      	str	r3, [r7, #12]
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
    53fe:	f00d f80c 	bl	1241a <sys_clock_hw_cycles_per_sec>
    5402:	4603      	mov	r3, r0
    5404:	2b00      	cmp	r3, #0
    5406:	da02      	bge.n	540e <sys_clock_set_timeout+0x12a>
    5408:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    540c:	337f      	adds	r3, #127	; 0x7f
    540e:	13db      	asrs	r3, r3, #15
    5410:	461a      	mov	r2, r3
    5412:	68fb      	ldr	r3, [r7, #12]
    5414:	fbb3 f4f2 	udiv	r4, r3, r2
    5418:	f00c ffff 	bl	1241a <sys_clock_hw_cycles_per_sec>
    541c:	4603      	mov	r3, r0
    541e:	2b00      	cmp	r3, #0
    5420:	da02      	bge.n	5428 <sys_clock_set_timeout+0x144>
    5422:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    5426:	337f      	adds	r3, #127	; 0x7f
    5428:	13db      	asrs	r3, r3, #15
    542a:	fb03 f304 	mul.w	r3, r3, r4
    542e:	60fb      	str	r3, [r7, #12]

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    5430:	f00c fff3 	bl	1241a <sys_clock_hw_cycles_per_sec>
    5434:	4603      	mov	r3, r0
    5436:	2b00      	cmp	r3, #0
    5438:	da02      	bge.n	5440 <sys_clock_set_timeout+0x15c>
    543a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    543e:	337f      	adds	r3, #127	; 0x7f
    5440:	13db      	asrs	r3, r3, #15
    5442:	f5c3 0400 	rsb	r4, r3, #8388608	; 0x800000
    5446:	f00c ffe8 	bl	1241a <sys_clock_hw_cycles_per_sec>
    544a:	4603      	mov	r3, r0
    544c:	2b00      	cmp	r3, #0
    544e:	da02      	bge.n	5456 <sys_clock_set_timeout+0x172>
    5450:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    5454:	337f      	adds	r3, #127	; 0x7f
    5456:	13db      	asrs	r3, r3, #15
    5458:	fbb4 f4f3 	udiv	r4, r4, r3
    545c:	f00c ffdd 	bl	1241a <sys_clock_hw_cycles_per_sec>
    5460:	4603      	mov	r3, r0
    5462:	2b00      	cmp	r3, #0
    5464:	da02      	bge.n	546c <sys_clock_set_timeout+0x188>
    5466:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    546a:	337f      	adds	r3, #127	; 0x7f
    546c:	13db      	asrs	r3, r3, #15
    546e:	fb03 f304 	mul.w	r3, r3, r4
    5472:	68fa      	ldr	r2, [r7, #12]
    5474:	429a      	cmp	r2, r3
    5476:	d921      	bls.n	54bc <sys_clock_set_timeout+0x1d8>
		cyc = MAX_CYCLES;
    5478:	f00c ffcf 	bl	1241a <sys_clock_hw_cycles_per_sec>
    547c:	4603      	mov	r3, r0
    547e:	2b00      	cmp	r3, #0
    5480:	da02      	bge.n	5488 <sys_clock_set_timeout+0x1a4>
    5482:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    5486:	337f      	adds	r3, #127	; 0x7f
    5488:	13db      	asrs	r3, r3, #15
    548a:	f5c3 0400 	rsb	r4, r3, #8388608	; 0x800000
    548e:	f00c ffc4 	bl	1241a <sys_clock_hw_cycles_per_sec>
    5492:	4603      	mov	r3, r0
    5494:	2b00      	cmp	r3, #0
    5496:	da02      	bge.n	549e <sys_clock_set_timeout+0x1ba>
    5498:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    549c:	337f      	adds	r3, #127	; 0x7f
    549e:	13db      	asrs	r3, r3, #15
    54a0:	fbb4 f4f3 	udiv	r4, r4, r3
    54a4:	f00c ffb9 	bl	1241a <sys_clock_hw_cycles_per_sec>
    54a8:	4603      	mov	r3, r0
    54aa:	2b00      	cmp	r3, #0
    54ac:	da02      	bge.n	54b4 <sys_clock_set_timeout+0x1d0>
    54ae:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    54b2:	337f      	adds	r3, #127	; 0x7f
    54b4:	13db      	asrs	r3, r3, #15
    54b6:	fb03 f304 	mul.w	r3, r3, r4
    54ba:	60fb      	str	r3, [r7, #12]
	}

	cyc += last_count;
    54bc:	4b06      	ldr	r3, [pc, #24]	; (54d8 <sys_clock_set_timeout+0x1f4>)
    54be:	681b      	ldr	r3, [r3, #0]
    54c0:	68fa      	ldr	r2, [r7, #12]
    54c2:	4413      	add	r3, r2
    54c4:	60fb      	str	r3, [r7, #12]
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
    54c6:	2300      	movs	r3, #0
    54c8:	4a04      	ldr	r2, [pc, #16]	; (54dc <sys_clock_set_timeout+0x1f8>)
    54ca:	68f9      	ldr	r1, [r7, #12]
    54cc:	2000      	movs	r0, #0
    54ce:	f7ff fe1b 	bl	5108 <compare_set>
}
    54d2:	3710      	adds	r7, #16
    54d4:	46bd      	mov	sp, r7
    54d6:	bdb0      	pop	{r4, r5, r7, pc}
    54d8:	20000614 	.word	0x20000614
    54dc:	00005141 	.word	0x00005141

000054e0 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    54e0:	b598      	push	{r3, r4, r7, lr}
    54e2:	af00      	add	r7, sp, #0
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    54e4:	f7ff fe06 	bl	50f4 <counter>
    54e8:	4602      	mov	r2, r0
    54ea:	4b0a      	ldr	r3, [pc, #40]	; (5514 <sys_clock_elapsed+0x34>)
    54ec:	681b      	ldr	r3, [r3, #0]
    54ee:	4619      	mov	r1, r3
    54f0:	4610      	mov	r0, r2
    54f2:	f00d f846 	bl	12582 <counter_sub>
    54f6:	4604      	mov	r4, r0
    54f8:	f00c ff8f 	bl	1241a <sys_clock_hw_cycles_per_sec>
    54fc:	4603      	mov	r3, r0
    54fe:	2b00      	cmp	r3, #0
    5500:	da02      	bge.n	5508 <sys_clock_elapsed+0x28>
    5502:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
    5506:	337f      	adds	r3, #127	; 0x7f
    5508:	13db      	asrs	r3, r3, #15
    550a:	fbb4 f3f3 	udiv	r3, r4, r3
}
    550e:	4618      	mov	r0, r3
    5510:	bd98      	pop	{r3, r4, r7, pc}
    5512:	bf00      	nop
    5514:	20000614 	.word	0x20000614

00005518 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
    5518:	b580      	push	{r7, lr}
    551a:	b08a      	sub	sp, #40	; 0x28
    551c:	af00      	add	r7, sp, #0
    551e:	4b30      	ldr	r3, [pc, #192]	; (55e0 <sys_clock_cycle_get_32+0xc8>)
    5520:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
    5522:	f04f 0320 	mov.w	r3, #32
    5526:	f3ef 8211 	mrs	r2, BASEPRI
    552a:	f383 8811 	msr	BASEPRI, r3
    552e:	f3bf 8f6f 	isb	sy
    5532:	617a      	str	r2, [r7, #20]
    5534:	613b      	str	r3, [r7, #16]
	return key;
    5536:	697b      	ldr	r3, [r7, #20]
	k.key = arch_irq_lock();
    5538:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    553a:	69b8      	ldr	r0, [r7, #24]
    553c:	f006 fa02 	bl	b944 <z_spin_lock_valid>
    5540:	4603      	mov	r3, r0
    5542:	f083 0301 	eor.w	r3, r3, #1
    5546:	b2db      	uxtb	r3, r3
    5548:	2b00      	cmp	r3, #0
    554a:	d00d      	beq.n	5568 <sys_clock_cycle_get_32+0x50>
    554c:	2381      	movs	r3, #129	; 0x81
    554e:	4a25      	ldr	r2, [pc, #148]	; (55e4 <sys_clock_cycle_get_32+0xcc>)
    5550:	4925      	ldr	r1, [pc, #148]	; (55e8 <sys_clock_cycle_get_32+0xd0>)
    5552:	4826      	ldr	r0, [pc, #152]	; (55ec <sys_clock_cycle_get_32+0xd4>)
    5554:	f00a fb8e 	bl	fc74 <printk>
    5558:	69b9      	ldr	r1, [r7, #24]
    555a:	4825      	ldr	r0, [pc, #148]	; (55f0 <sys_clock_cycle_get_32+0xd8>)
    555c:	f00a fb8a 	bl	fc74 <printk>
    5560:	2181      	movs	r1, #129	; 0x81
    5562:	4820      	ldr	r0, [pc, #128]	; (55e4 <sys_clock_cycle_get_32+0xcc>)
    5564:	f00a ffe2 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    5568:	69b8      	ldr	r0, [r7, #24]
    556a:	f006 fa23 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    556e:	68bb      	ldr	r3, [r7, #8]
    5570:	60fb      	str	r3, [r7, #12]
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    5572:	f7ff fdbf 	bl	50f4 <counter>
    5576:	4602      	mov	r2, r0
    5578:	4b1e      	ldr	r3, [pc, #120]	; (55f4 <sys_clock_cycle_get_32+0xdc>)
    557a:	681b      	ldr	r3, [r3, #0]
    557c:	4619      	mov	r1, r3
    557e:	4610      	mov	r0, r2
    5580:	f00c ffff 	bl	12582 <counter_sub>
    5584:	4602      	mov	r2, r0
    5586:	4b1b      	ldr	r3, [pc, #108]	; (55f4 <sys_clock_cycle_get_32+0xdc>)
    5588:	681b      	ldr	r3, [r3, #0]
    558a:	4413      	add	r3, r2
    558c:	627b      	str	r3, [r7, #36]	; 0x24
    558e:	4b14      	ldr	r3, [pc, #80]	; (55e0 <sys_clock_cycle_get_32+0xc8>)
    5590:	623b      	str	r3, [r7, #32]
    5592:	68fb      	ldr	r3, [r7, #12]
    5594:	607b      	str	r3, [r7, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5596:	6a38      	ldr	r0, [r7, #32]
    5598:	f006 f9f0 	bl	b97c <z_spin_unlock_valid>
    559c:	4603      	mov	r3, r0
    559e:	f083 0301 	eor.w	r3, r3, #1
    55a2:	b2db      	uxtb	r3, r3
    55a4:	2b00      	cmp	r3, #0
    55a6:	d00d      	beq.n	55c4 <sys_clock_cycle_get_32+0xac>
    55a8:	23ac      	movs	r3, #172	; 0xac
    55aa:	4a0e      	ldr	r2, [pc, #56]	; (55e4 <sys_clock_cycle_get_32+0xcc>)
    55ac:	4912      	ldr	r1, [pc, #72]	; (55f8 <sys_clock_cycle_get_32+0xe0>)
    55ae:	480f      	ldr	r0, [pc, #60]	; (55ec <sys_clock_cycle_get_32+0xd4>)
    55b0:	f00a fb60 	bl	fc74 <printk>
    55b4:	6a39      	ldr	r1, [r7, #32]
    55b6:	4811      	ldr	r0, [pc, #68]	; (55fc <sys_clock_cycle_get_32+0xe4>)
    55b8:	f00a fb5c 	bl	fc74 <printk>
    55bc:	21ac      	movs	r1, #172	; 0xac
    55be:	4809      	ldr	r0, [pc, #36]	; (55e4 <sys_clock_cycle_get_32+0xcc>)
    55c0:	f00a ffb4 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    55c4:	687b      	ldr	r3, [r7, #4]
    55c6:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    55c8:	69fb      	ldr	r3, [r7, #28]
    55ca:	f383 8811 	msr	BASEPRI, r3
    55ce:	f3bf 8f6f 	isb	sy
}
    55d2:	bf00      	nop
}
    55d4:	bf00      	nop

	k_spin_unlock(&lock, key);
	return ret;
    55d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    55d8:	4618      	mov	r0, r3
    55da:	3728      	adds	r7, #40	; 0x28
    55dc:	46bd      	mov	sp, r7
    55de:	bd80      	pop	{r7, pc}
    55e0:	20000610 	.word	0x20000610
    55e4:	00017fcc 	.word	0x00017fcc
    55e8:	00017ff4 	.word	0x00017ff4
    55ec:	00017f50 	.word	0x00017f50
    55f0:	0001800c 	.word	0x0001800c
    55f4:	20000614 	.word	0x20000614
    55f8:	00018024 	.word	0x00018024
    55fc:	0001803c 	.word	0x0001803c

00005600 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    5600:	b580      	push	{r7, lr}
    5602:	af00      	add	r7, sp, #0
	nrf_cc3xx_platform_set_abort(&apis);
    5604:	4802      	ldr	r0, [pc, #8]	; (5610 <nrf_cc3xx_platform_abort_init+0x10>)
    5606:	f009 ff5f 	bl	f4c8 <nrf_cc3xx_platform_set_abort>
}
    560a:	bf00      	nop
    560c:	bd80      	pop	{r7, pc}
    560e:	bf00      	nop
    5610:	0001ab90 	.word	0x0001ab90

00005614 <mutex_init_platform>:
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID
};

/**@brief static function to initialize a mutex
 */
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5614:	b580      	push	{r7, lr}
    5616:	b084      	sub	sp, #16
    5618:	af00      	add	r7, sp, #0
    561a:	6078      	str	r0, [r7, #4]
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    561c:	687b      	ldr	r3, [r7, #4]
    561e:	2b00      	cmp	r3, #0
    5620:	d103      	bne.n	562a <mutex_init_platform+0x16>
        platform_abort_apis.abort_fn(
    5622:	4b23      	ldr	r3, [pc, #140]	; (56b0 <mutex_init_platform+0x9c>)
    5624:	685b      	ldr	r3, [r3, #4]
    5626:	4823      	ldr	r0, [pc, #140]	; (56b4 <mutex_init_platform+0xa0>)
    5628:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }
    /* Atomic mutex has been initialized statically */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    562a:	687b      	ldr	r3, [r7, #4]
    562c:	685b      	ldr	r3, [r3, #4]
    562e:	2b04      	cmp	r3, #4
    5630:	d039      	beq.n	56a6 <mutex_init_platform+0x92>
        mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX) {
    5632:	687b      	ldr	r3, [r7, #4]
    5634:	685b      	ldr	r3, [r3, #4]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    5636:	2b08      	cmp	r3, #8
    5638:	d035      	beq.n	56a6 <mutex_init_platform+0x92>
        return;
    }

    /* Allocate if this has not been initialized statically */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    563a:	687b      	ldr	r3, [r7, #4]
    563c:	685b      	ldr	r3, [r3, #4]
    563e:	2b00      	cmp	r3, #0
    5640:	d124      	bne.n	568c <mutex_init_platform+0x78>
        mutex->mutex == NULL) {
    5642:	687b      	ldr	r3, [r7, #4]
    5644:	681b      	ldr	r3, [r3, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    5646:	2b00      	cmp	r3, #0
    5648:	d120      	bne.n	568c <mutex_init_platform+0x78>
        /* Allocate some memory for the mutex */
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    564a:	6879      	ldr	r1, [r7, #4]
    564c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5654:	4818      	ldr	r0, [pc, #96]	; (56b8 <mutex_init_platform+0xa4>)
    5656:	f005 fe19 	bl	b28c <k_mem_slab_alloc>
    565a:	60f8      	str	r0, [r7, #12]
        if(ret != 0 || mutex->mutex == NULL)
    565c:	68fb      	ldr	r3, [r7, #12]
    565e:	2b00      	cmp	r3, #0
    5660:	d103      	bne.n	566a <mutex_init_platform+0x56>
    5662:	687b      	ldr	r3, [r7, #4]
    5664:	681b      	ldr	r3, [r3, #0]
    5666:	2b00      	cmp	r3, #0
    5668:	d103      	bne.n	5672 <mutex_init_platform+0x5e>
        {
            /* Allocation failed. Abort all operations */
            platform_abort_apis.abort_fn(
    566a:	4b11      	ldr	r3, [pc, #68]	; (56b0 <mutex_init_platform+0x9c>)
    566c:	685b      	ldr	r3, [r3, #4]
    566e:	4813      	ldr	r0, [pc, #76]	; (56bc <mutex_init_platform+0xa8>)
    5670:	4798      	blx	r3
                "Could not allocate mutex before initializing");
        }

        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    5672:	687b      	ldr	r3, [r7, #4]
    5674:	681b      	ldr	r3, [r3, #0]
    5676:	2214      	movs	r2, #20
    5678:	2100      	movs	r1, #0
    567a:	4618      	mov	r0, r3
    567c:	f00d fa6c 	bl	12b58 <memset>

        /** Set a flag to ensure that mutex is deallocated by the freeing
         * operation
         */
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    5680:	687b      	ldr	r3, [r7, #4]
    5682:	685b      	ldr	r3, [r3, #4]
    5684:	f043 0202 	orr.w	r2, r3, #2
    5688:	687b      	ldr	r3, [r7, #4]
    568a:	605a      	str	r2, [r3, #4]
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
    568c:	687b      	ldr	r3, [r7, #4]
    568e:	681b      	ldr	r3, [r3, #0]
    5690:	60bb      	str	r3, [r7, #8]
    k_mutex_init(p_mutex);
    5692:	68b8      	ldr	r0, [r7, #8]
    5694:	f00c fff7 	bl	12686 <k_mutex_init>

    /* Set the mask to indicate that the mutex is valid */
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    5698:	687b      	ldr	r3, [r7, #4]
    569a:	685b      	ldr	r3, [r3, #4]
    569c:	f043 0201 	orr.w	r2, r3, #1
    56a0:	687b      	ldr	r3, [r7, #4]
    56a2:	605a      	str	r2, [r3, #4]
    56a4:	e000      	b.n	56a8 <mutex_init_platform+0x94>
        return;
    56a6:	bf00      	nop
}
    56a8:	3710      	adds	r7, #16
    56aa:	46bd      	mov	sp, r7
    56ac:	bd80      	pop	{r7, pc}
    56ae:	bf00      	nop
    56b0:	20000180 	.word	0x20000180
    56b4:	00018054 	.word	0x00018054
    56b8:	20000624 	.word	0x20000624
    56bc:	0001807c 	.word	0x0001807c

000056c0 <mutex_free_platform>:


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    56c0:	b580      	push	{r7, lr}
    56c2:	b082      	sub	sp, #8
    56c4:	af00      	add	r7, sp, #0
    56c6:	6078      	str	r0, [r7, #4]
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    56c8:	687b      	ldr	r3, [r7, #4]
    56ca:	2b00      	cmp	r3, #0
    56cc:	d103      	bne.n	56d6 <mutex_free_platform+0x16>
        platform_abort_apis.abort_fn(
    56ce:	4b18      	ldr	r3, [pc, #96]	; (5730 <mutex_free_platform+0x70>)
    56d0:	685b      	ldr	r3, [r3, #4]
    56d2:	4818      	ldr	r0, [pc, #96]	; (5734 <mutex_free_platform+0x74>)
    56d4:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    56d6:	687b      	ldr	r3, [r7, #4]
    56d8:	685b      	ldr	r3, [r3, #4]
    56da:	2b04      	cmp	r3, #4
    56dc:	d021      	beq.n	5722 <mutex_free_platform+0x62>
        mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX) {
    56de:	687b      	ldr	r3, [r7, #4]
    56e0:	685b      	ldr	r3, [r3, #4]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    56e2:	2b08      	cmp	r3, #8
    56e4:	d01d      	beq.n	5722 <mutex_free_platform+0x62>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    56e6:	687b      	ldr	r3, [r7, #4]
    56e8:	685b      	ldr	r3, [r3, #4]
    56ea:	2b00      	cmp	r3, #0
    56ec:	d01b      	beq.n	5726 <mutex_free_platform+0x66>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    56ee:	687b      	ldr	r3, [r7, #4]
    56f0:	685b      	ldr	r3, [r3, #4]
    56f2:	f003 0302 	and.w	r3, r3, #2
    56f6:	2b00      	cmp	r3, #0
    56f8:	d008      	beq.n	570c <mutex_free_platform+0x4c>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    56fa:	687b      	ldr	r3, [r7, #4]
    56fc:	4619      	mov	r1, r3
    56fe:	480e      	ldr	r0, [pc, #56]	; (5738 <mutex_free_platform+0x78>)
    5700:	f005 fe6c 	bl	b3dc <k_mem_slab_free>
        mutex->mutex = NULL;
    5704:	687b      	ldr	r3, [r7, #4]
    5706:	2200      	movs	r2, #0
    5708:	601a      	str	r2, [r3, #0]
    570a:	e006      	b.n	571a <mutex_free_platform+0x5a>
    }
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    570c:	687b      	ldr	r3, [r7, #4]
    570e:	681b      	ldr	r3, [r3, #0]
    5710:	2214      	movs	r2, #20
    5712:	2100      	movs	r1, #0
    5714:	4618      	mov	r0, r3
    5716:	f00d fa1f 	bl	12b58 <memset>
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    571a:	687b      	ldr	r3, [r7, #4]
    571c:	2200      	movs	r2, #0
    571e:	605a      	str	r2, [r3, #4]
    5720:	e002      	b.n	5728 <mutex_free_platform+0x68>
        return;
    5722:	bf00      	nop
    5724:	e000      	b.n	5728 <mutex_free_platform+0x68>
        return;
    5726:	bf00      	nop
}
    5728:	3708      	adds	r7, #8
    572a:	46bd      	mov	sp, r7
    572c:	bd80      	pop	{r7, pc}
    572e:	bf00      	nop
    5730:	20000180 	.word	0x20000180
    5734:	00018054 	.word	0x00018054
    5738:	20000624 	.word	0x20000624

0000573c <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    573c:	b580      	push	{r7, lr}
    573e:	b084      	sub	sp, #16
    5740:	af00      	add	r7, sp, #0
    5742:	6078      	str	r0, [r7, #4]
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    5744:	687b      	ldr	r3, [r7, #4]
    5746:	2b00      	cmp	r3, #0
    5748:	d102      	bne.n	5750 <mutex_lock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    574a:	f46f 43e0 	mvn.w	r3, #28672	; 0x7000
    574e:	e02a      	b.n	57a6 <mutex_lock_platform+0x6a>
    }

    switch (mutex->flags) {
    5750:	687b      	ldr	r3, [r7, #4]
    5752:	685b      	ldr	r3, [r3, #4]
    5754:	2b04      	cmp	r3, #4
    5756:	d10d      	bne.n	5774 <mutex_lock_platform+0x38>
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    5758:	687b      	ldr	r3, [r7, #4]
    575a:	681b      	ldr	r3, [r3, #0]
    575c:	2201      	movs	r2, #1
    575e:	2100      	movs	r1, #0
    5760:	4618      	mov	r0, r3
    5762:	f00c ff6e 	bl	12642 <atomic_cas>
    5766:	4603      	mov	r3, r0
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5768:	2b00      	cmp	r3, #0
    576a:	d001      	beq.n	5770 <mutex_lock_platform+0x34>
    576c:	2300      	movs	r3, #0
    576e:	e01a      	b.n	57a6 <mutex_lock_platform+0x6a>
    5770:	4b0f      	ldr	r3, [pc, #60]	; (57b0 <mutex_lock_platform+0x74>)
    5772:	e018      	b.n	57a6 <mutex_lock_platform+0x6a>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    5774:	687b      	ldr	r3, [r7, #4]
    5776:	685b      	ldr	r3, [r3, #4]
    5778:	2b00      	cmp	r3, #0
    577a:	d101      	bne.n	5780 <mutex_lock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    577c:	4b0d      	ldr	r3, [pc, #52]	; (57b4 <mutex_lock_platform+0x78>)
    577e:	e012      	b.n	57a6 <mutex_lock_platform+0x6a>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    5780:	687b      	ldr	r3, [r7, #4]
    5782:	681b      	ldr	r3, [r3, #0]
    5784:	60fb      	str	r3, [r7, #12]

        ret = k_mutex_lock(p_mutex, K_FOREVER);
    5786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    578a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    578e:	4602      	mov	r2, r0
    5790:	460b      	mov	r3, r1
    5792:	68f8      	ldr	r0, [r7, #12]
    5794:	f00c ff83 	bl	1269e <k_mutex_lock>
    5798:	60b8      	str	r0, [r7, #8]
        if (ret == 0) {
    579a:	68bb      	ldr	r3, [r7, #8]
    579c:	2b00      	cmp	r3, #0
    579e:	d101      	bne.n	57a4 <mutex_lock_platform+0x68>
            return NRF_CC3XX_PLATFORM_SUCCESS;
    57a0:	2300      	movs	r3, #0
    57a2:	e000      	b.n	57a6 <mutex_lock_platform+0x6a>
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    57a4:	4b02      	ldr	r3, [pc, #8]	; (57b0 <mutex_lock_platform+0x74>)
        }
    }
}
    57a6:	4618      	mov	r0, r3
    57a8:	3710      	adds	r7, #16
    57aa:	46bd      	mov	sp, r7
    57ac:	bd80      	pop	{r7, pc}
    57ae:	bf00      	nop
    57b0:	ffff8fe9 	.word	0xffff8fe9
    57b4:	ffff8fea 	.word	0xffff8fea

000057b8 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    57b8:	b580      	push	{r7, lr}
    57ba:	b084      	sub	sp, #16
    57bc:	af00      	add	r7, sp, #0
    57be:	6078      	str	r0, [r7, #4]
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    57c0:	687b      	ldr	r3, [r7, #4]
    57c2:	2b00      	cmp	r3, #0
    57c4:	d102      	bne.n	57cc <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    57c6:	f46f 43e0 	mvn.w	r3, #28672	; 0x7000
    57ca:	e01e      	b.n	580a <mutex_unlock_platform+0x52>
    }

    switch (mutex->flags)
    57cc:	687b      	ldr	r3, [r7, #4]
    57ce:	685b      	ldr	r3, [r3, #4]
    57d0:	2b04      	cmp	r3, #4
    57d2:	d10d      	bne.n	57f0 <mutex_unlock_platform+0x38>
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    57d4:	687b      	ldr	r3, [r7, #4]
    57d6:	681b      	ldr	r3, [r3, #0]
    57d8:	2200      	movs	r2, #0
    57da:	2101      	movs	r1, #1
    57dc:	4618      	mov	r0, r3
    57de:	f00c ff30 	bl	12642 <atomic_cas>
    57e2:	4603      	mov	r3, r0
                       NRF_CC3XX_PLATFORM_SUCCESS :
    57e4:	2b00      	cmp	r3, #0
    57e6:	d001      	beq.n	57ec <mutex_unlock_platform+0x34>
    57e8:	2300      	movs	r3, #0
    57ea:	e00e      	b.n	580a <mutex_unlock_platform+0x52>
    57ec:	4b09      	ldr	r3, [pc, #36]	; (5814 <mutex_unlock_platform+0x5c>)
    57ee:	e00c      	b.n	580a <mutex_unlock_platform+0x52>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    57f0:	687b      	ldr	r3, [r7, #4]
    57f2:	685b      	ldr	r3, [r3, #4]
    57f4:	2b00      	cmp	r3, #0
    57f6:	d101      	bne.n	57fc <mutex_unlock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    57f8:	4b07      	ldr	r3, [pc, #28]	; (5818 <mutex_unlock_platform+0x60>)
    57fa:	e006      	b.n	580a <mutex_unlock_platform+0x52>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    57fc:	687b      	ldr	r3, [r7, #4]
    57fe:	681b      	ldr	r3, [r3, #0]
    5800:	60fb      	str	r3, [r7, #12]

        k_mutex_unlock(p_mutex);
    5802:	68f8      	ldr	r0, [r7, #12]
    5804:	f00c ff5b 	bl	126be <k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    5808:	2300      	movs	r3, #0
    }
}
    580a:	4618      	mov	r0, r3
    580c:	3710      	adds	r7, #16
    580e:	46bd      	mov	sp, r7
    5810:	bd80      	pop	{r7, pc}
    5812:	bf00      	nop
    5814:	ffff8fe9 	.word	0xffff8fe9
    5818:	ffff8fea 	.word	0xffff8fea

0000581c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    581c:	b580      	push	{r7, lr}
    581e:	af00      	add	r7, sp, #0
    k_mem_slab_init(&mutex_slab,
    5820:	2340      	movs	r3, #64	; 0x40
    5822:	2214      	movs	r2, #20
    5824:	4904      	ldr	r1, [pc, #16]	; (5838 <nrf_cc3xx_platform_mutex_init+0x1c>)
    5826:	4805      	ldr	r0, [pc, #20]	; (583c <nrf_cc3xx_platform_mutex_init+0x20>)
    5828:	f010 f82f 	bl	1588a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    582c:	4904      	ldr	r1, [pc, #16]	; (5840 <nrf_cc3xx_platform_mutex_init+0x24>)
    582e:	4805      	ldr	r0, [pc, #20]	; (5844 <nrf_cc3xx_platform_mutex_init+0x28>)
    5830:	f009 fea8 	bl	f584 <nrf_cc3xx_platform_set_mutexes>
}
    5834:	bf00      	nop
    5836:	bd80      	pop	{r7, pc}
    5838:	20000644 	.word	0x20000644
    583c:	20000624 	.word	0x20000624
    5840:	0001aba8 	.word	0x0001aba8
    5844:	0001ab98 	.word	0x0001ab98

00005848 <arch_swap>:
 *
 * On ARMv6-M, the intlock key is represented by the PRIMASK register,
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
    5848:	b480      	push	{r7}
    584a:	b085      	sub	sp, #20
    584c:	af00      	add	r7, sp, #0
    584e:	6078      	str	r0, [r7, #4]
	/* store off key and return value */
	_current->arch.basepri = key;
    5850:	4b0f      	ldr	r3, [pc, #60]	; (5890 <arch_swap+0x48>)
    5852:	689b      	ldr	r3, [r3, #8]
    5854:	687a      	ldr	r2, [r7, #4]
    5856:	675a      	str	r2, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    5858:	4b0e      	ldr	r3, [pc, #56]	; (5894 <arch_swap+0x4c>)
    585a:	681a      	ldr	r2, [r3, #0]
    585c:	4b0c      	ldr	r3, [pc, #48]	; (5890 <arch_swap+0x48>)
    585e:	689b      	ldr	r3, [r3, #8]
    5860:	679a      	str	r2, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5862:	4b0d      	ldr	r3, [pc, #52]	; (5898 <arch_swap+0x50>)
    5864:	685b      	ldr	r3, [r3, #4]
    5866:	4a0c      	ldr	r2, [pc, #48]	; (5898 <arch_swap+0x50>)
    5868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    586c:	6053      	str	r3, [r2, #4]
    586e:	2300      	movs	r3, #0
    5870:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
    5872:	68fb      	ldr	r3, [r7, #12]
    5874:	f383 8811 	msr	BASEPRI, r3
    5878:	f3bf 8f6f 	isb	sy
}
    587c:	bf00      	nop
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    587e:	4b04      	ldr	r3, [pc, #16]	; (5890 <arch_swap+0x48>)
    5880:	689b      	ldr	r3, [r3, #8]
    5882:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
    5884:	4618      	mov	r0, r3
    5886:	3714      	adds	r7, #20
    5888:	46bd      	mov	sp, r7
    588a:	bc80      	pop	{r7}
    588c:	4770      	bx	lr
    588e:	bf00      	nop
    5890:	20000c00 	.word	0x20000c00
    5894:	0001ad68 	.word	0x0001ad68
    5898:	e000ed00 	.word	0xe000ed00

0000589c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    589c:	4913      	ldr	r1, [pc, #76]	; (58ec <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    589e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    58a0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    58a4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    58a6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    58aa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    58ae:	2020      	movs	r0, #32
    msr BASEPRI, r0
    58b0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    58b4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    58b8:	4f0d      	ldr	r7, [pc, #52]	; (58f0 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    58ba:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    58be:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    58c0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    58c2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    58c4:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    58c6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    58c8:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    58ca:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    58ce:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    58d2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    58d6:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    58da:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    58de:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    58e0:	f00c ff1f 	bl	12722 <configure_builtin_stack_guard>
    pop {r2, lr}
    58e4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    58e8:	4770      	bx	lr
    58ea:	0000      	.short	0x0000
    ldr r1, =_kernel
    58ec:	20000c00 	.word	0x20000c00
    ldr v4, =_SCS_ICSR
    58f0:	e000ed04 	.word	0xe000ed04

000058f4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    58f4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    58f8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    58fa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    58fe:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    5902:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    5904:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    5908:	2902      	cmp	r1, #2
    beq _oops
    590a:	d0ff      	beq.n	590c <_oops>

0000590c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    590c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    590e:	f00c ff3a 	bl	12786 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    5912:	bd01      	pop	{r0, pc}

00005914 <__NVIC_EnableIRQ>:
{
    5914:	b480      	push	{r7}
    5916:	b083      	sub	sp, #12
    5918:	af00      	add	r7, sp, #0
    591a:	4603      	mov	r3, r0
    591c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    591e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    5922:	2b00      	cmp	r3, #0
    5924:	db0b      	blt.n	593e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5926:	79fb      	ldrb	r3, [r7, #7]
    5928:	f003 021f 	and.w	r2, r3, #31
    592c:	4906      	ldr	r1, [pc, #24]	; (5948 <__NVIC_EnableIRQ+0x34>)
    592e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    5932:	095b      	lsrs	r3, r3, #5
    5934:	2001      	movs	r0, #1
    5936:	fa00 f202 	lsl.w	r2, r0, r2
    593a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    593e:	bf00      	nop
    5940:	370c      	adds	r7, #12
    5942:	46bd      	mov	sp, r7
    5944:	bc80      	pop	{r7}
    5946:	4770      	bx	lr
    5948:	e000e100 	.word	0xe000e100

0000594c <__NVIC_DisableIRQ>:
{
    594c:	b480      	push	{r7}
    594e:	b083      	sub	sp, #12
    5950:	af00      	add	r7, sp, #0
    5952:	4603      	mov	r3, r0
    5954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    5956:	f997 3007 	ldrsb.w	r3, [r7, #7]
    595a:	2b00      	cmp	r3, #0
    595c:	db12      	blt.n	5984 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    595e:	79fb      	ldrb	r3, [r7, #7]
    5960:	f003 021f 	and.w	r2, r3, #31
    5964:	490a      	ldr	r1, [pc, #40]	; (5990 <__NVIC_DisableIRQ+0x44>)
    5966:	f997 3007 	ldrsb.w	r3, [r7, #7]
    596a:	095b      	lsrs	r3, r3, #5
    596c:	2001      	movs	r0, #1
    596e:	fa00 f202 	lsl.w	r2, r0, r2
    5972:	3320      	adds	r3, #32
    5974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    5978:	f3bf 8f4f 	dsb	sy
}
    597c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
    597e:	f3bf 8f6f 	isb	sy
}
    5982:	bf00      	nop
}
    5984:	bf00      	nop
    5986:	370c      	adds	r7, #12
    5988:	46bd      	mov	sp, r7
    598a:	bc80      	pop	{r7}
    598c:	4770      	bx	lr
    598e:	bf00      	nop
    5990:	e000e100 	.word	0xe000e100

00005994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    5994:	b480      	push	{r7}
    5996:	b083      	sub	sp, #12
    5998:	af00      	add	r7, sp, #0
    599a:	4603      	mov	r3, r0
    599c:	6039      	str	r1, [r7, #0]
    599e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    59a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
    59a4:	2b00      	cmp	r3, #0
    59a6:	db0a      	blt.n	59be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    59a8:	683b      	ldr	r3, [r7, #0]
    59aa:	b2da      	uxtb	r2, r3
    59ac:	490c      	ldr	r1, [pc, #48]	; (59e0 <__NVIC_SetPriority+0x4c>)
    59ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
    59b2:	0152      	lsls	r2, r2, #5
    59b4:	b2d2      	uxtb	r2, r2
    59b6:	440b      	add	r3, r1
    59b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    59bc:	e00a      	b.n	59d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    59be:	683b      	ldr	r3, [r7, #0]
    59c0:	b2da      	uxtb	r2, r3
    59c2:	4908      	ldr	r1, [pc, #32]	; (59e4 <__NVIC_SetPriority+0x50>)
    59c4:	79fb      	ldrb	r3, [r7, #7]
    59c6:	f003 030f 	and.w	r3, r3, #15
    59ca:	3b04      	subs	r3, #4
    59cc:	0152      	lsls	r2, r2, #5
    59ce:	b2d2      	uxtb	r2, r2
    59d0:	440b      	add	r3, r1
    59d2:	761a      	strb	r2, [r3, #24]
}
    59d4:	bf00      	nop
    59d6:	370c      	adds	r7, #12
    59d8:	46bd      	mov	sp, r7
    59da:	bc80      	pop	{r7}
    59dc:	4770      	bx	lr
    59de:	bf00      	nop
    59e0:	e000e100 	.word	0xe000e100
    59e4:	e000ed00 	.word	0xe000ed00

000059e8 <arch_irq_is_enabled>:
{
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
    59e8:	b480      	push	{r7}
    59ea:	b083      	sub	sp, #12
    59ec:	af00      	add	r7, sp, #0
    59ee:	6078      	str	r0, [r7, #4]
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    59f0:	4a08      	ldr	r2, [pc, #32]	; (5a14 <arch_irq_is_enabled+0x2c>)
    59f2:	687b      	ldr	r3, [r7, #4]
    59f4:	095b      	lsrs	r3, r3, #5
    59f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    59fa:	687b      	ldr	r3, [r7, #4]
    59fc:	f003 031f 	and.w	r3, r3, #31
    5a00:	2101      	movs	r1, #1
    5a02:	fa01 f303 	lsl.w	r3, r1, r3
    5a06:	4013      	ands	r3, r2
}
    5a08:	4618      	mov	r0, r3
    5a0a:	370c      	adds	r7, #12
    5a0c:	46bd      	mov	sp, r7
    5a0e:	bc80      	pop	{r7}
    5a10:	4770      	bx	lr
    5a12:	bf00      	nop
    5a14:	e000e100 	.word	0xe000e100

00005a18 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    5a18:	b580      	push	{r7, lr}
    5a1a:	b084      	sub	sp, #16
    5a1c:	af00      	add	r7, sp, #0
    5a1e:	60f8      	str	r0, [r7, #12]
    5a20:	60b9      	str	r1, [r7, #8]
    5a22:	607a      	str	r2, [r7, #4]
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    5a24:	68bb      	ldr	r3, [r7, #8]
    5a26:	3301      	adds	r3, #1
    5a28:	60bb      	str	r3, [r7, #8]
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    5a2a:	68bb      	ldr	r3, [r7, #8]
    5a2c:	2b07      	cmp	r3, #7
    5a2e:	d910      	bls.n	5a52 <z_arm_irq_priority_set+0x3a>
    5a30:	2358      	movs	r3, #88	; 0x58
    5a32:	4a0d      	ldr	r2, [pc, #52]	; (5a68 <z_arm_irq_priority_set+0x50>)
    5a34:	490d      	ldr	r1, [pc, #52]	; (5a6c <z_arm_irq_priority_set+0x54>)
    5a36:	480e      	ldr	r0, [pc, #56]	; (5a70 <z_arm_irq_priority_set+0x58>)
    5a38:	f00a f91c 	bl	fc74 <printk>
    5a3c:	68bb      	ldr	r3, [r7, #8]
    5a3e:	1e59      	subs	r1, r3, #1
    5a40:	2307      	movs	r3, #7
    5a42:	68fa      	ldr	r2, [r7, #12]
    5a44:	480b      	ldr	r0, [pc, #44]	; (5a74 <z_arm_irq_priority_set+0x5c>)
    5a46:	f00a f915 	bl	fc74 <printk>
    5a4a:	2158      	movs	r1, #88	; 0x58
    5a4c:	4806      	ldr	r0, [pc, #24]	; (5a68 <z_arm_irq_priority_set+0x50>)
    5a4e:	f00a fd6d 	bl	1052c <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5a52:	68fb      	ldr	r3, [r7, #12]
    5a54:	b25b      	sxtb	r3, r3
    5a56:	68b9      	ldr	r1, [r7, #8]
    5a58:	4618      	mov	r0, r3
    5a5a:	f7ff ff9b 	bl	5994 <__NVIC_SetPriority>
}
    5a5e:	bf00      	nop
    5a60:	3710      	adds	r7, #16
    5a62:	46bd      	mov	sp, r7
    5a64:	bd80      	pop	{r7, pc}
    5a66:	bf00      	nop
    5a68:	000180ac 	.word	0x000180ac
    5a6c:	000180e4 	.word	0x000180e4
    5a70:	00018100 	.word	0x00018100
    5a74:	00018120 	.word	0x00018120

00005a78 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    5a78:	b480      	push	{r7}
    5a7a:	b087      	sub	sp, #28
    5a7c:	af00      	add	r7, sp, #0
    5a7e:	60f8      	str	r0, [r7, #12]
    5a80:	60b9      	str	r1, [r7, #8]
    5a82:	607a      	str	r2, [r7, #4]
    5a84:	603b      	str	r3, [r7, #0]
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    5a86:	687b      	ldr	r3, [r7, #4]
    5a88:	3b20      	subs	r3, #32
    5a8a:	617b      	str	r3, [r7, #20]
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    5a8c:	4a11      	ldr	r2, [pc, #68]	; (5ad4 <arch_new_thread+0x5c>)
    5a8e:	697b      	ldr	r3, [r7, #20]
    5a90:	619a      	str	r2, [r3, #24]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    5a92:	697b      	ldr	r3, [r7, #20]
    5a94:	699b      	ldr	r3, [r3, #24]
    5a96:	f023 0201 	bic.w	r2, r3, #1
    5a9a:	697b      	ldr	r3, [r7, #20]
    5a9c:	619a      	str	r2, [r3, #24]
#endif
	iframe->a1 = (uint32_t)entry;
    5a9e:	683a      	ldr	r2, [r7, #0]
    5aa0:	697b      	ldr	r3, [r7, #20]
    5aa2:	601a      	str	r2, [r3, #0]
	iframe->a2 = (uint32_t)p1;
    5aa4:	6a3a      	ldr	r2, [r7, #32]
    5aa6:	697b      	ldr	r3, [r7, #20]
    5aa8:	605a      	str	r2, [r3, #4]
	iframe->a3 = (uint32_t)p2;
    5aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5aac:	697b      	ldr	r3, [r7, #20]
    5aae:	609a      	str	r2, [r3, #8]
	iframe->a4 = (uint32_t)p3;
    5ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    5ab2:	697b      	ldr	r3, [r7, #20]
    5ab4:	60da      	str	r2, [r3, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    5ab6:	697b      	ldr	r3, [r7, #20]
    5ab8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5abc:	61da      	str	r2, [r3, #28]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    5abe:	697a      	ldr	r2, [r7, #20]
    5ac0:	68fb      	ldr	r3, [r7, #12]
    5ac2:	651a      	str	r2, [r3, #80]	; 0x50
	thread->arch.basepri = 0;
    5ac4:	68fb      	ldr	r3, [r7, #12]
    5ac6:	2200      	movs	r2, #0
    5ac8:	675a      	str	r2, [r3, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    5aca:	bf00      	nop
    5acc:	371c      	adds	r7, #28
    5ace:	46bd      	mov	sp, r7
    5ad0:	bc80      	pop	{r7}
    5ad2:	4770      	bx	lr
    5ad4:	00010151 	.word	0x00010151

00005ad8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    5ad8:	b580      	push	{r7, lr}
    5ada:	b086      	sub	sp, #24
    5adc:	af00      	add	r7, sp, #0
    5ade:	60f8      	str	r0, [r7, #12]
    5ae0:	60b9      	str	r1, [r7, #8]
    5ae2:	607a      	str	r2, [r7, #4]
	z_arm_prepare_switch_to_main();
    5ae4:	f00c fe2f 	bl	12746 <z_arm_prepare_switch_to_main>

	_current = main_thread;
    5ae8:	4a0c      	ldr	r2, [pc, #48]	; (5b1c <arch_switch_to_main_thread+0x44>)
    5aea:	68fb      	ldr	r3, [r7, #12]
    5aec:	6093      	str	r3, [r2, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    5aee:	68fb      	ldr	r3, [r7, #12]
    5af0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    5af2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    5af4:	697b      	ldr	r3, [r7, #20]
    5af6:	f383 880b 	msr	PSPLIM, r3
}
    5afa:	bf00      	nop

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    5afc:	687b      	ldr	r3, [r7, #4]
    5afe:	68ba      	ldr	r2, [r7, #8]
    5b00:	4618      	mov	r0, r3
    5b02:	f382 8809 	msr	PSP, r2
    5b06:	2100      	movs	r1, #0
    5b08:	b663      	cpsie	if
    5b0a:	f381 8811 	msr	BASEPRI, r1
    5b0e:	f3bf 8f6f 	isb	sy
    5b12:	2200      	movs	r2, #0
    5b14:	2300      	movs	r3, #0
    5b16:	f00a fb1b 	bl	10150 <z_thread_entry>
    5b1a:	bf00      	nop
    5b1c:	20000c00 	.word	0x20000c00

00005b20 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    5b20:	4901      	ldr	r1, [pc, #4]	; (5b28 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    5b22:	2210      	movs	r2, #16
	str	r2, [r1]
    5b24:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    5b26:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    5b28:	e000ed10 	.word	0xe000ed10

00005b2c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    5b2c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    5b2e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    5b30:	f380 8811 	msr	BASEPRI, r0
	isb
    5b34:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    5b38:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    5b3c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    5b3e:	b662      	cpsie	i
	isb
    5b40:	f3bf 8f6f 	isb	sy

	bx	lr
    5b44:	4770      	bx	lr
    5b46:	bf00      	nop

00005b48 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    5b48:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    5b4a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    5b4c:	f381 8811 	msr	BASEPRI, r1

	wfe
    5b50:	bf20      	wfe

	msr	BASEPRI, r0
    5b52:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    5b56:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    5b58:	4770      	bx	lr
    5b5a:	bf00      	nop

00005b5c <log_const_source_id>:
{
    5b5c:	b480      	push	{r7}
    5b5e:	b083      	sub	sp, #12
    5b60:	af00      	add	r7, sp, #0
    5b62:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    5b64:	687b      	ldr	r3, [r7, #4]
    5b66:	4a04      	ldr	r2, [pc, #16]	; (5b78 <log_const_source_id+0x1c>)
    5b68:	1a9b      	subs	r3, r3, r2
    5b6a:	08db      	lsrs	r3, r3, #3
}
    5b6c:	4618      	mov	r0, r3
    5b6e:	370c      	adds	r7, #12
    5b70:	46bd      	mov	sp, r7
    5b72:	bc80      	pop	{r7}
    5b74:	4770      	bx	lr
    5b76:	bf00      	nop
    5b78:	000170bc 	.word	0x000170bc

00005b7c <esf_dump>:
#include <kernel.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    5b7c:	b580      	push	{r7, lr}
    5b7e:	b090      	sub	sp, #64	; 0x40
    5b80:	af02      	add	r7, sp, #8
    5b82:	6078      	str	r0, [r7, #4]
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    5b84:	2303      	movs	r3, #3
    5b86:	2b00      	cmp	r3, #0
    5b88:	d047      	beq.n	5c1a <esf_dump+0x9e>
    5b8a:	f00c fde2 	bl	12752 <k_is_user_context>
    5b8e:	4603      	mov	r3, r0
    5b90:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    5b94:	2300      	movs	r3, #0
    5b96:	627b      	str	r3, [r7, #36]	; 0x24
    5b98:	2303      	movs	r3, #3
    5b9a:	2b00      	cmp	r3, #0
    5b9c:	d007      	beq.n	5bae <esf_dump+0x32>
    5b9e:	4b82      	ldr	r3, [pc, #520]	; (5da8 <esf_dump+0x22c>)
    5ba0:	681b      	ldr	r3, [r3, #0]
    5ba2:	4618      	mov	r0, r3
    5ba4:	f7ff ffda 	bl	5b5c <log_const_source_id>
    5ba8:	4603      	mov	r3, r0
    5baa:	b29b      	uxth	r3, r3
    5bac:	e000      	b.n	5bb0 <esf_dump+0x34>
    5bae:	2300      	movs	r3, #0
    5bb0:	867b      	strh	r3, [r7, #50]	; 0x32
    5bb2:	f897 3020 	ldrb.w	r3, [r7, #32]
    5bb6:	2201      	movs	r2, #1
    5bb8:	f362 0302 	bfi	r3, r2, #0, #3
    5bbc:	f887 3020 	strb.w	r3, [r7, #32]
    5bc0:	f897 3020 	ldrb.w	r3, [r7, #32]
    5bc4:	f36f 03c5 	bfc	r3, #3, #3
    5bc8:	f887 3020 	strb.w	r3, [r7, #32]
    5bcc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
    5bce:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5bd2:	b29a      	uxth	r2, r3
    5bd4:	8c3b      	ldrh	r3, [r7, #32]
    5bd6:	f362 138f 	bfi	r3, r2, #6, #10
    5bda:	843b      	strh	r3, [r7, #32]
    5bdc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    5be0:	2b00      	cmp	r3, #0
    5be2:	d00c      	beq.n	5bfe <esf_dump+0x82>
    5be4:	687b      	ldr	r3, [r7, #4]
    5be6:	681a      	ldr	r2, [r3, #0]
    5be8:	687b      	ldr	r3, [r7, #4]
    5bea:	6859      	ldr	r1, [r3, #4]
    5bec:	687b      	ldr	r3, [r7, #4]
    5bee:	689b      	ldr	r3, [r3, #8]
    5bf0:	9300      	str	r3, [sp, #0]
    5bf2:	460b      	mov	r3, r1
    5bf4:	496d      	ldr	r1, [pc, #436]	; (5dac <esf_dump+0x230>)
    5bf6:	8c38      	ldrh	r0, [r7, #32]
    5bf8:	f7fd f840 	bl	2c7c <log_from_user>
    5bfc:	e00e      	b.n	5c1c <esf_dump+0xa0>
    5bfe:	687b      	ldr	r3, [r7, #4]
    5c00:	6819      	ldr	r1, [r3, #0]
    5c02:	687b      	ldr	r3, [r7, #4]
    5c04:	685a      	ldr	r2, [r3, #4]
    5c06:	687b      	ldr	r3, [r7, #4]
    5c08:	6898      	ldr	r0, [r3, #8]
    5c0a:	8c3b      	ldrh	r3, [r7, #32]
    5c0c:	f8ad 3000 	strh.w	r3, [sp]
    5c10:	4603      	mov	r3, r0
    5c12:	4866      	ldr	r0, [pc, #408]	; (5dac <esf_dump+0x230>)
    5c14:	f00b f970 	bl	10ef8 <log_3>
    5c18:	e000      	b.n	5c1c <esf_dump+0xa0>
    5c1a:	bf00      	nop
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    5c1c:	2303      	movs	r3, #3
    5c1e:	2b00      	cmp	r3, #0
    5c20:	d043      	beq.n	5caa <esf_dump+0x12e>
    5c22:	f00c fd96 	bl	12752 <k_is_user_context>
    5c26:	4603      	mov	r3, r0
    5c28:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    5c2c:	2300      	movs	r3, #0
    5c2e:	61fb      	str	r3, [r7, #28]
    5c30:	2303      	movs	r3, #3
    5c32:	2b00      	cmp	r3, #0
    5c34:	d007      	beq.n	5c46 <esf_dump+0xca>
    5c36:	4b5c      	ldr	r3, [pc, #368]	; (5da8 <esf_dump+0x22c>)
    5c38:	681b      	ldr	r3, [r3, #0]
    5c3a:	4618      	mov	r0, r3
    5c3c:	f7ff ff8e 	bl	5b5c <log_const_source_id>
    5c40:	4603      	mov	r3, r0
    5c42:	b29b      	uxth	r3, r3
    5c44:	e000      	b.n	5c48 <esf_dump+0xcc>
    5c46:	2300      	movs	r3, #0
    5c48:	86fb      	strh	r3, [r7, #54]	; 0x36
    5c4a:	7e3b      	ldrb	r3, [r7, #24]
    5c4c:	2201      	movs	r2, #1
    5c4e:	f362 0302 	bfi	r3, r2, #0, #3
    5c52:	763b      	strb	r3, [r7, #24]
    5c54:	7e3b      	ldrb	r3, [r7, #24]
    5c56:	f36f 03c5 	bfc	r3, #3, #3
    5c5a:	763b      	strb	r3, [r7, #24]
    5c5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
    5c5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5c62:	b29a      	uxth	r2, r3
    5c64:	8b3b      	ldrh	r3, [r7, #24]
    5c66:	f362 138f 	bfi	r3, r2, #6, #10
    5c6a:	833b      	strh	r3, [r7, #24]
    5c6c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    5c70:	2b00      	cmp	r3, #0
    5c72:	d00c      	beq.n	5c8e <esf_dump+0x112>
    5c74:	687b      	ldr	r3, [r7, #4]
    5c76:	68da      	ldr	r2, [r3, #12]
    5c78:	687b      	ldr	r3, [r7, #4]
    5c7a:	6919      	ldr	r1, [r3, #16]
    5c7c:	687b      	ldr	r3, [r7, #4]
    5c7e:	695b      	ldr	r3, [r3, #20]
    5c80:	9300      	str	r3, [sp, #0]
    5c82:	460b      	mov	r3, r1
    5c84:	494a      	ldr	r1, [pc, #296]	; (5db0 <esf_dump+0x234>)
    5c86:	8b38      	ldrh	r0, [r7, #24]
    5c88:	f7fc fff8 	bl	2c7c <log_from_user>
    5c8c:	e00e      	b.n	5cac <esf_dump+0x130>
    5c8e:	687b      	ldr	r3, [r7, #4]
    5c90:	68d9      	ldr	r1, [r3, #12]
    5c92:	687b      	ldr	r3, [r7, #4]
    5c94:	691a      	ldr	r2, [r3, #16]
    5c96:	687b      	ldr	r3, [r7, #4]
    5c98:	6958      	ldr	r0, [r3, #20]
    5c9a:	8b3b      	ldrh	r3, [r7, #24]
    5c9c:	f8ad 3000 	strh.w	r3, [sp]
    5ca0:	4603      	mov	r3, r0
    5ca2:	4843      	ldr	r0, [pc, #268]	; (5db0 <esf_dump+0x234>)
    5ca4:	f00b f928 	bl	10ef8 <log_3>
    5ca8:	e000      	b.n	5cac <esf_dump+0x130>
    5caa:	bf00      	nop
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    5cac:	2303      	movs	r3, #3
    5cae:	2b00      	cmp	r3, #0
    5cb0:	d038      	beq.n	5d24 <esf_dump+0x1a8>
    5cb2:	f00c fd4e 	bl	12752 <k_is_user_context>
    5cb6:	4603      	mov	r3, r0
    5cb8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    5cbc:	2300      	movs	r3, #0
    5cbe:	617b      	str	r3, [r7, #20]
    5cc0:	2303      	movs	r3, #3
    5cc2:	2b00      	cmp	r3, #0
    5cc4:	d007      	beq.n	5cd6 <esf_dump+0x15a>
    5cc6:	4b38      	ldr	r3, [pc, #224]	; (5da8 <esf_dump+0x22c>)
    5cc8:	681b      	ldr	r3, [r3, #0]
    5cca:	4618      	mov	r0, r3
    5ccc:	f7ff ff46 	bl	5b5c <log_const_source_id>
    5cd0:	4603      	mov	r3, r0
    5cd2:	b29b      	uxth	r3, r3
    5cd4:	e000      	b.n	5cd8 <esf_dump+0x15c>
    5cd6:	2300      	movs	r3, #0
    5cd8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    5cda:	7c3b      	ldrb	r3, [r7, #16]
    5cdc:	2201      	movs	r2, #1
    5cde:	f362 0302 	bfi	r3, r2, #0, #3
    5ce2:	743b      	strb	r3, [r7, #16]
    5ce4:	7c3b      	ldrb	r3, [r7, #16]
    5ce6:	f36f 03c5 	bfc	r3, #3, #3
    5cea:	743b      	strb	r3, [r7, #16]
    5cec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    5cee:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5cf2:	b29a      	uxth	r2, r3
    5cf4:	8a3b      	ldrh	r3, [r7, #16]
    5cf6:	f362 138f 	bfi	r3, r2, #6, #10
    5cfa:	823b      	strh	r3, [r7, #16]
    5cfc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    5d00:	2b00      	cmp	r3, #0
    5d02:	d007      	beq.n	5d14 <esf_dump+0x198>
    5d04:	687b      	ldr	r3, [r7, #4]
    5d06:	69db      	ldr	r3, [r3, #28]
    5d08:	461a      	mov	r2, r3
    5d0a:	492a      	ldr	r1, [pc, #168]	; (5db4 <esf_dump+0x238>)
    5d0c:	8a38      	ldrh	r0, [r7, #16]
    5d0e:	f7fc ffb5 	bl	2c7c <log_from_user>
    5d12:	e008      	b.n	5d26 <esf_dump+0x1aa>
    5d14:	687b      	ldr	r3, [r7, #4]
    5d16:	69db      	ldr	r3, [r3, #28]
    5d18:	8a3a      	ldrh	r2, [r7, #16]
    5d1a:	4619      	mov	r1, r3
    5d1c:	4825      	ldr	r0, [pc, #148]	; (5db4 <esf_dump+0x238>)
    5d1e:	f00b f8bb 	bl	10e98 <log_1>
    5d22:	e000      	b.n	5d26 <esf_dump+0x1aa>
    5d24:	bf00      	nop
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    5d26:	2303      	movs	r3, #3
    5d28:	2b00      	cmp	r3, #0
    5d2a:	d101      	bne.n	5d30 <esf_dump+0x1b4>
    5d2c:	bf00      	nop
		esf->basic.pc);
}
    5d2e:	e037      	b.n	5da0 <esf_dump+0x224>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    5d30:	f00c fd0f 	bl	12752 <k_is_user_context>
    5d34:	4603      	mov	r3, r0
    5d36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    5d3a:	2300      	movs	r3, #0
    5d3c:	60fb      	str	r3, [r7, #12]
    5d3e:	2303      	movs	r3, #3
    5d40:	2b00      	cmp	r3, #0
    5d42:	d007      	beq.n	5d54 <esf_dump+0x1d8>
    5d44:	4b18      	ldr	r3, [pc, #96]	; (5da8 <esf_dump+0x22c>)
    5d46:	681b      	ldr	r3, [r3, #0]
    5d48:	4618      	mov	r0, r3
    5d4a:	f7ff ff07 	bl	5b5c <log_const_source_id>
    5d4e:	4603      	mov	r3, r0
    5d50:	b29b      	uxth	r3, r3
    5d52:	e000      	b.n	5d56 <esf_dump+0x1da>
    5d54:	2300      	movs	r3, #0
    5d56:	857b      	strh	r3, [r7, #42]	; 0x2a
    5d58:	7a3b      	ldrb	r3, [r7, #8]
    5d5a:	2201      	movs	r2, #1
    5d5c:	f362 0302 	bfi	r3, r2, #0, #3
    5d60:	723b      	strb	r3, [r7, #8]
    5d62:	7a3b      	ldrb	r3, [r7, #8]
    5d64:	f36f 03c5 	bfc	r3, #3, #3
    5d68:	723b      	strb	r3, [r7, #8]
    5d6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
    5d6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5d70:	b29a      	uxth	r2, r3
    5d72:	893b      	ldrh	r3, [r7, #8]
    5d74:	f362 138f 	bfi	r3, r2, #6, #10
    5d78:	813b      	strh	r3, [r7, #8]
    5d7a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    5d7e:	2b00      	cmp	r3, #0
    5d80:	d007      	beq.n	5d92 <esf_dump+0x216>
    5d82:	687b      	ldr	r3, [r7, #4]
    5d84:	699b      	ldr	r3, [r3, #24]
    5d86:	461a      	mov	r2, r3
    5d88:	490b      	ldr	r1, [pc, #44]	; (5db8 <esf_dump+0x23c>)
    5d8a:	8938      	ldrh	r0, [r7, #8]
    5d8c:	f7fc ff76 	bl	2c7c <log_from_user>
}
    5d90:	e006      	b.n	5da0 <esf_dump+0x224>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    5d92:	687b      	ldr	r3, [r7, #4]
    5d94:	699b      	ldr	r3, [r3, #24]
    5d96:	893a      	ldrh	r2, [r7, #8]
    5d98:	4619      	mov	r1, r3
    5d9a:	4807      	ldr	r0, [pc, #28]	; (5db8 <esf_dump+0x23c>)
    5d9c:	f00b f87c 	bl	10e98 <log_1>
}
    5da0:	bf00      	nop
    5da2:	3738      	adds	r7, #56	; 0x38
    5da4:	46bd      	mov	sp, r7
    5da6:	bd80      	pop	{r7, pc}
    5da8:	2000010c 	.word	0x2000010c
    5dac:	00018160 	.word	0x00018160
    5db0:	00018190 	.word	0x00018190
    5db4:	000181c0 	.word	0x000181c0
    5db8:	000181d0 	.word	0x000181d0

00005dbc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    5dbc:	bf30      	wfi
    b z_SysNmiOnReset
    5dbe:	f7ff bffd 	b.w	5dbc <z_SysNmiOnReset>
    5dc2:	bf00      	nop

00005dc4 <relocate_vector_table>:
#ifdef CONFIG_CPU_CORTEX_M_HAS_VTOR

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
    5dc4:	b480      	push	{r7}
    5dc6:	af00      	add	r7, sp, #0
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5dc8:	4b07      	ldr	r3, [pc, #28]	; (5de8 <relocate_vector_table+0x24>)
    5dca:	4a08      	ldr	r2, [pc, #32]	; (5dec <relocate_vector_table+0x28>)
    5dcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    5dd0:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    5dd2:	f3bf 8f4f 	dsb	sy
}
    5dd6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
    5dd8:	f3bf 8f6f 	isb	sy
}
    5ddc:	bf00      	nop
	__DSB();
	__ISB();
}
    5dde:	bf00      	nop
    5de0:	46bd      	mov	sp, r7
    5de2:	bc80      	pop	{r7}
    5de4:	4770      	bx	lr
    5de6:	bf00      	nop
    5de8:	00000000 	.word	0x00000000
    5dec:	e000ed00 	.word	0xe000ed00

00005df0 <z_arm_floating_point_init>:

#endif /* CONFIG_CPU_CORTEX_M_HAS_VTOR */

#if defined(CONFIG_CPU_HAS_FPU)
static inline void z_arm_floating_point_init(void)
{
    5df0:	b480      	push	{r7}
    5df2:	af00      	add	r7, sp, #0
	/*
	 * Upon reset, the Co-Processor Access Control Register is, normally,
	 * 0x00000000. However, it might be left un-cleared by firmware running
	 * before Zephyr boot.
	 */
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    5df4:	4b05      	ldr	r3, [pc, #20]	; (5e0c <z_arm_floating_point_init+0x1c>)
    5df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    5dfa:	4a04      	ldr	r2, [pc, #16]	; (5e0c <z_arm_floating_point_init+0x1c>)
    5dfc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    5e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#if (!defined(CONFIG_FPU) || !defined(CONFIG_FPU_SHARING)) && \
	(!defined(CONFIG_INIT_ARCH_HW_AT_BOOT))

	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
#endif
}
    5e04:	bf00      	nop
    5e06:	46bd      	mov	sp, r7
    5e08:	bc80      	pop	{r7}
    5e0a:	4770      	bx	lr
    5e0c:	e000ed00 	.word	0xe000ed00

00005e10 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    5e10:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    5e12:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    5e14:	4a0b      	ldr	r2, [pc, #44]	; (5e44 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    5e16:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    5e18:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    5e1a:	bf1e      	ittt	ne
	movne	r1, #0
    5e1c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    5e1e:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    5e20:	f00f ff58 	blne	15cd4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    5e24:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    5e26:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    5e2a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    5e2e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    5e32:	4905      	ldr	r1, [pc, #20]	; (5e48 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    5e34:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    5e36:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    5e38:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    5e3a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    5e3e:	4903      	ldr	r1, [pc, #12]	; (5e4c <_isr_wrapper+0x3c>)
	bx r1
    5e40:	4708      	bx	r1
    5e42:	0000      	.short	0x0000
	ldr r2, =_kernel
    5e44:	20000c00 	.word	0x20000c00
	ldr r1, =_sw_isr_table
    5e48:	00016eb4 	.word	0x00016eb4
	ldr r1, =z_arm_int_exit
    5e4c:	00007235 	.word	0x00007235

00005e50 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    5e50:	2000      	movs	r0, #0
    msr CONTROL, r0
    5e52:	f380 8814 	msr	CONTROL, r0
    isb
    5e56:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    5e5a:	2000      	movs	r0, #0
    msr MSPLIM, r0
    5e5c:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    5e60:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    5e64:	f010 ffb8 	bl	16dd8 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    5e68:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    5e6a:	490e      	ldr	r1, [pc, #56]	; (5ea4 <__start+0x54>)
    str r0, [r1]
    5e6c:	6008      	str	r0, [r1, #0]
    dsb
    5e6e:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    5e72:	480d      	ldr	r0, [pc, #52]	; (5ea8 <__start+0x58>)
    msr msp, r0
    5e74:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    5e78:	f001 fa16 	bl	72a8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5e7c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5e7e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    5e82:	480a      	ldr	r0, [pc, #40]	; (5eac <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    5e84:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    5e88:	1840      	adds	r0, r0, r1
    msr PSP, r0
    5e8a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    5e8e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    5e92:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    5e94:	4308      	orrs	r0, r1
    msr CONTROL, r0
    5e96:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    5e9a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    5e9e:	f00c fc89 	bl	127b4 <z_arm_prep_c>
    5ea2:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    5ea4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    5ea8:	20001e30 	.word	0x20001e30
    ldr r0, =z_interrupt_stacks
    5eac:	20001230 	.word	0x20001230

00005eb0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    5eb0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    5eb4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    5eb8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    5eba:	4672      	mov	r2, lr
	bl z_arm_fault
    5ebc:	f001 f938 	bl	7130 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    5ec0:	bd01      	pop	{r0, pc}
    5ec2:	bf00      	nop

00005ec4 <log_const_source_id>:
{
    5ec4:	b480      	push	{r7}
    5ec6:	b083      	sub	sp, #12
    5ec8:	af00      	add	r7, sp, #0
    5eca:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    5ecc:	687b      	ldr	r3, [r7, #4]
    5ece:	4a04      	ldr	r2, [pc, #16]	; (5ee0 <log_const_source_id+0x1c>)
    5ed0:	1a9b      	subs	r3, r3, r2
    5ed2:	08db      	lsrs	r3, r3, #3
}
    5ed4:	4618      	mov	r0, r3
    5ed6:	370c      	adds	r7, #12
    5ed8:	46bd      	mov	sp, r7
    5eda:	bc80      	pop	{r7}
    5edc:	4770      	bx	lr
    5ede:	bf00      	nop
    5ee0:	000170bc 	.word	0x000170bc

00005ee4 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    5ee4:	b580      	push	{r7, lr}
    5ee6:	b09c      	sub	sp, #112	; 0x70
    5ee8:	af00      	add	r7, sp, #0
    5eea:	60f8      	str	r0, [r7, #12]
    5eec:	60b9      	str	r1, [r7, #8]
    5eee:	607a      	str	r2, [r7, #4]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5ef0:	2300      	movs	r3, #0
    5ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t mmfar = -EINVAL;
    5ef4:	f06f 0315 	mvn.w	r3, #21
    5ef8:	66bb      	str	r3, [r7, #104]	; 0x68

	PR_FAULT_INFO("***** MPU FAULT *****");
    5efa:	2303      	movs	r3, #3
    5efc:	2b00      	cmp	r3, #0
    5efe:	d03c      	beq.n	5f7a <mem_manage_fault+0x96>
    5f00:	f00c fc66 	bl	127d0 <k_is_user_context>
    5f04:	4603      	mov	r3, r0
    5f06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    5f0a:	2300      	movs	r3, #0
    5f0c:	647b      	str	r3, [r7, #68]	; 0x44
    5f0e:	2303      	movs	r3, #3
    5f10:	2b00      	cmp	r3, #0
    5f12:	d007      	beq.n	5f24 <mem_manage_fault+0x40>
    5f14:	4bb5      	ldr	r3, [pc, #724]	; (61ec <mem_manage_fault+0x308>)
    5f16:	681b      	ldr	r3, [r3, #0]
    5f18:	4618      	mov	r0, r3
    5f1a:	f7ff ffd3 	bl	5ec4 <log_const_source_id>
    5f1e:	4603      	mov	r3, r0
    5f20:	b29b      	uxth	r3, r3
    5f22:	e000      	b.n	5f26 <mem_manage_fault+0x42>
    5f24:	2300      	movs	r3, #0
    5f26:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    5f2a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    5f2e:	2201      	movs	r2, #1
    5f30:	f362 0302 	bfi	r3, r2, #0, #3
    5f34:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    5f38:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    5f3c:	f36f 03c5 	bfc	r3, #3, #3
    5f40:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    5f44:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
    5f48:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5f4c:	b29a      	uxth	r2, r3
    5f4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
    5f52:	f362 138f 	bfi	r3, r2, #6, #10
    5f56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    5f5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    5f5e:	2b00      	cmp	r3, #0
    5f60:	d005      	beq.n	5f6e <mem_manage_fault+0x8a>
    5f62:	49a3      	ldr	r1, [pc, #652]	; (61f0 <mem_manage_fault+0x30c>)
    5f64:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
    5f68:	f7fc fe88 	bl	2c7c <log_from_user>
    5f6c:	e006      	b.n	5f7c <mem_manage_fault+0x98>
    5f6e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
    5f72:	489f      	ldr	r0, [pc, #636]	; (61f0 <mem_manage_fault+0x30c>)
    5f74:	f00a ff7b 	bl	10e6e <log_0>
    5f78:	e000      	b.n	5f7c <mem_manage_fault+0x98>
    5f7a:	bf00      	nop

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5f7c:	4b9d      	ldr	r3, [pc, #628]	; (61f4 <mem_manage_fault+0x310>)
    5f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5f80:	f003 0310 	and.w	r3, r3, #16
    5f84:	2b00      	cmp	r3, #0
    5f86:	d03c      	beq.n	6002 <mem_manage_fault+0x11e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    5f88:	2303      	movs	r3, #3
    5f8a:	2b00      	cmp	r3, #0
    5f8c:	d038      	beq.n	6000 <mem_manage_fault+0x11c>
    5f8e:	f00c fc1f 	bl	127d0 <k_is_user_context>
    5f92:	4603      	mov	r3, r0
    5f94:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    5f98:	2300      	movs	r3, #0
    5f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    5f9c:	2303      	movs	r3, #3
    5f9e:	2b00      	cmp	r3, #0
    5fa0:	d007      	beq.n	5fb2 <mem_manage_fault+0xce>
    5fa2:	4b92      	ldr	r3, [pc, #584]	; (61ec <mem_manage_fault+0x308>)
    5fa4:	681b      	ldr	r3, [r3, #0]
    5fa6:	4618      	mov	r0, r3
    5fa8:	f7ff ff8c 	bl	5ec4 <log_const_source_id>
    5fac:	4603      	mov	r3, r0
    5fae:	b29b      	uxth	r3, r3
    5fb0:	e000      	b.n	5fb4 <mem_manage_fault+0xd0>
    5fb2:	2300      	movs	r3, #0
    5fb4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    5fb8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    5fbc:	2201      	movs	r2, #1
    5fbe:	f362 0302 	bfi	r3, r2, #0, #3
    5fc2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    5fc6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    5fca:	f36f 03c5 	bfc	r3, #3, #3
    5fce:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    5fd2:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
    5fd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    5fda:	b29a      	uxth	r2, r3
    5fdc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    5fde:	f362 138f 	bfi	r3, r2, #6, #10
    5fe2:	873b      	strh	r3, [r7, #56]	; 0x38
    5fe4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
    5fe8:	2b00      	cmp	r3, #0
    5fea:	d004      	beq.n	5ff6 <mem_manage_fault+0x112>
    5fec:	4982      	ldr	r1, [pc, #520]	; (61f8 <mem_manage_fault+0x314>)
    5fee:	8f38      	ldrh	r0, [r7, #56]	; 0x38
    5ff0:	f7fc fe44 	bl	2c7c <log_from_user>
    5ff4:	e005      	b.n	6002 <mem_manage_fault+0x11e>
    5ff6:	8f39      	ldrh	r1, [r7, #56]	; 0x38
    5ff8:	487f      	ldr	r0, [pc, #508]	; (61f8 <mem_manage_fault+0x314>)
    5ffa:	f00a ff38 	bl	10e6e <log_0>
    5ffe:	e000      	b.n	6002 <mem_manage_fault+0x11e>
    6000:	bf00      	nop
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    6002:	4b7c      	ldr	r3, [pc, #496]	; (61f4 <mem_manage_fault+0x310>)
    6004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6006:	f003 0308 	and.w	r3, r3, #8
    600a:	2b00      	cmp	r3, #0
    600c:	d03c      	beq.n	6088 <mem_manage_fault+0x1a4>
		PR_FAULT_INFO("  Unstacking error");
    600e:	2303      	movs	r3, #3
    6010:	2b00      	cmp	r3, #0
    6012:	d038      	beq.n	6086 <mem_manage_fault+0x1a2>
    6014:	f00c fbdc 	bl	127d0 <k_is_user_context>
    6018:	4603      	mov	r3, r0
    601a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    601e:	2300      	movs	r3, #0
    6020:	637b      	str	r3, [r7, #52]	; 0x34
    6022:	2303      	movs	r3, #3
    6024:	2b00      	cmp	r3, #0
    6026:	d007      	beq.n	6038 <mem_manage_fault+0x154>
    6028:	4b70      	ldr	r3, [pc, #448]	; (61ec <mem_manage_fault+0x308>)
    602a:	681b      	ldr	r3, [r3, #0]
    602c:	4618      	mov	r0, r3
    602e:	f7ff ff49 	bl	5ec4 <log_const_source_id>
    6032:	4603      	mov	r3, r0
    6034:	b29b      	uxth	r3, r3
    6036:	e000      	b.n	603a <mem_manage_fault+0x156>
    6038:	2300      	movs	r3, #0
    603a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    603e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    6042:	2201      	movs	r2, #1
    6044:	f362 0302 	bfi	r3, r2, #0, #3
    6048:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    604c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    6050:	f36f 03c5 	bfc	r3, #3, #3
    6054:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    6058:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
    605c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6060:	b29a      	uxth	r2, r3
    6062:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    6064:	f362 138f 	bfi	r3, r2, #6, #10
    6068:	863b      	strh	r3, [r7, #48]	; 0x30
    606a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    606e:	2b00      	cmp	r3, #0
    6070:	d004      	beq.n	607c <mem_manage_fault+0x198>
    6072:	4962      	ldr	r1, [pc, #392]	; (61fc <mem_manage_fault+0x318>)
    6074:	8e38      	ldrh	r0, [r7, #48]	; 0x30
    6076:	f7fc fe01 	bl	2c7c <log_from_user>
    607a:	e005      	b.n	6088 <mem_manage_fault+0x1a4>
    607c:	8e39      	ldrh	r1, [r7, #48]	; 0x30
    607e:	485f      	ldr	r0, [pc, #380]	; (61fc <mem_manage_fault+0x318>)
    6080:	f00a fef5 	bl	10e6e <log_0>
    6084:	e000      	b.n	6088 <mem_manage_fault+0x1a4>
    6086:	bf00      	nop
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    6088:	4b5a      	ldr	r3, [pc, #360]	; (61f4 <mem_manage_fault+0x310>)
    608a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    608c:	f003 0302 	and.w	r3, r3, #2
    6090:	2b00      	cmp	r3, #0
    6092:	f000 8090 	beq.w	61b6 <mem_manage_fault+0x2d2>
		PR_FAULT_INFO("  Data Access Violation");
    6096:	2303      	movs	r3, #3
    6098:	2b00      	cmp	r3, #0
    609a:	d038      	beq.n	610e <mem_manage_fault+0x22a>
    609c:	f00c fb98 	bl	127d0 <k_is_user_context>
    60a0:	4603      	mov	r3, r0
    60a2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    60a6:	2300      	movs	r3, #0
    60a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    60aa:	2303      	movs	r3, #3
    60ac:	2b00      	cmp	r3, #0
    60ae:	d007      	beq.n	60c0 <mem_manage_fault+0x1dc>
    60b0:	4b4e      	ldr	r3, [pc, #312]	; (61ec <mem_manage_fault+0x308>)
    60b2:	681b      	ldr	r3, [r3, #0]
    60b4:	4618      	mov	r0, r3
    60b6:	f7ff ff05 	bl	5ec4 <log_const_source_id>
    60ba:	4603      	mov	r3, r0
    60bc:	b29b      	uxth	r3, r3
    60be:	e000      	b.n	60c2 <mem_manage_fault+0x1de>
    60c0:	2300      	movs	r3, #0
    60c2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
    60c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    60ca:	2201      	movs	r2, #1
    60cc:	f362 0302 	bfi	r3, r2, #0, #3
    60d0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    60d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    60d8:	f36f 03c5 	bfc	r3, #3, #3
    60dc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    60e0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
    60e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    60e8:	b29a      	uxth	r2, r3
    60ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    60ec:	f362 138f 	bfi	r3, r2, #6, #10
    60f0:	853b      	strh	r3, [r7, #40]	; 0x28
    60f2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
    60f6:	2b00      	cmp	r3, #0
    60f8:	d004      	beq.n	6104 <mem_manage_fault+0x220>
    60fa:	4941      	ldr	r1, [pc, #260]	; (6200 <mem_manage_fault+0x31c>)
    60fc:	8d38      	ldrh	r0, [r7, #40]	; 0x28
    60fe:	f7fc fdbd 	bl	2c7c <log_from_user>
    6102:	e005      	b.n	6110 <mem_manage_fault+0x22c>
    6104:	8d39      	ldrh	r1, [r7, #40]	; 0x28
    6106:	483e      	ldr	r0, [pc, #248]	; (6200 <mem_manage_fault+0x31c>)
    6108:	f00a feb1 	bl	10e6e <log_0>
    610c:	e000      	b.n	6110 <mem_manage_fault+0x22c>
    610e:	bf00      	nop
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    6110:	4b38      	ldr	r3, [pc, #224]	; (61f4 <mem_manage_fault+0x310>)
    6112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6114:	657b      	str	r3, [r7, #84]	; 0x54

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    6116:	4b37      	ldr	r3, [pc, #220]	; (61f4 <mem_manage_fault+0x310>)
    6118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    611a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    611e:	2b00      	cmp	r3, #0
    6120:	d049      	beq.n	61b6 <mem_manage_fault+0x2d2>
			mmfar = temp;
    6122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6124:	66bb      	str	r3, [r7, #104]	; 0x68
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    6126:	2303      	movs	r3, #3
    6128:	2b00      	cmp	r3, #0
    612a:	d03a      	beq.n	61a2 <mem_manage_fault+0x2be>
    612c:	f00c fb50 	bl	127d0 <k_is_user_context>
    6130:	4603      	mov	r3, r0
    6132:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    6136:	2300      	movs	r3, #0
    6138:	627b      	str	r3, [r7, #36]	; 0x24
    613a:	2303      	movs	r3, #3
    613c:	2b00      	cmp	r3, #0
    613e:	d007      	beq.n	6150 <mem_manage_fault+0x26c>
    6140:	4b2a      	ldr	r3, [pc, #168]	; (61ec <mem_manage_fault+0x308>)
    6142:	681b      	ldr	r3, [r3, #0]
    6144:	4618      	mov	r0, r3
    6146:	f7ff febd 	bl	5ec4 <log_const_source_id>
    614a:	4603      	mov	r3, r0
    614c:	b29b      	uxth	r3, r3
    614e:	e000      	b.n	6152 <mem_manage_fault+0x26e>
    6150:	2300      	movs	r3, #0
    6152:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    6156:	f897 3020 	ldrb.w	r3, [r7, #32]
    615a:	2201      	movs	r2, #1
    615c:	f362 0302 	bfi	r3, r2, #0, #3
    6160:	f887 3020 	strb.w	r3, [r7, #32]
    6164:	f897 3020 	ldrb.w	r3, [r7, #32]
    6168:	f36f 03c5 	bfc	r3, #3, #3
    616c:	f887 3020 	strb.w	r3, [r7, #32]
    6170:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
    6174:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6178:	b29a      	uxth	r2, r3
    617a:	8c3b      	ldrh	r3, [r7, #32]
    617c:	f362 138f 	bfi	r3, r2, #6, #10
    6180:	843b      	strh	r3, [r7, #32]
    6182:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
    6186:	2b00      	cmp	r3, #0
    6188:	d005      	beq.n	6196 <mem_manage_fault+0x2b2>
    618a:	6eba      	ldr	r2, [r7, #104]	; 0x68
    618c:	491d      	ldr	r1, [pc, #116]	; (6204 <mem_manage_fault+0x320>)
    618e:	8c38      	ldrh	r0, [r7, #32]
    6190:	f7fc fd74 	bl	2c7c <log_from_user>
    6194:	e006      	b.n	61a4 <mem_manage_fault+0x2c0>
    6196:	8c3a      	ldrh	r2, [r7, #32]
    6198:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    619a:	481a      	ldr	r0, [pc, #104]	; (6204 <mem_manage_fault+0x320>)
    619c:	f00a fe7c 	bl	10e98 <log_1>
    61a0:	e000      	b.n	61a4 <mem_manage_fault+0x2c0>
    61a2:	bf00      	nop
			if (from_hard_fault != 0) {
    61a4:	68bb      	ldr	r3, [r7, #8]
    61a6:	2b00      	cmp	r3, #0
    61a8:	d005      	beq.n	61b6 <mem_manage_fault+0x2d2>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    61aa:	4b12      	ldr	r3, [pc, #72]	; (61f4 <mem_manage_fault+0x310>)
    61ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    61ae:	4a11      	ldr	r2, [pc, #68]	; (61f4 <mem_manage_fault+0x310>)
    61b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    61b4:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    61b6:	4b0f      	ldr	r3, [pc, #60]	; (61f4 <mem_manage_fault+0x310>)
    61b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    61ba:	f003 0301 	and.w	r3, r3, #1
    61be:	2b00      	cmp	r3, #0
    61c0:	d046      	beq.n	6250 <mem_manage_fault+0x36c>
		PR_FAULT_INFO("  Instruction Access Violation");
    61c2:	2303      	movs	r3, #3
    61c4:	2b00      	cmp	r3, #0
    61c6:	d042      	beq.n	624e <mem_manage_fault+0x36a>
    61c8:	f00c fb02 	bl	127d0 <k_is_user_context>
    61cc:	4603      	mov	r3, r0
    61ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    61d2:	2300      	movs	r3, #0
    61d4:	61fb      	str	r3, [r7, #28]
    61d6:	2303      	movs	r3, #3
    61d8:	2b00      	cmp	r3, #0
    61da:	d015      	beq.n	6208 <mem_manage_fault+0x324>
    61dc:	4b03      	ldr	r3, [pc, #12]	; (61ec <mem_manage_fault+0x308>)
    61de:	681b      	ldr	r3, [r3, #0]
    61e0:	4618      	mov	r0, r3
    61e2:	f7ff fe6f 	bl	5ec4 <log_const_source_id>
    61e6:	4603      	mov	r3, r0
    61e8:	b29b      	uxth	r3, r3
    61ea:	e00e      	b.n	620a <mem_manage_fault+0x326>
    61ec:	20000110 	.word	0x20000110
    61f0:	00018200 	.word	0x00018200
    61f4:	e000ed00 	.word	0xe000ed00
    61f8:	00018218 	.word	0x00018218
    61fc:	0001824c 	.word	0x0001824c
    6200:	00018260 	.word	0x00018260
    6204:	00018278 	.word	0x00018278
    6208:	2300      	movs	r3, #0
    620a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    620e:	7e3b      	ldrb	r3, [r7, #24]
    6210:	2201      	movs	r2, #1
    6212:	f362 0302 	bfi	r3, r2, #0, #3
    6216:	763b      	strb	r3, [r7, #24]
    6218:	7e3b      	ldrb	r3, [r7, #24]
    621a:	f36f 03c5 	bfc	r3, #3, #3
    621e:	763b      	strb	r3, [r7, #24]
    6220:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
    6224:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6228:	b29a      	uxth	r2, r3
    622a:	8b3b      	ldrh	r3, [r7, #24]
    622c:	f362 138f 	bfi	r3, r2, #6, #10
    6230:	833b      	strh	r3, [r7, #24]
    6232:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
    6236:	2b00      	cmp	r3, #0
    6238:	d004      	beq.n	6244 <mem_manage_fault+0x360>
    623a:	493f      	ldr	r1, [pc, #252]	; (6338 <mem_manage_fault+0x454>)
    623c:	8b38      	ldrh	r0, [r7, #24]
    623e:	f7fc fd1d 	bl	2c7c <log_from_user>
    6242:	e005      	b.n	6250 <mem_manage_fault+0x36c>
    6244:	8b39      	ldrh	r1, [r7, #24]
    6246:	483c      	ldr	r0, [pc, #240]	; (6338 <mem_manage_fault+0x454>)
    6248:	f00a fe11 	bl	10e6e <log_0>
    624c:	e000      	b.n	6250 <mem_manage_fault+0x36c>
    624e:	bf00      	nop
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    6250:	4b3a      	ldr	r3, [pc, #232]	; (633c <mem_manage_fault+0x458>)
    6252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6254:	f003 0320 	and.w	r3, r3, #32
    6258:	2b00      	cmp	r3, #0
    625a:	d038      	beq.n	62ce <mem_manage_fault+0x3ea>
		PR_FAULT_INFO(
    625c:	2303      	movs	r3, #3
    625e:	2b00      	cmp	r3, #0
    6260:	d034      	beq.n	62cc <mem_manage_fault+0x3e8>
    6262:	f00c fab5 	bl	127d0 <k_is_user_context>
    6266:	4603      	mov	r3, r0
    6268:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    626c:	2300      	movs	r3, #0
    626e:	617b      	str	r3, [r7, #20]
    6270:	2303      	movs	r3, #3
    6272:	2b00      	cmp	r3, #0
    6274:	d007      	beq.n	6286 <mem_manage_fault+0x3a2>
    6276:	4b32      	ldr	r3, [pc, #200]	; (6340 <mem_manage_fault+0x45c>)
    6278:	681b      	ldr	r3, [r3, #0]
    627a:	4618      	mov	r0, r3
    627c:	f7ff fe22 	bl	5ec4 <log_const_source_id>
    6280:	4603      	mov	r3, r0
    6282:	b29b      	uxth	r3, r3
    6284:	e000      	b.n	6288 <mem_manage_fault+0x3a4>
    6286:	2300      	movs	r3, #0
    6288:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    628c:	7c3b      	ldrb	r3, [r7, #16]
    628e:	2201      	movs	r2, #1
    6290:	f362 0302 	bfi	r3, r2, #0, #3
    6294:	743b      	strb	r3, [r7, #16]
    6296:	7c3b      	ldrb	r3, [r7, #16]
    6298:	f36f 03c5 	bfc	r3, #3, #3
    629c:	743b      	strb	r3, [r7, #16]
    629e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
    62a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    62a6:	b29a      	uxth	r2, r3
    62a8:	8a3b      	ldrh	r3, [r7, #16]
    62aa:	f362 138f 	bfi	r3, r2, #6, #10
    62ae:	823b      	strh	r3, [r7, #16]
    62b0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
    62b4:	2b00      	cmp	r3, #0
    62b6:	d004      	beq.n	62c2 <mem_manage_fault+0x3de>
    62b8:	4922      	ldr	r1, [pc, #136]	; (6344 <mem_manage_fault+0x460>)
    62ba:	8a38      	ldrh	r0, [r7, #16]
    62bc:	f7fc fcde 	bl	2c7c <log_from_user>
    62c0:	e005      	b.n	62ce <mem_manage_fault+0x3ea>
    62c2:	8a39      	ldrh	r1, [r7, #16]
    62c4:	481f      	ldr	r0, [pc, #124]	; (6344 <mem_manage_fault+0x460>)
    62c6:	f00a fdd2 	bl	10e6e <log_0>
    62ca:	e000      	b.n	62ce <mem_manage_fault+0x3ea>
    62cc:	bf00      	nop
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    62ce:	4b1b      	ldr	r3, [pc, #108]	; (633c <mem_manage_fault+0x458>)
    62d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62d2:	f003 0310 	and.w	r3, r3, #16
    62d6:	2b00      	cmp	r3, #0
    62d8:	d105      	bne.n	62e6 <mem_manage_fault+0x402>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    62da:	4b18      	ldr	r3, [pc, #96]	; (633c <mem_manage_fault+0x458>)
    62dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62de:	f003 0302 	and.w	r3, r3, #2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    62e2:	2b00      	cmp	r3, #0
    62e4:	d014      	beq.n	6310 <mem_manage_fault+0x42c>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    62e6:	4b15      	ldr	r3, [pc, #84]	; (633c <mem_manage_fault+0x458>)
    62e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    62ea:	f003 0310 	and.w	r3, r3, #16
    62ee:	2b00      	cmp	r3, #0
    62f0:	d00e      	beq.n	6310 <mem_manage_fault+0x42c>
    62f2:	f240 134f 	movw	r3, #335	; 0x14f
    62f6:	4a14      	ldr	r2, [pc, #80]	; (6348 <mem_manage_fault+0x464>)
    62f8:	4914      	ldr	r1, [pc, #80]	; (634c <mem_manage_fault+0x468>)
    62fa:	4815      	ldr	r0, [pc, #84]	; (6350 <mem_manage_fault+0x46c>)
    62fc:	f009 fcba 	bl	fc74 <printk>
    6300:	4814      	ldr	r0, [pc, #80]	; (6354 <mem_manage_fault+0x470>)
    6302:	f009 fcb7 	bl	fc74 <printk>
    6306:	f240 114f 	movw	r1, #335	; 0x14f
    630a:	480f      	ldr	r0, [pc, #60]	; (6348 <mem_manage_fault+0x464>)
    630c:	f00a f90e 	bl	1052c <assert_post_action>
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    6310:	4b0a      	ldr	r3, [pc, #40]	; (633c <mem_manage_fault+0x458>)
    6312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6314:	4a09      	ldr	r2, [pc, #36]	; (633c <mem_manage_fault+0x458>)
    6316:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    631a:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    631c:	2101      	movs	r1, #1
    631e:	68f8      	ldr	r0, [r7, #12]
    6320:	f00c fa67 	bl	127f2 <memory_fault_recoverable>
    6324:	4603      	mov	r3, r0
    6326:	461a      	mov	r2, r3
    6328:	687b      	ldr	r3, [r7, #4]
    632a:	701a      	strb	r2, [r3, #0]

	return reason;
    632c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
    632e:	4618      	mov	r0, r3
    6330:	3770      	adds	r7, #112	; 0x70
    6332:	46bd      	mov	sp, r7
    6334:	bd80      	pop	{r7, pc}
    6336:	bf00      	nop
    6338:	00018290 	.word	0x00018290
    633c:	e000ed00 	.word	0xe000ed00
    6340:	20000110 	.word	0x20000110
    6344:	000182b0 	.word	0x000182b0
    6348:	000182e0 	.word	0x000182e0
    634c:	0001831c 	.word	0x0001831c
    6350:	00018368 	.word	0x00018368
    6354:	00018388 	.word	0x00018388

00006358 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    6358:	b580      	push	{r7, lr}
    635a:	b09e      	sub	sp, #120	; 0x78
    635c:	af00      	add	r7, sp, #0
    635e:	60f8      	str	r0, [r7, #12]
    6360:	60b9      	str	r1, [r7, #8]
    6362:	607a      	str	r2, [r7, #4]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6364:	2300      	movs	r3, #0
    6366:	677b      	str	r3, [r7, #116]	; 0x74

	PR_FAULT_INFO("***** BUS FAULT *****");
    6368:	2303      	movs	r3, #3
    636a:	2b00      	cmp	r3, #0
    636c:	d03c      	beq.n	63e8 <bus_fault+0x90>
    636e:	f00c fa2f 	bl	127d0 <k_is_user_context>
    6372:	4603      	mov	r3, r0
    6374:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    6378:	2300      	movs	r3, #0
    637a:	64fb      	str	r3, [r7, #76]	; 0x4c
    637c:	2303      	movs	r3, #3
    637e:	2b00      	cmp	r3, #0
    6380:	d007      	beq.n	6392 <bus_fault+0x3a>
    6382:	4bb7      	ldr	r3, [pc, #732]	; (6660 <bus_fault+0x308>)
    6384:	681b      	ldr	r3, [r3, #0]
    6386:	4618      	mov	r0, r3
    6388:	f7ff fd9c 	bl	5ec4 <log_const_source_id>
    638c:	4603      	mov	r3, r0
    638e:	b29b      	uxth	r3, r3
    6390:	e000      	b.n	6394 <bus_fault+0x3c>
    6392:	2300      	movs	r3, #0
    6394:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
    6398:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
    639c:	2201      	movs	r2, #1
    639e:	f362 0302 	bfi	r3, r2, #0, #3
    63a2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    63a6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
    63aa:	f36f 03c5 	bfc	r3, #3, #3
    63ae:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
    63b2:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
    63b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    63ba:	b29a      	uxth	r2, r3
    63bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
    63c0:	f362 138f 	bfi	r3, r2, #6, #10
    63c4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    63c8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
    63cc:	2b00      	cmp	r3, #0
    63ce:	d005      	beq.n	63dc <bus_fault+0x84>
    63d0:	49a4      	ldr	r1, [pc, #656]	; (6664 <bus_fault+0x30c>)
    63d2:	f8b7 0048 	ldrh.w	r0, [r7, #72]	; 0x48
    63d6:	f7fc fc51 	bl	2c7c <log_from_user>
    63da:	e006      	b.n	63ea <bus_fault+0x92>
    63dc:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
    63e0:	48a0      	ldr	r0, [pc, #640]	; (6664 <bus_fault+0x30c>)
    63e2:	f00a fd44 	bl	10e6e <log_0>
    63e6:	e000      	b.n	63ea <bus_fault+0x92>
    63e8:	bf00      	nop

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    63ea:	4b9f      	ldr	r3, [pc, #636]	; (6668 <bus_fault+0x310>)
    63ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    63ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    63f2:	2b00      	cmp	r3, #0
    63f4:	d040      	beq.n	6478 <bus_fault+0x120>
		PR_FAULT_INFO("  Stacking error");
    63f6:	2303      	movs	r3, #3
    63f8:	2b00      	cmp	r3, #0
    63fa:	d03c      	beq.n	6476 <bus_fault+0x11e>
    63fc:	f00c f9e8 	bl	127d0 <k_is_user_context>
    6400:	4603      	mov	r3, r0
    6402:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    6406:	2300      	movs	r3, #0
    6408:	647b      	str	r3, [r7, #68]	; 0x44
    640a:	2303      	movs	r3, #3
    640c:	2b00      	cmp	r3, #0
    640e:	d007      	beq.n	6420 <bus_fault+0xc8>
    6410:	4b93      	ldr	r3, [pc, #588]	; (6660 <bus_fault+0x308>)
    6412:	681b      	ldr	r3, [r3, #0]
    6414:	4618      	mov	r0, r3
    6416:	f7ff fd55 	bl	5ec4 <log_const_source_id>
    641a:	4603      	mov	r3, r0
    641c:	b29b      	uxth	r3, r3
    641e:	e000      	b.n	6422 <bus_fault+0xca>
    6420:	2300      	movs	r3, #0
    6422:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    6426:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    642a:	2201      	movs	r2, #1
    642c:	f362 0302 	bfi	r3, r2, #0, #3
    6430:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    6434:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    6438:	f36f 03c5 	bfc	r3, #3, #3
    643c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    6440:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
    6444:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6448:	b29a      	uxth	r2, r3
    644a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
    644e:	f362 138f 	bfi	r3, r2, #6, #10
    6452:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    6456:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
    645a:	2b00      	cmp	r3, #0
    645c:	d005      	beq.n	646a <bus_fault+0x112>
    645e:	4983      	ldr	r1, [pc, #524]	; (666c <bus_fault+0x314>)
    6460:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
    6464:	f7fc fc0a 	bl	2c7c <log_from_user>
    6468:	e006      	b.n	6478 <bus_fault+0x120>
    646a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
    646e:	487f      	ldr	r0, [pc, #508]	; (666c <bus_fault+0x314>)
    6470:	f00a fcfd 	bl	10e6e <log_0>
    6474:	e000      	b.n	6478 <bus_fault+0x120>
    6476:	bf00      	nop
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    6478:	4b7b      	ldr	r3, [pc, #492]	; (6668 <bus_fault+0x310>)
    647a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    647c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    6480:	2b00      	cmp	r3, #0
    6482:	d03c      	beq.n	64fe <bus_fault+0x1a6>
		PR_FAULT_INFO("  Unstacking error");
    6484:	2303      	movs	r3, #3
    6486:	2b00      	cmp	r3, #0
    6488:	d038      	beq.n	64fc <bus_fault+0x1a4>
    648a:	f00c f9a1 	bl	127d0 <k_is_user_context>
    648e:	4603      	mov	r3, r0
    6490:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    6494:	2300      	movs	r3, #0
    6496:	63fb      	str	r3, [r7, #60]	; 0x3c
    6498:	2303      	movs	r3, #3
    649a:	2b00      	cmp	r3, #0
    649c:	d007      	beq.n	64ae <bus_fault+0x156>
    649e:	4b70      	ldr	r3, [pc, #448]	; (6660 <bus_fault+0x308>)
    64a0:	681b      	ldr	r3, [r3, #0]
    64a2:	4618      	mov	r0, r3
    64a4:	f7ff fd0e 	bl	5ec4 <log_const_source_id>
    64a8:	4603      	mov	r3, r0
    64aa:	b29b      	uxth	r3, r3
    64ac:	e000      	b.n	64b0 <bus_fault+0x158>
    64ae:	2300      	movs	r3, #0
    64b0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    64b4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    64b8:	2201      	movs	r2, #1
    64ba:	f362 0302 	bfi	r3, r2, #0, #3
    64be:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    64c2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    64c6:	f36f 03c5 	bfc	r3, #3, #3
    64ca:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    64ce:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
    64d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    64d6:	b29a      	uxth	r2, r3
    64d8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    64da:	f362 138f 	bfi	r3, r2, #6, #10
    64de:	873b      	strh	r3, [r7, #56]	; 0x38
    64e0:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
    64e4:	2b00      	cmp	r3, #0
    64e6:	d004      	beq.n	64f2 <bus_fault+0x19a>
    64e8:	4961      	ldr	r1, [pc, #388]	; (6670 <bus_fault+0x318>)
    64ea:	8f38      	ldrh	r0, [r7, #56]	; 0x38
    64ec:	f7fc fbc6 	bl	2c7c <log_from_user>
    64f0:	e005      	b.n	64fe <bus_fault+0x1a6>
    64f2:	8f39      	ldrh	r1, [r7, #56]	; 0x38
    64f4:	485e      	ldr	r0, [pc, #376]	; (6670 <bus_fault+0x318>)
    64f6:	f00a fcba 	bl	10e6e <log_0>
    64fa:	e000      	b.n	64fe <bus_fault+0x1a6>
    64fc:	bf00      	nop
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    64fe:	4b5a      	ldr	r3, [pc, #360]	; (6668 <bus_fault+0x310>)
    6500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6502:	f403 7300 	and.w	r3, r3, #512	; 0x200
    6506:	2b00      	cmp	r3, #0
    6508:	f000 808e 	beq.w	6628 <bus_fault+0x2d0>
		PR_FAULT_INFO("  Precise data bus error");
    650c:	2303      	movs	r3, #3
    650e:	2b00      	cmp	r3, #0
    6510:	d038      	beq.n	6584 <bus_fault+0x22c>
    6512:	f00c f95d 	bl	127d0 <k_is_user_context>
    6516:	4603      	mov	r3, r0
    6518:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    651c:	2300      	movs	r3, #0
    651e:	637b      	str	r3, [r7, #52]	; 0x34
    6520:	2303      	movs	r3, #3
    6522:	2b00      	cmp	r3, #0
    6524:	d007      	beq.n	6536 <bus_fault+0x1de>
    6526:	4b4e      	ldr	r3, [pc, #312]	; (6660 <bus_fault+0x308>)
    6528:	681b      	ldr	r3, [r3, #0]
    652a:	4618      	mov	r0, r3
    652c:	f7ff fcca 	bl	5ec4 <log_const_source_id>
    6530:	4603      	mov	r3, r0
    6532:	b29b      	uxth	r3, r3
    6534:	e000      	b.n	6538 <bus_fault+0x1e0>
    6536:	2300      	movs	r3, #0
    6538:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    653c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    6540:	2201      	movs	r2, #1
    6542:	f362 0302 	bfi	r3, r2, #0, #3
    6546:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    654a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    654e:	f36f 03c5 	bfc	r3, #3, #3
    6552:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    6556:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
    655a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    655e:	b29a      	uxth	r2, r3
    6560:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    6562:	f362 138f 	bfi	r3, r2, #6, #10
    6566:	863b      	strh	r3, [r7, #48]	; 0x30
    6568:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    656c:	2b00      	cmp	r3, #0
    656e:	d004      	beq.n	657a <bus_fault+0x222>
    6570:	4940      	ldr	r1, [pc, #256]	; (6674 <bus_fault+0x31c>)
    6572:	8e38      	ldrh	r0, [r7, #48]	; 0x30
    6574:	f7fc fb82 	bl	2c7c <log_from_user>
    6578:	e005      	b.n	6586 <bus_fault+0x22e>
    657a:	8e39      	ldrh	r1, [r7, #48]	; 0x30
    657c:	483d      	ldr	r0, [pc, #244]	; (6674 <bus_fault+0x31c>)
    657e:	f00a fc76 	bl	10e6e <log_0>
    6582:	e000      	b.n	6586 <bus_fault+0x22e>
    6584:	bf00      	nop
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    6586:	4b38      	ldr	r3, [pc, #224]	; (6668 <bus_fault+0x310>)
    6588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    658a:	663b      	str	r3, [r7, #96]	; 0x60

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    658c:	4b36      	ldr	r3, [pc, #216]	; (6668 <bus_fault+0x310>)
    658e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    6594:	2b00      	cmp	r3, #0
    6596:	d047      	beq.n	6628 <bus_fault+0x2d0>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    6598:	2303      	movs	r3, #3
    659a:	2b00      	cmp	r3, #0
    659c:	d03a      	beq.n	6614 <bus_fault+0x2bc>
    659e:	f00c f917 	bl	127d0 <k_is_user_context>
    65a2:	4603      	mov	r3, r0
    65a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    65a8:	2300      	movs	r3, #0
    65aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    65ac:	2303      	movs	r3, #3
    65ae:	2b00      	cmp	r3, #0
    65b0:	d007      	beq.n	65c2 <bus_fault+0x26a>
    65b2:	4b2b      	ldr	r3, [pc, #172]	; (6660 <bus_fault+0x308>)
    65b4:	681b      	ldr	r3, [r3, #0]
    65b6:	4618      	mov	r0, r3
    65b8:	f7ff fc84 	bl	5ec4 <log_const_source_id>
    65bc:	4603      	mov	r3, r0
    65be:	b29b      	uxth	r3, r3
    65c0:	e000      	b.n	65c4 <bus_fault+0x26c>
    65c2:	2300      	movs	r3, #0
    65c4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    65c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    65cc:	2201      	movs	r2, #1
    65ce:	f362 0302 	bfi	r3, r2, #0, #3
    65d2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    65d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    65da:	f36f 03c5 	bfc	r3, #3, #3
    65de:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    65e2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
    65e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    65ea:	b29a      	uxth	r2, r3
    65ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    65ee:	f362 138f 	bfi	r3, r2, #6, #10
    65f2:	853b      	strh	r3, [r7, #40]	; 0x28
    65f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    65f8:	2b00      	cmp	r3, #0
    65fa:	d005      	beq.n	6608 <bus_fault+0x2b0>
    65fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    65fe:	491e      	ldr	r1, [pc, #120]	; (6678 <bus_fault+0x320>)
    6600:	8d38      	ldrh	r0, [r7, #40]	; 0x28
    6602:	f7fc fb3b 	bl	2c7c <log_from_user>
    6606:	e006      	b.n	6616 <bus_fault+0x2be>
    6608:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
    660a:	6e39      	ldr	r1, [r7, #96]	; 0x60
    660c:	481a      	ldr	r0, [pc, #104]	; (6678 <bus_fault+0x320>)
    660e:	f00a fc43 	bl	10e98 <log_1>
    6612:	e000      	b.n	6616 <bus_fault+0x2be>
    6614:	bf00      	nop
			if (from_hard_fault != 0) {
    6616:	68bb      	ldr	r3, [r7, #8]
    6618:	2b00      	cmp	r3, #0
    661a:	d005      	beq.n	6628 <bus_fault+0x2d0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    661c:	4b12      	ldr	r3, [pc, #72]	; (6668 <bus_fault+0x310>)
    661e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6620:	4a11      	ldr	r2, [pc, #68]	; (6668 <bus_fault+0x310>)
    6622:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    6626:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    6628:	4b0f      	ldr	r3, [pc, #60]	; (6668 <bus_fault+0x310>)
    662a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    662c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    6630:	2b00      	cmp	r3, #0
    6632:	d04b      	beq.n	66cc <bus_fault+0x374>
		PR_FAULT_INFO("  Imprecise data bus error");
    6634:	2303      	movs	r3, #3
    6636:	2b00      	cmp	r3, #0
    6638:	d047      	beq.n	66ca <bus_fault+0x372>
    663a:	f00c f8c9 	bl	127d0 <k_is_user_context>
    663e:	4603      	mov	r3, r0
    6640:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    6644:	2300      	movs	r3, #0
    6646:	627b      	str	r3, [r7, #36]	; 0x24
    6648:	2303      	movs	r3, #3
    664a:	2b00      	cmp	r3, #0
    664c:	d016      	beq.n	667c <bus_fault+0x324>
    664e:	4b04      	ldr	r3, [pc, #16]	; (6660 <bus_fault+0x308>)
    6650:	681b      	ldr	r3, [r3, #0]
    6652:	4618      	mov	r0, r3
    6654:	f7ff fc36 	bl	5ec4 <log_const_source_id>
    6658:	4603      	mov	r3, r0
    665a:	b29b      	uxth	r3, r3
    665c:	e00f      	b.n	667e <bus_fault+0x326>
    665e:	bf00      	nop
    6660:	20000110 	.word	0x20000110
    6664:	000183ec 	.word	0x000183ec
    6668:	e000ed00 	.word	0xe000ed00
    666c:	00018404 	.word	0x00018404
    6670:	0001824c 	.word	0x0001824c
    6674:	00018418 	.word	0x00018418
    6678:	00018434 	.word	0x00018434
    667c:	2300      	movs	r3, #0
    667e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
    6682:	f897 3020 	ldrb.w	r3, [r7, #32]
    6686:	2201      	movs	r2, #1
    6688:	f362 0302 	bfi	r3, r2, #0, #3
    668c:	f887 3020 	strb.w	r3, [r7, #32]
    6690:	f897 3020 	ldrb.w	r3, [r7, #32]
    6694:	f36f 03c5 	bfc	r3, #3, #3
    6698:	f887 3020 	strb.w	r3, [r7, #32]
    669c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
    66a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    66a4:	b29a      	uxth	r2, r3
    66a6:	8c3b      	ldrh	r3, [r7, #32]
    66a8:	f362 138f 	bfi	r3, r2, #6, #10
    66ac:	843b      	strh	r3, [r7, #32]
    66ae:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
    66b2:	2b00      	cmp	r3, #0
    66b4:	d004      	beq.n	66c0 <bus_fault+0x368>
    66b6:	494e      	ldr	r1, [pc, #312]	; (67f0 <bus_fault+0x498>)
    66b8:	8c38      	ldrh	r0, [r7, #32]
    66ba:	f7fc fadf 	bl	2c7c <log_from_user>
    66be:	e005      	b.n	66cc <bus_fault+0x374>
    66c0:	8c39      	ldrh	r1, [r7, #32]
    66c2:	484b      	ldr	r0, [pc, #300]	; (67f0 <bus_fault+0x498>)
    66c4:	f00a fbd3 	bl	10e6e <log_0>
    66c8:	e000      	b.n	66cc <bus_fault+0x374>
    66ca:	bf00      	nop
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    66cc:	4b49      	ldr	r3, [pc, #292]	; (67f4 <bus_fault+0x49c>)
    66ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
    66d4:	2b00      	cmp	r3, #0
    66d6:	d037      	beq.n	6748 <bus_fault+0x3f0>
		PR_FAULT_INFO("  Instruction bus error");
    66d8:	2303      	movs	r3, #3
    66da:	2b00      	cmp	r3, #0
    66dc:	d072      	beq.n	67c4 <bus_fault+0x46c>
    66de:	f00c f877 	bl	127d0 <k_is_user_context>
    66e2:	4603      	mov	r3, r0
    66e4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    66e8:	2300      	movs	r3, #0
    66ea:	61fb      	str	r3, [r7, #28]
    66ec:	2303      	movs	r3, #3
    66ee:	2b00      	cmp	r3, #0
    66f0:	d007      	beq.n	6702 <bus_fault+0x3aa>
    66f2:	4b41      	ldr	r3, [pc, #260]	; (67f8 <bus_fault+0x4a0>)
    66f4:	681b      	ldr	r3, [r3, #0]
    66f6:	4618      	mov	r0, r3
    66f8:	f7ff fbe4 	bl	5ec4 <log_const_source_id>
    66fc:	4603      	mov	r3, r0
    66fe:	b29b      	uxth	r3, r3
    6700:	e000      	b.n	6704 <bus_fault+0x3ac>
    6702:	2300      	movs	r3, #0
    6704:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    6708:	7e3b      	ldrb	r3, [r7, #24]
    670a:	2201      	movs	r2, #1
    670c:	f362 0302 	bfi	r3, r2, #0, #3
    6710:	763b      	strb	r3, [r7, #24]
    6712:	7e3b      	ldrb	r3, [r7, #24]
    6714:	f36f 03c5 	bfc	r3, #3, #3
    6718:	763b      	strb	r3, [r7, #24]
    671a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
    671e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6722:	b29a      	uxth	r2, r3
    6724:	8b3b      	ldrh	r3, [r7, #24]
    6726:	f362 138f 	bfi	r3, r2, #6, #10
    672a:	833b      	strh	r3, [r7, #24]
    672c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
    6730:	2b00      	cmp	r3, #0
    6732:	d004      	beq.n	673e <bus_fault+0x3e6>
    6734:	4931      	ldr	r1, [pc, #196]	; (67fc <bus_fault+0x4a4>)
    6736:	8b38      	ldrh	r0, [r7, #24]
    6738:	f7fc faa0 	bl	2c7c <log_from_user>
    673c:	e045      	b.n	67ca <bus_fault+0x472>
    673e:	8b39      	ldrh	r1, [r7, #24]
    6740:	482e      	ldr	r0, [pc, #184]	; (67fc <bus_fault+0x4a4>)
    6742:	f00a fb94 	bl	10e6e <log_0>
    6746:	e040      	b.n	67ca <bus_fault+0x472>
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    6748:	4b2a      	ldr	r3, [pc, #168]	; (67f4 <bus_fault+0x49c>)
    674a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    674c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    6750:	2b00      	cmp	r3, #0
    6752:	d03a      	beq.n	67ca <bus_fault+0x472>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6754:	2303      	movs	r3, #3
    6756:	2b00      	cmp	r3, #0
    6758:	d036      	beq.n	67c8 <bus_fault+0x470>
    675a:	f00c f839 	bl	127d0 <k_is_user_context>
    675e:	4603      	mov	r3, r0
    6760:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    6764:	2300      	movs	r3, #0
    6766:	617b      	str	r3, [r7, #20]
    6768:	2303      	movs	r3, #3
    676a:	2b00      	cmp	r3, #0
    676c:	d007      	beq.n	677e <bus_fault+0x426>
    676e:	4b22      	ldr	r3, [pc, #136]	; (67f8 <bus_fault+0x4a0>)
    6770:	681b      	ldr	r3, [r3, #0]
    6772:	4618      	mov	r0, r3
    6774:	f7ff fba6 	bl	5ec4 <log_const_source_id>
    6778:	4603      	mov	r3, r0
    677a:	b29b      	uxth	r3, r3
    677c:	e000      	b.n	6780 <bus_fault+0x428>
    677e:	2300      	movs	r3, #0
    6780:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    6784:	7c3b      	ldrb	r3, [r7, #16]
    6786:	2201      	movs	r2, #1
    6788:	f362 0302 	bfi	r3, r2, #0, #3
    678c:	743b      	strb	r3, [r7, #16]
    678e:	7c3b      	ldrb	r3, [r7, #16]
    6790:	f36f 03c5 	bfc	r3, #3, #3
    6794:	743b      	strb	r3, [r7, #16]
    6796:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
    679a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    679e:	b29a      	uxth	r2, r3
    67a0:	8a3b      	ldrh	r3, [r7, #16]
    67a2:	f362 138f 	bfi	r3, r2, #6, #10
    67a6:	823b      	strh	r3, [r7, #16]
    67a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    67ac:	2b00      	cmp	r3, #0
    67ae:	d004      	beq.n	67ba <bus_fault+0x462>
    67b0:	4913      	ldr	r1, [pc, #76]	; (6800 <bus_fault+0x4a8>)
    67b2:	8a38      	ldrh	r0, [r7, #16]
    67b4:	f7fc fa62 	bl	2c7c <log_from_user>
    67b8:	e007      	b.n	67ca <bus_fault+0x472>
    67ba:	8a39      	ldrh	r1, [r7, #16]
    67bc:	4810      	ldr	r0, [pc, #64]	; (6800 <bus_fault+0x4a8>)
    67be:	f00a fb56 	bl	10e6e <log_0>
    67c2:	e002      	b.n	67ca <bus_fault+0x472>
		PR_FAULT_INFO("  Instruction bus error");
    67c4:	bf00      	nop
    67c6:	e000      	b.n	67ca <bus_fault+0x472>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    67c8:	bf00      	nop
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    67ca:	4b0a      	ldr	r3, [pc, #40]	; (67f4 <bus_fault+0x49c>)
    67cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    67ce:	4a09      	ldr	r2, [pc, #36]	; (67f4 <bus_fault+0x49c>)
    67d0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    67d4:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    67d6:	2101      	movs	r1, #1
    67d8:	68f8      	ldr	r0, [r7, #12]
    67da:	f00c f80a 	bl	127f2 <memory_fault_recoverable>
    67de:	4603      	mov	r3, r0
    67e0:	461a      	mov	r2, r3
    67e2:	687b      	ldr	r3, [r7, #4]
    67e4:	701a      	strb	r2, [r3, #0]

	return reason;
    67e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
    67e8:	4618      	mov	r0, r3
    67ea:	3778      	adds	r7, #120	; 0x78
    67ec:	46bd      	mov	sp, r7
    67ee:	bd80      	pop	{r7, pc}
    67f0:	0001844c 	.word	0x0001844c
    67f4:	e000ed00 	.word	0xe000ed00
    67f8:	20000110 	.word	0x20000110
    67fc:	00018468 	.word	0x00018468
    6800:	000182b0 	.word	0x000182b0

00006804 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    6804:	b580      	push	{r7, lr}
    6806:	b09c      	sub	sp, #112	; 0x70
    6808:	af00      	add	r7, sp, #0
    680a:	6078      	str	r0, [r7, #4]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    680c:	2300      	movs	r3, #0
    680e:	66fb      	str	r3, [r7, #108]	; 0x6c

	PR_FAULT_INFO("***** USAGE FAULT *****");
    6810:	2303      	movs	r3, #3
    6812:	2b00      	cmp	r3, #0
    6814:	d03c      	beq.n	6890 <usage_fault+0x8c>
    6816:	f00b ffdb 	bl	127d0 <k_is_user_context>
    681a:	4603      	mov	r3, r0
    681c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    6820:	2300      	movs	r3, #0
    6822:	64bb      	str	r3, [r7, #72]	; 0x48
    6824:	2303      	movs	r3, #3
    6826:	2b00      	cmp	r3, #0
    6828:	d007      	beq.n	683a <usage_fault+0x36>
    682a:	4bc0      	ldr	r3, [pc, #768]	; (6b2c <usage_fault+0x328>)
    682c:	681b      	ldr	r3, [r3, #0]
    682e:	4618      	mov	r0, r3
    6830:	f7ff fb48 	bl	5ec4 <log_const_source_id>
    6834:	4603      	mov	r3, r0
    6836:	b29b      	uxth	r3, r3
    6838:	e000      	b.n	683c <usage_fault+0x38>
    683a:	2300      	movs	r3, #0
    683c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    6840:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    6844:	2201      	movs	r2, #1
    6846:	f362 0302 	bfi	r3, r2, #0, #3
    684a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    684e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    6852:	f36f 03c5 	bfc	r3, #3, #3
    6856:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    685a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
    685e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6862:	b29a      	uxth	r2, r3
    6864:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
    6868:	f362 138f 	bfi	r3, r2, #6, #10
    686c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    6870:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
    6874:	2b00      	cmp	r3, #0
    6876:	d005      	beq.n	6884 <usage_fault+0x80>
    6878:	49ad      	ldr	r1, [pc, #692]	; (6b30 <usage_fault+0x32c>)
    687a:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
    687e:	f7fc f9fd 	bl	2c7c <log_from_user>
    6882:	e006      	b.n	6892 <usage_fault+0x8e>
    6884:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
    6888:	48a9      	ldr	r0, [pc, #676]	; (6b30 <usage_fault+0x32c>)
    688a:	f00a faf0 	bl	10e6e <log_0>
    688e:	e000      	b.n	6892 <usage_fault+0x8e>
    6890:	bf00      	nop

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6892:	4ba8      	ldr	r3, [pc, #672]	; (6b34 <usage_fault+0x330>)
    6894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    689a:	2b00      	cmp	r3, #0
    689c:	d03c      	beq.n	6918 <usage_fault+0x114>
		PR_FAULT_INFO("  Division by zero");
    689e:	2303      	movs	r3, #3
    68a0:	2b00      	cmp	r3, #0
    68a2:	d038      	beq.n	6916 <usage_fault+0x112>
    68a4:	f00b ff94 	bl	127d0 <k_is_user_context>
    68a8:	4603      	mov	r3, r0
    68aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    68ae:	2300      	movs	r3, #0
    68b0:	643b      	str	r3, [r7, #64]	; 0x40
    68b2:	2303      	movs	r3, #3
    68b4:	2b00      	cmp	r3, #0
    68b6:	d007      	beq.n	68c8 <usage_fault+0xc4>
    68b8:	4b9c      	ldr	r3, [pc, #624]	; (6b2c <usage_fault+0x328>)
    68ba:	681b      	ldr	r3, [r3, #0]
    68bc:	4618      	mov	r0, r3
    68be:	f7ff fb01 	bl	5ec4 <log_const_source_id>
    68c2:	4603      	mov	r3, r0
    68c4:	b29b      	uxth	r3, r3
    68c6:	e000      	b.n	68ca <usage_fault+0xc6>
    68c8:	2300      	movs	r3, #0
    68ca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    68ce:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    68d2:	2201      	movs	r2, #1
    68d4:	f362 0302 	bfi	r3, r2, #0, #3
    68d8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    68dc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    68e0:	f36f 03c5 	bfc	r3, #3, #3
    68e4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    68e8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
    68ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
    68f0:	b29a      	uxth	r2, r3
    68f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
    68f4:	f362 138f 	bfi	r3, r2, #6, #10
    68f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    68fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    68fe:	2b00      	cmp	r3, #0
    6900:	d004      	beq.n	690c <usage_fault+0x108>
    6902:	498d      	ldr	r1, [pc, #564]	; (6b38 <usage_fault+0x334>)
    6904:	8fb8      	ldrh	r0, [r7, #60]	; 0x3c
    6906:	f7fc f9b9 	bl	2c7c <log_from_user>
    690a:	e005      	b.n	6918 <usage_fault+0x114>
    690c:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
    690e:	488a      	ldr	r0, [pc, #552]	; (6b38 <usage_fault+0x334>)
    6910:	f00a faad 	bl	10e6e <log_0>
    6914:	e000      	b.n	6918 <usage_fault+0x114>
    6916:	bf00      	nop
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    6918:	4b86      	ldr	r3, [pc, #536]	; (6b34 <usage_fault+0x330>)
    691a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    691c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    6920:	2b00      	cmp	r3, #0
    6922:	d03c      	beq.n	699e <usage_fault+0x19a>
		PR_FAULT_INFO("  Unaligned memory access");
    6924:	2303      	movs	r3, #3
    6926:	2b00      	cmp	r3, #0
    6928:	d038      	beq.n	699c <usage_fault+0x198>
    692a:	f00b ff51 	bl	127d0 <k_is_user_context>
    692e:	4603      	mov	r3, r0
    6930:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    6934:	2300      	movs	r3, #0
    6936:	63bb      	str	r3, [r7, #56]	; 0x38
    6938:	2303      	movs	r3, #3
    693a:	2b00      	cmp	r3, #0
    693c:	d007      	beq.n	694e <usage_fault+0x14a>
    693e:	4b7b      	ldr	r3, [pc, #492]	; (6b2c <usage_fault+0x328>)
    6940:	681b      	ldr	r3, [r3, #0]
    6942:	4618      	mov	r0, r3
    6944:	f7ff fabe 	bl	5ec4 <log_const_source_id>
    6948:	4603      	mov	r3, r0
    694a:	b29b      	uxth	r3, r3
    694c:	e000      	b.n	6950 <usage_fault+0x14c>
    694e:	2300      	movs	r3, #0
    6950:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    6954:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    6958:	2201      	movs	r2, #1
    695a:	f362 0302 	bfi	r3, r2, #0, #3
    695e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    6962:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    6966:	f36f 03c5 	bfc	r3, #3, #3
    696a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    696e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
    6972:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6976:	b29a      	uxth	r2, r3
    6978:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
    697a:	f362 138f 	bfi	r3, r2, #6, #10
    697e:	86bb      	strh	r3, [r7, #52]	; 0x34
    6980:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
    6984:	2b00      	cmp	r3, #0
    6986:	d004      	beq.n	6992 <usage_fault+0x18e>
    6988:	496c      	ldr	r1, [pc, #432]	; (6b3c <usage_fault+0x338>)
    698a:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
    698c:	f7fc f976 	bl	2c7c <log_from_user>
    6990:	e005      	b.n	699e <usage_fault+0x19a>
    6992:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
    6994:	4869      	ldr	r0, [pc, #420]	; (6b3c <usage_fault+0x338>)
    6996:	f00a fa6a 	bl	10e6e <log_0>
    699a:	e000      	b.n	699e <usage_fault+0x19a>
    699c:	bf00      	nop
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    699e:	4b65      	ldr	r3, [pc, #404]	; (6b34 <usage_fault+0x330>)
    69a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    69a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    69a6:	2b00      	cmp	r3, #0
    69a8:	d03e      	beq.n	6a28 <usage_fault+0x224>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    69aa:	2303      	movs	r3, #3
    69ac:	2b00      	cmp	r3, #0
    69ae:	d038      	beq.n	6a22 <usage_fault+0x21e>
    69b0:	f00b ff0e 	bl	127d0 <k_is_user_context>
    69b4:	4603      	mov	r3, r0
    69b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    69ba:	2300      	movs	r3, #0
    69bc:	633b      	str	r3, [r7, #48]	; 0x30
    69be:	2303      	movs	r3, #3
    69c0:	2b00      	cmp	r3, #0
    69c2:	d007      	beq.n	69d4 <usage_fault+0x1d0>
    69c4:	4b59      	ldr	r3, [pc, #356]	; (6b2c <usage_fault+0x328>)
    69c6:	681b      	ldr	r3, [r3, #0]
    69c8:	4618      	mov	r0, r3
    69ca:	f7ff fa7b 	bl	5ec4 <log_const_source_id>
    69ce:	4603      	mov	r3, r0
    69d0:	b29b      	uxth	r3, r3
    69d2:	e000      	b.n	69d6 <usage_fault+0x1d2>
    69d4:	2300      	movs	r3, #0
    69d6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    69da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    69de:	2201      	movs	r2, #1
    69e0:	f362 0302 	bfi	r3, r2, #0, #3
    69e4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    69e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    69ec:	f36f 03c5 	bfc	r3, #3, #3
    69f0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    69f4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
    69f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    69fc:	b29a      	uxth	r2, r3
    69fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    6a00:	f362 138f 	bfi	r3, r2, #6, #10
    6a04:	85bb      	strh	r3, [r7, #44]	; 0x2c
    6a06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    6a0a:	2b00      	cmp	r3, #0
    6a0c:	d004      	beq.n	6a18 <usage_fault+0x214>
    6a0e:	494c      	ldr	r1, [pc, #304]	; (6b40 <usage_fault+0x33c>)
    6a10:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
    6a12:	f7fc f933 	bl	2c7c <log_from_user>
    6a16:	e005      	b.n	6a24 <usage_fault+0x220>
    6a18:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
    6a1a:	4849      	ldr	r0, [pc, #292]	; (6b40 <usage_fault+0x33c>)
    6a1c:	f00a fa27 	bl	10e6e <log_0>
    6a20:	e000      	b.n	6a24 <usage_fault+0x220>
    6a22:	bf00      	nop
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    6a24:	2302      	movs	r3, #2
    6a26:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    6a28:	4b42      	ldr	r3, [pc, #264]	; (6b34 <usage_fault+0x330>)
    6a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6a2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    6a30:	2b00      	cmp	r3, #0
    6a32:	d03c      	beq.n	6aae <usage_fault+0x2aa>
		PR_FAULT_INFO("  No coprocessor instructions");
    6a34:	2303      	movs	r3, #3
    6a36:	2b00      	cmp	r3, #0
    6a38:	d038      	beq.n	6aac <usage_fault+0x2a8>
    6a3a:	f00b fec9 	bl	127d0 <k_is_user_context>
    6a3e:	4603      	mov	r3, r0
    6a40:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    6a44:	2300      	movs	r3, #0
    6a46:	62bb      	str	r3, [r7, #40]	; 0x28
    6a48:	2303      	movs	r3, #3
    6a4a:	2b00      	cmp	r3, #0
    6a4c:	d007      	beq.n	6a5e <usage_fault+0x25a>
    6a4e:	4b37      	ldr	r3, [pc, #220]	; (6b2c <usage_fault+0x328>)
    6a50:	681b      	ldr	r3, [r3, #0]
    6a52:	4618      	mov	r0, r3
    6a54:	f7ff fa36 	bl	5ec4 <log_const_source_id>
    6a58:	4603      	mov	r3, r0
    6a5a:	b29b      	uxth	r3, r3
    6a5c:	e000      	b.n	6a60 <usage_fault+0x25c>
    6a5e:	2300      	movs	r3, #0
    6a60:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
    6a64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    6a68:	2201      	movs	r2, #1
    6a6a:	f362 0302 	bfi	r3, r2, #0, #3
    6a6e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    6a72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    6a76:	f36f 03c5 	bfc	r3, #3, #3
    6a7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    6a7e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
    6a82:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6a86:	b29a      	uxth	r2, r3
    6a88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    6a8a:	f362 138f 	bfi	r3, r2, #6, #10
    6a8e:	84bb      	strh	r3, [r7, #36]	; 0x24
    6a90:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
    6a94:	2b00      	cmp	r3, #0
    6a96:	d004      	beq.n	6aa2 <usage_fault+0x29e>
    6a98:	492a      	ldr	r1, [pc, #168]	; (6b44 <usage_fault+0x340>)
    6a9a:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
    6a9c:	f7fc f8ee 	bl	2c7c <log_from_user>
    6aa0:	e005      	b.n	6aae <usage_fault+0x2aa>
    6aa2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
    6aa4:	4827      	ldr	r0, [pc, #156]	; (6b44 <usage_fault+0x340>)
    6aa6:	f00a f9e2 	bl	10e6e <log_0>
    6aaa:	e000      	b.n	6aae <usage_fault+0x2aa>
    6aac:	bf00      	nop
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    6aae:	4b21      	ldr	r3, [pc, #132]	; (6b34 <usage_fault+0x330>)
    6ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    6ab6:	2b00      	cmp	r3, #0
    6ab8:	d049      	beq.n	6b4e <usage_fault+0x34a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    6aba:	2303      	movs	r3, #3
    6abc:	2b00      	cmp	r3, #0
    6abe:	d045      	beq.n	6b4c <usage_fault+0x348>
    6ac0:	f00b fe86 	bl	127d0 <k_is_user_context>
    6ac4:	4603      	mov	r3, r0
    6ac6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    6aca:	2300      	movs	r3, #0
    6acc:	623b      	str	r3, [r7, #32]
    6ace:	2303      	movs	r3, #3
    6ad0:	2b00      	cmp	r3, #0
    6ad2:	d007      	beq.n	6ae4 <usage_fault+0x2e0>
    6ad4:	4b15      	ldr	r3, [pc, #84]	; (6b2c <usage_fault+0x328>)
    6ad6:	681b      	ldr	r3, [r3, #0]
    6ad8:	4618      	mov	r0, r3
    6ada:	f7ff f9f3 	bl	5ec4 <log_const_source_id>
    6ade:	4603      	mov	r3, r0
    6ae0:	b29b      	uxth	r3, r3
    6ae2:	e000      	b.n	6ae6 <usage_fault+0x2e2>
    6ae4:	2300      	movs	r3, #0
    6ae6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    6aea:	7f3b      	ldrb	r3, [r7, #28]
    6aec:	2201      	movs	r2, #1
    6aee:	f362 0302 	bfi	r3, r2, #0, #3
    6af2:	773b      	strb	r3, [r7, #28]
    6af4:	7f3b      	ldrb	r3, [r7, #28]
    6af6:	f36f 03c5 	bfc	r3, #3, #3
    6afa:	773b      	strb	r3, [r7, #28]
    6afc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
    6b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6b04:	b29a      	uxth	r2, r3
    6b06:	8bbb      	ldrh	r3, [r7, #28]
    6b08:	f362 138f 	bfi	r3, r2, #6, #10
    6b0c:	83bb      	strh	r3, [r7, #28]
    6b0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    6b12:	2b00      	cmp	r3, #0
    6b14:	d004      	beq.n	6b20 <usage_fault+0x31c>
    6b16:	490c      	ldr	r1, [pc, #48]	; (6b48 <usage_fault+0x344>)
    6b18:	8bb8      	ldrh	r0, [r7, #28]
    6b1a:	f7fc f8af 	bl	2c7c <log_from_user>
    6b1e:	e016      	b.n	6b4e <usage_fault+0x34a>
    6b20:	8bb9      	ldrh	r1, [r7, #28]
    6b22:	4809      	ldr	r0, [pc, #36]	; (6b48 <usage_fault+0x344>)
    6b24:	f00a f9a3 	bl	10e6e <log_0>
    6b28:	e011      	b.n	6b4e <usage_fault+0x34a>
    6b2a:	bf00      	nop
    6b2c:	20000110 	.word	0x20000110
    6b30:	00018480 	.word	0x00018480
    6b34:	e000ed00 	.word	0xe000ed00
    6b38:	00018498 	.word	0x00018498
    6b3c:	000184ac 	.word	0x000184ac
    6b40:	000184c8 	.word	0x000184c8
    6b44:	000184f4 	.word	0x000184f4
    6b48:	00018514 	.word	0x00018514
    6b4c:	bf00      	nop
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    6b4e:	4b45      	ldr	r3, [pc, #276]	; (6c64 <usage_fault+0x460>)
    6b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    6b56:	2b00      	cmp	r3, #0
    6b58:	d038      	beq.n	6bcc <usage_fault+0x3c8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    6b5a:	2303      	movs	r3, #3
    6b5c:	2b00      	cmp	r3, #0
    6b5e:	d034      	beq.n	6bca <usage_fault+0x3c6>
    6b60:	f00b fe36 	bl	127d0 <k_is_user_context>
    6b64:	4603      	mov	r3, r0
    6b66:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    6b6a:	2300      	movs	r3, #0
    6b6c:	61bb      	str	r3, [r7, #24]
    6b6e:	2303      	movs	r3, #3
    6b70:	2b00      	cmp	r3, #0
    6b72:	d007      	beq.n	6b84 <usage_fault+0x380>
    6b74:	4b3c      	ldr	r3, [pc, #240]	; (6c68 <usage_fault+0x464>)
    6b76:	681b      	ldr	r3, [r3, #0]
    6b78:	4618      	mov	r0, r3
    6b7a:	f7ff f9a3 	bl	5ec4 <log_const_source_id>
    6b7e:	4603      	mov	r3, r0
    6b80:	b29b      	uxth	r3, r3
    6b82:	e000      	b.n	6b86 <usage_fault+0x382>
    6b84:	2300      	movs	r3, #0
    6b86:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    6b8a:	7d3b      	ldrb	r3, [r7, #20]
    6b8c:	2201      	movs	r2, #1
    6b8e:	f362 0302 	bfi	r3, r2, #0, #3
    6b92:	753b      	strb	r3, [r7, #20]
    6b94:	7d3b      	ldrb	r3, [r7, #20]
    6b96:	f36f 03c5 	bfc	r3, #3, #3
    6b9a:	753b      	strb	r3, [r7, #20]
    6b9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
    6ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6ba4:	b29a      	uxth	r2, r3
    6ba6:	8abb      	ldrh	r3, [r7, #20]
    6ba8:	f362 138f 	bfi	r3, r2, #6, #10
    6bac:	82bb      	strh	r3, [r7, #20]
    6bae:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
    6bb2:	2b00      	cmp	r3, #0
    6bb4:	d004      	beq.n	6bc0 <usage_fault+0x3bc>
    6bb6:	492d      	ldr	r1, [pc, #180]	; (6c6c <usage_fault+0x468>)
    6bb8:	8ab8      	ldrh	r0, [r7, #20]
    6bba:	f7fc f85f 	bl	2c7c <log_from_user>
    6bbe:	e005      	b.n	6bcc <usage_fault+0x3c8>
    6bc0:	8ab9      	ldrh	r1, [r7, #20]
    6bc2:	482a      	ldr	r0, [pc, #168]	; (6c6c <usage_fault+0x468>)
    6bc4:	f00a f953 	bl	10e6e <log_0>
    6bc8:	e000      	b.n	6bcc <usage_fault+0x3c8>
    6bca:	bf00      	nop
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    6bcc:	4b25      	ldr	r3, [pc, #148]	; (6c64 <usage_fault+0x460>)
    6bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    6bd4:	2b00      	cmp	r3, #0
    6bd6:	d038      	beq.n	6c4a <usage_fault+0x446>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    6bd8:	2303      	movs	r3, #3
    6bda:	2b00      	cmp	r3, #0
    6bdc:	d034      	beq.n	6c48 <usage_fault+0x444>
    6bde:	f00b fdf7 	bl	127d0 <k_is_user_context>
    6be2:	4603      	mov	r3, r0
    6be4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    6be8:	2300      	movs	r3, #0
    6bea:	613b      	str	r3, [r7, #16]
    6bec:	2303      	movs	r3, #3
    6bee:	2b00      	cmp	r3, #0
    6bf0:	d007      	beq.n	6c02 <usage_fault+0x3fe>
    6bf2:	4b1d      	ldr	r3, [pc, #116]	; (6c68 <usage_fault+0x464>)
    6bf4:	681b      	ldr	r3, [r3, #0]
    6bf6:	4618      	mov	r0, r3
    6bf8:	f7ff f964 	bl	5ec4 <log_const_source_id>
    6bfc:	4603      	mov	r3, r0
    6bfe:	b29b      	uxth	r3, r3
    6c00:	e000      	b.n	6c04 <usage_fault+0x400>
    6c02:	2300      	movs	r3, #0
    6c04:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    6c08:	7b3b      	ldrb	r3, [r7, #12]
    6c0a:	2201      	movs	r2, #1
    6c0c:	f362 0302 	bfi	r3, r2, #0, #3
    6c10:	733b      	strb	r3, [r7, #12]
    6c12:	7b3b      	ldrb	r3, [r7, #12]
    6c14:	f36f 03c5 	bfc	r3, #3, #3
    6c18:	733b      	strb	r3, [r7, #12]
    6c1a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
    6c1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6c22:	b29a      	uxth	r2, r3
    6c24:	89bb      	ldrh	r3, [r7, #12]
    6c26:	f362 138f 	bfi	r3, r2, #6, #10
    6c2a:	81bb      	strh	r3, [r7, #12]
    6c2c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
    6c30:	2b00      	cmp	r3, #0
    6c32:	d004      	beq.n	6c3e <usage_fault+0x43a>
    6c34:	490e      	ldr	r1, [pc, #56]	; (6c70 <usage_fault+0x46c>)
    6c36:	89b8      	ldrh	r0, [r7, #12]
    6c38:	f7fc f820 	bl	2c7c <log_from_user>
    6c3c:	e005      	b.n	6c4a <usage_fault+0x446>
    6c3e:	89b9      	ldrh	r1, [r7, #12]
    6c40:	480b      	ldr	r0, [pc, #44]	; (6c70 <usage_fault+0x46c>)
    6c42:	f00a f914 	bl	10e6e <log_0>
    6c46:	e000      	b.n	6c4a <usage_fault+0x446>
    6c48:	bf00      	nop
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    6c4a:	4b06      	ldr	r3, [pc, #24]	; (6c64 <usage_fault+0x460>)
    6c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c4e:	4a05      	ldr	r2, [pc, #20]	; (6c64 <usage_fault+0x460>)
    6c50:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    6c54:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    6c58:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
    6c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
    6c5c:	4618      	mov	r0, r3
    6c5e:	3770      	adds	r7, #112	; 0x70
    6c60:	46bd      	mov	sp, r7
    6c62:	bd80      	pop	{r7, pc}
    6c64:	e000ed00 	.word	0xe000ed00
    6c68:	20000110 	.word	0x20000110
    6c6c:	0001853c 	.word	0x0001853c
    6c70:	00018558 	.word	0x00018558

00006c74 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    6c74:	b580      	push	{r7, lr}
    6c76:	b086      	sub	sp, #24
    6c78:	af00      	add	r7, sp, #0
    6c7a:	6078      	str	r0, [r7, #4]
    6c7c:	6039      	str	r1, [r7, #0]
	*recoverable = false;
    6c7e:	683b      	ldr	r3, [r7, #0]
    6c80:	2200      	movs	r2, #0
    6c82:	701a      	strb	r2, [r3, #0]

	PR_FAULT_INFO(
    6c84:	2303      	movs	r3, #3
    6c86:	2b00      	cmp	r3, #0
    6c88:	d101      	bne.n	6c8e <debug_monitor+0x1a>
    6c8a:	bf00      	nop

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    6c8c:	e02f      	b.n	6cee <debug_monitor+0x7a>
	PR_FAULT_INFO(
    6c8e:	f00b fd9f 	bl	127d0 <k_is_user_context>
    6c92:	4603      	mov	r3, r0
    6c94:	75fb      	strb	r3, [r7, #23]
    6c96:	2300      	movs	r3, #0
    6c98:	613b      	str	r3, [r7, #16]
    6c9a:	2303      	movs	r3, #3
    6c9c:	2b00      	cmp	r3, #0
    6c9e:	d007      	beq.n	6cb0 <debug_monitor+0x3c>
    6ca0:	4b15      	ldr	r3, [pc, #84]	; (6cf8 <debug_monitor+0x84>)
    6ca2:	681b      	ldr	r3, [r3, #0]
    6ca4:	4618      	mov	r0, r3
    6ca6:	f7ff f90d 	bl	5ec4 <log_const_source_id>
    6caa:	4603      	mov	r3, r0
    6cac:	b29b      	uxth	r3, r3
    6cae:	e000      	b.n	6cb2 <debug_monitor+0x3e>
    6cb0:	2300      	movs	r3, #0
    6cb2:	82bb      	strh	r3, [r7, #20]
    6cb4:	7b3b      	ldrb	r3, [r7, #12]
    6cb6:	2201      	movs	r2, #1
    6cb8:	f362 0302 	bfi	r3, r2, #0, #3
    6cbc:	733b      	strb	r3, [r7, #12]
    6cbe:	7b3b      	ldrb	r3, [r7, #12]
    6cc0:	f36f 03c5 	bfc	r3, #3, #3
    6cc4:	733b      	strb	r3, [r7, #12]
    6cc6:	8abb      	ldrh	r3, [r7, #20]
    6cc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6ccc:	b29a      	uxth	r2, r3
    6cce:	89bb      	ldrh	r3, [r7, #12]
    6cd0:	f362 138f 	bfi	r3, r2, #6, #10
    6cd4:	81bb      	strh	r3, [r7, #12]
    6cd6:	7dfb      	ldrb	r3, [r7, #23]
    6cd8:	2b00      	cmp	r3, #0
    6cda:	d004      	beq.n	6ce6 <debug_monitor+0x72>
    6cdc:	4907      	ldr	r1, [pc, #28]	; (6cfc <debug_monitor+0x88>)
    6cde:	89b8      	ldrh	r0, [r7, #12]
    6ce0:	f7fb ffcc 	bl	2c7c <log_from_user>
}
    6ce4:	e003      	b.n	6cee <debug_monitor+0x7a>
	PR_FAULT_INFO(
    6ce6:	89b9      	ldrh	r1, [r7, #12]
    6ce8:	4804      	ldr	r0, [pc, #16]	; (6cfc <debug_monitor+0x88>)
    6cea:	f00a f8c0 	bl	10e6e <log_0>
}
    6cee:	bf00      	nop
    6cf0:	3718      	adds	r7, #24
    6cf2:	46bd      	mov	sp, r7
    6cf4:	bd80      	pop	{r7, pc}
    6cf6:	bf00      	nop
    6cf8:	20000110 	.word	0x20000110
    6cfc:	00018584 	.word	0x00018584

00006d00 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    6d00:	b580      	push	{r7, lr}
    6d02:	b08c      	sub	sp, #48	; 0x30
    6d04:	af00      	add	r7, sp, #0
    6d06:	6078      	str	r0, [r7, #4]
    6d08:	6039      	str	r1, [r7, #0]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6d0a:	2300      	movs	r3, #0
    6d0c:	62fb      	str	r3, [r7, #44]	; 0x2c

	PR_FAULT_INFO("***** HARD FAULT *****");
    6d0e:	2303      	movs	r3, #3
    6d10:	2b00      	cmp	r3, #0
    6d12:	d032      	beq.n	6d7a <hard_fault+0x7a>
    6d14:	f00b fd5c 	bl	127d0 <k_is_user_context>
    6d18:	4603      	mov	r3, r0
    6d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    6d1e:	2300      	movs	r3, #0
    6d20:	61fb      	str	r3, [r7, #28]
    6d22:	2303      	movs	r3, #3
    6d24:	2b00      	cmp	r3, #0
    6d26:	d007      	beq.n	6d38 <hard_fault+0x38>
    6d28:	4b67      	ldr	r3, [pc, #412]	; (6ec8 <hard_fault+0x1c8>)
    6d2a:	681b      	ldr	r3, [r3, #0]
    6d2c:	4618      	mov	r0, r3
    6d2e:	f7ff f8c9 	bl	5ec4 <log_const_source_id>
    6d32:	4603      	mov	r3, r0
    6d34:	b29b      	uxth	r3, r3
    6d36:	e000      	b.n	6d3a <hard_fault+0x3a>
    6d38:	2300      	movs	r3, #0
    6d3a:	853b      	strh	r3, [r7, #40]	; 0x28
    6d3c:	7e3b      	ldrb	r3, [r7, #24]
    6d3e:	2201      	movs	r2, #1
    6d40:	f362 0302 	bfi	r3, r2, #0, #3
    6d44:	763b      	strb	r3, [r7, #24]
    6d46:	7e3b      	ldrb	r3, [r7, #24]
    6d48:	f36f 03c5 	bfc	r3, #3, #3
    6d4c:	763b      	strb	r3, [r7, #24]
    6d4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    6d50:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6d54:	b29a      	uxth	r2, r3
    6d56:	8b3b      	ldrh	r3, [r7, #24]
    6d58:	f362 138f 	bfi	r3, r2, #6, #10
    6d5c:	833b      	strh	r3, [r7, #24]
    6d5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    6d62:	2b00      	cmp	r3, #0
    6d64:	d004      	beq.n	6d70 <hard_fault+0x70>
    6d66:	4959      	ldr	r1, [pc, #356]	; (6ecc <hard_fault+0x1cc>)
    6d68:	8b38      	ldrh	r0, [r7, #24]
    6d6a:	f7fb ff87 	bl	2c7c <log_from_user>
    6d6e:	e005      	b.n	6d7c <hard_fault+0x7c>
    6d70:	8b39      	ldrh	r1, [r7, #24]
    6d72:	4856      	ldr	r0, [pc, #344]	; (6ecc <hard_fault+0x1cc>)
    6d74:	f00a f87b 	bl	10e6e <log_0>
    6d78:	e000      	b.n	6d7c <hard_fault+0x7c>
    6d7a:	bf00      	nop
	}
#undef _SVC_OPCODE

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    6d7c:	683b      	ldr	r3, [r7, #0]
    6d7e:	2200      	movs	r2, #0
    6d80:	701a      	strb	r2, [r3, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6d82:	4b53      	ldr	r3, [pc, #332]	; (6ed0 <hard_fault+0x1d0>)
    6d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6d86:	f003 0302 	and.w	r3, r3, #2
    6d8a:	2b00      	cmp	r3, #0
    6d8c:	d036      	beq.n	6dfc <hard_fault+0xfc>
		PR_EXC("  Bus fault on vector table read");
    6d8e:	2303      	movs	r3, #3
    6d90:	2b00      	cmp	r3, #0
    6d92:	f000 8093 	beq.w	6ebc <hard_fault+0x1bc>
    6d96:	f00b fd1b 	bl	127d0 <k_is_user_context>
    6d9a:	4603      	mov	r3, r0
    6d9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    6da0:	2300      	movs	r3, #0
    6da2:	617b      	str	r3, [r7, #20]
    6da4:	2303      	movs	r3, #3
    6da6:	2b00      	cmp	r3, #0
    6da8:	d007      	beq.n	6dba <hard_fault+0xba>
    6daa:	4b47      	ldr	r3, [pc, #284]	; (6ec8 <hard_fault+0x1c8>)
    6dac:	681b      	ldr	r3, [r3, #0]
    6dae:	4618      	mov	r0, r3
    6db0:	f7ff f888 	bl	5ec4 <log_const_source_id>
    6db4:	4603      	mov	r3, r0
    6db6:	b29b      	uxth	r3, r3
    6db8:	e000      	b.n	6dbc <hard_fault+0xbc>
    6dba:	2300      	movs	r3, #0
    6dbc:	843b      	strh	r3, [r7, #32]
    6dbe:	7c3b      	ldrb	r3, [r7, #16]
    6dc0:	2201      	movs	r2, #1
    6dc2:	f362 0302 	bfi	r3, r2, #0, #3
    6dc6:	743b      	strb	r3, [r7, #16]
    6dc8:	7c3b      	ldrb	r3, [r7, #16]
    6dca:	f36f 03c5 	bfc	r3, #3, #3
    6dce:	743b      	strb	r3, [r7, #16]
    6dd0:	8c3b      	ldrh	r3, [r7, #32]
    6dd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6dd6:	b29a      	uxth	r2, r3
    6dd8:	8a3b      	ldrh	r3, [r7, #16]
    6dda:	f362 138f 	bfi	r3, r2, #6, #10
    6dde:	823b      	strh	r3, [r7, #16]
    6de0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    6de4:	2b00      	cmp	r3, #0
    6de6:	d004      	beq.n	6df2 <hard_fault+0xf2>
    6de8:	493a      	ldr	r1, [pc, #232]	; (6ed4 <hard_fault+0x1d4>)
    6dea:	8a38      	ldrh	r0, [r7, #16]
    6dec:	f7fb ff46 	bl	2c7c <log_from_user>
    6df0:	e065      	b.n	6ebe <hard_fault+0x1be>
    6df2:	8a39      	ldrh	r1, [r7, #16]
    6df4:	4837      	ldr	r0, [pc, #220]	; (6ed4 <hard_fault+0x1d4>)
    6df6:	f00a f83a 	bl	10e6e <log_0>
    6dfa:	e060      	b.n	6ebe <hard_fault+0x1be>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    6dfc:	4b34      	ldr	r3, [pc, #208]	; (6ed0 <hard_fault+0x1d0>)
    6dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6e00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
    6e04:	2b00      	cmp	r3, #0
    6e06:	d05a      	beq.n	6ebe <hard_fault+0x1be>
		PR_EXC("  Fault escalation (see below)");
    6e08:	2303      	movs	r3, #3
    6e0a:	2b00      	cmp	r3, #0
    6e0c:	d032      	beq.n	6e74 <hard_fault+0x174>
    6e0e:	f00b fcdf 	bl	127d0 <k_is_user_context>
    6e12:	4603      	mov	r3, r0
    6e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    6e18:	2300      	movs	r3, #0
    6e1a:	60fb      	str	r3, [r7, #12]
    6e1c:	2303      	movs	r3, #3
    6e1e:	2b00      	cmp	r3, #0
    6e20:	d007      	beq.n	6e32 <hard_fault+0x132>
    6e22:	4b29      	ldr	r3, [pc, #164]	; (6ec8 <hard_fault+0x1c8>)
    6e24:	681b      	ldr	r3, [r3, #0]
    6e26:	4618      	mov	r0, r3
    6e28:	f7ff f84c 	bl	5ec4 <log_const_source_id>
    6e2c:	4603      	mov	r3, r0
    6e2e:	b29b      	uxth	r3, r3
    6e30:	e000      	b.n	6e34 <hard_fault+0x134>
    6e32:	2300      	movs	r3, #0
    6e34:	84bb      	strh	r3, [r7, #36]	; 0x24
    6e36:	7a3b      	ldrb	r3, [r7, #8]
    6e38:	2201      	movs	r2, #1
    6e3a:	f362 0302 	bfi	r3, r2, #0, #3
    6e3e:	723b      	strb	r3, [r7, #8]
    6e40:	7a3b      	ldrb	r3, [r7, #8]
    6e42:	f36f 03c5 	bfc	r3, #3, #3
    6e46:	723b      	strb	r3, [r7, #8]
    6e48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    6e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6e4e:	b29a      	uxth	r2, r3
    6e50:	893b      	ldrh	r3, [r7, #8]
    6e52:	f362 138f 	bfi	r3, r2, #6, #10
    6e56:	813b      	strh	r3, [r7, #8]
    6e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    6e5c:	2b00      	cmp	r3, #0
    6e5e:	d004      	beq.n	6e6a <hard_fault+0x16a>
    6e60:	491d      	ldr	r1, [pc, #116]	; (6ed8 <hard_fault+0x1d8>)
    6e62:	8938      	ldrh	r0, [r7, #8]
    6e64:	f7fb ff0a 	bl	2c7c <log_from_user>
    6e68:	e005      	b.n	6e76 <hard_fault+0x176>
    6e6a:	8939      	ldrh	r1, [r7, #8]
    6e6c:	481a      	ldr	r0, [pc, #104]	; (6ed8 <hard_fault+0x1d8>)
    6e6e:	f009 fffe 	bl	10e6e <log_0>
    6e72:	e000      	b.n	6e76 <hard_fault+0x176>
    6e74:	bf00      	nop
		if (SCB_MMFSR != 0) {
    6e76:	4b19      	ldr	r3, [pc, #100]	; (6edc <hard_fault+0x1dc>)
    6e78:	781b      	ldrb	r3, [r3, #0]
    6e7a:	b2db      	uxtb	r3, r3
    6e7c:	2b00      	cmp	r3, #0
    6e7e:	d006      	beq.n	6e8e <hard_fault+0x18e>
			reason = mem_manage_fault(esf, 1, recoverable);
    6e80:	683a      	ldr	r2, [r7, #0]
    6e82:	2101      	movs	r1, #1
    6e84:	6878      	ldr	r0, [r7, #4]
    6e86:	f7ff f82d 	bl	5ee4 <mem_manage_fault>
    6e8a:	62f8      	str	r0, [r7, #44]	; 0x2c
    6e8c:	e017      	b.n	6ebe <hard_fault+0x1be>
		} else if (SCB_BFSR != 0) {
    6e8e:	4b14      	ldr	r3, [pc, #80]	; (6ee0 <hard_fault+0x1e0>)
    6e90:	781b      	ldrb	r3, [r3, #0]
    6e92:	b2db      	uxtb	r3, r3
    6e94:	2b00      	cmp	r3, #0
    6e96:	d007      	beq.n	6ea8 <hard_fault+0x1a8>
			reason = bus_fault(esf, 1, recoverable);
    6e98:	683a      	ldr	r2, [r7, #0]
    6e9a:	2101      	movs	r1, #1
    6e9c:	6878      	ldr	r0, [r7, #4]
    6e9e:	f7ff fa5b 	bl	6358 <bus_fault>
    6ea2:	4603      	mov	r3, r0
    6ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    6ea6:	e00a      	b.n	6ebe <hard_fault+0x1be>
		} else if (SCB_UFSR != 0) {
    6ea8:	4b0e      	ldr	r3, [pc, #56]	; (6ee4 <hard_fault+0x1e4>)
    6eaa:	881b      	ldrh	r3, [r3, #0]
    6eac:	b29b      	uxth	r3, r3
    6eae:	2b00      	cmp	r3, #0
    6eb0:	d005      	beq.n	6ebe <hard_fault+0x1be>
			reason = usage_fault(esf);
    6eb2:	6878      	ldr	r0, [r7, #4]
    6eb4:	f7ff fca6 	bl	6804 <usage_fault>
    6eb8:	62f8      	str	r0, [r7, #44]	; 0x2c
    6eba:	e000      	b.n	6ebe <hard_fault+0x1be>
		PR_EXC("  Bus fault on vector table read");
    6ebc:	bf00      	nop
	}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
    6ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    6ec0:	4618      	mov	r0, r3
    6ec2:	3730      	adds	r7, #48	; 0x30
    6ec4:	46bd      	mov	sp, r7
    6ec6:	bd80      	pop	{r7, pc}
    6ec8:	20000110 	.word	0x20000110
    6ecc:	000185a8 	.word	0x000185a8
    6ed0:	e000ed00 	.word	0xe000ed00
    6ed4:	000185c0 	.word	0x000185c0
    6ed8:	000185e4 	.word	0x000185e4
    6edc:	e000ed28 	.word	0xe000ed28
    6ee0:	e000ed29 	.word	0xe000ed29
    6ee4:	e000ed2a 	.word	0xe000ed2a

00006ee8 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    6ee8:	b580      	push	{r7, lr}
    6eea:	b086      	sub	sp, #24
    6eec:	af00      	add	r7, sp, #0
    6eee:	6078      	str	r0, [r7, #4]
    6ef0:	6039      	str	r1, [r7, #0]
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    6ef2:	2303      	movs	r3, #3
    6ef4:	2b00      	cmp	r3, #0
    6ef6:	d101      	bne.n	6efc <reserved_exception+0x14>
    6ef8:	bf00      	nop
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    6efa:	e040      	b.n	6f7e <reserved_exception+0x96>
	PR_FAULT_INFO("***** %s %d) *****",
    6efc:	f00b fc68 	bl	127d0 <k_is_user_context>
    6f00:	4603      	mov	r3, r0
    6f02:	75fb      	strb	r3, [r7, #23]
    6f04:	2300      	movs	r3, #0
    6f06:	613b      	str	r3, [r7, #16]
    6f08:	2303      	movs	r3, #3
    6f0a:	2b00      	cmp	r3, #0
    6f0c:	d007      	beq.n	6f1e <reserved_exception+0x36>
    6f0e:	4b1e      	ldr	r3, [pc, #120]	; (6f88 <reserved_exception+0xa0>)
    6f10:	681b      	ldr	r3, [r3, #0]
    6f12:	4618      	mov	r0, r3
    6f14:	f7fe ffd6 	bl	5ec4 <log_const_source_id>
    6f18:	4603      	mov	r3, r0
    6f1a:	b29b      	uxth	r3, r3
    6f1c:	e000      	b.n	6f20 <reserved_exception+0x38>
    6f1e:	2300      	movs	r3, #0
    6f20:	82bb      	strh	r3, [r7, #20]
    6f22:	7b3b      	ldrb	r3, [r7, #12]
    6f24:	2201      	movs	r2, #1
    6f26:	f362 0302 	bfi	r3, r2, #0, #3
    6f2a:	733b      	strb	r3, [r7, #12]
    6f2c:	7b3b      	ldrb	r3, [r7, #12]
    6f2e:	f36f 03c5 	bfc	r3, #3, #3
    6f32:	733b      	strb	r3, [r7, #12]
    6f34:	8abb      	ldrh	r3, [r7, #20]
    6f36:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6f3a:	b29a      	uxth	r2, r3
    6f3c:	89bb      	ldrh	r3, [r7, #12]
    6f3e:	f362 138f 	bfi	r3, r2, #6, #10
    6f42:	81bb      	strh	r3, [r7, #12]
    6f44:	7dfb      	ldrb	r3, [r7, #23]
    6f46:	2b00      	cmp	r3, #0
    6f48:	d00c      	beq.n	6f64 <reserved_exception+0x7c>
    6f4a:	683b      	ldr	r3, [r7, #0]
    6f4c:	2b0f      	cmp	r3, #15
    6f4e:	dc01      	bgt.n	6f54 <reserved_exception+0x6c>
    6f50:	4a0e      	ldr	r2, [pc, #56]	; (6f8c <reserved_exception+0xa4>)
    6f52:	e000      	b.n	6f56 <reserved_exception+0x6e>
    6f54:	4a0e      	ldr	r2, [pc, #56]	; (6f90 <reserved_exception+0xa8>)
    6f56:	683b      	ldr	r3, [r7, #0]
    6f58:	3b10      	subs	r3, #16
    6f5a:	490e      	ldr	r1, [pc, #56]	; (6f94 <reserved_exception+0xac>)
    6f5c:	89b8      	ldrh	r0, [r7, #12]
    6f5e:	f7fb fe8d 	bl	2c7c <log_from_user>
}
    6f62:	e00c      	b.n	6f7e <reserved_exception+0x96>
	PR_FAULT_INFO("***** %s %d) *****",
    6f64:	683b      	ldr	r3, [r7, #0]
    6f66:	2b0f      	cmp	r3, #15
    6f68:	dc01      	bgt.n	6f6e <reserved_exception+0x86>
    6f6a:	4908      	ldr	r1, [pc, #32]	; (6f8c <reserved_exception+0xa4>)
    6f6c:	e000      	b.n	6f70 <reserved_exception+0x88>
    6f6e:	4908      	ldr	r1, [pc, #32]	; (6f90 <reserved_exception+0xa8>)
    6f70:	683b      	ldr	r3, [r7, #0]
    6f72:	3b10      	subs	r3, #16
    6f74:	461a      	mov	r2, r3
    6f76:	89bb      	ldrh	r3, [r7, #12]
    6f78:	4806      	ldr	r0, [pc, #24]	; (6f94 <reserved_exception+0xac>)
    6f7a:	f009 ffa4 	bl	10ec6 <log_2>
}
    6f7e:	bf00      	nop
    6f80:	3718      	adds	r7, #24
    6f82:	46bd      	mov	sp, r7
    6f84:	bd80      	pop	{r7, pc}
    6f86:	bf00      	nop
    6f88:	20000110 	.word	0x20000110
    6f8c:	00018604 	.word	0x00018604
    6f90:	0001861c 	.word	0x0001861c
    6f94:	00018638 	.word	0x00018638

00006f98 <fault_handle>:

/* Handler function for ARM fault conditions. */
static uint32_t fault_handle(z_arch_esf_t *esf, int fault, bool *recoverable)
{
    6f98:	b580      	push	{r7, lr}
    6f9a:	b086      	sub	sp, #24
    6f9c:	af00      	add	r7, sp, #0
    6f9e:	60f8      	str	r0, [r7, #12]
    6fa0:	60b9      	str	r1, [r7, #8]
    6fa2:	607a      	str	r2, [r7, #4]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6fa4:	2300      	movs	r3, #0
    6fa6:	617b      	str	r3, [r7, #20]

	*recoverable = false;
    6fa8:	687b      	ldr	r3, [r7, #4]
    6faa:	2200      	movs	r2, #0
    6fac:	701a      	strb	r2, [r3, #0]
    6fae:	68bb      	ldr	r3, [r7, #8]
    6fb0:	3b03      	subs	r3, #3
    6fb2:	2b09      	cmp	r3, #9
    6fb4:	d835      	bhi.n	7022 <fault_handle+0x8a>
    6fb6:	a201      	add	r2, pc, #4	; (adr r2, 6fbc <fault_handle+0x24>)
    6fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6fbc:	00006fe5 	.word	0x00006fe5
    6fc0:	00006ff1 	.word	0x00006ff1
    6fc4:	00006fff 	.word	0x00006fff
    6fc8:	0000700f 	.word	0x0000700f
    6fcc:	00007023 	.word	0x00007023
    6fd0:	00007023 	.word	0x00007023
    6fd4:	00007023 	.word	0x00007023
    6fd8:	00007023 	.word	0x00007023
    6fdc:	00007023 	.word	0x00007023
    6fe0:	00007019 	.word	0x00007019

	switch (fault) {
	case 3:
		reason = hard_fault(esf, recoverable);
    6fe4:	6879      	ldr	r1, [r7, #4]
    6fe6:	68f8      	ldr	r0, [r7, #12]
    6fe8:	f7ff fe8a 	bl	6d00 <hard_fault>
    6fec:	6178      	str	r0, [r7, #20]
		break;
    6fee:	e01d      	b.n	702c <fault_handle+0x94>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	/* HardFault is raised for all fault conditions on ARMv6-M. */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	case 4:
		reason = mem_manage_fault(esf, 0, recoverable);
    6ff0:	687a      	ldr	r2, [r7, #4]
    6ff2:	2100      	movs	r1, #0
    6ff4:	68f8      	ldr	r0, [r7, #12]
    6ff6:	f7fe ff75 	bl	5ee4 <mem_manage_fault>
    6ffa:	6178      	str	r0, [r7, #20]
		break;
    6ffc:	e016      	b.n	702c <fault_handle+0x94>
	case 5:
		reason = bus_fault(esf, 0, recoverable);
    6ffe:	687a      	ldr	r2, [r7, #4]
    7000:	2100      	movs	r1, #0
    7002:	68f8      	ldr	r0, [r7, #12]
    7004:	f7ff f9a8 	bl	6358 <bus_fault>
    7008:	4603      	mov	r3, r0
    700a:	617b      	str	r3, [r7, #20]
		break;
    700c:	e00e      	b.n	702c <fault_handle+0x94>
	case 6:
		reason = usage_fault(esf);
    700e:	68f8      	ldr	r0, [r7, #12]
    7010:	f7ff fbf8 	bl	6804 <usage_fault>
    7014:	6178      	str	r0, [r7, #20]
		break;
    7016:	e009      	b.n	702c <fault_handle+0x94>
	case 7:
		secure_fault(esf);
		break;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	case 12:
		debug_monitor(esf, recoverable);
    7018:	6879      	ldr	r1, [r7, #4]
    701a:	68f8      	ldr	r0, [r7, #12]
    701c:	f7ff fe2a 	bl	6c74 <debug_monitor>
		break;
    7020:	e004      	b.n	702c <fault_handle+0x94>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	default:
		reserved_exception(esf, fault);
    7022:	68b9      	ldr	r1, [r7, #8]
    7024:	68f8      	ldr	r0, [r7, #12]
    7026:	f7ff ff5f 	bl	6ee8 <reserved_exception>
		break;
    702a:	bf00      	nop
	}

	if ((*recoverable) == false) {
    702c:	687b      	ldr	r3, [r7, #4]
    702e:	781b      	ldrb	r3, [r3, #0]
    7030:	f083 0301 	eor.w	r3, r3, #1
    7034:	b2db      	uxtb	r3, r3
    7036:	2b00      	cmp	r3, #0
    7038:	d003      	beq.n	7042 <fault_handle+0xaa>
		/* Dump generic information about the fault. */
		fault_show(esf, fault);
    703a:	68b9      	ldr	r1, [r7, #8]
    703c:	68f8      	ldr	r0, [r7, #12]
    703e:	f00b fbce 	bl	127de <fault_show>
	}

	return reason;
    7042:	697b      	ldr	r3, [r7, #20]
}
    7044:	4618      	mov	r0, r3
    7046:	3718      	adds	r7, #24
    7048:	46bd      	mov	sp, r7
    704a:	bd80      	pop	{r7, pc}

0000704c <get_esf>:
 *
 * @return ESF pointer on success, otherwise return NULL
 */
static inline z_arch_esf_t *get_esf(uint32_t msp, uint32_t psp, uint32_t exc_return,
	bool *nested_exc)
{
    704c:	b580      	push	{r7, lr}
    704e:	b088      	sub	sp, #32
    7050:	af00      	add	r7, sp, #0
    7052:	60f8      	str	r0, [r7, #12]
    7054:	60b9      	str	r1, [r7, #8]
    7056:	607a      	str	r2, [r7, #4]
    7058:	603b      	str	r3, [r7, #0]
	bool alternative_state_exc = false;
    705a:	2300      	movs	r3, #0
    705c:	76fb      	strb	r3, [r7, #27]
	z_arch_esf_t *ptr_esf;

	*nested_exc = false;
    705e:	683b      	ldr	r3, [r7, #0]
    7060:	2200      	movs	r2, #0
    7062:	701a      	strb	r2, [r3, #0]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    7064:	687b      	ldr	r3, [r7, #4]
    7066:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    706a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    706e:	d001      	beq.n	7074 <get_esf+0x28>
			EXC_RETURN_INDICATOR_PREFIX) {
		/* Invalid EXC_RETURN value. This is a fatal error. */
		return NULL;
    7070:	2300      	movs	r3, #0
    7072:	e054      	b.n	711e <get_esf+0xd2>
	}
#else
	/* The processor has a single execution state.
	 * We verify that the Thread mode is using PSP.
	 */
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    7074:	687b      	ldr	r3, [r7, #4]
    7076:	f003 0308 	and.w	r3, r3, #8
    707a:	2b00      	cmp	r3, #0
    707c:	d03b      	beq.n	70f6 <get_esf+0xaa>
		(!(exc_return & EXC_RETURN_SPSEL_PROCESS))) {
    707e:	687b      	ldr	r3, [r7, #4]
    7080:	f003 0304 	and.w	r3, r3, #4
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    7084:	2b00      	cmp	r3, #0
    7086:	d136      	bne.n	70f6 <get_esf+0xaa>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    7088:	2303      	movs	r3, #3
    708a:	2b00      	cmp	r3, #0
    708c:	d030      	beq.n	70f0 <get_esf+0xa4>
    708e:	f00b fb9f 	bl	127d0 <k_is_user_context>
    7092:	4603      	mov	r3, r0
    7094:	76bb      	strb	r3, [r7, #26]
    7096:	2300      	movs	r3, #0
    7098:	617b      	str	r3, [r7, #20]
    709a:	2303      	movs	r3, #3
    709c:	2b00      	cmp	r3, #0
    709e:	d007      	beq.n	70b0 <get_esf+0x64>
    70a0:	4b21      	ldr	r3, [pc, #132]	; (7128 <get_esf+0xdc>)
    70a2:	681b      	ldr	r3, [r3, #0]
    70a4:	4618      	mov	r0, r3
    70a6:	f7fe ff0d 	bl	5ec4 <log_const_source_id>
    70aa:	4603      	mov	r3, r0
    70ac:	b29b      	uxth	r3, r3
    70ae:	e000      	b.n	70b2 <get_esf+0x66>
    70b0:	2300      	movs	r3, #0
    70b2:	833b      	strh	r3, [r7, #24]
    70b4:	7c3b      	ldrb	r3, [r7, #16]
    70b6:	2201      	movs	r2, #1
    70b8:	f362 0302 	bfi	r3, r2, #0, #3
    70bc:	743b      	strb	r3, [r7, #16]
    70be:	7c3b      	ldrb	r3, [r7, #16]
    70c0:	f36f 03c5 	bfc	r3, #3, #3
    70c4:	743b      	strb	r3, [r7, #16]
    70c6:	8b3b      	ldrh	r3, [r7, #24]
    70c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    70cc:	b29a      	uxth	r2, r3
    70ce:	8a3b      	ldrh	r3, [r7, #16]
    70d0:	f362 138f 	bfi	r3, r2, #6, #10
    70d4:	823b      	strh	r3, [r7, #16]
    70d6:	7ebb      	ldrb	r3, [r7, #26]
    70d8:	2b00      	cmp	r3, #0
    70da:	d004      	beq.n	70e6 <get_esf+0x9a>
    70dc:	4913      	ldr	r1, [pc, #76]	; (712c <get_esf+0xe0>)
    70de:	8a38      	ldrh	r0, [r7, #16]
    70e0:	f7fb fdcc 	bl	2c7c <log_from_user>
    70e4:	e005      	b.n	70f2 <get_esf+0xa6>
    70e6:	8a39      	ldrh	r1, [r7, #16]
    70e8:	4810      	ldr	r0, [pc, #64]	; (712c <get_esf+0xe0>)
    70ea:	f009 fec0 	bl	10e6e <log_0>
    70ee:	e000      	b.n	70f2 <get_esf+0xa6>
    70f0:	bf00      	nop
		return NULL;
    70f2:	2300      	movs	r3, #0
    70f4:	e013      	b.n	711e <get_esf+0xd2>
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
    70f6:	7efb      	ldrb	r3, [r7, #27]
    70f8:	f083 0301 	eor.w	r3, r3, #1
    70fc:	b2db      	uxtb	r3, r3
    70fe:	2b00      	cmp	r3, #0
    7100:	d00c      	beq.n	711c <get_esf+0xd0>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    7102:	687b      	ldr	r3, [r7, #4]
    7104:	f003 0308 	and.w	r3, r3, #8
    7108:	2b00      	cmp	r3, #0
    710a:	d002      	beq.n	7112 <get_esf+0xc6>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
    710c:	68bb      	ldr	r3, [r7, #8]
    710e:	61fb      	str	r3, [r7, #28]
    7110:	e004      	b.n	711c <get_esf+0xd0>

		} else {
			/* Returning to handler mode */
			ptr_esf = (z_arch_esf_t *)msp;
    7112:	68fb      	ldr	r3, [r7, #12]
    7114:	61fb      	str	r3, [r7, #28]
			*nested_exc = true;
    7116:	683b      	ldr	r3, [r7, #0]
    7118:	2201      	movs	r2, #1
    711a:	701a      	strb	r2, [r3, #0]
		}
	}

	return ptr_esf;
    711c:	69fb      	ldr	r3, [r7, #28]
}
    711e:	4618      	mov	r0, r3
    7120:	3720      	adds	r7, #32
    7122:	46bd      	mov	sp, r7
    7124:	bd80      	pop	{r7, pc}
    7126:	bf00      	nop
    7128:	20000110 	.word	0x20000110
    712c:	0001864c 	.word	0x0001864c

00007130 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    7130:	b580      	push	{r7, lr}
    7132:	b092      	sub	sp, #72	; 0x48
    7134:	af00      	add	r7, sp, #0
    7136:	60f8      	str	r0, [r7, #12]
    7138:	60b9      	str	r1, [r7, #8]
    713a:	607a      	str	r2, [r7, #4]
    713c:	603b      	str	r3, [r7, #0]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    713e:	2300      	movs	r3, #0
    7140:	647b      	str	r3, [r7, #68]	; 0x44
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7142:	4b2d      	ldr	r3, [pc, #180]	; (71f8 <z_arm_fault+0xc8>)
    7144:	685b      	ldr	r3, [r3, #4]
    7146:	f3c3 0308 	ubfx	r3, r3, #0, #9
    714a:	643b      	str	r3, [r7, #64]	; 0x40
    714c:	2300      	movs	r3, #0
    714e:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
    7150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7152:	f383 8811 	msr	BASEPRI, r3
    7156:	f3bf 8f6f 	isb	sy
}
    715a:	bf00      	nop
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
    715c:	f107 0336 	add.w	r3, r7, #54	; 0x36
    7160:	687a      	ldr	r2, [r7, #4]
    7162:	68b9      	ldr	r1, [r7, #8]
    7164:	68f8      	ldr	r0, [r7, #12]
    7166:	f7ff ff71 	bl	704c <get_esf>
    716a:	63f8      	str	r0, [r7, #60]	; 0x3c
	__ASSERT(esf != NULL,
    716c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    716e:	2b00      	cmp	r3, #0
    7170:	d10e      	bne.n	7190 <z_arm_fault+0x60>
    7172:	f240 33e1 	movw	r3, #993	; 0x3e1
    7176:	4a21      	ldr	r2, [pc, #132]	; (71fc <z_arm_fault+0xcc>)
    7178:	4921      	ldr	r1, [pc, #132]	; (7200 <z_arm_fault+0xd0>)
    717a:	4822      	ldr	r0, [pc, #136]	; (7204 <z_arm_fault+0xd4>)
    717c:	f008 fd7a 	bl	fc74 <printk>
    7180:	4821      	ldr	r0, [pc, #132]	; (7208 <z_arm_fault+0xd8>)
    7182:	f008 fd77 	bl	fc74 <printk>
    7186:	f240 31e1 	movw	r1, #993	; 0x3e1
    718a:	481c      	ldr	r0, [pc, #112]	; (71fc <z_arm_fault+0xcc>)
    718c:	f009 f9ce 	bl	1052c <assert_post_action>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    7190:	f107 0337 	add.w	r3, r7, #55	; 0x37
    7194:	461a      	mov	r2, r3
    7196:	6c39      	ldr	r1, [r7, #64]	; 0x40
    7198:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    719a:	f7ff fefd 	bl	6f98 <fault_handle>
    719e:	6478      	str	r0, [r7, #68]	; 0x44
	if (recoverable) {
    71a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    71a4:	2b00      	cmp	r3, #0
    71a6:	d123      	bne.n	71f0 <z_arm_fault+0xc0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    71a8:	f107 0314 	add.w	r3, r7, #20
    71ac:	2220      	movs	r2, #32
    71ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    71b0:	4618      	mov	r0, r3
    71b2:	f00b fc7c 	bl	12aae <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    71b6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    71ba:	2b00      	cmp	r3, #0
    71bc:	d00b      	beq.n	71d6 <z_arm_fault+0xa6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    71be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    71c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    71c4:	2b00      	cmp	r3, #0
    71c6:	d10c      	bne.n	71e2 <z_arm_fault+0xb2>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    71c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    71ca:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    71ce:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    71d2:	633b      	str	r3, [r7, #48]	; 0x30
    71d4:	e005      	b.n	71e2 <z_arm_fault+0xb2>
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    71d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    71d8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    71dc:	f023 0301 	bic.w	r3, r3, #1
    71e0:	633b      	str	r3, [r7, #48]	; 0x30
	}

	z_arm_fatal_error(reason, &esf_copy);
    71e2:	f107 0314 	add.w	r3, r7, #20
    71e6:	4619      	mov	r1, r3
    71e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
    71ea:	f00b fab9 	bl	12760 <z_arm_fatal_error>
    71ee:	e000      	b.n	71f2 <z_arm_fault+0xc2>
		return;
    71f0:	bf00      	nop
}
    71f2:	3748      	adds	r7, #72	; 0x48
    71f4:	46bd      	mov	sp, r7
    71f6:	bd80      	pop	{r7, pc}
    71f8:	e000ed00 	.word	0xe000ed00
    71fc:	000182e0 	.word	0x000182e0
    7200:	00018678 	.word	0x00018678
    7204:	00018368 	.word	0x00018368
    7208:	0001868c 	.word	0x0001868c

0000720c <z_arm_fault_init>:
 * Turns on the desired hardware faults.
 *
 * @return N/A
 */
void z_arm_fault_init(void)
{
    720c:	b480      	push	{r7}
    720e:	af00      	add	r7, sp, #0
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    7210:	4b07      	ldr	r3, [pc, #28]	; (7230 <z_arm_fault_init+0x24>)
    7212:	695b      	ldr	r3, [r3, #20]
    7214:	4a06      	ldr	r2, [pc, #24]	; (7230 <z_arm_fault_init+0x24>)
    7216:	f043 0310 	orr.w	r3, r3, #16
    721a:	6153      	str	r3, [r2, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    721c:	4b04      	ldr	r3, [pc, #16]	; (7230 <z_arm_fault_init+0x24>)
    721e:	695b      	ldr	r3, [r3, #20]
    7220:	4a03      	ldr	r2, [pc, #12]	; (7230 <z_arm_fault_init+0x24>)
    7222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    7226:	6153      	str	r3, [r2, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    7228:	bf00      	nop
    722a:	46bd      	mov	sp, r7
    722c:	bc80      	pop	{r7}
    722e:	4770      	bx	lr
    7230:	e000ed00 	.word	0xe000ed00

00007234 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    7234:	4b04      	ldr	r3, [pc, #16]	; (7248 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    7236:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    7238:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    723a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    723c:	d003      	beq.n	7246 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    723e:	4903      	ldr	r1, [pc, #12]	; (724c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    7240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    7244:	600a      	str	r2, [r1, #0]

00007246 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    7246:	4770      	bx	lr
	ldr r3, =_kernel
    7248:	20000c00 	.word	0x20000c00
	ldr r1, =_SCS_ICSR
    724c:	e000ed04 	.word	0xe000ed04

00007250 <ARM_MPU_ClrRegion>:

/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
    7250:	b580      	push	{r7, lr}
    7252:	b082      	sub	sp, #8
    7254:	af00      	add	r7, sp, #0
    7256:	6078      	str	r0, [r7, #4]
  ARM_MPU_ClrRegionEx(MPU, rnr);
    7258:	6879      	ldr	r1, [r7, #4]
    725a:	4803      	ldr	r0, [pc, #12]	; (7268 <ARM_MPU_ClrRegion+0x18>)
    725c:	f00b fad5 	bl	1280a <ARM_MPU_ClrRegionEx>
}
    7260:	bf00      	nop
    7262:	3708      	adds	r7, #8
    7264:	46bd      	mov	sp, r7
    7266:	bd80      	pop	{r7, pc}
    7268:	e000ed90 	.word	0xe000ed90

0000726c <z_arm_clear_arm_mpu_config>:
 * This routine clears all ARM MPU region configuration.
 *
 * @return N/A
 */
void z_arm_clear_arm_mpu_config(void)
{
    726c:	b580      	push	{r7, lr}
    726e:	b082      	sub	sp, #8
    7270:	af00      	add	r7, sp, #0
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    7272:	4b0c      	ldr	r3, [pc, #48]	; (72a4 <z_arm_clear_arm_mpu_config+0x38>)
    7274:	681b      	ldr	r3, [r3, #0]
    7276:	0a1b      	lsrs	r3, r3, #8
	int num_regions =
    7278:	b2db      	uxtb	r3, r3
    727a:	603b      	str	r3, [r7, #0]

	for (i = 0; i < num_regions; i++) {
    727c:	2300      	movs	r3, #0
    727e:	607b      	str	r3, [r7, #4]
    7280:	e006      	b.n	7290 <z_arm_clear_arm_mpu_config+0x24>
		ARM_MPU_ClrRegion(i);
    7282:	687b      	ldr	r3, [r7, #4]
    7284:	4618      	mov	r0, r3
    7286:	f7ff ffe3 	bl	7250 <ARM_MPU_ClrRegion>
	for (i = 0; i < num_regions; i++) {
    728a:	687b      	ldr	r3, [r7, #4]
    728c:	3301      	adds	r3, #1
    728e:	607b      	str	r3, [r7, #4]
    7290:	687a      	ldr	r2, [r7, #4]
    7292:	683b      	ldr	r3, [r7, #0]
    7294:	429a      	cmp	r2, r3
    7296:	dbf4      	blt.n	7282 <z_arm_clear_arm_mpu_config+0x16>
	}
}
    7298:	bf00      	nop
    729a:	bf00      	nop
    729c:	3708      	adds	r7, #8
    729e:	46bd      	mov	sp, r7
    72a0:	bd80      	pop	{r7, pc}
    72a2:	bf00      	nop
    72a4:	e000ed90 	.word	0xe000ed90

000072a8 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    72a8:	b580      	push	{r7, lr}
    72aa:	b082      	sub	sp, #8
    72ac:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
    72ae:	b672      	cpsid	i
}
    72b0:	bf00      	nop
    72b2:	2300      	movs	r3, #0
    72b4:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    72b6:	683b      	ldr	r3, [r7, #0]
    72b8:	f383 8813 	msr	FAULTMASK, r3
}
    72bc:	bf00      	nop

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    72be:	f7ff ffd5 	bl	726c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    72c2:	2300      	movs	r3, #0
    72c4:	71fb      	strb	r3, [r7, #7]
    72c6:	e009      	b.n	72dc <z_arm_init_arch_hw_at_boot+0x34>
		NVIC->ICER[i] = 0xFFFFFFFF;
    72c8:	4a14      	ldr	r2, [pc, #80]	; (731c <z_arm_init_arch_hw_at_boot+0x74>)
    72ca:	79fb      	ldrb	r3, [r7, #7]
    72cc:	3320      	adds	r3, #32
    72ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    72d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    72d6:	79fb      	ldrb	r3, [r7, #7]
    72d8:	3301      	adds	r3, #1
    72da:	71fb      	strb	r3, [r7, #7]
    72dc:	79fb      	ldrb	r3, [r7, #7]
    72de:	2b0f      	cmp	r3, #15
    72e0:	d9f2      	bls.n	72c8 <z_arm_init_arch_hw_at_boot+0x20>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    72e2:	2300      	movs	r3, #0
    72e4:	71bb      	strb	r3, [r7, #6]
    72e6:	e009      	b.n	72fc <z_arm_init_arch_hw_at_boot+0x54>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    72e8:	4a0c      	ldr	r2, [pc, #48]	; (731c <z_arm_init_arch_hw_at_boot+0x74>)
    72ea:	79bb      	ldrb	r3, [r7, #6]
    72ec:	3360      	adds	r3, #96	; 0x60
    72ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    72f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    72f6:	79bb      	ldrb	r3, [r7, #6]
    72f8:	3301      	adds	r3, #1
    72fa:	71bb      	strb	r3, [r7, #6]
    72fc:	79bb      	ldrb	r3, [r7, #6]
    72fe:	2b0f      	cmp	r3, #15
    7300:	d9f2      	bls.n	72e8 <z_arm_init_arch_hw_at_boot+0x40>
  __ASM volatile ("cpsie i" : : : "memory");
    7302:	b662      	cpsie	i
}
    7304:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
    7306:	f3bf 8f4f 	dsb	sy
}
    730a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
    730c:	f3bf 8f6f 	isb	sy
}
    7310:	bf00      	nop
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    7312:	bf00      	nop
    7314:	3708      	adds	r7, #8
    7316:	46bd      	mov	sp, r7
    7318:	bd80      	pop	{r7, pc}
    731a:	bf00      	nop
    731c:	e000e100 	.word	0xe000e100

00007320 <__NVIC_SetPriority>:
{
    7320:	b480      	push	{r7}
    7322:	b083      	sub	sp, #12
    7324:	af00      	add	r7, sp, #0
    7326:	4603      	mov	r3, r0
    7328:	6039      	str	r1, [r7, #0]
    732a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    732c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    7330:	2b00      	cmp	r3, #0
    7332:	db0a      	blt.n	734a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7334:	683b      	ldr	r3, [r7, #0]
    7336:	b2da      	uxtb	r2, r3
    7338:	490c      	ldr	r1, [pc, #48]	; (736c <__NVIC_SetPriority+0x4c>)
    733a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    733e:	0152      	lsls	r2, r2, #5
    7340:	b2d2      	uxtb	r2, r2
    7342:	440b      	add	r3, r1
    7344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    7348:	e00a      	b.n	7360 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    734a:	683b      	ldr	r3, [r7, #0]
    734c:	b2da      	uxtb	r2, r3
    734e:	4908      	ldr	r1, [pc, #32]	; (7370 <__NVIC_SetPriority+0x50>)
    7350:	79fb      	ldrb	r3, [r7, #7]
    7352:	f003 030f 	and.w	r3, r3, #15
    7356:	3b04      	subs	r3, #4
    7358:	0152      	lsls	r2, r2, #5
    735a:	b2d2      	uxtb	r2, r2
    735c:	440b      	add	r3, r1
    735e:	761a      	strb	r2, [r3, #24]
}
    7360:	bf00      	nop
    7362:	370c      	adds	r7, #12
    7364:	46bd      	mov	sp, r7
    7366:	bc80      	pop	{r7}
    7368:	4770      	bx	lr
    736a:	bf00      	nop
    736c:	e000e100 	.word	0xe000e100
    7370:	e000ed00 	.word	0xe000ed00

00007374 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    7374:	b580      	push	{r7, lr}
    7376:	b084      	sub	sp, #16
    7378:	af00      	add	r7, sp, #0
    737a:	6078      	str	r0, [r7, #4]
	if (_current == thread) {
    737c:	4b0e      	ldr	r3, [pc, #56]	; (73b8 <z_impl_k_thread_abort+0x44>)
    737e:	689b      	ldr	r3, [r3, #8]
    7380:	687a      	ldr	r2, [r7, #4]
    7382:	429a      	cmp	r2, r3
    7384:	d110      	bne.n	73a8 <z_impl_k_thread_abort+0x34>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7386:	f3ef 8305 	mrs	r3, IPSR
    738a:	60fb      	str	r3, [r7, #12]
  return(result);
    738c:	68fb      	ldr	r3, [r7, #12]
 * The current executing vector is found in the IPSR register. All
 * IRQs and system exceptions are considered as interrupt context.
 */
static ALWAYS_INLINE bool arch_is_in_isr(void)
{
	return (__get_IPSR()) ? (true) : (false);
    738e:	2b00      	cmp	r3, #0
    7390:	bf14      	ite	ne
    7392:	2301      	movne	r3, #1
    7394:	2300      	moveq	r3, #0
    7396:	b2db      	uxtb	r3, r3
		if (arch_is_in_isr()) {
    7398:	2b00      	cmp	r3, #0
    739a:	d005      	beq.n	73a8 <z_impl_k_thread_abort+0x34>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    739c:	4b07      	ldr	r3, [pc, #28]	; (73bc <z_impl_k_thread_abort+0x48>)
    739e:	685b      	ldr	r3, [r3, #4]
    73a0:	4a06      	ldr	r2, [pc, #24]	; (73bc <z_impl_k_thread_abort+0x48>)
    73a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    73a6:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    73a8:	6878      	ldr	r0, [r7, #4]
    73aa:	f007 f961 	bl	e670 <z_thread_abort>
}
    73ae:	bf00      	nop
    73b0:	3710      	adds	r7, #16
    73b2:	46bd      	mov	sp, r7
    73b4:	bd80      	pop	{r7, pc}
    73b6:	bf00      	nop
    73b8:	20000c00 	.word	0x20000c00
    73bc:	e000ed00 	.word	0xe000ed00

000073c0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    73c0:	b580      	push	{r7, lr}
    73c2:	b084      	sub	sp, #16
    73c4:	af00      	add	r7, sp, #0
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    73c6:	4a0d      	ldr	r2, [pc, #52]	; (73fc <z_arm_configure_static_mpu_regions+0x3c>)
    73c8:	4b0d      	ldr	r3, [pc, #52]	; (7400 <z_arm_configure_static_mpu_regions+0x40>)
    73ca:	2101      	movs	r1, #1
    73cc:	480d      	ldr	r0, [pc, #52]	; (7404 <z_arm_configure_static_mpu_regions+0x44>)
    73ce:	f000 fd21 	bl	7e14 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    73d2:	1d3b      	adds	r3, r7, #4
    73d4:	2200      	movs	r2, #0
    73d6:	601a      	str	r2, [r3, #0]
    73d8:	605a      	str	r2, [r3, #4]
    73da:	609a      	str	r2, [r3, #8]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    73dc:	4b0a      	ldr	r3, [pc, #40]	; (7408 <z_arm_configure_static_mpu_regions+0x48>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    73de:	607b      	str	r3, [r7, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    73e0:	4a07      	ldr	r2, [pc, #28]	; (7400 <z_arm_configure_static_mpu_regions+0x40>)
    73e2:	4b09      	ldr	r3, [pc, #36]	; (7408 <z_arm_configure_static_mpu_regions+0x48>)
    73e4:	1ad3      	subs	r3, r2, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    73e6:	60bb      	str	r3, [r7, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    73e8:	1d3b      	adds	r3, r7, #4
    73ea:	2101      	movs	r1, #1
    73ec:	4618      	mov	r0, r3
    73ee:	f000 fd41 	bl	7e74 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    73f2:	bf00      	nop
    73f4:	3710      	adds	r7, #16
    73f6:	46bd      	mov	sp, r7
    73f8:	bd80      	pop	{r7, pc}
    73fa:	bf00      	nop
    73fc:	20000000 	.word	0x20000000
    7400:	20016000 	.word	0x20016000
    7404:	0001abbc 	.word	0x0001abbc
    7408:	20000260 	.word	0x20000260

0000740c <ARM_MPU_SetRegion>:
* \param rnr Region number to be configured.
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegion(uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
    740c:	b580      	push	{r7, lr}
    740e:	b084      	sub	sp, #16
    7410:	af00      	add	r7, sp, #0
    7412:	60f8      	str	r0, [r7, #12]
    7414:	60b9      	str	r1, [r7, #8]
    7416:	607a      	str	r2, [r7, #4]
  ARM_MPU_SetRegionEx(MPU, rnr, rbar, rlar);
    7418:	687b      	ldr	r3, [r7, #4]
    741a:	68ba      	ldr	r2, [r7, #8]
    741c:	68f9      	ldr	r1, [r7, #12]
    741e:	4803      	ldr	r0, [pc, #12]	; (742c <ARM_MPU_SetRegion+0x20>)
    7420:	f00b fa3c 	bl	1289c <ARM_MPU_SetRegionEx>
}
    7424:	bf00      	nop
    7426:	3710      	adds	r7, #16
    7428:	46bd      	mov	sp, r7
    742a:	bd80      	pop	{r7, pc}
    742c:	e000ed90 	.word	0xe000ed90

00007430 <log_const_source_id>:
{
    7430:	b480      	push	{r7}
    7432:	b083      	sub	sp, #12
    7434:	af00      	add	r7, sp, #0
    7436:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    7438:	687b      	ldr	r3, [r7, #4]
    743a:	4a04      	ldr	r2, [pc, #16]	; (744c <log_const_source_id+0x1c>)
    743c:	1a9b      	subs	r3, r3, r2
    743e:	08db      	lsrs	r3, r3, #3
}
    7440:	4618      	mov	r0, r3
    7442:	370c      	adds	r7, #12
    7444:	46bd      	mov	sp, r7
    7446:	bc80      	pop	{r7}
    7448:	4770      	bx	lr
    744a:	bf00      	nop
    744c:	000170bc 	.word	0x000170bc

00007450 <mpu_init>:
static struct dynamic_region_info dyn_reg_info[MPU_DYNAMIC_REGION_AREAS_NUM];


/* Global MPU configuration at system initialization. */
static void mpu_init(void)
{
    7450:	b480      	push	{r7}
    7452:	af00      	add	r7, sp, #0

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
    7454:	4b03      	ldr	r3, [pc, #12]	; (7464 <mpu_init+0x14>)
    7456:	4a04      	ldr	r2, [pc, #16]	; (7468 <mpu_init+0x18>)
    7458:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
    745a:	bf00      	nop
    745c:	46bd      	mov	sp, r7
    745e:	bc80      	pop	{r7}
    7460:	4770      	bx	lr
    7462:	bf00      	nop
    7464:	e000ed90 	.word	0xe000ed90
    7468:	0044ffaa 	.word	0x0044ffaa

0000746c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    746c:	b580      	push	{r7, lr}
    746e:	b090      	sub	sp, #64	; 0x40
    7470:	af04      	add	r7, sp, #16
    7472:	6078      	str	r0, [r7, #4]
    7474:	6039      	str	r1, [r7, #0]
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    7476:	683b      	ldr	r3, [r7, #0]
    7478:	681b      	ldr	r3, [r3, #0]
    747a:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    747e:	683a      	ldr	r2, [r7, #0]
    7480:	7a12      	ldrb	r2, [r2, #8]
    7482:	f3c2 0204 	ubfx	r2, r2, #0, #5
    7486:	b2d2      	uxtb	r2, r2
    7488:	ea43 0102 	orr.w	r1, r3, r2
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    748c:	683b      	ldr	r3, [r7, #0]
    748e:	68db      	ldr	r3, [r3, #12]
    7490:	f023 021f 	bic.w	r2, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    7494:	683b      	ldr	r3, [r7, #0]
    7496:	7a1b      	ldrb	r3, [r3, #8]
    7498:	f3c3 1342 	ubfx	r3, r3, #5, #3
    749c:	b2db      	uxtb	r3, r3
    749e:	005b      	lsls	r3, r3, #1
			& MPU_RLAR_AttrIndx_Msk)
    74a0:	f003 030e 	and.w	r3, r3, #14
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    74a4:	4313      	orrs	r3, r2
		| MPU_RLAR_EN_Msk
    74a6:	f043 0301 	orr.w	r3, r3, #1
	ARM_MPU_SetRegion(
    74aa:	461a      	mov	r2, r3
    74ac:	6878      	ldr	r0, [r7, #4]
    74ae:	f7ff ffad 	bl	740c <ARM_MPU_SetRegion>
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
    74b2:	2303      	movs	r3, #3
    74b4:	2b03      	cmp	r3, #3
    74b6:	d801      	bhi.n	74bc <region_init+0x50>
    74b8:	bf00      	nop
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    74ba:	e064      	b.n	7586 <region_init+0x11a>
	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
    74bc:	f00b f9e7 	bl	1288e <k_is_user_context>
    74c0:	4603      	mov	r3, r0
    74c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    74c6:	2300      	movs	r3, #0
    74c8:	62bb      	str	r3, [r7, #40]	; 0x28
    74ca:	2303      	movs	r3, #3
    74cc:	2b00      	cmp	r3, #0
    74ce:	d007      	beq.n	74e0 <region_init+0x74>
    74d0:	4b2f      	ldr	r3, [pc, #188]	; (7590 <region_init+0x124>)
    74d2:	681b      	ldr	r3, [r3, #0]
    74d4:	4618      	mov	r0, r3
    74d6:	f7ff ffab 	bl	7430 <log_const_source_id>
    74da:	4603      	mov	r3, r0
    74dc:	b29b      	uxth	r3, r3
    74de:	e000      	b.n	74e2 <region_init+0x76>
    74e0:	2300      	movs	r3, #0
    74e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    74e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    74e8:	2204      	movs	r2, #4
    74ea:	f362 0302 	bfi	r3, r2, #0, #3
    74ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    74f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    74f6:	f36f 03c5 	bfc	r3, #3, #3
    74fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    74fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
    7500:	f3c3 0309 	ubfx	r3, r3, #0, #10
    7504:	b29a      	uxth	r2, r3
    7506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    7508:	f362 138f 	bfi	r3, r2, #6, #10
    750c:	84bb      	strh	r3, [r7, #36]	; 0x24
    750e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    7512:	2b00      	cmp	r3, #0
    7514:	d01a      	beq.n	754c <region_init+0xe0>
    7516:	683b      	ldr	r3, [r7, #0]
    7518:	681b      	ldr	r3, [r3, #0]
    751a:	683a      	ldr	r2, [r7, #0]
    751c:	7a12      	ldrb	r2, [r2, #8]
    751e:	f3c2 0204 	ubfx	r2, r2, #0, #5
    7522:	b2d2      	uxtb	r2, r2
    7524:	4611      	mov	r1, r2
    7526:	683a      	ldr	r2, [r7, #0]
    7528:	7a12      	ldrb	r2, [r2, #8]
    752a:	f3c2 1242 	ubfx	r2, r2, #5, #3
    752e:	b2d2      	uxtb	r2, r2
    7530:	4610      	mov	r0, r2
    7532:	683a      	ldr	r2, [r7, #0]
    7534:	68d2      	ldr	r2, [r2, #12]
    7536:	9203      	str	r2, [sp, #12]
    7538:	9002      	str	r0, [sp, #8]
    753a:	9101      	str	r1, [sp, #4]
    753c:	9300      	str	r3, [sp, #0]
    753e:	687b      	ldr	r3, [r7, #4]
    7540:	4a14      	ldr	r2, [pc, #80]	; (7594 <region_init+0x128>)
    7542:	4915      	ldr	r1, [pc, #84]	; (7598 <region_init+0x12c>)
    7544:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
    7546:	f7fb fb99 	bl	2c7c <log_from_user>
}
    754a:	e01c      	b.n	7586 <region_init+0x11a>
	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
    754c:	4b11      	ldr	r3, [pc, #68]	; (7594 <region_init+0x128>)
    754e:	60fb      	str	r3, [r7, #12]
    7550:	687b      	ldr	r3, [r7, #4]
    7552:	613b      	str	r3, [r7, #16]
    7554:	683b      	ldr	r3, [r7, #0]
    7556:	681b      	ldr	r3, [r3, #0]
    7558:	617b      	str	r3, [r7, #20]
    755a:	683b      	ldr	r3, [r7, #0]
    755c:	7a1b      	ldrb	r3, [r3, #8]
    755e:	f3c3 0304 	ubfx	r3, r3, #0, #5
    7562:	b2db      	uxtb	r3, r3
    7564:	61bb      	str	r3, [r7, #24]
    7566:	683b      	ldr	r3, [r7, #0]
    7568:	7a1b      	ldrb	r3, [r3, #8]
    756a:	f3c3 1342 	ubfx	r3, r3, #5, #3
    756e:	b2db      	uxtb	r3, r3
    7570:	61fb      	str	r3, [r7, #28]
    7572:	683b      	ldr	r3, [r7, #0]
    7574:	68db      	ldr	r3, [r3, #12]
    7576:	623b      	str	r3, [r7, #32]
    7578:	f107 010c 	add.w	r1, r7, #12
    757c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    757e:	2206      	movs	r2, #6
    7580:	4805      	ldr	r0, [pc, #20]	; (7598 <region_init+0x12c>)
    7582:	f009 fcd3 	bl	10f2c <log_n>
}
    7586:	bf00      	nop
    7588:	3730      	adds	r7, #48	; 0x30
    758a:	46bd      	mov	sp, r7
    758c:	bd80      	pop	{r7, pc}
    758e:	bf00      	nop
    7590:	20000114 	.word	0x20000114
    7594:	0001abc8 	.word	0x0001abc8
    7598:	000186d0 	.word	0x000186d0

0000759c <mpu_region_get_base>:
	}
	return -EINVAL;
}

static inline uint32_t mpu_region_get_base(const uint32_t index)
{
    759c:	b480      	push	{r7}
    759e:	b083      	sub	sp, #12
    75a0:	af00      	add	r7, sp, #0
    75a2:	6078      	str	r0, [r7, #4]
	MPU->RNR = index;
    75a4:	4a05      	ldr	r2, [pc, #20]	; (75bc <mpu_region_get_base+0x20>)
    75a6:	687b      	ldr	r3, [r7, #4]
    75a8:	6093      	str	r3, [r2, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    75aa:	4b04      	ldr	r3, [pc, #16]	; (75bc <mpu_region_get_base+0x20>)
    75ac:	68db      	ldr	r3, [r3, #12]
    75ae:	f023 031f 	bic.w	r3, r3, #31
}
    75b2:	4618      	mov	r0, r3
    75b4:	370c      	adds	r7, #12
    75b6:	46bd      	mov	sp, r7
    75b8:	bc80      	pop	{r7}
    75ba:	4770      	bx	lr
    75bc:	e000ed90 	.word	0xe000ed90

000075c0 <mpu_region_set_base>:

static inline void mpu_region_set_base(const uint32_t index, const uint32_t base)
{
    75c0:	b480      	push	{r7}
    75c2:	b083      	sub	sp, #12
    75c4:	af00      	add	r7, sp, #0
    75c6:	6078      	str	r0, [r7, #4]
    75c8:	6039      	str	r1, [r7, #0]
	MPU->RNR = index;
    75ca:	4a09      	ldr	r2, [pc, #36]	; (75f0 <mpu_region_set_base+0x30>)
    75cc:	687b      	ldr	r3, [r7, #4]
    75ce:	6093      	str	r3, [r2, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    75d0:	4b07      	ldr	r3, [pc, #28]	; (75f0 <mpu_region_set_base+0x30>)
    75d2:	68db      	ldr	r3, [r3, #12]
    75d4:	f003 021f 	and.w	r2, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    75d8:	683b      	ldr	r3, [r7, #0]
    75da:	f023 031f 	bic.w	r3, r3, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    75de:	4904      	ldr	r1, [pc, #16]	; (75f0 <mpu_region_set_base+0x30>)
		| (base & MPU_RBAR_BASE_Msk);
    75e0:	4313      	orrs	r3, r2
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    75e2:	60cb      	str	r3, [r1, #12]
}
    75e4:	bf00      	nop
    75e6:	370c      	adds	r7, #12
    75e8:	46bd      	mov	sp, r7
    75ea:	bc80      	pop	{r7}
    75ec:	4770      	bx	lr
    75ee:	bf00      	nop
    75f0:	e000ed90 	.word	0xe000ed90

000075f4 <mpu_region_get_last_addr>:

static inline uint32_t mpu_region_get_last_addr(const uint32_t index)
{
    75f4:	b480      	push	{r7}
    75f6:	b083      	sub	sp, #12
    75f8:	af00      	add	r7, sp, #0
    75fa:	6078      	str	r0, [r7, #4]
	MPU->RNR = index;
    75fc:	4a05      	ldr	r2, [pc, #20]	; (7614 <mpu_region_get_last_addr+0x20>)
    75fe:	687b      	ldr	r3, [r7, #4]
    7600:	6093      	str	r3, [r2, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    7602:	4b04      	ldr	r3, [pc, #16]	; (7614 <mpu_region_get_last_addr+0x20>)
    7604:	691b      	ldr	r3, [r3, #16]
    7606:	f043 031f 	orr.w	r3, r3, #31
}
    760a:	4618      	mov	r0, r3
    760c:	370c      	adds	r7, #12
    760e:	46bd      	mov	sp, r7
    7610:	bc80      	pop	{r7}
    7612:	4770      	bx	lr
    7614:	e000ed90 	.word	0xe000ed90

00007618 <mpu_region_set_limit>:

static inline void mpu_region_set_limit(const uint32_t index, const uint32_t limit)
{
    7618:	b480      	push	{r7}
    761a:	b083      	sub	sp, #12
    761c:	af00      	add	r7, sp, #0
    761e:	6078      	str	r0, [r7, #4]
    7620:	6039      	str	r1, [r7, #0]
	MPU->RNR = index;
    7622:	4a09      	ldr	r2, [pc, #36]	; (7648 <mpu_region_set_limit+0x30>)
    7624:	687b      	ldr	r3, [r7, #4]
    7626:	6093      	str	r3, [r2, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    7628:	4b07      	ldr	r3, [pc, #28]	; (7648 <mpu_region_set_limit+0x30>)
    762a:	691b      	ldr	r3, [r3, #16]
    762c:	f003 021f 	and.w	r2, r3, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    7630:	683b      	ldr	r3, [r7, #0]
    7632:	f023 031f 	bic.w	r3, r3, #31
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    7636:	4904      	ldr	r1, [pc, #16]	; (7648 <mpu_region_set_limit+0x30>)
		| (limit & MPU_RLAR_LIMIT_Msk);
    7638:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    763a:	610b      	str	r3, [r1, #16]
}
    763c:	bf00      	nop
    763e:	370c      	adds	r7, #12
    7640:	46bd      	mov	sp, r7
    7642:	bc80      	pop	{r7}
    7644:	4770      	bx	lr
    7646:	bf00      	nop
    7648:	e000ed90 	.word	0xe000ed90

0000764c <mpu_region_get_access_attr>:

static inline void mpu_region_get_access_attr(const uint32_t index,
	arm_mpu_region_attr_t *attr)
{
    764c:	b480      	push	{r7}
    764e:	b083      	sub	sp, #12
    7650:	af00      	add	r7, sp, #0
    7652:	6078      	str	r0, [r7, #4]
    7654:	6039      	str	r1, [r7, #0]
	MPU->RNR = index;
    7656:	4a0e      	ldr	r2, [pc, #56]	; (7690 <mpu_region_get_access_attr+0x44>)
    7658:	687b      	ldr	r3, [r7, #4]
    765a:	6093      	str	r3, [r2, #8]

	attr->rbar = MPU->RBAR &
    765c:	4b0c      	ldr	r3, [pc, #48]	; (7690 <mpu_region_get_access_attr+0x44>)
    765e:	68db      	ldr	r3, [r3, #12]
    7660:	f003 031f 	and.w	r3, r3, #31
    7664:	b2d9      	uxtb	r1, r3
    7666:	683a      	ldr	r2, [r7, #0]
    7668:	7813      	ldrb	r3, [r2, #0]
    766a:	f361 0304 	bfi	r3, r1, #0, #5
    766e:	7013      	strb	r3, [r2, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    7670:	4b07      	ldr	r3, [pc, #28]	; (7690 <mpu_region_get_access_attr+0x44>)
    7672:	691b      	ldr	r3, [r3, #16]
    7674:	085b      	lsrs	r3, r3, #1
    7676:	f003 0307 	and.w	r3, r3, #7
    767a:	b2d9      	uxtb	r1, r3
    767c:	683a      	ldr	r2, [r7, #0]
    767e:	7813      	ldrb	r3, [r2, #0]
    7680:	f361 1347 	bfi	r3, r1, #5, #3
    7684:	7013      	strb	r3, [r2, #0]
		MPU_RLAR_AttrIndx_Pos;
}
    7686:	bf00      	nop
    7688:	370c      	adds	r7, #12
    768a:	46bd      	mov	sp, r7
    768c:	bc80      	pop	{r7}
    768e:	4770      	bx	lr
    7690:	e000ed90 	.word	0xe000ed90

00007694 <mpu_region_get_conf>:

static inline void mpu_region_get_conf(const uint32_t index,
	struct arm_mpu_region *region_conf)
{
    7694:	b580      	push	{r7, lr}
    7696:	b082      	sub	sp, #8
    7698:	af00      	add	r7, sp, #0
    769a:	6078      	str	r0, [r7, #4]
    769c:	6039      	str	r1, [r7, #0]
	MPU->RNR = index;
    769e:	4a0c      	ldr	r2, [pc, #48]	; (76d0 <mpu_region_get_conf+0x3c>)
    76a0:	687b      	ldr	r3, [r7, #4]
    76a2:	6093      	str	r3, [r2, #8]
	/* Region attribution:
	 * - Cache-ability
	 * - Share-ability
	 * - Access Permissions
	 */
	mpu_region_get_access_attr(index, &region_conf->attr);
    76a4:	683b      	ldr	r3, [r7, #0]
    76a6:	3308      	adds	r3, #8
    76a8:	4619      	mov	r1, r3
    76aa:	6878      	ldr	r0, [r7, #4]
    76ac:	f7ff ffce 	bl	764c <mpu_region_get_access_attr>

	/* Region base address */
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    76b0:	4b07      	ldr	r3, [pc, #28]	; (76d0 <mpu_region_get_conf+0x3c>)
    76b2:	68db      	ldr	r3, [r3, #12]
    76b4:	f023 021f 	bic.w	r2, r3, #31
    76b8:	683b      	ldr	r3, [r7, #0]
    76ba:	601a      	str	r2, [r3, #0]

	/* Region limit address */
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    76bc:	4b04      	ldr	r3, [pc, #16]	; (76d0 <mpu_region_get_conf+0x3c>)
    76be:	691b      	ldr	r3, [r3, #16]
    76c0:	f023 021f 	bic.w	r2, r3, #31
    76c4:	683b      	ldr	r3, [r7, #0]
    76c6:	60da      	str	r2, [r3, #12]
}
    76c8:	bf00      	nop
    76ca:	3708      	adds	r7, #8
    76cc:	46bd      	mov	sp, r7
    76ce:	bd80      	pop	{r7, pc}
    76d0:	e000ed90 	.word	0xe000ed90

000076d4 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    76d4:	b580      	push	{r7, lr}
    76d6:	b092      	sub	sp, #72	; 0x48
    76d8:	af00      	add	r7, sp, #0
    76da:	6078      	str	r0, [r7, #4]
    76dc:	4608      	mov	r0, r1
    76de:	4611      	mov	r1, r2
    76e0:	461a      	mov	r2, r3
    76e2:	4603      	mov	r3, r0
    76e4:	70fb      	strb	r3, [r7, #3]
    76e6:	460b      	mov	r3, r1
    76e8:	70bb      	strb	r3, [r7, #2]
    76ea:	4613      	mov	r3, r2
    76ec:	707b      	strb	r3, [r7, #1]
	int i;
	int reg_index = start_reg_index;
    76ee:	78bb      	ldrb	r3, [r7, #2]
    76f0:	647b      	str	r3, [r7, #68]	; 0x44

	for (i = 0; i < regions_num; i++) {
    76f2:	2300      	movs	r3, #0
    76f4:	643b      	str	r3, [r7, #64]	; 0x40
    76f6:	e1d6      	b.n	7aa6 <mpu_configure_regions_and_partition+0x3d2>
		if (regions[i].size == 0U) {
    76f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    76fa:	4613      	mov	r3, r2
    76fc:	005b      	lsls	r3, r3, #1
    76fe:	4413      	add	r3, r2
    7700:	009b      	lsls	r3, r3, #2
    7702:	461a      	mov	r2, r3
    7704:	687b      	ldr	r3, [r7, #4]
    7706:	4413      	add	r3, r2
    7708:	685b      	ldr	r3, [r3, #4]
    770a:	2b00      	cmp	r3, #0
    770c:	f000 81c7 	beq.w	7a9e <mpu_configure_regions_and_partition+0x3ca>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    7710:	787b      	ldrb	r3, [r7, #1]
    7712:	2b00      	cmp	r3, #0
    7714:	d04e      	beq.n	77b4 <mpu_configure_regions_and_partition+0xe0>
			(!mpu_partition_is_valid(&regions[i]))) {
    7716:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    7718:	4613      	mov	r3, r2
    771a:	005b      	lsls	r3, r3, #1
    771c:	4413      	add	r3, r2
    771e:	009b      	lsls	r3, r3, #2
    7720:	461a      	mov	r2, r3
    7722:	687b      	ldr	r3, [r7, #4]
    7724:	4413      	add	r3, r2
    7726:	4618      	mov	r0, r3
    7728:	f00b f8d4 	bl	128d4 <mpu_partition_is_valid>
    772c:	4603      	mov	r3, r0
		if (do_sanity_check &&
    772e:	2b00      	cmp	r3, #0
    7730:	d140      	bne.n	77b4 <mpu_configure_regions_and_partition+0xe0>
			LOG_ERR("Partition %u: sanity check failed.", i);
    7732:	2303      	movs	r3, #3
    7734:	2b00      	cmp	r3, #0
    7736:	d039      	beq.n	77ac <mpu_configure_regions_and_partition+0xd8>
    7738:	f00b f8a9 	bl	1288e <k_is_user_context>
    773c:	4603      	mov	r3, r0
    773e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    7742:	2300      	movs	r3, #0
    7744:	627b      	str	r3, [r7, #36]	; 0x24
    7746:	2303      	movs	r3, #3
    7748:	2b00      	cmp	r3, #0
    774a:	d007      	beq.n	775c <mpu_configure_regions_and_partition+0x88>
    774c:	4ba9      	ldr	r3, [pc, #676]	; (79f4 <mpu_configure_regions_and_partition+0x320>)
    774e:	681b      	ldr	r3, [r3, #0]
    7750:	4618      	mov	r0, r3
    7752:	f7ff fe6d 	bl	7430 <log_const_source_id>
    7756:	4603      	mov	r3, r0
    7758:	b29b      	uxth	r3, r3
    775a:	e000      	b.n	775e <mpu_configure_regions_and_partition+0x8a>
    775c:	2300      	movs	r3, #0
    775e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    7760:	f897 3020 	ldrb.w	r3, [r7, #32]
    7764:	2201      	movs	r2, #1
    7766:	f362 0302 	bfi	r3, r2, #0, #3
    776a:	f887 3020 	strb.w	r3, [r7, #32]
    776e:	f897 3020 	ldrb.w	r3, [r7, #32]
    7772:	f36f 03c5 	bfc	r3, #3, #3
    7776:	f887 3020 	strb.w	r3, [r7, #32]
    777a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
    777c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    7780:	b29a      	uxth	r2, r3
    7782:	8c3b      	ldrh	r3, [r7, #32]
    7784:	f362 138f 	bfi	r3, r2, #6, #10
    7788:	843b      	strh	r3, [r7, #32]
    778a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    778e:	2b00      	cmp	r3, #0
    7790:	d005      	beq.n	779e <mpu_configure_regions_and_partition+0xca>
    7792:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    7794:	4998      	ldr	r1, [pc, #608]	; (79f8 <mpu_configure_regions_and_partition+0x324>)
    7796:	8c38      	ldrh	r0, [r7, #32]
    7798:	f7fb fa70 	bl	2c7c <log_from_user>
    779c:	e007      	b.n	77ae <mpu_configure_regions_and_partition+0xda>
    779e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    77a0:	8c3a      	ldrh	r2, [r7, #32]
    77a2:	4619      	mov	r1, r3
    77a4:	4894      	ldr	r0, [pc, #592]	; (79f8 <mpu_configure_regions_and_partition+0x324>)
    77a6:	f009 fb77 	bl	10e98 <log_1>
    77aa:	e000      	b.n	77ae <mpu_configure_regions_and_partition+0xda>
    77ac:	bf00      	nop
			return -EINVAL;
    77ae:	f06f 0315 	mvn.w	r3, #21
    77b2:	e17e      	b.n	7ab2 <mpu_configure_regions_and_partition+0x3de>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
    77b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    77b6:	4613      	mov	r3, r2
    77b8:	005b      	lsls	r3, r3, #1
    77ba:	4413      	add	r3, r2
    77bc:	009b      	lsls	r3, r3, #2
    77be:	461a      	mov	r2, r3
    77c0:	687b      	ldr	r3, [r7, #4]
    77c2:	4413      	add	r3, r2
    77c4:	6818      	ldr	r0, [r3, #0]
    77c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    77c8:	4613      	mov	r3, r2
    77ca:	005b      	lsls	r3, r3, #1
    77cc:	4413      	add	r3, r2
    77ce:	009b      	lsls	r3, r3, #2
    77d0:	461a      	mov	r2, r3
    77d2:	687b      	ldr	r3, [r7, #4]
    77d4:	4413      	add	r3, r2
    77d6:	685b      	ldr	r3, [r3, #4]
    77d8:	4619      	mov	r1, r3
    77da:	f00b f89b 	bl	12914 <get_region_index>
    77de:	63b8      	str	r0, [r7, #56]	; 0x38

		if ((u_reg_index == -EINVAL) ||
    77e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    77e2:	f113 0f16 	cmn.w	r3, #22
    77e6:	d004      	beq.n	77f2 <mpu_configure_regions_and_partition+0x11e>
			(u_reg_index > (reg_index - 1))) {
    77e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    77ea:	3b01      	subs	r3, #1
		if ((u_reg_index == -EINVAL) ||
    77ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
    77ee:	429a      	cmp	r2, r3
    77f0:	dd3c      	ble.n	786c <mpu_configure_regions_and_partition+0x198>
			LOG_ERR("Invalid underlying region index %u",
    77f2:	2303      	movs	r3, #3
    77f4:	2b00      	cmp	r3, #0
    77f6:	d035      	beq.n	7864 <mpu_configure_regions_and_partition+0x190>
    77f8:	f00b f849 	bl	1288e <k_is_user_context>
    77fc:	4603      	mov	r3, r0
    77fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    7802:	2300      	movs	r3, #0
    7804:	61fb      	str	r3, [r7, #28]
    7806:	2303      	movs	r3, #3
    7808:	2b00      	cmp	r3, #0
    780a:	d007      	beq.n	781c <mpu_configure_regions_and_partition+0x148>
    780c:	4b79      	ldr	r3, [pc, #484]	; (79f4 <mpu_configure_regions_and_partition+0x320>)
    780e:	681b      	ldr	r3, [r3, #0]
    7810:	4618      	mov	r0, r3
    7812:	f7ff fe0d 	bl	7430 <log_const_source_id>
    7816:	4603      	mov	r3, r0
    7818:	b29b      	uxth	r3, r3
    781a:	e000      	b.n	781e <mpu_configure_regions_and_partition+0x14a>
    781c:	2300      	movs	r3, #0
    781e:	853b      	strh	r3, [r7, #40]	; 0x28
    7820:	7e3b      	ldrb	r3, [r7, #24]
    7822:	2201      	movs	r2, #1
    7824:	f362 0302 	bfi	r3, r2, #0, #3
    7828:	763b      	strb	r3, [r7, #24]
    782a:	7e3b      	ldrb	r3, [r7, #24]
    782c:	f36f 03c5 	bfc	r3, #3, #3
    7830:	763b      	strb	r3, [r7, #24]
    7832:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    7834:	f3c3 0309 	ubfx	r3, r3, #0, #10
    7838:	b29a      	uxth	r2, r3
    783a:	8b3b      	ldrh	r3, [r7, #24]
    783c:	f362 138f 	bfi	r3, r2, #6, #10
    7840:	833b      	strh	r3, [r7, #24]
    7842:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    7846:	2b00      	cmp	r3, #0
    7848:	d005      	beq.n	7856 <mpu_configure_regions_and_partition+0x182>
    784a:	6bba      	ldr	r2, [r7, #56]	; 0x38
    784c:	496b      	ldr	r1, [pc, #428]	; (79fc <mpu_configure_regions_and_partition+0x328>)
    784e:	8b38      	ldrh	r0, [r7, #24]
    7850:	f7fb fa14 	bl	2c7c <log_from_user>
    7854:	e007      	b.n	7866 <mpu_configure_regions_and_partition+0x192>
    7856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7858:	8b3a      	ldrh	r2, [r7, #24]
    785a:	4619      	mov	r1, r3
    785c:	4867      	ldr	r0, [pc, #412]	; (79fc <mpu_configure_regions_and_partition+0x328>)
    785e:	f009 fb1b 	bl	10e98 <log_1>
    7862:	e000      	b.n	7866 <mpu_configure_regions_and_partition+0x192>
    7864:	bf00      	nop
				u_reg_index);
			return -EINVAL;
    7866:	f06f 0315 	mvn.w	r3, #21
    786a:	e122      	b.n	7ab2 <mpu_configure_regions_and_partition+0x3de>

		/*
		 * The new memory region is to be placed inside the underlying
		 * region, possibly splitting the underlying region into two.
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
    786c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    786e:	4618      	mov	r0, r3
    7870:	f7ff fe94 	bl	759c <mpu_region_get_base>
    7874:	6378      	str	r0, [r7, #52]	; 0x34
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
    7876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7878:	4618      	mov	r0, r3
    787a:	f7ff febb 	bl	75f4 <mpu_region_get_last_addr>
    787e:	6338      	str	r0, [r7, #48]	; 0x30
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    7880:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    7882:	4613      	mov	r3, r2
    7884:	005b      	lsls	r3, r3, #1
    7886:	4413      	add	r3, r2
    7888:	009b      	lsls	r3, r3, #2
    788a:	461a      	mov	r2, r3
    788c:	687b      	ldr	r3, [r7, #4]
    788e:	4413      	add	r3, r2
    7890:	6819      	ldr	r1, [r3, #0]
    7892:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    7894:	4613      	mov	r3, r2
    7896:	005b      	lsls	r3, r3, #1
    7898:	4413      	add	r3, r2
    789a:	009b      	lsls	r3, r3, #2
    789c:	461a      	mov	r2, r3
    789e:	687b      	ldr	r3, [r7, #4]
    78a0:	4413      	add	r3, r2
    78a2:	685b      	ldr	r3, [r3, #4]
    78a4:	440b      	add	r3, r1
    78a6:	3b01      	subs	r3, #1
    78a8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if ((regions[i].start == u_reg_base) &&
    78aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    78ac:	4613      	mov	r3, r2
    78ae:	005b      	lsls	r3, r3, #1
    78b0:	4413      	add	r3, r2
    78b2:	009b      	lsls	r3, r3, #2
    78b4:	461a      	mov	r2, r3
    78b6:	687b      	ldr	r3, [r7, #4]
    78b8:	4413      	add	r3, r2
    78ba:	681b      	ldr	r3, [r3, #0]
    78bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    78be:	429a      	cmp	r2, r3
    78c0:	d111      	bne.n	78e6 <mpu_configure_regions_and_partition+0x212>
    78c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    78c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    78c6:	429a      	cmp	r2, r3
    78c8:	d10d      	bne.n	78e6 <mpu_configure_regions_and_partition+0x212>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    78ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    78cc:	b2d8      	uxtb	r0, r3
    78ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    78d0:	4613      	mov	r3, r2
    78d2:	005b      	lsls	r3, r3, #1
    78d4:	4413      	add	r3, r2
    78d6:	009b      	lsls	r3, r3, #2
    78d8:	461a      	mov	r2, r3
    78da:	687b      	ldr	r3, [r7, #4]
    78dc:	4413      	add	r3, r2
    78de:	4619      	mov	r1, r3
    78e0:	f000 fa14 	bl	7d0c <mpu_configure_region>
    78e4:	e0dc      	b.n	7aa0 <mpu_configure_regions_and_partition+0x3cc>
		} else if (regions[i].start == u_reg_base) {
    78e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    78e8:	4613      	mov	r3, r2
    78ea:	005b      	lsls	r3, r3, #1
    78ec:	4413      	add	r3, r2
    78ee:	009b      	lsls	r3, r3, #2
    78f0:	461a      	mov	r2, r3
    78f2:	687b      	ldr	r3, [r7, #4]
    78f4:	4413      	add	r3, r2
    78f6:	681b      	ldr	r3, [r3, #0]
    78f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    78fa:	429a      	cmp	r2, r3
    78fc:	d12e      	bne.n	795c <mpu_configure_regions_and_partition+0x288>
			/* The new region starts exactly at the start of the
			 * underlying region; the start of the underlying
			 * region needs to be set to the end of the new region.
			 */
			mpu_region_set_base(u_reg_index,
    78fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
				regions[i].start + regions[i].size);
    7900:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    7902:	4613      	mov	r3, r2
    7904:	005b      	lsls	r3, r3, #1
    7906:	4413      	add	r3, r2
    7908:	009b      	lsls	r3, r3, #2
    790a:	461a      	mov	r2, r3
    790c:	687b      	ldr	r3, [r7, #4]
    790e:	4413      	add	r3, r2
    7910:	6819      	ldr	r1, [r3, #0]
    7912:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    7914:	4613      	mov	r3, r2
    7916:	005b      	lsls	r3, r3, #1
    7918:	4413      	add	r3, r2
    791a:	009b      	lsls	r3, r3, #2
    791c:	461a      	mov	r2, r3
    791e:	687b      	ldr	r3, [r7, #4]
    7920:	4413      	add	r3, r2
    7922:	685b      	ldr	r3, [r3, #4]
    7924:	440b      	add	r3, r1
			mpu_region_set_base(u_reg_index,
    7926:	4619      	mov	r1, r3
    7928:	f7ff fe4a 	bl	75c0 <mpu_region_set_base>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    792c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    792e:	b2d8      	uxtb	r0, r3
    7930:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    7932:	4613      	mov	r3, r2
    7934:	005b      	lsls	r3, r3, #1
    7936:	4413      	add	r3, r2
    7938:	009b      	lsls	r3, r3, #2
    793a:	461a      	mov	r2, r3
    793c:	687b      	ldr	r3, [r7, #4]
    793e:	4413      	add	r3, r2
    7940:	4619      	mov	r1, r3
    7942:	f000 f9e3 	bl	7d0c <mpu_configure_region>
    7946:	6478      	str	r0, [r7, #68]	; 0x44

			if (reg_index == -EINVAL) {
    7948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    794a:	f113 0f16 	cmn.w	r3, #22
    794e:	d101      	bne.n	7954 <mpu_configure_regions_and_partition+0x280>
				return reg_index;
    7950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7952:	e0ae      	b.n	7ab2 <mpu_configure_regions_and_partition+0x3de>
			}

			reg_index++;
    7954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7956:	3301      	adds	r3, #1
    7958:	647b      	str	r3, [r7, #68]	; 0x44
    795a:	e0a1      	b.n	7aa0 <mpu_configure_regions_and_partition+0x3cc>
		} else if (reg_last == u_reg_last) {
    795c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7960:	429a      	cmp	r2, r3
    7962:	d125      	bne.n	79b0 <mpu_configure_regions_and_partition+0x2dc>
			/* The new region ends exactly at the end of the
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
    7964:	6bb8      	ldr	r0, [r7, #56]	; 0x38
				regions[i].start - 1);
    7966:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    7968:	4613      	mov	r3, r2
    796a:	005b      	lsls	r3, r3, #1
    796c:	4413      	add	r3, r2
    796e:	009b      	lsls	r3, r3, #2
    7970:	461a      	mov	r2, r3
    7972:	687b      	ldr	r3, [r7, #4]
    7974:	4413      	add	r3, r2
    7976:	681b      	ldr	r3, [r3, #0]
    7978:	3b01      	subs	r3, #1
			mpu_region_set_limit(u_reg_index,
    797a:	4619      	mov	r1, r3
    797c:	f7ff fe4c 	bl	7618 <mpu_region_set_limit>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    7980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7982:	b2d8      	uxtb	r0, r3
    7984:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    7986:	4613      	mov	r3, r2
    7988:	005b      	lsls	r3, r3, #1
    798a:	4413      	add	r3, r2
    798c:	009b      	lsls	r3, r3, #2
    798e:	461a      	mov	r2, r3
    7990:	687b      	ldr	r3, [r7, #4]
    7992:	4413      	add	r3, r2
    7994:	4619      	mov	r1, r3
    7996:	f000 f9b9 	bl	7d0c <mpu_configure_region>
    799a:	6478      	str	r0, [r7, #68]	; 0x44

			if (reg_index == -EINVAL) {
    799c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    799e:	f113 0f16 	cmn.w	r3, #22
    79a2:	d101      	bne.n	79a8 <mpu_configure_regions_and_partition+0x2d4>
				return reg_index;
    79a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    79a6:	e084      	b.n	7ab2 <mpu_configure_regions_and_partition+0x3de>
			}

			reg_index++;
    79a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    79aa:	3301      	adds	r3, #1
    79ac:	647b      	str	r3, [r7, #68]	; 0x44
    79ae:	e077      	b.n	7aa0 <mpu_configure_regions_and_partition+0x3cc>
		} else {
			/* The new regions lies strictly inside the
			 * underlying region, which needs to split
			 * into two regions.
			 */
			mpu_region_set_limit(u_reg_index,
    79b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
				regions[i].start - 1);
    79b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    79b4:	4613      	mov	r3, r2
    79b6:	005b      	lsls	r3, r3, #1
    79b8:	4413      	add	r3, r2
    79ba:	009b      	lsls	r3, r3, #2
    79bc:	461a      	mov	r2, r3
    79be:	687b      	ldr	r3, [r7, #4]
    79c0:	4413      	add	r3, r2
    79c2:	681b      	ldr	r3, [r3, #0]
    79c4:	3b01      	subs	r3, #1
			mpu_region_set_limit(u_reg_index,
    79c6:	4619      	mov	r1, r3
    79c8:	f7ff fe26 	bl	7618 <mpu_region_set_limit>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    79cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    79ce:	b2d8      	uxtb	r0, r3
    79d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    79d2:	4613      	mov	r3, r2
    79d4:	005b      	lsls	r3, r3, #1
    79d6:	4413      	add	r3, r2
    79d8:	009b      	lsls	r3, r3, #2
    79da:	461a      	mov	r2, r3
    79dc:	687b      	ldr	r3, [r7, #4]
    79de:	4413      	add	r3, r2
    79e0:	4619      	mov	r1, r3
    79e2:	f000 f993 	bl	7d0c <mpu_configure_region>
    79e6:	6478      	str	r0, [r7, #68]	; 0x44

			if (reg_index == -EINVAL) {
    79e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    79ea:	f113 0f16 	cmn.w	r3, #22
    79ee:	d107      	bne.n	7a00 <mpu_configure_regions_and_partition+0x32c>
				return reg_index;
    79f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    79f2:	e05e      	b.n	7ab2 <mpu_configure_regions_and_partition+0x3de>
    79f4:	20000114 	.word	0x20000114
    79f8:	000186f8 	.word	0x000186f8
    79fc:	0001871c 	.word	0x0001871c
			}
			reg_index++;
    7a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7a02:	3301      	adds	r3, #1
    7a04:	647b      	str	r3, [r7, #68]	; 0x44
			 * access attributes as the initial underlying
			 * region.
			 */
			struct arm_mpu_region fill_region;

			mpu_region_get_access_attr(u_reg_index,
    7a06:	6bba      	ldr	r2, [r7, #56]	; 0x38
    7a08:	f107 0308 	add.w	r3, r7, #8
    7a0c:	3308      	adds	r3, #8
    7a0e:	4619      	mov	r1, r3
    7a10:	4610      	mov	r0, r2
    7a12:	f7ff fe1b 	bl	764c <mpu_region_get_access_attr>
				&fill_region.attr);
			fill_region.base = regions[i].start +
    7a16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    7a18:	4613      	mov	r3, r2
    7a1a:	005b      	lsls	r3, r3, #1
    7a1c:	4413      	add	r3, r2
    7a1e:	009b      	lsls	r3, r3, #2
    7a20:	461a      	mov	r2, r3
    7a22:	687b      	ldr	r3, [r7, #4]
    7a24:	4413      	add	r3, r2
    7a26:	6819      	ldr	r1, [r3, #0]
				regions[i].size;
    7a28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    7a2a:	4613      	mov	r3, r2
    7a2c:	005b      	lsls	r3, r3, #1
    7a2e:	4413      	add	r3, r2
    7a30:	009b      	lsls	r3, r3, #2
    7a32:	461a      	mov	r2, r3
    7a34:	687b      	ldr	r3, [r7, #4]
    7a36:	4413      	add	r3, r2
    7a38:	685b      	ldr	r3, [r3, #4]
			fill_region.base = regions[i].start +
    7a3a:	440b      	add	r3, r1
    7a3c:	60bb      	str	r3, [r7, #8]
			fill_region.attr.r_limit =
			REGION_LIMIT_ADDR((regions[i].start +
    7a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    7a40:	4613      	mov	r3, r2
    7a42:	005b      	lsls	r3, r3, #1
    7a44:	4413      	add	r3, r2
    7a46:	009b      	lsls	r3, r3, #2
    7a48:	461a      	mov	r2, r3
    7a4a:	687b      	ldr	r3, [r7, #4]
    7a4c:	4413      	add	r3, r2
    7a4e:	6819      	ldr	r1, [r3, #0]
    7a50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    7a52:	4613      	mov	r3, r2
    7a54:	005b      	lsls	r3, r3, #1
    7a56:	4413      	add	r3, r2
    7a58:	009b      	lsls	r3, r3, #2
    7a5a:	461a      	mov	r2, r3
    7a5c:	687b      	ldr	r3, [r7, #4]
    7a5e:	4413      	add	r3, r2
    7a60:	685b      	ldr	r3, [r3, #4]
    7a62:	440b      	add	r3, r1
    7a64:	f023 021f 	bic.w	r2, r3, #31
    7a68:	6b39      	ldr	r1, [r7, #48]	; 0x30
    7a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7a6c:	1acb      	subs	r3, r1, r3
    7a6e:	4413      	add	r3, r2
    7a70:	3b01      	subs	r3, #1
    7a72:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    7a76:	617b      	str	r3, [r7, #20]
				regions[i].size), (u_reg_last - reg_last));

			reg_index =
				region_allocate_and_init(reg_index,
    7a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7a7a:	b2db      	uxtb	r3, r3
    7a7c:	f107 0208 	add.w	r2, r7, #8
    7a80:	4611      	mov	r1, r2
    7a82:	4618      	mov	r0, r3
    7a84:	f000 f8ae 	bl	7be4 <region_allocate_and_init>
    7a88:	6478      	str	r0, [r7, #68]	; 0x44
					(const struct arm_mpu_region *)
						&fill_region);

			if (reg_index == -EINVAL) {
    7a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7a8c:	f113 0f16 	cmn.w	r3, #22
    7a90:	d101      	bne.n	7a96 <mpu_configure_regions_and_partition+0x3c2>
				return reg_index;
    7a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7a94:	e00d      	b.n	7ab2 <mpu_configure_regions_and_partition+0x3de>
			}

			reg_index++;
    7a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7a98:	3301      	adds	r3, #1
    7a9a:	647b      	str	r3, [r7, #68]	; 0x44
    7a9c:	e000      	b.n	7aa0 <mpu_configure_regions_and_partition+0x3cc>
			continue;
    7a9e:	bf00      	nop
	for (i = 0; i < regions_num; i++) {
    7aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7aa2:	3301      	adds	r3, #1
    7aa4:	643b      	str	r3, [r7, #64]	; 0x40
    7aa6:	78fb      	ldrb	r3, [r7, #3]
    7aa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    7aaa:	429a      	cmp	r2, r3
    7aac:	f6ff ae24 	blt.w	76f8 <mpu_configure_regions_and_partition+0x24>
		}
	}

	return reg_index;
    7ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    7ab2:	4618      	mov	r0, r3
    7ab4:	3748      	adds	r7, #72	; 0x48
    7ab6:	46bd      	mov	sp, r7
    7ab8:	bd80      	pop	{r7, pc}
    7aba:	bf00      	nop

00007abc <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    7abc:	b580      	push	{r7, lr}
    7abe:	b086      	sub	sp, #24
    7ac0:	af00      	add	r7, sp, #0
    7ac2:	60f8      	str	r0, [r7, #12]
    7ac4:	607a      	str	r2, [r7, #4]
    7ac6:	603b      	str	r3, [r7, #0]
    7ac8:	460b      	mov	r3, r1
    7aca:	72fb      	strb	r3, [r7, #11]
	int mpu_reg_index = static_regions_num;
    7acc:	4b09      	ldr	r3, [pc, #36]	; (7af4 <mpu_configure_static_mpu_regions+0x38>)
    7ace:	781b      	ldrb	r3, [r3, #0]
    7ad0:	617b      	str	r3, [r7, #20]
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    7ad2:	697b      	ldr	r3, [r7, #20]
    7ad4:	b2da      	uxtb	r2, r3
    7ad6:	7af9      	ldrb	r1, [r7, #11]
    7ad8:	2301      	movs	r3, #1
    7ada:	68f8      	ldr	r0, [r7, #12]
    7adc:	f7ff fdfa 	bl	76d4 <mpu_configure_regions_and_partition>
    7ae0:	6178      	str	r0, [r7, #20]
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    7ae2:	697b      	ldr	r3, [r7, #20]
    7ae4:	b2da      	uxtb	r2, r3
    7ae6:	4b03      	ldr	r3, [pc, #12]	; (7af4 <mpu_configure_static_mpu_regions+0x38>)
    7ae8:	701a      	strb	r2, [r3, #0]

	return mpu_reg_index;
    7aea:	697b      	ldr	r3, [r7, #20]
}
    7aec:	4618      	mov	r0, r3
    7aee:	3718      	adds	r7, #24
    7af0:	46bd      	mov	sp, r7
    7af2:	bd80      	pop	{r7, pc}
    7af4:	20000c6b 	.word	0x20000c6b

00007af8 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    7af8:	b580      	push	{r7, lr}
    7afa:	b084      	sub	sp, #16
    7afc:	af00      	add	r7, sp, #0
    7afe:	6078      	str	r0, [r7, #4]
    7b00:	460b      	mov	r3, r1
    7b02:	70fb      	strb	r3, [r7, #3]
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    7b04:	2300      	movs	r3, #0
    7b06:	60fb      	str	r3, [r7, #12]
    7b08:	e05e      	b.n	7bc8 <mpu_mark_areas_for_dynamic_regions+0xd0>
		if (dyn_region_areas[i].size == 0U) {
    7b0a:	68fa      	ldr	r2, [r7, #12]
    7b0c:	4613      	mov	r3, r2
    7b0e:	005b      	lsls	r3, r3, #1
    7b10:	4413      	add	r3, r2
    7b12:	009b      	lsls	r3, r3, #2
    7b14:	461a      	mov	r2, r3
    7b16:	687b      	ldr	r3, [r7, #4]
    7b18:	4413      	add	r3, r2
    7b1a:	685b      	ldr	r3, [r3, #4]
    7b1c:	2b00      	cmp	r3, #0
    7b1e:	d04f      	beq.n	7bc0 <mpu_mark_areas_for_dynamic_regions+0xc8>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    7b20:	68fa      	ldr	r2, [r7, #12]
    7b22:	4613      	mov	r3, r2
    7b24:	005b      	lsls	r3, r3, #1
    7b26:	4413      	add	r3, r2
    7b28:	009b      	lsls	r3, r3, #2
    7b2a:	461a      	mov	r2, r3
    7b2c:	687b      	ldr	r3, [r7, #4]
    7b2e:	4413      	add	r3, r2
    7b30:	6818      	ldr	r0, [r3, #0]
					dyn_region_areas[i].size);
    7b32:	68fa      	ldr	r2, [r7, #12]
    7b34:	4613      	mov	r3, r2
    7b36:	005b      	lsls	r3, r3, #1
    7b38:	4413      	add	r3, r2
    7b3a:	009b      	lsls	r3, r3, #2
    7b3c:	461a      	mov	r2, r3
    7b3e:	687b      	ldr	r3, [r7, #4]
    7b40:	4413      	add	r3, r2
			get_region_index(dyn_region_areas[i].start,
    7b42:	685b      	ldr	r3, [r3, #4]
    7b44:	4619      	mov	r1, r3
    7b46:	f00a fee5 	bl	12914 <get_region_index>
    7b4a:	4601      	mov	r1, r0
		dyn_reg_info[i].index =
    7b4c:	4823      	ldr	r0, [pc, #140]	; (7bdc <mpu_mark_areas_for_dynamic_regions+0xe4>)
    7b4e:	68fa      	ldr	r2, [r7, #12]
    7b50:	4613      	mov	r3, r2
    7b52:	009b      	lsls	r3, r3, #2
    7b54:	4413      	add	r3, r2
    7b56:	009b      	lsls	r3, r3, #2
    7b58:	4403      	add	r3, r0
    7b5a:	6019      	str	r1, [r3, #0]

		if (dyn_reg_info[i].index == -EINVAL) {
    7b5c:	491f      	ldr	r1, [pc, #124]	; (7bdc <mpu_mark_areas_for_dynamic_regions+0xe4>)
    7b5e:	68fa      	ldr	r2, [r7, #12]
    7b60:	4613      	mov	r3, r2
    7b62:	009b      	lsls	r3, r3, #2
    7b64:	4413      	add	r3, r2
    7b66:	009b      	lsls	r3, r3, #2
    7b68:	440b      	add	r3, r1
    7b6a:	681b      	ldr	r3, [r3, #0]
    7b6c:	f113 0f16 	cmn.w	r3, #22
    7b70:	d102      	bne.n	7b78 <mpu_mark_areas_for_dynamic_regions+0x80>

			return -EINVAL;
    7b72:	f06f 0315 	mvn.w	r3, #21
    7b76:	e02c      	b.n	7bd2 <mpu_mark_areas_for_dynamic_regions+0xda>
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    7b78:	4918      	ldr	r1, [pc, #96]	; (7bdc <mpu_mark_areas_for_dynamic_regions+0xe4>)
    7b7a:	68fa      	ldr	r2, [r7, #12]
    7b7c:	4613      	mov	r3, r2
    7b7e:	009b      	lsls	r3, r3, #2
    7b80:	4413      	add	r3, r2
    7b82:	009b      	lsls	r3, r3, #2
    7b84:	440b      	add	r3, r1
    7b86:	681b      	ldr	r3, [r3, #0]
    7b88:	4a15      	ldr	r2, [pc, #84]	; (7be0 <mpu_mark_areas_for_dynamic_regions+0xe8>)
    7b8a:	7812      	ldrb	r2, [r2, #0]
    7b8c:	4293      	cmp	r3, r2
    7b8e:	db02      	blt.n	7b96 <mpu_mark_areas_for_dynamic_regions+0x9e>

			return -EINVAL;
    7b90:	f06f 0315 	mvn.w	r3, #21
    7b94:	e01d      	b.n	7bd2 <mpu_mark_areas_for_dynamic_regions+0xda>
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    7b96:	4911      	ldr	r1, [pc, #68]	; (7bdc <mpu_mark_areas_for_dynamic_regions+0xe4>)
    7b98:	68fa      	ldr	r2, [r7, #12]
    7b9a:	4613      	mov	r3, r2
    7b9c:	009b      	lsls	r3, r3, #2
    7b9e:	4413      	add	r3, r2
    7ba0:	009b      	lsls	r3, r3, #2
    7ba2:	440b      	add	r3, r1
    7ba4:	681b      	ldr	r3, [r3, #0]
    7ba6:	4618      	mov	r0, r3
    7ba8:	68fa      	ldr	r2, [r7, #12]
    7baa:	4613      	mov	r3, r2
    7bac:	009b      	lsls	r3, r3, #2
    7bae:	4413      	add	r3, r2
    7bb0:	009b      	lsls	r3, r3, #2
    7bb2:	4a0a      	ldr	r2, [pc, #40]	; (7bdc <mpu_mark_areas_for_dynamic_regions+0xe4>)
    7bb4:	4413      	add	r3, r2
    7bb6:	3304      	adds	r3, #4
    7bb8:	4619      	mov	r1, r3
    7bba:	f7ff fd6b 	bl	7694 <mpu_region_get_conf>
    7bbe:	e000      	b.n	7bc2 <mpu_mark_areas_for_dynamic_regions+0xca>
			continue;
    7bc0:	bf00      	nop
	for (int i = 0; i < dyn_region_areas_num; i++) {
    7bc2:	68fb      	ldr	r3, [r7, #12]
    7bc4:	3301      	adds	r3, #1
    7bc6:	60fb      	str	r3, [r7, #12]
    7bc8:	78fb      	ldrb	r3, [r7, #3]
    7bca:	68fa      	ldr	r2, [r7, #12]
    7bcc:	429a      	cmp	r2, r3
    7bce:	db9c      	blt.n	7b0a <mpu_mark_areas_for_dynamic_regions+0x12>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    7bd0:	2300      	movs	r3, #0
}
    7bd2:	4618      	mov	r0, r3
    7bd4:	3710      	adds	r7, #16
    7bd6:	46bd      	mov	sp, r7
    7bd8:	bd80      	pop	{r7, pc}
    7bda:	bf00      	nop
    7bdc:	20000b44 	.word	0x20000b44
    7be0:	20000c6b 	.word	0x20000c6b

00007be4 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    7be4:	b590      	push	{r4, r7, lr}
    7be6:	b089      	sub	sp, #36	; 0x24
    7be8:	af00      	add	r7, sp, #0
    7bea:	4603      	mov	r3, r0
    7bec:	6039      	str	r1, [r7, #0]
    7bee:	71fb      	strb	r3, [r7, #7]
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    7bf0:	79fc      	ldrb	r4, [r7, #7]
    7bf2:	f00a fe68 	bl	128c6 <get_num_regions>
    7bf6:	4603      	mov	r3, r0
    7bf8:	3b01      	subs	r3, #1
    7bfa:	429c      	cmp	r4, r3
    7bfc:	d93b      	bls.n	7c76 <region_allocate_and_init+0x92>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7bfe:	2303      	movs	r3, #3
    7c00:	2b00      	cmp	r3, #0
    7c02:	d034      	beq.n	7c6e <region_allocate_and_init+0x8a>
    7c04:	f00a fe43 	bl	1288e <k_is_user_context>
    7c08:	4603      	mov	r3, r0
    7c0a:	76fb      	strb	r3, [r7, #27]
    7c0c:	2300      	movs	r3, #0
    7c0e:	617b      	str	r3, [r7, #20]
    7c10:	2303      	movs	r3, #3
    7c12:	2b00      	cmp	r3, #0
    7c14:	d007      	beq.n	7c26 <region_allocate_and_init+0x42>
    7c16:	4b39      	ldr	r3, [pc, #228]	; (7cfc <region_allocate_and_init+0x118>)
    7c18:	681b      	ldr	r3, [r3, #0]
    7c1a:	4618      	mov	r0, r3
    7c1c:	f7ff fc08 	bl	7430 <log_const_source_id>
    7c20:	4603      	mov	r3, r0
    7c22:	b29b      	uxth	r3, r3
    7c24:	e000      	b.n	7c28 <region_allocate_and_init+0x44>
    7c26:	2300      	movs	r3, #0
    7c28:	833b      	strh	r3, [r7, #24]
    7c2a:	7c3b      	ldrb	r3, [r7, #16]
    7c2c:	2201      	movs	r2, #1
    7c2e:	f362 0302 	bfi	r3, r2, #0, #3
    7c32:	743b      	strb	r3, [r7, #16]
    7c34:	7c3b      	ldrb	r3, [r7, #16]
    7c36:	f36f 03c5 	bfc	r3, #3, #3
    7c3a:	743b      	strb	r3, [r7, #16]
    7c3c:	8b3b      	ldrh	r3, [r7, #24]
    7c3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    7c42:	b29a      	uxth	r2, r3
    7c44:	8a3b      	ldrh	r3, [r7, #16]
    7c46:	f362 138f 	bfi	r3, r2, #6, #10
    7c4a:	823b      	strh	r3, [r7, #16]
    7c4c:	7efb      	ldrb	r3, [r7, #27]
    7c4e:	2b00      	cmp	r3, #0
    7c50:	d006      	beq.n	7c60 <region_allocate_and_init+0x7c>
    7c52:	79fb      	ldrb	r3, [r7, #7]
    7c54:	461a      	mov	r2, r3
    7c56:	492a      	ldr	r1, [pc, #168]	; (7d00 <region_allocate_and_init+0x11c>)
    7c58:	8a38      	ldrh	r0, [r7, #16]
    7c5a:	f7fb f80f 	bl	2c7c <log_from_user>
    7c5e:	e007      	b.n	7c70 <region_allocate_and_init+0x8c>
    7c60:	79fb      	ldrb	r3, [r7, #7]
    7c62:	8a3a      	ldrh	r2, [r7, #16]
    7c64:	4619      	mov	r1, r3
    7c66:	4826      	ldr	r0, [pc, #152]	; (7d00 <region_allocate_and_init+0x11c>)
    7c68:	f009 f916 	bl	10e98 <log_1>
    7c6c:	e000      	b.n	7c70 <region_allocate_and_init+0x8c>
    7c6e:	bf00      	nop
		return -EINVAL;
    7c70:	f06f 0315 	mvn.w	r3, #21
    7c74:	e03e      	b.n	7cf4 <region_allocate_and_init+0x110>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);
    7c76:	2303      	movs	r3, #3
    7c78:	2b03      	cmp	r3, #3
    7c7a:	d934      	bls.n	7ce6 <region_allocate_and_init+0x102>
    7c7c:	f00a fe07 	bl	1288e <k_is_user_context>
    7c80:	4603      	mov	r3, r0
    7c82:	77fb      	strb	r3, [r7, #31]
    7c84:	2300      	movs	r3, #0
    7c86:	60fb      	str	r3, [r7, #12]
    7c88:	2303      	movs	r3, #3
    7c8a:	2b00      	cmp	r3, #0
    7c8c:	d007      	beq.n	7c9e <region_allocate_and_init+0xba>
    7c8e:	4b1b      	ldr	r3, [pc, #108]	; (7cfc <region_allocate_and_init+0x118>)
    7c90:	681b      	ldr	r3, [r3, #0]
    7c92:	4618      	mov	r0, r3
    7c94:	f7ff fbcc 	bl	7430 <log_const_source_id>
    7c98:	4603      	mov	r3, r0
    7c9a:	b29b      	uxth	r3, r3
    7c9c:	e000      	b.n	7ca0 <region_allocate_and_init+0xbc>
    7c9e:	2300      	movs	r3, #0
    7ca0:	83bb      	strh	r3, [r7, #28]
    7ca2:	7a3b      	ldrb	r3, [r7, #8]
    7ca4:	2204      	movs	r2, #4
    7ca6:	f362 0302 	bfi	r3, r2, #0, #3
    7caa:	723b      	strb	r3, [r7, #8]
    7cac:	7a3b      	ldrb	r3, [r7, #8]
    7cae:	f36f 03c5 	bfc	r3, #3, #3
    7cb2:	723b      	strb	r3, [r7, #8]
    7cb4:	8bbb      	ldrh	r3, [r7, #28]
    7cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    7cba:	b29a      	uxth	r2, r3
    7cbc:	893b      	ldrh	r3, [r7, #8]
    7cbe:	f362 138f 	bfi	r3, r2, #6, #10
    7cc2:	813b      	strh	r3, [r7, #8]
    7cc4:	7ffb      	ldrb	r3, [r7, #31]
    7cc6:	2b00      	cmp	r3, #0
    7cc8:	d006      	beq.n	7cd8 <region_allocate_and_init+0xf4>
    7cca:	79fb      	ldrb	r3, [r7, #7]
    7ccc:	4a0d      	ldr	r2, [pc, #52]	; (7d04 <region_allocate_and_init+0x120>)
    7cce:	490e      	ldr	r1, [pc, #56]	; (7d08 <region_allocate_and_init+0x124>)
    7cd0:	8938      	ldrh	r0, [r7, #8]
    7cd2:	f7fa ffd3 	bl	2c7c <log_from_user>
    7cd6:	e007      	b.n	7ce8 <region_allocate_and_init+0x104>
    7cd8:	490a      	ldr	r1, [pc, #40]	; (7d04 <region_allocate_and_init+0x120>)
    7cda:	79fa      	ldrb	r2, [r7, #7]
    7cdc:	893b      	ldrh	r3, [r7, #8]
    7cde:	480a      	ldr	r0, [pc, #40]	; (7d08 <region_allocate_and_init+0x124>)
    7ce0:	f009 f8f1 	bl	10ec6 <log_2>
    7ce4:	e000      	b.n	7ce8 <region_allocate_and_init+0x104>
    7ce6:	bf00      	nop

	/* Program region */
	region_init(index, region_conf);
    7ce8:	79fb      	ldrb	r3, [r7, #7]
    7cea:	6839      	ldr	r1, [r7, #0]
    7cec:	4618      	mov	r0, r3
    7cee:	f7ff fbbd 	bl	746c <region_init>

	return index;
    7cf2:	79fb      	ldrb	r3, [r7, #7]
}
    7cf4:	4618      	mov	r0, r3
    7cf6:	3724      	adds	r7, #36	; 0x24
    7cf8:	46bd      	mov	sp, r7
    7cfa:	bd90      	pop	{r4, r7, pc}
    7cfc:	20000114 	.word	0x20000114
    7d00:	00018740 	.word	0x00018740
    7d04:	0001abd4 	.word	0x0001abd4
    7d08:	00018768 	.word	0x00018768

00007d0c <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    7d0c:	b590      	push	{r4, r7, lr}
    7d0e:	b08b      	sub	sp, #44	; 0x2c
    7d10:	af00      	add	r7, sp, #0
    7d12:	4603      	mov	r3, r0
    7d14:	6039      	str	r1, [r7, #0]
    7d16:	71fb      	strb	r3, [r7, #7]
	struct arm_mpu_region region_conf;

	LOG_DBG("Configure MPU region at index 0x%x", index);
    7d18:	2303      	movs	r3, #3
    7d1a:	2b03      	cmp	r3, #3
    7d1c:	d936      	bls.n	7d8c <mpu_configure_region+0x80>
    7d1e:	f00a fdb6 	bl	1288e <k_is_user_context>
    7d22:	4603      	mov	r3, r0
    7d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    7d28:	2300      	movs	r3, #0
    7d2a:	613b      	str	r3, [r7, #16]
    7d2c:	2303      	movs	r3, #3
    7d2e:	2b00      	cmp	r3, #0
    7d30:	d007      	beq.n	7d42 <mpu_configure_region+0x36>
    7d32:	4b25      	ldr	r3, [pc, #148]	; (7dc8 <mpu_configure_region+0xbc>)
    7d34:	681b      	ldr	r3, [r3, #0]
    7d36:	4618      	mov	r0, r3
    7d38:	f7ff fb7a 	bl	7430 <log_const_source_id>
    7d3c:	4603      	mov	r3, r0
    7d3e:	b29b      	uxth	r3, r3
    7d40:	e000      	b.n	7d44 <mpu_configure_region+0x38>
    7d42:	2300      	movs	r3, #0
    7d44:	84bb      	strh	r3, [r7, #36]	; 0x24
    7d46:	7b3b      	ldrb	r3, [r7, #12]
    7d48:	2204      	movs	r2, #4
    7d4a:	f362 0302 	bfi	r3, r2, #0, #3
    7d4e:	733b      	strb	r3, [r7, #12]
    7d50:	7b3b      	ldrb	r3, [r7, #12]
    7d52:	f36f 03c5 	bfc	r3, #3, #3
    7d56:	733b      	strb	r3, [r7, #12]
    7d58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    7d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    7d5e:	b29a      	uxth	r2, r3
    7d60:	89bb      	ldrh	r3, [r7, #12]
    7d62:	f362 138f 	bfi	r3, r2, #6, #10
    7d66:	81bb      	strh	r3, [r7, #12]
    7d68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    7d6c:	2b00      	cmp	r3, #0
    7d6e:	d006      	beq.n	7d7e <mpu_configure_region+0x72>
    7d70:	79fb      	ldrb	r3, [r7, #7]
    7d72:	4a16      	ldr	r2, [pc, #88]	; (7dcc <mpu_configure_region+0xc0>)
    7d74:	4916      	ldr	r1, [pc, #88]	; (7dd0 <mpu_configure_region+0xc4>)
    7d76:	89b8      	ldrh	r0, [r7, #12]
    7d78:	f7fa ff80 	bl	2c7c <log_from_user>
    7d7c:	e007      	b.n	7d8e <mpu_configure_region+0x82>
    7d7e:	4913      	ldr	r1, [pc, #76]	; (7dcc <mpu_configure_region+0xc0>)
    7d80:	79fa      	ldrb	r2, [r7, #7]
    7d82:	89bb      	ldrh	r3, [r7, #12]
    7d84:	4812      	ldr	r0, [pc, #72]	; (7dd0 <mpu_configure_region+0xc4>)
    7d86:	f009 f89e 	bl	10ec6 <log_2>
    7d8a:	e000      	b.n	7d8e <mpu_configure_region+0x82>
    7d8c:	bf00      	nop

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
    7d8e:	683b      	ldr	r3, [r7, #0]
    7d90:	681b      	ldr	r3, [r3, #0]
    7d92:	617b      	str	r3, [r7, #20]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    7d94:	683b      	ldr	r3, [r7, #0]
    7d96:	f103 0108 	add.w	r1, r3, #8
		&new_region->attr, new_region->start, new_region->size);
    7d9a:	683b      	ldr	r3, [r7, #0]
    7d9c:	681a      	ldr	r2, [r3, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    7d9e:	683b      	ldr	r3, [r7, #0]
    7da0:	685c      	ldr	r4, [r3, #4]
    7da2:	f107 0314 	add.w	r3, r7, #20
    7da6:	f103 0008 	add.w	r0, r3, #8
    7daa:	4623      	mov	r3, r4
    7dac:	f00a fdd1 	bl	12952 <get_region_attr_from_mpu_partition_info>

	/* Allocate and program region */
	return region_allocate_and_init(index,
    7db0:	f107 0214 	add.w	r2, r7, #20
    7db4:	79fb      	ldrb	r3, [r7, #7]
    7db6:	4611      	mov	r1, r2
    7db8:	4618      	mov	r0, r3
    7dba:	f7ff ff13 	bl	7be4 <region_allocate_and_init>
    7dbe:	4603      	mov	r3, r0
		(const struct arm_mpu_region *)&region_conf);
}
    7dc0:	4618      	mov	r0, r3
    7dc2:	372c      	adds	r7, #44	; 0x2c
    7dc4:	46bd      	mov	sp, r7
    7dc6:	bd90      	pop	{r4, r7, pc}
    7dc8:	20000114 	.word	0x20000114
    7dcc:	0001abf0 	.word	0x0001abf0
    7dd0:	00018790 	.word	0x00018790

00007dd4 <arm_core_mpu_enable>:

/**
 * @brief enable the MPU
 */
void arm_core_mpu_enable(void)
{
    7dd4:	b480      	push	{r7}
    7dd6:	af00      	add	r7, sp, #0
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    7dd8:	4b06      	ldr	r3, [pc, #24]	; (7df4 <arm_core_mpu_enable+0x20>)
    7dda:	2205      	movs	r2, #5
    7ddc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    7dde:	f3bf 8f4f 	dsb	sy
}
    7de2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
    7de4:	f3bf 8f6f 	isb	sy
}
    7de8:	bf00      	nop

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    7dea:	bf00      	nop
    7dec:	46bd      	mov	sp, r7
    7dee:	bc80      	pop	{r7}
    7df0:	4770      	bx	lr
    7df2:	bf00      	nop
    7df4:	e000ed90 	.word	0xe000ed90

00007df8 <arm_core_mpu_disable>:

/**
 * @brief disable the MPU
 */
void arm_core_mpu_disable(void)
{
    7df8:	b480      	push	{r7}
    7dfa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    7dfc:	f3bf 8f5f 	dmb	sy
}
    7e00:	bf00      	nop
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    7e02:	4b03      	ldr	r3, [pc, #12]	; (7e10 <arm_core_mpu_disable+0x18>)
    7e04:	2200      	movs	r2, #0
    7e06:	605a      	str	r2, [r3, #4]
}
    7e08:	bf00      	nop
    7e0a:	46bd      	mov	sp, r7
    7e0c:	bc80      	pop	{r7}
    7e0e:	4770      	bx	lr
    7e10:	e000ed90 	.word	0xe000ed90

00007e14 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    7e14:	b580      	push	{r7, lr}
    7e16:	b084      	sub	sp, #16
    7e18:	af00      	add	r7, sp, #0
    7e1a:	60f8      	str	r0, [r7, #12]
    7e1c:	607a      	str	r2, [r7, #4]
    7e1e:	603b      	str	r3, [r7, #0]
    7e20:	460b      	mov	r3, r1
    7e22:	72fb      	strb	r3, [r7, #11]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    7e24:	7af9      	ldrb	r1, [r7, #11]
    7e26:	683b      	ldr	r3, [r7, #0]
    7e28:	687a      	ldr	r2, [r7, #4]
    7e2a:	68f8      	ldr	r0, [r7, #12]
    7e2c:	f7ff fe46 	bl	7abc <mpu_configure_static_mpu_regions>
    7e30:	4603      	mov	r3, r0
    7e32:	f113 0f16 	cmn.w	r3, #22
    7e36:	d110      	bne.n	7e5a <arm_core_mpu_configure_static_mpu_regions+0x46>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    7e38:	f240 1305 	movw	r3, #261	; 0x105
    7e3c:	4a09      	ldr	r2, [pc, #36]	; (7e64 <arm_core_mpu_configure_static_mpu_regions+0x50>)
    7e3e:	490a      	ldr	r1, [pc, #40]	; (7e68 <arm_core_mpu_configure_static_mpu_regions+0x54>)
    7e40:	480a      	ldr	r0, [pc, #40]	; (7e6c <arm_core_mpu_configure_static_mpu_regions+0x58>)
    7e42:	f007 ff17 	bl	fc74 <printk>
    7e46:	7afb      	ldrb	r3, [r7, #11]
    7e48:	4619      	mov	r1, r3
    7e4a:	4809      	ldr	r0, [pc, #36]	; (7e70 <arm_core_mpu_configure_static_mpu_regions+0x5c>)
    7e4c:	f007 ff12 	bl	fc74 <printk>
    7e50:	f240 1105 	movw	r1, #261	; 0x105
    7e54:	4803      	ldr	r0, [pc, #12]	; (7e64 <arm_core_mpu_configure_static_mpu_regions+0x50>)
    7e56:	f008 fb69 	bl	1052c <assert_post_action>
			regions_num);
	}
}
    7e5a:	bf00      	nop
    7e5c:	3710      	adds	r7, #16
    7e5e:	46bd      	mov	sp, r7
    7e60:	bd80      	pop	{r7, pc}
    7e62:	bf00      	nop
    7e64:	000187b8 	.word	0x000187b8
    7e68:	000187f0 	.word	0x000187f0
    7e6c:	000187f4 	.word	0x000187f4
    7e70:	00018814 	.word	0x00018814

00007e74 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    7e74:	b580      	push	{r7, lr}
    7e76:	b082      	sub	sp, #8
    7e78:	af00      	add	r7, sp, #0
    7e7a:	6078      	str	r0, [r7, #4]
    7e7c:	460b      	mov	r3, r1
    7e7e:	70fb      	strb	r3, [r7, #3]
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    7e80:	78fb      	ldrb	r3, [r7, #3]
    7e82:	4619      	mov	r1, r3
    7e84:	6878      	ldr	r0, [r7, #4]
    7e86:	f7ff fe37 	bl	7af8 <mpu_mark_areas_for_dynamic_regions>
    7e8a:	4603      	mov	r3, r0
    7e8c:	f113 0f16 	cmn.w	r3, #22
    7e90:	d110      	bne.n	7eb4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x40>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
    7e92:	f240 1315 	movw	r3, #277	; 0x115
    7e96:	4a09      	ldr	r2, [pc, #36]	; (7ebc <arm_core_mpu_mark_areas_for_dynamic_regions+0x48>)
    7e98:	4909      	ldr	r1, [pc, #36]	; (7ec0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>)
    7e9a:	480a      	ldr	r0, [pc, #40]	; (7ec4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x50>)
    7e9c:	f007 feea 	bl	fc74 <printk>
    7ea0:	78fb      	ldrb	r3, [r7, #3]
    7ea2:	4619      	mov	r1, r3
    7ea4:	4808      	ldr	r0, [pc, #32]	; (7ec8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>)
    7ea6:	f007 fee5 	bl	fc74 <printk>
    7eaa:	f240 1115 	movw	r1, #277	; 0x115
    7eae:	4803      	ldr	r0, [pc, #12]	; (7ebc <arm_core_mpu_mark_areas_for_dynamic_regions+0x48>)
    7eb0:	f008 fb3c 	bl	1052c <assert_post_action>
			dyn_region_areas_num);
	}
}
    7eb4:	bf00      	nop
    7eb6:	3708      	adds	r7, #8
    7eb8:	46bd      	mov	sp, r7
    7eba:	bd80      	pop	{r7, pc}
    7ebc:	000187b8 	.word	0x000187b8
    7ec0:	000187f0 	.word	0x000187f0
    7ec4:	000187f4 	.word	0x000187f4
    7ec8:	00018840 	.word	0x00018840

00007ecc <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    7ecc:	b590      	push	{r4, r7, lr}
    7ece:	b085      	sub	sp, #20
    7ed0:	af00      	add	r7, sp, #0
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    7ed2:	4b4c      	ldr	r3, [pc, #304]	; (8004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
    7ed4:	681c      	ldr	r4, [r3, #0]
    7ed6:	f00a fcf6 	bl	128c6 <get_num_regions>
    7eda:	4603      	mov	r3, r0
    7edc:	429c      	cmp	r4, r3
    7ede:	d918      	bls.n	7f12 <z_arm_mpu_init+0x46>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    7ee0:	f44f 739e 	mov.w	r3, #316	; 0x13c
    7ee4:	4a48      	ldr	r2, [pc, #288]	; (8008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
    7ee6:	4949      	ldr	r1, [pc, #292]	; (800c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
    7ee8:	4849      	ldr	r0, [pc, #292]	; (8010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
    7eea:	f007 fec3 	bl	fc74 <printk>
    7eee:	4b45      	ldr	r3, [pc, #276]	; (8004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
    7ef0:	681c      	ldr	r4, [r3, #0]
    7ef2:	f00a fce8 	bl	128c6 <get_num_regions>
    7ef6:	4603      	mov	r3, r0
    7ef8:	461a      	mov	r2, r3
    7efa:	4621      	mov	r1, r4
    7efc:	4845      	ldr	r0, [pc, #276]	; (8014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>)
    7efe:	f007 feb9 	bl	fc74 <printk>
    7f02:	f44f 719e 	mov.w	r1, #316	; 0x13c
    7f06:	4840      	ldr	r0, [pc, #256]	; (8008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
    7f08:	f008 fb10 	bl	1052c <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    7f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7f10:	e073      	b.n	7ffa <z_arm_mpu_init+0x12e>
	}

	LOG_DBG("total region count: %d", get_num_regions());
    7f12:	2303      	movs	r3, #3
    7f14:	2b03      	cmp	r3, #3
    7f16:	d93a      	bls.n	7f8e <z_arm_mpu_init+0xc2>
    7f18:	f00a fcb9 	bl	1288e <k_is_user_context>
    7f1c:	4603      	mov	r3, r0
    7f1e:	72fb      	strb	r3, [r7, #11]
    7f20:	2300      	movs	r3, #0
    7f22:	607b      	str	r3, [r7, #4]
    7f24:	2303      	movs	r3, #3
    7f26:	2b00      	cmp	r3, #0
    7f28:	d007      	beq.n	7f3a <z_arm_mpu_init+0x6e>
    7f2a:	4b3b      	ldr	r3, [pc, #236]	; (8018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
    7f2c:	681b      	ldr	r3, [r3, #0]
    7f2e:	4618      	mov	r0, r3
    7f30:	f7ff fa7e 	bl	7430 <log_const_source_id>
    7f34:	4603      	mov	r3, r0
    7f36:	b29b      	uxth	r3, r3
    7f38:	e000      	b.n	7f3c <z_arm_mpu_init+0x70>
    7f3a:	2300      	movs	r3, #0
    7f3c:	813b      	strh	r3, [r7, #8]
    7f3e:	783b      	ldrb	r3, [r7, #0]
    7f40:	2204      	movs	r2, #4
    7f42:	f362 0302 	bfi	r3, r2, #0, #3
    7f46:	703b      	strb	r3, [r7, #0]
    7f48:	783b      	ldrb	r3, [r7, #0]
    7f4a:	f36f 03c5 	bfc	r3, #3, #3
    7f4e:	703b      	strb	r3, [r7, #0]
    7f50:	893b      	ldrh	r3, [r7, #8]
    7f52:	f3c3 0309 	ubfx	r3, r3, #0, #10
    7f56:	b29a      	uxth	r2, r3
    7f58:	883b      	ldrh	r3, [r7, #0]
    7f5a:	f362 138f 	bfi	r3, r2, #6, #10
    7f5e:	803b      	strh	r3, [r7, #0]
    7f60:	7afb      	ldrb	r3, [r7, #11]
    7f62:	2b00      	cmp	r3, #0
    7f64:	d008      	beq.n	7f78 <z_arm_mpu_init+0xac>
    7f66:	f00a fcae 	bl	128c6 <get_num_regions>
    7f6a:	4603      	mov	r3, r0
    7f6c:	4a2b      	ldr	r2, [pc, #172]	; (801c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
    7f6e:	492c      	ldr	r1, [pc, #176]	; (8020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
    7f70:	8838      	ldrh	r0, [r7, #0]
    7f72:	f7fa fe83 	bl	2c7c <log_from_user>
    7f76:	e00b      	b.n	7f90 <z_arm_mpu_init+0xc4>
    7f78:	4c28      	ldr	r4, [pc, #160]	; (801c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
    7f7a:	f00a fca4 	bl	128c6 <get_num_regions>
    7f7e:	4603      	mov	r3, r0
    7f80:	461a      	mov	r2, r3
    7f82:	883b      	ldrh	r3, [r7, #0]
    7f84:	4621      	mov	r1, r4
    7f86:	4826      	ldr	r0, [pc, #152]	; (8020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
    7f88:	f008 ff9d 	bl	10ec6 <log_2>
    7f8c:	e000      	b.n	7f90 <z_arm_mpu_init+0xc4>
    7f8e:	bf00      	nop

	arm_core_mpu_disable();
    7f90:	f7ff ff32 	bl	7df8 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    7f94:	f7ff fa5c 	bl	7450 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7f98:	2300      	movs	r3, #0
    7f9a:	60fb      	str	r3, [r7, #12]
    7f9c:	e00b      	b.n	7fb6 <z_arm_mpu_init+0xea>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    7f9e:	4b19      	ldr	r3, [pc, #100]	; (8004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
    7fa0:	685a      	ldr	r2, [r3, #4]
    7fa2:	68fb      	ldr	r3, [r7, #12]
    7fa4:	011b      	lsls	r3, r3, #4
    7fa6:	4413      	add	r3, r2
    7fa8:	4619      	mov	r1, r3
    7faa:	68f8      	ldr	r0, [r7, #12]
    7fac:	f7ff fa5e 	bl	746c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7fb0:	68fb      	ldr	r3, [r7, #12]
    7fb2:	3301      	adds	r3, #1
    7fb4:	60fb      	str	r3, [r7, #12]
    7fb6:	4b13      	ldr	r3, [pc, #76]	; (8004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
    7fb8:	681b      	ldr	r3, [r3, #0]
    7fba:	68fa      	ldr	r2, [r7, #12]
    7fbc:	429a      	cmp	r2, r3
    7fbe:	d3ee      	bcc.n	7f9e <z_arm_mpu_init+0xd2>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    7fc0:	4b10      	ldr	r3, [pc, #64]	; (8004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
    7fc2:	681b      	ldr	r3, [r3, #0]
    7fc4:	b2da      	uxtb	r2, r3
    7fc6:	4b17      	ldr	r3, [pc, #92]	; (8024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
    7fc8:	701a      	strb	r2, [r3, #0]


	arm_core_mpu_enable();
    7fca:	f7ff ff03 	bl	7dd4 <arm_core_mpu_enable>
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
    7fce:	4b16      	ldr	r3, [pc, #88]	; (8028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
    7fd0:	681b      	ldr	r3, [r3, #0]
    7fd2:	0a1b      	lsrs	r3, r3, #8
    7fd4:	b2db      	uxtb	r3, r3
    7fd6:	2b10      	cmp	r3, #16
    7fd8:	d00e      	beq.n	7ff8 <z_arm_mpu_init+0x12c>
    7fda:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
    7fde:	4a0a      	ldr	r2, [pc, #40]	; (8008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
    7fe0:	4912      	ldr	r1, [pc, #72]	; (802c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
    7fe2:	480b      	ldr	r0, [pc, #44]	; (8010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
    7fe4:	f007 fe46 	bl	fc74 <printk>
    7fe8:	4811      	ldr	r0, [pc, #68]	; (8030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>)
    7fea:	f007 fe43 	bl	fc74 <printk>
    7fee:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    7ff2:	4805      	ldr	r0, [pc, #20]	; (8008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
    7ff4:	f008 fa9a 	bl	1052c <assert_post_action>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    7ff8:	2300      	movs	r3, #0
}
    7ffa:	4618      	mov	r0, r3
    7ffc:	3714      	adds	r7, #20
    7ffe:	46bd      	mov	sp, r7
    8000:	bd90      	pop	{r4, r7, pc}
    8002:	bf00      	nop
    8004:	0001ac38 	.word	0x0001ac38
    8008:	000187b8 	.word	0x000187b8
    800c:	000187f0 	.word	0x000187f0
    8010:	000187f4 	.word	0x000187f4
    8014:	000188a0 	.word	0x000188a0
    8018:	20000114 	.word	0x20000114
    801c:	0001ac08 	.word	0x0001ac08
    8020:	000188d4 	.word	0x000188d4
    8024:	20000c6b 	.word	0x20000c6b
    8028:	e000ed90 	.word	0xe000ed90
    802c:	000188f0 	.word	0x000188f0
    8030:	00018944 	.word	0x00018944

00008034 <__stdout_hook_install>:
}

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
    8034:	b480      	push	{r7}
    8036:	b083      	sub	sp, #12
    8038:	af00      	add	r7, sp, #0
    803a:	6078      	str	r0, [r7, #4]
	_stdout_hook = hook;
    803c:	4a03      	ldr	r2, [pc, #12]	; (804c <__stdout_hook_install+0x18>)
    803e:	687b      	ldr	r3, [r7, #4]
    8040:	6013      	str	r3, [r2, #0]
}
    8042:	bf00      	nop
    8044:	370c      	adds	r7, #12
    8046:	46bd      	mov	sp, r7
    8048:	bc80      	pop	{r7}
    804a:	4770      	bx	lr
    804c:	20000118 	.word	0x20000118

00008050 <nrf_gpio_pin_port_decode>:
 *                      that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    8050:	b580      	push	{r7, lr}
    8052:	b082      	sub	sp, #8
    8054:	af00      	add	r7, sp, #0
    8056:	6078      	str	r0, [r7, #4]
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8058:	687b      	ldr	r3, [r7, #4]
    805a:	681b      	ldr	r3, [r3, #0]
    805c:	4618      	mov	r0, r3
    805e:	f00a ff8e 	bl	12f7e <nrf_gpio_pin_present_check>
    8062:	4603      	mov	r3, r0
    8064:	f083 0301 	eor.w	r3, r3, #1
    8068:	b2db      	uxtb	r3, r3
    806a:	2b00      	cmp	r3, #0
    806c:	d00b      	beq.n	8086 <nrf_gpio_pin_port_decode+0x36>
    806e:	f44f 7305 	mov.w	r3, #532	; 0x214
    8072:	4a10      	ldr	r2, [pc, #64]	; (80b4 <nrf_gpio_pin_port_decode+0x64>)
    8074:	4910      	ldr	r1, [pc, #64]	; (80b8 <nrf_gpio_pin_port_decode+0x68>)
    8076:	4811      	ldr	r0, [pc, #68]	; (80bc <nrf_gpio_pin_port_decode+0x6c>)
    8078:	f007 fdfc 	bl	fc74 <printk>
    807c:	f44f 7105 	mov.w	r1, #532	; 0x214
    8080:	480c      	ldr	r0, [pc, #48]	; (80b4 <nrf_gpio_pin_port_decode+0x64>)
    8082:	f008 fa53 	bl	1052c <assert_post_action>

    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8086:	6878      	ldr	r0, [r7, #4]
    8088:	f00a ff9d 	bl	12fc6 <nrf_gpio_pin_port_number_extract>
    808c:	4603      	mov	r3, r0
    808e:	2b00      	cmp	r3, #0
    8090:	d00b      	beq.n	80aa <nrf_gpio_pin_port_decode+0x5a>
    {
        default:
            NRFX_ASSERT(0);
    8092:	f240 2319 	movw	r3, #537	; 0x219
    8096:	4a07      	ldr	r2, [pc, #28]	; (80b4 <nrf_gpio_pin_port_decode+0x64>)
    8098:	4909      	ldr	r1, [pc, #36]	; (80c0 <nrf_gpio_pin_port_decode+0x70>)
    809a:	4808      	ldr	r0, [pc, #32]	; (80bc <nrf_gpio_pin_port_decode+0x6c>)
    809c:	f007 fdea 	bl	fc74 <printk>
    80a0:	f240 2119 	movw	r1, #537	; 0x219
    80a4:	4803      	ldr	r0, [pc, #12]	; (80b4 <nrf_gpio_pin_port_decode+0x64>)
    80a6:	f008 fa41 	bl	1052c <assert_post_action>
#if defined(P0_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 0: return NRF_P0;
    80aa:	4b06      	ldr	r3, [pc, #24]	; (80c4 <nrf_gpio_pin_port_decode+0x74>)
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
#endif
    }
}
    80ac:	4618      	mov	r0, r3
    80ae:	3708      	adds	r7, #8
    80b0:	46bd      	mov	sp, r7
    80b2:	bd80      	pop	{r7, pc}
    80b4:	00018978 	.word	0x00018978
    80b8:	000189ac 	.word	0x000189ac
    80bc:	000189d0 	.word	0x000189d0
    80c0:	000189f0 	.word	0x000189f0
    80c4:	50842500 	.word	0x50842500

000080c8 <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
    80c8:	b580      	push	{r7, lr}
    80ca:	b084      	sub	sp, #16
    80cc:	af00      	add	r7, sp, #0
    80ce:	60f8      	str	r0, [r7, #12]
    80d0:	60b9      	str	r1, [r7, #8]
    80d2:	4613      	mov	r3, r2
    80d4:	71fb      	strb	r3, [r7, #7]
	__ASSERT(callback, "No callback!");
    80d6:	68bb      	ldr	r3, [r7, #8]
    80d8:	2b00      	cmp	r3, #0
    80da:	d10c      	bne.n	80f6 <gpio_manage_callback+0x2e>
    80dc:	2324      	movs	r3, #36	; 0x24
    80de:	4a23      	ldr	r2, [pc, #140]	; (816c <gpio_manage_callback+0xa4>)
    80e0:	4923      	ldr	r1, [pc, #140]	; (8170 <gpio_manage_callback+0xa8>)
    80e2:	4824      	ldr	r0, [pc, #144]	; (8174 <gpio_manage_callback+0xac>)
    80e4:	f007 fdc6 	bl	fc74 <printk>
    80e8:	4823      	ldr	r0, [pc, #140]	; (8178 <gpio_manage_callback+0xb0>)
    80ea:	f007 fdc3 	bl	fc74 <printk>
    80ee:	2124      	movs	r1, #36	; 0x24
    80f0:	481e      	ldr	r0, [pc, #120]	; (816c <gpio_manage_callback+0xa4>)
    80f2:	f008 fa1b 	bl	1052c <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    80f6:	68bb      	ldr	r3, [r7, #8]
    80f8:	685b      	ldr	r3, [r3, #4]
    80fa:	2b00      	cmp	r3, #0
    80fc:	d10c      	bne.n	8118 <gpio_manage_callback+0x50>
    80fe:	2325      	movs	r3, #37	; 0x25
    8100:	4a1a      	ldr	r2, [pc, #104]	; (816c <gpio_manage_callback+0xa4>)
    8102:	491e      	ldr	r1, [pc, #120]	; (817c <gpio_manage_callback+0xb4>)
    8104:	481b      	ldr	r0, [pc, #108]	; (8174 <gpio_manage_callback+0xac>)
    8106:	f007 fdb5 	bl	fc74 <printk>
    810a:	481d      	ldr	r0, [pc, #116]	; (8180 <gpio_manage_callback+0xb8>)
    810c:	f007 fdb2 	bl	fc74 <printk>
    8110:	2125      	movs	r1, #37	; 0x25
    8112:	4816      	ldr	r0, [pc, #88]	; (816c <gpio_manage_callback+0xa4>)
    8114:	f008 fa0a 	bl	1052c <assert_post_action>

	if (!sys_slist_is_empty(callbacks)) {
    8118:	68f8      	ldr	r0, [r7, #12]
    811a:	f00a fdbb 	bl	12c94 <sys_slist_is_empty>
    811e:	4603      	mov	r3, r0
    8120:	f083 0301 	eor.w	r3, r3, #1
    8124:	b2db      	uxtb	r3, r3
    8126:	2b00      	cmp	r3, #0
    8128:	d013      	beq.n	8152 <gpio_manage_callback+0x8a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    812a:	68bb      	ldr	r3, [r7, #8]
    812c:	4619      	mov	r1, r3
    812e:	68f8      	ldr	r0, [r7, #12]
    8130:	f00a fe3d 	bl	12dae <sys_slist_find_and_remove>
    8134:	4603      	mov	r3, r0
    8136:	f083 0301 	eor.w	r3, r3, #1
    813a:	b2db      	uxtb	r3, r3
    813c:	2b00      	cmp	r3, #0
    813e:	d008      	beq.n	8152 <gpio_manage_callback+0x8a>
			if (!set) {
    8140:	79fb      	ldrb	r3, [r7, #7]
    8142:	f083 0301 	eor.w	r3, r3, #1
    8146:	b2db      	uxtb	r3, r3
    8148:	2b00      	cmp	r3, #0
    814a:	d002      	beq.n	8152 <gpio_manage_callback+0x8a>
				return -EINVAL;
    814c:	f06f 0315 	mvn.w	r3, #21
    8150:	e008      	b.n	8164 <gpio_manage_callback+0x9c>
			}
		}
	}

	if (set) {
    8152:	79fb      	ldrb	r3, [r7, #7]
    8154:	2b00      	cmp	r3, #0
    8156:	d004      	beq.n	8162 <gpio_manage_callback+0x9a>
		sys_slist_prepend(callbacks, &callback->node);
    8158:	68bb      	ldr	r3, [r7, #8]
    815a:	4619      	mov	r1, r3
    815c:	68f8      	ldr	r0, [r7, #12]
    815e:	f00a fdc7 	bl	12cf0 <sys_slist_prepend>
	}

	return 0;
    8162:	2300      	movs	r3, #0
}
    8164:	4618      	mov	r0, r3
    8166:	3710      	adds	r7, #16
    8168:	46bd      	mov	sp, r7
    816a:	bd80      	pop	{r7, pc}
    816c:	000189f4 	.word	0x000189f4
    8170:	00018a24 	.word	0x00018a24
    8174:	000189d0 	.word	0x000189d0
    8178:	00018a30 	.word	0x00018a30
    817c:	00018a40 	.word	0x00018a40
    8180:	00018a54 	.word	0x00018a54

00008184 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    8184:	b580      	push	{r7, lr}
    8186:	b086      	sub	sp, #24
    8188:	af00      	add	r7, sp, #0
    818a:	60f8      	str	r0, [r7, #12]
    818c:	60b9      	str	r1, [r7, #8]
    818e:	607a      	str	r2, [r7, #4]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    8190:	68f8      	ldr	r0, [r7, #12]
    8192:	f00a fd69 	bl	12c68 <sys_slist_peek_head>
    8196:	4603      	mov	r3, r0
    8198:	2b00      	cmp	r3, #0
    819a:	d004      	beq.n	81a6 <gpio_fire_callbacks+0x22>
    819c:	68f8      	ldr	r0, [r7, #12]
    819e:	f00a fd63 	bl	12c68 <sys_slist_peek_head>
    81a2:	4603      	mov	r3, r0
    81a4:	e000      	b.n	81a8 <gpio_fire_callbacks+0x24>
    81a6:	2300      	movs	r3, #0
    81a8:	617b      	str	r3, [r7, #20]
    81aa:	697b      	ldr	r3, [r7, #20]
    81ac:	2b00      	cmp	r3, #0
    81ae:	d00e      	beq.n	81ce <gpio_fire_callbacks+0x4a>
    81b0:	697b      	ldr	r3, [r7, #20]
    81b2:	4618      	mov	r0, r3
    81b4:	f00a fd8b 	bl	12cce <sys_slist_peek_next>
    81b8:	4603      	mov	r3, r0
    81ba:	2b00      	cmp	r3, #0
    81bc:	d005      	beq.n	81ca <gpio_fire_callbacks+0x46>
    81be:	697b      	ldr	r3, [r7, #20]
    81c0:	4618      	mov	r0, r3
    81c2:	f00a fd84 	bl	12cce <sys_slist_peek_next>
    81c6:	4603      	mov	r3, r0
    81c8:	e002      	b.n	81d0 <gpio_fire_callbacks+0x4c>
    81ca:	2300      	movs	r3, #0
    81cc:	e000      	b.n	81d0 <gpio_fire_callbacks+0x4c>
    81ce:	2300      	movs	r3, #0
    81d0:	613b      	str	r3, [r7, #16]
    81d2:	e035      	b.n	8240 <gpio_fire_callbacks+0xbc>
		if (cb->pin_mask & pins) {
    81d4:	697b      	ldr	r3, [r7, #20]
    81d6:	689a      	ldr	r2, [r3, #8]
    81d8:	687b      	ldr	r3, [r7, #4]
    81da:	4013      	ands	r3, r2
    81dc:	2b00      	cmp	r3, #0
    81de:	d019      	beq.n	8214 <gpio_fire_callbacks+0x90>
			__ASSERT(cb->handler, "No callback handler!");
    81e0:	697b      	ldr	r3, [r7, #20]
    81e2:	685b      	ldr	r3, [r3, #4]
    81e4:	2b00      	cmp	r3, #0
    81e6:	d10c      	bne.n	8202 <gpio_fire_callbacks+0x7e>
    81e8:	2345      	movs	r3, #69	; 0x45
    81ea:	4a19      	ldr	r2, [pc, #100]	; (8250 <gpio_fire_callbacks+0xcc>)
    81ec:	4919      	ldr	r1, [pc, #100]	; (8254 <gpio_fire_callbacks+0xd0>)
    81ee:	481a      	ldr	r0, [pc, #104]	; (8258 <gpio_fire_callbacks+0xd4>)
    81f0:	f007 fd40 	bl	fc74 <printk>
    81f4:	4819      	ldr	r0, [pc, #100]	; (825c <gpio_fire_callbacks+0xd8>)
    81f6:	f007 fd3d 	bl	fc74 <printk>
    81fa:	2145      	movs	r1, #69	; 0x45
    81fc:	4814      	ldr	r0, [pc, #80]	; (8250 <gpio_fire_callbacks+0xcc>)
    81fe:	f008 f995 	bl	1052c <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    8202:	697b      	ldr	r3, [r7, #20]
    8204:	685b      	ldr	r3, [r3, #4]
    8206:	697a      	ldr	r2, [r7, #20]
    8208:	6891      	ldr	r1, [r2, #8]
    820a:	687a      	ldr	r2, [r7, #4]
    820c:	400a      	ands	r2, r1
    820e:	6979      	ldr	r1, [r7, #20]
    8210:	68b8      	ldr	r0, [r7, #8]
    8212:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    8214:	693b      	ldr	r3, [r7, #16]
    8216:	617b      	str	r3, [r7, #20]
    8218:	697b      	ldr	r3, [r7, #20]
    821a:	2b00      	cmp	r3, #0
    821c:	d00e      	beq.n	823c <gpio_fire_callbacks+0xb8>
    821e:	697b      	ldr	r3, [r7, #20]
    8220:	4618      	mov	r0, r3
    8222:	f00a fd54 	bl	12cce <sys_slist_peek_next>
    8226:	4603      	mov	r3, r0
    8228:	2b00      	cmp	r3, #0
    822a:	d005      	beq.n	8238 <gpio_fire_callbacks+0xb4>
    822c:	697b      	ldr	r3, [r7, #20]
    822e:	4618      	mov	r0, r3
    8230:	f00a fd4d 	bl	12cce <sys_slist_peek_next>
    8234:	4603      	mov	r3, r0
    8236:	e002      	b.n	823e <gpio_fire_callbacks+0xba>
    8238:	2300      	movs	r3, #0
    823a:	e000      	b.n	823e <gpio_fire_callbacks+0xba>
    823c:	2300      	movs	r3, #0
    823e:	613b      	str	r3, [r7, #16]
    8240:	697b      	ldr	r3, [r7, #20]
    8242:	2b00      	cmp	r3, #0
    8244:	d1c6      	bne.n	81d4 <gpio_fire_callbacks+0x50>
		}
	}
}
    8246:	bf00      	nop
    8248:	bf00      	nop
    824a:	3718      	adds	r7, #24
    824c:	46bd      	mov	sp, r7
    824e:	bd80      	pop	{r7, pc}
    8250:	000189f4 	.word	0x000189f4
    8254:	00018a6c 	.word	0x00018a6c
    8258:	000189d0 	.word	0x000189d0
    825c:	00018a54 	.word	0x00018a54

00008260 <gpiote_channel_alloc>:
	return port->config;
}

static int gpiote_channel_alloc(uint32_t abs_pin,
				nrf_gpiote_polarity_t polarity)
{
    8260:	b580      	push	{r7, lr}
    8262:	b084      	sub	sp, #16
    8264:	af00      	add	r7, sp, #0
    8266:	6078      	str	r0, [r7, #4]
    8268:	460b      	mov	r3, r1
    826a:	70fb      	strb	r3, [r7, #3]
	uint8_t channel;

	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    826c:	f107 030d 	add.w	r3, r7, #13
    8270:	4618      	mov	r0, r3
    8272:	f001 ff2b 	bl	a0cc <nrfx_gpiote_channel_alloc>
    8276:	4603      	mov	r3, r0
    8278:	4a14      	ldr	r2, [pc, #80]	; (82cc <gpiote_channel_alloc+0x6c>)
    827a:	4293      	cmp	r3, r2
    827c:	d002      	beq.n	8284 <gpiote_channel_alloc+0x24>
		return -ENODEV;
    827e:	f06f 0312 	mvn.w	r3, #18
    8282:	e01e      	b.n	82c2 <gpiote_channel_alloc+0x62>
	}

	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    8284:	7b7b      	ldrb	r3, [r7, #13]
    8286:	3340      	adds	r3, #64	; 0x40
    8288:	b29b      	uxth	r3, r3
    828a:	009b      	lsls	r3, r3, #2
    828c:	81fb      	strh	r3, [r7, #14]

	nrf_gpiote_event_configure(NRF_GPIOTE, channel, abs_pin, polarity);
    828e:	7b7b      	ldrb	r3, [r7, #13]
    8290:	4619      	mov	r1, r3
    8292:	78fb      	ldrb	r3, [r7, #3]
    8294:	687a      	ldr	r2, [r7, #4]
    8296:	480e      	ldr	r0, [pc, #56]	; (82d0 <gpiote_channel_alloc+0x70>)
    8298:	f00a ff41 	bl	1311e <nrf_gpiote_event_configure>
	nrf_gpiote_event_clear(NRF_GPIOTE, evt);
    829c:	89fb      	ldrh	r3, [r7, #14]
    829e:	4619      	mov	r1, r3
    82a0:	480b      	ldr	r0, [pc, #44]	; (82d0 <gpiote_channel_alloc+0x70>)
    82a2:	f00a feb7 	bl	13014 <nrf_gpiote_event_clear>
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    82a6:	7b7b      	ldrb	r3, [r7, #13]
    82a8:	4619      	mov	r1, r3
    82aa:	4809      	ldr	r0, [pc, #36]	; (82d0 <gpiote_channel_alloc+0x70>)
    82ac:	f00a ff07 	bl	130be <nrf_gpiote_event_enable>
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    82b0:	7b7b      	ldrb	r3, [r7, #13]
    82b2:	461a      	mov	r2, r3
    82b4:	2301      	movs	r3, #1
    82b6:	4093      	lsls	r3, r2
    82b8:	4619      	mov	r1, r3
    82ba:	4805      	ldr	r0, [pc, #20]	; (82d0 <gpiote_channel_alloc+0x70>)
    82bc:	f00a fed4 	bl	13068 <nrf_gpiote_int_enable>

	return 0;
    82c0:	2300      	movs	r3, #0
}
    82c2:	4618      	mov	r0, r3
    82c4:	3710      	adds	r7, #16
    82c6:	46bd      	mov	sp, r7
    82c8:	bd80      	pop	{r7, pc}
    82ca:	bf00      	nop
    82cc:	0bad0000 	.word	0x0bad0000
    82d0:	5000d000 	.word	0x5000d000

000082d4 <gpiote_pin_cleanup>:

/* Function checks if given pin does not have already enabled GPIOTE event and
 * disables it.
 */
static void gpiote_pin_cleanup(uint32_t abs_pin)
{
    82d4:	b580      	push	{r7, lr}
    82d6:	b084      	sub	sp, #16
    82d8:	af00      	add	r7, sp, #0
    82da:	6078      	str	r0, [r7, #4]
	uint32_t intenset = nrf_gpiote_int_enable_check(NRF_GPIOTE,
    82dc:	21ff      	movs	r1, #255	; 0xff
    82de:	4819      	ldr	r0, [pc, #100]	; (8344 <gpiote_pin_cleanup+0x70>)
    82e0:	f00a fede 	bl	130a0 <nrf_gpiote_int_enable_check>
    82e4:	60b8      	str	r0, [r7, #8]
						     NRF_GPIOTE_INT_IN_MASK);

	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    82e6:	2300      	movs	r3, #0
    82e8:	60fb      	str	r3, [r7, #12]
    82ea:	e024      	b.n	8336 <gpiote_pin_cleanup+0x62>
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    82ec:	68f9      	ldr	r1, [r7, #12]
    82ee:	4815      	ldr	r0, [pc, #84]	; (8344 <gpiote_pin_cleanup+0x70>)
    82f0:	f00a ff48 	bl	13184 <nrf_gpiote_event_pin_get>
    82f4:	4602      	mov	r2, r0
    82f6:	687b      	ldr	r3, [r7, #4]
    82f8:	4293      	cmp	r3, r2
    82fa:	d119      	bne.n	8330 <gpiote_pin_cleanup+0x5c>
		    && (intenset & BIT(i))) {
    82fc:	68ba      	ldr	r2, [r7, #8]
    82fe:	68fb      	ldr	r3, [r7, #12]
    8300:	fa22 f303 	lsr.w	r3, r2, r3
    8304:	f003 0301 	and.w	r3, r3, #1
    8308:	2b00      	cmp	r3, #0
    830a:	d011      	beq.n	8330 <gpiote_pin_cleanup+0x5c>
			nrf_gpiote_event_disable(NRF_GPIOTE, i);
    830c:	68f9      	ldr	r1, [r7, #12]
    830e:	480d      	ldr	r0, [pc, #52]	; (8344 <gpiote_pin_cleanup+0x70>)
    8310:	f00a feed 	bl	130ee <nrf_gpiote_event_disable>
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    8314:	2201      	movs	r2, #1
    8316:	68fb      	ldr	r3, [r7, #12]
    8318:	fa02 f303 	lsl.w	r3, r2, r3
    831c:	4619      	mov	r1, r3
    831e:	4809      	ldr	r0, [pc, #36]	; (8344 <gpiote_pin_cleanup+0x70>)
    8320:	f00a feb0 	bl	13084 <nrf_gpiote_int_disable>
			nrfx_gpiote_channel_free(i);
    8324:	68fb      	ldr	r3, [r7, #12]
    8326:	b2db      	uxtb	r3, r3
    8328:	4618      	mov	r0, r3
    832a:	f001 fe53 	bl	9fd4 <nrfx_gpiote_channel_free>
			return;
    832e:	e005      	b.n	833c <gpiote_pin_cleanup+0x68>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    8330:	68fb      	ldr	r3, [r7, #12]
    8332:	3301      	adds	r3, #1
    8334:	60fb      	str	r3, [r7, #12]
    8336:	68fb      	ldr	r3, [r7, #12]
    8338:	2b07      	cmp	r3, #7
    833a:	d9d7      	bls.n	82ec <gpiote_pin_cleanup+0x18>
		}
	}
}
    833c:	3710      	adds	r7, #16
    833e:	46bd      	mov	sp, r7
    8340:	bd80      	pop	{r7, pc}
    8342:	bf00      	nop
    8344:	5000d000 	.word	0x5000d000

00008348 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
    8348:	b590      	push	{r4, r7, lr}
    834a:	b08b      	sub	sp, #44	; 0x2c
    834c:	af02      	add	r7, sp, #8
    834e:	60f8      	str	r0, [r7, #12]
    8350:	460b      	mov	r3, r1
    8352:	607a      	str	r2, [r7, #4]
    8354:	72fb      	strb	r3, [r7, #11]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8356:	68f8      	ldr	r0, [r7, #12]
    8358:	f00a ff32 	bl	131c0 <get_port_cfg>
    835c:	4603      	mov	r3, r0
    835e:	685b      	ldr	r3, [r3, #4]
    8360:	61bb      	str	r3, [r7, #24]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    8362:	687a      	ldr	r2, [r7, #4]
    8364:	4b4f      	ldr	r3, [pc, #316]	; (84a4 <gpio_nrfx_config+0x15c>)
    8366:	4013      	ands	r3, r2
    8368:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    836c:	d02f      	beq.n	83ce <gpio_nrfx_config+0x86>
    836e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    8372:	d838      	bhi.n	83e6 <gpio_nrfx_config+0x9e>
    8374:	4a4c      	ldr	r2, [pc, #304]	; (84a8 <gpio_nrfx_config+0x160>)
    8376:	4293      	cmp	r3, r2
    8378:	d032      	beq.n	83e0 <gpio_nrfx_config+0x98>
    837a:	4a4b      	ldr	r2, [pc, #300]	; (84a8 <gpio_nrfx_config+0x160>)
    837c:	4293      	cmp	r3, r2
    837e:	d832      	bhi.n	83e6 <gpio_nrfx_config+0x9e>
    8380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    8384:	d01a      	beq.n	83bc <gpio_nrfx_config+0x74>
    8386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    838a:	d82c      	bhi.n	83e6 <gpio_nrfx_config+0x9e>
    838c:	4a47      	ldr	r2, [pc, #284]	; (84ac <gpio_nrfx_config+0x164>)
    838e:	4293      	cmp	r3, r2
    8390:	d020      	beq.n	83d4 <gpio_nrfx_config+0x8c>
    8392:	4a46      	ldr	r2, [pc, #280]	; (84ac <gpio_nrfx_config+0x164>)
    8394:	4293      	cmp	r3, r2
    8396:	d826      	bhi.n	83e6 <gpio_nrfx_config+0x9e>
    8398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    839c:	d014      	beq.n	83c8 <gpio_nrfx_config+0x80>
    839e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    83a2:	d820      	bhi.n	83e6 <gpio_nrfx_config+0x9e>
    83a4:	2b06      	cmp	r3, #6
    83a6:	d00c      	beq.n	83c2 <gpio_nrfx_config+0x7a>
    83a8:	2b06      	cmp	r3, #6
    83aa:	d81c      	bhi.n	83e6 <gpio_nrfx_config+0x9e>
    83ac:	2b00      	cmp	r3, #0
    83ae:	d002      	beq.n	83b6 <gpio_nrfx_config+0x6e>
    83b0:	2b02      	cmp	r3, #2
    83b2:	d012      	beq.n	83da <gpio_nrfx_config+0x92>
    83b4:	e017      	b.n	83e6 <gpio_nrfx_config+0x9e>
			 GPIO_OPEN_DRAIN)) {
	case GPIO_DS_DFLT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_S0S1;
    83b6:	2300      	movs	r3, #0
    83b8:	77bb      	strb	r3, [r7, #30]
		break;
    83ba:	e017      	b.n	83ec <gpio_nrfx_config+0xa4>
	case GPIO_DS_DFLT_LOW | GPIO_DS_ALT_HIGH:
		drive = NRF_GPIO_PIN_S0H1;
    83bc:	2302      	movs	r3, #2
    83be:	77bb      	strb	r3, [r7, #30]
		break;
    83c0:	e014      	b.n	83ec <gpio_nrfx_config+0xa4>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
    83c2:	2306      	movs	r3, #6
    83c4:	77bb      	strb	r3, [r7, #30]
		break;
    83c6:	e011      	b.n	83ec <gpio_nrfx_config+0xa4>

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
    83c8:	2301      	movs	r3, #1
    83ca:	77bb      	strb	r3, [r7, #30]
		break;
    83cc:	e00e      	b.n	83ec <gpio_nrfx_config+0xa4>
	case GPIO_DS_ALT_LOW | GPIO_DS_ALT_HIGH:
		drive = NRF_GPIO_PIN_H0H1;
    83ce:	2303      	movs	r3, #3
    83d0:	77bb      	strb	r3, [r7, #30]
		break;
    83d2:	e00b      	b.n	83ec <gpio_nrfx_config+0xa4>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
    83d4:	2307      	movs	r3, #7
    83d6:	77bb      	strb	r3, [r7, #30]
		break;
    83d8:	e008      	b.n	83ec <gpio_nrfx_config+0xa4>

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
    83da:	2304      	movs	r3, #4
    83dc:	77bb      	strb	r3, [r7, #30]
		break;
    83de:	e005      	b.n	83ec <gpio_nrfx_config+0xa4>
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0H1;
    83e0:	2305      	movs	r3, #5
    83e2:	77bb      	strb	r3, [r7, #30]
		break;
    83e4:	e002      	b.n	83ec <gpio_nrfx_config+0xa4>

	default:
		return -EINVAL;
    83e6:	f06f 0315 	mvn.w	r3, #21
    83ea:	e057      	b.n	849c <gpio_nrfx_config+0x154>
	}

	if ((flags & GPIO_PULL_UP) != 0) {
    83ec:	687b      	ldr	r3, [r7, #4]
    83ee:	f003 0310 	and.w	r3, r3, #16
    83f2:	2b00      	cmp	r3, #0
    83f4:	d002      	beq.n	83fc <gpio_nrfx_config+0xb4>
		pull = NRF_GPIO_PIN_PULLUP;
    83f6:	2303      	movs	r3, #3
    83f8:	77fb      	strb	r3, [r7, #31]
    83fa:	e009      	b.n	8410 <gpio_nrfx_config+0xc8>
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    83fc:	687b      	ldr	r3, [r7, #4]
    83fe:	f003 0320 	and.w	r3, r3, #32
    8402:	2b00      	cmp	r3, #0
    8404:	d002      	beq.n	840c <gpio_nrfx_config+0xc4>
		pull = NRF_GPIO_PIN_PULLDOWN;
    8406:	2301      	movs	r3, #1
    8408:	77fb      	strb	r3, [r7, #31]
    840a:	e001      	b.n	8410 <gpio_nrfx_config+0xc8>
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
    840c:	2300      	movs	r3, #0
    840e:	77fb      	strb	r3, [r7, #31]
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;
    8410:	687b      	ldr	r3, [r7, #4]
    8412:	0a5b      	lsrs	r3, r3, #9
    8414:	b2db      	uxtb	r3, r3
	dir = ((flags & GPIO_OUTPUT) != 0)
    8416:	f003 0301 	and.w	r3, r3, #1
    841a:	75fb      	strb	r3, [r7, #23]

	input = ((flags & GPIO_INPUT) != 0)
    841c:	687b      	ldr	r3, [r7, #4]
    841e:	f403 7380 	and.w	r3, r3, #256	; 0x100
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    8422:	2b00      	cmp	r3, #0
    8424:	bf0c      	ite	eq
    8426:	2301      	moveq	r3, #1
    8428:	2300      	movne	r3, #0
    842a:	b2db      	uxtb	r3, r3
	input = ((flags & GPIO_INPUT) != 0)
    842c:	75bb      	strb	r3, [r7, #22]

	if ((flags & GPIO_OUTPUT) != 0) {
    842e:	687b      	ldr	r3, [r7, #4]
    8430:	f403 7300 	and.w	r3, r3, #512	; 0x200
    8434:	2b00      	cmp	r3, #0
    8436:	d01a      	beq.n	846e <gpio_nrfx_config+0x126>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    8438:	687b      	ldr	r3, [r7, #4]
    843a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    843e:	2b00      	cmp	r3, #0
    8440:	d008      	beq.n	8454 <gpio_nrfx_config+0x10c>
			nrf_gpio_port_out_set(reg, BIT(pin));
    8442:	7afb      	ldrb	r3, [r7, #11]
    8444:	2201      	movs	r2, #1
    8446:	fa02 f303 	lsl.w	r3, r2, r3
    844a:	4619      	mov	r1, r3
    844c:	69b8      	ldr	r0, [r7, #24]
    844e:	f00a fd7c 	bl	12f4a <nrf_gpio_port_out_set>
    8452:	e00c      	b.n	846e <gpio_nrfx_config+0x126>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    8454:	687b      	ldr	r3, [r7, #4]
    8456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    845a:	2b00      	cmp	r3, #0
    845c:	d007      	beq.n	846e <gpio_nrfx_config+0x126>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    845e:	7afb      	ldrb	r3, [r7, #11]
    8460:	2201      	movs	r2, #1
    8462:	fa02 f303 	lsl.w	r3, r2, r3
    8466:	4619      	mov	r1, r3
    8468:	69b8      	ldr	r0, [r7, #24]
    846a:	f00a fd7b 	bl	12f64 <nrf_gpio_port_out_clear>
		}
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    846e:	68f8      	ldr	r0, [r7, #12]
    8470:	f00a fea6 	bl	131c0 <get_port_cfg>
    8474:	4603      	mov	r3, r0
    8476:	7a1b      	ldrb	r3, [r3, #8]
    8478:	015a      	lsls	r2, r3, #5
    847a:	7afb      	ldrb	r3, [r7, #11]
    847c:	f003 031f 	and.w	r3, r3, #31
    8480:	4313      	orrs	r3, r2
    8482:	461c      	mov	r4, r3
    8484:	7ff8      	ldrb	r0, [r7, #31]
    8486:	7dba      	ldrb	r2, [r7, #22]
    8488:	7df9      	ldrb	r1, [r7, #23]
    848a:	2300      	movs	r3, #0
    848c:	9301      	str	r3, [sp, #4]
    848e:	7fbb      	ldrb	r3, [r7, #30]
    8490:	9300      	str	r3, [sp, #0]
    8492:	4603      	mov	r3, r0
    8494:	4620      	mov	r0, r4
    8496:	f00a fcba 	bl	12e0e <nrf_gpio_cfg>
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
    849a:	2300      	movs	r3, #0
}
    849c:	4618      	mov	r0, r3
    849e:	3724      	adds	r7, #36	; 0x24
    84a0:	46bd      	mov	sp, r7
    84a2:	bd90      	pop	{r4, r7, pc}
    84a4:	00f00006 	.word	0x00f00006
    84a8:	00400002 	.word	0x00400002
    84ac:	00100006 	.word	0x00100006

000084b0 <gpiote_event_handler>:

	gpio_fire_callbacks(list, port, pins);
}

static void gpiote_event_handler(void)
{
    84b0:	b580      	push	{r7, lr}
    84b2:	b086      	sub	sp, #24
    84b4:	af00      	add	r7, sp, #0
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    84b6:	2300      	movs	r3, #0
    84b8:	60bb      	str	r3, [r7, #8]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    84ba:	2300      	movs	r3, #0
    84bc:	607b      	str	r3, [r7, #4]
	bool port_event = nrf_gpiote_event_check(NRF_GPIOTE,
    84be:	f44f 71be 	mov.w	r1, #380	; 0x17c
    84c2:	4833      	ldr	r0, [pc, #204]	; (8590 <gpiote_event_handler+0xe0>)
    84c4:	f00a fd92 	bl	12fec <nrf_gpiote_event_check>
    84c8:	4603      	mov	r3, r0
    84ca:	74fb      	strb	r3, [r7, #19]
						 NRF_GPIOTE_EVENT_PORT);

	if (port_event) {
    84cc:	7cfb      	ldrb	r3, [r7, #19]
    84ce:	2b00      	cmp	r3, #0
    84d0:	d00b      	beq.n	84ea <gpiote_event_handler+0x3a>
#ifdef CONFIG_GPIO_NRF_P0
		fired_triggers[0] =
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    84d2:	1d3b      	adds	r3, r7, #4
    84d4:	4619      	mov	r1, r3
    84d6:	482f      	ldr	r0, [pc, #188]	; (8594 <gpiote_event_handler+0xe4>)
    84d8:	f00b f869 	bl	135ae <check_level_trigger_pins>
    84dc:	4603      	mov	r3, r0
		fired_triggers[0] =
    84de:	60bb      	str	r3, [r7, #8]
#endif

		/* Sense detect was disabled while checking pins so
		 * DETECT should be deasserted.
		 */
		nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    84e0:	f44f 71be 	mov.w	r1, #380	; 0x17c
    84e4:	482a      	ldr	r0, [pc, #168]	; (8590 <gpiote_event_handler+0xe0>)
    84e6:	f00a fd95 	bl	13014 <nrf_gpiote_event_clear>
	}

	/* Handle interrupt from GPIOTE channels. */
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    84ea:	2300      	movs	r3, #0
    84ec:	617b      	str	r3, [r7, #20]
    84ee:	e039      	b.n	8564 <gpiote_event_handler+0xb4>
		nrf_gpiote_event_t evt =
    84f0:	697b      	ldr	r3, [r7, #20]
    84f2:	3340      	adds	r3, #64	; 0x40
    84f4:	b29b      	uxth	r3, r3
    84f6:	009b      	lsls	r3, r3, #2
    84f8:	823b      	strh	r3, [r7, #16]
			offsetof(NRF_GPIOTE_Type, EVENTS_IN[i]);

		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    84fa:	2201      	movs	r2, #1
    84fc:	697b      	ldr	r3, [r7, #20]
    84fe:	fa02 f303 	lsl.w	r3, r2, r3
    8502:	4619      	mov	r1, r3
    8504:	4822      	ldr	r0, [pc, #136]	; (8590 <gpiote_event_handler+0xe0>)
    8506:	f00a fdcb 	bl	130a0 <nrf_gpiote_int_enable_check>
    850a:	4603      	mov	r3, r0
    850c:	2b00      	cmp	r3, #0
    850e:	d026      	beq.n	855e <gpiote_event_handler+0xae>
		    nrf_gpiote_event_check(NRF_GPIOTE, evt)) {
    8510:	8a3b      	ldrh	r3, [r7, #16]
    8512:	4619      	mov	r1, r3
    8514:	481e      	ldr	r0, [pc, #120]	; (8590 <gpiote_event_handler+0xe0>)
    8516:	f00a fd69 	bl	12fec <nrf_gpiote_event_check>
    851a:	4603      	mov	r3, r0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    851c:	2b00      	cmp	r3, #0
    851e:	d01e      	beq.n	855e <gpiote_event_handler+0xae>
			uint32_t abs_pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, i);
    8520:	6979      	ldr	r1, [r7, #20]
    8522:	481b      	ldr	r0, [pc, #108]	; (8590 <gpiote_event_handler+0xe0>)
    8524:	f00a fe2e 	bl	13184 <nrf_gpiote_event_pin_get>
    8528:	60f8      	str	r0, [r7, #12]
			/* Divide absolute pin number to port and pin parts. */
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    852a:	68fb      	ldr	r3, [r7, #12]
    852c:	095a      	lsrs	r2, r3, #5
    852e:	0093      	lsls	r3, r2, #2
    8530:	f107 0118 	add.w	r1, r7, #24
    8534:	440b      	add	r3, r1
    8536:	f853 1c10 	ldr.w	r1, [r3, #-16]
    853a:	68fb      	ldr	r3, [r7, #12]
    853c:	f003 031f 	and.w	r3, r3, #31
    8540:	2001      	movs	r0, #1
    8542:	fa00 f303 	lsl.w	r3, r0, r3
    8546:	4319      	orrs	r1, r3
    8548:	0093      	lsls	r3, r2, #2
    854a:	f107 0218 	add.w	r2, r7, #24
    854e:	4413      	add	r3, r2
    8550:	f843 1c10 	str.w	r1, [r3, #-16]
			nrf_gpiote_event_clear(NRF_GPIOTE, evt);
    8554:	8a3b      	ldrh	r3, [r7, #16]
    8556:	4619      	mov	r1, r3
    8558:	480d      	ldr	r0, [pc, #52]	; (8590 <gpiote_event_handler+0xe0>)
    855a:	f00a fd5b 	bl	13014 <nrf_gpiote_event_clear>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    855e:	697b      	ldr	r3, [r7, #20]
    8560:	3301      	adds	r3, #1
    8562:	617b      	str	r3, [r7, #20]
    8564:	697b      	ldr	r3, [r7, #20]
    8566:	2b07      	cmp	r3, #7
    8568:	d9c2      	bls.n	84f0 <gpiote_event_handler+0x40>
		cfg_edge_sense_pins(DEVICE_DT_GET(GPIO(1)), sense_levels[1]);
#endif
	}

#ifdef CONFIG_GPIO_NRF_P0
	if (fired_triggers[0]) {
    856a:	68bb      	ldr	r3, [r7, #8]
    856c:	2b00      	cmp	r3, #0
    856e:	d004      	beq.n	857a <gpiote_event_handler+0xca>
		fire_callbacks(DEVICE_DT_GET(GPIO(0)), fired_triggers[0]);
    8570:	68bb      	ldr	r3, [r7, #8]
    8572:	4619      	mov	r1, r3
    8574:	4807      	ldr	r0, [pc, #28]	; (8594 <gpiote_event_handler+0xe4>)
    8576:	f00b f8b4 	bl	136e2 <fire_callbacks>
	if (fired_triggers[1]) {
		fire_callbacks(DEVICE_DT_GET(GPIO(1)), fired_triggers[1]);
	}
#endif

	if (port_event) {
    857a:	7cfb      	ldrb	r3, [r7, #19]
    857c:	2b00      	cmp	r3, #0
    857e:	d002      	beq.n	8586 <gpiote_event_handler+0xd6>
		/* Reprogram sense to match current configuration.
		 * This may cause DETECT to be re-asserted.
		 */
#ifdef CONFIG_GPIO_NRF_P0
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    8580:	4804      	ldr	r0, [pc, #16]	; (8594 <gpiote_event_handler+0xe4>)
    8582:	f00a ffd0 	bl	13526 <cfg_level_pins>
#endif
#ifdef CONFIG_GPIO_NRF_P1
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
#endif
	}
}
    8586:	bf00      	nop
    8588:	3718      	adds	r7, #24
    858a:	46bd      	mov	sp, r7
    858c:	bd80      	pop	{r7, pc}
    858e:	bf00      	nop
    8590:	5000d000 	.word	0x5000d000
    8594:	00016e9c 	.word	0x00016e9c

00008598 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    8598:	b580      	push	{r7, lr}
    859a:	b082      	sub	sp, #8
    859c:	af00      	add	r7, sp, #0
    859e:	6078      	str	r0, [r7, #4]
	static bool gpio_initialized;

	if (!gpio_initialized) {
    85a0:	4b0d      	ldr	r3, [pc, #52]	; (85d8 <gpio_nrfx_init+0x40>)
    85a2:	781b      	ldrb	r3, [r3, #0]
    85a4:	f083 0301 	eor.w	r3, r3, #1
    85a8:	b2db      	uxtb	r3, r3
    85aa:	2b00      	cmp	r3, #0
    85ac:	d00f      	beq.n	85ce <gpio_nrfx_init+0x36>
		gpio_initialized = true;
    85ae:	4b0a      	ldr	r3, [pc, #40]	; (85d8 <gpio_nrfx_init+0x40>)
    85b0:	2201      	movs	r2, #1
    85b2:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    85b4:	2200      	movs	r2, #0
    85b6:	2101      	movs	r1, #1
    85b8:	200d      	movs	r0, #13
    85ba:	f7fd fa2d 	bl	5a18 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    85be:	200d      	movs	r0, #13
    85c0:	f00a f889 	bl	126d6 <arch_irq_enable>
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
    85c4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    85c8:	4804      	ldr	r0, [pc, #16]	; (85dc <gpio_nrfx_init+0x44>)
    85ca:	f00a fd4d 	bl	13068 <nrf_gpiote_int_enable>
	}

	return 0;
    85ce:	2300      	movs	r3, #0
}
    85d0:	4618      	mov	r0, r3
    85d2:	3708      	adds	r7, #8
    85d4:	46bd      	mov	sp, r7
    85d6:	bd80      	pop	{r7, pc}
    85d8:	20000c6c 	.word	0x20000c6c
    85dc:	5000d000 	.word	0x5000d000

000085e0 <k_is_pre_kernel>:
{
    85e0:	b480      	push	{r7}
    85e2:	af00      	add	r7, sp, #0
	return !z_sys_post_kernel;
    85e4:	4b08      	ldr	r3, [pc, #32]	; (8608 <k_is_pre_kernel+0x28>)
    85e6:	781b      	ldrb	r3, [r3, #0]
    85e8:	2b00      	cmp	r3, #0
    85ea:	bf14      	ite	ne
    85ec:	2301      	movne	r3, #1
    85ee:	2300      	moveq	r3, #0
    85f0:	b2db      	uxtb	r3, r3
    85f2:	f083 0301 	eor.w	r3, r3, #1
    85f6:	b2db      	uxtb	r3, r3
    85f8:	f003 0301 	and.w	r3, r3, #1
    85fc:	b2db      	uxtb	r3, r3
}
    85fe:	4618      	mov	r0, r3
    8600:	46bd      	mov	sp, r7
    8602:	bc80      	pop	{r7}
    8604:	4770      	bx	lr
    8606:	bf00      	nop
    8608:	20000c6d 	.word	0x20000c6d

0000860c <nrf_gpio_pin_port_decode>:
{
    860c:	b580      	push	{r7, lr}
    860e:	b082      	sub	sp, #8
    8610:	af00      	add	r7, sp, #0
    8612:	6078      	str	r0, [r7, #4]
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    8614:	687b      	ldr	r3, [r7, #4]
    8616:	681b      	ldr	r3, [r3, #0]
    8618:	4618      	mov	r0, r3
    861a:	f00b fae1 	bl	13be0 <nrf_gpio_pin_present_check>
    861e:	4603      	mov	r3, r0
    8620:	f083 0301 	eor.w	r3, r3, #1
    8624:	b2db      	uxtb	r3, r3
    8626:	2b00      	cmp	r3, #0
    8628:	d00b      	beq.n	8642 <nrf_gpio_pin_port_decode+0x36>
    862a:	f44f 7305 	mov.w	r3, #532	; 0x214
    862e:	4a10      	ldr	r2, [pc, #64]	; (8670 <nrf_gpio_pin_port_decode+0x64>)
    8630:	4910      	ldr	r1, [pc, #64]	; (8674 <nrf_gpio_pin_port_decode+0x68>)
    8632:	4811      	ldr	r0, [pc, #68]	; (8678 <nrf_gpio_pin_port_decode+0x6c>)
    8634:	f007 fb1e 	bl	fc74 <printk>
    8638:	f44f 7105 	mov.w	r1, #532	; 0x214
    863c:	480c      	ldr	r0, [pc, #48]	; (8670 <nrf_gpio_pin_port_decode+0x64>)
    863e:	f007 ff75 	bl	1052c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8642:	6878      	ldr	r0, [r7, #4]
    8644:	f00b faf0 	bl	13c28 <nrf_gpio_pin_port_number_extract>
    8648:	4603      	mov	r3, r0
    864a:	2b00      	cmp	r3, #0
    864c:	d00b      	beq.n	8666 <nrf_gpio_pin_port_decode+0x5a>
            NRFX_ASSERT(0);
    864e:	f240 2319 	movw	r3, #537	; 0x219
    8652:	4a07      	ldr	r2, [pc, #28]	; (8670 <nrf_gpio_pin_port_decode+0x64>)
    8654:	4909      	ldr	r1, [pc, #36]	; (867c <nrf_gpio_pin_port_decode+0x70>)
    8656:	4808      	ldr	r0, [pc, #32]	; (8678 <nrf_gpio_pin_port_decode+0x6c>)
    8658:	f007 fb0c 	bl	fc74 <printk>
    865c:	f240 2119 	movw	r1, #537	; 0x219
    8660:	4803      	ldr	r0, [pc, #12]	; (8670 <nrf_gpio_pin_port_decode+0x64>)
    8662:	f007 ff63 	bl	1052c <assert_post_action>
        case 0: return NRF_P0;
    8666:	4b06      	ldr	r3, [pc, #24]	; (8680 <nrf_gpio_pin_port_decode+0x74>)
}
    8668:	4618      	mov	r0, r3
    866a:	3708      	adds	r7, #8
    866c:	46bd      	mov	sp, r7
    866e:	bd80      	pop	{r7, pc}
    8670:	00018a80 	.word	0x00018a80
    8674:	00018ab4 	.word	0x00018ab4
    8678:	00018ad8 	.word	0x00018ad8
    867c:	00018af8 	.word	0x00018af8
    8680:	50842500 	.word	0x50842500

00008684 <log_const_source_id>:
{
    8684:	b480      	push	{r7}
    8686:	b083      	sub	sp, #12
    8688:	af00      	add	r7, sp, #0
    868a:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    868c:	687b      	ldr	r3, [r7, #4]
    868e:	4a04      	ldr	r2, [pc, #16]	; (86a0 <log_const_source_id+0x1c>)
    8690:	1a9b      	subs	r3, r3, r2
    8692:	08db      	lsrs	r3, r3, #3
}
    8694:	4618      	mov	r0, r3
    8696:	370c      	adds	r7, #12
    8698:	46bd      	mov	sp, r7
    869a:	bc80      	pop	{r7}
    869c:	4770      	bx	lr
    869e:	bf00      	nop
    86a0:	000170bc 	.word	0x000170bc

000086a4 <nrfx_gppi_channels_enable>:
{
    nrf_dppi_channels_disable_all(NRF_DPPIC);
}

__STATIC_INLINE void nrfx_gppi_channels_enable(uint32_t mask)
{
    86a4:	b580      	push	{r7, lr}
    86a6:	b082      	sub	sp, #8
    86a8:	af00      	add	r7, sp, #0
    86aa:	6078      	str	r0, [r7, #4]
    nrf_dppi_channels_enable(NRF_DPPIC, mask);
    86ac:	6879      	ldr	r1, [r7, #4]
    86ae:	4803      	ldr	r0, [pc, #12]	; (86bc <nrfx_gppi_channels_enable+0x18>)
    86b0:	f00b fc5e 	bl	13f70 <nrf_dppi_channels_enable>
}
    86b4:	bf00      	nop
    86b6:	3708      	adds	r7, #8
    86b8:	46bd      	mov	sp, r7
    86ba:	bd80      	pop	{r7, pc}
    86bc:	50017000 	.word	0x50017000

000086c0 <nrfx_gppi_event_endpoint_setup>:
{
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    86c0:	b580      	push	{r7, lr}
    86c2:	b082      	sub	sp, #8
    86c4:	af00      	add	r7, sp, #0
    86c6:	4603      	mov	r3, r0
    86c8:	6039      	str	r1, [r7, #0]
    86ca:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(eep);
    86cc:	683b      	ldr	r3, [r7, #0]
    86ce:	2b00      	cmp	r3, #0
    86d0:	d10b      	bne.n	86ea <nrfx_gppi_event_endpoint_setup+0x2a>
    86d2:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
    86d6:	4a0a      	ldr	r2, [pc, #40]	; (8700 <nrfx_gppi_event_endpoint_setup+0x40>)
    86d8:	490a      	ldr	r1, [pc, #40]	; (8704 <nrfx_gppi_event_endpoint_setup+0x44>)
    86da:	480b      	ldr	r0, [pc, #44]	; (8708 <nrfx_gppi_event_endpoint_setup+0x48>)
    86dc:	f007 faca 	bl	fc74 <printk>
    86e0:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
    86e4:	4806      	ldr	r0, [pc, #24]	; (8700 <nrfx_gppi_event_endpoint_setup+0x40>)
    86e6:	f007 ff21 	bl	1052c <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    86ea:	79fb      	ldrb	r3, [r7, #7]
    86ec:	683a      	ldr	r2, [r7, #0]
    86ee:	3280      	adds	r2, #128	; 0x80
    86f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    86f4:	6013      	str	r3, [r2, #0]
}
    86f6:	bf00      	nop
    86f8:	3708      	adds	r7, #8
    86fa:	46bd      	mov	sp, r7
    86fc:	bd80      	pop	{r7, pc}
    86fe:	bf00      	nop
    8700:	00018afc 	.word	0x00018afc
    8704:	00018b34 	.word	0x00018b34
    8708:	00018ad8 	.word	0x00018ad8

0000870c <nrfx_gppi_task_endpoint_setup>:

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    870c:	b580      	push	{r7, lr}
    870e:	b082      	sub	sp, #8
    8710:	af00      	add	r7, sp, #0
    8712:	4603      	mov	r3, r0
    8714:	6039      	str	r1, [r7, #0]
    8716:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(tep);
    8718:	683b      	ldr	r3, [r7, #0]
    871a:	2b00      	cmp	r3, #0
    871c:	d10b      	bne.n	8736 <nrfx_gppi_task_endpoint_setup+0x2a>
    871e:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
    8722:	4a0a      	ldr	r2, [pc, #40]	; (874c <nrfx_gppi_task_endpoint_setup+0x40>)
    8724:	490a      	ldr	r1, [pc, #40]	; (8750 <nrfx_gppi_task_endpoint_setup+0x44>)
    8726:	480b      	ldr	r0, [pc, #44]	; (8754 <nrfx_gppi_task_endpoint_setup+0x48>)
    8728:	f007 faa4 	bl	fc74 <printk>
    872c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    8730:	4806      	ldr	r0, [pc, #24]	; (874c <nrfx_gppi_task_endpoint_setup+0x40>)
    8732:	f007 fefb 	bl	1052c <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    8736:	79fb      	ldrb	r3, [r7, #7]
    8738:	683a      	ldr	r2, [r7, #0]
    873a:	3280      	adds	r2, #128	; 0x80
    873c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    8740:	6013      	str	r3, [r2, #0]
}
    8742:	bf00      	nop
    8744:	3708      	adds	r7, #8
    8746:	46bd      	mov	sp, r7
    8748:	bd80      	pop	{r7, pc}
    874a:	bf00      	nop
    874c:	00018afc 	.word	0x00018afc
    8750:	00018b38 	.word	0x00018b38
    8754:	00018ad8 	.word	0x00018ad8

00008758 <baudrate_set>:
 * @param baudrate Baud rate
 *
 * @return 0 on success or error code
 */
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
    8758:	b580      	push	{r7, lr}
    875a:	b084      	sub	sp, #16
    875c:	af00      	add	r7, sp, #0
    875e:	6078      	str	r0, [r7, #4]
    8760:	6039      	str	r1, [r7, #0]
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
    8762:	6878      	ldr	r0, [r7, #4]
    8764:	f00b fc3d 	bl	13fe2 <get_uarte_instance>
    8768:	60b8      	str	r0, [r7, #8]

	switch (baudrate) {
    876a:	683b      	ldr	r3, [r7, #0]
    876c:	4a83      	ldr	r2, [pc, #524]	; (897c <baudrate_set+0x224>)
    876e:	4293      	cmp	r3, r2
    8770:	f000 80f3 	beq.w	895a <baudrate_set+0x202>
    8774:	683b      	ldr	r3, [r7, #0]
    8776:	4a81      	ldr	r2, [pc, #516]	; (897c <baudrate_set+0x224>)
    8778:	4293      	cmp	r3, r2
    877a:	f200 80f2 	bhi.w	8962 <baudrate_set+0x20a>
    877e:	683b      	ldr	r3, [r7, #0]
    8780:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    8784:	f000 80e5 	beq.w	8952 <baudrate_set+0x1fa>
    8788:	683b      	ldr	r3, [r7, #0]
    878a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    878e:	f200 80e8 	bhi.w	8962 <baudrate_set+0x20a>
    8792:	683b      	ldr	r3, [r7, #0]
    8794:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    8798:	f000 80d7 	beq.w	894a <baudrate_set+0x1f2>
    879c:	683b      	ldr	r3, [r7, #0]
    879e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    87a2:	f200 80de 	bhi.w	8962 <baudrate_set+0x20a>
    87a6:	683b      	ldr	r3, [r7, #0]
    87a8:	4a75      	ldr	r2, [pc, #468]	; (8980 <baudrate_set+0x228>)
    87aa:	4293      	cmp	r3, r2
    87ac:	f000 80c9 	beq.w	8942 <baudrate_set+0x1ea>
    87b0:	683b      	ldr	r3, [r7, #0]
    87b2:	4a73      	ldr	r2, [pc, #460]	; (8980 <baudrate_set+0x228>)
    87b4:	4293      	cmp	r3, r2
    87b6:	f200 80d4 	bhi.w	8962 <baudrate_set+0x20a>
    87ba:	683b      	ldr	r3, [r7, #0]
    87bc:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    87c0:	f000 80bb 	beq.w	893a <baudrate_set+0x1e2>
    87c4:	683b      	ldr	r3, [r7, #0]
    87c6:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    87ca:	f200 80ca 	bhi.w	8962 <baudrate_set+0x20a>
    87ce:	683b      	ldr	r3, [r7, #0]
    87d0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    87d4:	f000 80ad 	beq.w	8932 <baudrate_set+0x1da>
    87d8:	683b      	ldr	r3, [r7, #0]
    87da:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    87de:	f200 80c0 	bhi.w	8962 <baudrate_set+0x20a>
    87e2:	683b      	ldr	r3, [r7, #0]
    87e4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    87e8:	f000 80a0 	beq.w	892c <baudrate_set+0x1d4>
    87ec:	683b      	ldr	r3, [r7, #0]
    87ee:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    87f2:	f200 80b6 	bhi.w	8962 <baudrate_set+0x20a>
    87f6:	683b      	ldr	r3, [r7, #0]
    87f8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    87fc:	f000 8092 	beq.w	8924 <baudrate_set+0x1cc>
    8800:	683b      	ldr	r3, [r7, #0]
    8802:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    8806:	f200 80ac 	bhi.w	8962 <baudrate_set+0x20a>
    880a:	683b      	ldr	r3, [r7, #0]
    880c:	f64d 22c0 	movw	r2, #56000	; 0xdac0
    8810:	4293      	cmp	r3, r2
    8812:	f000 8083 	beq.w	891c <baudrate_set+0x1c4>
    8816:	683b      	ldr	r3, [r7, #0]
    8818:	f64d 22c0 	movw	r2, #56000	; 0xdac0
    881c:	4293      	cmp	r3, r2
    881e:	f200 80a0 	bhi.w	8962 <baudrate_set+0x20a>
    8822:	683b      	ldr	r3, [r7, #0]
    8824:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    8828:	d074      	beq.n	8914 <baudrate_set+0x1bc>
    882a:	683b      	ldr	r3, [r7, #0]
    882c:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    8830:	f200 8097 	bhi.w	8962 <baudrate_set+0x20a>
    8834:	683b      	ldr	r3, [r7, #0]
    8836:	f647 2212 	movw	r2, #31250	; 0x7a12
    883a:	4293      	cmp	r3, r2
    883c:	d066      	beq.n	890c <baudrate_set+0x1b4>
    883e:	683b      	ldr	r3, [r7, #0]
    8840:	f647 2212 	movw	r2, #31250	; 0x7a12
    8844:	4293      	cmp	r3, r2
    8846:	f200 808c 	bhi.w	8962 <baudrate_set+0x20a>
    884a:	683b      	ldr	r3, [r7, #0]
    884c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    8850:	d059      	beq.n	8906 <baudrate_set+0x1ae>
    8852:	683b      	ldr	r3, [r7, #0]
    8854:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    8858:	f200 8083 	bhi.w	8962 <baudrate_set+0x20a>
    885c:	683b      	ldr	r3, [r7, #0]
    885e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    8862:	d04d      	beq.n	8900 <baudrate_set+0x1a8>
    8864:	683b      	ldr	r3, [r7, #0]
    8866:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    886a:	d87a      	bhi.n	8962 <baudrate_set+0x20a>
    886c:	683b      	ldr	r3, [r7, #0]
    886e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    8872:	d042      	beq.n	88fa <baudrate_set+0x1a2>
    8874:	683b      	ldr	r3, [r7, #0]
    8876:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    887a:	d872      	bhi.n	8962 <baudrate_set+0x20a>
    887c:	683b      	ldr	r3, [r7, #0]
    887e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    8882:	d037      	beq.n	88f4 <baudrate_set+0x19c>
    8884:	683b      	ldr	r3, [r7, #0]
    8886:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    888a:	d86a      	bhi.n	8962 <baudrate_set+0x20a>
    888c:	683b      	ldr	r3, [r7, #0]
    888e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    8892:	d02c      	beq.n	88ee <baudrate_set+0x196>
    8894:	683b      	ldr	r3, [r7, #0]
    8896:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    889a:	d862      	bhi.n	8962 <baudrate_set+0x20a>
    889c:	683b      	ldr	r3, [r7, #0]
    889e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    88a2:	d020      	beq.n	88e6 <baudrate_set+0x18e>
    88a4:	683b      	ldr	r3, [r7, #0]
    88a6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    88aa:	d85a      	bhi.n	8962 <baudrate_set+0x20a>
    88ac:	683b      	ldr	r3, [r7, #0]
    88ae:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    88b2:	d014      	beq.n	88de <baudrate_set+0x186>
    88b4:	683b      	ldr	r3, [r7, #0]
    88b6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    88ba:	d852      	bhi.n	8962 <baudrate_set+0x20a>
    88bc:	683b      	ldr	r3, [r7, #0]
    88be:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    88c2:	d004      	beq.n	88ce <baudrate_set+0x176>
    88c4:	683b      	ldr	r3, [r7, #0]
    88c6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    88ca:	d004      	beq.n	88d6 <baudrate_set+0x17e>
    88cc:	e049      	b.n	8962 <baudrate_set+0x20a>
	case 300:
		/* value not supported by Nordic HAL */
		nrf_baudrate = 0x00014000;
    88ce:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    88d2:	60fb      	str	r3, [r7, #12]
		break;
    88d4:	e048      	b.n	8968 <baudrate_set+0x210>
	case 600:
		/* value not supported by Nordic HAL */
		nrf_baudrate = 0x00027000;
    88d6:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    88da:	60fb      	str	r3, [r7, #12]
		break;
    88dc:	e044      	b.n	8968 <baudrate_set+0x210>
	case 1200:
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    88de:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    88e2:	60fb      	str	r3, [r7, #12]
		break;
    88e4:	e040      	b.n	8968 <baudrate_set+0x210>
	case 2400:
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    88e6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    88ea:	60fb      	str	r3, [r7, #12]
		break;
    88ec:	e03c      	b.n	8968 <baudrate_set+0x210>
	case 4800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    88ee:	4b25      	ldr	r3, [pc, #148]	; (8984 <baudrate_set+0x22c>)
    88f0:	60fb      	str	r3, [r7, #12]
		break;
    88f2:	e039      	b.n	8968 <baudrate_set+0x210>
	case 9600:
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    88f4:	4b24      	ldr	r3, [pc, #144]	; (8988 <baudrate_set+0x230>)
    88f6:	60fb      	str	r3, [r7, #12]
		break;
    88f8:	e036      	b.n	8968 <baudrate_set+0x210>
	case 14400:
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    88fa:	4b24      	ldr	r3, [pc, #144]	; (898c <baudrate_set+0x234>)
    88fc:	60fb      	str	r3, [r7, #12]
		break;
    88fe:	e033      	b.n	8968 <baudrate_set+0x210>
	case 19200:
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    8900:	4b23      	ldr	r3, [pc, #140]	; (8990 <baudrate_set+0x238>)
    8902:	60fb      	str	r3, [r7, #12]
		break;
    8904:	e030      	b.n	8968 <baudrate_set+0x210>
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    8906:	4b23      	ldr	r3, [pc, #140]	; (8994 <baudrate_set+0x23c>)
    8908:	60fb      	str	r3, [r7, #12]
		break;
    890a:	e02d      	b.n	8968 <baudrate_set+0x210>
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    890c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    8910:	60fb      	str	r3, [r7, #12]
		break;
    8912:	e029      	b.n	8968 <baudrate_set+0x210>
	case 38400:
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    8914:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    8918:	60fb      	str	r3, [r7, #12]
		break;
    891a:	e025      	b.n	8968 <baudrate_set+0x210>
	case 56000:
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    891c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    8920:	60fb      	str	r3, [r7, #12]
		break;
    8922:	e021      	b.n	8968 <baudrate_set+0x210>
	case 57600:
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    8924:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    8928:	60fb      	str	r3, [r7, #12]
		break;
    892a:	e01d      	b.n	8968 <baudrate_set+0x210>
	case 76800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    892c:	4b1a      	ldr	r3, [pc, #104]	; (8998 <baudrate_set+0x240>)
    892e:	60fb      	str	r3, [r7, #12]
		break;
    8930:	e01a      	b.n	8968 <baudrate_set+0x210>
	case 115200:
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    8932:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    8936:	60fb      	str	r3, [r7, #12]
		break;
    8938:	e016      	b.n	8968 <baudrate_set+0x210>
	case 230400:
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    893a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    893e:	60fb      	str	r3, [r7, #12]
		break;
    8940:	e012      	b.n	8968 <baudrate_set+0x210>
	case 250000:
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    8942:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    8946:	60fb      	str	r3, [r7, #12]
		break;
    8948:	e00e      	b.n	8968 <baudrate_set+0x210>
	case 460800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    894a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    894e:	60fb      	str	r3, [r7, #12]
		break;
    8950:	e00a      	b.n	8968 <baudrate_set+0x210>
	case 921600:
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    8952:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    8956:	60fb      	str	r3, [r7, #12]
		break;
    8958:	e006      	b.n	8968 <baudrate_set+0x210>
	case 1000000:
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    895a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    895e:	60fb      	str	r3, [r7, #12]
		break;
    8960:	e002      	b.n	8968 <baudrate_set+0x210>
	default:
		return -EINVAL;
    8962:	f06f 0315 	mvn.w	r3, #21
    8966:	e004      	b.n	8972 <baudrate_set+0x21a>
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);
    8968:	68f9      	ldr	r1, [r7, #12]
    896a:	68b8      	ldr	r0, [r7, #8]
    896c:	f00b fa9f 	bl	13eae <nrf_uarte_baudrate_set>

	return 0;
    8970:	2300      	movs	r3, #0
}
    8972:	4618      	mov	r0, r3
    8974:	3710      	adds	r7, #16
    8976:	46bd      	mov	sp, r7
    8978:	bd80      	pop	{r7, pc}
    897a:	bf00      	nop
    897c:	000f4240 	.word	0x000f4240
    8980:	0003d090 	.word	0x0003d090
    8984:	0013b000 	.word	0x0013b000
    8988:	00275000 	.word	0x00275000
    898c:	003af000 	.word	0x003af000
    8990:	004ea000 	.word	0x004ea000
    8994:	0075c000 	.word	0x0075c000
    8998:	013a9000 	.word	0x013a9000

0000899c <uarte_nrfx_rx_counting_init>:
static void timer_handler(nrf_timer_event_t event_type, void *p_context) { }
static void rx_timeout(struct k_timer *timer);
static void tx_timeout(struct k_timer *timer);

static int uarte_nrfx_rx_counting_init(const struct device *dev)
{
    899c:	b580      	push	{r7, lr}
    899e:	b08e      	sub	sp, #56	; 0x38
    89a0:	af00      	add	r7, sp, #0
    89a2:	6078      	str	r0, [r7, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    89a4:	6878      	ldr	r0, [r7, #4]
    89a6:	f00b fb06 	bl	13fb6 <get_dev_data>
    89aa:	6378      	str	r0, [r7, #52]	; 0x34
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    89ac:	6878      	ldr	r0, [r7, #4]
    89ae:	f00b fb0d 	bl	13fcc <get_dev_config>
    89b2:	6338      	str	r0, [r7, #48]	; 0x30
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
    89b4:	6878      	ldr	r0, [r7, #4]
    89b6:	f00b fb14 	bl	13fe2 <get_uarte_instance>
    89ba:	62f8      	str	r0, [r7, #44]	; 0x2c
	int ret;

	if (hw_rx_counting_enabled(data)) {
    89bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
    89be:	f00b fc5d 	bl	1427c <hw_rx_counting_enabled>
    89c2:	4603      	mov	r3, r0
    89c4:	2b00      	cmp	r3, #0
    89c6:	d062      	beq.n	8a8e <uarte_nrfx_rx_counting_init+0xf2>
		nrfx_timer_config_t tmr_config = NRFX_TIMER_DEFAULT_CONFIG;
    89c8:	2300      	movs	r3, #0
    89ca:	763b      	strb	r3, [r7, #24]
    89cc:	2300      	movs	r3, #0
    89ce:	767b      	strb	r3, [r7, #25]
    89d0:	2300      	movs	r3, #0
    89d2:	76bb      	strb	r3, [r7, #26]
    89d4:	2307      	movs	r3, #7
    89d6:	76fb      	strb	r3, [r7, #27]
    89d8:	2300      	movs	r3, #0
    89da:	61fb      	str	r3, [r7, #28]

		tmr_config.mode = NRF_TIMER_MODE_COUNTER;
    89dc:	2301      	movs	r3, #1
    89de:	767b      	strb	r3, [r7, #25]
		tmr_config.bit_width = NRF_TIMER_BIT_WIDTH_32;
    89e0:	2303      	movs	r3, #3
    89e2:	76bb      	strb	r3, [r7, #26]
		ret = nrfx_timer_init(&cfg->timer,
    89e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    89e6:	3308      	adds	r3, #8
    89e8:	f107 0118 	add.w	r1, r7, #24
    89ec:	4a6b      	ldr	r2, [pc, #428]	; (8b9c <uarte_nrfx_rx_counting_init+0x200>)
    89ee:	4618      	mov	r0, r3
    89f0:	f001 fc64 	bl	a2bc <nrfx_timer_init>
    89f4:	4603      	mov	r3, r0
    89f6:	62bb      	str	r3, [r7, #40]	; 0x28
				      &tmr_config,
				      timer_handler);
		if (ret != NRFX_SUCCESS) {
    89f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    89fa:	4a69      	ldr	r2, [pc, #420]	; (8ba0 <uarte_nrfx_rx_counting_init+0x204>)
    89fc:	4293      	cmp	r3, r2
    89fe:	d03c      	beq.n	8a7a <uarte_nrfx_rx_counting_init+0xde>
			LOG_ERR("Timer already initialized, "
    8a00:	2301      	movs	r3, #1
    8a02:	2b00      	cmp	r3, #0
    8a04:	d032      	beq.n	8a6c <uarte_nrfx_rx_counting_init+0xd0>
    8a06:	f00a fe81 	bl	1370c <k_is_user_context>
    8a0a:	4603      	mov	r3, r0
    8a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    8a10:	2300      	movs	r3, #0
    8a12:	617b      	str	r3, [r7, #20]
    8a14:	2301      	movs	r3, #1
    8a16:	2b00      	cmp	r3, #0
    8a18:	d007      	beq.n	8a2a <uarte_nrfx_rx_counting_init+0x8e>
    8a1a:	4b62      	ldr	r3, [pc, #392]	; (8ba4 <uarte_nrfx_rx_counting_init+0x208>)
    8a1c:	681b      	ldr	r3, [r3, #0]
    8a1e:	4618      	mov	r0, r3
    8a20:	f7ff fe30 	bl	8684 <log_const_source_id>
    8a24:	4603      	mov	r3, r0
    8a26:	b29b      	uxth	r3, r3
    8a28:	e000      	b.n	8a2c <uarte_nrfx_rx_counting_init+0x90>
    8a2a:	2300      	movs	r3, #0
    8a2c:	84bb      	strh	r3, [r7, #36]	; 0x24
    8a2e:	7c3b      	ldrb	r3, [r7, #16]
    8a30:	2201      	movs	r2, #1
    8a32:	f362 0302 	bfi	r3, r2, #0, #3
    8a36:	743b      	strb	r3, [r7, #16]
    8a38:	7c3b      	ldrb	r3, [r7, #16]
    8a3a:	f36f 03c5 	bfc	r3, #3, #3
    8a3e:	743b      	strb	r3, [r7, #16]
    8a40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    8a42:	f3c3 0309 	ubfx	r3, r3, #0, #10
    8a46:	b29a      	uxth	r2, r3
    8a48:	8a3b      	ldrh	r3, [r7, #16]
    8a4a:	f362 138f 	bfi	r3, r2, #6, #10
    8a4e:	823b      	strh	r3, [r7, #16]
    8a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    8a54:	2b00      	cmp	r3, #0
    8a56:	d004      	beq.n	8a62 <uarte_nrfx_rx_counting_init+0xc6>
    8a58:	4953      	ldr	r1, [pc, #332]	; (8ba8 <uarte_nrfx_rx_counting_init+0x20c>)
    8a5a:	8a38      	ldrh	r0, [r7, #16]
    8a5c:	f7fa f90e 	bl	2c7c <log_from_user>
    8a60:	e005      	b.n	8a6e <uarte_nrfx_rx_counting_init+0xd2>
    8a62:	8a39      	ldrh	r1, [r7, #16]
    8a64:	4850      	ldr	r0, [pc, #320]	; (8ba8 <uarte_nrfx_rx_counting_init+0x20c>)
    8a66:	f008 fa02 	bl	10e6e <log_0>
    8a6a:	e000      	b.n	8a6e <uarte_nrfx_rx_counting_init+0xd2>
    8a6c:	bf00      	nop
				"switching to software byte counting.");
			data->async->hw_rx_counting = false;
    8a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8a70:	68db      	ldr	r3, [r3, #12]
    8a72:	2200      	movs	r2, #0
    8a74:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
    8a78:	e009      	b.n	8a8e <uarte_nrfx_rx_counting_init+0xf2>
		} else {
			nrfx_timer_enable(&cfg->timer);
    8a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8a7c:	3308      	adds	r3, #8
    8a7e:	4618      	mov	r0, r3
    8a80:	f001 fdf6 	bl	a670 <nrfx_timer_enable>
			nrfx_timer_clear(&cfg->timer);
    8a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8a86:	3308      	adds	r3, #8
    8a88:	4618      	mov	r0, r3
    8a8a:	f001 fee1 	bl	a850 <nrfx_timer_clear>
		}
	}

	if (hw_rx_counting_enabled(data)) {
    8a8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
    8a90:	f00b fbf4 	bl	1427c <hw_rx_counting_enabled>
    8a94:	4603      	mov	r3, r0
    8a96:	2b00      	cmp	r3, #0
    8a98:	d04c      	beq.n	8b34 <uarte_nrfx_rx_counting_init+0x198>
		ret = gppi_channel_alloc(&data->async->rx_cnt.ppi);
    8a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8a9c:	68db      	ldr	r3, [r3, #12]
    8a9e:	33b0      	adds	r3, #176	; 0xb0
    8aa0:	4618      	mov	r0, r3
    8aa2:	f001 f8f9 	bl	9c98 <nrfx_dppi_channel_alloc>
    8aa6:	4603      	mov	r3, r0
    8aa8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (ret != NRFX_SUCCESS) {
    8aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8aac:	4a3c      	ldr	r2, [pc, #240]	; (8ba0 <uarte_nrfx_rx_counting_init+0x204>)
    8aae:	4293      	cmp	r3, r2
    8ab0:	d040      	beq.n	8b34 <uarte_nrfx_rx_counting_init+0x198>
			LOG_ERR("Failed to allocate PPI Channel, "
    8ab2:	2301      	movs	r3, #1
    8ab4:	2b00      	cmp	r3, #0
    8ab6:	d032      	beq.n	8b1e <uarte_nrfx_rx_counting_init+0x182>
    8ab8:	f00a fe28 	bl	1370c <k_is_user_context>
    8abc:	4603      	mov	r3, r0
    8abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    8ac2:	2300      	movs	r3, #0
    8ac4:	60fb      	str	r3, [r7, #12]
    8ac6:	2301      	movs	r3, #1
    8ac8:	2b00      	cmp	r3, #0
    8aca:	d007      	beq.n	8adc <uarte_nrfx_rx_counting_init+0x140>
    8acc:	4b35      	ldr	r3, [pc, #212]	; (8ba4 <uarte_nrfx_rx_counting_init+0x208>)
    8ace:	681b      	ldr	r3, [r3, #0]
    8ad0:	4618      	mov	r0, r3
    8ad2:	f7ff fdd7 	bl	8684 <log_const_source_id>
    8ad6:	4603      	mov	r3, r0
    8ad8:	b29b      	uxth	r3, r3
    8ada:	e000      	b.n	8ade <uarte_nrfx_rx_counting_init+0x142>
    8adc:	2300      	movs	r3, #0
    8ade:	843b      	strh	r3, [r7, #32]
    8ae0:	7a3b      	ldrb	r3, [r7, #8]
    8ae2:	2201      	movs	r2, #1
    8ae4:	f362 0302 	bfi	r3, r2, #0, #3
    8ae8:	723b      	strb	r3, [r7, #8]
    8aea:	7a3b      	ldrb	r3, [r7, #8]
    8aec:	f36f 03c5 	bfc	r3, #3, #3
    8af0:	723b      	strb	r3, [r7, #8]
    8af2:	8c3b      	ldrh	r3, [r7, #32]
    8af4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    8af8:	b29a      	uxth	r2, r3
    8afa:	893b      	ldrh	r3, [r7, #8]
    8afc:	f362 138f 	bfi	r3, r2, #6, #10
    8b00:	813b      	strh	r3, [r7, #8]
    8b02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    8b06:	2b00      	cmp	r3, #0
    8b08:	d004      	beq.n	8b14 <uarte_nrfx_rx_counting_init+0x178>
    8b0a:	4928      	ldr	r1, [pc, #160]	; (8bac <uarte_nrfx_rx_counting_init+0x210>)
    8b0c:	8938      	ldrh	r0, [r7, #8]
    8b0e:	f7fa f8b5 	bl	2c7c <log_from_user>
    8b12:	e005      	b.n	8b20 <uarte_nrfx_rx_counting_init+0x184>
    8b14:	8939      	ldrh	r1, [r7, #8]
    8b16:	4825      	ldr	r0, [pc, #148]	; (8bac <uarte_nrfx_rx_counting_init+0x210>)
    8b18:	f008 f9a9 	bl	10e6e <log_0>
    8b1c:	e000      	b.n	8b20 <uarte_nrfx_rx_counting_init+0x184>
    8b1e:	bf00      	nop
				"switching to software byte counting.");
			data->async->hw_rx_counting = false;
    8b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8b22:	68db      	ldr	r3, [r3, #12]
    8b24:	2200      	movs	r2, #0
    8b26:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
			nrfx_timer_uninit(&cfg->timer);
    8b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8b2c:	3308      	adds	r3, #8
    8b2e:	4618      	mov	r0, r3
    8b30:	f001 fd2e 	bl	a590 <nrfx_timer_uninit>
		}
	}

	if (hw_rx_counting_enabled(data)) {
    8b34:	6b78      	ldr	r0, [r7, #52]	; 0x34
    8b36:	f00b fba1 	bl	1427c <hw_rx_counting_enabled>
    8b3a:	4603      	mov	r3, r0
    8b3c:	2b00      	cmp	r3, #0
    8b3e:	d023      	beq.n	8b88 <uarte_nrfx_rx_counting_init+0x1ec>
			return -EIO;
		}
#else
		nrf_uarte_publish_set(uarte,
				      NRF_UARTE_EVENT_RXDRDY,
				      data->async->rx_cnt.ppi);
    8b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8b42:	68db      	ldr	r3, [r3, #12]
		nrf_uarte_publish_set(uarte,
    8b44:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    8b48:	461a      	mov	r2, r3
    8b4a:	f44f 7184 	mov.w	r1, #264	; 0x108
    8b4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    8b50:	f00b f904 	bl	13d5c <nrf_uarte_publish_set>
		nrf_timer_subscribe_set(cfg->timer.p_reg,
    8b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8b56:	6898      	ldr	r0, [r3, #8]
					NRF_TIMER_TASK_COUNT,
					data->async->rx_cnt.ppi);
    8b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8b5a:	68db      	ldr	r3, [r3, #12]
		nrf_timer_subscribe_set(cfg->timer.p_reg,
    8b5c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    8b60:	461a      	mov	r2, r3
    8b62:	2108      	movs	r1, #8
    8b64:	f00b f9ef 	bl	13f46 <nrf_timer_subscribe_set>

#endif
		ret = gppi_channel_enable(data->async->rx_cnt.ppi);
    8b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8b6a:	68db      	ldr	r3, [r3, #12]
    8b6c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    8b70:	4618      	mov	r0, r3
    8b72:	f001 f96d 	bl	9e50 <nrfx_dppi_channel_enable>
    8b76:	4603      	mov	r3, r0
    8b78:	62bb      	str	r3, [r7, #40]	; 0x28
		if (ret != NRFX_SUCCESS) {
    8b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8b7c:	4a08      	ldr	r2, [pc, #32]	; (8ba0 <uarte_nrfx_rx_counting_init+0x204>)
    8b7e:	4293      	cmp	r3, r2
    8b80:	d006      	beq.n	8b90 <uarte_nrfx_rx_counting_init+0x1f4>
			return -EIO;
    8b82:	f06f 0304 	mvn.w	r3, #4
    8b86:	e004      	b.n	8b92 <uarte_nrfx_rx_counting_init+0x1f6>
		}
	} else {
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_RXDRDY_MASK);
    8b88:	2104      	movs	r1, #4
    8b8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    8b8c:	f00b f8bb 	bl	13d06 <nrf_uarte_int_enable>
	}

	return 0;
    8b90:	2300      	movs	r3, #0
}
    8b92:	4618      	mov	r0, r3
    8b94:	3738      	adds	r7, #56	; 0x38
    8b96:	46bd      	mov	sp, r7
    8b98:	bd80      	pop	{r7, pc}
    8b9a:	bf00      	nop
    8b9c:	000143f5 	.word	0x000143f5
    8ba0:	0bad0000 	.word	0x0bad0000
    8ba4:	2000011c 	.word	0x2000011c
    8ba8:	00018b4c 	.word	0x00018b4c
    8bac:	00018b8c 	.word	0x00018b8c

00008bb0 <uarte_nrfx_init>:

static int uarte_nrfx_init(const struct device *dev)
{
    8bb0:	b580      	push	{r7, lr}
    8bb2:	b086      	sub	sp, #24
    8bb4:	af00      	add	r7, sp, #0
    8bb6:	6078      	str	r0, [r7, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    8bb8:	6878      	ldr	r0, [r7, #4]
    8bba:	f00b f9fc 	bl	13fb6 <get_dev_data>
    8bbe:	6178      	str	r0, [r7, #20]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
    8bc0:	6878      	ldr	r0, [r7, #4]
    8bc2:	f00b fa0e 	bl	13fe2 <get_uarte_instance>
    8bc6:	6138      	str	r0, [r7, #16]

	int ret = uarte_nrfx_rx_counting_init(dev);
    8bc8:	6878      	ldr	r0, [r7, #4]
    8bca:	f7ff fee7 	bl	899c <uarte_nrfx_rx_counting_init>
    8bce:	60f8      	str	r0, [r7, #12]

	if (ret != 0) {
    8bd0:	68fb      	ldr	r3, [r7, #12]
    8bd2:	2b00      	cmp	r3, #0
    8bd4:	d001      	beq.n	8bda <uarte_nrfx_init+0x2a>
		return ret;
    8bd6:	68fb      	ldr	r3, [r7, #12]
    8bd8:	e05c      	b.n	8c94 <uarte_nrfx_init+0xe4>
	}

	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    8bda:	697b      	ldr	r3, [r7, #20]
    8bdc:	68db      	ldr	r3, [r3, #12]
    8bde:	2201      	movs	r2, #1
    8be0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	nrf_uarte_int_enable(uarte,
    8be4:	492d      	ldr	r1, [pc, #180]	; (8c9c <uarte_nrfx_init+0xec>)
    8be6:	6938      	ldr	r0, [r7, #16]
    8be8:	f00b f88d 	bl	13d06 <nrf_uarte_int_enable>
			     NRF_UARTE_INT_ENDRX_MASK |
			     NRF_UARTE_INT_RXSTARTED_MASK |
			     NRF_UARTE_INT_ERROR_MASK |
			     NRF_UARTE_INT_RXTO_MASK);
	nrf_uarte_enable(uarte);
    8bec:	6938      	ldr	r0, [r7, #16]
    8bee:	f00b f8dc 	bl	13daa <nrf_uarte_enable>
	/**
	 * Stop any currently running RX operations. This can occur when a
	 * bootloader sets up the UART hardware and does not clean it up
	 * before jumping to the next application.
	 */
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    8bf2:	f44f 71a6 	mov.w	r1, #332	; 0x14c
    8bf6:	6938      	ldr	r0, [r7, #16]
    8bf8:	f00b f83e 	bl	13c78 <nrf_uarte_event_check>
    8bfc:	4603      	mov	r3, r0
    8bfe:	2b00      	cmp	r3, #0
    8c00:	d029      	beq.n	8c56 <uarte_nrfx_init+0xa6>
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPRX);
    8c02:	2104      	movs	r1, #4
    8c04:	6938      	ldr	r0, [r7, #16]
    8c06:	f00b f91c 	bl	13e42 <nrf_uarte_task_trigger>
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    8c0a:	bf00      	nop
    8c0c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    8c10:	6938      	ldr	r0, [r7, #16]
    8c12:	f00b f831 	bl	13c78 <nrf_uarte_event_check>
    8c16:	4603      	mov	r3, r0
    8c18:	f083 0301 	eor.w	r3, r3, #1
    8c1c:	b2db      	uxtb	r3, r3
    8c1e:	2b00      	cmp	r3, #0
    8c20:	d00a      	beq.n	8c38 <uarte_nrfx_init+0x88>
		       !nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    8c22:	f44f 7192 	mov.w	r1, #292	; 0x124
    8c26:	6938      	ldr	r0, [r7, #16]
    8c28:	f00b f826 	bl	13c78 <nrf_uarte_event_check>
    8c2c:	4603      	mov	r3, r0
    8c2e:	f083 0301 	eor.w	r3, r3, #1
    8c32:	b2db      	uxtb	r3, r3
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    8c34:	2b00      	cmp	r3, #0
    8c36:	d1e9      	bne.n	8c0c <uarte_nrfx_init+0x5c>
			/* Busy wait for event to register */
		}
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_RXSTARTED);
    8c38:	f44f 71a6 	mov.w	r1, #332	; 0x14c
    8c3c:	6938      	ldr	r0, [r7, #16]
    8c3e:	f00b f806 	bl	13c4e <nrf_uarte_event_clear>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
    8c42:	f44f 7188 	mov.w	r1, #272	; 0x110
    8c46:	6938      	ldr	r0, [r7, #16]
    8c48:	f00b f801 	bl	13c4e <nrf_uarte_event_clear>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_RXTO);
    8c4c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    8c50:	6938      	ldr	r0, [r7, #16]
    8c52:	f00a fffc 	bl	13c4e <nrf_uarte_event_clear>
	}

	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    8c56:	697b      	ldr	r3, [r7, #20]
    8c58:	68db      	ldr	r3, [r3, #12]
    8c5a:	3378      	adds	r3, #120	; 0x78
    8c5c:	2200      	movs	r2, #0
    8c5e:	4910      	ldr	r1, [pc, #64]	; (8ca0 <uarte_nrfx_init+0xf0>)
    8c60:	4618      	mov	r0, r3
    8c62:	f00e f85f 	bl	16d24 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    8c66:	697b      	ldr	r3, [r7, #20]
    8c68:	68db      	ldr	r3, [r3, #12]
    8c6a:	3378      	adds	r3, #120	; 0x78
    8c6c:	6979      	ldr	r1, [r7, #20]
    8c6e:	4618      	mov	r0, r3
    8c70:	f00a fef2 	bl	13a58 <k_timer_user_data_set>
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    8c74:	697b      	ldr	r3, [r7, #20]
    8c76:	68db      	ldr	r3, [r3, #12]
    8c78:	3318      	adds	r3, #24
    8c7a:	2200      	movs	r2, #0
    8c7c:	4909      	ldr	r1, [pc, #36]	; (8ca4 <uarte_nrfx_init+0xf4>)
    8c7e:	4618      	mov	r0, r3
    8c80:	f00e f850 	bl	16d24 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    8c84:	697b      	ldr	r3, [r7, #20]
    8c86:	68db      	ldr	r3, [r3, #12]
    8c88:	3318      	adds	r3, #24
    8c8a:	6979      	ldr	r1, [r7, #20]
    8c8c:	4618      	mov	r0, r3
    8c8e:	f00a fee3 	bl	13a58 <k_timer_user_data_set>

	return 0;
    8c92:	2300      	movs	r3, #0
}
    8c94:	4618      	mov	r0, r3
    8c96:	3718      	adds	r7, #24
    8c98:	46bd      	mov	sp, r7
    8c9a:	bd80      	pop	{r7, pc}
    8c9c:	000a0210 	.word	0x000a0210
    8ca0:	000147d5 	.word	0x000147d5
    8ca4:	000147b3 	.word	0x000147b3

00008ca8 <uarte_nrfx_rx_enable>:
}

static int uarte_nrfx_rx_enable(const struct device *dev, uint8_t *buf,
				size_t len,
				int32_t timeout)
{
    8ca8:	b580      	push	{r7, lr}
    8caa:	b08c      	sub	sp, #48	; 0x30
    8cac:	af00      	add	r7, sp, #0
    8cae:	60f8      	str	r0, [r7, #12]
    8cb0:	60b9      	str	r1, [r7, #8]
    8cb2:	607a      	str	r2, [r7, #4]
    8cb4:	603b      	str	r3, [r7, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    8cb6:	68f8      	ldr	r0, [r7, #12]
    8cb8:	f00b f97d 	bl	13fb6 <get_dev_data>
    8cbc:	62f8      	str	r0, [r7, #44]	; 0x2c
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
    8cbe:	68f8      	ldr	r0, [r7, #12]
    8cc0:	f00b f98f 	bl	13fe2 <get_uarte_instance>
    8cc4:	62b8      	str	r0, [r7, #40]	; 0x28

	if (nrf_uarte_rx_pin_get(uarte) == NRF_UARTE_PSEL_DISCONNECTED) {
    8cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    8cc8:	f00b f89c 	bl	13e04 <nrf_uarte_rx_pin_get>
    8ccc:	4603      	mov	r3, r0
    8cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    8cd2:	d111      	bne.n	8cf8 <uarte_nrfx_rx_enable+0x50>
		__ASSERT(false, "TX only UARTE instance");
    8cd4:	f240 3325 	movw	r3, #805	; 0x325
    8cd8:	4a60      	ldr	r2, [pc, #384]	; (8e5c <uarte_nrfx_rx_enable+0x1b4>)
    8cda:	4961      	ldr	r1, [pc, #388]	; (8e60 <uarte_nrfx_rx_enable+0x1b8>)
    8cdc:	4861      	ldr	r0, [pc, #388]	; (8e64 <uarte_nrfx_rx_enable+0x1bc>)
    8cde:	f006 ffc9 	bl	fc74 <printk>
    8ce2:	4861      	ldr	r0, [pc, #388]	; (8e68 <uarte_nrfx_rx_enable+0x1c0>)
    8ce4:	f006 ffc6 	bl	fc74 <printk>
    8ce8:	f240 3125 	movw	r1, #805	; 0x325
    8cec:	485b      	ldr	r0, [pc, #364]	; (8e5c <uarte_nrfx_rx_enable+0x1b4>)
    8cee:	f007 fc1d 	bl	1052c <assert_post_action>
		return -ENOTSUP;
    8cf2:	f06f 0385 	mvn.w	r3, #133	; 0x85
    8cf6:	e0ac      	b.n	8e52 <uarte_nrfx_rx_enable+0x1aa>
	}

	data->async->rx_timeout = timeout;
    8cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8cfa:	68db      	ldr	r3, [r3, #12]
    8cfc:	683a      	ldr	r2, [r7, #0]
    8cfe:	66da      	str	r2, [r3, #108]	; 0x6c
	data->async->rx_timeout_slab =
		MAX(timeout / RX_TIMEOUT_DIV,
    8d00:	683b      	ldr	r3, [r7, #0]
    8d02:	2b09      	cmp	r3, #9
    8d04:	dd07      	ble.n	8d16 <uarte_nrfx_rx_enable+0x6e>
    8d06:	683b      	ldr	r3, [r7, #0]
    8d08:	4a58      	ldr	r2, [pc, #352]	; (8e6c <uarte_nrfx_rx_enable+0x1c4>)
    8d0a:	fb82 1203 	smull	r1, r2, r2, r3
    8d0e:	1052      	asrs	r2, r2, #1
    8d10:	17db      	asrs	r3, r3, #31
    8d12:	1ad3      	subs	r3, r2, r3
    8d14:	e000      	b.n	8d18 <uarte_nrfx_rx_enable+0x70>
    8d16:	2301      	movs	r3, #1
	data->async->rx_timeout_slab =
    8d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    8d1a:	68d2      	ldr	r2, [r2, #12]
    8d1c:	6713      	str	r3, [r2, #112]	; 0x70
		    NRFX_CEIL_DIV(1000, CONFIG_SYS_CLOCK_TICKS_PER_SEC));

	data->async->rx_buf = buf;
    8d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8d20:	68db      	ldr	r3, [r3, #12]
    8d22:	68ba      	ldr	r2, [r7, #8]
    8d24:	651a      	str	r2, [r3, #80]	; 0x50
	data->async->rx_buf_len = len;
    8d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8d28:	68db      	ldr	r3, [r3, #12]
    8d2a:	687a      	ldr	r2, [r7, #4]
    8d2c:	655a      	str	r2, [r3, #84]	; 0x54
	data->async->rx_offset = 0;
    8d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8d30:	68db      	ldr	r3, [r3, #12]
    8d32:	2200      	movs	r2, #0
    8d34:	659a      	str	r2, [r3, #88]	; 0x58
	data->async->rx_next_buf = NULL;
    8d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8d38:	68db      	ldr	r3, [r3, #12]
    8d3a:	2200      	movs	r2, #0
    8d3c:	65da      	str	r2, [r3, #92]	; 0x5c
	data->async->rx_next_buf_len = 0;
    8d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8d40:	68db      	ldr	r3, [r3, #12]
    8d42:	2200      	movs	r2, #0
    8d44:	661a      	str	r2, [r3, #96]	; 0x60

	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8d46:	68f8      	ldr	r0, [r7, #12]
    8d48:	f00b f940 	bl	13fcc <get_dev_config>
    8d4c:	4603      	mov	r3, r0
    8d4e:	685b      	ldr	r3, [r3, #4]
    8d50:	f003 0310 	and.w	r3, r3, #16
    8d54:	2b00      	cmp	r3, #0
    8d56:	d042      	beq.n	8dde <uarte_nrfx_rx_enable+0x136>
		if (data->async->rx_flush_cnt) {
    8d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8d5a:	68db      	ldr	r3, [r3, #12]
    8d5c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    8d60:	2b00      	cmp	r3, #0
    8d62:	d03c      	beq.n	8dde <uarte_nrfx_rx_enable+0x136>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    8d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8d66:	68db      	ldr	r3, [r3, #12]
    8d68:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    8d6c:	461a      	mov	r2, r3
    8d6e:	687b      	ldr	r3, [r7, #4]
    8d70:	4293      	cmp	r3, r2
    8d72:	bf28      	it	cs
    8d74:	4613      	movcs	r3, r2
    8d76:	627b      	str	r3, [r7, #36]	; 0x24

			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
    8d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8d7a:	68db      	ldr	r3, [r3, #12]
    8d7c:	33bc      	adds	r3, #188	; 0xbc
    8d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8d80:	4619      	mov	r1, r3
    8d82:	68b8      	ldr	r0, [r7, #8]
    8d84:	f009 fe93 	bl	12aae <memcpy>
			buf += cpy_len;
    8d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d8a:	68ba      	ldr	r2, [r7, #8]
    8d8c:	4413      	add	r3, r2
    8d8e:	60bb      	str	r3, [r7, #8]
			len -= cpy_len;
    8d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d92:	687a      	ldr	r2, [r7, #4]
    8d94:	1ad3      	subs	r3, r2, r3
    8d96:	607b      	str	r3, [r7, #4]

			/* If flush content filled whole new buffer complete the
			 * request and indicate rx being disabled.
			 */
			if (!len) {
    8d98:	687b      	ldr	r3, [r7, #4]
    8d9a:	2b00      	cmp	r3, #0
    8d9c:	d11f      	bne.n	8dde <uarte_nrfx_rx_enable+0x136>
				data->async->rx_flush_cnt -= cpy_len;
    8d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8da0:	68db      	ldr	r3, [r3, #12]
    8da2:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
    8da6:	b25a      	sxtb	r2, r3
    8da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8daa:	b25b      	sxtb	r3, r3
    8dac:	1ad3      	subs	r3, r2, r3
    8dae:	b25a      	sxtb	r2, r3
    8db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8db2:	68db      	ldr	r3, [r3, #12]
    8db4:	b2d2      	uxtb	r2, r2
    8db6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
				notify_uart_rx_rdy(dev, cpy_len);
    8dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8dbc:	4619      	mov	r1, r3
    8dbe:	68f8      	ldr	r0, [r7, #12]
    8dc0:	f00b fbf0 	bl	145a4 <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
    8dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8dc6:	68db      	ldr	r3, [r3, #12]
    8dc8:	3350      	adds	r3, #80	; 0x50
    8dca:	2201      	movs	r2, #1
    8dcc:	4619      	mov	r1, r3
    8dce:	68f8      	ldr	r0, [r7, #12]
    8dd0:	f00b fc0f 	bl	145f2 <notify_rx_buf_release>
						      true);
				notify_rx_disable(dev);
    8dd4:	68f8      	ldr	r0, [r7, #12]
    8dd6:	f00b fc34 	bl	14642 <notify_rx_disable>
				return 0;
    8dda:	2300      	movs	r3, #0
    8ddc:	e039      	b.n	8e52 <uarte_nrfx_rx_enable+0x1aa>
			}
		}
	}

	nrf_uarte_rx_buffer_set(uarte, buf, len);
    8dde:	687a      	ldr	r2, [r7, #4]
    8de0:	68b9      	ldr	r1, [r7, #8]
    8de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    8de4:	f00b f890 	bl	13f08 <nrf_uarte_rx_buffer_set>

	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
    8de8:	f44f 7188 	mov.w	r1, #272	; 0x110
    8dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    8dee:	f00a ff2e 	bl	13c4e <nrf_uarte_event_clear>
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_RXSTARTED);
    8df2:	f44f 71a6 	mov.w	r1, #332	; 0x14c
    8df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    8df8:	f00a ff29 	bl	13c4e <nrf_uarte_event_clear>

	data->async->rx_enabled = true;
    8dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8dfe:	68db      	ldr	r3, [r3, #12]
    8e00:	2201      	movs	r2, #1
    8e02:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8e06:	68f8      	ldr	r0, [r7, #12]
    8e08:	f00b f8e0 	bl	13fcc <get_dev_config>
    8e0c:	4603      	mov	r3, r0
    8e0e:	685b      	ldr	r3, [r3, #4]
    8e10:	f003 0310 	and.w	r3, r3, #16
    8e14:	2b00      	cmp	r3, #0
    8e16:	d017      	beq.n	8e48 <uarte_nrfx_rx_enable+0x1a0>
	__asm__ volatile(
    8e18:	f04f 0320 	mov.w	r3, #32
    8e1c:	f3ef 8211 	mrs	r2, BASEPRI
    8e20:	f383 8811 	msr	BASEPRI, r3
    8e24:	f3bf 8f6f 	isb	sy
    8e28:	61ba      	str	r2, [r7, #24]
    8e2a:	617b      	str	r3, [r7, #20]
	return key;
    8e2c:	69bb      	ldr	r3, [r7, #24]
		int key = irq_lock();
    8e2e:	623b      	str	r3, [r7, #32]

		uarte_enable(dev, UARTE_LOW_POWER_RX);
    8e30:	2102      	movs	r1, #2
    8e32:	68f8      	ldr	r0, [r7, #12]
    8e34:	f00b fa2f 	bl	14296 <uarte_enable>
		irq_unlock(key);
    8e38:	6a3b      	ldr	r3, [r7, #32]
    8e3a:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    8e3c:	69fb      	ldr	r3, [r7, #28]
    8e3e:	f383 8811 	msr	BASEPRI, r3
    8e42:	f3bf 8f6f 	isb	sy
}
    8e46:	bf00      	nop
	}

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
    8e48:	2100      	movs	r1, #0
    8e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    8e4c:	f00a fff9 	bl	13e42 <nrf_uarte_task_trigger>

	return 0;
    8e50:	2300      	movs	r3, #0
}
    8e52:	4618      	mov	r0, r3
    8e54:	3730      	adds	r7, #48	; 0x30
    8e56:	46bd      	mov	sp, r7
    8e58:	bd80      	pop	{r7, pc}
    8e5a:	bf00      	nop
    8e5c:	00018bd4 	.word	0x00018bd4
    8e60:	00018af8 	.word	0x00018af8
    8e64:	00018ad8 	.word	0x00018ad8
    8e68:	00018c08 	.word	0x00018c08
    8e6c:	66666667 	.word	0x66666667

00008e70 <rx_flush>:
 * @param len Buffer size, not used if @p buf is null.
 *
 * @return number of bytes flushed from the fifo.
 */
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
{
    8e70:	b580      	push	{r7, lr}
    8e72:	b08c      	sub	sp, #48	; 0x30
    8e74:	af00      	add	r7, sp, #0
    8e76:	60f8      	str	r0, [r7, #12]
    8e78:	60b9      	str	r1, [r7, #8]
    8e7a:	607a      	str	r2, [r7, #4]
	/* Flushing RX fifo requires buffer bigger than 4 bytes to empty fifo*/
	static const uint8_t dirty;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
    8e7c:	68f8      	ldr	r0, [r7, #12]
    8e7e:	f00b f8b0 	bl	13fe2 <get_uarte_instance>
    8e82:	6238      	str	r0, [r7, #32]
	uint32_t prev_rx_amount = nrf_uarte_rx_amount_get(uarte);
    8e84:	6a38      	ldr	r0, [r7, #32]
    8e86:	f00b f852 	bl	13f2e <nrf_uarte_rx_amount_get>
    8e8a:	61f8      	str	r0, [r7, #28]
	uint8_t tmp_buf[UARTE_HW_RX_FIFO_SIZE];
	uint8_t *flush_buf = buf ? buf : tmp_buf;
    8e8c:	68bb      	ldr	r3, [r7, #8]
    8e8e:	2b00      	cmp	r3, #0
    8e90:	d102      	bne.n	8e98 <rx_flush+0x28>
    8e92:	f107 0310 	add.w	r3, r7, #16
    8e96:	e000      	b.n	8e9a <rx_flush+0x2a>
    8e98:	68bb      	ldr	r3, [r7, #8]
    8e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    8e9c:	68bb      	ldr	r3, [r7, #8]
    8e9e:	2b00      	cmp	r3, #0
    8ea0:	d001      	beq.n	8ea6 <rx_flush+0x36>
    8ea2:	687b      	ldr	r3, [r7, #4]
    8ea4:	e000      	b.n	8ea8 <rx_flush+0x38>
    8ea6:	2305      	movs	r3, #5
    8ea8:	62bb      	str	r3, [r7, #40]	; 0x28

	if (buf) {
    8eaa:	68bb      	ldr	r3, [r7, #8]
    8eac:	2b00      	cmp	r3, #0
    8eae:	d00b      	beq.n	8ec8 <rx_flush+0x58>
		memset(buf, dirty, len);
    8eb0:	4b2e      	ldr	r3, [pc, #184]	; (8f6c <rx_flush+0xfc>)
    8eb2:	781b      	ldrb	r3, [r3, #0]
    8eb4:	687a      	ldr	r2, [r7, #4]
    8eb6:	4619      	mov	r1, r3
    8eb8:	68b8      	ldr	r0, [r7, #8]
    8eba:	f009 fe4d 	bl	12b58 <memset>
		flush_buf = buf;
    8ebe:	68bb      	ldr	r3, [r7, #8]
    8ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
		flush_len = len;
    8ec2:	687b      	ldr	r3, [r7, #4]
    8ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    8ec6:	e004      	b.n	8ed2 <rx_flush+0x62>
	} else {
		flush_buf = tmp_buf;
    8ec8:	f107 0310 	add.w	r3, r7, #16
    8ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
		flush_len = sizeof(tmp_buf);
    8ece:	2305      	movs	r3, #5
    8ed0:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	nrf_uarte_rx_buffer_set(uarte, flush_buf, flush_len);
    8ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8ed4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    8ed6:	6a38      	ldr	r0, [r7, #32]
    8ed8:	f00b f816 	bl	13f08 <nrf_uarte_rx_buffer_set>
	/* Final part of handling RXTO event is in ENDRX interrupt
	 * handler. ENDRX is generated as a result of FLUSHRX task.
	 */
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
    8edc:	f44f 7188 	mov.w	r1, #272	; 0x110
    8ee0:	6a38      	ldr	r0, [r7, #32]
    8ee2:	f00a feb4 	bl	13c4e <nrf_uarte_event_clear>
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_FLUSHRX);
    8ee6:	212c      	movs	r1, #44	; 0x2c
    8ee8:	6a38      	ldr	r0, [r7, #32]
    8eea:	f00a ffaa 	bl	13e42 <nrf_uarte_task_trigger>
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8eee:	bf00      	nop
    8ef0:	f44f 7188 	mov.w	r1, #272	; 0x110
    8ef4:	6a38      	ldr	r0, [r7, #32]
    8ef6:	f00a febf 	bl	13c78 <nrf_uarte_event_check>
    8efa:	4603      	mov	r3, r0
    8efc:	f083 0301 	eor.w	r3, r3, #1
    8f00:	b2db      	uxtb	r3, r3
    8f02:	2b00      	cmp	r3, #0
    8f04:	d1f4      	bne.n	8ef0 <rx_flush+0x80>
		/* empty */
	}
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
    8f06:	f44f 7188 	mov.w	r1, #272	; 0x110
    8f0a:	6a38      	ldr	r0, [r7, #32]
    8f0c:	f00a fe9f 	bl	13c4e <nrf_uarte_event_clear>

	if (!buf) {
    8f10:	68bb      	ldr	r3, [r7, #8]
    8f12:	2b00      	cmp	r3, #0
    8f14:	d105      	bne.n	8f22 <rx_flush+0xb2>
		return nrf_uarte_rx_amount_get(uarte);
    8f16:	6a38      	ldr	r0, [r7, #32]
    8f18:	f00b f809 	bl	13f2e <nrf_uarte_rx_amount_get>
    8f1c:	4603      	mov	r3, r0
    8f1e:	b2db      	uxtb	r3, r3
    8f20:	e020      	b.n	8f64 <rx_flush+0xf4>
	}

	uint32_t rx_amount = nrf_uarte_rx_amount_get(uarte);
    8f22:	6a38      	ldr	r0, [r7, #32]
    8f24:	f00b f803 	bl	13f2e <nrf_uarte_rx_amount_get>
    8f28:	61b8      	str	r0, [r7, #24]

	if (rx_amount != prev_rx_amount) {
    8f2a:	69ba      	ldr	r2, [r7, #24]
    8f2c:	69fb      	ldr	r3, [r7, #28]
    8f2e:	429a      	cmp	r2, r3
    8f30:	d002      	beq.n	8f38 <rx_flush+0xc8>
		return rx_amount;
    8f32:	69bb      	ldr	r3, [r7, #24]
    8f34:	b2db      	uxtb	r3, r3
    8f36:	e015      	b.n	8f64 <rx_flush+0xf4>
	}

	for (int i = 0; i < flush_len; i++) {
    8f38:	2300      	movs	r3, #0
    8f3a:	627b      	str	r3, [r7, #36]	; 0x24
    8f3c:	e00d      	b.n	8f5a <rx_flush+0xea>
		if (buf[i] != dirty) {
    8f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8f40:	68ba      	ldr	r2, [r7, #8]
    8f42:	4413      	add	r3, r2
    8f44:	781a      	ldrb	r2, [r3, #0]
    8f46:	4b09      	ldr	r3, [pc, #36]	; (8f6c <rx_flush+0xfc>)
    8f48:	781b      	ldrb	r3, [r3, #0]
    8f4a:	429a      	cmp	r2, r3
    8f4c:	d002      	beq.n	8f54 <rx_flush+0xe4>
			return rx_amount;
    8f4e:	69bb      	ldr	r3, [r7, #24]
    8f50:	b2db      	uxtb	r3, r3
    8f52:	e007      	b.n	8f64 <rx_flush+0xf4>
	for (int i = 0; i < flush_len; i++) {
    8f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8f56:	3301      	adds	r3, #1
    8f58:	627b      	str	r3, [r7, #36]	; 0x24
    8f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8f5e:	429a      	cmp	r2, r3
    8f60:	d8ed      	bhi.n	8f3e <rx_flush+0xce>
		}
	}

	return 0;
    8f62:	2300      	movs	r3, #0
}
    8f64:	4618      	mov	r0, r3
    8f66:	3730      	adds	r7, #48	; 0x30
    8f68:	46bd      	mov	sp, r7
    8f6a:	bd80      	pop	{r7, pc}
    8f6c:	0001ae5f 	.word	0x0001ae5f

00008f70 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    8f70:	b5b0      	push	{r4, r5, r7, lr}
    8f72:	b086      	sub	sp, #24
    8f74:	af00      	add	r7, sp, #0
    8f76:	6078      	str	r0, [r7, #4]
    8f78:	6039      	str	r1, [r7, #0]
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    8f7a:	683b      	ldr	r3, [r7, #0]
    8f7c:	3316      	adds	r3, #22
    8f7e:	4618      	mov	r0, r3
    8f80:	f000 fe8a 	bl	9c98 <nrfx_dppi_channel_alloc>
    8f84:	6178      	str	r0, [r7, #20]
	if (ret != NRFX_SUCCESS) {
    8f86:	697b      	ldr	r3, [r7, #20]
    8f88:	4a2c      	ldr	r2, [pc, #176]	; (903c <endtx_stoptx_ppi_init+0xcc>)
    8f8a:	4293      	cmp	r3, r2
    8f8c:	d037      	beq.n	8ffe <endtx_stoptx_ppi_init+0x8e>
		LOG_ERR("Failed to allocate PPI Channel");
    8f8e:	2301      	movs	r3, #1
    8f90:	2b00      	cmp	r3, #0
    8f92:	d030      	beq.n	8ff6 <endtx_stoptx_ppi_init+0x86>
    8f94:	f00a fbba 	bl	1370c <k_is_user_context>
    8f98:	4603      	mov	r3, r0
    8f9a:	74fb      	strb	r3, [r7, #19]
    8f9c:	2300      	movs	r3, #0
    8f9e:	60fb      	str	r3, [r7, #12]
    8fa0:	2301      	movs	r3, #1
    8fa2:	2b00      	cmp	r3, #0
    8fa4:	d007      	beq.n	8fb6 <endtx_stoptx_ppi_init+0x46>
    8fa6:	4b26      	ldr	r3, [pc, #152]	; (9040 <endtx_stoptx_ppi_init+0xd0>)
    8fa8:	681b      	ldr	r3, [r3, #0]
    8faa:	4618      	mov	r0, r3
    8fac:	f7ff fb6a 	bl	8684 <log_const_source_id>
    8fb0:	4603      	mov	r3, r0
    8fb2:	b29b      	uxth	r3, r3
    8fb4:	e000      	b.n	8fb8 <endtx_stoptx_ppi_init+0x48>
    8fb6:	2300      	movs	r3, #0
    8fb8:	823b      	strh	r3, [r7, #16]
    8fba:	7a3b      	ldrb	r3, [r7, #8]
    8fbc:	2201      	movs	r2, #1
    8fbe:	f362 0302 	bfi	r3, r2, #0, #3
    8fc2:	723b      	strb	r3, [r7, #8]
    8fc4:	7a3b      	ldrb	r3, [r7, #8]
    8fc6:	f36f 03c5 	bfc	r3, #3, #3
    8fca:	723b      	strb	r3, [r7, #8]
    8fcc:	8a3b      	ldrh	r3, [r7, #16]
    8fce:	f3c3 0309 	ubfx	r3, r3, #0, #10
    8fd2:	b29a      	uxth	r2, r3
    8fd4:	893b      	ldrh	r3, [r7, #8]
    8fd6:	f362 138f 	bfi	r3, r2, #6, #10
    8fda:	813b      	strh	r3, [r7, #8]
    8fdc:	7cfb      	ldrb	r3, [r7, #19]
    8fde:	2b00      	cmp	r3, #0
    8fe0:	d004      	beq.n	8fec <endtx_stoptx_ppi_init+0x7c>
    8fe2:	4918      	ldr	r1, [pc, #96]	; (9044 <endtx_stoptx_ppi_init+0xd4>)
    8fe4:	8938      	ldrh	r0, [r7, #8]
    8fe6:	f7f9 fe49 	bl	2c7c <log_from_user>
    8fea:	e005      	b.n	8ff8 <endtx_stoptx_ppi_init+0x88>
    8fec:	8939      	ldrh	r1, [r7, #8]
    8fee:	4815      	ldr	r0, [pc, #84]	; (9044 <endtx_stoptx_ppi_init+0xd4>)
    8ff0:	f007 ff3d 	bl	10e6e <log_0>
    8ff4:	e000      	b.n	8ff8 <endtx_stoptx_ppi_init+0x88>
    8ff6:	bf00      	nop
		return -EIO;
    8ff8:	f06f 0304 	mvn.w	r3, #4
    8ffc:	e01a      	b.n	9034 <endtx_stoptx_ppi_init+0xc4>
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    8ffe:	683b      	ldr	r3, [r7, #0]
    9000:	7d9c      	ldrb	r4, [r3, #22]
    9002:	f44f 7190 	mov.w	r1, #288	; 0x120
    9006:	6878      	ldr	r0, [r7, #4]
    9008:	f00a fe4a 	bl	13ca0 <nrf_uarte_event_address_get>
    900c:	4605      	mov	r5, r0
    900e:	210c      	movs	r1, #12
    9010:	6878      	ldr	r0, [r7, #4]
    9012:	f00a ff26 	bl	13e62 <nrf_uarte_task_address_get>
    9016:	4603      	mov	r3, r0
    9018:	461a      	mov	r2, r3
    901a:	4629      	mov	r1, r5
    901c:	4620      	mov	r0, r4
    901e:	f00a ffb5 	bl	13f8c <nrfx_gppi_channel_endpoints_setup>
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    9022:	683b      	ldr	r3, [r7, #0]
    9024:	7d9b      	ldrb	r3, [r3, #22]
    9026:	461a      	mov	r2, r3
    9028:	2301      	movs	r3, #1
    902a:	4093      	lsls	r3, r2
    902c:	4618      	mov	r0, r3
    902e:	f7ff fb39 	bl	86a4 <nrfx_gppi_channels_enable>

	return 0;
    9032:	2300      	movs	r3, #0
}
    9034:	4618      	mov	r0, r3
    9036:	3718      	adds	r7, #24
    9038:	46bd      	mov	sp, r7
    903a:	bdb0      	pop	{r4, r5, r7, pc}
    903c:	0bad0000 	.word	0x0bad0000
    9040:	2000011c 	.word	0x2000011c
    9044:	00018c24 	.word	0x00018c24

00009048 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    9048:	b590      	push	{r4, r7, lr}
    904a:	b087      	sub	sp, #28
    904c:	af00      	add	r7, sp, #0
    904e:	6078      	str	r0, [r7, #4]
    9050:	4b0c      	ldr	r3, [pc, #48]	; (9084 <uarte_0_init+0x3c>)
    9052:	f107 0408 	add.w	r4, r7, #8
    9056:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    9058:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    905c:	2200      	movs	r2, #0
    905e:	2101      	movs	r1, #1
    9060:	2008      	movs	r0, #8
    9062:	f7fc fcd9 	bl	5a18 <z_arm_irq_priority_set>
    9066:	2008      	movs	r0, #8
    9068:	f009 fb35 	bl	126d6 <arch_irq_enable>
    906c:	f107 0308 	add.w	r3, r7, #8
    9070:	2200      	movs	r2, #0
    9072:	4619      	mov	r1, r3
    9074:	6878      	ldr	r0, [r7, #4]
    9076:	f00c f837 	bl	150e8 <uarte_instance_init>
    907a:	4603      	mov	r3, r0
    907c:	4618      	mov	r0, r3
    907e:	371c      	adds	r7, #28
    9080:	46bd      	mov	sp, r7
    9082:	bd90      	pop	{r4, r7, pc}
    9084:	00018c44 	.word	0x00018c44

00009088 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    9088:	b590      	push	{r4, r7, lr}
    908a:	b087      	sub	sp, #28
    908c:	af00      	add	r7, sp, #0
    908e:	6078      	str	r0, [r7, #4]
    9090:	4b0c      	ldr	r3, [pc, #48]	; (90c4 <uarte_1_init+0x3c>)
    9092:	f107 0408 	add.w	r4, r7, #8
    9096:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    9098:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    909c:	2200      	movs	r2, #0
    909e:	2101      	movs	r1, #1
    90a0:	2009      	movs	r0, #9
    90a2:	f7fc fcb9 	bl	5a18 <z_arm_irq_priority_set>
    90a6:	2009      	movs	r0, #9
    90a8:	f009 fb15 	bl	126d6 <arch_irq_enable>
    90ac:	f107 0308 	add.w	r3, r7, #8
    90b0:	2200      	movs	r2, #0
    90b2:	4619      	mov	r1, r3
    90b4:	6878      	ldr	r0, [r7, #4]
    90b6:	f00c f817 	bl	150e8 <uarte_instance_init>
    90ba:	4603      	mov	r3, r0
    90bc:	4618      	mov	r0, r3
    90be:	371c      	adds	r7, #28
    90c0:	46bd      	mov	sp, r7
    90c2:	bd90      	pop	{r4, r7, pc}
    90c4:	00018c5c 	.word	0x00018c5c

000090c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
    90c8:	b480      	push	{r7}
    90ca:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
    90cc:	f3bf 8f4f 	dsb	sy
}
    90d0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    90d2:	4b06      	ldr	r3, [pc, #24]	; (90ec <__NVIC_SystemReset+0x24>)
    90d4:	68db      	ldr	r3, [r3, #12]
    90d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    90da:	4904      	ldr	r1, [pc, #16]	; (90ec <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    90dc:	4b04      	ldr	r3, [pc, #16]	; (90f0 <__NVIC_SystemReset+0x28>)
    90de:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    90e0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
    90e2:	f3bf 8f4f 	dsb	sy
}
    90e6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    90e8:	bf00      	nop
    90ea:	e7fd      	b.n	90e8 <__NVIC_SystemReset+0x20>
    90ec:	e000ed00 	.word	0xe000ed00
    90f0:	05fa0004 	.word	0x05fa0004

000090f4 <nrf91_errata_6>:
#ifndef NRF91_ERRATA_6_ENABLE_WORKAROUND
    #define NRF91_ERRATA_6_ENABLE_WORKAROUND NRF91_ERRATA_6_PRESENT
#endif

static bool nrf91_errata_6(void)
{
    90f4:	b480      	push	{r7}
    90f6:	b083      	sub	sp, #12
    90f8:	af00      	add	r7, sp, #0
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    90fa:	4b0e      	ldr	r3, [pc, #56]	; (9134 <nrf91_errata_6+0x40>)
    90fc:	681b      	ldr	r3, [r3, #0]
    90fe:	607b      	str	r3, [r7, #4]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    9100:	4b0d      	ldr	r3, [pc, #52]	; (9138 <nrf91_errata_6+0x44>)
    9102:	681b      	ldr	r3, [r3, #0]
    9104:	603b      	str	r3, [r7, #0]
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    9106:	687b      	ldr	r3, [r7, #4]
    9108:	2b09      	cmp	r3, #9
    910a:	d10c      	bne.n	9126 <nrf91_errata_6+0x32>
            {
                switch(var2)
    910c:	683b      	ldr	r3, [r7, #0]
    910e:	2b01      	cmp	r3, #1
    9110:	d003      	beq.n	911a <nrf91_errata_6+0x26>
    9112:	683b      	ldr	r3, [r7, #0]
    9114:	2b02      	cmp	r3, #2
    9116:	d002      	beq.n	911e <nrf91_errata_6+0x2a>
    9118:	e003      	b.n	9122 <nrf91_errata_6+0x2e>
                {
                    case 0x01ul:
                        return true;
    911a:	2301      	movs	r3, #1
    911c:	e004      	b.n	9128 <nrf91_errata_6+0x34>
                    case 0x02ul:
                        return true;
    911e:	2301      	movs	r3, #1
    9120:	e002      	b.n	9128 <nrf91_errata_6+0x34>
                    default:
                        return true;
    9122:	2301      	movs	r3, #1
    9124:	e000      	b.n	9128 <nrf91_errata_6+0x34>
                }
            }
        #endif
        return false;
    9126:	2300      	movs	r3, #0
    #endif
}
    9128:	4618      	mov	r0, r3
    912a:	370c      	adds	r7, #12
    912c:	46bd      	mov	sp, r7
    912e:	bc80      	pop	{r7}
    9130:	4770      	bx	lr
    9132:	bf00      	nop
    9134:	00ff0130 	.word	0x00ff0130
    9138:	00ff0134 	.word	0x00ff0134

0000913c <nrf91_errata_14>:
#ifndef NRF91_ERRATA_14_ENABLE_WORKAROUND
    #define NRF91_ERRATA_14_ENABLE_WORKAROUND NRF91_ERRATA_14_PRESENT
#endif

static bool nrf91_errata_14(void)
{
    913c:	b480      	push	{r7}
    913e:	b083      	sub	sp, #12
    9140:	af00      	add	r7, sp, #0
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    9142:	4b0e      	ldr	r3, [pc, #56]	; (917c <nrf91_errata_14+0x40>)
    9144:	681b      	ldr	r3, [r3, #0]
    9146:	607b      	str	r3, [r7, #4]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    9148:	4b0d      	ldr	r3, [pc, #52]	; (9180 <nrf91_errata_14+0x44>)
    914a:	681b      	ldr	r3, [r3, #0]
    914c:	603b      	str	r3, [r7, #0]
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    914e:	687b      	ldr	r3, [r7, #4]
    9150:	2b09      	cmp	r3, #9
    9152:	d10c      	bne.n	916e <nrf91_errata_14+0x32>
            {
                switch(var2)
    9154:	683b      	ldr	r3, [r7, #0]
    9156:	2b01      	cmp	r3, #1
    9158:	d003      	beq.n	9162 <nrf91_errata_14+0x26>
    915a:	683b      	ldr	r3, [r7, #0]
    915c:	2b02      	cmp	r3, #2
    915e:	d002      	beq.n	9166 <nrf91_errata_14+0x2a>
    9160:	e003      	b.n	916a <nrf91_errata_14+0x2e>
                {
                    case 0x01ul:
                        return true;
    9162:	2301      	movs	r3, #1
    9164:	e004      	b.n	9170 <nrf91_errata_14+0x34>
                    case 0x02ul:
                        return false;
    9166:	2300      	movs	r3, #0
    9168:	e002      	b.n	9170 <nrf91_errata_14+0x34>
                    default:
                        return false;
    916a:	2300      	movs	r3, #0
    916c:	e000      	b.n	9170 <nrf91_errata_14+0x34>
                }
            }
        #endif
        return false;
    916e:	2300      	movs	r3, #0
    #endif
}
    9170:	4618      	mov	r0, r3
    9172:	370c      	adds	r7, #12
    9174:	46bd      	mov	sp, r7
    9176:	bc80      	pop	{r7}
    9178:	4770      	bx	lr
    917a:	bf00      	nop
    917c:	00ff0130 	.word	0x00ff0130
    9180:	00ff0134 	.word	0x00ff0134

00009184 <nrf91_errata_15>:
#ifndef NRF91_ERRATA_15_ENABLE_WORKAROUND
    #define NRF91_ERRATA_15_ENABLE_WORKAROUND NRF91_ERRATA_15_PRESENT
#endif

static bool nrf91_errata_15(void)
{
    9184:	b480      	push	{r7}
    9186:	b083      	sub	sp, #12
    9188:	af00      	add	r7, sp, #0
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    918a:	4b0e      	ldr	r3, [pc, #56]	; (91c4 <nrf91_errata_15+0x40>)
    918c:	681b      	ldr	r3, [r3, #0]
    918e:	607b      	str	r3, [r7, #4]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    9190:	4b0d      	ldr	r3, [pc, #52]	; (91c8 <nrf91_errata_15+0x44>)
    9192:	681b      	ldr	r3, [r3, #0]
    9194:	603b      	str	r3, [r7, #0]
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    9196:	687b      	ldr	r3, [r7, #4]
    9198:	2b09      	cmp	r3, #9
    919a:	d10c      	bne.n	91b6 <nrf91_errata_15+0x32>
            {
                switch(var2)
    919c:	683b      	ldr	r3, [r7, #0]
    919e:	2b01      	cmp	r3, #1
    91a0:	d003      	beq.n	91aa <nrf91_errata_15+0x26>
    91a2:	683b      	ldr	r3, [r7, #0]
    91a4:	2b02      	cmp	r3, #2
    91a6:	d002      	beq.n	91ae <nrf91_errata_15+0x2a>
    91a8:	e003      	b.n	91b2 <nrf91_errata_15+0x2e>
                {
                    case 0x01ul:
                        return false;
    91aa:	2300      	movs	r3, #0
    91ac:	e004      	b.n	91b8 <nrf91_errata_15+0x34>
                    case 0x02ul:
                        return true;
    91ae:	2301      	movs	r3, #1
    91b0:	e002      	b.n	91b8 <nrf91_errata_15+0x34>
                    default:
                        return true;
    91b2:	2301      	movs	r3, #1
    91b4:	e000      	b.n	91b8 <nrf91_errata_15+0x34>
                }
            }
        #endif
        return false;
    91b6:	2300      	movs	r3, #0
    #endif
}
    91b8:	4618      	mov	r0, r3
    91ba:	370c      	adds	r7, #12
    91bc:	46bd      	mov	sp, r7
    91be:	bc80      	pop	{r7}
    91c0:	4770      	bx	lr
    91c2:	bf00      	nop
    91c4:	00ff0130 	.word	0x00ff0130
    91c8:	00ff0134 	.word	0x00ff0134

000091cc <nrf91_errata_20>:
#ifndef NRF91_ERRATA_20_ENABLE_WORKAROUND
    #define NRF91_ERRATA_20_ENABLE_WORKAROUND NRF91_ERRATA_20_PRESENT
#endif

static bool nrf91_errata_20(void)
{
    91cc:	b480      	push	{r7}
    91ce:	b083      	sub	sp, #12
    91d0:	af00      	add	r7, sp, #0
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    91d2:	4b0e      	ldr	r3, [pc, #56]	; (920c <nrf91_errata_20+0x40>)
    91d4:	681b      	ldr	r3, [r3, #0]
    91d6:	607b      	str	r3, [r7, #4]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    91d8:	4b0d      	ldr	r3, [pc, #52]	; (9210 <nrf91_errata_20+0x44>)
    91da:	681b      	ldr	r3, [r3, #0]
    91dc:	603b      	str	r3, [r7, #0]
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    91de:	687b      	ldr	r3, [r7, #4]
    91e0:	2b09      	cmp	r3, #9
    91e2:	d10c      	bne.n	91fe <nrf91_errata_20+0x32>
            {
                switch(var2)
    91e4:	683b      	ldr	r3, [r7, #0]
    91e6:	2b01      	cmp	r3, #1
    91e8:	d003      	beq.n	91f2 <nrf91_errata_20+0x26>
    91ea:	683b      	ldr	r3, [r7, #0]
    91ec:	2b02      	cmp	r3, #2
    91ee:	d002      	beq.n	91f6 <nrf91_errata_20+0x2a>
    91f0:	e003      	b.n	91fa <nrf91_errata_20+0x2e>
                {
                    case 0x01ul:
                        return true;
    91f2:	2301      	movs	r3, #1
    91f4:	e004      	b.n	9200 <nrf91_errata_20+0x34>
                    case 0x02ul:
                        return false;
    91f6:	2300      	movs	r3, #0
    91f8:	e002      	b.n	9200 <nrf91_errata_20+0x34>
                    default:
                        return false;
    91fa:	2300      	movs	r3, #0
    91fc:	e000      	b.n	9200 <nrf91_errata_20+0x34>
                }
            }
        #endif
        return false;
    91fe:	2300      	movs	r3, #0
    #endif
}
    9200:	4618      	mov	r0, r3
    9202:	370c      	adds	r7, #12
    9204:	46bd      	mov	sp, r7
    9206:	bc80      	pop	{r7}
    9208:	4770      	bx	lr
    920a:	bf00      	nop
    920c:	00ff0130 	.word	0x00ff0130
    9210:	00ff0134 	.word	0x00ff0134

00009214 <nrf91_errata_31>:
#ifndef NRF91_ERRATA_31_ENABLE_WORKAROUND
    #define NRF91_ERRATA_31_ENABLE_WORKAROUND NRF91_ERRATA_31_PRESENT
#endif

static bool nrf91_errata_31(void)
{
    9214:	b480      	push	{r7}
    9216:	b083      	sub	sp, #12
    9218:	af00      	add	r7, sp, #0
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    921a:	4b0e      	ldr	r3, [pc, #56]	; (9254 <nrf91_errata_31+0x40>)
    921c:	681b      	ldr	r3, [r3, #0]
    921e:	607b      	str	r3, [r7, #4]
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    9220:	4b0d      	ldr	r3, [pc, #52]	; (9258 <nrf91_errata_31+0x44>)
    9222:	681b      	ldr	r3, [r3, #0]
    9224:	603b      	str	r3, [r7, #0]
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    9226:	687b      	ldr	r3, [r7, #4]
    9228:	2b09      	cmp	r3, #9
    922a:	d10c      	bne.n	9246 <nrf91_errata_31+0x32>
            {
                switch(var2)
    922c:	683b      	ldr	r3, [r7, #0]
    922e:	2b01      	cmp	r3, #1
    9230:	d003      	beq.n	923a <nrf91_errata_31+0x26>
    9232:	683b      	ldr	r3, [r7, #0]
    9234:	2b02      	cmp	r3, #2
    9236:	d002      	beq.n	923e <nrf91_errata_31+0x2a>
    9238:	e003      	b.n	9242 <nrf91_errata_31+0x2e>
                {
                    case 0x01ul:
                        return true;
    923a:	2301      	movs	r3, #1
    923c:	e004      	b.n	9248 <nrf91_errata_31+0x34>
                    case 0x02ul:
                        return true;
    923e:	2301      	movs	r3, #1
    9240:	e002      	b.n	9248 <nrf91_errata_31+0x34>
                    default:
                        return true;
    9242:	2301      	movs	r3, #1
    9244:	e000      	b.n	9248 <nrf91_errata_31+0x34>
                }
            }
        #endif
        return false;
    9246:	2300      	movs	r3, #0
    #endif
}
    9248:	4618      	mov	r0, r3
    924a:	370c      	adds	r7, #12
    924c:	46bd      	mov	sp, r7
    924e:	bc80      	pop	{r7}
    9250:	4770      	bx	lr
    9252:	bf00      	nop
    9254:	00ff0130 	.word	0x00ff0130
    9258:	00ff0134 	.word	0x00ff0134

0000925c <SystemCoreClockUpdate>:
    static bool uicr_HFXOSRC_erased(void);
    static bool uicr_HFXOCNT_erased(void);
#endif

void SystemCoreClockUpdate(void)
{
    925c:	b480      	push	{r7}
    925e:	af00      	add	r7, sp, #0
    SystemCoreClock = __SYSTEM_CLOCK;
    9260:	4b03      	ldr	r3, [pc, #12]	; (9270 <SystemCoreClockUpdate+0x14>)
    9262:	4a04      	ldr	r2, [pc, #16]	; (9274 <SystemCoreClockUpdate+0x18>)
    9264:	601a      	str	r2, [r3, #0]
}
    9266:	bf00      	nop
    9268:	46bd      	mov	sp, r7
    926a:	bc80      	pop	{r7}
    926c:	4770      	bx	lr
    926e:	bf00      	nop
    9270:	20000150 	.word	0x20000150
    9274:	03d09000 	.word	0x03d09000

00009278 <SystemInit>:

void SystemInit(void)
{
    9278:	b580      	push	{r7, lr}
    927a:	b082      	sub	sp, #8
    927c:	af00      	add	r7, sp, #0
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
    927e:	f7ff ff39 	bl	90f4 <nrf91_errata_6>
    9282:	4603      	mov	r3, r0
    9284:	2b00      	cmp	r3, #0
    9286:	d009      	beq.n	929c <SystemInit+0x24>
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    9288:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    928c:	2200      	movs	r2, #0
    928e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    9292:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9296:	2200      	movs	r2, #0
    9298:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    929c:	f7ff ff4e 	bl	913c <nrf91_errata_14>
    92a0:	4603      	mov	r3, r0
    92a2:	2b00      	cmp	r3, #0
    92a4:	d006      	beq.n	92b4 <SystemInit+0x3c>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    92a6:	4b57      	ldr	r3, [pc, #348]	; (9404 <SystemInit+0x18c>)
    92a8:	2201      	movs	r2, #1
    92aa:	601a      	str	r2, [r3, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    92ac:	4b56      	ldr	r3, [pc, #344]	; (9408 <SystemInit+0x190>)
    92ae:	2201      	movs	r2, #1
    92b0:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
    92b4:	f7ff ff66 	bl	9184 <nrf91_errata_15>
    92b8:	4603      	mov	r3, r0
    92ba:	2b00      	cmp	r3, #0
    92bc:	d003      	beq.n	92c6 <SystemInit+0x4e>
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    92be:	4b52      	ldr	r3, [pc, #328]	; (9408 <SystemInit+0x190>)
    92c0:	2201      	movs	r2, #1
    92c2:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    92c6:	f7ff ff81 	bl	91cc <nrf91_errata_20>
    92ca:	4603      	mov	r3, r0
    92cc:	2b00      	cmp	r3, #0
    92ce:	d002      	beq.n	92d6 <SystemInit+0x5e>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    92d0:	4b4e      	ldr	r3, [pc, #312]	; (940c <SystemInit+0x194>)
    92d2:	220e      	movs	r2, #14
    92d4:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
    92d6:	f7ff ff9d 	bl	9214 <nrf91_errata_31>
    92da:	4603      	mov	r3, r0
    92dc:	2b00      	cmp	r3, #0
    92de:	d005      	beq.n	92ec <SystemInit+0x74>
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    92e0:	4b4b      	ldr	r3, [pc, #300]	; (9410 <SystemInit+0x198>)
    92e2:	2200      	movs	r2, #0
    92e4:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    92e6:	4b4b      	ldr	r3, [pc, #300]	; (9414 <SystemInit+0x19c>)
    92e8:	2201      	movs	r2, #1
    92ea:	601a      	str	r2, [r3, #0]
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
    92ec:	2300      	movs	r3, #0
    92ee:	607b      	str	r3, [r7, #4]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    92f0:	2300      	movs	r3, #0
    92f2:	607b      	str	r3, [r7, #4]
    92f4:	e011      	b.n	931a <SystemInit+0xa2>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    92f6:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    92fa:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    92fe:	687b      	ldr	r3, [r7, #4]
    9300:	3360      	adds	r3, #96	; 0x60
    9302:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    9306:	4619      	mov	r1, r3
    9308:	687b      	ldr	r3, [r7, #4]
    930a:	3360      	adds	r3, #96	; 0x60
    930c:	00db      	lsls	r3, r3, #3
    930e:	4413      	add	r3, r2
    9310:	685b      	ldr	r3, [r3, #4]
    9312:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    9314:	687b      	ldr	r3, [r7, #4]
    9316:	3301      	adds	r3, #1
    9318:	607b      	str	r3, [r7, #4]
    931a:	687b      	ldr	r3, [r7, #4]
    931c:	2bff      	cmp	r3, #255	; 0xff
    931e:	d808      	bhi.n	9332 <SystemInit+0xba>
    9320:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
    9324:	687b      	ldr	r3, [r7, #4]
    9326:	3360      	adds	r3, #96	; 0x60
    9328:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    932c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9330:	d1e1      	bne.n	92f6 <SystemInit+0x7e>
              #pragma diag_default=Pa082
          #endif
        }

        /* Set UICR->HFXOSRC and UICR->HFXOCNT to working defaults if UICR was erased */
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    9332:	f000 f88b 	bl	944c <uicr_HFXOSRC_erased>
    9336:	4603      	mov	r3, r0
    9338:	2b00      	cmp	r3, #0
    933a:	d104      	bne.n	9346 <SystemInit+0xce>
    933c:	f000 f876 	bl	942c <uicr_HFXOCNT_erased>
    9340:	4603      	mov	r3, r0
    9342:	2b00      	cmp	r3, #0
    9344:	d04f      	beq.n	93e6 <SystemInit+0x16e>
          /* Wait for pending NVMC operations to finish */
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    9346:	bf00      	nop
    9348:	4b33      	ldr	r3, [pc, #204]	; (9418 <SystemInit+0x1a0>)
    934a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    934e:	2b01      	cmp	r3, #1
    9350:	d1fa      	bne.n	9348 <SystemInit+0xd0>

          /* Enable write mode in NVMC */
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    9352:	4b31      	ldr	r3, [pc, #196]	; (9418 <SystemInit+0x1a0>)
    9354:	2201      	movs	r2, #1
    9356:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    935a:	bf00      	nop
    935c:	4b2e      	ldr	r3, [pc, #184]	; (9418 <SystemInit+0x1a0>)
    935e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    9362:	2b01      	cmp	r3, #1
    9364:	d1fa      	bne.n	935c <SystemInit+0xe4>

          if (uicr_HFXOSRC_erased()){
    9366:	f000 f871 	bl	944c <uicr_HFXOSRC_erased>
    936a:	4603      	mov	r3, r0
    936c:	2b00      	cmp	r3, #0
    936e:	d013      	beq.n	9398 <SystemInit+0x120>
            /* Write default value to UICR->HFXOSRC */
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    9370:	4b2a      	ldr	r3, [pc, #168]	; (941c <SystemInit+0x1a4>)
    9372:	69db      	ldr	r3, [r3, #28]
    9374:	4a2a      	ldr	r2, [pc, #168]	; (9420 <SystemInit+0x1a8>)
    9376:	6013      	str	r3, [r2, #0]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    9378:	4b29      	ldr	r3, [pc, #164]	; (9420 <SystemInit+0x1a8>)
    937a:	681b      	ldr	r3, [r3, #0]
    937c:	f023 0301 	bic.w	r3, r3, #1
    9380:	4a28      	ldr	r2, [pc, #160]	; (9424 <SystemInit+0x1ac>)
    9382:	6013      	str	r3, [r2, #0]
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    9384:	4a25      	ldr	r2, [pc, #148]	; (941c <SystemInit+0x1a4>)
    9386:	4b27      	ldr	r3, [pc, #156]	; (9424 <SystemInit+0x1ac>)
    9388:	681b      	ldr	r3, [r3, #0]
    938a:	61d3      	str	r3, [r2, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    938c:	bf00      	nop
    938e:	4b22      	ldr	r3, [pc, #136]	; (9418 <SystemInit+0x1a0>)
    9390:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    9394:	2b01      	cmp	r3, #1
    9396:	d1fa      	bne.n	938e <SystemInit+0x116>
          }

          if (uicr_HFXOCNT_erased()){
    9398:	f000 f848 	bl	942c <uicr_HFXOCNT_erased>
    939c:	4603      	mov	r3, r0
    939e:	2b00      	cmp	r3, #0
    93a0:	d015      	beq.n	93ce <SystemInit+0x156>
            /* Write default value to UICR->HFXOCNT */
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    93a2:	4b1e      	ldr	r3, [pc, #120]	; (941c <SystemInit+0x1a4>)
    93a4:	6a1b      	ldr	r3, [r3, #32]
    93a6:	4a1e      	ldr	r2, [pc, #120]	; (9420 <SystemInit+0x1a8>)
    93a8:	6013      	str	r3, [r2, #0]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    93aa:	4b1d      	ldr	r3, [pc, #116]	; (9420 <SystemInit+0x1a8>)
    93ac:	681b      	ldr	r3, [r3, #0]
    93ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    93b2:	f043 0320 	orr.w	r3, r3, #32
    93b6:	4a1b      	ldr	r2, [pc, #108]	; (9424 <SystemInit+0x1ac>)
    93b8:	6013      	str	r3, [r2, #0]
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    93ba:	4a18      	ldr	r2, [pc, #96]	; (941c <SystemInit+0x1a4>)
    93bc:	4b19      	ldr	r3, [pc, #100]	; (9424 <SystemInit+0x1ac>)
    93be:	681b      	ldr	r3, [r3, #0]
    93c0:	6213      	str	r3, [r2, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    93c2:	bf00      	nop
    93c4:	4b14      	ldr	r3, [pc, #80]	; (9418 <SystemInit+0x1a0>)
    93c6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    93ca:	2b01      	cmp	r3, #1
    93cc:	d1fa      	bne.n	93c4 <SystemInit+0x14c>
          }

          /* Enable read mode in NVMC */
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    93ce:	4b12      	ldr	r3, [pc, #72]	; (9418 <SystemInit+0x1a0>)
    93d0:	2200      	movs	r2, #0
    93d2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    93d6:	bf00      	nop
    93d8:	4b0f      	ldr	r3, [pc, #60]	; (9418 <SystemInit+0x1a0>)
    93da:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    93de:	2b01      	cmp	r3, #1
    93e0:	d1fa      	bne.n	93d8 <SystemInit+0x160>

          /* Reset to apply clock select update */
          NVIC_SystemReset();
    93e2:	f7ff fe71 	bl	90c8 <__NVIC_SystemReset>
             */
        #endif

        /* Allow Non-Secure code to run FPU instructions. 
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    93e6:	4b10      	ldr	r3, [pc, #64]	; (9428 <SystemInit+0x1b0>)
    93e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    93ec:	4a0e      	ldr	r2, [pc, #56]	; (9428 <SystemInit+0x1b0>)
    93ee:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    93f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
    93f6:	f7ff ff31 	bl	925c <SystemCoreClockUpdate>
}
    93fa:	bf00      	nop
    93fc:	3708      	adds	r7, #8
    93fe:	46bd      	mov	sp, r7
    9400:	bd80      	pop	{r7, pc}
    9402:	bf00      	nop
    9404:	50004a38 	.word	0x50004a38
    9408:	50004000 	.word	0x50004000
    940c:	5003aee4 	.word	0x5003aee4
    9410:	5000470c 	.word	0x5000470c
    9414:	50004710 	.word	0x50004710
    9418:	50039000 	.word	0x50039000
    941c:	00ff8000 	.word	0x00ff8000
    9420:	20000b80 	.word	0x20000b80
    9424:	20000b84 	.word	0x20000b84
    9428:	e000ed00 	.word	0xe000ed00

0000942c <uicr_HFXOCNT_erased>:


#if !defined(NRF_TRUSTZONE_NONSECURE)

    bool uicr_HFXOCNT_erased()
    {
    942c:	b480      	push	{r7}
    942e:	af00      	add	r7, sp, #0
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    9430:	4b05      	ldr	r3, [pc, #20]	; (9448 <uicr_HFXOCNT_erased+0x1c>)
    9432:	6a1b      	ldr	r3, [r3, #32]
    9434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    9438:	d101      	bne.n	943e <uicr_HFXOCNT_erased+0x12>
            return true;
    943a:	2301      	movs	r3, #1
    943c:	e000      	b.n	9440 <uicr_HFXOCNT_erased+0x14>
        }
        return false;
    943e:	2300      	movs	r3, #0
    }
    9440:	4618      	mov	r0, r3
    9442:	46bd      	mov	sp, r7
    9444:	bc80      	pop	{r7}
    9446:	4770      	bx	lr
    9448:	00ff8000 	.word	0x00ff8000

0000944c <uicr_HFXOSRC_erased>:
    
    
    bool uicr_HFXOSRC_erased()
    {
    944c:	b480      	push	{r7}
    944e:	af00      	add	r7, sp, #0
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    9450:	4b06      	ldr	r3, [pc, #24]	; (946c <uicr_HFXOSRC_erased+0x20>)
    9452:	69db      	ldr	r3, [r3, #28]
    9454:	f003 0301 	and.w	r3, r3, #1
    9458:	2b00      	cmp	r3, #0
    945a:	d001      	beq.n	9460 <uicr_HFXOSRC_erased+0x14>
            return true;
    945c:	2301      	movs	r3, #1
    945e:	e000      	b.n	9462 <uicr_HFXOSRC_erased+0x16>
        }
        return false;
    9460:	2300      	movs	r3, #0
    }
    9462:	4618      	mov	r0, r3
    9464:	46bd      	mov	sp, r7
    9466:	bc80      	pop	{r7}
    9468:	4770      	bx	lr
    946a:	bf00      	nop
    946c:	00ff8000 	.word	0x00ff8000

00009470 <nrfx_error_string_get>:
{
	k_busy_wait(usec_to_wait);
}

char const *nrfx_error_string_get(nrfx_err_t code)
{
    9470:	b480      	push	{r7}
    9472:	b083      	sub	sp, #12
    9474:	af00      	add	r7, sp, #0
    9476:	6078      	str	r0, [r7, #4]
	#define NRFX_ERROR_STRING_CASE(code)  case code: return #code
	switch (code) {
    9478:	687b      	ldr	r3, [r7, #4]
    947a:	4a33      	ldr	r2, [pc, #204]	; (9548 <nrfx_error_string_get+0xd8>)
    947c:	4293      	cmp	r3, r2
    947e:	d05a      	beq.n	9536 <nrfx_error_string_get+0xc6>
    9480:	687b      	ldr	r3, [r7, #4]
    9482:	4a31      	ldr	r2, [pc, #196]	; (9548 <nrfx_error_string_get+0xd8>)
    9484:	4293      	cmp	r3, r2
    9486:	d858      	bhi.n	953a <nrfx_error_string_get+0xca>
    9488:	687b      	ldr	r3, [r7, #4]
    948a:	4a30      	ldr	r2, [pc, #192]	; (954c <nrfx_error_string_get+0xdc>)
    948c:	4293      	cmp	r3, r2
    948e:	d050      	beq.n	9532 <nrfx_error_string_get+0xc2>
    9490:	687b      	ldr	r3, [r7, #4]
    9492:	4a2e      	ldr	r2, [pc, #184]	; (954c <nrfx_error_string_get+0xdc>)
    9494:	4293      	cmp	r3, r2
    9496:	d850      	bhi.n	953a <nrfx_error_string_get+0xca>
    9498:	687b      	ldr	r3, [r7, #4]
    949a:	4a2d      	ldr	r2, [pc, #180]	; (9550 <nrfx_error_string_get+0xe0>)
    949c:	4293      	cmp	r3, r2
    949e:	d227      	bcs.n	94f0 <nrfx_error_string_get+0x80>
    94a0:	687b      	ldr	r3, [r7, #4]
    94a2:	4a2c      	ldr	r2, [pc, #176]	; (9554 <nrfx_error_string_get+0xe4>)
    94a4:	4293      	cmp	r3, r2
    94a6:	d348      	bcc.n	953a <nrfx_error_string_get+0xca>
    94a8:	687b      	ldr	r3, [r7, #4]
    94aa:	f103 4374 	add.w	r3, r3, #4093640704	; 0xf4000000
    94ae:	f503 03a6 	add.w	r3, r3, #5439488	; 0x530000
    94b2:	2b0c      	cmp	r3, #12
    94b4:	d841      	bhi.n	953a <nrfx_error_string_get+0xca>
    94b6:	a201      	add	r2, pc, #4	; (adr r2, 94bc <nrfx_error_string_get+0x4c>)
    94b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    94bc:	000094fb 	.word	0x000094fb
    94c0:	000094ff 	.word	0x000094ff
    94c4:	00009503 	.word	0x00009503
    94c8:	00009507 	.word	0x00009507
    94cc:	0000950b 	.word	0x0000950b
    94d0:	0000950f 	.word	0x0000950f
    94d4:	00009513 	.word	0x00009513
    94d8:	00009517 	.word	0x00009517
    94dc:	0000951b 	.word	0x0000951b
    94e0:	0000951f 	.word	0x0000951f
    94e4:	00009523 	.word	0x00009523
    94e8:	00009527 	.word	0x00009527
    94ec:	0000952b 	.word	0x0000952b
    94f0:	687b      	ldr	r3, [r7, #4]
    94f2:	4a19      	ldr	r2, [pc, #100]	; (9558 <nrfx_error_string_get+0xe8>)
    94f4:	4293      	cmp	r3, r2
    94f6:	d01a      	beq.n	952e <nrfx_error_string_get+0xbe>
    94f8:	e01f      	b.n	953a <nrfx_error_string_get+0xca>
		NRFX_ERROR_STRING_CASE(NRFX_SUCCESS);
    94fa:	4b18      	ldr	r3, [pc, #96]	; (955c <nrfx_error_string_get+0xec>)
    94fc:	e01e      	b.n	953c <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_INTERNAL);
    94fe:	4b18      	ldr	r3, [pc, #96]	; (9560 <nrfx_error_string_get+0xf0>)
    9500:	e01c      	b.n	953c <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_NO_MEM);
    9502:	4b18      	ldr	r3, [pc, #96]	; (9564 <nrfx_error_string_get+0xf4>)
    9504:	e01a      	b.n	953c <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_NOT_SUPPORTED);
    9506:	4b18      	ldr	r3, [pc, #96]	; (9568 <nrfx_error_string_get+0xf8>)
    9508:	e018      	b.n	953c <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_INVALID_PARAM);
    950a:	4b18      	ldr	r3, [pc, #96]	; (956c <nrfx_error_string_get+0xfc>)
    950c:	e016      	b.n	953c <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_INVALID_STATE);
    950e:	4b18      	ldr	r3, [pc, #96]	; (9570 <nrfx_error_string_get+0x100>)
    9510:	e014      	b.n	953c <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_INVALID_LENGTH);
    9512:	4b18      	ldr	r3, [pc, #96]	; (9574 <nrfx_error_string_get+0x104>)
    9514:	e012      	b.n	953c <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_TIMEOUT);
    9516:	4b18      	ldr	r3, [pc, #96]	; (9578 <nrfx_error_string_get+0x108>)
    9518:	e010      	b.n	953c <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_FORBIDDEN);
    951a:	4b18      	ldr	r3, [pc, #96]	; (957c <nrfx_error_string_get+0x10c>)
    951c:	e00e      	b.n	953c <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_NULL);
    951e:	4b18      	ldr	r3, [pc, #96]	; (9580 <nrfx_error_string_get+0x110>)
    9520:	e00c      	b.n	953c <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_INVALID_ADDR);
    9522:	4b18      	ldr	r3, [pc, #96]	; (9584 <nrfx_error_string_get+0x114>)
    9524:	e00a      	b.n	953c <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_BUSY);
    9526:	4b18      	ldr	r3, [pc, #96]	; (9588 <nrfx_error_string_get+0x118>)
    9528:	e008      	b.n	953c <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_ALREADY_INITIALIZED);
    952a:	4b18      	ldr	r3, [pc, #96]	; (958c <nrfx_error_string_get+0x11c>)
    952c:	e006      	b.n	953c <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_DRV_TWI_ERR_OVERRUN);
    952e:	4b18      	ldr	r3, [pc, #96]	; (9590 <nrfx_error_string_get+0x120>)
    9530:	e004      	b.n	953c <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_DRV_TWI_ERR_ANACK);
    9532:	4b18      	ldr	r3, [pc, #96]	; (9594 <nrfx_error_string_get+0x124>)
    9534:	e002      	b.n	953c <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_DRV_TWI_ERR_DNACK);
    9536:	4b18      	ldr	r3, [pc, #96]	; (9598 <nrfx_error_string_get+0x128>)
    9538:	e000      	b.n	953c <nrfx_error_string_get+0xcc>
		default: return "unknown";
    953a:	4b18      	ldr	r3, [pc, #96]	; (959c <nrfx_error_string_get+0x12c>)
	}
}
    953c:	4618      	mov	r0, r3
    953e:	370c      	adds	r7, #12
    9540:	46bd      	mov	sp, r7
    9542:	bc80      	pop	{r7}
    9544:	4770      	bx	lr
    9546:	bf00      	nop
    9548:	0bae0002 	.word	0x0bae0002
    954c:	0bae0001 	.word	0x0bae0001
    9550:	0bad000d 	.word	0x0bad000d
    9554:	0bad0000 	.word	0x0bad0000
    9558:	0bae0000 	.word	0x0bae0000
    955c:	00018c74 	.word	0x00018c74
    9560:	00018c84 	.word	0x00018c84
    9564:	00018c98 	.word	0x00018c98
    9568:	00018cac 	.word	0x00018cac
    956c:	00018cc8 	.word	0x00018cc8
    9570:	00018ce4 	.word	0x00018ce4
    9574:	00018d00 	.word	0x00018d00
    9578:	00018d1c 	.word	0x00018d1c
    957c:	00018d30 	.word	0x00018d30
    9580:	00018d48 	.word	0x00018d48
    9584:	00018d58 	.word	0x00018d58
    9588:	00018d70 	.word	0x00018d70
    958c:	00018d80 	.word	0x00018d80
    9590:	00018da0 	.word	0x00018da0
    9594:	00018dc0 	.word	0x00018dc0
    9598:	00018de0 	.word	0x00018de0
    959c:	00018e00 	.word	0x00018e00

000095a0 <nrf_clock_is_running>:
{
    95a0:	b580      	push	{r7, lr}
    95a2:	b084      	sub	sp, #16
    95a4:	af00      	add	r7, sp, #0
    95a6:	60f8      	str	r0, [r7, #12]
    95a8:	460b      	mov	r3, r1
    95aa:	607a      	str	r2, [r7, #4]
    95ac:	72fb      	strb	r3, [r7, #11]
    switch (domain)
    95ae:	7afb      	ldrb	r3, [r7, #11]
    95b0:	2b00      	cmp	r3, #0
    95b2:	d002      	beq.n	95ba <nrf_clock_is_running+0x1a>
    95b4:	2b01      	cmp	r3, #1
    95b6:	d015      	beq.n	95e4 <nrf_clock_is_running+0x44>
    95b8:	e029      	b.n	960e <nrf_clock_is_running+0x6e>
            if (p_clk_src != NULL)
    95ba:	687b      	ldr	r3, [r7, #4]
    95bc:	2b00      	cmp	r3, #0
    95be:	d008      	beq.n	95d2 <nrf_clock_is_running+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    95c0:	68fb      	ldr	r3, [r7, #12]
    95c2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    95c6:	b2db      	uxtb	r3, r3
    95c8:	f003 0303 	and.w	r3, r3, #3
    95cc:	b2da      	uxtb	r2, r3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    95ce:	687b      	ldr	r3, [r7, #4]
    95d0:	701a      	strb	r2, [r3, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    95d2:	68fb      	ldr	r3, [r7, #12]
    95d4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    95d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    95dc:	2b00      	cmp	r3, #0
    95de:	d024      	beq.n	962a <nrf_clock_is_running+0x8a>
                return true;
    95e0:	2301      	movs	r3, #1
    95e2:	e026      	b.n	9632 <nrf_clock_is_running+0x92>
            if (p_clk_src != NULL)
    95e4:	687b      	ldr	r3, [r7, #4]
    95e6:	2b00      	cmp	r3, #0
    95e8:	d008      	beq.n	95fc <nrf_clock_is_running+0x5c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    95ea:	68fb      	ldr	r3, [r7, #12]
    95ec:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    95f0:	b2db      	uxtb	r3, r3
    95f2:	f003 0301 	and.w	r3, r3, #1
    95f6:	b2da      	uxtb	r2, r3
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    95f8:	687b      	ldr	r3, [r7, #4]
    95fa:	701a      	strb	r2, [r3, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    95fc:	68fb      	ldr	r3, [r7, #12]
    95fe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    9602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    9606:	2b00      	cmp	r3, #0
    9608:	d011      	beq.n	962e <nrf_clock_is_running+0x8e>
                return true;
    960a:	2301      	movs	r3, #1
    960c:	e011      	b.n	9632 <nrf_clock_is_running+0x92>
            NRFX_ASSERT(0);
    960e:	f44f 734f 	mov.w	r3, #828	; 0x33c
    9612:	4a0a      	ldr	r2, [pc, #40]	; (963c <nrf_clock_is_running+0x9c>)
    9614:	490a      	ldr	r1, [pc, #40]	; (9640 <nrf_clock_is_running+0xa0>)
    9616:	480b      	ldr	r0, [pc, #44]	; (9644 <nrf_clock_is_running+0xa4>)
    9618:	f006 fb2c 	bl	fc74 <printk>
    961c:	f44f 714f 	mov.w	r1, #828	; 0x33c
    9620:	4806      	ldr	r0, [pc, #24]	; (963c <nrf_clock_is_running+0x9c>)
    9622:	f006 ff83 	bl	1052c <assert_post_action>
            return false;
    9626:	2300      	movs	r3, #0
    9628:	e003      	b.n	9632 <nrf_clock_is_running+0x92>
            break;
    962a:	bf00      	nop
    962c:	e000      	b.n	9630 <nrf_clock_is_running+0x90>
            break;
    962e:	bf00      	nop
    return false;
    9630:	2300      	movs	r3, #0
}
    9632:	4618      	mov	r0, r3
    9634:	3710      	adds	r7, #16
    9636:	46bd      	mov	sp, r7
    9638:	bd80      	pop	{r7, pc}
    963a:	bf00      	nop
    963c:	00018e08 	.word	0x00018e08
    9640:	00018e3c 	.word	0x00018e3c
    9644:	00018e40 	.word	0x00018e40

00009648 <log_const_source_id>:
{
    9648:	b480      	push	{r7}
    964a:	b083      	sub	sp, #12
    964c:	af00      	add	r7, sp, #0
    964e:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    9650:	687b      	ldr	r3, [r7, #4]
    9652:	4a04      	ldr	r2, [pc, #16]	; (9664 <log_const_source_id+0x1c>)
    9654:	1a9b      	subs	r3, r3, r2
    9656:	08db      	lsrs	r3, r3, #3
}
    9658:	4618      	mov	r0, r3
    965a:	370c      	adds	r7, #12
    965c:	46bd      	mov	sp, r7
    965e:	bc80      	pop	{r7}
    9660:	4770      	bx	lr
    9662:	bf00      	nop
    9664:	000170bc 	.word	0x000170bc

00009668 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    9668:	b590      	push	{r4, r7, lr}
    966a:	b087      	sub	sp, #28
    966c:	af00      	add	r7, sp, #0
    966e:	6078      	str	r0, [r7, #4]
    NRFX_ASSERT(event_handler);
    9670:	687b      	ldr	r3, [r7, #4]
    9672:	2b00      	cmp	r3, #0
    9674:	d109      	bne.n	968a <nrfx_clock_init+0x22>
    9676:	23b5      	movs	r3, #181	; 0xb5
    9678:	4a2e      	ldr	r2, [pc, #184]	; (9734 <nrfx_clock_init+0xcc>)
    967a:	492f      	ldr	r1, [pc, #188]	; (9738 <nrfx_clock_init+0xd0>)
    967c:	482f      	ldr	r0, [pc, #188]	; (973c <nrfx_clock_init+0xd4>)
    967e:	f006 faf9 	bl	fc74 <printk>
    9682:	21b5      	movs	r1, #181	; 0xb5
    9684:	482b      	ldr	r0, [pc, #172]	; (9734 <nrfx_clock_init+0xcc>)
    9686:	f006 ff51 	bl	1052c <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    968a:	4b2d      	ldr	r3, [pc, #180]	; (9740 <nrfx_clock_init+0xd8>)
    968c:	617b      	str	r3, [r7, #20]
    if (m_clock_cb.module_initialized)
    968e:	4b2d      	ldr	r3, [pc, #180]	; (9744 <nrfx_clock_init+0xdc>)
    9690:	791b      	ldrb	r3, [r3, #4]
    9692:	2b00      	cmp	r3, #0
    9694:	d002      	beq.n	969c <nrfx_clock_init+0x34>
    {
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    9696:	4b2c      	ldr	r3, [pc, #176]	; (9748 <nrfx_clock_init+0xe0>)
    9698:	617b      	str	r3, [r7, #20]
    969a:	e005      	b.n	96a8 <nrfx_clock_init+0x40>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    969c:	4a29      	ldr	r2, [pc, #164]	; (9744 <nrfx_clock_init+0xdc>)
    969e:	687b      	ldr	r3, [r7, #4]
    96a0:	6013      	str	r3, [r2, #0]
        m_clock_cb.module_initialized = true;
    96a2:	4b28      	ldr	r3, [pc, #160]	; (9744 <nrfx_clock_init+0xdc>)
    96a4:	2201      	movs	r2, #1
    96a6:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    96a8:	2300      	movs	r3, #0
    96aa:	2b02      	cmp	r3, #2
    96ac:	d93c      	bls.n	9728 <nrfx_clock_init+0xc0>
    96ae:	f00b fece 	bl	1544e <k_is_user_context>
    96b2:	4603      	mov	r3, r0
    96b4:	74fb      	strb	r3, [r7, #19]
    96b6:	2300      	movs	r3, #0
    96b8:	60fb      	str	r3, [r7, #12]
    96ba:	2300      	movs	r3, #0
    96bc:	2b00      	cmp	r3, #0
    96be:	d007      	beq.n	96d0 <nrfx_clock_init+0x68>
    96c0:	4b22      	ldr	r3, [pc, #136]	; (974c <nrfx_clock_init+0xe4>)
    96c2:	681b      	ldr	r3, [r3, #0]
    96c4:	4618      	mov	r0, r3
    96c6:	f7ff ffbf 	bl	9648 <log_const_source_id>
    96ca:	4603      	mov	r3, r0
    96cc:	b29b      	uxth	r3, r3
    96ce:	e000      	b.n	96d2 <nrfx_clock_init+0x6a>
    96d0:	2300      	movs	r3, #0
    96d2:	823b      	strh	r3, [r7, #16]
    96d4:	7a3b      	ldrb	r3, [r7, #8]
    96d6:	2203      	movs	r2, #3
    96d8:	f362 0302 	bfi	r3, r2, #0, #3
    96dc:	723b      	strb	r3, [r7, #8]
    96de:	7a3b      	ldrb	r3, [r7, #8]
    96e0:	f36f 03c5 	bfc	r3, #3, #3
    96e4:	723b      	strb	r3, [r7, #8]
    96e6:	8a3b      	ldrh	r3, [r7, #16]
    96e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    96ec:	b29a      	uxth	r2, r3
    96ee:	893b      	ldrh	r3, [r7, #8]
    96f0:	f362 138f 	bfi	r3, r2, #6, #10
    96f4:	813b      	strh	r3, [r7, #8]
    96f6:	7cfb      	ldrb	r3, [r7, #19]
    96f8:	2b00      	cmp	r3, #0
    96fa:	d009      	beq.n	9710 <nrfx_clock_init+0xa8>
    96fc:	6978      	ldr	r0, [r7, #20]
    96fe:	f7ff feb7 	bl	9470 <nrfx_error_string_get>
    9702:	4603      	mov	r3, r0
    9704:	4a12      	ldr	r2, [pc, #72]	; (9750 <nrfx_clock_init+0xe8>)
    9706:	4913      	ldr	r1, [pc, #76]	; (9754 <nrfx_clock_init+0xec>)
    9708:	8938      	ldrh	r0, [r7, #8]
    970a:	f7f9 fab7 	bl	2c7c <log_from_user>
    970e:	e00c      	b.n	972a <nrfx_clock_init+0xc2>
    9710:	4c0f      	ldr	r4, [pc, #60]	; (9750 <nrfx_clock_init+0xe8>)
    9712:	6978      	ldr	r0, [r7, #20]
    9714:	f7ff feac 	bl	9470 <nrfx_error_string_get>
    9718:	4603      	mov	r3, r0
    971a:	461a      	mov	r2, r3
    971c:	893b      	ldrh	r3, [r7, #8]
    971e:	4621      	mov	r1, r4
    9720:	480c      	ldr	r0, [pc, #48]	; (9754 <nrfx_clock_init+0xec>)
    9722:	f007 fbd0 	bl	10ec6 <log_2>
    9726:	e000      	b.n	972a <nrfx_clock_init+0xc2>
    9728:	bf00      	nop
    return err_code;
    972a:	697b      	ldr	r3, [r7, #20]
}
    972c:	4618      	mov	r0, r3
    972e:	371c      	adds	r7, #28
    9730:	46bd      	mov	sp, r7
    9732:	bd90      	pop	{r4, r7, pc}
    9734:	00018e60 	.word	0x00018e60
    9738:	00018ea0 	.word	0x00018ea0
    973c:	00018e40 	.word	0x00018e40
    9740:	0bad0000 	.word	0x0bad0000
    9744:	20000b8c 	.word	0x20000b8c
    9748:	0bad000c 	.word	0x0bad000c
    974c:	20000b88 	.word	0x20000b88
    9750:	0001acbc 	.word	0x0001acbc
    9754:	00018eb0 	.word	0x00018eb0

00009758 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    9758:	b580      	push	{r7, lr}
    975a:	b084      	sub	sp, #16
    975c:	af00      	add	r7, sp, #0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    975e:	4b26      	ldr	r3, [pc, #152]	; (97f8 <nrfx_clock_enable+0xa0>)
    9760:	791b      	ldrb	r3, [r3, #4]
    9762:	f083 0301 	eor.w	r3, r3, #1
    9766:	b2db      	uxtb	r3, r3
    9768:	2b00      	cmp	r3, #0
    976a:	d009      	beq.n	9780 <nrfx_clock_enable+0x28>
    976c:	23ce      	movs	r3, #206	; 0xce
    976e:	4a23      	ldr	r2, [pc, #140]	; (97fc <nrfx_clock_enable+0xa4>)
    9770:	4923      	ldr	r1, [pc, #140]	; (9800 <nrfx_clock_enable+0xa8>)
    9772:	4824      	ldr	r0, [pc, #144]	; (9804 <nrfx_clock_enable+0xac>)
    9774:	f006 fa7e 	bl	fc74 <printk>
    9778:	21ce      	movs	r1, #206	; 0xce
    977a:	4820      	ldr	r0, [pc, #128]	; (97fc <nrfx_clock_enable+0xa4>)
    977c:	f006 fed6 	bl	1052c <assert_post_action>
    nrfx_power_clock_irq_init();
    9780:	f00b fe37 	bl	153f2 <nrfx_power_clock_irq_init>
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
    9784:	2300      	movs	r3, #0
    9786:	2b02      	cmp	r3, #2
    9788:	d801      	bhi.n	978e <nrfx_clock_enable+0x36>
    978a:	bf00      	nop
}
    978c:	e02f      	b.n	97ee <nrfx_clock_enable+0x96>
    NRFX_LOG_INFO("Module enabled.");
    978e:	f00b fe5e 	bl	1544e <k_is_user_context>
    9792:	4603      	mov	r3, r0
    9794:	73fb      	strb	r3, [r7, #15]
    9796:	2300      	movs	r3, #0
    9798:	60bb      	str	r3, [r7, #8]
    979a:	2300      	movs	r3, #0
    979c:	2b00      	cmp	r3, #0
    979e:	d007      	beq.n	97b0 <nrfx_clock_enable+0x58>
    97a0:	4b19      	ldr	r3, [pc, #100]	; (9808 <nrfx_clock_enable+0xb0>)
    97a2:	681b      	ldr	r3, [r3, #0]
    97a4:	4618      	mov	r0, r3
    97a6:	f7ff ff4f 	bl	9648 <log_const_source_id>
    97aa:	4603      	mov	r3, r0
    97ac:	b29b      	uxth	r3, r3
    97ae:	e000      	b.n	97b2 <nrfx_clock_enable+0x5a>
    97b0:	2300      	movs	r3, #0
    97b2:	81bb      	strh	r3, [r7, #12]
    97b4:	793b      	ldrb	r3, [r7, #4]
    97b6:	2203      	movs	r2, #3
    97b8:	f362 0302 	bfi	r3, r2, #0, #3
    97bc:	713b      	strb	r3, [r7, #4]
    97be:	793b      	ldrb	r3, [r7, #4]
    97c0:	f36f 03c5 	bfc	r3, #3, #3
    97c4:	713b      	strb	r3, [r7, #4]
    97c6:	89bb      	ldrh	r3, [r7, #12]
    97c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    97cc:	b29a      	uxth	r2, r3
    97ce:	88bb      	ldrh	r3, [r7, #4]
    97d0:	f362 138f 	bfi	r3, r2, #6, #10
    97d4:	80bb      	strh	r3, [r7, #4]
    97d6:	7bfb      	ldrb	r3, [r7, #15]
    97d8:	2b00      	cmp	r3, #0
    97da:	d004      	beq.n	97e6 <nrfx_clock_enable+0x8e>
    97dc:	490b      	ldr	r1, [pc, #44]	; (980c <nrfx_clock_enable+0xb4>)
    97de:	88b8      	ldrh	r0, [r7, #4]
    97e0:	f7f9 fa4c 	bl	2c7c <log_from_user>
}
    97e4:	e003      	b.n	97ee <nrfx_clock_enable+0x96>
    NRFX_LOG_INFO("Module enabled.");
    97e6:	88b9      	ldrh	r1, [r7, #4]
    97e8:	4808      	ldr	r0, [pc, #32]	; (980c <nrfx_clock_enable+0xb4>)
    97ea:	f007 fb40 	bl	10e6e <log_0>
}
    97ee:	bf00      	nop
    97f0:	3710      	adds	r7, #16
    97f2:	46bd      	mov	sp, r7
    97f4:	bd80      	pop	{r7, pc}
    97f6:	bf00      	nop
    97f8:	20000b8c 	.word	0x20000b8c
    97fc:	00018e60 	.word	0x00018e60
    9800:	00018ed0 	.word	0x00018ed0
    9804:	00018e40 	.word	0x00018e40
    9808:	20000b88 	.word	0x20000b88
    980c:	00018ef0 	.word	0x00018ef0

00009810 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    9810:	b580      	push	{r7, lr}
    9812:	b084      	sub	sp, #16
    9814:	af00      	add	r7, sp, #0
    9816:	4603      	mov	r3, r0
    9818:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(m_clock_cb.module_initialized);
    981a:	4b32      	ldr	r3, [pc, #200]	; (98e4 <nrfx_clock_start+0xd4>)
    981c:	791b      	ldrb	r3, [r3, #4]
    981e:	f083 0301 	eor.w	r3, r3, #1
    9822:	b2db      	uxtb	r3, r3
    9824:	2b00      	cmp	r3, #0
    9826:	d00b      	beq.n	9840 <nrfx_clock_start+0x30>
    9828:	f44f 7385 	mov.w	r3, #266	; 0x10a
    982c:	4a2e      	ldr	r2, [pc, #184]	; (98e8 <nrfx_clock_start+0xd8>)
    982e:	492f      	ldr	r1, [pc, #188]	; (98ec <nrfx_clock_start+0xdc>)
    9830:	482f      	ldr	r0, [pc, #188]	; (98f0 <nrfx_clock_start+0xe0>)
    9832:	f006 fa1f 	bl	fc74 <printk>
    9836:	f44f 7185 	mov.w	r1, #266	; 0x10a
    983a:	482b      	ldr	r0, [pc, #172]	; (98e8 <nrfx_clock_start+0xd8>)
    983c:	f006 fe76 	bl	1052c <assert_post_action>
    switch (domain)
    9840:	79fb      	ldrb	r3, [r7, #7]
    9842:	2b00      	cmp	r3, #0
    9844:	d002      	beq.n	984c <nrfx_clock_start+0x3c>
    9846:	2b01      	cmp	r3, #1
    9848:	d02a      	beq.n	98a0 <nrfx_clock_start+0x90>
    984a:	e03a      	b.n	98c2 <nrfx_clock_start+0xb2>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    984c:	f107 030f 	add.w	r3, r7, #15
    9850:	461a      	mov	r2, r3
    9852:	2100      	movs	r1, #0
    9854:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    9858:	f7ff fea2 	bl	95a0 <nrf_clock_is_running>
    985c:	4603      	mov	r3, r0
    985e:	2b00      	cmp	r3, #0
    9860:	d008      	beq.n	9874 <nrfx_clock_start+0x64>
                    lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC)
    9862:	7bfb      	ldrb	r3, [r7, #15]
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    9864:	2b02      	cmp	r3, #2
    9866:	d105      	bne.n	9874 <nrfx_clock_start+0x64>
                {
                    // If the two-stage LFXO procedure has finished already
                    // use the configured LF clock source.
                    nrf_clock_lf_src_set(NRF_CLOCK, (nrf_clock_lfclk_t)NRFX_CLOCK_CONFIG_LF_SRC);
    9868:	2102      	movs	r1, #2
    986a:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    986e:	f00b fdb1 	bl	153d4 <nrf_clock_lf_src_set>
    9872:	e004      	b.n	987e <nrfx_clock_start+0x6e>
                else
                {
                    // If the two-stage LFXO procedure hasn't started yet
                    // or the RC stage is in progress,
                    // use the RC oscillator as LF clock source.
                    nrf_clock_lf_src_set(NRF_CLOCK, NRF_CLOCK_LFCLK_RC);
    9874:	2101      	movs	r1, #1
    9876:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    987a:	f00b fdab 	bl	153d4 <nrf_clock_lf_src_set>
                }
            }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
    987e:	f44f 7182 	mov.w	r1, #260	; 0x104
    9882:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    9886:	f00b fd7c 	bl	15382 <nrf_clock_event_clear>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
    988a:	2102      	movs	r1, #2
    988c:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    9890:	f00b fd4b 	bl	1532a <nrf_clock_int_enable>
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)
            nrfx_clock_anomaly_132();
#endif
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_LFCLKSTART);
    9894:	2108      	movs	r1, #8
    9896:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    989a:	f00b fd62 	bl	15362 <nrf_clock_task_trigger>
            break;
    989e:	e01d      	b.n	98dc <nrfx_clock_start+0xcc>
        case NRF_CLOCK_DOMAIN_HFCLK:
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
    98a0:	f44f 7180 	mov.w	r1, #256	; 0x100
    98a4:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    98a8:	f00b fd6b 	bl	15382 <nrf_clock_event_clear>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);
    98ac:	2101      	movs	r1, #1
    98ae:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    98b2:	f00b fd3a 	bl	1532a <nrf_clock_int_enable>
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKSTART);
    98b6:	2100      	movs	r1, #0
    98b8:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    98bc:	f00b fd51 	bl	15362 <nrf_clock_task_trigger>
            break;
    98c0:	e00c      	b.n	98dc <nrfx_clock_start+0xcc>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    98c2:	f44f 739e 	mov.w	r3, #316	; 0x13c
    98c6:	4a08      	ldr	r2, [pc, #32]	; (98e8 <nrfx_clock_start+0xd8>)
    98c8:	490a      	ldr	r1, [pc, #40]	; (98f4 <nrfx_clock_start+0xe4>)
    98ca:	4809      	ldr	r0, [pc, #36]	; (98f0 <nrfx_clock_start+0xe0>)
    98cc:	f006 f9d2 	bl	fc74 <printk>
    98d0:	f44f 719e 	mov.w	r1, #316	; 0x13c
    98d4:	4804      	ldr	r0, [pc, #16]	; (98e8 <nrfx_clock_start+0xd8>)
    98d6:	f006 fe29 	bl	1052c <assert_post_action>
            break;
    98da:	bf00      	nop
    }
}
    98dc:	bf00      	nop
    98de:	3710      	adds	r7, #16
    98e0:	46bd      	mov	sp, r7
    98e2:	bd80      	pop	{r7, pc}
    98e4:	20000b8c 	.word	0x20000b8c
    98e8:	00018e60 	.word	0x00018e60
    98ec:	00018ed0 	.word	0x00018ed0
    98f0:	00018e40 	.word	0x00018e40
    98f4:	00018e3c 	.word	0x00018e3c

000098f8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    98f8:	b580      	push	{r7, lr}
    98fa:	b088      	sub	sp, #32
    98fc:	af00      	add	r7, sp, #0
    98fe:	4603      	mov	r3, r0
    9900:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(m_clock_cb.module_initialized);
    9902:	4b66      	ldr	r3, [pc, #408]	; (9a9c <nrfx_clock_stop+0x1a4>)
    9904:	791b      	ldrb	r3, [r3, #4]
    9906:	f083 0301 	eor.w	r3, r3, #1
    990a:	b2db      	uxtb	r3, r3
    990c:	2b00      	cmp	r3, #0
    990e:	d00b      	beq.n	9928 <nrfx_clock_stop+0x30>
    9910:	f240 1343 	movw	r3, #323	; 0x143
    9914:	4a62      	ldr	r2, [pc, #392]	; (9aa0 <nrfx_clock_stop+0x1a8>)
    9916:	4963      	ldr	r1, [pc, #396]	; (9aa4 <nrfx_clock_stop+0x1ac>)
    9918:	4863      	ldr	r0, [pc, #396]	; (9aa8 <nrfx_clock_stop+0x1b0>)
    991a:	f006 f9ab 	bl	fc74 <printk>
    991e:	f240 1143 	movw	r1, #323	; 0x143
    9922:	485f      	ldr	r0, [pc, #380]	; (9aa0 <nrfx_clock_stop+0x1a8>)
    9924:	f006 fe02 	bl	1052c <assert_post_action>
    switch (domain)
    9928:	79fb      	ldrb	r3, [r7, #7]
    992a:	2b00      	cmp	r3, #0
    992c:	d002      	beq.n	9934 <nrfx_clock_stop+0x3c>
    992e:	2b01      	cmp	r3, #1
    9930:	d011      	beq.n	9956 <nrfx_clock_stop+0x5e>
    9932:	e021      	b.n	9978 <nrfx_clock_stop+0x80>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
    9934:	2102      	movs	r1, #2
    9936:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    993a:	f00b fd04 	bl	15346 <nrf_clock_int_disable>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
    993e:	f44f 7182 	mov.w	r1, #260	; 0x104
    9942:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    9946:	f00b fd1c 	bl	15382 <nrf_clock_event_clear>
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_LFCLKSTOP);
    994a:	210c      	movs	r1, #12
    994c:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    9950:	f00b fd07 	bl	15362 <nrf_clock_task_trigger>
            break;
    9954:	e01d      	b.n	9992 <nrfx_clock_stop+0x9a>
        case NRF_CLOCK_DOMAIN_HFCLK:
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);
    9956:	2101      	movs	r1, #1
    9958:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    995c:	f00b fcf3 	bl	15346 <nrf_clock_int_disable>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
    9960:	f44f 7180 	mov.w	r1, #256	; 0x100
    9964:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    9968:	f00b fd0b 	bl	15382 <nrf_clock_event_clear>
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKSTOP);
    996c:	2104      	movs	r1, #4
    996e:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    9972:	f00b fcf6 	bl	15362 <nrf_clock_task_trigger>
            break;
    9976:	e00c      	b.n	9992 <nrfx_clock_stop+0x9a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    9978:	f240 135f 	movw	r3, #351	; 0x15f
    997c:	4a48      	ldr	r2, [pc, #288]	; (9aa0 <nrfx_clock_stop+0x1a8>)
    997e:	494b      	ldr	r1, [pc, #300]	; (9aac <nrfx_clock_stop+0x1b4>)
    9980:	4849      	ldr	r0, [pc, #292]	; (9aa8 <nrfx_clock_stop+0x1b0>)
    9982:	f006 f977 	bl	fc74 <printk>
    9986:	f240 115f 	movw	r1, #351	; 0x15f
    998a:	4845      	ldr	r0, [pc, #276]	; (9aa0 <nrfx_clock_stop+0x1a8>)
    998c:	f006 fdce 	bl	1052c <assert_post_action>
            return;
    9990:	e081      	b.n	9a96 <nrfx_clock_stop+0x19e>
    }

    bool stopped;
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    9992:	79fb      	ldrb	r3, [r7, #7]
    9994:	2b01      	cmp	r3, #1
    9996:	d123      	bne.n	99e0 <nrfx_clock_stop+0xe8>
    {
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    9998:	2301      	movs	r3, #1
    999a:	74fb      	strb	r3, [r7, #19]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    999c:	2300      	movs	r3, #0
    999e:	75fb      	strb	r3, [r7, #23]
    99a0:	f242 7310 	movw	r3, #10000	; 0x2710
    99a4:	61bb      	str	r3, [r7, #24]
    99a6:	f107 0213 	add.w	r2, r7, #19
    99aa:	79fb      	ldrb	r3, [r7, #7]
    99ac:	4611      	mov	r1, r2
    99ae:	4618      	mov	r0, r3
    99b0:	f00b fd3b 	bl	1542a <nrfx_clock_is_running>
    99b4:	4603      	mov	r3, r0
    99b6:	f083 0301 	eor.w	r3, r3, #1
    99ba:	b2db      	uxtb	r3, r3
    99bc:	2b00      	cmp	r3, #0
    99be:	d102      	bne.n	99c6 <nrfx_clock_stop+0xce>
    99c0:	7cfb      	ldrb	r3, [r7, #19]
    99c2:	2b01      	cmp	r3, #1
    99c4:	d002      	beq.n	99cc <nrfx_clock_stop+0xd4>
    99c6:	2301      	movs	r3, #1
    99c8:	75fb      	strb	r3, [r7, #23]
    99ca:	e025      	b.n	9a18 <nrfx_clock_stop+0x120>
    99cc:	2001      	movs	r0, #1
    99ce:	f00b fc8a 	bl	152e6 <nrfx_busy_wait>
    99d2:	69bb      	ldr	r3, [r7, #24]
    99d4:	3b01      	subs	r3, #1
    99d6:	61bb      	str	r3, [r7, #24]
    99d8:	69bb      	ldr	r3, [r7, #24]
    99da:	2b00      	cmp	r3, #0
    99dc:	d1e3      	bne.n	99a6 <nrfx_clock_stop+0xae>
    99de:	e01b      	b.n	9a18 <nrfx_clock_stop+0x120>
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    99e0:	2300      	movs	r3, #0
    99e2:	75fb      	strb	r3, [r7, #23]
    99e4:	f242 7310 	movw	r3, #10000	; 0x2710
    99e8:	61fb      	str	r3, [r7, #28]
    99ea:	79fb      	ldrb	r3, [r7, #7]
    99ec:	2100      	movs	r1, #0
    99ee:	4618      	mov	r0, r3
    99f0:	f00b fd1b 	bl	1542a <nrfx_clock_is_running>
    99f4:	4603      	mov	r3, r0
    99f6:	f083 0301 	eor.w	r3, r3, #1
    99fa:	b2db      	uxtb	r3, r3
    99fc:	2b00      	cmp	r3, #0
    99fe:	d002      	beq.n	9a06 <nrfx_clock_stop+0x10e>
    9a00:	2301      	movs	r3, #1
    9a02:	75fb      	strb	r3, [r7, #23]
    9a04:	e008      	b.n	9a18 <nrfx_clock_stop+0x120>
    9a06:	2001      	movs	r0, #1
    9a08:	f00b fc6d 	bl	152e6 <nrfx_busy_wait>
    9a0c:	69fb      	ldr	r3, [r7, #28]
    9a0e:	3b01      	subs	r3, #1
    9a10:	61fb      	str	r3, [r7, #28]
    9a12:	69fb      	ldr	r3, [r7, #28]
    9a14:	2b00      	cmp	r3, #0
    9a16:	d1e8      	bne.n	99ea <nrfx_clock_stop+0xf2>
    }

    if (!stopped)
    9a18:	7dfb      	ldrb	r3, [r7, #23]
    9a1a:	f083 0301 	eor.w	r3, r3, #1
    9a1e:	b2db      	uxtb	r3, r3
    9a20:	2b00      	cmp	r3, #0
    9a22:	d038      	beq.n	9a96 <nrfx_clock_stop+0x19e>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    9a24:	2300      	movs	r3, #0
    9a26:	2b00      	cmp	r3, #0
    9a28:	d034      	beq.n	9a94 <nrfx_clock_stop+0x19c>
    9a2a:	f00b fd10 	bl	1544e <k_is_user_context>
    9a2e:	4603      	mov	r3, r0
    9a30:	75bb      	strb	r3, [r7, #22]
    9a32:	2300      	movs	r3, #0
    9a34:	60fb      	str	r3, [r7, #12]
    9a36:	2300      	movs	r3, #0
    9a38:	2b00      	cmp	r3, #0
    9a3a:	d007      	beq.n	9a4c <nrfx_clock_stop+0x154>
    9a3c:	4b1c      	ldr	r3, [pc, #112]	; (9ab0 <nrfx_clock_stop+0x1b8>)
    9a3e:	681b      	ldr	r3, [r3, #0]
    9a40:	4618      	mov	r0, r3
    9a42:	f7ff fe01 	bl	9648 <log_const_source_id>
    9a46:	4603      	mov	r3, r0
    9a48:	b29b      	uxth	r3, r3
    9a4a:	e000      	b.n	9a4e <nrfx_clock_stop+0x156>
    9a4c:	2300      	movs	r3, #0
    9a4e:	82bb      	strh	r3, [r7, #20]
    9a50:	7a3b      	ldrb	r3, [r7, #8]
    9a52:	2201      	movs	r2, #1
    9a54:	f362 0302 	bfi	r3, r2, #0, #3
    9a58:	723b      	strb	r3, [r7, #8]
    9a5a:	7a3b      	ldrb	r3, [r7, #8]
    9a5c:	f36f 03c5 	bfc	r3, #3, #3
    9a60:	723b      	strb	r3, [r7, #8]
    9a62:	8abb      	ldrh	r3, [r7, #20]
    9a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
    9a68:	b29a      	uxth	r2, r3
    9a6a:	893b      	ldrh	r3, [r7, #8]
    9a6c:	f362 138f 	bfi	r3, r2, #6, #10
    9a70:	813b      	strh	r3, [r7, #8]
    9a72:	7dbb      	ldrb	r3, [r7, #22]
    9a74:	2b00      	cmp	r3, #0
    9a76:	d006      	beq.n	9a86 <nrfx_clock_stop+0x18e>
    9a78:	79fb      	ldrb	r3, [r7, #7]
    9a7a:	461a      	mov	r2, r3
    9a7c:	490d      	ldr	r1, [pc, #52]	; (9ab4 <nrfx_clock_stop+0x1bc>)
    9a7e:	8938      	ldrh	r0, [r7, #8]
    9a80:	f7f9 f8fc 	bl	2c7c <log_from_user>
    9a84:	e007      	b.n	9a96 <nrfx_clock_stop+0x19e>
    9a86:	79fb      	ldrb	r3, [r7, #7]
    9a88:	893a      	ldrh	r2, [r7, #8]
    9a8a:	4619      	mov	r1, r3
    9a8c:	4809      	ldr	r0, [pc, #36]	; (9ab4 <nrfx_clock_stop+0x1bc>)
    9a8e:	f007 fa03 	bl	10e98 <log_1>
    9a92:	e000      	b.n	9a96 <nrfx_clock_stop+0x19e>
    9a94:	bf00      	nop
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    9a96:	3720      	adds	r7, #32
    9a98:	46bd      	mov	sp, r7
    9a9a:	bd80      	pop	{r7, pc}
    9a9c:	20000b8c 	.word	0x20000b8c
    9aa0:	00018e60 	.word	0x00018e60
    9aa4:	00018ed0 	.word	0x00018ed0
    9aa8:	00018e40 	.word	0x00018e40
    9aac:	00018e3c 	.word	0x00018e3c
    9ab0:	20000b88 	.word	0x20000b88
    9ab4:	00018f24 	.word	0x00018f24

00009ab8 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    9ab8:	b580      	push	{r7, lr}
    9aba:	b088      	sub	sp, #32
    9abc:	af00      	add	r7, sp, #0
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    9abe:	f44f 7180 	mov.w	r1, #256	; 0x100
    9ac2:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    9ac6:	f00b fc71 	bl	153ac <nrf_clock_event_check>
    9aca:	4603      	mov	r3, r0
    9acc:	2b00      	cmp	r3, #0
    9ace:	d046      	beq.n	9b5e <nrfx_power_clock_irq_handler+0xa6>
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
    9ad0:	f44f 7180 	mov.w	r1, #256	; 0x100
    9ad4:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    9ad8:	f00b fc53 	bl	15382 <nrf_clock_event_clear>
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
    9adc:	2300      	movs	r3, #0
    9ade:	2b03      	cmp	r3, #3
    9ae0:	d933      	bls.n	9b4a <nrfx_power_clock_irq_handler+0x92>
    9ae2:	f00b fcb4 	bl	1544e <k_is_user_context>
    9ae6:	4603      	mov	r3, r0
    9ae8:	77fb      	strb	r3, [r7, #31]
    9aea:	2300      	movs	r3, #0
    9aec:	617b      	str	r3, [r7, #20]
    9aee:	2300      	movs	r3, #0
    9af0:	2b00      	cmp	r3, #0
    9af2:	d007      	beq.n	9b04 <nrfx_power_clock_irq_handler+0x4c>
    9af4:	4b4f      	ldr	r3, [pc, #316]	; (9c34 <nrfx_power_clock_irq_handler+0x17c>)
    9af6:	681b      	ldr	r3, [r3, #0]
    9af8:	4618      	mov	r0, r3
    9afa:	f7ff fda5 	bl	9648 <log_const_source_id>
    9afe:	4603      	mov	r3, r0
    9b00:	b29b      	uxth	r3, r3
    9b02:	e000      	b.n	9b06 <nrfx_power_clock_irq_handler+0x4e>
    9b04:	2300      	movs	r3, #0
    9b06:	83bb      	strh	r3, [r7, #28]
    9b08:	7c3b      	ldrb	r3, [r7, #16]
    9b0a:	2204      	movs	r2, #4
    9b0c:	f362 0302 	bfi	r3, r2, #0, #3
    9b10:	743b      	strb	r3, [r7, #16]
    9b12:	7c3b      	ldrb	r3, [r7, #16]
    9b14:	f36f 03c5 	bfc	r3, #3, #3
    9b18:	743b      	strb	r3, [r7, #16]
    9b1a:	8bbb      	ldrh	r3, [r7, #28]
    9b1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    9b20:	b29a      	uxth	r2, r3
    9b22:	8a3b      	ldrh	r3, [r7, #16]
    9b24:	f362 138f 	bfi	r3, r2, #6, #10
    9b28:	823b      	strh	r3, [r7, #16]
    9b2a:	7ffb      	ldrb	r3, [r7, #31]
    9b2c:	2b00      	cmp	r3, #0
    9b2e:	d005      	beq.n	9b3c <nrfx_power_clock_irq_handler+0x84>
    9b30:	4a41      	ldr	r2, [pc, #260]	; (9c38 <nrfx_power_clock_irq_handler+0x180>)
    9b32:	4942      	ldr	r1, [pc, #264]	; (9c3c <nrfx_power_clock_irq_handler+0x184>)
    9b34:	8a38      	ldrh	r0, [r7, #16]
    9b36:	f7f9 f8a1 	bl	2c7c <log_from_user>
    9b3a:	e007      	b.n	9b4c <nrfx_power_clock_irq_handler+0x94>
    9b3c:	4b3e      	ldr	r3, [pc, #248]	; (9c38 <nrfx_power_clock_irq_handler+0x180>)
    9b3e:	8a3a      	ldrh	r2, [r7, #16]
    9b40:	4619      	mov	r1, r3
    9b42:	483e      	ldr	r0, [pc, #248]	; (9c3c <nrfx_power_clock_irq_handler+0x184>)
    9b44:	f007 f9a8 	bl	10e98 <log_1>
    9b48:	e000      	b.n	9b4c <nrfx_power_clock_irq_handler+0x94>
    9b4a:	bf00      	nop
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);
    9b4c:	2101      	movs	r1, #1
    9b4e:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    9b52:	f00b fbf8 	bl	15346 <nrf_clock_int_disable>
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    9b56:	4b3a      	ldr	r3, [pc, #232]	; (9c40 <nrfx_power_clock_irq_handler+0x188>)
    9b58:	681b      	ldr	r3, [r3, #0]
    9b5a:	2000      	movs	r0, #0
    9b5c:	4798      	blx	r3
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    9b5e:	f44f 7182 	mov.w	r1, #260	; 0x104
    9b62:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    9b66:	f00b fc21 	bl	153ac <nrf_clock_event_check>
    9b6a:	4603      	mov	r3, r0
    9b6c:	2b00      	cmp	r3, #0
    9b6e:	d05c      	beq.n	9c2a <nrfx_power_clock_irq_handler+0x172>
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
    9b70:	f44f 7182 	mov.w	r1, #260	; 0x104
    9b74:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    9b78:	f00b fc03 	bl	15382 <nrf_clock_event_clear>
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");
    9b7c:	2300      	movs	r3, #0
    9b7e:	2b03      	cmp	r3, #3
    9b80:	d933      	bls.n	9bea <nrfx_power_clock_irq_handler+0x132>
    9b82:	f00b fc64 	bl	1544e <k_is_user_context>
    9b86:	4603      	mov	r3, r0
    9b88:	76fb      	strb	r3, [r7, #27]
    9b8a:	2300      	movs	r3, #0
    9b8c:	60bb      	str	r3, [r7, #8]
    9b8e:	2300      	movs	r3, #0
    9b90:	2b00      	cmp	r3, #0
    9b92:	d007      	beq.n	9ba4 <nrfx_power_clock_irq_handler+0xec>
    9b94:	4b27      	ldr	r3, [pc, #156]	; (9c34 <nrfx_power_clock_irq_handler+0x17c>)
    9b96:	681b      	ldr	r3, [r3, #0]
    9b98:	4618      	mov	r0, r3
    9b9a:	f7ff fd55 	bl	9648 <log_const_source_id>
    9b9e:	4603      	mov	r3, r0
    9ba0:	b29b      	uxth	r3, r3
    9ba2:	e000      	b.n	9ba6 <nrfx_power_clock_irq_handler+0xee>
    9ba4:	2300      	movs	r3, #0
    9ba6:	833b      	strh	r3, [r7, #24]
    9ba8:	793b      	ldrb	r3, [r7, #4]
    9baa:	2204      	movs	r2, #4
    9bac:	f362 0302 	bfi	r3, r2, #0, #3
    9bb0:	713b      	strb	r3, [r7, #4]
    9bb2:	793b      	ldrb	r3, [r7, #4]
    9bb4:	f36f 03c5 	bfc	r3, #3, #3
    9bb8:	713b      	strb	r3, [r7, #4]
    9bba:	8b3b      	ldrh	r3, [r7, #24]
    9bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    9bc0:	b29a      	uxth	r2, r3
    9bc2:	88bb      	ldrh	r3, [r7, #4]
    9bc4:	f362 138f 	bfi	r3, r2, #6, #10
    9bc8:	80bb      	strh	r3, [r7, #4]
    9bca:	7efb      	ldrb	r3, [r7, #27]
    9bcc:	2b00      	cmp	r3, #0
    9bce:	d005      	beq.n	9bdc <nrfx_power_clock_irq_handler+0x124>
    9bd0:	4a19      	ldr	r2, [pc, #100]	; (9c38 <nrfx_power_clock_irq_handler+0x180>)
    9bd2:	491c      	ldr	r1, [pc, #112]	; (9c44 <nrfx_power_clock_irq_handler+0x18c>)
    9bd4:	88b8      	ldrh	r0, [r7, #4]
    9bd6:	f7f9 f851 	bl	2c7c <log_from_user>
    9bda:	e007      	b.n	9bec <nrfx_power_clock_irq_handler+0x134>
    9bdc:	4b16      	ldr	r3, [pc, #88]	; (9c38 <nrfx_power_clock_irq_handler+0x180>)
    9bde:	88ba      	ldrh	r2, [r7, #4]
    9be0:	4619      	mov	r1, r3
    9be2:	4818      	ldr	r0, [pc, #96]	; (9c44 <nrfx_power_clock_irq_handler+0x18c>)
    9be4:	f007 f958 	bl	10e98 <log_1>
    9be8:	e000      	b.n	9bec <nrfx_power_clock_irq_handler+0x134>
    9bea:	bf00      	nop

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    9bec:	f107 030f 	add.w	r3, r7, #15
    9bf0:	461a      	mov	r2, r3
    9bf2:	2100      	movs	r1, #0
    9bf4:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    9bf8:	f7ff fcd2 	bl	95a0 <nrf_clock_is_running>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    9bfc:	7bfb      	ldrb	r3, [r7, #15]
    9bfe:	2b01      	cmp	r3, #1
    9c00:	d10a      	bne.n	9c18 <nrfx_power_clock_irq_handler+0x160>
        {
            // After the LFRC oscillator start switch to external source.
            nrf_clock_lf_src_set(NRF_CLOCK, (nrf_clock_lfclk_t)NRFX_CLOCK_CONFIG_LF_SRC);
    9c02:	2102      	movs	r1, #2
    9c04:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    9c08:	f00b fbe4 	bl	153d4 <nrf_clock_lf_src_set>
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_LFCLKSTART);
    9c0c:	2108      	movs	r1, #8
    9c0e:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    9c12:	f00b fba6 	bl	15362 <nrf_clock_task_trigger>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    9c16:	e008      	b.n	9c2a <nrfx_power_clock_irq_handler+0x172>
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
    9c18:	2102      	movs	r1, #2
    9c1a:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    9c1e:	f00b fb92 	bl	15346 <nrf_clock_int_disable>
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    9c22:	4b07      	ldr	r3, [pc, #28]	; (9c40 <nrfx_power_clock_irq_handler+0x188>)
    9c24:	681b      	ldr	r3, [r3, #0]
    9c26:	2001      	movs	r0, #1
    9c28:	4798      	blx	r3
}
    9c2a:	bf00      	nop
    9c2c:	3720      	adds	r7, #32
    9c2e:	46bd      	mov	sp, r7
    9c30:	bd80      	pop	{r7, pc}
    9c32:	bf00      	nop
    9c34:	20000b88 	.word	0x20000b88
    9c38:	0001accc 	.word	0x0001accc
    9c3c:	00018f48 	.word	0x00018f48
    9c40:	20000b8c 	.word	0x20000b8c
    9c44:	00018f70 	.word	0x00018f70

00009c48 <log_const_source_id>:
{
    9c48:	b480      	push	{r7}
    9c4a:	b083      	sub	sp, #12
    9c4c:	af00      	add	r7, sp, #0
    9c4e:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    9c50:	687b      	ldr	r3, [r7, #4]
    9c52:	4a04      	ldr	r2, [pc, #16]	; (9c64 <log_const_source_id+0x1c>)
    9c54:	1a9b      	subs	r3, r3, r2
    9c56:	08db      	lsrs	r3, r3, #3
}
    9c58:	4618      	mov	r0, r3
    9c5a:	370c      	adds	r7, #12
    9c5c:	46bd      	mov	sp, r7
    9c5e:	bc80      	pop	{r7}
    9c60:	4770      	bx	lr
    9c62:	bf00      	nop
    9c64:	000170bc 	.word	0x000170bc

00009c68 <channel_is_allocated>:
static uint32_t m_allocated_channels;

static uint8_t  m_allocated_groups;

static bool channel_is_allocated(uint8_t channel)
{
    9c68:	b480      	push	{r7}
    9c6a:	b083      	sub	sp, #12
    9c6c:	af00      	add	r7, sp, #0
    9c6e:	4603      	mov	r3, r0
    9c70:	71fb      	strb	r3, [r7, #7]
    return ((m_allocated_channels & DPPI_BIT_SET(channel)) != 0);
    9c72:	4b08      	ldr	r3, [pc, #32]	; (9c94 <channel_is_allocated+0x2c>)
    9c74:	681a      	ldr	r2, [r3, #0]
    9c76:	79fb      	ldrb	r3, [r7, #7]
    9c78:	fa22 f303 	lsr.w	r3, r2, r3
    9c7c:	f003 0301 	and.w	r3, r3, #1
    9c80:	2b00      	cmp	r3, #0
    9c82:	bf14      	ite	ne
    9c84:	2301      	movne	r3, #1
    9c86:	2300      	moveq	r3, #0
    9c88:	b2db      	uxtb	r3, r3
}
    9c8a:	4618      	mov	r0, r3
    9c8c:	370c      	adds	r7, #12
    9c8e:	46bd      	mov	sp, r7
    9c90:	bc80      	pop	{r7}
    9c92:	4770      	bx	lr
    9c94:	20000b98 	.word	0x20000b98

00009c98 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    9c98:	b590      	push	{r4, r7, lr}
    9c9a:	b091      	sub	sp, #68	; 0x44
    9c9c:	af00      	add	r7, sp, #0
    9c9e:	6078      	str	r0, [r7, #4]
	__asm__ volatile(
    9ca0:	f04f 0320 	mov.w	r3, #32
    9ca4:	f3ef 8211 	mrs	r2, BASEPRI
    9ca8:	f383 8811 	msr	BASEPRI, r3
    9cac:	f3bf 8f6f 	isb	sy
    9cb0:	627a      	str	r2, [r7, #36]	; 0x24
    9cb2:	623b      	str	r3, [r7, #32]
	return key;
    9cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    nrfx_err_t err_code;

    NRFX_CRITICAL_SECTION_ENTER();
    9cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    9cb8:	4b5e      	ldr	r3, [pc, #376]	; (9e34 <nrfx_dppi_channel_alloc+0x19c>)
    9cba:	681b      	ldr	r3, [r3, #0]
    9cbc:	43db      	mvns	r3, r3
    9cbe:	b29b      	uxth	r3, r3
    9cc0:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t channel = 0;
    9cc2:	2300      	movs	r3, #0
    9cc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (!remaining_channels)
    9cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9cca:	2b00      	cmp	r3, #0
    9ccc:	d107      	bne.n	9cde <nrfx_dppi_channel_alloc+0x46>
    {
        err_code = NRFX_ERROR_NO_MEM;
    9cce:	4b5a      	ldr	r3, [pc, #360]	; (9e38 <nrfx_dppi_channel_alloc+0x1a0>)
    9cd0:	633b      	str	r3, [r7, #48]	; 0x30
    9cd2:	e01c      	b.n	9d0e <nrfx_dppi_channel_alloc+0x76>
    else
    {
        // Find first free channel
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
        {
            channel++;
    9cd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    9cd8:	3301      	adds	r3, #1
    9cda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
    9cde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    9ce2:	6bba      	ldr	r2, [r7, #56]	; 0x38
    9ce4:	fa22 f303 	lsr.w	r3, r2, r3
    9ce8:	f003 0301 	and.w	r3, r3, #1
    9cec:	2b00      	cmp	r3, #0
    9cee:	d0f1      	beq.n	9cd4 <nrfx_dppi_channel_alloc+0x3c>
        }

        m_allocated_channels |= DPPI_BIT_SET(channel);
    9cf0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    9cf4:	2201      	movs	r2, #1
    9cf6:	409a      	lsls	r2, r3
    9cf8:	4b4e      	ldr	r3, [pc, #312]	; (9e34 <nrfx_dppi_channel_alloc+0x19c>)
    9cfa:	681b      	ldr	r3, [r3, #0]
    9cfc:	4313      	orrs	r3, r2
    9cfe:	4a4d      	ldr	r2, [pc, #308]	; (9e34 <nrfx_dppi_channel_alloc+0x19c>)
    9d00:	6013      	str	r3, [r2, #0]
        *p_channel = channel;
    9d02:	687b      	ldr	r3, [r7, #4]
    9d04:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
    9d08:	701a      	strb	r2, [r3, #0]

        err_code = NRFX_SUCCESS;
    9d0a:	4b4c      	ldr	r3, [pc, #304]	; (9e3c <nrfx_dppi_channel_alloc+0x1a4>)
    9d0c:	633b      	str	r3, [r7, #48]	; 0x30
    9d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9d10:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    9d12:	69fb      	ldr	r3, [r7, #28]
    9d14:	f383 8811 	msr	BASEPRI, r3
    9d18:	f3bf 8f6f 	isb	sy
}
    9d1c:	bf00      	nop
    }
    NRFX_CRITICAL_SECTION_EXIT();

    if (err_code == NRFX_SUCCESS)
    9d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9d20:	4a46      	ldr	r2, [pc, #280]	; (9e3c <nrfx_dppi_channel_alloc+0x1a4>)
    9d22:	4293      	cmp	r3, r2
    9d24:	d13b      	bne.n	9d9e <nrfx_dppi_channel_alloc+0x106>
    {
        NRFX_LOG_INFO("Allocated channel: %d.", *p_channel);
    9d26:	2300      	movs	r3, #0
    9d28:	2b02      	cmp	r3, #2
    9d2a:	d97a      	bls.n	9e22 <nrfx_dppi_channel_alloc+0x18a>
    9d2c:	f00b fba4 	bl	15478 <k_is_user_context>
    9d30:	4603      	mov	r3, r0
    9d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    9d36:	2300      	movs	r3, #0
    9d38:	61bb      	str	r3, [r7, #24]
    9d3a:	2300      	movs	r3, #0
    9d3c:	2b00      	cmp	r3, #0
    9d3e:	d007      	beq.n	9d50 <nrfx_dppi_channel_alloc+0xb8>
    9d40:	4b3f      	ldr	r3, [pc, #252]	; (9e40 <nrfx_dppi_channel_alloc+0x1a8>)
    9d42:	681b      	ldr	r3, [r3, #0]
    9d44:	4618      	mov	r0, r3
    9d46:	f7ff ff7f 	bl	9c48 <log_const_source_id>
    9d4a:	4603      	mov	r3, r0
    9d4c:	b29b      	uxth	r3, r3
    9d4e:	e000      	b.n	9d52 <nrfx_dppi_channel_alloc+0xba>
    9d50:	2300      	movs	r3, #0
    9d52:	853b      	strh	r3, [r7, #40]	; 0x28
    9d54:	7d3b      	ldrb	r3, [r7, #20]
    9d56:	2203      	movs	r2, #3
    9d58:	f362 0302 	bfi	r3, r2, #0, #3
    9d5c:	753b      	strb	r3, [r7, #20]
    9d5e:	7d3b      	ldrb	r3, [r7, #20]
    9d60:	f36f 03c5 	bfc	r3, #3, #3
    9d64:	753b      	strb	r3, [r7, #20]
    9d66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    9d68:	f3c3 0309 	ubfx	r3, r3, #0, #10
    9d6c:	b29a      	uxth	r2, r3
    9d6e:	8abb      	ldrh	r3, [r7, #20]
    9d70:	f362 138f 	bfi	r3, r2, #6, #10
    9d74:	82bb      	strh	r3, [r7, #20]
    9d76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    9d7a:	2b00      	cmp	r3, #0
    9d7c:	d007      	beq.n	9d8e <nrfx_dppi_channel_alloc+0xf6>
    9d7e:	687b      	ldr	r3, [r7, #4]
    9d80:	781b      	ldrb	r3, [r3, #0]
    9d82:	461a      	mov	r2, r3
    9d84:	492f      	ldr	r1, [pc, #188]	; (9e44 <nrfx_dppi_channel_alloc+0x1ac>)
    9d86:	8ab8      	ldrh	r0, [r7, #20]
    9d88:	f7f8 ff78 	bl	2c7c <log_from_user>
    9d8c:	e04c      	b.n	9e28 <nrfx_dppi_channel_alloc+0x190>
    9d8e:	687b      	ldr	r3, [r7, #4]
    9d90:	781b      	ldrb	r3, [r3, #0]
    9d92:	8aba      	ldrh	r2, [r7, #20]
    9d94:	4619      	mov	r1, r3
    9d96:	482b      	ldr	r0, [pc, #172]	; (9e44 <nrfx_dppi_channel_alloc+0x1ac>)
    9d98:	f007 f87e 	bl	10e98 <log_1>
    9d9c:	e044      	b.n	9e28 <nrfx_dppi_channel_alloc+0x190>
    }
    else
    {
        NRFX_LOG_INFO("Function: %s, error code: %s.",
    9d9e:	2300      	movs	r3, #0
    9da0:	2b02      	cmp	r3, #2
    9da2:	d940      	bls.n	9e26 <nrfx_dppi_channel_alloc+0x18e>
    9da4:	f00b fb68 	bl	15478 <k_is_user_context>
    9da8:	4603      	mov	r3, r0
    9daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    9dae:	2300      	movs	r3, #0
    9db0:	613b      	str	r3, [r7, #16]
    9db2:	2300      	movs	r3, #0
    9db4:	2b00      	cmp	r3, #0
    9db6:	d007      	beq.n	9dc8 <nrfx_dppi_channel_alloc+0x130>
    9db8:	4b21      	ldr	r3, [pc, #132]	; (9e40 <nrfx_dppi_channel_alloc+0x1a8>)
    9dba:	681b      	ldr	r3, [r3, #0]
    9dbc:	4618      	mov	r0, r3
    9dbe:	f7ff ff43 	bl	9c48 <log_const_source_id>
    9dc2:	4603      	mov	r3, r0
    9dc4:	b29b      	uxth	r3, r3
    9dc6:	e000      	b.n	9dca <nrfx_dppi_channel_alloc+0x132>
    9dc8:	2300      	movs	r3, #0
    9dca:	85bb      	strh	r3, [r7, #44]	; 0x2c
    9dcc:	7b3b      	ldrb	r3, [r7, #12]
    9dce:	2203      	movs	r2, #3
    9dd0:	f362 0302 	bfi	r3, r2, #0, #3
    9dd4:	733b      	strb	r3, [r7, #12]
    9dd6:	7b3b      	ldrb	r3, [r7, #12]
    9dd8:	f36f 03c5 	bfc	r3, #3, #3
    9ddc:	733b      	strb	r3, [r7, #12]
    9dde:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    9de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    9de4:	b29a      	uxth	r2, r3
    9de6:	89bb      	ldrh	r3, [r7, #12]
    9de8:	f362 138f 	bfi	r3, r2, #6, #10
    9dec:	81bb      	strh	r3, [r7, #12]
    9dee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    9df2:	2b00      	cmp	r3, #0
    9df4:	d009      	beq.n	9e0a <nrfx_dppi_channel_alloc+0x172>
    9df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    9df8:	f7ff fb3a 	bl	9470 <nrfx_error_string_get>
    9dfc:	4603      	mov	r3, r0
    9dfe:	4a12      	ldr	r2, [pc, #72]	; (9e48 <nrfx_dppi_channel_alloc+0x1b0>)
    9e00:	4912      	ldr	r1, [pc, #72]	; (9e4c <nrfx_dppi_channel_alloc+0x1b4>)
    9e02:	89b8      	ldrh	r0, [r7, #12]
    9e04:	f7f8 ff3a 	bl	2c7c <log_from_user>
    9e08:	e00e      	b.n	9e28 <nrfx_dppi_channel_alloc+0x190>
    9e0a:	4c0f      	ldr	r4, [pc, #60]	; (9e48 <nrfx_dppi_channel_alloc+0x1b0>)
    9e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
    9e0e:	f7ff fb2f 	bl	9470 <nrfx_error_string_get>
    9e12:	4603      	mov	r3, r0
    9e14:	461a      	mov	r2, r3
    9e16:	89bb      	ldrh	r3, [r7, #12]
    9e18:	4621      	mov	r1, r4
    9e1a:	480c      	ldr	r0, [pc, #48]	; (9e4c <nrfx_dppi_channel_alloc+0x1b4>)
    9e1c:	f007 f853 	bl	10ec6 <log_2>
    9e20:	e002      	b.n	9e28 <nrfx_dppi_channel_alloc+0x190>
        NRFX_LOG_INFO("Allocated channel: %d.", *p_channel);
    9e22:	bf00      	nop
    9e24:	e000      	b.n	9e28 <nrfx_dppi_channel_alloc+0x190>
        NRFX_LOG_INFO("Function: %s, error code: %s.",
    9e26:	bf00      	nop
                      __func__,
                      NRFX_LOG_ERROR_STRING_GET(err_code));
    }
    return err_code;
    9e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
    9e2a:	4618      	mov	r0, r3
    9e2c:	3744      	adds	r7, #68	; 0x44
    9e2e:	46bd      	mov	sp, r7
    9e30:	bd90      	pop	{r4, r7, pc}
    9e32:	bf00      	nop
    9e34:	20000b98 	.word	0x20000b98
    9e38:	0bad0002 	.word	0x0bad0002
    9e3c:	0bad0000 	.word	0x0bad0000
    9e40:	20000b94 	.word	0x20000b94
    9e44:	00018f98 	.word	0x00018f98
    9e48:	0001acec 	.word	0x0001acec
    9e4c:	00018fb0 	.word	0x00018fb0

00009e50 <nrfx_dppi_channel_enable>:
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}

nrfx_err_t nrfx_dppi_channel_enable(uint8_t channel)
{
    9e50:	b590      	push	{r4, r7, lr}
    9e52:	b087      	sub	sp, #28
    9e54:	af00      	add	r7, sp, #0
    9e56:	4603      	mov	r3, r0
    9e58:	71fb      	strb	r3, [r7, #7]
    nrfx_err_t err_code = NRFX_SUCCESS;
    9e5a:	4b2e      	ldr	r3, [pc, #184]	; (9f14 <nrfx_dppi_channel_enable+0xc4>)
    9e5c:	617b      	str	r3, [r7, #20]

    if (!channel_is_allocated(channel))
    9e5e:	79fb      	ldrb	r3, [r7, #7]
    9e60:	4618      	mov	r0, r3
    9e62:	f7ff ff01 	bl	9c68 <channel_is_allocated>
    9e66:	4603      	mov	r3, r0
    9e68:	f083 0301 	eor.w	r3, r3, #1
    9e6c:	b2db      	uxtb	r3, r3
    9e6e:	2b00      	cmp	r3, #0
    9e70:	d002      	beq.n	9e78 <nrfx_dppi_channel_enable+0x28>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    9e72:	4b29      	ldr	r3, [pc, #164]	; (9f18 <nrfx_dppi_channel_enable+0xc8>)
    9e74:	617b      	str	r3, [r7, #20]
    9e76:	e007      	b.n	9e88 <nrfx_dppi_channel_enable+0x38>
    }
    else
    {
        nrf_dppi_channels_enable(NRF_DPPIC, DPPI_BIT_SET(channel));
    9e78:	79fb      	ldrb	r3, [r7, #7]
    9e7a:	2201      	movs	r2, #1
    9e7c:	fa02 f303 	lsl.w	r3, r2, r3
    9e80:	4619      	mov	r1, r3
    9e82:	4826      	ldr	r0, [pc, #152]	; (9f1c <nrfx_dppi_channel_enable+0xcc>)
    9e84:	f00b faea 	bl	1545c <nrf_dppi_channels_enable>
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    9e88:	2300      	movs	r3, #0
    9e8a:	2b02      	cmp	r3, #2
    9e8c:	d93c      	bls.n	9f08 <nrfx_dppi_channel_enable+0xb8>
    9e8e:	f00b faf3 	bl	15478 <k_is_user_context>
    9e92:	4603      	mov	r3, r0
    9e94:	74fb      	strb	r3, [r7, #19]
    9e96:	2300      	movs	r3, #0
    9e98:	60fb      	str	r3, [r7, #12]
    9e9a:	2300      	movs	r3, #0
    9e9c:	2b00      	cmp	r3, #0
    9e9e:	d007      	beq.n	9eb0 <nrfx_dppi_channel_enable+0x60>
    9ea0:	4b1f      	ldr	r3, [pc, #124]	; (9f20 <nrfx_dppi_channel_enable+0xd0>)
    9ea2:	681b      	ldr	r3, [r3, #0]
    9ea4:	4618      	mov	r0, r3
    9ea6:	f7ff fecf 	bl	9c48 <log_const_source_id>
    9eaa:	4603      	mov	r3, r0
    9eac:	b29b      	uxth	r3, r3
    9eae:	e000      	b.n	9eb2 <nrfx_dppi_channel_enable+0x62>
    9eb0:	2300      	movs	r3, #0
    9eb2:	823b      	strh	r3, [r7, #16]
    9eb4:	7a3b      	ldrb	r3, [r7, #8]
    9eb6:	2203      	movs	r2, #3
    9eb8:	f362 0302 	bfi	r3, r2, #0, #3
    9ebc:	723b      	strb	r3, [r7, #8]
    9ebe:	7a3b      	ldrb	r3, [r7, #8]
    9ec0:	f36f 03c5 	bfc	r3, #3, #3
    9ec4:	723b      	strb	r3, [r7, #8]
    9ec6:	8a3b      	ldrh	r3, [r7, #16]
    9ec8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    9ecc:	b29a      	uxth	r2, r3
    9ece:	893b      	ldrh	r3, [r7, #8]
    9ed0:	f362 138f 	bfi	r3, r2, #6, #10
    9ed4:	813b      	strh	r3, [r7, #8]
    9ed6:	7cfb      	ldrb	r3, [r7, #19]
    9ed8:	2b00      	cmp	r3, #0
    9eda:	d009      	beq.n	9ef0 <nrfx_dppi_channel_enable+0xa0>
    9edc:	6978      	ldr	r0, [r7, #20]
    9ede:	f7ff fac7 	bl	9470 <nrfx_error_string_get>
    9ee2:	4603      	mov	r3, r0
    9ee4:	4a0f      	ldr	r2, [pc, #60]	; (9f24 <nrfx_dppi_channel_enable+0xd4>)
    9ee6:	4910      	ldr	r1, [pc, #64]	; (9f28 <nrfx_dppi_channel_enable+0xd8>)
    9ee8:	8938      	ldrh	r0, [r7, #8]
    9eea:	f7f8 fec7 	bl	2c7c <log_from_user>
    9eee:	e00c      	b.n	9f0a <nrfx_dppi_channel_enable+0xba>
    9ef0:	4c0c      	ldr	r4, [pc, #48]	; (9f24 <nrfx_dppi_channel_enable+0xd4>)
    9ef2:	6978      	ldr	r0, [r7, #20]
    9ef4:	f7ff fabc 	bl	9470 <nrfx_error_string_get>
    9ef8:	4603      	mov	r3, r0
    9efa:	461a      	mov	r2, r3
    9efc:	893b      	ldrh	r3, [r7, #8]
    9efe:	4621      	mov	r1, r4
    9f00:	4809      	ldr	r0, [pc, #36]	; (9f28 <nrfx_dppi_channel_enable+0xd8>)
    9f02:	f006 ffe0 	bl	10ec6 <log_2>
    9f06:	e000      	b.n	9f0a <nrfx_dppi_channel_enable+0xba>
    9f08:	bf00      	nop
    return err_code;
    9f0a:	697b      	ldr	r3, [r7, #20]
}
    9f0c:	4618      	mov	r0, r3
    9f0e:	371c      	adds	r7, #28
    9f10:	46bd      	mov	sp, r7
    9f12:	bd90      	pop	{r4, r7, pc}
    9f14:	0bad0000 	.word	0x0bad0000
    9f18:	0bad0004 	.word	0x0bad0004
    9f1c:	50017000 	.word	0x50017000
    9f20:	20000b94 	.word	0x20000b94
    9f24:	0001ad04 	.word	0x0001ad04
    9f28:	00018fb0 	.word	0x00018fb0

00009f2c <log_const_source_id>:
{
    9f2c:	b480      	push	{r7}
    9f2e:	b083      	sub	sp, #12
    9f30:	af00      	add	r7, sp, #0
    9f32:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    9f34:	687b      	ldr	r3, [r7, #4]
    9f36:	4a04      	ldr	r2, [pc, #16]	; (9f48 <log_const_source_id+0x1c>)
    9f38:	1a9b      	subs	r3, r3, r2
    9f3a:	08db      	lsrs	r3, r3, #3
}
    9f3c:	4618      	mov	r0, r3
    9f3e:	370c      	adds	r7, #12
    9f40:	46bd      	mov	sp, r7
    9f42:	bc80      	pop	{r7}
    9f44:	4770      	bx	lr
    9f46:	bf00      	nop
    9f48:	000170bc 	.word	0x000170bc

00009f4c <is_allocated_channel>:
    m_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    9f4c:	b480      	push	{r7}
    9f4e:	b083      	sub	sp, #12
    9f50:	af00      	add	r7, sp, #0
    9f52:	4603      	mov	r3, r0
    9f54:	71fb      	strb	r3, [r7, #7]
    return m_cb.allocated_channels_mask & (1UL << index);
    9f56:	4b08      	ldr	r3, [pc, #32]	; (9f78 <is_allocated_channel+0x2c>)
    9f58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    9f5a:	79fb      	ldrb	r3, [r7, #7]
    9f5c:	2101      	movs	r1, #1
    9f5e:	fa01 f303 	lsl.w	r3, r1, r3
    9f62:	4013      	ands	r3, r2
    9f64:	2b00      	cmp	r3, #0
    9f66:	bf14      	ite	ne
    9f68:	2301      	movne	r3, #1
    9f6a:	2300      	moveq	r3, #0
    9f6c:	b2db      	uxtb	r3, r3
}
    9f6e:	4618      	mov	r0, r3
    9f70:	370c      	adds	r7, #12
    9f72:	46bd      	mov	sp, r7
    9f74:	bc80      	pop	{r7}
    9f76:	4770      	bx	lr
    9f78:	20000ba0 	.word	0x20000ba0

00009f7c <channel_allocated_set>:
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    9f7c:	b480      	push	{r7}
    9f7e:	b083      	sub	sp, #12
    9f80:	af00      	add	r7, sp, #0
    9f82:	4603      	mov	r3, r0
    9f84:	71fb      	strb	r3, [r7, #7]
    m_cb.allocated_channels_mask |= (1UL << index);
    9f86:	4b07      	ldr	r3, [pc, #28]	; (9fa4 <channel_allocated_set+0x28>)
    9f88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    9f8a:	79fb      	ldrb	r3, [r7, #7]
    9f8c:	2101      	movs	r1, #1
    9f8e:	fa01 f303 	lsl.w	r3, r1, r3
    9f92:	4313      	orrs	r3, r2
    9f94:	4a03      	ldr	r2, [pc, #12]	; (9fa4 <channel_allocated_set+0x28>)
    9f96:	64d3      	str	r3, [r2, #76]	; 0x4c
}
    9f98:	bf00      	nop
    9f9a:	370c      	adds	r7, #12
    9f9c:	46bd      	mov	sp, r7
    9f9e:	bc80      	pop	{r7}
    9fa0:	4770      	bx	lr
    9fa2:	bf00      	nop
    9fa4:	20000ba0 	.word	0x20000ba0

00009fa8 <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    9fa8:	b480      	push	{r7}
    9faa:	b083      	sub	sp, #12
    9fac:	af00      	add	r7, sp, #0
    9fae:	4603      	mov	r3, r0
    9fb0:	71fb      	strb	r3, [r7, #7]
    m_cb.allocated_channels_mask &= ~(1UL << index);
    9fb2:	4b07      	ldr	r3, [pc, #28]	; (9fd0 <channel_allocated_clr+0x28>)
    9fb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    9fb6:	79fb      	ldrb	r3, [r7, #7]
    9fb8:	2101      	movs	r1, #1
    9fba:	fa01 f303 	lsl.w	r3, r1, r3
    9fbe:	43db      	mvns	r3, r3
    9fc0:	4013      	ands	r3, r2
    9fc2:	4a03      	ldr	r2, [pc, #12]	; (9fd0 <channel_allocated_clr+0x28>)
    9fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
}
    9fc6:	bf00      	nop
    9fc8:	370c      	adds	r7, #12
    9fca:	46bd      	mov	sp, r7
    9fcc:	bc80      	pop	{r7}
    9fce:	4770      	bx	lr
    9fd0:	20000ba0 	.word	0x20000ba0

00009fd4 <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    9fd4:	b590      	push	{r4, r7, lr}
    9fd6:	b08b      	sub	sp, #44	; 0x2c
    9fd8:	af00      	add	r7, sp, #0
    9fda:	4603      	mov	r3, r0
    9fdc:	71fb      	strb	r3, [r7, #7]
    nrfx_err_t err_code = NRFX_SUCCESS;
    9fde:	4b36      	ldr	r3, [pc, #216]	; (a0b8 <nrfx_gpiote_channel_free+0xe4>)
    9fe0:	627b      	str	r3, [r7, #36]	; 0x24

    if (!is_app_channel(channel))
    9fe2:	79fb      	ldrb	r3, [r7, #7]
    9fe4:	4618      	mov	r0, r3
    9fe6:	f00b fa55 	bl	15494 <is_app_channel>
    9fea:	4603      	mov	r3, r0
    9fec:	f083 0301 	eor.w	r3, r3, #1
    9ff0:	b2db      	uxtb	r3, r3
    9ff2:	2b00      	cmp	r3, #0
    9ff4:	d002      	beq.n	9ffc <nrfx_gpiote_channel_free+0x28>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    9ff6:	4b31      	ldr	r3, [pc, #196]	; (a0bc <nrfx_gpiote_channel_free+0xe8>)
    9ff8:	627b      	str	r3, [r7, #36]	; 0x24
    9ffa:	e017      	b.n	a02c <nrfx_gpiote_channel_free+0x58>
	__asm__ volatile(
    9ffc:	f04f 0320 	mov.w	r3, #32
    a000:	f3ef 8211 	mrs	r2, BASEPRI
    a004:	f383 8811 	msr	BASEPRI, r3
    a008:	f3bf 8f6f 	isb	sy
    a00c:	617a      	str	r2, [r7, #20]
    a00e:	613b      	str	r3, [r7, #16]
	return key;
    a010:	697b      	ldr	r3, [r7, #20]
    }
    else
    {
        NRFX_CRITICAL_SECTION_ENTER();
    a012:	623b      	str	r3, [r7, #32]
        channel_allocated_clr(channel);
    a014:	79fb      	ldrb	r3, [r7, #7]
    a016:	4618      	mov	r0, r3
    a018:	f7ff ffc6 	bl	9fa8 <channel_allocated_clr>
    a01c:	6a3b      	ldr	r3, [r7, #32]
    a01e:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
    a020:	69bb      	ldr	r3, [r7, #24]
    a022:	f383 8811 	msr	BASEPRI, r3
    a026:	f3bf 8f6f 	isb	sy
}
    a02a:	bf00      	nop
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    a02c:	2300      	movs	r3, #0
    a02e:	2b02      	cmp	r3, #2
    a030:	d93c      	bls.n	a0ac <nrfx_gpiote_channel_free+0xd8>
    a032:	f00b fa28 	bl	15486 <k_is_user_context>
    a036:	4603      	mov	r3, r0
    a038:	77fb      	strb	r3, [r7, #31]
    a03a:	2300      	movs	r3, #0
    a03c:	60fb      	str	r3, [r7, #12]
    a03e:	2300      	movs	r3, #0
    a040:	2b00      	cmp	r3, #0
    a042:	d007      	beq.n	a054 <nrfx_gpiote_channel_free+0x80>
    a044:	4b1e      	ldr	r3, [pc, #120]	; (a0c0 <nrfx_gpiote_channel_free+0xec>)
    a046:	681b      	ldr	r3, [r3, #0]
    a048:	4618      	mov	r0, r3
    a04a:	f7ff ff6f 	bl	9f2c <log_const_source_id>
    a04e:	4603      	mov	r3, r0
    a050:	b29b      	uxth	r3, r3
    a052:	e000      	b.n	a056 <nrfx_gpiote_channel_free+0x82>
    a054:	2300      	movs	r3, #0
    a056:	83bb      	strh	r3, [r7, #28]
    a058:	7a3b      	ldrb	r3, [r7, #8]
    a05a:	2203      	movs	r2, #3
    a05c:	f362 0302 	bfi	r3, r2, #0, #3
    a060:	723b      	strb	r3, [r7, #8]
    a062:	7a3b      	ldrb	r3, [r7, #8]
    a064:	f36f 03c5 	bfc	r3, #3, #3
    a068:	723b      	strb	r3, [r7, #8]
    a06a:	8bbb      	ldrh	r3, [r7, #28]
    a06c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    a070:	b29a      	uxth	r2, r3
    a072:	893b      	ldrh	r3, [r7, #8]
    a074:	f362 138f 	bfi	r3, r2, #6, #10
    a078:	813b      	strh	r3, [r7, #8]
    a07a:	7ffb      	ldrb	r3, [r7, #31]
    a07c:	2b00      	cmp	r3, #0
    a07e:	d009      	beq.n	a094 <nrfx_gpiote_channel_free+0xc0>
    a080:	6a78      	ldr	r0, [r7, #36]	; 0x24
    a082:	f7ff f9f5 	bl	9470 <nrfx_error_string_get>
    a086:	4603      	mov	r3, r0
    a088:	4a0e      	ldr	r2, [pc, #56]	; (a0c4 <nrfx_gpiote_channel_free+0xf0>)
    a08a:	490f      	ldr	r1, [pc, #60]	; (a0c8 <nrfx_gpiote_channel_free+0xf4>)
    a08c:	8938      	ldrh	r0, [r7, #8]
    a08e:	f7f8 fdf5 	bl	2c7c <log_from_user>
    a092:	e00c      	b.n	a0ae <nrfx_gpiote_channel_free+0xda>
    a094:	4c0b      	ldr	r4, [pc, #44]	; (a0c4 <nrfx_gpiote_channel_free+0xf0>)
    a096:	6a78      	ldr	r0, [r7, #36]	; 0x24
    a098:	f7ff f9ea 	bl	9470 <nrfx_error_string_get>
    a09c:	4603      	mov	r3, r0
    a09e:	461a      	mov	r2, r3
    a0a0:	893b      	ldrh	r3, [r7, #8]
    a0a2:	4621      	mov	r1, r4
    a0a4:	4808      	ldr	r0, [pc, #32]	; (a0c8 <nrfx_gpiote_channel_free+0xf4>)
    a0a6:	f006 ff0e 	bl	10ec6 <log_2>
    a0aa:	e000      	b.n	a0ae <nrfx_gpiote_channel_free+0xda>
    a0ac:	bf00      	nop
    return err_code;
    a0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    a0b0:	4618      	mov	r0, r3
    a0b2:	372c      	adds	r7, #44	; 0x2c
    a0b4:	46bd      	mov	sp, r7
    a0b6:	bd90      	pop	{r4, r7, pc}
    a0b8:	0bad0000 	.word	0x0bad0000
    a0bc:	0bad0004 	.word	0x0bad0004
    a0c0:	20000b9c 	.word	0x20000b9c
    a0c4:	0001ad20 	.word	0x0001ad20
    a0c8:	00019090 	.word	0x00019090

0000a0cc <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    a0cc:	b590      	push	{r4, r7, lr}
    a0ce:	b091      	sub	sp, #68	; 0x44
    a0d0:	af00      	add	r7, sp, #0
    a0d2:	6078      	str	r0, [r7, #4]
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    a0d4:	4b6b      	ldr	r3, [pc, #428]	; (a284 <nrfx_gpiote_channel_alloc+0x1b8>)
    a0d6:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    a0d8:	23ff      	movs	r3, #255	; 0xff
    a0da:	63fb      	str	r3, [r7, #60]	; 0x3c

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    a0dc:	2300      	movs	r3, #0
    a0de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    a0e2:	e082      	b.n	a1ea <nrfx_gpiote_channel_alloc+0x11e>
	__asm__ volatile(
    a0e4:	f04f 0320 	mov.w	r3, #32
    a0e8:	f3ef 8211 	mrs	r2, BASEPRI
    a0ec:	f383 8811 	msr	BASEPRI, r3
    a0f0:	f3bf 8f6f 	isb	sy
    a0f4:	627a      	str	r2, [r7, #36]	; 0x24
    a0f6:	623b      	str	r3, [r7, #32]
	return key;
    a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
        NRFX_CRITICAL_SECTION_ENTER();
    a0fa:	633b      	str	r3, [r7, #48]	; 0x30
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    a0fc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    a100:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a102:	fa22 f303 	lsr.w	r3, r2, r3
    a106:	f003 0301 	and.w	r3, r3, #1
    a10a:	2b00      	cmp	r3, #0
    a10c:	d015      	beq.n	a13a <nrfx_gpiote_channel_alloc+0x6e>
    a10e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    a112:	4618      	mov	r0, r3
    a114:	f7ff ff1a 	bl	9f4c <is_allocated_channel>
    a118:	4603      	mov	r3, r0
    a11a:	f083 0301 	eor.w	r3, r3, #1
    a11e:	b2db      	uxtb	r3, r3
    a120:	2b00      	cmp	r3, #0
    a122:	d00a      	beq.n	a13a <nrfx_gpiote_channel_alloc+0x6e>
        {
            channel_allocated_set(ch_idx);
    a124:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    a128:	4618      	mov	r0, r3
    a12a:	f7ff ff27 	bl	9f7c <channel_allocated_set>
            *p_channel = ch_idx;
    a12e:	687b      	ldr	r3, [r7, #4]
    a130:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
    a134:	701a      	strb	r2, [r3, #0]
            err_code = NRFX_SUCCESS;
    a136:	4b54      	ldr	r3, [pc, #336]	; (a288 <nrfx_gpiote_channel_alloc+0x1bc>)
    a138:	637b      	str	r3, [r7, #52]	; 0x34
    a13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a13c:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    a13e:	69fb      	ldr	r3, [r7, #28]
    a140:	f383 8811 	msr	BASEPRI, r3
    a144:	f3bf 8f6f 	isb	sy
}
    a148:	bf00      	nop
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    a14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a14c:	4a4e      	ldr	r2, [pc, #312]	; (a288 <nrfx_gpiote_channel_alloc+0x1bc>)
    a14e:	4293      	cmp	r3, r2
    a150:	d13d      	bne.n	a1ce <nrfx_gpiote_channel_alloc+0x102>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
    a152:	2300      	movs	r3, #0
    a154:	2b02      	cmp	r3, #2
    a156:	d801      	bhi.n	a15c <nrfx_gpiote_channel_alloc+0x90>
    a158:	bf00      	nop
            break;
    a15a:	e04a      	b.n	a1f2 <nrfx_gpiote_channel_alloc+0x126>
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
    a15c:	f00b f993 	bl	15486 <k_is_user_context>
    a160:	4603      	mov	r3, r0
    a162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    a166:	2300      	movs	r3, #0
    a168:	61bb      	str	r3, [r7, #24]
    a16a:	2300      	movs	r3, #0
    a16c:	2b00      	cmp	r3, #0
    a16e:	d007      	beq.n	a180 <nrfx_gpiote_channel_alloc+0xb4>
    a170:	4b46      	ldr	r3, [pc, #280]	; (a28c <nrfx_gpiote_channel_alloc+0x1c0>)
    a172:	681b      	ldr	r3, [r3, #0]
    a174:	4618      	mov	r0, r3
    a176:	f7ff fed9 	bl	9f2c <log_const_source_id>
    a17a:	4603      	mov	r3, r0
    a17c:	b29b      	uxth	r3, r3
    a17e:	e000      	b.n	a182 <nrfx_gpiote_channel_alloc+0xb6>
    a180:	2300      	movs	r3, #0
    a182:	85bb      	strh	r3, [r7, #44]	; 0x2c
    a184:	7d3b      	ldrb	r3, [r7, #20]
    a186:	2203      	movs	r2, #3
    a188:	f362 0302 	bfi	r3, r2, #0, #3
    a18c:	753b      	strb	r3, [r7, #20]
    a18e:	7d3b      	ldrb	r3, [r7, #20]
    a190:	f36f 03c5 	bfc	r3, #3, #3
    a194:	753b      	strb	r3, [r7, #20]
    a196:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
    a198:	f3c3 0309 	ubfx	r3, r3, #0, #10
    a19c:	b29a      	uxth	r2, r3
    a19e:	8abb      	ldrh	r3, [r7, #20]
    a1a0:	f362 138f 	bfi	r3, r2, #6, #10
    a1a4:	82bb      	strh	r3, [r7, #20]
    a1a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    a1aa:	2b00      	cmp	r3, #0
    a1ac:	d007      	beq.n	a1be <nrfx_gpiote_channel_alloc+0xf2>
    a1ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    a1b2:	461a      	mov	r2, r3
    a1b4:	4936      	ldr	r1, [pc, #216]	; (a290 <nrfx_gpiote_channel_alloc+0x1c4>)
    a1b6:	8ab8      	ldrh	r0, [r7, #20]
    a1b8:	f7f8 fd60 	bl	2c7c <log_from_user>
            break;
    a1bc:	e019      	b.n	a1f2 <nrfx_gpiote_channel_alloc+0x126>
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
    a1be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    a1c2:	8aba      	ldrh	r2, [r7, #20]
    a1c4:	4619      	mov	r1, r3
    a1c6:	4832      	ldr	r0, [pc, #200]	; (a290 <nrfx_gpiote_channel_alloc+0x1c4>)
    a1c8:	f006 fe66 	bl	10e98 <log_1>
            break;
    a1cc:	e011      	b.n	a1f2 <nrfx_gpiote_channel_alloc+0x126>
        }

        mask &= ~(1UL << ch_idx);
    a1ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    a1d2:	2201      	movs	r2, #1
    a1d4:	fa02 f303 	lsl.w	r3, r2, r3
    a1d8:	43db      	mvns	r3, r3
    a1da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a1dc:	4013      	ands	r3, r2
    a1de:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    a1e0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    a1e4:	3301      	adds	r3, #1
    a1e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    a1ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a1ec:	2b00      	cmp	r3, #0
    a1ee:	f47f af79 	bne.w	a0e4 <nrfx_gpiote_channel_alloc+0x18>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    a1f2:	2300      	movs	r3, #0
    a1f4:	2b02      	cmp	r3, #2
    a1f6:	d93e      	bls.n	a276 <nrfx_gpiote_channel_alloc+0x1aa>
    a1f8:	f00b f945 	bl	15486 <k_is_user_context>
    a1fc:	4603      	mov	r3, r0
    a1fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    a202:	2300      	movs	r3, #0
    a204:	613b      	str	r3, [r7, #16]
    a206:	2300      	movs	r3, #0
    a208:	2b00      	cmp	r3, #0
    a20a:	d007      	beq.n	a21c <nrfx_gpiote_channel_alloc+0x150>
    a20c:	4b1f      	ldr	r3, [pc, #124]	; (a28c <nrfx_gpiote_channel_alloc+0x1c0>)
    a20e:	681b      	ldr	r3, [r3, #0]
    a210:	4618      	mov	r0, r3
    a212:	f7ff fe8b 	bl	9f2c <log_const_source_id>
    a216:	4603      	mov	r3, r0
    a218:	b29b      	uxth	r3, r3
    a21a:	e000      	b.n	a21e <nrfx_gpiote_channel_alloc+0x152>
    a21c:	2300      	movs	r3, #0
    a21e:	853b      	strh	r3, [r7, #40]	; 0x28
    a220:	7b3b      	ldrb	r3, [r7, #12]
    a222:	2203      	movs	r2, #3
    a224:	f362 0302 	bfi	r3, r2, #0, #3
    a228:	733b      	strb	r3, [r7, #12]
    a22a:	7b3b      	ldrb	r3, [r7, #12]
    a22c:	f36f 03c5 	bfc	r3, #3, #3
    a230:	733b      	strb	r3, [r7, #12]
    a232:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    a234:	f3c3 0309 	ubfx	r3, r3, #0, #10
    a238:	b29a      	uxth	r2, r3
    a23a:	89bb      	ldrh	r3, [r7, #12]
    a23c:	f362 138f 	bfi	r3, r2, #6, #10
    a240:	81bb      	strh	r3, [r7, #12]
    a242:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    a246:	2b00      	cmp	r3, #0
    a248:	d009      	beq.n	a25e <nrfx_gpiote_channel_alloc+0x192>
    a24a:	6b78      	ldr	r0, [r7, #52]	; 0x34
    a24c:	f7ff f910 	bl	9470 <nrfx_error_string_get>
    a250:	4603      	mov	r3, r0
    a252:	4a10      	ldr	r2, [pc, #64]	; (a294 <nrfx_gpiote_channel_alloc+0x1c8>)
    a254:	4910      	ldr	r1, [pc, #64]	; (a298 <nrfx_gpiote_channel_alloc+0x1cc>)
    a256:	89b8      	ldrh	r0, [r7, #12]
    a258:	f7f8 fd10 	bl	2c7c <log_from_user>
    a25c:	e00c      	b.n	a278 <nrfx_gpiote_channel_alloc+0x1ac>
    a25e:	4c0d      	ldr	r4, [pc, #52]	; (a294 <nrfx_gpiote_channel_alloc+0x1c8>)
    a260:	6b78      	ldr	r0, [r7, #52]	; 0x34
    a262:	f7ff f905 	bl	9470 <nrfx_error_string_get>
    a266:	4603      	mov	r3, r0
    a268:	461a      	mov	r2, r3
    a26a:	89bb      	ldrh	r3, [r7, #12]
    a26c:	4621      	mov	r1, r4
    a26e:	480a      	ldr	r0, [pc, #40]	; (a298 <nrfx_gpiote_channel_alloc+0x1cc>)
    a270:	f006 fe29 	bl	10ec6 <log_2>
    a274:	e000      	b.n	a278 <nrfx_gpiote_channel_alloc+0x1ac>
    a276:	bf00      	nop
    return err_code;
    a278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    a27a:	4618      	mov	r0, r3
    a27c:	3744      	adds	r7, #68	; 0x44
    a27e:	46bd      	mov	sp, r7
    a280:	bd90      	pop	{r4, r7, pc}
    a282:	bf00      	nop
    a284:	0bad0002 	.word	0x0bad0002
    a288:	0bad0000 	.word	0x0bad0000
    a28c:	20000b9c 	.word	0x20000b9c
    a290:	0001912c 	.word	0x0001912c
    a294:	0001ad3c 	.word	0x0001ad3c
    a298:	00019090 	.word	0x00019090

0000a29c <log_const_source_id>:
{
    a29c:	b480      	push	{r7}
    a29e:	b083      	sub	sp, #12
    a2a0:	af00      	add	r7, sp, #0
    a2a2:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    a2a4:	687b      	ldr	r3, [r7, #4]
    a2a6:	4a04      	ldr	r2, [pc, #16]	; (a2b8 <log_const_source_id+0x1c>)
    a2a8:	1a9b      	subs	r3, r3, r2
    a2aa:	08db      	lsrs	r3, r3, #3
}
    a2ac:	4618      	mov	r0, r3
    a2ae:	370c      	adds	r7, #12
    a2b0:	46bd      	mov	sp, r7
    a2b2:	bc80      	pop	{r7}
    a2b4:	4770      	bx	lr
    a2b6:	bf00      	nop
    a2b8:	000170bc 	.word	0x000170bc

0000a2bc <nrfx_timer_init>:
static timer_control_block_t m_cb[NRFX_TIMER_ENABLED_COUNT];

nrfx_err_t nrfx_timer_init(nrfx_timer_t const *        p_instance,
                           nrfx_timer_config_t const * p_config,
                           nrfx_timer_event_handler_t  timer_event_handler)
{
    a2bc:	b590      	push	{r4, r7, lr}
    a2be:	b08f      	sub	sp, #60	; 0x3c
    a2c0:	af00      	add	r7, sp, #0
    a2c2:	60f8      	str	r0, [r7, #12]
    a2c4:	60b9      	str	r1, [r7, #8]
    a2c6:	607a      	str	r2, [r7, #4]
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
    a2c8:	68fb      	ldr	r3, [r7, #12]
    a2ca:	791b      	ldrb	r3, [r3, #4]
    a2cc:	461a      	mov	r2, r3
    a2ce:	4613      	mov	r3, r2
    a2d0:	005b      	lsls	r3, r3, #1
    a2d2:	4413      	add	r3, r2
    a2d4:	009b      	lsls	r3, r3, #2
    a2d6:	4aa0      	ldr	r2, [pc, #640]	; (a558 <nrfx_timer_init+0x29c>)
    a2d8:	4413      	add	r3, r2
    a2da:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef SOFTDEVICE_PRESENT
    NRFX_ASSERT(p_instance->p_reg != NRF_TIMER0);
#endif
    NRFX_ASSERT(p_config);
    a2dc:	68bb      	ldr	r3, [r7, #8]
    a2de:	2b00      	cmp	r3, #0
    a2e0:	d109      	bne.n	a2f6 <nrfx_timer_init+0x3a>
    a2e2:	2353      	movs	r3, #83	; 0x53
    a2e4:	4a9d      	ldr	r2, [pc, #628]	; (a55c <nrfx_timer_init+0x2a0>)
    a2e6:	499e      	ldr	r1, [pc, #632]	; (a560 <nrfx_timer_init+0x2a4>)
    a2e8:	489e      	ldr	r0, [pc, #632]	; (a564 <nrfx_timer_init+0x2a8>)
    a2ea:	f005 fcc3 	bl	fc74 <printk>
    a2ee:	2153      	movs	r1, #83	; 0x53
    a2f0:	489a      	ldr	r0, [pc, #616]	; (a55c <nrfx_timer_init+0x2a0>)
    a2f2:	f006 f91b 	bl	1052c <assert_post_action>
    NRFX_ASSERT(timer_event_handler);
    a2f6:	687b      	ldr	r3, [r7, #4]
    a2f8:	2b00      	cmp	r3, #0
    a2fa:	d109      	bne.n	a310 <nrfx_timer_init+0x54>
    a2fc:	2354      	movs	r3, #84	; 0x54
    a2fe:	4a97      	ldr	r2, [pc, #604]	; (a55c <nrfx_timer_init+0x2a0>)
    a300:	4999      	ldr	r1, [pc, #612]	; (a568 <nrfx_timer_init+0x2ac>)
    a302:	4898      	ldr	r0, [pc, #608]	; (a564 <nrfx_timer_init+0x2a8>)
    a304:	f005 fcb6 	bl	fc74 <printk>
    a308:	2154      	movs	r1, #84	; 0x54
    a30a:	4894      	ldr	r0, [pc, #592]	; (a55c <nrfx_timer_init+0x2a0>)
    a30c:	f006 f90e 	bl	1052c <assert_post_action>

    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    a310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a312:	7a1b      	ldrb	r3, [r3, #8]
    a314:	2b00      	cmp	r3, #0
    a316:	d046      	beq.n	a3a6 <nrfx_timer_init+0xea>
    {
        err_code = NRFX_ERROR_INVALID_STATE;
    a318:	4b94      	ldr	r3, [pc, #592]	; (a56c <nrfx_timer_init+0x2b0>)
    a31a:	62fb      	str	r3, [r7, #44]	; 0x2c
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
    a31c:	2300      	movs	r3, #0
    a31e:	2b01      	cmp	r3, #1
    a320:	d93e      	bls.n	a3a0 <nrfx_timer_init+0xe4>
    a322:	f00b f9a6 	bl	15672 <k_is_user_context>
    a326:	4603      	mov	r3, r0
    a328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    a32c:	2300      	movs	r3, #0
    a32e:	623b      	str	r3, [r7, #32]
    a330:	2300      	movs	r3, #0
    a332:	2b00      	cmp	r3, #0
    a334:	d007      	beq.n	a346 <nrfx_timer_init+0x8a>
    a336:	4b8e      	ldr	r3, [pc, #568]	; (a570 <nrfx_timer_init+0x2b4>)
    a338:	681b      	ldr	r3, [r3, #0]
    a33a:	4618      	mov	r0, r3
    a33c:	f7ff ffae 	bl	a29c <log_const_source_id>
    a340:	4603      	mov	r3, r0
    a342:	b29b      	uxth	r3, r3
    a344:	e000      	b.n	a348 <nrfx_timer_init+0x8c>
    a346:	2300      	movs	r3, #0
    a348:	84bb      	strh	r3, [r7, #36]	; 0x24
    a34a:	7f3b      	ldrb	r3, [r7, #28]
    a34c:	2202      	movs	r2, #2
    a34e:	f362 0302 	bfi	r3, r2, #0, #3
    a352:	773b      	strb	r3, [r7, #28]
    a354:	7f3b      	ldrb	r3, [r7, #28]
    a356:	f36f 03c5 	bfc	r3, #3, #3
    a35a:	773b      	strb	r3, [r7, #28]
    a35c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    a35e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    a362:	b29a      	uxth	r2, r3
    a364:	8bbb      	ldrh	r3, [r7, #28]
    a366:	f362 138f 	bfi	r3, r2, #6, #10
    a36a:	83bb      	strh	r3, [r7, #28]
    a36c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    a370:	2b00      	cmp	r3, #0
    a372:	d009      	beq.n	a388 <nrfx_timer_init+0xcc>
    a374:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    a376:	f7ff f87b 	bl	9470 <nrfx_error_string_get>
    a37a:	4603      	mov	r3, r0
    a37c:	4a7d      	ldr	r2, [pc, #500]	; (a574 <nrfx_timer_init+0x2b8>)
    a37e:	497e      	ldr	r1, [pc, #504]	; (a578 <nrfx_timer_init+0x2bc>)
    a380:	8bb8      	ldrh	r0, [r7, #28]
    a382:	f7f8 fc7b 	bl	2c7c <log_from_user>
    a386:	e00c      	b.n	a3a2 <nrfx_timer_init+0xe6>
    a388:	4c7a      	ldr	r4, [pc, #488]	; (a574 <nrfx_timer_init+0x2b8>)
    a38a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    a38c:	f7ff f870 	bl	9470 <nrfx_error_string_get>
    a390:	4603      	mov	r3, r0
    a392:	461a      	mov	r2, r3
    a394:	8bbb      	ldrh	r3, [r7, #28]
    a396:	4621      	mov	r1, r4
    a398:	4877      	ldr	r0, [pc, #476]	; (a578 <nrfx_timer_init+0x2bc>)
    a39a:	f006 fd94 	bl	10ec6 <log_2>
    a39e:	e000      	b.n	a3a2 <nrfx_timer_init+0xe6>
    a3a0:	bf00      	nop
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    a3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a3a4:	e0d4      	b.n	a550 <nrfx_timer_init+0x294>
    }

    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));
    a3a6:	68fb      	ldr	r3, [r7, #12]
    a3a8:	681b      	ldr	r3, [r3, #0]
    a3aa:	4a74      	ldr	r2, [pc, #464]	; (a57c <nrfx_timer_init+0x2c0>)
    a3ac:	4293      	cmp	r3, r2
    a3ae:	d10f      	bne.n	a3d0 <nrfx_timer_init+0x114>
    a3b0:	68bb      	ldr	r3, [r7, #8]
    a3b2:	789b      	ldrb	r3, [r3, #2]
    a3b4:	2b01      	cmp	r3, #1
    a3b6:	d03f      	beq.n	a438 <nrfx_timer_init+0x17c>
    a3b8:	68bb      	ldr	r3, [r7, #8]
    a3ba:	789b      	ldrb	r3, [r3, #2]
    a3bc:	2b00      	cmp	r3, #0
    a3be:	d03b      	beq.n	a438 <nrfx_timer_init+0x17c>
    a3c0:	68bb      	ldr	r3, [r7, #8]
    a3c2:	789b      	ldrb	r3, [r3, #2]
    a3c4:	2b02      	cmp	r3, #2
    a3c6:	d037      	beq.n	a438 <nrfx_timer_init+0x17c>
    a3c8:	68bb      	ldr	r3, [r7, #8]
    a3ca:	789b      	ldrb	r3, [r3, #2]
    a3cc:	2b03      	cmp	r3, #3
    a3ce:	d033      	beq.n	a438 <nrfx_timer_init+0x17c>
    a3d0:	68fb      	ldr	r3, [r7, #12]
    a3d2:	681b      	ldr	r3, [r3, #0]
    a3d4:	4a6a      	ldr	r2, [pc, #424]	; (a580 <nrfx_timer_init+0x2c4>)
    a3d6:	4293      	cmp	r3, r2
    a3d8:	d10f      	bne.n	a3fa <nrfx_timer_init+0x13e>
    a3da:	68bb      	ldr	r3, [r7, #8]
    a3dc:	789b      	ldrb	r3, [r3, #2]
    a3de:	2b01      	cmp	r3, #1
    a3e0:	d02a      	beq.n	a438 <nrfx_timer_init+0x17c>
    a3e2:	68bb      	ldr	r3, [r7, #8]
    a3e4:	789b      	ldrb	r3, [r3, #2]
    a3e6:	2b00      	cmp	r3, #0
    a3e8:	d026      	beq.n	a438 <nrfx_timer_init+0x17c>
    a3ea:	68bb      	ldr	r3, [r7, #8]
    a3ec:	789b      	ldrb	r3, [r3, #2]
    a3ee:	2b02      	cmp	r3, #2
    a3f0:	d022      	beq.n	a438 <nrfx_timer_init+0x17c>
    a3f2:	68bb      	ldr	r3, [r7, #8]
    a3f4:	789b      	ldrb	r3, [r3, #2]
    a3f6:	2b03      	cmp	r3, #3
    a3f8:	d01e      	beq.n	a438 <nrfx_timer_init+0x17c>
    a3fa:	68fb      	ldr	r3, [r7, #12]
    a3fc:	681b      	ldr	r3, [r3, #0]
    a3fe:	4a61      	ldr	r2, [pc, #388]	; (a584 <nrfx_timer_init+0x2c8>)
    a400:	4293      	cmp	r3, r2
    a402:	d10f      	bne.n	a424 <nrfx_timer_init+0x168>
    a404:	68bb      	ldr	r3, [r7, #8]
    a406:	789b      	ldrb	r3, [r3, #2]
    a408:	2b01      	cmp	r3, #1
    a40a:	d015      	beq.n	a438 <nrfx_timer_init+0x17c>
    a40c:	68bb      	ldr	r3, [r7, #8]
    a40e:	789b      	ldrb	r3, [r3, #2]
    a410:	2b00      	cmp	r3, #0
    a412:	d011      	beq.n	a438 <nrfx_timer_init+0x17c>
    a414:	68bb      	ldr	r3, [r7, #8]
    a416:	789b      	ldrb	r3, [r3, #2]
    a418:	2b02      	cmp	r3, #2
    a41a:	d00d      	beq.n	a438 <nrfx_timer_init+0x17c>
    a41c:	68bb      	ldr	r3, [r7, #8]
    a41e:	789b      	ldrb	r3, [r3, #2]
    a420:	2b03      	cmp	r3, #3
    a422:	d009      	beq.n	a438 <nrfx_timer_init+0x17c>
    a424:	2361      	movs	r3, #97	; 0x61
    a426:	4a4d      	ldr	r2, [pc, #308]	; (a55c <nrfx_timer_init+0x2a0>)
    a428:	4957      	ldr	r1, [pc, #348]	; (a588 <nrfx_timer_init+0x2cc>)
    a42a:	484e      	ldr	r0, [pc, #312]	; (a564 <nrfx_timer_init+0x2a8>)
    a42c:	f005 fc22 	bl	fc74 <printk>
    a430:	2161      	movs	r1, #97	; 0x61
    a432:	484a      	ldr	r0, [pc, #296]	; (a55c <nrfx_timer_init+0x2a0>)
    a434:	f006 f87a 	bl	1052c <assert_post_action>

    p_cb->handler = timer_event_handler;
    a438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a43a:	687a      	ldr	r2, [r7, #4]
    a43c:	601a      	str	r2, [r3, #0]
    p_cb->context = p_config->p_context;
    a43e:	68bb      	ldr	r3, [r7, #8]
    a440:	685a      	ldr	r2, [r3, #4]
    a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a444:	605a      	str	r2, [r3, #4]

    uint8_t i;
    for (i = 0; i < p_instance->cc_channel_count; ++i)
    a446:	2300      	movs	r3, #0
    a448:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    a44c:	e010      	b.n	a470 <nrfx_timer_init+0x1b4>
    {
        nrf_timer_event_clear(p_instance->p_reg,
    a44e:	68fb      	ldr	r3, [r7, #12]
    a450:	681c      	ldr	r4, [r3, #0]
    a452:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    a456:	4618      	mov	r0, r3
    a458:	f00b f8fd 	bl	15656 <nrf_timer_compare_event_get>
    a45c:	4603      	mov	r3, r0
    a45e:	4619      	mov	r1, r3
    a460:	4620      	mov	r0, r4
    a462:	f00b f852 	bl	1550a <nrf_timer_event_clear>
    for (i = 0; i < p_instance->cc_channel_count; ++i)
    a466:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    a46a:	3301      	adds	r3, #1
    a46c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    a470:	68fb      	ldr	r3, [r7, #12]
    a472:	795b      	ldrb	r3, [r3, #5]
    a474:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
    a478:	429a      	cmp	r2, r3
    a47a:	d3e8      	bcc.n	a44e <nrfx_timer_init+0x192>
                              nrf_timer_compare_event_get(i));
    }

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
        p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    a47c:	68fb      	ldr	r3, [r7, #12]
    a47e:	681b      	ldr	r3, [r3, #0]
    a480:	4618      	mov	r0, r3
    a482:	f00b f81b 	bl	154bc <nrfx_get_irq_number>
    a486:	4603      	mov	r3, r0
    a488:	4618      	mov	r0, r3
    a48a:	f008 f924 	bl	126d6 <arch_irq_enable>

    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
    a48e:	68fb      	ldr	r3, [r7, #12]
    a490:	681a      	ldr	r2, [r3, #0]
    a492:	68bb      	ldr	r3, [r7, #8]
    a494:	785b      	ldrb	r3, [r3, #1]
    a496:	4619      	mov	r1, r3
    a498:	4610      	mov	r0, r2
    a49a:	f00b f86c 	bl	15576 <nrf_timer_mode_set>
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
    a49e:	68fb      	ldr	r3, [r7, #12]
    a4a0:	681a      	ldr	r2, [r3, #0]
    a4a2:	68bb      	ldr	r3, [r7, #8]
    a4a4:	789b      	ldrb	r3, [r3, #2]
    a4a6:	4619      	mov	r1, r3
    a4a8:	4610      	mov	r0, r2
    a4aa:	f00b f888 	bl	155be <nrf_timer_bit_width_set>
    nrf_timer_frequency_set(p_instance->p_reg, p_config->frequency);
    a4ae:	68fb      	ldr	r3, [r7, #12]
    a4b0:	681a      	ldr	r2, [r3, #0]
    a4b2:	68bb      	ldr	r3, [r7, #8]
    a4b4:	781b      	ldrb	r3, [r3, #0]
    a4b6:	4619      	mov	r1, r3
    a4b8:	4610      	mov	r0, r2
    a4ba:	f00b f897 	bl	155ec <nrf_timer_frequency_set>

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    a4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    a4c0:	2201      	movs	r2, #1
    a4c2:	721a      	strb	r2, [r3, #8]

    err_code = NRFX_SUCCESS;
    a4c4:	4b31      	ldr	r3, [pc, #196]	; (a58c <nrfx_timer_init+0x2d0>)
    a4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    NRFX_LOG_INFO("Function: %s, error code: %s.",
    a4c8:	2300      	movs	r3, #0
    a4ca:	2b02      	cmp	r3, #2
    a4cc:	d93e      	bls.n	a54c <nrfx_timer_init+0x290>
    a4ce:	f00b f8d0 	bl	15672 <k_is_user_context>
    a4d2:	4603      	mov	r3, r0
    a4d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    a4d8:	2300      	movs	r3, #0
    a4da:	61bb      	str	r3, [r7, #24]
    a4dc:	2300      	movs	r3, #0
    a4de:	2b00      	cmp	r3, #0
    a4e0:	d007      	beq.n	a4f2 <nrfx_timer_init+0x236>
    a4e2:	4b23      	ldr	r3, [pc, #140]	; (a570 <nrfx_timer_init+0x2b4>)
    a4e4:	681b      	ldr	r3, [r3, #0]
    a4e6:	4618      	mov	r0, r3
    a4e8:	f7ff fed8 	bl	a29c <log_const_source_id>
    a4ec:	4603      	mov	r3, r0
    a4ee:	b29b      	uxth	r3, r3
    a4f0:	e000      	b.n	a4f4 <nrfx_timer_init+0x238>
    a4f2:	2300      	movs	r3, #0
    a4f4:	853b      	strh	r3, [r7, #40]	; 0x28
    a4f6:	7d3b      	ldrb	r3, [r7, #20]
    a4f8:	2203      	movs	r2, #3
    a4fa:	f362 0302 	bfi	r3, r2, #0, #3
    a4fe:	753b      	strb	r3, [r7, #20]
    a500:	7d3b      	ldrb	r3, [r7, #20]
    a502:	f36f 03c5 	bfc	r3, #3, #3
    a506:	753b      	strb	r3, [r7, #20]
    a508:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
    a50a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    a50e:	b29a      	uxth	r2, r3
    a510:	8abb      	ldrh	r3, [r7, #20]
    a512:	f362 138f 	bfi	r3, r2, #6, #10
    a516:	82bb      	strh	r3, [r7, #20]
    a518:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    a51c:	2b00      	cmp	r3, #0
    a51e:	d009      	beq.n	a534 <nrfx_timer_init+0x278>
    a520:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    a522:	f7fe ffa5 	bl	9470 <nrfx_error_string_get>
    a526:	4603      	mov	r3, r0
    a528:	4a12      	ldr	r2, [pc, #72]	; (a574 <nrfx_timer_init+0x2b8>)
    a52a:	4913      	ldr	r1, [pc, #76]	; (a578 <nrfx_timer_init+0x2bc>)
    a52c:	8ab8      	ldrh	r0, [r7, #20]
    a52e:	f7f8 fba5 	bl	2c7c <log_from_user>
    a532:	e00c      	b.n	a54e <nrfx_timer_init+0x292>
    a534:	4c0f      	ldr	r4, [pc, #60]	; (a574 <nrfx_timer_init+0x2b8>)
    a536:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    a538:	f7fe ff9a 	bl	9470 <nrfx_error_string_get>
    a53c:	4603      	mov	r3, r0
    a53e:	461a      	mov	r2, r3
    a540:	8abb      	ldrh	r3, [r7, #20]
    a542:	4621      	mov	r1, r4
    a544:	480c      	ldr	r0, [pc, #48]	; (a578 <nrfx_timer_init+0x2bc>)
    a546:	f006 fcbe 	bl	10ec6 <log_2>
    a54a:	e000      	b.n	a54e <nrfx_timer_init+0x292>
    a54c:	bf00      	nop
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    a54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    a550:	4618      	mov	r0, r3
    a552:	373c      	adds	r7, #60	; 0x3c
    a554:	46bd      	mov	sp, r7
    a556:	bd90      	pop	{r4, r7, pc}
    a558:	20000bf4 	.word	0x20000bf4
    a55c:	00019290 	.word	0x00019290
    a560:	000192d0 	.word	0x000192d0
    a564:	000192dc 	.word	0x000192dc
    a568:	000192fc 	.word	0x000192fc
    a56c:	0bad0005 	.word	0x0bad0005
    a570:	20000bf0 	.word	0x20000bf0
    a574:	0001ad58 	.word	0x0001ad58
    a578:	00019310 	.word	0x00019310
    a57c:	5000f000 	.word	0x5000f000
    a580:	50010000 	.word	0x50010000
    a584:	50011000 	.word	0x50011000
    a588:	00019330 	.word	0x00019330
    a58c:	0bad0000 	.word	0x0bad0000

0000a590 <nrfx_timer_uninit>:

void nrfx_timer_uninit(nrfx_timer_t const * p_instance)
{
    a590:	b580      	push	{r7, lr}
    a592:	b086      	sub	sp, #24
    a594:	af00      	add	r7, sp, #0
    a596:	6078      	str	r0, [r7, #4]
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    a598:	687b      	ldr	r3, [r7, #4]
    a59a:	681b      	ldr	r3, [r3, #0]
    a59c:	4618      	mov	r0, r3
    a59e:	f00a ff8d 	bl	154bc <nrfx_get_irq_number>
    a5a2:	4603      	mov	r3, r0
    a5a4:	4618      	mov	r0, r3
    a5a6:	f008 f8a3 	bl	126f0 <arch_irq_disable>

    #define DISABLE_ALL UINT32_MAX
    nrf_timer_shorts_disable(p_instance->p_reg, DISABLE_ALL);
    a5aa:	687b      	ldr	r3, [r7, #4]
    a5ac:	681b      	ldr	r3, [r3, #0]
    a5ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a5b2:	4618      	mov	r0, r3
    a5b4:	f00a ffbe 	bl	15534 <nrf_timer_shorts_disable>
    nrf_timer_int_disable(p_instance->p_reg, DISABLE_ALL);
    a5b8:	687b      	ldr	r3, [r7, #4]
    a5ba:	681b      	ldr	r3, [r3, #0]
    a5bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a5c0:	4618      	mov	r0, r3
    a5c2:	f00a ffca 	bl	1555a <nrf_timer_int_disable>
    #undef DISABLE_ALL

    nrfx_timer_disable(p_instance);
    a5c6:	6878      	ldr	r0, [r7, #4]
    a5c8:	f000 f8ca 	bl	a760 <nrfx_timer_disable>

    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
    a5cc:	687b      	ldr	r3, [r7, #4]
    a5ce:	791b      	ldrb	r3, [r3, #4]
    a5d0:	4619      	mov	r1, r3
    a5d2:	4a24      	ldr	r2, [pc, #144]	; (a664 <nrfx_timer_uninit+0xd4>)
    a5d4:	460b      	mov	r3, r1
    a5d6:	005b      	lsls	r3, r3, #1
    a5d8:	440b      	add	r3, r1
    a5da:	009b      	lsls	r3, r3, #2
    a5dc:	4413      	add	r3, r2
    a5de:	3308      	adds	r3, #8
    a5e0:	2200      	movs	r2, #0
    a5e2:	701a      	strb	r2, [r3, #0]
    NRFX_LOG_INFO("Uninitialized instance: %d.", p_instance->instance_id);
    a5e4:	2300      	movs	r3, #0
    a5e6:	2b02      	cmp	r3, #2
    a5e8:	d801      	bhi.n	a5ee <nrfx_timer_uninit+0x5e>
    a5ea:	bf00      	nop
}
    a5ec:	e035      	b.n	a65a <nrfx_timer_uninit+0xca>
    NRFX_LOG_INFO("Uninitialized instance: %d.", p_instance->instance_id);
    a5ee:	f00b f840 	bl	15672 <k_is_user_context>
    a5f2:	4603      	mov	r3, r0
    a5f4:	75fb      	strb	r3, [r7, #23]
    a5f6:	2300      	movs	r3, #0
    a5f8:	613b      	str	r3, [r7, #16]
    a5fa:	2300      	movs	r3, #0
    a5fc:	2b00      	cmp	r3, #0
    a5fe:	d007      	beq.n	a610 <nrfx_timer_uninit+0x80>
    a600:	4b19      	ldr	r3, [pc, #100]	; (a668 <nrfx_timer_uninit+0xd8>)
    a602:	681b      	ldr	r3, [r3, #0]
    a604:	4618      	mov	r0, r3
    a606:	f7ff fe49 	bl	a29c <log_const_source_id>
    a60a:	4603      	mov	r3, r0
    a60c:	b29b      	uxth	r3, r3
    a60e:	e000      	b.n	a612 <nrfx_timer_uninit+0x82>
    a610:	2300      	movs	r3, #0
    a612:	82bb      	strh	r3, [r7, #20]
    a614:	7b3b      	ldrb	r3, [r7, #12]
    a616:	2203      	movs	r2, #3
    a618:	f362 0302 	bfi	r3, r2, #0, #3
    a61c:	733b      	strb	r3, [r7, #12]
    a61e:	7b3b      	ldrb	r3, [r7, #12]
    a620:	f36f 03c5 	bfc	r3, #3, #3
    a624:	733b      	strb	r3, [r7, #12]
    a626:	8abb      	ldrh	r3, [r7, #20]
    a628:	f3c3 0309 	ubfx	r3, r3, #0, #10
    a62c:	b29a      	uxth	r2, r3
    a62e:	89bb      	ldrh	r3, [r7, #12]
    a630:	f362 138f 	bfi	r3, r2, #6, #10
    a634:	81bb      	strh	r3, [r7, #12]
    a636:	7dfb      	ldrb	r3, [r7, #23]
    a638:	2b00      	cmp	r3, #0
    a63a:	d007      	beq.n	a64c <nrfx_timer_uninit+0xbc>
    a63c:	687b      	ldr	r3, [r7, #4]
    a63e:	791b      	ldrb	r3, [r3, #4]
    a640:	461a      	mov	r2, r3
    a642:	490a      	ldr	r1, [pc, #40]	; (a66c <nrfx_timer_uninit+0xdc>)
    a644:	89b8      	ldrh	r0, [r7, #12]
    a646:	f7f8 fb19 	bl	2c7c <log_from_user>
}
    a64a:	e006      	b.n	a65a <nrfx_timer_uninit+0xca>
    NRFX_LOG_INFO("Uninitialized instance: %d.", p_instance->instance_id);
    a64c:	687b      	ldr	r3, [r7, #4]
    a64e:	791b      	ldrb	r3, [r3, #4]
    a650:	89ba      	ldrh	r2, [r7, #12]
    a652:	4619      	mov	r1, r3
    a654:	4805      	ldr	r0, [pc, #20]	; (a66c <nrfx_timer_uninit+0xdc>)
    a656:	f006 fc1f 	bl	10e98 <log_1>
}
    a65a:	bf00      	nop
    a65c:	3718      	adds	r7, #24
    a65e:	46bd      	mov	sp, r7
    a660:	bd80      	pop	{r7, pc}
    a662:	bf00      	nop
    a664:	20000bf4 	.word	0x20000bf4
    a668:	20000bf0 	.word	0x20000bf0
    a66c:	00019a74 	.word	0x00019a74

0000a670 <nrfx_timer_enable>:

void nrfx_timer_enable(nrfx_timer_t const * p_instance)
{
    a670:	b580      	push	{r7, lr}
    a672:	b086      	sub	sp, #24
    a674:	af00      	add	r7, sp, #0
    a676:	6078      	str	r0, [r7, #4]
    NRFX_ASSERT(m_cb[p_instance->instance_id].state == NRFX_DRV_STATE_INITIALIZED);
    a678:	687b      	ldr	r3, [r7, #4]
    a67a:	791b      	ldrb	r3, [r3, #4]
    a67c:	4619      	mov	r1, r3
    a67e:	4a32      	ldr	r2, [pc, #200]	; (a748 <nrfx_timer_enable+0xd8>)
    a680:	460b      	mov	r3, r1
    a682:	005b      	lsls	r3, r3, #1
    a684:	440b      	add	r3, r1
    a686:	009b      	lsls	r3, r3, #2
    a688:	4413      	add	r3, r2
    a68a:	3308      	adds	r3, #8
    a68c:	781b      	ldrb	r3, [r3, #0]
    a68e:	2b01      	cmp	r3, #1
    a690:	d009      	beq.n	a6a6 <nrfx_timer_enable+0x36>
    a692:	238f      	movs	r3, #143	; 0x8f
    a694:	4a2d      	ldr	r2, [pc, #180]	; (a74c <nrfx_timer_enable+0xdc>)
    a696:	492e      	ldr	r1, [pc, #184]	; (a750 <nrfx_timer_enable+0xe0>)
    a698:	482e      	ldr	r0, [pc, #184]	; (a754 <nrfx_timer_enable+0xe4>)
    a69a:	f005 faeb 	bl	fc74 <printk>
    a69e:	218f      	movs	r1, #143	; 0x8f
    a6a0:	482a      	ldr	r0, [pc, #168]	; (a74c <nrfx_timer_enable+0xdc>)
    a6a2:	f005 ff43 	bl	1052c <assert_post_action>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_START);
    a6a6:	687b      	ldr	r3, [r7, #4]
    a6a8:	681b      	ldr	r3, [r3, #0]
    a6aa:	2100      	movs	r1, #0
    a6ac:	4618      	mov	r0, r3
    a6ae:	f00a ff1c 	bl	154ea <nrf_timer_task_trigger>
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_POWERED_ON;
    a6b2:	687b      	ldr	r3, [r7, #4]
    a6b4:	791b      	ldrb	r3, [r3, #4]
    a6b6:	4619      	mov	r1, r3
    a6b8:	4a23      	ldr	r2, [pc, #140]	; (a748 <nrfx_timer_enable+0xd8>)
    a6ba:	460b      	mov	r3, r1
    a6bc:	005b      	lsls	r3, r3, #1
    a6be:	440b      	add	r3, r1
    a6c0:	009b      	lsls	r3, r3, #2
    a6c2:	4413      	add	r3, r2
    a6c4:	3308      	adds	r3, #8
    a6c6:	2202      	movs	r2, #2
    a6c8:	701a      	strb	r2, [r3, #0]
    NRFX_LOG_INFO("Enabled instance: %d.", p_instance->instance_id);
    a6ca:	2300      	movs	r3, #0
    a6cc:	2b02      	cmp	r3, #2
    a6ce:	d801      	bhi.n	a6d4 <nrfx_timer_enable+0x64>
    a6d0:	bf00      	nop
}
    a6d2:	e035      	b.n	a740 <nrfx_timer_enable+0xd0>
    NRFX_LOG_INFO("Enabled instance: %d.", p_instance->instance_id);
    a6d4:	f00a ffcd 	bl	15672 <k_is_user_context>
    a6d8:	4603      	mov	r3, r0
    a6da:	75fb      	strb	r3, [r7, #23]
    a6dc:	2300      	movs	r3, #0
    a6de:	613b      	str	r3, [r7, #16]
    a6e0:	2300      	movs	r3, #0
    a6e2:	2b00      	cmp	r3, #0
    a6e4:	d007      	beq.n	a6f6 <nrfx_timer_enable+0x86>
    a6e6:	4b1c      	ldr	r3, [pc, #112]	; (a758 <nrfx_timer_enable+0xe8>)
    a6e8:	681b      	ldr	r3, [r3, #0]
    a6ea:	4618      	mov	r0, r3
    a6ec:	f7ff fdd6 	bl	a29c <log_const_source_id>
    a6f0:	4603      	mov	r3, r0
    a6f2:	b29b      	uxth	r3, r3
    a6f4:	e000      	b.n	a6f8 <nrfx_timer_enable+0x88>
    a6f6:	2300      	movs	r3, #0
    a6f8:	82bb      	strh	r3, [r7, #20]
    a6fa:	7b3b      	ldrb	r3, [r7, #12]
    a6fc:	2203      	movs	r2, #3
    a6fe:	f362 0302 	bfi	r3, r2, #0, #3
    a702:	733b      	strb	r3, [r7, #12]
    a704:	7b3b      	ldrb	r3, [r7, #12]
    a706:	f36f 03c5 	bfc	r3, #3, #3
    a70a:	733b      	strb	r3, [r7, #12]
    a70c:	8abb      	ldrh	r3, [r7, #20]
    a70e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    a712:	b29a      	uxth	r2, r3
    a714:	89bb      	ldrh	r3, [r7, #12]
    a716:	f362 138f 	bfi	r3, r2, #6, #10
    a71a:	81bb      	strh	r3, [r7, #12]
    a71c:	7dfb      	ldrb	r3, [r7, #23]
    a71e:	2b00      	cmp	r3, #0
    a720:	d007      	beq.n	a732 <nrfx_timer_enable+0xc2>
    a722:	687b      	ldr	r3, [r7, #4]
    a724:	791b      	ldrb	r3, [r3, #4]
    a726:	461a      	mov	r2, r3
    a728:	490c      	ldr	r1, [pc, #48]	; (a75c <nrfx_timer_enable+0xec>)
    a72a:	89b8      	ldrh	r0, [r7, #12]
    a72c:	f7f8 faa6 	bl	2c7c <log_from_user>
}
    a730:	e006      	b.n	a740 <nrfx_timer_enable+0xd0>
    NRFX_LOG_INFO("Enabled instance: %d.", p_instance->instance_id);
    a732:	687b      	ldr	r3, [r7, #4]
    a734:	791b      	ldrb	r3, [r3, #4]
    a736:	89ba      	ldrh	r2, [r7, #12]
    a738:	4619      	mov	r1, r3
    a73a:	4808      	ldr	r0, [pc, #32]	; (a75c <nrfx_timer_enable+0xec>)
    a73c:	f006 fbac 	bl	10e98 <log_1>
}
    a740:	bf00      	nop
    a742:	3718      	adds	r7, #24
    a744:	46bd      	mov	sp, r7
    a746:	bd80      	pop	{r7, pc}
    a748:	20000bf4 	.word	0x20000bf4
    a74c:	00019290 	.word	0x00019290
    a750:	00019a90 	.word	0x00019a90
    a754:	000192dc 	.word	0x000192dc
    a758:	20000bf0 	.word	0x20000bf0
    a75c:	00019ad4 	.word	0x00019ad4

0000a760 <nrfx_timer_disable>:

void nrfx_timer_disable(nrfx_timer_t const * p_instance)
{
    a760:	b580      	push	{r7, lr}
    a762:	b086      	sub	sp, #24
    a764:	af00      	add	r7, sp, #0
    a766:	6078      	str	r0, [r7, #4]
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    a768:	687b      	ldr	r3, [r7, #4]
    a76a:	791b      	ldrb	r3, [r3, #4]
    a76c:	4619      	mov	r1, r3
    a76e:	4a32      	ldr	r2, [pc, #200]	; (a838 <nrfx_timer_disable+0xd8>)
    a770:	460b      	mov	r3, r1
    a772:	005b      	lsls	r3, r3, #1
    a774:	440b      	add	r3, r1
    a776:	009b      	lsls	r3, r3, #2
    a778:	4413      	add	r3, r2
    a77a:	3308      	adds	r3, #8
    a77c:	781b      	ldrb	r3, [r3, #0]
    a77e:	2b00      	cmp	r3, #0
    a780:	d109      	bne.n	a796 <nrfx_timer_disable+0x36>
    a782:	2397      	movs	r3, #151	; 0x97
    a784:	4a2d      	ldr	r2, [pc, #180]	; (a83c <nrfx_timer_disable+0xdc>)
    a786:	492e      	ldr	r1, [pc, #184]	; (a840 <nrfx_timer_disable+0xe0>)
    a788:	482e      	ldr	r0, [pc, #184]	; (a844 <nrfx_timer_disable+0xe4>)
    a78a:	f005 fa73 	bl	fc74 <printk>
    a78e:	2197      	movs	r1, #151	; 0x97
    a790:	482a      	ldr	r0, [pc, #168]	; (a83c <nrfx_timer_disable+0xdc>)
    a792:	f005 fecb 	bl	1052c <assert_post_action>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
    a796:	687b      	ldr	r3, [r7, #4]
    a798:	681b      	ldr	r3, [r3, #0]
    a79a:	2110      	movs	r1, #16
    a79c:	4618      	mov	r0, r3
    a79e:	f00a fea4 	bl	154ea <nrf_timer_task_trigger>
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
    a7a2:	687b      	ldr	r3, [r7, #4]
    a7a4:	791b      	ldrb	r3, [r3, #4]
    a7a6:	4619      	mov	r1, r3
    a7a8:	4a23      	ldr	r2, [pc, #140]	; (a838 <nrfx_timer_disable+0xd8>)
    a7aa:	460b      	mov	r3, r1
    a7ac:	005b      	lsls	r3, r3, #1
    a7ae:	440b      	add	r3, r1
    a7b0:	009b      	lsls	r3, r3, #2
    a7b2:	4413      	add	r3, r2
    a7b4:	3308      	adds	r3, #8
    a7b6:	2201      	movs	r2, #1
    a7b8:	701a      	strb	r2, [r3, #0]
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
    a7ba:	2300      	movs	r3, #0
    a7bc:	2b02      	cmp	r3, #2
    a7be:	d801      	bhi.n	a7c4 <nrfx_timer_disable+0x64>
    a7c0:	bf00      	nop
}
    a7c2:	e035      	b.n	a830 <nrfx_timer_disable+0xd0>
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
    a7c4:	f00a ff55 	bl	15672 <k_is_user_context>
    a7c8:	4603      	mov	r3, r0
    a7ca:	75fb      	strb	r3, [r7, #23]
    a7cc:	2300      	movs	r3, #0
    a7ce:	613b      	str	r3, [r7, #16]
    a7d0:	2300      	movs	r3, #0
    a7d2:	2b00      	cmp	r3, #0
    a7d4:	d007      	beq.n	a7e6 <nrfx_timer_disable+0x86>
    a7d6:	4b1c      	ldr	r3, [pc, #112]	; (a848 <nrfx_timer_disable+0xe8>)
    a7d8:	681b      	ldr	r3, [r3, #0]
    a7da:	4618      	mov	r0, r3
    a7dc:	f7ff fd5e 	bl	a29c <log_const_source_id>
    a7e0:	4603      	mov	r3, r0
    a7e2:	b29b      	uxth	r3, r3
    a7e4:	e000      	b.n	a7e8 <nrfx_timer_disable+0x88>
    a7e6:	2300      	movs	r3, #0
    a7e8:	82bb      	strh	r3, [r7, #20]
    a7ea:	7b3b      	ldrb	r3, [r7, #12]
    a7ec:	2203      	movs	r2, #3
    a7ee:	f362 0302 	bfi	r3, r2, #0, #3
    a7f2:	733b      	strb	r3, [r7, #12]
    a7f4:	7b3b      	ldrb	r3, [r7, #12]
    a7f6:	f36f 03c5 	bfc	r3, #3, #3
    a7fa:	733b      	strb	r3, [r7, #12]
    a7fc:	8abb      	ldrh	r3, [r7, #20]
    a7fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
    a802:	b29a      	uxth	r2, r3
    a804:	89bb      	ldrh	r3, [r7, #12]
    a806:	f362 138f 	bfi	r3, r2, #6, #10
    a80a:	81bb      	strh	r3, [r7, #12]
    a80c:	7dfb      	ldrb	r3, [r7, #23]
    a80e:	2b00      	cmp	r3, #0
    a810:	d007      	beq.n	a822 <nrfx_timer_disable+0xc2>
    a812:	687b      	ldr	r3, [r7, #4]
    a814:	791b      	ldrb	r3, [r3, #4]
    a816:	461a      	mov	r2, r3
    a818:	490c      	ldr	r1, [pc, #48]	; (a84c <nrfx_timer_disable+0xec>)
    a81a:	89b8      	ldrh	r0, [r7, #12]
    a81c:	f7f8 fa2e 	bl	2c7c <log_from_user>
}
    a820:	e006      	b.n	a830 <nrfx_timer_disable+0xd0>
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
    a822:	687b      	ldr	r3, [r7, #4]
    a824:	791b      	ldrb	r3, [r3, #4]
    a826:	89ba      	ldrh	r2, [r7, #12]
    a828:	4619      	mov	r1, r3
    a82a:	4808      	ldr	r0, [pc, #32]	; (a84c <nrfx_timer_disable+0xec>)
    a82c:	f006 fb34 	bl	10e98 <log_1>
}
    a830:	bf00      	nop
    a832:	3718      	adds	r7, #24
    a834:	46bd      	mov	sp, r7
    a836:	bd80      	pop	{r7, pc}
    a838:	20000bf4 	.word	0x20000bf4
    a83c:	00019290 	.word	0x00019290
    a840:	00019aec 	.word	0x00019aec
    a844:	000192dc 	.word	0x000192dc
    a848:	20000bf0 	.word	0x20000bf0
    a84c:	00019b30 	.word	0x00019b30

0000a850 <nrfx_timer_clear>:
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_STOP);
    NRFX_LOG_INFO("Paused instance: %d.", p_instance->instance_id);
}

void nrfx_timer_clear(nrfx_timer_t const * p_instance)
{
    a850:	b580      	push	{r7, lr}
    a852:	b082      	sub	sp, #8
    a854:	af00      	add	r7, sp, #0
    a856:	6078      	str	r0, [r7, #4]
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    a858:	687b      	ldr	r3, [r7, #4]
    a85a:	791b      	ldrb	r3, [r3, #4]
    a85c:	4619      	mov	r1, r3
    a85e:	4a0f      	ldr	r2, [pc, #60]	; (a89c <nrfx_timer_clear+0x4c>)
    a860:	460b      	mov	r3, r1
    a862:	005b      	lsls	r3, r3, #1
    a864:	440b      	add	r3, r1
    a866:	009b      	lsls	r3, r3, #2
    a868:	4413      	add	r3, r2
    a86a:	3308      	adds	r3, #8
    a86c:	781b      	ldrb	r3, [r3, #0]
    a86e:	2b00      	cmp	r3, #0
    a870:	d109      	bne.n	a886 <nrfx_timer_clear+0x36>
    a872:	23b3      	movs	r3, #179	; 0xb3
    a874:	4a0a      	ldr	r2, [pc, #40]	; (a8a0 <nrfx_timer_clear+0x50>)
    a876:	490b      	ldr	r1, [pc, #44]	; (a8a4 <nrfx_timer_clear+0x54>)
    a878:	480b      	ldr	r0, [pc, #44]	; (a8a8 <nrfx_timer_clear+0x58>)
    a87a:	f005 f9fb 	bl	fc74 <printk>
    a87e:	21b3      	movs	r1, #179	; 0xb3
    a880:	4807      	ldr	r0, [pc, #28]	; (a8a0 <nrfx_timer_clear+0x50>)
    a882:	f005 fe53 	bl	1052c <assert_post_action>
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_CLEAR);
    a886:	687b      	ldr	r3, [r7, #4]
    a888:	681b      	ldr	r3, [r3, #0]
    a88a:	210c      	movs	r1, #12
    a88c:	4618      	mov	r0, r3
    a88e:	f00a fe2c 	bl	154ea <nrf_timer_task_trigger>
}
    a892:	bf00      	nop
    a894:	3708      	adds	r7, #8
    a896:	46bd      	mov	sp, r7
    a898:	bd80      	pop	{r7, pc}
    a89a:	bf00      	nop
    a89c:	20000bf4 	.word	0x20000bf4
    a8a0:	00019290 	.word	0x00019290
    a8a4:	00019aec 	.word	0x00019aec
    a8a8:	000192dc 	.word	0x000192dc

0000a8ac <nrfx_timer_increment>:

void nrfx_timer_increment(nrfx_timer_t const * p_instance)
{
    a8ac:	b580      	push	{r7, lr}
    a8ae:	b082      	sub	sp, #8
    a8b0:	af00      	add	r7, sp, #0
    a8b2:	6078      	str	r0, [r7, #4]
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    a8b4:	687b      	ldr	r3, [r7, #4]
    a8b6:	791b      	ldrb	r3, [r3, #4]
    a8b8:	4619      	mov	r1, r3
    a8ba:	4a18      	ldr	r2, [pc, #96]	; (a91c <nrfx_timer_increment+0x70>)
    a8bc:	460b      	mov	r3, r1
    a8be:	005b      	lsls	r3, r3, #1
    a8c0:	440b      	add	r3, r1
    a8c2:	009b      	lsls	r3, r3, #2
    a8c4:	4413      	add	r3, r2
    a8c6:	3308      	adds	r3, #8
    a8c8:	781b      	ldrb	r3, [r3, #0]
    a8ca:	2b00      	cmp	r3, #0
    a8cc:	d109      	bne.n	a8e2 <nrfx_timer_increment+0x36>
    a8ce:	23b9      	movs	r3, #185	; 0xb9
    a8d0:	4a13      	ldr	r2, [pc, #76]	; (a920 <nrfx_timer_increment+0x74>)
    a8d2:	4914      	ldr	r1, [pc, #80]	; (a924 <nrfx_timer_increment+0x78>)
    a8d4:	4814      	ldr	r0, [pc, #80]	; (a928 <nrfx_timer_increment+0x7c>)
    a8d6:	f005 f9cd 	bl	fc74 <printk>
    a8da:	21b9      	movs	r1, #185	; 0xb9
    a8dc:	4810      	ldr	r0, [pc, #64]	; (a920 <nrfx_timer_increment+0x74>)
    a8de:	f005 fe25 	bl	1052c <assert_post_action>
    NRFX_ASSERT(nrf_timer_mode_get(p_instance->p_reg) != NRF_TIMER_MODE_TIMER);
    a8e2:	687b      	ldr	r3, [r7, #4]
    a8e4:	681b      	ldr	r3, [r3, #0]
    a8e6:	4618      	mov	r0, r3
    a8e8:	f00a fe5c 	bl	155a4 <nrf_timer_mode_get>
    a8ec:	4603      	mov	r3, r0
    a8ee:	2b00      	cmp	r3, #0
    a8f0:	d109      	bne.n	a906 <nrfx_timer_increment+0x5a>
    a8f2:	23ba      	movs	r3, #186	; 0xba
    a8f4:	4a0a      	ldr	r2, [pc, #40]	; (a920 <nrfx_timer_increment+0x74>)
    a8f6:	490d      	ldr	r1, [pc, #52]	; (a92c <nrfx_timer_increment+0x80>)
    a8f8:	480b      	ldr	r0, [pc, #44]	; (a928 <nrfx_timer_increment+0x7c>)
    a8fa:	f005 f9bb 	bl	fc74 <printk>
    a8fe:	21ba      	movs	r1, #186	; 0xba
    a900:	4807      	ldr	r0, [pc, #28]	; (a920 <nrfx_timer_increment+0x74>)
    a902:	f005 fe13 	bl	1052c <assert_post_action>

    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_COUNT);
    a906:	687b      	ldr	r3, [r7, #4]
    a908:	681b      	ldr	r3, [r3, #0]
    a90a:	2108      	movs	r1, #8
    a90c:	4618      	mov	r0, r3
    a90e:	f00a fdec 	bl	154ea <nrf_timer_task_trigger>
}
    a912:	bf00      	nop
    a914:	3708      	adds	r7, #8
    a916:	46bd      	mov	sp, r7
    a918:	bd80      	pop	{r7, pc}
    a91a:	bf00      	nop
    a91c:	20000bf4 	.word	0x20000bf4
    a920:	00019290 	.word	0x00019290
    a924:	00019aec 	.word	0x00019aec
    a928:	000192dc 	.word	0x000192dc
    a92c:	00019b78 	.word	0x00019b78

0000a930 <nrfx_timer_capture>:

uint32_t nrfx_timer_capture(nrfx_timer_t const *   p_instance,
                            nrf_timer_cc_channel_t cc_channel)
{
    a930:	b590      	push	{r4, r7, lr}
    a932:	b083      	sub	sp, #12
    a934:	af00      	add	r7, sp, #0
    a936:	6078      	str	r0, [r7, #4]
    a938:	460b      	mov	r3, r1
    a93a:	70fb      	strb	r3, [r7, #3]
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    a93c:	687b      	ldr	r3, [r7, #4]
    a93e:	791b      	ldrb	r3, [r3, #4]
    a940:	4619      	mov	r1, r3
    a942:	4a1d      	ldr	r2, [pc, #116]	; (a9b8 <nrfx_timer_capture+0x88>)
    a944:	460b      	mov	r3, r1
    a946:	005b      	lsls	r3, r3, #1
    a948:	440b      	add	r3, r1
    a94a:	009b      	lsls	r3, r3, #2
    a94c:	4413      	add	r3, r2
    a94e:	3308      	adds	r3, #8
    a950:	781b      	ldrb	r3, [r3, #0]
    a952:	2b00      	cmp	r3, #0
    a954:	d109      	bne.n	a96a <nrfx_timer_capture+0x3a>
    a956:	23c2      	movs	r3, #194	; 0xc2
    a958:	4a18      	ldr	r2, [pc, #96]	; (a9bc <nrfx_timer_capture+0x8c>)
    a95a:	4919      	ldr	r1, [pc, #100]	; (a9c0 <nrfx_timer_capture+0x90>)
    a95c:	4819      	ldr	r0, [pc, #100]	; (a9c4 <nrfx_timer_capture+0x94>)
    a95e:	f005 f989 	bl	fc74 <printk>
    a962:	21c2      	movs	r1, #194	; 0xc2
    a964:	4815      	ldr	r0, [pc, #84]	; (a9bc <nrfx_timer_capture+0x8c>)
    a966:	f005 fde1 	bl	1052c <assert_post_action>
    NRFX_ASSERT(cc_channel < p_instance->cc_channel_count);
    a96a:	687b      	ldr	r3, [r7, #4]
    a96c:	795b      	ldrb	r3, [r3, #5]
    a96e:	78fa      	ldrb	r2, [r7, #3]
    a970:	429a      	cmp	r2, r3
    a972:	d309      	bcc.n	a988 <nrfx_timer_capture+0x58>
    a974:	23c3      	movs	r3, #195	; 0xc3
    a976:	4a11      	ldr	r2, [pc, #68]	; (a9bc <nrfx_timer_capture+0x8c>)
    a978:	4913      	ldr	r1, [pc, #76]	; (a9c8 <nrfx_timer_capture+0x98>)
    a97a:	4812      	ldr	r0, [pc, #72]	; (a9c4 <nrfx_timer_capture+0x94>)
    a97c:	f005 f97a 	bl	fc74 <printk>
    a980:	21c3      	movs	r1, #195	; 0xc3
    a982:	480e      	ldr	r0, [pc, #56]	; (a9bc <nrfx_timer_capture+0x8c>)
    a984:	f005 fdd2 	bl	1052c <assert_post_action>

    nrf_timer_task_trigger(p_instance->p_reg,
    a988:	687b      	ldr	r3, [r7, #4]
    a98a:	681c      	ldr	r4, [r3, #0]
    a98c:	78fb      	ldrb	r3, [r7, #3]
    a98e:	4618      	mov	r0, r3
    a990:	f00a fe54 	bl	1563c <nrf_timer_capture_task_get>
    a994:	4603      	mov	r3, r0
    a996:	4619      	mov	r1, r3
    a998:	4620      	mov	r0, r4
    a99a:	f00a fda6 	bl	154ea <nrf_timer_task_trigger>
        nrf_timer_capture_task_get(cc_channel));
    return nrf_timer_cc_get(p_instance->p_reg, cc_channel);
    a99e:	687b      	ldr	r3, [r7, #4]
    a9a0:	681b      	ldr	r3, [r3, #0]
    a9a2:	78fa      	ldrb	r2, [r7, #3]
    a9a4:	4611      	mov	r1, r2
    a9a6:	4618      	mov	r0, r3
    a9a8:	f00a fe37 	bl	1561a <nrf_timer_cc_get>
    a9ac:	4603      	mov	r3, r0
}
    a9ae:	4618      	mov	r0, r3
    a9b0:	370c      	adds	r7, #12
    a9b2:	46bd      	mov	sp, r7
    a9b4:	bd90      	pop	{r4, r7, pc}
    a9b6:	bf00      	nop
    a9b8:	20000bf4 	.word	0x20000bf4
    a9bc:	00019290 	.word	0x00019290
    a9c0:	00019aec 	.word	0x00019aec
    a9c4:	000192dc 	.word	0x000192dc
    a9c8:	00019bb8 	.word	0x00019bb8

0000a9cc <z_device_state_init>:
 *
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
    a9cc:	b580      	push	{r7, lr}
    a9ce:	b082      	sub	sp, #8
    a9d0:	af00      	add	r7, sp, #0
	const struct device *dev = __device_start;
    a9d2:	4b0a      	ldr	r3, [pc, #40]	; (a9fc <z_device_state_init+0x30>)
    a9d4:	607b      	str	r3, [r7, #4]

	while (dev < __device_end) {
    a9d6:	e008      	b.n	a9ea <z_device_state_init+0x1e>
		device_pm_state_init(dev);
    a9d8:	6878      	ldr	r0, [r7, #4]
    a9da:	f00a fe5a 	bl	15692 <device_pm_state_init>
		z_object_init(dev);
    a9de:	6878      	ldr	r0, [r7, #4]
    a9e0:	f00a fe4e 	bl	15680 <z_object_init>
		++dev;
    a9e4:	687b      	ldr	r3, [r7, #4]
    a9e6:	3318      	adds	r3, #24
    a9e8:	607b      	str	r3, [r7, #4]
	while (dev < __device_end) {
    a9ea:	687b      	ldr	r3, [r7, #4]
    a9ec:	4a04      	ldr	r2, [pc, #16]	; (aa00 <z_device_state_init+0x34>)
    a9ee:	4293      	cmp	r3, r2
    a9f0:	d3f2      	bcc.n	a9d8 <z_device_state_init+0xc>
	}
}
    a9f2:	bf00      	nop
    a9f4:	bf00      	nop
    a9f6:	3708      	adds	r7, #8
    a9f8:	46bd      	mov	sp, r7
    a9fa:	bd80      	pop	{r7, pc}
    a9fc:	00016e3c 	.word	0x00016e3c
    aa00:	00016eb4 	.word	0x00016eb4

0000aa04 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    aa04:	b580      	push	{r7, lr}
    aa06:	b086      	sub	sp, #24
    aa08:	af00      	add	r7, sp, #0
    aa0a:	6078      	str	r0, [r7, #4]
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    aa0c:	4a1c      	ldr	r2, [pc, #112]	; (aa80 <z_sys_init_run_level+0x7c>)
    aa0e:	687b      	ldr	r3, [r7, #4]
    aa10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa14:	617b      	str	r3, [r7, #20]
    aa16:	e026      	b.n	aa66 <z_sys_init_run_level+0x62>
		const struct device *dev = entry->dev;
    aa18:	697b      	ldr	r3, [r7, #20]
    aa1a:	685b      	ldr	r3, [r3, #4]
    aa1c:	60fb      	str	r3, [r7, #12]
		int rc = entry->init(dev);
    aa1e:	697b      	ldr	r3, [r7, #20]
    aa20:	681b      	ldr	r3, [r3, #0]
    aa22:	68f8      	ldr	r0, [r7, #12]
    aa24:	4798      	blx	r3
    aa26:	6138      	str	r0, [r7, #16]

		if (dev != NULL) {
    aa28:	68fb      	ldr	r3, [r7, #12]
    aa2a:	2b00      	cmp	r3, #0
    aa2c:	d018      	beq.n	aa60 <z_sys_init_run_level+0x5c>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
    aa2e:	693b      	ldr	r3, [r7, #16]
    aa30:	2b00      	cmp	r3, #0
    aa32:	d00f      	beq.n	aa54 <z_sys_init_run_level+0x50>
				if (rc < 0) {
    aa34:	693b      	ldr	r3, [r7, #16]
    aa36:	2b00      	cmp	r3, #0
    aa38:	da02      	bge.n	aa40 <z_sys_init_run_level+0x3c>
					rc = -rc;
    aa3a:	693b      	ldr	r3, [r7, #16]
    aa3c:	425b      	negs	r3, r3
    aa3e:	613b      	str	r3, [r7, #16]
				}
				if (rc > UINT8_MAX) {
    aa40:	693b      	ldr	r3, [r7, #16]
    aa42:	2bff      	cmp	r3, #255	; 0xff
    aa44:	dd01      	ble.n	aa4a <z_sys_init_run_level+0x46>
					rc = UINT8_MAX;
    aa46:	23ff      	movs	r3, #255	; 0xff
    aa48:	613b      	str	r3, [r7, #16]
				}
				dev->state->init_res = rc;
    aa4a:	68fb      	ldr	r3, [r7, #12]
    aa4c:	68db      	ldr	r3, [r3, #12]
    aa4e:	693a      	ldr	r2, [r7, #16]
    aa50:	b2d2      	uxtb	r2, r2
    aa52:	701a      	strb	r2, [r3, #0]
			}
			dev->state->initialized = true;
    aa54:	68fb      	ldr	r3, [r7, #12]
    aa56:	68da      	ldr	r2, [r3, #12]
    aa58:	7853      	ldrb	r3, [r2, #1]
    aa5a:	f043 0301 	orr.w	r3, r3, #1
    aa5e:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    aa60:	697b      	ldr	r3, [r7, #20]
    aa62:	3308      	adds	r3, #8
    aa64:	617b      	str	r3, [r7, #20]
    aa66:	687b      	ldr	r3, [r7, #4]
    aa68:	3301      	adds	r3, #1
    aa6a:	4a05      	ldr	r2, [pc, #20]	; (aa80 <z_sys_init_run_level+0x7c>)
    aa6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aa70:	697a      	ldr	r2, [r7, #20]
    aa72:	429a      	cmp	r2, r3
    aa74:	d3d0      	bcc.n	aa18 <z_sys_init_run_level+0x14>
		}
	}
}
    aa76:	bf00      	nop
    aa78:	bf00      	nop
    aa7a:	3718      	adds	r7, #24
    aa7c:	46bd      	mov	sp, r7
    aa7e:	bd80      	pop	{r7, pc}
    aa80:	20000154 	.word	0x20000154

0000aa84 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    aa84:	b580      	push	{r7, lr}
    aa86:	b084      	sub	sp, #16
    aa88:	af00      	add	r7, sp, #0
    aa8a:	6078      	str	r0, [r7, #4]
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    aa8c:	687b      	ldr	r3, [r7, #4]
    aa8e:	2b00      	cmp	r3, #0
    aa90:	d003      	beq.n	aa9a <z_impl_device_get_binding+0x16>
    aa92:	687b      	ldr	r3, [r7, #4]
    aa94:	781b      	ldrb	r3, [r3, #0]
    aa96:	2b00      	cmp	r3, #0
    aa98:	d101      	bne.n	aa9e <z_impl_device_get_binding+0x1a>
		return NULL;
    aa9a:	2300      	movs	r3, #0
    aa9c:	e032      	b.n	ab04 <z_impl_device_get_binding+0x80>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    aa9e:	4b1b      	ldr	r3, [pc, #108]	; (ab0c <z_impl_device_get_binding+0x88>)
    aaa0:	60fb      	str	r3, [r7, #12]
    aaa2:	e00f      	b.n	aac4 <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
    aaa4:	68f8      	ldr	r0, [r7, #12]
    aaa6:	f00a fdfd 	bl	156a4 <z_device_ready>
    aaaa:	4603      	mov	r3, r0
    aaac:	2b00      	cmp	r3, #0
    aaae:	d006      	beq.n	aabe <z_impl_device_get_binding+0x3a>
    aab0:	68fb      	ldr	r3, [r7, #12]
    aab2:	681b      	ldr	r3, [r3, #0]
    aab4:	687a      	ldr	r2, [r7, #4]
    aab6:	429a      	cmp	r2, r3
    aab8:	d101      	bne.n	aabe <z_impl_device_get_binding+0x3a>
			return dev;
    aaba:	68fb      	ldr	r3, [r7, #12]
    aabc:	e022      	b.n	ab04 <z_impl_device_get_binding+0x80>
	for (dev = __device_start; dev != __device_end; dev++) {
    aabe:	68fb      	ldr	r3, [r7, #12]
    aac0:	3318      	adds	r3, #24
    aac2:	60fb      	str	r3, [r7, #12]
    aac4:	68fb      	ldr	r3, [r7, #12]
    aac6:	4a12      	ldr	r2, [pc, #72]	; (ab10 <z_impl_device_get_binding+0x8c>)
    aac8:	4293      	cmp	r3, r2
    aaca:	d1eb      	bne.n	aaa4 <z_impl_device_get_binding+0x20>
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    aacc:	4b0f      	ldr	r3, [pc, #60]	; (ab0c <z_impl_device_get_binding+0x88>)
    aace:	60fb      	str	r3, [r7, #12]
    aad0:	e013      	b.n	aafa <z_impl_device_get_binding+0x76>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    aad2:	68f8      	ldr	r0, [r7, #12]
    aad4:	f00a fde6 	bl	156a4 <z_device_ready>
    aad8:	4603      	mov	r3, r0
    aada:	2b00      	cmp	r3, #0
    aadc:	d00a      	beq.n	aaf4 <z_impl_device_get_binding+0x70>
    aade:	68fb      	ldr	r3, [r7, #12]
    aae0:	681b      	ldr	r3, [r3, #0]
    aae2:	4619      	mov	r1, r3
    aae4:	6878      	ldr	r0, [r7, #4]
    aae6:	f007 ffc1 	bl	12a6c <strcmp>
    aaea:	4603      	mov	r3, r0
    aaec:	2b00      	cmp	r3, #0
    aaee:	d101      	bne.n	aaf4 <z_impl_device_get_binding+0x70>
			return dev;
    aaf0:	68fb      	ldr	r3, [r7, #12]
    aaf2:	e007      	b.n	ab04 <z_impl_device_get_binding+0x80>
	for (dev = __device_start; dev != __device_end; dev++) {
    aaf4:	68fb      	ldr	r3, [r7, #12]
    aaf6:	3318      	adds	r3, #24
    aaf8:	60fb      	str	r3, [r7, #12]
    aafa:	68fb      	ldr	r3, [r7, #12]
    aafc:	4a04      	ldr	r2, [pc, #16]	; (ab10 <z_impl_device_get_binding+0x8c>)
    aafe:	4293      	cmp	r3, r2
    ab00:	d1e7      	bne.n	aad2 <z_impl_device_get_binding+0x4e>
		}
	}

	return NULL;
    ab02:	2300      	movs	r3, #0
}
    ab04:	4618      	mov	r0, r3
    ab06:	3710      	adds	r7, #16
    ab08:	46bd      	mov	sp, r7
    ab0a:	bd80      	pop	{r7, pc}
    ab0c:	00016e3c 	.word	0x00016e3c
    ab10:	00016eb4 	.word	0x00016eb4

0000ab14 <log_const_source_id>:
{
    ab14:	b480      	push	{r7}
    ab16:	b083      	sub	sp, #12
    ab18:	af00      	add	r7, sp, #0
    ab1a:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    ab1c:	687b      	ldr	r3, [r7, #4]
    ab1e:	4a04      	ldr	r2, [pc, #16]	; (ab30 <log_const_source_id+0x1c>)
    ab20:	1a9b      	subs	r3, r3, r2
    ab22:	08db      	lsrs	r3, r3, #3
}
    ab24:	4618      	mov	r0, r3
    ab26:	370c      	adds	r7, #12
    ab28:	46bd      	mov	sp, r7
    ab2a:	bc80      	pop	{r7}
    ab2c:	4770      	bx	lr
    ab2e:	bf00      	nop
    ab30:	000170bc 	.word	0x000170bc

0000ab34 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    ab34:	b580      	push	{r7, lr}
    ab36:	b086      	sub	sp, #24
    ab38:	af00      	add	r7, sp, #0
    ab3a:	6078      	str	r0, [r7, #4]
    ab3c:	6039      	str	r1, [r7, #0]
	ARG_UNUSED(esf);

	LOG_PANIC();
    ab3e:	f00a fdeb 	bl	15718 <log_panic>
	LOG_ERR("Halting system");
    ab42:	2303      	movs	r3, #3
    ab44:	2b00      	cmp	r3, #0
    ab46:	d030      	beq.n	abaa <k_sys_fatal_error_handler+0x76>
    ab48:	f00a fdcd 	bl	156e6 <k_is_user_context>
    ab4c:	4603      	mov	r3, r0
    ab4e:	75fb      	strb	r3, [r7, #23]
    ab50:	2300      	movs	r3, #0
    ab52:	613b      	str	r3, [r7, #16]
    ab54:	2303      	movs	r3, #3
    ab56:	2b00      	cmp	r3, #0
    ab58:	d007      	beq.n	ab6a <k_sys_fatal_error_handler+0x36>
    ab5a:	4b16      	ldr	r3, [pc, #88]	; (abb4 <k_sys_fatal_error_handler+0x80>)
    ab5c:	681b      	ldr	r3, [r3, #0]
    ab5e:	4618      	mov	r0, r3
    ab60:	f7ff ffd8 	bl	ab14 <log_const_source_id>
    ab64:	4603      	mov	r3, r0
    ab66:	b29b      	uxth	r3, r3
    ab68:	e000      	b.n	ab6c <k_sys_fatal_error_handler+0x38>
    ab6a:	2300      	movs	r3, #0
    ab6c:	82bb      	strh	r3, [r7, #20]
    ab6e:	7b3b      	ldrb	r3, [r7, #12]
    ab70:	2201      	movs	r2, #1
    ab72:	f362 0302 	bfi	r3, r2, #0, #3
    ab76:	733b      	strb	r3, [r7, #12]
    ab78:	7b3b      	ldrb	r3, [r7, #12]
    ab7a:	f36f 03c5 	bfc	r3, #3, #3
    ab7e:	733b      	strb	r3, [r7, #12]
    ab80:	8abb      	ldrh	r3, [r7, #20]
    ab82:	f3c3 0309 	ubfx	r3, r3, #0, #10
    ab86:	b29a      	uxth	r2, r3
    ab88:	89bb      	ldrh	r3, [r7, #12]
    ab8a:	f362 138f 	bfi	r3, r2, #6, #10
    ab8e:	81bb      	strh	r3, [r7, #12]
    ab90:	7dfb      	ldrb	r3, [r7, #23]
    ab92:	2b00      	cmp	r3, #0
    ab94:	d004      	beq.n	aba0 <k_sys_fatal_error_handler+0x6c>
    ab96:	4908      	ldr	r1, [pc, #32]	; (abb8 <k_sys_fatal_error_handler+0x84>)
    ab98:	89b8      	ldrh	r0, [r7, #12]
    ab9a:	f7f8 f86f 	bl	2c7c <log_from_user>
    ab9e:	e005      	b.n	abac <k_sys_fatal_error_handler+0x78>
    aba0:	89b9      	ldrh	r1, [r7, #12]
    aba2:	4805      	ldr	r0, [pc, #20]	; (abb8 <k_sys_fatal_error_handler+0x84>)
    aba4:	f006 f963 	bl	10e6e <log_0>
    aba8:	e000      	b.n	abac <k_sys_fatal_error_handler+0x78>
    abaa:	bf00      	nop
	arch_system_halt(reason);
    abac:	6878      	ldr	r0, [r7, #4]
    abae:	f00a fdd0 	bl	15752 <arch_system_halt>
    abb2:	bf00      	nop
    abb4:	20000168 	.word	0x20000168
    abb8:	00019c60 	.word	0x00019c60

0000abbc <thread_name_get>:
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
}
/* LCOV_EXCL_STOP */

static const char *thread_name_get(struct k_thread *thread)
{
    abbc:	b580      	push	{r7, lr}
    abbe:	b084      	sub	sp, #16
    abc0:	af00      	add	r7, sp, #0
    abc2:	6078      	str	r0, [r7, #4]
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    abc4:	687b      	ldr	r3, [r7, #4]
    abc6:	2b00      	cmp	r3, #0
    abc8:	d004      	beq.n	abd4 <thread_name_get+0x18>
    abca:	6878      	ldr	r0, [r7, #4]
    abcc:	f00b f82a 	bl	15c24 <k_thread_name_get>
    abd0:	4603      	mov	r3, r0
    abd2:	e000      	b.n	abd6 <thread_name_get+0x1a>
    abd4:	2300      	movs	r3, #0
    abd6:	60fb      	str	r3, [r7, #12]

	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    abd8:	68fb      	ldr	r3, [r7, #12]
    abda:	2b00      	cmp	r3, #0
    abdc:	d003      	beq.n	abe6 <thread_name_get+0x2a>
    abde:	68fb      	ldr	r3, [r7, #12]
    abe0:	781b      	ldrb	r3, [r3, #0]
    abe2:	2b00      	cmp	r3, #0
    abe4:	d101      	bne.n	abea <thread_name_get+0x2e>
		thread_name = "unknown";
    abe6:	4b03      	ldr	r3, [pc, #12]	; (abf4 <thread_name_get+0x38>)
    abe8:	60fb      	str	r3, [r7, #12]
	}

	return thread_name;
    abea:	68fb      	ldr	r3, [r7, #12]
}
    abec:	4618      	mov	r0, r3
    abee:	3710      	adds	r7, #16
    abf0:	46bd      	mov	sp, r7
    abf2:	bd80      	pop	{r7, pc}
    abf4:	00019c70 	.word	0x00019c70

0000abf8 <reason_to_str>:

static const char *reason_to_str(unsigned int reason)
{
    abf8:	b480      	push	{r7}
    abfa:	b083      	sub	sp, #12
    abfc:	af00      	add	r7, sp, #0
    abfe:	6078      	str	r0, [r7, #4]
    ac00:	687b      	ldr	r3, [r7, #4]
    ac02:	2b04      	cmp	r3, #4
    ac04:	d816      	bhi.n	ac34 <reason_to_str+0x3c>
    ac06:	a201      	add	r2, pc, #4	; (adr r2, ac0c <reason_to_str+0x14>)
    ac08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ac0c:	0000ac21 	.word	0x0000ac21
    ac10:	0000ac25 	.word	0x0000ac25
    ac14:	0000ac29 	.word	0x0000ac29
    ac18:	0000ac2d 	.word	0x0000ac2d
    ac1c:	0000ac31 	.word	0x0000ac31
	switch (reason) {
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
    ac20:	4b07      	ldr	r3, [pc, #28]	; (ac40 <reason_to_str+0x48>)
    ac22:	e008      	b.n	ac36 <reason_to_str+0x3e>
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
    ac24:	4b07      	ldr	r3, [pc, #28]	; (ac44 <reason_to_str+0x4c>)
    ac26:	e006      	b.n	ac36 <reason_to_str+0x3e>
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    ac28:	4b07      	ldr	r3, [pc, #28]	; (ac48 <reason_to_str+0x50>)
    ac2a:	e004      	b.n	ac36 <reason_to_str+0x3e>
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    ac2c:	4b07      	ldr	r3, [pc, #28]	; (ac4c <reason_to_str+0x54>)
    ac2e:	e002      	b.n	ac36 <reason_to_str+0x3e>
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    ac30:	4b07      	ldr	r3, [pc, #28]	; (ac50 <reason_to_str+0x58>)
    ac32:	e000      	b.n	ac36 <reason_to_str+0x3e>
	default:
		return "Unknown error";
    ac34:	4b07      	ldr	r3, [pc, #28]	; (ac54 <reason_to_str+0x5c>)
	}
}
    ac36:	4618      	mov	r0, r3
    ac38:	370c      	adds	r7, #12
    ac3a:	46bd      	mov	sp, r7
    ac3c:	bc80      	pop	{r7}
    ac3e:	4770      	bx	lr
    ac40:	00019c78 	.word	0x00019c78
    ac44:	00019c88 	.word	0x00019c88
    ac48:	00019c9c 	.word	0x00019c9c
    ac4c:	00019cac 	.word	0x00019cac
    ac50:	00019cb8 	.word	0x00019cb8
    ac54:	00019cc8 	.word	0x00019cc8

0000ac58 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    ac58:	b590      	push	{r4, r7, lr}
    ac5a:	b097      	sub	sp, #92	; 0x5c
    ac5c:	af02      	add	r7, sp, #8
    ac5e:	6078      	str	r0, [r7, #4]
    ac60:	6039      	str	r1, [r7, #0]
	__asm__ volatile(
    ac62:	f04f 0320 	mov.w	r3, #32
    ac66:	f3ef 8211 	mrs	r2, BASEPRI
    ac6a:	f383 8811 	msr	BASEPRI, r3
    ac6e:	f3bf 8f6f 	isb	sy
    ac72:	637a      	str	r2, [r7, #52]	; 0x34
    ac74:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
    ac76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	/* We can't allow this code to be preempted, but don't need to
	 * synchronize between CPUs, so an arch-layer lock is
	 * appropriate.
	 */
	unsigned int key = arch_irq_lock();
    ac78:	647b      	str	r3, [r7, #68]	; 0x44
	struct k_thread *thread = IS_ENABLED(CONFIG_MULTITHREADING) ?
			k_current_get() : NULL;
    ac7a:	f00a fd3b 	bl	156f4 <k_current_get>
    ac7e:	64b8      	str	r0, [r7, #72]	; 0x48

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    ac80:	2303      	movs	r3, #3
    ac82:	2b00      	cmp	r3, #0
    ac84:	d04c      	beq.n	ad20 <z_fatal_error+0xc8>
    ac86:	f00a fd2e 	bl	156e6 <k_is_user_context>
    ac8a:	4603      	mov	r3, r0
    ac8c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    ac90:	2300      	movs	r3, #0
    ac92:	623b      	str	r3, [r7, #32]
    ac94:	2303      	movs	r3, #3
    ac96:	2b00      	cmp	r3, #0
    ac98:	d007      	beq.n	acaa <z_fatal_error+0x52>
    ac9a:	4b83      	ldr	r3, [pc, #524]	; (aea8 <z_fatal_error+0x250>)
    ac9c:	681b      	ldr	r3, [r3, #0]
    ac9e:	4618      	mov	r0, r3
    aca0:	f7ff ff38 	bl	ab14 <log_const_source_id>
    aca4:	4603      	mov	r3, r0
    aca6:	b29b      	uxth	r3, r3
    aca8:	e000      	b.n	acac <z_fatal_error+0x54>
    acaa:	2300      	movs	r3, #0
    acac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    acb0:	7f3b      	ldrb	r3, [r7, #28]
    acb2:	2201      	movs	r2, #1
    acb4:	f362 0302 	bfi	r3, r2, #0, #3
    acb8:	773b      	strb	r3, [r7, #28]
    acba:	7f3b      	ldrb	r3, [r7, #28]
    acbc:	f36f 03c5 	bfc	r3, #3, #3
    acc0:	773b      	strb	r3, [r7, #28]
    acc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
    acc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    acca:	b29a      	uxth	r2, r3
    accc:	8bbb      	ldrh	r3, [r7, #28]
    acce:	f362 138f 	bfi	r3, r2, #6, #10
    acd2:	83bb      	strh	r3, [r7, #28]
    acd4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
    acd8:	2b00      	cmp	r3, #0
    acda:	d00e      	beq.n	acfa <z_fatal_error+0xa2>
    acdc:	6878      	ldr	r0, [r7, #4]
    acde:	f7ff ff8b 	bl	abf8 <reason_to_str>
    ace2:	4604      	mov	r4, r0
    ace4:	f00a fd44 	bl	15770 <get_cpu>
    ace8:	4603      	mov	r3, r0
    acea:	9300      	str	r3, [sp, #0]
    acec:	4623      	mov	r3, r4
    acee:	687a      	ldr	r2, [r7, #4]
    acf0:	496e      	ldr	r1, [pc, #440]	; (aeac <z_fatal_error+0x254>)
    acf2:	8bb8      	ldrh	r0, [r7, #28]
    acf4:	f7f7 ffc2 	bl	2c7c <log_from_user>
    acf8:	e013      	b.n	ad22 <z_fatal_error+0xca>
    acfa:	6878      	ldr	r0, [r7, #4]
    acfc:	f7ff ff7c 	bl	abf8 <reason_to_str>
    ad00:	4603      	mov	r3, r0
    ad02:	461c      	mov	r4, r3
    ad04:	f00a fd34 	bl	15770 <get_cpu>
    ad08:	4603      	mov	r3, r0
    ad0a:	461a      	mov	r2, r3
    ad0c:	8bbb      	ldrh	r3, [r7, #28]
    ad0e:	f8ad 3000 	strh.w	r3, [sp]
    ad12:	4613      	mov	r3, r2
    ad14:	4622      	mov	r2, r4
    ad16:	6879      	ldr	r1, [r7, #4]
    ad18:	4864      	ldr	r0, [pc, #400]	; (aeac <z_fatal_error+0x254>)
    ad1a:	f006 f8ed 	bl	10ef8 <log_3>
    ad1e:	e000      	b.n	ad22 <z_fatal_error+0xca>
    ad20:	bf00      	nop
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    ad22:	683b      	ldr	r3, [r7, #0]
    ad24:	2b00      	cmp	r3, #0
    ad26:	d043      	beq.n	adb0 <z_fatal_error+0x158>
    ad28:	683b      	ldr	r3, [r7, #0]
    ad2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    ad2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ad2e:	69db      	ldr	r3, [r3, #28]
    ad30:	f3c3 0308 	ubfx	r3, r3, #0, #9
    ad34:	2b00      	cmp	r3, #0
    ad36:	bf14      	ite	ne
    ad38:	2301      	movne	r3, #1
    ad3a:	2300      	moveq	r3, #0
    ad3c:	b2db      	uxtb	r3, r3
    ad3e:	2b00      	cmp	r3, #0
    ad40:	d036      	beq.n	adb0 <z_fatal_error+0x158>
		LOG_ERR("Fault during interrupt handling\n");
    ad42:	2303      	movs	r3, #3
    ad44:	2b00      	cmp	r3, #0
    ad46:	d032      	beq.n	adae <z_fatal_error+0x156>
    ad48:	f00a fccd 	bl	156e6 <k_is_user_context>
    ad4c:	4603      	mov	r3, r0
    ad4e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
    ad52:	2300      	movs	r3, #0
    ad54:	61bb      	str	r3, [r7, #24]
    ad56:	2303      	movs	r3, #3
    ad58:	2b00      	cmp	r3, #0
    ad5a:	d007      	beq.n	ad6c <z_fatal_error+0x114>
    ad5c:	4b52      	ldr	r3, [pc, #328]	; (aea8 <z_fatal_error+0x250>)
    ad5e:	681b      	ldr	r3, [r3, #0]
    ad60:	4618      	mov	r0, r3
    ad62:	f7ff fed7 	bl	ab14 <log_const_source_id>
    ad66:	4603      	mov	r3, r0
    ad68:	b29b      	uxth	r3, r3
    ad6a:	e000      	b.n	ad6e <z_fatal_error+0x116>
    ad6c:	2300      	movs	r3, #0
    ad6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
    ad70:	7d3b      	ldrb	r3, [r7, #20]
    ad72:	2201      	movs	r2, #1
    ad74:	f362 0302 	bfi	r3, r2, #0, #3
    ad78:	753b      	strb	r3, [r7, #20]
    ad7a:	7d3b      	ldrb	r3, [r7, #20]
    ad7c:	f36f 03c5 	bfc	r3, #3, #3
    ad80:	753b      	strb	r3, [r7, #20]
    ad82:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    ad84:	f3c3 0309 	ubfx	r3, r3, #0, #10
    ad88:	b29a      	uxth	r2, r3
    ad8a:	8abb      	ldrh	r3, [r7, #20]
    ad8c:	f362 138f 	bfi	r3, r2, #6, #10
    ad90:	82bb      	strh	r3, [r7, #20]
    ad92:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
    ad96:	2b00      	cmp	r3, #0
    ad98:	d004      	beq.n	ada4 <z_fatal_error+0x14c>
    ad9a:	4945      	ldr	r1, [pc, #276]	; (aeb0 <z_fatal_error+0x258>)
    ad9c:	8ab8      	ldrh	r0, [r7, #20]
    ad9e:	f7f7 ff6d 	bl	2c7c <log_from_user>
    ada2:	e005      	b.n	adb0 <z_fatal_error+0x158>
    ada4:	8ab9      	ldrh	r1, [r7, #20]
    ada6:	4842      	ldr	r0, [pc, #264]	; (aeb0 <z_fatal_error+0x258>)
    ada8:	f006 f861 	bl	10e6e <log_0>
    adac:	e000      	b.n	adb0 <z_fatal_error+0x158>
    adae:	bf00      	nop
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    adb0:	2303      	movs	r3, #3
    adb2:	2b00      	cmp	r3, #0
    adb4:	d046      	beq.n	ae44 <z_fatal_error+0x1ec>
    adb6:	f00a fc96 	bl	156e6 <k_is_user_context>
    adba:	4603      	mov	r3, r0
    adbc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    adc0:	2300      	movs	r3, #0
    adc2:	613b      	str	r3, [r7, #16]
    adc4:	2303      	movs	r3, #3
    adc6:	2b00      	cmp	r3, #0
    adc8:	d007      	beq.n	adda <z_fatal_error+0x182>
    adca:	4b37      	ldr	r3, [pc, #220]	; (aea8 <z_fatal_error+0x250>)
    adcc:	681b      	ldr	r3, [r3, #0]
    adce:	4618      	mov	r0, r3
    add0:	f7ff fea0 	bl	ab14 <log_const_source_id>
    add4:	4603      	mov	r3, r0
    add6:	b29b      	uxth	r3, r3
    add8:	e000      	b.n	addc <z_fatal_error+0x184>
    adda:	2300      	movs	r3, #0
    addc:	877b      	strh	r3, [r7, #58]	; 0x3a
    adde:	7b3b      	ldrb	r3, [r7, #12]
    ade0:	2201      	movs	r2, #1
    ade2:	f362 0302 	bfi	r3, r2, #0, #3
    ade6:	733b      	strb	r3, [r7, #12]
    ade8:	7b3b      	ldrb	r3, [r7, #12]
    adea:	f36f 03c5 	bfc	r3, #3, #3
    adee:	733b      	strb	r3, [r7, #12]
    adf0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    adf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    adf6:	b29a      	uxth	r2, r3
    adf8:	89bb      	ldrh	r3, [r7, #12]
    adfa:	f362 138f 	bfi	r3, r2, #6, #10
    adfe:	81bb      	strh	r3, [r7, #12]
    ae00:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    ae04:	2b00      	cmp	r3, #0
    ae06:	d00d      	beq.n	ae24 <z_fatal_error+0x1cc>
    ae08:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    ae0a:	f7ff fed7 	bl	abbc <thread_name_get>
    ae0e:	4603      	mov	r3, r0
    ae10:	4618      	mov	r0, r3
    ae12:	f00a fc87 	bl	15724 <log_strdup>
    ae16:	4603      	mov	r3, r0
    ae18:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ae1a:	4926      	ldr	r1, [pc, #152]	; (aeb4 <z_fatal_error+0x25c>)
    ae1c:	89b8      	ldrh	r0, [r7, #12]
    ae1e:	f7f7 ff2d 	bl	2c7c <log_from_user>
    ae22:	e010      	b.n	ae46 <z_fatal_error+0x1ee>
    ae24:	6cbc      	ldr	r4, [r7, #72]	; 0x48
    ae26:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    ae28:	f7ff fec8 	bl	abbc <thread_name_get>
    ae2c:	4603      	mov	r3, r0
    ae2e:	4618      	mov	r0, r3
    ae30:	f00a fc78 	bl	15724 <log_strdup>
    ae34:	4603      	mov	r3, r0
    ae36:	461a      	mov	r2, r3
    ae38:	89bb      	ldrh	r3, [r7, #12]
    ae3a:	4621      	mov	r1, r4
    ae3c:	481d      	ldr	r0, [pc, #116]	; (aeb4 <z_fatal_error+0x25c>)
    ae3e:	f006 f842 	bl	10ec6 <log_2>
    ae42:	e000      	b.n	ae46 <z_fatal_error+0x1ee>
    ae44:	bf00      	nop
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);
    ae46:	6cba      	ldr	r2, [r7, #72]	; 0x48
    ae48:	6839      	ldr	r1, [r7, #0]
    ae4a:	6878      	ldr	r0, [r7, #4]
    ae4c:	f00a fc76 	bl	1573c <coredump>

	k_sys_fatal_error_handler(reason, esf);
    ae50:	6839      	ldr	r1, [r7, #0]
    ae52:	6878      	ldr	r0, [r7, #4]
    ae54:	f7ff fe6e 	bl	ab34 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    ae58:	687b      	ldr	r3, [r7, #4]
    ae5a:	2b04      	cmp	r3, #4
    ae5c:	d10c      	bne.n	ae78 <z_fatal_error+0x220>
    ae5e:	238f      	movs	r3, #143	; 0x8f
    ae60:	4a15      	ldr	r2, [pc, #84]	; (aeb8 <z_fatal_error+0x260>)
    ae62:	4916      	ldr	r1, [pc, #88]	; (aebc <z_fatal_error+0x264>)
    ae64:	4816      	ldr	r0, [pc, #88]	; (aec0 <z_fatal_error+0x268>)
    ae66:	f004 ff05 	bl	fc74 <printk>
    ae6a:	4816      	ldr	r0, [pc, #88]	; (aec4 <z_fatal_error+0x26c>)
    ae6c:	f004 ff02 	bl	fc74 <printk>
    ae70:	218f      	movs	r1, #143	; 0x8f
    ae72:	4811      	ldr	r0, [pc, #68]	; (aeb8 <z_fatal_error+0x260>)
    ae74:	f005 fb5a 	bl	1052c <assert_post_action>
			 "Attempted to recover from a kernel panic condition");
		/* FIXME: #17656 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
		if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    ae78:	683b      	ldr	r3, [r7, #0]
    ae7a:	2b00      	cmp	r3, #0
    ae7c:	d006      	beq.n	ae8c <z_fatal_error+0x234>
    ae7e:	683b      	ldr	r3, [r7, #0]
    ae80:	62bb      	str	r3, [r7, #40]	; 0x28
    ae82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ae84:	69db      	ldr	r3, [r3, #28]
    ae86:	f3c3 0308 	ubfx	r3, r3, #0, #9
    ae8a:	2b00      	cmp	r3, #0
    ae8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ae8e:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
    ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ae92:	f383 8811 	msr	BASEPRI, r3
    ae96:	f3bf 8f6f 	isb	sy
}
    ae9a:	bf00      	nop
	}

	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
    ae9c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    ae9e:	f00a fc30 	bl	15702 <k_thread_abort>
	}
}
    aea2:	3754      	adds	r7, #84	; 0x54
    aea4:	46bd      	mov	sp, r7
    aea6:	bd90      	pop	{r4, r7, pc}
    aea8:	20000168 	.word	0x20000168
    aeac:	00019cd8 	.word	0x00019cd8
    aeb0:	00019d00 	.word	0x00019d00
    aeb4:	00019d24 	.word	0x00019d24
    aeb8:	00019d3c 	.word	0x00019d3c
    aebc:	00019d60 	.word	0x00019d60
    aec0:	00019d80 	.word	0x00019d80
    aec4:	00019da0 	.word	0x00019da0

0000aec8 <__NVIC_SetPriority>:
{
    aec8:	b480      	push	{r7}
    aeca:	b083      	sub	sp, #12
    aecc:	af00      	add	r7, sp, #0
    aece:	4603      	mov	r3, r0
    aed0:	6039      	str	r1, [r7, #0]
    aed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    aed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
    aed8:	2b00      	cmp	r3, #0
    aeda:	db0a      	blt.n	aef2 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    aedc:	683b      	ldr	r3, [r7, #0]
    aede:	b2da      	uxtb	r2, r3
    aee0:	490c      	ldr	r1, [pc, #48]	; (af14 <__NVIC_SetPriority+0x4c>)
    aee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    aee6:	0152      	lsls	r2, r2, #5
    aee8:	b2d2      	uxtb	r2, r2
    aeea:	440b      	add	r3, r1
    aeec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    aef0:	e00a      	b.n	af08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    aef2:	683b      	ldr	r3, [r7, #0]
    aef4:	b2da      	uxtb	r2, r3
    aef6:	4908      	ldr	r1, [pc, #32]	; (af18 <__NVIC_SetPriority+0x50>)
    aef8:	79fb      	ldrb	r3, [r7, #7]
    aefa:	f003 030f 	and.w	r3, r3, #15
    aefe:	3b04      	subs	r3, #4
    af00:	0152      	lsls	r2, r2, #5
    af02:	b2d2      	uxtb	r2, r2
    af04:	440b      	add	r3, r1
    af06:	761a      	strb	r2, [r3, #24]
}
    af08:	bf00      	nop
    af0a:	370c      	adds	r7, #12
    af0c:	46bd      	mov	sp, r7
    af0e:	bc80      	pop	{r7}
    af10:	4770      	bx	lr
    af12:	bf00      	nop
    af14:	e000e100 	.word	0xe000e100
    af18:	e000ed00 	.word	0xe000ed00

0000af1c <z_dummy_thread_init>:
 * use it to properly store state, which will just be discarded.
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
    af1c:	b480      	push	{r7}
    af1e:	b083      	sub	sp, #12
    af20:	af00      	add	r7, sp, #0
    af22:	6078      	str	r0, [r7, #4]
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    af24:	687b      	ldr	r3, [r7, #4]
    af26:	2201      	movs	r2, #1
    af28:	735a      	strb	r2, [r3, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    af2a:	687b      	ldr	r3, [r7, #4]
    af2c:	2201      	movs	r2, #1
    af2e:	731a      	strb	r2, [r3, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    af30:	687b      	ldr	r3, [r7, #4]
    af32:	2200      	movs	r2, #0
    af34:	665a      	str	r2, [r3, #100]	; 0x64
	dummy_thread->stack_info.size = 0U;
    af36:	687b      	ldr	r3, [r7, #4]
    af38:	2200      	movs	r2, #0
    af3a:	669a      	str	r2, [r3, #104]	; 0x68
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    af3c:	4a03      	ldr	r2, [pc, #12]	; (af4c <z_dummy_thread_init+0x30>)
    af3e:	687b      	ldr	r3, [r7, #4]
    af40:	6093      	str	r3, [r2, #8]
}
    af42:	bf00      	nop
    af44:	370c      	adds	r7, #12
    af46:	46bd      	mov	sp, r7
    af48:	bc80      	pop	{r7}
    af4a:	4770      	bx	lr
    af4c:	20000c00 	.word	0x20000c00

0000af50 <z_bss_zero>:
 *
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
    af50:	b580      	push	{r7, lr}
    af52:	af00      	add	r7, sp, #0
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    af54:	4a04      	ldr	r2, [pc, #16]	; (af68 <z_bss_zero+0x18>)
    af56:	4b05      	ldr	r3, [pc, #20]	; (af6c <z_bss_zero+0x1c>)
    af58:	1ad3      	subs	r3, r2, r3
    af5a:	461a      	mov	r2, r3
    af5c:	2100      	movs	r1, #0
    af5e:	4803      	ldr	r0, [pc, #12]	; (af6c <z_bss_zero+0x1c>)
    af60:	f007 fdfa 	bl	12b58 <memset>
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	(void)memset(&__gcov_bss_start, 0,
		 ((uintptr_t) &__gcov_bss_end - (uintptr_t) &__gcov_bss_start));
#endif
}
    af64:	bf00      	nop
    af66:	bd80      	pop	{r7, pc}
    af68:	20000e2c 	.word	0x20000e2c
    af6c:	20000260 	.word	0x20000260

0000af70 <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    af70:	b580      	push	{r7, lr}
    af72:	b084      	sub	sp, #16
    af74:	af00      	add	r7, sp, #0
    af76:	60f8      	str	r0, [r7, #12]
    af78:	60b9      	str	r1, [r7, #8]
    af7a:	607a      	str	r2, [r7, #4]
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    af7c:	4b0c      	ldr	r3, [pc, #48]	; (afb0 <bg_thread_main+0x40>)
    af7e:	2201      	movs	r2, #1
    af80:	701a      	strb	r2, [r3, #0]

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    af82:	2002      	movs	r0, #2
    af84:	f7ff fd3e 	bl	aa04 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    af88:	f004 fa36 	bl	f3f8 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    af8c:	2003      	movs	r0, #3
    af8e:	f7ff fd39 	bl	aa04 <z_sys_init_run_level>

	z_init_static_threads();
    af92:	f000 fc3d 	bl	b810 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
    af96:	f7f5 fbf3 	bl	780 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    af9a:	4b06      	ldr	r3, [pc, #24]	; (afb4 <bg_thread_main+0x44>)
    af9c:	7b1b      	ldrb	r3, [r3, #12]
    af9e:	f023 0301 	bic.w	r3, r3, #1
    afa2:	b2da      	uxtb	r2, r3
    afa4:	4b03      	ldr	r3, [pc, #12]	; (afb4 <bg_thread_main+0x44>)
    afa6:	731a      	strb	r2, [r3, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    afa8:	bf00      	nop
    afaa:	3710      	adds	r7, #16
    afac:	46bd      	mov	sp, r7
    afae:	bd80      	pop	{r7, pc}
    afb0:	20000c6d 	.word	0x20000c6d
    afb4:	200003e0 	.word	0x200003e0

0000afb8 <init_idle_thread>:
/* LCOV_EXCL_STOP */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    afb8:	b580      	push	{r7, lr}
    afba:	b08c      	sub	sp, #48	; 0x30
    afbc:	af06      	add	r7, sp, #24
    afbe:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = &z_idle_threads[i];
    afc0:	687b      	ldr	r3, [r7, #4]
    afc2:	01db      	lsls	r3, r3, #7
    afc4:	4a16      	ldr	r2, [pc, #88]	; (b020 <init_idle_thread+0x68>)
    afc6:	4413      	add	r3, r2
    afc8:	617b      	str	r3, [r7, #20]
	k_thread_stack_t *stack = z_idle_stacks[i];
    afca:	687a      	ldr	r2, [r7, #4]
    afcc:	4613      	mov	r3, r2
    afce:	009b      	lsls	r3, r3, #2
    afd0:	4413      	add	r3, r2
    afd2:	019b      	lsls	r3, r3, #6
    afd4:	4a13      	ldr	r2, [pc, #76]	; (b024 <init_idle_thread+0x6c>)
    afd6:	4413      	add	r3, r2
    afd8:	613b      	str	r3, [r7, #16]
#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
    afda:	2300      	movs	r3, #0
    afdc:	60fb      	str	r3, [r7, #12]
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    afde:	687a      	ldr	r2, [r7, #4]
    afe0:	4613      	mov	r3, r2
    afe2:	005b      	lsls	r3, r3, #1
    afe4:	4413      	add	r3, r2
    afe6:	00db      	lsls	r3, r3, #3
    afe8:	4a0f      	ldr	r2, [pc, #60]	; (b028 <init_idle_thread+0x70>)
    afea:	4413      	add	r3, r2
	z_setup_new_thread(thread, stack,
    afec:	68fa      	ldr	r2, [r7, #12]
    afee:	9205      	str	r2, [sp, #20]
    aff0:	2201      	movs	r2, #1
    aff2:	9204      	str	r2, [sp, #16]
    aff4:	220f      	movs	r2, #15
    aff6:	9203      	str	r2, [sp, #12]
    aff8:	2200      	movs	r2, #0
    affa:	9202      	str	r2, [sp, #8]
    affc:	2200      	movs	r2, #0
    affe:	9201      	str	r2, [sp, #4]
    b000:	9300      	str	r3, [sp, #0]
    b002:	4b0a      	ldr	r3, [pc, #40]	; (b02c <init_idle_thread+0x74>)
    b004:	f44f 72a0 	mov.w	r2, #320	; 0x140
    b008:	6939      	ldr	r1, [r7, #16]
    b00a:	6978      	ldr	r0, [r7, #20]
    b00c:	f000 fb46 	bl	b69c <z_setup_new_thread>
			  NULL, NULL, K_IDLE_PRIO, K_ESSENTIAL,
			  tname);
	z_mark_thread_as_started(thread);
    b010:	6978      	ldr	r0, [r7, #20]
    b012:	f00a fbcd 	bl	157b0 <z_mark_thread_as_started>

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    b016:	bf00      	nop
    b018:	3718      	adds	r7, #24
    b01a:	46bd      	mov	sp, r7
    b01c:	bd80      	pop	{r7, pc}
    b01e:	bf00      	nop
    b020:	20000460 	.word	0x20000460
    b024:	20001e30 	.word	0x20001e30
    b028:	20000c00 	.word	0x20000c00
    b02c:	0000ba0d 	.word	0x0000ba0d

0000b030 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    b030:	b580      	push	{r7, lr}
    b032:	b088      	sub	sp, #32
    b034:	af06      	add	r7, sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    b036:	f003 f85d 	bl	e0f4 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    b03a:	4b2e      	ldr	r3, [pc, #184]	; (b0f4 <prepare_multithreading+0xc4>)
    b03c:	4a2e      	ldr	r2, [pc, #184]	; (b0f8 <prepare_multithreading+0xc8>)
    b03e:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    b040:	4b2e      	ldr	r3, [pc, #184]	; (b0fc <prepare_multithreading+0xcc>)
    b042:	9305      	str	r3, [sp, #20]
    b044:	2301      	movs	r3, #1
    b046:	9304      	str	r3, [sp, #16]
    b048:	2300      	movs	r3, #0
    b04a:	9303      	str	r3, [sp, #12]
    b04c:	2300      	movs	r3, #0
    b04e:	9302      	str	r3, [sp, #8]
    b050:	2300      	movs	r3, #0
    b052:	9301      	str	r3, [sp, #4]
    b054:	2300      	movs	r3, #0
    b056:	9300      	str	r3, [sp, #0]
    b058:	4b29      	ldr	r3, [pc, #164]	; (b100 <prepare_multithreading+0xd0>)
    b05a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b05e:	4929      	ldr	r1, [pc, #164]	; (b104 <prepare_multithreading+0xd4>)
    b060:	4825      	ldr	r0, [pc, #148]	; (b0f8 <prepare_multithreading+0xc8>)
    b062:	f000 fb1b 	bl	b69c <z_setup_new_thread>
    b066:	6038      	str	r0, [r7, #0]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
    b068:	4823      	ldr	r0, [pc, #140]	; (b0f8 <prepare_multithreading+0xc8>)
    b06a:	f00a fba1 	bl	157b0 <z_mark_thread_as_started>
	z_ready_thread(&z_main_thread);
    b06e:	4822      	ldr	r0, [pc, #136]	; (b0f8 <prepare_multithreading+0xc8>)
    b070:	f002 f816 	bl	d0a0 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    b074:	2300      	movs	r3, #0
    b076:	607b      	str	r3, [r7, #4]
    b078:	e031      	b.n	b0de <prepare_multithreading+0xae>
		init_idle_thread(i);
    b07a:	6878      	ldr	r0, [r7, #4]
    b07c:	f7ff ff9c 	bl	afb8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    b080:	687b      	ldr	r3, [r7, #4]
    b082:	01db      	lsls	r3, r3, #7
    b084:	4a20      	ldr	r2, [pc, #128]	; (b108 <prepare_multithreading+0xd8>)
    b086:	1899      	adds	r1, r3, r2
    b088:	481a      	ldr	r0, [pc, #104]	; (b0f4 <prepare_multithreading+0xc4>)
    b08a:	687a      	ldr	r2, [r7, #4]
    b08c:	4613      	mov	r3, r2
    b08e:	005b      	lsls	r3, r3, #1
    b090:	4413      	add	r3, r2
    b092:	00db      	lsls	r3, r3, #3
    b094:	4403      	add	r3, r0
    b096:	330c      	adds	r3, #12
    b098:	6019      	str	r1, [r3, #0]
		_kernel.cpus[i].id = i;
    b09a:	687b      	ldr	r3, [r7, #4]
    b09c:	b2d8      	uxtb	r0, r3
    b09e:	4915      	ldr	r1, [pc, #84]	; (b0f4 <prepare_multithreading+0xc4>)
    b0a0:	687a      	ldr	r2, [r7, #4]
    b0a2:	4613      	mov	r3, r2
    b0a4:	005b      	lsls	r3, r3, #1
    b0a6:	4413      	add	r3, r2
    b0a8:	00db      	lsls	r3, r3, #3
    b0aa:	440b      	add	r3, r1
    b0ac:	3314      	adds	r3, #20
    b0ae:	4602      	mov	r2, r0
    b0b0:	701a      	strb	r2, [r3, #0]
		_kernel.cpus[i].irq_stack =
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    b0b2:	687b      	ldr	r3, [r7, #4]
    b0b4:	02db      	lsls	r3, r3, #11
    b0b6:	4a15      	ldr	r2, [pc, #84]	; (b10c <prepare_multithreading+0xdc>)
    b0b8:	4413      	add	r3, r2
    b0ba:	4618      	mov	r0, r3
    b0bc:	f00a fb6e 	bl	1579c <Z_KERNEL_STACK_BUFFER>
    b0c0:	4603      	mov	r3, r0
    b0c2:	f503 6100 	add.w	r1, r3, #2048	; 0x800
		_kernel.cpus[i].irq_stack =
    b0c6:	480b      	ldr	r0, [pc, #44]	; (b0f4 <prepare_multithreading+0xc4>)
    b0c8:	687a      	ldr	r2, [r7, #4]
    b0ca:	4613      	mov	r3, r2
    b0cc:	005b      	lsls	r3, r3, #1
    b0ce:	4413      	add	r3, r2
    b0d0:	00db      	lsls	r3, r3, #3
    b0d2:	4403      	add	r3, r0
    b0d4:	3304      	adds	r3, #4
    b0d6:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    b0d8:	687b      	ldr	r3, [r7, #4]
    b0da:	3301      	adds	r3, #1
    b0dc:	607b      	str	r3, [r7, #4]
    b0de:	687b      	ldr	r3, [r7, #4]
    b0e0:	2b00      	cmp	r3, #0
    b0e2:	ddca      	ble.n	b07a <prepare_multithreading+0x4a>
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	initialize_timeouts();
    b0e4:	480a      	ldr	r0, [pc, #40]	; (b110 <prepare_multithreading+0xe0>)
    b0e6:	f00a fb4a 	bl	1577e <sys_dlist_init>

	return stack_ptr;
    b0ea:	683b      	ldr	r3, [r7, #0]
}
    b0ec:	4618      	mov	r0, r3
    b0ee:	3708      	adds	r7, #8
    b0f0:	46bd      	mov	sp, r7
    b0f2:	bd80      	pop	{r7, pc}
    b0f4:	20000c00 	.word	0x20000c00
    b0f8:	200003e0 	.word	0x200003e0
    b0fc:	00019ddc 	.word	0x00019ddc
    b100:	0000af71 	.word	0x0000af71
    b104:	20001a30 	.word	0x20001a30
    b108:	20000460 	.word	0x20000460
    b10c:	20001230 	.word	0x20001230
    b110:	20000c18 	.word	0x20000c18

0000b114 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    b114:	b580      	push	{r7, lr}
    b116:	b082      	sub	sp, #8
    b118:	af00      	add	r7, sp, #0
    b11a:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    b11c:	4a02      	ldr	r2, [pc, #8]	; (b128 <switch_to_main_thread+0x14>)
    b11e:	6879      	ldr	r1, [r7, #4]
    b120:	4802      	ldr	r0, [pc, #8]	; (b12c <switch_to_main_thread+0x18>)
    b122:	f7fa fcd9 	bl	5ad8 <arch_switch_to_main_thread>
    b126:	bf00      	nop
    b128:	0000af71 	.word	0x0000af71
    b12c:	200003e0 	.word	0x200003e0

0000b130 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    b130:	b580      	push	{r7, lr}
    b132:	b0a4      	sub	sp, #144	; 0x90
    b134:	af00      	add	r7, sp, #0
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();
    b136:	f00a fb4b 	bl	157d0 <gcov_static_init>

	LOG_CORE_INIT();
    b13a:	f7f7 fb3d 	bl	27b8 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    b13e:	482f      	ldr	r0, [pc, #188]	; (b1fc <z_cstart+0xcc>)
    b140:	f00a fb2c 	bl	1579c <Z_KERNEL_STACK_BUFFER>
    b144:	4603      	mov	r3, r0
	uint32_t msp =
    b146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
    b14a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    b14e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    b152:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    b156:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    b15a:	f383 8808 	msr	MSP, r3
}
    b15e:	bf00      	nop
			   K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[0]);

	__set_MSP(msp);
#if defined(CONFIG_BUILTIN_STACK_GUARD)
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_MSPLIM((uint32_t)z_interrupt_stacks[0]);
    b160:	4b26      	ldr	r3, [pc, #152]	; (b1fc <z_cstart+0xcc>)
    b162:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    b166:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    b16a:	f383 880a 	msr	MSPLIM, r3
}
    b16e:	bf00      	nop
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
#endif
#endif /* CONFIG_STACK_ALIGN_DOUBLE_WORD */
}
    b170:	bf00      	nop
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_exc_setup(void)
{
	NVIC_SetPriority(PendSV_IRQn, _EXC_PENDSV_PRIO);
    b172:	21ff      	movs	r1, #255	; 0xff
    b174:	f06f 0001 	mvn.w	r0, #1
    b178:	f7ff fea6 	bl	aec8 <__NVIC_SetPriority>

#ifdef CONFIG_CPU_CORTEX_M_HAS_BASEPRI
	/* Note: SVCall IRQ priority level is left to default (0)
	 * for Cortex-M variants without BASEPRI (e.g. ARMv6-M).
	 */
	NVIC_SetPriority(SVCall_IRQn, _EXC_SVC_PRIO);
    b17c:	2100      	movs	r1, #0
    b17e:	f06f 0004 	mvn.w	r0, #4
    b182:	f7ff fea1 	bl	aec8 <__NVIC_SetPriority>
#endif

#ifdef CONFIG_CPU_CORTEX_M_HAS_PROGRAMMABLE_FAULT_PRIOS
	NVIC_SetPriority(MemoryManagement_IRQn, _EXC_FAULT_PRIO);
    b186:	2100      	movs	r1, #0
    b188:	f06f 000b 	mvn.w	r0, #11
    b18c:	f7ff fe9c 	bl	aec8 <__NVIC_SetPriority>
	NVIC_SetPriority(BusFault_IRQn, _EXC_FAULT_PRIO);
    b190:	2100      	movs	r1, #0
    b192:	f06f 000a 	mvn.w	r0, #10
    b196:	f7ff fe97 	bl	aec8 <__NVIC_SetPriority>
	NVIC_SetPriority(UsageFault_IRQn, _EXC_FAULT_PRIO);
    b19a:	2100      	movs	r1, #0
    b19c:	f06f 0009 	mvn.w	r0, #9
    b1a0:	f7ff fe92 	bl	aec8 <__NVIC_SetPriority>
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    b1a4:	4b16      	ldr	r3, [pc, #88]	; (b200 <z_cstart+0xd0>)
    b1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b1a8:	4a15      	ldr	r2, [pc, #84]	; (b200 <z_cstart+0xd0>)
    b1aa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    b1ae:	6253      	str	r3, [r2, #36]	; 0x24
	/* Note: Fault conditions that would generate a SecureFault
	 * in a PE with the Main Extension instead generate a
	 * SecureHardFault in a PE without the Main Extension.
	 */
#endif /* ARM_SECURE_FIRMWARE && !ARM_SECURE_BUSFAULT_HARDFAULT_NMI */
}
    b1b0:	bf00      	nop

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    b1b2:	f7fc f82b 	bl	720c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    b1b6:	f7fa fcb3 	bl	5b20 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    b1ba:	4b11      	ldr	r3, [pc, #68]	; (b200 <z_cstart+0xd0>)
    b1bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b1c0:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    b1c2:	4b0f      	ldr	r3, [pc, #60]	; (b200 <z_cstart+0xd0>)
    b1c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b1c8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    b1ca:	bf00      	nop
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    b1cc:	f7fc fe7e 	bl	7ecc <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    b1d0:	f7fc f8f6 	bl	73c0 <z_arm_configure_static_mpu_regions>
#endif
}
    b1d4:	bf00      	nop
	/* Note: The z_ready_thread() call in prepare_multithreading() requires
	 * a dummy thread even if CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN=y
	 */
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
    b1d6:	463b      	mov	r3, r7
    b1d8:	4618      	mov	r0, r3
    b1da:	f7ff fe9f 	bl	af1c <z_dummy_thread_init>
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    b1de:	f7ff fbf5 	bl	a9cc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    b1e2:	2000      	movs	r0, #0
    b1e4:	f7ff fc0e 	bl	aa04 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    b1e8:	2001      	movs	r0, #1
    b1ea:	f7ff fc0b 	bl	aa04 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    b1ee:	f7ff ff1f 	bl	b030 <prepare_multithreading>
    b1f2:	4603      	mov	r3, r0
    b1f4:	4618      	mov	r0, r3
    b1f6:	f7ff ff8d 	bl	b114 <switch_to_main_thread>
    b1fa:	bf00      	nop
    b1fc:	20001230 	.word	0x20001230
    b200:	e000ed00 	.word	0xe000ed00

0000b204 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    b204:	b580      	push	{r7, lr}
    b206:	b084      	sub	sp, #16
    b208:	af00      	add	r7, sp, #0
    b20a:	6078      	str	r0, [r7, #4]
	int rc = 0;
    b20c:	2300      	movs	r3, #0
    b20e:	60fb      	str	r3, [r7, #12]
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b210:	4b18      	ldr	r3, [pc, #96]	; (b274 <init_mem_slab_module+0x70>)
    b212:	60bb      	str	r3, [r7, #8]
    b214:	e00c      	b.n	b230 <init_mem_slab_module+0x2c>
		rc = create_free_list(slab);
    b216:	68b8      	ldr	r0, [r7, #8]
    b218:	f00a fb04 	bl	15824 <create_free_list>
    b21c:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    b21e:	68fb      	ldr	r3, [r7, #12]
    b220:	2b00      	cmp	r3, #0
    b222:	db20      	blt.n	b266 <init_mem_slab_module+0x62>
			goto out;
		}
		z_object_init(slab);
    b224:	68b8      	ldr	r0, [r7, #8]
    b226:	f00a fae8 	bl	157fa <z_object_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b22a:	68bb      	ldr	r3, [r7, #8]
    b22c:	3320      	adds	r3, #32
    b22e:	60bb      	str	r3, [r7, #8]
    b230:	68bb      	ldr	r3, [r7, #8]
    b232:	4a11      	ldr	r2, [pc, #68]	; (b278 <init_mem_slab_module+0x74>)
    b234:	4293      	cmp	r3, r2
    b236:	d90c      	bls.n	b252 <init_mem_slab_module+0x4e>
    b238:	233c      	movs	r3, #60	; 0x3c
    b23a:	4a10      	ldr	r2, [pc, #64]	; (b27c <init_mem_slab_module+0x78>)
    b23c:	4910      	ldr	r1, [pc, #64]	; (b280 <init_mem_slab_module+0x7c>)
    b23e:	4811      	ldr	r0, [pc, #68]	; (b284 <init_mem_slab_module+0x80>)
    b240:	f004 fd18 	bl	fc74 <printk>
    b244:	4810      	ldr	r0, [pc, #64]	; (b288 <init_mem_slab_module+0x84>)
    b246:	f004 fd15 	bl	fc74 <printk>
    b24a:	213c      	movs	r1, #60	; 0x3c
    b24c:	480b      	ldr	r0, [pc, #44]	; (b27c <init_mem_slab_module+0x78>)
    b24e:	f005 f96d 	bl	1052c <assert_post_action>
    b252:	68bb      	ldr	r3, [r7, #8]
    b254:	4a08      	ldr	r2, [pc, #32]	; (b278 <init_mem_slab_module+0x74>)
    b256:	4293      	cmp	r3, r2
    b258:	bf34      	ite	cc
    b25a:	2301      	movcc	r3, #1
    b25c:	2300      	movcs	r3, #0
    b25e:	b2db      	uxtb	r3, r3
    b260:	2b00      	cmp	r3, #0
    b262:	d1d8      	bne.n	b216 <init_mem_slab_module+0x12>
	}

out:
    b264:	e000      	b.n	b268 <init_mem_slab_module+0x64>
			goto out;
    b266:	bf00      	nop
	return rc;
    b268:	68fb      	ldr	r3, [r7, #12]
}
    b26a:	4618      	mov	r0, r3
    b26c:	3710      	adds	r7, #16
    b26e:	46bd      	mov	sp, r7
    b270:	bd80      	pop	{r7, pc}
    b272:	bf00      	nop
    b274:	200001e0 	.word	0x200001e0
    b278:	20000200 	.word	0x20000200
    b27c:	00019de4 	.word	0x00019de4
    b280:	00019e0c 	.word	0x00019e0c
    b284:	00019e2c 	.word	0x00019e2c
    b288:	00019e4c 	.word	0x00019e4c

0000b28c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    b28c:	b580      	push	{r7, lr}
    b28e:	b090      	sub	sp, #64	; 0x40
    b290:	af02      	add	r7, sp, #8
    b292:	60f8      	str	r0, [r7, #12]
    b294:	60b9      	str	r1, [r7, #8]
    b296:	e9c7 2300 	strd	r2, r3, [r7]
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    b29a:	68fb      	ldr	r3, [r7, #12]
    b29c:	3308      	adds	r3, #8
    b29e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm__ volatile(
    b2a0:	f04f 0320 	mov.w	r3, #32
    b2a4:	f3ef 8211 	mrs	r2, BASEPRI
    b2a8:	f383 8811 	msr	BASEPRI, r3
    b2ac:	f3bf 8f6f 	isb	sy
    b2b0:	62fa      	str	r2, [r7, #44]	; 0x2c
    b2b2:	62bb      	str	r3, [r7, #40]	; 0x28
	return key;
    b2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	k.key = arch_irq_lock();
    b2b6:	617b      	str	r3, [r7, #20]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b2b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
    b2ba:	f000 fb43 	bl	b944 <z_spin_lock_valid>
    b2be:	4603      	mov	r3, r0
    b2c0:	f083 0301 	eor.w	r3, r3, #1
    b2c4:	b2db      	uxtb	r3, r3
    b2c6:	2b00      	cmp	r3, #0
    b2c8:	d00d      	beq.n	b2e6 <k_mem_slab_alloc+0x5a>
    b2ca:	2381      	movs	r3, #129	; 0x81
    b2cc:	4a3c      	ldr	r2, [pc, #240]	; (b3c0 <k_mem_slab_alloc+0x134>)
    b2ce:	493d      	ldr	r1, [pc, #244]	; (b3c4 <k_mem_slab_alloc+0x138>)
    b2d0:	483d      	ldr	r0, [pc, #244]	; (b3c8 <k_mem_slab_alloc+0x13c>)
    b2d2:	f004 fccf 	bl	fc74 <printk>
    b2d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
    b2d8:	483c      	ldr	r0, [pc, #240]	; (b3cc <k_mem_slab_alloc+0x140>)
    b2da:	f004 fccb 	bl	fc74 <printk>
    b2de:	2181      	movs	r1, #129	; 0x81
    b2e0:	4837      	ldr	r0, [pc, #220]	; (b3c0 <k_mem_slab_alloc+0x134>)
    b2e2:	f005 f923 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    b2e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    b2e8:	f000 fb64 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    b2ec:	697b      	ldr	r3, [r7, #20]
    b2ee:	61fb      	str	r3, [r7, #28]
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    b2f0:	68fb      	ldr	r3, [r7, #12]
    b2f2:	699b      	ldr	r3, [r3, #24]
    b2f4:	2b00      	cmp	r3, #0
    b2f6:	d010      	beq.n	b31a <k_mem_slab_alloc+0x8e>
		/* take a free block */
		*mem = slab->free_list;
    b2f8:	68fb      	ldr	r3, [r7, #12]
    b2fa:	699a      	ldr	r2, [r3, #24]
    b2fc:	68bb      	ldr	r3, [r7, #8]
    b2fe:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)(slab->free_list);
    b300:	68fb      	ldr	r3, [r7, #12]
    b302:	699b      	ldr	r3, [r3, #24]
    b304:	681a      	ldr	r2, [r3, #0]
    b306:	68fb      	ldr	r3, [r7, #12]
    b308:	619a      	str	r2, [r3, #24]
		slab->num_used++;
    b30a:	68fb      	ldr	r3, [r7, #12]
    b30c:	69db      	ldr	r3, [r3, #28]
    b30e:	1c5a      	adds	r2, r3, #1
    b310:	68fb      	ldr	r3, [r7, #12]
    b312:	61da      	str	r2, [r3, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    b314:	2300      	movs	r3, #0
    b316:	637b      	str	r3, [r7, #52]	; 0x34
    b318:	e027      	b.n	b36a <k_mem_slab_alloc+0xde>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    b31a:	e9d7 2300 	ldrd	r2, r3, [r7]
    b31e:	f04f 0000 	mov.w	r0, #0
    b322:	f04f 0100 	mov.w	r1, #0
    b326:	428b      	cmp	r3, r1
    b328:	bf08      	it	eq
    b32a:	4282      	cmpeq	r2, r0
    b32c:	d106      	bne.n	b33c <k_mem_slab_alloc+0xb0>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
    b32e:	68bb      	ldr	r3, [r7, #8]
    b330:	2200      	movs	r2, #0
    b332:	601a      	str	r2, [r3, #0]
		result = -ENOMEM;
    b334:	f06f 030b 	mvn.w	r3, #11
    b338:	637b      	str	r3, [r7, #52]	; 0x34
    b33a:	e016      	b.n	b36a <k_mem_slab_alloc+0xde>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    b33c:	68fb      	ldr	r3, [r7, #12]
    b33e:	f103 0008 	add.w	r0, r3, #8
    b342:	68f9      	ldr	r1, [r7, #12]
    b344:	e9d7 2300 	ldrd	r2, r3, [r7]
    b348:	e9cd 2300 	strd	r2, r3, [sp]
    b34c:	460a      	mov	r2, r1
    b34e:	69f9      	ldr	r1, [r7, #28]
    b350:	f002 fa7e 	bl	d850 <z_pend_curr>
    b354:	6378      	str	r0, [r7, #52]	; 0x34
		if (result == 0) {
    b356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b358:	2b00      	cmp	r3, #0
    b35a:	d104      	bne.n	b366 <k_mem_slab_alloc+0xda>
			*mem = _current->base.swap_data;
    b35c:	4b1c      	ldr	r3, [pc, #112]	; (b3d0 <k_mem_slab_alloc+0x144>)
    b35e:	689b      	ldr	r3, [r3, #8]
    b360:	695a      	ldr	r2, [r3, #20]
    b362:	68bb      	ldr	r3, [r7, #8]
    b364:	601a      	str	r2, [r3, #0]
		}

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

		return result;
    b366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    b368:	e025      	b.n	b3b6 <k_mem_slab_alloc+0x12a>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);
    b36a:	68fb      	ldr	r3, [r7, #12]
    b36c:	3308      	adds	r3, #8
    b36e:	627b      	str	r3, [r7, #36]	; 0x24
    b370:	69fb      	ldr	r3, [r7, #28]
    b372:	61bb      	str	r3, [r7, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b374:	6a78      	ldr	r0, [r7, #36]	; 0x24
    b376:	f000 fb01 	bl	b97c <z_spin_unlock_valid>
    b37a:	4603      	mov	r3, r0
    b37c:	f083 0301 	eor.w	r3, r3, #1
    b380:	b2db      	uxtb	r3, r3
    b382:	2b00      	cmp	r3, #0
    b384:	d00d      	beq.n	b3a2 <k_mem_slab_alloc+0x116>
    b386:	23ac      	movs	r3, #172	; 0xac
    b388:	4a0d      	ldr	r2, [pc, #52]	; (b3c0 <k_mem_slab_alloc+0x134>)
    b38a:	4912      	ldr	r1, [pc, #72]	; (b3d4 <k_mem_slab_alloc+0x148>)
    b38c:	480e      	ldr	r0, [pc, #56]	; (b3c8 <k_mem_slab_alloc+0x13c>)
    b38e:	f004 fc71 	bl	fc74 <printk>
    b392:	6a79      	ldr	r1, [r7, #36]	; 0x24
    b394:	4810      	ldr	r0, [pc, #64]	; (b3d8 <k_mem_slab_alloc+0x14c>)
    b396:	f004 fc6d 	bl	fc74 <printk>
    b39a:	21ac      	movs	r1, #172	; 0xac
    b39c:	4808      	ldr	r0, [pc, #32]	; (b3c0 <k_mem_slab_alloc+0x134>)
    b39e:	f005 f8c5 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    b3a2:	69bb      	ldr	r3, [r7, #24]
    b3a4:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
    b3a6:	6a3b      	ldr	r3, [r7, #32]
    b3a8:	f383 8811 	msr	BASEPRI, r3
    b3ac:	f3bf 8f6f 	isb	sy
}
    b3b0:	bf00      	nop
}
    b3b2:	bf00      	nop

	return result;
    b3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
    b3b6:	4618      	mov	r0, r3
    b3b8:	3738      	adds	r7, #56	; 0x38
    b3ba:	46bd      	mov	sp, r7
    b3bc:	bd80      	pop	{r7, pc}
    b3be:	bf00      	nop
    b3c0:	00019e6c 	.word	0x00019e6c
    b3c4:	00019e94 	.word	0x00019e94
    b3c8:	00019e2c 	.word	0x00019e2c
    b3cc:	00019eac 	.word	0x00019eac
    b3d0:	20000c00 	.word	0x20000c00
    b3d4:	00019ec4 	.word	0x00019ec4
    b3d8:	00019edc 	.word	0x00019edc

0000b3dc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    b3dc:	b580      	push	{r7, lr}
    b3de:	b090      	sub	sp, #64	; 0x40
    b3e0:	af00      	add	r7, sp, #0
    b3e2:	6078      	str	r0, [r7, #4]
    b3e4:	6039      	str	r1, [r7, #0]
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    b3e6:	687b      	ldr	r3, [r7, #4]
    b3e8:	3308      	adds	r3, #8
    b3ea:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
    b3ec:	f04f 0320 	mov.w	r3, #32
    b3f0:	f3ef 8211 	mrs	r2, BASEPRI
    b3f4:	f383 8811 	msr	BASEPRI, r3
    b3f8:	f3bf 8f6f 	isb	sy
    b3fc:	637a      	str	r2, [r7, #52]	; 0x34
    b3fe:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
    b400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	k.key = arch_irq_lock();
    b402:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    b404:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b406:	f000 fa9d 	bl	b944 <z_spin_lock_valid>
    b40a:	4603      	mov	r3, r0
    b40c:	f083 0301 	eor.w	r3, r3, #1
    b410:	b2db      	uxtb	r3, r3
    b412:	2b00      	cmp	r3, #0
    b414:	d00d      	beq.n	b432 <k_mem_slab_free+0x56>
    b416:	2381      	movs	r3, #129	; 0x81
    b418:	4a38      	ldr	r2, [pc, #224]	; (b4fc <k_mem_slab_free+0x120>)
    b41a:	4939      	ldr	r1, [pc, #228]	; (b500 <k_mem_slab_free+0x124>)
    b41c:	4839      	ldr	r0, [pc, #228]	; (b504 <k_mem_slab_free+0x128>)
    b41e:	f004 fc29 	bl	fc74 <printk>
    b422:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    b424:	4838      	ldr	r0, [pc, #224]	; (b508 <k_mem_slab_free+0x12c>)
    b426:	f004 fc25 	bl	fc74 <printk>
    b42a:	2181      	movs	r1, #129	; 0x81
    b42c:	4833      	ldr	r0, [pc, #204]	; (b4fc <k_mem_slab_free+0x120>)
    b42e:	f005 f87d 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    b432:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    b434:	f000 fabe 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    b438:	68bb      	ldr	r3, [r7, #8]
    b43a:	613b      	str	r3, [r7, #16]

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    b43c:	687b      	ldr	r3, [r7, #4]
    b43e:	699b      	ldr	r3, [r3, #24]
    b440:	2b00      	cmp	r3, #0
    b442:	d124      	bne.n	b48e <k_mem_slab_free+0xb2>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    b444:	687b      	ldr	r3, [r7, #4]
    b446:	4618      	mov	r0, r3
    b448:	f002 fac0 	bl	d9cc <z_unpend_first_thread>
    b44c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if (pending_thread != NULL) {
    b44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b450:	2b00      	cmp	r3, #0
    b452:	d01c      	beq.n	b48e <k_mem_slab_free+0xb2>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    b454:	683b      	ldr	r3, [r7, #0]
    b456:	681b      	ldr	r3, [r3, #0]
    b458:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    b45a:	62fa      	str	r2, [r7, #44]	; 0x2c
    b45c:	2200      	movs	r2, #0
    b45e:	62ba      	str	r2, [r7, #40]	; 0x28
    b460:	627b      	str	r3, [r7, #36]	; 0x24
    b462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b464:	623b      	str	r3, [r7, #32]
    b466:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b468:	61fb      	str	r3, [r7, #28]

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    b46a:	6a3b      	ldr	r3, [r7, #32]
    b46c:	69fa      	ldr	r2, [r7, #28]
    b46e:	679a      	str	r2, [r3, #120]	; 0x78
}
    b470:	bf00      	nop
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    b472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    b476:	615a      	str	r2, [r3, #20]
}
    b478:	bf00      	nop
			z_ready_thread(pending_thread);
    b47a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    b47c:	f001 fe10 	bl	d0a0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    b480:	687b      	ldr	r3, [r7, #4]
    b482:	3308      	adds	r3, #8
    b484:	6939      	ldr	r1, [r7, #16]
    b486:	4618      	mov	r0, r3
    b488:	f002 fc3e 	bl	dd08 <z_reschedule>
    b48c:	e032      	b.n	b4f4 <k_mem_slab_free+0x118>
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    b48e:	683b      	ldr	r3, [r7, #0]
    b490:	681b      	ldr	r3, [r3, #0]
    b492:	687a      	ldr	r2, [r7, #4]
    b494:	6992      	ldr	r2, [r2, #24]
    b496:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    b498:	683b      	ldr	r3, [r7, #0]
    b49a:	681a      	ldr	r2, [r3, #0]
    b49c:	687b      	ldr	r3, [r7, #4]
    b49e:	619a      	str	r2, [r3, #24]
	slab->num_used--;
    b4a0:	687b      	ldr	r3, [r7, #4]
    b4a2:	69db      	ldr	r3, [r3, #28]
    b4a4:	1e5a      	subs	r2, r3, #1
    b4a6:	687b      	ldr	r3, [r7, #4]
    b4a8:	61da      	str	r2, [r3, #28]

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
    b4aa:	687b      	ldr	r3, [r7, #4]
    b4ac:	3308      	adds	r3, #8
    b4ae:	61bb      	str	r3, [r7, #24]
    b4b0:	693b      	ldr	r3, [r7, #16]
    b4b2:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    b4b4:	69b8      	ldr	r0, [r7, #24]
    b4b6:	f000 fa61 	bl	b97c <z_spin_unlock_valid>
    b4ba:	4603      	mov	r3, r0
    b4bc:	f083 0301 	eor.w	r3, r3, #1
    b4c0:	b2db      	uxtb	r3, r3
    b4c2:	2b00      	cmp	r3, #0
    b4c4:	d00d      	beq.n	b4e2 <k_mem_slab_free+0x106>
    b4c6:	23ac      	movs	r3, #172	; 0xac
    b4c8:	4a0c      	ldr	r2, [pc, #48]	; (b4fc <k_mem_slab_free+0x120>)
    b4ca:	4910      	ldr	r1, [pc, #64]	; (b50c <k_mem_slab_free+0x130>)
    b4cc:	480d      	ldr	r0, [pc, #52]	; (b504 <k_mem_slab_free+0x128>)
    b4ce:	f004 fbd1 	bl	fc74 <printk>
    b4d2:	69b9      	ldr	r1, [r7, #24]
    b4d4:	480e      	ldr	r0, [pc, #56]	; (b510 <k_mem_slab_free+0x134>)
    b4d6:	f004 fbcd 	bl	fc74 <printk>
    b4da:	21ac      	movs	r1, #172	; 0xac
    b4dc:	4807      	ldr	r0, [pc, #28]	; (b4fc <k_mem_slab_free+0x120>)
    b4de:	f005 f825 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    b4e2:	68fb      	ldr	r3, [r7, #12]
    b4e4:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
    b4e6:	697b      	ldr	r3, [r7, #20]
    b4e8:	f383 8811 	msr	BASEPRI, r3
    b4ec:	f3bf 8f6f 	isb	sy
}
    b4f0:	bf00      	nop
}
    b4f2:	bf00      	nop
}
    b4f4:	3740      	adds	r7, #64	; 0x40
    b4f6:	46bd      	mov	sp, r7
    b4f8:	bd80      	pop	{r7, pc}
    b4fa:	bf00      	nop
    b4fc:	00019e6c 	.word	0x00019e6c
    b500:	00019e94 	.word	0x00019e94
    b504:	00019e2c 	.word	0x00019e2c
    b508:	00019eac 	.word	0x00019eac
    b50c:	00019ec4 	.word	0x00019ec4
    b510:	00019edc 	.word	0x00019edc

0000b514 <z_add_thread_timeout>:
}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
    b514:	b580      	push	{r7, lr}
    b516:	b084      	sub	sp, #16
    b518:	af00      	add	r7, sp, #0
    b51a:	60f8      	str	r0, [r7, #12]
    b51c:	e9c7 2300 	strd	r2, r3, [r7]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    b520:	68fb      	ldr	r3, [r7, #12]
    b522:	f103 0018 	add.w	r0, r3, #24
    b526:	e9d7 2300 	ldrd	r2, r3, [r7]
    b52a:	4903      	ldr	r1, [pc, #12]	; (b538 <z_add_thread_timeout+0x24>)
    b52c:	f003 fa18 	bl	e960 <z_add_timeout>
}
    b530:	bf00      	nop
    b532:	3710      	adds	r7, #16
    b534:	46bd      	mov	sp, r7
    b536:	bd80      	pop	{r7, pc}
    b538:	0000d715 	.word	0x0000d715

0000b53c <z_is_idle_thread_entry>:
{
	(void) z_reschedule_irqlock(arch_irq_lock());
}

static inline bool z_is_idle_thread_entry(void *entry_point)
{
    b53c:	b480      	push	{r7}
    b53e:	b083      	sub	sp, #12
    b540:	af00      	add	r7, sp, #0
    b542:	6078      	str	r0, [r7, #4]
	return entry_point == idle;
    b544:	687b      	ldr	r3, [r7, #4]
    b546:	4a05      	ldr	r2, [pc, #20]	; (b55c <z_is_idle_thread_entry+0x20>)
    b548:	4293      	cmp	r3, r2
    b54a:	bf0c      	ite	eq
    b54c:	2301      	moveq	r3, #1
    b54e:	2300      	movne	r3, #0
    b550:	b2db      	uxtb	r3, r3
}
    b552:	4618      	mov	r0, r3
    b554:	370c      	adds	r7, #12
    b556:	46bd      	mov	sp, r7
    b558:	bc80      	pop	{r7}
    b55a:	4770      	bx	lr
    b55c:	0000ba0d 	.word	0x0000ba0d

0000b560 <log_const_source_id>:
{
    b560:	b480      	push	{r7}
    b562:	b083      	sub	sp, #12
    b564:	af00      	add	r7, sp, #0
    b566:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    b568:	687b      	ldr	r3, [r7, #4]
    b56a:	4a04      	ldr	r2, [pc, #16]	; (b57c <log_const_source_id+0x1c>)
    b56c:	1a9b      	subs	r3, r3, r2
    b56e:	08db      	lsrs	r3, r3, #3
}
    b570:	4618      	mov	r0, r3
    b572:	370c      	adds	r7, #12
    b574:	46bd      	mov	sp, r7
    b576:	bc80      	pop	{r7}
    b578:	4770      	bx	lr
    b57a:	bf00      	nop
    b57c:	000170bc 	.word	0x000170bc

0000b580 <setup_thread_stack>:
#endif /* CONFIG_STACK_GROWS_UP */
#endif /* CONFIG_STACK_POINTER_RANDOM */

static char *setup_thread_stack(struct k_thread *new_thread,
				k_thread_stack_t *stack, size_t stack_size)
{
    b580:	b580      	push	{r7, lr}
    b582:	b09a      	sub	sp, #104	; 0x68
    b584:	af06      	add	r7, sp, #24
    b586:	60f8      	str	r0, [r7, #12]
    b588:	60b9      	str	r1, [r7, #8]
    b58a:	607a      	str	r2, [r7, #4]
	size_t stack_obj_size, stack_buf_size;
	char *stack_ptr, *stack_buf_start;
	size_t delta = 0;
    b58c:	2300      	movs	r3, #0
    b58e:	64fb      	str	r3, [r7, #76]	; 0x4c
		stack_buf_size = stack_obj_size - K_THREAD_STACK_RESERVED;
	} else
#endif
	{
		/* Object cannot host a user mode thread */
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    b590:	687b      	ldr	r3, [r7, #4]
    b592:	3307      	adds	r3, #7
    b594:	f023 0307 	bic.w	r3, r3, #7
    b598:	64bb      	str	r3, [r7, #72]	; 0x48
		stack_buf_start = Z_KERNEL_STACK_BUFFER(stack);
    b59a:	68b8      	ldr	r0, [r7, #8]
    b59c:	f00a faeb 	bl	15b76 <Z_KERNEL_STACK_BUFFER>
    b5a0:	6478      	str	r0, [r7, #68]	; 0x44
		stack_buf_size = stack_obj_size - K_KERNEL_STACK_RESERVED;
    b5a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b5a4:	643b      	str	r3, [r7, #64]	; 0x40
	}

	/* Initial stack pointer at the high end of the stack object, may
	 * be reduced later in this function by TLS or random offset
	 */
	stack_ptr = (char *)stack + stack_obj_size;
    b5a6:	68ba      	ldr	r2, [r7, #8]
    b5a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b5aa:	4413      	add	r3, r2
    b5ac:	63fb      	str	r3, [r7, #60]	; 0x3c

	LOG_DBG("stack %p for thread %p: obj_size=%zu buf_start=%p "
    b5ae:	2303      	movs	r3, #3
    b5b0:	2b03      	cmp	r3, #3
    b5b2:	d953      	bls.n	b65c <setup_thread_stack+0xdc>
    b5b4:	f00a f9b4 	bl	15920 <k_is_user_context>
    b5b8:	4603      	mov	r3, r0
    b5ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    b5be:	2300      	movs	r3, #0
    b5c0:	637b      	str	r3, [r7, #52]	; 0x34
    b5c2:	2303      	movs	r3, #3
    b5c4:	2b00      	cmp	r3, #0
    b5c6:	d007      	beq.n	b5d8 <setup_thread_stack+0x58>
    b5c8:	4b31      	ldr	r3, [pc, #196]	; (b690 <setup_thread_stack+0x110>)
    b5ca:	681b      	ldr	r3, [r3, #0]
    b5cc:	4618      	mov	r0, r3
    b5ce:	f7ff ffc7 	bl	b560 <log_const_source_id>
    b5d2:	4603      	mov	r3, r0
    b5d4:	b29b      	uxth	r3, r3
    b5d6:	e000      	b.n	b5da <setup_thread_stack+0x5a>
    b5d8:	2300      	movs	r3, #0
    b5da:	873b      	strh	r3, [r7, #56]	; 0x38
    b5dc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    b5e0:	2204      	movs	r2, #4
    b5e2:	f362 0302 	bfi	r3, r2, #0, #3
    b5e6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    b5ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    b5ee:	f36f 03c5 	bfc	r3, #3, #3
    b5f2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    b5f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    b5f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    b5fc:	b29a      	uxth	r2, r3
    b5fe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    b600:	f362 138f 	bfi	r3, r2, #6, #10
    b604:	863b      	strh	r3, [r7, #48]	; 0x30
    b606:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    b60a:	2b00      	cmp	r3, #0
    b60c:	d010      	beq.n	b630 <setup_thread_stack+0xb0>
    b60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b610:	9304      	str	r3, [sp, #16]
    b612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b614:	9303      	str	r3, [sp, #12]
    b616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b618:	9302      	str	r3, [sp, #8]
    b61a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b61c:	9301      	str	r3, [sp, #4]
    b61e:	68fb      	ldr	r3, [r7, #12]
    b620:	9300      	str	r3, [sp, #0]
    b622:	68bb      	ldr	r3, [r7, #8]
    b624:	4a1b      	ldr	r2, [pc, #108]	; (b694 <setup_thread_stack+0x114>)
    b626:	491c      	ldr	r1, [pc, #112]	; (b698 <setup_thread_stack+0x118>)
    b628:	8e38      	ldrh	r0, [r7, #48]	; 0x30
    b62a:	f7f7 fb27 	bl	2c7c <log_from_user>
    b62e:	e016      	b.n	b65e <setup_thread_stack+0xde>
    b630:	4b18      	ldr	r3, [pc, #96]	; (b694 <setup_thread_stack+0x114>)
    b632:	617b      	str	r3, [r7, #20]
    b634:	68bb      	ldr	r3, [r7, #8]
    b636:	61bb      	str	r3, [r7, #24]
    b638:	68fb      	ldr	r3, [r7, #12]
    b63a:	61fb      	str	r3, [r7, #28]
    b63c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    b63e:	623b      	str	r3, [r7, #32]
    b640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    b642:	627b      	str	r3, [r7, #36]	; 0x24
    b644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    b646:	62bb      	str	r3, [r7, #40]	; 0x28
    b648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    b64a:	62fb      	str	r3, [r7, #44]	; 0x2c
    b64c:	f107 0114 	add.w	r1, r7, #20
    b650:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    b652:	2207      	movs	r2, #7
    b654:	4810      	ldr	r0, [pc, #64]	; (b698 <setup_thread_stack+0x118>)
    b656:	f005 fc69 	bl	10f2c <log_n>
    b65a:	e000      	b.n	b65e <setup_thread_stack+0xde>
    b65c:	bf00      	nop
		(struct _thread_userspace_local_data *)(stack_ptr - delta);
#endif
#if CONFIG_STACK_POINTER_RANDOM
	delta += random_offset(stack_buf_size);
#endif
	delta = ROUND_UP(delta, ARCH_STACK_PTR_ALIGN);
    b65e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b660:	3307      	adds	r3, #7
    b662:	f023 0307 	bic.w	r3, r3, #7
    b666:	64fb      	str	r3, [r7, #76]	; 0x4c
	 * will need to appropriately update this.
	 *
	 * The bounds tracked here correspond to the area of the stack object
	 * that the thread can access, which includes TLS.
	 */
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    b668:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    b66a:	68fb      	ldr	r3, [r7, #12]
    b66c:	665a      	str	r2, [r3, #100]	; 0x64
	new_thread->stack_info.size = stack_buf_size;
    b66e:	68fb      	ldr	r3, [r7, #12]
    b670:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    b672:	669a      	str	r2, [r3, #104]	; 0x68
	new_thread->stack_info.delta = delta;
    b674:	68fb      	ldr	r3, [r7, #12]
    b676:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    b678:	66da      	str	r2, [r3, #108]	; 0x6c
#endif
	stack_ptr -= delta;
    b67a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    b67c:	425b      	negs	r3, r3
    b67e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    b680:	4413      	add	r3, r2
    b682:	63fb      	str	r3, [r7, #60]	; 0x3c

	return stack_ptr;
    b684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    b686:	4618      	mov	r0, r3
    b688:	3750      	adds	r7, #80	; 0x50
    b68a:	46bd      	mov	sp, r7
    b68c:	bd80      	pop	{r7, pc}
    b68e:	bf00      	nop
    b690:	2000016c 	.word	0x2000016c
    b694:	0001ad6c 	.word	0x0001ad6c
    b698:	00019f44 	.word	0x00019f44

0000b69c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    b69c:	b580      	push	{r7, lr}
    b69e:	b08a      	sub	sp, #40	; 0x28
    b6a0:	af04      	add	r7, sp, #16
    b6a2:	60f8      	str	r0, [r7, #12]
    b6a4:	60b9      	str	r1, [r7, #8]
    b6a6:	607a      	str	r2, [r7, #4]
    b6a8:	603b      	str	r3, [r7, #0]
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    b6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b6ac:	2b0f      	cmp	r3, #15
    b6ae:	d108      	bne.n	b6c2 <z_setup_new_thread+0x26>
    b6b0:	6838      	ldr	r0, [r7, #0]
    b6b2:	f7ff ff43 	bl	b53c <z_is_idle_thread_entry>
    b6b6:	4603      	mov	r3, r0
    b6b8:	f083 0301 	eor.w	r3, r3, #1
    b6bc:	b2db      	uxtb	r3, r3
    b6be:	2b00      	cmp	r3, #0
    b6c0:	d019      	beq.n	b6f6 <z_setup_new_thread+0x5a>
    b6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b6c4:	f113 0f10 	cmn.w	r3, #16
    b6c8:	db02      	blt.n	b6d0 <z_setup_new_thread+0x34>
    b6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b6cc:	2b0e      	cmp	r3, #14
    b6ce:	dd12      	ble.n	b6f6 <z_setup_new_thread+0x5a>
    b6d0:	f240 2305 	movw	r3, #517	; 0x205
    b6d4:	4a21      	ldr	r2, [pc, #132]	; (b75c <z_setup_new_thread+0xc0>)
    b6d6:	4922      	ldr	r1, [pc, #136]	; (b760 <z_setup_new_thread+0xc4>)
    b6d8:	4822      	ldr	r0, [pc, #136]	; (b764 <z_setup_new_thread+0xc8>)
    b6da:	f004 facb 	bl	fc74 <printk>
    b6de:	f06f 030f 	mvn.w	r3, #15
    b6e2:	220e      	movs	r2, #14
    b6e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    b6e6:	4820      	ldr	r0, [pc, #128]	; (b768 <z_setup_new_thread+0xcc>)
    b6e8:	f004 fac4 	bl	fc74 <printk>
    b6ec:	f240 2105 	movw	r1, #517	; 0x205
    b6f0:	481a      	ldr	r0, [pc, #104]	; (b75c <z_setup_new_thread+0xc0>)
    b6f2:	f004 ff1b 	bl	1052c <assert_post_action>
	new_thread->syscall_frame = NULL;

	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);
    b6f6:	68fb      	ldr	r3, [r7, #12]
    b6f8:	3358      	adds	r3, #88	; 0x58
    b6fa:	4618      	mov	r0, r3
    b6fc:	f00a fa69 	bl	15bd2 <z_waitq_init>

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    b700:	68f8      	ldr	r0, [r7, #12]
    b702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b704:	2204      	movs	r2, #4
    b706:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    b708:	f00a fabe 	bl	15c88 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    b70c:	687a      	ldr	r2, [r7, #4]
    b70e:	68b9      	ldr	r1, [r7, #8]
    b710:	68f8      	ldr	r0, [r7, #12]
    b712:	f7ff ff35 	bl	b580 <setup_thread_stack>
    b716:	6178      	str	r0, [r7, #20]
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b718:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b71a:	9302      	str	r3, [sp, #8]
    b71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b71e:	9301      	str	r3, [sp, #4]
    b720:	6a3b      	ldr	r3, [r7, #32]
    b722:	9300      	str	r3, [sp, #0]
    b724:	683b      	ldr	r3, [r7, #0]
    b726:	697a      	ldr	r2, [r7, #20]
    b728:	68b9      	ldr	r1, [r7, #8]
    b72a:	68f8      	ldr	r0, [r7, #12]
    b72c:	f7fa f9a4 	bl	5a78 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    b730:	68fb      	ldr	r3, [r7, #12]
    b732:	2200      	movs	r2, #0
    b734:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    b736:	4b0d      	ldr	r3, [pc, #52]	; (b76c <z_setup_new_thread+0xd0>)
    b738:	689b      	ldr	r3, [r3, #8]
    b73a:	2b00      	cmp	r3, #0
    b73c:	d104      	bne.n	b748 <z_setup_new_thread+0xac>
		new_thread->resource_pool = NULL;
    b73e:	68fb      	ldr	r3, [r7, #12]
    b740:	2200      	movs	r2, #0
    b742:	671a      	str	r2, [r3, #112]	; 0x70
		return stack_ptr;
    b744:	697b      	ldr	r3, [r7, #20]
    b746:	e005      	b.n	b754 <z_setup_new_thread+0xb8>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    b748:	4b08      	ldr	r3, [pc, #32]	; (b76c <z_setup_new_thread+0xd0>)
    b74a:	689b      	ldr	r3, [r3, #8]
    b74c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    b74e:	68fb      	ldr	r3, [r7, #12]
    b750:	671a      	str	r2, [r3, #112]	; 0x70

#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
    b752:	697b      	ldr	r3, [r7, #20]
}
    b754:	4618      	mov	r0, r3
    b756:	3718      	adds	r7, #24
    b758:	46bd      	mov	sp, r7
    b75a:	bd80      	pop	{r7, pc}
    b75c:	00019f98 	.word	0x00019f98
    b760:	00019fbc 	.word	0x00019fbc
    b764:	0001a03c 	.word	0x0001a03c
    b768:	0001a05c 	.word	0x0001a05c
    b76c:	20000c00 	.word	0x20000c00

0000b770 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, uint32_t options, k_timeout_t delay)
{
    b770:	b580      	push	{r7, lr}
    b772:	b08c      	sub	sp, #48	; 0x30
    b774:	af06      	add	r7, sp, #24
    b776:	60f8      	str	r0, [r7, #12]
    b778:	60b9      	str	r1, [r7, #8]
    b77a:	607a      	str	r2, [r7, #4]
    b77c:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b77e:	f3ef 8305 	mrs	r3, IPSR
    b782:	617b      	str	r3, [r7, #20]
  return(result);
    b784:	697b      	ldr	r3, [r7, #20]
	return (__get_IPSR()) ? (true) : (false);
    b786:	2b00      	cmp	r3, #0
    b788:	bf14      	ite	ne
    b78a:	2301      	movne	r3, #1
    b78c:	2300      	moveq	r3, #0
    b78e:	b2db      	uxtb	r3, r3
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    b790:	2b00      	cmp	r3, #0
    b792:	d00e      	beq.n	b7b2 <z_impl_k_thread_create+0x42>
    b794:	f240 236e 	movw	r3, #622	; 0x26e
    b798:	4a19      	ldr	r2, [pc, #100]	; (b800 <z_impl_k_thread_create+0x90>)
    b79a:	491a      	ldr	r1, [pc, #104]	; (b804 <z_impl_k_thread_create+0x94>)
    b79c:	481a      	ldr	r0, [pc, #104]	; (b808 <z_impl_k_thread_create+0x98>)
    b79e:	f004 fa69 	bl	fc74 <printk>
    b7a2:	481a      	ldr	r0, [pc, #104]	; (b80c <z_impl_k_thread_create+0x9c>)
    b7a4:	f004 fa66 	bl	fc74 <printk>
    b7a8:	f240 216e 	movw	r1, #622	; 0x26e
    b7ac:	4814      	ldr	r0, [pc, #80]	; (b800 <z_impl_k_thread_create+0x90>)
    b7ae:	f004 febd 	bl	1052c <assert_post_action>

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b7b2:	2300      	movs	r3, #0
    b7b4:	9305      	str	r3, [sp, #20]
    b7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    b7b8:	9304      	str	r3, [sp, #16]
    b7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    b7bc:	9303      	str	r3, [sp, #12]
    b7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    b7c0:	9302      	str	r3, [sp, #8]
    b7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b7c4:	9301      	str	r3, [sp, #4]
    b7c6:	6a3b      	ldr	r3, [r7, #32]
    b7c8:	9300      	str	r3, [sp, #0]
    b7ca:	683b      	ldr	r3, [r7, #0]
    b7cc:	687a      	ldr	r2, [r7, #4]
    b7ce:	68b9      	ldr	r1, [r7, #8]
    b7d0:	68f8      	ldr	r0, [r7, #12]
    b7d2:	f7ff ff63 	bl	b69c <z_setup_new_thread>
			  prio, options, NULL);

	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    b7d6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
    b7da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b7de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    b7e2:	428b      	cmp	r3, r1
    b7e4:	bf08      	it	eq
    b7e6:	4282      	cmpeq	r2, r0
    b7e8:	d004      	beq.n	b7f4 <z_impl_k_thread_create+0x84>
		schedule_new_thread(new_thread, delay);
    b7ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
    b7ee:	68f8      	ldr	r0, [r7, #12]
    b7f0:	f00a fa2d 	bl	15c4e <schedule_new_thread>
	}

	return new_thread;
    b7f4:	68fb      	ldr	r3, [r7, #12]
}
    b7f6:	4618      	mov	r0, r3
    b7f8:	3718      	adds	r7, #24
    b7fa:	46bd      	mov	sp, r7
    b7fc:	bd80      	pop	{r7, pc}
    b7fe:	bf00      	nop
    b800:	00019f98 	.word	0x00019f98
    b804:	0001a090 	.word	0x0001a090
    b808:	0001a03c 	.word	0x0001a03c
    b80c:	0001a0a4 	.word	0x0001a0a4

0000b810 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    b810:	b5f0      	push	{r4, r5, r6, r7, lr}
    b812:	b08d      	sub	sp, #52	; 0x34
    b814:	af06      	add	r7, sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    b816:	4b45      	ldr	r3, [pc, #276]	; (b92c <z_init_static_threads+0x11c>)
    b818:	617b      	str	r3, [r7, #20]
    b81a:	e029      	b.n	b870 <z_init_static_threads+0x60>
		z_setup_new_thread(
    b81c:	697b      	ldr	r3, [r7, #20]
    b81e:	681e      	ldr	r6, [r3, #0]
    b820:	697b      	ldr	r3, [r7, #20]
    b822:	685b      	ldr	r3, [r3, #4]
    b824:	60fb      	str	r3, [r7, #12]
    b826:	697b      	ldr	r3, [r7, #20]
    b828:	689a      	ldr	r2, [r3, #8]
    b82a:	60ba      	str	r2, [r7, #8]
    b82c:	697b      	ldr	r3, [r7, #20]
    b82e:	68d8      	ldr	r0, [r3, #12]
    b830:	6078      	str	r0, [r7, #4]
    b832:	697b      	ldr	r3, [r7, #20]
    b834:	691b      	ldr	r3, [r3, #16]
    b836:	697a      	ldr	r2, [r7, #20]
    b838:	6952      	ldr	r2, [r2, #20]
    b83a:	6979      	ldr	r1, [r7, #20]
    b83c:	6989      	ldr	r1, [r1, #24]
    b83e:	6978      	ldr	r0, [r7, #20]
    b840:	69c0      	ldr	r0, [r0, #28]
    b842:	697c      	ldr	r4, [r7, #20]
    b844:	6a24      	ldr	r4, [r4, #32]
    b846:	697d      	ldr	r5, [r7, #20]
    b848:	6aed      	ldr	r5, [r5, #44]	; 0x2c
    b84a:	9505      	str	r5, [sp, #20]
    b84c:	9404      	str	r4, [sp, #16]
    b84e:	9003      	str	r0, [sp, #12]
    b850:	9102      	str	r1, [sp, #8]
    b852:	9201      	str	r2, [sp, #4]
    b854:	9300      	str	r3, [sp, #0]
    b856:	687b      	ldr	r3, [r7, #4]
    b858:	68ba      	ldr	r2, [r7, #8]
    b85a:	68f9      	ldr	r1, [r7, #12]
    b85c:	4630      	mov	r0, r6
    b85e:	f7ff ff1d 	bl	b69c <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    b862:	697b      	ldr	r3, [r7, #20]
    b864:	681b      	ldr	r3, [r3, #0]
    b866:	697a      	ldr	r2, [r7, #20]
    b868:	655a      	str	r2, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    b86a:	697b      	ldr	r3, [r7, #20]
    b86c:	3330      	adds	r3, #48	; 0x30
    b86e:	617b      	str	r3, [r7, #20]
    b870:	697b      	ldr	r3, [r7, #20]
    b872:	4a2f      	ldr	r2, [pc, #188]	; (b930 <z_init_static_threads+0x120>)
    b874:	4293      	cmp	r3, r2
    b876:	d90e      	bls.n	b896 <z_init_static_threads+0x86>
    b878:	f240 23d5 	movw	r3, #725	; 0x2d5
    b87c:	4a2d      	ldr	r2, [pc, #180]	; (b934 <z_init_static_threads+0x124>)
    b87e:	492e      	ldr	r1, [pc, #184]	; (b938 <z_init_static_threads+0x128>)
    b880:	482e      	ldr	r0, [pc, #184]	; (b93c <z_init_static_threads+0x12c>)
    b882:	f004 f9f7 	bl	fc74 <printk>
    b886:	482e      	ldr	r0, [pc, #184]	; (b940 <z_init_static_threads+0x130>)
    b888:	f004 f9f4 	bl	fc74 <printk>
    b88c:	f240 21d5 	movw	r1, #725	; 0x2d5
    b890:	4828      	ldr	r0, [pc, #160]	; (b934 <z_init_static_threads+0x124>)
    b892:	f004 fe4b 	bl	1052c <assert_post_action>
    b896:	697b      	ldr	r3, [r7, #20]
    b898:	4a25      	ldr	r2, [pc, #148]	; (b930 <z_init_static_threads+0x120>)
    b89a:	4293      	cmp	r3, r2
    b89c:	bf34      	ite	cc
    b89e:	2301      	movcc	r3, #1
    b8a0:	2300      	movcs	r3, #0
    b8a2:	b2db      	uxtb	r3, r3
    b8a4:	2b00      	cmp	r3, #0
    b8a6:	d1b9      	bne.n	b81c <z_init_static_threads+0xc>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    b8a8:	f002 fa92 	bl	ddd0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    b8ac:	4b1f      	ldr	r3, [pc, #124]	; (b92c <z_init_static_threads+0x11c>)
    b8ae:	613b      	str	r3, [r7, #16]
    b8b0:	e019      	b.n	b8e6 <z_init_static_threads+0xd6>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    b8b2:	693b      	ldr	r3, [r7, #16]
    b8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b8b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b8ba:	d011      	beq.n	b8e0 <z_init_static_threads+0xd0>
			schedule_new_thread(thread_data->init_thread,
    b8bc:	693b      	ldr	r3, [r7, #16]
    b8be:	681c      	ldr	r4, [r3, #0]
					    K_MSEC(thread_data->init_delay));
    b8c0:	693b      	ldr	r3, [r7, #16]
    b8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b8c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b8c8:	461a      	mov	r2, r3
    b8ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
    b8ce:	4610      	mov	r0, r2
    b8d0:	4619      	mov	r1, r3
    b8d2:	f00a f82c 	bl	1592e <k_ms_to_ticks_ceil64>
    b8d6:	4602      	mov	r2, r0
    b8d8:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    b8da:	4620      	mov	r0, r4
    b8dc:	f00a f9b7 	bl	15c4e <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    b8e0:	693b      	ldr	r3, [r7, #16]
    b8e2:	3330      	adds	r3, #48	; 0x30
    b8e4:	613b      	str	r3, [r7, #16]
    b8e6:	693b      	ldr	r3, [r7, #16]
    b8e8:	4a11      	ldr	r2, [pc, #68]	; (b930 <z_init_static_threads+0x120>)
    b8ea:	4293      	cmp	r3, r2
    b8ec:	d90e      	bls.n	b90c <z_init_static_threads+0xfc>
    b8ee:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    b8f2:	4a10      	ldr	r2, [pc, #64]	; (b934 <z_init_static_threads+0x124>)
    b8f4:	4910      	ldr	r1, [pc, #64]	; (b938 <z_init_static_threads+0x128>)
    b8f6:	4811      	ldr	r0, [pc, #68]	; (b93c <z_init_static_threads+0x12c>)
    b8f8:	f004 f9bc 	bl	fc74 <printk>
    b8fc:	4810      	ldr	r0, [pc, #64]	; (b940 <z_init_static_threads+0x130>)
    b8fe:	f004 f9b9 	bl	fc74 <printk>
    b902:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    b906:	480b      	ldr	r0, [pc, #44]	; (b934 <z_init_static_threads+0x124>)
    b908:	f004 fe10 	bl	1052c <assert_post_action>
    b90c:	693b      	ldr	r3, [r7, #16]
    b90e:	4a08      	ldr	r2, [pc, #32]	; (b930 <z_init_static_threads+0x120>)
    b910:	4293      	cmp	r3, r2
    b912:	bf34      	ite	cc
    b914:	2301      	movcc	r3, #1
    b916:	2300      	movcs	r3, #0
    b918:	b2db      	uxtb	r3, r3
    b91a:	2b00      	cmp	r3, #0
    b91c:	d1c9      	bne.n	b8b2 <z_init_static_threads+0xa2>
		}
	}
	k_sched_unlock();
    b91e:	f002 fac5 	bl	deac <k_sched_unlock>
}
    b922:	bf00      	nop
    b924:	371c      	adds	r7, #28
    b926:	46bd      	mov	sp, r7
    b928:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b92a:	bf00      	nop
    b92c:	200001e0 	.word	0x200001e0
    b930:	200001e0 	.word	0x200001e0
    b934:	00019f98 	.word	0x00019f98
    b938:	0001a0cc 	.word	0x0001a0cc
    b93c:	0001a03c 	.word	0x0001a03c
    b940:	0001a0fc 	.word	0x0001a0fc

0000b944 <z_spin_lock_valid>:
/* These spinlock assertion predicates are defined here because having
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
    b944:	b480      	push	{r7}
    b946:	b085      	sub	sp, #20
    b948:	af00      	add	r7, sp, #0
    b94a:	6078      	str	r0, [r7, #4]
	uintptr_t thread_cpu = l->thread_cpu;
    b94c:	687b      	ldr	r3, [r7, #4]
    b94e:	681b      	ldr	r3, [r3, #0]
    b950:	60fb      	str	r3, [r7, #12]

	if (thread_cpu != 0U) {
    b952:	68fb      	ldr	r3, [r7, #12]
    b954:	2b00      	cmp	r3, #0
    b956:	d008      	beq.n	b96a <z_spin_lock_valid+0x26>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    b958:	68fb      	ldr	r3, [r7, #12]
    b95a:	f003 0303 	and.w	r3, r3, #3
    b95e:	4a06      	ldr	r2, [pc, #24]	; (b978 <z_spin_lock_valid+0x34>)
    b960:	7d12      	ldrb	r2, [r2, #20]
    b962:	4293      	cmp	r3, r2
    b964:	d101      	bne.n	b96a <z_spin_lock_valid+0x26>
			return false;
    b966:	2300      	movs	r3, #0
    b968:	e000      	b.n	b96c <z_spin_lock_valid+0x28>
		}
	}
	return true;
    b96a:	2301      	movs	r3, #1
}
    b96c:	4618      	mov	r0, r3
    b96e:	3714      	adds	r7, #20
    b970:	46bd      	mov	sp, r7
    b972:	bc80      	pop	{r7}
    b974:	4770      	bx	lr
    b976:	bf00      	nop
    b978:	20000c00 	.word	0x20000c00

0000b97c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
    b97c:	b480      	push	{r7}
    b97e:	b083      	sub	sp, #12
    b980:	af00      	add	r7, sp, #0
    b982:	6078      	str	r0, [r7, #4]
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    b984:	687b      	ldr	r3, [r7, #4]
    b986:	681a      	ldr	r2, [r3, #0]
    b988:	4b09      	ldr	r3, [pc, #36]	; (b9b0 <z_spin_unlock_valid+0x34>)
    b98a:	7d1b      	ldrb	r3, [r3, #20]
    b98c:	4619      	mov	r1, r3
    b98e:	4b08      	ldr	r3, [pc, #32]	; (b9b0 <z_spin_unlock_valid+0x34>)
    b990:	689b      	ldr	r3, [r3, #8]
    b992:	430b      	orrs	r3, r1
    b994:	429a      	cmp	r2, r3
    b996:	d001      	beq.n	b99c <z_spin_unlock_valid+0x20>
		return false;
    b998:	2300      	movs	r3, #0
    b99a:	e003      	b.n	b9a4 <z_spin_unlock_valid+0x28>
	}
	l->thread_cpu = 0;
    b99c:	687b      	ldr	r3, [r7, #4]
    b99e:	2200      	movs	r2, #0
    b9a0:	601a      	str	r2, [r3, #0]
	return true;
    b9a2:	2301      	movs	r3, #1
}
    b9a4:	4618      	mov	r0, r3
    b9a6:	370c      	adds	r7, #12
    b9a8:	46bd      	mov	sp, r7
    b9aa:	bc80      	pop	{r7}
    b9ac:	4770      	bx	lr
    b9ae:	bf00      	nop
    b9b0:	20000c00 	.word	0x20000c00

0000b9b4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
    b9b4:	b480      	push	{r7}
    b9b6:	b083      	sub	sp, #12
    b9b8:	af00      	add	r7, sp, #0
    b9ba:	6078      	str	r0, [r7, #4]
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    b9bc:	4b06      	ldr	r3, [pc, #24]	; (b9d8 <z_spin_lock_set_owner+0x24>)
    b9be:	7d1b      	ldrb	r3, [r3, #20]
    b9c0:	461a      	mov	r2, r3
    b9c2:	4b05      	ldr	r3, [pc, #20]	; (b9d8 <z_spin_lock_set_owner+0x24>)
    b9c4:	689b      	ldr	r3, [r3, #8]
    b9c6:	431a      	orrs	r2, r3
    b9c8:	687b      	ldr	r3, [r7, #4]
    b9ca:	601a      	str	r2, [r3, #0]
}
    b9cc:	bf00      	nop
    b9ce:	370c      	adds	r7, #12
    b9d0:	46bd      	mov	sp, r7
    b9d2:	bc80      	pop	{r7}
    b9d4:	4770      	bx	lr
    b9d6:	bf00      	nop
    b9d8:	20000c00 	.word	0x20000c00

0000b9dc <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
    b9dc:	b580      	push	{r7, lr}
    b9de:	b082      	sub	sp, #8
    b9e0:	af00      	add	r7, sp, #0
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
    b9e2:	f003 f97f 	bl	ece4 <z_get_next_timeout_expiry>
    b9e6:	6078      	str	r0, [r7, #4]
	_kernel.idle = ticks;
    b9e8:	4a07      	ldr	r2, [pc, #28]	; (ba08 <pm_save_idle+0x2c>)
    b9ea:	687b      	ldr	r3, [r7, #4]
    b9ec:	6213      	str	r3, [r2, #32]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    b9ee:	6878      	ldr	r0, [r7, #4]
    b9f0:	f7f8 fb3e 	bl	4070 <pm_system_suspend>
    b9f4:	4603      	mov	r3, r0
    b9f6:	2b00      	cmp	r3, #0
    b9f8:	d101      	bne.n	b9fe <pm_save_idle+0x22>
		k_cpu_idle();
    b9fa:	f00a f965 	bl	15cc8 <k_cpu_idle>
	}
#endif
}
    b9fe:	bf00      	nop
    ba00:	3708      	adds	r7, #8
    ba02:	46bd      	mov	sp, r7
    ba04:	bd80      	pop	{r7, pc}
    ba06:	bf00      	nop
    ba08:	20000c00 	.word	0x20000c00

0000ba0c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    ba0c:	b580      	push	{r7, lr}
    ba0e:	b086      	sub	sp, #24
    ba10:	af00      	add	r7, sp, #0
    ba12:	60f8      	str	r0, [r7, #12]
    ba14:	60b9      	str	r1, [r7, #8]
    ba16:	607a      	str	r2, [r7, #4]
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    ba18:	4b0e      	ldr	r3, [pc, #56]	; (ba54 <idle+0x48>)
    ba1a:	689b      	ldr	r3, [r3, #8]
    ba1c:	f993 300e 	ldrsb.w	r3, [r3, #14]
    ba20:	2b00      	cmp	r3, #0
    ba22:	da09      	bge.n	ba38 <idle+0x2c>
    ba24:	2346      	movs	r3, #70	; 0x46
    ba26:	4a0c      	ldr	r2, [pc, #48]	; (ba58 <idle+0x4c>)
    ba28:	490c      	ldr	r1, [pc, #48]	; (ba5c <idle+0x50>)
    ba2a:	480d      	ldr	r0, [pc, #52]	; (ba60 <idle+0x54>)
    ba2c:	f004 f922 	bl	fc74 <printk>
    ba30:	2146      	movs	r1, #70	; 0x46
    ba32:	4809      	ldr	r0, [pc, #36]	; (ba58 <idle+0x4c>)
    ba34:	f004 fd7a 	bl	1052c <assert_post_action>
	__asm__ volatile(
    ba38:	f04f 0320 	mov.w	r3, #32
    ba3c:	f3ef 8211 	mrs	r2, BASEPRI
    ba40:	f383 8811 	msr	BASEPRI, r3
    ba44:	f3bf 8f6f 	isb	sy
    ba48:	617a      	str	r2, [r7, #20]
    ba4a:	613b      	str	r3, [r7, #16]
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
    ba4c:	f7ff ffc6 	bl	b9dc <pm_save_idle>
		if (IS_ENABLED(CONFIG_SMP) &&
    ba50:	e7f2      	b.n	ba38 <idle+0x2c>
    ba52:	bf00      	nop
    ba54:	20000c00 	.word	0x20000c00
    ba58:	0001a11c 	.word	0x0001a11c
    ba5c:	0001a140 	.word	0x0001a140
    ba60:	0001a168 	.word	0x0001a168

0000ba64 <z_sched_lock>:
		z_ready_thread(thread);
	}
}

static inline void z_sched_lock(void)
{
    ba64:	b580      	push	{r7, lr}
    ba66:	b082      	sub	sp, #8
    ba68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    ba6a:	f3ef 8305 	mrs	r3, IPSR
    ba6e:	607b      	str	r3, [r7, #4]
  return(result);
    ba70:	687b      	ldr	r3, [r7, #4]
    ba72:	2b00      	cmp	r3, #0
    ba74:	bf14      	ite	ne
    ba76:	2301      	movne	r3, #1
    ba78:	2300      	moveq	r3, #0
    ba7a:	b2db      	uxtb	r3, r3
	__ASSERT(!arch_is_in_isr(), "");
    ba7c:	2b00      	cmp	r3, #0
    ba7e:	d00c      	beq.n	ba9a <z_sched_lock+0x36>
    ba80:	23fd      	movs	r3, #253	; 0xfd
    ba82:	4a14      	ldr	r2, [pc, #80]	; (bad4 <z_sched_lock+0x70>)
    ba84:	4914      	ldr	r1, [pc, #80]	; (bad8 <z_sched_lock+0x74>)
    ba86:	4815      	ldr	r0, [pc, #84]	; (badc <z_sched_lock+0x78>)
    ba88:	f004 f8f4 	bl	fc74 <printk>
    ba8c:	4814      	ldr	r0, [pc, #80]	; (bae0 <z_sched_lock+0x7c>)
    ba8e:	f004 f8f1 	bl	fc74 <printk>
    ba92:	21fd      	movs	r1, #253	; 0xfd
    ba94:	480f      	ldr	r0, [pc, #60]	; (bad4 <z_sched_lock+0x70>)
    ba96:	f004 fd49 	bl	1052c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    ba9a:	4b12      	ldr	r3, [pc, #72]	; (bae4 <z_sched_lock+0x80>)
    ba9c:	689b      	ldr	r3, [r3, #8]
    ba9e:	7bdb      	ldrb	r3, [r3, #15]
    baa0:	2b01      	cmp	r3, #1
    baa2:	d10c      	bne.n	babe <z_sched_lock+0x5a>
    baa4:	23fe      	movs	r3, #254	; 0xfe
    baa6:	4a0b      	ldr	r2, [pc, #44]	; (bad4 <z_sched_lock+0x70>)
    baa8:	490f      	ldr	r1, [pc, #60]	; (bae8 <z_sched_lock+0x84>)
    baaa:	480c      	ldr	r0, [pc, #48]	; (badc <z_sched_lock+0x78>)
    baac:	f004 f8e2 	bl	fc74 <printk>
    bab0:	480b      	ldr	r0, [pc, #44]	; (bae0 <z_sched_lock+0x7c>)
    bab2:	f004 f8df 	bl	fc74 <printk>
    bab6:	21fe      	movs	r1, #254	; 0xfe
    bab8:	4806      	ldr	r0, [pc, #24]	; (bad4 <z_sched_lock+0x70>)
    baba:	f004 fd37 	bl	1052c <assert_post_action>

	--_current->base.sched_locked;
    babe:	4b09      	ldr	r3, [pc, #36]	; (bae4 <z_sched_lock+0x80>)
    bac0:	689b      	ldr	r3, [r3, #8]
    bac2:	7bda      	ldrb	r2, [r3, #15]
    bac4:	3a01      	subs	r2, #1
    bac6:	b2d2      	uxtb	r2, r2
    bac8:	73da      	strb	r2, [r3, #15]

	compiler_barrier();
}
    baca:	bf00      	nop
    bacc:	3708      	adds	r7, #8
    bace:	46bd      	mov	sp, r7
    bad0:	bd80      	pop	{r7, pc}
    bad2:	bf00      	nop
    bad4:	0001a188 	.word	0x0001a188
    bad8:	0001a1b4 	.word	0x0001a1b4
    badc:	0001a1c8 	.word	0x0001a1c8
    bae0:	0001a1e8 	.word	0x0001a1e8
    bae4:	20000c00 	.word	0x20000c00
    bae8:	0001a1ec 	.word	0x0001a1ec

0000baec <log_const_source_id>:
{
    baec:	b480      	push	{r7}
    baee:	b083      	sub	sp, #12
    baf0:	af00      	add	r7, sp, #0
    baf2:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    baf4:	687b      	ldr	r3, [r7, #4]
    baf6:	4a04      	ldr	r2, [pc, #16]	; (bb08 <log_const_source_id+0x1c>)
    baf8:	1a9b      	subs	r3, r3, r2
    bafa:	08db      	lsrs	r3, r3, #3
}
    bafc:	4618      	mov	r0, r3
    bafe:	370c      	adds	r7, #12
    bb00:	46bd      	mov	sp, r7
    bb02:	bc80      	pop	{r7}
    bb04:	4770      	bx	lr
    bb06:	bf00      	nop
    bb08:	000170bc 	.word	0x000170bc

0000bb0c <adjust_owner_prio>:

	return new_prio;
}

static bool adjust_owner_prio(struct k_mutex *mutex, int32_t new_prio)
{
    bb0c:	b590      	push	{r4, r7, lr}
    bb0e:	b08f      	sub	sp, #60	; 0x3c
    bb10:	af04      	add	r7, sp, #16
    bb12:	6078      	str	r0, [r7, #4]
    bb14:	6039      	str	r1, [r7, #0]
	if (mutex->owner->base.prio != new_prio) {
    bb16:	687b      	ldr	r3, [r7, #4]
    bb18:	689b      	ldr	r3, [r3, #8]
    bb1a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    bb1e:	461a      	mov	r2, r3
    bb20:	683b      	ldr	r3, [r7, #0]
    bb22:	4293      	cmp	r3, r2
    bb24:	d070      	beq.n	bc08 <adjust_owner_prio+0xfc>

		LOG_DBG("%p (ready (y/n): %c) prio changed to %d (was %d)",
    bb26:	2303      	movs	r3, #3
    bb28:	2b03      	cmp	r3, #3
    bb2a:	d964      	bls.n	bbf6 <adjust_owner_prio+0xea>
    bb2c:	f00a f920 	bl	15d70 <k_is_user_context>
    bb30:	4603      	mov	r3, r0
    bb32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    bb36:	2300      	movs	r3, #0
    bb38:	623b      	str	r3, [r7, #32]
    bb3a:	2303      	movs	r3, #3
    bb3c:	2b00      	cmp	r3, #0
    bb3e:	d007      	beq.n	bb50 <adjust_owner_prio+0x44>
    bb40:	4b34      	ldr	r3, [pc, #208]	; (bc14 <adjust_owner_prio+0x108>)
    bb42:	681b      	ldr	r3, [r3, #0]
    bb44:	4618      	mov	r0, r3
    bb46:	f7ff ffd1 	bl	baec <log_const_source_id>
    bb4a:	4603      	mov	r3, r0
    bb4c:	b29b      	uxth	r3, r3
    bb4e:	e000      	b.n	bb52 <adjust_owner_prio+0x46>
    bb50:	2300      	movs	r3, #0
    bb52:	84fb      	strh	r3, [r7, #38]	; 0x26
    bb54:	7f3b      	ldrb	r3, [r7, #28]
    bb56:	2204      	movs	r2, #4
    bb58:	f362 0302 	bfi	r3, r2, #0, #3
    bb5c:	773b      	strb	r3, [r7, #28]
    bb5e:	7f3b      	ldrb	r3, [r7, #28]
    bb60:	f36f 03c5 	bfc	r3, #3, #3
    bb64:	773b      	strb	r3, [r7, #28]
    bb66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    bb68:	f3c3 0309 	ubfx	r3, r3, #0, #10
    bb6c:	b29a      	uxth	r2, r3
    bb6e:	8bbb      	ldrh	r3, [r7, #28]
    bb70:	f362 138f 	bfi	r3, r2, #6, #10
    bb74:	83bb      	strh	r3, [r7, #28]
    bb76:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    bb7a:	2b00      	cmp	r3, #0
    bb7c:	d01b      	beq.n	bbb6 <adjust_owner_prio+0xaa>
    bb7e:	687b      	ldr	r3, [r7, #4]
    bb80:	689c      	ldr	r4, [r3, #8]
    bb82:	687b      	ldr	r3, [r7, #4]
    bb84:	689b      	ldr	r3, [r3, #8]
    bb86:	4618      	mov	r0, r3
    bb88:	f00a f947 	bl	15e1a <z_is_thread_ready>
    bb8c:	4603      	mov	r3, r0
    bb8e:	2b00      	cmp	r3, #0
    bb90:	d001      	beq.n	bb96 <adjust_owner_prio+0x8a>
    bb92:	2379      	movs	r3, #121	; 0x79
    bb94:	e000      	b.n	bb98 <adjust_owner_prio+0x8c>
    bb96:	236e      	movs	r3, #110	; 0x6e
    bb98:	687a      	ldr	r2, [r7, #4]
    bb9a:	6892      	ldr	r2, [r2, #8]
    bb9c:	f992 200e 	ldrsb.w	r2, [r2, #14]
    bba0:	9202      	str	r2, [sp, #8]
    bba2:	683a      	ldr	r2, [r7, #0]
    bba4:	9201      	str	r2, [sp, #4]
    bba6:	9300      	str	r3, [sp, #0]
    bba8:	4623      	mov	r3, r4
    bbaa:	4a1b      	ldr	r2, [pc, #108]	; (bc18 <adjust_owner_prio+0x10c>)
    bbac:	491b      	ldr	r1, [pc, #108]	; (bc1c <adjust_owner_prio+0x110>)
    bbae:	8bb8      	ldrh	r0, [r7, #28]
    bbb0:	f7f7 f864 	bl	2c7c <log_from_user>
    bbb4:	e020      	b.n	bbf8 <adjust_owner_prio+0xec>
    bbb6:	4b18      	ldr	r3, [pc, #96]	; (bc18 <adjust_owner_prio+0x10c>)
    bbb8:	60bb      	str	r3, [r7, #8]
    bbba:	687b      	ldr	r3, [r7, #4]
    bbbc:	689b      	ldr	r3, [r3, #8]
    bbbe:	60fb      	str	r3, [r7, #12]
    bbc0:	687b      	ldr	r3, [r7, #4]
    bbc2:	689b      	ldr	r3, [r3, #8]
    bbc4:	4618      	mov	r0, r3
    bbc6:	f00a f928 	bl	15e1a <z_is_thread_ready>
    bbca:	4603      	mov	r3, r0
    bbcc:	2b00      	cmp	r3, #0
    bbce:	d001      	beq.n	bbd4 <adjust_owner_prio+0xc8>
    bbd0:	2379      	movs	r3, #121	; 0x79
    bbd2:	e000      	b.n	bbd6 <adjust_owner_prio+0xca>
    bbd4:	236e      	movs	r3, #110	; 0x6e
    bbd6:	613b      	str	r3, [r7, #16]
    bbd8:	683b      	ldr	r3, [r7, #0]
    bbda:	617b      	str	r3, [r7, #20]
    bbdc:	687b      	ldr	r3, [r7, #4]
    bbde:	689b      	ldr	r3, [r3, #8]
    bbe0:	f993 300e 	ldrsb.w	r3, [r3, #14]
    bbe4:	61bb      	str	r3, [r7, #24]
    bbe6:	f107 0108 	add.w	r1, r7, #8
    bbea:	8bbb      	ldrh	r3, [r7, #28]
    bbec:	2205      	movs	r2, #5
    bbee:	480b      	ldr	r0, [pc, #44]	; (bc1c <adjust_owner_prio+0x110>)
    bbf0:	f005 f99c 	bl	10f2c <log_n>
    bbf4:	e000      	b.n	bbf8 <adjust_owner_prio+0xec>
    bbf6:	bf00      	nop
			mutex->owner, z_is_thread_ready(mutex->owner) ?
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		return z_set_prio(mutex->owner, new_prio);
    bbf8:	687b      	ldr	r3, [r7, #4]
    bbfa:	689b      	ldr	r3, [r3, #8]
    bbfc:	6839      	ldr	r1, [r7, #0]
    bbfe:	4618      	mov	r0, r3
    bc00:	f001 ff62 	bl	dac8 <z_set_prio>
    bc04:	4603      	mov	r3, r0
    bc06:	e000      	b.n	bc0a <adjust_owner_prio+0xfe>
	}
	return false;
    bc08:	2300      	movs	r3, #0
}
    bc0a:	4618      	mov	r0, r3
    bc0c:	372c      	adds	r7, #44	; 0x2c
    bc0e:	46bd      	mov	sp, r7
    bc10:	bd90      	pop	{r4, r7, pc}
    bc12:	bf00      	nop
    bc14:	20000170 	.word	0x20000170
    bc18:	0001ad80 	.word	0x0001ad80
    bc1c:	0001a220 	.word	0x0001a220

0000bc20 <z_impl_k_mutex_lock>:

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    bc20:	b580      	push	{r7, lr}
    bc22:	b0ba      	sub	sp, #232	; 0xe8
    bc24:	af04      	add	r7, sp, #16
    bc26:	60f8      	str	r0, [r7, #12]
    bc28:	e9c7 2300 	strd	r2, r3, [r7]
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;
    bc2c:	2300      	movs	r3, #0
    bc2e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    bc32:	f3ef 8305 	mrs	r3, IPSR
    bc36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return(result);
    bc3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
    bc3e:	2b00      	cmp	r3, #0
    bc40:	bf14      	ite	ne
    bc42:	2301      	movne	r3, #1
    bc44:	2300      	moveq	r3, #0
    bc46:	b2db      	uxtb	r3, r3

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    bc48:	2b00      	cmp	r3, #0
    bc4a:	d00c      	beq.n	bc66 <z_impl_k_mutex_lock+0x46>
    bc4c:	2365      	movs	r3, #101	; 0x65
    bc4e:	4aa7      	ldr	r2, [pc, #668]	; (beec <z_impl_k_mutex_lock+0x2cc>)
    bc50:	49a7      	ldr	r1, [pc, #668]	; (bef0 <z_impl_k_mutex_lock+0x2d0>)
    bc52:	48a8      	ldr	r0, [pc, #672]	; (bef4 <z_impl_k_mutex_lock+0x2d4>)
    bc54:	f004 f80e 	bl	fc74 <printk>
    bc58:	48a7      	ldr	r0, [pc, #668]	; (bef8 <z_impl_k_mutex_lock+0x2d8>)
    bc5a:	f004 f80b 	bl	fc74 <printk>
    bc5e:	2165      	movs	r1, #101	; 0x65
    bc60:	48a2      	ldr	r0, [pc, #648]	; (beec <z_impl_k_mutex_lock+0x2cc>)
    bc62:	f004 fc63 	bl	1052c <assert_post_action>
    bc66:	4ba5      	ldr	r3, [pc, #660]	; (befc <z_impl_k_mutex_lock+0x2dc>)
    bc68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    bc6c:	f04f 0320 	mov.w	r3, #32
    bc70:	f3ef 8211 	mrs	r2, BASEPRI
    bc74:	f383 8811 	msr	BASEPRI, r3
    bc78:	f3bf 8f6f 	isb	sy
    bc7c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
    bc80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	return key;
    bc84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
	k.key = arch_irq_lock();
    bc88:	66bb      	str	r3, [r7, #104]	; 0x68
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    bc8a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
    bc8e:	f7ff fe59 	bl	b944 <z_spin_lock_valid>
    bc92:	4603      	mov	r3, r0
    bc94:	f083 0301 	eor.w	r3, r3, #1
    bc98:	b2db      	uxtb	r3, r3
    bc9a:	2b00      	cmp	r3, #0
    bc9c:	d00e      	beq.n	bcbc <z_impl_k_mutex_lock+0x9c>
    bc9e:	2381      	movs	r3, #129	; 0x81
    bca0:	4a97      	ldr	r2, [pc, #604]	; (bf00 <z_impl_k_mutex_lock+0x2e0>)
    bca2:	4998      	ldr	r1, [pc, #608]	; (bf04 <z_impl_k_mutex_lock+0x2e4>)
    bca4:	4893      	ldr	r0, [pc, #588]	; (bef4 <z_impl_k_mutex_lock+0x2d4>)
    bca6:	f003 ffe5 	bl	fc74 <printk>
    bcaa:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
    bcae:	4896      	ldr	r0, [pc, #600]	; (bf08 <z_impl_k_mutex_lock+0x2e8>)
    bcb0:	f003 ffe0 	bl	fc74 <printk>
    bcb4:	2181      	movs	r1, #129	; 0x81
    bcb6:	4892      	ldr	r0, [pc, #584]	; (bf00 <z_impl_k_mutex_lock+0x2e0>)
    bcb8:	f004 fc38 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    bcbc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
    bcc0:	f7ff fe78 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    bcc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    bcc6:	67bb      	str	r3, [r7, #120]	; 0x78

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    bcc8:	68fb      	ldr	r3, [r7, #12]
    bcca:	68db      	ldr	r3, [r3, #12]
    bccc:	2b00      	cmp	r3, #0
    bcce:	bf0c      	ite	eq
    bcd0:	2301      	moveq	r3, #1
    bcd2:	2300      	movne	r3, #0
    bcd4:	b2db      	uxtb	r3, r3
    bcd6:	2b00      	cmp	r3, #0
    bcd8:	d10b      	bne.n	bcf2 <z_impl_k_mutex_lock+0xd2>
    bcda:	68fb      	ldr	r3, [r7, #12]
    bcdc:	689a      	ldr	r2, [r3, #8]
    bcde:	4b8b      	ldr	r3, [pc, #556]	; (bf0c <z_impl_k_mutex_lock+0x2ec>)
    bce0:	689b      	ldr	r3, [r3, #8]
    bce2:	429a      	cmp	r2, r3
    bce4:	bf0c      	ite	eq
    bce6:	2301      	moveq	r3, #1
    bce8:	2300      	movne	r3, #0
    bcea:	b2db      	uxtb	r3, r3
    bcec:	2b00      	cmp	r3, #0
    bcee:	f000 809e 	beq.w	be2e <z_impl_k_mutex_lock+0x20e>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    bcf2:	68fb      	ldr	r3, [r7, #12]
    bcf4:	68db      	ldr	r3, [r3, #12]
					_current->base.prio :
    bcf6:	2b00      	cmp	r3, #0
    bcf8:	d104      	bne.n	bd04 <z_impl_k_mutex_lock+0xe4>
    bcfa:	4b84      	ldr	r3, [pc, #528]	; (bf0c <z_impl_k_mutex_lock+0x2ec>)
    bcfc:	689b      	ldr	r3, [r3, #8]
    bcfe:	f993 300e 	ldrsb.w	r3, [r3, #14]
    bd02:	e001      	b.n	bd08 <z_impl_k_mutex_lock+0xe8>
    bd04:	68fb      	ldr	r3, [r7, #12]
    bd06:	691b      	ldr	r3, [r3, #16]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    bd08:	68fa      	ldr	r2, [r7, #12]
    bd0a:	6113      	str	r3, [r2, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    bd0c:	68fb      	ldr	r3, [r7, #12]
    bd0e:	68db      	ldr	r3, [r3, #12]
    bd10:	1c5a      	adds	r2, r3, #1
    bd12:	68fb      	ldr	r3, [r7, #12]
    bd14:	60da      	str	r2, [r3, #12]
		mutex->owner = _current;
    bd16:	4b7d      	ldr	r3, [pc, #500]	; (bf0c <z_impl_k_mutex_lock+0x2ec>)
    bd18:	689a      	ldr	r2, [r3, #8]
    bd1a:	68fb      	ldr	r3, [r7, #12]
    bd1c:	609a      	str	r2, [r3, #8]

		LOG_DBG("%p took mutex %p, count: %d, orig prio: %d",
    bd1e:	2303      	movs	r3, #3
    bd20:	2b03      	cmp	r3, #3
    bd22:	d958      	bls.n	bdd6 <z_impl_k_mutex_lock+0x1b6>
    bd24:	f00a f824 	bl	15d70 <k_is_user_context>
    bd28:	4603      	mov	r3, r0
    bd2a:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
    bd2e:	2300      	movs	r3, #0
    bd30:	667b      	str	r3, [r7, #100]	; 0x64
    bd32:	2303      	movs	r3, #3
    bd34:	2b00      	cmp	r3, #0
    bd36:	d007      	beq.n	bd48 <z_impl_k_mutex_lock+0x128>
    bd38:	4b75      	ldr	r3, [pc, #468]	; (bf10 <z_impl_k_mutex_lock+0x2f0>)
    bd3a:	681b      	ldr	r3, [r3, #0]
    bd3c:	4618      	mov	r0, r3
    bd3e:	f7ff fed5 	bl	baec <log_const_source_id>
    bd42:	4603      	mov	r3, r0
    bd44:	b29b      	uxth	r3, r3
    bd46:	e000      	b.n	bd4a <z_impl_k_mutex_lock+0x12a>
    bd48:	2300      	movs	r3, #0
    bd4a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
    bd4e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
    bd52:	2204      	movs	r2, #4
    bd54:	f362 0302 	bfi	r3, r2, #0, #3
    bd58:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
    bd5c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
    bd60:	f36f 03c5 	bfc	r3, #3, #3
    bd64:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
    bd68:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
    bd6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    bd70:	b29a      	uxth	r2, r3
    bd72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
    bd76:	f362 138f 	bfi	r3, r2, #6, #10
    bd7a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
    bd7e:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
    bd82:	2b00      	cmp	r3, #0
    bd84:	d011      	beq.n	bdaa <z_impl_k_mutex_lock+0x18a>
    bd86:	4b61      	ldr	r3, [pc, #388]	; (bf0c <z_impl_k_mutex_lock+0x2ec>)
    bd88:	6899      	ldr	r1, [r3, #8]
    bd8a:	68fb      	ldr	r3, [r7, #12]
    bd8c:	68db      	ldr	r3, [r3, #12]
    bd8e:	68fa      	ldr	r2, [r7, #12]
    bd90:	6912      	ldr	r2, [r2, #16]
    bd92:	9202      	str	r2, [sp, #8]
    bd94:	9301      	str	r3, [sp, #4]
    bd96:	68fb      	ldr	r3, [r7, #12]
    bd98:	9300      	str	r3, [sp, #0]
    bd9a:	460b      	mov	r3, r1
    bd9c:	4a5d      	ldr	r2, [pc, #372]	; (bf14 <z_impl_k_mutex_lock+0x2f4>)
    bd9e:	495e      	ldr	r1, [pc, #376]	; (bf18 <z_impl_k_mutex_lock+0x2f8>)
    bda0:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
    bda4:	f7f6 ff6a 	bl	2c7c <log_from_user>
    bda8:	e016      	b.n	bdd8 <z_impl_k_mutex_lock+0x1b8>
    bdaa:	4b5a      	ldr	r3, [pc, #360]	; (bf14 <z_impl_k_mutex_lock+0x2f4>)
    bdac:	64fb      	str	r3, [r7, #76]	; 0x4c
    bdae:	4b57      	ldr	r3, [pc, #348]	; (bf0c <z_impl_k_mutex_lock+0x2ec>)
    bdb0:	689b      	ldr	r3, [r3, #8]
    bdb2:	653b      	str	r3, [r7, #80]	; 0x50
    bdb4:	68fb      	ldr	r3, [r7, #12]
    bdb6:	657b      	str	r3, [r7, #84]	; 0x54
    bdb8:	68fb      	ldr	r3, [r7, #12]
    bdba:	68db      	ldr	r3, [r3, #12]
    bdbc:	65bb      	str	r3, [r7, #88]	; 0x58
    bdbe:	68fb      	ldr	r3, [r7, #12]
    bdc0:	691b      	ldr	r3, [r3, #16]
    bdc2:	65fb      	str	r3, [r7, #92]	; 0x5c
    bdc4:	f107 014c 	add.w	r1, r7, #76	; 0x4c
    bdc8:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
    bdcc:	2205      	movs	r2, #5
    bdce:	4852      	ldr	r0, [pc, #328]	; (bf18 <z_impl_k_mutex_lock+0x2f8>)
    bdd0:	f005 f8ac 	bl	10f2c <log_n>
    bdd4:	e000      	b.n	bdd8 <z_impl_k_mutex_lock+0x1b8>
    bdd6:	bf00      	nop
    bdd8:	4b48      	ldr	r3, [pc, #288]	; (befc <z_impl_k_mutex_lock+0x2dc>)
    bdda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    bdde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    bde0:	66fb      	str	r3, [r7, #108]	; 0x6c
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    bde2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
    bde6:	f7ff fdc9 	bl	b97c <z_spin_unlock_valid>
    bdea:	4603      	mov	r3, r0
    bdec:	f083 0301 	eor.w	r3, r3, #1
    bdf0:	b2db      	uxtb	r3, r3
    bdf2:	2b00      	cmp	r3, #0
    bdf4:	d00e      	beq.n	be14 <z_impl_k_mutex_lock+0x1f4>
    bdf6:	23ac      	movs	r3, #172	; 0xac
    bdf8:	4a41      	ldr	r2, [pc, #260]	; (bf00 <z_impl_k_mutex_lock+0x2e0>)
    bdfa:	4948      	ldr	r1, [pc, #288]	; (bf1c <z_impl_k_mutex_lock+0x2fc>)
    bdfc:	483d      	ldr	r0, [pc, #244]	; (bef4 <z_impl_k_mutex_lock+0x2d4>)
    bdfe:	f003 ff39 	bl	fc74 <printk>
    be02:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    be06:	4846      	ldr	r0, [pc, #280]	; (bf20 <z_impl_k_mutex_lock+0x300>)
    be08:	f003 ff34 	bl	fc74 <printk>
    be0c:	21ac      	movs	r1, #172	; 0xac
    be0e:	483c      	ldr	r0, [pc, #240]	; (bf00 <z_impl_k_mutex_lock+0x2e0>)
    be10:	f004 fb8c 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    be14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    be16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	__asm__ volatile(
    be1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    be1e:	f383 8811 	msr	BASEPRI, r3
    be22:	f3bf 8f6f 	isb	sy
}
    be26:	bf00      	nop
}
    be28:	bf00      	nop

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    be2a:	2300      	movs	r3, #0
    be2c:	e2aa      	b.n	c384 <z_impl_k_mutex_lock+0x764>
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    be2e:	e9d7 2300 	ldrd	r2, r3, [r7]
    be32:	f04f 0000 	mov.w	r0, #0
    be36:	f04f 0100 	mov.w	r1, #0
    be3a:	428b      	cmp	r3, r1
    be3c:	bf06      	itte	eq
    be3e:	4282      	cmpeq	r2, r0
    be40:	2301      	moveq	r3, #1
    be42:	2300      	movne	r3, #0
    be44:	b2db      	uxtb	r3, r3
    be46:	2b00      	cmp	r3, #0
    be48:	d02b      	beq.n	bea2 <z_impl_k_mutex_lock+0x282>
    be4a:	4b2c      	ldr	r3, [pc, #176]	; (befc <z_impl_k_mutex_lock+0x2dc>)
    be4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    be50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    be52:	64bb      	str	r3, [r7, #72]	; 0x48
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    be54:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
    be58:	f7ff fd90 	bl	b97c <z_spin_unlock_valid>
    be5c:	4603      	mov	r3, r0
    be5e:	f083 0301 	eor.w	r3, r3, #1
    be62:	b2db      	uxtb	r3, r3
    be64:	2b00      	cmp	r3, #0
    be66:	d00e      	beq.n	be86 <z_impl_k_mutex_lock+0x266>
    be68:	23ac      	movs	r3, #172	; 0xac
    be6a:	4a25      	ldr	r2, [pc, #148]	; (bf00 <z_impl_k_mutex_lock+0x2e0>)
    be6c:	492b      	ldr	r1, [pc, #172]	; (bf1c <z_impl_k_mutex_lock+0x2fc>)
    be6e:	4821      	ldr	r0, [pc, #132]	; (bef4 <z_impl_k_mutex_lock+0x2d4>)
    be70:	f003 ff00 	bl	fc74 <printk>
    be74:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
    be78:	4829      	ldr	r0, [pc, #164]	; (bf20 <z_impl_k_mutex_lock+0x300>)
    be7a:	f003 fefb 	bl	fc74 <printk>
    be7e:	21ac      	movs	r1, #172	; 0xac
    be80:	481f      	ldr	r0, [pc, #124]	; (bf00 <z_impl_k_mutex_lock+0x2e0>)
    be82:	f004 fb53 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    be86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    be88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	__asm__ volatile(
    be8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
    be90:	f383 8811 	msr	BASEPRI, r3
    be94:	f3bf 8f6f 	isb	sy
}
    be98:	bf00      	nop
}
    be9a:	bf00      	nop
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    be9c:	f06f 030f 	mvn.w	r3, #15
    bea0:	e270      	b.n	c384 <z_impl_k_mutex_lock+0x764>
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mutex, lock, mutex, timeout);

	new_prio = new_prio_for_inheritance(_current->base.prio,
    bea2:	4b1a      	ldr	r3, [pc, #104]	; (bf0c <z_impl_k_mutex_lock+0x2ec>)
    bea4:	689b      	ldr	r3, [r3, #8]
    bea6:	f993 300e 	ldrsb.w	r3, [r3, #14]
    beaa:	461a      	mov	r2, r3
					    mutex->owner->base.prio);
    beac:	68fb      	ldr	r3, [r7, #12]
    beae:	689b      	ldr	r3, [r3, #8]
    beb0:	f993 300e 	ldrsb.w	r3, [r3, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    beb4:	4619      	mov	r1, r3
    beb6:	4610      	mov	r0, r2
    beb8:	f00a f83f 	bl	15f3a <new_prio_for_inheritance>
    bebc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

	LOG_DBG("adjusting prio up on mutex %p", mutex);
    bec0:	2303      	movs	r3, #3
    bec2:	2b03      	cmp	r3, #3
    bec4:	d95d      	bls.n	bf82 <z_impl_k_mutex_lock+0x362>
    bec6:	f009 ff53 	bl	15d70 <k_is_user_context>
    beca:	4603      	mov	r3, r0
    becc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
    bed0:	2300      	movs	r3, #0
    bed2:	647b      	str	r3, [r7, #68]	; 0x44
    bed4:	2303      	movs	r3, #3
    bed6:	2b00      	cmp	r3, #0
    bed8:	d024      	beq.n	bf24 <z_impl_k_mutex_lock+0x304>
    beda:	4b0d      	ldr	r3, [pc, #52]	; (bf10 <z_impl_k_mutex_lock+0x2f0>)
    bedc:	681b      	ldr	r3, [r3, #0]
    bede:	4618      	mov	r0, r3
    bee0:	f7ff fe04 	bl	baec <log_const_source_id>
    bee4:	4603      	mov	r3, r0
    bee6:	b29b      	uxth	r3, r3
    bee8:	e01d      	b.n	bf26 <z_impl_k_mutex_lock+0x306>
    beea:	bf00      	nop
    beec:	0001a258 	.word	0x0001a258
    bef0:	0001a1b4 	.word	0x0001a1b4
    bef4:	0001a1c8 	.word	0x0001a1c8
    bef8:	0001a27c 	.word	0x0001a27c
    befc:	20000c30 	.word	0x20000c30
    bf00:	0001a2a4 	.word	0x0001a2a4
    bf04:	0001a2cc 	.word	0x0001a2cc
    bf08:	0001a2e4 	.word	0x0001a2e4
    bf0c:	20000c00 	.word	0x20000c00
    bf10:	20000170 	.word	0x20000170
    bf14:	0001ad94 	.word	0x0001ad94
    bf18:	0001a2fc 	.word	0x0001a2fc
    bf1c:	0001a32c 	.word	0x0001a32c
    bf20:	0001a344 	.word	0x0001a344
    bf24:	2300      	movs	r3, #0
    bf26:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
    bf2a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    bf2e:	2204      	movs	r2, #4
    bf30:	f362 0302 	bfi	r3, r2, #0, #3
    bf34:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    bf38:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
    bf3c:	f36f 03c5 	bfc	r3, #3, #3
    bf40:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    bf44:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
    bf48:	f3c3 0309 	ubfx	r3, r3, #0, #10
    bf4c:	b29a      	uxth	r2, r3
    bf4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
    bf52:	f362 138f 	bfi	r3, r2, #6, #10
    bf56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    bf5a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
    bf5e:	2b00      	cmp	r3, #0
    bf60:	d007      	beq.n	bf72 <z_impl_k_mutex_lock+0x352>
    bf62:	68fb      	ldr	r3, [r7, #12]
    bf64:	4ab6      	ldr	r2, [pc, #728]	; (c240 <z_impl_k_mutex_lock+0x620>)
    bf66:	49b7      	ldr	r1, [pc, #732]	; (c244 <z_impl_k_mutex_lock+0x624>)
    bf68:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
    bf6c:	f7f6 fe86 	bl	2c7c <log_from_user>
    bf70:	e008      	b.n	bf84 <z_impl_k_mutex_lock+0x364>
    bf72:	49b3      	ldr	r1, [pc, #716]	; (c240 <z_impl_k_mutex_lock+0x620>)
    bf74:	68fa      	ldr	r2, [r7, #12]
    bf76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
    bf7a:	48b2      	ldr	r0, [pc, #712]	; (c244 <z_impl_k_mutex_lock+0x624>)
    bf7c:	f004 ffa3 	bl	10ec6 <log_2>
    bf80:	e000      	b.n	bf84 <z_impl_k_mutex_lock+0x364>
    bf82:	bf00      	nop

	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    bf84:	68fb      	ldr	r3, [r7, #12]
    bf86:	689b      	ldr	r3, [r3, #8]
    bf88:	f993 300e 	ldrsb.w	r3, [r3, #14]
    bf8c:	4619      	mov	r1, r3
    bf8e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
    bf92:	f009 ff95 	bl	15ec0 <z_is_prio_higher>
    bf96:	4603      	mov	r3, r0
    bf98:	2b00      	cmp	r3, #0
    bf9a:	d007      	beq.n	bfac <z_impl_k_mutex_lock+0x38c>
		resched = adjust_owner_prio(mutex, new_prio);
    bf9c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
    bfa0:	68f8      	ldr	r0, [r7, #12]
    bfa2:	f7ff fdb3 	bl	bb0c <adjust_owner_prio>
    bfa6:	4603      	mov	r3, r0
    bfa8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	}

	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    bfac:	68f9      	ldr	r1, [r7, #12]
    bfae:	e9d7 2300 	ldrd	r2, r3, [r7]
    bfb2:	e9cd 2300 	strd	r2, r3, [sp]
    bfb6:	460a      	mov	r2, r1
    bfb8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
    bfba:	48a3      	ldr	r0, [pc, #652]	; (c248 <z_impl_k_mutex_lock+0x628>)
    bfbc:	f001 fc48 	bl	d850 <z_pend_curr>
    bfc0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

	LOG_DBG("on mutex %p got_mutex value: %d", mutex, got_mutex);
    bfc4:	2303      	movs	r3, #3
    bfc6:	2b03      	cmp	r3, #3
    bfc8:	d945      	bls.n	c056 <z_impl_k_mutex_lock+0x436>
    bfca:	f009 fed1 	bl	15d70 <k_is_user_context>
    bfce:	4603      	mov	r3, r0
    bfd0:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
    bfd4:	2300      	movs	r3, #0
    bfd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    bfd8:	2303      	movs	r3, #3
    bfda:	2b00      	cmp	r3, #0
    bfdc:	d007      	beq.n	bfee <z_impl_k_mutex_lock+0x3ce>
    bfde:	4b9b      	ldr	r3, [pc, #620]	; (c24c <z_impl_k_mutex_lock+0x62c>)
    bfe0:	681b      	ldr	r3, [r3, #0]
    bfe2:	4618      	mov	r0, r3
    bfe4:	f7ff fd82 	bl	baec <log_const_source_id>
    bfe8:	4603      	mov	r3, r0
    bfea:	b29b      	uxth	r3, r3
    bfec:	e000      	b.n	bff0 <z_impl_k_mutex_lock+0x3d0>
    bfee:	2300      	movs	r3, #0
    bff0:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
    bff4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    bff8:	2204      	movs	r2, #4
    bffa:	f362 0302 	bfi	r3, r2, #0, #3
    bffe:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    c002:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    c006:	f36f 03c5 	bfc	r3, #3, #3
    c00a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    c00e:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
    c012:	f3c3 0309 	ubfx	r3, r3, #0, #10
    c016:	b29a      	uxth	r2, r3
    c018:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    c01a:	f362 138f 	bfi	r3, r2, #6, #10
    c01e:	873b      	strh	r3, [r7, #56]	; 0x38
    c020:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
    c024:	2b00      	cmp	r3, #0
    c026:	d009      	beq.n	c03c <z_impl_k_mutex_lock+0x41c>
    c028:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
    c02c:	9300      	str	r3, [sp, #0]
    c02e:	68fb      	ldr	r3, [r7, #12]
    c030:	4a83      	ldr	r2, [pc, #524]	; (c240 <z_impl_k_mutex_lock+0x620>)
    c032:	4987      	ldr	r1, [pc, #540]	; (c250 <z_impl_k_mutex_lock+0x630>)
    c034:	8f38      	ldrh	r0, [r7, #56]	; 0x38
    c036:	f7f6 fe21 	bl	2c7c <log_from_user>
    c03a:	e00d      	b.n	c058 <z_impl_k_mutex_lock+0x438>
    c03c:	4880      	ldr	r0, [pc, #512]	; (c240 <z_impl_k_mutex_lock+0x620>)
    c03e:	68fa      	ldr	r2, [r7, #12]
    c040:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
    c044:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
    c046:	f8ad 3000 	strh.w	r3, [sp]
    c04a:	460b      	mov	r3, r1
    c04c:	4601      	mov	r1, r0
    c04e:	4880      	ldr	r0, [pc, #512]	; (c250 <z_impl_k_mutex_lock+0x630>)
    c050:	f004 ff52 	bl	10ef8 <log_3>
    c054:	e000      	b.n	c058 <z_impl_k_mutex_lock+0x438>
    c056:	bf00      	nop

	LOG_DBG("%p got mutex %p (y/n): %c", _current, mutex,
    c058:	2303      	movs	r3, #3
    c05a:	2b03      	cmp	r3, #3
    c05c:	d958      	bls.n	c110 <z_impl_k_mutex_lock+0x4f0>
    c05e:	f009 fe87 	bl	15d70 <k_is_user_context>
    c062:	4603      	mov	r3, r0
    c064:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    c068:	2300      	movs	r3, #0
    c06a:	637b      	str	r3, [r7, #52]	; 0x34
    c06c:	2303      	movs	r3, #3
    c06e:	2b00      	cmp	r3, #0
    c070:	d007      	beq.n	c082 <z_impl_k_mutex_lock+0x462>
    c072:	4b76      	ldr	r3, [pc, #472]	; (c24c <z_impl_k_mutex_lock+0x62c>)
    c074:	681b      	ldr	r3, [r3, #0]
    c076:	4618      	mov	r0, r3
    c078:	f7ff fd38 	bl	baec <log_const_source_id>
    c07c:	4603      	mov	r3, r0
    c07e:	b29b      	uxth	r3, r3
    c080:	e000      	b.n	c084 <z_impl_k_mutex_lock+0x464>
    c082:	2300      	movs	r3, #0
    c084:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
    c088:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    c08c:	2204      	movs	r2, #4
    c08e:	f362 0302 	bfi	r3, r2, #0, #3
    c092:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    c096:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    c09a:	f36f 03c5 	bfc	r3, #3, #3
    c09e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    c0a2:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
    c0a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    c0aa:	b29a      	uxth	r2, r3
    c0ac:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    c0ae:	f362 138f 	bfi	r3, r2, #6, #10
    c0b2:	863b      	strh	r3, [r7, #48]	; 0x30
    c0b4:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
    c0b8:	2b00      	cmp	r3, #0
    c0ba:	d012      	beq.n	c0e2 <z_impl_k_mutex_lock+0x4c2>
    c0bc:	4b65      	ldr	r3, [pc, #404]	; (c254 <z_impl_k_mutex_lock+0x634>)
    c0be:	689a      	ldr	r2, [r3, #8]
    c0c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
    c0c4:	2b00      	cmp	r3, #0
    c0c6:	d001      	beq.n	c0cc <z_impl_k_mutex_lock+0x4ac>
    c0c8:	2379      	movs	r3, #121	; 0x79
    c0ca:	e000      	b.n	c0ce <z_impl_k_mutex_lock+0x4ae>
    c0cc:	236e      	movs	r3, #110	; 0x6e
    c0ce:	9301      	str	r3, [sp, #4]
    c0d0:	68fb      	ldr	r3, [r7, #12]
    c0d2:	9300      	str	r3, [sp, #0]
    c0d4:	4613      	mov	r3, r2
    c0d6:	4a5a      	ldr	r2, [pc, #360]	; (c240 <z_impl_k_mutex_lock+0x620>)
    c0d8:	495f      	ldr	r1, [pc, #380]	; (c258 <z_impl_k_mutex_lock+0x638>)
    c0da:	8e38      	ldrh	r0, [r7, #48]	; 0x30
    c0dc:	f7f6 fdce 	bl	2c7c <log_from_user>
    c0e0:	e017      	b.n	c112 <z_impl_k_mutex_lock+0x4f2>
    c0e2:	4b57      	ldr	r3, [pc, #348]	; (c240 <z_impl_k_mutex_lock+0x620>)
    c0e4:	623b      	str	r3, [r7, #32]
    c0e6:	4b5b      	ldr	r3, [pc, #364]	; (c254 <z_impl_k_mutex_lock+0x634>)
    c0e8:	689b      	ldr	r3, [r3, #8]
    c0ea:	627b      	str	r3, [r7, #36]	; 0x24
    c0ec:	68fb      	ldr	r3, [r7, #12]
    c0ee:	62bb      	str	r3, [r7, #40]	; 0x28
    c0f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
    c0f4:	2b00      	cmp	r3, #0
    c0f6:	d001      	beq.n	c0fc <z_impl_k_mutex_lock+0x4dc>
    c0f8:	2379      	movs	r3, #121	; 0x79
    c0fa:	e000      	b.n	c0fe <z_impl_k_mutex_lock+0x4de>
    c0fc:	236e      	movs	r3, #110	; 0x6e
    c0fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    c100:	f107 0120 	add.w	r1, r7, #32
    c104:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    c106:	2204      	movs	r2, #4
    c108:	4853      	ldr	r0, [pc, #332]	; (c258 <z_impl_k_mutex_lock+0x638>)
    c10a:	f004 ff0f 	bl	10f2c <log_n>
    c10e:	e000      	b.n	c112 <z_impl_k_mutex_lock+0x4f2>
    c110:	bf00      	nop
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
    c112:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
    c116:	2b00      	cmp	r3, #0
    c118:	d101      	bne.n	c11e <z_impl_k_mutex_lock+0x4fe>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);
		return 0;
    c11a:	2300      	movs	r3, #0
    c11c:	e132      	b.n	c384 <z_impl_k_mutex_lock+0x764>
	}

	/* timed out */

	LOG_DBG("%p timeout on mutex %p", _current, mutex);
    c11e:	2303      	movs	r3, #3
    c120:	2b03      	cmp	r3, #3
    c122:	d943      	bls.n	c1ac <z_impl_k_mutex_lock+0x58c>
    c124:	f009 fe24 	bl	15d70 <k_is_user_context>
    c128:	4603      	mov	r3, r0
    c12a:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
    c12e:	2300      	movs	r3, #0
    c130:	61fb      	str	r3, [r7, #28]
    c132:	2303      	movs	r3, #3
    c134:	2b00      	cmp	r3, #0
    c136:	d007      	beq.n	c148 <z_impl_k_mutex_lock+0x528>
    c138:	4b44      	ldr	r3, [pc, #272]	; (c24c <z_impl_k_mutex_lock+0x62c>)
    c13a:	681b      	ldr	r3, [r3, #0]
    c13c:	4618      	mov	r0, r3
    c13e:	f7ff fcd5 	bl	baec <log_const_source_id>
    c142:	4603      	mov	r3, r0
    c144:	b29b      	uxth	r3, r3
    c146:	e000      	b.n	c14a <z_impl_k_mutex_lock+0x52a>
    c148:	2300      	movs	r3, #0
    c14a:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
    c14e:	7e3b      	ldrb	r3, [r7, #24]
    c150:	2204      	movs	r2, #4
    c152:	f362 0302 	bfi	r3, r2, #0, #3
    c156:	763b      	strb	r3, [r7, #24]
    c158:	7e3b      	ldrb	r3, [r7, #24]
    c15a:	f36f 03c5 	bfc	r3, #3, #3
    c15e:	763b      	strb	r3, [r7, #24]
    c160:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
    c164:	f3c3 0309 	ubfx	r3, r3, #0, #10
    c168:	b29a      	uxth	r2, r3
    c16a:	8b3b      	ldrh	r3, [r7, #24]
    c16c:	f362 138f 	bfi	r3, r2, #6, #10
    c170:	833b      	strh	r3, [r7, #24]
    c172:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
    c176:	2b00      	cmp	r3, #0
    c178:	d00a      	beq.n	c190 <z_impl_k_mutex_lock+0x570>
    c17a:	4b36      	ldr	r3, [pc, #216]	; (c254 <z_impl_k_mutex_lock+0x634>)
    c17c:	689a      	ldr	r2, [r3, #8]
    c17e:	68fb      	ldr	r3, [r7, #12]
    c180:	9300      	str	r3, [sp, #0]
    c182:	4613      	mov	r3, r2
    c184:	4a2e      	ldr	r2, [pc, #184]	; (c240 <z_impl_k_mutex_lock+0x620>)
    c186:	4935      	ldr	r1, [pc, #212]	; (c25c <z_impl_k_mutex_lock+0x63c>)
    c188:	8b38      	ldrh	r0, [r7, #24]
    c18a:	f7f6 fd77 	bl	2c7c <log_from_user>
    c18e:	e00e      	b.n	c1ae <z_impl_k_mutex_lock+0x58e>
    c190:	492b      	ldr	r1, [pc, #172]	; (c240 <z_impl_k_mutex_lock+0x620>)
    c192:	4b30      	ldr	r3, [pc, #192]	; (c254 <z_impl_k_mutex_lock+0x634>)
    c194:	689b      	ldr	r3, [r3, #8]
    c196:	4618      	mov	r0, r3
    c198:	68fa      	ldr	r2, [r7, #12]
    c19a:	8b3b      	ldrh	r3, [r7, #24]
    c19c:	f8ad 3000 	strh.w	r3, [sp]
    c1a0:	4613      	mov	r3, r2
    c1a2:	4602      	mov	r2, r0
    c1a4:	482d      	ldr	r0, [pc, #180]	; (c25c <z_impl_k_mutex_lock+0x63c>)
    c1a6:	f004 fea7 	bl	10ef8 <log_3>
    c1aa:	e000      	b.n	c1ae <z_impl_k_mutex_lock+0x58e>
    c1ac:	bf00      	nop
    c1ae:	4b26      	ldr	r3, [pc, #152]	; (c248 <z_impl_k_mutex_lock+0x628>)
    c1b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	__asm__ volatile(
    c1b4:	f04f 0320 	mov.w	r3, #32
    c1b8:	f3ef 8211 	mrs	r2, BASEPRI
    c1bc:	f383 8811 	msr	BASEPRI, r3
    c1c0:	f3bf 8f6f 	isb	sy
    c1c4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
    c1c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	return key;
    c1cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
	k.key = arch_irq_lock();
    c1d0:	673b      	str	r3, [r7, #112]	; 0x70
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c1d2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
    c1d6:	f7ff fbb5 	bl	b944 <z_spin_lock_valid>
    c1da:	4603      	mov	r3, r0
    c1dc:	f083 0301 	eor.w	r3, r3, #1
    c1e0:	b2db      	uxtb	r3, r3
    c1e2:	2b00      	cmp	r3, #0
    c1e4:	d00e      	beq.n	c204 <z_impl_k_mutex_lock+0x5e4>
    c1e6:	2381      	movs	r3, #129	; 0x81
    c1e8:	4a1d      	ldr	r2, [pc, #116]	; (c260 <z_impl_k_mutex_lock+0x640>)
    c1ea:	491e      	ldr	r1, [pc, #120]	; (c264 <z_impl_k_mutex_lock+0x644>)
    c1ec:	481e      	ldr	r0, [pc, #120]	; (c268 <z_impl_k_mutex_lock+0x648>)
    c1ee:	f003 fd41 	bl	fc74 <printk>
    c1f2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
    c1f6:	481d      	ldr	r0, [pc, #116]	; (c26c <z_impl_k_mutex_lock+0x64c>)
    c1f8:	f003 fd3c 	bl	fc74 <printk>
    c1fc:	2181      	movs	r1, #129	; 0x81
    c1fe:	4818      	ldr	r0, [pc, #96]	; (c260 <z_impl_k_mutex_lock+0x640>)
    c200:	f004 f994 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    c204:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
    c208:	f7ff fbd4 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    c20c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c20e:	67bb      	str	r3, [r7, #120]	; 0x78

	key = k_spin_lock(&lock);

	struct k_thread *waiter = z_waitq_head(&mutex->wait_q);
    c210:	68fb      	ldr	r3, [r7, #12]
    c212:	4618      	mov	r0, r3
    c214:	f009 fe6e 	bl	15ef4 <z_waitq_head>
    c218:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

	new_prio = (waiter != NULL) ?
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    c21c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
    c220:	2b00      	cmp	r3, #0
    c222:	d025      	beq.n	c270 <z_impl_k_mutex_lock+0x650>
    c224:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
    c228:	f993 300e 	ldrsb.w	r3, [r3, #14]
    c22c:	461a      	mov	r2, r3
    c22e:	68fb      	ldr	r3, [r7, #12]
    c230:	691b      	ldr	r3, [r3, #16]
    c232:	4619      	mov	r1, r3
    c234:	4610      	mov	r0, r2
    c236:	f009 fe80 	bl	15f3a <new_prio_for_inheritance>
    c23a:	4603      	mov	r3, r0
    c23c:	e01a      	b.n	c274 <z_impl_k_mutex_lock+0x654>
    c23e:	bf00      	nop
    c240:	0001ad94 	.word	0x0001ad94
    c244:	0001a35c 	.word	0x0001a35c
    c248:	20000c30 	.word	0x20000c30
    c24c:	20000170 	.word	0x20000170
    c250:	0001a380 	.word	0x0001a380
    c254:	20000c00 	.word	0x20000c00
    c258:	0001a3a4 	.word	0x0001a3a4
    c25c:	0001a3c4 	.word	0x0001a3c4
    c260:	0001a2a4 	.word	0x0001a2a4
    c264:	0001a2cc 	.word	0x0001a2cc
    c268:	0001a1c8 	.word	0x0001a1c8
    c26c:	0001a2e4 	.word	0x0001a2e4
    c270:	68fb      	ldr	r3, [r7, #12]
    c272:	691b      	ldr	r3, [r3, #16]
	new_prio = (waiter != NULL) ?
    c274:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		mutex->owner_orig_prio;

	LOG_DBG("adjusting prio down on mutex %p", mutex);
    c278:	2303      	movs	r3, #3
    c27a:	2b03      	cmp	r3, #3
    c27c:	d938      	bls.n	c2f0 <z_impl_k_mutex_lock+0x6d0>
    c27e:	f009 fd77 	bl	15d70 <k_is_user_context>
    c282:	4603      	mov	r3, r0
    c284:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    c288:	2300      	movs	r3, #0
    c28a:	617b      	str	r3, [r7, #20]
    c28c:	2303      	movs	r3, #3
    c28e:	2b00      	cmp	r3, #0
    c290:	d007      	beq.n	c2a2 <z_impl_k_mutex_lock+0x682>
    c292:	4b3e      	ldr	r3, [pc, #248]	; (c38c <z_impl_k_mutex_lock+0x76c>)
    c294:	681b      	ldr	r3, [r3, #0]
    c296:	4618      	mov	r0, r3
    c298:	f7ff fc28 	bl	baec <log_const_source_id>
    c29c:	4603      	mov	r3, r0
    c29e:	b29b      	uxth	r3, r3
    c2a0:	e000      	b.n	c2a4 <z_impl_k_mutex_lock+0x684>
    c2a2:	2300      	movs	r3, #0
    c2a4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
    c2a8:	7c3b      	ldrb	r3, [r7, #16]
    c2aa:	2204      	movs	r2, #4
    c2ac:	f362 0302 	bfi	r3, r2, #0, #3
    c2b0:	743b      	strb	r3, [r7, #16]
    c2b2:	7c3b      	ldrb	r3, [r7, #16]
    c2b4:	f36f 03c5 	bfc	r3, #3, #3
    c2b8:	743b      	strb	r3, [r7, #16]
    c2ba:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
    c2be:	f3c3 0309 	ubfx	r3, r3, #0, #10
    c2c2:	b29a      	uxth	r2, r3
    c2c4:	8a3b      	ldrh	r3, [r7, #16]
    c2c6:	f362 138f 	bfi	r3, r2, #6, #10
    c2ca:	823b      	strh	r3, [r7, #16]
    c2cc:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
    c2d0:	2b00      	cmp	r3, #0
    c2d2:	d006      	beq.n	c2e2 <z_impl_k_mutex_lock+0x6c2>
    c2d4:	68fb      	ldr	r3, [r7, #12]
    c2d6:	4a2e      	ldr	r2, [pc, #184]	; (c390 <z_impl_k_mutex_lock+0x770>)
    c2d8:	492e      	ldr	r1, [pc, #184]	; (c394 <z_impl_k_mutex_lock+0x774>)
    c2da:	8a38      	ldrh	r0, [r7, #16]
    c2dc:	f7f6 fcce 	bl	2c7c <log_from_user>
    c2e0:	e007      	b.n	c2f2 <z_impl_k_mutex_lock+0x6d2>
    c2e2:	492b      	ldr	r1, [pc, #172]	; (c390 <z_impl_k_mutex_lock+0x770>)
    c2e4:	68fa      	ldr	r2, [r7, #12]
    c2e6:	8a3b      	ldrh	r3, [r7, #16]
    c2e8:	482a      	ldr	r0, [pc, #168]	; (c394 <z_impl_k_mutex_lock+0x774>)
    c2ea:	f004 fdec 	bl	10ec6 <log_2>
    c2ee:	e000      	b.n	c2f2 <z_impl_k_mutex_lock+0x6d2>
    c2f0:	bf00      	nop

	resched = adjust_owner_prio(mutex, new_prio) || resched;
    c2f2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
    c2f6:	68f8      	ldr	r0, [r7, #12]
    c2f8:	f7ff fc08 	bl	bb0c <adjust_owner_prio>
    c2fc:	4603      	mov	r3, r0
    c2fe:	2b00      	cmp	r3, #0
    c300:	d103      	bne.n	c30a <z_impl_k_mutex_lock+0x6ea>
    c302:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
    c306:	2b00      	cmp	r3, #0
    c308:	d001      	beq.n	c30e <z_impl_k_mutex_lock+0x6ee>
    c30a:	2301      	movs	r3, #1
    c30c:	e000      	b.n	c310 <z_impl_k_mutex_lock+0x6f0>
    c30e:	2300      	movs	r3, #0
    c310:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    c314:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
    c318:	f003 0301 	and.w	r3, r3, #1
    c31c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7

	if (resched) {
    c320:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
    c324:	2b00      	cmp	r3, #0
    c326:	d004      	beq.n	c332 <z_impl_k_mutex_lock+0x712>
		z_reschedule(&lock, key);
    c328:	6fb9      	ldr	r1, [r7, #120]	; 0x78
    c32a:	481b      	ldr	r0, [pc, #108]	; (c398 <z_impl_k_mutex_lock+0x778>)
    c32c:	f001 fcec 	bl	dd08 <z_reschedule>
    c330:	e026      	b.n	c380 <z_impl_k_mutex_lock+0x760>
    c332:	4b19      	ldr	r3, [pc, #100]	; (c398 <z_impl_k_mutex_lock+0x778>)
    c334:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    c338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    c33a:	677b      	str	r3, [r7, #116]	; 0x74
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c33c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
    c340:	f7ff fb1c 	bl	b97c <z_spin_unlock_valid>
    c344:	4603      	mov	r3, r0
    c346:	f083 0301 	eor.w	r3, r3, #1
    c34a:	b2db      	uxtb	r3, r3
    c34c:	2b00      	cmp	r3, #0
    c34e:	d00e      	beq.n	c36e <z_impl_k_mutex_lock+0x74e>
    c350:	23ac      	movs	r3, #172	; 0xac
    c352:	4a12      	ldr	r2, [pc, #72]	; (c39c <z_impl_k_mutex_lock+0x77c>)
    c354:	4912      	ldr	r1, [pc, #72]	; (c3a0 <z_impl_k_mutex_lock+0x780>)
    c356:	4813      	ldr	r0, [pc, #76]	; (c3a4 <z_impl_k_mutex_lock+0x784>)
    c358:	f003 fc8c 	bl	fc74 <printk>
    c35c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
    c360:	4811      	ldr	r0, [pc, #68]	; (c3a8 <z_impl_k_mutex_lock+0x788>)
    c362:	f003 fc87 	bl	fc74 <printk>
    c366:	21ac      	movs	r1, #172	; 0xac
    c368:	480c      	ldr	r0, [pc, #48]	; (c39c <z_impl_k_mutex_lock+0x77c>)
    c36a:	f004 f8df 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    c36e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c370:	67fb      	str	r3, [r7, #124]	; 0x7c
	__asm__ volatile(
    c372:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    c374:	f383 8811 	msr	BASEPRI, r3
    c378:	f3bf 8f6f 	isb	sy
}
    c37c:	bf00      	nop
}
    c37e:	bf00      	nop
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
    c380:	f06f 030a 	mvn.w	r3, #10
}
    c384:	4618      	mov	r0, r3
    c386:	37d8      	adds	r7, #216	; 0xd8
    c388:	46bd      	mov	sp, r7
    c38a:	bd80      	pop	{r7, pc}
    c38c:	20000170 	.word	0x20000170
    c390:	0001ad94 	.word	0x0001ad94
    c394:	0001a3e0 	.word	0x0001a3e0
    c398:	20000c30 	.word	0x20000c30
    c39c:	0001a2a4 	.word	0x0001a2a4
    c3a0:	0001a32c 	.word	0x0001a32c
    c3a4:	0001a1c8 	.word	0x0001a1c8
    c3a8:	0001a344 	.word	0x0001a344

0000c3ac <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    c3ac:	b580      	push	{r7, lr}
    c3ae:	b09a      	sub	sp, #104	; 0x68
    c3b0:	af02      	add	r7, sp, #8
    c3b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c3b4:	f3ef 8305 	mrs	r3, IPSR
    c3b8:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
    c3ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c3bc:	2b00      	cmp	r3, #0
    c3be:	bf14      	ite	ne
    c3c0:	2301      	movne	r3, #1
    c3c2:	2300      	moveq	r3, #0
    c3c4:	b2db      	uxtb	r3, r3
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    c3c6:	2b00      	cmp	r3, #0
    c3c8:	d00c      	beq.n	c3e4 <z_impl_k_mutex_unlock+0x38>
    c3ca:	23c7      	movs	r3, #199	; 0xc7
    c3cc:	4aab      	ldr	r2, [pc, #684]	; (c67c <z_impl_k_mutex_unlock+0x2d0>)
    c3ce:	49ac      	ldr	r1, [pc, #688]	; (c680 <z_impl_k_mutex_unlock+0x2d4>)
    c3d0:	48ac      	ldr	r0, [pc, #688]	; (c684 <z_impl_k_mutex_unlock+0x2d8>)
    c3d2:	f003 fc4f 	bl	fc74 <printk>
    c3d6:	48ac      	ldr	r0, [pc, #688]	; (c688 <z_impl_k_mutex_unlock+0x2dc>)
    c3d8:	f003 fc4c 	bl	fc74 <printk>
    c3dc:	21c7      	movs	r1, #199	; 0xc7
    c3de:	48a7      	ldr	r0, [pc, #668]	; (c67c <z_impl_k_mutex_unlock+0x2d0>)
    c3e0:	f004 f8a4 	bl	1052c <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    c3e4:	687b      	ldr	r3, [r7, #4]
    c3e6:	689b      	ldr	r3, [r3, #8]
    c3e8:	2b00      	cmp	r3, #0
    c3ea:	d102      	bne.n	c3f2 <z_impl_k_mutex_unlock+0x46>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, -EINVAL);

		return -EINVAL;
    c3ec:	f06f 0315 	mvn.w	r3, #21
    c3f0:	e13f      	b.n	c672 <z_impl_k_mutex_unlock+0x2c6>
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    c3f2:	687b      	ldr	r3, [r7, #4]
    c3f4:	689a      	ldr	r2, [r3, #8]
    c3f6:	4ba5      	ldr	r3, [pc, #660]	; (c68c <z_impl_k_mutex_unlock+0x2e0>)
    c3f8:	689b      	ldr	r3, [r3, #8]
    c3fa:	429a      	cmp	r2, r3
    c3fc:	d002      	beq.n	c404 <z_impl_k_mutex_unlock+0x58>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, -EPERM);

		return -EPERM;
    c3fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c402:	e136      	b.n	c672 <z_impl_k_mutex_unlock+0x2c6>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    c404:	687b      	ldr	r3, [r7, #4]
    c406:	68db      	ldr	r3, [r3, #12]
    c408:	2b00      	cmp	r3, #0
    c40a:	d109      	bne.n	c420 <z_impl_k_mutex_unlock+0x74>
    c40c:	23df      	movs	r3, #223	; 0xdf
    c40e:	4a9b      	ldr	r2, [pc, #620]	; (c67c <z_impl_k_mutex_unlock+0x2d0>)
    c410:	499f      	ldr	r1, [pc, #636]	; (c690 <z_impl_k_mutex_unlock+0x2e4>)
    c412:	489c      	ldr	r0, [pc, #624]	; (c684 <z_impl_k_mutex_unlock+0x2d8>)
    c414:	f003 fc2e 	bl	fc74 <printk>
    c418:	21df      	movs	r1, #223	; 0xdf
    c41a:	4898      	ldr	r0, [pc, #608]	; (c67c <z_impl_k_mutex_unlock+0x2d0>)
    c41c:	f004 f886 	bl	1052c <assert_post_action>

	z_sched_lock();
    c420:	f7ff fb20 	bl	ba64 <z_sched_lock>

	LOG_DBG("mutex %p lock_count: %d", mutex, mutex->lock_count);
    c424:	2303      	movs	r3, #3
    c426:	2b03      	cmp	r3, #3
    c428:	d945      	bls.n	c4b6 <z_impl_k_mutex_unlock+0x10a>
    c42a:	f009 fca1 	bl	15d70 <k_is_user_context>
    c42e:	4603      	mov	r3, r0
    c430:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    c434:	2300      	movs	r3, #0
    c436:	627b      	str	r3, [r7, #36]	; 0x24
    c438:	2303      	movs	r3, #3
    c43a:	2b00      	cmp	r3, #0
    c43c:	d007      	beq.n	c44e <z_impl_k_mutex_unlock+0xa2>
    c43e:	4b95      	ldr	r3, [pc, #596]	; (c694 <z_impl_k_mutex_unlock+0x2e8>)
    c440:	681b      	ldr	r3, [r3, #0]
    c442:	4618      	mov	r0, r3
    c444:	f7ff fb52 	bl	baec <log_const_source_id>
    c448:	4603      	mov	r3, r0
    c44a:	b29b      	uxth	r3, r3
    c44c:	e000      	b.n	c450 <z_impl_k_mutex_unlock+0xa4>
    c44e:	2300      	movs	r3, #0
    c450:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    c454:	f897 3020 	ldrb.w	r3, [r7, #32]
    c458:	2204      	movs	r2, #4
    c45a:	f362 0302 	bfi	r3, r2, #0, #3
    c45e:	f887 3020 	strb.w	r3, [r7, #32]
    c462:	f897 3020 	ldrb.w	r3, [r7, #32]
    c466:	f36f 03c5 	bfc	r3, #3, #3
    c46a:	f887 3020 	strb.w	r3, [r7, #32]
    c46e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
    c472:	f3c3 0309 	ubfx	r3, r3, #0, #10
    c476:	b29a      	uxth	r2, r3
    c478:	8c3b      	ldrh	r3, [r7, #32]
    c47a:	f362 138f 	bfi	r3, r2, #6, #10
    c47e:	843b      	strh	r3, [r7, #32]
    c480:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    c484:	2b00      	cmp	r3, #0
    c486:	d009      	beq.n	c49c <z_impl_k_mutex_unlock+0xf0>
    c488:	687b      	ldr	r3, [r7, #4]
    c48a:	68db      	ldr	r3, [r3, #12]
    c48c:	9300      	str	r3, [sp, #0]
    c48e:	687b      	ldr	r3, [r7, #4]
    c490:	4a81      	ldr	r2, [pc, #516]	; (c698 <z_impl_k_mutex_unlock+0x2ec>)
    c492:	4982      	ldr	r1, [pc, #520]	; (c69c <z_impl_k_mutex_unlock+0x2f0>)
    c494:	8c38      	ldrh	r0, [r7, #32]
    c496:	f7f6 fbf1 	bl	2c7c <log_from_user>
    c49a:	e00d      	b.n	c4b8 <z_impl_k_mutex_unlock+0x10c>
    c49c:	487e      	ldr	r0, [pc, #504]	; (c698 <z_impl_k_mutex_unlock+0x2ec>)
    c49e:	687a      	ldr	r2, [r7, #4]
    c4a0:	687b      	ldr	r3, [r7, #4]
    c4a2:	68d9      	ldr	r1, [r3, #12]
    c4a4:	8c3b      	ldrh	r3, [r7, #32]
    c4a6:	f8ad 3000 	strh.w	r3, [sp]
    c4aa:	460b      	mov	r3, r1
    c4ac:	4601      	mov	r1, r0
    c4ae:	487b      	ldr	r0, [pc, #492]	; (c69c <z_impl_k_mutex_unlock+0x2f0>)
    c4b0:	f004 fd22 	bl	10ef8 <log_3>
    c4b4:	e000      	b.n	c4b8 <z_impl_k_mutex_unlock+0x10c>
    c4b6:	bf00      	nop

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    c4b8:	687b      	ldr	r3, [r7, #4]
    c4ba:	68db      	ldr	r3, [r3, #12]
    c4bc:	2b01      	cmp	r3, #1
    c4be:	d905      	bls.n	c4cc <z_impl_k_mutex_unlock+0x120>
		mutex->lock_count--;
    c4c0:	687b      	ldr	r3, [r7, #4]
    c4c2:	68db      	ldr	r3, [r3, #12]
    c4c4:	1e5a      	subs	r2, r3, #1
    c4c6:	687b      	ldr	r3, [r7, #4]
    c4c8:	60da      	str	r2, [r3, #12]
		goto k_mutex_unlock_return;
    c4ca:	e0cf      	b.n	c66c <z_impl_k_mutex_unlock+0x2c0>
    c4cc:	4b74      	ldr	r3, [pc, #464]	; (c6a0 <z_impl_k_mutex_unlock+0x2f4>)
    c4ce:	64fb      	str	r3, [r7, #76]	; 0x4c
	__asm__ volatile(
    c4d0:	f04f 0320 	mov.w	r3, #32
    c4d4:	f3ef 8211 	mrs	r2, BASEPRI
    c4d8:	f383 8811 	msr	BASEPRI, r3
    c4dc:	f3bf 8f6f 	isb	sy
    c4e0:	64ba      	str	r2, [r7, #72]	; 0x48
    c4e2:	647b      	str	r3, [r7, #68]	; 0x44
	return key;
    c4e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	k.key = arch_irq_lock();
    c4e6:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c4e8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    c4ea:	f7ff fa2b 	bl	b944 <z_spin_lock_valid>
    c4ee:	4603      	mov	r3, r0
    c4f0:	f083 0301 	eor.w	r3, r3, #1
    c4f4:	b2db      	uxtb	r3, r3
    c4f6:	2b00      	cmp	r3, #0
    c4f8:	d00d      	beq.n	c516 <z_impl_k_mutex_unlock+0x16a>
    c4fa:	2381      	movs	r3, #129	; 0x81
    c4fc:	4a69      	ldr	r2, [pc, #420]	; (c6a4 <z_impl_k_mutex_unlock+0x2f8>)
    c4fe:	496a      	ldr	r1, [pc, #424]	; (c6a8 <z_impl_k_mutex_unlock+0x2fc>)
    c500:	4860      	ldr	r0, [pc, #384]	; (c684 <z_impl_k_mutex_unlock+0x2d8>)
    c502:	f003 fbb7 	bl	fc74 <printk>
    c506:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    c508:	4868      	ldr	r0, [pc, #416]	; (c6ac <z_impl_k_mutex_unlock+0x300>)
    c50a:	f003 fbb3 	bl	fc74 <printk>
    c50e:	2181      	movs	r1, #129	; 0x81
    c510:	4864      	ldr	r0, [pc, #400]	; (c6a4 <z_impl_k_mutex_unlock+0x2f8>)
    c512:	f004 f80b 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    c516:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    c518:	f7ff fa4c 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    c51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c51e:	633b      	str	r3, [r7, #48]	; 0x30
	}

	k_spinlock_key_t key = k_spin_lock(&lock);

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    c520:	687b      	ldr	r3, [r7, #4]
    c522:	691b      	ldr	r3, [r3, #16]
    c524:	4619      	mov	r1, r3
    c526:	6878      	ldr	r0, [r7, #4]
    c528:	f7ff faf0 	bl	bb0c <adjust_owner_prio>

	/* Get the new owner, if any */
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    c52c:	687b      	ldr	r3, [r7, #4]
    c52e:	4618      	mov	r0, r3
    c530:	f001 fa4c 	bl	d9cc <z_unpend_first_thread>
    c534:	65b8      	str	r0, [r7, #88]	; 0x58

	mutex->owner = new_owner;
    c536:	687b      	ldr	r3, [r7, #4]
    c538:	6dba      	ldr	r2, [r7, #88]	; 0x58
    c53a:	609a      	str	r2, [r3, #8]

	LOG_DBG("new owner of mutex %p: %p (prio: %d)",
    c53c:	2303      	movs	r3, #3
    c53e:	2b03      	cmp	r3, #3
    c540:	d953      	bls.n	c5ea <z_impl_k_mutex_unlock+0x23e>
    c542:	f009 fc15 	bl	15d70 <k_is_user_context>
    c546:	4603      	mov	r3, r0
    c548:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    c54c:	2300      	movs	r3, #0
    c54e:	61fb      	str	r3, [r7, #28]
    c550:	2303      	movs	r3, #3
    c552:	2b00      	cmp	r3, #0
    c554:	d007      	beq.n	c566 <z_impl_k_mutex_unlock+0x1ba>
    c556:	4b4f      	ldr	r3, [pc, #316]	; (c694 <z_impl_k_mutex_unlock+0x2e8>)
    c558:	681b      	ldr	r3, [r3, #0]
    c55a:	4618      	mov	r0, r3
    c55c:	f7ff fac6 	bl	baec <log_const_source_id>
    c560:	4603      	mov	r3, r0
    c562:	b29b      	uxth	r3, r3
    c564:	e000      	b.n	c568 <z_impl_k_mutex_unlock+0x1bc>
    c566:	2300      	movs	r3, #0
    c568:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    c56c:	7e3b      	ldrb	r3, [r7, #24]
    c56e:	2204      	movs	r2, #4
    c570:	f362 0302 	bfi	r3, r2, #0, #3
    c574:	763b      	strb	r3, [r7, #24]
    c576:	7e3b      	ldrb	r3, [r7, #24]
    c578:	f36f 03c5 	bfc	r3, #3, #3
    c57c:	763b      	strb	r3, [r7, #24]
    c57e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
    c582:	f3c3 0309 	ubfx	r3, r3, #0, #10
    c586:	b29a      	uxth	r2, r3
    c588:	8b3b      	ldrh	r3, [r7, #24]
    c58a:	f362 138f 	bfi	r3, r2, #6, #10
    c58e:	833b      	strh	r3, [r7, #24]
    c590:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
    c594:	2b00      	cmp	r3, #0
    c596:	d011      	beq.n	c5bc <z_impl_k_mutex_unlock+0x210>
    c598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c59a:	2b00      	cmp	r3, #0
    c59c:	d003      	beq.n	c5a6 <z_impl_k_mutex_unlock+0x1fa>
    c59e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c5a0:	f993 300e 	ldrsb.w	r3, [r3, #14]
    c5a4:	e000      	b.n	c5a8 <z_impl_k_mutex_unlock+0x1fc>
    c5a6:	4b42      	ldr	r3, [pc, #264]	; (c6b0 <z_impl_k_mutex_unlock+0x304>)
    c5a8:	9301      	str	r3, [sp, #4]
    c5aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c5ac:	9300      	str	r3, [sp, #0]
    c5ae:	687b      	ldr	r3, [r7, #4]
    c5b0:	4a39      	ldr	r2, [pc, #228]	; (c698 <z_impl_k_mutex_unlock+0x2ec>)
    c5b2:	4940      	ldr	r1, [pc, #256]	; (c6b4 <z_impl_k_mutex_unlock+0x308>)
    c5b4:	8b38      	ldrh	r0, [r7, #24]
    c5b6:	f7f6 fb61 	bl	2c7c <log_from_user>
    c5ba:	e017      	b.n	c5ec <z_impl_k_mutex_unlock+0x240>
    c5bc:	4b36      	ldr	r3, [pc, #216]	; (c698 <z_impl_k_mutex_unlock+0x2ec>)
    c5be:	60bb      	str	r3, [r7, #8]
    c5c0:	687b      	ldr	r3, [r7, #4]
    c5c2:	60fb      	str	r3, [r7, #12]
    c5c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c5c6:	613b      	str	r3, [r7, #16]
    c5c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c5ca:	2b00      	cmp	r3, #0
    c5cc:	d003      	beq.n	c5d6 <z_impl_k_mutex_unlock+0x22a>
    c5ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c5d0:	f993 300e 	ldrsb.w	r3, [r3, #14]
    c5d4:	e000      	b.n	c5d8 <z_impl_k_mutex_unlock+0x22c>
    c5d6:	4b36      	ldr	r3, [pc, #216]	; (c6b0 <z_impl_k_mutex_unlock+0x304>)
    c5d8:	617b      	str	r3, [r7, #20]
    c5da:	f107 0108 	add.w	r1, r7, #8
    c5de:	8b3b      	ldrh	r3, [r7, #24]
    c5e0:	2204      	movs	r2, #4
    c5e2:	4834      	ldr	r0, [pc, #208]	; (c6b4 <z_impl_k_mutex_unlock+0x308>)
    c5e4:	f004 fca2 	bl	10f2c <log_n>
    c5e8:	e000      	b.n	c5ec <z_impl_k_mutex_unlock+0x240>
    c5ea:	bf00      	nop
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner != NULL) {
    c5ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c5ee:	2b00      	cmp	r3, #0
    c5f0:	d015      	beq.n	c61e <z_impl_k_mutex_unlock+0x272>
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner_orig_prio = new_owner->base.prio;
    c5f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c5f4:	f993 300e 	ldrsb.w	r3, [r3, #14]
    c5f8:	461a      	mov	r2, r3
    c5fa:	687b      	ldr	r3, [r7, #4]
    c5fc:	611a      	str	r2, [r3, #16]
    c5fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    c600:	643b      	str	r3, [r7, #64]	; 0x40
    c602:	2300      	movs	r3, #0
    c604:	63fb      	str	r3, [r7, #60]	; 0x3c
	thread->arch.swap_return_value = value;
    c606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c608:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    c60a:	679a      	str	r2, [r3, #120]	; 0x78
}
    c60c:	bf00      	nop
		arch_thread_return_value_set(new_owner, 0);
		z_ready_thread(new_owner);
    c60e:	6db8      	ldr	r0, [r7, #88]	; 0x58
    c610:	f000 fd46 	bl	d0a0 <z_ready_thread>
		z_reschedule(&lock, key);
    c614:	6b39      	ldr	r1, [r7, #48]	; 0x30
    c616:	4822      	ldr	r0, [pc, #136]	; (c6a0 <z_impl_k_mutex_unlock+0x2f4>)
    c618:	f001 fb76 	bl	dd08 <z_reschedule>
    c61c:	e026      	b.n	c66c <z_impl_k_mutex_unlock+0x2c0>
	} else {
		mutex->lock_count = 0U;
    c61e:	687b      	ldr	r3, [r7, #4]
    c620:	2200      	movs	r2, #0
    c622:	60da      	str	r2, [r3, #12]
    c624:	4b1e      	ldr	r3, [pc, #120]	; (c6a0 <z_impl_k_mutex_unlock+0x2f4>)
    c626:	63bb      	str	r3, [r7, #56]	; 0x38
    c628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    c62a:	62fb      	str	r3, [r7, #44]	; 0x2c
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c62c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    c62e:	f7ff f9a5 	bl	b97c <z_spin_unlock_valid>
    c632:	4603      	mov	r3, r0
    c634:	f083 0301 	eor.w	r3, r3, #1
    c638:	b2db      	uxtb	r3, r3
    c63a:	2b00      	cmp	r3, #0
    c63c:	d00d      	beq.n	c65a <z_impl_k_mutex_unlock+0x2ae>
    c63e:	23ac      	movs	r3, #172	; 0xac
    c640:	4a18      	ldr	r2, [pc, #96]	; (c6a4 <z_impl_k_mutex_unlock+0x2f8>)
    c642:	491d      	ldr	r1, [pc, #116]	; (c6b8 <z_impl_k_mutex_unlock+0x30c>)
    c644:	480f      	ldr	r0, [pc, #60]	; (c684 <z_impl_k_mutex_unlock+0x2d8>)
    c646:	f003 fb15 	bl	fc74 <printk>
    c64a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    c64c:	481b      	ldr	r0, [pc, #108]	; (c6bc <z_impl_k_mutex_unlock+0x310>)
    c64e:	f003 fb11 	bl	fc74 <printk>
    c652:	21ac      	movs	r1, #172	; 0xac
    c654:	4813      	ldr	r0, [pc, #76]	; (c6a4 <z_impl_k_mutex_unlock+0x2f8>)
    c656:	f003 ff69 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    c65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c65c:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
    c65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    c660:	f383 8811 	msr	BASEPRI, r3
    c664:	f3bf 8f6f 	isb	sy
}
    c668:	bf00      	nop
}
    c66a:	bf00      	nop


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    c66c:	f001 fc1e 	bl	deac <k_sched_unlock>

	return 0;
    c670:	2300      	movs	r3, #0
}
    c672:	4618      	mov	r0, r3
    c674:	3760      	adds	r7, #96	; 0x60
    c676:	46bd      	mov	sp, r7
    c678:	bd80      	pop	{r7, pc}
    c67a:	bf00      	nop
    c67c:	0001a258 	.word	0x0001a258
    c680:	0001a1b4 	.word	0x0001a1b4
    c684:	0001a1c8 	.word	0x0001a1c8
    c688:	0001a27c 	.word	0x0001a27c
    c68c:	20000c00 	.word	0x20000c00
    c690:	0001a404 	.word	0x0001a404
    c694:	20000170 	.word	0x20000170
    c698:	0001ada8 	.word	0x0001ada8
    c69c:	0001a41c 	.word	0x0001a41c
    c6a0:	20000c30 	.word	0x20000c30
    c6a4:	0001a2a4 	.word	0x0001a2a4
    c6a8:	0001a2cc 	.word	0x0001a2cc
    c6ac:	0001a2e4 	.word	0x0001a2e4
    c6b0:	fffffc18 	.word	0xfffffc18
    c6b4:	0001a438 	.word	0x0001a438
    c6b8:	0001a32c 	.word	0x0001a32c
    c6bc:	0001a344 	.word	0x0001a344

0000c6c0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    c6c0:	b580      	push	{r7, lr}
    c6c2:	b08a      	sub	sp, #40	; 0x28
    c6c4:	af00      	add	r7, sp, #0
    c6c6:	6078      	str	r0, [r7, #4]
    c6c8:	4b2b      	ldr	r3, [pc, #172]	; (c778 <z_impl_k_sem_give+0xb8>)
    c6ca:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
    c6cc:	f04f 0320 	mov.w	r3, #32
    c6d0:	f3ef 8211 	mrs	r2, BASEPRI
    c6d4:	f383 8811 	msr	BASEPRI, r3
    c6d8:	f3bf 8f6f 	isb	sy
    c6dc:	61fa      	str	r2, [r7, #28]
    c6de:	61bb      	str	r3, [r7, #24]
	return key;
    c6e0:	69fb      	ldr	r3, [r7, #28]
	k.key = arch_irq_lock();
    c6e2:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c6e4:	6a38      	ldr	r0, [r7, #32]
    c6e6:	f7ff f92d 	bl	b944 <z_spin_lock_valid>
    c6ea:	4603      	mov	r3, r0
    c6ec:	f083 0301 	eor.w	r3, r3, #1
    c6f0:	b2db      	uxtb	r3, r3
    c6f2:	2b00      	cmp	r3, #0
    c6f4:	d00d      	beq.n	c712 <z_impl_k_sem_give+0x52>
    c6f6:	2381      	movs	r3, #129	; 0x81
    c6f8:	4a20      	ldr	r2, [pc, #128]	; (c77c <z_impl_k_sem_give+0xbc>)
    c6fa:	4921      	ldr	r1, [pc, #132]	; (c780 <z_impl_k_sem_give+0xc0>)
    c6fc:	4821      	ldr	r0, [pc, #132]	; (c784 <z_impl_k_sem_give+0xc4>)
    c6fe:	f003 fab9 	bl	fc74 <printk>
    c702:	6a39      	ldr	r1, [r7, #32]
    c704:	4820      	ldr	r0, [pc, #128]	; (c788 <z_impl_k_sem_give+0xc8>)
    c706:	f003 fab5 	bl	fc74 <printk>
    c70a:	2181      	movs	r1, #129	; 0x81
    c70c:	481b      	ldr	r0, [pc, #108]	; (c77c <z_impl_k_sem_give+0xbc>)
    c70e:	f003 ff0d 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    c712:	6a38      	ldr	r0, [r7, #32]
    c714:	f7ff f94e 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    c718:	68bb      	ldr	r3, [r7, #8]
    c71a:	60fb      	str	r3, [r7, #12]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    c71c:	687b      	ldr	r3, [r7, #4]
    c71e:	4618      	mov	r0, r3
    c720:	f001 f954 	bl	d9cc <z_unpend_first_thread>
    c724:	6278      	str	r0, [r7, #36]	; 0x24

	if (thread != NULL) {
    c726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c728:	2b00      	cmp	r3, #0
    c72a:	d00b      	beq.n	c744 <z_impl_k_sem_give+0x84>
    c72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c72e:	617b      	str	r3, [r7, #20]
    c730:	2300      	movs	r3, #0
    c732:	613b      	str	r3, [r7, #16]
	thread->arch.swap_return_value = value;
    c734:	697b      	ldr	r3, [r7, #20]
    c736:	693a      	ldr	r2, [r7, #16]
    c738:	679a      	str	r2, [r3, #120]	; 0x78
}
    c73a:	bf00      	nop
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    c73c:	6a78      	ldr	r0, [r7, #36]	; 0x24
    c73e:	f000 fcaf 	bl	d0a0 <z_ready_thread>
    c742:	e010      	b.n	c766 <z_impl_k_sem_give+0xa6>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    c744:	687b      	ldr	r3, [r7, #4]
    c746:	689b      	ldr	r3, [r3, #8]
    c748:	687a      	ldr	r2, [r7, #4]
    c74a:	6891      	ldr	r1, [r2, #8]
    c74c:	687a      	ldr	r2, [r7, #4]
    c74e:	68d2      	ldr	r2, [r2, #12]
    c750:	4291      	cmp	r1, r2
    c752:	d001      	beq.n	c758 <z_impl_k_sem_give+0x98>
    c754:	2201      	movs	r2, #1
    c756:	e000      	b.n	c75a <z_impl_k_sem_give+0x9a>
    c758:	2200      	movs	r2, #0
    c75a:	441a      	add	r2, r3
    c75c:	687b      	ldr	r3, [r7, #4]
    c75e:	609a      	str	r2, [r3, #8]
		handle_poll_events(sem);
    c760:	6878      	ldr	r0, [r7, #4]
    c762:	f009 fc03 	bl	15f6c <handle_poll_events>
	}

	z_reschedule(&lock, key);
    c766:	68f9      	ldr	r1, [r7, #12]
    c768:	4803      	ldr	r0, [pc, #12]	; (c778 <z_impl_k_sem_give+0xb8>)
    c76a:	f001 facd 	bl	dd08 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    c76e:	bf00      	nop
    c770:	3728      	adds	r7, #40	; 0x28
    c772:	46bd      	mov	sp, r7
    c774:	bd80      	pop	{r7, pc}
    c776:	bf00      	nop
    c778:	20000c34 	.word	0x20000c34
    c77c:	0001a464 	.word	0x0001a464
    c780:	0001a48c 	.word	0x0001a48c
    c784:	0001a4a4 	.word	0x0001a4a4
    c788:	0001a4c4 	.word	0x0001a4c4

0000c78c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    c78c:	b580      	push	{r7, lr}
    c78e:	b094      	sub	sp, #80	; 0x50
    c790:	af02      	add	r7, sp, #8
    c792:	60f8      	str	r0, [r7, #12]
    c794:	e9c7 2300 	strd	r2, r3, [r7]
	int ret = 0;
    c798:	2300      	movs	r3, #0
    c79a:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c79c:	f3ef 8305 	mrs	r3, IPSR
    c7a0:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
    c7a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    c7a4:	2b00      	cmp	r3, #0
    c7a6:	bf14      	ite	ne
    c7a8:	2301      	movne	r3, #1
    c7aa:	2300      	moveq	r3, #0
    c7ac:	b2db      	uxtb	r3, r3

	__ASSERT(((arch_is_in_isr() == false) ||
    c7ae:	2b00      	cmp	r3, #0
    c7b0:	d016      	beq.n	c7e0 <z_impl_k_sem_take+0x54>
    c7b2:	e9d7 2300 	ldrd	r2, r3, [r7]
    c7b6:	f04f 0000 	mov.w	r0, #0
    c7ba:	f04f 0100 	mov.w	r1, #0
    c7be:	428b      	cmp	r3, r1
    c7c0:	bf08      	it	eq
    c7c2:	4282      	cmpeq	r2, r0
    c7c4:	d00c      	beq.n	c7e0 <z_impl_k_sem_take+0x54>
    c7c6:	2379      	movs	r3, #121	; 0x79
    c7c8:	4a56      	ldr	r2, [pc, #344]	; (c924 <z_impl_k_sem_take+0x198>)
    c7ca:	4957      	ldr	r1, [pc, #348]	; (c928 <z_impl_k_sem_take+0x19c>)
    c7cc:	4857      	ldr	r0, [pc, #348]	; (c92c <z_impl_k_sem_take+0x1a0>)
    c7ce:	f003 fa51 	bl	fc74 <printk>
    c7d2:	4857      	ldr	r0, [pc, #348]	; (c930 <z_impl_k_sem_take+0x1a4>)
    c7d4:	f003 fa4e 	bl	fc74 <printk>
    c7d8:	2179      	movs	r1, #121	; 0x79
    c7da:	4852      	ldr	r0, [pc, #328]	; (c924 <z_impl_k_sem_take+0x198>)
    c7dc:	f003 fea6 	bl	1052c <assert_post_action>
    c7e0:	4b54      	ldr	r3, [pc, #336]	; (c934 <z_impl_k_sem_take+0x1a8>)
    c7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	__asm__ volatile(
    c7e4:	f04f 0320 	mov.w	r3, #32
    c7e8:	f3ef 8211 	mrs	r2, BASEPRI
    c7ec:	f383 8811 	msr	BASEPRI, r3
    c7f0:	f3bf 8f6f 	isb	sy
    c7f4:	63ba      	str	r2, [r7, #56]	; 0x38
    c7f6:	637b      	str	r3, [r7, #52]	; 0x34
	return key;
    c7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	k.key = arch_irq_lock();
    c7fa:	61bb      	str	r3, [r7, #24]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    c7fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c7fe:	f7ff f8a1 	bl	b944 <z_spin_lock_valid>
    c802:	4603      	mov	r3, r0
    c804:	f083 0301 	eor.w	r3, r3, #1
    c808:	b2db      	uxtb	r3, r3
    c80a:	2b00      	cmp	r3, #0
    c80c:	d00d      	beq.n	c82a <z_impl_k_sem_take+0x9e>
    c80e:	2381      	movs	r3, #129	; 0x81
    c810:	4a49      	ldr	r2, [pc, #292]	; (c938 <z_impl_k_sem_take+0x1ac>)
    c812:	494a      	ldr	r1, [pc, #296]	; (c93c <z_impl_k_sem_take+0x1b0>)
    c814:	4845      	ldr	r0, [pc, #276]	; (c92c <z_impl_k_sem_take+0x1a0>)
    c816:	f003 fa2d 	bl	fc74 <printk>
    c81a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    c81c:	4848      	ldr	r0, [pc, #288]	; (c940 <z_impl_k_sem_take+0x1b4>)
    c81e:	f003 fa29 	bl	fc74 <printk>
    c822:	2181      	movs	r1, #129	; 0x81
    c824:	4844      	ldr	r0, [pc, #272]	; (c938 <z_impl_k_sem_take+0x1ac>)
    c826:	f003 fe81 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    c82a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    c82c:	f7ff f8c2 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    c830:	69bb      	ldr	r3, [r7, #24]
    c832:	623b      	str	r3, [r7, #32]

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    c834:	68fb      	ldr	r3, [r7, #12]
    c836:	689b      	ldr	r3, [r3, #8]
    c838:	2b00      	cmp	r3, #0
    c83a:	bf14      	ite	ne
    c83c:	2301      	movne	r3, #1
    c83e:	2300      	moveq	r3, #0
    c840:	b2db      	uxtb	r3, r3
    c842:	2b00      	cmp	r3, #0
    c844:	d02b      	beq.n	c89e <z_impl_k_sem_take+0x112>
		sem->count--;
    c846:	68fb      	ldr	r3, [r7, #12]
    c848:	689b      	ldr	r3, [r3, #8]
    c84a:	1e5a      	subs	r2, r3, #1
    c84c:	68fb      	ldr	r3, [r7, #12]
    c84e:	609a      	str	r2, [r3, #8]
    c850:	4b38      	ldr	r3, [pc, #224]	; (c934 <z_impl_k_sem_take+0x1a8>)
    c852:	633b      	str	r3, [r7, #48]	; 0x30
    c854:	6a3b      	ldr	r3, [r7, #32]
    c856:	61fb      	str	r3, [r7, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c858:	6b38      	ldr	r0, [r7, #48]	; 0x30
    c85a:	f7ff f88f 	bl	b97c <z_spin_unlock_valid>
    c85e:	4603      	mov	r3, r0
    c860:	f083 0301 	eor.w	r3, r3, #1
    c864:	b2db      	uxtb	r3, r3
    c866:	2b00      	cmp	r3, #0
    c868:	d00d      	beq.n	c886 <z_impl_k_sem_take+0xfa>
    c86a:	23ac      	movs	r3, #172	; 0xac
    c86c:	4a32      	ldr	r2, [pc, #200]	; (c938 <z_impl_k_sem_take+0x1ac>)
    c86e:	4935      	ldr	r1, [pc, #212]	; (c944 <z_impl_k_sem_take+0x1b8>)
    c870:	482e      	ldr	r0, [pc, #184]	; (c92c <z_impl_k_sem_take+0x1a0>)
    c872:	f003 f9ff 	bl	fc74 <printk>
    c876:	6b39      	ldr	r1, [r7, #48]	; 0x30
    c878:	4833      	ldr	r0, [pc, #204]	; (c948 <z_impl_k_sem_take+0x1bc>)
    c87a:	f003 f9fb 	bl	fc74 <printk>
    c87e:	21ac      	movs	r1, #172	; 0xac
    c880:	482d      	ldr	r0, [pc, #180]	; (c938 <z_impl_k_sem_take+0x1ac>)
    c882:	f003 fe53 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    c886:	69fb      	ldr	r3, [r7, #28]
    c888:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
    c88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c88c:	f383 8811 	msr	BASEPRI, r3
    c890:	f3bf 8f6f 	isb	sy
}
    c894:	bf00      	nop
}
    c896:	bf00      	nop
		k_spin_unlock(&lock, key);
		ret = 0;
    c898:	2300      	movs	r3, #0
    c89a:	647b      	str	r3, [r7, #68]	; 0x44
		goto out;
    c89c:	e03c      	b.n	c918 <z_impl_k_sem_take+0x18c>
	}

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    c89e:	e9d7 2300 	ldrd	r2, r3, [r7]
    c8a2:	f04f 0000 	mov.w	r0, #0
    c8a6:	f04f 0100 	mov.w	r1, #0
    c8aa:	428b      	cmp	r3, r1
    c8ac:	bf08      	it	eq
    c8ae:	4282      	cmpeq	r2, r0
    c8b0:	d127      	bne.n	c902 <z_impl_k_sem_take+0x176>
    c8b2:	4b20      	ldr	r3, [pc, #128]	; (c934 <z_impl_k_sem_take+0x1a8>)
    c8b4:	62bb      	str	r3, [r7, #40]	; 0x28
    c8b6:	6a3b      	ldr	r3, [r7, #32]
    c8b8:	617b      	str	r3, [r7, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    c8ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    c8bc:	f7ff f85e 	bl	b97c <z_spin_unlock_valid>
    c8c0:	4603      	mov	r3, r0
    c8c2:	f083 0301 	eor.w	r3, r3, #1
    c8c6:	b2db      	uxtb	r3, r3
    c8c8:	2b00      	cmp	r3, #0
    c8ca:	d00d      	beq.n	c8e8 <z_impl_k_sem_take+0x15c>
    c8cc:	23ac      	movs	r3, #172	; 0xac
    c8ce:	4a1a      	ldr	r2, [pc, #104]	; (c938 <z_impl_k_sem_take+0x1ac>)
    c8d0:	491c      	ldr	r1, [pc, #112]	; (c944 <z_impl_k_sem_take+0x1b8>)
    c8d2:	4816      	ldr	r0, [pc, #88]	; (c92c <z_impl_k_sem_take+0x1a0>)
    c8d4:	f003 f9ce 	bl	fc74 <printk>
    c8d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    c8da:	481b      	ldr	r0, [pc, #108]	; (c948 <z_impl_k_sem_take+0x1bc>)
    c8dc:	f003 f9ca 	bl	fc74 <printk>
    c8e0:	21ac      	movs	r1, #172	; 0xac
    c8e2:	4815      	ldr	r0, [pc, #84]	; (c938 <z_impl_k_sem_take+0x1ac>)
    c8e4:	f003 fe22 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    c8e8:	697b      	ldr	r3, [r7, #20]
    c8ea:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
    c8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c8ee:	f383 8811 	msr	BASEPRI, r3
    c8f2:	f3bf 8f6f 	isb	sy
}
    c8f6:	bf00      	nop
}
    c8f8:	bf00      	nop
		k_spin_unlock(&lock, key);
		ret = -EBUSY;
    c8fa:	f06f 030f 	mvn.w	r3, #15
    c8fe:	647b      	str	r3, [r7, #68]	; 0x44
    c900:	e00a      	b.n	c918 <z_impl_k_sem_take+0x18c>
		goto out;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_sem, take, sem, timeout);

	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    c902:	68f9      	ldr	r1, [r7, #12]
    c904:	e9d7 2300 	ldrd	r2, r3, [r7]
    c908:	e9cd 2300 	strd	r2, r3, [sp]
    c90c:	460a      	mov	r2, r1
    c90e:	6a39      	ldr	r1, [r7, #32]
    c910:	4808      	ldr	r0, [pc, #32]	; (c934 <z_impl_k_sem_take+0x1a8>)
    c912:	f000 ff9d 	bl	d850 <z_pend_curr>
    c916:	6478      	str	r0, [r7, #68]	; 0x44

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
    c918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    c91a:	4618      	mov	r0, r3
    c91c:	3748      	adds	r7, #72	; 0x48
    c91e:	46bd      	mov	sp, r7
    c920:	bd80      	pop	{r7, pc}
    c922:	bf00      	nop
    c924:	0001a4dc 	.word	0x0001a4dc
    c928:	0001a4fc 	.word	0x0001a4fc
    c92c:	0001a4a4 	.word	0x0001a4a4
    c930:	0001a54c 	.word	0x0001a54c
    c934:	20000c34 	.word	0x20000c34
    c938:	0001a464 	.word	0x0001a464
    c93c:	0001a48c 	.word	0x0001a48c
    c940:	0001a4c4 	.word	0x0001a4c4
    c944:	0001a550 	.word	0x0001a550
    c948:	0001a568 	.word	0x0001a568

0000c94c <z_add_thread_timeout>:
{
    c94c:	b580      	push	{r7, lr}
    c94e:	b084      	sub	sp, #16
    c950:	af00      	add	r7, sp, #0
    c952:	60f8      	str	r0, [r7, #12]
    c954:	e9c7 2300 	strd	r2, r3, [r7]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    c958:	68fb      	ldr	r3, [r7, #12]
    c95a:	f103 0018 	add.w	r0, r3, #24
    c95e:	e9d7 2300 	ldrd	r2, r3, [r7]
    c962:	4903      	ldr	r1, [pc, #12]	; (c970 <z_add_thread_timeout+0x24>)
    c964:	f001 fffc 	bl	e960 <z_add_timeout>
}
    c968:	bf00      	nop
    c96a:	3710      	adds	r7, #16
    c96c:	46bd      	mov	sp, r7
    c96e:	bd80      	pop	{r7, pc}
    c970:	0000d715 	.word	0x0000d715

0000c974 <z_is_idle_thread_object>:
{
    c974:	b480      	push	{r7}
    c976:	b083      	sub	sp, #12
    c978:	af00      	add	r7, sp, #0
    c97a:	6078      	str	r0, [r7, #4]
	return thread == &z_idle_threads[0];
    c97c:	687b      	ldr	r3, [r7, #4]
    c97e:	4a05      	ldr	r2, [pc, #20]	; (c994 <z_is_idle_thread_object+0x20>)
    c980:	4293      	cmp	r3, r2
    c982:	bf0c      	ite	eq
    c984:	2301      	moveq	r3, #1
    c986:	2300      	movne	r3, #0
    c988:	b2db      	uxtb	r3, r3
}
    c98a:	4618      	mov	r0, r3
    c98c:	370c      	adds	r7, #12
    c98e:	46bd      	mov	sp, r7
    c990:	bc80      	pop	{r7}
    c992:	4770      	bx	lr
    c994:	20000460 	.word	0x20000460

0000c998 <z_sched_lock>:
{
    c998:	b580      	push	{r7, lr}
    c99a:	b082      	sub	sp, #8
    c99c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c99e:	f3ef 8305 	mrs	r3, IPSR
    c9a2:	607b      	str	r3, [r7, #4]
  return(result);
    c9a4:	687b      	ldr	r3, [r7, #4]
    c9a6:	2b00      	cmp	r3, #0
    c9a8:	bf14      	ite	ne
    c9aa:	2301      	movne	r3, #1
    c9ac:	2300      	moveq	r3, #0
    c9ae:	b2db      	uxtb	r3, r3
	__ASSERT(!arch_is_in_isr(), "");
    c9b0:	2b00      	cmp	r3, #0
    c9b2:	d00c      	beq.n	c9ce <z_sched_lock+0x36>
    c9b4:	23fd      	movs	r3, #253	; 0xfd
    c9b6:	4a14      	ldr	r2, [pc, #80]	; (ca08 <z_sched_lock+0x70>)
    c9b8:	4914      	ldr	r1, [pc, #80]	; (ca0c <z_sched_lock+0x74>)
    c9ba:	4815      	ldr	r0, [pc, #84]	; (ca10 <z_sched_lock+0x78>)
    c9bc:	f003 f95a 	bl	fc74 <printk>
    c9c0:	4814      	ldr	r0, [pc, #80]	; (ca14 <z_sched_lock+0x7c>)
    c9c2:	f003 f957 	bl	fc74 <printk>
    c9c6:	21fd      	movs	r1, #253	; 0xfd
    c9c8:	480f      	ldr	r0, [pc, #60]	; (ca08 <z_sched_lock+0x70>)
    c9ca:	f003 fdaf 	bl	1052c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    c9ce:	4b12      	ldr	r3, [pc, #72]	; (ca18 <z_sched_lock+0x80>)
    c9d0:	689b      	ldr	r3, [r3, #8]
    c9d2:	7bdb      	ldrb	r3, [r3, #15]
    c9d4:	2b01      	cmp	r3, #1
    c9d6:	d10c      	bne.n	c9f2 <z_sched_lock+0x5a>
    c9d8:	23fe      	movs	r3, #254	; 0xfe
    c9da:	4a0b      	ldr	r2, [pc, #44]	; (ca08 <z_sched_lock+0x70>)
    c9dc:	490f      	ldr	r1, [pc, #60]	; (ca1c <z_sched_lock+0x84>)
    c9de:	480c      	ldr	r0, [pc, #48]	; (ca10 <z_sched_lock+0x78>)
    c9e0:	f003 f948 	bl	fc74 <printk>
    c9e4:	480b      	ldr	r0, [pc, #44]	; (ca14 <z_sched_lock+0x7c>)
    c9e6:	f003 f945 	bl	fc74 <printk>
    c9ea:	21fe      	movs	r1, #254	; 0xfe
    c9ec:	4806      	ldr	r0, [pc, #24]	; (ca08 <z_sched_lock+0x70>)
    c9ee:	f003 fd9d 	bl	1052c <assert_post_action>
	--_current->base.sched_locked;
    c9f2:	4b09      	ldr	r3, [pc, #36]	; (ca18 <z_sched_lock+0x80>)
    c9f4:	689b      	ldr	r3, [r3, #8]
    c9f6:	7bda      	ldrb	r2, [r3, #15]
    c9f8:	3a01      	subs	r2, #1
    c9fa:	b2d2      	uxtb	r2, r2
    c9fc:	73da      	strb	r2, [r3, #15]
}
    c9fe:	bf00      	nop
    ca00:	3708      	adds	r7, #8
    ca02:	46bd      	mov	sp, r7
    ca04:	bd80      	pop	{r7, pc}
    ca06:	bf00      	nop
    ca08:	0001a580 	.word	0x0001a580
    ca0c:	0001a5ac 	.word	0x0001a5ac
    ca10:	0001a5c0 	.word	0x0001a5c0
    ca14:	0001a5e0 	.word	0x0001a5e0
    ca18:	20000c00 	.word	0x20000c00
    ca1c:	0001a5e4 	.word	0x0001a5e4

0000ca20 <log_const_source_id>:
{
    ca20:	b480      	push	{r7}
    ca22:	b083      	sub	sp, #12
    ca24:	af00      	add	r7, sp, #0
    ca26:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    ca28:	687b      	ldr	r3, [r7, #4]
    ca2a:	4a04      	ldr	r2, [pc, #16]	; (ca3c <log_const_source_id+0x1c>)
    ca2c:	1a9b      	subs	r3, r3, r2
    ca2e:	08db      	lsrs	r3, r3, #3
}
    ca30:	4618      	mov	r0, r3
    ca32:	370c      	adds	r7, #12
    ca34:	46bd      	mov	sp, r7
    ca36:	bc80      	pop	{r7}
    ca38:	4770      	bx	lr
    ca3a:	bf00      	nop
    ca3c:	000170bc 	.word	0x000170bc

0000ca40 <move_thread_to_end_of_prio_q>:
	return thread;
#endif
}

static void move_thread_to_end_of_prio_q(struct k_thread *thread)
{
    ca40:	b580      	push	{r7, lr}
    ca42:	b08a      	sub	sp, #40	; 0x28
    ca44:	af00      	add	r7, sp, #0
    ca46:	6078      	str	r0, [r7, #4]
	if (z_is_thread_queued(thread)) {
    ca48:	6878      	ldr	r0, [r7, #4]
    ca4a:	f009 fe67 	bl	1671c <z_is_thread_queued>
    ca4e:	4603      	mov	r3, r0
    ca50:	2b00      	cmp	r3, #0
    ca52:	d015      	beq.n	ca80 <move_thread_to_end_of_prio_q+0x40>
    ca54:	4b43      	ldr	r3, [pc, #268]	; (cb64 <move_thread_to_end_of_prio_q+0x124>)
    ca56:	627b      	str	r3, [r7, #36]	; 0x24
    ca58:	687b      	ldr	r3, [r7, #4]
    ca5a:	623b      	str	r3, [r7, #32]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ca5c:	6a3b      	ldr	r3, [r7, #32]
    ca5e:	7b5b      	ldrb	r3, [r3, #13]
    ca60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ca64:	b2da      	uxtb	r2, r3
    ca66:	6a3b      	ldr	r3, [r7, #32]
    ca68:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
    ca6a:	6a38      	ldr	r0, [r7, #32]
    ca6c:	f009 ff21 	bl	168b2 <should_queue_thread>
    ca70:	4603      	mov	r3, r0
    ca72:	2b00      	cmp	r3, #0
    ca74:	d003      	beq.n	ca7e <move_thread_to_end_of_prio_q+0x3e>
		_priq_run_remove(pq, thread);
    ca76:	6a39      	ldr	r1, [r7, #32]
    ca78:	6a78      	ldr	r0, [r7, #36]	; 0x24
    ca7a:	f001 fb15 	bl	e0a8 <z_priq_dumb_remove>
}
    ca7e:	bf00      	nop
    ca80:	4b38      	ldr	r3, [pc, #224]	; (cb64 <move_thread_to_end_of_prio_q+0x124>)
    ca82:	61fb      	str	r3, [r7, #28]
    ca84:	687b      	ldr	r3, [r7, #4]
    ca86:	61bb      	str	r3, [r7, #24]
	thread->base.thread_state |= _THREAD_QUEUED;
    ca88:	69bb      	ldr	r3, [r7, #24]
    ca8a:	7b5b      	ldrb	r3, [r3, #13]
    ca8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ca90:	b2da      	uxtb	r2, r3
    ca92:	69bb      	ldr	r3, [r7, #24]
    ca94:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
    ca96:	69b8      	ldr	r0, [r7, #24]
    ca98:	f009 ff0b 	bl	168b2 <should_queue_thread>
    ca9c:	4603      	mov	r3, r0
    ca9e:	2b00      	cmp	r3, #0
    caa0:	d050      	beq.n	cb44 <move_thread_to_end_of_prio_q+0x104>
    caa2:	69fb      	ldr	r3, [r7, #28]
    caa4:	617b      	str	r3, [r7, #20]
    caa6:	69bb      	ldr	r3, [r7, #24]
    caa8:	613b      	str	r3, [r7, #16]

ALWAYS_INLINE void z_priq_dumb_add(sys_dlist_t *pq, struct k_thread *thread)
{
	struct k_thread *t;

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    caaa:	6938      	ldr	r0, [r7, #16]
    caac:	f7ff ff62 	bl	c974 <z_is_idle_thread_object>
    cab0:	4603      	mov	r3, r0
    cab2:	2b00      	cmp	r3, #0
    cab4:	d00b      	beq.n	cace <move_thread_to_end_of_prio_q+0x8e>
    cab6:	f240 33a6 	movw	r3, #934	; 0x3a6
    caba:	4a2b      	ldr	r2, [pc, #172]	; (cb68 <move_thread_to_end_of_prio_q+0x128>)
    cabc:	492b      	ldr	r1, [pc, #172]	; (cb6c <move_thread_to_end_of_prio_q+0x12c>)
    cabe:	482c      	ldr	r0, [pc, #176]	; (cb70 <move_thread_to_end_of_prio_q+0x130>)
    cac0:	f003 f8d8 	bl	fc74 <printk>
    cac4:	f240 31a6 	movw	r1, #934	; 0x3a6
    cac8:	4827      	ldr	r0, [pc, #156]	; (cb68 <move_thread_to_end_of_prio_q+0x128>)
    caca:	f003 fd2f 	bl	1052c <assert_post_action>

	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    cace:	6978      	ldr	r0, [r7, #20]
    cad0:	f009 fa94 	bl	15ffc <sys_dlist_peek_head>
    cad4:	4603      	mov	r3, r0
    cad6:	2b00      	cmp	r3, #0
    cad8:	d004      	beq.n	cae4 <move_thread_to_end_of_prio_q+0xa4>
    cada:	6978      	ldr	r0, [r7, #20]
    cadc:	f009 fa8e 	bl	15ffc <sys_dlist_peek_head>
    cae0:	4603      	mov	r3, r0
    cae2:	e000      	b.n	cae6 <move_thread_to_end_of_prio_q+0xa6>
    cae4:	2300      	movs	r3, #0
    cae6:	60fb      	str	r3, [r7, #12]
    cae8:	e024      	b.n	cb34 <move_thread_to_end_of_prio_q+0xf4>
		if (z_sched_prio_cmp(thread, t) > 0) {
    caea:	68f9      	ldr	r1, [r7, #12]
    caec:	6938      	ldr	r0, [r7, #16]
    caee:	f009 fec5 	bl	1687c <z_sched_prio_cmp>
    caf2:	4603      	mov	r3, r0
    caf4:	2b00      	cmp	r3, #0
    caf6:	dd07      	ble.n	cb08 <move_thread_to_end_of_prio_q+0xc8>
			sys_dlist_insert(&t->base.qnode_dlist,
    caf8:	68fb      	ldr	r3, [r7, #12]
    cafa:	693a      	ldr	r2, [r7, #16]
    cafc:	4611      	mov	r1, r2
    cafe:	4618      	mov	r0, r3
    cb00:	f009 facd 	bl	1609e <sys_dlist_insert>
					 &thread->base.qnode_dlist);
			return;
    cb04:	bf00      	nop
}
    cb06:	e01d      	b.n	cb44 <move_thread_to_end_of_prio_q+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    cb08:	68fb      	ldr	r3, [r7, #12]
    cb0a:	2b00      	cmp	r3, #0
    cb0c:	d010      	beq.n	cb30 <move_thread_to_end_of_prio_q+0xf0>
    cb0e:	68fb      	ldr	r3, [r7, #12]
    cb10:	4619      	mov	r1, r3
    cb12:	6978      	ldr	r0, [r7, #20]
    cb14:	f009 fa97 	bl	16046 <sys_dlist_peek_next>
    cb18:	4603      	mov	r3, r0
    cb1a:	2b00      	cmp	r3, #0
    cb1c:	d006      	beq.n	cb2c <move_thread_to_end_of_prio_q+0xec>
    cb1e:	68fb      	ldr	r3, [r7, #12]
    cb20:	4619      	mov	r1, r3
    cb22:	6978      	ldr	r0, [r7, #20]
    cb24:	f009 fa8f 	bl	16046 <sys_dlist_peek_next>
    cb28:	4603      	mov	r3, r0
    cb2a:	e002      	b.n	cb32 <move_thread_to_end_of_prio_q+0xf2>
    cb2c:	2300      	movs	r3, #0
    cb2e:	e000      	b.n	cb32 <move_thread_to_end_of_prio_q+0xf2>
    cb30:	2300      	movs	r3, #0
    cb32:	60fb      	str	r3, [r7, #12]
    cb34:	68fb      	ldr	r3, [r7, #12]
    cb36:	2b00      	cmp	r3, #0
    cb38:	d1d7      	bne.n	caea <move_thread_to_end_of_prio_q+0xaa>
		}
	}

	sys_dlist_append(pq, &thread->base.qnode_dlist);
    cb3a:	693b      	ldr	r3, [r7, #16]
    cb3c:	4619      	mov	r1, r3
    cb3e:	6978      	ldr	r0, [r7, #20]
    cb40:	f009 fa94 	bl	1606c <sys_dlist_append>
}
    cb44:	bf00      	nop
	update_cache(thread == _current);
    cb46:	4b0b      	ldr	r3, [pc, #44]	; (cb74 <move_thread_to_end_of_prio_q+0x134>)
    cb48:	689b      	ldr	r3, [r3, #8]
    cb4a:	687a      	ldr	r2, [r7, #4]
    cb4c:	429a      	cmp	r2, r3
    cb4e:	bf0c      	ite	eq
    cb50:	2301      	moveq	r3, #1
    cb52:	2300      	movne	r3, #0
    cb54:	b2db      	uxtb	r3, r3
    cb56:	4618      	mov	r0, r3
    cb58:	f000 f9aa 	bl	ceb0 <update_cache>
}
    cb5c:	bf00      	nop
    cb5e:	3728      	adds	r7, #40	; 0x28
    cb60:	46bd      	mov	sp, r7
    cb62:	bd80      	pop	{r7, pc}
    cb64:	20000c28 	.word	0x20000c28
    cb68:	0001a618 	.word	0x0001a618
    cb6c:	0001a63c 	.word	0x0001a63c
    cb70:	0001a5c0 	.word	0x0001a5c0
    cb74:	20000c00 	.word	0x20000c00

0000cb78 <z_reset_time_slice>:
{
    cb78:	b580      	push	{r7, lr}
    cb7a:	af00      	add	r7, sp, #0
	if (slice_time != 0) {
    cb7c:	4b0a      	ldr	r3, [pc, #40]	; (cba8 <z_reset_time_slice+0x30>)
    cb7e:	681b      	ldr	r3, [r3, #0]
    cb80:	2b00      	cmp	r3, #0
    cb82:	d00e      	beq.n	cba2 <z_reset_time_slice+0x2a>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    cb84:	f7f8 fcac 	bl	54e0 <sys_clock_elapsed>
    cb88:	4603      	mov	r3, r0
    cb8a:	4a07      	ldr	r2, [pc, #28]	; (cba8 <z_reset_time_slice+0x30>)
    cb8c:	6812      	ldr	r2, [r2, #0]
    cb8e:	4413      	add	r3, r2
    cb90:	461a      	mov	r2, r3
    cb92:	4b06      	ldr	r3, [pc, #24]	; (cbac <z_reset_time_slice+0x34>)
    cb94:	611a      	str	r2, [r3, #16]
		z_set_timeout_expiry(slice_time, false);
    cb96:	4b04      	ldr	r3, [pc, #16]	; (cba8 <z_reset_time_slice+0x30>)
    cb98:	681b      	ldr	r3, [r3, #0]
    cb9a:	2100      	movs	r1, #0
    cb9c:	4618      	mov	r0, r3
    cb9e:	f002 f913 	bl	edc8 <z_set_timeout_expiry>
}
    cba2:	bf00      	nop
    cba4:	bd80      	pop	{r7, pc}
    cba6:	bf00      	nop
    cba8:	20000c3c 	.word	0x20000c3c
    cbac:	20000c00 	.word	0x20000c00

0000cbb0 <k_sched_time_slice_set>:
{
    cbb0:	b580      	push	{r7, lr}
    cbb2:	b08c      	sub	sp, #48	; 0x30
    cbb4:	af00      	add	r7, sp, #0
    cbb6:	6078      	str	r0, [r7, #4]
    cbb8:	6039      	str	r1, [r7, #0]
	LOCKED(&sched_spinlock) {
    cbba:	2300      	movs	r3, #0
    cbbc:	61bb      	str	r3, [r7, #24]
    cbbe:	4b39      	ldr	r3, [pc, #228]	; (cca4 <k_sched_time_slice_set+0xf4>)
    cbc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
    cbc2:	f04f 0320 	mov.w	r3, #32
    cbc6:	f3ef 8211 	mrs	r2, BASEPRI
    cbca:	f383 8811 	msr	BASEPRI, r3
    cbce:	f3bf 8f6f 	isb	sy
    cbd2:	62ba      	str	r2, [r7, #40]	; 0x28
    cbd4:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
    cbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
    cbd8:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cbda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    cbdc:	f7fe feb2 	bl	b944 <z_spin_lock_valid>
    cbe0:	4603      	mov	r3, r0
    cbe2:	f083 0301 	eor.w	r3, r3, #1
    cbe6:	b2db      	uxtb	r3, r3
    cbe8:	2b00      	cmp	r3, #0
    cbea:	d00d      	beq.n	cc08 <k_sched_time_slice_set+0x58>
    cbec:	2381      	movs	r3, #129	; 0x81
    cbee:	4a2e      	ldr	r2, [pc, #184]	; (cca8 <k_sched_time_slice_set+0xf8>)
    cbf0:	492e      	ldr	r1, [pc, #184]	; (ccac <k_sched_time_slice_set+0xfc>)
    cbf2:	482f      	ldr	r0, [pc, #188]	; (ccb0 <k_sched_time_slice_set+0x100>)
    cbf4:	f003 f83e 	bl	fc74 <printk>
    cbf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    cbfa:	482e      	ldr	r0, [pc, #184]	; (ccb4 <k_sched_time_slice_set+0x104>)
    cbfc:	f003 f83a 	bl	fc74 <printk>
    cc00:	2181      	movs	r1, #129	; 0x81
    cc02:	4829      	ldr	r0, [pc, #164]	; (cca8 <k_sched_time_slice_set+0xf8>)
    cc04:	f003 fc92 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    cc08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    cc0a:	f7fe fed3 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    cc0e:	68fb      	ldr	r3, [r7, #12]
    cc10:	617b      	str	r3, [r7, #20]
    cc12:	e03f      	b.n	cc94 <k_sched_time_slice_set+0xe4>
		_current_cpu->slice_ticks = 0;
    cc14:	4b28      	ldr	r3, [pc, #160]	; (ccb8 <k_sched_time_slice_set+0x108>)
    cc16:	2200      	movs	r2, #0
    cc18:	611a      	str	r2, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
    cc1a:	687b      	ldr	r3, [r7, #4]
    cc1c:	4618      	mov	r0, r3
    cc1e:	f009 fa75 	bl	1610c <k_ms_to_ticks_ceil32>
    cc22:	4603      	mov	r3, r0
    cc24:	461a      	mov	r2, r3
    cc26:	4b25      	ldr	r3, [pc, #148]	; (ccbc <k_sched_time_slice_set+0x10c>)
    cc28:	601a      	str	r2, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    cc2a:	687b      	ldr	r3, [r7, #4]
    cc2c:	2b00      	cmp	r3, #0
    cc2e:	dd06      	ble.n	cc3e <k_sched_time_slice_set+0x8e>
			slice_time = MAX(2, slice_time);
    cc30:	4b22      	ldr	r3, [pc, #136]	; (ccbc <k_sched_time_slice_set+0x10c>)
    cc32:	681b      	ldr	r3, [r3, #0]
    cc34:	2b02      	cmp	r3, #2
    cc36:	bfb8      	it	lt
    cc38:	2302      	movlt	r3, #2
    cc3a:	4a20      	ldr	r2, [pc, #128]	; (ccbc <k_sched_time_slice_set+0x10c>)
    cc3c:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
    cc3e:	4a20      	ldr	r2, [pc, #128]	; (ccc0 <k_sched_time_slice_set+0x110>)
    cc40:	683b      	ldr	r3, [r7, #0]
    cc42:	6013      	str	r3, [r2, #0]
		z_reset_time_slice();
    cc44:	f7ff ff98 	bl	cb78 <z_reset_time_slice>
    cc48:	4b16      	ldr	r3, [pc, #88]	; (cca4 <k_sched_time_slice_set+0xf4>)
    cc4a:	623b      	str	r3, [r7, #32]
    cc4c:	697b      	ldr	r3, [r7, #20]
    cc4e:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cc50:	6a38      	ldr	r0, [r7, #32]
    cc52:	f7fe fe93 	bl	b97c <z_spin_unlock_valid>
    cc56:	4603      	mov	r3, r0
    cc58:	f083 0301 	eor.w	r3, r3, #1
    cc5c:	b2db      	uxtb	r3, r3
    cc5e:	2b00      	cmp	r3, #0
    cc60:	d00d      	beq.n	cc7e <k_sched_time_slice_set+0xce>
    cc62:	23ac      	movs	r3, #172	; 0xac
    cc64:	4a10      	ldr	r2, [pc, #64]	; (cca8 <k_sched_time_slice_set+0xf8>)
    cc66:	4917      	ldr	r1, [pc, #92]	; (ccc4 <k_sched_time_slice_set+0x114>)
    cc68:	4811      	ldr	r0, [pc, #68]	; (ccb0 <k_sched_time_slice_set+0x100>)
    cc6a:	f003 f803 	bl	fc74 <printk>
    cc6e:	6a39      	ldr	r1, [r7, #32]
    cc70:	4815      	ldr	r0, [pc, #84]	; (ccc8 <k_sched_time_slice_set+0x118>)
    cc72:	f002 ffff 	bl	fc74 <printk>
    cc76:	21ac      	movs	r1, #172	; 0xac
    cc78:	480b      	ldr	r0, [pc, #44]	; (cca8 <k_sched_time_slice_set+0xf8>)
    cc7a:	f003 fc57 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    cc7e:	693b      	ldr	r3, [r7, #16]
    cc80:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    cc82:	69fb      	ldr	r3, [r7, #28]
    cc84:	f383 8811 	msr	BASEPRI, r3
    cc88:	f3bf 8f6f 	isb	sy
}
    cc8c:	bf00      	nop
}
    cc8e:	bf00      	nop
	LOCKED(&sched_spinlock) {
    cc90:	2301      	movs	r3, #1
    cc92:	61bb      	str	r3, [r7, #24]
    cc94:	69bb      	ldr	r3, [r7, #24]
    cc96:	2b00      	cmp	r3, #0
    cc98:	d0bc      	beq.n	cc14 <k_sched_time_slice_set+0x64>
}
    cc9a:	bf00      	nop
    cc9c:	bf00      	nop
    cc9e:	3730      	adds	r7, #48	; 0x30
    cca0:	46bd      	mov	sp, r7
    cca2:	bd80      	pop	{r7, pc}
    cca4:	20000c38 	.word	0x20000c38
    cca8:	0001a660 	.word	0x0001a660
    ccac:	0001a688 	.word	0x0001a688
    ccb0:	0001a5c0 	.word	0x0001a5c0
    ccb4:	0001a6a0 	.word	0x0001a6a0
    ccb8:	20000c00 	.word	0x20000c00
    ccbc:	20000c3c 	.word	0x20000c3c
    ccc0:	20000c40 	.word	0x20000c40
    ccc4:	0001a6b8 	.word	0x0001a6b8
    ccc8:	0001a6d0 	.word	0x0001a6d0

0000cccc <sliceable>:
{
    cccc:	b580      	push	{r7, lr}
    ccce:	b082      	sub	sp, #8
    ccd0:	af00      	add	r7, sp, #0
    ccd2:	6078      	str	r0, [r7, #4]
	return is_preempt(thread)
    ccd4:	6878      	ldr	r0, [r7, #4]
    ccd6:	f009 fdb7 	bl	16848 <is_preempt>
    ccda:	4603      	mov	r3, r0
		&& !z_is_idle_thread_object(thread);
    ccdc:	2b00      	cmp	r3, #0
    ccde:	d023      	beq.n	cd28 <sliceable+0x5c>
		&& !z_is_thread_prevented_from_running(thread)
    cce0:	6878      	ldr	r0, [r7, #4]
    cce2:	f009 fca8 	bl	16636 <z_is_thread_prevented_from_running>
    cce6:	4603      	mov	r3, r0
    cce8:	f083 0301 	eor.w	r3, r3, #1
    ccec:	b2db      	uxtb	r3, r3
    ccee:	2b00      	cmp	r3, #0
    ccf0:	d01a      	beq.n	cd28 <sliceable+0x5c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    ccf2:	687b      	ldr	r3, [r7, #4]
    ccf4:	f993 300e 	ldrsb.w	r3, [r3, #14]
    ccf8:	461a      	mov	r2, r3
    ccfa:	4b0e      	ldr	r3, [pc, #56]	; (cd34 <sliceable+0x68>)
    ccfc:	681b      	ldr	r3, [r3, #0]
    ccfe:	4619      	mov	r1, r3
    cd00:	4610      	mov	r0, r2
    cd02:	f009 fd79 	bl	167f8 <z_is_prio_higher>
    cd06:	4603      	mov	r3, r0
    cd08:	f083 0301 	eor.w	r3, r3, #1
    cd0c:	b2db      	uxtb	r3, r3
    cd0e:	2b00      	cmp	r3, #0
    cd10:	d00a      	beq.n	cd28 <sliceable+0x5c>
		&& !z_is_idle_thread_object(thread);
    cd12:	6878      	ldr	r0, [r7, #4]
    cd14:	f7ff fe2e 	bl	c974 <z_is_idle_thread_object>
    cd18:	4603      	mov	r3, r0
    cd1a:	f083 0301 	eor.w	r3, r3, #1
    cd1e:	b2db      	uxtb	r3, r3
    cd20:	2b00      	cmp	r3, #0
    cd22:	d001      	beq.n	cd28 <sliceable+0x5c>
    cd24:	2301      	movs	r3, #1
    cd26:	e000      	b.n	cd2a <sliceable+0x5e>
    cd28:	2300      	movs	r3, #0
}
    cd2a:	4618      	mov	r0, r3
    cd2c:	3708      	adds	r7, #8
    cd2e:	46bd      	mov	sp, r7
    cd30:	bd80      	pop	{r7, pc}
    cd32:	bf00      	nop
    cd34:	20000c40 	.word	0x20000c40

0000cd38 <z_time_slice>:
{
    cd38:	b580      	push	{r7, lr}
    cd3a:	b08e      	sub	sp, #56	; 0x38
    cd3c:	af00      	add	r7, sp, #0
    cd3e:	6078      	str	r0, [r7, #4]
    cd40:	4b51      	ldr	r3, [pc, #324]	; (ce88 <z_time_slice+0x150>)
    cd42:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
    cd44:	f04f 0320 	mov.w	r3, #32
    cd48:	f3ef 8211 	mrs	r2, BASEPRI
    cd4c:	f383 8811 	msr	BASEPRI, r3
    cd50:	f3bf 8f6f 	isb	sy
    cd54:	633a      	str	r2, [r7, #48]	; 0x30
    cd56:	62fb      	str	r3, [r7, #44]	; 0x2c
	return key;
    cd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	k.key = arch_irq_lock();
    cd5a:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    cd5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
    cd5e:	f7fe fdf1 	bl	b944 <z_spin_lock_valid>
    cd62:	4603      	mov	r3, r0
    cd64:	f083 0301 	eor.w	r3, r3, #1
    cd68:	b2db      	uxtb	r3, r3
    cd6a:	2b00      	cmp	r3, #0
    cd6c:	d00d      	beq.n	cd8a <z_time_slice+0x52>
    cd6e:	2381      	movs	r3, #129	; 0x81
    cd70:	4a46      	ldr	r2, [pc, #280]	; (ce8c <z_time_slice+0x154>)
    cd72:	4947      	ldr	r1, [pc, #284]	; (ce90 <z_time_slice+0x158>)
    cd74:	4847      	ldr	r0, [pc, #284]	; (ce94 <z_time_slice+0x15c>)
    cd76:	f002 ff7d 	bl	fc74 <printk>
    cd7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
    cd7c:	4846      	ldr	r0, [pc, #280]	; (ce98 <z_time_slice+0x160>)
    cd7e:	f002 ff79 	bl	fc74 <printk>
    cd82:	2181      	movs	r1, #129	; 0x81
    cd84:	4841      	ldr	r0, [pc, #260]	; (ce8c <z_time_slice+0x154>)
    cd86:	f003 fbd1 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    cd8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
    cd8c:	f7fe fe12 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    cd90:	68fb      	ldr	r3, [r7, #12]
    cd92:	61bb      	str	r3, [r7, #24]
	if (pending_current == _current) {
    cd94:	4b41      	ldr	r3, [pc, #260]	; (ce9c <z_time_slice+0x164>)
    cd96:	689a      	ldr	r2, [r3, #8]
    cd98:	4b41      	ldr	r3, [pc, #260]	; (cea0 <z_time_slice+0x168>)
    cd9a:	681b      	ldr	r3, [r3, #0]
    cd9c:	429a      	cmp	r2, r3
    cd9e:	d125      	bne.n	cdec <z_time_slice+0xb4>
		z_reset_time_slice();
    cda0:	f7ff feea 	bl	cb78 <z_reset_time_slice>
    cda4:	4b38      	ldr	r3, [pc, #224]	; (ce88 <z_time_slice+0x150>)
    cda6:	62bb      	str	r3, [r7, #40]	; 0x28
    cda8:	69bb      	ldr	r3, [r7, #24]
    cdaa:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    cdac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    cdae:	f7fe fde5 	bl	b97c <z_spin_unlock_valid>
    cdb2:	4603      	mov	r3, r0
    cdb4:	f083 0301 	eor.w	r3, r3, #1
    cdb8:	b2db      	uxtb	r3, r3
    cdba:	2b00      	cmp	r3, #0
    cdbc:	d00d      	beq.n	cdda <z_time_slice+0xa2>
    cdbe:	23ac      	movs	r3, #172	; 0xac
    cdc0:	4a32      	ldr	r2, [pc, #200]	; (ce8c <z_time_slice+0x154>)
    cdc2:	4938      	ldr	r1, [pc, #224]	; (cea4 <z_time_slice+0x16c>)
    cdc4:	4833      	ldr	r0, [pc, #204]	; (ce94 <z_time_slice+0x15c>)
    cdc6:	f002 ff55 	bl	fc74 <printk>
    cdca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    cdcc:	4836      	ldr	r0, [pc, #216]	; (cea8 <z_time_slice+0x170>)
    cdce:	f002 ff51 	bl	fc74 <printk>
    cdd2:	21ac      	movs	r1, #172	; 0xac
    cdd4:	482d      	ldr	r0, [pc, #180]	; (ce8c <z_time_slice+0x154>)
    cdd6:	f003 fba9 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    cdda:	693b      	ldr	r3, [r7, #16]
    cddc:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
    cdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cde0:	f383 8811 	msr	BASEPRI, r3
    cde4:	f3bf 8f6f 	isb	sy
}
    cde8:	bf00      	nop
}
    cdea:	e049      	b.n	ce80 <z_time_slice+0x148>
	pending_current = NULL;
    cdec:	4b2c      	ldr	r3, [pc, #176]	; (cea0 <z_time_slice+0x168>)
    cdee:	2200      	movs	r2, #0
    cdf0:	601a      	str	r2, [r3, #0]
	if (slice_time && sliceable(_current)) {
    cdf2:	4b2e      	ldr	r3, [pc, #184]	; (ceac <z_time_slice+0x174>)
    cdf4:	681b      	ldr	r3, [r3, #0]
    cdf6:	2b00      	cmp	r3, #0
    cdf8:	d01b      	beq.n	ce32 <z_time_slice+0xfa>
    cdfa:	4b28      	ldr	r3, [pc, #160]	; (ce9c <z_time_slice+0x164>)
    cdfc:	689b      	ldr	r3, [r3, #8]
    cdfe:	4618      	mov	r0, r3
    ce00:	f7ff ff64 	bl	cccc <sliceable>
    ce04:	4603      	mov	r3, r0
    ce06:	2b00      	cmp	r3, #0
    ce08:	d013      	beq.n	ce32 <z_time_slice+0xfa>
		if (ticks >= _current_cpu->slice_ticks) {
    ce0a:	4b24      	ldr	r3, [pc, #144]	; (ce9c <z_time_slice+0x164>)
    ce0c:	691b      	ldr	r3, [r3, #16]
    ce0e:	687a      	ldr	r2, [r7, #4]
    ce10:	429a      	cmp	r2, r3
    ce12:	db07      	blt.n	ce24 <z_time_slice+0xec>
			move_thread_to_end_of_prio_q(_current);
    ce14:	4b21      	ldr	r3, [pc, #132]	; (ce9c <z_time_slice+0x164>)
    ce16:	689b      	ldr	r3, [r3, #8]
    ce18:	4618      	mov	r0, r3
    ce1a:	f7ff fe11 	bl	ca40 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    ce1e:	f7ff feab 	bl	cb78 <z_reset_time_slice>
		if (ticks >= _current_cpu->slice_ticks) {
    ce22:	e009      	b.n	ce38 <z_time_slice+0x100>
			_current_cpu->slice_ticks -= ticks;
    ce24:	4b1d      	ldr	r3, [pc, #116]	; (ce9c <z_time_slice+0x164>)
    ce26:	691a      	ldr	r2, [r3, #16]
    ce28:	687b      	ldr	r3, [r7, #4]
    ce2a:	1ad3      	subs	r3, r2, r3
    ce2c:	4a1b      	ldr	r2, [pc, #108]	; (ce9c <z_time_slice+0x164>)
    ce2e:	6113      	str	r3, [r2, #16]
		if (ticks >= _current_cpu->slice_ticks) {
    ce30:	e002      	b.n	ce38 <z_time_slice+0x100>
		_current_cpu->slice_ticks = 0;
    ce32:	4b1a      	ldr	r3, [pc, #104]	; (ce9c <z_time_slice+0x164>)
    ce34:	2200      	movs	r2, #0
    ce36:	611a      	str	r2, [r3, #16]
    ce38:	4b13      	ldr	r3, [pc, #76]	; (ce88 <z_time_slice+0x150>)
    ce3a:	623b      	str	r3, [r7, #32]
    ce3c:	69bb      	ldr	r3, [r7, #24]
    ce3e:	617b      	str	r3, [r7, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ce40:	6a38      	ldr	r0, [r7, #32]
    ce42:	f7fe fd9b 	bl	b97c <z_spin_unlock_valid>
    ce46:	4603      	mov	r3, r0
    ce48:	f083 0301 	eor.w	r3, r3, #1
    ce4c:	b2db      	uxtb	r3, r3
    ce4e:	2b00      	cmp	r3, #0
    ce50:	d00d      	beq.n	ce6e <z_time_slice+0x136>
    ce52:	23ac      	movs	r3, #172	; 0xac
    ce54:	4a0d      	ldr	r2, [pc, #52]	; (ce8c <z_time_slice+0x154>)
    ce56:	4913      	ldr	r1, [pc, #76]	; (cea4 <z_time_slice+0x16c>)
    ce58:	480e      	ldr	r0, [pc, #56]	; (ce94 <z_time_slice+0x15c>)
    ce5a:	f002 ff0b 	bl	fc74 <printk>
    ce5e:	6a39      	ldr	r1, [r7, #32]
    ce60:	4811      	ldr	r0, [pc, #68]	; (cea8 <z_time_slice+0x170>)
    ce62:	f002 ff07 	bl	fc74 <printk>
    ce66:	21ac      	movs	r1, #172	; 0xac
    ce68:	4808      	ldr	r0, [pc, #32]	; (ce8c <z_time_slice+0x154>)
    ce6a:	f003 fb5f 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    ce6e:	697b      	ldr	r3, [r7, #20]
    ce70:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    ce72:	69fb      	ldr	r3, [r7, #28]
    ce74:	f383 8811 	msr	BASEPRI, r3
    ce78:	f3bf 8f6f 	isb	sy
}
    ce7c:	bf00      	nop
}
    ce7e:	bf00      	nop
}
    ce80:	3738      	adds	r7, #56	; 0x38
    ce82:	46bd      	mov	sp, r7
    ce84:	bd80      	pop	{r7, pc}
    ce86:	bf00      	nop
    ce88:	20000c38 	.word	0x20000c38
    ce8c:	0001a660 	.word	0x0001a660
    ce90:	0001a688 	.word	0x0001a688
    ce94:	0001a5c0 	.word	0x0001a5c0
    ce98:	0001a6a0 	.word	0x0001a6a0
    ce9c:	20000c00 	.word	0x20000c00
    cea0:	20000c44 	.word	0x20000c44
    cea4:	0001a6b8 	.word	0x0001a6b8
    cea8:	0001a6d0 	.word	0x0001a6d0
    ceac:	20000c3c 	.word	0x20000c3c

0000ceb0 <update_cache>:
{
    ceb0:	b580      	push	{r7, lr}
    ceb2:	b086      	sub	sp, #24
    ceb4:	af00      	add	r7, sp, #0
    ceb6:	6078      	str	r0, [r7, #4]
	thread = _priq_run_best(&_kernel.ready_q.runq);
    ceb8:	4830      	ldr	r0, [pc, #192]	; (cf7c <update_cache+0xcc>)
    ceba:	f009 fd87 	bl	169cc <z_priq_dumb_best>
    cebe:	60b8      	str	r0, [r7, #8]
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    cec0:	68bb      	ldr	r3, [r7, #8]
    cec2:	2b00      	cmp	r3, #0
    cec4:	d102      	bne.n	cecc <update_cache+0x1c>
    cec6:	4b2e      	ldr	r3, [pc, #184]	; (cf80 <update_cache+0xd0>)
    cec8:	68db      	ldr	r3, [r3, #12]
    ceca:	e000      	b.n	cece <update_cache+0x1e>
    cecc:	68bb      	ldr	r3, [r7, #8]
	struct k_thread *thread = next_up();
    cece:	617b      	str	r3, [r7, #20]
    ced0:	697b      	ldr	r3, [r7, #20]
    ced2:	613b      	str	r3, [r7, #16]
    ced4:	687b      	ldr	r3, [r7, #4]
    ced6:	60fb      	str	r3, [r7, #12]
	if (preempt_ok != 0) {
    ced8:	68fb      	ldr	r3, [r7, #12]
    ceda:	2b00      	cmp	r3, #0
    cedc:	d001      	beq.n	cee2 <update_cache+0x32>
		return true;
    cede:	2301      	movs	r3, #1
    cee0:	e033      	b.n	cf4a <update_cache+0x9a>
	__ASSERT(_current != NULL, "");
    cee2:	4b27      	ldr	r3, [pc, #156]	; (cf80 <update_cache+0xd0>)
    cee4:	689b      	ldr	r3, [r3, #8]
    cee6:	2b00      	cmp	r3, #0
    cee8:	d10c      	bne.n	cf04 <update_cache+0x54>
    ceea:	2381      	movs	r3, #129	; 0x81
    ceec:	4a25      	ldr	r2, [pc, #148]	; (cf84 <update_cache+0xd4>)
    ceee:	4926      	ldr	r1, [pc, #152]	; (cf88 <update_cache+0xd8>)
    cef0:	4826      	ldr	r0, [pc, #152]	; (cf8c <update_cache+0xdc>)
    cef2:	f002 febf 	bl	fc74 <printk>
    cef6:	4826      	ldr	r0, [pc, #152]	; (cf90 <update_cache+0xe0>)
    cef8:	f002 febc 	bl	fc74 <printk>
    cefc:	2181      	movs	r1, #129	; 0x81
    cefe:	4821      	ldr	r0, [pc, #132]	; (cf84 <update_cache+0xd4>)
    cf00:	f003 fb14 	bl	1052c <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    cf04:	4b1e      	ldr	r3, [pc, #120]	; (cf80 <update_cache+0xd0>)
    cf06:	689b      	ldr	r3, [r3, #8]
    cf08:	4618      	mov	r0, r3
    cf0a:	f009 fb94 	bl	16636 <z_is_thread_prevented_from_running>
    cf0e:	4603      	mov	r3, r0
    cf10:	2b00      	cmp	r3, #0
    cf12:	d001      	beq.n	cf18 <update_cache+0x68>
		return true;
    cf14:	2301      	movs	r3, #1
    cf16:	e018      	b.n	cf4a <update_cache+0x9a>
	    && z_is_thread_timeout_active(thread)) {
    cf18:	6938      	ldr	r0, [r7, #16]
    cf1a:	f009 fba0 	bl	1665e <z_is_thread_timeout_active>
    cf1e:	4603      	mov	r3, r0
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    cf20:	2b00      	cmp	r3, #0
    cf22:	d001      	beq.n	cf28 <update_cache+0x78>
		return true;
    cf24:	2301      	movs	r3, #1
    cf26:	e010      	b.n	cf4a <update_cache+0x9a>
	if (is_preempt(_current) || is_metairq(thread)) {
    cf28:	4b15      	ldr	r3, [pc, #84]	; (cf80 <update_cache+0xd0>)
    cf2a:	689b      	ldr	r3, [r3, #8]
    cf2c:	4618      	mov	r0, r3
    cf2e:	f009 fc8b 	bl	16848 <is_preempt>
    cf32:	4603      	mov	r3, r0
    cf34:	2b00      	cmp	r3, #0
    cf36:	d105      	bne.n	cf44 <update_cache+0x94>
    cf38:	6938      	ldr	r0, [r7, #16]
    cf3a:	f009 fc95 	bl	16868 <is_metairq>
    cf3e:	4603      	mov	r3, r0
    cf40:	2b00      	cmp	r3, #0
    cf42:	d001      	beq.n	cf48 <update_cache+0x98>
		return true;
    cf44:	2301      	movs	r3, #1
    cf46:	e000      	b.n	cf4a <update_cache+0x9a>
	return false;
    cf48:	2300      	movs	r3, #0
	if (should_preempt(thread, preempt_ok)) {
    cf4a:	2b00      	cmp	r3, #0
    cf4c:	d00d      	beq.n	cf6a <update_cache+0xba>
		if (thread != _current) {
    cf4e:	4b0c      	ldr	r3, [pc, #48]	; (cf80 <update_cache+0xd0>)
    cf50:	689b      	ldr	r3, [r3, #8]
    cf52:	697a      	ldr	r2, [r7, #20]
    cf54:	429a      	cmp	r2, r3
    cf56:	d001      	beq.n	cf5c <update_cache+0xac>
			z_reset_time_slice();
    cf58:	f7ff fe0e 	bl	cb78 <z_reset_time_slice>
		update_metairq_preempt(thread);
    cf5c:	6978      	ldr	r0, [r7, #20]
    cf5e:	f009 fcb2 	bl	168c6 <update_metairq_preempt>
		_kernel.ready_q.cache = thread;
    cf62:	4a07      	ldr	r2, [pc, #28]	; (cf80 <update_cache+0xd0>)
    cf64:	697b      	ldr	r3, [r7, #20]
    cf66:	6253      	str	r3, [r2, #36]	; 0x24
}
    cf68:	e003      	b.n	cf72 <update_cache+0xc2>
		_kernel.ready_q.cache = _current;
    cf6a:	4b05      	ldr	r3, [pc, #20]	; (cf80 <update_cache+0xd0>)
    cf6c:	689b      	ldr	r3, [r3, #8]
    cf6e:	4a04      	ldr	r2, [pc, #16]	; (cf80 <update_cache+0xd0>)
    cf70:	6253      	str	r3, [r2, #36]	; 0x24
}
    cf72:	bf00      	nop
    cf74:	3718      	adds	r7, #24
    cf76:	46bd      	mov	sp, r7
    cf78:	bd80      	pop	{r7, pc}
    cf7a:	bf00      	nop
    cf7c:	20000c28 	.word	0x20000c28
    cf80:	20000c00 	.word	0x20000c00
    cf84:	0001a618 	.word	0x0001a618
    cf88:	0001a6e8 	.word	0x0001a6e8
    cf8c:	0001a5c0 	.word	0x0001a5c0
    cf90:	0001a5e0 	.word	0x0001a5e0

0000cf94 <ready_thread>:
{
    cf94:	b580      	push	{r7, lr}
    cf96:	b088      	sub	sp, #32
    cf98:	af00      	add	r7, sp, #0
    cf9a:	6078      	str	r0, [r7, #4]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    cf9c:	6878      	ldr	r0, [r7, #4]
    cf9e:	f009 fbbd 	bl	1671c <z_is_thread_queued>
    cfa2:	4603      	mov	r3, r0
    cfa4:	f083 0301 	eor.w	r3, r3, #1
    cfa8:	b2db      	uxtb	r3, r3
    cfaa:	2b00      	cmp	r3, #0
    cfac:	d06b      	beq.n	d086 <ready_thread+0xf2>
    cfae:	6878      	ldr	r0, [r7, #4]
    cfb0:	f009 fb6e 	bl	16690 <z_is_thread_ready>
    cfb4:	4603      	mov	r3, r0
    cfb6:	2b00      	cmp	r3, #0
    cfb8:	d065      	beq.n	d086 <ready_thread+0xf2>
    cfba:	4b35      	ldr	r3, [pc, #212]	; (d090 <ready_thread+0xfc>)
    cfbc:	61fb      	str	r3, [r7, #28]
    cfbe:	687b      	ldr	r3, [r7, #4]
    cfc0:	61bb      	str	r3, [r7, #24]
	thread->base.thread_state |= _THREAD_QUEUED;
    cfc2:	69bb      	ldr	r3, [r7, #24]
    cfc4:	7b5b      	ldrb	r3, [r3, #13]
    cfc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    cfca:	b2da      	uxtb	r2, r3
    cfcc:	69bb      	ldr	r3, [r7, #24]
    cfce:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
    cfd0:	69b8      	ldr	r0, [r7, #24]
    cfd2:	f009 fc6e 	bl	168b2 <should_queue_thread>
    cfd6:	4603      	mov	r3, r0
    cfd8:	2b00      	cmp	r3, #0
    cfda:	d050      	beq.n	d07e <ready_thread+0xea>
    cfdc:	69fb      	ldr	r3, [r7, #28]
    cfde:	617b      	str	r3, [r7, #20]
    cfe0:	69bb      	ldr	r3, [r7, #24]
    cfe2:	613b      	str	r3, [r7, #16]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    cfe4:	6938      	ldr	r0, [r7, #16]
    cfe6:	f7ff fcc5 	bl	c974 <z_is_idle_thread_object>
    cfea:	4603      	mov	r3, r0
    cfec:	2b00      	cmp	r3, #0
    cfee:	d00b      	beq.n	d008 <ready_thread+0x74>
    cff0:	f240 33a6 	movw	r3, #934	; 0x3a6
    cff4:	4a27      	ldr	r2, [pc, #156]	; (d094 <ready_thread+0x100>)
    cff6:	4928      	ldr	r1, [pc, #160]	; (d098 <ready_thread+0x104>)
    cff8:	4828      	ldr	r0, [pc, #160]	; (d09c <ready_thread+0x108>)
    cffa:	f002 fe3b 	bl	fc74 <printk>
    cffe:	f240 31a6 	movw	r1, #934	; 0x3a6
    d002:	4824      	ldr	r0, [pc, #144]	; (d094 <ready_thread+0x100>)
    d004:	f003 fa92 	bl	1052c <assert_post_action>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d008:	6978      	ldr	r0, [r7, #20]
    d00a:	f008 fff7 	bl	15ffc <sys_dlist_peek_head>
    d00e:	4603      	mov	r3, r0
    d010:	2b00      	cmp	r3, #0
    d012:	d004      	beq.n	d01e <ready_thread+0x8a>
    d014:	6978      	ldr	r0, [r7, #20]
    d016:	f008 fff1 	bl	15ffc <sys_dlist_peek_head>
    d01a:	4603      	mov	r3, r0
    d01c:	e000      	b.n	d020 <ready_thread+0x8c>
    d01e:	2300      	movs	r3, #0
    d020:	60fb      	str	r3, [r7, #12]
    d022:	e024      	b.n	d06e <ready_thread+0xda>
		if (z_sched_prio_cmp(thread, t) > 0) {
    d024:	68f9      	ldr	r1, [r7, #12]
    d026:	6938      	ldr	r0, [r7, #16]
    d028:	f009 fc28 	bl	1687c <z_sched_prio_cmp>
    d02c:	4603      	mov	r3, r0
    d02e:	2b00      	cmp	r3, #0
    d030:	dd07      	ble.n	d042 <ready_thread+0xae>
			sys_dlist_insert(&t->base.qnode_dlist,
    d032:	68fb      	ldr	r3, [r7, #12]
    d034:	693a      	ldr	r2, [r7, #16]
    d036:	4611      	mov	r1, r2
    d038:	4618      	mov	r0, r3
    d03a:	f009 f830 	bl	1609e <sys_dlist_insert>
			return;
    d03e:	bf00      	nop
}
    d040:	e01d      	b.n	d07e <ready_thread+0xea>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d042:	68fb      	ldr	r3, [r7, #12]
    d044:	2b00      	cmp	r3, #0
    d046:	d010      	beq.n	d06a <ready_thread+0xd6>
    d048:	68fb      	ldr	r3, [r7, #12]
    d04a:	4619      	mov	r1, r3
    d04c:	6978      	ldr	r0, [r7, #20]
    d04e:	f008 fffa 	bl	16046 <sys_dlist_peek_next>
    d052:	4603      	mov	r3, r0
    d054:	2b00      	cmp	r3, #0
    d056:	d006      	beq.n	d066 <ready_thread+0xd2>
    d058:	68fb      	ldr	r3, [r7, #12]
    d05a:	4619      	mov	r1, r3
    d05c:	6978      	ldr	r0, [r7, #20]
    d05e:	f008 fff2 	bl	16046 <sys_dlist_peek_next>
    d062:	4603      	mov	r3, r0
    d064:	e002      	b.n	d06c <ready_thread+0xd8>
    d066:	2300      	movs	r3, #0
    d068:	e000      	b.n	d06c <ready_thread+0xd8>
    d06a:	2300      	movs	r3, #0
    d06c:	60fb      	str	r3, [r7, #12]
    d06e:	68fb      	ldr	r3, [r7, #12]
    d070:	2b00      	cmp	r3, #0
    d072:	d1d7      	bne.n	d024 <ready_thread+0x90>
	sys_dlist_append(pq, &thread->base.qnode_dlist);
    d074:	693b      	ldr	r3, [r7, #16]
    d076:	4619      	mov	r1, r3
    d078:	6978      	ldr	r0, [r7, #20]
    d07a:	f008 fff7 	bl	1606c <sys_dlist_append>
}
    d07e:	bf00      	nop
		update_cache(0);
    d080:	2000      	movs	r0, #0
    d082:	f7ff ff15 	bl	ceb0 <update_cache>
}
    d086:	bf00      	nop
    d088:	3720      	adds	r7, #32
    d08a:	46bd      	mov	sp, r7
    d08c:	bd80      	pop	{r7, pc}
    d08e:	bf00      	nop
    d090:	20000c28 	.word	0x20000c28
    d094:	0001a618 	.word	0x0001a618
    d098:	0001a63c 	.word	0x0001a63c
    d09c:	0001a5c0 	.word	0x0001a5c0

0000d0a0 <z_ready_thread>:
{
    d0a0:	b580      	push	{r7, lr}
    d0a2:	b08c      	sub	sp, #48	; 0x30
    d0a4:	af00      	add	r7, sp, #0
    d0a6:	6078      	str	r0, [r7, #4]
	LOCKED(&sched_spinlock) {
    d0a8:	2300      	movs	r3, #0
    d0aa:	61bb      	str	r3, [r7, #24]
    d0ac:	4b32      	ldr	r3, [pc, #200]	; (d178 <z_ready_thread+0xd8>)
    d0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
    d0b0:	f04f 0320 	mov.w	r3, #32
    d0b4:	f3ef 8211 	mrs	r2, BASEPRI
    d0b8:	f383 8811 	msr	BASEPRI, r3
    d0bc:	f3bf 8f6f 	isb	sy
    d0c0:	62ba      	str	r2, [r7, #40]	; 0x28
    d0c2:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
    d0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
    d0c6:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d0c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d0ca:	f7fe fc3b 	bl	b944 <z_spin_lock_valid>
    d0ce:	4603      	mov	r3, r0
    d0d0:	f083 0301 	eor.w	r3, r3, #1
    d0d4:	b2db      	uxtb	r3, r3
    d0d6:	2b00      	cmp	r3, #0
    d0d8:	d00d      	beq.n	d0f6 <z_ready_thread+0x56>
    d0da:	2381      	movs	r3, #129	; 0x81
    d0dc:	4a27      	ldr	r2, [pc, #156]	; (d17c <z_ready_thread+0xdc>)
    d0de:	4928      	ldr	r1, [pc, #160]	; (d180 <z_ready_thread+0xe0>)
    d0e0:	4828      	ldr	r0, [pc, #160]	; (d184 <z_ready_thread+0xe4>)
    d0e2:	f002 fdc7 	bl	fc74 <printk>
    d0e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    d0e8:	4827      	ldr	r0, [pc, #156]	; (d188 <z_ready_thread+0xe8>)
    d0ea:	f002 fdc3 	bl	fc74 <printk>
    d0ee:	2181      	movs	r1, #129	; 0x81
    d0f0:	4822      	ldr	r0, [pc, #136]	; (d17c <z_ready_thread+0xdc>)
    d0f2:	f003 fa1b 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    d0f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d0f8:	f7fe fc5c 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    d0fc:	68fb      	ldr	r3, [r7, #12]
    d0fe:	617b      	str	r3, [r7, #20]
    d100:	e031      	b.n	d166 <z_ready_thread+0xc6>
		if (!thread_active_elsewhere(thread)) {
    d102:	6878      	ldr	r0, [r7, #4]
    d104:	f009 fbe8 	bl	168d8 <thread_active_elsewhere>
    d108:	4603      	mov	r3, r0
    d10a:	f083 0301 	eor.w	r3, r3, #1
    d10e:	b2db      	uxtb	r3, r3
    d110:	2b00      	cmp	r3, #0
    d112:	d002      	beq.n	d11a <z_ready_thread+0x7a>
			ready_thread(thread);
    d114:	6878      	ldr	r0, [r7, #4]
    d116:	f7ff ff3d 	bl	cf94 <ready_thread>
    d11a:	4b17      	ldr	r3, [pc, #92]	; (d178 <z_ready_thread+0xd8>)
    d11c:	623b      	str	r3, [r7, #32]
    d11e:	697b      	ldr	r3, [r7, #20]
    d120:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d122:	6a38      	ldr	r0, [r7, #32]
    d124:	f7fe fc2a 	bl	b97c <z_spin_unlock_valid>
    d128:	4603      	mov	r3, r0
    d12a:	f083 0301 	eor.w	r3, r3, #1
    d12e:	b2db      	uxtb	r3, r3
    d130:	2b00      	cmp	r3, #0
    d132:	d00d      	beq.n	d150 <z_ready_thread+0xb0>
    d134:	23ac      	movs	r3, #172	; 0xac
    d136:	4a11      	ldr	r2, [pc, #68]	; (d17c <z_ready_thread+0xdc>)
    d138:	4914      	ldr	r1, [pc, #80]	; (d18c <z_ready_thread+0xec>)
    d13a:	4812      	ldr	r0, [pc, #72]	; (d184 <z_ready_thread+0xe4>)
    d13c:	f002 fd9a 	bl	fc74 <printk>
    d140:	6a39      	ldr	r1, [r7, #32]
    d142:	4813      	ldr	r0, [pc, #76]	; (d190 <z_ready_thread+0xf0>)
    d144:	f002 fd96 	bl	fc74 <printk>
    d148:	21ac      	movs	r1, #172	; 0xac
    d14a:	480c      	ldr	r0, [pc, #48]	; (d17c <z_ready_thread+0xdc>)
    d14c:	f003 f9ee 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    d150:	693b      	ldr	r3, [r7, #16]
    d152:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    d154:	69fb      	ldr	r3, [r7, #28]
    d156:	f383 8811 	msr	BASEPRI, r3
    d15a:	f3bf 8f6f 	isb	sy
}
    d15e:	bf00      	nop
}
    d160:	bf00      	nop
	LOCKED(&sched_spinlock) {
    d162:	2301      	movs	r3, #1
    d164:	61bb      	str	r3, [r7, #24]
    d166:	69bb      	ldr	r3, [r7, #24]
    d168:	2b00      	cmp	r3, #0
    d16a:	d0ca      	beq.n	d102 <z_ready_thread+0x62>
}
    d16c:	bf00      	nop
    d16e:	bf00      	nop
    d170:	3730      	adds	r7, #48	; 0x30
    d172:	46bd      	mov	sp, r7
    d174:	bd80      	pop	{r7, pc}
    d176:	bf00      	nop
    d178:	20000c38 	.word	0x20000c38
    d17c:	0001a660 	.word	0x0001a660
    d180:	0001a688 	.word	0x0001a688
    d184:	0001a5c0 	.word	0x0001a5c0
    d188:	0001a6a0 	.word	0x0001a6a0
    d18c:	0001a6b8 	.word	0x0001a6b8
    d190:	0001a6d0 	.word	0x0001a6d0

0000d194 <z_sched_start>:
{
    d194:	b580      	push	{r7, lr}
    d196:	b08a      	sub	sp, #40	; 0x28
    d198:	af00      	add	r7, sp, #0
    d19a:	6078      	str	r0, [r7, #4]
    d19c:	4b30      	ldr	r3, [pc, #192]	; (d260 <z_sched_start+0xcc>)
    d19e:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
    d1a0:	f04f 0320 	mov.w	r3, #32
    d1a4:	f3ef 8211 	mrs	r2, BASEPRI
    d1a8:	f383 8811 	msr	BASEPRI, r3
    d1ac:	f3bf 8f6f 	isb	sy
    d1b0:	623a      	str	r2, [r7, #32]
    d1b2:	61fb      	str	r3, [r7, #28]
	return key;
    d1b4:	6a3b      	ldr	r3, [r7, #32]
	k.key = arch_irq_lock();
    d1b6:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d1b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d1ba:	f7fe fbc3 	bl	b944 <z_spin_lock_valid>
    d1be:	4603      	mov	r3, r0
    d1c0:	f083 0301 	eor.w	r3, r3, #1
    d1c4:	b2db      	uxtb	r3, r3
    d1c6:	2b00      	cmp	r3, #0
    d1c8:	d00d      	beq.n	d1e6 <z_sched_start+0x52>
    d1ca:	2381      	movs	r3, #129	; 0x81
    d1cc:	4a25      	ldr	r2, [pc, #148]	; (d264 <z_sched_start+0xd0>)
    d1ce:	4926      	ldr	r1, [pc, #152]	; (d268 <z_sched_start+0xd4>)
    d1d0:	4826      	ldr	r0, [pc, #152]	; (d26c <z_sched_start+0xd8>)
    d1d2:	f002 fd4f 	bl	fc74 <printk>
    d1d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    d1d8:	4825      	ldr	r0, [pc, #148]	; (d270 <z_sched_start+0xdc>)
    d1da:	f002 fd4b 	bl	fc74 <printk>
    d1de:	2181      	movs	r1, #129	; 0x81
    d1e0:	4820      	ldr	r0, [pc, #128]	; (d264 <z_sched_start+0xd0>)
    d1e2:	f003 f9a3 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    d1e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d1e8:	f7fe fbe4 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    d1ec:	68bb      	ldr	r3, [r7, #8]
    d1ee:	613b      	str	r3, [r7, #16]
	if (z_has_thread_started(thread)) {
    d1f0:	6878      	ldr	r0, [r7, #4]
    d1f2:	f009 fa6d 	bl	166d0 <z_has_thread_started>
    d1f6:	4603      	mov	r3, r0
    d1f8:	2b00      	cmp	r3, #0
    d1fa:	d023      	beq.n	d244 <z_sched_start+0xb0>
    d1fc:	4b18      	ldr	r3, [pc, #96]	; (d260 <z_sched_start+0xcc>)
    d1fe:	61bb      	str	r3, [r7, #24]
    d200:	693b      	ldr	r3, [r7, #16]
    d202:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d204:	69b8      	ldr	r0, [r7, #24]
    d206:	f7fe fbb9 	bl	b97c <z_spin_unlock_valid>
    d20a:	4603      	mov	r3, r0
    d20c:	f083 0301 	eor.w	r3, r3, #1
    d210:	b2db      	uxtb	r3, r3
    d212:	2b00      	cmp	r3, #0
    d214:	d00d      	beq.n	d232 <z_sched_start+0x9e>
    d216:	23ac      	movs	r3, #172	; 0xac
    d218:	4a12      	ldr	r2, [pc, #72]	; (d264 <z_sched_start+0xd0>)
    d21a:	4916      	ldr	r1, [pc, #88]	; (d274 <z_sched_start+0xe0>)
    d21c:	4813      	ldr	r0, [pc, #76]	; (d26c <z_sched_start+0xd8>)
    d21e:	f002 fd29 	bl	fc74 <printk>
    d222:	69b9      	ldr	r1, [r7, #24]
    d224:	4814      	ldr	r0, [pc, #80]	; (d278 <z_sched_start+0xe4>)
    d226:	f002 fd25 	bl	fc74 <printk>
    d22a:	21ac      	movs	r1, #172	; 0xac
    d22c:	480d      	ldr	r0, [pc, #52]	; (d264 <z_sched_start+0xd0>)
    d22e:	f003 f97d 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    d232:	68fb      	ldr	r3, [r7, #12]
    d234:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
    d236:	697b      	ldr	r3, [r7, #20]
    d238:	f383 8811 	msr	BASEPRI, r3
    d23c:	f3bf 8f6f 	isb	sy
}
    d240:	bf00      	nop
}
    d242:	e009      	b.n	d258 <z_sched_start+0xc4>
	z_mark_thread_as_started(thread);
    d244:	6878      	ldr	r0, [r7, #4]
    d246:	f009 fa96 	bl	16776 <z_mark_thread_as_started>
	ready_thread(thread);
    d24a:	6878      	ldr	r0, [r7, #4]
    d24c:	f7ff fea2 	bl	cf94 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    d250:	6939      	ldr	r1, [r7, #16]
    d252:	4803      	ldr	r0, [pc, #12]	; (d260 <z_sched_start+0xcc>)
    d254:	f000 fd58 	bl	dd08 <z_reschedule>
}
    d258:	3728      	adds	r7, #40	; 0x28
    d25a:	46bd      	mov	sp, r7
    d25c:	bd80      	pop	{r7, pc}
    d25e:	bf00      	nop
    d260:	20000c38 	.word	0x20000c38
    d264:	0001a660 	.word	0x0001a660
    d268:	0001a688 	.word	0x0001a688
    d26c:	0001a5c0 	.word	0x0001a5c0
    d270:	0001a6a0 	.word	0x0001a6a0
    d274:	0001a6b8 	.word	0x0001a6b8
    d278:	0001a6d0 	.word	0x0001a6d0

0000d27c <z_impl_k_thread_suspend>:
{
    d27c:	b580      	push	{r7, lr}
    d27e:	b08e      	sub	sp, #56	; 0x38
    d280:	af00      	add	r7, sp, #0
    d282:	6078      	str	r0, [r7, #4]
	(void)z_abort_thread_timeout(thread);
    d284:	6878      	ldr	r0, [r7, #4]
    d286:	f009 f9b3 	bl	165f0 <z_abort_thread_timeout>
	LOCKED(&sched_spinlock) {
    d28a:	2300      	movs	r3, #0
    d28c:	61bb      	str	r3, [r7, #24]
    d28e:	4b44      	ldr	r3, [pc, #272]	; (d3a0 <z_impl_k_thread_suspend+0x124>)
    d290:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
    d292:	f04f 0320 	mov.w	r3, #32
    d296:	f3ef 8211 	mrs	r2, BASEPRI
    d29a:	f383 8811 	msr	BASEPRI, r3
    d29e:	f3bf 8f6f 	isb	sy
    d2a2:	633a      	str	r2, [r7, #48]	; 0x30
    d2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	return key;
    d2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	k.key = arch_irq_lock();
    d2a8:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d2aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d2ac:	f7fe fb4a 	bl	b944 <z_spin_lock_valid>
    d2b0:	4603      	mov	r3, r0
    d2b2:	f083 0301 	eor.w	r3, r3, #1
    d2b6:	b2db      	uxtb	r3, r3
    d2b8:	2b00      	cmp	r3, #0
    d2ba:	d00d      	beq.n	d2d8 <z_impl_k_thread_suspend+0x5c>
    d2bc:	2381      	movs	r3, #129	; 0x81
    d2be:	4a39      	ldr	r2, [pc, #228]	; (d3a4 <z_impl_k_thread_suspend+0x128>)
    d2c0:	4939      	ldr	r1, [pc, #228]	; (d3a8 <z_impl_k_thread_suspend+0x12c>)
    d2c2:	483a      	ldr	r0, [pc, #232]	; (d3ac <z_impl_k_thread_suspend+0x130>)
    d2c4:	f002 fcd6 	bl	fc74 <printk>
    d2c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
    d2ca:	4839      	ldr	r0, [pc, #228]	; (d3b0 <z_impl_k_thread_suspend+0x134>)
    d2cc:	f002 fcd2 	bl	fc74 <printk>
    d2d0:	2181      	movs	r1, #129	; 0x81
    d2d2:	4834      	ldr	r0, [pc, #208]	; (d3a4 <z_impl_k_thread_suspend+0x128>)
    d2d4:	f003 f92a 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    d2d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d2da:	f7fe fb6b 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    d2de:	68fb      	ldr	r3, [r7, #12]
    d2e0:	617b      	str	r3, [r7, #20]
    d2e2:	e04f      	b.n	d384 <z_impl_k_thread_suspend+0x108>
		if (z_is_thread_queued(thread)) {
    d2e4:	6878      	ldr	r0, [r7, #4]
    d2e6:	f009 fa19 	bl	1671c <z_is_thread_queued>
    d2ea:	4603      	mov	r3, r0
    d2ec:	2b00      	cmp	r3, #0
    d2ee:	d015      	beq.n	d31c <z_impl_k_thread_suspend+0xa0>
    d2f0:	4b30      	ldr	r3, [pc, #192]	; (d3b4 <z_impl_k_thread_suspend+0x138>)
    d2f2:	62bb      	str	r3, [r7, #40]	; 0x28
    d2f4:	687b      	ldr	r3, [r7, #4]
    d2f6:	627b      	str	r3, [r7, #36]	; 0x24
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d2fa:	7b5b      	ldrb	r3, [r3, #13]
    d2fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d300:	b2da      	uxtb	r2, r3
    d302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d304:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
    d306:	6a78      	ldr	r0, [r7, #36]	; 0x24
    d308:	f009 fad3 	bl	168b2 <should_queue_thread>
    d30c:	4603      	mov	r3, r0
    d30e:	2b00      	cmp	r3, #0
    d310:	d003      	beq.n	d31a <z_impl_k_thread_suspend+0x9e>
		_priq_run_remove(pq, thread);
    d312:	6a79      	ldr	r1, [r7, #36]	; 0x24
    d314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d316:	f000 fec7 	bl	e0a8 <z_priq_dumb_remove>
}
    d31a:	bf00      	nop
		z_mark_thread_as_suspended(thread);
    d31c:	6878      	ldr	r0, [r7, #4]
    d31e:	f009 fa0a 	bl	16736 <z_mark_thread_as_suspended>
		update_cache(thread == _current);
    d322:	4b25      	ldr	r3, [pc, #148]	; (d3b8 <z_impl_k_thread_suspend+0x13c>)
    d324:	689b      	ldr	r3, [r3, #8]
    d326:	687a      	ldr	r2, [r7, #4]
    d328:	429a      	cmp	r2, r3
    d32a:	bf0c      	ite	eq
    d32c:	2301      	moveq	r3, #1
    d32e:	2300      	movne	r3, #0
    d330:	b2db      	uxtb	r3, r3
    d332:	4618      	mov	r0, r3
    d334:	f7ff fdbc 	bl	ceb0 <update_cache>
    d338:	4b19      	ldr	r3, [pc, #100]	; (d3a0 <z_impl_k_thread_suspend+0x124>)
    d33a:	623b      	str	r3, [r7, #32]
    d33c:	697b      	ldr	r3, [r7, #20]
    d33e:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d340:	6a38      	ldr	r0, [r7, #32]
    d342:	f7fe fb1b 	bl	b97c <z_spin_unlock_valid>
    d346:	4603      	mov	r3, r0
    d348:	f083 0301 	eor.w	r3, r3, #1
    d34c:	b2db      	uxtb	r3, r3
    d34e:	2b00      	cmp	r3, #0
    d350:	d00d      	beq.n	d36e <z_impl_k_thread_suspend+0xf2>
    d352:	23ac      	movs	r3, #172	; 0xac
    d354:	4a13      	ldr	r2, [pc, #76]	; (d3a4 <z_impl_k_thread_suspend+0x128>)
    d356:	4919      	ldr	r1, [pc, #100]	; (d3bc <z_impl_k_thread_suspend+0x140>)
    d358:	4814      	ldr	r0, [pc, #80]	; (d3ac <z_impl_k_thread_suspend+0x130>)
    d35a:	f002 fc8b 	bl	fc74 <printk>
    d35e:	6a39      	ldr	r1, [r7, #32]
    d360:	4817      	ldr	r0, [pc, #92]	; (d3c0 <z_impl_k_thread_suspend+0x144>)
    d362:	f002 fc87 	bl	fc74 <printk>
    d366:	21ac      	movs	r1, #172	; 0xac
    d368:	480e      	ldr	r0, [pc, #56]	; (d3a4 <z_impl_k_thread_suspend+0x128>)
    d36a:	f003 f8df 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    d36e:	693b      	ldr	r3, [r7, #16]
    d370:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    d372:	69fb      	ldr	r3, [r7, #28]
    d374:	f383 8811 	msr	BASEPRI, r3
    d378:	f3bf 8f6f 	isb	sy
}
    d37c:	bf00      	nop
}
    d37e:	bf00      	nop
	LOCKED(&sched_spinlock) {
    d380:	2301      	movs	r3, #1
    d382:	61bb      	str	r3, [r7, #24]
    d384:	69bb      	ldr	r3, [r7, #24]
    d386:	2b00      	cmp	r3, #0
    d388:	d0ac      	beq.n	d2e4 <z_impl_k_thread_suspend+0x68>
	if (thread == _current) {
    d38a:	4b0b      	ldr	r3, [pc, #44]	; (d3b8 <z_impl_k_thread_suspend+0x13c>)
    d38c:	689b      	ldr	r3, [r3, #8]
    d38e:	687a      	ldr	r2, [r7, #4]
    d390:	429a      	cmp	r2, r3
    d392:	d101      	bne.n	d398 <z_impl_k_thread_suspend+0x11c>
		z_reschedule_unlocked();
    d394:	f009 f93a 	bl	1660c <z_reschedule_unlocked>
}
    d398:	bf00      	nop
    d39a:	3738      	adds	r7, #56	; 0x38
    d39c:	46bd      	mov	sp, r7
    d39e:	bd80      	pop	{r7, pc}
    d3a0:	20000c38 	.word	0x20000c38
    d3a4:	0001a660 	.word	0x0001a660
    d3a8:	0001a688 	.word	0x0001a688
    d3ac:	0001a5c0 	.word	0x0001a5c0
    d3b0:	0001a6a0 	.word	0x0001a6a0
    d3b4:	20000c28 	.word	0x20000c28
    d3b8:	20000c00 	.word	0x20000c00
    d3bc:	0001a6b8 	.word	0x0001a6b8
    d3c0:	0001a6d0 	.word	0x0001a6d0

0000d3c4 <pended_on_thread>:
{
    d3c4:	b580      	push	{r7, lr}
    d3c6:	b082      	sub	sp, #8
    d3c8:	af00      	add	r7, sp, #0
    d3ca:	6078      	str	r0, [r7, #4]
	__ASSERT_NO_MSG(thread->base.pended_on);
    d3cc:	687b      	ldr	r3, [r7, #4]
    d3ce:	689b      	ldr	r3, [r3, #8]
    d3d0:	2b00      	cmp	r3, #0
    d3d2:	d10b      	bne.n	d3ec <pended_on_thread+0x28>
    d3d4:	f240 2342 	movw	r3, #578	; 0x242
    d3d8:	4a07      	ldr	r2, [pc, #28]	; (d3f8 <pended_on_thread+0x34>)
    d3da:	4908      	ldr	r1, [pc, #32]	; (d3fc <pended_on_thread+0x38>)
    d3dc:	4808      	ldr	r0, [pc, #32]	; (d400 <pended_on_thread+0x3c>)
    d3de:	f002 fc49 	bl	fc74 <printk>
    d3e2:	f240 2142 	movw	r1, #578	; 0x242
    d3e6:	4804      	ldr	r0, [pc, #16]	; (d3f8 <pended_on_thread+0x34>)
    d3e8:	f003 f8a0 	bl	1052c <assert_post_action>
	return thread->base.pended_on;
    d3ec:	687b      	ldr	r3, [r7, #4]
    d3ee:	689b      	ldr	r3, [r3, #8]
}
    d3f0:	4618      	mov	r0, r3
    d3f2:	3708      	adds	r7, #8
    d3f4:	46bd      	mov	sp, r7
    d3f6:	bd80      	pop	{r7, pc}
    d3f8:	0001a618 	.word	0x0001a618
    d3fc:	0001a710 	.word	0x0001a710
    d400:	0001a5c0 	.word	0x0001a5c0

0000d404 <unready_thread>:
{
    d404:	b580      	push	{r7, lr}
    d406:	b084      	sub	sp, #16
    d408:	af00      	add	r7, sp, #0
    d40a:	6078      	str	r0, [r7, #4]
	if (z_is_thread_queued(thread)) {
    d40c:	6878      	ldr	r0, [r7, #4]
    d40e:	f009 f985 	bl	1671c <z_is_thread_queued>
    d412:	4603      	mov	r3, r0
    d414:	2b00      	cmp	r3, #0
    d416:	d015      	beq.n	d444 <unready_thread+0x40>
    d418:	4b12      	ldr	r3, [pc, #72]	; (d464 <unready_thread+0x60>)
    d41a:	60fb      	str	r3, [r7, #12]
    d41c:	687b      	ldr	r3, [r7, #4]
    d41e:	60bb      	str	r3, [r7, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    d420:	68bb      	ldr	r3, [r7, #8]
    d422:	7b5b      	ldrb	r3, [r3, #13]
    d424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    d428:	b2da      	uxtb	r2, r3
    d42a:	68bb      	ldr	r3, [r7, #8]
    d42c:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
    d42e:	68b8      	ldr	r0, [r7, #8]
    d430:	f009 fa3f 	bl	168b2 <should_queue_thread>
    d434:	4603      	mov	r3, r0
    d436:	2b00      	cmp	r3, #0
    d438:	d003      	beq.n	d442 <unready_thread+0x3e>
		_priq_run_remove(pq, thread);
    d43a:	68b9      	ldr	r1, [r7, #8]
    d43c:	68f8      	ldr	r0, [r7, #12]
    d43e:	f000 fe33 	bl	e0a8 <z_priq_dumb_remove>
}
    d442:	bf00      	nop
	update_cache(thread == _current);
    d444:	4b08      	ldr	r3, [pc, #32]	; (d468 <unready_thread+0x64>)
    d446:	689b      	ldr	r3, [r3, #8]
    d448:	687a      	ldr	r2, [r7, #4]
    d44a:	429a      	cmp	r2, r3
    d44c:	bf0c      	ite	eq
    d44e:	2301      	moveq	r3, #1
    d450:	2300      	movne	r3, #0
    d452:	b2db      	uxtb	r3, r3
    d454:	4618      	mov	r0, r3
    d456:	f7ff fd2b 	bl	ceb0 <update_cache>
}
    d45a:	bf00      	nop
    d45c:	3710      	adds	r7, #16
    d45e:	46bd      	mov	sp, r7
    d460:	bd80      	pop	{r7, pc}
    d462:	bf00      	nop
    d464:	20000c28 	.word	0x20000c28
    d468:	20000c00 	.word	0x20000c00

0000d46c <add_to_waitq_locked>:
{
    d46c:	b580      	push	{r7, lr}
    d46e:	b086      	sub	sp, #24
    d470:	af00      	add	r7, sp, #0
    d472:	6078      	str	r0, [r7, #4]
    d474:	6039      	str	r1, [r7, #0]
	unready_thread(thread);
    d476:	6878      	ldr	r0, [r7, #4]
    d478:	f7ff ffc4 	bl	d404 <unready_thread>
	z_mark_thread_as_pending(thread);
    d47c:	6878      	ldr	r0, [r7, #4]
    d47e:	f009 f98a 	bl	16796 <z_mark_thread_as_pending>
	if (wait_q != NULL) {
    d482:	683b      	ldr	r3, [r7, #0]
    d484:	2b00      	cmp	r3, #0
    d486:	d053      	beq.n	d530 <add_to_waitq_locked+0xc4>
		thread->base.pended_on = wait_q;
    d488:	687b      	ldr	r3, [r7, #4]
    d48a:	683a      	ldr	r2, [r7, #0]
    d48c:	609a      	str	r2, [r3, #8]
		z_priq_wait_add(&wait_q->waitq, thread);
    d48e:	683b      	ldr	r3, [r7, #0]
    d490:	617b      	str	r3, [r7, #20]
    d492:	687b      	ldr	r3, [r7, #4]
    d494:	613b      	str	r3, [r7, #16]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    d496:	6938      	ldr	r0, [r7, #16]
    d498:	f7ff fa6c 	bl	c974 <z_is_idle_thread_object>
    d49c:	4603      	mov	r3, r0
    d49e:	2b00      	cmp	r3, #0
    d4a0:	d00b      	beq.n	d4ba <add_to_waitq_locked+0x4e>
    d4a2:	f240 33a6 	movw	r3, #934	; 0x3a6
    d4a6:	4a24      	ldr	r2, [pc, #144]	; (d538 <add_to_waitq_locked+0xcc>)
    d4a8:	4924      	ldr	r1, [pc, #144]	; (d53c <add_to_waitq_locked+0xd0>)
    d4aa:	4825      	ldr	r0, [pc, #148]	; (d540 <add_to_waitq_locked+0xd4>)
    d4ac:	f002 fbe2 	bl	fc74 <printk>
    d4b0:	f240 31a6 	movw	r1, #934	; 0x3a6
    d4b4:	4820      	ldr	r0, [pc, #128]	; (d538 <add_to_waitq_locked+0xcc>)
    d4b6:	f003 f839 	bl	1052c <assert_post_action>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d4ba:	6978      	ldr	r0, [r7, #20]
    d4bc:	f008 fd9e 	bl	15ffc <sys_dlist_peek_head>
    d4c0:	4603      	mov	r3, r0
    d4c2:	2b00      	cmp	r3, #0
    d4c4:	d004      	beq.n	d4d0 <add_to_waitq_locked+0x64>
    d4c6:	6978      	ldr	r0, [r7, #20]
    d4c8:	f008 fd98 	bl	15ffc <sys_dlist_peek_head>
    d4cc:	4603      	mov	r3, r0
    d4ce:	e000      	b.n	d4d2 <add_to_waitq_locked+0x66>
    d4d0:	2300      	movs	r3, #0
    d4d2:	60fb      	str	r3, [r7, #12]
    d4d4:	e024      	b.n	d520 <add_to_waitq_locked+0xb4>
		if (z_sched_prio_cmp(thread, t) > 0) {
    d4d6:	68f9      	ldr	r1, [r7, #12]
    d4d8:	6938      	ldr	r0, [r7, #16]
    d4da:	f009 f9cf 	bl	1687c <z_sched_prio_cmp>
    d4de:	4603      	mov	r3, r0
    d4e0:	2b00      	cmp	r3, #0
    d4e2:	dd07      	ble.n	d4f4 <add_to_waitq_locked+0x88>
			sys_dlist_insert(&t->base.qnode_dlist,
    d4e4:	68fb      	ldr	r3, [r7, #12]
    d4e6:	693a      	ldr	r2, [r7, #16]
    d4e8:	4611      	mov	r1, r2
    d4ea:	4618      	mov	r0, r3
    d4ec:	f008 fdd7 	bl	1609e <sys_dlist_insert>
			return;
    d4f0:	bf00      	nop
}
    d4f2:	e01d      	b.n	d530 <add_to_waitq_locked+0xc4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d4f4:	68fb      	ldr	r3, [r7, #12]
    d4f6:	2b00      	cmp	r3, #0
    d4f8:	d010      	beq.n	d51c <add_to_waitq_locked+0xb0>
    d4fa:	68fb      	ldr	r3, [r7, #12]
    d4fc:	4619      	mov	r1, r3
    d4fe:	6978      	ldr	r0, [r7, #20]
    d500:	f008 fda1 	bl	16046 <sys_dlist_peek_next>
    d504:	4603      	mov	r3, r0
    d506:	2b00      	cmp	r3, #0
    d508:	d006      	beq.n	d518 <add_to_waitq_locked+0xac>
    d50a:	68fb      	ldr	r3, [r7, #12]
    d50c:	4619      	mov	r1, r3
    d50e:	6978      	ldr	r0, [r7, #20]
    d510:	f008 fd99 	bl	16046 <sys_dlist_peek_next>
    d514:	4603      	mov	r3, r0
    d516:	e002      	b.n	d51e <add_to_waitq_locked+0xb2>
    d518:	2300      	movs	r3, #0
    d51a:	e000      	b.n	d51e <add_to_waitq_locked+0xb2>
    d51c:	2300      	movs	r3, #0
    d51e:	60fb      	str	r3, [r7, #12]
    d520:	68fb      	ldr	r3, [r7, #12]
    d522:	2b00      	cmp	r3, #0
    d524:	d1d7      	bne.n	d4d6 <add_to_waitq_locked+0x6a>
	sys_dlist_append(pq, &thread->base.qnode_dlist);
    d526:	693b      	ldr	r3, [r7, #16]
    d528:	4619      	mov	r1, r3
    d52a:	6978      	ldr	r0, [r7, #20]
    d52c:	f008 fd9e 	bl	1606c <sys_dlist_append>
}
    d530:	bf00      	nop
    d532:	3718      	adds	r7, #24
    d534:	46bd      	mov	sp, r7
    d536:	bd80      	pop	{r7, pc}
    d538:	0001a618 	.word	0x0001a618
    d53c:	0001a63c 	.word	0x0001a63c
    d540:	0001a5c0 	.word	0x0001a5c0

0000d544 <pend>:
{
    d544:	b580      	push	{r7, lr}
    d546:	b08e      	sub	sp, #56	; 0x38
    d548:	af00      	add	r7, sp, #0
    d54a:	60f8      	str	r0, [r7, #12]
    d54c:	60b9      	str	r1, [r7, #8]
    d54e:	e9c7 2300 	strd	r2, r3, [r7]
	LOCKED(&sched_spinlock) {
    d552:	2300      	movs	r3, #0
    d554:	623b      	str	r3, [r7, #32]
    d556:	4b30      	ldr	r3, [pc, #192]	; (d618 <pend+0xd4>)
    d558:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
    d55a:	f04f 0320 	mov.w	r3, #32
    d55e:	f3ef 8211 	mrs	r2, BASEPRI
    d562:	f383 8811 	msr	BASEPRI, r3
    d566:	f3bf 8f6f 	isb	sy
    d56a:	633a      	str	r2, [r7, #48]	; 0x30
    d56c:	62fb      	str	r3, [r7, #44]	; 0x2c
	return key;
    d56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	k.key = arch_irq_lock();
    d570:	617b      	str	r3, [r7, #20]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d572:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d574:	f7fe f9e6 	bl	b944 <z_spin_lock_valid>
    d578:	4603      	mov	r3, r0
    d57a:	f083 0301 	eor.w	r3, r3, #1
    d57e:	b2db      	uxtb	r3, r3
    d580:	2b00      	cmp	r3, #0
    d582:	d00d      	beq.n	d5a0 <pend+0x5c>
    d584:	2381      	movs	r3, #129	; 0x81
    d586:	4a25      	ldr	r2, [pc, #148]	; (d61c <pend+0xd8>)
    d588:	4925      	ldr	r1, [pc, #148]	; (d620 <pend+0xdc>)
    d58a:	4826      	ldr	r0, [pc, #152]	; (d624 <pend+0xe0>)
    d58c:	f002 fb72 	bl	fc74 <printk>
    d590:	6b79      	ldr	r1, [r7, #52]	; 0x34
    d592:	4825      	ldr	r0, [pc, #148]	; (d628 <pend+0xe4>)
    d594:	f002 fb6e 	bl	fc74 <printk>
    d598:	2181      	movs	r1, #129	; 0x81
    d59a:	4820      	ldr	r0, [pc, #128]	; (d61c <pend+0xd8>)
    d59c:	f002 ffc6 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    d5a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d5a2:	f7fe fa07 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    d5a6:	697b      	ldr	r3, [r7, #20]
    d5a8:	61fb      	str	r3, [r7, #28]
    d5aa:	e029      	b.n	d600 <pend+0xbc>
		add_to_waitq_locked(thread, wait_q);
    d5ac:	68b9      	ldr	r1, [r7, #8]
    d5ae:	68f8      	ldr	r0, [r7, #12]
    d5b0:	f7ff ff5c 	bl	d46c <add_to_waitq_locked>
    d5b4:	4b18      	ldr	r3, [pc, #96]	; (d618 <pend+0xd4>)
    d5b6:	62bb      	str	r3, [r7, #40]	; 0x28
    d5b8:	69fb      	ldr	r3, [r7, #28]
    d5ba:	61bb      	str	r3, [r7, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d5bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d5be:	f7fe f9dd 	bl	b97c <z_spin_unlock_valid>
    d5c2:	4603      	mov	r3, r0
    d5c4:	f083 0301 	eor.w	r3, r3, #1
    d5c8:	b2db      	uxtb	r3, r3
    d5ca:	2b00      	cmp	r3, #0
    d5cc:	d00d      	beq.n	d5ea <pend+0xa6>
    d5ce:	23ac      	movs	r3, #172	; 0xac
    d5d0:	4a12      	ldr	r2, [pc, #72]	; (d61c <pend+0xd8>)
    d5d2:	4916      	ldr	r1, [pc, #88]	; (d62c <pend+0xe8>)
    d5d4:	4813      	ldr	r0, [pc, #76]	; (d624 <pend+0xe0>)
    d5d6:	f002 fb4d 	bl	fc74 <printk>
    d5da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    d5dc:	4814      	ldr	r0, [pc, #80]	; (d630 <pend+0xec>)
    d5de:	f002 fb49 	bl	fc74 <printk>
    d5e2:	21ac      	movs	r1, #172	; 0xac
    d5e4:	480d      	ldr	r0, [pc, #52]	; (d61c <pend+0xd8>)
    d5e6:	f002 ffa1 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    d5ea:	69bb      	ldr	r3, [r7, #24]
    d5ec:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
    d5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d5f0:	f383 8811 	msr	BASEPRI, r3
    d5f4:	f3bf 8f6f 	isb	sy
}
    d5f8:	bf00      	nop
}
    d5fa:	bf00      	nop
	LOCKED(&sched_spinlock) {
    d5fc:	2301      	movs	r3, #1
    d5fe:	623b      	str	r3, [r7, #32]
    d600:	6a3b      	ldr	r3, [r7, #32]
    d602:	2b00      	cmp	r3, #0
    d604:	d0d2      	beq.n	d5ac <pend+0x68>
	add_thread_timeout(thread, timeout);
    d606:	e9d7 2300 	ldrd	r2, r3, [r7]
    d60a:	68f8      	ldr	r0, [r7, #12]
    d60c:	f009 f96e 	bl	168ec <add_thread_timeout>
}
    d610:	bf00      	nop
    d612:	3738      	adds	r7, #56	; 0x38
    d614:	46bd      	mov	sp, r7
    d616:	bd80      	pop	{r7, pc}
    d618:	20000c38 	.word	0x20000c38
    d61c:	0001a660 	.word	0x0001a660
    d620:	0001a688 	.word	0x0001a688
    d624:	0001a5c0 	.word	0x0001a5c0
    d628:	0001a6a0 	.word	0x0001a6a0
    d62c:	0001a6b8 	.word	0x0001a6b8
    d630:	0001a6d0 	.word	0x0001a6d0

0000d634 <z_unpend_thread_no_timeout>:
{
    d634:	b580      	push	{r7, lr}
    d636:	b08c      	sub	sp, #48	; 0x30
    d638:	af00      	add	r7, sp, #0
    d63a:	6078      	str	r0, [r7, #4]
	LOCKED(&sched_spinlock) {
    d63c:	2300      	movs	r3, #0
    d63e:	61bb      	str	r3, [r7, #24]
    d640:	4b2d      	ldr	r3, [pc, #180]	; (d6f8 <z_unpend_thread_no_timeout+0xc4>)
    d642:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
    d644:	f04f 0320 	mov.w	r3, #32
    d648:	f3ef 8211 	mrs	r2, BASEPRI
    d64c:	f383 8811 	msr	BASEPRI, r3
    d650:	f3bf 8f6f 	isb	sy
    d654:	62ba      	str	r2, [r7, #40]	; 0x28
    d656:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
    d658:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
    d65a:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d65c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d65e:	f7fe f971 	bl	b944 <z_spin_lock_valid>
    d662:	4603      	mov	r3, r0
    d664:	f083 0301 	eor.w	r3, r3, #1
    d668:	b2db      	uxtb	r3, r3
    d66a:	2b00      	cmp	r3, #0
    d66c:	d00d      	beq.n	d68a <z_unpend_thread_no_timeout+0x56>
    d66e:	2381      	movs	r3, #129	; 0x81
    d670:	4a22      	ldr	r2, [pc, #136]	; (d6fc <z_unpend_thread_no_timeout+0xc8>)
    d672:	4923      	ldr	r1, [pc, #140]	; (d700 <z_unpend_thread_no_timeout+0xcc>)
    d674:	4823      	ldr	r0, [pc, #140]	; (d704 <z_unpend_thread_no_timeout+0xd0>)
    d676:	f002 fafd 	bl	fc74 <printk>
    d67a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    d67c:	4822      	ldr	r0, [pc, #136]	; (d708 <z_unpend_thread_no_timeout+0xd4>)
    d67e:	f002 faf9 	bl	fc74 <printk>
    d682:	2181      	movs	r1, #129	; 0x81
    d684:	481d      	ldr	r0, [pc, #116]	; (d6fc <z_unpend_thread_no_timeout+0xc8>)
    d686:	f002 ff51 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    d68a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d68c:	f7fe f992 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    d690:	68fb      	ldr	r3, [r7, #12]
    d692:	617b      	str	r3, [r7, #20]
    d694:	e028      	b.n	d6e8 <z_unpend_thread_no_timeout+0xb4>
		unpend_thread_no_timeout(thread);
    d696:	6878      	ldr	r0, [r7, #4]
    d698:	f009 f941 	bl	1691e <unpend_thread_no_timeout>
    d69c:	4b16      	ldr	r3, [pc, #88]	; (d6f8 <z_unpend_thread_no_timeout+0xc4>)
    d69e:	623b      	str	r3, [r7, #32]
    d6a0:	697b      	ldr	r3, [r7, #20]
    d6a2:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d6a4:	6a38      	ldr	r0, [r7, #32]
    d6a6:	f7fe f969 	bl	b97c <z_spin_unlock_valid>
    d6aa:	4603      	mov	r3, r0
    d6ac:	f083 0301 	eor.w	r3, r3, #1
    d6b0:	b2db      	uxtb	r3, r3
    d6b2:	2b00      	cmp	r3, #0
    d6b4:	d00d      	beq.n	d6d2 <z_unpend_thread_no_timeout+0x9e>
    d6b6:	23ac      	movs	r3, #172	; 0xac
    d6b8:	4a10      	ldr	r2, [pc, #64]	; (d6fc <z_unpend_thread_no_timeout+0xc8>)
    d6ba:	4914      	ldr	r1, [pc, #80]	; (d70c <z_unpend_thread_no_timeout+0xd8>)
    d6bc:	4811      	ldr	r0, [pc, #68]	; (d704 <z_unpend_thread_no_timeout+0xd0>)
    d6be:	f002 fad9 	bl	fc74 <printk>
    d6c2:	6a39      	ldr	r1, [r7, #32]
    d6c4:	4812      	ldr	r0, [pc, #72]	; (d710 <z_unpend_thread_no_timeout+0xdc>)
    d6c6:	f002 fad5 	bl	fc74 <printk>
    d6ca:	21ac      	movs	r1, #172	; 0xac
    d6cc:	480b      	ldr	r0, [pc, #44]	; (d6fc <z_unpend_thread_no_timeout+0xc8>)
    d6ce:	f002 ff2d 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    d6d2:	693b      	ldr	r3, [r7, #16]
    d6d4:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    d6d6:	69fb      	ldr	r3, [r7, #28]
    d6d8:	f383 8811 	msr	BASEPRI, r3
    d6dc:	f3bf 8f6f 	isb	sy
}
    d6e0:	bf00      	nop
}
    d6e2:	bf00      	nop
	LOCKED(&sched_spinlock) {
    d6e4:	2301      	movs	r3, #1
    d6e6:	61bb      	str	r3, [r7, #24]
    d6e8:	69bb      	ldr	r3, [r7, #24]
    d6ea:	2b00      	cmp	r3, #0
    d6ec:	d0d3      	beq.n	d696 <z_unpend_thread_no_timeout+0x62>
}
    d6ee:	bf00      	nop
    d6f0:	bf00      	nop
    d6f2:	3730      	adds	r7, #48	; 0x30
    d6f4:	46bd      	mov	sp, r7
    d6f6:	bd80      	pop	{r7, pc}
    d6f8:	20000c38 	.word	0x20000c38
    d6fc:	0001a660 	.word	0x0001a660
    d700:	0001a688 	.word	0x0001a688
    d704:	0001a5c0 	.word	0x0001a5c0
    d708:	0001a6a0 	.word	0x0001a6a0
    d70c:	0001a6b8 	.word	0x0001a6b8
    d710:	0001a6d0 	.word	0x0001a6d0

0000d714 <z_thread_timeout>:
{
    d714:	b580      	push	{r7, lr}
    d716:	b08e      	sub	sp, #56	; 0x38
    d718:	af00      	add	r7, sp, #0
    d71a:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = CONTAINER_OF(timeout,
    d71c:	687b      	ldr	r3, [r7, #4]
    d71e:	3b18      	subs	r3, #24
    d720:	637b      	str	r3, [r7, #52]	; 0x34
	LOCKED(&sched_spinlock) {
    d722:	2300      	movs	r3, #0
    d724:	61bb      	str	r3, [r7, #24]
    d726:	4b43      	ldr	r3, [pc, #268]	; (d834 <z_thread_timeout+0x120>)
    d728:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
    d72a:	f04f 0320 	mov.w	r3, #32
    d72e:	f3ef 8211 	mrs	r2, BASEPRI
    d732:	f383 8811 	msr	BASEPRI, r3
    d736:	f3bf 8f6f 	isb	sy
    d73a:	62ba      	str	r2, [r7, #40]	; 0x28
    d73c:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
    d73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
    d740:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d742:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d744:	f7fe f8fe 	bl	b944 <z_spin_lock_valid>
    d748:	4603      	mov	r3, r0
    d74a:	f083 0301 	eor.w	r3, r3, #1
    d74e:	b2db      	uxtb	r3, r3
    d750:	2b00      	cmp	r3, #0
    d752:	d00d      	beq.n	d770 <z_thread_timeout+0x5c>
    d754:	2381      	movs	r3, #129	; 0x81
    d756:	4a38      	ldr	r2, [pc, #224]	; (d838 <z_thread_timeout+0x124>)
    d758:	4938      	ldr	r1, [pc, #224]	; (d83c <z_thread_timeout+0x128>)
    d75a:	4839      	ldr	r0, [pc, #228]	; (d840 <z_thread_timeout+0x12c>)
    d75c:	f002 fa8a 	bl	fc74 <printk>
    d760:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    d762:	4838      	ldr	r0, [pc, #224]	; (d844 <z_thread_timeout+0x130>)
    d764:	f002 fa86 	bl	fc74 <printk>
    d768:	2181      	movs	r1, #129	; 0x81
    d76a:	4833      	ldr	r0, [pc, #204]	; (d838 <z_thread_timeout+0x124>)
    d76c:	f002 fede 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    d770:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d772:	f7fe f91f 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    d776:	68fb      	ldr	r3, [r7, #12]
    d778:	617b      	str	r3, [r7, #20]
    d77a:	e053      	b.n	d824 <z_thread_timeout+0x110>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    d77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d77e:	7b5b      	ldrb	r3, [r3, #13]
    d780:	f003 0308 	and.w	r3, r3, #8
    d784:	2b00      	cmp	r3, #0
    d786:	d105      	bne.n	d794 <z_thread_timeout+0x80>
			       (thread->base.thread_state & _THREAD_ABORTING));
    d788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d78a:	7b5b      	ldrb	r3, [r3, #13]
    d78c:	f003 0320 	and.w	r3, r3, #32
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    d790:	2b00      	cmp	r3, #0
    d792:	d001      	beq.n	d798 <z_thread_timeout+0x84>
    d794:	2301      	movs	r3, #1
    d796:	e000      	b.n	d79a <z_thread_timeout+0x86>
    d798:	2300      	movs	r3, #0
    d79a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    d79e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    d7a2:	f003 0301 	and.w	r3, r3, #1
    d7a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if (!killed) {
    d7aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    d7ae:	f083 0301 	eor.w	r3, r3, #1
    d7b2:	b2db      	uxtb	r3, r3
    d7b4:	2b00      	cmp	r3, #0
    d7b6:	d00f      	beq.n	d7d8 <z_thread_timeout+0xc4>
			if (thread->base.pended_on != NULL) {
    d7b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d7ba:	689b      	ldr	r3, [r3, #8]
    d7bc:	2b00      	cmp	r3, #0
    d7be:	d002      	beq.n	d7c6 <z_thread_timeout+0xb2>
				unpend_thread_no_timeout(thread);
    d7c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d7c2:	f009 f8ac 	bl	1691e <unpend_thread_no_timeout>
			z_mark_thread_as_started(thread);
    d7c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d7c8:	f008 ffd5 	bl	16776 <z_mark_thread_as_started>
			z_mark_thread_as_not_suspended(thread);
    d7cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d7ce:	f008 ffc2 	bl	16756 <z_mark_thread_as_not_suspended>
			ready_thread(thread);
    d7d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
    d7d4:	f7ff fbde 	bl	cf94 <ready_thread>
    d7d8:	4b16      	ldr	r3, [pc, #88]	; (d834 <z_thread_timeout+0x120>)
    d7da:	623b      	str	r3, [r7, #32]
    d7dc:	697b      	ldr	r3, [r7, #20]
    d7de:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d7e0:	6a38      	ldr	r0, [r7, #32]
    d7e2:	f7fe f8cb 	bl	b97c <z_spin_unlock_valid>
    d7e6:	4603      	mov	r3, r0
    d7e8:	f083 0301 	eor.w	r3, r3, #1
    d7ec:	b2db      	uxtb	r3, r3
    d7ee:	2b00      	cmp	r3, #0
    d7f0:	d00d      	beq.n	d80e <z_thread_timeout+0xfa>
    d7f2:	23ac      	movs	r3, #172	; 0xac
    d7f4:	4a10      	ldr	r2, [pc, #64]	; (d838 <z_thread_timeout+0x124>)
    d7f6:	4914      	ldr	r1, [pc, #80]	; (d848 <z_thread_timeout+0x134>)
    d7f8:	4811      	ldr	r0, [pc, #68]	; (d840 <z_thread_timeout+0x12c>)
    d7fa:	f002 fa3b 	bl	fc74 <printk>
    d7fe:	6a39      	ldr	r1, [r7, #32]
    d800:	4812      	ldr	r0, [pc, #72]	; (d84c <z_thread_timeout+0x138>)
    d802:	f002 fa37 	bl	fc74 <printk>
    d806:	21ac      	movs	r1, #172	; 0xac
    d808:	480b      	ldr	r0, [pc, #44]	; (d838 <z_thread_timeout+0x124>)
    d80a:	f002 fe8f 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    d80e:	693b      	ldr	r3, [r7, #16]
    d810:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    d812:	69fb      	ldr	r3, [r7, #28]
    d814:	f383 8811 	msr	BASEPRI, r3
    d818:	f3bf 8f6f 	isb	sy
}
    d81c:	bf00      	nop
}
    d81e:	bf00      	nop
	LOCKED(&sched_spinlock) {
    d820:	2301      	movs	r3, #1
    d822:	61bb      	str	r3, [r7, #24]
    d824:	69bb      	ldr	r3, [r7, #24]
    d826:	2b00      	cmp	r3, #0
    d828:	d0a8      	beq.n	d77c <z_thread_timeout+0x68>
}
    d82a:	bf00      	nop
    d82c:	bf00      	nop
    d82e:	3738      	adds	r7, #56	; 0x38
    d830:	46bd      	mov	sp, r7
    d832:	bd80      	pop	{r7, pc}
    d834:	20000c38 	.word	0x20000c38
    d838:	0001a660 	.word	0x0001a660
    d83c:	0001a688 	.word	0x0001a688
    d840:	0001a5c0 	.word	0x0001a5c0
    d844:	0001a6a0 	.word	0x0001a6a0
    d848:	0001a6b8 	.word	0x0001a6b8
    d84c:	0001a6d0 	.word	0x0001a6d0

0000d850 <z_pend_curr>:
{
    d850:	b580      	push	{r7, lr}
    d852:	b088      	sub	sp, #32
    d854:	af00      	add	r7, sp, #0
    d856:	60f8      	str	r0, [r7, #12]
    d858:	60b9      	str	r1, [r7, #8]
    d85a:	607a      	str	r2, [r7, #4]
	pending_current = _current;
    d85c:	4b18      	ldr	r3, [pc, #96]	; (d8c0 <z_pend_curr+0x70>)
    d85e:	689b      	ldr	r3, [r3, #8]
    d860:	4a18      	ldr	r2, [pc, #96]	; (d8c4 <z_pend_curr+0x74>)
    d862:	6013      	str	r3, [r2, #0]
	pend(_current, wait_q, timeout);
    d864:	4b16      	ldr	r3, [pc, #88]	; (d8c0 <z_pend_curr+0x70>)
    d866:	6898      	ldr	r0, [r3, #8]
    d868:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    d86c:	6879      	ldr	r1, [r7, #4]
    d86e:	f7ff fe69 	bl	d544 <pend>
    d872:	68fb      	ldr	r3, [r7, #12]
    d874:	61fb      	str	r3, [r7, #28]
    d876:	68bb      	ldr	r3, [r7, #8]
    d878:	617b      	str	r3, [r7, #20]
    d87a:	69fb      	ldr	r3, [r7, #28]
    d87c:	61bb      	str	r3, [r7, #24]
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d87e:	69b8      	ldr	r0, [r7, #24]
    d880:	f7fe f87c 	bl	b97c <z_spin_unlock_valid>
    d884:	4603      	mov	r3, r0
    d886:	f083 0301 	eor.w	r3, r3, #1
    d88a:	b2db      	uxtb	r3, r3
    d88c:	2b00      	cmp	r3, #0
    d88e:	d00d      	beq.n	d8ac <z_pend_curr+0x5c>
    d890:	23c3      	movs	r3, #195	; 0xc3
    d892:	4a0d      	ldr	r2, [pc, #52]	; (d8c8 <z_pend_curr+0x78>)
    d894:	490d      	ldr	r1, [pc, #52]	; (d8cc <z_pend_curr+0x7c>)
    d896:	480e      	ldr	r0, [pc, #56]	; (d8d0 <z_pend_curr+0x80>)
    d898:	f002 f9ec 	bl	fc74 <printk>
    d89c:	69b9      	ldr	r1, [r7, #24]
    d89e:	480d      	ldr	r0, [pc, #52]	; (d8d4 <z_pend_curr+0x84>)
    d8a0:	f002 f9e8 	bl	fc74 <printk>
    d8a4:	21c3      	movs	r1, #195	; 0xc3
    d8a6:	4808      	ldr	r0, [pc, #32]	; (d8c8 <z_pend_curr+0x78>)
    d8a8:	f002 fe40 	bl	1052c <assert_post_action>
#endif
#ifdef CONFIG_SMP
	atomic_clear(&l->locked);
#endif
}
    d8ac:	bf00      	nop
	return z_swap_irqlock(key.key);
    d8ae:	697b      	ldr	r3, [r7, #20]
    d8b0:	4618      	mov	r0, r3
    d8b2:	f008 ffbc 	bl	1682e <z_swap_irqlock>
    d8b6:	4603      	mov	r3, r0
}
    d8b8:	4618      	mov	r0, r3
    d8ba:	3720      	adds	r7, #32
    d8bc:	46bd      	mov	sp, r7
    d8be:	bd80      	pop	{r7, pc}
    d8c0:	20000c00 	.word	0x20000c00
    d8c4:	20000c44 	.word	0x20000c44
    d8c8:	0001a660 	.word	0x0001a660
    d8cc:	0001a6b8 	.word	0x0001a6b8
    d8d0:	0001a5c0 	.word	0x0001a5c0
    d8d4:	0001a6d0 	.word	0x0001a6d0

0000d8d8 <z_unpend1_no_timeout>:
{
    d8d8:	b580      	push	{r7, lr}
    d8da:	b08c      	sub	sp, #48	; 0x30
    d8dc:	af00      	add	r7, sp, #0
    d8de:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = NULL;
    d8e0:	2300      	movs	r3, #0
    d8e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	LOCKED(&sched_spinlock) {
    d8e4:	2300      	movs	r3, #0
    d8e6:	617b      	str	r3, [r7, #20]
    d8e8:	4b31      	ldr	r3, [pc, #196]	; (d9b0 <z_unpend1_no_timeout+0xd8>)
    d8ea:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
    d8ec:	f04f 0320 	mov.w	r3, #32
    d8f0:	f3ef 8211 	mrs	r2, BASEPRI
    d8f4:	f383 8811 	msr	BASEPRI, r3
    d8f8:	f3bf 8f6f 	isb	sy
    d8fc:	627a      	str	r2, [r7, #36]	; 0x24
    d8fe:	623b      	str	r3, [r7, #32]
	return key;
    d900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	k.key = arch_irq_lock();
    d902:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d906:	f7fe f81d 	bl	b944 <z_spin_lock_valid>
    d90a:	4603      	mov	r3, r0
    d90c:	f083 0301 	eor.w	r3, r3, #1
    d910:	b2db      	uxtb	r3, r3
    d912:	2b00      	cmp	r3, #0
    d914:	d00d      	beq.n	d932 <z_unpend1_no_timeout+0x5a>
    d916:	2381      	movs	r3, #129	; 0x81
    d918:	4a26      	ldr	r2, [pc, #152]	; (d9b4 <z_unpend1_no_timeout+0xdc>)
    d91a:	4927      	ldr	r1, [pc, #156]	; (d9b8 <z_unpend1_no_timeout+0xe0>)
    d91c:	4827      	ldr	r0, [pc, #156]	; (d9bc <z_unpend1_no_timeout+0xe4>)
    d91e:	f002 f9a9 	bl	fc74 <printk>
    d922:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    d924:	4826      	ldr	r0, [pc, #152]	; (d9c0 <z_unpend1_no_timeout+0xe8>)
    d926:	f002 f9a5 	bl	fc74 <printk>
    d92a:	2181      	movs	r1, #129	; 0x81
    d92c:	4821      	ldr	r0, [pc, #132]	; (d9b4 <z_unpend1_no_timeout+0xdc>)
    d92e:	f002 fdfd 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    d932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d934:	f7fe f83e 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    d938:	68bb      	ldr	r3, [r7, #8]
    d93a:	613b      	str	r3, [r7, #16]
    d93c:	e030      	b.n	d9a0 <z_unpend1_no_timeout+0xc8>
		thread = _priq_wait_best(&wait_q->waitq);
    d93e:	687b      	ldr	r3, [r7, #4]
    d940:	4618      	mov	r0, r3
    d942:	f009 f843 	bl	169cc <z_priq_dumb_best>
    d946:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (thread != NULL) {
    d948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d94a:	2b00      	cmp	r3, #0
    d94c:	d002      	beq.n	d954 <z_unpend1_no_timeout+0x7c>
			unpend_thread_no_timeout(thread);
    d94e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    d950:	f008 ffe5 	bl	1691e <unpend_thread_no_timeout>
    d954:	4b16      	ldr	r3, [pc, #88]	; (d9b0 <z_unpend1_no_timeout+0xd8>)
    d956:	61fb      	str	r3, [r7, #28]
    d958:	693b      	ldr	r3, [r7, #16]
    d95a:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    d95c:	69f8      	ldr	r0, [r7, #28]
    d95e:	f7fe f80d 	bl	b97c <z_spin_unlock_valid>
    d962:	4603      	mov	r3, r0
    d964:	f083 0301 	eor.w	r3, r3, #1
    d968:	b2db      	uxtb	r3, r3
    d96a:	2b00      	cmp	r3, #0
    d96c:	d00d      	beq.n	d98a <z_unpend1_no_timeout+0xb2>
    d96e:	23ac      	movs	r3, #172	; 0xac
    d970:	4a10      	ldr	r2, [pc, #64]	; (d9b4 <z_unpend1_no_timeout+0xdc>)
    d972:	4914      	ldr	r1, [pc, #80]	; (d9c4 <z_unpend1_no_timeout+0xec>)
    d974:	4811      	ldr	r0, [pc, #68]	; (d9bc <z_unpend1_no_timeout+0xe4>)
    d976:	f002 f97d 	bl	fc74 <printk>
    d97a:	69f9      	ldr	r1, [r7, #28]
    d97c:	4812      	ldr	r0, [pc, #72]	; (d9c8 <z_unpend1_no_timeout+0xf0>)
    d97e:	f002 f979 	bl	fc74 <printk>
    d982:	21ac      	movs	r1, #172	; 0xac
    d984:	480b      	ldr	r0, [pc, #44]	; (d9b4 <z_unpend1_no_timeout+0xdc>)
    d986:	f002 fdd1 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    d98a:	68fb      	ldr	r3, [r7, #12]
    d98c:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
    d98e:	69bb      	ldr	r3, [r7, #24]
    d990:	f383 8811 	msr	BASEPRI, r3
    d994:	f3bf 8f6f 	isb	sy
}
    d998:	bf00      	nop
}
    d99a:	bf00      	nop
	LOCKED(&sched_spinlock) {
    d99c:	2301      	movs	r3, #1
    d99e:	617b      	str	r3, [r7, #20]
    d9a0:	697b      	ldr	r3, [r7, #20]
    d9a2:	2b00      	cmp	r3, #0
    d9a4:	d0cb      	beq.n	d93e <z_unpend1_no_timeout+0x66>
	return thread;
    d9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    d9a8:	4618      	mov	r0, r3
    d9aa:	3730      	adds	r7, #48	; 0x30
    d9ac:	46bd      	mov	sp, r7
    d9ae:	bd80      	pop	{r7, pc}
    d9b0:	20000c38 	.word	0x20000c38
    d9b4:	0001a660 	.word	0x0001a660
    d9b8:	0001a688 	.word	0x0001a688
    d9bc:	0001a5c0 	.word	0x0001a5c0
    d9c0:	0001a6a0 	.word	0x0001a6a0
    d9c4:	0001a6b8 	.word	0x0001a6b8
    d9c8:	0001a6d0 	.word	0x0001a6d0

0000d9cc <z_unpend_first_thread>:
{
    d9cc:	b580      	push	{r7, lr}
    d9ce:	b08c      	sub	sp, #48	; 0x30
    d9d0:	af00      	add	r7, sp, #0
    d9d2:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = NULL;
    d9d4:	2300      	movs	r3, #0
    d9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	LOCKED(&sched_spinlock) {
    d9d8:	2300      	movs	r3, #0
    d9da:	617b      	str	r3, [r7, #20]
    d9dc:	4b33      	ldr	r3, [pc, #204]	; (daac <z_unpend_first_thread+0xe0>)
    d9de:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
    d9e0:	f04f 0320 	mov.w	r3, #32
    d9e4:	f3ef 8211 	mrs	r2, BASEPRI
    d9e8:	f383 8811 	msr	BASEPRI, r3
    d9ec:	f3bf 8f6f 	isb	sy
    d9f0:	627a      	str	r2, [r7, #36]	; 0x24
    d9f2:	623b      	str	r3, [r7, #32]
	return key;
    d9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	k.key = arch_irq_lock();
    d9f6:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    d9f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    d9fa:	f7fd ffa3 	bl	b944 <z_spin_lock_valid>
    d9fe:	4603      	mov	r3, r0
    da00:	f083 0301 	eor.w	r3, r3, #1
    da04:	b2db      	uxtb	r3, r3
    da06:	2b00      	cmp	r3, #0
    da08:	d00d      	beq.n	da26 <z_unpend_first_thread+0x5a>
    da0a:	2381      	movs	r3, #129	; 0x81
    da0c:	4a28      	ldr	r2, [pc, #160]	; (dab0 <z_unpend_first_thread+0xe4>)
    da0e:	4929      	ldr	r1, [pc, #164]	; (dab4 <z_unpend_first_thread+0xe8>)
    da10:	4829      	ldr	r0, [pc, #164]	; (dab8 <z_unpend_first_thread+0xec>)
    da12:	f002 f92f 	bl	fc74 <printk>
    da16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    da18:	4828      	ldr	r0, [pc, #160]	; (dabc <z_unpend_first_thread+0xf0>)
    da1a:	f002 f92b 	bl	fc74 <printk>
    da1e:	2181      	movs	r1, #129	; 0x81
    da20:	4823      	ldr	r0, [pc, #140]	; (dab0 <z_unpend_first_thread+0xe4>)
    da22:	f002 fd83 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    da26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    da28:	f7fd ffc4 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    da2c:	68bb      	ldr	r3, [r7, #8]
    da2e:	613b      	str	r3, [r7, #16]
    da30:	e033      	b.n	da9a <z_unpend_first_thread+0xce>
		thread = _priq_wait_best(&wait_q->waitq);
    da32:	687b      	ldr	r3, [r7, #4]
    da34:	4618      	mov	r0, r3
    da36:	f008 ffc9 	bl	169cc <z_priq_dumb_best>
    da3a:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (thread != NULL) {
    da3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    da3e:	2b00      	cmp	r3, #0
    da40:	d005      	beq.n	da4e <z_unpend_first_thread+0x82>
			unpend_thread_no_timeout(thread);
    da42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    da44:	f008 ff6b 	bl	1691e <unpend_thread_no_timeout>
			(void)z_abort_thread_timeout(thread);
    da48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    da4a:	f008 fdd1 	bl	165f0 <z_abort_thread_timeout>
    da4e:	4b17      	ldr	r3, [pc, #92]	; (daac <z_unpend_first_thread+0xe0>)
    da50:	61fb      	str	r3, [r7, #28]
    da52:	693b      	ldr	r3, [r7, #16]
    da54:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    da56:	69f8      	ldr	r0, [r7, #28]
    da58:	f7fd ff90 	bl	b97c <z_spin_unlock_valid>
    da5c:	4603      	mov	r3, r0
    da5e:	f083 0301 	eor.w	r3, r3, #1
    da62:	b2db      	uxtb	r3, r3
    da64:	2b00      	cmp	r3, #0
    da66:	d00d      	beq.n	da84 <z_unpend_first_thread+0xb8>
    da68:	23ac      	movs	r3, #172	; 0xac
    da6a:	4a11      	ldr	r2, [pc, #68]	; (dab0 <z_unpend_first_thread+0xe4>)
    da6c:	4914      	ldr	r1, [pc, #80]	; (dac0 <z_unpend_first_thread+0xf4>)
    da6e:	4812      	ldr	r0, [pc, #72]	; (dab8 <z_unpend_first_thread+0xec>)
    da70:	f002 f900 	bl	fc74 <printk>
    da74:	69f9      	ldr	r1, [r7, #28]
    da76:	4813      	ldr	r0, [pc, #76]	; (dac4 <z_unpend_first_thread+0xf8>)
    da78:	f002 f8fc 	bl	fc74 <printk>
    da7c:	21ac      	movs	r1, #172	; 0xac
    da7e:	480c      	ldr	r0, [pc, #48]	; (dab0 <z_unpend_first_thread+0xe4>)
    da80:	f002 fd54 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    da84:	68fb      	ldr	r3, [r7, #12]
    da86:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
    da88:	69bb      	ldr	r3, [r7, #24]
    da8a:	f383 8811 	msr	BASEPRI, r3
    da8e:	f3bf 8f6f 	isb	sy
}
    da92:	bf00      	nop
}
    da94:	bf00      	nop
	LOCKED(&sched_spinlock) {
    da96:	2301      	movs	r3, #1
    da98:	617b      	str	r3, [r7, #20]
    da9a:	697b      	ldr	r3, [r7, #20]
    da9c:	2b00      	cmp	r3, #0
    da9e:	d0c8      	beq.n	da32 <z_unpend_first_thread+0x66>
	return thread;
    daa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    daa2:	4618      	mov	r0, r3
    daa4:	3730      	adds	r7, #48	; 0x30
    daa6:	46bd      	mov	sp, r7
    daa8:	bd80      	pop	{r7, pc}
    daaa:	bf00      	nop
    daac:	20000c38 	.word	0x20000c38
    dab0:	0001a660 	.word	0x0001a660
    dab4:	0001a688 	.word	0x0001a688
    dab8:	0001a5c0 	.word	0x0001a5c0
    dabc:	0001a6a0 	.word	0x0001a6a0
    dac0:	0001a6b8 	.word	0x0001a6b8
    dac4:	0001a6d0 	.word	0x0001a6d0

0000dac8 <z_set_prio>:
{
    dac8:	b580      	push	{r7, lr}
    daca:	b094      	sub	sp, #80	; 0x50
    dacc:	af00      	add	r7, sp, #0
    dace:	6078      	str	r0, [r7, #4]
    dad0:	6039      	str	r1, [r7, #0]
	bool need_sched = 0;
    dad2:	2300      	movs	r3, #0
    dad4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	LOCKED(&sched_spinlock) {
    dad8:	2300      	movs	r3, #0
    dada:	61bb      	str	r3, [r7, #24]
    dadc:	4b75      	ldr	r3, [pc, #468]	; (dcb4 <z_set_prio+0x1ec>)
    dade:	64bb      	str	r3, [r7, #72]	; 0x48
	__asm__ volatile(
    dae0:	f04f 0320 	mov.w	r3, #32
    dae4:	f3ef 8211 	mrs	r2, BASEPRI
    dae8:	f383 8811 	msr	BASEPRI, r3
    daec:	f3bf 8f6f 	isb	sy
    daf0:	647a      	str	r2, [r7, #68]	; 0x44
    daf2:	643b      	str	r3, [r7, #64]	; 0x40
	return key;
    daf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	k.key = arch_irq_lock();
    daf6:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    daf8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    dafa:	f7fd ff23 	bl	b944 <z_spin_lock_valid>
    dafe:	4603      	mov	r3, r0
    db00:	f083 0301 	eor.w	r3, r3, #1
    db04:	b2db      	uxtb	r3, r3
    db06:	2b00      	cmp	r3, #0
    db08:	d00d      	beq.n	db26 <z_set_prio+0x5e>
    db0a:	2381      	movs	r3, #129	; 0x81
    db0c:	4a6a      	ldr	r2, [pc, #424]	; (dcb8 <z_set_prio+0x1f0>)
    db0e:	496b      	ldr	r1, [pc, #428]	; (dcbc <z_set_prio+0x1f4>)
    db10:	486b      	ldr	r0, [pc, #428]	; (dcc0 <z_set_prio+0x1f8>)
    db12:	f002 f8af 	bl	fc74 <printk>
    db16:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    db18:	486a      	ldr	r0, [pc, #424]	; (dcc4 <z_set_prio+0x1fc>)
    db1a:	f002 f8ab 	bl	fc74 <printk>
    db1e:	2181      	movs	r1, #129	; 0x81
    db20:	4865      	ldr	r0, [pc, #404]	; (dcb8 <z_set_prio+0x1f0>)
    db22:	f002 fd03 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    db26:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    db28:	f7fd ff44 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    db2c:	68fb      	ldr	r3, [r7, #12]
    db2e:	617b      	str	r3, [r7, #20]
    db30:	e0b5      	b.n	dc9e <z_set_prio+0x1d6>
		need_sched = z_is_thread_ready(thread);
    db32:	6878      	ldr	r0, [r7, #4]
    db34:	f008 fdac 	bl	16690 <z_is_thread_ready>
    db38:	4603      	mov	r3, r0
    db3a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (need_sched) {
    db3e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
    db42:	2b00      	cmp	r3, #0
    db44:	f000 8081 	beq.w	dc4a <z_set_prio+0x182>
    db48:	4b5f      	ldr	r3, [pc, #380]	; (dcc8 <z_set_prio+0x200>)
    db4a:	62bb      	str	r3, [r7, #40]	; 0x28
    db4c:	687b      	ldr	r3, [r7, #4]
    db4e:	627b      	str	r3, [r7, #36]	; 0x24
	thread->base.thread_state &= ~_THREAD_QUEUED;
    db50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    db52:	7b5b      	ldrb	r3, [r3, #13]
    db54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    db58:	b2da      	uxtb	r2, r3
    db5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    db5c:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
    db5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    db60:	f008 fea7 	bl	168b2 <should_queue_thread>
    db64:	4603      	mov	r3, r0
    db66:	2b00      	cmp	r3, #0
    db68:	d003      	beq.n	db72 <z_set_prio+0xaa>
		_priq_run_remove(pq, thread);
    db6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    db6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    db6e:	f000 fa9b 	bl	e0a8 <z_priq_dumb_remove>
}
    db72:	bf00      	nop
				thread->base.prio = prio;
    db74:	683b      	ldr	r3, [r7, #0]
    db76:	b25a      	sxtb	r2, r3
    db78:	687b      	ldr	r3, [r7, #4]
    db7a:	739a      	strb	r2, [r3, #14]
    db7c:	4b52      	ldr	r3, [pc, #328]	; (dcc8 <z_set_prio+0x200>)
    db7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    db80:	687b      	ldr	r3, [r7, #4]
    db82:	63bb      	str	r3, [r7, #56]	; 0x38
	thread->base.thread_state |= _THREAD_QUEUED;
    db84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    db86:	7b5b      	ldrb	r3, [r3, #13]
    db88:	f063 037f 	orn	r3, r3, #127	; 0x7f
    db8c:	b2da      	uxtb	r2, r3
    db8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    db90:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
    db92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    db94:	f008 fe8d 	bl	168b2 <should_queue_thread>
    db98:	4603      	mov	r3, r0
    db9a:	2b00      	cmp	r3, #0
    db9c:	d050      	beq.n	dc40 <z_set_prio+0x178>
    db9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    dba0:	637b      	str	r3, [r7, #52]	; 0x34
    dba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    dba4:	633b      	str	r3, [r7, #48]	; 0x30
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    dba6:	6b38      	ldr	r0, [r7, #48]	; 0x30
    dba8:	f7fe fee4 	bl	c974 <z_is_idle_thread_object>
    dbac:	4603      	mov	r3, r0
    dbae:	2b00      	cmp	r3, #0
    dbb0:	d00b      	beq.n	dbca <z_set_prio+0x102>
    dbb2:	f240 33a6 	movw	r3, #934	; 0x3a6
    dbb6:	4a45      	ldr	r2, [pc, #276]	; (dccc <z_set_prio+0x204>)
    dbb8:	4945      	ldr	r1, [pc, #276]	; (dcd0 <z_set_prio+0x208>)
    dbba:	4841      	ldr	r0, [pc, #260]	; (dcc0 <z_set_prio+0x1f8>)
    dbbc:	f002 f85a 	bl	fc74 <printk>
    dbc0:	f240 31a6 	movw	r1, #934	; 0x3a6
    dbc4:	4841      	ldr	r0, [pc, #260]	; (dccc <z_set_prio+0x204>)
    dbc6:	f002 fcb1 	bl	1052c <assert_post_action>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    dbca:	6b78      	ldr	r0, [r7, #52]	; 0x34
    dbcc:	f008 fa16 	bl	15ffc <sys_dlist_peek_head>
    dbd0:	4603      	mov	r3, r0
    dbd2:	2b00      	cmp	r3, #0
    dbd4:	d004      	beq.n	dbe0 <z_set_prio+0x118>
    dbd6:	6b78      	ldr	r0, [r7, #52]	; 0x34
    dbd8:	f008 fa10 	bl	15ffc <sys_dlist_peek_head>
    dbdc:	4603      	mov	r3, r0
    dbde:	e000      	b.n	dbe2 <z_set_prio+0x11a>
    dbe0:	2300      	movs	r3, #0
    dbe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dbe4:	e024      	b.n	dc30 <z_set_prio+0x168>
		if (z_sched_prio_cmp(thread, t) > 0) {
    dbe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    dbe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
    dbea:	f008 fe47 	bl	1687c <z_sched_prio_cmp>
    dbee:	4603      	mov	r3, r0
    dbf0:	2b00      	cmp	r3, #0
    dbf2:	dd07      	ble.n	dc04 <z_set_prio+0x13c>
			sys_dlist_insert(&t->base.qnode_dlist,
    dbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dbf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    dbf8:	4611      	mov	r1, r2
    dbfa:	4618      	mov	r0, r3
    dbfc:	f008 fa4f 	bl	1609e <sys_dlist_insert>
			return;
    dc00:	bf00      	nop
}
    dc02:	e01d      	b.n	dc40 <z_set_prio+0x178>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    dc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc06:	2b00      	cmp	r3, #0
    dc08:	d010      	beq.n	dc2c <z_set_prio+0x164>
    dc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc0c:	4619      	mov	r1, r3
    dc0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
    dc10:	f008 fa19 	bl	16046 <sys_dlist_peek_next>
    dc14:	4603      	mov	r3, r0
    dc16:	2b00      	cmp	r3, #0
    dc18:	d006      	beq.n	dc28 <z_set_prio+0x160>
    dc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc1c:	4619      	mov	r1, r3
    dc1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
    dc20:	f008 fa11 	bl	16046 <sys_dlist_peek_next>
    dc24:	4603      	mov	r3, r0
    dc26:	e002      	b.n	dc2e <z_set_prio+0x166>
    dc28:	2300      	movs	r3, #0
    dc2a:	e000      	b.n	dc2e <z_set_prio+0x166>
    dc2c:	2300      	movs	r3, #0
    dc2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    dc32:	2b00      	cmp	r3, #0
    dc34:	d1d7      	bne.n	dbe6 <z_set_prio+0x11e>
	sys_dlist_append(pq, &thread->base.qnode_dlist);
    dc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    dc38:	4619      	mov	r1, r3
    dc3a:	6b78      	ldr	r0, [r7, #52]	; 0x34
    dc3c:	f008 fa16 	bl	1606c <sys_dlist_append>
}
    dc40:	bf00      	nop
			update_cache(1);
    dc42:	2001      	movs	r0, #1
    dc44:	f7ff f934 	bl	ceb0 <update_cache>
    dc48:	e003      	b.n	dc52 <z_set_prio+0x18a>
			thread->base.prio = prio;
    dc4a:	683b      	ldr	r3, [r7, #0]
    dc4c:	b25a      	sxtb	r2, r3
    dc4e:	687b      	ldr	r3, [r7, #4]
    dc50:	739a      	strb	r2, [r3, #14]
    dc52:	4b18      	ldr	r3, [pc, #96]	; (dcb4 <z_set_prio+0x1ec>)
    dc54:	623b      	str	r3, [r7, #32]
    dc56:	697b      	ldr	r3, [r7, #20]
    dc58:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dc5a:	6a38      	ldr	r0, [r7, #32]
    dc5c:	f7fd fe8e 	bl	b97c <z_spin_unlock_valid>
    dc60:	4603      	mov	r3, r0
    dc62:	f083 0301 	eor.w	r3, r3, #1
    dc66:	b2db      	uxtb	r3, r3
    dc68:	2b00      	cmp	r3, #0
    dc6a:	d00d      	beq.n	dc88 <z_set_prio+0x1c0>
    dc6c:	23ac      	movs	r3, #172	; 0xac
    dc6e:	4a12      	ldr	r2, [pc, #72]	; (dcb8 <z_set_prio+0x1f0>)
    dc70:	4918      	ldr	r1, [pc, #96]	; (dcd4 <z_set_prio+0x20c>)
    dc72:	4813      	ldr	r0, [pc, #76]	; (dcc0 <z_set_prio+0x1f8>)
    dc74:	f001 fffe 	bl	fc74 <printk>
    dc78:	6a39      	ldr	r1, [r7, #32]
    dc7a:	4817      	ldr	r0, [pc, #92]	; (dcd8 <z_set_prio+0x210>)
    dc7c:	f001 fffa 	bl	fc74 <printk>
    dc80:	21ac      	movs	r1, #172	; 0xac
    dc82:	480d      	ldr	r0, [pc, #52]	; (dcb8 <z_set_prio+0x1f0>)
    dc84:	f002 fc52 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    dc88:	693b      	ldr	r3, [r7, #16]
    dc8a:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    dc8c:	69fb      	ldr	r3, [r7, #28]
    dc8e:	f383 8811 	msr	BASEPRI, r3
    dc92:	f3bf 8f6f 	isb	sy
}
    dc96:	bf00      	nop
}
    dc98:	bf00      	nop
	LOCKED(&sched_spinlock) {
    dc9a:	2301      	movs	r3, #1
    dc9c:	61bb      	str	r3, [r7, #24]
    dc9e:	69bb      	ldr	r3, [r7, #24]
    dca0:	2b00      	cmp	r3, #0
    dca2:	f43f af46 	beq.w	db32 <z_set_prio+0x6a>
	return need_sched;
    dca6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
    dcaa:	4618      	mov	r0, r3
    dcac:	3750      	adds	r7, #80	; 0x50
    dcae:	46bd      	mov	sp, r7
    dcb0:	bd80      	pop	{r7, pc}
    dcb2:	bf00      	nop
    dcb4:	20000c38 	.word	0x20000c38
    dcb8:	0001a660 	.word	0x0001a660
    dcbc:	0001a688 	.word	0x0001a688
    dcc0:	0001a5c0 	.word	0x0001a5c0
    dcc4:	0001a6a0 	.word	0x0001a6a0
    dcc8:	20000c28 	.word	0x20000c28
    dccc:	0001a618 	.word	0x0001a618
    dcd0:	0001a63c 	.word	0x0001a63c
    dcd4:	0001a6b8 	.word	0x0001a6b8
    dcd8:	0001a6d0 	.word	0x0001a6d0

0000dcdc <need_swap>:
{
    dcdc:	b480      	push	{r7}
    dcde:	b083      	sub	sp, #12
    dce0:	af00      	add	r7, sp, #0
	new_thread = _kernel.ready_q.cache;
    dce2:	4b08      	ldr	r3, [pc, #32]	; (dd04 <need_swap+0x28>)
    dce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    dce6:	607b      	str	r3, [r7, #4]
	return new_thread != _current;
    dce8:	4b06      	ldr	r3, [pc, #24]	; (dd04 <need_swap+0x28>)
    dcea:	689b      	ldr	r3, [r3, #8]
    dcec:	687a      	ldr	r2, [r7, #4]
    dcee:	429a      	cmp	r2, r3
    dcf0:	bf14      	ite	ne
    dcf2:	2301      	movne	r3, #1
    dcf4:	2300      	moveq	r3, #0
    dcf6:	b2db      	uxtb	r3, r3
}
    dcf8:	4618      	mov	r0, r3
    dcfa:	370c      	adds	r7, #12
    dcfc:	46bd      	mov	sp, r7
    dcfe:	bc80      	pop	{r7}
    dd00:	4770      	bx	lr
    dd02:	bf00      	nop
    dd04:	20000c00 	.word	0x20000c00

0000dd08 <z_reschedule>:
{
    dd08:	b580      	push	{r7, lr}
    dd0a:	b088      	sub	sp, #32
    dd0c:	af00      	add	r7, sp, #0
    dd0e:	6078      	str	r0, [r7, #4]
    dd10:	6039      	str	r1, [r7, #0]
	if (resched(key.key) && need_swap()) {
    dd12:	683b      	ldr	r3, [r7, #0]
    dd14:	4618      	mov	r0, r3
    dd16:	f008 fe18 	bl	1694a <resched>
    dd1a:	4603      	mov	r3, r0
    dd1c:	2b00      	cmp	r3, #0
    dd1e:	d027      	beq.n	dd70 <z_reschedule+0x68>
    dd20:	f7ff ffdc 	bl	dcdc <need_swap>
    dd24:	4603      	mov	r3, r0
    dd26:	2b00      	cmp	r3, #0
    dd28:	d022      	beq.n	dd70 <z_reschedule+0x68>
    dd2a:	687b      	ldr	r3, [r7, #4]
    dd2c:	61fb      	str	r3, [r7, #28]
    dd2e:	683b      	ldr	r3, [r7, #0]
    dd30:	60bb      	str	r3, [r7, #8]
    dd32:	69fb      	ldr	r3, [r7, #28]
    dd34:	61bb      	str	r3, [r7, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dd36:	69b8      	ldr	r0, [r7, #24]
    dd38:	f7fd fe20 	bl	b97c <z_spin_unlock_valid>
    dd3c:	4603      	mov	r3, r0
    dd3e:	f083 0301 	eor.w	r3, r3, #1
    dd42:	b2db      	uxtb	r3, r3
    dd44:	2b00      	cmp	r3, #0
    dd46:	d00d      	beq.n	dd64 <z_reschedule+0x5c>
    dd48:	23c3      	movs	r3, #195	; 0xc3
    dd4a:	4a1d      	ldr	r2, [pc, #116]	; (ddc0 <z_reschedule+0xb8>)
    dd4c:	491d      	ldr	r1, [pc, #116]	; (ddc4 <z_reschedule+0xbc>)
    dd4e:	481e      	ldr	r0, [pc, #120]	; (ddc8 <z_reschedule+0xc0>)
    dd50:	f001 ff90 	bl	fc74 <printk>
    dd54:	69b9      	ldr	r1, [r7, #24]
    dd56:	481d      	ldr	r0, [pc, #116]	; (ddcc <z_reschedule+0xc4>)
    dd58:	f001 ff8c 	bl	fc74 <printk>
    dd5c:	21c3      	movs	r1, #195	; 0xc3
    dd5e:	4818      	ldr	r0, [pc, #96]	; (ddc0 <z_reschedule+0xb8>)
    dd60:	f002 fbe4 	bl	1052c <assert_post_action>
}
    dd64:	bf00      	nop
    dd66:	68bb      	ldr	r3, [r7, #8]
    dd68:	4618      	mov	r0, r3
    dd6a:	f008 fd60 	bl	1682e <z_swap_irqlock>
		z_swap(lock, key);
    dd6e:	e023      	b.n	ddb8 <z_reschedule+0xb0>
    dd70:	687b      	ldr	r3, [r7, #4]
    dd72:	617b      	str	r3, [r7, #20]
    dd74:	683b      	ldr	r3, [r7, #0]
    dd76:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    dd78:	6978      	ldr	r0, [r7, #20]
    dd7a:	f7fd fdff 	bl	b97c <z_spin_unlock_valid>
    dd7e:	4603      	mov	r3, r0
    dd80:	f083 0301 	eor.w	r3, r3, #1
    dd84:	b2db      	uxtb	r3, r3
    dd86:	2b00      	cmp	r3, #0
    dd88:	d00d      	beq.n	dda6 <z_reschedule+0x9e>
    dd8a:	23ac      	movs	r3, #172	; 0xac
    dd8c:	4a0c      	ldr	r2, [pc, #48]	; (ddc0 <z_reschedule+0xb8>)
    dd8e:	490d      	ldr	r1, [pc, #52]	; (ddc4 <z_reschedule+0xbc>)
    dd90:	480d      	ldr	r0, [pc, #52]	; (ddc8 <z_reschedule+0xc0>)
    dd92:	f001 ff6f 	bl	fc74 <printk>
    dd96:	6979      	ldr	r1, [r7, #20]
    dd98:	480c      	ldr	r0, [pc, #48]	; (ddcc <z_reschedule+0xc4>)
    dd9a:	f001 ff6b 	bl	fc74 <printk>
    dd9e:	21ac      	movs	r1, #172	; 0xac
    dda0:	4807      	ldr	r0, [pc, #28]	; (ddc0 <z_reschedule+0xb8>)
    dda2:	f002 fbc3 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    dda6:	68fb      	ldr	r3, [r7, #12]
    dda8:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
    ddaa:	693b      	ldr	r3, [r7, #16]
    ddac:	f383 8811 	msr	BASEPRI, r3
    ddb0:	f3bf 8f6f 	isb	sy
}
    ddb4:	bf00      	nop
}
    ddb6:	bf00      	nop
}
    ddb8:	bf00      	nop
    ddba:	3720      	adds	r7, #32
    ddbc:	46bd      	mov	sp, r7
    ddbe:	bd80      	pop	{r7, pc}
    ddc0:	0001a660 	.word	0x0001a660
    ddc4:	0001a6b8 	.word	0x0001a6b8
    ddc8:	0001a5c0 	.word	0x0001a5c0
    ddcc:	0001a6d0 	.word	0x0001a6d0

0000ddd0 <k_sched_lock>:
{
    ddd0:	b580      	push	{r7, lr}
    ddd2:	b08a      	sub	sp, #40	; 0x28
    ddd4:	af00      	add	r7, sp, #0
	LOCKED(&sched_spinlock) {
    ddd6:	2300      	movs	r3, #0
    ddd8:	613b      	str	r3, [r7, #16]
    ddda:	4b2d      	ldr	r3, [pc, #180]	; (de90 <k_sched_lock+0xc0>)
    dddc:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
    ddde:	f04f 0320 	mov.w	r3, #32
    dde2:	f3ef 8211 	mrs	r2, BASEPRI
    dde6:	f383 8811 	msr	BASEPRI, r3
    ddea:	f3bf 8f6f 	isb	sy
    ddee:	623a      	str	r2, [r7, #32]
    ddf0:	61fb      	str	r3, [r7, #28]
	return key;
    ddf2:	6a3b      	ldr	r3, [r7, #32]
	k.key = arch_irq_lock();
    ddf4:	607b      	str	r3, [r7, #4]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ddf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    ddf8:	f7fd fda4 	bl	b944 <z_spin_lock_valid>
    ddfc:	4603      	mov	r3, r0
    ddfe:	f083 0301 	eor.w	r3, r3, #1
    de02:	b2db      	uxtb	r3, r3
    de04:	2b00      	cmp	r3, #0
    de06:	d00d      	beq.n	de24 <k_sched_lock+0x54>
    de08:	2381      	movs	r3, #129	; 0x81
    de0a:	4a22      	ldr	r2, [pc, #136]	; (de94 <k_sched_lock+0xc4>)
    de0c:	4922      	ldr	r1, [pc, #136]	; (de98 <k_sched_lock+0xc8>)
    de0e:	4823      	ldr	r0, [pc, #140]	; (de9c <k_sched_lock+0xcc>)
    de10:	f001 ff30 	bl	fc74 <printk>
    de14:	6a79      	ldr	r1, [r7, #36]	; 0x24
    de16:	4822      	ldr	r0, [pc, #136]	; (dea0 <k_sched_lock+0xd0>)
    de18:	f001 ff2c 	bl	fc74 <printk>
    de1c:	2181      	movs	r1, #129	; 0x81
    de1e:	481d      	ldr	r0, [pc, #116]	; (de94 <k_sched_lock+0xc4>)
    de20:	f002 fb84 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    de24:	6a78      	ldr	r0, [r7, #36]	; 0x24
    de26:	f7fd fdc5 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    de2a:	687b      	ldr	r3, [r7, #4]
    de2c:	60fb      	str	r3, [r7, #12]
    de2e:	e027      	b.n	de80 <k_sched_lock+0xb0>
		z_sched_lock();
    de30:	f7fe fdb2 	bl	c998 <z_sched_lock>
    de34:	4b16      	ldr	r3, [pc, #88]	; (de90 <k_sched_lock+0xc0>)
    de36:	61bb      	str	r3, [r7, #24]
    de38:	68fb      	ldr	r3, [r7, #12]
    de3a:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    de3c:	69b8      	ldr	r0, [r7, #24]
    de3e:	f7fd fd9d 	bl	b97c <z_spin_unlock_valid>
    de42:	4603      	mov	r3, r0
    de44:	f083 0301 	eor.w	r3, r3, #1
    de48:	b2db      	uxtb	r3, r3
    de4a:	2b00      	cmp	r3, #0
    de4c:	d00d      	beq.n	de6a <k_sched_lock+0x9a>
    de4e:	23ac      	movs	r3, #172	; 0xac
    de50:	4a10      	ldr	r2, [pc, #64]	; (de94 <k_sched_lock+0xc4>)
    de52:	4914      	ldr	r1, [pc, #80]	; (dea4 <k_sched_lock+0xd4>)
    de54:	4811      	ldr	r0, [pc, #68]	; (de9c <k_sched_lock+0xcc>)
    de56:	f001 ff0d 	bl	fc74 <printk>
    de5a:	69b9      	ldr	r1, [r7, #24]
    de5c:	4812      	ldr	r0, [pc, #72]	; (dea8 <k_sched_lock+0xd8>)
    de5e:	f001 ff09 	bl	fc74 <printk>
    de62:	21ac      	movs	r1, #172	; 0xac
    de64:	480b      	ldr	r0, [pc, #44]	; (de94 <k_sched_lock+0xc4>)
    de66:	f002 fb61 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    de6a:	68bb      	ldr	r3, [r7, #8]
    de6c:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
    de6e:	697b      	ldr	r3, [r7, #20]
    de70:	f383 8811 	msr	BASEPRI, r3
    de74:	f3bf 8f6f 	isb	sy
}
    de78:	bf00      	nop
}
    de7a:	bf00      	nop
	LOCKED(&sched_spinlock) {
    de7c:	2301      	movs	r3, #1
    de7e:	613b      	str	r3, [r7, #16]
    de80:	693b      	ldr	r3, [r7, #16]
    de82:	2b00      	cmp	r3, #0
    de84:	d0d4      	beq.n	de30 <k_sched_lock+0x60>
}
    de86:	bf00      	nop
    de88:	bf00      	nop
    de8a:	3728      	adds	r7, #40	; 0x28
    de8c:	46bd      	mov	sp, r7
    de8e:	bd80      	pop	{r7, pc}
    de90:	20000c38 	.word	0x20000c38
    de94:	0001a660 	.word	0x0001a660
    de98:	0001a688 	.word	0x0001a688
    de9c:	0001a5c0 	.word	0x0001a5c0
    dea0:	0001a6a0 	.word	0x0001a6a0
    dea4:	0001a6b8 	.word	0x0001a6b8
    dea8:	0001a6d0 	.word	0x0001a6d0

0000deac <k_sched_unlock>:
{
    deac:	b580      	push	{r7, lr}
    deae:	b090      	sub	sp, #64	; 0x40
    deb0:	af02      	add	r7, sp, #8
	LOCKED(&sched_spinlock) {
    deb2:	2300      	movs	r3, #0
    deb4:	61bb      	str	r3, [r7, #24]
    deb6:	4b6d      	ldr	r3, [pc, #436]	; (e06c <k_sched_unlock+0x1c0>)
    deb8:	633b      	str	r3, [r7, #48]	; 0x30
	__asm__ volatile(
    deba:	f04f 0320 	mov.w	r3, #32
    debe:	f3ef 8211 	mrs	r2, BASEPRI
    dec2:	f383 8811 	msr	BASEPRI, r3
    dec6:	f3bf 8f6f 	isb	sy
    deca:	62fa      	str	r2, [r7, #44]	; 0x2c
    decc:	62bb      	str	r3, [r7, #40]	; 0x28
	return key;
    dece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	k.key = arch_irq_lock();
    ded0:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ded2:	6b38      	ldr	r0, [r7, #48]	; 0x30
    ded4:	f7fd fd36 	bl	b944 <z_spin_lock_valid>
    ded8:	4603      	mov	r3, r0
    deda:	f083 0301 	eor.w	r3, r3, #1
    dede:	b2db      	uxtb	r3, r3
    dee0:	2b00      	cmp	r3, #0
    dee2:	d00d      	beq.n	df00 <k_sched_unlock+0x54>
    dee4:	2381      	movs	r3, #129	; 0x81
    dee6:	4a62      	ldr	r2, [pc, #392]	; (e070 <k_sched_unlock+0x1c4>)
    dee8:	4962      	ldr	r1, [pc, #392]	; (e074 <k_sched_unlock+0x1c8>)
    deea:	4863      	ldr	r0, [pc, #396]	; (e078 <k_sched_unlock+0x1cc>)
    deec:	f001 fec2 	bl	fc74 <printk>
    def0:	6b39      	ldr	r1, [r7, #48]	; 0x30
    def2:	4862      	ldr	r0, [pc, #392]	; (e07c <k_sched_unlock+0x1d0>)
    def4:	f001 febe 	bl	fc74 <printk>
    def8:	2181      	movs	r1, #129	; 0x81
    defa:	485d      	ldr	r0, [pc, #372]	; (e070 <k_sched_unlock+0x1c4>)
    defc:	f002 fb16 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    df00:	6b38      	ldr	r0, [r7, #48]	; 0x30
    df02:	f7fd fd57 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    df06:	68fb      	ldr	r3, [r7, #12]
    df08:	617b      	str	r3, [r7, #20]
    df0a:	e05c      	b.n	dfc6 <k_sched_unlock+0x11a>
		__ASSERT(_current->base.sched_locked != 0U, "");
    df0c:	4b5c      	ldr	r3, [pc, #368]	; (e080 <k_sched_unlock+0x1d4>)
    df0e:	689b      	ldr	r3, [r3, #8]
    df10:	7bdb      	ldrb	r3, [r3, #15]
    df12:	2b00      	cmp	r3, #0
    df14:	d10e      	bne.n	df34 <k_sched_unlock+0x88>
    df16:	f44f 7351 	mov.w	r3, #836	; 0x344
    df1a:	4a5a      	ldr	r2, [pc, #360]	; (e084 <k_sched_unlock+0x1d8>)
    df1c:	495a      	ldr	r1, [pc, #360]	; (e088 <k_sched_unlock+0x1dc>)
    df1e:	4856      	ldr	r0, [pc, #344]	; (e078 <k_sched_unlock+0x1cc>)
    df20:	f001 fea8 	bl	fc74 <printk>
    df24:	4859      	ldr	r0, [pc, #356]	; (e08c <k_sched_unlock+0x1e0>)
    df26:	f001 fea5 	bl	fc74 <printk>
    df2a:	f44f 7151 	mov.w	r1, #836	; 0x344
    df2e:	4855      	ldr	r0, [pc, #340]	; (e084 <k_sched_unlock+0x1d8>)
    df30:	f002 fafc 	bl	1052c <assert_post_action>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    df34:	f3ef 8305 	mrs	r3, IPSR
    df38:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
    df3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    df3c:	2b00      	cmp	r3, #0
    df3e:	bf14      	ite	ne
    df40:	2301      	movne	r3, #1
    df42:	2300      	moveq	r3, #0
    df44:	b2db      	uxtb	r3, r3
		__ASSERT(!arch_is_in_isr(), "");
    df46:	2b00      	cmp	r3, #0
    df48:	d00e      	beq.n	df68 <k_sched_unlock+0xbc>
    df4a:	f240 3345 	movw	r3, #837	; 0x345
    df4e:	4a4d      	ldr	r2, [pc, #308]	; (e084 <k_sched_unlock+0x1d8>)
    df50:	494f      	ldr	r1, [pc, #316]	; (e090 <k_sched_unlock+0x1e4>)
    df52:	4849      	ldr	r0, [pc, #292]	; (e078 <k_sched_unlock+0x1cc>)
    df54:	f001 fe8e 	bl	fc74 <printk>
    df58:	484c      	ldr	r0, [pc, #304]	; (e08c <k_sched_unlock+0x1e0>)
    df5a:	f001 fe8b 	bl	fc74 <printk>
    df5e:	f240 3145 	movw	r1, #837	; 0x345
    df62:	4848      	ldr	r0, [pc, #288]	; (e084 <k_sched_unlock+0x1d8>)
    df64:	f002 fae2 	bl	1052c <assert_post_action>
		++_current->base.sched_locked;
    df68:	4b45      	ldr	r3, [pc, #276]	; (e080 <k_sched_unlock+0x1d4>)
    df6a:	689b      	ldr	r3, [r3, #8]
    df6c:	7bda      	ldrb	r2, [r3, #15]
    df6e:	3201      	adds	r2, #1
    df70:	b2d2      	uxtb	r2, r2
    df72:	73da      	strb	r2, [r3, #15]
		update_cache(0);
    df74:	2000      	movs	r0, #0
    df76:	f7fe ff9b 	bl	ceb0 <update_cache>
    df7a:	4b3c      	ldr	r3, [pc, #240]	; (e06c <k_sched_unlock+0x1c0>)
    df7c:	623b      	str	r3, [r7, #32]
    df7e:	697b      	ldr	r3, [r7, #20]
    df80:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    df82:	6a38      	ldr	r0, [r7, #32]
    df84:	f7fd fcfa 	bl	b97c <z_spin_unlock_valid>
    df88:	4603      	mov	r3, r0
    df8a:	f083 0301 	eor.w	r3, r3, #1
    df8e:	b2db      	uxtb	r3, r3
    df90:	2b00      	cmp	r3, #0
    df92:	d00d      	beq.n	dfb0 <k_sched_unlock+0x104>
    df94:	23ac      	movs	r3, #172	; 0xac
    df96:	4a36      	ldr	r2, [pc, #216]	; (e070 <k_sched_unlock+0x1c4>)
    df98:	493e      	ldr	r1, [pc, #248]	; (e094 <k_sched_unlock+0x1e8>)
    df9a:	4837      	ldr	r0, [pc, #220]	; (e078 <k_sched_unlock+0x1cc>)
    df9c:	f001 fe6a 	bl	fc74 <printk>
    dfa0:	6a39      	ldr	r1, [r7, #32]
    dfa2:	483d      	ldr	r0, [pc, #244]	; (e098 <k_sched_unlock+0x1ec>)
    dfa4:	f001 fe66 	bl	fc74 <printk>
    dfa8:	21ac      	movs	r1, #172	; 0xac
    dfaa:	4831      	ldr	r0, [pc, #196]	; (e070 <k_sched_unlock+0x1c4>)
    dfac:	f002 fabe 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    dfb0:	693b      	ldr	r3, [r7, #16]
    dfb2:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    dfb4:	69fb      	ldr	r3, [r7, #28]
    dfb6:	f383 8811 	msr	BASEPRI, r3
    dfba:	f3bf 8f6f 	isb	sy
}
    dfbe:	bf00      	nop
}
    dfc0:	bf00      	nop
	LOCKED(&sched_spinlock) {
    dfc2:	2301      	movs	r3, #1
    dfc4:	61bb      	str	r3, [r7, #24]
    dfc6:	69bb      	ldr	r3, [r7, #24]
    dfc8:	2b00      	cmp	r3, #0
    dfca:	d09f      	beq.n	df0c <k_sched_unlock+0x60>
	LOG_DBG("scheduler unlocked (%p:%d)",
    dfcc:	2303      	movs	r3, #3
    dfce:	2b03      	cmp	r3, #3
    dfd0:	d945      	bls.n	e05e <k_sched_unlock+0x1b2>
    dfd2:	f008 f894 	bl	160fe <k_is_user_context>
    dfd6:	4603      	mov	r3, r0
    dfd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    dfdc:	2300      	movs	r3, #0
    dfde:	60bb      	str	r3, [r7, #8]
    dfe0:	2303      	movs	r3, #3
    dfe2:	2b00      	cmp	r3, #0
    dfe4:	d007      	beq.n	dff6 <k_sched_unlock+0x14a>
    dfe6:	4b2d      	ldr	r3, [pc, #180]	; (e09c <k_sched_unlock+0x1f0>)
    dfe8:	681b      	ldr	r3, [r3, #0]
    dfea:	4618      	mov	r0, r3
    dfec:	f7fe fd18 	bl	ca20 <log_const_source_id>
    dff0:	4603      	mov	r3, r0
    dff2:	b29b      	uxth	r3, r3
    dff4:	e000      	b.n	dff8 <k_sched_unlock+0x14c>
    dff6:	2300      	movs	r3, #0
    dff8:	86bb      	strh	r3, [r7, #52]	; 0x34
    dffa:	793b      	ldrb	r3, [r7, #4]
    dffc:	2204      	movs	r2, #4
    dffe:	f362 0302 	bfi	r3, r2, #0, #3
    e002:	713b      	strb	r3, [r7, #4]
    e004:	793b      	ldrb	r3, [r7, #4]
    e006:	f36f 03c5 	bfc	r3, #3, #3
    e00a:	713b      	strb	r3, [r7, #4]
    e00c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
    e00e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    e012:	b29a      	uxth	r2, r3
    e014:	88bb      	ldrh	r3, [r7, #4]
    e016:	f362 138f 	bfi	r3, r2, #6, #10
    e01a:	80bb      	strh	r3, [r7, #4]
    e01c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    e020:	2b00      	cmp	r3, #0
    e022:	d00c      	beq.n	e03e <k_sched_unlock+0x192>
    e024:	4b16      	ldr	r3, [pc, #88]	; (e080 <k_sched_unlock+0x1d4>)
    e026:	689a      	ldr	r2, [r3, #8]
    e028:	4b15      	ldr	r3, [pc, #84]	; (e080 <k_sched_unlock+0x1d4>)
    e02a:	689b      	ldr	r3, [r3, #8]
    e02c:	7bdb      	ldrb	r3, [r3, #15]
    e02e:	9300      	str	r3, [sp, #0]
    e030:	4613      	mov	r3, r2
    e032:	4a1b      	ldr	r2, [pc, #108]	; (e0a0 <k_sched_unlock+0x1f4>)
    e034:	491b      	ldr	r1, [pc, #108]	; (e0a4 <k_sched_unlock+0x1f8>)
    e036:	88b8      	ldrh	r0, [r7, #4]
    e038:	f7f4 fe20 	bl	2c7c <log_from_user>
    e03c:	e010      	b.n	e060 <k_sched_unlock+0x1b4>
    e03e:	4918      	ldr	r1, [pc, #96]	; (e0a0 <k_sched_unlock+0x1f4>)
    e040:	4b0f      	ldr	r3, [pc, #60]	; (e080 <k_sched_unlock+0x1d4>)
    e042:	689b      	ldr	r3, [r3, #8]
    e044:	461a      	mov	r2, r3
    e046:	4b0e      	ldr	r3, [pc, #56]	; (e080 <k_sched_unlock+0x1d4>)
    e048:	689b      	ldr	r3, [r3, #8]
    e04a:	7bdb      	ldrb	r3, [r3, #15]
    e04c:	4618      	mov	r0, r3
    e04e:	88bb      	ldrh	r3, [r7, #4]
    e050:	f8ad 3000 	strh.w	r3, [sp]
    e054:	4603      	mov	r3, r0
    e056:	4813      	ldr	r0, [pc, #76]	; (e0a4 <k_sched_unlock+0x1f8>)
    e058:	f002 ff4e 	bl	10ef8 <log_3>
    e05c:	e000      	b.n	e060 <k_sched_unlock+0x1b4>
    e05e:	bf00      	nop
	z_reschedule_unlocked();
    e060:	f008 fad4 	bl	1660c <z_reschedule_unlocked>
}
    e064:	bf00      	nop
    e066:	3738      	adds	r7, #56	; 0x38
    e068:	46bd      	mov	sp, r7
    e06a:	bd80      	pop	{r7, pc}
    e06c:	20000c38 	.word	0x20000c38
    e070:	0001a660 	.word	0x0001a660
    e074:	0001a688 	.word	0x0001a688
    e078:	0001a5c0 	.word	0x0001a5c0
    e07c:	0001a6a0 	.word	0x0001a6a0
    e080:	20000c00 	.word	0x20000c00
    e084:	0001a618 	.word	0x0001a618
    e088:	0001a768 	.word	0x0001a768
    e08c:	0001a5e0 	.word	0x0001a5e0
    e090:	0001a5ac 	.word	0x0001a5ac
    e094:	0001a6b8 	.word	0x0001a6b8
    e098:	0001a6d0 	.word	0x0001a6d0
    e09c:	20000174 	.word	0x20000174
    e0a0:	0001adc0 	.word	0x0001adc0
    e0a4:	0001a79c 	.word	0x0001a79c

0000e0a8 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    e0a8:	b580      	push	{r7, lr}
    e0aa:	b082      	sub	sp, #8
    e0ac:	af00      	add	r7, sp, #0
    e0ae:	6078      	str	r0, [r7, #4]
    e0b0:	6039      	str	r1, [r7, #0]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    e0b2:	6838      	ldr	r0, [r7, #0]
    e0b4:	f7fe fc5e 	bl	c974 <z_is_idle_thread_object>
    e0b8:	4603      	mov	r3, r0
    e0ba:	2b00      	cmp	r3, #0
    e0bc:	d00b      	beq.n	e0d6 <z_priq_dumb_remove+0x2e>
    e0be:	f240 33b5 	movw	r3, #949	; 0x3b5
    e0c2:	4a09      	ldr	r2, [pc, #36]	; (e0e8 <z_priq_dumb_remove+0x40>)
    e0c4:	4909      	ldr	r1, [pc, #36]	; (e0ec <z_priq_dumb_remove+0x44>)
    e0c6:	480a      	ldr	r0, [pc, #40]	; (e0f0 <z_priq_dumb_remove+0x48>)
    e0c8:	f001 fdd4 	bl	fc74 <printk>
    e0cc:	f240 31b5 	movw	r1, #949	; 0x3b5
    e0d0:	4805      	ldr	r0, [pc, #20]	; (e0e8 <z_priq_dumb_remove+0x40>)
    e0d2:	f002 fa2b 	bl	1052c <assert_post_action>

	sys_dlist_remove(&thread->base.qnode_dlist);
    e0d6:	683b      	ldr	r3, [r7, #0]
    e0d8:	4618      	mov	r0, r3
    e0da:	f007 fff9 	bl	160d0 <sys_dlist_remove>
}
    e0de:	bf00      	nop
    e0e0:	3708      	adds	r7, #8
    e0e2:	46bd      	mov	sp, r7
    e0e4:	bd80      	pop	{r7, pc}
    e0e6:	bf00      	nop
    e0e8:	0001a618 	.word	0x0001a618
    e0ec:	0001a63c 	.word	0x0001a63c
    e0f0:	0001a5c0 	.word	0x0001a5c0

0000e0f4 <z_sched_init>:

	return need_sched;
}

void z_sched_init(void)
{
    e0f4:	b580      	push	{r7, lr}
    e0f6:	af00      	add	r7, sp, #0
#ifdef CONFIG_SCHED_DUMB
	sys_dlist_init(&_kernel.ready_q.runq);
    e0f8:	4804      	ldr	r0, [pc, #16]	; (e10c <z_sched_init+0x18>)
    e0fa:	f007 ff40 	bl	15f7e <sys_dlist_init>
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    e0fe:	2100      	movs	r1, #0
    e100:	2000      	movs	r0, #0
    e102:	f7fe fd55 	bl	cbb0 <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
    e106:	bf00      	nop
    e108:	bd80      	pop	{r7, pc}
    e10a:	bf00      	nop
    e10c:	20000c28 	.word	0x20000c28

0000e110 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    e110:	b580      	push	{r7, lr}
    e112:	b090      	sub	sp, #64	; 0x40
    e114:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e116:	f3ef 8305 	mrs	r3, IPSR
    e11a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
    e11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e11e:	2b00      	cmp	r3, #0
    e120:	bf14      	ite	ne
    e122:	2301      	movne	r3, #1
    e124:	2300      	moveq	r3, #0
    e126:	b2db      	uxtb	r3, r3
	__ASSERT(!arch_is_in_isr(), "");
    e128:	2b00      	cmp	r3, #0
    e12a:	d00e      	beq.n	e14a <z_impl_k_yield+0x3a>
    e12c:	f240 43a1 	movw	r3, #1185	; 0x4a1
    e130:	4a6d      	ldr	r2, [pc, #436]	; (e2e8 <z_impl_k_yield+0x1d8>)
    e132:	496e      	ldr	r1, [pc, #440]	; (e2ec <z_impl_k_yield+0x1dc>)
    e134:	486e      	ldr	r0, [pc, #440]	; (e2f0 <z_impl_k_yield+0x1e0>)
    e136:	f001 fd9d 	bl	fc74 <printk>
    e13a:	486e      	ldr	r0, [pc, #440]	; (e2f4 <z_impl_k_yield+0x1e4>)
    e13c:	f001 fd9a 	bl	fc74 <printk>
    e140:	f240 41a1 	movw	r1, #1185	; 0x4a1
    e144:	4868      	ldr	r0, [pc, #416]	; (e2e8 <z_impl_k_yield+0x1d8>)
    e146:	f002 f9f1 	bl	1052c <assert_post_action>
    e14a:	4b6b      	ldr	r3, [pc, #428]	; (e2f8 <z_impl_k_yield+0x1e8>)
    e14c:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
    e14e:	f04f 0320 	mov.w	r3, #32
    e152:	f3ef 8211 	mrs	r2, BASEPRI
    e156:	f383 8811 	msr	BASEPRI, r3
    e15a:	f3bf 8f6f 	isb	sy
    e15e:	637a      	str	r2, [r7, #52]	; 0x34
    e160:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
    e162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	k.key = arch_irq_lock();
    e164:	603b      	str	r3, [r7, #0]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e166:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    e168:	f7fd fbec 	bl	b944 <z_spin_lock_valid>
    e16c:	4603      	mov	r3, r0
    e16e:	f083 0301 	eor.w	r3, r3, #1
    e172:	b2db      	uxtb	r3, r3
    e174:	2b00      	cmp	r3, #0
    e176:	d00d      	beq.n	e194 <z_impl_k_yield+0x84>
    e178:	2381      	movs	r3, #129	; 0x81
    e17a:	4a60      	ldr	r2, [pc, #384]	; (e2fc <z_impl_k_yield+0x1ec>)
    e17c:	4960      	ldr	r1, [pc, #384]	; (e300 <z_impl_k_yield+0x1f0>)
    e17e:	485c      	ldr	r0, [pc, #368]	; (e2f0 <z_impl_k_yield+0x1e0>)
    e180:	f001 fd78 	bl	fc74 <printk>
    e184:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    e186:	485f      	ldr	r0, [pc, #380]	; (e304 <z_impl_k_yield+0x1f4>)
    e188:	f001 fd74 	bl	fc74 <printk>
    e18c:	2181      	movs	r1, #129	; 0x81
    e18e:	485b      	ldr	r0, [pc, #364]	; (e2fc <z_impl_k_yield+0x1ec>)
    e190:	f002 f9cc 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    e194:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    e196:	f7fd fc0d 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    e19a:	683b      	ldr	r3, [r7, #0]
    e19c:	60bb      	str	r3, [r7, #8]

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
    e19e:	4b5a      	ldr	r3, [pc, #360]	; (e308 <z_impl_k_yield+0x1f8>)
    e1a0:	689b      	ldr	r3, [r3, #8]
    e1a2:	4a5a      	ldr	r2, [pc, #360]	; (e30c <z_impl_k_yield+0x1fc>)
    e1a4:	613a      	str	r2, [r7, #16]
    e1a6:	60fb      	str	r3, [r7, #12]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e1a8:	68fb      	ldr	r3, [r7, #12]
    e1aa:	7b5b      	ldrb	r3, [r3, #13]
    e1ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e1b0:	b2da      	uxtb	r2, r3
    e1b2:	68fb      	ldr	r3, [r7, #12]
    e1b4:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
    e1b6:	68f8      	ldr	r0, [r7, #12]
    e1b8:	f008 fb7b 	bl	168b2 <should_queue_thread>
    e1bc:	4603      	mov	r3, r0
    e1be:	2b00      	cmp	r3, #0
    e1c0:	d003      	beq.n	e1ca <z_impl_k_yield+0xba>
		_priq_run_remove(pq, thread);
    e1c2:	68f9      	ldr	r1, [r7, #12]
    e1c4:	6938      	ldr	r0, [r7, #16]
    e1c6:	f7ff ff6f 	bl	e0a8 <z_priq_dumb_remove>
}
    e1ca:	bf00      	nop
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
    e1cc:	4b4e      	ldr	r3, [pc, #312]	; (e308 <z_impl_k_yield+0x1f8>)
    e1ce:	689b      	ldr	r3, [r3, #8]
    e1d0:	4a4e      	ldr	r2, [pc, #312]	; (e30c <z_impl_k_yield+0x1fc>)
    e1d2:	627a      	str	r2, [r7, #36]	; 0x24
    e1d4:	623b      	str	r3, [r7, #32]
	thread->base.thread_state |= _THREAD_QUEUED;
    e1d6:	6a3b      	ldr	r3, [r7, #32]
    e1d8:	7b5b      	ldrb	r3, [r3, #13]
    e1da:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e1de:	b2da      	uxtb	r2, r3
    e1e0:	6a3b      	ldr	r3, [r7, #32]
    e1e2:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
    e1e4:	6a38      	ldr	r0, [r7, #32]
    e1e6:	f008 fb64 	bl	168b2 <should_queue_thread>
    e1ea:	4603      	mov	r3, r0
    e1ec:	2b00      	cmp	r3, #0
    e1ee:	d050      	beq.n	e292 <z_impl_k_yield+0x182>
    e1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e1f2:	61fb      	str	r3, [r7, #28]
    e1f4:	6a3b      	ldr	r3, [r7, #32]
    e1f6:	61bb      	str	r3, [r7, #24]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    e1f8:	69b8      	ldr	r0, [r7, #24]
    e1fa:	f7fe fbbb 	bl	c974 <z_is_idle_thread_object>
    e1fe:	4603      	mov	r3, r0
    e200:	2b00      	cmp	r3, #0
    e202:	d00b      	beq.n	e21c <z_impl_k_yield+0x10c>
    e204:	f240 33a6 	movw	r3, #934	; 0x3a6
    e208:	4a37      	ldr	r2, [pc, #220]	; (e2e8 <z_impl_k_yield+0x1d8>)
    e20a:	4941      	ldr	r1, [pc, #260]	; (e310 <z_impl_k_yield+0x200>)
    e20c:	4838      	ldr	r0, [pc, #224]	; (e2f0 <z_impl_k_yield+0x1e0>)
    e20e:	f001 fd31 	bl	fc74 <printk>
    e212:	f240 31a6 	movw	r1, #934	; 0x3a6
    e216:	4834      	ldr	r0, [pc, #208]	; (e2e8 <z_impl_k_yield+0x1d8>)
    e218:	f002 f988 	bl	1052c <assert_post_action>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e21c:	69f8      	ldr	r0, [r7, #28]
    e21e:	f007 feed 	bl	15ffc <sys_dlist_peek_head>
    e222:	4603      	mov	r3, r0
    e224:	2b00      	cmp	r3, #0
    e226:	d004      	beq.n	e232 <z_impl_k_yield+0x122>
    e228:	69f8      	ldr	r0, [r7, #28]
    e22a:	f007 fee7 	bl	15ffc <sys_dlist_peek_head>
    e22e:	4603      	mov	r3, r0
    e230:	e000      	b.n	e234 <z_impl_k_yield+0x124>
    e232:	2300      	movs	r3, #0
    e234:	617b      	str	r3, [r7, #20]
    e236:	e024      	b.n	e282 <z_impl_k_yield+0x172>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e238:	6979      	ldr	r1, [r7, #20]
    e23a:	69b8      	ldr	r0, [r7, #24]
    e23c:	f008 fb1e 	bl	1687c <z_sched_prio_cmp>
    e240:	4603      	mov	r3, r0
    e242:	2b00      	cmp	r3, #0
    e244:	dd07      	ble.n	e256 <z_impl_k_yield+0x146>
			sys_dlist_insert(&t->base.qnode_dlist,
    e246:	697b      	ldr	r3, [r7, #20]
    e248:	69ba      	ldr	r2, [r7, #24]
    e24a:	4611      	mov	r1, r2
    e24c:	4618      	mov	r0, r3
    e24e:	f007 ff26 	bl	1609e <sys_dlist_insert>
			return;
    e252:	bf00      	nop
}
    e254:	e01d      	b.n	e292 <z_impl_k_yield+0x182>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e256:	697b      	ldr	r3, [r7, #20]
    e258:	2b00      	cmp	r3, #0
    e25a:	d010      	beq.n	e27e <z_impl_k_yield+0x16e>
    e25c:	697b      	ldr	r3, [r7, #20]
    e25e:	4619      	mov	r1, r3
    e260:	69f8      	ldr	r0, [r7, #28]
    e262:	f007 fef0 	bl	16046 <sys_dlist_peek_next>
    e266:	4603      	mov	r3, r0
    e268:	2b00      	cmp	r3, #0
    e26a:	d006      	beq.n	e27a <z_impl_k_yield+0x16a>
    e26c:	697b      	ldr	r3, [r7, #20]
    e26e:	4619      	mov	r1, r3
    e270:	69f8      	ldr	r0, [r7, #28]
    e272:	f007 fee8 	bl	16046 <sys_dlist_peek_next>
    e276:	4603      	mov	r3, r0
    e278:	e002      	b.n	e280 <z_impl_k_yield+0x170>
    e27a:	2300      	movs	r3, #0
    e27c:	e000      	b.n	e280 <z_impl_k_yield+0x170>
    e27e:	2300      	movs	r3, #0
    e280:	617b      	str	r3, [r7, #20]
    e282:	697b      	ldr	r3, [r7, #20]
    e284:	2b00      	cmp	r3, #0
    e286:	d1d7      	bne.n	e238 <z_impl_k_yield+0x128>
	sys_dlist_append(pq, &thread->base.qnode_dlist);
    e288:	69bb      	ldr	r3, [r7, #24]
    e28a:	4619      	mov	r1, r3
    e28c:	69f8      	ldr	r0, [r7, #28]
    e28e:	f007 feed 	bl	1606c <sys_dlist_append>
}
    e292:	bf00      	nop
	update_cache(1);
    e294:	2001      	movs	r0, #1
    e296:	f7fe fe0b 	bl	ceb0 <update_cache>
    e29a:	4b17      	ldr	r3, [pc, #92]	; (e2f8 <z_impl_k_yield+0x1e8>)
    e29c:	62fb      	str	r3, [r7, #44]	; 0x2c
    e29e:	68bb      	ldr	r3, [r7, #8]
    e2a0:	607b      	str	r3, [r7, #4]
    e2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e2a4:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e2a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e2a8:	f7fd fb68 	bl	b97c <z_spin_unlock_valid>
    e2ac:	4603      	mov	r3, r0
    e2ae:	f083 0301 	eor.w	r3, r3, #1
    e2b2:	b2db      	uxtb	r3, r3
    e2b4:	2b00      	cmp	r3, #0
    e2b6:	d00d      	beq.n	e2d4 <z_impl_k_yield+0x1c4>
    e2b8:	23c3      	movs	r3, #195	; 0xc3
    e2ba:	4a10      	ldr	r2, [pc, #64]	; (e2fc <z_impl_k_yield+0x1ec>)
    e2bc:	4915      	ldr	r1, [pc, #84]	; (e314 <z_impl_k_yield+0x204>)
    e2be:	480c      	ldr	r0, [pc, #48]	; (e2f0 <z_impl_k_yield+0x1e0>)
    e2c0:	f001 fcd8 	bl	fc74 <printk>
    e2c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    e2c6:	4814      	ldr	r0, [pc, #80]	; (e318 <z_impl_k_yield+0x208>)
    e2c8:	f001 fcd4 	bl	fc74 <printk>
    e2cc:	21c3      	movs	r1, #195	; 0xc3
    e2ce:	480b      	ldr	r0, [pc, #44]	; (e2fc <z_impl_k_yield+0x1ec>)
    e2d0:	f002 f92c 	bl	1052c <assert_post_action>
}
    e2d4:	bf00      	nop
    e2d6:	687b      	ldr	r3, [r7, #4]
    e2d8:	4618      	mov	r0, r3
    e2da:	f008 faa8 	bl	1682e <z_swap_irqlock>
	z_swap(&sched_spinlock, key);
}
    e2de:	bf00      	nop
    e2e0:	3740      	adds	r7, #64	; 0x40
    e2e2:	46bd      	mov	sp, r7
    e2e4:	bd80      	pop	{r7, pc}
    e2e6:	bf00      	nop
    e2e8:	0001a618 	.word	0x0001a618
    e2ec:	0001a5ac 	.word	0x0001a5ac
    e2f0:	0001a5c0 	.word	0x0001a5c0
    e2f4:	0001a5e0 	.word	0x0001a5e0
    e2f8:	20000c38 	.word	0x20000c38
    e2fc:	0001a660 	.word	0x0001a660
    e300:	0001a688 	.word	0x0001a688
    e304:	0001a6a0 	.word	0x0001a6a0
    e308:	20000c00 	.word	0x20000c00
    e30c:	20000c28 	.word	0x20000c28
    e310:	0001a63c 	.word	0x0001a63c
    e314:	0001a6b8 	.word	0x0001a6b8
    e318:	0001a6d0 	.word	0x0001a6d0

0000e31c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    e31c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    e320:	b090      	sub	sp, #64	; 0x40
    e322:	af00      	add	r7, sp, #0
    e324:	e9c7 0100 	strd	r0, r1, [r7]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e328:	f3ef 8305 	mrs	r3, IPSR
    e32c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
    e32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    e330:	2b00      	cmp	r3, #0
    e332:	bf14      	ite	ne
    e334:	2301      	movne	r3, #1
    e336:	2300      	moveq	r3, #0
    e338:	b2db      	uxtb	r3, r3
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    e33a:	2b00      	cmp	r3, #0
    e33c:	d00e      	beq.n	e35c <z_tick_sleep+0x40>
    e33e:	f240 43be 	movw	r3, #1214	; 0x4be
    e342:	4a65      	ldr	r2, [pc, #404]	; (e4d8 <z_tick_sleep+0x1bc>)
    e344:	4965      	ldr	r1, [pc, #404]	; (e4dc <z_tick_sleep+0x1c0>)
    e346:	4866      	ldr	r0, [pc, #408]	; (e4e0 <z_tick_sleep+0x1c4>)
    e348:	f001 fc94 	bl	fc74 <printk>
    e34c:	4865      	ldr	r0, [pc, #404]	; (e4e4 <z_tick_sleep+0x1c8>)
    e34e:	f001 fc91 	bl	fc74 <printk>
    e352:	f240 41be 	movw	r1, #1214	; 0x4be
    e356:	4860      	ldr	r0, [pc, #384]	; (e4d8 <z_tick_sleep+0x1bc>)
    e358:	f002 f8e8 	bl	1052c <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    e35c:	e9d7 2300 	ldrd	r2, r3, [r7]
    e360:	4313      	orrs	r3, r2
    e362:	d103      	bne.n	e36c <z_tick_sleep+0x50>
		k_yield();
    e364:	f008 f91b 	bl	1659e <k_yield>
		return 0;
    e368:	2300      	movs	r3, #0
    e36a:	e0af      	b.n	e4cc <z_tick_sleep+0x1b0>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
    e36c:	e9d7 2300 	ldrd	r2, r3, [r7]
    e370:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if (Z_TICK_ABS(ticks) <= 0) {
    e374:	f06f 0001 	mvn.w	r0, #1
    e378:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e37c:	e9d7 2300 	ldrd	r2, r3, [r7]
    e380:	1a84      	subs	r4, r0, r2
    e382:	eb61 0503 	sbc.w	r5, r1, r3
    e386:	2c01      	cmp	r4, #1
    e388:	f175 0300 	sbcs.w	r3, r5, #0
    e38c:	da07      	bge.n	e39e <z_tick_sleep+0x82>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    e38e:	f008 fc24 	bl	16bda <sys_clock_tick_get_32>
    e392:	4603      	mov	r3, r0
    e394:	461a      	mov	r2, r3
    e396:	683b      	ldr	r3, [r7, #0]
    e398:	4413      	add	r3, r2
    e39a:	63fb      	str	r3, [r7, #60]	; 0x3c
    e39c:	e004      	b.n	e3a8 <z_tick_sleep+0x8c>
	} else {
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    e39e:	683a      	ldr	r2, [r7, #0]
    e3a0:	f06f 0301 	mvn.w	r3, #1
    e3a4:	1a9b      	subs	r3, r3, r2
    e3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    e3a8:	4b4f      	ldr	r3, [pc, #316]	; (e4e8 <z_tick_sleep+0x1cc>)
    e3aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
    e3ac:	f04f 0320 	mov.w	r3, #32
    e3b0:	f3ef 8211 	mrs	r2, BASEPRI
    e3b4:	f383 8811 	msr	BASEPRI, r3
    e3b8:	f3bf 8f6f 	isb	sy
    e3bc:	62ba      	str	r2, [r7, #40]	; 0x28
    e3be:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
    e3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
    e3c2:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e3c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e3c6:	f7fd fabd 	bl	b944 <z_spin_lock_valid>
    e3ca:	4603      	mov	r3, r0
    e3cc:	f083 0301 	eor.w	r3, r3, #1
    e3d0:	b2db      	uxtb	r3, r3
    e3d2:	2b00      	cmp	r3, #0
    e3d4:	d00d      	beq.n	e3f2 <z_tick_sleep+0xd6>
    e3d6:	2381      	movs	r3, #129	; 0x81
    e3d8:	4a44      	ldr	r2, [pc, #272]	; (e4ec <z_tick_sleep+0x1d0>)
    e3da:	4945      	ldr	r1, [pc, #276]	; (e4f0 <z_tick_sleep+0x1d4>)
    e3dc:	4840      	ldr	r0, [pc, #256]	; (e4e0 <z_tick_sleep+0x1c4>)
    e3de:	f001 fc49 	bl	fc74 <printk>
    e3e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    e3e4:	4843      	ldr	r0, [pc, #268]	; (e4f4 <z_tick_sleep+0x1d8>)
    e3e6:	f001 fc45 	bl	fc74 <printk>
    e3ea:	2181      	movs	r1, #129	; 0x81
    e3ec:	483f      	ldr	r0, [pc, #252]	; (e4ec <z_tick_sleep+0x1d0>)
    e3ee:	f002 f89d 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    e3f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    e3f4:	f7fd fade 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    e3f8:	693b      	ldr	r3, [r7, #16]
    e3fa:	617b      	str	r3, [r7, #20]
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    e3fc:	4b3e      	ldr	r3, [pc, #248]	; (e4f8 <z_tick_sleep+0x1dc>)
    e3fe:	689b      	ldr	r3, [r3, #8]
    e400:	4a3e      	ldr	r2, [pc, #248]	; (e4fc <z_tick_sleep+0x1e0>)
    e402:	6013      	str	r3, [r2, #0]
#endif
	unready_thread(_current);
    e404:	4b3c      	ldr	r3, [pc, #240]	; (e4f8 <z_tick_sleep+0x1dc>)
    e406:	689b      	ldr	r3, [r3, #8]
    e408:	4618      	mov	r0, r3
    e40a:	f7fe fffb 	bl	d404 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    e40e:	4b3a      	ldr	r3, [pc, #232]	; (e4f8 <z_tick_sleep+0x1dc>)
    e410:	6899      	ldr	r1, [r3, #8]
    e412:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    e416:	4608      	mov	r0, r1
    e418:	f7fe fa98 	bl	c94c <z_add_thread_timeout>
	z_mark_thread_as_suspended(_current);
    e41c:	4b36      	ldr	r3, [pc, #216]	; (e4f8 <z_tick_sleep+0x1dc>)
    e41e:	689b      	ldr	r3, [r3, #8]
    e420:	4618      	mov	r0, r3
    e422:	f008 f988 	bl	16736 <z_mark_thread_as_suspended>
    e426:	4b30      	ldr	r3, [pc, #192]	; (e4e8 <z_tick_sleep+0x1cc>)
    e428:	637b      	str	r3, [r7, #52]	; 0x34
    e42a:	697b      	ldr	r3, [r7, #20]
    e42c:	60fb      	str	r3, [r7, #12]
    e42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e430:	633b      	str	r3, [r7, #48]	; 0x30
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e432:	6b38      	ldr	r0, [r7, #48]	; 0x30
    e434:	f7fd faa2 	bl	b97c <z_spin_unlock_valid>
    e438:	4603      	mov	r3, r0
    e43a:	f083 0301 	eor.w	r3, r3, #1
    e43e:	b2db      	uxtb	r3, r3
    e440:	2b00      	cmp	r3, #0
    e442:	d00d      	beq.n	e460 <z_tick_sleep+0x144>
    e444:	23c3      	movs	r3, #195	; 0xc3
    e446:	4a29      	ldr	r2, [pc, #164]	; (e4ec <z_tick_sleep+0x1d0>)
    e448:	492d      	ldr	r1, [pc, #180]	; (e500 <z_tick_sleep+0x1e4>)
    e44a:	4825      	ldr	r0, [pc, #148]	; (e4e0 <z_tick_sleep+0x1c4>)
    e44c:	f001 fc12 	bl	fc74 <printk>
    e450:	6b39      	ldr	r1, [r7, #48]	; 0x30
    e452:	482c      	ldr	r0, [pc, #176]	; (e504 <z_tick_sleep+0x1e8>)
    e454:	f001 fc0e 	bl	fc74 <printk>
    e458:	21c3      	movs	r1, #195	; 0xc3
    e45a:	4824      	ldr	r0, [pc, #144]	; (e4ec <z_tick_sleep+0x1d0>)
    e45c:	f002 f866 	bl	1052c <assert_post_action>
}
    e460:	bf00      	nop
    e462:	68fb      	ldr	r3, [r7, #12]
    e464:	4618      	mov	r0, r3
    e466:	f008 f9e2 	bl	1682e <z_swap_irqlock>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    e46a:	4b23      	ldr	r3, [pc, #140]	; (e4f8 <z_tick_sleep+0x1dc>)
    e46c:	689b      	ldr	r3, [r3, #8]
    e46e:	2110      	movs	r1, #16
    e470:	4618      	mov	r0, r3
    e472:	f008 f93f 	bl	166f4 <z_is_thread_state_set>
    e476:	4603      	mov	r3, r0
    e478:	2b00      	cmp	r3, #0
    e47a:	d00e      	beq.n	e49a <z_tick_sleep+0x17e>
    e47c:	f240 43df 	movw	r3, #1247	; 0x4df
    e480:	4a15      	ldr	r2, [pc, #84]	; (e4d8 <z_tick_sleep+0x1bc>)
    e482:	4921      	ldr	r1, [pc, #132]	; (e508 <z_tick_sleep+0x1ec>)
    e484:	4816      	ldr	r0, [pc, #88]	; (e4e0 <z_tick_sleep+0x1c4>)
    e486:	f001 fbf5 	bl	fc74 <printk>
    e48a:	4816      	ldr	r0, [pc, #88]	; (e4e4 <z_tick_sleep+0x1c8>)
    e48c:	f001 fbf2 	bl	fc74 <printk>
    e490:	f240 41df 	movw	r1, #1247	; 0x4df
    e494:	4810      	ldr	r0, [pc, #64]	; (e4d8 <z_tick_sleep+0x1bc>)
    e496:	f002 f849 	bl	1052c <assert_post_action>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    e49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    e49c:	461c      	mov	r4, r3
    e49e:	f04f 0500 	mov.w	r5, #0
    e4a2:	f008 fb9a 	bl	16bda <sys_clock_tick_get_32>
    e4a6:	4603      	mov	r3, r0
    e4a8:	461a      	mov	r2, r3
    e4aa:	f04f 0300 	mov.w	r3, #0
    e4ae:	ebb4 0802 	subs.w	r8, r4, r2
    e4b2:	eb65 0903 	sbc.w	r9, r5, r3
    e4b6:	e9c7 8900 	strd	r8, r9, [r7]
	if (ticks > 0) {
    e4ba:	e9d7 2300 	ldrd	r2, r3, [r7]
    e4be:	2a01      	cmp	r2, #1
    e4c0:	f173 0300 	sbcs.w	r3, r3, #0
    e4c4:	db01      	blt.n	e4ca <z_tick_sleep+0x1ae>
		return ticks;
    e4c6:	683b      	ldr	r3, [r7, #0]
    e4c8:	e000      	b.n	e4cc <z_tick_sleep+0x1b0>
	}
#endif

	return 0;
    e4ca:	2300      	movs	r3, #0
}
    e4cc:	4618      	mov	r0, r3
    e4ce:	3740      	adds	r7, #64	; 0x40
    e4d0:	46bd      	mov	sp, r7
    e4d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
    e4d6:	bf00      	nop
    e4d8:	0001a618 	.word	0x0001a618
    e4dc:	0001a5ac 	.word	0x0001a5ac
    e4e0:	0001a5c0 	.word	0x0001a5c0
    e4e4:	0001a5e0 	.word	0x0001a5e0
    e4e8:	20000c38 	.word	0x20000c38
    e4ec:	0001a660 	.word	0x0001a660
    e4f0:	0001a688 	.word	0x0001a688
    e4f4:	0001a6a0 	.word	0x0001a6a0
    e4f8:	20000c00 	.word	0x20000c00
    e4fc:	20000c44 	.word	0x20000c44
    e500:	0001a6b8 	.word	0x0001a6b8
    e504:	0001a6d0 	.word	0x0001a6d0
    e508:	0001a878 	.word	0x0001a878

0000e50c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    e50c:	b580      	push	{r7, lr}
    e50e:	b086      	sub	sp, #24
    e510:	af00      	add	r7, sp, #0
    e512:	e9c7 0100 	strd	r0, r1, [r7]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e516:	f3ef 8305 	mrs	r3, IPSR
    e51a:	60bb      	str	r3, [r7, #8]
  return(result);
    e51c:	68bb      	ldr	r3, [r7, #8]
    e51e:	2b00      	cmp	r3, #0
    e520:	bf14      	ite	ne
    e522:	2301      	movne	r3, #1
    e524:	2300      	moveq	r3, #0
    e526:	b2db      	uxtb	r3, r3
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    e528:	2b00      	cmp	r3, #0
    e52a:	d00e      	beq.n	e54a <z_impl_k_sleep+0x3e>
    e52c:	f240 43ee 	movw	r3, #1262	; 0x4ee
    e530:	4a1d      	ldr	r2, [pc, #116]	; (e5a8 <z_impl_k_sleep+0x9c>)
    e532:	491e      	ldr	r1, [pc, #120]	; (e5ac <z_impl_k_sleep+0xa0>)
    e534:	481e      	ldr	r0, [pc, #120]	; (e5b0 <z_impl_k_sleep+0xa4>)
    e536:	f001 fb9d 	bl	fc74 <printk>
    e53a:	481e      	ldr	r0, [pc, #120]	; (e5b4 <z_impl_k_sleep+0xa8>)
    e53c:	f001 fb9a 	bl	fc74 <printk>
    e540:	f240 41ee 	movw	r1, #1262	; 0x4ee
    e544:	4818      	ldr	r0, [pc, #96]	; (e5a8 <z_impl_k_sleep+0x9c>)
    e546:	f001 fff1 	bl	1052c <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e54a:	e9d7 2300 	ldrd	r2, r3, [r7]
    e54e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e552:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e556:	428b      	cmp	r3, r1
    e558:	bf08      	it	eq
    e55a:	4282      	cmpeq	r2, r0
    e55c:	d107      	bne.n	e56e <z_impl_k_sleep+0x62>
		k_thread_suspend(_current);
    e55e:	4b16      	ldr	r3, [pc, #88]	; (e5b8 <z_impl_k_sleep+0xac>)
    e560:	689b      	ldr	r3, [r3, #8]
    e562:	4618      	mov	r0, r3
    e564:	f008 f821 	bl	165aa <k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    e568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e56c:	e018      	b.n	e5a0 <z_impl_k_sleep+0x94>
	}

	ticks = timeout.ticks;
    e56e:	e9d7 2300 	ldrd	r2, r3, [r7]
    e572:	e9c7 2304 	strd	r2, r3, [r7, #16]

	ticks = z_tick_sleep(ticks);
    e576:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    e57a:	f7ff fecf 	bl	e31c <z_tick_sleep>
    e57e:	4603      	mov	r3, r0
    e580:	461a      	mov	r2, r3
    e582:	ea4f 73e2 	mov.w	r3, r2, asr #31
    e586:	e9c7 2304 	strd	r2, r3, [r7, #16]

	int32_t ret = k_ticks_to_ms_floor64(ticks);
    e58a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    e58e:	4610      	mov	r0, r2
    e590:	4619      	mov	r1, r3
    e592:	f007 fee0 	bl	16356 <k_ticks_to_ms_floor64>
    e596:	4602      	mov	r2, r0
    e598:	460b      	mov	r3, r1
    e59a:	4613      	mov	r3, r2
    e59c:	60fb      	str	r3, [r7, #12]

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
    e59e:	68fb      	ldr	r3, [r7, #12]
}
    e5a0:	4618      	mov	r0, r3
    e5a2:	3718      	adds	r7, #24
    e5a4:	46bd      	mov	sp, r7
    e5a6:	bd80      	pop	{r7, pc}
    e5a8:	0001a618 	.word	0x0001a618
    e5ac:	0001a5ac 	.word	0x0001a5ac
    e5b0:	0001a5c0 	.word	0x0001a5c0
    e5b4:	0001a5e0 	.word	0x0001a5e0
    e5b8:	20000c00 	.word	0x20000c00

0000e5bc <z_impl_k_current_get>:
}
#include <syscalls/k_wakeup_mrsh.c>
#endif

k_tid_t z_impl_k_current_get(void)
{
    e5bc:	b480      	push	{r7}
    e5be:	b083      	sub	sp, #12
    e5c0:	af00      	add	r7, sp, #0
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
    e5c2:	4b04      	ldr	r3, [pc, #16]	; (e5d4 <z_impl_k_current_get+0x18>)
    e5c4:	689b      	ldr	r3, [r3, #8]
    e5c6:	607b      	str	r3, [r7, #4]

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
    e5c8:	687b      	ldr	r3, [r7, #4]
}
    e5ca:	4618      	mov	r0, r3
    e5cc:	370c      	adds	r7, #12
    e5ce:	46bd      	mov	sp, r7
    e5d0:	bc80      	pop	{r7}
    e5d2:	4770      	bx	lr
    e5d4:	20000c00 	.word	0x20000c00

0000e5d8 <end_thread>:
		ready_thread(thread);
	}
}

static void end_thread(struct k_thread *thread)
{
    e5d8:	b580      	push	{r7, lr}
    e5da:	b084      	sub	sp, #16
    e5dc:	af00      	add	r7, sp, #0
    e5de:	6078      	str	r0, [r7, #4]
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    e5e0:	687b      	ldr	r3, [r7, #4]
    e5e2:	7b5b      	ldrb	r3, [r3, #13]
    e5e4:	f003 0308 	and.w	r3, r3, #8
    e5e8:	2b00      	cmp	r3, #0
    e5ea:	d13b      	bne.n	e664 <end_thread+0x8c>
		thread->base.thread_state |= _THREAD_DEAD;
    e5ec:	687b      	ldr	r3, [r7, #4]
    e5ee:	7b5b      	ldrb	r3, [r3, #13]
    e5f0:	f043 0308 	orr.w	r3, r3, #8
    e5f4:	b2da      	uxtb	r2, r3
    e5f6:	687b      	ldr	r3, [r7, #4]
    e5f8:	735a      	strb	r2, [r3, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    e5fa:	687b      	ldr	r3, [r7, #4]
    e5fc:	7b5b      	ldrb	r3, [r3, #13]
    e5fe:	f023 0320 	bic.w	r3, r3, #32
    e602:	b2da      	uxtb	r2, r3
    e604:	687b      	ldr	r3, [r7, #4]
    e606:	735a      	strb	r2, [r3, #13]
		if (z_is_thread_queued(thread)) {
    e608:	6878      	ldr	r0, [r7, #4]
    e60a:	f008 f887 	bl	1671c <z_is_thread_queued>
    e60e:	4603      	mov	r3, r0
    e610:	2b00      	cmp	r3, #0
    e612:	d015      	beq.n	e640 <end_thread+0x68>
    e614:	4b15      	ldr	r3, [pc, #84]	; (e66c <end_thread+0x94>)
    e616:	60fb      	str	r3, [r7, #12]
    e618:	687b      	ldr	r3, [r7, #4]
    e61a:	60bb      	str	r3, [r7, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e61c:	68bb      	ldr	r3, [r7, #8]
    e61e:	7b5b      	ldrb	r3, [r3, #13]
    e620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e624:	b2da      	uxtb	r2, r3
    e626:	68bb      	ldr	r3, [r7, #8]
    e628:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
    e62a:	68b8      	ldr	r0, [r7, #8]
    e62c:	f008 f941 	bl	168b2 <should_queue_thread>
    e630:	4603      	mov	r3, r0
    e632:	2b00      	cmp	r3, #0
    e634:	d003      	beq.n	e63e <end_thread+0x66>
		_priq_run_remove(pq, thread);
    e636:	68b9      	ldr	r1, [r7, #8]
    e638:	68f8      	ldr	r0, [r7, #12]
    e63a:	f7ff fd35 	bl	e0a8 <z_priq_dumb_remove>
}
    e63e:	bf00      	nop
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
    e640:	687b      	ldr	r3, [r7, #4]
    e642:	689b      	ldr	r3, [r3, #8]
    e644:	2b00      	cmp	r3, #0
    e646:	d002      	beq.n	e64e <end_thread+0x76>
			unpend_thread_no_timeout(thread);
    e648:	6878      	ldr	r0, [r7, #4]
    e64a:	f008 f968 	bl	1691e <unpend_thread_no_timeout>
		}
		(void)z_abort_thread_timeout(thread);
    e64e:	6878      	ldr	r0, [r7, #4]
    e650:	f007 ffce 	bl	165f0 <z_abort_thread_timeout>
		unpend_all(&thread->join_queue);
    e654:	687b      	ldr	r3, [r7, #4]
    e656:	3358      	adds	r3, #88	; 0x58
    e658:	4618      	mov	r0, r3
    e65a:	f008 f9cb 	bl	169f4 <unpend_all>
		update_cache(1);
    e65e:	2001      	movs	r0, #1
    e660:	f7fe fc26 	bl	ceb0 <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    e664:	bf00      	nop
    e666:	3710      	adds	r7, #16
    e668:	46bd      	mov	sp, r7
    e66a:	bd80      	pop	{r7, pc}
    e66c:	20000c28 	.word	0x20000c28

0000e670 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    e670:	b580      	push	{r7, lr}
    e672:	b092      	sub	sp, #72	; 0x48
    e674:	af00      	add	r7, sp, #0
    e676:	6078      	str	r0, [r7, #4]
    e678:	4b60      	ldr	r3, [pc, #384]	; (e7fc <z_thread_abort+0x18c>)
    e67a:	647b      	str	r3, [r7, #68]	; 0x44
	__asm__ volatile(
    e67c:	f04f 0320 	mov.w	r3, #32
    e680:	f3ef 8211 	mrs	r2, BASEPRI
    e684:	f383 8811 	msr	BASEPRI, r3
    e688:	f3bf 8f6f 	isb	sy
    e68c:	643a      	str	r2, [r7, #64]	; 0x40
    e68e:	63fb      	str	r3, [r7, #60]	; 0x3c
	return key;
    e690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	k.key = arch_irq_lock();
    e692:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e694:	6c78      	ldr	r0, [r7, #68]	; 0x44
    e696:	f7fd f955 	bl	b944 <z_spin_lock_valid>
    e69a:	4603      	mov	r3, r0
    e69c:	f083 0301 	eor.w	r3, r3, #1
    e6a0:	b2db      	uxtb	r3, r3
    e6a2:	2b00      	cmp	r3, #0
    e6a4:	d00d      	beq.n	e6c2 <z_thread_abort+0x52>
    e6a6:	2381      	movs	r3, #129	; 0x81
    e6a8:	4a55      	ldr	r2, [pc, #340]	; (e800 <z_thread_abort+0x190>)
    e6aa:	4956      	ldr	r1, [pc, #344]	; (e804 <z_thread_abort+0x194>)
    e6ac:	4856      	ldr	r0, [pc, #344]	; (e808 <z_thread_abort+0x198>)
    e6ae:	f001 fae1 	bl	fc74 <printk>
    e6b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
    e6b4:	4855      	ldr	r0, [pc, #340]	; (e80c <z_thread_abort+0x19c>)
    e6b6:	f001 fadd 	bl	fc74 <printk>
    e6ba:	2181      	movs	r1, #129	; 0x81
    e6bc:	4850      	ldr	r0, [pc, #320]	; (e800 <z_thread_abort+0x190>)
    e6be:	f001 ff35 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    e6c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
    e6c4:	f7fd f976 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    e6c8:	68fb      	ldr	r3, [r7, #12]
    e6ca:	61fb      	str	r3, [r7, #28]
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    e6cc:	687b      	ldr	r3, [r7, #4]
    e6ce:	7b5b      	ldrb	r3, [r3, #13]
    e6d0:	f003 0308 	and.w	r3, r3, #8
    e6d4:	2b00      	cmp	r3, #0
    e6d6:	d023      	beq.n	e720 <z_thread_abort+0xb0>
    e6d8:	4b48      	ldr	r3, [pc, #288]	; (e7fc <z_thread_abort+0x18c>)
    e6da:	63bb      	str	r3, [r7, #56]	; 0x38
    e6dc:	69fb      	ldr	r3, [r7, #28]
    e6de:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e6e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    e6e2:	f7fd f94b 	bl	b97c <z_spin_unlock_valid>
    e6e6:	4603      	mov	r3, r0
    e6e8:	f083 0301 	eor.w	r3, r3, #1
    e6ec:	b2db      	uxtb	r3, r3
    e6ee:	2b00      	cmp	r3, #0
    e6f0:	d00d      	beq.n	e70e <z_thread_abort+0x9e>
    e6f2:	23ac      	movs	r3, #172	; 0xac
    e6f4:	4a42      	ldr	r2, [pc, #264]	; (e800 <z_thread_abort+0x190>)
    e6f6:	4946      	ldr	r1, [pc, #280]	; (e810 <z_thread_abort+0x1a0>)
    e6f8:	4843      	ldr	r0, [pc, #268]	; (e808 <z_thread_abort+0x198>)
    e6fa:	f001 fabb 	bl	fc74 <printk>
    e6fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    e700:	4844      	ldr	r0, [pc, #272]	; (e814 <z_thread_abort+0x1a4>)
    e702:	f001 fab7 	bl	fc74 <printk>
    e706:	21ac      	movs	r1, #172	; 0xac
    e708:	483d      	ldr	r0, [pc, #244]	; (e800 <z_thread_abort+0x190>)
    e70a:	f001 ff0f 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    e70e:	693b      	ldr	r3, [r7, #16]
    e710:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
    e712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e714:	f383 8811 	msr	BASEPRI, r3
    e718:	f3bf 8f6f 	isb	sy
}
    e71c:	bf00      	nop
}
    e71e:	e06a      	b.n	e7f6 <z_thread_abort+0x186>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    e720:	6878      	ldr	r0, [r7, #4]
    e722:	f7ff ff59 	bl	e5d8 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    e726:	4b3c      	ldr	r3, [pc, #240]	; (e818 <z_thread_abort+0x1a8>)
    e728:	689b      	ldr	r3, [r3, #8]
    e72a:	687a      	ldr	r2, [r7, #4]
    e72c:	429a      	cmp	r2, r3
    e72e:	d13e      	bne.n	e7ae <z_thread_abort+0x13e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e730:	f3ef 8305 	mrs	r3, IPSR
    e734:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
    e736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e738:	2b00      	cmp	r3, #0
    e73a:	bf14      	ite	ne
    e73c:	2301      	movne	r3, #1
    e73e:	2300      	moveq	r3, #0
    e740:	b2db      	uxtb	r3, r3
    e742:	f083 0301 	eor.w	r3, r3, #1
    e746:	b2db      	uxtb	r3, r3
    e748:	2b00      	cmp	r3, #0
    e74a:	d030      	beq.n	e7ae <z_thread_abort+0x13e>
    e74c:	4b2b      	ldr	r3, [pc, #172]	; (e7fc <z_thread_abort+0x18c>)
    e74e:	62fb      	str	r3, [r7, #44]	; 0x2c
    e750:	69fb      	ldr	r3, [r7, #28]
    e752:	617b      	str	r3, [r7, #20]
    e754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e756:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e75a:	f7fd f90f 	bl	b97c <z_spin_unlock_valid>
    e75e:	4603      	mov	r3, r0
    e760:	f083 0301 	eor.w	r3, r3, #1
    e764:	b2db      	uxtb	r3, r3
    e766:	2b00      	cmp	r3, #0
    e768:	d00d      	beq.n	e786 <z_thread_abort+0x116>
    e76a:	23c3      	movs	r3, #195	; 0xc3
    e76c:	4a24      	ldr	r2, [pc, #144]	; (e800 <z_thread_abort+0x190>)
    e76e:	4928      	ldr	r1, [pc, #160]	; (e810 <z_thread_abort+0x1a0>)
    e770:	4825      	ldr	r0, [pc, #148]	; (e808 <z_thread_abort+0x198>)
    e772:	f001 fa7f 	bl	fc74 <printk>
    e776:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    e778:	4826      	ldr	r0, [pc, #152]	; (e814 <z_thread_abort+0x1a4>)
    e77a:	f001 fa7b 	bl	fc74 <printk>
    e77e:	21c3      	movs	r1, #195	; 0xc3
    e780:	481f      	ldr	r0, [pc, #124]	; (e800 <z_thread_abort+0x190>)
    e782:	f001 fed3 	bl	1052c <assert_post_action>
}
    e786:	bf00      	nop
    e788:	697b      	ldr	r3, [r7, #20]
    e78a:	4618      	mov	r0, r3
    e78c:	f008 f84f 	bl	1682e <z_swap_irqlock>
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
    e790:	f240 6301 	movw	r3, #1537	; 0x601
    e794:	4a21      	ldr	r2, [pc, #132]	; (e81c <z_thread_abort+0x1ac>)
    e796:	4922      	ldr	r1, [pc, #136]	; (e820 <z_thread_abort+0x1b0>)
    e798:	481b      	ldr	r0, [pc, #108]	; (e808 <z_thread_abort+0x198>)
    e79a:	f001 fa6b 	bl	fc74 <printk>
    e79e:	4821      	ldr	r0, [pc, #132]	; (e824 <z_thread_abort+0x1b4>)
    e7a0:	f001 fa68 	bl	fc74 <printk>
    e7a4:	f240 6101 	movw	r1, #1537	; 0x601
    e7a8:	481c      	ldr	r0, [pc, #112]	; (e81c <z_thread_abort+0x1ac>)
    e7aa:	f001 febf 	bl	1052c <assert_post_action>
    e7ae:	4b13      	ldr	r3, [pc, #76]	; (e7fc <z_thread_abort+0x18c>)
    e7b0:	627b      	str	r3, [r7, #36]	; 0x24
    e7b2:	69fb      	ldr	r3, [r7, #28]
    e7b4:	61bb      	str	r3, [r7, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    e7b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    e7b8:	f7fd f8e0 	bl	b97c <z_spin_unlock_valid>
    e7bc:	4603      	mov	r3, r0
    e7be:	f083 0301 	eor.w	r3, r3, #1
    e7c2:	b2db      	uxtb	r3, r3
    e7c4:	2b00      	cmp	r3, #0
    e7c6:	d00d      	beq.n	e7e4 <z_thread_abort+0x174>
    e7c8:	23ac      	movs	r3, #172	; 0xac
    e7ca:	4a0d      	ldr	r2, [pc, #52]	; (e800 <z_thread_abort+0x190>)
    e7cc:	4910      	ldr	r1, [pc, #64]	; (e810 <z_thread_abort+0x1a0>)
    e7ce:	480e      	ldr	r0, [pc, #56]	; (e808 <z_thread_abort+0x198>)
    e7d0:	f001 fa50 	bl	fc74 <printk>
    e7d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    e7d6:	480f      	ldr	r0, [pc, #60]	; (e814 <z_thread_abort+0x1a4>)
    e7d8:	f001 fa4c 	bl	fc74 <printk>
    e7dc:	21ac      	movs	r1, #172	; 0xac
    e7de:	4808      	ldr	r0, [pc, #32]	; (e800 <z_thread_abort+0x190>)
    e7e0:	f001 fea4 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    e7e4:	69bb      	ldr	r3, [r7, #24]
    e7e6:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
    e7e8:	6a3b      	ldr	r3, [r7, #32]
    e7ea:	f383 8811 	msr	BASEPRI, r3
    e7ee:	f3bf 8f6f 	isb	sy
}
    e7f2:	bf00      	nop
}
    e7f4:	bf00      	nop
	}
	k_spin_unlock(&sched_spinlock, key);
}
    e7f6:	3748      	adds	r7, #72	; 0x48
    e7f8:	46bd      	mov	sp, r7
    e7fa:	bd80      	pop	{r7, pc}
    e7fc:	20000c38 	.word	0x20000c38
    e800:	0001a660 	.word	0x0001a660
    e804:	0001a688 	.word	0x0001a688
    e808:	0001a5c0 	.word	0x0001a5c0
    e80c:	0001a6a0 	.word	0x0001a6a0
    e810:	0001a6b8 	.word	0x0001a6b8
    e814:	0001a6d0 	.word	0x0001a6d0
    e818:	20000c00 	.word	0x20000c00
    e81c:	0001a618 	.word	0x0001a618
    e820:	0001a8b8 	.word	0x0001a8b8
    e824:	0001a8bc 	.word	0x0001a8bc

0000e828 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    e828:	b580      	push	{r7, lr}
    e82a:	af00      	add	r7, sp, #0
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    e82c:	4a07      	ldr	r2, [pc, #28]	; (e84c <z_data_copy+0x24>)
    e82e:	4b08      	ldr	r3, [pc, #32]	; (e850 <z_data_copy+0x28>)
    e830:	1ad3      	subs	r3, r2, r3
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    e832:	461a      	mov	r2, r3
    e834:	4907      	ldr	r1, [pc, #28]	; (e854 <z_data_copy+0x2c>)
    e836:	4806      	ldr	r0, [pc, #24]	; (e850 <z_data_copy+0x28>)
    e838:	f004 f939 	bl	12aae <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    e83c:	4b06      	ldr	r3, [pc, #24]	; (e858 <z_data_copy+0x30>)
    e83e:	461a      	mov	r2, r3
    e840:	4906      	ldr	r1, [pc, #24]	; (e85c <z_data_copy+0x34>)
    e842:	4807      	ldr	r0, [pc, #28]	; (e860 <z_data_copy+0x38>)
    e844:	f004 f933 	bl	12aae <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    e848:	bf00      	nop
    e84a:	bd80      	pop	{r7, pc}
    e84c:	20000260 	.word	0x20000260
    e850:	20000000 	.word	0x20000000
    e854:	0001ae60 	.word	0x0001ae60
    e858:	00000000 	.word	0x00000000
    e85c:	0001ae60 	.word	0x0001ae60
    e860:	20000000 	.word	0x20000000

0000e864 <first>:
#include <syscalls/sys_clock_hw_cycles_per_sec_runtime_get_mrsh.c>
#endif /* CONFIG_USERSPACE */
#endif /* CONFIG_TIMER_READS_ITS_FREQUENCY_AT_RUNTIME */

static struct _timeout *first(void)
{
    e864:	b580      	push	{r7, lr}
    e866:	b082      	sub	sp, #8
    e868:	af00      	add	r7, sp, #0
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);
    e86a:	4804      	ldr	r0, [pc, #16]	; (e87c <first+0x18>)
    e86c:	f008 f914 	bl	16a98 <sys_dlist_peek_head>
    e870:	6078      	str	r0, [r7, #4]

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    e872:	687b      	ldr	r3, [r7, #4]
}
    e874:	4618      	mov	r0, r3
    e876:	3708      	adds	r7, #8
    e878:	46bd      	mov	sp, r7
    e87a:	bd80      	pop	{r7, pc}
    e87c:	20000178 	.word	0x20000178

0000e880 <next>:

static struct _timeout *next(struct _timeout *t)
{
    e880:	b580      	push	{r7, lr}
    e882:	b084      	sub	sp, #16
    e884:	af00      	add	r7, sp, #0
    e886:	6078      	str	r0, [r7, #4]
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);
    e888:	687b      	ldr	r3, [r7, #4]
    e88a:	4619      	mov	r1, r3
    e88c:	4804      	ldr	r0, [pc, #16]	; (e8a0 <next+0x20>)
    e88e:	f008 f928 	bl	16ae2 <sys_dlist_peek_next>
    e892:	60f8      	str	r0, [r7, #12]

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
    e894:	68fb      	ldr	r3, [r7, #12]
}
    e896:	4618      	mov	r0, r3
    e898:	3710      	adds	r7, #16
    e89a:	46bd      	mov	sp, r7
    e89c:	bd80      	pop	{r7, pc}
    e89e:	bf00      	nop
    e8a0:	20000178 	.word	0x20000178

0000e8a4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    e8a4:	b580      	push	{r7, lr}
    e8a6:	af00      	add	r7, sp, #0
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    e8a8:	4b05      	ldr	r3, [pc, #20]	; (e8c0 <elapsed+0x1c>)
    e8aa:	681b      	ldr	r3, [r3, #0]
    e8ac:	2b00      	cmp	r3, #0
    e8ae:	d103      	bne.n	e8b8 <elapsed+0x14>
    e8b0:	f7f6 fe16 	bl	54e0 <sys_clock_elapsed>
    e8b4:	4603      	mov	r3, r0
    e8b6:	e000      	b.n	e8ba <elapsed+0x16>
    e8b8:	2300      	movs	r3, #0
}
    e8ba:	4618      	mov	r0, r3
    e8bc:	bd80      	pop	{r7, pc}
    e8be:	bf00      	nop
    e8c0:	20000c4c 	.word	0x20000c4c

0000e8c4 <next_timeout>:

static int32_t next_timeout(void)
{
    e8c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    e8c8:	b084      	sub	sp, #16
    e8ca:	af00      	add	r7, sp, #0
	struct _timeout *to = first();
    e8cc:	f7ff ffca 	bl	e864 <first>
    e8d0:	60b8      	str	r0, [r7, #8]
	int32_t ticks_elapsed = elapsed();
    e8d2:	f7ff ffe7 	bl	e8a4 <elapsed>
    e8d6:	6078      	str	r0, [r7, #4]
	int32_t ret = to == NULL ? MAX_WAIT
    e8d8:	68bb      	ldr	r3, [r7, #8]
    e8da:	2b00      	cmp	r3, #0
    e8dc:	d029      	beq.n	e932 <next_timeout+0x6e>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    e8de:	68bb      	ldr	r3, [r7, #8]
    e8e0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    e8e4:	687b      	ldr	r3, [r7, #4]
    e8e6:	461a      	mov	r2, r3
    e8e8:	ea4f 73e2 	mov.w	r3, r2, asr #31
    e8ec:	1a84      	subs	r4, r0, r2
    e8ee:	eb61 0503 	sbc.w	r5, r1, r3
	int32_t ret = to == NULL ? MAX_WAIT
    e8f2:	2c01      	cmp	r4, #1
    e8f4:	f175 0300 	sbcs.w	r3, r5, #0
    e8f8:	db19      	blt.n	e92e <next_timeout+0x6a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    e8fa:	68bb      	ldr	r3, [r7, #8]
    e8fc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    e900:	687b      	ldr	r3, [r7, #4]
    e902:	461a      	mov	r2, r3
    e904:	ea4f 73e2 	mov.w	r3, r2, asr #31
    e908:	ebb0 0802 	subs.w	r8, r0, r2
    e90c:	eb61 0903 	sbc.w	r9, r1, r3
    e910:	4642      	mov	r2, r8
    e912:	464b      	mov	r3, r9
    e914:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    e918:	f04f 0100 	mov.w	r1, #0
    e91c:	4290      	cmp	r0, r2
    e91e:	4199      	sbcs	r1, r3
    e920:	da03      	bge.n	e92a <next_timeout+0x66>
    e922:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    e926:	f04f 0300 	mov.w	r3, #0
	int32_t ret = to == NULL ? MAX_WAIT
    e92a:	4613      	mov	r3, r2
    e92c:	e003      	b.n	e936 <next_timeout+0x72>
    e92e:	2300      	movs	r3, #0
    e930:	e001      	b.n	e936 <next_timeout+0x72>
    e932:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    e936:	60fb      	str	r3, [r7, #12]

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    e938:	4b08      	ldr	r3, [pc, #32]	; (e95c <next_timeout+0x98>)
    e93a:	691b      	ldr	r3, [r3, #16]
    e93c:	2b00      	cmp	r3, #0
    e93e:	d007      	beq.n	e950 <next_timeout+0x8c>
    e940:	4b06      	ldr	r3, [pc, #24]	; (e95c <next_timeout+0x98>)
    e942:	691b      	ldr	r3, [r3, #16]
    e944:	68fa      	ldr	r2, [r7, #12]
    e946:	429a      	cmp	r2, r3
    e948:	dd02      	ble.n	e950 <next_timeout+0x8c>
		ret = _current_cpu->slice_ticks;
    e94a:	4b04      	ldr	r3, [pc, #16]	; (e95c <next_timeout+0x98>)
    e94c:	691b      	ldr	r3, [r3, #16]
    e94e:	60fb      	str	r3, [r7, #12]
	}
#endif
	return ret;
    e950:	68fb      	ldr	r3, [r7, #12]
}
    e952:	4618      	mov	r0, r3
    e954:	3710      	adds	r7, #16
    e956:	46bd      	mov	sp, r7
    e958:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
    e95c:	20000c00 	.word	0x20000c00

0000e960 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    e960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    e964:	b09c      	sub	sp, #112	; 0x70
    e966:	af00      	add	r7, sp, #0
    e968:	6378      	str	r0, [r7, #52]	; 0x34
    e96a:	6339      	str	r1, [r7, #48]	; 0x30
    e96c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e970:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
    e974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e97c:	4299      	cmp	r1, r3
    e97e:	bf08      	it	eq
    e980:	4290      	cmpeq	r0, r2
    e982:	d100      	bne.n	e986 <z_add_timeout+0x26>
    e984:	e114      	b.n	ebb0 <z_add_timeout+0x250>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    e986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e988:	4618      	mov	r0, r3
    e98a:	f008 f864 	bl	16a56 <sys_dnode_is_linked>
    e98e:	4603      	mov	r3, r0
    e990:	2b00      	cmp	r3, #0
    e992:	d00c      	beq.n	e9ae <z_add_timeout+0x4e>
    e994:	235d      	movs	r3, #93	; 0x5d
    e996:	4a88      	ldr	r2, [pc, #544]	; (ebb8 <z_add_timeout+0x258>)
    e998:	4988      	ldr	r1, [pc, #544]	; (ebbc <z_add_timeout+0x25c>)
    e99a:	4889      	ldr	r0, [pc, #548]	; (ebc0 <z_add_timeout+0x260>)
    e99c:	f001 f96a 	bl	fc74 <printk>
    e9a0:	4888      	ldr	r0, [pc, #544]	; (ebc4 <z_add_timeout+0x264>)
    e9a2:	f001 f967 	bl	fc74 <printk>
    e9a6:	215d      	movs	r1, #93	; 0x5d
    e9a8:	4883      	ldr	r0, [pc, #524]	; (ebb8 <z_add_timeout+0x258>)
    e9aa:	f001 fdbf 	bl	1052c <assert_post_action>
	to->fn = fn;
    e9ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e9b2:	6093      	str	r3, [r2, #8]

	LOCKED(&timeout_lock) {
    e9b4:	2300      	movs	r3, #0
    e9b6:	647b      	str	r3, [r7, #68]	; 0x44
    e9b8:	4b83      	ldr	r3, [pc, #524]	; (ebc8 <z_add_timeout+0x268>)
    e9ba:	65bb      	str	r3, [r7, #88]	; 0x58
	__asm__ volatile(
    e9bc:	f04f 0220 	mov.w	r2, #32
    e9c0:	f3ef 8311 	mrs	r3, BASEPRI
    e9c4:	f382 8811 	msr	BASEPRI, r2
    e9c8:	f3bf 8f6f 	isb	sy
    e9cc:	657b      	str	r3, [r7, #84]	; 0x54
    e9ce:	653a      	str	r2, [r7, #80]	; 0x50
	return key;
    e9d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	k.key = arch_irq_lock();
    e9d2:	63bb      	str	r3, [r7, #56]	; 0x38
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    e9d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
    e9d6:	f7fc ffb5 	bl	b944 <z_spin_lock_valid>
    e9da:	4603      	mov	r3, r0
    e9dc:	f083 0301 	eor.w	r3, r3, #1
    e9e0:	b2db      	uxtb	r3, r3
    e9e2:	2b00      	cmp	r3, #0
    e9e4:	d00d      	beq.n	ea02 <z_add_timeout+0xa2>
    e9e6:	2381      	movs	r3, #129	; 0x81
    e9e8:	4a78      	ldr	r2, [pc, #480]	; (ebcc <z_add_timeout+0x26c>)
    e9ea:	4979      	ldr	r1, [pc, #484]	; (ebd0 <z_add_timeout+0x270>)
    e9ec:	4874      	ldr	r0, [pc, #464]	; (ebc0 <z_add_timeout+0x260>)
    e9ee:	f001 f941 	bl	fc74 <printk>
    e9f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
    e9f4:	4877      	ldr	r0, [pc, #476]	; (ebd4 <z_add_timeout+0x274>)
    e9f6:	f001 f93d 	bl	fc74 <printk>
    e9fa:	2181      	movs	r1, #129	; 0x81
    e9fc:	4873      	ldr	r0, [pc, #460]	; (ebcc <z_add_timeout+0x26c>)
    e9fe:	f001 fd95 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    ea02:	6db8      	ldr	r0, [r7, #88]	; 0x58
    ea04:	f7fc ffd6 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    ea08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ea0a:	643b      	str	r3, [r7, #64]	; 0x40
    ea0c:	e0cc      	b.n	eba8 <z_add_timeout+0x248>
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    ea0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
    ea12:	f06f 0201 	mvn.w	r2, #1
    ea16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ea1a:	1a14      	subs	r4, r2, r0
    ea1c:	623c      	str	r4, [r7, #32]
    ea1e:	eb63 0301 	sbc.w	r3, r3, r1
    ea22:	627b      	str	r3, [r7, #36]	; 0x24
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    ea24:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    ea28:	2b00      	cmp	r3, #0
    ea2a:	f174 0300 	sbcs.w	r3, r4, #0
    ea2e:	db26      	blt.n	ea7e <z_add_timeout+0x11e>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    ea30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    ea34:	4610      	mov	r0, r2
    ea36:	4619      	mov	r1, r3
    ea38:	4b67      	ldr	r3, [pc, #412]	; (ebd8 <z_add_timeout+0x278>)
    ea3a:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea3e:	eb10 0802 	adds.w	r8, r0, r2
    ea42:	eb41 0903 	adc.w	r9, r1, r3
    ea46:	f06f 0201 	mvn.w	r2, #1
    ea4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ea4e:	ebb2 0108 	subs.w	r1, r2, r8
    ea52:	61b9      	str	r1, [r7, #24]
    ea54:	eb63 0309 	sbc.w	r3, r3, r9
    ea58:	61fb      	str	r3, [r7, #28]
    ea5a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
    ea5e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			to->dticks = MAX(1, ticks);
    ea62:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    ea66:	2a01      	cmp	r2, #1
    ea68:	f173 0100 	sbcs.w	r1, r3, #0
    ea6c:	da03      	bge.n	ea76 <z_add_timeout+0x116>
    ea6e:	f04f 0201 	mov.w	r2, #1
    ea72:	f04f 0300 	mov.w	r3, #0
    ea76:	6b79      	ldr	r1, [r7, #52]	; 0x34
    ea78:	e9c1 2304 	strd	r2, r3, [r1, #16]
    ea7c:	e016      	b.n	eaac <z_add_timeout+0x14c>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    ea7e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
    ea82:	f7ff ff0f 	bl	e8a4 <elapsed>
    ea86:	4603      	mov	r3, r0
    ea88:	461a      	mov	r2, r3
    ea8a:	ea4f 73e2 	mov.w	r3, r2, asr #31
    ea8e:	eb14 0a02 	adds.w	sl, r4, r2
    ea92:	eb45 0b03 	adc.w	fp, r5, r3
    ea96:	f11a 0301 	adds.w	r3, sl, #1
    ea9a:	613b      	str	r3, [r7, #16]
    ea9c:	f14b 0300 	adc.w	r3, fp, #0
    eaa0:	617b      	str	r3, [r7, #20]
    eaa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    eaa4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    eaa8:	e9c3 1204 	strd	r1, r2, [r3, #16]
		}

		for (t = first(); t != NULL; t = next(t)) {
    eaac:	f7ff feda 	bl	e864 <first>
    eab0:	66f8      	str	r0, [r7, #108]	; 0x6c
    eab2:	e033      	b.n	eb1c <z_add_timeout+0x1bc>
			if (t->dticks > to->dticks) {
    eab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    eab6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    eaba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    eabc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    eac0:	4282      	cmp	r2, r0
    eac2:	418b      	sbcs	r3, r1
    eac4:	da16      	bge.n	eaf4 <z_add_timeout+0x194>
				t->dticks -= to->dticks;
    eac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    eac8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    eacc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    eace:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    ead2:	1a84      	subs	r4, r0, r2
    ead4:	60bc      	str	r4, [r7, #8]
    ead6:	eb61 0303 	sbc.w	r3, r1, r3
    eada:	60fb      	str	r3, [r7, #12]
    eadc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    eade:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    eae2:	e9c3 1204 	strd	r1, r2, [r3, #16]
				sys_dlist_insert(&t->node, &to->node);
    eae6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    eae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    eaea:	4619      	mov	r1, r3
    eaec:	4610      	mov	r0, r2
    eaee:	f008 f824 	bl	16b3a <sys_dlist_insert>
				break;
    eaf2:	e016      	b.n	eb22 <z_add_timeout+0x1c2>
			}
			to->dticks -= t->dticks;
    eaf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    eaf6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    eafa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    eafc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    eb00:	1a84      	subs	r4, r0, r2
    eb02:	603c      	str	r4, [r7, #0]
    eb04:	eb61 0303 	sbc.w	r3, r1, r3
    eb08:	607b      	str	r3, [r7, #4]
    eb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    eb0c:	e9d7 1200 	ldrd	r1, r2, [r7]
    eb10:	e9c3 1204 	strd	r1, r2, [r3, #16]
		for (t = first(); t != NULL; t = next(t)) {
    eb14:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    eb16:	f7ff feb3 	bl	e880 <next>
    eb1a:	66f8      	str	r0, [r7, #108]	; 0x6c
    eb1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    eb1e:	2b00      	cmp	r3, #0
    eb20:	d1c8      	bne.n	eab4 <z_add_timeout+0x154>
		}

		if (t == NULL) {
    eb22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    eb24:	2b00      	cmp	r3, #0
    eb26:	d104      	bne.n	eb32 <z_add_timeout+0x1d2>
			sys_dlist_append(&timeout_list, &to->node);
    eb28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    eb2a:	4619      	mov	r1, r3
    eb2c:	482b      	ldr	r0, [pc, #172]	; (ebdc <z_add_timeout+0x27c>)
    eb2e:	f007 ffeb 	bl	16b08 <sys_dlist_append>
		}

		if (to == first()) {
    eb32:	f7ff fe97 	bl	e864 <first>
    eb36:	4602      	mov	r2, r0
    eb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    eb3a:	4293      	cmp	r3, r2
    eb3c:	d10e      	bne.n	eb5c <z_add_timeout+0x1fc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    eb3e:	f7ff fec1 	bl	e8c4 <next_timeout>
    eb42:	65f8      	str	r0, [r7, #92]	; 0x5c

			if (next_time == 0 ||
    eb44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    eb46:	2b00      	cmp	r3, #0
    eb48:	d004      	beq.n	eb54 <z_add_timeout+0x1f4>
			    _current_cpu->slice_ticks != next_time) {
    eb4a:	4b25      	ldr	r3, [pc, #148]	; (ebe0 <z_add_timeout+0x280>)
    eb4c:	691a      	ldr	r2, [r3, #16]
			if (next_time == 0 ||
    eb4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    eb50:	4293      	cmp	r3, r2
    eb52:	d003      	beq.n	eb5c <z_add_timeout+0x1fc>
				sys_clock_set_timeout(next_time, false);
    eb54:	2100      	movs	r1, #0
    eb56:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    eb58:	f7f6 fbc4 	bl	52e4 <sys_clock_set_timeout>
    eb5c:	4b1a      	ldr	r3, [pc, #104]	; (ebc8 <z_add_timeout+0x268>)
    eb5e:	64fb      	str	r3, [r7, #76]	; 0x4c
    eb60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    eb62:	63fb      	str	r3, [r7, #60]	; 0x3c
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    eb64:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    eb66:	f7fc ff09 	bl	b97c <z_spin_unlock_valid>
    eb6a:	4603      	mov	r3, r0
    eb6c:	f083 0301 	eor.w	r3, r3, #1
    eb70:	b2db      	uxtb	r3, r3
    eb72:	2b00      	cmp	r3, #0
    eb74:	d00d      	beq.n	eb92 <z_add_timeout+0x232>
    eb76:	23ac      	movs	r3, #172	; 0xac
    eb78:	4a14      	ldr	r2, [pc, #80]	; (ebcc <z_add_timeout+0x26c>)
    eb7a:	491a      	ldr	r1, [pc, #104]	; (ebe4 <z_add_timeout+0x284>)
    eb7c:	4810      	ldr	r0, [pc, #64]	; (ebc0 <z_add_timeout+0x260>)
    eb7e:	f001 f879 	bl	fc74 <printk>
    eb82:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    eb84:	4818      	ldr	r0, [pc, #96]	; (ebe8 <z_add_timeout+0x288>)
    eb86:	f001 f875 	bl	fc74 <printk>
    eb8a:	21ac      	movs	r1, #172	; 0xac
    eb8c:	480f      	ldr	r0, [pc, #60]	; (ebcc <z_add_timeout+0x26c>)
    eb8e:	f001 fccd 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    eb92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    eb94:	64bb      	str	r3, [r7, #72]	; 0x48
	__asm__ volatile(
    eb96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    eb98:	f383 8811 	msr	BASEPRI, r3
    eb9c:	f3bf 8f6f 	isb	sy
}
    eba0:	bf00      	nop
}
    eba2:	bf00      	nop
	LOCKED(&timeout_lock) {
    eba4:	2301      	movs	r3, #1
    eba6:	647b      	str	r3, [r7, #68]	; 0x44
    eba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ebaa:	2b00      	cmp	r3, #0
    ebac:	f43f af2f 	beq.w	ea0e <z_add_timeout+0xae>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    ebb0:	3770      	adds	r7, #112	; 0x70
    ebb2:	46bd      	mov	sp, r7
    ebb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
    ebb8:	0001a8f8 	.word	0x0001a8f8
    ebbc:	0001a91c 	.word	0x0001a91c
    ebc0:	0001a93c 	.word	0x0001a93c
    ebc4:	0001a95c 	.word	0x0001a95c
    ebc8:	20000c48 	.word	0x20000c48
    ebcc:	0001a960 	.word	0x0001a960
    ebd0:	0001a988 	.word	0x0001a988
    ebd4:	0001a9a0 	.word	0x0001a9a0
    ebd8:	200004e0 	.word	0x200004e0
    ebdc:	20000178 	.word	0x20000178
    ebe0:	20000c00 	.word	0x20000c00
    ebe4:	0001a9b8 	.word	0x0001a9b8
    ebe8:	0001a9d0 	.word	0x0001a9d0

0000ebec <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    ebec:	b580      	push	{r7, lr}
    ebee:	b08c      	sub	sp, #48	; 0x30
    ebf0:	af00      	add	r7, sp, #0
    ebf2:	6078      	str	r0, [r7, #4]
	int ret = -EINVAL;
    ebf4:	f06f 0315 	mvn.w	r3, #21
    ebf8:	62fb      	str	r3, [r7, #44]	; 0x2c

	LOCKED(&timeout_lock) {
    ebfa:	2300      	movs	r3, #0
    ebfc:	617b      	str	r3, [r7, #20]
    ebfe:	4b32      	ldr	r3, [pc, #200]	; (ecc8 <z_abort_timeout+0xdc>)
    ec00:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
    ec02:	f04f 0320 	mov.w	r3, #32
    ec06:	f3ef 8211 	mrs	r2, BASEPRI
    ec0a:	f383 8811 	msr	BASEPRI, r3
    ec0e:	f3bf 8f6f 	isb	sy
    ec12:	627a      	str	r2, [r7, #36]	; 0x24
    ec14:	623b      	str	r3, [r7, #32]
	return key;
    ec16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	k.key = arch_irq_lock();
    ec18:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ec1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ec1c:	f7fc fe92 	bl	b944 <z_spin_lock_valid>
    ec20:	4603      	mov	r3, r0
    ec22:	f083 0301 	eor.w	r3, r3, #1
    ec26:	b2db      	uxtb	r3, r3
    ec28:	2b00      	cmp	r3, #0
    ec2a:	d00d      	beq.n	ec48 <z_abort_timeout+0x5c>
    ec2c:	2381      	movs	r3, #129	; 0x81
    ec2e:	4a27      	ldr	r2, [pc, #156]	; (eccc <z_abort_timeout+0xe0>)
    ec30:	4927      	ldr	r1, [pc, #156]	; (ecd0 <z_abort_timeout+0xe4>)
    ec32:	4828      	ldr	r0, [pc, #160]	; (ecd4 <z_abort_timeout+0xe8>)
    ec34:	f001 f81e 	bl	fc74 <printk>
    ec38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    ec3a:	4827      	ldr	r0, [pc, #156]	; (ecd8 <z_abort_timeout+0xec>)
    ec3c:	f001 f81a 	bl	fc74 <printk>
    ec40:	2181      	movs	r1, #129	; 0x81
    ec42:	4822      	ldr	r0, [pc, #136]	; (eccc <z_abort_timeout+0xe0>)
    ec44:	f001 fc72 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    ec48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    ec4a:	f7fc feb3 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    ec4e:	68bb      	ldr	r3, [r7, #8]
    ec50:	613b      	str	r3, [r7, #16]
    ec52:	e031      	b.n	ecb8 <z_abort_timeout+0xcc>
		if (sys_dnode_is_linked(&to->node)) {
    ec54:	687b      	ldr	r3, [r7, #4]
    ec56:	4618      	mov	r0, r3
    ec58:	f007 fefd 	bl	16a56 <sys_dnode_is_linked>
    ec5c:	4603      	mov	r3, r0
    ec5e:	2b00      	cmp	r3, #0
    ec60:	d004      	beq.n	ec6c <z_abort_timeout+0x80>
			remove_timeout(to);
    ec62:	6878      	ldr	r0, [r7, #4]
    ec64:	f007 ff99 	bl	16b9a <remove_timeout>
			ret = 0;
    ec68:	2300      	movs	r3, #0
    ec6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    ec6c:	4b16      	ldr	r3, [pc, #88]	; (ecc8 <z_abort_timeout+0xdc>)
    ec6e:	61fb      	str	r3, [r7, #28]
    ec70:	693b      	ldr	r3, [r7, #16]
    ec72:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ec74:	69f8      	ldr	r0, [r7, #28]
    ec76:	f7fc fe81 	bl	b97c <z_spin_unlock_valid>
    ec7a:	4603      	mov	r3, r0
    ec7c:	f083 0301 	eor.w	r3, r3, #1
    ec80:	b2db      	uxtb	r3, r3
    ec82:	2b00      	cmp	r3, #0
    ec84:	d00d      	beq.n	eca2 <z_abort_timeout+0xb6>
    ec86:	23ac      	movs	r3, #172	; 0xac
    ec88:	4a10      	ldr	r2, [pc, #64]	; (eccc <z_abort_timeout+0xe0>)
    ec8a:	4914      	ldr	r1, [pc, #80]	; (ecdc <z_abort_timeout+0xf0>)
    ec8c:	4811      	ldr	r0, [pc, #68]	; (ecd4 <z_abort_timeout+0xe8>)
    ec8e:	f000 fff1 	bl	fc74 <printk>
    ec92:	69f9      	ldr	r1, [r7, #28]
    ec94:	4812      	ldr	r0, [pc, #72]	; (ece0 <z_abort_timeout+0xf4>)
    ec96:	f000 ffed 	bl	fc74 <printk>
    ec9a:	21ac      	movs	r1, #172	; 0xac
    ec9c:	480b      	ldr	r0, [pc, #44]	; (eccc <z_abort_timeout+0xe0>)
    ec9e:	f001 fc45 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    eca2:	68fb      	ldr	r3, [r7, #12]
    eca4:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
    eca6:	69bb      	ldr	r3, [r7, #24]
    eca8:	f383 8811 	msr	BASEPRI, r3
    ecac:	f3bf 8f6f 	isb	sy
}
    ecb0:	bf00      	nop
}
    ecb2:	bf00      	nop
	LOCKED(&timeout_lock) {
    ecb4:	2301      	movs	r3, #1
    ecb6:	617b      	str	r3, [r7, #20]
    ecb8:	697b      	ldr	r3, [r7, #20]
    ecba:	2b00      	cmp	r3, #0
    ecbc:	d0ca      	beq.n	ec54 <z_abort_timeout+0x68>
		}
	}

	return ret;
    ecbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    ecc0:	4618      	mov	r0, r3
    ecc2:	3730      	adds	r7, #48	; 0x30
    ecc4:	46bd      	mov	sp, r7
    ecc6:	bd80      	pop	{r7, pc}
    ecc8:	20000c48 	.word	0x20000c48
    eccc:	0001a960 	.word	0x0001a960
    ecd0:	0001a988 	.word	0x0001a988
    ecd4:	0001a93c 	.word	0x0001a93c
    ecd8:	0001a9a0 	.word	0x0001a9a0
    ecdc:	0001a9b8 	.word	0x0001a9b8
    ece0:	0001a9d0 	.word	0x0001a9d0

0000ece4 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    ece4:	b580      	push	{r7, lr}
    ece6:	b08a      	sub	sp, #40	; 0x28
    ece8:	af00      	add	r7, sp, #0
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    ecea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ecee:	627b      	str	r3, [r7, #36]	; 0x24

	LOCKED(&timeout_lock) {
    ecf0:	2300      	movs	r3, #0
    ecf2:	60fb      	str	r3, [r7, #12]
    ecf4:	4b2d      	ldr	r3, [pc, #180]	; (edac <z_get_next_timeout_expiry+0xc8>)
    ecf6:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
    ecf8:	f04f 0320 	mov.w	r3, #32
    ecfc:	f3ef 8211 	mrs	r2, BASEPRI
    ed00:	f383 8811 	msr	BASEPRI, r3
    ed04:	f3bf 8f6f 	isb	sy
    ed08:	61fa      	str	r2, [r7, #28]
    ed0a:	61bb      	str	r3, [r7, #24]
	return key;
    ed0c:	69fb      	ldr	r3, [r7, #28]
	k.key = arch_irq_lock();
    ed0e:	603b      	str	r3, [r7, #0]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ed10:	6a38      	ldr	r0, [r7, #32]
    ed12:	f7fc fe17 	bl	b944 <z_spin_lock_valid>
    ed16:	4603      	mov	r3, r0
    ed18:	f083 0301 	eor.w	r3, r3, #1
    ed1c:	b2db      	uxtb	r3, r3
    ed1e:	2b00      	cmp	r3, #0
    ed20:	d00d      	beq.n	ed3e <z_get_next_timeout_expiry+0x5a>
    ed22:	2381      	movs	r3, #129	; 0x81
    ed24:	4a22      	ldr	r2, [pc, #136]	; (edb0 <z_get_next_timeout_expiry+0xcc>)
    ed26:	4923      	ldr	r1, [pc, #140]	; (edb4 <z_get_next_timeout_expiry+0xd0>)
    ed28:	4823      	ldr	r0, [pc, #140]	; (edb8 <z_get_next_timeout_expiry+0xd4>)
    ed2a:	f000 ffa3 	bl	fc74 <printk>
    ed2e:	6a39      	ldr	r1, [r7, #32]
    ed30:	4822      	ldr	r0, [pc, #136]	; (edbc <z_get_next_timeout_expiry+0xd8>)
    ed32:	f000 ff9f 	bl	fc74 <printk>
    ed36:	2181      	movs	r1, #129	; 0x81
    ed38:	481d      	ldr	r0, [pc, #116]	; (edb0 <z_get_next_timeout_expiry+0xcc>)
    ed3a:	f001 fbf7 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    ed3e:	6a38      	ldr	r0, [r7, #32]
    ed40:	f7fc fe38 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    ed44:	683b      	ldr	r3, [r7, #0]
    ed46:	60bb      	str	r3, [r7, #8]
    ed48:	e028      	b.n	ed9c <z_get_next_timeout_expiry+0xb8>
		ret = next_timeout();
    ed4a:	f7ff fdbb 	bl	e8c4 <next_timeout>
    ed4e:	6278      	str	r0, [r7, #36]	; 0x24
    ed50:	4b16      	ldr	r3, [pc, #88]	; (edac <z_get_next_timeout_expiry+0xc8>)
    ed52:	617b      	str	r3, [r7, #20]
    ed54:	68bb      	ldr	r3, [r7, #8]
    ed56:	607b      	str	r3, [r7, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ed58:	6978      	ldr	r0, [r7, #20]
    ed5a:	f7fc fe0f 	bl	b97c <z_spin_unlock_valid>
    ed5e:	4603      	mov	r3, r0
    ed60:	f083 0301 	eor.w	r3, r3, #1
    ed64:	b2db      	uxtb	r3, r3
    ed66:	2b00      	cmp	r3, #0
    ed68:	d00d      	beq.n	ed86 <z_get_next_timeout_expiry+0xa2>
    ed6a:	23ac      	movs	r3, #172	; 0xac
    ed6c:	4a10      	ldr	r2, [pc, #64]	; (edb0 <z_get_next_timeout_expiry+0xcc>)
    ed6e:	4914      	ldr	r1, [pc, #80]	; (edc0 <z_get_next_timeout_expiry+0xdc>)
    ed70:	4811      	ldr	r0, [pc, #68]	; (edb8 <z_get_next_timeout_expiry+0xd4>)
    ed72:	f000 ff7f 	bl	fc74 <printk>
    ed76:	6979      	ldr	r1, [r7, #20]
    ed78:	4812      	ldr	r0, [pc, #72]	; (edc4 <z_get_next_timeout_expiry+0xe0>)
    ed7a:	f000 ff7b 	bl	fc74 <printk>
    ed7e:	21ac      	movs	r1, #172	; 0xac
    ed80:	480b      	ldr	r0, [pc, #44]	; (edb0 <z_get_next_timeout_expiry+0xcc>)
    ed82:	f001 fbd3 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    ed86:	687b      	ldr	r3, [r7, #4]
    ed88:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
    ed8a:	693b      	ldr	r3, [r7, #16]
    ed8c:	f383 8811 	msr	BASEPRI, r3
    ed90:	f3bf 8f6f 	isb	sy
}
    ed94:	bf00      	nop
}
    ed96:	bf00      	nop
	LOCKED(&timeout_lock) {
    ed98:	2301      	movs	r3, #1
    ed9a:	60fb      	str	r3, [r7, #12]
    ed9c:	68fb      	ldr	r3, [r7, #12]
    ed9e:	2b00      	cmp	r3, #0
    eda0:	d0d3      	beq.n	ed4a <z_get_next_timeout_expiry+0x66>
	}
	return ret;
    eda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    eda4:	4618      	mov	r0, r3
    eda6:	3728      	adds	r7, #40	; 0x28
    eda8:	46bd      	mov	sp, r7
    edaa:	bd80      	pop	{r7, pc}
    edac:	20000c48 	.word	0x20000c48
    edb0:	0001a960 	.word	0x0001a960
    edb4:	0001a988 	.word	0x0001a988
    edb8:	0001a93c 	.word	0x0001a93c
    edbc:	0001a9a0 	.word	0x0001a9a0
    edc0:	0001a9b8 	.word	0x0001a9b8
    edc4:	0001a9d0 	.word	0x0001a9d0

0000edc8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    edc8:	b580      	push	{r7, lr}
    edca:	b08e      	sub	sp, #56	; 0x38
    edcc:	af00      	add	r7, sp, #0
    edce:	6078      	str	r0, [r7, #4]
    edd0:	460b      	mov	r3, r1
    edd2:	70fb      	strb	r3, [r7, #3]
	LOCKED(&timeout_lock) {
    edd4:	2300      	movs	r3, #0
    edd6:	61bb      	str	r3, [r7, #24]
    edd8:	4b45      	ldr	r3, [pc, #276]	; (eef0 <z_set_timeout_expiry+0x128>)
    edda:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
    eddc:	f04f 0320 	mov.w	r3, #32
    ede0:	f3ef 8211 	mrs	r2, BASEPRI
    ede4:	f383 8811 	msr	BASEPRI, r3
    ede8:	f3bf 8f6f 	isb	sy
    edec:	62ba      	str	r2, [r7, #40]	; 0x28
    edee:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
    edf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
    edf2:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    edf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    edf6:	f7fc fda5 	bl	b944 <z_spin_lock_valid>
    edfa:	4603      	mov	r3, r0
    edfc:	f083 0301 	eor.w	r3, r3, #1
    ee00:	b2db      	uxtb	r3, r3
    ee02:	2b00      	cmp	r3, #0
    ee04:	d00d      	beq.n	ee22 <z_set_timeout_expiry+0x5a>
    ee06:	2381      	movs	r3, #129	; 0x81
    ee08:	4a3a      	ldr	r2, [pc, #232]	; (eef4 <z_set_timeout_expiry+0x12c>)
    ee0a:	493b      	ldr	r1, [pc, #236]	; (eef8 <z_set_timeout_expiry+0x130>)
    ee0c:	483b      	ldr	r0, [pc, #236]	; (eefc <z_set_timeout_expiry+0x134>)
    ee0e:	f000 ff31 	bl	fc74 <printk>
    ee12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    ee14:	483a      	ldr	r0, [pc, #232]	; (ef00 <z_set_timeout_expiry+0x138>)
    ee16:	f000 ff2d 	bl	fc74 <printk>
    ee1a:	2181      	movs	r1, #129	; 0x81
    ee1c:	4835      	ldr	r0, [pc, #212]	; (eef4 <z_set_timeout_expiry+0x12c>)
    ee1e:	f001 fb85 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    ee22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    ee24:	f7fc fdc6 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    ee28:	68fb      	ldr	r3, [r7, #12]
    ee2a:	617b      	str	r3, [r7, #20]
    ee2c:	e057      	b.n	eede <z_set_timeout_expiry+0x116>
		int next_to = next_timeout();
    ee2e:	f7ff fd49 	bl	e8c4 <next_timeout>
    ee32:	6378      	str	r0, [r7, #52]	; 0x34
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    ee34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ee36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    ee3a:	d003      	beq.n	ee44 <z_set_timeout_expiry+0x7c>
    ee3c:	687a      	ldr	r2, [r7, #4]
    ee3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ee40:	429a      	cmp	r2, r3
    ee42:	dc01      	bgt.n	ee48 <z_set_timeout_expiry+0x80>
    ee44:	2301      	movs	r3, #1
    ee46:	e000      	b.n	ee4a <z_set_timeout_expiry+0x82>
    ee48:	2300      	movs	r3, #0
		bool sooner = (next_to == K_TICKS_FOREVER)
    ee4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    ee4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    ee52:	f003 0301 	and.w	r3, r3, #1
    ee56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		bool imminent = next_to <= 1;
    ee5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ee5c:	2b01      	cmp	r3, #1
    ee5e:	bfd4      	ite	le
    ee60:	2301      	movle	r3, #1
    ee62:	2300      	movgt	r3, #0
    ee64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    ee68:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
    ee6c:	f083 0301 	eor.w	r3, r3, #1
    ee70:	b2db      	uxtb	r3, r3
    ee72:	2b00      	cmp	r3, #0
    ee74:	d00d      	beq.n	ee92 <z_set_timeout_expiry+0xca>
    ee76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    ee7a:	2b00      	cmp	r3, #0
    ee7c:	d009      	beq.n	ee92 <z_set_timeout_expiry+0xca>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    ee7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    ee80:	687b      	ldr	r3, [r7, #4]
    ee82:	4293      	cmp	r3, r2
    ee84:	bfa8      	it	ge
    ee86:	4613      	movge	r3, r2
    ee88:	78fa      	ldrb	r2, [r7, #3]
    ee8a:	4611      	mov	r1, r2
    ee8c:	4618      	mov	r0, r3
    ee8e:	f7f6 fa29 	bl	52e4 <sys_clock_set_timeout>
    ee92:	4b17      	ldr	r3, [pc, #92]	; (eef0 <z_set_timeout_expiry+0x128>)
    ee94:	623b      	str	r3, [r7, #32]
    ee96:	697b      	ldr	r3, [r7, #20]
    ee98:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    ee9a:	6a38      	ldr	r0, [r7, #32]
    ee9c:	f7fc fd6e 	bl	b97c <z_spin_unlock_valid>
    eea0:	4603      	mov	r3, r0
    eea2:	f083 0301 	eor.w	r3, r3, #1
    eea6:	b2db      	uxtb	r3, r3
    eea8:	2b00      	cmp	r3, #0
    eeaa:	d00d      	beq.n	eec8 <z_set_timeout_expiry+0x100>
    eeac:	23ac      	movs	r3, #172	; 0xac
    eeae:	4a11      	ldr	r2, [pc, #68]	; (eef4 <z_set_timeout_expiry+0x12c>)
    eeb0:	4914      	ldr	r1, [pc, #80]	; (ef04 <z_set_timeout_expiry+0x13c>)
    eeb2:	4812      	ldr	r0, [pc, #72]	; (eefc <z_set_timeout_expiry+0x134>)
    eeb4:	f000 fede 	bl	fc74 <printk>
    eeb8:	6a39      	ldr	r1, [r7, #32]
    eeba:	4813      	ldr	r0, [pc, #76]	; (ef08 <z_set_timeout_expiry+0x140>)
    eebc:	f000 feda 	bl	fc74 <printk>
    eec0:	21ac      	movs	r1, #172	; 0xac
    eec2:	480c      	ldr	r0, [pc, #48]	; (eef4 <z_set_timeout_expiry+0x12c>)
    eec4:	f001 fb32 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    eec8:	693b      	ldr	r3, [r7, #16]
    eeca:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    eecc:	69fb      	ldr	r3, [r7, #28]
    eece:	f383 8811 	msr	BASEPRI, r3
    eed2:	f3bf 8f6f 	isb	sy
}
    eed6:	bf00      	nop
}
    eed8:	bf00      	nop
	LOCKED(&timeout_lock) {
    eeda:	2301      	movs	r3, #1
    eedc:	61bb      	str	r3, [r7, #24]
    eede:	69bb      	ldr	r3, [r7, #24]
    eee0:	2b00      	cmp	r3, #0
    eee2:	d0a4      	beq.n	ee2e <z_set_timeout_expiry+0x66>
		}
	}
}
    eee4:	bf00      	nop
    eee6:	bf00      	nop
    eee8:	3738      	adds	r7, #56	; 0x38
    eeea:	46bd      	mov	sp, r7
    eeec:	bd80      	pop	{r7, pc}
    eeee:	bf00      	nop
    eef0:	20000c48 	.word	0x20000c48
    eef4:	0001a960 	.word	0x0001a960
    eef8:	0001a988 	.word	0x0001a988
    eefc:	0001a93c 	.word	0x0001a93c
    ef00:	0001a9a0 	.word	0x0001a9a0
    ef04:	0001a9b8 	.word	0x0001a9b8
    ef08:	0001a9d0 	.word	0x0001a9d0

0000ef0c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    ef0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ef10:	b095      	sub	sp, #84	; 0x54
    ef12:	af00      	add	r7, sp, #0
    ef14:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    ef16:	6878      	ldr	r0, [r7, #4]
    ef18:	f7fd ff0e 	bl	cd38 <z_time_slice>
    ef1c:	4b87      	ldr	r3, [pc, #540]	; (f13c <sys_clock_announce+0x230>)
    ef1e:	647b      	str	r3, [r7, #68]	; 0x44
	__asm__ volatile(
    ef20:	f04f 0320 	mov.w	r3, #32
    ef24:	f3ef 8211 	mrs	r2, BASEPRI
    ef28:	f383 8811 	msr	BASEPRI, r3
    ef2c:	f3bf 8f6f 	isb	sy
    ef30:	643a      	str	r2, [r7, #64]	; 0x40
    ef32:	63fb      	str	r3, [r7, #60]	; 0x3c
	return key;
    ef34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	k.key = arch_irq_lock();
    ef36:	617b      	str	r3, [r7, #20]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    ef38:	6c78      	ldr	r0, [r7, #68]	; 0x44
    ef3a:	f7fc fd03 	bl	b944 <z_spin_lock_valid>
    ef3e:	4603      	mov	r3, r0
    ef40:	f083 0301 	eor.w	r3, r3, #1
    ef44:	b2db      	uxtb	r3, r3
    ef46:	2b00      	cmp	r3, #0
    ef48:	d00d      	beq.n	ef66 <sys_clock_announce+0x5a>
    ef4a:	2381      	movs	r3, #129	; 0x81
    ef4c:	4a7c      	ldr	r2, [pc, #496]	; (f140 <sys_clock_announce+0x234>)
    ef4e:	497d      	ldr	r1, [pc, #500]	; (f144 <sys_clock_announce+0x238>)
    ef50:	487d      	ldr	r0, [pc, #500]	; (f148 <sys_clock_announce+0x23c>)
    ef52:	f000 fe8f 	bl	fc74 <printk>
    ef56:	6c79      	ldr	r1, [r7, #68]	; 0x44
    ef58:	487c      	ldr	r0, [pc, #496]	; (f14c <sys_clock_announce+0x240>)
    ef5a:	f000 fe8b 	bl	fc74 <printk>
    ef5e:	2181      	movs	r1, #129	; 0x81
    ef60:	4877      	ldr	r0, [pc, #476]	; (f140 <sys_clock_announce+0x234>)
    ef62:	f001 fae3 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    ef66:	6c78      	ldr	r0, [r7, #68]	; 0x44
    ef68:	f7fc fd24 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    ef6c:	697b      	ldr	r3, [r7, #20]
    ef6e:	61fb      	str	r3, [r7, #28]
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    ef70:	4a77      	ldr	r2, [pc, #476]	; (f150 <sys_clock_announce+0x244>)
    ef72:	687b      	ldr	r3, [r7, #4]
    ef74:	6013      	str	r3, [r2, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    ef76:	e077      	b.n	f068 <sys_clock_announce+0x15c>
		struct _timeout *t = first();
    ef78:	f7ff fc74 	bl	e864 <first>
    ef7c:	64f8      	str	r0, [r7, #76]	; 0x4c
		int dt = t->dticks;
    ef7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    ef80:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    ef84:	4613      	mov	r3, r2
    ef86:	64bb      	str	r3, [r7, #72]	; 0x48

		curr_tick += dt;
    ef88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    ef8a:	4618      	mov	r0, r3
    ef8c:	ea4f 71e0 	mov.w	r1, r0, asr #31
    ef90:	4b70      	ldr	r3, [pc, #448]	; (f154 <sys_clock_announce+0x248>)
    ef92:	e9d3 2300 	ldrd	r2, r3, [r3]
    ef96:	eb10 0a02 	adds.w	sl, r0, r2
    ef9a:	eb41 0b03 	adc.w	fp, r1, r3
    ef9e:	4b6d      	ldr	r3, [pc, #436]	; (f154 <sys_clock_announce+0x248>)
    efa0:	e9c3 ab00 	strd	sl, fp, [r3]
		announce_remaining -= dt;
    efa4:	4b6a      	ldr	r3, [pc, #424]	; (f150 <sys_clock_announce+0x244>)
    efa6:	681a      	ldr	r2, [r3, #0]
    efa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    efaa:	1ad3      	subs	r3, r2, r3
    efac:	4a68      	ldr	r2, [pc, #416]	; (f150 <sys_clock_announce+0x244>)
    efae:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    efb0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    efb2:	f04f 0200 	mov.w	r2, #0
    efb6:	f04f 0300 	mov.w	r3, #0
    efba:	e9c1 2304 	strd	r2, r3, [r1, #16]
		remove_timeout(t);
    efbe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    efc0:	f007 fdeb 	bl	16b9a <remove_timeout>
    efc4:	4b5d      	ldr	r3, [pc, #372]	; (f13c <sys_clock_announce+0x230>)
    efc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    efc8:	69fb      	ldr	r3, [r7, #28]
    efca:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    efcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    efce:	f7fc fcd5 	bl	b97c <z_spin_unlock_valid>
    efd2:	4603      	mov	r3, r0
    efd4:	f083 0301 	eor.w	r3, r3, #1
    efd8:	b2db      	uxtb	r3, r3
    efda:	2b00      	cmp	r3, #0
    efdc:	d00d      	beq.n	effa <sys_clock_announce+0xee>
    efde:	23ac      	movs	r3, #172	; 0xac
    efe0:	4a57      	ldr	r2, [pc, #348]	; (f140 <sys_clock_announce+0x234>)
    efe2:	495d      	ldr	r1, [pc, #372]	; (f158 <sys_clock_announce+0x24c>)
    efe4:	4858      	ldr	r0, [pc, #352]	; (f148 <sys_clock_announce+0x23c>)
    efe6:	f000 fe45 	bl	fc74 <printk>
    efea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    efec:	485b      	ldr	r0, [pc, #364]	; (f15c <sys_clock_announce+0x250>)
    efee:	f000 fe41 	bl	fc74 <printk>
    eff2:	21ac      	movs	r1, #172	; 0xac
    eff4:	4852      	ldr	r0, [pc, #328]	; (f140 <sys_clock_announce+0x234>)
    eff6:	f001 fa99 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    effa:	693b      	ldr	r3, [r7, #16]
    effc:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
    effe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f000:	f383 8811 	msr	BASEPRI, r3
    f004:	f3bf 8f6f 	isb	sy
}
    f008:	bf00      	nop
}
    f00a:	bf00      	nop

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    f00c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    f00e:	689b      	ldr	r3, [r3, #8]
    f010:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    f012:	4798      	blx	r3
    f014:	4b49      	ldr	r3, [pc, #292]	; (f13c <sys_clock_announce+0x230>)
    f016:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
    f018:	f04f 0320 	mov.w	r3, #32
    f01c:	f3ef 8211 	mrs	r2, BASEPRI
    f020:	f383 8811 	msr	BASEPRI, r3
    f024:	f3bf 8f6f 	isb	sy
    f028:	637a      	str	r2, [r7, #52]	; 0x34
    f02a:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
    f02c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	k.key = arch_irq_lock();
    f02e:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f030:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    f032:	f7fc fc87 	bl	b944 <z_spin_lock_valid>
    f036:	4603      	mov	r3, r0
    f038:	f083 0301 	eor.w	r3, r3, #1
    f03c:	b2db      	uxtb	r3, r3
    f03e:	2b00      	cmp	r3, #0
    f040:	d00d      	beq.n	f05e <sys_clock_announce+0x152>
    f042:	2381      	movs	r3, #129	; 0x81
    f044:	4a3e      	ldr	r2, [pc, #248]	; (f140 <sys_clock_announce+0x234>)
    f046:	493f      	ldr	r1, [pc, #252]	; (f144 <sys_clock_announce+0x238>)
    f048:	483f      	ldr	r0, [pc, #252]	; (f148 <sys_clock_announce+0x23c>)
    f04a:	f000 fe13 	bl	fc74 <printk>
    f04e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    f050:	483e      	ldr	r0, [pc, #248]	; (f14c <sys_clock_announce+0x240>)
    f052:	f000 fe0f 	bl	fc74 <printk>
    f056:	2181      	movs	r1, #129	; 0x81
    f058:	4839      	ldr	r0, [pc, #228]	; (f140 <sys_clock_announce+0x234>)
    f05a:	f001 fa67 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    f05e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    f060:	f7fc fca8 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    f064:	68fb      	ldr	r3, [r7, #12]
    f066:	61fb      	str	r3, [r7, #28]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    f068:	f7ff fbfc 	bl	e864 <first>
    f06c:	4603      	mov	r3, r0
    f06e:	2b00      	cmp	r3, #0
    f070:	d00e      	beq.n	f090 <sys_clock_announce+0x184>
    f072:	f7ff fbf7 	bl	e864 <first>
    f076:	4603      	mov	r3, r0
    f078:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    f07c:	4934      	ldr	r1, [pc, #208]	; (f150 <sys_clock_announce+0x244>)
    f07e:	6809      	ldr	r1, [r1, #0]
    f080:	4608      	mov	r0, r1
    f082:	ea4f 71e0 	mov.w	r1, r0, asr #31
    f086:	4290      	cmp	r0, r2
    f088:	eb71 0303 	sbcs.w	r3, r1, r3
    f08c:	f6bf af74 	bge.w	ef78 <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    f090:	f7ff fbe8 	bl	e864 <first>
    f094:	4603      	mov	r3, r0
    f096:	2b00      	cmp	r3, #0
    f098:	d00f      	beq.n	f0ba <sys_clock_announce+0x1ae>
		first()->dticks -= announce_remaining;
    f09a:	f7ff fbe3 	bl	e864 <first>
    f09e:	4606      	mov	r6, r0
    f0a0:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    f0a4:	4b2a      	ldr	r3, [pc, #168]	; (f150 <sys_clock_announce+0x244>)
    f0a6:	681b      	ldr	r3, [r3, #0]
    f0a8:	461a      	mov	r2, r3
    f0aa:	ea4f 73e2 	mov.w	r3, r2, asr #31
    f0ae:	ebb0 0802 	subs.w	r8, r0, r2
    f0b2:	eb61 0903 	sbc.w	r9, r1, r3
    f0b6:	e9c6 8904 	strd	r8, r9, [r6, #16]
	}

	curr_tick += announce_remaining;
    f0ba:	4b25      	ldr	r3, [pc, #148]	; (f150 <sys_clock_announce+0x244>)
    f0bc:	681b      	ldr	r3, [r3, #0]
    f0be:	4618      	mov	r0, r3
    f0c0:	ea4f 71e0 	mov.w	r1, r0, asr #31
    f0c4:	4b23      	ldr	r3, [pc, #140]	; (f154 <sys_clock_announce+0x248>)
    f0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
    f0ca:	1884      	adds	r4, r0, r2
    f0cc:	eb41 0503 	adc.w	r5, r1, r3
    f0d0:	4b20      	ldr	r3, [pc, #128]	; (f154 <sys_clock_announce+0x248>)
    f0d2:	e9c3 4500 	strd	r4, r5, [r3]
	announce_remaining = 0;
    f0d6:	4b1e      	ldr	r3, [pc, #120]	; (f150 <sys_clock_announce+0x244>)
    f0d8:	2200      	movs	r2, #0
    f0da:	601a      	str	r2, [r3, #0]

	sys_clock_set_timeout(next_timeout(), false);
    f0dc:	f7ff fbf2 	bl	e8c4 <next_timeout>
    f0e0:	4603      	mov	r3, r0
    f0e2:	2100      	movs	r1, #0
    f0e4:	4618      	mov	r0, r3
    f0e6:	f7f6 f8fd 	bl	52e4 <sys_clock_set_timeout>
    f0ea:	4b14      	ldr	r3, [pc, #80]	; (f13c <sys_clock_announce+0x230>)
    f0ec:	627b      	str	r3, [r7, #36]	; 0x24
    f0ee:	69fb      	ldr	r3, [r7, #28]
    f0f0:	61bb      	str	r3, [r7, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f0f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
    f0f4:	f7fc fc42 	bl	b97c <z_spin_unlock_valid>
    f0f8:	4603      	mov	r3, r0
    f0fa:	f083 0301 	eor.w	r3, r3, #1
    f0fe:	b2db      	uxtb	r3, r3
    f100:	2b00      	cmp	r3, #0
    f102:	d00d      	beq.n	f120 <sys_clock_announce+0x214>
    f104:	23ac      	movs	r3, #172	; 0xac
    f106:	4a0e      	ldr	r2, [pc, #56]	; (f140 <sys_clock_announce+0x234>)
    f108:	4913      	ldr	r1, [pc, #76]	; (f158 <sys_clock_announce+0x24c>)
    f10a:	480f      	ldr	r0, [pc, #60]	; (f148 <sys_clock_announce+0x23c>)
    f10c:	f000 fdb2 	bl	fc74 <printk>
    f110:	6a79      	ldr	r1, [r7, #36]	; 0x24
    f112:	4812      	ldr	r0, [pc, #72]	; (f15c <sys_clock_announce+0x250>)
    f114:	f000 fdae 	bl	fc74 <printk>
    f118:	21ac      	movs	r1, #172	; 0xac
    f11a:	4809      	ldr	r0, [pc, #36]	; (f140 <sys_clock_announce+0x234>)
    f11c:	f001 fa06 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    f120:	69bb      	ldr	r3, [r7, #24]
    f122:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
    f124:	6a3b      	ldr	r3, [r7, #32]
    f126:	f383 8811 	msr	BASEPRI, r3
    f12a:	f3bf 8f6f 	isb	sy
}
    f12e:	bf00      	nop
}
    f130:	bf00      	nop

	k_spin_unlock(&timeout_lock, key);
}
    f132:	bf00      	nop
    f134:	3754      	adds	r7, #84	; 0x54
    f136:	46bd      	mov	sp, r7
    f138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f13c:	20000c48 	.word	0x20000c48
    f140:	0001a960 	.word	0x0001a960
    f144:	0001a988 	.word	0x0001a988
    f148:	0001a93c 	.word	0x0001a93c
    f14c:	0001a9a0 	.word	0x0001a9a0
    f150:	20000c4c 	.word	0x20000c4c
    f154:	200004e0 	.word	0x200004e0
    f158:	0001a9b8 	.word	0x0001a9b8
    f15c:	0001a9d0 	.word	0x0001a9d0

0000f160 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    f160:	b5b0      	push	{r4, r5, r7, lr}
    f162:	b08c      	sub	sp, #48	; 0x30
    f164:	af00      	add	r7, sp, #0
	uint64_t t = 0U;
    f166:	f04f 0200 	mov.w	r2, #0
    f16a:	f04f 0300 	mov.w	r3, #0
    f16e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	LOCKED(&timeout_lock) {
    f172:	2300      	movs	r3, #0
    f174:	613b      	str	r3, [r7, #16]
    f176:	4b34      	ldr	r3, [pc, #208]	; (f248 <sys_clock_tick_get+0xe8>)
    f178:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
    f17a:	f04f 0320 	mov.w	r3, #32
    f17e:	f3ef 8211 	mrs	r2, BASEPRI
    f182:	f383 8811 	msr	BASEPRI, r3
    f186:	f3bf 8f6f 	isb	sy
    f18a:	623a      	str	r2, [r7, #32]
    f18c:	61fb      	str	r3, [r7, #28]
	return key;
    f18e:	6a3b      	ldr	r3, [r7, #32]
	k.key = arch_irq_lock();
    f190:	607b      	str	r3, [r7, #4]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    f192:	6a78      	ldr	r0, [r7, #36]	; 0x24
    f194:	f7fc fbd6 	bl	b944 <z_spin_lock_valid>
    f198:	4603      	mov	r3, r0
    f19a:	f083 0301 	eor.w	r3, r3, #1
    f19e:	b2db      	uxtb	r3, r3
    f1a0:	2b00      	cmp	r3, #0
    f1a2:	d00d      	beq.n	f1c0 <sys_clock_tick_get+0x60>
    f1a4:	2381      	movs	r3, #129	; 0x81
    f1a6:	4a29      	ldr	r2, [pc, #164]	; (f24c <sys_clock_tick_get+0xec>)
    f1a8:	4929      	ldr	r1, [pc, #164]	; (f250 <sys_clock_tick_get+0xf0>)
    f1aa:	482a      	ldr	r0, [pc, #168]	; (f254 <sys_clock_tick_get+0xf4>)
    f1ac:	f000 fd62 	bl	fc74 <printk>
    f1b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
    f1b2:	4829      	ldr	r0, [pc, #164]	; (f258 <sys_clock_tick_get+0xf8>)
    f1b4:	f000 fd5e 	bl	fc74 <printk>
    f1b8:	2181      	movs	r1, #129	; 0x81
    f1ba:	4824      	ldr	r0, [pc, #144]	; (f24c <sys_clock_tick_get+0xec>)
    f1bc:	f001 f9b6 	bl	1052c <assert_post_action>
	z_spin_lock_set_owner(l);
    f1c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    f1c2:	f7fc fbf7 	bl	b9b4 <z_spin_lock_set_owner>
	return k;
    f1c6:	687b      	ldr	r3, [r7, #4]
    f1c8:	60fb      	str	r3, [r7, #12]
    f1ca:	e033      	b.n	f234 <sys_clock_tick_get+0xd4>
		t = curr_tick + sys_clock_elapsed();
    f1cc:	f7f6 f988 	bl	54e0 <sys_clock_elapsed>
    f1d0:	4603      	mov	r3, r0
    f1d2:	4618      	mov	r0, r3
    f1d4:	f04f 0100 	mov.w	r1, #0
    f1d8:	4b20      	ldr	r3, [pc, #128]	; (f25c <sys_clock_tick_get+0xfc>)
    f1da:	e9d3 2300 	ldrd	r2, r3, [r3]
    f1de:	1884      	adds	r4, r0, r2
    f1e0:	eb41 0503 	adc.w	r5, r1, r3
    f1e4:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
    f1e8:	4b17      	ldr	r3, [pc, #92]	; (f248 <sys_clock_tick_get+0xe8>)
    f1ea:	61bb      	str	r3, [r7, #24]
    f1ec:	68fb      	ldr	r3, [r7, #12]
    f1ee:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    f1f0:	69b8      	ldr	r0, [r7, #24]
    f1f2:	f7fc fbc3 	bl	b97c <z_spin_unlock_valid>
    f1f6:	4603      	mov	r3, r0
    f1f8:	f083 0301 	eor.w	r3, r3, #1
    f1fc:	b2db      	uxtb	r3, r3
    f1fe:	2b00      	cmp	r3, #0
    f200:	d00d      	beq.n	f21e <sys_clock_tick_get+0xbe>
    f202:	23ac      	movs	r3, #172	; 0xac
    f204:	4a11      	ldr	r2, [pc, #68]	; (f24c <sys_clock_tick_get+0xec>)
    f206:	4916      	ldr	r1, [pc, #88]	; (f260 <sys_clock_tick_get+0x100>)
    f208:	4812      	ldr	r0, [pc, #72]	; (f254 <sys_clock_tick_get+0xf4>)
    f20a:	f000 fd33 	bl	fc74 <printk>
    f20e:	69b9      	ldr	r1, [r7, #24]
    f210:	4814      	ldr	r0, [pc, #80]	; (f264 <sys_clock_tick_get+0x104>)
    f212:	f000 fd2f 	bl	fc74 <printk>
    f216:	21ac      	movs	r1, #172	; 0xac
    f218:	480c      	ldr	r0, [pc, #48]	; (f24c <sys_clock_tick_get+0xec>)
    f21a:	f001 f987 	bl	1052c <assert_post_action>
	arch_irq_unlock(key.key);
    f21e:	68bb      	ldr	r3, [r7, #8]
    f220:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
    f222:	697b      	ldr	r3, [r7, #20]
    f224:	f383 8811 	msr	BASEPRI, r3
    f228:	f3bf 8f6f 	isb	sy
}
    f22c:	bf00      	nop
}
    f22e:	bf00      	nop
	LOCKED(&timeout_lock) {
    f230:	2301      	movs	r3, #1
    f232:	613b      	str	r3, [r7, #16]
    f234:	693b      	ldr	r3, [r7, #16]
    f236:	2b00      	cmp	r3, #0
    f238:	d0c8      	beq.n	f1cc <sys_clock_tick_get+0x6c>
	}
	return t;
    f23a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
    f23e:	4610      	mov	r0, r2
    f240:	4619      	mov	r1, r3
    f242:	3730      	adds	r7, #48	; 0x30
    f244:	46bd      	mov	sp, r7
    f246:	bdb0      	pop	{r4, r5, r7, pc}
    f248:	20000c48 	.word	0x20000c48
    f24c:	0001a960 	.word	0x0001a960
    f250:	0001a988 	.word	0x0001a988
    f254:	0001a93c 	.word	0x0001a93c
    f258:	0001a9a0 	.word	0x0001a9a0
    f25c:	200004e0 	.word	0x200004e0
    f260:	0001a9b8 	.word	0x0001a9b8
    f264:	0001a9d0 	.word	0x0001a9d0

0000f268 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    f268:	b580      	push	{r7, lr}
    f26a:	b086      	sub	sp, #24
    f26c:	af00      	add	r7, sp, #0
    f26e:	6078      	str	r0, [r7, #4]
	struct k_timer *timer = CONTAINER_OF(t, struct k_timer, timeout);
    f270:	687b      	ldr	r3, [r7, #4]
    f272:	617b      	str	r3, [r7, #20]

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    f274:	697b      	ldr	r3, [r7, #20]
    f276:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
    f27a:	f04f 0000 	mov.w	r0, #0
    f27e:	f04f 0100 	mov.w	r1, #0
    f282:	428b      	cmp	r3, r1
    f284:	bf08      	it	eq
    f286:	4282      	cmpeq	r2, r0
    f288:	d011      	beq.n	f2ae <z_timer_expiration_handler+0x46>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
    f28a:	697b      	ldr	r3, [r7, #20]
    f28c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
    f290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f294:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    f298:	428b      	cmp	r3, r1
    f29a:	bf08      	it	eq
    f29c:	4282      	cmpeq	r2, r0
    f29e:	d006      	beq.n	f2ae <z_timer_expiration_handler+0x46>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    f2a0:	6978      	ldr	r0, [r7, #20]
    f2a2:	697b      	ldr	r3, [r7, #20]
    f2a4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
    f2a8:	4915      	ldr	r1, [pc, #84]	; (f300 <z_timer_expiration_handler+0x98>)
    f2aa:	f7ff fb59 	bl	e960 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    f2ae:	697b      	ldr	r3, [r7, #20]
    f2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    f2b2:	1c5a      	adds	r2, r3, #1
    f2b4:	697b      	ldr	r3, [r7, #20]
    f2b6:	631a      	str	r2, [r3, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    f2b8:	697b      	ldr	r3, [r7, #20]
    f2ba:	6a1b      	ldr	r3, [r3, #32]
    f2bc:	2b00      	cmp	r3, #0
    f2be:	d003      	beq.n	f2c8 <z_timer_expiration_handler+0x60>
		timer->expiry_fn(timer);
    f2c0:	697b      	ldr	r3, [r7, #20]
    f2c2:	6a1b      	ldr	r3, [r3, #32]
    f2c4:	6978      	ldr	r0, [r7, #20]
    f2c6:	4798      	blx	r3

	if (!IS_ENABLED(CONFIG_MULTITHREADING)) {
		return;
	}

	thread = z_waitq_head(&timer->wait_q);
    f2c8:	697b      	ldr	r3, [r7, #20]
    f2ca:	3318      	adds	r3, #24
    f2cc:	4618      	mov	r0, r3
    f2ce:	f007 fd1c 	bl	16d0a <z_waitq_head>
    f2d2:	6138      	str	r0, [r7, #16]

	if (thread == NULL) {
    f2d4:	693b      	ldr	r3, [r7, #16]
    f2d6:	2b00      	cmp	r3, #0
    f2d8:	d00e      	beq.n	f2f8 <z_timer_expiration_handler+0x90>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    f2da:	6938      	ldr	r0, [r7, #16]
    f2dc:	f7fe f9aa 	bl	d634 <z_unpend_thread_no_timeout>
    f2e0:	693b      	ldr	r3, [r7, #16]
    f2e2:	60fb      	str	r3, [r7, #12]
    f2e4:	2300      	movs	r3, #0
    f2e6:	60bb      	str	r3, [r7, #8]
	thread->arch.swap_return_value = value;
    f2e8:	68fb      	ldr	r3, [r7, #12]
    f2ea:	68ba      	ldr	r2, [r7, #8]
    f2ec:	679a      	str	r2, [r3, #120]	; 0x78
}
    f2ee:	bf00      	nop

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
    f2f0:	6938      	ldr	r0, [r7, #16]
    f2f2:	f7fd fed5 	bl	d0a0 <z_ready_thread>
    f2f6:	e000      	b.n	f2fa <z_timer_expiration_handler+0x92>
		return;
    f2f8:	bf00      	nop
}
    f2fa:	3718      	adds	r7, #24
    f2fc:	46bd      	mov	sp, r7
    f2fe:	bd80      	pop	{r7, pc}
    f300:	0000f269 	.word	0x0000f269

0000f304 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    f304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    f308:	b086      	sub	sp, #24
    f30a:	af00      	add	r7, sp, #0
    f30c:	6178      	str	r0, [r7, #20]
    f30e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    f312:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    f316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f31a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f31e:	428b      	cmp	r3, r1
    f320:	bf08      	it	eq
    f322:	4282      	cmpeq	r2, r0
    f324:	d100      	bne.n	f328 <z_impl_k_timer_start+0x24>
    f326:	e061      	b.n	f3ec <z_impl_k_timer_start+0xe8>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    f328:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
    f32c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    f330:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f334:	428b      	cmp	r3, r1
    f336:	bf08      	it	eq
    f338:	4282      	cmpeq	r2, r0
    f33a:	d026      	beq.n	f38a <z_impl_k_timer_start+0x86>
    f33c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
    f340:	4313      	orrs	r3, r2
    f342:	d022      	beq.n	f38a <z_impl_k_timer_start+0x86>
	    Z_TICK_ABS(period.ticks) < 0) {
    f344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
    f348:	f06f 0001 	mvn.w	r0, #1
    f34c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f350:	ebb0 0802 	subs.w	r8, r0, r2
    f354:	eb61 0903 	sbc.w	r9, r1, r3
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    f358:	f1b8 0f00 	cmp.w	r8, #0
    f35c:	f179 0300 	sbcs.w	r3, r9, #0
    f360:	da13      	bge.n	f38a <z_impl_k_timer_start+0x86>
		period.ticks = MAX(period.ticks - 1, 1);
    f362:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
    f366:	f112 31ff 	adds.w	r1, r2, #4294967295	; 0xffffffff
    f36a:	6039      	str	r1, [r7, #0]
    f36c:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    f370:	607b      	str	r3, [r7, #4]
    f372:	e9d7 2300 	ldrd	r2, r3, [r7]
    f376:	2a01      	cmp	r2, #1
    f378:	f173 0100 	sbcs.w	r1, r3, #0
    f37c:	da03      	bge.n	f386 <z_impl_k_timer_start+0x82>
    f37e:	f04f 0201 	mov.w	r2, #1
    f382:	f04f 0300 	mov.w	r3, #0
    f386:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    f38a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    f38e:	f06f 0001 	mvn.w	r0, #1
    f392:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    f396:	1a84      	subs	r4, r0, r2
    f398:	eb61 0503 	sbc.w	r5, r1, r3
    f39c:	2c00      	cmp	r4, #0
    f39e:	f175 0300 	sbcs.w	r3, r5, #0
    f3a2:	da11      	bge.n	f3c8 <z_impl_k_timer_start+0xc4>
		duration.ticks = MAX(duration.ticks - 1, 0);
    f3a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    f3a8:	f112 3aff 	adds.w	sl, r2, #4294967295	; 0xffffffff
    f3ac:	f143 3bff 	adc.w	fp, r3, #4294967295	; 0xffffffff
    f3b0:	4652      	mov	r2, sl
    f3b2:	465b      	mov	r3, fp
    f3b4:	2a00      	cmp	r2, #0
    f3b6:	f173 0100 	sbcs.w	r1, r3, #0
    f3ba:	da03      	bge.n	f3c4 <z_impl_k_timer_start+0xc0>
    f3bc:	f04f 0200 	mov.w	r2, #0
    f3c0:	f04f 0300 	mov.w	r3, #0
    f3c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}

	(void)z_abort_timeout(&timer->timeout);
    f3c8:	697b      	ldr	r3, [r7, #20]
    f3ca:	4618      	mov	r0, r3
    f3cc:	f7ff fc0e 	bl	ebec <z_abort_timeout>
	timer->period = period;
    f3d0:	6979      	ldr	r1, [r7, #20]
    f3d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
    f3d6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	timer->status = 0U;
    f3da:	697b      	ldr	r3, [r7, #20]
    f3dc:	2200      	movs	r2, #0
    f3de:	631a      	str	r2, [r3, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    f3e0:	6978      	ldr	r0, [r7, #20]
    f3e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    f3e6:	4903      	ldr	r1, [pc, #12]	; (f3f4 <z_impl_k_timer_start+0xf0>)
    f3e8:	f7ff faba 	bl	e960 <z_add_timeout>
		     duration);
}
    f3ec:	3718      	adds	r7, #24
    f3ee:	46bd      	mov	sp, r7
    f3f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
    f3f4:	0000f269 	.word	0x0000f269

0000f3f8 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    f3f8:	b580      	push	{r7, lr}
    f3fa:	af00      	add	r7, sp, #0
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
    f3fc:	4b08      	ldr	r3, [pc, #32]	; (f420 <boot_banner+0x28>)
    f3fe:	681b      	ldr	r3, [r3, #0]
    f400:	2b00      	cmp	r3, #0
    f402:	d005      	beq.n	f410 <boot_banner+0x18>
		printk("***** delaying boot " STRINGIFY(
    f404:	4807      	ldr	r0, [pc, #28]	; (f424 <boot_banner+0x2c>)
    f406:	f000 fc35 	bl	fc74 <printk>
			CONFIG_BOOT_DELAY) "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
    f40a:	2000      	movs	r0, #0
    f40c:	f007 fcd9 	bl	16dc2 <k_busy_wait>
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    f410:	4a05      	ldr	r2, [pc, #20]	; (f428 <boot_banner+0x30>)
    f412:	4906      	ldr	r1, [pc, #24]	; (f42c <boot_banner+0x34>)
    f414:	4806      	ldr	r0, [pc, #24]	; (f430 <boot_banner+0x38>)
    f416:	f000 fc2d 	bl	fc74 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    f41a:	bf00      	nop
    f41c:	bd80      	pop	{r7, pc}
    f41e:	bf00      	nop
    f420:	0001add0 	.word	0x0001add0
    f424:	0001a9e8 	.word	0x0001a9e8
    f428:	0001aa24 	.word	0x0001aa24
    f42c:	0001aa28 	.word	0x0001aa28
    f430:	0001aa38 	.word	0x0001aa38

0000f434 <nrf_cc3xx_platform_init_no_rng>:
    f434:	b510      	push	{r4, lr}
    f436:	4c0a      	ldr	r4, [pc, #40]	; (f460 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    f438:	6823      	ldr	r3, [r4, #0]
    f43a:	b11b      	cbz	r3, f444 <nrf_cc3xx_platform_init_no_rng+0x10>
    f43c:	2301      	movs	r3, #1
    f43e:	2000      	movs	r0, #0
    f440:	6023      	str	r3, [r4, #0]
    f442:	bd10      	pop	{r4, pc}
    f444:	f000 f8d0 	bl	f5e8 <CC_LibInitNoRng>
    f448:	2800      	cmp	r0, #0
    f44a:	d0f7      	beq.n	f43c <nrf_cc3xx_platform_init_no_rng+0x8>
    f44c:	3801      	subs	r0, #1
    f44e:	2806      	cmp	r0, #6
    f450:	d803      	bhi.n	f45a <nrf_cc3xx_platform_init_no_rng+0x26>
    f452:	4b04      	ldr	r3, [pc, #16]	; (f464 <nrf_cc3xx_platform_init_no_rng+0x30>)
    f454:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    f458:	bd10      	pop	{r4, pc}
    f45a:	4803      	ldr	r0, [pc, #12]	; (f468 <nrf_cc3xx_platform_init_no_rng+0x34>)
    f45c:	bd10      	pop	{r4, pc}
    f45e:	bf00      	nop
    f460:	20000c50 	.word	0x20000c50
    f464:	0001add4 	.word	0x0001add4
    f468:	ffff8ffe 	.word	0xffff8ffe

0000f46c <nrf_cc3xx_platform_abort>:
    f46c:	f3bf 8f4f 	dsb	sy
    f470:	4905      	ldr	r1, [pc, #20]	; (f488 <nrf_cc3xx_platform_abort+0x1c>)
    f472:	4b06      	ldr	r3, [pc, #24]	; (f48c <nrf_cc3xx_platform_abort+0x20>)
    f474:	68ca      	ldr	r2, [r1, #12]
    f476:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    f47a:	4313      	orrs	r3, r2
    f47c:	60cb      	str	r3, [r1, #12]
    f47e:	f3bf 8f4f 	dsb	sy
    f482:	bf00      	nop
    f484:	e7fd      	b.n	f482 <nrf_cc3xx_platform_abort+0x16>
    f486:	bf00      	nop
    f488:	e000ed00 	.word	0xe000ed00
    f48c:	05fa0004 	.word	0x05fa0004

0000f490 <CC_PalAbort>:
    f490:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    f494:	2100      	movs	r1, #0
    f496:	b430      	push	{r4, r5}
    f498:	4a06      	ldr	r2, [pc, #24]	; (f4b4 <CC_PalAbort+0x24>)
    f49a:	4d07      	ldr	r5, [pc, #28]	; (f4b8 <CC_PalAbort+0x28>)
    f49c:	4c07      	ldr	r4, [pc, #28]	; (f4bc <CC_PalAbort+0x2c>)
    f49e:	602b      	str	r3, [r5, #0]
    f4a0:	6013      	str	r3, [r2, #0]
    f4a2:	6023      	str	r3, [r4, #0]
    f4a4:	4a06      	ldr	r2, [pc, #24]	; (f4c0 <CC_PalAbort+0x30>)
    f4a6:	4c07      	ldr	r4, [pc, #28]	; (f4c4 <CC_PalAbort+0x34>)
    f4a8:	60eb      	str	r3, [r5, #12]
    f4aa:	6863      	ldr	r3, [r4, #4]
    f4ac:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    f4b0:	bc30      	pop	{r4, r5}
    f4b2:	4718      	bx	r3
    f4b4:	50841404 	.word	0x50841404
    f4b8:	50841400 	.word	0x50841400
    f4bc:	50841408 	.word	0x50841408
    f4c0:	50840000 	.word	0x50840000
    f4c4:	20000180 	.word	0x20000180

0000f4c8 <nrf_cc3xx_platform_set_abort>:
    f4c8:	4b02      	ldr	r3, [pc, #8]	; (f4d4 <nrf_cc3xx_platform_set_abort+0xc>)
    f4ca:	e9d0 1200 	ldrd	r1, r2, [r0]
    f4ce:	e9c3 1200 	strd	r1, r2, [r3]
    f4d2:	4770      	bx	lr
    f4d4:	20000180 	.word	0x20000180

0000f4d8 <mutex_free>:
    f4d8:	b510      	push	{r4, lr}
    f4da:	4604      	mov	r4, r0
    f4dc:	b130      	cbz	r0, f4ec <mutex_free+0x14>
    f4de:	6863      	ldr	r3, [r4, #4]
    f4e0:	06db      	lsls	r3, r3, #27
    f4e2:	d502      	bpl.n	f4ea <mutex_free+0x12>
    f4e4:	2300      	movs	r3, #0
    f4e6:	6023      	str	r3, [r4, #0]
    f4e8:	6063      	str	r3, [r4, #4]
    f4ea:	bd10      	pop	{r4, pc}
    f4ec:	4b02      	ldr	r3, [pc, #8]	; (f4f8 <mutex_free+0x20>)
    f4ee:	4803      	ldr	r0, [pc, #12]	; (f4fc <mutex_free+0x24>)
    f4f0:	685b      	ldr	r3, [r3, #4]
    f4f2:	4798      	blx	r3
    f4f4:	e7f3      	b.n	f4de <mutex_free+0x6>
    f4f6:	bf00      	nop
    f4f8:	20000180 	.word	0x20000180
    f4fc:	0001adf0 	.word	0x0001adf0

0000f500 <mutex_unlock>:
    f500:	b168      	cbz	r0, f51e <mutex_unlock+0x1e>
    f502:	6843      	ldr	r3, [r0, #4]
    f504:	b13b      	cbz	r3, f516 <mutex_unlock+0x16>
    f506:	06db      	lsls	r3, r3, #27
    f508:	d507      	bpl.n	f51a <mutex_unlock+0x1a>
    f50a:	f3bf 8f5f 	dmb	sy
    f50e:	2300      	movs	r3, #0
    f510:	6003      	str	r3, [r0, #0]
    f512:	4618      	mov	r0, r3
    f514:	4770      	bx	lr
    f516:	4803      	ldr	r0, [pc, #12]	; (f524 <mutex_unlock+0x24>)
    f518:	4770      	bx	lr
    f51a:	4803      	ldr	r0, [pc, #12]	; (f528 <mutex_unlock+0x28>)
    f51c:	4770      	bx	lr
    f51e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    f522:	4770      	bx	lr
    f524:	ffff8fea 	.word	0xffff8fea
    f528:	ffff8fe9 	.word	0xffff8fe9

0000f52c <mutex_init>:
    f52c:	b510      	push	{r4, lr}
    f52e:	4604      	mov	r4, r0
    f530:	b120      	cbz	r0, f53c <mutex_init+0x10>
    f532:	2200      	movs	r2, #0
    f534:	2311      	movs	r3, #17
    f536:	6022      	str	r2, [r4, #0]
    f538:	6063      	str	r3, [r4, #4]
    f53a:	bd10      	pop	{r4, pc}
    f53c:	4801      	ldr	r0, [pc, #4]	; (f544 <mutex_init+0x18>)
    f53e:	f7ff ffa7 	bl	f490 <CC_PalAbort>
    f542:	e7f6      	b.n	f532 <mutex_init+0x6>
    f544:	0001ae18 	.word	0x0001ae18

0000f548 <mutex_lock>:
    f548:	b1a0      	cbz	r0, f574 <mutex_lock+0x2c>
    f54a:	6843      	ldr	r3, [r0, #4]
    f54c:	b183      	cbz	r3, f570 <mutex_lock+0x28>
    f54e:	06db      	lsls	r3, r3, #27
    f550:	d50c      	bpl.n	f56c <mutex_lock+0x24>
    f552:	2201      	movs	r2, #1
    f554:	e8d0 3fef 	ldaex	r3, [r0]
    f558:	e8c0 2fe1 	stlex	r1, r2, [r0]
    f55c:	2900      	cmp	r1, #0
    f55e:	d1f9      	bne.n	f554 <mutex_lock+0xc>
    f560:	2b01      	cmp	r3, #1
    f562:	d0f7      	beq.n	f554 <mutex_lock+0xc>
    f564:	f3bf 8f5f 	dmb	sy
    f568:	2000      	movs	r0, #0
    f56a:	4770      	bx	lr
    f56c:	4803      	ldr	r0, [pc, #12]	; (f57c <mutex_lock+0x34>)
    f56e:	4770      	bx	lr
    f570:	4803      	ldr	r0, [pc, #12]	; (f580 <mutex_lock+0x38>)
    f572:	4770      	bx	lr
    f574:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    f578:	4770      	bx	lr
    f57a:	bf00      	nop
    f57c:	ffff8fe9 	.word	0xffff8fe9
    f580:	ffff8fea 	.word	0xffff8fea

0000f584 <nrf_cc3xx_platform_set_mutexes>:
    f584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f588:	4c14      	ldr	r4, [pc, #80]	; (f5dc <nrf_cc3xx_platform_set_mutexes+0x58>)
    f58a:	6802      	ldr	r2, [r0, #0]
    f58c:	68c3      	ldr	r3, [r0, #12]
    f58e:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
    f592:	e9c4 6302 	strd	r6, r3, [r4, #8]
    f596:	e9c4 2500 	strd	r2, r5, [r4]
    f59a:	4b11      	ldr	r3, [pc, #68]	; (f5e0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    f59c:	680e      	ldr	r6, [r1, #0]
    f59e:	6848      	ldr	r0, [r1, #4]
    f5a0:	4d10      	ldr	r5, [pc, #64]	; (f5e4 <nrf_cc3xx_platform_set_mutexes+0x60>)
    f5a2:	e9c3 6000 	strd	r6, r0, [r3]
    f5a6:	e9d1 7602 	ldrd	r7, r6, [r1, #8]
    f5aa:	6908      	ldr	r0, [r1, #16]
    f5ac:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    f5b0:	e9c3 7602 	strd	r7, r6, [r3, #8]
    f5b4:	6118      	str	r0, [r3, #16]
    f5b6:	06cb      	lsls	r3, r1, #27
    f5b8:	d50d      	bpl.n	f5d6 <nrf_cc3xx_platform_set_mutexes+0x52>
    f5ba:	2300      	movs	r3, #0
    f5bc:	f505 7088 	add.w	r0, r5, #272	; 0x110
    f5c0:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    f5c4:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    f5c8:	4790      	blx	r2
    f5ca:	6823      	ldr	r3, [r4, #0]
    f5cc:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    f5d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f5d4:	4718      	bx	r3
    f5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f5da:	bf00      	nop
    f5dc:	20000190 	.word	0x20000190
    f5e0:	200001a0 	.word	0x200001a0
    f5e4:	20000c70 	.word	0x20000c70

0000f5e8 <CC_LibInitNoRng>:
    f5e8:	b510      	push	{r4, lr}
    f5ea:	f000 f833 	bl	f654 <CC_HalInit>
    f5ee:	b120      	cbz	r0, f5fa <CC_LibInitNoRng+0x12>
    f5f0:	2403      	movs	r4, #3
    f5f2:	f000 f867 	bl	f6c4 <CC_PalTerminate>
    f5f6:	4620      	mov	r0, r4
    f5f8:	bd10      	pop	{r4, pc}
    f5fa:	f000 f835 	bl	f668 <CC_PalInit>
    f5fe:	b990      	cbnz	r0, f626 <CC_LibInitNoRng+0x3e>
    f600:	f000 f8b0 	bl	f764 <CC_PalPowerSaveModeSelect>
    f604:	b990      	cbnz	r0, f62c <CC_LibInitNoRng+0x44>
    f606:	4b0f      	ldr	r3, [pc, #60]	; (f644 <CC_LibInitNoRng+0x5c>)
    f608:	681b      	ldr	r3, [r3, #0]
    f60a:	0e1b      	lsrs	r3, r3, #24
    f60c:	2bf0      	cmp	r3, #240	; 0xf0
    f60e:	d108      	bne.n	f622 <CC_LibInitNoRng+0x3a>
    f610:	4a0d      	ldr	r2, [pc, #52]	; (f648 <CC_LibInitNoRng+0x60>)
    f612:	4b0e      	ldr	r3, [pc, #56]	; (f64c <CC_LibInitNoRng+0x64>)
    f614:	6812      	ldr	r2, [r2, #0]
    f616:	429a      	cmp	r2, r3
    f618:	d00a      	beq.n	f630 <CC_LibInitNoRng+0x48>
    f61a:	2407      	movs	r4, #7
    f61c:	f000 f81c 	bl	f658 <CC_HalTerminate>
    f620:	e7e7      	b.n	f5f2 <CC_LibInitNoRng+0xa>
    f622:	2406      	movs	r4, #6
    f624:	e7fa      	b.n	f61c <CC_LibInitNoRng+0x34>
    f626:	2404      	movs	r4, #4
    f628:	4620      	mov	r0, r4
    f62a:	bd10      	pop	{r4, pc}
    f62c:	2400      	movs	r4, #0
    f62e:	e7f5      	b.n	f61c <CC_LibInitNoRng+0x34>
    f630:	2001      	movs	r0, #1
    f632:	f000 f897 	bl	f764 <CC_PalPowerSaveModeSelect>
    f636:	4604      	mov	r4, r0
    f638:	2800      	cmp	r0, #0
    f63a:	d1f7      	bne.n	f62c <CC_LibInitNoRng+0x44>
    f63c:	4b04      	ldr	r3, [pc, #16]	; (f650 <CC_LibInitNoRng+0x68>)
    f63e:	6018      	str	r0, [r3, #0]
    f640:	e7d9      	b.n	f5f6 <CC_LibInitNoRng+0xe>
    f642:	bf00      	nop
    f644:	50841928 	.word	0x50841928
    f648:	50841a24 	.word	0x50841a24
    f64c:	20e00000 	.word	0x20e00000
    f650:	50841a0c 	.word	0x50841a0c

0000f654 <CC_HalInit>:
    f654:	2000      	movs	r0, #0
    f656:	4770      	bx	lr

0000f658 <CC_HalTerminate>:
    f658:	2000      	movs	r0, #0
    f65a:	4770      	bx	lr

0000f65c <CC_HalMaskInterrupt>:
    f65c:	4b01      	ldr	r3, [pc, #4]	; (f664 <CC_HalMaskInterrupt+0x8>)
    f65e:	6018      	str	r0, [r3, #0]
    f660:	4770      	bx	lr
    f662:	bf00      	nop
    f664:	50841a04 	.word	0x50841a04

0000f668 <CC_PalInit>:
    f668:	b510      	push	{r4, lr}
    f66a:	4811      	ldr	r0, [pc, #68]	; (f6b0 <CC_PalInit+0x48>)
    f66c:	f000 f848 	bl	f700 <CC_PalMutexCreate>
    f670:	b100      	cbz	r0, f674 <CC_PalInit+0xc>
    f672:	bd10      	pop	{r4, pc}
    f674:	480f      	ldr	r0, [pc, #60]	; (f6b4 <CC_PalInit+0x4c>)
    f676:	f000 f843 	bl	f700 <CC_PalMutexCreate>
    f67a:	2800      	cmp	r0, #0
    f67c:	d1f9      	bne.n	f672 <CC_PalInit+0xa>
    f67e:	4c0e      	ldr	r4, [pc, #56]	; (f6b8 <CC_PalInit+0x50>)
    f680:	4620      	mov	r0, r4
    f682:	f000 f83d 	bl	f700 <CC_PalMutexCreate>
    f686:	2800      	cmp	r0, #0
    f688:	d1f3      	bne.n	f672 <CC_PalInit+0xa>
    f68a:	4b0c      	ldr	r3, [pc, #48]	; (f6bc <CC_PalInit+0x54>)
    f68c:	480c      	ldr	r0, [pc, #48]	; (f6c0 <CC_PalInit+0x58>)
    f68e:	601c      	str	r4, [r3, #0]
    f690:	f000 f836 	bl	f700 <CC_PalMutexCreate>
    f694:	4601      	mov	r1, r0
    f696:	2800      	cmp	r0, #0
    f698:	d1eb      	bne.n	f672 <CC_PalInit+0xa>
    f69a:	f000 f82d 	bl	f6f8 <CC_PalDmaInit>
    f69e:	4604      	mov	r4, r0
    f6a0:	b108      	cbz	r0, f6a6 <CC_PalInit+0x3e>
    f6a2:	4620      	mov	r0, r4
    f6a4:	bd10      	pop	{r4, pc}
    f6a6:	f000 f83f 	bl	f728 <CC_PalPowerSaveModeInit>
    f6aa:	4620      	mov	r0, r4
    f6ac:	e7fa      	b.n	f6a4 <CC_PalInit+0x3c>
    f6ae:	bf00      	nop
    f6b0:	200001d8 	.word	0x200001d8
    f6b4:	200001cc 	.word	0x200001cc
    f6b8:	200001d4 	.word	0x200001d4
    f6bc:	200001dc 	.word	0x200001dc
    f6c0:	200001d0 	.word	0x200001d0

0000f6c4 <CC_PalTerminate>:
    f6c4:	b508      	push	{r3, lr}
    f6c6:	4808      	ldr	r0, [pc, #32]	; (f6e8 <CC_PalTerminate+0x24>)
    f6c8:	f000 f824 	bl	f714 <CC_PalMutexDestroy>
    f6cc:	4807      	ldr	r0, [pc, #28]	; (f6ec <CC_PalTerminate+0x28>)
    f6ce:	f000 f821 	bl	f714 <CC_PalMutexDestroy>
    f6d2:	4807      	ldr	r0, [pc, #28]	; (f6f0 <CC_PalTerminate+0x2c>)
    f6d4:	f000 f81e 	bl	f714 <CC_PalMutexDestroy>
    f6d8:	4806      	ldr	r0, [pc, #24]	; (f6f4 <CC_PalTerminate+0x30>)
    f6da:	f000 f81b 	bl	f714 <CC_PalMutexDestroy>
    f6de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f6e2:	f000 b80b 	b.w	f6fc <CC_PalDmaTerminate>
    f6e6:	bf00      	nop
    f6e8:	200001d8 	.word	0x200001d8
    f6ec:	200001cc 	.word	0x200001cc
    f6f0:	200001d4 	.word	0x200001d4
    f6f4:	200001d0 	.word	0x200001d0

0000f6f8 <CC_PalDmaInit>:
    f6f8:	2000      	movs	r0, #0
    f6fa:	4770      	bx	lr

0000f6fc <CC_PalDmaTerminate>:
    f6fc:	4770      	bx	lr
    f6fe:	bf00      	nop

0000f700 <CC_PalMutexCreate>:
    f700:	b508      	push	{r3, lr}
    f702:	4b03      	ldr	r3, [pc, #12]	; (f710 <CC_PalMutexCreate+0x10>)
    f704:	6802      	ldr	r2, [r0, #0]
    f706:	681b      	ldr	r3, [r3, #0]
    f708:	6810      	ldr	r0, [r2, #0]
    f70a:	4798      	blx	r3
    f70c:	2000      	movs	r0, #0
    f70e:	bd08      	pop	{r3, pc}
    f710:	20000190 	.word	0x20000190

0000f714 <CC_PalMutexDestroy>:
    f714:	b508      	push	{r3, lr}
    f716:	4b03      	ldr	r3, [pc, #12]	; (f724 <CC_PalMutexDestroy+0x10>)
    f718:	6802      	ldr	r2, [r0, #0]
    f71a:	685b      	ldr	r3, [r3, #4]
    f71c:	6810      	ldr	r0, [r2, #0]
    f71e:	4798      	blx	r3
    f720:	2000      	movs	r0, #0
    f722:	bd08      	pop	{r3, pc}
    f724:	20000190 	.word	0x20000190

0000f728 <CC_PalPowerSaveModeInit>:
    f728:	b570      	push	{r4, r5, r6, lr}
    f72a:	4c09      	ldr	r4, [pc, #36]	; (f750 <CC_PalPowerSaveModeInit+0x28>)
    f72c:	4d09      	ldr	r5, [pc, #36]	; (f754 <CC_PalPowerSaveModeInit+0x2c>)
    f72e:	6920      	ldr	r0, [r4, #16]
    f730:	68ab      	ldr	r3, [r5, #8]
    f732:	4798      	blx	r3
    f734:	b118      	cbz	r0, f73e <CC_PalPowerSaveModeInit+0x16>
    f736:	4b08      	ldr	r3, [pc, #32]	; (f758 <CC_PalPowerSaveModeInit+0x30>)
    f738:	4808      	ldr	r0, [pc, #32]	; (f75c <CC_PalPowerSaveModeInit+0x34>)
    f73a:	685b      	ldr	r3, [r3, #4]
    f73c:	4798      	blx	r3
    f73e:	2100      	movs	r1, #0
    f740:	4a07      	ldr	r2, [pc, #28]	; (f760 <CC_PalPowerSaveModeInit+0x38>)
    f742:	68eb      	ldr	r3, [r5, #12]
    f744:	6011      	str	r1, [r2, #0]
    f746:	6920      	ldr	r0, [r4, #16]
    f748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f74c:	4718      	bx	r3
    f74e:	bf00      	nop
    f750:	200001a0 	.word	0x200001a0
    f754:	20000190 	.word	0x20000190
    f758:	20000180 	.word	0x20000180
    f75c:	0001ae3c 	.word	0x0001ae3c
    f760:	20000c64 	.word	0x20000c64

0000f764 <CC_PalPowerSaveModeSelect>:
    f764:	b570      	push	{r4, r5, r6, lr}
    f766:	4d1a      	ldr	r5, [pc, #104]	; (f7d0 <CC_PalPowerSaveModeSelect+0x6c>)
    f768:	4e1a      	ldr	r6, [pc, #104]	; (f7d4 <CC_PalPowerSaveModeSelect+0x70>)
    f76a:	4604      	mov	r4, r0
    f76c:	68b2      	ldr	r2, [r6, #8]
    f76e:	6928      	ldr	r0, [r5, #16]
    f770:	4790      	blx	r2
    f772:	b9f0      	cbnz	r0, f7b2 <CC_PalPowerSaveModeSelect+0x4e>
    f774:	b15c      	cbz	r4, f78e <CC_PalPowerSaveModeSelect+0x2a>
    f776:	4c18      	ldr	r4, [pc, #96]	; (f7d8 <CC_PalPowerSaveModeSelect+0x74>)
    f778:	6823      	ldr	r3, [r4, #0]
    f77a:	b1ab      	cbz	r3, f7a8 <CC_PalPowerSaveModeSelect+0x44>
    f77c:	2b01      	cmp	r3, #1
    f77e:	d01a      	beq.n	f7b6 <CC_PalPowerSaveModeSelect+0x52>
    f780:	3b01      	subs	r3, #1
    f782:	6023      	str	r3, [r4, #0]
    f784:	6928      	ldr	r0, [r5, #16]
    f786:	68f3      	ldr	r3, [r6, #12]
    f788:	4798      	blx	r3
    f78a:	2000      	movs	r0, #0
    f78c:	bd70      	pop	{r4, r5, r6, pc}
    f78e:	4c12      	ldr	r4, [pc, #72]	; (f7d8 <CC_PalPowerSaveModeSelect+0x74>)
    f790:	6821      	ldr	r1, [r4, #0]
    f792:	b939      	cbnz	r1, f7a4 <CC_PalPowerSaveModeSelect+0x40>
    f794:	2001      	movs	r0, #1
    f796:	4b11      	ldr	r3, [pc, #68]	; (f7dc <CC_PalPowerSaveModeSelect+0x78>)
    f798:	4a11      	ldr	r2, [pc, #68]	; (f7e0 <CC_PalPowerSaveModeSelect+0x7c>)
    f79a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    f79e:	6813      	ldr	r3, [r2, #0]
    f7a0:	2b00      	cmp	r3, #0
    f7a2:	d1fc      	bne.n	f79e <CC_PalPowerSaveModeSelect+0x3a>
    f7a4:	3101      	adds	r1, #1
    f7a6:	6021      	str	r1, [r4, #0]
    f7a8:	68f3      	ldr	r3, [r6, #12]
    f7aa:	6928      	ldr	r0, [r5, #16]
    f7ac:	4798      	blx	r3
    f7ae:	2000      	movs	r0, #0
    f7b0:	bd70      	pop	{r4, r5, r6, pc}
    f7b2:	480c      	ldr	r0, [pc, #48]	; (f7e4 <CC_PalPowerSaveModeSelect+0x80>)
    f7b4:	bd70      	pop	{r4, r5, r6, pc}
    f7b6:	4a0a      	ldr	r2, [pc, #40]	; (f7e0 <CC_PalPowerSaveModeSelect+0x7c>)
    f7b8:	6813      	ldr	r3, [r2, #0]
    f7ba:	2b00      	cmp	r3, #0
    f7bc:	d1fc      	bne.n	f7b8 <CC_PalPowerSaveModeSelect+0x54>
    f7be:	4a07      	ldr	r2, [pc, #28]	; (f7dc <CC_PalPowerSaveModeSelect+0x78>)
    f7c0:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    f7c4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    f7c8:	f7ff ff48 	bl	f65c <CC_HalMaskInterrupt>
    f7cc:	6823      	ldr	r3, [r4, #0]
    f7ce:	e7d7      	b.n	f780 <CC_PalPowerSaveModeSelect+0x1c>
    f7d0:	200001a0 	.word	0x200001a0
    f7d4:	20000190 	.word	0x20000190
    f7d8:	20000c64 	.word	0x20000c64
    f7dc:	50840000 	.word	0x50840000
    f7e0:	50841910 	.word	0x50841910
    f7e4:	ffff8fe9 	.word	0xffff8fe9

0000f7e8 <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
    f7e8:	b480      	push	{r7}
    f7ea:	af00      	add	r7, sp, #0

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    f7ec:	bf00      	nop
    f7ee:	46bd      	mov	sp, r7
    f7f0:	bc80      	pop	{r7}
    f7f2:	4770      	bx	lr

0000f7f4 <k_is_user_context>:
 * Indicate whether the CPU is currently in user mode
 *
 * @return true if the CPU is currently running with user permissions
 */
static inline bool k_is_user_context(void)
{
    f7f4:	b480      	push	{r7}
    f7f6:	af00      	add	r7, sp, #0
#ifdef CONFIG_USERSPACE
	return arch_is_user_context();
#else
	return false;
    f7f8:	2300      	movs	r3, #0
#endif
}
    f7fa:	4618      	mov	r0, r3
    f7fc:	46bd      	mov	sp, r7
    f7fe:	bc80      	pop	{r7}
    f800:	4770      	bx	lr

0000f802 <k_ms_to_ticks_ceil64>:
{
    f802:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    f806:	b08c      	sub	sp, #48	; 0x30
    f808:	af00      	add	r7, sp, #0
    f80a:	e9c7 0100 	strd	r0, r1, [r7]
    f80e:	e9d7 2300 	ldrd	r2, r3, [r7]
    f812:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    f816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    f81a:	627b      	str	r3, [r7, #36]	; 0x24
    f81c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f820:	623b      	str	r3, [r7, #32]
    f822:	2301      	movs	r3, #1
    f824:	77fb      	strb	r3, [r7, #31]
    f826:	2300      	movs	r3, #0
    f828:	77bb      	strb	r3, [r7, #30]
    f82a:	2301      	movs	r3, #1
    f82c:	777b      	strb	r3, [r7, #29]
    f82e:	2300      	movs	r3, #0
    f830:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    f832:	7ffb      	ldrb	r3, [r7, #31]
    f834:	2b00      	cmp	r3, #0
    f836:	d00f      	beq.n	f858 <k_ms_to_ticks_ceil64+0x56>
	bool mul_ratio = const_hz &&
    f838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    f83a:	6a3b      	ldr	r3, [r7, #32]
    f83c:	429a      	cmp	r2, r3
    f83e:	d20b      	bcs.n	f858 <k_ms_to_ticks_ceil64+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    f840:	6a3b      	ldr	r3, [r7, #32]
    f842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    f844:	fbb3 f2f2 	udiv	r2, r3, r2
    f848:	6a79      	ldr	r1, [r7, #36]	; 0x24
    f84a:	fb01 f202 	mul.w	r2, r1, r2
    f84e:	1a9b      	subs	r3, r3, r2
    f850:	2b00      	cmp	r3, #0
    f852:	d101      	bne.n	f858 <k_ms_to_ticks_ceil64+0x56>
    f854:	2301      	movs	r3, #1
    f856:	e000      	b.n	f85a <k_ms_to_ticks_ceil64+0x58>
    f858:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
    f85a:	76fb      	strb	r3, [r7, #27]
    f85c:	7efb      	ldrb	r3, [r7, #27]
    f85e:	f003 0301 	and.w	r3, r3, #1
    f862:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    f864:	7ffb      	ldrb	r3, [r7, #31]
    f866:	2b00      	cmp	r3, #0
    f868:	d00f      	beq.n	f88a <k_ms_to_ticks_ceil64+0x88>
	bool div_ratio = const_hz &&
    f86a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    f86c:	6a3b      	ldr	r3, [r7, #32]
    f86e:	429a      	cmp	r2, r3
    f870:	d90b      	bls.n	f88a <k_ms_to_ticks_ceil64+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    f872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f874:	6a3a      	ldr	r2, [r7, #32]
    f876:	fbb3 f2f2 	udiv	r2, r3, r2
    f87a:	6a39      	ldr	r1, [r7, #32]
    f87c:	fb01 f202 	mul.w	r2, r1, r2
    f880:	1a9b      	subs	r3, r3, r2
    f882:	2b00      	cmp	r3, #0
    f884:	d101      	bne.n	f88a <k_ms_to_ticks_ceil64+0x88>
    f886:	2301      	movs	r3, #1
    f888:	e000      	b.n	f88c <k_ms_to_ticks_ceil64+0x8a>
    f88a:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
    f88c:	76bb      	strb	r3, [r7, #26]
    f88e:	7ebb      	ldrb	r3, [r7, #26]
    f890:	f003 0301 	and.w	r3, r3, #1
    f894:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
    f896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    f898:	6a3b      	ldr	r3, [r7, #32]
    f89a:	429a      	cmp	r2, r3
    f89c:	d10a      	bne.n	f8b4 <k_ms_to_ticks_ceil64+0xb2>
		return result32 ? ((uint32_t)t) : t;
    f89e:	7fbb      	ldrb	r3, [r7, #30]
    f8a0:	2b00      	cmp	r3, #0
    f8a2:	d004      	beq.n	f8ae <k_ms_to_ticks_ceil64+0xac>
    f8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f8a6:	461a      	mov	r2, r3
    f8a8:	f04f 0300 	mov.w	r3, #0
    f8ac:	e0c7      	b.n	fa3e <k_ms_to_ticks_ceil64+0x23c>
    f8ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    f8b2:	e0c4      	b.n	fa3e <k_ms_to_ticks_ceil64+0x23c>
	uint64_t off = 0;
    f8b4:	f04f 0200 	mov.w	r2, #0
    f8b8:	f04f 0300 	mov.w	r3, #0
    f8bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
    f8c0:	7efb      	ldrb	r3, [r7, #27]
    f8c2:	f083 0301 	eor.w	r3, r3, #1
    f8c6:	b2db      	uxtb	r3, r3
    f8c8:	2b00      	cmp	r3, #0
    f8ca:	d01d      	beq.n	f908 <k_ms_to_ticks_ceil64+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
    f8cc:	7ebb      	ldrb	r3, [r7, #26]
    f8ce:	2b00      	cmp	r3, #0
    f8d0:	d004      	beq.n	f8dc <k_ms_to_ticks_ceil64+0xda>
    f8d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    f8d4:	6a3b      	ldr	r3, [r7, #32]
    f8d6:	fbb2 f3f3 	udiv	r3, r2, r3
    f8da:	e000      	b.n	f8de <k_ms_to_ticks_ceil64+0xdc>
    f8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f8de:	60fb      	str	r3, [r7, #12]
		if (round_up) {
    f8e0:	7f7b      	ldrb	r3, [r7, #29]
    f8e2:	2b00      	cmp	r3, #0
    f8e4:	d006      	beq.n	f8f4 <k_ms_to_ticks_ceil64+0xf2>
			off = rdivisor - 1U;
    f8e6:	68fb      	ldr	r3, [r7, #12]
    f8e8:	3b01      	subs	r3, #1
    f8ea:	461a      	mov	r2, r3
    f8ec:	f04f 0300 	mov.w	r3, #0
    f8f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
    f8f4:	7f3b      	ldrb	r3, [r7, #28]
    f8f6:	2b00      	cmp	r3, #0
    f8f8:	d006      	beq.n	f908 <k_ms_to_ticks_ceil64+0x106>
			off = rdivisor / 2U;
    f8fa:	68fb      	ldr	r3, [r7, #12]
    f8fc:	085b      	lsrs	r3, r3, #1
    f8fe:	461a      	mov	r2, r3
    f900:	f04f 0300 	mov.w	r3, #0
    f904:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
    f908:	7ebb      	ldrb	r3, [r7, #26]
    f90a:	2b00      	cmp	r3, #0
    f90c:	d02a      	beq.n	f964 <k_ms_to_ticks_ceil64+0x162>
		t += off;
    f90e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
    f912:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    f916:	1884      	adds	r4, r0, r2
    f918:	eb41 0503 	adc.w	r5, r1, r3
    f91c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
    f920:	7fbb      	ldrb	r3, [r7, #30]
    f922:	2b00      	cmp	r3, #0
    f924:	d010      	beq.n	f948 <k_ms_to_ticks_ceil64+0x146>
    f926:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    f92a:	2b01      	cmp	r3, #1
    f92c:	bf08      	it	eq
    f92e:	2a00      	cmpeq	r2, #0
    f930:	d20a      	bcs.n	f948 <k_ms_to_ticks_ceil64+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
    f932:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f934:	6a79      	ldr	r1, [r7, #36]	; 0x24
    f936:	6a3b      	ldr	r3, [r7, #32]
    f938:	fbb1 f3f3 	udiv	r3, r1, r3
    f93c:	fbb2 f3f3 	udiv	r3, r2, r3
    f940:	461a      	mov	r2, r3
    f942:	f04f 0300 	mov.w	r3, #0
    f946:	e07a      	b.n	fa3e <k_ms_to_ticks_ceil64+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
    f948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    f94a:	6a3b      	ldr	r3, [r7, #32]
    f94c:	fbb2 f3f3 	udiv	r3, r2, r3
    f950:	461a      	mov	r2, r3
    f952:	f04f 0300 	mov.w	r3, #0
    f956:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
    f95a:	f7f0 fbf3 	bl	144 <__aeabi_uldivmod>
    f95e:	4602      	mov	r2, r0
    f960:	460b      	mov	r3, r1
    f962:	e06c      	b.n	fa3e <k_ms_to_ticks_ceil64+0x23c>
	} else if (mul_ratio) {
    f964:	7efb      	ldrb	r3, [r7, #27]
    f966:	2b00      	cmp	r3, #0
    f968:	d021      	beq.n	f9ae <k_ms_to_ticks_ceil64+0x1ac>
		if (result32) {
    f96a:	7fbb      	ldrb	r3, [r7, #30]
    f96c:	2b00      	cmp	r3, #0
    f96e:	d00a      	beq.n	f986 <k_ms_to_ticks_ceil64+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
    f970:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f972:	6a39      	ldr	r1, [r7, #32]
    f974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    f976:	fbb1 f2f2 	udiv	r2, r1, r2
    f97a:	fb02 f303 	mul.w	r3, r2, r3
    f97e:	461a      	mov	r2, r3
    f980:	f04f 0300 	mov.w	r3, #0
    f984:	e05b      	b.n	fa3e <k_ms_to_ticks_ceil64+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
    f986:	6a3a      	ldr	r2, [r7, #32]
    f988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f98a:	fbb2 f3f3 	udiv	r3, r2, r3
    f98e:	461a      	mov	r2, r3
    f990:	f04f 0300 	mov.w	r3, #0
    f994:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    f996:	fb03 f001 	mul.w	r0, r3, r1
    f99a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    f99c:	fb02 f101 	mul.w	r1, r2, r1
    f9a0:	4401      	add	r1, r0
    f9a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    f9a4:	fba0 2302 	umull	r2, r3, r0, r2
    f9a8:	4419      	add	r1, r3
    f9aa:	460b      	mov	r3, r1
    f9ac:	e047      	b.n	fa3e <k_ms_to_ticks_ceil64+0x23c>
		if (result32) {
    f9ae:	7fbb      	ldrb	r3, [r7, #30]
    f9b0:	2b00      	cmp	r3, #0
    f9b2:	d024      	beq.n	f9fe <k_ms_to_ticks_ceil64+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
    f9b4:	6a3b      	ldr	r3, [r7, #32]
    f9b6:	461a      	mov	r2, r3
    f9b8:	f04f 0300 	mov.w	r3, #0
    f9bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    f9be:	fb03 f001 	mul.w	r0, r3, r1
    f9c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    f9c4:	fb02 f101 	mul.w	r1, r2, r1
    f9c8:	4401      	add	r1, r0
    f9ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    f9cc:	fba0 2302 	umull	r2, r3, r0, r2
    f9d0:	4419      	add	r1, r3
    f9d2:	460b      	mov	r3, r1
    f9d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    f9d8:	eb12 0a00 	adds.w	sl, r2, r0
    f9dc:	eb43 0b01 	adc.w	fp, r3, r1
    f9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f9e2:	461a      	mov	r2, r3
    f9e4:	f04f 0300 	mov.w	r3, #0
    f9e8:	4650      	mov	r0, sl
    f9ea:	4659      	mov	r1, fp
    f9ec:	f7f0 fbaa 	bl	144 <__aeabi_uldivmod>
    f9f0:	4602      	mov	r2, r0
    f9f2:	460b      	mov	r3, r1
    f9f4:	4613      	mov	r3, r2
    f9f6:	461a      	mov	r2, r3
    f9f8:	f04f 0300 	mov.w	r3, #0
    f9fc:	e01f      	b.n	fa3e <k_ms_to_ticks_ceil64+0x23c>
			return (t * to_hz + off) / from_hz;
    f9fe:	6a3b      	ldr	r3, [r7, #32]
    fa00:	461a      	mov	r2, r3
    fa02:	f04f 0300 	mov.w	r3, #0
    fa06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    fa08:	fb03 f001 	mul.w	r0, r3, r1
    fa0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    fa0e:	fb02 f101 	mul.w	r1, r2, r1
    fa12:	4401      	add	r1, r0
    fa14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    fa16:	fba0 2302 	umull	r2, r3, r0, r2
    fa1a:	4419      	add	r1, r3
    fa1c:	460b      	mov	r3, r1
    fa1e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    fa22:	eb12 0800 	adds.w	r8, r2, r0
    fa26:	eb43 0901 	adc.w	r9, r3, r1
    fa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    fa2c:	461a      	mov	r2, r3
    fa2e:	f04f 0300 	mov.w	r3, #0
    fa32:	4640      	mov	r0, r8
    fa34:	4649      	mov	r1, r9
    fa36:	f7f0 fb85 	bl	144 <__aeabi_uldivmod>
    fa3a:	4602      	mov	r2, r0
    fa3c:	460b      	mov	r3, r1
}
    fa3e:	4610      	mov	r0, r2
    fa40:	4619      	mov	r1, r3
    fa42:	3730      	adds	r7, #48	; 0x30
    fa44:	46bd      	mov	sp, r7
    fa46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0000fa4a <k_msleep>:
{
    fa4a:	b580      	push	{r7, lr}
    fa4c:	b082      	sub	sp, #8
    fa4e:	af00      	add	r7, sp, #0
    fa50:	6078      	str	r0, [r7, #4]
	return k_sleep(Z_TIMEOUT_MS(ms));
    fa52:	687b      	ldr	r3, [r7, #4]
    fa54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fa58:	461a      	mov	r2, r3
    fa5a:	ea4f 73e2 	mov.w	r3, r2, asr #31
    fa5e:	4610      	mov	r0, r2
    fa60:	4619      	mov	r1, r3
    fa62:	f7ff fece 	bl	f802 <k_ms_to_ticks_ceil64>
    fa66:	4602      	mov	r2, r0
    fa68:	460b      	mov	r3, r1
    fa6a:	4610      	mov	r0, r2
    fa6c:	4619      	mov	r1, r3
    fa6e:	f000 f806 	bl	fa7e <k_sleep>
    fa72:	4601      	mov	r1, r0
    fa74:	460b      	mov	r3, r1
}
    fa76:	4618      	mov	r0, r3
    fa78:	3708      	adds	r7, #8
    fa7a:	46bd      	mov	sp, r7
    fa7c:	bd80      	pop	{r7, pc}

0000fa7e <k_sleep>:
}


extern int32_t z_impl_k_sleep(k_timeout_t timeout);
static inline int32_t k_sleep(k_timeout_t timeout)
{
    fa7e:	b580      	push	{r7, lr}
    fa80:	b082      	sub	sp, #8
    fa82:	af00      	add	r7, sp, #0
    fa84:	e9c7 0100 	strd	r0, r1, [r7]
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    fa88:	e9d7 0100 	ldrd	r0, r1, [r7]
    fa8c:	f7fe fd3e 	bl	e50c <z_impl_k_sleep>
    fa90:	4603      	mov	r3, r0
}
    fa92:	4618      	mov	r0, r3
    fa94:	3708      	adds	r7, #8
    fa96:	46bd      	mov	sp, r7
    fa98:	bd80      	pop	{r7, pc}

0000fa9a <device_get_binding>:
extern "C" {
#endif

extern const struct device * z_impl_device_get_binding(const char * name);
static inline const struct device * device_get_binding(const char * name)
{
    fa9a:	b580      	push	{r7, lr}
    fa9c:	b082      	sub	sp, #8
    fa9e:	af00      	add	r7, sp, #0
    faa0:	6078      	str	r0, [r7, #4]
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    faa2:	6878      	ldr	r0, [r7, #4]
    faa4:	f7fa ffee 	bl	aa84 <z_impl_device_get_binding>
    faa8:	4603      	mov	r3, r0
}
    faaa:	4618      	mov	r0, r3
    faac:	3708      	adds	r7, #8
    faae:	46bd      	mov	sp, r7
    fab0:	bd80      	pop	{r7, pc}

0000fab2 <uart_callback_set>:
 * @retval 0	    If successful, negative errno code otherwise.
 */
static inline int uart_callback_set(const struct device *dev,
				    uart_callback_t callback,
				    void *user_data)
{
    fab2:	b580      	push	{r7, lr}
    fab4:	b086      	sub	sp, #24
    fab6:	af00      	add	r7, sp, #0
    fab8:	60f8      	str	r0, [r7, #12]
    faba:	60b9      	str	r1, [r7, #8]
    fabc:	607a      	str	r2, [r7, #4]
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
    fabe:	68fb      	ldr	r3, [r7, #12]
    fac0:	689b      	ldr	r3, [r3, #8]
    fac2:	617b      	str	r3, [r7, #20]
			(const struct uart_driver_api *)dev->api;

	return api->callback_set(dev, callback, user_data);
    fac4:	697b      	ldr	r3, [r7, #20]
    fac6:	681b      	ldr	r3, [r3, #0]
    fac8:	687a      	ldr	r2, [r7, #4]
    faca:	68b9      	ldr	r1, [r7, #8]
    facc:	68f8      	ldr	r0, [r7, #12]
    face:	4798      	blx	r3
    fad0:	4603      	mov	r3, r0
#else
	return -ENOTSUP;
#endif
}
    fad2:	4618      	mov	r0, r3
    fad4:	3718      	adds	r7, #24
    fad6:	46bd      	mov	sp, r7
    fad8:	bd80      	pop	{r7, pc}

0000fada <z_impl_uart_tx>:
		      int32_t timeout);

static inline int z_impl_uart_tx(const struct device *dev, const uint8_t *buf,
				 size_t len, int32_t timeout)

{
    fada:	b590      	push	{r4, r7, lr}
    fadc:	b087      	sub	sp, #28
    fade:	af00      	add	r7, sp, #0
    fae0:	60f8      	str	r0, [r7, #12]
    fae2:	60b9      	str	r1, [r7, #8]
    fae4:	607a      	str	r2, [r7, #4]
    fae6:	603b      	str	r3, [r7, #0]
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
    fae8:	68fb      	ldr	r3, [r7, #12]
    faea:	689b      	ldr	r3, [r3, #8]
    faec:	617b      	str	r3, [r7, #20]
			(const struct uart_driver_api *)dev->api;

	return api->tx(dev, buf, len, timeout);
    faee:	697b      	ldr	r3, [r7, #20]
    faf0:	685c      	ldr	r4, [r3, #4]
    faf2:	683b      	ldr	r3, [r7, #0]
    faf4:	687a      	ldr	r2, [r7, #4]
    faf6:	68b9      	ldr	r1, [r7, #8]
    faf8:	68f8      	ldr	r0, [r7, #12]
    fafa:	47a0      	blx	r4
    fafc:	4603      	mov	r3, r0
#else
	return -ENOTSUP;
#endif
}
    fafe:	4618      	mov	r0, r3
    fb00:	371c      	adds	r7, #28
    fb02:	46bd      	mov	sp, r7
    fb04:	bd90      	pop	{r4, r7, pc}

0000fb06 <z_impl_uart_rx_enable>:
			     int32_t timeout);

static inline int z_impl_uart_rx_enable(const struct device *dev,
					uint8_t *buf,
					size_t len, int32_t timeout)
{
    fb06:	b590      	push	{r4, r7, lr}
    fb08:	b087      	sub	sp, #28
    fb0a:	af00      	add	r7, sp, #0
    fb0c:	60f8      	str	r0, [r7, #12]
    fb0e:	60b9      	str	r1, [r7, #8]
    fb10:	607a      	str	r2, [r7, #4]
    fb12:	603b      	str	r3, [r7, #0]
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
    fb14:	68fb      	ldr	r3, [r7, #12]
    fb16:	689b      	ldr	r3, [r3, #8]
    fb18:	617b      	str	r3, [r7, #20]
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
    fb1a:	697b      	ldr	r3, [r7, #20]
    fb1c:	68dc      	ldr	r4, [r3, #12]
    fb1e:	683b      	ldr	r3, [r7, #0]
    fb20:	687a      	ldr	r2, [r7, #4]
    fb22:	68b9      	ldr	r1, [r7, #8]
    fb24:	68f8      	ldr	r0, [r7, #12]
    fb26:	47a0      	blx	r4
    fb28:	4603      	mov	r3, r0
#else
	return -ENOTSUP;
#endif
}
    fb2a:	4618      	mov	r0, r3
    fb2c:	371c      	adds	r7, #28
    fb2e:	46bd      	mov	sp, r7
    fb30:	bd90      	pop	{r4, r7, pc}

0000fb32 <uart_rx_buf_rsp>:
 * @retval 0	    If successful, negative errno code otherwise.
 *
 */
static inline int uart_rx_buf_rsp(const struct device *dev, uint8_t *buf,
				  size_t len)
{
    fb32:	b580      	push	{r7, lr}
    fb34:	b086      	sub	sp, #24
    fb36:	af00      	add	r7, sp, #0
    fb38:	60f8      	str	r0, [r7, #12]
    fb3a:	60b9      	str	r1, [r7, #8]
    fb3c:	607a      	str	r2, [r7, #4]
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
    fb3e:	68fb      	ldr	r3, [r7, #12]
    fb40:	689b      	ldr	r3, [r3, #8]
    fb42:	617b      	str	r3, [r7, #20]
				(const struct uart_driver_api *)dev->api;

	return api->rx_buf_rsp(dev, buf, len);
    fb44:	697b      	ldr	r3, [r7, #20]
    fb46:	691b      	ldr	r3, [r3, #16]
    fb48:	687a      	ldr	r2, [r7, #4]
    fb4a:	68b9      	ldr	r1, [r7, #8]
    fb4c:	68f8      	ldr	r0, [r7, #12]
    fb4e:	4798      	blx	r3
    fb50:	4603      	mov	r3, r0
#else
	return -ENOTSUP;
#endif
}
    fb52:	4618      	mov	r0, r3
    fb54:	3718      	adds	r7, #24
    fb56:	46bd      	mov	sp, r7
    fb58:	bd80      	pop	{r7, pc}

0000fb5a <z_impl_uart_poll_out>:
__syscall void uart_poll_out(const struct device *dev,
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
    fb5a:	b580      	push	{r7, lr}
    fb5c:	b084      	sub	sp, #16
    fb5e:	af00      	add	r7, sp, #0
    fb60:	6078      	str	r0, [r7, #4]
    fb62:	460b      	mov	r3, r1
    fb64:	70fb      	strb	r3, [r7, #3]
	const struct uart_driver_api *api =
    fb66:	687b      	ldr	r3, [r7, #4]
    fb68:	689b      	ldr	r3, [r3, #8]
    fb6a:	60fb      	str	r3, [r7, #12]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    fb6c:	68fb      	ldr	r3, [r7, #12]
    fb6e:	69db      	ldr	r3, [r3, #28]
    fb70:	78fa      	ldrb	r2, [r7, #3]
    fb72:	4611      	mov	r1, r2
    fb74:	6878      	ldr	r0, [r7, #4]
    fb76:	4798      	blx	r3
}
    fb78:	bf00      	nop
    fb7a:	3710      	adds	r7, #16
    fb7c:	46bd      	mov	sp, r7
    fb7e:	bd80      	pop	{r7, pc}

0000fb80 <uart_tx>:
extern "C" {
#endif

extern int z_impl_uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout);
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
{
    fb80:	b580      	push	{r7, lr}
    fb82:	b084      	sub	sp, #16
    fb84:	af00      	add	r7, sp, #0
    fb86:	60f8      	str	r0, [r7, #12]
    fb88:	60b9      	str	r1, [r7, #8]
    fb8a:	607a      	str	r2, [r7, #4]
    fb8c:	603b      	str	r3, [r7, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&timeout, K_SYSCALL_UART_TX);
	}
#endif
	compiler_barrier();
	return z_impl_uart_tx(dev, buf, len, timeout);
    fb8e:	683b      	ldr	r3, [r7, #0]
    fb90:	687a      	ldr	r2, [r7, #4]
    fb92:	68b9      	ldr	r1, [r7, #8]
    fb94:	68f8      	ldr	r0, [r7, #12]
    fb96:	f7ff ffa0 	bl	fada <z_impl_uart_tx>
    fb9a:	4603      	mov	r3, r0
}
    fb9c:	4618      	mov	r0, r3
    fb9e:	3710      	adds	r7, #16
    fba0:	46bd      	mov	sp, r7
    fba2:	bd80      	pop	{r7, pc}

0000fba4 <uart_rx_enable>:
}


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
{
    fba4:	b580      	push	{r7, lr}
    fba6:	b084      	sub	sp, #16
    fba8:	af00      	add	r7, sp, #0
    fbaa:	60f8      	str	r0, [r7, #12]
    fbac:	60b9      	str	r1, [r7, #8]
    fbae:	607a      	str	r2, [r7, #4]
    fbb0:	603b      	str	r3, [r7, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&timeout, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
    fbb2:	683b      	ldr	r3, [r7, #0]
    fbb4:	687a      	ldr	r2, [r7, #4]
    fbb6:	68b9      	ldr	r1, [r7, #8]
    fbb8:	68f8      	ldr	r0, [r7, #12]
    fbba:	f7ff ffa4 	bl	fb06 <z_impl_uart_rx_enable>
    fbbe:	4603      	mov	r3, r0
}
    fbc0:	4618      	mov	r0, r3
    fbc2:	3710      	adds	r7, #16
    fbc4:	46bd      	mov	sp, r7
    fbc6:	bd80      	pop	{r7, pc}

0000fbc8 <uart_poll_out>:
}


extern void z_impl_uart_poll_out(const struct device * dev, unsigned char out_char);
static inline void uart_poll_out(const struct device * dev, unsigned char out_char)
{
    fbc8:	b580      	push	{r7, lr}
    fbca:	b082      	sub	sp, #8
    fbcc:	af00      	add	r7, sp, #0
    fbce:	6078      	str	r0, [r7, #4]
    fbd0:	460b      	mov	r3, r1
    fbd2:	70fb      	strb	r3, [r7, #3]
		arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&out_char, K_SYSCALL_UART_POLL_OUT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
    fbd4:	78fb      	ldrb	r3, [r7, #3]
    fbd6:	4619      	mov	r1, r3
    fbd8:	6878      	ldr	r0, [r7, #4]
    fbda:	f7ff ffbe 	bl	fb5a <z_impl_uart_poll_out>
}
    fbde:	bf00      	nop
    fbe0:	3708      	adds	r7, #8
    fbe2:	46bd      	mov	sp, r7
    fbe4:	bd80      	pop	{r7, pc}

0000fbe6 <sys_notify_get_method>:
{
    fbe6:	b480      	push	{r7}
    fbe8:	b085      	sub	sp, #20
    fbea:	af00      	add	r7, sp, #0
    fbec:	6078      	str	r0, [r7, #4]
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    fbee:	687b      	ldr	r3, [r7, #4]
    fbf0:	685b      	ldr	r3, [r3, #4]
    fbf2:	60fb      	str	r3, [r7, #12]
	return method & SYS_NOTIFY_METHOD_MASK;
    fbf4:	68fb      	ldr	r3, [r7, #12]
    fbf6:	f003 0303 	and.w	r3, r3, #3
}
    fbfa:	4618      	mov	r0, r3
    fbfc:	3714      	adds	r7, #20
    fbfe:	46bd      	mov	sp, r7
    fc00:	bc80      	pop	{r7}
    fc02:	4770      	bx	lr

0000fc04 <sys_notify_validate>:
{
    fc04:	b580      	push	{r7, lr}
    fc06:	b084      	sub	sp, #16
    fc08:	af00      	add	r7, sp, #0
    fc0a:	6078      	str	r0, [r7, #4]
	int rv = 0;
    fc0c:	2300      	movs	r3, #0
    fc0e:	60fb      	str	r3, [r7, #12]
	if (notify == NULL) {
    fc10:	687b      	ldr	r3, [r7, #4]
    fc12:	2b00      	cmp	r3, #0
    fc14:	d102      	bne.n	fc1c <sys_notify_validate+0x18>
		return -EINVAL;
    fc16:	f06f 0315 	mvn.w	r3, #21
    fc1a:	e01d      	b.n	fc58 <sys_notify_validate+0x54>
	switch (sys_notify_get_method(notify)) {
    fc1c:	6878      	ldr	r0, [r7, #4]
    fc1e:	f7ff ffe2 	bl	fbe6 <sys_notify_get_method>
    fc22:	4603      	mov	r3, r0
    fc24:	2b01      	cmp	r3, #1
    fc26:	d00d      	beq.n	fc44 <sys_notify_validate+0x40>
    fc28:	2b03      	cmp	r3, #3
    fc2a:	d107      	bne.n	fc3c <sys_notify_validate+0x38>
		if (notify->method.callback == NULL) {
    fc2c:	687b      	ldr	r3, [r7, #4]
    fc2e:	681b      	ldr	r3, [r3, #0]
    fc30:	2b00      	cmp	r3, #0
    fc32:	d109      	bne.n	fc48 <sys_notify_validate+0x44>
			rv = -EINVAL;
    fc34:	f06f 0315 	mvn.w	r3, #21
    fc38:	60fb      	str	r3, [r7, #12]
		break;
    fc3a:	e005      	b.n	fc48 <sys_notify_validate+0x44>
		rv = -EINVAL;
    fc3c:	f06f 0315 	mvn.w	r3, #21
    fc40:	60fb      	str	r3, [r7, #12]
		break;
    fc42:	e002      	b.n	fc4a <sys_notify_validate+0x46>
		break;
    fc44:	bf00      	nop
    fc46:	e000      	b.n	fc4a <sys_notify_validate+0x46>
		break;
    fc48:	bf00      	nop
	if (rv == 0) {
    fc4a:	68fb      	ldr	r3, [r7, #12]
    fc4c:	2b00      	cmp	r3, #0
    fc4e:	d102      	bne.n	fc56 <sys_notify_validate+0x52>
		notify->result = 0;
    fc50:	687b      	ldr	r3, [r7, #4]
    fc52:	2200      	movs	r2, #0
    fc54:	609a      	str	r2, [r3, #8]
	return rv;
    fc56:	68fb      	ldr	r3, [r7, #12]
}
    fc58:	4618      	mov	r0, r3
    fc5a:	3710      	adds	r7, #16
    fc5c:	46bd      	mov	sp, r7
    fc5e:	bd80      	pop	{r7, pc}

0000fc60 <arch_printk_char_out>:
{
    fc60:	b480      	push	{r7}
    fc62:	b083      	sub	sp, #12
    fc64:	af00      	add	r7, sp, #0
    fc66:	6078      	str	r0, [r7, #4]
	return 0;
    fc68:	2300      	movs	r3, #0
}
    fc6a:	4618      	mov	r0, r3
    fc6c:	370c      	adds	r7, #12
    fc6e:	46bd      	mov	sp, r7
    fc70:	bc80      	pop	{r7}
    fc72:	4770      	bx	lr

0000fc74 <printk>:
{
    fc74:	b40f      	push	{r0, r1, r2, r3}
    fc76:	b580      	push	{r7, lr}
    fc78:	b082      	sub	sp, #8
    fc7a:	af00      	add	r7, sp, #0
	va_start(ap, fmt);
    fc7c:	f107 0314 	add.w	r3, r7, #20
    fc80:	607b      	str	r3, [r7, #4]
		vprintk(fmt, ap);
    fc82:	6879      	ldr	r1, [r7, #4]
    fc84:	6938      	ldr	r0, [r7, #16]
    fc86:	f7f0 fe0d 	bl	8a4 <vprintk>
}
    fc8a:	bf00      	nop
    fc8c:	3708      	adds	r7, #8
    fc8e:	46bd      	mov	sp, r7
    fc90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    fc94:	b004      	add	sp, #16
    fc96:	4770      	bx	lr

0000fc98 <str_out>:
{
    fc98:	b480      	push	{r7}
    fc9a:	b083      	sub	sp, #12
    fc9c:	af00      	add	r7, sp, #0
    fc9e:	6078      	str	r0, [r7, #4]
    fca0:	6039      	str	r1, [r7, #0]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    fca2:	683b      	ldr	r3, [r7, #0]
    fca4:	681b      	ldr	r3, [r3, #0]
    fca6:	2b00      	cmp	r3, #0
    fca8:	d005      	beq.n	fcb6 <str_out+0x1e>
    fcaa:	683b      	ldr	r3, [r7, #0]
    fcac:	689a      	ldr	r2, [r3, #8]
    fcae:	683b      	ldr	r3, [r7, #0]
    fcb0:	685b      	ldr	r3, [r3, #4]
    fcb2:	429a      	cmp	r2, r3
    fcb4:	db06      	blt.n	fcc4 <str_out+0x2c>
		ctx->count++;
    fcb6:	683b      	ldr	r3, [r7, #0]
    fcb8:	689b      	ldr	r3, [r3, #8]
    fcba:	1c5a      	adds	r2, r3, #1
    fcbc:	683b      	ldr	r3, [r7, #0]
    fcbe:	609a      	str	r2, [r3, #8]
		return c;
    fcc0:	687b      	ldr	r3, [r7, #4]
    fcc2:	e01d      	b.n	fd00 <str_out+0x68>
	if (ctx->count == ctx->max - 1) {
    fcc4:	683b      	ldr	r3, [r7, #0]
    fcc6:	689a      	ldr	r2, [r3, #8]
    fcc8:	683b      	ldr	r3, [r7, #0]
    fcca:	685b      	ldr	r3, [r3, #4]
    fccc:	3b01      	subs	r3, #1
    fcce:	429a      	cmp	r2, r3
    fcd0:	d10a      	bne.n	fce8 <str_out+0x50>
		ctx->str[ctx->count++] = '\0';
    fcd2:	683b      	ldr	r3, [r7, #0]
    fcd4:	681a      	ldr	r2, [r3, #0]
    fcd6:	683b      	ldr	r3, [r7, #0]
    fcd8:	689b      	ldr	r3, [r3, #8]
    fcda:	1c58      	adds	r0, r3, #1
    fcdc:	6839      	ldr	r1, [r7, #0]
    fcde:	6088      	str	r0, [r1, #8]
    fce0:	4413      	add	r3, r2
    fce2:	2200      	movs	r2, #0
    fce4:	701a      	strb	r2, [r3, #0]
    fce6:	e00a      	b.n	fcfe <str_out+0x66>
		ctx->str[ctx->count++] = c;
    fce8:	683b      	ldr	r3, [r7, #0]
    fcea:	681a      	ldr	r2, [r3, #0]
    fcec:	683b      	ldr	r3, [r7, #0]
    fcee:	689b      	ldr	r3, [r3, #8]
    fcf0:	1c58      	adds	r0, r3, #1
    fcf2:	6839      	ldr	r1, [r7, #0]
    fcf4:	6088      	str	r0, [r1, #8]
    fcf6:	4413      	add	r3, r2
    fcf8:	687a      	ldr	r2, [r7, #4]
    fcfa:	b2d2      	uxtb	r2, r2
    fcfc:	701a      	strb	r2, [r3, #0]
	return c;
    fcfe:	687b      	ldr	r3, [r7, #4]
}
    fd00:	4618      	mov	r0, r3
    fd02:	370c      	adds	r7, #12
    fd04:	46bd      	mov	sp, r7
    fd06:	bc80      	pop	{r7}
    fd08:	4770      	bx	lr

0000fd0a <snprintk>:
{
    fd0a:	b40c      	push	{r2, r3}
    fd0c:	b580      	push	{r7, lr}
    fd0e:	b084      	sub	sp, #16
    fd10:	af00      	add	r7, sp, #0
    fd12:	6078      	str	r0, [r7, #4]
    fd14:	6039      	str	r1, [r7, #0]
	va_start(ap, fmt);
    fd16:	f107 031c 	add.w	r3, r7, #28
    fd1a:	60bb      	str	r3, [r7, #8]
	ret = vsnprintk(str, size, fmt, ap);
    fd1c:	68bb      	ldr	r3, [r7, #8]
    fd1e:	69ba      	ldr	r2, [r7, #24]
    fd20:	6839      	ldr	r1, [r7, #0]
    fd22:	6878      	ldr	r0, [r7, #4]
    fd24:	f7f0 fdd2 	bl	8cc <vsnprintk>
    fd28:	60f8      	str	r0, [r7, #12]
	return ret;
    fd2a:	68fb      	ldr	r3, [r7, #12]
}
    fd2c:	4618      	mov	r0, r3
    fd2e:	3710      	adds	r7, #16
    fd30:	46bd      	mov	sp, r7
    fd32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    fd36:	b002      	add	sp, #8
    fd38:	4770      	bx	lr

0000fd3a <sys_slist_init>:
 * @brief Initialize a list
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
    fd3a:	b480      	push	{r7}
    fd3c:	b083      	sub	sp, #12
    fd3e:	af00      	add	r7, sp, #0
    fd40:	6078      	str	r0, [r7, #4]
	list->head = NULL;
    fd42:	687b      	ldr	r3, [r7, #4]
    fd44:	2200      	movs	r2, #0
    fd46:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
    fd48:	687b      	ldr	r3, [r7, #4]
    fd4a:	2200      	movs	r2, #0
    fd4c:	605a      	str	r2, [r3, #4]
}
    fd4e:	bf00      	nop
    fd50:	370c      	adds	r7, #12
    fd52:	46bd      	mov	sp, r7
    fd54:	bc80      	pop	{r7}
    fd56:	4770      	bx	lr

0000fd58 <z_snode_next_peek>:

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
    fd58:	b480      	push	{r7}
    fd5a:	b083      	sub	sp, #12
    fd5c:	af00      	add	r7, sp, #0
    fd5e:	6078      	str	r0, [r7, #4]
	return node->next;
    fd60:	687b      	ldr	r3, [r7, #4]
    fd62:	681b      	ldr	r3, [r3, #0]
}
    fd64:	4618      	mov	r0, r3
    fd66:	370c      	adds	r7, #12
    fd68:	46bd      	mov	sp, r7
    fd6a:	bc80      	pop	{r7}
    fd6c:	4770      	bx	lr

0000fd6e <z_snode_next_set>:

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
    fd6e:	b480      	push	{r7}
    fd70:	b083      	sub	sp, #12
    fd72:	af00      	add	r7, sp, #0
    fd74:	6078      	str	r0, [r7, #4]
    fd76:	6039      	str	r1, [r7, #0]
	parent->next = child;
    fd78:	687b      	ldr	r3, [r7, #4]
    fd7a:	683a      	ldr	r2, [r7, #0]
    fd7c:	601a      	str	r2, [r3, #0]
}
    fd7e:	bf00      	nop
    fd80:	370c      	adds	r7, #12
    fd82:	46bd      	mov	sp, r7
    fd84:	bc80      	pop	{r7}
    fd86:	4770      	bx	lr

0000fd88 <z_slist_head_set>:

static inline void z_slist_head_set(sys_slist_t *list, sys_snode_t *node)
{
    fd88:	b480      	push	{r7}
    fd8a:	b083      	sub	sp, #12
    fd8c:	af00      	add	r7, sp, #0
    fd8e:	6078      	str	r0, [r7, #4]
    fd90:	6039      	str	r1, [r7, #0]
	list->head = node;
    fd92:	687b      	ldr	r3, [r7, #4]
    fd94:	683a      	ldr	r2, [r7, #0]
    fd96:	601a      	str	r2, [r3, #0]
}
    fd98:	bf00      	nop
    fd9a:	370c      	adds	r7, #12
    fd9c:	46bd      	mov	sp, r7
    fd9e:	bc80      	pop	{r7}
    fda0:	4770      	bx	lr

0000fda2 <z_slist_tail_set>:

static inline void z_slist_tail_set(sys_slist_t *list, sys_snode_t *node)
{
    fda2:	b480      	push	{r7}
    fda4:	b083      	sub	sp, #12
    fda6:	af00      	add	r7, sp, #0
    fda8:	6078      	str	r0, [r7, #4]
    fdaa:	6039      	str	r1, [r7, #0]
	list->tail = node;
    fdac:	687b      	ldr	r3, [r7, #4]
    fdae:	683a      	ldr	r2, [r7, #0]
    fdb0:	605a      	str	r2, [r3, #4]
}
    fdb2:	bf00      	nop
    fdb4:	370c      	adds	r7, #12
    fdb6:	46bd      	mov	sp, r7
    fdb8:	bc80      	pop	{r7}
    fdba:	4770      	bx	lr

0000fdbc <sys_slist_peek_head>:
 * @param list A point on the list to peek the first node from
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
    fdbc:	b480      	push	{r7}
    fdbe:	b083      	sub	sp, #12
    fdc0:	af00      	add	r7, sp, #0
    fdc2:	6078      	str	r0, [r7, #4]
	return list->head;
    fdc4:	687b      	ldr	r3, [r7, #4]
    fdc6:	681b      	ldr	r3, [r3, #0]
}
    fdc8:	4618      	mov	r0, r3
    fdca:	370c      	adds	r7, #12
    fdcc:	46bd      	mov	sp, r7
    fdce:	bc80      	pop	{r7}
    fdd0:	4770      	bx	lr

0000fdd2 <sys_slist_peek_tail>:
 * @param list A point on the list to peek the last node from
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
    fdd2:	b480      	push	{r7}
    fdd4:	b083      	sub	sp, #12
    fdd6:	af00      	add	r7, sp, #0
    fdd8:	6078      	str	r0, [r7, #4]
	return list->tail;
    fdda:	687b      	ldr	r3, [r7, #4]
    fddc:	685b      	ldr	r3, [r3, #4]
}
    fdde:	4618      	mov	r0, r3
    fde0:	370c      	adds	r7, #12
    fde2:	46bd      	mov	sp, r7
    fde4:	bc80      	pop	{r7}
    fde6:	4770      	bx	lr

0000fde8 <sys_slist_is_empty>:
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
    fde8:	b580      	push	{r7, lr}
    fdea:	b082      	sub	sp, #8
    fdec:	af00      	add	r7, sp, #0
    fdee:	6078      	str	r0, [r7, #4]
    fdf0:	6878      	ldr	r0, [r7, #4]
    fdf2:	f7ff ffe3 	bl	fdbc <sys_slist_peek_head>
    fdf6:	4603      	mov	r3, r0
    fdf8:	2b00      	cmp	r3, #0
    fdfa:	bf0c      	ite	eq
    fdfc:	2301      	moveq	r3, #1
    fdfe:	2300      	movne	r3, #0
    fe00:	b2db      	uxtb	r3, r3
    fe02:	4618      	mov	r0, r3
    fe04:	3708      	adds	r7, #8
    fe06:	46bd      	mov	sp, r7
    fe08:	bd80      	pop	{r7, pc}

0000fe0a <sys_slist_peek_next_no_check>:
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    fe0a:	b580      	push	{r7, lr}
    fe0c:	b082      	sub	sp, #8
    fe0e:	af00      	add	r7, sp, #0
    fe10:	6078      	str	r0, [r7, #4]
    fe12:	6878      	ldr	r0, [r7, #4]
    fe14:	f7ff ffa0 	bl	fd58 <z_snode_next_peek>
    fe18:	4603      	mov	r3, r0
    fe1a:	4618      	mov	r0, r3
    fe1c:	3708      	adds	r7, #8
    fe1e:	46bd      	mov	sp, r7
    fe20:	bd80      	pop	{r7, pc}

0000fe22 <sys_slist_peek_next>:
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    fe22:	b580      	push	{r7, lr}
    fe24:	b082      	sub	sp, #8
    fe26:	af00      	add	r7, sp, #0
    fe28:	6078      	str	r0, [r7, #4]
    fe2a:	687b      	ldr	r3, [r7, #4]
    fe2c:	2b00      	cmp	r3, #0
    fe2e:	d004      	beq.n	fe3a <sys_slist_peek_next+0x18>
    fe30:	6878      	ldr	r0, [r7, #4]
    fe32:	f7ff ffea 	bl	fe0a <sys_slist_peek_next_no_check>
    fe36:	4603      	mov	r3, r0
    fe38:	e000      	b.n	fe3c <sys_slist_peek_next+0x1a>
    fe3a:	2300      	movs	r3, #0
    fe3c:	4618      	mov	r0, r3
    fe3e:	3708      	adds	r7, #8
    fe40:	46bd      	mov	sp, r7
    fe42:	bd80      	pop	{r7, pc}

0000fe44 <sys_slist_append>:
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    fe44:	b580      	push	{r7, lr}
    fe46:	b082      	sub	sp, #8
    fe48:	af00      	add	r7, sp, #0
    fe4a:	6078      	str	r0, [r7, #4]
    fe4c:	6039      	str	r1, [r7, #0]
    fe4e:	2100      	movs	r1, #0
    fe50:	6838      	ldr	r0, [r7, #0]
    fe52:	f7ff ff8c 	bl	fd6e <z_snode_next_set>
    fe56:	6878      	ldr	r0, [r7, #4]
    fe58:	f7ff ffbb 	bl	fdd2 <sys_slist_peek_tail>
    fe5c:	4603      	mov	r3, r0
    fe5e:	2b00      	cmp	r3, #0
    fe60:	d108      	bne.n	fe74 <sys_slist_append+0x30>
    fe62:	6839      	ldr	r1, [r7, #0]
    fe64:	6878      	ldr	r0, [r7, #4]
    fe66:	f7ff ff9c 	bl	fda2 <z_slist_tail_set>
    fe6a:	6839      	ldr	r1, [r7, #0]
    fe6c:	6878      	ldr	r0, [r7, #4]
    fe6e:	f7ff ff8b 	bl	fd88 <z_slist_head_set>
    fe72:	e00b      	b.n	fe8c <sys_slist_append+0x48>
    fe74:	6878      	ldr	r0, [r7, #4]
    fe76:	f7ff ffac 	bl	fdd2 <sys_slist_peek_tail>
    fe7a:	4603      	mov	r3, r0
    fe7c:	6839      	ldr	r1, [r7, #0]
    fe7e:	4618      	mov	r0, r3
    fe80:	f7ff ff75 	bl	fd6e <z_snode_next_set>
    fe84:	6839      	ldr	r1, [r7, #0]
    fe86:	6878      	ldr	r0, [r7, #4]
    fe88:	f7ff ff8b 	bl	fda2 <z_slist_tail_set>
    fe8c:	bf00      	nop
    fe8e:	3708      	adds	r7, #8
    fe90:	46bd      	mov	sp, r7
    fe92:	bd80      	pop	{r7, pc}

0000fe94 <sys_slist_get_not_empty>:
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fe94:	b580      	push	{r7, lr}
    fe96:	b084      	sub	sp, #16
    fe98:	af00      	add	r7, sp, #0
    fe9a:	6078      	str	r0, [r7, #4]
    fe9c:	6878      	ldr	r0, [r7, #4]
    fe9e:	f7ff ff8d 	bl	fdbc <sys_slist_peek_head>
    fea2:	60f8      	str	r0, [r7, #12]
    fea4:	68f8      	ldr	r0, [r7, #12]
    fea6:	f7ff ff57 	bl	fd58 <z_snode_next_peek>
    feaa:	4603      	mov	r3, r0
    feac:	4619      	mov	r1, r3
    feae:	6878      	ldr	r0, [r7, #4]
    feb0:	f7ff ff6a 	bl	fd88 <z_slist_head_set>
    feb4:	6878      	ldr	r0, [r7, #4]
    feb6:	f7ff ff8c 	bl	fdd2 <sys_slist_peek_tail>
    feba:	4602      	mov	r2, r0
    febc:	68fb      	ldr	r3, [r7, #12]
    febe:	4293      	cmp	r3, r2
    fec0:	d107      	bne.n	fed2 <sys_slist_get_not_empty+0x3e>
    fec2:	6878      	ldr	r0, [r7, #4]
    fec4:	f7ff ff7a 	bl	fdbc <sys_slist_peek_head>
    fec8:	4603      	mov	r3, r0
    feca:	4619      	mov	r1, r3
    fecc:	6878      	ldr	r0, [r7, #4]
    fece:	f7ff ff68 	bl	fda2 <z_slist_tail_set>
    fed2:	68fb      	ldr	r3, [r7, #12]
    fed4:	4618      	mov	r0, r3
    fed6:	3710      	adds	r7, #16
    fed8:	46bd      	mov	sp, r7
    feda:	bd80      	pop	{r7, pc}

0000fedc <set_state>:
{
    fedc:	b480      	push	{r7}
    fede:	b083      	sub	sp, #12
    fee0:	af00      	add	r7, sp, #0
    fee2:	6078      	str	r0, [r7, #4]
    fee4:	6039      	str	r1, [r7, #0]
	mgr->flags = (state & ONOFF_STATE_MASK)
    fee6:	683b      	ldr	r3, [r7, #0]
    fee8:	b29b      	uxth	r3, r3
    feea:	f003 0307 	and.w	r3, r3, #7
    feee:	b29a      	uxth	r2, r3
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    fef0:	687b      	ldr	r3, [r7, #4]
    fef2:	8b9b      	ldrh	r3, [r3, #28]
    fef4:	f023 0307 	bic.w	r3, r3, #7
    fef8:	b29b      	uxth	r3, r3
    fefa:	4313      	orrs	r3, r2
    fefc:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    fefe:	687b      	ldr	r3, [r7, #4]
    ff00:	839a      	strh	r2, [r3, #28]
}
    ff02:	bf00      	nop
    ff04:	370c      	adds	r7, #12
    ff06:	46bd      	mov	sp, r7
    ff08:	bc80      	pop	{r7}
    ff0a:	4770      	bx	lr

0000ff0c <validate_args>:
{
    ff0c:	b580      	push	{r7, lr}
    ff0e:	b084      	sub	sp, #16
    ff10:	af00      	add	r7, sp, #0
    ff12:	6078      	str	r0, [r7, #4]
    ff14:	6039      	str	r1, [r7, #0]
	if ((mgr == NULL) || (cli == NULL)) {
    ff16:	687b      	ldr	r3, [r7, #4]
    ff18:	2b00      	cmp	r3, #0
    ff1a:	d002      	beq.n	ff22 <validate_args+0x16>
    ff1c:	683b      	ldr	r3, [r7, #0]
    ff1e:	2b00      	cmp	r3, #0
    ff20:	d102      	bne.n	ff28 <validate_args+0x1c>
		return -EINVAL;
    ff22:	f06f 0315 	mvn.w	r3, #21
    ff26:	e012      	b.n	ff4e <validate_args+0x42>
	int rv = sys_notify_validate(&cli->notify);
    ff28:	683b      	ldr	r3, [r7, #0]
    ff2a:	3304      	adds	r3, #4
    ff2c:	4618      	mov	r0, r3
    ff2e:	f7ff fe69 	bl	fc04 <sys_notify_validate>
    ff32:	60f8      	str	r0, [r7, #12]
	if ((rv == 0)
    ff34:	68fb      	ldr	r3, [r7, #12]
    ff36:	2b00      	cmp	r3, #0
    ff38:	d108      	bne.n	ff4c <validate_args+0x40>
	    && ((cli->notify.flags
    ff3a:	683b      	ldr	r3, [r7, #0]
    ff3c:	689b      	ldr	r3, [r3, #8]
		 & ~BIT_MASK(ONOFF_CLIENT_EXTENSION_POS)) != 0)) {
    ff3e:	f023 0303 	bic.w	r3, r3, #3
	    && ((cli->notify.flags
    ff42:	2b00      	cmp	r3, #0
    ff44:	d002      	beq.n	ff4c <validate_args+0x40>
		rv = -EINVAL;
    ff46:	f06f 0315 	mvn.w	r3, #21
    ff4a:	60fb      	str	r3, [r7, #12]
	return rv;
    ff4c:	68fb      	ldr	r3, [r7, #12]
}
    ff4e:	4618      	mov	r0, r3
    ff50:	3710      	adds	r7, #16
    ff52:	46bd      	mov	sp, r7
    ff54:	bd80      	pop	{r7, pc}

0000ff56 <onoff_manager_init>:
{
    ff56:	b580      	push	{r7, lr}
    ff58:	b08a      	sub	sp, #40	; 0x28
    ff5a:	af00      	add	r7, sp, #0
    ff5c:	6078      	str	r0, [r7, #4]
    ff5e:	6039      	str	r1, [r7, #0]
	if ((mgr == NULL)
    ff60:	687b      	ldr	r3, [r7, #4]
    ff62:	2b00      	cmp	r3, #0
    ff64:	d00a      	beq.n	ff7c <onoff_manager_init+0x26>
	    || (transitions == NULL)
    ff66:	683b      	ldr	r3, [r7, #0]
    ff68:	2b00      	cmp	r3, #0
    ff6a:	d007      	beq.n	ff7c <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    ff6c:	683b      	ldr	r3, [r7, #0]
    ff6e:	681b      	ldr	r3, [r3, #0]
    ff70:	2b00      	cmp	r3, #0
    ff72:	d003      	beq.n	ff7c <onoff_manager_init+0x26>
	    || (transitions->stop == NULL)) {
    ff74:	683b      	ldr	r3, [r7, #0]
    ff76:	685b      	ldr	r3, [r3, #4]
    ff78:	2b00      	cmp	r3, #0
    ff7a:	d102      	bne.n	ff82 <onoff_manager_init+0x2c>
		return -EINVAL;
    ff7c:	f06f 0315 	mvn.w	r3, #21
    ff80:	e00a      	b.n	ff98 <onoff_manager_init+0x42>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    ff82:	687b      	ldr	r3, [r7, #4]
    ff84:	4618      	mov	r0, r3
    ff86:	2320      	movs	r3, #32
    ff88:	461a      	mov	r2, r3
    ff8a:	2100      	movs	r1, #0
    ff8c:	f002 fde4 	bl	12b58 <memset>
    ff90:	687b      	ldr	r3, [r7, #4]
    ff92:	683a      	ldr	r2, [r7, #0]
    ff94:	611a      	str	r2, [r3, #16]
	return 0;
    ff96:	2300      	movs	r3, #0
}
    ff98:	4618      	mov	r0, r3
    ff9a:	3728      	adds	r7, #40	; 0x28
    ff9c:	46bd      	mov	sp, r7
    ff9e:	bd80      	pop	{r7, pc}

0000ffa0 <notify_monitors>:
{
    ffa0:	b590      	push	{r4, r7, lr}
    ffa2:	b089      	sub	sp, #36	; 0x24
    ffa4:	af00      	add	r7, sp, #0
    ffa6:	60f8      	str	r0, [r7, #12]
    ffa8:	60b9      	str	r1, [r7, #8]
    ffaa:	607a      	str	r2, [r7, #4]
	sys_slist_t *mlist = &mgr->monitors;
    ffac:	68fb      	ldr	r3, [r7, #12]
    ffae:	3308      	adds	r3, #8
    ffb0:	617b      	str	r3, [r7, #20]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    ffb2:	6978      	ldr	r0, [r7, #20]
    ffb4:	f7ff ff02 	bl	fdbc <sys_slist_peek_head>
    ffb8:	4603      	mov	r3, r0
    ffba:	2b00      	cmp	r3, #0
    ffbc:	d004      	beq.n	ffc8 <notify_monitors+0x28>
    ffbe:	6978      	ldr	r0, [r7, #20]
    ffc0:	f7ff fefc 	bl	fdbc <sys_slist_peek_head>
    ffc4:	4603      	mov	r3, r0
    ffc6:	e000      	b.n	ffca <notify_monitors+0x2a>
    ffc8:	2300      	movs	r3, #0
    ffca:	61fb      	str	r3, [r7, #28]
    ffcc:	69fb      	ldr	r3, [r7, #28]
    ffce:	2b00      	cmp	r3, #0
    ffd0:	d00e      	beq.n	fff0 <notify_monitors+0x50>
    ffd2:	69fb      	ldr	r3, [r7, #28]
    ffd4:	4618      	mov	r0, r3
    ffd6:	f7ff ff24 	bl	fe22 <sys_slist_peek_next>
    ffda:	4603      	mov	r3, r0
    ffdc:	2b00      	cmp	r3, #0
    ffde:	d005      	beq.n	ffec <notify_monitors+0x4c>
    ffe0:	69fb      	ldr	r3, [r7, #28]
    ffe2:	4618      	mov	r0, r3
    ffe4:	f7ff ff1d 	bl	fe22 <sys_slist_peek_next>
    ffe8:	4603      	mov	r3, r0
    ffea:	e002      	b.n	fff2 <notify_monitors+0x52>
    ffec:	2300      	movs	r3, #0
    ffee:	e000      	b.n	fff2 <notify_monitors+0x52>
    fff0:	2300      	movs	r3, #0
    fff2:	61bb      	str	r3, [r7, #24]
    fff4:	e01c      	b.n	10030 <notify_monitors+0x90>
		mon->callback(mgr, mon, state, res);
    fff6:	69fb      	ldr	r3, [r7, #28]
    fff8:	685c      	ldr	r4, [r3, #4]
    fffa:	687b      	ldr	r3, [r7, #4]
    fffc:	68ba      	ldr	r2, [r7, #8]
    fffe:	69f9      	ldr	r1, [r7, #28]
   10000:	68f8      	ldr	r0, [r7, #12]
   10002:	47a0      	blx	r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10004:	69bb      	ldr	r3, [r7, #24]
   10006:	61fb      	str	r3, [r7, #28]
   10008:	69fb      	ldr	r3, [r7, #28]
   1000a:	2b00      	cmp	r3, #0
   1000c:	d00e      	beq.n	1002c <notify_monitors+0x8c>
   1000e:	69fb      	ldr	r3, [r7, #28]
   10010:	4618      	mov	r0, r3
   10012:	f7ff ff06 	bl	fe22 <sys_slist_peek_next>
   10016:	4603      	mov	r3, r0
   10018:	2b00      	cmp	r3, #0
   1001a:	d005      	beq.n	10028 <notify_monitors+0x88>
   1001c:	69fb      	ldr	r3, [r7, #28]
   1001e:	4618      	mov	r0, r3
   10020:	f7ff feff 	bl	fe22 <sys_slist_peek_next>
   10024:	4603      	mov	r3, r0
   10026:	e002      	b.n	1002e <notify_monitors+0x8e>
   10028:	2300      	movs	r3, #0
   1002a:	e000      	b.n	1002e <notify_monitors+0x8e>
   1002c:	2300      	movs	r3, #0
   1002e:	61bb      	str	r3, [r7, #24]
   10030:	69fb      	ldr	r3, [r7, #28]
   10032:	2b00      	cmp	r3, #0
   10034:	d1df      	bne.n	fff6 <notify_monitors+0x56>
}
   10036:	bf00      	nop
   10038:	bf00      	nop
   1003a:	3724      	adds	r7, #36	; 0x24
   1003c:	46bd      	mov	sp, r7
   1003e:	bd90      	pop	{r4, r7, pc}

00010040 <notify_one>:
{
   10040:	b590      	push	{r4, r7, lr}
   10042:	b087      	sub	sp, #28
   10044:	af00      	add	r7, sp, #0
   10046:	60f8      	str	r0, [r7, #12]
   10048:	60b9      	str	r1, [r7, #8]
   1004a:	607a      	str	r2, [r7, #4]
   1004c:	603b      	str	r3, [r7, #0]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1004e:	68bb      	ldr	r3, [r7, #8]
   10050:	3304      	adds	r3, #4
   10052:	6839      	ldr	r1, [r7, #0]
   10054:	4618      	mov	r0, r3
   10056:	f7f0 fbbf 	bl	7d8 <sys_notify_finalize>
   1005a:	6178      	str	r0, [r7, #20]
	if (cb) {
   1005c:	697b      	ldr	r3, [r7, #20]
   1005e:	2b00      	cmp	r3, #0
   10060:	d005      	beq.n	1006e <notify_one+0x2e>
		cb(mgr, cli, state, res);
   10062:	697c      	ldr	r4, [r7, #20]
   10064:	683b      	ldr	r3, [r7, #0]
   10066:	687a      	ldr	r2, [r7, #4]
   10068:	68b9      	ldr	r1, [r7, #8]
   1006a:	68f8      	ldr	r0, [r7, #12]
   1006c:	47a0      	blx	r4
}
   1006e:	bf00      	nop
   10070:	371c      	adds	r7, #28
   10072:	46bd      	mov	sp, r7
   10074:	bd90      	pop	{r4, r7, pc}

00010076 <notify_all>:
{
   10076:	b580      	push	{r7, lr}
   10078:	b086      	sub	sp, #24
   1007a:	af00      	add	r7, sp, #0
   1007c:	60f8      	str	r0, [r7, #12]
   1007e:	60b9      	str	r1, [r7, #8]
   10080:	607a      	str	r2, [r7, #4]
   10082:	603b      	str	r3, [r7, #0]
	while (!sys_slist_is_empty(list)) {
   10084:	e00b      	b.n	1009e <notify_all+0x28>
		sys_snode_t *node = sys_slist_get_not_empty(list);
   10086:	68b8      	ldr	r0, [r7, #8]
   10088:	f7ff ff04 	bl	fe94 <sys_slist_get_not_empty>
   1008c:	6178      	str	r0, [r7, #20]
		struct onoff_client *cli =
   1008e:	697b      	ldr	r3, [r7, #20]
   10090:	613b      	str	r3, [r7, #16]
		notify_one(mgr, cli, state, res);
   10092:	683b      	ldr	r3, [r7, #0]
   10094:	687a      	ldr	r2, [r7, #4]
   10096:	6939      	ldr	r1, [r7, #16]
   10098:	68f8      	ldr	r0, [r7, #12]
   1009a:	f7ff ffd1 	bl	10040 <notify_one>
	while (!sys_slist_is_empty(list)) {
   1009e:	68b8      	ldr	r0, [r7, #8]
   100a0:	f7ff fea2 	bl	fde8 <sys_slist_is_empty>
   100a4:	4603      	mov	r3, r0
   100a6:	f083 0301 	eor.w	r3, r3, #1
   100aa:	b2db      	uxtb	r3, r3
   100ac:	2b00      	cmp	r3, #0
   100ae:	d1ea      	bne.n	10086 <notify_all+0x10>
}
   100b0:	bf00      	nop
   100b2:	bf00      	nop
   100b4:	3718      	adds	r7, #24
   100b6:	46bd      	mov	sp, r7
   100b8:	bd80      	pop	{r7, pc}

000100ba <process_recheck>:
{
   100ba:	b580      	push	{r7, lr}
   100bc:	b084      	sub	sp, #16
   100be:	af00      	add	r7, sp, #0
   100c0:	6078      	str	r0, [r7, #4]
	int evt = EVT_NOP;
   100c2:	2300      	movs	r3, #0
   100c4:	60fb      	str	r3, [r7, #12]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   100c6:	687b      	ldr	r3, [r7, #4]
   100c8:	8b9b      	ldrh	r3, [r3, #28]
   100ca:	f003 0307 	and.w	r3, r3, #7
   100ce:	60bb      	str	r3, [r7, #8]
	if ((state == ONOFF_STATE_OFF)
   100d0:	68bb      	ldr	r3, [r7, #8]
   100d2:	2b00      	cmp	r3, #0
   100d4:	d10c      	bne.n	100f0 <process_recheck+0x36>
	    && !sys_slist_is_empty(&mgr->clients)) {
   100d6:	687b      	ldr	r3, [r7, #4]
   100d8:	4618      	mov	r0, r3
   100da:	f7ff fe85 	bl	fde8 <sys_slist_is_empty>
   100de:	4603      	mov	r3, r0
   100e0:	f083 0301 	eor.w	r3, r3, #1
   100e4:	b2db      	uxtb	r3, r3
   100e6:	2b00      	cmp	r3, #0
   100e8:	d002      	beq.n	100f0 <process_recheck+0x36>
		evt = EVT_START;
   100ea:	2303      	movs	r3, #3
   100ec:	60fb      	str	r3, [r7, #12]
   100ee:	e018      	b.n	10122 <process_recheck+0x68>
	} else if ((state == ONOFF_STATE_ON)
   100f0:	68bb      	ldr	r3, [r7, #8]
   100f2:	2b02      	cmp	r3, #2
   100f4:	d106      	bne.n	10104 <process_recheck+0x4a>
		   && (mgr->refs == 0U)) {
   100f6:	687b      	ldr	r3, [r7, #4]
   100f8:	8bdb      	ldrh	r3, [r3, #30]
   100fa:	2b00      	cmp	r3, #0
   100fc:	d102      	bne.n	10104 <process_recheck+0x4a>
		evt = EVT_STOP;
   100fe:	2304      	movs	r3, #4
   10100:	60fb      	str	r3, [r7, #12]
   10102:	e00e      	b.n	10122 <process_recheck+0x68>
	} else if ((state == ONOFF_STATE_ERROR)
   10104:	68bb      	ldr	r3, [r7, #8]
   10106:	2b01      	cmp	r3, #1
   10108:	d10b      	bne.n	10122 <process_recheck+0x68>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1010a:	687b      	ldr	r3, [r7, #4]
   1010c:	4618      	mov	r0, r3
   1010e:	f7ff fe6b 	bl	fde8 <sys_slist_is_empty>
   10112:	4603      	mov	r3, r0
   10114:	f083 0301 	eor.w	r3, r3, #1
   10118:	b2db      	uxtb	r3, r3
   1011a:	2b00      	cmp	r3, #0
   1011c:	d001      	beq.n	10122 <process_recheck+0x68>
		evt = EVT_RESET;
   1011e:	2305      	movs	r3, #5
   10120:	60fb      	str	r3, [r7, #12]
	return evt;
   10122:	68fb      	ldr	r3, [r7, #12]
}
   10124:	4618      	mov	r0, r3
   10126:	3710      	adds	r7, #16
   10128:	46bd      	mov	sp, r7
   1012a:	bd80      	pop	{r7, pc}

0001012c <k_current_get>:
}


extern k_tid_t z_impl_k_current_get(void);
static inline k_tid_t k_current_get(void)
{
   1012c:	b580      	push	{r7, lr}
   1012e:	af00      	add	r7, sp, #0
		/* coverity[OVERRUN] */
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_K_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_current_get();
   10130:	f7fe fa44 	bl	e5bc <z_impl_k_current_get>
   10134:	4603      	mov	r3, r0
}
   10136:	4618      	mov	r0, r3
   10138:	bd80      	pop	{r7, pc}

0001013a <k_thread_abort>:


extern void z_impl_k_thread_abort(k_tid_t thread);
static inline void k_thread_abort(k_tid_t thread)
{
   1013a:	b580      	push	{r7, lr}
   1013c:	b082      	sub	sp, #8
   1013e:	af00      	add	r7, sp, #0
   10140:	6078      	str	r0, [r7, #4]
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
   10142:	6878      	ldr	r0, [r7, #4]
   10144:	f7f7 f916 	bl	7374 <z_impl_k_thread_abort>
}
   10148:	bf00      	nop
   1014a:	3708      	adds	r7, #8
   1014c:	46bd      	mov	sp, r7
   1014e:	bd80      	pop	{r7, pc}

00010150 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   10150:	b580      	push	{r7, lr}
   10152:	b084      	sub	sp, #16
   10154:	af00      	add	r7, sp, #0
   10156:	60f8      	str	r0, [r7, #12]
   10158:	60b9      	str	r1, [r7, #8]
   1015a:	607a      	str	r2, [r7, #4]
   1015c:	603b      	str	r3, [r7, #0]
	entry(p1, p2, p3);
   1015e:	68fb      	ldr	r3, [r7, #12]
   10160:	683a      	ldr	r2, [r7, #0]
   10162:	6879      	ldr	r1, [r7, #4]
   10164:	68b8      	ldr	r0, [r7, #8]
   10166:	4798      	blx	r3

	k_thread_abort(k_current_get());
   10168:	f7ff ffe0 	bl	1012c <k_current_get>
   1016c:	4603      	mov	r3, r0
   1016e:	4618      	mov	r0, r3
   10170:	f7ff ffe3 	bl	1013a <k_thread_abort>

00010174 <isupper>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int isupper(int a)
{
   10174:	b480      	push	{r7}
   10176:	b083      	sub	sp, #12
   10178:	af00      	add	r7, sp, #0
   1017a:	6078      	str	r0, [r7, #4]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1017c:	687b      	ldr	r3, [r7, #4]
   1017e:	3b41      	subs	r3, #65	; 0x41
   10180:	2b19      	cmp	r3, #25
   10182:	bf94      	ite	ls
   10184:	2301      	movls	r3, #1
   10186:	2300      	movhi	r3, #0
   10188:	b2db      	uxtb	r3, r3
}
   1018a:	4618      	mov	r0, r3
   1018c:	370c      	adds	r7, #12
   1018e:	46bd      	mov	sp, r7
   10190:	bc80      	pop	{r7}
   10192:	4770      	bx	lr

00010194 <isdigit>:
	return (int)((((unsigned)c) >= ' ') &&
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
   10194:	b480      	push	{r7}
   10196:	b083      	sub	sp, #12
   10198:	af00      	add	r7, sp, #0
   1019a:	6078      	str	r0, [r7, #4]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1019c:	687b      	ldr	r3, [r7, #4]
   1019e:	3b30      	subs	r3, #48	; 0x30
   101a0:	2b09      	cmp	r3, #9
   101a2:	bf94      	ite	ls
   101a4:	2301      	movls	r3, #1
   101a6:	2300      	movhi	r3, #0
   101a8:	b2db      	uxtb	r3, r3
}
   101aa:	4618      	mov	r0, r3
   101ac:	370c      	adds	r7, #12
   101ae:	46bd      	mov	sp, r7
   101b0:	bc80      	pop	{r7}
   101b2:	4770      	bx	lr

000101b4 <extract_decimal>:
{
   101b4:	b580      	push	{r7, lr}
   101b6:	b084      	sub	sp, #16
   101b8:	af00      	add	r7, sp, #0
   101ba:	6078      	str	r0, [r7, #4]
	const char *sp = *str;
   101bc:	687b      	ldr	r3, [r7, #4]
   101be:	681b      	ldr	r3, [r3, #0]
   101c0:	60fb      	str	r3, [r7, #12]
	size_t val = 0;
   101c2:	2300      	movs	r3, #0
   101c4:	60bb      	str	r3, [r7, #8]
	while (isdigit((int)(unsigned char)*sp)) {
   101c6:	e00c      	b.n	101e2 <extract_decimal+0x2e>
		val = 10U * val + *sp++ - '0';
   101c8:	68ba      	ldr	r2, [r7, #8]
   101ca:	4613      	mov	r3, r2
   101cc:	009b      	lsls	r3, r3, #2
   101ce:	4413      	add	r3, r2
   101d0:	005b      	lsls	r3, r3, #1
   101d2:	4619      	mov	r1, r3
   101d4:	68fb      	ldr	r3, [r7, #12]
   101d6:	1c5a      	adds	r2, r3, #1
   101d8:	60fa      	str	r2, [r7, #12]
   101da:	781b      	ldrb	r3, [r3, #0]
   101dc:	440b      	add	r3, r1
   101de:	3b30      	subs	r3, #48	; 0x30
   101e0:	60bb      	str	r3, [r7, #8]
	while (isdigit((int)(unsigned char)*sp)) {
   101e2:	68fb      	ldr	r3, [r7, #12]
   101e4:	781b      	ldrb	r3, [r3, #0]
   101e6:	4618      	mov	r0, r3
   101e8:	f7ff ffd4 	bl	10194 <isdigit>
   101ec:	4603      	mov	r3, r0
   101ee:	2b00      	cmp	r3, #0
   101f0:	d1ea      	bne.n	101c8 <extract_decimal+0x14>
	*str = sp;
   101f2:	687b      	ldr	r3, [r7, #4]
   101f4:	68fa      	ldr	r2, [r7, #12]
   101f6:	601a      	str	r2, [r3, #0]
	return val;
   101f8:	68bb      	ldr	r3, [r7, #8]
}
   101fa:	4618      	mov	r0, r3
   101fc:	3710      	adds	r7, #16
   101fe:	46bd      	mov	sp, r7
   10200:	bd80      	pop	{r7, pc}

00010202 <extract_width>:
{
   10202:	b580      	push	{r7, lr}
   10204:	b084      	sub	sp, #16
   10206:	af00      	add	r7, sp, #0
   10208:	6078      	str	r0, [r7, #4]
   1020a:	6039      	str	r1, [r7, #0]
	conv->width_present = true;
   1020c:	687a      	ldr	r2, [r7, #4]
   1020e:	7813      	ldrb	r3, [r2, #0]
   10210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10214:	7013      	strb	r3, [r2, #0]
	if (*sp == '*') {
   10216:	683b      	ldr	r3, [r7, #0]
   10218:	781b      	ldrb	r3, [r3, #0]
   1021a:	2b2a      	cmp	r3, #42	; 0x2a
   1021c:	d109      	bne.n	10232 <extract_width+0x30>
		conv->width_star = true;
   1021e:	687a      	ldr	r2, [r7, #4]
   10220:	7853      	ldrb	r3, [r2, #1]
   10222:	f043 0301 	orr.w	r3, r3, #1
   10226:	7053      	strb	r3, [r2, #1]
		return ++sp;
   10228:	683b      	ldr	r3, [r7, #0]
   1022a:	3301      	adds	r3, #1
   1022c:	603b      	str	r3, [r7, #0]
   1022e:	683b      	ldr	r3, [r7, #0]
   10230:	e031      	b.n	10296 <extract_width+0x94>
	const char *wp = sp;
   10232:	683b      	ldr	r3, [r7, #0]
   10234:	60fb      	str	r3, [r7, #12]
	size_t width = extract_decimal(&sp);
   10236:	463b      	mov	r3, r7
   10238:	4618      	mov	r0, r3
   1023a:	f7ff ffbb 	bl	101b4 <extract_decimal>
   1023e:	60b8      	str	r0, [r7, #8]
	if (sp != wp) {
   10240:	683b      	ldr	r3, [r7, #0]
   10242:	68fa      	ldr	r2, [r7, #12]
   10244:	429a      	cmp	r2, r3
   10246:	d025      	beq.n	10294 <extract_width+0x92>
		conv->width_present = true;
   10248:	687a      	ldr	r2, [r7, #4]
   1024a:	7813      	ldrb	r3, [r2, #0]
   1024c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10250:	7013      	strb	r3, [r2, #0]
		conv->width_value = width;
   10252:	68ba      	ldr	r2, [r7, #8]
   10254:	687b      	ldr	r3, [r7, #4]
   10256:	605a      	str	r2, [r3, #4]
		conv->unsupported |= ((conv->width_value < 0)
   10258:	687b      	ldr	r3, [r7, #4]
   1025a:	781b      	ldrb	r3, [r3, #0]
   1025c:	f3c3 0340 	ubfx	r3, r3, #1, #1
   10260:	b2db      	uxtb	r3, r3
   10262:	461a      	mov	r2, r3
   10264:	687b      	ldr	r3, [r7, #4]
   10266:	685b      	ldr	r3, [r3, #4]
				      || (width != (size_t)conv->width_value));
   10268:	2b00      	cmp	r3, #0
   1026a:	db05      	blt.n	10278 <extract_width+0x76>
   1026c:	687b      	ldr	r3, [r7, #4]
   1026e:	685b      	ldr	r3, [r3, #4]
   10270:	4619      	mov	r1, r3
   10272:	68bb      	ldr	r3, [r7, #8]
   10274:	428b      	cmp	r3, r1
   10276:	d001      	beq.n	1027c <extract_width+0x7a>
   10278:	2301      	movs	r3, #1
   1027a:	e000      	b.n	1027e <extract_width+0x7c>
   1027c:	2300      	movs	r3, #0
		conv->unsupported |= ((conv->width_value < 0)
   1027e:	4313      	orrs	r3, r2
   10280:	2b00      	cmp	r3, #0
   10282:	bf14      	ite	ne
   10284:	2301      	movne	r3, #1
   10286:	2300      	moveq	r3, #0
   10288:	b2d9      	uxtb	r1, r3
   1028a:	687a      	ldr	r2, [r7, #4]
   1028c:	7813      	ldrb	r3, [r2, #0]
   1028e:	f361 0341 	bfi	r3, r1, #1, #1
   10292:	7013      	strb	r3, [r2, #0]
	return sp;
   10294:	683b      	ldr	r3, [r7, #0]
}
   10296:	4618      	mov	r0, r3
   10298:	3710      	adds	r7, #16
   1029a:	46bd      	mov	sp, r7
   1029c:	bd80      	pop	{r7, pc}

0001029e <extract_prec>:
{
   1029e:	b580      	push	{r7, lr}
   102a0:	b084      	sub	sp, #16
   102a2:	af00      	add	r7, sp, #0
   102a4:	6078      	str	r0, [r7, #4]
   102a6:	6039      	str	r1, [r7, #0]
	conv->prec_present = (*sp == '.');
   102a8:	683b      	ldr	r3, [r7, #0]
   102aa:	781b      	ldrb	r3, [r3, #0]
   102ac:	2b2e      	cmp	r3, #46	; 0x2e
   102ae:	bf0c      	ite	eq
   102b0:	2301      	moveq	r3, #1
   102b2:	2300      	movne	r3, #0
   102b4:	b2d9      	uxtb	r1, r3
   102b6:	687a      	ldr	r2, [r7, #4]
   102b8:	7853      	ldrb	r3, [r2, #1]
   102ba:	f361 0341 	bfi	r3, r1, #1, #1
   102be:	7053      	strb	r3, [r2, #1]
	if (!conv->prec_present) {
   102c0:	687b      	ldr	r3, [r7, #4]
   102c2:	785b      	ldrb	r3, [r3, #1]
   102c4:	f3c3 0340 	ubfx	r3, r3, #1, #1
   102c8:	b2db      	uxtb	r3, r3
   102ca:	f083 0301 	eor.w	r3, r3, #1
   102ce:	b2db      	uxtb	r3, r3
   102d0:	2b00      	cmp	r3, #0
   102d2:	d001      	beq.n	102d8 <extract_prec+0x3a>
		return sp;
   102d4:	683b      	ldr	r3, [r7, #0]
   102d6:	e037      	b.n	10348 <extract_prec+0xaa>
	++sp;
   102d8:	683b      	ldr	r3, [r7, #0]
   102da:	3301      	adds	r3, #1
   102dc:	603b      	str	r3, [r7, #0]
	if (*sp == '*') {
   102de:	683b      	ldr	r3, [r7, #0]
   102e0:	781b      	ldrb	r3, [r3, #0]
   102e2:	2b2a      	cmp	r3, #42	; 0x2a
   102e4:	d109      	bne.n	102fa <extract_prec+0x5c>
		conv->prec_star = true;
   102e6:	687a      	ldr	r2, [r7, #4]
   102e8:	7853      	ldrb	r3, [r2, #1]
   102ea:	f043 0304 	orr.w	r3, r3, #4
   102ee:	7053      	strb	r3, [r2, #1]
		return ++sp;
   102f0:	683b      	ldr	r3, [r7, #0]
   102f2:	3301      	adds	r3, #1
   102f4:	603b      	str	r3, [r7, #0]
   102f6:	683b      	ldr	r3, [r7, #0]
   102f8:	e026      	b.n	10348 <extract_prec+0xaa>
	size_t prec = extract_decimal(&sp);
   102fa:	463b      	mov	r3, r7
   102fc:	4618      	mov	r0, r3
   102fe:	f7ff ff59 	bl	101b4 <extract_decimal>
   10302:	60f8      	str	r0, [r7, #12]
	conv->prec_value = prec;
   10304:	68fa      	ldr	r2, [r7, #12]
   10306:	687b      	ldr	r3, [r7, #4]
   10308:	609a      	str	r2, [r3, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   1030a:	687b      	ldr	r3, [r7, #4]
   1030c:	781b      	ldrb	r3, [r3, #0]
   1030e:	f3c3 0340 	ubfx	r3, r3, #1, #1
   10312:	b2db      	uxtb	r3, r3
   10314:	461a      	mov	r2, r3
   10316:	687b      	ldr	r3, [r7, #4]
   10318:	689b      	ldr	r3, [r3, #8]
			      || (prec != (size_t)conv->prec_value));
   1031a:	2b00      	cmp	r3, #0
   1031c:	db05      	blt.n	1032a <extract_prec+0x8c>
   1031e:	687b      	ldr	r3, [r7, #4]
   10320:	689b      	ldr	r3, [r3, #8]
   10322:	4619      	mov	r1, r3
   10324:	68fb      	ldr	r3, [r7, #12]
   10326:	428b      	cmp	r3, r1
   10328:	d001      	beq.n	1032e <extract_prec+0x90>
   1032a:	2301      	movs	r3, #1
   1032c:	e000      	b.n	10330 <extract_prec+0x92>
   1032e:	2300      	movs	r3, #0
	conv->unsupported |= ((conv->prec_value < 0)
   10330:	4313      	orrs	r3, r2
   10332:	2b00      	cmp	r3, #0
   10334:	bf14      	ite	ne
   10336:	2301      	movne	r3, #1
   10338:	2300      	moveq	r3, #0
   1033a:	b2d9      	uxtb	r1, r3
   1033c:	687a      	ldr	r2, [r7, #4]
   1033e:	7813      	ldrb	r3, [r2, #0]
   10340:	f361 0341 	bfi	r3, r1, #1, #1
   10344:	7013      	strb	r3, [r2, #0]
	return sp;
   10346:	683b      	ldr	r3, [r7, #0]
}
   10348:	4618      	mov	r0, r3
   1034a:	3710      	adds	r7, #16
   1034c:	46bd      	mov	sp, r7
   1034e:	bd80      	pop	{r7, pc}

00010350 <extract_conversion>:
{
   10350:	b580      	push	{r7, lr}
   10352:	b086      	sub	sp, #24
   10354:	af00      	add	r7, sp, #0
   10356:	6078      	str	r0, [r7, #4]
   10358:	6039      	str	r1, [r7, #0]
	*conv = (struct conversion) {
   1035a:	687b      	ldr	r3, [r7, #4]
   1035c:	461a      	mov	r2, r3
   1035e:	2300      	movs	r3, #0
   10360:	6013      	str	r3, [r2, #0]
   10362:	6053      	str	r3, [r2, #4]
   10364:	6093      	str	r3, [r2, #8]
	++sp;
   10366:	683b      	ldr	r3, [r7, #0]
   10368:	3301      	adds	r3, #1
   1036a:	603b      	str	r3, [r7, #0]
	if (*sp == '%') {
   1036c:	683b      	ldr	r3, [r7, #0]
   1036e:	781b      	ldrb	r3, [r3, #0]
   10370:	2b25      	cmp	r3, #37	; 0x25
   10372:	d107      	bne.n	10384 <extract_conversion+0x34>
		conv->specifier = *sp++;
   10374:	683b      	ldr	r3, [r7, #0]
   10376:	1c5a      	adds	r2, r3, #1
   10378:	603a      	str	r2, [r7, #0]
   1037a:	781a      	ldrb	r2, [r3, #0]
   1037c:	687b      	ldr	r3, [r7, #4]
   1037e:	70da      	strb	r2, [r3, #3]
		return sp;
   10380:	683b      	ldr	r3, [r7, #0]
   10382:	e019      	b.n	103b8 <extract_conversion+0x68>
	sp = extract_flags(conv, sp);
   10384:	6839      	ldr	r1, [r7, #0]
   10386:	6878      	ldr	r0, [r7, #4]
   10388:	f7f0 ff04 	bl	1194 <extract_flags>
   1038c:	6038      	str	r0, [r7, #0]
	sp = extract_width(conv, sp);
   1038e:	6839      	ldr	r1, [r7, #0]
   10390:	6878      	ldr	r0, [r7, #4]
   10392:	f7ff ff36 	bl	10202 <extract_width>
   10396:	6038      	str	r0, [r7, #0]
	sp = extract_prec(conv, sp);
   10398:	6839      	ldr	r1, [r7, #0]
   1039a:	6878      	ldr	r0, [r7, #4]
   1039c:	f7ff ff7f 	bl	1029e <extract_prec>
   103a0:	6038      	str	r0, [r7, #0]
	sp = extract_length(conv, sp);
   103a2:	6839      	ldr	r1, [r7, #0]
   103a4:	6878      	ldr	r0, [r7, #4]
   103a6:	f7f0 ff69 	bl	127c <extract_length>
   103aa:	6038      	str	r0, [r7, #0]
	sp = extract_specifier(conv, sp);
   103ac:	6839      	ldr	r1, [r7, #0]
   103ae:	6878      	ldr	r0, [r7, #4]
   103b0:	f7f1 f83a 	bl	1428 <extract_specifier>
   103b4:	6038      	str	r0, [r7, #0]
	return sp;
   103b6:	683b      	ldr	r3, [r7, #0]
}
   103b8:	4618      	mov	r0, r3
   103ba:	3718      	adds	r7, #24
   103bc:	46bd      	mov	sp, r7
   103be:	bd80      	pop	{r7, pc}

000103c0 <conversion_radix>:
{
   103c0:	b480      	push	{r7}
   103c2:	b083      	sub	sp, #12
   103c4:	af00      	add	r7, sp, #0
   103c6:	4603      	mov	r3, r0
   103c8:	71fb      	strb	r3, [r7, #7]
	switch (specifier) {
   103ca:	79fb      	ldrb	r3, [r7, #7]
   103cc:	2b78      	cmp	r3, #120	; 0x78
   103ce:	d00d      	beq.n	103ec <conversion_radix+0x2c>
   103d0:	2b78      	cmp	r3, #120	; 0x78
   103d2:	dc07      	bgt.n	103e4 <conversion_radix+0x24>
   103d4:	2b70      	cmp	r3, #112	; 0x70
   103d6:	d009      	beq.n	103ec <conversion_radix+0x2c>
   103d8:	2b70      	cmp	r3, #112	; 0x70
   103da:	dc03      	bgt.n	103e4 <conversion_radix+0x24>
   103dc:	2b58      	cmp	r3, #88	; 0x58
   103de:	d005      	beq.n	103ec <conversion_radix+0x2c>
   103e0:	2b6f      	cmp	r3, #111	; 0x6f
   103e2:	d001      	beq.n	103e8 <conversion_radix+0x28>
		return 10;
   103e4:	230a      	movs	r3, #10
   103e6:	e002      	b.n	103ee <conversion_radix+0x2e>
		return 8;
   103e8:	2308      	movs	r3, #8
   103ea:	e000      	b.n	103ee <conversion_radix+0x2e>
		return 16;
   103ec:	2310      	movs	r3, #16
}
   103ee:	4618      	mov	r0, r3
   103f0:	370c      	adds	r7, #12
   103f2:	46bd      	mov	sp, r7
   103f4:	bc80      	pop	{r7}
   103f6:	4770      	bx	lr

000103f8 <encode_uint>:
{
   103f8:	b580      	push	{r7, lr}
   103fa:	b088      	sub	sp, #32
   103fc:	af00      	add	r7, sp, #0
   103fe:	e9c7 0102 	strd	r0, r1, [r7, #8]
   10402:	607a      	str	r2, [r7, #4]
   10404:	603b      	str	r3, [r7, #0]
	bool upcase = isupper((int)conv->specifier);
   10406:	687b      	ldr	r3, [r7, #4]
   10408:	78db      	ldrb	r3, [r3, #3]
   1040a:	4618      	mov	r0, r3
   1040c:	f7ff feb2 	bl	10174 <isupper>
   10410:	4603      	mov	r3, r0
   10412:	2b00      	cmp	r3, #0
   10414:	bf14      	ite	ne
   10416:	2301      	movne	r3, #1
   10418:	2300      	moveq	r3, #0
   1041a:	76fb      	strb	r3, [r7, #27]
	const unsigned int radix = conversion_radix(conv->specifier);
   1041c:	687b      	ldr	r3, [r7, #4]
   1041e:	78db      	ldrb	r3, [r3, #3]
   10420:	4618      	mov	r0, r3
   10422:	f7ff ffcd 	bl	103c0 <conversion_radix>
   10426:	6178      	str	r0, [r7, #20]
	char *bp = bps + (bpe - bps);
   10428:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1042a:	61fb      	str	r3, [r7, #28]
		unsigned int lsv = (unsigned int)(value % radix);
   1042c:	697b      	ldr	r3, [r7, #20]
   1042e:	461a      	mov	r2, r3
   10430:	f04f 0300 	mov.w	r3, #0
   10434:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   10438:	f7ef fe84 	bl	144 <__aeabi_uldivmod>
   1043c:	4613      	mov	r3, r2
   1043e:	613b      	str	r3, [r7, #16]
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10440:	693b      	ldr	r3, [r7, #16]
   10442:	2b09      	cmp	r3, #9
   10444:	d804      	bhi.n	10450 <encode_uint+0x58>
   10446:	693b      	ldr	r3, [r7, #16]
   10448:	b2db      	uxtb	r3, r3
   1044a:	3330      	adds	r3, #48	; 0x30
   1044c:	b2db      	uxtb	r3, r3
   1044e:	e00b      	b.n	10468 <encode_uint+0x70>
   10450:	7efb      	ldrb	r3, [r7, #27]
   10452:	2b00      	cmp	r3, #0
   10454:	d004      	beq.n	10460 <encode_uint+0x68>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   10456:	693b      	ldr	r3, [r7, #16]
   10458:	b2db      	uxtb	r3, r3
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1045a:	3337      	adds	r3, #55	; 0x37
   1045c:	b2db      	uxtb	r3, r3
   1045e:	e003      	b.n	10468 <encode_uint+0x70>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   10460:	693b      	ldr	r3, [r7, #16]
   10462:	b2db      	uxtb	r3, r3
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10464:	3357      	adds	r3, #87	; 0x57
   10466:	b2db      	uxtb	r3, r3
   10468:	69fa      	ldr	r2, [r7, #28]
   1046a:	3a01      	subs	r2, #1
   1046c:	61fa      	str	r2, [r7, #28]
   1046e:	69fa      	ldr	r2, [r7, #28]
   10470:	7013      	strb	r3, [r2, #0]
		value /= radix;
   10472:	697b      	ldr	r3, [r7, #20]
   10474:	461a      	mov	r2, r3
   10476:	f04f 0300 	mov.w	r3, #0
   1047a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1047e:	f7ef fe61 	bl	144 <__aeabi_uldivmod>
   10482:	4602      	mov	r2, r0
   10484:	460b      	mov	r3, r1
   10486:	e9c7 2302 	strd	r2, r3, [r7, #8]
	} while ((value != 0) && (bps < bp));
   1048a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1048e:	4313      	orrs	r3, r2
   10490:	d003      	beq.n	1049a <encode_uint+0xa2>
   10492:	683a      	ldr	r2, [r7, #0]
   10494:	69fb      	ldr	r3, [r7, #28]
   10496:	429a      	cmp	r2, r3
   10498:	d3c8      	bcc.n	1042c <encode_uint+0x34>
	if (conv->flag_hash) {
   1049a:	687b      	ldr	r3, [r7, #4]
   1049c:	781b      	ldrb	r3, [r3, #0]
   1049e:	f003 0320 	and.w	r3, r3, #32
   104a2:	b2db      	uxtb	r3, r3
   104a4:	2b00      	cmp	r3, #0
   104a6:	d010      	beq.n	104ca <encode_uint+0xd2>
		if (radix == 8) {
   104a8:	697b      	ldr	r3, [r7, #20]
   104aa:	2b08      	cmp	r3, #8
   104ac:	d105      	bne.n	104ba <encode_uint+0xc2>
			conv->altform_0 = true;
   104ae:	687a      	ldr	r2, [r7, #4]
   104b0:	7893      	ldrb	r3, [r2, #2]
   104b2:	f043 0308 	orr.w	r3, r3, #8
   104b6:	7093      	strb	r3, [r2, #2]
   104b8:	e007      	b.n	104ca <encode_uint+0xd2>
		} else if (radix == 16) {
   104ba:	697b      	ldr	r3, [r7, #20]
   104bc:	2b10      	cmp	r3, #16
   104be:	d104      	bne.n	104ca <encode_uint+0xd2>
			conv->altform_0c = true;
   104c0:	687a      	ldr	r2, [r7, #4]
   104c2:	7893      	ldrb	r3, [r2, #2]
   104c4:	f043 0310 	orr.w	r3, r3, #16
   104c8:	7093      	strb	r3, [r2, #2]
	return bp;
   104ca:	69fb      	ldr	r3, [r7, #28]
}
   104cc:	4618      	mov	r0, r3
   104ce:	3720      	adds	r7, #32
   104d0:	46bd      	mov	sp, r7
   104d2:	bd80      	pop	{r7, pc}

000104d4 <outs>:
{
   104d4:	b580      	push	{r7, lr}
   104d6:	b086      	sub	sp, #24
   104d8:	af00      	add	r7, sp, #0
   104da:	60f8      	str	r0, [r7, #12]
   104dc:	60b9      	str	r1, [r7, #8]
   104de:	607a      	str	r2, [r7, #4]
   104e0:	603b      	str	r3, [r7, #0]
	size_t count = 0;
   104e2:	2300      	movs	r3, #0
   104e4:	617b      	str	r3, [r7, #20]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   104e6:	e011      	b.n	1050c <outs+0x38>
		int rc = out((int)*sp++, ctx);
   104e8:	687b      	ldr	r3, [r7, #4]
   104ea:	1c5a      	adds	r2, r3, #1
   104ec:	607a      	str	r2, [r7, #4]
   104ee:	781b      	ldrb	r3, [r3, #0]
   104f0:	461a      	mov	r2, r3
   104f2:	68fb      	ldr	r3, [r7, #12]
   104f4:	68b9      	ldr	r1, [r7, #8]
   104f6:	4610      	mov	r0, r2
   104f8:	4798      	blx	r3
   104fa:	6138      	str	r0, [r7, #16]
		if (rc < 0) {
   104fc:	693b      	ldr	r3, [r7, #16]
   104fe:	2b00      	cmp	r3, #0
   10500:	da01      	bge.n	10506 <outs+0x32>
			return rc;
   10502:	693b      	ldr	r3, [r7, #16]
   10504:	e00e      	b.n	10524 <outs+0x50>
		++count;
   10506:	697b      	ldr	r3, [r7, #20]
   10508:	3301      	adds	r3, #1
   1050a:	617b      	str	r3, [r7, #20]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1050c:	687a      	ldr	r2, [r7, #4]
   1050e:	683b      	ldr	r3, [r7, #0]
   10510:	429a      	cmp	r2, r3
   10512:	d3e9      	bcc.n	104e8 <outs+0x14>
   10514:	683b      	ldr	r3, [r7, #0]
   10516:	2b00      	cmp	r3, #0
   10518:	d103      	bne.n	10522 <outs+0x4e>
   1051a:	687b      	ldr	r3, [r7, #4]
   1051c:	781b      	ldrb	r3, [r3, #0]
   1051e:	2b00      	cmp	r3, #0
   10520:	d1e2      	bne.n	104e8 <outs+0x14>
	return (int)count;
   10522:	697b      	ldr	r3, [r7, #20]
}
   10524:	4618      	mov	r0, r3
   10526:	3718      	adds	r7, #24
   10528:	46bd      	mov	sp, r7
   1052a:	bd80      	pop	{r7, pc}

0001052c <assert_post_action>:
#ifdef CONFIG_ASSERT_NO_FILE_INFO
__weak void assert_post_action(void)
#else
__weak void assert_post_action(const char *file, unsigned int line)
#endif
{
   1052c:	b480      	push	{r7}
   1052e:	b083      	sub	sp, #12
   10530:	af00      	add	r7, sp, #0
   10532:	6078      	str	r0, [r7, #4]
   10534:	6039      	str	r1, [r7, #0]
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   10536:	4040      	eors	r0, r0
   10538:	f380 8811 	msr	BASEPRI, r0
   1053c:	f04f 0004 	mov.w	r0, #4
   10540:	df02      	svc	2
}
   10542:	bf00      	nop
   10544:	370c      	adds	r7, #12
   10546:	46bd      	mov	sp, r7
   10548:	bc80      	pop	{r7}
   1054a:	4770      	bx	lr

0001054c <_ConfigAbsSyms>:

/* file is auto-generated, do not modify ! */

#include <toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
   1054c:	b480      	push	{r7}
   1054e:	af00      	add	r7, sp, #0
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   10550:	bf00      	nop
   10552:	46bd      	mov	sp, r7
   10554:	bc80      	pop	{r7}
   10556:	4770      	bx	lr

00010558 <arch_busy_wait>:

void arch_busy_wait(uint32_t time_us)
{
   10558:	b580      	push	{r7, lr}
   1055a:	b082      	sub	sp, #8
   1055c:	af00      	add	r7, sp, #0
   1055e:	6078      	str	r0, [r7, #4]
	nrfx_coredep_delay_us(time_us);
   10560:	6878      	ldr	r0, [r7, #4]
   10562:	f7f1 fd91 	bl	2088 <nrfx_coredep_delay_us>
}
   10566:	bf00      	nop
   10568:	3708      	adds	r7, #8
   1056a:	46bd      	mov	sp, r7
   1056c:	bd80      	pop	{r7, pc}

0001056e <k_is_user_context>:
{
   1056e:	b480      	push	{r7}
   10570:	af00      	add	r7, sp, #0
	return false;
   10572:	2300      	movs	r3, #0
}
   10574:	4618      	mov	r0, r3
   10576:	46bd      	mov	sp, r7
   10578:	bc80      	pop	{r7}
   1057a:	4770      	bx	lr

0001057c <nrf_regulators_system_off>:
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
   1057c:	b480      	push	{r7}
   1057e:	b083      	sub	sp, #12
   10580:	af00      	add	r7, sp, #0
   10582:	6078      	str	r0, [r7, #4]
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   10584:	687b      	ldr	r3, [r7, #4]
   10586:	2201      	movs	r2, #1
   10588:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1058c:	f3bf 8f4f 	dsb	sy
}
   10590:	bf00      	nop
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   10592:	bf20      	wfe
   10594:	e7fd      	b.n	10592 <nrf_regulators_system_off+0x16>

00010596 <log_list_init>:
 */

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
   10596:	b480      	push	{r7}
   10598:	b083      	sub	sp, #12
   1059a:	af00      	add	r7, sp, #0
   1059c:	6078      	str	r0, [r7, #4]
	list->tail = NULL;
   1059e:	687b      	ldr	r3, [r7, #4]
   105a0:	2200      	movs	r2, #0
   105a2:	605a      	str	r2, [r3, #4]
	list->head = NULL;
   105a4:	687b      	ldr	r3, [r7, #4]
   105a6:	2200      	movs	r2, #0
   105a8:	601a      	str	r2, [r3, #0]
}
   105aa:	bf00      	nop
   105ac:	370c      	adds	r7, #12
   105ae:	46bd      	mov	sp, r7
   105b0:	bc80      	pop	{r7}
   105b2:	4770      	bx	lr

000105b4 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
   105b4:	b480      	push	{r7}
   105b6:	b083      	sub	sp, #12
   105b8:	af00      	add	r7, sp, #0
   105ba:	6078      	str	r0, [r7, #4]
   105bc:	6039      	str	r1, [r7, #0]
	if (list->head == NULL) {
   105be:	687b      	ldr	r3, [r7, #4]
   105c0:	681b      	ldr	r3, [r3, #0]
   105c2:	2b00      	cmp	r3, #0
   105c4:	d103      	bne.n	105ce <log_list_add_tail+0x1a>
		list->head = msg;
   105c6:	687b      	ldr	r3, [r7, #4]
   105c8:	683a      	ldr	r2, [r7, #0]
   105ca:	601a      	str	r2, [r3, #0]
   105cc:	e003      	b.n	105d6 <log_list_add_tail+0x22>
	} else {
		list->tail->next = msg;
   105ce:	687b      	ldr	r3, [r7, #4]
   105d0:	685b      	ldr	r3, [r3, #4]
   105d2:	683a      	ldr	r2, [r7, #0]
   105d4:	601a      	str	r2, [r3, #0]
	}

	list->tail = msg;
   105d6:	687b      	ldr	r3, [r7, #4]
   105d8:	683a      	ldr	r2, [r7, #0]
   105da:	605a      	str	r2, [r3, #4]
	msg->next = NULL;
   105dc:	683b      	ldr	r3, [r7, #0]
   105de:	2200      	movs	r2, #0
   105e0:	601a      	str	r2, [r3, #0]
}
   105e2:	bf00      	nop
   105e4:	370c      	adds	r7, #12
   105e6:	46bd      	mov	sp, r7
   105e8:	bc80      	pop	{r7}
   105ea:	4770      	bx	lr

000105ec <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
   105ec:	b480      	push	{r7}
   105ee:	b083      	sub	sp, #12
   105f0:	af00      	add	r7, sp, #0
   105f2:	6078      	str	r0, [r7, #4]
	return list->head;
   105f4:	687b      	ldr	r3, [r7, #4]
   105f6:	681b      	ldr	r3, [r3, #0]
}
   105f8:	4618      	mov	r0, r3
   105fa:	370c      	adds	r7, #12
   105fc:	46bd      	mov	sp, r7
   105fe:	bc80      	pop	{r7}
   10600:	4770      	bx	lr

00010602 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   10602:	b480      	push	{r7}
   10604:	b085      	sub	sp, #20
   10606:	af00      	add	r7, sp, #0
   10608:	6078      	str	r0, [r7, #4]
	struct log_msg *msg = list->head;
   1060a:	687b      	ldr	r3, [r7, #4]
   1060c:	681b      	ldr	r3, [r3, #0]
   1060e:	60fb      	str	r3, [r7, #12]

	if (list->head != NULL) {
   10610:	687b      	ldr	r3, [r7, #4]
   10612:	681b      	ldr	r3, [r3, #0]
   10614:	2b00      	cmp	r3, #0
   10616:	d004      	beq.n	10622 <log_list_head_get+0x20>
		list->head = list->head->next;
   10618:	687b      	ldr	r3, [r7, #4]
   1061a:	681b      	ldr	r3, [r3, #0]
   1061c:	681a      	ldr	r2, [r3, #0]
   1061e:	687b      	ldr	r3, [r7, #4]
   10620:	601a      	str	r2, [r3, #0]
	}

	return msg;
   10622:	68fb      	ldr	r3, [r7, #12]
}
   10624:	4618      	mov	r0, r3
   10626:	3714      	adds	r7, #20
   10628:	46bd      	mov	sp, r7
   1062a:	bc80      	pop	{r7}
   1062c:	4770      	bx	lr

0001062e <atomic_add>:
 * @param value Value to add.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
   1062e:	b480      	push	{r7}
   10630:	b083      	sub	sp, #12
   10632:	af00      	add	r7, sp, #0
   10634:	6078      	str	r0, [r7, #4]
   10636:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10638:	683a      	ldr	r2, [r7, #0]
   1063a:	687b      	ldr	r3, [r7, #4]
   1063c:	e8d3 1fef 	ldaex	r1, [r3]
   10640:	eb01 0002 	add.w	r0, r1, r2
   10644:	e8c3 0fec 	stlex	ip, r0, [r3]
   10648:	f1bc 0f00 	cmp.w	ip, #0
   1064c:	d1f6      	bne.n	1063c <atomic_add+0xe>
   1064e:	460b      	mov	r3, r1
}
   10650:	4618      	mov	r0, r3
   10652:	370c      	adds	r7, #12
   10654:	46bd      	mov	sp, r7
   10656:	bc80      	pop	{r7}
   10658:	4770      	bx	lr

0001065a <atomic_sub>:
 * @param value Value to subtract.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
   1065a:	b480      	push	{r7}
   1065c:	b083      	sub	sp, #12
   1065e:	af00      	add	r7, sp, #0
   10660:	6078      	str	r0, [r7, #4]
   10662:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   10664:	683a      	ldr	r2, [r7, #0]
   10666:	687b      	ldr	r3, [r7, #4]
   10668:	e8d3 1fef 	ldaex	r1, [r3]
   1066c:	eba1 0002 	sub.w	r0, r1, r2
   10670:	e8c3 0fec 	stlex	ip, r0, [r3]
   10674:	f1bc 0f00 	cmp.w	ip, #0
   10678:	d1f6      	bne.n	10668 <atomic_sub+0xe>
   1067a:	460b      	mov	r3, r1
}
   1067c:	4618      	mov	r0, r3
   1067e:	370c      	adds	r7, #12
   10680:	46bd      	mov	sp, r7
   10682:	bc80      	pop	{r7}
   10684:	4770      	bx	lr

00010686 <atomic_inc>:
 * @param target Address of atomic variable.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_inc(atomic_t *target)
{
   10686:	b580      	push	{r7, lr}
   10688:	b082      	sub	sp, #8
   1068a:	af00      	add	r7, sp, #0
   1068c:	6078      	str	r0, [r7, #4]
	return atomic_add(target, 1);
   1068e:	2101      	movs	r1, #1
   10690:	6878      	ldr	r0, [r7, #4]
   10692:	f7ff ffcc 	bl	1062e <atomic_add>
   10696:	4603      	mov	r3, r0
}
   10698:	4618      	mov	r0, r3
   1069a:	3708      	adds	r7, #8
   1069c:	46bd      	mov	sp, r7
   1069e:	bd80      	pop	{r7, pc}

000106a0 <atomic_dec>:
 * @param target Address of atomic variable.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_dec(atomic_t *target)
{
   106a0:	b580      	push	{r7, lr}
   106a2:	b082      	sub	sp, #8
   106a4:	af00      	add	r7, sp, #0
   106a6:	6078      	str	r0, [r7, #4]
	return atomic_sub(target, 1);
   106a8:	2101      	movs	r1, #1
   106aa:	6878      	ldr	r0, [r7, #4]
   106ac:	f7ff ffd5 	bl	1065a <atomic_sub>
   106b0:	4603      	mov	r3, r0
}
   106b2:	4618      	mov	r0, r3
   106b4:	3708      	adds	r7, #8
   106b6:	46bd      	mov	sp, r7
   106b8:	bd80      	pop	{r7, pc}

000106ba <atomic_set>:
 * @param value Value to write to @a target.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_set(atomic_t *target, atomic_val_t value)
{
   106ba:	b480      	push	{r7}
   106bc:	b083      	sub	sp, #12
   106be:	af00      	add	r7, sp, #0
   106c0:	6078      	str	r0, [r7, #4]
   106c2:	6039      	str	r1, [r7, #0]
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   106c4:	683a      	ldr	r2, [r7, #0]
   106c6:	687b      	ldr	r3, [r7, #4]
   106c8:	e8d3 1fef 	ldaex	r1, [r3]
   106cc:	e8c3 2fe0 	stlex	r0, r2, [r3]
   106d0:	2800      	cmp	r0, #0
   106d2:	d1f9      	bne.n	106c8 <atomic_set+0xe>
   106d4:	460b      	mov	r3, r1
}
   106d6:	4618      	mov	r0, r3
   106d8:	370c      	adds	r7, #12
   106da:	46bd      	mov	sp, r7
   106dc:	bc80      	pop	{r7}
   106de:	4770      	bx	lr

000106e0 <k_is_user_context>:
{
   106e0:	b480      	push	{r7}
   106e2:	af00      	add	r7, sp, #0
	return false;
   106e4:	2300      	movs	r3, #0
}
   106e6:	4618      	mov	r0, r3
   106e8:	46bd      	mov	sp, r7
   106ea:	bc80      	pop	{r7}
   106ec:	4770      	bx	lr

000106ee <log_msg_source_id_get>:
 * @param msg Message
 *
 * @return Source ID.
 */
static inline uint32_t log_msg_source_id_get(struct log_msg *msg)
{
   106ee:	b480      	push	{r7}
   106f0:	b083      	sub	sp, #12
   106f2:	af00      	add	r7, sp, #0
   106f4:	6078      	str	r0, [r7, #4]
	return msg->hdr.ids.source_id;
   106f6:	687b      	ldr	r3, [r7, #4]
   106f8:	895b      	ldrh	r3, [r3, #10]
   106fa:	f3c3 1389 	ubfx	r3, r3, #6, #10
   106fe:	b29b      	uxth	r3, r3
}
   10700:	4618      	mov	r0, r3
   10702:	370c      	adds	r7, #12
   10704:	46bd      	mov	sp, r7
   10706:	bc80      	pop	{r7}
   10708:	4770      	bx	lr

0001070a <log_msg_is_std>:
 *
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
   1070a:	b480      	push	{r7}
   1070c:	b083      	sub	sp, #12
   1070e:	af00      	add	r7, sp, #0
   10710:	6078      	str	r0, [r7, #4]
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10712:	687b      	ldr	r3, [r7, #4]
   10714:	7a1b      	ldrb	r3, [r3, #8]
   10716:	f003 0301 	and.w	r3, r3, #1
   1071a:	b2db      	uxtb	r3, r3
   1071c:	2b00      	cmp	r3, #0
   1071e:	bf0c      	ite	eq
   10720:	2301      	moveq	r3, #1
   10722:	2300      	movne	r3, #0
   10724:	b2db      	uxtb	r3, r3
}
   10726:	4618      	mov	r0, r3
   10728:	370c      	adds	r7, #12
   1072a:	46bd      	mov	sp, r7
   1072c:	bc80      	pop	{r7}
   1072e:	4770      	bx	lr

00010730 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   10730:	b580      	push	{r7, lr}
   10732:	b082      	sub	sp, #8
   10734:	af00      	add	r7, sp, #0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   10736:	f7f2 fb4d 	bl	2dd4 <log_msg_chunk_alloc>
   1073a:	6078      	str	r0, [r7, #4]

	if (msg != NULL) {
   1073c:	687b      	ldr	r3, [r7, #4]
   1073e:	2b00      	cmp	r3, #0
   10740:	d00a      	beq.n	10758 <z_log_msg_std_alloc+0x28>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   10742:	687b      	ldr	r3, [r7, #4]
   10744:	2201      	movs	r2, #1
   10746:	605a      	str	r2, [r3, #4]
		msg->hdr.params.raw = 0U;
   10748:	687b      	ldr	r3, [r7, #4]
   1074a:	2200      	movs	r2, #0
   1074c:	811a      	strh	r2, [r3, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   1074e:	687a      	ldr	r2, [r7, #4]
   10750:	7a13      	ldrb	r3, [r2, #8]
   10752:	f36f 0300 	bfc	r3, #0, #1
   10756:	7213      	strb	r3, [r2, #8]
			msg->hdr.ids.domain_id = 0;
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
   10758:	687b      	ldr	r3, [r7, #4]
}
   1075a:	4618      	mov	r0, r3
   1075c:	3708      	adds	r7, #8
   1075e:	46bd      	mov	sp, r7
   10760:	bd80      	pop	{r7, pc}

00010762 <log_msg_create_0>:
 *		- string pointer
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
   10762:	b580      	push	{r7, lr}
   10764:	b084      	sub	sp, #16
   10766:	af00      	add	r7, sp, #0
   10768:	6078      	str	r0, [r7, #4]
	struct log_msg *msg = z_log_msg_std_alloc();
   1076a:	f7ff ffe1 	bl	10730 <z_log_msg_std_alloc>
   1076e:	60f8      	str	r0, [r7, #12]

	if (msg != NULL) {
   10770:	68fb      	ldr	r3, [r7, #12]
   10772:	2b00      	cmp	r3, #0
   10774:	d002      	beq.n	1077c <log_msg_create_0+0x1a>
		msg->str = str;
   10776:	68fb      	ldr	r3, [r7, #12]
   10778:	687a      	ldr	r2, [r7, #4]
   1077a:	611a      	str	r2, [r3, #16]
	}

	return msg;
   1077c:	68fb      	ldr	r3, [r7, #12]
}
   1077e:	4618      	mov	r0, r3
   10780:	3710      	adds	r7, #16
   10782:	46bd      	mov	sp, r7
   10784:	bd80      	pop	{r7, pc}

00010786 <log_msg_create_1>:
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
   10786:	b580      	push	{r7, lr}
   10788:	b084      	sub	sp, #16
   1078a:	af00      	add	r7, sp, #0
   1078c:	6078      	str	r0, [r7, #4]
   1078e:	6039      	str	r1, [r7, #0]
	struct  log_msg *msg = z_log_msg_std_alloc();
   10790:	f7ff ffce 	bl	10730 <z_log_msg_std_alloc>
   10794:	60f8      	str	r0, [r7, #12]

	if (msg != NULL) {
   10796:	68fb      	ldr	r3, [r7, #12]
   10798:	2b00      	cmp	r3, #0
   1079a:	d00b      	beq.n	107b4 <log_msg_create_1+0x2e>
		msg->str = str;
   1079c:	68fb      	ldr	r3, [r7, #12]
   1079e:	687a      	ldr	r2, [r7, #4]
   107a0:	611a      	str	r2, [r3, #16]
		msg->hdr.params.std.nargs = 1U;
   107a2:	68fa      	ldr	r2, [r7, #12]
   107a4:	7a53      	ldrb	r3, [r2, #9]
   107a6:	2101      	movs	r1, #1
   107a8:	f361 1307 	bfi	r3, r1, #4, #4
   107ac:	7253      	strb	r3, [r2, #9]
		msg->payload.single.args[0] = arg1;
   107ae:	68fb      	ldr	r3, [r7, #12]
   107b0:	683a      	ldr	r2, [r7, #0]
   107b2:	615a      	str	r2, [r3, #20]
	}

	return msg;
   107b4:	68fb      	ldr	r3, [r7, #12]
}
   107b6:	4618      	mov	r0, r3
   107b8:	3710      	adds	r7, #16
   107ba:	46bd      	mov	sp, r7
   107bc:	bd80      	pop	{r7, pc}

000107be <log_msg_create_2>:
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
   107be:	b580      	push	{r7, lr}
   107c0:	b086      	sub	sp, #24
   107c2:	af00      	add	r7, sp, #0
   107c4:	60f8      	str	r0, [r7, #12]
   107c6:	60b9      	str	r1, [r7, #8]
   107c8:	607a      	str	r2, [r7, #4]
	struct  log_msg *msg = z_log_msg_std_alloc();
   107ca:	f7ff ffb1 	bl	10730 <z_log_msg_std_alloc>
   107ce:	6178      	str	r0, [r7, #20]

	if (msg != NULL) {
   107d0:	697b      	ldr	r3, [r7, #20]
   107d2:	2b00      	cmp	r3, #0
   107d4:	d00e      	beq.n	107f4 <log_msg_create_2+0x36>
		msg->str = str;
   107d6:	697b      	ldr	r3, [r7, #20]
   107d8:	68fa      	ldr	r2, [r7, #12]
   107da:	611a      	str	r2, [r3, #16]
		msg->hdr.params.std.nargs = 2U;
   107dc:	697a      	ldr	r2, [r7, #20]
   107de:	7a53      	ldrb	r3, [r2, #9]
   107e0:	2102      	movs	r1, #2
   107e2:	f361 1307 	bfi	r3, r1, #4, #4
   107e6:	7253      	strb	r3, [r2, #9]
		msg->payload.single.args[0] = arg1;
   107e8:	697b      	ldr	r3, [r7, #20]
   107ea:	68ba      	ldr	r2, [r7, #8]
   107ec:	615a      	str	r2, [r3, #20]
		msg->payload.single.args[1] = arg2;
   107ee:	697b      	ldr	r3, [r7, #20]
   107f0:	687a      	ldr	r2, [r7, #4]
   107f2:	619a      	str	r2, [r3, #24]
	}

	return msg;
   107f4:	697b      	ldr	r3, [r7, #20]
}
   107f6:	4618      	mov	r0, r3
   107f8:	3718      	adds	r7, #24
   107fa:	46bd      	mov	sp, r7
   107fc:	bd80      	pop	{r7, pc}

000107fe <log_msg_create_3>:
 */
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
   107fe:	b580      	push	{r7, lr}
   10800:	b086      	sub	sp, #24
   10802:	af00      	add	r7, sp, #0
   10804:	60f8      	str	r0, [r7, #12]
   10806:	60b9      	str	r1, [r7, #8]
   10808:	607a      	str	r2, [r7, #4]
   1080a:	603b      	str	r3, [r7, #0]
	struct  log_msg *msg = z_log_msg_std_alloc();
   1080c:	f7ff ff90 	bl	10730 <z_log_msg_std_alloc>
   10810:	6178      	str	r0, [r7, #20]

	if (msg != NULL) {
   10812:	697b      	ldr	r3, [r7, #20]
   10814:	2b00      	cmp	r3, #0
   10816:	d011      	beq.n	1083c <log_msg_create_3+0x3e>
		msg->str = str;
   10818:	697b      	ldr	r3, [r7, #20]
   1081a:	68fa      	ldr	r2, [r7, #12]
   1081c:	611a      	str	r2, [r3, #16]
		msg->hdr.params.std.nargs = 3U;
   1081e:	697a      	ldr	r2, [r7, #20]
   10820:	7a53      	ldrb	r3, [r2, #9]
   10822:	2103      	movs	r1, #3
   10824:	f361 1307 	bfi	r3, r1, #4, #4
   10828:	7253      	strb	r3, [r2, #9]
		msg->payload.single.args[0] = arg1;
   1082a:	697b      	ldr	r3, [r7, #20]
   1082c:	68ba      	ldr	r2, [r7, #8]
   1082e:	615a      	str	r2, [r3, #20]
		msg->payload.single.args[1] = arg2;
   10830:	697b      	ldr	r3, [r7, #20]
   10832:	687a      	ldr	r2, [r7, #4]
   10834:	619a      	str	r2, [r3, #24]
		msg->payload.single.args[2] = arg3;
   10836:	697b      	ldr	r3, [r7, #20]
   10838:	683a      	ldr	r2, [r7, #0]
   1083a:	61da      	str	r2, [r3, #28]
	}

	return msg;
   1083c:	697b      	ldr	r3, [r7, #20]
}
   1083e:	4618      	mov	r0, r3
   10840:	3718      	adds	r7, #24
   10842:	46bd      	mov	sp, r7
   10844:	bd80      	pop	{r7, pc}

00010846 <arch_k_cycle_get_32>:

#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
   10846:	b580      	push	{r7, lr}
   10848:	af00      	add	r7, sp, #0
	return sys_clock_cycle_get_32();
   1084a:	f7f4 fe65 	bl	5518 <sys_clock_cycle_get_32>
   1084e:	4603      	mov	r3, r0
}
   10850:	4618      	mov	r0, r3
   10852:	bd80      	pop	{r7, pc}

00010854 <sys_clock_hw_cycles_per_sec>:
{
   10854:	b480      	push	{r7}
   10856:	af00      	add	r7, sp, #0
	return CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
   10858:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
   1085c:	4618      	mov	r0, r3
   1085e:	46bd      	mov	sp, r7
   10860:	bc80      	pop	{r7}
   10862:	4770      	bx	lr

00010864 <k_ms_to_ticks_ceil64>:
{
   10864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   10868:	b08c      	sub	sp, #48	; 0x30
   1086a:	af00      	add	r7, sp, #0
   1086c:	e9c7 0100 	strd	r0, r1, [r7]
   10870:	e9d7 2300 	ldrd	r2, r3, [r7]
   10874:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   10878:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1087c:	627b      	str	r3, [r7, #36]	; 0x24
   1087e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   10882:	623b      	str	r3, [r7, #32]
   10884:	2301      	movs	r3, #1
   10886:	77fb      	strb	r3, [r7, #31]
   10888:	2300      	movs	r3, #0
   1088a:	77bb      	strb	r3, [r7, #30]
   1088c:	2301      	movs	r3, #1
   1088e:	777b      	strb	r3, [r7, #29]
   10890:	2300      	movs	r3, #0
   10892:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   10894:	7ffb      	ldrb	r3, [r7, #31]
   10896:	2b00      	cmp	r3, #0
   10898:	d00f      	beq.n	108ba <k_ms_to_ticks_ceil64+0x56>
	bool mul_ratio = const_hz &&
   1089a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1089c:	6a3b      	ldr	r3, [r7, #32]
   1089e:	429a      	cmp	r2, r3
   108a0:	d20b      	bcs.n	108ba <k_ms_to_ticks_ceil64+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   108a2:	6a3b      	ldr	r3, [r7, #32]
   108a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   108a6:	fbb3 f2f2 	udiv	r2, r3, r2
   108aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
   108ac:	fb01 f202 	mul.w	r2, r1, r2
   108b0:	1a9b      	subs	r3, r3, r2
   108b2:	2b00      	cmp	r3, #0
   108b4:	d101      	bne.n	108ba <k_ms_to_ticks_ceil64+0x56>
   108b6:	2301      	movs	r3, #1
   108b8:	e000      	b.n	108bc <k_ms_to_ticks_ceil64+0x58>
   108ba:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   108bc:	76fb      	strb	r3, [r7, #27]
   108be:	7efb      	ldrb	r3, [r7, #27]
   108c0:	f003 0301 	and.w	r3, r3, #1
   108c4:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   108c6:	7ffb      	ldrb	r3, [r7, #31]
   108c8:	2b00      	cmp	r3, #0
   108ca:	d00f      	beq.n	108ec <k_ms_to_ticks_ceil64+0x88>
	bool div_ratio = const_hz &&
   108cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   108ce:	6a3b      	ldr	r3, [r7, #32]
   108d0:	429a      	cmp	r2, r3
   108d2:	d90b      	bls.n	108ec <k_ms_to_ticks_ceil64+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   108d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   108d6:	6a3a      	ldr	r2, [r7, #32]
   108d8:	fbb3 f2f2 	udiv	r2, r3, r2
   108dc:	6a39      	ldr	r1, [r7, #32]
   108de:	fb01 f202 	mul.w	r2, r1, r2
   108e2:	1a9b      	subs	r3, r3, r2
   108e4:	2b00      	cmp	r3, #0
   108e6:	d101      	bne.n	108ec <k_ms_to_ticks_ceil64+0x88>
   108e8:	2301      	movs	r3, #1
   108ea:	e000      	b.n	108ee <k_ms_to_ticks_ceil64+0x8a>
   108ec:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   108ee:	76bb      	strb	r3, [r7, #26]
   108f0:	7ebb      	ldrb	r3, [r7, #26]
   108f2:	f003 0301 	and.w	r3, r3, #1
   108f6:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   108f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   108fa:	6a3b      	ldr	r3, [r7, #32]
   108fc:	429a      	cmp	r2, r3
   108fe:	d10a      	bne.n	10916 <k_ms_to_ticks_ceil64+0xb2>
		return result32 ? ((uint32_t)t) : t;
   10900:	7fbb      	ldrb	r3, [r7, #30]
   10902:	2b00      	cmp	r3, #0
   10904:	d004      	beq.n	10910 <k_ms_to_ticks_ceil64+0xac>
   10906:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10908:	461a      	mov	r2, r3
   1090a:	f04f 0300 	mov.w	r3, #0
   1090e:	e0c7      	b.n	10aa0 <k_ms_to_ticks_ceil64+0x23c>
   10910:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   10914:	e0c4      	b.n	10aa0 <k_ms_to_ticks_ceil64+0x23c>
	uint64_t off = 0;
   10916:	f04f 0200 	mov.w	r2, #0
   1091a:	f04f 0300 	mov.w	r3, #0
   1091e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   10922:	7efb      	ldrb	r3, [r7, #27]
   10924:	f083 0301 	eor.w	r3, r3, #1
   10928:	b2db      	uxtb	r3, r3
   1092a:	2b00      	cmp	r3, #0
   1092c:	d01d      	beq.n	1096a <k_ms_to_ticks_ceil64+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   1092e:	7ebb      	ldrb	r3, [r7, #26]
   10930:	2b00      	cmp	r3, #0
   10932:	d004      	beq.n	1093e <k_ms_to_ticks_ceil64+0xda>
   10934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10936:	6a3b      	ldr	r3, [r7, #32]
   10938:	fbb2 f3f3 	udiv	r3, r2, r3
   1093c:	e000      	b.n	10940 <k_ms_to_ticks_ceil64+0xdc>
   1093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10940:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   10942:	7f7b      	ldrb	r3, [r7, #29]
   10944:	2b00      	cmp	r3, #0
   10946:	d006      	beq.n	10956 <k_ms_to_ticks_ceil64+0xf2>
			off = rdivisor - 1U;
   10948:	68fb      	ldr	r3, [r7, #12]
   1094a:	3b01      	subs	r3, #1
   1094c:	461a      	mov	r2, r3
   1094e:	f04f 0300 	mov.w	r3, #0
   10952:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   10956:	7f3b      	ldrb	r3, [r7, #28]
   10958:	2b00      	cmp	r3, #0
   1095a:	d006      	beq.n	1096a <k_ms_to_ticks_ceil64+0x106>
			off = rdivisor / 2U;
   1095c:	68fb      	ldr	r3, [r7, #12]
   1095e:	085b      	lsrs	r3, r3, #1
   10960:	461a      	mov	r2, r3
   10962:	f04f 0300 	mov.w	r3, #0
   10966:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   1096a:	7ebb      	ldrb	r3, [r7, #26]
   1096c:	2b00      	cmp	r3, #0
   1096e:	d02a      	beq.n	109c6 <k_ms_to_ticks_ceil64+0x162>
		t += off;
   10970:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10974:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10978:	1884      	adds	r4, r0, r2
   1097a:	eb41 0503 	adc.w	r5, r1, r3
   1097e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   10982:	7fbb      	ldrb	r3, [r7, #30]
   10984:	2b00      	cmp	r3, #0
   10986:	d010      	beq.n	109aa <k_ms_to_ticks_ceil64+0x146>
   10988:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   1098c:	2b01      	cmp	r3, #1
   1098e:	bf08      	it	eq
   10990:	2a00      	cmpeq	r2, #0
   10992:	d20a      	bcs.n	109aa <k_ms_to_ticks_ceil64+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
   10994:	6aba      	ldr	r2, [r7, #40]	; 0x28
   10996:	6a79      	ldr	r1, [r7, #36]	; 0x24
   10998:	6a3b      	ldr	r3, [r7, #32]
   1099a:	fbb1 f3f3 	udiv	r3, r1, r3
   1099e:	fbb2 f3f3 	udiv	r3, r2, r3
   109a2:	461a      	mov	r2, r3
   109a4:	f04f 0300 	mov.w	r3, #0
   109a8:	e07a      	b.n	10aa0 <k_ms_to_ticks_ceil64+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
   109aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   109ac:	6a3b      	ldr	r3, [r7, #32]
   109ae:	fbb2 f3f3 	udiv	r3, r2, r3
   109b2:	461a      	mov	r2, r3
   109b4:	f04f 0300 	mov.w	r3, #0
   109b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   109bc:	f7ef fbc2 	bl	144 <__aeabi_uldivmod>
   109c0:	4602      	mov	r2, r0
   109c2:	460b      	mov	r3, r1
   109c4:	e06c      	b.n	10aa0 <k_ms_to_ticks_ceil64+0x23c>
	} else if (mul_ratio) {
   109c6:	7efb      	ldrb	r3, [r7, #27]
   109c8:	2b00      	cmp	r3, #0
   109ca:	d021      	beq.n	10a10 <k_ms_to_ticks_ceil64+0x1ac>
		if (result32) {
   109cc:	7fbb      	ldrb	r3, [r7, #30]
   109ce:	2b00      	cmp	r3, #0
   109d0:	d00a      	beq.n	109e8 <k_ms_to_ticks_ceil64+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
   109d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   109d4:	6a39      	ldr	r1, [r7, #32]
   109d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   109d8:	fbb1 f2f2 	udiv	r2, r1, r2
   109dc:	fb02 f303 	mul.w	r3, r2, r3
   109e0:	461a      	mov	r2, r3
   109e2:	f04f 0300 	mov.w	r3, #0
   109e6:	e05b      	b.n	10aa0 <k_ms_to_ticks_ceil64+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
   109e8:	6a3a      	ldr	r2, [r7, #32]
   109ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   109ec:	fbb2 f3f3 	udiv	r3, r2, r3
   109f0:	461a      	mov	r2, r3
   109f2:	f04f 0300 	mov.w	r3, #0
   109f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   109f8:	fb03 f001 	mul.w	r0, r3, r1
   109fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   109fe:	fb02 f101 	mul.w	r1, r2, r1
   10a02:	4401      	add	r1, r0
   10a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10a06:	fba0 2302 	umull	r2, r3, r0, r2
   10a0a:	4419      	add	r1, r3
   10a0c:	460b      	mov	r3, r1
   10a0e:	e047      	b.n	10aa0 <k_ms_to_ticks_ceil64+0x23c>
		if (result32) {
   10a10:	7fbb      	ldrb	r3, [r7, #30]
   10a12:	2b00      	cmp	r3, #0
   10a14:	d024      	beq.n	10a60 <k_ms_to_ticks_ceil64+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   10a16:	6a3b      	ldr	r3, [r7, #32]
   10a18:	461a      	mov	r2, r3
   10a1a:	f04f 0300 	mov.w	r3, #0
   10a1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   10a20:	fb03 f001 	mul.w	r0, r3, r1
   10a24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   10a26:	fb02 f101 	mul.w	r1, r2, r1
   10a2a:	4401      	add	r1, r0
   10a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10a2e:	fba0 2302 	umull	r2, r3, r0, r2
   10a32:	4419      	add	r1, r3
   10a34:	460b      	mov	r3, r1
   10a36:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   10a3a:	eb12 0a00 	adds.w	sl, r2, r0
   10a3e:	eb43 0b01 	adc.w	fp, r3, r1
   10a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10a44:	461a      	mov	r2, r3
   10a46:	f04f 0300 	mov.w	r3, #0
   10a4a:	4650      	mov	r0, sl
   10a4c:	4659      	mov	r1, fp
   10a4e:	f7ef fb79 	bl	144 <__aeabi_uldivmod>
   10a52:	4602      	mov	r2, r0
   10a54:	460b      	mov	r3, r1
   10a56:	4613      	mov	r3, r2
   10a58:	461a      	mov	r2, r3
   10a5a:	f04f 0300 	mov.w	r3, #0
   10a5e:	e01f      	b.n	10aa0 <k_ms_to_ticks_ceil64+0x23c>
			return (t * to_hz + off) / from_hz;
   10a60:	6a3b      	ldr	r3, [r7, #32]
   10a62:	461a      	mov	r2, r3
   10a64:	f04f 0300 	mov.w	r3, #0
   10a68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   10a6a:	fb03 f001 	mul.w	r0, r3, r1
   10a6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   10a70:	fb02 f101 	mul.w	r1, r2, r1
   10a74:	4401      	add	r1, r0
   10a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10a78:	fba0 2302 	umull	r2, r3, r0, r2
   10a7c:	4419      	add	r1, r3
   10a7e:	460b      	mov	r3, r1
   10a80:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   10a84:	eb12 0800 	adds.w	r8, r2, r0
   10a88:	eb43 0901 	adc.w	r9, r3, r1
   10a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10a8e:	461a      	mov	r2, r3
   10a90:	f04f 0300 	mov.w	r3, #0
   10a94:	4640      	mov	r0, r8
   10a96:	4649      	mov	r1, r9
   10a98:	f7ef fb54 	bl	144 <__aeabi_uldivmod>
   10a9c:	4602      	mov	r2, r0
   10a9e:	460b      	mov	r3, r1
}
   10aa0:	4610      	mov	r0, r2
   10aa2:	4619      	mov	r1, r3
   10aa4:	3730      	adds	r7, #48	; 0x30
   10aa6:	46bd      	mov	sp, r7
   10aa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

00010aac <k_ticks_to_ms_floor64>:
 * Truncates to the next lowest output unit.
 *
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint64_t k_ticks_to_ms_floor64(uint64_t t)
{
   10aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   10ab0:	b08c      	sub	sp, #48	; 0x30
   10ab2:	af00      	add	r7, sp, #0
   10ab4:	e9c7 0100 	strd	r0, r1, [r7]
   10ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
   10abc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   10ac0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   10ac4:	627b      	str	r3, [r7, #36]	; 0x24
   10ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   10aca:	623b      	str	r3, [r7, #32]
   10acc:	2301      	movs	r3, #1
   10ace:	77fb      	strb	r3, [r7, #31]
   10ad0:	2300      	movs	r3, #0
   10ad2:	77bb      	strb	r3, [r7, #30]
   10ad4:	2300      	movs	r3, #0
   10ad6:	777b      	strb	r3, [r7, #29]
   10ad8:	2300      	movs	r3, #0
   10ada:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   10adc:	7ffb      	ldrb	r3, [r7, #31]
   10ade:	2b00      	cmp	r3, #0
   10ae0:	d00f      	beq.n	10b02 <k_ticks_to_ms_floor64+0x56>
	bool mul_ratio = const_hz &&
   10ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10ae4:	6a3b      	ldr	r3, [r7, #32]
   10ae6:	429a      	cmp	r2, r3
   10ae8:	d20b      	bcs.n	10b02 <k_ticks_to_ms_floor64+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   10aea:	6a3b      	ldr	r3, [r7, #32]
   10aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10aee:	fbb3 f2f2 	udiv	r2, r3, r2
   10af2:	6a79      	ldr	r1, [r7, #36]	; 0x24
   10af4:	fb01 f202 	mul.w	r2, r1, r2
   10af8:	1a9b      	subs	r3, r3, r2
   10afa:	2b00      	cmp	r3, #0
   10afc:	d101      	bne.n	10b02 <k_ticks_to_ms_floor64+0x56>
   10afe:	2301      	movs	r3, #1
   10b00:	e000      	b.n	10b04 <k_ticks_to_ms_floor64+0x58>
   10b02:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   10b04:	76fb      	strb	r3, [r7, #27]
   10b06:	7efb      	ldrb	r3, [r7, #27]
   10b08:	f003 0301 	and.w	r3, r3, #1
   10b0c:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   10b0e:	7ffb      	ldrb	r3, [r7, #31]
   10b10:	2b00      	cmp	r3, #0
   10b12:	d00f      	beq.n	10b34 <k_ticks_to_ms_floor64+0x88>
	bool div_ratio = const_hz &&
   10b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10b16:	6a3b      	ldr	r3, [r7, #32]
   10b18:	429a      	cmp	r2, r3
   10b1a:	d90b      	bls.n	10b34 <k_ticks_to_ms_floor64+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   10b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10b1e:	6a3a      	ldr	r2, [r7, #32]
   10b20:	fbb3 f2f2 	udiv	r2, r3, r2
   10b24:	6a39      	ldr	r1, [r7, #32]
   10b26:	fb01 f202 	mul.w	r2, r1, r2
   10b2a:	1a9b      	subs	r3, r3, r2
   10b2c:	2b00      	cmp	r3, #0
   10b2e:	d101      	bne.n	10b34 <k_ticks_to_ms_floor64+0x88>
   10b30:	2301      	movs	r3, #1
   10b32:	e000      	b.n	10b36 <k_ticks_to_ms_floor64+0x8a>
   10b34:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   10b36:	76bb      	strb	r3, [r7, #26]
   10b38:	7ebb      	ldrb	r3, [r7, #26]
   10b3a:	f003 0301 	and.w	r3, r3, #1
   10b3e:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   10b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10b42:	6a3b      	ldr	r3, [r7, #32]
   10b44:	429a      	cmp	r2, r3
   10b46:	d10a      	bne.n	10b5e <k_ticks_to_ms_floor64+0xb2>
		return result32 ? ((uint32_t)t) : t;
   10b48:	7fbb      	ldrb	r3, [r7, #30]
   10b4a:	2b00      	cmp	r3, #0
   10b4c:	d004      	beq.n	10b58 <k_ticks_to_ms_floor64+0xac>
   10b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10b50:	461a      	mov	r2, r3
   10b52:	f04f 0300 	mov.w	r3, #0
   10b56:	e0c7      	b.n	10ce8 <k_ticks_to_ms_floor64+0x23c>
   10b58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   10b5c:	e0c4      	b.n	10ce8 <k_ticks_to_ms_floor64+0x23c>
	uint64_t off = 0;
   10b5e:	f04f 0200 	mov.w	r2, #0
   10b62:	f04f 0300 	mov.w	r3, #0
   10b66:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   10b6a:	7efb      	ldrb	r3, [r7, #27]
   10b6c:	f083 0301 	eor.w	r3, r3, #1
   10b70:	b2db      	uxtb	r3, r3
   10b72:	2b00      	cmp	r3, #0
   10b74:	d01d      	beq.n	10bb2 <k_ticks_to_ms_floor64+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   10b76:	7ebb      	ldrb	r3, [r7, #26]
   10b78:	2b00      	cmp	r3, #0
   10b7a:	d004      	beq.n	10b86 <k_ticks_to_ms_floor64+0xda>
   10b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10b7e:	6a3b      	ldr	r3, [r7, #32]
   10b80:	fbb2 f3f3 	udiv	r3, r2, r3
   10b84:	e000      	b.n	10b88 <k_ticks_to_ms_floor64+0xdc>
   10b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10b88:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   10b8a:	7f7b      	ldrb	r3, [r7, #29]
   10b8c:	2b00      	cmp	r3, #0
   10b8e:	d006      	beq.n	10b9e <k_ticks_to_ms_floor64+0xf2>
			off = rdivisor - 1U;
   10b90:	68fb      	ldr	r3, [r7, #12]
   10b92:	3b01      	subs	r3, #1
   10b94:	461a      	mov	r2, r3
   10b96:	f04f 0300 	mov.w	r3, #0
   10b9a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   10b9e:	7f3b      	ldrb	r3, [r7, #28]
   10ba0:	2b00      	cmp	r3, #0
   10ba2:	d006      	beq.n	10bb2 <k_ticks_to_ms_floor64+0x106>
			off = rdivisor / 2U;
   10ba4:	68fb      	ldr	r3, [r7, #12]
   10ba6:	085b      	lsrs	r3, r3, #1
   10ba8:	461a      	mov	r2, r3
   10baa:	f04f 0300 	mov.w	r3, #0
   10bae:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   10bb2:	7ebb      	ldrb	r3, [r7, #26]
   10bb4:	2b00      	cmp	r3, #0
   10bb6:	d02a      	beq.n	10c0e <k_ticks_to_ms_floor64+0x162>
		t += off;
   10bb8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10bbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   10bc0:	1884      	adds	r4, r0, r2
   10bc2:	eb41 0503 	adc.w	r5, r1, r3
   10bc6:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   10bca:	7fbb      	ldrb	r3, [r7, #30]
   10bcc:	2b00      	cmp	r3, #0
   10bce:	d010      	beq.n	10bf2 <k_ticks_to_ms_floor64+0x146>
   10bd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   10bd4:	2b01      	cmp	r3, #1
   10bd6:	bf08      	it	eq
   10bd8:	2a00      	cmpeq	r2, #0
   10bda:	d20a      	bcs.n	10bf2 <k_ticks_to_ms_floor64+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
   10bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   10bde:	6a79      	ldr	r1, [r7, #36]	; 0x24
   10be0:	6a3b      	ldr	r3, [r7, #32]
   10be2:	fbb1 f3f3 	udiv	r3, r1, r3
   10be6:	fbb2 f3f3 	udiv	r3, r2, r3
   10bea:	461a      	mov	r2, r3
   10bec:	f04f 0300 	mov.w	r3, #0
   10bf0:	e07a      	b.n	10ce8 <k_ticks_to_ms_floor64+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
   10bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10bf4:	6a3b      	ldr	r3, [r7, #32]
   10bf6:	fbb2 f3f3 	udiv	r3, r2, r3
   10bfa:	461a      	mov	r2, r3
   10bfc:	f04f 0300 	mov.w	r3, #0
   10c00:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   10c04:	f7ef fa9e 	bl	144 <__aeabi_uldivmod>
   10c08:	4602      	mov	r2, r0
   10c0a:	460b      	mov	r3, r1
   10c0c:	e06c      	b.n	10ce8 <k_ticks_to_ms_floor64+0x23c>
	} else if (mul_ratio) {
   10c0e:	7efb      	ldrb	r3, [r7, #27]
   10c10:	2b00      	cmp	r3, #0
   10c12:	d021      	beq.n	10c58 <k_ticks_to_ms_floor64+0x1ac>
		if (result32) {
   10c14:	7fbb      	ldrb	r3, [r7, #30]
   10c16:	2b00      	cmp	r3, #0
   10c18:	d00a      	beq.n	10c30 <k_ticks_to_ms_floor64+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
   10c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10c1c:	6a39      	ldr	r1, [r7, #32]
   10c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   10c20:	fbb1 f2f2 	udiv	r2, r1, r2
   10c24:	fb02 f303 	mul.w	r3, r2, r3
   10c28:	461a      	mov	r2, r3
   10c2a:	f04f 0300 	mov.w	r3, #0
   10c2e:	e05b      	b.n	10ce8 <k_ticks_to_ms_floor64+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
   10c30:	6a3a      	ldr	r2, [r7, #32]
   10c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10c34:	fbb2 f3f3 	udiv	r3, r2, r3
   10c38:	461a      	mov	r2, r3
   10c3a:	f04f 0300 	mov.w	r3, #0
   10c3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   10c40:	fb03 f001 	mul.w	r0, r3, r1
   10c44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   10c46:	fb02 f101 	mul.w	r1, r2, r1
   10c4a:	4401      	add	r1, r0
   10c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10c4e:	fba0 2302 	umull	r2, r3, r0, r2
   10c52:	4419      	add	r1, r3
   10c54:	460b      	mov	r3, r1
   10c56:	e047      	b.n	10ce8 <k_ticks_to_ms_floor64+0x23c>
		if (result32) {
   10c58:	7fbb      	ldrb	r3, [r7, #30]
   10c5a:	2b00      	cmp	r3, #0
   10c5c:	d024      	beq.n	10ca8 <k_ticks_to_ms_floor64+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   10c5e:	6a3b      	ldr	r3, [r7, #32]
   10c60:	461a      	mov	r2, r3
   10c62:	f04f 0300 	mov.w	r3, #0
   10c66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   10c68:	fb03 f001 	mul.w	r0, r3, r1
   10c6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   10c6e:	fb02 f101 	mul.w	r1, r2, r1
   10c72:	4401      	add	r1, r0
   10c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10c76:	fba0 2302 	umull	r2, r3, r0, r2
   10c7a:	4419      	add	r1, r3
   10c7c:	460b      	mov	r3, r1
   10c7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   10c82:	eb12 0a00 	adds.w	sl, r2, r0
   10c86:	eb43 0b01 	adc.w	fp, r3, r1
   10c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10c8c:	461a      	mov	r2, r3
   10c8e:	f04f 0300 	mov.w	r3, #0
   10c92:	4650      	mov	r0, sl
   10c94:	4659      	mov	r1, fp
   10c96:	f7ef fa55 	bl	144 <__aeabi_uldivmod>
   10c9a:	4602      	mov	r2, r0
   10c9c:	460b      	mov	r3, r1
   10c9e:	4613      	mov	r3, r2
   10ca0:	461a      	mov	r2, r3
   10ca2:	f04f 0300 	mov.w	r3, #0
   10ca6:	e01f      	b.n	10ce8 <k_ticks_to_ms_floor64+0x23c>
			return (t * to_hz + off) / from_hz;
   10ca8:	6a3b      	ldr	r3, [r7, #32]
   10caa:	461a      	mov	r2, r3
   10cac:	f04f 0300 	mov.w	r3, #0
   10cb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   10cb2:	fb03 f001 	mul.w	r0, r3, r1
   10cb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   10cb8:	fb02 f101 	mul.w	r1, r2, r1
   10cbc:	4401      	add	r1, r0
   10cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10cc0:	fba0 2302 	umull	r2, r3, r0, r2
   10cc4:	4419      	add	r1, r3
   10cc6:	460b      	mov	r3, r1
   10cc8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   10ccc:	eb12 0800 	adds.w	r8, r2, r0
   10cd0:	eb43 0901 	adc.w	r9, r3, r1
   10cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10cd6:	461a      	mov	r2, r3
   10cd8:	f04f 0300 	mov.w	r3, #0
   10cdc:	4640      	mov	r0, r8
   10cde:	4649      	mov	r1, r9
   10ce0:	f7ef fa30 	bl	144 <__aeabi_uldivmod>
   10ce4:	4602      	mov	r2, r0
   10ce6:	460b      	mov	r3, r1
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, false, false, false);
}
   10ce8:	4610      	mov	r0, r2
   10cea:	4619      	mov	r1, r3
   10cec:	3730      	adds	r7, #48	; 0x30
   10cee:	46bd      	mov	sp, r7
   10cf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

00010cf4 <k_uptime_get>:
 *    @kconfig{CONFIG_SYS_CLOCK_TICKS_PER_SEC} config option.
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
   10cf4:	b580      	push	{r7, lr}
   10cf6:	af00      	add	r7, sp, #0
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   10cf8:	f000 f86e 	bl	10dd8 <k_uptime_ticks>
   10cfc:	4602      	mov	r2, r0
   10cfe:	460b      	mov	r3, r1
   10d00:	4610      	mov	r0, r2
   10d02:	4619      	mov	r1, r3
   10d04:	f7ff fed2 	bl	10aac <k_ticks_to_ms_floor64>
   10d08:	4602      	mov	r2, r0
   10d0a:	460b      	mov	r3, r1
}
   10d0c:	4610      	mov	r0, r2
   10d0e:	4619      	mov	r1, r3
   10d10:	bd80      	pop	{r7, pc}

00010d12 <k_uptime_get_32>:
 *    @kconfig{CONFIG_SYS_CLOCK_TICKS_PER_SEC} config option
 *
 * @return The low 32 bits of the current uptime, in milliseconds.
 */
static inline uint32_t k_uptime_get_32(void)
{
   10d12:	b580      	push	{r7, lr}
   10d14:	af00      	add	r7, sp, #0
	return (uint32_t)k_uptime_get();
   10d16:	f7ff ffed 	bl	10cf4 <k_uptime_get>
   10d1a:	4602      	mov	r2, r0
   10d1c:	460b      	mov	r3, r1
   10d1e:	4613      	mov	r3, r2
}
   10d20:	4618      	mov	r0, r3
   10d22:	bd80      	pop	{r7, pc}

00010d24 <k_cycle_get_32>:
 * clock.
 *
 * @return Current hardware clock up-counter (in cycles).
 */
static inline uint32_t k_cycle_get_32(void)
{
   10d24:	b580      	push	{r7, lr}
   10d26:	af00      	add	r7, sp, #0
	return arch_k_cycle_get_32();
   10d28:	f7ff fd8d 	bl	10846 <arch_k_cycle_get_32>
   10d2c:	4603      	mov	r3, r0
}
   10d2e:	4618      	mov	r0, r3
   10d30:	bd80      	pop	{r7, pc}

00010d32 <k_thread_create>:
{
   10d32:	b580      	push	{r7, lr}
   10d34:	b08c      	sub	sp, #48	; 0x30
   10d36:	af08      	add	r7, sp, #32
   10d38:	60f8      	str	r0, [r7, #12]
   10d3a:	60b9      	str	r1, [r7, #8]
   10d3c:	607a      	str	r2, [r7, #4]
   10d3e:	603b      	str	r3, [r7, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10d40:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
   10d44:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10d4a:	9304      	str	r3, [sp, #16]
   10d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10d4e:	9303      	str	r3, [sp, #12]
   10d50:	6a3b      	ldr	r3, [r7, #32]
   10d52:	9302      	str	r3, [sp, #8]
   10d54:	69fb      	ldr	r3, [r7, #28]
   10d56:	9301      	str	r3, [sp, #4]
   10d58:	69bb      	ldr	r3, [r7, #24]
   10d5a:	9300      	str	r3, [sp, #0]
   10d5c:	683b      	ldr	r3, [r7, #0]
   10d5e:	687a      	ldr	r2, [r7, #4]
   10d60:	68b9      	ldr	r1, [r7, #8]
   10d62:	68f8      	ldr	r0, [r7, #12]
   10d64:	f7fa fd04 	bl	b770 <z_impl_k_thread_create>
   10d68:	4603      	mov	r3, r0
}
   10d6a:	4618      	mov	r0, r3
   10d6c:	3710      	adds	r7, #16
   10d6e:	46bd      	mov	sp, r7
   10d70:	bd80      	pop	{r7, pc}

00010d72 <k_current_get>:
{
   10d72:	b580      	push	{r7, lr}
   10d74:	af00      	add	r7, sp, #0
	return z_impl_k_current_get();
   10d76:	f7fd fc21 	bl	e5bc <z_impl_k_current_get>
   10d7a:	4603      	mov	r3, r0
}
   10d7c:	4618      	mov	r0, r3
   10d7e:	bd80      	pop	{r7, pc}

00010d80 <k_thread_name_set>:
}


extern int z_impl_k_thread_name_set(k_tid_t thread, const char * str);
static inline int k_thread_name_set(k_tid_t thread, const char * str)
{
   10d80:	b580      	push	{r7, lr}
   10d82:	b082      	sub	sp, #8
   10d84:	af00      	add	r7, sp, #0
   10d86:	6078      	str	r0, [r7, #4]
   10d88:	6039      	str	r1, [r7, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
   10d8a:	6839      	ldr	r1, [r7, #0]
   10d8c:	6878      	ldr	r0, [r7, #4]
   10d8e:	f004 ff3d 	bl	15c0c <z_impl_k_thread_name_set>
   10d92:	4603      	mov	r3, r0
}
   10d94:	4618      	mov	r0, r3
   10d96:	3708      	adds	r7, #8
   10d98:	46bd      	mov	sp, r7
   10d9a:	bd80      	pop	{r7, pc}

00010d9c <k_timer_start>:
}


extern void z_impl_k_timer_start(struct k_timer * timer, k_timeout_t duration, k_timeout_t period);
static inline void k_timer_start(struct k_timer * timer, k_timeout_t duration, k_timeout_t period)
{
   10d9c:	b580      	push	{r7, lr}
   10d9e:	b086      	sub	sp, #24
   10da0:	af02      	add	r7, sp, #8
   10da2:	60f8      	str	r0, [r7, #12]
   10da4:	e9c7 2300 	strd	r2, r3, [r7]
		arch_syscall_invoke5(*(uintptr_t *)&timer, parm0.split.lo, parm0.split.hi, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
   10da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   10dac:	e9cd 2300 	strd	r2, r3, [sp]
   10db0:	e9d7 2300 	ldrd	r2, r3, [r7]
   10db4:	68f8      	ldr	r0, [r7, #12]
   10db6:	f7fe faa5 	bl	f304 <z_impl_k_timer_start>
}
   10dba:	bf00      	nop
   10dbc:	3710      	adds	r7, #16
   10dbe:	46bd      	mov	sp, r7
   10dc0:	bd80      	pop	{r7, pc}

00010dc2 <k_timer_stop>:


extern void z_impl_k_timer_stop(struct k_timer * timer);
static inline void k_timer_stop(struct k_timer * timer)
{
   10dc2:	b580      	push	{r7, lr}
   10dc4:	b082      	sub	sp, #8
   10dc6:	af00      	add	r7, sp, #0
   10dc8:	6078      	str	r0, [r7, #4]
		arch_syscall_invoke1(*(uintptr_t *)&timer, K_SYSCALL_K_TIMER_STOP);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_stop(timer);
   10dca:	6878      	ldr	r0, [r7, #4]
   10dcc:	f005 ffcc 	bl	16d68 <z_impl_k_timer_stop>
}
   10dd0:	bf00      	nop
   10dd2:	3708      	adds	r7, #8
   10dd4:	46bd      	mov	sp, r7
   10dd6:	bd80      	pop	{r7, pc}

00010dd8 <k_uptime_ticks>:
}


extern int64_t z_impl_k_uptime_ticks(void);
static inline int64_t k_uptime_ticks(void)
{
   10dd8:	b580      	push	{r7, lr}
   10dda:	af00      	add	r7, sp, #0
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   10ddc:	f005 ff06 	bl	16bec <z_impl_k_uptime_ticks>
   10de0:	4602      	mov	r2, r0
   10de2:	460b      	mov	r3, r1
}
   10de4:	4610      	mov	r0, r2
   10de6:	4619      	mov	r1, r3
   10de8:	bd80      	pop	{r7, pc}

00010dea <k_sem_take>:
}


extern int z_impl_k_sem_take(struct k_sem * sem, k_timeout_t timeout);
static inline int k_sem_take(struct k_sem * sem, k_timeout_t timeout)
{
   10dea:	b580      	push	{r7, lr}
   10dec:	b084      	sub	sp, #16
   10dee:	af00      	add	r7, sp, #0
   10df0:	60f8      	str	r0, [r7, #12]
   10df2:	e9c7 2300 	strd	r2, r3, [r7]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   10df6:	e9d7 2300 	ldrd	r2, r3, [r7]
   10dfa:	68f8      	ldr	r0, [r7, #12]
   10dfc:	f7fb fcc6 	bl	c78c <z_impl_k_sem_take>
   10e00:	4603      	mov	r3, r0
}
   10e02:	4618      	mov	r0, r3
   10e04:	3710      	adds	r7, #16
   10e06:	46bd      	mov	sp, r7
   10e08:	bd80      	pop	{r7, pc}

00010e0a <k_sem_give>:


extern void z_impl_k_sem_give(struct k_sem * sem);
static inline void k_sem_give(struct k_sem * sem)
{
   10e0a:	b580      	push	{r7, lr}
   10e0c:	b082      	sub	sp, #8
   10e0e:	af00      	add	r7, sp, #0
   10e10:	6078      	str	r0, [r7, #4]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   10e12:	6878      	ldr	r0, [r7, #4]
   10e14:	f7fb fc54 	bl	c6c0 <z_impl_k_sem_give>
}
   10e18:	bf00      	nop
   10e1a:	3708      	adds	r7, #8
   10e1c:	46bd      	mov	sp, r7
   10e1e:	bd80      	pop	{r7, pc}

00010e20 <log_process>:
}


extern bool z_impl_log_process(bool bypass);
static inline bool log_process(bool bypass)
{
   10e20:	b580      	push	{r7, lr}
   10e22:	b082      	sub	sp, #8
   10e24:	af00      	add	r7, sp, #0
   10e26:	4603      	mov	r3, r0
   10e28:	71fb      	strb	r3, [r7, #7]
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   10e2a:	79fb      	ldrb	r3, [r7, #7]
   10e2c:	4618      	mov	r0, r3
   10e2e:	f7f1 fe13 	bl	2a58 <z_impl_log_process>
   10e32:	4603      	mov	r3, r0
}
   10e34:	4618      	mov	r0, r3
   10e36:	3708      	adds	r7, #8
   10e38:	46bd      	mov	sp, r7
   10e3a:	bd80      	pop	{r7, pc}

00010e3c <isalpha>:
{
   10e3c:	b480      	push	{r7}
   10e3e:	b083      	sub	sp, #12
   10e40:	af00      	add	r7, sp, #0
   10e42:	6078      	str	r0, [r7, #4]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   10e44:	687b      	ldr	r3, [r7, #4]
   10e46:	f043 0320 	orr.w	r3, r3, #32
   10e4a:	3b61      	subs	r3, #97	; 0x61
   10e4c:	2b19      	cmp	r3, #25
   10e4e:	bf94      	ite	ls
   10e50:	2301      	movls	r3, #1
   10e52:	2300      	movhi	r3, #0
   10e54:	b2db      	uxtb	r3, r3
}
   10e56:	4618      	mov	r0, r3
   10e58:	370c      	adds	r7, #12
   10e5a:	46bd      	mov	sp, r7
   10e5c:	bc80      	pop	{r7}
   10e5e:	4770      	bx	lr

00010e60 <dummy_timestamp>:
{
   10e60:	b480      	push	{r7}
   10e62:	af00      	add	r7, sp, #0
	return 0;
   10e64:	2300      	movs	r3, #0
}
   10e66:	4618      	mov	r0, r3
   10e68:	46bd      	mov	sp, r7
   10e6a:	bc80      	pop	{r7}
   10e6c:	4770      	bx	lr

00010e6e <log_0>:
{
   10e6e:	b580      	push	{r7, lr}
   10e70:	b084      	sub	sp, #16
   10e72:	af00      	add	r7, sp, #0
   10e74:	6078      	str	r0, [r7, #4]
   10e76:	8039      	strh	r1, [r7, #0]
		struct log_msg *msg = log_msg_create_0(str);
   10e78:	6878      	ldr	r0, [r7, #4]
   10e7a:	f7ff fc72 	bl	10762 <log_msg_create_0>
   10e7e:	60f8      	str	r0, [r7, #12]
		if (msg == NULL) {
   10e80:	68fb      	ldr	r3, [r7, #12]
   10e82:	2b00      	cmp	r3, #0
   10e84:	d004      	beq.n	10e90 <log_0+0x22>
		msg_finalize(msg, src_level);
   10e86:	8839      	ldrh	r1, [r7, #0]
   10e88:	68f8      	ldr	r0, [r7, #12]
   10e8a:	f7f1 fc65 	bl	2758 <msg_finalize>
   10e8e:	e000      	b.n	10e92 <log_0+0x24>
			return;
   10e90:	bf00      	nop
}
   10e92:	3710      	adds	r7, #16
   10e94:	46bd      	mov	sp, r7
   10e96:	bd80      	pop	{r7, pc}

00010e98 <log_1>:
{
   10e98:	b580      	push	{r7, lr}
   10e9a:	b086      	sub	sp, #24
   10e9c:	af00      	add	r7, sp, #0
   10e9e:	60f8      	str	r0, [r7, #12]
   10ea0:	60b9      	str	r1, [r7, #8]
   10ea2:	80ba      	strh	r2, [r7, #4]
		struct log_msg *msg = log_msg_create_1(str, arg0);
   10ea4:	68b9      	ldr	r1, [r7, #8]
   10ea6:	68f8      	ldr	r0, [r7, #12]
   10ea8:	f7ff fc6d 	bl	10786 <log_msg_create_1>
   10eac:	6178      	str	r0, [r7, #20]
		if (msg == NULL) {
   10eae:	697b      	ldr	r3, [r7, #20]
   10eb0:	2b00      	cmp	r3, #0
   10eb2:	d004      	beq.n	10ebe <log_1+0x26>
		msg_finalize(msg, src_level);
   10eb4:	88b9      	ldrh	r1, [r7, #4]
   10eb6:	6978      	ldr	r0, [r7, #20]
   10eb8:	f7f1 fc4e 	bl	2758 <msg_finalize>
   10ebc:	e000      	b.n	10ec0 <log_1+0x28>
			return;
   10ebe:	bf00      	nop
}
   10ec0:	3718      	adds	r7, #24
   10ec2:	46bd      	mov	sp, r7
   10ec4:	bd80      	pop	{r7, pc}

00010ec6 <log_2>:
{
   10ec6:	b580      	push	{r7, lr}
   10ec8:	b086      	sub	sp, #24
   10eca:	af00      	add	r7, sp, #0
   10ecc:	60f8      	str	r0, [r7, #12]
   10ece:	60b9      	str	r1, [r7, #8]
   10ed0:	607a      	str	r2, [r7, #4]
   10ed2:	803b      	strh	r3, [r7, #0]
		struct log_msg *msg = log_msg_create_2(str, arg0, arg1);
   10ed4:	687a      	ldr	r2, [r7, #4]
   10ed6:	68b9      	ldr	r1, [r7, #8]
   10ed8:	68f8      	ldr	r0, [r7, #12]
   10eda:	f7ff fc70 	bl	107be <log_msg_create_2>
   10ede:	6178      	str	r0, [r7, #20]
		if (msg == NULL) {
   10ee0:	697b      	ldr	r3, [r7, #20]
   10ee2:	2b00      	cmp	r3, #0
   10ee4:	d004      	beq.n	10ef0 <log_2+0x2a>
		msg_finalize(msg, src_level);
   10ee6:	8839      	ldrh	r1, [r7, #0]
   10ee8:	6978      	ldr	r0, [r7, #20]
   10eea:	f7f1 fc35 	bl	2758 <msg_finalize>
   10eee:	e000      	b.n	10ef2 <log_2+0x2c>
			return;
   10ef0:	bf00      	nop
}
   10ef2:	3718      	adds	r7, #24
   10ef4:	46bd      	mov	sp, r7
   10ef6:	bd80      	pop	{r7, pc}

00010ef8 <log_3>:
{
   10ef8:	b580      	push	{r7, lr}
   10efa:	b086      	sub	sp, #24
   10efc:	af00      	add	r7, sp, #0
   10efe:	60f8      	str	r0, [r7, #12]
   10f00:	60b9      	str	r1, [r7, #8]
   10f02:	607a      	str	r2, [r7, #4]
   10f04:	603b      	str	r3, [r7, #0]
		struct log_msg *msg = log_msg_create_3(str, arg0, arg1, arg2);
   10f06:	683b      	ldr	r3, [r7, #0]
   10f08:	687a      	ldr	r2, [r7, #4]
   10f0a:	68b9      	ldr	r1, [r7, #8]
   10f0c:	68f8      	ldr	r0, [r7, #12]
   10f0e:	f7ff fc76 	bl	107fe <log_msg_create_3>
   10f12:	6178      	str	r0, [r7, #20]
		if (msg == NULL) {
   10f14:	697b      	ldr	r3, [r7, #20]
   10f16:	2b00      	cmp	r3, #0
   10f18:	d004      	beq.n	10f24 <log_3+0x2c>
		msg_finalize(msg, src_level);
   10f1a:	8c39      	ldrh	r1, [r7, #32]
   10f1c:	6978      	ldr	r0, [r7, #20]
   10f1e:	f7f1 fc1b 	bl	2758 <msg_finalize>
   10f22:	e000      	b.n	10f26 <log_3+0x2e>
			return;
   10f24:	bf00      	nop
}
   10f26:	3718      	adds	r7, #24
   10f28:	46bd      	mov	sp, r7
   10f2a:	bd80      	pop	{r7, pc}

00010f2c <log_n>:
{
   10f2c:	b580      	push	{r7, lr}
   10f2e:	b086      	sub	sp, #24
   10f30:	af00      	add	r7, sp, #0
   10f32:	60f8      	str	r0, [r7, #12]
   10f34:	60b9      	str	r1, [r7, #8]
   10f36:	607a      	str	r2, [r7, #4]
   10f38:	803b      	strh	r3, [r7, #0]
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   10f3a:	687a      	ldr	r2, [r7, #4]
   10f3c:	68b9      	ldr	r1, [r7, #8]
   10f3e:	68f8      	ldr	r0, [r7, #12]
   10f40:	f7f2 f810 	bl	2f64 <log_msg_create_n>
   10f44:	6178      	str	r0, [r7, #20]
		if (msg == NULL) {
   10f46:	697b      	ldr	r3, [r7, #20]
   10f48:	2b00      	cmp	r3, #0
   10f4a:	d004      	beq.n	10f56 <log_n+0x2a>
		msg_finalize(msg, src_level);
   10f4c:	8839      	ldrh	r1, [r7, #0]
   10f4e:	6978      	ldr	r0, [r7, #20]
   10f50:	f7f1 fc02 	bl	2758 <msg_finalize>
   10f54:	e000      	b.n	10f58 <log_n+0x2c>
			return;
   10f56:	bf00      	nop
}
   10f58:	3718      	adds	r7, #24
   10f5a:	46bd      	mov	sp, r7
   10f5c:	bd80      	pop	{r7, pc}

00010f5e <default_get_timestamp>:
{
   10f5e:	b580      	push	{r7, lr}
   10f60:	af00      	add	r7, sp, #0
		sys_clock_tick_get() : k_cycle_get_32();
   10f62:	f7ff fedf 	bl	10d24 <k_cycle_get_32>
   10f66:	4603      	mov	r3, r0
}
   10f68:	4618      	mov	r0, r3
   10f6a:	bd80      	pop	{r7, pc}

00010f6c <default_lf_get_timestamp>:
{
   10f6c:	b580      	push	{r7, lr}
   10f6e:	af00      	add	r7, sp, #0
		k_uptime_get() : k_uptime_get_32();
   10f70:	f7ff fecf 	bl	10d12 <k_uptime_get_32>
   10f74:	4603      	mov	r3, r0
}
   10f76:	4618      	mov	r0, r3
   10f78:	bd80      	pop	{r7, pc}

00010f7a <msg_filter_check>:
{
   10f7a:	b480      	push	{r7}
   10f7c:	b083      	sub	sp, #12
   10f7e:	af00      	add	r7, sp, #0
   10f80:	6078      	str	r0, [r7, #4]
   10f82:	6039      	str	r1, [r7, #0]
		return true;
   10f84:	2301      	movs	r3, #1
}
   10f86:	4618      	mov	r0, r3
   10f88:	370c      	adds	r7, #12
   10f8a:	46bd      	mov	sp, r7
   10f8c:	bc80      	pop	{r7}
   10f8e:	4770      	bx	lr

00010f90 <dropped_notify>:
{
   10f90:	b580      	push	{r7, lr}
   10f92:	b084      	sub	sp, #16
   10f94:	af00      	add	r7, sp, #0
	uint32_t dropped = z_log_dropped_read_and_clear();
   10f96:	f7f1 fda5 	bl	2ae4 <z_log_dropped_read_and_clear>
   10f9a:	60b8      	str	r0, [r7, #8]
	for (int i = 0; i < log_backend_count_get(); i++) {
   10f9c:	2300      	movs	r3, #0
   10f9e:	60fb      	str	r3, [r7, #12]
   10fa0:	e011      	b.n	10fc6 <dropped_notify+0x36>
		struct log_backend const *backend = log_backend_get(i);
   10fa2:	68fb      	ldr	r3, [r7, #12]
   10fa4:	4618      	mov	r0, r3
   10fa6:	f7f1 fa2d 	bl	2404 <log_backend_get>
   10faa:	6078      	str	r0, [r7, #4]
		if (log_backend_is_active(backend)) {
   10fac:	6878      	ldr	r0, [r7, #4]
   10fae:	f7f1 fa6d 	bl	248c <log_backend_is_active>
   10fb2:	4603      	mov	r3, r0
   10fb4:	2b00      	cmp	r3, #0
   10fb6:	d003      	beq.n	10fc0 <dropped_notify+0x30>
			log_backend_dropped(backend, dropped);
   10fb8:	68b9      	ldr	r1, [r7, #8]
   10fba:	6878      	ldr	r0, [r7, #4]
   10fbc:	f7f1 f9b8 	bl	2330 <log_backend_dropped>
	for (int i = 0; i < log_backend_count_get(); i++) {
   10fc0:	68fb      	ldr	r3, [r7, #12]
   10fc2:	3301      	adds	r3, #1
   10fc4:	60fb      	str	r3, [r7, #12]
   10fc6:	f7f1 fa2d 	bl	2424 <log_backend_count_get>
   10fca:	4602      	mov	r2, r0
   10fcc:	68fb      	ldr	r3, [r7, #12]
   10fce:	4293      	cmp	r3, r2
   10fd0:	dbe7      	blt.n	10fa2 <dropped_notify+0x12>
}
   10fd2:	bf00      	nop
   10fd4:	bf00      	nop
   10fd6:	3710      	adds	r7, #16
   10fd8:	46bd      	mov	sp, r7
   10fda:	bd80      	pop	{r7, pc}

00010fdc <log_source_name_get>:
{
   10fdc:	b580      	push	{r7, lr}
   10fde:	b082      	sub	sp, #8
   10fe0:	af00      	add	r7, sp, #0
   10fe2:	6078      	str	r0, [r7, #4]
   10fe4:	6039      	str	r1, [r7, #0]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   10fe6:	f7f1 f967 	bl	22b8 <log_sources_count>
   10fea:	4602      	mov	r2, r0
   10fec:	683b      	ldr	r3, [r7, #0]
   10fee:	4293      	cmp	r3, r2
   10ff0:	d204      	bcs.n	10ffc <log_source_name_get+0x20>
   10ff2:	6838      	ldr	r0, [r7, #0]
   10ff4:	f7f1 f940 	bl	2278 <log_name_get>
   10ff8:	4603      	mov	r3, r0
   10ffa:	e000      	b.n	10ffe <log_source_name_get+0x22>
   10ffc:	2300      	movs	r3, #0
}
   10ffe:	4618      	mov	r0, r3
   11000:	3708      	adds	r7, #8
   11002:	46bd      	mov	sp, r7
   11004:	bd80      	pop	{r7, pc}

00011006 <backend_filter_set>:
{
   11006:	b480      	push	{r7}
   11008:	b083      	sub	sp, #12
   1100a:	af00      	add	r7, sp, #0
   1100c:	6078      	str	r0, [r7, #4]
   1100e:	6039      	str	r1, [r7, #0]
}
   11010:	bf00      	nop
   11012:	370c      	adds	r7, #12
   11014:	46bd      	mov	sp, r7
   11016:	bc80      	pop	{r7}
   11018:	4770      	bx	lr

0001101a <atomic_add>:
{
   1101a:	b480      	push	{r7}
   1101c:	b083      	sub	sp, #12
   1101e:	af00      	add	r7, sp, #0
   11020:	6078      	str	r0, [r7, #4]
   11022:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11024:	683a      	ldr	r2, [r7, #0]
   11026:	687b      	ldr	r3, [r7, #4]
   11028:	e8d3 1fef 	ldaex	r1, [r3]
   1102c:	eb01 0002 	add.w	r0, r1, r2
   11030:	e8c3 0fec 	stlex	ip, r0, [r3]
   11034:	f1bc 0f00 	cmp.w	ip, #0
   11038:	d1f6      	bne.n	11028 <atomic_add+0xe>
   1103a:	460b      	mov	r3, r1
}
   1103c:	4618      	mov	r0, r3
   1103e:	370c      	adds	r7, #12
   11040:	46bd      	mov	sp, r7
   11042:	bc80      	pop	{r7}
   11044:	4770      	bx	lr

00011046 <atomic_sub>:
{
   11046:	b480      	push	{r7}
   11048:	b083      	sub	sp, #12
   1104a:	af00      	add	r7, sp, #0
   1104c:	6078      	str	r0, [r7, #4]
   1104e:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11050:	683a      	ldr	r2, [r7, #0]
   11052:	687b      	ldr	r3, [r7, #4]
   11054:	e8d3 1fef 	ldaex	r1, [r3]
   11058:	eba1 0002 	sub.w	r0, r1, r2
   1105c:	e8c3 0fec 	stlex	ip, r0, [r3]
   11060:	f1bc 0f00 	cmp.w	ip, #0
   11064:	d1f6      	bne.n	11054 <atomic_sub+0xe>
   11066:	460b      	mov	r3, r1
}
   11068:	4618      	mov	r0, r3
   1106a:	370c      	adds	r7, #12
   1106c:	46bd      	mov	sp, r7
   1106e:	bc80      	pop	{r7}
   11070:	4770      	bx	lr

00011072 <atomic_inc>:
{
   11072:	b580      	push	{r7, lr}
   11074:	b082      	sub	sp, #8
   11076:	af00      	add	r7, sp, #0
   11078:	6078      	str	r0, [r7, #4]
	return atomic_add(target, 1);
   1107a:	2101      	movs	r1, #1
   1107c:	6878      	ldr	r0, [r7, #4]
   1107e:	f7ff ffcc 	bl	1101a <atomic_add>
   11082:	4603      	mov	r3, r0
}
   11084:	4618      	mov	r0, r3
   11086:	3708      	adds	r7, #8
   11088:	46bd      	mov	sp, r7
   1108a:	bd80      	pop	{r7, pc}

0001108c <atomic_dec>:
{
   1108c:	b580      	push	{r7, lr}
   1108e:	b082      	sub	sp, #8
   11090:	af00      	add	r7, sp, #0
   11092:	6078      	str	r0, [r7, #4]
	return atomic_sub(target, 1);
   11094:	2101      	movs	r1, #1
   11096:	6878      	ldr	r0, [r7, #4]
   11098:	f7ff ffd5 	bl	11046 <atomic_sub>
   1109c:	4603      	mov	r3, r0
}
   1109e:	4618      	mov	r0, r3
   110a0:	3708      	adds	r7, #8
   110a2:	46bd      	mov	sp, r7
   110a4:	bd80      	pop	{r7, pc}

000110a6 <k_ms_to_ticks_ceil64>:
{
   110a6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   110aa:	b08c      	sub	sp, #48	; 0x30
   110ac:	af00      	add	r7, sp, #0
   110ae:	e9c7 0100 	strd	r0, r1, [r7]
   110b2:	e9d7 2300 	ldrd	r2, r3, [r7]
   110b6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   110ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   110be:	627b      	str	r3, [r7, #36]	; 0x24
   110c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   110c4:	623b      	str	r3, [r7, #32]
   110c6:	2301      	movs	r3, #1
   110c8:	77fb      	strb	r3, [r7, #31]
   110ca:	2300      	movs	r3, #0
   110cc:	77bb      	strb	r3, [r7, #30]
   110ce:	2301      	movs	r3, #1
   110d0:	777b      	strb	r3, [r7, #29]
   110d2:	2300      	movs	r3, #0
   110d4:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   110d6:	7ffb      	ldrb	r3, [r7, #31]
   110d8:	2b00      	cmp	r3, #0
   110da:	d00f      	beq.n	110fc <k_ms_to_ticks_ceil64+0x56>
	bool mul_ratio = const_hz &&
   110dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   110de:	6a3b      	ldr	r3, [r7, #32]
   110e0:	429a      	cmp	r2, r3
   110e2:	d20b      	bcs.n	110fc <k_ms_to_ticks_ceil64+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   110e4:	6a3b      	ldr	r3, [r7, #32]
   110e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   110e8:	fbb3 f2f2 	udiv	r2, r3, r2
   110ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
   110ee:	fb01 f202 	mul.w	r2, r1, r2
   110f2:	1a9b      	subs	r3, r3, r2
   110f4:	2b00      	cmp	r3, #0
   110f6:	d101      	bne.n	110fc <k_ms_to_ticks_ceil64+0x56>
   110f8:	2301      	movs	r3, #1
   110fa:	e000      	b.n	110fe <k_ms_to_ticks_ceil64+0x58>
   110fc:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   110fe:	76fb      	strb	r3, [r7, #27]
   11100:	7efb      	ldrb	r3, [r7, #27]
   11102:	f003 0301 	and.w	r3, r3, #1
   11106:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   11108:	7ffb      	ldrb	r3, [r7, #31]
   1110a:	2b00      	cmp	r3, #0
   1110c:	d00f      	beq.n	1112e <k_ms_to_ticks_ceil64+0x88>
	bool div_ratio = const_hz &&
   1110e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11110:	6a3b      	ldr	r3, [r7, #32]
   11112:	429a      	cmp	r2, r3
   11114:	d90b      	bls.n	1112e <k_ms_to_ticks_ceil64+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   11116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11118:	6a3a      	ldr	r2, [r7, #32]
   1111a:	fbb3 f2f2 	udiv	r2, r3, r2
   1111e:	6a39      	ldr	r1, [r7, #32]
   11120:	fb01 f202 	mul.w	r2, r1, r2
   11124:	1a9b      	subs	r3, r3, r2
   11126:	2b00      	cmp	r3, #0
   11128:	d101      	bne.n	1112e <k_ms_to_ticks_ceil64+0x88>
   1112a:	2301      	movs	r3, #1
   1112c:	e000      	b.n	11130 <k_ms_to_ticks_ceil64+0x8a>
   1112e:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   11130:	76bb      	strb	r3, [r7, #26]
   11132:	7ebb      	ldrb	r3, [r7, #26]
   11134:	f003 0301 	and.w	r3, r3, #1
   11138:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   1113a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1113c:	6a3b      	ldr	r3, [r7, #32]
   1113e:	429a      	cmp	r2, r3
   11140:	d10a      	bne.n	11158 <k_ms_to_ticks_ceil64+0xb2>
		return result32 ? ((uint32_t)t) : t;
   11142:	7fbb      	ldrb	r3, [r7, #30]
   11144:	2b00      	cmp	r3, #0
   11146:	d004      	beq.n	11152 <k_ms_to_ticks_ceil64+0xac>
   11148:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1114a:	461a      	mov	r2, r3
   1114c:	f04f 0300 	mov.w	r3, #0
   11150:	e0c7      	b.n	112e2 <k_ms_to_ticks_ceil64+0x23c>
   11152:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   11156:	e0c4      	b.n	112e2 <k_ms_to_ticks_ceil64+0x23c>
	uint64_t off = 0;
   11158:	f04f 0200 	mov.w	r2, #0
   1115c:	f04f 0300 	mov.w	r3, #0
   11160:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   11164:	7efb      	ldrb	r3, [r7, #27]
   11166:	f083 0301 	eor.w	r3, r3, #1
   1116a:	b2db      	uxtb	r3, r3
   1116c:	2b00      	cmp	r3, #0
   1116e:	d01d      	beq.n	111ac <k_ms_to_ticks_ceil64+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   11170:	7ebb      	ldrb	r3, [r7, #26]
   11172:	2b00      	cmp	r3, #0
   11174:	d004      	beq.n	11180 <k_ms_to_ticks_ceil64+0xda>
   11176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11178:	6a3b      	ldr	r3, [r7, #32]
   1117a:	fbb2 f3f3 	udiv	r3, r2, r3
   1117e:	e000      	b.n	11182 <k_ms_to_ticks_ceil64+0xdc>
   11180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11182:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   11184:	7f7b      	ldrb	r3, [r7, #29]
   11186:	2b00      	cmp	r3, #0
   11188:	d006      	beq.n	11198 <k_ms_to_ticks_ceil64+0xf2>
			off = rdivisor - 1U;
   1118a:	68fb      	ldr	r3, [r7, #12]
   1118c:	3b01      	subs	r3, #1
   1118e:	461a      	mov	r2, r3
   11190:	f04f 0300 	mov.w	r3, #0
   11194:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   11198:	7f3b      	ldrb	r3, [r7, #28]
   1119a:	2b00      	cmp	r3, #0
   1119c:	d006      	beq.n	111ac <k_ms_to_ticks_ceil64+0x106>
			off = rdivisor / 2U;
   1119e:	68fb      	ldr	r3, [r7, #12]
   111a0:	085b      	lsrs	r3, r3, #1
   111a2:	461a      	mov	r2, r3
   111a4:	f04f 0300 	mov.w	r3, #0
   111a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   111ac:	7ebb      	ldrb	r3, [r7, #26]
   111ae:	2b00      	cmp	r3, #0
   111b0:	d02a      	beq.n	11208 <k_ms_to_ticks_ceil64+0x162>
		t += off;
   111b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   111b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   111ba:	1884      	adds	r4, r0, r2
   111bc:	eb41 0503 	adc.w	r5, r1, r3
   111c0:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   111c4:	7fbb      	ldrb	r3, [r7, #30]
   111c6:	2b00      	cmp	r3, #0
   111c8:	d010      	beq.n	111ec <k_ms_to_ticks_ceil64+0x146>
   111ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   111ce:	2b01      	cmp	r3, #1
   111d0:	bf08      	it	eq
   111d2:	2a00      	cmpeq	r2, #0
   111d4:	d20a      	bcs.n	111ec <k_ms_to_ticks_ceil64+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
   111d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   111d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
   111da:	6a3b      	ldr	r3, [r7, #32]
   111dc:	fbb1 f3f3 	udiv	r3, r1, r3
   111e0:	fbb2 f3f3 	udiv	r3, r2, r3
   111e4:	461a      	mov	r2, r3
   111e6:	f04f 0300 	mov.w	r3, #0
   111ea:	e07a      	b.n	112e2 <k_ms_to_ticks_ceil64+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
   111ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   111ee:	6a3b      	ldr	r3, [r7, #32]
   111f0:	fbb2 f3f3 	udiv	r3, r2, r3
   111f4:	461a      	mov	r2, r3
   111f6:	f04f 0300 	mov.w	r3, #0
   111fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   111fe:	f7ee ffa1 	bl	144 <__aeabi_uldivmod>
   11202:	4602      	mov	r2, r0
   11204:	460b      	mov	r3, r1
   11206:	e06c      	b.n	112e2 <k_ms_to_ticks_ceil64+0x23c>
	} else if (mul_ratio) {
   11208:	7efb      	ldrb	r3, [r7, #27]
   1120a:	2b00      	cmp	r3, #0
   1120c:	d021      	beq.n	11252 <k_ms_to_ticks_ceil64+0x1ac>
		if (result32) {
   1120e:	7fbb      	ldrb	r3, [r7, #30]
   11210:	2b00      	cmp	r3, #0
   11212:	d00a      	beq.n	1122a <k_ms_to_ticks_ceil64+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
   11214:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11216:	6a39      	ldr	r1, [r7, #32]
   11218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1121a:	fbb1 f2f2 	udiv	r2, r1, r2
   1121e:	fb02 f303 	mul.w	r3, r2, r3
   11222:	461a      	mov	r2, r3
   11224:	f04f 0300 	mov.w	r3, #0
   11228:	e05b      	b.n	112e2 <k_ms_to_ticks_ceil64+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
   1122a:	6a3a      	ldr	r2, [r7, #32]
   1122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1122e:	fbb2 f3f3 	udiv	r3, r2, r3
   11232:	461a      	mov	r2, r3
   11234:	f04f 0300 	mov.w	r3, #0
   11238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1123a:	fb03 f001 	mul.w	r0, r3, r1
   1123e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   11240:	fb02 f101 	mul.w	r1, r2, r1
   11244:	4401      	add	r1, r0
   11246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   11248:	fba0 2302 	umull	r2, r3, r0, r2
   1124c:	4419      	add	r1, r3
   1124e:	460b      	mov	r3, r1
   11250:	e047      	b.n	112e2 <k_ms_to_ticks_ceil64+0x23c>
		if (result32) {
   11252:	7fbb      	ldrb	r3, [r7, #30]
   11254:	2b00      	cmp	r3, #0
   11256:	d024      	beq.n	112a2 <k_ms_to_ticks_ceil64+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   11258:	6a3b      	ldr	r3, [r7, #32]
   1125a:	461a      	mov	r2, r3
   1125c:	f04f 0300 	mov.w	r3, #0
   11260:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11262:	fb03 f001 	mul.w	r0, r3, r1
   11266:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   11268:	fb02 f101 	mul.w	r1, r2, r1
   1126c:	4401      	add	r1, r0
   1126e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   11270:	fba0 2302 	umull	r2, r3, r0, r2
   11274:	4419      	add	r1, r3
   11276:	460b      	mov	r3, r1
   11278:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1127c:	eb12 0a00 	adds.w	sl, r2, r0
   11280:	eb43 0b01 	adc.w	fp, r3, r1
   11284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11286:	461a      	mov	r2, r3
   11288:	f04f 0300 	mov.w	r3, #0
   1128c:	4650      	mov	r0, sl
   1128e:	4659      	mov	r1, fp
   11290:	f7ee ff58 	bl	144 <__aeabi_uldivmod>
   11294:	4602      	mov	r2, r0
   11296:	460b      	mov	r3, r1
   11298:	4613      	mov	r3, r2
   1129a:	461a      	mov	r2, r3
   1129c:	f04f 0300 	mov.w	r3, #0
   112a0:	e01f      	b.n	112e2 <k_ms_to_ticks_ceil64+0x23c>
			return (t * to_hz + off) / from_hz;
   112a2:	6a3b      	ldr	r3, [r7, #32]
   112a4:	461a      	mov	r2, r3
   112a6:	f04f 0300 	mov.w	r3, #0
   112aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   112ac:	fb03 f001 	mul.w	r0, r3, r1
   112b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   112b2:	fb02 f101 	mul.w	r1, r2, r1
   112b6:	4401      	add	r1, r0
   112b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   112ba:	fba0 2302 	umull	r2, r3, r0, r2
   112be:	4419      	add	r1, r3
   112c0:	460b      	mov	r3, r1
   112c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   112c6:	eb12 0800 	adds.w	r8, r2, r0
   112ca:	eb43 0901 	adc.w	r9, r3, r1
   112ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   112d0:	461a      	mov	r2, r3
   112d2:	f04f 0300 	mov.w	r3, #0
   112d6:	4640      	mov	r0, r8
   112d8:	4649      	mov	r1, r9
   112da:	f7ee ff33 	bl	144 <__aeabi_uldivmod>
   112de:	4602      	mov	r2, r0
   112e0:	460b      	mov	r3, r1
}
   112e2:	4610      	mov	r0, r2
   112e4:	4619      	mov	r1, r3
   112e6:	3730      	adds	r7, #48	; 0x30
   112e8:	46bd      	mov	sp, r7
   112ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

000112ee <log_msg_is_std>:
{
   112ee:	b480      	push	{r7}
   112f0:	b083      	sub	sp, #12
   112f2:	af00      	add	r7, sp, #0
   112f4:	6078      	str	r0, [r7, #4]
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   112f6:	687b      	ldr	r3, [r7, #4]
   112f8:	7a1b      	ldrb	r3, [r3, #8]
   112fa:	f003 0301 	and.w	r3, r3, #1
   112fe:	b2db      	uxtb	r3, r3
   11300:	2b00      	cmp	r3, #0
   11302:	bf0c      	ite	eq
   11304:	2301      	moveq	r3, #1
   11306:	2300      	movne	r3, #0
   11308:	b2db      	uxtb	r3, r3
}
   1130a:	4618      	mov	r0, r3
   1130c:	370c      	adds	r7, #12
   1130e:	46bd      	mov	sp, r7
   11310:	bc80      	pop	{r7}
   11312:	4770      	bx	lr

00011314 <z_log_msg_std_alloc>:
{
   11314:	b580      	push	{r7, lr}
   11316:	b082      	sub	sp, #8
   11318:	af00      	add	r7, sp, #0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1131a:	f7f1 fd5b 	bl	2dd4 <log_msg_chunk_alloc>
   1131e:	6078      	str	r0, [r7, #4]
	if (msg != NULL) {
   11320:	687b      	ldr	r3, [r7, #4]
   11322:	2b00      	cmp	r3, #0
   11324:	d00a      	beq.n	1133c <z_log_msg_std_alloc+0x28>
		msg->hdr.ref_cnt = 1;
   11326:	687b      	ldr	r3, [r7, #4]
   11328:	2201      	movs	r2, #1
   1132a:	605a      	str	r2, [r3, #4]
		msg->hdr.params.raw = 0U;
   1132c:	687b      	ldr	r3, [r7, #4]
   1132e:	2200      	movs	r2, #0
   11330:	811a      	strh	r2, [r3, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   11332:	687a      	ldr	r2, [r7, #4]
   11334:	7a13      	ldrb	r3, [r2, #8]
   11336:	f36f 0300 	bfc	r3, #0, #1
   1133a:	7213      	strb	r3, [r2, #8]
	return msg;
   1133c:	687b      	ldr	r3, [r7, #4]
}
   1133e:	4618      	mov	r0, r3
   11340:	3708      	adds	r7, #8
   11342:	46bd      	mov	sp, r7
   11344:	bd80      	pop	{r7, pc}

00011346 <log_process>:
{
   11346:	b580      	push	{r7, lr}
   11348:	b082      	sub	sp, #8
   1134a:	af00      	add	r7, sp, #0
   1134c:	4603      	mov	r3, r0
   1134e:	71fb      	strb	r3, [r7, #7]
	return z_impl_log_process(bypass);
   11350:	79fb      	ldrb	r3, [r7, #7]
   11352:	4618      	mov	r0, r3
   11354:	f7f1 fb80 	bl	2a58 <z_impl_log_process>
   11358:	4603      	mov	r3, r0
}
   1135a:	4618      	mov	r0, r3
   1135c:	3708      	adds	r7, #8
   1135e:	46bd      	mov	sp, r7
   11360:	bd80      	pop	{r7, pc}

00011362 <block_on_alloc>:
{
   11362:	b480      	push	{r7}
   11364:	af00      	add	r7, sp, #0
		return false;
   11366:	2300      	movs	r3, #0
}
   11368:	4618      	mov	r0, r3
   1136a:	46bd      	mov	sp, r7
   1136c:	bc80      	pop	{r7}
   1136e:	4770      	bx	lr

00011370 <log_msg_get>:
{
   11370:	b580      	push	{r7, lr}
   11372:	b082      	sub	sp, #8
   11374:	af00      	add	r7, sp, #0
   11376:	6078      	str	r0, [r7, #4]
	atomic_inc(&msg->hdr.ref_cnt);
   11378:	687b      	ldr	r3, [r7, #4]
   1137a:	3304      	adds	r3, #4
   1137c:	4618      	mov	r0, r3
   1137e:	f7ff fe78 	bl	11072 <atomic_inc>
}
   11382:	bf00      	nop
   11384:	3708      	adds	r7, #8
   11386:	46bd      	mov	sp, r7
   11388:	bd80      	pop	{r7, pc}

0001138a <log_msg_put>:
{
   1138a:	b580      	push	{r7, lr}
   1138c:	b082      	sub	sp, #8
   1138e:	af00      	add	r7, sp, #0
   11390:	6078      	str	r0, [r7, #4]
	atomic_dec(&msg->hdr.ref_cnt);
   11392:	687b      	ldr	r3, [r7, #4]
   11394:	3304      	adds	r3, #4
   11396:	4618      	mov	r0, r3
   11398:	f7ff fe78 	bl	1108c <atomic_dec>
	if (msg->hdr.ref_cnt == 0) {
   1139c:	687b      	ldr	r3, [r7, #4]
   1139e:	685b      	ldr	r3, [r3, #4]
   113a0:	2b00      	cmp	r3, #0
   113a2:	d102      	bne.n	113aa <log_msg_put+0x20>
		msg_free(msg);
   113a4:	6878      	ldr	r0, [r7, #4]
   113a6:	f7f1 fd59 	bl	2e5c <msg_free>
}
   113aa:	bf00      	nop
   113ac:	3708      	adds	r7, #8
   113ae:	46bd      	mov	sp, r7
   113b0:	bd80      	pop	{r7, pc}

000113b2 <log_msg_nargs_get>:
{
   113b2:	b480      	push	{r7}
   113b4:	b083      	sub	sp, #12
   113b6:	af00      	add	r7, sp, #0
   113b8:	6078      	str	r0, [r7, #4]
	return msg->hdr.params.std.nargs;
   113ba:	687b      	ldr	r3, [r7, #4]
   113bc:	7a5b      	ldrb	r3, [r3, #9]
   113be:	f3c3 1303 	ubfx	r3, r3, #4, #4
   113c2:	b2db      	uxtb	r3, r3
}
   113c4:	4618      	mov	r0, r3
   113c6:	370c      	adds	r7, #12
   113c8:	46bd      	mov	sp, r7
   113ca:	bc80      	pop	{r7}
   113cc:	4770      	bx	lr

000113ce <cont_arg_get>:
{
   113ce:	b480      	push	{r7}
   113d0:	b085      	sub	sp, #20
   113d2:	af00      	add	r7, sp, #0
   113d4:	6078      	str	r0, [r7, #4]
   113d6:	6039      	str	r1, [r7, #0]
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   113d8:	683b      	ldr	r3, [r7, #0]
   113da:	2b01      	cmp	r3, #1
   113dc:	d806      	bhi.n	113ec <cont_arg_get+0x1e>
		return msg->payload.ext.data.args[arg_idx];
   113de:	687a      	ldr	r2, [r7, #4]
   113e0:	683b      	ldr	r3, [r7, #0]
   113e2:	3304      	adds	r3, #4
   113e4:	009b      	lsls	r3, r3, #2
   113e6:	4413      	add	r3, r2
   113e8:	689b      	ldr	r3, [r3, #8]
   113ea:	e014      	b.n	11416 <cont_arg_get+0x48>
	cont = msg->payload.ext.next;
   113ec:	687b      	ldr	r3, [r7, #4]
   113ee:	695b      	ldr	r3, [r3, #20]
   113f0:	60fb      	str	r3, [r7, #12]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   113f2:	683b      	ldr	r3, [r7, #0]
   113f4:	3b02      	subs	r3, #2
   113f6:	603b      	str	r3, [r7, #0]
	while (arg_idx >= ARGS_CONT_MSG) {
   113f8:	e005      	b.n	11406 <cont_arg_get+0x38>
		arg_idx -= ARGS_CONT_MSG;
   113fa:	683b      	ldr	r3, [r7, #0]
   113fc:	3b07      	subs	r3, #7
   113fe:	603b      	str	r3, [r7, #0]
		cont = cont->next;
   11400:	68fb      	ldr	r3, [r7, #12]
   11402:	681b      	ldr	r3, [r3, #0]
   11404:	60fb      	str	r3, [r7, #12]
	while (arg_idx >= ARGS_CONT_MSG) {
   11406:	683b      	ldr	r3, [r7, #0]
   11408:	2b06      	cmp	r3, #6
   1140a:	d8f6      	bhi.n	113fa <cont_arg_get+0x2c>
	return cont->payload.args[arg_idx];
   1140c:	68fa      	ldr	r2, [r7, #12]
   1140e:	683b      	ldr	r3, [r7, #0]
   11410:	009b      	lsls	r3, r3, #2
   11412:	4413      	add	r3, r2
   11414:	685b      	ldr	r3, [r3, #4]
}
   11416:	4618      	mov	r0, r3
   11418:	3714      	adds	r7, #20
   1141a:	46bd      	mov	sp, r7
   1141c:	bc80      	pop	{r7}
   1141e:	4770      	bx	lr

00011420 <log_msg_arg_get>:
{
   11420:	b580      	push	{r7, lr}
   11422:	b084      	sub	sp, #16
   11424:	af00      	add	r7, sp, #0
   11426:	6078      	str	r0, [r7, #4]
   11428:	6039      	str	r1, [r7, #0]
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1142a:	687b      	ldr	r3, [r7, #4]
   1142c:	7a5b      	ldrb	r3, [r3, #9]
   1142e:	f3c3 1303 	ubfx	r3, r3, #4, #4
   11432:	b2db      	uxtb	r3, r3
   11434:	461a      	mov	r2, r3
   11436:	683b      	ldr	r3, [r7, #0]
   11438:	4293      	cmp	r3, r2
   1143a:	d301      	bcc.n	11440 <log_msg_arg_get+0x20>
		return 0;
   1143c:	2300      	movs	r3, #0
   1143e:	e014      	b.n	1146a <log_msg_arg_get+0x4a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   11440:	687b      	ldr	r3, [r7, #4]
   11442:	7a5b      	ldrb	r3, [r3, #9]
   11444:	f3c3 1303 	ubfx	r3, r3, #4, #4
   11448:	b2db      	uxtb	r3, r3
   1144a:	2b03      	cmp	r3, #3
   1144c:	d807      	bhi.n	1145e <log_msg_arg_get+0x3e>
		arg = msg->payload.single.args[arg_idx];
   1144e:	687a      	ldr	r2, [r7, #4]
   11450:	683b      	ldr	r3, [r7, #0]
   11452:	3304      	adds	r3, #4
   11454:	009b      	lsls	r3, r3, #2
   11456:	4413      	add	r3, r2
   11458:	685b      	ldr	r3, [r3, #4]
   1145a:	60fb      	str	r3, [r7, #12]
   1145c:	e004      	b.n	11468 <log_msg_arg_get+0x48>
		arg = cont_arg_get(msg, arg_idx);
   1145e:	6839      	ldr	r1, [r7, #0]
   11460:	6878      	ldr	r0, [r7, #4]
   11462:	f7ff ffb4 	bl	113ce <cont_arg_get>
   11466:	60f8      	str	r0, [r7, #12]
	return arg;
   11468:	68fb      	ldr	r3, [r7, #12]
}
   1146a:	4618      	mov	r0, r3
   1146c:	3710      	adds	r7, #16
   1146e:	46bd      	mov	sp, r7
   11470:	bd80      	pop	{r7, pc}

00011472 <log_msg_str_get>:
{
   11472:	b480      	push	{r7}
   11474:	b083      	sub	sp, #12
   11476:	af00      	add	r7, sp, #0
   11478:	6078      	str	r0, [r7, #4]
	return msg->str;
   1147a:	687b      	ldr	r3, [r7, #4]
   1147c:	691b      	ldr	r3, [r3, #16]
}
   1147e:	4618      	mov	r0, r3
   11480:	370c      	adds	r7, #12
   11482:	46bd      	mov	sp, r7
   11484:	bc80      	pop	{r7}
   11486:	4770      	bx	lr

00011488 <msg_alloc>:
{
   11488:	b580      	push	{r7, lr}
   1148a:	b086      	sub	sp, #24
   1148c:	af00      	add	r7, sp, #0
   1148e:	6078      	str	r0, [r7, #4]
	struct  log_msg *msg = z_log_msg_std_alloc();
   11490:	f7ff ff40 	bl	11314 <z_log_msg_std_alloc>
   11494:	60f8      	str	r0, [r7, #12]
	int n = (int)nargs;
   11496:	687b      	ldr	r3, [r7, #4]
   11498:	613b      	str	r3, [r7, #16]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1149a:	68fb      	ldr	r3, [r7, #12]
   1149c:	2b00      	cmp	r3, #0
   1149e:	d002      	beq.n	114a6 <msg_alloc+0x1e>
   114a0:	687b      	ldr	r3, [r7, #4]
   114a2:	2b03      	cmp	r3, #3
   114a4:	d801      	bhi.n	114aa <msg_alloc+0x22>
		return msg;
   114a6:	68fb      	ldr	r3, [r7, #12]
   114a8:	e02d      	b.n	11506 <msg_alloc+0x7e>
	msg->hdr.params.std.nargs = 0U;
   114aa:	68fa      	ldr	r2, [r7, #12]
   114ac:	7a53      	ldrb	r3, [r2, #9]
   114ae:	f36f 1307 	bfc	r3, #4, #4
   114b2:	7253      	strb	r3, [r2, #9]
	msg->hdr.params.generic.ext = 1;
   114b4:	68fa      	ldr	r2, [r7, #12]
   114b6:	7a13      	ldrb	r3, [r2, #8]
   114b8:	f043 0302 	orr.w	r3, r3, #2
   114bc:	7213      	strb	r3, [r2, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   114be:	693b      	ldr	r3, [r7, #16]
   114c0:	3b02      	subs	r3, #2
   114c2:	613b      	str	r3, [r7, #16]
	next = &msg->payload.ext.next;
   114c4:	68fb      	ldr	r3, [r7, #12]
   114c6:	3314      	adds	r3, #20
   114c8:	617b      	str	r3, [r7, #20]
	*next = NULL;
   114ca:	697b      	ldr	r3, [r7, #20]
   114cc:	2200      	movs	r2, #0
   114ce:	601a      	str	r2, [r3, #0]
	while (n > 0) {
   114d0:	e015      	b.n	114fe <msg_alloc+0x76>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   114d2:	f7f1 fc7f 	bl	2dd4 <log_msg_chunk_alloc>
   114d6:	60b8      	str	r0, [r7, #8]
		if (cont == NULL) {
   114d8:	68bb      	ldr	r3, [r7, #8]
   114da:	2b00      	cmp	r3, #0
   114dc:	d104      	bne.n	114e8 <msg_alloc+0x60>
			msg_free(msg);
   114de:	68f8      	ldr	r0, [r7, #12]
   114e0:	f7f1 fcbc 	bl	2e5c <msg_free>
			return NULL;
   114e4:	2300      	movs	r3, #0
   114e6:	e00e      	b.n	11506 <msg_alloc+0x7e>
		*next = cont;
   114e8:	697b      	ldr	r3, [r7, #20]
   114ea:	68ba      	ldr	r2, [r7, #8]
   114ec:	601a      	str	r2, [r3, #0]
		cont->next = NULL;
   114ee:	68bb      	ldr	r3, [r7, #8]
   114f0:	2200      	movs	r2, #0
   114f2:	601a      	str	r2, [r3, #0]
		next = &cont->next;
   114f4:	68bb      	ldr	r3, [r7, #8]
   114f6:	617b      	str	r3, [r7, #20]
		n -= ARGS_CONT_MSG;
   114f8:	693b      	ldr	r3, [r7, #16]
   114fa:	3b07      	subs	r3, #7
   114fc:	613b      	str	r3, [r7, #16]
	while (n > 0) {
   114fe:	693b      	ldr	r3, [r7, #16]
   11500:	2b00      	cmp	r3, #0
   11502:	dce6      	bgt.n	114d2 <msg_alloc+0x4a>
	return msg;
   11504:	68fb      	ldr	r3, [r7, #12]
}
   11506:	4618      	mov	r0, r3
   11508:	3718      	adds	r7, #24
   1150a:	46bd      	mov	sp, r7
   1150c:	bd80      	pop	{r7, pc}

0001150e <copy_args_to_msg>:
{
   1150e:	b580      	push	{r7, lr}
   11510:	b086      	sub	sp, #24
   11512:	af00      	add	r7, sp, #0
   11514:	60f8      	str	r0, [r7, #12]
   11516:	60b9      	str	r1, [r7, #8]
   11518:	607a      	str	r2, [r7, #4]
	struct log_msg_cont *cont = msg->payload.ext.next;
   1151a:	68fb      	ldr	r3, [r7, #12]
   1151c:	695b      	ldr	r3, [r3, #20]
   1151e:	617b      	str	r3, [r7, #20]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   11520:	687b      	ldr	r3, [r7, #4]
   11522:	2b03      	cmp	r3, #3
   11524:	d90d      	bls.n	11542 <copy_args_to_msg+0x34>
		(void)memcpy(msg->payload.ext.data.args, args,
   11526:	68fb      	ldr	r3, [r7, #12]
   11528:	3318      	adds	r3, #24
   1152a:	2208      	movs	r2, #8
   1152c:	68b9      	ldr	r1, [r7, #8]
   1152e:	4618      	mov	r0, r3
   11530:	f001 fabd 	bl	12aae <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   11534:	687b      	ldr	r3, [r7, #4]
   11536:	3b02      	subs	r3, #2
   11538:	607b      	str	r3, [r7, #4]
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1153a:	68bb      	ldr	r3, [r7, #8]
   1153c:	3308      	adds	r3, #8
   1153e:	60bb      	str	r3, [r7, #8]
   11540:	e024      	b.n	1158c <copy_args_to_msg+0x7e>
		(void)memcpy(msg->payload.single.args, args,
   11542:	68fb      	ldr	r3, [r7, #12]
   11544:	f103 0014 	add.w	r0, r3, #20
   11548:	687b      	ldr	r3, [r7, #4]
   1154a:	009b      	lsls	r3, r3, #2
   1154c:	461a      	mov	r2, r3
   1154e:	68b9      	ldr	r1, [r7, #8]
   11550:	f001 faad 	bl	12aae <memcpy>
		nargs  = 0U;
   11554:	2300      	movs	r3, #0
   11556:	607b      	str	r3, [r7, #4]
	while (nargs != 0U) {
   11558:	e018      	b.n	1158c <copy_args_to_msg+0x7e>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1155a:	687b      	ldr	r3, [r7, #4]
   1155c:	2b07      	cmp	r3, #7
   1155e:	bf28      	it	cs
   11560:	2307      	movcs	r3, #7
   11562:	613b      	str	r3, [r7, #16]
		(void)memcpy(cont->payload.args, args,
   11564:	697b      	ldr	r3, [r7, #20]
   11566:	1d18      	adds	r0, r3, #4
   11568:	693b      	ldr	r3, [r7, #16]
   1156a:	009b      	lsls	r3, r3, #2
   1156c:	461a      	mov	r2, r3
   1156e:	68b9      	ldr	r1, [r7, #8]
   11570:	f001 fa9d 	bl	12aae <memcpy>
		nargs -= cpy_args;
   11574:	687a      	ldr	r2, [r7, #4]
   11576:	693b      	ldr	r3, [r7, #16]
   11578:	1ad3      	subs	r3, r2, r3
   1157a:	607b      	str	r3, [r7, #4]
		args += cpy_args;
   1157c:	693b      	ldr	r3, [r7, #16]
   1157e:	009b      	lsls	r3, r3, #2
   11580:	68ba      	ldr	r2, [r7, #8]
   11582:	4413      	add	r3, r2
   11584:	60bb      	str	r3, [r7, #8]
		cont = cont->next;
   11586:	697b      	ldr	r3, [r7, #20]
   11588:	681b      	ldr	r3, [r3, #0]
   1158a:	617b      	str	r3, [r7, #20]
	while (nargs != 0U) {
   1158c:	687b      	ldr	r3, [r7, #4]
   1158e:	2b00      	cmp	r3, #0
   11590:	d1e3      	bne.n	1155a <copy_args_to_msg+0x4c>
}
   11592:	bf00      	nop
   11594:	bf00      	nop
   11596:	3718      	adds	r7, #24
   11598:	46bd      	mov	sp, r7
   1159a:	bd80      	pop	{r7, pc}

0001159c <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1159c:	b580      	push	{r7, lr}
   1159e:	b08a      	sub	sp, #40	; 0x28
   115a0:	af00      	add	r7, sp, #0
   115a2:	60f8      	str	r0, [r7, #12]
   115a4:	60b9      	str	r1, [r7, #8]
   115a6:	607a      	str	r2, [r7, #4]
   115a8:	603b      	str	r3, [r7, #0]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   115aa:	68fb      	ldr	r3, [r7, #12]
   115ac:	891b      	ldrh	r3, [r3, #8]
   115ae:	f3c3 038d 	ubfx	r3, r3, #2, #14
   115b2:	b29b      	uxth	r3, r3
   115b4:	617b      	str	r3, [r7, #20]
	struct log_msg_cont *cont = NULL;
   115b6:	2300      	movs	r3, #0
   115b8:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   115ba:	683a      	ldr	r2, [r7, #0]
   115bc:	697b      	ldr	r3, [r7, #20]
   115be:	429a      	cmp	r2, r3
   115c0:	d303      	bcc.n	115ca <log_msg_hexdump_data_op+0x2e>
		*length = 0;
   115c2:	687b      	ldr	r3, [r7, #4]
   115c4:	2200      	movs	r2, #0
   115c6:	601a      	str	r2, [r3, #0]
		return;
   115c8:	e094      	b.n	116f4 <log_msg_hexdump_data_op+0x158>
	}

	if ((offset + *length) > available_len) {
   115ca:	687b      	ldr	r3, [r7, #4]
   115cc:	681a      	ldr	r2, [r3, #0]
   115ce:	683b      	ldr	r3, [r7, #0]
   115d0:	4413      	add	r3, r2
   115d2:	697a      	ldr	r2, [r7, #20]
   115d4:	429a      	cmp	r2, r3
   115d6:	d204      	bcs.n	115e2 <log_msg_hexdump_data_op+0x46>
		*length = available_len - offset;
   115d8:	697a      	ldr	r2, [r7, #20]
   115da:	683b      	ldr	r3, [r7, #0]
   115dc:	1ad2      	subs	r2, r2, r3
   115de:	687b      	ldr	r3, [r7, #4]
   115e0:	601a      	str	r2, [r3, #0]
	}

	req_len = *length;
   115e2:	687b      	ldr	r3, [r7, #4]
   115e4:	681b      	ldr	r3, [r3, #0]
   115e6:	61bb      	str	r3, [r7, #24]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   115e8:	697b      	ldr	r3, [r7, #20]
   115ea:	2b0c      	cmp	r3, #12
   115ec:	d908      	bls.n	11600 <log_msg_hexdump_data_op+0x64>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   115ee:	2308      	movs	r3, #8
   115f0:	61fb      	str	r3, [r7, #28]
		head_data = msg->payload.ext.data.bytes;
   115f2:	68fb      	ldr	r3, [r7, #12]
   115f4:	3318      	adds	r3, #24
   115f6:	623b      	str	r3, [r7, #32]
		cont = msg->payload.ext.next;
   115f8:	68fb      	ldr	r3, [r7, #12]
   115fa:	695b      	ldr	r3, [r3, #20]
   115fc:	627b      	str	r3, [r7, #36]	; 0x24
   115fe:	e004      	b.n	1160a <log_msg_hexdump_data_op+0x6e>
	} else {
		head_data = msg->payload.single.bytes;
   11600:	68fb      	ldr	r3, [r7, #12]
   11602:	3314      	adds	r3, #20
   11604:	623b      	str	r3, [r7, #32]
		chunk_len = available_len;
   11606:	697b      	ldr	r3, [r7, #20]
   11608:	61fb      	str	r3, [r7, #28]

	}

	if (offset < chunk_len) {
   1160a:	683a      	ldr	r2, [r7, #0]
   1160c:	69fb      	ldr	r3, [r7, #28]
   1160e:	429a      	cmp	r2, r3
   11610:	d223      	bcs.n	1165a <log_msg_hexdump_data_op+0xbe>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   11612:	69ba      	ldr	r2, [r7, #24]
   11614:	69fb      	ldr	r3, [r7, #28]
   11616:	4293      	cmp	r3, r2
   11618:	bf28      	it	cs
   1161a:	4613      	movcs	r3, r2
   1161c:	613b      	str	r3, [r7, #16]

		if (put_op) {
   1161e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   11622:	2b00      	cmp	r3, #0
   11624:	d008      	beq.n	11638 <log_msg_hexdump_data_op+0x9c>
			(void)memcpy(&head_data[offset], data, cpy_len);
   11626:	6a3a      	ldr	r2, [r7, #32]
   11628:	683b      	ldr	r3, [r7, #0]
   1162a:	4413      	add	r3, r2
   1162c:	693a      	ldr	r2, [r7, #16]
   1162e:	68b9      	ldr	r1, [r7, #8]
   11630:	4618      	mov	r0, r3
   11632:	f001 fa3c 	bl	12aae <memcpy>
   11636:	e007      	b.n	11648 <log_msg_hexdump_data_op+0xac>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
   11638:	6a3a      	ldr	r2, [r7, #32]
   1163a:	683b      	ldr	r3, [r7, #0]
   1163c:	4413      	add	r3, r2
   1163e:	693a      	ldr	r2, [r7, #16]
   11640:	4619      	mov	r1, r3
   11642:	68b8      	ldr	r0, [r7, #8]
   11644:	f001 fa33 	bl	12aae <memcpy>
		}

		req_len -= cpy_len;
   11648:	69ba      	ldr	r2, [r7, #24]
   1164a:	693b      	ldr	r3, [r7, #16]
   1164c:	1ad3      	subs	r3, r2, r3
   1164e:	61bb      	str	r3, [r7, #24]
		data += cpy_len;
   11650:	68ba      	ldr	r2, [r7, #8]
   11652:	693b      	ldr	r3, [r7, #16]
   11654:	4413      	add	r3, r2
   11656:	60bb      	str	r3, [r7, #8]
   11658:	e046      	b.n	116e8 <log_msg_hexdump_data_op+0x14c>
	} else {
		offset -= chunk_len;
   1165a:	683a      	ldr	r2, [r7, #0]
   1165c:	69fb      	ldr	r3, [r7, #28]
   1165e:	1ad3      	subs	r3, r2, r3
   11660:	603b      	str	r3, [r7, #0]
		chunk_len = HEXDUMP_BYTES_CONT_MSG;
   11662:	231c      	movs	r3, #28
   11664:	61fb      	str	r3, [r7, #28]
		if (cont == NULL) {
   11666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11668:	2b00      	cmp	r3, #0
   1166a:	d10a      	bne.n	11682 <log_msg_hexdump_data_op+0xe6>
			cont = msg->payload.ext.next;
   1166c:	68fb      	ldr	r3, [r7, #12]
   1166e:	695b      	ldr	r3, [r3, #20]
   11670:	627b      	str	r3, [r7, #36]	; 0x24
		}

		while (offset >= chunk_len) {
   11672:	e006      	b.n	11682 <log_msg_hexdump_data_op+0xe6>
			cont = cont->next;
   11674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11676:	681b      	ldr	r3, [r3, #0]
   11678:	627b      	str	r3, [r7, #36]	; 0x24
			offset -= chunk_len;
   1167a:	683a      	ldr	r2, [r7, #0]
   1167c:	69fb      	ldr	r3, [r7, #28]
   1167e:	1ad3      	subs	r3, r2, r3
   11680:	603b      	str	r3, [r7, #0]
		while (offset >= chunk_len) {
   11682:	683a      	ldr	r2, [r7, #0]
   11684:	69fb      	ldr	r3, [r7, #28]
   11686:	429a      	cmp	r2, r3
   11688:	d2f4      	bcs.n	11674 <log_msg_hexdump_data_op+0xd8>
		}
	}

	while ((req_len > 0) && (cont != NULL)) {
   1168a:	e02d      	b.n	116e8 <log_msg_hexdump_data_op+0x14c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1168c:	683b      	ldr	r3, [r7, #0]
   1168e:	f1c3 031c 	rsb	r3, r3, #28
   11692:	61fb      	str	r3, [r7, #28]
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   11694:	69ba      	ldr	r2, [r7, #24]
   11696:	69fb      	ldr	r3, [r7, #28]
   11698:	4293      	cmp	r3, r2
   1169a:	bf28      	it	cs
   1169c:	4613      	movcs	r3, r2
   1169e:	613b      	str	r3, [r7, #16]

		if (put_op) {
   116a0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   116a4:	2b00      	cmp	r3, #0
   116a6:	d009      	beq.n	116bc <log_msg_hexdump_data_op+0x120>
			(void)memcpy(&cont->payload.bytes[offset],
   116a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   116aa:	683b      	ldr	r3, [r7, #0]
   116ac:	4413      	add	r3, r2
   116ae:	3304      	adds	r3, #4
   116b0:	693a      	ldr	r2, [r7, #16]
   116b2:	68b9      	ldr	r1, [r7, #8]
   116b4:	4618      	mov	r0, r3
   116b6:	f001 f9fa 	bl	12aae <memcpy>
   116ba:	e008      	b.n	116ce <log_msg_hexdump_data_op+0x132>
				     data, cpy_len);
		} else {
			(void)memcpy(data, &cont->payload.bytes[offset],
   116bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   116be:	683b      	ldr	r3, [r7, #0]
   116c0:	4413      	add	r3, r2
   116c2:	3304      	adds	r3, #4
   116c4:	693a      	ldr	r2, [r7, #16]
   116c6:	4619      	mov	r1, r3
   116c8:	68b8      	ldr	r0, [r7, #8]
   116ca:	f001 f9f0 	bl	12aae <memcpy>
				     cpy_len);
		}

		offset = 0;
   116ce:	2300      	movs	r3, #0
   116d0:	603b      	str	r3, [r7, #0]
		cont = cont->next;
   116d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   116d4:	681b      	ldr	r3, [r3, #0]
   116d6:	627b      	str	r3, [r7, #36]	; 0x24
		req_len -= cpy_len;
   116d8:	69ba      	ldr	r2, [r7, #24]
   116da:	693b      	ldr	r3, [r7, #16]
   116dc:	1ad3      	subs	r3, r2, r3
   116de:	61bb      	str	r3, [r7, #24]
		data += cpy_len;
   116e0:	68ba      	ldr	r2, [r7, #8]
   116e2:	693b      	ldr	r3, [r7, #16]
   116e4:	4413      	add	r3, r2
   116e6:	60bb      	str	r3, [r7, #8]
	while ((req_len > 0) && (cont != NULL)) {
   116e8:	69bb      	ldr	r3, [r7, #24]
   116ea:	2b00      	cmp	r3, #0
   116ec:	d002      	beq.n	116f4 <log_msg_hexdump_data_op+0x158>
   116ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   116f0:	2b00      	cmp	r3, #0
   116f2:	d1cb      	bne.n	1168c <log_msg_hexdump_data_op+0xf0>
	}
}
   116f4:	3728      	adds	r7, #40	; 0x28
   116f6:	46bd      	mov	sp, r7
   116f8:	bd80      	pop	{r7, pc}

000116fa <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   116fa:	b580      	push	{r7, lr}
   116fc:	b086      	sub	sp, #24
   116fe:	af02      	add	r7, sp, #8
   11700:	60f8      	str	r0, [r7, #12]
   11702:	60b9      	str	r1, [r7, #8]
   11704:	607a      	str	r2, [r7, #4]
   11706:	603b      	str	r3, [r7, #0]
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   11708:	2300      	movs	r3, #0
   1170a:	9300      	str	r3, [sp, #0]
   1170c:	683b      	ldr	r3, [r7, #0]
   1170e:	687a      	ldr	r2, [r7, #4]
   11710:	68b9      	ldr	r1, [r7, #8]
   11712:	68f8      	ldr	r0, [r7, #12]
   11714:	f7ff ff42 	bl	1159c <log_msg_hexdump_data_op>
}
   11718:	bf00      	nop
   1171a:	3710      	adds	r7, #16
   1171c:	46bd      	mov	sp, r7
   1171e:	bd80      	pop	{r7, pc}

00011720 <atomic_add>:
{
   11720:	b480      	push	{r7}
   11722:	b083      	sub	sp, #12
   11724:	af00      	add	r7, sp, #0
   11726:	6078      	str	r0, [r7, #4]
   11728:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1172a:	683a      	ldr	r2, [r7, #0]
   1172c:	687b      	ldr	r3, [r7, #4]
   1172e:	e8d3 1fef 	ldaex	r1, [r3]
   11732:	eb01 0002 	add.w	r0, r1, r2
   11736:	e8c3 0fec 	stlex	ip, r0, [r3]
   1173a:	f1bc 0f00 	cmp.w	ip, #0
   1173e:	d1f6      	bne.n	1172e <atomic_add+0xe>
   11740:	460b      	mov	r3, r1
}
   11742:	4618      	mov	r0, r3
   11744:	370c      	adds	r7, #12
   11746:	46bd      	mov	sp, r7
   11748:	bc80      	pop	{r7}
   1174a:	4770      	bx	lr

0001174c <atomic_inc>:
{
   1174c:	b580      	push	{r7, lr}
   1174e:	b082      	sub	sp, #8
   11750:	af00      	add	r7, sp, #0
   11752:	6078      	str	r0, [r7, #4]
	return atomic_add(target, 1);
   11754:	2101      	movs	r1, #1
   11756:	6878      	ldr	r0, [r7, #4]
   11758:	f7ff ffe2 	bl	11720 <atomic_add>
   1175c:	4603      	mov	r3, r0
}
   1175e:	4618      	mov	r0, r3
   11760:	3708      	adds	r7, #8
   11762:	46bd      	mov	sp, r7
   11764:	bd80      	pop	{r7, pc}

00011766 <log_msg_domain_id_get>:
{
   11766:	b480      	push	{r7}
   11768:	b083      	sub	sp, #12
   1176a:	af00      	add	r7, sp, #0
   1176c:	6078      	str	r0, [r7, #4]
	return msg->hdr.ids.domain_id;
   1176e:	687b      	ldr	r3, [r7, #4]
   11770:	7a9b      	ldrb	r3, [r3, #10]
   11772:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   11776:	b2db      	uxtb	r3, r3
}
   11778:	4618      	mov	r0, r3
   1177a:	370c      	adds	r7, #12
   1177c:	46bd      	mov	sp, r7
   1177e:	bc80      	pop	{r7}
   11780:	4770      	bx	lr

00011782 <log_msg_source_id_get>:
{
   11782:	b480      	push	{r7}
   11784:	b083      	sub	sp, #12
   11786:	af00      	add	r7, sp, #0
   11788:	6078      	str	r0, [r7, #4]
	return msg->hdr.ids.source_id;
   1178a:	687b      	ldr	r3, [r7, #4]
   1178c:	895b      	ldrh	r3, [r3, #10]
   1178e:	f3c3 1389 	ubfx	r3, r3, #6, #10
   11792:	b29b      	uxth	r3, r3
}
   11794:	4618      	mov	r0, r3
   11796:	370c      	adds	r7, #12
   11798:	46bd      	mov	sp, r7
   1179a:	bc80      	pop	{r7}
   1179c:	4770      	bx	lr

0001179e <log_msg_level_get>:
{
   1179e:	b480      	push	{r7}
   117a0:	b083      	sub	sp, #12
   117a2:	af00      	add	r7, sp, #0
   117a4:	6078      	str	r0, [r7, #4]
	return msg->hdr.ids.level;
   117a6:	687b      	ldr	r3, [r7, #4]
   117a8:	7a9b      	ldrb	r3, [r3, #10]
   117aa:	f3c3 0302 	ubfx	r3, r3, #0, #3
   117ae:	b2db      	uxtb	r3, r3
}
   117b0:	4618      	mov	r0, r3
   117b2:	370c      	adds	r7, #12
   117b4:	46bd      	mov	sp, r7
   117b6:	bc80      	pop	{r7}
   117b8:	4770      	bx	lr

000117ba <log_msg_timestamp_get>:
{
   117ba:	b480      	push	{r7}
   117bc:	b083      	sub	sp, #12
   117be:	af00      	add	r7, sp, #0
   117c0:	6078      	str	r0, [r7, #4]
	return msg->hdr.timestamp;
   117c2:	687b      	ldr	r3, [r7, #4]
   117c4:	68db      	ldr	r3, [r3, #12]
}
   117c6:	4618      	mov	r0, r3
   117c8:	370c      	adds	r7, #12
   117ca:	46bd      	mov	sp, r7
   117cc:	bc80      	pop	{r7}
   117ce:	4770      	bx	lr

000117d0 <log_msg_is_std>:
{
   117d0:	b480      	push	{r7}
   117d2:	b083      	sub	sp, #12
   117d4:	af00      	add	r7, sp, #0
   117d6:	6078      	str	r0, [r7, #4]
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   117d8:	687b      	ldr	r3, [r7, #4]
   117da:	7a1b      	ldrb	r3, [r3, #8]
   117dc:	f003 0301 	and.w	r3, r3, #1
   117e0:	b2db      	uxtb	r3, r3
   117e2:	2b00      	cmp	r3, #0
   117e4:	bf0c      	ite	eq
   117e6:	2301      	moveq	r3, #1
   117e8:	2300      	movne	r3, #0
   117ea:	b2db      	uxtb	r3, r3
}
   117ec:	4618      	mov	r0, r3
   117ee:	370c      	adds	r7, #12
   117f0:	46bd      	mov	sp, r7
   117f2:	bc80      	pop	{r7}
   117f4:	4770      	bx	lr

000117f6 <isprint>:
{
   117f6:	b480      	push	{r7}
   117f8:	b083      	sub	sp, #12
   117fa:	af00      	add	r7, sp, #0
   117fc:	6078      	str	r0, [r7, #4]
	return (int)((((unsigned)c) >= ' ') &&
   117fe:	687b      	ldr	r3, [r7, #4]
   11800:	2b1f      	cmp	r3, #31
   11802:	d904      	bls.n	1180e <isprint+0x18>
			(((unsigned)c) <= (unsigned)'~'));
   11804:	687b      	ldr	r3, [r7, #4]
	return (int)((((unsigned)c) >= ' ') &&
   11806:	2b7e      	cmp	r3, #126	; 0x7e
   11808:	d801      	bhi.n	1180e <isprint+0x18>
   1180a:	2301      	movs	r3, #1
   1180c:	e000      	b.n	11810 <isprint+0x1a>
   1180e:	2300      	movs	r3, #0
}
   11810:	4618      	mov	r0, r3
   11812:	370c      	adds	r7, #12
   11814:	46bd      	mov	sp, r7
   11816:	bc80      	pop	{r7}
   11818:	4770      	bx	lr

0001181a <buffer_write>:
{
   1181a:	b580      	push	{r7, lr}
   1181c:	b086      	sub	sp, #24
   1181e:	af00      	add	r7, sp, #0
   11820:	60f8      	str	r0, [r7, #12]
   11822:	60b9      	str	r1, [r7, #8]
   11824:	607a      	str	r2, [r7, #4]
   11826:	603b      	str	r3, [r7, #0]
		processed = outf(buf, len, ctx);
   11828:	68fb      	ldr	r3, [r7, #12]
   1182a:	683a      	ldr	r2, [r7, #0]
   1182c:	6879      	ldr	r1, [r7, #4]
   1182e:	68b8      	ldr	r0, [r7, #8]
   11830:	4798      	blx	r3
   11832:	6178      	str	r0, [r7, #20]
		len -= processed;
   11834:	697b      	ldr	r3, [r7, #20]
   11836:	687a      	ldr	r2, [r7, #4]
   11838:	1ad3      	subs	r3, r2, r3
   1183a:	607b      	str	r3, [r7, #4]
		buf += processed;
   1183c:	697b      	ldr	r3, [r7, #20]
   1183e:	68ba      	ldr	r2, [r7, #8]
   11840:	4413      	add	r3, r2
   11842:	60bb      	str	r3, [r7, #8]
	} while (len != 0);
   11844:	687b      	ldr	r3, [r7, #4]
   11846:	2b00      	cmp	r3, #0
   11848:	d1ee      	bne.n	11828 <buffer_write+0xe>
}
   1184a:	bf00      	nop
   1184c:	bf00      	nop
   1184e:	3718      	adds	r7, #24
   11850:	46bd      	mov	sp, r7
   11852:	bd80      	pop	{r7, pc}

00011854 <log_output_flush>:
{
   11854:	b580      	push	{r7, lr}
   11856:	b082      	sub	sp, #8
   11858:	af00      	add	r7, sp, #0
   1185a:	6078      	str	r0, [r7, #4]
	buffer_write(output->func, output->buf,
   1185c:	687b      	ldr	r3, [r7, #4]
   1185e:	6818      	ldr	r0, [r3, #0]
   11860:	687b      	ldr	r3, [r7, #4]
   11862:	6899      	ldr	r1, [r3, #8]
		     output->control_block->offset,
   11864:	687b      	ldr	r3, [r7, #4]
   11866:	685b      	ldr	r3, [r3, #4]
   11868:	681b      	ldr	r3, [r3, #0]
	buffer_write(output->func, output->buf,
   1186a:	461a      	mov	r2, r3
		     output->control_block->ctx);
   1186c:	687b      	ldr	r3, [r7, #4]
   1186e:	685b      	ldr	r3, [r3, #4]
	buffer_write(output->func, output->buf,
   11870:	685b      	ldr	r3, [r3, #4]
   11872:	f7ff ffd2 	bl	1181a <buffer_write>
	output->control_block->offset = 0;
   11876:	687b      	ldr	r3, [r7, #4]
   11878:	685b      	ldr	r3, [r3, #4]
   1187a:	2200      	movs	r2, #0
   1187c:	601a      	str	r2, [r3, #0]
}
   1187e:	bf00      	nop
   11880:	3708      	adds	r7, #8
   11882:	46bd      	mov	sp, r7
   11884:	bd80      	pop	{r7, pc}

00011886 <color_prefix>:
{
   11886:	b580      	push	{r7, lr}
   11888:	b084      	sub	sp, #16
   1188a:	af00      	add	r7, sp, #0
   1188c:	60f8      	str	r0, [r7, #12]
   1188e:	460b      	mov	r3, r1
   11890:	607a      	str	r2, [r7, #4]
   11892:	72fb      	strb	r3, [r7, #11]
	color_print(output, color, true, level);
   11894:	7af9      	ldrb	r1, [r7, #11]
   11896:	687b      	ldr	r3, [r7, #4]
   11898:	2201      	movs	r2, #1
   1189a:	68f8      	ldr	r0, [r7, #12]
   1189c:	f7f1 fc88 	bl	31b0 <color_print>
}
   118a0:	bf00      	nop
   118a2:	3710      	adds	r7, #16
   118a4:	46bd      	mov	sp, r7
   118a6:	bd80      	pop	{r7, pc}

000118a8 <color_postfix>:
{
   118a8:	b580      	push	{r7, lr}
   118aa:	b084      	sub	sp, #16
   118ac:	af00      	add	r7, sp, #0
   118ae:	60f8      	str	r0, [r7, #12]
   118b0:	460b      	mov	r3, r1
   118b2:	607a      	str	r2, [r7, #4]
   118b4:	72fb      	strb	r3, [r7, #11]
	color_print(output, color, false, level);
   118b6:	7af9      	ldrb	r1, [r7, #11]
   118b8:	687b      	ldr	r3, [r7, #4]
   118ba:	2200      	movs	r2, #0
   118bc:	68f8      	ldr	r0, [r7, #12]
   118be:	f7f1 fc77 	bl	31b0 <color_print>
}
   118c2:	bf00      	nop
   118c4:	3710      	adds	r7, #16
   118c6:	46bd      	mov	sp, r7
   118c8:	bd80      	pop	{r7, pc}

000118ca <prefix_print>:
{
   118ca:	b580      	push	{r7, lr}
   118cc:	b088      	sub	sp, #32
   118ce:	af02      	add	r7, sp, #8
   118d0:	60f8      	str	r0, [r7, #12]
   118d2:	60b9      	str	r1, [r7, #8]
   118d4:	603b      	str	r3, [r7, #0]
   118d6:	4613      	mov	r3, r2
   118d8:	71fb      	strb	r3, [r7, #7]
	uint32_t length = 0U;
   118da:	2300      	movs	r3, #0
   118dc:	613b      	str	r3, [r7, #16]
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   118de:	68bb      	ldr	r3, [r7, #8]
   118e0:	f003 0302 	and.w	r3, r3, #2
   118e4:	2b00      	cmp	r3, #0
   118e6:	bf14      	ite	ne
   118e8:	2301      	movne	r3, #1
   118ea:	2300      	moveq	r3, #0
   118ec:	75fb      	strb	r3, [r7, #23]
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   118ee:	68bb      	ldr	r3, [r7, #8]
   118f0:	f003 0301 	and.w	r3, r3, #1
   118f4:	2b00      	cmp	r3, #0
   118f6:	bf14      	ite	ne
   118f8:	2301      	movne	r3, #1
   118fa:	2300      	moveq	r3, #0
   118fc:	75bb      	strb	r3, [r7, #22]
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   118fe:	68bb      	ldr	r3, [r7, #8]
   11900:	f003 0308 	and.w	r3, r3, #8
   11904:	2b00      	cmp	r3, #0
   11906:	bf14      	ite	ne
   11908:	2301      	movne	r3, #1
   1190a:	2300      	moveq	r3, #0
   1190c:	757b      	strb	r3, [r7, #21]
	if (stamp) {
   1190e:	7dfb      	ldrb	r3, [r7, #23]
   11910:	2b00      	cmp	r3, #0
   11912:	d009      	beq.n	11928 <prefix_print+0x5e>
		length += timestamp_print(output, flags, timestamp);
   11914:	683a      	ldr	r2, [r7, #0]
   11916:	68b9      	ldr	r1, [r7, #8]
   11918:	68f8      	ldr	r0, [r7, #12]
   1191a:	f7f1 fbb5 	bl	3088 <timestamp_print>
   1191e:	4603      	mov	r3, r0
   11920:	461a      	mov	r2, r3
   11922:	693b      	ldr	r3, [r7, #16]
   11924:	4413      	add	r3, r2
   11926:	613b      	str	r3, [r7, #16]
		color_prefix(output, colors_on, level);
   11928:	f897 2020 	ldrb.w	r2, [r7, #32]
   1192c:	7dbb      	ldrb	r3, [r7, #22]
   1192e:	4619      	mov	r1, r3
   11930:	68f8      	ldr	r0, [r7, #12]
   11932:	f7ff ffa8 	bl	11886 <color_prefix>
	length += ids_print(output, level_on, func_on,
   11936:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
   1193a:	f897 3020 	ldrb.w	r3, [r7, #32]
   1193e:	79fa      	ldrb	r2, [r7, #7]
   11940:	7d79      	ldrb	r1, [r7, #21]
   11942:	9301      	str	r3, [sp, #4]
   11944:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
   11948:	9300      	str	r3, [sp, #0]
   1194a:	4603      	mov	r3, r0
   1194c:	68f8      	ldr	r0, [r7, #12]
   1194e:	f7f1 fc5b 	bl	3208 <ids_print>
   11952:	4603      	mov	r3, r0
   11954:	461a      	mov	r2, r3
   11956:	693b      	ldr	r3, [r7, #16]
   11958:	4413      	add	r3, r2
   1195a:	613b      	str	r3, [r7, #16]
	return length;
   1195c:	693b      	ldr	r3, [r7, #16]
}
   1195e:	4618      	mov	r0, r3
   11960:	3718      	adds	r7, #24
   11962:	46bd      	mov	sp, r7
   11964:	bd80      	pop	{r7, pc}

00011966 <postfix_print>:
{
   11966:	b580      	push	{r7, lr}
   11968:	b084      	sub	sp, #16
   1196a:	af00      	add	r7, sp, #0
   1196c:	60f8      	str	r0, [r7, #12]
   1196e:	60b9      	str	r1, [r7, #8]
   11970:	4613      	mov	r3, r2
   11972:	71fb      	strb	r3, [r7, #7]
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   11974:	68bb      	ldr	r3, [r7, #8]
   11976:	f003 0301 	and.w	r3, r3, #1
   1197a:	2b00      	cmp	r3, #0
   1197c:	bf14      	ite	ne
   1197e:	2301      	movne	r3, #1
   11980:	2300      	moveq	r3, #0
   11982:	b2db      	uxtb	r3, r3
   11984:	79fa      	ldrb	r2, [r7, #7]
   11986:	4619      	mov	r1, r3
   11988:	68f8      	ldr	r0, [r7, #12]
   1198a:	f7ff ff8d 	bl	118a8 <color_postfix>
	newline_print(output, flags);
   1198e:	68b9      	ldr	r1, [r7, #8]
   11990:	68f8      	ldr	r0, [r7, #12]
   11992:	f7f1 fc83 	bl	329c <newline_print>
}
   11996:	bf00      	nop
   11998:	3710      	adds	r7, #16
   1199a:	46bd      	mov	sp, r7
   1199c:	bd80      	pop	{r7, pc}

0001199e <log_output_msg_process>:
{
   1199e:	b580      	push	{r7, lr}
   119a0:	b08e      	sub	sp, #56	; 0x38
   119a2:	af04      	add	r7, sp, #16
   119a4:	60f8      	str	r0, [r7, #12]
   119a6:	60b9      	str	r1, [r7, #8]
   119a8:	607a      	str	r2, [r7, #4]
	bool std_msg = log_msg_is_std(msg);
   119aa:	68b8      	ldr	r0, [r7, #8]
   119ac:	f7ff ff10 	bl	117d0 <log_msg_is_std>
   119b0:	4603      	mov	r3, r0
   119b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t timestamp = log_msg_timestamp_get(msg);
   119b6:	68b8      	ldr	r0, [r7, #8]
   119b8:	f7ff feff 	bl	117ba <log_msg_timestamp_get>
   119bc:	6238      	str	r0, [r7, #32]
	uint8_t level = (uint8_t)log_msg_level_get(msg);
   119be:	68b8      	ldr	r0, [r7, #8]
   119c0:	f7ff feed 	bl	1179e <log_msg_level_get>
   119c4:	4603      	mov	r3, r0
   119c6:	77fb      	strb	r3, [r7, #31]
	uint8_t domain_id = (uint8_t)log_msg_domain_id_get(msg);
   119c8:	68b8      	ldr	r0, [r7, #8]
   119ca:	f7ff fecc 	bl	11766 <log_msg_domain_id_get>
   119ce:	4603      	mov	r3, r0
   119d0:	77bb      	strb	r3, [r7, #30]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
   119d2:	68b8      	ldr	r0, [r7, #8]
   119d4:	f7ff fed5 	bl	11782 <log_msg_source_id_get>
   119d8:	4603      	mov	r3, r0
   119da:	83bb      	strh	r3, [r7, #28]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
   119dc:	7ffb      	ldrb	r3, [r7, #31]
   119de:	2b00      	cmp	r3, #0
   119e0:	bf0c      	ite	eq
   119e2:	2301      	moveq	r3, #1
   119e4:	2300      	movne	r3, #0
   119e6:	76fb      	strb	r3, [r7, #27]
			0 : prefix_print(output, flags, std_msg, timestamp,
   119e8:	7efb      	ldrb	r3, [r7, #27]
   119ea:	2b00      	cmp	r3, #0
   119ec:	d10f      	bne.n	11a0e <log_output_msg_process+0x70>
   119ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   119f2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
   119f6:	9302      	str	r3, [sp, #8]
   119f8:	7fbb      	ldrb	r3, [r7, #30]
   119fa:	9301      	str	r3, [sp, #4]
   119fc:	7ffb      	ldrb	r3, [r7, #31]
   119fe:	9300      	str	r3, [sp, #0]
   11a00:	6a3b      	ldr	r3, [r7, #32]
   11a02:	6879      	ldr	r1, [r7, #4]
   11a04:	68f8      	ldr	r0, [r7, #12]
   11a06:	f7ff ff60 	bl	118ca <prefix_print>
   11a0a:	4603      	mov	r3, r0
   11a0c:	e000      	b.n	11a10 <log_output_msg_process+0x72>
   11a0e:	2300      	movs	r3, #0
	prefix_offset = raw_string ?
   11a10:	617b      	str	r3, [r7, #20]
	if (log_msg_is_std(msg)) {
   11a12:	68b8      	ldr	r0, [r7, #8]
   11a14:	f7ff fedc 	bl	117d0 <log_msg_is_std>
   11a18:	4603      	mov	r3, r0
   11a1a:	2b00      	cmp	r3, #0
   11a1c:	d004      	beq.n	11a28 <log_output_msg_process+0x8a>
		std_print(msg, output);
   11a1e:	68f9      	ldr	r1, [r7, #12]
   11a20:	68b8      	ldr	r0, [r7, #8]
   11a22:	f7f1 fc5d 	bl	32e0 <std_print>
   11a26:	e00d      	b.n	11a44 <log_output_msg_process+0xa6>
	} else if (raw_string) {
   11a28:	7efb      	ldrb	r3, [r7, #27]
   11a2a:	2b00      	cmp	r3, #0
   11a2c:	d004      	beq.n	11a38 <log_output_msg_process+0x9a>
		raw_string_print(msg, output);
   11a2e:	68f9      	ldr	r1, [r7, #12]
   11a30:	68b8      	ldr	r0, [r7, #8]
   11a32:	f7f1 ffd7 	bl	39e4 <raw_string_print>
   11a36:	e005      	b.n	11a44 <log_output_msg_process+0xa6>
		hexdump_print(msg, output, prefix_offset, flags);
   11a38:	687b      	ldr	r3, [r7, #4]
   11a3a:	697a      	ldr	r2, [r7, #20]
   11a3c:	68f9      	ldr	r1, [r7, #12]
   11a3e:	68b8      	ldr	r0, [r7, #8]
   11a40:	f7f1 ff9c 	bl	397c <hexdump_print>
	if (!raw_string) {
   11a44:	7efb      	ldrb	r3, [r7, #27]
   11a46:	f083 0301 	eor.w	r3, r3, #1
   11a4a:	b2db      	uxtb	r3, r3
   11a4c:	2b00      	cmp	r3, #0
   11a4e:	d005      	beq.n	11a5c <log_output_msg_process+0xbe>
		postfix_print(output, flags, level);
   11a50:	7ffb      	ldrb	r3, [r7, #31]
   11a52:	461a      	mov	r2, r3
   11a54:	6879      	ldr	r1, [r7, #4]
   11a56:	68f8      	ldr	r0, [r7, #12]
   11a58:	f7ff ff85 	bl	11966 <postfix_print>
	log_output_flush(output);
   11a5c:	68f8      	ldr	r0, [r7, #12]
   11a5e:	f7ff fef9 	bl	11854 <log_output_flush>
}
   11a62:	3728      	adds	r7, #40	; 0x28
   11a64:	46bd      	mov	sp, r7
   11a66:	bd80      	pop	{r7, pc}

00011a68 <log_backend_std_get_flags>:
 * @ingroup logger
 * @{
 */

static inline uint32_t log_backend_std_get_flags(void)
{
   11a68:	b480      	push	{r7}
   11a6a:	b083      	sub	sp, #12
   11a6c:	af00      	add	r7, sp, #0
	uint32_t flags = (LOG_OUTPUT_FLAG_LEVEL | LOG_OUTPUT_FLAG_TIMESTAMP);
   11a6e:	230a      	movs	r3, #10
   11a70:	607b      	str	r3, [r7, #4]

	if (IS_ENABLED(CONFIG_LOG_BACKEND_SHOW_COLOR)) {
		flags |= LOG_OUTPUT_FLAG_COLORS;
   11a72:	687b      	ldr	r3, [r7, #4]
   11a74:	f043 0301 	orr.w	r3, r3, #1
   11a78:	607b      	str	r3, [r7, #4]
	}

	if (IS_ENABLED(CONFIG_LOG_BACKEND_FORMAT_TIMESTAMP)) {
		flags |= LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP;
   11a7a:	687b      	ldr	r3, [r7, #4]
   11a7c:	f043 0304 	orr.w	r3, r3, #4
   11a80:	607b      	str	r3, [r7, #4]
	}

	return flags;
   11a82:	687b      	ldr	r3, [r7, #4]
}
   11a84:	4618      	mov	r0, r3
   11a86:	370c      	adds	r7, #12
   11a88:	46bd      	mov	sp, r7
   11a8a:	bc80      	pop	{r7}
   11a8c:	4770      	bx	lr

00011a8e <log_backend_std_put>:
 * @param msg		Log message.
 */
static inline void
log_backend_std_put(const struct log_output *const output, uint32_t flags,
		    struct log_msg *msg)
{
   11a8e:	b580      	push	{r7, lr}
   11a90:	b084      	sub	sp, #16
   11a92:	af00      	add	r7, sp, #0
   11a94:	60f8      	str	r0, [r7, #12]
   11a96:	60b9      	str	r1, [r7, #8]
   11a98:	607a      	str	r2, [r7, #4]
	log_msg_get(msg);
   11a9a:	6878      	ldr	r0, [r7, #4]
   11a9c:	f7ff fc68 	bl	11370 <log_msg_get>

	flags |= log_backend_std_get_flags();
   11aa0:	f7ff ffe2 	bl	11a68 <log_backend_std_get_flags>
   11aa4:	4602      	mov	r2, r0
   11aa6:	68bb      	ldr	r3, [r7, #8]
   11aa8:	4313      	orrs	r3, r2
   11aaa:	60bb      	str	r3, [r7, #8]

	log_output_msg_process(output, msg, flags);
   11aac:	68ba      	ldr	r2, [r7, #8]
   11aae:	6879      	ldr	r1, [r7, #4]
   11ab0:	68f8      	ldr	r0, [r7, #12]
   11ab2:	f7ff ff74 	bl	1199e <log_output_msg_process>

	log_msg_put(msg);
   11ab6:	6878      	ldr	r0, [r7, #4]
   11ab8:	f7ff fc67 	bl	1138a <log_msg_put>
}
   11abc:	bf00      	nop
   11abe:	3710      	adds	r7, #16
   11ac0:	46bd      	mov	sp, r7
   11ac2:	bd80      	pop	{r7, pc}

00011ac4 <log_backend_std_panic>:
 *
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
   11ac4:	b580      	push	{r7, lr}
   11ac6:	b082      	sub	sp, #8
   11ac8:	af00      	add	r7, sp, #0
   11aca:	6078      	str	r0, [r7, #4]
	log_output_flush(output);
   11acc:	6878      	ldr	r0, [r7, #4]
   11ace:	f7ff fec1 	bl	11854 <log_output_flush>
}
   11ad2:	bf00      	nop
   11ad4:	3708      	adds	r7, #8
   11ad6:	46bd      	mov	sp, r7
   11ad8:	bd80      	pop	{r7, pc}

00011ada <log_backend_std_dropped>:
 * @param output	Log output instance.
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
   11ada:	b580      	push	{r7, lr}
   11adc:	b082      	sub	sp, #8
   11ade:	af00      	add	r7, sp, #0
   11ae0:	6078      	str	r0, [r7, #4]
   11ae2:	6039      	str	r1, [r7, #0]
	log_output_dropped_process(output, cnt);
   11ae4:	6839      	ldr	r1, [r7, #0]
   11ae6:	6878      	ldr	r0, [r7, #4]
   11ae8:	f7f1 ffd0 	bl	3a8c <log_output_dropped_process>
}
   11aec:	bf00      	nop
   11aee:	3708      	adds	r7, #8
   11af0:	46bd      	mov	sp, r7
   11af2:	bd80      	pop	{r7, pc}

00011af4 <device_get_binding>:
{
   11af4:	b580      	push	{r7, lr}
   11af6:	b082      	sub	sp, #8
   11af8:	af00      	add	r7, sp, #0
   11afa:	6078      	str	r0, [r7, #4]
	return z_impl_device_get_binding(name);
   11afc:	6878      	ldr	r0, [r7, #4]
   11afe:	f7f8 ffc1 	bl	aa84 <z_impl_device_get_binding>
   11b02:	4603      	mov	r3, r0
}
   11b04:	4618      	mov	r0, r3
   11b06:	3708      	adds	r7, #8
   11b08:	46bd      	mov	sp, r7
   11b0a:	bd80      	pop	{r7, pc}

00011b0c <z_impl_uart_poll_out>:
{
   11b0c:	b580      	push	{r7, lr}
   11b0e:	b084      	sub	sp, #16
   11b10:	af00      	add	r7, sp, #0
   11b12:	6078      	str	r0, [r7, #4]
   11b14:	460b      	mov	r3, r1
   11b16:	70fb      	strb	r3, [r7, #3]
	const struct uart_driver_api *api =
   11b18:	687b      	ldr	r3, [r7, #4]
   11b1a:	689b      	ldr	r3, [r3, #8]
   11b1c:	60fb      	str	r3, [r7, #12]
	api->poll_out(dev, out_char);
   11b1e:	68fb      	ldr	r3, [r7, #12]
   11b20:	69db      	ldr	r3, [r3, #28]
   11b22:	78fa      	ldrb	r2, [r7, #3]
   11b24:	4611      	mov	r1, r2
   11b26:	6878      	ldr	r0, [r7, #4]
   11b28:	4798      	blx	r3
}
   11b2a:	bf00      	nop
   11b2c:	3710      	adds	r7, #16
   11b2e:	46bd      	mov	sp, r7
   11b30:	bd80      	pop	{r7, pc}

00011b32 <uart_poll_out>:
{
   11b32:	b580      	push	{r7, lr}
   11b34:	b082      	sub	sp, #8
   11b36:	af00      	add	r7, sp, #0
   11b38:	6078      	str	r0, [r7, #4]
   11b3a:	460b      	mov	r3, r1
   11b3c:	70fb      	strb	r3, [r7, #3]
	z_impl_uart_poll_out(dev, out_char);
   11b3e:	78fb      	ldrb	r3, [r7, #3]
   11b40:	4619      	mov	r1, r3
   11b42:	6878      	ldr	r0, [r7, #4]
   11b44:	f7ff ffe2 	bl	11b0c <z_impl_uart_poll_out>
}
   11b48:	bf00      	nop
   11b4a:	3708      	adds	r7, #8
   11b4c:	46bd      	mov	sp, r7
   11b4e:	bd80      	pop	{r7, pc}

00011b50 <z_snode_next_peek>:
{
   11b50:	b480      	push	{r7}
   11b52:	b083      	sub	sp, #12
   11b54:	af00      	add	r7, sp, #0
   11b56:	6078      	str	r0, [r7, #4]
	return node->next;
   11b58:	687b      	ldr	r3, [r7, #4]
   11b5a:	681b      	ldr	r3, [r3, #0]
}
   11b5c:	4618      	mov	r0, r3
   11b5e:	370c      	adds	r7, #12
   11b60:	46bd      	mov	sp, r7
   11b62:	bc80      	pop	{r7}
   11b64:	4770      	bx	lr

00011b66 <sys_slist_peek_head>:
{
   11b66:	b480      	push	{r7}
   11b68:	b083      	sub	sp, #12
   11b6a:	af00      	add	r7, sp, #0
   11b6c:	6078      	str	r0, [r7, #4]
	return list->head;
   11b6e:	687b      	ldr	r3, [r7, #4]
   11b70:	681b      	ldr	r3, [r3, #0]
}
   11b72:	4618      	mov	r0, r3
   11b74:	370c      	adds	r7, #12
   11b76:	46bd      	mov	sp, r7
   11b78:	bc80      	pop	{r7}
   11b7a:	4770      	bx	lr

00011b7c <sys_slist_peek_next_no_check>:
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11b7c:	b580      	push	{r7, lr}
   11b7e:	b082      	sub	sp, #8
   11b80:	af00      	add	r7, sp, #0
   11b82:	6078      	str	r0, [r7, #4]
   11b84:	6878      	ldr	r0, [r7, #4]
   11b86:	f7ff ffe3 	bl	11b50 <z_snode_next_peek>
   11b8a:	4603      	mov	r3, r0
   11b8c:	4618      	mov	r0, r3
   11b8e:	3708      	adds	r7, #8
   11b90:	46bd      	mov	sp, r7
   11b92:	bd80      	pop	{r7, pc}

00011b94 <sys_slist_peek_next>:
Z_GENLIST_PEEK_NEXT(slist, snode)
   11b94:	b580      	push	{r7, lr}
   11b96:	b082      	sub	sp, #8
   11b98:	af00      	add	r7, sp, #0
   11b9a:	6078      	str	r0, [r7, #4]
   11b9c:	687b      	ldr	r3, [r7, #4]
   11b9e:	2b00      	cmp	r3, #0
   11ba0:	d004      	beq.n	11bac <sys_slist_peek_next+0x18>
   11ba2:	6878      	ldr	r0, [r7, #4]
   11ba4:	f7ff ffea 	bl	11b7c <sys_slist_peek_next_no_check>
   11ba8:	4603      	mov	r3, r0
   11baa:	e000      	b.n	11bae <sys_slist_peek_next+0x1a>
   11bac:	2300      	movs	r3, #0
   11bae:	4618      	mov	r0, r3
   11bb0:	3708      	adds	r7, #8
   11bb2:	46bd      	mov	sp, r7
   11bb4:	bd80      	pop	{r7, pc}

00011bb6 <k_is_user_context>:
{
   11bb6:	b480      	push	{r7}
   11bb8:	af00      	add	r7, sp, #0
	return false;
   11bba:	2300      	movs	r3, #0
}
   11bbc:	4618      	mov	r0, r3
   11bbe:	46bd      	mov	sp, r7
   11bc0:	bc80      	pop	{r7}
   11bc2:	4770      	bx	lr

00011bc4 <pm_debug_start_timer>:
static inline void pm_debug_start_timer(void) { }
   11bc4:	b480      	push	{r7}
   11bc6:	af00      	add	r7, sp, #0
   11bc8:	bf00      	nop
   11bca:	46bd      	mov	sp, r7
   11bcc:	bc80      	pop	{r7}
   11bce:	4770      	bx	lr

00011bd0 <pm_debug_stop_timer>:
static inline void pm_debug_stop_timer(void) { }
   11bd0:	b480      	push	{r7}
   11bd2:	af00      	add	r7, sp, #0
   11bd4:	bf00      	nop
   11bd6:	46bd      	mov	sp, r7
   11bd8:	bc80      	pop	{r7}
   11bda:	4770      	bx	lr

00011bdc <pm_log_debug_info>:
static void pm_log_debug_info(enum pm_state state) { }
   11bdc:	b480      	push	{r7}
   11bde:	b083      	sub	sp, #12
   11be0:	af00      	add	r7, sp, #0
   11be2:	4603      	mov	r3, r0
   11be4:	71fb      	strb	r3, [r7, #7]
   11be6:	bf00      	nop
   11be8:	370c      	adds	r7, #12
   11bea:	46bd      	mov	sp, r7
   11bec:	bc80      	pop	{r7}
   11bee:	4770      	bx	lr

00011bf0 <atomic_get>:
{
   11bf0:	b480      	push	{r7}
   11bf2:	b083      	sub	sp, #12
   11bf4:	af00      	add	r7, sp, #0
   11bf6:	6078      	str	r0, [r7, #4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   11bf8:	687b      	ldr	r3, [r7, #4]
   11bfa:	e8d3 3faf 	lda	r3, [r3]
}
   11bfe:	4618      	mov	r0, r3
   11c00:	370c      	adds	r7, #12
   11c02:	46bd      	mov	sp, r7
   11c04:	bc80      	pop	{r7}
   11c06:	4770      	bx	lr

00011c08 <k_is_user_context>:
{
   11c08:	b480      	push	{r7}
   11c0a:	af00      	add	r7, sp, #0
	return false;
   11c0c:	2300      	movs	r3, #0
}
   11c0e:	4618      	mov	r0, r3
   11c10:	46bd      	mov	sp, r7
   11c12:	bc80      	pop	{r7}
   11c14:	4770      	bx	lr

00011c16 <device_get_binding>:
{
   11c16:	b580      	push	{r7, lr}
   11c18:	b082      	sub	sp, #8
   11c1a:	af00      	add	r7, sp, #0
   11c1c:	6078      	str	r0, [r7, #4]
	return z_impl_device_get_binding(name);
   11c1e:	6878      	ldr	r0, [r7, #4]
   11c20:	f7f8 ff30 	bl	aa84 <z_impl_device_get_binding>
   11c24:	4603      	mov	r3, r0
}
   11c26:	4618      	mov	r0, r3
   11c28:	3708      	adds	r7, #8
   11c2a:	46bd      	mov	sp, r7
   11c2c:	bd80      	pop	{r7, pc}

00011c2e <z_impl_uart_poll_out>:
{
   11c2e:	b580      	push	{r7, lr}
   11c30:	b084      	sub	sp, #16
   11c32:	af00      	add	r7, sp, #0
   11c34:	6078      	str	r0, [r7, #4]
   11c36:	460b      	mov	r3, r1
   11c38:	70fb      	strb	r3, [r7, #3]
	const struct uart_driver_api *api =
   11c3a:	687b      	ldr	r3, [r7, #4]
   11c3c:	689b      	ldr	r3, [r3, #8]
   11c3e:	60fb      	str	r3, [r7, #12]
	api->poll_out(dev, out_char);
   11c40:	68fb      	ldr	r3, [r7, #12]
   11c42:	69db      	ldr	r3, [r3, #28]
   11c44:	78fa      	ldrb	r2, [r7, #3]
   11c46:	4611      	mov	r1, r2
   11c48:	6878      	ldr	r0, [r7, #4]
   11c4a:	4798      	blx	r3
}
   11c4c:	bf00      	nop
   11c4e:	3710      	adds	r7, #16
   11c50:	46bd      	mov	sp, r7
   11c52:	bd80      	pop	{r7, pc}

00011c54 <uart_poll_out>:
{
   11c54:	b580      	push	{r7, lr}
   11c56:	b082      	sub	sp, #8
   11c58:	af00      	add	r7, sp, #0
   11c5a:	6078      	str	r0, [r7, #4]
   11c5c:	460b      	mov	r3, r1
   11c5e:	70fb      	strb	r3, [r7, #3]
	z_impl_uart_poll_out(dev, out_char);
   11c60:	78fb      	ldrb	r3, [r7, #3]
   11c62:	4619      	mov	r1, r3
   11c64:	6878      	ldr	r0, [r7, #4]
   11c66:	f7ff ffe2 	bl	11c2e <z_impl_uart_poll_out>
}
   11c6a:	bf00      	nop
   11c6c:	3708      	adds	r7, #8
   11c6e:	46bd      	mov	sp, r7
   11c70:	bd80      	pop	{r7, pc}

00011c72 <atomic_set>:
{
   11c72:	b480      	push	{r7}
   11c74:	b083      	sub	sp, #12
   11c76:	af00      	add	r7, sp, #0
   11c78:	6078      	str	r0, [r7, #4]
   11c7a:	6039      	str	r1, [r7, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11c7c:	683a      	ldr	r2, [r7, #0]
   11c7e:	687b      	ldr	r3, [r7, #4]
   11c80:	e8d3 1fef 	ldaex	r1, [r3]
   11c84:	e8c3 2fe0 	stlex	r0, r2, [r3]
   11c88:	2800      	cmp	r0, #0
   11c8a:	d1f9      	bne.n	11c80 <atomic_set+0xe>
   11c8c:	460b      	mov	r3, r1
}
   11c8e:	4618      	mov	r0, r3
   11c90:	370c      	adds	r7, #12
   11c92:	46bd      	mov	sp, r7
   11c94:	bc80      	pop	{r7}
   11c96:	4770      	bx	lr

00011c98 <atomic_and>:
 * @param value Value to AND.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
   11c98:	b480      	push	{r7}
   11c9a:	b083      	sub	sp, #12
   11c9c:	af00      	add	r7, sp, #0
   11c9e:	6078      	str	r0, [r7, #4]
   11ca0:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11ca2:	683a      	ldr	r2, [r7, #0]
   11ca4:	687b      	ldr	r3, [r7, #4]
   11ca6:	e8d3 1fef 	ldaex	r1, [r3]
   11caa:	ea01 0002 	and.w	r0, r1, r2
   11cae:	e8c3 0fec 	stlex	ip, r0, [r3]
   11cb2:	f1bc 0f00 	cmp.w	ip, #0
   11cb6:	d1f6      	bne.n	11ca6 <atomic_and+0xe>
   11cb8:	460b      	mov	r3, r1
}
   11cba:	4618      	mov	r0, r3
   11cbc:	370c      	adds	r7, #12
   11cbe:	46bd      	mov	sp, r7
   11cc0:	bc80      	pop	{r7}
   11cc2:	4770      	bx	lr

00011cc4 <nrf_event_readback>:
#endif

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
   11cc4:	b480      	push	{r7}
   11cc6:	b083      	sub	sp, #12
   11cc8:	af00      	add	r7, sp, #0
   11cca:	6078      	str	r0, [r7, #4]
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   11ccc:	687b      	ldr	r3, [r7, #4]
   11cce:	681b      	ldr	r3, [r3, #0]
#else
    (void)p_event_reg;
#endif
}
   11cd0:	bf00      	nop
   11cd2:	370c      	adds	r7, #12
   11cd4:	46bd      	mov	sp, r7
   11cd6:	bc80      	pop	{r7}
   11cd8:	4770      	bx	lr

00011cda <k_is_user_context>:
{
   11cda:	b480      	push	{r7}
   11cdc:	af00      	add	r7, sp, #0
	return false;
   11cde:	2300      	movs	r3, #0
}
   11ce0:	4618      	mov	r0, r3
   11ce2:	46bd      	mov	sp, r7
   11ce4:	bc80      	pop	{r7}
   11ce6:	4770      	bx	lr

00011ce8 <k_ms_to_ticks_ceil64>:
{
   11ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   11cec:	b08c      	sub	sp, #48	; 0x30
   11cee:	af00      	add	r7, sp, #0
   11cf0:	e9c7 0100 	strd	r0, r1, [r7]
   11cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
   11cf8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   11cfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11d00:	627b      	str	r3, [r7, #36]	; 0x24
   11d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   11d06:	623b      	str	r3, [r7, #32]
   11d08:	2301      	movs	r3, #1
   11d0a:	77fb      	strb	r3, [r7, #31]
   11d0c:	2300      	movs	r3, #0
   11d0e:	77bb      	strb	r3, [r7, #30]
   11d10:	2301      	movs	r3, #1
   11d12:	777b      	strb	r3, [r7, #29]
   11d14:	2300      	movs	r3, #0
   11d16:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   11d18:	7ffb      	ldrb	r3, [r7, #31]
   11d1a:	2b00      	cmp	r3, #0
   11d1c:	d00f      	beq.n	11d3e <k_ms_to_ticks_ceil64+0x56>
	bool mul_ratio = const_hz &&
   11d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11d20:	6a3b      	ldr	r3, [r7, #32]
   11d22:	429a      	cmp	r2, r3
   11d24:	d20b      	bcs.n	11d3e <k_ms_to_ticks_ceil64+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   11d26:	6a3b      	ldr	r3, [r7, #32]
   11d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11d2a:	fbb3 f2f2 	udiv	r2, r3, r2
   11d2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   11d30:	fb01 f202 	mul.w	r2, r1, r2
   11d34:	1a9b      	subs	r3, r3, r2
   11d36:	2b00      	cmp	r3, #0
   11d38:	d101      	bne.n	11d3e <k_ms_to_ticks_ceil64+0x56>
   11d3a:	2301      	movs	r3, #1
   11d3c:	e000      	b.n	11d40 <k_ms_to_ticks_ceil64+0x58>
   11d3e:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   11d40:	76fb      	strb	r3, [r7, #27]
   11d42:	7efb      	ldrb	r3, [r7, #27]
   11d44:	f003 0301 	and.w	r3, r3, #1
   11d48:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   11d4a:	7ffb      	ldrb	r3, [r7, #31]
   11d4c:	2b00      	cmp	r3, #0
   11d4e:	d00f      	beq.n	11d70 <k_ms_to_ticks_ceil64+0x88>
	bool div_ratio = const_hz &&
   11d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11d52:	6a3b      	ldr	r3, [r7, #32]
   11d54:	429a      	cmp	r2, r3
   11d56:	d90b      	bls.n	11d70 <k_ms_to_ticks_ceil64+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   11d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11d5a:	6a3a      	ldr	r2, [r7, #32]
   11d5c:	fbb3 f2f2 	udiv	r2, r3, r2
   11d60:	6a39      	ldr	r1, [r7, #32]
   11d62:	fb01 f202 	mul.w	r2, r1, r2
   11d66:	1a9b      	subs	r3, r3, r2
   11d68:	2b00      	cmp	r3, #0
   11d6a:	d101      	bne.n	11d70 <k_ms_to_ticks_ceil64+0x88>
   11d6c:	2301      	movs	r3, #1
   11d6e:	e000      	b.n	11d72 <k_ms_to_ticks_ceil64+0x8a>
   11d70:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   11d72:	76bb      	strb	r3, [r7, #26]
   11d74:	7ebb      	ldrb	r3, [r7, #26]
   11d76:	f003 0301 	and.w	r3, r3, #1
   11d7a:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   11d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11d7e:	6a3b      	ldr	r3, [r7, #32]
   11d80:	429a      	cmp	r2, r3
   11d82:	d10a      	bne.n	11d9a <k_ms_to_ticks_ceil64+0xb2>
		return result32 ? ((uint32_t)t) : t;
   11d84:	7fbb      	ldrb	r3, [r7, #30]
   11d86:	2b00      	cmp	r3, #0
   11d88:	d004      	beq.n	11d94 <k_ms_to_ticks_ceil64+0xac>
   11d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11d8c:	461a      	mov	r2, r3
   11d8e:	f04f 0300 	mov.w	r3, #0
   11d92:	e0c7      	b.n	11f24 <k_ms_to_ticks_ceil64+0x23c>
   11d94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   11d98:	e0c4      	b.n	11f24 <k_ms_to_ticks_ceil64+0x23c>
	uint64_t off = 0;
   11d9a:	f04f 0200 	mov.w	r2, #0
   11d9e:	f04f 0300 	mov.w	r3, #0
   11da2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   11da6:	7efb      	ldrb	r3, [r7, #27]
   11da8:	f083 0301 	eor.w	r3, r3, #1
   11dac:	b2db      	uxtb	r3, r3
   11dae:	2b00      	cmp	r3, #0
   11db0:	d01d      	beq.n	11dee <k_ms_to_ticks_ceil64+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   11db2:	7ebb      	ldrb	r3, [r7, #26]
   11db4:	2b00      	cmp	r3, #0
   11db6:	d004      	beq.n	11dc2 <k_ms_to_ticks_ceil64+0xda>
   11db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11dba:	6a3b      	ldr	r3, [r7, #32]
   11dbc:	fbb2 f3f3 	udiv	r3, r2, r3
   11dc0:	e000      	b.n	11dc4 <k_ms_to_ticks_ceil64+0xdc>
   11dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11dc4:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   11dc6:	7f7b      	ldrb	r3, [r7, #29]
   11dc8:	2b00      	cmp	r3, #0
   11dca:	d006      	beq.n	11dda <k_ms_to_ticks_ceil64+0xf2>
			off = rdivisor - 1U;
   11dcc:	68fb      	ldr	r3, [r7, #12]
   11dce:	3b01      	subs	r3, #1
   11dd0:	461a      	mov	r2, r3
   11dd2:	f04f 0300 	mov.w	r3, #0
   11dd6:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   11dda:	7f3b      	ldrb	r3, [r7, #28]
   11ddc:	2b00      	cmp	r3, #0
   11dde:	d006      	beq.n	11dee <k_ms_to_ticks_ceil64+0x106>
			off = rdivisor / 2U;
   11de0:	68fb      	ldr	r3, [r7, #12]
   11de2:	085b      	lsrs	r3, r3, #1
   11de4:	461a      	mov	r2, r3
   11de6:	f04f 0300 	mov.w	r3, #0
   11dea:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   11dee:	7ebb      	ldrb	r3, [r7, #26]
   11df0:	2b00      	cmp	r3, #0
   11df2:	d02a      	beq.n	11e4a <k_ms_to_ticks_ceil64+0x162>
		t += off;
   11df4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   11df8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   11dfc:	1884      	adds	r4, r0, r2
   11dfe:	eb41 0503 	adc.w	r5, r1, r3
   11e02:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   11e06:	7fbb      	ldrb	r3, [r7, #30]
   11e08:	2b00      	cmp	r3, #0
   11e0a:	d010      	beq.n	11e2e <k_ms_to_ticks_ceil64+0x146>
   11e0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   11e10:	2b01      	cmp	r3, #1
   11e12:	bf08      	it	eq
   11e14:	2a00      	cmpeq	r2, #0
   11e16:	d20a      	bcs.n	11e2e <k_ms_to_ticks_ceil64+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
   11e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
   11e1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   11e1c:	6a3b      	ldr	r3, [r7, #32]
   11e1e:	fbb1 f3f3 	udiv	r3, r1, r3
   11e22:	fbb2 f3f3 	udiv	r3, r2, r3
   11e26:	461a      	mov	r2, r3
   11e28:	f04f 0300 	mov.w	r3, #0
   11e2c:	e07a      	b.n	11f24 <k_ms_to_ticks_ceil64+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
   11e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11e30:	6a3b      	ldr	r3, [r7, #32]
   11e32:	fbb2 f3f3 	udiv	r3, r2, r3
   11e36:	461a      	mov	r2, r3
   11e38:	f04f 0300 	mov.w	r3, #0
   11e3c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   11e40:	f7ee f980 	bl	144 <__aeabi_uldivmod>
   11e44:	4602      	mov	r2, r0
   11e46:	460b      	mov	r3, r1
   11e48:	e06c      	b.n	11f24 <k_ms_to_ticks_ceil64+0x23c>
	} else if (mul_ratio) {
   11e4a:	7efb      	ldrb	r3, [r7, #27]
   11e4c:	2b00      	cmp	r3, #0
   11e4e:	d021      	beq.n	11e94 <k_ms_to_ticks_ceil64+0x1ac>
		if (result32) {
   11e50:	7fbb      	ldrb	r3, [r7, #30]
   11e52:	2b00      	cmp	r3, #0
   11e54:	d00a      	beq.n	11e6c <k_ms_to_ticks_ceil64+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
   11e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11e58:	6a39      	ldr	r1, [r7, #32]
   11e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   11e5c:	fbb1 f2f2 	udiv	r2, r1, r2
   11e60:	fb02 f303 	mul.w	r3, r2, r3
   11e64:	461a      	mov	r2, r3
   11e66:	f04f 0300 	mov.w	r3, #0
   11e6a:	e05b      	b.n	11f24 <k_ms_to_ticks_ceil64+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
   11e6c:	6a3a      	ldr	r2, [r7, #32]
   11e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11e70:	fbb2 f3f3 	udiv	r3, r2, r3
   11e74:	461a      	mov	r2, r3
   11e76:	f04f 0300 	mov.w	r3, #0
   11e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11e7c:	fb03 f001 	mul.w	r0, r3, r1
   11e80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   11e82:	fb02 f101 	mul.w	r1, r2, r1
   11e86:	4401      	add	r1, r0
   11e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   11e8a:	fba0 2302 	umull	r2, r3, r0, r2
   11e8e:	4419      	add	r1, r3
   11e90:	460b      	mov	r3, r1
   11e92:	e047      	b.n	11f24 <k_ms_to_ticks_ceil64+0x23c>
		if (result32) {
   11e94:	7fbb      	ldrb	r3, [r7, #30]
   11e96:	2b00      	cmp	r3, #0
   11e98:	d024      	beq.n	11ee4 <k_ms_to_ticks_ceil64+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   11e9a:	6a3b      	ldr	r3, [r7, #32]
   11e9c:	461a      	mov	r2, r3
   11e9e:	f04f 0300 	mov.w	r3, #0
   11ea2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11ea4:	fb03 f001 	mul.w	r0, r3, r1
   11ea8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   11eaa:	fb02 f101 	mul.w	r1, r2, r1
   11eae:	4401      	add	r1, r0
   11eb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   11eb2:	fba0 2302 	umull	r2, r3, r0, r2
   11eb6:	4419      	add	r1, r3
   11eb8:	460b      	mov	r3, r1
   11eba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   11ebe:	eb12 0a00 	adds.w	sl, r2, r0
   11ec2:	eb43 0b01 	adc.w	fp, r3, r1
   11ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11ec8:	461a      	mov	r2, r3
   11eca:	f04f 0300 	mov.w	r3, #0
   11ece:	4650      	mov	r0, sl
   11ed0:	4659      	mov	r1, fp
   11ed2:	f7ee f937 	bl	144 <__aeabi_uldivmod>
   11ed6:	4602      	mov	r2, r0
   11ed8:	460b      	mov	r3, r1
   11eda:	4613      	mov	r3, r2
   11edc:	461a      	mov	r2, r3
   11ede:	f04f 0300 	mov.w	r3, #0
   11ee2:	e01f      	b.n	11f24 <k_ms_to_ticks_ceil64+0x23c>
			return (t * to_hz + off) / from_hz;
   11ee4:	6a3b      	ldr	r3, [r7, #32]
   11ee6:	461a      	mov	r2, r3
   11ee8:	f04f 0300 	mov.w	r3, #0
   11eec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11eee:	fb03 f001 	mul.w	r0, r3, r1
   11ef2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   11ef4:	fb02 f101 	mul.w	r1, r2, r1
   11ef8:	4401      	add	r1, r0
   11efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   11efc:	fba0 2302 	umull	r2, r3, r0, r2
   11f00:	4419      	add	r1, r3
   11f02:	460b      	mov	r3, r1
   11f04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   11f08:	eb12 0800 	adds.w	r8, r2, r0
   11f0c:	eb43 0901 	adc.w	r9, r3, r1
   11f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11f12:	461a      	mov	r2, r3
   11f14:	f04f 0300 	mov.w	r3, #0
   11f18:	4640      	mov	r0, r8
   11f1a:	4649      	mov	r1, r9
   11f1c:	f7ee f912 	bl	144 <__aeabi_uldivmod>
   11f20:	4602      	mov	r2, r0
   11f22:	460b      	mov	r3, r1
}
   11f24:	4610      	mov	r0, r2
   11f26:	4619      	mov	r1, r3
   11f28:	3730      	adds	r7, #48	; 0x30
   11f2a:	46bd      	mov	sp, r7
   11f2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

00011f30 <k_msleep>:
{
   11f30:	b580      	push	{r7, lr}
   11f32:	b082      	sub	sp, #8
   11f34:	af00      	add	r7, sp, #0
   11f36:	6078      	str	r0, [r7, #4]
	return k_sleep(Z_TIMEOUT_MS(ms));
   11f38:	687b      	ldr	r3, [r7, #4]
   11f3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   11f3e:	461a      	mov	r2, r3
   11f40:	ea4f 73e2 	mov.w	r3, r2, asr #31
   11f44:	4610      	mov	r0, r2
   11f46:	4619      	mov	r1, r3
   11f48:	f7ff fece 	bl	11ce8 <k_ms_to_ticks_ceil64>
   11f4c:	4602      	mov	r2, r0
   11f4e:	460b      	mov	r3, r1
   11f50:	4610      	mov	r0, r2
   11f52:	4619      	mov	r1, r3
   11f54:	f000 f811 	bl	11f7a <k_sleep>
   11f58:	4601      	mov	r1, r0
   11f5a:	460b      	mov	r3, r1
}
   11f5c:	4618      	mov	r0, r3
   11f5e:	3708      	adds	r7, #8
   11f60:	46bd      	mov	sp, r7
   11f62:	bd80      	pop	{r7, pc}

00011f64 <k_cpu_atomic_idle>:
 * @param key Interrupt locking key obtained from irq_lock().
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
   11f64:	b580      	push	{r7, lr}
   11f66:	b082      	sub	sp, #8
   11f68:	af00      	add	r7, sp, #0
   11f6a:	6078      	str	r0, [r7, #4]
	arch_cpu_atomic_idle(key);
   11f6c:	6878      	ldr	r0, [r7, #4]
   11f6e:	f7f3 fdeb 	bl	5b48 <arch_cpu_atomic_idle>
}
   11f72:	bf00      	nop
   11f74:	3708      	adds	r7, #8
   11f76:	46bd      	mov	sp, r7
   11f78:	bd80      	pop	{r7, pc}

00011f7a <k_sleep>:
{
   11f7a:	b580      	push	{r7, lr}
   11f7c:	b082      	sub	sp, #8
   11f7e:	af00      	add	r7, sp, #0
   11f80:	e9c7 0100 	strd	r0, r1, [r7]
	return z_impl_k_sleep(timeout);
   11f84:	e9d7 0100 	ldrd	r0, r1, [r7]
   11f88:	f7fc fac0 	bl	e50c <z_impl_k_sleep>
   11f8c:	4603      	mov	r3, r0
}
   11f8e:	4618      	mov	r0, r3
   11f90:	3708      	adds	r7, #8
   11f92:	46bd      	mov	sp, r7
   11f94:	bd80      	pop	{r7, pc}

00011f96 <k_sem_take>:
{
   11f96:	b580      	push	{r7, lr}
   11f98:	b084      	sub	sp, #16
   11f9a:	af00      	add	r7, sp, #0
   11f9c:	60f8      	str	r0, [r7, #12]
   11f9e:	e9c7 2300 	strd	r2, r3, [r7]
	return z_impl_k_sem_take(sem, timeout);
   11fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
   11fa6:	68f8      	ldr	r0, [r7, #12]
   11fa8:	f7fa fbf0 	bl	c78c <z_impl_k_sem_take>
   11fac:	4603      	mov	r3, r0
}
   11fae:	4618      	mov	r0, r3
   11fb0:	3710      	adds	r7, #16
   11fb2:	46bd      	mov	sp, r7
   11fb4:	bd80      	pop	{r7, pc}

00011fb6 <k_sem_give>:
{
   11fb6:	b580      	push	{r7, lr}
   11fb8:	b082      	sub	sp, #8
   11fba:	af00      	add	r7, sp, #0
   11fbc:	6078      	str	r0, [r7, #4]
	z_impl_k_sem_give(sem);
   11fbe:	6878      	ldr	r0, [r7, #4]
   11fc0:	f7fa fb7e 	bl	c6c0 <z_impl_k_sem_give>
}
   11fc4:	bf00      	nop
   11fc6:	3708      	adds	r7, #8
   11fc8:	46bd      	mov	sp, r7
   11fca:	bd80      	pop	{r7, pc}

00011fcc <nrf_clock_int_enable>:
{
   11fcc:	b480      	push	{r7}
   11fce:	b083      	sub	sp, #12
   11fd0:	af00      	add	r7, sp, #0
   11fd2:	6078      	str	r0, [r7, #4]
   11fd4:	6039      	str	r1, [r7, #0]
    p_reg->INTENSET = mask;
   11fd6:	687b      	ldr	r3, [r7, #4]
   11fd8:	683a      	ldr	r2, [r7, #0]
   11fda:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   11fde:	bf00      	nop
   11fe0:	370c      	adds	r7, #12
   11fe2:	46bd      	mov	sp, r7
   11fe4:	bc80      	pop	{r7}
   11fe6:	4770      	bx	lr

00011fe8 <nrf_clock_int_disable>:
{
   11fe8:	b480      	push	{r7}
   11fea:	b083      	sub	sp, #12
   11fec:	af00      	add	r7, sp, #0
   11fee:	6078      	str	r0, [r7, #4]
   11ff0:	6039      	str	r1, [r7, #0]
    p_reg->INTENCLR = mask;
   11ff2:	687b      	ldr	r3, [r7, #4]
   11ff4:	683a      	ldr	r2, [r7, #0]
   11ff6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   11ffa:	bf00      	nop
   11ffc:	370c      	adds	r7, #12
   11ffe:	46bd      	mov	sp, r7
   12000:	bc80      	pop	{r7}
   12002:	4770      	bx	lr

00012004 <nrf_clock_task_trigger>:
{
   12004:	b480      	push	{r7}
   12006:	b083      	sub	sp, #12
   12008:	af00      	add	r7, sp, #0
   1200a:	6078      	str	r0, [r7, #4]
   1200c:	460b      	mov	r3, r1
   1200e:	70fb      	strb	r3, [r7, #3]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12010:	78fb      	ldrb	r3, [r7, #3]
   12012:	687a      	ldr	r2, [r7, #4]
   12014:	4413      	add	r3, r2
   12016:	2201      	movs	r2, #1
   12018:	601a      	str	r2, [r3, #0]
}
   1201a:	bf00      	nop
   1201c:	370c      	adds	r7, #12
   1201e:	46bd      	mov	sp, r7
   12020:	bc80      	pop	{r7}
   12022:	4770      	bx	lr

00012024 <nrf_clock_event_clear>:
{
   12024:	b580      	push	{r7, lr}
   12026:	b082      	sub	sp, #8
   12028:	af00      	add	r7, sp, #0
   1202a:	6078      	str	r0, [r7, #4]
   1202c:	460b      	mov	r3, r1
   1202e:	807b      	strh	r3, [r7, #2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12030:	887b      	ldrh	r3, [r7, #2]
   12032:	687a      	ldr	r2, [r7, #4]
   12034:	4413      	add	r3, r2
   12036:	2200      	movs	r2, #0
   12038:	601a      	str	r2, [r3, #0]
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
   1203a:	887b      	ldrh	r3, [r7, #2]
   1203c:	687a      	ldr	r2, [r7, #4]
   1203e:	4413      	add	r3, r2
   12040:	4618      	mov	r0, r3
   12042:	f7ff fe3f 	bl	11cc4 <nrf_event_readback>
}
   12046:	bf00      	nop
   12048:	3708      	adds	r7, #8
   1204a:	46bd      	mov	sp, r7
   1204c:	bd80      	pop	{r7, pc}

0001204e <nrf_clock_event_check>:
{
   1204e:	b480      	push	{r7}
   12050:	b083      	sub	sp, #12
   12052:	af00      	add	r7, sp, #0
   12054:	6078      	str	r0, [r7, #4]
   12056:	460b      	mov	r3, r1
   12058:	807b      	strh	r3, [r7, #2]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1205a:	887b      	ldrh	r3, [r7, #2]
   1205c:	687a      	ldr	r2, [r7, #4]
   1205e:	4413      	add	r3, r2
   12060:	681b      	ldr	r3, [r3, #0]
   12062:	2b00      	cmp	r3, #0
   12064:	bf14      	ite	ne
   12066:	2301      	movne	r3, #1
   12068:	2300      	moveq	r3, #0
   1206a:	b2db      	uxtb	r3, r3
}
   1206c:	4618      	mov	r0, r3
   1206e:	370c      	adds	r7, #12
   12070:	46bd      	mov	sp, r7
   12072:	bc80      	pop	{r7}
   12074:	4770      	bx	lr

00012076 <nrf_clock_lf_src_set>:

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
   12076:	b480      	push	{r7}
   12078:	b083      	sub	sp, #12
   1207a:	af00      	add	r7, sp, #0
   1207c:	6078      	str	r0, [r7, #4]
   1207e:	460b      	mov	r3, r1
   12080:	70fb      	strb	r3, [r7, #3]
    p_reg->LFCLKSRC = (uint32_t)(source);
   12082:	78fa      	ldrb	r2, [r7, #3]
   12084:	687b      	ldr	r3, [r7, #4]
   12086:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1208a:	bf00      	nop
   1208c:	370c      	adds	r7, #12
   1208e:	46bd      	mov	sp, r7
   12090:	bc80      	pop	{r7}
   12092:	4770      	bx	lr

00012094 <nrf_clock_lf_src_get>:

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_src_get(NRF_CLOCK_Type const * p_reg)
{
   12094:	b480      	push	{r7}
   12096:	b083      	sub	sp, #12
   12098:	af00      	add	r7, sp, #0
   1209a:	6078      	str	r0, [r7, #4]
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1209c:	687b      	ldr	r3, [r7, #4]
   1209e:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   120a2:	b2db      	uxtb	r3, r3
}
   120a4:	4618      	mov	r0, r3
   120a6:	370c      	adds	r7, #12
   120a8:	46bd      	mov	sp, r7
   120aa:	bc80      	pop	{r7}
   120ac:	4770      	bx	lr

000120ae <nrf_clock_lf_srccopy_get>:
    (void)nrf_clock_is_running(p_reg, NRF_CLOCK_DOMAIN_LFCLK, &clk_src);
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
   120ae:	b480      	push	{r7}
   120b0:	b083      	sub	sp, #12
   120b2:	af00      	add	r7, sp, #0
   120b4:	6078      	str	r0, [r7, #4]
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   120b6:	687b      	ldr	r3, [r7, #4]
   120b8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   120bc:	b2db      	uxtb	r3, r3
   120be:	f003 0303 	and.w	r3, r3, #3
   120c2:	b2db      	uxtb	r3, r3
                                >> CLOCK_LFCLKSRCCOPY_SRC_Pos);
}
   120c4:	4618      	mov	r0, r3
   120c6:	370c      	adds	r7, #12
   120c8:	46bd      	mov	sp, r7
   120ca:	bc80      	pop	{r7}
   120cc:	4770      	bx	lr

000120ce <nrfx_clock_lfclk_start>:
    }
}
#endif // defined(CLOCK_FEATURE_HFCLK_DIVIDE_PRESENT) || NRF_CLOCK_HAS_HFCLK_192M

NRFX_STATIC_INLINE void nrfx_clock_lfclk_start(void)
{
   120ce:	b580      	push	{r7, lr}
   120d0:	af00      	add	r7, sp, #0
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   120d2:	2000      	movs	r0, #0
   120d4:	f7f7 fb9c 	bl	9810 <nrfx_clock_start>
}
   120d8:	bf00      	nop
   120da:	bd80      	pop	{r7, pc}

000120dc <nrfx_clock_lfclk_stop>:

NRFX_STATIC_INLINE void nrfx_clock_lfclk_stop(void)
{
   120dc:	b580      	push	{r7, lr}
   120de:	af00      	add	r7, sp, #0
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   120e0:	2000      	movs	r0, #0
   120e2:	f7f7 fc09 	bl	98f8 <nrfx_clock_stop>
}
   120e6:	bf00      	nop
   120e8:	bd80      	pop	{r7, pc}

000120ea <nrfx_clock_hfclk_start>:

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
   120ea:	b580      	push	{r7, lr}
   120ec:	af00      	add	r7, sp, #0
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   120ee:	2001      	movs	r0, #1
   120f0:	f7f7 fb8e 	bl	9810 <nrfx_clock_start>
}
   120f4:	bf00      	nop
   120f6:	bd80      	pop	{r7, pc}

000120f8 <nrfx_clock_hfclk_stop>:

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
   120f8:	b580      	push	{r7, lr}
   120fa:	af00      	add	r7, sp, #0
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   120fc:	2001      	movs	r0, #1
   120fe:	f7f7 fbfb 	bl	98f8 <nrfx_clock_stop>
}
   12102:	bf00      	nop
   12104:	bd80      	pop	{r7, pc}

00012106 <nrfx_clock_is_running>:
{
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
   12106:	b580      	push	{r7, lr}
   12108:	b082      	sub	sp, #8
   1210a:	af00      	add	r7, sp, #0
   1210c:	4603      	mov	r3, r0
   1210e:	6039      	str	r1, [r7, #0]
   12110:	71fb      	strb	r3, [r7, #7]
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   12112:	79fb      	ldrb	r3, [r7, #7]
   12114:	683a      	ldr	r2, [r7, #0]
   12116:	4619      	mov	r1, r3
   12118:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
   1211c:	f7f2 fb76 	bl	480c <nrf_clock_is_running>
   12120:	4603      	mov	r3, r0
}
   12122:	4618      	mov	r0, r3
   12124:	3708      	adds	r7, #8
   12126:	46bd      	mov	sp, r7
   12128:	bd80      	pop	{r7, pc}

0001212a <get_sub_data>:
{
   1212a:	b480      	push	{r7}
   1212c:	b085      	sub	sp, #20
   1212e:	af00      	add	r7, sp, #0
   12130:	6078      	str	r0, [r7, #4]
   12132:	460b      	mov	r3, r1
   12134:	70fb      	strb	r3, [r7, #3]
	struct nrf_clock_control_data *data = dev->data;
   12136:	687b      	ldr	r3, [r7, #4]
   12138:	691b      	ldr	r3, [r3, #16]
   1213a:	60fb      	str	r3, [r7, #12]
	return &data->subsys[type];
   1213c:	78fa      	ldrb	r2, [r7, #3]
   1213e:	4613      	mov	r3, r2
   12140:	005b      	lsls	r3, r3, #1
   12142:	4413      	add	r3, r2
   12144:	009b      	lsls	r3, r3, #2
   12146:	3340      	adds	r3, #64	; 0x40
   12148:	68fa      	ldr	r2, [r7, #12]
   1214a:	4413      	add	r3, r2
}
   1214c:	4618      	mov	r0, r3
   1214e:	3714      	adds	r7, #20
   12150:	46bd      	mov	sp, r7
   12152:	bc80      	pop	{r7}
   12154:	4770      	bx	lr

00012156 <get_sub_config>:
{
   12156:	b480      	push	{r7}
   12158:	b085      	sub	sp, #20
   1215a:	af00      	add	r7, sp, #0
   1215c:	6078      	str	r0, [r7, #4]
   1215e:	460b      	mov	r3, r1
   12160:	70fb      	strb	r3, [r7, #3]
	const struct nrf_clock_control_config *config =
   12162:	687b      	ldr	r3, [r7, #4]
   12164:	685b      	ldr	r3, [r3, #4]
   12166:	60fb      	str	r3, [r7, #12]
	return &config->subsys[type];
   12168:	78fa      	ldrb	r2, [r7, #3]
   1216a:	4613      	mov	r3, r2
   1216c:	005b      	lsls	r3, r3, #1
   1216e:	4413      	add	r3, r2
   12170:	009b      	lsls	r3, r3, #2
   12172:	68fa      	ldr	r2, [r7, #12]
   12174:	4413      	add	r3, r2
}
   12176:	4618      	mov	r0, r3
   12178:	3714      	adds	r7, #20
   1217a:	46bd      	mov	sp, r7
   1217c:	bc80      	pop	{r7}
   1217e:	4770      	bx	lr

00012180 <get_onoff_manager>:
{
   12180:	b480      	push	{r7}
   12182:	b085      	sub	sp, #20
   12184:	af00      	add	r7, sp, #0
   12186:	6078      	str	r0, [r7, #4]
   12188:	460b      	mov	r3, r1
   1218a:	70fb      	strb	r3, [r7, #3]
	struct nrf_clock_control_data *data = dev->data;
   1218c:	687b      	ldr	r3, [r7, #4]
   1218e:	691b      	ldr	r3, [r3, #16]
   12190:	60fb      	str	r3, [r7, #12]
	return &data->mgr[type];
   12192:	78fb      	ldrb	r3, [r7, #3]
   12194:	015b      	lsls	r3, r3, #5
   12196:	68fa      	ldr	r2, [r7, #12]
   12198:	4413      	add	r3, r2
}
   1219a:	4618      	mov	r0, r3
   1219c:	3714      	adds	r7, #20
   1219e:	46bd      	mov	sp, r7
   121a0:	bc80      	pop	{r7}
   121a2:	4770      	bx	lr

000121a4 <set_off_state>:
{
   121a4:	b480      	push	{r7}
   121a6:	b089      	sub	sp, #36	; 0x24
   121a8:	af00      	add	r7, sp, #0
   121aa:	6078      	str	r0, [r7, #4]
   121ac:	6039      	str	r1, [r7, #0]
	int err = 0;
   121ae:	2300      	movs	r3, #0
   121b0:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   121b2:	f04f 0320 	mov.w	r3, #32
   121b6:	f3ef 8211 	mrs	r2, BASEPRI
   121ba:	f383 8811 	msr	BASEPRI, r3
   121be:	f3bf 8f6f 	isb	sy
   121c2:	613a      	str	r2, [r7, #16]
   121c4:	60fb      	str	r3, [r7, #12]
	return key;
   121c6:	693b      	ldr	r3, [r7, #16]
	int key = irq_lock();
   121c8:	61bb      	str	r3, [r7, #24]
	uint32_t current_ctx = GET_CTX(*flags);
   121ca:	687b      	ldr	r3, [r7, #4]
   121cc:	681b      	ldr	r3, [r3, #0]
   121ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   121d2:	617b      	str	r3, [r7, #20]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   121d4:	697b      	ldr	r3, [r7, #20]
   121d6:	2b00      	cmp	r3, #0
   121d8:	d007      	beq.n	121ea <set_off_state+0x46>
   121da:	697a      	ldr	r2, [r7, #20]
   121dc:	683b      	ldr	r3, [r7, #0]
   121de:	429a      	cmp	r2, r3
   121e0:	d003      	beq.n	121ea <set_off_state+0x46>
		err = -EPERM;
   121e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   121e6:	61fb      	str	r3, [r7, #28]
   121e8:	e002      	b.n	121f0 <set_off_state+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   121ea:	687b      	ldr	r3, [r7, #4]
   121ec:	2201      	movs	r2, #1
   121ee:	601a      	str	r2, [r3, #0]
	irq_unlock(key);
   121f0:	69bb      	ldr	r3, [r7, #24]
   121f2:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
   121f4:	68bb      	ldr	r3, [r7, #8]
   121f6:	f383 8811 	msr	BASEPRI, r3
   121fa:	f3bf 8f6f 	isb	sy
}
   121fe:	bf00      	nop
	return err;
   12200:	69fb      	ldr	r3, [r7, #28]
}
   12202:	4618      	mov	r0, r3
   12204:	3724      	adds	r7, #36	; 0x24
   12206:	46bd      	mov	sp, r7
   12208:	bc80      	pop	{r7}
   1220a:	4770      	bx	lr

0001220c <set_starting_state>:
{
   1220c:	b480      	push	{r7}
   1220e:	b089      	sub	sp, #36	; 0x24
   12210:	af00      	add	r7, sp, #0
   12212:	6078      	str	r0, [r7, #4]
   12214:	6039      	str	r1, [r7, #0]
	int err = 0;
   12216:	2300      	movs	r3, #0
   12218:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   1221a:	f04f 0320 	mov.w	r3, #32
   1221e:	f3ef 8211 	mrs	r2, BASEPRI
   12222:	f383 8811 	msr	BASEPRI, r3
   12226:	f3bf 8f6f 	isb	sy
   1222a:	613a      	str	r2, [r7, #16]
   1222c:	60fb      	str	r3, [r7, #12]
	return key;
   1222e:	693b      	ldr	r3, [r7, #16]
	int key = irq_lock();
   12230:	61bb      	str	r3, [r7, #24]
	uint32_t current_ctx = GET_CTX(*flags);
   12232:	687b      	ldr	r3, [r7, #4]
   12234:	681b      	ldr	r3, [r3, #0]
   12236:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1223a:	617b      	str	r3, [r7, #20]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1223c:	687b      	ldr	r3, [r7, #4]
   1223e:	681b      	ldr	r3, [r3, #0]
   12240:	f003 0307 	and.w	r3, r3, #7
   12244:	2b01      	cmp	r3, #1
   12246:	d103      	bne.n	12250 <set_starting_state+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   12248:	687b      	ldr	r3, [r7, #4]
   1224a:	683a      	ldr	r2, [r7, #0]
   1224c:	601a      	str	r2, [r3, #0]
   1224e:	e00a      	b.n	12266 <set_starting_state+0x5a>
	} else if (current_ctx != ctx) {
   12250:	697a      	ldr	r2, [r7, #20]
   12252:	683b      	ldr	r3, [r7, #0]
   12254:	429a      	cmp	r2, r3
   12256:	d003      	beq.n	12260 <set_starting_state+0x54>
		err = -EPERM;
   12258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1225c:	61fb      	str	r3, [r7, #28]
   1225e:	e002      	b.n	12266 <set_starting_state+0x5a>
		err = -EALREADY;
   12260:	f06f 0377 	mvn.w	r3, #119	; 0x77
   12264:	61fb      	str	r3, [r7, #28]
	irq_unlock(key);
   12266:	69bb      	ldr	r3, [r7, #24]
   12268:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
   1226a:	68bb      	ldr	r3, [r7, #8]
   1226c:	f383 8811 	msr	BASEPRI, r3
   12270:	f3bf 8f6f 	isb	sy
}
   12274:	bf00      	nop
	return err;
   12276:	69fb      	ldr	r3, [r7, #28]
}
   12278:	4618      	mov	r0, r3
   1227a:	3724      	adds	r7, #36	; 0x24
   1227c:	46bd      	mov	sp, r7
   1227e:	bc80      	pop	{r7}
   12280:	4770      	bx	lr

00012282 <set_on_state>:
{
   12282:	b480      	push	{r7}
   12284:	b087      	sub	sp, #28
   12286:	af00      	add	r7, sp, #0
   12288:	6078      	str	r0, [r7, #4]
	__asm__ volatile(
   1228a:	f04f 0320 	mov.w	r3, #32
   1228e:	f3ef 8211 	mrs	r2, BASEPRI
   12292:	f383 8811 	msr	BASEPRI, r3
   12296:	f3bf 8f6f 	isb	sy
   1229a:	60fa      	str	r2, [r7, #12]
   1229c:	60bb      	str	r3, [r7, #8]
	return key;
   1229e:	68fb      	ldr	r3, [r7, #12]
	int key = irq_lock();
   122a0:	617b      	str	r3, [r7, #20]
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   122a2:	687b      	ldr	r3, [r7, #4]
   122a4:	681b      	ldr	r3, [r3, #0]
   122a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   122aa:	f043 0202 	orr.w	r2, r3, #2
   122ae:	687b      	ldr	r3, [r7, #4]
   122b0:	601a      	str	r2, [r3, #0]
	irq_unlock(key);
   122b2:	697b      	ldr	r3, [r7, #20]
   122b4:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
   122b6:	693b      	ldr	r3, [r7, #16]
   122b8:	f383 8811 	msr	BASEPRI, r3
   122bc:	f3bf 8f6f 	isb	sy
}
   122c0:	bf00      	nop
}
   122c2:	bf00      	nop
   122c4:	371c      	adds	r7, #28
   122c6:	46bd      	mov	sp, r7
   122c8:	bc80      	pop	{r7}
   122ca:	4770      	bx	lr

000122cc <lfclk_start>:
{
   122cc:	b580      	push	{r7, lr}
   122ce:	af00      	add	r7, sp, #0
	nrfx_clock_lfclk_start();
   122d0:	f7ff fefd 	bl	120ce <nrfx_clock_lfclk_start>
}
   122d4:	bf00      	nop
   122d6:	bd80      	pop	{r7, pc}

000122d8 <lfclk_stop>:
{
   122d8:	b580      	push	{r7, lr}
   122da:	af00      	add	r7, sp, #0
	nrfx_clock_lfclk_stop();
   122dc:	f7ff fefe 	bl	120dc <nrfx_clock_lfclk_stop>
}
   122e0:	bf00      	nop
   122e2:	bd80      	pop	{r7, pc}

000122e4 <hfclk_start>:
{
   122e4:	b580      	push	{r7, lr}
   122e6:	af00      	add	r7, sp, #0
	nrfx_clock_hfclk_start();
   122e8:	f7ff feff 	bl	120ea <nrfx_clock_hfclk_start>
}
   122ec:	bf00      	nop
   122ee:	bd80      	pop	{r7, pc}

000122f0 <hfclk_stop>:
{
   122f0:	b580      	push	{r7, lr}
   122f2:	af00      	add	r7, sp, #0
	nrfx_clock_hfclk_stop();
   122f4:	f7ff ff00 	bl	120f8 <nrfx_clock_hfclk_stop>
}
   122f8:	bf00      	nop
   122fa:	bd80      	pop	{r7, pc}

000122fc <api_stop>:
{
   122fc:	b580      	push	{r7, lr}
   122fe:	b082      	sub	sp, #8
   12300:	af00      	add	r7, sp, #0
   12302:	6078      	str	r0, [r7, #4]
   12304:	6039      	str	r1, [r7, #0]
	return stop(dev, subsys, CTX_API);
   12306:	2280      	movs	r2, #128	; 0x80
   12308:	6839      	ldr	r1, [r7, #0]
   1230a:	6878      	ldr	r0, [r7, #4]
   1230c:	f7f2 fbea 	bl	4ae4 <stop>
   12310:	4603      	mov	r3, r0
}
   12312:	4618      	mov	r0, r3
   12314:	3708      	adds	r7, #8
   12316:	46bd      	mov	sp, r7
   12318:	bd80      	pop	{r7, pc}

0001231a <async_start>:
{
   1231a:	b580      	push	{r7, lr}
   1231c:	b088      	sub	sp, #32
   1231e:	af00      	add	r7, sp, #0
   12320:	60f8      	str	r0, [r7, #12]
   12322:	60b9      	str	r1, [r7, #8]
   12324:	607a      	str	r2, [r7, #4]
   12326:	603b      	str	r3, [r7, #0]
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   12328:	68bb      	ldr	r3, [r7, #8]
   1232a:	77fb      	strb	r3, [r7, #31]
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1232c:	7ffb      	ldrb	r3, [r7, #31]
   1232e:	4619      	mov	r1, r3
   12330:	68f8      	ldr	r0, [r7, #12]
   12332:	f7ff fefa 	bl	1212a <get_sub_data>
   12336:	61b8      	str	r0, [r7, #24]
	err = set_starting_state(&subdata->flags, ctx);
   12338:	69bb      	ldr	r3, [r7, #24]
   1233a:	3308      	adds	r3, #8
   1233c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1233e:	4618      	mov	r0, r3
   12340:	f7ff ff64 	bl	1220c <set_starting_state>
   12344:	6178      	str	r0, [r7, #20]
	if (err < 0) {
   12346:	697b      	ldr	r3, [r7, #20]
   12348:	2b00      	cmp	r3, #0
   1234a:	da01      	bge.n	12350 <async_start+0x36>
		return err;
   1234c:	697b      	ldr	r3, [r7, #20]
   1234e:	e00e      	b.n	1236e <async_start+0x54>
	subdata->cb = cb;
   12350:	69bb      	ldr	r3, [r7, #24]
   12352:	687a      	ldr	r2, [r7, #4]
   12354:	601a      	str	r2, [r3, #0]
	subdata->user_data = user_data;
   12356:	69bb      	ldr	r3, [r7, #24]
   12358:	683a      	ldr	r2, [r7, #0]
   1235a:	605a      	str	r2, [r3, #4]
	 get_sub_config(dev, type)->start();
   1235c:	7ffb      	ldrb	r3, [r7, #31]
   1235e:	4619      	mov	r1, r3
   12360:	68f8      	ldr	r0, [r7, #12]
   12362:	f7ff fef8 	bl	12156 <get_sub_config>
   12366:	4603      	mov	r3, r0
   12368:	681b      	ldr	r3, [r3, #0]
   1236a:	4798      	blx	r3
	return 0;
   1236c:	2300      	movs	r3, #0
}
   1236e:	4618      	mov	r0, r3
   12370:	3720      	adds	r7, #32
   12372:	46bd      	mov	sp, r7
   12374:	bd80      	pop	{r7, pc}

00012376 <api_start>:
{
   12376:	b580      	push	{r7, lr}
   12378:	b086      	sub	sp, #24
   1237a:	af02      	add	r7, sp, #8
   1237c:	60f8      	str	r0, [r7, #12]
   1237e:	60b9      	str	r1, [r7, #8]
   12380:	607a      	str	r2, [r7, #4]
   12382:	603b      	str	r3, [r7, #0]
	return async_start(dev, subsys, cb, user_data, CTX_API);
   12384:	2380      	movs	r3, #128	; 0x80
   12386:	9300      	str	r3, [sp, #0]
   12388:	683b      	ldr	r3, [r7, #0]
   1238a:	687a      	ldr	r2, [r7, #4]
   1238c:	68b9      	ldr	r1, [r7, #8]
   1238e:	68f8      	ldr	r0, [r7, #12]
   12390:	f7ff ffc3 	bl	1231a <async_start>
   12394:	4603      	mov	r3, r0
}
   12396:	4618      	mov	r0, r3
   12398:	3710      	adds	r7, #16
   1239a:	46bd      	mov	sp, r7
   1239c:	bd80      	pop	{r7, pc}

0001239e <blocking_start_callback>:
{
   1239e:	b580      	push	{r7, lr}
   123a0:	b086      	sub	sp, #24
   123a2:	af00      	add	r7, sp, #0
   123a4:	60f8      	str	r0, [r7, #12]
   123a6:	60b9      	str	r1, [r7, #8]
   123a8:	607a      	str	r2, [r7, #4]
	struct k_sem *sem = user_data;
   123aa:	687b      	ldr	r3, [r7, #4]
   123ac:	617b      	str	r3, [r7, #20]
	k_sem_give(sem);
   123ae:	6978      	ldr	r0, [r7, #20]
   123b0:	f7ff fe01 	bl	11fb6 <k_sem_give>
}
   123b4:	bf00      	nop
   123b6:	3718      	adds	r7, #24
   123b8:	46bd      	mov	sp, r7
   123ba:	bd80      	pop	{r7, pc}

000123bc <onoff_started_callback>:
{
   123bc:	b580      	push	{r7, lr}
   123be:	b088      	sub	sp, #32
   123c0:	af00      	add	r7, sp, #0
   123c2:	60f8      	str	r0, [r7, #12]
   123c4:	60b9      	str	r1, [r7, #8]
   123c6:	607a      	str	r2, [r7, #4]
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)sys;
   123c8:	68bb      	ldr	r3, [r7, #8]
   123ca:	77fb      	strb	r3, [r7, #31]
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   123cc:	7ffb      	ldrb	r3, [r7, #31]
   123ce:	4619      	mov	r1, r3
   123d0:	68f8      	ldr	r0, [r7, #12]
   123d2:	f7ff fed5 	bl	12180 <get_onoff_manager>
   123d6:	61b8      	str	r0, [r7, #24]
	onoff_notify_fn notify = user_data;
   123d8:	687b      	ldr	r3, [r7, #4]
   123da:	617b      	str	r3, [r7, #20]
	notify(mgr, 0);
   123dc:	697b      	ldr	r3, [r7, #20]
   123de:	2100      	movs	r1, #0
   123e0:	69b8      	ldr	r0, [r7, #24]
   123e2:	4798      	blx	r3
}
   123e4:	bf00      	nop
   123e6:	3720      	adds	r7, #32
   123e8:	46bd      	mov	sp, r7
   123ea:	bd80      	pop	{r7, pc}

000123ec <hfclkaudio_init>:
{
   123ec:	b480      	push	{r7}
   123ee:	af00      	add	r7, sp, #0
}
   123f0:	bf00      	nop
   123f2:	46bd      	mov	sp, r7
   123f4:	bc80      	pop	{r7}
   123f6:	4770      	bx	lr

000123f8 <sys_clock_idle_exit>:
void __weak sys_clock_set_timeout(int32_t ticks, bool idle)
{
}

void __weak sys_clock_idle_exit(void)
{
   123f8:	b480      	push	{r7}
   123fa:	af00      	add	r7, sp, #0
}
   123fc:	bf00      	nop
   123fe:	46bd      	mov	sp, r7
   12400:	bc80      	pop	{r7}
   12402:	4770      	bx	lr

00012404 <nrf_event_readback>:
{
   12404:	b480      	push	{r7}
   12406:	b083      	sub	sp, #12
   12408:	af00      	add	r7, sp, #0
   1240a:	6078      	str	r0, [r7, #4]
    (void)*((volatile uint32_t *)(p_event_reg));
   1240c:	687b      	ldr	r3, [r7, #4]
   1240e:	681b      	ldr	r3, [r3, #0]
}
   12410:	bf00      	nop
   12412:	370c      	adds	r7, #12
   12414:	46bd      	mov	sp, r7
   12416:	bc80      	pop	{r7}
   12418:	4770      	bx	lr

0001241a <sys_clock_hw_cycles_per_sec>:
{
   1241a:	b480      	push	{r7}
   1241c:	af00      	add	r7, sp, #0
	return CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
   1241e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
   12422:	4618      	mov	r0, r3
   12424:	46bd      	mov	sp, r7
   12426:	bc80      	pop	{r7}
   12428:	4770      	bx	lr

0001242a <k_busy_wait>:
{
   1242a:	b580      	push	{r7, lr}
   1242c:	b082      	sub	sp, #8
   1242e:	af00      	add	r7, sp, #0
   12430:	6078      	str	r0, [r7, #4]
	z_impl_k_busy_wait(usec_to_wait);
   12432:	6878      	ldr	r0, [r7, #4]
   12434:	f004 fbe3 	bl	16bfe <z_impl_k_busy_wait>
}
   12438:	bf00      	nop
   1243a:	3708      	adds	r7, #8
   1243c:	46bd      	mov	sp, r7
   1243e:	bd80      	pop	{r7, pc}

00012440 <nrf_rtc_cc_set>:
{
   12440:	b480      	push	{r7}
   12442:	b085      	sub	sp, #20
   12444:	af00      	add	r7, sp, #0
   12446:	60f8      	str	r0, [r7, #12]
   12448:	60b9      	str	r1, [r7, #8]
   1244a:	607a      	str	r2, [r7, #4]
    p_reg->CC[ch] = cc_val;
   1244c:	68fb      	ldr	r3, [r7, #12]
   1244e:	68ba      	ldr	r2, [r7, #8]
   12450:	f502 72a8 	add.w	r2, r2, #336	; 0x150
   12454:	6879      	ldr	r1, [r7, #4]
   12456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1245a:	bf00      	nop
   1245c:	3714      	adds	r7, #20
   1245e:	46bd      	mov	sp, r7
   12460:	bc80      	pop	{r7}
   12462:	4770      	bx	lr

00012464 <nrf_rtc_cc_get>:
{
   12464:	b480      	push	{r7}
   12466:	b083      	sub	sp, #12
   12468:	af00      	add	r7, sp, #0
   1246a:	6078      	str	r0, [r7, #4]
   1246c:	6039      	str	r1, [r7, #0]
    return p_reg->CC[ch];
   1246e:	687b      	ldr	r3, [r7, #4]
   12470:	683a      	ldr	r2, [r7, #0]
   12472:	f502 72a8 	add.w	r2, r2, #336	; 0x150
   12476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
   1247a:	4618      	mov	r0, r3
   1247c:	370c      	adds	r7, #12
   1247e:	46bd      	mov	sp, r7
   12480:	bc80      	pop	{r7}
   12482:	4770      	bx	lr

00012484 <nrf_rtc_int_enable>:
{
   12484:	b480      	push	{r7}
   12486:	b083      	sub	sp, #12
   12488:	af00      	add	r7, sp, #0
   1248a:	6078      	str	r0, [r7, #4]
   1248c:	6039      	str	r1, [r7, #0]
    p_reg->INTENSET = mask;
   1248e:	687b      	ldr	r3, [r7, #4]
   12490:	683a      	ldr	r2, [r7, #0]
   12492:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   12496:	bf00      	nop
   12498:	370c      	adds	r7, #12
   1249a:	46bd      	mov	sp, r7
   1249c:	bc80      	pop	{r7}
   1249e:	4770      	bx	lr

000124a0 <nrf_rtc_int_enable_check>:
{
   124a0:	b480      	push	{r7}
   124a2:	b083      	sub	sp, #12
   124a4:	af00      	add	r7, sp, #0
   124a6:	6078      	str	r0, [r7, #4]
   124a8:	6039      	str	r1, [r7, #0]
    return p_reg->INTENSET & mask;
   124aa:	687b      	ldr	r3, [r7, #4]
   124ac:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   124b0:	683b      	ldr	r3, [r7, #0]
   124b2:	4013      	ands	r3, r2
}
   124b4:	4618      	mov	r0, r3
   124b6:	370c      	adds	r7, #12
   124b8:	46bd      	mov	sp, r7
   124ba:	bc80      	pop	{r7}
   124bc:	4770      	bx	lr

000124be <nrf_rtc_event_check>:
{
   124be:	b480      	push	{r7}
   124c0:	b083      	sub	sp, #12
   124c2:	af00      	add	r7, sp, #0
   124c4:	6078      	str	r0, [r7, #4]
   124c6:	460b      	mov	r3, r1
   124c8:	807b      	strh	r3, [r7, #2]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   124ca:	887b      	ldrh	r3, [r7, #2]
   124cc:	687a      	ldr	r2, [r7, #4]
   124ce:	4413      	add	r3, r2
   124d0:	681b      	ldr	r3, [r3, #0]
   124d2:	2b00      	cmp	r3, #0
   124d4:	bf14      	ite	ne
   124d6:	2301      	movne	r3, #1
   124d8:	2300      	moveq	r3, #0
   124da:	b2db      	uxtb	r3, r3
}
   124dc:	4618      	mov	r0, r3
   124de:	370c      	adds	r7, #12
   124e0:	46bd      	mov	sp, r7
   124e2:	bc80      	pop	{r7}
   124e4:	4770      	bx	lr

000124e6 <nrf_rtc_event_clear>:
{
   124e6:	b580      	push	{r7, lr}
   124e8:	b082      	sub	sp, #8
   124ea:	af00      	add	r7, sp, #0
   124ec:	6078      	str	r0, [r7, #4]
   124ee:	460b      	mov	r3, r1
   124f0:	807b      	strh	r3, [r7, #2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   124f2:	887b      	ldrh	r3, [r7, #2]
   124f4:	687a      	ldr	r2, [r7, #4]
   124f6:	4413      	add	r3, r2
   124f8:	2200      	movs	r2, #0
   124fa:	601a      	str	r2, [r3, #0]
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
   124fc:	887b      	ldrh	r3, [r7, #2]
   124fe:	687a      	ldr	r2, [r7, #4]
   12500:	4413      	add	r3, r2
   12502:	4618      	mov	r0, r3
   12504:	f7ff ff7e 	bl	12404 <nrf_event_readback>
}
   12508:	bf00      	nop
   1250a:	3708      	adds	r7, #8
   1250c:	46bd      	mov	sp, r7
   1250e:	bd80      	pop	{r7, pc}

00012510 <nrf_rtc_counter_get>:
{
   12510:	b480      	push	{r7}
   12512:	b083      	sub	sp, #12
   12514:	af00      	add	r7, sp, #0
   12516:	6078      	str	r0, [r7, #4]
     return p_reg->COUNTER;
   12518:	687b      	ldr	r3, [r7, #4]
   1251a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
}
   1251e:	4618      	mov	r0, r3
   12520:	370c      	adds	r7, #12
   12522:	46bd      	mov	sp, r7
   12524:	bc80      	pop	{r7}
   12526:	4770      	bx	lr

00012528 <nrf_rtc_task_trigger>:
{
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
   12528:	b480      	push	{r7}
   1252a:	b083      	sub	sp, #12
   1252c:	af00      	add	r7, sp, #0
   1252e:	6078      	str	r0, [r7, #4]
   12530:	460b      	mov	r3, r1
   12532:	70fb      	strb	r3, [r7, #3]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   12534:	78fa      	ldrb	r2, [r7, #3]
   12536:	687b      	ldr	r3, [r7, #4]
   12538:	4413      	add	r3, r2
   1253a:	461a      	mov	r2, r3
   1253c:	2301      	movs	r3, #1
   1253e:	6013      	str	r3, [r2, #0]
}
   12540:	bf00      	nop
   12542:	370c      	adds	r7, #12
   12544:	46bd      	mov	sp, r7
   12546:	bc80      	pop	{r7}
   12548:	4770      	bx	lr

0001254a <nrf_rtc_event_enable>:

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
   1254a:	b480      	push	{r7}
   1254c:	b083      	sub	sp, #12
   1254e:	af00      	add	r7, sp, #0
   12550:	6078      	str	r0, [r7, #4]
   12552:	6039      	str	r1, [r7, #0]
    p_reg->EVTENSET = mask;
   12554:	687b      	ldr	r3, [r7, #4]
   12556:	683a      	ldr	r2, [r7, #0]
   12558:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
}
   1255c:	bf00      	nop
   1255e:	370c      	adds	r7, #12
   12560:	46bd      	mov	sp, r7
   12562:	bc80      	pop	{r7}
   12564:	4770      	bx	lr

00012566 <nrf_rtc_event_disable>:

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
   12566:	b480      	push	{r7}
   12568:	b083      	sub	sp, #12
   1256a:	af00      	add	r7, sp, #0
   1256c:	6078      	str	r0, [r7, #4]
   1256e:	6039      	str	r1, [r7, #0]
    p_reg->EVTENCLR = mask;
   12570:	687b      	ldr	r3, [r7, #4]
   12572:	683a      	ldr	r2, [r7, #0]
   12574:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
}
   12578:	bf00      	nop
   1257a:	370c      	adds	r7, #12
   1257c:	46bd      	mov	sp, r7
   1257e:	bc80      	pop	{r7}
   12580:	4770      	bx	lr

00012582 <counter_sub>:
{
   12582:	b480      	push	{r7}
   12584:	b083      	sub	sp, #12
   12586:	af00      	add	r7, sp, #0
   12588:	6078      	str	r0, [r7, #4]
   1258a:	6039      	str	r1, [r7, #0]
	return (a - b) & COUNTER_MAX;
   1258c:	687a      	ldr	r2, [r7, #4]
   1258e:	683b      	ldr	r3, [r7, #0]
   12590:	1ad3      	subs	r3, r2, r3
   12592:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
   12596:	4618      	mov	r0, r3
   12598:	370c      	adds	r7, #12
   1259a:	46bd      	mov	sp, r7
   1259c:	bc80      	pop	{r7}
   1259e:	4770      	bx	lr

000125a0 <set_absolute_alarm>:
{
   125a0:	b580      	push	{r7, lr}
   125a2:	b086      	sub	sp, #24
   125a4:	af00      	add	r7, sp, #0
   125a6:	6078      	str	r0, [r7, #4]
   125a8:	6039      	str	r1, [r7, #0]
	uint32_t cc_val = abs_val & COUNTER_MAX;
   125aa:	683b      	ldr	r3, [r7, #0]
   125ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   125b0:	617b      	str	r3, [r7, #20]
	uint32_t prev_cc = get_comparator(chan);
   125b2:	6878      	ldr	r0, [r7, #4]
   125b4:	f7f2 fd52 	bl	505c <get_comparator>
   125b8:	6138      	str	r0, [r7, #16]
		now = counter();
   125ba:	f7f2 fd9b 	bl	50f4 <counter>
   125be:	60f8      	str	r0, [r7, #12]
		set_comparator(chan, now);
   125c0:	68f9      	ldr	r1, [r7, #12]
   125c2:	6878      	ldr	r0, [r7, #4]
   125c4:	f7f2 fd36 	bl	5034 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   125c8:	68f9      	ldr	r1, [r7, #12]
   125ca:	6938      	ldr	r0, [r7, #16]
   125cc:	f7ff ffd9 	bl	12582 <counter_sub>
   125d0:	4603      	mov	r3, r0
   125d2:	2b01      	cmp	r3, #1
   125d4:	d102      	bne.n	125dc <set_absolute_alarm+0x3c>
			k_busy_wait(19);
   125d6:	2013      	movs	r0, #19
   125d8:	f7ff ff27 	bl	1242a <k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   125dc:	68fb      	ldr	r3, [r7, #12]
   125de:	3302      	adds	r3, #2
   125e0:	4619      	mov	r1, r3
   125e2:	6978      	ldr	r0, [r7, #20]
   125e4:	f7ff ffcd 	bl	12582 <counter_sub>
   125e8:	4603      	mov	r3, r0
   125ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   125ee:	d902      	bls.n	125f6 <set_absolute_alarm+0x56>
			cc_val = now + 2;
   125f0:	68fb      	ldr	r3, [r7, #12]
   125f2:	3302      	adds	r3, #2
   125f4:	617b      	str	r3, [r7, #20]
		event_clear(chan);
   125f6:	6878      	ldr	r0, [r7, #4]
   125f8:	f7f2 fd40 	bl	507c <event_clear>
		event_enable(chan);
   125fc:	6878      	ldr	r0, [r7, #4]
   125fe:	f7f2 fd51 	bl	50a4 <event_enable>
		set_comparator(chan, cc_val);
   12602:	6979      	ldr	r1, [r7, #20]
   12604:	6878      	ldr	r0, [r7, #4]
   12606:	f7f2 fd15 	bl	5034 <set_comparator>
		now2 = counter();
   1260a:	f7f2 fd73 	bl	50f4 <counter>
   1260e:	60b8      	str	r0, [r7, #8]
		prev_cc = cc_val;
   12610:	697b      	ldr	r3, [r7, #20]
   12612:	613b      	str	r3, [r7, #16]
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   12614:	68ba      	ldr	r2, [r7, #8]
   12616:	68fb      	ldr	r3, [r7, #12]
   12618:	429a      	cmp	r2, r3
   1261a:	d009      	beq.n	12630 <set_absolute_alarm+0x90>
   1261c:	68bb      	ldr	r3, [r7, #8]
   1261e:	3302      	adds	r3, #2
   12620:	4619      	mov	r1, r3
   12622:	6978      	ldr	r0, [r7, #20]
   12624:	f7ff ffad 	bl	12582 <counter_sub>
   12628:	4603      	mov	r3, r0
	} while ((now2 != now) &&
   1262a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1262e:	d8c4      	bhi.n	125ba <set_absolute_alarm+0x1a>
}
   12630:	bf00      	nop
   12632:	3718      	adds	r7, #24
   12634:	46bd      	mov	sp, r7
   12636:	bd80      	pop	{r7, pc}

00012638 <abort_function>:
{
   12638:	b480      	push	{r7}
   1263a:	b083      	sub	sp, #12
   1263c:	af00      	add	r7, sp, #0
   1263e:	6078      	str	r0, [r7, #4]
	while(1);
   12640:	e7fe      	b.n	12640 <abort_function+0x8>

00012642 <atomic_cas>:
{
   12642:	b490      	push	{r4, r7}
   12644:	b084      	sub	sp, #16
   12646:	af00      	add	r7, sp, #0
   12648:	60f8      	str	r0, [r7, #12]
   1264a:	60b9      	str	r1, [r7, #8]
   1264c:	607a      	str	r2, [r7, #4]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1264e:	687c      	ldr	r4, [r7, #4]
   12650:	68fa      	ldr	r2, [r7, #12]
   12652:	f107 0308 	add.w	r3, r7, #8
   12656:	6818      	ldr	r0, [r3, #0]
   12658:	e8d2 1fef 	ldaex	r1, [r2]
   1265c:	4281      	cmp	r1, r0
   1265e:	d106      	bne.n	1266e <atomic_cas+0x2c>
   12660:	e8c2 4fec 	stlex	ip, r4, [r2]
   12664:	f1bc 0f00 	cmp.w	ip, #0
   12668:	f1bc 0f00 	cmp.w	ip, #0
   1266c:	d1f4      	bne.n	12658 <atomic_cas+0x16>
   1266e:	bf0c      	ite	eq
   12670:	2201      	moveq	r2, #1
   12672:	2200      	movne	r2, #0
   12674:	2a00      	cmp	r2, #0
   12676:	d100      	bne.n	1267a <atomic_cas+0x38>
   12678:	6019      	str	r1, [r3, #0]
   1267a:	4613      	mov	r3, r2
}
   1267c:	4618      	mov	r0, r3
   1267e:	3710      	adds	r7, #16
   12680:	46bd      	mov	sp, r7
   12682:	bc90      	pop	{r4, r7}
   12684:	4770      	bx	lr

00012686 <k_mutex_init>:
{
   12686:	b580      	push	{r7, lr}
   12688:	b082      	sub	sp, #8
   1268a:	af00      	add	r7, sp, #0
   1268c:	6078      	str	r0, [r7, #4]
	return z_impl_k_mutex_init(mutex);
   1268e:	6878      	ldr	r0, [r7, #4]
   12690:	f003 fc3d 	bl	15f0e <z_impl_k_mutex_init>
   12694:	4603      	mov	r3, r0
}
   12696:	4618      	mov	r0, r3
   12698:	3708      	adds	r7, #8
   1269a:	46bd      	mov	sp, r7
   1269c:	bd80      	pop	{r7, pc}

0001269e <k_mutex_lock>:
{
   1269e:	b580      	push	{r7, lr}
   126a0:	b084      	sub	sp, #16
   126a2:	af00      	add	r7, sp, #0
   126a4:	60f8      	str	r0, [r7, #12]
   126a6:	e9c7 2300 	strd	r2, r3, [r7]
	return z_impl_k_mutex_lock(mutex, timeout);
   126aa:	e9d7 2300 	ldrd	r2, r3, [r7]
   126ae:	68f8      	ldr	r0, [r7, #12]
   126b0:	f7f9 fab6 	bl	bc20 <z_impl_k_mutex_lock>
   126b4:	4603      	mov	r3, r0
}
   126b6:	4618      	mov	r0, r3
   126b8:	3710      	adds	r7, #16
   126ba:	46bd      	mov	sp, r7
   126bc:	bd80      	pop	{r7, pc}

000126be <k_mutex_unlock>:
{
   126be:	b580      	push	{r7, lr}
   126c0:	b082      	sub	sp, #8
   126c2:	af00      	add	r7, sp, #0
   126c4:	6078      	str	r0, [r7, #4]
	return z_impl_k_mutex_unlock(mutex);
   126c6:	6878      	ldr	r0, [r7, #4]
   126c8:	f7f9 fe70 	bl	c3ac <z_impl_k_mutex_unlock>
   126cc:	4603      	mov	r3, r0
}
   126ce:	4618      	mov	r0, r3
   126d0:	3708      	adds	r7, #8
   126d2:	46bd      	mov	sp, r7
   126d4:	bd80      	pop	{r7, pc}

000126d6 <arch_irq_enable>:
{
   126d6:	b580      	push	{r7, lr}
   126d8:	b082      	sub	sp, #8
   126da:	af00      	add	r7, sp, #0
   126dc:	6078      	str	r0, [r7, #4]
	NVIC_EnableIRQ((IRQn_Type)irq);
   126de:	687b      	ldr	r3, [r7, #4]
   126e0:	b25b      	sxtb	r3, r3
   126e2:	4618      	mov	r0, r3
   126e4:	f7f3 f916 	bl	5914 <__NVIC_EnableIRQ>
}
   126e8:	bf00      	nop
   126ea:	3708      	adds	r7, #8
   126ec:	46bd      	mov	sp, r7
   126ee:	bd80      	pop	{r7, pc}

000126f0 <arch_irq_disable>:
{
   126f0:	b580      	push	{r7, lr}
   126f2:	b082      	sub	sp, #8
   126f4:	af00      	add	r7, sp, #0
   126f6:	6078      	str	r0, [r7, #4]
	NVIC_DisableIRQ((IRQn_Type)irq);
   126f8:	687b      	ldr	r3, [r7, #4]
   126fa:	b25b      	sxtb	r3, r3
   126fc:	4618      	mov	r0, r3
   126fe:	f7f3 f925 	bl	594c <__NVIC_DisableIRQ>
}
   12702:	bf00      	nop
   12704:	3708      	adds	r7, #8
   12706:	46bd      	mov	sp, r7
   12708:	bd80      	pop	{r7, pc}

0001270a <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
   1270a:	b580      	push	{r7, lr}
   1270c:	b082      	sub	sp, #8
   1270e:	af00      	add	r7, sp, #0
   12710:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   12712:	2100      	movs	r1, #0
   12714:	2001      	movs	r0, #1
   12716:	f000 f823 	bl	12760 <z_arm_fatal_error>
}
   1271a:	bf00      	nop
   1271c:	3708      	adds	r7, #8
   1271e:	46bd      	mov	sp, r7
   12720:	bd80      	pop	{r7, pc}

00012722 <configure_builtin_stack_guard>:
{
   12722:	b480      	push	{r7}
   12724:	b085      	sub	sp, #20
   12726:	af00      	add	r7, sp, #0
   12728:	6078      	str	r0, [r7, #4]
	uint32_t guard_start = thread->stack_info.start;
   1272a:	687b      	ldr	r3, [r7, #4]
   1272c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1272e:	60fb      	str	r3, [r7, #12]
   12730:	68fb      	ldr	r3, [r7, #12]
   12732:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   12734:	68bb      	ldr	r3, [r7, #8]
   12736:	f383 880b 	msr	PSPLIM, r3
}
   1273a:	bf00      	nop
}
   1273c:	bf00      	nop
   1273e:	3714      	adds	r7, #20
   12740:	46bd      	mov	sp, r7
   12742:	bc80      	pop	{r7}
   12744:	4770      	bx	lr

00012746 <z_arm_prepare_switch_to_main>:
{
   12746:	b480      	push	{r7}
   12748:	af00      	add	r7, sp, #0
}
   1274a:	bf00      	nop
   1274c:	46bd      	mov	sp, r7
   1274e:	bc80      	pop	{r7}
   12750:	4770      	bx	lr

00012752 <k_is_user_context>:
{
   12752:	b480      	push	{r7}
   12754:	af00      	add	r7, sp, #0
	return false;
   12756:	2300      	movs	r3, #0
}
   12758:	4618      	mov	r0, r3
   1275a:	46bd      	mov	sp, r7
   1275c:	bc80      	pop	{r7}
   1275e:	4770      	bx	lr

00012760 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   12760:	b580      	push	{r7, lr}
   12762:	b082      	sub	sp, #8
   12764:	af00      	add	r7, sp, #0
   12766:	6078      	str	r0, [r7, #4]
   12768:	6039      	str	r1, [r7, #0]

	if (esf != NULL) {
   1276a:	683b      	ldr	r3, [r7, #0]
   1276c:	2b00      	cmp	r3, #0
   1276e:	d002      	beq.n	12776 <z_arm_fatal_error+0x16>
		esf_dump(esf);
   12770:	6838      	ldr	r0, [r7, #0]
   12772:	f7f3 fa03 	bl	5b7c <esf_dump>
	}
	z_fatal_error(reason, esf);
   12776:	6839      	ldr	r1, [r7, #0]
   12778:	6878      	ldr	r0, [r7, #4]
   1277a:	f7f8 fa6d 	bl	ac58 <z_fatal_error>
}
   1277e:	bf00      	nop
   12780:	3708      	adds	r7, #8
   12782:	46bd      	mov	sp, r7
   12784:	bd80      	pop	{r7, pc}

00012786 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   12786:	b580      	push	{r7, lr}
   12788:	b084      	sub	sp, #16
   1278a:	af00      	add	r7, sp, #0
   1278c:	6078      	str	r0, [r7, #4]
	/* Stacked R0 holds the exception reason. */
	unsigned int reason = esf->basic.r0;
   1278e:	687b      	ldr	r3, [r7, #4]
   12790:	681b      	ldr	r3, [r3, #0]
   12792:	60fb      	str	r3, [r7, #12]
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   12794:	6879      	ldr	r1, [r7, #4]
   12796:	68f8      	ldr	r0, [r7, #12]
   12798:	f7ff ffe2 	bl	12760 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   1279c:	bf00      	nop
   1279e:	3710      	adds	r7, #16
   127a0:	46bd      	mov	sp, r7
   127a2:	bd80      	pop	{r7, pc}

000127a4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   127a4:	b580      	push	{r7, lr}
   127a6:	af00      	add	r7, sp, #0
	handler();
   127a8:	f7f3 fb08 	bl	5dbc <z_SysNmiOnReset>
	z_arm_int_exit();
   127ac:	f7f4 fd42 	bl	7234 <z_arm_exc_exit>
}
   127b0:	bf00      	nop
   127b2:	bd80      	pop	{r7, pc}

000127b4 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   127b4:	b580      	push	{r7, lr}
   127b6:	af00      	add	r7, sp, #0
	relocate_vector_table();
   127b8:	f7f3 fb04 	bl	5dc4 <relocate_vector_table>
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
   127bc:	f7f3 fb18 	bl	5df0 <z_arm_floating_point_init>
#endif
	z_bss_zero();
   127c0:	f7f8 fbc6 	bl	af50 <z_bss_zero>
	z_data_copy();
   127c4:	f7fc f830 	bl	e828 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   127c8:	f000 f82f 	bl	1282a <z_arm_interrupt_init>
	z_cstart();
   127cc:	f7f8 fcb0 	bl	b130 <z_cstart>

000127d0 <k_is_user_context>:
{
   127d0:	b480      	push	{r7}
   127d2:	af00      	add	r7, sp, #0
	return false;
   127d4:	2300      	movs	r3, #0
}
   127d6:	4618      	mov	r0, r3
   127d8:	46bd      	mov	sp, r7
   127da:	bc80      	pop	{r7}
   127dc:	4770      	bx	lr

000127de <fault_show>:
{
   127de:	b480      	push	{r7}
   127e0:	b083      	sub	sp, #12
   127e2:	af00      	add	r7, sp, #0
   127e4:	6078      	str	r0, [r7, #4]
   127e6:	6039      	str	r1, [r7, #0]
}
   127e8:	bf00      	nop
   127ea:	370c      	adds	r7, #12
   127ec:	46bd      	mov	sp, r7
   127ee:	bc80      	pop	{r7}
   127f0:	4770      	bx	lr

000127f2 <memory_fault_recoverable>:
{
   127f2:	b480      	push	{r7}
   127f4:	b083      	sub	sp, #12
   127f6:	af00      	add	r7, sp, #0
   127f8:	6078      	str	r0, [r7, #4]
   127fa:	460b      	mov	r3, r1
   127fc:	70fb      	strb	r3, [r7, #3]
	return false;
   127fe:	2300      	movs	r3, #0
}
   12800:	4618      	mov	r0, r3
   12802:	370c      	adds	r7, #12
   12804:	46bd      	mov	sp, r7
   12806:	bc80      	pop	{r7}
   12808:	4770      	bx	lr

0001280a <ARM_MPU_ClrRegionEx>:
{
   1280a:	b480      	push	{r7}
   1280c:	b083      	sub	sp, #12
   1280e:	af00      	add	r7, sp, #0
   12810:	6078      	str	r0, [r7, #4]
   12812:	6039      	str	r1, [r7, #0]
  mpu->RNR = rnr;
   12814:	687b      	ldr	r3, [r7, #4]
   12816:	683a      	ldr	r2, [r7, #0]
   12818:	609a      	str	r2, [r3, #8]
  mpu->RLAR = 0U;
   1281a:	687b      	ldr	r3, [r7, #4]
   1281c:	2200      	movs	r2, #0
   1281e:	611a      	str	r2, [r3, #16]
}
   12820:	bf00      	nop
   12822:	370c      	adds	r7, #12
   12824:	46bd      	mov	sp, r7
   12826:	bc80      	pop	{r7}
   12828:	4770      	bx	lr

0001282a <z_arm_interrupt_init>:
 *
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
   1282a:	b580      	push	{r7, lr}
   1282c:	b082      	sub	sp, #8
   1282e:	af00      	add	r7, sp, #0
	int irq = 0;
   12830:	2300      	movs	r3, #0
   12832:	607b      	str	r3, [r7, #4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   12834:	e008      	b.n	12848 <z_arm_interrupt_init+0x1e>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   12836:	687b      	ldr	r3, [r7, #4]
   12838:	b25b      	sxtb	r3, r3
   1283a:	2101      	movs	r1, #1
   1283c:	4618      	mov	r0, r3
   1283e:	f7f4 fd6f 	bl	7320 <__NVIC_SetPriority>
	for (; irq < CONFIG_NUM_IRQS; irq++) {
   12842:	687b      	ldr	r3, [r7, #4]
   12844:	3301      	adds	r3, #1
   12846:	607b      	str	r3, [r7, #4]
   12848:	687b      	ldr	r3, [r7, #4]
   1284a:	2b40      	cmp	r3, #64	; 0x40
   1284c:	ddf3      	ble.n	12836 <z_arm_interrupt_init+0xc>
	}
}
   1284e:	bf00      	nop
   12850:	bf00      	nop
   12852:	3708      	adds	r7, #8
   12854:	46bd      	mov	sp, r7
   12856:	bd80      	pop	{r7, pc}

00012858 <arm_cmse_mpu_region_get>:

#include <zephyr.h>
#include <aarch32/cortex_m/cmse.h>

int arm_cmse_mpu_region_get(uint32_t addr)
{
   12858:	b480      	push	{r7}
   1285a:	b087      	sub	sp, #28
   1285c:	af00      	add	r7, sp, #0
   1285e:	6078      	str	r0, [r7, #4]
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);
   12860:	687b      	ldr	r3, [r7, #4]
   12862:	617b      	str	r3, [r7, #20]
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   12864:	697b      	ldr	r3, [r7, #20]
   12866:	e843 f300 	tt	r3, r3
   1286a:	60fb      	str	r3, [r7, #12]
   1286c:	68fb      	ldr	r3, [r7, #12]
   1286e:	613b      	str	r3, [r7, #16]

	if (addr_info.flags.mpu_region_valid) {
   12870:	7cbb      	ldrb	r3, [r7, #18]
   12872:	f003 0301 	and.w	r3, r3, #1
   12876:	b2db      	uxtb	r3, r3
   12878:	2b00      	cmp	r3, #0
   1287a:	d001      	beq.n	12880 <arm_cmse_mpu_region_get+0x28>
		return addr_info.flags.mpu_region;
   1287c:	7c3b      	ldrb	r3, [r7, #16]
   1287e:	e001      	b.n	12884 <arm_cmse_mpu_region_get+0x2c>
	}

	return -EINVAL;
   12880:	f06f 0315 	mvn.w	r3, #21
}
   12884:	4618      	mov	r0, r3
   12886:	371c      	adds	r7, #28
   12888:	46bd      	mov	sp, r7
   1288a:	bc80      	pop	{r7}
   1288c:	4770      	bx	lr

0001288e <k_is_user_context>:
{
   1288e:	b480      	push	{r7}
   12890:	af00      	add	r7, sp, #0
	return false;
   12892:	2300      	movs	r3, #0
}
   12894:	4618      	mov	r0, r3
   12896:	46bd      	mov	sp, r7
   12898:	bc80      	pop	{r7}
   1289a:	4770      	bx	lr

0001289c <ARM_MPU_SetRegionEx>:
{
   1289c:	b480      	push	{r7}
   1289e:	b085      	sub	sp, #20
   128a0:	af00      	add	r7, sp, #0
   128a2:	60f8      	str	r0, [r7, #12]
   128a4:	60b9      	str	r1, [r7, #8]
   128a6:	607a      	str	r2, [r7, #4]
   128a8:	603b      	str	r3, [r7, #0]
  mpu->RNR = rnr;
   128aa:	68fb      	ldr	r3, [r7, #12]
   128ac:	68ba      	ldr	r2, [r7, #8]
   128ae:	609a      	str	r2, [r3, #8]
  mpu->RBAR = rbar;
   128b0:	68fb      	ldr	r3, [r7, #12]
   128b2:	687a      	ldr	r2, [r7, #4]
   128b4:	60da      	str	r2, [r3, #12]
  mpu->RLAR = rlar;
   128b6:	68fb      	ldr	r3, [r7, #12]
   128b8:	683a      	ldr	r2, [r7, #0]
   128ba:	611a      	str	r2, [r3, #16]
}
   128bc:	bf00      	nop
   128be:	3714      	adds	r7, #20
   128c0:	46bd      	mov	sp, r7
   128c2:	bc80      	pop	{r7}
   128c4:	4770      	bx	lr

000128c6 <get_num_regions>:
{
   128c6:	b480      	push	{r7}
   128c8:	af00      	add	r7, sp, #0
	return NUM_MPU_REGIONS;
   128ca:	2310      	movs	r3, #16
}
   128cc:	4618      	mov	r0, r3
   128ce:	46bd      	mov	sp, r7
   128d0:	bc80      	pop	{r7}
   128d2:	4770      	bx	lr

000128d4 <mpu_partition_is_valid>:
{
   128d4:	b480      	push	{r7}
   128d6:	b085      	sub	sp, #20
   128d8:	af00      	add	r7, sp, #0
   128da:	6078      	str	r0, [r7, #4]
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   128dc:	687b      	ldr	r3, [r7, #4]
   128de:	685b      	ldr	r3, [r3, #4]
		&&
   128e0:	2b1f      	cmp	r3, #31
   128e2:	d90f      	bls.n	12904 <mpu_partition_is_valid+0x30>
		((part->size &
   128e4:	687b      	ldr	r3, [r7, #4]
   128e6:	685b      	ldr	r3, [r3, #4]
   128e8:	f023 021f 	bic.w	r2, r3, #31
			== part->size)
   128ec:	687b      	ldr	r3, [r7, #4]
   128ee:	685b      	ldr	r3, [r3, #4]
		&&
   128f0:	429a      	cmp	r2, r3
   128f2:	d107      	bne.n	12904 <mpu_partition_is_valid+0x30>
		((part->start &
   128f4:	687b      	ldr	r3, [r7, #4]
   128f6:	681b      	ldr	r3, [r3, #0]
   128f8:	f003 031f 	and.w	r3, r3, #31
		&&
   128fc:	2b00      	cmp	r3, #0
   128fe:	d101      	bne.n	12904 <mpu_partition_is_valid+0x30>
   12900:	2301      	movs	r3, #1
   12902:	e000      	b.n	12906 <mpu_partition_is_valid+0x32>
   12904:	2300      	movs	r3, #0
	int partition_is_valid =
   12906:	60fb      	str	r3, [r7, #12]
	return partition_is_valid;
   12908:	68fb      	ldr	r3, [r7, #12]
}
   1290a:	4618      	mov	r0, r3
   1290c:	3714      	adds	r7, #20
   1290e:	46bd      	mov	sp, r7
   12910:	bc80      	pop	{r7}
   12912:	4770      	bx	lr

00012914 <get_region_index>:
{
   12914:	b580      	push	{r7, lr}
   12916:	b084      	sub	sp, #16
   12918:	af00      	add	r7, sp, #0
   1291a:	6078      	str	r0, [r7, #4]
   1291c:	6039      	str	r1, [r7, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1291e:	6878      	ldr	r0, [r7, #4]
   12920:	f7ff ff9a 	bl	12858 <arm_cmse_mpu_region_get>
   12924:	4603      	mov	r3, r0
   12926:	60fb      	str	r3, [r7, #12]
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   12928:	687a      	ldr	r2, [r7, #4]
   1292a:	683b      	ldr	r3, [r7, #0]
   1292c:	4413      	add	r3, r2
   1292e:	3b01      	subs	r3, #1
   12930:	4618      	mov	r0, r3
   12932:	f7ff ff91 	bl	12858 <arm_cmse_mpu_region_get>
   12936:	4603      	mov	r3, r0
   12938:	60bb      	str	r3, [r7, #8]
	if (region_start_addr == region_end_addr) {
   1293a:	68fa      	ldr	r2, [r7, #12]
   1293c:	68bb      	ldr	r3, [r7, #8]
   1293e:	429a      	cmp	r2, r3
   12940:	d101      	bne.n	12946 <get_region_index+0x32>
		return region_start_addr;
   12942:	68fb      	ldr	r3, [r7, #12]
   12944:	e001      	b.n	1294a <get_region_index+0x36>
	return -EINVAL;
   12946:	f06f 0315 	mvn.w	r3, #21
}
   1294a:	4618      	mov	r0, r3
   1294c:	3710      	adds	r7, #16
   1294e:	46bd      	mov	sp, r7
   12950:	bd80      	pop	{r7, pc}

00012952 <get_region_attr_from_mpu_partition_info>:
{
   12952:	b480      	push	{r7}
   12954:	b085      	sub	sp, #20
   12956:	af00      	add	r7, sp, #0
   12958:	60f8      	str	r0, [r7, #12]
   1295a:	60b9      	str	r1, [r7, #8]
   1295c:	607a      	str	r2, [r7, #4]
   1295e:	603b      	str	r3, [r7, #0]
	p_attr->rbar = attr->rbar &
   12960:	68bb      	ldr	r3, [r7, #8]
   12962:	881b      	ldrh	r3, [r3, #0]
   12964:	f003 031f 	and.w	r3, r3, #31
   12968:	b2d9      	uxtb	r1, r3
   1296a:	68fa      	ldr	r2, [r7, #12]
   1296c:	7813      	ldrb	r3, [r2, #0]
   1296e:	f361 0304 	bfi	r3, r1, #0, #5
   12972:	7013      	strb	r3, [r2, #0]
	p_attr->mair_idx = attr->mair_idx;
   12974:	68bb      	ldr	r3, [r7, #8]
   12976:	885b      	ldrh	r3, [r3, #2]
   12978:	f003 0307 	and.w	r3, r3, #7
   1297c:	b2d9      	uxtb	r1, r3
   1297e:	68fa      	ldr	r2, [r7, #12]
   12980:	7813      	ldrb	r3, [r2, #0]
   12982:	f361 1347 	bfi	r3, r1, #5, #3
   12986:	7013      	strb	r3, [r2, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   12988:	687b      	ldr	r3, [r7, #4]
   1298a:	f023 021f 	bic.w	r2, r3, #31
   1298e:	683b      	ldr	r3, [r7, #0]
   12990:	4413      	add	r3, r2
   12992:	3b01      	subs	r3, #1
   12994:	f023 021f 	bic.w	r2, r3, #31
   12998:	68fb      	ldr	r3, [r7, #12]
   1299a:	605a      	str	r2, [r3, #4]
}
   1299c:	bf00      	nop
   1299e:	3714      	adds	r7, #20
   129a0:	46bd      	mov	sp, r7
   129a2:	bc80      	pop	{r7}
   129a4:	4770      	bx	lr

000129a6 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   129a6:	b480      	push	{r7}
   129a8:	b087      	sub	sp, #28
   129aa:	af00      	add	r7, sp, #0
   129ac:	60f8      	str	r0, [r7, #12]
   129ae:	60b9      	str	r1, [r7, #8]
   129b0:	607a      	str	r2, [r7, #4]
	char *dest = d;
   129b2:	68fb      	ldr	r3, [r7, #12]
   129b4:	617b      	str	r3, [r7, #20]

	while ((n > 0) && *s != '\0') {
   129b6:	e00c      	b.n	129d2 <strncpy+0x2c>
		*d = *s;
   129b8:	68bb      	ldr	r3, [r7, #8]
   129ba:	781a      	ldrb	r2, [r3, #0]
   129bc:	68fb      	ldr	r3, [r7, #12]
   129be:	701a      	strb	r2, [r3, #0]
		s++;
   129c0:	68bb      	ldr	r3, [r7, #8]
   129c2:	3301      	adds	r3, #1
   129c4:	60bb      	str	r3, [r7, #8]
		d++;
   129c6:	68fb      	ldr	r3, [r7, #12]
   129c8:	3301      	adds	r3, #1
   129ca:	60fb      	str	r3, [r7, #12]
		n--;
   129cc:	687b      	ldr	r3, [r7, #4]
   129ce:	3b01      	subs	r3, #1
   129d0:	607b      	str	r3, [r7, #4]
	while ((n > 0) && *s != '\0') {
   129d2:	687b      	ldr	r3, [r7, #4]
   129d4:	2b00      	cmp	r3, #0
   129d6:	d00d      	beq.n	129f4 <strncpy+0x4e>
   129d8:	68bb      	ldr	r3, [r7, #8]
   129da:	781b      	ldrb	r3, [r3, #0]
   129dc:	2b00      	cmp	r3, #0
   129de:	d1eb      	bne.n	129b8 <strncpy+0x12>
	}

	while (n > 0) {
   129e0:	e008      	b.n	129f4 <strncpy+0x4e>
		*d = '\0';
   129e2:	68fb      	ldr	r3, [r7, #12]
   129e4:	2200      	movs	r2, #0
   129e6:	701a      	strb	r2, [r3, #0]
		d++;
   129e8:	68fb      	ldr	r3, [r7, #12]
   129ea:	3301      	adds	r3, #1
   129ec:	60fb      	str	r3, [r7, #12]
		n--;
   129ee:	687b      	ldr	r3, [r7, #4]
   129f0:	3b01      	subs	r3, #1
   129f2:	607b      	str	r3, [r7, #4]
	while (n > 0) {
   129f4:	687b      	ldr	r3, [r7, #4]
   129f6:	2b00      	cmp	r3, #0
   129f8:	d1f3      	bne.n	129e2 <strncpy+0x3c>
	}

	return dest;
   129fa:	697b      	ldr	r3, [r7, #20]
}
   129fc:	4618      	mov	r0, r3
   129fe:	371c      	adds	r7, #28
   12a00:	46bd      	mov	sp, r7
   12a02:	bc80      	pop	{r7}
   12a04:	4770      	bx	lr

00012a06 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   12a06:	b480      	push	{r7}
   12a08:	b085      	sub	sp, #20
   12a0a:	af00      	add	r7, sp, #0
   12a0c:	6078      	str	r0, [r7, #4]
	size_t n = 0;
   12a0e:	2300      	movs	r3, #0
   12a10:	60fb      	str	r3, [r7, #12]

	while (*s != '\0') {
   12a12:	e005      	b.n	12a20 <strlen+0x1a>
		s++;
   12a14:	687b      	ldr	r3, [r7, #4]
   12a16:	3301      	adds	r3, #1
   12a18:	607b      	str	r3, [r7, #4]
		n++;
   12a1a:	68fb      	ldr	r3, [r7, #12]
   12a1c:	3301      	adds	r3, #1
   12a1e:	60fb      	str	r3, [r7, #12]
	while (*s != '\0') {
   12a20:	687b      	ldr	r3, [r7, #4]
   12a22:	781b      	ldrb	r3, [r3, #0]
   12a24:	2b00      	cmp	r3, #0
   12a26:	d1f5      	bne.n	12a14 <strlen+0xe>
	}

	return n;
   12a28:	68fb      	ldr	r3, [r7, #12]
}
   12a2a:	4618      	mov	r0, r3
   12a2c:	3714      	adds	r7, #20
   12a2e:	46bd      	mov	sp, r7
   12a30:	bc80      	pop	{r7}
   12a32:	4770      	bx	lr

00012a34 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   12a34:	b480      	push	{r7}
   12a36:	b085      	sub	sp, #20
   12a38:	af00      	add	r7, sp, #0
   12a3a:	6078      	str	r0, [r7, #4]
   12a3c:	6039      	str	r1, [r7, #0]
	size_t n = 0;
   12a3e:	2300      	movs	r3, #0
   12a40:	60fb      	str	r3, [r7, #12]

	while (*s != '\0' && n < maxlen) {
   12a42:	e005      	b.n	12a50 <strnlen+0x1c>
		s++;
   12a44:	687b      	ldr	r3, [r7, #4]
   12a46:	3301      	adds	r3, #1
   12a48:	607b      	str	r3, [r7, #4]
		n++;
   12a4a:	68fb      	ldr	r3, [r7, #12]
   12a4c:	3301      	adds	r3, #1
   12a4e:	60fb      	str	r3, [r7, #12]
	while (*s != '\0' && n < maxlen) {
   12a50:	687b      	ldr	r3, [r7, #4]
   12a52:	781b      	ldrb	r3, [r3, #0]
   12a54:	2b00      	cmp	r3, #0
   12a56:	d003      	beq.n	12a60 <strnlen+0x2c>
   12a58:	68fa      	ldr	r2, [r7, #12]
   12a5a:	683b      	ldr	r3, [r7, #0]
   12a5c:	429a      	cmp	r2, r3
   12a5e:	d3f1      	bcc.n	12a44 <strnlen+0x10>
	}

	return n;
   12a60:	68fb      	ldr	r3, [r7, #12]
}
   12a62:	4618      	mov	r0, r3
   12a64:	3714      	adds	r7, #20
   12a66:	46bd      	mov	sp, r7
   12a68:	bc80      	pop	{r7}
   12a6a:	4770      	bx	lr

00012a6c <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
   12a6c:	b480      	push	{r7}
   12a6e:	b083      	sub	sp, #12
   12a70:	af00      	add	r7, sp, #0
   12a72:	6078      	str	r0, [r7, #4]
   12a74:	6039      	str	r1, [r7, #0]
	while ((*s1 == *s2) && (*s1 != '\0')) {
   12a76:	e005      	b.n	12a84 <strcmp+0x18>
		s1++;
   12a78:	687b      	ldr	r3, [r7, #4]
   12a7a:	3301      	adds	r3, #1
   12a7c:	607b      	str	r3, [r7, #4]
		s2++;
   12a7e:	683b      	ldr	r3, [r7, #0]
   12a80:	3301      	adds	r3, #1
   12a82:	603b      	str	r3, [r7, #0]
	while ((*s1 == *s2) && (*s1 != '\0')) {
   12a84:	687b      	ldr	r3, [r7, #4]
   12a86:	781a      	ldrb	r2, [r3, #0]
   12a88:	683b      	ldr	r3, [r7, #0]
   12a8a:	781b      	ldrb	r3, [r3, #0]
   12a8c:	429a      	cmp	r2, r3
   12a8e:	d103      	bne.n	12a98 <strcmp+0x2c>
   12a90:	687b      	ldr	r3, [r7, #4]
   12a92:	781b      	ldrb	r3, [r3, #0]
   12a94:	2b00      	cmp	r3, #0
   12a96:	d1ef      	bne.n	12a78 <strcmp+0xc>
	}

	return *s1 - *s2;
   12a98:	687b      	ldr	r3, [r7, #4]
   12a9a:	781b      	ldrb	r3, [r3, #0]
   12a9c:	461a      	mov	r2, r3
   12a9e:	683b      	ldr	r3, [r7, #0]
   12aa0:	781b      	ldrb	r3, [r3, #0]
   12aa2:	1ad3      	subs	r3, r2, r3
}
   12aa4:	4618      	mov	r0, r3
   12aa6:	370c      	adds	r7, #12
   12aa8:	46bd      	mov	sp, r7
   12aaa:	bc80      	pop	{r7}
   12aac:	4770      	bx	lr

00012aae <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   12aae:	b480      	push	{r7}
   12ab0:	b08b      	sub	sp, #44	; 0x2c
   12ab2:	af00      	add	r7, sp, #0
   12ab4:	60f8      	str	r0, [r7, #12]
   12ab6:	60b9      	str	r1, [r7, #8]
   12ab8:	607a      	str	r2, [r7, #4]
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
   12aba:	68fb      	ldr	r3, [r7, #12]
   12abc:	627b      	str	r3, [r7, #36]	; 0x24
	const unsigned char *s_byte = (const unsigned char *)s;
   12abe:	68bb      	ldr	r3, [r7, #8]
   12ac0:	623b      	str	r3, [r7, #32]

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;
   12ac2:	2303      	movs	r3, #3
   12ac4:	617b      	str	r3, [r7, #20]

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   12ac6:	68fa      	ldr	r2, [r7, #12]
   12ac8:	6a3b      	ldr	r3, [r7, #32]
   12aca:	405a      	eors	r2, r3
   12acc:	697b      	ldr	r3, [r7, #20]
   12ace:	4013      	ands	r3, r2
   12ad0:	2b00      	cmp	r3, #0
   12ad2:	d138      	bne.n	12b46 <memcpy+0x98>

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   12ad4:	e00f      	b.n	12af6 <memcpy+0x48>
			if (n == 0) {
   12ad6:	687b      	ldr	r3, [r7, #4]
   12ad8:	2b00      	cmp	r3, #0
   12ada:	d101      	bne.n	12ae0 <memcpy+0x32>
				return d;
   12adc:	68fb      	ldr	r3, [r7, #12]
   12ade:	e036      	b.n	12b4e <memcpy+0xa0>
			}
			*(d_byte++) = *(s_byte++);
   12ae0:	6a3a      	ldr	r2, [r7, #32]
   12ae2:	1c53      	adds	r3, r2, #1
   12ae4:	623b      	str	r3, [r7, #32]
   12ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12ae8:	1c59      	adds	r1, r3, #1
   12aea:	6279      	str	r1, [r7, #36]	; 0x24
   12aec:	7812      	ldrb	r2, [r2, #0]
   12aee:	701a      	strb	r2, [r3, #0]
			n--;
   12af0:	687b      	ldr	r3, [r7, #4]
   12af2:	3b01      	subs	r3, #1
   12af4:	607b      	str	r3, [r7, #4]
		while (((uintptr_t)d_byte) & mask) {
   12af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   12af8:	697b      	ldr	r3, [r7, #20]
   12afa:	4013      	ands	r3, r2
   12afc:	2b00      	cmp	r3, #0
   12afe:	d1ea      	bne.n	12ad6 <memcpy+0x28>
		}

		/* do word-sized copying as long as possible */

		mem_word_t *d_word = (mem_word_t *)d_byte;
   12b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12b02:	61fb      	str	r3, [r7, #28]
		const mem_word_t *s_word = (const mem_word_t *)s_byte;
   12b04:	6a3b      	ldr	r3, [r7, #32]
   12b06:	61bb      	str	r3, [r7, #24]

		while (n >= sizeof(mem_word_t)) {
   12b08:	e00a      	b.n	12b20 <memcpy+0x72>
			*(d_word++) = *(s_word++);
   12b0a:	69ba      	ldr	r2, [r7, #24]
   12b0c:	1d13      	adds	r3, r2, #4
   12b0e:	61bb      	str	r3, [r7, #24]
   12b10:	69fb      	ldr	r3, [r7, #28]
   12b12:	1d19      	adds	r1, r3, #4
   12b14:	61f9      	str	r1, [r7, #28]
   12b16:	6812      	ldr	r2, [r2, #0]
   12b18:	601a      	str	r2, [r3, #0]
			n -= sizeof(mem_word_t);
   12b1a:	687b      	ldr	r3, [r7, #4]
   12b1c:	3b04      	subs	r3, #4
   12b1e:	607b      	str	r3, [r7, #4]
		while (n >= sizeof(mem_word_t)) {
   12b20:	687b      	ldr	r3, [r7, #4]
   12b22:	2b03      	cmp	r3, #3
   12b24:	d8f1      	bhi.n	12b0a <memcpy+0x5c>
		}

		d_byte = (unsigned char *)d_word;
   12b26:	69fb      	ldr	r3, [r7, #28]
   12b28:	627b      	str	r3, [r7, #36]	; 0x24
		s_byte = (unsigned char *)s_word;
   12b2a:	69bb      	ldr	r3, [r7, #24]
   12b2c:	623b      	str	r3, [r7, #32]
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   12b2e:	e00a      	b.n	12b46 <memcpy+0x98>
		*(d_byte++) = *(s_byte++);
   12b30:	6a3a      	ldr	r2, [r7, #32]
   12b32:	1c53      	adds	r3, r2, #1
   12b34:	623b      	str	r3, [r7, #32]
   12b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12b38:	1c59      	adds	r1, r3, #1
   12b3a:	6279      	str	r1, [r7, #36]	; 0x24
   12b3c:	7812      	ldrb	r2, [r2, #0]
   12b3e:	701a      	strb	r2, [r3, #0]
		n--;
   12b40:	687b      	ldr	r3, [r7, #4]
   12b42:	3b01      	subs	r3, #1
   12b44:	607b      	str	r3, [r7, #4]
	while (n > 0) {
   12b46:	687b      	ldr	r3, [r7, #4]
   12b48:	2b00      	cmp	r3, #0
   12b4a:	d1f1      	bne.n	12b30 <memcpy+0x82>
	}

	return d;
   12b4c:	68fb      	ldr	r3, [r7, #12]
}
   12b4e:	4618      	mov	r0, r3
   12b50:	372c      	adds	r7, #44	; 0x2c
   12b52:	46bd      	mov	sp, r7
   12b54:	bc80      	pop	{r7}
   12b56:	4770      	bx	lr

00012b58 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   12b58:	b480      	push	{r7}
   12b5a:	b089      	sub	sp, #36	; 0x24
   12b5c:	af00      	add	r7, sp, #0
   12b5e:	60f8      	str	r0, [r7, #12]
   12b60:	60b9      	str	r1, [r7, #8]
   12b62:	607a      	str	r2, [r7, #4]
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   12b64:	68fb      	ldr	r3, [r7, #12]
   12b66:	61fb      	str	r3, [r7, #28]
	unsigned char c_byte = (unsigned char)c;
   12b68:	68bb      	ldr	r3, [r7, #8]
   12b6a:	75fb      	strb	r3, [r7, #23]

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   12b6c:	e00c      	b.n	12b88 <memset+0x30>
		if (n == 0) {
   12b6e:	687b      	ldr	r3, [r7, #4]
   12b70:	2b00      	cmp	r3, #0
   12b72:	d101      	bne.n	12b78 <memset+0x20>
			return buf;
   12b74:	68fb      	ldr	r3, [r7, #12]
   12b76:	e035      	b.n	12be4 <memset+0x8c>
		}
		*(d_byte++) = c_byte;
   12b78:	69fb      	ldr	r3, [r7, #28]
   12b7a:	1c5a      	adds	r2, r3, #1
   12b7c:	61fa      	str	r2, [r7, #28]
   12b7e:	7dfa      	ldrb	r2, [r7, #23]
   12b80:	701a      	strb	r2, [r3, #0]
		n--;
   12b82:	687b      	ldr	r3, [r7, #4]
   12b84:	3b01      	subs	r3, #1
   12b86:	607b      	str	r3, [r7, #4]
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   12b88:	69fb      	ldr	r3, [r7, #28]
   12b8a:	f003 0303 	and.w	r3, r3, #3
   12b8e:	2b00      	cmp	r3, #0
   12b90:	d1ed      	bne.n	12b6e <memset+0x16>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
   12b92:	69fb      	ldr	r3, [r7, #28]
   12b94:	61bb      	str	r3, [r7, #24]
	mem_word_t c_word = (mem_word_t)c_byte;
   12b96:	7dfb      	ldrb	r3, [r7, #23]
   12b98:	613b      	str	r3, [r7, #16]

	c_word |= c_word << 8;
   12b9a:	693b      	ldr	r3, [r7, #16]
   12b9c:	021b      	lsls	r3, r3, #8
   12b9e:	693a      	ldr	r2, [r7, #16]
   12ba0:	4313      	orrs	r3, r2
   12ba2:	613b      	str	r3, [r7, #16]
	c_word |= c_word << 16;
   12ba4:	693b      	ldr	r3, [r7, #16]
   12ba6:	041b      	lsls	r3, r3, #16
   12ba8:	693a      	ldr	r2, [r7, #16]
   12baa:	4313      	orrs	r3, r2
   12bac:	613b      	str	r3, [r7, #16]
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   12bae:	e007      	b.n	12bc0 <memset+0x68>
		*(d_word++) = c_word;
   12bb0:	69bb      	ldr	r3, [r7, #24]
   12bb2:	1d1a      	adds	r2, r3, #4
   12bb4:	61ba      	str	r2, [r7, #24]
   12bb6:	693a      	ldr	r2, [r7, #16]
   12bb8:	601a      	str	r2, [r3, #0]
		n -= sizeof(mem_word_t);
   12bba:	687b      	ldr	r3, [r7, #4]
   12bbc:	3b04      	subs	r3, #4
   12bbe:	607b      	str	r3, [r7, #4]
	while (n >= sizeof(mem_word_t)) {
   12bc0:	687b      	ldr	r3, [r7, #4]
   12bc2:	2b03      	cmp	r3, #3
   12bc4:	d8f4      	bhi.n	12bb0 <memset+0x58>
	}

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
   12bc6:	69bb      	ldr	r3, [r7, #24]
   12bc8:	61fb      	str	r3, [r7, #28]
#endif

	while (n > 0) {
   12bca:	e007      	b.n	12bdc <memset+0x84>
		*(d_byte++) = c_byte;
   12bcc:	69fb      	ldr	r3, [r7, #28]
   12bce:	1c5a      	adds	r2, r3, #1
   12bd0:	61fa      	str	r2, [r7, #28]
   12bd2:	7dfa      	ldrb	r2, [r7, #23]
   12bd4:	701a      	strb	r2, [r3, #0]
		n--;
   12bd6:	687b      	ldr	r3, [r7, #4]
   12bd8:	3b01      	subs	r3, #1
   12bda:	607b      	str	r3, [r7, #4]
	while (n > 0) {
   12bdc:	687b      	ldr	r3, [r7, #4]
   12bde:	2b00      	cmp	r3, #0
   12be0:	d1f4      	bne.n	12bcc <memset+0x74>
	}

	return buf;
   12be2:	68fb      	ldr	r3, [r7, #12]
}
   12be4:	4618      	mov	r0, r3
   12be6:	3724      	adds	r7, #36	; 0x24
   12be8:	46bd      	mov	sp, r7
   12bea:	bc80      	pop	{r7}
   12bec:	4770      	bx	lr

00012bee <_stdout_hook_default>:
{
   12bee:	b480      	push	{r7}
   12bf0:	b083      	sub	sp, #12
   12bf2:	af00      	add	r7, sp, #0
   12bf4:	6078      	str	r0, [r7, #4]
	return EOF;
   12bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   12bfa:	4618      	mov	r0, r3
   12bfc:	370c      	adds	r7, #12
   12bfe:	46bd      	mov	sp, r7
   12c00:	bc80      	pop	{r7}
   12c02:	4770      	bx	lr

00012c04 <z_snode_next_peek>:
{
   12c04:	b480      	push	{r7}
   12c06:	b083      	sub	sp, #12
   12c08:	af00      	add	r7, sp, #0
   12c0a:	6078      	str	r0, [r7, #4]
	return node->next;
   12c0c:	687b      	ldr	r3, [r7, #4]
   12c0e:	681b      	ldr	r3, [r3, #0]
}
   12c10:	4618      	mov	r0, r3
   12c12:	370c      	adds	r7, #12
   12c14:	46bd      	mov	sp, r7
   12c16:	bc80      	pop	{r7}
   12c18:	4770      	bx	lr

00012c1a <z_snode_next_set>:
{
   12c1a:	b480      	push	{r7}
   12c1c:	b083      	sub	sp, #12
   12c1e:	af00      	add	r7, sp, #0
   12c20:	6078      	str	r0, [r7, #4]
   12c22:	6039      	str	r1, [r7, #0]
	parent->next = child;
   12c24:	687b      	ldr	r3, [r7, #4]
   12c26:	683a      	ldr	r2, [r7, #0]
   12c28:	601a      	str	r2, [r3, #0]
}
   12c2a:	bf00      	nop
   12c2c:	370c      	adds	r7, #12
   12c2e:	46bd      	mov	sp, r7
   12c30:	bc80      	pop	{r7}
   12c32:	4770      	bx	lr

00012c34 <z_slist_head_set>:
{
   12c34:	b480      	push	{r7}
   12c36:	b083      	sub	sp, #12
   12c38:	af00      	add	r7, sp, #0
   12c3a:	6078      	str	r0, [r7, #4]
   12c3c:	6039      	str	r1, [r7, #0]
	list->head = node;
   12c3e:	687b      	ldr	r3, [r7, #4]
   12c40:	683a      	ldr	r2, [r7, #0]
   12c42:	601a      	str	r2, [r3, #0]
}
   12c44:	bf00      	nop
   12c46:	370c      	adds	r7, #12
   12c48:	46bd      	mov	sp, r7
   12c4a:	bc80      	pop	{r7}
   12c4c:	4770      	bx	lr

00012c4e <z_slist_tail_set>:
{
   12c4e:	b480      	push	{r7}
   12c50:	b083      	sub	sp, #12
   12c52:	af00      	add	r7, sp, #0
   12c54:	6078      	str	r0, [r7, #4]
   12c56:	6039      	str	r1, [r7, #0]
	list->tail = node;
   12c58:	687b      	ldr	r3, [r7, #4]
   12c5a:	683a      	ldr	r2, [r7, #0]
   12c5c:	605a      	str	r2, [r3, #4]
}
   12c5e:	bf00      	nop
   12c60:	370c      	adds	r7, #12
   12c62:	46bd      	mov	sp, r7
   12c64:	bc80      	pop	{r7}
   12c66:	4770      	bx	lr

00012c68 <sys_slist_peek_head>:
{
   12c68:	b480      	push	{r7}
   12c6a:	b083      	sub	sp, #12
   12c6c:	af00      	add	r7, sp, #0
   12c6e:	6078      	str	r0, [r7, #4]
	return list->head;
   12c70:	687b      	ldr	r3, [r7, #4]
   12c72:	681b      	ldr	r3, [r3, #0]
}
   12c74:	4618      	mov	r0, r3
   12c76:	370c      	adds	r7, #12
   12c78:	46bd      	mov	sp, r7
   12c7a:	bc80      	pop	{r7}
   12c7c:	4770      	bx	lr

00012c7e <sys_slist_peek_tail>:
{
   12c7e:	b480      	push	{r7}
   12c80:	b083      	sub	sp, #12
   12c82:	af00      	add	r7, sp, #0
   12c84:	6078      	str	r0, [r7, #4]
	return list->tail;
   12c86:	687b      	ldr	r3, [r7, #4]
   12c88:	685b      	ldr	r3, [r3, #4]
}
   12c8a:	4618      	mov	r0, r3
   12c8c:	370c      	adds	r7, #12
   12c8e:	46bd      	mov	sp, r7
   12c90:	bc80      	pop	{r7}
   12c92:	4770      	bx	lr

00012c94 <sys_slist_is_empty>:
Z_GENLIST_IS_EMPTY(slist)
   12c94:	b580      	push	{r7, lr}
   12c96:	b082      	sub	sp, #8
   12c98:	af00      	add	r7, sp, #0
   12c9a:	6078      	str	r0, [r7, #4]
   12c9c:	6878      	ldr	r0, [r7, #4]
   12c9e:	f7ff ffe3 	bl	12c68 <sys_slist_peek_head>
   12ca2:	4603      	mov	r3, r0
   12ca4:	2b00      	cmp	r3, #0
   12ca6:	bf0c      	ite	eq
   12ca8:	2301      	moveq	r3, #1
   12caa:	2300      	movne	r3, #0
   12cac:	b2db      	uxtb	r3, r3
   12cae:	4618      	mov	r0, r3
   12cb0:	3708      	adds	r7, #8
   12cb2:	46bd      	mov	sp, r7
   12cb4:	bd80      	pop	{r7, pc}

00012cb6 <sys_slist_peek_next_no_check>:
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   12cb6:	b580      	push	{r7, lr}
   12cb8:	b082      	sub	sp, #8
   12cba:	af00      	add	r7, sp, #0
   12cbc:	6078      	str	r0, [r7, #4]
   12cbe:	6878      	ldr	r0, [r7, #4]
   12cc0:	f7ff ffa0 	bl	12c04 <z_snode_next_peek>
   12cc4:	4603      	mov	r3, r0
   12cc6:	4618      	mov	r0, r3
   12cc8:	3708      	adds	r7, #8
   12cca:	46bd      	mov	sp, r7
   12ccc:	bd80      	pop	{r7, pc}

00012cce <sys_slist_peek_next>:
Z_GENLIST_PEEK_NEXT(slist, snode)
   12cce:	b580      	push	{r7, lr}
   12cd0:	b082      	sub	sp, #8
   12cd2:	af00      	add	r7, sp, #0
   12cd4:	6078      	str	r0, [r7, #4]
   12cd6:	687b      	ldr	r3, [r7, #4]
   12cd8:	2b00      	cmp	r3, #0
   12cda:	d004      	beq.n	12ce6 <sys_slist_peek_next+0x18>
   12cdc:	6878      	ldr	r0, [r7, #4]
   12cde:	f7ff ffea 	bl	12cb6 <sys_slist_peek_next_no_check>
   12ce2:	4603      	mov	r3, r0
   12ce4:	e000      	b.n	12ce8 <sys_slist_peek_next+0x1a>
   12ce6:	2300      	movs	r3, #0
   12ce8:	4618      	mov	r0, r3
   12cea:	3708      	adds	r7, #8
   12cec:	46bd      	mov	sp, r7
   12cee:	bd80      	pop	{r7, pc}

00012cf0 <sys_slist_prepend>:
Z_GENLIST_PREPEND(slist, snode)
   12cf0:	b580      	push	{r7, lr}
   12cf2:	b082      	sub	sp, #8
   12cf4:	af00      	add	r7, sp, #0
   12cf6:	6078      	str	r0, [r7, #4]
   12cf8:	6039      	str	r1, [r7, #0]
   12cfa:	6878      	ldr	r0, [r7, #4]
   12cfc:	f7ff ffb4 	bl	12c68 <sys_slist_peek_head>
   12d00:	4603      	mov	r3, r0
   12d02:	4619      	mov	r1, r3
   12d04:	6838      	ldr	r0, [r7, #0]
   12d06:	f7ff ff88 	bl	12c1a <z_snode_next_set>
   12d0a:	6839      	ldr	r1, [r7, #0]
   12d0c:	6878      	ldr	r0, [r7, #4]
   12d0e:	f7ff ff91 	bl	12c34 <z_slist_head_set>
   12d12:	6878      	ldr	r0, [r7, #4]
   12d14:	f7ff ffb3 	bl	12c7e <sys_slist_peek_tail>
   12d18:	4603      	mov	r3, r0
   12d1a:	2b00      	cmp	r3, #0
   12d1c:	d107      	bne.n	12d2e <sys_slist_prepend+0x3e>
   12d1e:	6878      	ldr	r0, [r7, #4]
   12d20:	f7ff ffa2 	bl	12c68 <sys_slist_peek_head>
   12d24:	4603      	mov	r3, r0
   12d26:	4619      	mov	r1, r3
   12d28:	6878      	ldr	r0, [r7, #4]
   12d2a:	f7ff ff90 	bl	12c4e <z_slist_tail_set>
   12d2e:	bf00      	nop
   12d30:	3708      	adds	r7, #8
   12d32:	46bd      	mov	sp, r7
   12d34:	bd80      	pop	{r7, pc}

00012d36 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   12d36:	b580      	push	{r7, lr}
   12d38:	b084      	sub	sp, #16
   12d3a:	af00      	add	r7, sp, #0
   12d3c:	60f8      	str	r0, [r7, #12]
   12d3e:	60b9      	str	r1, [r7, #8]
   12d40:	607a      	str	r2, [r7, #4]
   12d42:	68bb      	ldr	r3, [r7, #8]
   12d44:	2b00      	cmp	r3, #0
   12d46:	d117      	bne.n	12d78 <sys_slist_remove+0x42>
   12d48:	6878      	ldr	r0, [r7, #4]
   12d4a:	f7ff ff5b 	bl	12c04 <z_snode_next_peek>
   12d4e:	4603      	mov	r3, r0
   12d50:	4619      	mov	r1, r3
   12d52:	68f8      	ldr	r0, [r7, #12]
   12d54:	f7ff ff6e 	bl	12c34 <z_slist_head_set>
   12d58:	68f8      	ldr	r0, [r7, #12]
   12d5a:	f7ff ff90 	bl	12c7e <sys_slist_peek_tail>
   12d5e:	4602      	mov	r2, r0
   12d60:	687b      	ldr	r3, [r7, #4]
   12d62:	4293      	cmp	r3, r2
   12d64:	d11b      	bne.n	12d9e <sys_slist_remove+0x68>
   12d66:	68f8      	ldr	r0, [r7, #12]
   12d68:	f7ff ff7e 	bl	12c68 <sys_slist_peek_head>
   12d6c:	4603      	mov	r3, r0
   12d6e:	4619      	mov	r1, r3
   12d70:	68f8      	ldr	r0, [r7, #12]
   12d72:	f7ff ff6c 	bl	12c4e <z_slist_tail_set>
   12d76:	e012      	b.n	12d9e <sys_slist_remove+0x68>
   12d78:	6878      	ldr	r0, [r7, #4]
   12d7a:	f7ff ff43 	bl	12c04 <z_snode_next_peek>
   12d7e:	4603      	mov	r3, r0
   12d80:	4619      	mov	r1, r3
   12d82:	68b8      	ldr	r0, [r7, #8]
   12d84:	f7ff ff49 	bl	12c1a <z_snode_next_set>
   12d88:	68f8      	ldr	r0, [r7, #12]
   12d8a:	f7ff ff78 	bl	12c7e <sys_slist_peek_tail>
   12d8e:	4602      	mov	r2, r0
   12d90:	687b      	ldr	r3, [r7, #4]
   12d92:	4293      	cmp	r3, r2
   12d94:	d103      	bne.n	12d9e <sys_slist_remove+0x68>
   12d96:	68b9      	ldr	r1, [r7, #8]
   12d98:	68f8      	ldr	r0, [r7, #12]
   12d9a:	f7ff ff58 	bl	12c4e <z_slist_tail_set>
   12d9e:	2100      	movs	r1, #0
   12da0:	6878      	ldr	r0, [r7, #4]
   12da2:	f7ff ff3a 	bl	12c1a <z_snode_next_set>
   12da6:	bf00      	nop
   12da8:	3710      	adds	r7, #16
   12daa:	46bd      	mov	sp, r7
   12dac:	bd80      	pop	{r7, pc}

00012dae <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   12dae:	b580      	push	{r7, lr}
   12db0:	b084      	sub	sp, #16
   12db2:	af00      	add	r7, sp, #0
   12db4:	6078      	str	r0, [r7, #4]
   12db6:	6039      	str	r1, [r7, #0]
   12db8:	2300      	movs	r3, #0
   12dba:	60fb      	str	r3, [r7, #12]
   12dbc:	6878      	ldr	r0, [r7, #4]
   12dbe:	f7ff ff53 	bl	12c68 <sys_slist_peek_head>
   12dc2:	60b8      	str	r0, [r7, #8]
   12dc4:	e010      	b.n	12de8 <sys_slist_find_and_remove+0x3a>
   12dc6:	68ba      	ldr	r2, [r7, #8]
   12dc8:	683b      	ldr	r3, [r7, #0]
   12dca:	429a      	cmp	r2, r3
   12dcc:	d106      	bne.n	12ddc <sys_slist_find_and_remove+0x2e>
   12dce:	683a      	ldr	r2, [r7, #0]
   12dd0:	68f9      	ldr	r1, [r7, #12]
   12dd2:	6878      	ldr	r0, [r7, #4]
   12dd4:	f7ff ffaf 	bl	12d36 <sys_slist_remove>
   12dd8:	2301      	movs	r3, #1
   12dda:	e009      	b.n	12df0 <sys_slist_find_and_remove+0x42>
   12ddc:	68bb      	ldr	r3, [r7, #8]
   12dde:	60fb      	str	r3, [r7, #12]
   12de0:	68b8      	ldr	r0, [r7, #8]
   12de2:	f7ff ff74 	bl	12cce <sys_slist_peek_next>
   12de6:	60b8      	str	r0, [r7, #8]
   12de8:	68bb      	ldr	r3, [r7, #8]
   12dea:	2b00      	cmp	r3, #0
   12dec:	d1eb      	bne.n	12dc6 <sys_slist_find_and_remove+0x18>
   12dee:	2300      	movs	r3, #0
   12df0:	4618      	mov	r0, r3
   12df2:	3710      	adds	r7, #16
   12df4:	46bd      	mov	sp, r7
   12df6:	bd80      	pop	{r7, pc}

00012df8 <nrf_event_readback>:
{
   12df8:	b480      	push	{r7}
   12dfa:	b083      	sub	sp, #12
   12dfc:	af00      	add	r7, sp, #0
   12dfe:	6078      	str	r0, [r7, #4]
    (void)*((volatile uint32_t *)(p_event_reg));
   12e00:	687b      	ldr	r3, [r7, #4]
   12e02:	681b      	ldr	r3, [r3, #0]
}
   12e04:	bf00      	nop
   12e06:	370c      	adds	r7, #12
   12e08:	46bd      	mov	sp, r7
   12e0a:	bc80      	pop	{r7}
   12e0c:	4770      	bx	lr

00012e0e <nrf_gpio_cfg>:
    nrf_gpio_pin_dir_t   dir,
    nrf_gpio_pin_input_t input,
    nrf_gpio_pin_pull_t  pull,
    nrf_gpio_pin_drive_t drive,
    nrf_gpio_pin_sense_t sense)
{
   12e0e:	b580      	push	{r7, lr}
   12e10:	b084      	sub	sp, #16
   12e12:	af00      	add	r7, sp, #0
   12e14:	6078      	str	r0, [r7, #4]
   12e16:	4608      	mov	r0, r1
   12e18:	4611      	mov	r1, r2
   12e1a:	461a      	mov	r2, r3
   12e1c:	4603      	mov	r3, r0
   12e1e:	70fb      	strb	r3, [r7, #3]
   12e20:	460b      	mov	r3, r1
   12e22:	70bb      	strb	r3, [r7, #2]
   12e24:	4613      	mov	r3, r2
   12e26:	707b      	strb	r3, [r7, #1]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   12e28:	1d3b      	adds	r3, r7, #4
   12e2a:	4618      	mov	r0, r3
   12e2c:	f7f5 f910 	bl	8050 <nrf_gpio_pin_port_decode>
   12e30:	60f8      	str	r0, [r7, #12]

#if defined(GPIO_PIN_CNF_MCUSEL_Msk)
    /* Preserve MCUSEL setting. */
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
#else
    uint32_t cnf = 0;
   12e32:	2300      	movs	r3, #0
   12e34:	60bb      	str	r3, [r7, #8]
#endif
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   12e36:	78fa      	ldrb	r2, [r7, #3]
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   12e38:	78bb      	ldrb	r3, [r7, #2]
   12e3a:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   12e3c:	431a      	orrs	r2, r3
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   12e3e:	787b      	ldrb	r3, [r7, #1]
   12e40:	009b      	lsls	r3, r3, #2
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   12e42:	431a      	orrs	r2, r3
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   12e44:	7e3b      	ldrb	r3, [r7, #24]
   12e46:	021b      	lsls	r3, r3, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   12e48:	431a      	orrs	r2, r3
           ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);
   12e4a:	7f3b      	ldrb	r3, [r7, #28]
   12e4c:	041b      	lsls	r3, r3, #16
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   12e4e:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   12e50:	68ba      	ldr	r2, [r7, #8]
   12e52:	4313      	orrs	r3, r2
   12e54:	60bb      	str	r3, [r7, #8]

    reg->PIN_CNF[pin_number] = cnf;
   12e56:	687a      	ldr	r2, [r7, #4]
   12e58:	68fb      	ldr	r3, [r7, #12]
   12e5a:	3280      	adds	r2, #128	; 0x80
   12e5c:	68b9      	ldr	r1, [r7, #8]
   12e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   12e62:	bf00      	nop
   12e64:	3710      	adds	r7, #16
   12e66:	46bd      	mov	sp, r7
   12e68:	bd80      	pop	{r7, pc}

00012e6a <nrf_gpio_cfg_sense_set>:
}


NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
   12e6a:	b580      	push	{r7, lr}
   12e6c:	b084      	sub	sp, #16
   12e6e:	af00      	add	r7, sp, #0
   12e70:	6078      	str	r0, [r7, #4]
   12e72:	460b      	mov	r3, r1
   12e74:	70fb      	strb	r3, [r7, #3]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   12e76:	1d3b      	adds	r3, r7, #4
   12e78:	4618      	mov	r0, r3
   12e7a:	f7f5 f8e9 	bl	8050 <nrf_gpio_pin_port_decode>
   12e7e:	60f8      	str	r0, [r7, #12]
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   12e80:	687a      	ldr	r2, [r7, #4]
   12e82:	68fb      	ldr	r3, [r7, #12]
   12e84:	3280      	adds	r2, #128	; 0x80
   12e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12e8a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   12e8e:	60bb      	str	r3, [r7, #8]

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   12e90:	78fb      	ldrb	r3, [r7, #3]
   12e92:	041b      	lsls	r3, r3, #16
   12e94:	4619      	mov	r1, r3
   12e96:	687a      	ldr	r2, [r7, #4]
   12e98:	68bb      	ldr	r3, [r7, #8]
   12e9a:	4319      	orrs	r1, r3
   12e9c:	68fb      	ldr	r3, [r7, #12]
   12e9e:	3280      	adds	r2, #128	; 0x80
   12ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   12ea4:	bf00      	nop
   12ea6:	3710      	adds	r7, #16
   12ea8:	46bd      	mov	sp, r7
   12eaa:	bd80      	pop	{r7, pc}

00012eac <nrf_gpio_pin_sense_get>:
    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
}


NRF_STATIC_INLINE nrf_gpio_pin_sense_t nrf_gpio_pin_sense_get(uint32_t pin_number)
{
   12eac:	b580      	push	{r7, lr}
   12eae:	b084      	sub	sp, #16
   12eb0:	af00      	add	r7, sp, #0
   12eb2:	6078      	str	r0, [r7, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   12eb4:	1d3b      	adds	r3, r7, #4
   12eb6:	4618      	mov	r0, r3
   12eb8:	f7f5 f8ca 	bl	8050 <nrf_gpio_pin_port_decode>
   12ebc:	60f8      	str	r0, [r7, #12]

    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   12ebe:	687a      	ldr	r2, [r7, #4]
   12ec0:	68fb      	ldr	r3, [r7, #12]
   12ec2:	3280      	adds	r2, #128	; 0x80
   12ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   12ec8:	0c1b      	lsrs	r3, r3, #16
   12eca:	f003 0303 	and.w	r3, r3, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   12ece:	b2db      	uxtb	r3, r3
}
   12ed0:	4618      	mov	r0, r3
   12ed2:	3710      	adds	r7, #16
   12ed4:	46bd      	mov	sp, r7
   12ed6:	bd80      	pop	{r7, pc}

00012ed8 <nrf_gpio_pin_dir_get>:


NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
   12ed8:	b580      	push	{r7, lr}
   12eda:	b084      	sub	sp, #16
   12edc:	af00      	add	r7, sp, #0
   12ede:	6078      	str	r0, [r7, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   12ee0:	1d3b      	adds	r3, r7, #4
   12ee2:	4618      	mov	r0, r3
   12ee4:	f7f5 f8b4 	bl	8050 <nrf_gpio_pin_port_decode>
   12ee8:	60f8      	str	r0, [r7, #12]

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   12eea:	687a      	ldr	r2, [r7, #4]
   12eec:	68fb      	ldr	r3, [r7, #12]
   12eee:	3280      	adds	r2, #128	; 0x80
   12ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   12ef4:	b2db      	uxtb	r3, r3
   12ef6:	f003 0301 	and.w	r3, r3, #1
   12efa:	b2db      	uxtb	r3, r3
                                 GPIO_PIN_CNF_DIR_Msk) >> GPIO_PIN_CNF_DIR_Pos);
}
   12efc:	4618      	mov	r0, r3
   12efe:	3710      	adds	r7, #16
   12f00:	46bd      	mov	sp, r7
   12f02:	bd80      	pop	{r7, pc}

00012f04 <nrf_gpio_port_in_read>:
    return p_reg->DIR;
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
   12f04:	b480      	push	{r7}
   12f06:	b083      	sub	sp, #12
   12f08:	af00      	add	r7, sp, #0
   12f0a:	6078      	str	r0, [r7, #4]
    return p_reg->IN;
   12f0c:	687b      	ldr	r3, [r7, #4]
   12f0e:	691b      	ldr	r3, [r3, #16]
}
   12f10:	4618      	mov	r0, r3
   12f12:	370c      	adds	r7, #12
   12f14:	46bd      	mov	sp, r7
   12f16:	bc80      	pop	{r7}
   12f18:	4770      	bx	lr

00012f1a <nrf_gpio_port_out_read>:


NRF_STATIC_INLINE uint32_t nrf_gpio_port_out_read(NRF_GPIO_Type const * p_reg)
{
   12f1a:	b480      	push	{r7}
   12f1c:	b083      	sub	sp, #12
   12f1e:	af00      	add	r7, sp, #0
   12f20:	6078      	str	r0, [r7, #4]
    return p_reg->OUT;
   12f22:	687b      	ldr	r3, [r7, #4]
   12f24:	685b      	ldr	r3, [r3, #4]
}
   12f26:	4618      	mov	r0, r3
   12f28:	370c      	adds	r7, #12
   12f2a:	46bd      	mov	sp, r7
   12f2c:	bc80      	pop	{r7}
   12f2e:	4770      	bx	lr

00012f30 <nrf_gpio_port_out_write>:


NRF_STATIC_INLINE void nrf_gpio_port_out_write(NRF_GPIO_Type * p_reg, uint32_t value)
{
   12f30:	b480      	push	{r7}
   12f32:	b083      	sub	sp, #12
   12f34:	af00      	add	r7, sp, #0
   12f36:	6078      	str	r0, [r7, #4]
   12f38:	6039      	str	r1, [r7, #0]
    p_reg->OUT = value;
   12f3a:	687b      	ldr	r3, [r7, #4]
   12f3c:	683a      	ldr	r2, [r7, #0]
   12f3e:	605a      	str	r2, [r3, #4]
}
   12f40:	bf00      	nop
   12f42:	370c      	adds	r7, #12
   12f44:	46bd      	mov	sp, r7
   12f46:	bc80      	pop	{r7}
   12f48:	4770      	bx	lr

00012f4a <nrf_gpio_port_out_set>:


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
   12f4a:	b480      	push	{r7}
   12f4c:	b083      	sub	sp, #12
   12f4e:	af00      	add	r7, sp, #0
   12f50:	6078      	str	r0, [r7, #4]
   12f52:	6039      	str	r1, [r7, #0]
    p_reg->OUTSET = set_mask;
   12f54:	687b      	ldr	r3, [r7, #4]
   12f56:	683a      	ldr	r2, [r7, #0]
   12f58:	609a      	str	r2, [r3, #8]
}
   12f5a:	bf00      	nop
   12f5c:	370c      	adds	r7, #12
   12f5e:	46bd      	mov	sp, r7
   12f60:	bc80      	pop	{r7}
   12f62:	4770      	bx	lr

00012f64 <nrf_gpio_port_out_clear>:


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
   12f64:	b480      	push	{r7}
   12f66:	b083      	sub	sp, #12
   12f68:	af00      	add	r7, sp, #0
   12f6a:	6078      	str	r0, [r7, #4]
   12f6c:	6039      	str	r1, [r7, #0]
    p_reg->OUTCLR = clr_mask;
   12f6e:	687b      	ldr	r3, [r7, #4]
   12f70:	683a      	ldr	r2, [r7, #0]
   12f72:	60da      	str	r2, [r3, #12]
}
   12f74:	bf00      	nop
   12f76:	370c      	adds	r7, #12
   12f78:	46bd      	mov	sp, r7
   12f7a:	bc80      	pop	{r7}
   12f7c:	4770      	bx	lr

00012f7e <nrf_gpio_pin_present_check>:
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
}
#endif

NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
   12f7e:	b480      	push	{r7}
   12f80:	b085      	sub	sp, #20
   12f82:	af00      	add	r7, sp, #0
   12f84:	6078      	str	r0, [r7, #4]
    uint32_t port = pin_number >> 5;
   12f86:	687b      	ldr	r3, [r7, #4]
   12f88:	095b      	lsrs	r3, r3, #5
   12f8a:	60bb      	str	r3, [r7, #8]
    uint32_t mask = 0;
   12f8c:	2300      	movs	r3, #0
   12f8e:	60fb      	str	r3, [r7, #12]

    switch (port)
   12f90:	68bb      	ldr	r3, [r7, #8]
   12f92:	2b00      	cmp	r3, #0
   12f94:	d103      	bne.n	12f9e <nrf_gpio_pin_present_check+0x20>
    {
#ifdef P0_FEATURE_PINS_PRESENT
        case 0:
            mask = P0_FEATURE_PINS_PRESENT;
   12f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12f9a:	60fb      	str	r3, [r7, #12]
             * - P0.24 - Button 3
             * - P0.25 - Button 4
             */
            mask |= 0x03003800;
#endif // defined(NRF52820_XXAA) && defined(DEVELOP_IN_NRF52833)
            break;
   12f9c:	bf00      	nop
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   12f9e:	687b      	ldr	r3, [r7, #4]
   12fa0:	f003 031f 	and.w	r3, r3, #31
   12fa4:	607b      	str	r3, [r7, #4]

    return (mask & (1UL << pin_number)) ? true : false;
   12fa6:	68fa      	ldr	r2, [r7, #12]
   12fa8:	687b      	ldr	r3, [r7, #4]
   12faa:	fa22 f303 	lsr.w	r3, r2, r3
   12fae:	f003 0301 	and.w	r3, r3, #1
   12fb2:	2b00      	cmp	r3, #0
   12fb4:	bf14      	ite	ne
   12fb6:	2301      	movne	r3, #1
   12fb8:	2300      	moveq	r3, #0
   12fba:	b2db      	uxtb	r3, r3
}
   12fbc:	4618      	mov	r0, r3
   12fbe:	3714      	adds	r7, #20
   12fc0:	46bd      	mov	sp, r7
   12fc2:	bc80      	pop	{r7}
   12fc4:	4770      	bx	lr

00012fc6 <nrf_gpio_pin_port_number_extract>:

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
   12fc6:	b480      	push	{r7}
   12fc8:	b085      	sub	sp, #20
   12fca:	af00      	add	r7, sp, #0
   12fcc:	6078      	str	r0, [r7, #4]
    uint32_t pin_number = *p_pin;
   12fce:	687b      	ldr	r3, [r7, #4]
   12fd0:	681b      	ldr	r3, [r3, #0]
   12fd2:	60fb      	str	r3, [r7, #12]
    *p_pin = pin_number & 0x1F;
   12fd4:	68fb      	ldr	r3, [r7, #12]
   12fd6:	f003 021f 	and.w	r2, r3, #31
   12fda:	687b      	ldr	r3, [r7, #4]
   12fdc:	601a      	str	r2, [r3, #0]

    return pin_number >> 5;
   12fde:	68fb      	ldr	r3, [r7, #12]
   12fe0:	095b      	lsrs	r3, r3, #5
}
   12fe2:	4618      	mov	r0, r3
   12fe4:	3714      	adds	r7, #20
   12fe6:	46bd      	mov	sp, r7
   12fe8:	bc80      	pop	{r7}
   12fea:	4770      	bx	lr

00012fec <nrf_gpiote_event_check>:
    return ((uint32_t)p_reg + task);
}

NRF_STATIC_INLINE bool nrf_gpiote_event_check(NRF_GPIOTE_Type const * p_reg,
                                              nrf_gpiote_event_t      event)
{
   12fec:	b480      	push	{r7}
   12fee:	b083      	sub	sp, #12
   12ff0:	af00      	add	r7, sp, #0
   12ff2:	6078      	str	r0, [r7, #4]
   12ff4:	460b      	mov	r3, r1
   12ff6:	807b      	strh	r3, [r7, #2]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12ff8:	887b      	ldrh	r3, [r7, #2]
   12ffa:	687a      	ldr	r2, [r7, #4]
   12ffc:	4413      	add	r3, r2
   12ffe:	681b      	ldr	r3, [r3, #0]
   13000:	2b00      	cmp	r3, #0
   13002:	bf14      	ite	ne
   13004:	2301      	movne	r3, #1
   13006:	2300      	moveq	r3, #0
   13008:	b2db      	uxtb	r3, r3
}
   1300a:	4618      	mov	r0, r3
   1300c:	370c      	adds	r7, #12
   1300e:	46bd      	mov	sp, r7
   13010:	bc80      	pop	{r7}
   13012:	4770      	bx	lr

00013014 <nrf_gpiote_event_clear>:

NRF_STATIC_INLINE void nrf_gpiote_event_clear(NRF_GPIOTE_Type * p_reg, nrf_gpiote_event_t event)
{
   13014:	b580      	push	{r7, lr}
   13016:	b082      	sub	sp, #8
   13018:	af00      	add	r7, sp, #0
   1301a:	6078      	str	r0, [r7, #4]
   1301c:	460b      	mov	r3, r1
   1301e:	807b      	strh	r3, [r7, #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   13020:	887b      	ldrh	r3, [r7, #2]
   13022:	4619      	mov	r1, r3
   13024:	6878      	ldr	r0, [r7, #4]
   13026:	f000 f811 	bl	1304c <nrf_gpiote_event_address_get>
   1302a:	4603      	mov	r3, r0
   1302c:	461a      	mov	r2, r3
   1302e:	2300      	movs	r3, #0
   13030:	6013      	str	r3, [r2, #0]
    nrf_event_readback((void *)nrf_gpiote_event_address_get(p_reg, event));
   13032:	887b      	ldrh	r3, [r7, #2]
   13034:	4619      	mov	r1, r3
   13036:	6878      	ldr	r0, [r7, #4]
   13038:	f000 f808 	bl	1304c <nrf_gpiote_event_address_get>
   1303c:	4603      	mov	r3, r0
   1303e:	4618      	mov	r0, r3
   13040:	f7ff feda 	bl	12df8 <nrf_event_readback>
}
   13044:	bf00      	nop
   13046:	3708      	adds	r7, #8
   13048:	46bd      	mov	sp, r7
   1304a:	bd80      	pop	{r7, pc}

0001304c <nrf_gpiote_event_address_get>:

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_address_get(NRF_GPIOTE_Type const * p_reg,
                                                        nrf_gpiote_event_t      event)
{
   1304c:	b480      	push	{r7}
   1304e:	b083      	sub	sp, #12
   13050:	af00      	add	r7, sp, #0
   13052:	6078      	str	r0, [r7, #4]
   13054:	460b      	mov	r3, r1
   13056:	807b      	strh	r3, [r7, #2]
    return ((uint32_t)p_reg + event);
   13058:	887a      	ldrh	r2, [r7, #2]
   1305a:	687b      	ldr	r3, [r7, #4]
   1305c:	4413      	add	r3, r2
}
   1305e:	4618      	mov	r0, r3
   13060:	370c      	adds	r7, #12
   13062:	46bd      	mov	sp, r7
   13064:	bc80      	pop	{r7}
   13066:	4770      	bx	lr

00013068 <nrf_gpiote_int_enable>:

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
   13068:	b480      	push	{r7}
   1306a:	b083      	sub	sp, #12
   1306c:	af00      	add	r7, sp, #0
   1306e:	6078      	str	r0, [r7, #4]
   13070:	6039      	str	r1, [r7, #0]
    p_reg->INTENSET = mask;
   13072:	687b      	ldr	r3, [r7, #4]
   13074:	683a      	ldr	r2, [r7, #0]
   13076:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1307a:	bf00      	nop
   1307c:	370c      	adds	r7, #12
   1307e:	46bd      	mov	sp, r7
   13080:	bc80      	pop	{r7}
   13082:	4770      	bx	lr

00013084 <nrf_gpiote_int_disable>:

NRF_STATIC_INLINE void nrf_gpiote_int_disable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
   13084:	b480      	push	{r7}
   13086:	b083      	sub	sp, #12
   13088:	af00      	add	r7, sp, #0
   1308a:	6078      	str	r0, [r7, #4]
   1308c:	6039      	str	r1, [r7, #0]
    p_reg->INTENCLR = mask;
   1308e:	687b      	ldr	r3, [r7, #4]
   13090:	683a      	ldr	r2, [r7, #0]
   13092:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   13096:	bf00      	nop
   13098:	370c      	adds	r7, #12
   1309a:	46bd      	mov	sp, r7
   1309c:	bc80      	pop	{r7}
   1309e:	4770      	bx	lr

000130a0 <nrf_gpiote_int_enable_check>:

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
   130a0:	b480      	push	{r7}
   130a2:	b083      	sub	sp, #12
   130a4:	af00      	add	r7, sp, #0
   130a6:	6078      	str	r0, [r7, #4]
   130a8:	6039      	str	r1, [r7, #0]
    return p_reg->INTENSET & mask;
   130aa:	687b      	ldr	r3, [r7, #4]
   130ac:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   130b0:	683b      	ldr	r3, [r7, #0]
   130b2:	4013      	ands	r3, r2
}
   130b4:	4618      	mov	r0, r3
   130b6:	370c      	adds	r7, #12
   130b8:	46bd      	mov	sp, r7
   130ba:	bc80      	pop	{r7}
   130bc:	4770      	bx	lr

000130be <nrf_gpiote_event_enable>:
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
}
#endif // defined(DPPI_PRESENT)

NRF_STATIC_INLINE void nrf_gpiote_event_enable(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
   130be:	b480      	push	{r7}
   130c0:	b083      	sub	sp, #12
   130c2:	af00      	add	r7, sp, #0
   130c4:	6078      	str	r0, [r7, #4]
   130c6:	6039      	str	r1, [r7, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   130c8:	687b      	ldr	r3, [r7, #4]
   130ca:	683a      	ldr	r2, [r7, #0]
   130cc:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   130d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   130d4:	f043 0101 	orr.w	r1, r3, #1
   130d8:	687b      	ldr	r3, [r7, #4]
   130da:	683a      	ldr	r2, [r7, #0]
   130dc:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   130e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   130e4:	bf00      	nop
   130e6:	370c      	adds	r7, #12
   130e8:	46bd      	mov	sp, r7
   130ea:	bc80      	pop	{r7}
   130ec:	4770      	bx	lr

000130ee <nrf_gpiote_event_disable>:

NRF_STATIC_INLINE void nrf_gpiote_event_disable(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
   130ee:	b480      	push	{r7}
   130f0:	b083      	sub	sp, #12
   130f2:	af00      	add	r7, sp, #0
   130f4:	6078      	str	r0, [r7, #4]
   130f6:	6039      	str	r1, [r7, #0]
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   130f8:	687b      	ldr	r3, [r7, #4]
   130fa:	683a      	ldr	r2, [r7, #0]
   130fc:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   13100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13104:	f023 0101 	bic.w	r1, r3, #1
   13108:	687b      	ldr	r3, [r7, #4]
   1310a:	683a      	ldr	r2, [r7, #0]
   1310c:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   13110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   13114:	bf00      	nop
   13116:	370c      	adds	r7, #12
   13118:	46bd      	mov	sp, r7
   1311a:	bc80      	pop	{r7}
   1311c:	4770      	bx	lr

0001311e <nrf_gpiote_event_configure>:

NRF_STATIC_INLINE void nrf_gpiote_event_configure(NRF_GPIOTE_Type *     p_reg,
                                                  uint32_t              idx,
                                                  uint32_t              pin,
                                                  nrf_gpiote_polarity_t polarity)
{
   1311e:	b480      	push	{r7}
   13120:	b085      	sub	sp, #20
   13122:	af00      	add	r7, sp, #0
   13124:	60f8      	str	r0, [r7, #12]
   13126:	60b9      	str	r1, [r7, #8]
   13128:	607a      	str	r2, [r7, #4]
   1312a:	70fb      	strb	r3, [r7, #3]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1312c:	68fb      	ldr	r3, [r7, #12]
   1312e:	68ba      	ldr	r2, [r7, #8]
   13130:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   13134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   13138:	f423 3347 	bic.w	r3, r3, #203776	; 0x31c00
   1313c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   13140:	68fa      	ldr	r2, [r7, #12]
   13142:	68b9      	ldr	r1, [r7, #8]
   13144:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   13148:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1314c:	68fb      	ldr	r3, [r7, #12]
   1314e:	68ba      	ldr	r2, [r7, #8]
   13150:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   13154:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   13158:	687b      	ldr	r3, [r7, #4]
   1315a:	021b      	lsls	r3, r3, #8
   1315c:	f403 51f8 	and.w	r1, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   13160:	78fb      	ldrb	r3, [r7, #3]
   13162:	041b      	lsls	r3, r3, #16
   13164:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   13168:	430b      	orrs	r3, r1
   1316a:	ea42 0103 	orr.w	r1, r2, r3
   1316e:	68fb      	ldr	r3, [r7, #12]
   13170:	68ba      	ldr	r2, [r7, #8]
   13172:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   13176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   1317a:	bf00      	nop
   1317c:	3714      	adds	r7, #20
   1317e:	46bd      	mov	sp, r7
   13180:	bc80      	pop	{r7}
   13182:	4770      	bx	lr

00013184 <nrf_gpiote_event_pin_get>:

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
   13184:	b480      	push	{r7}
   13186:	b083      	sub	sp, #12
   13188:	af00      	add	r7, sp, #0
   1318a:	6078      	str	r0, [r7, #4]
   1318c:	6039      	str	r1, [r7, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1318e:	687b      	ldr	r3, [r7, #4]
   13190:	683a      	ldr	r2, [r7, #0]
   13192:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   13196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1319a:	0a1b      	lsrs	r3, r3, #8
   1319c:	f003 031f 	and.w	r3, r3, #31
}
   131a0:	4618      	mov	r0, r3
   131a2:	370c      	adds	r7, #12
   131a4:	46bd      	mov	sp, r7
   131a6:	bc80      	pop	{r7}
   131a8:	4770      	bx	lr

000131aa <get_port_data>:
{
   131aa:	b480      	push	{r7}
   131ac:	b083      	sub	sp, #12
   131ae:	af00      	add	r7, sp, #0
   131b0:	6078      	str	r0, [r7, #4]
	return port->data;
   131b2:	687b      	ldr	r3, [r7, #4]
   131b4:	691b      	ldr	r3, [r3, #16]
}
   131b6:	4618      	mov	r0, r3
   131b8:	370c      	adds	r7, #12
   131ba:	46bd      	mov	sp, r7
   131bc:	bc80      	pop	{r7}
   131be:	4770      	bx	lr

000131c0 <get_port_cfg>:
{
   131c0:	b480      	push	{r7}
   131c2:	b083      	sub	sp, #12
   131c4:	af00      	add	r7, sp, #0
   131c6:	6078      	str	r0, [r7, #4]
	return port->config;
   131c8:	687b      	ldr	r3, [r7, #4]
   131ca:	685b      	ldr	r3, [r3, #4]
}
   131cc:	4618      	mov	r0, r3
   131ce:	370c      	adds	r7, #12
   131d0:	46bd      	mov	sp, r7
   131d2:	bc80      	pop	{r7}
   131d4:	4770      	bx	lr

000131d6 <sense_for_pin>:
{
   131d6:	b480      	push	{r7}
   131d8:	b083      	sub	sp, #12
   131da:	af00      	add	r7, sp, #0
   131dc:	6078      	str	r0, [r7, #4]
   131de:	6039      	str	r1, [r7, #0]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   131e0:	687b      	ldr	r3, [r7, #4]
   131e2:	691a      	ldr	r2, [r3, #16]
   131e4:	683b      	ldr	r3, [r7, #0]
   131e6:	fa22 f303 	lsr.w	r3, r2, r3
   131ea:	f003 0301 	and.w	r3, r3, #1
   131ee:	2b00      	cmp	r3, #0
   131f0:	d001      	beq.n	131f6 <sense_for_pin+0x20>
		return NRF_GPIO_PIN_SENSE_HIGH;
   131f2:	2302      	movs	r3, #2
   131f4:	e000      	b.n	131f8 <sense_for_pin+0x22>
	return NRF_GPIO_PIN_SENSE_LOW;
   131f6:	2303      	movs	r3, #3
}
   131f8:	4618      	mov	r0, r3
   131fa:	370c      	adds	r7, #12
   131fc:	46bd      	mov	sp, r7
   131fe:	bc80      	pop	{r7}
   13200:	4770      	bx	lr

00013202 <gpiote_pin_int_cfg>:
{
   13202:	b580      	push	{r7, lr}
   13204:	b088      	sub	sp, #32
   13206:	af00      	add	r7, sp, #0
   13208:	6078      	str	r0, [r7, #4]
   1320a:	6039      	str	r1, [r7, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   1320c:	6878      	ldr	r0, [r7, #4]
   1320e:	f7ff ffcc 	bl	131aa <get_port_data>
   13212:	6178      	str	r0, [r7, #20]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   13214:	6878      	ldr	r0, [r7, #4]
   13216:	f7ff ffd3 	bl	131c0 <get_port_cfg>
   1321a:	6138      	str	r0, [r7, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1321c:	693b      	ldr	r3, [r7, #16]
   1321e:	7a1b      	ldrb	r3, [r3, #8]
   13220:	015b      	lsls	r3, r3, #5
   13222:	461a      	mov	r2, r3
   13224:	683b      	ldr	r3, [r7, #0]
   13226:	f003 031f 	and.w	r3, r3, #31
   1322a:	4313      	orrs	r3, r2
   1322c:	60fb      	str	r3, [r7, #12]
	int res = 0;
   1322e:	2300      	movs	r3, #0
   13230:	61bb      	str	r3, [r7, #24]
	gpiote_pin_cleanup(abs_pin);
   13232:	68f8      	ldr	r0, [r7, #12]
   13234:	f7f5 f84e 	bl	82d4 <gpiote_pin_cleanup>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   13238:	2100      	movs	r1, #0
   1323a:	68f8      	ldr	r0, [r7, #12]
   1323c:	f7ff fe15 	bl	12e6a <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   13240:	697b      	ldr	r3, [r7, #20]
   13242:	68da      	ldr	r2, [r3, #12]
   13244:	683b      	ldr	r3, [r7, #0]
   13246:	fa22 f303 	lsr.w	r3, r2, r3
   1324a:	f003 0301 	and.w	r3, r3, #1
   1324e:	2b00      	cmp	r3, #0
   13250:	d034      	beq.n	132bc <gpiote_pin_int_cfg+0xba>
		if (data->trig_edge & BIT(pin)) {
   13252:	697b      	ldr	r3, [r7, #20]
   13254:	695a      	ldr	r2, [r3, #20]
   13256:	683b      	ldr	r3, [r7, #0]
   13258:	fa22 f303 	lsr.w	r3, r2, r3
   1325c:	f003 0301 	and.w	r3, r3, #1
   13260:	2b00      	cmp	r3, #0
   13262:	d020      	beq.n	132a6 <gpiote_pin_int_cfg+0xa4>
				if (data->double_edge & BIT(pin)) {
   13264:	697b      	ldr	r3, [r7, #20]
   13266:	699a      	ldr	r2, [r3, #24]
   13268:	683b      	ldr	r3, [r7, #0]
   1326a:	fa22 f303 	lsr.w	r3, r2, r3
   1326e:	f003 0301 	and.w	r3, r3, #1
   13272:	2b00      	cmp	r3, #0
   13274:	d002      	beq.n	1327c <gpiote_pin_int_cfg+0x7a>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   13276:	2303      	movs	r3, #3
   13278:	77fb      	strb	r3, [r7, #31]
   1327a:	e00d      	b.n	13298 <gpiote_pin_int_cfg+0x96>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1327c:	697b      	ldr	r3, [r7, #20]
   1327e:	691a      	ldr	r2, [r3, #16]
   13280:	683b      	ldr	r3, [r7, #0]
   13282:	fa22 f303 	lsr.w	r3, r2, r3
   13286:	f003 0301 	and.w	r3, r3, #1
   1328a:	2b00      	cmp	r3, #0
   1328c:	d002      	beq.n	13294 <gpiote_pin_int_cfg+0x92>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
   1328e:	2301      	movs	r3, #1
   13290:	77fb      	strb	r3, [r7, #31]
   13292:	e001      	b.n	13298 <gpiote_pin_int_cfg+0x96>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
   13294:	2302      	movs	r3, #2
   13296:	77fb      	strb	r3, [r7, #31]
				res = gpiote_channel_alloc(abs_pin, pol);
   13298:	7ffb      	ldrb	r3, [r7, #31]
   1329a:	4619      	mov	r1, r3
   1329c:	68f8      	ldr	r0, [r7, #12]
   1329e:	f7f4 ffdf 	bl	8260 <gpiote_channel_alloc>
   132a2:	61b8      	str	r0, [r7, #24]
   132a4:	e00a      	b.n	132bc <gpiote_pin_int_cfg+0xba>
			uint32_t sense = sense_for_pin(data, pin);
   132a6:	6839      	ldr	r1, [r7, #0]
   132a8:	6978      	ldr	r0, [r7, #20]
   132aa:	f7ff ff94 	bl	131d6 <sense_for_pin>
   132ae:	60b8      	str	r0, [r7, #8]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   132b0:	68bb      	ldr	r3, [r7, #8]
   132b2:	b2db      	uxtb	r3, r3
   132b4:	4619      	mov	r1, r3
   132b6:	68f8      	ldr	r0, [r7, #12]
   132b8:	f7ff fdd7 	bl	12e6a <nrf_gpio_cfg_sense_set>
	return res;
   132bc:	69bb      	ldr	r3, [r7, #24]
}
   132be:	4618      	mov	r0, r3
   132c0:	3720      	adds	r7, #32
   132c2:	46bd      	mov	sp, r7
   132c4:	bd80      	pop	{r7, pc}

000132c6 <gpio_nrfx_port_get_raw>:
{
   132c6:	b580      	push	{r7, lr}
   132c8:	b084      	sub	sp, #16
   132ca:	af00      	add	r7, sp, #0
   132cc:	6078      	str	r0, [r7, #4]
   132ce:	6039      	str	r1, [r7, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   132d0:	6878      	ldr	r0, [r7, #4]
   132d2:	f7ff ff75 	bl	131c0 <get_port_cfg>
   132d6:	4603      	mov	r3, r0
   132d8:	685b      	ldr	r3, [r3, #4]
   132da:	60fb      	str	r3, [r7, #12]
	*value = nrf_gpio_port_in_read(reg);
   132dc:	68f8      	ldr	r0, [r7, #12]
   132de:	f7ff fe11 	bl	12f04 <nrf_gpio_port_in_read>
   132e2:	4602      	mov	r2, r0
   132e4:	683b      	ldr	r3, [r7, #0]
   132e6:	601a      	str	r2, [r3, #0]
	return 0;
   132e8:	2300      	movs	r3, #0
}
   132ea:	4618      	mov	r0, r3
   132ec:	3710      	adds	r7, #16
   132ee:	46bd      	mov	sp, r7
   132f0:	bd80      	pop	{r7, pc}

000132f2 <gpio_nrfx_port_set_masked_raw>:
{
   132f2:	b580      	push	{r7, lr}
   132f4:	b086      	sub	sp, #24
   132f6:	af00      	add	r7, sp, #0
   132f8:	60f8      	str	r0, [r7, #12]
   132fa:	60b9      	str	r1, [r7, #8]
   132fc:	607a      	str	r2, [r7, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   132fe:	68f8      	ldr	r0, [r7, #12]
   13300:	f7ff ff5e 	bl	131c0 <get_port_cfg>
   13304:	4603      	mov	r3, r0
   13306:	685b      	ldr	r3, [r3, #4]
   13308:	617b      	str	r3, [r7, #20]
	value_tmp = nrf_gpio_port_out_read(reg) & ~mask;
   1330a:	6978      	ldr	r0, [r7, #20]
   1330c:	f7ff fe05 	bl	12f1a <nrf_gpio_port_out_read>
   13310:	4602      	mov	r2, r0
   13312:	68bb      	ldr	r3, [r7, #8]
   13314:	43db      	mvns	r3, r3
   13316:	4013      	ands	r3, r2
   13318:	613b      	str	r3, [r7, #16]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1331a:	68ba      	ldr	r2, [r7, #8]
   1331c:	687b      	ldr	r3, [r7, #4]
   1331e:	401a      	ands	r2, r3
   13320:	693b      	ldr	r3, [r7, #16]
   13322:	4313      	orrs	r3, r2
   13324:	4619      	mov	r1, r3
   13326:	6978      	ldr	r0, [r7, #20]
   13328:	f7ff fe02 	bl	12f30 <nrf_gpio_port_out_write>
	return 0;
   1332c:	2300      	movs	r3, #0
}
   1332e:	4618      	mov	r0, r3
   13330:	3718      	adds	r7, #24
   13332:	46bd      	mov	sp, r7
   13334:	bd80      	pop	{r7, pc}

00013336 <gpio_nrfx_port_set_bits_raw>:
{
   13336:	b580      	push	{r7, lr}
   13338:	b084      	sub	sp, #16
   1333a:	af00      	add	r7, sp, #0
   1333c:	6078      	str	r0, [r7, #4]
   1333e:	6039      	str	r1, [r7, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13340:	6878      	ldr	r0, [r7, #4]
   13342:	f7ff ff3d 	bl	131c0 <get_port_cfg>
   13346:	4603      	mov	r3, r0
   13348:	685b      	ldr	r3, [r3, #4]
   1334a:	60fb      	str	r3, [r7, #12]
	nrf_gpio_port_out_set(reg, mask);
   1334c:	6839      	ldr	r1, [r7, #0]
   1334e:	68f8      	ldr	r0, [r7, #12]
   13350:	f7ff fdfb 	bl	12f4a <nrf_gpio_port_out_set>
	return 0;
   13354:	2300      	movs	r3, #0
}
   13356:	4618      	mov	r0, r3
   13358:	3710      	adds	r7, #16
   1335a:	46bd      	mov	sp, r7
   1335c:	bd80      	pop	{r7, pc}

0001335e <gpio_nrfx_port_clear_bits_raw>:
{
   1335e:	b580      	push	{r7, lr}
   13360:	b084      	sub	sp, #16
   13362:	af00      	add	r7, sp, #0
   13364:	6078      	str	r0, [r7, #4]
   13366:	6039      	str	r1, [r7, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13368:	6878      	ldr	r0, [r7, #4]
   1336a:	f7ff ff29 	bl	131c0 <get_port_cfg>
   1336e:	4603      	mov	r3, r0
   13370:	685b      	ldr	r3, [r3, #4]
   13372:	60fb      	str	r3, [r7, #12]
	nrf_gpio_port_out_clear(reg, mask);
   13374:	6839      	ldr	r1, [r7, #0]
   13376:	68f8      	ldr	r0, [r7, #12]
   13378:	f7ff fdf4 	bl	12f64 <nrf_gpio_port_out_clear>
	return 0;
   1337c:	2300      	movs	r3, #0
}
   1337e:	4618      	mov	r0, r3
   13380:	3710      	adds	r7, #16
   13382:	46bd      	mov	sp, r7
   13384:	bd80      	pop	{r7, pc}

00013386 <gpio_nrfx_port_toggle_bits>:
{
   13386:	b580      	push	{r7, lr}
   13388:	b084      	sub	sp, #16
   1338a:	af00      	add	r7, sp, #0
   1338c:	6078      	str	r0, [r7, #4]
   1338e:	6039      	str	r1, [r7, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13390:	6878      	ldr	r0, [r7, #4]
   13392:	f7ff ff15 	bl	131c0 <get_port_cfg>
   13396:	4603      	mov	r3, r0
   13398:	685b      	ldr	r3, [r3, #4]
   1339a:	60fb      	str	r3, [r7, #12]
	value = nrf_gpio_port_out_read(reg);
   1339c:	68f8      	ldr	r0, [r7, #12]
   1339e:	f7ff fdbc 	bl	12f1a <nrf_gpio_port_out_read>
   133a2:	60b8      	str	r0, [r7, #8]
	nrf_gpio_port_out_write(reg, value ^ mask);
   133a4:	68ba      	ldr	r2, [r7, #8]
   133a6:	683b      	ldr	r3, [r7, #0]
   133a8:	4053      	eors	r3, r2
   133aa:	4619      	mov	r1, r3
   133ac:	68f8      	ldr	r0, [r7, #12]
   133ae:	f7ff fdbf 	bl	12f30 <nrf_gpio_port_out_write>
	return 0;
   133b2:	2300      	movs	r3, #0
}
   133b4:	4618      	mov	r0, r3
   133b6:	3710      	adds	r7, #16
   133b8:	46bd      	mov	sp, r7
   133ba:	bd80      	pop	{r7, pc}

000133bc <gpio_nrfx_pin_interrupt_configure>:
{
   133bc:	b580      	push	{r7, lr}
   133be:	b086      	sub	sp, #24
   133c0:	af00      	add	r7, sp, #0
   133c2:	60f8      	str	r0, [r7, #12]
   133c4:	607a      	str	r2, [r7, #4]
   133c6:	603b      	str	r3, [r7, #0]
   133c8:	460b      	mov	r3, r1
   133ca:	72fb      	strb	r3, [r7, #11]
	struct gpio_nrfx_data *data = get_port_data(port);
   133cc:	68f8      	ldr	r0, [r7, #12]
   133ce:	f7ff feec 	bl	131aa <get_port_data>
   133d2:	6178      	str	r0, [r7, #20]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   133d4:	68f8      	ldr	r0, [r7, #12]
   133d6:	f7ff fef3 	bl	131c0 <get_port_cfg>
   133da:	4603      	mov	r3, r0
   133dc:	7a1b      	ldrb	r3, [r3, #8]
   133de:	015a      	lsls	r2, r3, #5
   133e0:	7afb      	ldrb	r3, [r7, #11]
   133e2:	f003 031f 	and.w	r3, r3, #31
   133e6:	4313      	orrs	r3, r2
   133e8:	613b      	str	r3, [r7, #16]
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   133ea:	687b      	ldr	r3, [r7, #4]
   133ec:	f5b3 3fa0 	cmp.w	r3, #81920	; 0x14000
   133f0:	d108      	bne.n	13404 <gpio_nrfx_pin_interrupt_configure+0x48>
	    (nrf_gpio_pin_dir_get(abs_pin) == NRF_GPIO_PIN_DIR_OUTPUT)) {
   133f2:	6938      	ldr	r0, [r7, #16]
   133f4:	f7ff fd70 	bl	12ed8 <nrf_gpio_pin_dir_get>
   133f8:	4603      	mov	r3, r0
	    (mode == GPIO_INT_MODE_EDGE) &&
   133fa:	2b01      	cmp	r3, #1
   133fc:	d102      	bne.n	13404 <gpio_nrfx_pin_interrupt_configure+0x48>
		return -ENOTSUP;
   133fe:	f06f 0385 	mvn.w	r3, #133	; 0x85
   13402:	e05d      	b.n	134c0 <gpio_nrfx_pin_interrupt_configure+0x104>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   13404:	687b      	ldr	r3, [r7, #4]
   13406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   1340a:	d007      	beq.n	1341c <gpio_nrfx_pin_interrupt_configure+0x60>
   1340c:	697b      	ldr	r3, [r7, #20]
   1340e:	68da      	ldr	r2, [r3, #12]
   13410:	7afb      	ldrb	r3, [r7, #11]
   13412:	2101      	movs	r1, #1
   13414:	fa01 f303 	lsl.w	r3, r1, r3
   13418:	4313      	orrs	r3, r2
   1341a:	e007      	b.n	1342c <gpio_nrfx_pin_interrupt_configure+0x70>
   1341c:	697b      	ldr	r3, [r7, #20]
   1341e:	68da      	ldr	r2, [r3, #12]
   13420:	7afb      	ldrb	r3, [r7, #11]
   13422:	2101      	movs	r1, #1
   13424:	fa01 f303 	lsl.w	r3, r1, r3
   13428:	43db      	mvns	r3, r3
   1342a:	4013      	ands	r3, r2
   1342c:	697a      	ldr	r2, [r7, #20]
   1342e:	60d3      	str	r3, [r2, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   13430:	687b      	ldr	r3, [r7, #4]
   13432:	f5b3 3fa0 	cmp.w	r3, #81920	; 0x14000
   13436:	d107      	bne.n	13448 <gpio_nrfx_pin_interrupt_configure+0x8c>
   13438:	697b      	ldr	r3, [r7, #20]
   1343a:	695a      	ldr	r2, [r3, #20]
   1343c:	7afb      	ldrb	r3, [r7, #11]
   1343e:	2101      	movs	r1, #1
   13440:	fa01 f303 	lsl.w	r3, r1, r3
   13444:	4313      	orrs	r3, r2
   13446:	e007      	b.n	13458 <gpio_nrfx_pin_interrupt_configure+0x9c>
   13448:	697b      	ldr	r3, [r7, #20]
   1344a:	695a      	ldr	r2, [r3, #20]
   1344c:	7afb      	ldrb	r3, [r7, #11]
   1344e:	2101      	movs	r1, #1
   13450:	fa01 f303 	lsl.w	r3, r1, r3
   13454:	43db      	mvns	r3, r3
   13456:	4013      	ands	r3, r2
   13458:	697a      	ldr	r2, [r7, #20]
   1345a:	6153      	str	r3, [r2, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1345c:	683b      	ldr	r3, [r7, #0]
   1345e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   13462:	d107      	bne.n	13474 <gpio_nrfx_pin_interrupt_configure+0xb8>
   13464:	697b      	ldr	r3, [r7, #20]
   13466:	699a      	ldr	r2, [r3, #24]
   13468:	7afb      	ldrb	r3, [r7, #11]
   1346a:	2101      	movs	r1, #1
   1346c:	fa01 f303 	lsl.w	r3, r1, r3
   13470:	4313      	orrs	r3, r2
   13472:	e007      	b.n	13484 <gpio_nrfx_pin_interrupt_configure+0xc8>
   13474:	697b      	ldr	r3, [r7, #20]
   13476:	699a      	ldr	r2, [r3, #24]
   13478:	7afb      	ldrb	r3, [r7, #11]
   1347a:	2101      	movs	r1, #1
   1347c:	fa01 f303 	lsl.w	r3, r1, r3
   13480:	43db      	mvns	r3, r3
   13482:	4013      	ands	r3, r2
   13484:	697a      	ldr	r2, [r7, #20]
   13486:	6193      	str	r3, [r2, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   13488:	683b      	ldr	r3, [r7, #0]
   1348a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1348e:	d107      	bne.n	134a0 <gpio_nrfx_pin_interrupt_configure+0xe4>
   13490:	697b      	ldr	r3, [r7, #20]
   13492:	691a      	ldr	r2, [r3, #16]
   13494:	7afb      	ldrb	r3, [r7, #11]
   13496:	2101      	movs	r1, #1
   13498:	fa01 f303 	lsl.w	r3, r1, r3
   1349c:	4313      	orrs	r3, r2
   1349e:	e007      	b.n	134b0 <gpio_nrfx_pin_interrupt_configure+0xf4>
   134a0:	697b      	ldr	r3, [r7, #20]
   134a2:	691a      	ldr	r2, [r3, #16]
   134a4:	7afb      	ldrb	r3, [r7, #11]
   134a6:	2101      	movs	r1, #1
   134a8:	fa01 f303 	lsl.w	r3, r1, r3
   134ac:	43db      	mvns	r3, r3
   134ae:	4013      	ands	r3, r2
   134b0:	697a      	ldr	r2, [r7, #20]
   134b2:	6113      	str	r3, [r2, #16]
	return gpiote_pin_int_cfg(port, pin);
   134b4:	7afb      	ldrb	r3, [r7, #11]
   134b6:	4619      	mov	r1, r3
   134b8:	68f8      	ldr	r0, [r7, #12]
   134ba:	f7ff fea2 	bl	13202 <gpiote_pin_int_cfg>
   134be:	4603      	mov	r3, r0
}
   134c0:	4618      	mov	r0, r3
   134c2:	3718      	adds	r7, #24
   134c4:	46bd      	mov	sp, r7
   134c6:	bd80      	pop	{r7, pc}

000134c8 <gpio_nrfx_manage_callback>:
{
   134c8:	b580      	push	{r7, lr}
   134ca:	b084      	sub	sp, #16
   134cc:	af00      	add	r7, sp, #0
   134ce:	60f8      	str	r0, [r7, #12]
   134d0:	60b9      	str	r1, [r7, #8]
   134d2:	4613      	mov	r3, r2
   134d4:	71fb      	strb	r3, [r7, #7]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   134d6:	68f8      	ldr	r0, [r7, #12]
   134d8:	f7ff fe67 	bl	131aa <get_port_data>
   134dc:	4603      	mov	r3, r0
   134de:	3304      	adds	r3, #4
   134e0:	79fa      	ldrb	r2, [r7, #7]
   134e2:	68b9      	ldr	r1, [r7, #8]
   134e4:	4618      	mov	r0, r3
   134e6:	f7f4 fdef 	bl	80c8 <gpio_manage_callback>
   134ea:	4603      	mov	r3, r0
}
   134ec:	4618      	mov	r0, r3
   134ee:	3710      	adds	r7, #16
   134f0:	46bd      	mov	sp, r7
   134f2:	bd80      	pop	{r7, pc}

000134f4 <get_level_pins>:
{
   134f4:	b580      	push	{r7, lr}
   134f6:	b084      	sub	sp, #16
   134f8:	af00      	add	r7, sp, #0
   134fa:	6078      	str	r0, [r7, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   134fc:	6878      	ldr	r0, [r7, #4]
   134fe:	f7ff fe54 	bl	131aa <get_port_data>
   13502:	60f8      	str	r0, [r7, #12]
	uint32_t out = data->pin_int_en;
   13504:	68fb      	ldr	r3, [r7, #12]
   13506:	68db      	ldr	r3, [r3, #12]
   13508:	60bb      	str	r3, [r7, #8]
	out &= ~data->trig_edge & ~data->double_edge;
   1350a:	68fb      	ldr	r3, [r7, #12]
   1350c:	695a      	ldr	r2, [r3, #20]
   1350e:	68fb      	ldr	r3, [r7, #12]
   13510:	699b      	ldr	r3, [r3, #24]
   13512:	4313      	orrs	r3, r2
   13514:	43db      	mvns	r3, r3
   13516:	68ba      	ldr	r2, [r7, #8]
   13518:	4013      	ands	r3, r2
   1351a:	60bb      	str	r3, [r7, #8]
	return out;
   1351c:	68bb      	ldr	r3, [r7, #8]
}
   1351e:	4618      	mov	r0, r3
   13520:	3710      	adds	r7, #16
   13522:	46bd      	mov	sp, r7
   13524:	bd80      	pop	{r7, pc}

00013526 <cfg_level_pins>:
{
   13526:	b580      	push	{r7, lr}
   13528:	b08a      	sub	sp, #40	; 0x28
   1352a:	af00      	add	r7, sp, #0
   1352c:	6078      	str	r0, [r7, #4]
	const struct gpio_nrfx_data *data = get_port_data(port);
   1352e:	6878      	ldr	r0, [r7, #4]
   13530:	f7ff fe3b 	bl	131aa <get_port_data>
   13534:	61b8      	str	r0, [r7, #24]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   13536:	6878      	ldr	r0, [r7, #4]
   13538:	f7ff fe42 	bl	131c0 <get_port_cfg>
   1353c:	6178      	str	r0, [r7, #20]
	uint32_t pin = 0U;
   1353e:	2300      	movs	r3, #0
   13540:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t bit = 1U << pin;
   13542:	2201      	movs	r2, #1
   13544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13546:	fa02 f303 	lsl.w	r3, r2, r3
   1354a:	623b      	str	r3, [r7, #32]
	uint32_t level_pins = get_level_pins(port);
   1354c:	6878      	ldr	r0, [r7, #4]
   1354e:	f7ff ffd1 	bl	134f4 <get_level_pins>
   13552:	61f8      	str	r0, [r7, #28]
	while (level_pins) {
   13554:	e023      	b.n	1359e <cfg_level_pins+0x78>
		if (level_pins & bit) {
   13556:	69fa      	ldr	r2, [r7, #28]
   13558:	6a3b      	ldr	r3, [r7, #32]
   1355a:	4013      	ands	r3, r2
   1355c:	2b00      	cmp	r3, #0
   1355e:	d018      	beq.n	13592 <cfg_level_pins+0x6c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   13560:	697b      	ldr	r3, [r7, #20]
   13562:	7a1b      	ldrb	r3, [r3, #8]
   13564:	015b      	lsls	r3, r3, #5
   13566:	461a      	mov	r2, r3
   13568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1356a:	f003 031f 	and.w	r3, r3, #31
   1356e:	4313      	orrs	r3, r2
   13570:	613b      	str	r3, [r7, #16]
			uint32_t sense = sense_for_pin(data, pin);
   13572:	6a79      	ldr	r1, [r7, #36]	; 0x24
   13574:	69b8      	ldr	r0, [r7, #24]
   13576:	f7ff fe2e 	bl	131d6 <sense_for_pin>
   1357a:	60f8      	str	r0, [r7, #12]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1357c:	68fb      	ldr	r3, [r7, #12]
   1357e:	b2db      	uxtb	r3, r3
   13580:	4619      	mov	r1, r3
   13582:	6938      	ldr	r0, [r7, #16]
   13584:	f7ff fc71 	bl	12e6a <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   13588:	6a3b      	ldr	r3, [r7, #32]
   1358a:	43db      	mvns	r3, r3
   1358c:	69fa      	ldr	r2, [r7, #28]
   1358e:	4013      	ands	r3, r2
   13590:	61fb      	str	r3, [r7, #28]
		++pin;
   13592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13594:	3301      	adds	r3, #1
   13596:	627b      	str	r3, [r7, #36]	; 0x24
		bit <<= 1;
   13598:	6a3b      	ldr	r3, [r7, #32]
   1359a:	005b      	lsls	r3, r3, #1
   1359c:	623b      	str	r3, [r7, #32]
	while (level_pins) {
   1359e:	69fb      	ldr	r3, [r7, #28]
   135a0:	2b00      	cmp	r3, #0
   135a2:	d1d8      	bne.n	13556 <cfg_level_pins+0x30>
}
   135a4:	bf00      	nop
   135a6:	bf00      	nop
   135a8:	3728      	adds	r7, #40	; 0x28
   135aa:	46bd      	mov	sp, r7
   135ac:	bd80      	pop	{r7, pc}

000135ae <check_level_trigger_pins>:
{
   135ae:	b580      	push	{r7, lr}
   135b0:	b090      	sub	sp, #64	; 0x40
   135b2:	af00      	add	r7, sp, #0
   135b4:	6078      	str	r0, [r7, #4]
   135b6:	6039      	str	r1, [r7, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   135b8:	6878      	ldr	r0, [r7, #4]
   135ba:	f7ff fdf6 	bl	131aa <get_port_data>
   135be:	62b8      	str	r0, [r7, #40]	; 0x28
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   135c0:	6878      	ldr	r0, [r7, #4]
   135c2:	f7ff fdfd 	bl	131c0 <get_port_cfg>
   135c6:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t level_pins = get_level_pins(port);
   135c8:	6878      	ldr	r0, [r7, #4]
   135ca:	f7ff ff93 	bl	134f4 <get_level_pins>
   135ce:	6238      	str	r0, [r7, #32]
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   135d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   135d2:	685b      	ldr	r3, [r3, #4]
   135d4:	4618      	mov	r0, r3
   135d6:	f7ff fc95 	bl	12f04 <nrf_gpio_port_in_read>
   135da:	61f8      	str	r0, [r7, #28]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   135dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   135de:	691a      	ldr	r2, [r3, #16]
   135e0:	69fb      	ldr	r3, [r7, #28]
   135e2:	4053      	eors	r3, r2
   135e4:	43db      	mvns	r3, r3
   135e6:	61bb      	str	r3, [r7, #24]
	uint32_t out = pin_states & level_pins;
   135e8:	69ba      	ldr	r2, [r7, #24]
   135ea:	6a3b      	ldr	r3, [r7, #32]
   135ec:	4013      	ands	r3, r2
   135ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t pin = 0U;
   135f0:	2300      	movs	r3, #0
   135f2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t bit = 1U << pin;
   135f4:	2201      	movs	r2, #1
   135f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   135f8:	fa02 f303 	lsl.w	r3, r2, r3
   135fc:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t port_latch = 0;
   135fe:	2300      	movs	r3, #0
   13600:	617b      	str	r3, [r7, #20]
	uint32_t check_pins = level_pins;
   13602:	6a3b      	ldr	r3, [r7, #32]
   13604:	633b      	str	r3, [r7, #48]	; 0x30
	while (check_pins) {
   13606:	e064      	b.n	136d2 <check_level_trigger_pins+0x124>
		if (check_pins & bit) {
   13608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1360a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1360c:	4013      	ands	r3, r2
   1360e:	2b00      	cmp	r3, #0
   13610:	d059      	beq.n	136c6 <check_level_trigger_pins+0x118>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   13612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13614:	7a1b      	ldrb	r3, [r3, #8]
   13616:	015b      	lsls	r3, r3, #5
   13618:	461a      	mov	r2, r3
   1361a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1361c:	f003 031f 	and.w	r3, r3, #31
   13620:	4313      	orrs	r3, r2
   13622:	613b      	str	r3, [r7, #16]
			if (!(level_pins & bit)) {
   13624:	6a3a      	ldr	r2, [r7, #32]
   13626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13628:	4013      	ands	r3, r2
   1362a:	2b00      	cmp	r3, #0
   1362c:	d142      	bne.n	136b4 <check_level_trigger_pins+0x106>
				uint32_t sense = nrf_gpio_pin_sense_get(abs_pin);
   1362e:	6938      	ldr	r0, [r7, #16]
   13630:	f7ff fc3c 	bl	12eac <nrf_gpio_pin_sense_get>
   13634:	4603      	mov	r3, r0
   13636:	60fb      	str	r3, [r7, #12]
				bool high = (sense == GPIO_PIN_CNF_SENSE_High);
   13638:	68fb      	ldr	r3, [r7, #12]
   1363a:	2b02      	cmp	r3, #2
   1363c:	bf0c      	ite	eq
   1363e:	2301      	moveq	r3, #1
   13640:	2300      	movne	r3, #0
   13642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (port_latch & bit) {
   13646:	697a      	ldr	r2, [r7, #20]
   13648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1364a:	4013      	ands	r3, r2
   1364c:	2b00      	cmp	r3, #0
   1364e:	d027      	beq.n	136a0 <check_level_trigger_pins+0xf2>
					if ((data->double_edge & bit) ||
   13650:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13652:	699a      	ldr	r2, [r3, #24]
   13654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13656:	4013      	ands	r3, r2
   13658:	2b00      	cmp	r3, #0
   1365a:	d10b      	bne.n	13674 <check_level_trigger_pins+0xc6>
					    ((!!data->int_active_level) == high)) {
   1365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1365e:	691b      	ldr	r3, [r3, #16]
   13660:	2b00      	cmp	r3, #0
   13662:	bf14      	ite	ne
   13664:	2301      	movne	r3, #1
   13666:	2300      	moveq	r3, #0
   13668:	b2db      	uxtb	r3, r3
   1366a:	461a      	mov	r2, r3
   1366c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
					if ((data->double_edge & bit) ||
   13670:	429a      	cmp	r2, r3
   13672:	d103      	bne.n	1367c <check_level_trigger_pins+0xce>
						out |= bit;
   13674:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   13676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13678:	4313      	orrs	r3, r2
   1367a:	63fb      	str	r3, [r7, #60]	; 0x3c
					high = !high;
   1367c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   13680:	2b00      	cmp	r3, #0
   13682:	bf14      	ite	ne
   13684:	2301      	movne	r3, #1
   13686:	2300      	moveq	r3, #0
   13688:	b2db      	uxtb	r3, r3
   1368a:	f083 0301 	eor.w	r3, r3, #1
   1368e:	b2db      	uxtb	r3, r3
   13690:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   13694:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   13698:	f003 0301 	and.w	r3, r3, #1
   1369c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (high) {
   136a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   136a4:	2b00      	cmp	r3, #0
   136a6:	d005      	beq.n	136b4 <check_level_trigger_pins+0x106>
					*sense_levels |= bit;
   136a8:	683b      	ldr	r3, [r7, #0]
   136aa:	681a      	ldr	r2, [r3, #0]
   136ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   136ae:	431a      	orrs	r2, r3
   136b0:	683b      	ldr	r3, [r7, #0]
   136b2:	601a      	str	r2, [r3, #0]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   136b4:	2100      	movs	r1, #0
   136b6:	6938      	ldr	r0, [r7, #16]
   136b8:	f7ff fbd7 	bl	12e6a <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   136bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   136be:	43db      	mvns	r3, r3
   136c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   136c2:	4013      	ands	r3, r2
   136c4:	633b      	str	r3, [r7, #48]	; 0x30
		++pin;
   136c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   136c8:	3301      	adds	r3, #1
   136ca:	63bb      	str	r3, [r7, #56]	; 0x38
		bit <<= 1;
   136cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   136ce:	005b      	lsls	r3, r3, #1
   136d0:	637b      	str	r3, [r7, #52]	; 0x34
	while (check_pins) {
   136d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   136d4:	2b00      	cmp	r3, #0
   136d6:	d197      	bne.n	13608 <check_level_trigger_pins+0x5a>
	return out;
   136d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   136da:	4618      	mov	r0, r3
   136dc:	3740      	adds	r7, #64	; 0x40
   136de:	46bd      	mov	sp, r7
   136e0:	bd80      	pop	{r7, pc}

000136e2 <fire_callbacks>:
{
   136e2:	b580      	push	{r7, lr}
   136e4:	b084      	sub	sp, #16
   136e6:	af00      	add	r7, sp, #0
   136e8:	6078      	str	r0, [r7, #4]
   136ea:	6039      	str	r1, [r7, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   136ec:	6878      	ldr	r0, [r7, #4]
   136ee:	f7ff fd5c 	bl	131aa <get_port_data>
   136f2:	60f8      	str	r0, [r7, #12]
	sys_slist_t *list = &data->callbacks;
   136f4:	68fb      	ldr	r3, [r7, #12]
   136f6:	3304      	adds	r3, #4
   136f8:	60bb      	str	r3, [r7, #8]
	gpio_fire_callbacks(list, port, pins);
   136fa:	683a      	ldr	r2, [r7, #0]
   136fc:	6879      	ldr	r1, [r7, #4]
   136fe:	68b8      	ldr	r0, [r7, #8]
   13700:	f7f4 fd40 	bl	8184 <gpio_fire_callbacks>
}
   13704:	bf00      	nop
   13706:	3710      	adds	r7, #16
   13708:	46bd      	mov	sp, r7
   1370a:	bd80      	pop	{r7, pc}

0001370c <k_is_user_context>:
{
   1370c:	b480      	push	{r7}
   1370e:	af00      	add	r7, sp, #0
	return false;
   13710:	2300      	movs	r3, #0
}
   13712:	4618      	mov	r0, r3
   13714:	46bd      	mov	sp, r7
   13716:	bc80      	pop	{r7}
   13718:	4770      	bx	lr

0001371a <nrfx_is_in_ram>:


#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
   1371a:	b480      	push	{r7}
   1371c:	b083      	sub	sp, #12
   1371e:	af00      	add	r7, sp, #0
   13720:	6078      	str	r0, [r7, #4]
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   13722:	687b      	ldr	r3, [r7, #4]
   13724:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   13728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1372c:	bf0c      	ite	eq
   1372e:	2301      	moveq	r3, #1
   13730:	2300      	movne	r3, #0
   13732:	b2db      	uxtb	r3, r3
}
   13734:	4618      	mov	r0, r3
   13736:	370c      	adds	r7, #12
   13738:	46bd      	mov	sp, r7
   1373a:	bc80      	pop	{r7}
   1373c:	4770      	bx	lr

0001373e <nrf_event_readback>:
{
   1373e:	b480      	push	{r7}
   13740:	b083      	sub	sp, #12
   13742:	af00      	add	r7, sp, #0
   13744:	6078      	str	r0, [r7, #4]
    (void)*((volatile uint32_t *)(p_event_reg));
   13746:	687b      	ldr	r3, [r7, #4]
   13748:	681b      	ldr	r3, [r3, #0]
}
   1374a:	bf00      	nop
   1374c:	370c      	adds	r7, #12
   1374e:	46bd      	mov	sp, r7
   13750:	bc80      	pop	{r7}
   13752:	4770      	bx	lr

00013754 <k_ms_to_ticks_ceil64>:
{
   13754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   13758:	b08c      	sub	sp, #48	; 0x30
   1375a:	af00      	add	r7, sp, #0
   1375c:	e9c7 0100 	strd	r0, r1, [r7]
   13760:	e9d7 2300 	ldrd	r2, r3, [r7]
   13764:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   13768:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1376c:	627b      	str	r3, [r7, #36]	; 0x24
   1376e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13772:	623b      	str	r3, [r7, #32]
   13774:	2301      	movs	r3, #1
   13776:	77fb      	strb	r3, [r7, #31]
   13778:	2300      	movs	r3, #0
   1377a:	77bb      	strb	r3, [r7, #30]
   1377c:	2301      	movs	r3, #1
   1377e:	777b      	strb	r3, [r7, #29]
   13780:	2300      	movs	r3, #0
   13782:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   13784:	7ffb      	ldrb	r3, [r7, #31]
   13786:	2b00      	cmp	r3, #0
   13788:	d00f      	beq.n	137aa <k_ms_to_ticks_ceil64+0x56>
	bool mul_ratio = const_hz &&
   1378a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1378c:	6a3b      	ldr	r3, [r7, #32]
   1378e:	429a      	cmp	r2, r3
   13790:	d20b      	bcs.n	137aa <k_ms_to_ticks_ceil64+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   13792:	6a3b      	ldr	r3, [r7, #32]
   13794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13796:	fbb3 f2f2 	udiv	r2, r3, r2
   1379a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1379c:	fb01 f202 	mul.w	r2, r1, r2
   137a0:	1a9b      	subs	r3, r3, r2
   137a2:	2b00      	cmp	r3, #0
   137a4:	d101      	bne.n	137aa <k_ms_to_ticks_ceil64+0x56>
   137a6:	2301      	movs	r3, #1
   137a8:	e000      	b.n	137ac <k_ms_to_ticks_ceil64+0x58>
   137aa:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   137ac:	76fb      	strb	r3, [r7, #27]
   137ae:	7efb      	ldrb	r3, [r7, #27]
   137b0:	f003 0301 	and.w	r3, r3, #1
   137b4:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   137b6:	7ffb      	ldrb	r3, [r7, #31]
   137b8:	2b00      	cmp	r3, #0
   137ba:	d00f      	beq.n	137dc <k_ms_to_ticks_ceil64+0x88>
	bool div_ratio = const_hz &&
   137bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   137be:	6a3b      	ldr	r3, [r7, #32]
   137c0:	429a      	cmp	r2, r3
   137c2:	d90b      	bls.n	137dc <k_ms_to_ticks_ceil64+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   137c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   137c6:	6a3a      	ldr	r2, [r7, #32]
   137c8:	fbb3 f2f2 	udiv	r2, r3, r2
   137cc:	6a39      	ldr	r1, [r7, #32]
   137ce:	fb01 f202 	mul.w	r2, r1, r2
   137d2:	1a9b      	subs	r3, r3, r2
   137d4:	2b00      	cmp	r3, #0
   137d6:	d101      	bne.n	137dc <k_ms_to_ticks_ceil64+0x88>
   137d8:	2301      	movs	r3, #1
   137da:	e000      	b.n	137de <k_ms_to_ticks_ceil64+0x8a>
   137dc:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   137de:	76bb      	strb	r3, [r7, #26]
   137e0:	7ebb      	ldrb	r3, [r7, #26]
   137e2:	f003 0301 	and.w	r3, r3, #1
   137e6:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   137e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   137ea:	6a3b      	ldr	r3, [r7, #32]
   137ec:	429a      	cmp	r2, r3
   137ee:	d10a      	bne.n	13806 <k_ms_to_ticks_ceil64+0xb2>
		return result32 ? ((uint32_t)t) : t;
   137f0:	7fbb      	ldrb	r3, [r7, #30]
   137f2:	2b00      	cmp	r3, #0
   137f4:	d004      	beq.n	13800 <k_ms_to_ticks_ceil64+0xac>
   137f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   137f8:	461a      	mov	r2, r3
   137fa:	f04f 0300 	mov.w	r3, #0
   137fe:	e0c7      	b.n	13990 <k_ms_to_ticks_ceil64+0x23c>
   13800:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   13804:	e0c4      	b.n	13990 <k_ms_to_ticks_ceil64+0x23c>
	uint64_t off = 0;
   13806:	f04f 0200 	mov.w	r2, #0
   1380a:	f04f 0300 	mov.w	r3, #0
   1380e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   13812:	7efb      	ldrb	r3, [r7, #27]
   13814:	f083 0301 	eor.w	r3, r3, #1
   13818:	b2db      	uxtb	r3, r3
   1381a:	2b00      	cmp	r3, #0
   1381c:	d01d      	beq.n	1385a <k_ms_to_ticks_ceil64+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   1381e:	7ebb      	ldrb	r3, [r7, #26]
   13820:	2b00      	cmp	r3, #0
   13822:	d004      	beq.n	1382e <k_ms_to_ticks_ceil64+0xda>
   13824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13826:	6a3b      	ldr	r3, [r7, #32]
   13828:	fbb2 f3f3 	udiv	r3, r2, r3
   1382c:	e000      	b.n	13830 <k_ms_to_ticks_ceil64+0xdc>
   1382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13830:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   13832:	7f7b      	ldrb	r3, [r7, #29]
   13834:	2b00      	cmp	r3, #0
   13836:	d006      	beq.n	13846 <k_ms_to_ticks_ceil64+0xf2>
			off = rdivisor - 1U;
   13838:	68fb      	ldr	r3, [r7, #12]
   1383a:	3b01      	subs	r3, #1
   1383c:	461a      	mov	r2, r3
   1383e:	f04f 0300 	mov.w	r3, #0
   13842:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   13846:	7f3b      	ldrb	r3, [r7, #28]
   13848:	2b00      	cmp	r3, #0
   1384a:	d006      	beq.n	1385a <k_ms_to_ticks_ceil64+0x106>
			off = rdivisor / 2U;
   1384c:	68fb      	ldr	r3, [r7, #12]
   1384e:	085b      	lsrs	r3, r3, #1
   13850:	461a      	mov	r2, r3
   13852:	f04f 0300 	mov.w	r3, #0
   13856:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   1385a:	7ebb      	ldrb	r3, [r7, #26]
   1385c:	2b00      	cmp	r3, #0
   1385e:	d02a      	beq.n	138b6 <k_ms_to_ticks_ceil64+0x162>
		t += off;
   13860:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   13864:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   13868:	1884      	adds	r4, r0, r2
   1386a:	eb41 0503 	adc.w	r5, r1, r3
   1386e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   13872:	7fbb      	ldrb	r3, [r7, #30]
   13874:	2b00      	cmp	r3, #0
   13876:	d010      	beq.n	1389a <k_ms_to_ticks_ceil64+0x146>
   13878:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   1387c:	2b01      	cmp	r3, #1
   1387e:	bf08      	it	eq
   13880:	2a00      	cmpeq	r2, #0
   13882:	d20a      	bcs.n	1389a <k_ms_to_ticks_ceil64+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
   13884:	6aba      	ldr	r2, [r7, #40]	; 0x28
   13886:	6a79      	ldr	r1, [r7, #36]	; 0x24
   13888:	6a3b      	ldr	r3, [r7, #32]
   1388a:	fbb1 f3f3 	udiv	r3, r1, r3
   1388e:	fbb2 f3f3 	udiv	r3, r2, r3
   13892:	461a      	mov	r2, r3
   13894:	f04f 0300 	mov.w	r3, #0
   13898:	e07a      	b.n	13990 <k_ms_to_ticks_ceil64+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
   1389a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1389c:	6a3b      	ldr	r3, [r7, #32]
   1389e:	fbb2 f3f3 	udiv	r3, r2, r3
   138a2:	461a      	mov	r2, r3
   138a4:	f04f 0300 	mov.w	r3, #0
   138a8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   138ac:	f7ec fc4a 	bl	144 <__aeabi_uldivmod>
   138b0:	4602      	mov	r2, r0
   138b2:	460b      	mov	r3, r1
   138b4:	e06c      	b.n	13990 <k_ms_to_ticks_ceil64+0x23c>
	} else if (mul_ratio) {
   138b6:	7efb      	ldrb	r3, [r7, #27]
   138b8:	2b00      	cmp	r3, #0
   138ba:	d021      	beq.n	13900 <k_ms_to_ticks_ceil64+0x1ac>
		if (result32) {
   138bc:	7fbb      	ldrb	r3, [r7, #30]
   138be:	2b00      	cmp	r3, #0
   138c0:	d00a      	beq.n	138d8 <k_ms_to_ticks_ceil64+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
   138c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   138c4:	6a39      	ldr	r1, [r7, #32]
   138c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   138c8:	fbb1 f2f2 	udiv	r2, r1, r2
   138cc:	fb02 f303 	mul.w	r3, r2, r3
   138d0:	461a      	mov	r2, r3
   138d2:	f04f 0300 	mov.w	r3, #0
   138d6:	e05b      	b.n	13990 <k_ms_to_ticks_ceil64+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
   138d8:	6a3a      	ldr	r2, [r7, #32]
   138da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   138dc:	fbb2 f3f3 	udiv	r3, r2, r3
   138e0:	461a      	mov	r2, r3
   138e2:	f04f 0300 	mov.w	r3, #0
   138e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   138e8:	fb03 f001 	mul.w	r0, r3, r1
   138ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   138ee:	fb02 f101 	mul.w	r1, r2, r1
   138f2:	4401      	add	r1, r0
   138f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   138f6:	fba0 2302 	umull	r2, r3, r0, r2
   138fa:	4419      	add	r1, r3
   138fc:	460b      	mov	r3, r1
   138fe:	e047      	b.n	13990 <k_ms_to_ticks_ceil64+0x23c>
		if (result32) {
   13900:	7fbb      	ldrb	r3, [r7, #30]
   13902:	2b00      	cmp	r3, #0
   13904:	d024      	beq.n	13950 <k_ms_to_ticks_ceil64+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   13906:	6a3b      	ldr	r3, [r7, #32]
   13908:	461a      	mov	r2, r3
   1390a:	f04f 0300 	mov.w	r3, #0
   1390e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   13910:	fb03 f001 	mul.w	r0, r3, r1
   13914:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   13916:	fb02 f101 	mul.w	r1, r2, r1
   1391a:	4401      	add	r1, r0
   1391c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1391e:	fba0 2302 	umull	r2, r3, r0, r2
   13922:	4419      	add	r1, r3
   13924:	460b      	mov	r3, r1
   13926:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1392a:	eb12 0a00 	adds.w	sl, r2, r0
   1392e:	eb43 0b01 	adc.w	fp, r3, r1
   13932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13934:	461a      	mov	r2, r3
   13936:	f04f 0300 	mov.w	r3, #0
   1393a:	4650      	mov	r0, sl
   1393c:	4659      	mov	r1, fp
   1393e:	f7ec fc01 	bl	144 <__aeabi_uldivmod>
   13942:	4602      	mov	r2, r0
   13944:	460b      	mov	r3, r1
   13946:	4613      	mov	r3, r2
   13948:	461a      	mov	r2, r3
   1394a:	f04f 0300 	mov.w	r3, #0
   1394e:	e01f      	b.n	13990 <k_ms_to_ticks_ceil64+0x23c>
			return (t * to_hz + off) / from_hz;
   13950:	6a3b      	ldr	r3, [r7, #32]
   13952:	461a      	mov	r2, r3
   13954:	f04f 0300 	mov.w	r3, #0
   13958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1395a:	fb03 f001 	mul.w	r0, r3, r1
   1395e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   13960:	fb02 f101 	mul.w	r1, r2, r1
   13964:	4401      	add	r1, r0
   13966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13968:	fba0 2302 	umull	r2, r3, r0, r2
   1396c:	4419      	add	r1, r3
   1396e:	460b      	mov	r3, r1
   13970:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   13974:	eb12 0800 	adds.w	r8, r2, r0
   13978:	eb43 0901 	adc.w	r9, r3, r1
   1397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1397e:	461a      	mov	r2, r3
   13980:	f04f 0300 	mov.w	r3, #0
   13984:	4640      	mov	r0, r8
   13986:	4649      	mov	r1, r9
   13988:	f7ec fbdc 	bl	144 <__aeabi_uldivmod>
   1398c:	4602      	mov	r2, r0
   1398e:	460b      	mov	r3, r1
}
   13990:	4610      	mov	r0, r2
   13992:	4619      	mov	r1, r3
   13994:	3730      	adds	r7, #48	; 0x30
   13996:	46bd      	mov	sp, r7
   13998:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0001399c <k_msleep>:
{
   1399c:	b580      	push	{r7, lr}
   1399e:	b082      	sub	sp, #8
   139a0:	af00      	add	r7, sp, #0
   139a2:	6078      	str	r0, [r7, #4]
	return k_sleep(Z_TIMEOUT_MS(ms));
   139a4:	687b      	ldr	r3, [r7, #4]
   139a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   139aa:	461a      	mov	r2, r3
   139ac:	ea4f 73e2 	mov.w	r3, r2, asr #31
   139b0:	4610      	mov	r0, r2
   139b2:	4619      	mov	r1, r3
   139b4:	f7ff fece 	bl	13754 <k_ms_to_ticks_ceil64>
   139b8:	4602      	mov	r2, r0
   139ba:	460b      	mov	r3, r1
   139bc:	4610      	mov	r0, r2
   139be:	4619      	mov	r1, r3
   139c0:	f000 f81e 	bl	13a00 <k_sleep>
   139c4:	4601      	mov	r1, r0
   139c6:	460b      	mov	r3, r1
}
   139c8:	4618      	mov	r0, r3
   139ca:	3708      	adds	r7, #8
   139cc:	46bd      	mov	sp, r7
   139ce:	bd80      	pop	{r7, pc}

000139d0 <z_impl_k_timer_user_data_set>:
{
   139d0:	b480      	push	{r7}
   139d2:	b083      	sub	sp, #12
   139d4:	af00      	add	r7, sp, #0
   139d6:	6078      	str	r0, [r7, #4]
   139d8:	6039      	str	r1, [r7, #0]
	timer->user_data = user_data;
   139da:	687b      	ldr	r3, [r7, #4]
   139dc:	683a      	ldr	r2, [r7, #0]
   139de:	635a      	str	r2, [r3, #52]	; 0x34
}
   139e0:	bf00      	nop
   139e2:	370c      	adds	r7, #12
   139e4:	46bd      	mov	sp, r7
   139e6:	bc80      	pop	{r7}
   139e8:	4770      	bx	lr

000139ea <z_impl_k_timer_user_data_get>:
{
   139ea:	b480      	push	{r7}
   139ec:	b083      	sub	sp, #12
   139ee:	af00      	add	r7, sp, #0
   139f0:	6078      	str	r0, [r7, #4]
	return timer->user_data;
   139f2:	687b      	ldr	r3, [r7, #4]
   139f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
   139f6:	4618      	mov	r0, r3
   139f8:	370c      	adds	r7, #12
   139fa:	46bd      	mov	sp, r7
   139fc:	bc80      	pop	{r7}
   139fe:	4770      	bx	lr

00013a00 <k_sleep>:
{
   13a00:	b580      	push	{r7, lr}
   13a02:	b082      	sub	sp, #8
   13a04:	af00      	add	r7, sp, #0
   13a06:	e9c7 0100 	strd	r0, r1, [r7]
	return z_impl_k_sleep(timeout);
   13a0a:	e9d7 0100 	ldrd	r0, r1, [r7]
   13a0e:	f7fa fd7d 	bl	e50c <z_impl_k_sleep>
   13a12:	4603      	mov	r3, r0
}
   13a14:	4618      	mov	r0, r3
   13a16:	3708      	adds	r7, #8
   13a18:	46bd      	mov	sp, r7
   13a1a:	bd80      	pop	{r7, pc}

00013a1c <k_timer_start>:
{
   13a1c:	b580      	push	{r7, lr}
   13a1e:	b086      	sub	sp, #24
   13a20:	af02      	add	r7, sp, #8
   13a22:	60f8      	str	r0, [r7, #12]
   13a24:	e9c7 2300 	strd	r2, r3, [r7]
	z_impl_k_timer_start(timer, duration, period);
   13a28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   13a2c:	e9cd 2300 	strd	r2, r3, [sp]
   13a30:	e9d7 2300 	ldrd	r2, r3, [r7]
   13a34:	68f8      	ldr	r0, [r7, #12]
   13a36:	f7fb fc65 	bl	f304 <z_impl_k_timer_start>
}
   13a3a:	bf00      	nop
   13a3c:	3710      	adds	r7, #16
   13a3e:	46bd      	mov	sp, r7
   13a40:	bd80      	pop	{r7, pc}

00013a42 <k_timer_stop>:
{
   13a42:	b580      	push	{r7, lr}
   13a44:	b082      	sub	sp, #8
   13a46:	af00      	add	r7, sp, #0
   13a48:	6078      	str	r0, [r7, #4]
	z_impl_k_timer_stop(timer);
   13a4a:	6878      	ldr	r0, [r7, #4]
   13a4c:	f003 f98c 	bl	16d68 <z_impl_k_timer_stop>
}
   13a50:	bf00      	nop
   13a52:	3708      	adds	r7, #8
   13a54:	46bd      	mov	sp, r7
   13a56:	bd80      	pop	{r7, pc}

00013a58 <k_timer_user_data_set>:
{
   13a58:	b580      	push	{r7, lr}
   13a5a:	b082      	sub	sp, #8
   13a5c:	af00      	add	r7, sp, #0
   13a5e:	6078      	str	r0, [r7, #4]
   13a60:	6039      	str	r1, [r7, #0]
	z_impl_k_timer_user_data_set(timer, user_data);
   13a62:	6839      	ldr	r1, [r7, #0]
   13a64:	6878      	ldr	r0, [r7, #4]
   13a66:	f7ff ffb3 	bl	139d0 <z_impl_k_timer_user_data_set>
}
   13a6a:	bf00      	nop
   13a6c:	3708      	adds	r7, #8
   13a6e:	46bd      	mov	sp, r7
   13a70:	bd80      	pop	{r7, pc}

00013a72 <k_timer_user_data_get>:
{
   13a72:	b580      	push	{r7, lr}
   13a74:	b082      	sub	sp, #8
   13a76:	af00      	add	r7, sp, #0
   13a78:	6078      	str	r0, [r7, #4]
	return z_impl_k_timer_user_data_get(timer);
   13a7a:	6878      	ldr	r0, [r7, #4]
   13a7c:	f7ff ffb5 	bl	139ea <z_impl_k_timer_user_data_get>
   13a80:	4603      	mov	r3, r0
}
   13a82:	4618      	mov	r0, r3
   13a84:	3708      	adds	r7, #8
   13a86:	46bd      	mov	sp, r7
   13a88:	bd80      	pop	{r7, pc}

00013a8a <nrf_gpio_cfg>:
{
   13a8a:	b580      	push	{r7, lr}
   13a8c:	b084      	sub	sp, #16
   13a8e:	af00      	add	r7, sp, #0
   13a90:	6078      	str	r0, [r7, #4]
   13a92:	4608      	mov	r0, r1
   13a94:	4611      	mov	r1, r2
   13a96:	461a      	mov	r2, r3
   13a98:	4603      	mov	r3, r0
   13a9a:	70fb      	strb	r3, [r7, #3]
   13a9c:	460b      	mov	r3, r1
   13a9e:	70bb      	strb	r3, [r7, #2]
   13aa0:	4613      	mov	r3, r2
   13aa2:	707b      	strb	r3, [r7, #1]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13aa4:	1d3b      	adds	r3, r7, #4
   13aa6:	4618      	mov	r0, r3
   13aa8:	f7f4 fdb0 	bl	860c <nrf_gpio_pin_port_decode>
   13aac:	60f8      	str	r0, [r7, #12]
    uint32_t cnf = 0;
   13aae:	2300      	movs	r3, #0
   13ab0:	60bb      	str	r3, [r7, #8]
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   13ab2:	78fa      	ldrb	r2, [r7, #3]
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   13ab4:	78bb      	ldrb	r3, [r7, #2]
   13ab6:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   13ab8:	431a      	orrs	r2, r3
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   13aba:	787b      	ldrb	r3, [r7, #1]
   13abc:	009b      	lsls	r3, r3, #2
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   13abe:	431a      	orrs	r2, r3
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   13ac0:	7e3b      	ldrb	r3, [r7, #24]
   13ac2:	021b      	lsls	r3, r3, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   13ac4:	431a      	orrs	r2, r3
           ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);
   13ac6:	7f3b      	ldrb	r3, [r7, #28]
   13ac8:	041b      	lsls	r3, r3, #16
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   13aca:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   13acc:	68ba      	ldr	r2, [r7, #8]
   13ace:	4313      	orrs	r3, r2
   13ad0:	60bb      	str	r3, [r7, #8]
    reg->PIN_CNF[pin_number] = cnf;
   13ad2:	687a      	ldr	r2, [r7, #4]
   13ad4:	68fb      	ldr	r3, [r7, #12]
   13ad6:	3280      	adds	r2, #128	; 0x80
   13ad8:	68b9      	ldr	r1, [r7, #8]
   13ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   13ade:	bf00      	nop
   13ae0:	3710      	adds	r7, #16
   13ae2:	46bd      	mov	sp, r7
   13ae4:	bd80      	pop	{r7, pc}

00013ae6 <nrf_gpio_cfg_output>:
{
   13ae6:	b580      	push	{r7, lr}
   13ae8:	b084      	sub	sp, #16
   13aea:	af02      	add	r7, sp, #8
   13aec:	6078      	str	r0, [r7, #4]
    nrf_gpio_cfg(
   13aee:	2300      	movs	r3, #0
   13af0:	9301      	str	r3, [sp, #4]
   13af2:	2300      	movs	r3, #0
   13af4:	9300      	str	r3, [sp, #0]
   13af6:	2300      	movs	r3, #0
   13af8:	2201      	movs	r2, #1
   13afa:	2101      	movs	r1, #1
   13afc:	6878      	ldr	r0, [r7, #4]
   13afe:	f7ff ffc4 	bl	13a8a <nrf_gpio_cfg>
}
   13b02:	bf00      	nop
   13b04:	3708      	adds	r7, #8
   13b06:	46bd      	mov	sp, r7
   13b08:	bd80      	pop	{r7, pc}

00013b0a <nrf_gpio_cfg_input>:
{
   13b0a:	b580      	push	{r7, lr}
   13b0c:	b084      	sub	sp, #16
   13b0e:	af02      	add	r7, sp, #8
   13b10:	6078      	str	r0, [r7, #4]
   13b12:	460b      	mov	r3, r1
   13b14:	70fb      	strb	r3, [r7, #3]
    nrf_gpio_cfg(
   13b16:	78fb      	ldrb	r3, [r7, #3]
   13b18:	2200      	movs	r2, #0
   13b1a:	9201      	str	r2, [sp, #4]
   13b1c:	2200      	movs	r2, #0
   13b1e:	9200      	str	r2, [sp, #0]
   13b20:	2200      	movs	r2, #0
   13b22:	2100      	movs	r1, #0
   13b24:	6878      	ldr	r0, [r7, #4]
   13b26:	f7ff ffb0 	bl	13a8a <nrf_gpio_cfg>
}
   13b2a:	bf00      	nop
   13b2c:	3708      	adds	r7, #8
   13b2e:	46bd      	mov	sp, r7
   13b30:	bd80      	pop	{r7, pc}

00013b32 <nrf_gpio_pin_set>:
{
   13b32:	b580      	push	{r7, lr}
   13b34:	b084      	sub	sp, #16
   13b36:	af00      	add	r7, sp, #0
   13b38:	6078      	str	r0, [r7, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13b3a:	1d3b      	adds	r3, r7, #4
   13b3c:	4618      	mov	r0, r3
   13b3e:	f7f4 fd65 	bl	860c <nrf_gpio_pin_port_decode>
   13b42:	60f8      	str	r0, [r7, #12]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   13b44:	687b      	ldr	r3, [r7, #4]
   13b46:	2201      	movs	r2, #1
   13b48:	fa02 f303 	lsl.w	r3, r2, r3
   13b4c:	4619      	mov	r1, r3
   13b4e:	68f8      	ldr	r0, [r7, #12]
   13b50:	f000 f82c 	bl	13bac <nrf_gpio_port_out_set>
}
   13b54:	bf00      	nop
   13b56:	3710      	adds	r7, #16
   13b58:	46bd      	mov	sp, r7
   13b5a:	bd80      	pop	{r7, pc}

00013b5c <nrf_gpio_pin_clear>:
{
   13b5c:	b580      	push	{r7, lr}
   13b5e:	b084      	sub	sp, #16
   13b60:	af00      	add	r7, sp, #0
   13b62:	6078      	str	r0, [r7, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   13b64:	1d3b      	adds	r3, r7, #4
   13b66:	4618      	mov	r0, r3
   13b68:	f7f4 fd50 	bl	860c <nrf_gpio_pin_port_decode>
   13b6c:	60f8      	str	r0, [r7, #12]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   13b6e:	687b      	ldr	r3, [r7, #4]
   13b70:	2201      	movs	r2, #1
   13b72:	fa02 f303 	lsl.w	r3, r2, r3
   13b76:	4619      	mov	r1, r3
   13b78:	68f8      	ldr	r0, [r7, #12]
   13b7a:	f000 f824 	bl	13bc6 <nrf_gpio_port_out_clear>
}
   13b7e:	bf00      	nop
   13b80:	3710      	adds	r7, #16
   13b82:	46bd      	mov	sp, r7
   13b84:	bd80      	pop	{r7, pc}

00013b86 <nrf_gpio_pin_write>:
{
   13b86:	b580      	push	{r7, lr}
   13b88:	b082      	sub	sp, #8
   13b8a:	af00      	add	r7, sp, #0
   13b8c:	6078      	str	r0, [r7, #4]
   13b8e:	6039      	str	r1, [r7, #0]
    if (value == 0)
   13b90:	683b      	ldr	r3, [r7, #0]
   13b92:	2b00      	cmp	r3, #0
   13b94:	d103      	bne.n	13b9e <nrf_gpio_pin_write+0x18>
        nrf_gpio_pin_clear(pin_number);
   13b96:	6878      	ldr	r0, [r7, #4]
   13b98:	f7ff ffe0 	bl	13b5c <nrf_gpio_pin_clear>
}
   13b9c:	e002      	b.n	13ba4 <nrf_gpio_pin_write+0x1e>
        nrf_gpio_pin_set(pin_number);
   13b9e:	6878      	ldr	r0, [r7, #4]
   13ba0:	f7ff ffc7 	bl	13b32 <nrf_gpio_pin_set>
}
   13ba4:	bf00      	nop
   13ba6:	3708      	adds	r7, #8
   13ba8:	46bd      	mov	sp, r7
   13baa:	bd80      	pop	{r7, pc}

00013bac <nrf_gpio_port_out_set>:
{
   13bac:	b480      	push	{r7}
   13bae:	b083      	sub	sp, #12
   13bb0:	af00      	add	r7, sp, #0
   13bb2:	6078      	str	r0, [r7, #4]
   13bb4:	6039      	str	r1, [r7, #0]
    p_reg->OUTSET = set_mask;
   13bb6:	687b      	ldr	r3, [r7, #4]
   13bb8:	683a      	ldr	r2, [r7, #0]
   13bba:	609a      	str	r2, [r3, #8]
}
   13bbc:	bf00      	nop
   13bbe:	370c      	adds	r7, #12
   13bc0:	46bd      	mov	sp, r7
   13bc2:	bc80      	pop	{r7}
   13bc4:	4770      	bx	lr

00013bc6 <nrf_gpio_port_out_clear>:
{
   13bc6:	b480      	push	{r7}
   13bc8:	b083      	sub	sp, #12
   13bca:	af00      	add	r7, sp, #0
   13bcc:	6078      	str	r0, [r7, #4]
   13bce:	6039      	str	r1, [r7, #0]
    p_reg->OUTCLR = clr_mask;
   13bd0:	687b      	ldr	r3, [r7, #4]
   13bd2:	683a      	ldr	r2, [r7, #0]
   13bd4:	60da      	str	r2, [r3, #12]
}
   13bd6:	bf00      	nop
   13bd8:	370c      	adds	r7, #12
   13bda:	46bd      	mov	sp, r7
   13bdc:	bc80      	pop	{r7}
   13bde:	4770      	bx	lr

00013be0 <nrf_gpio_pin_present_check>:
{
   13be0:	b480      	push	{r7}
   13be2:	b085      	sub	sp, #20
   13be4:	af00      	add	r7, sp, #0
   13be6:	6078      	str	r0, [r7, #4]
    uint32_t port = pin_number >> 5;
   13be8:	687b      	ldr	r3, [r7, #4]
   13bea:	095b      	lsrs	r3, r3, #5
   13bec:	60bb      	str	r3, [r7, #8]
    uint32_t mask = 0;
   13bee:	2300      	movs	r3, #0
   13bf0:	60fb      	str	r3, [r7, #12]
    switch (port)
   13bf2:	68bb      	ldr	r3, [r7, #8]
   13bf4:	2b00      	cmp	r3, #0
   13bf6:	d103      	bne.n	13c00 <nrf_gpio_pin_present_check+0x20>
            mask = P0_FEATURE_PINS_PRESENT;
   13bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13bfc:	60fb      	str	r3, [r7, #12]
            break;
   13bfe:	bf00      	nop
    pin_number &= 0x1F;
   13c00:	687b      	ldr	r3, [r7, #4]
   13c02:	f003 031f 	and.w	r3, r3, #31
   13c06:	607b      	str	r3, [r7, #4]
    return (mask & (1UL << pin_number)) ? true : false;
   13c08:	68fa      	ldr	r2, [r7, #12]
   13c0a:	687b      	ldr	r3, [r7, #4]
   13c0c:	fa22 f303 	lsr.w	r3, r2, r3
   13c10:	f003 0301 	and.w	r3, r3, #1
   13c14:	2b00      	cmp	r3, #0
   13c16:	bf14      	ite	ne
   13c18:	2301      	movne	r3, #1
   13c1a:	2300      	moveq	r3, #0
   13c1c:	b2db      	uxtb	r3, r3
}
   13c1e:	4618      	mov	r0, r3
   13c20:	3714      	adds	r7, #20
   13c22:	46bd      	mov	sp, r7
   13c24:	bc80      	pop	{r7}
   13c26:	4770      	bx	lr

00013c28 <nrf_gpio_pin_port_number_extract>:
{
   13c28:	b480      	push	{r7}
   13c2a:	b085      	sub	sp, #20
   13c2c:	af00      	add	r7, sp, #0
   13c2e:	6078      	str	r0, [r7, #4]
    uint32_t pin_number = *p_pin;
   13c30:	687b      	ldr	r3, [r7, #4]
   13c32:	681b      	ldr	r3, [r3, #0]
   13c34:	60fb      	str	r3, [r7, #12]
    *p_pin = pin_number & 0x1F;
   13c36:	68fb      	ldr	r3, [r7, #12]
   13c38:	f003 021f 	and.w	r2, r3, #31
   13c3c:	687b      	ldr	r3, [r7, #4]
   13c3e:	601a      	str	r2, [r3, #0]
    return pin_number >> 5;
   13c40:	68fb      	ldr	r3, [r7, #12]
   13c42:	095b      	lsrs	r3, r3, #5
}
   13c44:	4618      	mov	r0, r3
   13c46:	3714      	adds	r7, #20
   13c48:	46bd      	mov	sp, r7
   13c4a:	bc80      	pop	{r7}
   13c4c:	4770      	bx	lr

00013c4e <nrf_uarte_event_clear>:
 */
NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg);

#ifndef NRF_DECLARE_ONLY
NRF_STATIC_INLINE void nrf_uarte_event_clear(NRF_UARTE_Type * p_reg, nrf_uarte_event_t event)
{
   13c4e:	b580      	push	{r7, lr}
   13c50:	b082      	sub	sp, #8
   13c52:	af00      	add	r7, sp, #0
   13c54:	6078      	str	r0, [r7, #4]
   13c56:	460b      	mov	r3, r1
   13c58:	807b      	strh	r3, [r7, #2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13c5a:	887b      	ldrh	r3, [r7, #2]
   13c5c:	687a      	ldr	r2, [r7, #4]
   13c5e:	4413      	add	r3, r2
   13c60:	2200      	movs	r2, #0
   13c62:	601a      	str	r2, [r3, #0]
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
   13c64:	887b      	ldrh	r3, [r7, #2]
   13c66:	687a      	ldr	r2, [r7, #4]
   13c68:	4413      	add	r3, r2
   13c6a:	4618      	mov	r0, r3
   13c6c:	f7ff fd67 	bl	1373e <nrf_event_readback>
}
   13c70:	bf00      	nop
   13c72:	3708      	adds	r7, #8
   13c74:	46bd      	mov	sp, r7
   13c76:	bd80      	pop	{r7, pc}

00013c78 <nrf_uarte_event_check>:

NRF_STATIC_INLINE bool nrf_uarte_event_check(NRF_UARTE_Type const * p_reg,
                                             nrf_uarte_event_t      event)
{
   13c78:	b480      	push	{r7}
   13c7a:	b083      	sub	sp, #12
   13c7c:	af00      	add	r7, sp, #0
   13c7e:	6078      	str	r0, [r7, #4]
   13c80:	460b      	mov	r3, r1
   13c82:	807b      	strh	r3, [r7, #2]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13c84:	887b      	ldrh	r3, [r7, #2]
   13c86:	687a      	ldr	r2, [r7, #4]
   13c88:	4413      	add	r3, r2
   13c8a:	681b      	ldr	r3, [r3, #0]
   13c8c:	2b00      	cmp	r3, #0
   13c8e:	bf14      	ite	ne
   13c90:	2301      	movne	r3, #1
   13c92:	2300      	moveq	r3, #0
   13c94:	b2db      	uxtb	r3, r3
}
   13c96:	4618      	mov	r0, r3
   13c98:	370c      	adds	r7, #12
   13c9a:	46bd      	mov	sp, r7
   13c9c:	bc80      	pop	{r7}
   13c9e:	4770      	bx	lr

00013ca0 <nrf_uarte_event_address_get>:

NRF_STATIC_INLINE uint32_t nrf_uarte_event_address_get(NRF_UARTE_Type const * p_reg,
                                                       nrf_uarte_event_t      event)
{
   13ca0:	b480      	push	{r7}
   13ca2:	b083      	sub	sp, #12
   13ca4:	af00      	add	r7, sp, #0
   13ca6:	6078      	str	r0, [r7, #4]
   13ca8:	460b      	mov	r3, r1
   13caa:	807b      	strh	r3, [r7, #2]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   13cac:	887b      	ldrh	r3, [r7, #2]
   13cae:	687a      	ldr	r2, [r7, #4]
   13cb0:	4413      	add	r3, r2
}
   13cb2:	4618      	mov	r0, r3
   13cb4:	370c      	adds	r7, #12
   13cb6:	46bd      	mov	sp, r7
   13cb8:	bc80      	pop	{r7}
   13cba:	4770      	bx	lr

00013cbc <nrf_uarte_shorts_enable>:

NRF_STATIC_INLINE void nrf_uarte_shorts_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
   13cbc:	b480      	push	{r7}
   13cbe:	b083      	sub	sp, #12
   13cc0:	af00      	add	r7, sp, #0
   13cc2:	6078      	str	r0, [r7, #4]
   13cc4:	6039      	str	r1, [r7, #0]
    p_reg->SHORTS |= mask;
   13cc6:	687b      	ldr	r3, [r7, #4]
   13cc8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   13ccc:	683b      	ldr	r3, [r7, #0]
   13cce:	431a      	orrs	r2, r3
   13cd0:	687b      	ldr	r3, [r7, #4]
   13cd2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
   13cd6:	bf00      	nop
   13cd8:	370c      	adds	r7, #12
   13cda:	46bd      	mov	sp, r7
   13cdc:	bc80      	pop	{r7}
   13cde:	4770      	bx	lr

00013ce0 <nrf_uarte_shorts_disable>:

NRF_STATIC_INLINE void nrf_uarte_shorts_disable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
   13ce0:	b480      	push	{r7}
   13ce2:	b083      	sub	sp, #12
   13ce4:	af00      	add	r7, sp, #0
   13ce6:	6078      	str	r0, [r7, #4]
   13ce8:	6039      	str	r1, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   13cea:	687b      	ldr	r3, [r7, #4]
   13cec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   13cf0:	683b      	ldr	r3, [r7, #0]
   13cf2:	43db      	mvns	r3, r3
   13cf4:	401a      	ands	r2, r3
   13cf6:	687b      	ldr	r3, [r7, #4]
   13cf8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
   13cfc:	bf00      	nop
   13cfe:	370c      	adds	r7, #12
   13d00:	46bd      	mov	sp, r7
   13d02:	bc80      	pop	{r7}
   13d04:	4770      	bx	lr

00013d06 <nrf_uarte_int_enable>:

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
   13d06:	b480      	push	{r7}
   13d08:	b083      	sub	sp, #12
   13d0a:	af00      	add	r7, sp, #0
   13d0c:	6078      	str	r0, [r7, #4]
   13d0e:	6039      	str	r1, [r7, #0]
    p_reg->INTENSET = mask;
   13d10:	687b      	ldr	r3, [r7, #4]
   13d12:	683a      	ldr	r2, [r7, #0]
   13d14:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   13d18:	bf00      	nop
   13d1a:	370c      	adds	r7, #12
   13d1c:	46bd      	mov	sp, r7
   13d1e:	bc80      	pop	{r7}
   13d20:	4770      	bx	lr

00013d22 <nrf_uarte_int_enable_check>:

NRF_STATIC_INLINE uint32_t nrf_uarte_int_enable_check(NRF_UARTE_Type const * p_reg, uint32_t mask)
{
   13d22:	b480      	push	{r7}
   13d24:	b083      	sub	sp, #12
   13d26:	af00      	add	r7, sp, #0
   13d28:	6078      	str	r0, [r7, #4]
   13d2a:	6039      	str	r1, [r7, #0]
    return p_reg->INTENSET & mask;
   13d2c:	687b      	ldr	r3, [r7, #4]
   13d2e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   13d32:	683b      	ldr	r3, [r7, #0]
   13d34:	4013      	ands	r3, r2
}
   13d36:	4618      	mov	r0, r3
   13d38:	370c      	adds	r7, #12
   13d3a:	46bd      	mov	sp, r7
   13d3c:	bc80      	pop	{r7}
   13d3e:	4770      	bx	lr

00013d40 <nrf_uarte_int_disable>:

NRF_STATIC_INLINE void nrf_uarte_int_disable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
   13d40:	b480      	push	{r7}
   13d42:	b083      	sub	sp, #12
   13d44:	af00      	add	r7, sp, #0
   13d46:	6078      	str	r0, [r7, #4]
   13d48:	6039      	str	r1, [r7, #0]
    p_reg->INTENCLR = mask;
   13d4a:	687b      	ldr	r3, [r7, #4]
   13d4c:	683a      	ldr	r2, [r7, #0]
   13d4e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   13d52:	bf00      	nop
   13d54:	370c      	adds	r7, #12
   13d56:	46bd      	mov	sp, r7
   13d58:	bc80      	pop	{r7}
   13d5a:	4770      	bx	lr

00013d5c <nrf_uarte_publish_set>:
}

NRF_STATIC_INLINE void nrf_uarte_publish_set(NRF_UARTE_Type *  p_reg,
                                             nrf_uarte_event_t event,
                                             uint8_t           channel)
{
   13d5c:	b480      	push	{r7}
   13d5e:	b083      	sub	sp, #12
   13d60:	af00      	add	r7, sp, #0
   13d62:	6078      	str	r0, [r7, #4]
   13d64:	460b      	mov	r3, r1
   13d66:	807b      	strh	r3, [r7, #2]
   13d68:	4613      	mov	r3, r2
   13d6a:	707b      	strb	r3, [r7, #1]
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
            ((uint32_t)channel | UARTE_PUBLISH_CTS_EN_Msk);
   13d6c:	787a      	ldrb	r2, [r7, #1]
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
   13d6e:	887b      	ldrh	r3, [r7, #2]
   13d70:	3380      	adds	r3, #128	; 0x80
   13d72:	6879      	ldr	r1, [r7, #4]
   13d74:	440b      	add	r3, r1
            ((uint32_t)channel | UARTE_PUBLISH_CTS_EN_Msk);
   13d76:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
   13d7a:	601a      	str	r2, [r3, #0]
}
   13d7c:	bf00      	nop
   13d7e:	370c      	adds	r7, #12
   13d80:	46bd      	mov	sp, r7
   13d82:	bc80      	pop	{r7}
   13d84:	4770      	bx	lr

00013d86 <nrf_uarte_errorsrc_get_and_clear>:
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
}
#endif // defined(DPPI_PRESENT)

NRF_STATIC_INLINE uint32_t nrf_uarte_errorsrc_get_and_clear(NRF_UARTE_Type * p_reg)
{
   13d86:	b480      	push	{r7}
   13d88:	b085      	sub	sp, #20
   13d8a:	af00      	add	r7, sp, #0
   13d8c:	6078      	str	r0, [r7, #4]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   13d8e:	687b      	ldr	r3, [r7, #4]
   13d90:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
   13d94:	60fb      	str	r3, [r7, #12]
    p_reg->ERRORSRC = errsrc_mask;
   13d96:	687b      	ldr	r3, [r7, #4]
   13d98:	68fa      	ldr	r2, [r7, #12]
   13d9a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
    return errsrc_mask;
   13d9e:	68fb      	ldr	r3, [r7, #12]
}
   13da0:	4618      	mov	r0, r3
   13da2:	3714      	adds	r7, #20
   13da4:	46bd      	mov	sp, r7
   13da6:	bc80      	pop	{r7}
   13da8:	4770      	bx	lr

00013daa <nrf_uarte_enable>:

NRF_STATIC_INLINE void nrf_uarte_enable(NRF_UARTE_Type * p_reg)
{
   13daa:	b480      	push	{r7}
   13dac:	b083      	sub	sp, #12
   13dae:	af00      	add	r7, sp, #0
   13db0:	6078      	str	r0, [r7, #4]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   13db2:	687b      	ldr	r3, [r7, #4]
   13db4:	2208      	movs	r2, #8
   13db6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   13dba:	bf00      	nop
   13dbc:	370c      	adds	r7, #12
   13dbe:	46bd      	mov	sp, r7
   13dc0:	bc80      	pop	{r7}
   13dc2:	4770      	bx	lr

00013dc4 <nrf_uarte_disable>:

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
   13dc4:	b480      	push	{r7}
   13dc6:	b083      	sub	sp, #12
   13dc8:	af00      	add	r7, sp, #0
   13dca:	6078      	str	r0, [r7, #4]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   13dcc:	687b      	ldr	r3, [r7, #4]
   13dce:	2200      	movs	r2, #0
   13dd0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   13dd4:	bf00      	nop
   13dd6:	370c      	adds	r7, #12
   13dd8:	46bd      	mov	sp, r7
   13dda:	bc80      	pop	{r7}
   13ddc:	4770      	bx	lr

00013dde <nrf_uarte_txrx_pins_set>:

NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pseltxd,
                                               uint32_t         pselrxd)
{
   13dde:	b480      	push	{r7}
   13de0:	b085      	sub	sp, #20
   13de2:	af00      	add	r7, sp, #0
   13de4:	60f8      	str	r0, [r7, #12]
   13de6:	60b9      	str	r1, [r7, #8]
   13de8:	607a      	str	r2, [r7, #4]
    p_reg->PSEL.TXD = pseltxd;
   13dea:	68fb      	ldr	r3, [r7, #12]
   13dec:	68ba      	ldr	r2, [r7, #8]
   13dee:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   13df2:	68fb      	ldr	r3, [r7, #12]
   13df4:	687a      	ldr	r2, [r7, #4]
   13df6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
}
   13dfa:	bf00      	nop
   13dfc:	3714      	adds	r7, #20
   13dfe:	46bd      	mov	sp, r7
   13e00:	bc80      	pop	{r7}
   13e02:	4770      	bx	lr

00013e04 <nrf_uarte_rx_pin_get>:
{
    return p_reg->PSEL.TXD;
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_pin_get(NRF_UARTE_Type const * p_reg)
{
   13e04:	b480      	push	{r7}
   13e06:	b083      	sub	sp, #12
   13e08:	af00      	add	r7, sp, #0
   13e0a:	6078      	str	r0, [r7, #4]
    return p_reg->PSEL.RXD;
   13e0c:	687b      	ldr	r3, [r7, #4]
   13e0e:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
}
   13e12:	4618      	mov	r0, r3
   13e14:	370c      	adds	r7, #12
   13e16:	46bd      	mov	sp, r7
   13e18:	bc80      	pop	{r7}
   13e1a:	4770      	bx	lr

00013e1c <nrf_uarte_hwfc_pins_set>:
}

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
   13e1c:	b480      	push	{r7}
   13e1e:	b085      	sub	sp, #20
   13e20:	af00      	add	r7, sp, #0
   13e22:	60f8      	str	r0, [r7, #12]
   13e24:	60b9      	str	r1, [r7, #8]
   13e26:	607a      	str	r2, [r7, #4]
    p_reg->PSEL.RTS = pselrts;
   13e28:	68fb      	ldr	r3, [r7, #12]
   13e2a:	68ba      	ldr	r2, [r7, #8]
   13e2c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   13e30:	68fb      	ldr	r3, [r7, #12]
   13e32:	687a      	ldr	r2, [r7, #4]
   13e34:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   13e38:	bf00      	nop
   13e3a:	3714      	adds	r7, #20
   13e3c:	46bd      	mov	sp, r7
   13e3e:	bc80      	pop	{r7}
   13e40:	4770      	bx	lr

00013e42 <nrf_uarte_task_trigger>:
{
    nrf_uarte_hwfc_pins_set(p_reg, NRF_UARTE_PSEL_DISCONNECTED, NRF_UARTE_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE void nrf_uarte_task_trigger(NRF_UARTE_Type * p_reg, nrf_uarte_task_t task)
{
   13e42:	b480      	push	{r7}
   13e44:	b083      	sub	sp, #12
   13e46:	af00      	add	r7, sp, #0
   13e48:	6078      	str	r0, [r7, #4]
   13e4a:	460b      	mov	r3, r1
   13e4c:	70fb      	strb	r3, [r7, #3]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13e4e:	78fb      	ldrb	r3, [r7, #3]
   13e50:	687a      	ldr	r2, [r7, #4]
   13e52:	4413      	add	r3, r2
   13e54:	2201      	movs	r2, #1
   13e56:	601a      	str	r2, [r3, #0]
}
   13e58:	bf00      	nop
   13e5a:	370c      	adds	r7, #12
   13e5c:	46bd      	mov	sp, r7
   13e5e:	bc80      	pop	{r7}
   13e60:	4770      	bx	lr

00013e62 <nrf_uarte_task_address_get>:

NRF_STATIC_INLINE uint32_t nrf_uarte_task_address_get(NRF_UARTE_Type const * p_reg,
                                                      nrf_uarte_task_t       task)
{
   13e62:	b480      	push	{r7}
   13e64:	b083      	sub	sp, #12
   13e66:	af00      	add	r7, sp, #0
   13e68:	6078      	str	r0, [r7, #4]
   13e6a:	460b      	mov	r3, r1
   13e6c:	70fb      	strb	r3, [r7, #3]
    return (uint32_t)p_reg + (uint32_t)task;
   13e6e:	78fa      	ldrb	r2, [r7, #3]
   13e70:	687b      	ldr	r3, [r7, #4]
   13e72:	4413      	add	r3, r2
}
   13e74:	4618      	mov	r0, r3
   13e76:	370c      	adds	r7, #12
   13e78:	46bd      	mov	sp, r7
   13e7a:	bc80      	pop	{r7}
   13e7c:	4770      	bx	lr

00013e7e <nrf_uarte_configure>:

NRF_STATIC_INLINE void nrf_uarte_configure(NRF_UARTE_Type           * p_reg,
                                           nrf_uarte_config_t const * p_cfg)
{
   13e7e:	b480      	push	{r7}
   13e80:	b083      	sub	sp, #12
   13e82:	af00      	add	r7, sp, #0
   13e84:	6078      	str	r0, [r7, #4]
   13e86:	6039      	str	r1, [r7, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   13e88:	683b      	ldr	r3, [r7, #0]
   13e8a:	785a      	ldrb	r2, [r3, #1]
#if defined(UARTE_CONFIG_STOP_Msk)
                    | (uint32_t)p_cfg->stop
   13e8c:	683b      	ldr	r3, [r7, #0]
   13e8e:	789b      	ldrb	r3, [r3, #2]
#endif
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
                    | (uint32_t)p_cfg->paritytype
#endif
                    | (uint32_t)p_cfg->hwfc;
   13e90:	4313      	orrs	r3, r2
   13e92:	b2da      	uxtb	r2, r3
   13e94:	683b      	ldr	r3, [r7, #0]
   13e96:	781b      	ldrb	r3, [r3, #0]
   13e98:	4313      	orrs	r3, r2
   13e9a:	b2db      	uxtb	r3, r3
   13e9c:	461a      	mov	r2, r3
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   13e9e:	687b      	ldr	r3, [r7, #4]
   13ea0:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
}
   13ea4:	bf00      	nop
   13ea6:	370c      	adds	r7, #12
   13ea8:	46bd      	mov	sp, r7
   13eaa:	bc80      	pop	{r7}
   13eac:	4770      	bx	lr

00013eae <nrf_uarte_baudrate_set>:

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
   13eae:	b480      	push	{r7}
   13eb0:	b083      	sub	sp, #12
   13eb2:	af00      	add	r7, sp, #0
   13eb4:	6078      	str	r0, [r7, #4]
   13eb6:	6039      	str	r1, [r7, #0]
    p_reg->BAUDRATE = baudrate;
   13eb8:	687b      	ldr	r3, [r7, #4]
   13eba:	683a      	ldr	r2, [r7, #0]
   13ebc:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
}
   13ec0:	bf00      	nop
   13ec2:	370c      	adds	r7, #12
   13ec4:	46bd      	mov	sp, r7
   13ec6:	bc80      	pop	{r7}
   13ec8:	4770      	bx	lr

00013eca <nrf_uarte_tx_buffer_set>:

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
   13eca:	b480      	push	{r7}
   13ecc:	b085      	sub	sp, #20
   13ece:	af00      	add	r7, sp, #0
   13ed0:	60f8      	str	r0, [r7, #12]
   13ed2:	60b9      	str	r1, [r7, #8]
   13ed4:	607a      	str	r2, [r7, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   13ed6:	68ba      	ldr	r2, [r7, #8]
   13ed8:	68fb      	ldr	r3, [r7, #12]
   13eda:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   13ede:	68fb      	ldr	r3, [r7, #12]
   13ee0:	687a      	ldr	r2, [r7, #4]
   13ee2:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
}
   13ee6:	bf00      	nop
   13ee8:	3714      	adds	r7, #20
   13eea:	46bd      	mov	sp, r7
   13eec:	bc80      	pop	{r7}
   13eee:	4770      	bx	lr

00013ef0 <nrf_uarte_tx_amount_get>:

NRF_STATIC_INLINE uint32_t nrf_uarte_tx_amount_get(NRF_UARTE_Type const * p_reg)
{
   13ef0:	b480      	push	{r7}
   13ef2:	b083      	sub	sp, #12
   13ef4:	af00      	add	r7, sp, #0
   13ef6:	6078      	str	r0, [r7, #4]
    return p_reg->TXD.AMOUNT;
   13ef8:	687b      	ldr	r3, [r7, #4]
   13efa:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
}
   13efe:	4618      	mov	r0, r3
   13f00:	370c      	adds	r7, #12
   13f02:	46bd      	mov	sp, r7
   13f04:	bc80      	pop	{r7}
   13f06:	4770      	bx	lr

00013f08 <nrf_uarte_rx_buffer_set>:

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
   13f08:	b480      	push	{r7}
   13f0a:	b085      	sub	sp, #20
   13f0c:	af00      	add	r7, sp, #0
   13f0e:	60f8      	str	r0, [r7, #12]
   13f10:	60b9      	str	r1, [r7, #8]
   13f12:	607a      	str	r2, [r7, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   13f14:	68ba      	ldr	r2, [r7, #8]
   13f16:	68fb      	ldr	r3, [r7, #12]
   13f18:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   13f1c:	68fb      	ldr	r3, [r7, #12]
   13f1e:	687a      	ldr	r2, [r7, #4]
   13f20:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
}
   13f24:	bf00      	nop
   13f26:	3714      	adds	r7, #20
   13f28:	46bd      	mov	sp, r7
   13f2a:	bc80      	pop	{r7}
   13f2c:	4770      	bx	lr

00013f2e <nrf_uarte_rx_amount_get>:

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
   13f2e:	b480      	push	{r7}
   13f30:	b083      	sub	sp, #12
   13f32:	af00      	add	r7, sp, #0
   13f34:	6078      	str	r0, [r7, #4]
    return p_reg->RXD.AMOUNT;
   13f36:	687b      	ldr	r3, [r7, #4]
   13f38:	f8d3 353c 	ldr.w	r3, [r3, #1340]	; 0x53c
}
   13f3c:	4618      	mov	r0, r3
   13f3e:	370c      	adds	r7, #12
   13f40:	46bd      	mov	sp, r7
   13f42:	bc80      	pop	{r7}
   13f44:	4770      	bx	lr

00013f46 <nrf_timer_subscribe_set>:

#if defined(DPPI_PRESENT)
NRF_STATIC_INLINE void nrf_timer_subscribe_set(NRF_TIMER_Type * p_reg,
                                               nrf_timer_task_t task,
                                               uint8_t          channel)
{
   13f46:	b480      	push	{r7}
   13f48:	b083      	sub	sp, #12
   13f4a:	af00      	add	r7, sp, #0
   13f4c:	6078      	str	r0, [r7, #4]
   13f4e:	460b      	mov	r3, r1
   13f50:	70fb      	strb	r3, [r7, #3]
   13f52:	4613      	mov	r3, r2
   13f54:	70bb      	strb	r3, [r7, #2]
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
            ((uint32_t)channel | TIMER_SUBSCRIBE_START_EN_Msk);
   13f56:	78ba      	ldrb	r2, [r7, #2]
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
   13f58:	78fb      	ldrb	r3, [r7, #3]
   13f5a:	3380      	adds	r3, #128	; 0x80
   13f5c:	6879      	ldr	r1, [r7, #4]
   13f5e:	440b      	add	r3, r1
            ((uint32_t)channel | TIMER_SUBSCRIBE_START_EN_Msk);
   13f60:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
   13f64:	601a      	str	r2, [r3, #0]
}
   13f66:	bf00      	nop
   13f68:	370c      	adds	r7, #12
   13f6a:	46bd      	mov	sp, r7
   13f6c:	bc80      	pop	{r7}
   13f6e:	4770      	bx	lr

00013f70 <nrf_dppi_channels_enable>:
{
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
   13f70:	b480      	push	{r7}
   13f72:	b083      	sub	sp, #12
   13f74:	af00      	add	r7, sp, #0
   13f76:	6078      	str	r0, [r7, #4]
   13f78:	6039      	str	r1, [r7, #0]
    p_reg->CHENSET = mask;
   13f7a:	687b      	ldr	r3, [r7, #4]
   13f7c:	683a      	ldr	r2, [r7, #0]
   13f7e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   13f82:	bf00      	nop
   13f84:	370c      	adds	r7, #12
   13f86:	46bd      	mov	sp, r7
   13f88:	bc80      	pop	{r7}
   13f8a:	4770      	bx	lr

00013f8c <nrfx_gppi_channel_endpoints_setup>:

__STATIC_INLINE void nrfx_gppi_channel_endpoints_setup(uint8_t  channel,
                                                       uint32_t eep,
                                                       uint32_t tep)
{
   13f8c:	b580      	push	{r7, lr}
   13f8e:	b084      	sub	sp, #16
   13f90:	af00      	add	r7, sp, #0
   13f92:	4603      	mov	r3, r0
   13f94:	60b9      	str	r1, [r7, #8]
   13f96:	607a      	str	r2, [r7, #4]
   13f98:	73fb      	strb	r3, [r7, #15]
    nrfx_gppi_event_endpoint_setup(channel, eep);
   13f9a:	7bfb      	ldrb	r3, [r7, #15]
   13f9c:	68b9      	ldr	r1, [r7, #8]
   13f9e:	4618      	mov	r0, r3
   13fa0:	f7f4 fb8e 	bl	86c0 <nrfx_gppi_event_endpoint_setup>
    nrfx_gppi_task_endpoint_setup(channel, tep);
   13fa4:	7bfb      	ldrb	r3, [r7, #15]
   13fa6:	6879      	ldr	r1, [r7, #4]
   13fa8:	4618      	mov	r0, r3
   13faa:	f7f4 fbaf 	bl	870c <nrfx_gppi_task_endpoint_setup>
}
   13fae:	bf00      	nop
   13fb0:	3710      	adds	r7, #16
   13fb2:	46bd      	mov	sp, r7
   13fb4:	bd80      	pop	{r7, pc}

00013fb6 <get_dev_data>:
{
   13fb6:	b480      	push	{r7}
   13fb8:	b083      	sub	sp, #12
   13fba:	af00      	add	r7, sp, #0
   13fbc:	6078      	str	r0, [r7, #4]
	return dev->data;
   13fbe:	687b      	ldr	r3, [r7, #4]
   13fc0:	691b      	ldr	r3, [r3, #16]
}
   13fc2:	4618      	mov	r0, r3
   13fc4:	370c      	adds	r7, #12
   13fc6:	46bd      	mov	sp, r7
   13fc8:	bc80      	pop	{r7}
   13fca:	4770      	bx	lr

00013fcc <get_dev_config>:
{
   13fcc:	b480      	push	{r7}
   13fce:	b083      	sub	sp, #12
   13fd0:	af00      	add	r7, sp, #0
   13fd2:	6078      	str	r0, [r7, #4]
	return dev->config;
   13fd4:	687b      	ldr	r3, [r7, #4]
   13fd6:	685b      	ldr	r3, [r3, #4]
}
   13fd8:	4618      	mov	r0, r3
   13fda:	370c      	adds	r7, #12
   13fdc:	46bd      	mov	sp, r7
   13fde:	bc80      	pop	{r7}
   13fe0:	4770      	bx	lr

00013fe2 <get_uarte_instance>:
{
   13fe2:	b580      	push	{r7, lr}
   13fe4:	b084      	sub	sp, #16
   13fe6:	af00      	add	r7, sp, #0
   13fe8:	6078      	str	r0, [r7, #4]
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   13fea:	6878      	ldr	r0, [r7, #4]
   13fec:	f7ff ffee 	bl	13fcc <get_dev_config>
   13ff0:	60f8      	str	r0, [r7, #12]
	return config->uarte_regs;
   13ff2:	68fb      	ldr	r3, [r7, #12]
   13ff4:	681b      	ldr	r3, [r3, #0]
}
   13ff6:	4618      	mov	r0, r3
   13ff8:	3710      	adds	r7, #16
   13ffa:	46bd      	mov	sp, r7
   13ffc:	bd80      	pop	{r7, pc}

00013ffe <endtx_isr>:
{
   13ffe:	b580      	push	{r7, lr}
   14000:	b088      	sub	sp, #32
   14002:	af00      	add	r7, sp, #0
   14004:	6078      	str	r0, [r7, #4]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   14006:	6878      	ldr	r0, [r7, #4]
   14008:	f7ff ffeb 	bl	13fe2 <get_uarte_instance>
   1400c:	61f8      	str	r0, [r7, #28]
	__asm__ volatile(
   1400e:	f04f 0320 	mov.w	r3, #32
   14012:	f3ef 8211 	mrs	r2, BASEPRI
   14016:	f383 8811 	msr	BASEPRI, r3
   1401a:	f3bf 8f6f 	isb	sy
   1401e:	617a      	str	r2, [r7, #20]
   14020:	613b      	str	r3, [r7, #16]
	return key;
   14022:	697b      	ldr	r3, [r7, #20]
	int key = irq_lock();
   14024:	61bb      	str	r3, [r7, #24]
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   14026:	f44f 7190 	mov.w	r1, #288	; 0x120
   1402a:	69f8      	ldr	r0, [r7, #28]
   1402c:	f7ff fe24 	bl	13c78 <nrf_uarte_event_check>
   14030:	4603      	mov	r3, r0
   14032:	2b00      	cmp	r3, #0
   14034:	d008      	beq.n	14048 <endtx_isr+0x4a>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDTX);
   14036:	f44f 7190 	mov.w	r1, #288	; 0x120
   1403a:	69f8      	ldr	r0, [r7, #28]
   1403c:	f7ff fe07 	bl	13c4e <nrf_uarte_event_clear>
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
   14040:	210c      	movs	r1, #12
   14042:	69f8      	ldr	r0, [r7, #28]
   14044:	f7ff fefd 	bl	13e42 <nrf_uarte_task_trigger>
	irq_unlock(key);
   14048:	69bb      	ldr	r3, [r7, #24]
   1404a:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
   1404c:	68fb      	ldr	r3, [r7, #12]
   1404e:	f383 8811 	msr	BASEPRI, r3
   14052:	f3bf 8f6f 	isb	sy
}
   14056:	bf00      	nop
}
   14058:	bf00      	nop
   1405a:	3720      	adds	r7, #32
   1405c:	46bd      	mov	sp, r7
   1405e:	bd80      	pop	{r7, pc}

00014060 <uarte_nrfx_configure>:
{
   14060:	b590      	push	{r4, r7, lr}
   14062:	b085      	sub	sp, #20
   14064:	af00      	add	r7, sp, #0
   14066:	6078      	str	r0, [r7, #4]
   14068:	6039      	str	r1, [r7, #0]
	switch (cfg->stop_bits) {
   1406a:	683b      	ldr	r3, [r7, #0]
   1406c:	795b      	ldrb	r3, [r3, #5]
   1406e:	2b01      	cmp	r3, #1
   14070:	d002      	beq.n	14078 <uarte_nrfx_configure+0x18>
   14072:	2b03      	cmp	r3, #3
   14074:	d003      	beq.n	1407e <uarte_nrfx_configure+0x1e>
   14076:	e005      	b.n	14084 <uarte_nrfx_configure+0x24>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   14078:	2300      	movs	r3, #0
   1407a:	73bb      	strb	r3, [r7, #14]
		break;
   1407c:	e005      	b.n	1408a <uarte_nrfx_configure+0x2a>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1407e:	2310      	movs	r3, #16
   14080:	73bb      	strb	r3, [r7, #14]
		break;
   14082:	e002      	b.n	1408a <uarte_nrfx_configure+0x2a>
		return -ENOTSUP;
   14084:	f06f 0385 	mvn.w	r3, #133	; 0x85
   14088:	e05b      	b.n	14142 <uarte_nrfx_configure+0xe2>
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1408a:	683b      	ldr	r3, [r7, #0]
   1408c:	799b      	ldrb	r3, [r3, #6]
   1408e:	2b03      	cmp	r3, #3
   14090:	d002      	beq.n	14098 <uarte_nrfx_configure+0x38>
		return -ENOTSUP;
   14092:	f06f 0385 	mvn.w	r3, #133	; 0x85
   14096:	e054      	b.n	14142 <uarte_nrfx_configure+0xe2>
	switch (cfg->flow_ctrl) {
   14098:	683b      	ldr	r3, [r7, #0]
   1409a:	79db      	ldrb	r3, [r3, #7]
   1409c:	2b00      	cmp	r3, #0
   1409e:	d002      	beq.n	140a6 <uarte_nrfx_configure+0x46>
   140a0:	2b01      	cmp	r3, #1
   140a2:	d003      	beq.n	140ac <uarte_nrfx_configure+0x4c>
   140a4:	e019      	b.n	140da <uarte_nrfx_configure+0x7a>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   140a6:	2300      	movs	r3, #0
   140a8:	733b      	strb	r3, [r7, #12]
		break;
   140aa:	e019      	b.n	140e0 <uarte_nrfx_configure+0x80>
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   140ac:	6878      	ldr	r0, [r7, #4]
   140ae:	f7ff ff8d 	bl	13fcc <get_dev_config>
   140b2:	4603      	mov	r3, r0
   140b4:	685b      	ldr	r3, [r3, #4]
   140b6:	f003 0401 	and.w	r4, r3, #1
   140ba:	6878      	ldr	r0, [r7, #4]
   140bc:	f7ff ff86 	bl	13fcc <get_dev_config>
   140c0:	4603      	mov	r3, r0
   140c2:	685b      	ldr	r3, [r3, #4]
   140c4:	f003 0302 	and.w	r3, r3, #2
   140c8:	4323      	orrs	r3, r4
   140ca:	2b00      	cmp	r3, #0
   140cc:	d002      	beq.n	140d4 <uarte_nrfx_configure+0x74>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   140ce:	2301      	movs	r3, #1
   140d0:	733b      	strb	r3, [r7, #12]
		break;
   140d2:	e005      	b.n	140e0 <uarte_nrfx_configure+0x80>
			return -ENOTSUP;
   140d4:	f06f 0385 	mvn.w	r3, #133	; 0x85
   140d8:	e033      	b.n	14142 <uarte_nrfx_configure+0xe2>
		return -ENOTSUP;
   140da:	f06f 0385 	mvn.w	r3, #133	; 0x85
   140de:	e030      	b.n	14142 <uarte_nrfx_configure+0xe2>
	switch (cfg->parity) {
   140e0:	683b      	ldr	r3, [r7, #0]
   140e2:	791b      	ldrb	r3, [r3, #4]
   140e4:	2b00      	cmp	r3, #0
   140e6:	d002      	beq.n	140ee <uarte_nrfx_configure+0x8e>
   140e8:	2b02      	cmp	r3, #2
   140ea:	d003      	beq.n	140f4 <uarte_nrfx_configure+0x94>
   140ec:	e005      	b.n	140fa <uarte_nrfx_configure+0x9a>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   140ee:	2300      	movs	r3, #0
   140f0:	737b      	strb	r3, [r7, #13]
		break;
   140f2:	e005      	b.n	14100 <uarte_nrfx_configure+0xa0>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   140f4:	230e      	movs	r3, #14
   140f6:	737b      	strb	r3, [r7, #13]
		break;
   140f8:	e002      	b.n	14100 <uarte_nrfx_configure+0xa0>
		return -ENOTSUP;
   140fa:	f06f 0385 	mvn.w	r3, #133	; 0x85
   140fe:	e020      	b.n	14142 <uarte_nrfx_configure+0xe2>
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   14100:	683b      	ldr	r3, [r7, #0]
   14102:	681b      	ldr	r3, [r3, #0]
   14104:	4619      	mov	r1, r3
   14106:	6878      	ldr	r0, [r7, #4]
   14108:	f7f4 fb26 	bl	8758 <baudrate_set>
   1410c:	4603      	mov	r3, r0
   1410e:	2b00      	cmp	r3, #0
   14110:	d002      	beq.n	14118 <uarte_nrfx_configure+0xb8>
		return -ENOTSUP;
   14112:	f06f 0385 	mvn.w	r3, #133	; 0x85
   14116:	e014      	b.n	14142 <uarte_nrfx_configure+0xe2>
	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);
   14118:	6878      	ldr	r0, [r7, #4]
   1411a:	f7ff ff62 	bl	13fe2 <get_uarte_instance>
   1411e:	4602      	mov	r2, r0
   14120:	f107 030c 	add.w	r3, r7, #12
   14124:	4619      	mov	r1, r3
   14126:	4610      	mov	r0, r2
   14128:	f7ff fea9 	bl	13e7e <nrf_uarte_configure>
	get_dev_data(dev)->uart_config = *cfg;
   1412c:	6878      	ldr	r0, [r7, #4]
   1412e:	f7ff ff42 	bl	13fb6 <get_dev_data>
   14132:	4603      	mov	r3, r0
   14134:	683a      	ldr	r2, [r7, #0]
   14136:	3304      	adds	r3, #4
   14138:	e892 0003 	ldmia.w	r2, {r0, r1}
   1413c:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   14140:	2300      	movs	r3, #0
}
   14142:	4618      	mov	r0, r3
   14144:	3714      	adds	r7, #20
   14146:	46bd      	mov	sp, r7
   14148:	bd90      	pop	{r4, r7, pc}

0001414a <uarte_nrfx_config_get>:
{
   1414a:	b580      	push	{r7, lr}
   1414c:	b082      	sub	sp, #8
   1414e:	af00      	add	r7, sp, #0
   14150:	6078      	str	r0, [r7, #4]
   14152:	6039      	str	r1, [r7, #0]
	*cfg = get_dev_data(dev)->uart_config;
   14154:	6878      	ldr	r0, [r7, #4]
   14156:	f7ff ff2e 	bl	13fb6 <get_dev_data>
   1415a:	4603      	mov	r3, r0
   1415c:	683a      	ldr	r2, [r7, #0]
   1415e:	3304      	adds	r3, #4
   14160:	e893 0003 	ldmia.w	r3, {r0, r1}
   14164:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   14168:	2300      	movs	r3, #0
}
   1416a:	4618      	mov	r0, r3
   1416c:	3708      	adds	r7, #8
   1416e:	46bd      	mov	sp, r7
   14170:	bd80      	pop	{r7, pc}

00014172 <uarte_nrfx_err_check>:
{
   14172:	b580      	push	{r7, lr}
   14174:	b084      	sub	sp, #16
   14176:	af00      	add	r7, sp, #0
   14178:	6078      	str	r0, [r7, #4]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   1417a:	6878      	ldr	r0, [r7, #4]
   1417c:	f7ff ff31 	bl	13fe2 <get_uarte_instance>
   14180:	60f8      	str	r0, [r7, #12]
	return nrf_uarte_errorsrc_get_and_clear(uarte);
   14182:	68f8      	ldr	r0, [r7, #12]
   14184:	f7ff fdff 	bl	13d86 <nrf_uarte_errorsrc_get_and_clear>
   14188:	4603      	mov	r3, r0
}
   1418a:	4618      	mov	r0, r3
   1418c:	3710      	adds	r7, #16
   1418e:	46bd      	mov	sp, r7
   14190:	bd80      	pop	{r7, pc}

00014192 <is_tx_ready>:
{
   14192:	b580      	push	{r7, lr}
   14194:	b084      	sub	sp, #16
   14196:	af00      	add	r7, sp, #0
   14198:	6078      	str	r0, [r7, #4]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   1419a:	6878      	ldr	r0, [r7, #4]
   1419c:	f7ff ff21 	bl	13fe2 <get_uarte_instance>
   141a0:	60f8      	str	r0, [r7, #12]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   141a2:	6878      	ldr	r0, [r7, #4]
   141a4:	f7ff ff12 	bl	13fcc <get_dev_config>
   141a8:	4603      	mov	r3, r0
   141aa:	685b      	ldr	r3, [r3, #4]
   141ac:	f003 0308 	and.w	r3, r3, #8
   141b0:	2b00      	cmp	r3, #0
   141b2:	bf14      	ite	ne
   141b4:	2301      	movne	r3, #1
   141b6:	2300      	moveq	r3, #0
   141b8:	72fb      	strb	r3, [r7, #11]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   141ba:	f44f 71ac 	mov.w	r1, #344	; 0x158
   141be:	68f8      	ldr	r0, [r7, #12]
   141c0:	f7ff fd5a 	bl	13c78 <nrf_uarte_event_check>
   141c4:	4603      	mov	r3, r0
   141c6:	2b00      	cmp	r3, #0
   141c8:	d10d      	bne.n	141e6 <is_tx_ready+0x54>
		(!ppi_endtx ?
   141ca:	7afb      	ldrb	r3, [r7, #11]
   141cc:	f083 0301 	eor.w	r3, r3, #1
   141d0:	b2db      	uxtb	r3, r3
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   141d2:	2b00      	cmp	r3, #0
   141d4:	d009      	beq.n	141ea <is_tx_ready+0x58>
		       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) : 0);
   141d6:	f44f 7190 	mov.w	r1, #288	; 0x120
   141da:	68f8      	ldr	r0, [r7, #12]
   141dc:	f7ff fd4c 	bl	13c78 <nrf_uarte_event_check>
   141e0:	4603      	mov	r3, r0
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   141e2:	2b00      	cmp	r3, #0
   141e4:	d001      	beq.n	141ea <is_tx_ready+0x58>
   141e6:	2301      	movs	r3, #1
   141e8:	e000      	b.n	141ec <is_tx_ready+0x5a>
   141ea:	2300      	movs	r3, #0
   141ec:	f003 0301 	and.w	r3, r3, #1
   141f0:	b2db      	uxtb	r3, r3
}
   141f2:	4618      	mov	r0, r3
   141f4:	3710      	adds	r7, #16
   141f6:	46bd      	mov	sp, r7
   141f8:	bd80      	pop	{r7, pc}

000141fa <wait_tx_ready>:
{
   141fa:	b580      	push	{r7, lr}
   141fc:	b088      	sub	sp, #32
   141fe:	af00      	add	r7, sp, #0
   14200:	6078      	str	r0, [r7, #4]
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   14202:	2300      	movs	r3, #0
   14204:	77fb      	strb	r3, [r7, #31]
   14206:	2364      	movs	r3, #100	; 0x64
   14208:	61bb      	str	r3, [r7, #24]
   1420a:	6878      	ldr	r0, [r7, #4]
   1420c:	f7ff ffc1 	bl	14192 <is_tx_ready>
   14210:	4603      	mov	r3, r0
   14212:	2b00      	cmp	r3, #0
   14214:	d002      	beq.n	1421c <wait_tx_ready+0x22>
   14216:	2301      	movs	r3, #1
   14218:	77fb      	strb	r3, [r7, #31]
   1421a:	e008      	b.n	1422e <wait_tx_ready+0x34>
   1421c:	2001      	movs	r0, #1
   1421e:	f001 f862 	bl	152e6 <nrfx_busy_wait>
   14222:	69bb      	ldr	r3, [r7, #24]
   14224:	3b01      	subs	r3, #1
   14226:	61bb      	str	r3, [r7, #24]
   14228:	69bb      	ldr	r3, [r7, #24]
   1422a:	2b00      	cmp	r3, #0
   1422c:	d1ed      	bne.n	1420a <wait_tx_ready+0x10>
		if (res) {
   1422e:	7ffb      	ldrb	r3, [r7, #31]
   14230:	2b00      	cmp	r3, #0
   14232:	d019      	beq.n	14268 <wait_tx_ready+0x6e>
	__asm__ volatile(
   14234:	f04f 0320 	mov.w	r3, #32
   14238:	f3ef 8211 	mrs	r2, BASEPRI
   1423c:	f383 8811 	msr	BASEPRI, r3
   14240:	f3bf 8f6f 	isb	sy
   14244:	613a      	str	r2, [r7, #16]
   14246:	60fb      	str	r3, [r7, #12]
	return key;
   14248:	693b      	ldr	r3, [r7, #16]
			key = irq_lock();
   1424a:	617b      	str	r3, [r7, #20]
			if (is_tx_ready(dev)) {
   1424c:	6878      	ldr	r0, [r7, #4]
   1424e:	f7ff ffa0 	bl	14192 <is_tx_ready>
   14252:	4603      	mov	r3, r0
   14254:	2b00      	cmp	r3, #0
   14256:	d10b      	bne.n	14270 <wait_tx_ready+0x76>
			irq_unlock(key);
   14258:	697b      	ldr	r3, [r7, #20]
   1425a:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
   1425c:	68bb      	ldr	r3, [r7, #8]
   1425e:	f383 8811 	msr	BASEPRI, r3
   14262:	f3bf 8f6f 	isb	sy
}
   14266:	bf00      	nop
			k_msleep(1);
   14268:	2001      	movs	r0, #1
   1426a:	f7ff fb97 	bl	1399c <k_msleep>
	do {
   1426e:	e7c8      	b.n	14202 <wait_tx_ready+0x8>
				break;
   14270:	bf00      	nop
	return key;
   14272:	697b      	ldr	r3, [r7, #20]
}
   14274:	4618      	mov	r0, r3
   14276:	3720      	adds	r7, #32
   14278:	46bd      	mov	sp, r7
   1427a:	bd80      	pop	{r7, pc}

0001427c <hw_rx_counting_enabled>:
{
   1427c:	b480      	push	{r7}
   1427e:	b083      	sub	sp, #12
   14280:	af00      	add	r7, sp, #0
   14282:	6078      	str	r0, [r7, #4]
		return data->async->hw_rx_counting;
   14284:	687b      	ldr	r3, [r7, #4]
   14286:	68db      	ldr	r3, [r3, #12]
   14288:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
}
   1428c:	4618      	mov	r0, r3
   1428e:	370c      	adds	r7, #12
   14290:	46bd      	mov	sp, r7
   14292:	bc80      	pop	{r7}
   14294:	4770      	bx	lr

00014296 <uarte_enable>:
{
   14296:	b580      	push	{r7, lr}
   14298:	b086      	sub	sp, #24
   1429a:	af00      	add	r7, sp, #0
   1429c:	6078      	str	r0, [r7, #4]
   1429e:	6039      	str	r1, [r7, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   142a0:	6878      	ldr	r0, [r7, #4]
   142a2:	f7ff fe88 	bl	13fb6 <get_dev_data>
   142a6:	6138      	str	r0, [r7, #16]
	if (data->async) {
   142a8:	693b      	ldr	r3, [r7, #16]
   142aa:	68db      	ldr	r3, [r3, #12]
   142ac:	2b00      	cmp	r3, #0
   142ae:	d036      	beq.n	1431e <uarte_enable+0x88>
		bool disabled = data->async->low_power_mask == 0;
   142b0:	693b      	ldr	r3, [r7, #16]
   142b2:	68db      	ldr	r3, [r3, #12]
   142b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   142b8:	2b00      	cmp	r3, #0
   142ba:	bf0c      	ite	eq
   142bc:	2301      	moveq	r3, #1
   142be:	2300      	movne	r3, #0
   142c0:	73fb      	strb	r3, [r7, #15]
		data->async->low_power_mask |= mask;
   142c2:	693b      	ldr	r3, [r7, #16]
   142c4:	68db      	ldr	r3, [r3, #12]
   142c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   142ca:	461a      	mov	r2, r3
   142cc:	683b      	ldr	r3, [r7, #0]
   142ce:	431a      	orrs	r2, r3
   142d0:	693b      	ldr	r3, [r7, #16]
   142d2:	68db      	ldr	r3, [r3, #12]
   142d4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		if (hw_rx_counting_enabled(data) && disabled) {
   142d8:	6938      	ldr	r0, [r7, #16]
   142da:	f7ff ffcf 	bl	1427c <hw_rx_counting_enabled>
   142de:	4603      	mov	r3, r0
   142e0:	2b00      	cmp	r3, #0
   142e2:	d01c      	beq.n	1431e <uarte_enable+0x88>
   142e4:	7bfb      	ldrb	r3, [r7, #15]
   142e6:	2b00      	cmp	r3, #0
   142e8:	d019      	beq.n	1431e <uarte_enable+0x88>
			const nrfx_timer_t *timer = &get_dev_config(dev)->timer;
   142ea:	6878      	ldr	r0, [r7, #4]
   142ec:	f7ff fe6e 	bl	13fcc <get_dev_config>
   142f0:	4603      	mov	r3, r0
   142f2:	3308      	adds	r3, #8
   142f4:	60bb      	str	r3, [r7, #8]
			nrfx_timer_enable(timer);
   142f6:	68b8      	ldr	r0, [r7, #8]
   142f8:	f7f6 f9ba 	bl	a670 <nrfx_timer_enable>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
   142fc:	2300      	movs	r3, #0
   142fe:	617b      	str	r3, [r7, #20]
   14300:	e005      	b.n	1430e <uarte_enable+0x78>
				nrfx_timer_increment(timer);
   14302:	68b8      	ldr	r0, [r7, #8]
   14304:	f7f6 fad2 	bl	a8ac <nrfx_timer_increment>
			for (int i = 0; i < data->async->rx_flush_cnt; i++) {
   14308:	697b      	ldr	r3, [r7, #20]
   1430a:	3301      	adds	r3, #1
   1430c:	617b      	str	r3, [r7, #20]
   1430e:	693b      	ldr	r3, [r7, #16]
   14310:	68db      	ldr	r3, [r3, #12]
   14312:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
   14316:	461a      	mov	r2, r3
   14318:	697b      	ldr	r3, [r7, #20]
   1431a:	4293      	cmp	r3, r2
   1431c:	dbf1      	blt.n	14302 <uarte_enable+0x6c>
	nrf_uarte_enable(get_uarte_instance(dev));
   1431e:	6878      	ldr	r0, [r7, #4]
   14320:	f7ff fe5f 	bl	13fe2 <get_uarte_instance>
   14324:	4603      	mov	r3, r0
   14326:	4618      	mov	r0, r3
   14328:	f7ff fd3f 	bl	13daa <nrf_uarte_enable>
}
   1432c:	bf00      	nop
   1432e:	3718      	adds	r7, #24
   14330:	46bd      	mov	sp, r7
   14332:	bd80      	pop	{r7, pc}

00014334 <tx_start>:
{
   14334:	b580      	push	{r7, lr}
   14336:	b086      	sub	sp, #24
   14338:	af00      	add	r7, sp, #0
   1433a:	60f8      	str	r0, [r7, #12]
   1433c:	60b9      	str	r1, [r7, #8]
   1433e:	607a      	str	r2, [r7, #4]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   14340:	68f8      	ldr	r0, [r7, #12]
   14342:	f7ff fe4e 	bl	13fe2 <get_uarte_instance>
   14346:	6178      	str	r0, [r7, #20]
	nrf_uarte_tx_buffer_set(uarte, buf, len);
   14348:	687a      	ldr	r2, [r7, #4]
   1434a:	68b9      	ldr	r1, [r7, #8]
   1434c:	6978      	ldr	r0, [r7, #20]
   1434e:	f7ff fdbc 	bl	13eca <nrf_uarte_tx_buffer_set>
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDTX);
   14352:	f44f 7190 	mov.w	r1, #288	; 0x120
   14356:	6978      	ldr	r0, [r7, #20]
   14358:	f7ff fc79 	bl	13c4e <nrf_uarte_event_clear>
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_TXSTOPPED);
   1435c:	f44f 71ac 	mov.w	r1, #344	; 0x158
   14360:	6978      	ldr	r0, [r7, #20]
   14362:	f7ff fc74 	bl	13c4e <nrf_uarte_event_clear>
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   14366:	68f8      	ldr	r0, [r7, #12]
   14368:	f7ff fe30 	bl	13fcc <get_dev_config>
   1436c:	4603      	mov	r3, r0
   1436e:	685b      	ldr	r3, [r3, #4]
   14370:	f003 0310 	and.w	r3, r3, #16
   14374:	2b00      	cmp	r3, #0
   14376:	d008      	beq.n	1438a <tx_start+0x56>
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   14378:	2101      	movs	r1, #1
   1437a:	68f8      	ldr	r0, [r7, #12]
   1437c:	f7ff ff8b 	bl	14296 <uarte_enable>
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_TXSTOPPED_MASK);
   14380:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   14384:	6978      	ldr	r0, [r7, #20]
   14386:	f7ff fcbe 	bl	13d06 <nrf_uarte_int_enable>
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTTX);
   1438a:	2108      	movs	r1, #8
   1438c:	6978      	ldr	r0, [r7, #20]
   1438e:	f7ff fd58 	bl	13e42 <nrf_uarte_task_trigger>
}
   14392:	bf00      	nop
   14394:	3718      	adds	r7, #24
   14396:	46bd      	mov	sp, r7
   14398:	bd80      	pop	{r7, pc}

0001439a <uart_disable>:
{
   1439a:	b580      	push	{r7, lr}
   1439c:	b084      	sub	sp, #16
   1439e:	af00      	add	r7, sp, #0
   143a0:	6078      	str	r0, [r7, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   143a2:	6878      	ldr	r0, [r7, #4]
   143a4:	f7ff fe07 	bl	13fb6 <get_dev_data>
   143a8:	60f8      	str	r0, [r7, #12]
	if (data->async && hw_rx_counting_enabled(data)) {
   143aa:	68fb      	ldr	r3, [r7, #12]
   143ac:	68db      	ldr	r3, [r3, #12]
   143ae:	2b00      	cmp	r3, #0
   143b0:	d015      	beq.n	143de <uart_disable+0x44>
   143b2:	68f8      	ldr	r0, [r7, #12]
   143b4:	f7ff ff62 	bl	1427c <hw_rx_counting_enabled>
   143b8:	4603      	mov	r3, r0
   143ba:	2b00      	cmp	r3, #0
   143bc:	d00f      	beq.n	143de <uart_disable+0x44>
		nrfx_timer_disable(&get_dev_config(dev)->timer);
   143be:	6878      	ldr	r0, [r7, #4]
   143c0:	f7ff fe04 	bl	13fcc <get_dev_config>
   143c4:	4603      	mov	r3, r0
   143c6:	3308      	adds	r3, #8
   143c8:	4618      	mov	r0, r3
   143ca:	f7f6 f9c9 	bl	a760 <nrfx_timer_disable>
		data->async->rx_total_byte_cnt = 0;
   143ce:	68fb      	ldr	r3, [r7, #12]
   143d0:	68db      	ldr	r3, [r3, #12]
   143d2:	2200      	movs	r2, #0
   143d4:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_total_user_byte_cnt = 0;
   143d6:	68fb      	ldr	r3, [r7, #12]
   143d8:	68db      	ldr	r3, [r3, #12]
   143da:	2200      	movs	r2, #0
   143dc:	669a      	str	r2, [r3, #104]	; 0x68
	nrf_uarte_disable(get_uarte_instance(dev));
   143de:	6878      	ldr	r0, [r7, #4]
   143e0:	f7ff fdff 	bl	13fe2 <get_uarte_instance>
   143e4:	4603      	mov	r3, r0
   143e6:	4618      	mov	r0, r3
   143e8:	f7ff fcec 	bl	13dc4 <nrf_uarte_disable>
}
   143ec:	bf00      	nop
   143ee:	3710      	adds	r7, #16
   143f0:	46bd      	mov	sp, r7
   143f2:	bd80      	pop	{r7, pc}

000143f4 <timer_handler>:
static void timer_handler(nrf_timer_event_t event_type, void *p_context) { }
   143f4:	b480      	push	{r7}
   143f6:	b083      	sub	sp, #12
   143f8:	af00      	add	r7, sp, #0
   143fa:	4603      	mov	r3, r0
   143fc:	6039      	str	r1, [r7, #0]
   143fe:	80fb      	strh	r3, [r7, #6]
   14400:	bf00      	nop
   14402:	370c      	adds	r7, #12
   14404:	46bd      	mov	sp, r7
   14406:	bc80      	pop	{r7}
   14408:	4770      	bx	lr

0001440a <uarte_nrfx_tx>:
{
   1440a:	b590      	push	{r4, r7, lr}
   1440c:	b08f      	sub	sp, #60	; 0x3c
   1440e:	af02      	add	r7, sp, #8
   14410:	60f8      	str	r0, [r7, #12]
   14412:	60b9      	str	r1, [r7, #8]
   14414:	607a      	str	r2, [r7, #4]
   14416:	603b      	str	r3, [r7, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14418:	68f8      	ldr	r0, [r7, #12]
   1441a:	f7ff fdcc 	bl	13fb6 <get_dev_data>
   1441e:	62f8      	str	r0, [r7, #44]	; 0x2c
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   14420:	68f8      	ldr	r0, [r7, #12]
   14422:	f7ff fdde 	bl	13fe2 <get_uarte_instance>
   14426:	62b8      	str	r0, [r7, #40]	; 0x28
	if (!nrfx_is_in_ram(buf)) {
   14428:	68b8      	ldr	r0, [r7, #8]
   1442a:	f7ff f976 	bl	1371a <nrfx_is_in_ram>
   1442e:	4603      	mov	r3, r0
   14430:	f083 0301 	eor.w	r3, r3, #1
   14434:	b2db      	uxtb	r3, r3
   14436:	2b00      	cmp	r3, #0
   14438:	d002      	beq.n	14440 <uarte_nrfx_tx+0x36>
		return -ENOTSUP;
   1443a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1443e:	e06f      	b.n	14520 <uarte_nrfx_tx+0x116>
	__asm__ volatile(
   14440:	f04f 0320 	mov.w	r3, #32
   14444:	f3ef 8211 	mrs	r2, BASEPRI
   14448:	f383 8811 	msr	BASEPRI, r3
   1444c:	f3bf 8f6f 	isb	sy
   14450:	623a      	str	r2, [r7, #32]
   14452:	61fb      	str	r3, [r7, #28]
	return key;
   14454:	6a3b      	ldr	r3, [r7, #32]
	int key = irq_lock();
   14456:	627b      	str	r3, [r7, #36]	; 0x24
	if (data->async->tx_size) {
   14458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1445a:	68db      	ldr	r3, [r3, #12]
   1445c:	68db      	ldr	r3, [r3, #12]
   1445e:	2b00      	cmp	r3, #0
   14460:	d00a      	beq.n	14478 <uarte_nrfx_tx+0x6e>
		irq_unlock(key);
   14462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14464:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
   14466:	69bb      	ldr	r3, [r7, #24]
   14468:	f383 8811 	msr	BASEPRI, r3
   1446c:	f3bf 8f6f 	isb	sy
}
   14470:	bf00      	nop
		return -EBUSY;
   14472:	f06f 030f 	mvn.w	r3, #15
   14476:	e053      	b.n	14520 <uarte_nrfx_tx+0x116>
	data->async->tx_size = len;
   14478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1447a:	68db      	ldr	r3, [r3, #12]
   1447c:	687a      	ldr	r2, [r7, #4]
   1447e:	60da      	str	r2, [r3, #12]
	nrf_uarte_int_enable(uarte, NRF_UARTE_INT_TXSTOPPED_MASK);
   14480:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   14484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   14486:	f7ff fc3e 	bl	13d06 <nrf_uarte_int_enable>
	if (!is_tx_ready(dev)) {
   1448a:	68f8      	ldr	r0, [r7, #12]
   1448c:	f7ff fe81 	bl	14192 <is_tx_ready>
   14490:	4603      	mov	r3, r0
   14492:	f083 0301 	eor.w	r3, r3, #1
   14496:	b2db      	uxtb	r3, r3
   14498:	2b00      	cmp	r3, #0
   1449a:	d004      	beq.n	144a6 <uarte_nrfx_tx+0x9c>
		data->async->pend_tx_buf = (uint8_t *)buf;
   1449c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1449e:	68db      	ldr	r3, [r3, #12]
   144a0:	68ba      	ldr	r2, [r7, #8]
   144a2:	611a      	str	r2, [r3, #16]
   144a4:	e00e      	b.n	144c4 <uarte_nrfx_tx+0xba>
		data->async->tx_buf = buf;
   144a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   144a8:	68db      	ldr	r3, [r3, #12]
   144aa:	68ba      	ldr	r2, [r7, #8]
   144ac:	609a      	str	r2, [r3, #8]
		data->async->tx_amount = -1;
   144ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   144b0:	68db      	ldr	r3, [r3, #12]
   144b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   144b6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		tx_start(dev, buf, len);
   144ba:	687a      	ldr	r2, [r7, #4]
   144bc:	68b9      	ldr	r1, [r7, #8]
   144be:	68f8      	ldr	r0, [r7, #12]
   144c0:	f7ff ff38 	bl	14334 <tx_start>
	irq_unlock(key);
   144c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   144c6:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   144c8:	697b      	ldr	r3, [r7, #20]
   144ca:	f383 8811 	msr	BASEPRI, r3
   144ce:	f3bf 8f6f 	isb	sy
}
   144d2:	bf00      	nop
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   144d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   144d6:	7adb      	ldrb	r3, [r3, #11]
   144d8:	2b01      	cmp	r3, #1
   144da:	d120      	bne.n	1451e <uarte_nrfx_tx+0x114>
	    && timeout != SYS_FOREVER_MS) {
   144dc:	683b      	ldr	r3, [r7, #0]
   144de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   144e2:	d01c      	beq.n	1451e <uarte_nrfx_tx+0x114>
		k_timer_start(&data->async->tx_timeout_timer, K_MSEC(timeout),
   144e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   144e6:	68db      	ldr	r3, [r3, #12]
   144e8:	f103 0418 	add.w	r4, r3, #24
   144ec:	683b      	ldr	r3, [r7, #0]
   144ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   144f2:	461a      	mov	r2, r3
   144f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
   144f8:	4610      	mov	r0, r2
   144fa:	4619      	mov	r1, r3
   144fc:	f7ff f92a 	bl	13754 <k_ms_to_ticks_ceil64>
   14500:	4602      	mov	r2, r0
   14502:	460b      	mov	r3, r1
   14504:	4610      	mov	r0, r2
   14506:	4619      	mov	r1, r3
			      K_NO_WAIT);
   14508:	f04f 0200 	mov.w	r2, #0
   1450c:	f04f 0300 	mov.w	r3, #0
		k_timer_start(&data->async->tx_timeout_timer, K_MSEC(timeout),
   14510:	e9cd 2300 	strd	r2, r3, [sp]
   14514:	4602      	mov	r2, r0
   14516:	460b      	mov	r3, r1
   14518:	4620      	mov	r0, r4
   1451a:	f7ff fa7f 	bl	13a1c <k_timer_start>
	return 0;
   1451e:	2300      	movs	r3, #0
}
   14520:	4618      	mov	r0, r3
   14522:	3734      	adds	r7, #52	; 0x34
   14524:	46bd      	mov	sp, r7
   14526:	bd90      	pop	{r4, r7, pc}

00014528 <uarte_nrfx_tx_abort>:
{
   14528:	b580      	push	{r7, lr}
   1452a:	b084      	sub	sp, #16
   1452c:	af00      	add	r7, sp, #0
   1452e:	6078      	str	r0, [r7, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14530:	6878      	ldr	r0, [r7, #4]
   14532:	f7ff fd40 	bl	13fb6 <get_dev_data>
   14536:	60f8      	str	r0, [r7, #12]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   14538:	6878      	ldr	r0, [r7, #4]
   1453a:	f7ff fd52 	bl	13fe2 <get_uarte_instance>
   1453e:	60b8      	str	r0, [r7, #8]
	if (data->async->tx_buf == NULL) {
   14540:	68fb      	ldr	r3, [r7, #12]
   14542:	68db      	ldr	r3, [r3, #12]
   14544:	689b      	ldr	r3, [r3, #8]
   14546:	2b00      	cmp	r3, #0
   14548:	d102      	bne.n	14550 <uarte_nrfx_tx_abort+0x28>
		return -EFAULT;
   1454a:	f06f 030d 	mvn.w	r3, #13
   1454e:	e00a      	b.n	14566 <uarte_nrfx_tx_abort+0x3e>
	k_timer_stop(&data->async->tx_timeout_timer);
   14550:	68fb      	ldr	r3, [r7, #12]
   14552:	68db      	ldr	r3, [r3, #12]
   14554:	3318      	adds	r3, #24
   14556:	4618      	mov	r0, r3
   14558:	f7ff fa73 	bl	13a42 <k_timer_stop>
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
   1455c:	210c      	movs	r1, #12
   1455e:	68b8      	ldr	r0, [r7, #8]
   14560:	f7ff fc6f 	bl	13e42 <nrf_uarte_task_trigger>
	return 0;
   14564:	2300      	movs	r3, #0
}
   14566:	4618      	mov	r0, r3
   14568:	3710      	adds	r7, #16
   1456a:	46bd      	mov	sp, r7
   1456c:	bd80      	pop	{r7, pc}

0001456e <user_callback>:
{
   1456e:	b580      	push	{r7, lr}
   14570:	b084      	sub	sp, #16
   14572:	af00      	add	r7, sp, #0
   14574:	6078      	str	r0, [r7, #4]
   14576:	6039      	str	r1, [r7, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14578:	6878      	ldr	r0, [r7, #4]
   1457a:	f7ff fd1c 	bl	13fb6 <get_dev_data>
   1457e:	60f8      	str	r0, [r7, #12]
	if (data->async->user_callback) {
   14580:	68fb      	ldr	r3, [r7, #12]
   14582:	68db      	ldr	r3, [r3, #12]
   14584:	681b      	ldr	r3, [r3, #0]
   14586:	2b00      	cmp	r3, #0
   14588:	d008      	beq.n	1459c <user_callback+0x2e>
		data->async->user_callback(dev, evt, data->async->user_data);
   1458a:	68fb      	ldr	r3, [r7, #12]
   1458c:	68db      	ldr	r3, [r3, #12]
   1458e:	681b      	ldr	r3, [r3, #0]
   14590:	68fa      	ldr	r2, [r7, #12]
   14592:	68d2      	ldr	r2, [r2, #12]
   14594:	6852      	ldr	r2, [r2, #4]
   14596:	6839      	ldr	r1, [r7, #0]
   14598:	6878      	ldr	r0, [r7, #4]
   1459a:	4798      	blx	r3
}
   1459c:	bf00      	nop
   1459e:	3710      	adds	r7, #16
   145a0:	46bd      	mov	sp, r7
   145a2:	bd80      	pop	{r7, pc}

000145a4 <notify_uart_rx_rdy>:
{
   145a4:	b580      	push	{r7, lr}
   145a6:	b088      	sub	sp, #32
   145a8:	af00      	add	r7, sp, #0
   145aa:	6078      	str	r0, [r7, #4]
   145ac:	6039      	str	r1, [r7, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   145ae:	6878      	ldr	r0, [r7, #4]
   145b0:	f7ff fd01 	bl	13fb6 <get_dev_data>
   145b4:	61f8      	str	r0, [r7, #28]
	struct uart_event evt = {
   145b6:	f107 0308 	add.w	r3, r7, #8
   145ba:	2200      	movs	r2, #0
   145bc:	601a      	str	r2, [r3, #0]
   145be:	605a      	str	r2, [r3, #4]
   145c0:	609a      	str	r2, [r3, #8]
   145c2:	60da      	str	r2, [r3, #12]
   145c4:	611a      	str	r2, [r3, #16]
   145c6:	2302      	movs	r3, #2
   145c8:	723b      	strb	r3, [r7, #8]
		.data.rx.buf = data->async->rx_buf,
   145ca:	69fb      	ldr	r3, [r7, #28]
   145cc:	68db      	ldr	r3, [r3, #12]
   145ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
	struct uart_event evt = {
   145d0:	60fb      	str	r3, [r7, #12]
		.data.rx.offset = data->async->rx_offset
   145d2:	69fb      	ldr	r3, [r7, #28]
   145d4:	68db      	ldr	r3, [r3, #12]
   145d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
	struct uart_event evt = {
   145d8:	613b      	str	r3, [r7, #16]
   145da:	683b      	ldr	r3, [r7, #0]
   145dc:	617b      	str	r3, [r7, #20]
	user_callback(dev, &evt);
   145de:	f107 0308 	add.w	r3, r7, #8
   145e2:	4619      	mov	r1, r3
   145e4:	6878      	ldr	r0, [r7, #4]
   145e6:	f7ff ffc2 	bl	1456e <user_callback>
}
   145ea:	bf00      	nop
   145ec:	3720      	adds	r7, #32
   145ee:	46bd      	mov	sp, r7
   145f0:	bd80      	pop	{r7, pc}

000145f2 <notify_rx_buf_release>:
{
   145f2:	b580      	push	{r7, lr}
   145f4:	b08a      	sub	sp, #40	; 0x28
   145f6:	af00      	add	r7, sp, #0
   145f8:	60f8      	str	r0, [r7, #12]
   145fa:	60b9      	str	r1, [r7, #8]
   145fc:	4613      	mov	r3, r2
   145fe:	71fb      	strb	r3, [r7, #7]
	if (*buf) {
   14600:	68bb      	ldr	r3, [r7, #8]
   14602:	681b      	ldr	r3, [r3, #0]
   14604:	2b00      	cmp	r3, #0
   14606:	d018      	beq.n	1463a <notify_rx_buf_release+0x48>
		struct uart_event evt = {
   14608:	f107 0314 	add.w	r3, r7, #20
   1460c:	2200      	movs	r2, #0
   1460e:	601a      	str	r2, [r3, #0]
   14610:	605a      	str	r2, [r3, #4]
   14612:	609a      	str	r2, [r3, #8]
   14614:	60da      	str	r2, [r3, #12]
   14616:	611a      	str	r2, [r3, #16]
   14618:	2304      	movs	r3, #4
   1461a:	753b      	strb	r3, [r7, #20]
			.data.rx_buf.buf = *buf,
   1461c:	68bb      	ldr	r3, [r7, #8]
   1461e:	681b      	ldr	r3, [r3, #0]
		struct uart_event evt = {
   14620:	61bb      	str	r3, [r7, #24]
		user_callback(dev, &evt);
   14622:	f107 0314 	add.w	r3, r7, #20
   14626:	4619      	mov	r1, r3
   14628:	68f8      	ldr	r0, [r7, #12]
   1462a:	f7ff ffa0 	bl	1456e <user_callback>
		if (clear) {
   1462e:	79fb      	ldrb	r3, [r7, #7]
   14630:	2b00      	cmp	r3, #0
   14632:	d002      	beq.n	1463a <notify_rx_buf_release+0x48>
			*buf = NULL;
   14634:	68bb      	ldr	r3, [r7, #8]
   14636:	2200      	movs	r2, #0
   14638:	601a      	str	r2, [r3, #0]
}
   1463a:	bf00      	nop
   1463c:	3728      	adds	r7, #40	; 0x28
   1463e:	46bd      	mov	sp, r7
   14640:	bd80      	pop	{r7, pc}

00014642 <notify_rx_disable>:
{
   14642:	b580      	push	{r7, lr}
   14644:	b088      	sub	sp, #32
   14646:	af00      	add	r7, sp, #0
   14648:	6078      	str	r0, [r7, #4]
	struct uart_event evt = {
   1464a:	f107 030c 	add.w	r3, r7, #12
   1464e:	2200      	movs	r2, #0
   14650:	601a      	str	r2, [r3, #0]
   14652:	605a      	str	r2, [r3, #4]
   14654:	609a      	str	r2, [r3, #8]
   14656:	60da      	str	r2, [r3, #12]
   14658:	611a      	str	r2, [r3, #16]
   1465a:	2305      	movs	r3, #5
   1465c:	733b      	strb	r3, [r7, #12]
	user_callback(dev, (struct uart_event *)&evt);
   1465e:	f107 030c 	add.w	r3, r7, #12
   14662:	4619      	mov	r1, r3
   14664:	6878      	ldr	r0, [r7, #4]
   14666:	f7ff ff82 	bl	1456e <user_callback>
}
   1466a:	bf00      	nop
   1466c:	3720      	adds	r7, #32
   1466e:	46bd      	mov	sp, r7
   14670:	bd80      	pop	{r7, pc}

00014672 <uarte_nrfx_rx_buf_rsp>:
{
   14672:	b580      	push	{r7, lr}
   14674:	b08c      	sub	sp, #48	; 0x30
   14676:	af00      	add	r7, sp, #0
   14678:	60f8      	str	r0, [r7, #12]
   1467a:	60b9      	str	r1, [r7, #8]
   1467c:	607a      	str	r2, [r7, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1467e:	68f8      	ldr	r0, [r7, #12]
   14680:	f7ff fc99 	bl	13fb6 <get_dev_data>
   14684:	62b8      	str	r0, [r7, #40]	; 0x28
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   14686:	68f8      	ldr	r0, [r7, #12]
   14688:	f7ff fcab 	bl	13fe2 <get_uarte_instance>
   1468c:	6278      	str	r0, [r7, #36]	; 0x24
	__asm__ volatile(
   1468e:	f04f 0320 	mov.w	r3, #32
   14692:	f3ef 8211 	mrs	r2, BASEPRI
   14696:	f383 8811 	msr	BASEPRI, r3
   1469a:	f3bf 8f6f 	isb	sy
   1469e:	61fa      	str	r2, [r7, #28]
   146a0:	61bb      	str	r3, [r7, #24]
	return key;
   146a2:	69fb      	ldr	r3, [r7, #28]
	int key = irq_lock();
   146a4:	623b      	str	r3, [r7, #32]
	if (data->async->rx_buf == NULL) {
   146a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   146a8:	68db      	ldr	r3, [r3, #12]
   146aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   146ac:	2b00      	cmp	r3, #0
   146ae:	d103      	bne.n	146b8 <uarte_nrfx_rx_buf_rsp+0x46>
		err = -EACCES;
   146b0:	f06f 030c 	mvn.w	r3, #12
   146b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   146b6:	e01b      	b.n	146f0 <uarte_nrfx_rx_buf_rsp+0x7e>
	} else if (data->async->rx_next_buf == NULL) {
   146b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   146ba:	68db      	ldr	r3, [r3, #12]
   146bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   146be:	2b00      	cmp	r3, #0
   146c0:	d113      	bne.n	146ea <uarte_nrfx_rx_buf_rsp+0x78>
		data->async->rx_next_buf = buf;
   146c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   146c4:	68db      	ldr	r3, [r3, #12]
   146c6:	68ba      	ldr	r2, [r7, #8]
   146c8:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf_len = len;
   146ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   146cc:	68db      	ldr	r3, [r3, #12]
   146ce:	687a      	ldr	r2, [r7, #4]
   146d0:	661a      	str	r2, [r3, #96]	; 0x60
		nrf_uarte_rx_buffer_set(uarte, buf, len);
   146d2:	687a      	ldr	r2, [r7, #4]
   146d4:	68b9      	ldr	r1, [r7, #8]
   146d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
   146d8:	f7ff fc16 	bl	13f08 <nrf_uarte_rx_buffer_set>
		nrf_uarte_shorts_enable(uarte, NRF_UARTE_SHORT_ENDRX_STARTRX);
   146dc:	2120      	movs	r1, #32
   146de:	6a78      	ldr	r0, [r7, #36]	; 0x24
   146e0:	f7ff faec 	bl	13cbc <nrf_uarte_shorts_enable>
		err = 0;
   146e4:	2300      	movs	r3, #0
   146e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   146e8:	e002      	b.n	146f0 <uarte_nrfx_rx_buf_rsp+0x7e>
		err = -EBUSY;
   146ea:	f06f 030f 	mvn.w	r3, #15
   146ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	irq_unlock(key);
   146f0:	6a3b      	ldr	r3, [r7, #32]
   146f2:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   146f4:	697b      	ldr	r3, [r7, #20]
   146f6:	f383 8811 	msr	BASEPRI, r3
   146fa:	f3bf 8f6f 	isb	sy
}
   146fe:	bf00      	nop
	return err;
   14700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   14702:	4618      	mov	r0, r3
   14704:	3730      	adds	r7, #48	; 0x30
   14706:	46bd      	mov	sp, r7
   14708:	bd80      	pop	{r7, pc}

0001470a <uarte_nrfx_callback_set>:
{
   1470a:	b580      	push	{r7, lr}
   1470c:	b086      	sub	sp, #24
   1470e:	af00      	add	r7, sp, #0
   14710:	60f8      	str	r0, [r7, #12]
   14712:	60b9      	str	r1, [r7, #8]
   14714:	607a      	str	r2, [r7, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14716:	68f8      	ldr	r0, [r7, #12]
   14718:	f7ff fc4d 	bl	13fb6 <get_dev_data>
   1471c:	6178      	str	r0, [r7, #20]
	if (!data->async) {
   1471e:	697b      	ldr	r3, [r7, #20]
   14720:	68db      	ldr	r3, [r3, #12]
   14722:	2b00      	cmp	r3, #0
   14724:	d102      	bne.n	1472c <uarte_nrfx_callback_set+0x22>
		return -ENOTSUP;
   14726:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1472a:	e008      	b.n	1473e <uarte_nrfx_callback_set+0x34>
	data->async->user_callback = callback;
   1472c:	697b      	ldr	r3, [r7, #20]
   1472e:	68db      	ldr	r3, [r3, #12]
   14730:	68ba      	ldr	r2, [r7, #8]
   14732:	601a      	str	r2, [r3, #0]
	data->async->user_data = user_data;
   14734:	697b      	ldr	r3, [r7, #20]
   14736:	68db      	ldr	r3, [r3, #12]
   14738:	687a      	ldr	r2, [r7, #4]
   1473a:	605a      	str	r2, [r3, #4]
	return 0;
   1473c:	2300      	movs	r3, #0
}
   1473e:	4618      	mov	r0, r3
   14740:	3718      	adds	r7, #24
   14742:	46bd      	mov	sp, r7
   14744:	bd80      	pop	{r7, pc}

00014746 <uarte_nrfx_rx_disable>:
{
   14746:	b580      	push	{r7, lr}
   14748:	b084      	sub	sp, #16
   1474a:	af00      	add	r7, sp, #0
   1474c:	6078      	str	r0, [r7, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1474e:	6878      	ldr	r0, [r7, #4]
   14750:	f7ff fc31 	bl	13fb6 <get_dev_data>
   14754:	60f8      	str	r0, [r7, #12]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   14756:	6878      	ldr	r0, [r7, #4]
   14758:	f7ff fc43 	bl	13fe2 <get_uarte_instance>
   1475c:	60b8      	str	r0, [r7, #8]
	if (data->async->rx_buf == NULL) {
   1475e:	68fb      	ldr	r3, [r7, #12]
   14760:	68db      	ldr	r3, [r3, #12]
   14762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   14764:	2b00      	cmp	r3, #0
   14766:	d102      	bne.n	1476e <uarte_nrfx_rx_disable+0x28>
		return -EFAULT;
   14768:	f06f 030d 	mvn.w	r3, #13
   1476c:	e01d      	b.n	147aa <uarte_nrfx_rx_disable+0x64>
	if (data->async->rx_next_buf != NULL) {
   1476e:	68fb      	ldr	r3, [r7, #12]
   14770:	68db      	ldr	r3, [r3, #12]
   14772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   14774:	2b00      	cmp	r3, #0
   14776:	d008      	beq.n	1478a <uarte_nrfx_rx_disable+0x44>
		nrf_uarte_shorts_disable(uarte, NRF_UARTE_SHORT_ENDRX_STARTRX);
   14778:	2120      	movs	r1, #32
   1477a:	68b8      	ldr	r0, [r7, #8]
   1477c:	f7ff fab0 	bl	13ce0 <nrf_uarte_shorts_disable>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_RXSTARTED);
   14780:	f44f 71a6 	mov.w	r1, #332	; 0x14c
   14784:	68b8      	ldr	r0, [r7, #8]
   14786:	f7ff fa62 	bl	13c4e <nrf_uarte_event_clear>
	k_timer_stop(&data->async->rx_timeout_timer);
   1478a:	68fb      	ldr	r3, [r7, #12]
   1478c:	68db      	ldr	r3, [r3, #12]
   1478e:	3378      	adds	r3, #120	; 0x78
   14790:	4618      	mov	r0, r3
   14792:	f7ff f956 	bl	13a42 <k_timer_stop>
	data->async->rx_enabled = false;
   14796:	68fb      	ldr	r3, [r7, #12]
   14798:	68db      	ldr	r3, [r3, #12]
   1479a:	2200      	movs	r2, #0
   1479c:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPRX);
   147a0:	2104      	movs	r1, #4
   147a2:	68b8      	ldr	r0, [r7, #8]
   147a4:	f7ff fb4d 	bl	13e42 <nrf_uarte_task_trigger>
	return 0;
   147a8:	2300      	movs	r3, #0
}
   147aa:	4618      	mov	r0, r3
   147ac:	3710      	adds	r7, #16
   147ae:	46bd      	mov	sp, r7
   147b0:	bd80      	pop	{r7, pc}

000147b2 <tx_timeout>:
{
   147b2:	b580      	push	{r7, lr}
   147b4:	b084      	sub	sp, #16
   147b6:	af00      	add	r7, sp, #0
   147b8:	6078      	str	r0, [r7, #4]
	struct uarte_nrfx_data *data = k_timer_user_data_get(timer);
   147ba:	6878      	ldr	r0, [r7, #4]
   147bc:	f7ff f959 	bl	13a72 <k_timer_user_data_get>
   147c0:	60f8      	str	r0, [r7, #12]
	(void) uarte_nrfx_tx_abort(data->dev);
   147c2:	68fb      	ldr	r3, [r7, #12]
   147c4:	681b      	ldr	r3, [r3, #0]
   147c6:	4618      	mov	r0, r3
   147c8:	f7ff feae 	bl	14528 <uarte_nrfx_tx_abort>
}
   147cc:	bf00      	nop
   147ce:	3710      	adds	r7, #16
   147d0:	46bd      	mov	sp, r7
   147d2:	bd80      	pop	{r7, pc}

000147d4 <rx_timeout>:
{
   147d4:	b580      	push	{r7, lr}
   147d6:	b088      	sub	sp, #32
   147d8:	af00      	add	r7, sp, #0
   147da:	6078      	str	r0, [r7, #4]
	struct uarte_nrfx_data *data = k_timer_user_data_get(timer);
   147dc:	6878      	ldr	r0, [r7, #4]
   147de:	f7ff f948 	bl	13a72 <k_timer_user_data_get>
   147e2:	6138      	str	r0, [r7, #16]
	const struct device *dev = data->dev;
   147e4:	693b      	ldr	r3, [r7, #16]
   147e6:	681b      	ldr	r3, [r3, #0]
   147e8:	60fb      	str	r3, [r7, #12]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   147ea:	68f8      	ldr	r0, [r7, #12]
   147ec:	f7ff fbee 	bl	13fcc <get_dev_config>
   147f0:	60b8      	str	r0, [r7, #8]
	if (data->async->is_in_irq) {
   147f2:	693b      	ldr	r3, [r7, #16]
   147f4:	68db      	ldr	r3, [r3, #12]
   147f6:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
   147fa:	b2db      	uxtb	r3, r3
   147fc:	2b00      	cmp	r3, #0
   147fe:	f040 809e 	bne.w	1493e <rx_timeout+0x16a>
	nrf_uarte_int_disable(get_uarte_instance(dev),
   14802:	68f8      	ldr	r0, [r7, #12]
   14804:	f7ff fbed 	bl	13fe2 <get_uarte_instance>
   14808:	4603      	mov	r3, r0
   1480a:	2110      	movs	r1, #16
   1480c:	4618      	mov	r0, r3
   1480e:	f7ff fa97 	bl	13d40 <nrf_uarte_int_disable>
	if (hw_rx_counting_enabled(data)) {
   14812:	6938      	ldr	r0, [r7, #16]
   14814:	f7ff fd32 	bl	1427c <hw_rx_counting_enabled>
   14818:	4603      	mov	r3, r0
   1481a:	2b00      	cmp	r3, #0
   1481c:	d007      	beq.n	1482e <rx_timeout+0x5a>
		read = nrfx_timer_capture(&cfg->timer, 0);
   1481e:	68bb      	ldr	r3, [r7, #8]
   14820:	3308      	adds	r3, #8
   14822:	2100      	movs	r1, #0
   14824:	4618      	mov	r0, r3
   14826:	f7f6 f883 	bl	a930 <nrfx_timer_capture>
   1482a:	61f8      	str	r0, [r7, #28]
   1482c:	e004      	b.n	14838 <rx_timeout+0x64>
		read = data->async->rx_cnt.cnt;
   1482e:	693b      	ldr	r3, [r7, #16]
   14830:	68db      	ldr	r3, [r3, #12]
   14832:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   14836:	61fb      	str	r3, [r7, #28]
	if (read != data->async->rx_total_byte_cnt) {
   14838:	693b      	ldr	r3, [r7, #16]
   1483a:	68db      	ldr	r3, [r3, #12]
   1483c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1483e:	69fa      	ldr	r2, [r7, #28]
   14840:	429a      	cmp	r2, r3
   14842:	d009      	beq.n	14858 <rx_timeout+0x84>
		data->async->rx_total_byte_cnt = read;
   14844:	693b      	ldr	r3, [r7, #16]
   14846:	68db      	ldr	r3, [r3, #12]
   14848:	69fa      	ldr	r2, [r7, #28]
   1484a:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_timeout_left = data->async->rx_timeout;
   1484c:	693b      	ldr	r3, [r7, #16]
   1484e:	68da      	ldr	r2, [r3, #12]
   14850:	693b      	ldr	r3, [r7, #16]
   14852:	68db      	ldr	r3, [r3, #12]
   14854:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
   14856:	675a      	str	r2, [r3, #116]	; 0x74
	int32_t len = data->async->rx_total_byte_cnt
   14858:	693b      	ldr	r3, [r7, #16]
   1485a:	68db      	ldr	r3, [r3, #12]
   1485c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
		    - data->async->rx_total_user_byte_cnt;
   1485e:	693b      	ldr	r3, [r7, #16]
   14860:	68db      	ldr	r3, [r3, #12]
   14862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   14864:	1ad3      	subs	r3, r2, r3
	int32_t len = data->async->rx_total_byte_cnt
   14866:	61bb      	str	r3, [r7, #24]
	if (!hw_rx_counting_enabled(data) &&
   14868:	6938      	ldr	r0, [r7, #16]
   1486a:	f7ff fd07 	bl	1427c <hw_rx_counting_enabled>
   1486e:	4603      	mov	r3, r0
   14870:	f083 0301 	eor.w	r3, r3, #1
   14874:	b2db      	uxtb	r3, r3
   14876:	2b00      	cmp	r3, #0
   14878:	d00b      	beq.n	14892 <rx_timeout+0xbe>
   1487a:	69bb      	ldr	r3, [r7, #24]
   1487c:	2b00      	cmp	r3, #0
   1487e:	da08      	bge.n	14892 <rx_timeout+0xbe>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   14880:	693b      	ldr	r3, [r7, #16]
   14882:	68da      	ldr	r2, [r3, #12]
   14884:	693b      	ldr	r3, [r7, #16]
   14886:	68db      	ldr	r3, [r3, #12]
   14888:	6e92      	ldr	r2, [r2, #104]	; 0x68
   1488a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		len = 0;
   1488e:	2300      	movs	r3, #0
   14890:	61bb      	str	r3, [r7, #24]
	bool clipped = false;
   14892:	2300      	movs	r3, #0
   14894:	75fb      	strb	r3, [r7, #23]
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   14896:	693b      	ldr	r3, [r7, #16]
   14898:	68db      	ldr	r3, [r3, #12]
   1489a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   1489c:	69bb      	ldr	r3, [r7, #24]
   1489e:	441a      	add	r2, r3
   148a0:	693b      	ldr	r3, [r7, #16]
   148a2:	68db      	ldr	r3, [r3, #12]
   148a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   148a6:	429a      	cmp	r2, r3
   148a8:	d909      	bls.n	148be <rx_timeout+0xea>
		len = data->async->rx_buf_len - data->async->rx_offset;
   148aa:	693b      	ldr	r3, [r7, #16]
   148ac:	68db      	ldr	r3, [r3, #12]
   148ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   148b0:	693b      	ldr	r3, [r7, #16]
   148b2:	68db      	ldr	r3, [r3, #12]
   148b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   148b6:	1ad3      	subs	r3, r2, r3
   148b8:	61bb      	str	r3, [r7, #24]
		clipped = true;
   148ba:	2301      	movs	r3, #1
   148bc:	75fb      	strb	r3, [r7, #23]
	if (len > 0) {
   148be:	69bb      	ldr	r3, [r7, #24]
   148c0:	2b00      	cmp	r3, #0
   148c2:	dd33      	ble.n	1492c <rx_timeout+0x158>
		if (clipped ||
   148c4:	7dfb      	ldrb	r3, [r7, #23]
   148c6:	2b00      	cmp	r3, #0
   148c8:	d107      	bne.n	148da <rx_timeout+0x106>
			(data->async->rx_timeout_left
   148ca:	693b      	ldr	r3, [r7, #16]
   148cc:	68db      	ldr	r3, [r3, #12]
   148ce:	6f5a      	ldr	r2, [r3, #116]	; 0x74
				< data->async->rx_timeout_slab)) {
   148d0:	693b      	ldr	r3, [r7, #16]
   148d2:	68db      	ldr	r3, [r3, #12]
   148d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
		if (clipped ||
   148d6:	429a      	cmp	r2, r3
   148d8:	da15      	bge.n	14906 <rx_timeout+0x132>
			notify_uart_rx_rdy(dev, len);
   148da:	69bb      	ldr	r3, [r7, #24]
   148dc:	4619      	mov	r1, r3
   148de:	68f8      	ldr	r0, [r7, #12]
   148e0:	f7ff fe60 	bl	145a4 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   148e4:	693b      	ldr	r3, [r7, #16]
   148e6:	68db      	ldr	r3, [r3, #12]
   148e8:	6d99      	ldr	r1, [r3, #88]	; 0x58
   148ea:	69ba      	ldr	r2, [r7, #24]
   148ec:	693b      	ldr	r3, [r7, #16]
   148ee:	68db      	ldr	r3, [r3, #12]
   148f0:	440a      	add	r2, r1
   148f2:	659a      	str	r2, [r3, #88]	; 0x58
			data->async->rx_total_user_byte_cnt += len;
   148f4:	693b      	ldr	r3, [r7, #16]
   148f6:	68db      	ldr	r3, [r3, #12]
   148f8:	6e99      	ldr	r1, [r3, #104]	; 0x68
   148fa:	69ba      	ldr	r2, [r7, #24]
   148fc:	693b      	ldr	r3, [r7, #16]
   148fe:	68db      	ldr	r3, [r3, #12]
   14900:	440a      	add	r2, r1
   14902:	669a      	str	r2, [r3, #104]	; 0x68
   14904:	e009      	b.n	1491a <rx_timeout+0x146>
			data->async->rx_timeout_left -=
   14906:	693b      	ldr	r3, [r7, #16]
   14908:	68db      	ldr	r3, [r3, #12]
   1490a:	6f59      	ldr	r1, [r3, #116]	; 0x74
				data->async->rx_timeout_slab;
   1490c:	693b      	ldr	r3, [r7, #16]
   1490e:	68db      	ldr	r3, [r3, #12]
   14910:	6f1a      	ldr	r2, [r3, #112]	; 0x70
			data->async->rx_timeout_left -=
   14912:	693b      	ldr	r3, [r7, #16]
   14914:	68db      	ldr	r3, [r3, #12]
   14916:	1a8a      	subs	r2, r1, r2
   14918:	675a      	str	r2, [r3, #116]	; 0x74
		if (clipped) {
   1491a:	7dfb      	ldrb	r3, [r7, #23]
   1491c:	2b00      	cmp	r3, #0
   1491e:	d005      	beq.n	1492c <rx_timeout+0x158>
			k_timer_stop(&data->async->rx_timeout_timer);
   14920:	693b      	ldr	r3, [r7, #16]
   14922:	68db      	ldr	r3, [r3, #12]
   14924:	3378      	adds	r3, #120	; 0x78
   14926:	4618      	mov	r0, r3
   14928:	f7ff f88b 	bl	13a42 <k_timer_stop>
	nrf_uarte_int_enable(get_uarte_instance(dev),
   1492c:	68f8      	ldr	r0, [r7, #12]
   1492e:	f7ff fb58 	bl	13fe2 <get_uarte_instance>
   14932:	4603      	mov	r3, r0
   14934:	2110      	movs	r1, #16
   14936:	4618      	mov	r0, r3
   14938:	f7ff f9e5 	bl	13d06 <nrf_uarte_int_enable>
   1493c:	e000      	b.n	14940 <rx_timeout+0x16c>
		return;
   1493e:	bf00      	nop
}
   14940:	3720      	adds	r7, #32
   14942:	46bd      	mov	sp, r7
   14944:	bd80      	pop	{r7, pc}

00014946 <error_isr>:
{
   14946:	b580      	push	{r7, lr}
   14948:	b08a      	sub	sp, #40	; 0x28
   1494a:	af00      	add	r7, sp, #0
   1494c:	6078      	str	r0, [r7, #4]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   1494e:	6878      	ldr	r0, [r7, #4]
   14950:	f7ff fb47 	bl	13fe2 <get_uarte_instance>
   14954:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t err = nrf_uarte_errorsrc_get_and_clear(uarte);
   14956:	6a78      	ldr	r0, [r7, #36]	; 0x24
   14958:	f7ff fa15 	bl	13d86 <nrf_uarte_errorsrc_get_and_clear>
   1495c:	6238      	str	r0, [r7, #32]
	struct uart_event evt = {
   1495e:	f107 030c 	add.w	r3, r7, #12
   14962:	2200      	movs	r2, #0
   14964:	601a      	str	r2, [r3, #0]
   14966:	605a      	str	r2, [r3, #4]
   14968:	609a      	str	r2, [r3, #8]
   1496a:	60da      	str	r2, [r3, #12]
   1496c:	611a      	str	r2, [r3, #16]
   1496e:	2306      	movs	r3, #6
   14970:	733b      	strb	r3, [r7, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   14972:	6a3b      	ldr	r3, [r7, #32]
   14974:	f003 0301 	and.w	r3, r3, #1
   14978:	2b00      	cmp	r3, #0
   1497a:	d113      	bne.n	149a4 <error_isr+0x5e>
   1497c:	6a3b      	ldr	r3, [r7, #32]
   1497e:	f003 0302 	and.w	r3, r3, #2
   14982:	2b00      	cmp	r3, #0
   14984:	d10c      	bne.n	149a0 <error_isr+0x5a>
   14986:	6a3b      	ldr	r3, [r7, #32]
   14988:	f003 0304 	and.w	r3, r3, #4
   1498c:	2b00      	cmp	r3, #0
   1498e:	d105      	bne.n	1499c <error_isr+0x56>
   14990:	6a3b      	ldr	r3, [r7, #32]
   14992:	b2db      	uxtb	r3, r3
   14994:	f003 0308 	and.w	r3, r3, #8
   14998:	b2db      	uxtb	r3, r3
   1499a:	e004      	b.n	149a6 <error_isr+0x60>
   1499c:	2304      	movs	r3, #4
   1499e:	e002      	b.n	149a6 <error_isr+0x60>
   149a0:	2302      	movs	r3, #2
   149a2:	e000      	b.n	149a6 <error_isr+0x60>
   149a4:	2301      	movs	r3, #1
	struct uart_event evt = {
   149a6:	743b      	strb	r3, [r7, #16]
	user_callback(dev, &evt);
   149a8:	f107 030c 	add.w	r3, r7, #12
   149ac:	4619      	mov	r1, r3
   149ae:	6878      	ldr	r0, [r7, #4]
   149b0:	f7ff fddd 	bl	1456e <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   149b4:	6878      	ldr	r0, [r7, #4]
   149b6:	f7ff fec6 	bl	14746 <uarte_nrfx_rx_disable>
}
   149ba:	bf00      	nop
   149bc:	3728      	adds	r7, #40	; 0x28
   149be:	46bd      	mov	sp, r7
   149c0:	bd80      	pop	{r7, pc}

000149c2 <rxstarted_isr>:
{
   149c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   149c4:	b08b      	sub	sp, #44	; 0x2c
   149c6:	af02      	add	r7, sp, #8
   149c8:	6078      	str	r0, [r7, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   149ca:	6878      	ldr	r0, [r7, #4]
   149cc:	f7ff faf3 	bl	13fb6 <get_dev_data>
   149d0:	61f8      	str	r0, [r7, #28]
	struct uart_event evt = {
   149d2:	f107 0308 	add.w	r3, r7, #8
   149d6:	2200      	movs	r2, #0
   149d8:	601a      	str	r2, [r3, #0]
   149da:	605a      	str	r2, [r3, #4]
   149dc:	609a      	str	r2, [r3, #8]
   149de:	60da      	str	r2, [r3, #12]
   149e0:	611a      	str	r2, [r3, #16]
   149e2:	2303      	movs	r3, #3
   149e4:	723b      	strb	r3, [r7, #8]
	user_callback(dev, &evt);
   149e6:	f107 0308 	add.w	r3, r7, #8
   149ea:	4619      	mov	r1, r3
   149ec:	6878      	ldr	r0, [r7, #4]
   149ee:	f7ff fdbe 	bl	1456e <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_MS) {
   149f2:	69fb      	ldr	r3, [r7, #28]
   149f4:	68db      	ldr	r3, [r3, #12]
   149f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   149f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   149fc:	d02e      	beq.n	14a5c <rxstarted_isr+0x9a>
		data->async->rx_timeout_left = data->async->rx_timeout;
   149fe:	69fb      	ldr	r3, [r7, #28]
   14a00:	68da      	ldr	r2, [r3, #12]
   14a02:	69fb      	ldr	r3, [r7, #28]
   14a04:	68db      	ldr	r3, [r3, #12]
   14a06:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
   14a08:	675a      	str	r2, [r3, #116]	; 0x74
		k_timer_start(&data->async->rx_timeout_timer,
   14a0a:	69fb      	ldr	r3, [r7, #28]
   14a0c:	68db      	ldr	r3, [r3, #12]
   14a0e:	f103 0678 	add.w	r6, r3, #120	; 0x78
			      K_MSEC(data->async->rx_timeout_slab),
   14a12:	69fb      	ldr	r3, [r7, #28]
   14a14:	68db      	ldr	r3, [r3, #12]
   14a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   14a18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14a1c:	461a      	mov	r2, r3
   14a1e:	ea4f 73e2 	mov.w	r3, r2, asr #31
   14a22:	4610      	mov	r0, r2
   14a24:	4619      	mov	r1, r3
   14a26:	f7fe fe95 	bl	13754 <k_ms_to_ticks_ceil64>
   14a2a:	4602      	mov	r2, r0
   14a2c:	460b      	mov	r3, r1
   14a2e:	4614      	mov	r4, r2
   14a30:	461d      	mov	r5, r3
			      K_MSEC(data->async->rx_timeout_slab));
   14a32:	69fb      	ldr	r3, [r7, #28]
   14a34:	68db      	ldr	r3, [r3, #12]
   14a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   14a38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14a3c:	461a      	mov	r2, r3
   14a3e:	ea4f 73e2 	mov.w	r3, r2, asr #31
   14a42:	4610      	mov	r0, r2
   14a44:	4619      	mov	r1, r3
   14a46:	f7fe fe85 	bl	13754 <k_ms_to_ticks_ceil64>
   14a4a:	4602      	mov	r2, r0
   14a4c:	460b      	mov	r3, r1
		k_timer_start(&data->async->rx_timeout_timer,
   14a4e:	e9cd 2300 	strd	r2, r3, [sp]
   14a52:	4622      	mov	r2, r4
   14a54:	462b      	mov	r3, r5
   14a56:	4630      	mov	r0, r6
   14a58:	f7fe ffe0 	bl	13a1c <k_timer_start>
}
   14a5c:	bf00      	nop
   14a5e:	3724      	adds	r7, #36	; 0x24
   14a60:	46bd      	mov	sp, r7
   14a62:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014a64 <endrx_isr>:
{
   14a64:	b580      	push	{r7, lr}
   14a66:	b08a      	sub	sp, #40	; 0x28
   14a68:	af00      	add	r7, sp, #0
   14a6a:	6078      	str	r0, [r7, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14a6c:	6878      	ldr	r0, [r7, #4]
   14a6e:	f7ff faa2 	bl	13fb6 <get_dev_data>
   14a72:	6238      	str	r0, [r7, #32]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   14a74:	6878      	ldr	r0, [r7, #4]
   14a76:	f7ff fab4 	bl	13fe2 <get_uarte_instance>
   14a7a:	61f8      	str	r0, [r7, #28]
	data->async->is_in_irq = true;
   14a7c:	6a3b      	ldr	r3, [r7, #32]
   14a7e:	68db      	ldr	r3, [r3, #12]
   14a80:	2201      	movs	r2, #1
   14a82:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
	k_timer_stop(&data->async->rx_timeout_timer);
   14a86:	6a3b      	ldr	r3, [r7, #32]
   14a88:	68db      	ldr	r3, [r3, #12]
   14a8a:	3378      	adds	r3, #120	; 0x78
   14a8c:	4618      	mov	r0, r3
   14a8e:	f7fe ffd8 	bl	13a42 <k_timer_stop>
	const int rx_amount = nrf_uarte_rx_amount_get(uarte) +
   14a92:	69f8      	ldr	r0, [r7, #28]
   14a94:	f7ff fa4b 	bl	13f2e <nrf_uarte_rx_amount_get>
   14a98:	4602      	mov	r2, r0
				data->async->rx_flush_cnt;
   14a9a:	6a3b      	ldr	r3, [r7, #32]
   14a9c:	68db      	ldr	r3, [r3, #12]
   14a9e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	const int rx_amount = nrf_uarte_rx_amount_get(uarte) +
   14aa2:	4413      	add	r3, r2
   14aa4:	61bb      	str	r3, [r7, #24]
	data->async->rx_flush_cnt = 0;
   14aa6:	6a3b      	ldr	r3, [r7, #32]
   14aa8:	68db      	ldr	r3, [r3, #12]
   14aaa:	2200      	movs	r2, #0
   14aac:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	int rx_len = rx_amount - data->async->rx_offset;
   14ab0:	69ba      	ldr	r2, [r7, #24]
   14ab2:	6a3b      	ldr	r3, [r7, #32]
   14ab4:	68db      	ldr	r3, [r3, #12]
   14ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   14ab8:	1ad3      	subs	r3, r2, r3
   14aba:	627b      	str	r3, [r7, #36]	; 0x24
	if (rx_len < 0) {
   14abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14abe:	2b00      	cmp	r3, #0
   14ac0:	da01      	bge.n	14ac6 <endrx_isr+0x62>
		rx_len = 0;
   14ac2:	2300      	movs	r3, #0
   14ac4:	627b      	str	r3, [r7, #36]	; 0x24
	data->async->rx_total_user_byte_cnt += rx_len;
   14ac6:	6a3b      	ldr	r3, [r7, #32]
   14ac8:	68db      	ldr	r3, [r3, #12]
   14aca:	6e99      	ldr	r1, [r3, #104]	; 0x68
   14acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   14ace:	6a3b      	ldr	r3, [r7, #32]
   14ad0:	68db      	ldr	r3, [r3, #12]
   14ad2:	440a      	add	r2, r1
   14ad4:	669a      	str	r2, [r3, #104]	; 0x68
	if (rx_len > 0) {
   14ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14ad8:	2b00      	cmp	r3, #0
   14ada:	dd04      	ble.n	14ae6 <endrx_isr+0x82>
		notify_uart_rx_rdy(dev, rx_len);
   14adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14ade:	4619      	mov	r1, r3
   14ae0:	6878      	ldr	r0, [r7, #4]
   14ae2:	f7ff fd5f 	bl	145a4 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   14ae6:	6a3b      	ldr	r3, [r7, #32]
   14ae8:	68db      	ldr	r3, [r3, #12]
   14aea:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   14aee:	f083 0301 	eor.w	r3, r3, #1
   14af2:	b2db      	uxtb	r3, r3
   14af4:	2b00      	cmp	r3, #0
   14af6:	d005      	beq.n	14b04 <endrx_isr+0xa0>
		data->async->is_in_irq = false;
   14af8:	6a3b      	ldr	r3, [r7, #32]
   14afa:	68db      	ldr	r3, [r3, #12]
   14afc:	2200      	movs	r2, #0
   14afe:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
		return;
   14b02:	e055      	b.n	14bb0 <endrx_isr+0x14c>
	notify_rx_buf_release(dev, &data->async->rx_buf, false);
   14b04:	6a3b      	ldr	r3, [r7, #32]
   14b06:	68db      	ldr	r3, [r3, #12]
   14b08:	3350      	adds	r3, #80	; 0x50
   14b0a:	2200      	movs	r2, #0
   14b0c:	4619      	mov	r1, r3
   14b0e:	6878      	ldr	r0, [r7, #4]
   14b10:	f7ff fd6f 	bl	145f2 <notify_rx_buf_release>
	__asm__ volatile(
   14b14:	f04f 0320 	mov.w	r3, #32
   14b18:	f3ef 8211 	mrs	r2, BASEPRI
   14b1c:	f383 8811 	msr	BASEPRI, r3
   14b20:	f3bf 8f6f 	isb	sy
   14b24:	613a      	str	r2, [r7, #16]
   14b26:	60fb      	str	r3, [r7, #12]
	return key;
   14b28:	693b      	ldr	r3, [r7, #16]
	int key = irq_lock();
   14b2a:	617b      	str	r3, [r7, #20]
	if (data->async->rx_next_buf) {
   14b2c:	6a3b      	ldr	r3, [r7, #32]
   14b2e:	68db      	ldr	r3, [r3, #12]
   14b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   14b32:	2b00      	cmp	r3, #0
   14b34:	d02b      	beq.n	14b8e <endrx_isr+0x12a>
		data->async->rx_buf = data->async->rx_next_buf;
   14b36:	6a3b      	ldr	r3, [r7, #32]
   14b38:	68da      	ldr	r2, [r3, #12]
   14b3a:	6a3b      	ldr	r3, [r7, #32]
   14b3c:	68db      	ldr	r3, [r3, #12]
   14b3e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
   14b40:	651a      	str	r2, [r3, #80]	; 0x50
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   14b42:	6a3b      	ldr	r3, [r7, #32]
   14b44:	68da      	ldr	r2, [r3, #12]
   14b46:	6a3b      	ldr	r3, [r7, #32]
   14b48:	68db      	ldr	r3, [r3, #12]
   14b4a:	6e12      	ldr	r2, [r2, #96]	; 0x60
   14b4c:	655a      	str	r2, [r3, #84]	; 0x54
		data->async->rx_next_buf = NULL;
   14b4e:	6a3b      	ldr	r3, [r7, #32]
   14b50:	68db      	ldr	r3, [r3, #12]
   14b52:	2200      	movs	r2, #0
   14b54:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf_len = 0;
   14b56:	6a3b      	ldr	r3, [r7, #32]
   14b58:	68db      	ldr	r3, [r3, #12]
   14b5a:	2200      	movs	r2, #0
   14b5c:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_offset = 0;
   14b5e:	6a3b      	ldr	r3, [r7, #32]
   14b60:	68db      	ldr	r3, [r3, #12]
   14b62:	2200      	movs	r2, #0
   14b64:	659a      	str	r2, [r3, #88]	; 0x58
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   14b66:	f44f 71a6 	mov.w	r1, #332	; 0x14c
   14b6a:	69f8      	ldr	r0, [r7, #28]
   14b6c:	f7ff f884 	bl	13c78 <nrf_uarte_event_check>
   14b70:	4603      	mov	r3, r0
   14b72:	f083 0301 	eor.w	r3, r3, #1
   14b76:	b2db      	uxtb	r3, r3
   14b78:	2b00      	cmp	r3, #0
   14b7a:	d003      	beq.n	14b84 <endrx_isr+0x120>
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
   14b7c:	2100      	movs	r1, #0
   14b7e:	69f8      	ldr	r0, [r7, #28]
   14b80:	f7ff f95f 	bl	13e42 <nrf_uarte_task_trigger>
		nrf_uarte_shorts_disable(uarte, NRF_UARTE_SHORT_ENDRX_STARTRX);
   14b84:	2120      	movs	r1, #32
   14b86:	69f8      	ldr	r0, [r7, #28]
   14b88:	f7ff f8aa 	bl	13ce0 <nrf_uarte_shorts_disable>
   14b8c:	e003      	b.n	14b96 <endrx_isr+0x132>
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPRX);
   14b8e:	2104      	movs	r1, #4
   14b90:	69f8      	ldr	r0, [r7, #28]
   14b92:	f7ff f956 	bl	13e42 <nrf_uarte_task_trigger>
	irq_unlock(key);
   14b96:	697b      	ldr	r3, [r7, #20]
   14b98:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
   14b9a:	68bb      	ldr	r3, [r7, #8]
   14b9c:	f383 8811 	msr	BASEPRI, r3
   14ba0:	f3bf 8f6f 	isb	sy
}
   14ba4:	bf00      	nop
	data->async->is_in_irq = false;
   14ba6:	6a3b      	ldr	r3, [r7, #32]
   14ba8:	68db      	ldr	r3, [r3, #12]
   14baa:	2200      	movs	r2, #0
   14bac:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
}
   14bb0:	3728      	adds	r7, #40	; 0x28
   14bb2:	46bd      	mov	sp, r7
   14bb4:	bd80      	pop	{r7, pc}

00014bb6 <async_uart_release>:
{
   14bb6:	b590      	push	{r4, r7, lr}
   14bb8:	b089      	sub	sp, #36	; 0x24
   14bba:	af00      	add	r7, sp, #0
   14bbc:	6078      	str	r0, [r7, #4]
   14bbe:	6039      	str	r1, [r7, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14bc0:	6878      	ldr	r0, [r7, #4]
   14bc2:	f7ff f9f8 	bl	13fb6 <get_dev_data>
   14bc6:	61f8      	str	r0, [r7, #28]
	__asm__ volatile(
   14bc8:	f04f 0320 	mov.w	r3, #32
   14bcc:	f3ef 8211 	mrs	r2, BASEPRI
   14bd0:	f383 8811 	msr	BASEPRI, r3
   14bd4:	f3bf 8f6f 	isb	sy
   14bd8:	617a      	str	r2, [r7, #20]
   14bda:	613b      	str	r3, [r7, #16]
	return key;
   14bdc:	697b      	ldr	r3, [r7, #20]
	int key = irq_lock();
   14bde:	61bb      	str	r3, [r7, #24]
	data->async->low_power_mask &= ~dir_mask;
   14be0:	69fb      	ldr	r3, [r7, #28]
   14be2:	68db      	ldr	r3, [r3, #12]
   14be4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   14be8:	461a      	mov	r2, r3
   14bea:	683b      	ldr	r3, [r7, #0]
   14bec:	43db      	mvns	r3, r3
   14bee:	401a      	ands	r2, r3
   14bf0:	69fb      	ldr	r3, [r7, #28]
   14bf2:	68db      	ldr	r3, [r3, #12]
   14bf4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	if (!data->async->low_power_mask) {
   14bf8:	69fb      	ldr	r3, [r7, #28]
   14bfa:	68db      	ldr	r3, [r3, #12]
   14bfc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   14c00:	2b00      	cmp	r3, #0
   14c02:	d112      	bne.n	14c2a <async_uart_release+0x74>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   14c04:	683b      	ldr	r3, [r7, #0]
   14c06:	2b02      	cmp	r3, #2
   14c08:	d10c      	bne.n	14c24 <async_uart_release+0x6e>
				rx_flush(dev, data->async->rx_flush_buffer,
   14c0a:	69fb      	ldr	r3, [r7, #28]
   14c0c:	68db      	ldr	r3, [r3, #12]
   14c0e:	f103 01bc 	add.w	r1, r3, #188	; 0xbc
			data->async->rx_flush_cnt =
   14c12:	69fb      	ldr	r3, [r7, #28]
   14c14:	68dc      	ldr	r4, [r3, #12]
				rx_flush(dev, data->async->rx_flush_buffer,
   14c16:	2205      	movs	r2, #5
   14c18:	6878      	ldr	r0, [r7, #4]
   14c1a:	f7f4 f929 	bl	8e70 <rx_flush>
   14c1e:	4603      	mov	r3, r0
			data->async->rx_flush_cnt =
   14c20:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		uart_disable(dev);
   14c24:	6878      	ldr	r0, [r7, #4]
   14c26:	f7ff fbb8 	bl	1439a <uart_disable>
	irq_unlock(key);
   14c2a:	69bb      	ldr	r3, [r7, #24]
   14c2c:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
   14c2e:	68fb      	ldr	r3, [r7, #12]
   14c30:	f383 8811 	msr	BASEPRI, r3
   14c34:	f3bf 8f6f 	isb	sy
}
   14c38:	bf00      	nop
}
   14c3a:	bf00      	nop
   14c3c:	3724      	adds	r7, #36	; 0x24
   14c3e:	46bd      	mov	sp, r7
   14c40:	bd90      	pop	{r4, r7, pc}

00014c42 <rxto_isr>:
{
   14c42:	b580      	push	{r7, lr}
   14c44:	b084      	sub	sp, #16
   14c46:	af00      	add	r7, sp, #0
   14c48:	6078      	str	r0, [r7, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14c4a:	6878      	ldr	r0, [r7, #4]
   14c4c:	f7ff f9b3 	bl	13fb6 <get_dev_data>
   14c50:	60f8      	str	r0, [r7, #12]
	notify_rx_buf_release(dev, &data->async->rx_buf, true);
   14c52:	68fb      	ldr	r3, [r7, #12]
   14c54:	68db      	ldr	r3, [r3, #12]
   14c56:	3350      	adds	r3, #80	; 0x50
   14c58:	2201      	movs	r2, #1
   14c5a:	4619      	mov	r1, r3
   14c5c:	6878      	ldr	r0, [r7, #4]
   14c5e:	f7ff fcc8 	bl	145f2 <notify_rx_buf_release>
	notify_rx_buf_release(dev, &data->async->rx_next_buf, true);
   14c62:	68fb      	ldr	r3, [r7, #12]
   14c64:	68db      	ldr	r3, [r3, #12]
   14c66:	335c      	adds	r3, #92	; 0x5c
   14c68:	2201      	movs	r2, #1
   14c6a:	4619      	mov	r1, r3
   14c6c:	6878      	ldr	r0, [r7, #4]
   14c6e:	f7ff fcc0 	bl	145f2 <notify_rx_buf_release>
	if (!data->async->rx_enabled) {
   14c72:	68fb      	ldr	r3, [r7, #12]
   14c74:	68db      	ldr	r3, [r3, #12]
   14c76:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   14c7a:	f083 0301 	eor.w	r3, r3, #1
   14c7e:	b2db      	uxtb	r3, r3
   14c80:	2b00      	cmp	r3, #0
   14c82:	d004      	beq.n	14c8e <rxto_isr+0x4c>
		(void)rx_flush(dev, NULL, 0);
   14c84:	2200      	movs	r2, #0
   14c86:	2100      	movs	r1, #0
   14c88:	6878      	ldr	r0, [r7, #4]
   14c8a:	f7f4 f8f1 	bl	8e70 <rx_flush>
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   14c8e:	6878      	ldr	r0, [r7, #4]
   14c90:	f7ff f99c 	bl	13fcc <get_dev_config>
   14c94:	4603      	mov	r3, r0
   14c96:	685b      	ldr	r3, [r3, #4]
   14c98:	f003 0310 	and.w	r3, r3, #16
   14c9c:	2b00      	cmp	r3, #0
   14c9e:	d003      	beq.n	14ca8 <rxto_isr+0x66>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   14ca0:	2102      	movs	r1, #2
   14ca2:	6878      	ldr	r0, [r7, #4]
   14ca4:	f7ff ff87 	bl	14bb6 <async_uart_release>
	notify_rx_disable(dev);
   14ca8:	6878      	ldr	r0, [r7, #4]
   14caa:	f7ff fcca 	bl	14642 <notify_rx_disable>
}
   14cae:	bf00      	nop
   14cb0:	3710      	adds	r7, #16
   14cb2:	46bd      	mov	sp, r7
   14cb4:	bd80      	pop	{r7, pc}

00014cb6 <txstopped_isr>:
{
   14cb6:	b580      	push	{r7, lr}
   14cb8:	b092      	sub	sp, #72	; 0x48
   14cba:	af00      	add	r7, sp, #0
   14cbc:	6078      	str	r0, [r7, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14cbe:	6878      	ldr	r0, [r7, #4]
   14cc0:	f7ff f979 	bl	13fb6 <get_dev_data>
   14cc4:	6478      	str	r0, [r7, #68]	; 0x44
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   14cc6:	6878      	ldr	r0, [r7, #4]
   14cc8:	f7ff f98b 	bl	13fe2 <get_uarte_instance>
   14ccc:	6438      	str	r0, [r7, #64]	; 0x40
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   14cce:	6878      	ldr	r0, [r7, #4]
   14cd0:	f7ff f97c 	bl	13fcc <get_dev_config>
   14cd4:	4603      	mov	r3, r0
   14cd6:	685b      	ldr	r3, [r3, #4]
   14cd8:	f003 0310 	and.w	r3, r3, #16
   14cdc:	2b00      	cmp	r3, #0
   14cde:	d00e      	beq.n	14cfe <txstopped_isr+0x48>
		nrf_uarte_int_disable(uarte, NRF_UARTE_INT_TXSTOPPED_MASK);
   14ce0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   14ce4:	6c38      	ldr	r0, [r7, #64]	; 0x40
   14ce6:	f7ff f82b 	bl	13d40 <nrf_uarte_int_disable>
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   14cea:	2101      	movs	r1, #1
   14cec:	6878      	ldr	r0, [r7, #4]
   14cee:	f7ff ff62 	bl	14bb6 <async_uart_release>
		if (!data->async->tx_size) {
   14cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14cf4:	68db      	ldr	r3, [r3, #12]
   14cf6:	68db      	ldr	r3, [r3, #12]
   14cf8:	2b00      	cmp	r3, #0
   14cfa:	f000 8099 	beq.w	14e30 <txstopped_isr+0x17a>
	if (!data->async->tx_buf) {
   14cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14d00:	68db      	ldr	r3, [r3, #12]
   14d02:	689b      	ldr	r3, [r3, #8]
   14d04:	2b00      	cmp	r3, #0
   14d06:	d13c      	bne.n	14d82 <txstopped_isr+0xcc>
		if (data->async->pend_tx_buf) {
   14d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14d0a:	68db      	ldr	r3, [r3, #12]
   14d0c:	691b      	ldr	r3, [r3, #16]
   14d0e:	2b00      	cmp	r3, #0
   14d10:	f000 8090 	beq.w	14e34 <txstopped_isr+0x17e>
	__asm__ volatile(
   14d14:	f04f 0320 	mov.w	r3, #32
   14d18:	f3ef 8211 	mrs	r2, BASEPRI
   14d1c:	f383 8811 	msr	BASEPRI, r3
   14d20:	f3bf 8f6f 	isb	sy
   14d24:	637a      	str	r2, [r7, #52]	; 0x34
   14d26:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
   14d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
			key = irq_lock();
   14d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (nrf_uarte_event_check(uarte,
   14d2c:	f44f 71ac 	mov.w	r1, #344	; 0x158
   14d30:	6c38      	ldr	r0, [r7, #64]	; 0x40
   14d32:	f7fe ffa1 	bl	13c78 <nrf_uarte_event_check>
   14d36:	4603      	mov	r3, r0
   14d38:	2b00      	cmp	r3, #0
   14d3a:	d019      	beq.n	14d70 <txstopped_isr+0xba>
				data->async->tx_buf = data->async->pend_tx_buf;
   14d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14d3e:	68da      	ldr	r2, [r3, #12]
   14d40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14d42:	68db      	ldr	r3, [r3, #12]
   14d44:	6912      	ldr	r2, [r2, #16]
   14d46:	609a      	str	r2, [r3, #8]
				data->async->pend_tx_buf = NULL;
   14d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14d4a:	68db      	ldr	r3, [r3, #12]
   14d4c:	2200      	movs	r2, #0
   14d4e:	611a      	str	r2, [r3, #16]
				data->async->tx_amount = -1;
   14d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14d52:	68db      	ldr	r3, [r3, #12]
   14d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14d58:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				tx_start(dev, data->async->tx_buf,
   14d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14d5e:	68db      	ldr	r3, [r3, #12]
   14d60:	6899      	ldr	r1, [r3, #8]
					 data->async->tx_size);
   14d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14d64:	68db      	ldr	r3, [r3, #12]
				tx_start(dev, data->async->tx_buf,
   14d66:	68db      	ldr	r3, [r3, #12]
   14d68:	461a      	mov	r2, r3
   14d6a:	6878      	ldr	r0, [r7, #4]
   14d6c:	f7ff fae2 	bl	14334 <tx_start>
			irq_unlock(key);
   14d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14d72:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   14d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14d76:	f383 8811 	msr	BASEPRI, r3
   14d7a:	f3bf 8f6f 	isb	sy
}
   14d7e:	bf00      	nop
		return;
   14d80:	e058      	b.n	14e34 <txstopped_isr+0x17e>
	k_timer_stop(&data->async->tx_timeout_timer);
   14d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14d84:	68db      	ldr	r3, [r3, #12]
   14d86:	3318      	adds	r3, #24
   14d88:	4618      	mov	r0, r3
   14d8a:	f7fe fe5a 	bl	13a42 <k_timer_stop>
	__asm__ volatile(
   14d8e:	f04f 0320 	mov.w	r3, #32
   14d92:	f3ef 8211 	mrs	r2, BASEPRI
   14d96:	f383 8811 	msr	BASEPRI, r3
   14d9a:	f3bf 8f6f 	isb	sy
   14d9e:	62ba      	str	r2, [r7, #40]	; 0x28
   14da0:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   14da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
	key = irq_lock();
   14da4:	63fb      	str	r3, [r7, #60]	; 0x3c
	size_t amount = (data->async->tx_amount >= 0) ?
   14da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14da8:	68db      	ldr	r3, [r3, #12]
   14daa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   14dae:	2b00      	cmp	r3, #0
   14db0:	db04      	blt.n	14dbc <txstopped_isr+0x106>
   14db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14db4:	68db      	ldr	r3, [r3, #12]
   14db6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   14dba:	e003      	b.n	14dc4 <txstopped_isr+0x10e>
   14dbc:	6c38      	ldr	r0, [r7, #64]	; 0x40
   14dbe:	f7ff f897 	bl	13ef0 <nrf_uarte_tx_amount_get>
   14dc2:	4603      	mov	r3, r0
	size_t amount = (data->async->tx_amount >= 0) ?
   14dc4:	63bb      	str	r3, [r7, #56]	; 0x38
	irq_unlock(key);
   14dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14dc8:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   14dca:	6a3b      	ldr	r3, [r7, #32]
   14dcc:	f383 8811 	msr	BASEPRI, r3
   14dd0:	f3bf 8f6f 	isb	sy
}
   14dd4:	bf00      	nop
	struct uart_event evt = {
   14dd6:	f107 030c 	add.w	r3, r7, #12
   14dda:	2200      	movs	r2, #0
   14ddc:	601a      	str	r2, [r3, #0]
   14dde:	605a      	str	r2, [r3, #4]
   14de0:	609a      	str	r2, [r3, #8]
   14de2:	60da      	str	r2, [r3, #12]
   14de4:	611a      	str	r2, [r3, #16]
		.data.tx.buf = data->async->tx_buf,
   14de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14de8:	68db      	ldr	r3, [r3, #12]
   14dea:	689b      	ldr	r3, [r3, #8]
	struct uart_event evt = {
   14dec:	613b      	str	r3, [r7, #16]
   14dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   14df0:	617b      	str	r3, [r7, #20]
	if (amount == data->async->tx_size) {
   14df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14df4:	68db      	ldr	r3, [r3, #12]
   14df6:	68db      	ldr	r3, [r3, #12]
   14df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   14dfa:	429a      	cmp	r2, r3
   14dfc:	d102      	bne.n	14e04 <txstopped_isr+0x14e>
		evt.type = UART_TX_DONE;
   14dfe:	2300      	movs	r3, #0
   14e00:	733b      	strb	r3, [r7, #12]
   14e02:	e001      	b.n	14e08 <txstopped_isr+0x152>
		evt.type = UART_TX_ABORTED;
   14e04:	2301      	movs	r3, #1
   14e06:	733b      	strb	r3, [r7, #12]
	nrf_uarte_int_disable(uarte, NRF_UARTE_INT_TXSTOPPED_MASK);
   14e08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   14e0c:	6c38      	ldr	r0, [r7, #64]	; 0x40
   14e0e:	f7fe ff97 	bl	13d40 <nrf_uarte_int_disable>
	data->async->tx_buf = NULL;
   14e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14e14:	68db      	ldr	r3, [r3, #12]
   14e16:	2200      	movs	r2, #0
   14e18:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
   14e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14e1c:	68db      	ldr	r3, [r3, #12]
   14e1e:	2200      	movs	r2, #0
   14e20:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
   14e22:	f107 030c 	add.w	r3, r7, #12
   14e26:	4619      	mov	r1, r3
   14e28:	6878      	ldr	r0, [r7, #4]
   14e2a:	f7ff fba0 	bl	1456e <user_callback>
   14e2e:	e002      	b.n	14e36 <txstopped_isr+0x180>
			return;
   14e30:	bf00      	nop
   14e32:	e000      	b.n	14e36 <txstopped_isr+0x180>
		return;
   14e34:	bf00      	nop
}
   14e36:	3748      	adds	r7, #72	; 0x48
   14e38:	46bd      	mov	sp, r7
   14e3a:	bd80      	pop	{r7, pc}

00014e3c <uarte_nrfx_isr_async>:
{
   14e3c:	b580      	push	{r7, lr}
   14e3e:	b084      	sub	sp, #16
   14e40:	af00      	add	r7, sp, #0
   14e42:	6078      	str	r0, [r7, #4]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   14e44:	6878      	ldr	r0, [r7, #4]
   14e46:	f7ff f8cc 	bl	13fe2 <get_uarte_instance>
   14e4a:	60f8      	str	r0, [r7, #12]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   14e4c:	6878      	ldr	r0, [r7, #4]
   14e4e:	f7ff f8b2 	bl	13fb6 <get_dev_data>
   14e52:	60b8      	str	r0, [r7, #8]
	if (!hw_rx_counting_enabled(data)
   14e54:	68b8      	ldr	r0, [r7, #8]
   14e56:	f7ff fa11 	bl	1427c <hw_rx_counting_enabled>
   14e5a:	4603      	mov	r3, r0
   14e5c:	f083 0301 	eor.w	r3, r3, #1
   14e60:	b2db      	uxtb	r3, r3
   14e62:	2b00      	cmp	r3, #0
   14e64:	d014      	beq.n	14e90 <uarte_nrfx_isr_async+0x54>
	    && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXDRDY)) {
   14e66:	f44f 7184 	mov.w	r1, #264	; 0x108
   14e6a:	68f8      	ldr	r0, [r7, #12]
   14e6c:	f7fe ff04 	bl	13c78 <nrf_uarte_event_check>
   14e70:	4603      	mov	r3, r0
   14e72:	2b00      	cmp	r3, #0
   14e74:	d00c      	beq.n	14e90 <uarte_nrfx_isr_async+0x54>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_RXDRDY);
   14e76:	f44f 7184 	mov.w	r1, #264	; 0x108
   14e7a:	68f8      	ldr	r0, [r7, #12]
   14e7c:	f7fe fee7 	bl	13c4e <nrf_uarte_event_clear>
		data->async->rx_cnt.cnt++;
   14e80:	68bb      	ldr	r3, [r7, #8]
   14e82:	68db      	ldr	r3, [r3, #12]
   14e84:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
   14e88:	3201      	adds	r2, #1
   14e8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		return;
   14e8e:	e082      	b.n	14f96 <uarte_nrfx_isr_async+0x15a>
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   14e90:	f44f 7192 	mov.w	r1, #292	; 0x124
   14e94:	68f8      	ldr	r0, [r7, #12]
   14e96:	f7fe feef 	bl	13c78 <nrf_uarte_event_check>
   14e9a:	4603      	mov	r3, r0
   14e9c:	2b00      	cmp	r3, #0
   14e9e:	d007      	beq.n	14eb0 <uarte_nrfx_isr_async+0x74>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ERROR);
   14ea0:	f44f 7192 	mov.w	r1, #292	; 0x124
   14ea4:	68f8      	ldr	r0, [r7, #12]
   14ea6:	f7fe fed2 	bl	13c4e <nrf_uarte_event_clear>
		error_isr(dev);
   14eaa:	6878      	ldr	r0, [r7, #4]
   14eac:	f7ff fd4b 	bl	14946 <error_isr>
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   14eb0:	f44f 7188 	mov.w	r1, #272	; 0x110
   14eb4:	68f8      	ldr	r0, [r7, #12]
   14eb6:	f7fe fedf 	bl	13c78 <nrf_uarte_event_check>
   14eba:	4603      	mov	r3, r0
   14ebc:	2b00      	cmp	r3, #0
   14ebe:	d00e      	beq.n	14ede <uarte_nrfx_isr_async+0xa2>
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   14ec0:	2110      	movs	r1, #16
   14ec2:	68f8      	ldr	r0, [r7, #12]
   14ec4:	f7fe ff2d 	bl	13d22 <nrf_uarte_int_enable_check>
   14ec8:	4603      	mov	r3, r0
   14eca:	2b00      	cmp	r3, #0
   14ecc:	d007      	beq.n	14ede <uarte_nrfx_isr_async+0xa2>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   14ece:	f44f 7188 	mov.w	r1, #272	; 0x110
   14ed2:	68f8      	ldr	r0, [r7, #12]
   14ed4:	f7fe febb 	bl	13c4e <nrf_uarte_event_clear>
		endrx_isr(dev);
   14ed8:	6878      	ldr	r0, [r7, #4]
   14eda:	f7ff fdc3 	bl	14a64 <endrx_isr>
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   14ede:	f44f 71a6 	mov.w	r1, #332	; 0x14c
   14ee2:	68f8      	ldr	r0, [r7, #12]
   14ee4:	f7fe fec8 	bl	13c78 <nrf_uarte_event_check>
   14ee8:	4603      	mov	r3, r0
   14eea:	2b00      	cmp	r3, #0
   14eec:	d012      	beq.n	14f14 <uarte_nrfx_isr_async+0xd8>
	    !nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   14eee:	f44f 7188 	mov.w	r1, #272	; 0x110
   14ef2:	68f8      	ldr	r0, [r7, #12]
   14ef4:	f7fe fec0 	bl	13c78 <nrf_uarte_event_check>
   14ef8:	4603      	mov	r3, r0
   14efa:	f083 0301 	eor.w	r3, r3, #1
   14efe:	b2db      	uxtb	r3, r3
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   14f00:	2b00      	cmp	r3, #0
   14f02:	d007      	beq.n	14f14 <uarte_nrfx_isr_async+0xd8>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_RXSTARTED);
   14f04:	f44f 71a6 	mov.w	r1, #332	; 0x14c
   14f08:	68f8      	ldr	r0, [r7, #12]
   14f0a:	f7fe fea0 	bl	13c4e <nrf_uarte_event_clear>
		rxstarted_isr(dev);
   14f0e:	6878      	ldr	r0, [r7, #4]
   14f10:	f7ff fd57 	bl	149c2 <rxstarted_isr>
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   14f14:	f44f 71a2 	mov.w	r1, #324	; 0x144
   14f18:	68f8      	ldr	r0, [r7, #12]
   14f1a:	f7fe fead 	bl	13c78 <nrf_uarte_event_check>
   14f1e:	4603      	mov	r3, r0
   14f20:	2b00      	cmp	r3, #0
   14f22:	d012      	beq.n	14f4a <uarte_nrfx_isr_async+0x10e>
	    !nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   14f24:	f44f 7188 	mov.w	r1, #272	; 0x110
   14f28:	68f8      	ldr	r0, [r7, #12]
   14f2a:	f7fe fea5 	bl	13c78 <nrf_uarte_event_check>
   14f2e:	4603      	mov	r3, r0
   14f30:	f083 0301 	eor.w	r3, r3, #1
   14f34:	b2db      	uxtb	r3, r3
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   14f36:	2b00      	cmp	r3, #0
   14f38:	d007      	beq.n	14f4a <uarte_nrfx_isr_async+0x10e>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_RXTO);
   14f3a:	f44f 71a2 	mov.w	r1, #324	; 0x144
   14f3e:	68f8      	ldr	r0, [r7, #12]
   14f40:	f7fe fe85 	bl	13c4e <nrf_uarte_event_clear>
		rxto_isr(dev);
   14f44:	6878      	ldr	r0, [r7, #4]
   14f46:	f7ff fe7c 	bl	14c42 <rxto_isr>
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   14f4a:	f44f 7190 	mov.w	r1, #288	; 0x120
   14f4e:	68f8      	ldr	r0, [r7, #12]
   14f50:	f7fe fe92 	bl	13c78 <nrf_uarte_event_check>
   14f54:	4603      	mov	r3, r0
   14f56:	2b00      	cmp	r3, #0
   14f58:	d00a      	beq.n	14f70 <uarte_nrfx_isr_async+0x134>
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   14f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
   14f5e:	68f8      	ldr	r0, [r7, #12]
   14f60:	f7fe fedf 	bl	13d22 <nrf_uarte_int_enable_check>
   14f64:	4603      	mov	r3, r0
   14f66:	2b00      	cmp	r3, #0
   14f68:	d002      	beq.n	14f70 <uarte_nrfx_isr_async+0x134>
		endtx_isr(dev);
   14f6a:	6878      	ldr	r0, [r7, #4]
   14f6c:	f7ff f847 	bl	13ffe <endtx_isr>
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   14f70:	f44f 71ac 	mov.w	r1, #344	; 0x158
   14f74:	68f8      	ldr	r0, [r7, #12]
   14f76:	f7fe fe7f 	bl	13c78 <nrf_uarte_event_check>
   14f7a:	4603      	mov	r3, r0
   14f7c:	2b00      	cmp	r3, #0
   14f7e:	d00a      	beq.n	14f96 <uarte_nrfx_isr_async+0x15a>
	    && nrf_uarte_int_enable_check(uarte,
   14f80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   14f84:	68f8      	ldr	r0, [r7, #12]
   14f86:	f7fe fecc 	bl	13d22 <nrf_uarte_int_enable_check>
   14f8a:	4603      	mov	r3, r0
   14f8c:	2b00      	cmp	r3, #0
   14f8e:	d002      	beq.n	14f96 <uarte_nrfx_isr_async+0x15a>
		txstopped_isr(dev);
   14f90:	6878      	ldr	r0, [r7, #4]
   14f92:	f7ff fe90 	bl	14cb6 <txstopped_isr>
}
   14f96:	3710      	adds	r7, #16
   14f98:	46bd      	mov	sp, r7
   14f9a:	bd80      	pop	{r7, pc}

00014f9c <uarte_nrfx_poll_in>:
{
   14f9c:	b580      	push	{r7, lr}
   14f9e:	b084      	sub	sp, #16
   14fa0:	af00      	add	r7, sp, #0
   14fa2:	6078      	str	r0, [r7, #4]
   14fa4:	6039      	str	r1, [r7, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   14fa6:	6878      	ldr	r0, [r7, #4]
   14fa8:	f7ff f805 	bl	13fb6 <get_dev_data>
   14fac:	60f8      	str	r0, [r7, #12]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   14fae:	6878      	ldr	r0, [r7, #4]
   14fb0:	f7ff f817 	bl	13fe2 <get_uarte_instance>
   14fb4:	60b8      	str	r0, [r7, #8]
	if (data->async) {
   14fb6:	68fb      	ldr	r3, [r7, #12]
   14fb8:	68db      	ldr	r3, [r3, #12]
   14fba:	2b00      	cmp	r3, #0
   14fbc:	d002      	beq.n	14fc4 <uarte_nrfx_poll_in+0x28>
		return -ENOTSUP;
   14fbe:	f06f 0385 	mvn.w	r3, #133	; 0x85
   14fc2:	e01b      	b.n	14ffc <uarte_nrfx_poll_in+0x60>
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   14fc4:	f44f 7188 	mov.w	r1, #272	; 0x110
   14fc8:	68b8      	ldr	r0, [r7, #8]
   14fca:	f7fe fe55 	bl	13c78 <nrf_uarte_event_check>
   14fce:	4603      	mov	r3, r0
   14fd0:	f083 0301 	eor.w	r3, r3, #1
   14fd4:	b2db      	uxtb	r3, r3
   14fd6:	2b00      	cmp	r3, #0
   14fd8:	d002      	beq.n	14fe0 <uarte_nrfx_poll_in+0x44>
		return -1;
   14fda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14fde:	e00d      	b.n	14ffc <uarte_nrfx_poll_in+0x60>
	*c = data->rx_data;
   14fe0:	68fb      	ldr	r3, [r7, #12]
   14fe2:	7d5a      	ldrb	r2, [r3, #21]
   14fe4:	683b      	ldr	r3, [r7, #0]
   14fe6:	701a      	strb	r2, [r3, #0]
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   14fe8:	f44f 7188 	mov.w	r1, #272	; 0x110
   14fec:	68b8      	ldr	r0, [r7, #8]
   14fee:	f7fe fe2e 	bl	13c4e <nrf_uarte_event_clear>
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
   14ff2:	2100      	movs	r1, #0
   14ff4:	68b8      	ldr	r0, [r7, #8]
   14ff6:	f7fe ff24 	bl	13e42 <nrf_uarte_task_trigger>
	return 0;
   14ffa:	2300      	movs	r3, #0
}
   14ffc:	4618      	mov	r0, r3
   14ffe:	3710      	adds	r7, #16
   15000:	46bd      	mov	sp, r7
   15002:	bd80      	pop	{r7, pc}

00015004 <uarte_nrfx_poll_out>:
{
   15004:	b580      	push	{r7, lr}
   15006:	b08a      	sub	sp, #40	; 0x28
   15008:	af00      	add	r7, sp, #0
   1500a:	6078      	str	r0, [r7, #4]
   1500c:	460b      	mov	r3, r1
   1500e:	70fb      	strb	r3, [r7, #3]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   15010:	6878      	ldr	r0, [r7, #4]
   15012:	f7fe ffd0 	bl	13fb6 <get_dev_data>
   15016:	6238      	str	r0, [r7, #32]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15018:	f000 fde7 	bl	15bea <k_is_in_isr>
   1501c:	4603      	mov	r3, r0
   1501e:	2b00      	cmp	r3, #0
   15020:	d104      	bne.n	1502c <uarte_nrfx_poll_out+0x28>
   15022:	f7f3 fadd 	bl	85e0 <k_is_pre_kernel>
   15026:	4603      	mov	r3, r0
   15028:	2b00      	cmp	r3, #0
   1502a:	d001      	beq.n	15030 <uarte_nrfx_poll_out+0x2c>
   1502c:	2301      	movs	r3, #1
   1502e:	e000      	b.n	15032 <uarte_nrfx_poll_out+0x2e>
   15030:	2300      	movs	r3, #0
   15032:	77fb      	strb	r3, [r7, #31]
   15034:	7ffb      	ldrb	r3, [r7, #31]
   15036:	f003 0301 	and.w	r3, r3, #1
   1503a:	77fb      	strb	r3, [r7, #31]
	if (isr_mode) {
   1503c:	7ffb      	ldrb	r3, [r7, #31]
   1503e:	2b00      	cmp	r3, #0
   15040:	d036      	beq.n	150b0 <uarte_nrfx_poll_out+0xac>
	__asm__ volatile(
   15042:	f04f 0320 	mov.w	r3, #32
   15046:	f3ef 8211 	mrs	r2, BASEPRI
   1504a:	f383 8811 	msr	BASEPRI, r3
   1504e:	f3bf 8f6f 	isb	sy
   15052:	61ba      	str	r2, [r7, #24]
   15054:	617b      	str	r3, [r7, #20]
	return key;
   15056:	69bb      	ldr	r3, [r7, #24]
			key = irq_lock();
   15058:	627b      	str	r3, [r7, #36]	; 0x24
			if (is_tx_ready(dev)) {
   1505a:	6878      	ldr	r0, [r7, #4]
   1505c:	f7ff f899 	bl	14192 <is_tx_ready>
   15060:	4603      	mov	r3, r0
   15062:	2b00      	cmp	r3, #0
   15064:	d01b      	beq.n	1509e <uarte_nrfx_poll_out+0x9a>
				if (data->async && data->async->tx_size &&
   15066:	6a3b      	ldr	r3, [r7, #32]
   15068:	68db      	ldr	r3, [r3, #12]
   1506a:	2b00      	cmp	r3, #0
   1506c:	d025      	beq.n	150ba <uarte_nrfx_poll_out+0xb6>
   1506e:	6a3b      	ldr	r3, [r7, #32]
   15070:	68db      	ldr	r3, [r3, #12]
   15072:	68db      	ldr	r3, [r3, #12]
   15074:	2b00      	cmp	r3, #0
   15076:	d020      	beq.n	150ba <uarte_nrfx_poll_out+0xb6>
					data->async->tx_amount < 0) {
   15078:	6a3b      	ldr	r3, [r7, #32]
   1507a:	68db      	ldr	r3, [r3, #12]
   1507c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
				if (data->async && data->async->tx_size &&
   15080:	2b00      	cmp	r3, #0
   15082:	da1a      	bge.n	150ba <uarte_nrfx_poll_out+0xb6>
						      get_uarte_instance(dev));
   15084:	6878      	ldr	r0, [r7, #4]
   15086:	f7fe ffac 	bl	13fe2 <get_uarte_instance>
   1508a:	4603      	mov	r3, r0
						nrf_uarte_tx_amount_get(
   1508c:	4618      	mov	r0, r3
   1508e:	f7fe ff2f 	bl	13ef0 <nrf_uarte_tx_amount_get>
   15092:	4602      	mov	r2, r0
					data->async->tx_amount =
   15094:	6a3b      	ldr	r3, [r7, #32]
   15096:	68db      	ldr	r3, [r3, #12]
   15098:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				break;
   1509c:	e00d      	b.n	150ba <uarte_nrfx_poll_out+0xb6>
			irq_unlock(key);
   1509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   150a0:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
   150a2:	693b      	ldr	r3, [r7, #16]
   150a4:	f383 8811 	msr	BASEPRI, r3
   150a8:	f3bf 8f6f 	isb	sy
}
   150ac:	bf00      	nop
			key = irq_lock();
   150ae:	e7c8      	b.n	15042 <uarte_nrfx_poll_out+0x3e>
		key = wait_tx_ready(dev);
   150b0:	6878      	ldr	r0, [r7, #4]
   150b2:	f7ff f8a2 	bl	141fa <wait_tx_ready>
   150b6:	6278      	str	r0, [r7, #36]	; 0x24
   150b8:	e000      	b.n	150bc <uarte_nrfx_poll_out+0xb8>
				break;
   150ba:	bf00      	nop
	data->char_out = c;
   150bc:	6a3b      	ldr	r3, [r7, #32]
   150be:	78fa      	ldrb	r2, [r7, #3]
   150c0:	751a      	strb	r2, [r3, #20]
	tx_start(dev, &data->char_out, 1);
   150c2:	6a3b      	ldr	r3, [r7, #32]
   150c4:	3314      	adds	r3, #20
   150c6:	2201      	movs	r2, #1
   150c8:	4619      	mov	r1, r3
   150ca:	6878      	ldr	r0, [r7, #4]
   150cc:	f7ff f932 	bl	14334 <tx_start>
	irq_unlock(key);
   150d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   150d2:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
   150d4:	68fb      	ldr	r3, [r7, #12]
   150d6:	f383 8811 	msr	BASEPRI, r3
   150da:	f3bf 8f6f 	isb	sy
}
   150de:	bf00      	nop
}
   150e0:	bf00      	nop
   150e2:	3728      	adds	r7, #40	; 0x28
   150e4:	46bd      	mov	sp, r7
   150e6:	bd80      	pop	{r7, pc}

000150e8 <uarte_instance_init>:
{
   150e8:	b580      	push	{r7, lr}
   150ea:	b088      	sub	sp, #32
   150ec:	af00      	add	r7, sp, #0
   150ee:	60f8      	str	r0, [r7, #12]
   150f0:	60b9      	str	r1, [r7, #8]
   150f2:	4613      	mov	r3, r2
   150f4:	71fb      	strb	r3, [r7, #7]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   150f6:	68f8      	ldr	r0, [r7, #12]
   150f8:	f7fe ff73 	bl	13fe2 <get_uarte_instance>
   150fc:	61f8      	str	r0, [r7, #28]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   150fe:	68f8      	ldr	r0, [r7, #12]
   15100:	f7fe ff59 	bl	13fb6 <get_dev_data>
   15104:	61b8      	str	r0, [r7, #24]
	nrf_uarte_disable(uarte);
   15106:	69f8      	ldr	r0, [r7, #28]
   15108:	f7fe fe5c 	bl	13dc4 <nrf_uarte_disable>
	data->dev = dev;
   1510c:	69bb      	ldr	r3, [r7, #24]
   1510e:	68fa      	ldr	r2, [r7, #12]
   15110:	601a      	str	r2, [r3, #0]
	nrf_gpio_pin_write(config->pseltxd, 1);
   15112:	68bb      	ldr	r3, [r7, #8]
   15114:	681b      	ldr	r3, [r3, #0]
   15116:	2101      	movs	r1, #1
   15118:	4618      	mov	r0, r3
   1511a:	f7fe fd34 	bl	13b86 <nrf_gpio_pin_write>
	nrf_gpio_cfg_output(config->pseltxd);
   1511e:	68bb      	ldr	r3, [r7, #8]
   15120:	681b      	ldr	r3, [r3, #0]
   15122:	4618      	mov	r0, r3
   15124:	f7fe fcdf 	bl	13ae6 <nrf_gpio_cfg_output>
	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   15128:	68bb      	ldr	r3, [r7, #8]
   1512a:	685b      	ldr	r3, [r3, #4]
   1512c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   15130:	d005      	beq.n	1513e <uarte_instance_init+0x56>
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_PULLUP);
   15132:	68bb      	ldr	r3, [r7, #8]
   15134:	685b      	ldr	r3, [r3, #4]
   15136:	2103      	movs	r1, #3
   15138:	4618      	mov	r0, r3
   1513a:	f7fe fce6 	bl	13b0a <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   1513e:	68bb      	ldr	r3, [r7, #8]
   15140:	6819      	ldr	r1, [r3, #0]
   15142:	68bb      	ldr	r3, [r7, #8]
   15144:	685b      	ldr	r3, [r3, #4]
   15146:	461a      	mov	r2, r3
   15148:	69f8      	ldr	r0, [r7, #28]
   1514a:	f7fe fe48 	bl	13dde <nrf_uarte_txrx_pins_set>
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1514e:	68bb      	ldr	r3, [r7, #8]
   15150:	689b      	ldr	r3, [r3, #8]
   15152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   15156:	d005      	beq.n	15164 <uarte_instance_init+0x7c>
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_PULLUP);
   15158:	68bb      	ldr	r3, [r7, #8]
   1515a:	689b      	ldr	r3, [r3, #8]
   1515c:	2103      	movs	r1, #3
   1515e:	4618      	mov	r0, r3
   15160:	f7fe fcd3 	bl	13b0a <nrf_gpio_cfg_input>
	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   15164:	68bb      	ldr	r3, [r7, #8]
   15166:	68db      	ldr	r3, [r3, #12]
   15168:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1516c:	d00a      	beq.n	15184 <uarte_instance_init+0x9c>
		nrf_gpio_pin_write(config->pselrts, 1);
   1516e:	68bb      	ldr	r3, [r7, #8]
   15170:	68db      	ldr	r3, [r3, #12]
   15172:	2101      	movs	r1, #1
   15174:	4618      	mov	r0, r3
   15176:	f7fe fd06 	bl	13b86 <nrf_gpio_pin_write>
		nrf_gpio_cfg_output(config->pselrts);
   1517a:	68bb      	ldr	r3, [r7, #8]
   1517c:	68db      	ldr	r3, [r3, #12]
   1517e:	4618      	mov	r0, r3
   15180:	f7fe fcb1 	bl	13ae6 <nrf_gpio_cfg_output>
	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   15184:	68bb      	ldr	r3, [r7, #8]
   15186:	68d9      	ldr	r1, [r3, #12]
   15188:	68bb      	ldr	r3, [r7, #8]
   1518a:	689b      	ldr	r3, [r3, #8]
   1518c:	461a      	mov	r2, r3
   1518e:	69f8      	ldr	r0, [r7, #28]
   15190:	f7fe fe44 	bl	13e1c <nrf_uarte_hwfc_pins_set>
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   15194:	68f8      	ldr	r0, [r7, #12]
   15196:	f7fe ff0e 	bl	13fb6 <get_dev_data>
   1519a:	4603      	mov	r3, r0
   1519c:	3304      	adds	r3, #4
   1519e:	4619      	mov	r1, r3
   151a0:	68f8      	ldr	r0, [r7, #12]
   151a2:	f7fe ff5d 	bl	14060 <uarte_nrfx_configure>
   151a6:	6178      	str	r0, [r7, #20]
	if (err) {
   151a8:	697b      	ldr	r3, [r7, #20]
   151aa:	2b00      	cmp	r3, #0
   151ac:	d001      	beq.n	151b2 <uarte_instance_init+0xca>
		return err;
   151ae:	697b      	ldr	r3, [r7, #20]
   151b0:	e063      	b.n	1527a <uarte_instance_init+0x192>
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   151b2:	68f8      	ldr	r0, [r7, #12]
   151b4:	f7fe ff0a 	bl	13fcc <get_dev_config>
   151b8:	4603      	mov	r3, r0
   151ba:	685b      	ldr	r3, [r3, #4]
   151bc:	f003 0308 	and.w	r3, r3, #8
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   151c0:	2b00      	cmp	r3, #0
   151c2:	d009      	beq.n	151d8 <uarte_instance_init+0xf0>
		err = endtx_stoptx_ppi_init(uarte, data);
   151c4:	69b9      	ldr	r1, [r7, #24]
   151c6:	69f8      	ldr	r0, [r7, #28]
   151c8:	f7f3 fed2 	bl	8f70 <endtx_stoptx_ppi_init>
   151cc:	6178      	str	r0, [r7, #20]
		if (err < 0) {
   151ce:	697b      	ldr	r3, [r7, #20]
   151d0:	2b00      	cmp	r3, #0
   151d2:	da01      	bge.n	151d8 <uarte_instance_init+0xf0>
			return err;
   151d4:	697b      	ldr	r3, [r7, #20]
   151d6:	e050      	b.n	1527a <uarte_instance_init+0x192>
	if (data->async) {
   151d8:	69bb      	ldr	r3, [r7, #24]
   151da:	68db      	ldr	r3, [r3, #12]
   151dc:	2b00      	cmp	r3, #0
   151de:	d008      	beq.n	151f2 <uarte_instance_init+0x10a>
		err = uarte_nrfx_init(dev);
   151e0:	68f8      	ldr	r0, [r7, #12]
   151e2:	f7f3 fce5 	bl	8bb0 <uarte_nrfx_init>
   151e6:	6178      	str	r0, [r7, #20]
		if (err < 0) {
   151e8:	697b      	ldr	r3, [r7, #20]
   151ea:	2b00      	cmp	r3, #0
   151ec:	da19      	bge.n	15222 <uarte_instance_init+0x13a>
			return err;
   151ee:	697b      	ldr	r3, [r7, #20]
   151f0:	e043      	b.n	1527a <uarte_instance_init+0x192>
		nrf_uarte_enable(uarte);
   151f2:	69f8      	ldr	r0, [r7, #28]
   151f4:	f7fe fdd9 	bl	13daa <nrf_uarte_enable>
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   151f8:	68bb      	ldr	r3, [r7, #8]
   151fa:	685b      	ldr	r3, [r3, #4]
   151fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   15200:	d00f      	beq.n	15222 <uarte_instance_init+0x13a>
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   15202:	f44f 7188 	mov.w	r1, #272	; 0x110
   15206:	69f8      	ldr	r0, [r7, #28]
   15208:	f7fe fd21 	bl	13c4e <nrf_uarte_event_clear>
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1520c:	69bb      	ldr	r3, [r7, #24]
   1520e:	3315      	adds	r3, #21
   15210:	2201      	movs	r2, #1
   15212:	4619      	mov	r1, r3
   15214:	69f8      	ldr	r0, [r7, #28]
   15216:	f7fe fe77 	bl	13f08 <nrf_uarte_rx_buffer_set>
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
   1521a:	2100      	movs	r1, #0
   1521c:	69f8      	ldr	r0, [r7, #28]
   1521e:	f7fe fe10 	bl	13e42 <nrf_uarte_task_trigger>
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   15222:	68f8      	ldr	r0, [r7, #12]
   15224:	f7fe fed2 	bl	13fcc <get_dev_config>
   15228:	4603      	mov	r3, r0
   1522a:	685b      	ldr	r3, [r3, #4]
   1522c:	f003 0308 	and.w	r3, r3, #8
   15230:	2b00      	cmp	r3, #0
   15232:	d104      	bne.n	1523e <uarte_instance_init+0x156>
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
   15234:	f44f 7180 	mov.w	r1, #256	; 0x100
   15238:	69f8      	ldr	r0, [r7, #28]
   1523a:	f7fe fd64 	bl	13d06 <nrf_uarte_int_enable>
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1523e:	68f8      	ldr	r0, [r7, #12]
   15240:	f7fe fec4 	bl	13fcc <get_dev_config>
   15244:	4603      	mov	r3, r0
   15246:	685b      	ldr	r3, [r3, #4]
   15248:	f003 0310 	and.w	r3, r3, #16
   1524c:	2b00      	cmp	r3, #0
   1524e:	d004      	beq.n	1525a <uarte_instance_init+0x172>
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_TXSTOPPED_MASK);
   15250:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   15254:	69f8      	ldr	r0, [r7, #28]
   15256:	f7fe fd56 	bl	13d06 <nrf_uarte_int_enable>
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1525a:	69bb      	ldr	r3, [r7, #24]
   1525c:	3314      	adds	r3, #20
   1525e:	2200      	movs	r2, #0
   15260:	4619      	mov	r1, r3
   15262:	69f8      	ldr	r0, [r7, #28]
   15264:	f7fe fe31 	bl	13eca <nrf_uarte_tx_buffer_set>
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTTX);
   15268:	2108      	movs	r1, #8
   1526a:	69f8      	ldr	r0, [r7, #28]
   1526c:	f7fe fde9 	bl	13e42 <nrf_uarte_task_trigger>
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
   15270:	210c      	movs	r1, #12
   15272:	69f8      	ldr	r0, [r7, #28]
   15274:	f7fe fde5 	bl	13e42 <nrf_uarte_task_trigger>
	return 0;
   15278:	2300      	movs	r3, #0
}
   1527a:	4618      	mov	r0, r3
   1527c:	3720      	adds	r7, #32
   1527e:	46bd      	mov	sp, r7
   15280:	bd80      	pop	{r7, pc}

00015282 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   15282:	b580      	push	{r7, lr}
   15284:	b084      	sub	sp, #16
   15286:	af00      	add	r7, sp, #0
   15288:	6078      	str	r0, [r7, #4]

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   1528a:	f7fa f8d3 	bl	f434 <nrf_cc3xx_platform_init_no_rng>
   1528e:	60f8      	str	r0, [r7, #12]
#endif

	return res;
   15290:	68fb      	ldr	r3, [r7, #12]
}
   15292:	4618      	mov	r0, r3
   15294:	3710      	adds	r7, #16
   15296:	46bd      	mov	sp, r7
   15298:	bd80      	pop	{r7, pc}

0001529a <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   1529a:	b580      	push	{r7, lr}
   1529c:	b084      	sub	sp, #16
   1529e:	af00      	add	r7, sp, #0
   152a0:	6078      	str	r0, [r7, #4]
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   152a2:	f7f0 f9ad 	bl	5600 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   152a6:	f7f0 fab9 	bl	581c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   152aa:	6878      	ldr	r0, [r7, #4]
   152ac:	f7ff ffe9 	bl	15282 <hw_cc3xx_init_internal>
   152b0:	60f8      	str	r0, [r7, #12]
	return res;
   152b2:	68fb      	ldr	r3, [r7, #12]
}
   152b4:	4618      	mov	r0, r3
   152b6:	3710      	adds	r7, #16
   152b8:	46bd      	mov	sp, r7
   152ba:	bd80      	pop	{r7, pc}

000152bc <k_busy_wait>:
{
   152bc:	b580      	push	{r7, lr}
   152be:	b082      	sub	sp, #8
   152c0:	af00      	add	r7, sp, #0
   152c2:	6078      	str	r0, [r7, #4]
	z_impl_k_busy_wait(usec_to_wait);
   152c4:	6878      	ldr	r0, [r7, #4]
   152c6:	f001 fc9a 	bl	16bfe <z_impl_k_busy_wait>
}
   152ca:	bf00      	nop
   152cc:	3708      	adds	r7, #8
   152ce:	46bd      	mov	sp, r7
   152d0:	bd80      	pop	{r7, pc}

000152d2 <nrfx_isr>:
{
   152d2:	b580      	push	{r7, lr}
   152d4:	b082      	sub	sp, #8
   152d6:	af00      	add	r7, sp, #0
   152d8:	6078      	str	r0, [r7, #4]
	((nrfx_irq_handler_t)irq_handler)();
   152da:	687b      	ldr	r3, [r7, #4]
   152dc:	4798      	blx	r3
}
   152de:	bf00      	nop
   152e0:	3708      	adds	r7, #8
   152e2:	46bd      	mov	sp, r7
   152e4:	bd80      	pop	{r7, pc}

000152e6 <nrfx_busy_wait>:
{
   152e6:	b580      	push	{r7, lr}
   152e8:	b082      	sub	sp, #8
   152ea:	af00      	add	r7, sp, #0
   152ec:	6078      	str	r0, [r7, #4]
	k_busy_wait(usec_to_wait);
   152ee:	6878      	ldr	r0, [r7, #4]
   152f0:	f7ff ffe4 	bl	152bc <k_busy_wait>
}
   152f4:	bf00      	nop
   152f6:	3708      	adds	r7, #8
   152f8:	46bd      	mov	sp, r7
   152fa:	bd80      	pop	{r7, pc}

000152fc <nrfx_get_irq_number>:
{
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
   152fc:	b480      	push	{r7}
   152fe:	b083      	sub	sp, #12
   15300:	af00      	add	r7, sp, #0
   15302:	6078      	str	r0, [r7, #4]
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   15304:	687b      	ldr	r3, [r7, #4]
   15306:	0b1b      	lsrs	r3, r3, #12
   15308:	b25b      	sxtb	r3, r3
}
   1530a:	4618      	mov	r0, r3
   1530c:	370c      	adds	r7, #12
   1530e:	46bd      	mov	sp, r7
   15310:	bc80      	pop	{r7}
   15312:	4770      	bx	lr

00015314 <nrf_event_readback>:
{
   15314:	b480      	push	{r7}
   15316:	b083      	sub	sp, #12
   15318:	af00      	add	r7, sp, #0
   1531a:	6078      	str	r0, [r7, #4]
    (void)*((volatile uint32_t *)(p_event_reg));
   1531c:	687b      	ldr	r3, [r7, #4]
   1531e:	681b      	ldr	r3, [r3, #0]
}
   15320:	bf00      	nop
   15322:	370c      	adds	r7, #12
   15324:	46bd      	mov	sp, r7
   15326:	bc80      	pop	{r7}
   15328:	4770      	bx	lr

0001532a <nrf_clock_int_enable>:
{
   1532a:	b480      	push	{r7}
   1532c:	b083      	sub	sp, #12
   1532e:	af00      	add	r7, sp, #0
   15330:	6078      	str	r0, [r7, #4]
   15332:	6039      	str	r1, [r7, #0]
    p_reg->INTENSET = mask;
   15334:	687b      	ldr	r3, [r7, #4]
   15336:	683a      	ldr	r2, [r7, #0]
   15338:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1533c:	bf00      	nop
   1533e:	370c      	adds	r7, #12
   15340:	46bd      	mov	sp, r7
   15342:	bc80      	pop	{r7}
   15344:	4770      	bx	lr

00015346 <nrf_clock_int_disable>:
{
   15346:	b480      	push	{r7}
   15348:	b083      	sub	sp, #12
   1534a:	af00      	add	r7, sp, #0
   1534c:	6078      	str	r0, [r7, #4]
   1534e:	6039      	str	r1, [r7, #0]
    p_reg->INTENCLR = mask;
   15350:	687b      	ldr	r3, [r7, #4]
   15352:	683a      	ldr	r2, [r7, #0]
   15354:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   15358:	bf00      	nop
   1535a:	370c      	adds	r7, #12
   1535c:	46bd      	mov	sp, r7
   1535e:	bc80      	pop	{r7}
   15360:	4770      	bx	lr

00015362 <nrf_clock_task_trigger>:
{
   15362:	b480      	push	{r7}
   15364:	b083      	sub	sp, #12
   15366:	af00      	add	r7, sp, #0
   15368:	6078      	str	r0, [r7, #4]
   1536a:	460b      	mov	r3, r1
   1536c:	70fb      	strb	r3, [r7, #3]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1536e:	78fb      	ldrb	r3, [r7, #3]
   15370:	687a      	ldr	r2, [r7, #4]
   15372:	4413      	add	r3, r2
   15374:	2201      	movs	r2, #1
   15376:	601a      	str	r2, [r3, #0]
}
   15378:	bf00      	nop
   1537a:	370c      	adds	r7, #12
   1537c:	46bd      	mov	sp, r7
   1537e:	bc80      	pop	{r7}
   15380:	4770      	bx	lr

00015382 <nrf_clock_event_clear>:
{
   15382:	b580      	push	{r7, lr}
   15384:	b082      	sub	sp, #8
   15386:	af00      	add	r7, sp, #0
   15388:	6078      	str	r0, [r7, #4]
   1538a:	460b      	mov	r3, r1
   1538c:	807b      	strh	r3, [r7, #2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1538e:	887b      	ldrh	r3, [r7, #2]
   15390:	687a      	ldr	r2, [r7, #4]
   15392:	4413      	add	r3, r2
   15394:	2200      	movs	r2, #0
   15396:	601a      	str	r2, [r3, #0]
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
   15398:	887b      	ldrh	r3, [r7, #2]
   1539a:	687a      	ldr	r2, [r7, #4]
   1539c:	4413      	add	r3, r2
   1539e:	4618      	mov	r0, r3
   153a0:	f7ff ffb8 	bl	15314 <nrf_event_readback>
}
   153a4:	bf00      	nop
   153a6:	3708      	adds	r7, #8
   153a8:	46bd      	mov	sp, r7
   153aa:	bd80      	pop	{r7, pc}

000153ac <nrf_clock_event_check>:
{
   153ac:	b480      	push	{r7}
   153ae:	b083      	sub	sp, #12
   153b0:	af00      	add	r7, sp, #0
   153b2:	6078      	str	r0, [r7, #4]
   153b4:	460b      	mov	r3, r1
   153b6:	807b      	strh	r3, [r7, #2]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   153b8:	887b      	ldrh	r3, [r7, #2]
   153ba:	687a      	ldr	r2, [r7, #4]
   153bc:	4413      	add	r3, r2
   153be:	681b      	ldr	r3, [r3, #0]
   153c0:	2b00      	cmp	r3, #0
   153c2:	bf14      	ite	ne
   153c4:	2301      	movne	r3, #1
   153c6:	2300      	moveq	r3, #0
   153c8:	b2db      	uxtb	r3, r3
}
   153ca:	4618      	mov	r0, r3
   153cc:	370c      	adds	r7, #12
   153ce:	46bd      	mov	sp, r7
   153d0:	bc80      	pop	{r7}
   153d2:	4770      	bx	lr

000153d4 <nrf_clock_lf_src_set>:
{
   153d4:	b480      	push	{r7}
   153d6:	b083      	sub	sp, #12
   153d8:	af00      	add	r7, sp, #0
   153da:	6078      	str	r0, [r7, #4]
   153dc:	460b      	mov	r3, r1
   153de:	70fb      	strb	r3, [r7, #3]
    p_reg->LFCLKSRC = (uint32_t)(source);
   153e0:	78fa      	ldrb	r2, [r7, #3]
   153e2:	687b      	ldr	r3, [r7, #4]
   153e4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   153e8:	bf00      	nop
   153ea:	370c      	adds	r7, #12
   153ec:	46bd      	mov	sp, r7
   153ee:	bc80      	pop	{r7}
   153f0:	4770      	bx	lr

000153f2 <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
   153f2:	b580      	push	{r7, lr}
   153f4:	b082      	sub	sp, #8
   153f6:	af00      	add	r7, sp, #0
    #endif
    priority = NRFX_POWER_DEFAULT_CONFIG_IRQ_PRIORITY;
#elif NRFX_CHECK(NRFX_POWER_ENABLED)
    priority = NRFX_POWER_DEFAULT_CONFIG_IRQ_PRIORITY;
#elif NRFX_CHECK(NRFX_CLOCK_ENABLED)
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
   153f8:	2307      	movs	r3, #7
   153fa:	71fb      	strb	r3, [r7, #7]
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   153fc:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
   15400:	f7ff ff7c 	bl	152fc <nrfx_get_irq_number>
   15404:	4603      	mov	r3, r0
   15406:	4618      	mov	r0, r3
   15408:	f7f0 faee 	bl	59e8 <arch_irq_is_enabled>
   1540c:	4603      	mov	r3, r0
   1540e:	2b00      	cmp	r3, #0
   15410:	d107      	bne.n	15422 <nrfx_power_clock_irq_init+0x30>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   15412:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
   15416:	f7ff ff71 	bl	152fc <nrfx_get_irq_number>
   1541a:	4603      	mov	r3, r0
   1541c:	4618      	mov	r0, r3
   1541e:	f7fd f95a 	bl	126d6 <arch_irq_enable>
    }
}
   15422:	bf00      	nop
   15424:	3708      	adds	r7, #8
   15426:	46bd      	mov	sp, r7
   15428:	bd80      	pop	{r7, pc}

0001542a <nrfx_clock_is_running>:
{
   1542a:	b580      	push	{r7, lr}
   1542c:	b082      	sub	sp, #8
   1542e:	af00      	add	r7, sp, #0
   15430:	4603      	mov	r3, r0
   15432:	6039      	str	r1, [r7, #0]
   15434:	71fb      	strb	r3, [r7, #7]
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   15436:	79fb      	ldrb	r3, [r7, #7]
   15438:	683a      	ldr	r2, [r7, #0]
   1543a:	4619      	mov	r1, r3
   1543c:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
   15440:	f7f4 f8ae 	bl	95a0 <nrf_clock_is_running>
   15444:	4603      	mov	r3, r0
}
   15446:	4618      	mov	r0, r3
   15448:	3708      	adds	r7, #8
   1544a:	46bd      	mov	sp, r7
   1544c:	bd80      	pop	{r7, pc}

0001544e <k_is_user_context>:
{
   1544e:	b480      	push	{r7}
   15450:	af00      	add	r7, sp, #0
	return false;
   15452:	2300      	movs	r3, #0
}
   15454:	4618      	mov	r0, r3
   15456:	46bd      	mov	sp, r7
   15458:	bc80      	pop	{r7}
   1545a:	4770      	bx	lr

0001545c <nrf_dppi_channels_enable>:
{
   1545c:	b480      	push	{r7}
   1545e:	b083      	sub	sp, #12
   15460:	af00      	add	r7, sp, #0
   15462:	6078      	str	r0, [r7, #4]
   15464:	6039      	str	r1, [r7, #0]
    p_reg->CHENSET = mask;
   15466:	687b      	ldr	r3, [r7, #4]
   15468:	683a      	ldr	r2, [r7, #0]
   1546a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1546e:	bf00      	nop
   15470:	370c      	adds	r7, #12
   15472:	46bd      	mov	sp, r7
   15474:	bc80      	pop	{r7}
   15476:	4770      	bx	lr

00015478 <k_is_user_context>:
{
   15478:	b480      	push	{r7}
   1547a:	af00      	add	r7, sp, #0
	return false;
   1547c:	2300      	movs	r3, #0
}
   1547e:	4618      	mov	r0, r3
   15480:	46bd      	mov	sp, r7
   15482:	bc80      	pop	{r7}
   15484:	4770      	bx	lr

00015486 <k_is_user_context>:
{
   15486:	b480      	push	{r7}
   15488:	af00      	add	r7, sp, #0
	return false;
   1548a:	2300      	movs	r3, #0
}
   1548c:	4618      	mov	r0, r3
   1548e:	46bd      	mov	sp, r7
   15490:	bc80      	pop	{r7}
   15492:	4770      	bx	lr

00015494 <is_app_channel>:
{
   15494:	b480      	push	{r7}
   15496:	b083      	sub	sp, #12
   15498:	af00      	add	r7, sp, #0
   1549a:	4603      	mov	r3, r0
   1549c:	71fb      	strb	r3, [r7, #7]
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1549e:	79fb      	ldrb	r3, [r7, #7]
   154a0:	2201      	movs	r2, #1
   154a2:	fa02 f303 	lsl.w	r3, r2, r3
   154a6:	b2db      	uxtb	r3, r3
   154a8:	2b00      	cmp	r3, #0
   154aa:	bf14      	ite	ne
   154ac:	2301      	movne	r3, #1
   154ae:	2300      	moveq	r3, #0
   154b0:	b2db      	uxtb	r3, r3
}
   154b2:	4618      	mov	r0, r3
   154b4:	370c      	adds	r7, #12
   154b6:	46bd      	mov	sp, r7
   154b8:	bc80      	pop	{r7}
   154ba:	4770      	bx	lr

000154bc <nrfx_get_irq_number>:
{
   154bc:	b480      	push	{r7}
   154be:	b083      	sub	sp, #12
   154c0:	af00      	add	r7, sp, #0
   154c2:	6078      	str	r0, [r7, #4]
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   154c4:	687b      	ldr	r3, [r7, #4]
   154c6:	0b1b      	lsrs	r3, r3, #12
   154c8:	b25b      	sxtb	r3, r3
}
   154ca:	4618      	mov	r0, r3
   154cc:	370c      	adds	r7, #12
   154ce:	46bd      	mov	sp, r7
   154d0:	bc80      	pop	{r7}
   154d2:	4770      	bx	lr

000154d4 <nrf_event_readback>:
{
   154d4:	b480      	push	{r7}
   154d6:	b083      	sub	sp, #12
   154d8:	af00      	add	r7, sp, #0
   154da:	6078      	str	r0, [r7, #4]
    (void)*((volatile uint32_t *)(p_event_reg));
   154dc:	687b      	ldr	r3, [r7, #4]
   154de:	681b      	ldr	r3, [r3, #0]
}
   154e0:	bf00      	nop
   154e2:	370c      	adds	r7, #12
   154e4:	46bd      	mov	sp, r7
   154e6:	bc80      	pop	{r7}
   154e8:	4770      	bx	lr

000154ea <nrf_timer_task_trigger>:
{
   154ea:	b480      	push	{r7}
   154ec:	b083      	sub	sp, #12
   154ee:	af00      	add	r7, sp, #0
   154f0:	6078      	str	r0, [r7, #4]
   154f2:	460b      	mov	r3, r1
   154f4:	70fb      	strb	r3, [r7, #3]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   154f6:	78fb      	ldrb	r3, [r7, #3]
   154f8:	687a      	ldr	r2, [r7, #4]
   154fa:	4413      	add	r3, r2
   154fc:	2201      	movs	r2, #1
   154fe:	601a      	str	r2, [r3, #0]
}
   15500:	bf00      	nop
   15502:	370c      	adds	r7, #12
   15504:	46bd      	mov	sp, r7
   15506:	bc80      	pop	{r7}
   15508:	4770      	bx	lr

0001550a <nrf_timer_event_clear>:
{
   1550a:	b580      	push	{r7, lr}
   1550c:	b082      	sub	sp, #8
   1550e:	af00      	add	r7, sp, #0
   15510:	6078      	str	r0, [r7, #4]
   15512:	460b      	mov	r3, r1
   15514:	807b      	strh	r3, [r7, #2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15516:	887b      	ldrh	r3, [r7, #2]
   15518:	687a      	ldr	r2, [r7, #4]
   1551a:	4413      	add	r3, r2
   1551c:	2200      	movs	r2, #0
   1551e:	601a      	str	r2, [r3, #0]
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
   15520:	887b      	ldrh	r3, [r7, #2]
   15522:	687a      	ldr	r2, [r7, #4]
   15524:	4413      	add	r3, r2
   15526:	4618      	mov	r0, r3
   15528:	f7ff ffd4 	bl	154d4 <nrf_event_readback>
}
   1552c:	bf00      	nop
   1552e:	3708      	adds	r7, #8
   15530:	46bd      	mov	sp, r7
   15532:	bd80      	pop	{r7, pc}

00015534 <nrf_timer_shorts_disable>:
{
   15534:	b480      	push	{r7}
   15536:	b083      	sub	sp, #12
   15538:	af00      	add	r7, sp, #0
   1553a:	6078      	str	r0, [r7, #4]
   1553c:	6039      	str	r1, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   1553e:	687b      	ldr	r3, [r7, #4]
   15540:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   15544:	683b      	ldr	r3, [r7, #0]
   15546:	43db      	mvns	r3, r3
   15548:	401a      	ands	r2, r3
   1554a:	687b      	ldr	r3, [r7, #4]
   1554c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
   15550:	bf00      	nop
   15552:	370c      	adds	r7, #12
   15554:	46bd      	mov	sp, r7
   15556:	bc80      	pop	{r7}
   15558:	4770      	bx	lr

0001555a <nrf_timer_int_disable>:
{
   1555a:	b480      	push	{r7}
   1555c:	b083      	sub	sp, #12
   1555e:	af00      	add	r7, sp, #0
   15560:	6078      	str	r0, [r7, #4]
   15562:	6039      	str	r1, [r7, #0]
    p_reg->INTENCLR = mask;
   15564:	687b      	ldr	r3, [r7, #4]
   15566:	683a      	ldr	r2, [r7, #0]
   15568:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1556c:	bf00      	nop
   1556e:	370c      	adds	r7, #12
   15570:	46bd      	mov	sp, r7
   15572:	bc80      	pop	{r7}
   15574:	4770      	bx	lr

00015576 <nrf_timer_mode_set>:
}
#endif // defined(DPPI_PRESENT)

NRF_STATIC_INLINE void nrf_timer_mode_set(NRF_TIMER_Type * p_reg,
                                          nrf_timer_mode_t mode)
{
   15576:	b480      	push	{r7}
   15578:	b083      	sub	sp, #12
   1557a:	af00      	add	r7, sp, #0
   1557c:	6078      	str	r0, [r7, #4]
   1557e:	460b      	mov	r3, r1
   15580:	70fb      	strb	r3, [r7, #3]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   15582:	687b      	ldr	r3, [r7, #4]
   15584:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   15588:	f023 0203 	bic.w	r2, r3, #3
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
   1558c:	78fb      	ldrb	r3, [r7, #3]
   1558e:	f003 0303 	and.w	r3, r3, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
   15592:	431a      	orrs	r2, r3
   15594:	687b      	ldr	r3, [r7, #4]
   15596:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1559a:	bf00      	nop
   1559c:	370c      	adds	r7, #12
   1559e:	46bd      	mov	sp, r7
   155a0:	bc80      	pop	{r7}
   155a2:	4770      	bx	lr

000155a4 <nrf_timer_mode_get>:

NRF_STATIC_INLINE nrf_timer_mode_t nrf_timer_mode_get(NRF_TIMER_Type const * p_reg)
{
   155a4:	b480      	push	{r7}
   155a6:	b083      	sub	sp, #12
   155a8:	af00      	add	r7, sp, #0
   155aa:	6078      	str	r0, [r7, #4]
    return (nrf_timer_mode_t)(p_reg->MODE);
   155ac:	687b      	ldr	r3, [r7, #4]
   155ae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   155b2:	b2db      	uxtb	r3, r3
}
   155b4:	4618      	mov	r0, r3
   155b6:	370c      	adds	r7, #12
   155b8:	46bd      	mov	sp, r7
   155ba:	bc80      	pop	{r7}
   155bc:	4770      	bx	lr

000155be <nrf_timer_bit_width_set>:

NRF_STATIC_INLINE void nrf_timer_bit_width_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_bit_width_t bit_width)
{
   155be:	b480      	push	{r7}
   155c0:	b083      	sub	sp, #12
   155c2:	af00      	add	r7, sp, #0
   155c4:	6078      	str	r0, [r7, #4]
   155c6:	460b      	mov	r3, r1
   155c8:	70fb      	strb	r3, [r7, #3]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   155ca:	687b      	ldr	r3, [r7, #4]
   155cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
   155d0:	f023 0203 	bic.w	r2, r3, #3
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
   155d4:	78fb      	ldrb	r3, [r7, #3]
   155d6:	f003 0303 	and.w	r3, r3, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
   155da:	431a      	orrs	r2, r3
   155dc:	687b      	ldr	r3, [r7, #4]
   155de:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
                            TIMER_BITMODE_BITMODE_Msk);
}
   155e2:	bf00      	nop
   155e4:	370c      	adds	r7, #12
   155e6:	46bd      	mov	sp, r7
   155e8:	bc80      	pop	{r7}
   155ea:	4770      	bx	lr

000155ec <nrf_timer_frequency_set>:
    return (nrf_timer_bit_width_t)(p_reg->BITMODE);
}

NRF_STATIC_INLINE void nrf_timer_frequency_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_frequency_t frequency)
{
   155ec:	b480      	push	{r7}
   155ee:	b083      	sub	sp, #12
   155f0:	af00      	add	r7, sp, #0
   155f2:	6078      	str	r0, [r7, #4]
   155f4:	460b      	mov	r3, r1
   155f6:	70fb      	strb	r3, [r7, #3]
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   155f8:	687b      	ldr	r3, [r7, #4]
   155fa:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   155fe:	f023 020f 	bic.w	r2, r3, #15
                         ((frequency << TIMER_PRESCALER_PRESCALER_Pos) &
   15602:	78fb      	ldrb	r3, [r7, #3]
   15604:	f003 030f 	and.w	r3, r3, #15
    p_reg->PRESCALER = (p_reg->PRESCALER & ~TIMER_PRESCALER_PRESCALER_Msk) |
   15608:	431a      	orrs	r2, r3
   1560a:	687b      	ldr	r3, [r7, #4]
   1560c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
                              TIMER_PRESCALER_PRESCALER_Msk);
}
   15610:	bf00      	nop
   15612:	370c      	adds	r7, #12
   15614:	46bd      	mov	sp, r7
   15616:	bc80      	pop	{r7}
   15618:	4770      	bx	lr

0001561a <nrf_timer_cc_get>:
    p_reg->CC[cc_channel] = cc_value;
}

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
   1561a:	b480      	push	{r7}
   1561c:	b083      	sub	sp, #12
   1561e:	af00      	add	r7, sp, #0
   15620:	6078      	str	r0, [r7, #4]
   15622:	460b      	mov	r3, r1
   15624:	70fb      	strb	r3, [r7, #3]
    return (uint32_t)p_reg->CC[cc_channel];
   15626:	78fa      	ldrb	r2, [r7, #3]
   15628:	687b      	ldr	r3, [r7, #4]
   1562a:	f502 72a8 	add.w	r2, r2, #336	; 0x150
   1562e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
   15632:	4618      	mov	r0, r3
   15634:	370c      	adds	r7, #12
   15636:	46bd      	mov	sp, r7
   15638:	bc80      	pop	{r7}
   1563a:	4770      	bx	lr

0001563c <nrf_timer_capture_task_get>:

NRF_STATIC_INLINE nrf_timer_task_t nrf_timer_capture_task_get(uint32_t channel)
{
   1563c:	b480      	push	{r7}
   1563e:	b083      	sub	sp, #12
   15640:	af00      	add	r7, sp, #0
   15642:	6078      	str	r0, [r7, #4]
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
   15644:	687b      	ldr	r3, [r7, #4]
   15646:	009b      	lsls	r3, r3, #2
   15648:	3340      	adds	r3, #64	; 0x40
   1564a:	b2db      	uxtb	r3, r3
}
   1564c:	4618      	mov	r0, r3
   1564e:	370c      	adds	r7, #12
   15650:	46bd      	mov	sp, r7
   15652:	bc80      	pop	{r7}
   15654:	4770      	bx	lr

00015656 <nrf_timer_compare_event_get>:

NRF_STATIC_INLINE nrf_timer_event_t nrf_timer_compare_event_get(uint32_t channel)
{
   15656:	b480      	push	{r7}
   15658:	b083      	sub	sp, #12
   1565a:	af00      	add	r7, sp, #0
   1565c:	6078      	str	r0, [r7, #4]
    return (nrf_timer_event_t)NRFX_OFFSETOF(NRF_TIMER_Type, EVENTS_COMPARE[channel]);
   1565e:	687b      	ldr	r3, [r7, #4]
   15660:	009b      	lsls	r3, r3, #2
   15662:	f503 73a0 	add.w	r3, r3, #320	; 0x140
   15666:	b29b      	uxth	r3, r3
}
   15668:	4618      	mov	r0, r3
   1566a:	370c      	adds	r7, #12
   1566c:	46bd      	mov	sp, r7
   1566e:	bc80      	pop	{r7}
   15670:	4770      	bx	lr

00015672 <k_is_user_context>:
{
   15672:	b480      	push	{r7}
   15674:	af00      	add	r7, sp, #0
	return false;
   15676:	2300      	movs	r3, #0
}
   15678:	4618      	mov	r0, r3
   1567a:	46bd      	mov	sp, r7
   1567c:	bc80      	pop	{r7}
   1567e:	4770      	bx	lr

00015680 <z_object_init>:

/**
 * @internal
 */
static inline void z_object_init(const void *obj)
{
   15680:	b480      	push	{r7}
   15682:	b083      	sub	sp, #12
   15684:	af00      	add	r7, sp, #0
   15686:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(obj);
}
   15688:	bf00      	nop
   1568a:	370c      	adds	r7, #12
   1568c:	46bd      	mov	sp, r7
   1568e:	bc80      	pop	{r7}
   15690:	4770      	bx	lr

00015692 <device_pm_state_init>:
{
   15692:	b480      	push	{r7}
   15694:	b083      	sub	sp, #12
   15696:	af00      	add	r7, sp, #0
   15698:	6078      	str	r0, [r7, #4]
}
   1569a:	bf00      	nop
   1569c:	370c      	adds	r7, #12
   1569e:	46bd      	mov	sp, r7
   156a0:	bc80      	pop	{r7}
   156a2:	4770      	bx	lr

000156a4 <z_device_ready>:
	*devices = __device_start;
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
   156a4:	b480      	push	{r7}
   156a6:	b083      	sub	sp, #12
   156a8:	af00      	add	r7, sp, #0
   156aa:	6078      	str	r0, [r7, #4]
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   156ac:	687b      	ldr	r3, [r7, #4]
   156ae:	2b00      	cmp	r3, #0
   156b0:	d101      	bne.n	156b6 <z_device_ready+0x12>
		return false;
   156b2:	2300      	movs	r3, #0
   156b4:	e012      	b.n	156dc <z_device_ready+0x38>
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   156b6:	687b      	ldr	r3, [r7, #4]
   156b8:	68db      	ldr	r3, [r3, #12]
   156ba:	785b      	ldrb	r3, [r3, #1]
   156bc:	f003 0301 	and.w	r3, r3, #1
   156c0:	b2db      	uxtb	r3, r3
   156c2:	2b00      	cmp	r3, #0
   156c4:	d006      	beq.n	156d4 <z_device_ready+0x30>
   156c6:	687b      	ldr	r3, [r7, #4]
   156c8:	68db      	ldr	r3, [r3, #12]
   156ca:	781b      	ldrb	r3, [r3, #0]
   156cc:	2b00      	cmp	r3, #0
   156ce:	d101      	bne.n	156d4 <z_device_ready+0x30>
   156d0:	2301      	movs	r3, #1
   156d2:	e000      	b.n	156d6 <z_device_ready+0x32>
   156d4:	2300      	movs	r3, #0
   156d6:	f003 0301 	and.w	r3, r3, #1
   156da:	b2db      	uxtb	r3, r3
}
   156dc:	4618      	mov	r0, r3
   156de:	370c      	adds	r7, #12
   156e0:	46bd      	mov	sp, r7
   156e2:	bc80      	pop	{r7}
   156e4:	4770      	bx	lr

000156e6 <k_is_user_context>:
{
   156e6:	b480      	push	{r7}
   156e8:	af00      	add	r7, sp, #0
	return false;
   156ea:	2300      	movs	r3, #0
}
   156ec:	4618      	mov	r0, r3
   156ee:	46bd      	mov	sp, r7
   156f0:	bc80      	pop	{r7}
   156f2:	4770      	bx	lr

000156f4 <k_current_get>:
{
   156f4:	b580      	push	{r7, lr}
   156f6:	af00      	add	r7, sp, #0
	return z_impl_k_current_get();
   156f8:	f7f8 ff60 	bl	e5bc <z_impl_k_current_get>
   156fc:	4603      	mov	r3, r0
}
   156fe:	4618      	mov	r0, r3
   15700:	bd80      	pop	{r7, pc}

00015702 <k_thread_abort>:
{
   15702:	b580      	push	{r7, lr}
   15704:	b082      	sub	sp, #8
   15706:	af00      	add	r7, sp, #0
   15708:	6078      	str	r0, [r7, #4]
	z_impl_k_thread_abort(thread);
   1570a:	6878      	ldr	r0, [r7, #4]
   1570c:	f7f1 fe32 	bl	7374 <z_impl_k_thread_abort>
}
   15710:	bf00      	nop
   15712:	3708      	adds	r7, #8
   15714:	46bd      	mov	sp, r7
   15716:	bd80      	pop	{r7, pc}

00015718 <log_panic>:
{
   15718:	b580      	push	{r7, lr}
   1571a:	af00      	add	r7, sp, #0
	z_impl_log_panic();
   1571c:	f7ed f8f0 	bl	2900 <z_impl_log_panic>
}
   15720:	bf00      	nop
   15722:	bd80      	pop	{r7, pc}

00015724 <log_strdup>:
 *	   a buffer from the pool (see CONFIG_LOG_STRDUP_MAX_STRING). In
 *	   some configurations, the original string pointer is returned.
 */
char *z_log_strdup(const char *str);
static inline char *log_strdup(const char *str)
{
   15724:	b580      	push	{r7, lr}
   15726:	b082      	sub	sp, #8
   15728:	af00      	add	r7, sp, #0
   1572a:	6078      	str	r0, [r7, #4]
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   1572c:	6878      	ldr	r0, [r7, #4]
   1572e:	f7ed fa2b 	bl	2b88 <z_log_strdup>
   15732:	4603      	mov	r3, r0
}
   15734:	4618      	mov	r0, r3
   15736:	3708      	adds	r7, #8
   15738:	46bd      	mov	sp, r7
   1573a:	bd80      	pop	{r7, pc}

0001573c <coredump>:

#else

void coredump(unsigned int reason, const z_arch_esf_t *esf,
	      struct k_thread *thread)
{
   1573c:	b480      	push	{r7}
   1573e:	b085      	sub	sp, #20
   15740:	af00      	add	r7, sp, #0
   15742:	60f8      	str	r0, [r7, #12]
   15744:	60b9      	str	r1, [r7, #8]
   15746:	607a      	str	r2, [r7, #4]
}
   15748:	bf00      	nop
   1574a:	3714      	adds	r7, #20
   1574c:	46bd      	mov	sp, r7
   1574e:	bc80      	pop	{r7}
   15750:	4770      	bx	lr

00015752 <arch_system_halt>:
{
   15752:	b480      	push	{r7}
   15754:	b085      	sub	sp, #20
   15756:	af00      	add	r7, sp, #0
   15758:	6078      	str	r0, [r7, #4]
	__asm__ volatile(
   1575a:	f04f 0320 	mov.w	r3, #32
   1575e:	f3ef 8211 	mrs	r2, BASEPRI
   15762:	f383 8811 	msr	BASEPRI, r3
   15766:	f3bf 8f6f 	isb	sy
   1576a:	60fa      	str	r2, [r7, #12]
   1576c:	60bb      	str	r3, [r7, #8]
	for (;;) {
   1576e:	e7fe      	b.n	1576e <arch_system_halt+0x1c>

00015770 <get_cpu>:
{
   15770:	b480      	push	{r7}
   15772:	af00      	add	r7, sp, #0
	return 0;
   15774:	2300      	movs	r3, #0
}
   15776:	4618      	mov	r0, r3
   15778:	46bd      	mov	sp, r7
   1577a:	bc80      	pop	{r7}
   1577c:	4770      	bx	lr

0001577e <sys_dlist_init>:
 *
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
   1577e:	b480      	push	{r7}
   15780:	b083      	sub	sp, #12
   15782:	af00      	add	r7, sp, #0
   15784:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   15786:	687b      	ldr	r3, [r7, #4]
   15788:	687a      	ldr	r2, [r7, #4]
   1578a:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   1578c:	687b      	ldr	r3, [r7, #4]
   1578e:	687a      	ldr	r2, [r7, #4]
   15790:	605a      	str	r2, [r3, #4]
}
   15792:	bf00      	nop
   15794:	370c      	adds	r7, #12
   15796:	46bd      	mov	sp, r7
   15798:	bc80      	pop	{r7}
   1579a:	4770      	bx	lr

0001579c <Z_KERNEL_STACK_BUFFER>:
#define K_KERNEL_STACK_SIZEOF(sym) (sizeof(sym) - K_KERNEL_STACK_RESERVED)

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
   1579c:	b480      	push	{r7}
   1579e:	b083      	sub	sp, #12
   157a0:	af00      	add	r7, sp, #0
   157a2:	6078      	str	r0, [r7, #4]
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   157a4:	687b      	ldr	r3, [r7, #4]
}
   157a6:	4618      	mov	r0, r3
   157a8:	370c      	adds	r7, #12
   157aa:	46bd      	mov	sp, r7
   157ac:	bc80      	pop	{r7}
   157ae:	4770      	bx	lr

000157b0 <z_mark_thread_as_started>:
{
   157b0:	b480      	push	{r7}
   157b2:	b083      	sub	sp, #12
   157b4:	af00      	add	r7, sp, #0
   157b6:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   157b8:	687b      	ldr	r3, [r7, #4]
   157ba:	7b5b      	ldrb	r3, [r3, #13]
   157bc:	f023 0304 	bic.w	r3, r3, #4
   157c0:	b2da      	uxtb	r2, r3
   157c2:	687b      	ldr	r3, [r7, #4]
   157c4:	735a      	strb	r2, [r3, #13]
}
   157c6:	bf00      	nop
   157c8:	370c      	adds	r7, #12
   157ca:	46bd      	mov	sp, r7
   157cc:	bc80      	pop	{r7}
   157ce:	4770      	bx	lr

000157d0 <gcov_static_init>:
#ifdef CONFIG_COVERAGE_GCOV
void gcov_coverage_dump(void);
void gcov_static_init(void);
#else
static inline void gcov_coverage_dump(void) { }
static inline void gcov_static_init(void) { }
   157d0:	b480      	push	{r7}
   157d2:	af00      	add	r7, sp, #0
   157d4:	bf00      	nop
   157d6:	46bd      	mov	sp, r7
   157d8:	bc80      	pop	{r7}
   157da:	4770      	bx	lr

000157dc <sys_dlist_init>:
{
   157dc:	b480      	push	{r7}
   157de:	b083      	sub	sp, #12
   157e0:	af00      	add	r7, sp, #0
   157e2:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   157e4:	687b      	ldr	r3, [r7, #4]
   157e6:	687a      	ldr	r2, [r7, #4]
   157e8:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   157ea:	687b      	ldr	r3, [r7, #4]
   157ec:	687a      	ldr	r2, [r7, #4]
   157ee:	605a      	str	r2, [r3, #4]
}
   157f0:	bf00      	nop
   157f2:	370c      	adds	r7, #12
   157f4:	46bd      	mov	sp, r7
   157f6:	bc80      	pop	{r7}
   157f8:	4770      	bx	lr

000157fa <z_object_init>:
{
   157fa:	b480      	push	{r7}
   157fc:	b083      	sub	sp, #12
   157fe:	af00      	add	r7, sp, #0
   15800:	6078      	str	r0, [r7, #4]
}
   15802:	bf00      	nop
   15804:	370c      	adds	r7, #12
   15806:	46bd      	mov	sp, r7
   15808:	bc80      	pop	{r7}
   1580a:	4770      	bx	lr

0001580c <z_waitq_init>:
#define _WAIT_Q_FOR_EACH(wq, thread_ptr) \
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
   1580c:	b580      	push	{r7, lr}
   1580e:	b082      	sub	sp, #8
   15810:	af00      	add	r7, sp, #0
   15812:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
   15814:	687b      	ldr	r3, [r7, #4]
   15816:	4618      	mov	r0, r3
   15818:	f7ff ffe0 	bl	157dc <sys_dlist_init>
}
   1581c:	bf00      	nop
   1581e:	3708      	adds	r7, #8
   15820:	46bd      	mov	sp, r7
   15822:	bd80      	pop	{r7, pc}

00015824 <create_free_list>:
{
   15824:	b480      	push	{r7}
   15826:	b085      	sub	sp, #20
   15828:	af00      	add	r7, sp, #0
   1582a:	6078      	str	r0, [r7, #4]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1582c:	687b      	ldr	r3, [r7, #4]
   1582e:	691b      	ldr	r3, [r3, #16]
   15830:	687a      	ldr	r2, [r7, #4]
   15832:	6952      	ldr	r2, [r2, #20]
   15834:	4313      	orrs	r3, r2
   15836:	f003 0303 	and.w	r3, r3, #3
   1583a:	2b00      	cmp	r3, #0
   1583c:	d002      	beq.n	15844 <create_free_list+0x20>
		return -EINVAL;
   1583e:	f06f 0315 	mvn.w	r3, #21
   15842:	e01d      	b.n	15880 <create_free_list+0x5c>
	slab->free_list = NULL;
   15844:	687b      	ldr	r3, [r7, #4]
   15846:	2200      	movs	r2, #0
   15848:	619a      	str	r2, [r3, #24]
	p = slab->buffer;
   1584a:	687b      	ldr	r3, [r7, #4]
   1584c:	695b      	ldr	r3, [r3, #20]
   1584e:	60bb      	str	r3, [r7, #8]
	for (j = 0U; j < slab->num_blocks; j++) {
   15850:	2300      	movs	r3, #0
   15852:	60fb      	str	r3, [r7, #12]
   15854:	e00e      	b.n	15874 <create_free_list+0x50>
		*(char **)p = slab->free_list;
   15856:	687b      	ldr	r3, [r7, #4]
   15858:	699a      	ldr	r2, [r3, #24]
   1585a:	68bb      	ldr	r3, [r7, #8]
   1585c:	601a      	str	r2, [r3, #0]
		slab->free_list = p;
   1585e:	687b      	ldr	r3, [r7, #4]
   15860:	68ba      	ldr	r2, [r7, #8]
   15862:	619a      	str	r2, [r3, #24]
		p += slab->block_size;
   15864:	687b      	ldr	r3, [r7, #4]
   15866:	691b      	ldr	r3, [r3, #16]
   15868:	68ba      	ldr	r2, [r7, #8]
   1586a:	4413      	add	r3, r2
   1586c:	60bb      	str	r3, [r7, #8]
	for (j = 0U; j < slab->num_blocks; j++) {
   1586e:	68fb      	ldr	r3, [r7, #12]
   15870:	3301      	adds	r3, #1
   15872:	60fb      	str	r3, [r7, #12]
   15874:	687b      	ldr	r3, [r7, #4]
   15876:	68db      	ldr	r3, [r3, #12]
   15878:	68fa      	ldr	r2, [r7, #12]
   1587a:	429a      	cmp	r2, r3
   1587c:	d3eb      	bcc.n	15856 <create_free_list+0x32>
	return 0;
   1587e:	2300      	movs	r3, #0
}
   15880:	4618      	mov	r0, r3
   15882:	3714      	adds	r7, #20
   15884:	46bd      	mov	sp, r7
   15886:	bc80      	pop	{r7}
   15888:	4770      	bx	lr

0001588a <k_mem_slab_init>:
{
   1588a:	b580      	push	{r7, lr}
   1588c:	b086      	sub	sp, #24
   1588e:	af00      	add	r7, sp, #0
   15890:	60f8      	str	r0, [r7, #12]
   15892:	60b9      	str	r1, [r7, #8]
   15894:	607a      	str	r2, [r7, #4]
   15896:	603b      	str	r3, [r7, #0]
	int rc = 0;
   15898:	2300      	movs	r3, #0
   1589a:	617b      	str	r3, [r7, #20]
	slab->num_blocks = num_blocks;
   1589c:	68fb      	ldr	r3, [r7, #12]
   1589e:	683a      	ldr	r2, [r7, #0]
   158a0:	60da      	str	r2, [r3, #12]
	slab->block_size = block_size;
   158a2:	68fb      	ldr	r3, [r7, #12]
   158a4:	687a      	ldr	r2, [r7, #4]
   158a6:	611a      	str	r2, [r3, #16]
	slab->buffer = buffer;
   158a8:	68fb      	ldr	r3, [r7, #12]
   158aa:	68ba      	ldr	r2, [r7, #8]
   158ac:	615a      	str	r2, [r3, #20]
	slab->num_used = 0U;
   158ae:	68fb      	ldr	r3, [r7, #12]
   158b0:	2200      	movs	r2, #0
   158b2:	61da      	str	r2, [r3, #28]
	slab->lock = (struct k_spinlock) {};
   158b4:	68fb      	ldr	r3, [r7, #12]
   158b6:	2200      	movs	r2, #0
   158b8:	609a      	str	r2, [r3, #8]
	rc = create_free_list(slab);
   158ba:	68f8      	ldr	r0, [r7, #12]
   158bc:	f7ff ffb2 	bl	15824 <create_free_list>
   158c0:	6178      	str	r0, [r7, #20]
	if (rc < 0) {
   158c2:	697b      	ldr	r3, [r7, #20]
   158c4:	2b00      	cmp	r3, #0
   158c6:	db07      	blt.n	158d8 <k_mem_slab_init+0x4e>
	z_waitq_init(&slab->wait_q);
   158c8:	68fb      	ldr	r3, [r7, #12]
   158ca:	4618      	mov	r0, r3
   158cc:	f7ff ff9e 	bl	1580c <z_waitq_init>
	z_object_init(slab);
   158d0:	68f8      	ldr	r0, [r7, #12]
   158d2:	f7ff ff92 	bl	157fa <z_object_init>
   158d6:	e000      	b.n	158da <k_mem_slab_init+0x50>
		goto out;
   158d8:	bf00      	nop
	return rc;
   158da:	697b      	ldr	r3, [r7, #20]
}
   158dc:	4618      	mov	r0, r3
   158de:	3718      	adds	r7, #24
   158e0:	46bd      	mov	sp, r7
   158e2:	bd80      	pop	{r7, pc}

000158e4 <sys_dlist_init>:
{
   158e4:	b480      	push	{r7}
   158e6:	b083      	sub	sp, #12
   158e8:	af00      	add	r7, sp, #0
   158ea:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   158ec:	687b      	ldr	r3, [r7, #4]
   158ee:	687a      	ldr	r2, [r7, #4]
   158f0:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   158f2:	687b      	ldr	r3, [r7, #4]
   158f4:	687a      	ldr	r2, [r7, #4]
   158f6:	605a      	str	r2, [r3, #4]
}
   158f8:	bf00      	nop
   158fa:	370c      	adds	r7, #12
   158fc:	46bd      	mov	sp, r7
   158fe:	bc80      	pop	{r7}
   15900:	4770      	bx	lr

00015902 <sys_dnode_init>:
 *
 * @return N/A
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
   15902:	b480      	push	{r7}
   15904:	b083      	sub	sp, #12
   15906:	af00      	add	r7, sp, #0
   15908:	6078      	str	r0, [r7, #4]
	node->next = NULL;
   1590a:	687b      	ldr	r3, [r7, #4]
   1590c:	2200      	movs	r2, #0
   1590e:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
   15910:	687b      	ldr	r3, [r7, #4]
   15912:	2200      	movs	r2, #0
   15914:	605a      	str	r2, [r3, #4]
}
   15916:	bf00      	nop
   15918:	370c      	adds	r7, #12
   1591a:	46bd      	mov	sp, r7
   1591c:	bc80      	pop	{r7}
   1591e:	4770      	bx	lr

00015920 <k_is_user_context>:
{
   15920:	b480      	push	{r7}
   15922:	af00      	add	r7, sp, #0
	return false;
   15924:	2300      	movs	r3, #0
}
   15926:	4618      	mov	r0, r3
   15928:	46bd      	mov	sp, r7
   1592a:	bc80      	pop	{r7}
   1592c:	4770      	bx	lr

0001592e <k_ms_to_ticks_ceil64>:
{
   1592e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   15932:	b08c      	sub	sp, #48	; 0x30
   15934:	af00      	add	r7, sp, #0
   15936:	e9c7 0100 	strd	r0, r1, [r7]
   1593a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1593e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   15946:	627b      	str	r3, [r7, #36]	; 0x24
   15948:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1594c:	623b      	str	r3, [r7, #32]
   1594e:	2301      	movs	r3, #1
   15950:	77fb      	strb	r3, [r7, #31]
   15952:	2300      	movs	r3, #0
   15954:	77bb      	strb	r3, [r7, #30]
   15956:	2301      	movs	r3, #1
   15958:	777b      	strb	r3, [r7, #29]
   1595a:	2300      	movs	r3, #0
   1595c:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   1595e:	7ffb      	ldrb	r3, [r7, #31]
   15960:	2b00      	cmp	r3, #0
   15962:	d00f      	beq.n	15984 <k_ms_to_ticks_ceil64+0x56>
	bool mul_ratio = const_hz &&
   15964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15966:	6a3b      	ldr	r3, [r7, #32]
   15968:	429a      	cmp	r2, r3
   1596a:	d20b      	bcs.n	15984 <k_ms_to_ticks_ceil64+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   1596c:	6a3b      	ldr	r3, [r7, #32]
   1596e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15970:	fbb3 f2f2 	udiv	r2, r3, r2
   15974:	6a79      	ldr	r1, [r7, #36]	; 0x24
   15976:	fb01 f202 	mul.w	r2, r1, r2
   1597a:	1a9b      	subs	r3, r3, r2
   1597c:	2b00      	cmp	r3, #0
   1597e:	d101      	bne.n	15984 <k_ms_to_ticks_ceil64+0x56>
   15980:	2301      	movs	r3, #1
   15982:	e000      	b.n	15986 <k_ms_to_ticks_ceil64+0x58>
   15984:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   15986:	76fb      	strb	r3, [r7, #27]
   15988:	7efb      	ldrb	r3, [r7, #27]
   1598a:	f003 0301 	and.w	r3, r3, #1
   1598e:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   15990:	7ffb      	ldrb	r3, [r7, #31]
   15992:	2b00      	cmp	r3, #0
   15994:	d00f      	beq.n	159b6 <k_ms_to_ticks_ceil64+0x88>
	bool div_ratio = const_hz &&
   15996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15998:	6a3b      	ldr	r3, [r7, #32]
   1599a:	429a      	cmp	r2, r3
   1599c:	d90b      	bls.n	159b6 <k_ms_to_ticks_ceil64+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   1599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   159a0:	6a3a      	ldr	r2, [r7, #32]
   159a2:	fbb3 f2f2 	udiv	r2, r3, r2
   159a6:	6a39      	ldr	r1, [r7, #32]
   159a8:	fb01 f202 	mul.w	r2, r1, r2
   159ac:	1a9b      	subs	r3, r3, r2
   159ae:	2b00      	cmp	r3, #0
   159b0:	d101      	bne.n	159b6 <k_ms_to_ticks_ceil64+0x88>
   159b2:	2301      	movs	r3, #1
   159b4:	e000      	b.n	159b8 <k_ms_to_ticks_ceil64+0x8a>
   159b6:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   159b8:	76bb      	strb	r3, [r7, #26]
   159ba:	7ebb      	ldrb	r3, [r7, #26]
   159bc:	f003 0301 	and.w	r3, r3, #1
   159c0:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   159c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   159c4:	6a3b      	ldr	r3, [r7, #32]
   159c6:	429a      	cmp	r2, r3
   159c8:	d10a      	bne.n	159e0 <k_ms_to_ticks_ceil64+0xb2>
		return result32 ? ((uint32_t)t) : t;
   159ca:	7fbb      	ldrb	r3, [r7, #30]
   159cc:	2b00      	cmp	r3, #0
   159ce:	d004      	beq.n	159da <k_ms_to_ticks_ceil64+0xac>
   159d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   159d2:	461a      	mov	r2, r3
   159d4:	f04f 0300 	mov.w	r3, #0
   159d8:	e0c7      	b.n	15b6a <k_ms_to_ticks_ceil64+0x23c>
   159da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   159de:	e0c4      	b.n	15b6a <k_ms_to_ticks_ceil64+0x23c>
	uint64_t off = 0;
   159e0:	f04f 0200 	mov.w	r2, #0
   159e4:	f04f 0300 	mov.w	r3, #0
   159e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   159ec:	7efb      	ldrb	r3, [r7, #27]
   159ee:	f083 0301 	eor.w	r3, r3, #1
   159f2:	b2db      	uxtb	r3, r3
   159f4:	2b00      	cmp	r3, #0
   159f6:	d01d      	beq.n	15a34 <k_ms_to_ticks_ceil64+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   159f8:	7ebb      	ldrb	r3, [r7, #26]
   159fa:	2b00      	cmp	r3, #0
   159fc:	d004      	beq.n	15a08 <k_ms_to_ticks_ceil64+0xda>
   159fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15a00:	6a3b      	ldr	r3, [r7, #32]
   15a02:	fbb2 f3f3 	udiv	r3, r2, r3
   15a06:	e000      	b.n	15a0a <k_ms_to_ticks_ceil64+0xdc>
   15a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15a0a:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   15a0c:	7f7b      	ldrb	r3, [r7, #29]
   15a0e:	2b00      	cmp	r3, #0
   15a10:	d006      	beq.n	15a20 <k_ms_to_ticks_ceil64+0xf2>
			off = rdivisor - 1U;
   15a12:	68fb      	ldr	r3, [r7, #12]
   15a14:	3b01      	subs	r3, #1
   15a16:	461a      	mov	r2, r3
   15a18:	f04f 0300 	mov.w	r3, #0
   15a1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   15a20:	7f3b      	ldrb	r3, [r7, #28]
   15a22:	2b00      	cmp	r3, #0
   15a24:	d006      	beq.n	15a34 <k_ms_to_ticks_ceil64+0x106>
			off = rdivisor / 2U;
   15a26:	68fb      	ldr	r3, [r7, #12]
   15a28:	085b      	lsrs	r3, r3, #1
   15a2a:	461a      	mov	r2, r3
   15a2c:	f04f 0300 	mov.w	r3, #0
   15a30:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   15a34:	7ebb      	ldrb	r3, [r7, #26]
   15a36:	2b00      	cmp	r3, #0
   15a38:	d02a      	beq.n	15a90 <k_ms_to_ticks_ceil64+0x162>
		t += off;
   15a3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15a3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   15a42:	1884      	adds	r4, r0, r2
   15a44:	eb41 0503 	adc.w	r5, r1, r3
   15a48:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   15a4c:	7fbb      	ldrb	r3, [r7, #30]
   15a4e:	2b00      	cmp	r3, #0
   15a50:	d010      	beq.n	15a74 <k_ms_to_ticks_ceil64+0x146>
   15a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   15a56:	2b01      	cmp	r3, #1
   15a58:	bf08      	it	eq
   15a5a:	2a00      	cmpeq	r2, #0
   15a5c:	d20a      	bcs.n	15a74 <k_ms_to_ticks_ceil64+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
   15a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
   15a62:	6a3b      	ldr	r3, [r7, #32]
   15a64:	fbb1 f3f3 	udiv	r3, r1, r3
   15a68:	fbb2 f3f3 	udiv	r3, r2, r3
   15a6c:	461a      	mov	r2, r3
   15a6e:	f04f 0300 	mov.w	r3, #0
   15a72:	e07a      	b.n	15b6a <k_ms_to_ticks_ceil64+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
   15a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15a76:	6a3b      	ldr	r3, [r7, #32]
   15a78:	fbb2 f3f3 	udiv	r3, r2, r3
   15a7c:	461a      	mov	r2, r3
   15a7e:	f04f 0300 	mov.w	r3, #0
   15a82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15a86:	f7ea fb5d 	bl	144 <__aeabi_uldivmod>
   15a8a:	4602      	mov	r2, r0
   15a8c:	460b      	mov	r3, r1
   15a8e:	e06c      	b.n	15b6a <k_ms_to_ticks_ceil64+0x23c>
	} else if (mul_ratio) {
   15a90:	7efb      	ldrb	r3, [r7, #27]
   15a92:	2b00      	cmp	r3, #0
   15a94:	d021      	beq.n	15ada <k_ms_to_ticks_ceil64+0x1ac>
		if (result32) {
   15a96:	7fbb      	ldrb	r3, [r7, #30]
   15a98:	2b00      	cmp	r3, #0
   15a9a:	d00a      	beq.n	15ab2 <k_ms_to_ticks_ceil64+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
   15a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15a9e:	6a39      	ldr	r1, [r7, #32]
   15aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15aa2:	fbb1 f2f2 	udiv	r2, r1, r2
   15aa6:	fb02 f303 	mul.w	r3, r2, r3
   15aaa:	461a      	mov	r2, r3
   15aac:	f04f 0300 	mov.w	r3, #0
   15ab0:	e05b      	b.n	15b6a <k_ms_to_ticks_ceil64+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
   15ab2:	6a3a      	ldr	r2, [r7, #32]
   15ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15ab6:	fbb2 f3f3 	udiv	r3, r2, r3
   15aba:	461a      	mov	r2, r3
   15abc:	f04f 0300 	mov.w	r3, #0
   15ac0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   15ac2:	fb03 f001 	mul.w	r0, r3, r1
   15ac6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   15ac8:	fb02 f101 	mul.w	r1, r2, r1
   15acc:	4401      	add	r1, r0
   15ace:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   15ad0:	fba0 2302 	umull	r2, r3, r0, r2
   15ad4:	4419      	add	r1, r3
   15ad6:	460b      	mov	r3, r1
   15ad8:	e047      	b.n	15b6a <k_ms_to_ticks_ceil64+0x23c>
		if (result32) {
   15ada:	7fbb      	ldrb	r3, [r7, #30]
   15adc:	2b00      	cmp	r3, #0
   15ade:	d024      	beq.n	15b2a <k_ms_to_ticks_ceil64+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   15ae0:	6a3b      	ldr	r3, [r7, #32]
   15ae2:	461a      	mov	r2, r3
   15ae4:	f04f 0300 	mov.w	r3, #0
   15ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   15aea:	fb03 f001 	mul.w	r0, r3, r1
   15aee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   15af0:	fb02 f101 	mul.w	r1, r2, r1
   15af4:	4401      	add	r1, r0
   15af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   15af8:	fba0 2302 	umull	r2, r3, r0, r2
   15afc:	4419      	add	r1, r3
   15afe:	460b      	mov	r3, r1
   15b00:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15b04:	eb12 0a00 	adds.w	sl, r2, r0
   15b08:	eb43 0b01 	adc.w	fp, r3, r1
   15b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15b0e:	461a      	mov	r2, r3
   15b10:	f04f 0300 	mov.w	r3, #0
   15b14:	4650      	mov	r0, sl
   15b16:	4659      	mov	r1, fp
   15b18:	f7ea fb14 	bl	144 <__aeabi_uldivmod>
   15b1c:	4602      	mov	r2, r0
   15b1e:	460b      	mov	r3, r1
   15b20:	4613      	mov	r3, r2
   15b22:	461a      	mov	r2, r3
   15b24:	f04f 0300 	mov.w	r3, #0
   15b28:	e01f      	b.n	15b6a <k_ms_to_ticks_ceil64+0x23c>
			return (t * to_hz + off) / from_hz;
   15b2a:	6a3b      	ldr	r3, [r7, #32]
   15b2c:	461a      	mov	r2, r3
   15b2e:	f04f 0300 	mov.w	r3, #0
   15b32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   15b34:	fb03 f001 	mul.w	r0, r3, r1
   15b38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   15b3a:	fb02 f101 	mul.w	r1, r2, r1
   15b3e:	4401      	add	r1, r0
   15b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   15b42:	fba0 2302 	umull	r2, r3, r0, r2
   15b46:	4419      	add	r1, r3
   15b48:	460b      	mov	r3, r1
   15b4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15b4e:	eb12 0800 	adds.w	r8, r2, r0
   15b52:	eb43 0901 	adc.w	r9, r3, r1
   15b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15b58:	461a      	mov	r2, r3
   15b5a:	f04f 0300 	mov.w	r3, #0
   15b5e:	4640      	mov	r0, r8
   15b60:	4649      	mov	r1, r9
   15b62:	f7ea faef 	bl	144 <__aeabi_uldivmod>
   15b66:	4602      	mov	r2, r0
   15b68:	460b      	mov	r3, r1
}
   15b6a:	4610      	mov	r0, r2
   15b6c:	4619      	mov	r1, r3
   15b6e:	3730      	adds	r7, #48	; 0x30
   15b70:	46bd      	mov	sp, r7
   15b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

00015b76 <Z_KERNEL_STACK_BUFFER>:
{
   15b76:	b480      	push	{r7}
   15b78:	b083      	sub	sp, #12
   15b7a:	af00      	add	r7, sp, #0
   15b7c:	6078      	str	r0, [r7, #4]
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   15b7e:	687b      	ldr	r3, [r7, #4]
}
   15b80:	4618      	mov	r0, r3
   15b82:	370c      	adds	r7, #12
   15b84:	46bd      	mov	sp, r7
   15b86:	bc80      	pop	{r7}
   15b88:	4770      	bx	lr

00015b8a <k_thread_start>:
{
   15b8a:	b580      	push	{r7, lr}
   15b8c:	b082      	sub	sp, #8
   15b8e:	af00      	add	r7, sp, #0
   15b90:	6078      	str	r0, [r7, #4]
	z_impl_k_thread_start(thread);
   15b92:	6878      	ldr	r0, [r7, #4]
   15b94:	f000 f850 	bl	15c38 <z_impl_k_thread_start>
}
   15b98:	bf00      	nop
   15b9a:	3708      	adds	r7, #8
   15b9c:	46bd      	mov	sp, r7
   15b9e:	bd80      	pop	{r7, pc}

00015ba0 <z_init_timeout>:
{
   15ba0:	b580      	push	{r7, lr}
   15ba2:	b082      	sub	sp, #8
   15ba4:	af00      	add	r7, sp, #0
   15ba6:	6078      	str	r0, [r7, #4]
	sys_dnode_init(&to->node);
   15ba8:	687b      	ldr	r3, [r7, #4]
   15baa:	4618      	mov	r0, r3
   15bac:	f7ff fea9 	bl	15902 <sys_dnode_init>
}
   15bb0:	bf00      	nop
   15bb2:	3708      	adds	r7, #8
   15bb4:	46bd      	mov	sp, r7
   15bb6:	bd80      	pop	{r7, pc}

00015bb8 <z_init_thread_timeout>:
{
   15bb8:	b580      	push	{r7, lr}
   15bba:	b082      	sub	sp, #8
   15bbc:	af00      	add	r7, sp, #0
   15bbe:	6078      	str	r0, [r7, #4]
	z_init_timeout(&thread_base->timeout);
   15bc0:	687b      	ldr	r3, [r7, #4]
   15bc2:	3318      	adds	r3, #24
   15bc4:	4618      	mov	r0, r3
   15bc6:	f7ff ffeb 	bl	15ba0 <z_init_timeout>
}
   15bca:	bf00      	nop
   15bcc:	3708      	adds	r7, #8
   15bce:	46bd      	mov	sp, r7
   15bd0:	bd80      	pop	{r7, pc}

00015bd2 <z_waitq_init>:
{
   15bd2:	b580      	push	{r7, lr}
   15bd4:	b082      	sub	sp, #8
   15bd6:	af00      	add	r7, sp, #0
   15bd8:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
   15bda:	687b      	ldr	r3, [r7, #4]
   15bdc:	4618      	mov	r0, r3
   15bde:	f7ff fe81 	bl	158e4 <sys_dlist_init>
}
   15be2:	bf00      	nop
   15be4:	3708      	adds	r7, #8
   15be6:	46bd      	mov	sp, r7
   15be8:	bd80      	pop	{r7, pc}

00015bea <k_is_in_isr>:
{
   15bea:	b480      	push	{r7}
   15bec:	b083      	sub	sp, #12
   15bee:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15bf0:	f3ef 8305 	mrs	r3, IPSR
   15bf4:	607b      	str	r3, [r7, #4]
  return(result);
   15bf6:	687b      	ldr	r3, [r7, #4]
   15bf8:	2b00      	cmp	r3, #0
   15bfa:	bf14      	ite	ne
   15bfc:	2301      	movne	r3, #1
   15bfe:	2300      	moveq	r3, #0
   15c00:	b2db      	uxtb	r3, r3
}
   15c02:	4618      	mov	r0, r3
   15c04:	370c      	adds	r7, #12
   15c06:	46bd      	mov	sp, r7
   15c08:	bc80      	pop	{r7}
   15c0a:	4770      	bx	lr

00015c0c <z_impl_k_thread_name_set>:
{
   15c0c:	b480      	push	{r7}
   15c0e:	b083      	sub	sp, #12
   15c10:	af00      	add	r7, sp, #0
   15c12:	6078      	str	r0, [r7, #4]
   15c14:	6039      	str	r1, [r7, #0]
	return -ENOSYS;
   15c16:	f06f 0357 	mvn.w	r3, #87	; 0x57
}
   15c1a:	4618      	mov	r0, r3
   15c1c:	370c      	adds	r7, #12
   15c1e:	46bd      	mov	sp, r7
   15c20:	bc80      	pop	{r7}
   15c22:	4770      	bx	lr

00015c24 <k_thread_name_get>:
{
   15c24:	b480      	push	{r7}
   15c26:	b083      	sub	sp, #12
   15c28:	af00      	add	r7, sp, #0
   15c2a:	6078      	str	r0, [r7, #4]
	return NULL;
   15c2c:	2300      	movs	r3, #0
}
   15c2e:	4618      	mov	r0, r3
   15c30:	370c      	adds	r7, #12
   15c32:	46bd      	mov	sp, r7
   15c34:	bc80      	pop	{r7}
   15c36:	4770      	bx	lr

00015c38 <z_impl_k_thread_start>:
{
   15c38:	b580      	push	{r7, lr}
   15c3a:	b082      	sub	sp, #8
   15c3c:	af00      	add	r7, sp, #0
   15c3e:	6078      	str	r0, [r7, #4]
	z_sched_start(thread);
   15c40:	6878      	ldr	r0, [r7, #4]
   15c42:	f7f7 faa7 	bl	d194 <z_sched_start>
}
   15c46:	bf00      	nop
   15c48:	3708      	adds	r7, #8
   15c4a:	46bd      	mov	sp, r7
   15c4c:	bd80      	pop	{r7, pc}

00015c4e <schedule_new_thread>:
{
   15c4e:	b580      	push	{r7, lr}
   15c50:	b084      	sub	sp, #16
   15c52:	af00      	add	r7, sp, #0
   15c54:	60f8      	str	r0, [r7, #12]
   15c56:	e9c7 2300 	strd	r2, r3, [r7]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
   15c5e:	f04f 0000 	mov.w	r0, #0
   15c62:	f04f 0100 	mov.w	r1, #0
   15c66:	428b      	cmp	r3, r1
   15c68:	bf08      	it	eq
   15c6a:	4282      	cmpeq	r2, r0
   15c6c:	d103      	bne.n	15c76 <schedule_new_thread+0x28>
		k_thread_start(thread);
   15c6e:	68f8      	ldr	r0, [r7, #12]
   15c70:	f7ff ff8b 	bl	15b8a <k_thread_start>
   15c74:	e004      	b.n	15c80 <schedule_new_thread+0x32>
		z_add_thread_timeout(thread, delay);
   15c76:	e9d7 2300 	ldrd	r2, r3, [r7]
   15c7a:	68f8      	ldr	r0, [r7, #12]
   15c7c:	f7f5 fc4a 	bl	b514 <z_add_thread_timeout>
}
   15c80:	bf00      	nop
   15c82:	3710      	adds	r7, #16
   15c84:	46bd      	mov	sp, r7
   15c86:	bd80      	pop	{r7, pc}

00015c88 <z_init_thread_base>:
{
   15c88:	b580      	push	{r7, lr}
   15c8a:	b084      	sub	sp, #16
   15c8c:	af00      	add	r7, sp, #0
   15c8e:	60f8      	str	r0, [r7, #12]
   15c90:	60b9      	str	r1, [r7, #8]
   15c92:	607a      	str	r2, [r7, #4]
   15c94:	603b      	str	r3, [r7, #0]
	thread_base->pended_on = NULL;
   15c96:	68fb      	ldr	r3, [r7, #12]
   15c98:	2200      	movs	r2, #0
   15c9a:	609a      	str	r2, [r3, #8]
	thread_base->user_options = (uint8_t)options;
   15c9c:	683b      	ldr	r3, [r7, #0]
   15c9e:	b2da      	uxtb	r2, r3
   15ca0:	68fb      	ldr	r3, [r7, #12]
   15ca2:	731a      	strb	r2, [r3, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   15ca4:	687b      	ldr	r3, [r7, #4]
   15ca6:	b2da      	uxtb	r2, r3
   15ca8:	68fb      	ldr	r3, [r7, #12]
   15caa:	735a      	strb	r2, [r3, #13]
	thread_base->prio = priority;
   15cac:	68bb      	ldr	r3, [r7, #8]
   15cae:	b25a      	sxtb	r2, r3
   15cb0:	68fb      	ldr	r3, [r7, #12]
   15cb2:	739a      	strb	r2, [r3, #14]
	thread_base->sched_locked = 0U;
   15cb4:	68fb      	ldr	r3, [r7, #12]
   15cb6:	2200      	movs	r2, #0
   15cb8:	73da      	strb	r2, [r3, #15]
	z_init_thread_timeout(thread_base);
   15cba:	68f8      	ldr	r0, [r7, #12]
   15cbc:	f7ff ff7c 	bl	15bb8 <z_init_thread_timeout>
}
   15cc0:	bf00      	nop
   15cc2:	3710      	adds	r7, #16
   15cc4:	46bd      	mov	sp, r7
   15cc6:	bd80      	pop	{r7, pc}

00015cc8 <k_cpu_idle>:
{
   15cc8:	b580      	push	{r7, lr}
   15cca:	af00      	add	r7, sp, #0
	arch_cpu_idle();
   15ccc:	f7ef ff2e 	bl	5b2c <arch_cpu_idle>
}
   15cd0:	bf00      	nop
   15cd2:	bd80      	pop	{r7, pc}

00015cd4 <z_pm_save_idle_exit>:
{
   15cd4:	b580      	push	{r7, lr}
   15cd6:	b082      	sub	sp, #8
   15cd8:	af00      	add	r7, sp, #0
   15cda:	6078      	str	r0, [r7, #4]
	pm_system_resume();
   15cdc:	f7ee f9b0 	bl	4040 <pm_system_resume>
	sys_clock_idle_exit();
   15ce0:	f7fc fb8a 	bl	123f8 <sys_clock_idle_exit>
}
   15ce4:	bf00      	nop
   15ce6:	3708      	adds	r7, #8
   15ce8:	46bd      	mov	sp, r7
   15cea:	bd80      	pop	{r7, pc}

00015cec <sys_dlist_init>:
{
   15cec:	b480      	push	{r7}
   15cee:	b083      	sub	sp, #12
   15cf0:	af00      	add	r7, sp, #0
   15cf2:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   15cf4:	687b      	ldr	r3, [r7, #4]
   15cf6:	687a      	ldr	r2, [r7, #4]
   15cf8:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   15cfa:	687b      	ldr	r3, [r7, #4]
   15cfc:	687a      	ldr	r2, [r7, #4]
   15cfe:	605a      	str	r2, [r3, #4]
}
   15d00:	bf00      	nop
   15d02:	370c      	adds	r7, #12
   15d04:	46bd      	mov	sp, r7
   15d06:	bc80      	pop	{r7}
   15d08:	4770      	bx	lr

00015d0a <sys_dnode_is_linked>:
 *
 * @return true if node is linked into a list, false if it is not
 */

static inline bool sys_dnode_is_linked(const sys_dnode_t *node)
{
   15d0a:	b480      	push	{r7}
   15d0c:	b083      	sub	sp, #12
   15d0e:	af00      	add	r7, sp, #0
   15d10:	6078      	str	r0, [r7, #4]
	return node->next != NULL;
   15d12:	687b      	ldr	r3, [r7, #4]
   15d14:	681b      	ldr	r3, [r3, #0]
   15d16:	2b00      	cmp	r3, #0
   15d18:	bf14      	ite	ne
   15d1a:	2301      	movne	r3, #1
   15d1c:	2300      	moveq	r3, #0
   15d1e:	b2db      	uxtb	r3, r3
}
   15d20:	4618      	mov	r0, r3
   15d22:	370c      	adds	r7, #12
   15d24:	46bd      	mov	sp, r7
   15d26:	bc80      	pop	{r7}
   15d28:	4770      	bx	lr

00015d2a <sys_dlist_is_empty>:
 *
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
   15d2a:	b480      	push	{r7}
   15d2c:	b083      	sub	sp, #12
   15d2e:	af00      	add	r7, sp, #0
   15d30:	6078      	str	r0, [r7, #4]
	return list->head == list;
   15d32:	687b      	ldr	r3, [r7, #4]
   15d34:	681b      	ldr	r3, [r3, #0]
   15d36:	687a      	ldr	r2, [r7, #4]
   15d38:	429a      	cmp	r2, r3
   15d3a:	bf0c      	ite	eq
   15d3c:	2301      	moveq	r3, #1
   15d3e:	2300      	movne	r3, #0
   15d40:	b2db      	uxtb	r3, r3
}
   15d42:	4618      	mov	r0, r3
   15d44:	370c      	adds	r7, #12
   15d46:	46bd      	mov	sp, r7
   15d48:	bc80      	pop	{r7}
   15d4a:	4770      	bx	lr

00015d4c <sys_dlist_peek_head>:
 *
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
   15d4c:	b580      	push	{r7, lr}
   15d4e:	b082      	sub	sp, #8
   15d50:	af00      	add	r7, sp, #0
   15d52:	6078      	str	r0, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15d54:	6878      	ldr	r0, [r7, #4]
   15d56:	f7ff ffe8 	bl	15d2a <sys_dlist_is_empty>
   15d5a:	4603      	mov	r3, r0
   15d5c:	2b00      	cmp	r3, #0
   15d5e:	d102      	bne.n	15d66 <sys_dlist_peek_head+0x1a>
   15d60:	687b      	ldr	r3, [r7, #4]
   15d62:	681b      	ldr	r3, [r3, #0]
   15d64:	e000      	b.n	15d68 <sys_dlist_peek_head+0x1c>
   15d66:	2300      	movs	r3, #0
}
   15d68:	4618      	mov	r0, r3
   15d6a:	3708      	adds	r7, #8
   15d6c:	46bd      	mov	sp, r7
   15d6e:	bd80      	pop	{r7, pc}

00015d70 <k_is_user_context>:
{
   15d70:	b480      	push	{r7}
   15d72:	af00      	add	r7, sp, #0
	return false;
   15d74:	2300      	movs	r3, #0
}
   15d76:	4618      	mov	r0, r3
   15d78:	46bd      	mov	sp, r7
   15d7a:	bc80      	pop	{r7}
   15d7c:	4770      	bx	lr

00015d7e <z_object_init>:
{
   15d7e:	b480      	push	{r7}
   15d80:	b083      	sub	sp, #12
   15d82:	af00      	add	r7, sp, #0
   15d84:	6078      	str	r0, [r7, #4]
}
   15d86:	bf00      	nop
   15d88:	370c      	adds	r7, #12
   15d8a:	46bd      	mov	sp, r7
   15d8c:	bc80      	pop	{r7}
   15d8e:	4770      	bx	lr

00015d90 <z_is_inactive_timeout>:
{
   15d90:	b580      	push	{r7, lr}
   15d92:	b082      	sub	sp, #8
   15d94:	af00      	add	r7, sp, #0
   15d96:	6078      	str	r0, [r7, #4]
	return !sys_dnode_is_linked(&to->node);
   15d98:	687b      	ldr	r3, [r7, #4]
   15d9a:	4618      	mov	r0, r3
   15d9c:	f7ff ffb5 	bl	15d0a <sys_dnode_is_linked>
   15da0:	4603      	mov	r3, r0
   15da2:	2b00      	cmp	r3, #0
   15da4:	bf14      	ite	ne
   15da6:	2301      	movne	r3, #1
   15da8:	2300      	moveq	r3, #0
   15daa:	b2db      	uxtb	r3, r3
   15dac:	f083 0301 	eor.w	r3, r3, #1
   15db0:	b2db      	uxtb	r3, r3
   15db2:	f003 0301 	and.w	r3, r3, #1
   15db6:	b2db      	uxtb	r3, r3
}
   15db8:	4618      	mov	r0, r3
   15dba:	3708      	adds	r7, #8
   15dbc:	46bd      	mov	sp, r7
   15dbe:	bd80      	pop	{r7, pc}

00015dc0 <z_is_thread_prevented_from_running>:
{
   15dc0:	b480      	push	{r7}
   15dc2:	b085      	sub	sp, #20
   15dc4:	af00      	add	r7, sp, #0
   15dc6:	6078      	str	r0, [r7, #4]
	uint8_t state = thread->base.thread_state;
   15dc8:	687b      	ldr	r3, [r7, #4]
   15dca:	7b5b      	ldrb	r3, [r3, #13]
   15dcc:	73fb      	strb	r3, [r7, #15]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   15dce:	7bfb      	ldrb	r3, [r7, #15]
   15dd0:	f003 031f 	and.w	r3, r3, #31
			 _THREAD_DUMMY | _THREAD_SUSPENDED)) != 0U;
   15dd4:	2b00      	cmp	r3, #0
   15dd6:	bf14      	ite	ne
   15dd8:	2301      	movne	r3, #1
   15dda:	2300      	moveq	r3, #0
   15ddc:	b2db      	uxtb	r3, r3
}
   15dde:	4618      	mov	r0, r3
   15de0:	3714      	adds	r7, #20
   15de2:	46bd      	mov	sp, r7
   15de4:	bc80      	pop	{r7}
   15de6:	4770      	bx	lr

00015de8 <z_is_thread_timeout_active>:
{
   15de8:	b580      	push	{r7, lr}
   15dea:	b082      	sub	sp, #8
   15dec:	af00      	add	r7, sp, #0
   15dee:	6078      	str	r0, [r7, #4]
	return !z_is_inactive_timeout(&thread->base.timeout);
   15df0:	687b      	ldr	r3, [r7, #4]
   15df2:	3318      	adds	r3, #24
   15df4:	4618      	mov	r0, r3
   15df6:	f7ff ffcb 	bl	15d90 <z_is_inactive_timeout>
   15dfa:	4603      	mov	r3, r0
   15dfc:	2b00      	cmp	r3, #0
   15dfe:	bf14      	ite	ne
   15e00:	2301      	movne	r3, #1
   15e02:	2300      	moveq	r3, #0
   15e04:	b2db      	uxtb	r3, r3
   15e06:	f083 0301 	eor.w	r3, r3, #1
   15e0a:	b2db      	uxtb	r3, r3
   15e0c:	f003 0301 	and.w	r3, r3, #1
   15e10:	b2db      	uxtb	r3, r3
}
   15e12:	4618      	mov	r0, r3
   15e14:	3708      	adds	r7, #8
   15e16:	46bd      	mov	sp, r7
   15e18:	bd80      	pop	{r7, pc}

00015e1a <z_is_thread_ready>:
{
   15e1a:	b580      	push	{r7, lr}
   15e1c:	b082      	sub	sp, #8
   15e1e:	af00      	add	r7, sp, #0
   15e20:	6078      	str	r0, [r7, #4]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   15e22:	6878      	ldr	r0, [r7, #4]
   15e24:	f7ff ffcc 	bl	15dc0 <z_is_thread_prevented_from_running>
   15e28:	4603      	mov	r3, r0
   15e2a:	f083 0301 	eor.w	r3, r3, #1
   15e2e:	b2db      	uxtb	r3, r3
   15e30:	2b00      	cmp	r3, #0
   15e32:	d00a      	beq.n	15e4a <z_is_thread_ready+0x30>
		 z_is_thread_timeout_active(thread));
   15e34:	6878      	ldr	r0, [r7, #4]
   15e36:	f7ff ffd7 	bl	15de8 <z_is_thread_timeout_active>
   15e3a:	4603      	mov	r3, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   15e3c:	f083 0301 	eor.w	r3, r3, #1
   15e40:	b2db      	uxtb	r3, r3
   15e42:	2b00      	cmp	r3, #0
   15e44:	d001      	beq.n	15e4a <z_is_thread_ready+0x30>
   15e46:	2301      	movs	r3, #1
   15e48:	e000      	b.n	15e4c <z_is_thread_ready+0x32>
   15e4a:	2300      	movs	r3, #0
   15e4c:	f003 0301 	and.w	r3, r3, #1
   15e50:	b2db      	uxtb	r3, r3
}
   15e52:	4618      	mov	r0, r3
   15e54:	3708      	adds	r7, #8
   15e56:	46bd      	mov	sp, r7
   15e58:	bd80      	pop	{r7, pc}

00015e5a <z_is_under_prio_ceiling>:
{
   15e5a:	b480      	push	{r7}
   15e5c:	b083      	sub	sp, #12
   15e5e:	af00      	add	r7, sp, #0
   15e60:	6078      	str	r0, [r7, #4]
	return prio >= CONFIG_PRIORITY_CEILING;
   15e62:	687b      	ldr	r3, [r7, #4]
   15e64:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
   15e68:	bfac      	ite	ge
   15e6a:	2301      	movge	r3, #1
   15e6c:	2300      	movlt	r3, #0
   15e6e:	b2db      	uxtb	r3, r3
}
   15e70:	4618      	mov	r0, r3
   15e72:	370c      	adds	r7, #12
   15e74:	46bd      	mov	sp, r7
   15e76:	bc80      	pop	{r7}
   15e78:	4770      	bx	lr

00015e7a <z_get_new_prio_with_ceiling>:
{
   15e7a:	b580      	push	{r7, lr}
   15e7c:	b082      	sub	sp, #8
   15e7e:	af00      	add	r7, sp, #0
   15e80:	6078      	str	r0, [r7, #4]
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   15e82:	6878      	ldr	r0, [r7, #4]
   15e84:	f7ff ffe9 	bl	15e5a <z_is_under_prio_ceiling>
   15e88:	4603      	mov	r3, r0
   15e8a:	2b00      	cmp	r3, #0
   15e8c:	d001      	beq.n	15e92 <z_get_new_prio_with_ceiling+0x18>
   15e8e:	687b      	ldr	r3, [r7, #4]
   15e90:	e001      	b.n	15e96 <z_get_new_prio_with_ceiling+0x1c>
   15e92:	f06f 037e 	mvn.w	r3, #126	; 0x7e
}
   15e96:	4618      	mov	r0, r3
   15e98:	3708      	adds	r7, #8
   15e9a:	46bd      	mov	sp, r7
   15e9c:	bd80      	pop	{r7, pc}

00015e9e <z_is_prio1_higher_than_prio2>:
{
   15e9e:	b480      	push	{r7}
   15ea0:	b083      	sub	sp, #12
   15ea2:	af00      	add	r7, sp, #0
   15ea4:	6078      	str	r0, [r7, #4]
   15ea6:	6039      	str	r1, [r7, #0]
	return prio1 < prio2;
   15ea8:	687a      	ldr	r2, [r7, #4]
   15eaa:	683b      	ldr	r3, [r7, #0]
   15eac:	429a      	cmp	r2, r3
   15eae:	bfb4      	ite	lt
   15eb0:	2301      	movlt	r3, #1
   15eb2:	2300      	movge	r3, #0
   15eb4:	b2db      	uxtb	r3, r3
}
   15eb6:	4618      	mov	r0, r3
   15eb8:	370c      	adds	r7, #12
   15eba:	46bd      	mov	sp, r7
   15ebc:	bc80      	pop	{r7}
   15ebe:	4770      	bx	lr

00015ec0 <z_is_prio_higher>:
{
   15ec0:	b580      	push	{r7, lr}
   15ec2:	b082      	sub	sp, #8
   15ec4:	af00      	add	r7, sp, #0
   15ec6:	6078      	str	r0, [r7, #4]
   15ec8:	6039      	str	r1, [r7, #0]
	return z_is_prio1_higher_than_prio2(prio, test_prio);
   15eca:	6839      	ldr	r1, [r7, #0]
   15ecc:	6878      	ldr	r0, [r7, #4]
   15ece:	f7ff ffe6 	bl	15e9e <z_is_prio1_higher_than_prio2>
   15ed2:	4603      	mov	r3, r0
}
   15ed4:	4618      	mov	r0, r3
   15ed6:	3708      	adds	r7, #8
   15ed8:	46bd      	mov	sp, r7
   15eda:	bd80      	pop	{r7, pc}

00015edc <z_waitq_init>:
{
   15edc:	b580      	push	{r7, lr}
   15ede:	b082      	sub	sp, #8
   15ee0:	af00      	add	r7, sp, #0
   15ee2:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
   15ee4:	687b      	ldr	r3, [r7, #4]
   15ee6:	4618      	mov	r0, r3
   15ee8:	f7ff ff00 	bl	15cec <sys_dlist_init>
}
   15eec:	bf00      	nop
   15eee:	3708      	adds	r7, #8
   15ef0:	46bd      	mov	sp, r7
   15ef2:	bd80      	pop	{r7, pc}

00015ef4 <z_waitq_head>:

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
   15ef4:	b580      	push	{r7, lr}
   15ef6:	b082      	sub	sp, #8
   15ef8:	af00      	add	r7, sp, #0
   15efa:	6078      	str	r0, [r7, #4]
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   15efc:	687b      	ldr	r3, [r7, #4]
   15efe:	4618      	mov	r0, r3
   15f00:	f7ff ff24 	bl	15d4c <sys_dlist_peek_head>
   15f04:	4603      	mov	r3, r0
}
   15f06:	4618      	mov	r0, r3
   15f08:	3708      	adds	r7, #8
   15f0a:	46bd      	mov	sp, r7
   15f0c:	bd80      	pop	{r7, pc}

00015f0e <z_impl_k_mutex_init>:
{
   15f0e:	b580      	push	{r7, lr}
   15f10:	b082      	sub	sp, #8
   15f12:	af00      	add	r7, sp, #0
   15f14:	6078      	str	r0, [r7, #4]
	mutex->owner = NULL;
   15f16:	687b      	ldr	r3, [r7, #4]
   15f18:	2200      	movs	r2, #0
   15f1a:	609a      	str	r2, [r3, #8]
	mutex->lock_count = 0U;
   15f1c:	687b      	ldr	r3, [r7, #4]
   15f1e:	2200      	movs	r2, #0
   15f20:	60da      	str	r2, [r3, #12]
	z_waitq_init(&mutex->wait_q);
   15f22:	687b      	ldr	r3, [r7, #4]
   15f24:	4618      	mov	r0, r3
   15f26:	f7ff ffd9 	bl	15edc <z_waitq_init>
	z_object_init(mutex);
   15f2a:	6878      	ldr	r0, [r7, #4]
   15f2c:	f7ff ff27 	bl	15d7e <z_object_init>
	return 0;
   15f30:	2300      	movs	r3, #0
}
   15f32:	4618      	mov	r0, r3
   15f34:	3708      	adds	r7, #8
   15f36:	46bd      	mov	sp, r7
   15f38:	bd80      	pop	{r7, pc}

00015f3a <new_prio_for_inheritance>:
{
   15f3a:	b580      	push	{r7, lr}
   15f3c:	b084      	sub	sp, #16
   15f3e:	af00      	add	r7, sp, #0
   15f40:	6078      	str	r0, [r7, #4]
   15f42:	6039      	str	r1, [r7, #0]
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   15f44:	6839      	ldr	r1, [r7, #0]
   15f46:	6878      	ldr	r0, [r7, #4]
   15f48:	f7ff ffba 	bl	15ec0 <z_is_prio_higher>
   15f4c:	4603      	mov	r3, r0
   15f4e:	2b00      	cmp	r3, #0
   15f50:	d001      	beq.n	15f56 <new_prio_for_inheritance+0x1c>
   15f52:	687b      	ldr	r3, [r7, #4]
   15f54:	e000      	b.n	15f58 <new_prio_for_inheritance+0x1e>
   15f56:	683b      	ldr	r3, [r7, #0]
   15f58:	60fb      	str	r3, [r7, #12]
	new_prio = z_get_new_prio_with_ceiling(new_prio);
   15f5a:	68f8      	ldr	r0, [r7, #12]
   15f5c:	f7ff ff8d 	bl	15e7a <z_get_new_prio_with_ceiling>
   15f60:	60f8      	str	r0, [r7, #12]
	return new_prio;
   15f62:	68fb      	ldr	r3, [r7, #12]
}
   15f64:	4618      	mov	r0, r3
   15f66:	3710      	adds	r7, #16
   15f68:	46bd      	mov	sp, r7
   15f6a:	bd80      	pop	{r7, pc}

00015f6c <handle_poll_events>:
{
   15f6c:	b480      	push	{r7}
   15f6e:	b083      	sub	sp, #12
   15f70:	af00      	add	r7, sp, #0
   15f72:	6078      	str	r0, [r7, #4]
}
   15f74:	bf00      	nop
   15f76:	370c      	adds	r7, #12
   15f78:	46bd      	mov	sp, r7
   15f7a:	bc80      	pop	{r7}
   15f7c:	4770      	bx	lr

00015f7e <sys_dlist_init>:
{
   15f7e:	b480      	push	{r7}
   15f80:	b083      	sub	sp, #12
   15f82:	af00      	add	r7, sp, #0
   15f84:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   15f86:	687b      	ldr	r3, [r7, #4]
   15f88:	687a      	ldr	r2, [r7, #4]
   15f8a:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   15f8c:	687b      	ldr	r3, [r7, #4]
   15f8e:	687a      	ldr	r2, [r7, #4]
   15f90:	605a      	str	r2, [r3, #4]
}
   15f92:	bf00      	nop
   15f94:	370c      	adds	r7, #12
   15f96:	46bd      	mov	sp, r7
   15f98:	bc80      	pop	{r7}
   15f9a:	4770      	bx	lr

00015f9c <sys_dnode_init>:
{
   15f9c:	b480      	push	{r7}
   15f9e:	b083      	sub	sp, #12
   15fa0:	af00      	add	r7, sp, #0
   15fa2:	6078      	str	r0, [r7, #4]
	node->next = NULL;
   15fa4:	687b      	ldr	r3, [r7, #4]
   15fa6:	2200      	movs	r2, #0
   15fa8:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
   15faa:	687b      	ldr	r3, [r7, #4]
   15fac:	2200      	movs	r2, #0
   15fae:	605a      	str	r2, [r3, #4]
}
   15fb0:	bf00      	nop
   15fb2:	370c      	adds	r7, #12
   15fb4:	46bd      	mov	sp, r7
   15fb6:	bc80      	pop	{r7}
   15fb8:	4770      	bx	lr

00015fba <sys_dnode_is_linked>:
{
   15fba:	b480      	push	{r7}
   15fbc:	b083      	sub	sp, #12
   15fbe:	af00      	add	r7, sp, #0
   15fc0:	6078      	str	r0, [r7, #4]
	return node->next != NULL;
   15fc2:	687b      	ldr	r3, [r7, #4]
   15fc4:	681b      	ldr	r3, [r3, #0]
   15fc6:	2b00      	cmp	r3, #0
   15fc8:	bf14      	ite	ne
   15fca:	2301      	movne	r3, #1
   15fcc:	2300      	moveq	r3, #0
   15fce:	b2db      	uxtb	r3, r3
}
   15fd0:	4618      	mov	r0, r3
   15fd2:	370c      	adds	r7, #12
   15fd4:	46bd      	mov	sp, r7
   15fd6:	bc80      	pop	{r7}
   15fd8:	4770      	bx	lr

00015fda <sys_dlist_is_empty>:
{
   15fda:	b480      	push	{r7}
   15fdc:	b083      	sub	sp, #12
   15fde:	af00      	add	r7, sp, #0
   15fe0:	6078      	str	r0, [r7, #4]
	return list->head == list;
   15fe2:	687b      	ldr	r3, [r7, #4]
   15fe4:	681b      	ldr	r3, [r3, #0]
   15fe6:	687a      	ldr	r2, [r7, #4]
   15fe8:	429a      	cmp	r2, r3
   15fea:	bf0c      	ite	eq
   15fec:	2301      	moveq	r3, #1
   15fee:	2300      	movne	r3, #0
   15ff0:	b2db      	uxtb	r3, r3
}
   15ff2:	4618      	mov	r0, r3
   15ff4:	370c      	adds	r7, #12
   15ff6:	46bd      	mov	sp, r7
   15ff8:	bc80      	pop	{r7}
   15ffa:	4770      	bx	lr

00015ffc <sys_dlist_peek_head>:
{
   15ffc:	b580      	push	{r7, lr}
   15ffe:	b082      	sub	sp, #8
   16000:	af00      	add	r7, sp, #0
   16002:	6078      	str	r0, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16004:	6878      	ldr	r0, [r7, #4]
   16006:	f7ff ffe8 	bl	15fda <sys_dlist_is_empty>
   1600a:	4603      	mov	r3, r0
   1600c:	2b00      	cmp	r3, #0
   1600e:	d102      	bne.n	16016 <sys_dlist_peek_head+0x1a>
   16010:	687b      	ldr	r3, [r7, #4]
   16012:	681b      	ldr	r3, [r3, #0]
   16014:	e000      	b.n	16018 <sys_dlist_peek_head+0x1c>
   16016:	2300      	movs	r3, #0
}
   16018:	4618      	mov	r0, r3
   1601a:	3708      	adds	r7, #8
   1601c:	46bd      	mov	sp, r7
   1601e:	bd80      	pop	{r7, pc}

00016020 <sys_dlist_peek_next_no_check>:
 * @return a pointer to the next element from a node, NULL if node is the tail
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
   16020:	b480      	push	{r7}
   16022:	b083      	sub	sp, #12
   16024:	af00      	add	r7, sp, #0
   16026:	6078      	str	r0, [r7, #4]
   16028:	6039      	str	r1, [r7, #0]
	return (node == list->tail) ? NULL : node->next;
   1602a:	687b      	ldr	r3, [r7, #4]
   1602c:	685b      	ldr	r3, [r3, #4]
   1602e:	683a      	ldr	r2, [r7, #0]
   16030:	429a      	cmp	r2, r3
   16032:	d002      	beq.n	1603a <sys_dlist_peek_next_no_check+0x1a>
   16034:	683b      	ldr	r3, [r7, #0]
   16036:	681b      	ldr	r3, [r3, #0]
   16038:	e000      	b.n	1603c <sys_dlist_peek_next_no_check+0x1c>
   1603a:	2300      	movs	r3, #0
}
   1603c:	4618      	mov	r0, r3
   1603e:	370c      	adds	r7, #12
   16040:	46bd      	mov	sp, r7
   16042:	bc80      	pop	{r7}
   16044:	4770      	bx	lr

00016046 <sys_dlist_peek_next>:
 * or NULL (when node comes from reading the head of an empty list).
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
   16046:	b580      	push	{r7, lr}
   16048:	b082      	sub	sp, #8
   1604a:	af00      	add	r7, sp, #0
   1604c:	6078      	str	r0, [r7, #4]
   1604e:	6039      	str	r1, [r7, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16050:	683b      	ldr	r3, [r7, #0]
   16052:	2b00      	cmp	r3, #0
   16054:	d005      	beq.n	16062 <sys_dlist_peek_next+0x1c>
   16056:	6839      	ldr	r1, [r7, #0]
   16058:	6878      	ldr	r0, [r7, #4]
   1605a:	f7ff ffe1 	bl	16020 <sys_dlist_peek_next_no_check>
   1605e:	4603      	mov	r3, r0
   16060:	e000      	b.n	16064 <sys_dlist_peek_next+0x1e>
   16062:	2300      	movs	r3, #0
}
   16064:	4618      	mov	r0, r3
   16066:	3708      	adds	r7, #8
   16068:	46bd      	mov	sp, r7
   1606a:	bd80      	pop	{r7, pc}

0001606c <sys_dlist_append>:
 *
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
   1606c:	b480      	push	{r7}
   1606e:	b085      	sub	sp, #20
   16070:	af00      	add	r7, sp, #0
   16072:	6078      	str	r0, [r7, #4]
   16074:	6039      	str	r1, [r7, #0]
	sys_dnode_t *const tail = list->tail;
   16076:	687b      	ldr	r3, [r7, #4]
   16078:	685b      	ldr	r3, [r3, #4]
   1607a:	60fb      	str	r3, [r7, #12]

	node->next = list;
   1607c:	683b      	ldr	r3, [r7, #0]
   1607e:	687a      	ldr	r2, [r7, #4]
   16080:	601a      	str	r2, [r3, #0]
	node->prev = tail;
   16082:	683b      	ldr	r3, [r7, #0]
   16084:	68fa      	ldr	r2, [r7, #12]
   16086:	605a      	str	r2, [r3, #4]

	tail->next = node;
   16088:	68fb      	ldr	r3, [r7, #12]
   1608a:	683a      	ldr	r2, [r7, #0]
   1608c:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1608e:	687b      	ldr	r3, [r7, #4]
   16090:	683a      	ldr	r2, [r7, #0]
   16092:	605a      	str	r2, [r3, #4]
}
   16094:	bf00      	nop
   16096:	3714      	adds	r7, #20
   16098:	46bd      	mov	sp, r7
   1609a:	bc80      	pop	{r7}
   1609c:	4770      	bx	lr

0001609e <sys_dlist_insert>:
 *
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
   1609e:	b480      	push	{r7}
   160a0:	b085      	sub	sp, #20
   160a2:	af00      	add	r7, sp, #0
   160a4:	6078      	str	r0, [r7, #4]
   160a6:	6039      	str	r1, [r7, #0]
	sys_dnode_t *const prev = successor->prev;
   160a8:	687b      	ldr	r3, [r7, #4]
   160aa:	685b      	ldr	r3, [r3, #4]
   160ac:	60fb      	str	r3, [r7, #12]

	node->prev = prev;
   160ae:	683b      	ldr	r3, [r7, #0]
   160b0:	68fa      	ldr	r2, [r7, #12]
   160b2:	605a      	str	r2, [r3, #4]
	node->next = successor;
   160b4:	683b      	ldr	r3, [r7, #0]
   160b6:	687a      	ldr	r2, [r7, #4]
   160b8:	601a      	str	r2, [r3, #0]
	prev->next = node;
   160ba:	68fb      	ldr	r3, [r7, #12]
   160bc:	683a      	ldr	r2, [r7, #0]
   160be:	601a      	str	r2, [r3, #0]
	successor->prev = node;
   160c0:	687b      	ldr	r3, [r7, #4]
   160c2:	683a      	ldr	r2, [r7, #0]
   160c4:	605a      	str	r2, [r3, #4]
}
   160c6:	bf00      	nop
   160c8:	3714      	adds	r7, #20
   160ca:	46bd      	mov	sp, r7
   160cc:	bc80      	pop	{r7}
   160ce:	4770      	bx	lr

000160d0 <sys_dlist_remove>:
 *
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
   160d0:	b580      	push	{r7, lr}
   160d2:	b084      	sub	sp, #16
   160d4:	af00      	add	r7, sp, #0
   160d6:	6078      	str	r0, [r7, #4]
	sys_dnode_t *const prev = node->prev;
   160d8:	687b      	ldr	r3, [r7, #4]
   160da:	685b      	ldr	r3, [r3, #4]
   160dc:	60fb      	str	r3, [r7, #12]
	sys_dnode_t *const next = node->next;
   160de:	687b      	ldr	r3, [r7, #4]
   160e0:	681b      	ldr	r3, [r3, #0]
   160e2:	60bb      	str	r3, [r7, #8]

	prev->next = next;
   160e4:	68fb      	ldr	r3, [r7, #12]
   160e6:	68ba      	ldr	r2, [r7, #8]
   160e8:	601a      	str	r2, [r3, #0]
	next->prev = prev;
   160ea:	68bb      	ldr	r3, [r7, #8]
   160ec:	68fa      	ldr	r2, [r7, #12]
   160ee:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
   160f0:	6878      	ldr	r0, [r7, #4]
   160f2:	f7ff ff53 	bl	15f9c <sys_dnode_init>
}
   160f6:	bf00      	nop
   160f8:	3710      	adds	r7, #16
   160fa:	46bd      	mov	sp, r7
   160fc:	bd80      	pop	{r7, pc}

000160fe <k_is_user_context>:
{
   160fe:	b480      	push	{r7}
   16100:	af00      	add	r7, sp, #0
	return false;
   16102:	2300      	movs	r3, #0
}
   16104:	4618      	mov	r0, r3
   16106:	46bd      	mov	sp, r7
   16108:	bc80      	pop	{r7}
   1610a:	4770      	bx	lr

0001610c <k_ms_to_ticks_ceil32>:
{
   1610c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   16110:	b08c      	sub	sp, #48	; 0x30
   16112:	af00      	add	r7, sp, #0
   16114:	6078      	str	r0, [r7, #4]
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, true, false);
   16116:	687b      	ldr	r3, [r7, #4]
   16118:	461a      	mov	r2, r3
   1611a:	f04f 0300 	mov.w	r3, #0
   1611e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   16122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16126:	627b      	str	r3, [r7, #36]	; 0x24
   16128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1612c:	623b      	str	r3, [r7, #32]
   1612e:	2301      	movs	r3, #1
   16130:	77fb      	strb	r3, [r7, #31]
   16132:	2301      	movs	r3, #1
   16134:	77bb      	strb	r3, [r7, #30]
   16136:	2301      	movs	r3, #1
   16138:	777b      	strb	r3, [r7, #29]
   1613a:	2300      	movs	r3, #0
   1613c:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   1613e:	7ffb      	ldrb	r3, [r7, #31]
   16140:	2b00      	cmp	r3, #0
   16142:	d00f      	beq.n	16164 <k_ms_to_ticks_ceil32+0x58>
	bool mul_ratio = const_hz &&
   16144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16146:	6a3b      	ldr	r3, [r7, #32]
   16148:	429a      	cmp	r2, r3
   1614a:	d20b      	bcs.n	16164 <k_ms_to_ticks_ceil32+0x58>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   1614c:	6a3b      	ldr	r3, [r7, #32]
   1614e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16150:	fbb3 f2f2 	udiv	r2, r3, r2
   16154:	6a79      	ldr	r1, [r7, #36]	; 0x24
   16156:	fb01 f202 	mul.w	r2, r1, r2
   1615a:	1a9b      	subs	r3, r3, r2
   1615c:	2b00      	cmp	r3, #0
   1615e:	d101      	bne.n	16164 <k_ms_to_ticks_ceil32+0x58>
   16160:	2301      	movs	r3, #1
   16162:	e000      	b.n	16166 <k_ms_to_ticks_ceil32+0x5a>
   16164:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   16166:	76fb      	strb	r3, [r7, #27]
   16168:	7efb      	ldrb	r3, [r7, #27]
   1616a:	f003 0301 	and.w	r3, r3, #1
   1616e:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   16170:	7ffb      	ldrb	r3, [r7, #31]
   16172:	2b00      	cmp	r3, #0
   16174:	d00f      	beq.n	16196 <k_ms_to_ticks_ceil32+0x8a>
	bool div_ratio = const_hz &&
   16176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16178:	6a3b      	ldr	r3, [r7, #32]
   1617a:	429a      	cmp	r2, r3
   1617c:	d90b      	bls.n	16196 <k_ms_to_ticks_ceil32+0x8a>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   1617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16180:	6a3a      	ldr	r2, [r7, #32]
   16182:	fbb3 f2f2 	udiv	r2, r3, r2
   16186:	6a39      	ldr	r1, [r7, #32]
   16188:	fb01 f202 	mul.w	r2, r1, r2
   1618c:	1a9b      	subs	r3, r3, r2
   1618e:	2b00      	cmp	r3, #0
   16190:	d101      	bne.n	16196 <k_ms_to_ticks_ceil32+0x8a>
   16192:	2301      	movs	r3, #1
   16194:	e000      	b.n	16198 <k_ms_to_ticks_ceil32+0x8c>
   16196:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   16198:	76bb      	strb	r3, [r7, #26]
   1619a:	7ebb      	ldrb	r3, [r7, #26]
   1619c:	f003 0301 	and.w	r3, r3, #1
   161a0:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   161a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   161a4:	6a3b      	ldr	r3, [r7, #32]
   161a6:	429a      	cmp	r2, r3
   161a8:	d10a      	bne.n	161c0 <k_ms_to_ticks_ceil32+0xb4>
		return result32 ? ((uint32_t)t) : t;
   161aa:	7fbb      	ldrb	r3, [r7, #30]
   161ac:	2b00      	cmp	r3, #0
   161ae:	d004      	beq.n	161ba <k_ms_to_ticks_ceil32+0xae>
   161b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   161b2:	461a      	mov	r2, r3
   161b4:	f04f 0300 	mov.w	r3, #0
   161b8:	e0c7      	b.n	1634a <k_ms_to_ticks_ceil32+0x23e>
   161ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   161be:	e0c4      	b.n	1634a <k_ms_to_ticks_ceil32+0x23e>
	uint64_t off = 0;
   161c0:	f04f 0200 	mov.w	r2, #0
   161c4:	f04f 0300 	mov.w	r3, #0
   161c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   161cc:	7efb      	ldrb	r3, [r7, #27]
   161ce:	f083 0301 	eor.w	r3, r3, #1
   161d2:	b2db      	uxtb	r3, r3
   161d4:	2b00      	cmp	r3, #0
   161d6:	d01d      	beq.n	16214 <k_ms_to_ticks_ceil32+0x108>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   161d8:	7ebb      	ldrb	r3, [r7, #26]
   161da:	2b00      	cmp	r3, #0
   161dc:	d004      	beq.n	161e8 <k_ms_to_ticks_ceil32+0xdc>
   161de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   161e0:	6a3b      	ldr	r3, [r7, #32]
   161e2:	fbb2 f3f3 	udiv	r3, r2, r3
   161e6:	e000      	b.n	161ea <k_ms_to_ticks_ceil32+0xde>
   161e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   161ea:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   161ec:	7f7b      	ldrb	r3, [r7, #29]
   161ee:	2b00      	cmp	r3, #0
   161f0:	d006      	beq.n	16200 <k_ms_to_ticks_ceil32+0xf4>
			off = rdivisor - 1U;
   161f2:	68fb      	ldr	r3, [r7, #12]
   161f4:	3b01      	subs	r3, #1
   161f6:	461a      	mov	r2, r3
   161f8:	f04f 0300 	mov.w	r3, #0
   161fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   16200:	7f3b      	ldrb	r3, [r7, #28]
   16202:	2b00      	cmp	r3, #0
   16204:	d006      	beq.n	16214 <k_ms_to_ticks_ceil32+0x108>
			off = rdivisor / 2U;
   16206:	68fb      	ldr	r3, [r7, #12]
   16208:	085b      	lsrs	r3, r3, #1
   1620a:	461a      	mov	r2, r3
   1620c:	f04f 0300 	mov.w	r3, #0
   16210:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   16214:	7ebb      	ldrb	r3, [r7, #26]
   16216:	2b00      	cmp	r3, #0
   16218:	d02a      	beq.n	16270 <k_ms_to_ticks_ceil32+0x164>
		t += off;
   1621a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1621e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   16222:	1884      	adds	r4, r0, r2
   16224:	eb41 0503 	adc.w	r5, r1, r3
   16228:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   1622c:	7fbb      	ldrb	r3, [r7, #30]
   1622e:	2b00      	cmp	r3, #0
   16230:	d010      	beq.n	16254 <k_ms_to_ticks_ceil32+0x148>
   16232:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   16236:	2b01      	cmp	r3, #1
   16238:	bf08      	it	eq
   1623a:	2a00      	cmpeq	r2, #0
   1623c:	d20a      	bcs.n	16254 <k_ms_to_ticks_ceil32+0x148>
			return ((uint32_t)t) / (from_hz / to_hz);
   1623e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16240:	6a79      	ldr	r1, [r7, #36]	; 0x24
   16242:	6a3b      	ldr	r3, [r7, #32]
   16244:	fbb1 f3f3 	udiv	r3, r1, r3
   16248:	fbb2 f3f3 	udiv	r3, r2, r3
   1624c:	461a      	mov	r2, r3
   1624e:	f04f 0300 	mov.w	r3, #0
   16252:	e07a      	b.n	1634a <k_ms_to_ticks_ceil32+0x23e>
			return t / ((uint64_t)from_hz / to_hz);
   16254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16256:	6a3b      	ldr	r3, [r7, #32]
   16258:	fbb2 f3f3 	udiv	r3, r2, r3
   1625c:	461a      	mov	r2, r3
   1625e:	f04f 0300 	mov.w	r3, #0
   16262:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   16266:	f7e9 ff6d 	bl	144 <__aeabi_uldivmod>
   1626a:	4602      	mov	r2, r0
   1626c:	460b      	mov	r3, r1
   1626e:	e06c      	b.n	1634a <k_ms_to_ticks_ceil32+0x23e>
	} else if (mul_ratio) {
   16270:	7efb      	ldrb	r3, [r7, #27]
   16272:	2b00      	cmp	r3, #0
   16274:	d021      	beq.n	162ba <k_ms_to_ticks_ceil32+0x1ae>
		if (result32) {
   16276:	7fbb      	ldrb	r3, [r7, #30]
   16278:	2b00      	cmp	r3, #0
   1627a:	d00a      	beq.n	16292 <k_ms_to_ticks_ceil32+0x186>
			return ((uint32_t)t) * (to_hz / from_hz);
   1627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1627e:	6a39      	ldr	r1, [r7, #32]
   16280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16282:	fbb1 f2f2 	udiv	r2, r1, r2
   16286:	fb02 f303 	mul.w	r3, r2, r3
   1628a:	461a      	mov	r2, r3
   1628c:	f04f 0300 	mov.w	r3, #0
   16290:	e05b      	b.n	1634a <k_ms_to_ticks_ceil32+0x23e>
			return t * ((uint64_t)to_hz / from_hz);
   16292:	6a3a      	ldr	r2, [r7, #32]
   16294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16296:	fbb2 f3f3 	udiv	r3, r2, r3
   1629a:	461a      	mov	r2, r3
   1629c:	f04f 0300 	mov.w	r3, #0
   162a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   162a2:	fb03 f001 	mul.w	r0, r3, r1
   162a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   162a8:	fb02 f101 	mul.w	r1, r2, r1
   162ac:	4401      	add	r1, r0
   162ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   162b0:	fba0 2302 	umull	r2, r3, r0, r2
   162b4:	4419      	add	r1, r3
   162b6:	460b      	mov	r3, r1
   162b8:	e047      	b.n	1634a <k_ms_to_ticks_ceil32+0x23e>
		if (result32) {
   162ba:	7fbb      	ldrb	r3, [r7, #30]
   162bc:	2b00      	cmp	r3, #0
   162be:	d024      	beq.n	1630a <k_ms_to_ticks_ceil32+0x1fe>
			return (uint32_t)((t * to_hz + off) / from_hz);
   162c0:	6a3b      	ldr	r3, [r7, #32]
   162c2:	461a      	mov	r2, r3
   162c4:	f04f 0300 	mov.w	r3, #0
   162c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   162ca:	fb03 f001 	mul.w	r0, r3, r1
   162ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   162d0:	fb02 f101 	mul.w	r1, r2, r1
   162d4:	4401      	add	r1, r0
   162d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   162d8:	fba0 2302 	umull	r2, r3, r0, r2
   162dc:	4419      	add	r1, r3
   162de:	460b      	mov	r3, r1
   162e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   162e4:	eb12 0a00 	adds.w	sl, r2, r0
   162e8:	eb43 0b01 	adc.w	fp, r3, r1
   162ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   162ee:	461a      	mov	r2, r3
   162f0:	f04f 0300 	mov.w	r3, #0
   162f4:	4650      	mov	r0, sl
   162f6:	4659      	mov	r1, fp
   162f8:	f7e9 ff24 	bl	144 <__aeabi_uldivmod>
   162fc:	4602      	mov	r2, r0
   162fe:	460b      	mov	r3, r1
   16300:	4613      	mov	r3, r2
   16302:	461a      	mov	r2, r3
   16304:	f04f 0300 	mov.w	r3, #0
   16308:	e01f      	b.n	1634a <k_ms_to_ticks_ceil32+0x23e>
			return (t * to_hz + off) / from_hz;
   1630a:	6a3b      	ldr	r3, [r7, #32]
   1630c:	461a      	mov	r2, r3
   1630e:	f04f 0300 	mov.w	r3, #0
   16312:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   16314:	fb03 f001 	mul.w	r0, r3, r1
   16318:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1631a:	fb02 f101 	mul.w	r1, r2, r1
   1631e:	4401      	add	r1, r0
   16320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   16322:	fba0 2302 	umull	r2, r3, r0, r2
   16326:	4419      	add	r1, r3
   16328:	460b      	mov	r3, r1
   1632a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1632e:	eb12 0800 	adds.w	r8, r2, r0
   16332:	eb43 0901 	adc.w	r9, r3, r1
   16336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16338:	461a      	mov	r2, r3
   1633a:	f04f 0300 	mov.w	r3, #0
   1633e:	4640      	mov	r0, r8
   16340:	4649      	mov	r1, r9
   16342:	f7e9 feff 	bl	144 <__aeabi_uldivmod>
   16346:	4602      	mov	r2, r0
   16348:	460b      	mov	r3, r1
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, true, false);
   1634a:	4613      	mov	r3, r2
}
   1634c:	4618      	mov	r0, r3
   1634e:	3730      	adds	r7, #48	; 0x30
   16350:	46bd      	mov	sp, r7
   16352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

00016356 <k_ticks_to_ms_floor64>:
{
   16356:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   1635a:	b08c      	sub	sp, #48	; 0x30
   1635c:	af00      	add	r7, sp, #0
   1635e:	e9c7 0100 	strd	r0, r1, [r7]
   16362:	e9d7 2300 	ldrd	r2, r3, [r7]
   16366:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   1636a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1636e:	627b      	str	r3, [r7, #36]	; 0x24
   16370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16374:	623b      	str	r3, [r7, #32]
   16376:	2301      	movs	r3, #1
   16378:	77fb      	strb	r3, [r7, #31]
   1637a:	2300      	movs	r3, #0
   1637c:	77bb      	strb	r3, [r7, #30]
   1637e:	2300      	movs	r3, #0
   16380:	777b      	strb	r3, [r7, #29]
   16382:	2300      	movs	r3, #0
   16384:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   16386:	7ffb      	ldrb	r3, [r7, #31]
   16388:	2b00      	cmp	r3, #0
   1638a:	d00f      	beq.n	163ac <k_ticks_to_ms_floor64+0x56>
	bool mul_ratio = const_hz &&
   1638c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1638e:	6a3b      	ldr	r3, [r7, #32]
   16390:	429a      	cmp	r2, r3
   16392:	d20b      	bcs.n	163ac <k_ticks_to_ms_floor64+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   16394:	6a3b      	ldr	r3, [r7, #32]
   16396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16398:	fbb3 f2f2 	udiv	r2, r3, r2
   1639c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1639e:	fb01 f202 	mul.w	r2, r1, r2
   163a2:	1a9b      	subs	r3, r3, r2
   163a4:	2b00      	cmp	r3, #0
   163a6:	d101      	bne.n	163ac <k_ticks_to_ms_floor64+0x56>
   163a8:	2301      	movs	r3, #1
   163aa:	e000      	b.n	163ae <k_ticks_to_ms_floor64+0x58>
   163ac:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   163ae:	76fb      	strb	r3, [r7, #27]
   163b0:	7efb      	ldrb	r3, [r7, #27]
   163b2:	f003 0301 	and.w	r3, r3, #1
   163b6:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   163b8:	7ffb      	ldrb	r3, [r7, #31]
   163ba:	2b00      	cmp	r3, #0
   163bc:	d00f      	beq.n	163de <k_ticks_to_ms_floor64+0x88>
	bool div_ratio = const_hz &&
   163be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   163c0:	6a3b      	ldr	r3, [r7, #32]
   163c2:	429a      	cmp	r2, r3
   163c4:	d90b      	bls.n	163de <k_ticks_to_ms_floor64+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   163c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   163c8:	6a3a      	ldr	r2, [r7, #32]
   163ca:	fbb3 f2f2 	udiv	r2, r3, r2
   163ce:	6a39      	ldr	r1, [r7, #32]
   163d0:	fb01 f202 	mul.w	r2, r1, r2
   163d4:	1a9b      	subs	r3, r3, r2
   163d6:	2b00      	cmp	r3, #0
   163d8:	d101      	bne.n	163de <k_ticks_to_ms_floor64+0x88>
   163da:	2301      	movs	r3, #1
   163dc:	e000      	b.n	163e0 <k_ticks_to_ms_floor64+0x8a>
   163de:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   163e0:	76bb      	strb	r3, [r7, #26]
   163e2:	7ebb      	ldrb	r3, [r7, #26]
   163e4:	f003 0301 	and.w	r3, r3, #1
   163e8:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   163ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   163ec:	6a3b      	ldr	r3, [r7, #32]
   163ee:	429a      	cmp	r2, r3
   163f0:	d10a      	bne.n	16408 <k_ticks_to_ms_floor64+0xb2>
		return result32 ? ((uint32_t)t) : t;
   163f2:	7fbb      	ldrb	r3, [r7, #30]
   163f4:	2b00      	cmp	r3, #0
   163f6:	d004      	beq.n	16402 <k_ticks_to_ms_floor64+0xac>
   163f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   163fa:	461a      	mov	r2, r3
   163fc:	f04f 0300 	mov.w	r3, #0
   16400:	e0c7      	b.n	16592 <k_ticks_to_ms_floor64+0x23c>
   16402:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   16406:	e0c4      	b.n	16592 <k_ticks_to_ms_floor64+0x23c>
	uint64_t off = 0;
   16408:	f04f 0200 	mov.w	r2, #0
   1640c:	f04f 0300 	mov.w	r3, #0
   16410:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   16414:	7efb      	ldrb	r3, [r7, #27]
   16416:	f083 0301 	eor.w	r3, r3, #1
   1641a:	b2db      	uxtb	r3, r3
   1641c:	2b00      	cmp	r3, #0
   1641e:	d01d      	beq.n	1645c <k_ticks_to_ms_floor64+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   16420:	7ebb      	ldrb	r3, [r7, #26]
   16422:	2b00      	cmp	r3, #0
   16424:	d004      	beq.n	16430 <k_ticks_to_ms_floor64+0xda>
   16426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   16428:	6a3b      	ldr	r3, [r7, #32]
   1642a:	fbb2 f3f3 	udiv	r3, r2, r3
   1642e:	e000      	b.n	16432 <k_ticks_to_ms_floor64+0xdc>
   16430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16432:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   16434:	7f7b      	ldrb	r3, [r7, #29]
   16436:	2b00      	cmp	r3, #0
   16438:	d006      	beq.n	16448 <k_ticks_to_ms_floor64+0xf2>
			off = rdivisor - 1U;
   1643a:	68fb      	ldr	r3, [r7, #12]
   1643c:	3b01      	subs	r3, #1
   1643e:	461a      	mov	r2, r3
   16440:	f04f 0300 	mov.w	r3, #0
   16444:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   16448:	7f3b      	ldrb	r3, [r7, #28]
   1644a:	2b00      	cmp	r3, #0
   1644c:	d006      	beq.n	1645c <k_ticks_to_ms_floor64+0x106>
			off = rdivisor / 2U;
   1644e:	68fb      	ldr	r3, [r7, #12]
   16450:	085b      	lsrs	r3, r3, #1
   16452:	461a      	mov	r2, r3
   16454:	f04f 0300 	mov.w	r3, #0
   16458:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   1645c:	7ebb      	ldrb	r3, [r7, #26]
   1645e:	2b00      	cmp	r3, #0
   16460:	d02a      	beq.n	164b8 <k_ticks_to_ms_floor64+0x162>
		t += off;
   16462:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   16466:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1646a:	1884      	adds	r4, r0, r2
   1646c:	eb41 0503 	adc.w	r5, r1, r3
   16470:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   16474:	7fbb      	ldrb	r3, [r7, #30]
   16476:	2b00      	cmp	r3, #0
   16478:	d010      	beq.n	1649c <k_ticks_to_ms_floor64+0x146>
   1647a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   1647e:	2b01      	cmp	r3, #1
   16480:	bf08      	it	eq
   16482:	2a00      	cmpeq	r2, #0
   16484:	d20a      	bcs.n	1649c <k_ticks_to_ms_floor64+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
   16486:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16488:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1648a:	6a3b      	ldr	r3, [r7, #32]
   1648c:	fbb1 f3f3 	udiv	r3, r1, r3
   16490:	fbb2 f3f3 	udiv	r3, r2, r3
   16494:	461a      	mov	r2, r3
   16496:	f04f 0300 	mov.w	r3, #0
   1649a:	e07a      	b.n	16592 <k_ticks_to_ms_floor64+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
   1649c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1649e:	6a3b      	ldr	r3, [r7, #32]
   164a0:	fbb2 f3f3 	udiv	r3, r2, r3
   164a4:	461a      	mov	r2, r3
   164a6:	f04f 0300 	mov.w	r3, #0
   164aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   164ae:	f7e9 fe49 	bl	144 <__aeabi_uldivmod>
   164b2:	4602      	mov	r2, r0
   164b4:	460b      	mov	r3, r1
   164b6:	e06c      	b.n	16592 <k_ticks_to_ms_floor64+0x23c>
	} else if (mul_ratio) {
   164b8:	7efb      	ldrb	r3, [r7, #27]
   164ba:	2b00      	cmp	r3, #0
   164bc:	d021      	beq.n	16502 <k_ticks_to_ms_floor64+0x1ac>
		if (result32) {
   164be:	7fbb      	ldrb	r3, [r7, #30]
   164c0:	2b00      	cmp	r3, #0
   164c2:	d00a      	beq.n	164da <k_ticks_to_ms_floor64+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
   164c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   164c6:	6a39      	ldr	r1, [r7, #32]
   164c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   164ca:	fbb1 f2f2 	udiv	r2, r1, r2
   164ce:	fb02 f303 	mul.w	r3, r2, r3
   164d2:	461a      	mov	r2, r3
   164d4:	f04f 0300 	mov.w	r3, #0
   164d8:	e05b      	b.n	16592 <k_ticks_to_ms_floor64+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
   164da:	6a3a      	ldr	r2, [r7, #32]
   164dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   164de:	fbb2 f3f3 	udiv	r3, r2, r3
   164e2:	461a      	mov	r2, r3
   164e4:	f04f 0300 	mov.w	r3, #0
   164e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   164ea:	fb03 f001 	mul.w	r0, r3, r1
   164ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   164f0:	fb02 f101 	mul.w	r1, r2, r1
   164f4:	4401      	add	r1, r0
   164f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   164f8:	fba0 2302 	umull	r2, r3, r0, r2
   164fc:	4419      	add	r1, r3
   164fe:	460b      	mov	r3, r1
   16500:	e047      	b.n	16592 <k_ticks_to_ms_floor64+0x23c>
		if (result32) {
   16502:	7fbb      	ldrb	r3, [r7, #30]
   16504:	2b00      	cmp	r3, #0
   16506:	d024      	beq.n	16552 <k_ticks_to_ms_floor64+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   16508:	6a3b      	ldr	r3, [r7, #32]
   1650a:	461a      	mov	r2, r3
   1650c:	f04f 0300 	mov.w	r3, #0
   16510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   16512:	fb03 f001 	mul.w	r0, r3, r1
   16516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   16518:	fb02 f101 	mul.w	r1, r2, r1
   1651c:	4401      	add	r1, r0
   1651e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   16520:	fba0 2302 	umull	r2, r3, r0, r2
   16524:	4419      	add	r1, r3
   16526:	460b      	mov	r3, r1
   16528:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1652c:	eb12 0a00 	adds.w	sl, r2, r0
   16530:	eb43 0b01 	adc.w	fp, r3, r1
   16534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16536:	461a      	mov	r2, r3
   16538:	f04f 0300 	mov.w	r3, #0
   1653c:	4650      	mov	r0, sl
   1653e:	4659      	mov	r1, fp
   16540:	f7e9 fe00 	bl	144 <__aeabi_uldivmod>
   16544:	4602      	mov	r2, r0
   16546:	460b      	mov	r3, r1
   16548:	4613      	mov	r3, r2
   1654a:	461a      	mov	r2, r3
   1654c:	f04f 0300 	mov.w	r3, #0
   16550:	e01f      	b.n	16592 <k_ticks_to_ms_floor64+0x23c>
			return (t * to_hz + off) / from_hz;
   16552:	6a3b      	ldr	r3, [r7, #32]
   16554:	461a      	mov	r2, r3
   16556:	f04f 0300 	mov.w	r3, #0
   1655a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1655c:	fb03 f001 	mul.w	r0, r3, r1
   16560:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   16562:	fb02 f101 	mul.w	r1, r2, r1
   16566:	4401      	add	r1, r0
   16568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1656a:	fba0 2302 	umull	r2, r3, r0, r2
   1656e:	4419      	add	r1, r3
   16570:	460b      	mov	r3, r1
   16572:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   16576:	eb12 0800 	adds.w	r8, r2, r0
   1657a:	eb43 0901 	adc.w	r9, r3, r1
   1657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16580:	461a      	mov	r2, r3
   16582:	f04f 0300 	mov.w	r3, #0
   16586:	4640      	mov	r0, r8
   16588:	4649      	mov	r1, r9
   1658a:	f7e9 fddb 	bl	144 <__aeabi_uldivmod>
   1658e:	4602      	mov	r2, r0
   16590:	460b      	mov	r3, r1
}
   16592:	4610      	mov	r0, r2
   16594:	4619      	mov	r1, r3
   16596:	3730      	adds	r7, #48	; 0x30
   16598:	46bd      	mov	sp, r7
   1659a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0001659e <k_yield>:
{
   1659e:	b580      	push	{r7, lr}
   165a0:	af00      	add	r7, sp, #0
	z_impl_k_yield();
   165a2:	f7f7 fdb5 	bl	e110 <z_impl_k_yield>
}
   165a6:	bf00      	nop
   165a8:	bd80      	pop	{r7, pc}

000165aa <k_thread_suspend>:
{
   165aa:	b580      	push	{r7, lr}
   165ac:	b082      	sub	sp, #8
   165ae:	af00      	add	r7, sp, #0
   165b0:	6078      	str	r0, [r7, #4]
	z_impl_k_thread_suspend(thread);
   165b2:	6878      	ldr	r0, [r7, #4]
   165b4:	f7f6 fe62 	bl	d27c <z_impl_k_thread_suspend>
}
   165b8:	bf00      	nop
   165ba:	3708      	adds	r7, #8
   165bc:	46bd      	mov	sp, r7
   165be:	bd80      	pop	{r7, pc}

000165c0 <z_is_inactive_timeout>:
{
   165c0:	b580      	push	{r7, lr}
   165c2:	b082      	sub	sp, #8
   165c4:	af00      	add	r7, sp, #0
   165c6:	6078      	str	r0, [r7, #4]
	return !sys_dnode_is_linked(&to->node);
   165c8:	687b      	ldr	r3, [r7, #4]
   165ca:	4618      	mov	r0, r3
   165cc:	f7ff fcf5 	bl	15fba <sys_dnode_is_linked>
   165d0:	4603      	mov	r3, r0
   165d2:	2b00      	cmp	r3, #0
   165d4:	bf14      	ite	ne
   165d6:	2301      	movne	r3, #1
   165d8:	2300      	moveq	r3, #0
   165da:	b2db      	uxtb	r3, r3
   165dc:	f083 0301 	eor.w	r3, r3, #1
   165e0:	b2db      	uxtb	r3, r3
   165e2:	f003 0301 	and.w	r3, r3, #1
   165e6:	b2db      	uxtb	r3, r3
}
   165e8:	4618      	mov	r0, r3
   165ea:	3708      	adds	r7, #8
   165ec:	46bd      	mov	sp, r7
   165ee:	bd80      	pop	{r7, pc}

000165f0 <z_abort_thread_timeout>:

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
   165f0:	b580      	push	{r7, lr}
   165f2:	b082      	sub	sp, #8
   165f4:	af00      	add	r7, sp, #0
   165f6:	6078      	str	r0, [r7, #4]
	return z_abort_timeout(&thread->base.timeout);
   165f8:	687b      	ldr	r3, [r7, #4]
   165fa:	3318      	adds	r3, #24
   165fc:	4618      	mov	r0, r3
   165fe:	f7f8 faf5 	bl	ebec <z_abort_timeout>
   16602:	4603      	mov	r3, r0
}
   16604:	4618      	mov	r0, r3
   16606:	3708      	adds	r7, #8
   16608:	46bd      	mov	sp, r7
   1660a:	bd80      	pop	{r7, pc}

0001660c <z_reschedule_unlocked>:
{
   1660c:	b580      	push	{r7, lr}
   1660e:	b082      	sub	sp, #8
   16610:	af00      	add	r7, sp, #0
   16612:	f04f 0320 	mov.w	r3, #32
   16616:	f3ef 8211 	mrs	r2, BASEPRI
   1661a:	f383 8811 	msr	BASEPRI, r3
   1661e:	f3bf 8f6f 	isb	sy
   16622:	607a      	str	r2, [r7, #4]
   16624:	603b      	str	r3, [r7, #0]
	return key;
   16626:	687b      	ldr	r3, [r7, #4]
	(void) z_reschedule_irqlock(arch_irq_lock());
   16628:	4618      	mov	r0, r3
   1662a:	f000 f9b5 	bl	16998 <z_reschedule_irqlock>
}
   1662e:	bf00      	nop
   16630:	3708      	adds	r7, #8
   16632:	46bd      	mov	sp, r7
   16634:	bd80      	pop	{r7, pc}

00016636 <z_is_thread_prevented_from_running>:
{
   16636:	b480      	push	{r7}
   16638:	b085      	sub	sp, #20
   1663a:	af00      	add	r7, sp, #0
   1663c:	6078      	str	r0, [r7, #4]
	uint8_t state = thread->base.thread_state;
   1663e:	687b      	ldr	r3, [r7, #4]
   16640:	7b5b      	ldrb	r3, [r3, #13]
   16642:	73fb      	strb	r3, [r7, #15]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   16644:	7bfb      	ldrb	r3, [r7, #15]
   16646:	f003 031f 	and.w	r3, r3, #31
			 _THREAD_DUMMY | _THREAD_SUSPENDED)) != 0U;
   1664a:	2b00      	cmp	r3, #0
   1664c:	bf14      	ite	ne
   1664e:	2301      	movne	r3, #1
   16650:	2300      	moveq	r3, #0
   16652:	b2db      	uxtb	r3, r3
}
   16654:	4618      	mov	r0, r3
   16656:	3714      	adds	r7, #20
   16658:	46bd      	mov	sp, r7
   1665a:	bc80      	pop	{r7}
   1665c:	4770      	bx	lr

0001665e <z_is_thread_timeout_active>:
{
   1665e:	b580      	push	{r7, lr}
   16660:	b082      	sub	sp, #8
   16662:	af00      	add	r7, sp, #0
   16664:	6078      	str	r0, [r7, #4]
	return !z_is_inactive_timeout(&thread->base.timeout);
   16666:	687b      	ldr	r3, [r7, #4]
   16668:	3318      	adds	r3, #24
   1666a:	4618      	mov	r0, r3
   1666c:	f7ff ffa8 	bl	165c0 <z_is_inactive_timeout>
   16670:	4603      	mov	r3, r0
   16672:	2b00      	cmp	r3, #0
   16674:	bf14      	ite	ne
   16676:	2301      	movne	r3, #1
   16678:	2300      	moveq	r3, #0
   1667a:	b2db      	uxtb	r3, r3
   1667c:	f083 0301 	eor.w	r3, r3, #1
   16680:	b2db      	uxtb	r3, r3
   16682:	f003 0301 	and.w	r3, r3, #1
   16686:	b2db      	uxtb	r3, r3
}
   16688:	4618      	mov	r0, r3
   1668a:	3708      	adds	r7, #8
   1668c:	46bd      	mov	sp, r7
   1668e:	bd80      	pop	{r7, pc}

00016690 <z_is_thread_ready>:
{
   16690:	b580      	push	{r7, lr}
   16692:	b082      	sub	sp, #8
   16694:	af00      	add	r7, sp, #0
   16696:	6078      	str	r0, [r7, #4]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   16698:	6878      	ldr	r0, [r7, #4]
   1669a:	f7ff ffcc 	bl	16636 <z_is_thread_prevented_from_running>
   1669e:	4603      	mov	r3, r0
   166a0:	f083 0301 	eor.w	r3, r3, #1
   166a4:	b2db      	uxtb	r3, r3
   166a6:	2b00      	cmp	r3, #0
   166a8:	d00a      	beq.n	166c0 <z_is_thread_ready+0x30>
		 z_is_thread_timeout_active(thread));
   166aa:	6878      	ldr	r0, [r7, #4]
   166ac:	f7ff ffd7 	bl	1665e <z_is_thread_timeout_active>
   166b0:	4603      	mov	r3, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   166b2:	f083 0301 	eor.w	r3, r3, #1
   166b6:	b2db      	uxtb	r3, r3
   166b8:	2b00      	cmp	r3, #0
   166ba:	d001      	beq.n	166c0 <z_is_thread_ready+0x30>
   166bc:	2301      	movs	r3, #1
   166be:	e000      	b.n	166c2 <z_is_thread_ready+0x32>
   166c0:	2300      	movs	r3, #0
   166c2:	f003 0301 	and.w	r3, r3, #1
   166c6:	b2db      	uxtb	r3, r3
}
   166c8:	4618      	mov	r0, r3
   166ca:	3708      	adds	r7, #8
   166cc:	46bd      	mov	sp, r7
   166ce:	bd80      	pop	{r7, pc}

000166d0 <z_has_thread_started>:
{
   166d0:	b480      	push	{r7}
   166d2:	b083      	sub	sp, #12
   166d4:	af00      	add	r7, sp, #0
   166d6:	6078      	str	r0, [r7, #4]
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   166d8:	687b      	ldr	r3, [r7, #4]
   166da:	7b5b      	ldrb	r3, [r3, #13]
   166dc:	f003 0304 	and.w	r3, r3, #4
   166e0:	2b00      	cmp	r3, #0
   166e2:	bf0c      	ite	eq
   166e4:	2301      	moveq	r3, #1
   166e6:	2300      	movne	r3, #0
   166e8:	b2db      	uxtb	r3, r3
}
   166ea:	4618      	mov	r0, r3
   166ec:	370c      	adds	r7, #12
   166ee:	46bd      	mov	sp, r7
   166f0:	bc80      	pop	{r7}
   166f2:	4770      	bx	lr

000166f4 <z_is_thread_state_set>:
{
   166f4:	b480      	push	{r7}
   166f6:	b083      	sub	sp, #12
   166f8:	af00      	add	r7, sp, #0
   166fa:	6078      	str	r0, [r7, #4]
   166fc:	6039      	str	r1, [r7, #0]
	return (thread->base.thread_state & state) != 0U;
   166fe:	687b      	ldr	r3, [r7, #4]
   16700:	7b5b      	ldrb	r3, [r3, #13]
   16702:	461a      	mov	r2, r3
   16704:	683b      	ldr	r3, [r7, #0]
   16706:	4013      	ands	r3, r2
   16708:	2b00      	cmp	r3, #0
   1670a:	bf14      	ite	ne
   1670c:	2301      	movne	r3, #1
   1670e:	2300      	moveq	r3, #0
   16710:	b2db      	uxtb	r3, r3
}
   16712:	4618      	mov	r0, r3
   16714:	370c      	adds	r7, #12
   16716:	46bd      	mov	sp, r7
   16718:	bc80      	pop	{r7}
   1671a:	4770      	bx	lr

0001671c <z_is_thread_queued>:
{
   1671c:	b580      	push	{r7, lr}
   1671e:	b082      	sub	sp, #8
   16720:	af00      	add	r7, sp, #0
   16722:	6078      	str	r0, [r7, #4]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   16724:	2180      	movs	r1, #128	; 0x80
   16726:	6878      	ldr	r0, [r7, #4]
   16728:	f7ff ffe4 	bl	166f4 <z_is_thread_state_set>
   1672c:	4603      	mov	r3, r0
}
   1672e:	4618      	mov	r0, r3
   16730:	3708      	adds	r7, #8
   16732:	46bd      	mov	sp, r7
   16734:	bd80      	pop	{r7, pc}

00016736 <z_mark_thread_as_suspended>:
{
   16736:	b480      	push	{r7}
   16738:	b083      	sub	sp, #12
   1673a:	af00      	add	r7, sp, #0
   1673c:	6078      	str	r0, [r7, #4]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1673e:	687b      	ldr	r3, [r7, #4]
   16740:	7b5b      	ldrb	r3, [r3, #13]
   16742:	f043 0310 	orr.w	r3, r3, #16
   16746:	b2da      	uxtb	r2, r3
   16748:	687b      	ldr	r3, [r7, #4]
   1674a:	735a      	strb	r2, [r3, #13]
}
   1674c:	bf00      	nop
   1674e:	370c      	adds	r7, #12
   16750:	46bd      	mov	sp, r7
   16752:	bc80      	pop	{r7}
   16754:	4770      	bx	lr

00016756 <z_mark_thread_as_not_suspended>:
{
   16756:	b480      	push	{r7}
   16758:	b083      	sub	sp, #12
   1675a:	af00      	add	r7, sp, #0
   1675c:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1675e:	687b      	ldr	r3, [r7, #4]
   16760:	7b5b      	ldrb	r3, [r3, #13]
   16762:	f023 0310 	bic.w	r3, r3, #16
   16766:	b2da      	uxtb	r2, r3
   16768:	687b      	ldr	r3, [r7, #4]
   1676a:	735a      	strb	r2, [r3, #13]
}
   1676c:	bf00      	nop
   1676e:	370c      	adds	r7, #12
   16770:	46bd      	mov	sp, r7
   16772:	bc80      	pop	{r7}
   16774:	4770      	bx	lr

00016776 <z_mark_thread_as_started>:
{
   16776:	b480      	push	{r7}
   16778:	b083      	sub	sp, #12
   1677a:	af00      	add	r7, sp, #0
   1677c:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1677e:	687b      	ldr	r3, [r7, #4]
   16780:	7b5b      	ldrb	r3, [r3, #13]
   16782:	f023 0304 	bic.w	r3, r3, #4
   16786:	b2da      	uxtb	r2, r3
   16788:	687b      	ldr	r3, [r7, #4]
   1678a:	735a      	strb	r2, [r3, #13]
}
   1678c:	bf00      	nop
   1678e:	370c      	adds	r7, #12
   16790:	46bd      	mov	sp, r7
   16792:	bc80      	pop	{r7}
   16794:	4770      	bx	lr

00016796 <z_mark_thread_as_pending>:
{
   16796:	b480      	push	{r7}
   16798:	b083      	sub	sp, #12
   1679a:	af00      	add	r7, sp, #0
   1679c:	6078      	str	r0, [r7, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   1679e:	687b      	ldr	r3, [r7, #4]
   167a0:	7b5b      	ldrb	r3, [r3, #13]
   167a2:	f043 0302 	orr.w	r3, r3, #2
   167a6:	b2da      	uxtb	r2, r3
   167a8:	687b      	ldr	r3, [r7, #4]
   167aa:	735a      	strb	r2, [r3, #13]
}
   167ac:	bf00      	nop
   167ae:	370c      	adds	r7, #12
   167b0:	46bd      	mov	sp, r7
   167b2:	bc80      	pop	{r7}
   167b4:	4770      	bx	lr

000167b6 <z_mark_thread_as_not_pending>:
{
   167b6:	b480      	push	{r7}
   167b8:	b083      	sub	sp, #12
   167ba:	af00      	add	r7, sp, #0
   167bc:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   167be:	687b      	ldr	r3, [r7, #4]
   167c0:	7b5b      	ldrb	r3, [r3, #13]
   167c2:	f023 0302 	bic.w	r3, r3, #2
   167c6:	b2da      	uxtb	r2, r3
   167c8:	687b      	ldr	r3, [r7, #4]
   167ca:	735a      	strb	r2, [r3, #13]
}
   167cc:	bf00      	nop
   167ce:	370c      	adds	r7, #12
   167d0:	46bd      	mov	sp, r7
   167d2:	bc80      	pop	{r7}
   167d4:	4770      	bx	lr

000167d6 <z_is_prio1_higher_than_prio2>:
{
   167d6:	b480      	push	{r7}
   167d8:	b083      	sub	sp, #12
   167da:	af00      	add	r7, sp, #0
   167dc:	6078      	str	r0, [r7, #4]
   167de:	6039      	str	r1, [r7, #0]
	return prio1 < prio2;
   167e0:	687a      	ldr	r2, [r7, #4]
   167e2:	683b      	ldr	r3, [r7, #0]
   167e4:	429a      	cmp	r2, r3
   167e6:	bfb4      	ite	lt
   167e8:	2301      	movlt	r3, #1
   167ea:	2300      	movge	r3, #0
   167ec:	b2db      	uxtb	r3, r3
}
   167ee:	4618      	mov	r0, r3
   167f0:	370c      	adds	r7, #12
   167f2:	46bd      	mov	sp, r7
   167f4:	bc80      	pop	{r7}
   167f6:	4770      	bx	lr

000167f8 <z_is_prio_higher>:
{
   167f8:	b580      	push	{r7, lr}
   167fa:	b082      	sub	sp, #8
   167fc:	af00      	add	r7, sp, #0
   167fe:	6078      	str	r0, [r7, #4]
   16800:	6039      	str	r1, [r7, #0]
	return z_is_prio1_higher_than_prio2(prio, test_prio);
   16802:	6839      	ldr	r1, [r7, #0]
   16804:	6878      	ldr	r0, [r7, #4]
   16806:	f7ff ffe6 	bl	167d6 <z_is_prio1_higher_than_prio2>
   1680a:	4603      	mov	r3, r0
}
   1680c:	4618      	mov	r0, r3
   1680e:	3708      	adds	r7, #8
   16810:	46bd      	mov	sp, r7
   16812:	bd80      	pop	{r7, pc}

00016814 <z_waitq_head>:
{
   16814:	b580      	push	{r7, lr}
   16816:	b082      	sub	sp, #8
   16818:	af00      	add	r7, sp, #0
   1681a:	6078      	str	r0, [r7, #4]
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1681c:	687b      	ldr	r3, [r7, #4]
   1681e:	4618      	mov	r0, r3
   16820:	f7ff fbec 	bl	15ffc <sys_dlist_peek_head>
   16824:	4603      	mov	r3, r0
}
   16826:	4618      	mov	r0, r3
   16828:	3708      	adds	r7, #8
   1682a:	46bd      	mov	sp, r7
   1682c:	bd80      	pop	{r7, pc}

0001682e <z_swap_irqlock>:
{
   1682e:	b580      	push	{r7, lr}
   16830:	b084      	sub	sp, #16
   16832:	af00      	add	r7, sp, #0
   16834:	6078      	str	r0, [r7, #4]
	ret = arch_swap(key);
   16836:	6878      	ldr	r0, [r7, #4]
   16838:	f7ef f806 	bl	5848 <arch_swap>
   1683c:	60f8      	str	r0, [r7, #12]
	return ret;
   1683e:	68fb      	ldr	r3, [r7, #12]
}
   16840:	4618      	mov	r0, r3
   16842:	3710      	adds	r7, #16
   16844:	46bd      	mov	sp, r7
   16846:	bd80      	pop	{r7, pc}

00016848 <is_preempt>:
{
   16848:	b480      	push	{r7}
   1684a:	b083      	sub	sp, #12
   1684c:	af00      	add	r7, sp, #0
   1684e:	6078      	str	r0, [r7, #4]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   16850:	687b      	ldr	r3, [r7, #4]
   16852:	89db      	ldrh	r3, [r3, #14]
   16854:	2b7f      	cmp	r3, #127	; 0x7f
   16856:	bf94      	ite	ls
   16858:	2301      	movls	r3, #1
   1685a:	2300      	movhi	r3, #0
   1685c:	b2db      	uxtb	r3, r3
}
   1685e:	4618      	mov	r0, r3
   16860:	370c      	adds	r7, #12
   16862:	46bd      	mov	sp, r7
   16864:	bc80      	pop	{r7}
   16866:	4770      	bx	lr

00016868 <is_metairq>:
{
   16868:	b480      	push	{r7}
   1686a:	b083      	sub	sp, #12
   1686c:	af00      	add	r7, sp, #0
   1686e:	6078      	str	r0, [r7, #4]
	return 0;
   16870:	2300      	movs	r3, #0
}
   16872:	4618      	mov	r0, r3
   16874:	370c      	adds	r7, #12
   16876:	46bd      	mov	sp, r7
   16878:	bc80      	pop	{r7}
   1687a:	4770      	bx	lr

0001687c <z_sched_prio_cmp>:
{
   1687c:	b480      	push	{r7}
   1687e:	b085      	sub	sp, #20
   16880:	af00      	add	r7, sp, #0
   16882:	6078      	str	r0, [r7, #4]
   16884:	6039      	str	r1, [r7, #0]
	int32_t b1 = thread_1->base.prio;
   16886:	687b      	ldr	r3, [r7, #4]
   16888:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1688c:	60fb      	str	r3, [r7, #12]
	int32_t b2 = thread_2->base.prio;
   1688e:	683b      	ldr	r3, [r7, #0]
   16890:	f993 300e 	ldrsb.w	r3, [r3, #14]
   16894:	60bb      	str	r3, [r7, #8]
	if (b1 != b2) {
   16896:	68fa      	ldr	r2, [r7, #12]
   16898:	68bb      	ldr	r3, [r7, #8]
   1689a:	429a      	cmp	r2, r3
   1689c:	d003      	beq.n	168a6 <z_sched_prio_cmp+0x2a>
		return b2 - b1;
   1689e:	68ba      	ldr	r2, [r7, #8]
   168a0:	68fb      	ldr	r3, [r7, #12]
   168a2:	1ad3      	subs	r3, r2, r3
   168a4:	e000      	b.n	168a8 <z_sched_prio_cmp+0x2c>
	return 0;
   168a6:	2300      	movs	r3, #0
}
   168a8:	4618      	mov	r0, r3
   168aa:	3714      	adds	r7, #20
   168ac:	46bd      	mov	sp, r7
   168ae:	bc80      	pop	{r7}
   168b0:	4770      	bx	lr

000168b2 <should_queue_thread>:
{
   168b2:	b480      	push	{r7}
   168b4:	b083      	sub	sp, #12
   168b6:	af00      	add	r7, sp, #0
   168b8:	6078      	str	r0, [r7, #4]
	return !IS_ENABLED(CONFIG_SMP) || th != _current;
   168ba:	2301      	movs	r3, #1
}
   168bc:	4618      	mov	r0, r3
   168be:	370c      	adds	r7, #12
   168c0:	46bd      	mov	sp, r7
   168c2:	bc80      	pop	{r7}
   168c4:	4770      	bx	lr

000168c6 <update_metairq_preempt>:
{
   168c6:	b480      	push	{r7}
   168c8:	b083      	sub	sp, #12
   168ca:	af00      	add	r7, sp, #0
   168cc:	6078      	str	r0, [r7, #4]
}
   168ce:	bf00      	nop
   168d0:	370c      	adds	r7, #12
   168d2:	46bd      	mov	sp, r7
   168d4:	bc80      	pop	{r7}
   168d6:	4770      	bx	lr

000168d8 <thread_active_elsewhere>:
{
   168d8:	b480      	push	{r7}
   168da:	b083      	sub	sp, #12
   168dc:	af00      	add	r7, sp, #0
   168de:	6078      	str	r0, [r7, #4]
	return false;
   168e0:	2300      	movs	r3, #0
}
   168e2:	4618      	mov	r0, r3
   168e4:	370c      	adds	r7, #12
   168e6:	46bd      	mov	sp, r7
   168e8:	bc80      	pop	{r7}
   168ea:	4770      	bx	lr

000168ec <add_thread_timeout>:
{
   168ec:	b580      	push	{r7, lr}
   168ee:	b084      	sub	sp, #16
   168f0:	af00      	add	r7, sp, #0
   168f2:	60f8      	str	r0, [r7, #12]
   168f4:	e9c7 2300 	strd	r2, r3, [r7]
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   168f8:	e9d7 2300 	ldrd	r2, r3, [r7]
   168fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16900:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16904:	428b      	cmp	r3, r1
   16906:	bf08      	it	eq
   16908:	4282      	cmpeq	r2, r0
   1690a:	d004      	beq.n	16916 <add_thread_timeout+0x2a>
		z_add_thread_timeout(thread, timeout);
   1690c:	e9d7 2300 	ldrd	r2, r3, [r7]
   16910:	68f8      	ldr	r0, [r7, #12]
   16912:	f7f6 f81b 	bl	c94c <z_add_thread_timeout>
}
   16916:	bf00      	nop
   16918:	3710      	adds	r7, #16
   1691a:	46bd      	mov	sp, r7
   1691c:	bd80      	pop	{r7, pc}

0001691e <unpend_thread_no_timeout>:
{
   1691e:	b580      	push	{r7, lr}
   16920:	b082      	sub	sp, #8
   16922:	af00      	add	r7, sp, #0
   16924:	6078      	str	r0, [r7, #4]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   16926:	6878      	ldr	r0, [r7, #4]
   16928:	f7f6 fd4c 	bl	d3c4 <pended_on_thread>
   1692c:	4603      	mov	r3, r0
   1692e:	6879      	ldr	r1, [r7, #4]
   16930:	4618      	mov	r0, r3
   16932:	f7f7 fbb9 	bl	e0a8 <z_priq_dumb_remove>
	z_mark_thread_as_not_pending(thread);
   16936:	6878      	ldr	r0, [r7, #4]
   16938:	f7ff ff3d 	bl	167b6 <z_mark_thread_as_not_pending>
	thread->base.pended_on = NULL;
   1693c:	687b      	ldr	r3, [r7, #4]
   1693e:	2200      	movs	r2, #0
   16940:	609a      	str	r2, [r3, #8]
}
   16942:	bf00      	nop
   16944:	3708      	adds	r7, #8
   16946:	46bd      	mov	sp, r7
   16948:	bd80      	pop	{r7, pc}

0001694a <resched>:
{
   1694a:	b480      	push	{r7}
   1694c:	b085      	sub	sp, #20
   1694e:	af00      	add	r7, sp, #0
   16950:	6078      	str	r0, [r7, #4]
   16952:	687b      	ldr	r3, [r7, #4]
   16954:	60fb      	str	r3, [r7, #12]

static ALWAYS_INLINE bool arch_irq_unlocked(unsigned int key)
{
	/* This convention works for both PRIMASK and BASEPRI */
	return key == 0U;
   16956:	68fb      	ldr	r3, [r7, #12]
   16958:	2b00      	cmp	r3, #0
   1695a:	bf0c      	ite	eq
   1695c:	2301      	moveq	r3, #1
   1695e:	2300      	movne	r3, #0
   16960:	b2db      	uxtb	r3, r3
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   16962:	2b00      	cmp	r3, #0
   16964:	d00f      	beq.n	16986 <resched+0x3c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16966:	f3ef 8305 	mrs	r3, IPSR
   1696a:	60bb      	str	r3, [r7, #8]
  return(result);
   1696c:	68bb      	ldr	r3, [r7, #8]
   1696e:	2b00      	cmp	r3, #0
   16970:	bf14      	ite	ne
   16972:	2301      	movne	r3, #1
   16974:	2300      	moveq	r3, #0
   16976:	b2db      	uxtb	r3, r3
   16978:	f083 0301 	eor.w	r3, r3, #1
   1697c:	b2db      	uxtb	r3, r3
   1697e:	2b00      	cmp	r3, #0
   16980:	d001      	beq.n	16986 <resched+0x3c>
   16982:	2301      	movs	r3, #1
   16984:	e000      	b.n	16988 <resched+0x3e>
   16986:	2300      	movs	r3, #0
   16988:	f003 0301 	and.w	r3, r3, #1
   1698c:	b2db      	uxtb	r3, r3
}
   1698e:	4618      	mov	r0, r3
   16990:	3714      	adds	r7, #20
   16992:	46bd      	mov	sp, r7
   16994:	bc80      	pop	{r7}
   16996:	4770      	bx	lr

00016998 <z_reschedule_irqlock>:
{
   16998:	b580      	push	{r7, lr}
   1699a:	b084      	sub	sp, #16
   1699c:	af00      	add	r7, sp, #0
   1699e:	6078      	str	r0, [r7, #4]
	if (resched(key)) {
   169a0:	6878      	ldr	r0, [r7, #4]
   169a2:	f7ff ffd2 	bl	1694a <resched>
   169a6:	4603      	mov	r3, r0
   169a8:	2b00      	cmp	r3, #0
   169aa:	d003      	beq.n	169b4 <z_reschedule_irqlock+0x1c>
		z_swap_irqlock(key);
   169ac:	6878      	ldr	r0, [r7, #4]
   169ae:	f7ff ff3e 	bl	1682e <z_swap_irqlock>
}
   169b2:	e007      	b.n	169c4 <z_reschedule_irqlock+0x2c>
   169b4:	687b      	ldr	r3, [r7, #4]
   169b6:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
   169b8:	68fb      	ldr	r3, [r7, #12]
   169ba:	f383 8811 	msr	BASEPRI, r3
   169be:	f3bf 8f6f 	isb	sy
}
   169c2:	bf00      	nop
   169c4:	bf00      	nop
   169c6:	3710      	adds	r7, #16
   169c8:	46bd      	mov	sp, r7
   169ca:	bd80      	pop	{r7, pc}

000169cc <z_priq_dumb_best>:
{
   169cc:	b580      	push	{r7, lr}
   169ce:	b084      	sub	sp, #16
   169d0:	af00      	add	r7, sp, #0
   169d2:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = NULL;
   169d4:	2300      	movs	r3, #0
   169d6:	60fb      	str	r3, [r7, #12]
	sys_dnode_t *n = sys_dlist_peek_head(pq);
   169d8:	6878      	ldr	r0, [r7, #4]
   169da:	f7ff fb0f 	bl	15ffc <sys_dlist_peek_head>
   169de:	60b8      	str	r0, [r7, #8]
	if (n != NULL) {
   169e0:	68bb      	ldr	r3, [r7, #8]
   169e2:	2b00      	cmp	r3, #0
   169e4:	d001      	beq.n	169ea <z_priq_dumb_best+0x1e>
		thread = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
   169e6:	68bb      	ldr	r3, [r7, #8]
   169e8:	60fb      	str	r3, [r7, #12]
	return thread;
   169ea:	68fb      	ldr	r3, [r7, #12]
}
   169ec:	4618      	mov	r0, r3
   169ee:	3710      	adds	r7, #16
   169f0:	46bd      	mov	sp, r7
   169f2:	bd80      	pop	{r7, pc}

000169f4 <unpend_all>:
{
   169f4:	b580      	push	{r7, lr}
   169f6:	b086      	sub	sp, #24
   169f8:	af00      	add	r7, sp, #0
   169fa:	6078      	str	r0, [r7, #4]
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   169fc:	e010      	b.n	16a20 <unpend_all+0x2c>
		unpend_thread_no_timeout(thread);
   169fe:	6978      	ldr	r0, [r7, #20]
   16a00:	f7ff ff8d 	bl	1691e <unpend_thread_no_timeout>
		(void)z_abort_thread_timeout(thread);
   16a04:	6978      	ldr	r0, [r7, #20]
   16a06:	f7ff fdf3 	bl	165f0 <z_abort_thread_timeout>
   16a0a:	697b      	ldr	r3, [r7, #20]
   16a0c:	613b      	str	r3, [r7, #16]
   16a0e:	2300      	movs	r3, #0
   16a10:	60fb      	str	r3, [r7, #12]
	thread->arch.swap_return_value = value;
   16a12:	693b      	ldr	r3, [r7, #16]
   16a14:	68fa      	ldr	r2, [r7, #12]
   16a16:	679a      	str	r2, [r3, #120]	; 0x78
}
   16a18:	bf00      	nop
		ready_thread(thread);
   16a1a:	6978      	ldr	r0, [r7, #20]
   16a1c:	f7f6 faba 	bl	cf94 <ready_thread>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   16a20:	6878      	ldr	r0, [r7, #4]
   16a22:	f7ff fef7 	bl	16814 <z_waitq_head>
   16a26:	6178      	str	r0, [r7, #20]
   16a28:	697b      	ldr	r3, [r7, #20]
   16a2a:	2b00      	cmp	r3, #0
   16a2c:	d1e7      	bne.n	169fe <unpend_all+0xa>
}
   16a2e:	bf00      	nop
   16a30:	bf00      	nop
   16a32:	3718      	adds	r7, #24
   16a34:	46bd      	mov	sp, r7
   16a36:	bd80      	pop	{r7, pc}

00016a38 <sys_dnode_init>:
{
   16a38:	b480      	push	{r7}
   16a3a:	b083      	sub	sp, #12
   16a3c:	af00      	add	r7, sp, #0
   16a3e:	6078      	str	r0, [r7, #4]
	node->next = NULL;
   16a40:	687b      	ldr	r3, [r7, #4]
   16a42:	2200      	movs	r2, #0
   16a44:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
   16a46:	687b      	ldr	r3, [r7, #4]
   16a48:	2200      	movs	r2, #0
   16a4a:	605a      	str	r2, [r3, #4]
}
   16a4c:	bf00      	nop
   16a4e:	370c      	adds	r7, #12
   16a50:	46bd      	mov	sp, r7
   16a52:	bc80      	pop	{r7}
   16a54:	4770      	bx	lr

00016a56 <sys_dnode_is_linked>:
{
   16a56:	b480      	push	{r7}
   16a58:	b083      	sub	sp, #12
   16a5a:	af00      	add	r7, sp, #0
   16a5c:	6078      	str	r0, [r7, #4]
	return node->next != NULL;
   16a5e:	687b      	ldr	r3, [r7, #4]
   16a60:	681b      	ldr	r3, [r3, #0]
   16a62:	2b00      	cmp	r3, #0
   16a64:	bf14      	ite	ne
   16a66:	2301      	movne	r3, #1
   16a68:	2300      	moveq	r3, #0
   16a6a:	b2db      	uxtb	r3, r3
}
   16a6c:	4618      	mov	r0, r3
   16a6e:	370c      	adds	r7, #12
   16a70:	46bd      	mov	sp, r7
   16a72:	bc80      	pop	{r7}
   16a74:	4770      	bx	lr

00016a76 <sys_dlist_is_empty>:
{
   16a76:	b480      	push	{r7}
   16a78:	b083      	sub	sp, #12
   16a7a:	af00      	add	r7, sp, #0
   16a7c:	6078      	str	r0, [r7, #4]
	return list->head == list;
   16a7e:	687b      	ldr	r3, [r7, #4]
   16a80:	681b      	ldr	r3, [r3, #0]
   16a82:	687a      	ldr	r2, [r7, #4]
   16a84:	429a      	cmp	r2, r3
   16a86:	bf0c      	ite	eq
   16a88:	2301      	moveq	r3, #1
   16a8a:	2300      	movne	r3, #0
   16a8c:	b2db      	uxtb	r3, r3
}
   16a8e:	4618      	mov	r0, r3
   16a90:	370c      	adds	r7, #12
   16a92:	46bd      	mov	sp, r7
   16a94:	bc80      	pop	{r7}
   16a96:	4770      	bx	lr

00016a98 <sys_dlist_peek_head>:
{
   16a98:	b580      	push	{r7, lr}
   16a9a:	b082      	sub	sp, #8
   16a9c:	af00      	add	r7, sp, #0
   16a9e:	6078      	str	r0, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16aa0:	6878      	ldr	r0, [r7, #4]
   16aa2:	f7ff ffe8 	bl	16a76 <sys_dlist_is_empty>
   16aa6:	4603      	mov	r3, r0
   16aa8:	2b00      	cmp	r3, #0
   16aaa:	d102      	bne.n	16ab2 <sys_dlist_peek_head+0x1a>
   16aac:	687b      	ldr	r3, [r7, #4]
   16aae:	681b      	ldr	r3, [r3, #0]
   16ab0:	e000      	b.n	16ab4 <sys_dlist_peek_head+0x1c>
   16ab2:	2300      	movs	r3, #0
}
   16ab4:	4618      	mov	r0, r3
   16ab6:	3708      	adds	r7, #8
   16ab8:	46bd      	mov	sp, r7
   16aba:	bd80      	pop	{r7, pc}

00016abc <sys_dlist_peek_next_no_check>:
{
   16abc:	b480      	push	{r7}
   16abe:	b083      	sub	sp, #12
   16ac0:	af00      	add	r7, sp, #0
   16ac2:	6078      	str	r0, [r7, #4]
   16ac4:	6039      	str	r1, [r7, #0]
	return (node == list->tail) ? NULL : node->next;
   16ac6:	687b      	ldr	r3, [r7, #4]
   16ac8:	685b      	ldr	r3, [r3, #4]
   16aca:	683a      	ldr	r2, [r7, #0]
   16acc:	429a      	cmp	r2, r3
   16ace:	d002      	beq.n	16ad6 <sys_dlist_peek_next_no_check+0x1a>
   16ad0:	683b      	ldr	r3, [r7, #0]
   16ad2:	681b      	ldr	r3, [r3, #0]
   16ad4:	e000      	b.n	16ad8 <sys_dlist_peek_next_no_check+0x1c>
   16ad6:	2300      	movs	r3, #0
}
   16ad8:	4618      	mov	r0, r3
   16ada:	370c      	adds	r7, #12
   16adc:	46bd      	mov	sp, r7
   16ade:	bc80      	pop	{r7}
   16ae0:	4770      	bx	lr

00016ae2 <sys_dlist_peek_next>:
{
   16ae2:	b580      	push	{r7, lr}
   16ae4:	b082      	sub	sp, #8
   16ae6:	af00      	add	r7, sp, #0
   16ae8:	6078      	str	r0, [r7, #4]
   16aea:	6039      	str	r1, [r7, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   16aec:	683b      	ldr	r3, [r7, #0]
   16aee:	2b00      	cmp	r3, #0
   16af0:	d005      	beq.n	16afe <sys_dlist_peek_next+0x1c>
   16af2:	6839      	ldr	r1, [r7, #0]
   16af4:	6878      	ldr	r0, [r7, #4]
   16af6:	f7ff ffe1 	bl	16abc <sys_dlist_peek_next_no_check>
   16afa:	4603      	mov	r3, r0
   16afc:	e000      	b.n	16b00 <sys_dlist_peek_next+0x1e>
   16afe:	2300      	movs	r3, #0
}
   16b00:	4618      	mov	r0, r3
   16b02:	3708      	adds	r7, #8
   16b04:	46bd      	mov	sp, r7
   16b06:	bd80      	pop	{r7, pc}

00016b08 <sys_dlist_append>:
{
   16b08:	b480      	push	{r7}
   16b0a:	b085      	sub	sp, #20
   16b0c:	af00      	add	r7, sp, #0
   16b0e:	6078      	str	r0, [r7, #4]
   16b10:	6039      	str	r1, [r7, #0]
	sys_dnode_t *const tail = list->tail;
   16b12:	687b      	ldr	r3, [r7, #4]
   16b14:	685b      	ldr	r3, [r3, #4]
   16b16:	60fb      	str	r3, [r7, #12]
	node->next = list;
   16b18:	683b      	ldr	r3, [r7, #0]
   16b1a:	687a      	ldr	r2, [r7, #4]
   16b1c:	601a      	str	r2, [r3, #0]
	node->prev = tail;
   16b1e:	683b      	ldr	r3, [r7, #0]
   16b20:	68fa      	ldr	r2, [r7, #12]
   16b22:	605a      	str	r2, [r3, #4]
	tail->next = node;
   16b24:	68fb      	ldr	r3, [r7, #12]
   16b26:	683a      	ldr	r2, [r7, #0]
   16b28:	601a      	str	r2, [r3, #0]
	list->tail = node;
   16b2a:	687b      	ldr	r3, [r7, #4]
   16b2c:	683a      	ldr	r2, [r7, #0]
   16b2e:	605a      	str	r2, [r3, #4]
}
   16b30:	bf00      	nop
   16b32:	3714      	adds	r7, #20
   16b34:	46bd      	mov	sp, r7
   16b36:	bc80      	pop	{r7}
   16b38:	4770      	bx	lr

00016b3a <sys_dlist_insert>:
{
   16b3a:	b480      	push	{r7}
   16b3c:	b085      	sub	sp, #20
   16b3e:	af00      	add	r7, sp, #0
   16b40:	6078      	str	r0, [r7, #4]
   16b42:	6039      	str	r1, [r7, #0]
	sys_dnode_t *const prev = successor->prev;
   16b44:	687b      	ldr	r3, [r7, #4]
   16b46:	685b      	ldr	r3, [r3, #4]
   16b48:	60fb      	str	r3, [r7, #12]
	node->prev = prev;
   16b4a:	683b      	ldr	r3, [r7, #0]
   16b4c:	68fa      	ldr	r2, [r7, #12]
   16b4e:	605a      	str	r2, [r3, #4]
	node->next = successor;
   16b50:	683b      	ldr	r3, [r7, #0]
   16b52:	687a      	ldr	r2, [r7, #4]
   16b54:	601a      	str	r2, [r3, #0]
	prev->next = node;
   16b56:	68fb      	ldr	r3, [r7, #12]
   16b58:	683a      	ldr	r2, [r7, #0]
   16b5a:	601a      	str	r2, [r3, #0]
	successor->prev = node;
   16b5c:	687b      	ldr	r3, [r7, #4]
   16b5e:	683a      	ldr	r2, [r7, #0]
   16b60:	605a      	str	r2, [r3, #4]
}
   16b62:	bf00      	nop
   16b64:	3714      	adds	r7, #20
   16b66:	46bd      	mov	sp, r7
   16b68:	bc80      	pop	{r7}
   16b6a:	4770      	bx	lr

00016b6c <sys_dlist_remove>:
{
   16b6c:	b580      	push	{r7, lr}
   16b6e:	b084      	sub	sp, #16
   16b70:	af00      	add	r7, sp, #0
   16b72:	6078      	str	r0, [r7, #4]
	sys_dnode_t *const prev = node->prev;
   16b74:	687b      	ldr	r3, [r7, #4]
   16b76:	685b      	ldr	r3, [r3, #4]
   16b78:	60fb      	str	r3, [r7, #12]
	sys_dnode_t *const next = node->next;
   16b7a:	687b      	ldr	r3, [r7, #4]
   16b7c:	681b      	ldr	r3, [r3, #0]
   16b7e:	60bb      	str	r3, [r7, #8]
	prev->next = next;
   16b80:	68fb      	ldr	r3, [r7, #12]
   16b82:	68ba      	ldr	r2, [r7, #8]
   16b84:	601a      	str	r2, [r3, #0]
	next->prev = prev;
   16b86:	68bb      	ldr	r3, [r7, #8]
   16b88:	68fa      	ldr	r2, [r7, #12]
   16b8a:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
   16b8c:	6878      	ldr	r0, [r7, #4]
   16b8e:	f7ff ff53 	bl	16a38 <sys_dnode_init>
}
   16b92:	bf00      	nop
   16b94:	3710      	adds	r7, #16
   16b96:	46bd      	mov	sp, r7
   16b98:	bd80      	pop	{r7, pc}

00016b9a <remove_timeout>:
{
   16b9a:	b5f0      	push	{r4, r5, r6, r7, lr}
   16b9c:	b083      	sub	sp, #12
   16b9e:	af00      	add	r7, sp, #0
   16ba0:	6078      	str	r0, [r7, #4]
	if (next(t) != NULL) {
   16ba2:	6878      	ldr	r0, [r7, #4]
   16ba4:	f7f7 fe6c 	bl	e880 <next>
   16ba8:	4603      	mov	r3, r0
   16baa:	2b00      	cmp	r3, #0
   16bac:	d00d      	beq.n	16bca <remove_timeout+0x30>
		next(t)->dticks += t->dticks;
   16bae:	6878      	ldr	r0, [r7, #4]
   16bb0:	f7f7 fe66 	bl	e880 <next>
   16bb4:	4606      	mov	r6, r0
   16bb6:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   16bba:	687b      	ldr	r3, [r7, #4]
   16bbc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   16bc0:	1884      	adds	r4, r0, r2
   16bc2:	eb41 0503 	adc.w	r5, r1, r3
   16bc6:	e9c6 4504 	strd	r4, r5, [r6, #16]
	sys_dlist_remove(&t->node);
   16bca:	687b      	ldr	r3, [r7, #4]
   16bcc:	4618      	mov	r0, r3
   16bce:	f7ff ffcd 	bl	16b6c <sys_dlist_remove>
}
   16bd2:	bf00      	nop
   16bd4:	370c      	adds	r7, #12
   16bd6:	46bd      	mov	sp, r7
   16bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00016bda <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   16bda:	b580      	push	{r7, lr}
   16bdc:	af00      	add	r7, sp, #0
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   16bde:	f7f8 fabf 	bl	f160 <sys_clock_tick_get>
   16be2:	4602      	mov	r2, r0
   16be4:	460b      	mov	r3, r1
   16be6:	4613      	mov	r3, r2
#else
	return (uint32_t)curr_tick;
#endif
}
   16be8:	4618      	mov	r0, r3
   16bea:	bd80      	pop	{r7, pc}

00016bec <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   16bec:	b580      	push	{r7, lr}
   16bee:	af00      	add	r7, sp, #0
	return sys_clock_tick_get();
   16bf0:	f7f8 fab6 	bl	f160 <sys_clock_tick_get>
   16bf4:	4602      	mov	r2, r0
   16bf6:	460b      	mov	r3, r1
}
   16bf8:	4610      	mov	r0, r2
   16bfa:	4619      	mov	r1, r3
   16bfc:	bd80      	pop	{r7, pc}

00016bfe <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
   16bfe:	b580      	push	{r7, lr}
   16c00:	b082      	sub	sp, #8
   16c02:	af00      	add	r7, sp, #0
   16c04:	6078      	str	r0, [r7, #4]
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   16c06:	687b      	ldr	r3, [r7, #4]
   16c08:	2b00      	cmp	r3, #0
   16c0a:	d003      	beq.n	16c14 <z_impl_k_busy_wait+0x16>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   16c0c:	6878      	ldr	r0, [r7, #4]
   16c0e:	f7f9 fca3 	bl	10558 <arch_busy_wait>
   16c12:	e000      	b.n	16c16 <z_impl_k_busy_wait+0x18>
		return;
   16c14:	bf00      	nop
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   16c16:	3708      	adds	r7, #8
   16c18:	46bd      	mov	sp, r7
   16c1a:	bd80      	pop	{r7, pc}

00016c1c <sys_dlist_init>:
{
   16c1c:	b480      	push	{r7}
   16c1e:	b083      	sub	sp, #12
   16c20:	af00      	add	r7, sp, #0
   16c22:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   16c24:	687b      	ldr	r3, [r7, #4]
   16c26:	687a      	ldr	r2, [r7, #4]
   16c28:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   16c2a:	687b      	ldr	r3, [r7, #4]
   16c2c:	687a      	ldr	r2, [r7, #4]
   16c2e:	605a      	str	r2, [r3, #4]
}
   16c30:	bf00      	nop
   16c32:	370c      	adds	r7, #12
   16c34:	46bd      	mov	sp, r7
   16c36:	bc80      	pop	{r7}
   16c38:	4770      	bx	lr

00016c3a <sys_dnode_init>:
{
   16c3a:	b480      	push	{r7}
   16c3c:	b083      	sub	sp, #12
   16c3e:	af00      	add	r7, sp, #0
   16c40:	6078      	str	r0, [r7, #4]
	node->next = NULL;
   16c42:	687b      	ldr	r3, [r7, #4]
   16c44:	2200      	movs	r2, #0
   16c46:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
   16c48:	687b      	ldr	r3, [r7, #4]
   16c4a:	2200      	movs	r2, #0
   16c4c:	605a      	str	r2, [r3, #4]
}
   16c4e:	bf00      	nop
   16c50:	370c      	adds	r7, #12
   16c52:	46bd      	mov	sp, r7
   16c54:	bc80      	pop	{r7}
   16c56:	4770      	bx	lr

00016c58 <sys_dlist_is_empty>:
{
   16c58:	b480      	push	{r7}
   16c5a:	b083      	sub	sp, #12
   16c5c:	af00      	add	r7, sp, #0
   16c5e:	6078      	str	r0, [r7, #4]
	return list->head == list;
   16c60:	687b      	ldr	r3, [r7, #4]
   16c62:	681b      	ldr	r3, [r3, #0]
   16c64:	687a      	ldr	r2, [r7, #4]
   16c66:	429a      	cmp	r2, r3
   16c68:	bf0c      	ite	eq
   16c6a:	2301      	moveq	r3, #1
   16c6c:	2300      	movne	r3, #0
   16c6e:	b2db      	uxtb	r3, r3
}
   16c70:	4618      	mov	r0, r3
   16c72:	370c      	adds	r7, #12
   16c74:	46bd      	mov	sp, r7
   16c76:	bc80      	pop	{r7}
   16c78:	4770      	bx	lr

00016c7a <sys_dlist_peek_head>:
{
   16c7a:	b580      	push	{r7, lr}
   16c7c:	b082      	sub	sp, #8
   16c7e:	af00      	add	r7, sp, #0
   16c80:	6078      	str	r0, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16c82:	6878      	ldr	r0, [r7, #4]
   16c84:	f7ff ffe8 	bl	16c58 <sys_dlist_is_empty>
   16c88:	4603      	mov	r3, r0
   16c8a:	2b00      	cmp	r3, #0
   16c8c:	d102      	bne.n	16c94 <sys_dlist_peek_head+0x1a>
   16c8e:	687b      	ldr	r3, [r7, #4]
   16c90:	681b      	ldr	r3, [r3, #0]
   16c92:	e000      	b.n	16c96 <sys_dlist_peek_head+0x1c>
   16c94:	2300      	movs	r3, #0
}
   16c96:	4618      	mov	r0, r3
   16c98:	3708      	adds	r7, #8
   16c9a:	46bd      	mov	sp, r7
   16c9c:	bd80      	pop	{r7, pc}

00016c9e <z_object_init>:
{
   16c9e:	b480      	push	{r7}
   16ca0:	b083      	sub	sp, #12
   16ca2:	af00      	add	r7, sp, #0
   16ca4:	6078      	str	r0, [r7, #4]
}
   16ca6:	bf00      	nop
   16ca8:	370c      	adds	r7, #12
   16caa:	46bd      	mov	sp, r7
   16cac:	bc80      	pop	{r7}
   16cae:	4770      	bx	lr

00016cb0 <z_init_timeout>:
{
   16cb0:	b580      	push	{r7, lr}
   16cb2:	b082      	sub	sp, #8
   16cb4:	af00      	add	r7, sp, #0
   16cb6:	6078      	str	r0, [r7, #4]
	sys_dnode_init(&to->node);
   16cb8:	687b      	ldr	r3, [r7, #4]
   16cba:	4618      	mov	r0, r3
   16cbc:	f7ff ffbd 	bl	16c3a <sys_dnode_init>
}
   16cc0:	bf00      	nop
   16cc2:	3708      	adds	r7, #8
   16cc4:	46bd      	mov	sp, r7
   16cc6:	bd80      	pop	{r7, pc}

00016cc8 <z_reschedule_unlocked>:
{
   16cc8:	b580      	push	{r7, lr}
   16cca:	b082      	sub	sp, #8
   16ccc:	af00      	add	r7, sp, #0
	__asm__ volatile(
   16cce:	f04f 0320 	mov.w	r3, #32
   16cd2:	f3ef 8211 	mrs	r2, BASEPRI
   16cd6:	f383 8811 	msr	BASEPRI, r3
   16cda:	f3bf 8f6f 	isb	sy
   16cde:	607a      	str	r2, [r7, #4]
   16ce0:	603b      	str	r3, [r7, #0]
	return key;
   16ce2:	687b      	ldr	r3, [r7, #4]
	(void) z_reschedule_irqlock(arch_irq_lock());
   16ce4:	4618      	mov	r0, r3
   16ce6:	f7ff fe57 	bl	16998 <z_reschedule_irqlock>
}
   16cea:	bf00      	nop
   16cec:	3708      	adds	r7, #8
   16cee:	46bd      	mov	sp, r7
   16cf0:	bd80      	pop	{r7, pc}

00016cf2 <z_waitq_init>:
{
   16cf2:	b580      	push	{r7, lr}
   16cf4:	b082      	sub	sp, #8
   16cf6:	af00      	add	r7, sp, #0
   16cf8:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
   16cfa:	687b      	ldr	r3, [r7, #4]
   16cfc:	4618      	mov	r0, r3
   16cfe:	f7ff ff8d 	bl	16c1c <sys_dlist_init>
}
   16d02:	bf00      	nop
   16d04:	3708      	adds	r7, #8
   16d06:	46bd      	mov	sp, r7
   16d08:	bd80      	pop	{r7, pc}

00016d0a <z_waitq_head>:
{
   16d0a:	b580      	push	{r7, lr}
   16d0c:	b082      	sub	sp, #8
   16d0e:	af00      	add	r7, sp, #0
   16d10:	6078      	str	r0, [r7, #4]
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   16d12:	687b      	ldr	r3, [r7, #4]
   16d14:	4618      	mov	r0, r3
   16d16:	f7ff ffb0 	bl	16c7a <sys_dlist_peek_head>
   16d1a:	4603      	mov	r3, r0
}
   16d1c:	4618      	mov	r0, r3
   16d1e:	3708      	adds	r7, #8
   16d20:	46bd      	mov	sp, r7
   16d22:	bd80      	pop	{r7, pc}

00016d24 <k_timer_init>:
{
   16d24:	b580      	push	{r7, lr}
   16d26:	b084      	sub	sp, #16
   16d28:	af00      	add	r7, sp, #0
   16d2a:	60f8      	str	r0, [r7, #12]
   16d2c:	60b9      	str	r1, [r7, #8]
   16d2e:	607a      	str	r2, [r7, #4]
	timer->expiry_fn = expiry_fn;
   16d30:	68fb      	ldr	r3, [r7, #12]
   16d32:	68ba      	ldr	r2, [r7, #8]
   16d34:	621a      	str	r2, [r3, #32]
	timer->stop_fn = stop_fn;
   16d36:	68fb      	ldr	r3, [r7, #12]
   16d38:	687a      	ldr	r2, [r7, #4]
   16d3a:	625a      	str	r2, [r3, #36]	; 0x24
	timer->status = 0U;
   16d3c:	68fb      	ldr	r3, [r7, #12]
   16d3e:	2200      	movs	r2, #0
   16d40:	631a      	str	r2, [r3, #48]	; 0x30
		z_waitq_init(&timer->wait_q);
   16d42:	68fb      	ldr	r3, [r7, #12]
   16d44:	3318      	adds	r3, #24
   16d46:	4618      	mov	r0, r3
   16d48:	f7ff ffd3 	bl	16cf2 <z_waitq_init>
	z_init_timeout(&timer->timeout);
   16d4c:	68fb      	ldr	r3, [r7, #12]
   16d4e:	4618      	mov	r0, r3
   16d50:	f7ff ffae 	bl	16cb0 <z_init_timeout>
	timer->user_data = NULL;
   16d54:	68fb      	ldr	r3, [r7, #12]
   16d56:	2200      	movs	r2, #0
   16d58:	635a      	str	r2, [r3, #52]	; 0x34
	z_object_init(timer);
   16d5a:	68f8      	ldr	r0, [r7, #12]
   16d5c:	f7ff ff9f 	bl	16c9e <z_object_init>
}
   16d60:	bf00      	nop
   16d62:	3710      	adds	r7, #16
   16d64:	46bd      	mov	sp, r7
   16d66:	bd80      	pop	{r7, pc}

00016d68 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   16d68:	b580      	push	{r7, lr}
   16d6a:	b084      	sub	sp, #16
   16d6c:	af00      	add	r7, sp, #0
   16d6e:	6078      	str	r0, [r7, #4]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   16d70:	687b      	ldr	r3, [r7, #4]
   16d72:	4618      	mov	r0, r3
   16d74:	f7f7 ff3a 	bl	ebec <z_abort_timeout>
   16d78:	4603      	mov	r3, r0
   16d7a:	2b00      	cmp	r3, #0
   16d7c:	bf14      	ite	ne
   16d7e:	2301      	movne	r3, #1
   16d80:	2300      	moveq	r3, #0
   16d82:	b2db      	uxtb	r3, r3
   16d84:	60fb      	str	r3, [r7, #12]

	if (inactive) {
   16d86:	68fb      	ldr	r3, [r7, #12]
   16d88:	2b00      	cmp	r3, #0
   16d8a:	d116      	bne.n	16dba <z_impl_k_timer_stop+0x52>
		return;
	}

	if (timer->stop_fn != NULL) {
   16d8c:	687b      	ldr	r3, [r7, #4]
   16d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16d90:	2b00      	cmp	r3, #0
   16d92:	d003      	beq.n	16d9c <z_impl_k_timer_stop+0x34>
		timer->stop_fn(timer);
   16d94:	687b      	ldr	r3, [r7, #4]
   16d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16d98:	6878      	ldr	r0, [r7, #4]
   16d9a:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   16d9c:	687b      	ldr	r3, [r7, #4]
   16d9e:	3318      	adds	r3, #24
   16da0:	4618      	mov	r0, r3
   16da2:	f7f6 fd99 	bl	d8d8 <z_unpend1_no_timeout>
   16da6:	60b8      	str	r0, [r7, #8]

		if (pending_thread != NULL) {
   16da8:	68bb      	ldr	r3, [r7, #8]
   16daa:	2b00      	cmp	r3, #0
   16dac:	d006      	beq.n	16dbc <z_impl_k_timer_stop+0x54>
			z_ready_thread(pending_thread);
   16dae:	68b8      	ldr	r0, [r7, #8]
   16db0:	f7f6 f976 	bl	d0a0 <z_ready_thread>
			z_reschedule_unlocked();
   16db4:	f7ff ff88 	bl	16cc8 <z_reschedule_unlocked>
   16db8:	e000      	b.n	16dbc <z_impl_k_timer_stop+0x54>
		return;
   16dba:	bf00      	nop
		}
	}
}
   16dbc:	3710      	adds	r7, #16
   16dbe:	46bd      	mov	sp, r7
   16dc0:	bd80      	pop	{r7, pc}

00016dc2 <k_busy_wait>:
{
   16dc2:	b580      	push	{r7, lr}
   16dc4:	b082      	sub	sp, #8
   16dc6:	af00      	add	r7, sp, #0
   16dc8:	6078      	str	r0, [r7, #4]
	z_impl_k_busy_wait(usec_to_wait);
   16dca:	6878      	ldr	r0, [r7, #4]
   16dcc:	f7ff ff17 	bl	16bfe <z_impl_k_busy_wait>
}
   16dd0:	bf00      	nop
   16dd2:	3708      	adds	r7, #8
   16dd4:	46bd      	mov	sp, r7
   16dd6:	bd80      	pop	{r7, pc}

00016dd8 <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   16dd8:	f7f2 ba4e 	b.w	9278 <SystemInit>
