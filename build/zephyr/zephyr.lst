
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_start>:
   10000:	20016330 	.word	0x20016330
   10004:	0001612d 	.word	0x0001612d
   10008:	0002437b 	.word	0x0002437b
   1000c:	0001615d 	.word	0x0001615d
   10010:	0001615d 	.word	0x0001615d
   10014:	0001615d 	.word	0x0001615d
   10018:	0001615d 	.word	0x0001615d
   1001c:	0001615d 	.word	0x0001615d
	...
   1002c:	00015bcd 	.word	0x00015bcd
   10030:	0001615d 	.word	0x0001615d
   10034:	00000000 	.word	0x00000000
   10038:	00015b75 	.word	0x00015b75
   1003c:	00015471 	.word	0x00015471

00010040 <_irq_vector_table>:
   10040:	000160ed 000160ed 000160ed 000160ed     .`...`...`...`..
   10050:	000160ed 000160ed 000160ed 000160ed     .`...`...`...`..
   10060:	000160ed 000160ed 000160ed 000160ed     .`...`...`...`..
   10070:	000160ed 000160ed 000160ed 000160ed     .`...`...`...`..
   10080:	000160ed 000160ed 000160ed 000160ed     .`...`...`...`..
   10090:	000160ed 000160ed 000160ed 000160ed     .`...`...`...`..
   100a0:	000160ed 000160ed 000160ed 000160ed     .`...`...`...`..
   100b0:	00026b7b 00026ba7 000160ed 000160ed     {k...k...`...`..
   100c0:	000160ed 000160ed 000160ed 000160ed     .`...`...`...`..
   100d0:	000160ed 000160ed 000160ed 000160ed     .`...`...`...`..
   100e0:	000160ed 000160ed 000160ed 000160ed     .`...`...`...`..
   100f0:	000160ed 000160ed 000160ed 000160ed     .`...`...`...`..
   10100:	000160ed 000160ed 000160ed 000160ed     .`...`...`...`..
   10110:	000160ed 000160ed 000160ed 000160ed     .`...`...`...`..
   10120:	000160ed 000160ed 000160ed 000160ed     .`...`...`...`..
   10130:	000160ed 000160ed 000160ed 000160ed     .`...`...`...`..
   10140:	000160ed                                .`..

00010144 <_vector_end>:
	...

00010200 <m_firmware_info>:
   10200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   10210:	0001cf6c 00000001 00010000 00010000     l...............
   10220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001023c <__aeabi_uldivmod>:
   1023c:	b953      	cbnz	r3, 10254 <__aeabi_uldivmod+0x18>
   1023e:	b94a      	cbnz	r2, 10254 <__aeabi_uldivmod+0x18>
   10240:	2900      	cmp	r1, #0
   10242:	bf08      	it	eq
   10244:	2800      	cmpeq	r0, #0
   10246:	bf1c      	itt	ne
   10248:	f04f 31ff 	movne.w	r1, #4294967295
   1024c:	f04f 30ff 	movne.w	r0, #4294967295
   10250:	f000 b970 	b.w	10534 <__aeabi_idiv0>
   10254:	f1ad 0c08 	sub.w	ip, sp, #8
   10258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1025c:	f000 f806 	bl	1026c <__udivmoddi4>
   10260:	f8dd e004 	ldr.w	lr, [sp, #4]
   10264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10268:	b004      	add	sp, #16
   1026a:	4770      	bx	lr

0001026c <__udivmoddi4>:
   1026c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10270:	9e08      	ldr	r6, [sp, #32]
   10272:	460d      	mov	r5, r1
   10274:	4604      	mov	r4, r0
   10276:	468a      	mov	sl, r1
   10278:	2b00      	cmp	r3, #0
   1027a:	d17f      	bne.n	1037c <__udivmoddi4+0x110>
   1027c:	428a      	cmp	r2, r1
   1027e:	4617      	mov	r7, r2
   10280:	d941      	bls.n	10306 <__udivmoddi4+0x9a>
   10282:	fab2 f282 	clz	r2, r2
   10286:	b14a      	cbz	r2, 1029c <__udivmoddi4+0x30>
   10288:	f1c2 0120 	rsb	r1, r2, #32
   1028c:	fa05 f302 	lsl.w	r3, r5, r2
   10290:	4097      	lsls	r7, r2
   10292:	4094      	lsls	r4, r2
   10294:	fa20 f101 	lsr.w	r1, r0, r1
   10298:	ea41 0a03 	orr.w	sl, r1, r3
   1029c:	ea4f 4817 	mov.w	r8, r7, lsr #16
   102a0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   102a4:	fa1f f987 	uxth.w	r9, r7
   102a8:	fbba fef8 	udiv	lr, sl, r8
   102ac:	fb08 a31e 	mls	r3, r8, lr, sl
   102b0:	fb0e f109 	mul.w	r1, lr, r9
   102b4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   102b8:	4299      	cmp	r1, r3
   102ba:	d906      	bls.n	102ca <__udivmoddi4+0x5e>
   102bc:	18fb      	adds	r3, r7, r3
   102be:	d202      	bcs.n	102c6 <__udivmoddi4+0x5a>
   102c0:	4299      	cmp	r1, r3
   102c2:	f200 8124 	bhi.w	1050e <__udivmoddi4+0x2a2>
   102c6:	f10e 3eff 	add.w	lr, lr, #4294967295
   102ca:	1a59      	subs	r1, r3, r1
   102cc:	b2a3      	uxth	r3, r4
   102ce:	fbb1 f0f8 	udiv	r0, r1, r8
   102d2:	fb08 1110 	mls	r1, r8, r0, r1
   102d6:	fb00 f909 	mul.w	r9, r0, r9
   102da:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   102de:	45a1      	cmp	r9, r4
   102e0:	d905      	bls.n	102ee <__udivmoddi4+0x82>
   102e2:	193c      	adds	r4, r7, r4
   102e4:	d202      	bcs.n	102ec <__udivmoddi4+0x80>
   102e6:	45a1      	cmp	r9, r4
   102e8:	f200 810e 	bhi.w	10508 <__udivmoddi4+0x29c>
   102ec:	3801      	subs	r0, #1
   102ee:	eba4 0409 	sub.w	r4, r4, r9
   102f2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
   102f6:	2100      	movs	r1, #0
   102f8:	b11e      	cbz	r6, 10302 <__udivmoddi4+0x96>
   102fa:	40d4      	lsrs	r4, r2
   102fc:	2300      	movs	r3, #0
   102fe:	e9c6 4300 	strd	r4, r3, [r6]
   10302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10306:	b902      	cbnz	r2, 1030a <__udivmoddi4+0x9e>
   10308:	deff      	udf	#255	; 0xff
   1030a:	fab2 f282 	clz	r2, r2
   1030e:	2a00      	cmp	r2, #0
   10310:	d14f      	bne.n	103b2 <__udivmoddi4+0x146>
   10312:	1bcb      	subs	r3, r1, r7
   10314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   10318:	fa1f f887 	uxth.w	r8, r7
   1031c:	2101      	movs	r1, #1
   1031e:	0c25      	lsrs	r5, r4, #16
   10320:	fbb3 fcfe 	udiv	ip, r3, lr
   10324:	fb0e 301c 	mls	r0, lr, ip, r3
   10328:	462b      	mov	r3, r5
   1032a:	fb08 f90c 	mul.w	r9, r8, ip
   1032e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   10332:	45a9      	cmp	r9, r5
   10334:	d90a      	bls.n	1034c <__udivmoddi4+0xe0>
   10336:	197d      	adds	r5, r7, r5
   10338:	bf2c      	ite	cs
   1033a:	2301      	movcs	r3, #1
   1033c:	2300      	movcc	r3, #0
   1033e:	45a9      	cmp	r9, r5
   10340:	d902      	bls.n	10348 <__udivmoddi4+0xdc>
   10342:	2b00      	cmp	r3, #0
   10344:	f000 80d9 	beq.w	104fa <__udivmoddi4+0x28e>
   10348:	f10c 3cff 	add.w	ip, ip, #4294967295
   1034c:	eba5 0509 	sub.w	r5, r5, r9
   10350:	b2a3      	uxth	r3, r4
   10352:	fbb5 f0fe 	udiv	r0, r5, lr
   10356:	fb0e 5510 	mls	r5, lr, r0, r5
   1035a:	fb08 f800 	mul.w	r8, r8, r0
   1035e:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
   10362:	45a0      	cmp	r8, r4
   10364:	d905      	bls.n	10372 <__udivmoddi4+0x106>
   10366:	193c      	adds	r4, r7, r4
   10368:	d202      	bcs.n	10370 <__udivmoddi4+0x104>
   1036a:	45a0      	cmp	r8, r4
   1036c:	f200 80c9 	bhi.w	10502 <__udivmoddi4+0x296>
   10370:	3801      	subs	r0, #1
   10372:	eba4 0408 	sub.w	r4, r4, r8
   10376:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1037a:	e7bd      	b.n	102f8 <__udivmoddi4+0x8c>
   1037c:	428b      	cmp	r3, r1
   1037e:	d908      	bls.n	10392 <__udivmoddi4+0x126>
   10380:	2e00      	cmp	r6, #0
   10382:	f000 80b1 	beq.w	104e8 <__udivmoddi4+0x27c>
   10386:	2100      	movs	r1, #0
   10388:	e9c6 0500 	strd	r0, r5, [r6]
   1038c:	4608      	mov	r0, r1
   1038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10392:	fab3 f183 	clz	r1, r3
   10396:	2900      	cmp	r1, #0
   10398:	d146      	bne.n	10428 <__udivmoddi4+0x1bc>
   1039a:	42ab      	cmp	r3, r5
   1039c:	f0c0 80a7 	bcc.w	104ee <__udivmoddi4+0x282>
   103a0:	4282      	cmp	r2, r0
   103a2:	f240 80a4 	bls.w	104ee <__udivmoddi4+0x282>
   103a6:	4608      	mov	r0, r1
   103a8:	2e00      	cmp	r6, #0
   103aa:	d0aa      	beq.n	10302 <__udivmoddi4+0x96>
   103ac:	e9c6 4a00 	strd	r4, sl, [r6]
   103b0:	e7a7      	b.n	10302 <__udivmoddi4+0x96>
   103b2:	f1c2 0020 	rsb	r0, r2, #32
   103b6:	4097      	lsls	r7, r2
   103b8:	fa01 f302 	lsl.w	r3, r1, r2
   103bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   103c0:	40c1      	lsrs	r1, r0
   103c2:	fa24 f500 	lsr.w	r5, r4, r0
   103c6:	fa1f f887 	uxth.w	r8, r7
   103ca:	4094      	lsls	r4, r2
   103cc:	431d      	orrs	r5, r3
   103ce:	fbb1 f0fe 	udiv	r0, r1, lr
   103d2:	0c2b      	lsrs	r3, r5, #16
   103d4:	fb0e 1110 	mls	r1, lr, r0, r1
   103d8:	fb00 fc08 	mul.w	ip, r0, r8
   103dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   103e0:	459c      	cmp	ip, r3
   103e2:	d909      	bls.n	103f8 <__udivmoddi4+0x18c>
   103e4:	18fb      	adds	r3, r7, r3
   103e6:	bf2c      	ite	cs
   103e8:	2101      	movcs	r1, #1
   103ea:	2100      	movcc	r1, #0
   103ec:	459c      	cmp	ip, r3
   103ee:	d902      	bls.n	103f6 <__udivmoddi4+0x18a>
   103f0:	2900      	cmp	r1, #0
   103f2:	f000 8095 	beq.w	10520 <__udivmoddi4+0x2b4>
   103f6:	3801      	subs	r0, #1
   103f8:	eba3 030c 	sub.w	r3, r3, ip
   103fc:	b2ad      	uxth	r5, r5
   103fe:	fbb3 f1fe 	udiv	r1, r3, lr
   10402:	fb0e 3311 	mls	r3, lr, r1, r3
   10406:	fb01 fc08 	mul.w	ip, r1, r8
   1040a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   1040e:	45ac      	cmp	ip, r5
   10410:	d905      	bls.n	1041e <__udivmoddi4+0x1b2>
   10412:	197d      	adds	r5, r7, r5
   10414:	d202      	bcs.n	1041c <__udivmoddi4+0x1b0>
   10416:	45ac      	cmp	ip, r5
   10418:	f200 8089 	bhi.w	1052e <__udivmoddi4+0x2c2>
   1041c:	3901      	subs	r1, #1
   1041e:	eba5 030c 	sub.w	r3, r5, ip
   10422:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   10426:	e77a      	b.n	1031e <__udivmoddi4+0xb2>
   10428:	f1c1 0420 	rsb	r4, r1, #32
   1042c:	408b      	lsls	r3, r1
   1042e:	fa02 f701 	lsl.w	r7, r2, r1
   10432:	fa05 fc01 	lsl.w	ip, r5, r1
   10436:	40e2      	lsrs	r2, r4
   10438:	fa20 f804 	lsr.w	r8, r0, r4
   1043c:	40e5      	lsrs	r5, r4
   1043e:	fa00 fe01 	lsl.w	lr, r0, r1
   10442:	4313      	orrs	r3, r2
   10444:	ea48 020c 	orr.w	r2, r8, ip
   10448:	ea4f 4813 	mov.w	r8, r3, lsr #16
   1044c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   10450:	fa1f f983 	uxth.w	r9, r3
   10454:	fbb5 faf8 	udiv	sl, r5, r8
   10458:	fb08 551a 	mls	r5, r8, sl, r5
   1045c:	fb0a f009 	mul.w	r0, sl, r9
   10460:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
   10464:	4560      	cmp	r0, ip
   10466:	d90a      	bls.n	1047e <__udivmoddi4+0x212>
   10468:	eb13 0c0c 	adds.w	ip, r3, ip
   1046c:	bf2c      	ite	cs
   1046e:	2501      	movcs	r5, #1
   10470:	2500      	movcc	r5, #0
   10472:	4560      	cmp	r0, ip
   10474:	d901      	bls.n	1047a <__udivmoddi4+0x20e>
   10476:	2d00      	cmp	r5, #0
   10478:	d055      	beq.n	10526 <__udivmoddi4+0x2ba>
   1047a:	f10a 3aff 	add.w	sl, sl, #4294967295
   1047e:	ebac 0c00 	sub.w	ip, ip, r0
   10482:	b292      	uxth	r2, r2
   10484:	fbbc f0f8 	udiv	r0, ip, r8
   10488:	fb08 cc10 	mls	ip, r8, r0, ip
   1048c:	fb00 f909 	mul.w	r9, r0, r9
   10490:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
   10494:	45e1      	cmp	r9, ip
   10496:	d905      	bls.n	104a4 <__udivmoddi4+0x238>
   10498:	eb13 0c0c 	adds.w	ip, r3, ip
   1049c:	d201      	bcs.n	104a2 <__udivmoddi4+0x236>
   1049e:	45e1      	cmp	r9, ip
   104a0:	d83b      	bhi.n	1051a <__udivmoddi4+0x2ae>
   104a2:	3801      	subs	r0, #1
   104a4:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   104a8:	ebac 0c09 	sub.w	ip, ip, r9
   104ac:	fba0 8907 	umull	r8, r9, r0, r7
   104b0:	45cc      	cmp	ip, r9
   104b2:	4645      	mov	r5, r8
   104b4:	464a      	mov	r2, r9
   104b6:	d302      	bcc.n	104be <__udivmoddi4+0x252>
   104b8:	d106      	bne.n	104c8 <__udivmoddi4+0x25c>
   104ba:	45c6      	cmp	lr, r8
   104bc:	d204      	bcs.n	104c8 <__udivmoddi4+0x25c>
   104be:	3801      	subs	r0, #1
   104c0:	ebb8 0507 	subs.w	r5, r8, r7
   104c4:	eb69 0203 	sbc.w	r2, r9, r3
   104c8:	b32e      	cbz	r6, 10516 <__udivmoddi4+0x2aa>
   104ca:	ebbe 0305 	subs.w	r3, lr, r5
   104ce:	eb6c 0c02 	sbc.w	ip, ip, r2
   104d2:	fa23 f201 	lsr.w	r2, r3, r1
   104d6:	fa0c f404 	lsl.w	r4, ip, r4
   104da:	fa2c f301 	lsr.w	r3, ip, r1
   104de:	2100      	movs	r1, #0
   104e0:	4314      	orrs	r4, r2
   104e2:	e9c6 4300 	strd	r4, r3, [r6]
   104e6:	e70c      	b.n	10302 <__udivmoddi4+0x96>
   104e8:	4631      	mov	r1, r6
   104ea:	4630      	mov	r0, r6
   104ec:	e709      	b.n	10302 <__udivmoddi4+0x96>
   104ee:	1a84      	subs	r4, r0, r2
   104f0:	eb65 0303 	sbc.w	r3, r5, r3
   104f4:	2001      	movs	r0, #1
   104f6:	469a      	mov	sl, r3
   104f8:	e756      	b.n	103a8 <__udivmoddi4+0x13c>
   104fa:	f1ac 0c02 	sub.w	ip, ip, #2
   104fe:	443d      	add	r5, r7
   10500:	e724      	b.n	1034c <__udivmoddi4+0xe0>
   10502:	3802      	subs	r0, #2
   10504:	443c      	add	r4, r7
   10506:	e734      	b.n	10372 <__udivmoddi4+0x106>
   10508:	3802      	subs	r0, #2
   1050a:	443c      	add	r4, r7
   1050c:	e6ef      	b.n	102ee <__udivmoddi4+0x82>
   1050e:	f1ae 0e02 	sub.w	lr, lr, #2
   10512:	443b      	add	r3, r7
   10514:	e6d9      	b.n	102ca <__udivmoddi4+0x5e>
   10516:	4631      	mov	r1, r6
   10518:	e6f3      	b.n	10302 <__udivmoddi4+0x96>
   1051a:	3802      	subs	r0, #2
   1051c:	449c      	add	ip, r3
   1051e:	e7c1      	b.n	104a4 <__udivmoddi4+0x238>
   10520:	3802      	subs	r0, #2
   10522:	443b      	add	r3, r7
   10524:	e768      	b.n	103f8 <__udivmoddi4+0x18c>
   10526:	f1aa 0a02 	sub.w	sl, sl, #2
   1052a:	449c      	add	ip, r3
   1052c:	e7a7      	b.n	1047e <__udivmoddi4+0x212>
   1052e:	3902      	subs	r1, #2
   10530:	443d      	add	r5, r7
   10532:	e774      	b.n	1041e <__udivmoddi4+0x1b2>

00010534 <__aeabi_idiv0>:
   10534:	4770      	bx	lr
   10536:	bf00      	nop

00010538 <log_const_source_id>:
 *
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
   10538:	b480      	push	{r7}
   1053a:	b083      	sub	sp, #12
   1053c:	af00      	add	r7, sp, #0
   1053e:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   10540:	687b      	ldr	r3, [r7, #4]
   10542:	4a04      	ldr	r2, [pc, #16]	; (10554 <log_const_source_id+0x1c>)
   10544:	1a9b      	subs	r3, r3, r2
   10546:	08db      	lsrs	r3, r3, #3
			sizeof(struct log_source_const_data);
}
   10548:	4618      	mov	r0, r3
   1054a:	370c      	adds	r7, #12
   1054c:	46bd      	mov	sp, r7
   1054e:	bc80      	pop	{r7}
   10550:	4770      	bx	lr
   10552:	bf00      	nop
   10554:	00029354 	.word	0x00029354

00010558 <uart_callback>:
}

static void uart_callback(const struct device *dev,
			  struct uart_event *evt,
			  void *user_data)
{
   10558:	b580      	push	{r7, lr}
   1055a:	b08e      	sub	sp, #56	; 0x38
   1055c:	af00      	add	r7, sp, #0
   1055e:	60f8      	str	r0, [r7, #12]
   10560:	60b9      	str	r1, [r7, #8]
   10562:	607a      	str	r2, [r7, #4]
	struct device *uart = user_data;
   10564:	687b      	ldr	r3, [r7, #4]
   10566:	637b      	str	r3, [r7, #52]	; 0x34
	int err;

	switch (evt->type) {
   10568:	68bb      	ldr	r3, [r7, #8]
   1056a:	781b      	ldrb	r3, [r3, #0]
   1056c:	2b06      	cmp	r3, #6
   1056e:	f200 80cc 	bhi.w	1070a <uart_callback+0x1b2>
   10572:	a201      	add	r2, pc, #4	; (adr r2, 10578 <uart_callback+0x20>)
   10574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10578:	00010709 	.word	0x00010709
   1057c:	00010595 	.word	0x00010595
   10580:	0001060d 	.word	0x0001060d
   10584:	00010695 	.word	0x00010695
   10588:	000106fb 	.word	0x000106fb
   1058c:	00010709 	.word	0x00010709
   10590:	00010709 	.word	0x00010709

		// LOG_INF("Tx sent %d bytes", evt->data.tx.len);
		break;

	case UART_TX_ABORTED:
		LOG_ERR("Tx aborted");
   10594:	2303      	movs	r3, #3
   10596:	2b00      	cmp	r3, #0
   10598:	d101      	bne.n	1059e <uart_callback+0x46>
   1059a:	bf00      	nop
		break;
   1059c:	e0b5      	b.n	1070a <uart_callback+0x1b2>
		LOG_ERR("Tx aborted");
   1059e:	f010 fb41 	bl	20c24 <k_is_user_context>
   105a2:	4603      	mov	r3, r0
   105a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   105a8:	2300      	movs	r3, #0
   105aa:	627b      	str	r3, [r7, #36]	; 0x24
   105ac:	2303      	movs	r3, #3
   105ae:	2b00      	cmp	r3, #0
   105b0:	d007      	beq.n	105c2 <uart_callback+0x6a>
   105b2:	4b58      	ldr	r3, [pc, #352]	; (10714 <uart_callback+0x1bc>)
   105b4:	681b      	ldr	r3, [r3, #0]
   105b6:	4618      	mov	r0, r3
   105b8:	f7ff ffbe 	bl	10538 <log_const_source_id>
   105bc:	4603      	mov	r3, r0
   105be:	b29b      	uxth	r3, r3
   105c0:	e000      	b.n	105c4 <uart_callback+0x6c>
   105c2:	2300      	movs	r3, #0
   105c4:	853b      	strh	r3, [r7, #40]	; 0x28
   105c6:	f897 3020 	ldrb.w	r3, [r7, #32]
   105ca:	2201      	movs	r2, #1
   105cc:	f362 0302 	bfi	r3, r2, #0, #3
   105d0:	f887 3020 	strb.w	r3, [r7, #32]
   105d4:	f897 3020 	ldrb.w	r3, [r7, #32]
   105d8:	f36f 03c5 	bfc	r3, #3, #3
   105dc:	f887 3020 	strb.w	r3, [r7, #32]
   105e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   105e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
   105e6:	b29a      	uxth	r2, r3
   105e8:	8c3b      	ldrh	r3, [r7, #32]
   105ea:	f362 138f 	bfi	r3, r2, #6, #10
   105ee:	843b      	strh	r3, [r7, #32]
   105f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   105f4:	2b00      	cmp	r3, #0
   105f6:	d004      	beq.n	10602 <uart_callback+0xaa>
   105f8:	4947      	ldr	r1, [pc, #284]	; (10718 <uart_callback+0x1c0>)
   105fa:	8c38      	ldrh	r0, [r7, #32]
   105fc:	f002 fda8 	bl	13150 <log_from_user>
		break;
   10600:	e083      	b.n	1070a <uart_callback+0x1b2>
		LOG_ERR("Tx aborted");
   10602:	8c39      	ldrh	r1, [r7, #32]
   10604:	4844      	ldr	r0, [pc, #272]	; (10718 <uart_callback+0x1c0>)
   10606:	f012 fa7d 	bl	22b04 <log_0>
		break;
   1060a:	e07e      	b.n	1070a <uart_callback+0x1b2>

	case UART_RX_RDY:
			printk("%s\n", evt->data.rx);
   1060c:	68bb      	ldr	r3, [r7, #8]
   1060e:	3304      	adds	r3, #4
   10610:	cb0e      	ldmia	r3, {r1, r2, r3}
   10612:	4842      	ldr	r0, [pc, #264]	; (1071c <uart_callback+0x1c4>)
   10614:	f010 fd28 	bl	21068 <printk>

		LOG_INF("Received data %d bytes", evt->data.rx.len);
   10618:	2303      	movs	r3, #3
   1061a:	2b02      	cmp	r3, #2
   1061c:	d801      	bhi.n	10622 <uart_callback+0xca>
   1061e:	bf00      	nop
		break;
   10620:	e073      	b.n	1070a <uart_callback+0x1b2>
		LOG_INF("Received data %d bytes", evt->data.rx.len);
   10622:	f010 faff 	bl	20c24 <k_is_user_context>
   10626:	4603      	mov	r3, r0
   10628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   1062c:	2300      	movs	r3, #0
   1062e:	61fb      	str	r3, [r7, #28]
   10630:	2303      	movs	r3, #3
   10632:	2b00      	cmp	r3, #0
   10634:	d007      	beq.n	10646 <uart_callback+0xee>
   10636:	4b37      	ldr	r3, [pc, #220]	; (10714 <uart_callback+0x1bc>)
   10638:	681b      	ldr	r3, [r3, #0]
   1063a:	4618      	mov	r0, r3
   1063c:	f7ff ff7c 	bl	10538 <log_const_source_id>
   10640:	4603      	mov	r3, r0
   10642:	b29b      	uxth	r3, r3
   10644:	e000      	b.n	10648 <uart_callback+0xf0>
   10646:	2300      	movs	r3, #0
   10648:	85bb      	strh	r3, [r7, #44]	; 0x2c
   1064a:	7e3b      	ldrb	r3, [r7, #24]
   1064c:	2203      	movs	r2, #3
   1064e:	f362 0302 	bfi	r3, r2, #0, #3
   10652:	763b      	strb	r3, [r7, #24]
   10654:	7e3b      	ldrb	r3, [r7, #24]
   10656:	f36f 03c5 	bfc	r3, #3, #3
   1065a:	763b      	strb	r3, [r7, #24]
   1065c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   1065e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10662:	b29a      	uxth	r2, r3
   10664:	8b3b      	ldrh	r3, [r7, #24]
   10666:	f362 138f 	bfi	r3, r2, #6, #10
   1066a:	833b      	strh	r3, [r7, #24]
   1066c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   10670:	2b00      	cmp	r3, #0
   10672:	d007      	beq.n	10684 <uart_callback+0x12c>
   10674:	68bb      	ldr	r3, [r7, #8]
   10676:	68db      	ldr	r3, [r3, #12]
   10678:	461a      	mov	r2, r3
   1067a:	4929      	ldr	r1, [pc, #164]	; (10720 <uart_callback+0x1c8>)
   1067c:	8b38      	ldrh	r0, [r7, #24]
   1067e:	f002 fd67 	bl	13150 <log_from_user>
		break;
   10682:	e042      	b.n	1070a <uart_callback+0x1b2>
		LOG_INF("Received data %d bytes", evt->data.rx.len);
   10684:	68bb      	ldr	r3, [r7, #8]
   10686:	68db      	ldr	r3, [r3, #12]
   10688:	8b3a      	ldrh	r2, [r7, #24]
   1068a:	4619      	mov	r1, r3
   1068c:	4824      	ldr	r0, [pc, #144]	; (10720 <uart_callback+0x1c8>)
   1068e:	f012 fa4e 	bl	22b2e <log_1>
		break;
   10692:	e03a      	b.n	1070a <uart_callback+0x1b2>

	case UART_RX_BUF_REQUEST:
	{
		uint8_t *buf;

		err = k_mem_slab_alloc(&uart_slab, (void **)&buf, K_NO_WAIT);
   10694:	f04f 0200 	mov.w	r2, #0
   10698:	f04f 0300 	mov.w	r3, #0
   1069c:	f107 0114 	add.w	r1, r7, #20
   106a0:	4820      	ldr	r0, [pc, #128]	; (10724 <uart_callback+0x1cc>)
   106a2:	f00c f975 	bl	1c990 <k_mem_slab_alloc>
   106a6:	6338      	str	r0, [r7, #48]	; 0x30
		__ASSERT(err == 0, "Failed to allocate slab");
   106a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   106aa:	2b00      	cmp	r3, #0
   106ac:	d00c      	beq.n	106c8 <uart_callback+0x170>
   106ae:	234f      	movs	r3, #79	; 0x4f
   106b0:	4a1d      	ldr	r2, [pc, #116]	; (10728 <uart_callback+0x1d0>)
   106b2:	491e      	ldr	r1, [pc, #120]	; (1072c <uart_callback+0x1d4>)
   106b4:	481e      	ldr	r0, [pc, #120]	; (10730 <uart_callback+0x1d8>)
   106b6:	f010 fcd7 	bl	21068 <printk>
   106ba:	481e      	ldr	r0, [pc, #120]	; (10734 <uart_callback+0x1dc>)
   106bc:	f010 fcd4 	bl	21068 <printk>
   106c0:	214f      	movs	r1, #79	; 0x4f
   106c2:	4819      	ldr	r0, [pc, #100]	; (10728 <uart_callback+0x1d0>)
   106c4:	f011 fd7d 	bl	221c2 <assert_post_action>

		err = uart_rx_buf_rsp(uart, buf, BUF_SIZE);
   106c8:	697b      	ldr	r3, [r7, #20]
   106ca:	2220      	movs	r2, #32
   106cc:	4619      	mov	r1, r3
   106ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
   106d0:	f010 fc30 	bl	20f34 <uart_rx_buf_rsp>
   106d4:	6338      	str	r0, [r7, #48]	; 0x30
		__ASSERT(err == 0, "Failed to provide new buffer");
   106d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   106d8:	2b00      	cmp	r3, #0
   106da:	d00c      	beq.n	106f6 <uart_callback+0x19e>
   106dc:	2352      	movs	r3, #82	; 0x52
   106de:	4a12      	ldr	r2, [pc, #72]	; (10728 <uart_callback+0x1d0>)
   106e0:	4912      	ldr	r1, [pc, #72]	; (1072c <uart_callback+0x1d4>)
   106e2:	4813      	ldr	r0, [pc, #76]	; (10730 <uart_callback+0x1d8>)
   106e4:	f010 fcc0 	bl	21068 <printk>
   106e8:	4813      	ldr	r0, [pc, #76]	; (10738 <uart_callback+0x1e0>)
   106ea:	f010 fcbd 	bl	21068 <printk>
   106ee:	2152      	movs	r1, #82	; 0x52
   106f0:	480d      	ldr	r0, [pc, #52]	; (10728 <uart_callback+0x1d0>)
   106f2:	f011 fd66 	bl	221c2 <assert_post_action>
		break;
   106f6:	bf00      	nop
		break;

	case UART_RX_STOPPED:
		break;
	}
}
   106f8:	e007      	b.n	1070a <uart_callback+0x1b2>
		k_mem_slab_free(&uart_slab, (void **)&evt->data.rx_buf.buf);
   106fa:	68bb      	ldr	r3, [r7, #8]
   106fc:	3304      	adds	r3, #4
   106fe:	4619      	mov	r1, r3
   10700:	4808      	ldr	r0, [pc, #32]	; (10724 <uart_callback+0x1cc>)
   10702:	f00c f9ed 	bl	1cae0 <k_mem_slab_free>
		break;
   10706:	e000      	b.n	1070a <uart_callback+0x1b2>
		break;
   10708:	bf00      	nop
}
   1070a:	bf00      	nop
   1070c:	3738      	adds	r7, #56	; 0x38
   1070e:	46bd      	mov	sp, r7
   10710:	bd80      	pop	{r7, pc}
   10712:	bf00      	nop
   10714:	20014500 	.word	0x20014500
   10718:	000293fc 	.word	0x000293fc
   1071c:	00029408 	.word	0x00029408
   10720:	0002940c 	.word	0x0002940c
   10724:	20014584 	.word	0x20014584
   10728:	00029424 	.word	0x00029424
   1072c:	00029434 	.word	0x00029434
   10730:	00029440 	.word	0x00029440
   10734:	00029460 	.word	0x00029460
   10738:	0002947c 	.word	0x0002947c

0001073c <async>:

static void async(const struct device *lpuart)
{
   1073c:	b580      	push	{r7, lr}
   1073e:	b086      	sub	sp, #24
   10740:	af00      	add	r7, sp, #0
   10742:	6078      	str	r0, [r7, #4]
	uint8_t txbuf[5] = {1, 2, 3, 4, 5};
   10744:	4a42      	ldr	r2, [pc, #264]	; (10850 <async+0x114>)
   10746:	f107 030c 	add.w	r3, r7, #12
   1074a:	e892 0003 	ldmia.w	r2, {r0, r1}
   1074e:	6018      	str	r0, [r3, #0]
   10750:	3304      	adds	r3, #4
   10752:	7019      	strb	r1, [r3, #0]
	int err;
	uint8_t *buf;

	err = k_mem_slab_alloc(&uart_slab, (void **)&buf, K_NO_WAIT);
   10754:	f04f 0200 	mov.w	r2, #0
   10758:	f04f 0300 	mov.w	r3, #0
   1075c:	f107 0108 	add.w	r1, r7, #8
   10760:	483c      	ldr	r0, [pc, #240]	; (10854 <async+0x118>)
   10762:	f00c f915 	bl	1c990 <k_mem_slab_alloc>
   10766:	6178      	str	r0, [r7, #20]
	__ASSERT(err == 0, "Failed to alloc slab");
   10768:	697b      	ldr	r3, [r7, #20]
   1076a:	2b00      	cmp	r3, #0
   1076c:	d00c      	beq.n	10788 <async+0x4c>
   1076e:	2369      	movs	r3, #105	; 0x69
   10770:	4a39      	ldr	r2, [pc, #228]	; (10858 <async+0x11c>)
   10772:	493a      	ldr	r1, [pc, #232]	; (1085c <async+0x120>)
   10774:	483a      	ldr	r0, [pc, #232]	; (10860 <async+0x124>)
   10776:	f010 fc77 	bl	21068 <printk>
   1077a:	483a      	ldr	r0, [pc, #232]	; (10864 <async+0x128>)
   1077c:	f010 fc74 	bl	21068 <printk>
   10780:	2169      	movs	r1, #105	; 0x69
   10782:	4835      	ldr	r0, [pc, #212]	; (10858 <async+0x11c>)
   10784:	f011 fd1d 	bl	221c2 <assert_post_action>

	err = uart_callback_set(lpuart, uart_callback, (void *)lpuart);
   10788:	687a      	ldr	r2, [r7, #4]
   1078a:	4937      	ldr	r1, [pc, #220]	; (10868 <async+0x12c>)
   1078c:	6878      	ldr	r0, [r7, #4]
   1078e:	f010 fba8 	bl	20ee2 <uart_callback_set>
   10792:	6178      	str	r0, [r7, #20]
	__ASSERT(err == 0, "Failed to set callback");
   10794:	697b      	ldr	r3, [r7, #20]
   10796:	2b00      	cmp	r3, #0
   10798:	d00c      	beq.n	107b4 <async+0x78>
   1079a:	236c      	movs	r3, #108	; 0x6c
   1079c:	4a2e      	ldr	r2, [pc, #184]	; (10858 <async+0x11c>)
   1079e:	492f      	ldr	r1, [pc, #188]	; (1085c <async+0x120>)
   107a0:	482f      	ldr	r0, [pc, #188]	; (10860 <async+0x124>)
   107a2:	f010 fc61 	bl	21068 <printk>
   107a6:	4831      	ldr	r0, [pc, #196]	; (1086c <async+0x130>)
   107a8:	f010 fc5e 	bl	21068 <printk>
   107ac:	216c      	movs	r1, #108	; 0x6c
   107ae:	482a      	ldr	r0, [pc, #168]	; (10858 <async+0x11c>)
   107b0:	f011 fd07 	bl	221c2 <assert_post_action>

	err = uart_rx_enable(lpuart, buf, BUF_SIZE, 10);
   107b4:	68b9      	ldr	r1, [r7, #8]
   107b6:	230a      	movs	r3, #10
   107b8:	2220      	movs	r2, #32
   107ba:	6878      	ldr	r0, [r7, #4]
   107bc:	f010 fbec 	bl	20f98 <uart_rx_enable>
   107c0:	6178      	str	r0, [r7, #20]
	__ASSERT(err == 0, "Failed to enable RX");
   107c2:	697b      	ldr	r3, [r7, #20]
   107c4:	2b00      	cmp	r3, #0
   107c6:	d00c      	beq.n	107e2 <async+0xa6>
   107c8:	236f      	movs	r3, #111	; 0x6f
   107ca:	4a23      	ldr	r2, [pc, #140]	; (10858 <async+0x11c>)
   107cc:	4923      	ldr	r1, [pc, #140]	; (1085c <async+0x120>)
   107ce:	4824      	ldr	r0, [pc, #144]	; (10860 <async+0x124>)
   107d0:	f010 fc4a 	bl	21068 <printk>
   107d4:	4826      	ldr	r0, [pc, #152]	; (10870 <async+0x134>)
   107d6:	f010 fc47 	bl	21068 <printk>
   107da:	216f      	movs	r1, #111	; 0x6f
   107dc:	481e      	ldr	r0, [pc, #120]	; (10858 <async+0x11c>)
   107de:	f011 fcf0 	bl	221c2 <assert_post_action>

	while (1) {
		err = uart_tx(lpuart, txbuf, sizeof(txbuf), 10);
   107e2:	f107 010c 	add.w	r1, r7, #12
   107e6:	230a      	movs	r3, #10
   107e8:	2205      	movs	r2, #5
   107ea:	6878      	ldr	r0, [r7, #4]
   107ec:	f010 fbc2 	bl	20f74 <uart_tx>
   107f0:	6178      	str	r0, [r7, #20]
		__ASSERT(err == 0, "Failed to initiate transmission");
   107f2:	697b      	ldr	r3, [r7, #20]
   107f4:	2b00      	cmp	r3, #0
   107f6:	d00c      	beq.n	10812 <async+0xd6>
   107f8:	2373      	movs	r3, #115	; 0x73
   107fa:	4a17      	ldr	r2, [pc, #92]	; (10858 <async+0x11c>)
   107fc:	4917      	ldr	r1, [pc, #92]	; (1085c <async+0x120>)
   107fe:	4818      	ldr	r0, [pc, #96]	; (10860 <async+0x124>)
   10800:	f010 fc32 	bl	21068 <printk>
   10804:	481b      	ldr	r0, [pc, #108]	; (10874 <async+0x138>)
   10806:	f010 fc2f 	bl	21068 <printk>
   1080a:	2173      	movs	r1, #115	; 0x73
   1080c:	4812      	ldr	r0, [pc, #72]	; (10858 <async+0x11c>)
   1080e:	f011 fcd8 	bl	221c2 <assert_post_action>

		k_sleep(K_MSEC(500));
   10812:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   10816:	f04f 0100 	mov.w	r1, #0
   1081a:	f010 fa0a 	bl	20c32 <k_ms_to_ticks_ceil64>
   1081e:	4602      	mov	r2, r0
   10820:	460b      	mov	r3, r1
   10822:	4610      	mov	r0, r2
   10824:	4619      	mov	r1, r3
   10826:	f010 fb42 	bl	20eae <k_sleep>

		uart_poll_out(lpuart, txbuf[0]);
   1082a:	7b3b      	ldrb	r3, [r7, #12]
   1082c:	4619      	mov	r1, r3
   1082e:	6878      	ldr	r0, [r7, #4]
   10830:	f010 fbc4 	bl	20fbc <uart_poll_out>
		k_sleep(K_MSEC(100));
   10834:	f04f 0064 	mov.w	r0, #100	; 0x64
   10838:	f04f 0100 	mov.w	r1, #0
   1083c:	f010 f9f9 	bl	20c32 <k_ms_to_ticks_ceil64>
   10840:	4602      	mov	r2, r0
   10842:	460b      	mov	r3, r1
   10844:	4610      	mov	r0, r2
   10846:	4619      	mov	r1, r3
   10848:	f010 fb31 	bl	20eae <k_sleep>
	while (1) {
   1084c:	e7c9      	b.n	107e2 <async+0xa6>
   1084e:	bf00      	nop
   10850:	000293f4 	.word	0x000293f4
   10854:	20014584 	.word	0x20014584
   10858:	00029424 	.word	0x00029424
   1085c:	00029434 	.word	0x00029434
   10860:	00029440 	.word	0x00029440
   10864:	0002949c 	.word	0x0002949c
   10868:	00010559 	.word	0x00010559
   1086c:	000294b4 	.word	0x000294b4
   10870:	000294d0 	.word	0x000294d0
   10874:	000294e8 	.word	0x000294e8

00010878 <main>:
	}
}

void main(void)
{
   10878:	b580      	push	{r7, lr}
   1087a:	b082      	sub	sp, #8
   1087c:	af00      	add	r7, sp, #0
	const struct device *lpuart;

	k_msleep(1000);
   1087e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   10882:	f010 fafa 	bl	20e7a <k_msleep>

	lpuart = device_get_binding("UART_1");
   10886:	480d      	ldr	r0, [pc, #52]	; (108bc <main+0x44>)
   10888:	f010 fb1f 	bl	20eca <device_get_binding>
   1088c:	6078      	str	r0, [r7, #4]
	__ASSERT(lpuart, "Failed to get the device");
   1088e:	687b      	ldr	r3, [r7, #4]
   10890:	2b00      	cmp	r3, #0
   10892:	d10c      	bne.n	108ae <main+0x36>
   10894:	2383      	movs	r3, #131	; 0x83
   10896:	4a0a      	ldr	r2, [pc, #40]	; (108c0 <main+0x48>)
   10898:	490a      	ldr	r1, [pc, #40]	; (108c4 <main+0x4c>)
   1089a:	480b      	ldr	r0, [pc, #44]	; (108c8 <main+0x50>)
   1089c:	f010 fbe4 	bl	21068 <printk>
   108a0:	480a      	ldr	r0, [pc, #40]	; (108cc <main+0x54>)
   108a2:	f010 fbe1 	bl	21068 <printk>
   108a6:	2183      	movs	r1, #131	; 0x83
   108a8:	4805      	ldr	r0, [pc, #20]	; (108c0 <main+0x48>)
   108aa:	f011 fc8a 	bl	221c2 <assert_post_action>
	if (IS_ENABLED(CONFIG_NRF_SW_LPUART_INT_DRIVEN)) {			
		interrupt_driven(lpuart);
	} else {
		async(lpuart);
   108ae:	6878      	ldr	r0, [r7, #4]
   108b0:	f7ff ff44 	bl	1073c <async>
	}
}
   108b4:	bf00      	nop
   108b6:	3708      	adds	r7, #8
   108b8:	46bd      	mov	sp, r7
   108ba:	bd80      	pop	{r7, pc}
   108bc:	0002950c 	.word	0x0002950c
   108c0:	00029424 	.word	0x00029424
   108c4:	00029514 	.word	0x00029514
   108c8:	00029440 	.word	0x00029440
   108cc:	0002951c 	.word	0x0002951c

000108d0 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   108d0:	b580      	push	{r7, lr}
   108d2:	b086      	sub	sp, #24
   108d4:	af00      	add	r7, sp, #0
   108d6:	6078      	str	r0, [r7, #4]
   108d8:	6039      	str	r1, [r7, #0]
	struct k_poll_signal *sig = NULL;
   108da:	2300      	movs	r3, #0
   108dc:	613b      	str	r3, [r7, #16]
	sys_notify_generic_callback rv = NULL;
   108de:	2300      	movs	r3, #0
   108e0:	617b      	str	r3, [r7, #20]
	uint32_t method = sys_notify_get_method(notify);
   108e2:	6878      	ldr	r0, [r7, #4]
   108e4:	f010 fb79 	bl	20fda <sys_notify_get_method>
   108e8:	60f8      	str	r0, [r7, #12]

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   108ea:	687b      	ldr	r3, [r7, #4]
   108ec:	683a      	ldr	r2, [r7, #0]
   108ee:	609a      	str	r2, [r3, #8]
	switch (method) {
   108f0:	68fb      	ldr	r3, [r7, #12]
   108f2:	2b03      	cmp	r3, #3
   108f4:	d009      	beq.n	1090a <sys_notify_finalize+0x3a>
   108f6:	68fb      	ldr	r3, [r7, #12]
   108f8:	2b03      	cmp	r3, #3
   108fa:	d80e      	bhi.n	1091a <sys_notify_finalize+0x4a>
   108fc:	68fb      	ldr	r3, [r7, #12]
   108fe:	2b01      	cmp	r3, #1
   10900:	d016      	beq.n	10930 <sys_notify_finalize+0x60>
   10902:	68fb      	ldr	r3, [r7, #12]
   10904:	2b02      	cmp	r3, #2
   10906:	d004      	beq.n	10912 <sys_notify_finalize+0x42>
   10908:	e007      	b.n	1091a <sys_notify_finalize+0x4a>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1090a:	687b      	ldr	r3, [r7, #4]
   1090c:	681b      	ldr	r3, [r3, #0]
   1090e:	617b      	str	r3, [r7, #20]
		break;
   10910:	e00f      	b.n	10932 <sys_notify_finalize+0x62>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   10912:	687b      	ldr	r3, [r7, #4]
   10914:	681b      	ldr	r3, [r3, #0]
   10916:	613b      	str	r3, [r7, #16]
		break;
   10918:	e00b      	b.n	10932 <sys_notify_finalize+0x62>
	default:
		__ASSERT_NO_MSG(false);
   1091a:	2345      	movs	r3, #69	; 0x45
   1091c:	4a09      	ldr	r2, [pc, #36]	; (10944 <sys_notify_finalize+0x74>)
   1091e:	490a      	ldr	r1, [pc, #40]	; (10948 <sys_notify_finalize+0x78>)
   10920:	480a      	ldr	r0, [pc, #40]	; (1094c <sys_notify_finalize+0x7c>)
   10922:	f010 fba1 	bl	21068 <printk>
   10926:	2145      	movs	r1, #69	; 0x45
   10928:	4806      	ldr	r0, [pc, #24]	; (10944 <sys_notify_finalize+0x74>)
   1092a:	f011 fc4a 	bl	221c2 <assert_post_action>
   1092e:	e000      	b.n	10932 <sys_notify_finalize+0x62>
		break;
   10930:	bf00      	nop
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   10932:	687b      	ldr	r3, [r7, #4]
   10934:	2200      	movs	r2, #0
   10936:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
   10938:	697b      	ldr	r3, [r7, #20]
}
   1093a:	4618      	mov	r0, r3
   1093c:	3718      	adds	r7, #24
   1093e:	46bd      	mov	sp, r7
   10940:	bd80      	pop	{r7, pc}
   10942:	bf00      	nop
   10944:	00029538 	.word	0x00029538
   10948:	0002955c 	.word	0x0002955c
   1094c:	00029560 	.word	0x00029560

00010950 <__printk_hook_install>:
 * @param fn putc routine to install
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
   10950:	b480      	push	{r7}
   10952:	b083      	sub	sp, #12
   10954:	af00      	add	r7, sp, #0
   10956:	6078      	str	r0, [r7, #4]
	_char_out = fn;
   10958:	4a03      	ldr	r2, [pc, #12]	; (10968 <__printk_hook_install+0x18>)
   1095a:	687b      	ldr	r3, [r7, #4]
   1095c:	6013      	str	r3, [r2, #0]
}
   1095e:	bf00      	nop
   10960:	370c      	adds	r7, #12
   10962:	46bd      	mov	sp, r7
   10964:	bc80      	pop	{r7}
   10966:	4770      	bx	lr
   10968:	20014504 	.word	0x20014504

0001096c <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
   1096c:	b580      	push	{r7, lr}
   1096e:	b084      	sub	sp, #16
   10970:	af00      	add	r7, sp, #0
   10972:	6078      	str	r0, [r7, #4]
   10974:	6039      	str	r1, [r7, #0]
	struct out_context *ctx = ctx_p;
   10976:	683b      	ldr	r3, [r7, #0]
   10978:	60fb      	str	r3, [r7, #12]

	ctx->count++;
   1097a:	68fb      	ldr	r3, [r7, #12]
   1097c:	681b      	ldr	r3, [r3, #0]
   1097e:	1c5a      	adds	r2, r3, #1
   10980:	68fb      	ldr	r3, [r7, #12]
   10982:	601a      	str	r2, [r3, #0]
	return _char_out(c);
   10984:	4b04      	ldr	r3, [pc, #16]	; (10998 <char_out+0x2c>)
   10986:	681b      	ldr	r3, [r3, #0]
   10988:	6878      	ldr	r0, [r7, #4]
   1098a:	4798      	blx	r3
   1098c:	4603      	mov	r3, r0
}
   1098e:	4618      	mov	r0, r3
   10990:	3710      	adds	r7, #16
   10992:	46bd      	mov	sp, r7
   10994:	bd80      	pop	{r7, pc}
   10996:	bf00      	nop
   10998:	20014504 	.word	0x20014504

0001099c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   1099c:	b580      	push	{r7, lr}
   1099e:	b084      	sub	sp, #16
   109a0:	af00      	add	r7, sp, #0
   109a2:	6078      	str	r0, [r7, #4]
   109a4:	6039      	str	r1, [r7, #0]
	struct out_context ctx = { 0 };
   109a6:	2300      	movs	r3, #0
   109a8:	60fb      	str	r3, [r7, #12]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   109aa:	f107 010c 	add.w	r1, r7, #12
   109ae:	683b      	ldr	r3, [r7, #0]
   109b0:	687a      	ldr	r2, [r7, #4]
   109b2:	4803      	ldr	r0, [pc, #12]	; (109c0 <vprintk+0x24>)
   109b4:	f001 f8ec 	bl	11b90 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   109b8:	bf00      	nop
   109ba:	3710      	adds	r7, #16
   109bc:	46bd      	mov	sp, r7
   109be:	bd80      	pop	{r7, pc}
   109c0:	0001096d 	.word	0x0001096d

000109c4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   109c4:	b580      	push	{r7, lr}
   109c6:	b088      	sub	sp, #32
   109c8:	af00      	add	r7, sp, #0
   109ca:	60f8      	str	r0, [r7, #12]
   109cc:	60b9      	str	r1, [r7, #8]
   109ce:	607a      	str	r2, [r7, #4]
   109d0:	603b      	str	r3, [r7, #0]
	struct str_context ctx = { str, size, 0 };
   109d2:	68fb      	ldr	r3, [r7, #12]
   109d4:	617b      	str	r3, [r7, #20]
   109d6:	68bb      	ldr	r3, [r7, #8]
   109d8:	61bb      	str	r3, [r7, #24]
   109da:	2300      	movs	r3, #0
   109dc:	61fb      	str	r3, [r7, #28]

	cbvprintf(str_out, &ctx, fmt, ap);
   109de:	f107 0114 	add.w	r1, r7, #20
   109e2:	683b      	ldr	r3, [r7, #0]
   109e4:	687a      	ldr	r2, [r7, #4]
   109e6:	4809      	ldr	r0, [pc, #36]	; (10a0c <vsnprintk+0x48>)
   109e8:	f001 f8d2 	bl	11b90 <cbvprintf>

	if (ctx.count < ctx.max) {
   109ec:	69fa      	ldr	r2, [r7, #28]
   109ee:	69bb      	ldr	r3, [r7, #24]
   109f0:	429a      	cmp	r2, r3
   109f2:	da05      	bge.n	10a00 <vsnprintk+0x3c>
		str[ctx.count] = '\0';
   109f4:	69fb      	ldr	r3, [r7, #28]
   109f6:	461a      	mov	r2, r3
   109f8:	68fb      	ldr	r3, [r7, #12]
   109fa:	4413      	add	r3, r2
   109fc:	2200      	movs	r2, #0
   109fe:	701a      	strb	r2, [r3, #0]
	}

	return ctx.count;
   10a00:	69fb      	ldr	r3, [r7, #28]
}
   10a02:	4618      	mov	r0, r3
   10a04:	3720      	adds	r7, #32
   10a06:	46bd      	mov	sp, r7
   10a08:	bd80      	pop	{r7, pc}
   10a0a:	bf00      	nop
   10a0c:	0002108d 	.word	0x0002108d

00010a10 <transition_complete>:
			  int evt,
			  k_spinlock_key_t key);

static void transition_complete(struct onoff_manager *mgr,
				int res)
{
   10a10:	b580      	push	{r7, lr}
   10a12:	b088      	sub	sp, #32
   10a14:	af00      	add	r7, sp, #0
   10a16:	6078      	str	r0, [r7, #4]
   10a18:	6039      	str	r1, [r7, #0]
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   10a1a:	687b      	ldr	r3, [r7, #4]
   10a1c:	3314      	adds	r3, #20
   10a1e:	61fb      	str	r3, [r7, #28]
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   10a20:	f04f 0320 	mov.w	r3, #32
   10a24:	f3ef 8211 	mrs	r2, BASEPRI
   10a28:	f383 8811 	msr	BASEPRI, r3
   10a2c:	f3bf 8f6f 	isb	sy
   10a30:	61ba      	str	r2, [r7, #24]
   10a32:	617b      	str	r3, [r7, #20]
		: "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return key;
   10a34:	69bb      	ldr	r3, [r7, #24]

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   10a36:	60fb      	str	r3, [r7, #12]

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10a38:	69f8      	ldr	r0, [r7, #28]
   10a3a:	f00c fb05 	bl	1d048 <z_spin_lock_valid>
   10a3e:	4603      	mov	r3, r0
   10a40:	f083 0301 	eor.w	r3, r3, #1
   10a44:	b2db      	uxtb	r3, r3
   10a46:	2b00      	cmp	r3, #0
   10a48:	d00d      	beq.n	10a66 <transition_complete+0x56>
   10a4a:	2381      	movs	r3, #129	; 0x81
   10a4c:	4a0e      	ldr	r2, [pc, #56]	; (10a88 <transition_complete+0x78>)
   10a4e:	490f      	ldr	r1, [pc, #60]	; (10a8c <transition_complete+0x7c>)
   10a50:	480f      	ldr	r0, [pc, #60]	; (10a90 <transition_complete+0x80>)
   10a52:	f010 fb09 	bl	21068 <printk>
   10a56:	69f9      	ldr	r1, [r7, #28]
   10a58:	480e      	ldr	r0, [pc, #56]	; (10a94 <transition_complete+0x84>)
   10a5a:	f010 fb05 	bl	21068 <printk>
   10a5e:	2181      	movs	r1, #129	; 0x81
   10a60:	4809      	ldr	r0, [pc, #36]	; (10a88 <transition_complete+0x78>)
   10a62:	f011 fbae 	bl	221c2 <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   10a66:	69f8      	ldr	r0, [r7, #28]
   10a68:	f00c fb26 	bl	1d0b8 <z_spin_lock_set_owner>
#endif
	return k;
   10a6c:	68fb      	ldr	r3, [r7, #12]
   10a6e:	613b      	str	r3, [r7, #16]

	mgr->last_res = res;
   10a70:	687b      	ldr	r3, [r7, #4]
   10a72:	683a      	ldr	r2, [r7, #0]
   10a74:	619a      	str	r2, [r3, #24]
	process_event(mgr, EVT_COMPLETE, key);
   10a76:	693a      	ldr	r2, [r7, #16]
   10a78:	2101      	movs	r1, #1
   10a7a:	6878      	ldr	r0, [r7, #4]
   10a7c:	f000 f8bc 	bl	10bf8 <process_event>
}
   10a80:	bf00      	nop
   10a82:	3720      	adds	r7, #32
   10a84:	46bd      	mov	sp, r7
   10a86:	bd80      	pop	{r7, pc}
   10a88:	00029580 	.word	0x00029580
   10a8c:	000295a8 	.word	0x000295a8
   10a90:	000295c0 	.word	0x000295c0
   10a94:	000295e0 	.word	0x000295e0

00010a98 <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
   10a98:	b580      	push	{r7, lr}
   10a9a:	b086      	sub	sp, #24
   10a9c:	af00      	add	r7, sp, #0
   10a9e:	60f8      	str	r0, [r7, #12]
   10aa0:	60b9      	str	r1, [r7, #8]
   10aa2:	607a      	str	r2, [r7, #4]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10aa4:	68fb      	ldr	r3, [r7, #12]
   10aa6:	8b9b      	ldrh	r3, [r3, #28]
   10aa8:	f003 0307 	and.w	r3, r3, #7
   10aac:	613b      	str	r3, [r7, #16]

	if (res < 0) {
   10aae:	687b      	ldr	r3, [r7, #4]
   10ab0:	2b00      	cmp	r3, #0
   10ab2:	da0e      	bge.n	10ad2 <process_complete+0x3a>
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
   10ab4:	68bb      	ldr	r3, [r7, #8]
   10ab6:	68fa      	ldr	r2, [r7, #12]
   10ab8:	e892 0003 	ldmia.w	r2, {r0, r1}
   10abc:	e883 0003 	stmia.w	r3, {r0, r1}
		sys_slist_init(&mgr->clients);
   10ac0:	68fb      	ldr	r3, [r7, #12]
   10ac2:	4618      	mov	r0, r3
   10ac4:	f010 fb33 	bl	2112e <sys_slist_init>
		set_state(mgr, ONOFF_STATE_ERROR);
   10ac8:	2101      	movs	r1, #1
   10aca:	68f8      	ldr	r0, [r7, #12]
   10acc:	f010 fc00 	bl	212d0 <set_state>
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else {
		__ASSERT_NO_MSG(false);
	}
}
   10ad0:	e085      	b.n	10bde <process_complete+0x146>
	} else if ((state == ONOFF_STATE_TO_ON)
   10ad2:	693b      	ldr	r3, [r7, #16]
   10ad4:	2b06      	cmp	r3, #6
   10ad6:	d002      	beq.n	10ade <process_complete+0x46>
		   || (state == ONOFF_STATE_RESETTING)) {
   10ad8:	693b      	ldr	r3, [r7, #16]
   10ada:	2b05      	cmp	r3, #5
   10adc:	d15d      	bne.n	10b9a <process_complete+0x102>
		*clients = mgr->clients;
   10ade:	68bb      	ldr	r3, [r7, #8]
   10ae0:	68fa      	ldr	r2, [r7, #12]
   10ae2:	e892 0003 	ldmia.w	r2, {r0, r1}
   10ae6:	e883 0003 	stmia.w	r3, {r0, r1}
		sys_slist_init(&mgr->clients);
   10aea:	68fb      	ldr	r3, [r7, #12]
   10aec:	4618      	mov	r0, r3
   10aee:	f010 fb1e 	bl	2112e <sys_slist_init>
		if (state == ONOFF_STATE_TO_ON) {
   10af2:	693b      	ldr	r3, [r7, #16]
   10af4:	2b06      	cmp	r3, #6
   10af6:	d12f      	bne.n	10b58 <process_complete+0xc0>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10af8:	68b8      	ldr	r0, [r7, #8]
   10afa:	f010 fb59 	bl	211b0 <sys_slist_peek_head>
   10afe:	4603      	mov	r3, r0
   10b00:	2b00      	cmp	r3, #0
   10b02:	d004      	beq.n	10b0e <process_complete+0x76>
   10b04:	68b8      	ldr	r0, [r7, #8]
   10b06:	f010 fb53 	bl	211b0 <sys_slist_peek_head>
   10b0a:	4603      	mov	r3, r0
   10b0c:	e000      	b.n	10b10 <process_complete+0x78>
   10b0e:	2300      	movs	r3, #0
   10b10:	617b      	str	r3, [r7, #20]
   10b12:	e019      	b.n	10b48 <process_complete+0xb0>
				mgr->refs += 1U;
   10b14:	68fb      	ldr	r3, [r7, #12]
   10b16:	8bdb      	ldrh	r3, [r3, #30]
   10b18:	3301      	adds	r3, #1
   10b1a:	b29a      	uxth	r2, r3
   10b1c:	68fb      	ldr	r3, [r7, #12]
   10b1e:	83da      	strh	r2, [r3, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10b20:	697b      	ldr	r3, [r7, #20]
   10b22:	2b00      	cmp	r3, #0
   10b24:	d00e      	beq.n	10b44 <process_complete+0xac>
   10b26:	697b      	ldr	r3, [r7, #20]
   10b28:	4618      	mov	r0, r3
   10b2a:	f010 fb74 	bl	21216 <sys_slist_peek_next>
   10b2e:	4603      	mov	r3, r0
   10b30:	2b00      	cmp	r3, #0
   10b32:	d005      	beq.n	10b40 <process_complete+0xa8>
   10b34:	697b      	ldr	r3, [r7, #20]
   10b36:	4618      	mov	r0, r3
   10b38:	f010 fb6d 	bl	21216 <sys_slist_peek_next>
   10b3c:	4603      	mov	r3, r0
   10b3e:	e002      	b.n	10b46 <process_complete+0xae>
   10b40:	2300      	movs	r3, #0
   10b42:	e000      	b.n	10b46 <process_complete+0xae>
   10b44:	2300      	movs	r3, #0
   10b46:	617b      	str	r3, [r7, #20]
   10b48:	697b      	ldr	r3, [r7, #20]
   10b4a:	2b00      	cmp	r3, #0
   10b4c:	d1e2      	bne.n	10b14 <process_complete+0x7c>
			set_state(mgr, ONOFF_STATE_ON);
   10b4e:	2102      	movs	r1, #2
   10b50:	68f8      	ldr	r0, [r7, #12]
   10b52:	f010 fbbd 	bl	212d0 <set_state>
   10b56:	e012      	b.n	10b7e <process_complete+0xe6>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
   10b58:	693b      	ldr	r3, [r7, #16]
   10b5a:	2b05      	cmp	r3, #5
   10b5c:	d00b      	beq.n	10b76 <process_complete+0xde>
   10b5e:	f240 1309 	movw	r3, #265	; 0x109
   10b62:	4a21      	ldr	r2, [pc, #132]	; (10be8 <process_complete+0x150>)
   10b64:	4921      	ldr	r1, [pc, #132]	; (10bec <process_complete+0x154>)
   10b66:	4822      	ldr	r0, [pc, #136]	; (10bf0 <process_complete+0x158>)
   10b68:	f010 fa7e 	bl	21068 <printk>
   10b6c:	f240 1109 	movw	r1, #265	; 0x109
   10b70:	481d      	ldr	r0, [pc, #116]	; (10be8 <process_complete+0x150>)
   10b72:	f011 fb26 	bl	221c2 <assert_post_action>
			set_state(mgr, ONOFF_STATE_OFF);
   10b76:	2100      	movs	r1, #0
   10b78:	68f8      	ldr	r0, [r7, #12]
   10b7a:	f010 fba9 	bl	212d0 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   10b7e:	68f8      	ldr	r0, [r7, #12]
   10b80:	f010 fc95 	bl	214ae <process_recheck>
   10b84:	4603      	mov	r3, r0
   10b86:	2b00      	cmp	r3, #0
   10b88:	d029      	beq.n	10bde <process_complete+0x146>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10b8a:	68fb      	ldr	r3, [r7, #12]
   10b8c:	8b9b      	ldrh	r3, [r3, #28]
   10b8e:	f043 0320 	orr.w	r3, r3, #32
   10b92:	b29a      	uxth	r2, r3
   10b94:	68fb      	ldr	r3, [r7, #12]
   10b96:	839a      	strh	r2, [r3, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   10b98:	e021      	b.n	10bde <process_complete+0x146>
	} else if (state == ONOFF_STATE_TO_OFF) {
   10b9a:	693b      	ldr	r3, [r7, #16]
   10b9c:	2b04      	cmp	r3, #4
   10b9e:	d111      	bne.n	10bc4 <process_complete+0x12c>
		set_state(mgr, ONOFF_STATE_OFF);
   10ba0:	2100      	movs	r1, #0
   10ba2:	68f8      	ldr	r0, [r7, #12]
   10ba4:	f010 fb94 	bl	212d0 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   10ba8:	68f8      	ldr	r0, [r7, #12]
   10baa:	f010 fc80 	bl	214ae <process_recheck>
   10bae:	4603      	mov	r3, r0
   10bb0:	2b00      	cmp	r3, #0
   10bb2:	d014      	beq.n	10bde <process_complete+0x146>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10bb4:	68fb      	ldr	r3, [r7, #12]
   10bb6:	8b9b      	ldrh	r3, [r3, #28]
   10bb8:	f043 0320 	orr.w	r3, r3, #32
   10bbc:	b29a      	uxth	r2, r3
   10bbe:	68fb      	ldr	r3, [r7, #12]
   10bc0:	839a      	strh	r2, [r3, #28]
}
   10bc2:	e00c      	b.n	10bde <process_complete+0x146>
		__ASSERT_NO_MSG(false);
   10bc4:	f240 131b 	movw	r3, #283	; 0x11b
   10bc8:	4a07      	ldr	r2, [pc, #28]	; (10be8 <process_complete+0x150>)
   10bca:	490a      	ldr	r1, [pc, #40]	; (10bf4 <process_complete+0x15c>)
   10bcc:	4808      	ldr	r0, [pc, #32]	; (10bf0 <process_complete+0x158>)
   10bce:	f010 fa4b 	bl	21068 <printk>
   10bd2:	f240 111b 	movw	r1, #283	; 0x11b
   10bd6:	4804      	ldr	r0, [pc, #16]	; (10be8 <process_complete+0x150>)
   10bd8:	f011 faf3 	bl	221c2 <assert_post_action>
}
   10bdc:	e7ff      	b.n	10bde <process_complete+0x146>
   10bde:	bf00      	nop
   10be0:	3718      	adds	r7, #24
   10be2:	46bd      	mov	sp, r7
   10be4:	bd80      	pop	{r7, pc}
   10be6:	bf00      	nop
   10be8:	000295f8 	.word	0x000295f8
   10bec:	0002961c 	.word	0x0002961c
   10bf0:	000295c0 	.word	0x000295c0
   10bf4:	00029644 	.word	0x00029644

00010bf8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   10bf8:	b580      	push	{r7, lr}
   10bfa:	b096      	sub	sp, #88	; 0x58
   10bfc:	af00      	add	r7, sp, #0
   10bfe:	60f8      	str	r0, [r7, #12]
   10c00:	60b9      	str	r1, [r7, #8]
   10c02:	607a      	str	r2, [r7, #4]
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10c04:	68fb      	ldr	r3, [r7, #12]
   10c06:	8b9b      	ldrh	r3, [r3, #28]
   10c08:	f003 0307 	and.w	r3, r3, #7
   10c0c:	657b      	str	r3, [r7, #84]	; 0x54
	int res = 0;
   10c0e:	2300      	movs	r3, #0
   10c10:	653b      	str	r3, [r7, #80]	; 0x50
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);
   10c12:	68fb      	ldr	r3, [r7, #12]
   10c14:	8b9b      	ldrh	r3, [r3, #28]
   10c16:	f003 0308 	and.w	r3, r3, #8
   10c1a:	2b00      	cmp	r3, #0
   10c1c:	bf14      	ite	ne
   10c1e:	2301      	movne	r3, #1
   10c20:	2300      	moveq	r3, #0
   10c22:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	__ASSERT_NO_MSG(evt != EVT_NOP);
   10c26:	68bb      	ldr	r3, [r7, #8]
   10c28:	2b00      	cmp	r3, #0
   10c2a:	d10b      	bne.n	10c44 <process_event+0x4c>
   10c2c:	f240 1333 	movw	r3, #307	; 0x133
   10c30:	4a92      	ldr	r2, [pc, #584]	; (10e7c <process_event+0x284>)
   10c32:	4993      	ldr	r1, [pc, #588]	; (10e80 <process_event+0x288>)
   10c34:	4893      	ldr	r0, [pc, #588]	; (10e84 <process_event+0x28c>)
   10c36:	f010 fa17 	bl	21068 <printk>
   10c3a:	f240 1133 	movw	r1, #307	; 0x133
   10c3e:	488f      	ldr	r0, [pc, #572]	; (10e7c <process_event+0x284>)
   10c40:	f011 fabf 	bl	221c2 <assert_post_action>

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   10c44:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
   10c48:	2b00      	cmp	r3, #0
   10c4a:	d021      	beq.n	10c90 <process_event+0x98>
		if (evt == EVT_COMPLETE) {
   10c4c:	68bb      	ldr	r3, [r7, #8]
   10c4e:	2b01      	cmp	r3, #1
   10c50:	d107      	bne.n	10c62 <process_event+0x6a>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   10c52:	68fb      	ldr	r3, [r7, #12]
   10c54:	8b9b      	ldrh	r3, [r3, #28]
   10c56:	f043 0310 	orr.w	r3, r3, #16
   10c5a:	b29a      	uxth	r2, r3
   10c5c:	68fb      	ldr	r3, [r7, #12]
   10c5e:	839a      	strh	r2, [r3, #28]
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
		}

		goto out;
   10c60:	e1f6      	b.n	11050 <process_event+0x458>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
   10c62:	68bb      	ldr	r3, [r7, #8]
   10c64:	2b02      	cmp	r3, #2
   10c66:	d00b      	beq.n	10c80 <process_event+0x88>
   10c68:	f44f 739e 	mov.w	r3, #316	; 0x13c
   10c6c:	4a83      	ldr	r2, [pc, #524]	; (10e7c <process_event+0x284>)
   10c6e:	4986      	ldr	r1, [pc, #536]	; (10e88 <process_event+0x290>)
   10c70:	4884      	ldr	r0, [pc, #528]	; (10e84 <process_event+0x28c>)
   10c72:	f010 f9f9 	bl	21068 <printk>
   10c76:	f44f 719e 	mov.w	r1, #316	; 0x13c
   10c7a:	4880      	ldr	r0, [pc, #512]	; (10e7c <process_event+0x284>)
   10c7c:	f011 faa1 	bl	221c2 <assert_post_action>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10c80:	68fb      	ldr	r3, [r7, #12]
   10c82:	8b9b      	ldrh	r3, [r3, #28]
   10c84:	f043 0320 	orr.w	r3, r3, #32
   10c88:	b29a      	uxth	r2, r3
   10c8a:	68fb      	ldr	r3, [r7, #12]
   10c8c:	839a      	strh	r2, [r3, #28]
		goto out;
   10c8e:	e1df      	b.n	11050 <process_event+0x458>
	}

	sys_slist_init(&clients);
   10c90:	f107 0320 	add.w	r3, r7, #32
   10c94:	4618      	mov	r0, r3
   10c96:	f010 fa4a 	bl	2112e <sys_slist_init>
	do {
		onoff_transition_fn transit = NULL;
   10c9a:	2300      	movs	r3, #0
   10c9c:	64fb      	str	r3, [r7, #76]	; 0x4c

		if (evt == EVT_RECHECK) {
   10c9e:	68bb      	ldr	r3, [r7, #8]
   10ca0:	2b02      	cmp	r3, #2
   10ca2:	d103      	bne.n	10cac <process_event+0xb4>
			evt = process_recheck(mgr);
   10ca4:	68f8      	ldr	r0, [r7, #12]
   10ca6:	f010 fc02 	bl	214ae <process_recheck>
   10caa:	60b8      	str	r0, [r7, #8]
		}

		if (evt == EVT_NOP) {
   10cac:	68bb      	ldr	r3, [r7, #8]
   10cae:	2b00      	cmp	r3, #0
   10cb0:	f000 81cd 	beq.w	1104e <process_event+0x456>
			break;
		}

		res = 0;
   10cb4:	2300      	movs	r3, #0
   10cb6:	653b      	str	r3, [r7, #80]	; 0x50
		if (evt == EVT_COMPLETE) {
   10cb8:	68bb      	ldr	r3, [r7, #8]
   10cba:	2b01      	cmp	r3, #1
   10cbc:	d10a      	bne.n	10cd4 <process_event+0xdc>
			res = mgr->last_res;
   10cbe:	68fb      	ldr	r3, [r7, #12]
   10cc0:	699b      	ldr	r3, [r3, #24]
   10cc2:	653b      	str	r3, [r7, #80]	; 0x50
			process_complete(mgr, &clients, res);
   10cc4:	f107 0320 	add.w	r3, r7, #32
   10cc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   10cca:	4619      	mov	r1, r3
   10ccc:	68f8      	ldr	r0, [r7, #12]
   10cce:	f7ff fee3 	bl	10a98 <process_complete>
   10cd2:	e0bf      	b.n	10e54 <process_event+0x25c>
			/* NB: This can trigger a RECHECK */
		} else if (evt == EVT_START) {
   10cd4:	68bb      	ldr	r3, [r7, #8]
   10cd6:	2b03      	cmp	r3, #3
   10cd8:	d139      	bne.n	10d4e <process_event+0x156>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   10cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   10cdc:	2b00      	cmp	r3, #0
   10cde:	d00b      	beq.n	10cf8 <process_event+0x100>
   10ce0:	f44f 73ab 	mov.w	r3, #342	; 0x156
   10ce4:	4a65      	ldr	r2, [pc, #404]	; (10e7c <process_event+0x284>)
   10ce6:	4969      	ldr	r1, [pc, #420]	; (10e8c <process_event+0x294>)
   10ce8:	4866      	ldr	r0, [pc, #408]	; (10e84 <process_event+0x28c>)
   10cea:	f010 f9bd 	bl	21068 <printk>
   10cee:	f44f 71ab 	mov.w	r1, #342	; 0x156
   10cf2:	4862      	ldr	r0, [pc, #392]	; (10e7c <process_event+0x284>)
   10cf4:	f011 fa65 	bl	221c2 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   10cf8:	68fb      	ldr	r3, [r7, #12]
   10cfa:	4618      	mov	r0, r3
   10cfc:	f010 fa6e 	bl	211dc <sys_slist_is_empty>
   10d00:	4603      	mov	r3, r0
   10d02:	2b00      	cmp	r3, #0
   10d04:	d00b      	beq.n	10d1e <process_event+0x126>
   10d06:	f240 1357 	movw	r3, #343	; 0x157
   10d0a:	4a5c      	ldr	r2, [pc, #368]	; (10e7c <process_event+0x284>)
   10d0c:	4960      	ldr	r1, [pc, #384]	; (10e90 <process_event+0x298>)
   10d0e:	485d      	ldr	r0, [pc, #372]	; (10e84 <process_event+0x28c>)
   10d10:	f010 f9aa 	bl	21068 <printk>
   10d14:	f240 1157 	movw	r1, #343	; 0x157
   10d18:	4858      	ldr	r0, [pc, #352]	; (10e7c <process_event+0x284>)
   10d1a:	f011 fa52 	bl	221c2 <assert_post_action>

			transit = mgr->transitions->start;
   10d1e:	68fb      	ldr	r3, [r7, #12]
   10d20:	691b      	ldr	r3, [r3, #16]
   10d22:	681b      	ldr	r3, [r3, #0]
   10d24:	64fb      	str	r3, [r7, #76]	; 0x4c
			__ASSERT_NO_MSG(transit != NULL);
   10d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10d28:	2b00      	cmp	r3, #0
   10d2a:	d10b      	bne.n	10d44 <process_event+0x14c>
   10d2c:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   10d30:	4a52      	ldr	r2, [pc, #328]	; (10e7c <process_event+0x284>)
   10d32:	4958      	ldr	r1, [pc, #352]	; (10e94 <process_event+0x29c>)
   10d34:	4853      	ldr	r0, [pc, #332]	; (10e84 <process_event+0x28c>)
   10d36:	f010 f997 	bl	21068 <printk>
   10d3a:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   10d3e:	484f      	ldr	r0, [pc, #316]	; (10e7c <process_event+0x284>)
   10d40:	f011 fa3f 	bl	221c2 <assert_post_action>
			set_state(mgr, ONOFF_STATE_TO_ON);
   10d44:	2106      	movs	r1, #6
   10d46:	68f8      	ldr	r0, [r7, #12]
   10d48:	f010 fac2 	bl	212d0 <set_state>
   10d4c:	e082      	b.n	10e54 <process_event+0x25c>
		} else if (evt == EVT_STOP) {
   10d4e:	68bb      	ldr	r3, [r7, #8]
   10d50:	2b04      	cmp	r3, #4
   10d52:	d136      	bne.n	10dc2 <process_event+0x1ca>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   10d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   10d56:	2b02      	cmp	r3, #2
   10d58:	d00b      	beq.n	10d72 <process_event+0x17a>
   10d5a:	f240 135d 	movw	r3, #349	; 0x15d
   10d5e:	4a47      	ldr	r2, [pc, #284]	; (10e7c <process_event+0x284>)
   10d60:	494d      	ldr	r1, [pc, #308]	; (10e98 <process_event+0x2a0>)
   10d62:	4848      	ldr	r0, [pc, #288]	; (10e84 <process_event+0x28c>)
   10d64:	f010 f980 	bl	21068 <printk>
   10d68:	f240 115d 	movw	r1, #349	; 0x15d
   10d6c:	4843      	ldr	r0, [pc, #268]	; (10e7c <process_event+0x284>)
   10d6e:	f011 fa28 	bl	221c2 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   10d72:	68fb      	ldr	r3, [r7, #12]
   10d74:	8bdb      	ldrh	r3, [r3, #30]
   10d76:	2b00      	cmp	r3, #0
   10d78:	d00b      	beq.n	10d92 <process_event+0x19a>
   10d7a:	f44f 73af 	mov.w	r3, #350	; 0x15e
   10d7e:	4a3f      	ldr	r2, [pc, #252]	; (10e7c <process_event+0x284>)
   10d80:	4946      	ldr	r1, [pc, #280]	; (10e9c <process_event+0x2a4>)
   10d82:	4840      	ldr	r0, [pc, #256]	; (10e84 <process_event+0x28c>)
   10d84:	f010 f970 	bl	21068 <printk>
   10d88:	f44f 71af 	mov.w	r1, #350	; 0x15e
   10d8c:	483b      	ldr	r0, [pc, #236]	; (10e7c <process_event+0x284>)
   10d8e:	f011 fa18 	bl	221c2 <assert_post_action>

			transit = mgr->transitions->stop;
   10d92:	68fb      	ldr	r3, [r7, #12]
   10d94:	691b      	ldr	r3, [r3, #16]
   10d96:	685b      	ldr	r3, [r3, #4]
   10d98:	64fb      	str	r3, [r7, #76]	; 0x4c
			__ASSERT_NO_MSG(transit != NULL);
   10d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10d9c:	2b00      	cmp	r3, #0
   10d9e:	d10b      	bne.n	10db8 <process_event+0x1c0>
   10da0:	f240 1361 	movw	r3, #353	; 0x161
   10da4:	4a35      	ldr	r2, [pc, #212]	; (10e7c <process_event+0x284>)
   10da6:	493b      	ldr	r1, [pc, #236]	; (10e94 <process_event+0x29c>)
   10da8:	4836      	ldr	r0, [pc, #216]	; (10e84 <process_event+0x28c>)
   10daa:	f010 f95d 	bl	21068 <printk>
   10dae:	f240 1161 	movw	r1, #353	; 0x161
   10db2:	4832      	ldr	r0, [pc, #200]	; (10e7c <process_event+0x284>)
   10db4:	f011 fa05 	bl	221c2 <assert_post_action>
			set_state(mgr, ONOFF_STATE_TO_OFF);
   10db8:	2104      	movs	r1, #4
   10dba:	68f8      	ldr	r0, [r7, #12]
   10dbc:	f010 fa88 	bl	212d0 <set_state>
   10dc0:	e048      	b.n	10e54 <process_event+0x25c>
		} else if (evt == EVT_RESET) {
   10dc2:	68bb      	ldr	r3, [r7, #8]
   10dc4:	2b05      	cmp	r3, #5
   10dc6:	d139      	bne.n	10e3c <process_event+0x244>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   10dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   10dca:	2b01      	cmp	r3, #1
   10dcc:	d00b      	beq.n	10de6 <process_event+0x1ee>
   10dce:	f44f 73b2 	mov.w	r3, #356	; 0x164
   10dd2:	4a2a      	ldr	r2, [pc, #168]	; (10e7c <process_event+0x284>)
   10dd4:	4932      	ldr	r1, [pc, #200]	; (10ea0 <process_event+0x2a8>)
   10dd6:	482b      	ldr	r0, [pc, #172]	; (10e84 <process_event+0x28c>)
   10dd8:	f010 f946 	bl	21068 <printk>
   10ddc:	f44f 71b2 	mov.w	r1, #356	; 0x164
   10de0:	4826      	ldr	r0, [pc, #152]	; (10e7c <process_event+0x284>)
   10de2:	f011 f9ee 	bl	221c2 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   10de6:	68fb      	ldr	r3, [r7, #12]
   10de8:	4618      	mov	r0, r3
   10dea:	f010 f9f7 	bl	211dc <sys_slist_is_empty>
   10dee:	4603      	mov	r3, r0
   10df0:	2b00      	cmp	r3, #0
   10df2:	d00b      	beq.n	10e0c <process_event+0x214>
   10df4:	f240 1365 	movw	r3, #357	; 0x165
   10df8:	4a20      	ldr	r2, [pc, #128]	; (10e7c <process_event+0x284>)
   10dfa:	4925      	ldr	r1, [pc, #148]	; (10e90 <process_event+0x298>)
   10dfc:	4821      	ldr	r0, [pc, #132]	; (10e84 <process_event+0x28c>)
   10dfe:	f010 f933 	bl	21068 <printk>
   10e02:	f240 1165 	movw	r1, #357	; 0x165
   10e06:	481d      	ldr	r0, [pc, #116]	; (10e7c <process_event+0x284>)
   10e08:	f011 f9db 	bl	221c2 <assert_post_action>

			transit = mgr->transitions->reset;
   10e0c:	68fb      	ldr	r3, [r7, #12]
   10e0e:	691b      	ldr	r3, [r3, #16]
   10e10:	689b      	ldr	r3, [r3, #8]
   10e12:	64fb      	str	r3, [r7, #76]	; 0x4c
			__ASSERT_NO_MSG(transit != NULL);
   10e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10e16:	2b00      	cmp	r3, #0
   10e18:	d10b      	bne.n	10e32 <process_event+0x23a>
   10e1a:	f44f 73b4 	mov.w	r3, #360	; 0x168
   10e1e:	4a17      	ldr	r2, [pc, #92]	; (10e7c <process_event+0x284>)
   10e20:	491c      	ldr	r1, [pc, #112]	; (10e94 <process_event+0x29c>)
   10e22:	4818      	ldr	r0, [pc, #96]	; (10e84 <process_event+0x28c>)
   10e24:	f010 f920 	bl	21068 <printk>
   10e28:	f44f 71b4 	mov.w	r1, #360	; 0x168
   10e2c:	4813      	ldr	r0, [pc, #76]	; (10e7c <process_event+0x284>)
   10e2e:	f011 f9c8 	bl	221c2 <assert_post_action>
			set_state(mgr, ONOFF_STATE_RESETTING);
   10e32:	2105      	movs	r1, #5
   10e34:	68f8      	ldr	r0, [r7, #12]
   10e36:	f010 fa4b 	bl	212d0 <set_state>
   10e3a:	e00b      	b.n	10e54 <process_event+0x25c>
		} else {
			__ASSERT_NO_MSG(false);
   10e3c:	f240 136b 	movw	r3, #363	; 0x16b
   10e40:	4a0e      	ldr	r2, [pc, #56]	; (10e7c <process_event+0x284>)
   10e42:	4918      	ldr	r1, [pc, #96]	; (10ea4 <process_event+0x2ac>)
   10e44:	480f      	ldr	r0, [pc, #60]	; (10e84 <process_event+0x28c>)
   10e46:	f010 f90f 	bl	21068 <printk>
   10e4a:	f240 116b 	movw	r1, #363	; 0x16b
   10e4e:	480b      	ldr	r0, [pc, #44]	; (10e7c <process_event+0x284>)
   10e50:	f011 f9b7 	bl	221c2 <assert_post_action>
		/* Have to unlock and do something if any of:
		 * * We changed state and there are monitors;
		 * * We completed a transition and there are clients to notify;
		 * * We need to initiate a transition.
		 */
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10e54:	68fb      	ldr	r3, [r7, #12]
   10e56:	8b9b      	ldrh	r3, [r3, #28]
   10e58:	f003 0307 	and.w	r3, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10e5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   10e5e:	429a      	cmp	r2, r3
   10e60:	d022      	beq.n	10ea8 <process_event+0x2b0>
   10e62:	68fb      	ldr	r3, [r7, #12]
   10e64:	3308      	adds	r3, #8
   10e66:	4618      	mov	r0, r3
   10e68:	f010 f9b8 	bl	211dc <sys_slist_is_empty>
   10e6c:	4603      	mov	r3, r0
   10e6e:	f083 0301 	eor.w	r3, r3, #1
   10e72:	b2db      	uxtb	r3, r3
   10e74:	2b00      	cmp	r3, #0
   10e76:	d017      	beq.n	10ea8 <process_event+0x2b0>
   10e78:	2301      	movs	r3, #1
   10e7a:	e016      	b.n	10eaa <process_event+0x2b2>
   10e7c:	000295f8 	.word	0x000295f8
   10e80:	00029648 	.word	0x00029648
   10e84:	000295c0 	.word	0x000295c0
   10e88:	00029658 	.word	0x00029658
   10e8c:	0002966c 	.word	0x0002966c
   10e90:	00029678 	.word	0x00029678
   10e94:	0002969c 	.word	0x0002969c
   10e98:	000296b4 	.word	0x000296b4
   10e9c:	000296cc 	.word	0x000296cc
   10ea0:	000296dc 	.word	0x000296dc
   10ea4:	00029644 	.word	0x00029644
   10ea8:	2300      	movs	r3, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10eaa:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
   10eae:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   10eb2:	f003 0301 	and.w	r3, r3, #1
   10eb6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

		evt = EVT_NOP;
   10eba:	2300      	movs	r3, #0
   10ebc:	60bb      	str	r3, [r7, #8]
		if (do_monitors
   10ebe:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   10ec2:	2b00      	cmp	r3, #0
   10ec4:	d10e      	bne.n	10ee4 <process_event+0x2ec>
		    || !sys_slist_is_empty(&clients)
   10ec6:	f107 0320 	add.w	r3, r7, #32
   10eca:	4618      	mov	r0, r3
   10ecc:	f010 f986 	bl	211dc <sys_slist_is_empty>
   10ed0:	4603      	mov	r3, r0
   10ed2:	f083 0301 	eor.w	r3, r3, #1
   10ed6:	b2db      	uxtb	r3, r3
   10ed8:	2b00      	cmp	r3, #0
   10eda:	d103      	bne.n	10ee4 <process_event+0x2ec>
		    || (transit != NULL)) {
   10edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10ede:	2b00      	cmp	r3, #0
   10ee0:	f000 808c 	beq.w	10ffc <process_event+0x404>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10ee4:	68fb      	ldr	r3, [r7, #12]
   10ee6:	8b9b      	ldrh	r3, [r3, #28]
   10ee8:	f043 0308 	orr.w	r3, r3, #8
   10eec:	b29b      	uxth	r3, r3
   10eee:	647b      	str	r3, [r7, #68]	; 0x44

			mgr->flags = flags;
   10ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10ef2:	b29a      	uxth	r2, r3
   10ef4:	68fb      	ldr	r3, [r7, #12]
   10ef6:	839a      	strh	r2, [r3, #28]
			state = flags & ONOFF_STATE_MASK;
   10ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   10efa:	f003 0307 	and.w	r3, r3, #7
   10efe:	657b      	str	r3, [r7, #84]	; 0x54

			k_spin_unlock(&mgr->lock, key);
   10f00:	68fb      	ldr	r3, [r7, #12]
   10f02:	3314      	adds	r3, #20
   10f04:	643b      	str	r3, [r7, #64]	; 0x40
   10f06:	687b      	ldr	r3, [r7, #4]
   10f08:	617b      	str	r3, [r7, #20]
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10f0a:	6c38      	ldr	r0, [r7, #64]	; 0x40
   10f0c:	f00c f8b8 	bl	1d080 <z_spin_unlock_valid>
   10f10:	4603      	mov	r3, r0
   10f12:	f083 0301 	eor.w	r3, r3, #1
   10f16:	b2db      	uxtb	r3, r3
   10f18:	2b00      	cmp	r3, #0
   10f1a:	d00d      	beq.n	10f38 <process_event+0x340>
   10f1c:	23ac      	movs	r3, #172	; 0xac
   10f1e:	4a61      	ldr	r2, [pc, #388]	; (110a4 <process_event+0x4ac>)
   10f20:	4961      	ldr	r1, [pc, #388]	; (110a8 <process_event+0x4b0>)
   10f22:	4862      	ldr	r0, [pc, #392]	; (110ac <process_event+0x4b4>)
   10f24:	f010 f8a0 	bl	21068 <printk>
   10f28:	6c39      	ldr	r1, [r7, #64]	; 0x40
   10f2a:	4861      	ldr	r0, [pc, #388]	; (110b0 <process_event+0x4b8>)
   10f2c:	f010 f89c 	bl	21068 <printk>
   10f30:	21ac      	movs	r1, #172	; 0xac
   10f32:	485c      	ldr	r0, [pc, #368]	; (110a4 <process_event+0x4ac>)
   10f34:	f011 f945 	bl	221c2 <assert_post_action>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   10f38:	697b      	ldr	r3, [r7, #20]
   10f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   10f3e:	f383 8811 	msr	BASEPRI, r3
   10f42:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   10f46:	bf00      	nop
}
   10f48:	bf00      	nop

			if (do_monitors) {
   10f4a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
   10f4e:	2b00      	cmp	r3, #0
   10f50:	d004      	beq.n	10f5c <process_event+0x364>
				notify_monitors(mgr, state, res);
   10f52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   10f54:	6d79      	ldr	r1, [r7, #84]	; 0x54
   10f56:	68f8      	ldr	r0, [r7, #12]
   10f58:	f010 fa1c 	bl	21394 <notify_monitors>
			}

			if (!sys_slist_is_empty(&clients)) {
   10f5c:	f107 0320 	add.w	r3, r7, #32
   10f60:	4618      	mov	r0, r3
   10f62:	f010 f93b 	bl	211dc <sys_slist_is_empty>
   10f66:	4603      	mov	r3, r0
   10f68:	f083 0301 	eor.w	r3, r3, #1
   10f6c:	b2db      	uxtb	r3, r3
   10f6e:	2b00      	cmp	r3, #0
   10f70:	d006      	beq.n	10f80 <process_event+0x388>
				notify_all(mgr, &clients, state, res);
   10f72:	f107 0120 	add.w	r1, r7, #32
   10f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   10f78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   10f7a:	68f8      	ldr	r0, [r7, #12]
   10f7c:	f010 fa75 	bl	2146a <notify_all>
			}

			if (transit != NULL) {
   10f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10f82:	2b00      	cmp	r3, #0
   10f84:	d003      	beq.n	10f8e <process_event+0x396>
				transit(mgr, transition_complete);
   10f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10f88:	494a      	ldr	r1, [pc, #296]	; (110b4 <process_event+0x4bc>)
   10f8a:	68f8      	ldr	r0, [r7, #12]
   10f8c:	4798      	blx	r3
			}

			key = k_spin_lock(&mgr->lock);
   10f8e:	68fb      	ldr	r3, [r7, #12]
   10f90:	3314      	adds	r3, #20
   10f92:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
   10f94:	f04f 0320 	mov.w	r3, #32
   10f98:	f3ef 8211 	mrs	r2, BASEPRI
   10f9c:	f383 8811 	msr	BASEPRI, r3
   10fa0:	f3bf 8f6f 	isb	sy
   10fa4:	637a      	str	r2, [r7, #52]	; 0x34
   10fa6:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
   10fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	k.key = arch_irq_lock();
   10faa:	61bb      	str	r3, [r7, #24]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10fac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   10fae:	f00c f84b 	bl	1d048 <z_spin_lock_valid>
   10fb2:	4603      	mov	r3, r0
   10fb4:	f083 0301 	eor.w	r3, r3, #1
   10fb8:	b2db      	uxtb	r3, r3
   10fba:	2b00      	cmp	r3, #0
   10fbc:	d00d      	beq.n	10fda <process_event+0x3e2>
   10fbe:	2381      	movs	r3, #129	; 0x81
   10fc0:	4a38      	ldr	r2, [pc, #224]	; (110a4 <process_event+0x4ac>)
   10fc2:	493d      	ldr	r1, [pc, #244]	; (110b8 <process_event+0x4c0>)
   10fc4:	4839      	ldr	r0, [pc, #228]	; (110ac <process_event+0x4b4>)
   10fc6:	f010 f84f 	bl	21068 <printk>
   10fca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   10fcc:	483b      	ldr	r0, [pc, #236]	; (110bc <process_event+0x4c4>)
   10fce:	f010 f84b 	bl	21068 <printk>
   10fd2:	2181      	movs	r1, #129	; 0x81
   10fd4:	4833      	ldr	r0, [pc, #204]	; (110a4 <process_event+0x4ac>)
   10fd6:	f011 f8f4 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   10fda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   10fdc:	f00c f86c 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   10fe0:	69bb      	ldr	r3, [r7, #24]
   10fe2:	607b      	str	r3, [r7, #4]
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10fe4:	68fb      	ldr	r3, [r7, #12]
   10fe6:	8b9b      	ldrh	r3, [r3, #28]
   10fe8:	f023 0308 	bic.w	r3, r3, #8
   10fec:	b29a      	uxth	r2, r3
   10fee:	68fb      	ldr	r3, [r7, #12]
   10ff0:	839a      	strh	r2, [r3, #28]
			state = mgr->flags & ONOFF_STATE_MASK;
   10ff2:	68fb      	ldr	r3, [r7, #12]
   10ff4:	8b9b      	ldrh	r3, [r3, #28]
   10ff6:	f003 0307 	and.w	r3, r3, #7
   10ffa:	657b      	str	r3, [r7, #84]	; 0x54
		}

		/* Process deferred events.  Completion takes priority
		 * over recheck.
		 */
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   10ffc:	68fb      	ldr	r3, [r7, #12]
   10ffe:	8b9b      	ldrh	r3, [r3, #28]
   11000:	f003 0310 	and.w	r3, r3, #16
   11004:	2b00      	cmp	r3, #0
   11006:	d009      	beq.n	1101c <process_event+0x424>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11008:	68fb      	ldr	r3, [r7, #12]
   1100a:	8b9b      	ldrh	r3, [r3, #28]
   1100c:	f023 0310 	bic.w	r3, r3, #16
   11010:	b29a      	uxth	r2, r3
   11012:	68fb      	ldr	r3, [r7, #12]
   11014:	839a      	strh	r2, [r3, #28]
			evt = EVT_COMPLETE;
   11016:	2301      	movs	r3, #1
   11018:	60bb      	str	r3, [r7, #8]
   1101a:	e00e      	b.n	1103a <process_event+0x442>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1101c:	68fb      	ldr	r3, [r7, #12]
   1101e:	8b9b      	ldrh	r3, [r3, #28]
   11020:	f003 0320 	and.w	r3, r3, #32
   11024:	2b00      	cmp	r3, #0
   11026:	d008      	beq.n	1103a <process_event+0x442>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   11028:	68fb      	ldr	r3, [r7, #12]
   1102a:	8b9b      	ldrh	r3, [r3, #28]
   1102c:	f023 0320 	bic.w	r3, r3, #32
   11030:	b29a      	uxth	r2, r3
   11032:	68fb      	ldr	r3, [r7, #12]
   11034:	839a      	strh	r2, [r3, #28]
			evt = EVT_RECHECK;
   11036:	2302      	movs	r3, #2
   11038:	60bb      	str	r3, [r7, #8]
		} else {
			;
		}

		state = mgr->flags & ONOFF_STATE_MASK;
   1103a:	68fb      	ldr	r3, [r7, #12]
   1103c:	8b9b      	ldrh	r3, [r3, #28]
   1103e:	f003 0307 	and.w	r3, r3, #7
   11042:	657b      	str	r3, [r7, #84]	; 0x54
	} while (evt != EVT_NOP);
   11044:	68bb      	ldr	r3, [r7, #8]
   11046:	2b00      	cmp	r3, #0
   11048:	f47f ae27 	bne.w	10c9a <process_event+0xa2>

out:
   1104c:	e000      	b.n	11050 <process_event+0x458>
			break;
   1104e:	bf00      	nop
	k_spin_unlock(&mgr->lock, key);
   11050:	68fb      	ldr	r3, [r7, #12]
   11052:	3314      	adds	r3, #20
   11054:	62fb      	str	r3, [r7, #44]	; 0x2c
   11056:	687b      	ldr	r3, [r7, #4]
   11058:	61fb      	str	r3, [r7, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1105a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1105c:	f00c f810 	bl	1d080 <z_spin_unlock_valid>
   11060:	4603      	mov	r3, r0
   11062:	f083 0301 	eor.w	r3, r3, #1
   11066:	b2db      	uxtb	r3, r3
   11068:	2b00      	cmp	r3, #0
   1106a:	d00d      	beq.n	11088 <process_event+0x490>
   1106c:	23ac      	movs	r3, #172	; 0xac
   1106e:	4a0d      	ldr	r2, [pc, #52]	; (110a4 <process_event+0x4ac>)
   11070:	490d      	ldr	r1, [pc, #52]	; (110a8 <process_event+0x4b0>)
   11072:	480e      	ldr	r0, [pc, #56]	; (110ac <process_event+0x4b4>)
   11074:	f00f fff8 	bl	21068 <printk>
   11078:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1107a:	480d      	ldr	r0, [pc, #52]	; (110b0 <process_event+0x4b8>)
   1107c:	f00f fff4 	bl	21068 <printk>
   11080:	21ac      	movs	r1, #172	; 0xac
   11082:	4808      	ldr	r0, [pc, #32]	; (110a4 <process_event+0x4ac>)
   11084:	f011 f89d 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   11088:	69fb      	ldr	r3, [r7, #28]
   1108a:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
   1108c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1108e:	f383 8811 	msr	BASEPRI, r3
   11092:	f3bf 8f6f 	isb	sy
}
   11096:	bf00      	nop
}
   11098:	bf00      	nop
}
   1109a:	bf00      	nop
   1109c:	3758      	adds	r7, #88	; 0x58
   1109e:	46bd      	mov	sp, r7
   110a0:	bd80      	pop	{r7, pc}
   110a2:	bf00      	nop
   110a4:	00029580 	.word	0x00029580
   110a8:	000296f4 	.word	0x000296f4
   110ac:	000295c0 	.word	0x000295c0
   110b0:	0002970c 	.word	0x0002970c
   110b4:	00010a11 	.word	0x00010a11
   110b8:	000295a8 	.word	0x000295a8
   110bc:	000295e0 	.word	0x000295e0

000110c0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   110c0:	b580      	push	{r7, lr}
   110c2:	b08e      	sub	sp, #56	; 0x38
   110c4:	af00      	add	r7, sp, #0
   110c6:	6078      	str	r0, [r7, #4]
   110c8:	6039      	str	r1, [r7, #0]
	bool add_client = false;        /* add client to pending list */
   110ca:	2300      	movs	r3, #0
   110cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	bool start = false;             /* trigger a start transition */
   110d0:	2300      	movs	r3, #0
   110d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	bool notify = false;            /* do client notification */
   110d6:	2300      	movs	r3, #0
   110d8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int rv = validate_args(mgr, cli);
   110dc:	6839      	ldr	r1, [r7, #0]
   110de:	6878      	ldr	r0, [r7, #4]
   110e0:	f010 f90e 	bl	21300 <validate_args>
   110e4:	6338      	str	r0, [r7, #48]	; 0x30

	if (rv < 0) {
   110e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   110e8:	2b00      	cmp	r3, #0
   110ea:	da01      	bge.n	110f0 <onoff_request+0x30>
		return rv;
   110ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   110ee:	e0b9      	b.n	11264 <onoff_request+0x1a4>
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   110f0:	687b      	ldr	r3, [r7, #4]
   110f2:	3314      	adds	r3, #20
   110f4:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
   110f6:	f04f 0320 	mov.w	r3, #32
   110fa:	f3ef 8211 	mrs	r2, BASEPRI
   110fe:	f383 8811 	msr	BASEPRI, r3
   11102:	f3bf 8f6f 	isb	sy
   11106:	627a      	str	r2, [r7, #36]	; 0x24
   11108:	623b      	str	r3, [r7, #32]
	return key;
   1110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	k.key = arch_irq_lock();
   1110c:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1110e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   11110:	f00b ff9a 	bl	1d048 <z_spin_lock_valid>
   11114:	4603      	mov	r3, r0
   11116:	f083 0301 	eor.w	r3, r3, #1
   1111a:	b2db      	uxtb	r3, r3
   1111c:	2b00      	cmp	r3, #0
   1111e:	d00d      	beq.n	1113c <onoff_request+0x7c>
   11120:	2381      	movs	r3, #129	; 0x81
   11122:	4a52      	ldr	r2, [pc, #328]	; (1126c <onoff_request+0x1ac>)
   11124:	4952      	ldr	r1, [pc, #328]	; (11270 <onoff_request+0x1b0>)
   11126:	4853      	ldr	r0, [pc, #332]	; (11274 <onoff_request+0x1b4>)
   11128:	f00f ff9e 	bl	21068 <printk>
   1112c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1112e:	4852      	ldr	r0, [pc, #328]	; (11278 <onoff_request+0x1b8>)
   11130:	f00f ff9a 	bl	21068 <printk>
   11134:	2181      	movs	r1, #129	; 0x81
   11136:	484d      	ldr	r0, [pc, #308]	; (1126c <onoff_request+0x1ac>)
   11138:	f011 f843 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1113c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1113e:	f00b ffbb 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   11142:	68fb      	ldr	r3, [r7, #12]
   11144:	617b      	str	r3, [r7, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11146:	687b      	ldr	r3, [r7, #4]
   11148:	8b9b      	ldrh	r3, [r3, #28]
   1114a:	f003 0307 	and.w	r3, r3, #7
   1114e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   11150:	687b      	ldr	r3, [r7, #4]
   11152:	8bdb      	ldrh	r3, [r3, #30]
   11154:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11158:	4293      	cmp	r3, r2
   1115a:	d103      	bne.n	11164 <onoff_request+0xa4>
		rv = -EAGAIN;
   1115c:	f06f 030a 	mvn.w	r3, #10
   11160:	633b      	str	r3, [r7, #48]	; 0x30
		goto out;
   11162:	e03b      	b.n	111dc <onoff_request+0x11c>
	}

	rv = state;
   11164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11166:	633b      	str	r3, [r7, #48]	; 0x30
	if (state == ONOFF_STATE_ON) {
   11168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1116a:	2b02      	cmp	r3, #2
   1116c:	d109      	bne.n	11182 <onoff_request+0xc2>
		/* Increment reference count, notify in exit */
		notify = true;
   1116e:	2301      	movs	r3, #1
   11170:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		mgr->refs += 1U;
   11174:	687b      	ldr	r3, [r7, #4]
   11176:	8bdb      	ldrh	r3, [r3, #30]
   11178:	3301      	adds	r3, #1
   1117a:	b29a      	uxth	r2, r3
   1117c:	687b      	ldr	r3, [r7, #4]
   1117e:	83da      	strh	r2, [r3, #30]
   11180:	e02c      	b.n	111dc <onoff_request+0x11c>
	} else if ((state == ONOFF_STATE_OFF)
   11182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11184:	2b00      	cmp	r3, #0
   11186:	d005      	beq.n	11194 <onoff_request+0xd4>
		   || (state == ONOFF_STATE_TO_OFF)
   11188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1118a:	2b04      	cmp	r3, #4
   1118c:	d002      	beq.n	11194 <onoff_request+0xd4>
		   || (state == ONOFF_STATE_TO_ON)) {
   1118e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11190:	2b06      	cmp	r3, #6
   11192:	d10a      	bne.n	111aa <onoff_request+0xea>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
   11194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11196:	2b00      	cmp	r3, #0
   11198:	bf0c      	ite	eq
   1119a:	2301      	moveq	r3, #1
   1119c:	2300      	movne	r3, #0
   1119e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		add_client = true;
   111a2:	2301      	movs	r3, #1
   111a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   111a8:	e018      	b.n	111dc <onoff_request+0x11c>
	} else if (state == ONOFF_STATE_RESETTING) {
   111aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   111ac:	2b05      	cmp	r3, #5
   111ae:	d103      	bne.n	111b8 <onoff_request+0xf8>
		rv = -ENOTSUP;
   111b0:	f06f 0385 	mvn.w	r3, #133	; 0x85
   111b4:	633b      	str	r3, [r7, #48]	; 0x30
   111b6:	e011      	b.n	111dc <onoff_request+0x11c>
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   111b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   111ba:	2b01      	cmp	r3, #1
   111bc:	d00b      	beq.n	111d6 <onoff_request+0x116>
   111be:	f240 13c9 	movw	r3, #457	; 0x1c9
   111c2:	4a2e      	ldr	r2, [pc, #184]	; (1127c <onoff_request+0x1bc>)
   111c4:	492e      	ldr	r1, [pc, #184]	; (11280 <onoff_request+0x1c0>)
   111c6:	482b      	ldr	r0, [pc, #172]	; (11274 <onoff_request+0x1b4>)
   111c8:	f00f ff4e 	bl	21068 <printk>
   111cc:	f240 11c9 	movw	r1, #457	; 0x1c9
   111d0:	482a      	ldr	r0, [pc, #168]	; (1127c <onoff_request+0x1bc>)
   111d2:	f010 fff6 	bl	221c2 <assert_post_action>
		rv = -EIO;
   111d6:	f06f 0304 	mvn.w	r3, #4
   111da:	633b      	str	r3, [r7, #48]	; 0x30
	}

out:
	if (add_client) {
   111dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   111e0:	2b00      	cmp	r3, #0
   111e2:	d005      	beq.n	111f0 <onoff_request+0x130>
		sys_slist_append(&mgr->clients, &cli->node);
   111e4:	687b      	ldr	r3, [r7, #4]
   111e6:	683a      	ldr	r2, [r7, #0]
   111e8:	4611      	mov	r1, r2
   111ea:	4618      	mov	r0, r3
   111ec:	f010 f824 	bl	21238 <sys_slist_append>
	}

	if (start) {
   111f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
   111f4:	2b00      	cmp	r3, #0
   111f6:	d005      	beq.n	11204 <onoff_request+0x144>
		process_event(mgr, EVT_RECHECK, key);
   111f8:	697a      	ldr	r2, [r7, #20]
   111fa:	2102      	movs	r1, #2
   111fc:	6878      	ldr	r0, [r7, #4]
   111fe:	f7ff fcfb 	bl	10bf8 <process_event>
   11202:	e02e      	b.n	11262 <onoff_request+0x1a2>
	} else {
		k_spin_unlock(&mgr->lock, key);
   11204:	687b      	ldr	r3, [r7, #4]
   11206:	3314      	adds	r3, #20
   11208:	61fb      	str	r3, [r7, #28]
   1120a:	697b      	ldr	r3, [r7, #20]
   1120c:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1120e:	69f8      	ldr	r0, [r7, #28]
   11210:	f00b ff36 	bl	1d080 <z_spin_unlock_valid>
   11214:	4603      	mov	r3, r0
   11216:	f083 0301 	eor.w	r3, r3, #1
   1121a:	b2db      	uxtb	r3, r3
   1121c:	2b00      	cmp	r3, #0
   1121e:	d00d      	beq.n	1123c <onoff_request+0x17c>
   11220:	23ac      	movs	r3, #172	; 0xac
   11222:	4a12      	ldr	r2, [pc, #72]	; (1126c <onoff_request+0x1ac>)
   11224:	4917      	ldr	r1, [pc, #92]	; (11284 <onoff_request+0x1c4>)
   11226:	4813      	ldr	r0, [pc, #76]	; (11274 <onoff_request+0x1b4>)
   11228:	f00f ff1e 	bl	21068 <printk>
   1122c:	69f9      	ldr	r1, [r7, #28]
   1122e:	4816      	ldr	r0, [pc, #88]	; (11288 <onoff_request+0x1c8>)
   11230:	f00f ff1a 	bl	21068 <printk>
   11234:	21ac      	movs	r1, #172	; 0xac
   11236:	480d      	ldr	r0, [pc, #52]	; (1126c <onoff_request+0x1ac>)
   11238:	f010 ffc3 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1123c:	693b      	ldr	r3, [r7, #16]
   1123e:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
   11240:	69bb      	ldr	r3, [r7, #24]
   11242:	f383 8811 	msr	BASEPRI, r3
   11246:	f3bf 8f6f 	isb	sy
}
   1124a:	bf00      	nop
}
   1124c:	bf00      	nop

		if (notify) {
   1124e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
   11252:	2b00      	cmp	r3, #0
   11254:	d005      	beq.n	11262 <onoff_request+0x1a2>
			notify_one(mgr, cli, state, 0);
   11256:	2300      	movs	r3, #0
   11258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1125a:	6839      	ldr	r1, [r7, #0]
   1125c:	6878      	ldr	r0, [r7, #4]
   1125e:	f010 f8e9 	bl	21434 <notify_one>
		}
	}

	return rv;
   11262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   11264:	4618      	mov	r0, r3
   11266:	3738      	adds	r7, #56	; 0x38
   11268:	46bd      	mov	sp, r7
   1126a:	bd80      	pop	{r7, pc}
   1126c:	00029580 	.word	0x00029580
   11270:	000295a8 	.word	0x000295a8
   11274:	000295c0 	.word	0x000295c0
   11278:	000295e0 	.word	0x000295e0
   1127c:	000295f8 	.word	0x000295f8
   11280:	000296dc 	.word	0x000296dc
   11284:	000296f4 	.word	0x000296f4
   11288:	0002970c 	.word	0x0002970c

0001128c <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   1128c:	b580      	push	{r7, lr}
   1128e:	b084      	sub	sp, #16
   11290:	af00      	add	r7, sp, #0
   11292:	6078      	str	r0, [r7, #4]
   11294:	6039      	str	r1, [r7, #0]
	if (mem == NULL) {
   11296:	683b      	ldr	r3, [r7, #0]
   11298:	2b00      	cmp	r3, #0
   1129a:	d044      	beq.n	11326 <sys_heap_free+0x9a>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   1129c:	687b      	ldr	r3, [r7, #4]
   1129e:	681b      	ldr	r3, [r3, #0]
   112a0:	60fb      	str	r3, [r7, #12]
	chunkid_t c = mem_to_chunkid(h, mem);
   112a2:	6839      	ldr	r1, [r7, #0]
   112a4:	68f8      	ldr	r0, [r7, #12]
   112a6:	f010 fced 	bl	21c84 <mem_to_chunkid>
   112aa:	60b8      	str	r0, [r7, #8]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   112ac:	68b9      	ldr	r1, [r7, #8]
   112ae:	68f8      	ldr	r0, [r7, #12]
   112b0:	f010 f9df 	bl	21672 <chunk_used>
   112b4:	4603      	mov	r3, r0
   112b6:	f083 0301 	eor.w	r3, r3, #1
   112ba:	b2db      	uxtb	r3, r3
   112bc:	2b00      	cmp	r3, #0
   112be:	d00d      	beq.n	112dc <sys_heap_free+0x50>
   112c0:	239a      	movs	r3, #154	; 0x9a
   112c2:	4a1b      	ldr	r2, [pc, #108]	; (11330 <sys_heap_free+0xa4>)
   112c4:	491b      	ldr	r1, [pc, #108]	; (11334 <sys_heap_free+0xa8>)
   112c6:	481c      	ldr	r0, [pc, #112]	; (11338 <sys_heap_free+0xac>)
   112c8:	f00f fece 	bl	21068 <printk>
   112cc:	6839      	ldr	r1, [r7, #0]
   112ce:	481b      	ldr	r0, [pc, #108]	; (1133c <sys_heap_free+0xb0>)
   112d0:	f00f feca 	bl	21068 <printk>
   112d4:	219a      	movs	r1, #154	; 0x9a
   112d6:	4816      	ldr	r0, [pc, #88]	; (11330 <sys_heap_free+0xa4>)
   112d8:	f010 ff73 	bl	221c2 <assert_post_action>
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   112dc:	68b9      	ldr	r1, [r7, #8]
   112de:	68f8      	ldr	r0, [r7, #12]
   112e0:	f010 fa92 	bl	21808 <right_chunk>
   112e4:	4603      	mov	r3, r0
   112e6:	4619      	mov	r1, r3
   112e8:	68f8      	ldr	r0, [r7, #12]
   112ea:	f010 fa7c 	bl	217e6 <left_chunk>
   112ee:	4602      	mov	r2, r0
   112f0:	68bb      	ldr	r3, [r7, #8]
   112f2:	4293      	cmp	r3, r2
   112f4:	d00d      	beq.n	11312 <sys_heap_free+0x86>
   112f6:	23a2      	movs	r3, #162	; 0xa2
   112f8:	4a0d      	ldr	r2, [pc, #52]	; (11330 <sys_heap_free+0xa4>)
   112fa:	4911      	ldr	r1, [pc, #68]	; (11340 <sys_heap_free+0xb4>)
   112fc:	480e      	ldr	r0, [pc, #56]	; (11338 <sys_heap_free+0xac>)
   112fe:	f00f feb3 	bl	21068 <printk>
   11302:	6839      	ldr	r1, [r7, #0]
   11304:	480f      	ldr	r0, [pc, #60]	; (11344 <sys_heap_free+0xb8>)
   11306:	f00f feaf 	bl	21068 <printk>
   1130a:	21a2      	movs	r1, #162	; 0xa2
   1130c:	4808      	ldr	r0, [pc, #32]	; (11330 <sys_heap_free+0xa4>)
   1130e:	f010 ff58 	bl	221c2 <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
   11312:	2200      	movs	r2, #0
   11314:	68b9      	ldr	r1, [r7, #8]
   11316:	68f8      	ldr	r0, [r7, #12]
   11318:	f010 f9d1 	bl	216be <set_chunk_used>
	free_chunk(h, c);
   1131c:	68b9      	ldr	r1, [r7, #8]
   1131e:	68f8      	ldr	r0, [r7, #12]
   11320:	f010 fc5a 	bl	21bd8 <free_chunk>
   11324:	e000      	b.n	11328 <sys_heap_free+0x9c>
		return; /* ISO C free() semantics */
   11326:	bf00      	nop
}
   11328:	3710      	adds	r7, #16
   1132a:	46bd      	mov	sp, r7
   1132c:	bd80      	pop	{r7, pc}
   1132e:	bf00      	nop
   11330:	000297b0 	.word	0x000297b0
   11334:	000297d4 	.word	0x000297d4
   11338:	000297e8 	.word	0x000297e8
   1133c:	00029808 	.word	0x00029808
   11340:	00029840 	.word	0x00029840
   11344:	00029868 	.word	0x00029868

00011348 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   11348:	b580      	push	{r7, lr}
   1134a:	b08e      	sub	sp, #56	; 0x38
   1134c:	af00      	add	r7, sp, #0
   1134e:	60f8      	str	r0, [r7, #12]
   11350:	60b9      	str	r1, [r7, #8]
   11352:	607a      	str	r2, [r7, #4]
	struct z_heap *h = heap->heap;
   11354:	68fb      	ldr	r3, [r7, #12]
   11356:	681b      	ldr	r3, [r3, #0]
   11358:	62fb      	str	r3, [r7, #44]	; 0x2c
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1135a:	68bb      	ldr	r3, [r7, #8]
   1135c:	425b      	negs	r3, r3
   1135e:	68ba      	ldr	r2, [r7, #8]
   11360:	4013      	ands	r3, r2
   11362:	633b      	str	r3, [r7, #48]	; 0x30
	if (align != rew) {
   11364:	68ba      	ldr	r2, [r7, #8]
   11366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11368:	429a      	cmp	r2, r3
   1136a:	d012      	beq.n	11392 <sys_heap_aligned_alloc+0x4a>
		align -= rew;
   1136c:	68ba      	ldr	r2, [r7, #8]
   1136e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11370:	1ad3      	subs	r3, r2, r3
   11372:	60bb      	str	r3, [r7, #8]
		gap = MIN(rew, chunk_header_bytes(h));
   11374:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11376:	f010 fa83 	bl	21880 <chunk_header_bytes>
   1137a:	4602      	mov	r2, r0
   1137c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1137e:	4293      	cmp	r3, r2
   11380:	d304      	bcc.n	1138c <sys_heap_aligned_alloc+0x44>
   11382:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11384:	f010 fa7c 	bl	21880 <chunk_header_bytes>
   11388:	4603      	mov	r3, r0
   1138a:	e000      	b.n	1138e <sys_heap_aligned_alloc+0x46>
   1138c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1138e:	637b      	str	r3, [r7, #52]	; 0x34
   11390:	e012      	b.n	113b8 <sys_heap_aligned_alloc+0x70>
	} else {
		if (align <= chunk_header_bytes(h)) {
   11392:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11394:	f010 fa74 	bl	21880 <chunk_header_bytes>
   11398:	4602      	mov	r2, r0
   1139a:	68bb      	ldr	r3, [r7, #8]
   1139c:	4293      	cmp	r3, r2
   1139e:	d805      	bhi.n	113ac <sys_heap_aligned_alloc+0x64>
			return sys_heap_alloc(heap, bytes);
   113a0:	6879      	ldr	r1, [r7, #4]
   113a2:	68f8      	ldr	r0, [r7, #12]
   113a4:	f010 fce9 	bl	21d7a <sys_heap_alloc>
   113a8:	4603      	mov	r3, r0
   113aa:	e084      	b.n	114b6 <sys_heap_aligned_alloc+0x16e>
		}
		rew = 0;
   113ac:	2300      	movs	r3, #0
   113ae:	633b      	str	r3, [r7, #48]	; 0x30
		gap = chunk_header_bytes(h);
   113b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   113b2:	f010 fa65 	bl	21880 <chunk_header_bytes>
   113b6:	6378      	str	r0, [r7, #52]	; 0x34
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   113b8:	68bb      	ldr	r3, [r7, #8]
   113ba:	1e5a      	subs	r2, r3, #1
   113bc:	68bb      	ldr	r3, [r7, #8]
   113be:	4013      	ands	r3, r2
   113c0:	2b00      	cmp	r3, #0
   113c2:	d00e      	beq.n	113e2 <sys_heap_aligned_alloc+0x9a>
   113c4:	f240 130d 	movw	r3, #269	; 0x10d
   113c8:	4a3d      	ldr	r2, [pc, #244]	; (114c0 <sys_heap_aligned_alloc+0x178>)
   113ca:	493e      	ldr	r1, [pc, #248]	; (114c4 <sys_heap_aligned_alloc+0x17c>)
   113cc:	483e      	ldr	r0, [pc, #248]	; (114c8 <sys_heap_aligned_alloc+0x180>)
   113ce:	f00f fe4b 	bl	21068 <printk>
   113d2:	483e      	ldr	r0, [pc, #248]	; (114cc <sys_heap_aligned_alloc+0x184>)
   113d4:	f00f fe48 	bl	21068 <printk>
   113d8:	f240 110d 	movw	r1, #269	; 0x10d
   113dc:	4838      	ldr	r0, [pc, #224]	; (114c0 <sys_heap_aligned_alloc+0x178>)
   113de:	f010 fef0 	bl	221c2 <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   113e2:	687b      	ldr	r3, [r7, #4]
   113e4:	2b00      	cmp	r3, #0
   113e6:	d006      	beq.n	113f6 <sys_heap_aligned_alloc+0xae>
   113e8:	6879      	ldr	r1, [r7, #4]
   113ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   113ec:	f010 faac 	bl	21948 <size_too_big>
   113f0:	4603      	mov	r3, r0
   113f2:	2b00      	cmp	r3, #0
   113f4:	d001      	beq.n	113fa <sys_heap_aligned_alloc+0xb2>
		return NULL;
   113f6:	2300      	movs	r3, #0
   113f8:	e05d      	b.n	114b6 <sys_heap_aligned_alloc+0x16e>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   113fa:	687a      	ldr	r2, [r7, #4]
   113fc:	68bb      	ldr	r3, [r7, #8]
   113fe:	441a      	add	r2, r3
   11400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   11402:	1ad3      	subs	r3, r2, r3
   11404:	4619      	mov	r1, r3
   11406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11408:	f010 fa68 	bl	218dc <bytes_to_chunksz>
   1140c:	62b8      	str	r0, [r7, #40]	; 0x28
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1140e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11410:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11412:	f010 fc50 	bl	21cb6 <alloc_chunk>
   11416:	6278      	str	r0, [r7, #36]	; 0x24

	if (c0 == 0) {
   11418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1141a:	2b00      	cmp	r3, #0
   1141c:	d101      	bne.n	11422 <sys_heap_aligned_alloc+0xda>
		return NULL;
   1141e:	2300      	movs	r3, #0
   11420:	e049      	b.n	114b6 <sys_heap_aligned_alloc+0x16e>
	}
	uint8_t *mem = chunk_mem(h, c0);
   11422:	6a79      	ldr	r1, [r7, #36]	; 0x24
   11424:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11426:	f010 faa2 	bl	2196e <chunk_mem>
   1142a:	6238      	str	r0, [r7, #32]

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1142c:	6a3a      	ldr	r2, [r7, #32]
   1142e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11430:	4413      	add	r3, r2
   11432:	461a      	mov	r2, r3
   11434:	68bb      	ldr	r3, [r7, #8]
   11436:	4413      	add	r3, r2
   11438:	1e5a      	subs	r2, r3, #1
   1143a:	68bb      	ldr	r3, [r7, #8]
   1143c:	425b      	negs	r3, r3
   1143e:	401a      	ands	r2, r3
   11440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   11442:	1ad3      	subs	r3, r2, r3
   11444:	623b      	str	r3, [r7, #32]
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11446:	6a3a      	ldr	r2, [r7, #32]
   11448:	687b      	ldr	r3, [r7, #4]
   1144a:	4413      	add	r3, r2
   1144c:	3307      	adds	r3, #7
   1144e:	f023 0307 	bic.w	r3, r3, #7
   11452:	61fb      	str	r3, [r7, #28]

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   11454:	6a39      	ldr	r1, [r7, #32]
   11456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11458:	f010 fc14 	bl	21c84 <mem_to_chunkid>
   1145c:	61b8      	str	r0, [r7, #24]
	chunkid_t c_end = end - chunk_buf(h);
   1145e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11460:	f010 f8af 	bl	215c2 <chunk_buf>
   11464:	4602      	mov	r2, r0
   11466:	69fb      	ldr	r3, [r7, #28]
   11468:	1a9b      	subs	r3, r3, r2
   1146a:	10db      	asrs	r3, r3, #3
   1146c:	617b      	str	r3, [r7, #20]
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   1146e:	69ba      	ldr	r2, [r7, #24]
   11470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11472:	429a      	cmp	r2, r3
   11474:	d908      	bls.n	11488 <sys_heap_aligned_alloc+0x140>
		split_chunks(h, c0, c);
   11476:	69ba      	ldr	r2, [r7, #24]
   11478:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1147a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1147c:	f010 fb57 	bl	21b2e <split_chunks>
		free_list_add(h, c0);
   11480:	6a79      	ldr	r1, [r7, #36]	; 0x24
   11482:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   11484:	f010 fb31 	bl	21aea <free_list_add>
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   11488:	69b9      	ldr	r1, [r7, #24]
   1148a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1148c:	f010 f9bc 	bl	21808 <right_chunk>
   11490:	4602      	mov	r2, r0
   11492:	697b      	ldr	r3, [r7, #20]
   11494:	4293      	cmp	r3, r2
   11496:	d208      	bcs.n	114aa <sys_heap_aligned_alloc+0x162>
		split_chunks(h, c, c_end);
   11498:	697a      	ldr	r2, [r7, #20]
   1149a:	69b9      	ldr	r1, [r7, #24]
   1149c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1149e:	f010 fb46 	bl	21b2e <split_chunks>
		free_list_add(h, c_end);
   114a2:	6979      	ldr	r1, [r7, #20]
   114a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   114a6:	f010 fb20 	bl	21aea <free_list_add>
	}

	set_chunk_used(h, c, true);
   114aa:	2201      	movs	r2, #1
   114ac:	69b9      	ldr	r1, [r7, #24]
   114ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   114b0:	f010 f905 	bl	216be <set_chunk_used>
	return mem;
   114b4:	6a3b      	ldr	r3, [r7, #32]
}
   114b6:	4618      	mov	r0, r3
   114b8:	3738      	adds	r7, #56	; 0x38
   114ba:	46bd      	mov	sp, r7
   114bc:	bd80      	pop	{r7, pc}
   114be:	bf00      	nop
   114c0:	000297b0 	.word	0x000297b0
   114c4:	000298a4 	.word	0x000298a4
   114c8:	000297e8 	.word	0x000297e8
   114cc:	000298c0 	.word	0x000298c0

000114d0 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   114d0:	b580      	push	{r7, lr}
   114d2:	b08c      	sub	sp, #48	; 0x30
   114d4:	af00      	add	r7, sp, #0
   114d6:	60f8      	str	r0, [r7, #12]
   114d8:	60b9      	str	r1, [r7, #8]
   114da:	607a      	str	r2, [r7, #4]
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   114dc:	6878      	ldr	r0, [r7, #4]
   114de:	f010 f9e0 	bl	218a2 <heap_footer_bytes>
   114e2:	4602      	mov	r2, r0
   114e4:	687b      	ldr	r3, [r7, #4]
   114e6:	4293      	cmp	r3, r2
   114e8:	d80e      	bhi.n	11508 <sys_heap_init+0x38>
   114ea:	f44f 73c1 	mov.w	r3, #386	; 0x182
   114ee:	4a58      	ldr	r2, [pc, #352]	; (11650 <sys_heap_init+0x180>)
   114f0:	4958      	ldr	r1, [pc, #352]	; (11654 <sys_heap_init+0x184>)
   114f2:	4859      	ldr	r0, [pc, #356]	; (11658 <sys_heap_init+0x188>)
   114f4:	f00f fdb8 	bl	21068 <printk>
   114f8:	4858      	ldr	r0, [pc, #352]	; (1165c <sys_heap_init+0x18c>)
   114fa:	f00f fdb5 	bl	21068 <printk>
   114fe:	f44f 71c1 	mov.w	r1, #386	; 0x182
   11502:	4853      	ldr	r0, [pc, #332]	; (11650 <sys_heap_init+0x180>)
   11504:	f010 fe5d 	bl	221c2 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
   11508:	6878      	ldr	r0, [r7, #4]
   1150a:	f010 f9ca 	bl	218a2 <heap_footer_bytes>
   1150e:	4602      	mov	r2, r0
   11510:	687b      	ldr	r3, [r7, #4]
   11512:	1a9b      	subs	r3, r3, r2
   11514:	607b      	str	r3, [r7, #4]

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11516:	68bb      	ldr	r3, [r7, #8]
   11518:	3307      	adds	r3, #7
   1151a:	f023 0307 	bic.w	r3, r3, #7
   1151e:	62bb      	str	r3, [r7, #40]	; 0x28
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11520:	68ba      	ldr	r2, [r7, #8]
   11522:	687b      	ldr	r3, [r7, #4]
   11524:	4413      	add	r3, r2
   11526:	f023 0307 	bic.w	r3, r3, #7
   1152a:	627b      	str	r3, [r7, #36]	; 0x24
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1152c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1152e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11530:	1ad3      	subs	r3, r2, r3
   11532:	08db      	lsrs	r3, r3, #3
   11534:	623b      	str	r3, [r7, #32]

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   11536:	2010      	movs	r0, #16
   11538:	f010 f9c4 	bl	218c4 <chunksz>
   1153c:	4602      	mov	r2, r0
   1153e:	6a3b      	ldr	r3, [r7, #32]
   11540:	4293      	cmp	r3, r2
   11542:	d80e      	bhi.n	11562 <sys_heap_init+0x92>
   11544:	f240 138b 	movw	r3, #395	; 0x18b
   11548:	4a41      	ldr	r2, [pc, #260]	; (11650 <sys_heap_init+0x180>)
   1154a:	4945      	ldr	r1, [pc, #276]	; (11660 <sys_heap_init+0x190>)
   1154c:	4842      	ldr	r0, [pc, #264]	; (11658 <sys_heap_init+0x188>)
   1154e:	f00f fd8b 	bl	21068 <printk>
   11552:	4842      	ldr	r0, [pc, #264]	; (1165c <sys_heap_init+0x18c>)
   11554:	f00f fd88 	bl	21068 <printk>
   11558:	f240 118b 	movw	r1, #395	; 0x18b
   1155c:	483c      	ldr	r0, [pc, #240]	; (11650 <sys_heap_init+0x180>)
   1155e:	f010 fe30 	bl	221c2 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
   11562:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11564:	61fb      	str	r3, [r7, #28]
	heap->heap = h;
   11566:	68fb      	ldr	r3, [r7, #12]
   11568:	69fa      	ldr	r2, [r7, #28]
   1156a:	601a      	str	r2, [r3, #0]
	h->end_chunk = heap_sz;
   1156c:	69fb      	ldr	r3, [r7, #28]
   1156e:	6a3a      	ldr	r2, [r7, #32]
   11570:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   11572:	69fb      	ldr	r3, [r7, #28]
   11574:	2200      	movs	r2, #0
   11576:	60da      	str	r2, [r3, #12]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   11578:	6a39      	ldr	r1, [r7, #32]
   1157a:	69f8      	ldr	r0, [r7, #28]
   1157c:	f010 f9ce 	bl	2191c <bucket_idx>
   11580:	4603      	mov	r3, r0
   11582:	3301      	adds	r3, #1
   11584:	61bb      	str	r3, [r7, #24]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   11586:	69bb      	ldr	r3, [r7, #24]
   11588:	3304      	adds	r3, #4
   1158a:	009b      	lsls	r3, r3, #2
   1158c:	4618      	mov	r0, r3
   1158e:	f010 f999 	bl	218c4 <chunksz>
   11592:	6178      	str	r0, [r7, #20]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   11594:	69f8      	ldr	r0, [r7, #28]
   11596:	f010 f9b4 	bl	21902 <min_chunk_size>
   1159a:	4602      	mov	r2, r0
   1159c:	697b      	ldr	r3, [r7, #20]
   1159e:	4413      	add	r3, r2
   115a0:	6a3a      	ldr	r2, [r7, #32]
   115a2:	429a      	cmp	r2, r3
   115a4:	d20e      	bcs.n	115c4 <sys_heap_init+0xf4>
   115a6:	f44f 73cb 	mov.w	r3, #406	; 0x196
   115aa:	4a29      	ldr	r2, [pc, #164]	; (11650 <sys_heap_init+0x180>)
   115ac:	492d      	ldr	r1, [pc, #180]	; (11664 <sys_heap_init+0x194>)
   115ae:	482a      	ldr	r0, [pc, #168]	; (11658 <sys_heap_init+0x188>)
   115b0:	f00f fd5a 	bl	21068 <printk>
   115b4:	4829      	ldr	r0, [pc, #164]	; (1165c <sys_heap_init+0x18c>)
   115b6:	f00f fd57 	bl	21068 <printk>
   115ba:	f44f 71cb 	mov.w	r1, #406	; 0x196
   115be:	4824      	ldr	r0, [pc, #144]	; (11650 <sys_heap_init+0x180>)
   115c0:	f010 fdff 	bl	221c2 <assert_post_action>

	for (int i = 0; i < nb_buckets; i++) {
   115c4:	2300      	movs	r3, #0
   115c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   115c8:	e008      	b.n	115dc <sys_heap_init+0x10c>
		h->buckets[i].next = 0;
   115ca:	69fb      	ldr	r3, [r7, #28]
   115cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   115ce:	3204      	adds	r2, #4
   115d0:	2100      	movs	r1, #0
   115d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   115d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   115d8:	3301      	adds	r3, #1
   115da:	62fb      	str	r3, [r7, #44]	; 0x2c
   115dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   115de:	69bb      	ldr	r3, [r7, #24]
   115e0:	429a      	cmp	r2, r3
   115e2:	dbf2      	blt.n	115ca <sys_heap_init+0xfa>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   115e4:	697a      	ldr	r2, [r7, #20]
   115e6:	2100      	movs	r1, #0
   115e8:	69f8      	ldr	r0, [r7, #28]
   115ea:	f010 f8ad 	bl	21748 <set_chunk_size>
	set_left_chunk_size(h, 0, 0);
   115ee:	2200      	movs	r2, #0
   115f0:	2100      	movs	r1, #0
   115f2:	69f8      	ldr	r0, [r7, #28]
   115f4:	f010 f918 	bl	21828 <set_left_chunk_size>
	set_chunk_used(h, 0, true);
   115f8:	2201      	movs	r2, #1
   115fa:	2100      	movs	r1, #0
   115fc:	69f8      	ldr	r0, [r7, #28]
   115fe:	f010 f85e 	bl	216be <set_chunk_used>

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   11602:	6a3a      	ldr	r2, [r7, #32]
   11604:	697b      	ldr	r3, [r7, #20]
   11606:	1ad3      	subs	r3, r2, r3
   11608:	461a      	mov	r2, r3
   1160a:	6979      	ldr	r1, [r7, #20]
   1160c:	69f8      	ldr	r0, [r7, #28]
   1160e:	f010 f89b 	bl	21748 <set_chunk_size>
	set_left_chunk_size(h, chunk0_size, chunk0_size);
   11612:	697a      	ldr	r2, [r7, #20]
   11614:	6979      	ldr	r1, [r7, #20]
   11616:	69f8      	ldr	r0, [r7, #28]
   11618:	f010 f906 	bl	21828 <set_left_chunk_size>

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1161c:	2200      	movs	r2, #0
   1161e:	6a39      	ldr	r1, [r7, #32]
   11620:	69f8      	ldr	r0, [r7, #28]
   11622:	f010 f891 	bl	21748 <set_chunk_size>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
   11626:	6a3a      	ldr	r2, [r7, #32]
   11628:	697b      	ldr	r3, [r7, #20]
   1162a:	1ad3      	subs	r3, r2, r3
   1162c:	461a      	mov	r2, r3
   1162e:	6a39      	ldr	r1, [r7, #32]
   11630:	69f8      	ldr	r0, [r7, #28]
   11632:	f010 f8f9 	bl	21828 <set_left_chunk_size>
	set_chunk_used(h, heap_sz, true);
   11636:	2201      	movs	r2, #1
   11638:	6a39      	ldr	r1, [r7, #32]
   1163a:	69f8      	ldr	r0, [r7, #28]
   1163c:	f010 f83f 	bl	216be <set_chunk_used>

	free_list_add(h, chunk0_size);
   11640:	6979      	ldr	r1, [r7, #20]
   11642:	69f8      	ldr	r0, [r7, #28]
   11644:	f010 fa51 	bl	21aea <free_list_add>
}
   11648:	bf00      	nop
   1164a:	3730      	adds	r7, #48	; 0x30
   1164c:	46bd      	mov	sp, r7
   1164e:	bd80      	pop	{r7, pc}
   11650:	000297b0 	.word	0x000297b0
   11654:	000298e0 	.word	0x000298e0
   11658:	000297e8 	.word	0x000297e8
   1165c:	00029904 	.word	0x00029904
   11660:	00029920 	.word	0x00029920
   11664:	0002994c 	.word	0x0002994c

00011668 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
   11668:	b480      	push	{r7}
   1166a:	b085      	sub	sp, #20
   1166c:	af00      	add	r7, sp, #0
   1166e:	6078      	str	r0, [r7, #4]
   11670:	6039      	str	r1, [r7, #0]
	bool loop = true;
   11672:	2301      	movs	r3, #1
   11674:	73fb      	strb	r3, [r7, #15]

	do {
		switch (*sp) {
   11676:	683b      	ldr	r3, [r7, #0]
   11678:	781b      	ldrb	r3, [r3, #0]
   1167a:	3b20      	subs	r3, #32
   1167c:	2b10      	cmp	r3, #16
   1167e:	d843      	bhi.n	11708 <extract_flags+0xa0>
   11680:	a201      	add	r2, pc, #4	; (adr r2, 11688 <extract_flags+0x20>)
   11682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11686:	bf00      	nop
   11688:	000116e5 	.word	0x000116e5
   1168c:	00011709 	.word	0x00011709
   11690:	00011709 	.word	0x00011709
   11694:	000116f1 	.word	0x000116f1
   11698:	00011709 	.word	0x00011709
   1169c:	00011709 	.word	0x00011709
   116a0:	00011709 	.word	0x00011709
   116a4:	00011709 	.word	0x00011709
   116a8:	00011709 	.word	0x00011709
   116ac:	00011709 	.word	0x00011709
   116b0:	00011709 	.word	0x00011709
   116b4:	000116d9 	.word	0x000116d9
   116b8:	00011709 	.word	0x00011709
   116bc:	000116cd 	.word	0x000116cd
   116c0:	00011709 	.word	0x00011709
   116c4:	00011709 	.word	0x00011709
   116c8:	000116fd 	.word	0x000116fd
		case '-':
			conv->flag_dash = true;
   116cc:	687a      	ldr	r2, [r7, #4]
   116ce:	7813      	ldrb	r3, [r2, #0]
   116d0:	f043 0304 	orr.w	r3, r3, #4
   116d4:	7013      	strb	r3, [r2, #0]
			break;
   116d6:	e019      	b.n	1170c <extract_flags+0xa4>
		case '+':
			conv->flag_plus = true;
   116d8:	687a      	ldr	r2, [r7, #4]
   116da:	7813      	ldrb	r3, [r2, #0]
   116dc:	f043 0308 	orr.w	r3, r3, #8
   116e0:	7013      	strb	r3, [r2, #0]
			break;
   116e2:	e013      	b.n	1170c <extract_flags+0xa4>
		case ' ':
			conv->flag_space = true;
   116e4:	687a      	ldr	r2, [r7, #4]
   116e6:	7813      	ldrb	r3, [r2, #0]
   116e8:	f043 0310 	orr.w	r3, r3, #16
   116ec:	7013      	strb	r3, [r2, #0]
			break;
   116ee:	e00d      	b.n	1170c <extract_flags+0xa4>
		case '#':
			conv->flag_hash = true;
   116f0:	687a      	ldr	r2, [r7, #4]
   116f2:	7813      	ldrb	r3, [r2, #0]
   116f4:	f043 0320 	orr.w	r3, r3, #32
   116f8:	7013      	strb	r3, [r2, #0]
			break;
   116fa:	e007      	b.n	1170c <extract_flags+0xa4>
		case '0':
			conv->flag_zero = true;
   116fc:	687a      	ldr	r2, [r7, #4]
   116fe:	7813      	ldrb	r3, [r2, #0]
   11700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11704:	7013      	strb	r3, [r2, #0]
			break;
   11706:	e001      	b.n	1170c <extract_flags+0xa4>
		default:
			loop = false;
   11708:	2300      	movs	r3, #0
   1170a:	73fb      	strb	r3, [r7, #15]
		}
		if (loop) {
   1170c:	7bfb      	ldrb	r3, [r7, #15]
   1170e:	2b00      	cmp	r3, #0
   11710:	d002      	beq.n	11718 <extract_flags+0xb0>
			++sp;
   11712:	683b      	ldr	r3, [r7, #0]
   11714:	3301      	adds	r3, #1
   11716:	603b      	str	r3, [r7, #0]
		}
	} while (loop);
   11718:	7bfb      	ldrb	r3, [r7, #15]
   1171a:	2b00      	cmp	r3, #0
   1171c:	d1ab      	bne.n	11676 <extract_flags+0xe>

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
   1171e:	687b      	ldr	r3, [r7, #4]
   11720:	781b      	ldrb	r3, [r3, #0]
   11722:	f003 0340 	and.w	r3, r3, #64	; 0x40
   11726:	b2db      	uxtb	r3, r3
   11728:	2b00      	cmp	r3, #0
   1172a:	d00b      	beq.n	11744 <extract_flags+0xdc>
   1172c:	687b      	ldr	r3, [r7, #4]
   1172e:	781b      	ldrb	r3, [r3, #0]
   11730:	f003 0304 	and.w	r3, r3, #4
   11734:	b2db      	uxtb	r3, r3
   11736:	2b00      	cmp	r3, #0
   11738:	d004      	beq.n	11744 <extract_flags+0xdc>
		conv->flag_zero = false;
   1173a:	687a      	ldr	r2, [r7, #4]
   1173c:	7813      	ldrb	r3, [r2, #0]
   1173e:	f36f 1386 	bfc	r3, #6, #1
   11742:	7013      	strb	r3, [r2, #0]
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
   11744:	683b      	ldr	r3, [r7, #0]
}
   11746:	4618      	mov	r0, r3
   11748:	3714      	adds	r7, #20
   1174a:	46bd      	mov	sp, r7
   1174c:	bc80      	pop	{r7}
   1174e:	4770      	bx	lr

00011750 <extract_length>:
 *
 * @return a pointer the first character that follows the precision.
 */
static inline const char *extract_length(struct conversion *conv,
					 const char *sp)
{
   11750:	b480      	push	{r7}
   11752:	b083      	sub	sp, #12
   11754:	af00      	add	r7, sp, #0
   11756:	6078      	str	r0, [r7, #4]
   11758:	6039      	str	r1, [r7, #0]
	switch (*sp) {
   1175a:	683b      	ldr	r3, [r7, #0]
   1175c:	781b      	ldrb	r3, [r3, #0]
   1175e:	3b4c      	subs	r3, #76	; 0x4c
   11760:	2b2e      	cmp	r3, #46	; 0x2e
   11762:	f200 80be 	bhi.w	118e2 <extract_length+0x192>
   11766:	a201      	add	r2, pc, #4	; (adr r2, 1176c <extract_length+0x1c>)
   11768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1176c:	000118c5 	.word	0x000118c5
   11770:	000118e3 	.word	0x000118e3
   11774:	000118e3 	.word	0x000118e3
   11778:	000118e3 	.word	0x000118e3
   1177c:	000118e3 	.word	0x000118e3
   11780:	000118e3 	.word	0x000118e3
   11784:	000118e3 	.word	0x000118e3
   11788:	000118e3 	.word	0x000118e3
   1178c:	000118e3 	.word	0x000118e3
   11790:	000118e3 	.word	0x000118e3
   11794:	000118e3 	.word	0x000118e3
   11798:	000118e3 	.word	0x000118e3
   1179c:	000118e3 	.word	0x000118e3
   117a0:	000118e3 	.word	0x000118e3
   117a4:	000118e3 	.word	0x000118e3
   117a8:	000118e3 	.word	0x000118e3
   117ac:	000118e3 	.word	0x000118e3
   117b0:	000118e3 	.word	0x000118e3
   117b4:	000118e3 	.word	0x000118e3
   117b8:	000118e3 	.word	0x000118e3
   117bc:	000118e3 	.word	0x000118e3
   117c0:	000118e3 	.word	0x000118e3
   117c4:	000118e3 	.word	0x000118e3
   117c8:	000118e3 	.word	0x000118e3
   117cc:	000118e3 	.word	0x000118e3
   117d0:	000118e3 	.word	0x000118e3
   117d4:	000118e3 	.word	0x000118e3
   117d8:	000118e3 	.word	0x000118e3
   117dc:	00011829 	.word	0x00011829
   117e0:	000118e3 	.word	0x000118e3
   117e4:	00011889 	.word	0x00011889
   117e8:	000118e3 	.word	0x000118e3
   117ec:	00011859 	.word	0x00011859
   117f0:	000118e3 	.word	0x000118e3
   117f4:	000118e3 	.word	0x000118e3
   117f8:	000118e3 	.word	0x000118e3
   117fc:	000118e3 	.word	0x000118e3
   11800:	000118e3 	.word	0x000118e3
   11804:	000118e3 	.word	0x000118e3
   11808:	000118e3 	.word	0x000118e3
   1180c:	000118b1 	.word	0x000118b1
   11810:	000118e3 	.word	0x000118e3
   11814:	000118e3 	.word	0x000118e3
   11818:	000118e3 	.word	0x000118e3
   1181c:	000118e3 	.word	0x000118e3
   11820:	000118e3 	.word	0x000118e3
   11824:	0001189d 	.word	0x0001189d
	case 'h':
		if (*++sp == 'h') {
   11828:	683b      	ldr	r3, [r7, #0]
   1182a:	3301      	adds	r3, #1
   1182c:	603b      	str	r3, [r7, #0]
   1182e:	683b      	ldr	r3, [r7, #0]
   11830:	781b      	ldrb	r3, [r3, #0]
   11832:	2b68      	cmp	r3, #104	; 0x68
   11834:	d109      	bne.n	1184a <extract_length+0xfa>
			conv->length_mod = LENGTH_HH;
   11836:	687a      	ldr	r2, [r7, #4]
   11838:	7853      	ldrb	r3, [r2, #1]
   1183a:	2101      	movs	r1, #1
   1183c:	f361 03c6 	bfi	r3, r1, #3, #4
   11840:	7053      	strb	r3, [r2, #1]
			++sp;
   11842:	683b      	ldr	r3, [r7, #0]
   11844:	3301      	adds	r3, #1
   11846:	603b      	str	r3, [r7, #0]
		} else {
			conv->length_mod = LENGTH_H;
		}
		break;
   11848:	e051      	b.n	118ee <extract_length+0x19e>
			conv->length_mod = LENGTH_H;
   1184a:	687a      	ldr	r2, [r7, #4]
   1184c:	7853      	ldrb	r3, [r2, #1]
   1184e:	2102      	movs	r1, #2
   11850:	f361 03c6 	bfi	r3, r1, #3, #4
   11854:	7053      	strb	r3, [r2, #1]
		break;
   11856:	e04a      	b.n	118ee <extract_length+0x19e>
	case 'l':
		if (*++sp == 'l') {
   11858:	683b      	ldr	r3, [r7, #0]
   1185a:	3301      	adds	r3, #1
   1185c:	603b      	str	r3, [r7, #0]
   1185e:	683b      	ldr	r3, [r7, #0]
   11860:	781b      	ldrb	r3, [r3, #0]
   11862:	2b6c      	cmp	r3, #108	; 0x6c
   11864:	d109      	bne.n	1187a <extract_length+0x12a>
			conv->length_mod = LENGTH_LL;
   11866:	687a      	ldr	r2, [r7, #4]
   11868:	7853      	ldrb	r3, [r2, #1]
   1186a:	2104      	movs	r1, #4
   1186c:	f361 03c6 	bfi	r3, r1, #3, #4
   11870:	7053      	strb	r3, [r2, #1]
			++sp;
   11872:	683b      	ldr	r3, [r7, #0]
   11874:	3301      	adds	r3, #1
   11876:	603b      	str	r3, [r7, #0]
		} else {
			conv->length_mod = LENGTH_L;
		}
		break;
   11878:	e039      	b.n	118ee <extract_length+0x19e>
			conv->length_mod = LENGTH_L;
   1187a:	687a      	ldr	r2, [r7, #4]
   1187c:	7853      	ldrb	r3, [r2, #1]
   1187e:	2103      	movs	r1, #3
   11880:	f361 03c6 	bfi	r3, r1, #3, #4
   11884:	7053      	strb	r3, [r2, #1]
		break;
   11886:	e032      	b.n	118ee <extract_length+0x19e>
	case 'j':
		conv->length_mod = LENGTH_J;
   11888:	687a      	ldr	r2, [r7, #4]
   1188a:	7853      	ldrb	r3, [r2, #1]
   1188c:	2105      	movs	r1, #5
   1188e:	f361 03c6 	bfi	r3, r1, #3, #4
   11892:	7053      	strb	r3, [r2, #1]
		++sp;
   11894:	683b      	ldr	r3, [r7, #0]
   11896:	3301      	adds	r3, #1
   11898:	603b      	str	r3, [r7, #0]
		break;
   1189a:	e028      	b.n	118ee <extract_length+0x19e>
	case 'z':
		conv->length_mod = LENGTH_Z;
   1189c:	687a      	ldr	r2, [r7, #4]
   1189e:	7853      	ldrb	r3, [r2, #1]
   118a0:	2106      	movs	r1, #6
   118a2:	f361 03c6 	bfi	r3, r1, #3, #4
   118a6:	7053      	strb	r3, [r2, #1]
		++sp;
   118a8:	683b      	ldr	r3, [r7, #0]
   118aa:	3301      	adds	r3, #1
   118ac:	603b      	str	r3, [r7, #0]
		break;
   118ae:	e01e      	b.n	118ee <extract_length+0x19e>
	case 't':
		conv->length_mod = LENGTH_T;
   118b0:	687a      	ldr	r2, [r7, #4]
   118b2:	7853      	ldrb	r3, [r2, #1]
   118b4:	2107      	movs	r1, #7
   118b6:	f361 03c6 	bfi	r3, r1, #3, #4
   118ba:	7053      	strb	r3, [r2, #1]
		++sp;
   118bc:	683b      	ldr	r3, [r7, #0]
   118be:	3301      	adds	r3, #1
   118c0:	603b      	str	r3, [r7, #0]
		break;
   118c2:	e014      	b.n	118ee <extract_length+0x19e>
	case 'L':
		conv->length_mod = LENGTH_UPPER_L;
   118c4:	687a      	ldr	r2, [r7, #4]
   118c6:	7853      	ldrb	r3, [r2, #1]
   118c8:	2108      	movs	r1, #8
   118ca:	f361 03c6 	bfi	r3, r1, #3, #4
   118ce:	7053      	strb	r3, [r2, #1]
		++sp;
   118d0:	683b      	ldr	r3, [r7, #0]
   118d2:	3301      	adds	r3, #1
   118d4:	603b      	str	r3, [r7, #0]

		/* We recognize and consume these, but can't format
		 * them.
		 */
		conv->unsupported = true;
   118d6:	687a      	ldr	r2, [r7, #4]
   118d8:	7813      	ldrb	r3, [r2, #0]
   118da:	f043 0302 	orr.w	r3, r3, #2
   118de:	7013      	strb	r3, [r2, #0]
		break;
   118e0:	e005      	b.n	118ee <extract_length+0x19e>
	default:
		conv->length_mod = LENGTH_NONE;
   118e2:	687a      	ldr	r2, [r7, #4]
   118e4:	7853      	ldrb	r3, [r2, #1]
   118e6:	f36f 03c6 	bfc	r3, #3, #4
   118ea:	7053      	strb	r3, [r2, #1]
		break;
   118ec:	bf00      	nop
	}
	return sp;
   118ee:	683b      	ldr	r3, [r7, #0]
}
   118f0:	4618      	mov	r0, r3
   118f2:	370c      	adds	r7, #12
   118f4:	46bd      	mov	sp, r7
   118f6:	bc80      	pop	{r7}
   118f8:	4770      	bx	lr
   118fa:	bf00      	nop

000118fc <extract_specifier>:
 *
 * @return a pointer the first character that follows the specifier.
 */
static inline const char *extract_specifier(struct conversion *conv,
					    const char *sp)
{
   118fc:	b480      	push	{r7}
   118fe:	b085      	sub	sp, #20
   11900:	af00      	add	r7, sp, #0
   11902:	6078      	str	r0, [r7, #4]
   11904:	6039      	str	r1, [r7, #0]
	bool unsupported = false;
   11906:	2300      	movs	r3, #0
   11908:	73fb      	strb	r3, [r7, #15]

	conv->specifier = *sp++;
   1190a:	683b      	ldr	r3, [r7, #0]
   1190c:	1c5a      	adds	r2, r3, #1
   1190e:	603a      	str	r2, [r7, #0]
   11910:	781a      	ldrb	r2, [r3, #0]
   11912:	687b      	ldr	r3, [r7, #4]
   11914:	70da      	strb	r2, [r3, #3]

	switch (conv->specifier) {
   11916:	687b      	ldr	r3, [r7, #4]
   11918:	78db      	ldrb	r3, [r3, #3]
   1191a:	3b41      	subs	r3, #65	; 0x41
   1191c:	2b37      	cmp	r3, #55	; 0x37
   1191e:	f200 80c4 	bhi.w	11aaa <extract_specifier+0x1ae>
   11922:	a201      	add	r2, pc, #4	; (adr r2, 11928 <extract_specifier+0x2c>)
   11924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11928:	00011a59 	.word	0x00011a59
   1192c:	00011aab 	.word	0x00011aab
   11930:	00011aab 	.word	0x00011aab
   11934:	00011aab 	.word	0x00011aab
   11938:	00011a59 	.word	0x00011a59
   1193c:	00011a59 	.word	0x00011a59
   11940:	00011a59 	.word	0x00011a59
   11944:	00011aab 	.word	0x00011aab
   11948:	00011aab 	.word	0x00011aab
   1194c:	00011aab 	.word	0x00011aab
   11950:	00011aab 	.word	0x00011aab
   11954:	00011aab 	.word	0x00011aab
   11958:	00011aab 	.word	0x00011aab
   1195c:	00011aab 	.word	0x00011aab
   11960:	00011aab 	.word	0x00011aab
   11964:	00011aab 	.word	0x00011aab
   11968:	00011aab 	.word	0x00011aab
   1196c:	00011aab 	.word	0x00011aab
   11970:	00011aab 	.word	0x00011aab
   11974:	00011aab 	.word	0x00011aab
   11978:	00011aab 	.word	0x00011aab
   1197c:	00011aab 	.word	0x00011aab
   11980:	00011aab 	.word	0x00011aab
   11984:	00011a17 	.word	0x00011a17
   11988:	00011aab 	.word	0x00011aab
   1198c:	00011aab 	.word	0x00011aab
   11990:	00011aab 	.word	0x00011aab
   11994:	00011aab 	.word	0x00011aab
   11998:	00011aab 	.word	0x00011aab
   1199c:	00011aab 	.word	0x00011aab
   119a0:	00011aab 	.word	0x00011aab
   119a4:	00011aab 	.word	0x00011aab
   119a8:	00011a59 	.word	0x00011a59
   119ac:	00011aab 	.word	0x00011aab
   119b0:	00011a17 	.word	0x00011a17
   119b4:	00011a09 	.word	0x00011a09
   119b8:	00011a59 	.word	0x00011a59
   119bc:	00011a59 	.word	0x00011a59
   119c0:	00011a59 	.word	0x00011a59
   119c4:	00011aab 	.word	0x00011aab
   119c8:	00011a09 	.word	0x00011a09
   119cc:	00011aab 	.word	0x00011aab
   119d0:	00011aab 	.word	0x00011aab
   119d4:	00011aab 	.word	0x00011aab
   119d8:	00011aab 	.word	0x00011aab
   119dc:	00011a6b 	.word	0x00011a6b
   119e0:	00011a17 	.word	0x00011a17
   119e4:	00011a8b 	.word	0x00011a8b
   119e8:	00011aab 	.word	0x00011aab
   119ec:	00011aab 	.word	0x00011aab
   119f0:	00011a8b 	.word	0x00011a8b
   119f4:	00011aab 	.word	0x00011aab
   119f8:	00011a17 	.word	0x00011a17
   119fc:	00011aab 	.word	0x00011aab
   11a00:	00011aab 	.word	0x00011aab
   11a04:	00011a17 	.word	0x00011a17
	case SINT_CONV_CASES:
		conv->specifier_cat = SPECIFIER_SINT;
   11a08:	687a      	ldr	r2, [r7, #4]
   11a0a:	7893      	ldrb	r3, [r2, #2]
   11a0c:	2101      	movs	r1, #1
   11a0e:	f361 0302 	bfi	r3, r1, #0, #3
   11a12:	7093      	strb	r3, [r2, #2]
		goto int_conv;
   11a14:	e005      	b.n	11a22 <extract_specifier+0x126>
	case UINT_CONV_CASES:
		conv->specifier_cat = SPECIFIER_UINT;
   11a16:	687a      	ldr	r2, [r7, #4]
   11a18:	7893      	ldrb	r3, [r2, #2]
   11a1a:	2102      	movs	r1, #2
   11a1c:	f361 0302 	bfi	r3, r1, #0, #3
   11a20:	7093      	strb	r3, [r2, #2]
int_conv:
		/* L length specifier not acceptable */
		if (conv->length_mod == LENGTH_UPPER_L) {
   11a22:	687b      	ldr	r3, [r7, #4]
   11a24:	785b      	ldrb	r3, [r3, #1]
   11a26:	f003 0378 	and.w	r3, r3, #120	; 0x78
   11a2a:	b2db      	uxtb	r3, r3
   11a2c:	2b40      	cmp	r3, #64	; 0x40
   11a2e:	d104      	bne.n	11a3a <extract_specifier+0x13e>
			conv->invalid = true;
   11a30:	687a      	ldr	r2, [r7, #4]
   11a32:	7813      	ldrb	r3, [r2, #0]
   11a34:	f043 0301 	orr.w	r3, r3, #1
   11a38:	7013      	strb	r3, [r2, #0]
		}

		/* For c LENGTH_NONE and LENGTH_L would be ok,
		 * but we don't support formatting wide characters.
		 */
		if (conv->specifier == 'c') {
   11a3a:	687b      	ldr	r3, [r7, #4]
   11a3c:	78db      	ldrb	r3, [r3, #3]
   11a3e:	2b63      	cmp	r3, #99	; 0x63
   11a40:	d139      	bne.n	11ab6 <extract_specifier+0x1ba>
			unsupported = (conv->length_mod != LENGTH_NONE);
   11a42:	687b      	ldr	r3, [r7, #4]
   11a44:	785b      	ldrb	r3, [r3, #1]
   11a46:	f003 0378 	and.w	r3, r3, #120	; 0x78
   11a4a:	b2db      	uxtb	r3, r3
   11a4c:	2b00      	cmp	r3, #0
   11a4e:	bf14      	ite	ne
   11a50:	2301      	movne	r3, #1
   11a52:	2300      	moveq	r3, #0
   11a54:	73fb      	strb	r3, [r7, #15]
				break;
			}
		} else {
			;
		}
		break;
   11a56:	e02e      	b.n	11ab6 <extract_specifier+0x1ba>

	case FP_CONV_CASES:
		conv->specifier_cat = SPECIFIER_FP;
   11a58:	687a      	ldr	r2, [r7, #4]
   11a5a:	7893      	ldrb	r3, [r2, #2]
   11a5c:	2104      	movs	r1, #4
   11a5e:	f361 0302 	bfi	r3, r1, #0, #3
   11a62:	7093      	strb	r3, [r2, #2]

		/* Don't support if disabled */
		if (!IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)) {
			unsupported = true;
   11a64:	2301      	movs	r3, #1
   11a66:	73fb      	strb	r3, [r7, #15]
			break;
   11a68:	e02a      	b.n	11ac0 <extract_specifier+0x1c4>

		break;

		/* PTR cases are distinct */
	case 'n':
		conv->specifier_cat = SPECIFIER_PTR;
   11a6a:	687a      	ldr	r2, [r7, #4]
   11a6c:	7893      	ldrb	r3, [r2, #2]
   11a6e:	2103      	movs	r1, #3
   11a70:	f361 0302 	bfi	r3, r1, #0, #3
   11a74:	7093      	strb	r3, [r2, #2]
		/* Anything except L */
		if (conv->length_mod == LENGTH_UPPER_L) {
   11a76:	687b      	ldr	r3, [r7, #4]
   11a78:	785b      	ldrb	r3, [r3, #1]
   11a7a:	f003 0378 	and.w	r3, r3, #120	; 0x78
   11a7e:	b2db      	uxtb	r3, r3
   11a80:	2b40      	cmp	r3, #64	; 0x40
   11a82:	d11a      	bne.n	11aba <extract_specifier+0x1be>
			unsupported = true;
   11a84:	2301      	movs	r3, #1
   11a86:	73fb      	strb	r3, [r7, #15]
		}
		break;
   11a88:	e017      	b.n	11aba <extract_specifier+0x1be>

	case 's':
	case 'p':
		conv->specifier_cat = SPECIFIER_PTR;
   11a8a:	687a      	ldr	r2, [r7, #4]
   11a8c:	7893      	ldrb	r3, [r2, #2]
   11a8e:	2103      	movs	r1, #3
   11a90:	f361 0302 	bfi	r3, r1, #0, #3
   11a94:	7093      	strb	r3, [r2, #2]
		/* p: only LENGTH_NONE
		 *
		 * s: LENGTH_NONE or LENGTH_L but wide
		 * characters not supported.
		 */
		if (conv->length_mod != LENGTH_NONE) {
   11a96:	687b      	ldr	r3, [r7, #4]
   11a98:	785b      	ldrb	r3, [r3, #1]
   11a9a:	f003 0378 	and.w	r3, r3, #120	; 0x78
   11a9e:	b2db      	uxtb	r3, r3
   11aa0:	2b00      	cmp	r3, #0
   11aa2:	d00c      	beq.n	11abe <extract_specifier+0x1c2>
			unsupported = true;
   11aa4:	2301      	movs	r3, #1
   11aa6:	73fb      	strb	r3, [r7, #15]
		}
		break;
   11aa8:	e009      	b.n	11abe <extract_specifier+0x1c2>

	default:
		conv->invalid = true;
   11aaa:	687a      	ldr	r2, [r7, #4]
   11aac:	7813      	ldrb	r3, [r2, #0]
   11aae:	f043 0301 	orr.w	r3, r3, #1
   11ab2:	7013      	strb	r3, [r2, #0]
		break;
   11ab4:	e004      	b.n	11ac0 <extract_specifier+0x1c4>
		break;
   11ab6:	bf00      	nop
   11ab8:	e002      	b.n	11ac0 <extract_specifier+0x1c4>
		break;
   11aba:	bf00      	nop
   11abc:	e000      	b.n	11ac0 <extract_specifier+0x1c4>
		break;
   11abe:	bf00      	nop
	}

	conv->unsupported |= unsupported;
   11ac0:	687b      	ldr	r3, [r7, #4]
   11ac2:	781b      	ldrb	r3, [r3, #0]
   11ac4:	f3c3 0340 	ubfx	r3, r3, #1, #1
   11ac8:	b2da      	uxtb	r2, r3
   11aca:	7bfb      	ldrb	r3, [r7, #15]
   11acc:	4313      	orrs	r3, r2
   11ace:	b2db      	uxtb	r3, r3
   11ad0:	2b00      	cmp	r3, #0
   11ad2:	bf14      	ite	ne
   11ad4:	2301      	movne	r3, #1
   11ad6:	2300      	moveq	r3, #0
   11ad8:	b2d9      	uxtb	r1, r3
   11ada:	687a      	ldr	r2, [r7, #4]
   11adc:	7813      	ldrb	r3, [r2, #0]
   11ade:	f361 0341 	bfi	r3, r1, #1, #1
   11ae2:	7013      	strb	r3, [r2, #0]

	return sp;
   11ae4:	683b      	ldr	r3, [r7, #0]
}
   11ae6:	4618      	mov	r0, r3
   11ae8:	3714      	adds	r7, #20
   11aea:	46bd      	mov	sp, r7
   11aec:	bc80      	pop	{r7}
   11aee:	4770      	bx	lr

00011af0 <store_count>:
 * @param count the count to be stored.
 */
static inline void store_count(const struct conversion *conv,
			       void *dp,
			       int count)
{
   11af0:	b480      	push	{r7}
   11af2:	b085      	sub	sp, #20
   11af4:	af00      	add	r7, sp, #0
   11af6:	60f8      	str	r0, [r7, #12]
   11af8:	60b9      	str	r1, [r7, #8]
   11afa:	607a      	str	r2, [r7, #4]
	switch ((enum length_mod_enum)conv->length_mod) {
   11afc:	68fb      	ldr	r3, [r7, #12]
   11afe:	785b      	ldrb	r3, [r3, #1]
   11b00:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   11b04:	b2db      	uxtb	r3, r3
   11b06:	2b07      	cmp	r3, #7
   11b08:	d83c      	bhi.n	11b84 <store_count+0x94>
   11b0a:	a201      	add	r2, pc, #4	; (adr r2, 11b10 <store_count+0x20>)
   11b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11b10:	00011b31 	.word	0x00011b31
   11b14:	00011b39 	.word	0x00011b39
   11b18:	00011b43 	.word	0x00011b43
   11b1c:	00011b4d 	.word	0x00011b4d
   11b20:	00011b55 	.word	0x00011b55
   11b24:	00011b65 	.word	0x00011b65
   11b28:	00011b75 	.word	0x00011b75
   11b2c:	00011b7d 	.word	0x00011b7d
	case LENGTH_NONE:
		*(int *)dp = count;
   11b30:	68bb      	ldr	r3, [r7, #8]
   11b32:	687a      	ldr	r2, [r7, #4]
   11b34:	601a      	str	r2, [r3, #0]
		break;
   11b36:	e026      	b.n	11b86 <store_count+0x96>
	case LENGTH_HH:
		*(signed char *)dp = (signed char)count;
   11b38:	687b      	ldr	r3, [r7, #4]
   11b3a:	b25a      	sxtb	r2, r3
   11b3c:	68bb      	ldr	r3, [r7, #8]
   11b3e:	701a      	strb	r2, [r3, #0]
		break;
   11b40:	e021      	b.n	11b86 <store_count+0x96>
	case LENGTH_H:
		*(short *)dp = (short)count;
   11b42:	687b      	ldr	r3, [r7, #4]
   11b44:	b21a      	sxth	r2, r3
   11b46:	68bb      	ldr	r3, [r7, #8]
   11b48:	801a      	strh	r2, [r3, #0]
		break;
   11b4a:	e01c      	b.n	11b86 <store_count+0x96>
	case LENGTH_L:
		*(long *)dp = (long)count;
   11b4c:	68bb      	ldr	r3, [r7, #8]
   11b4e:	687a      	ldr	r2, [r7, #4]
   11b50:	601a      	str	r2, [r3, #0]
		break;
   11b52:	e018      	b.n	11b86 <store_count+0x96>
	case LENGTH_LL:
		*(long long *)dp = (long long)count;
   11b54:	687b      	ldr	r3, [r7, #4]
   11b56:	461a      	mov	r2, r3
   11b58:	ea4f 73e2 	mov.w	r3, r2, asr #31
   11b5c:	68b9      	ldr	r1, [r7, #8]
   11b5e:	e9c1 2300 	strd	r2, r3, [r1]
		break;
   11b62:	e010      	b.n	11b86 <store_count+0x96>
	case LENGTH_J:
		*(intmax_t *)dp = (intmax_t)count;
   11b64:	687b      	ldr	r3, [r7, #4]
   11b66:	461a      	mov	r2, r3
   11b68:	ea4f 73e2 	mov.w	r3, r2, asr #31
   11b6c:	68b9      	ldr	r1, [r7, #8]
   11b6e:	e9c1 2300 	strd	r2, r3, [r1]
		break;
   11b72:	e008      	b.n	11b86 <store_count+0x96>
	case LENGTH_Z:
		*(size_t *)dp = (size_t)count;
   11b74:	687a      	ldr	r2, [r7, #4]
   11b76:	68bb      	ldr	r3, [r7, #8]
   11b78:	601a      	str	r2, [r3, #0]
		break;
   11b7a:	e004      	b.n	11b86 <store_count+0x96>
	case LENGTH_T:
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   11b7c:	68bb      	ldr	r3, [r7, #8]
   11b7e:	687a      	ldr	r2, [r7, #4]
   11b80:	601a      	str	r2, [r3, #0]
		break;
   11b82:	e000      	b.n	11b86 <store_count+0x96>
	default:
		/* Add an empty default with break, this is a defensive programming.
		 * Static analysis tool won't raise a violation if default is empty,
		 * but has that comment.
		 */
		break;
   11b84:	bf00      	nop
	}
}
   11b86:	bf00      	nop
   11b88:	3714      	adds	r7, #20
   11b8a:	46bd      	mov	sp, r7
   11b8c:	bc80      	pop	{r7}
   11b8e:	4770      	bx	lr

00011b90 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   11b90:	b580      	push	{r7, lr}
   11b92:	b0b0      	sub	sp, #192	; 0xc0
   11b94:	af02      	add	r7, sp, #8
   11b96:	60f8      	str	r0, [r7, #12]
   11b98:	60b9      	str	r1, [r7, #8]
   11b9a:	607a      	str	r2, [r7, #4]
   11b9c:	603b      	str	r3, [r7, #0]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   11b9e:	2300      	movs	r3, #0
   11ba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11ba4:	f000 bccd 	b.w	12542 <cbvprintf+0x9b2>
		if (*fp != '%') {
   11ba8:	687b      	ldr	r3, [r7, #4]
   11baa:	781b      	ldrb	r3, [r3, #0]
   11bac:	2b25      	cmp	r3, #37	; 0x25
   11bae:	d016      	beq.n	11bde <cbvprintf+0x4e>
			OUTC(*fp++);
   11bb0:	687b      	ldr	r3, [r7, #4]
   11bb2:	1c5a      	adds	r2, r3, #1
   11bb4:	607a      	str	r2, [r7, #4]
   11bb6:	781b      	ldrb	r3, [r3, #0]
   11bb8:	461a      	mov	r2, r3
   11bba:	68fb      	ldr	r3, [r7, #12]
   11bbc:	68b9      	ldr	r1, [r7, #8]
   11bbe:	4610      	mov	r0, r2
   11bc0:	4798      	blx	r3
   11bc2:	64b8      	str	r0, [r7, #72]	; 0x48
   11bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11bc6:	2b00      	cmp	r3, #0
   11bc8:	da02      	bge.n	11bd0 <cbvprintf+0x40>
   11bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   11bcc:	f000 bcc0 	b.w	12550 <cbvprintf+0x9c0>
   11bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   11bd4:	3301      	adds	r3, #1
   11bd6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			continue;
   11bda:	f000 bcb2 	b.w	12542 <cbvprintf+0x9b2>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   11bde:	f107 0318 	add.w	r3, r7, #24
   11be2:	2200      	movs	r2, #0
   11be4:	601a      	str	r2, [r3, #0]
   11be6:	605a      	str	r2, [r3, #4]
   11be8:	609a      	str	r2, [r3, #8]
   11bea:	60da      	str	r2, [r3, #12]
   11bec:	611a      	str	r2, [r3, #16]
   11bee:	615a      	str	r2, [r3, #20]
			.value = {
				.uint = 0,
			},
		};
		struct conversion *const conv = &state.conv;
   11bf0:	f107 0318 	add.w	r3, r7, #24
   11bf4:	3308      	adds	r3, #8
   11bf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		union argument_value *const value = &state.value;
   11bfa:	f107 0318 	add.w	r3, r7, #24
   11bfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		const char *sp = fp;
   11c02:	687b      	ldr	r3, [r7, #4]
   11c04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		int width = -1;
   11c08:	f04f 33ff 	mov.w	r3, #4294967295
   11c0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		int precision = -1;
   11c10:	f04f 33ff 	mov.w	r3, #4294967295
   11c14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		const char *bps = NULL;
   11c18:	2300      	movs	r3, #0
   11c1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		const char *bpe = buf + sizeof(buf);
   11c1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
   11c22:	3316      	adds	r3, #22
   11c24:	617b      	str	r3, [r7, #20]
		char sign = 0;
   11c26:	2300      	movs	r3, #0
   11c28:	74fb      	strb	r3, [r7, #19]

		fp = extract_conversion(conv, sp);
   11c2a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
   11c2e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
   11c32:	f010 f9d8 	bl	21fe6 <extract_conversion>
   11c36:	6078      	str	r0, [r7, #4]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   11c38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   11c3c:	785b      	ldrb	r3, [r3, #1]
   11c3e:	f003 0301 	and.w	r3, r3, #1
   11c42:	b2db      	uxtb	r3, r3
   11c44:	2b00      	cmp	r3, #0
   11c46:	d015      	beq.n	11c74 <cbvprintf+0xe4>
			width = va_arg(ap, int);
   11c48:	683b      	ldr	r3, [r7, #0]
   11c4a:	1d1a      	adds	r2, r3, #4
   11c4c:	603a      	str	r2, [r7, #0]
   11c4e:	681b      	ldr	r3, [r3, #0]
   11c50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

			if (width < 0) {
   11c54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   11c58:	2b00      	cmp	r3, #0
   11c5a:	da18      	bge.n	11c8e <cbvprintf+0xfe>
				conv->flag_dash = true;
   11c5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   11c60:	7813      	ldrb	r3, [r2, #0]
   11c62:	f043 0304 	orr.w	r3, r3, #4
   11c66:	7013      	strb	r3, [r2, #0]
				width = -width;
   11c68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   11c6c:	425b      	negs	r3, r3
   11c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   11c72:	e00c      	b.n	11c8e <cbvprintf+0xfe>
			}
		} else if (conv->width_present) {
   11c74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   11c78:	781b      	ldrb	r3, [r3, #0]
   11c7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   11c7e:	b2db      	uxtb	r3, r3
   11c80:	2b00      	cmp	r3, #0
   11c82:	d004      	beq.n	11c8e <cbvprintf+0xfe>
			width = conv->width_value;
   11c84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   11c88:	685b      	ldr	r3, [r3, #4]
   11c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   11c8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   11c92:	785b      	ldrb	r3, [r3, #1]
   11c94:	f003 0304 	and.w	r3, r3, #4
   11c98:	b2db      	uxtb	r3, r3
   11c9a:	2b00      	cmp	r3, #0
   11c9c:	d015      	beq.n	11cca <cbvprintf+0x13a>
			int arg = va_arg(ap, int);
   11c9e:	683b      	ldr	r3, [r7, #0]
   11ca0:	1d1a      	adds	r2, r3, #4
   11ca2:	603a      	str	r2, [r7, #0]
   11ca4:	681b      	ldr	r3, [r3, #0]
   11ca6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

			if (arg < 0) {
   11caa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   11cae:	2b00      	cmp	r3, #0
   11cb0:	da06      	bge.n	11cc0 <cbvprintf+0x130>
				conv->prec_present = false;
   11cb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   11cb6:	7853      	ldrb	r3, [r2, #1]
   11cb8:	f36f 0341 	bfc	r3, #1, #1
   11cbc:	7053      	strb	r3, [r2, #1]
   11cbe:	e011      	b.n	11ce4 <cbvprintf+0x154>
			} else {
				precision = arg;
   11cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   11cc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   11cc8:	e00c      	b.n	11ce4 <cbvprintf+0x154>
			}
		} else if (conv->prec_present) {
   11cca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   11cce:	785b      	ldrb	r3, [r3, #1]
   11cd0:	f003 0302 	and.w	r3, r3, #2
   11cd4:	b2db      	uxtb	r3, r3
   11cd6:	2b00      	cmp	r3, #0
   11cd8:	d004      	beq.n	11ce4 <cbvprintf+0x154>
			precision = conv->prec_value;
   11cda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   11cde:	689b      	ldr	r3, [r3, #8]
   11ce0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   11ce4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   11ce8:	2200      	movs	r2, #0
   11cea:	605a      	str	r2, [r3, #4]
		conv->pad0_pre_exp = 0;
   11cec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   11cf0:	2200      	movs	r2, #0
   11cf2:	609a      	str	r2, [r3, #8]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   11cf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   11cf8:	789b      	ldrb	r3, [r3, #2]
   11cfa:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11cfe:	b2db      	uxtb	r3, r3
		enum specifier_cat_enum specifier_cat
   11d00:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   11d04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   11d08:	785b      	ldrb	r3, [r3, #1]
   11d0a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   11d0e:	b2db      	uxtb	r3, r3
		enum length_mod_enum length_mod
   11d10:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   11d14:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
   11d18:	2b01      	cmp	r3, #1
   11d1a:	d174      	bne.n	11e06 <cbvprintf+0x276>
			switch (length_mod) {
   11d1c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
   11d20:	3b03      	subs	r3, #3
   11d22:	2b04      	cmp	r3, #4
   11d24:	d80c      	bhi.n	11d40 <cbvprintf+0x1b0>
   11d26:	a201      	add	r2, pc, #4	; (adr r2, 11d2c <cbvprintf+0x19c>)
   11d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11d2c:	00011d59 	.word	0x00011d59
   11d30:	00011d71 	.word	0x00011d71
   11d34:	00011d8d 	.word	0x00011d8d
   11d38:	00011da9 	.word	0x00011da9
   11d3c:	00011da9 	.word	0x00011da9
			default:
			case LENGTH_NONE:
			case LENGTH_HH:
			case LENGTH_H:
				value->sint = va_arg(ap, int);
   11d40:	683b      	ldr	r3, [r7, #0]
   11d42:	1d1a      	adds	r2, r3, #4
   11d44:	603a      	str	r2, [r7, #0]
   11d46:	681b      	ldr	r3, [r3, #0]
   11d48:	461a      	mov	r2, r3
   11d4a:	ea4f 73e2 	mov.w	r3, r2, asr #31
   11d4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   11d52:	e9c1 2300 	strd	r2, r3, [r1]
				break;
   11d56:	e033      	b.n	11dc0 <cbvprintf+0x230>
				if (WCHAR_IS_SIGNED
				    && (conv->specifier == 'c')) {
					value->sint = (wchar_t)va_arg(ap,
							      WINT_TYPE);
				} else {
					value->sint = va_arg(ap, long);
   11d58:	683b      	ldr	r3, [r7, #0]
   11d5a:	1d1a      	adds	r2, r3, #4
   11d5c:	603a      	str	r2, [r7, #0]
   11d5e:	681b      	ldr	r3, [r3, #0]
   11d60:	461a      	mov	r2, r3
   11d62:	ea4f 73e2 	mov.w	r3, r2, asr #31
   11d66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   11d6a:	e9c1 2300 	strd	r2, r3, [r1]
				}
				break;
   11d6e:	e027      	b.n	11dc0 <cbvprintf+0x230>
			case LENGTH_LL:
				value->sint =
					(sint_value_type)va_arg(ap, long long);
   11d70:	683b      	ldr	r3, [r7, #0]
   11d72:	3307      	adds	r3, #7
   11d74:	f023 0307 	bic.w	r3, r3, #7
   11d78:	f103 0208 	add.w	r2, r3, #8
   11d7c:	603a      	str	r2, [r7, #0]
   11d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   11d82:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   11d86:	e9c1 2300 	strd	r2, r3, [r1]
				break;
   11d8a:	e019      	b.n	11dc0 <cbvprintf+0x230>
			case LENGTH_J:
				value->sint =
					(sint_value_type)va_arg(ap, intmax_t);
   11d8c:	683b      	ldr	r3, [r7, #0]
   11d8e:	3307      	adds	r3, #7
   11d90:	f023 0307 	bic.w	r3, r3, #7
   11d94:	f103 0208 	add.w	r2, r3, #8
   11d98:	603a      	str	r2, [r7, #0]
   11d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   11d9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   11da2:	e9c1 2300 	strd	r2, r3, [r1]
				break;
   11da6:	e00b      	b.n	11dc0 <cbvprintf+0x230>
				 * unsigned and signed equivalents of each
				 * other.  This can be checked in a platform
				 * test.
				 */
				value->sint =
					(sint_value_type)va_arg(ap, ptrdiff_t);
   11da8:	683b      	ldr	r3, [r7, #0]
   11daa:	1d1a      	adds	r2, r3, #4
   11dac:	603a      	str	r2, [r7, #0]
   11dae:	681b      	ldr	r3, [r3, #0]
   11db0:	461a      	mov	r2, r3
   11db2:	ea4f 73e2 	mov.w	r3, r2, asr #31
				value->sint =
   11db6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   11dba:	e9c1 2300 	strd	r2, r3, [r1]
				break;
   11dbe:	bf00      	nop
			}
			if (length_mod == LENGTH_HH) {
   11dc0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
   11dc4:	2b01      	cmp	r3, #1
   11dc6:	d10c      	bne.n	11de2 <cbvprintf+0x252>
				value->sint = (char)value->sint;
   11dc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   11dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   11dd0:	b2d3      	uxtb	r3, r2
   11dd2:	b2da      	uxtb	r2, r3
   11dd4:	f04f 0300 	mov.w	r3, #0
   11dd8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   11ddc:	e9c1 2300 	strd	r2, r3, [r1]
   11de0:	e0ca      	b.n	11f78 <cbvprintf+0x3e8>
			} else if (length_mod == LENGTH_H) {
   11de2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
   11de6:	2b02      	cmp	r3, #2
   11de8:	f040 80c6 	bne.w	11f78 <cbvprintf+0x3e8>
				value->sint = (short)value->sint;
   11dec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   11df0:	e9d3 2300 	ldrd	r2, r3, [r3]
   11df4:	b213      	sxth	r3, r2
   11df6:	b21a      	sxth	r2, r3
   11df8:	ea4f 73e2 	mov.w	r3, r2, asr #31
   11dfc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   11e00:	e9c1 2300 	strd	r2, r3, [r1]
   11e04:	e0b8      	b.n	11f78 <cbvprintf+0x3e8>
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   11e06:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
   11e0a:	2b02      	cmp	r3, #2
   11e0c:	f040 8085 	bne.w	11f1a <cbvprintf+0x38a>
			switch (length_mod) {
   11e10:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
   11e14:	3b03      	subs	r3, #3
   11e16:	2b04      	cmp	r3, #4
   11e18:	d80c      	bhi.n	11e34 <cbvprintf+0x2a4>
   11e1a:	a201      	add	r2, pc, #4	; (adr r2, 11e20 <cbvprintf+0x290>)
   11e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11e20:	00011e4d 	.word	0x00011e4d
   11e24:	00011e87 	.word	0x00011e87
   11e28:	00011ea3 	.word	0x00011ea3
   11e2c:	00011ebf 	.word	0x00011ebf
   11e30:	00011ebf 	.word	0x00011ebf
			default:
			case LENGTH_NONE:
			case LENGTH_HH:
			case LENGTH_H:
				value->uint = va_arg(ap, unsigned int);
   11e34:	683b      	ldr	r3, [r7, #0]
   11e36:	1d1a      	adds	r2, r3, #4
   11e38:	603a      	str	r2, [r7, #0]
   11e3a:	681b      	ldr	r3, [r3, #0]
   11e3c:	461a      	mov	r2, r3
   11e3e:	f04f 0300 	mov.w	r3, #0
   11e42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   11e46:	e9c1 2300 	strd	r2, r3, [r1]
				break;
   11e4a:	e044      	b.n	11ed6 <cbvprintf+0x346>
			case LENGTH_L:
				if ((!WCHAR_IS_SIGNED)
				    && (conv->specifier == 'c')) {
   11e4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   11e50:	78db      	ldrb	r3, [r3, #3]
				if ((!WCHAR_IS_SIGNED)
   11e52:	2b63      	cmp	r3, #99	; 0x63
   11e54:	d10b      	bne.n	11e6e <cbvprintf+0x2de>
					value->uint = (wchar_t)va_arg(ap,
   11e56:	683b      	ldr	r3, [r7, #0]
   11e58:	1d1a      	adds	r2, r3, #4
   11e5a:	603a      	str	r2, [r7, #0]
   11e5c:	681b      	ldr	r3, [r3, #0]
   11e5e:	461a      	mov	r2, r3
   11e60:	f04f 0300 	mov.w	r3, #0
   11e64:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   11e68:	e9c1 2300 	strd	r2, r3, [r1]
							      WINT_TYPE);
				} else {
					value->uint = va_arg(ap, unsigned long);
				}
				break;
   11e6c:	e033      	b.n	11ed6 <cbvprintf+0x346>
					value->uint = va_arg(ap, unsigned long);
   11e6e:	683b      	ldr	r3, [r7, #0]
   11e70:	1d1a      	adds	r2, r3, #4
   11e72:	603a      	str	r2, [r7, #0]
   11e74:	681b      	ldr	r3, [r3, #0]
   11e76:	461a      	mov	r2, r3
   11e78:	f04f 0300 	mov.w	r3, #0
   11e7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   11e80:	e9c1 2300 	strd	r2, r3, [r1]
				break;
   11e84:	e027      	b.n	11ed6 <cbvprintf+0x346>
			case LENGTH_LL:
				value->uint =
					(uint_value_type)va_arg(ap,
   11e86:	683b      	ldr	r3, [r7, #0]
   11e88:	3307      	adds	r3, #7
   11e8a:	f023 0307 	bic.w	r3, r3, #7
   11e8e:	f103 0208 	add.w	r2, r3, #8
   11e92:	603a      	str	r2, [r7, #0]
   11e94:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   11e98:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   11e9c:	e9c1 2300 	strd	r2, r3, [r1]
						unsigned long long);
				break;
   11ea0:	e019      	b.n	11ed6 <cbvprintf+0x346>
			case LENGTH_J:
				value->uint =
					(uint_value_type)va_arg(ap,
   11ea2:	683b      	ldr	r3, [r7, #0]
   11ea4:	3307      	adds	r3, #7
   11ea6:	f023 0307 	bic.w	r3, r3, #7
   11eaa:	f103 0208 	add.w	r2, r3, #8
   11eae:	603a      	str	r2, [r7, #0]
   11eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   11eb4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   11eb8:	e9c1 2300 	strd	r2, r3, [r1]
								uintmax_t);
				break;
   11ebc:	e00b      	b.n	11ed6 <cbvprintf+0x346>
			case LENGTH_Z:		/* size_t */
			case LENGTH_T:		/* ptrdiff_t */
				value->uint =
					(uint_value_type)va_arg(ap, size_t);
   11ebe:	683b      	ldr	r3, [r7, #0]
   11ec0:	1d1a      	adds	r2, r3, #4
   11ec2:	603a      	str	r2, [r7, #0]
   11ec4:	681b      	ldr	r3, [r3, #0]
   11ec6:	461a      	mov	r2, r3
   11ec8:	f04f 0300 	mov.w	r3, #0
				value->uint =
   11ecc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   11ed0:	e9c1 2300 	strd	r2, r3, [r1]
				break;
   11ed4:	bf00      	nop
			}
			if (length_mod == LENGTH_HH) {
   11ed6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
   11eda:	2b01      	cmp	r3, #1
   11edc:	d10c      	bne.n	11ef8 <cbvprintf+0x368>
				value->uint = (unsigned char)value->uint;
   11ede:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   11ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ee6:	b2d3      	uxtb	r3, r2
   11ee8:	b2da      	uxtb	r2, r3
   11eea:	f04f 0300 	mov.w	r3, #0
   11eee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   11ef2:	e9c1 2300 	strd	r2, r3, [r1]
   11ef6:	e03f      	b.n	11f78 <cbvprintf+0x3e8>
			} else if (length_mod == LENGTH_H) {
   11ef8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
   11efc:	2b02      	cmp	r3, #2
   11efe:	d13b      	bne.n	11f78 <cbvprintf+0x3e8>
				value->uint = (unsigned short)value->uint;
   11f00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   11f04:	e9d3 2300 	ldrd	r2, r3, [r3]
   11f08:	b293      	uxth	r3, r2
   11f0a:	b29a      	uxth	r2, r3
   11f0c:	f04f 0300 	mov.w	r3, #0
   11f10:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   11f14:	e9c1 2300 	strd	r2, r3, [r1]
   11f18:	e02e      	b.n	11f78 <cbvprintf+0x3e8>
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   11f1a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
   11f1e:	2b04      	cmp	r3, #4
   11f20:	d11f      	bne.n	11f62 <cbvprintf+0x3d2>
			if (length_mod == LENGTH_UPPER_L) {
   11f22:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
   11f26:	2b08      	cmp	r3, #8
   11f28:	d10d      	bne.n	11f46 <cbvprintf+0x3b6>
				value->ldbl = va_arg(ap, long double);
   11f2a:	683b      	ldr	r3, [r7, #0]
   11f2c:	3307      	adds	r3, #7
   11f2e:	f023 0307 	bic.w	r3, r3, #7
   11f32:	f103 0208 	add.w	r2, r3, #8
   11f36:	603a      	str	r2, [r7, #0]
   11f38:	e9d3 2300 	ldrd	r2, r3, [r3]
   11f3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   11f40:	e9c1 2300 	strd	r2, r3, [r1]
   11f44:	e018      	b.n	11f78 <cbvprintf+0x3e8>
			} else {
				value->dbl = va_arg(ap, double);
   11f46:	683b      	ldr	r3, [r7, #0]
   11f48:	3307      	adds	r3, #7
   11f4a:	f023 0307 	bic.w	r3, r3, #7
   11f4e:	f103 0208 	add.w	r2, r3, #8
   11f52:	603a      	str	r2, [r7, #0]
   11f54:	e9d3 2300 	ldrd	r2, r3, [r3]
   11f58:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   11f5c:	e9c1 2300 	strd	r2, r3, [r1]
   11f60:	e00a      	b.n	11f78 <cbvprintf+0x3e8>
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   11f62:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
   11f66:	2b03      	cmp	r3, #3
   11f68:	d106      	bne.n	11f78 <cbvprintf+0x3e8>
			value->ptr = va_arg(ap, void *);
   11f6a:	683b      	ldr	r3, [r7, #0]
   11f6c:	1d1a      	adds	r2, r3, #4
   11f6e:	603a      	str	r2, [r7, #0]
   11f70:	681a      	ldr	r2, [r3, #0]
   11f72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   11f76:	601a      	str	r2, [r3, #0]
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   11f78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   11f7c:	781b      	ldrb	r3, [r3, #0]
   11f7e:	f003 0301 	and.w	r3, r3, #1
   11f82:	b2db      	uxtb	r3, r3
   11f84:	2b00      	cmp	r3, #0
   11f86:	d107      	bne.n	11f98 <cbvprintf+0x408>
   11f88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   11f8c:	781b      	ldrb	r3, [r3, #0]
   11f8e:	f003 0302 	and.w	r3, r3, #2
   11f92:	b2db      	uxtb	r3, r3
   11f94:	2b00      	cmp	r3, #0
   11f96:	d013      	beq.n	11fc0 <cbvprintf+0x430>
			OUTS(sp, fp);
   11f98:	687b      	ldr	r3, [r7, #4]
   11f9a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
   11f9e:	68b9      	ldr	r1, [r7, #8]
   11fa0:	68f8      	ldr	r0, [r7, #12]
   11fa2:	f010 f8e2 	bl	2216a <outs>
   11fa6:	64f8      	str	r0, [r7, #76]	; 0x4c
   11fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   11faa:	2b00      	cmp	r3, #0
   11fac:	da01      	bge.n	11fb2 <cbvprintf+0x422>
   11fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   11fb0:	e2ce      	b.n	12550 <cbvprintf+0x9c0>
   11fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   11fb4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
   11fb8:	4413      	add	r3, r2
   11fba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			continue;
   11fbe:	e2c0      	b.n	12542 <cbvprintf+0x9b2>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   11fc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   11fc4:	78db      	ldrb	r3, [r3, #3]
   11fc6:	3b25      	subs	r3, #37	; 0x25
   11fc8:	2b53      	cmp	r3, #83	; 0x53
   11fca:	f200 8181 	bhi.w	122d0 <cbvprintf+0x740>
   11fce:	a201      	add	r2, pc, #4	; (adr r2, 11fd4 <cbvprintf+0x444>)
   11fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11fd4:	00012125 	.word	0x00012125
   11fd8:	000122d1 	.word	0x000122d1
   11fdc:	000122d1 	.word	0x000122d1
   11fe0:	000122d1 	.word	0x000122d1
   11fe4:	000122d1 	.word	0x000122d1
   11fe8:	000122d1 	.word	0x000122d1
   11fec:	000122d1 	.word	0x000122d1
   11ff0:	000122d1 	.word	0x000122d1
   11ff4:	000122d1 	.word	0x000122d1
   11ff8:	000122d1 	.word	0x000122d1
   11ffc:	000122d1 	.word	0x000122d1
   12000:	000122d1 	.word	0x000122d1
   12004:	000122d1 	.word	0x000122d1
   12008:	000122d1 	.word	0x000122d1
   1200c:	000122d1 	.word	0x000122d1
   12010:	000122d1 	.word	0x000122d1
   12014:	000122d1 	.word	0x000122d1
   12018:	000122d1 	.word	0x000122d1
   1201c:	000122d1 	.word	0x000122d1
   12020:	000122d1 	.word	0x000122d1
   12024:	000122d1 	.word	0x000122d1
   12028:	000122d1 	.word	0x000122d1
   1202c:	000122d1 	.word	0x000122d1
   12030:	000122d1 	.word	0x000122d1
   12034:	000122d1 	.word	0x000122d1
   12038:	000122d1 	.word	0x000122d1
   1203c:	000122d1 	.word	0x000122d1
   12040:	000122d1 	.word	0x000122d1
   12044:	000122d1 	.word	0x000122d1
   12048:	000122d1 	.word	0x000122d1
   1204c:	000122d1 	.word	0x000122d1
   12050:	000122d1 	.word	0x000122d1
   12054:	000122d1 	.word	0x000122d1
   12058:	000122d1 	.word	0x000122d1
   1205c:	000122d1 	.word	0x000122d1
   12060:	000122d1 	.word	0x000122d1
   12064:	000122d1 	.word	0x000122d1
   12068:	000122d1 	.word	0x000122d1
   1206c:	000122d1 	.word	0x000122d1
   12070:	000122d1 	.word	0x000122d1
   12074:	000122d1 	.word	0x000122d1
   12078:	000122d1 	.word	0x000122d1
   1207c:	000122d1 	.word	0x000122d1
   12080:	000122d1 	.word	0x000122d1
   12084:	000122d1 	.word	0x000122d1
   12088:	000122d1 	.word	0x000122d1
   1208c:	000122d1 	.word	0x000122d1
   12090:	000122d1 	.word	0x000122d1
   12094:	000122d1 	.word	0x000122d1
   12098:	000122d1 	.word	0x000122d1
   1209c:	000122d1 	.word	0x000122d1
   120a0:	00012213 	.word	0x00012213
   120a4:	000122d1 	.word	0x000122d1
   120a8:	000122d1 	.word	0x000122d1
   120ac:	000122d1 	.word	0x000122d1
   120b0:	000122d1 	.word	0x000122d1
   120b4:	000122d1 	.word	0x000122d1
   120b8:	000122d1 	.word	0x000122d1
   120bc:	000122d1 	.word	0x000122d1
   120c0:	000122d1 	.word	0x000122d1
   120c4:	000122d1 	.word	0x000122d1
   120c8:	000122d1 	.word	0x000122d1
   120cc:	0001218d 	.word	0x0001218d
   120d0:	000121ad 	.word	0x000121ad
   120d4:	000122d1 	.word	0x000122d1
   120d8:	000122d1 	.word	0x000122d1
   120dc:	000122d1 	.word	0x000122d1
   120e0:	000122d1 	.word	0x000122d1
   120e4:	000121ad 	.word	0x000121ad
   120e8:	000122d1 	.word	0x000122d1
   120ec:	000122d1 	.word	0x000122d1
   120f0:	000122d1 	.word	0x000122d1
   120f4:	000122d1 	.word	0x000122d1
   120f8:	000122bb 	.word	0x000122bb
   120fc:	00012213 	.word	0x00012213
   12100:	00012269 	.word	0x00012269
   12104:	000122d1 	.word	0x000122d1
   12108:	000122d1 	.word	0x000122d1
   1210c:	00012145 	.word	0x00012145
   12110:	000122d1 	.word	0x000122d1
   12114:	00012213 	.word	0x00012213
   12118:	000122d1 	.word	0x000122d1
   1211c:	000122d1 	.word	0x000122d1
   12120:	00012213 	.word	0x00012213
		case '%':
			OUTC('%');
   12124:	68fb      	ldr	r3, [r7, #12]
   12126:	68b9      	ldr	r1, [r7, #8]
   12128:	2025      	movs	r0, #37	; 0x25
   1212a:	4798      	blx	r3
   1212c:	6738      	str	r0, [r7, #112]	; 0x70
   1212e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   12130:	2b00      	cmp	r3, #0
   12132:	da01      	bge.n	12138 <cbvprintf+0x5a8>
   12134:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   12136:	e20b      	b.n	12550 <cbvprintf+0x9c0>
   12138:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   1213c:	3301      	adds	r3, #1
   1213e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			break;
   12142:	e0c8      	b.n	122d6 <cbvprintf+0x746>
		case 's': {
			bps = (const char *)value->ptr;
   12144:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   12148:	681b      	ldr	r3, [r3, #0]
   1214a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

			size_t len;

			if (precision >= 0) {
   1214e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   12152:	2b00      	cmp	r3, #0
   12154:	db09      	blt.n	1216a <cbvprintf+0x5da>
				len = strnlen(bps, precision);
   12156:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   1215a:	4619      	mov	r1, r3
   1215c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
   12160:	f012 fa5b 	bl	2461a <strnlen>
   12164:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
   12168:	e005      	b.n	12176 <cbvprintf+0x5e6>
			} else {
				len = strlen(bps);
   1216a:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
   1216e:	f012 fa3d 	bl	245ec <strlen>
   12172:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
			}

			bpe = bps + len;
   12176:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
   1217a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
   1217e:	4413      	add	r3, r2
   12180:	617b      	str	r3, [r7, #20]
			precision = -1;
   12182:	f04f 33ff 	mov.w	r3, #4294967295
   12186:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

			break;
   1218a:	e0a4      	b.n	122d6 <cbvprintf+0x746>
		}
		case 'c':
			bps = buf;
   1218c:	f107 0330 	add.w	r3, r7, #48	; 0x30
   12190:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12194:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   12198:	e9d3 2300 	ldrd	r2, r3, [r3]
   1219c:	b2d3      	uxtb	r3, r2
   1219e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			bpe = buf + 1;
   121a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
   121a6:	3301      	adds	r3, #1
   121a8:	617b      	str	r3, [r7, #20]
			break;
   121aa:	e094      	b.n	122d6 <cbvprintf+0x746>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   121ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   121b0:	781b      	ldrb	r3, [r3, #0]
   121b2:	f003 0308 	and.w	r3, r3, #8
   121b6:	b2db      	uxtb	r3, r3
   121b8:	2b00      	cmp	r3, #0
   121ba:	d002      	beq.n	121c2 <cbvprintf+0x632>
				sign = '+';
   121bc:	232b      	movs	r3, #43	; 0x2b
   121be:	74fb      	strb	r3, [r7, #19]
   121c0:	e009      	b.n	121d6 <cbvprintf+0x646>
			} else if (conv->flag_space) {
   121c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   121c6:	781b      	ldrb	r3, [r3, #0]
   121c8:	f003 0310 	and.w	r3, r3, #16
   121cc:	b2db      	uxtb	r3, r3
   121ce:	2b00      	cmp	r3, #0
   121d0:	d001      	beq.n	121d6 <cbvprintf+0x646>
				sign = ' ';
   121d2:	2320      	movs	r3, #32
   121d4:	74fb      	strb	r3, [r7, #19]

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   121d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   121da:	e9d3 2300 	ldrd	r2, r3, [r3]
   121de:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
			if (sint < 0) {
   121e2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
   121e6:	2a00      	cmp	r2, #0
   121e8:	f173 0300 	sbcs.w	r3, r3, #0
   121ec:	da0b      	bge.n	12206 <cbvprintf+0x676>
				sign = '-';
   121ee:	232d      	movs	r3, #45	; 0x2d
   121f0:	74fb      	strb	r3, [r7, #19]
				value->uint = (uint_value_type)-sint;
   121f2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
   121f6:	4252      	negs	r2, r2
   121f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   121fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   12200:	e9c1 2300 	strd	r2, r3, [r1]
   12204:	e005      	b.n	12212 <cbvprintf+0x682>
			} else {
				value->uint = (uint_value_type)sint;
   12206:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
   1220a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
   1220e:	e9c1 2300 	strd	r2, r3, [r1]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   12212:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   12216:	e9d3 0100 	ldrd	r0, r1, [r3]
   1221a:	697b      	ldr	r3, [r7, #20]
   1221c:	f107 0230 	add.w	r2, r7, #48	; 0x30
   12220:	9300      	str	r3, [sp, #0]
   12222:	4613      	mov	r3, r2
   12224:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   12228:	f00f ff31 	bl	2208e <encode_uint>
   1222c:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   12230:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   12234:	2b00      	cmp	r3, #0
   12236:	db4d      	blt.n	122d4 <cbvprintf+0x744>
				size_t len = bpe - bps;
   12238:	697a      	ldr	r2, [r7, #20]
   1223a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   1223e:	1ad3      	subs	r3, r2, r3
   12240:	677b      	str	r3, [r7, #116]	; 0x74

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   12242:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   12246:	7813      	ldrb	r3, [r2, #0]
   12248:	f36f 1386 	bfc	r3, #6, #1
   1224c:	7013      	strb	r3, [r2, #0]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   1224e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   12252:	6f7a      	ldr	r2, [r7, #116]	; 0x74
   12254:	429a      	cmp	r2, r3
   12256:	d23d      	bcs.n	122d4 <cbvprintf+0x744>
					conv->pad0_value = precision - (int)len;
   12258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1225a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
   1225e:	1ad2      	subs	r2, r2, r3
   12260:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   12264:	605a      	str	r2, [r3, #4]
				}
			}

			break;
   12266:	e035      	b.n	122d4 <cbvprintf+0x744>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   12268:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1226c:	681b      	ldr	r3, [r3, #0]
   1226e:	2b00      	cmp	r3, #0
   12270:	d01b      	beq.n	122aa <cbvprintf+0x71a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12272:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   12276:	681b      	ldr	r3, [r3, #0]
   12278:	4618      	mov	r0, r3
   1227a:	f04f 0100 	mov.w	r1, #0
   1227e:	697b      	ldr	r3, [r7, #20]
   12280:	f107 0230 	add.w	r2, r7, #48	; 0x30
   12284:	9300      	str	r3, [sp, #0]
   12286:	4613      	mov	r3, r2
   12288:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   1228c:	f00f feff 	bl	2208e <encode_uint>
   12290:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
						  buf, bpe);

				/* Use 0x prefix */
				conv->altform_0c = true;
   12294:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
   12298:	7893      	ldrb	r3, [r2, #2]
   1229a:	f043 0310 	orr.w	r3, r3, #16
   1229e:	7093      	strb	r3, [r2, #2]
				conv->specifier = 'x';
   122a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   122a4:	2278      	movs	r2, #120	; 0x78
   122a6:	70da      	strb	r2, [r3, #3]

				goto prec_int_pad0;
   122a8:	e7c2      	b.n	12230 <cbvprintf+0x6a0>
			}

			bps = "(nil)";
   122aa:	4bab      	ldr	r3, [pc, #684]	; (12558 <cbvprintf+0x9c8>)
   122ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			bpe = bps + 5;
   122b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   122b4:	3305      	adds	r3, #5
   122b6:	617b      	str	r3, [r7, #20]

			break;
   122b8:	e00d      	b.n	122d6 <cbvprintf+0x746>
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   122ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   122be:	681b      	ldr	r3, [r3, #0]
   122c0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
   122c4:	4619      	mov	r1, r3
   122c6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
   122ca:	f7ff fc11 	bl	11af0 <store_count>
			}

			break;
   122ce:	e002      	b.n	122d6 <cbvprintf+0x746>
		default:
			/* Add an empty default with break, this is a defensive
			 * programming. Static analysis tool won't raise a violation
			 * if default is empty, but has that comment.
			 */
			break;
   122d0:	bf00      	nop
   122d2:	e000      	b.n	122d6 <cbvprintf+0x746>
			break;
   122d4:	bf00      	nop
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   122d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   122da:	2b00      	cmp	r3, #0
   122dc:	f000 8130 	beq.w	12540 <cbvprintf+0x9b0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   122e0:	697a      	ldr	r2, [r7, #20]
   122e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   122e6:	1ad3      	subs	r3, r2, r3
   122e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		int pad_len = 0;
   122ec:	2300      	movs	r3, #0
   122ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		if (sign != 0) {
   122f2:	7cfb      	ldrb	r3, [r7, #19]
   122f4:	2b00      	cmp	r3, #0
   122f6:	d004      	beq.n	12302 <cbvprintf+0x772>
			nj_len += 1U;
   122f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   122fc:	3301      	adds	r3, #1
   122fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		}

		if (conv->altform_0c) {
   12302:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   12306:	789b      	ldrb	r3, [r3, #2]
   12308:	f003 0310 	and.w	r3, r3, #16
   1230c:	b2db      	uxtb	r3, r3
   1230e:	2b00      	cmp	r3, #0
   12310:	d005      	beq.n	1231e <cbvprintf+0x78e>
			nj_len += 2U;
   12312:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   12316:	3302      	adds	r3, #2
   12318:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
   1231c:	e00c      	b.n	12338 <cbvprintf+0x7a8>
		} else if (conv->altform_0) {
   1231e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   12322:	789b      	ldrb	r3, [r3, #2]
   12324:	f003 0308 	and.w	r3, r3, #8
   12328:	b2db      	uxtb	r3, r3
   1232a:	2b00      	cmp	r3, #0
   1232c:	d004      	beq.n	12338 <cbvprintf+0x7a8>
			nj_len += 1U;
   1232e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   12332:	3301      	adds	r3, #1
   12334:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		}

		nj_len += conv->pad0_value;
   12338:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1233c:	685b      	ldr	r3, [r3, #4]
   1233e:	461a      	mov	r2, r3
   12340:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   12344:	4413      	add	r3, r2
   12346:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		if (conv->pad_fp) {
   1234a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1234e:	789b      	ldrb	r3, [r3, #2]
   12350:	f003 0340 	and.w	r3, r3, #64	; 0x40
   12354:	b2db      	uxtb	r3, r3
   12356:	2b00      	cmp	r3, #0
   12358:	d008      	beq.n	1236c <cbvprintf+0x7dc>
			nj_len += conv->pad0_pre_exp;
   1235a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1235e:	689b      	ldr	r3, [r3, #8]
   12360:	461a      	mov	r2, r3
   12362:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   12366:	4413      	add	r3, r2
   12368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   1236c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   12370:	2b00      	cmp	r3, #0
   12372:	dd4e      	ble.n	12412 <cbvprintf+0x882>
			width -= (int)nj_len;
   12374:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   12378:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
   1237c:	1ad3      	subs	r3, r2, r3
   1237e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

			if (!conv->flag_dash) {
   12382:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   12386:	781b      	ldrb	r3, [r3, #0]
   12388:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1238c:	b2db      	uxtb	r3, r3
   1238e:	f083 0301 	eor.w	r3, r3, #1
   12392:	b2db      	uxtb	r3, r3
   12394:	2b00      	cmp	r3, #0
   12396:	d03c      	beq.n	12412 <cbvprintf+0x882>
				char pad = ' ';
   12398:	2320      	movs	r3, #32
   1239a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   1239e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   123a2:	781b      	ldrb	r3, [r3, #0]
   123a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
   123a8:	b2db      	uxtb	r3, r3
   123aa:	2b00      	cmp	r3, #0
   123ac:	d02a      	beq.n	12404 <cbvprintf+0x874>
					if (sign != 0) {
   123ae:	7cfb      	ldrb	r3, [r7, #19]
   123b0:	2b00      	cmp	r3, #0
   123b2:	d012      	beq.n	123da <cbvprintf+0x84a>
						OUTC(sign);
   123b4:	7cfb      	ldrb	r3, [r7, #19]
   123b6:	461a      	mov	r2, r3
   123b8:	68fb      	ldr	r3, [r7, #12]
   123ba:	68b9      	ldr	r1, [r7, #8]
   123bc:	4610      	mov	r0, r2
   123be:	4798      	blx	r3
   123c0:	66f8      	str	r0, [r7, #108]	; 0x6c
   123c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   123c4:	2b00      	cmp	r3, #0
   123c6:	da01      	bge.n	123cc <cbvprintf+0x83c>
   123c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   123ca:	e0c1      	b.n	12550 <cbvprintf+0x9c0>
   123cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   123d0:	3301      	adds	r3, #1
   123d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						sign = 0;
   123d6:	2300      	movs	r3, #0
   123d8:	74fb      	strb	r3, [r7, #19]
					}
					pad = '0';
   123da:	2330      	movs	r3, #48	; 0x30
   123dc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
				}

				while (width-- > 0) {
   123e0:	e010      	b.n	12404 <cbvprintf+0x874>
					OUTC(pad);
   123e2:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
   123e6:	68fb      	ldr	r3, [r7, #12]
   123e8:	68b9      	ldr	r1, [r7, #8]
   123ea:	4610      	mov	r0, r2
   123ec:	4798      	blx	r3
   123ee:	66b8      	str	r0, [r7, #104]	; 0x68
   123f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   123f2:	2b00      	cmp	r3, #0
   123f4:	da01      	bge.n	123fa <cbvprintf+0x86a>
   123f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   123f8:	e0aa      	b.n	12550 <cbvprintf+0x9c0>
   123fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   123fe:	3301      	adds	r3, #1
   12400:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				while (width-- > 0) {
   12404:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   12408:	1e5a      	subs	r2, r3, #1
   1240a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
   1240e:	2b00      	cmp	r3, #0
   12410:	dce7      	bgt.n	123e2 <cbvprintf+0x852>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   12412:	7cfb      	ldrb	r3, [r7, #19]
   12414:	2b00      	cmp	r3, #0
   12416:	d010      	beq.n	1243a <cbvprintf+0x8aa>
			OUTC(sign);
   12418:	7cfb      	ldrb	r3, [r7, #19]
   1241a:	461a      	mov	r2, r3
   1241c:	68fb      	ldr	r3, [r7, #12]
   1241e:	68b9      	ldr	r1, [r7, #8]
   12420:	4610      	mov	r0, r2
   12422:	4798      	blx	r3
   12424:	6678      	str	r0, [r7, #100]	; 0x64
   12426:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   12428:	2b00      	cmp	r3, #0
   1242a:	da01      	bge.n	12430 <cbvprintf+0x8a0>
   1242c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1242e:	e08f      	b.n	12550 <cbvprintf+0x9c0>
   12430:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   12434:	3301      	adds	r3, #1
   12436:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   1243a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1243e:	789b      	ldrb	r3, [r3, #2]
   12440:	f3c3 1300 	ubfx	r3, r3, #4, #1
   12444:	b2da      	uxtb	r2, r3
   12446:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1244a:	789b      	ldrb	r3, [r3, #2]
   1244c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   12450:	b2db      	uxtb	r3, r3
   12452:	4313      	orrs	r3, r2
   12454:	b2db      	uxtb	r3, r3
   12456:	2b00      	cmp	r3, #0
   12458:	d00e      	beq.n	12478 <cbvprintf+0x8e8>
				OUTC('0');
   1245a:	68fb      	ldr	r3, [r7, #12]
   1245c:	68b9      	ldr	r1, [r7, #8]
   1245e:	2030      	movs	r0, #48	; 0x30
   12460:	4798      	blx	r3
   12462:	6638      	str	r0, [r7, #96]	; 0x60
   12464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   12466:	2b00      	cmp	r3, #0
   12468:	da01      	bge.n	1246e <cbvprintf+0x8de>
   1246a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1246c:	e070      	b.n	12550 <cbvprintf+0x9c0>
   1246e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   12472:	3301      	adds	r3, #1
   12474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			}

			if (conv->altform_0c) {
   12478:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1247c:	789b      	ldrb	r3, [r3, #2]
   1247e:	f003 0310 	and.w	r3, r3, #16
   12482:	b2db      	uxtb	r3, r3
   12484:	2b00      	cmp	r3, #0
   12486:	d012      	beq.n	124ae <cbvprintf+0x91e>
				OUTC(conv->specifier);
   12488:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1248c:	78db      	ldrb	r3, [r3, #3]
   1248e:	461a      	mov	r2, r3
   12490:	68fb      	ldr	r3, [r7, #12]
   12492:	68b9      	ldr	r1, [r7, #8]
   12494:	4610      	mov	r0, r2
   12496:	4798      	blx	r3
   12498:	65f8      	str	r0, [r7, #92]	; 0x5c
   1249a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1249c:	2b00      	cmp	r3, #0
   1249e:	da01      	bge.n	124a4 <cbvprintf+0x914>
   124a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   124a2:	e055      	b.n	12550 <cbvprintf+0x9c0>
   124a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   124a8:	3301      	adds	r3, #1
   124aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			}

			pad_len = conv->pad0_value;
   124ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   124b2:	685b      	ldr	r3, [r3, #4]
   124b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			while (pad_len-- > 0) {
   124b8:	e00e      	b.n	124d8 <cbvprintf+0x948>
				OUTC('0');
   124ba:	68fb      	ldr	r3, [r7, #12]
   124bc:	68b9      	ldr	r1, [r7, #8]
   124be:	2030      	movs	r0, #48	; 0x30
   124c0:	4798      	blx	r3
   124c2:	6538      	str	r0, [r7, #80]	; 0x50
   124c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   124c6:	2b00      	cmp	r3, #0
   124c8:	da01      	bge.n	124ce <cbvprintf+0x93e>
   124ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   124cc:	e040      	b.n	12550 <cbvprintf+0x9c0>
   124ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   124d2:	3301      	adds	r3, #1
   124d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			while (pad_len-- > 0) {
   124d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   124dc:	1e5a      	subs	r2, r3, #1
   124de:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
   124e2:	2b00      	cmp	r3, #0
   124e4:	dce9      	bgt.n	124ba <cbvprintf+0x92a>
			}

			OUTS(bps, bpe);
   124e6:	697b      	ldr	r3, [r7, #20]
   124e8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
   124ec:	68b9      	ldr	r1, [r7, #8]
   124ee:	68f8      	ldr	r0, [r7, #12]
   124f0:	f00f fe3b 	bl	2216a <outs>
   124f4:	65b8      	str	r0, [r7, #88]	; 0x58
   124f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   124f8:	2b00      	cmp	r3, #0
   124fa:	da01      	bge.n	12500 <cbvprintf+0x970>
   124fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   124fe:	e027      	b.n	12550 <cbvprintf+0x9c0>
   12500:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   12502:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
   12506:	4413      	add	r3, r2
   12508:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		}

		/* Finish left justification */
		while (width > 0) {
   1250c:	e013      	b.n	12536 <cbvprintf+0x9a6>
			OUTC(' ');
   1250e:	68fb      	ldr	r3, [r7, #12]
   12510:	68b9      	ldr	r1, [r7, #8]
   12512:	2020      	movs	r0, #32
   12514:	4798      	blx	r3
   12516:	6578      	str	r0, [r7, #84]	; 0x54
   12518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1251a:	2b00      	cmp	r3, #0
   1251c:	da01      	bge.n	12522 <cbvprintf+0x992>
   1251e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   12520:	e016      	b.n	12550 <cbvprintf+0x9c0>
   12522:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   12526:	3301      	adds	r3, #1
   12528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			--width;
   1252c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   12530:	3b01      	subs	r3, #1
   12532:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		while (width > 0) {
   12536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   1253a:	2b00      	cmp	r3, #0
   1253c:	dce7      	bgt.n	1250e <cbvprintf+0x97e>
   1253e:	e000      	b.n	12542 <cbvprintf+0x9b2>
			continue;
   12540:	bf00      	nop
	while (*fp != 0) {
   12542:	687b      	ldr	r3, [r7, #4]
   12544:	781b      	ldrb	r3, [r3, #0]
   12546:	2b00      	cmp	r3, #0
   12548:	f47f ab2e 	bne.w	11ba8 <cbvprintf+0x18>
		}
	}

	return count;
   1254c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
#undef OUTS
#undef OUTC
}
   12550:	4618      	mov	r0, r3
   12552:	37b8      	adds	r7, #184	; 0xb8
   12554:	46bd      	mov	sp, r7
   12556:	bd80      	pop	{r7, pc}
   12558:	00029978 	.word	0x00029978

0001255c <nrfx_coredep_delay_us>:
}

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
   1255c:	b580      	push	{r7, lr}
   1255e:	b084      	sub	sp, #16
   12560:	af00      	add	r7, sp, #0
   12562:	6078      	str	r0, [r7, #4]
    if (time_us == 0)
   12564:	687b      	ldr	r3, [r7, #4]
   12566:	2b00      	cmp	r3, #0
   12568:	d00a      	beq.n	12580 <nrfx_coredep_delay_us+0x24>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   1256a:	4b07      	ldr	r3, [pc, #28]	; (12588 <nrfx_coredep_delay_us+0x2c>)
   1256c:	f043 0301 	orr.w	r3, r3, #1
    const delay_func_t delay_cycles =
   12570:	60fb      	str	r3, [r7, #12]
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
   12572:	687b      	ldr	r3, [r7, #4]
   12574:	019b      	lsls	r3, r3, #6
   12576:	60bb      	str	r3, [r7, #8]
    delay_cycles(cycles);
   12578:	68fb      	ldr	r3, [r7, #12]
   1257a:	68b8      	ldr	r0, [r7, #8]
   1257c:	4798      	blx	r3
   1257e:	e000      	b.n	12582 <nrfx_coredep_delay_us+0x26>
        return;
   12580:	bf00      	nop
}
   12582:	3710      	adds	r7, #16
   12584:	46bd      	mov	sp, r7
   12586:	bd80      	pop	{r7, pc}
   12588:	0002ca50 	.word	0x0002ca50

0001258c <nordicsemi_nrf91_init>:

#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf91_init(const struct device *arg)
{
   1258c:	b480      	push	{r7}
   1258e:	b087      	sub	sp, #28
   12590:	af00      	add	r7, sp, #0
   12592:	6078      	str	r0, [r7, #4]
	__asm__ volatile(
   12594:	f04f 0320 	mov.w	r3, #32
   12598:	f3ef 8211 	mrs	r2, BASEPRI
   1259c:	f383 8811 	msr	BASEPRI, r3
   125a0:	f3bf 8f6f 	isb	sy
   125a4:	60fa      	str	r2, [r7, #12]
   125a6:	60bb      	str	r3, [r7, #8]
	return key;
   125a8:	68fb      	ldr	r3, [r7, #12]
	uint32_t key;

	ARG_UNUSED(arg);

	key = irq_lock();
   125aa:	617b      	str	r3, [r7, #20]

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   125ac:	4b08      	ldr	r3, [pc, #32]	; (125d0 <nordicsemi_nrf91_init+0x44>)
   125ae:	2201      	movs	r2, #1
   125b0:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
   125b4:	697b      	ldr	r3, [r7, #20]
   125b6:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
   125b8:	693b      	ldr	r3, [r7, #16]
   125ba:	f383 8811 	msr	BASEPRI, r3
   125be:	f3bf 8f6f 	isb	sy
}
   125c2:	bf00      	nop
	*/
	NMI_INIT();

	irq_unlock(key);

	return 0;
   125c4:	2300      	movs	r3, #0
}
   125c6:	4618      	mov	r0, r3
   125c8:	371c      	adds	r7, #28
   125ca:	46bd      	mov	sp, r7
   125cc:	bc80      	pop	{r7}
   125ce:	4770      	bx	lr
   125d0:	40039000 	.word	0x40039000

000125d4 <log_const_source_id>:
{
   125d4:	b480      	push	{r7}
   125d6:	b083      	sub	sp, #12
   125d8:	af00      	add	r7, sp, #0
   125da:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   125dc:	687b      	ldr	r3, [r7, #4]
   125de:	4a04      	ldr	r2, [pc, #16]	; (125f0 <log_const_source_id+0x1c>)
   125e0:	1a9b      	subs	r3, r3, r2
   125e2:	08db      	lsrs	r3, r3, #3
}
   125e4:	4618      	mov	r0, r3
   125e6:	370c      	adds	r7, #12
   125e8:	46bd      	mov	sp, r7
   125ea:	bc80      	pop	{r7}
   125ec:	4770      	bx	lr
   125ee:	bf00      	nop
   125f0:	00029354 	.word	0x00029354

000125f4 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   125f4:	b580      	push	{r7, lr}
   125f6:	b088      	sub	sp, #32
   125f8:	af00      	add	r7, sp, #0
   125fa:	1d3b      	adds	r3, r7, #4
   125fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	switch (info.state) {
   12600:	793b      	ldrb	r3, [r7, #4]
   12602:	2b06      	cmp	r3, #6
   12604:	d104      	bne.n	12610 <pm_power_state_set+0x1c>
	case PM_STATE_SOFT_OFF:
		nrf_regulators_system_off(NRF_REGULATORS);
   12606:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   1260a:	f00f fe02 	bl	22212 <nrf_regulators_system_off>
		break;
   1260e:	e03a      	b.n	12686 <pm_power_state_set+0x92>
	default:
		LOG_DBG("Unsupported power state %u", info.state);
   12610:	2303      	movs	r3, #3
   12612:	2b03      	cmp	r3, #3
   12614:	d801      	bhi.n	1261a <pm_power_state_set+0x26>
   12616:	bf00      	nop
		break;
   12618:	e034      	b.n	12684 <pm_power_state_set+0x90>
		LOG_DBG("Unsupported power state %u", info.state);
   1261a:	f00f fdf3 	bl	22204 <k_is_user_context>
   1261e:	4603      	mov	r3, r0
   12620:	77fb      	strb	r3, [r7, #31]
   12622:	2300      	movs	r3, #0
   12624:	61bb      	str	r3, [r7, #24]
   12626:	2303      	movs	r3, #3
   12628:	2b00      	cmp	r3, #0
   1262a:	d007      	beq.n	1263c <pm_power_state_set+0x48>
   1262c:	4b18      	ldr	r3, [pc, #96]	; (12690 <pm_power_state_set+0x9c>)
   1262e:	681b      	ldr	r3, [r3, #0]
   12630:	4618      	mov	r0, r3
   12632:	f7ff ffcf 	bl	125d4 <log_const_source_id>
   12636:	4603      	mov	r3, r0
   12638:	b29b      	uxth	r3, r3
   1263a:	e000      	b.n	1263e <pm_power_state_set+0x4a>
   1263c:	2300      	movs	r3, #0
   1263e:	83bb      	strh	r3, [r7, #28]
   12640:	7d3b      	ldrb	r3, [r7, #20]
   12642:	2204      	movs	r2, #4
   12644:	f362 0302 	bfi	r3, r2, #0, #3
   12648:	753b      	strb	r3, [r7, #20]
   1264a:	7d3b      	ldrb	r3, [r7, #20]
   1264c:	f36f 03c5 	bfc	r3, #3, #3
   12650:	753b      	strb	r3, [r7, #20]
   12652:	8bbb      	ldrh	r3, [r7, #28]
   12654:	f3c3 0309 	ubfx	r3, r3, #0, #10
   12658:	b29a      	uxth	r2, r3
   1265a:	8abb      	ldrh	r3, [r7, #20]
   1265c:	f362 138f 	bfi	r3, r2, #6, #10
   12660:	82bb      	strh	r3, [r7, #20]
   12662:	7ffb      	ldrb	r3, [r7, #31]
   12664:	2b00      	cmp	r3, #0
   12666:	d006      	beq.n	12676 <pm_power_state_set+0x82>
   12668:	793b      	ldrb	r3, [r7, #4]
   1266a:	4a0a      	ldr	r2, [pc, #40]	; (12694 <pm_power_state_set+0xa0>)
   1266c:	490a      	ldr	r1, [pc, #40]	; (12698 <pm_power_state_set+0xa4>)
   1266e:	8ab8      	ldrh	r0, [r7, #20]
   12670:	f000 fd6e 	bl	13150 <log_from_user>
		break;
   12674:	e006      	b.n	12684 <pm_power_state_set+0x90>
		LOG_DBG("Unsupported power state %u", info.state);
   12676:	4907      	ldr	r1, [pc, #28]	; (12694 <pm_power_state_set+0xa0>)
   12678:	793b      	ldrb	r3, [r7, #4]
   1267a:	461a      	mov	r2, r3
   1267c:	8abb      	ldrh	r3, [r7, #20]
   1267e:	4806      	ldr	r0, [pc, #24]	; (12698 <pm_power_state_set+0xa4>)
   12680:	f010 fa6c 	bl	22b5c <log_2>
		break;
   12684:	bf00      	nop
	}
}
   12686:	bf00      	nop
   12688:	3720      	adds	r7, #32
   1268a:	46bd      	mov	sp, r7
   1268c:	bd80      	pop	{r7, pc}
   1268e:	bf00      	nop
   12690:	20014508 	.word	0x20014508
   12694:	0002ca58 	.word	0x0002ca58
   12698:	00029984 	.word	0x00029984

0001269c <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1269c:	b580      	push	{r7, lr}
   1269e:	b088      	sub	sp, #32
   126a0:	af00      	add	r7, sp, #0
   126a2:	1d3b      	adds	r3, r7, #4
   126a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	switch (info.state) {
   126a8:	793b      	ldrb	r3, [r7, #4]
   126aa:	2b06      	cmp	r3, #6
   126ac:	d03a      	beq.n	12724 <pm_power_state_exit_post_ops+0x88>
	case PM_STATE_SOFT_OFF:
		/* Nothing to do. */
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
   126ae:	2303      	movs	r3, #3
   126b0:	2b03      	cmp	r3, #3
   126b2:	d801      	bhi.n	126b8 <pm_power_state_exit_post_ops+0x1c>
   126b4:	bf00      	nop
		break;
   126b6:	e036      	b.n	12726 <pm_power_state_exit_post_ops+0x8a>
		LOG_DBG("Unsupported power state %u", info.state);
   126b8:	f00f fda4 	bl	22204 <k_is_user_context>
   126bc:	4603      	mov	r3, r0
   126be:	77fb      	strb	r3, [r7, #31]
   126c0:	2300      	movs	r3, #0
   126c2:	617b      	str	r3, [r7, #20]
   126c4:	2303      	movs	r3, #3
   126c6:	2b00      	cmp	r3, #0
   126c8:	d007      	beq.n	126da <pm_power_state_exit_post_ops+0x3e>
   126ca:	4b1d      	ldr	r3, [pc, #116]	; (12740 <pm_power_state_exit_post_ops+0xa4>)
   126cc:	681b      	ldr	r3, [r3, #0]
   126ce:	4618      	mov	r0, r3
   126d0:	f7ff ff80 	bl	125d4 <log_const_source_id>
   126d4:	4603      	mov	r3, r0
   126d6:	b29b      	uxth	r3, r3
   126d8:	e000      	b.n	126dc <pm_power_state_exit_post_ops+0x40>
   126da:	2300      	movs	r3, #0
   126dc:	83bb      	strh	r3, [r7, #28]
   126de:	7c3b      	ldrb	r3, [r7, #16]
   126e0:	2204      	movs	r2, #4
   126e2:	f362 0302 	bfi	r3, r2, #0, #3
   126e6:	743b      	strb	r3, [r7, #16]
   126e8:	7c3b      	ldrb	r3, [r7, #16]
   126ea:	f36f 03c5 	bfc	r3, #3, #3
   126ee:	743b      	strb	r3, [r7, #16]
   126f0:	8bbb      	ldrh	r3, [r7, #28]
   126f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
   126f6:	b29a      	uxth	r2, r3
   126f8:	8a3b      	ldrh	r3, [r7, #16]
   126fa:	f362 138f 	bfi	r3, r2, #6, #10
   126fe:	823b      	strh	r3, [r7, #16]
   12700:	7ffb      	ldrb	r3, [r7, #31]
   12702:	2b00      	cmp	r3, #0
   12704:	d006      	beq.n	12714 <pm_power_state_exit_post_ops+0x78>
   12706:	793b      	ldrb	r3, [r7, #4]
   12708:	4a0e      	ldr	r2, [pc, #56]	; (12744 <pm_power_state_exit_post_ops+0xa8>)
   1270a:	490f      	ldr	r1, [pc, #60]	; (12748 <pm_power_state_exit_post_ops+0xac>)
   1270c:	8a38      	ldrh	r0, [r7, #16]
   1270e:	f000 fd1f 	bl	13150 <log_from_user>
		break;
   12712:	e008      	b.n	12726 <pm_power_state_exit_post_ops+0x8a>
		LOG_DBG("Unsupported power state %u", info.state);
   12714:	490b      	ldr	r1, [pc, #44]	; (12744 <pm_power_state_exit_post_ops+0xa8>)
   12716:	793b      	ldrb	r3, [r7, #4]
   12718:	461a      	mov	r2, r3
   1271a:	8a3b      	ldrh	r3, [r7, #16]
   1271c:	480a      	ldr	r0, [pc, #40]	; (12748 <pm_power_state_exit_post_ops+0xac>)
   1271e:	f010 fa1d 	bl	22b5c <log_2>
		break;
   12722:	e000      	b.n	12726 <pm_power_state_exit_post_ops+0x8a>
		break;
   12724:	bf00      	nop
   12726:	2300      	movs	r3, #0
   12728:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
   1272a:	69bb      	ldr	r3, [r7, #24]
   1272c:	f383 8811 	msr	BASEPRI, r3
   12730:	f3bf 8f6f 	isb	sy
}
   12734:	bf00      	nop
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   12736:	bf00      	nop
   12738:	3720      	adds	r7, #32
   1273a:	46bd      	mov	sp, r7
   1273c:	bd80      	pop	{r7, pc}
   1273e:	bf00      	nop
   12740:	20014508 	.word	0x20014508
   12744:	0002ca6c 	.word	0x0002ca6c
   12748:	00029984 	.word	0x00029984

0001274c <log_name_get>:
{
   1274c:	b480      	push	{r7}
   1274e:	b083      	sub	sp, #12
   12750:	af00      	add	r7, sp, #0
   12752:	6078      	str	r0, [r7, #4]
	return __log_const_start[source_id].name;
   12754:	4a04      	ldr	r2, [pc, #16]	; (12768 <log_name_get+0x1c>)
   12756:	687b      	ldr	r3, [r7, #4]
   12758:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
}
   1275c:	4618      	mov	r0, r3
   1275e:	370c      	adds	r7, #12
   12760:	46bd      	mov	sp, r7
   12762:	bc80      	pop	{r7}
   12764:	4770      	bx	lr
   12766:	bf00      	nop
   12768:	00029354 	.word	0x00029354

0001276c <log_const_source_id>:
{
   1276c:	b480      	push	{r7}
   1276e:	b083      	sub	sp, #12
   12770:	af00      	add	r7, sp, #0
   12772:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   12774:	687b      	ldr	r3, [r7, #4]
   12776:	4a04      	ldr	r2, [pc, #16]	; (12788 <log_const_source_id+0x1c>)
   12778:	1a9b      	subs	r3, r3, r2
   1277a:	08db      	lsrs	r3, r3, #3
}
   1277c:	4618      	mov	r0, r3
   1277e:	370c      	adds	r7, #12
   12780:	46bd      	mov	sp, r7
   12782:	bc80      	pop	{r7}
   12784:	4770      	bx	lr
   12786:	bf00      	nop
   12788:	00029354 	.word	0x00029354

0001278c <log_sources_count>:

/** @brief Get number of registered sources. */
static inline uint32_t log_sources_count(void)
{
   1278c:	b580      	push	{r7, lr}
   1278e:	af00      	add	r7, sp, #0
	return log_const_source_id(__log_const_end);
   12790:	4802      	ldr	r0, [pc, #8]	; (1279c <log_sources_count+0x10>)
   12792:	f7ff ffeb 	bl	1276c <log_const_source_id>
   12796:	4603      	mov	r3, r0
}
   12798:	4618      	mov	r0, r3
   1279a:	bd80      	pop	{r7, pc}
   1279c:	000293a4 	.word	0x000293a4

000127a0 <log_backend_put>:
 * @param[in] backend  Pointer to the backend instance.
 * @param[in] msg      Pointer to message with log entry.
 */
static inline void log_backend_put(const struct log_backend *const backend,
				   struct log_msg *msg)
{
   127a0:	b580      	push	{r7, lr}
   127a2:	b082      	sub	sp, #8
   127a4:	af00      	add	r7, sp, #0
   127a6:	6078      	str	r0, [r7, #4]
   127a8:	6039      	str	r1, [r7, #0]
	__ASSERT_NO_MSG(backend != NULL);
   127aa:	687b      	ldr	r3, [r7, #4]
   127ac:	2b00      	cmp	r3, #0
   127ae:	d109      	bne.n	127c4 <log_backend_put+0x24>
   127b0:	236b      	movs	r3, #107	; 0x6b
   127b2:	4a10      	ldr	r2, [pc, #64]	; (127f4 <log_backend_put+0x54>)
   127b4:	4910      	ldr	r1, [pc, #64]	; (127f8 <log_backend_put+0x58>)
   127b6:	4811      	ldr	r0, [pc, #68]	; (127fc <log_backend_put+0x5c>)
   127b8:	f00e fc56 	bl	21068 <printk>
   127bc:	216b      	movs	r1, #107	; 0x6b
   127be:	480d      	ldr	r0, [pc, #52]	; (127f4 <log_backend_put+0x54>)
   127c0:	f00f fcff 	bl	221c2 <assert_post_action>
	__ASSERT_NO_MSG(msg != NULL);
   127c4:	683b      	ldr	r3, [r7, #0]
   127c6:	2b00      	cmp	r3, #0
   127c8:	d109      	bne.n	127de <log_backend_put+0x3e>
   127ca:	236c      	movs	r3, #108	; 0x6c
   127cc:	4a09      	ldr	r2, [pc, #36]	; (127f4 <log_backend_put+0x54>)
   127ce:	490c      	ldr	r1, [pc, #48]	; (12800 <log_backend_put+0x60>)
   127d0:	480a      	ldr	r0, [pc, #40]	; (127fc <log_backend_put+0x5c>)
   127d2:	f00e fc49 	bl	21068 <printk>
   127d6:	216c      	movs	r1, #108	; 0x6c
   127d8:	4806      	ldr	r0, [pc, #24]	; (127f4 <log_backend_put+0x54>)
   127da:	f00f fcf2 	bl	221c2 <assert_post_action>
	backend->api->put(backend, msg);
   127de:	687b      	ldr	r3, [r7, #4]
   127e0:	681b      	ldr	r3, [r3, #0]
   127e2:	685b      	ldr	r3, [r3, #4]
   127e4:	6839      	ldr	r1, [r7, #0]
   127e6:	6878      	ldr	r0, [r7, #4]
   127e8:	4798      	blx	r3
}
   127ea:	bf00      	nop
   127ec:	3708      	adds	r7, #8
   127ee:	46bd      	mov	sp, r7
   127f0:	bd80      	pop	{r7, pc}
   127f2:	bf00      	nop
   127f4:	000299a4 	.word	0x000299a4
   127f8:	000299d8 	.word	0x000299d8
   127fc:	000299f0 	.word	0x000299f0
   12800:	00029a10 	.word	0x00029a10

00012804 <log_backend_dropped>:
 * @param[in] backend  Pointer to the backend instance.
 * @param[in] cnt      Number of dropped logs since last notification.
 */
static inline void log_backend_dropped(const struct log_backend *const backend,
				       uint32_t cnt)
{
   12804:	b580      	push	{r7, lr}
   12806:	b082      	sub	sp, #8
   12808:	af00      	add	r7, sp, #0
   1280a:	6078      	str	r0, [r7, #4]
   1280c:	6039      	str	r1, [r7, #0]
	__ASSERT_NO_MSG(backend != NULL);
   1280e:	687b      	ldr	r3, [r7, #4]
   12810:	2b00      	cmp	r3, #0
   12812:	d109      	bne.n	12828 <log_backend_dropped+0x24>
   12814:	23b4      	movs	r3, #180	; 0xb4
   12816:	4a0c      	ldr	r2, [pc, #48]	; (12848 <log_backend_dropped+0x44>)
   12818:	490c      	ldr	r1, [pc, #48]	; (1284c <log_backend_dropped+0x48>)
   1281a:	480d      	ldr	r0, [pc, #52]	; (12850 <log_backend_dropped+0x4c>)
   1281c:	f00e fc24 	bl	21068 <printk>
   12820:	21b4      	movs	r1, #180	; 0xb4
   12822:	4809      	ldr	r0, [pc, #36]	; (12848 <log_backend_dropped+0x44>)
   12824:	f00f fccd 	bl	221c2 <assert_post_action>

	if (backend->api->dropped != NULL) {
   12828:	687b      	ldr	r3, [r7, #4]
   1282a:	681b      	ldr	r3, [r3, #0]
   1282c:	691b      	ldr	r3, [r3, #16]
   1282e:	2b00      	cmp	r3, #0
   12830:	d005      	beq.n	1283e <log_backend_dropped+0x3a>
		backend->api->dropped(backend, cnt);
   12832:	687b      	ldr	r3, [r7, #4]
   12834:	681b      	ldr	r3, [r3, #0]
   12836:	691b      	ldr	r3, [r3, #16]
   12838:	6839      	ldr	r1, [r7, #0]
   1283a:	6878      	ldr	r0, [r7, #4]
   1283c:	4798      	blx	r3
	}
}
   1283e:	bf00      	nop
   12840:	3708      	adds	r7, #8
   12842:	46bd      	mov	sp, r7
   12844:	bd80      	pop	{r7, pc}
   12846:	bf00      	nop
   12848:	000299a4 	.word	0x000299a4
   1284c:	000299d8 	.word	0x000299d8
   12850:	000299f0 	.word	0x000299f0

00012854 <log_backend_panic>:
 * @brief Reconfigure backend to panic mode.
 *
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_panic(const struct log_backend *const backend)
{
   12854:	b580      	push	{r7, lr}
   12856:	b082      	sub	sp, #8
   12858:	af00      	add	r7, sp, #0
   1285a:	6078      	str	r0, [r7, #4]
	__ASSERT_NO_MSG(backend != NULL);
   1285c:	687b      	ldr	r3, [r7, #4]
   1285e:	2b00      	cmp	r3, #0
   12860:	d109      	bne.n	12876 <log_backend_panic+0x22>
   12862:	23c2      	movs	r3, #194	; 0xc2
   12864:	4a08      	ldr	r2, [pc, #32]	; (12888 <log_backend_panic+0x34>)
   12866:	4909      	ldr	r1, [pc, #36]	; (1288c <log_backend_panic+0x38>)
   12868:	4809      	ldr	r0, [pc, #36]	; (12890 <log_backend_panic+0x3c>)
   1286a:	f00e fbfd 	bl	21068 <printk>
   1286e:	21c2      	movs	r1, #194	; 0xc2
   12870:	4805      	ldr	r0, [pc, #20]	; (12888 <log_backend_panic+0x34>)
   12872:	f00f fca6 	bl	221c2 <assert_post_action>
	backend->api->panic(backend);
   12876:	687b      	ldr	r3, [r7, #4]
   12878:	681b      	ldr	r3, [r3, #0]
   1287a:	695b      	ldr	r3, [r3, #20]
   1287c:	6878      	ldr	r0, [r7, #4]
   1287e:	4798      	blx	r3
}
   12880:	bf00      	nop
   12882:	3708      	adds	r7, #8
   12884:	46bd      	mov	sp, r7
   12886:	bd80      	pop	{r7, pc}
   12888:	000299a4 	.word	0x000299a4
   1288c:	000299d8 	.word	0x000299d8
   12890:	000299f0 	.word	0x000299f0

00012894 <log_backend_id_set>:
 * @param backend  Pointer to the backend instance.
 * @param id       ID.
 */
static inline void log_backend_id_set(const struct log_backend *const backend,
				      uint8_t id)
{
   12894:	b580      	push	{r7, lr}
   12896:	b082      	sub	sp, #8
   12898:	af00      	add	r7, sp, #0
   1289a:	6078      	str	r0, [r7, #4]
   1289c:	460b      	mov	r3, r1
   1289e:	70fb      	strb	r3, [r7, #3]
	__ASSERT_NO_MSG(backend != NULL);
   128a0:	687b      	ldr	r3, [r7, #4]
   128a2:	2b00      	cmp	r3, #0
   128a4:	d109      	bne.n	128ba <log_backend_id_set+0x26>
   128a6:	23d1      	movs	r3, #209	; 0xd1
   128a8:	4a08      	ldr	r2, [pc, #32]	; (128cc <log_backend_id_set+0x38>)
   128aa:	4909      	ldr	r1, [pc, #36]	; (128d0 <log_backend_id_set+0x3c>)
   128ac:	4809      	ldr	r0, [pc, #36]	; (128d4 <log_backend_id_set+0x40>)
   128ae:	f00e fbdb 	bl	21068 <printk>
   128b2:	21d1      	movs	r1, #209	; 0xd1
   128b4:	4805      	ldr	r0, [pc, #20]	; (128cc <log_backend_id_set+0x38>)
   128b6:	f00f fc84 	bl	221c2 <assert_post_action>
	backend->cb->id = id;
   128ba:	687b      	ldr	r3, [r7, #4]
   128bc:	685b      	ldr	r3, [r3, #4]
   128be:	78fa      	ldrb	r2, [r7, #3]
   128c0:	711a      	strb	r2, [r3, #4]
}
   128c2:	bf00      	nop
   128c4:	3708      	adds	r7, #8
   128c6:	46bd      	mov	sp, r7
   128c8:	bd80      	pop	{r7, pc}
   128ca:	bf00      	nop
   128cc:	000299a4 	.word	0x000299a4
   128d0:	000299d8 	.word	0x000299d8
   128d4:	000299f0 	.word	0x000299f0

000128d8 <log_backend_get>:
 * @param[in] idx  Pointer to the backend instance.
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
   128d8:	b480      	push	{r7}
   128da:	b083      	sub	sp, #12
   128dc:	af00      	add	r7, sp, #0
   128de:	6078      	str	r0, [r7, #4]
	return &__log_backends_start[idx];
   128e0:	687b      	ldr	r3, [r7, #4]
   128e2:	011b      	lsls	r3, r3, #4
   128e4:	4a03      	ldr	r2, [pc, #12]	; (128f4 <log_backend_get+0x1c>)
   128e6:	4413      	add	r3, r2
}
   128e8:	4618      	mov	r0, r3
   128ea:	370c      	adds	r7, #12
   128ec:	46bd      	mov	sp, r7
   128ee:	bc80      	pop	{r7}
   128f0:	4770      	bx	lr
   128f2:	bf00      	nop
   128f4:	000293a4 	.word	0x000293a4

000128f8 <log_backend_count_get>:
 * @brief Get number of backends.
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
   128f8:	b480      	push	{r7}
   128fa:	af00      	add	r7, sp, #0
	return __log_backends_end - __log_backends_start;
   128fc:	4a03      	ldr	r2, [pc, #12]	; (1290c <log_backend_count_get+0x14>)
   128fe:	4b04      	ldr	r3, [pc, #16]	; (12910 <log_backend_count_get+0x18>)
   12900:	1ad3      	subs	r3, r2, r3
   12902:	111b      	asrs	r3, r3, #4
}
   12904:	4618      	mov	r0, r3
   12906:	46bd      	mov	sp, r7
   12908:	bc80      	pop	{r7}
   1290a:	4770      	bx	lr
   1290c:	000293b4 	.word	0x000293b4
   12910:	000293a4 	.word	0x000293a4

00012914 <log_backend_activate>:
 * @param[in] backend  Pointer to the backend instance.
 * @param[in] ctx      User context.
 */
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
   12914:	b580      	push	{r7, lr}
   12916:	b082      	sub	sp, #8
   12918:	af00      	add	r7, sp, #0
   1291a:	6078      	str	r0, [r7, #4]
   1291c:	6039      	str	r1, [r7, #0]
	__ASSERT_NO_MSG(backend != NULL);
   1291e:	687b      	ldr	r3, [r7, #4]
   12920:	2b00      	cmp	r3, #0
   12922:	d10b      	bne.n	1293c <log_backend_activate+0x28>
   12924:	f44f 7381 	mov.w	r3, #258	; 0x102
   12928:	4a0a      	ldr	r2, [pc, #40]	; (12954 <log_backend_activate+0x40>)
   1292a:	490b      	ldr	r1, [pc, #44]	; (12958 <log_backend_activate+0x44>)
   1292c:	480b      	ldr	r0, [pc, #44]	; (1295c <log_backend_activate+0x48>)
   1292e:	f00e fb9b 	bl	21068 <printk>
   12932:	f44f 7181 	mov.w	r1, #258	; 0x102
   12936:	4807      	ldr	r0, [pc, #28]	; (12954 <log_backend_activate+0x40>)
   12938:	f00f fc43 	bl	221c2 <assert_post_action>
	backend->cb->ctx = ctx;
   1293c:	687b      	ldr	r3, [r7, #4]
   1293e:	685b      	ldr	r3, [r3, #4]
   12940:	683a      	ldr	r2, [r7, #0]
   12942:	601a      	str	r2, [r3, #0]
	backend->cb->active = true;
   12944:	687b      	ldr	r3, [r7, #4]
   12946:	685b      	ldr	r3, [r3, #4]
   12948:	2201      	movs	r2, #1
   1294a:	715a      	strb	r2, [r3, #5]
}
   1294c:	bf00      	nop
   1294e:	3708      	adds	r7, #8
   12950:	46bd      	mov	sp, r7
   12952:	bd80      	pop	{r7, pc}
   12954:	000299a4 	.word	0x000299a4
   12958:	000299d8 	.word	0x000299d8
   1295c:	000299f0 	.word	0x000299f0

00012960 <log_backend_is_active>:
 *
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
   12960:	b580      	push	{r7, lr}
   12962:	b082      	sub	sp, #8
   12964:	af00      	add	r7, sp, #0
   12966:	6078      	str	r0, [r7, #4]
	__ASSERT_NO_MSG(backend != NULL);
   12968:	687b      	ldr	r3, [r7, #4]
   1296a:	2b00      	cmp	r3, #0
   1296c:	d10b      	bne.n	12986 <log_backend_is_active+0x26>
   1296e:	f240 131d 	movw	r3, #285	; 0x11d
   12972:	4a08      	ldr	r2, [pc, #32]	; (12994 <log_backend_is_active+0x34>)
   12974:	4908      	ldr	r1, [pc, #32]	; (12998 <log_backend_is_active+0x38>)
   12976:	4809      	ldr	r0, [pc, #36]	; (1299c <log_backend_is_active+0x3c>)
   12978:	f00e fb76 	bl	21068 <printk>
   1297c:	f240 111d 	movw	r1, #285	; 0x11d
   12980:	4804      	ldr	r0, [pc, #16]	; (12994 <log_backend_is_active+0x34>)
   12982:	f00f fc1e 	bl	221c2 <assert_post_action>
	return backend->cb->active;
   12986:	687b      	ldr	r3, [r7, #4]
   12988:	685b      	ldr	r3, [r3, #4]
   1298a:	795b      	ldrb	r3, [r3, #5]
}
   1298c:	4618      	mov	r0, r3
   1298e:	3708      	adds	r7, #8
   12990:	46bd      	mov	sp, r7
   12992:	bd80      	pop	{r7, pc}
   12994:	000299a4 	.word	0x000299a4
   12998:	000299d8 	.word	0x000299d8
   1299c:	000299f0 	.word	0x000299f0

000129a0 <z_log_get_s_mask>:
{
	return 0;
}

uint32_t z_log_get_s_mask(const char *str, uint32_t nargs)
{
   129a0:	b580      	push	{r7, lr}
   129a2:	b086      	sub	sp, #24
   129a4:	af00      	add	r7, sp, #0
   129a6:	6078      	str	r0, [r7, #4]
   129a8:	6039      	str	r1, [r7, #0]
	char curr;
	bool arm = false;
   129aa:	2300      	movs	r3, #0
   129ac:	75fb      	strb	r3, [r7, #23]
	uint32_t arg = 0U;
   129ae:	2300      	movs	r3, #0
   129b0:	613b      	str	r3, [r7, #16]
	uint32_t mask = 0U;
   129b2:	2300      	movs	r3, #0
   129b4:	60fb      	str	r3, [r7, #12]

	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   129b6:	683b      	ldr	r3, [r7, #0]
   129b8:	2b20      	cmp	r3, #32
   129ba:	d935      	bls.n	12a28 <z_log_get_s_mask+0x88>
   129bc:	2380      	movs	r3, #128	; 0x80
   129be:	4a23      	ldr	r2, [pc, #140]	; (12a4c <z_log_get_s_mask+0xac>)
   129c0:	4923      	ldr	r1, [pc, #140]	; (12a50 <z_log_get_s_mask+0xb0>)
   129c2:	4824      	ldr	r0, [pc, #144]	; (12a54 <z_log_get_s_mask+0xb4>)
   129c4:	f00e fb50 	bl	21068 <printk>
   129c8:	2180      	movs	r1, #128	; 0x80
   129ca:	4820      	ldr	r0, [pc, #128]	; (12a4c <z_log_get_s_mask+0xac>)
   129cc:	f00f fbf9 	bl	221c2 <assert_post_action>

	while ((curr = *str++) && arg < nargs) {
   129d0:	e02a      	b.n	12a28 <z_log_get_s_mask+0x88>
		if (curr == '%') {
   129d2:	7afb      	ldrb	r3, [r7, #11]
   129d4:	2b25      	cmp	r3, #37	; 0x25
   129d6:	d10e      	bne.n	129f6 <z_log_get_s_mask+0x56>
			arm = !arm;
   129d8:	7dfb      	ldrb	r3, [r7, #23]
   129da:	2b00      	cmp	r3, #0
   129dc:	bf14      	ite	ne
   129de:	2301      	movne	r3, #1
   129e0:	2300      	moveq	r3, #0
   129e2:	b2db      	uxtb	r3, r3
   129e4:	f083 0301 	eor.w	r3, r3, #1
   129e8:	b2db      	uxtb	r3, r3
   129ea:	75fb      	strb	r3, [r7, #23]
   129ec:	7dfb      	ldrb	r3, [r7, #23]
   129ee:	f003 0301 	and.w	r3, r3, #1
   129f2:	75fb      	strb	r3, [r7, #23]
   129f4:	e018      	b.n	12a28 <z_log_get_s_mask+0x88>
		} else if (arm && isalpha((int)curr)) {
   129f6:	7dfb      	ldrb	r3, [r7, #23]
   129f8:	2b00      	cmp	r3, #0
   129fa:	d015      	beq.n	12a28 <z_log_get_s_mask+0x88>
   129fc:	7afb      	ldrb	r3, [r7, #11]
   129fe:	4618      	mov	r0, r3
   12a00:	f010 f867 	bl	22ad2 <isalpha>
   12a04:	4603      	mov	r3, r0
   12a06:	2b00      	cmp	r3, #0
   12a08:	d00e      	beq.n	12a28 <z_log_get_s_mask+0x88>
			if (curr == 's') {
   12a0a:	7afb      	ldrb	r3, [r7, #11]
   12a0c:	2b73      	cmp	r3, #115	; 0x73
   12a0e:	d106      	bne.n	12a1e <z_log_get_s_mask+0x7e>
				mask |= BIT(arg);
   12a10:	2201      	movs	r2, #1
   12a12:	693b      	ldr	r3, [r7, #16]
   12a14:	fa02 f303 	lsl.w	r3, r2, r3
   12a18:	68fa      	ldr	r2, [r7, #12]
   12a1a:	4313      	orrs	r3, r2
   12a1c:	60fb      	str	r3, [r7, #12]
			}
			arm = false;
   12a1e:	2300      	movs	r3, #0
   12a20:	75fb      	strb	r3, [r7, #23]
			arg++;
   12a22:	693b      	ldr	r3, [r7, #16]
   12a24:	3301      	adds	r3, #1
   12a26:	613b      	str	r3, [r7, #16]
	while ((curr = *str++) && arg < nargs) {
   12a28:	687b      	ldr	r3, [r7, #4]
   12a2a:	1c5a      	adds	r2, r3, #1
   12a2c:	607a      	str	r2, [r7, #4]
   12a2e:	781b      	ldrb	r3, [r3, #0]
   12a30:	72fb      	strb	r3, [r7, #11]
   12a32:	7afb      	ldrb	r3, [r7, #11]
   12a34:	2b00      	cmp	r3, #0
   12a36:	d003      	beq.n	12a40 <z_log_get_s_mask+0xa0>
   12a38:	693a      	ldr	r2, [r7, #16]
   12a3a:	683b      	ldr	r3, [r7, #0]
   12a3c:	429a      	cmp	r2, r3
   12a3e:	d3c8      	bcc.n	129d2 <z_log_get_s_mask+0x32>
		} else {
			; /* standard character, continue walk */
		}
	}

	return mask;
   12a40:	68fb      	ldr	r3, [r7, #12]
}
   12a42:	4618      	mov	r0, r3
   12a44:	3718      	adds	r7, #24
   12a46:	46bd      	mov	sp, r7
   12a48:	bd80      	pop	{r7, pc}
   12a4a:	bf00      	nop
   12a4c:	00029a44 	.word	0x00029a44
   12a50:	00029a74 	.word	0x00029a74
   12a54:	000299f0 	.word	0x000299f0

00012a58 <is_rodata>:
 * @param addr Address.
 *
 * @return True if address identified within read only section.
 */
static bool is_rodata(const void *addr)
{
   12a58:	b480      	push	{r7}
   12a5a:	b083      	sub	sp, #12
   12a5c:	af00      	add	r7, sp, #0
   12a5e:	6078      	str	r0, [r7, #4]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   12a60:	687b      	ldr	r3, [r7, #4]
   12a62:	4a09      	ldr	r2, [pc, #36]	; (12a88 <is_rodata+0x30>)
   12a64:	4293      	cmp	r3, r2
   12a66:	d305      	bcc.n	12a74 <is_rodata+0x1c>
   12a68:	687b      	ldr	r3, [r7, #4]
   12a6a:	4a08      	ldr	r2, [pc, #32]	; (12a8c <is_rodata+0x34>)
   12a6c:	4293      	cmp	r3, r2
   12a6e:	d201      	bcs.n	12a74 <is_rodata+0x1c>
   12a70:	2301      	movs	r3, #1
   12a72:	e000      	b.n	12a76 <is_rodata+0x1e>
   12a74:	2300      	movs	r3, #0
   12a76:	f003 0301 	and.w	r3, r3, #1
   12a7a:	b2db      	uxtb	r3, r3
		((const char *)addr < (const char *)RO_END));
}
   12a7c:	4618      	mov	r0, r3
   12a7e:	370c      	adds	r7, #12
   12a80:	46bd      	mov	sp, r7
   12a82:	bc80      	pop	{r7}
   12a84:	4770      	bx	lr
   12a86:	bf00      	nop
   12a88:	00029074 	.word	0x00029074
   12a8c:	0002ce88 	.word	0x0002ce88

00012a90 <detect_missed_strdup>:
 *	  only memory and not yet duplicated.
 *
 * @param msg Log message.
 */
static void detect_missed_strdup(struct log_msg *msg)
{
   12a90:	b580      	push	{r7, lr}
   12a92:	b08a      	sub	sp, #40	; 0x28
   12a94:	af00      	add	r7, sp, #0
   12a96:	6078      	str	r0, [r7, #4]
	uint32_t idx;
	const char *str;
	const char *msg_str;
	uint32_t mask;

	if (!log_msg_is_std(msg)) {
   12a98:	6878      	ldr	r0, [r7, #4]
   12a9a:	f00f fc81 	bl	223a0 <log_msg_is_std>
   12a9e:	4603      	mov	r3, r0
   12aa0:	f083 0301 	eor.w	r3, r3, #1
   12aa4:	b2db      	uxtb	r3, r3
   12aa6:	2b00      	cmp	r3, #0
   12aa8:	d155      	bne.n	12b56 <detect_missed_strdup+0xc6>
		return;
	}

	msg_str = log_msg_str_get(msg);
   12aaa:	6878      	ldr	r0, [r7, #4]
   12aac:	f010 fb2c 	bl	23108 <log_msg_str_get>
   12ab0:	6278      	str	r0, [r7, #36]	; 0x24
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   12ab2:	6878      	ldr	r0, [r7, #4]
   12ab4:	f010 fac8 	bl	23048 <log_msg_nargs_get>
   12ab8:	4603      	mov	r3, r0
   12aba:	4619      	mov	r1, r3
   12abc:	6a78      	ldr	r0, [r7, #36]	; 0x24
   12abe:	f7ff ff6f 	bl	129a0 <z_log_get_s_mask>
   12ac2:	6238      	str	r0, [r7, #32]

	while (mask) {
   12ac4:	e043      	b.n	12b4e <detect_missed_strdup+0xbe>
		idx = 31 - __builtin_clz(mask);
   12ac6:	6a3b      	ldr	r3, [r7, #32]
   12ac8:	fab3 f383 	clz	r3, r3
   12acc:	f1c3 031f 	rsb	r3, r3, #31
   12ad0:	61fb      	str	r3, [r7, #28]
		str = (const char *)log_msg_arg_get(msg, idx);
   12ad2:	69f9      	ldr	r1, [r7, #28]
   12ad4:	6878      	ldr	r0, [r7, #4]
   12ad6:	f010 faee 	bl	230b6 <log_msg_arg_get>
   12ada:	4603      	mov	r3, r0
   12adc:	61bb      	str	r3, [r7, #24]
		if (!is_rodata(str) && !log_is_strdup(str) &&
   12ade:	69b8      	ldr	r0, [r7, #24]
   12ae0:	f7ff ffba 	bl	12a58 <is_rodata>
   12ae4:	4603      	mov	r3, r0
   12ae6:	f083 0301 	eor.w	r3, r3, #1
   12aea:	b2db      	uxtb	r3, r3
   12aec:	2b00      	cmp	r3, #0
   12aee:	d026      	beq.n	12b3e <detect_missed_strdup+0xae>
   12af0:	69b8      	ldr	r0, [r7, #24]
   12af2:	f000 faf5 	bl	130e0 <log_is_strdup>
   12af6:	4603      	mov	r3, r0
   12af8:	f083 0301 	eor.w	r3, r3, #1
   12afc:	b2db      	uxtb	r3, r3
   12afe:	2b00      	cmp	r3, #0
   12b00:	d01d      	beq.n	12b3e <detect_missed_strdup+0xae>
			(str != log_strdup_fail_msg)) {
   12b02:	4b17      	ldr	r3, [pc, #92]	; (12b60 <detect_missed_strdup+0xd0>)
   12b04:	681b      	ldr	r3, [r3, #0]
		if (!is_rodata(str) && !log_is_strdup(str) &&
   12b06:	69ba      	ldr	r2, [r7, #24]
   12b08:	429a      	cmp	r2, r3
   12b0a:	d018      	beq.n	12b3e <detect_missed_strdup+0xae>
			const char *src_name =
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   12b0c:	6878      	ldr	r0, [r7, #4]
   12b0e:	f00f fc39 	bl	22384 <log_msg_source_id_get>
   12b12:	4603      	mov	r3, r0
   12b14:	4619      	mov	r1, r3
   12b16:	2000      	movs	r0, #0
   12b18:	f010 f8ab 	bl	22c72 <log_source_name_get>
   12b1c:	6178      	str	r0, [r7, #20]
						    log_msg_source_id_get(msg));

			if (IS_ENABLED(CONFIG_ASSERT)) {
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   12b1e:	23d1      	movs	r3, #209	; 0xd1
   12b20:	4a10      	ldr	r2, [pc, #64]	; (12b64 <detect_missed_strdup+0xd4>)
   12b22:	4911      	ldr	r1, [pc, #68]	; (12b68 <detect_missed_strdup+0xd8>)
   12b24:	4811      	ldr	r0, [pc, #68]	; (12b6c <detect_missed_strdup+0xdc>)
   12b26:	f00e fa9f 	bl	21068 <printk>
   12b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12b2c:	697a      	ldr	r2, [r7, #20]
   12b2e:	69f9      	ldr	r1, [r7, #28]
   12b30:	480f      	ldr	r0, [pc, #60]	; (12b70 <detect_missed_strdup+0xe0>)
   12b32:	f00e fa99 	bl	21068 <printk>
   12b36:	21d1      	movs	r1, #209	; 0xd1
   12b38:	480a      	ldr	r0, [pc, #40]	; (12b64 <detect_missed_strdup+0xd4>)
   12b3a:	f00f fb42 	bl	221c2 <assert_post_action>
			} else {
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
			}
		}

		mask &= ~BIT(idx);
   12b3e:	2201      	movs	r2, #1
   12b40:	69fb      	ldr	r3, [r7, #28]
   12b42:	fa02 f303 	lsl.w	r3, r2, r3
   12b46:	43db      	mvns	r3, r3
   12b48:	6a3a      	ldr	r2, [r7, #32]
   12b4a:	4013      	ands	r3, r2
   12b4c:	623b      	str	r3, [r7, #32]
	while (mask) {
   12b4e:	6a3b      	ldr	r3, [r7, #32]
   12b50:	2b00      	cmp	r3, #0
   12b52:	d1b8      	bne.n	12ac6 <detect_missed_strdup+0x36>
   12b54:	e000      	b.n	12b58 <detect_missed_strdup+0xc8>
		return;
   12b56:	bf00      	nop
	}
#undef ERR_MSG
}
   12b58:	3728      	adds	r7, #40	; 0x28
   12b5a:	46bd      	mov	sp, r7
   12b5c:	bd80      	pop	{r7, pc}
   12b5e:	bf00      	nop
   12b60:	2001450c 	.word	0x2001450c
   12b64:	00029a44 	.word	0x00029a44
   12b68:	00029a8c 	.word	0x00029a8c
   12b6c:	000299f0 	.word	0x000299f0
   12b70:	00029a90 	.word	0x00029a90

00012b74 <z_log_msg_post_finalize>:

static void z_log_msg_post_finalize(void)
{
   12b74:	b580      	push	{r7, lr}
   12b76:	b086      	sub	sp, #24
   12b78:	af02      	add	r7, sp, #8
	atomic_inc(&buffered_cnt);
   12b7a:	4827      	ldr	r0, [pc, #156]	; (12c18 <z_log_msg_post_finalize+0xa4>)
   12b7c:	f00f fbce 	bl	2231c <atomic_inc>
	if (panic_mode) {
   12b80:	4b26      	ldr	r3, [pc, #152]	; (12c1c <z_log_msg_post_finalize+0xa8>)
   12b82:	781b      	ldrb	r3, [r3, #0]
   12b84:	2b00      	cmp	r3, #0
   12b86:	d016      	beq.n	12bb6 <z_log_msg_post_finalize+0x42>
	__asm__ volatile(
   12b88:	f04f 0320 	mov.w	r3, #32
   12b8c:	f3ef 8211 	mrs	r2, BASEPRI
   12b90:	f383 8811 	msr	BASEPRI, r3
   12b94:	f3bf 8f6f 	isb	sy
   12b98:	607a      	str	r2, [r7, #4]
   12b9a:	603b      	str	r3, [r7, #0]
	return key;
   12b9c:	687b      	ldr	r3, [r7, #4]
		unsigned int key = irq_lock();
   12b9e:	60fb      	str	r3, [r7, #12]
		(void)log_process(false);
   12ba0:	2000      	movs	r0, #0
   12ba2:	f00f ff88 	bl	22ab6 <log_process>
   12ba6:	68fb      	ldr	r3, [r7, #12]
   12ba8:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
   12baa:	68bb      	ldr	r3, [r7, #8]
   12bac:	f383 8811 	msr	BASEPRI, r3
   12bb0:	f3bf 8f6f 	isb	sy
}
   12bb4:	e02c      	b.n	12c10 <z_log_msg_post_finalize+0x9c>
		irq_unlock(key);
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   12bb6:	4b1a      	ldr	r3, [pc, #104]	; (12c20 <z_log_msg_post_finalize+0xac>)
   12bb8:	681b      	ldr	r3, [r3, #0]
   12bba:	2b00      	cmp	r3, #0
   12bbc:	d019      	beq.n	12bf2 <z_log_msg_post_finalize+0x7e>
   12bbe:	4b16      	ldr	r3, [pc, #88]	; (12c18 <z_log_msg_post_finalize+0xa4>)
   12bc0:	681b      	ldr	r3, [r3, #0]
   12bc2:	2b01      	cmp	r3, #1
   12bc4:	d115      	bne.n	12bf2 <z_log_msg_post_finalize+0x7e>
		k_timer_start(&log_process_thread_timer,
			K_MSEC(CONFIG_LOG_PROCESS_THREAD_SLEEP_MS), K_NO_WAIT);
   12bc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   12bca:	f04f 0100 	mov.w	r1, #0
   12bce:	f00f fc94 	bl	224fa <k_ms_to_ticks_ceil64>
   12bd2:	4602      	mov	r2, r0
   12bd4:	460b      	mov	r3, r1
   12bd6:	4610      	mov	r0, r2
   12bd8:	4619      	mov	r1, r3
   12bda:	f04f 0200 	mov.w	r2, #0
   12bde:	f04f 0300 	mov.w	r3, #0
		k_timer_start(&log_process_thread_timer,
   12be2:	e9cd 2300 	strd	r2, r3, [sp]
   12be6:	4602      	mov	r2, r0
   12be8:	460b      	mov	r3, r1
   12bea:	480e      	ldr	r0, [pc, #56]	; (12c24 <z_log_msg_post_finalize+0xb0>)
   12bec:	f00f ff21 	bl	22a32 <k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   12bf0:	e00e      	b.n	12c10 <z_log_msg_post_finalize+0x9c>
	} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   12bf2:	4b09      	ldr	r3, [pc, #36]	; (12c18 <z_log_msg_post_finalize+0xa4>)
   12bf4:	681b      	ldr	r3, [r3, #0]
   12bf6:	2b0a      	cmp	r3, #10
   12bf8:	d10a      	bne.n	12c10 <z_log_msg_post_finalize+0x9c>
		    (proc_tid != NULL)) {
   12bfa:	4b09      	ldr	r3, [pc, #36]	; (12c20 <z_log_msg_post_finalize+0xac>)
   12bfc:	681b      	ldr	r3, [r3, #0]
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   12bfe:	2b00      	cmp	r3, #0
   12c00:	d006      	beq.n	12c10 <z_log_msg_post_finalize+0x9c>
			k_timer_stop(&log_process_thread_timer);
   12c02:	4808      	ldr	r0, [pc, #32]	; (12c24 <z_log_msg_post_finalize+0xb0>)
   12c04:	f00f ff28 	bl	22a58 <k_timer_stop>
			k_sem_give(&log_process_thread_sem);
   12c08:	4807      	ldr	r0, [pc, #28]	; (12c28 <z_log_msg_post_finalize+0xb4>)
   12c0a:	f00f ff49 	bl	22aa0 <k_sem_give>
		 * timeout or when number of upcoming messages exceeds the
		 * threshold.
		 */
		;
	}
}
   12c0e:	e7ff      	b.n	12c10 <z_log_msg_post_finalize+0x9c>
   12c10:	bf00      	nop
   12c12:	3710      	adds	r7, #16
   12c14:	46bd      	mov	sp, r7
   12c16:	bd80      	pop	{r7, pc}
   12c18:	20014bd4 	.word	0x20014bd4
   12c1c:	200151d6 	.word	0x200151d6
   12c20:	20014bdc 	.word	0x20014bdc
   12c24:	200145d0 	.word	0x200145d0
   12c28:	200145bc 	.word	0x200145bc

00012c2c <msg_finalize>:

static inline void msg_finalize(struct log_msg *msg,
				struct log_msg_ids src_level)
{
   12c2c:	b580      	push	{r7, lr}
   12c2e:	b086      	sub	sp, #24
   12c30:	af00      	add	r7, sp, #0
   12c32:	6078      	str	r0, [r7, #4]
   12c34:	8039      	strh	r1, [r7, #0]
	unsigned int key;

	msg->hdr.ids = src_level;
   12c36:	687b      	ldr	r3, [r7, #4]
   12c38:	883a      	ldrh	r2, [r7, #0]
   12c3a:	815a      	strh	r2, [r3, #10]
	msg->hdr.timestamp = timestamp_func();
   12c3c:	4b11      	ldr	r3, [pc, #68]	; (12c84 <msg_finalize+0x58>)
   12c3e:	681b      	ldr	r3, [r3, #0]
   12c40:	4798      	blx	r3
   12c42:	4602      	mov	r2, r0
   12c44:	687b      	ldr	r3, [r7, #4]
   12c46:	60da      	str	r2, [r3, #12]
	__asm__ volatile(
   12c48:	f04f 0320 	mov.w	r3, #32
   12c4c:	f3ef 8211 	mrs	r2, BASEPRI
   12c50:	f383 8811 	msr	BASEPRI, r3
   12c54:	f3bf 8f6f 	isb	sy
   12c58:	60fa      	str	r2, [r7, #12]
   12c5a:	60bb      	str	r3, [r7, #8]
	return key;
   12c5c:	68fb      	ldr	r3, [r7, #12]

	key = irq_lock();
   12c5e:	617b      	str	r3, [r7, #20]

	log_list_add_tail(&list, msg);
   12c60:	6879      	ldr	r1, [r7, #4]
   12c62:	4809      	ldr	r0, [pc, #36]	; (12c88 <msg_finalize+0x5c>)
   12c64:	f00f faf1 	bl	2224a <log_list_add_tail>
   12c68:	697b      	ldr	r3, [r7, #20]
   12c6a:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
   12c6c:	693b      	ldr	r3, [r7, #16]
   12c6e:	f383 8811 	msr	BASEPRI, r3
   12c72:	f3bf 8f6f 	isb	sy
}
   12c76:	bf00      	nop

	irq_unlock(key);

	z_log_msg_post_finalize();
   12c78:	f7ff ff7c 	bl	12b74 <z_log_msg_post_finalize>
}
   12c7c:	bf00      	nop
   12c7e:	3718      	adds	r7, #24
   12c80:	46bd      	mov	sp, r7
   12c82:	bd80      	pop	{r7, pc}
   12c84:	20014510 	.word	0x20014510
   12c88:	20014bc8 	.word	0x20014bc8

00012c8c <log_core_init>:
	return IS_ENABLED(CONFIG_LOG_TIMESTAMP_64BIT) ?
		k_uptime_get() : k_uptime_get_32();
}

void log_core_init(void)
{
   12c8c:	b580      	push	{r7, lr}
   12c8e:	b082      	sub	sp, #8
   12c90:	af00      	add	r7, sp, #0
	uint32_t freq;

	panic_mode = false;
   12c92:	4b14      	ldr	r3, [pc, #80]	; (12ce4 <log_core_init+0x58>)
   12c94:	2200      	movs	r2, #0
   12c96:	701a      	strb	r2, [r3, #0]

	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
   12c98:	f00f fc27 	bl	224ea <sys_clock_hw_cycles_per_sec>
   12c9c:	4603      	mov	r3, r0
   12c9e:	4a12      	ldr	r2, [pc, #72]	; (12ce8 <log_core_init+0x5c>)
   12ca0:	4293      	cmp	r3, r2
   12ca2:	dd06      	ble.n	12cb2 <log_core_init+0x26>
		timestamp_func = default_lf_get_timestamp;
   12ca4:	4b11      	ldr	r3, [pc, #68]	; (12cec <log_core_init+0x60>)
   12ca6:	4a12      	ldr	r2, [pc, #72]	; (12cf0 <log_core_init+0x64>)
   12ca8:	601a      	str	r2, [r3, #0]
		freq = 1000U;
   12caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   12cae:	607b      	str	r3, [r7, #4]
   12cb0:	e006      	b.n	12cc0 <log_core_init+0x34>
	} else {
		timestamp_func = default_get_timestamp;
   12cb2:	4b0e      	ldr	r3, [pc, #56]	; (12cec <log_core_init+0x60>)
   12cb4:	4a0f      	ldr	r2, [pc, #60]	; (12cf4 <log_core_init+0x68>)
   12cb6:	601a      	str	r2, [r3, #0]
		freq = sys_clock_hw_cycles_per_sec();
   12cb8:	f00f fc17 	bl	224ea <sys_clock_hw_cycles_per_sec>
   12cbc:	4603      	mov	r3, r0
   12cbe:	607b      	str	r3, [r7, #4]
	}

	log_output_timestamp_freq_set(freq);
   12cc0:	6878      	ldr	r0, [r7, #4]
   12cc2:	f001 f987 	bl	13fd4 <log_output_timestamp_freq_set>
			sys_clock_hw_cycles_per_sec());
		if (IS_ENABLED(CONFIG_LOG2_MODE_DEFERRED)) {
			z_log_msg2_init();
		}
	} else if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED)) {
		log_msg_pool_init();
   12cc6:	f000 fae1 	bl	1328c <log_msg_pool_init>
		log_list_init(&list);
   12cca:	480b      	ldr	r0, [pc, #44]	; (12cf8 <log_core_init+0x6c>)
   12ccc:	f00f faae 	bl	2222c <log_list_init>

		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   12cd0:	2304      	movs	r3, #4
   12cd2:	2228      	movs	r2, #40	; 0x28
   12cd4:	4909      	ldr	r1, [pc, #36]	; (12cfc <log_core_init+0x70>)
   12cd6:	480a      	ldr	r0, [pc, #40]	; (12d00 <log_core_init+0x74>)
   12cd8:	f014 fe5e 	bl	27998 <k_mem_slab_init>
			LOG_FILTER_SLOT_SET(filters,
					    LOG_FILTER_AGGR_SLOT_IDX,
					    level);
		}
	}
}
   12cdc:	bf00      	nop
   12cde:	3708      	adds	r7, #8
   12ce0:	46bd      	mov	sp, r7
   12ce2:	bd80      	pop	{r7, pc}
   12ce4:	200151d6 	.word	0x200151d6
   12ce8:	000f4240 	.word	0x000f4240
   12cec:	20014510 	.word	0x20014510
   12cf0:	00022c03 	.word	0x00022c03
   12cf4:	00022bf5 	.word	0x00022bf5
   12cf8:	20014bc8 	.word	0x20014bc8
   12cfc:	200164d0 	.word	0x200164d0
   12d00:	20014ba8 	.word	0x20014ba8

00012d04 <log_init>:

void log_init(void)
{
   12d04:	b580      	push	{r7, lr}
   12d06:	b082      	sub	sp, #8
   12d08:	af00      	add	r7, sp, #0
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   12d0a:	f7ff fdf5 	bl	128f8 <log_backend_count_get>
   12d0e:	4603      	mov	r3, r0
   12d10:	2b09      	cmp	r3, #9
   12d12:	d90b      	bls.n	12d2c <log_init+0x28>
   12d14:	f44f 7315 	mov.w	r3, #596	; 0x254
   12d18:	4a1d      	ldr	r2, [pc, #116]	; (12d90 <log_init+0x8c>)
   12d1a:	491e      	ldr	r1, [pc, #120]	; (12d94 <log_init+0x90>)
   12d1c:	481e      	ldr	r0, [pc, #120]	; (12d98 <log_init+0x94>)
   12d1e:	f00e f9a3 	bl	21068 <printk>
   12d22:	f44f 7115 	mov.w	r1, #596	; 0x254
   12d26:	481a      	ldr	r0, [pc, #104]	; (12d90 <log_init+0x8c>)
   12d28:	f00f fa4b 	bl	221c2 <assert_post_action>

	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_init();
	}

	if (atomic_inc(&initialized) != 0) {
   12d2c:	481b      	ldr	r0, [pc, #108]	; (12d9c <log_init+0x98>)
   12d2e:	f00f faf5 	bl	2231c <atomic_inc>
   12d32:	4603      	mov	r3, r0
   12d34:	2b00      	cmp	r3, #0
   12d36:	d127      	bne.n	12d88 <log_init+0x84>
		return;
	}

	/* Assign ids to backends. */
	for (i = 0; i < log_backend_count_get(); i++) {
   12d38:	2300      	movs	r3, #0
   12d3a:	607b      	str	r3, [r7, #4]
   12d3c:	e01d      	b.n	12d7a <log_init+0x76>
		const struct log_backend *backend = log_backend_get(i);
   12d3e:	687b      	ldr	r3, [r7, #4]
   12d40:	4618      	mov	r0, r3
   12d42:	f7ff fdc9 	bl	128d8 <log_backend_get>
   12d46:	6038      	str	r0, [r7, #0]

		if (backend->autostart) {
   12d48:	683b      	ldr	r3, [r7, #0]
   12d4a:	7b1b      	ldrb	r3, [r3, #12]
   12d4c:	2b00      	cmp	r3, #0
   12d4e:	d011      	beq.n	12d74 <log_init+0x70>
			if (backend->api->init != NULL) {
   12d50:	683b      	ldr	r3, [r7, #0]
   12d52:	681b      	ldr	r3, [r3, #0]
   12d54:	699b      	ldr	r3, [r3, #24]
   12d56:	2b00      	cmp	r3, #0
   12d58:	d004      	beq.n	12d64 <log_init+0x60>
				backend->api->init(backend);
   12d5a:	683b      	ldr	r3, [r7, #0]
   12d5c:	681b      	ldr	r3, [r3, #0]
   12d5e:	699b      	ldr	r3, [r3, #24]
   12d60:	6838      	ldr	r0, [r7, #0]
   12d62:	4798      	blx	r3
			}

			log_backend_enable(backend,
					   backend->cb->ctx,
   12d64:	683b      	ldr	r3, [r7, #0]
   12d66:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   12d68:	681b      	ldr	r3, [r3, #0]
   12d6a:	2204      	movs	r2, #4
   12d6c:	4619      	mov	r1, r3
   12d6e:	6838      	ldr	r0, [r7, #0]
   12d70:	f000 f93e 	bl	12ff0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   12d74:	687b      	ldr	r3, [r7, #4]
   12d76:	3301      	adds	r3, #1
   12d78:	607b      	str	r3, [r7, #4]
   12d7a:	f7ff fdbd 	bl	128f8 <log_backend_count_get>
   12d7e:	4602      	mov	r2, r0
   12d80:	687b      	ldr	r3, [r7, #4]
   12d82:	4293      	cmp	r3, r2
   12d84:	dbdb      	blt.n	12d3e <log_init+0x3a>
   12d86:	e000      	b.n	12d8a <log_init+0x86>
		return;
   12d88:	bf00      	nop
					   CONFIG_LOG_MAX_LEVEL);
		}
	}
}
   12d8a:	3708      	adds	r7, #8
   12d8c:	46bd      	mov	sp, r7
   12d8e:	bd80      	pop	{r7, pc}
   12d90:	00029a44 	.word	0x00029a44
   12d94:	00029ae0 	.word	0x00029ae0
   12d98:	000299f0 	.word	0x000299f0
   12d9c:	20014bd0 	.word	0x20014bd0

00012da0 <thread_set>:

static void thread_set(k_tid_t process_tid)
{
   12da0:	b580      	push	{r7, lr}
   12da2:	b082      	sub	sp, #8
   12da4:	af00      	add	r7, sp, #0
   12da6:	6078      	str	r0, [r7, #4]
	proc_tid = process_tid;
   12da8:	4a07      	ldr	r2, [pc, #28]	; (12dc8 <thread_set+0x28>)
   12daa:	687b      	ldr	r3, [r7, #4]
   12dac:	6013      	str	r3, [r2, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   12dae:	687b      	ldr	r3, [r7, #4]
   12db0:	2b00      	cmp	r3, #0
   12db2:	d006      	beq.n	12dc2 <thread_set+0x22>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   12db4:	4b05      	ldr	r3, [pc, #20]	; (12dcc <thread_set+0x2c>)
   12db6:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   12db8:	2b09      	cmp	r3, #9
   12dba:	dd02      	ble.n	12dc2 <thread_set+0x22>
		k_sem_give(&log_process_thread_sem);
   12dbc:	4804      	ldr	r0, [pc, #16]	; (12dd0 <thread_set+0x30>)
   12dbe:	f00f fe6f 	bl	22aa0 <k_sem_give>
	}
}
   12dc2:	3708      	adds	r7, #8
   12dc4:	46bd      	mov	sp, r7
   12dc6:	bd80      	pop	{r7, pc}
   12dc8:	20014bdc 	.word	0x20014bdc
   12dcc:	20014bd4 	.word	0x20014bd4
   12dd0:	200145bc 	.word	0x200145bc

00012dd4 <z_impl_log_panic>:

	return 0;
}

void z_impl_log_panic(void)
{
   12dd4:	b580      	push	{r7, lr}
   12dd6:	b082      	sub	sp, #8
   12dd8:	af00      	add	r7, sp, #0
	struct log_backend const *backend;

	if (panic_mode) {
   12dda:	4b17      	ldr	r3, [pc, #92]	; (12e38 <z_impl_log_panic+0x64>)
   12ddc:	781b      	ldrb	r3, [r3, #0]
   12dde:	2b00      	cmp	r3, #0
   12de0:	d126      	bne.n	12e30 <z_impl_log_panic+0x5c>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	log_init();
   12de2:	f7ff ff8f 	bl	12d04 <log_init>

	for (int i = 0; i < log_backend_count_get(); i++) {
   12de6:	2300      	movs	r3, #0
   12de8:	607b      	str	r3, [r7, #4]
   12dea:	e010      	b.n	12e0e <z_impl_log_panic+0x3a>
		backend = log_backend_get(i);
   12dec:	687b      	ldr	r3, [r7, #4]
   12dee:	4618      	mov	r0, r3
   12df0:	f7ff fd72 	bl	128d8 <log_backend_get>
   12df4:	6038      	str	r0, [r7, #0]

		if (log_backend_is_active(backend)) {
   12df6:	6838      	ldr	r0, [r7, #0]
   12df8:	f7ff fdb2 	bl	12960 <log_backend_is_active>
   12dfc:	4603      	mov	r3, r0
   12dfe:	2b00      	cmp	r3, #0
   12e00:	d002      	beq.n	12e08 <z_impl_log_panic+0x34>
			log_backend_panic(backend);
   12e02:	6838      	ldr	r0, [r7, #0]
   12e04:	f7ff fd26 	bl	12854 <log_backend_panic>
	for (int i = 0; i < log_backend_count_get(); i++) {
   12e08:	687b      	ldr	r3, [r7, #4]
   12e0a:	3301      	adds	r3, #1
   12e0c:	607b      	str	r3, [r7, #4]
   12e0e:	f7ff fd73 	bl	128f8 <log_backend_count_get>
   12e12:	4602      	mov	r2, r0
   12e14:	687b      	ldr	r3, [r7, #4]
   12e16:	4293      	cmp	r3, r2
   12e18:	dbe8      	blt.n	12dec <z_impl_log_panic+0x18>
		}
	}

	if (!IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		/* Flush */
		while (log_process(false) == true) {
   12e1a:	bf00      	nop
   12e1c:	2000      	movs	r0, #0
   12e1e:	f00f fe4a 	bl	22ab6 <log_process>
   12e22:	4603      	mov	r3, r0
   12e24:	2b00      	cmp	r3, #0
   12e26:	d1f9      	bne.n	12e1c <z_impl_log_panic+0x48>
		}
	}

	panic_mode = true;
   12e28:	4b03      	ldr	r3, [pc, #12]	; (12e38 <z_impl_log_panic+0x64>)
   12e2a:	2201      	movs	r2, #1
   12e2c:	701a      	strb	r2, [r3, #0]
   12e2e:	e000      	b.n	12e32 <z_impl_log_panic+0x5e>
		return;
   12e30:	bf00      	nop
}
   12e32:	3708      	adds	r7, #8
   12e34:	46bd      	mov	sp, r7
   12e36:	bd80      	pop	{r7, pc}
   12e38:	200151d6 	.word	0x200151d6

00012e3c <msg_process>:
		return true;
	}
}

static void msg_process(union log_msgs msg, bool bypass)
{
   12e3c:	b580      	push	{r7, lr}
   12e3e:	b084      	sub	sp, #16
   12e40:	af00      	add	r7, sp, #0
   12e42:	6078      	str	r0, [r7, #4]
   12e44:	460b      	mov	r3, r1
   12e46:	70fb      	strb	r3, [r7, #3]
	struct log_backend const *backend;

	if (!bypass) {
   12e48:	78fb      	ldrb	r3, [r7, #3]
   12e4a:	f083 0301 	eor.w	r3, r3, #1
   12e4e:	b2db      	uxtb	r3, r3
   12e50:	2b00      	cmp	r3, #0
   12e52:	d02d      	beq.n	12eb0 <msg_process+0x74>
		if (!IS_ENABLED(CONFIG_LOG2) &&
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
   12e54:	4b1a      	ldr	r3, [pc, #104]	; (12ec0 <msg_process+0x84>)
   12e56:	781b      	ldrb	r3, [r3, #0]
   12e58:	f083 0301 	eor.w	r3, r3, #1
   12e5c:	b2db      	uxtb	r3, r3
		if (!IS_ENABLED(CONFIG_LOG2) &&
   12e5e:	2b00      	cmp	r3, #0
   12e60:	d003      	beq.n	12e6a <msg_process+0x2e>
			detect_missed_strdup(msg.msg);
   12e62:	687b      	ldr	r3, [r7, #4]
   12e64:	4618      	mov	r0, r3
   12e66:	f7ff fe13 	bl	12a90 <detect_missed_strdup>
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
   12e6a:	2300      	movs	r3, #0
   12e6c:	60fb      	str	r3, [r7, #12]
   12e6e:	e019      	b.n	12ea4 <msg_process+0x68>
			backend = log_backend_get(i);
   12e70:	68fb      	ldr	r3, [r7, #12]
   12e72:	4618      	mov	r0, r3
   12e74:	f7ff fd30 	bl	128d8 <log_backend_get>
   12e78:	60b8      	str	r0, [r7, #8]
			if (log_backend_is_active(backend) &&
   12e7a:	68b8      	ldr	r0, [r7, #8]
   12e7c:	f7ff fd70 	bl	12960 <log_backend_is_active>
   12e80:	4603      	mov	r3, r0
   12e82:	2b00      	cmp	r3, #0
   12e84:	d00b      	beq.n	12e9e <msg_process+0x62>
			    msg_filter_check(backend, msg)) {
   12e86:	6879      	ldr	r1, [r7, #4]
   12e88:	68b8      	ldr	r0, [r7, #8]
   12e8a:	f00f fec1 	bl	22c10 <msg_filter_check>
   12e8e:	4603      	mov	r3, r0
			if (log_backend_is_active(backend) &&
   12e90:	2b00      	cmp	r3, #0
   12e92:	d004      	beq.n	12e9e <msg_process+0x62>
				if (IS_ENABLED(CONFIG_LOG2)) {
					log_backend_msg2_process(backend,
								 msg.msg2);
				} else {
					log_backend_put(backend, msg.msg);
   12e94:	687b      	ldr	r3, [r7, #4]
   12e96:	4619      	mov	r1, r3
   12e98:	68b8      	ldr	r0, [r7, #8]
   12e9a:	f7ff fc81 	bl	127a0 <log_backend_put>
		for (int i = 0; i < log_backend_count_get(); i++) {
   12e9e:	68fb      	ldr	r3, [r7, #12]
   12ea0:	3301      	adds	r3, #1
   12ea2:	60fb      	str	r3, [r7, #12]
   12ea4:	f7ff fd28 	bl	128f8 <log_backend_count_get>
   12ea8:	4602      	mov	r2, r0
   12eaa:	68fb      	ldr	r3, [r7, #12]
   12eac:	4293      	cmp	r3, r2
   12eae:	dbdf      	blt.n	12e70 <msg_process+0x34>

	if (!IS_ENABLED(CONFIG_LOG2_MODE_IMMEDIATE)) {
		if (IS_ENABLED(CONFIG_LOG2)) {
			z_log_msg2_free(msg.msg2);
		} else {
			log_msg_put(msg.msg);
   12eb0:	687b      	ldr	r3, [r7, #4]
   12eb2:	4618      	mov	r0, r3
   12eb4:	f010 f8b4 	bl	23020 <log_msg_put>
		}
	}
}
   12eb8:	bf00      	nop
   12eba:	3710      	adds	r7, #16
   12ebc:	46bd      	mov	sp, r7
   12ebe:	bd80      	pop	{r7, pc}
   12ec0:	200151d6 	.word	0x200151d6

00012ec4 <get_msg>:
		}
	}
}

union log_msgs get_msg(void)
{
   12ec4:	b580      	push	{r7, lr}
   12ec6:	b086      	sub	sp, #24
   12ec8:	af00      	add	r7, sp, #0
	__asm__ volatile(
   12eca:	f04f 0320 	mov.w	r3, #32
   12ece:	f3ef 8211 	mrs	r2, BASEPRI
   12ed2:	f383 8811 	msr	BASEPRI, r3
   12ed6:	f3bf 8f6f 	isb	sy
   12eda:	60fa      	str	r2, [r7, #12]
   12edc:	60bb      	str	r3, [r7, #8]
	return key;
   12ede:	68fb      	ldr	r3, [r7, #12]
		msg.msg2 = z_log_msg2_claim();

		return msg;
	}

	int key = irq_lock();
   12ee0:	617b      	str	r3, [r7, #20]

	msg.msg = log_list_head_get(&list);
   12ee2:	4809      	ldr	r0, [pc, #36]	; (12f08 <get_msg+0x44>)
   12ee4:	f00f f9d8 	bl	22298 <log_list_head_get>
   12ee8:	4603      	mov	r3, r0
   12eea:	607b      	str	r3, [r7, #4]
	irq_unlock(key);
   12eec:	697b      	ldr	r3, [r7, #20]
   12eee:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
   12ef0:	693b      	ldr	r3, [r7, #16]
   12ef2:	f383 8811 	msr	BASEPRI, r3
   12ef6:	f3bf 8f6f 	isb	sy
}
   12efa:	bf00      	nop

	return msg;
   12efc:	687b      	ldr	r3, [r7, #4]
}
   12efe:	4618      	mov	r0, r3
   12f00:	3718      	adds	r7, #24
   12f02:	46bd      	mov	sp, r7
   12f04:	bd80      	pop	{r7, pc}
   12f06:	bf00      	nop
   12f08:	20014bc8 	.word	0x20014bc8

00012f0c <next_pending>:

static bool next_pending(void)
{
   12f0c:	b580      	push	{r7, lr}
   12f0e:	af00      	add	r7, sp, #0
	if (IS_ENABLED(CONFIG_LOG2)) {
		return z_log_msg2_pending();
	}

	return (log_list_head_peek(&list) != NULL);
   12f10:	4805      	ldr	r0, [pc, #20]	; (12f28 <next_pending+0x1c>)
   12f12:	f00f f9b6 	bl	22282 <log_list_head_peek>
   12f16:	4603      	mov	r3, r0
   12f18:	2b00      	cmp	r3, #0
   12f1a:	bf14      	ite	ne
   12f1c:	2301      	movne	r3, #1
   12f1e:	2300      	moveq	r3, #0
   12f20:	b2db      	uxtb	r3, r3
}
   12f22:	4618      	mov	r0, r3
   12f24:	bd80      	pop	{r7, pc}
   12f26:	bf00      	nop
   12f28:	20014bc8 	.word	0x20014bc8

00012f2c <z_impl_log_process>:

bool z_impl_log_process(bool bypass)
{
   12f2c:	b580      	push	{r7, lr}
   12f2e:	b084      	sub	sp, #16
   12f30:	af00      	add	r7, sp, #0
   12f32:	4603      	mov	r3, r0
   12f34:	71fb      	strb	r3, [r7, #7]
	union log_msgs msg;

	if (!backend_attached && !bypass) {
   12f36:	4b19      	ldr	r3, [pc, #100]	; (12f9c <z_impl_log_process+0x70>)
   12f38:	781b      	ldrb	r3, [r3, #0]
   12f3a:	f083 0301 	eor.w	r3, r3, #1
   12f3e:	b2db      	uxtb	r3, r3
   12f40:	2b00      	cmp	r3, #0
   12f42:	d007      	beq.n	12f54 <z_impl_log_process+0x28>
   12f44:	79fb      	ldrb	r3, [r7, #7]
   12f46:	f083 0301 	eor.w	r3, r3, #1
   12f4a:	b2db      	uxtb	r3, r3
   12f4c:	2b00      	cmp	r3, #0
   12f4e:	d001      	beq.n	12f54 <z_impl_log_process+0x28>
		return false;
   12f50:	2300      	movs	r3, #0
   12f52:	e01e      	b.n	12f92 <z_impl_log_process+0x66>
	}

	msg = get_msg();
   12f54:	f7ff ffb6 	bl	12ec4 <get_msg>
   12f58:	4603      	mov	r3, r0
   12f5a:	60fb      	str	r3, [r7, #12]
	if (msg.msg) {
   12f5c:	68fb      	ldr	r3, [r7, #12]
   12f5e:	2b00      	cmp	r3, #0
   12f60:	d007      	beq.n	12f72 <z_impl_log_process+0x46>
		atomic_dec(&buffered_cnt);
   12f62:	480f      	ldr	r0, [pc, #60]	; (12fa0 <z_impl_log_process+0x74>)
   12f64:	f00f f9e7 	bl	22336 <atomic_dec>
		msg_process(msg, bypass);
   12f68:	79fb      	ldrb	r3, [r7, #7]
   12f6a:	4619      	mov	r1, r3
   12f6c:	68f8      	ldr	r0, [r7, #12]
   12f6e:	f7ff ff65 	bl	12e3c <msg_process>
	}

	if (!bypass && z_log_dropped_pending()) {
   12f72:	79fb      	ldrb	r3, [r7, #7]
   12f74:	f083 0301 	eor.w	r3, r3, #1
   12f78:	b2db      	uxtb	r3, r3
   12f7a:	2b00      	cmp	r3, #0
   12f7c:	d006      	beq.n	12f8c <z_impl_log_process+0x60>
   12f7e:	f000 f827 	bl	12fd0 <z_log_dropped_pending>
   12f82:	4603      	mov	r3, r0
   12f84:	2b00      	cmp	r3, #0
   12f86:	d001      	beq.n	12f8c <z_impl_log_process+0x60>
		dropped_notify();
   12f88:	f00f fe4d 	bl	22c26 <dropped_notify>
	}

	return next_pending();
   12f8c:	f7ff ffbe 	bl	12f0c <next_pending>
   12f90:	4603      	mov	r3, r0
}
   12f92:	4618      	mov	r0, r3
   12f94:	3710      	adds	r7, #16
   12f96:	46bd      	mov	sp, r7
   12f98:	bd80      	pop	{r7, pc}
   12f9a:	bf00      	nop
   12f9c:	200151d7 	.word	0x200151d7
   12fa0:	20014bd4 	.word	0x20014bd4

00012fa4 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(void)
{
   12fa4:	b580      	push	{r7, lr}
   12fa6:	af00      	add	r7, sp, #0
	atomic_inc(&dropped_cnt);
   12fa8:	4802      	ldr	r0, [pc, #8]	; (12fb4 <z_log_dropped+0x10>)
   12faa:	f00f f9b7 	bl	2231c <atomic_inc>
}
   12fae:	bf00      	nop
   12fb0:	bd80      	pop	{r7, pc}
   12fb2:	bf00      	nop
   12fb4:	20014bd8 	.word	0x20014bd8

00012fb8 <z_log_dropped_read_and_clear>:

uint32_t z_log_dropped_read_and_clear(void)
{
   12fb8:	b580      	push	{r7, lr}
   12fba:	af00      	add	r7, sp, #0
	return atomic_set(&dropped_cnt, 0);
   12fbc:	2100      	movs	r1, #0
   12fbe:	4803      	ldr	r0, [pc, #12]	; (12fcc <z_log_dropped_read_and_clear+0x14>)
   12fc0:	f00f f9c6 	bl	22350 <atomic_set>
   12fc4:	4603      	mov	r3, r0
}
   12fc6:	4618      	mov	r0, r3
   12fc8:	bd80      	pop	{r7, pc}
   12fca:	bf00      	nop
   12fcc:	20014bd8 	.word	0x20014bd8

00012fd0 <z_log_dropped_pending>:

bool z_log_dropped_pending(void)
{
   12fd0:	b480      	push	{r7}
   12fd2:	af00      	add	r7, sp, #0
	return dropped_cnt > 0;
   12fd4:	4b05      	ldr	r3, [pc, #20]	; (12fec <z_log_dropped_pending+0x1c>)
   12fd6:	681b      	ldr	r3, [r3, #0]
   12fd8:	2b00      	cmp	r3, #0
   12fda:	bfcc      	ite	gt
   12fdc:	2301      	movgt	r3, #1
   12fde:	2300      	movle	r3, #0
   12fe0:	b2db      	uxtb	r3, r3
}
   12fe2:	4618      	mov	r0, r3
   12fe4:	46bd      	mov	sp, r7
   12fe6:	bc80      	pop	{r7}
   12fe8:	4770      	bx	lr
   12fea:	bf00      	nop
   12fec:	20014bd8 	.word	0x20014bd8

00012ff0 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   12ff0:	b580      	push	{r7, lr}
   12ff2:	b086      	sub	sp, #24
   12ff4:	af00      	add	r7, sp, #0
   12ff6:	60f8      	str	r0, [r7, #12]
   12ff8:	60b9      	str	r1, [r7, #8]
   12ffa:	607a      	str	r2, [r7, #4]
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;
   12ffc:	2301      	movs	r3, #1
   12ffe:	617b      	str	r3, [r7, #20]

	id += backend - log_backend_get(0);
   13000:	2000      	movs	r0, #0
   13002:	f7ff fc69 	bl	128d8 <log_backend_get>
   13006:	4602      	mov	r2, r0
   13008:	68fb      	ldr	r3, [r7, #12]
   1300a:	1a9b      	subs	r3, r3, r2
   1300c:	111b      	asrs	r3, r3, #4
   1300e:	461a      	mov	r2, r3
   13010:	697b      	ldr	r3, [r7, #20]
   13012:	4413      	add	r3, r2
   13014:	617b      	str	r3, [r7, #20]

	log_backend_id_set(backend, id);
   13016:	697b      	ldr	r3, [r7, #20]
   13018:	b2db      	uxtb	r3, r3
   1301a:	4619      	mov	r1, r3
   1301c:	68f8      	ldr	r0, [r7, #12]
   1301e:	f7ff fc39 	bl	12894 <log_backend_id_set>
	backend_filter_set(backend, level);
   13022:	6879      	ldr	r1, [r7, #4]
   13024:	68f8      	ldr	r0, [r7, #12]
   13026:	f00f fe39 	bl	22c9c <backend_filter_set>
	log_backend_activate(backend, ctx);
   1302a:	68b9      	ldr	r1, [r7, #8]
   1302c:	68f8      	ldr	r0, [r7, #12]
   1302e:	f7ff fc71 	bl	12914 <log_backend_activate>

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   13032:	4b08      	ldr	r3, [pc, #32]	; (13054 <log_backend_enable+0x64>)
   13034:	781b      	ldrb	r3, [r3, #0]
   13036:	f083 0301 	eor.w	r3, r3, #1
   1303a:	b2db      	uxtb	r3, r3
   1303c:	2b00      	cmp	r3, #0
   1303e:	d002      	beq.n	13046 <log_backend_enable+0x56>
		k_sem_give(&log_process_thread_sem);
   13040:	4805      	ldr	r0, [pc, #20]	; (13058 <log_backend_enable+0x68>)
   13042:	f00f fd2d 	bl	22aa0 <k_sem_give>
	}

	backend_attached = true;
   13046:	4b03      	ldr	r3, [pc, #12]	; (13054 <log_backend_enable+0x64>)
   13048:	2201      	movs	r2, #1
   1304a:	701a      	strb	r2, [r3, #0]
}
   1304c:	bf00      	nop
   1304e:	3718      	adds	r7, #24
   13050:	46bd      	mov	sp, r7
   13052:	bd80      	pop	{r7, pc}
   13054:	200151d7 	.word	0x200151d7
   13058:	200145bc 	.word	0x200145bc

0001305c <z_log_strdup>:

	return log_compiled_level_get(source_id);
}

char *z_log_strdup(const char *str)
{
   1305c:	b590      	push	{r4, r7, lr}
   1305e:	b087      	sub	sp, #28
   13060:	af00      	add	r7, sp, #0
   13062:	6078      	str	r0, [r7, #4]
	struct log_strdup_buf *dup;
	int err;

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
	    is_rodata(str) || k_is_user_context()) {
   13064:	6878      	ldr	r0, [r7, #4]
   13066:	f7ff fcf7 	bl	12a58 <is_rodata>
   1306a:	4603      	mov	r3, r0
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   1306c:	2b00      	cmp	r3, #0
   1306e:	d104      	bne.n	1307a <z_log_strdup+0x1e>
	    is_rodata(str) || k_is_user_context()) {
   13070:	f00f f981 	bl	22376 <k_is_user_context>
   13074:	4603      	mov	r3, r0
   13076:	2b00      	cmp	r3, #0
   13078:	d001      	beq.n	1307e <z_log_strdup+0x22>
		return (char *)str;
   1307a:	687b      	ldr	r3, [r7, #4]
   1307c:	e028      	b.n	130d0 <z_log_strdup+0x74>
	}

	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   1307e:	f04f 0000 	mov.w	r0, #0
   13082:	f04f 0100 	mov.w	r1, #0
   13086:	f107 0410 	add.w	r4, r7, #16
   1308a:	4602      	mov	r2, r0
   1308c:	460b      	mov	r3, r1
   1308e:	4621      	mov	r1, r4
   13090:	4811      	ldr	r0, [pc, #68]	; (130d8 <z_log_strdup+0x7c>)
   13092:	f009 fc7d 	bl	1c990 <k_mem_slab_alloc>
   13096:	6178      	str	r0, [r7, #20]
	if (err != 0) {
   13098:	697b      	ldr	r3, [r7, #20]
   1309a:	2b00      	cmp	r3, #0
   1309c:	d002      	beq.n	130a4 <z_log_strdup+0x48>
		/* failed to allocate */
		return (char *)log_strdup_fail_msg;
   1309e:	4b0f      	ldr	r3, [pc, #60]	; (130dc <z_log_strdup+0x80>)
   130a0:	681b      	ldr	r3, [r3, #0]
   130a2:	e015      	b.n	130d0 <z_log_strdup+0x74>
		log_strdup_longest = MAX(slen, log_strdup_longest);
		k_spin_unlock(&lock, key);
	}

	/* Set 'allocated' flag. */
	(void)atomic_set(&dup->refcount, 1);
   130a4:	693b      	ldr	r3, [r7, #16]
   130a6:	2101      	movs	r1, #1
   130a8:	4618      	mov	r0, r3
   130aa:	f00f f951 	bl	22350 <atomic_set>

	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   130ae:	693b      	ldr	r3, [r7, #16]
   130b0:	3304      	adds	r3, #4
   130b2:	221f      	movs	r2, #31
   130b4:	6879      	ldr	r1, [r7, #4]
   130b6:	4618      	mov	r0, r3
   130b8:	f011 fa68 	bl	2458c <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   130bc:	693b      	ldr	r3, [r7, #16]
   130be:	227e      	movs	r2, #126	; 0x7e
   130c0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   130c4:	693b      	ldr	r3, [r7, #16]
   130c6:	2200      	movs	r2, #0
   130c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return dup->buf;
   130cc:	693b      	ldr	r3, [r7, #16]
   130ce:	3304      	adds	r3, #4
}
   130d0:	4618      	mov	r0, r3
   130d2:	371c      	adds	r7, #28
   130d4:	46bd      	mov	sp, r7
   130d6:	bd90      	pop	{r4, r7, pc}
   130d8:	20014ba8 	.word	0x20014ba8
   130dc:	2001450c 	.word	0x2001450c

000130e0 <log_is_strdup>:
	return IS_ENABLED(CONFIG_LOG_STRDUP_POOL_PROFILING) ?
			log_strdup_longest : 0;
}

bool log_is_strdup(const void *buf)
{
   130e0:	b480      	push	{r7}
   130e2:	b083      	sub	sp, #12
   130e4:	af00      	add	r7, sp, #0
   130e6:	6078      	str	r0, [r7, #4]
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   130e8:	687b      	ldr	r3, [r7, #4]
   130ea:	2b00      	cmp	r3, #0
   130ec:	d009      	beq.n	13102 <log_is_strdup+0x22>
   130ee:	687b      	ldr	r3, [r7, #4]
   130f0:	4a08      	ldr	r2, [pc, #32]	; (13114 <log_is_strdup+0x34>)
   130f2:	4293      	cmp	r3, r2
   130f4:	d305      	bcc.n	13102 <log_is_strdup+0x22>
   130f6:	687b      	ldr	r3, [r7, #4]
   130f8:	4a07      	ldr	r2, [pc, #28]	; (13118 <log_is_strdup+0x38>)
   130fa:	4293      	cmp	r3, r2
   130fc:	d201      	bcs.n	13102 <log_is_strdup+0x22>
   130fe:	2301      	movs	r3, #1
   13100:	e000      	b.n	13104 <log_is_strdup+0x24>
   13102:	2300      	movs	r3, #0
   13104:	f003 0301 	and.w	r3, r3, #1
   13108:	b2db      	uxtb	r3, r3

}
   1310a:	4618      	mov	r0, r3
   1310c:	370c      	adds	r7, #12
   1310e:	46bd      	mov	sp, r7
   13110:	bc80      	pop	{r7}
   13112:	4770      	bx	lr
   13114:	200164d0 	.word	0x200164d0
   13118:	20016570 	.word	0x20016570

0001311c <log_free>:

void log_free(void *str)
{
   1311c:	b580      	push	{r7, lr}
   1311e:	b084      	sub	sp, #16
   13120:	af00      	add	r7, sp, #0
   13122:	6078      	str	r0, [r7, #4]
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   13124:	687b      	ldr	r3, [r7, #4]
   13126:	3b04      	subs	r3, #4
   13128:	60fb      	str	r3, [r7, #12]
						  buf);

	if (atomic_dec(&dup->refcount) == 1) {
   1312a:	68fb      	ldr	r3, [r7, #12]
   1312c:	4618      	mov	r0, r3
   1312e:	f00f f902 	bl	22336 <atomic_dec>
   13132:	4603      	mov	r3, r0
   13134:	2b01      	cmp	r3, #1
   13136:	d105      	bne.n	13144 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   13138:	f107 030c 	add.w	r3, r7, #12
   1313c:	4619      	mov	r1, r3
   1313e:	4803      	ldr	r0, [pc, #12]	; (1314c <log_free+0x30>)
   13140:	f009 fcce 	bl	1cae0 <k_mem_slab_free>
		if (IS_ENABLED(CONFIG_LOG_STRDUP_POOL_PROFILING)) {
			atomic_dec((atomic_t *)&log_strdup_in_use);
		}
	}
}
   13144:	bf00      	nop
   13146:	3710      	adds	r7, #16
   13148:	46bd      	mov	sp, r7
   1314a:	bd80      	pop	{r7, pc}
   1314c:	20014ba8 	.word	0x20014ba8

00013150 <log_from_user>:

	__ASSERT_NO_MSG(false);
}

void log_from_user(struct log_msg_ids src_level, const char *fmt, ...)
{
   13150:	b40e      	push	{r1, r2, r3}
   13152:	b580      	push	{r7, lr}
   13154:	b083      	sub	sp, #12
   13156:	af00      	add	r7, sp, #0
   13158:	80b8      	strh	r0, [r7, #4]
	ARG_UNUSED(src_level);
	ARG_UNUSED(fmt);

	__ASSERT_NO_MSG(false);
   1315a:	f240 5307 	movw	r3, #1287	; 0x507
   1315e:	4a08      	ldr	r2, [pc, #32]	; (13180 <log_from_user+0x30>)
   13160:	4908      	ldr	r1, [pc, #32]	; (13184 <log_from_user+0x34>)
   13162:	4809      	ldr	r0, [pc, #36]	; (13188 <log_from_user+0x38>)
   13164:	f00d ff80 	bl	21068 <printk>
   13168:	f240 5107 	movw	r1, #1287	; 0x507
   1316c:	4804      	ldr	r0, [pc, #16]	; (13180 <log_from_user+0x30>)
   1316e:	f00f f828 	bl	221c2 <assert_post_action>
}
   13172:	bf00      	nop
   13174:	370c      	adds	r7, #12
   13176:	46bd      	mov	sp, r7
   13178:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   1317c:	b003      	add	sp, #12
   1317e:	4770      	bx	lr
   13180:	00029a44 	.word	0x00029a44
   13184:	00029a8c 	.word	0x00029a8c
   13188:	000299f0 	.word	0x000299f0

0001318c <log_process_thread_timer_expiry_fn>:
{
	return mpsc_pbuf_is_pending(&log_buffer);
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   1318c:	b580      	push	{r7, lr}
   1318e:	b082      	sub	sp, #8
   13190:	af00      	add	r7, sp, #0
   13192:	6078      	str	r0, [r7, #4]
	k_sem_give(&log_process_thread_sem);
   13194:	4803      	ldr	r0, [pc, #12]	; (131a4 <log_process_thread_timer_expiry_fn+0x18>)
   13196:	f00f fc83 	bl	22aa0 <k_sem_give>
}
   1319a:	bf00      	nop
   1319c:	3708      	adds	r7, #8
   1319e:	46bd      	mov	sp, r7
   131a0:	bd80      	pop	{r7, pc}
   131a2:	bf00      	nop
   131a4:	200145bc 	.word	0x200145bc

000131a8 <log_process_thread_func>:

static void log_process_thread_func(void *dummy1, void *dummy2, void *dummy3)
{
   131a8:	b580      	push	{r7, lr}
   131aa:	b084      	sub	sp, #16
   131ac:	af00      	add	r7, sp, #0
   131ae:	60f8      	str	r0, [r7, #12]
   131b0:	60b9      	str	r1, [r7, #8]
   131b2:	607a      	str	r2, [r7, #4]
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   131b4:	f7ff fba0 	bl	128f8 <log_backend_count_get>
   131b8:	4603      	mov	r3, r0
   131ba:	2b00      	cmp	r3, #0
   131bc:	dc0b      	bgt.n	131d6 <log_process_thread_func+0x2e>
   131be:	f240 5374 	movw	r3, #1396	; 0x574
   131c2:	4a11      	ldr	r2, [pc, #68]	; (13208 <log_process_thread_func+0x60>)
   131c4:	4911      	ldr	r1, [pc, #68]	; (1320c <log_process_thread_func+0x64>)
   131c6:	4812      	ldr	r0, [pc, #72]	; (13210 <log_process_thread_func+0x68>)
   131c8:	f00d ff4e 	bl	21068 <printk>
   131cc:	f240 5174 	movw	r1, #1396	; 0x574
   131d0:	480d      	ldr	r0, [pc, #52]	; (13208 <log_process_thread_func+0x60>)
   131d2:	f00e fff6 	bl	221c2 <assert_post_action>

	log_init();
   131d6:	f7ff fd95 	bl	12d04 <log_init>
	thread_set(k_current_get());
   131da:	f00f fc15 	bl	22a08 <k_current_get>
   131de:	4603      	mov	r3, r0
   131e0:	4618      	mov	r0, r3
   131e2:	f7ff fddd 	bl	12da0 <thread_set>

	while (true) {
		if (log_process(false) == false) {
   131e6:	2000      	movs	r0, #0
   131e8:	f00f fc65 	bl	22ab6 <log_process>
   131ec:	4603      	mov	r3, r0
   131ee:	f083 0301 	eor.w	r3, r3, #1
   131f2:	b2db      	uxtb	r3, r3
   131f4:	2b00      	cmp	r3, #0
   131f6:	d0f6      	beq.n	131e6 <log_process_thread_func+0x3e>
			k_sem_take(&log_process_thread_sem, K_FOREVER);
   131f8:	f04f 32ff 	mov.w	r2, #4294967295
   131fc:	f04f 33ff 	mov.w	r3, #4294967295
   13200:	4804      	ldr	r0, [pc, #16]	; (13214 <log_process_thread_func+0x6c>)
   13202:	f00f fc3d 	bl	22a80 <k_sem_take>
		if (log_process(false) == false) {
   13206:	e7ee      	b.n	131e6 <log_process_thread_func+0x3e>
   13208:	00029a44 	.word	0x00029a44
   1320c:	00029b24 	.word	0x00029b24
   13210:	000299f0 	.word	0x000299f0
   13214:	200145bc 	.word	0x200145bc

00013218 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   13218:	b580      	push	{r7, lr}
   1321a:	b08a      	sub	sp, #40	; 0x28
   1321c:	af08      	add	r7, sp, #32
   1321e:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   13220:	2200      	movs	r2, #0
   13222:	4914      	ldr	r1, [pc, #80]	; (13274 <enable_logger+0x5c>)
   13224:	4814      	ldr	r0, [pc, #80]	; (13278 <enable_logger+0x60>)
   13226:	f015 febf 	bl	28fa8 <k_timer_init>
		/* start logging thread */
		k_thread_create(&logging_thread, logging_stack,
				K_KERNEL_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0,
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
   1322a:	f04f 0000 	mov.w	r0, #0
   1322e:	f04f 0100 	mov.w	r1, #0
   13232:	f00f f962 	bl	224fa <k_ms_to_ticks_ceil64>
   13236:	4602      	mov	r2, r0
   13238:	460b      	mov	r3, r1
		k_thread_create(&logging_thread, logging_stack,
   1323a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1323e:	2300      	movs	r3, #0
   13240:	9304      	str	r3, [sp, #16]
   13242:	230e      	movs	r3, #14
   13244:	9303      	str	r3, [sp, #12]
   13246:	2300      	movs	r3, #0
   13248:	9302      	str	r3, [sp, #8]
   1324a:	2300      	movs	r3, #0
   1324c:	9301      	str	r3, [sp, #4]
   1324e:	2300      	movs	r3, #0
   13250:	9300      	str	r3, [sp, #0]
   13252:	4b0a      	ldr	r3, [pc, #40]	; (1327c <enable_logger+0x64>)
   13254:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13258:	4909      	ldr	r1, [pc, #36]	; (13280 <enable_logger+0x68>)
   1325a:	480a      	ldr	r0, [pc, #40]	; (13284 <enable_logger+0x6c>)
   1325c:	f00f fbb4 	bl	229c8 <k_thread_create>
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
   13260:	4909      	ldr	r1, [pc, #36]	; (13288 <enable_logger+0x70>)
   13262:	4808      	ldr	r0, [pc, #32]	; (13284 <enable_logger+0x6c>)
   13264:	f00f fbd7 	bl	22a16 <k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
   13268:	2300      	movs	r3, #0
}
   1326a:	4618      	mov	r0, r3
   1326c:	3708      	adds	r7, #8
   1326e:	46bd      	mov	sp, r7
   13270:	bd80      	pop	{r7, pc}
   13272:	bf00      	nop
   13274:	0001318d 	.word	0x0001318d
   13278:	200145d0 	.word	0x200145d0
   1327c:	000131a9 	.word	0x000131a9
   13280:	20015330 	.word	0x20015330
   13284:	20014608 	.word	0x20014608
   13288:	00029b40 	.word	0x00029b40

0001328c <log_msg_pool_init>:
struct k_mem_slab log_msg_pool;
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
   1328c:	b580      	push	{r7, lr}
   1328e:	af00      	add	r7, sp, #0
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   13290:	2320      	movs	r3, #32
   13292:	2220      	movs	r2, #32
   13294:	4902      	ldr	r1, [pc, #8]	; (132a0 <log_msg_pool_init+0x14>)
   13296:	4803      	ldr	r0, [pc, #12]	; (132a4 <log_msg_pool_init+0x18>)
   13298:	f014 fb7e 	bl	27998 <k_mem_slab_init>
}
   1329c:	bf00      	nop
   1329e:	bd80      	pop	{r7, pc}
   132a0:	20016570 	.word	0x20016570
   132a4:	20014be0 	.word	0x20014be0

000132a8 <log_msg_chunk_alloc>:

	return (!k_is_in_isr() && is_irq_unlocked());
}

union log_msg_chunk *log_msg_chunk_alloc(void)
{
   132a8:	b580      	push	{r7, lr}
   132aa:	b082      	sub	sp, #8
   132ac:	af00      	add	r7, sp, #0
	union log_msg_chunk *msg = NULL;
   132ae:	2300      	movs	r3, #0
   132b0:	603b      	str	r3, [r7, #0]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
		   block_on_alloc()
   132b2:	f00f fea1 	bl	22ff8 <block_on_alloc>
   132b6:	4603      	mov	r3, r0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   132b8:	2b00      	cmp	r3, #0
   132ba:	d008      	beq.n	132ce <log_msg_chunk_alloc+0x26>
		   ? K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS)
   132bc:	f04f 0000 	mov.w	r0, #0
   132c0:	f04f 0100 	mov.w	r1, #0
   132c4:	f00f fd3a 	bl	22d3c <k_ms_to_ticks_ceil64>
   132c8:	4602      	mov	r2, r0
   132ca:	460b      	mov	r3, r1
   132cc:	e003      	b.n	132d6 <log_msg_chunk_alloc+0x2e>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   132ce:	f04f 0200 	mov.w	r2, #0
   132d2:	f04f 0300 	mov.w	r3, #0
   132d6:	4639      	mov	r1, r7
   132d8:	4807      	ldr	r0, [pc, #28]	; (132f8 <log_msg_chunk_alloc+0x50>)
   132da:	f009 fb59 	bl	1c990 <k_mem_slab_alloc>
   132de:	6078      	str	r0, [r7, #4]
		   : K_NO_WAIT);

	if (err != 0) {
   132e0:	687b      	ldr	r3, [r7, #4]
   132e2:	2b00      	cmp	r3, #0
   132e4:	d003      	beq.n	132ee <log_msg_chunk_alloc+0x46>
		msg = log_msg_no_space_handle();
   132e6:	f000 f885 	bl	133f4 <log_msg_no_space_handle>
   132ea:	4603      	mov	r3, r0
   132ec:	603b      	str	r3, [r7, #0]
	}

	return msg;
   132ee:	683b      	ldr	r3, [r7, #0]
}
   132f0:	4618      	mov	r0, r3
   132f2:	3708      	adds	r7, #8
   132f4:	46bd      	mov	sp, r7
   132f6:	bd80      	pop	{r7, pc}
   132f8:	20014be0 	.word	0x20014be0

000132fc <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
   132fc:	b580      	push	{r7, lr}
   132fe:	b084      	sub	sp, #16
   13300:	af00      	add	r7, sp, #0
   13302:	6078      	str	r0, [r7, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
   13304:	e009      	b.n	1331a <cont_free+0x1e>
		next = cont->next;
   13306:	687b      	ldr	r3, [r7, #4]
   13308:	681b      	ldr	r3, [r3, #0]
   1330a:	60fb      	str	r3, [r7, #12]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   1330c:	1d3b      	adds	r3, r7, #4
   1330e:	4619      	mov	r1, r3
   13310:	4806      	ldr	r0, [pc, #24]	; (1332c <cont_free+0x30>)
   13312:	f009 fbe5 	bl	1cae0 <k_mem_slab_free>
		cont = next;
   13316:	68fb      	ldr	r3, [r7, #12]
   13318:	607b      	str	r3, [r7, #4]
	while (cont != NULL) {
   1331a:	687b      	ldr	r3, [r7, #4]
   1331c:	2b00      	cmp	r3, #0
   1331e:	d1f2      	bne.n	13306 <cont_free+0xa>
	}
}
   13320:	bf00      	nop
   13322:	bf00      	nop
   13324:	3710      	adds	r7, #16
   13326:	46bd      	mov	sp, r7
   13328:	bd80      	pop	{r7, pc}
   1332a:	bf00      	nop
   1332c:	20014be0 	.word	0x20014be0

00013330 <msg_free>:

static void msg_free(struct log_msg *msg)
{
   13330:	b580      	push	{r7, lr}
   13332:	b086      	sub	sp, #24
   13334:	af00      	add	r7, sp, #0
   13336:	6078      	str	r0, [r7, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
   13338:	687b      	ldr	r3, [r7, #4]
   1333a:	4618      	mov	r0, r3
   1333c:	f00f fe84 	bl	23048 <log_msg_nargs_get>
   13340:	60f8      	str	r0, [r7, #12]

	/* Free any transient string found in arguments. */
	if (log_msg_is_std(msg) && nargs) {
   13342:	687b      	ldr	r3, [r7, #4]
   13344:	4618      	mov	r0, r3
   13346:	f00f fe1d 	bl	22f84 <log_msg_is_std>
   1334a:	4603      	mov	r3, r0
   1334c:	2b00      	cmp	r3, #0
   1334e:	d039      	beq.n	133c4 <msg_free+0x94>
   13350:	68fb      	ldr	r3, [r7, #12]
   13352:	2b00      	cmp	r3, #0
   13354:	d036      	beq.n	133c4 <msg_free+0x94>
		uint32_t i;
		uint32_t smask = 0U;
   13356:	2300      	movs	r3, #0
   13358:	613b      	str	r3, [r7, #16]

		for (i = 0U; i < nargs; i++) {
   1335a:	2300      	movs	r3, #0
   1335c:	617b      	str	r3, [r7, #20]
   1335e:	e02a      	b.n	133b6 <msg_free+0x86>
			void *buf = (void *)log_msg_arg_get(msg, i);
   13360:	687b      	ldr	r3, [r7, #4]
   13362:	6979      	ldr	r1, [r7, #20]
   13364:	4618      	mov	r0, r3
   13366:	f00f fea6 	bl	230b6 <log_msg_arg_get>
   1336a:	4603      	mov	r3, r0
   1336c:	60bb      	str	r3, [r7, #8]

			if (log_is_strdup(buf)) {
   1336e:	68b8      	ldr	r0, [r7, #8]
   13370:	f7ff feb6 	bl	130e0 <log_is_strdup>
   13374:	4603      	mov	r3, r0
   13376:	2b00      	cmp	r3, #0
   13378:	d01a      	beq.n	133b0 <msg_free+0x80>
				if (smask == 0U) {
   1337a:	693b      	ldr	r3, [r7, #16]
   1337c:	2b00      	cmp	r3, #0
   1337e:	d10c      	bne.n	1339a <msg_free+0x6a>
					 * string duplication candidate detected
					 * since it is time consuming and free
					 * can be called from any context when
					 * log message is being dropped.
					 */
					smask = z_log_get_s_mask(
   13380:	687b      	ldr	r3, [r7, #4]
   13382:	4618      	mov	r0, r3
   13384:	f00f fec0 	bl	23108 <log_msg_str_get>
   13388:	4603      	mov	r3, r0
   1338a:	68f9      	ldr	r1, [r7, #12]
   1338c:	4618      	mov	r0, r3
   1338e:	f7ff fb07 	bl	129a0 <z_log_get_s_mask>
   13392:	6138      	str	r0, [r7, #16]
							log_msg_str_get(msg),
							nargs);
					if (smask == 0U) {
   13394:	693b      	ldr	r3, [r7, #16]
   13396:	2b00      	cmp	r3, #0
   13398:	d012      	beq.n	133c0 <msg_free+0x90>
						 * for candidates.
						 */
						break;
					}
				}
				if (smask & BIT(i)) {
   1339a:	693a      	ldr	r2, [r7, #16]
   1339c:	697b      	ldr	r3, [r7, #20]
   1339e:	fa22 f303 	lsr.w	r3, r2, r3
   133a2:	f003 0301 	and.w	r3, r3, #1
   133a6:	2b00      	cmp	r3, #0
   133a8:	d002      	beq.n	133b0 <msg_free+0x80>
					log_free(buf);
   133aa:	68b8      	ldr	r0, [r7, #8]
   133ac:	f7ff feb6 	bl	1311c <log_free>
		for (i = 0U; i < nargs; i++) {
   133b0:	697b      	ldr	r3, [r7, #20]
   133b2:	3301      	adds	r3, #1
   133b4:	617b      	str	r3, [r7, #20]
   133b6:	697a      	ldr	r2, [r7, #20]
   133b8:	68fb      	ldr	r3, [r7, #12]
   133ba:	429a      	cmp	r2, r3
   133bc:	d3d0      	bcc.n	13360 <msg_free+0x30>
	if (log_msg_is_std(msg) && nargs) {
   133be:	e000      	b.n	133c2 <msg_free+0x92>
						break;
   133c0:	bf00      	nop
	if (log_msg_is_std(msg) && nargs) {
   133c2:	bf00      	nop
		 * string. No action required.
		 */
		;
	}

	if (msg->hdr.params.generic.ext == 1) {
   133c4:	687b      	ldr	r3, [r7, #4]
   133c6:	7a1b      	ldrb	r3, [r3, #8]
   133c8:	f003 0302 	and.w	r3, r3, #2
   133cc:	b2db      	uxtb	r3, r3
   133ce:	2b00      	cmp	r3, #0
   133d0:	d004      	beq.n	133dc <msg_free+0xac>
		cont_free(msg->payload.ext.next);
   133d2:	687b      	ldr	r3, [r7, #4]
   133d4:	695b      	ldr	r3, [r3, #20]
   133d6:	4618      	mov	r0, r3
   133d8:	f7ff ff90 	bl	132fc <cont_free>
	}

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   133dc:	1d3b      	adds	r3, r7, #4
   133de:	4619      	mov	r1, r3
   133e0:	4803      	ldr	r0, [pc, #12]	; (133f0 <msg_free+0xc0>)
   133e2:	f009 fb7d 	bl	1cae0 <k_mem_slab_free>
}
   133e6:	bf00      	nop
   133e8:	3718      	adds	r7, #24
   133ea:	46bd      	mov	sp, r7
   133ec:	bd80      	pop	{r7, pc}
   133ee:	bf00      	nop
   133f0:	20014be0 	.word	0x20014be0

000133f4 <log_msg_no_space_handle>:

union log_msg_chunk *log_msg_no_space_handle(void)
{
   133f4:	b580      	push	{r7, lr}
   133f6:	b084      	sub	sp, #16
   133f8:	af00      	add	r7, sp, #0
	union log_msg_chunk *msg = NULL;
   133fa:	2300      	movs	r3, #0
   133fc:	607b      	str	r3, [r7, #4]
	bool more;
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
   133fe:	2001      	movs	r0, #1
   13400:	f00f fdec 	bl	22fdc <log_process>
   13404:	4603      	mov	r3, r0
   13406:	73fb      	strb	r3, [r7, #15]
			z_log_dropped();
   13408:	f7ff fdcc 	bl	12fa4 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
					       (void **)&msg,
					       K_NO_WAIT);
   1340c:	f04f 0200 	mov.w	r2, #0
   13410:	f04f 0300 	mov.w	r3, #0
			err = k_mem_slab_alloc(&log_msg_pool,
   13414:	1d39      	adds	r1, r7, #4
   13416:	4807      	ldr	r0, [pc, #28]	; (13434 <log_msg_no_space_handle+0x40>)
   13418:	f009 faba 	bl	1c990 <k_mem_slab_alloc>
   1341c:	60b8      	str	r0, [r7, #8]
		} while ((err != 0) && more);
   1341e:	68bb      	ldr	r3, [r7, #8]
   13420:	2b00      	cmp	r3, #0
   13422:	d002      	beq.n	1342a <log_msg_no_space_handle+0x36>
   13424:	7bfb      	ldrb	r3, [r7, #15]
   13426:	2b00      	cmp	r3, #0
   13428:	d1e9      	bne.n	133fe <log_msg_no_space_handle+0xa>
	} else {
		z_log_dropped();
	}
	return msg;
   1342a:	687b      	ldr	r3, [r7, #4]

}
   1342c:	4618      	mov	r0, r3
   1342e:	3710      	adds	r7, #16
   13430:	46bd      	mov	sp, r7
   13432:	bd80      	pop	{r7, pc}
   13434:	20014be0 	.word	0x20014be0

00013438 <log_msg_create_n>:
		cont = cont->next;
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
   13438:	b580      	push	{r7, lr}
   1343a:	b086      	sub	sp, #24
   1343c:	af00      	add	r7, sp, #0
   1343e:	60f8      	str	r0, [r7, #12]
   13440:	60b9      	str	r1, [r7, #8]
   13442:	607a      	str	r2, [r7, #4]
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   13444:	687b      	ldr	r3, [r7, #4]
   13446:	2b0e      	cmp	r3, #14
   13448:	d90b      	bls.n	13462 <log_msg_create_n+0x2a>
   1344a:	f240 133b 	movw	r3, #315	; 0x13b
   1344e:	4a14      	ldr	r2, [pc, #80]	; (134a0 <log_msg_create_n+0x68>)
   13450:	4914      	ldr	r1, [pc, #80]	; (134a4 <log_msg_create_n+0x6c>)
   13452:	4815      	ldr	r0, [pc, #84]	; (134a8 <log_msg_create_n+0x70>)
   13454:	f00d fe08 	bl	21068 <printk>
   13458:	f240 113b 	movw	r1, #315	; 0x13b
   1345c:	4810      	ldr	r0, [pc, #64]	; (134a0 <log_msg_create_n+0x68>)
   1345e:	f00e feb0 	bl	221c2 <assert_post_action>

	struct  log_msg *msg = NULL;
   13462:	2300      	movs	r3, #0
   13464:	617b      	str	r3, [r7, #20]

	msg = msg_alloc(nargs);
   13466:	6878      	ldr	r0, [r7, #4]
   13468:	f00f fe59 	bl	2311e <msg_alloc>
   1346c:	6178      	str	r0, [r7, #20]

	if (msg != NULL) {
   1346e:	697b      	ldr	r3, [r7, #20]
   13470:	2b00      	cmp	r3, #0
   13472:	d010      	beq.n	13496 <log_msg_create_n+0x5e>
		msg->str = str;
   13474:	697b      	ldr	r3, [r7, #20]
   13476:	68fa      	ldr	r2, [r7, #12]
   13478:	611a      	str	r2, [r3, #16]
		msg->hdr.params.std.nargs = nargs;
   1347a:	687b      	ldr	r3, [r7, #4]
   1347c:	f003 030f 	and.w	r3, r3, #15
   13480:	b2d9      	uxtb	r1, r3
   13482:	697a      	ldr	r2, [r7, #20]
   13484:	7a53      	ldrb	r3, [r2, #9]
   13486:	f361 1307 	bfi	r3, r1, #4, #4
   1348a:	7253      	strb	r3, [r2, #9]
		copy_args_to_msg(msg, args, nargs);
   1348c:	687a      	ldr	r2, [r7, #4]
   1348e:	68b9      	ldr	r1, [r7, #8]
   13490:	6978      	ldr	r0, [r7, #20]
   13492:	f00f fe87 	bl	231a4 <copy_args_to_msg>
	}

	return msg;
   13496:	697b      	ldr	r3, [r7, #20]
}
   13498:	4618      	mov	r0, r3
   1349a:	3718      	adds	r7, #24
   1349c:	46bd      	mov	sp, r7
   1349e:	bd80      	pop	{r7, pc}
   134a0:	00029b48 	.word	0x00029b48
   134a4:	00029b74 	.word	0x00029b74
   134a8:	00029b80 	.word	0x00029b80

000134ac <out_func>:

	return ret;
}

static int out_func(int c, void *ctx)
{
   134ac:	b580      	push	{r7, lr}
   134ae:	b084      	sub	sp, #16
   134b0:	af00      	add	r7, sp, #0
   134b2:	6078      	str	r0, [r7, #4]
   134b4:	6039      	str	r1, [r7, #0]
	const struct log_output *out_ctx = (const struct log_output *)ctx;
   134b6:	683b      	ldr	r3, [r7, #0]
   134b8:	60fb      	str	r3, [r7, #12]
		/* Backend must be thread safe in synchronous operation. */
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
		return 0;
	}

	if (out_ctx->control_block->offset == out_ctx->size) {
   134ba:	68fb      	ldr	r3, [r7, #12]
   134bc:	685b      	ldr	r3, [r3, #4]
   134be:	681b      	ldr	r3, [r3, #0]
   134c0:	68fa      	ldr	r2, [r7, #12]
   134c2:	68d2      	ldr	r2, [r2, #12]
   134c4:	4293      	cmp	r3, r2
   134c6:	d102      	bne.n	134ce <out_func+0x22>
		log_output_flush(out_ctx);
   134c8:	68f8      	ldr	r0, [r7, #12]
   134ca:	f010 f80e 	bl	234ea <log_output_flush>
	}

	idx = atomic_inc(&out_ctx->control_block->offset);
   134ce:	68fb      	ldr	r3, [r7, #12]
   134d0:	685b      	ldr	r3, [r3, #4]
   134d2:	4618      	mov	r0, r3
   134d4:	f00f ff85 	bl	233e2 <atomic_inc>
   134d8:	60b8      	str	r0, [r7, #8]
	out_ctx->buf[idx] = (uint8_t)c;
   134da:	6879      	ldr	r1, [r7, #4]
   134dc:	68fb      	ldr	r3, [r7, #12]
   134de:	689a      	ldr	r2, [r3, #8]
   134e0:	68bb      	ldr	r3, [r7, #8]
   134e2:	4413      	add	r3, r2
   134e4:	b2ca      	uxtb	r2, r1
   134e6:	701a      	strb	r2, [r3, #0]

	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   134e8:	68fb      	ldr	r3, [r7, #12]
   134ea:	685b      	ldr	r3, [r3, #4]
   134ec:	681b      	ldr	r3, [r3, #0]
   134ee:	461a      	mov	r2, r3
   134f0:	68fb      	ldr	r3, [r7, #12]
   134f2:	68db      	ldr	r3, [r3, #12]
   134f4:	429a      	cmp	r2, r3
   134f6:	d909      	bls.n	1350c <out_func+0x60>
   134f8:	2373      	movs	r3, #115	; 0x73
   134fa:	4a07      	ldr	r2, [pc, #28]	; (13518 <out_func+0x6c>)
   134fc:	4907      	ldr	r1, [pc, #28]	; (1351c <out_func+0x70>)
   134fe:	4808      	ldr	r0, [pc, #32]	; (13520 <out_func+0x74>)
   13500:	f00d fdb2 	bl	21068 <printk>
   13504:	2173      	movs	r1, #115	; 0x73
   13506:	4804      	ldr	r0, [pc, #16]	; (13518 <out_func+0x6c>)
   13508:	f00e fe5b 	bl	221c2 <assert_post_action>

	return 0;
   1350c:	2300      	movs	r3, #0
}
   1350e:	4618      	mov	r0, r3
   13510:	3710      	adds	r7, #16
   13512:	46bd      	mov	sp, r7
   13514:	bd80      	pop	{r7, pc}
   13516:	bf00      	nop
   13518:	00029bc0 	.word	0x00029bc0
   1351c:	00029bf0 	.word	0x00029bf0
   13520:	00029c20 	.word	0x00029c20

00013524 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   13524:	b40e      	push	{r1, r2, r3}
   13526:	b580      	push	{r7, lr}
   13528:	b085      	sub	sp, #20
   1352a:	af00      	add	r7, sp, #0
   1352c:	6078      	str	r0, [r7, #4]
	va_list args;
	int length = 0;
   1352e:	2300      	movs	r3, #0
   13530:	60fb      	str	r3, [r7, #12]

	va_start(args, fmt);
   13532:	f107 0320 	add.w	r3, r7, #32
   13536:	60bb      	str	r3, [r7, #8]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   13538:	68bb      	ldr	r3, [r7, #8]
   1353a:	69fa      	ldr	r2, [r7, #28]
   1353c:	6879      	ldr	r1, [r7, #4]
   1353e:	4806      	ldr	r0, [pc, #24]	; (13558 <print_formatted+0x34>)
   13540:	f7fe fb26 	bl	11b90 <cbvprintf>
   13544:	60f8      	str	r0, [r7, #12]
	va_end(args);

	return length;
   13546:	68fb      	ldr	r3, [r7, #12]
}
   13548:	4618      	mov	r0, r3
   1354a:	3714      	adds	r7, #20
   1354c:	46bd      	mov	sp, r7
   1354e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   13552:	b003      	add	sp, #12
   13554:	4770      	bx	lr
   13556:	bf00      	nop
   13558:	000134ad 	.word	0x000134ad

0001355c <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
   1355c:	b580      	push	{r7, lr}
   1355e:	b092      	sub	sp, #72	; 0x48
   13560:	af04      	add	r7, sp, #16
   13562:	60f8      	str	r0, [r7, #12]
   13564:	60b9      	str	r1, [r7, #8]
   13566:	607a      	str	r2, [r7, #4]
	int length;
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
   13568:	68bb      	ldr	r3, [r7, #8]
   1356a:	f003 0344 	and.w	r3, r3, #68	; 0x44
	bool format =
   1356e:	2b00      	cmp	r3, #0
   13570:	bf14      	ite	ne
   13572:	2301      	movne	r3, #1
   13574:	2300      	moveq	r3, #0
   13576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
   1357a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   1357e:	f083 0301 	eor.w	r3, r3, #1
   13582:	b2db      	uxtb	r3, r3
   13584:	2b00      	cmp	r3, #0
   13586:	d006      	beq.n	13596 <timestamp_print+0x3a>
		length = print_formatted(output, "[%08lu] ", timestamp);
   13588:	687a      	ldr	r2, [r7, #4]
   1358a:	4938      	ldr	r1, [pc, #224]	; (1366c <timestamp_print+0x110>)
   1358c:	68f8      	ldr	r0, [r7, #12]
   1358e:	f7ff ffc9 	bl	13524 <print_formatted>
   13592:	6378      	str	r0, [r7, #52]	; 0x34
   13594:	e065      	b.n	13662 <timestamp_print+0x106>
	} else if (freq != 0U) {
   13596:	4b36      	ldr	r3, [pc, #216]	; (13670 <timestamp_print+0x114>)
   13598:	681b      	ldr	r3, [r3, #0]
   1359a:	2b00      	cmp	r3, #0
   1359c:	d05f      	beq.n	1365e <timestamp_print+0x102>
		uint32_t hours;
		uint32_t mins;
		uint32_t ms;
		uint32_t us;

		timestamp /= timestamp_div;
   1359e:	4b35      	ldr	r3, [pc, #212]	; (13674 <timestamp_print+0x118>)
   135a0:	681b      	ldr	r3, [r3, #0]
   135a2:	687a      	ldr	r2, [r7, #4]
   135a4:	fbb2 f3f3 	udiv	r3, r2, r3
   135a8:	607b      	str	r3, [r7, #4]
		total_seconds = timestamp / freq;
   135aa:	4b31      	ldr	r3, [pc, #196]	; (13670 <timestamp_print+0x114>)
   135ac:	681b      	ldr	r3, [r3, #0]
   135ae:	687a      	ldr	r2, [r7, #4]
   135b0:	fbb2 f3f3 	udiv	r3, r2, r3
   135b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		seconds = total_seconds;
   135b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   135b8:	62bb      	str	r3, [r7, #40]	; 0x28
		hours = seconds / 3600U;
   135ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   135bc:	4a2e      	ldr	r2, [pc, #184]	; (13678 <timestamp_print+0x11c>)
   135be:	fba2 2303 	umull	r2, r3, r2, r3
   135c2:	0adb      	lsrs	r3, r3, #11
   135c4:	627b      	str	r3, [r7, #36]	; 0x24
		seconds -= hours * 3600U;
   135c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   135c8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   135cc:	fb02 f303 	mul.w	r3, r2, r3
   135d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   135d2:	1ad3      	subs	r3, r2, r3
   135d4:	62bb      	str	r3, [r7, #40]	; 0x28
		mins = seconds / 60U;
   135d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   135d8:	4a28      	ldr	r2, [pc, #160]	; (1367c <timestamp_print+0x120>)
   135da:	fba2 2303 	umull	r2, r3, r2, r3
   135de:	095b      	lsrs	r3, r3, #5
   135e0:	623b      	str	r3, [r7, #32]
		seconds -= mins * 60U;
   135e2:	6a3a      	ldr	r2, [r7, #32]
   135e4:	4613      	mov	r3, r2
   135e6:	011b      	lsls	r3, r3, #4
   135e8:	1a9b      	subs	r3, r3, r2
   135ea:	009b      	lsls	r3, r3, #2
   135ec:	461a      	mov	r2, r3
   135ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   135f0:	1a9b      	subs	r3, r3, r2
   135f2:	62bb      	str	r3, [r7, #40]	; 0x28

		remainder = timestamp % freq;
   135f4:	4b1e      	ldr	r3, [pc, #120]	; (13670 <timestamp_print+0x114>)
   135f6:	681a      	ldr	r2, [r3, #0]
   135f8:	687b      	ldr	r3, [r7, #4]
   135fa:	fbb3 f1f2 	udiv	r1, r3, r2
   135fe:	fb02 f201 	mul.w	r2, r2, r1
   13602:	1a9b      	subs	r3, r3, r2
   13604:	61fb      	str	r3, [r7, #28]
		ms = (remainder * 1000U) / freq;
   13606:	69fb      	ldr	r3, [r7, #28]
   13608:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1360c:	fb02 f203 	mul.w	r2, r2, r3
   13610:	4b17      	ldr	r3, [pc, #92]	; (13670 <timestamp_print+0x114>)
   13612:	681b      	ldr	r3, [r3, #0]
   13614:	fbb2 f3f3 	udiv	r3, r2, r3
   13618:	61bb      	str	r3, [r7, #24]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1361a:	69fb      	ldr	r3, [r7, #28]
   1361c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13620:	fb02 f203 	mul.w	r2, r2, r3
   13624:	4b12      	ldr	r3, [pc, #72]	; (13670 <timestamp_print+0x114>)
   13626:	681b      	ldr	r3, [r3, #0]
   13628:	69b9      	ldr	r1, [r7, #24]
   1362a:	fb01 f303 	mul.w	r3, r1, r3
   1362e:	1ad3      	subs	r3, r2, r3
   13630:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13634:	fb02 f203 	mul.w	r2, r2, r3
   13638:	4b0d      	ldr	r3, [pc, #52]	; (13670 <timestamp_print+0x114>)
   1363a:	681b      	ldr	r3, [r3, #0]
   1363c:	fbb2 f3f3 	udiv	r3, r2, r3
   13640:	617b      	str	r3, [r7, #20]
			length = print_formatted(output,
					"1970-01-01T%02u:%02u:%02u.%06uZ ",
					hours, mins, seconds, ms * 1000U + us);
#endif
		} else {
			length = print_formatted(output,
   13642:	697b      	ldr	r3, [r7, #20]
   13644:	9302      	str	r3, [sp, #8]
   13646:	69bb      	ldr	r3, [r7, #24]
   13648:	9301      	str	r3, [sp, #4]
   1364a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1364c:	9300      	str	r3, [sp, #0]
   1364e:	6a3b      	ldr	r3, [r7, #32]
   13650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13652:	490b      	ldr	r1, [pc, #44]	; (13680 <timestamp_print+0x124>)
   13654:	68f8      	ldr	r0, [r7, #12]
   13656:	f7ff ff65 	bl	13524 <print_formatted>
   1365a:	6378      	str	r0, [r7, #52]	; 0x34
   1365c:	e001      	b.n	13662 <timestamp_print+0x106>
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
   1365e:	2300      	movs	r3, #0
   13660:	637b      	str	r3, [r7, #52]	; 0x34
	}

	return length;
   13662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   13664:	4618      	mov	r0, r3
   13666:	3738      	adds	r7, #56	; 0x38
   13668:	46bd      	mov	sp, r7
   1366a:	bd80      	pop	{r7, pc}
   1366c:	00029c40 	.word	0x00029c40
   13670:	20014c00 	.word	0x20014c00
   13674:	20014c04 	.word	0x20014c04
   13678:	91a2b3c5 	.word	0x91a2b3c5
   1367c:	88888889 	.word	0x88888889
   13680:	00029c4c 	.word	0x00029c4c

00013684 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
   13684:	b580      	push	{r7, lr}
   13686:	b086      	sub	sp, #24
   13688:	af00      	add	r7, sp, #0
   1368a:	60f8      	str	r0, [r7, #12]
   1368c:	607b      	str	r3, [r7, #4]
   1368e:	460b      	mov	r3, r1
   13690:	72fb      	strb	r3, [r7, #11]
   13692:	4613      	mov	r3, r2
   13694:	72bb      	strb	r3, [r7, #10]
	if (color) {
   13696:	7afb      	ldrb	r3, [r7, #11]
   13698:	2b00      	cmp	r3, #0
   1369a:	d014      	beq.n	136c6 <color_print+0x42>
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   1369c:	7abb      	ldrb	r3, [r7, #10]
   1369e:	2b00      	cmp	r3, #0
   136a0:	d00a      	beq.n	136b8 <color_print+0x34>
		const char *log_color = start && (colors[level] != NULL) ?
   136a2:	4a0b      	ldr	r2, [pc, #44]	; (136d0 <color_print+0x4c>)
   136a4:	687b      	ldr	r3, [r7, #4]
   136a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136aa:	2b00      	cmp	r3, #0
   136ac:	d004      	beq.n	136b8 <color_print+0x34>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   136ae:	4a08      	ldr	r2, [pc, #32]	; (136d0 <color_print+0x4c>)
   136b0:	687b      	ldr	r3, [r7, #4]
   136b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   136b6:	e000      	b.n	136ba <color_print+0x36>
   136b8:	4b06      	ldr	r3, [pc, #24]	; (136d4 <color_print+0x50>)
		const char *log_color = start && (colors[level] != NULL) ?
   136ba:	617b      	str	r3, [r7, #20]
		print_formatted(output, "%s", log_color);
   136bc:	697a      	ldr	r2, [r7, #20]
   136be:	4906      	ldr	r1, [pc, #24]	; (136d8 <color_print+0x54>)
   136c0:	68f8      	ldr	r0, [r7, #12]
   136c2:	f7ff ff2f 	bl	13524 <print_formatted>
	}
}
   136c6:	bf00      	nop
   136c8:	3718      	adds	r7, #24
   136ca:	46bd      	mov	sp, r7
   136cc:	bd80      	pop	{r7, pc}
   136ce:	bf00      	nop
   136d0:	0002caa0 	.word	0x0002caa0
   136d4:	00029c68 	.word	0x00029c68
   136d8:	00029c70 	.word	0x00029c70

000136dc <ids_print>:


static int ids_print(const struct log_output *output, bool level_on,
		     bool func_on, uint32_t domain_id, int16_t source_id,
		     uint32_t level)
{
   136dc:	b590      	push	{r4, r7, lr}
   136de:	b087      	sub	sp, #28
   136e0:	af00      	add	r7, sp, #0
   136e2:	60f8      	str	r0, [r7, #12]
   136e4:	607b      	str	r3, [r7, #4]
   136e6:	460b      	mov	r3, r1
   136e8:	72fb      	strb	r3, [r7, #11]
   136ea:	4613      	mov	r3, r2
   136ec:	72bb      	strb	r3, [r7, #10]
	int total = 0;
   136ee:	2300      	movs	r3, #0
   136f0:	617b      	str	r3, [r7, #20]

	if (level_on) {
   136f2:	7afb      	ldrb	r3, [r7, #11]
   136f4:	2b00      	cmp	r3, #0
   136f6:	d00c      	beq.n	13712 <ids_print+0x36>
		total += print_formatted(output, "<%s> ", severity[level]);
   136f8:	4a19      	ldr	r2, [pc, #100]	; (13760 <ids_print+0x84>)
   136fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   136fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   13700:	461a      	mov	r2, r3
   13702:	4918      	ldr	r1, [pc, #96]	; (13764 <ids_print+0x88>)
   13704:	68f8      	ldr	r0, [r7, #12]
   13706:	f7ff ff0d 	bl	13524 <print_formatted>
   1370a:	4602      	mov	r2, r0
   1370c:	697b      	ldr	r3, [r7, #20]
   1370e:	4413      	add	r3, r2
   13710:	617b      	str	r3, [r7, #20]
	}

	if (source_id >= 0) {
   13712:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
   13716:	2b00      	cmp	r3, #0
   13718:	db1d      	blt.n	13756 <ids_print+0x7a>
		total += print_formatted(output,
   1371a:	7abb      	ldrb	r3, [r7, #10]
   1371c:	2b00      	cmp	r3, #0
   1371e:	d009      	beq.n	13734 <ids_print+0x58>
				(func_on &&
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   13720:	2201      	movs	r2, #1
   13722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13724:	fa02 f303 	lsl.w	r3, r2, r3
   13728:	f003 0310 	and.w	r3, r3, #16
				(func_on &&
   1372c:	2b00      	cmp	r3, #0
   1372e:	d001      	beq.n	13734 <ids_print+0x58>
		total += print_formatted(output,
   13730:	4c0d      	ldr	r4, [pc, #52]	; (13768 <ids_print+0x8c>)
   13732:	e000      	b.n	13736 <ids_print+0x5a>
   13734:	4c0d      	ldr	r4, [pc, #52]	; (1376c <ids_print+0x90>)
   13736:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
   1373a:	4619      	mov	r1, r3
   1373c:	6878      	ldr	r0, [r7, #4]
   1373e:	f00f fa98 	bl	22c72 <log_source_name_get>
   13742:	4603      	mov	r3, r0
   13744:	461a      	mov	r2, r3
   13746:	4621      	mov	r1, r4
   13748:	68f8      	ldr	r0, [r7, #12]
   1374a:	f7ff feeb 	bl	13524 <print_formatted>
   1374e:	4602      	mov	r2, r0
   13750:	697b      	ldr	r3, [r7, #20]
   13752:	4413      	add	r3, r2
   13754:	617b      	str	r3, [r7, #20]
				"%s." : "%s: ",
				log_source_name_get(domain_id, source_id));
	}

	return total;
   13756:	697b      	ldr	r3, [r7, #20]
}
   13758:	4618      	mov	r0, r3
   1375a:	371c      	adds	r7, #28
   1375c:	46bd      	mov	sp, r7
   1375e:	bd90      	pop	{r4, r7, pc}
   13760:	0002ca8c 	.word	0x0002ca8c
   13764:	00029c74 	.word	0x00029c74
   13768:	00029c7c 	.word	0x00029c7c
   1376c:	00029c80 	.word	0x00029c80

00013770 <newline_print>:

static void newline_print(const struct log_output *ctx, uint32_t flags)
{
   13770:	b580      	push	{r7, lr}
   13772:	b082      	sub	sp, #8
   13774:	af00      	add	r7, sp, #0
   13776:	6078      	str	r0, [r7, #4]
   13778:	6039      	str	r1, [r7, #0]
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1377a:	683b      	ldr	r3, [r7, #0]
   1377c:	f003 0310 	and.w	r3, r3, #16
   13780:	2b00      	cmp	r3, #0
   13782:	d10e      	bne.n	137a2 <newline_print+0x32>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   13784:	683b      	ldr	r3, [r7, #0]
   13786:	f003 0320 	and.w	r3, r3, #32
   1378a:	2b00      	cmp	r3, #0
   1378c:	d004      	beq.n	13798 <newline_print+0x28>
		print_formatted(ctx, "\n");
   1378e:	4907      	ldr	r1, [pc, #28]	; (137ac <newline_print+0x3c>)
   13790:	6878      	ldr	r0, [r7, #4]
   13792:	f7ff fec7 	bl	13524 <print_formatted>
   13796:	e005      	b.n	137a4 <newline_print+0x34>
	} else {
		print_formatted(ctx, "\r\n");
   13798:	4905      	ldr	r1, [pc, #20]	; (137b0 <newline_print+0x40>)
   1379a:	6878      	ldr	r0, [r7, #4]
   1379c:	f7ff fec2 	bl	13524 <print_formatted>
   137a0:	e000      	b.n	137a4 <newline_print+0x34>
		return;
   137a2:	bf00      	nop
	}
}
   137a4:	3708      	adds	r7, #8
   137a6:	46bd      	mov	sp, r7
   137a8:	bd80      	pop	{r7, pc}
   137aa:	bf00      	nop
   137ac:	00029c88 	.word	0x00029c88
   137b0:	00029c8c 	.word	0x00029c8c

000137b4 <std_print>:

static void std_print(struct log_msg *msg,
		      const struct log_output *output)
{
   137b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   137b6:	b09d      	sub	sp, #116	; 0x74
   137b8:	af0e      	add	r7, sp, #56	; 0x38
   137ba:	6278      	str	r0, [r7, #36]	; 0x24
   137bc:	6239      	str	r1, [r7, #32]
	const char *str = log_msg_str_get(msg);
   137be:	6a78      	ldr	r0, [r7, #36]	; 0x24
   137c0:	f00f fca2 	bl	23108 <log_msg_str_get>
   137c4:	6338      	str	r0, [r7, #48]	; 0x30
	uint32_t nargs = log_msg_nargs_get(msg);
   137c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
   137c8:	f00f fc3e 	bl	23048 <log_msg_nargs_get>
   137cc:	62f8      	str	r0, [r7, #44]	; 0x2c
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   137ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   137d0:	009b      	lsls	r3, r3, #2
   137d2:	3307      	adds	r3, #7
   137d4:	08db      	lsrs	r3, r3, #3
   137d6:	00db      	lsls	r3, r3, #3
   137d8:	ebad 0d03 	sub.w	sp, sp, r3
   137dc:	ab0e      	add	r3, sp, #56	; 0x38
   137de:	3307      	adds	r3, #7
   137e0:	08db      	lsrs	r3, r3, #3
   137e2:	00db      	lsls	r3, r3, #3
   137e4:	62bb      	str	r3, [r7, #40]	; 0x28
	int i;

	for (i = 0; i < nargs; i++) {
   137e6:	2300      	movs	r3, #0
   137e8:	637b      	str	r3, [r7, #52]	; 0x34
   137ea:	e00c      	b.n	13806 <std_print+0x52>
		args[i] = log_msg_arg_get(msg, i);
   137ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
   137ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   137f0:	009b      	lsls	r3, r3, #2
   137f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   137f4:	18d4      	adds	r4, r2, r3
   137f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
   137f8:	f00f fc5d 	bl	230b6 <log_msg_arg_get>
   137fc:	4603      	mov	r3, r0
   137fe:	6023      	str	r3, [r4, #0]
	for (i = 0; i < nargs; i++) {
   13800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13802:	3301      	adds	r3, #1
   13804:	637b      	str	r3, [r7, #52]	; 0x34
   13806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1380a:	429a      	cmp	r2, r3
   1380c:	d8ee      	bhi.n	137ec <std_print+0x38>
	}

	switch (log_msg_nargs_get(msg)) {
   1380e:	6a78      	ldr	r0, [r7, #36]	; 0x24
   13810:	f00f fc1a 	bl	23048 <log_msg_nargs_get>
   13814:	4603      	mov	r3, r0
   13816:	2b0f      	cmp	r3, #15
   13818:	f200 828f 	bhi.w	13d3a <std_print+0x586>
   1381c:	a201      	add	r2, pc, #4	; (adr r2, 13824 <std_print+0x70>)
   1381e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13822:	bf00      	nop
   13824:	00013865 	.word	0x00013865
   13828:	0001386f 	.word	0x0001386f
   1382c:	0001387f 	.word	0x0001387f
   13830:	00013893 	.word	0x00013893
   13834:	000138b1 	.word	0x000138b1
   13838:	000138d9 	.word	0x000138d9
   1383c:	00013909 	.word	0x00013909
   13840:	00013941 	.word	0x00013941
   13844:	00013981 	.word	0x00013981
   13848:	000139cb 	.word	0x000139cb
   1384c:	00013a1f 	.word	0x00013a1f
   13850:	00013a83 	.word	0x00013a83
   13854:	00013af7 	.word	0x00013af7
   13858:	00013b7b 	.word	0x00013b7b
   1385c:	00013c0f 	.word	0x00013c0f
   13860:	00013c9f 	.word	0x00013c9f
	case 0:
		print_formatted(output, str);
   13864:	6b39      	ldr	r1, [r7, #48]	; 0x30
   13866:	6a38      	ldr	r0, [r7, #32]
   13868:	f7ff fe5c 	bl	13524 <print_formatted>
		break;
   1386c:	e266      	b.n	13d3c <std_print+0x588>
	case 1:
		print_formatted(output, str, args[0]);
   1386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13870:	681b      	ldr	r3, [r3, #0]
   13872:	461a      	mov	r2, r3
   13874:	6b39      	ldr	r1, [r7, #48]	; 0x30
   13876:	6a38      	ldr	r0, [r7, #32]
   13878:	f7ff fe54 	bl	13524 <print_formatted>
		break;
   1387c:	e25e      	b.n	13d3c <std_print+0x588>
	case 2:
		print_formatted(output, str, args[0], args[1]);
   1387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13880:	681a      	ldr	r2, [r3, #0]
   13882:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13884:	3304      	adds	r3, #4
   13886:	681b      	ldr	r3, [r3, #0]
   13888:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1388a:	6a38      	ldr	r0, [r7, #32]
   1388c:	f7ff fe4a 	bl	13524 <print_formatted>
		break;
   13890:	e254      	b.n	13d3c <std_print+0x588>
	case 3:
		print_formatted(output, str, args[0], args[1], args[2]);
   13892:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13894:	681a      	ldr	r2, [r3, #0]
   13896:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13898:	3304      	adds	r3, #4
   1389a:	6819      	ldr	r1, [r3, #0]
   1389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1389e:	3308      	adds	r3, #8
   138a0:	681b      	ldr	r3, [r3, #0]
   138a2:	9300      	str	r3, [sp, #0]
   138a4:	460b      	mov	r3, r1
   138a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
   138a8:	6a38      	ldr	r0, [r7, #32]
   138aa:	f7ff fe3b 	bl	13524 <print_formatted>
		break;
   138ae:	e245      	b.n	13d3c <std_print+0x588>
	case 4:
		print_formatted(output, str, args[0], args[1], args[2],
   138b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   138b2:	6819      	ldr	r1, [r3, #0]
   138b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   138b6:	3304      	adds	r3, #4
   138b8:	6818      	ldr	r0, [r3, #0]
   138ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   138bc:	3308      	adds	r3, #8
   138be:	681b      	ldr	r3, [r3, #0]
				args[3]);
   138c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   138c2:	320c      	adds	r2, #12
		print_formatted(output, str, args[0], args[1], args[2],
   138c4:	6812      	ldr	r2, [r2, #0]
   138c6:	9201      	str	r2, [sp, #4]
   138c8:	9300      	str	r3, [sp, #0]
   138ca:	4603      	mov	r3, r0
   138cc:	460a      	mov	r2, r1
   138ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
   138d0:	6a38      	ldr	r0, [r7, #32]
   138d2:	f7ff fe27 	bl	13524 <print_formatted>
		break;
   138d6:	e231      	b.n	13d3c <std_print+0x588>
	case 5:
		print_formatted(output, str, args[0], args[1], args[2],
   138d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   138da:	6818      	ldr	r0, [r3, #0]
   138dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   138de:	3304      	adds	r3, #4
   138e0:	681c      	ldr	r4, [r3, #0]
   138e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   138e4:	3308      	adds	r3, #8
   138e6:	681b      	ldr	r3, [r3, #0]
				args[3], args[4]);
   138e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   138ea:	320c      	adds	r2, #12
		print_formatted(output, str, args[0], args[1], args[2],
   138ec:	6812      	ldr	r2, [r2, #0]
				args[3], args[4]);
   138ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   138f0:	3110      	adds	r1, #16
		print_formatted(output, str, args[0], args[1], args[2],
   138f2:	6809      	ldr	r1, [r1, #0]
   138f4:	9102      	str	r1, [sp, #8]
   138f6:	9201      	str	r2, [sp, #4]
   138f8:	9300      	str	r3, [sp, #0]
   138fa:	4623      	mov	r3, r4
   138fc:	4602      	mov	r2, r0
   138fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
   13900:	6a38      	ldr	r0, [r7, #32]
   13902:	f7ff fe0f 	bl	13524 <print_formatted>
		break;
   13906:	e219      	b.n	13d3c <std_print+0x588>
	case 6:
		print_formatted(output, str, args[0], args[1], args[2],
   13908:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1390a:	681c      	ldr	r4, [r3, #0]
   1390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1390e:	3304      	adds	r3, #4
   13910:	681d      	ldr	r5, [r3, #0]
   13912:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13914:	3308      	adds	r3, #8
   13916:	681b      	ldr	r3, [r3, #0]
				args[3], args[4], args[5]);
   13918:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1391a:	320c      	adds	r2, #12
		print_formatted(output, str, args[0], args[1], args[2],
   1391c:	6812      	ldr	r2, [r2, #0]
				args[3], args[4], args[5]);
   1391e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   13920:	3110      	adds	r1, #16
		print_formatted(output, str, args[0], args[1], args[2],
   13922:	6809      	ldr	r1, [r1, #0]
				args[3], args[4], args[5]);
   13924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13926:	3014      	adds	r0, #20
		print_formatted(output, str, args[0], args[1], args[2],
   13928:	6800      	ldr	r0, [r0, #0]
   1392a:	9003      	str	r0, [sp, #12]
   1392c:	9102      	str	r1, [sp, #8]
   1392e:	9201      	str	r2, [sp, #4]
   13930:	9300      	str	r3, [sp, #0]
   13932:	462b      	mov	r3, r5
   13934:	4622      	mov	r2, r4
   13936:	6b39      	ldr	r1, [r7, #48]	; 0x30
   13938:	6a38      	ldr	r0, [r7, #32]
   1393a:	f7ff fdf3 	bl	13524 <print_formatted>
		break;
   1393e:	e1fd      	b.n	13d3c <std_print+0x588>
	case 7:
		print_formatted(output, str, args[0], args[1], args[2],
   13940:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13942:	681d      	ldr	r5, [r3, #0]
   13944:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13946:	3304      	adds	r3, #4
   13948:	681e      	ldr	r6, [r3, #0]
   1394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1394c:	3308      	adds	r3, #8
   1394e:	681b      	ldr	r3, [r3, #0]
				args[3], args[4], args[5], args[6]);
   13950:	6aba      	ldr	r2, [r7, #40]	; 0x28
   13952:	320c      	adds	r2, #12
		print_formatted(output, str, args[0], args[1], args[2],
   13954:	6812      	ldr	r2, [r2, #0]
				args[3], args[4], args[5], args[6]);
   13956:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   13958:	3110      	adds	r1, #16
		print_formatted(output, str, args[0], args[1], args[2],
   1395a:	6809      	ldr	r1, [r1, #0]
				args[3], args[4], args[5], args[6]);
   1395c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1395e:	3014      	adds	r0, #20
		print_formatted(output, str, args[0], args[1], args[2],
   13960:	6800      	ldr	r0, [r0, #0]
				args[3], args[4], args[5], args[6]);
   13962:	6abc      	ldr	r4, [r7, #40]	; 0x28
   13964:	3418      	adds	r4, #24
		print_formatted(output, str, args[0], args[1], args[2],
   13966:	6824      	ldr	r4, [r4, #0]
   13968:	9404      	str	r4, [sp, #16]
   1396a:	9003      	str	r0, [sp, #12]
   1396c:	9102      	str	r1, [sp, #8]
   1396e:	9201      	str	r2, [sp, #4]
   13970:	9300      	str	r3, [sp, #0]
   13972:	4633      	mov	r3, r6
   13974:	462a      	mov	r2, r5
   13976:	6b39      	ldr	r1, [r7, #48]	; 0x30
   13978:	6a38      	ldr	r0, [r7, #32]
   1397a:	f7ff fdd3 	bl	13524 <print_formatted>
		break;
   1397e:	e1dd      	b.n	13d3c <std_print+0x588>
	case 8:
		print_formatted(output, str, args[0], args[1], args[2],
   13980:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13982:	681e      	ldr	r6, [r3, #0]
   13984:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13986:	3304      	adds	r3, #4
   13988:	681b      	ldr	r3, [r3, #0]
   1398a:	61fb      	str	r3, [r7, #28]
   1398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1398e:	3308      	adds	r3, #8
   13990:	681b      	ldr	r3, [r3, #0]
				args[3], args[4], args[5], args[6], args[7]);
   13992:	6aba      	ldr	r2, [r7, #40]	; 0x28
   13994:	320c      	adds	r2, #12
		print_formatted(output, str, args[0], args[1], args[2],
   13996:	6812      	ldr	r2, [r2, #0]
				args[3], args[4], args[5], args[6], args[7]);
   13998:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1399a:	3110      	adds	r1, #16
		print_formatted(output, str, args[0], args[1], args[2],
   1399c:	6809      	ldr	r1, [r1, #0]
				args[3], args[4], args[5], args[6], args[7]);
   1399e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   139a0:	3014      	adds	r0, #20
		print_formatted(output, str, args[0], args[1], args[2],
   139a2:	6800      	ldr	r0, [r0, #0]
				args[3], args[4], args[5], args[6], args[7]);
   139a4:	6abc      	ldr	r4, [r7, #40]	; 0x28
   139a6:	3418      	adds	r4, #24
		print_formatted(output, str, args[0], args[1], args[2],
   139a8:	6824      	ldr	r4, [r4, #0]
				args[3], args[4], args[5], args[6], args[7]);
   139aa:	6abd      	ldr	r5, [r7, #40]	; 0x28
   139ac:	351c      	adds	r5, #28
		print_formatted(output, str, args[0], args[1], args[2],
   139ae:	682d      	ldr	r5, [r5, #0]
   139b0:	9505      	str	r5, [sp, #20]
   139b2:	9404      	str	r4, [sp, #16]
   139b4:	9003      	str	r0, [sp, #12]
   139b6:	9102      	str	r1, [sp, #8]
   139b8:	9201      	str	r2, [sp, #4]
   139ba:	9300      	str	r3, [sp, #0]
   139bc:	69fb      	ldr	r3, [r7, #28]
   139be:	4632      	mov	r2, r6
   139c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
   139c2:	6a38      	ldr	r0, [r7, #32]
   139c4:	f7ff fdae 	bl	13524 <print_formatted>
		break;
   139c8:	e1b8      	b.n	13d3c <std_print+0x588>
	case 9:
		print_formatted(output, str, args[0], args[1], args[2],
   139ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   139cc:	681b      	ldr	r3, [r3, #0]
   139ce:	61fb      	str	r3, [r7, #28]
   139d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   139d2:	3304      	adds	r3, #4
   139d4:	6819      	ldr	r1, [r3, #0]
   139d6:	61b9      	str	r1, [r7, #24]
   139d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   139da:	3308      	adds	r3, #8
   139dc:	681b      	ldr	r3, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
   139de:	6aba      	ldr	r2, [r7, #40]	; 0x28
   139e0:	320c      	adds	r2, #12
		print_formatted(output, str, args[0], args[1], args[2],
   139e2:	6812      	ldr	r2, [r2, #0]
				args[3], args[4], args[5], args[6],  args[7],
   139e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   139e6:	3110      	adds	r1, #16
		print_formatted(output, str, args[0], args[1], args[2],
   139e8:	6809      	ldr	r1, [r1, #0]
				args[3], args[4], args[5], args[6],  args[7],
   139ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   139ec:	3014      	adds	r0, #20
		print_formatted(output, str, args[0], args[1], args[2],
   139ee:	6800      	ldr	r0, [r0, #0]
				args[3], args[4], args[5], args[6],  args[7],
   139f0:	6abc      	ldr	r4, [r7, #40]	; 0x28
   139f2:	3418      	adds	r4, #24
		print_formatted(output, str, args[0], args[1], args[2],
   139f4:	6824      	ldr	r4, [r4, #0]
				args[3], args[4], args[5], args[6],  args[7],
   139f6:	6abd      	ldr	r5, [r7, #40]	; 0x28
   139f8:	351c      	adds	r5, #28
		print_formatted(output, str, args[0], args[1], args[2],
   139fa:	682d      	ldr	r5, [r5, #0]
				args[8]);
   139fc:	6abe      	ldr	r6, [r7, #40]	; 0x28
   139fe:	3620      	adds	r6, #32
		print_formatted(output, str, args[0], args[1], args[2],
   13a00:	6836      	ldr	r6, [r6, #0]
   13a02:	9606      	str	r6, [sp, #24]
   13a04:	9505      	str	r5, [sp, #20]
   13a06:	9404      	str	r4, [sp, #16]
   13a08:	9003      	str	r0, [sp, #12]
   13a0a:	9102      	str	r1, [sp, #8]
   13a0c:	9201      	str	r2, [sp, #4]
   13a0e:	9300      	str	r3, [sp, #0]
   13a10:	69bb      	ldr	r3, [r7, #24]
   13a12:	69fa      	ldr	r2, [r7, #28]
   13a14:	6b39      	ldr	r1, [r7, #48]	; 0x30
   13a16:	6a38      	ldr	r0, [r7, #32]
   13a18:	f7ff fd84 	bl	13524 <print_formatted>
		break;
   13a1c:	e18e      	b.n	13d3c <std_print+0x588>
	case 10:
		print_formatted(output, str, args[0], args[1], args[2],
   13a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13a20:	681b      	ldr	r3, [r3, #0]
   13a22:	61fb      	str	r3, [r7, #28]
   13a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13a26:	3304      	adds	r3, #4
   13a28:	6819      	ldr	r1, [r3, #0]
   13a2a:	61b9      	str	r1, [r7, #24]
   13a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13a2e:	3308      	adds	r3, #8
   13a30:	681b      	ldr	r3, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
   13a34:	320c      	adds	r2, #12
		print_formatted(output, str, args[0], args[1], args[2],
   13a36:	6812      	ldr	r2, [r2, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   13a3a:	3110      	adds	r1, #16
		print_formatted(output, str, args[0], args[1], args[2],
   13a3c:	6809      	ldr	r1, [r1, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13a3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13a40:	3014      	adds	r0, #20
		print_formatted(output, str, args[0], args[1], args[2],
   13a42:	6800      	ldr	r0, [r0, #0]
   13a44:	6178      	str	r0, [r7, #20]
				args[3], args[4], args[5], args[6],  args[7],
   13a46:	6abc      	ldr	r4, [r7, #40]	; 0x28
   13a48:	3418      	adds	r4, #24
		print_formatted(output, str, args[0], args[1], args[2],
   13a4a:	6824      	ldr	r4, [r4, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13a4c:	6abd      	ldr	r5, [r7, #40]	; 0x28
   13a4e:	351c      	adds	r5, #28
		print_formatted(output, str, args[0], args[1], args[2],
   13a50:	682d      	ldr	r5, [r5, #0]
				args[8], args[9]);
   13a52:	6abe      	ldr	r6, [r7, #40]	; 0x28
   13a54:	3620      	adds	r6, #32
		print_formatted(output, str, args[0], args[1], args[2],
   13a56:	6836      	ldr	r6, [r6, #0]
				args[8], args[9]);
   13a58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13a5a:	f100 0c24 	add.w	ip, r0, #36	; 0x24
		print_formatted(output, str, args[0], args[1], args[2],
   13a5e:	f8dc 0000 	ldr.w	r0, [ip]
   13a62:	9007      	str	r0, [sp, #28]
   13a64:	9606      	str	r6, [sp, #24]
   13a66:	9505      	str	r5, [sp, #20]
   13a68:	9404      	str	r4, [sp, #16]
   13a6a:	6978      	ldr	r0, [r7, #20]
   13a6c:	9003      	str	r0, [sp, #12]
   13a6e:	9102      	str	r1, [sp, #8]
   13a70:	9201      	str	r2, [sp, #4]
   13a72:	9300      	str	r3, [sp, #0]
   13a74:	69bb      	ldr	r3, [r7, #24]
   13a76:	69fa      	ldr	r2, [r7, #28]
   13a78:	6b39      	ldr	r1, [r7, #48]	; 0x30
   13a7a:	6a38      	ldr	r0, [r7, #32]
   13a7c:	f7ff fd52 	bl	13524 <print_formatted>
		break;
   13a80:	e15c      	b.n	13d3c <std_print+0x588>
	case 11:
		print_formatted(output, str, args[0], args[1], args[2],
   13a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13a84:	681b      	ldr	r3, [r3, #0]
   13a86:	61fb      	str	r3, [r7, #28]
   13a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13a8a:	3304      	adds	r3, #4
   13a8c:	6819      	ldr	r1, [r3, #0]
   13a8e:	61b9      	str	r1, [r7, #24]
   13a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13a92:	3308      	adds	r3, #8
   13a94:	681b      	ldr	r3, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13a96:	6aba      	ldr	r2, [r7, #40]	; 0x28
   13a98:	320c      	adds	r2, #12
		print_formatted(output, str, args[0], args[1], args[2],
   13a9a:	6812      	ldr	r2, [r2, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   13a9e:	3110      	adds	r1, #16
		print_formatted(output, str, args[0], args[1], args[2],
   13aa0:	6809      	ldr	r1, [r1, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13aa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13aa4:	3014      	adds	r0, #20
		print_formatted(output, str, args[0], args[1], args[2],
   13aa6:	6800      	ldr	r0, [r0, #0]
   13aa8:	6178      	str	r0, [r7, #20]
				args[3], args[4], args[5], args[6],  args[7],
   13aaa:	6abc      	ldr	r4, [r7, #40]	; 0x28
   13aac:	3418      	adds	r4, #24
		print_formatted(output, str, args[0], args[1], args[2],
   13aae:	6824      	ldr	r4, [r4, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13ab0:	6abd      	ldr	r5, [r7, #40]	; 0x28
   13ab2:	351c      	adds	r5, #28
		print_formatted(output, str, args[0], args[1], args[2],
   13ab4:	682d      	ldr	r5, [r5, #0]
				args[8], args[9], args[10]);
   13ab6:	6abe      	ldr	r6, [r7, #40]	; 0x28
   13ab8:	3620      	adds	r6, #32
		print_formatted(output, str, args[0], args[1], args[2],
   13aba:	6836      	ldr	r6, [r6, #0]
				args[8], args[9], args[10]);
   13abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13abe:	f100 0c24 	add.w	ip, r0, #36	; 0x24
		print_formatted(output, str, args[0], args[1], args[2],
   13ac2:	f8dc 0000 	ldr.w	r0, [ip]
   13ac6:	6138      	str	r0, [r7, #16]
				args[8], args[9], args[10]);
   13ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13aca:	f100 0c28 	add.w	ip, r0, #40	; 0x28
		print_formatted(output, str, args[0], args[1], args[2],
   13ace:	f8dc 0000 	ldr.w	r0, [ip]
   13ad2:	9008      	str	r0, [sp, #32]
   13ad4:	6938      	ldr	r0, [r7, #16]
   13ad6:	9007      	str	r0, [sp, #28]
   13ad8:	9606      	str	r6, [sp, #24]
   13ada:	9505      	str	r5, [sp, #20]
   13adc:	9404      	str	r4, [sp, #16]
   13ade:	6978      	ldr	r0, [r7, #20]
   13ae0:	9003      	str	r0, [sp, #12]
   13ae2:	9102      	str	r1, [sp, #8]
   13ae4:	9201      	str	r2, [sp, #4]
   13ae6:	9300      	str	r3, [sp, #0]
   13ae8:	69bb      	ldr	r3, [r7, #24]
   13aea:	69fa      	ldr	r2, [r7, #28]
   13aec:	6b39      	ldr	r1, [r7, #48]	; 0x30
   13aee:	6a38      	ldr	r0, [r7, #32]
   13af0:	f7ff fd18 	bl	13524 <print_formatted>
		break;
   13af4:	e122      	b.n	13d3c <std_print+0x588>
	case 12:
		print_formatted(output, str, args[0], args[1], args[2],
   13af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13af8:	681b      	ldr	r3, [r3, #0]
   13afa:	61fb      	str	r3, [r7, #28]
   13afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13afe:	3304      	adds	r3, #4
   13b00:	6819      	ldr	r1, [r3, #0]
   13b02:	61b9      	str	r1, [r7, #24]
   13b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13b06:	3308      	adds	r3, #8
   13b08:	681b      	ldr	r3, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   13b0c:	320c      	adds	r2, #12
		print_formatted(output, str, args[0], args[1], args[2],
   13b0e:	6812      	ldr	r2, [r2, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13b10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   13b12:	3110      	adds	r1, #16
		print_formatted(output, str, args[0], args[1], args[2],
   13b14:	6809      	ldr	r1, [r1, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13b16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13b18:	3014      	adds	r0, #20
		print_formatted(output, str, args[0], args[1], args[2],
   13b1a:	6800      	ldr	r0, [r0, #0]
   13b1c:	6178      	str	r0, [r7, #20]
				args[3], args[4], args[5], args[6],  args[7],
   13b1e:	6abc      	ldr	r4, [r7, #40]	; 0x28
   13b20:	3418      	adds	r4, #24
		print_formatted(output, str, args[0], args[1], args[2],
   13b22:	6824      	ldr	r4, [r4, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13b24:	6abd      	ldr	r5, [r7, #40]	; 0x28
   13b26:	351c      	adds	r5, #28
		print_formatted(output, str, args[0], args[1], args[2],
   13b28:	682d      	ldr	r5, [r5, #0]
				args[8], args[9], args[10], args[11]);
   13b2a:	6abe      	ldr	r6, [r7, #40]	; 0x28
   13b2c:	3620      	adds	r6, #32
		print_formatted(output, str, args[0], args[1], args[2],
   13b2e:	6836      	ldr	r6, [r6, #0]
				args[8], args[9], args[10], args[11]);
   13b30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13b32:	f100 0c24 	add.w	ip, r0, #36	; 0x24
		print_formatted(output, str, args[0], args[1], args[2],
   13b36:	f8dc 0000 	ldr.w	r0, [ip]
   13b3a:	6138      	str	r0, [r7, #16]
				args[8], args[9], args[10], args[11]);
   13b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13b3e:	f100 0c28 	add.w	ip, r0, #40	; 0x28
		print_formatted(output, str, args[0], args[1], args[2],
   13b42:	f8dc 0000 	ldr.w	r0, [ip]
   13b46:	60f8      	str	r0, [r7, #12]
				args[8], args[9], args[10], args[11]);
   13b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13b4a:	f100 0c2c 	add.w	ip, r0, #44	; 0x2c
		print_formatted(output, str, args[0], args[1], args[2],
   13b4e:	f8dc 0000 	ldr.w	r0, [ip]
   13b52:	9009      	str	r0, [sp, #36]	; 0x24
   13b54:	68f8      	ldr	r0, [r7, #12]
   13b56:	9008      	str	r0, [sp, #32]
   13b58:	6938      	ldr	r0, [r7, #16]
   13b5a:	9007      	str	r0, [sp, #28]
   13b5c:	9606      	str	r6, [sp, #24]
   13b5e:	9505      	str	r5, [sp, #20]
   13b60:	9404      	str	r4, [sp, #16]
   13b62:	6978      	ldr	r0, [r7, #20]
   13b64:	9003      	str	r0, [sp, #12]
   13b66:	9102      	str	r1, [sp, #8]
   13b68:	9201      	str	r2, [sp, #4]
   13b6a:	9300      	str	r3, [sp, #0]
   13b6c:	69bb      	ldr	r3, [r7, #24]
   13b6e:	69fa      	ldr	r2, [r7, #28]
   13b70:	6b39      	ldr	r1, [r7, #48]	; 0x30
   13b72:	6a38      	ldr	r0, [r7, #32]
   13b74:	f7ff fcd6 	bl	13524 <print_formatted>
		break;
   13b78:	e0e0      	b.n	13d3c <std_print+0x588>
	case 13:
		print_formatted(output, str, args[0], args[1], args[2],
   13b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13b7c:	681b      	ldr	r3, [r3, #0]
   13b7e:	61fb      	str	r3, [r7, #28]
   13b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13b82:	3304      	adds	r3, #4
   13b84:	6819      	ldr	r1, [r3, #0]
   13b86:	61b9      	str	r1, [r7, #24]
   13b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13b8a:	3308      	adds	r3, #8
   13b8c:	681b      	ldr	r3, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   13b90:	320c      	adds	r2, #12
		print_formatted(output, str, args[0], args[1], args[2],
   13b92:	6812      	ldr	r2, [r2, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13b94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   13b96:	3110      	adds	r1, #16
		print_formatted(output, str, args[0], args[1], args[2],
   13b98:	6809      	ldr	r1, [r1, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13b9c:	3014      	adds	r0, #20
		print_formatted(output, str, args[0], args[1], args[2],
   13b9e:	6800      	ldr	r0, [r0, #0]
   13ba0:	6178      	str	r0, [r7, #20]
				args[3], args[4], args[5], args[6],  args[7],
   13ba2:	6abc      	ldr	r4, [r7, #40]	; 0x28
   13ba4:	3418      	adds	r4, #24
		print_formatted(output, str, args[0], args[1], args[2],
   13ba6:	6824      	ldr	r4, [r4, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13ba8:	6abd      	ldr	r5, [r7, #40]	; 0x28
   13baa:	351c      	adds	r5, #28
		print_formatted(output, str, args[0], args[1], args[2],
   13bac:	682d      	ldr	r5, [r5, #0]
				args[8], args[9], args[10], args[11], args[12]);
   13bae:	6abe      	ldr	r6, [r7, #40]	; 0x28
   13bb0:	3620      	adds	r6, #32
		print_formatted(output, str, args[0], args[1], args[2],
   13bb2:	6836      	ldr	r6, [r6, #0]
				args[8], args[9], args[10], args[11], args[12]);
   13bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13bb6:	f100 0c24 	add.w	ip, r0, #36	; 0x24
		print_formatted(output, str, args[0], args[1], args[2],
   13bba:	f8dc 0000 	ldr.w	r0, [ip]
   13bbe:	6138      	str	r0, [r7, #16]
				args[8], args[9], args[10], args[11], args[12]);
   13bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13bc2:	f100 0c28 	add.w	ip, r0, #40	; 0x28
		print_formatted(output, str, args[0], args[1], args[2],
   13bc6:	f8dc 0000 	ldr.w	r0, [ip]
   13bca:	60f8      	str	r0, [r7, #12]
				args[8], args[9], args[10], args[11], args[12]);
   13bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13bce:	f100 0c2c 	add.w	ip, r0, #44	; 0x2c
		print_formatted(output, str, args[0], args[1], args[2],
   13bd2:	f8dc 0000 	ldr.w	r0, [ip]
   13bd6:	60b8      	str	r0, [r7, #8]
				args[8], args[9], args[10], args[11], args[12]);
   13bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   13bda:	f100 0c30 	add.w	ip, r0, #48	; 0x30
		print_formatted(output, str, args[0], args[1], args[2],
   13bde:	f8dc 0000 	ldr.w	r0, [ip]
   13be2:	900a      	str	r0, [sp, #40]	; 0x28
   13be4:	68b8      	ldr	r0, [r7, #8]
   13be6:	9009      	str	r0, [sp, #36]	; 0x24
   13be8:	68f8      	ldr	r0, [r7, #12]
   13bea:	9008      	str	r0, [sp, #32]
   13bec:	6938      	ldr	r0, [r7, #16]
   13bee:	9007      	str	r0, [sp, #28]
   13bf0:	9606      	str	r6, [sp, #24]
   13bf2:	9505      	str	r5, [sp, #20]
   13bf4:	9404      	str	r4, [sp, #16]
   13bf6:	6978      	ldr	r0, [r7, #20]
   13bf8:	9003      	str	r0, [sp, #12]
   13bfa:	9102      	str	r1, [sp, #8]
   13bfc:	9201      	str	r2, [sp, #4]
   13bfe:	9300      	str	r3, [sp, #0]
   13c00:	69bb      	ldr	r3, [r7, #24]
   13c02:	69fa      	ldr	r2, [r7, #28]
   13c04:	6b39      	ldr	r1, [r7, #48]	; 0x30
   13c06:	6a38      	ldr	r0, [r7, #32]
   13c08:	f7ff fc8c 	bl	13524 <print_formatted>
		break;
   13c0c:	e096      	b.n	13d3c <std_print+0x588>
	case 14:
		print_formatted(output, str, args[0], args[1], args[2],
   13c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13c10:	681b      	ldr	r3, [r3, #0]
   13c12:	61fb      	str	r3, [r7, #28]
   13c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13c16:	3304      	adds	r3, #4
   13c18:	6819      	ldr	r1, [r3, #0]
   13c1a:	61b9      	str	r1, [r7, #24]
   13c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13c1e:	3308      	adds	r3, #8
   13c20:	681a      	ldr	r2, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13c24:	330c      	adds	r3, #12
		print_formatted(output, str, args[0], args[1], args[2],
   13c26:	6819      	ldr	r1, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13c2a:	3310      	adds	r3, #16
		print_formatted(output, str, args[0], args[1], args[2],
   13c2c:	6818      	ldr	r0, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13c30:	3314      	adds	r3, #20
		print_formatted(output, str, args[0], args[1], args[2],
   13c32:	681c      	ldr	r4, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13c36:	3318      	adds	r3, #24
		print_formatted(output, str, args[0], args[1], args[2],
   13c38:	681d      	ldr	r5, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13c3c:	331c      	adds	r3, #28
		print_formatted(output, str, args[0], args[1], args[2],
   13c3e:	681e      	ldr	r6, [r3, #0]
				args[8], args[9], args[10], args[11], args[12],
   13c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13c42:	3320      	adds	r3, #32
		print_formatted(output, str, args[0], args[1], args[2],
   13c44:	681b      	ldr	r3, [r3, #0]
   13c46:	617b      	str	r3, [r7, #20]
				args[8], args[9], args[10], args[11], args[12],
   13c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13c4a:	3324      	adds	r3, #36	; 0x24
		print_formatted(output, str, args[0], args[1], args[2],
   13c4c:	681b      	ldr	r3, [r3, #0]
   13c4e:	613b      	str	r3, [r7, #16]
				args[8], args[9], args[10], args[11], args[12],
   13c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13c52:	3328      	adds	r3, #40	; 0x28
		print_formatted(output, str, args[0], args[1], args[2],
   13c54:	681b      	ldr	r3, [r3, #0]
   13c56:	60fb      	str	r3, [r7, #12]
				args[8], args[9], args[10], args[11], args[12],
   13c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13c5a:	332c      	adds	r3, #44	; 0x2c
		print_formatted(output, str, args[0], args[1], args[2],
   13c5c:	681b      	ldr	r3, [r3, #0]
   13c5e:	60bb      	str	r3, [r7, #8]
				args[8], args[9], args[10], args[11], args[12],
   13c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13c62:	3330      	adds	r3, #48	; 0x30
		print_formatted(output, str, args[0], args[1], args[2],
   13c64:	681b      	ldr	r3, [r3, #0]
   13c66:	607b      	str	r3, [r7, #4]
				args[13]);
   13c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13c6a:	3334      	adds	r3, #52	; 0x34
		print_formatted(output, str, args[0], args[1], args[2],
   13c6c:	681b      	ldr	r3, [r3, #0]
   13c6e:	930b      	str	r3, [sp, #44]	; 0x2c
   13c70:	687b      	ldr	r3, [r7, #4]
   13c72:	930a      	str	r3, [sp, #40]	; 0x28
   13c74:	68bb      	ldr	r3, [r7, #8]
   13c76:	9309      	str	r3, [sp, #36]	; 0x24
   13c78:	68fb      	ldr	r3, [r7, #12]
   13c7a:	9308      	str	r3, [sp, #32]
   13c7c:	693b      	ldr	r3, [r7, #16]
   13c7e:	9307      	str	r3, [sp, #28]
   13c80:	697b      	ldr	r3, [r7, #20]
   13c82:	9306      	str	r3, [sp, #24]
   13c84:	9605      	str	r6, [sp, #20]
   13c86:	9504      	str	r5, [sp, #16]
   13c88:	9403      	str	r4, [sp, #12]
   13c8a:	9002      	str	r0, [sp, #8]
   13c8c:	9101      	str	r1, [sp, #4]
   13c8e:	9200      	str	r2, [sp, #0]
   13c90:	69bb      	ldr	r3, [r7, #24]
   13c92:	69fa      	ldr	r2, [r7, #28]
   13c94:	6b39      	ldr	r1, [r7, #48]	; 0x30
   13c96:	6a38      	ldr	r0, [r7, #32]
   13c98:	f7ff fc44 	bl	13524 <print_formatted>
		break;
   13c9c:	e04e      	b.n	13d3c <std_print+0x588>
	case 15:
		print_formatted(output, str, args[0], args[1], args[2],
   13c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13ca0:	681b      	ldr	r3, [r3, #0]
   13ca2:	61fb      	str	r3, [r7, #28]
   13ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13ca6:	3304      	adds	r3, #4
   13ca8:	6819      	ldr	r1, [r3, #0]
   13caa:	61b9      	str	r1, [r7, #24]
   13cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13cae:	3308      	adds	r3, #8
   13cb0:	6819      	ldr	r1, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13cb4:	330c      	adds	r3, #12
		print_formatted(output, str, args[0], args[1], args[2],
   13cb6:	6818      	ldr	r0, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13cba:	3310      	adds	r3, #16
		print_formatted(output, str, args[0], args[1], args[2],
   13cbc:	681c      	ldr	r4, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13cc0:	3314      	adds	r3, #20
		print_formatted(output, str, args[0], args[1], args[2],
   13cc2:	681d      	ldr	r5, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13cc6:	3318      	adds	r3, #24
		print_formatted(output, str, args[0], args[1], args[2],
   13cc8:	681e      	ldr	r6, [r3, #0]
				args[3], args[4], args[5], args[6],  args[7],
   13cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13ccc:	331c      	adds	r3, #28
		print_formatted(output, str, args[0], args[1], args[2],
   13cce:	681a      	ldr	r2, [r3, #0]
   13cd0:	617a      	str	r2, [r7, #20]
				args[8], args[9], args[10], args[11], args[12],
   13cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13cd4:	3320      	adds	r3, #32
		print_formatted(output, str, args[0], args[1], args[2],
   13cd6:	681b      	ldr	r3, [r3, #0]
   13cd8:	613b      	str	r3, [r7, #16]
				args[8], args[9], args[10], args[11], args[12],
   13cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13cdc:	3324      	adds	r3, #36	; 0x24
		print_formatted(output, str, args[0], args[1], args[2],
   13cde:	681a      	ldr	r2, [r3, #0]
   13ce0:	60fa      	str	r2, [r7, #12]
				args[8], args[9], args[10], args[11], args[12],
   13ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13ce4:	3328      	adds	r3, #40	; 0x28
		print_formatted(output, str, args[0], args[1], args[2],
   13ce6:	681b      	ldr	r3, [r3, #0]
   13ce8:	60bb      	str	r3, [r7, #8]
				args[8], args[9], args[10], args[11], args[12],
   13cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13cec:	332c      	adds	r3, #44	; 0x2c
		print_formatted(output, str, args[0], args[1], args[2],
   13cee:	681a      	ldr	r2, [r3, #0]
   13cf0:	607a      	str	r2, [r7, #4]
				args[8], args[9], args[10], args[11], args[12],
   13cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13cf4:	3330      	adds	r3, #48	; 0x30
		print_formatted(output, str, args[0], args[1], args[2],
   13cf6:	681b      	ldr	r3, [r3, #0]
   13cf8:	603b      	str	r3, [r7, #0]
				args[13], args[14]);
   13cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13cfc:	3334      	adds	r3, #52	; 0x34
		print_formatted(output, str, args[0], args[1], args[2],
   13cfe:	681a      	ldr	r2, [r3, #0]
				args[13], args[14]);
   13d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
   13d02:	3338      	adds	r3, #56	; 0x38
		print_formatted(output, str, args[0], args[1], args[2],
   13d04:	681b      	ldr	r3, [r3, #0]
   13d06:	930c      	str	r3, [sp, #48]	; 0x30
   13d08:	920b      	str	r2, [sp, #44]	; 0x2c
   13d0a:	683b      	ldr	r3, [r7, #0]
   13d0c:	930a      	str	r3, [sp, #40]	; 0x28
   13d0e:	687a      	ldr	r2, [r7, #4]
   13d10:	9209      	str	r2, [sp, #36]	; 0x24
   13d12:	68bb      	ldr	r3, [r7, #8]
   13d14:	9308      	str	r3, [sp, #32]
   13d16:	68fa      	ldr	r2, [r7, #12]
   13d18:	9207      	str	r2, [sp, #28]
   13d1a:	693b      	ldr	r3, [r7, #16]
   13d1c:	9306      	str	r3, [sp, #24]
   13d1e:	697a      	ldr	r2, [r7, #20]
   13d20:	9205      	str	r2, [sp, #20]
   13d22:	9604      	str	r6, [sp, #16]
   13d24:	9503      	str	r5, [sp, #12]
   13d26:	9402      	str	r4, [sp, #8]
   13d28:	9001      	str	r0, [sp, #4]
   13d2a:	9100      	str	r1, [sp, #0]
   13d2c:	69bb      	ldr	r3, [r7, #24]
   13d2e:	69fa      	ldr	r2, [r7, #28]
   13d30:	6b39      	ldr	r1, [r7, #48]	; 0x30
   13d32:	6a38      	ldr	r0, [r7, #32]
   13d34:	f7ff fbf6 	bl	13524 <print_formatted>
		break;
   13d38:	e000      	b.n	13d3c <std_print+0x588>
	default:
		/* Unsupported number of arguments. */
		__ASSERT_NO_MSG(true);
		break;
   13d3a:	bf00      	nop
	}
}
   13d3c:	bf00      	nop
   13d3e:	373c      	adds	r7, #60	; 0x3c
   13d40:	46bd      	mov	sp, r7
   13d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013d44 <hexdump_line_print>:

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
   13d44:	b580      	push	{r7, lr}
   13d46:	b088      	sub	sp, #32
   13d48:	af00      	add	r7, sp, #0
   13d4a:	60f8      	str	r0, [r7, #12]
   13d4c:	60b9      	str	r1, [r7, #8]
   13d4e:	607a      	str	r2, [r7, #4]
   13d50:	603b      	str	r3, [r7, #0]
	newline_print(output, flags);
   13d52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   13d54:	68f8      	ldr	r0, [r7, #12]
   13d56:	f7ff fd0b 	bl	13770 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
   13d5a:	2300      	movs	r3, #0
   13d5c:	61fb      	str	r3, [r7, #28]
   13d5e:	e006      	b.n	13d6e <hexdump_line_print+0x2a>
		print_formatted(output, " ");
   13d60:	4936      	ldr	r1, [pc, #216]	; (13e3c <hexdump_line_print+0xf8>)
   13d62:	68f8      	ldr	r0, [r7, #12]
   13d64:	f7ff fbde 	bl	13524 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   13d68:	69fb      	ldr	r3, [r7, #28]
   13d6a:	3301      	adds	r3, #1
   13d6c:	61fb      	str	r3, [r7, #28]
   13d6e:	69fa      	ldr	r2, [r7, #28]
   13d70:	683b      	ldr	r3, [r7, #0]
   13d72:	429a      	cmp	r2, r3
   13d74:	dbf4      	blt.n	13d60 <hexdump_line_print+0x1c>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13d76:	2300      	movs	r3, #0
   13d78:	61bb      	str	r3, [r7, #24]
   13d7a:	e020      	b.n	13dbe <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
   13d7c:	69bb      	ldr	r3, [r7, #24]
   13d7e:	2b00      	cmp	r3, #0
   13d80:	dd08      	ble.n	13d94 <hexdump_line_print+0x50>
   13d82:	69bb      	ldr	r3, [r7, #24]
   13d84:	f003 0307 	and.w	r3, r3, #7
   13d88:	2b00      	cmp	r3, #0
   13d8a:	d103      	bne.n	13d94 <hexdump_line_print+0x50>
			print_formatted(output, " ");
   13d8c:	492b      	ldr	r1, [pc, #172]	; (13e3c <hexdump_line_print+0xf8>)
   13d8e:	68f8      	ldr	r0, [r7, #12]
   13d90:	f7ff fbc8 	bl	13524 <print_formatted>
		}

		if (i < length) {
   13d94:	69bb      	ldr	r3, [r7, #24]
   13d96:	687a      	ldr	r2, [r7, #4]
   13d98:	429a      	cmp	r2, r3
   13d9a:	d909      	bls.n	13db0 <hexdump_line_print+0x6c>
			print_formatted(output, "%02x ", data[i]);
   13d9c:	69bb      	ldr	r3, [r7, #24]
   13d9e:	68ba      	ldr	r2, [r7, #8]
   13da0:	4413      	add	r3, r2
   13da2:	781b      	ldrb	r3, [r3, #0]
   13da4:	461a      	mov	r2, r3
   13da6:	4926      	ldr	r1, [pc, #152]	; (13e40 <hexdump_line_print+0xfc>)
   13da8:	68f8      	ldr	r0, [r7, #12]
   13daa:	f7ff fbbb 	bl	13524 <print_formatted>
   13dae:	e003      	b.n	13db8 <hexdump_line_print+0x74>
		} else {
			print_formatted(output, "   ");
   13db0:	4924      	ldr	r1, [pc, #144]	; (13e44 <hexdump_line_print+0x100>)
   13db2:	68f8      	ldr	r0, [r7, #12]
   13db4:	f7ff fbb6 	bl	13524 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13db8:	69bb      	ldr	r3, [r7, #24]
   13dba:	3301      	adds	r3, #1
   13dbc:	61bb      	str	r3, [r7, #24]
   13dbe:	69bb      	ldr	r3, [r7, #24]
   13dc0:	2b0f      	cmp	r3, #15
   13dc2:	dddb      	ble.n	13d7c <hexdump_line_print+0x38>
		}
	}

	print_formatted(output, "|");
   13dc4:	4920      	ldr	r1, [pc, #128]	; (13e48 <hexdump_line_print+0x104>)
   13dc6:	68f8      	ldr	r0, [r7, #12]
   13dc8:	f7ff fbac 	bl	13524 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13dcc:	2300      	movs	r3, #0
   13dce:	617b      	str	r3, [r7, #20]
   13dd0:	e02b      	b.n	13e2a <hexdump_line_print+0xe6>
		if (i > 0 && !(i % 8)) {
   13dd2:	697b      	ldr	r3, [r7, #20]
   13dd4:	2b00      	cmp	r3, #0
   13dd6:	dd08      	ble.n	13dea <hexdump_line_print+0xa6>
   13dd8:	697b      	ldr	r3, [r7, #20]
   13dda:	f003 0307 	and.w	r3, r3, #7
   13dde:	2b00      	cmp	r3, #0
   13de0:	d103      	bne.n	13dea <hexdump_line_print+0xa6>
			print_formatted(output, " ");
   13de2:	4916      	ldr	r1, [pc, #88]	; (13e3c <hexdump_line_print+0xf8>)
   13de4:	68f8      	ldr	r0, [r7, #12]
   13de6:	f7ff fb9d 	bl	13524 <print_formatted>
		}

		if (i < length) {
   13dea:	697b      	ldr	r3, [r7, #20]
   13dec:	687a      	ldr	r2, [r7, #4]
   13dee:	429a      	cmp	r2, r3
   13df0:	d914      	bls.n	13e1c <hexdump_line_print+0xd8>
			char c = (char)data[i];
   13df2:	697b      	ldr	r3, [r7, #20]
   13df4:	68ba      	ldr	r2, [r7, #8]
   13df6:	4413      	add	r3, r2
   13df8:	781b      	ldrb	r3, [r3, #0]
   13dfa:	74fb      	strb	r3, [r7, #19]

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
   13dfc:	7cfb      	ldrb	r3, [r7, #19]
   13dfe:	4618      	mov	r0, r3
   13e00:	f00f fb44 	bl	2348c <isprint>
   13e04:	4603      	mov	r3, r0
			print_formatted(output, "%c",
   13e06:	2b00      	cmp	r3, #0
   13e08:	d001      	beq.n	13e0e <hexdump_line_print+0xca>
   13e0a:	7cfb      	ldrb	r3, [r7, #19]
   13e0c:	e000      	b.n	13e10 <hexdump_line_print+0xcc>
   13e0e:	232e      	movs	r3, #46	; 0x2e
   13e10:	461a      	mov	r2, r3
   13e12:	490e      	ldr	r1, [pc, #56]	; (13e4c <hexdump_line_print+0x108>)
   13e14:	68f8      	ldr	r0, [r7, #12]
   13e16:	f7ff fb85 	bl	13524 <print_formatted>
   13e1a:	e003      	b.n	13e24 <hexdump_line_print+0xe0>
		} else {
			print_formatted(output, " ");
   13e1c:	4907      	ldr	r1, [pc, #28]	; (13e3c <hexdump_line_print+0xf8>)
   13e1e:	68f8      	ldr	r0, [r7, #12]
   13e20:	f7ff fb80 	bl	13524 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13e24:	697b      	ldr	r3, [r7, #20]
   13e26:	3301      	adds	r3, #1
   13e28:	617b      	str	r3, [r7, #20]
   13e2a:	697b      	ldr	r3, [r7, #20]
   13e2c:	2b0f      	cmp	r3, #15
   13e2e:	ddd0      	ble.n	13dd2 <hexdump_line_print+0x8e>
		}
	}
}
   13e30:	bf00      	nop
   13e32:	bf00      	nop
   13e34:	3720      	adds	r7, #32
   13e36:	46bd      	mov	sp, r7
   13e38:	bd80      	pop	{r7, pc}
   13e3a:	bf00      	nop
   13e3c:	00029c90 	.word	0x00029c90
   13e40:	00029c94 	.word	0x00029c94
   13e44:	00029c9c 	.word	0x00029c9c
   13e48:	00029ca0 	.word	0x00029ca0
   13e4c:	00029ca4 	.word	0x00029ca4

00013e50 <hexdump_print>:

static void hexdump_print(struct log_msg *msg,
			  const struct log_output *output,
			  int prefix_offset, uint32_t flags)
{
   13e50:	b580      	push	{r7, lr}
   13e52:	b08c      	sub	sp, #48	; 0x30
   13e54:	af02      	add	r7, sp, #8
   13e56:	60f8      	str	r0, [r7, #12]
   13e58:	60b9      	str	r1, [r7, #8]
   13e5a:	607a      	str	r2, [r7, #4]
   13e5c:	603b      	str	r3, [r7, #0]
	uint32_t offset = 0U;
   13e5e:	2300      	movs	r3, #0
   13e60:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t buf[HEXDUMP_BYTES_IN_LINE];
	size_t length;

	print_formatted(output, "%s", log_msg_str_get(msg));
   13e62:	68f8      	ldr	r0, [r7, #12]
   13e64:	f00f f950 	bl	23108 <log_msg_str_get>
   13e68:	4603      	mov	r3, r0
   13e6a:	461a      	mov	r2, r3
   13e6c:	4911      	ldr	r1, [pc, #68]	; (13eb4 <hexdump_print+0x64>)
   13e6e:	68b8      	ldr	r0, [r7, #8]
   13e70:	f7ff fb58 	bl	13524 <print_formatted>

	do {
		length = sizeof(buf);
   13e74:	2310      	movs	r3, #16
   13e76:	613b      	str	r3, [r7, #16]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   13e78:	f107 0210 	add.w	r2, r7, #16
   13e7c:	f107 0114 	add.w	r1, r7, #20
   13e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13e82:	68f8      	ldr	r0, [r7, #12]
   13e84:	f00f fa84 	bl	23390 <log_msg_hexdump_data_get>

		if (length) {
   13e88:	693b      	ldr	r3, [r7, #16]
   13e8a:	2b00      	cmp	r3, #0
   13e8c:	d00d      	beq.n	13eaa <hexdump_print+0x5a>
			hexdump_line_print(output, buf, length,
   13e8e:	693a      	ldr	r2, [r7, #16]
   13e90:	f107 0114 	add.w	r1, r7, #20
   13e94:	683b      	ldr	r3, [r7, #0]
   13e96:	9300      	str	r3, [sp, #0]
   13e98:	687b      	ldr	r3, [r7, #4]
   13e9a:	68b8      	ldr	r0, [r7, #8]
   13e9c:	f7ff ff52 	bl	13d44 <hexdump_line_print>
					   prefix_offset, flags);
			offset += length;
   13ea0:	693b      	ldr	r3, [r7, #16]
   13ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13ea4:	4413      	add	r3, r2
   13ea6:	627b      	str	r3, [r7, #36]	; 0x24
		length = sizeof(buf);
   13ea8:	e7e4      	b.n	13e74 <hexdump_print+0x24>
		} else {
			break;
   13eaa:	bf00      	nop
		}
	} while (true);
}
   13eac:	bf00      	nop
   13eae:	3728      	adds	r7, #40	; 0x28
   13eb0:	46bd      	mov	sp, r7
   13eb2:	bd80      	pop	{r7, pc}
   13eb4:	00029c70 	.word	0x00029c70

00013eb8 <raw_string_print>:
}


static void raw_string_print(struct log_msg *msg,
			     const struct log_output *output)
{
   13eb8:	b580      	push	{r7, lr}
   13eba:	b086      	sub	sp, #24
   13ebc:	af00      	add	r7, sp, #0
   13ebe:	6078      	str	r0, [r7, #4]
   13ec0:	6039      	str	r1, [r7, #0]
	__ASSERT_NO_MSG(output->size);
   13ec2:	683b      	ldr	r3, [r7, #0]
   13ec4:	68db      	ldr	r3, [r3, #12]
   13ec6:	2b00      	cmp	r3, #0
   13ec8:	d10b      	bne.n	13ee2 <raw_string_print+0x2a>
   13eca:	f240 13cf 	movw	r3, #463	; 0x1cf
   13ece:	4a20      	ldr	r2, [pc, #128]	; (13f50 <raw_string_print+0x98>)
   13ed0:	4920      	ldr	r1, [pc, #128]	; (13f54 <raw_string_print+0x9c>)
   13ed2:	4821      	ldr	r0, [pc, #132]	; (13f58 <raw_string_print+0xa0>)
   13ed4:	f00d f8c8 	bl	21068 <printk>
   13ed8:	f240 11cf 	movw	r1, #463	; 0x1cf
   13edc:	481c      	ldr	r0, [pc, #112]	; (13f50 <raw_string_print+0x98>)
   13ede:	f00e f970 	bl	221c2 <assert_post_action>

	size_t offset = 0;
   13ee2:	2300      	movs	r3, #0
   13ee4:	617b      	str	r3, [r7, #20]
	size_t length;
	bool eol = false;
   13ee6:	2300      	movs	r3, #0
   13ee8:	74fb      	strb	r3, [r7, #19]

	do {
		length = output->size;
   13eea:	683b      	ldr	r3, [r7, #0]
   13eec:	68db      	ldr	r3, [r3, #12]
   13eee:	60fb      	str	r3, [r7, #12]
		/* Sting is stored in a hexdump message. */
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   13ef0:	683b      	ldr	r3, [r7, #0]
   13ef2:	6899      	ldr	r1, [r3, #8]
   13ef4:	f107 020c 	add.w	r2, r7, #12
   13ef8:	697b      	ldr	r3, [r7, #20]
   13efa:	6878      	ldr	r0, [r7, #4]
   13efc:	f00f fa48 	bl	23390 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   13f00:	68fa      	ldr	r2, [r7, #12]
   13f02:	683b      	ldr	r3, [r7, #0]
   13f04:	685b      	ldr	r3, [r3, #4]
   13f06:	601a      	str	r2, [r3, #0]

		if (length != 0) {
   13f08:	68fb      	ldr	r3, [r7, #12]
   13f0a:	2b00      	cmp	r3, #0
   13f0c:	d00a      	beq.n	13f24 <raw_string_print+0x6c>
			eol = (output->buf[length - 1] == '\n');
   13f0e:	683b      	ldr	r3, [r7, #0]
   13f10:	689a      	ldr	r2, [r3, #8]
   13f12:	68fb      	ldr	r3, [r7, #12]
   13f14:	3b01      	subs	r3, #1
   13f16:	4413      	add	r3, r2
   13f18:	781b      	ldrb	r3, [r3, #0]
   13f1a:	2b0a      	cmp	r3, #10
   13f1c:	bf0c      	ite	eq
   13f1e:	2301      	moveq	r3, #1
   13f20:	2300      	movne	r3, #0
   13f22:	74fb      	strb	r3, [r7, #19]
		}

		log_output_flush(output);
   13f24:	6838      	ldr	r0, [r7, #0]
   13f26:	f00f fae0 	bl	234ea <log_output_flush>
		offset += length;
   13f2a:	68fb      	ldr	r3, [r7, #12]
   13f2c:	697a      	ldr	r2, [r7, #20]
   13f2e:	4413      	add	r3, r2
   13f30:	617b      	str	r3, [r7, #20]
	} while (length > 0);
   13f32:	68fb      	ldr	r3, [r7, #12]
   13f34:	2b00      	cmp	r3, #0
   13f36:	d1d8      	bne.n	13eea <raw_string_print+0x32>

	if (eol) {
   13f38:	7cfb      	ldrb	r3, [r7, #19]
   13f3a:	2b00      	cmp	r3, #0
   13f3c:	d003      	beq.n	13f46 <raw_string_print+0x8e>
		print_formatted(output, "\r");
   13f3e:	4907      	ldr	r1, [pc, #28]	; (13f5c <raw_string_print+0xa4>)
   13f40:	6838      	ldr	r0, [r7, #0]
   13f42:	f7ff faef 	bl	13524 <print_formatted>
	}
}
   13f46:	bf00      	nop
   13f48:	3718      	adds	r7, #24
   13f4a:	46bd      	mov	sp, r7
   13f4c:	bd80      	pop	{r7, pc}
   13f4e:	bf00      	nop
   13f50:	00029bc0 	.word	0x00029bc0
   13f54:	00029ca8 	.word	0x00029ca8
   13f58:	00029c20 	.word	0x00029c20
   13f5c:	00029cb8 	.word	0x00029cb8

00013f60 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   13f60:	b580      	push	{r7, lr}
   13f62:	b086      	sub	sp, #24
   13f64:	af00      	add	r7, sp, #0
   13f66:	6078      	str	r0, [r7, #4]
   13f68:	6039      	str	r1, [r7, #0]
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   13f6a:	687b      	ldr	r3, [r7, #4]
   13f6c:	681b      	ldr	r3, [r3, #0]
   13f6e:	617b      	str	r3, [r7, #20]

	cnt = MIN(cnt, 9999);
   13f70:	683b      	ldr	r3, [r7, #0]
   13f72:	f242 720f 	movw	r2, #9999	; 0x270f
   13f76:	4293      	cmp	r3, r2
   13f78:	bf28      	it	cs
   13f7a:	4613      	movcs	r3, r2
   13f7c:	603b      	str	r3, [r7, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13f7e:	f107 0008 	add.w	r0, r7, #8
   13f82:	683b      	ldr	r3, [r7, #0]
   13f84:	4a10      	ldr	r2, [pc, #64]	; (13fc8 <log_output_dropped_process+0x68>)
   13f86:	2105      	movs	r1, #5
   13f88:	f00d f8b9 	bl	210fe <snprintk>
   13f8c:	6138      	str	r0, [r7, #16]

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   13f8e:	687b      	ldr	r3, [r7, #4]
   13f90:	685b      	ldr	r3, [r3, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   13f92:	685b      	ldr	r3, [r3, #4]
   13f94:	220b      	movs	r2, #11
   13f96:	490d      	ldr	r1, [pc, #52]	; (13fcc <log_output_dropped_process+0x6c>)
   13f98:	6978      	ldr	r0, [r7, #20]
   13f9a:	f00f fa89 	bl	234b0 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   13f9e:	693a      	ldr	r2, [r7, #16]
   13fa0:	687b      	ldr	r3, [r7, #4]
   13fa2:	685b      	ldr	r3, [r3, #4]
   13fa4:	685b      	ldr	r3, [r3, #4]
   13fa6:	f107 0108 	add.w	r1, r7, #8
   13faa:	6978      	ldr	r0, [r7, #20]
   13fac:	f00f fa80 	bl	234b0 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   13fb0:	687b      	ldr	r3, [r7, #4]
   13fb2:	685b      	ldr	r3, [r3, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   13fb4:	685b      	ldr	r3, [r3, #4]
   13fb6:	221b      	movs	r2, #27
   13fb8:	4905      	ldr	r1, [pc, #20]	; (13fd0 <log_output_dropped_process+0x70>)
   13fba:	6978      	ldr	r0, [r7, #20]
   13fbc:	f00f fa78 	bl	234b0 <buffer_write>
}
   13fc0:	bf00      	nop
   13fc2:	3718      	adds	r7, #24
   13fc4:	46bd      	mov	sp, r7
   13fc6:	bd80      	pop	{r7, pc}
   13fc8:	00029cc8 	.word	0x00029cc8
   13fcc:	0002cab4 	.word	0x0002cab4
   13fd0:	0002cac0 	.word	0x0002cac0

00013fd4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
   13fd4:	b480      	push	{r7}
   13fd6:	b083      	sub	sp, #12
   13fd8:	af00      	add	r7, sp, #0
   13fda:	6078      	str	r0, [r7, #4]
	timestamp_div = 1U;
   13fdc:	4b0b      	ldr	r3, [pc, #44]	; (1400c <log_output_timestamp_freq_set+0x38>)
   13fde:	2201      	movs	r2, #1
   13fe0:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   13fe2:	e007      	b.n	13ff4 <log_output_timestamp_freq_set+0x20>
		frequency /= 2U;
   13fe4:	687b      	ldr	r3, [r7, #4]
   13fe6:	085b      	lsrs	r3, r3, #1
   13fe8:	607b      	str	r3, [r7, #4]
		timestamp_div *= 2U;
   13fea:	4b08      	ldr	r3, [pc, #32]	; (1400c <log_output_timestamp_freq_set+0x38>)
   13fec:	681b      	ldr	r3, [r3, #0]
   13fee:	005b      	lsls	r3, r3, #1
   13ff0:	4a06      	ldr	r2, [pc, #24]	; (1400c <log_output_timestamp_freq_set+0x38>)
   13ff2:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   13ff4:	687b      	ldr	r3, [r7, #4]
   13ff6:	4a06      	ldr	r2, [pc, #24]	; (14010 <log_output_timestamp_freq_set+0x3c>)
   13ff8:	4293      	cmp	r3, r2
   13ffa:	d8f3      	bhi.n	13fe4 <log_output_timestamp_freq_set+0x10>
	}

	freq = frequency;
   13ffc:	4a05      	ldr	r2, [pc, #20]	; (14014 <log_output_timestamp_freq_set+0x40>)
   13ffe:	687b      	ldr	r3, [r7, #4]
   14000:	6013      	str	r3, [r2, #0]
}
   14002:	bf00      	nop
   14004:	370c      	adds	r7, #12
   14006:	46bd      	mov	sp, r7
   14008:	bc80      	pop	{r7}
   1400a:	4770      	bx	lr
   1400c:	20014c04 	.word	0x20014c04
   14010:	000f4240 	.word	0x000f4240
   14014:	20014c00 	.word	0x20014c00

00014018 <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   14018:	b580      	push	{r7, lr}
   1401a:	b086      	sub	sp, #24
   1401c:	af00      	add	r7, sp, #0
   1401e:	60f8      	str	r0, [r7, #12]
   14020:	60b9      	str	r1, [r7, #8]
   14022:	607a      	str	r2, [r7, #4]
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
   14024:	2300      	movs	r3, #0
   14026:	617b      	str	r3, [r7, #20]
   14028:	e00b      	b.n	14042 <char_out+0x2a>
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
   1402a:	4b0a      	ldr	r3, [pc, #40]	; (14054 <char_out+0x3c>)
   1402c:	6818      	ldr	r0, [r3, #0]
   1402e:	68fa      	ldr	r2, [r7, #12]
   14030:	697b      	ldr	r3, [r7, #20]
   14032:	4413      	add	r3, r2
   14034:	781b      	ldrb	r3, [r3, #0]
   14036:	4619      	mov	r1, r3
   14038:	f00f fbc6 	bl	237c8 <uart_poll_out>
	for (size_t i = 0; i < length; i++) {
   1403c:	697b      	ldr	r3, [r7, #20]
   1403e:	3301      	adds	r3, #1
   14040:	617b      	str	r3, [r7, #20]
   14042:	697a      	ldr	r2, [r7, #20]
   14044:	68bb      	ldr	r3, [r7, #8]
   14046:	429a      	cmp	r2, r3
   14048:	d3ef      	bcc.n	1402a <char_out+0x12>
#endif
	}

	return length;
   1404a:	68bb      	ldr	r3, [r7, #8]
}
   1404c:	4618      	mov	r0, r3
   1404e:	3718      	adds	r7, #24
   14050:	46bd      	mov	sp, r7
   14052:	bd80      	pop	{r7, pc}
   14054:	20014c08 	.word	0x20014c08

00014058 <put>:

LOG_OUTPUT_DEFINE(log_output_uart, char_out, &uart_output_buf, 1);

static void put(const struct log_backend *const backend,
		struct log_msg *msg)
{
   14058:	b580      	push	{r7, lr}
   1405a:	b084      	sub	sp, #16
   1405c:	af00      	add	r7, sp, #0
   1405e:	6078      	str	r0, [r7, #4]
   14060:	6039      	str	r1, [r7, #0]
	uint32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
   14062:	2300      	movs	r3, #0
   14064:	60fb      	str	r3, [r7, #12]
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_put(&log_output_uart, flag, msg);
   14066:	683a      	ldr	r2, [r7, #0]
   14068:	68f9      	ldr	r1, [r7, #12]
   1406a:	4803      	ldr	r0, [pc, #12]	; (14078 <put+0x20>)
   1406c:	f00f fb5a 	bl	23724 <log_backend_std_put>
}
   14070:	bf00      	nop
   14072:	3710      	adds	r7, #16
   14074:	46bd      	mov	sp, r7
   14076:	bd80      	pop	{r7, pc}
   14078:	0002cadc 	.word	0x0002cadc

0001407c <log_backend_uart_init>:
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
   1407c:	b580      	push	{r7, lr}
   1407e:	b082      	sub	sp, #8
   14080:	af00      	add	r7, sp, #0
   14082:	6078      	str	r0, [r7, #4]
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   14084:	480b      	ldr	r0, [pc, #44]	; (140b4 <log_backend_uart_init+0x38>)
   14086:	f00f fb80 	bl	2378a <device_get_binding>
   1408a:	4603      	mov	r3, r0
   1408c:	4a0a      	ldr	r2, [pc, #40]	; (140b8 <log_backend_uart_init+0x3c>)
   1408e:	6013      	str	r3, [r2, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
   14090:	4b09      	ldr	r3, [pc, #36]	; (140b8 <log_backend_uart_init+0x3c>)
   14092:	681b      	ldr	r3, [r3, #0]
   14094:	2b00      	cmp	r3, #0
   14096:	d109      	bne.n	140ac <log_backend_uart_init+0x30>
   14098:	234f      	movs	r3, #79	; 0x4f
   1409a:	4a08      	ldr	r2, [pc, #32]	; (140bc <log_backend_uart_init+0x40>)
   1409c:	4908      	ldr	r1, [pc, #32]	; (140c0 <log_backend_uart_init+0x44>)
   1409e:	4809      	ldr	r0, [pc, #36]	; (140c4 <log_backend_uart_init+0x48>)
   140a0:	f00c ffe2 	bl	21068 <printk>
   140a4:	214f      	movs	r1, #79	; 0x4f
   140a6:	4805      	ldr	r0, [pc, #20]	; (140bc <log_backend_uart_init+0x40>)
   140a8:	f00e f88b 	bl	221c2 <assert_post_action>
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
   140ac:	bf00      	nop
   140ae:	3708      	adds	r7, #8
   140b0:	46bd      	mov	sp, r7
   140b2:	bd80      	pop	{r7, pc}
   140b4:	00029ccc 	.word	0x00029ccc
   140b8:	20014c08 	.word	0x20014c08
   140bc:	00029cd4 	.word	0x00029cd4
   140c0:	00029d0c 	.word	0x00029d0c
   140c4:	00029d20 	.word	0x00029d20

000140c8 <panic>:

static void panic(struct log_backend const *const backend)
{
   140c8:	b580      	push	{r7, lr}
   140ca:	b082      	sub	sp, #8
   140cc:	af00      	add	r7, sp, #0
   140ce:	6078      	str	r0, [r7, #4]
	log_backend_std_panic(&log_output_uart);
   140d0:	4803      	ldr	r0, [pc, #12]	; (140e0 <panic+0x18>)
   140d2:	f00f fb42 	bl	2375a <log_backend_std_panic>
}
   140d6:	bf00      	nop
   140d8:	3708      	adds	r7, #8
   140da:	46bd      	mov	sp, r7
   140dc:	bd80      	pop	{r7, pc}
   140de:	bf00      	nop
   140e0:	0002cadc 	.word	0x0002cadc

000140e4 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
   140e4:	b580      	push	{r7, lr}
   140e6:	b082      	sub	sp, #8
   140e8:	af00      	add	r7, sp, #0
   140ea:	6078      	str	r0, [r7, #4]
   140ec:	6039      	str	r1, [r7, #0]
	ARG_UNUSED(backend);

	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
   140ee:	6839      	ldr	r1, [r7, #0]
   140f0:	4803      	ldr	r0, [pc, #12]	; (14100 <dropped+0x1c>)
   140f2:	f00f fb3d 	bl	23770 <log_backend_std_dropped>
	}
}
   140f6:	bf00      	nop
   140f8:	3708      	adds	r7, #8
   140fa:	46bd      	mov	sp, r7
   140fc:	bd80      	pop	{r7, pc}
   140fe:	bf00      	nop
   14100:	0002cadc 	.word	0x0002cadc

00014104 <k_us_to_ticks_ceil32>:
 * Rounds up to the next highest output unit.
 *
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint32_t k_us_to_ticks_ceil32(uint32_t t)
{
   14104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   14108:	b08c      	sub	sp, #48	; 0x30
   1410a:	af00      	add	r7, sp, #0
   1410c:	6078      	str	r0, [r7, #4]
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_us, Z_HZ_ticks, true, true, true, false);
   1410e:	687b      	ldr	r3, [r7, #4]
   14110:	461a      	mov	r2, r3
   14112:	f04f 0300 	mov.w	r3, #0
   14116:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   1411a:	4b8c      	ldr	r3, [pc, #560]	; (1434c <k_us_to_ticks_ceil32+0x248>)
   1411c:	627b      	str	r3, [r7, #36]	; 0x24
   1411e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   14122:	623b      	str	r3, [r7, #32]
   14124:	2301      	movs	r3, #1
   14126:	77fb      	strb	r3, [r7, #31]
   14128:	2301      	movs	r3, #1
   1412a:	77bb      	strb	r3, [r7, #30]
   1412c:	2301      	movs	r3, #1
   1412e:	777b      	strb	r3, [r7, #29]
   14130:	2300      	movs	r3, #0
   14132:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   14134:	7ffb      	ldrb	r3, [r7, #31]
   14136:	2b00      	cmp	r3, #0
   14138:	d00f      	beq.n	1415a <k_us_to_ticks_ceil32+0x56>
	bool mul_ratio = const_hz &&
   1413a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1413c:	6a3b      	ldr	r3, [r7, #32]
   1413e:	429a      	cmp	r2, r3
   14140:	d20b      	bcs.n	1415a <k_us_to_ticks_ceil32+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   14142:	6a3b      	ldr	r3, [r7, #32]
   14144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   14146:	fbb3 f2f2 	udiv	r2, r3, r2
   1414a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1414c:	fb01 f202 	mul.w	r2, r1, r2
   14150:	1a9b      	subs	r3, r3, r2
   14152:	2b00      	cmp	r3, #0
   14154:	d101      	bne.n	1415a <k_us_to_ticks_ceil32+0x56>
   14156:	2301      	movs	r3, #1
   14158:	e000      	b.n	1415c <k_us_to_ticks_ceil32+0x58>
   1415a:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   1415c:	76fb      	strb	r3, [r7, #27]
   1415e:	7efb      	ldrb	r3, [r7, #27]
   14160:	f003 0301 	and.w	r3, r3, #1
   14164:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   14166:	7ffb      	ldrb	r3, [r7, #31]
   14168:	2b00      	cmp	r3, #0
   1416a:	d00f      	beq.n	1418c <k_us_to_ticks_ceil32+0x88>
	bool div_ratio = const_hz &&
   1416c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1416e:	6a3b      	ldr	r3, [r7, #32]
   14170:	429a      	cmp	r2, r3
   14172:	d90b      	bls.n	1418c <k_us_to_ticks_ceil32+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   14174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14176:	6a3a      	ldr	r2, [r7, #32]
   14178:	fbb3 f2f2 	udiv	r2, r3, r2
   1417c:	6a39      	ldr	r1, [r7, #32]
   1417e:	fb01 f202 	mul.w	r2, r1, r2
   14182:	1a9b      	subs	r3, r3, r2
   14184:	2b00      	cmp	r3, #0
   14186:	d101      	bne.n	1418c <k_us_to_ticks_ceil32+0x88>
   14188:	2301      	movs	r3, #1
   1418a:	e000      	b.n	1418e <k_us_to_ticks_ceil32+0x8a>
   1418c:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   1418e:	76bb      	strb	r3, [r7, #26]
   14190:	7ebb      	ldrb	r3, [r7, #26]
   14192:	f003 0301 	and.w	r3, r3, #1
   14196:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   14198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1419a:	6a3b      	ldr	r3, [r7, #32]
   1419c:	429a      	cmp	r2, r3
   1419e:	d10a      	bne.n	141b6 <k_us_to_ticks_ceil32+0xb2>
		return result32 ? ((uint32_t)t) : t;
   141a0:	7fbb      	ldrb	r3, [r7, #30]
   141a2:	2b00      	cmp	r3, #0
   141a4:	d004      	beq.n	141b0 <k_us_to_ticks_ceil32+0xac>
   141a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   141a8:	461a      	mov	r2, r3
   141aa:	f04f 0300 	mov.w	r3, #0
   141ae:	e0c7      	b.n	14340 <k_us_to_ticks_ceil32+0x23c>
   141b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   141b4:	e0c4      	b.n	14340 <k_us_to_ticks_ceil32+0x23c>
	uint64_t off = 0;
   141b6:	f04f 0200 	mov.w	r2, #0
   141ba:	f04f 0300 	mov.w	r3, #0
   141be:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   141c2:	7efb      	ldrb	r3, [r7, #27]
   141c4:	f083 0301 	eor.w	r3, r3, #1
   141c8:	b2db      	uxtb	r3, r3
   141ca:	2b00      	cmp	r3, #0
   141cc:	d01d      	beq.n	1420a <k_us_to_ticks_ceil32+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   141ce:	7ebb      	ldrb	r3, [r7, #26]
   141d0:	2b00      	cmp	r3, #0
   141d2:	d004      	beq.n	141de <k_us_to_ticks_ceil32+0xda>
   141d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   141d6:	6a3b      	ldr	r3, [r7, #32]
   141d8:	fbb2 f3f3 	udiv	r3, r2, r3
   141dc:	e000      	b.n	141e0 <k_us_to_ticks_ceil32+0xdc>
   141de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   141e0:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   141e2:	7f7b      	ldrb	r3, [r7, #29]
   141e4:	2b00      	cmp	r3, #0
   141e6:	d006      	beq.n	141f6 <k_us_to_ticks_ceil32+0xf2>
			off = rdivisor - 1U;
   141e8:	68fb      	ldr	r3, [r7, #12]
   141ea:	3b01      	subs	r3, #1
   141ec:	461a      	mov	r2, r3
   141ee:	f04f 0300 	mov.w	r3, #0
   141f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   141f6:	7f3b      	ldrb	r3, [r7, #28]
   141f8:	2b00      	cmp	r3, #0
   141fa:	d006      	beq.n	1420a <k_us_to_ticks_ceil32+0x106>
			off = rdivisor / 2U;
   141fc:	68fb      	ldr	r3, [r7, #12]
   141fe:	085b      	lsrs	r3, r3, #1
   14200:	461a      	mov	r2, r3
   14202:	f04f 0300 	mov.w	r3, #0
   14206:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   1420a:	7ebb      	ldrb	r3, [r7, #26]
   1420c:	2b00      	cmp	r3, #0
   1420e:	d02a      	beq.n	14266 <k_us_to_ticks_ceil32+0x162>
		t += off;
   14210:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   14214:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   14218:	1884      	adds	r4, r0, r2
   1421a:	eb41 0503 	adc.w	r5, r1, r3
   1421e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   14222:	7fbb      	ldrb	r3, [r7, #30]
   14224:	2b00      	cmp	r3, #0
   14226:	d010      	beq.n	1424a <k_us_to_ticks_ceil32+0x146>
   14228:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   1422c:	2b01      	cmp	r3, #1
   1422e:	bf08      	it	eq
   14230:	2a00      	cmpeq	r2, #0
   14232:	d20a      	bcs.n	1424a <k_us_to_ticks_ceil32+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
   14234:	6aba      	ldr	r2, [r7, #40]	; 0x28
   14236:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14238:	6a3b      	ldr	r3, [r7, #32]
   1423a:	fbb1 f3f3 	udiv	r3, r1, r3
   1423e:	fbb2 f3f3 	udiv	r3, r2, r3
   14242:	461a      	mov	r2, r3
   14244:	f04f 0300 	mov.w	r3, #0
   14248:	e07a      	b.n	14340 <k_us_to_ticks_ceil32+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
   1424a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1424c:	6a3b      	ldr	r3, [r7, #32]
   1424e:	fbb2 f3f3 	udiv	r3, r2, r3
   14252:	461a      	mov	r2, r3
   14254:	f04f 0300 	mov.w	r3, #0
   14258:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   1425c:	f7fb ffee 	bl	1023c <__aeabi_uldivmod>
   14260:	4602      	mov	r2, r0
   14262:	460b      	mov	r3, r1
   14264:	e06c      	b.n	14340 <k_us_to_ticks_ceil32+0x23c>
	} else if (mul_ratio) {
   14266:	7efb      	ldrb	r3, [r7, #27]
   14268:	2b00      	cmp	r3, #0
   1426a:	d021      	beq.n	142b0 <k_us_to_ticks_ceil32+0x1ac>
		if (result32) {
   1426c:	7fbb      	ldrb	r3, [r7, #30]
   1426e:	2b00      	cmp	r3, #0
   14270:	d00a      	beq.n	14288 <k_us_to_ticks_ceil32+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
   14272:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14274:	6a39      	ldr	r1, [r7, #32]
   14276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   14278:	fbb1 f2f2 	udiv	r2, r1, r2
   1427c:	fb02 f303 	mul.w	r3, r2, r3
   14280:	461a      	mov	r2, r3
   14282:	f04f 0300 	mov.w	r3, #0
   14286:	e05b      	b.n	14340 <k_us_to_ticks_ceil32+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
   14288:	6a3a      	ldr	r2, [r7, #32]
   1428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1428c:	fbb2 f3f3 	udiv	r3, r2, r3
   14290:	461a      	mov	r2, r3
   14292:	f04f 0300 	mov.w	r3, #0
   14296:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14298:	fb03 f001 	mul.w	r0, r3, r1
   1429c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1429e:	fb02 f101 	mul.w	r1, r2, r1
   142a2:	4401      	add	r1, r0
   142a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   142a6:	fba0 2302 	umull	r2, r3, r0, r2
   142aa:	4419      	add	r1, r3
   142ac:	460b      	mov	r3, r1
   142ae:	e047      	b.n	14340 <k_us_to_ticks_ceil32+0x23c>
		if (result32) {
   142b0:	7fbb      	ldrb	r3, [r7, #30]
   142b2:	2b00      	cmp	r3, #0
   142b4:	d024      	beq.n	14300 <k_us_to_ticks_ceil32+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   142b6:	6a3b      	ldr	r3, [r7, #32]
   142b8:	461a      	mov	r2, r3
   142ba:	f04f 0300 	mov.w	r3, #0
   142be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   142c0:	fb03 f001 	mul.w	r0, r3, r1
   142c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   142c6:	fb02 f101 	mul.w	r1, r2, r1
   142ca:	4401      	add	r1, r0
   142cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   142ce:	fba0 2302 	umull	r2, r3, r0, r2
   142d2:	4419      	add	r1, r3
   142d4:	460b      	mov	r3, r1
   142d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   142da:	eb12 0a00 	adds.w	sl, r2, r0
   142de:	eb43 0b01 	adc.w	fp, r3, r1
   142e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   142e4:	461a      	mov	r2, r3
   142e6:	f04f 0300 	mov.w	r3, #0
   142ea:	4650      	mov	r0, sl
   142ec:	4659      	mov	r1, fp
   142ee:	f7fb ffa5 	bl	1023c <__aeabi_uldivmod>
   142f2:	4602      	mov	r2, r0
   142f4:	460b      	mov	r3, r1
   142f6:	4613      	mov	r3, r2
   142f8:	461a      	mov	r2, r3
   142fa:	f04f 0300 	mov.w	r3, #0
   142fe:	e01f      	b.n	14340 <k_us_to_ticks_ceil32+0x23c>
			return (t * to_hz + off) / from_hz;
   14300:	6a3b      	ldr	r3, [r7, #32]
   14302:	461a      	mov	r2, r3
   14304:	f04f 0300 	mov.w	r3, #0
   14308:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1430a:	fb03 f001 	mul.w	r0, r3, r1
   1430e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   14310:	fb02 f101 	mul.w	r1, r2, r1
   14314:	4401      	add	r1, r0
   14316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   14318:	fba0 2302 	umull	r2, r3, r0, r2
   1431c:	4419      	add	r1, r3
   1431e:	460b      	mov	r3, r1
   14320:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   14324:	eb12 0800 	adds.w	r8, r2, r0
   14328:	eb43 0901 	adc.w	r9, r3, r1
   1432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1432e:	461a      	mov	r2, r3
   14330:	f04f 0300 	mov.w	r3, #0
   14334:	4640      	mov	r0, r8
   14336:	4649      	mov	r1, r9
   14338:	f7fb ff80 	bl	1023c <__aeabi_uldivmod>
   1433c:	4602      	mov	r2, r0
   1433e:	460b      	mov	r3, r1
	return z_tmcvt(t, Z_HZ_us, Z_HZ_ticks, true, true, true, false);
   14340:	4613      	mov	r3, r2
}
   14342:	4618      	mov	r0, r3
   14344:	3730      	adds	r7, #48	; 0x30
   14346:	46bd      	mov	sp, r7
   14348:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
   1434c:	000f4240 	.word	0x000f4240

00014350 <log_const_source_id>:
{
   14350:	b480      	push	{r7}
   14352:	b083      	sub	sp, #12
   14354:	af00      	add	r7, sp, #0
   14356:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   14358:	687b      	ldr	r3, [r7, #4]
   1435a:	4a04      	ldr	r2, [pc, #16]	; (1436c <log_const_source_id+0x1c>)
   1435c:	1a9b      	subs	r3, r3, r2
   1435e:	08db      	lsrs	r3, r3, #3
}
   14360:	4618      	mov	r0, r3
   14362:	370c      	adds	r7, #12
   14364:	46bd      	mov	sp, r7
   14366:	bc80      	pop	{r7}
   14368:	4770      	bx	lr
   1436a:	bf00      	nop
   1436c:	00029354 	.word	0x00029354

00014370 <exit_pos_ops>:
static void pm_log_debug_info(enum pm_state state) { }
void pm_dump_debug_info(void) { }
#endif

static inline void exit_pos_ops(struct pm_state_info info)
{
   14370:	b580      	push	{r7, lr}
   14372:	b086      	sub	sp, #24
   14374:	af00      	add	r7, sp, #0
   14376:	1d3b      	adds	r3, r7, #4
   14378:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	extern __weak void
		pm_power_state_exit_post_ops(struct pm_state_info info);

	if (pm_power_state_exit_post_ops != NULL) {
   1437c:	4b0a      	ldr	r3, [pc, #40]	; (143a8 <exit_pos_ops+0x38>)
   1437e:	2b00      	cmp	r3, #0
   14380:	d005      	beq.n	1438e <exit_pos_ops+0x1e>
		pm_power_state_exit_post_ops(info);
   14382:	1d3b      	adds	r3, r7, #4
   14384:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   14388:	f7fe f988 	bl	1269c <pm_power_state_exit_post_ops>
		 * The kernel expects that irqs are unlocked after this.
		 */

		irq_unlock(0);
	}
}
   1438c:	e007      	b.n	1439e <exit_pos_ops+0x2e>
   1438e:	2300      	movs	r3, #0
   14390:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   14392:	697b      	ldr	r3, [r7, #20]
   14394:	f383 8811 	msr	BASEPRI, r3
   14398:	f3bf 8f6f 	isb	sy
}
   1439c:	bf00      	nop
   1439e:	bf00      	nop
   143a0:	3718      	adds	r7, #24
   143a2:	46bd      	mov	sp, r7
   143a4:	bd80      	pop	{r7, pc}
   143a6:	bf00      	nop
   143a8:	0001269d 	.word	0x0001269d

000143ac <pm_state_set>:

static inline void pm_state_set(struct pm_state_info info)
{
   143ac:	b580      	push	{r7, lr}
   143ae:	b084      	sub	sp, #16
   143b0:	af00      	add	r7, sp, #0
   143b2:	1d3b      	adds	r3, r7, #4
   143b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	extern __weak void
		pm_power_state_set(struct pm_state_info info);

	if (pm_power_state_set != NULL) {
   143b8:	4b05      	ldr	r3, [pc, #20]	; (143d0 <pm_state_set+0x24>)
   143ba:	2b00      	cmp	r3, #0
   143bc:	d004      	beq.n	143c8 <pm_state_set+0x1c>
		pm_power_state_set(info);
   143be:	1d3b      	adds	r3, r7, #4
   143c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   143c4:	f7fe f916 	bl	125f4 <pm_power_state_set>
	}
}
   143c8:	bf00      	nop
   143ca:	3710      	adds	r7, #16
   143cc:	46bd      	mov	sp, r7
   143ce:	bd80      	pop	{r7, pc}
   143d0:	000125f5 	.word	0x000125f5

000143d4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   143d4:	b580      	push	{r7, lr}
   143d6:	b08c      	sub	sp, #48	; 0x30
   143d8:	af00      	add	r7, sp, #0
   143da:	4603      	mov	r3, r0
   143dc:	71fb      	strb	r3, [r7, #7]
   143de:	4b44      	ldr	r3, [pc, #272]	; (144f0 <pm_state_notify+0x11c>)
   143e0:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   143e2:	f04f 0320 	mov.w	r3, #32
   143e6:	f3ef 8211 	mrs	r2, BASEPRI
   143ea:	f383 8811 	msr	BASEPRI, r3
   143ee:	f3bf 8f6f 	isb	sy
   143f2:	623a      	str	r2, [r7, #32]
   143f4:	61fb      	str	r3, [r7, #28]
	return key;
   143f6:	6a3b      	ldr	r3, [r7, #32]
	k.key = arch_irq_lock();
   143f8:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   143fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
   143fc:	f008 fe24 	bl	1d048 <z_spin_lock_valid>
   14400:	4603      	mov	r3, r0
   14402:	f083 0301 	eor.w	r3, r3, #1
   14406:	b2db      	uxtb	r3, r3
   14408:	2b00      	cmp	r3, #0
   1440a:	d00d      	beq.n	14428 <pm_state_notify+0x54>
   1440c:	2381      	movs	r3, #129	; 0x81
   1440e:	4a39      	ldr	r2, [pc, #228]	; (144f4 <pm_state_notify+0x120>)
   14410:	4939      	ldr	r1, [pc, #228]	; (144f8 <pm_state_notify+0x124>)
   14412:	483a      	ldr	r0, [pc, #232]	; (144fc <pm_state_notify+0x128>)
   14414:	f00c fe28 	bl	21068 <printk>
   14418:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1441a:	4839      	ldr	r0, [pc, #228]	; (14500 <pm_state_notify+0x12c>)
   1441c:	f00c fe24 	bl	21068 <printk>
   14420:	2181      	movs	r1, #129	; 0x81
   14422:	4834      	ldr	r0, [pc, #208]	; (144f4 <pm_state_notify+0x120>)
   14424:	f00d fecd 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   14428:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1442a:	f008 fe45 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1442e:	68bb      	ldr	r3, [r7, #8]
   14430:	613b      	str	r3, [r7, #16]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   14432:	4834      	ldr	r0, [pc, #208]	; (14504 <pm_state_notify+0x130>)
   14434:	f00f f9e2 	bl	237fc <sys_slist_peek_head>
   14438:	4603      	mov	r3, r0
   1443a:	2b00      	cmp	r3, #0
   1443c:	d004      	beq.n	14448 <pm_state_notify+0x74>
   1443e:	4831      	ldr	r0, [pc, #196]	; (14504 <pm_state_notify+0x130>)
   14440:	f00f f9dc 	bl	237fc <sys_slist_peek_head>
   14444:	4603      	mov	r3, r0
   14446:	e000      	b.n	1444a <pm_state_notify+0x76>
   14448:	2300      	movs	r3, #0
   1444a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1444c:	e025      	b.n	1449a <pm_state_notify+0xc6>
		if (entering_state) {
   1444e:	79fb      	ldrb	r3, [r7, #7]
   14450:	2b00      	cmp	r3, #0
   14452:	d003      	beq.n	1445c <pm_state_notify+0x88>
			callback = notifier->state_entry;
   14454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14456:	685b      	ldr	r3, [r3, #4]
   14458:	62bb      	str	r3, [r7, #40]	; 0x28
   1445a:	e002      	b.n	14462 <pm_state_notify+0x8e>
		} else {
			callback = notifier->state_exit;
   1445c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1445e:	689b      	ldr	r3, [r3, #8]
   14460:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		if (callback) {
   14462:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14464:	2b00      	cmp	r3, #0
   14466:	d004      	beq.n	14472 <pm_state_notify+0x9e>
			callback(z_power_state.state);
   14468:	4b27      	ldr	r3, [pc, #156]	; (14508 <pm_state_notify+0x134>)
   1446a:	781a      	ldrb	r2, [r3, #0]
   1446c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1446e:	4610      	mov	r0, r2
   14470:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   14472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14474:	2b00      	cmp	r3, #0
   14476:	d00e      	beq.n	14496 <pm_state_notify+0xc2>
   14478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1447a:	4618      	mov	r0, r3
   1447c:	f00f f9d5 	bl	2382a <sys_slist_peek_next>
   14480:	4603      	mov	r3, r0
   14482:	2b00      	cmp	r3, #0
   14484:	d005      	beq.n	14492 <pm_state_notify+0xbe>
   14486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14488:	4618      	mov	r0, r3
   1448a:	f00f f9ce 	bl	2382a <sys_slist_peek_next>
   1448e:	4603      	mov	r3, r0
   14490:	e002      	b.n	14498 <pm_state_notify+0xc4>
   14492:	2300      	movs	r3, #0
   14494:	e000      	b.n	14498 <pm_state_notify+0xc4>
   14496:	2300      	movs	r3, #0
   14498:	62fb      	str	r3, [r7, #44]	; 0x2c
   1449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1449c:	2b00      	cmp	r3, #0
   1449e:	d1d6      	bne.n	1444e <pm_state_notify+0x7a>
   144a0:	4b13      	ldr	r3, [pc, #76]	; (144f0 <pm_state_notify+0x11c>)
   144a2:	61bb      	str	r3, [r7, #24]
   144a4:	693b      	ldr	r3, [r7, #16]
   144a6:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   144a8:	69b8      	ldr	r0, [r7, #24]
   144aa:	f008 fde9 	bl	1d080 <z_spin_unlock_valid>
   144ae:	4603      	mov	r3, r0
   144b0:	f083 0301 	eor.w	r3, r3, #1
   144b4:	b2db      	uxtb	r3, r3
   144b6:	2b00      	cmp	r3, #0
   144b8:	d00d      	beq.n	144d6 <pm_state_notify+0x102>
   144ba:	23ac      	movs	r3, #172	; 0xac
   144bc:	4a0d      	ldr	r2, [pc, #52]	; (144f4 <pm_state_notify+0x120>)
   144be:	4913      	ldr	r1, [pc, #76]	; (1450c <pm_state_notify+0x138>)
   144c0:	480e      	ldr	r0, [pc, #56]	; (144fc <pm_state_notify+0x128>)
   144c2:	f00c fdd1 	bl	21068 <printk>
   144c6:	69b9      	ldr	r1, [r7, #24]
   144c8:	4811      	ldr	r0, [pc, #68]	; (14510 <pm_state_notify+0x13c>)
   144ca:	f00c fdcd 	bl	21068 <printk>
   144ce:	21ac      	movs	r1, #172	; 0xac
   144d0:	4808      	ldr	r0, [pc, #32]	; (144f4 <pm_state_notify+0x120>)
   144d2:	f00d fe76 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   144d6:	68fb      	ldr	r3, [r7, #12]
   144d8:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   144da:	697b      	ldr	r3, [r7, #20]
   144dc:	f383 8811 	msr	BASEPRI, r3
   144e0:	f3bf 8f6f 	isb	sy
}
   144e4:	bf00      	nop
}
   144e6:	bf00      	nop
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   144e8:	bf00      	nop
   144ea:	3730      	adds	r7, #48	; 0x30
   144ec:	46bd      	mov	sp, r7
   144ee:	bd80      	pop	{r7, pc}
   144f0:	20014c34 	.word	0x20014c34
   144f4:	00029d5c 	.word	0x00029d5c
   144f8:	00029d84 	.word	0x00029d84
   144fc:	00029d9c 	.word	0x00029d9c
   14500:	00029dbc 	.word	0x00029dbc
   14504:	20014c2c 	.word	0x20014c2c
   14508:	20014c20 	.word	0x20014c20
   1450c:	00029dd4 	.word	0x00029dd4
   14510:	00029dec 	.word	0x00029dec

00014514 <pm_system_resume>:

void pm_system_resume(void)
{
   14514:	b580      	push	{r7, lr}
   14516:	af00      	add	r7, sp, #0
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   14518:	4b08      	ldr	r3, [pc, #32]	; (1453c <pm_system_resume+0x28>)
   1451a:	681b      	ldr	r3, [r3, #0]
   1451c:	2b00      	cmp	r3, #0
   1451e:	d10a      	bne.n	14536 <pm_system_resume+0x22>
		post_ops_done = 1;
   14520:	4b06      	ldr	r3, [pc, #24]	; (1453c <pm_system_resume+0x28>)
   14522:	2201      	movs	r2, #1
   14524:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
   14526:	4b06      	ldr	r3, [pc, #24]	; (14540 <pm_system_resume+0x2c>)
   14528:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1452c:	f7ff ff20 	bl	14370 <exit_pos_ops>
		pm_state_notify(false);
   14530:	2000      	movs	r0, #0
   14532:	f7ff ff4f 	bl	143d4 <pm_state_notify>
	}
}
   14536:	bf00      	nop
   14538:	bd80      	pop	{r7, pc}
   1453a:	bf00      	nop
   1453c:	20014518 	.word	0x20014518
   14540:	20014c20 	.word	0x20014c20

00014544 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   14544:	b590      	push	{r4, r7, lr}
   14546:	b08b      	sub	sp, #44	; 0x2c
   14548:	af00      	add	r7, sp, #0
   1454a:	6178      	str	r0, [r7, #20]
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   1454c:	4c47      	ldr	r4, [pc, #284]	; (1466c <pm_system_suspend+0x128>)
   1454e:	463b      	mov	r3, r7
   14550:	6979      	ldr	r1, [r7, #20]
   14552:	4618      	mov	r0, r3
   14554:	f000 fa02 	bl	1495c <pm_policy_next_state>
   14558:	463b      	mov	r3, r7
   1455a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1455e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   14562:	4b42      	ldr	r3, [pc, #264]	; (1466c <pm_system_suspend+0x128>)
   14564:	781b      	ldrb	r3, [r3, #0]
   14566:	2b00      	cmp	r3, #0
   14568:	d13c      	bne.n	145e4 <pm_system_suspend+0xa0>
		LOG_DBG("No PM operations done.");
   1456a:	2303      	movs	r3, #3
   1456c:	2b03      	cmp	r3, #3
   1456e:	d935      	bls.n	145dc <pm_system_suspend+0x98>
   14570:	f00f f96c 	bl	2384c <k_is_user_context>
   14574:	4603      	mov	r3, r0
   14576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   1457a:	2300      	movs	r3, #0
   1457c:	623b      	str	r3, [r7, #32]
   1457e:	2303      	movs	r3, #3
   14580:	2b00      	cmp	r3, #0
   14582:	d007      	beq.n	14594 <pm_system_suspend+0x50>
   14584:	4b3a      	ldr	r3, [pc, #232]	; (14670 <pm_system_suspend+0x12c>)
   14586:	681b      	ldr	r3, [r3, #0]
   14588:	4618      	mov	r0, r3
   1458a:	f7ff fee1 	bl	14350 <log_const_source_id>
   1458e:	4603      	mov	r3, r0
   14590:	b29b      	uxth	r3, r3
   14592:	e000      	b.n	14596 <pm_system_suspend+0x52>
   14594:	2300      	movs	r3, #0
   14596:	84bb      	strh	r3, [r7, #36]	; 0x24
   14598:	7f3b      	ldrb	r3, [r7, #28]
   1459a:	2204      	movs	r2, #4
   1459c:	f362 0302 	bfi	r3, r2, #0, #3
   145a0:	773b      	strb	r3, [r7, #28]
   145a2:	7f3b      	ldrb	r3, [r7, #28]
   145a4:	f36f 03c5 	bfc	r3, #3, #3
   145a8:	773b      	strb	r3, [r7, #28]
   145aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   145ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
   145b0:	b29a      	uxth	r2, r3
   145b2:	8bbb      	ldrh	r3, [r7, #28]
   145b4:	f362 138f 	bfi	r3, r2, #6, #10
   145b8:	83bb      	strh	r3, [r7, #28]
   145ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   145be:	2b00      	cmp	r3, #0
   145c0:	d005      	beq.n	145ce <pm_system_suspend+0x8a>
   145c2:	4a2c      	ldr	r2, [pc, #176]	; (14674 <pm_system_suspend+0x130>)
   145c4:	492c      	ldr	r1, [pc, #176]	; (14678 <pm_system_suspend+0x134>)
   145c6:	8bb8      	ldrh	r0, [r7, #28]
   145c8:	f7fe fdc2 	bl	13150 <log_from_user>
   145cc:	e007      	b.n	145de <pm_system_suspend+0x9a>
   145ce:	4b29      	ldr	r3, [pc, #164]	; (14674 <pm_system_suspend+0x130>)
   145d0:	8bba      	ldrh	r2, [r7, #28]
   145d2:	4619      	mov	r1, r3
   145d4:	4828      	ldr	r0, [pc, #160]	; (14678 <pm_system_suspend+0x134>)
   145d6:	f00e faaa 	bl	22b2e <log_1>
   145da:	e000      	b.n	145de <pm_system_suspend+0x9a>
   145dc:	bf00      	nop
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
   145de:	4b23      	ldr	r3, [pc, #140]	; (1466c <pm_system_suspend+0x128>)
   145e0:	781b      	ldrb	r3, [r3, #0]
   145e2:	e03e      	b.n	14662 <pm_system_suspend+0x11e>
	}
	post_ops_done = 0;
   145e4:	4b25      	ldr	r3, [pc, #148]	; (1467c <pm_system_suspend+0x138>)
   145e6:	2200      	movs	r2, #0
   145e8:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   145ea:	697b      	ldr	r3, [r7, #20]
   145ec:	f1b3 3fff 	cmp.w	r3, #4294967295
   145f0:	d01e      	beq.n	14630 <pm_system_suspend+0xec>
		/*
		 * Just a sanity check in case the policy manager does not
		 * handle this error condition properly.
		 */
		__ASSERT(z_power_state.min_residency_us >=
   145f2:	4b1e      	ldr	r3, [pc, #120]	; (1466c <pm_system_suspend+0x128>)
   145f4:	685a      	ldr	r2, [r3, #4]
   145f6:	4b1d      	ldr	r3, [pc, #116]	; (1466c <pm_system_suspend+0x128>)
   145f8:	689b      	ldr	r3, [r3, #8]
   145fa:	429a      	cmp	r2, r3
   145fc:	d20c      	bcs.n	14618 <pm_system_suspend+0xd4>
   145fe:	23cb      	movs	r3, #203	; 0xcb
   14600:	4a1f      	ldr	r2, [pc, #124]	; (14680 <pm_system_suspend+0x13c>)
   14602:	4920      	ldr	r1, [pc, #128]	; (14684 <pm_system_suspend+0x140>)
   14604:	4820      	ldr	r0, [pc, #128]	; (14688 <pm_system_suspend+0x144>)
   14606:	f00c fd2f 	bl	21068 <printk>
   1460a:	4820      	ldr	r0, [pc, #128]	; (1468c <pm_system_suspend+0x148>)
   1460c:	f00c fd2c 	bl	21068 <printk>
   14610:	21cb      	movs	r1, #203	; 0xcb
   14612:	481b      	ldr	r0, [pc, #108]	; (14680 <pm_system_suspend+0x13c>)
   14614:	f00d fdd5 	bl	221c2 <assert_post_action>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   14618:	697c      	ldr	r4, [r7, #20]
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
   1461a:	4b14      	ldr	r3, [pc, #80]	; (1466c <pm_system_suspend+0x128>)
   1461c:	689b      	ldr	r3, [r3, #8]
   1461e:	4618      	mov	r0, r3
   14620:	f7ff fd70 	bl	14104 <k_us_to_ticks_ceil32>
   14624:	4603      	mov	r3, r0
		z_set_timeout_expiry(ticks -
   14626:	1ae3      	subs	r3, r4, r3
   14628:	2101      	movs	r1, #1
   1462a:	4618      	mov	r0, r3
   1462c:	f00b ffc4 	bl	205b8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   14630:	f00a ffc6 	bl	1f5c0 <k_sched_lock>
	pm_debug_start_timer();
   14634:	f00f f911 	bl	2385a <pm_debug_start_timer>
	/* Enter power state */
	pm_state_notify(true);
   14638:	2001      	movs	r0, #1
   1463a:	f7ff fecb 	bl	143d4 <pm_state_notify>
	pm_state_set(z_power_state);
   1463e:	4b0b      	ldr	r3, [pc, #44]	; (1466c <pm_system_suspend+0x128>)
   14640:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   14644:	f7ff feb2 	bl	143ac <pm_state_set>
	pm_debug_stop_timer();
   14648:	f00f f90d 	bl	23866 <pm_debug_stop_timer>
	if (should_resume_devices) {
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
   1464c:	4b07      	ldr	r3, [pc, #28]	; (1466c <pm_system_suspend+0x128>)
   1464e:	781b      	ldrb	r3, [r3, #0]
   14650:	4618      	mov	r0, r3
   14652:	f00f f90e 	bl	23872 <pm_log_debug_info>
	pm_system_resume();
   14656:	f7ff ff5d 	bl	14514 <pm_system_resume>
	k_sched_unlock();
   1465a:	f00b f81f 	bl	1f69c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   1465e:	4b03      	ldr	r3, [pc, #12]	; (1466c <pm_system_suspend+0x128>)
   14660:	781b      	ldrb	r3, [r3, #0]
}
   14662:	4618      	mov	r0, r3
   14664:	372c      	adds	r7, #44	; 0x2c
   14666:	46bd      	mov	sp, r7
   14668:	bd90      	pop	{r4, r7, pc}
   1466a:	bf00      	nop
   1466c:	20014c20 	.word	0x20014c20
   14670:	20014514 	.word	0x20014514
   14674:	0002cb08 	.word	0x0002cb08
   14678:	00029e80 	.word	0x00029e80
   1467c:	20014518 	.word	0x20014518
   14680:	00029e04 	.word	0x00029e04
   14684:	00029e9c 	.word	0x00029e9c
   14688:	00029d9c 	.word	0x00029d9c
   1468c:	00029edc 	.word	0x00029edc

00014690 <pm_constraint_get>:
	/* Make compiler happy when assertions are disabled. */
	(void)(v);
}

bool pm_constraint_get(enum pm_state state)
{
   14690:	b580      	push	{r7, lr}
   14692:	b082      	sub	sp, #8
   14694:	af00      	add	r7, sp, #0
   14696:	4603      	mov	r3, r0
   14698:	71fb      	strb	r3, [r7, #7]
	__ASSERT(state < PM_STATES_LEN, "Invalid power state!");
   1469a:	79fb      	ldrb	r3, [r7, #7]
   1469c:	2b06      	cmp	r3, #6
   1469e:	d90c      	bls.n	146ba <pm_constraint_get+0x2a>
   146a0:	232f      	movs	r3, #47	; 0x2f
   146a2:	4a0e      	ldr	r2, [pc, #56]	; (146dc <pm_constraint_get+0x4c>)
   146a4:	490e      	ldr	r1, [pc, #56]	; (146e0 <pm_constraint_get+0x50>)
   146a6:	480f      	ldr	r0, [pc, #60]	; (146e4 <pm_constraint_get+0x54>)
   146a8:	f00c fcde 	bl	21068 <printk>
   146ac:	480e      	ldr	r0, [pc, #56]	; (146e8 <pm_constraint_get+0x58>)
   146ae:	f00c fcdb 	bl	21068 <printk>
   146b2:	212f      	movs	r1, #47	; 0x2f
   146b4:	4809      	ldr	r0, [pc, #36]	; (146dc <pm_constraint_get+0x4c>)
   146b6:	f00d fd84 	bl	221c2 <assert_post_action>

	return (atomic_get(&power_state_disable_count[state]) == 0);
   146ba:	79fb      	ldrb	r3, [r7, #7]
   146bc:	009b      	lsls	r3, r3, #2
   146be:	4a0b      	ldr	r2, [pc, #44]	; (146ec <pm_constraint_get+0x5c>)
   146c0:	4413      	add	r3, r2
   146c2:	4618      	mov	r0, r3
   146c4:	f00f f8df 	bl	23886 <atomic_get>
   146c8:	4603      	mov	r3, r0
   146ca:	2b00      	cmp	r3, #0
   146cc:	bf0c      	ite	eq
   146ce:	2301      	moveq	r3, #1
   146d0:	2300      	movne	r3, #0
   146d2:	b2db      	uxtb	r3, r3
}
   146d4:	4618      	mov	r0, r3
   146d6:	3708      	adds	r7, #8
   146d8:	46bd      	mov	sp, r7
   146da:	bd80      	pop	{r7, pc}
   146dc:	00029f04 	.word	0x00029f04
   146e0:	00029f2c 	.word	0x00029f2c
   146e4:	00029f60 	.word	0x00029f60
   146e8:	00029f80 	.word	0x00029f80
   146ec:	20014c38 	.word	0x20014c38

000146f0 <k_us_to_ticks_ceil32>:
{
   146f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   146f4:	b08c      	sub	sp, #48	; 0x30
   146f6:	af00      	add	r7, sp, #0
   146f8:	6078      	str	r0, [r7, #4]
	return z_tmcvt(t, Z_HZ_us, Z_HZ_ticks, true, true, true, false);
   146fa:	687b      	ldr	r3, [r7, #4]
   146fc:	461a      	mov	r2, r3
   146fe:	f04f 0300 	mov.w	r3, #0
   14702:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   14706:	4b8c      	ldr	r3, [pc, #560]	; (14938 <k_us_to_ticks_ceil32+0x248>)
   14708:	627b      	str	r3, [r7, #36]	; 0x24
   1470a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1470e:	623b      	str	r3, [r7, #32]
   14710:	2301      	movs	r3, #1
   14712:	77fb      	strb	r3, [r7, #31]
   14714:	2301      	movs	r3, #1
   14716:	77bb      	strb	r3, [r7, #30]
   14718:	2301      	movs	r3, #1
   1471a:	777b      	strb	r3, [r7, #29]
   1471c:	2300      	movs	r3, #0
   1471e:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   14720:	7ffb      	ldrb	r3, [r7, #31]
   14722:	2b00      	cmp	r3, #0
   14724:	d00f      	beq.n	14746 <k_us_to_ticks_ceil32+0x56>
	bool mul_ratio = const_hz &&
   14726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   14728:	6a3b      	ldr	r3, [r7, #32]
   1472a:	429a      	cmp	r2, r3
   1472c:	d20b      	bcs.n	14746 <k_us_to_ticks_ceil32+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   1472e:	6a3b      	ldr	r3, [r7, #32]
   14730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   14732:	fbb3 f2f2 	udiv	r2, r3, r2
   14736:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14738:	fb01 f202 	mul.w	r2, r1, r2
   1473c:	1a9b      	subs	r3, r3, r2
   1473e:	2b00      	cmp	r3, #0
   14740:	d101      	bne.n	14746 <k_us_to_ticks_ceil32+0x56>
   14742:	2301      	movs	r3, #1
   14744:	e000      	b.n	14748 <k_us_to_ticks_ceil32+0x58>
   14746:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   14748:	76fb      	strb	r3, [r7, #27]
   1474a:	7efb      	ldrb	r3, [r7, #27]
   1474c:	f003 0301 	and.w	r3, r3, #1
   14750:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   14752:	7ffb      	ldrb	r3, [r7, #31]
   14754:	2b00      	cmp	r3, #0
   14756:	d00f      	beq.n	14778 <k_us_to_ticks_ceil32+0x88>
	bool div_ratio = const_hz &&
   14758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1475a:	6a3b      	ldr	r3, [r7, #32]
   1475c:	429a      	cmp	r2, r3
   1475e:	d90b      	bls.n	14778 <k_us_to_ticks_ceil32+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   14760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14762:	6a3a      	ldr	r2, [r7, #32]
   14764:	fbb3 f2f2 	udiv	r2, r3, r2
   14768:	6a39      	ldr	r1, [r7, #32]
   1476a:	fb01 f202 	mul.w	r2, r1, r2
   1476e:	1a9b      	subs	r3, r3, r2
   14770:	2b00      	cmp	r3, #0
   14772:	d101      	bne.n	14778 <k_us_to_ticks_ceil32+0x88>
   14774:	2301      	movs	r3, #1
   14776:	e000      	b.n	1477a <k_us_to_ticks_ceil32+0x8a>
   14778:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   1477a:	76bb      	strb	r3, [r7, #26]
   1477c:	7ebb      	ldrb	r3, [r7, #26]
   1477e:	f003 0301 	and.w	r3, r3, #1
   14782:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   14784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   14786:	6a3b      	ldr	r3, [r7, #32]
   14788:	429a      	cmp	r2, r3
   1478a:	d10a      	bne.n	147a2 <k_us_to_ticks_ceil32+0xb2>
		return result32 ? ((uint32_t)t) : t;
   1478c:	7fbb      	ldrb	r3, [r7, #30]
   1478e:	2b00      	cmp	r3, #0
   14790:	d004      	beq.n	1479c <k_us_to_ticks_ceil32+0xac>
   14792:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14794:	461a      	mov	r2, r3
   14796:	f04f 0300 	mov.w	r3, #0
   1479a:	e0c7      	b.n	1492c <k_us_to_ticks_ceil32+0x23c>
   1479c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   147a0:	e0c4      	b.n	1492c <k_us_to_ticks_ceil32+0x23c>
	uint64_t off = 0;
   147a2:	f04f 0200 	mov.w	r2, #0
   147a6:	f04f 0300 	mov.w	r3, #0
   147aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   147ae:	7efb      	ldrb	r3, [r7, #27]
   147b0:	f083 0301 	eor.w	r3, r3, #1
   147b4:	b2db      	uxtb	r3, r3
   147b6:	2b00      	cmp	r3, #0
   147b8:	d01d      	beq.n	147f6 <k_us_to_ticks_ceil32+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   147ba:	7ebb      	ldrb	r3, [r7, #26]
   147bc:	2b00      	cmp	r3, #0
   147be:	d004      	beq.n	147ca <k_us_to_ticks_ceil32+0xda>
   147c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   147c2:	6a3b      	ldr	r3, [r7, #32]
   147c4:	fbb2 f3f3 	udiv	r3, r2, r3
   147c8:	e000      	b.n	147cc <k_us_to_ticks_ceil32+0xdc>
   147ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   147cc:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   147ce:	7f7b      	ldrb	r3, [r7, #29]
   147d0:	2b00      	cmp	r3, #0
   147d2:	d006      	beq.n	147e2 <k_us_to_ticks_ceil32+0xf2>
			off = rdivisor - 1U;
   147d4:	68fb      	ldr	r3, [r7, #12]
   147d6:	3b01      	subs	r3, #1
   147d8:	461a      	mov	r2, r3
   147da:	f04f 0300 	mov.w	r3, #0
   147de:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   147e2:	7f3b      	ldrb	r3, [r7, #28]
   147e4:	2b00      	cmp	r3, #0
   147e6:	d006      	beq.n	147f6 <k_us_to_ticks_ceil32+0x106>
			off = rdivisor / 2U;
   147e8:	68fb      	ldr	r3, [r7, #12]
   147ea:	085b      	lsrs	r3, r3, #1
   147ec:	461a      	mov	r2, r3
   147ee:	f04f 0300 	mov.w	r3, #0
   147f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   147f6:	7ebb      	ldrb	r3, [r7, #26]
   147f8:	2b00      	cmp	r3, #0
   147fa:	d02a      	beq.n	14852 <k_us_to_ticks_ceil32+0x162>
		t += off;
   147fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   14800:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   14804:	1884      	adds	r4, r0, r2
   14806:	eb41 0503 	adc.w	r5, r1, r3
   1480a:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   1480e:	7fbb      	ldrb	r3, [r7, #30]
   14810:	2b00      	cmp	r3, #0
   14812:	d010      	beq.n	14836 <k_us_to_ticks_ceil32+0x146>
   14814:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   14818:	2b01      	cmp	r3, #1
   1481a:	bf08      	it	eq
   1481c:	2a00      	cmpeq	r2, #0
   1481e:	d20a      	bcs.n	14836 <k_us_to_ticks_ceil32+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
   14820:	6aba      	ldr	r2, [r7, #40]	; 0x28
   14822:	6a79      	ldr	r1, [r7, #36]	; 0x24
   14824:	6a3b      	ldr	r3, [r7, #32]
   14826:	fbb1 f3f3 	udiv	r3, r1, r3
   1482a:	fbb2 f3f3 	udiv	r3, r2, r3
   1482e:	461a      	mov	r2, r3
   14830:	f04f 0300 	mov.w	r3, #0
   14834:	e07a      	b.n	1492c <k_us_to_ticks_ceil32+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
   14836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   14838:	6a3b      	ldr	r3, [r7, #32]
   1483a:	fbb2 f3f3 	udiv	r3, r2, r3
   1483e:	461a      	mov	r2, r3
   14840:	f04f 0300 	mov.w	r3, #0
   14844:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   14848:	f7fb fcf8 	bl	1023c <__aeabi_uldivmod>
   1484c:	4602      	mov	r2, r0
   1484e:	460b      	mov	r3, r1
   14850:	e06c      	b.n	1492c <k_us_to_ticks_ceil32+0x23c>
	} else if (mul_ratio) {
   14852:	7efb      	ldrb	r3, [r7, #27]
   14854:	2b00      	cmp	r3, #0
   14856:	d021      	beq.n	1489c <k_us_to_ticks_ceil32+0x1ac>
		if (result32) {
   14858:	7fbb      	ldrb	r3, [r7, #30]
   1485a:	2b00      	cmp	r3, #0
   1485c:	d00a      	beq.n	14874 <k_us_to_ticks_ceil32+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
   1485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   14860:	6a39      	ldr	r1, [r7, #32]
   14862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   14864:	fbb1 f2f2 	udiv	r2, r1, r2
   14868:	fb02 f303 	mul.w	r3, r2, r3
   1486c:	461a      	mov	r2, r3
   1486e:	f04f 0300 	mov.w	r3, #0
   14872:	e05b      	b.n	1492c <k_us_to_ticks_ceil32+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
   14874:	6a3a      	ldr	r2, [r7, #32]
   14876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14878:	fbb2 f3f3 	udiv	r3, r2, r3
   1487c:	461a      	mov	r2, r3
   1487e:	f04f 0300 	mov.w	r3, #0
   14882:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   14884:	fb03 f001 	mul.w	r0, r3, r1
   14888:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1488a:	fb02 f101 	mul.w	r1, r2, r1
   1488e:	4401      	add	r1, r0
   14890:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   14892:	fba0 2302 	umull	r2, r3, r0, r2
   14896:	4419      	add	r1, r3
   14898:	460b      	mov	r3, r1
   1489a:	e047      	b.n	1492c <k_us_to_ticks_ceil32+0x23c>
		if (result32) {
   1489c:	7fbb      	ldrb	r3, [r7, #30]
   1489e:	2b00      	cmp	r3, #0
   148a0:	d024      	beq.n	148ec <k_us_to_ticks_ceil32+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   148a2:	6a3b      	ldr	r3, [r7, #32]
   148a4:	461a      	mov	r2, r3
   148a6:	f04f 0300 	mov.w	r3, #0
   148aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   148ac:	fb03 f001 	mul.w	r0, r3, r1
   148b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   148b2:	fb02 f101 	mul.w	r1, r2, r1
   148b6:	4401      	add	r1, r0
   148b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   148ba:	fba0 2302 	umull	r2, r3, r0, r2
   148be:	4419      	add	r1, r3
   148c0:	460b      	mov	r3, r1
   148c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   148c6:	eb12 0a00 	adds.w	sl, r2, r0
   148ca:	eb43 0b01 	adc.w	fp, r3, r1
   148ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   148d0:	461a      	mov	r2, r3
   148d2:	f04f 0300 	mov.w	r3, #0
   148d6:	4650      	mov	r0, sl
   148d8:	4659      	mov	r1, fp
   148da:	f7fb fcaf 	bl	1023c <__aeabi_uldivmod>
   148de:	4602      	mov	r2, r0
   148e0:	460b      	mov	r3, r1
   148e2:	4613      	mov	r3, r2
   148e4:	461a      	mov	r2, r3
   148e6:	f04f 0300 	mov.w	r3, #0
   148ea:	e01f      	b.n	1492c <k_us_to_ticks_ceil32+0x23c>
			return (t * to_hz + off) / from_hz;
   148ec:	6a3b      	ldr	r3, [r7, #32]
   148ee:	461a      	mov	r2, r3
   148f0:	f04f 0300 	mov.w	r3, #0
   148f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   148f6:	fb03 f001 	mul.w	r0, r3, r1
   148fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   148fc:	fb02 f101 	mul.w	r1, r2, r1
   14900:	4401      	add	r1, r0
   14902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   14904:	fba0 2302 	umull	r2, r3, r0, r2
   14908:	4419      	add	r1, r3
   1490a:	460b      	mov	r3, r1
   1490c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   14910:	eb12 0800 	adds.w	r8, r2, r0
   14914:	eb43 0901 	adc.w	r9, r3, r1
   14918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1491a:	461a      	mov	r2, r3
   1491c:	f04f 0300 	mov.w	r3, #0
   14920:	4640      	mov	r0, r8
   14922:	4649      	mov	r1, r9
   14924:	f7fb fc8a 	bl	1023c <__aeabi_uldivmod>
   14928:	4602      	mov	r2, r0
   1492a:	460b      	mov	r3, r1
	return z_tmcvt(t, Z_HZ_us, Z_HZ_ticks, true, true, true, false);
   1492c:	4613      	mov	r3, r2
}
   1492e:	4618      	mov	r0, r3
   14930:	3730      	adds	r7, #48	; 0x30
   14932:	46bd      	mov	sp, r7
   14934:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
   14938:	000f4240 	.word	0x000f4240

0001493c <log_const_source_id>:
{
   1493c:	b480      	push	{r7}
   1493e:	b083      	sub	sp, #12
   14940:	af00      	add	r7, sp, #0
   14942:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   14944:	687b      	ldr	r3, [r7, #4]
   14946:	4a04      	ldr	r2, [pc, #16]	; (14958 <log_const_source_id+0x1c>)
   14948:	1a9b      	subs	r3, r3, r2
   1494a:	08db      	lsrs	r3, r3, #3
}
   1494c:	4618      	mov	r0, r3
   1494e:	370c      	adds	r7, #12
   14950:	46bd      	mov	sp, r7
   14952:	bc80      	pop	{r7}
   14954:	4770      	bx	lr
   14956:	bf00      	nop
   14958:	00029354 	.word	0x00029354

0001495c <pm_policy_next_state>:

static const struct pm_state_info pm_min_residency[] =
	PM_STATE_INFO_DT_ITEMS_LIST(DT_NODELABEL(cpu0));

struct pm_state_info pm_policy_next_state(int32_t ticks)
{
   1495c:	b580      	push	{r7, lr}
   1495e:	b094      	sub	sp, #80	; 0x50
   14960:	af02      	add	r7, sp, #8
   14962:	6078      	str	r0, [r7, #4]
   14964:	6039      	str	r1, [r7, #0]
	int i;

	for (i = ARRAY_SIZE(pm_min_residency) - 1; i >= 0; i--) {
   14966:	f04f 33ff 	mov.w	r3, #4294967295
   1496a:	647b      	str	r3, [r7, #68]	; 0x44
   1496c:	e0c3      	b.n	14af6 <pm_policy_next_state+0x19a>
		uint32_t min_residency, exit_latency;

		if (!pm_constraint_get(pm_min_residency[i].state)) {
   1496e:	4987      	ldr	r1, [pc, #540]	; (14b8c <pm_policy_next_state+0x230>)
   14970:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   14972:	4613      	mov	r3, r2
   14974:	005b      	lsls	r3, r3, #1
   14976:	4413      	add	r3, r2
   14978:	009b      	lsls	r3, r3, #2
   1497a:	440b      	add	r3, r1
   1497c:	781b      	ldrb	r3, [r3, #0]
   1497e:	4618      	mov	r0, r3
   14980:	f7ff fe86 	bl	14690 <pm_constraint_get>
   14984:	4603      	mov	r3, r0
   14986:	f083 0301 	eor.w	r3, r3, #1
   1498a:	b2db      	uxtb	r3, r3
   1498c:	2b00      	cmp	r3, #0
   1498e:	f040 80ae 	bne.w	14aee <pm_policy_next_state+0x192>
			continue;
		}

		min_residency = k_us_to_ticks_ceil32(
   14992:	497e      	ldr	r1, [pc, #504]	; (14b8c <pm_policy_next_state+0x230>)
   14994:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   14996:	4613      	mov	r3, r2
   14998:	005b      	lsls	r3, r3, #1
   1499a:	4413      	add	r3, r2
   1499c:	009b      	lsls	r3, r3, #2
   1499e:	440b      	add	r3, r1
   149a0:	3304      	adds	r3, #4
   149a2:	681b      	ldr	r3, [r3, #0]
   149a4:	4618      	mov	r0, r3
   149a6:	f7ff fea3 	bl	146f0 <k_us_to_ticks_ceil32>
   149aa:	63f8      	str	r0, [r7, #60]	; 0x3c
			    pm_min_residency[i].min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(
   149ac:	4977      	ldr	r1, [pc, #476]	; (14b8c <pm_policy_next_state+0x230>)
   149ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   149b0:	4613      	mov	r3, r2
   149b2:	005b      	lsls	r3, r3, #1
   149b4:	4413      	add	r3, r2
   149b6:	009b      	lsls	r3, r3, #2
   149b8:	440b      	add	r3, r1
   149ba:	3308      	adds	r3, #8
   149bc:	681b      	ldr	r3, [r3, #0]
   149be:	4618      	mov	r0, r3
   149c0:	f7ff fe96 	bl	146f0 <k_us_to_ticks_ceil32>
   149c4:	63b8      	str	r0, [r7, #56]	; 0x38
			    pm_min_residency[i].exit_latency_us);
		__ASSERT(min_residency > exit_latency,
   149c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   149c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   149ca:	429a      	cmp	r2, r3
   149cc:	d80c      	bhi.n	149e8 <pm_policy_next_state+0x8c>
   149ce:	2322      	movs	r3, #34	; 0x22
   149d0:	4a6f      	ldr	r2, [pc, #444]	; (14b90 <pm_policy_next_state+0x234>)
   149d2:	4970      	ldr	r1, [pc, #448]	; (14b94 <pm_policy_next_state+0x238>)
   149d4:	4870      	ldr	r0, [pc, #448]	; (14b98 <pm_policy_next_state+0x23c>)
   149d6:	f00c fb47 	bl	21068 <printk>
   149da:	4870      	ldr	r0, [pc, #448]	; (14b9c <pm_policy_next_state+0x240>)
   149dc:	f00c fb44 	bl	21068 <printk>
   149e0:	2122      	movs	r1, #34	; 0x22
   149e2:	486b      	ldr	r0, [pc, #428]	; (14b90 <pm_policy_next_state+0x234>)
   149e4:	f00d fbed 	bl	221c2 <assert_post_action>
				"min_residency_us < exit_latency_us");

		if ((ticks == K_TICKS_FOREVER) ||
   149e8:	683b      	ldr	r3, [r7, #0]
   149ea:	f1b3 3fff 	cmp.w	r3, #4294967295
   149ee:	d005      	beq.n	149fc <pm_policy_next_state+0xa0>
		    (ticks >= (min_residency + exit_latency))) {
   149f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   149f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   149f4:	441a      	add	r2, r3
   149f6:	683b      	ldr	r3, [r7, #0]
		if ((ticks == K_TICKS_FOREVER) ||
   149f8:	429a      	cmp	r2, r3
   149fa:	d879      	bhi.n	14af0 <pm_policy_next_state+0x194>
			LOG_DBG("Selected power state %d "
   149fc:	2303      	movs	r3, #3
   149fe:	2b03      	cmp	r3, #3
   14a00:	d967      	bls.n	14ad2 <pm_policy_next_state+0x176>
   14a02:	f00e ff4c 	bl	2389e <k_is_user_context>
   14a06:	4603      	mov	r3, r0
   14a08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   14a0c:	2300      	movs	r3, #0
   14a0e:	627b      	str	r3, [r7, #36]	; 0x24
   14a10:	2303      	movs	r3, #3
   14a12:	2b00      	cmp	r3, #0
   14a14:	d007      	beq.n	14a26 <pm_policy_next_state+0xca>
   14a16:	4b62      	ldr	r3, [pc, #392]	; (14ba0 <pm_policy_next_state+0x244>)
   14a18:	681b      	ldr	r3, [r3, #0]
   14a1a:	4618      	mov	r0, r3
   14a1c:	f7ff ff8e 	bl	1493c <log_const_source_id>
   14a20:	4603      	mov	r3, r0
   14a22:	b29b      	uxth	r3, r3
   14a24:	e000      	b.n	14a28 <pm_policy_next_state+0xcc>
   14a26:	2300      	movs	r3, #0
   14a28:	86bb      	strh	r3, [r7, #52]	; 0x34
   14a2a:	f897 3020 	ldrb.w	r3, [r7, #32]
   14a2e:	2204      	movs	r2, #4
   14a30:	f362 0302 	bfi	r3, r2, #0, #3
   14a34:	f887 3020 	strb.w	r3, [r7, #32]
   14a38:	f897 3020 	ldrb.w	r3, [r7, #32]
   14a3c:	f36f 03c5 	bfc	r3, #3, #3
   14a40:	f887 3020 	strb.w	r3, [r7, #32]
   14a44:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   14a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
   14a4a:	b29a      	uxth	r2, r3
   14a4c:	8c3b      	ldrh	r3, [r7, #32]
   14a4e:	f362 138f 	bfi	r3, r2, #6, #10
   14a52:	843b      	strh	r3, [r7, #32]
   14a54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   14a58:	2b00      	cmp	r3, #0
   14a5a:	d01b      	beq.n	14a94 <pm_policy_next_state+0x138>
   14a5c:	494b      	ldr	r1, [pc, #300]	; (14b8c <pm_policy_next_state+0x230>)
   14a5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   14a60:	4613      	mov	r3, r2
   14a62:	005b      	lsls	r3, r3, #1
   14a64:	4413      	add	r3, r2
   14a66:	009b      	lsls	r3, r3, #2
   14a68:	440b      	add	r3, r1
   14a6a:	781b      	ldrb	r3, [r3, #0]
   14a6c:	4618      	mov	r0, r3
   14a6e:	4947      	ldr	r1, [pc, #284]	; (14b8c <pm_policy_next_state+0x230>)
   14a70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   14a72:	4613      	mov	r3, r2
   14a74:	005b      	lsls	r3, r3, #1
   14a76:	4413      	add	r3, r2
   14a78:	009b      	lsls	r3, r3, #2
   14a7a:	440b      	add	r3, r1
   14a7c:	3304      	adds	r3, #4
   14a7e:	681b      	ldr	r3, [r3, #0]
   14a80:	9301      	str	r3, [sp, #4]
   14a82:	683b      	ldr	r3, [r7, #0]
   14a84:	9300      	str	r3, [sp, #0]
   14a86:	4603      	mov	r3, r0
   14a88:	4a46      	ldr	r2, [pc, #280]	; (14ba4 <pm_policy_next_state+0x248>)
   14a8a:	4947      	ldr	r1, [pc, #284]	; (14ba8 <pm_policy_next_state+0x24c>)
   14a8c:	8c38      	ldrh	r0, [r7, #32]
   14a8e:	f7fe fb5f 	bl	13150 <log_from_user>
   14a92:	e01f      	b.n	14ad4 <pm_policy_next_state+0x178>
   14a94:	4b43      	ldr	r3, [pc, #268]	; (14ba4 <pm_policy_next_state+0x248>)
   14a96:	613b      	str	r3, [r7, #16]
   14a98:	493c      	ldr	r1, [pc, #240]	; (14b8c <pm_policy_next_state+0x230>)
   14a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   14a9c:	4613      	mov	r3, r2
   14a9e:	005b      	lsls	r3, r3, #1
   14aa0:	4413      	add	r3, r2
   14aa2:	009b      	lsls	r3, r3, #2
   14aa4:	440b      	add	r3, r1
   14aa6:	781b      	ldrb	r3, [r3, #0]
   14aa8:	617b      	str	r3, [r7, #20]
   14aaa:	683b      	ldr	r3, [r7, #0]
   14aac:	61bb      	str	r3, [r7, #24]
   14aae:	4937      	ldr	r1, [pc, #220]	; (14b8c <pm_policy_next_state+0x230>)
   14ab0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   14ab2:	4613      	mov	r3, r2
   14ab4:	005b      	lsls	r3, r3, #1
   14ab6:	4413      	add	r3, r2
   14ab8:	009b      	lsls	r3, r3, #2
   14aba:	440b      	add	r3, r1
   14abc:	3304      	adds	r3, #4
   14abe:	681b      	ldr	r3, [r3, #0]
   14ac0:	61fb      	str	r3, [r7, #28]
   14ac2:	f107 0110 	add.w	r1, r7, #16
   14ac6:	8c3b      	ldrh	r3, [r7, #32]
   14ac8:	2204      	movs	r2, #4
   14aca:	4837      	ldr	r0, [pc, #220]	; (14ba8 <pm_policy_next_state+0x24c>)
   14acc:	f00e f879 	bl	22bc2 <log_n>
   14ad0:	e000      	b.n	14ad4 <pm_policy_next_state+0x178>
   14ad2:	bf00      	nop
				"(ticks: %d, min_residency: %u)",
				pm_min_residency[i].state, ticks,
				pm_min_residency[i].min_residency_us);
			return pm_min_residency[i];
   14ad4:	6878      	ldr	r0, [r7, #4]
   14ad6:	492d      	ldr	r1, [pc, #180]	; (14b8c <pm_policy_next_state+0x230>)
   14ad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   14ada:	4613      	mov	r3, r2
   14adc:	005b      	lsls	r3, r3, #1
   14ade:	4413      	add	r3, r2
   14ae0:	009b      	lsls	r3, r3, #2
   14ae2:	18ca      	adds	r2, r1, r3
   14ae4:	4603      	mov	r3, r0
   14ae6:	ca07      	ldmia	r2, {r0, r1, r2}
   14ae8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   14aec:	e049      	b.n	14b82 <pm_policy_next_state+0x226>
			continue;
   14aee:	bf00      	nop
	for (i = ARRAY_SIZE(pm_min_residency) - 1; i >= 0; i--) {
   14af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14af2:	3b01      	subs	r3, #1
   14af4:	647b      	str	r3, [r7, #68]	; 0x44
   14af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   14af8:	2b00      	cmp	r3, #0
   14afa:	f6bf af38 	bge.w	1496e <pm_policy_next_state+0x12>
		}
	}

	LOG_DBG("No suitable power state found!");
   14afe:	2303      	movs	r3, #3
   14b00:	2b03      	cmp	r3, #3
   14b02:	d937      	bls.n	14b74 <pm_policy_next_state+0x218>
   14b04:	f00e fecb 	bl	2389e <k_is_user_context>
   14b08:	4603      	mov	r3, r0
   14b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
   14b0e:	2300      	movs	r3, #0
   14b10:	60fb      	str	r3, [r7, #12]
   14b12:	2303      	movs	r3, #3
   14b14:	2b00      	cmp	r3, #0
   14b16:	d007      	beq.n	14b28 <pm_policy_next_state+0x1cc>
   14b18:	4b21      	ldr	r3, [pc, #132]	; (14ba0 <pm_policy_next_state+0x244>)
   14b1a:	681b      	ldr	r3, [r3, #0]
   14b1c:	4618      	mov	r0, r3
   14b1e:	f7ff ff0d 	bl	1493c <log_const_source_id>
   14b22:	4603      	mov	r3, r0
   14b24:	b29b      	uxth	r3, r3
   14b26:	e000      	b.n	14b2a <pm_policy_next_state+0x1ce>
   14b28:	2300      	movs	r3, #0
   14b2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   14b2e:	7a3b      	ldrb	r3, [r7, #8]
   14b30:	2204      	movs	r2, #4
   14b32:	f362 0302 	bfi	r3, r2, #0, #3
   14b36:	723b      	strb	r3, [r7, #8]
   14b38:	7a3b      	ldrb	r3, [r7, #8]
   14b3a:	f36f 03c5 	bfc	r3, #3, #3
   14b3e:	723b      	strb	r3, [r7, #8]
   14b40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
   14b44:	f3c3 0309 	ubfx	r3, r3, #0, #10
   14b48:	b29a      	uxth	r2, r3
   14b4a:	893b      	ldrh	r3, [r7, #8]
   14b4c:	f362 138f 	bfi	r3, r2, #6, #10
   14b50:	813b      	strh	r3, [r7, #8]
   14b52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   14b56:	2b00      	cmp	r3, #0
   14b58:	d005      	beq.n	14b66 <pm_policy_next_state+0x20a>
   14b5a:	4a12      	ldr	r2, [pc, #72]	; (14ba4 <pm_policy_next_state+0x248>)
   14b5c:	4913      	ldr	r1, [pc, #76]	; (14bac <pm_policy_next_state+0x250>)
   14b5e:	8938      	ldrh	r0, [r7, #8]
   14b60:	f7fe faf6 	bl	13150 <log_from_user>
   14b64:	e007      	b.n	14b76 <pm_policy_next_state+0x21a>
   14b66:	4b0f      	ldr	r3, [pc, #60]	; (14ba4 <pm_policy_next_state+0x248>)
   14b68:	893a      	ldrh	r2, [r7, #8]
   14b6a:	4619      	mov	r1, r3
   14b6c:	480f      	ldr	r0, [pc, #60]	; (14bac <pm_policy_next_state+0x250>)
   14b6e:	f00d ffde 	bl	22b2e <log_1>
   14b72:	e000      	b.n	14b76 <pm_policy_next_state+0x21a>
   14b74:	bf00      	nop
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   14b76:	687b      	ldr	r3, [r7, #4]
   14b78:	461a      	mov	r2, r3
   14b7a:	2300      	movs	r3, #0
   14b7c:	6013      	str	r3, [r2, #0]
   14b7e:	6053      	str	r3, [r2, #4]
   14b80:	6093      	str	r3, [r2, #8]
}
   14b82:	6878      	ldr	r0, [r7, #4]
   14b84:	3748      	adds	r7, #72	; 0x48
   14b86:	46bd      	mov	sp, r7
   14b88:	bd80      	pop	{r7, pc}
   14b8a:	bf00      	nop
   14b8c:	0002cb1c 	.word	0x0002cb1c
   14b90:	0002a004 	.word	0x0002a004
   14b94:	0002a03c 	.word	0x0002a03c
   14b98:	0002a05c 	.word	0x0002a05c
   14b9c:	0002a07c 	.word	0x0002a07c
   14ba0:	2001451c 	.word	0x2001451c
   14ba4:	0002cb1c 	.word	0x0002cb1c
   14ba8:	0002a0a4 	.word	0x0002a0a4
   14bac:	0002a0e0 	.word	0x0002a0e0

00014bb0 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   14bb0:	b580      	push	{r7, lr}
   14bb2:	b082      	sub	sp, #8
   14bb4:	af00      	add	r7, sp, #0
   14bb6:	6078      	str	r0, [r7, #4]
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   14bb8:	687b      	ldr	r3, [r7, #4]
   14bba:	2b0a      	cmp	r3, #10
   14bbc:	d105      	bne.n	14bca <console_out+0x1a>
		uart_poll_out(uart_console_dev, '\r');
   14bbe:	4b09      	ldr	r3, [pc, #36]	; (14be4 <console_out+0x34>)
   14bc0:	681b      	ldr	r3, [r3, #0]
   14bc2:	210d      	movs	r1, #13
   14bc4:	4618      	mov	r0, r3
   14bc6:	f00e fe90 	bl	238ea <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
   14bca:	4b06      	ldr	r3, [pc, #24]	; (14be4 <console_out+0x34>)
   14bcc:	681b      	ldr	r3, [r3, #0]
   14bce:	687a      	ldr	r2, [r7, #4]
   14bd0:	b2d2      	uxtb	r2, r2
   14bd2:	4611      	mov	r1, r2
   14bd4:	4618      	mov	r0, r3
   14bd6:	f00e fe88 	bl	238ea <uart_poll_out>

	return c;
   14bda:	687b      	ldr	r3, [r7, #4]
}
   14bdc:	4618      	mov	r0, r3
   14bde:	3708      	adds	r7, #8
   14be0:	46bd      	mov	sp, r7
   14be2:	bd80      	pop	{r7, pc}
   14be4:	20014c54 	.word	0x20014c54

00014be8 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
   14be8:	b580      	push	{r7, lr}
   14bea:	af00      	add	r7, sp, #0
	__stdout_hook_install(console_out);
   14bec:	4803      	ldr	r0, [pc, #12]	; (14bfc <uart_console_hook_install+0x14>)
   14bee:	f003 fb33 	bl	18258 <__stdout_hook_install>
	__printk_hook_install(console_out);
   14bf2:	4802      	ldr	r0, [pc, #8]	; (14bfc <uart_console_hook_install+0x14>)
   14bf4:	f7fb feac 	bl	10950 <__printk_hook_install>
}
   14bf8:	bf00      	nop
   14bfa:	bd80      	pop	{r7, pc}
   14bfc:	00014bb1 	.word	0x00014bb1

00014c00 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   14c00:	b580      	push	{r7, lr}
   14c02:	b082      	sub	sp, #8
   14c04:	af00      	add	r7, sp, #0
   14c06:	6078      	str	r0, [r7, #4]

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   14c08:	4806      	ldr	r0, [pc, #24]	; (14c24 <uart_console_init+0x24>)
   14c0a:	f00e fe4f 	bl	238ac <device_get_binding>
   14c0e:	4603      	mov	r3, r0
   14c10:	4a05      	ldr	r2, [pc, #20]	; (14c28 <uart_console_init+0x28>)
   14c12:	6013      	str	r3, [r2, #0]

	uart_console_hook_install();
   14c14:	f7ff ffe8 	bl	14be8 <uart_console_hook_install>

	return 0;
   14c18:	2300      	movs	r3, #0
}
   14c1a:	4618      	mov	r0, r3
   14c1c:	3708      	adds	r7, #8
   14c1e:	46bd      	mov	sp, r7
   14c20:	bd80      	pop	{r7, pc}
   14c22:	bf00      	nop
   14c24:	0002a104 	.word	0x0002a104
   14c28:	20014c54 	.word	0x20014c54

00014c2c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   14c2c:	b480      	push	{r7}
   14c2e:	b083      	sub	sp, #12
   14c30:	af00      	add	r7, sp, #0
   14c32:	4603      	mov	r3, r0
   14c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   14c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
   14c3a:	2b00      	cmp	r3, #0
   14c3c:	db0c      	blt.n	14c58 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14c3e:	79fb      	ldrb	r3, [r7, #7]
   14c40:	f003 021f 	and.w	r2, r3, #31
   14c44:	4907      	ldr	r1, [pc, #28]	; (14c64 <__NVIC_ClearPendingIRQ+0x38>)
   14c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
   14c4a:	095b      	lsrs	r3, r3, #5
   14c4c:	2001      	movs	r0, #1
   14c4e:	fa00 f202 	lsl.w	r2, r0, r2
   14c52:	3360      	adds	r3, #96	; 0x60
   14c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
   14c58:	bf00      	nop
   14c5a:	370c      	adds	r7, #12
   14c5c:	46bd      	mov	sp, r7
   14c5e:	bc80      	pop	{r7}
   14c60:	4770      	bx	lr
   14c62:	bf00      	nop
   14c64:	e000e100 	.word	0xe000e100

00014c68 <k_is_pre_kernel>:
 *
 * @return true if invoked before post-kernel initialization
 * @return false if invoked during/after post-kernel initialization
 */
static inline bool k_is_pre_kernel(void)
{
   14c68:	b480      	push	{r7}
   14c6a:	af00      	add	r7, sp, #0
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   14c6c:	4b08      	ldr	r3, [pc, #32]	; (14c90 <k_is_pre_kernel+0x28>)
   14c6e:	781b      	ldrb	r3, [r3, #0]
   14c70:	2b00      	cmp	r3, #0
   14c72:	bf14      	ite	ne
   14c74:	2301      	movne	r3, #1
   14c76:	2300      	moveq	r3, #0
   14c78:	b2db      	uxtb	r3, r3
   14c7a:	f083 0301 	eor.w	r3, r3, #1
   14c7e:	b2db      	uxtb	r3, r3
   14c80:	f003 0301 	and.w	r3, r3, #1
   14c84:	b2db      	uxtb	r3, r3
}
   14c86:	4618      	mov	r0, r3
   14c88:	46bd      	mov	sp, r7
   14c8a:	bc80      	pop	{r7}
   14c8c:	4770      	bx	lr
   14c8e:	bf00      	nop
   14c90:	2001532f 	.word	0x2001532f

00014c94 <sys_notify_init_spinwait>:
 * reinitialized before it can be re-used.
 *
 * @param notify pointer to the notification configuration object.
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
   14c94:	b580      	push	{r7, lr}
   14c96:	b086      	sub	sp, #24
   14c98:	af00      	add	r7, sp, #0
   14c9a:	6078      	str	r0, [r7, #4]
	__ASSERT_NO_MSG(notify != NULL);
   14c9c:	687b      	ldr	r3, [r7, #4]
   14c9e:	2b00      	cmp	r3, #0
   14ca0:	d10b      	bne.n	14cba <sys_notify_init_spinwait+0x26>
   14ca2:	f44f 7385 	mov.w	r3, #266	; 0x10a
   14ca6:	4a0b      	ldr	r2, [pc, #44]	; (14cd4 <sys_notify_init_spinwait+0x40>)
   14ca8:	490b      	ldr	r1, [pc, #44]	; (14cd8 <sys_notify_init_spinwait+0x44>)
   14caa:	480c      	ldr	r0, [pc, #48]	; (14cdc <sys_notify_init_spinwait+0x48>)
   14cac:	f00c f9dc 	bl	21068 <printk>
   14cb0:	f44f 7185 	mov.w	r1, #266	; 0x10a
   14cb4:	4807      	ldr	r0, [pc, #28]	; (14cd4 <sys_notify_init_spinwait+0x40>)
   14cb6:	f00d fa84 	bl	221c2 <assert_post_action>

	*notify = (struct sys_notify){
   14cba:	687b      	ldr	r3, [r7, #4]
   14cbc:	461a      	mov	r2, r3
   14cbe:	2300      	movs	r3, #0
   14cc0:	6013      	str	r3, [r2, #0]
   14cc2:	6053      	str	r3, [r2, #4]
   14cc4:	6093      	str	r3, [r2, #8]
   14cc6:	687b      	ldr	r3, [r7, #4]
   14cc8:	2201      	movs	r2, #1
   14cca:	605a      	str	r2, [r3, #4]
		.flags = SYS_NOTIFY_METHOD_SPINWAIT,
	};
}
   14ccc:	bf00      	nop
   14cce:	3718      	adds	r7, #24
   14cd0:	46bd      	mov	sp, r7
   14cd2:	bd80      	pop	{r7, pc}
   14cd4:	0002a10c 	.word	0x0002a10c
   14cd8:	0002a134 	.word	0x0002a134
   14cdc:	0002a14c 	.word	0x0002a14c

00014ce0 <nrf_clock_is_running>:
}

NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
                                            nrf_clock_domain_t     domain,
                                            void *                 p_clk_src)
{
   14ce0:	b580      	push	{r7, lr}
   14ce2:	b084      	sub	sp, #16
   14ce4:	af00      	add	r7, sp, #0
   14ce6:	60f8      	str	r0, [r7, #12]
   14ce8:	460b      	mov	r3, r1
   14cea:	607a      	str	r2, [r7, #4]
   14cec:	72fb      	strb	r3, [r7, #11]
    switch (domain)
   14cee:	7afb      	ldrb	r3, [r7, #11]
   14cf0:	2b00      	cmp	r3, #0
   14cf2:	d002      	beq.n	14cfa <nrf_clock_is_running+0x1a>
   14cf4:	2b01      	cmp	r3, #1
   14cf6:	d015      	beq.n	14d24 <nrf_clock_is_running+0x44>
   14cf8:	e029      	b.n	14d4e <nrf_clock_is_running+0x6e>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
            if (p_clk_src != NULL)
   14cfa:	687b      	ldr	r3, [r7, #4]
   14cfc:	2b00      	cmp	r3, #0
   14cfe:	d008      	beq.n	14d12 <nrf_clock_is_running+0x32>
            {
                (*(nrf_clock_lfclk_t *)p_clk_src) =
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   14d00:	68fb      	ldr	r3, [r7, #12]
   14d02:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   14d06:	b2db      	uxtb	r3, r3
   14d08:	f003 0303 	and.w	r3, r3, #3
   14d0c:	b2da      	uxtb	r2, r3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   14d0e:	687b      	ldr	r3, [r7, #4]
   14d10:	701a      	strb	r2, [r3, #0]
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   14d12:	68fb      	ldr	r3, [r7, #12]
   14d14:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   14d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   14d1c:	2b00      	cmp	r3, #0
   14d1e:	d024      	beq.n	14d6a <nrf_clock_is_running+0x8a>
                >> CLOCK_LFCLKSTAT_STATE_Pos)
            {
                return true;
   14d20:	2301      	movs	r3, #1
   14d22:	e026      	b.n	14d72 <nrf_clock_is_running+0x92>
            }
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
   14d24:	687b      	ldr	r3, [r7, #4]
   14d26:	2b00      	cmp	r3, #0
   14d28:	d008      	beq.n	14d3c <nrf_clock_is_running+0x5c>
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   14d2a:	68fb      	ldr	r3, [r7, #12]
   14d2c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   14d30:	b2db      	uxtb	r3, r3
   14d32:	f003 0301 	and.w	r3, r3, #1
   14d36:	b2da      	uxtb	r2, r3
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   14d38:	687b      	ldr	r3, [r7, #4]
   14d3a:	701a      	strb	r2, [r3, #0]
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   14d3c:	68fb      	ldr	r3, [r7, #12]
   14d3e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   14d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   14d46:	2b00      	cmp	r3, #0
   14d48:	d011      	beq.n	14d6e <nrf_clock_is_running+0x8e>
                >> CLOCK_HFCLKSTAT_STATE_Pos)
            {
                return true;
   14d4a:	2301      	movs	r3, #1
   14d4c:	e011      	b.n	14d72 <nrf_clock_is_running+0x92>
        case NRF_CLOCK_DOMAIN_HFCLKAUDIO:
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
                   CLOCK_HFCLKAUDIOSTAT_STATE_Msk;
#endif
        default:
            NRFX_ASSERT(0);
   14d4e:	f44f 734f 	mov.w	r3, #828	; 0x33c
   14d52:	4a0a      	ldr	r2, [pc, #40]	; (14d7c <nrf_clock_is_running+0x9c>)
   14d54:	490a      	ldr	r1, [pc, #40]	; (14d80 <nrf_clock_is_running+0xa0>)
   14d56:	480b      	ldr	r0, [pc, #44]	; (14d84 <nrf_clock_is_running+0xa4>)
   14d58:	f00c f986 	bl	21068 <printk>
   14d5c:	f44f 714f 	mov.w	r1, #828	; 0x33c
   14d60:	4806      	ldr	r0, [pc, #24]	; (14d7c <nrf_clock_is_running+0x9c>)
   14d62:	f00d fa2e 	bl	221c2 <assert_post_action>
            return false;
   14d66:	2300      	movs	r3, #0
   14d68:	e003      	b.n	14d72 <nrf_clock_is_running+0x92>
            break;
   14d6a:	bf00      	nop
   14d6c:	e000      	b.n	14d70 <nrf_clock_is_running+0x90>
            break;
   14d6e:	bf00      	nop
    }
    return false;
   14d70:	2300      	movs	r3, #0
}
   14d72:	4618      	mov	r0, r3
   14d74:	3710      	adds	r7, #16
   14d76:	46bd      	mov	sp, r7
   14d78:	bd80      	pop	{r7, pc}
   14d7a:	bf00      	nop
   14d7c:	0002a16c 	.word	0x0002a16c
   14d80:	0002a1a0 	.word	0x0002a1a0
   14d84:	0002a14c 	.word	0x0002a14c

00014d88 <nrfx_clock_is_running>:
{
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
   14d88:	b580      	push	{r7, lr}
   14d8a:	b082      	sub	sp, #8
   14d8c:	af00      	add	r7, sp, #0
   14d8e:	4603      	mov	r3, r0
   14d90:	6039      	str	r1, [r7, #0]
   14d92:	71fb      	strb	r3, [r7, #7]
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   14d94:	79fb      	ldrb	r3, [r7, #7]
   14d96:	683a      	ldr	r2, [r7, #0]
   14d98:	4619      	mov	r1, r3
   14d9a:	4804      	ldr	r0, [pc, #16]	; (14dac <nrfx_clock_is_running+0x24>)
   14d9c:	f7ff ffa0 	bl	14ce0 <nrf_clock_is_running>
   14da0:	4603      	mov	r3, r0
}
   14da2:	4618      	mov	r0, r3
   14da4:	3708      	adds	r7, #8
   14da6:	46bd      	mov	sp, r7
   14da8:	bd80      	pop	{r7, pc}
   14daa:	bf00      	nop
   14dac:	40005000 	.word	0x40005000

00014db0 <log_const_source_id>:
{
   14db0:	b480      	push	{r7}
   14db2:	b083      	sub	sp, #12
   14db4:	af00      	add	r7, sp, #0
   14db6:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   14db8:	687b      	ldr	r3, [r7, #4]
   14dba:	4a04      	ldr	r2, [pc, #16]	; (14dcc <log_const_source_id+0x1c>)
   14dbc:	1a9b      	subs	r3, r3, r2
   14dbe:	08db      	lsrs	r3, r3, #3
}
   14dc0:	4618      	mov	r0, r3
   14dc2:	370c      	adds	r7, #12
   14dc4:	46bd      	mov	sp, r7
   14dc6:	bc80      	pop	{r7}
   14dc8:	4770      	bx	lr
   14dca:	bf00      	nop
   14dcc:	00029354 	.word	0x00029354

00014dd0 <get_status>:
				(enum clock_control_nrf_type)sys);
}

static enum clock_control_status get_status(const struct device *dev,
					    clock_control_subsys_t subsys)
{
   14dd0:	b580      	push	{r7, lr}
   14dd2:	b084      	sub	sp, #16
   14dd4:	af00      	add	r7, sp, #0
   14dd6:	6078      	str	r0, [r7, #4]
   14dd8:	6039      	str	r1, [r7, #0]
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   14dda:	683b      	ldr	r3, [r7, #0]
   14ddc:	73fb      	strb	r3, [r7, #15]

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   14dde:	7bfb      	ldrb	r3, [r7, #15]
   14de0:	2b01      	cmp	r3, #1
   14de2:	d909      	bls.n	14df8 <get_status+0x28>
   14de4:	237e      	movs	r3, #126	; 0x7e
   14de6:	4a0c      	ldr	r2, [pc, #48]	; (14e18 <get_status+0x48>)
   14de8:	490c      	ldr	r1, [pc, #48]	; (14e1c <get_status+0x4c>)
   14dea:	480d      	ldr	r0, [pc, #52]	; (14e20 <get_status+0x50>)
   14dec:	f00c f93c 	bl	21068 <printk>
   14df0:	217e      	movs	r1, #126	; 0x7e
   14df2:	4809      	ldr	r0, [pc, #36]	; (14e18 <get_status+0x48>)
   14df4:	f00d f9e5 	bl	221c2 <assert_post_action>

	return GET_STATUS(get_sub_data(dev, type)->flags);
   14df8:	7bfb      	ldrb	r3, [r7, #15]
   14dfa:	4619      	mov	r1, r3
   14dfc:	6878      	ldr	r0, [r7, #4]
   14dfe:	f00e ffcd 	bl	23d9c <get_sub_data>
   14e02:	4603      	mov	r3, r0
   14e04:	689b      	ldr	r3, [r3, #8]
   14e06:	b2db      	uxtb	r3, r3
   14e08:	f003 0307 	and.w	r3, r3, #7
   14e0c:	b2db      	uxtb	r3, r3
}
   14e0e:	4618      	mov	r0, r3
   14e10:	3710      	adds	r7, #16
   14e12:	46bd      	mov	sp, r7
   14e14:	bd80      	pop	{r7, pc}
   14e16:	bf00      	nop
   14e18:	0002a1b4 	.word	0x0002a1b4
   14e1c:	0002a1f4 	.word	0x0002a1f4
   14e20:	0002a14c 	.word	0x0002a14c

00014e24 <clkstarted_handle>:
	irq_unlock(key);
}

static void clkstarted_handle(const struct device *dev,
			      enum clock_control_nrf_type type)
{
   14e24:	b590      	push	{r4, r7, lr}
   14e26:	b089      	sub	sp, #36	; 0x24
   14e28:	af00      	add	r7, sp, #0
   14e2a:	6078      	str	r0, [r7, #4]
   14e2c:	460b      	mov	r3, r1
   14e2e:	70fb      	strb	r3, [r7, #3]
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   14e30:	78fb      	ldrb	r3, [r7, #3]
   14e32:	4619      	mov	r1, r3
   14e34:	6878      	ldr	r0, [r7, #4]
   14e36:	f00e ffb1 	bl	23d9c <get_sub_data>
   14e3a:	61f8      	str	r0, [r7, #28]
	clock_control_cb_t callback = sub_data->cb;
   14e3c:	69fb      	ldr	r3, [r7, #28]
   14e3e:	681b      	ldr	r3, [r3, #0]
   14e40:	61bb      	str	r3, [r7, #24]
	void *user_data = sub_data->user_data;
   14e42:	69fb      	ldr	r3, [r7, #28]
   14e44:	685b      	ldr	r3, [r3, #4]
   14e46:	617b      	str	r3, [r7, #20]

	sub_data->cb = NULL;
   14e48:	69fb      	ldr	r3, [r7, #28]
   14e4a:	2200      	movs	r2, #0
   14e4c:	601a      	str	r2, [r3, #0]
	set_on_state(&sub_data->flags);
   14e4e:	69fb      	ldr	r3, [r7, #28]
   14e50:	3308      	adds	r3, #8
   14e52:	4618      	mov	r0, r3
   14e54:	f00f f84e 	bl	23ef4 <set_on_state>
	DBG(dev, type, "Clock started");
   14e58:	2303      	movs	r3, #3
   14e5a:	2b03      	cmp	r3, #3
   14e5c:	d942      	bls.n	14ee4 <clkstarted_handle+0xc0>
   14e5e:	f00e fd87 	bl	23970 <k_is_user_context>
   14e62:	4603      	mov	r3, r0
   14e64:	74fb      	strb	r3, [r7, #19]
   14e66:	2300      	movs	r3, #0
   14e68:	60fb      	str	r3, [r7, #12]
   14e6a:	2303      	movs	r3, #3
   14e6c:	2b00      	cmp	r3, #0
   14e6e:	d007      	beq.n	14e80 <clkstarted_handle+0x5c>
   14e70:	4b23      	ldr	r3, [pc, #140]	; (14f00 <clkstarted_handle+0xdc>)
   14e72:	681b      	ldr	r3, [r3, #0]
   14e74:	4618      	mov	r0, r3
   14e76:	f7ff ff9b 	bl	14db0 <log_const_source_id>
   14e7a:	4603      	mov	r3, r0
   14e7c:	b29b      	uxth	r3, r3
   14e7e:	e000      	b.n	14e82 <clkstarted_handle+0x5e>
   14e80:	2300      	movs	r3, #0
   14e82:	823b      	strh	r3, [r7, #16]
   14e84:	7a3b      	ldrb	r3, [r7, #8]
   14e86:	2204      	movs	r2, #4
   14e88:	f362 0302 	bfi	r3, r2, #0, #3
   14e8c:	723b      	strb	r3, [r7, #8]
   14e8e:	7a3b      	ldrb	r3, [r7, #8]
   14e90:	f36f 03c5 	bfc	r3, #3, #3
   14e94:	723b      	strb	r3, [r7, #8]
   14e96:	8a3b      	ldrh	r3, [r7, #16]
   14e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
   14e9c:	b29a      	uxth	r2, r3
   14e9e:	893b      	ldrh	r3, [r7, #8]
   14ea0:	f362 138f 	bfi	r3, r2, #6, #10
   14ea4:	813b      	strh	r3, [r7, #8]
   14ea6:	7cfb      	ldrb	r3, [r7, #19]
   14ea8:	2b00      	cmp	r3, #0
   14eaa:	d00c      	beq.n	14ec6 <clkstarted_handle+0xa2>
   14eac:	78fb      	ldrb	r3, [r7, #3]
   14eae:	4619      	mov	r1, r3
   14eb0:	6878      	ldr	r0, [r7, #4]
   14eb2:	f00e ff89 	bl	23dc8 <get_sub_config>
   14eb6:	4603      	mov	r3, r0
   14eb8:	689b      	ldr	r3, [r3, #8]
   14eba:	4a12      	ldr	r2, [pc, #72]	; (14f04 <clkstarted_handle+0xe0>)
   14ebc:	4912      	ldr	r1, [pc, #72]	; (14f08 <clkstarted_handle+0xe4>)
   14ebe:	8938      	ldrh	r0, [r7, #8]
   14ec0:	f7fe f946 	bl	13150 <log_from_user>
   14ec4:	e00f      	b.n	14ee6 <clkstarted_handle+0xc2>
   14ec6:	4c0f      	ldr	r4, [pc, #60]	; (14f04 <clkstarted_handle+0xe0>)
   14ec8:	78fb      	ldrb	r3, [r7, #3]
   14eca:	4619      	mov	r1, r3
   14ecc:	6878      	ldr	r0, [r7, #4]
   14ece:	f00e ff7b 	bl	23dc8 <get_sub_config>
   14ed2:	4603      	mov	r3, r0
   14ed4:	689b      	ldr	r3, [r3, #8]
   14ed6:	461a      	mov	r2, r3
   14ed8:	893b      	ldrh	r3, [r7, #8]
   14eda:	4621      	mov	r1, r4
   14edc:	480a      	ldr	r0, [pc, #40]	; (14f08 <clkstarted_handle+0xe4>)
   14ede:	f00d fe3d 	bl	22b5c <log_2>
   14ee2:	e000      	b.n	14ee6 <clkstarted_handle+0xc2>
   14ee4:	bf00      	nop

	if (callback) {
   14ee6:	69bb      	ldr	r3, [r7, #24]
   14ee8:	2b00      	cmp	r3, #0
   14eea:	d005      	beq.n	14ef8 <clkstarted_handle+0xd4>
		callback(dev, (clock_control_subsys_t)type, user_data);
   14eec:	78fb      	ldrb	r3, [r7, #3]
   14eee:	4619      	mov	r1, r3
   14ef0:	69bb      	ldr	r3, [r7, #24]
   14ef2:	697a      	ldr	r2, [r7, #20]
   14ef4:	6878      	ldr	r0, [r7, #4]
   14ef6:	4798      	blx	r3
	}
}
   14ef8:	bf00      	nop
   14efa:	3724      	adds	r7, #36	; 0x24
   14efc:	46bd      	mov	sp, r7
   14efe:	bd90      	pop	{r4, r7, pc}
   14f00:	20014520 	.word	0x20014520
   14f04:	0002cb60 	.word	0x0002cb60
   14f08:	0002a218 	.word	0x0002a218

00014f0c <get_hf_flags>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
}
#endif

static uint32_t *get_hf_flags(void)
{
   14f0c:	b480      	push	{r7}
   14f0e:	b083      	sub	sp, #12
   14f10:	af00      	add	r7, sp, #0
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
   14f12:	4b04      	ldr	r3, [pc, #16]	; (14f24 <get_hf_flags+0x18>)
   14f14:	607b      	str	r3, [r7, #4]

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
   14f16:	687b      	ldr	r3, [r7, #4]
   14f18:	3348      	adds	r3, #72	; 0x48
}
   14f1a:	4618      	mov	r0, r3
   14f1c:	370c      	adds	r7, #12
   14f1e:	46bd      	mov	sp, r7
   14f20:	bc80      	pop	{r7}
   14f22:	4770      	bx	lr
   14f24:	20014c5c 	.word	0x20014c5c

00014f28 <generic_hfclk_start>:

static void generic_hfclk_start(void)
{
   14f28:	b580      	push	{r7, lr}
   14f2a:	b086      	sub	sp, #24
   14f2c:	af00      	add	r7, sp, #0
	nrf_clock_hfclk_t type;
	bool already_started = false;
   14f2e:	2300      	movs	r3, #0
   14f30:	75fb      	strb	r3, [r7, #23]
	__asm__ volatile(
   14f32:	f04f 0320 	mov.w	r3, #32
   14f36:	f3ef 8211 	mrs	r2, BASEPRI
   14f3a:	f383 8811 	msr	BASEPRI, r3
   14f3e:	f3bf 8f6f 	isb	sy
   14f42:	60fa      	str	r2, [r7, #12]
   14f44:	60bb      	str	r3, [r7, #8]
	return key;
   14f46:	68fb      	ldr	r3, [r7, #12]
	int key = irq_lock();
   14f48:	613b      	str	r3, [r7, #16]

	hfclk_users |= HF_USER_GENERIC;
   14f4a:	4b19      	ldr	r3, [pc, #100]	; (14fb0 <generic_hfclk_start+0x88>)
   14f4c:	681b      	ldr	r3, [r3, #0]
   14f4e:	f043 0302 	orr.w	r3, r3, #2
   14f52:	461a      	mov	r2, r3
   14f54:	4b16      	ldr	r3, [pc, #88]	; (14fb0 <generic_hfclk_start+0x88>)
   14f56:	601a      	str	r2, [r3, #0]
	if (hfclk_users & HF_USER_BT) {
   14f58:	4b15      	ldr	r3, [pc, #84]	; (14fb0 <generic_hfclk_start+0x88>)
   14f5a:	681b      	ldr	r3, [r3, #0]
   14f5c:	f003 0301 	and.w	r3, r3, #1
   14f60:	2b00      	cmp	r3, #0
   14f62:	d00f      	beq.n	14f84 <generic_hfclk_start+0x5c>
		(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &type);
   14f64:	1cfb      	adds	r3, r7, #3
   14f66:	4619      	mov	r1, r3
   14f68:	2001      	movs	r0, #1
   14f6a:	f7ff ff0d 	bl	14d88 <nrfx_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   14f6e:	78fb      	ldrb	r3, [r7, #3]
   14f70:	2b01      	cmp	r3, #1
   14f72:	d107      	bne.n	14f84 <generic_hfclk_start+0x5c>
			already_started = true;
   14f74:	2301      	movs	r3, #1
   14f76:	75fb      	strb	r3, [r7, #23]
			/* Set on state in case clock interrupt comes and we
			 * want to avoid handling that.
			 */
			set_on_state(get_hf_flags());
   14f78:	f7ff ffc8 	bl	14f0c <get_hf_flags>
   14f7c:	4603      	mov	r3, r0
   14f7e:	4618      	mov	r0, r3
   14f80:	f00e ffb8 	bl	23ef4 <set_on_state>
		}
	}

	irq_unlock(key);
   14f84:	693b      	ldr	r3, [r7, #16]
   14f86:	607b      	str	r3, [r7, #4]
	__asm__ volatile(
   14f88:	687b      	ldr	r3, [r7, #4]
   14f8a:	f383 8811 	msr	BASEPRI, r3
   14f8e:	f3bf 8f6f 	isb	sy
}
   14f92:	bf00      	nop

	if (already_started) {
   14f94:	7dfb      	ldrb	r3, [r7, #23]
   14f96:	2b00      	cmp	r3, #0
   14f98:	d004      	beq.n	14fa4 <generic_hfclk_start+0x7c>
		/* Clock already started by z_nrf_clock_bt_ctlr_hf_request */
		clkstarted_handle(CLOCK_DEVICE,
   14f9a:	2100      	movs	r1, #0
   14f9c:	4805      	ldr	r0, [pc, #20]	; (14fb4 <generic_hfclk_start+0x8c>)
   14f9e:	f7ff ff41 	bl	14e24 <clkstarted_handle>
   14fa2:	e001      	b.n	14fa8 <generic_hfclk_start+0x80>
				  CLOCK_CONTROL_NRF_TYPE_HFCLK);
		return;
	}

	hfclk_start();
   14fa4:	f00e ffd7 	bl	23f56 <hfclk_start>
}
   14fa8:	3718      	adds	r7, #24
   14faa:	46bd      	mov	sp, r7
   14fac:	bd80      	pop	{r7, pc}
   14fae:	bf00      	nop
   14fb0:	20014c58 	.word	0x20014c58
   14fb4:	000290d4 	.word	0x000290d4

00014fb8 <generic_hfclk_stop>:

static void generic_hfclk_stop(void)
{
   14fb8:	b580      	push	{r7, lr}
   14fba:	af00      	add	r7, sp, #0
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   14fbc:	f06f 0102 	mvn.w	r1, #2
   14fc0:	4806      	ldr	r0, [pc, #24]	; (14fdc <generic_hfclk_stop+0x24>)
   14fc2:	f00e fcb4 	bl	2392e <atomic_and>
   14fc6:	4603      	mov	r3, r0
   14fc8:	f003 0301 	and.w	r3, r3, #1
   14fcc:	2b00      	cmp	r3, #0
   14fce:	d102      	bne.n	14fd6 <generic_hfclk_stop+0x1e>
		/* bt still requesting the clock. */
		return;
	}

	hfclk_stop();
   14fd0:	f00e ffc7 	bl	23f62 <hfclk_stop>
   14fd4:	e000      	b.n	14fd8 <generic_hfclk_stop+0x20>
		return;
   14fd6:	bf00      	nop
}
   14fd8:	bd80      	pop	{r7, pc}
   14fda:	bf00      	nop
   14fdc:	20014c58 	.word	0x20014c58

00014fe0 <stop>:
	hfclk_stop();
}

static int stop(const struct device *dev, clock_control_subsys_t subsys,
		uint32_t ctx)
{
   14fe0:	b580      	push	{r7, lr}
   14fe2:	b088      	sub	sp, #32
   14fe4:	af00      	add	r7, sp, #0
   14fe6:	60f8      	str	r0, [r7, #12]
   14fe8:	60b9      	str	r1, [r7, #8]
   14fea:	607a      	str	r2, [r7, #4]
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   14fec:	68bb      	ldr	r3, [r7, #8]
   14fee:	77fb      	strb	r3, [r7, #31]
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   14ff0:	7ffb      	ldrb	r3, [r7, #31]
   14ff2:	4619      	mov	r1, r3
   14ff4:	68f8      	ldr	r0, [r7, #12]
   14ff6:	f00e fed1 	bl	23d9c <get_sub_data>
   14ffa:	61b8      	str	r0, [r7, #24]
	int err;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   14ffc:	7ffb      	ldrb	r3, [r7, #31]
   14ffe:	2b01      	cmp	r3, #1
   15000:	d90b      	bls.n	1501a <stop+0x3a>
   15002:	f240 1353 	movw	r3, #339	; 0x153
   15006:	4a11      	ldr	r2, [pc, #68]	; (1504c <stop+0x6c>)
   15008:	4911      	ldr	r1, [pc, #68]	; (15050 <stop+0x70>)
   1500a:	4812      	ldr	r0, [pc, #72]	; (15054 <stop+0x74>)
   1500c:	f00c f82c 	bl	21068 <printk>
   15010:	f240 1153 	movw	r1, #339	; 0x153
   15014:	480d      	ldr	r0, [pc, #52]	; (1504c <stop+0x6c>)
   15016:	f00d f8d4 	bl	221c2 <assert_post_action>

	err = set_off_state(&subdata->flags, ctx);
   1501a:	69bb      	ldr	r3, [r7, #24]
   1501c:	3308      	adds	r3, #8
   1501e:	6879      	ldr	r1, [r7, #4]
   15020:	4618      	mov	r0, r3
   15022:	f00e fef8 	bl	23e16 <set_off_state>
   15026:	6178      	str	r0, [r7, #20]
	if (err < 0) {
   15028:	697b      	ldr	r3, [r7, #20]
   1502a:	2b00      	cmp	r3, #0
   1502c:	da01      	bge.n	15032 <stop+0x52>
		return err;
   1502e:	697b      	ldr	r3, [r7, #20]
   15030:	e008      	b.n	15044 <stop+0x64>
	}

	get_sub_config(dev, type)->stop();
   15032:	7ffb      	ldrb	r3, [r7, #31]
   15034:	4619      	mov	r1, r3
   15036:	68f8      	ldr	r0, [r7, #12]
   15038:	f00e fec6 	bl	23dc8 <get_sub_config>
   1503c:	4603      	mov	r3, r0
   1503e:	685b      	ldr	r3, [r3, #4]
   15040:	4798      	blx	r3

	return 0;
   15042:	2300      	movs	r3, #0
}
   15044:	4618      	mov	r0, r3
   15046:	3720      	adds	r7, #32
   15048:	46bd      	mov	sp, r7
   1504a:	bd80      	pop	{r7, pc}
   1504c:	0002a1b4 	.word	0x0002a1b4
   15050:	0002a1f4 	.word	0x0002a1f4
   15054:	0002a14c 	.word	0x0002a14c

00015058 <api_blocking_start>:
	k_sem_give(sem);
}

static int api_blocking_start(const struct device *dev,
			      clock_control_subsys_t subsys)
{
   15058:	b590      	push	{r4, r7, lr}
   1505a:	b089      	sub	sp, #36	; 0x24
   1505c:	af00      	add	r7, sp, #0
   1505e:	6078      	str	r0, [r7, #4]
   15060:	6039      	str	r1, [r7, #0]
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   15062:	f107 030c 	add.w	r3, r7, #12
   15066:	60fb      	str	r3, [r7, #12]
   15068:	f107 030c 	add.w	r3, r7, #12
   1506c:	613b      	str	r3, [r7, #16]
   1506e:	2300      	movs	r3, #0
   15070:	617b      	str	r3, [r7, #20]
   15072:	2301      	movs	r3, #1
   15074:	61bb      	str	r3, [r7, #24]

	if (!IS_ENABLED(CONFIG_MULTITHREADING)) {
		return -ENOTSUP;
	}

	err = api_start(dev, subsys, blocking_start_callback, &sem);
   15076:	f107 030c 	add.w	r3, r7, #12
   1507a:	4a10      	ldr	r2, [pc, #64]	; (150bc <api_blocking_start+0x64>)
   1507c:	6839      	ldr	r1, [r7, #0]
   1507e:	6878      	ldr	r0, [r7, #4]
   15080:	f00e ffb2 	bl	23fe8 <api_start>
   15084:	61f8      	str	r0, [r7, #28]
	if (err < 0) {
   15086:	69fb      	ldr	r3, [r7, #28]
   15088:	2b00      	cmp	r3, #0
   1508a:	da01      	bge.n	15090 <api_blocking_start+0x38>
		return err;
   1508c:	69fb      	ldr	r3, [r7, #28]
   1508e:	e011      	b.n	150b4 <api_blocking_start+0x5c>
	}

	return k_sem_take(&sem, K_MSEC(500));
   15090:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   15094:	f04f 0100 	mov.w	r1, #0
   15098:	f00e fc71 	bl	2397e <k_ms_to_ticks_ceil64>
   1509c:	4602      	mov	r2, r0
   1509e:	460b      	mov	r3, r1
   150a0:	4610      	mov	r0, r2
   150a2:	4619      	mov	r1, r3
   150a4:	f107 040c 	add.w	r4, r7, #12
   150a8:	4602      	mov	r2, r0
   150aa:	460b      	mov	r3, r1
   150ac:	4620      	mov	r0, r4
   150ae:	f00e fdbd 	bl	23c2c <k_sem_take>
   150b2:	4603      	mov	r3, r0
}
   150b4:	4618      	mov	r0, r3
   150b6:	3724      	adds	r7, #36	; 0x24
   150b8:	46bd      	mov	sp, r7
   150ba:	bd90      	pop	{r4, r7, pc}
   150bc:	00024011 	.word	0x00024011

000150c0 <get_subsys>:

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
   150c0:	b480      	push	{r7}
   150c2:	b085      	sub	sp, #20
   150c4:	af00      	add	r7, sp, #0
   150c6:	6078      	str	r0, [r7, #4]
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
   150c8:	4b06      	ldr	r3, [pc, #24]	; (150e4 <get_subsys+0x24>)
   150ca:	60fb      	str	r3, [r7, #12]
	size_t offset = (size_t)(mgr - data->mgr);
   150cc:	68fb      	ldr	r3, [r7, #12]
   150ce:	687a      	ldr	r2, [r7, #4]
   150d0:	1ad3      	subs	r3, r2, r3
   150d2:	115b      	asrs	r3, r3, #5
   150d4:	60bb      	str	r3, [r7, #8]

	return (clock_control_subsys_t)offset;
   150d6:	68bb      	ldr	r3, [r7, #8]
}
   150d8:	4618      	mov	r0, r3
   150da:	3714      	adds	r7, #20
   150dc:	46bd      	mov	sp, r7
   150de:	bc80      	pop	{r7}
   150e0:	4770      	bx	lr
   150e2:	bf00      	nop
   150e4:	20014c5c 	.word	0x20014c5c

000150e8 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   150e8:	b580      	push	{r7, lr}
   150ea:	b084      	sub	sp, #16
   150ec:	af00      	add	r7, sp, #0
   150ee:	6078      	str	r0, [r7, #4]
   150f0:	6039      	str	r1, [r7, #0]
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   150f2:	6878      	ldr	r0, [r7, #4]
   150f4:	f7ff ffe4 	bl	150c0 <get_subsys>
   150f8:	4603      	mov	r3, r0
   150fa:	2240      	movs	r2, #64	; 0x40
   150fc:	4619      	mov	r1, r3
   150fe:	4806      	ldr	r0, [pc, #24]	; (15118 <onoff_stop+0x30>)
   15100:	f7ff ff6e 	bl	14fe0 <stop>
   15104:	60f8      	str	r0, [r7, #12]
	notify(mgr, res);
   15106:	683b      	ldr	r3, [r7, #0]
   15108:	68f9      	ldr	r1, [r7, #12]
   1510a:	6878      	ldr	r0, [r7, #4]
   1510c:	4798      	blx	r3
}
   1510e:	bf00      	nop
   15110:	3710      	adds	r7, #16
   15112:	46bd      	mov	sp, r7
   15114:	bd80      	pop	{r7, pc}
   15116:	bf00      	nop
   15118:	000290d4 	.word	0x000290d4

0001511c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1511c:	b580      	push	{r7, lr}
   1511e:	b086      	sub	sp, #24
   15120:	af02      	add	r7, sp, #8
   15122:	6078      	str	r0, [r7, #4]
   15124:	6039      	str	r1, [r7, #0]
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   15126:	6878      	ldr	r0, [r7, #4]
   15128:	f7ff ffca 	bl	150c0 <get_subsys>
   1512c:	4601      	mov	r1, r0
   1512e:	2340      	movs	r3, #64	; 0x40
   15130:	9300      	str	r3, [sp, #0]
   15132:	683b      	ldr	r3, [r7, #0]
   15134:	4a07      	ldr	r2, [pc, #28]	; (15154 <onoff_start+0x38>)
   15136:	4808      	ldr	r0, [pc, #32]	; (15158 <onoff_start+0x3c>)
   15138:	f00e ff28 	bl	23f8c <async_start>
   1513c:	60f8      	str	r0, [r7, #12]
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1513e:	68fb      	ldr	r3, [r7, #12]
   15140:	2b00      	cmp	r3, #0
   15142:	da03      	bge.n	1514c <onoff_start+0x30>
		notify(mgr, err);
   15144:	683b      	ldr	r3, [r7, #0]
   15146:	68f9      	ldr	r1, [r7, #12]
   15148:	6878      	ldr	r0, [r7, #4]
   1514a:	4798      	blx	r3
	}
}
   1514c:	bf00      	nop
   1514e:	3710      	adds	r7, #16
   15150:	46bd      	mov	sp, r7
   15152:	bd80      	pop	{r7, pc}
   15154:	0002402f 	.word	0x0002402f
   15158:	000290d4 	.word	0x000290d4

0001515c <lfclk_spinwait>:
 * This approach is implemented in nrfx_clock driver and utilized here.
 *
 * @param mode Start mode.
 */
static void lfclk_spinwait(enum nrf_lfclk_start_mode mode)
{
   1515c:	b580      	push	{r7, lr}
   1515e:	b088      	sub	sp, #32
   15160:	af00      	add	r7, sp, #0
   15162:	4603      	mov	r3, r0
   15164:	71fb      	strb	r3, [r7, #7]
		 IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_EXT_FULL_SWING))
		? NRF_CLOCK_LFCLK_Xtal
		: CLOCK_CONTROL_NRF_K32SRC;
	nrf_clock_lfclk_t type;

	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   15166:	79fb      	ldrb	r3, [r7, #7]
   15168:	2b01      	cmp	r3, #1
   1516a:	d10a      	bne.n	15182 <lfclk_spinwait+0x26>
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1516c:	4b47      	ldr	r3, [pc, #284]	; (1528c <lfclk_spinwait+0x130>)
   1516e:	781b      	ldrb	r3, [r3, #0]
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   15170:	2b02      	cmp	r3, #2
   15172:	d106      	bne.n	15182 <lfclk_spinwait+0x26>
	    (nrf_clock_lf_srccopy_get(NRF_CLOCK) == CLOCK_CONTROL_NRF_K32SRC)) {
   15174:	4846      	ldr	r0, [pc, #280]	; (15290 <lfclk_spinwait+0x134>)
   15176:	f00e fde5 	bl	23d44 <nrf_clock_lf_srccopy_get>
   1517a:	4603      	mov	r3, r0
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1517c:	2b02      	cmp	r3, #2
   1517e:	f000 8081 	beq.w	15284 <lfclk_spinwait+0x128>
		 * started.
		 */
		return;
	}

	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   15182:	f012 fdb9 	bl	27cf8 <k_is_in_isr>
   15186:	4603      	mov	r3, r0
   15188:	2b00      	cmp	r3, #0
   1518a:	d104      	bne.n	15196 <lfclk_spinwait+0x3a>
   1518c:	f7ff fd6c 	bl	14c68 <k_is_pre_kernel>
   15190:	4603      	mov	r3, r0
   15192:	2b00      	cmp	r3, #0
   15194:	d001      	beq.n	1519a <lfclk_spinwait+0x3e>
   15196:	2301      	movs	r3, #1
   15198:	e000      	b.n	1519c <lfclk_spinwait+0x40>
   1519a:	2300      	movs	r3, #0
   1519c:	77fb      	strb	r3, [r7, #31]
   1519e:	7ffb      	ldrb	r3, [r7, #31]
   151a0:	f003 0301 	and.w	r3, r3, #1
   151a4:	77fb      	strb	r3, [r7, #31]
	int key = isr_mode ? irq_lock() : 0;
   151a6:	7ffb      	ldrb	r3, [r7, #31]
   151a8:	2b00      	cmp	r3, #0
   151aa:	d00b      	beq.n	151c4 <lfclk_spinwait+0x68>
	__asm__ volatile(
   151ac:	f04f 0320 	mov.w	r3, #32
   151b0:	f3ef 8211 	mrs	r2, BASEPRI
   151b4:	f383 8811 	msr	BASEPRI, r3
   151b8:	f3bf 8f6f 	isb	sy
   151bc:	617a      	str	r2, [r7, #20]
   151be:	613b      	str	r3, [r7, #16]
	return key;
   151c0:	697b      	ldr	r3, [r7, #20]
   151c2:	e000      	b.n	151c6 <lfclk_spinwait+0x6a>
   151c4:	2300      	movs	r3, #0
   151c6:	61bb      	str	r3, [r7, #24]

	if (!isr_mode) {
   151c8:	7ffb      	ldrb	r3, [r7, #31]
   151ca:	f083 0301 	eor.w	r3, r3, #1
   151ce:	b2db      	uxtb	r3, r3
   151d0:	2b00      	cmp	r3, #0
   151d2:	d031      	beq.n	15238 <lfclk_spinwait+0xdc>
		nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
   151d4:	2102      	movs	r1, #2
   151d6:	482e      	ldr	r0, [pc, #184]	; (15290 <lfclk_spinwait+0x134>)
   151d8:	f00e fd51 	bl	23c7e <nrf_clock_int_disable>
	}

	while (!(nrfx_clock_is_running(d, (void *)&type)
   151dc:	e02c      	b.n	15238 <lfclk_spinwait+0xdc>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
		/* Synth source start is almost instant and LFCLKSTARTED may
		 * happen before calling idle. That would lead to deadlock.
		 */
		if (!IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_SYNTH)) {
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   151de:	7ffb      	ldrb	r3, [r7, #31]
   151e0:	2b00      	cmp	r3, #0
   151e2:	d004      	beq.n	151ee <lfclk_spinwait+0x92>
				k_cpu_atomic_idle(key);
   151e4:	69bb      	ldr	r3, [r7, #24]
   151e6:	4618      	mov	r0, r3
   151e8:	f00e fd07 	bl	23bfa <k_cpu_atomic_idle>
   151ec:	e002      	b.n	151f4 <lfclk_spinwait+0x98>
			} else {
				k_msleep(1);
   151ee:	2001      	movs	r0, #1
   151f0:	f00e fce9 	bl	23bc6 <k_msleep>
			}
		}

		/* Clock interrupt is locked, LFCLKSTARTED is handled here. */
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   151f4:	4b25      	ldr	r3, [pc, #148]	; (1528c <lfclk_spinwait+0x130>)
   151f6:	781b      	ldrb	r3, [r3, #0]
   151f8:	2b02      	cmp	r3, #2
   151fa:	d11d      	bne.n	15238 <lfclk_spinwait+0xdc>
		    && (nrf_clock_lf_src_get(NRF_CLOCK) == NRF_CLOCK_LFCLK_RC)
   151fc:	4824      	ldr	r0, [pc, #144]	; (15290 <lfclk_spinwait+0x134>)
   151fe:	f00e fd94 	bl	23d2a <nrf_clock_lf_src_get>
   15202:	4603      	mov	r3, r0
   15204:	2b01      	cmp	r3, #1
   15206:	d117      	bne.n	15238 <lfclk_spinwait+0xdc>
		    && nrf_clock_event_check(NRF_CLOCK,
   15208:	f44f 7182 	mov.w	r1, #260	; 0x104
   1520c:	4820      	ldr	r0, [pc, #128]	; (15290 <lfclk_spinwait+0x134>)
   1520e:	f00e fd69 	bl	23ce4 <nrf_clock_event_check>
   15212:	4603      	mov	r3, r0
   15214:	2b00      	cmp	r3, #0
   15216:	d00f      	beq.n	15238 <lfclk_spinwait+0xdc>
					     NRF_CLOCK_EVENT_LFCLKSTARTED)) {
			nrf_clock_event_clear(NRF_CLOCK,
   15218:	f44f 7182 	mov.w	r1, #260	; 0x104
   1521c:	481c      	ldr	r0, [pc, #112]	; (15290 <lfclk_spinwait+0x134>)
   1521e:	f00e fd4c 	bl	23cba <nrf_clock_event_clear>
					      NRF_CLOCK_EVENT_LFCLKSTARTED);
			nrf_clock_lf_src_set(NRF_CLOCK,
   15222:	2102      	movs	r1, #2
   15224:	481a      	ldr	r0, [pc, #104]	; (15290 <lfclk_spinwait+0x134>)
   15226:	f00e fd71 	bl	23d0c <nrf_clock_lf_src_set>
					     CLOCK_CONTROL_NRF_K32SRC);

			/* Clear pending interrupt, otherwise new clock event
			 * would not wake up from idle.
			 */
			NVIC_ClearPendingIRQ(DT_INST_IRQN(0));
   1522a:	2005      	movs	r0, #5
   1522c:	f7ff fcfe 	bl	14c2c <__NVIC_ClearPendingIRQ>
			nrf_clock_task_trigger(NRF_CLOCK,
   15230:	2108      	movs	r1, #8
   15232:	4817      	ldr	r0, [pc, #92]	; (15290 <lfclk_spinwait+0x134>)
   15234:	f00e fd31 	bl	23c9a <nrf_clock_task_trigger>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   15238:	4b16      	ldr	r3, [pc, #88]	; (15294 <lfclk_spinwait+0x138>)
   1523a:	781b      	ldrb	r3, [r3, #0]
   1523c:	f107 020b 	add.w	r2, r7, #11
   15240:	4611      	mov	r1, r2
   15242:	4618      	mov	r0, r3
   15244:	f7ff fda0 	bl	14d88 <nrfx_clock_is_running>
   15248:	4603      	mov	r3, r0
   1524a:	f083 0301 	eor.w	r3, r3, #1
   1524e:	b2db      	uxtb	r3, r3
   15250:	2b00      	cmp	r3, #0
   15252:	d1c4      	bne.n	151de <lfclk_spinwait+0x82>
		 && ((type == target_type)
   15254:	7afa      	ldrb	r2, [r7, #11]
   15256:	4b0d      	ldr	r3, [pc, #52]	; (1528c <lfclk_spinwait+0x130>)
   15258:	781b      	ldrb	r3, [r3, #0]
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1525a:	429a      	cmp	r2, r3
   1525c:	d002      	beq.n	15264 <lfclk_spinwait+0x108>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1525e:	79fb      	ldrb	r3, [r7, #7]
   15260:	2b01      	cmp	r3, #1
   15262:	d1bc      	bne.n	151de <lfclk_spinwait+0x82>
					       NRF_CLOCK_TASK_LFCLKSTART);
		}
	}

	if (isr_mode) {
   15264:	7ffb      	ldrb	r3, [r7, #31]
   15266:	2b00      	cmp	r3, #0
   15268:	d007      	beq.n	1527a <lfclk_spinwait+0x11e>
		irq_unlock(key);
   1526a:	69bb      	ldr	r3, [r7, #24]
   1526c:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
   1526e:	68fb      	ldr	r3, [r7, #12]
   15270:	f383 8811 	msr	BASEPRI, r3
   15274:	f3bf 8f6f 	isb	sy
}
   15278:	e005      	b.n	15286 <lfclk_spinwait+0x12a>
	} else {
		nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
   1527a:	2102      	movs	r1, #2
   1527c:	4804      	ldr	r0, [pc, #16]	; (15290 <lfclk_spinwait+0x134>)
   1527e:	f00e fcf0 	bl	23c62 <nrf_clock_int_enable>
   15282:	e000      	b.n	15286 <lfclk_spinwait+0x12a>
		return;
   15284:	bf00      	nop
	}
}
   15286:	3720      	adds	r7, #32
   15288:	46bd      	mov	sp, r7
   1528a:	bd80      	pop	{r7, pc}
   1528c:	0002ce10 	.word	0x0002ce10
   15290:	40005000 	.word	0x40005000
   15294:	0002ce11 	.word	0x0002ce11

00015298 <z_nrf_clock_control_lf_on>:

void z_nrf_clock_control_lf_on(enum nrf_lfclk_start_mode start_mode)
{
   15298:	b580      	push	{r7, lr}
   1529a:	b084      	sub	sp, #16
   1529c:	af00      	add	r7, sp, #0
   1529e:	4603      	mov	r3, r0
   152a0:	71fb      	strb	r3, [r7, #7]
	static atomic_t on;
	static struct onoff_client cli;

	if (atomic_set(&on, 1) == 0) {
   152a2:	2101      	movs	r1, #1
   152a4:	481f      	ldr	r0, [pc, #124]	; (15324 <z_nrf_clock_control_lf_on+0x8c>)
   152a6:	f00e fb2f 	bl	23908 <atomic_set>
   152aa:	4603      	mov	r3, r0
   152ac:	2b00      	cmp	r3, #0
   152ae:	d11b      	bne.n	152e8 <z_nrf_clock_control_lf_on+0x50>
		int err;
		struct onoff_manager *mgr =
				get_onoff_manager(CLOCK_DEVICE,
   152b0:	2101      	movs	r1, #1
   152b2:	481d      	ldr	r0, [pc, #116]	; (15328 <z_nrf_clock_control_lf_on+0x90>)
   152b4:	f00e fd9d 	bl	23df2 <get_onoff_manager>
   152b8:	60f8      	str	r0, [r7, #12]
						  CLOCK_CONTROL_NRF_TYPE_LFCLK);

		sys_notify_init_spinwait(&cli.notify);
   152ba:	481c      	ldr	r0, [pc, #112]	; (1532c <z_nrf_clock_control_lf_on+0x94>)
   152bc:	f7ff fcea 	bl	14c94 <sys_notify_init_spinwait>
		err = onoff_request(mgr, &cli);
   152c0:	491b      	ldr	r1, [pc, #108]	; (15330 <z_nrf_clock_control_lf_on+0x98>)
   152c2:	68f8      	ldr	r0, [r7, #12]
   152c4:	f7fb fefc 	bl	110c0 <onoff_request>
   152c8:	60b8      	str	r0, [r7, #8]
		__ASSERT_NO_MSG(err >= 0);
   152ca:	68bb      	ldr	r3, [r7, #8]
   152cc:	2b00      	cmp	r3, #0
   152ce:	da0b      	bge.n	152e8 <z_nrf_clock_control_lf_on+0x50>
   152d0:	f240 2326 	movw	r3, #550	; 0x226
   152d4:	4a17      	ldr	r2, [pc, #92]	; (15334 <z_nrf_clock_control_lf_on+0x9c>)
   152d6:	4918      	ldr	r1, [pc, #96]	; (15338 <z_nrf_clock_control_lf_on+0xa0>)
   152d8:	4818      	ldr	r0, [pc, #96]	; (1533c <z_nrf_clock_control_lf_on+0xa4>)
   152da:	f00b fec5 	bl	21068 <printk>
   152de:	f240 2126 	movw	r1, #550	; 0x226
   152e2:	4814      	ldr	r0, [pc, #80]	; (15334 <z_nrf_clock_control_lf_on+0x9c>)
   152e4:	f00c ff6d 	bl	221c2 <assert_post_action>
	/* In case of simulated board leave immediately. */
	if (IS_ENABLED(CONFIG_SOC_SERIES_BSIM_NRFXX)) {
		return;
	}

	switch (start_mode) {
   152e8:	79fb      	ldrb	r3, [r7, #7]
   152ea:	2b00      	cmp	r3, #0
   152ec:	d016      	beq.n	1531c <z_nrf_clock_control_lf_on+0x84>
   152ee:	2b00      	cmp	r3, #0
   152f0:	db07      	blt.n	15302 <z_nrf_clock_control_lf_on+0x6a>
   152f2:	3b01      	subs	r3, #1
   152f4:	2b01      	cmp	r3, #1
   152f6:	d804      	bhi.n	15302 <z_nrf_clock_control_lf_on+0x6a>
	case CLOCK_CONTROL_NRF_LF_START_AVAILABLE:
	case CLOCK_CONTROL_NRF_LF_START_STABLE:
		lfclk_spinwait(start_mode);
   152f8:	79fb      	ldrb	r3, [r7, #7]
   152fa:	4618      	mov	r0, r3
   152fc:	f7ff ff2e 	bl	1515c <lfclk_spinwait>
		break;
   15300:	e00d      	b.n	1531e <z_nrf_clock_control_lf_on+0x86>

	case CLOCK_CONTROL_NRF_LF_START_NOWAIT:
		break;

	default:
		__ASSERT_NO_MSG(false);
   15302:	f44f 730e 	mov.w	r3, #568	; 0x238
   15306:	4a0b      	ldr	r2, [pc, #44]	; (15334 <z_nrf_clock_control_lf_on+0x9c>)
   15308:	490d      	ldr	r1, [pc, #52]	; (15340 <z_nrf_clock_control_lf_on+0xa8>)
   1530a:	480c      	ldr	r0, [pc, #48]	; (1533c <z_nrf_clock_control_lf_on+0xa4>)
   1530c:	f00b feac 	bl	21068 <printk>
   15310:	f44f 710e 	mov.w	r1, #568	; 0x238
   15314:	4807      	ldr	r0, [pc, #28]	; (15334 <z_nrf_clock_control_lf_on+0x9c>)
   15316:	f00c ff54 	bl	221c2 <assert_post_action>
   1531a:	e000      	b.n	1531e <z_nrf_clock_control_lf_on+0x86>
		break;
   1531c:	bf00      	nop
	}
}
   1531e:	3710      	adds	r7, #16
   15320:	46bd      	mov	sp, r7
   15322:	bd80      	pop	{r7, pc}
   15324:	20014cb8 	.word	0x20014cb8
   15328:	000290d4 	.word	0x000290d4
   1532c:	20014cc0 	.word	0x20014cc0
   15330:	20014cbc 	.word	0x20014cbc
   15334:	0002a1b4 	.word	0x0002a1b4
   15338:	0002a230 	.word	0x0002a230
   1533c:	0002a14c 	.word	0x0002a14c
   15340:	0002a1a0 	.word	0x0002a1a0

00015344 <clock_event_handler>:

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   15344:	b580      	push	{r7, lr}
   15346:	b084      	sub	sp, #16
   15348:	af00      	add	r7, sp, #0
   1534a:	4603      	mov	r3, r0
   1534c:	71fb      	strb	r3, [r7, #7]
	const struct device *dev = CLOCK_DEVICE;
   1534e:	4b20      	ldr	r3, [pc, #128]	; (153d0 <clock_event_handler+0x8c>)
   15350:	60fb      	str	r3, [r7, #12]

	switch (event) {
   15352:	79fb      	ldrb	r3, [r7, #7]
   15354:	2b03      	cmp	r3, #3
   15356:	d01b      	beq.n	15390 <clock_event_handler+0x4c>
   15358:	2b03      	cmp	r3, #3
   1535a:	dc26      	bgt.n	153aa <clock_event_handler+0x66>
   1535c:	2b00      	cmp	r3, #0
   1535e:	d002      	beq.n	15366 <clock_event_handler+0x22>
   15360:	2b01      	cmp	r3, #1
   15362:	d010      	beq.n	15386 <clock_event_handler+0x42>
   15364:	e021      	b.n	153aa <clock_event_handler+0x66>
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   15366:	2100      	movs	r1, #0
   15368:	68f8      	ldr	r0, [r7, #12]
   1536a:	f00e fd17 	bl	23d9c <get_sub_data>
   1536e:	60b8      	str	r0, [r7, #8]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   15370:	68bb      	ldr	r3, [r7, #8]
   15372:	689b      	ldr	r3, [r3, #8]
   15374:	f003 0307 	and.w	r3, r3, #7
   15378:	2b00      	cmp	r3, #0
   1537a:	d123      	bne.n	153c4 <clock_event_handler+0x80>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1537c:	2100      	movs	r1, #0
   1537e:	68f8      	ldr	r0, [r7, #12]
   15380:	f7ff fd50 	bl	14e24 <clkstarted_handle>
		}

		break;
   15384:	e01e      	b.n	153c4 <clock_event_handler+0x80>
	case NRFX_CLOCK_EVT_LFCLK_STARTED:
		if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION) &&
		    !IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_FORCE_ALT)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   15386:	2101      	movs	r1, #1
   15388:	68f8      	ldr	r0, [r7, #12]
   1538a:	f7ff fd4b 	bl	14e24 <clkstarted_handle>
		break;
   1538e:	e01a      	b.n	153c6 <clock_event_handler+0x82>
		if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION) &&
		    !IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_FORCE_ALT)) {
			z_nrf_clock_calibration_done_handler();
		} else {
			/* Should not happen when calibration is disabled. */
			__ASSERT_NO_MSG(false);
   15390:	f240 2366 	movw	r3, #614	; 0x266
   15394:	4a0f      	ldr	r2, [pc, #60]	; (153d4 <clock_event_handler+0x90>)
   15396:	4910      	ldr	r1, [pc, #64]	; (153d8 <clock_event_handler+0x94>)
   15398:	4810      	ldr	r0, [pc, #64]	; (153dc <clock_event_handler+0x98>)
   1539a:	f00b fe65 	bl	21068 <printk>
   1539e:	f240 2166 	movw	r1, #614	; 0x266
   153a2:	480c      	ldr	r0, [pc, #48]	; (153d4 <clock_event_handler+0x90>)
   153a4:	f00c ff0d 	bl	221c2 <assert_post_action>
		}
		break;
   153a8:	e00d      	b.n	153c6 <clock_event_handler+0x82>
	default:
		__ASSERT_NO_MSG(0);
   153aa:	f240 236a 	movw	r3, #618	; 0x26a
   153ae:	4a09      	ldr	r2, [pc, #36]	; (153d4 <clock_event_handler+0x90>)
   153b0:	4909      	ldr	r1, [pc, #36]	; (153d8 <clock_event_handler+0x94>)
   153b2:	480a      	ldr	r0, [pc, #40]	; (153dc <clock_event_handler+0x98>)
   153b4:	f00b fe58 	bl	21068 <printk>
   153b8:	f240 216a 	movw	r1, #618	; 0x26a
   153bc:	4805      	ldr	r0, [pc, #20]	; (153d4 <clock_event_handler+0x90>)
   153be:	f00c ff00 	bl	221c2 <assert_post_action>
		break;
   153c2:	e000      	b.n	153c6 <clock_event_handler+0x82>
		break;
   153c4:	bf00      	nop
	}
}
   153c6:	bf00      	nop
   153c8:	3710      	adds	r7, #16
   153ca:	46bd      	mov	sp, r7
   153cc:	bd80      	pop	{r7, pc}
   153ce:	bf00      	nop
   153d0:	000290d4 	.word	0x000290d4
   153d4:	0002a1b4 	.word	0x0002a1b4
   153d8:	0002a1a0 	.word	0x0002a1a0
   153dc:	0002a14c 	.word	0x0002a14c

000153e0 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   153e0:	b580      	push	{r7, lr}
   153e2:	b086      	sub	sp, #24
   153e4:	af00      	add	r7, sp, #0
   153e6:	6078      	str	r0, [r7, #4]
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   153e8:	2200      	movs	r2, #0
   153ea:	2101      	movs	r1, #1
   153ec:	2005      	movs	r0, #5
   153ee:	f000 fc5b 	bl	15ca8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   153f2:	2005      	movs	r0, #5
   153f4:	f00e ff67 	bl	242c6 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   153f8:	481a      	ldr	r0, [pc, #104]	; (15464 <clk_init+0x84>)
   153fa:	f004 fbc1 	bl	19b80 <nrfx_clock_init>
   153fe:	6138      	str	r0, [r7, #16]
	if (nrfx_err != NRFX_SUCCESS) {
   15400:	693b      	ldr	r3, [r7, #16]
   15402:	4a19      	ldr	r2, [pc, #100]	; (15468 <clk_init+0x88>)
   15404:	4293      	cmp	r3, r2
   15406:	d002      	beq.n	1540e <clk_init+0x2e>
		return -EIO;
   15408:	f06f 0304 	mvn.w	r3, #4
   1540c:	e026      	b.n	1545c <clk_init+0x7c>
	}

	hfclkaudio_init();
   1540e:	f00e fe26 	bl	2405e <hfclkaudio_init>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   15412:	f004 fc2d 	bl	19c70 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   15416:	2300      	movs	r3, #0
   15418:	75fb      	strb	r3, [r7, #23]
   1541a:	e01b      	b.n	15454 <clk_init+0x74>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   1541c:	7dfb      	ldrb	r3, [r7, #23]
   1541e:	4619      	mov	r1, r3
   15420:	6878      	ldr	r0, [r7, #4]
   15422:	f00e fcbb 	bl	23d9c <get_sub_data>
   15426:	60f8      	str	r0, [r7, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   15428:	7dfb      	ldrb	r3, [r7, #23]
   1542a:	4619      	mov	r1, r3
   1542c:	6878      	ldr	r0, [r7, #4]
   1542e:	f00e fce0 	bl	23df2 <get_onoff_manager>
   15432:	4603      	mov	r3, r0
   15434:	490d      	ldr	r1, [pc, #52]	; (1546c <clk_init+0x8c>)
   15436:	4618      	mov	r0, r3
   15438:	f00b ff87 	bl	2134a <onoff_manager_init>
   1543c:	60b8      	str	r0, [r7, #8]
					 &transitions);
		if (err < 0) {
   1543e:	68bb      	ldr	r3, [r7, #8]
   15440:	2b00      	cmp	r3, #0
   15442:	da01      	bge.n	15448 <clk_init+0x68>
			return err;
   15444:	68bb      	ldr	r3, [r7, #8]
   15446:	e009      	b.n	1545c <clk_init+0x7c>
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   15448:	68fb      	ldr	r3, [r7, #12]
   1544a:	2201      	movs	r2, #1
   1544c:	609a      	str	r2, [r3, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1544e:	7dfb      	ldrb	r3, [r7, #23]
   15450:	3301      	adds	r3, #1
   15452:	75fb      	strb	r3, [r7, #23]
	for (enum clock_control_nrf_type i = 0;
   15454:	7dfb      	ldrb	r3, [r7, #23]
   15456:	2b01      	cmp	r3, #1
   15458:	d9e0      	bls.n	1541c <clk_init+0x3c>
	}

	return 0;
   1545a:	2300      	movs	r3, #0
}
   1545c:	4618      	mov	r0, r3
   1545e:	3718      	adds	r7, #24
   15460:	46bd      	mov	sp, r7
   15462:	bd80      	pop	{r7, pc}
   15464:	00015345 	.word	0x00015345
   15468:	0bad0000 	.word	0x0bad0000
   1546c:	0002cb74 	.word	0x0002cb74

00015470 <sys_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
   15470:	b580      	push	{r7, lr}
   15472:	b082      	sub	sp, #8
   15474:	af00      	add	r7, sp, #0
   15476:	6078      	str	r0, [r7, #4]
	__ASSERT_NO_MSG(false);
   15478:	2317      	movs	r3, #23
   1547a:	4a06      	ldr	r2, [pc, #24]	; (15494 <sys_clock_isr+0x24>)
   1547c:	4906      	ldr	r1, [pc, #24]	; (15498 <sys_clock_isr+0x28>)
   1547e:	4807      	ldr	r0, [pc, #28]	; (1549c <sys_clock_isr+0x2c>)
   15480:	f00b fdf2 	bl	21068 <printk>
   15484:	2117      	movs	r1, #23
   15486:	4803      	ldr	r0, [pc, #12]	; (15494 <sys_clock_isr+0x24>)
   15488:	f00c fe9b 	bl	221c2 <assert_post_action>
}
   1548c:	bf00      	nop
   1548e:	3708      	adds	r7, #8
   15490:	46bd      	mov	sp, r7
   15492:	bd80      	pop	{r7, pc}
   15494:	0002a2ec 	.word	0x0002a2ec
   15498:	0002a320 	.word	0x0002a320
   1549c:	0002a324 	.word	0x0002a324

000154a0 <__NVIC_ClearPendingIRQ>:
{
   154a0:	b480      	push	{r7}
   154a2:	b083      	sub	sp, #12
   154a4:	af00      	add	r7, sp, #0
   154a6:	4603      	mov	r3, r0
   154a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   154aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
   154ae:	2b00      	cmp	r3, #0
   154b0:	db0c      	blt.n	154cc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   154b2:	79fb      	ldrb	r3, [r7, #7]
   154b4:	f003 021f 	and.w	r2, r3, #31
   154b8:	4907      	ldr	r1, [pc, #28]	; (154d8 <__NVIC_ClearPendingIRQ+0x38>)
   154ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
   154be:	095b      	lsrs	r3, r3, #5
   154c0:	2001      	movs	r0, #1
   154c2:	fa00 f202 	lsl.w	r2, r0, r2
   154c6:	3360      	adds	r3, #96	; 0x60
   154c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   154cc:	bf00      	nop
   154ce:	370c      	adds	r7, #12
   154d0:	46bd      	mov	sp, r7
   154d2:	bc80      	pop	{r7}
   154d4:	4770      	bx	lr
   154d6:	bf00      	nop
   154d8:	e000e100 	.word	0xe000e100

000154dc <nrf_rtc_prescaler_set>:
{
     return p_reg->COUNTER;
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
   154dc:	b580      	push	{r7, lr}
   154de:	b082      	sub	sp, #8
   154e0:	af00      	add	r7, sp, #0
   154e2:	6078      	str	r0, [r7, #4]
   154e4:	6039      	str	r1, [r7, #0]
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
   154e6:	683b      	ldr	r3, [r7, #0]
   154e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   154ec:	d30b      	bcc.n	15506 <nrf_rtc_prescaler_set+0x2a>
   154ee:	f44f 73bc 	mov.w	r3, #376	; 0x178
   154f2:	4a09      	ldr	r2, [pc, #36]	; (15518 <nrf_rtc_prescaler_set+0x3c>)
   154f4:	4909      	ldr	r1, [pc, #36]	; (1551c <nrf_rtc_prescaler_set+0x40>)
   154f6:	480a      	ldr	r0, [pc, #40]	; (15520 <nrf_rtc_prescaler_set+0x44>)
   154f8:	f00b fdb6 	bl	21068 <printk>
   154fc:	f44f 71bc 	mov.w	r1, #376	; 0x178
   15500:	4805      	ldr	r0, [pc, #20]	; (15518 <nrf_rtc_prescaler_set+0x3c>)
   15502:	f00c fe5e 	bl	221c2 <assert_post_action>
    p_reg->PRESCALER = val;
   15506:	687b      	ldr	r3, [r7, #4]
   15508:	683a      	ldr	r2, [r7, #0]
   1550a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
   1550e:	bf00      	nop
   15510:	3708      	adds	r7, #8
   15512:	46bd      	mov	sp, r7
   15514:	bd80      	pop	{r7, pc}
   15516:	bf00      	nop
   15518:	0002a350 	.word	0x0002a350
   1551c:	0002a384 	.word	0x0002a384
   15520:	0002a3ac 	.word	0x0002a3ac

00015524 <set_comparator>:
{
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
   15524:	b580      	push	{r7, lr}
   15526:	b082      	sub	sp, #8
   15528:	af00      	add	r7, sp, #0
   1552a:	6078      	str	r0, [r7, #4]
   1552c:	6039      	str	r1, [r7, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1552e:	6879      	ldr	r1, [r7, #4]
   15530:	683b      	ldr	r3, [r7, #0]
   15532:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   15536:	461a      	mov	r2, r3
   15538:	4803      	ldr	r0, [pc, #12]	; (15548 <set_comparator+0x24>)
   1553a:	f00e fdba 	bl	240b2 <nrf_rtc_cc_set>
}
   1553e:	bf00      	nop
   15540:	3708      	adds	r7, #8
   15542:	46bd      	mov	sp, r7
   15544:	bd80      	pop	{r7, pc}
   15546:	bf00      	nop
   15548:	40015000 	.word	0x40015000

0001554c <get_comparator>:

static uint32_t get_comparator(int32_t chan)
{
   1554c:	b580      	push	{r7, lr}
   1554e:	b082      	sub	sp, #8
   15550:	af00      	add	r7, sp, #0
   15552:	6078      	str	r0, [r7, #4]
	return nrf_rtc_cc_get(RTC, chan);
   15554:	687b      	ldr	r3, [r7, #4]
   15556:	4619      	mov	r1, r3
   15558:	4803      	ldr	r0, [pc, #12]	; (15568 <get_comparator+0x1c>)
   1555a:	f00e fdbc 	bl	240d6 <nrf_rtc_cc_get>
   1555e:	4603      	mov	r3, r0
}
   15560:	4618      	mov	r0, r3
   15562:	3708      	adds	r7, #8
   15564:	46bd      	mov	sp, r7
   15566:	bd80      	pop	{r7, pc}
   15568:	40015000 	.word	0x40015000

0001556c <event_clear>:

static void event_clear(int32_t chan)
{
   1556c:	b580      	push	{r7, lr}
   1556e:	b082      	sub	sp, #8
   15570:	af00      	add	r7, sp, #0
   15572:	6078      	str	r0, [r7, #4]
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   15574:	687b      	ldr	r3, [r7, #4]
   15576:	b29b      	uxth	r3, r3
   15578:	3350      	adds	r3, #80	; 0x50
   1557a:	b29b      	uxth	r3, r3
   1557c:	009b      	lsls	r3, r3, #2
   1557e:	b29b      	uxth	r3, r3
   15580:	4619      	mov	r1, r3
   15582:	4803      	ldr	r0, [pc, #12]	; (15590 <event_clear+0x24>)
   15584:	f00e fde8 	bl	24158 <nrf_rtc_event_clear>
}
   15588:	bf00      	nop
   1558a:	3708      	adds	r7, #8
   1558c:	46bd      	mov	sp, r7
   1558e:	bd80      	pop	{r7, pc}
   15590:	40015000 	.word	0x40015000

00015594 <event_enable>:

static void event_enable(int32_t chan)
{
   15594:	b580      	push	{r7, lr}
   15596:	b082      	sub	sp, #8
   15598:	af00      	add	r7, sp, #0
   1559a:	6078      	str	r0, [r7, #4]
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1559c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   155a0:	687b      	ldr	r3, [r7, #4]
   155a2:	fa02 f303 	lsl.w	r3, r2, r3
   155a6:	4619      	mov	r1, r3
   155a8:	4803      	ldr	r0, [pc, #12]	; (155b8 <event_enable+0x24>)
   155aa:	f00e fe07 	bl	241bc <nrf_rtc_event_enable>
}
   155ae:	bf00      	nop
   155b0:	3708      	adds	r7, #8
   155b2:	46bd      	mov	sp, r7
   155b4:	bd80      	pop	{r7, pc}
   155b6:	bf00      	nop
   155b8:	40015000 	.word	0x40015000

000155bc <event_disable>:

static void event_disable(int32_t chan)
{
   155bc:	b580      	push	{r7, lr}
   155be:	b082      	sub	sp, #8
   155c0:	af00      	add	r7, sp, #0
   155c2:	6078      	str	r0, [r7, #4]
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   155c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   155c8:	687b      	ldr	r3, [r7, #4]
   155ca:	fa02 f303 	lsl.w	r3, r2, r3
   155ce:	4619      	mov	r1, r3
   155d0:	4803      	ldr	r0, [pc, #12]	; (155e0 <event_disable+0x24>)
   155d2:	f00e fe01 	bl	241d8 <nrf_rtc_event_disable>
}
   155d6:	bf00      	nop
   155d8:	3708      	adds	r7, #8
   155da:	46bd      	mov	sp, r7
   155dc:	bd80      	pop	{r7, pc}
   155de:	bf00      	nop
   155e0:	40015000 	.word	0x40015000

000155e4 <counter>:

static uint32_t counter(void)
{
   155e4:	b580      	push	{r7, lr}
   155e6:	af00      	add	r7, sp, #0
	return nrf_rtc_counter_get(RTC);
   155e8:	4802      	ldr	r0, [pc, #8]	; (155f4 <counter+0x10>)
   155ea:	f00e fdca 	bl	24182 <nrf_rtc_counter_get>
   155ee:	4603      	mov	r3, r0
}
   155f0:	4618      	mov	r0, r3
   155f2:	bd80      	pop	{r7, pc}
   155f4:	40015000 	.word	0x40015000

000155f8 <compare_set>:
}

static void compare_set(int32_t chan, uint32_t cc_value,
			z_nrf_rtc_timer_compare_handler_t handler,
			void *user_data)
{
   155f8:	b580      	push	{r7, lr}
   155fa:	b084      	sub	sp, #16
   155fc:	af00      	add	r7, sp, #0
   155fe:	60f8      	str	r0, [r7, #12]
   15600:	60b9      	str	r1, [r7, #8]
   15602:	607a      	str	r2, [r7, #4]
   15604:	603b      	str	r3, [r7, #0]
	cc_data[chan].callback = handler;
   15606:	4909      	ldr	r1, [pc, #36]	; (1562c <compare_set+0x34>)
   15608:	68fb      	ldr	r3, [r7, #12]
   1560a:	687a      	ldr	r2, [r7, #4]
   1560c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	cc_data[chan].user_context = user_data;
   15610:	4a06      	ldr	r2, [pc, #24]	; (1562c <compare_set+0x34>)
   15612:	68fb      	ldr	r3, [r7, #12]
   15614:	00db      	lsls	r3, r3, #3
   15616:	4413      	add	r3, r2
   15618:	683a      	ldr	r2, [r7, #0]
   1561a:	605a      	str	r2, [r3, #4]

	set_absolute_alarm(chan, cc_value);
   1561c:	68b9      	ldr	r1, [r7, #8]
   1561e:	68f8      	ldr	r0, [r7, #12]
   15620:	f00e fdf7 	bl	24212 <set_absolute_alarm>
}
   15624:	bf00      	nop
   15626:	3710      	adds	r7, #16
   15628:	46bd      	mov	sp, r7
   1562a:	bd80      	pop	{r7, pc}
   1562c:	20014cd8 	.word	0x20014cd8

00015630 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
   15630:	b590      	push	{r4, r7, lr}
   15632:	b087      	sub	sp, #28
   15634:	af00      	add	r7, sp, #0
   15636:	60f8      	str	r0, [r7, #12]
   15638:	60b9      	str	r1, [r7, #8]
   1563a:	607a      	str	r2, [r7, #4]
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   1563c:	4b16      	ldr	r3, [pc, #88]	; (15698 <sys_clock_timeout_handler+0x68>)
   1563e:	681b      	ldr	r3, [r3, #0]
   15640:	4619      	mov	r1, r3
   15642:	68b8      	ldr	r0, [r7, #8]
   15644:	f00e fdd6 	bl	241f4 <counter_sub>
   15648:	4604      	mov	r4, r0
   1564a:	f00e fd1f 	bl	2408c <sys_clock_hw_cycles_per_sec>
   1564e:	4603      	mov	r3, r0
   15650:	2b00      	cmp	r3, #0
   15652:	da02      	bge.n	1565a <sys_clock_timeout_handler+0x2a>
   15654:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
   15658:	337f      	adds	r3, #127	; 0x7f
   1565a:	13db      	asrs	r3, r3, #15
   1565c:	fbb4 f3f3 	udiv	r3, r4, r3
   15660:	617b      	str	r3, [r7, #20]

	last_count += dticks * CYC_PER_TICK;
   15662:	f00e fd13 	bl	2408c <sys_clock_hw_cycles_per_sec>
   15666:	4603      	mov	r3, r0
   15668:	2b00      	cmp	r3, #0
   1566a:	da02      	bge.n	15672 <sys_clock_timeout_handler+0x42>
   1566c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
   15670:	337f      	adds	r3, #127	; 0x7f
   15672:	13db      	asrs	r3, r3, #15
   15674:	461a      	mov	r2, r3
   15676:	697b      	ldr	r3, [r7, #20]
   15678:	fb03 f202 	mul.w	r2, r3, r2
   1567c:	4b06      	ldr	r3, [pc, #24]	; (15698 <sys_clock_timeout_handler+0x68>)
   1567e:	681b      	ldr	r3, [r3, #0]
   15680:	4413      	add	r3, r2
   15682:	4a05      	ldr	r2, [pc, #20]	; (15698 <sys_clock_timeout_handler+0x68>)
   15684:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   15686:	697b      	ldr	r3, [r7, #20]
   15688:	4618      	mov	r0, r3
   1568a:	f00b f837 	bl	206fc <sys_clock_announce>
						dticks : (dticks > 0));
}
   1568e:	bf00      	nop
   15690:	371c      	adds	r7, #28
   15692:	46bd      	mov	sp, r7
   15694:	bd90      	pop	{r4, r7, pc}
   15696:	bf00      	nop
   15698:	20014cd4 	.word	0x20014cd4

0001569c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   1569c:	b580      	push	{r7, lr}
   1569e:	b086      	sub	sp, #24
   156a0:	af00      	add	r7, sp, #0
   156a2:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   156a4:	2300      	movs	r3, #0
   156a6:	617b      	str	r3, [r7, #20]
   156a8:	e048      	b.n	1573c <rtc_nrf_isr+0xa0>
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   156aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   156ae:	697b      	ldr	r3, [r7, #20]
   156b0:	fa02 f303 	lsl.w	r3, r2, r3
   156b4:	4619      	mov	r1, r3
   156b6:	4825      	ldr	r0, [pc, #148]	; (1574c <rtc_nrf_isr+0xb0>)
   156b8:	f00e fd2b 	bl	24112 <nrf_rtc_int_enable_check>
   156bc:	4603      	mov	r3, r0
   156be:	2b00      	cmp	r3, #0
   156c0:	d039      	beq.n	15736 <rtc_nrf_isr+0x9a>
		    nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan))) {
   156c2:	697b      	ldr	r3, [r7, #20]
   156c4:	b29b      	uxth	r3, r3
   156c6:	3350      	adds	r3, #80	; 0x50
   156c8:	b29b      	uxth	r3, r3
   156ca:	009b      	lsls	r3, r3, #2
   156cc:	b29b      	uxth	r3, r3
   156ce:	4619      	mov	r1, r3
   156d0:	481e      	ldr	r0, [pc, #120]	; (1574c <rtc_nrf_isr+0xb0>)
   156d2:	f00e fd2d 	bl	24130 <nrf_rtc_event_check>
   156d6:	4603      	mov	r3, r0
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   156d8:	2b00      	cmp	r3, #0
   156da:	d02c      	beq.n	15736 <rtc_nrf_isr+0x9a>
			uint32_t cc_val;
			uint32_t now;
			z_nrf_rtc_timer_compare_handler_t handler;

			event_clear(chan);
   156dc:	6978      	ldr	r0, [r7, #20]
   156de:	f7ff ff45 	bl	1556c <event_clear>
			event_disable(chan);
   156e2:	6978      	ldr	r0, [r7, #20]
   156e4:	f7ff ff6a 	bl	155bc <event_disable>
			cc_val = get_comparator(chan);
   156e8:	6978      	ldr	r0, [r7, #20]
   156ea:	f7ff ff2f 	bl	1554c <get_comparator>
   156ee:	6138      	str	r0, [r7, #16]
			now = counter();
   156f0:	f7ff ff78 	bl	155e4 <counter>
   156f4:	60f8      	str	r0, [r7, #12]
			/* Higher priority interrupt may already changed cc_val
			 * which now points to the future. In that case return
			 * current counter value. It is less precise than
			 * returning exact CC value but this one is already lost.
			 */
			if (counter_sub(now, cc_val) > COUNTER_HALF_SPAN) {
   156f6:	6939      	ldr	r1, [r7, #16]
   156f8:	68f8      	ldr	r0, [r7, #12]
   156fa:	f00e fd7b 	bl	241f4 <counter_sub>
   156fe:	4603      	mov	r3, r0
   15700:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   15704:	d901      	bls.n	1570a <rtc_nrf_isr+0x6e>
				cc_val = now;
   15706:	68fb      	ldr	r3, [r7, #12]
   15708:	613b      	str	r3, [r7, #16]
			}

			handler = cc_data[chan].callback;
   1570a:	4a11      	ldr	r2, [pc, #68]	; (15750 <rtc_nrf_isr+0xb4>)
   1570c:	697b      	ldr	r3, [r7, #20]
   1570e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   15712:	60bb      	str	r3, [r7, #8]
			cc_data[chan].callback = NULL;
   15714:	4a0e      	ldr	r2, [pc, #56]	; (15750 <rtc_nrf_isr+0xb4>)
   15716:	697b      	ldr	r3, [r7, #20]
   15718:	2100      	movs	r1, #0
   1571a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
			if (handler) {
   1571e:	68bb      	ldr	r3, [r7, #8]
   15720:	2b00      	cmp	r3, #0
   15722:	d008      	beq.n	15736 <rtc_nrf_isr+0x9a>
				handler(chan, cc_val,
   15724:	4a0a      	ldr	r2, [pc, #40]	; (15750 <rtc_nrf_isr+0xb4>)
   15726:	697b      	ldr	r3, [r7, #20]
   15728:	00db      	lsls	r3, r3, #3
   1572a:	4413      	add	r3, r2
   1572c:	685a      	ldr	r2, [r3, #4]
   1572e:	68bb      	ldr	r3, [r7, #8]
   15730:	6939      	ldr	r1, [r7, #16]
   15732:	6978      	ldr	r0, [r7, #20]
   15734:	4798      	blx	r3
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   15736:	697b      	ldr	r3, [r7, #20]
   15738:	3301      	adds	r3, #1
   1573a:	617b      	str	r3, [r7, #20]
   1573c:	697b      	ldr	r3, [r7, #20]
   1573e:	2b00      	cmp	r3, #0
   15740:	ddb3      	ble.n	156aa <rtc_nrf_isr+0xe>
					cc_data[chan].user_context);
			}
		}
	}
}
   15742:	bf00      	nop
   15744:	bf00      	nop
   15746:	3718      	adds	r7, #24
   15748:	46bd      	mov	sp, r7
   1574a:	bd80      	pop	{r7, pc}
   1574c:	40015000 	.word	0x40015000
   15750:	20014cd8 	.word	0x20014cd8

00015754 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   15754:	b580      	push	{r7, lr}
   15756:	b084      	sub	sp, #16
   15758:	af00      	add	r7, sp, #0
   1575a:	6078      	str	r0, [r7, #4]
			(IS_ENABLED(CONFIG_SYSTEM_CLOCK_WAIT_FOR_AVAILABILITY) ?
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
   1575c:	2100      	movs	r1, #0
   1575e:	481a      	ldr	r0, [pc, #104]	; (157c8 <sys_clock_driver_init+0x74>)
   15760:	f7ff febc 	bl	154dc <nrf_rtc_prescaler_set>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   15764:	2300      	movs	r3, #0
   15766:	60fb      	str	r3, [r7, #12]
   15768:	e00b      	b.n	15782 <sys_clock_driver_init+0x2e>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1576a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1576e:	68fb      	ldr	r3, [r7, #12]
   15770:	fa02 f303 	lsl.w	r3, r2, r3
   15774:	4619      	mov	r1, r3
   15776:	4814      	ldr	r0, [pc, #80]	; (157c8 <sys_clock_driver_init+0x74>)
   15778:	f00e fcbd 	bl	240f6 <nrf_rtc_int_enable>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1577c:	68fb      	ldr	r3, [r7, #12]
   1577e:	3301      	adds	r3, #1
   15780:	60fb      	str	r3, [r7, #12]
   15782:	68fb      	ldr	r3, [r7, #12]
   15784:	2b00      	cmp	r3, #0
   15786:	ddf0      	ble.n	1576a <sys_clock_driver_init+0x16>
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);
   15788:	2015      	movs	r0, #21
   1578a:	f7ff fe89 	bl	154a0 <__NVIC_ClearPendingIRQ>

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1578e:	2200      	movs	r2, #0
   15790:	2101      	movs	r1, #1
   15792:	2015      	movs	r0, #21
   15794:	f000 fa88 	bl	15ca8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   15798:	2015      	movs	r0, #21
   1579a:	f00e fd94 	bl	242c6 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
   1579e:	2108      	movs	r1, #8
   157a0:	4809      	ldr	r0, [pc, #36]	; (157c8 <sys_clock_driver_init+0x74>)
   157a2:	f00e fcfa 	bl	2419a <nrf_rtc_task_trigger>
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);
   157a6:	2100      	movs	r1, #0
   157a8:	4807      	ldr	r0, [pc, #28]	; (157c8 <sys_clock_driver_init+0x74>)
   157aa:	f00e fcf6 	bl	2419a <nrf_rtc_task_trigger>

	int_mask = BIT_MASK(CHAN_COUNT);
   157ae:	4b07      	ldr	r3, [pc, #28]	; (157cc <sys_clock_driver_init+0x78>)
   157b0:	2201      	movs	r2, #1
   157b2:	601a      	str	r2, [r3, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   157b4:	4b06      	ldr	r3, [pc, #24]	; (157d0 <sys_clock_driver_init+0x7c>)
   157b6:	781b      	ldrb	r3, [r3, #0]
   157b8:	4618      	mov	r0, r3
   157ba:	f7ff fd6d 	bl	15298 <z_nrf_clock_control_lf_on>

	return 0;
   157be:	2300      	movs	r3, #0
}
   157c0:	4618      	mov	r0, r3
   157c2:	3710      	adds	r7, #16
   157c4:	46bd      	mov	sp, r7
   157c6:	bd80      	pop	{r7, pc}
   157c8:	40015000 	.word	0x40015000
   157cc:	20014ce0 	.word	0x20014ce0
   157d0:	0002ce12 	.word	0x0002ce12

000157d4 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
   157d4:	b5b0      	push	{r4, r5, r7, lr}
   157d6:	b084      	sub	sp, #16
   157d8:	af00      	add	r7, sp, #0
   157da:	6078      	str	r0, [r7, #4]
   157dc:	460b      	mov	r3, r1
   157de:	70fb      	strb	r3, [r7, #3]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   157e0:	687b      	ldr	r3, [r7, #4]
   157e2:	f1b3 3fff 	cmp.w	r3, #4294967295
   157e6:	d116      	bne.n	15816 <sys_clock_set_timeout+0x42>
   157e8:	f00e fc50 	bl	2408c <sys_clock_hw_cycles_per_sec>
   157ec:	4603      	mov	r3, r0
   157ee:	2b00      	cmp	r3, #0
   157f0:	da02      	bge.n	157f8 <sys_clock_set_timeout+0x24>
   157f2:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
   157f6:	337f      	adds	r3, #127	; 0x7f
   157f8:	13db      	asrs	r3, r3, #15
   157fa:	f5c3 0400 	rsb	r4, r3, #8388608	; 0x800000
   157fe:	f00e fc45 	bl	2408c <sys_clock_hw_cycles_per_sec>
   15802:	4603      	mov	r3, r0
   15804:	2b00      	cmp	r3, #0
   15806:	da02      	bge.n	1580e <sys_clock_set_timeout+0x3a>
   15808:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
   1580c:	337f      	adds	r3, #127	; 0x7f
   1580e:	13db      	asrs	r3, r3, #15
   15810:	fbb4 f3f3 	udiv	r3, r4, r3
   15814:	e000      	b.n	15818 <sys_clock_set_timeout+0x44>
   15816:	687b      	ldr	r3, [r7, #4]
   15818:	607b      	str	r3, [r7, #4]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1581a:	687b      	ldr	r3, [r7, #4]
   1581c:	3b01      	subs	r3, #1
   1581e:	2b00      	cmp	r3, #0
   15820:	dd33      	ble.n	1588a <sys_clock_set_timeout+0xb6>
   15822:	687b      	ldr	r3, [r7, #4]
   15824:	1e5c      	subs	r4, r3, #1
   15826:	f00e fc31 	bl	2408c <sys_clock_hw_cycles_per_sec>
   1582a:	4603      	mov	r3, r0
   1582c:	2b00      	cmp	r3, #0
   1582e:	da02      	bge.n	15836 <sys_clock_set_timeout+0x62>
   15830:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
   15834:	337f      	adds	r3, #127	; 0x7f
   15836:	13db      	asrs	r3, r3, #15
   15838:	f5c3 0500 	rsb	r5, r3, #8388608	; 0x800000
   1583c:	f00e fc26 	bl	2408c <sys_clock_hw_cycles_per_sec>
   15840:	4603      	mov	r3, r0
   15842:	2b00      	cmp	r3, #0
   15844:	da02      	bge.n	1584c <sys_clock_set_timeout+0x78>
   15846:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
   1584a:	337f      	adds	r3, #127	; 0x7f
   1584c:	13db      	asrs	r3, r3, #15
   1584e:	fbb5 f3f3 	udiv	r3, r5, r3
   15852:	429c      	cmp	r4, r3
   15854:	da02      	bge.n	1585c <sys_clock_set_timeout+0x88>
   15856:	687b      	ldr	r3, [r7, #4]
   15858:	3b01      	subs	r3, #1
   1585a:	e017      	b.n	1588c <sys_clock_set_timeout+0xb8>
   1585c:	f00e fc16 	bl	2408c <sys_clock_hw_cycles_per_sec>
   15860:	4603      	mov	r3, r0
   15862:	2b00      	cmp	r3, #0
   15864:	da02      	bge.n	1586c <sys_clock_set_timeout+0x98>
   15866:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
   1586a:	337f      	adds	r3, #127	; 0x7f
   1586c:	13db      	asrs	r3, r3, #15
   1586e:	f5c3 0400 	rsb	r4, r3, #8388608	; 0x800000
   15872:	f00e fc0b 	bl	2408c <sys_clock_hw_cycles_per_sec>
   15876:	4603      	mov	r3, r0
   15878:	2b00      	cmp	r3, #0
   1587a:	da02      	bge.n	15882 <sys_clock_set_timeout+0xae>
   1587c:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
   15880:	337f      	adds	r3, #127	; 0x7f
   15882:	13db      	asrs	r3, r3, #15
   15884:	fbb4 f3f3 	udiv	r3, r4, r3
   15888:	e000      	b.n	1588c <sys_clock_set_timeout+0xb8>
   1588a:	2300      	movs	r3, #0
   1588c:	607b      	str	r3, [r7, #4]

	uint32_t unannounced = counter_sub(counter(), last_count);
   1588e:	f7ff fea9 	bl	155e4 <counter>
   15892:	4602      	mov	r2, r0
   15894:	4b4c      	ldr	r3, [pc, #304]	; (159c8 <sys_clock_set_timeout+0x1f4>)
   15896:	681b      	ldr	r3, [r3, #0]
   15898:	4619      	mov	r1, r3
   1589a:	4610      	mov	r0, r2
   1589c:	f00e fcaa 	bl	241f4 <counter_sub>
   158a0:	60b8      	str	r0, [r7, #8]
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   158a2:	68bb      	ldr	r3, [r7, #8]
   158a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   158a8:	d301      	bcc.n	158ae <sys_clock_set_timeout+0xda>
		ticks = 0;
   158aa:	2300      	movs	r3, #0
   158ac:	607b      	str	r3, [r7, #4]
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   158ae:	f00e fbed 	bl	2408c <sys_clock_hw_cycles_per_sec>
   158b2:	4603      	mov	r3, r0
   158b4:	2b00      	cmp	r3, #0
   158b6:	da02      	bge.n	158be <sys_clock_set_timeout+0xea>
   158b8:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
   158bc:	337f      	adds	r3, #127	; 0x7f
   158be:	13db      	asrs	r3, r3, #15
   158c0:	461a      	mov	r2, r3
   158c2:	687b      	ldr	r3, [r7, #4]
   158c4:	fb03 f302 	mul.w	r3, r3, r2
   158c8:	461a      	mov	r2, r3
   158ca:	68bb      	ldr	r3, [r7, #8]
   158cc:	4413      	add	r3, r2
   158ce:	3301      	adds	r3, #1
   158d0:	60fb      	str	r3, [r7, #12]
	cyc += (CYC_PER_TICK - 1);
   158d2:	f00e fbdb 	bl	2408c <sys_clock_hw_cycles_per_sec>
   158d6:	4603      	mov	r3, r0
   158d8:	2b00      	cmp	r3, #0
   158da:	da02      	bge.n	158e2 <sys_clock_set_timeout+0x10e>
   158dc:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
   158e0:	337f      	adds	r3, #127	; 0x7f
   158e2:	13db      	asrs	r3, r3, #15
   158e4:	3b01      	subs	r3, #1
   158e6:	461a      	mov	r2, r3
   158e8:	68fb      	ldr	r3, [r7, #12]
   158ea:	4413      	add	r3, r2
   158ec:	60fb      	str	r3, [r7, #12]
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;
   158ee:	f00e fbcd 	bl	2408c <sys_clock_hw_cycles_per_sec>
   158f2:	4603      	mov	r3, r0
   158f4:	2b00      	cmp	r3, #0
   158f6:	da02      	bge.n	158fe <sys_clock_set_timeout+0x12a>
   158f8:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
   158fc:	337f      	adds	r3, #127	; 0x7f
   158fe:	13db      	asrs	r3, r3, #15
   15900:	461a      	mov	r2, r3
   15902:	68fb      	ldr	r3, [r7, #12]
   15904:	fbb3 f4f2 	udiv	r4, r3, r2
   15908:	f00e fbc0 	bl	2408c <sys_clock_hw_cycles_per_sec>
   1590c:	4603      	mov	r3, r0
   1590e:	2b00      	cmp	r3, #0
   15910:	da02      	bge.n	15918 <sys_clock_set_timeout+0x144>
   15912:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
   15916:	337f      	adds	r3, #127	; 0x7f
   15918:	13db      	asrs	r3, r3, #15
   1591a:	fb03 f304 	mul.w	r3, r3, r4
   1591e:	60fb      	str	r3, [r7, #12]

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
   15920:	f00e fbb4 	bl	2408c <sys_clock_hw_cycles_per_sec>
   15924:	4603      	mov	r3, r0
   15926:	2b00      	cmp	r3, #0
   15928:	da02      	bge.n	15930 <sys_clock_set_timeout+0x15c>
   1592a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
   1592e:	337f      	adds	r3, #127	; 0x7f
   15930:	13db      	asrs	r3, r3, #15
   15932:	f5c3 0400 	rsb	r4, r3, #8388608	; 0x800000
   15936:	f00e fba9 	bl	2408c <sys_clock_hw_cycles_per_sec>
   1593a:	4603      	mov	r3, r0
   1593c:	2b00      	cmp	r3, #0
   1593e:	da02      	bge.n	15946 <sys_clock_set_timeout+0x172>
   15940:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
   15944:	337f      	adds	r3, #127	; 0x7f
   15946:	13db      	asrs	r3, r3, #15
   15948:	fbb4 f4f3 	udiv	r4, r4, r3
   1594c:	f00e fb9e 	bl	2408c <sys_clock_hw_cycles_per_sec>
   15950:	4603      	mov	r3, r0
   15952:	2b00      	cmp	r3, #0
   15954:	da02      	bge.n	1595c <sys_clock_set_timeout+0x188>
   15956:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
   1595a:	337f      	adds	r3, #127	; 0x7f
   1595c:	13db      	asrs	r3, r3, #15
   1595e:	fb03 f304 	mul.w	r3, r3, r4
   15962:	68fa      	ldr	r2, [r7, #12]
   15964:	429a      	cmp	r2, r3
   15966:	d921      	bls.n	159ac <sys_clock_set_timeout+0x1d8>
		cyc = MAX_CYCLES;
   15968:	f00e fb90 	bl	2408c <sys_clock_hw_cycles_per_sec>
   1596c:	4603      	mov	r3, r0
   1596e:	2b00      	cmp	r3, #0
   15970:	da02      	bge.n	15978 <sys_clock_set_timeout+0x1a4>
   15972:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
   15976:	337f      	adds	r3, #127	; 0x7f
   15978:	13db      	asrs	r3, r3, #15
   1597a:	f5c3 0400 	rsb	r4, r3, #8388608	; 0x800000
   1597e:	f00e fb85 	bl	2408c <sys_clock_hw_cycles_per_sec>
   15982:	4603      	mov	r3, r0
   15984:	2b00      	cmp	r3, #0
   15986:	da02      	bge.n	1598e <sys_clock_set_timeout+0x1ba>
   15988:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
   1598c:	337f      	adds	r3, #127	; 0x7f
   1598e:	13db      	asrs	r3, r3, #15
   15990:	fbb4 f4f3 	udiv	r4, r4, r3
   15994:	f00e fb7a 	bl	2408c <sys_clock_hw_cycles_per_sec>
   15998:	4603      	mov	r3, r0
   1599a:	2b00      	cmp	r3, #0
   1599c:	da02      	bge.n	159a4 <sys_clock_set_timeout+0x1d0>
   1599e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
   159a2:	337f      	adds	r3, #127	; 0x7f
   159a4:	13db      	asrs	r3, r3, #15
   159a6:	fb03 f304 	mul.w	r3, r3, r4
   159aa:	60fb      	str	r3, [r7, #12]
	}

	cyc += last_count;
   159ac:	4b06      	ldr	r3, [pc, #24]	; (159c8 <sys_clock_set_timeout+0x1f4>)
   159ae:	681b      	ldr	r3, [r3, #0]
   159b0:	68fa      	ldr	r2, [r7, #12]
   159b2:	4413      	add	r3, r2
   159b4:	60fb      	str	r3, [r7, #12]
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
   159b6:	2300      	movs	r3, #0
   159b8:	4a04      	ldr	r2, [pc, #16]	; (159cc <sys_clock_set_timeout+0x1f8>)
   159ba:	68f9      	ldr	r1, [r7, #12]
   159bc:	2000      	movs	r0, #0
   159be:	f7ff fe1b 	bl	155f8 <compare_set>
}
   159c2:	3710      	adds	r7, #16
   159c4:	46bd      	mov	sp, r7
   159c6:	bdb0      	pop	{r4, r5, r7, pc}
   159c8:	20014cd4 	.word	0x20014cd4
   159cc:	00015631 	.word	0x00015631

000159d0 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
   159d0:	b598      	push	{r3, r4, r7, lr}
   159d2:	af00      	add	r7, sp, #0
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   159d4:	f7ff fe06 	bl	155e4 <counter>
   159d8:	4602      	mov	r2, r0
   159da:	4b0a      	ldr	r3, [pc, #40]	; (15a04 <sys_clock_elapsed+0x34>)
   159dc:	681b      	ldr	r3, [r3, #0]
   159de:	4619      	mov	r1, r3
   159e0:	4610      	mov	r0, r2
   159e2:	f00e fc07 	bl	241f4 <counter_sub>
   159e6:	4604      	mov	r4, r0
   159e8:	f00e fb50 	bl	2408c <sys_clock_hw_cycles_per_sec>
   159ec:	4603      	mov	r3, r0
   159ee:	2b00      	cmp	r3, #0
   159f0:	da02      	bge.n	159f8 <sys_clock_elapsed+0x28>
   159f2:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
   159f6:	337f      	adds	r3, #127	; 0x7f
   159f8:	13db      	asrs	r3, r3, #15
   159fa:	fbb4 f3f3 	udiv	r3, r4, r3
}
   159fe:	4618      	mov	r0, r3
   15a00:	bd98      	pop	{r3, r4, r7, pc}
   15a02:	bf00      	nop
   15a04:	20014cd4 	.word	0x20014cd4

00015a08 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
   15a08:	b580      	push	{r7, lr}
   15a0a:	b08a      	sub	sp, #40	; 0x28
   15a0c:	af00      	add	r7, sp, #0
   15a0e:	4b30      	ldr	r3, [pc, #192]	; (15ad0 <sys_clock_cycle_get_32+0xc8>)
   15a10:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
   15a12:	f04f 0320 	mov.w	r3, #32
   15a16:	f3ef 8211 	mrs	r2, BASEPRI
   15a1a:	f383 8811 	msr	BASEPRI, r3
   15a1e:	f3bf 8f6f 	isb	sy
   15a22:	617a      	str	r2, [r7, #20]
   15a24:	613b      	str	r3, [r7, #16]
	return key;
   15a26:	697b      	ldr	r3, [r7, #20]
	k.key = arch_irq_lock();
   15a28:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15a2a:	69b8      	ldr	r0, [r7, #24]
   15a2c:	f007 fb0c 	bl	1d048 <z_spin_lock_valid>
   15a30:	4603      	mov	r3, r0
   15a32:	f083 0301 	eor.w	r3, r3, #1
   15a36:	b2db      	uxtb	r3, r3
   15a38:	2b00      	cmp	r3, #0
   15a3a:	d00d      	beq.n	15a58 <sys_clock_cycle_get_32+0x50>
   15a3c:	2381      	movs	r3, #129	; 0x81
   15a3e:	4a25      	ldr	r2, [pc, #148]	; (15ad4 <sys_clock_cycle_get_32+0xcc>)
   15a40:	4925      	ldr	r1, [pc, #148]	; (15ad8 <sys_clock_cycle_get_32+0xd0>)
   15a42:	4826      	ldr	r0, [pc, #152]	; (15adc <sys_clock_cycle_get_32+0xd4>)
   15a44:	f00b fb10 	bl	21068 <printk>
   15a48:	69b9      	ldr	r1, [r7, #24]
   15a4a:	4825      	ldr	r0, [pc, #148]	; (15ae0 <sys_clock_cycle_get_32+0xd8>)
   15a4c:	f00b fb0c 	bl	21068 <printk>
   15a50:	2181      	movs	r1, #129	; 0x81
   15a52:	4820      	ldr	r0, [pc, #128]	; (15ad4 <sys_clock_cycle_get_32+0xcc>)
   15a54:	f00c fbb5 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   15a58:	69b8      	ldr	r0, [r7, #24]
   15a5a:	f007 fb2d 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   15a5e:	68bb      	ldr	r3, [r7, #8]
   15a60:	60fb      	str	r3, [r7, #12]
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   15a62:	f7ff fdbf 	bl	155e4 <counter>
   15a66:	4602      	mov	r2, r0
   15a68:	4b1e      	ldr	r3, [pc, #120]	; (15ae4 <sys_clock_cycle_get_32+0xdc>)
   15a6a:	681b      	ldr	r3, [r3, #0]
   15a6c:	4619      	mov	r1, r3
   15a6e:	4610      	mov	r0, r2
   15a70:	f00e fbc0 	bl	241f4 <counter_sub>
   15a74:	4602      	mov	r2, r0
   15a76:	4b1b      	ldr	r3, [pc, #108]	; (15ae4 <sys_clock_cycle_get_32+0xdc>)
   15a78:	681b      	ldr	r3, [r3, #0]
   15a7a:	4413      	add	r3, r2
   15a7c:	627b      	str	r3, [r7, #36]	; 0x24
   15a7e:	4b14      	ldr	r3, [pc, #80]	; (15ad0 <sys_clock_cycle_get_32+0xc8>)
   15a80:	623b      	str	r3, [r7, #32]
   15a82:	68fb      	ldr	r3, [r7, #12]
   15a84:	607b      	str	r3, [r7, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15a86:	6a38      	ldr	r0, [r7, #32]
   15a88:	f007 fafa 	bl	1d080 <z_spin_unlock_valid>
   15a8c:	4603      	mov	r3, r0
   15a8e:	f083 0301 	eor.w	r3, r3, #1
   15a92:	b2db      	uxtb	r3, r3
   15a94:	2b00      	cmp	r3, #0
   15a96:	d00d      	beq.n	15ab4 <sys_clock_cycle_get_32+0xac>
   15a98:	23ac      	movs	r3, #172	; 0xac
   15a9a:	4a0e      	ldr	r2, [pc, #56]	; (15ad4 <sys_clock_cycle_get_32+0xcc>)
   15a9c:	4912      	ldr	r1, [pc, #72]	; (15ae8 <sys_clock_cycle_get_32+0xe0>)
   15a9e:	480f      	ldr	r0, [pc, #60]	; (15adc <sys_clock_cycle_get_32+0xd4>)
   15aa0:	f00b fae2 	bl	21068 <printk>
   15aa4:	6a39      	ldr	r1, [r7, #32]
   15aa6:	4811      	ldr	r0, [pc, #68]	; (15aec <sys_clock_cycle_get_32+0xe4>)
   15aa8:	f00b fade 	bl	21068 <printk>
   15aac:	21ac      	movs	r1, #172	; 0xac
   15aae:	4809      	ldr	r0, [pc, #36]	; (15ad4 <sys_clock_cycle_get_32+0xcc>)
   15ab0:	f00c fb87 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   15ab4:	687b      	ldr	r3, [r7, #4]
   15ab6:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   15ab8:	69fb      	ldr	r3, [r7, #28]
   15aba:	f383 8811 	msr	BASEPRI, r3
   15abe:	f3bf 8f6f 	isb	sy
}
   15ac2:	bf00      	nop
}
   15ac4:	bf00      	nop

	k_spin_unlock(&lock, key);
	return ret;
   15ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   15ac8:	4618      	mov	r0, r3
   15aca:	3728      	adds	r7, #40	; 0x28
   15acc:	46bd      	mov	sp, r7
   15ace:	bd80      	pop	{r7, pc}
   15ad0:	20014cd0 	.word	0x20014cd0
   15ad4:	0002a428 	.word	0x0002a428
   15ad8:	0002a450 	.word	0x0002a450
   15adc:	0002a3ac 	.word	0x0002a3ac
   15ae0:	0002a468 	.word	0x0002a468
   15ae4:	20014cd4 	.word	0x20014cd4
   15ae8:	0002a480 	.word	0x0002a480
   15aec:	0002a498 	.word	0x0002a498

00015af0 <before_nse>:
#include <arch/arm/aarch32/cortex_m/fpu.h>

static struct fpu_ctx_full context_buffer;

void before_nse(void)
{
   15af0:	b580      	push	{r7, lr}
   15af2:	af00      	add	r7, sp, #0
	k_sched_lock();
   15af4:	f009 fd64 	bl	1f5c0 <k_sched_lock>
	z_arm_save_fp_context(&context_buffer);
   15af8:	4802      	ldr	r0, [pc, #8]	; (15b04 <before_nse+0x14>)
   15afa:	f00e fc71 	bl	243e0 <z_arm_save_fp_context>
}
   15afe:	bf00      	nop
   15b00:	bd80      	pop	{r7, pc}
   15b02:	bf00      	nop
   15b04:	20014ce4 	.word	0x20014ce4

00015b08 <after_nse>:

void after_nse(void)
{
   15b08:	b580      	push	{r7, lr}
   15b0a:	af00      	add	r7, sp, #0
	k_sched_unlock();
   15b0c:	f009 fdc6 	bl	1f69c <k_sched_unlock>
	z_arm_restore_fp_context(&context_buffer);
   15b10:	4802      	ldr	r0, [pc, #8]	; (15b1c <after_nse+0x14>)
   15b12:	f00e fc6e 	bl	243f2 <z_arm_restore_fp_context>
}
   15b16:	bf00      	nop
   15b18:	bd80      	pop	{r7, pc}
   15b1a:	bf00      	nop
   15b1c:	20014ce4 	.word	0x20014ce4

00015b20 <arch_swap>:
 *
 * On ARMv6-M, the intlock key is represented by the PRIMASK register,
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
   15b20:	b480      	push	{r7}
   15b22:	b085      	sub	sp, #20
   15b24:	af00      	add	r7, sp, #0
   15b26:	6078      	str	r0, [r7, #4]
	/* store off key and return value */
	_current->arch.basepri = key;
   15b28:	4b0f      	ldr	r3, [pc, #60]	; (15b68 <arch_swap+0x48>)
   15b2a:	689b      	ldr	r3, [r3, #8]
   15b2c:	687a      	ldr	r2, [r7, #4]
   15b2e:	675a      	str	r2, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
   15b30:	4b0e      	ldr	r3, [pc, #56]	; (15b6c <arch_swap+0x4c>)
   15b32:	681a      	ldr	r2, [r3, #0]
   15b34:	4b0c      	ldr	r3, [pc, #48]	; (15b68 <arch_swap+0x48>)
   15b36:	689b      	ldr	r3, [r3, #8]
   15b38:	679a      	str	r2, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   15b3a:	4b0d      	ldr	r3, [pc, #52]	; (15b70 <arch_swap+0x50>)
   15b3c:	685b      	ldr	r3, [r3, #4]
   15b3e:	4a0c      	ldr	r2, [pc, #48]	; (15b70 <arch_swap+0x50>)
   15b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   15b44:	6053      	str	r3, [r2, #4]
   15b46:	2300      	movs	r3, #0
   15b48:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
   15b4a:	68fb      	ldr	r3, [r7, #12]
   15b4c:	f383 8811 	msr	BASEPRI, r3
   15b50:	f3bf 8f6f 	isb	sy
}
   15b54:	bf00      	nop
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   15b56:	4b04      	ldr	r3, [pc, #16]	; (15b68 <arch_swap+0x48>)
   15b58:	689b      	ldr	r3, [r3, #8]
   15b5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
   15b5c:	4618      	mov	r0, r3
   15b5e:	3714      	adds	r7, #20
   15b60:	46bd      	mov	sp, r7
   15b62:	bc80      	pop	{r7}
   15b64:	4770      	bx	lr
   15b66:	bf00      	nop
   15b68:	2001517c 	.word	0x2001517c
   15b6c:	0002cda4 	.word	0x0002cda4
   15b70:	e000ed00 	.word	0xe000ed00

00015b74 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   15b74:	4913      	ldr	r1, [pc, #76]	; (15bc4 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   15b76:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   15b78:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   15b7c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   15b7e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   15b82:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15b86:	2020      	movs	r0, #32
    msr BASEPRI, r0
   15b88:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   15b8c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   15b90:	4f0d      	ldr	r7, [pc, #52]	; (15bc8 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   15b92:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   15b96:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   15b98:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   15b9a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   15b9c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
   15b9e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   15ba0:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   15ba2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   15ba6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   15baa:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   15bae:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   15bb2:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   15bb6:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   15bb8:	f00e fb9e 	bl	242f8 <configure_builtin_stack_guard>
    pop {r2, lr}
   15bbc:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   15bc0:	4770      	bx	lr
   15bc2:	0000      	.short	0x0000
    ldr r1, =_kernel
   15bc4:	2001517c 	.word	0x2001517c
    ldr v4, =_SCS_ICSR
   15bc8:	e000ed04 	.word	0xe000ed04

00015bcc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   15bcc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   15bd0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   15bd2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   15bd6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   15bda:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   15bdc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   15be0:	2902      	cmp	r1, #2
    beq _oops
   15be2:	d0ff      	beq.n	15be4 <_oops>

00015be4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   15be4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   15be6:	f00e fbb9 	bl	2435c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   15bea:	bd01      	pop	{r0, pc}

00015bec <__NVIC_EnableIRQ>:
{
   15bec:	b480      	push	{r7}
   15bee:	b083      	sub	sp, #12
   15bf0:	af00      	add	r7, sp, #0
   15bf2:	4603      	mov	r3, r0
   15bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   15bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
   15bfa:	2b00      	cmp	r3, #0
   15bfc:	db0b      	blt.n	15c16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15bfe:	79fb      	ldrb	r3, [r7, #7]
   15c00:	f003 021f 	and.w	r2, r3, #31
   15c04:	4906      	ldr	r1, [pc, #24]	; (15c20 <__NVIC_EnableIRQ+0x34>)
   15c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
   15c0a:	095b      	lsrs	r3, r3, #5
   15c0c:	2001      	movs	r0, #1
   15c0e:	fa00 f202 	lsl.w	r2, r0, r2
   15c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   15c16:	bf00      	nop
   15c18:	370c      	adds	r7, #12
   15c1a:	46bd      	mov	sp, r7
   15c1c:	bc80      	pop	{r7}
   15c1e:	4770      	bx	lr
   15c20:	e000e100 	.word	0xe000e100

00015c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   15c24:	b480      	push	{r7}
   15c26:	b083      	sub	sp, #12
   15c28:	af00      	add	r7, sp, #0
   15c2a:	4603      	mov	r3, r0
   15c2c:	6039      	str	r1, [r7, #0]
   15c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   15c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
   15c34:	2b00      	cmp	r3, #0
   15c36:	db0a      	blt.n	15c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15c38:	683b      	ldr	r3, [r7, #0]
   15c3a:	b2da      	uxtb	r2, r3
   15c3c:	490c      	ldr	r1, [pc, #48]	; (15c70 <__NVIC_SetPriority+0x4c>)
   15c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   15c42:	0152      	lsls	r2, r2, #5
   15c44:	b2d2      	uxtb	r2, r2
   15c46:	440b      	add	r3, r1
   15c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
   15c4c:	e00a      	b.n	15c64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15c4e:	683b      	ldr	r3, [r7, #0]
   15c50:	b2da      	uxtb	r2, r3
   15c52:	4908      	ldr	r1, [pc, #32]	; (15c74 <__NVIC_SetPriority+0x50>)
   15c54:	79fb      	ldrb	r3, [r7, #7]
   15c56:	f003 030f 	and.w	r3, r3, #15
   15c5a:	3b04      	subs	r3, #4
   15c5c:	0152      	lsls	r2, r2, #5
   15c5e:	b2d2      	uxtb	r2, r2
   15c60:	440b      	add	r3, r1
   15c62:	761a      	strb	r2, [r3, #24]
}
   15c64:	bf00      	nop
   15c66:	370c      	adds	r7, #12
   15c68:	46bd      	mov	sp, r7
   15c6a:	bc80      	pop	{r7}
   15c6c:	4770      	bx	lr
   15c6e:	bf00      	nop
   15c70:	e000e100 	.word	0xe000e100
   15c74:	e000ed00 	.word	0xe000ed00

00015c78 <arch_irq_is_enabled>:
{
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
   15c78:	b480      	push	{r7}
   15c7a:	b083      	sub	sp, #12
   15c7c:	af00      	add	r7, sp, #0
   15c7e:	6078      	str	r0, [r7, #4]
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   15c80:	4a08      	ldr	r2, [pc, #32]	; (15ca4 <arch_irq_is_enabled+0x2c>)
   15c82:	687b      	ldr	r3, [r7, #4]
   15c84:	095b      	lsrs	r3, r3, #5
   15c86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   15c8a:	687b      	ldr	r3, [r7, #4]
   15c8c:	f003 031f 	and.w	r3, r3, #31
   15c90:	2101      	movs	r1, #1
   15c92:	fa01 f303 	lsl.w	r3, r1, r3
   15c96:	4013      	ands	r3, r2
}
   15c98:	4618      	mov	r0, r3
   15c9a:	370c      	adds	r7, #12
   15c9c:	46bd      	mov	sp, r7
   15c9e:	bc80      	pop	{r7}
   15ca0:	4770      	bx	lr
   15ca2:	bf00      	nop
   15ca4:	e000e100 	.word	0xe000e100

00015ca8 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   15ca8:	b580      	push	{r7, lr}
   15caa:	b084      	sub	sp, #16
   15cac:	af00      	add	r7, sp, #0
   15cae:	60f8      	str	r0, [r7, #12]
   15cb0:	60b9      	str	r1, [r7, #8]
   15cb2:	607a      	str	r2, [r7, #4]
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   15cb4:	68bb      	ldr	r3, [r7, #8]
   15cb6:	3301      	adds	r3, #1
   15cb8:	60bb      	str	r3, [r7, #8]
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   15cba:	68bb      	ldr	r3, [r7, #8]
   15cbc:	2b07      	cmp	r3, #7
   15cbe:	d910      	bls.n	15ce2 <z_arm_irq_priority_set+0x3a>
   15cc0:	2358      	movs	r3, #88	; 0x58
   15cc2:	4a0d      	ldr	r2, [pc, #52]	; (15cf8 <z_arm_irq_priority_set+0x50>)
   15cc4:	490d      	ldr	r1, [pc, #52]	; (15cfc <z_arm_irq_priority_set+0x54>)
   15cc6:	480e      	ldr	r0, [pc, #56]	; (15d00 <z_arm_irq_priority_set+0x58>)
   15cc8:	f00b f9ce 	bl	21068 <printk>
   15ccc:	68bb      	ldr	r3, [r7, #8]
   15cce:	1e59      	subs	r1, r3, #1
   15cd0:	2307      	movs	r3, #7
   15cd2:	68fa      	ldr	r2, [r7, #12]
   15cd4:	480b      	ldr	r0, [pc, #44]	; (15d04 <z_arm_irq_priority_set+0x5c>)
   15cd6:	f00b f9c7 	bl	21068 <printk>
   15cda:	2158      	movs	r1, #88	; 0x58
   15cdc:	4806      	ldr	r0, [pc, #24]	; (15cf8 <z_arm_irq_priority_set+0x50>)
   15cde:	f00c fa70 	bl	221c2 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   15ce2:	68fb      	ldr	r3, [r7, #12]
   15ce4:	b25b      	sxtb	r3, r3
   15ce6:	68b9      	ldr	r1, [r7, #8]
   15ce8:	4618      	mov	r0, r3
   15cea:	f7ff ff9b 	bl	15c24 <__NVIC_SetPriority>
}
   15cee:	bf00      	nop
   15cf0:	3710      	adds	r7, #16
   15cf2:	46bd      	mov	sp, r7
   15cf4:	bd80      	pop	{r7, pc}
   15cf6:	bf00      	nop
   15cf8:	0002a4b0 	.word	0x0002a4b0
   15cfc:	0002a4e8 	.word	0x0002a4e8
   15d00:	0002a504 	.word	0x0002a504
   15d04:	0002a524 	.word	0x0002a524

00015d08 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   15d08:	b580      	push	{r7, lr}
   15d0a:	b082      	sub	sp, #8
   15d0c:	af00      	add	r7, sp, #0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   15d0e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   15d10:	4b08      	ldr	r3, [pc, #32]	; (15d34 <_arch_isr_direct_pm+0x2c>)
   15d12:	6a1b      	ldr	r3, [r3, #32]
   15d14:	2b00      	cmp	r3, #0
   15d16:	d008      	beq.n	15d2a <_arch_isr_direct_pm+0x22>
		int32_t idle_val = _kernel.idle;
   15d18:	4b06      	ldr	r3, [pc, #24]	; (15d34 <_arch_isr_direct_pm+0x2c>)
   15d1a:	6a1b      	ldr	r3, [r3, #32]
   15d1c:	607b      	str	r3, [r7, #4]

		_kernel.idle = 0;
   15d1e:	4b05      	ldr	r3, [pc, #20]	; (15d34 <_arch_isr_direct_pm+0x2c>)
   15d20:	2200      	movs	r2, #0
   15d22:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
   15d24:	6878      	ldr	r0, [r7, #4]
   15d26:	f012 f85c 	bl	27de2 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   15d2a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   15d2c:	bf00      	nop
   15d2e:	3708      	adds	r7, #8
   15d30:	46bd      	mov	sp, r7
   15d32:	bd80      	pop	{r7, pc}
   15d34:	2001517c 	.word	0x2001517c

00015d38 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   15d38:	b480      	push	{r7}
   15d3a:	b087      	sub	sp, #28
   15d3c:	af00      	add	r7, sp, #0
   15d3e:	60f8      	str	r0, [r7, #12]
   15d40:	60b9      	str	r1, [r7, #8]
   15d42:	607a      	str	r2, [r7, #4]
   15d44:	603b      	str	r3, [r7, #0]
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   15d46:	687b      	ldr	r3, [r7, #4]
   15d48:	3b20      	subs	r3, #32
   15d4a:	617b      	str	r3, [r7, #20]
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   15d4c:	4a11      	ldr	r2, [pc, #68]	; (15d94 <arch_new_thread+0x5c>)
   15d4e:	697b      	ldr	r3, [r7, #20]
   15d50:	619a      	str	r2, [r3, #24]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   15d52:	697b      	ldr	r3, [r7, #20]
   15d54:	699b      	ldr	r3, [r3, #24]
   15d56:	f023 0201 	bic.w	r2, r3, #1
   15d5a:	697b      	ldr	r3, [r7, #20]
   15d5c:	619a      	str	r2, [r3, #24]
#endif
	iframe->a1 = (uint32_t)entry;
   15d5e:	683a      	ldr	r2, [r7, #0]
   15d60:	697b      	ldr	r3, [r7, #20]
   15d62:	601a      	str	r2, [r3, #0]
	iframe->a2 = (uint32_t)p1;
   15d64:	6a3a      	ldr	r2, [r7, #32]
   15d66:	697b      	ldr	r3, [r7, #20]
   15d68:	605a      	str	r2, [r3, #4]
	iframe->a3 = (uint32_t)p2;
   15d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15d6c:	697b      	ldr	r3, [r7, #20]
   15d6e:	609a      	str	r2, [r3, #8]
	iframe->a4 = (uint32_t)p3;
   15d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
   15d72:	697b      	ldr	r3, [r7, #20]
   15d74:	60da      	str	r2, [r3, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   15d76:	697b      	ldr	r3, [r7, #20]
   15d78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   15d7c:	61da      	str	r2, [r3, #28]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
   15d7e:	697a      	ldr	r2, [r7, #20]
   15d80:	68fb      	ldr	r3, [r7, #12]
   15d82:	651a      	str	r2, [r3, #80]	; 0x50
	thread->arch.basepri = 0;
   15d84:	68fb      	ldr	r3, [r7, #12]
   15d86:	2200      	movs	r2, #0
   15d88:	675a      	str	r2, [r3, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   15d8a:	bf00      	nop
   15d8c:	371c      	adds	r7, #28
   15d8e:	46bd      	mov	sp, r7
   15d90:	bc80      	pop	{r7}
   15d92:	4770      	bx	lr
   15d94:	00021545 	.word	0x00021545

00015d98 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   15d98:	b580      	push	{r7, lr}
   15d9a:	b086      	sub	sp, #24
   15d9c:	af00      	add	r7, sp, #0
   15d9e:	60f8      	str	r0, [r7, #12]
   15da0:	60b9      	str	r1, [r7, #8]
   15da2:	607a      	str	r2, [r7, #4]
	z_arm_prepare_switch_to_main();
   15da4:	f00e faba 	bl	2431c <z_arm_prepare_switch_to_main>

	_current = main_thread;
   15da8:	4a0c      	ldr	r2, [pc, #48]	; (15ddc <arch_switch_to_main_thread+0x44>)
   15daa:	68fb      	ldr	r3, [r7, #12]
   15dac:	6093      	str	r3, [r2, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
   15dae:	68fb      	ldr	r3, [r7, #12]
   15db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   15db2:	617b      	str	r3, [r7, #20]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   15db4:	697b      	ldr	r3, [r7, #20]
   15db6:	f383 880b 	msr	PSPLIM, r3
#endif
}
   15dba:	bf00      	nop

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   15dbc:	687b      	ldr	r3, [r7, #4]
   15dbe:	68ba      	ldr	r2, [r7, #8]
   15dc0:	4618      	mov	r0, r3
   15dc2:	f382 8809 	msr	PSP, r2
   15dc6:	2100      	movs	r1, #0
   15dc8:	b663      	cpsie	if
   15dca:	f381 8811 	msr	BASEPRI, r1
   15dce:	f3bf 8f6f 	isb	sy
   15dd2:	2200      	movs	r2, #0
   15dd4:	2300      	movs	r3, #0
   15dd6:	f00b fbb5 	bl	21544 <z_thread_entry>
   15dda:	bf00      	nop
   15ddc:	2001517c 	.word	0x2001517c

00015de0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   15de0:	4901      	ldr	r1, [pc, #4]	; (15de8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   15de2:	2210      	movs	r2, #16
	str	r2, [r1]
   15de4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   15de6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   15de8:	e000ed10 	.word	0xe000ed10

00015dec <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   15dec:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   15dee:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   15df0:	f380 8811 	msr	BASEPRI, r0
	isb
   15df4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   15df8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   15dfc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   15dfe:	b662      	cpsie	i
	isb
   15e00:	f3bf 8f6f 	isb	sy

	bx	lr
   15e04:	4770      	bx	lr
   15e06:	bf00      	nop

00015e08 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   15e08:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   15e0a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   15e0c:	f381 8811 	msr	BASEPRI, r1

	wfe
   15e10:	bf20      	wfe

	msr	BASEPRI, r0
   15e12:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   15e16:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   15e18:	4770      	bx	lr
   15e1a:	bf00      	nop

00015e1c <log_const_source_id>:
{
   15e1c:	b480      	push	{r7}
   15e1e:	b083      	sub	sp, #12
   15e20:	af00      	add	r7, sp, #0
   15e22:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   15e24:	687b      	ldr	r3, [r7, #4]
   15e26:	4a04      	ldr	r2, [pc, #16]	; (15e38 <log_const_source_id+0x1c>)
   15e28:	1a9b      	subs	r3, r3, r2
   15e2a:	08db      	lsrs	r3, r3, #3
}
   15e2c:	4618      	mov	r0, r3
   15e2e:	370c      	adds	r7, #12
   15e30:	46bd      	mov	sp, r7
   15e32:	bc80      	pop	{r7}
   15e34:	4770      	bx	lr
   15e36:	bf00      	nop
   15e38:	00029354 	.word	0x00029354

00015e3c <esf_dump>:
#include <kernel.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   15e3c:	b580      	push	{r7, lr}
   15e3e:	b090      	sub	sp, #64	; 0x40
   15e40:	af02      	add	r7, sp, #8
   15e42:	6078      	str	r0, [r7, #4]
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   15e44:	2303      	movs	r3, #3
   15e46:	2b00      	cmp	r3, #0
   15e48:	d047      	beq.n	15eda <esf_dump+0x9e>
   15e4a:	f00e fa6d 	bl	24328 <k_is_user_context>
   15e4e:	4603      	mov	r3, r0
   15e50:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
   15e54:	2300      	movs	r3, #0
   15e56:	627b      	str	r3, [r7, #36]	; 0x24
   15e58:	2303      	movs	r3, #3
   15e5a:	2b00      	cmp	r3, #0
   15e5c:	d007      	beq.n	15e6e <esf_dump+0x32>
   15e5e:	4b82      	ldr	r3, [pc, #520]	; (16068 <esf_dump+0x22c>)
   15e60:	681b      	ldr	r3, [r3, #0]
   15e62:	4618      	mov	r0, r3
   15e64:	f7ff ffda 	bl	15e1c <log_const_source_id>
   15e68:	4603      	mov	r3, r0
   15e6a:	b29b      	uxth	r3, r3
   15e6c:	e000      	b.n	15e70 <esf_dump+0x34>
   15e6e:	2300      	movs	r3, #0
   15e70:	867b      	strh	r3, [r7, #50]	; 0x32
   15e72:	f897 3020 	ldrb.w	r3, [r7, #32]
   15e76:	2201      	movs	r2, #1
   15e78:	f362 0302 	bfi	r3, r2, #0, #3
   15e7c:	f887 3020 	strb.w	r3, [r7, #32]
   15e80:	f897 3020 	ldrb.w	r3, [r7, #32]
   15e84:	f36f 03c5 	bfc	r3, #3, #3
   15e88:	f887 3020 	strb.w	r3, [r7, #32]
   15e8c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   15e8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   15e92:	b29a      	uxth	r2, r3
   15e94:	8c3b      	ldrh	r3, [r7, #32]
   15e96:	f362 138f 	bfi	r3, r2, #6, #10
   15e9a:	843b      	strh	r3, [r7, #32]
   15e9c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
   15ea0:	2b00      	cmp	r3, #0
   15ea2:	d00c      	beq.n	15ebe <esf_dump+0x82>
   15ea4:	687b      	ldr	r3, [r7, #4]
   15ea6:	681a      	ldr	r2, [r3, #0]
   15ea8:	687b      	ldr	r3, [r7, #4]
   15eaa:	6859      	ldr	r1, [r3, #4]
   15eac:	687b      	ldr	r3, [r7, #4]
   15eae:	689b      	ldr	r3, [r3, #8]
   15eb0:	9300      	str	r3, [sp, #0]
   15eb2:	460b      	mov	r3, r1
   15eb4:	496d      	ldr	r1, [pc, #436]	; (1606c <esf_dump+0x230>)
   15eb6:	8c38      	ldrh	r0, [r7, #32]
   15eb8:	f7fd f94a 	bl	13150 <log_from_user>
   15ebc:	e00e      	b.n	15edc <esf_dump+0xa0>
   15ebe:	687b      	ldr	r3, [r7, #4]
   15ec0:	6819      	ldr	r1, [r3, #0]
   15ec2:	687b      	ldr	r3, [r7, #4]
   15ec4:	685a      	ldr	r2, [r3, #4]
   15ec6:	687b      	ldr	r3, [r7, #4]
   15ec8:	6898      	ldr	r0, [r3, #8]
   15eca:	8c3b      	ldrh	r3, [r7, #32]
   15ecc:	f8ad 3000 	strh.w	r3, [sp]
   15ed0:	4603      	mov	r3, r0
   15ed2:	4866      	ldr	r0, [pc, #408]	; (1606c <esf_dump+0x230>)
   15ed4:	f00c fe5b 	bl	22b8e <log_3>
   15ed8:	e000      	b.n	15edc <esf_dump+0xa0>
   15eda:	bf00      	nop
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   15edc:	2303      	movs	r3, #3
   15ede:	2b00      	cmp	r3, #0
   15ee0:	d043      	beq.n	15f6a <esf_dump+0x12e>
   15ee2:	f00e fa21 	bl	24328 <k_is_user_context>
   15ee6:	4603      	mov	r3, r0
   15ee8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
   15eec:	2300      	movs	r3, #0
   15eee:	61fb      	str	r3, [r7, #28]
   15ef0:	2303      	movs	r3, #3
   15ef2:	2b00      	cmp	r3, #0
   15ef4:	d007      	beq.n	15f06 <esf_dump+0xca>
   15ef6:	4b5c      	ldr	r3, [pc, #368]	; (16068 <esf_dump+0x22c>)
   15ef8:	681b      	ldr	r3, [r3, #0]
   15efa:	4618      	mov	r0, r3
   15efc:	f7ff ff8e 	bl	15e1c <log_const_source_id>
   15f00:	4603      	mov	r3, r0
   15f02:	b29b      	uxth	r3, r3
   15f04:	e000      	b.n	15f08 <esf_dump+0xcc>
   15f06:	2300      	movs	r3, #0
   15f08:	86fb      	strh	r3, [r7, #54]	; 0x36
   15f0a:	7e3b      	ldrb	r3, [r7, #24]
   15f0c:	2201      	movs	r2, #1
   15f0e:	f362 0302 	bfi	r3, r2, #0, #3
   15f12:	763b      	strb	r3, [r7, #24]
   15f14:	7e3b      	ldrb	r3, [r7, #24]
   15f16:	f36f 03c5 	bfc	r3, #3, #3
   15f1a:	763b      	strb	r3, [r7, #24]
   15f1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
   15f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   15f22:	b29a      	uxth	r2, r3
   15f24:	8b3b      	ldrh	r3, [r7, #24]
   15f26:	f362 138f 	bfi	r3, r2, #6, #10
   15f2a:	833b      	strh	r3, [r7, #24]
   15f2c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
   15f30:	2b00      	cmp	r3, #0
   15f32:	d00c      	beq.n	15f4e <esf_dump+0x112>
   15f34:	687b      	ldr	r3, [r7, #4]
   15f36:	68da      	ldr	r2, [r3, #12]
   15f38:	687b      	ldr	r3, [r7, #4]
   15f3a:	6919      	ldr	r1, [r3, #16]
   15f3c:	687b      	ldr	r3, [r7, #4]
   15f3e:	695b      	ldr	r3, [r3, #20]
   15f40:	9300      	str	r3, [sp, #0]
   15f42:	460b      	mov	r3, r1
   15f44:	494a      	ldr	r1, [pc, #296]	; (16070 <esf_dump+0x234>)
   15f46:	8b38      	ldrh	r0, [r7, #24]
   15f48:	f7fd f902 	bl	13150 <log_from_user>
   15f4c:	e00e      	b.n	15f6c <esf_dump+0x130>
   15f4e:	687b      	ldr	r3, [r7, #4]
   15f50:	68d9      	ldr	r1, [r3, #12]
   15f52:	687b      	ldr	r3, [r7, #4]
   15f54:	691a      	ldr	r2, [r3, #16]
   15f56:	687b      	ldr	r3, [r7, #4]
   15f58:	6958      	ldr	r0, [r3, #20]
   15f5a:	8b3b      	ldrh	r3, [r7, #24]
   15f5c:	f8ad 3000 	strh.w	r3, [sp]
   15f60:	4603      	mov	r3, r0
   15f62:	4843      	ldr	r0, [pc, #268]	; (16070 <esf_dump+0x234>)
   15f64:	f00c fe13 	bl	22b8e <log_3>
   15f68:	e000      	b.n	15f6c <esf_dump+0x130>
   15f6a:	bf00      	nop
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   15f6c:	2303      	movs	r3, #3
   15f6e:	2b00      	cmp	r3, #0
   15f70:	d038      	beq.n	15fe4 <esf_dump+0x1a8>
   15f72:	f00e f9d9 	bl	24328 <k_is_user_context>
   15f76:	4603      	mov	r3, r0
   15f78:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   15f7c:	2300      	movs	r3, #0
   15f7e:	617b      	str	r3, [r7, #20]
   15f80:	2303      	movs	r3, #3
   15f82:	2b00      	cmp	r3, #0
   15f84:	d007      	beq.n	15f96 <esf_dump+0x15a>
   15f86:	4b38      	ldr	r3, [pc, #224]	; (16068 <esf_dump+0x22c>)
   15f88:	681b      	ldr	r3, [r3, #0]
   15f8a:	4618      	mov	r0, r3
   15f8c:	f7ff ff46 	bl	15e1c <log_const_source_id>
   15f90:	4603      	mov	r3, r0
   15f92:	b29b      	uxth	r3, r3
   15f94:	e000      	b.n	15f98 <esf_dump+0x15c>
   15f96:	2300      	movs	r3, #0
   15f98:	85fb      	strh	r3, [r7, #46]	; 0x2e
   15f9a:	7c3b      	ldrb	r3, [r7, #16]
   15f9c:	2201      	movs	r2, #1
   15f9e:	f362 0302 	bfi	r3, r2, #0, #3
   15fa2:	743b      	strb	r3, [r7, #16]
   15fa4:	7c3b      	ldrb	r3, [r7, #16]
   15fa6:	f36f 03c5 	bfc	r3, #3, #3
   15faa:	743b      	strb	r3, [r7, #16]
   15fac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
   15fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
   15fb2:	b29a      	uxth	r2, r3
   15fb4:	8a3b      	ldrh	r3, [r7, #16]
   15fb6:	f362 138f 	bfi	r3, r2, #6, #10
   15fba:	823b      	strh	r3, [r7, #16]
   15fbc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   15fc0:	2b00      	cmp	r3, #0
   15fc2:	d007      	beq.n	15fd4 <esf_dump+0x198>
   15fc4:	687b      	ldr	r3, [r7, #4]
   15fc6:	69db      	ldr	r3, [r3, #28]
   15fc8:	461a      	mov	r2, r3
   15fca:	492a      	ldr	r1, [pc, #168]	; (16074 <esf_dump+0x238>)
   15fcc:	8a38      	ldrh	r0, [r7, #16]
   15fce:	f7fd f8bf 	bl	13150 <log_from_user>
   15fd2:	e008      	b.n	15fe6 <esf_dump+0x1aa>
   15fd4:	687b      	ldr	r3, [r7, #4]
   15fd6:	69db      	ldr	r3, [r3, #28]
   15fd8:	8a3a      	ldrh	r2, [r7, #16]
   15fda:	4619      	mov	r1, r3
   15fdc:	4825      	ldr	r0, [pc, #148]	; (16074 <esf_dump+0x238>)
   15fde:	f00c fda6 	bl	22b2e <log_1>
   15fe2:	e000      	b.n	15fe6 <esf_dump+0x1aa>
   15fe4:	bf00      	nop
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   15fe6:	2303      	movs	r3, #3
   15fe8:	2b00      	cmp	r3, #0
   15fea:	d101      	bne.n	15ff0 <esf_dump+0x1b4>
   15fec:	bf00      	nop
		esf->basic.pc);
}
   15fee:	e037      	b.n	16060 <esf_dump+0x224>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   15ff0:	f00e f99a 	bl	24328 <k_is_user_context>
   15ff4:	4603      	mov	r3, r0
   15ff6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   15ffa:	2300      	movs	r3, #0
   15ffc:	60fb      	str	r3, [r7, #12]
   15ffe:	2303      	movs	r3, #3
   16000:	2b00      	cmp	r3, #0
   16002:	d007      	beq.n	16014 <esf_dump+0x1d8>
   16004:	4b18      	ldr	r3, [pc, #96]	; (16068 <esf_dump+0x22c>)
   16006:	681b      	ldr	r3, [r3, #0]
   16008:	4618      	mov	r0, r3
   1600a:	f7ff ff07 	bl	15e1c <log_const_source_id>
   1600e:	4603      	mov	r3, r0
   16010:	b29b      	uxth	r3, r3
   16012:	e000      	b.n	16016 <esf_dump+0x1da>
   16014:	2300      	movs	r3, #0
   16016:	857b      	strh	r3, [r7, #42]	; 0x2a
   16018:	7a3b      	ldrb	r3, [r7, #8]
   1601a:	2201      	movs	r2, #1
   1601c:	f362 0302 	bfi	r3, r2, #0, #3
   16020:	723b      	strb	r3, [r7, #8]
   16022:	7a3b      	ldrb	r3, [r7, #8]
   16024:	f36f 03c5 	bfc	r3, #3, #3
   16028:	723b      	strb	r3, [r7, #8]
   1602a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1602c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16030:	b29a      	uxth	r2, r3
   16032:	893b      	ldrh	r3, [r7, #8]
   16034:	f362 138f 	bfi	r3, r2, #6, #10
   16038:	813b      	strh	r3, [r7, #8]
   1603a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   1603e:	2b00      	cmp	r3, #0
   16040:	d007      	beq.n	16052 <esf_dump+0x216>
   16042:	687b      	ldr	r3, [r7, #4]
   16044:	699b      	ldr	r3, [r3, #24]
   16046:	461a      	mov	r2, r3
   16048:	490b      	ldr	r1, [pc, #44]	; (16078 <esf_dump+0x23c>)
   1604a:	8938      	ldrh	r0, [r7, #8]
   1604c:	f7fd f880 	bl	13150 <log_from_user>
}
   16050:	e006      	b.n	16060 <esf_dump+0x224>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   16052:	687b      	ldr	r3, [r7, #4]
   16054:	699b      	ldr	r3, [r3, #24]
   16056:	893a      	ldrh	r2, [r7, #8]
   16058:	4619      	mov	r1, r3
   1605a:	4807      	ldr	r0, [pc, #28]	; (16078 <esf_dump+0x23c>)
   1605c:	f00c fd67 	bl	22b2e <log_1>
}
   16060:	bf00      	nop
   16062:	3738      	adds	r7, #56	; 0x38
   16064:	46bd      	mov	sp, r7
   16066:	bd80      	pop	{r7, pc}
   16068:	20014524 	.word	0x20014524
   1606c:	0002a564 	.word	0x0002a564
   16070:	0002a594 	.word	0x0002a594
   16074:	0002a5c4 	.word	0x0002a5c4
   16078:	0002a5d4 	.word	0x0002a5d4

0001607c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   1607c:	bf30      	wfi
    b z_SysNmiOnReset
   1607e:	f7ff bffd 	b.w	1607c <z_SysNmiOnReset>
   16082:	bf00      	nop

00016084 <relocate_vector_table>:
#ifdef CONFIG_CPU_CORTEX_M_HAS_VTOR

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
   16084:	b480      	push	{r7}
   16086:	af00      	add	r7, sp, #0
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   16088:	4b07      	ldr	r3, [pc, #28]	; (160a8 <relocate_vector_table+0x24>)
   1608a:	4a08      	ldr	r2, [pc, #32]	; (160ac <relocate_vector_table+0x28>)
   1608c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   16090:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   16092:	f3bf 8f4f 	dsb	sy
}
   16096:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
   16098:	f3bf 8f6f 	isb	sy
}
   1609c:	bf00      	nop
	__DSB();
	__ISB();
}
   1609e:	bf00      	nop
   160a0:	46bd      	mov	sp, r7
   160a2:	bc80      	pop	{r7}
   160a4:	4770      	bx	lr
   160a6:	bf00      	nop
   160a8:	00010000 	.word	0x00010000
   160ac:	e000ed00 	.word	0xe000ed00

000160b0 <z_arm_floating_point_init>:

#endif /* CONFIG_CPU_CORTEX_M_HAS_VTOR */

#if defined(CONFIG_CPU_HAS_FPU)
static inline void z_arm_floating_point_init(void)
{
   160b0:	b480      	push	{r7}
   160b2:	b083      	sub	sp, #12
   160b4:	af00      	add	r7, sp, #0
	/*
	 * Upon reset, the Co-Processor Access Control Register is, normally,
	 * 0x00000000. However, it might be left un-cleared by firmware running
	 * before Zephyr boot.
	 */
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   160b6:	4b0c      	ldr	r3, [pc, #48]	; (160e8 <z_arm_floating_point_init+0x38>)
   160b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   160bc:	4a0a      	ldr	r2, [pc, #40]	; (160e8 <z_arm_floating_point_init+0x38>)
   160be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
   160c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   160c6:	f3ef 8314 	mrs	r3, CONTROL
   160ca:	603b      	str	r3, [r7, #0]
  return(result);
   160cc:	683b      	ldr	r3, [r7, #0]
	 * If CONFIG_INIT_ARCH_HW_AT_BOOT is set, CONTROL is cleared at reset.
	 */
#if (!defined(CONFIG_FPU) || !defined(CONFIG_FPU_SHARING)) && \
	(!defined(CONFIG_INIT_ARCH_HW_AT_BOOT))

	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   160ce:	f023 0304 	bic.w	r3, r3, #4
   160d2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   160d4:	687b      	ldr	r3, [r7, #4]
   160d6:	f383 8814 	msr	CONTROL, r3
}
   160da:	bf00      	nop
#endif
}
   160dc:	bf00      	nop
   160de:	370c      	adds	r7, #12
   160e0:	46bd      	mov	sp, r7
   160e2:	bc80      	pop	{r7}
   160e4:	4770      	bx	lr
   160e6:	bf00      	nop
   160e8:	e000ed00 	.word	0xe000ed00

000160ec <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   160ec:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   160ee:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   160f0:	4a0b      	ldr	r2, [pc, #44]	; (16120 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   160f2:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   160f4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   160f6:	bf1e      	ittt	ne
	movne	r1, #0
   160f8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   160fa:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   160fc:	f011 fe71 	blne	27de2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   16100:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   16102:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   16106:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1610a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   1610e:	4905      	ldr	r1, [pc, #20]	; (16124 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   16110:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   16112:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   16114:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   16116:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1611a:	4903      	ldr	r1, [pc, #12]	; (16128 <_isr_wrapper+0x3c>)
	bx r1
   1611c:	4708      	bx	r1
   1611e:	0000      	.short	0x0000
	ldr r2, =_kernel
   16120:	2001517c 	.word	0x2001517c
	ldr r1, =_sw_isr_table
   16124:	0002914c 	.word	0x0002914c
	ldr r1, =z_arm_int_exit
   16128:	000174fd 	.word	0x000174fd

0001612c <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   1612c:	f012 ff9c 	bl	29068 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   16130:	2020      	movs	r0, #32
    msr BASEPRI, r0
   16132:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   16136:	4808      	ldr	r0, [pc, #32]	; (16158 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   16138:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   1613c:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1613e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   16142:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   16146:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   16148:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1614a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1614e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   16152:	f00e f91a 	bl	2438a <z_arm_prep_c>
   16156:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   16158:	20015730 	.word	0x20015730

0001615c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1615c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   16160:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   16164:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   16166:	4672      	mov	r2, lr
	bl z_arm_fault
   16168:	f001 f946 	bl	173f8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1616c:	bd01      	pop	{r0, pc}
   1616e:	bf00      	nop

00016170 <log_const_source_id>:
{
   16170:	b480      	push	{r7}
   16172:	b083      	sub	sp, #12
   16174:	af00      	add	r7, sp, #0
   16176:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   16178:	687b      	ldr	r3, [r7, #4]
   1617a:	4a04      	ldr	r2, [pc, #16]	; (1618c <log_const_source_id+0x1c>)
   1617c:	1a9b      	subs	r3, r3, r2
   1617e:	08db      	lsrs	r3, r3, #3
}
   16180:	4618      	mov	r0, r3
   16182:	370c      	adds	r7, #12
   16184:	46bd      	mov	sp, r7
   16186:	bc80      	pop	{r7}
   16188:	4770      	bx	lr
   1618a:	bf00      	nop
   1618c:	00029354 	.word	0x00029354

00016190 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   16190:	b580      	push	{r7, lr}
   16192:	b09c      	sub	sp, #112	; 0x70
   16194:	af00      	add	r7, sp, #0
   16196:	60f8      	str	r0, [r7, #12]
   16198:	60b9      	str	r1, [r7, #8]
   1619a:	607a      	str	r2, [r7, #4]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1619c:	2300      	movs	r3, #0
   1619e:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t mmfar = -EINVAL;
   161a0:	f06f 0315 	mvn.w	r3, #21
   161a4:	66bb      	str	r3, [r7, #104]	; 0x68

	PR_FAULT_INFO("***** MPU FAULT *****");
   161a6:	2303      	movs	r3, #3
   161a8:	2b00      	cmp	r3, #0
   161aa:	d03c      	beq.n	16226 <mem_manage_fault+0x96>
   161ac:	f00e f8fb 	bl	243a6 <k_is_user_context>
   161b0:	4603      	mov	r3, r0
   161b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
   161b6:	2300      	movs	r3, #0
   161b8:	647b      	str	r3, [r7, #68]	; 0x44
   161ba:	2303      	movs	r3, #3
   161bc:	2b00      	cmp	r3, #0
   161be:	d007      	beq.n	161d0 <mem_manage_fault+0x40>
   161c0:	4bb5      	ldr	r3, [pc, #724]	; (16498 <mem_manage_fault+0x308>)
   161c2:	681b      	ldr	r3, [r3, #0]
   161c4:	4618      	mov	r0, r3
   161c6:	f7ff ffd3 	bl	16170 <log_const_source_id>
   161ca:	4603      	mov	r3, r0
   161cc:	b29b      	uxth	r3, r3
   161ce:	e000      	b.n	161d2 <mem_manage_fault+0x42>
   161d0:	2300      	movs	r3, #0
   161d2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
   161d6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   161da:	2201      	movs	r2, #1
   161dc:	f362 0302 	bfi	r3, r2, #0, #3
   161e0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
   161e4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   161e8:	f36f 03c5 	bfc	r3, #3, #3
   161ec:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
   161f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
   161f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
   161f8:	b29a      	uxth	r2, r3
   161fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
   161fe:	f362 138f 	bfi	r3, r2, #6, #10
   16202:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   16206:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   1620a:	2b00      	cmp	r3, #0
   1620c:	d005      	beq.n	1621a <mem_manage_fault+0x8a>
   1620e:	49a3      	ldr	r1, [pc, #652]	; (1649c <mem_manage_fault+0x30c>)
   16210:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
   16214:	f7fc ff9c 	bl	13150 <log_from_user>
   16218:	e006      	b.n	16228 <mem_manage_fault+0x98>
   1621a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
   1621e:	489f      	ldr	r0, [pc, #636]	; (1649c <mem_manage_fault+0x30c>)
   16220:	f00c fc70 	bl	22b04 <log_0>
   16224:	e000      	b.n	16228 <mem_manage_fault+0x98>
   16226:	bf00      	nop

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   16228:	4b9d      	ldr	r3, [pc, #628]	; (164a0 <mem_manage_fault+0x310>)
   1622a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1622c:	f003 0310 	and.w	r3, r3, #16
   16230:	2b00      	cmp	r3, #0
   16232:	d03c      	beq.n	162ae <mem_manage_fault+0x11e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   16234:	2303      	movs	r3, #3
   16236:	2b00      	cmp	r3, #0
   16238:	d038      	beq.n	162ac <mem_manage_fault+0x11c>
   1623a:	f00e f8b4 	bl	243a6 <k_is_user_context>
   1623e:	4603      	mov	r3, r0
   16240:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
   16244:	2300      	movs	r3, #0
   16246:	63fb      	str	r3, [r7, #60]	; 0x3c
   16248:	2303      	movs	r3, #3
   1624a:	2b00      	cmp	r3, #0
   1624c:	d007      	beq.n	1625e <mem_manage_fault+0xce>
   1624e:	4b92      	ldr	r3, [pc, #584]	; (16498 <mem_manage_fault+0x308>)
   16250:	681b      	ldr	r3, [r3, #0]
   16252:	4618      	mov	r0, r3
   16254:	f7ff ff8c 	bl	16170 <log_const_source_id>
   16258:	4603      	mov	r3, r0
   1625a:	b29b      	uxth	r3, r3
   1625c:	e000      	b.n	16260 <mem_manage_fault+0xd0>
   1625e:	2300      	movs	r3, #0
   16260:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
   16264:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
   16268:	2201      	movs	r2, #1
   1626a:	f362 0302 	bfi	r3, r2, #0, #3
   1626e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
   16272:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
   16276:	f36f 03c5 	bfc	r3, #3, #3
   1627a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
   1627e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
   16282:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16286:	b29a      	uxth	r2, r3
   16288:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
   1628a:	f362 138f 	bfi	r3, r2, #6, #10
   1628e:	873b      	strh	r3, [r7, #56]	; 0x38
   16290:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
   16294:	2b00      	cmp	r3, #0
   16296:	d004      	beq.n	162a2 <mem_manage_fault+0x112>
   16298:	4982      	ldr	r1, [pc, #520]	; (164a4 <mem_manage_fault+0x314>)
   1629a:	8f38      	ldrh	r0, [r7, #56]	; 0x38
   1629c:	f7fc ff58 	bl	13150 <log_from_user>
   162a0:	e005      	b.n	162ae <mem_manage_fault+0x11e>
   162a2:	8f39      	ldrh	r1, [r7, #56]	; 0x38
   162a4:	487f      	ldr	r0, [pc, #508]	; (164a4 <mem_manage_fault+0x314>)
   162a6:	f00c fc2d 	bl	22b04 <log_0>
   162aa:	e000      	b.n	162ae <mem_manage_fault+0x11e>
   162ac:	bf00      	nop
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   162ae:	4b7c      	ldr	r3, [pc, #496]	; (164a0 <mem_manage_fault+0x310>)
   162b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   162b2:	f003 0308 	and.w	r3, r3, #8
   162b6:	2b00      	cmp	r3, #0
   162b8:	d03c      	beq.n	16334 <mem_manage_fault+0x1a4>
		PR_FAULT_INFO("  Unstacking error");
   162ba:	2303      	movs	r3, #3
   162bc:	2b00      	cmp	r3, #0
   162be:	d038      	beq.n	16332 <mem_manage_fault+0x1a2>
   162c0:	f00e f871 	bl	243a6 <k_is_user_context>
   162c4:	4603      	mov	r3, r0
   162c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
   162ca:	2300      	movs	r3, #0
   162cc:	637b      	str	r3, [r7, #52]	; 0x34
   162ce:	2303      	movs	r3, #3
   162d0:	2b00      	cmp	r3, #0
   162d2:	d007      	beq.n	162e4 <mem_manage_fault+0x154>
   162d4:	4b70      	ldr	r3, [pc, #448]	; (16498 <mem_manage_fault+0x308>)
   162d6:	681b      	ldr	r3, [r3, #0]
   162d8:	4618      	mov	r0, r3
   162da:	f7ff ff49 	bl	16170 <log_const_source_id>
   162de:	4603      	mov	r3, r0
   162e0:	b29b      	uxth	r3, r3
   162e2:	e000      	b.n	162e6 <mem_manage_fault+0x156>
   162e4:	2300      	movs	r3, #0
   162e6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
   162ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   162ee:	2201      	movs	r2, #1
   162f0:	f362 0302 	bfi	r3, r2, #0, #3
   162f4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   162f8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   162fc:	f36f 03c5 	bfc	r3, #3, #3
   16300:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   16304:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
   16308:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1630c:	b29a      	uxth	r2, r3
   1630e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   16310:	f362 138f 	bfi	r3, r2, #6, #10
   16314:	863b      	strh	r3, [r7, #48]	; 0x30
   16316:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   1631a:	2b00      	cmp	r3, #0
   1631c:	d004      	beq.n	16328 <mem_manage_fault+0x198>
   1631e:	4962      	ldr	r1, [pc, #392]	; (164a8 <mem_manage_fault+0x318>)
   16320:	8e38      	ldrh	r0, [r7, #48]	; 0x30
   16322:	f7fc ff15 	bl	13150 <log_from_user>
   16326:	e005      	b.n	16334 <mem_manage_fault+0x1a4>
   16328:	8e39      	ldrh	r1, [r7, #48]	; 0x30
   1632a:	485f      	ldr	r0, [pc, #380]	; (164a8 <mem_manage_fault+0x318>)
   1632c:	f00c fbea 	bl	22b04 <log_0>
   16330:	e000      	b.n	16334 <mem_manage_fault+0x1a4>
   16332:	bf00      	nop
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   16334:	4b5a      	ldr	r3, [pc, #360]	; (164a0 <mem_manage_fault+0x310>)
   16336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16338:	f003 0302 	and.w	r3, r3, #2
   1633c:	2b00      	cmp	r3, #0
   1633e:	f000 8090 	beq.w	16462 <mem_manage_fault+0x2d2>
		PR_FAULT_INFO("  Data Access Violation");
   16342:	2303      	movs	r3, #3
   16344:	2b00      	cmp	r3, #0
   16346:	d038      	beq.n	163ba <mem_manage_fault+0x22a>
   16348:	f00e f82d 	bl	243a6 <k_is_user_context>
   1634c:	4603      	mov	r3, r0
   1634e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
   16352:	2300      	movs	r3, #0
   16354:	62fb      	str	r3, [r7, #44]	; 0x2c
   16356:	2303      	movs	r3, #3
   16358:	2b00      	cmp	r3, #0
   1635a:	d007      	beq.n	1636c <mem_manage_fault+0x1dc>
   1635c:	4b4e      	ldr	r3, [pc, #312]	; (16498 <mem_manage_fault+0x308>)
   1635e:	681b      	ldr	r3, [r3, #0]
   16360:	4618      	mov	r0, r3
   16362:	f7ff ff05 	bl	16170 <log_const_source_id>
   16366:	4603      	mov	r3, r0
   16368:	b29b      	uxth	r3, r3
   1636a:	e000      	b.n	1636e <mem_manage_fault+0x1de>
   1636c:	2300      	movs	r3, #0
   1636e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
   16372:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   16376:	2201      	movs	r2, #1
   16378:	f362 0302 	bfi	r3, r2, #0, #3
   1637c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
   16380:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   16384:	f36f 03c5 	bfc	r3, #3, #3
   16388:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
   1638c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
   16390:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16394:	b29a      	uxth	r2, r3
   16396:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   16398:	f362 138f 	bfi	r3, r2, #6, #10
   1639c:	853b      	strh	r3, [r7, #40]	; 0x28
   1639e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   163a2:	2b00      	cmp	r3, #0
   163a4:	d004      	beq.n	163b0 <mem_manage_fault+0x220>
   163a6:	4941      	ldr	r1, [pc, #260]	; (164ac <mem_manage_fault+0x31c>)
   163a8:	8d38      	ldrh	r0, [r7, #40]	; 0x28
   163aa:	f7fc fed1 	bl	13150 <log_from_user>
   163ae:	e005      	b.n	163bc <mem_manage_fault+0x22c>
   163b0:	8d39      	ldrh	r1, [r7, #40]	; 0x28
   163b2:	483e      	ldr	r0, [pc, #248]	; (164ac <mem_manage_fault+0x31c>)
   163b4:	f00c fba6 	bl	22b04 <log_0>
   163b8:	e000      	b.n	163bc <mem_manage_fault+0x22c>
   163ba:	bf00      	nop
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   163bc:	4b38      	ldr	r3, [pc, #224]	; (164a0 <mem_manage_fault+0x310>)
   163be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   163c0:	657b      	str	r3, [r7, #84]	; 0x54

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   163c2:	4b37      	ldr	r3, [pc, #220]	; (164a0 <mem_manage_fault+0x310>)
   163c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   163c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
   163ca:	2b00      	cmp	r3, #0
   163cc:	d049      	beq.n	16462 <mem_manage_fault+0x2d2>
			mmfar = temp;
   163ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   163d0:	66bb      	str	r3, [r7, #104]	; 0x68
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   163d2:	2303      	movs	r3, #3
   163d4:	2b00      	cmp	r3, #0
   163d6:	d03a      	beq.n	1644e <mem_manage_fault+0x2be>
   163d8:	f00d ffe5 	bl	243a6 <k_is_user_context>
   163dc:	4603      	mov	r3, r0
   163de:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
   163e2:	2300      	movs	r3, #0
   163e4:	627b      	str	r3, [r7, #36]	; 0x24
   163e6:	2303      	movs	r3, #3
   163e8:	2b00      	cmp	r3, #0
   163ea:	d007      	beq.n	163fc <mem_manage_fault+0x26c>
   163ec:	4b2a      	ldr	r3, [pc, #168]	; (16498 <mem_manage_fault+0x308>)
   163ee:	681b      	ldr	r3, [r3, #0]
   163f0:	4618      	mov	r0, r3
   163f2:	f7ff febd 	bl	16170 <log_const_source_id>
   163f6:	4603      	mov	r3, r0
   163f8:	b29b      	uxth	r3, r3
   163fa:	e000      	b.n	163fe <mem_manage_fault+0x26e>
   163fc:	2300      	movs	r3, #0
   163fe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
   16402:	f897 3020 	ldrb.w	r3, [r7, #32]
   16406:	2201      	movs	r2, #1
   16408:	f362 0302 	bfi	r3, r2, #0, #3
   1640c:	f887 3020 	strb.w	r3, [r7, #32]
   16410:	f897 3020 	ldrb.w	r3, [r7, #32]
   16414:	f36f 03c5 	bfc	r3, #3, #3
   16418:	f887 3020 	strb.w	r3, [r7, #32]
   1641c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   16420:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16424:	b29a      	uxth	r2, r3
   16426:	8c3b      	ldrh	r3, [r7, #32]
   16428:	f362 138f 	bfi	r3, r2, #6, #10
   1642c:	843b      	strh	r3, [r7, #32]
   1642e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
   16432:	2b00      	cmp	r3, #0
   16434:	d005      	beq.n	16442 <mem_manage_fault+0x2b2>
   16436:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16438:	491d      	ldr	r1, [pc, #116]	; (164b0 <mem_manage_fault+0x320>)
   1643a:	8c38      	ldrh	r0, [r7, #32]
   1643c:	f7fc fe88 	bl	13150 <log_from_user>
   16440:	e006      	b.n	16450 <mem_manage_fault+0x2c0>
   16442:	8c3a      	ldrh	r2, [r7, #32]
   16444:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   16446:	481a      	ldr	r0, [pc, #104]	; (164b0 <mem_manage_fault+0x320>)
   16448:	f00c fb71 	bl	22b2e <log_1>
   1644c:	e000      	b.n	16450 <mem_manage_fault+0x2c0>
   1644e:	bf00      	nop
			if (from_hard_fault != 0) {
   16450:	68bb      	ldr	r3, [r7, #8]
   16452:	2b00      	cmp	r3, #0
   16454:	d005      	beq.n	16462 <mem_manage_fault+0x2d2>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   16456:	4b12      	ldr	r3, [pc, #72]	; (164a0 <mem_manage_fault+0x310>)
   16458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1645a:	4a11      	ldr	r2, [pc, #68]	; (164a0 <mem_manage_fault+0x310>)
   1645c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   16460:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   16462:	4b0f      	ldr	r3, [pc, #60]	; (164a0 <mem_manage_fault+0x310>)
   16464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16466:	f003 0301 	and.w	r3, r3, #1
   1646a:	2b00      	cmp	r3, #0
   1646c:	d046      	beq.n	164fc <mem_manage_fault+0x36c>
		PR_FAULT_INFO("  Instruction Access Violation");
   1646e:	2303      	movs	r3, #3
   16470:	2b00      	cmp	r3, #0
   16472:	d042      	beq.n	164fa <mem_manage_fault+0x36a>
   16474:	f00d ff97 	bl	243a6 <k_is_user_context>
   16478:	4603      	mov	r3, r0
   1647a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
   1647e:	2300      	movs	r3, #0
   16480:	61fb      	str	r3, [r7, #28]
   16482:	2303      	movs	r3, #3
   16484:	2b00      	cmp	r3, #0
   16486:	d015      	beq.n	164b4 <mem_manage_fault+0x324>
   16488:	4b03      	ldr	r3, [pc, #12]	; (16498 <mem_manage_fault+0x308>)
   1648a:	681b      	ldr	r3, [r3, #0]
   1648c:	4618      	mov	r0, r3
   1648e:	f7ff fe6f 	bl	16170 <log_const_source_id>
   16492:	4603      	mov	r3, r0
   16494:	b29b      	uxth	r3, r3
   16496:	e00e      	b.n	164b6 <mem_manage_fault+0x326>
   16498:	20014528 	.word	0x20014528
   1649c:	0002a604 	.word	0x0002a604
   164a0:	e000ed00 	.word	0xe000ed00
   164a4:	0002a61c 	.word	0x0002a61c
   164a8:	0002a650 	.word	0x0002a650
   164ac:	0002a664 	.word	0x0002a664
   164b0:	0002a67c 	.word	0x0002a67c
   164b4:	2300      	movs	r3, #0
   164b6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
   164ba:	7e3b      	ldrb	r3, [r7, #24]
   164bc:	2201      	movs	r2, #1
   164be:	f362 0302 	bfi	r3, r2, #0, #3
   164c2:	763b      	strb	r3, [r7, #24]
   164c4:	7e3b      	ldrb	r3, [r7, #24]
   164c6:	f36f 03c5 	bfc	r3, #3, #3
   164ca:	763b      	strb	r3, [r7, #24]
   164cc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
   164d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
   164d4:	b29a      	uxth	r2, r3
   164d6:	8b3b      	ldrh	r3, [r7, #24]
   164d8:	f362 138f 	bfi	r3, r2, #6, #10
   164dc:	833b      	strh	r3, [r7, #24]
   164de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   164e2:	2b00      	cmp	r3, #0
   164e4:	d004      	beq.n	164f0 <mem_manage_fault+0x360>
   164e6:	493f      	ldr	r1, [pc, #252]	; (165e4 <mem_manage_fault+0x454>)
   164e8:	8b38      	ldrh	r0, [r7, #24]
   164ea:	f7fc fe31 	bl	13150 <log_from_user>
   164ee:	e005      	b.n	164fc <mem_manage_fault+0x36c>
   164f0:	8b39      	ldrh	r1, [r7, #24]
   164f2:	483c      	ldr	r0, [pc, #240]	; (165e4 <mem_manage_fault+0x454>)
   164f4:	f00c fb06 	bl	22b04 <log_0>
   164f8:	e000      	b.n	164fc <mem_manage_fault+0x36c>
   164fa:	bf00      	nop
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   164fc:	4b3a      	ldr	r3, [pc, #232]	; (165e8 <mem_manage_fault+0x458>)
   164fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16500:	f003 0320 	and.w	r3, r3, #32
   16504:	2b00      	cmp	r3, #0
   16506:	d038      	beq.n	1657a <mem_manage_fault+0x3ea>
		PR_FAULT_INFO(
   16508:	2303      	movs	r3, #3
   1650a:	2b00      	cmp	r3, #0
   1650c:	d034      	beq.n	16578 <mem_manage_fault+0x3e8>
   1650e:	f00d ff4a 	bl	243a6 <k_is_user_context>
   16512:	4603      	mov	r3, r0
   16514:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
   16518:	2300      	movs	r3, #0
   1651a:	617b      	str	r3, [r7, #20]
   1651c:	2303      	movs	r3, #3
   1651e:	2b00      	cmp	r3, #0
   16520:	d007      	beq.n	16532 <mem_manage_fault+0x3a2>
   16522:	4b32      	ldr	r3, [pc, #200]	; (165ec <mem_manage_fault+0x45c>)
   16524:	681b      	ldr	r3, [r3, #0]
   16526:	4618      	mov	r0, r3
   16528:	f7ff fe22 	bl	16170 <log_const_source_id>
   1652c:	4603      	mov	r3, r0
   1652e:	b29b      	uxth	r3, r3
   16530:	e000      	b.n	16534 <mem_manage_fault+0x3a4>
   16532:	2300      	movs	r3, #0
   16534:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
   16538:	7c3b      	ldrb	r3, [r7, #16]
   1653a:	2201      	movs	r2, #1
   1653c:	f362 0302 	bfi	r3, r2, #0, #3
   16540:	743b      	strb	r3, [r7, #16]
   16542:	7c3b      	ldrb	r3, [r7, #16]
   16544:	f36f 03c5 	bfc	r3, #3, #3
   16548:	743b      	strb	r3, [r7, #16]
   1654a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
   1654e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16552:	b29a      	uxth	r2, r3
   16554:	8a3b      	ldrh	r3, [r7, #16]
   16556:	f362 138f 	bfi	r3, r2, #6, #10
   1655a:	823b      	strh	r3, [r7, #16]
   1655c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
   16560:	2b00      	cmp	r3, #0
   16562:	d004      	beq.n	1656e <mem_manage_fault+0x3de>
   16564:	4922      	ldr	r1, [pc, #136]	; (165f0 <mem_manage_fault+0x460>)
   16566:	8a38      	ldrh	r0, [r7, #16]
   16568:	f7fc fdf2 	bl	13150 <log_from_user>
   1656c:	e005      	b.n	1657a <mem_manage_fault+0x3ea>
   1656e:	8a39      	ldrh	r1, [r7, #16]
   16570:	481f      	ldr	r0, [pc, #124]	; (165f0 <mem_manage_fault+0x460>)
   16572:	f00c fac7 	bl	22b04 <log_0>
   16576:	e000      	b.n	1657a <mem_manage_fault+0x3ea>
   16578:	bf00      	nop
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1657a:	4b1b      	ldr	r3, [pc, #108]	; (165e8 <mem_manage_fault+0x458>)
   1657c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1657e:	f003 0310 	and.w	r3, r3, #16
   16582:	2b00      	cmp	r3, #0
   16584:	d105      	bne.n	16592 <mem_manage_fault+0x402>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   16586:	4b18      	ldr	r3, [pc, #96]	; (165e8 <mem_manage_fault+0x458>)
   16588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1658a:	f003 0302 	and.w	r3, r3, #2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1658e:	2b00      	cmp	r3, #0
   16590:	d014      	beq.n	165bc <mem_manage_fault+0x42c>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   16592:	4b15      	ldr	r3, [pc, #84]	; (165e8 <mem_manage_fault+0x458>)
   16594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16596:	f003 0310 	and.w	r3, r3, #16
   1659a:	2b00      	cmp	r3, #0
   1659c:	d00e      	beq.n	165bc <mem_manage_fault+0x42c>
   1659e:	f240 134f 	movw	r3, #335	; 0x14f
   165a2:	4a14      	ldr	r2, [pc, #80]	; (165f4 <mem_manage_fault+0x464>)
   165a4:	4914      	ldr	r1, [pc, #80]	; (165f8 <mem_manage_fault+0x468>)
   165a6:	4815      	ldr	r0, [pc, #84]	; (165fc <mem_manage_fault+0x46c>)
   165a8:	f00a fd5e 	bl	21068 <printk>
   165ac:	4814      	ldr	r0, [pc, #80]	; (16600 <mem_manage_fault+0x470>)
   165ae:	f00a fd5b 	bl	21068 <printk>
   165b2:	f240 114f 	movw	r1, #335	; 0x14f
   165b6:	480f      	ldr	r0, [pc, #60]	; (165f4 <mem_manage_fault+0x464>)
   165b8:	f00b fe03 	bl	221c2 <assert_post_action>
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   165bc:	4b0a      	ldr	r3, [pc, #40]	; (165e8 <mem_manage_fault+0x458>)
   165be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   165c0:	4a09      	ldr	r2, [pc, #36]	; (165e8 <mem_manage_fault+0x458>)
   165c2:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   165c6:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   165c8:	2101      	movs	r1, #1
   165ca:	68f8      	ldr	r0, [r7, #12]
   165cc:	f00d fefc 	bl	243c8 <memory_fault_recoverable>
   165d0:	4603      	mov	r3, r0
   165d2:	461a      	mov	r2, r3
   165d4:	687b      	ldr	r3, [r7, #4]
   165d6:	701a      	strb	r2, [r3, #0]

	return reason;
   165d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   165da:	4618      	mov	r0, r3
   165dc:	3770      	adds	r7, #112	; 0x70
   165de:	46bd      	mov	sp, r7
   165e0:	bd80      	pop	{r7, pc}
   165e2:	bf00      	nop
   165e4:	0002a694 	.word	0x0002a694
   165e8:	e000ed00 	.word	0xe000ed00
   165ec:	20014528 	.word	0x20014528
   165f0:	0002a6b4 	.word	0x0002a6b4
   165f4:	0002a6e4 	.word	0x0002a6e4
   165f8:	0002a720 	.word	0x0002a720
   165fc:	0002a76c 	.word	0x0002a76c
   16600:	0002a78c 	.word	0x0002a78c

00016604 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
   16604:	b580      	push	{r7, lr}
   16606:	b09e      	sub	sp, #120	; 0x78
   16608:	af00      	add	r7, sp, #0
   1660a:	60f8      	str	r0, [r7, #12]
   1660c:	60b9      	str	r1, [r7, #8]
   1660e:	607a      	str	r2, [r7, #4]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   16610:	2300      	movs	r3, #0
   16612:	677b      	str	r3, [r7, #116]	; 0x74

	PR_FAULT_INFO("***** BUS FAULT *****");
   16614:	2303      	movs	r3, #3
   16616:	2b00      	cmp	r3, #0
   16618:	d03c      	beq.n	16694 <bus_fault+0x90>
   1661a:	f00d fec4 	bl	243a6 <k_is_user_context>
   1661e:	4603      	mov	r3, r0
   16620:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
   16624:	2300      	movs	r3, #0
   16626:	64fb      	str	r3, [r7, #76]	; 0x4c
   16628:	2303      	movs	r3, #3
   1662a:	2b00      	cmp	r3, #0
   1662c:	d007      	beq.n	1663e <bus_fault+0x3a>
   1662e:	4bb7      	ldr	r3, [pc, #732]	; (1690c <bus_fault+0x308>)
   16630:	681b      	ldr	r3, [r3, #0]
   16632:	4618      	mov	r0, r3
   16634:	f7ff fd9c 	bl	16170 <log_const_source_id>
   16638:	4603      	mov	r3, r0
   1663a:	b29b      	uxth	r3, r3
   1663c:	e000      	b.n	16640 <bus_fault+0x3c>
   1663e:	2300      	movs	r3, #0
   16640:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
   16644:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
   16648:	2201      	movs	r2, #1
   1664a:	f362 0302 	bfi	r3, r2, #0, #3
   1664e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
   16652:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
   16656:	f36f 03c5 	bfc	r3, #3, #3
   1665a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
   1665e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
   16662:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16666:	b29a      	uxth	r2, r3
   16668:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
   1666c:	f362 138f 	bfi	r3, r2, #6, #10
   16670:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
   16674:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
   16678:	2b00      	cmp	r3, #0
   1667a:	d005      	beq.n	16688 <bus_fault+0x84>
   1667c:	49a4      	ldr	r1, [pc, #656]	; (16910 <bus_fault+0x30c>)
   1667e:	f8b7 0048 	ldrh.w	r0, [r7, #72]	; 0x48
   16682:	f7fc fd65 	bl	13150 <log_from_user>
   16686:	e006      	b.n	16696 <bus_fault+0x92>
   16688:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
   1668c:	48a0      	ldr	r0, [pc, #640]	; (16910 <bus_fault+0x30c>)
   1668e:	f00c fa39 	bl	22b04 <log_0>
   16692:	e000      	b.n	16696 <bus_fault+0x92>
   16694:	bf00      	nop

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   16696:	4b9f      	ldr	r3, [pc, #636]	; (16914 <bus_fault+0x310>)
   16698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1669a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   1669e:	2b00      	cmp	r3, #0
   166a0:	d040      	beq.n	16724 <bus_fault+0x120>
		PR_FAULT_INFO("  Stacking error");
   166a2:	2303      	movs	r3, #3
   166a4:	2b00      	cmp	r3, #0
   166a6:	d03c      	beq.n	16722 <bus_fault+0x11e>
   166a8:	f00d fe7d 	bl	243a6 <k_is_user_context>
   166ac:	4603      	mov	r3, r0
   166ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
   166b2:	2300      	movs	r3, #0
   166b4:	647b      	str	r3, [r7, #68]	; 0x44
   166b6:	2303      	movs	r3, #3
   166b8:	2b00      	cmp	r3, #0
   166ba:	d007      	beq.n	166cc <bus_fault+0xc8>
   166bc:	4b93      	ldr	r3, [pc, #588]	; (1690c <bus_fault+0x308>)
   166be:	681b      	ldr	r3, [r3, #0]
   166c0:	4618      	mov	r0, r3
   166c2:	f7ff fd55 	bl	16170 <log_const_source_id>
   166c6:	4603      	mov	r3, r0
   166c8:	b29b      	uxth	r3, r3
   166ca:	e000      	b.n	166ce <bus_fault+0xca>
   166cc:	2300      	movs	r3, #0
   166ce:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
   166d2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   166d6:	2201      	movs	r2, #1
   166d8:	f362 0302 	bfi	r3, r2, #0, #3
   166dc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
   166e0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   166e4:	f36f 03c5 	bfc	r3, #3, #3
   166e8:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
   166ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
   166f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
   166f4:	b29a      	uxth	r2, r3
   166f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
   166fa:	f362 138f 	bfi	r3, r2, #6, #10
   166fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   16702:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
   16706:	2b00      	cmp	r3, #0
   16708:	d005      	beq.n	16716 <bus_fault+0x112>
   1670a:	4983      	ldr	r1, [pc, #524]	; (16918 <bus_fault+0x314>)
   1670c:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
   16710:	f7fc fd1e 	bl	13150 <log_from_user>
   16714:	e006      	b.n	16724 <bus_fault+0x120>
   16716:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
   1671a:	487f      	ldr	r0, [pc, #508]	; (16918 <bus_fault+0x314>)
   1671c:	f00c f9f2 	bl	22b04 <log_0>
   16720:	e000      	b.n	16724 <bus_fault+0x120>
   16722:	bf00      	nop
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   16724:	4b7b      	ldr	r3, [pc, #492]	; (16914 <bus_fault+0x310>)
   16726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   1672c:	2b00      	cmp	r3, #0
   1672e:	d03c      	beq.n	167aa <bus_fault+0x1a6>
		PR_FAULT_INFO("  Unstacking error");
   16730:	2303      	movs	r3, #3
   16732:	2b00      	cmp	r3, #0
   16734:	d038      	beq.n	167a8 <bus_fault+0x1a4>
   16736:	f00d fe36 	bl	243a6 <k_is_user_context>
   1673a:	4603      	mov	r3, r0
   1673c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
   16740:	2300      	movs	r3, #0
   16742:	63fb      	str	r3, [r7, #60]	; 0x3c
   16744:	2303      	movs	r3, #3
   16746:	2b00      	cmp	r3, #0
   16748:	d007      	beq.n	1675a <bus_fault+0x156>
   1674a:	4b70      	ldr	r3, [pc, #448]	; (1690c <bus_fault+0x308>)
   1674c:	681b      	ldr	r3, [r3, #0]
   1674e:	4618      	mov	r0, r3
   16750:	f7ff fd0e 	bl	16170 <log_const_source_id>
   16754:	4603      	mov	r3, r0
   16756:	b29b      	uxth	r3, r3
   16758:	e000      	b.n	1675c <bus_fault+0x158>
   1675a:	2300      	movs	r3, #0
   1675c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
   16760:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
   16764:	2201      	movs	r2, #1
   16766:	f362 0302 	bfi	r3, r2, #0, #3
   1676a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
   1676e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
   16772:	f36f 03c5 	bfc	r3, #3, #3
   16776:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
   1677a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
   1677e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16782:	b29a      	uxth	r2, r3
   16784:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
   16786:	f362 138f 	bfi	r3, r2, #6, #10
   1678a:	873b      	strh	r3, [r7, #56]	; 0x38
   1678c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   16790:	2b00      	cmp	r3, #0
   16792:	d004      	beq.n	1679e <bus_fault+0x19a>
   16794:	4961      	ldr	r1, [pc, #388]	; (1691c <bus_fault+0x318>)
   16796:	8f38      	ldrh	r0, [r7, #56]	; 0x38
   16798:	f7fc fcda 	bl	13150 <log_from_user>
   1679c:	e005      	b.n	167aa <bus_fault+0x1a6>
   1679e:	8f39      	ldrh	r1, [r7, #56]	; 0x38
   167a0:	485e      	ldr	r0, [pc, #376]	; (1691c <bus_fault+0x318>)
   167a2:	f00c f9af 	bl	22b04 <log_0>
   167a6:	e000      	b.n	167aa <bus_fault+0x1a6>
   167a8:	bf00      	nop
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   167aa:	4b5a      	ldr	r3, [pc, #360]	; (16914 <bus_fault+0x310>)
   167ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   167ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
   167b2:	2b00      	cmp	r3, #0
   167b4:	f000 808e 	beq.w	168d4 <bus_fault+0x2d0>
		PR_FAULT_INFO("  Precise data bus error");
   167b8:	2303      	movs	r3, #3
   167ba:	2b00      	cmp	r3, #0
   167bc:	d038      	beq.n	16830 <bus_fault+0x22c>
   167be:	f00d fdf2 	bl	243a6 <k_is_user_context>
   167c2:	4603      	mov	r3, r0
   167c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
   167c8:	2300      	movs	r3, #0
   167ca:	637b      	str	r3, [r7, #52]	; 0x34
   167cc:	2303      	movs	r3, #3
   167ce:	2b00      	cmp	r3, #0
   167d0:	d007      	beq.n	167e2 <bus_fault+0x1de>
   167d2:	4b4e      	ldr	r3, [pc, #312]	; (1690c <bus_fault+0x308>)
   167d4:	681b      	ldr	r3, [r3, #0]
   167d6:	4618      	mov	r0, r3
   167d8:	f7ff fcca 	bl	16170 <log_const_source_id>
   167dc:	4603      	mov	r3, r0
   167de:	b29b      	uxth	r3, r3
   167e0:	e000      	b.n	167e4 <bus_fault+0x1e0>
   167e2:	2300      	movs	r3, #0
   167e4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
   167e8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   167ec:	2201      	movs	r2, #1
   167ee:	f362 0302 	bfi	r3, r2, #0, #3
   167f2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   167f6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   167fa:	f36f 03c5 	bfc	r3, #3, #3
   167fe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   16802:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
   16806:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1680a:	b29a      	uxth	r2, r3
   1680c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   1680e:	f362 138f 	bfi	r3, r2, #6, #10
   16812:	863b      	strh	r3, [r7, #48]	; 0x30
   16814:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   16818:	2b00      	cmp	r3, #0
   1681a:	d004      	beq.n	16826 <bus_fault+0x222>
   1681c:	4940      	ldr	r1, [pc, #256]	; (16920 <bus_fault+0x31c>)
   1681e:	8e38      	ldrh	r0, [r7, #48]	; 0x30
   16820:	f7fc fc96 	bl	13150 <log_from_user>
   16824:	e005      	b.n	16832 <bus_fault+0x22e>
   16826:	8e39      	ldrh	r1, [r7, #48]	; 0x30
   16828:	483d      	ldr	r0, [pc, #244]	; (16920 <bus_fault+0x31c>)
   1682a:	f00c f96b 	bl	22b04 <log_0>
   1682e:	e000      	b.n	16832 <bus_fault+0x22e>
   16830:	bf00      	nop
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   16832:	4b38      	ldr	r3, [pc, #224]	; (16914 <bus_fault+0x310>)
   16834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   16836:	663b      	str	r3, [r7, #96]	; 0x60

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   16838:	4b36      	ldr	r3, [pc, #216]	; (16914 <bus_fault+0x310>)
   1683a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1683c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   16840:	2b00      	cmp	r3, #0
   16842:	d047      	beq.n	168d4 <bus_fault+0x2d0>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   16844:	2303      	movs	r3, #3
   16846:	2b00      	cmp	r3, #0
   16848:	d03a      	beq.n	168c0 <bus_fault+0x2bc>
   1684a:	f00d fdac 	bl	243a6 <k_is_user_context>
   1684e:	4603      	mov	r3, r0
   16850:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
   16854:	2300      	movs	r3, #0
   16856:	62fb      	str	r3, [r7, #44]	; 0x2c
   16858:	2303      	movs	r3, #3
   1685a:	2b00      	cmp	r3, #0
   1685c:	d007      	beq.n	1686e <bus_fault+0x26a>
   1685e:	4b2b      	ldr	r3, [pc, #172]	; (1690c <bus_fault+0x308>)
   16860:	681b      	ldr	r3, [r3, #0]
   16862:	4618      	mov	r0, r3
   16864:	f7ff fc84 	bl	16170 <log_const_source_id>
   16868:	4603      	mov	r3, r0
   1686a:	b29b      	uxth	r3, r3
   1686c:	e000      	b.n	16870 <bus_fault+0x26c>
   1686e:	2300      	movs	r3, #0
   16870:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
   16874:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   16878:	2201      	movs	r2, #1
   1687a:	f362 0302 	bfi	r3, r2, #0, #3
   1687e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
   16882:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   16886:	f36f 03c5 	bfc	r3, #3, #3
   1688a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
   1688e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
   16892:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16896:	b29a      	uxth	r2, r3
   16898:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   1689a:	f362 138f 	bfi	r3, r2, #6, #10
   1689e:	853b      	strh	r3, [r7, #40]	; 0x28
   168a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   168a4:	2b00      	cmp	r3, #0
   168a6:	d005      	beq.n	168b4 <bus_fault+0x2b0>
   168a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   168aa:	491e      	ldr	r1, [pc, #120]	; (16924 <bus_fault+0x320>)
   168ac:	8d38      	ldrh	r0, [r7, #40]	; 0x28
   168ae:	f7fc fc4f 	bl	13150 <log_from_user>
   168b2:	e006      	b.n	168c2 <bus_fault+0x2be>
   168b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   168b6:	6e39      	ldr	r1, [r7, #96]	; 0x60
   168b8:	481a      	ldr	r0, [pc, #104]	; (16924 <bus_fault+0x320>)
   168ba:	f00c f938 	bl	22b2e <log_1>
   168be:	e000      	b.n	168c2 <bus_fault+0x2be>
   168c0:	bf00      	nop
			if (from_hard_fault != 0) {
   168c2:	68bb      	ldr	r3, [r7, #8]
   168c4:	2b00      	cmp	r3, #0
   168c6:	d005      	beq.n	168d4 <bus_fault+0x2d0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   168c8:	4b12      	ldr	r3, [pc, #72]	; (16914 <bus_fault+0x310>)
   168ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   168cc:	4a11      	ldr	r2, [pc, #68]	; (16914 <bus_fault+0x310>)
   168ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   168d2:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   168d4:	4b0f      	ldr	r3, [pc, #60]	; (16914 <bus_fault+0x310>)
   168d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   168d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   168dc:	2b00      	cmp	r3, #0
   168de:	d04b      	beq.n	16978 <bus_fault+0x374>
		PR_FAULT_INFO("  Imprecise data bus error");
   168e0:	2303      	movs	r3, #3
   168e2:	2b00      	cmp	r3, #0
   168e4:	d047      	beq.n	16976 <bus_fault+0x372>
   168e6:	f00d fd5e 	bl	243a6 <k_is_user_context>
   168ea:	4603      	mov	r3, r0
   168ec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
   168f0:	2300      	movs	r3, #0
   168f2:	627b      	str	r3, [r7, #36]	; 0x24
   168f4:	2303      	movs	r3, #3
   168f6:	2b00      	cmp	r3, #0
   168f8:	d016      	beq.n	16928 <bus_fault+0x324>
   168fa:	4b04      	ldr	r3, [pc, #16]	; (1690c <bus_fault+0x308>)
   168fc:	681b      	ldr	r3, [r3, #0]
   168fe:	4618      	mov	r0, r3
   16900:	f7ff fc36 	bl	16170 <log_const_source_id>
   16904:	4603      	mov	r3, r0
   16906:	b29b      	uxth	r3, r3
   16908:	e00f      	b.n	1692a <bus_fault+0x326>
   1690a:	bf00      	nop
   1690c:	20014528 	.word	0x20014528
   16910:	0002a7f0 	.word	0x0002a7f0
   16914:	e000ed00 	.word	0xe000ed00
   16918:	0002a808 	.word	0x0002a808
   1691c:	0002a650 	.word	0x0002a650
   16920:	0002a81c 	.word	0x0002a81c
   16924:	0002a838 	.word	0x0002a838
   16928:	2300      	movs	r3, #0
   1692a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
   1692e:	f897 3020 	ldrb.w	r3, [r7, #32]
   16932:	2201      	movs	r2, #1
   16934:	f362 0302 	bfi	r3, r2, #0, #3
   16938:	f887 3020 	strb.w	r3, [r7, #32]
   1693c:	f897 3020 	ldrb.w	r3, [r7, #32]
   16940:	f36f 03c5 	bfc	r3, #3, #3
   16944:	f887 3020 	strb.w	r3, [r7, #32]
   16948:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
   1694c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16950:	b29a      	uxth	r2, r3
   16952:	8c3b      	ldrh	r3, [r7, #32]
   16954:	f362 138f 	bfi	r3, r2, #6, #10
   16958:	843b      	strh	r3, [r7, #32]
   1695a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   1695e:	2b00      	cmp	r3, #0
   16960:	d004      	beq.n	1696c <bus_fault+0x368>
   16962:	494e      	ldr	r1, [pc, #312]	; (16a9c <bus_fault+0x498>)
   16964:	8c38      	ldrh	r0, [r7, #32]
   16966:	f7fc fbf3 	bl	13150 <log_from_user>
   1696a:	e005      	b.n	16978 <bus_fault+0x374>
   1696c:	8c39      	ldrh	r1, [r7, #32]
   1696e:	484b      	ldr	r0, [pc, #300]	; (16a9c <bus_fault+0x498>)
   16970:	f00c f8c8 	bl	22b04 <log_0>
   16974:	e000      	b.n	16978 <bus_fault+0x374>
   16976:	bf00      	nop
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   16978:	4b49      	ldr	r3, [pc, #292]	; (16aa0 <bus_fault+0x49c>)
   1697a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1697c:	f403 7380 	and.w	r3, r3, #256	; 0x100
   16980:	2b00      	cmp	r3, #0
   16982:	d037      	beq.n	169f4 <bus_fault+0x3f0>
		PR_FAULT_INFO("  Instruction bus error");
   16984:	2303      	movs	r3, #3
   16986:	2b00      	cmp	r3, #0
   16988:	d072      	beq.n	16a70 <bus_fault+0x46c>
   1698a:	f00d fd0c 	bl	243a6 <k_is_user_context>
   1698e:	4603      	mov	r3, r0
   16990:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
   16994:	2300      	movs	r3, #0
   16996:	61fb      	str	r3, [r7, #28]
   16998:	2303      	movs	r3, #3
   1699a:	2b00      	cmp	r3, #0
   1699c:	d007      	beq.n	169ae <bus_fault+0x3aa>
   1699e:	4b41      	ldr	r3, [pc, #260]	; (16aa4 <bus_fault+0x4a0>)
   169a0:	681b      	ldr	r3, [r3, #0]
   169a2:	4618      	mov	r0, r3
   169a4:	f7ff fbe4 	bl	16170 <log_const_source_id>
   169a8:	4603      	mov	r3, r0
   169aa:	b29b      	uxth	r3, r3
   169ac:	e000      	b.n	169b0 <bus_fault+0x3ac>
   169ae:	2300      	movs	r3, #0
   169b0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
   169b4:	7e3b      	ldrb	r3, [r7, #24]
   169b6:	2201      	movs	r2, #1
   169b8:	f362 0302 	bfi	r3, r2, #0, #3
   169bc:	763b      	strb	r3, [r7, #24]
   169be:	7e3b      	ldrb	r3, [r7, #24]
   169c0:	f36f 03c5 	bfc	r3, #3, #3
   169c4:	763b      	strb	r3, [r7, #24]
   169c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   169ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
   169ce:	b29a      	uxth	r2, r3
   169d0:	8b3b      	ldrh	r3, [r7, #24]
   169d2:	f362 138f 	bfi	r3, r2, #6, #10
   169d6:	833b      	strh	r3, [r7, #24]
   169d8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
   169dc:	2b00      	cmp	r3, #0
   169de:	d004      	beq.n	169ea <bus_fault+0x3e6>
   169e0:	4931      	ldr	r1, [pc, #196]	; (16aa8 <bus_fault+0x4a4>)
   169e2:	8b38      	ldrh	r0, [r7, #24]
   169e4:	f7fc fbb4 	bl	13150 <log_from_user>
   169e8:	e045      	b.n	16a76 <bus_fault+0x472>
   169ea:	8b39      	ldrh	r1, [r7, #24]
   169ec:	482e      	ldr	r0, [pc, #184]	; (16aa8 <bus_fault+0x4a4>)
   169ee:	f00c f889 	bl	22b04 <log_0>
   169f2:	e040      	b.n	16a76 <bus_fault+0x472>
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   169f4:	4b2a      	ldr	r3, [pc, #168]	; (16aa0 <bus_fault+0x49c>)
   169f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   169f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   169fc:	2b00      	cmp	r3, #0
   169fe:	d03a      	beq.n	16a76 <bus_fault+0x472>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   16a00:	2303      	movs	r3, #3
   16a02:	2b00      	cmp	r3, #0
   16a04:	d036      	beq.n	16a74 <bus_fault+0x470>
   16a06:	f00d fcce 	bl	243a6 <k_is_user_context>
   16a0a:	4603      	mov	r3, r0
   16a0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
   16a10:	2300      	movs	r3, #0
   16a12:	617b      	str	r3, [r7, #20]
   16a14:	2303      	movs	r3, #3
   16a16:	2b00      	cmp	r3, #0
   16a18:	d007      	beq.n	16a2a <bus_fault+0x426>
   16a1a:	4b22      	ldr	r3, [pc, #136]	; (16aa4 <bus_fault+0x4a0>)
   16a1c:	681b      	ldr	r3, [r3, #0]
   16a1e:	4618      	mov	r0, r3
   16a20:	f7ff fba6 	bl	16170 <log_const_source_id>
   16a24:	4603      	mov	r3, r0
   16a26:	b29b      	uxth	r3, r3
   16a28:	e000      	b.n	16a2c <bus_fault+0x428>
   16a2a:	2300      	movs	r3, #0
   16a2c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
   16a30:	7c3b      	ldrb	r3, [r7, #16]
   16a32:	2201      	movs	r2, #1
   16a34:	f362 0302 	bfi	r3, r2, #0, #3
   16a38:	743b      	strb	r3, [r7, #16]
   16a3a:	7c3b      	ldrb	r3, [r7, #16]
   16a3c:	f36f 03c5 	bfc	r3, #3, #3
   16a40:	743b      	strb	r3, [r7, #16]
   16a42:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   16a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16a4a:	b29a      	uxth	r2, r3
   16a4c:	8a3b      	ldrh	r3, [r7, #16]
   16a4e:	f362 138f 	bfi	r3, r2, #6, #10
   16a52:	823b      	strh	r3, [r7, #16]
   16a54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   16a58:	2b00      	cmp	r3, #0
   16a5a:	d004      	beq.n	16a66 <bus_fault+0x462>
   16a5c:	4913      	ldr	r1, [pc, #76]	; (16aac <bus_fault+0x4a8>)
   16a5e:	8a38      	ldrh	r0, [r7, #16]
   16a60:	f7fc fb76 	bl	13150 <log_from_user>
   16a64:	e007      	b.n	16a76 <bus_fault+0x472>
   16a66:	8a39      	ldrh	r1, [r7, #16]
   16a68:	4810      	ldr	r0, [pc, #64]	; (16aac <bus_fault+0x4a8>)
   16a6a:	f00c f84b 	bl	22b04 <log_0>
   16a6e:	e002      	b.n	16a76 <bus_fault+0x472>
		PR_FAULT_INFO("  Instruction bus error");
   16a70:	bf00      	nop
   16a72:	e000      	b.n	16a76 <bus_fault+0x472>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   16a74:	bf00      	nop
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   16a76:	4b0a      	ldr	r3, [pc, #40]	; (16aa0 <bus_fault+0x49c>)
   16a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16a7a:	4a09      	ldr	r2, [pc, #36]	; (16aa0 <bus_fault+0x49c>)
   16a7c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   16a80:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   16a82:	2101      	movs	r1, #1
   16a84:	68f8      	ldr	r0, [r7, #12]
   16a86:	f00d fc9f 	bl	243c8 <memory_fault_recoverable>
   16a8a:	4603      	mov	r3, r0
   16a8c:	461a      	mov	r2, r3
   16a8e:	687b      	ldr	r3, [r7, #4]
   16a90:	701a      	strb	r2, [r3, #0]

	return reason;
   16a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   16a94:	4618      	mov	r0, r3
   16a96:	3778      	adds	r7, #120	; 0x78
   16a98:	46bd      	mov	sp, r7
   16a9a:	bd80      	pop	{r7, pc}
   16a9c:	0002a850 	.word	0x0002a850
   16aa0:	e000ed00 	.word	0xe000ed00
   16aa4:	20014528 	.word	0x20014528
   16aa8:	0002a86c 	.word	0x0002a86c
   16aac:	0002a6b4 	.word	0x0002a6b4

00016ab0 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
   16ab0:	b580      	push	{r7, lr}
   16ab2:	b09c      	sub	sp, #112	; 0x70
   16ab4:	af00      	add	r7, sp, #0
   16ab6:	6078      	str	r0, [r7, #4]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   16ab8:	2300      	movs	r3, #0
   16aba:	66fb      	str	r3, [r7, #108]	; 0x6c

	PR_FAULT_INFO("***** USAGE FAULT *****");
   16abc:	2303      	movs	r3, #3
   16abe:	2b00      	cmp	r3, #0
   16ac0:	d03c      	beq.n	16b3c <usage_fault+0x8c>
   16ac2:	f00d fc70 	bl	243a6 <k_is_user_context>
   16ac6:	4603      	mov	r3, r0
   16ac8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
   16acc:	2300      	movs	r3, #0
   16ace:	64bb      	str	r3, [r7, #72]	; 0x48
   16ad0:	2303      	movs	r3, #3
   16ad2:	2b00      	cmp	r3, #0
   16ad4:	d007      	beq.n	16ae6 <usage_fault+0x36>
   16ad6:	4bc0      	ldr	r3, [pc, #768]	; (16dd8 <usage_fault+0x328>)
   16ad8:	681b      	ldr	r3, [r3, #0]
   16ada:	4618      	mov	r0, r3
   16adc:	f7ff fb48 	bl	16170 <log_const_source_id>
   16ae0:	4603      	mov	r3, r0
   16ae2:	b29b      	uxth	r3, r3
   16ae4:	e000      	b.n	16ae8 <usage_fault+0x38>
   16ae6:	2300      	movs	r3, #0
   16ae8:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
   16aec:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
   16af0:	2201      	movs	r2, #1
   16af2:	f362 0302 	bfi	r3, r2, #0, #3
   16af6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
   16afa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
   16afe:	f36f 03c5 	bfc	r3, #3, #3
   16b02:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
   16b06:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
   16b0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16b0e:	b29a      	uxth	r2, r3
   16b10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
   16b14:	f362 138f 	bfi	r3, r2, #6, #10
   16b18:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
   16b1c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
   16b20:	2b00      	cmp	r3, #0
   16b22:	d005      	beq.n	16b30 <usage_fault+0x80>
   16b24:	49ad      	ldr	r1, [pc, #692]	; (16ddc <usage_fault+0x32c>)
   16b26:	f8b7 0044 	ldrh.w	r0, [r7, #68]	; 0x44
   16b2a:	f7fc fb11 	bl	13150 <log_from_user>
   16b2e:	e006      	b.n	16b3e <usage_fault+0x8e>
   16b30:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
   16b34:	48a9      	ldr	r0, [pc, #676]	; (16ddc <usage_fault+0x32c>)
   16b36:	f00b ffe5 	bl	22b04 <log_0>
   16b3a:	e000      	b.n	16b3e <usage_fault+0x8e>
   16b3c:	bf00      	nop

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   16b3e:	4ba8      	ldr	r3, [pc, #672]	; (16de0 <usage_fault+0x330>)
   16b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   16b46:	2b00      	cmp	r3, #0
   16b48:	d03c      	beq.n	16bc4 <usage_fault+0x114>
		PR_FAULT_INFO("  Division by zero");
   16b4a:	2303      	movs	r3, #3
   16b4c:	2b00      	cmp	r3, #0
   16b4e:	d038      	beq.n	16bc2 <usage_fault+0x112>
   16b50:	f00d fc29 	bl	243a6 <k_is_user_context>
   16b54:	4603      	mov	r3, r0
   16b56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
   16b5a:	2300      	movs	r3, #0
   16b5c:	643b      	str	r3, [r7, #64]	; 0x40
   16b5e:	2303      	movs	r3, #3
   16b60:	2b00      	cmp	r3, #0
   16b62:	d007      	beq.n	16b74 <usage_fault+0xc4>
   16b64:	4b9c      	ldr	r3, [pc, #624]	; (16dd8 <usage_fault+0x328>)
   16b66:	681b      	ldr	r3, [r3, #0]
   16b68:	4618      	mov	r0, r3
   16b6a:	f7ff fb01 	bl	16170 <log_const_source_id>
   16b6e:	4603      	mov	r3, r0
   16b70:	b29b      	uxth	r3, r3
   16b72:	e000      	b.n	16b76 <usage_fault+0xc6>
   16b74:	2300      	movs	r3, #0
   16b76:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
   16b7a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   16b7e:	2201      	movs	r2, #1
   16b80:	f362 0302 	bfi	r3, r2, #0, #3
   16b84:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
   16b88:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   16b8c:	f36f 03c5 	bfc	r3, #3, #3
   16b90:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
   16b94:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
   16b98:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16b9c:	b29a      	uxth	r2, r3
   16b9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
   16ba0:	f362 138f 	bfi	r3, r2, #6, #10
   16ba4:	87bb      	strh	r3, [r7, #60]	; 0x3c
   16ba6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
   16baa:	2b00      	cmp	r3, #0
   16bac:	d004      	beq.n	16bb8 <usage_fault+0x108>
   16bae:	498d      	ldr	r1, [pc, #564]	; (16de4 <usage_fault+0x334>)
   16bb0:	8fb8      	ldrh	r0, [r7, #60]	; 0x3c
   16bb2:	f7fc facd 	bl	13150 <log_from_user>
   16bb6:	e005      	b.n	16bc4 <usage_fault+0x114>
   16bb8:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
   16bba:	488a      	ldr	r0, [pc, #552]	; (16de4 <usage_fault+0x334>)
   16bbc:	f00b ffa2 	bl	22b04 <log_0>
   16bc0:	e000      	b.n	16bc4 <usage_fault+0x114>
   16bc2:	bf00      	nop
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   16bc4:	4b86      	ldr	r3, [pc, #536]	; (16de0 <usage_fault+0x330>)
   16bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   16bcc:	2b00      	cmp	r3, #0
   16bce:	d03c      	beq.n	16c4a <usage_fault+0x19a>
		PR_FAULT_INFO("  Unaligned memory access");
   16bd0:	2303      	movs	r3, #3
   16bd2:	2b00      	cmp	r3, #0
   16bd4:	d038      	beq.n	16c48 <usage_fault+0x198>
   16bd6:	f00d fbe6 	bl	243a6 <k_is_user_context>
   16bda:	4603      	mov	r3, r0
   16bdc:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
   16be0:	2300      	movs	r3, #0
   16be2:	63bb      	str	r3, [r7, #56]	; 0x38
   16be4:	2303      	movs	r3, #3
   16be6:	2b00      	cmp	r3, #0
   16be8:	d007      	beq.n	16bfa <usage_fault+0x14a>
   16bea:	4b7b      	ldr	r3, [pc, #492]	; (16dd8 <usage_fault+0x328>)
   16bec:	681b      	ldr	r3, [r3, #0]
   16bee:	4618      	mov	r0, r3
   16bf0:	f7ff fabe 	bl	16170 <log_const_source_id>
   16bf4:	4603      	mov	r3, r0
   16bf6:	b29b      	uxth	r3, r3
   16bf8:	e000      	b.n	16bfc <usage_fault+0x14c>
   16bfa:	2300      	movs	r3, #0
   16bfc:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
   16c00:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   16c04:	2201      	movs	r2, #1
   16c06:	f362 0302 	bfi	r3, r2, #0, #3
   16c0a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
   16c0e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   16c12:	f36f 03c5 	bfc	r3, #3, #3
   16c16:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
   16c1a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
   16c1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16c22:	b29a      	uxth	r2, r3
   16c24:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   16c26:	f362 138f 	bfi	r3, r2, #6, #10
   16c2a:	86bb      	strh	r3, [r7, #52]	; 0x34
   16c2c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
   16c30:	2b00      	cmp	r3, #0
   16c32:	d004      	beq.n	16c3e <usage_fault+0x18e>
   16c34:	496c      	ldr	r1, [pc, #432]	; (16de8 <usage_fault+0x338>)
   16c36:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
   16c38:	f7fc fa8a 	bl	13150 <log_from_user>
   16c3c:	e005      	b.n	16c4a <usage_fault+0x19a>
   16c3e:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
   16c40:	4869      	ldr	r0, [pc, #420]	; (16de8 <usage_fault+0x338>)
   16c42:	f00b ff5f 	bl	22b04 <log_0>
   16c46:	e000      	b.n	16c4a <usage_fault+0x19a>
   16c48:	bf00      	nop
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   16c4a:	4b65      	ldr	r3, [pc, #404]	; (16de0 <usage_fault+0x330>)
   16c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
   16c52:	2b00      	cmp	r3, #0
   16c54:	d03e      	beq.n	16cd4 <usage_fault+0x224>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   16c56:	2303      	movs	r3, #3
   16c58:	2b00      	cmp	r3, #0
   16c5a:	d038      	beq.n	16cce <usage_fault+0x21e>
   16c5c:	f00d fba3 	bl	243a6 <k_is_user_context>
   16c60:	4603      	mov	r3, r0
   16c62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
   16c66:	2300      	movs	r3, #0
   16c68:	633b      	str	r3, [r7, #48]	; 0x30
   16c6a:	2303      	movs	r3, #3
   16c6c:	2b00      	cmp	r3, #0
   16c6e:	d007      	beq.n	16c80 <usage_fault+0x1d0>
   16c70:	4b59      	ldr	r3, [pc, #356]	; (16dd8 <usage_fault+0x328>)
   16c72:	681b      	ldr	r3, [r3, #0]
   16c74:	4618      	mov	r0, r3
   16c76:	f7ff fa7b 	bl	16170 <log_const_source_id>
   16c7a:	4603      	mov	r3, r0
   16c7c:	b29b      	uxth	r3, r3
   16c7e:	e000      	b.n	16c82 <usage_fault+0x1d2>
   16c80:	2300      	movs	r3, #0
   16c82:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
   16c86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   16c8a:	2201      	movs	r2, #1
   16c8c:	f362 0302 	bfi	r3, r2, #0, #3
   16c90:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   16c94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   16c98:	f36f 03c5 	bfc	r3, #3, #3
   16c9c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   16ca0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
   16ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16ca8:	b29a      	uxth	r2, r3
   16caa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   16cac:	f362 138f 	bfi	r3, r2, #6, #10
   16cb0:	85bb      	strh	r3, [r7, #44]	; 0x2c
   16cb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   16cb6:	2b00      	cmp	r3, #0
   16cb8:	d004      	beq.n	16cc4 <usage_fault+0x214>
   16cba:	494c      	ldr	r1, [pc, #304]	; (16dec <usage_fault+0x33c>)
   16cbc:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
   16cbe:	f7fc fa47 	bl	13150 <log_from_user>
   16cc2:	e005      	b.n	16cd0 <usage_fault+0x220>
   16cc4:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
   16cc6:	4849      	ldr	r0, [pc, #292]	; (16dec <usage_fault+0x33c>)
   16cc8:	f00b ff1c 	bl	22b04 <log_0>
   16ccc:	e000      	b.n	16cd0 <usage_fault+0x220>
   16cce:	bf00      	nop
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   16cd0:	2302      	movs	r3, #2
   16cd2:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   16cd4:	4b42      	ldr	r3, [pc, #264]	; (16de0 <usage_fault+0x330>)
   16cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16cd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   16cdc:	2b00      	cmp	r3, #0
   16cde:	d03c      	beq.n	16d5a <usage_fault+0x2aa>
		PR_FAULT_INFO("  No coprocessor instructions");
   16ce0:	2303      	movs	r3, #3
   16ce2:	2b00      	cmp	r3, #0
   16ce4:	d038      	beq.n	16d58 <usage_fault+0x2a8>
   16ce6:	f00d fb5e 	bl	243a6 <k_is_user_context>
   16cea:	4603      	mov	r3, r0
   16cec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
   16cf0:	2300      	movs	r3, #0
   16cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   16cf4:	2303      	movs	r3, #3
   16cf6:	2b00      	cmp	r3, #0
   16cf8:	d007      	beq.n	16d0a <usage_fault+0x25a>
   16cfa:	4b37      	ldr	r3, [pc, #220]	; (16dd8 <usage_fault+0x328>)
   16cfc:	681b      	ldr	r3, [r3, #0]
   16cfe:	4618      	mov	r0, r3
   16d00:	f7ff fa36 	bl	16170 <log_const_source_id>
   16d04:	4603      	mov	r3, r0
   16d06:	b29b      	uxth	r3, r3
   16d08:	e000      	b.n	16d0c <usage_fault+0x25c>
   16d0a:	2300      	movs	r3, #0
   16d0c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
   16d10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   16d14:	2201      	movs	r2, #1
   16d16:	f362 0302 	bfi	r3, r2, #0, #3
   16d1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   16d1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   16d22:	f36f 03c5 	bfc	r3, #3, #3
   16d26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   16d2a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
   16d2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16d32:	b29a      	uxth	r2, r3
   16d34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   16d36:	f362 138f 	bfi	r3, r2, #6, #10
   16d3a:	84bb      	strh	r3, [r7, #36]	; 0x24
   16d3c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   16d40:	2b00      	cmp	r3, #0
   16d42:	d004      	beq.n	16d4e <usage_fault+0x29e>
   16d44:	492a      	ldr	r1, [pc, #168]	; (16df0 <usage_fault+0x340>)
   16d46:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
   16d48:	f7fc fa02 	bl	13150 <log_from_user>
   16d4c:	e005      	b.n	16d5a <usage_fault+0x2aa>
   16d4e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
   16d50:	4827      	ldr	r0, [pc, #156]	; (16df0 <usage_fault+0x340>)
   16d52:	f00b fed7 	bl	22b04 <log_0>
   16d56:	e000      	b.n	16d5a <usage_fault+0x2aa>
   16d58:	bf00      	nop
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   16d5a:	4b21      	ldr	r3, [pc, #132]	; (16de0 <usage_fault+0x330>)
   16d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   16d62:	2b00      	cmp	r3, #0
   16d64:	d049      	beq.n	16dfa <usage_fault+0x34a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   16d66:	2303      	movs	r3, #3
   16d68:	2b00      	cmp	r3, #0
   16d6a:	d045      	beq.n	16df8 <usage_fault+0x348>
   16d6c:	f00d fb1b 	bl	243a6 <k_is_user_context>
   16d70:	4603      	mov	r3, r0
   16d72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
   16d76:	2300      	movs	r3, #0
   16d78:	623b      	str	r3, [r7, #32]
   16d7a:	2303      	movs	r3, #3
   16d7c:	2b00      	cmp	r3, #0
   16d7e:	d007      	beq.n	16d90 <usage_fault+0x2e0>
   16d80:	4b15      	ldr	r3, [pc, #84]	; (16dd8 <usage_fault+0x328>)
   16d82:	681b      	ldr	r3, [r3, #0]
   16d84:	4618      	mov	r0, r3
   16d86:	f7ff f9f3 	bl	16170 <log_const_source_id>
   16d8a:	4603      	mov	r3, r0
   16d8c:	b29b      	uxth	r3, r3
   16d8e:	e000      	b.n	16d92 <usage_fault+0x2e2>
   16d90:	2300      	movs	r3, #0
   16d92:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
   16d96:	7f3b      	ldrb	r3, [r7, #28]
   16d98:	2201      	movs	r2, #1
   16d9a:	f362 0302 	bfi	r3, r2, #0, #3
   16d9e:	773b      	strb	r3, [r7, #28]
   16da0:	7f3b      	ldrb	r3, [r7, #28]
   16da2:	f36f 03c5 	bfc	r3, #3, #3
   16da6:	773b      	strb	r3, [r7, #28]
   16da8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   16dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16db0:	b29a      	uxth	r2, r3
   16db2:	8bbb      	ldrh	r3, [r7, #28]
   16db4:	f362 138f 	bfi	r3, r2, #6, #10
   16db8:	83bb      	strh	r3, [r7, #28]
   16dba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   16dbe:	2b00      	cmp	r3, #0
   16dc0:	d004      	beq.n	16dcc <usage_fault+0x31c>
   16dc2:	490c      	ldr	r1, [pc, #48]	; (16df4 <usage_fault+0x344>)
   16dc4:	8bb8      	ldrh	r0, [r7, #28]
   16dc6:	f7fc f9c3 	bl	13150 <log_from_user>
   16dca:	e016      	b.n	16dfa <usage_fault+0x34a>
   16dcc:	8bb9      	ldrh	r1, [r7, #28]
   16dce:	4809      	ldr	r0, [pc, #36]	; (16df4 <usage_fault+0x344>)
   16dd0:	f00b fe98 	bl	22b04 <log_0>
   16dd4:	e011      	b.n	16dfa <usage_fault+0x34a>
   16dd6:	bf00      	nop
   16dd8:	20014528 	.word	0x20014528
   16ddc:	0002a884 	.word	0x0002a884
   16de0:	e000ed00 	.word	0xe000ed00
   16de4:	0002a89c 	.word	0x0002a89c
   16de8:	0002a8b0 	.word	0x0002a8b0
   16dec:	0002a8cc 	.word	0x0002a8cc
   16df0:	0002a8f8 	.word	0x0002a8f8
   16df4:	0002a918 	.word	0x0002a918
   16df8:	bf00      	nop
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   16dfa:	4b45      	ldr	r3, [pc, #276]	; (16f10 <usage_fault+0x460>)
   16dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   16e02:	2b00      	cmp	r3, #0
   16e04:	d038      	beq.n	16e78 <usage_fault+0x3c8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   16e06:	2303      	movs	r3, #3
   16e08:	2b00      	cmp	r3, #0
   16e0a:	d034      	beq.n	16e76 <usage_fault+0x3c6>
   16e0c:	f00d facb 	bl	243a6 <k_is_user_context>
   16e10:	4603      	mov	r3, r0
   16e12:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
   16e16:	2300      	movs	r3, #0
   16e18:	61bb      	str	r3, [r7, #24]
   16e1a:	2303      	movs	r3, #3
   16e1c:	2b00      	cmp	r3, #0
   16e1e:	d007      	beq.n	16e30 <usage_fault+0x380>
   16e20:	4b3c      	ldr	r3, [pc, #240]	; (16f14 <usage_fault+0x464>)
   16e22:	681b      	ldr	r3, [r3, #0]
   16e24:	4618      	mov	r0, r3
   16e26:	f7ff f9a3 	bl	16170 <log_const_source_id>
   16e2a:	4603      	mov	r3, r0
   16e2c:	b29b      	uxth	r3, r3
   16e2e:	e000      	b.n	16e32 <usage_fault+0x382>
   16e30:	2300      	movs	r3, #0
   16e32:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
   16e36:	7d3b      	ldrb	r3, [r7, #20]
   16e38:	2201      	movs	r2, #1
   16e3a:	f362 0302 	bfi	r3, r2, #0, #3
   16e3e:	753b      	strb	r3, [r7, #20]
   16e40:	7d3b      	ldrb	r3, [r7, #20]
   16e42:	f36f 03c5 	bfc	r3, #3, #3
   16e46:	753b      	strb	r3, [r7, #20]
   16e48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   16e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16e50:	b29a      	uxth	r2, r3
   16e52:	8abb      	ldrh	r3, [r7, #20]
   16e54:	f362 138f 	bfi	r3, r2, #6, #10
   16e58:	82bb      	strh	r3, [r7, #20]
   16e5a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
   16e5e:	2b00      	cmp	r3, #0
   16e60:	d004      	beq.n	16e6c <usage_fault+0x3bc>
   16e62:	492d      	ldr	r1, [pc, #180]	; (16f18 <usage_fault+0x468>)
   16e64:	8ab8      	ldrh	r0, [r7, #20]
   16e66:	f7fc f973 	bl	13150 <log_from_user>
   16e6a:	e005      	b.n	16e78 <usage_fault+0x3c8>
   16e6c:	8ab9      	ldrh	r1, [r7, #20]
   16e6e:	482a      	ldr	r0, [pc, #168]	; (16f18 <usage_fault+0x468>)
   16e70:	f00b fe48 	bl	22b04 <log_0>
   16e74:	e000      	b.n	16e78 <usage_fault+0x3c8>
   16e76:	bf00      	nop
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   16e78:	4b25      	ldr	r3, [pc, #148]	; (16f10 <usage_fault+0x460>)
   16e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   16e80:	2b00      	cmp	r3, #0
   16e82:	d038      	beq.n	16ef6 <usage_fault+0x446>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   16e84:	2303      	movs	r3, #3
   16e86:	2b00      	cmp	r3, #0
   16e88:	d034      	beq.n	16ef4 <usage_fault+0x444>
   16e8a:	f00d fa8c 	bl	243a6 <k_is_user_context>
   16e8e:	4603      	mov	r3, r0
   16e90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
   16e94:	2300      	movs	r3, #0
   16e96:	613b      	str	r3, [r7, #16]
   16e98:	2303      	movs	r3, #3
   16e9a:	2b00      	cmp	r3, #0
   16e9c:	d007      	beq.n	16eae <usage_fault+0x3fe>
   16e9e:	4b1d      	ldr	r3, [pc, #116]	; (16f14 <usage_fault+0x464>)
   16ea0:	681b      	ldr	r3, [r3, #0]
   16ea2:	4618      	mov	r0, r3
   16ea4:	f7ff f964 	bl	16170 <log_const_source_id>
   16ea8:	4603      	mov	r3, r0
   16eaa:	b29b      	uxth	r3, r3
   16eac:	e000      	b.n	16eb0 <usage_fault+0x400>
   16eae:	2300      	movs	r3, #0
   16eb0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
   16eb4:	7b3b      	ldrb	r3, [r7, #12]
   16eb6:	2201      	movs	r2, #1
   16eb8:	f362 0302 	bfi	r3, r2, #0, #3
   16ebc:	733b      	strb	r3, [r7, #12]
   16ebe:	7b3b      	ldrb	r3, [r7, #12]
   16ec0:	f36f 03c5 	bfc	r3, #3, #3
   16ec4:	733b      	strb	r3, [r7, #12]
   16ec6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
   16eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16ece:	b29a      	uxth	r2, r3
   16ed0:	89bb      	ldrh	r3, [r7, #12]
   16ed2:	f362 138f 	bfi	r3, r2, #6, #10
   16ed6:	81bb      	strh	r3, [r7, #12]
   16ed8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   16edc:	2b00      	cmp	r3, #0
   16ede:	d004      	beq.n	16eea <usage_fault+0x43a>
   16ee0:	490e      	ldr	r1, [pc, #56]	; (16f1c <usage_fault+0x46c>)
   16ee2:	89b8      	ldrh	r0, [r7, #12]
   16ee4:	f7fc f934 	bl	13150 <log_from_user>
   16ee8:	e005      	b.n	16ef6 <usage_fault+0x446>
   16eea:	89b9      	ldrh	r1, [r7, #12]
   16eec:	480b      	ldr	r0, [pc, #44]	; (16f1c <usage_fault+0x46c>)
   16eee:	f00b fe09 	bl	22b04 <log_0>
   16ef2:	e000      	b.n	16ef6 <usage_fault+0x446>
   16ef4:	bf00      	nop
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   16ef6:	4b06      	ldr	r3, [pc, #24]	; (16f10 <usage_fault+0x460>)
   16ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16efa:	4a05      	ldr	r2, [pc, #20]	; (16f10 <usage_fault+0x460>)
   16efc:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   16f00:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   16f04:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
   16f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   16f08:	4618      	mov	r0, r3
   16f0a:	3770      	adds	r7, #112	; 0x70
   16f0c:	46bd      	mov	sp, r7
   16f0e:	bd80      	pop	{r7, pc}
   16f10:	e000ed00 	.word	0xe000ed00
   16f14:	20014528 	.word	0x20014528
   16f18:	0002a940 	.word	0x0002a940
   16f1c:	0002a95c 	.word	0x0002a95c

00016f20 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
   16f20:	b580      	push	{r7, lr}
   16f22:	b086      	sub	sp, #24
   16f24:	af00      	add	r7, sp, #0
   16f26:	6078      	str	r0, [r7, #4]
   16f28:	6039      	str	r1, [r7, #0]
	*recoverable = false;
   16f2a:	683b      	ldr	r3, [r7, #0]
   16f2c:	2200      	movs	r2, #0
   16f2e:	701a      	strb	r2, [r3, #0]

	PR_FAULT_INFO(
   16f30:	2303      	movs	r3, #3
   16f32:	2b00      	cmp	r3, #0
   16f34:	d101      	bne.n	16f3a <debug_monitor+0x1a>
   16f36:	bf00      	nop

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
   16f38:	e02f      	b.n	16f9a <debug_monitor+0x7a>
	PR_FAULT_INFO(
   16f3a:	f00d fa34 	bl	243a6 <k_is_user_context>
   16f3e:	4603      	mov	r3, r0
   16f40:	75fb      	strb	r3, [r7, #23]
   16f42:	2300      	movs	r3, #0
   16f44:	613b      	str	r3, [r7, #16]
   16f46:	2303      	movs	r3, #3
   16f48:	2b00      	cmp	r3, #0
   16f4a:	d007      	beq.n	16f5c <debug_monitor+0x3c>
   16f4c:	4b15      	ldr	r3, [pc, #84]	; (16fa4 <debug_monitor+0x84>)
   16f4e:	681b      	ldr	r3, [r3, #0]
   16f50:	4618      	mov	r0, r3
   16f52:	f7ff f90d 	bl	16170 <log_const_source_id>
   16f56:	4603      	mov	r3, r0
   16f58:	b29b      	uxth	r3, r3
   16f5a:	e000      	b.n	16f5e <debug_monitor+0x3e>
   16f5c:	2300      	movs	r3, #0
   16f5e:	82bb      	strh	r3, [r7, #20]
   16f60:	7b3b      	ldrb	r3, [r7, #12]
   16f62:	2201      	movs	r2, #1
   16f64:	f362 0302 	bfi	r3, r2, #0, #3
   16f68:	733b      	strb	r3, [r7, #12]
   16f6a:	7b3b      	ldrb	r3, [r7, #12]
   16f6c:	f36f 03c5 	bfc	r3, #3, #3
   16f70:	733b      	strb	r3, [r7, #12]
   16f72:	8abb      	ldrh	r3, [r7, #20]
   16f74:	f3c3 0309 	ubfx	r3, r3, #0, #10
   16f78:	b29a      	uxth	r2, r3
   16f7a:	89bb      	ldrh	r3, [r7, #12]
   16f7c:	f362 138f 	bfi	r3, r2, #6, #10
   16f80:	81bb      	strh	r3, [r7, #12]
   16f82:	7dfb      	ldrb	r3, [r7, #23]
   16f84:	2b00      	cmp	r3, #0
   16f86:	d004      	beq.n	16f92 <debug_monitor+0x72>
   16f88:	4907      	ldr	r1, [pc, #28]	; (16fa8 <debug_monitor+0x88>)
   16f8a:	89b8      	ldrh	r0, [r7, #12]
   16f8c:	f7fc f8e0 	bl	13150 <log_from_user>
}
   16f90:	e003      	b.n	16f9a <debug_monitor+0x7a>
	PR_FAULT_INFO(
   16f92:	89b9      	ldrh	r1, [r7, #12]
   16f94:	4804      	ldr	r0, [pc, #16]	; (16fa8 <debug_monitor+0x88>)
   16f96:	f00b fdb5 	bl	22b04 <log_0>
}
   16f9a:	bf00      	nop
   16f9c:	3718      	adds	r7, #24
   16f9e:	46bd      	mov	sp, r7
   16fa0:	bd80      	pop	{r7, pc}
   16fa2:	bf00      	nop
   16fa4:	20014528 	.word	0x20014528
   16fa8:	0002a988 	.word	0x0002a988

00016fac <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   16fac:	b580      	push	{r7, lr}
   16fae:	b08c      	sub	sp, #48	; 0x30
   16fb0:	af00      	add	r7, sp, #0
   16fb2:	6078      	str	r0, [r7, #4]
   16fb4:	6039      	str	r1, [r7, #0]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   16fb6:	2300      	movs	r3, #0
   16fb8:	62fb      	str	r3, [r7, #44]	; 0x2c

	PR_FAULT_INFO("***** HARD FAULT *****");
   16fba:	2303      	movs	r3, #3
   16fbc:	2b00      	cmp	r3, #0
   16fbe:	d032      	beq.n	17026 <hard_fault+0x7a>
   16fc0:	f00d f9f1 	bl	243a6 <k_is_user_context>
   16fc4:	4603      	mov	r3, r0
   16fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   16fca:	2300      	movs	r3, #0
   16fcc:	61fb      	str	r3, [r7, #28]
   16fce:	2303      	movs	r3, #3
   16fd0:	2b00      	cmp	r3, #0
   16fd2:	d007      	beq.n	16fe4 <hard_fault+0x38>
   16fd4:	4b67      	ldr	r3, [pc, #412]	; (17174 <hard_fault+0x1c8>)
   16fd6:	681b      	ldr	r3, [r3, #0]
   16fd8:	4618      	mov	r0, r3
   16fda:	f7ff f8c9 	bl	16170 <log_const_source_id>
   16fde:	4603      	mov	r3, r0
   16fe0:	b29b      	uxth	r3, r3
   16fe2:	e000      	b.n	16fe6 <hard_fault+0x3a>
   16fe4:	2300      	movs	r3, #0
   16fe6:	853b      	strh	r3, [r7, #40]	; 0x28
   16fe8:	7e3b      	ldrb	r3, [r7, #24]
   16fea:	2201      	movs	r2, #1
   16fec:	f362 0302 	bfi	r3, r2, #0, #3
   16ff0:	763b      	strb	r3, [r7, #24]
   16ff2:	7e3b      	ldrb	r3, [r7, #24]
   16ff4:	f36f 03c5 	bfc	r3, #3, #3
   16ff8:	763b      	strb	r3, [r7, #24]
   16ffa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   16ffc:	f3c3 0309 	ubfx	r3, r3, #0, #10
   17000:	b29a      	uxth	r2, r3
   17002:	8b3b      	ldrh	r3, [r7, #24]
   17004:	f362 138f 	bfi	r3, r2, #6, #10
   17008:	833b      	strh	r3, [r7, #24]
   1700a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   1700e:	2b00      	cmp	r3, #0
   17010:	d004      	beq.n	1701c <hard_fault+0x70>
   17012:	4959      	ldr	r1, [pc, #356]	; (17178 <hard_fault+0x1cc>)
   17014:	8b38      	ldrh	r0, [r7, #24]
   17016:	f7fc f89b 	bl	13150 <log_from_user>
   1701a:	e005      	b.n	17028 <hard_fault+0x7c>
   1701c:	8b39      	ldrh	r1, [r7, #24]
   1701e:	4856      	ldr	r0, [pc, #344]	; (17178 <hard_fault+0x1cc>)
   17020:	f00b fd70 	bl	22b04 <log_0>
   17024:	e000      	b.n	17028 <hard_fault+0x7c>
   17026:	bf00      	nop
	}
#undef _SVC_OPCODE

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   17028:	683b      	ldr	r3, [r7, #0]
   1702a:	2200      	movs	r2, #0
   1702c:	701a      	strb	r2, [r3, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1702e:	4b53      	ldr	r3, [pc, #332]	; (1717c <hard_fault+0x1d0>)
   17030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   17032:	f003 0302 	and.w	r3, r3, #2
   17036:	2b00      	cmp	r3, #0
   17038:	d036      	beq.n	170a8 <hard_fault+0xfc>
		PR_EXC("  Bus fault on vector table read");
   1703a:	2303      	movs	r3, #3
   1703c:	2b00      	cmp	r3, #0
   1703e:	f000 8093 	beq.w	17168 <hard_fault+0x1bc>
   17042:	f00d f9b0 	bl	243a6 <k_is_user_context>
   17046:	4603      	mov	r3, r0
   17048:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   1704c:	2300      	movs	r3, #0
   1704e:	617b      	str	r3, [r7, #20]
   17050:	2303      	movs	r3, #3
   17052:	2b00      	cmp	r3, #0
   17054:	d007      	beq.n	17066 <hard_fault+0xba>
   17056:	4b47      	ldr	r3, [pc, #284]	; (17174 <hard_fault+0x1c8>)
   17058:	681b      	ldr	r3, [r3, #0]
   1705a:	4618      	mov	r0, r3
   1705c:	f7ff f888 	bl	16170 <log_const_source_id>
   17060:	4603      	mov	r3, r0
   17062:	b29b      	uxth	r3, r3
   17064:	e000      	b.n	17068 <hard_fault+0xbc>
   17066:	2300      	movs	r3, #0
   17068:	843b      	strh	r3, [r7, #32]
   1706a:	7c3b      	ldrb	r3, [r7, #16]
   1706c:	2201      	movs	r2, #1
   1706e:	f362 0302 	bfi	r3, r2, #0, #3
   17072:	743b      	strb	r3, [r7, #16]
   17074:	7c3b      	ldrb	r3, [r7, #16]
   17076:	f36f 03c5 	bfc	r3, #3, #3
   1707a:	743b      	strb	r3, [r7, #16]
   1707c:	8c3b      	ldrh	r3, [r7, #32]
   1707e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   17082:	b29a      	uxth	r2, r3
   17084:	8a3b      	ldrh	r3, [r7, #16]
   17086:	f362 138f 	bfi	r3, r2, #6, #10
   1708a:	823b      	strh	r3, [r7, #16]
   1708c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   17090:	2b00      	cmp	r3, #0
   17092:	d004      	beq.n	1709e <hard_fault+0xf2>
   17094:	493a      	ldr	r1, [pc, #232]	; (17180 <hard_fault+0x1d4>)
   17096:	8a38      	ldrh	r0, [r7, #16]
   17098:	f7fc f85a 	bl	13150 <log_from_user>
   1709c:	e065      	b.n	1716a <hard_fault+0x1be>
   1709e:	8a39      	ldrh	r1, [r7, #16]
   170a0:	4837      	ldr	r0, [pc, #220]	; (17180 <hard_fault+0x1d4>)
   170a2:	f00b fd2f 	bl	22b04 <log_0>
   170a6:	e060      	b.n	1716a <hard_fault+0x1be>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   170a8:	4b34      	ldr	r3, [pc, #208]	; (1717c <hard_fault+0x1d0>)
   170aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   170ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
   170b0:	2b00      	cmp	r3, #0
   170b2:	d05a      	beq.n	1716a <hard_fault+0x1be>
		PR_EXC("  Fault escalation (see below)");
   170b4:	2303      	movs	r3, #3
   170b6:	2b00      	cmp	r3, #0
   170b8:	d032      	beq.n	17120 <hard_fault+0x174>
   170ba:	f00d f974 	bl	243a6 <k_is_user_context>
   170be:	4603      	mov	r3, r0
   170c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   170c4:	2300      	movs	r3, #0
   170c6:	60fb      	str	r3, [r7, #12]
   170c8:	2303      	movs	r3, #3
   170ca:	2b00      	cmp	r3, #0
   170cc:	d007      	beq.n	170de <hard_fault+0x132>
   170ce:	4b29      	ldr	r3, [pc, #164]	; (17174 <hard_fault+0x1c8>)
   170d0:	681b      	ldr	r3, [r3, #0]
   170d2:	4618      	mov	r0, r3
   170d4:	f7ff f84c 	bl	16170 <log_const_source_id>
   170d8:	4603      	mov	r3, r0
   170da:	b29b      	uxth	r3, r3
   170dc:	e000      	b.n	170e0 <hard_fault+0x134>
   170de:	2300      	movs	r3, #0
   170e0:	84bb      	strh	r3, [r7, #36]	; 0x24
   170e2:	7a3b      	ldrb	r3, [r7, #8]
   170e4:	2201      	movs	r2, #1
   170e6:	f362 0302 	bfi	r3, r2, #0, #3
   170ea:	723b      	strb	r3, [r7, #8]
   170ec:	7a3b      	ldrb	r3, [r7, #8]
   170ee:	f36f 03c5 	bfc	r3, #3, #3
   170f2:	723b      	strb	r3, [r7, #8]
   170f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   170f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
   170fa:	b29a      	uxth	r2, r3
   170fc:	893b      	ldrh	r3, [r7, #8]
   170fe:	f362 138f 	bfi	r3, r2, #6, #10
   17102:	813b      	strh	r3, [r7, #8]
   17104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   17108:	2b00      	cmp	r3, #0
   1710a:	d004      	beq.n	17116 <hard_fault+0x16a>
   1710c:	491d      	ldr	r1, [pc, #116]	; (17184 <hard_fault+0x1d8>)
   1710e:	8938      	ldrh	r0, [r7, #8]
   17110:	f7fc f81e 	bl	13150 <log_from_user>
   17114:	e005      	b.n	17122 <hard_fault+0x176>
   17116:	8939      	ldrh	r1, [r7, #8]
   17118:	481a      	ldr	r0, [pc, #104]	; (17184 <hard_fault+0x1d8>)
   1711a:	f00b fcf3 	bl	22b04 <log_0>
   1711e:	e000      	b.n	17122 <hard_fault+0x176>
   17120:	bf00      	nop
		if (SCB_MMFSR != 0) {
   17122:	4b19      	ldr	r3, [pc, #100]	; (17188 <hard_fault+0x1dc>)
   17124:	781b      	ldrb	r3, [r3, #0]
   17126:	b2db      	uxtb	r3, r3
   17128:	2b00      	cmp	r3, #0
   1712a:	d006      	beq.n	1713a <hard_fault+0x18e>
			reason = mem_manage_fault(esf, 1, recoverable);
   1712c:	683a      	ldr	r2, [r7, #0]
   1712e:	2101      	movs	r1, #1
   17130:	6878      	ldr	r0, [r7, #4]
   17132:	f7ff f82d 	bl	16190 <mem_manage_fault>
   17136:	62f8      	str	r0, [r7, #44]	; 0x2c
   17138:	e017      	b.n	1716a <hard_fault+0x1be>
		} else if (SCB_BFSR != 0) {
   1713a:	4b14      	ldr	r3, [pc, #80]	; (1718c <hard_fault+0x1e0>)
   1713c:	781b      	ldrb	r3, [r3, #0]
   1713e:	b2db      	uxtb	r3, r3
   17140:	2b00      	cmp	r3, #0
   17142:	d007      	beq.n	17154 <hard_fault+0x1a8>
			reason = bus_fault(esf, 1, recoverable);
   17144:	683a      	ldr	r2, [r7, #0]
   17146:	2101      	movs	r1, #1
   17148:	6878      	ldr	r0, [r7, #4]
   1714a:	f7ff fa5b 	bl	16604 <bus_fault>
   1714e:	4603      	mov	r3, r0
   17150:	62fb      	str	r3, [r7, #44]	; 0x2c
   17152:	e00a      	b.n	1716a <hard_fault+0x1be>
		} else if (SCB_UFSR != 0) {
   17154:	4b0e      	ldr	r3, [pc, #56]	; (17190 <hard_fault+0x1e4>)
   17156:	881b      	ldrh	r3, [r3, #0]
   17158:	b29b      	uxth	r3, r3
   1715a:	2b00      	cmp	r3, #0
   1715c:	d005      	beq.n	1716a <hard_fault+0x1be>
			reason = usage_fault(esf);
   1715e:	6878      	ldr	r0, [r7, #4]
   17160:	f7ff fca6 	bl	16ab0 <usage_fault>
   17164:	62f8      	str	r0, [r7, #44]	; 0x2c
   17166:	e000      	b.n	1716a <hard_fault+0x1be>
		PR_EXC("  Bus fault on vector table read");
   17168:	bf00      	nop
	}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
   1716a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   1716c:	4618      	mov	r0, r3
   1716e:	3730      	adds	r7, #48	; 0x30
   17170:	46bd      	mov	sp, r7
   17172:	bd80      	pop	{r7, pc}
   17174:	20014528 	.word	0x20014528
   17178:	0002a9ac 	.word	0x0002a9ac
   1717c:	e000ed00 	.word	0xe000ed00
   17180:	0002a9c4 	.word	0x0002a9c4
   17184:	0002a9e8 	.word	0x0002a9e8
   17188:	e000ed28 	.word	0xe000ed28
   1718c:	e000ed29 	.word	0xe000ed29
   17190:	e000ed2a 	.word	0xe000ed2a

00017194 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
   17194:	b580      	push	{r7, lr}
   17196:	b086      	sub	sp, #24
   17198:	af00      	add	r7, sp, #0
   1719a:	6078      	str	r0, [r7, #4]
   1719c:	6039      	str	r1, [r7, #0]
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
   1719e:	2303      	movs	r3, #3
   171a0:	2b00      	cmp	r3, #0
   171a2:	d101      	bne.n	171a8 <reserved_exception+0x14>
   171a4:	bf00      	nop
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
   171a6:	e040      	b.n	1722a <reserved_exception+0x96>
	PR_FAULT_INFO("***** %s %d) *****",
   171a8:	f00d f8fd 	bl	243a6 <k_is_user_context>
   171ac:	4603      	mov	r3, r0
   171ae:	75fb      	strb	r3, [r7, #23]
   171b0:	2300      	movs	r3, #0
   171b2:	613b      	str	r3, [r7, #16]
   171b4:	2303      	movs	r3, #3
   171b6:	2b00      	cmp	r3, #0
   171b8:	d007      	beq.n	171ca <reserved_exception+0x36>
   171ba:	4b1e      	ldr	r3, [pc, #120]	; (17234 <reserved_exception+0xa0>)
   171bc:	681b      	ldr	r3, [r3, #0]
   171be:	4618      	mov	r0, r3
   171c0:	f7fe ffd6 	bl	16170 <log_const_source_id>
   171c4:	4603      	mov	r3, r0
   171c6:	b29b      	uxth	r3, r3
   171c8:	e000      	b.n	171cc <reserved_exception+0x38>
   171ca:	2300      	movs	r3, #0
   171cc:	82bb      	strh	r3, [r7, #20]
   171ce:	7b3b      	ldrb	r3, [r7, #12]
   171d0:	2201      	movs	r2, #1
   171d2:	f362 0302 	bfi	r3, r2, #0, #3
   171d6:	733b      	strb	r3, [r7, #12]
   171d8:	7b3b      	ldrb	r3, [r7, #12]
   171da:	f36f 03c5 	bfc	r3, #3, #3
   171de:	733b      	strb	r3, [r7, #12]
   171e0:	8abb      	ldrh	r3, [r7, #20]
   171e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
   171e6:	b29a      	uxth	r2, r3
   171e8:	89bb      	ldrh	r3, [r7, #12]
   171ea:	f362 138f 	bfi	r3, r2, #6, #10
   171ee:	81bb      	strh	r3, [r7, #12]
   171f0:	7dfb      	ldrb	r3, [r7, #23]
   171f2:	2b00      	cmp	r3, #0
   171f4:	d00c      	beq.n	17210 <reserved_exception+0x7c>
   171f6:	683b      	ldr	r3, [r7, #0]
   171f8:	2b0f      	cmp	r3, #15
   171fa:	dc01      	bgt.n	17200 <reserved_exception+0x6c>
   171fc:	4a0e      	ldr	r2, [pc, #56]	; (17238 <reserved_exception+0xa4>)
   171fe:	e000      	b.n	17202 <reserved_exception+0x6e>
   17200:	4a0e      	ldr	r2, [pc, #56]	; (1723c <reserved_exception+0xa8>)
   17202:	683b      	ldr	r3, [r7, #0]
   17204:	3b10      	subs	r3, #16
   17206:	490e      	ldr	r1, [pc, #56]	; (17240 <reserved_exception+0xac>)
   17208:	89b8      	ldrh	r0, [r7, #12]
   1720a:	f7fb ffa1 	bl	13150 <log_from_user>
}
   1720e:	e00c      	b.n	1722a <reserved_exception+0x96>
	PR_FAULT_INFO("***** %s %d) *****",
   17210:	683b      	ldr	r3, [r7, #0]
   17212:	2b0f      	cmp	r3, #15
   17214:	dc01      	bgt.n	1721a <reserved_exception+0x86>
   17216:	4908      	ldr	r1, [pc, #32]	; (17238 <reserved_exception+0xa4>)
   17218:	e000      	b.n	1721c <reserved_exception+0x88>
   1721a:	4908      	ldr	r1, [pc, #32]	; (1723c <reserved_exception+0xa8>)
   1721c:	683b      	ldr	r3, [r7, #0]
   1721e:	3b10      	subs	r3, #16
   17220:	461a      	mov	r2, r3
   17222:	89bb      	ldrh	r3, [r7, #12]
   17224:	4806      	ldr	r0, [pc, #24]	; (17240 <reserved_exception+0xac>)
   17226:	f00b fc99 	bl	22b5c <log_2>
}
   1722a:	bf00      	nop
   1722c:	3718      	adds	r7, #24
   1722e:	46bd      	mov	sp, r7
   17230:	bd80      	pop	{r7, pc}
   17232:	bf00      	nop
   17234:	20014528 	.word	0x20014528
   17238:	0002aa08 	.word	0x0002aa08
   1723c:	0002aa20 	.word	0x0002aa20
   17240:	0002aa3c 	.word	0x0002aa3c

00017244 <fault_handle>:

/* Handler function for ARM fault conditions. */
static uint32_t fault_handle(z_arch_esf_t *esf, int fault, bool *recoverable)
{
   17244:	b580      	push	{r7, lr}
   17246:	b086      	sub	sp, #24
   17248:	af00      	add	r7, sp, #0
   1724a:	60f8      	str	r0, [r7, #12]
   1724c:	60b9      	str	r1, [r7, #8]
   1724e:	607a      	str	r2, [r7, #4]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   17250:	2300      	movs	r3, #0
   17252:	617b      	str	r3, [r7, #20]

	*recoverable = false;
   17254:	687b      	ldr	r3, [r7, #4]
   17256:	2200      	movs	r2, #0
   17258:	701a      	strb	r2, [r3, #0]
   1725a:	68bb      	ldr	r3, [r7, #8]
   1725c:	3b03      	subs	r3, #3
   1725e:	2b09      	cmp	r3, #9
   17260:	d835      	bhi.n	172ce <fault_handle+0x8a>
   17262:	a201      	add	r2, pc, #4	; (adr r2, 17268 <fault_handle+0x24>)
   17264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17268:	00017291 	.word	0x00017291
   1726c:	0001729d 	.word	0x0001729d
   17270:	000172ab 	.word	0x000172ab
   17274:	000172bb 	.word	0x000172bb
   17278:	000172cf 	.word	0x000172cf
   1727c:	000172cf 	.word	0x000172cf
   17280:	000172cf 	.word	0x000172cf
   17284:	000172cf 	.word	0x000172cf
   17288:	000172cf 	.word	0x000172cf
   1728c:	000172c5 	.word	0x000172c5

	switch (fault) {
	case 3:
		reason = hard_fault(esf, recoverable);
   17290:	6879      	ldr	r1, [r7, #4]
   17292:	68f8      	ldr	r0, [r7, #12]
   17294:	f7ff fe8a 	bl	16fac <hard_fault>
   17298:	6178      	str	r0, [r7, #20]
		break;
   1729a:	e01d      	b.n	172d8 <fault_handle+0x94>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	/* HardFault is raised for all fault conditions on ARMv6-M. */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	case 4:
		reason = mem_manage_fault(esf, 0, recoverable);
   1729c:	687a      	ldr	r2, [r7, #4]
   1729e:	2100      	movs	r1, #0
   172a0:	68f8      	ldr	r0, [r7, #12]
   172a2:	f7fe ff75 	bl	16190 <mem_manage_fault>
   172a6:	6178      	str	r0, [r7, #20]
		break;
   172a8:	e016      	b.n	172d8 <fault_handle+0x94>
	case 5:
		reason = bus_fault(esf, 0, recoverable);
   172aa:	687a      	ldr	r2, [r7, #4]
   172ac:	2100      	movs	r1, #0
   172ae:	68f8      	ldr	r0, [r7, #12]
   172b0:	f7ff f9a8 	bl	16604 <bus_fault>
   172b4:	4603      	mov	r3, r0
   172b6:	617b      	str	r3, [r7, #20]
		break;
   172b8:	e00e      	b.n	172d8 <fault_handle+0x94>
	case 6:
		reason = usage_fault(esf);
   172ba:	68f8      	ldr	r0, [r7, #12]
   172bc:	f7ff fbf8 	bl	16ab0 <usage_fault>
   172c0:	6178      	str	r0, [r7, #20]
		break;
   172c2:	e009      	b.n	172d8 <fault_handle+0x94>
	case 7:
		secure_fault(esf);
		break;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	case 12:
		debug_monitor(esf, recoverable);
   172c4:	6879      	ldr	r1, [r7, #4]
   172c6:	68f8      	ldr	r0, [r7, #12]
   172c8:	f7ff fe2a 	bl	16f20 <debug_monitor>
		break;
   172cc:	e004      	b.n	172d8 <fault_handle+0x94>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	default:
		reserved_exception(esf, fault);
   172ce:	68b9      	ldr	r1, [r7, #8]
   172d0:	68f8      	ldr	r0, [r7, #12]
   172d2:	f7ff ff5f 	bl	17194 <reserved_exception>
		break;
   172d6:	bf00      	nop
	}

	if ((*recoverable) == false) {
   172d8:	687b      	ldr	r3, [r7, #4]
   172da:	781b      	ldrb	r3, [r3, #0]
   172dc:	f083 0301 	eor.w	r3, r3, #1
   172e0:	b2db      	uxtb	r3, r3
   172e2:	2b00      	cmp	r3, #0
   172e4:	d003      	beq.n	172ee <fault_handle+0xaa>
		/* Dump generic information about the fault. */
		fault_show(esf, fault);
   172e6:	68b9      	ldr	r1, [r7, #8]
   172e8:	68f8      	ldr	r0, [r7, #12]
   172ea:	f00d f863 	bl	243b4 <fault_show>
	}

	return reason;
   172ee:	697b      	ldr	r3, [r7, #20]
}
   172f0:	4618      	mov	r0, r3
   172f2:	3718      	adds	r7, #24
   172f4:	46bd      	mov	sp, r7
   172f6:	bd80      	pop	{r7, pc}

000172f8 <get_esf>:
 *
 * @return ESF pointer on success, otherwise return NULL
 */
static inline z_arch_esf_t *get_esf(uint32_t msp, uint32_t psp, uint32_t exc_return,
	bool *nested_exc)
{
   172f8:	b580      	push	{r7, lr}
   172fa:	b08a      	sub	sp, #40	; 0x28
   172fc:	af00      	add	r7, sp, #0
   172fe:	60f8      	str	r0, [r7, #12]
   17300:	60b9      	str	r1, [r7, #8]
   17302:	607a      	str	r2, [r7, #4]
   17304:	603b      	str	r3, [r7, #0]
	bool alternative_state_exc = false;
   17306:	2300      	movs	r3, #0
   17308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	z_arch_esf_t *ptr_esf;

	*nested_exc = false;
   1730c:	683b      	ldr	r3, [r7, #0]
   1730e:	2200      	movs	r2, #0
   17310:	701a      	strb	r2, [r3, #0]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   17312:	687b      	ldr	r3, [r7, #4]
   17314:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
   17318:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1731c:	d001      	beq.n	17322 <get_esf+0x2a>
			EXC_RETURN_INDICATOR_PREFIX) {
		/* Invalid EXC_RETURN value. This is a fatal error. */
		return NULL;
   1731e:	2300      	movs	r3, #0
   17320:	e062      	b.n	173e8 <get_esf+0xf0>
		} else {
			ptr_esf = (z_arch_esf_t *)__TZ_get_MSP_NS();
		}
	}
#elif defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   17322:	687b      	ldr	r3, [r7, #4]
   17324:	f003 0301 	and.w	r3, r3, #1
   17328:	2b00      	cmp	r3, #0
   1732a:	d001      	beq.n	17330 <get_esf+0x38>
		/* Non-Secure Firmware shall only handle Non-Secure Exceptions.
		 * This is a fatal error.
		 */
		return NULL;
   1732c:	2300      	movs	r3, #0
   1732e:	e05b      	b.n	173e8 <get_esf+0xf0>
	}

	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   17330:	687b      	ldr	r3, [r7, #4]
   17332:	f003 0340 	and.w	r3, r3, #64	; 0x40
   17336:	2b00      	cmp	r3, #0
   17338:	d041      	beq.n	173be <get_esf+0xc6>
		 * Note that Non-Secure firmware cannot inspect the Secure
		 * stack to determine the root cause of the fault. Fault
		 * inspection will indicate the Non-Secure instruction
		 * that performed the branch to the Secure domain.
		 */
		alternative_state_exc = true;
   1733a:	2301      	movs	r3, #1
   1733c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		PR_FAULT_INFO("Exception occurred in Secure State");
   17340:	2303      	movs	r3, #3
   17342:	2b00      	cmp	r3, #0
   17344:	d030      	beq.n	173a8 <get_esf+0xb0>
   17346:	f00d f82e 	bl	243a6 <k_is_user_context>
   1734a:	4603      	mov	r3, r0
   1734c:	77fb      	strb	r3, [r7, #31]
   1734e:	2300      	movs	r3, #0
   17350:	61bb      	str	r3, [r7, #24]
   17352:	2303      	movs	r3, #3
   17354:	2b00      	cmp	r3, #0
   17356:	d007      	beq.n	17368 <get_esf+0x70>
   17358:	4b25      	ldr	r3, [pc, #148]	; (173f0 <get_esf+0xf8>)
   1735a:	681b      	ldr	r3, [r3, #0]
   1735c:	4618      	mov	r0, r3
   1735e:	f7fe ff07 	bl	16170 <log_const_source_id>
   17362:	4603      	mov	r3, r0
   17364:	b29b      	uxth	r3, r3
   17366:	e000      	b.n	1736a <get_esf+0x72>
   17368:	2300      	movs	r3, #0
   1736a:	83bb      	strh	r3, [r7, #28]
   1736c:	7d3b      	ldrb	r3, [r7, #20]
   1736e:	2201      	movs	r2, #1
   17370:	f362 0302 	bfi	r3, r2, #0, #3
   17374:	753b      	strb	r3, [r7, #20]
   17376:	7d3b      	ldrb	r3, [r7, #20]
   17378:	f36f 03c5 	bfc	r3, #3, #3
   1737c:	753b      	strb	r3, [r7, #20]
   1737e:	8bbb      	ldrh	r3, [r7, #28]
   17380:	f3c3 0309 	ubfx	r3, r3, #0, #10
   17384:	b29a      	uxth	r2, r3
   17386:	8abb      	ldrh	r3, [r7, #20]
   17388:	f362 138f 	bfi	r3, r2, #6, #10
   1738c:	82bb      	strh	r3, [r7, #20]
   1738e:	7ffb      	ldrb	r3, [r7, #31]
   17390:	2b00      	cmp	r3, #0
   17392:	d004      	beq.n	1739e <get_esf+0xa6>
   17394:	4917      	ldr	r1, [pc, #92]	; (173f4 <get_esf+0xfc>)
   17396:	8ab8      	ldrh	r0, [r7, #20]
   17398:	f7fb feda 	bl	13150 <log_from_user>
   1739c:	e005      	b.n	173aa <get_esf+0xb2>
   1739e:	8ab9      	ldrh	r1, [r7, #20]
   173a0:	4814      	ldr	r0, [pc, #80]	; (173f4 <get_esf+0xfc>)
   173a2:	f00b fbaf 	bl	22b04 <log_0>
   173a6:	e000      	b.n	173aa <get_esf+0xb2>
   173a8:	bf00      	nop

		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   173aa:	687b      	ldr	r3, [r7, #4]
   173ac:	f003 0304 	and.w	r3, r3, #4
   173b0:	2b00      	cmp	r3, #0
   173b2:	d002      	beq.n	173ba <get_esf+0xc2>
			/* Non-Secure stack frame on PSP */
			ptr_esf = (z_arch_esf_t *)psp;
   173b4:	68bb      	ldr	r3, [r7, #8]
   173b6:	623b      	str	r3, [r7, #32]
   173b8:	e001      	b.n	173be <get_esf+0xc6>
		} else {
			/* Non-Secure stack frame on MSP */
			ptr_esf = (z_arch_esf_t *)msp;
   173ba:	68fb      	ldr	r3, [r7, #12]
   173bc:	623b      	str	r3, [r7, #32]
		PR_EXC("SPSEL in thread mode does not indicate PSP");
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
   173be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   173c2:	f083 0301 	eor.w	r3, r3, #1
   173c6:	b2db      	uxtb	r3, r3
   173c8:	2b00      	cmp	r3, #0
   173ca:	d00c      	beq.n	173e6 <get_esf+0xee>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   173cc:	687b      	ldr	r3, [r7, #4]
   173ce:	f003 0308 	and.w	r3, r3, #8
   173d2:	2b00      	cmp	r3, #0
   173d4:	d002      	beq.n	173dc <get_esf+0xe4>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
   173d6:	68bb      	ldr	r3, [r7, #8]
   173d8:	623b      	str	r3, [r7, #32]
   173da:	e004      	b.n	173e6 <get_esf+0xee>

		} else {
			/* Returning to handler mode */
			ptr_esf = (z_arch_esf_t *)msp;
   173dc:	68fb      	ldr	r3, [r7, #12]
   173de:	623b      	str	r3, [r7, #32]
			*nested_exc = true;
   173e0:	683b      	ldr	r3, [r7, #0]
   173e2:	2201      	movs	r2, #1
   173e4:	701a      	strb	r2, [r3, #0]
		}
	}

	return ptr_esf;
   173e6:	6a3b      	ldr	r3, [r7, #32]
}
   173e8:	4618      	mov	r0, r3
   173ea:	3728      	adds	r7, #40	; 0x28
   173ec:	46bd      	mov	sp, r7
   173ee:	bd80      	pop	{r7, pc}
   173f0:	20014528 	.word	0x20014528
   173f4:	0002aa50 	.word	0x0002aa50

000173f8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   173f8:	b580      	push	{r7, lr}
   173fa:	b092      	sub	sp, #72	; 0x48
   173fc:	af00      	add	r7, sp, #0
   173fe:	60f8      	str	r0, [r7, #12]
   17400:	60b9      	str	r1, [r7, #8]
   17402:	607a      	str	r2, [r7, #4]
   17404:	603b      	str	r3, [r7, #0]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   17406:	2300      	movs	r3, #0
   17408:	647b      	str	r3, [r7, #68]	; 0x44
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1740a:	4b2d      	ldr	r3, [pc, #180]	; (174c0 <z_arm_fault+0xc8>)
   1740c:	685b      	ldr	r3, [r3, #4]
   1740e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   17412:	643b      	str	r3, [r7, #64]	; 0x40
   17414:	2300      	movs	r3, #0
   17416:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
   17418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1741a:	f383 8811 	msr	BASEPRI, r3
   1741e:	f3bf 8f6f 	isb	sy
}
   17422:	bf00      	nop
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
   17424:	f107 0336 	add.w	r3, r7, #54	; 0x36
   17428:	687a      	ldr	r2, [r7, #4]
   1742a:	68b9      	ldr	r1, [r7, #8]
   1742c:	68f8      	ldr	r0, [r7, #12]
   1742e:	f7ff ff63 	bl	172f8 <get_esf>
   17432:	63f8      	str	r0, [r7, #60]	; 0x3c
	__ASSERT(esf != NULL,
   17434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17436:	2b00      	cmp	r3, #0
   17438:	d10e      	bne.n	17458 <z_arm_fault+0x60>
   1743a:	f240 33e1 	movw	r3, #993	; 0x3e1
   1743e:	4a21      	ldr	r2, [pc, #132]	; (174c4 <z_arm_fault+0xcc>)
   17440:	4921      	ldr	r1, [pc, #132]	; (174c8 <z_arm_fault+0xd0>)
   17442:	4822      	ldr	r0, [pc, #136]	; (174cc <z_arm_fault+0xd4>)
   17444:	f009 fe10 	bl	21068 <printk>
   17448:	4821      	ldr	r0, [pc, #132]	; (174d0 <z_arm_fault+0xd8>)
   1744a:	f009 fe0d 	bl	21068 <printk>
   1744e:	f240 31e1 	movw	r1, #993	; 0x3e1
   17452:	481c      	ldr	r0, [pc, #112]	; (174c4 <z_arm_fault+0xcc>)
   17454:	f00a feb5 	bl	221c2 <assert_post_action>

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   17458:	f107 0337 	add.w	r3, r7, #55	; 0x37
   1745c:	461a      	mov	r2, r3
   1745e:	6c39      	ldr	r1, [r7, #64]	; 0x40
   17460:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   17462:	f7ff feef 	bl	17244 <fault_handle>
   17466:	6478      	str	r0, [r7, #68]	; 0x44
	if (recoverable) {
   17468:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   1746c:	2b00      	cmp	r3, #0
   1746e:	d123      	bne.n	174b8 <z_arm_fault+0xc0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   17470:	f107 0314 	add.w	r3, r7, #20
   17474:	2220      	movs	r2, #32
   17476:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   17478:	4618      	mov	r0, r3
   1747a:	f00d f937 	bl	246ec <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1747e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
   17482:	2b00      	cmp	r3, #0
   17484:	d00b      	beq.n	1749e <z_arm_fault+0xa6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   17486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17488:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1748c:	2b00      	cmp	r3, #0
   1748e:	d10c      	bne.n	174aa <z_arm_fault+0xb2>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   17490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17492:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   17496:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1749a:	633b      	str	r3, [r7, #48]	; 0x30
   1749c:	e005      	b.n	174aa <z_arm_fault+0xb2>
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   174a0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   174a4:	f023 0301 	bic.w	r3, r3, #1
   174a8:	633b      	str	r3, [r7, #48]	; 0x30
	}

	z_arm_fatal_error(reason, &esf_copy);
   174aa:	f107 0314 	add.w	r3, r7, #20
   174ae:	4619      	mov	r1, r3
   174b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
   174b2:	f00c ff40 	bl	24336 <z_arm_fatal_error>
   174b6:	e000      	b.n	174ba <z_arm_fault+0xc2>
		return;
   174b8:	bf00      	nop
}
   174ba:	3748      	adds	r7, #72	; 0x48
   174bc:	46bd      	mov	sp, r7
   174be:	bd80      	pop	{r7, pc}
   174c0:	e000ed00 	.word	0xe000ed00
   174c4:	0002a6e4 	.word	0x0002a6e4
   174c8:	0002aa74 	.word	0x0002aa74
   174cc:	0002a76c 	.word	0x0002a76c
   174d0:	0002aa88 	.word	0x0002aa88

000174d4 <z_arm_fault_init>:
 * Turns on the desired hardware faults.
 *
 * @return N/A
 */
void z_arm_fault_init(void)
{
   174d4:	b480      	push	{r7}
   174d6:	af00      	add	r7, sp, #0
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   174d8:	4b07      	ldr	r3, [pc, #28]	; (174f8 <z_arm_fault_init+0x24>)
   174da:	695b      	ldr	r3, [r3, #20]
   174dc:	4a06      	ldr	r2, [pc, #24]	; (174f8 <z_arm_fault_init+0x24>)
   174de:	f043 0310 	orr.w	r3, r3, #16
   174e2:	6153      	str	r3, [r2, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   174e4:	4b04      	ldr	r3, [pc, #16]	; (174f8 <z_arm_fault_init+0x24>)
   174e6:	695b      	ldr	r3, [r3, #20]
   174e8:	4a03      	ldr	r2, [pc, #12]	; (174f8 <z_arm_fault_init+0x24>)
   174ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   174ee:	6153      	str	r3, [r2, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   174f0:	bf00      	nop
   174f2:	46bd      	mov	sp, r7
   174f4:	bc80      	pop	{r7}
   174f6:	4770      	bx	lr
   174f8:	e000ed00 	.word	0xe000ed00

000174fc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   174fc:	4b04      	ldr	r3, [pc, #16]	; (17510 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   174fe:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   17500:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   17502:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   17504:	d003      	beq.n	1750e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   17506:	4903      	ldr	r1, [pc, #12]	; (17514 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   17508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1750c:	600a      	str	r2, [r1, #0]

0001750e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1750e:	4770      	bx	lr
	ldr r3, =_kernel
   17510:	2001517c 	.word	0x2001517c
	ldr r1, =_SCS_ICSR
   17514:	e000ed04 	.word	0xe000ed04

00017518 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
   17518:	b480      	push	{r7}
   1751a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
   1751c:	f3bf 8f4f 	dsb	sy
}
   17520:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   17522:	4b06      	ldr	r3, [pc, #24]	; (1753c <__NVIC_SystemReset+0x24>)
   17524:	68db      	ldr	r3, [r3, #12]
   17526:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1752a:	4904      	ldr	r1, [pc, #16]	; (1753c <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1752c:	4b04      	ldr	r3, [pc, #16]	; (17540 <__NVIC_SystemReset+0x28>)
   1752e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   17530:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
   17532:	f3bf 8f4f 	dsb	sy
}
   17536:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   17538:	bf00      	nop
   1753a:	e7fd      	b.n	17538 <__NVIC_SystemReset+0x20>
   1753c:	e000ed00 	.word	0xe000ed00
   17540:	05fa0004 	.word	0x05fa0004

00017544 <__NVIC_SetPriority>:
{
   17544:	b480      	push	{r7}
   17546:	b083      	sub	sp, #12
   17548:	af00      	add	r7, sp, #0
   1754a:	4603      	mov	r3, r0
   1754c:	6039      	str	r1, [r7, #0]
   1754e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   17550:	f997 3007 	ldrsb.w	r3, [r7, #7]
   17554:	2b00      	cmp	r3, #0
   17556:	db0a      	blt.n	1756e <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17558:	683b      	ldr	r3, [r7, #0]
   1755a:	b2da      	uxtb	r2, r3
   1755c:	490c      	ldr	r1, [pc, #48]	; (17590 <__NVIC_SetPriority+0x4c>)
   1755e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   17562:	0152      	lsls	r2, r2, #5
   17564:	b2d2      	uxtb	r2, r2
   17566:	440b      	add	r3, r1
   17568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   1756c:	e00a      	b.n	17584 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1756e:	683b      	ldr	r3, [r7, #0]
   17570:	b2da      	uxtb	r2, r3
   17572:	4908      	ldr	r1, [pc, #32]	; (17594 <__NVIC_SetPriority+0x50>)
   17574:	79fb      	ldrb	r3, [r7, #7]
   17576:	f003 030f 	and.w	r3, r3, #15
   1757a:	3b04      	subs	r3, #4
   1757c:	0152      	lsls	r2, r2, #5
   1757e:	b2d2      	uxtb	r2, r2
   17580:	440b      	add	r3, r1
   17582:	761a      	strb	r2, [r3, #24]
}
   17584:	bf00      	nop
   17586:	370c      	adds	r7, #12
   17588:	46bd      	mov	sp, r7
   1758a:	bc80      	pop	{r7}
   1758c:	4770      	bx	lr
   1758e:	bf00      	nop
   17590:	e000e100 	.word	0xe000e100
   17594:	e000ed00 	.word	0xe000ed00

00017598 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   17598:	b580      	push	{r7, lr}
   1759a:	b084      	sub	sp, #16
   1759c:	af00      	add	r7, sp, #0
   1759e:	6078      	str	r0, [r7, #4]
	if (_current == thread) {
   175a0:	4b0e      	ldr	r3, [pc, #56]	; (175dc <z_impl_k_thread_abort+0x44>)
   175a2:	689b      	ldr	r3, [r3, #8]
   175a4:	687a      	ldr	r2, [r7, #4]
   175a6:	429a      	cmp	r2, r3
   175a8:	d110      	bne.n	175cc <z_impl_k_thread_abort+0x34>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   175aa:	f3ef 8305 	mrs	r3, IPSR
   175ae:	60fb      	str	r3, [r7, #12]
  return(result);
   175b0:	68fb      	ldr	r3, [r7, #12]
 * The current executing vector is found in the IPSR register. All
 * IRQs and system exceptions are considered as interrupt context.
 */
static ALWAYS_INLINE bool arch_is_in_isr(void)
{
	return (__get_IPSR()) ? (true) : (false);
   175b2:	2b00      	cmp	r3, #0
   175b4:	bf14      	ite	ne
   175b6:	2301      	movne	r3, #1
   175b8:	2300      	moveq	r3, #0
   175ba:	b2db      	uxtb	r3, r3
		if (arch_is_in_isr()) {
   175bc:	2b00      	cmp	r3, #0
   175be:	d005      	beq.n	175cc <z_impl_k_thread_abort+0x34>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   175c0:	4b07      	ldr	r3, [pc, #28]	; (175e0 <z_impl_k_thread_abort+0x48>)
   175c2:	685b      	ldr	r3, [r3, #4]
   175c4:	4a06      	ldr	r2, [pc, #24]	; (175e0 <z_impl_k_thread_abort+0x48>)
   175c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   175ca:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   175cc:	6878      	ldr	r0, [r7, #4]
   175ce:	f008 fc47 	bl	1fe60 <z_thread_abort>
}
   175d2:	bf00      	nop
   175d4:	3710      	adds	r7, #16
   175d6:	46bd      	mov	sp, r7
   175d8:	bd80      	pop	{r7, pc}
   175da:	bf00      	nop
   175dc:	2001517c 	.word	0x2001517c
   175e0:	e000ed00 	.word	0xe000ed00

000175e4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   175e4:	b580      	push	{r7, lr}
   175e6:	b084      	sub	sp, #16
   175e8:	af00      	add	r7, sp, #0
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   175ea:	4a0d      	ldr	r2, [pc, #52]	; (17620 <z_arm_configure_static_mpu_regions+0x3c>)
   175ec:	4b0d      	ldr	r3, [pc, #52]	; (17624 <z_arm_configure_static_mpu_regions+0x40>)
   175ee:	2101      	movs	r1, #1
   175f0:	480d      	ldr	r0, [pc, #52]	; (17628 <z_arm_configure_static_mpu_regions+0x44>)
   175f2:	f000 fd21 	bl	18038 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   175f6:	1d3b      	adds	r3, r7, #4
   175f8:	2200      	movs	r2, #0
   175fa:	601a      	str	r2, [r3, #0]
   175fc:	605a      	str	r2, [r3, #4]
   175fe:	609a      	str	r2, [r3, #8]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   17600:	4b0a      	ldr	r3, [pc, #40]	; (1762c <z_arm_configure_static_mpu_regions+0x48>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   17602:	607b      	str	r3, [r7, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   17604:	4a07      	ldr	r2, [pc, #28]	; (17624 <z_arm_configure_static_mpu_regions+0x40>)
   17606:	4b09      	ldr	r3, [pc, #36]	; (1762c <z_arm_configure_static_mpu_regions+0x48>)
   17608:	1ad3      	subs	r3, r2, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1760a:	60bb      	str	r3, [r7, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1760c:	1d3b      	adds	r3, r7, #4
   1760e:	2101      	movs	r1, #1
   17610:	4618      	mov	r0, r3
   17612:	f000 fd41 	bl	18098 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   17616:	bf00      	nop
   17618:	3710      	adds	r7, #16
   1761a:	46bd      	mov	sp, r7
   1761c:	bd80      	pop	{r7, pc}
   1761e:	bf00      	nop
   17620:	20014500 	.word	0x20014500
   17624:	20040000 	.word	0x20040000
   17628:	0002cb80 	.word	0x0002cb80
   1762c:	200145d0 	.word	0x200145d0

00017630 <ARM_MPU_SetRegion>:
* \param rnr Region number to be configured.
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegion(uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
   17630:	b580      	push	{r7, lr}
   17632:	b084      	sub	sp, #16
   17634:	af00      	add	r7, sp, #0
   17636:	60f8      	str	r0, [r7, #12]
   17638:	60b9      	str	r1, [r7, #8]
   1763a:	607a      	str	r2, [r7, #4]
  ARM_MPU_SetRegionEx(MPU, rnr, rbar, rlar);
   1763c:	687b      	ldr	r3, [r7, #4]
   1763e:	68ba      	ldr	r2, [r7, #8]
   17640:	68f9      	ldr	r1, [r7, #12]
   17642:	4803      	ldr	r0, [pc, #12]	; (17650 <ARM_MPU_SetRegion+0x20>)
   17644:	f00c ff1d 	bl	24482 <ARM_MPU_SetRegionEx>
}
   17648:	bf00      	nop
   1764a:	3710      	adds	r7, #16
   1764c:	46bd      	mov	sp, r7
   1764e:	bd80      	pop	{r7, pc}
   17650:	e000ed90 	.word	0xe000ed90

00017654 <log_const_source_id>:
{
   17654:	b480      	push	{r7}
   17656:	b083      	sub	sp, #12
   17658:	af00      	add	r7, sp, #0
   1765a:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1765c:	687b      	ldr	r3, [r7, #4]
   1765e:	4a04      	ldr	r2, [pc, #16]	; (17670 <log_const_source_id+0x1c>)
   17660:	1a9b      	subs	r3, r3, r2
   17662:	08db      	lsrs	r3, r3, #3
}
   17664:	4618      	mov	r0, r3
   17666:	370c      	adds	r7, #12
   17668:	46bd      	mov	sp, r7
   1766a:	bc80      	pop	{r7}
   1766c:	4770      	bx	lr
   1766e:	bf00      	nop
   17670:	00029354 	.word	0x00029354

00017674 <mpu_init>:
static struct dynamic_region_info dyn_reg_info[MPU_DYNAMIC_REGION_AREAS_NUM];


/* Global MPU configuration at system initialization. */
static void mpu_init(void)
{
   17674:	b480      	push	{r7}
   17676:	af00      	add	r7, sp, #0

	/* Flash region(s): Attribute-0
	 * SRAM region(s): Attribute-1
	 * SRAM no cache-able regions(s): Attribute-2
	 */
	MPU->MAIR0 =
   17678:	4b03      	ldr	r3, [pc, #12]	; (17688 <mpu_init+0x14>)
   1767a:	4a04      	ldr	r2, [pc, #16]	; (1768c <mpu_init+0x18>)
   1767c:	631a      	str	r2, [r3, #48]	; 0x30
		((MPU_MAIR_ATTR_SRAM << MPU_MAIR0_Attr1_Pos) &
			MPU_MAIR0_Attr1_Msk)
		|
		((MPU_MAIR_ATTR_SRAM_NOCACHE << MPU_MAIR0_Attr2_Pos) &
			MPU_MAIR0_Attr2_Msk);
}
   1767e:	bf00      	nop
   17680:	46bd      	mov	sp, r7
   17682:	bc80      	pop	{r7}
   17684:	4770      	bx	lr
   17686:	bf00      	nop
   17688:	e000ed90 	.word	0xe000ed90
   1768c:	0044ffaa 	.word	0x0044ffaa

00017690 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   17690:	b580      	push	{r7, lr}
   17692:	b090      	sub	sp, #64	; 0x40
   17694:	af04      	add	r7, sp, #16
   17696:	6078      	str	r0, [r7, #4]
   17698:	6039      	str	r1, [r7, #0]
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   1769a:	683b      	ldr	r3, [r7, #0]
   1769c:	681b      	ldr	r3, [r3, #0]
   1769e:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
   176a2:	683a      	ldr	r2, [r7, #0]
   176a4:	7a12      	ldrb	r2, [r2, #8]
   176a6:	f3c2 0204 	ubfx	r2, r2, #0, #5
   176aa:	b2d2      	uxtb	r2, r2
   176ac:	ea43 0102 	orr.w	r1, r3, r2
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   176b0:	683b      	ldr	r3, [r7, #0]
   176b2:	68db      	ldr	r3, [r3, #12]
   176b4:	f023 021f 	bic.w	r2, r3, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   176b8:	683b      	ldr	r3, [r7, #0]
   176ba:	7a1b      	ldrb	r3, [r3, #8]
   176bc:	f3c3 1342 	ubfx	r3, r3, #5, #3
   176c0:	b2db      	uxtb	r3, r3
   176c2:	005b      	lsls	r3, r3, #1
			& MPU_RLAR_AttrIndx_Msk)
   176c4:	f003 030e 	and.w	r3, r3, #14
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   176c8:	4313      	orrs	r3, r2
		| MPU_RLAR_EN_Msk
   176ca:	f043 0301 	orr.w	r3, r3, #1
	ARM_MPU_SetRegion(
   176ce:	461a      	mov	r2, r3
   176d0:	6878      	ldr	r0, [r7, #4]
   176d2:	f7ff ffad 	bl	17630 <ARM_MPU_SetRegion>
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
   176d6:	2303      	movs	r3, #3
   176d8:	2b03      	cmp	r3, #3
   176da:	d801      	bhi.n	176e0 <region_init+0x50>
   176dc:	bf00      	nop
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   176de:	e064      	b.n	177aa <region_init+0x11a>
	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
   176e0:	f00c fec8 	bl	24474 <k_is_user_context>
   176e4:	4603      	mov	r3, r0
   176e6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   176ea:	2300      	movs	r3, #0
   176ec:	62bb      	str	r3, [r7, #40]	; 0x28
   176ee:	2303      	movs	r3, #3
   176f0:	2b00      	cmp	r3, #0
   176f2:	d007      	beq.n	17704 <region_init+0x74>
   176f4:	4b2f      	ldr	r3, [pc, #188]	; (177b4 <region_init+0x124>)
   176f6:	681b      	ldr	r3, [r3, #0]
   176f8:	4618      	mov	r0, r3
   176fa:	f7ff ffab 	bl	17654 <log_const_source_id>
   176fe:	4603      	mov	r3, r0
   17700:	b29b      	uxth	r3, r3
   17702:	e000      	b.n	17706 <region_init+0x76>
   17704:	2300      	movs	r3, #0
   17706:	85fb      	strh	r3, [r7, #46]	; 0x2e
   17708:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   1770c:	2204      	movs	r2, #4
   1770e:	f362 0302 	bfi	r3, r2, #0, #3
   17712:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   17716:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
   1771a:	f36f 03c5 	bfc	r3, #3, #3
   1771e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   17722:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
   17724:	f3c3 0309 	ubfx	r3, r3, #0, #10
   17728:	b29a      	uxth	r2, r3
   1772a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   1772c:	f362 138f 	bfi	r3, r2, #6, #10
   17730:	84bb      	strh	r3, [r7, #36]	; 0x24
   17732:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   17736:	2b00      	cmp	r3, #0
   17738:	d01a      	beq.n	17770 <region_init+0xe0>
   1773a:	683b      	ldr	r3, [r7, #0]
   1773c:	681b      	ldr	r3, [r3, #0]
   1773e:	683a      	ldr	r2, [r7, #0]
   17740:	7a12      	ldrb	r2, [r2, #8]
   17742:	f3c2 0204 	ubfx	r2, r2, #0, #5
   17746:	b2d2      	uxtb	r2, r2
   17748:	4611      	mov	r1, r2
   1774a:	683a      	ldr	r2, [r7, #0]
   1774c:	7a12      	ldrb	r2, [r2, #8]
   1774e:	f3c2 1242 	ubfx	r2, r2, #5, #3
   17752:	b2d2      	uxtb	r2, r2
   17754:	4610      	mov	r0, r2
   17756:	683a      	ldr	r2, [r7, #0]
   17758:	68d2      	ldr	r2, [r2, #12]
   1775a:	9203      	str	r2, [sp, #12]
   1775c:	9002      	str	r0, [sp, #8]
   1775e:	9101      	str	r1, [sp, #4]
   17760:	9300      	str	r3, [sp, #0]
   17762:	687b      	ldr	r3, [r7, #4]
   17764:	4a14      	ldr	r2, [pc, #80]	; (177b8 <region_init+0x128>)
   17766:	4915      	ldr	r1, [pc, #84]	; (177bc <region_init+0x12c>)
   17768:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
   1776a:	f7fb fcf1 	bl	13150 <log_from_user>
}
   1776e:	e01c      	b.n	177aa <region_init+0x11a>
	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
   17770:	4b11      	ldr	r3, [pc, #68]	; (177b8 <region_init+0x128>)
   17772:	60fb      	str	r3, [r7, #12]
   17774:	687b      	ldr	r3, [r7, #4]
   17776:	613b      	str	r3, [r7, #16]
   17778:	683b      	ldr	r3, [r7, #0]
   1777a:	681b      	ldr	r3, [r3, #0]
   1777c:	617b      	str	r3, [r7, #20]
   1777e:	683b      	ldr	r3, [r7, #0]
   17780:	7a1b      	ldrb	r3, [r3, #8]
   17782:	f3c3 0304 	ubfx	r3, r3, #0, #5
   17786:	b2db      	uxtb	r3, r3
   17788:	61bb      	str	r3, [r7, #24]
   1778a:	683b      	ldr	r3, [r7, #0]
   1778c:	7a1b      	ldrb	r3, [r3, #8]
   1778e:	f3c3 1342 	ubfx	r3, r3, #5, #3
   17792:	b2db      	uxtb	r3, r3
   17794:	61fb      	str	r3, [r7, #28]
   17796:	683b      	ldr	r3, [r7, #0]
   17798:	68db      	ldr	r3, [r3, #12]
   1779a:	623b      	str	r3, [r7, #32]
   1779c:	f107 010c 	add.w	r1, r7, #12
   177a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   177a2:	2206      	movs	r2, #6
   177a4:	4805      	ldr	r0, [pc, #20]	; (177bc <region_init+0x12c>)
   177a6:	f00b fa0c 	bl	22bc2 <log_n>
}
   177aa:	bf00      	nop
   177ac:	3730      	adds	r7, #48	; 0x30
   177ae:	46bd      	mov	sp, r7
   177b0:	bd80      	pop	{r7, pc}
   177b2:	bf00      	nop
   177b4:	2001452c 	.word	0x2001452c
   177b8:	0002cb8c 	.word	0x0002cb8c
   177bc:	0002aacc 	.word	0x0002aacc

000177c0 <mpu_region_get_base>:
	}
	return -EINVAL;
}

static inline uint32_t mpu_region_get_base(const uint32_t index)
{
   177c0:	b480      	push	{r7}
   177c2:	b083      	sub	sp, #12
   177c4:	af00      	add	r7, sp, #0
   177c6:	6078      	str	r0, [r7, #4]
	MPU->RNR = index;
   177c8:	4a05      	ldr	r2, [pc, #20]	; (177e0 <mpu_region_get_base+0x20>)
   177ca:	687b      	ldr	r3, [r7, #4]
   177cc:	6093      	str	r3, [r2, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   177ce:	4b04      	ldr	r3, [pc, #16]	; (177e0 <mpu_region_get_base+0x20>)
   177d0:	68db      	ldr	r3, [r3, #12]
   177d2:	f023 031f 	bic.w	r3, r3, #31
}
   177d6:	4618      	mov	r0, r3
   177d8:	370c      	adds	r7, #12
   177da:	46bd      	mov	sp, r7
   177dc:	bc80      	pop	{r7}
   177de:	4770      	bx	lr
   177e0:	e000ed90 	.word	0xe000ed90

000177e4 <mpu_region_set_base>:

static inline void mpu_region_set_base(const uint32_t index, const uint32_t base)
{
   177e4:	b480      	push	{r7}
   177e6:	b083      	sub	sp, #12
   177e8:	af00      	add	r7, sp, #0
   177ea:	6078      	str	r0, [r7, #4]
   177ec:	6039      	str	r1, [r7, #0]
	MPU->RNR = index;
   177ee:	4a09      	ldr	r2, [pc, #36]	; (17814 <mpu_region_set_base+0x30>)
   177f0:	687b      	ldr	r3, [r7, #4]
   177f2:	6093      	str	r3, [r2, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   177f4:	4b07      	ldr	r3, [pc, #28]	; (17814 <mpu_region_set_base+0x30>)
   177f6:	68db      	ldr	r3, [r3, #12]
   177f8:	f003 021f 	and.w	r2, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   177fc:	683b      	ldr	r3, [r7, #0]
   177fe:	f023 031f 	bic.w	r3, r3, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   17802:	4904      	ldr	r1, [pc, #16]	; (17814 <mpu_region_set_base+0x30>)
		| (base & MPU_RBAR_BASE_Msk);
   17804:	4313      	orrs	r3, r2
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   17806:	60cb      	str	r3, [r1, #12]
}
   17808:	bf00      	nop
   1780a:	370c      	adds	r7, #12
   1780c:	46bd      	mov	sp, r7
   1780e:	bc80      	pop	{r7}
   17810:	4770      	bx	lr
   17812:	bf00      	nop
   17814:	e000ed90 	.word	0xe000ed90

00017818 <mpu_region_get_last_addr>:

static inline uint32_t mpu_region_get_last_addr(const uint32_t index)
{
   17818:	b480      	push	{r7}
   1781a:	b083      	sub	sp, #12
   1781c:	af00      	add	r7, sp, #0
   1781e:	6078      	str	r0, [r7, #4]
	MPU->RNR = index;
   17820:	4a05      	ldr	r2, [pc, #20]	; (17838 <mpu_region_get_last_addr+0x20>)
   17822:	687b      	ldr	r3, [r7, #4]
   17824:	6093      	str	r3, [r2, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   17826:	4b04      	ldr	r3, [pc, #16]	; (17838 <mpu_region_get_last_addr+0x20>)
   17828:	691b      	ldr	r3, [r3, #16]
   1782a:	f043 031f 	orr.w	r3, r3, #31
}
   1782e:	4618      	mov	r0, r3
   17830:	370c      	adds	r7, #12
   17832:	46bd      	mov	sp, r7
   17834:	bc80      	pop	{r7}
   17836:	4770      	bx	lr
   17838:	e000ed90 	.word	0xe000ed90

0001783c <mpu_region_set_limit>:

static inline void mpu_region_set_limit(const uint32_t index, const uint32_t limit)
{
   1783c:	b480      	push	{r7}
   1783e:	b083      	sub	sp, #12
   17840:	af00      	add	r7, sp, #0
   17842:	6078      	str	r0, [r7, #4]
   17844:	6039      	str	r1, [r7, #0]
	MPU->RNR = index;
   17846:	4a09      	ldr	r2, [pc, #36]	; (1786c <mpu_region_set_limit+0x30>)
   17848:	687b      	ldr	r3, [r7, #4]
   1784a:	6093      	str	r3, [r2, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1784c:	4b07      	ldr	r3, [pc, #28]	; (1786c <mpu_region_set_limit+0x30>)
   1784e:	691b      	ldr	r3, [r3, #16]
   17850:	f003 021f 	and.w	r2, r3, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   17854:	683b      	ldr	r3, [r7, #0]
   17856:	f023 031f 	bic.w	r3, r3, #31
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1785a:	4904      	ldr	r1, [pc, #16]	; (1786c <mpu_region_set_limit+0x30>)
		| (limit & MPU_RLAR_LIMIT_Msk);
   1785c:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   1785e:	610b      	str	r3, [r1, #16]
}
   17860:	bf00      	nop
   17862:	370c      	adds	r7, #12
   17864:	46bd      	mov	sp, r7
   17866:	bc80      	pop	{r7}
   17868:	4770      	bx	lr
   1786a:	bf00      	nop
   1786c:	e000ed90 	.word	0xe000ed90

00017870 <mpu_region_get_access_attr>:

static inline void mpu_region_get_access_attr(const uint32_t index,
	arm_mpu_region_attr_t *attr)
{
   17870:	b480      	push	{r7}
   17872:	b083      	sub	sp, #12
   17874:	af00      	add	r7, sp, #0
   17876:	6078      	str	r0, [r7, #4]
   17878:	6039      	str	r1, [r7, #0]
	MPU->RNR = index;
   1787a:	4a0e      	ldr	r2, [pc, #56]	; (178b4 <mpu_region_get_access_attr+0x44>)
   1787c:	687b      	ldr	r3, [r7, #4]
   1787e:	6093      	str	r3, [r2, #8]

	attr->rbar = MPU->RBAR &
   17880:	4b0c      	ldr	r3, [pc, #48]	; (178b4 <mpu_region_get_access_attr+0x44>)
   17882:	68db      	ldr	r3, [r3, #12]
   17884:	f003 031f 	and.w	r3, r3, #31
   17888:	b2d9      	uxtb	r1, r3
   1788a:	683a      	ldr	r2, [r7, #0]
   1788c:	7813      	ldrb	r3, [r2, #0]
   1788e:	f361 0304 	bfi	r3, r1, #0, #5
   17892:	7013      	strb	r3, [r2, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   17894:	4b07      	ldr	r3, [pc, #28]	; (178b4 <mpu_region_get_access_attr+0x44>)
   17896:	691b      	ldr	r3, [r3, #16]
   17898:	085b      	lsrs	r3, r3, #1
   1789a:	f003 0307 	and.w	r3, r3, #7
   1789e:	b2d9      	uxtb	r1, r3
   178a0:	683a      	ldr	r2, [r7, #0]
   178a2:	7813      	ldrb	r3, [r2, #0]
   178a4:	f361 1347 	bfi	r3, r1, #5, #3
   178a8:	7013      	strb	r3, [r2, #0]
		MPU_RLAR_AttrIndx_Pos;
}
   178aa:	bf00      	nop
   178ac:	370c      	adds	r7, #12
   178ae:	46bd      	mov	sp, r7
   178b0:	bc80      	pop	{r7}
   178b2:	4770      	bx	lr
   178b4:	e000ed90 	.word	0xe000ed90

000178b8 <mpu_region_get_conf>:

static inline void mpu_region_get_conf(const uint32_t index,
	struct arm_mpu_region *region_conf)
{
   178b8:	b580      	push	{r7, lr}
   178ba:	b082      	sub	sp, #8
   178bc:	af00      	add	r7, sp, #0
   178be:	6078      	str	r0, [r7, #4]
   178c0:	6039      	str	r1, [r7, #0]
	MPU->RNR = index;
   178c2:	4a0c      	ldr	r2, [pc, #48]	; (178f4 <mpu_region_get_conf+0x3c>)
   178c4:	687b      	ldr	r3, [r7, #4]
   178c6:	6093      	str	r3, [r2, #8]
	/* Region attribution:
	 * - Cache-ability
	 * - Share-ability
	 * - Access Permissions
	 */
	mpu_region_get_access_attr(index, &region_conf->attr);
   178c8:	683b      	ldr	r3, [r7, #0]
   178ca:	3308      	adds	r3, #8
   178cc:	4619      	mov	r1, r3
   178ce:	6878      	ldr	r0, [r7, #4]
   178d0:	f7ff ffce 	bl	17870 <mpu_region_get_access_attr>

	/* Region base address */
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   178d4:	4b07      	ldr	r3, [pc, #28]	; (178f4 <mpu_region_get_conf+0x3c>)
   178d6:	68db      	ldr	r3, [r3, #12]
   178d8:	f023 021f 	bic.w	r2, r3, #31
   178dc:	683b      	ldr	r3, [r7, #0]
   178de:	601a      	str	r2, [r3, #0]

	/* Region limit address */
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   178e0:	4b04      	ldr	r3, [pc, #16]	; (178f4 <mpu_region_get_conf+0x3c>)
   178e2:	691b      	ldr	r3, [r3, #16]
   178e4:	f023 021f 	bic.w	r2, r3, #31
   178e8:	683b      	ldr	r3, [r7, #0]
   178ea:	60da      	str	r2, [r3, #12]
}
   178ec:	bf00      	nop
   178ee:	3708      	adds	r7, #8
   178f0:	46bd      	mov	sp, r7
   178f2:	bd80      	pop	{r7, pc}
   178f4:	e000ed90 	.word	0xe000ed90

000178f8 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   178f8:	b580      	push	{r7, lr}
   178fa:	b092      	sub	sp, #72	; 0x48
   178fc:	af00      	add	r7, sp, #0
   178fe:	6078      	str	r0, [r7, #4]
   17900:	4608      	mov	r0, r1
   17902:	4611      	mov	r1, r2
   17904:	461a      	mov	r2, r3
   17906:	4603      	mov	r3, r0
   17908:	70fb      	strb	r3, [r7, #3]
   1790a:	460b      	mov	r3, r1
   1790c:	70bb      	strb	r3, [r7, #2]
   1790e:	4613      	mov	r3, r2
   17910:	707b      	strb	r3, [r7, #1]
	int i;
	int reg_index = start_reg_index;
   17912:	78bb      	ldrb	r3, [r7, #2]
   17914:	647b      	str	r3, [r7, #68]	; 0x44

	for (i = 0; i < regions_num; i++) {
   17916:	2300      	movs	r3, #0
   17918:	643b      	str	r3, [r7, #64]	; 0x40
   1791a:	e1d6      	b.n	17cca <mpu_configure_regions_and_partition+0x3d2>
		if (regions[i].size == 0U) {
   1791c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1791e:	4613      	mov	r3, r2
   17920:	005b      	lsls	r3, r3, #1
   17922:	4413      	add	r3, r2
   17924:	009b      	lsls	r3, r3, #2
   17926:	461a      	mov	r2, r3
   17928:	687b      	ldr	r3, [r7, #4]
   1792a:	4413      	add	r3, r2
   1792c:	685b      	ldr	r3, [r3, #4]
   1792e:	2b00      	cmp	r3, #0
   17930:	f000 81c7 	beq.w	17cc2 <mpu_configure_regions_and_partition+0x3ca>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   17934:	787b      	ldrb	r3, [r7, #1]
   17936:	2b00      	cmp	r3, #0
   17938:	d04e      	beq.n	179d8 <mpu_configure_regions_and_partition+0xe0>
			(!mpu_partition_is_valid(&regions[i]))) {
   1793a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1793c:	4613      	mov	r3, r2
   1793e:	005b      	lsls	r3, r3, #1
   17940:	4413      	add	r3, r2
   17942:	009b      	lsls	r3, r3, #2
   17944:	461a      	mov	r2, r3
   17946:	687b      	ldr	r3, [r7, #4]
   17948:	4413      	add	r3, r2
   1794a:	4618      	mov	r0, r3
   1794c:	f00c fdb5 	bl	244ba <mpu_partition_is_valid>
   17950:	4603      	mov	r3, r0
		if (do_sanity_check &&
   17952:	2b00      	cmp	r3, #0
   17954:	d140      	bne.n	179d8 <mpu_configure_regions_and_partition+0xe0>
			LOG_ERR("Partition %u: sanity check failed.", i);
   17956:	2303      	movs	r3, #3
   17958:	2b00      	cmp	r3, #0
   1795a:	d039      	beq.n	179d0 <mpu_configure_regions_and_partition+0xd8>
   1795c:	f00c fd8a 	bl	24474 <k_is_user_context>
   17960:	4603      	mov	r3, r0
   17962:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
   17966:	2300      	movs	r3, #0
   17968:	627b      	str	r3, [r7, #36]	; 0x24
   1796a:	2303      	movs	r3, #3
   1796c:	2b00      	cmp	r3, #0
   1796e:	d007      	beq.n	17980 <mpu_configure_regions_and_partition+0x88>
   17970:	4ba9      	ldr	r3, [pc, #676]	; (17c18 <mpu_configure_regions_and_partition+0x320>)
   17972:	681b      	ldr	r3, [r3, #0]
   17974:	4618      	mov	r0, r3
   17976:	f7ff fe6d 	bl	17654 <log_const_source_id>
   1797a:	4603      	mov	r3, r0
   1797c:	b29b      	uxth	r3, r3
   1797e:	e000      	b.n	17982 <mpu_configure_regions_and_partition+0x8a>
   17980:	2300      	movs	r3, #0
   17982:	87bb      	strh	r3, [r7, #60]	; 0x3c
   17984:	f897 3020 	ldrb.w	r3, [r7, #32]
   17988:	2201      	movs	r2, #1
   1798a:	f362 0302 	bfi	r3, r2, #0, #3
   1798e:	f887 3020 	strb.w	r3, [r7, #32]
   17992:	f897 3020 	ldrb.w	r3, [r7, #32]
   17996:	f36f 03c5 	bfc	r3, #3, #3
   1799a:	f887 3020 	strb.w	r3, [r7, #32]
   1799e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
   179a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
   179a4:	b29a      	uxth	r2, r3
   179a6:	8c3b      	ldrh	r3, [r7, #32]
   179a8:	f362 138f 	bfi	r3, r2, #6, #10
   179ac:	843b      	strh	r3, [r7, #32]
   179ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
   179b2:	2b00      	cmp	r3, #0
   179b4:	d005      	beq.n	179c2 <mpu_configure_regions_and_partition+0xca>
   179b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   179b8:	4998      	ldr	r1, [pc, #608]	; (17c1c <mpu_configure_regions_and_partition+0x324>)
   179ba:	8c38      	ldrh	r0, [r7, #32]
   179bc:	f7fb fbc8 	bl	13150 <log_from_user>
   179c0:	e007      	b.n	179d2 <mpu_configure_regions_and_partition+0xda>
   179c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   179c4:	8c3a      	ldrh	r2, [r7, #32]
   179c6:	4619      	mov	r1, r3
   179c8:	4894      	ldr	r0, [pc, #592]	; (17c1c <mpu_configure_regions_and_partition+0x324>)
   179ca:	f00b f8b0 	bl	22b2e <log_1>
   179ce:	e000      	b.n	179d2 <mpu_configure_regions_and_partition+0xda>
   179d0:	bf00      	nop
			return -EINVAL;
   179d2:	f06f 0315 	mvn.w	r3, #21
   179d6:	e17e      	b.n	17cd6 <mpu_configure_regions_and_partition+0x3de>

		/* Derive the index of the underlying MPU region,
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);
   179d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   179da:	4613      	mov	r3, r2
   179dc:	005b      	lsls	r3, r3, #1
   179de:	4413      	add	r3, r2
   179e0:	009b      	lsls	r3, r3, #2
   179e2:	461a      	mov	r2, r3
   179e4:	687b      	ldr	r3, [r7, #4]
   179e6:	4413      	add	r3, r2
   179e8:	6818      	ldr	r0, [r3, #0]
   179ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   179ec:	4613      	mov	r3, r2
   179ee:	005b      	lsls	r3, r3, #1
   179f0:	4413      	add	r3, r2
   179f2:	009b      	lsls	r3, r3, #2
   179f4:	461a      	mov	r2, r3
   179f6:	687b      	ldr	r3, [r7, #4]
   179f8:	4413      	add	r3, r2
   179fa:	685b      	ldr	r3, [r3, #4]
   179fc:	4619      	mov	r1, r3
   179fe:	f00c fd7c 	bl	244fa <get_region_index>
   17a02:	63b8      	str	r0, [r7, #56]	; 0x38

		if ((u_reg_index == -EINVAL) ||
   17a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17a06:	f113 0f16 	cmn.w	r3, #22
   17a0a:	d004      	beq.n	17a16 <mpu_configure_regions_and_partition+0x11e>
			(u_reg_index > (reg_index - 1))) {
   17a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17a0e:	3b01      	subs	r3, #1
		if ((u_reg_index == -EINVAL) ||
   17a10:	6bba      	ldr	r2, [r7, #56]	; 0x38
   17a12:	429a      	cmp	r2, r3
   17a14:	dd3c      	ble.n	17a90 <mpu_configure_regions_and_partition+0x198>
			LOG_ERR("Invalid underlying region index %u",
   17a16:	2303      	movs	r3, #3
   17a18:	2b00      	cmp	r3, #0
   17a1a:	d035      	beq.n	17a88 <mpu_configure_regions_and_partition+0x190>
   17a1c:	f00c fd2a 	bl	24474 <k_is_user_context>
   17a20:	4603      	mov	r3, r0
   17a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   17a26:	2300      	movs	r3, #0
   17a28:	61fb      	str	r3, [r7, #28]
   17a2a:	2303      	movs	r3, #3
   17a2c:	2b00      	cmp	r3, #0
   17a2e:	d007      	beq.n	17a40 <mpu_configure_regions_and_partition+0x148>
   17a30:	4b79      	ldr	r3, [pc, #484]	; (17c18 <mpu_configure_regions_and_partition+0x320>)
   17a32:	681b      	ldr	r3, [r3, #0]
   17a34:	4618      	mov	r0, r3
   17a36:	f7ff fe0d 	bl	17654 <log_const_source_id>
   17a3a:	4603      	mov	r3, r0
   17a3c:	b29b      	uxth	r3, r3
   17a3e:	e000      	b.n	17a42 <mpu_configure_regions_and_partition+0x14a>
   17a40:	2300      	movs	r3, #0
   17a42:	853b      	strh	r3, [r7, #40]	; 0x28
   17a44:	7e3b      	ldrb	r3, [r7, #24]
   17a46:	2201      	movs	r2, #1
   17a48:	f362 0302 	bfi	r3, r2, #0, #3
   17a4c:	763b      	strb	r3, [r7, #24]
   17a4e:	7e3b      	ldrb	r3, [r7, #24]
   17a50:	f36f 03c5 	bfc	r3, #3, #3
   17a54:	763b      	strb	r3, [r7, #24]
   17a56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   17a58:	f3c3 0309 	ubfx	r3, r3, #0, #10
   17a5c:	b29a      	uxth	r2, r3
   17a5e:	8b3b      	ldrh	r3, [r7, #24]
   17a60:	f362 138f 	bfi	r3, r2, #6, #10
   17a64:	833b      	strh	r3, [r7, #24]
   17a66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   17a6a:	2b00      	cmp	r3, #0
   17a6c:	d005      	beq.n	17a7a <mpu_configure_regions_and_partition+0x182>
   17a6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   17a70:	496b      	ldr	r1, [pc, #428]	; (17c20 <mpu_configure_regions_and_partition+0x328>)
   17a72:	8b38      	ldrh	r0, [r7, #24]
   17a74:	f7fb fb6c 	bl	13150 <log_from_user>
   17a78:	e007      	b.n	17a8a <mpu_configure_regions_and_partition+0x192>
   17a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17a7c:	8b3a      	ldrh	r2, [r7, #24]
   17a7e:	4619      	mov	r1, r3
   17a80:	4867      	ldr	r0, [pc, #412]	; (17c20 <mpu_configure_regions_and_partition+0x328>)
   17a82:	f00b f854 	bl	22b2e <log_1>
   17a86:	e000      	b.n	17a8a <mpu_configure_regions_and_partition+0x192>
   17a88:	bf00      	nop
				u_reg_index);
			return -EINVAL;
   17a8a:	f06f 0315 	mvn.w	r3, #21
   17a8e:	e122      	b.n	17cd6 <mpu_configure_regions_and_partition+0x3de>

		/*
		 * The new memory region is to be placed inside the underlying
		 * region, possibly splitting the underlying region into two.
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
   17a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17a92:	4618      	mov	r0, r3
   17a94:	f7ff fe94 	bl	177c0 <mpu_region_get_base>
   17a98:	6378      	str	r0, [r7, #52]	; 0x34
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
   17a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17a9c:	4618      	mov	r0, r3
   17a9e:	f7ff febb 	bl	17818 <mpu_region_get_last_addr>
   17aa2:	6338      	str	r0, [r7, #48]	; 0x30
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   17aa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17aa6:	4613      	mov	r3, r2
   17aa8:	005b      	lsls	r3, r3, #1
   17aaa:	4413      	add	r3, r2
   17aac:	009b      	lsls	r3, r3, #2
   17aae:	461a      	mov	r2, r3
   17ab0:	687b      	ldr	r3, [r7, #4]
   17ab2:	4413      	add	r3, r2
   17ab4:	6819      	ldr	r1, [r3, #0]
   17ab6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17ab8:	4613      	mov	r3, r2
   17aba:	005b      	lsls	r3, r3, #1
   17abc:	4413      	add	r3, r2
   17abe:	009b      	lsls	r3, r3, #2
   17ac0:	461a      	mov	r2, r3
   17ac2:	687b      	ldr	r3, [r7, #4]
   17ac4:	4413      	add	r3, r2
   17ac6:	685b      	ldr	r3, [r3, #4]
   17ac8:	440b      	add	r3, r1
   17aca:	3b01      	subs	r3, #1
   17acc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if ((regions[i].start == u_reg_base) &&
   17ace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17ad0:	4613      	mov	r3, r2
   17ad2:	005b      	lsls	r3, r3, #1
   17ad4:	4413      	add	r3, r2
   17ad6:	009b      	lsls	r3, r3, #2
   17ad8:	461a      	mov	r2, r3
   17ada:	687b      	ldr	r3, [r7, #4]
   17adc:	4413      	add	r3, r2
   17ade:	681b      	ldr	r3, [r3, #0]
   17ae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   17ae2:	429a      	cmp	r2, r3
   17ae4:	d111      	bne.n	17b0a <mpu_configure_regions_and_partition+0x212>
   17ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   17ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17aea:	429a      	cmp	r2, r3
   17aec:	d10d      	bne.n	17b0a <mpu_configure_regions_and_partition+0x212>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
   17aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17af0:	b2d8      	uxtb	r0, r3
   17af2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17af4:	4613      	mov	r3, r2
   17af6:	005b      	lsls	r3, r3, #1
   17af8:	4413      	add	r3, r2
   17afa:	009b      	lsls	r3, r3, #2
   17afc:	461a      	mov	r2, r3
   17afe:	687b      	ldr	r3, [r7, #4]
   17b00:	4413      	add	r3, r2
   17b02:	4619      	mov	r1, r3
   17b04:	f000 fa14 	bl	17f30 <mpu_configure_region>
   17b08:	e0dc      	b.n	17cc4 <mpu_configure_regions_and_partition+0x3cc>
		} else if (regions[i].start == u_reg_base) {
   17b0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17b0c:	4613      	mov	r3, r2
   17b0e:	005b      	lsls	r3, r3, #1
   17b10:	4413      	add	r3, r2
   17b12:	009b      	lsls	r3, r3, #2
   17b14:	461a      	mov	r2, r3
   17b16:	687b      	ldr	r3, [r7, #4]
   17b18:	4413      	add	r3, r2
   17b1a:	681b      	ldr	r3, [r3, #0]
   17b1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   17b1e:	429a      	cmp	r2, r3
   17b20:	d12e      	bne.n	17b80 <mpu_configure_regions_and_partition+0x288>
			/* The new region starts exactly at the start of the
			 * underlying region; the start of the underlying
			 * region needs to be set to the end of the new region.
			 */
			mpu_region_set_base(u_reg_index,
   17b22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
				regions[i].start + regions[i].size);
   17b24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17b26:	4613      	mov	r3, r2
   17b28:	005b      	lsls	r3, r3, #1
   17b2a:	4413      	add	r3, r2
   17b2c:	009b      	lsls	r3, r3, #2
   17b2e:	461a      	mov	r2, r3
   17b30:	687b      	ldr	r3, [r7, #4]
   17b32:	4413      	add	r3, r2
   17b34:	6819      	ldr	r1, [r3, #0]
   17b36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17b38:	4613      	mov	r3, r2
   17b3a:	005b      	lsls	r3, r3, #1
   17b3c:	4413      	add	r3, r2
   17b3e:	009b      	lsls	r3, r3, #2
   17b40:	461a      	mov	r2, r3
   17b42:	687b      	ldr	r3, [r7, #4]
   17b44:	4413      	add	r3, r2
   17b46:	685b      	ldr	r3, [r3, #4]
   17b48:	440b      	add	r3, r1
			mpu_region_set_base(u_reg_index,
   17b4a:	4619      	mov	r1, r3
   17b4c:	f7ff fe4a 	bl	177e4 <mpu_region_set_base>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
   17b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17b52:	b2d8      	uxtb	r0, r3
   17b54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17b56:	4613      	mov	r3, r2
   17b58:	005b      	lsls	r3, r3, #1
   17b5a:	4413      	add	r3, r2
   17b5c:	009b      	lsls	r3, r3, #2
   17b5e:	461a      	mov	r2, r3
   17b60:	687b      	ldr	r3, [r7, #4]
   17b62:	4413      	add	r3, r2
   17b64:	4619      	mov	r1, r3
   17b66:	f000 f9e3 	bl	17f30 <mpu_configure_region>
   17b6a:	6478      	str	r0, [r7, #68]	; 0x44

			if (reg_index == -EINVAL) {
   17b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17b6e:	f113 0f16 	cmn.w	r3, #22
   17b72:	d101      	bne.n	17b78 <mpu_configure_regions_and_partition+0x280>
				return reg_index;
   17b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17b76:	e0ae      	b.n	17cd6 <mpu_configure_regions_and_partition+0x3de>
			}

			reg_index++;
   17b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17b7a:	3301      	adds	r3, #1
   17b7c:	647b      	str	r3, [r7, #68]	; 0x44
   17b7e:	e0a1      	b.n	17cc4 <mpu_configure_regions_and_partition+0x3cc>
		} else if (reg_last == u_reg_last) {
   17b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   17b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17b84:	429a      	cmp	r2, r3
   17b86:	d125      	bne.n	17bd4 <mpu_configure_regions_and_partition+0x2dc>
			/* The new region ends exactly at the end of the
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
   17b88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
				regions[i].start - 1);
   17b8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17b8c:	4613      	mov	r3, r2
   17b8e:	005b      	lsls	r3, r3, #1
   17b90:	4413      	add	r3, r2
   17b92:	009b      	lsls	r3, r3, #2
   17b94:	461a      	mov	r2, r3
   17b96:	687b      	ldr	r3, [r7, #4]
   17b98:	4413      	add	r3, r2
   17b9a:	681b      	ldr	r3, [r3, #0]
   17b9c:	3b01      	subs	r3, #1
			mpu_region_set_limit(u_reg_index,
   17b9e:	4619      	mov	r1, r3
   17ba0:	f7ff fe4c 	bl	1783c <mpu_region_set_limit>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
   17ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17ba6:	b2d8      	uxtb	r0, r3
   17ba8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17baa:	4613      	mov	r3, r2
   17bac:	005b      	lsls	r3, r3, #1
   17bae:	4413      	add	r3, r2
   17bb0:	009b      	lsls	r3, r3, #2
   17bb2:	461a      	mov	r2, r3
   17bb4:	687b      	ldr	r3, [r7, #4]
   17bb6:	4413      	add	r3, r2
   17bb8:	4619      	mov	r1, r3
   17bba:	f000 f9b9 	bl	17f30 <mpu_configure_region>
   17bbe:	6478      	str	r0, [r7, #68]	; 0x44

			if (reg_index == -EINVAL) {
   17bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17bc2:	f113 0f16 	cmn.w	r3, #22
   17bc6:	d101      	bne.n	17bcc <mpu_configure_regions_and_partition+0x2d4>
				return reg_index;
   17bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17bca:	e084      	b.n	17cd6 <mpu_configure_regions_and_partition+0x3de>
			}

			reg_index++;
   17bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17bce:	3301      	adds	r3, #1
   17bd0:	647b      	str	r3, [r7, #68]	; 0x44
   17bd2:	e077      	b.n	17cc4 <mpu_configure_regions_and_partition+0x3cc>
		} else {
			/* The new regions lies strictly inside the
			 * underlying region, which needs to split
			 * into two regions.
			 */
			mpu_region_set_limit(u_reg_index,
   17bd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
				regions[i].start - 1);
   17bd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17bd8:	4613      	mov	r3, r2
   17bda:	005b      	lsls	r3, r3, #1
   17bdc:	4413      	add	r3, r2
   17bde:	009b      	lsls	r3, r3, #2
   17be0:	461a      	mov	r2, r3
   17be2:	687b      	ldr	r3, [r7, #4]
   17be4:	4413      	add	r3, r2
   17be6:	681b      	ldr	r3, [r3, #0]
   17be8:	3b01      	subs	r3, #1
			mpu_region_set_limit(u_reg_index,
   17bea:	4619      	mov	r1, r3
   17bec:	f7ff fe26 	bl	1783c <mpu_region_set_limit>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
   17bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17bf2:	b2d8      	uxtb	r0, r3
   17bf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17bf6:	4613      	mov	r3, r2
   17bf8:	005b      	lsls	r3, r3, #1
   17bfa:	4413      	add	r3, r2
   17bfc:	009b      	lsls	r3, r3, #2
   17bfe:	461a      	mov	r2, r3
   17c00:	687b      	ldr	r3, [r7, #4]
   17c02:	4413      	add	r3, r2
   17c04:	4619      	mov	r1, r3
   17c06:	f000 f993 	bl	17f30 <mpu_configure_region>
   17c0a:	6478      	str	r0, [r7, #68]	; 0x44

			if (reg_index == -EINVAL) {
   17c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17c0e:	f113 0f16 	cmn.w	r3, #22
   17c12:	d107      	bne.n	17c24 <mpu_configure_regions_and_partition+0x32c>
				return reg_index;
   17c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17c16:	e05e      	b.n	17cd6 <mpu_configure_regions_and_partition+0x3de>
   17c18:	2001452c 	.word	0x2001452c
   17c1c:	0002aaf4 	.word	0x0002aaf4
   17c20:	0002ab18 	.word	0x0002ab18
			}
			reg_index++;
   17c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17c26:	3301      	adds	r3, #1
   17c28:	647b      	str	r3, [r7, #68]	; 0x44
			 * access attributes as the initial underlying
			 * region.
			 */
			struct arm_mpu_region fill_region;

			mpu_region_get_access_attr(u_reg_index,
   17c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
   17c2c:	f107 0308 	add.w	r3, r7, #8
   17c30:	3308      	adds	r3, #8
   17c32:	4619      	mov	r1, r3
   17c34:	4610      	mov	r0, r2
   17c36:	f7ff fe1b 	bl	17870 <mpu_region_get_access_attr>
				&fill_region.attr);
			fill_region.base = regions[i].start +
   17c3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17c3c:	4613      	mov	r3, r2
   17c3e:	005b      	lsls	r3, r3, #1
   17c40:	4413      	add	r3, r2
   17c42:	009b      	lsls	r3, r3, #2
   17c44:	461a      	mov	r2, r3
   17c46:	687b      	ldr	r3, [r7, #4]
   17c48:	4413      	add	r3, r2
   17c4a:	6819      	ldr	r1, [r3, #0]
				regions[i].size;
   17c4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17c4e:	4613      	mov	r3, r2
   17c50:	005b      	lsls	r3, r3, #1
   17c52:	4413      	add	r3, r2
   17c54:	009b      	lsls	r3, r3, #2
   17c56:	461a      	mov	r2, r3
   17c58:	687b      	ldr	r3, [r7, #4]
   17c5a:	4413      	add	r3, r2
   17c5c:	685b      	ldr	r3, [r3, #4]
			fill_region.base = regions[i].start +
   17c5e:	440b      	add	r3, r1
   17c60:	60bb      	str	r3, [r7, #8]
			fill_region.attr.r_limit =
			REGION_LIMIT_ADDR((regions[i].start +
   17c62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17c64:	4613      	mov	r3, r2
   17c66:	005b      	lsls	r3, r3, #1
   17c68:	4413      	add	r3, r2
   17c6a:	009b      	lsls	r3, r3, #2
   17c6c:	461a      	mov	r2, r3
   17c6e:	687b      	ldr	r3, [r7, #4]
   17c70:	4413      	add	r3, r2
   17c72:	6819      	ldr	r1, [r3, #0]
   17c74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17c76:	4613      	mov	r3, r2
   17c78:	005b      	lsls	r3, r3, #1
   17c7a:	4413      	add	r3, r2
   17c7c:	009b      	lsls	r3, r3, #2
   17c7e:	461a      	mov	r2, r3
   17c80:	687b      	ldr	r3, [r7, #4]
   17c82:	4413      	add	r3, r2
   17c84:	685b      	ldr	r3, [r3, #4]
   17c86:	440b      	add	r3, r1
   17c88:	f023 021f 	bic.w	r2, r3, #31
   17c8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
   17c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17c90:	1acb      	subs	r3, r1, r3
   17c92:	4413      	add	r3, r2
   17c94:	3b01      	subs	r3, #1
   17c96:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
   17c9a:	617b      	str	r3, [r7, #20]
				regions[i].size), (u_reg_last - reg_last));

			reg_index =
				region_allocate_and_init(reg_index,
   17c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17c9e:	b2db      	uxtb	r3, r3
   17ca0:	f107 0208 	add.w	r2, r7, #8
   17ca4:	4611      	mov	r1, r2
   17ca6:	4618      	mov	r0, r3
   17ca8:	f000 f8ae 	bl	17e08 <region_allocate_and_init>
   17cac:	6478      	str	r0, [r7, #68]	; 0x44
					(const struct arm_mpu_region *)
						&fill_region);

			if (reg_index == -EINVAL) {
   17cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17cb0:	f113 0f16 	cmn.w	r3, #22
   17cb4:	d101      	bne.n	17cba <mpu_configure_regions_and_partition+0x3c2>
				return reg_index;
   17cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17cb8:	e00d      	b.n	17cd6 <mpu_configure_regions_and_partition+0x3de>
			}

			reg_index++;
   17cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17cbc:	3301      	adds	r3, #1
   17cbe:	647b      	str	r3, [r7, #68]	; 0x44
   17cc0:	e000      	b.n	17cc4 <mpu_configure_regions_and_partition+0x3cc>
			continue;
   17cc2:	bf00      	nop
	for (i = 0; i < regions_num; i++) {
   17cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17cc6:	3301      	adds	r3, #1
   17cc8:	643b      	str	r3, [r7, #64]	; 0x40
   17cca:	78fb      	ldrb	r3, [r7, #3]
   17ccc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   17cce:	429a      	cmp	r2, r3
   17cd0:	f6ff ae24 	blt.w	1791c <mpu_configure_regions_and_partition+0x24>
		}
	}

	return reg_index;
   17cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   17cd6:	4618      	mov	r0, r3
   17cd8:	3748      	adds	r7, #72	; 0x48
   17cda:	46bd      	mov	sp, r7
   17cdc:	bd80      	pop	{r7, pc}
   17cde:	bf00      	nop

00017ce0 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   17ce0:	b580      	push	{r7, lr}
   17ce2:	b086      	sub	sp, #24
   17ce4:	af00      	add	r7, sp, #0
   17ce6:	60f8      	str	r0, [r7, #12]
   17ce8:	607a      	str	r2, [r7, #4]
   17cea:	603b      	str	r3, [r7, #0]
   17cec:	460b      	mov	r3, r1
   17cee:	72fb      	strb	r3, [r7, #11]
	int mpu_reg_index = static_regions_num;
   17cf0:	4b09      	ldr	r3, [pc, #36]	; (17d18 <mpu_configure_static_mpu_regions+0x38>)
   17cf2:	781b      	ldrb	r3, [r3, #0]
   17cf4:	617b      	str	r3, [r7, #20]
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   17cf6:	697b      	ldr	r3, [r7, #20]
   17cf8:	b2da      	uxtb	r2, r3
   17cfa:	7af9      	ldrb	r1, [r7, #11]
   17cfc:	2301      	movs	r3, #1
   17cfe:	68f8      	ldr	r0, [r7, #12]
   17d00:	f7ff fdfa 	bl	178f8 <mpu_configure_regions_and_partition>
   17d04:	6178      	str	r0, [r7, #20]
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   17d06:	697b      	ldr	r3, [r7, #20]
   17d08:	b2da      	uxtb	r2, r3
   17d0a:	4b03      	ldr	r3, [pc, #12]	; (17d18 <mpu_configure_static_mpu_regions+0x38>)
   17d0c:	701a      	strb	r2, [r3, #0]

	return mpu_reg_index;
   17d0e:	697b      	ldr	r3, [r7, #20]
}
   17d10:	4618      	mov	r0, r3
   17d12:	3718      	adds	r7, #24
   17d14:	46bd      	mov	sp, r7
   17d16:	bd80      	pop	{r7, pc}
   17d18:	200151d9 	.word	0x200151d9

00017d1c <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
   17d1c:	b580      	push	{r7, lr}
   17d1e:	b084      	sub	sp, #16
   17d20:	af00      	add	r7, sp, #0
   17d22:	6078      	str	r0, [r7, #4]
   17d24:	460b      	mov	r3, r1
   17d26:	70fb      	strb	r3, [r7, #3]
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   17d28:	2300      	movs	r3, #0
   17d2a:	60fb      	str	r3, [r7, #12]
   17d2c:	e05e      	b.n	17dec <mpu_mark_areas_for_dynamic_regions+0xd0>
		if (dyn_region_areas[i].size == 0U) {
   17d2e:	68fa      	ldr	r2, [r7, #12]
   17d30:	4613      	mov	r3, r2
   17d32:	005b      	lsls	r3, r3, #1
   17d34:	4413      	add	r3, r2
   17d36:	009b      	lsls	r3, r3, #2
   17d38:	461a      	mov	r2, r3
   17d3a:	687b      	ldr	r3, [r7, #4]
   17d3c:	4413      	add	r3, r2
   17d3e:	685b      	ldr	r3, [r3, #4]
   17d40:	2b00      	cmp	r3, #0
   17d42:	d04f      	beq.n	17de4 <mpu_mark_areas_for_dynamic_regions+0xc8>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   17d44:	68fa      	ldr	r2, [r7, #12]
   17d46:	4613      	mov	r3, r2
   17d48:	005b      	lsls	r3, r3, #1
   17d4a:	4413      	add	r3, r2
   17d4c:	009b      	lsls	r3, r3, #2
   17d4e:	461a      	mov	r2, r3
   17d50:	687b      	ldr	r3, [r7, #4]
   17d52:	4413      	add	r3, r2
   17d54:	6818      	ldr	r0, [r3, #0]
					dyn_region_areas[i].size);
   17d56:	68fa      	ldr	r2, [r7, #12]
   17d58:	4613      	mov	r3, r2
   17d5a:	005b      	lsls	r3, r3, #1
   17d5c:	4413      	add	r3, r2
   17d5e:	009b      	lsls	r3, r3, #2
   17d60:	461a      	mov	r2, r3
   17d62:	687b      	ldr	r3, [r7, #4]
   17d64:	4413      	add	r3, r2
			get_region_index(dyn_region_areas[i].start,
   17d66:	685b      	ldr	r3, [r3, #4]
   17d68:	4619      	mov	r1, r3
   17d6a:	f00c fbc6 	bl	244fa <get_region_index>
   17d6e:	4601      	mov	r1, r0
		dyn_reg_info[i].index =
   17d70:	4823      	ldr	r0, [pc, #140]	; (17e00 <mpu_mark_areas_for_dynamic_regions+0xe4>)
   17d72:	68fa      	ldr	r2, [r7, #12]
   17d74:	4613      	mov	r3, r2
   17d76:	009b      	lsls	r3, r3, #2
   17d78:	4413      	add	r3, r2
   17d7a:	009b      	lsls	r3, r3, #2
   17d7c:	4403      	add	r3, r0
   17d7e:	6019      	str	r1, [r3, #0]

		if (dyn_reg_info[i].index == -EINVAL) {
   17d80:	491f      	ldr	r1, [pc, #124]	; (17e00 <mpu_mark_areas_for_dynamic_regions+0xe4>)
   17d82:	68fa      	ldr	r2, [r7, #12]
   17d84:	4613      	mov	r3, r2
   17d86:	009b      	lsls	r3, r3, #2
   17d88:	4413      	add	r3, r2
   17d8a:	009b      	lsls	r3, r3, #2
   17d8c:	440b      	add	r3, r1
   17d8e:	681b      	ldr	r3, [r3, #0]
   17d90:	f113 0f16 	cmn.w	r3, #22
   17d94:	d102      	bne.n	17d9c <mpu_mark_areas_for_dynamic_regions+0x80>

			return -EINVAL;
   17d96:	f06f 0315 	mvn.w	r3, #21
   17d9a:	e02c      	b.n	17df6 <mpu_mark_areas_for_dynamic_regions+0xda>
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   17d9c:	4918      	ldr	r1, [pc, #96]	; (17e00 <mpu_mark_areas_for_dynamic_regions+0xe4>)
   17d9e:	68fa      	ldr	r2, [r7, #12]
   17da0:	4613      	mov	r3, r2
   17da2:	009b      	lsls	r3, r3, #2
   17da4:	4413      	add	r3, r2
   17da6:	009b      	lsls	r3, r3, #2
   17da8:	440b      	add	r3, r1
   17daa:	681b      	ldr	r3, [r3, #0]
   17dac:	4a15      	ldr	r2, [pc, #84]	; (17e04 <mpu_mark_areas_for_dynamic_regions+0xe8>)
   17dae:	7812      	ldrb	r2, [r2, #0]
   17db0:	4293      	cmp	r3, r2
   17db2:	db02      	blt.n	17dba <mpu_mark_areas_for_dynamic_regions+0x9e>

			return -EINVAL;
   17db4:	f06f 0315 	mvn.w	r3, #21
   17db8:	e01d      	b.n	17df6 <mpu_mark_areas_for_dynamic_regions+0xda>
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
   17dba:	4911      	ldr	r1, [pc, #68]	; (17e00 <mpu_mark_areas_for_dynamic_regions+0xe4>)
   17dbc:	68fa      	ldr	r2, [r7, #12]
   17dbe:	4613      	mov	r3, r2
   17dc0:	009b      	lsls	r3, r3, #2
   17dc2:	4413      	add	r3, r2
   17dc4:	009b      	lsls	r3, r3, #2
   17dc6:	440b      	add	r3, r1
   17dc8:	681b      	ldr	r3, [r3, #0]
   17dca:	4618      	mov	r0, r3
   17dcc:	68fa      	ldr	r2, [r7, #12]
   17dce:	4613      	mov	r3, r2
   17dd0:	009b      	lsls	r3, r3, #2
   17dd2:	4413      	add	r3, r2
   17dd4:	009b      	lsls	r3, r3, #2
   17dd6:	4a0a      	ldr	r2, [pc, #40]	; (17e00 <mpu_mark_areas_for_dynamic_regions+0xe4>)
   17dd8:	4413      	add	r3, r2
   17dda:	3304      	adds	r3, #4
   17ddc:	4619      	mov	r1, r3
   17dde:	f7ff fd6b 	bl	178b8 <mpu_region_get_conf>
   17de2:	e000      	b.n	17de6 <mpu_mark_areas_for_dynamic_regions+0xca>
			continue;
   17de4:	bf00      	nop
	for (int i = 0; i < dyn_region_areas_num; i++) {
   17de6:	68fb      	ldr	r3, [r7, #12]
   17de8:	3301      	adds	r3, #1
   17dea:	60fb      	str	r3, [r7, #12]
   17dec:	78fb      	ldrb	r3, [r7, #3]
   17dee:	68fa      	ldr	r2, [r7, #12]
   17df0:	429a      	cmp	r2, r3
   17df2:	db9c      	blt.n	17d2e <mpu_mark_areas_for_dynamic_regions+0x12>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
   17df4:	2300      	movs	r3, #0
}
   17df6:	4618      	mov	r0, r3
   17df8:	3710      	adds	r7, #16
   17dfa:	46bd      	mov	sp, r7
   17dfc:	bd80      	pop	{r7, pc}
   17dfe:	bf00      	nop
   17e00:	20014d6c 	.word	0x20014d6c
   17e04:	200151d9 	.word	0x200151d9

00017e08 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   17e08:	b590      	push	{r4, r7, lr}
   17e0a:	b089      	sub	sp, #36	; 0x24
   17e0c:	af00      	add	r7, sp, #0
   17e0e:	4603      	mov	r3, r0
   17e10:	6039      	str	r1, [r7, #0]
   17e12:	71fb      	strb	r3, [r7, #7]
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   17e14:	79fc      	ldrb	r4, [r7, #7]
   17e16:	f00c fb49 	bl	244ac <get_num_regions>
   17e1a:	4603      	mov	r3, r0
   17e1c:	3b01      	subs	r3, #1
   17e1e:	429c      	cmp	r4, r3
   17e20:	d93b      	bls.n	17e9a <region_allocate_and_init+0x92>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   17e22:	2303      	movs	r3, #3
   17e24:	2b00      	cmp	r3, #0
   17e26:	d034      	beq.n	17e92 <region_allocate_and_init+0x8a>
   17e28:	f00c fb24 	bl	24474 <k_is_user_context>
   17e2c:	4603      	mov	r3, r0
   17e2e:	76fb      	strb	r3, [r7, #27]
   17e30:	2300      	movs	r3, #0
   17e32:	617b      	str	r3, [r7, #20]
   17e34:	2303      	movs	r3, #3
   17e36:	2b00      	cmp	r3, #0
   17e38:	d007      	beq.n	17e4a <region_allocate_and_init+0x42>
   17e3a:	4b39      	ldr	r3, [pc, #228]	; (17f20 <region_allocate_and_init+0x118>)
   17e3c:	681b      	ldr	r3, [r3, #0]
   17e3e:	4618      	mov	r0, r3
   17e40:	f7ff fc08 	bl	17654 <log_const_source_id>
   17e44:	4603      	mov	r3, r0
   17e46:	b29b      	uxth	r3, r3
   17e48:	e000      	b.n	17e4c <region_allocate_and_init+0x44>
   17e4a:	2300      	movs	r3, #0
   17e4c:	833b      	strh	r3, [r7, #24]
   17e4e:	7c3b      	ldrb	r3, [r7, #16]
   17e50:	2201      	movs	r2, #1
   17e52:	f362 0302 	bfi	r3, r2, #0, #3
   17e56:	743b      	strb	r3, [r7, #16]
   17e58:	7c3b      	ldrb	r3, [r7, #16]
   17e5a:	f36f 03c5 	bfc	r3, #3, #3
   17e5e:	743b      	strb	r3, [r7, #16]
   17e60:	8b3b      	ldrh	r3, [r7, #24]
   17e62:	f3c3 0309 	ubfx	r3, r3, #0, #10
   17e66:	b29a      	uxth	r2, r3
   17e68:	8a3b      	ldrh	r3, [r7, #16]
   17e6a:	f362 138f 	bfi	r3, r2, #6, #10
   17e6e:	823b      	strh	r3, [r7, #16]
   17e70:	7efb      	ldrb	r3, [r7, #27]
   17e72:	2b00      	cmp	r3, #0
   17e74:	d006      	beq.n	17e84 <region_allocate_and_init+0x7c>
   17e76:	79fb      	ldrb	r3, [r7, #7]
   17e78:	461a      	mov	r2, r3
   17e7a:	492a      	ldr	r1, [pc, #168]	; (17f24 <region_allocate_and_init+0x11c>)
   17e7c:	8a38      	ldrh	r0, [r7, #16]
   17e7e:	f7fb f967 	bl	13150 <log_from_user>
   17e82:	e007      	b.n	17e94 <region_allocate_and_init+0x8c>
   17e84:	79fb      	ldrb	r3, [r7, #7]
   17e86:	8a3a      	ldrh	r2, [r7, #16]
   17e88:	4619      	mov	r1, r3
   17e8a:	4826      	ldr	r0, [pc, #152]	; (17f24 <region_allocate_and_init+0x11c>)
   17e8c:	f00a fe4f 	bl	22b2e <log_1>
   17e90:	e000      	b.n	17e94 <region_allocate_and_init+0x8c>
   17e92:	bf00      	nop
		return -EINVAL;
   17e94:	f06f 0315 	mvn.w	r3, #21
   17e98:	e03e      	b.n	17f18 <region_allocate_and_init+0x110>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);
   17e9a:	2303      	movs	r3, #3
   17e9c:	2b03      	cmp	r3, #3
   17e9e:	d934      	bls.n	17f0a <region_allocate_and_init+0x102>
   17ea0:	f00c fae8 	bl	24474 <k_is_user_context>
   17ea4:	4603      	mov	r3, r0
   17ea6:	77fb      	strb	r3, [r7, #31]
   17ea8:	2300      	movs	r3, #0
   17eaa:	60fb      	str	r3, [r7, #12]
   17eac:	2303      	movs	r3, #3
   17eae:	2b00      	cmp	r3, #0
   17eb0:	d007      	beq.n	17ec2 <region_allocate_and_init+0xba>
   17eb2:	4b1b      	ldr	r3, [pc, #108]	; (17f20 <region_allocate_and_init+0x118>)
   17eb4:	681b      	ldr	r3, [r3, #0]
   17eb6:	4618      	mov	r0, r3
   17eb8:	f7ff fbcc 	bl	17654 <log_const_source_id>
   17ebc:	4603      	mov	r3, r0
   17ebe:	b29b      	uxth	r3, r3
   17ec0:	e000      	b.n	17ec4 <region_allocate_and_init+0xbc>
   17ec2:	2300      	movs	r3, #0
   17ec4:	83bb      	strh	r3, [r7, #28]
   17ec6:	7a3b      	ldrb	r3, [r7, #8]
   17ec8:	2204      	movs	r2, #4
   17eca:	f362 0302 	bfi	r3, r2, #0, #3
   17ece:	723b      	strb	r3, [r7, #8]
   17ed0:	7a3b      	ldrb	r3, [r7, #8]
   17ed2:	f36f 03c5 	bfc	r3, #3, #3
   17ed6:	723b      	strb	r3, [r7, #8]
   17ed8:	8bbb      	ldrh	r3, [r7, #28]
   17eda:	f3c3 0309 	ubfx	r3, r3, #0, #10
   17ede:	b29a      	uxth	r2, r3
   17ee0:	893b      	ldrh	r3, [r7, #8]
   17ee2:	f362 138f 	bfi	r3, r2, #6, #10
   17ee6:	813b      	strh	r3, [r7, #8]
   17ee8:	7ffb      	ldrb	r3, [r7, #31]
   17eea:	2b00      	cmp	r3, #0
   17eec:	d006      	beq.n	17efc <region_allocate_and_init+0xf4>
   17eee:	79fb      	ldrb	r3, [r7, #7]
   17ef0:	4a0d      	ldr	r2, [pc, #52]	; (17f28 <region_allocate_and_init+0x120>)
   17ef2:	490e      	ldr	r1, [pc, #56]	; (17f2c <region_allocate_and_init+0x124>)
   17ef4:	8938      	ldrh	r0, [r7, #8]
   17ef6:	f7fb f92b 	bl	13150 <log_from_user>
   17efa:	e007      	b.n	17f0c <region_allocate_and_init+0x104>
   17efc:	490a      	ldr	r1, [pc, #40]	; (17f28 <region_allocate_and_init+0x120>)
   17efe:	79fa      	ldrb	r2, [r7, #7]
   17f00:	893b      	ldrh	r3, [r7, #8]
   17f02:	480a      	ldr	r0, [pc, #40]	; (17f2c <region_allocate_and_init+0x124>)
   17f04:	f00a fe2a 	bl	22b5c <log_2>
   17f08:	e000      	b.n	17f0c <region_allocate_and_init+0x104>
   17f0a:	bf00      	nop

	/* Program region */
	region_init(index, region_conf);
   17f0c:	79fb      	ldrb	r3, [r7, #7]
   17f0e:	6839      	ldr	r1, [r7, #0]
   17f10:	4618      	mov	r0, r3
   17f12:	f7ff fbbd 	bl	17690 <region_init>

	return index;
   17f16:	79fb      	ldrb	r3, [r7, #7]
}
   17f18:	4618      	mov	r0, r3
   17f1a:	3724      	adds	r7, #36	; 0x24
   17f1c:	46bd      	mov	sp, r7
   17f1e:	bd90      	pop	{r4, r7, pc}
   17f20:	2001452c 	.word	0x2001452c
   17f24:	0002ab3c 	.word	0x0002ab3c
   17f28:	0002cb98 	.word	0x0002cb98
   17f2c:	0002ab64 	.word	0x0002ab64

00017f30 <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
   17f30:	b590      	push	{r4, r7, lr}
   17f32:	b08b      	sub	sp, #44	; 0x2c
   17f34:	af00      	add	r7, sp, #0
   17f36:	4603      	mov	r3, r0
   17f38:	6039      	str	r1, [r7, #0]
   17f3a:	71fb      	strb	r3, [r7, #7]
	struct arm_mpu_region region_conf;

	LOG_DBG("Configure MPU region at index 0x%x", index);
   17f3c:	2303      	movs	r3, #3
   17f3e:	2b03      	cmp	r3, #3
   17f40:	d936      	bls.n	17fb0 <mpu_configure_region+0x80>
   17f42:	f00c fa97 	bl	24474 <k_is_user_context>
   17f46:	4603      	mov	r3, r0
   17f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   17f4c:	2300      	movs	r3, #0
   17f4e:	613b      	str	r3, [r7, #16]
   17f50:	2303      	movs	r3, #3
   17f52:	2b00      	cmp	r3, #0
   17f54:	d007      	beq.n	17f66 <mpu_configure_region+0x36>
   17f56:	4b25      	ldr	r3, [pc, #148]	; (17fec <mpu_configure_region+0xbc>)
   17f58:	681b      	ldr	r3, [r3, #0]
   17f5a:	4618      	mov	r0, r3
   17f5c:	f7ff fb7a 	bl	17654 <log_const_source_id>
   17f60:	4603      	mov	r3, r0
   17f62:	b29b      	uxth	r3, r3
   17f64:	e000      	b.n	17f68 <mpu_configure_region+0x38>
   17f66:	2300      	movs	r3, #0
   17f68:	84bb      	strh	r3, [r7, #36]	; 0x24
   17f6a:	7b3b      	ldrb	r3, [r7, #12]
   17f6c:	2204      	movs	r2, #4
   17f6e:	f362 0302 	bfi	r3, r2, #0, #3
   17f72:	733b      	strb	r3, [r7, #12]
   17f74:	7b3b      	ldrb	r3, [r7, #12]
   17f76:	f36f 03c5 	bfc	r3, #3, #3
   17f7a:	733b      	strb	r3, [r7, #12]
   17f7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
   17f7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   17f82:	b29a      	uxth	r2, r3
   17f84:	89bb      	ldrh	r3, [r7, #12]
   17f86:	f362 138f 	bfi	r3, r2, #6, #10
   17f8a:	81bb      	strh	r3, [r7, #12]
   17f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   17f90:	2b00      	cmp	r3, #0
   17f92:	d006      	beq.n	17fa2 <mpu_configure_region+0x72>
   17f94:	79fb      	ldrb	r3, [r7, #7]
   17f96:	4a16      	ldr	r2, [pc, #88]	; (17ff0 <mpu_configure_region+0xc0>)
   17f98:	4916      	ldr	r1, [pc, #88]	; (17ff4 <mpu_configure_region+0xc4>)
   17f9a:	89b8      	ldrh	r0, [r7, #12]
   17f9c:	f7fb f8d8 	bl	13150 <log_from_user>
   17fa0:	e007      	b.n	17fb2 <mpu_configure_region+0x82>
   17fa2:	4913      	ldr	r1, [pc, #76]	; (17ff0 <mpu_configure_region+0xc0>)
   17fa4:	79fa      	ldrb	r2, [r7, #7]
   17fa6:	89bb      	ldrh	r3, [r7, #12]
   17fa8:	4812      	ldr	r0, [pc, #72]	; (17ff4 <mpu_configure_region+0xc4>)
   17faa:	f00a fdd7 	bl	22b5c <log_2>
   17fae:	e000      	b.n	17fb2 <mpu_configure_region+0x82>
   17fb0:	bf00      	nop

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
   17fb2:	683b      	ldr	r3, [r7, #0]
   17fb4:	681b      	ldr	r3, [r3, #0]
   17fb6:	617b      	str	r3, [r7, #20]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   17fb8:	683b      	ldr	r3, [r7, #0]
   17fba:	f103 0108 	add.w	r1, r3, #8
		&new_region->attr, new_region->start, new_region->size);
   17fbe:	683b      	ldr	r3, [r7, #0]
   17fc0:	681a      	ldr	r2, [r3, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   17fc2:	683b      	ldr	r3, [r7, #0]
   17fc4:	685c      	ldr	r4, [r3, #4]
   17fc6:	f107 0314 	add.w	r3, r7, #20
   17fca:	f103 0008 	add.w	r0, r3, #8
   17fce:	4623      	mov	r3, r4
   17fd0:	f00c fab2 	bl	24538 <get_region_attr_from_mpu_partition_info>

	/* Allocate and program region */
	return region_allocate_and_init(index,
   17fd4:	f107 0214 	add.w	r2, r7, #20
   17fd8:	79fb      	ldrb	r3, [r7, #7]
   17fda:	4611      	mov	r1, r2
   17fdc:	4618      	mov	r0, r3
   17fde:	f7ff ff13 	bl	17e08 <region_allocate_and_init>
   17fe2:	4603      	mov	r3, r0
		(const struct arm_mpu_region *)&region_conf);
}
   17fe4:	4618      	mov	r0, r3
   17fe6:	372c      	adds	r7, #44	; 0x2c
   17fe8:	46bd      	mov	sp, r7
   17fea:	bd90      	pop	{r4, r7, pc}
   17fec:	2001452c 	.word	0x2001452c
   17ff0:	0002cbb4 	.word	0x0002cbb4
   17ff4:	0002ab8c 	.word	0x0002ab8c

00017ff8 <arm_core_mpu_enable>:

/**
 * @brief enable the MPU
 */
void arm_core_mpu_enable(void)
{
   17ff8:	b480      	push	{r7}
   17ffa:	af00      	add	r7, sp, #0
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   17ffc:	4b06      	ldr	r3, [pc, #24]	; (18018 <arm_core_mpu_enable+0x20>)
   17ffe:	2205      	movs	r2, #5
   18000:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   18002:	f3bf 8f4f 	dsb	sy
}
   18006:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
   18008:	f3bf 8f6f 	isb	sy
}
   1800c:	bf00      	nop

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1800e:	bf00      	nop
   18010:	46bd      	mov	sp, r7
   18012:	bc80      	pop	{r7}
   18014:	4770      	bx	lr
   18016:	bf00      	nop
   18018:	e000ed90 	.word	0xe000ed90

0001801c <arm_core_mpu_disable>:

/**
 * @brief disable the MPU
 */
void arm_core_mpu_disable(void)
{
   1801c:	b480      	push	{r7}
   1801e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   18020:	f3bf 8f5f 	dmb	sy
}
   18024:	bf00      	nop
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   18026:	4b03      	ldr	r3, [pc, #12]	; (18034 <arm_core_mpu_disable+0x18>)
   18028:	2200      	movs	r2, #0
   1802a:	605a      	str	r2, [r3, #4]
}
   1802c:	bf00      	nop
   1802e:	46bd      	mov	sp, r7
   18030:	bc80      	pop	{r7}
   18032:	4770      	bx	lr
   18034:	e000ed90 	.word	0xe000ed90

00018038 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   18038:	b580      	push	{r7, lr}
   1803a:	b084      	sub	sp, #16
   1803c:	af00      	add	r7, sp, #0
   1803e:	60f8      	str	r0, [r7, #12]
   18040:	607a      	str	r2, [r7, #4]
   18042:	603b      	str	r3, [r7, #0]
   18044:	460b      	mov	r3, r1
   18046:	72fb      	strb	r3, [r7, #11]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   18048:	7af9      	ldrb	r1, [r7, #11]
   1804a:	683b      	ldr	r3, [r7, #0]
   1804c:	687a      	ldr	r2, [r7, #4]
   1804e:	68f8      	ldr	r0, [r7, #12]
   18050:	f7ff fe46 	bl	17ce0 <mpu_configure_static_mpu_regions>
   18054:	4603      	mov	r3, r0
   18056:	f113 0f16 	cmn.w	r3, #22
   1805a:	d110      	bne.n	1807e <arm_core_mpu_configure_static_mpu_regions+0x46>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1805c:	f240 1305 	movw	r3, #261	; 0x105
   18060:	4a09      	ldr	r2, [pc, #36]	; (18088 <arm_core_mpu_configure_static_mpu_regions+0x50>)
   18062:	490a      	ldr	r1, [pc, #40]	; (1808c <arm_core_mpu_configure_static_mpu_regions+0x54>)
   18064:	480a      	ldr	r0, [pc, #40]	; (18090 <arm_core_mpu_configure_static_mpu_regions+0x58>)
   18066:	f008 ffff 	bl	21068 <printk>
   1806a:	7afb      	ldrb	r3, [r7, #11]
   1806c:	4619      	mov	r1, r3
   1806e:	4809      	ldr	r0, [pc, #36]	; (18094 <arm_core_mpu_configure_static_mpu_regions+0x5c>)
   18070:	f008 fffa 	bl	21068 <printk>
   18074:	f240 1105 	movw	r1, #261	; 0x105
   18078:	4803      	ldr	r0, [pc, #12]	; (18088 <arm_core_mpu_configure_static_mpu_regions+0x50>)
   1807a:	f00a f8a2 	bl	221c2 <assert_post_action>
			regions_num);
	}
}
   1807e:	bf00      	nop
   18080:	3710      	adds	r7, #16
   18082:	46bd      	mov	sp, r7
   18084:	bd80      	pop	{r7, pc}
   18086:	bf00      	nop
   18088:	0002abb4 	.word	0x0002abb4
   1808c:	0002abec 	.word	0x0002abec
   18090:	0002abf0 	.word	0x0002abf0
   18094:	0002ac10 	.word	0x0002ac10

00018098 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   18098:	b580      	push	{r7, lr}
   1809a:	b082      	sub	sp, #8
   1809c:	af00      	add	r7, sp, #0
   1809e:	6078      	str	r0, [r7, #4]
   180a0:	460b      	mov	r3, r1
   180a2:	70fb      	strb	r3, [r7, #3]
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   180a4:	78fb      	ldrb	r3, [r7, #3]
   180a6:	4619      	mov	r1, r3
   180a8:	6878      	ldr	r0, [r7, #4]
   180aa:	f7ff fe37 	bl	17d1c <mpu_mark_areas_for_dynamic_regions>
   180ae:	4603      	mov	r3, r0
   180b0:	f113 0f16 	cmn.w	r3, #22
   180b4:	d110      	bne.n	180d8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x40>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   180b6:	f240 1315 	movw	r3, #277	; 0x115
   180ba:	4a09      	ldr	r2, [pc, #36]	; (180e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x48>)
   180bc:	4909      	ldr	r1, [pc, #36]	; (180e4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4c>)
   180be:	480a      	ldr	r0, [pc, #40]	; (180e8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x50>)
   180c0:	f008 ffd2 	bl	21068 <printk>
   180c4:	78fb      	ldrb	r3, [r7, #3]
   180c6:	4619      	mov	r1, r3
   180c8:	4808      	ldr	r0, [pc, #32]	; (180ec <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>)
   180ca:	f008 ffcd 	bl	21068 <printk>
   180ce:	f240 1115 	movw	r1, #277	; 0x115
   180d2:	4803      	ldr	r0, [pc, #12]	; (180e0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x48>)
   180d4:	f00a f875 	bl	221c2 <assert_post_action>
			dyn_region_areas_num);
	}
}
   180d8:	bf00      	nop
   180da:	3708      	adds	r7, #8
   180dc:	46bd      	mov	sp, r7
   180de:	bd80      	pop	{r7, pc}
   180e0:	0002abb4 	.word	0x0002abb4
   180e4:	0002abec 	.word	0x0002abec
   180e8:	0002abf0 	.word	0x0002abf0
   180ec:	0002ac3c 	.word	0x0002ac3c

000180f0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   180f0:	b590      	push	{r4, r7, lr}
   180f2:	b085      	sub	sp, #20
   180f4:	af00      	add	r7, sp, #0
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   180f6:	4b4c      	ldr	r3, [pc, #304]	; (18228 <z_arm_mpu_init+0x138>)
   180f8:	681c      	ldr	r4, [r3, #0]
   180fa:	f00c f9d7 	bl	244ac <get_num_regions>
   180fe:	4603      	mov	r3, r0
   18100:	429c      	cmp	r4, r3
   18102:	d918      	bls.n	18136 <z_arm_mpu_init+0x46>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   18104:	f44f 739e 	mov.w	r3, #316	; 0x13c
   18108:	4a48      	ldr	r2, [pc, #288]	; (1822c <z_arm_mpu_init+0x13c>)
   1810a:	4949      	ldr	r1, [pc, #292]	; (18230 <z_arm_mpu_init+0x140>)
   1810c:	4849      	ldr	r0, [pc, #292]	; (18234 <z_arm_mpu_init+0x144>)
   1810e:	f008 ffab 	bl	21068 <printk>
   18112:	4b45      	ldr	r3, [pc, #276]	; (18228 <z_arm_mpu_init+0x138>)
   18114:	681c      	ldr	r4, [r3, #0]
   18116:	f00c f9c9 	bl	244ac <get_num_regions>
   1811a:	4603      	mov	r3, r0
   1811c:	461a      	mov	r2, r3
   1811e:	4621      	mov	r1, r4
   18120:	4845      	ldr	r0, [pc, #276]	; (18238 <z_arm_mpu_init+0x148>)
   18122:	f008 ffa1 	bl	21068 <printk>
   18126:	f44f 719e 	mov.w	r1, #316	; 0x13c
   1812a:	4840      	ldr	r0, [pc, #256]	; (1822c <z_arm_mpu_init+0x13c>)
   1812c:	f00a f849 	bl	221c2 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   18130:	f04f 33ff 	mov.w	r3, #4294967295
   18134:	e073      	b.n	1821e <z_arm_mpu_init+0x12e>
	}

	LOG_DBG("total region count: %d", get_num_regions());
   18136:	2303      	movs	r3, #3
   18138:	2b03      	cmp	r3, #3
   1813a:	d93a      	bls.n	181b2 <z_arm_mpu_init+0xc2>
   1813c:	f00c f99a 	bl	24474 <k_is_user_context>
   18140:	4603      	mov	r3, r0
   18142:	72fb      	strb	r3, [r7, #11]
   18144:	2300      	movs	r3, #0
   18146:	607b      	str	r3, [r7, #4]
   18148:	2303      	movs	r3, #3
   1814a:	2b00      	cmp	r3, #0
   1814c:	d007      	beq.n	1815e <z_arm_mpu_init+0x6e>
   1814e:	4b3b      	ldr	r3, [pc, #236]	; (1823c <z_arm_mpu_init+0x14c>)
   18150:	681b      	ldr	r3, [r3, #0]
   18152:	4618      	mov	r0, r3
   18154:	f7ff fa7e 	bl	17654 <log_const_source_id>
   18158:	4603      	mov	r3, r0
   1815a:	b29b      	uxth	r3, r3
   1815c:	e000      	b.n	18160 <z_arm_mpu_init+0x70>
   1815e:	2300      	movs	r3, #0
   18160:	813b      	strh	r3, [r7, #8]
   18162:	783b      	ldrb	r3, [r7, #0]
   18164:	2204      	movs	r2, #4
   18166:	f362 0302 	bfi	r3, r2, #0, #3
   1816a:	703b      	strb	r3, [r7, #0]
   1816c:	783b      	ldrb	r3, [r7, #0]
   1816e:	f36f 03c5 	bfc	r3, #3, #3
   18172:	703b      	strb	r3, [r7, #0]
   18174:	893b      	ldrh	r3, [r7, #8]
   18176:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1817a:	b29a      	uxth	r2, r3
   1817c:	883b      	ldrh	r3, [r7, #0]
   1817e:	f362 138f 	bfi	r3, r2, #6, #10
   18182:	803b      	strh	r3, [r7, #0]
   18184:	7afb      	ldrb	r3, [r7, #11]
   18186:	2b00      	cmp	r3, #0
   18188:	d008      	beq.n	1819c <z_arm_mpu_init+0xac>
   1818a:	f00c f98f 	bl	244ac <get_num_regions>
   1818e:	4603      	mov	r3, r0
   18190:	4a2b      	ldr	r2, [pc, #172]	; (18240 <z_arm_mpu_init+0x150>)
   18192:	492c      	ldr	r1, [pc, #176]	; (18244 <z_arm_mpu_init+0x154>)
   18194:	8838      	ldrh	r0, [r7, #0]
   18196:	f7fa ffdb 	bl	13150 <log_from_user>
   1819a:	e00b      	b.n	181b4 <z_arm_mpu_init+0xc4>
   1819c:	4c28      	ldr	r4, [pc, #160]	; (18240 <z_arm_mpu_init+0x150>)
   1819e:	f00c f985 	bl	244ac <get_num_regions>
   181a2:	4603      	mov	r3, r0
   181a4:	461a      	mov	r2, r3
   181a6:	883b      	ldrh	r3, [r7, #0]
   181a8:	4621      	mov	r1, r4
   181aa:	4826      	ldr	r0, [pc, #152]	; (18244 <z_arm_mpu_init+0x154>)
   181ac:	f00a fcd6 	bl	22b5c <log_2>
   181b0:	e000      	b.n	181b4 <z_arm_mpu_init+0xc4>
   181b2:	bf00      	nop

	arm_core_mpu_disable();
   181b4:	f7ff ff32 	bl	1801c <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
   181b8:	f7ff fa5c 	bl	17674 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   181bc:	2300      	movs	r3, #0
   181be:	60fb      	str	r3, [r7, #12]
   181c0:	e00b      	b.n	181da <z_arm_mpu_init+0xea>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   181c2:	4b19      	ldr	r3, [pc, #100]	; (18228 <z_arm_mpu_init+0x138>)
   181c4:	685a      	ldr	r2, [r3, #4]
   181c6:	68fb      	ldr	r3, [r7, #12]
   181c8:	011b      	lsls	r3, r3, #4
   181ca:	4413      	add	r3, r2
   181cc:	4619      	mov	r1, r3
   181ce:	68f8      	ldr	r0, [r7, #12]
   181d0:	f7ff fa5e 	bl	17690 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   181d4:	68fb      	ldr	r3, [r7, #12]
   181d6:	3301      	adds	r3, #1
   181d8:	60fb      	str	r3, [r7, #12]
   181da:	4b13      	ldr	r3, [pc, #76]	; (18228 <z_arm_mpu_init+0x138>)
   181dc:	681b      	ldr	r3, [r3, #0]
   181de:	68fa      	ldr	r2, [r7, #12]
   181e0:	429a      	cmp	r2, r3
   181e2:	d3ee      	bcc.n	181c2 <z_arm_mpu_init+0xd2>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   181e4:	4b10      	ldr	r3, [pc, #64]	; (18228 <z_arm_mpu_init+0x138>)
   181e6:	681b      	ldr	r3, [r3, #0]
   181e8:	b2da      	uxtb	r2, r3
   181ea:	4b17      	ldr	r3, [pc, #92]	; (18248 <z_arm_mpu_init+0x158>)
   181ec:	701a      	strb	r2, [r3, #0]


	arm_core_mpu_enable();
   181ee:	f7ff ff03 	bl	17ff8 <arm_core_mpu_enable>
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
   181f2:	4b16      	ldr	r3, [pc, #88]	; (1824c <z_arm_mpu_init+0x15c>)
   181f4:	681b      	ldr	r3, [r3, #0]
   181f6:	0a1b      	lsrs	r3, r3, #8
   181f8:	b2db      	uxtb	r3, r3
   181fa:	2b10      	cmp	r3, #16
   181fc:	d00e      	beq.n	1821c <z_arm_mpu_init+0x12c>
   181fe:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
   18202:	4a0a      	ldr	r2, [pc, #40]	; (1822c <z_arm_mpu_init+0x13c>)
   18204:	4912      	ldr	r1, [pc, #72]	; (18250 <z_arm_mpu_init+0x160>)
   18206:	480b      	ldr	r0, [pc, #44]	; (18234 <z_arm_mpu_init+0x144>)
   18208:	f008 ff2e 	bl	21068 <printk>
   1820c:	4811      	ldr	r0, [pc, #68]	; (18254 <z_arm_mpu_init+0x164>)
   1820e:	f008 ff2b 	bl	21068 <printk>
   18212:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   18216:	4805      	ldr	r0, [pc, #20]	; (1822c <z_arm_mpu_init+0x13c>)
   18218:	f009 ffd3 	bl	221c2 <assert_post_action>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   1821c:	2300      	movs	r3, #0
}
   1821e:	4618      	mov	r0, r3
   18220:	3714      	adds	r7, #20
   18222:	46bd      	mov	sp, r7
   18224:	bd90      	pop	{r4, r7, pc}
   18226:	bf00      	nop
   18228:	0002cbfc 	.word	0x0002cbfc
   1822c:	0002abb4 	.word	0x0002abb4
   18230:	0002abec 	.word	0x0002abec
   18234:	0002abf0 	.word	0x0002abf0
   18238:	0002ac9c 	.word	0x0002ac9c
   1823c:	2001452c 	.word	0x2001452c
   18240:	0002cbcc 	.word	0x0002cbcc
   18244:	0002acd0 	.word	0x0002acd0
   18248:	200151d9 	.word	0x200151d9
   1824c:	e000ed90 	.word	0xe000ed90
   18250:	0002acec 	.word	0x0002acec
   18254:	0002ad40 	.word	0x0002ad40

00018258 <__stdout_hook_install>:
}

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
   18258:	b480      	push	{r7}
   1825a:	b083      	sub	sp, #12
   1825c:	af00      	add	r7, sp, #0
   1825e:	6078      	str	r0, [r7, #4]
	_stdout_hook = hook;
   18260:	4a03      	ldr	r2, [pc, #12]	; (18270 <__stdout_hook_install+0x18>)
   18262:	687b      	ldr	r3, [r7, #4]
   18264:	6013      	str	r3, [r2, #0]
}
   18266:	bf00      	nop
   18268:	370c      	adds	r7, #12
   1826a:	46bd      	mov	sp, r7
   1826c:	bc80      	pop	{r7}
   1826e:	4770      	bx	lr
   18270:	20014530 	.word	0x20014530

00018274 <nrf_gpio_pin_port_decode>:
 *                      that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   18274:	b580      	push	{r7, lr}
   18276:	b082      	sub	sp, #8
   18278:	af00      	add	r7, sp, #0
   1827a:	6078      	str	r0, [r7, #4]
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1827c:	687b      	ldr	r3, [r7, #4]
   1827e:	681b      	ldr	r3, [r3, #0]
   18280:	4618      	mov	r0, r3
   18282:	f00c fc9b 	bl	24bbc <nrf_gpio_pin_present_check>
   18286:	4603      	mov	r3, r0
   18288:	f083 0301 	eor.w	r3, r3, #1
   1828c:	b2db      	uxtb	r3, r3
   1828e:	2b00      	cmp	r3, #0
   18290:	d00b      	beq.n	182aa <nrf_gpio_pin_port_decode+0x36>
   18292:	f44f 7305 	mov.w	r3, #532	; 0x214
   18296:	4a10      	ldr	r2, [pc, #64]	; (182d8 <nrf_gpio_pin_port_decode+0x64>)
   18298:	4910      	ldr	r1, [pc, #64]	; (182dc <nrf_gpio_pin_port_decode+0x68>)
   1829a:	4811      	ldr	r0, [pc, #68]	; (182e0 <nrf_gpio_pin_port_decode+0x6c>)
   1829c:	f008 fee4 	bl	21068 <printk>
   182a0:	f44f 7105 	mov.w	r1, #532	; 0x214
   182a4:	480c      	ldr	r0, [pc, #48]	; (182d8 <nrf_gpio_pin_port_decode+0x64>)
   182a6:	f009 ff8c 	bl	221c2 <assert_post_action>

    switch (nrf_gpio_pin_port_number_extract(p_pin))
   182aa:	6878      	ldr	r0, [r7, #4]
   182ac:	f00c fcaa 	bl	24c04 <nrf_gpio_pin_port_number_extract>
   182b0:	4603      	mov	r3, r0
   182b2:	2b00      	cmp	r3, #0
   182b4:	d00b      	beq.n	182ce <nrf_gpio_pin_port_decode+0x5a>
    {
        default:
            NRFX_ASSERT(0);
   182b6:	f240 2319 	movw	r3, #537	; 0x219
   182ba:	4a07      	ldr	r2, [pc, #28]	; (182d8 <nrf_gpio_pin_port_decode+0x64>)
   182bc:	4909      	ldr	r1, [pc, #36]	; (182e4 <nrf_gpio_pin_port_decode+0x70>)
   182be:	4808      	ldr	r0, [pc, #32]	; (182e0 <nrf_gpio_pin_port_decode+0x6c>)
   182c0:	f008 fed2 	bl	21068 <printk>
   182c4:	f240 2119 	movw	r1, #537	; 0x219
   182c8:	4803      	ldr	r0, [pc, #12]	; (182d8 <nrf_gpio_pin_port_decode+0x64>)
   182ca:	f009 ff7a 	bl	221c2 <assert_post_action>
#if defined(P0_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 0: return NRF_P0;
   182ce:	4b06      	ldr	r3, [pc, #24]	; (182e8 <nrf_gpio_pin_port_decode+0x74>)
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
#endif
    }
}
   182d0:	4618      	mov	r0, r3
   182d2:	3708      	adds	r7, #8
   182d4:	46bd      	mov	sp, r7
   182d6:	bd80      	pop	{r7, pc}
   182d8:	0002ad74 	.word	0x0002ad74
   182dc:	0002ada8 	.word	0x0002ada8
   182e0:	0002adcc 	.word	0x0002adcc
   182e4:	0002adec 	.word	0x0002adec
   182e8:	40842500 	.word	0x40842500

000182ec <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
   182ec:	b580      	push	{r7, lr}
   182ee:	b084      	sub	sp, #16
   182f0:	af00      	add	r7, sp, #0
   182f2:	60f8      	str	r0, [r7, #12]
   182f4:	60b9      	str	r1, [r7, #8]
   182f6:	4613      	mov	r3, r2
   182f8:	71fb      	strb	r3, [r7, #7]
	__ASSERT(callback, "No callback!");
   182fa:	68bb      	ldr	r3, [r7, #8]
   182fc:	2b00      	cmp	r3, #0
   182fe:	d10c      	bne.n	1831a <gpio_manage_callback+0x2e>
   18300:	2324      	movs	r3, #36	; 0x24
   18302:	4a23      	ldr	r2, [pc, #140]	; (18390 <gpio_manage_callback+0xa4>)
   18304:	4923      	ldr	r1, [pc, #140]	; (18394 <gpio_manage_callback+0xa8>)
   18306:	4824      	ldr	r0, [pc, #144]	; (18398 <gpio_manage_callback+0xac>)
   18308:	f008 feae 	bl	21068 <printk>
   1830c:	4823      	ldr	r0, [pc, #140]	; (1839c <gpio_manage_callback+0xb0>)
   1830e:	f008 feab 	bl	21068 <printk>
   18312:	2124      	movs	r1, #36	; 0x24
   18314:	481e      	ldr	r0, [pc, #120]	; (18390 <gpio_manage_callback+0xa4>)
   18316:	f009 ff54 	bl	221c2 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   1831a:	68bb      	ldr	r3, [r7, #8]
   1831c:	685b      	ldr	r3, [r3, #4]
   1831e:	2b00      	cmp	r3, #0
   18320:	d10c      	bne.n	1833c <gpio_manage_callback+0x50>
   18322:	2325      	movs	r3, #37	; 0x25
   18324:	4a1a      	ldr	r2, [pc, #104]	; (18390 <gpio_manage_callback+0xa4>)
   18326:	491e      	ldr	r1, [pc, #120]	; (183a0 <gpio_manage_callback+0xb4>)
   18328:	481b      	ldr	r0, [pc, #108]	; (18398 <gpio_manage_callback+0xac>)
   1832a:	f008 fe9d 	bl	21068 <printk>
   1832e:	481d      	ldr	r0, [pc, #116]	; (183a4 <gpio_manage_callback+0xb8>)
   18330:	f008 fe9a 	bl	21068 <printk>
   18334:	2125      	movs	r1, #37	; 0x25
   18336:	4816      	ldr	r0, [pc, #88]	; (18390 <gpio_manage_callback+0xa4>)
   18338:	f009 ff43 	bl	221c2 <assert_post_action>

	if (!sys_slist_is_empty(callbacks)) {
   1833c:	68f8      	ldr	r0, [r7, #12]
   1833e:	f00c fac8 	bl	248d2 <sys_slist_is_empty>
   18342:	4603      	mov	r3, r0
   18344:	f083 0301 	eor.w	r3, r3, #1
   18348:	b2db      	uxtb	r3, r3
   1834a:	2b00      	cmp	r3, #0
   1834c:	d013      	beq.n	18376 <gpio_manage_callback+0x8a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   1834e:	68bb      	ldr	r3, [r7, #8]
   18350:	4619      	mov	r1, r3
   18352:	68f8      	ldr	r0, [r7, #12]
   18354:	f00c fb4a 	bl	249ec <sys_slist_find_and_remove>
   18358:	4603      	mov	r3, r0
   1835a:	f083 0301 	eor.w	r3, r3, #1
   1835e:	b2db      	uxtb	r3, r3
   18360:	2b00      	cmp	r3, #0
   18362:	d008      	beq.n	18376 <gpio_manage_callback+0x8a>
			if (!set) {
   18364:	79fb      	ldrb	r3, [r7, #7]
   18366:	f083 0301 	eor.w	r3, r3, #1
   1836a:	b2db      	uxtb	r3, r3
   1836c:	2b00      	cmp	r3, #0
   1836e:	d002      	beq.n	18376 <gpio_manage_callback+0x8a>
				return -EINVAL;
   18370:	f06f 0315 	mvn.w	r3, #21
   18374:	e008      	b.n	18388 <gpio_manage_callback+0x9c>
			}
		}
	}

	if (set) {
   18376:	79fb      	ldrb	r3, [r7, #7]
   18378:	2b00      	cmp	r3, #0
   1837a:	d004      	beq.n	18386 <gpio_manage_callback+0x9a>
		sys_slist_prepend(callbacks, &callback->node);
   1837c:	68bb      	ldr	r3, [r7, #8]
   1837e:	4619      	mov	r1, r3
   18380:	68f8      	ldr	r0, [r7, #12]
   18382:	f00c fad4 	bl	2492e <sys_slist_prepend>
	}

	return 0;
   18386:	2300      	movs	r3, #0
}
   18388:	4618      	mov	r0, r3
   1838a:	3710      	adds	r7, #16
   1838c:	46bd      	mov	sp, r7
   1838e:	bd80      	pop	{r7, pc}
   18390:	0002adf0 	.word	0x0002adf0
   18394:	0002ae20 	.word	0x0002ae20
   18398:	0002adcc 	.word	0x0002adcc
   1839c:	0002ae2c 	.word	0x0002ae2c
   183a0:	0002ae3c 	.word	0x0002ae3c
   183a4:	0002ae50 	.word	0x0002ae50

000183a8 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   183a8:	b580      	push	{r7, lr}
   183aa:	b086      	sub	sp, #24
   183ac:	af00      	add	r7, sp, #0
   183ae:	60f8      	str	r0, [r7, #12]
   183b0:	60b9      	str	r1, [r7, #8]
   183b2:	607a      	str	r2, [r7, #4]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   183b4:	68f8      	ldr	r0, [r7, #12]
   183b6:	f00c fa76 	bl	248a6 <sys_slist_peek_head>
   183ba:	4603      	mov	r3, r0
   183bc:	2b00      	cmp	r3, #0
   183be:	d004      	beq.n	183ca <gpio_fire_callbacks+0x22>
   183c0:	68f8      	ldr	r0, [r7, #12]
   183c2:	f00c fa70 	bl	248a6 <sys_slist_peek_head>
   183c6:	4603      	mov	r3, r0
   183c8:	e000      	b.n	183cc <gpio_fire_callbacks+0x24>
   183ca:	2300      	movs	r3, #0
   183cc:	617b      	str	r3, [r7, #20]
   183ce:	697b      	ldr	r3, [r7, #20]
   183d0:	2b00      	cmp	r3, #0
   183d2:	d00e      	beq.n	183f2 <gpio_fire_callbacks+0x4a>
   183d4:	697b      	ldr	r3, [r7, #20]
   183d6:	4618      	mov	r0, r3
   183d8:	f00c fa98 	bl	2490c <sys_slist_peek_next>
   183dc:	4603      	mov	r3, r0
   183de:	2b00      	cmp	r3, #0
   183e0:	d005      	beq.n	183ee <gpio_fire_callbacks+0x46>
   183e2:	697b      	ldr	r3, [r7, #20]
   183e4:	4618      	mov	r0, r3
   183e6:	f00c fa91 	bl	2490c <sys_slist_peek_next>
   183ea:	4603      	mov	r3, r0
   183ec:	e002      	b.n	183f4 <gpio_fire_callbacks+0x4c>
   183ee:	2300      	movs	r3, #0
   183f0:	e000      	b.n	183f4 <gpio_fire_callbacks+0x4c>
   183f2:	2300      	movs	r3, #0
   183f4:	613b      	str	r3, [r7, #16]
   183f6:	e035      	b.n	18464 <gpio_fire_callbacks+0xbc>
		if (cb->pin_mask & pins) {
   183f8:	697b      	ldr	r3, [r7, #20]
   183fa:	689a      	ldr	r2, [r3, #8]
   183fc:	687b      	ldr	r3, [r7, #4]
   183fe:	4013      	ands	r3, r2
   18400:	2b00      	cmp	r3, #0
   18402:	d019      	beq.n	18438 <gpio_fire_callbacks+0x90>
			__ASSERT(cb->handler, "No callback handler!");
   18404:	697b      	ldr	r3, [r7, #20]
   18406:	685b      	ldr	r3, [r3, #4]
   18408:	2b00      	cmp	r3, #0
   1840a:	d10c      	bne.n	18426 <gpio_fire_callbacks+0x7e>
   1840c:	2345      	movs	r3, #69	; 0x45
   1840e:	4a19      	ldr	r2, [pc, #100]	; (18474 <gpio_fire_callbacks+0xcc>)
   18410:	4919      	ldr	r1, [pc, #100]	; (18478 <gpio_fire_callbacks+0xd0>)
   18412:	481a      	ldr	r0, [pc, #104]	; (1847c <gpio_fire_callbacks+0xd4>)
   18414:	f008 fe28 	bl	21068 <printk>
   18418:	4819      	ldr	r0, [pc, #100]	; (18480 <gpio_fire_callbacks+0xd8>)
   1841a:	f008 fe25 	bl	21068 <printk>
   1841e:	2145      	movs	r1, #69	; 0x45
   18420:	4814      	ldr	r0, [pc, #80]	; (18474 <gpio_fire_callbacks+0xcc>)
   18422:	f009 fece 	bl	221c2 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   18426:	697b      	ldr	r3, [r7, #20]
   18428:	685b      	ldr	r3, [r3, #4]
   1842a:	697a      	ldr	r2, [r7, #20]
   1842c:	6891      	ldr	r1, [r2, #8]
   1842e:	687a      	ldr	r2, [r7, #4]
   18430:	400a      	ands	r2, r1
   18432:	6979      	ldr	r1, [r7, #20]
   18434:	68b8      	ldr	r0, [r7, #8]
   18436:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   18438:	693b      	ldr	r3, [r7, #16]
   1843a:	617b      	str	r3, [r7, #20]
   1843c:	697b      	ldr	r3, [r7, #20]
   1843e:	2b00      	cmp	r3, #0
   18440:	d00e      	beq.n	18460 <gpio_fire_callbacks+0xb8>
   18442:	697b      	ldr	r3, [r7, #20]
   18444:	4618      	mov	r0, r3
   18446:	f00c fa61 	bl	2490c <sys_slist_peek_next>
   1844a:	4603      	mov	r3, r0
   1844c:	2b00      	cmp	r3, #0
   1844e:	d005      	beq.n	1845c <gpio_fire_callbacks+0xb4>
   18450:	697b      	ldr	r3, [r7, #20]
   18452:	4618      	mov	r0, r3
   18454:	f00c fa5a 	bl	2490c <sys_slist_peek_next>
   18458:	4603      	mov	r3, r0
   1845a:	e002      	b.n	18462 <gpio_fire_callbacks+0xba>
   1845c:	2300      	movs	r3, #0
   1845e:	e000      	b.n	18462 <gpio_fire_callbacks+0xba>
   18460:	2300      	movs	r3, #0
   18462:	613b      	str	r3, [r7, #16]
   18464:	697b      	ldr	r3, [r7, #20]
   18466:	2b00      	cmp	r3, #0
   18468:	d1c6      	bne.n	183f8 <gpio_fire_callbacks+0x50>
		}
	}
}
   1846a:	bf00      	nop
   1846c:	bf00      	nop
   1846e:	3718      	adds	r7, #24
   18470:	46bd      	mov	sp, r7
   18472:	bd80      	pop	{r7, pc}
   18474:	0002adf0 	.word	0x0002adf0
   18478:	0002ae68 	.word	0x0002ae68
   1847c:	0002adcc 	.word	0x0002adcc
   18480:	0002ae50 	.word	0x0002ae50

00018484 <gpiote_channel_alloc>:
	return port->config;
}

static int gpiote_channel_alloc(uint32_t abs_pin,
				nrf_gpiote_polarity_t polarity)
{
   18484:	b580      	push	{r7, lr}
   18486:	b084      	sub	sp, #16
   18488:	af00      	add	r7, sp, #0
   1848a:	6078      	str	r0, [r7, #4]
   1848c:	460b      	mov	r3, r1
   1848e:	70fb      	strb	r3, [r7, #3]
	uint8_t channel;

	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   18490:	f107 030d 	add.w	r3, r7, #13
   18494:	4618      	mov	r0, r3
   18496:	f002 f80d 	bl	1a4b4 <nrfx_gpiote_channel_alloc>
   1849a:	4603      	mov	r3, r0
   1849c:	4a14      	ldr	r2, [pc, #80]	; (184f0 <gpiote_channel_alloc+0x6c>)
   1849e:	4293      	cmp	r3, r2
   184a0:	d002      	beq.n	184a8 <gpiote_channel_alloc+0x24>
		return -ENODEV;
   184a2:	f06f 0312 	mvn.w	r3, #18
   184a6:	e01e      	b.n	184e6 <gpiote_channel_alloc+0x62>
	}

	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   184a8:	7b7b      	ldrb	r3, [r7, #13]
   184aa:	3340      	adds	r3, #64	; 0x40
   184ac:	b29b      	uxth	r3, r3
   184ae:	009b      	lsls	r3, r3, #2
   184b0:	81fb      	strh	r3, [r7, #14]

	nrf_gpiote_event_configure(NRF_GPIOTE, channel, abs_pin, polarity);
   184b2:	7b7b      	ldrb	r3, [r7, #13]
   184b4:	4619      	mov	r1, r3
   184b6:	78fb      	ldrb	r3, [r7, #3]
   184b8:	687a      	ldr	r2, [r7, #4]
   184ba:	480e      	ldr	r0, [pc, #56]	; (184f4 <gpiote_channel_alloc+0x70>)
   184bc:	f00c fc4e 	bl	24d5c <nrf_gpiote_event_configure>
	nrf_gpiote_event_clear(NRF_GPIOTE, evt);
   184c0:	89fb      	ldrh	r3, [r7, #14]
   184c2:	4619      	mov	r1, r3
   184c4:	480b      	ldr	r0, [pc, #44]	; (184f4 <gpiote_channel_alloc+0x70>)
   184c6:	f00c fbc4 	bl	24c52 <nrf_gpiote_event_clear>
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   184ca:	7b7b      	ldrb	r3, [r7, #13]
   184cc:	4619      	mov	r1, r3
   184ce:	4809      	ldr	r0, [pc, #36]	; (184f4 <gpiote_channel_alloc+0x70>)
   184d0:	f00c fc14 	bl	24cfc <nrf_gpiote_event_enable>
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   184d4:	7b7b      	ldrb	r3, [r7, #13]
   184d6:	461a      	mov	r2, r3
   184d8:	2301      	movs	r3, #1
   184da:	4093      	lsls	r3, r2
   184dc:	4619      	mov	r1, r3
   184de:	4805      	ldr	r0, [pc, #20]	; (184f4 <gpiote_channel_alloc+0x70>)
   184e0:	f00c fbe1 	bl	24ca6 <nrf_gpiote_int_enable>

	return 0;
   184e4:	2300      	movs	r3, #0
}
   184e6:	4618      	mov	r0, r3
   184e8:	3710      	adds	r7, #16
   184ea:	46bd      	mov	sp, r7
   184ec:	bd80      	pop	{r7, pc}
   184ee:	bf00      	nop
   184f0:	0bad0000 	.word	0x0bad0000
   184f4:	40031000 	.word	0x40031000

000184f8 <gpiote_pin_cleanup>:

/* Function checks if given pin does not have already enabled GPIOTE event and
 * disables it.
 */
static void gpiote_pin_cleanup(uint32_t abs_pin)
{
   184f8:	b580      	push	{r7, lr}
   184fa:	b084      	sub	sp, #16
   184fc:	af00      	add	r7, sp, #0
   184fe:	6078      	str	r0, [r7, #4]
	uint32_t intenset = nrf_gpiote_int_enable_check(NRF_GPIOTE,
   18500:	21ff      	movs	r1, #255	; 0xff
   18502:	4819      	ldr	r0, [pc, #100]	; (18568 <gpiote_pin_cleanup+0x70>)
   18504:	f00c fbeb 	bl	24cde <nrf_gpiote_int_enable_check>
   18508:	60b8      	str	r0, [r7, #8]
						     NRF_GPIOTE_INT_IN_MASK);

	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1850a:	2300      	movs	r3, #0
   1850c:	60fb      	str	r3, [r7, #12]
   1850e:	e024      	b.n	1855a <gpiote_pin_cleanup+0x62>
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   18510:	68f9      	ldr	r1, [r7, #12]
   18512:	4815      	ldr	r0, [pc, #84]	; (18568 <gpiote_pin_cleanup+0x70>)
   18514:	f00c fc55 	bl	24dc2 <nrf_gpiote_event_pin_get>
   18518:	4602      	mov	r2, r0
   1851a:	687b      	ldr	r3, [r7, #4]
   1851c:	4293      	cmp	r3, r2
   1851e:	d119      	bne.n	18554 <gpiote_pin_cleanup+0x5c>
		    && (intenset & BIT(i))) {
   18520:	68ba      	ldr	r2, [r7, #8]
   18522:	68fb      	ldr	r3, [r7, #12]
   18524:	fa22 f303 	lsr.w	r3, r2, r3
   18528:	f003 0301 	and.w	r3, r3, #1
   1852c:	2b00      	cmp	r3, #0
   1852e:	d011      	beq.n	18554 <gpiote_pin_cleanup+0x5c>
			nrf_gpiote_event_disable(NRF_GPIOTE, i);
   18530:	68f9      	ldr	r1, [r7, #12]
   18532:	480d      	ldr	r0, [pc, #52]	; (18568 <gpiote_pin_cleanup+0x70>)
   18534:	f00c fbfa 	bl	24d2c <nrf_gpiote_event_disable>
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   18538:	2201      	movs	r2, #1
   1853a:	68fb      	ldr	r3, [r7, #12]
   1853c:	fa02 f303 	lsl.w	r3, r2, r3
   18540:	4619      	mov	r1, r3
   18542:	4809      	ldr	r0, [pc, #36]	; (18568 <gpiote_pin_cleanup+0x70>)
   18544:	f00c fbbd 	bl	24cc2 <nrf_gpiote_int_disable>
			nrfx_gpiote_channel_free(i);
   18548:	68fb      	ldr	r3, [r7, #12]
   1854a:	b2db      	uxtb	r3, r3
   1854c:	4618      	mov	r0, r3
   1854e:	f001 ff35 	bl	1a3bc <nrfx_gpiote_channel_free>
			return;
   18552:	e005      	b.n	18560 <gpiote_pin_cleanup+0x68>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   18554:	68fb      	ldr	r3, [r7, #12]
   18556:	3301      	adds	r3, #1
   18558:	60fb      	str	r3, [r7, #12]
   1855a:	68fb      	ldr	r3, [r7, #12]
   1855c:	2b07      	cmp	r3, #7
   1855e:	d9d7      	bls.n	18510 <gpiote_pin_cleanup+0x18>
		}
	}
}
   18560:	3710      	adds	r7, #16
   18562:	46bd      	mov	sp, r7
   18564:	bd80      	pop	{r7, pc}
   18566:	bf00      	nop
   18568:	40031000 	.word	0x40031000

0001856c <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
   1856c:	b590      	push	{r4, r7, lr}
   1856e:	b08b      	sub	sp, #44	; 0x2c
   18570:	af02      	add	r7, sp, #8
   18572:	60f8      	str	r0, [r7, #12]
   18574:	460b      	mov	r3, r1
   18576:	607a      	str	r2, [r7, #4]
   18578:	72fb      	strb	r3, [r7, #11]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1857a:	68f8      	ldr	r0, [r7, #12]
   1857c:	f00c fc3f 	bl	24dfe <get_port_cfg>
   18580:	4603      	mov	r3, r0
   18582:	685b      	ldr	r3, [r3, #4]
   18584:	61bb      	str	r3, [r7, #24]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   18586:	687a      	ldr	r2, [r7, #4]
   18588:	4b4f      	ldr	r3, [pc, #316]	; (186c8 <gpio_nrfx_config+0x15c>)
   1858a:	4013      	ands	r3, r2
   1858c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   18590:	d02f      	beq.n	185f2 <gpio_nrfx_config+0x86>
   18592:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   18596:	d838      	bhi.n	1860a <gpio_nrfx_config+0x9e>
   18598:	4a4c      	ldr	r2, [pc, #304]	; (186cc <gpio_nrfx_config+0x160>)
   1859a:	4293      	cmp	r3, r2
   1859c:	d032      	beq.n	18604 <gpio_nrfx_config+0x98>
   1859e:	4a4b      	ldr	r2, [pc, #300]	; (186cc <gpio_nrfx_config+0x160>)
   185a0:	4293      	cmp	r3, r2
   185a2:	d832      	bhi.n	1860a <gpio_nrfx_config+0x9e>
   185a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   185a8:	d01a      	beq.n	185e0 <gpio_nrfx_config+0x74>
   185aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   185ae:	d82c      	bhi.n	1860a <gpio_nrfx_config+0x9e>
   185b0:	4a47      	ldr	r2, [pc, #284]	; (186d0 <gpio_nrfx_config+0x164>)
   185b2:	4293      	cmp	r3, r2
   185b4:	d020      	beq.n	185f8 <gpio_nrfx_config+0x8c>
   185b6:	4a46      	ldr	r2, [pc, #280]	; (186d0 <gpio_nrfx_config+0x164>)
   185b8:	4293      	cmp	r3, r2
   185ba:	d826      	bhi.n	1860a <gpio_nrfx_config+0x9e>
   185bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   185c0:	d014      	beq.n	185ec <gpio_nrfx_config+0x80>
   185c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   185c6:	d820      	bhi.n	1860a <gpio_nrfx_config+0x9e>
   185c8:	2b06      	cmp	r3, #6
   185ca:	d00c      	beq.n	185e6 <gpio_nrfx_config+0x7a>
   185cc:	2b06      	cmp	r3, #6
   185ce:	d81c      	bhi.n	1860a <gpio_nrfx_config+0x9e>
   185d0:	2b00      	cmp	r3, #0
   185d2:	d002      	beq.n	185da <gpio_nrfx_config+0x6e>
   185d4:	2b02      	cmp	r3, #2
   185d6:	d012      	beq.n	185fe <gpio_nrfx_config+0x92>
   185d8:	e017      	b.n	1860a <gpio_nrfx_config+0x9e>
			 GPIO_OPEN_DRAIN)) {
	case GPIO_DS_DFLT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_S0S1;
   185da:	2300      	movs	r3, #0
   185dc:	77bb      	strb	r3, [r7, #30]
		break;
   185de:	e017      	b.n	18610 <gpio_nrfx_config+0xa4>
	case GPIO_DS_DFLT_LOW | GPIO_DS_ALT_HIGH:
		drive = NRF_GPIO_PIN_S0H1;
   185e0:	2302      	movs	r3, #2
   185e2:	77bb      	strb	r3, [r7, #30]
		break;
   185e4:	e014      	b.n	18610 <gpio_nrfx_config+0xa4>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
   185e6:	2306      	movs	r3, #6
   185e8:	77bb      	strb	r3, [r7, #30]
		break;
   185ea:	e011      	b.n	18610 <gpio_nrfx_config+0xa4>

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
   185ec:	2301      	movs	r3, #1
   185ee:	77bb      	strb	r3, [r7, #30]
		break;
   185f0:	e00e      	b.n	18610 <gpio_nrfx_config+0xa4>
	case GPIO_DS_ALT_LOW | GPIO_DS_ALT_HIGH:
		drive = NRF_GPIO_PIN_H0H1;
   185f2:	2303      	movs	r3, #3
   185f4:	77bb      	strb	r3, [r7, #30]
		break;
   185f6:	e00b      	b.n	18610 <gpio_nrfx_config+0xa4>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
   185f8:	2307      	movs	r3, #7
   185fa:	77bb      	strb	r3, [r7, #30]
		break;
   185fc:	e008      	b.n	18610 <gpio_nrfx_config+0xa4>

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
   185fe:	2304      	movs	r3, #4
   18600:	77bb      	strb	r3, [r7, #30]
		break;
   18602:	e005      	b.n	18610 <gpio_nrfx_config+0xa4>
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0H1;
   18604:	2305      	movs	r3, #5
   18606:	77bb      	strb	r3, [r7, #30]
		break;
   18608:	e002      	b.n	18610 <gpio_nrfx_config+0xa4>

	default:
		return -EINVAL;
   1860a:	f06f 0315 	mvn.w	r3, #21
   1860e:	e057      	b.n	186c0 <gpio_nrfx_config+0x154>
	}

	if ((flags & GPIO_PULL_UP) != 0) {
   18610:	687b      	ldr	r3, [r7, #4]
   18612:	f003 0310 	and.w	r3, r3, #16
   18616:	2b00      	cmp	r3, #0
   18618:	d002      	beq.n	18620 <gpio_nrfx_config+0xb4>
		pull = NRF_GPIO_PIN_PULLUP;
   1861a:	2303      	movs	r3, #3
   1861c:	77fb      	strb	r3, [r7, #31]
   1861e:	e009      	b.n	18634 <gpio_nrfx_config+0xc8>
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
   18620:	687b      	ldr	r3, [r7, #4]
   18622:	f003 0320 	and.w	r3, r3, #32
   18626:	2b00      	cmp	r3, #0
   18628:	d002      	beq.n	18630 <gpio_nrfx_config+0xc4>
		pull = NRF_GPIO_PIN_PULLDOWN;
   1862a:	2301      	movs	r3, #1
   1862c:	77fb      	strb	r3, [r7, #31]
   1862e:	e001      	b.n	18634 <gpio_nrfx_config+0xc8>
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
   18630:	2300      	movs	r3, #0
   18632:	77fb      	strb	r3, [r7, #31]
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;
   18634:	687b      	ldr	r3, [r7, #4]
   18636:	0a5b      	lsrs	r3, r3, #9
   18638:	b2db      	uxtb	r3, r3
	dir = ((flags & GPIO_OUTPUT) != 0)
   1863a:	f003 0301 	and.w	r3, r3, #1
   1863e:	75fb      	strb	r3, [r7, #23]

	input = ((flags & GPIO_INPUT) != 0)
   18640:	687b      	ldr	r3, [r7, #4]
   18642:	f403 7380 	and.w	r3, r3, #256	; 0x100
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   18646:	2b00      	cmp	r3, #0
   18648:	bf0c      	ite	eq
   1864a:	2301      	moveq	r3, #1
   1864c:	2300      	movne	r3, #0
   1864e:	b2db      	uxtb	r3, r3
	input = ((flags & GPIO_INPUT) != 0)
   18650:	75bb      	strb	r3, [r7, #22]

	if ((flags & GPIO_OUTPUT) != 0) {
   18652:	687b      	ldr	r3, [r7, #4]
   18654:	f403 7300 	and.w	r3, r3, #512	; 0x200
   18658:	2b00      	cmp	r3, #0
   1865a:	d01a      	beq.n	18692 <gpio_nrfx_config+0x126>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1865c:	687b      	ldr	r3, [r7, #4]
   1865e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   18662:	2b00      	cmp	r3, #0
   18664:	d008      	beq.n	18678 <gpio_nrfx_config+0x10c>
			nrf_gpio_port_out_set(reg, BIT(pin));
   18666:	7afb      	ldrb	r3, [r7, #11]
   18668:	2201      	movs	r2, #1
   1866a:	fa02 f303 	lsl.w	r3, r2, r3
   1866e:	4619      	mov	r1, r3
   18670:	69b8      	ldr	r0, [r7, #24]
   18672:	f00c fa89 	bl	24b88 <nrf_gpio_port_out_set>
   18676:	e00c      	b.n	18692 <gpio_nrfx_config+0x126>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   18678:	687b      	ldr	r3, [r7, #4]
   1867a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   1867e:	2b00      	cmp	r3, #0
   18680:	d007      	beq.n	18692 <gpio_nrfx_config+0x126>
			nrf_gpio_port_out_clear(reg, BIT(pin));
   18682:	7afb      	ldrb	r3, [r7, #11]
   18684:	2201      	movs	r2, #1
   18686:	fa02 f303 	lsl.w	r3, r2, r3
   1868a:	4619      	mov	r1, r3
   1868c:	69b8      	ldr	r0, [r7, #24]
   1868e:	f00c fa88 	bl	24ba2 <nrf_gpio_port_out_clear>
		}
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   18692:	68f8      	ldr	r0, [r7, #12]
   18694:	f00c fbb3 	bl	24dfe <get_port_cfg>
   18698:	4603      	mov	r3, r0
   1869a:	7a1b      	ldrb	r3, [r3, #8]
   1869c:	015a      	lsls	r2, r3, #5
   1869e:	7afb      	ldrb	r3, [r7, #11]
   186a0:	f003 031f 	and.w	r3, r3, #31
   186a4:	4313      	orrs	r3, r2
   186a6:	461c      	mov	r4, r3
   186a8:	7ff8      	ldrb	r0, [r7, #31]
   186aa:	7dba      	ldrb	r2, [r7, #22]
   186ac:	7df9      	ldrb	r1, [r7, #23]
   186ae:	2300      	movs	r3, #0
   186b0:	9301      	str	r3, [sp, #4]
   186b2:	7fbb      	ldrb	r3, [r7, #30]
   186b4:	9300      	str	r3, [sp, #0]
   186b6:	4603      	mov	r3, r0
   186b8:	4620      	mov	r0, r4
   186ba:	f00c f9c7 	bl	24a4c <nrf_gpio_cfg>
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
   186be:	2300      	movs	r3, #0
}
   186c0:	4618      	mov	r0, r3
   186c2:	3724      	adds	r7, #36	; 0x24
   186c4:	46bd      	mov	sp, r7
   186c6:	bd90      	pop	{r4, r7, pc}
   186c8:	00f00006 	.word	0x00f00006
   186cc:	00400002 	.word	0x00400002
   186d0:	00100006 	.word	0x00100006

000186d4 <gpiote_event_handler>:

	gpio_fire_callbacks(list, port, pins);
}

static void gpiote_event_handler(void)
{
   186d4:	b580      	push	{r7, lr}
   186d6:	b086      	sub	sp, #24
   186d8:	af00      	add	r7, sp, #0
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   186da:	2300      	movs	r3, #0
   186dc:	60bb      	str	r3, [r7, #8]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   186de:	2300      	movs	r3, #0
   186e0:	607b      	str	r3, [r7, #4]
	bool port_event = nrf_gpiote_event_check(NRF_GPIOTE,
   186e2:	f44f 71be 	mov.w	r1, #380	; 0x17c
   186e6:	4833      	ldr	r0, [pc, #204]	; (187b4 <gpiote_event_handler+0xe0>)
   186e8:	f00c fa9f 	bl	24c2a <nrf_gpiote_event_check>
   186ec:	4603      	mov	r3, r0
   186ee:	74fb      	strb	r3, [r7, #19]
						 NRF_GPIOTE_EVENT_PORT);

	if (port_event) {
   186f0:	7cfb      	ldrb	r3, [r7, #19]
   186f2:	2b00      	cmp	r3, #0
   186f4:	d00b      	beq.n	1870e <gpiote_event_handler+0x3a>
#ifdef CONFIG_GPIO_NRF_P0
		fired_triggers[0] =
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   186f6:	1d3b      	adds	r3, r7, #4
   186f8:	4619      	mov	r1, r3
   186fa:	482f      	ldr	r0, [pc, #188]	; (187b8 <gpiote_event_handler+0xe4>)
   186fc:	f00c fd76 	bl	251ec <check_level_trigger_pins>
   18700:	4603      	mov	r3, r0
		fired_triggers[0] =
   18702:	60bb      	str	r3, [r7, #8]
#endif

		/* Sense detect was disabled while checking pins so
		 * DETECT should be deasserted.
		 */
		nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
   18704:	f44f 71be 	mov.w	r1, #380	; 0x17c
   18708:	482a      	ldr	r0, [pc, #168]	; (187b4 <gpiote_event_handler+0xe0>)
   1870a:	f00c faa2 	bl	24c52 <nrf_gpiote_event_clear>
	}

	/* Handle interrupt from GPIOTE channels. */
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1870e:	2300      	movs	r3, #0
   18710:	617b      	str	r3, [r7, #20]
   18712:	e039      	b.n	18788 <gpiote_event_handler+0xb4>
		nrf_gpiote_event_t evt =
   18714:	697b      	ldr	r3, [r7, #20]
   18716:	3340      	adds	r3, #64	; 0x40
   18718:	b29b      	uxth	r3, r3
   1871a:	009b      	lsls	r3, r3, #2
   1871c:	823b      	strh	r3, [r7, #16]
			offsetof(NRF_GPIOTE_Type, EVENTS_IN[i]);

		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1871e:	2201      	movs	r2, #1
   18720:	697b      	ldr	r3, [r7, #20]
   18722:	fa02 f303 	lsl.w	r3, r2, r3
   18726:	4619      	mov	r1, r3
   18728:	4822      	ldr	r0, [pc, #136]	; (187b4 <gpiote_event_handler+0xe0>)
   1872a:	f00c fad8 	bl	24cde <nrf_gpiote_int_enable_check>
   1872e:	4603      	mov	r3, r0
   18730:	2b00      	cmp	r3, #0
   18732:	d026      	beq.n	18782 <gpiote_event_handler+0xae>
		    nrf_gpiote_event_check(NRF_GPIOTE, evt)) {
   18734:	8a3b      	ldrh	r3, [r7, #16]
   18736:	4619      	mov	r1, r3
   18738:	481e      	ldr	r0, [pc, #120]	; (187b4 <gpiote_event_handler+0xe0>)
   1873a:	f00c fa76 	bl	24c2a <nrf_gpiote_event_check>
   1873e:	4603      	mov	r3, r0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   18740:	2b00      	cmp	r3, #0
   18742:	d01e      	beq.n	18782 <gpiote_event_handler+0xae>
			uint32_t abs_pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, i);
   18744:	6979      	ldr	r1, [r7, #20]
   18746:	481b      	ldr	r0, [pc, #108]	; (187b4 <gpiote_event_handler+0xe0>)
   18748:	f00c fb3b 	bl	24dc2 <nrf_gpiote_event_pin_get>
   1874c:	60f8      	str	r0, [r7, #12]
			/* Divide absolute pin number to port and pin parts. */
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1874e:	68fb      	ldr	r3, [r7, #12]
   18750:	095a      	lsrs	r2, r3, #5
   18752:	0093      	lsls	r3, r2, #2
   18754:	f107 0118 	add.w	r1, r7, #24
   18758:	440b      	add	r3, r1
   1875a:	f853 1c10 	ldr.w	r1, [r3, #-16]
   1875e:	68fb      	ldr	r3, [r7, #12]
   18760:	f003 031f 	and.w	r3, r3, #31
   18764:	2001      	movs	r0, #1
   18766:	fa00 f303 	lsl.w	r3, r0, r3
   1876a:	4319      	orrs	r1, r3
   1876c:	0093      	lsls	r3, r2, #2
   1876e:	f107 0218 	add.w	r2, r7, #24
   18772:	4413      	add	r3, r2
   18774:	f843 1c10 	str.w	r1, [r3, #-16]
			nrf_gpiote_event_clear(NRF_GPIOTE, evt);
   18778:	8a3b      	ldrh	r3, [r7, #16]
   1877a:	4619      	mov	r1, r3
   1877c:	480d      	ldr	r0, [pc, #52]	; (187b4 <gpiote_event_handler+0xe0>)
   1877e:	f00c fa68 	bl	24c52 <nrf_gpiote_event_clear>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   18782:	697b      	ldr	r3, [r7, #20]
   18784:	3301      	adds	r3, #1
   18786:	617b      	str	r3, [r7, #20]
   18788:	697b      	ldr	r3, [r7, #20]
   1878a:	2b07      	cmp	r3, #7
   1878c:	d9c2      	bls.n	18714 <gpiote_event_handler+0x40>
		cfg_edge_sense_pins(DEVICE_DT_GET(GPIO(1)), sense_levels[1]);
#endif
	}

#ifdef CONFIG_GPIO_NRF_P0
	if (fired_triggers[0]) {
   1878e:	68bb      	ldr	r3, [r7, #8]
   18790:	2b00      	cmp	r3, #0
   18792:	d004      	beq.n	1879e <gpiote_event_handler+0xca>
		fire_callbacks(DEVICE_DT_GET(GPIO(0)), fired_triggers[0]);
   18794:	68bb      	ldr	r3, [r7, #8]
   18796:	4619      	mov	r1, r3
   18798:	4807      	ldr	r0, [pc, #28]	; (187b8 <gpiote_event_handler+0xe4>)
   1879a:	f00c fdc1 	bl	25320 <fire_callbacks>
	if (fired_triggers[1]) {
		fire_callbacks(DEVICE_DT_GET(GPIO(1)), fired_triggers[1]);
	}
#endif

	if (port_event) {
   1879e:	7cfb      	ldrb	r3, [r7, #19]
   187a0:	2b00      	cmp	r3, #0
   187a2:	d002      	beq.n	187aa <gpiote_event_handler+0xd6>
		/* Reprogram sense to match current configuration.
		 * This may cause DETECT to be re-asserted.
		 */
#ifdef CONFIG_GPIO_NRF_P0
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   187a4:	4804      	ldr	r0, [pc, #16]	; (187b8 <gpiote_event_handler+0xe4>)
   187a6:	f00c fcdd 	bl	25164 <cfg_level_pins>
#endif
#ifdef CONFIG_GPIO_NRF_P1
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
#endif
	}
}
   187aa:	bf00      	nop
   187ac:	3718      	adds	r7, #24
   187ae:	46bd      	mov	sp, r7
   187b0:	bd80      	pop	{r7, pc}
   187b2:	bf00      	nop
   187b4:	40031000 	.word	0x40031000
   187b8:	00029134 	.word	0x00029134

000187bc <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   187bc:	b580      	push	{r7, lr}
   187be:	b082      	sub	sp, #8
   187c0:	af00      	add	r7, sp, #0
   187c2:	6078      	str	r0, [r7, #4]
	static bool gpio_initialized;

	if (!gpio_initialized) {
   187c4:	4b0d      	ldr	r3, [pc, #52]	; (187fc <gpio_nrfx_init+0x40>)
   187c6:	781b      	ldrb	r3, [r3, #0]
   187c8:	f083 0301 	eor.w	r3, r3, #1
   187cc:	b2db      	uxtb	r3, r3
   187ce:	2b00      	cmp	r3, #0
   187d0:	d00f      	beq.n	187f2 <gpio_nrfx_init+0x36>
		gpio_initialized = true;
   187d2:	4b0a      	ldr	r3, [pc, #40]	; (187fc <gpio_nrfx_init+0x40>)
   187d4:	2201      	movs	r2, #1
   187d6:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   187d8:	2200      	movs	r2, #0
   187da:	2105      	movs	r1, #5
   187dc:	2031      	movs	r0, #49	; 0x31
   187de:	f7fd fa63 	bl	15ca8 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   187e2:	2031      	movs	r0, #49	; 0x31
   187e4:	f00b fd6f 	bl	242c6 <arch_irq_enable>
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
   187e8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   187ec:	4804      	ldr	r0, [pc, #16]	; (18800 <gpio_nrfx_init+0x44>)
   187ee:	f00c fa5a 	bl	24ca6 <nrf_gpiote_int_enable>
	}

	return 0;
   187f2:	2300      	movs	r3, #0
}
   187f4:	4618      	mov	r0, r3
   187f6:	3708      	adds	r7, #8
   187f8:	46bd      	mov	sp, r7
   187fa:	bd80      	pop	{r7, pc}
   187fc:	200151da 	.word	0x200151da
   18800:	40031000 	.word	0x40031000

00018804 <k_is_pre_kernel>:
{
   18804:	b480      	push	{r7}
   18806:	af00      	add	r7, sp, #0
	return !z_sys_post_kernel;
   18808:	4b08      	ldr	r3, [pc, #32]	; (1882c <k_is_pre_kernel+0x28>)
   1880a:	781b      	ldrb	r3, [r3, #0]
   1880c:	2b00      	cmp	r3, #0
   1880e:	bf14      	ite	ne
   18810:	2301      	movne	r3, #1
   18812:	2300      	moveq	r3, #0
   18814:	b2db      	uxtb	r3, r3
   18816:	f083 0301 	eor.w	r3, r3, #1
   1881a:	b2db      	uxtb	r3, r3
   1881c:	f003 0301 	and.w	r3, r3, #1
   18820:	b2db      	uxtb	r3, r3
}
   18822:	4618      	mov	r0, r3
   18824:	46bd      	mov	sp, r7
   18826:	bc80      	pop	{r7}
   18828:	4770      	bx	lr
   1882a:	bf00      	nop
   1882c:	2001532f 	.word	0x2001532f

00018830 <nrf_gpio_pin_port_decode>:
{
   18830:	b580      	push	{r7, lr}
   18832:	b082      	sub	sp, #8
   18834:	af00      	add	r7, sp, #0
   18836:	6078      	str	r0, [r7, #4]
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   18838:	687b      	ldr	r3, [r7, #4]
   1883a:	681b      	ldr	r3, [r3, #0]
   1883c:	4618      	mov	r0, r3
   1883e:	f00c ff8d 	bl	2575c <nrf_gpio_pin_present_check>
   18842:	4603      	mov	r3, r0
   18844:	f083 0301 	eor.w	r3, r3, #1
   18848:	b2db      	uxtb	r3, r3
   1884a:	2b00      	cmp	r3, #0
   1884c:	d00b      	beq.n	18866 <nrf_gpio_pin_port_decode+0x36>
   1884e:	f44f 7305 	mov.w	r3, #532	; 0x214
   18852:	4a10      	ldr	r2, [pc, #64]	; (18894 <nrf_gpio_pin_port_decode+0x64>)
   18854:	4910      	ldr	r1, [pc, #64]	; (18898 <nrf_gpio_pin_port_decode+0x68>)
   18856:	4811      	ldr	r0, [pc, #68]	; (1889c <nrf_gpio_pin_port_decode+0x6c>)
   18858:	f008 fc06 	bl	21068 <printk>
   1885c:	f44f 7105 	mov.w	r1, #532	; 0x214
   18860:	480c      	ldr	r0, [pc, #48]	; (18894 <nrf_gpio_pin_port_decode+0x64>)
   18862:	f009 fcae 	bl	221c2 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   18866:	6878      	ldr	r0, [r7, #4]
   18868:	f00c ff9c 	bl	257a4 <nrf_gpio_pin_port_number_extract>
   1886c:	4603      	mov	r3, r0
   1886e:	2b00      	cmp	r3, #0
   18870:	d00b      	beq.n	1888a <nrf_gpio_pin_port_decode+0x5a>
            NRFX_ASSERT(0);
   18872:	f240 2319 	movw	r3, #537	; 0x219
   18876:	4a07      	ldr	r2, [pc, #28]	; (18894 <nrf_gpio_pin_port_decode+0x64>)
   18878:	4909      	ldr	r1, [pc, #36]	; (188a0 <nrf_gpio_pin_port_decode+0x70>)
   1887a:	4808      	ldr	r0, [pc, #32]	; (1889c <nrf_gpio_pin_port_decode+0x6c>)
   1887c:	f008 fbf4 	bl	21068 <printk>
   18880:	f240 2119 	movw	r1, #537	; 0x219
   18884:	4803      	ldr	r0, [pc, #12]	; (18894 <nrf_gpio_pin_port_decode+0x64>)
   18886:	f009 fc9c 	bl	221c2 <assert_post_action>
        case 0: return NRF_P0;
   1888a:	4b06      	ldr	r3, [pc, #24]	; (188a4 <nrf_gpio_pin_port_decode+0x74>)
}
   1888c:	4618      	mov	r0, r3
   1888e:	3708      	adds	r7, #8
   18890:	46bd      	mov	sp, r7
   18892:	bd80      	pop	{r7, pc}
   18894:	0002ae7c 	.word	0x0002ae7c
   18898:	0002aeb0 	.word	0x0002aeb0
   1889c:	0002aed4 	.word	0x0002aed4
   188a0:	0002aef4 	.word	0x0002aef4
   188a4:	40842500 	.word	0x40842500

000188a8 <log_const_source_id>:
{
   188a8:	b480      	push	{r7}
   188aa:	b083      	sub	sp, #12
   188ac:	af00      	add	r7, sp, #0
   188ae:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   188b0:	687b      	ldr	r3, [r7, #4]
   188b2:	4a04      	ldr	r2, [pc, #16]	; (188c4 <log_const_source_id+0x1c>)
   188b4:	1a9b      	subs	r3, r3, r2
   188b6:	08db      	lsrs	r3, r3, #3
}
   188b8:	4618      	mov	r0, r3
   188ba:	370c      	adds	r7, #12
   188bc:	46bd      	mov	sp, r7
   188be:	bc80      	pop	{r7}
   188c0:	4770      	bx	lr
   188c2:	bf00      	nop
   188c4:	00029354 	.word	0x00029354

000188c8 <nrfx_gppi_channels_enable>:
{
    nrf_dppi_channels_disable_all(NRF_DPPIC);
}

__STATIC_INLINE void nrfx_gppi_channels_enable(uint32_t mask)
{
   188c8:	b580      	push	{r7, lr}
   188ca:	b082      	sub	sp, #8
   188cc:	af00      	add	r7, sp, #0
   188ce:	6078      	str	r0, [r7, #4]
    nrf_dppi_channels_enable(NRF_DPPIC, mask);
   188d0:	6879      	ldr	r1, [r7, #4]
   188d2:	4803      	ldr	r0, [pc, #12]	; (188e0 <nrfx_gppi_channels_enable+0x18>)
   188d4:	f00d f897 	bl	25a06 <nrf_dppi_channels_enable>
}
   188d8:	bf00      	nop
   188da:	3708      	adds	r7, #8
   188dc:	46bd      	mov	sp, r7
   188de:	bd80      	pop	{r7, pc}
   188e0:	40017000 	.word	0x40017000

000188e4 <nrfx_gppi_event_endpoint_setup>:
{
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
   188e4:	b580      	push	{r7, lr}
   188e6:	b082      	sub	sp, #8
   188e8:	af00      	add	r7, sp, #0
   188ea:	4603      	mov	r3, r0
   188ec:	6039      	str	r1, [r7, #0]
   188ee:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(eep);
   188f0:	683b      	ldr	r3, [r7, #0]
   188f2:	2b00      	cmp	r3, #0
   188f4:	d10b      	bne.n	1890e <nrfx_gppi_event_endpoint_setup+0x2a>
   188f6:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
   188fa:	4a0a      	ldr	r2, [pc, #40]	; (18924 <nrfx_gppi_event_endpoint_setup+0x40>)
   188fc:	490a      	ldr	r1, [pc, #40]	; (18928 <nrfx_gppi_event_endpoint_setup+0x44>)
   188fe:	480b      	ldr	r0, [pc, #44]	; (1892c <nrfx_gppi_event_endpoint_setup+0x48>)
   18900:	f008 fbb2 	bl	21068 <printk>
   18904:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
   18908:	4806      	ldr	r0, [pc, #24]	; (18924 <nrfx_gppi_event_endpoint_setup+0x40>)
   1890a:	f009 fc5a 	bl	221c2 <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1890e:	79fb      	ldrb	r3, [r7, #7]
   18910:	683a      	ldr	r2, [r7, #0]
   18912:	3280      	adds	r2, #128	; 0x80
   18914:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18918:	6013      	str	r3, [r2, #0]
}
   1891a:	bf00      	nop
   1891c:	3708      	adds	r7, #8
   1891e:	46bd      	mov	sp, r7
   18920:	bd80      	pop	{r7, pc}
   18922:	bf00      	nop
   18924:	0002aef8 	.word	0x0002aef8
   18928:	0002af30 	.word	0x0002af30
   1892c:	0002aed4 	.word	0x0002aed4

00018930 <nrfx_gppi_task_endpoint_setup>:

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
   18930:	b580      	push	{r7, lr}
   18932:	b082      	sub	sp, #8
   18934:	af00      	add	r7, sp, #0
   18936:	4603      	mov	r3, r0
   18938:	6039      	str	r1, [r7, #0]
   1893a:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(tep);
   1893c:	683b      	ldr	r3, [r7, #0]
   1893e:	2b00      	cmp	r3, #0
   18940:	d10b      	bne.n	1895a <nrfx_gppi_task_endpoint_setup+0x2a>
   18942:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
   18946:	4a0a      	ldr	r2, [pc, #40]	; (18970 <nrfx_gppi_task_endpoint_setup+0x40>)
   18948:	490a      	ldr	r1, [pc, #40]	; (18974 <nrfx_gppi_task_endpoint_setup+0x44>)
   1894a:	480b      	ldr	r0, [pc, #44]	; (18978 <nrfx_gppi_task_endpoint_setup+0x48>)
   1894c:	f008 fb8c 	bl	21068 <printk>
   18950:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   18954:	4806      	ldr	r0, [pc, #24]	; (18970 <nrfx_gppi_task_endpoint_setup+0x40>)
   18956:	f009 fc34 	bl	221c2 <assert_post_action>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   1895a:	79fb      	ldrb	r3, [r7, #7]
   1895c:	683a      	ldr	r2, [r7, #0]
   1895e:	3280      	adds	r2, #128	; 0x80
   18960:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   18964:	6013      	str	r3, [r2, #0]
}
   18966:	bf00      	nop
   18968:	3708      	adds	r7, #8
   1896a:	46bd      	mov	sp, r7
   1896c:	bd80      	pop	{r7, pc}
   1896e:	bf00      	nop
   18970:	0002aef8 	.word	0x0002aef8
   18974:	0002af34 	.word	0x0002af34
   18978:	0002aed4 	.word	0x0002aed4

0001897c <baudrate_set>:
 * @param baudrate Baud rate
 *
 * @return 0 on success or error code
 */
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
   1897c:	b580      	push	{r7, lr}
   1897e:	b084      	sub	sp, #16
   18980:	af00      	add	r7, sp, #0
   18982:	6078      	str	r0, [r7, #4]
   18984:	6039      	str	r1, [r7, #0]
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   18986:	6878      	ldr	r0, [r7, #4]
   18988:	f00d f876 	bl	25a78 <get_uarte_instance>
   1898c:	60b8      	str	r0, [r7, #8]

	switch (baudrate) {
   1898e:	683b      	ldr	r3, [r7, #0]
   18990:	4a83      	ldr	r2, [pc, #524]	; (18ba0 <baudrate_set+0x224>)
   18992:	4293      	cmp	r3, r2
   18994:	f000 80f3 	beq.w	18b7e <baudrate_set+0x202>
   18998:	683b      	ldr	r3, [r7, #0]
   1899a:	4a81      	ldr	r2, [pc, #516]	; (18ba0 <baudrate_set+0x224>)
   1899c:	4293      	cmp	r3, r2
   1899e:	f200 80f2 	bhi.w	18b86 <baudrate_set+0x20a>
   189a2:	683b      	ldr	r3, [r7, #0]
   189a4:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   189a8:	f000 80e5 	beq.w	18b76 <baudrate_set+0x1fa>
   189ac:	683b      	ldr	r3, [r7, #0]
   189ae:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   189b2:	f200 80e8 	bhi.w	18b86 <baudrate_set+0x20a>
   189b6:	683b      	ldr	r3, [r7, #0]
   189b8:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   189bc:	f000 80d7 	beq.w	18b6e <baudrate_set+0x1f2>
   189c0:	683b      	ldr	r3, [r7, #0]
   189c2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   189c6:	f200 80de 	bhi.w	18b86 <baudrate_set+0x20a>
   189ca:	683b      	ldr	r3, [r7, #0]
   189cc:	4a75      	ldr	r2, [pc, #468]	; (18ba4 <baudrate_set+0x228>)
   189ce:	4293      	cmp	r3, r2
   189d0:	f000 80c9 	beq.w	18b66 <baudrate_set+0x1ea>
   189d4:	683b      	ldr	r3, [r7, #0]
   189d6:	4a73      	ldr	r2, [pc, #460]	; (18ba4 <baudrate_set+0x228>)
   189d8:	4293      	cmp	r3, r2
   189da:	f200 80d4 	bhi.w	18b86 <baudrate_set+0x20a>
   189de:	683b      	ldr	r3, [r7, #0]
   189e0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   189e4:	f000 80bb 	beq.w	18b5e <baudrate_set+0x1e2>
   189e8:	683b      	ldr	r3, [r7, #0]
   189ea:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   189ee:	f200 80ca 	bhi.w	18b86 <baudrate_set+0x20a>
   189f2:	683b      	ldr	r3, [r7, #0]
   189f4:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   189f8:	f000 80ad 	beq.w	18b56 <baudrate_set+0x1da>
   189fc:	683b      	ldr	r3, [r7, #0]
   189fe:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   18a02:	f200 80c0 	bhi.w	18b86 <baudrate_set+0x20a>
   18a06:	683b      	ldr	r3, [r7, #0]
   18a08:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   18a0c:	f000 80a0 	beq.w	18b50 <baudrate_set+0x1d4>
   18a10:	683b      	ldr	r3, [r7, #0]
   18a12:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   18a16:	f200 80b6 	bhi.w	18b86 <baudrate_set+0x20a>
   18a1a:	683b      	ldr	r3, [r7, #0]
   18a1c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   18a20:	f000 8092 	beq.w	18b48 <baudrate_set+0x1cc>
   18a24:	683b      	ldr	r3, [r7, #0]
   18a26:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   18a2a:	f200 80ac 	bhi.w	18b86 <baudrate_set+0x20a>
   18a2e:	683b      	ldr	r3, [r7, #0]
   18a30:	f64d 22c0 	movw	r2, #56000	; 0xdac0
   18a34:	4293      	cmp	r3, r2
   18a36:	f000 8083 	beq.w	18b40 <baudrate_set+0x1c4>
   18a3a:	683b      	ldr	r3, [r7, #0]
   18a3c:	f64d 22c0 	movw	r2, #56000	; 0xdac0
   18a40:	4293      	cmp	r3, r2
   18a42:	f200 80a0 	bhi.w	18b86 <baudrate_set+0x20a>
   18a46:	683b      	ldr	r3, [r7, #0]
   18a48:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   18a4c:	d074      	beq.n	18b38 <baudrate_set+0x1bc>
   18a4e:	683b      	ldr	r3, [r7, #0]
   18a50:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   18a54:	f200 8097 	bhi.w	18b86 <baudrate_set+0x20a>
   18a58:	683b      	ldr	r3, [r7, #0]
   18a5a:	f647 2212 	movw	r2, #31250	; 0x7a12
   18a5e:	4293      	cmp	r3, r2
   18a60:	d066      	beq.n	18b30 <baudrate_set+0x1b4>
   18a62:	683b      	ldr	r3, [r7, #0]
   18a64:	f647 2212 	movw	r2, #31250	; 0x7a12
   18a68:	4293      	cmp	r3, r2
   18a6a:	f200 808c 	bhi.w	18b86 <baudrate_set+0x20a>
   18a6e:	683b      	ldr	r3, [r7, #0]
   18a70:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   18a74:	d059      	beq.n	18b2a <baudrate_set+0x1ae>
   18a76:	683b      	ldr	r3, [r7, #0]
   18a78:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   18a7c:	f200 8083 	bhi.w	18b86 <baudrate_set+0x20a>
   18a80:	683b      	ldr	r3, [r7, #0]
   18a82:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   18a86:	d04d      	beq.n	18b24 <baudrate_set+0x1a8>
   18a88:	683b      	ldr	r3, [r7, #0]
   18a8a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   18a8e:	d87a      	bhi.n	18b86 <baudrate_set+0x20a>
   18a90:	683b      	ldr	r3, [r7, #0]
   18a92:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   18a96:	d042      	beq.n	18b1e <baudrate_set+0x1a2>
   18a98:	683b      	ldr	r3, [r7, #0]
   18a9a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   18a9e:	d872      	bhi.n	18b86 <baudrate_set+0x20a>
   18aa0:	683b      	ldr	r3, [r7, #0]
   18aa2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   18aa6:	d037      	beq.n	18b18 <baudrate_set+0x19c>
   18aa8:	683b      	ldr	r3, [r7, #0]
   18aaa:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   18aae:	d86a      	bhi.n	18b86 <baudrate_set+0x20a>
   18ab0:	683b      	ldr	r3, [r7, #0]
   18ab2:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   18ab6:	d02c      	beq.n	18b12 <baudrate_set+0x196>
   18ab8:	683b      	ldr	r3, [r7, #0]
   18aba:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   18abe:	d862      	bhi.n	18b86 <baudrate_set+0x20a>
   18ac0:	683b      	ldr	r3, [r7, #0]
   18ac2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   18ac6:	d020      	beq.n	18b0a <baudrate_set+0x18e>
   18ac8:	683b      	ldr	r3, [r7, #0]
   18aca:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   18ace:	d85a      	bhi.n	18b86 <baudrate_set+0x20a>
   18ad0:	683b      	ldr	r3, [r7, #0]
   18ad2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   18ad6:	d014      	beq.n	18b02 <baudrate_set+0x186>
   18ad8:	683b      	ldr	r3, [r7, #0]
   18ada:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   18ade:	d852      	bhi.n	18b86 <baudrate_set+0x20a>
   18ae0:	683b      	ldr	r3, [r7, #0]
   18ae2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   18ae6:	d004      	beq.n	18af2 <baudrate_set+0x176>
   18ae8:	683b      	ldr	r3, [r7, #0]
   18aea:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   18aee:	d004      	beq.n	18afa <baudrate_set+0x17e>
   18af0:	e049      	b.n	18b86 <baudrate_set+0x20a>
	case 300:
		/* value not supported by Nordic HAL */
		nrf_baudrate = 0x00014000;
   18af2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   18af6:	60fb      	str	r3, [r7, #12]
		break;
   18af8:	e048      	b.n	18b8c <baudrate_set+0x210>
	case 600:
		/* value not supported by Nordic HAL */
		nrf_baudrate = 0x00027000;
   18afa:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   18afe:	60fb      	str	r3, [r7, #12]
		break;
   18b00:	e044      	b.n	18b8c <baudrate_set+0x210>
	case 1200:
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   18b02:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   18b06:	60fb      	str	r3, [r7, #12]
		break;
   18b08:	e040      	b.n	18b8c <baudrate_set+0x210>
	case 2400:
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   18b0a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   18b0e:	60fb      	str	r3, [r7, #12]
		break;
   18b10:	e03c      	b.n	18b8c <baudrate_set+0x210>
	case 4800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   18b12:	4b25      	ldr	r3, [pc, #148]	; (18ba8 <baudrate_set+0x22c>)
   18b14:	60fb      	str	r3, [r7, #12]
		break;
   18b16:	e039      	b.n	18b8c <baudrate_set+0x210>
	case 9600:
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   18b18:	4b24      	ldr	r3, [pc, #144]	; (18bac <baudrate_set+0x230>)
   18b1a:	60fb      	str	r3, [r7, #12]
		break;
   18b1c:	e036      	b.n	18b8c <baudrate_set+0x210>
	case 14400:
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   18b1e:	4b24      	ldr	r3, [pc, #144]	; (18bb0 <baudrate_set+0x234>)
   18b20:	60fb      	str	r3, [r7, #12]
		break;
   18b22:	e033      	b.n	18b8c <baudrate_set+0x210>
	case 19200:
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   18b24:	4b23      	ldr	r3, [pc, #140]	; (18bb4 <baudrate_set+0x238>)
   18b26:	60fb      	str	r3, [r7, #12]
		break;
   18b28:	e030      	b.n	18b8c <baudrate_set+0x210>
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   18b2a:	4b23      	ldr	r3, [pc, #140]	; (18bb8 <baudrate_set+0x23c>)
   18b2c:	60fb      	str	r3, [r7, #12]
		break;
   18b2e:	e02d      	b.n	18b8c <baudrate_set+0x210>
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   18b30:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   18b34:	60fb      	str	r3, [r7, #12]
		break;
   18b36:	e029      	b.n	18b8c <baudrate_set+0x210>
	case 38400:
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   18b38:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   18b3c:	60fb      	str	r3, [r7, #12]
		break;
   18b3e:	e025      	b.n	18b8c <baudrate_set+0x210>
	case 56000:
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   18b40:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   18b44:	60fb      	str	r3, [r7, #12]
		break;
   18b46:	e021      	b.n	18b8c <baudrate_set+0x210>
	case 57600:
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   18b48:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   18b4c:	60fb      	str	r3, [r7, #12]
		break;
   18b4e:	e01d      	b.n	18b8c <baudrate_set+0x210>
	case 76800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   18b50:	4b1a      	ldr	r3, [pc, #104]	; (18bbc <baudrate_set+0x240>)
   18b52:	60fb      	str	r3, [r7, #12]
		break;
   18b54:	e01a      	b.n	18b8c <baudrate_set+0x210>
	case 115200:
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   18b56:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   18b5a:	60fb      	str	r3, [r7, #12]
		break;
   18b5c:	e016      	b.n	18b8c <baudrate_set+0x210>
	case 230400:
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   18b5e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   18b62:	60fb      	str	r3, [r7, #12]
		break;
   18b64:	e012      	b.n	18b8c <baudrate_set+0x210>
	case 250000:
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   18b66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   18b6a:	60fb      	str	r3, [r7, #12]
		break;
   18b6c:	e00e      	b.n	18b8c <baudrate_set+0x210>
	case 460800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   18b6e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   18b72:	60fb      	str	r3, [r7, #12]
		break;
   18b74:	e00a      	b.n	18b8c <baudrate_set+0x210>
	case 921600:
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   18b76:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   18b7a:	60fb      	str	r3, [r7, #12]
		break;
   18b7c:	e006      	b.n	18b8c <baudrate_set+0x210>
	case 1000000:
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   18b7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18b82:	60fb      	str	r3, [r7, #12]
		break;
   18b84:	e002      	b.n	18b8c <baudrate_set+0x210>
	default:
		return -EINVAL;
   18b86:	f06f 0315 	mvn.w	r3, #21
   18b8a:	e004      	b.n	18b96 <baudrate_set+0x21a>
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);
   18b8c:	68f9      	ldr	r1, [r7, #12]
   18b8e:	68b8      	ldr	r0, [r7, #8]
   18b90:	f00c ff05 	bl	2599e <nrf_uarte_baudrate_set>

	return 0;
   18b94:	2300      	movs	r3, #0
}
   18b96:	4618      	mov	r0, r3
   18b98:	3710      	adds	r7, #16
   18b9a:	46bd      	mov	sp, r7
   18b9c:	bd80      	pop	{r7, pc}
   18b9e:	bf00      	nop
   18ba0:	000f4240 	.word	0x000f4240
   18ba4:	0003d090 	.word	0x0003d090
   18ba8:	0013b000 	.word	0x0013b000
   18bac:	00275000 	.word	0x00275000
   18bb0:	003af000 	.word	0x003af000
   18bb4:	004ea000 	.word	0x004ea000
   18bb8:	0075c000 	.word	0x0075c000
   18bbc:	013a9000 	.word	0x013a9000

00018bc0 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   18bc0:	b5b0      	push	{r4, r5, r7, lr}
   18bc2:	b086      	sub	sp, #24
   18bc4:	af00      	add	r7, sp, #0
   18bc6:	6078      	str	r0, [r7, #4]
   18bc8:	6039      	str	r1, [r7, #0]
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   18bca:	683b      	ldr	r3, [r7, #0]
   18bcc:	3312      	adds	r3, #18
   18bce:	4618      	mov	r0, r3
   18bd0:	f001 fac4 	bl	1a15c <nrfx_dppi_channel_alloc>
   18bd4:	6178      	str	r0, [r7, #20]
	if (ret != NRFX_SUCCESS) {
   18bd6:	697b      	ldr	r3, [r7, #20]
   18bd8:	4a2c      	ldr	r2, [pc, #176]	; (18c8c <endtx_stoptx_ppi_init+0xcc>)
   18bda:	4293      	cmp	r3, r2
   18bdc:	d037      	beq.n	18c4e <endtx_stoptx_ppi_init+0x8e>
		LOG_ERR("Failed to allocate PPI Channel");
   18bde:	2301      	movs	r3, #1
   18be0:	2b00      	cmp	r3, #0
   18be2:	d030      	beq.n	18c46 <endtx_stoptx_ppi_init+0x86>
   18be4:	f00c fbb1 	bl	2534a <k_is_user_context>
   18be8:	4603      	mov	r3, r0
   18bea:	74fb      	strb	r3, [r7, #19]
   18bec:	2300      	movs	r3, #0
   18bee:	60fb      	str	r3, [r7, #12]
   18bf0:	2301      	movs	r3, #1
   18bf2:	2b00      	cmp	r3, #0
   18bf4:	d007      	beq.n	18c06 <endtx_stoptx_ppi_init+0x46>
   18bf6:	4b26      	ldr	r3, [pc, #152]	; (18c90 <endtx_stoptx_ppi_init+0xd0>)
   18bf8:	681b      	ldr	r3, [r3, #0]
   18bfa:	4618      	mov	r0, r3
   18bfc:	f7ff fe54 	bl	188a8 <log_const_source_id>
   18c00:	4603      	mov	r3, r0
   18c02:	b29b      	uxth	r3, r3
   18c04:	e000      	b.n	18c08 <endtx_stoptx_ppi_init+0x48>
   18c06:	2300      	movs	r3, #0
   18c08:	823b      	strh	r3, [r7, #16]
   18c0a:	7a3b      	ldrb	r3, [r7, #8]
   18c0c:	2201      	movs	r2, #1
   18c0e:	f362 0302 	bfi	r3, r2, #0, #3
   18c12:	723b      	strb	r3, [r7, #8]
   18c14:	7a3b      	ldrb	r3, [r7, #8]
   18c16:	f36f 03c5 	bfc	r3, #3, #3
   18c1a:	723b      	strb	r3, [r7, #8]
   18c1c:	8a3b      	ldrh	r3, [r7, #16]
   18c1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   18c22:	b29a      	uxth	r2, r3
   18c24:	893b      	ldrh	r3, [r7, #8]
   18c26:	f362 138f 	bfi	r3, r2, #6, #10
   18c2a:	813b      	strh	r3, [r7, #8]
   18c2c:	7cfb      	ldrb	r3, [r7, #19]
   18c2e:	2b00      	cmp	r3, #0
   18c30:	d004      	beq.n	18c3c <endtx_stoptx_ppi_init+0x7c>
   18c32:	4918      	ldr	r1, [pc, #96]	; (18c94 <endtx_stoptx_ppi_init+0xd4>)
   18c34:	8938      	ldrh	r0, [r7, #8]
   18c36:	f7fa fa8b 	bl	13150 <log_from_user>
   18c3a:	e005      	b.n	18c48 <endtx_stoptx_ppi_init+0x88>
   18c3c:	8939      	ldrh	r1, [r7, #8]
   18c3e:	4815      	ldr	r0, [pc, #84]	; (18c94 <endtx_stoptx_ppi_init+0xd4>)
   18c40:	f009 ff60 	bl	22b04 <log_0>
   18c44:	e000      	b.n	18c48 <endtx_stoptx_ppi_init+0x88>
   18c46:	bf00      	nop
		return -EIO;
   18c48:	f06f 0304 	mvn.w	r3, #4
   18c4c:	e01a      	b.n	18c84 <endtx_stoptx_ppi_init+0xc4>
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   18c4e:	683b      	ldr	r3, [r7, #0]
   18c50:	7c9c      	ldrb	r4, [r3, #18]
   18c52:	f44f 7190 	mov.w	r1, #288	; 0x120
   18c56:	6878      	ldr	r0, [r7, #4]
   18c58:	f00c fde0 	bl	2581c <nrf_uarte_event_address_get>
   18c5c:	4605      	mov	r5, r0
   18c5e:	210c      	movs	r1, #12
   18c60:	6878      	ldr	r0, [r7, #4]
   18c62:	f00c fe76 	bl	25952 <nrf_uarte_task_address_get>
   18c66:	4603      	mov	r3, r0
   18c68:	461a      	mov	r2, r3
   18c6a:	4629      	mov	r1, r5
   18c6c:	4620      	mov	r0, r4
   18c6e:	f00c fed8 	bl	25a22 <nrfx_gppi_channel_endpoints_setup>
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   18c72:	683b      	ldr	r3, [r7, #0]
   18c74:	7c9b      	ldrb	r3, [r3, #18]
   18c76:	461a      	mov	r2, r3
   18c78:	2301      	movs	r3, #1
   18c7a:	4093      	lsls	r3, r2
   18c7c:	4618      	mov	r0, r3
   18c7e:	f7ff fe23 	bl	188c8 <nrfx_gppi_channels_enable>

	return 0;
   18c82:	2300      	movs	r3, #0
}
   18c84:	4618      	mov	r0, r3
   18c86:	3718      	adds	r7, #24
   18c88:	46bd      	mov	sp, r7
   18c8a:	bdb0      	pop	{r4, r5, r7, pc}
   18c8c:	0bad0000 	.word	0x0bad0000
   18c90:	20014534 	.word	0x20014534
   18c94:	0002af48 	.word	0x0002af48

00018c98 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   18c98:	b590      	push	{r4, r7, lr}
   18c9a:	b087      	sub	sp, #28
   18c9c:	af00      	add	r7, sp, #0
   18c9e:	6078      	str	r0, [r7, #4]
   18ca0:	4b0c      	ldr	r3, [pc, #48]	; (18cd4 <uarte_0_init+0x3c>)
   18ca2:	f107 0408 	add.w	r4, r7, #8
   18ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   18ca8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   18cac:	2200      	movs	r2, #0
   18cae:	2101      	movs	r1, #1
   18cb0:	2008      	movs	r0, #8
   18cb2:	f7fc fff9 	bl	15ca8 <z_arm_irq_priority_set>
   18cb6:	2008      	movs	r0, #8
   18cb8:	f00b fb05 	bl	242c6 <arch_irq_enable>
   18cbc:	f107 0308 	add.w	r3, r7, #8
   18cc0:	2200      	movs	r2, #0
   18cc2:	4619      	mov	r1, r3
   18cc4:	6878      	ldr	r0, [r7, #4]
   18cc6:	f00d f938 	bl	25f3a <uarte_instance_init>
   18cca:	4603      	mov	r3, r0
   18ccc:	4618      	mov	r0, r3
   18cce:	371c      	adds	r7, #28
   18cd0:	46bd      	mov	sp, r7
   18cd2:	bd90      	pop	{r4, r7, pc}
   18cd4:	0002af68 	.word	0x0002af68

00018cd8 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   18cd8:	b580      	push	{r7, lr}
   18cda:	b088      	sub	sp, #32
   18cdc:	af00      	add	r7, sp, #0
   18cde:	60f8      	str	r0, [r7, #12]
   18ce0:	60b9      	str	r1, [r7, #8]
   18ce2:	4613      	mov	r3, r2
   18ce4:	80fb      	strh	r3, [r7, #6]
	int res = -EINVAL;
   18ce6:	f06f 0315 	mvn.w	r3, #21
   18cea:	61fb      	str	r3, [r7, #28]

	__ASSERT_NO_MSG(dev != NULL);
   18cec:	68fb      	ldr	r3, [r7, #12]
   18cee:	2b00      	cmp	r3, #0
   18cf0:	d109      	bne.n	18d06 <entropy_cc3xx_rng_get_entropy+0x2e>
   18cf2:	2324      	movs	r3, #36	; 0x24
   18cf4:	4a24      	ldr	r2, [pc, #144]	; (18d88 <entropy_cc3xx_rng_get_entropy+0xb0>)
   18cf6:	4925      	ldr	r1, [pc, #148]	; (18d8c <entropy_cc3xx_rng_get_entropy+0xb4>)
   18cf8:	4825      	ldr	r0, [pc, #148]	; (18d90 <entropy_cc3xx_rng_get_entropy+0xb8>)
   18cfa:	f008 f9b5 	bl	21068 <printk>
   18cfe:	2124      	movs	r1, #36	; 0x24
   18d00:	4821      	ldr	r0, [pc, #132]	; (18d88 <entropy_cc3xx_rng_get_entropy+0xb0>)
   18d02:	f009 fa5e 	bl	221c2 <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   18d06:	68bb      	ldr	r3, [r7, #8]
   18d08:	2b00      	cmp	r3, #0
   18d0a:	d109      	bne.n	18d20 <entropy_cc3xx_rng_get_entropy+0x48>
   18d0c:	2325      	movs	r3, #37	; 0x25
   18d0e:	4a1e      	ldr	r2, [pc, #120]	; (18d88 <entropy_cc3xx_rng_get_entropy+0xb0>)
   18d10:	4920      	ldr	r1, [pc, #128]	; (18d94 <entropy_cc3xx_rng_get_entropy+0xbc>)
   18d12:	481f      	ldr	r0, [pc, #124]	; (18d90 <entropy_cc3xx_rng_get_entropy+0xb8>)
   18d14:	f008 f9a8 	bl	21068 <printk>
   18d18:	2125      	movs	r1, #37	; 0x25
   18d1a:	481b      	ldr	r0, [pc, #108]	; (18d88 <entropy_cc3xx_rng_get_entropy+0xb0>)
   18d1c:	f009 fa51 	bl	221c2 <assert_post_action>
		return -EINVAL;
	}

#else
	size_t olen;
	size_t offset = 0;
   18d20:	2300      	movs	r3, #0
   18d22:	61bb      	str	r3, [r7, #24]
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   18d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
   18d28:	617b      	str	r3, [r7, #20]
	/** This is a call from a secure app, in which case entropy is
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   18d2a:	e021      	b.n	18d70 <entropy_cc3xx_rng_get_entropy+0x98>

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   18d2c:	88fa      	ldrh	r2, [r7, #6]
   18d2e:	69bb      	ldr	r3, [r7, #24]
   18d30:	1ad3      	subs	r3, r2, r3
   18d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   18d36:	d203      	bcs.n	18d40 <entropy_cc3xx_rng_get_entropy+0x68>
			chunk_size = length - offset;
   18d38:	88fa      	ldrh	r2, [r7, #6]
   18d3a:	69bb      	ldr	r3, [r7, #24]
   18d3c:	1ad3      	subs	r3, r2, r3
   18d3e:	617b      	str	r3, [r7, #20]
		#if defined(CONFIG_SPM)
			/** This is a call from a non-secure app that
			 * enables secure services, in which case entropy
			 * is gathered by calling through SPM.
			 */
			res = spm_request_random_number(buffer + offset,
   18d40:	68ba      	ldr	r2, [r7, #8]
   18d42:	69bb      	ldr	r3, [r7, #24]
   18d44:	4413      	add	r3, r2
   18d46:	f107 0210 	add.w	r2, r7, #16
   18d4a:	6979      	ldr	r1, [r7, #20]
   18d4c:	4618      	mov	r0, r3
   18d4e:	f00b faac 	bl	242aa <spm_request_random_number>
   18d52:	61f8      	str	r0, [r7, #28]
										buffer + offset,
										chunk_size,
										&olen);
		#endif

		if (olen != chunk_size) {
   18d54:	693b      	ldr	r3, [r7, #16]
   18d56:	697a      	ldr	r2, [r7, #20]
   18d58:	429a      	cmp	r2, r3
   18d5a:	d002      	beq.n	18d62 <entropy_cc3xx_rng_get_entropy+0x8a>
			return -EINVAL;
   18d5c:	f06f 0315 	mvn.w	r3, #21
   18d60:	e00d      	b.n	18d7e <entropy_cc3xx_rng_get_entropy+0xa6>
		}

		if (res != 0) {
   18d62:	69fb      	ldr	r3, [r7, #28]
   18d64:	2b00      	cmp	r3, #0
   18d66:	d108      	bne.n	18d7a <entropy_cc3xx_rng_get_entropy+0xa2>
			break;
		}

		offset += chunk_size;
   18d68:	69ba      	ldr	r2, [r7, #24]
   18d6a:	697b      	ldr	r3, [r7, #20]
   18d6c:	4413      	add	r3, r2
   18d6e:	61bb      	str	r3, [r7, #24]
	while (offset < length) {
   18d70:	88fb      	ldrh	r3, [r7, #6]
   18d72:	69ba      	ldr	r2, [r7, #24]
   18d74:	429a      	cmp	r2, r3
   18d76:	d3d9      	bcc.n	18d2c <entropy_cc3xx_rng_get_entropy+0x54>
   18d78:	e000      	b.n	18d7c <entropy_cc3xx_rng_get_entropy+0xa4>
			break;
   18d7a:	bf00      	nop
	}
#endif

	return res;
   18d7c:	69fb      	ldr	r3, [r7, #28]
}
   18d7e:	4618      	mov	r0, r3
   18d80:	3720      	adds	r7, #32
   18d82:	46bd      	mov	sp, r7
   18d84:	bd80      	pop	{r7, pc}
   18d86:	bf00      	nop
   18d88:	0002af80 	.word	0x0002af80
   18d8c:	0002afb0 	.word	0x0002afb0
   18d90:	0002afc4 	.word	0x0002afc4
   18d94:	0002afe4 	.word	0x0002afe4

00018d98 <_nrf_modem_lib_init>:
	},
#endif
};

static int _nrf_modem_lib_init(const struct device *unused)
{
   18d98:	b580      	push	{r7, lr}
   18d9a:	b084      	sub	sp, #16
   18d9c:	af00      	add	r7, sp, #0
   18d9e:	6078      	str	r0, [r7, #4]
	if (!first_time_init) {
   18da0:	4b38      	ldr	r3, [pc, #224]	; (18e84 <_nrf_modem_lib_init+0xec>)
   18da2:	781b      	ldrb	r3, [r3, #0]
   18da4:	f083 0301 	eor.w	r3, r3, #1
   18da8:	b2db      	uxtb	r3, r3
   18daa:	2b00      	cmp	r3, #0
   18dac:	d008      	beq.n	18dc0 <_nrf_modem_lib_init+0x28>
		sys_slist_init(&shutdown_threads);
   18dae:	4836      	ldr	r0, [pc, #216]	; (18e88 <_nrf_modem_lib_init+0xf0>)
   18db0:	f00d f98d 	bl	260ce <sys_slist_init>
		k_mutex_init(&slist_mutex);
   18db4:	4835      	ldr	r0, [pc, #212]	; (18e8c <_nrf_modem_lib_init+0xf4>)
   18db6:	f00d f9cc 	bl	26152 <k_mutex_init>
		first_time_init = true;
   18dba:	4b32      	ldr	r3, [pc, #200]	; (18e84 <_nrf_modem_lib_init+0xec>)
   18dbc:	2201      	movs	r2, #1
   18dbe:	701a      	strb	r2, [r3, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   18dc0:	2200      	movs	r2, #0
   18dc2:	2100      	movs	r1, #0
   18dc4:	202a      	movs	r0, #42	; 0x2a
   18dc6:	f7fc ff6f 	bl	15ca8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   18dca:	2100      	movs	r1, #0
   18dcc:	4830      	ldr	r0, [pc, #192]	; (18e90 <_nrf_modem_lib_init+0xf8>)
   18dce:	f002 ffc9 	bl	1bd64 <nrf_modem_init>
   18dd2:	4603      	mov	r3, r0
   18dd4:	4a2f      	ldr	r2, [pc, #188]	; (18e94 <_nrf_modem_lib_init+0xfc>)
   18dd6:	6013      	str	r3, [r2, #0]

	k_mutex_lock(&slist_mutex, K_FOREVER);
   18dd8:	f04f 32ff 	mov.w	r2, #4294967295
   18ddc:	f04f 33ff 	mov.w	r3, #4294967295
   18de0:	482a      	ldr	r0, [pc, #168]	; (18e8c <_nrf_modem_lib_init+0xf4>)
   18de2:	f00d f9c2 	bl	2616a <k_mutex_lock>
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   18de6:	4828      	ldr	r0, [pc, #160]	; (18e88 <_nrf_modem_lib_init+0xf0>)
   18de8:	f00d f98b 	bl	26102 <sys_slist_peek_head>
   18dec:	4603      	mov	r3, r0
   18dee:	2b00      	cmp	r3, #0
   18df0:	d03f      	beq.n	18e72 <_nrf_modem_lib_init+0xda>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   18df2:	4825      	ldr	r0, [pc, #148]	; (18e88 <_nrf_modem_lib_init+0xf0>)
   18df4:	f00d f985 	bl	26102 <sys_slist_peek_head>
   18df8:	4603      	mov	r3, r0
   18dfa:	2b00      	cmp	r3, #0
   18dfc:	d004      	beq.n	18e08 <_nrf_modem_lib_init+0x70>
   18dfe:	4822      	ldr	r0, [pc, #136]	; (18e88 <_nrf_modem_lib_init+0xf0>)
   18e00:	f00d f97f 	bl	26102 <sys_slist_peek_head>
   18e04:	4603      	mov	r3, r0
   18e06:	e000      	b.n	18e0a <_nrf_modem_lib_init+0x72>
   18e08:	2300      	movs	r3, #0
   18e0a:	60fb      	str	r3, [r7, #12]
   18e0c:	68fb      	ldr	r3, [r7, #12]
   18e0e:	2b00      	cmp	r3, #0
   18e10:	d00e      	beq.n	18e30 <_nrf_modem_lib_init+0x98>
   18e12:	68fb      	ldr	r3, [r7, #12]
   18e14:	4618      	mov	r0, r3
   18e16:	f00d f98b 	bl	26130 <sys_slist_peek_next>
   18e1a:	4603      	mov	r3, r0
   18e1c:	2b00      	cmp	r3, #0
   18e1e:	d005      	beq.n	18e2c <_nrf_modem_lib_init+0x94>
   18e20:	68fb      	ldr	r3, [r7, #12]
   18e22:	4618      	mov	r0, r3
   18e24:	f00d f984 	bl	26130 <sys_slist_peek_next>
   18e28:	4603      	mov	r3, r0
   18e2a:	e002      	b.n	18e32 <_nrf_modem_lib_init+0x9a>
   18e2c:	2300      	movs	r3, #0
   18e2e:	e000      	b.n	18e32 <_nrf_modem_lib_init+0x9a>
   18e30:	2300      	movs	r3, #0
   18e32:	60bb      	str	r3, [r7, #8]
   18e34:	e01a      	b.n	18e6c <_nrf_modem_lib_init+0xd4>
					     next_thread, node) {
			k_sem_give(&thread->sem);
   18e36:	68fb      	ldr	r3, [r7, #12]
   18e38:	3304      	adds	r3, #4
   18e3a:	4618      	mov	r0, r3
   18e3c:	f00d f9b1 	bl	261a2 <k_sem_give>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   18e40:	68bb      	ldr	r3, [r7, #8]
   18e42:	60fb      	str	r3, [r7, #12]
   18e44:	68fb      	ldr	r3, [r7, #12]
   18e46:	2b00      	cmp	r3, #0
   18e48:	d00e      	beq.n	18e68 <_nrf_modem_lib_init+0xd0>
   18e4a:	68fb      	ldr	r3, [r7, #12]
   18e4c:	4618      	mov	r0, r3
   18e4e:	f00d f96f 	bl	26130 <sys_slist_peek_next>
   18e52:	4603      	mov	r3, r0
   18e54:	2b00      	cmp	r3, #0
   18e56:	d005      	beq.n	18e64 <_nrf_modem_lib_init+0xcc>
   18e58:	68fb      	ldr	r3, [r7, #12]
   18e5a:	4618      	mov	r0, r3
   18e5c:	f00d f968 	bl	26130 <sys_slist_peek_next>
   18e60:	4603      	mov	r3, r0
   18e62:	e002      	b.n	18e6a <_nrf_modem_lib_init+0xd2>
   18e64:	2300      	movs	r3, #0
   18e66:	e000      	b.n	18e6a <_nrf_modem_lib_init+0xd2>
   18e68:	2300      	movs	r3, #0
   18e6a:	60bb      	str	r3, [r7, #8]
   18e6c:	68fb      	ldr	r3, [r7, #12]
   18e6e:	2b00      	cmp	r3, #0
   18e70:	d1e1      	bne.n	18e36 <_nrf_modem_lib_init+0x9e>
		}
	}
	k_mutex_unlock(&slist_mutex);
   18e72:	4806      	ldr	r0, [pc, #24]	; (18e8c <_nrf_modem_lib_init+0xf4>)
   18e74:	f00d f989 	bl	2618a <k_mutex_unlock>
		/* nrf_modem_init() returns values from a different namespace
		 * than Zephyr's. Make sure to return something in Zephyr's
		 * namespace, in this case 0, when called during SYS_INIT.
		 * Non-zero values in SYS_INIT are currently ignored.
		 */
		return 0;
   18e78:	2100      	movs	r1, #0
   18e7a:	460b      	mov	r3, r1
	}

	return init_ret;
}
   18e7c:	4618      	mov	r0, r3
   18e7e:	3710      	adds	r7, #16
   18e80:	46bd      	mov	sp, r7
   18e82:	bd80      	pop	{r7, pc}
   18e84:	200151db 	.word	0x200151db
   18e88:	20014da8 	.word	0x20014da8
   18e8c:	20014db0 	.word	0x20014db0
   18e90:	0002cc58 	.word	0x0002cc58
   18e94:	20014dc4 	.word	0x20014dc4

00018e98 <__NVIC_SetPendingIRQ>:
{
   18e98:	b480      	push	{r7}
   18e9a:	b083      	sub	sp, #12
   18e9c:	af00      	add	r7, sp, #0
   18e9e:	4603      	mov	r3, r0
   18ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   18ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
   18ea6:	2b00      	cmp	r3, #0
   18ea8:	db0c      	blt.n	18ec4 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18eaa:	79fb      	ldrb	r3, [r7, #7]
   18eac:	f003 021f 	and.w	r2, r3, #31
   18eb0:	4907      	ldr	r1, [pc, #28]	; (18ed0 <__NVIC_SetPendingIRQ+0x38>)
   18eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
   18eb6:	095b      	lsrs	r3, r3, #5
   18eb8:	2001      	movs	r0, #1
   18eba:	fa00 f202 	lsl.w	r2, r0, r2
   18ebe:	3340      	adds	r3, #64	; 0x40
   18ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   18ec4:	bf00      	nop
   18ec6:	370c      	adds	r7, #12
   18ec8:	46bd      	mov	sp, r7
   18eca:	bc80      	pop	{r7}
   18ecc:	4770      	bx	lr
   18ece:	bf00      	nop
   18ed0:	e000e100 	.word	0xe000e100

00018ed4 <__NVIC_ClearPendingIRQ>:
{
   18ed4:	b480      	push	{r7}
   18ed6:	b083      	sub	sp, #12
   18ed8:	af00      	add	r7, sp, #0
   18eda:	4603      	mov	r3, r0
   18edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   18ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
   18ee2:	2b00      	cmp	r3, #0
   18ee4:	db0c      	blt.n	18f00 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18ee6:	79fb      	ldrb	r3, [r7, #7]
   18ee8:	f003 021f 	and.w	r2, r3, #31
   18eec:	4907      	ldr	r1, [pc, #28]	; (18f0c <__NVIC_ClearPendingIRQ+0x38>)
   18eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
   18ef2:	095b      	lsrs	r3, r3, #5
   18ef4:	2001      	movs	r0, #1
   18ef6:	fa00 f202 	lsl.w	r2, r0, r2
   18efa:	3360      	adds	r3, #96	; 0x60
   18efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   18f00:	bf00      	nop
   18f02:	370c      	adds	r7, #12
   18f04:	46bd      	mov	sp, r7
   18f06:	bc80      	pop	{r7}
   18f08:	4770      	bx	lr
   18f0a:	bf00      	nop
   18f0c:	e000e100 	.word	0xe000e100

00018f10 <log_const_source_id>:
{
   18f10:	b480      	push	{r7}
   18f12:	b083      	sub	sp, #12
   18f14:	af00      	add	r7, sp, #0
   18f16:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   18f18:	687b      	ldr	r3, [r7, #4]
   18f1a:	4a04      	ldr	r2, [pc, #16]	; (18f2c <log_const_source_id+0x1c>)
   18f1c:	1a9b      	subs	r3, r3, r2
   18f1e:	08db      	lsrs	r3, r3, #3
}
   18f20:	4618      	mov	r0, r3
   18f22:	370c      	adds	r7, #12
   18f24:	46bd      	mov	sp, r7
   18f26:	bc80      	pop	{r7}
   18f28:	4770      	bx	lr
   18f2a:	bf00      	nop
   18f2c:	00029354 	.word	0x00029354

00018f30 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   18f30:	b480      	push	{r7}
   18f32:	b087      	sub	sp, #28
   18f34:	af00      	add	r7, sp, #0
   18f36:	6078      	str	r0, [r7, #4]
	struct thread_monitor_entry *entry = thread_event_monitor;
   18f38:	4b1f      	ldr	r3, [pc, #124]	; (18fb8 <thread_monitor_entry_get+0x88>)
   18f3a:	617b      	str	r3, [r7, #20]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   18f3c:	4b1e      	ldr	r3, [pc, #120]	; (18fb8 <thread_monitor_entry_get+0x88>)
   18f3e:	613b      	str	r3, [r7, #16]
	int entry_age, oldest_entry_age = 0;
   18f40:	2300      	movs	r3, #0
   18f42:	60fb      	str	r3, [r7, #12]

	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   18f44:	e01e      	b.n	18f84 <thread_monitor_entry_get+0x54>
		if (entry->id == id) {
   18f46:	697b      	ldr	r3, [r7, #20]
   18f48:	681b      	ldr	r3, [r3, #0]
   18f4a:	687a      	ldr	r2, [r7, #4]
   18f4c:	429a      	cmp	r2, r3
   18f4e:	d101      	bne.n	18f54 <thread_monitor_entry_get+0x24>
			return entry;
   18f50:	697b      	ldr	r3, [r7, #20]
   18f52:	e02b      	b.n	18fac <thread_monitor_entry_get+0x7c>
		} else if (entry->id == 0) {
   18f54:	697b      	ldr	r3, [r7, #20]
   18f56:	681b      	ldr	r3, [r3, #0]
   18f58:	2b00      	cmp	r3, #0
   18f5a:	d102      	bne.n	18f62 <thread_monitor_entry_get+0x32>
			/* Uninitialized field. */
			new_entry = entry;
   18f5c:	697b      	ldr	r3, [r7, #20]
   18f5e:	613b      	str	r3, [r7, #16]
			break;
   18f60:	e01b      	b.n	18f9a <thread_monitor_entry_get+0x6a>
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   18f62:	4b16      	ldr	r3, [pc, #88]	; (18fbc <thread_monitor_entry_get+0x8c>)
   18f64:	681a      	ldr	r2, [r3, #0]
   18f66:	697b      	ldr	r3, [r7, #20]
   18f68:	685b      	ldr	r3, [r3, #4]
   18f6a:	1ad3      	subs	r3, r2, r3
   18f6c:	60bb      	str	r3, [r7, #8]
		if (entry_age > oldest_entry_age) {
   18f6e:	68ba      	ldr	r2, [r7, #8]
   18f70:	68fb      	ldr	r3, [r7, #12]
   18f72:	429a      	cmp	r2, r3
   18f74:	dd03      	ble.n	18f7e <thread_monitor_entry_get+0x4e>
			oldest_entry_age = entry_age;
   18f76:	68bb      	ldr	r3, [r7, #8]
   18f78:	60fb      	str	r3, [r7, #12]
			new_entry = entry;
   18f7a:	697b      	ldr	r3, [r7, #20]
   18f7c:	613b      	str	r3, [r7, #16]
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   18f7e:	697b      	ldr	r3, [r7, #20]
   18f80:	3308      	adds	r3, #8
   18f82:	617b      	str	r3, [r7, #20]
   18f84:	697b      	ldr	r3, [r7, #20]
   18f86:	2b00      	cmp	r3, #0
   18f88:	d007      	beq.n	18f9a <thread_monitor_entry_get+0x6a>
   18f8a:	697b      	ldr	r3, [r7, #20]
   18f8c:	4a0a      	ldr	r2, [pc, #40]	; (18fb8 <thread_monitor_entry_get+0x88>)
   18f8e:	4293      	cmp	r3, r2
   18f90:	d303      	bcc.n	18f9a <thread_monitor_entry_get+0x6a>
   18f92:	697b      	ldr	r3, [r7, #20]
   18f94:	4a0a      	ldr	r2, [pc, #40]	; (18fc0 <thread_monitor_entry_get+0x90>)
   18f96:	4293      	cmp	r3, r2
   18f98:	d3d5      	bcc.n	18f46 <thread_monitor_entry_get+0x16>
		}
	}

	new_entry->id = id;
   18f9a:	693b      	ldr	r3, [r7, #16]
   18f9c:	687a      	ldr	r2, [r7, #4]
   18f9e:	601a      	str	r2, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   18fa0:	4b06      	ldr	r3, [pc, #24]	; (18fbc <thread_monitor_entry_get+0x8c>)
   18fa2:	681b      	ldr	r3, [r3, #0]
   18fa4:	1e5a      	subs	r2, r3, #1
   18fa6:	693b      	ldr	r3, [r7, #16]
   18fa8:	605a      	str	r2, [r3, #4]

	return new_entry;
   18faa:	693b      	ldr	r3, [r7, #16]
}
   18fac:	4618      	mov	r0, r3
   18fae:	371c      	adds	r7, #28
   18fb0:	46bd      	mov	sp, r7
   18fb2:	bc80      	pop	{r7}
   18fb4:	4770      	bx	lr
   18fb6:	bf00      	nop
   18fb8:	20014de8 	.word	0x20014de8
   18fbc:	20014e40 	.word	0x20014e40
   18fc0:	20014e38 	.word	0x20014e38

00018fc4 <thread_monitor_entry_update>:

/* Update thread monitor entry RPC counter. */
static void thread_monitor_entry_update(struct thread_monitor_entry *entry)
{
   18fc4:	b480      	push	{r7}
   18fc6:	b083      	sub	sp, #12
   18fc8:	af00      	add	r7, sp, #0
   18fca:	6078      	str	r0, [r7, #4]
	entry->cnt = rpc_event_cnt;
   18fcc:	4b04      	ldr	r3, [pc, #16]	; (18fe0 <thread_monitor_entry_update+0x1c>)
   18fce:	681a      	ldr	r2, [r3, #0]
   18fd0:	687b      	ldr	r3, [r7, #4]
   18fd2:	605a      	str	r2, [r3, #4]
}
   18fd4:	bf00      	nop
   18fd6:	370c      	adds	r7, #12
   18fd8:	46bd      	mov	sp, r7
   18fda:	bc80      	pop	{r7}
   18fdc:	4770      	bx	lr
   18fde:	bf00      	nop
   18fe0:	20014e40 	.word	0x20014e40

00018fe4 <can_thread_sleep>:
/* Verify that thread can be put into sleep (no RPC event occured in a
 * meantime), or whether we should return to nrf_modem_lib to re-verify if a sleep is
 * needed.
 */
static bool can_thread_sleep(struct thread_monitor_entry *entry)
{
   18fe4:	b580      	push	{r7, lr}
   18fe6:	b084      	sub	sp, #16
   18fe8:	af00      	add	r7, sp, #0
   18fea:	6078      	str	r0, [r7, #4]
	bool allow_to_sleep = true;
   18fec:	2301      	movs	r3, #1
   18fee:	73fb      	strb	r3, [r7, #15]

	if (rpc_event_cnt != entry->cnt) {
   18ff0:	687b      	ldr	r3, [r7, #4]
   18ff2:	685a      	ldr	r2, [r3, #4]
   18ff4:	4b06      	ldr	r3, [pc, #24]	; (19010 <can_thread_sleep+0x2c>)
   18ff6:	681b      	ldr	r3, [r3, #0]
   18ff8:	429a      	cmp	r2, r3
   18ffa:	d004      	beq.n	19006 <can_thread_sleep+0x22>
		thread_monitor_entry_update(entry);
   18ffc:	6878      	ldr	r0, [r7, #4]
   18ffe:	f7ff ffe1 	bl	18fc4 <thread_monitor_entry_update>
		allow_to_sleep = false;
   19002:	2300      	movs	r3, #0
   19004:	73fb      	strb	r3, [r7, #15]
	}

	return allow_to_sleep;
   19006:	7bfb      	ldrb	r3, [r7, #15]
}
   19008:	4618      	mov	r0, r3
   1900a:	3710      	adds	r7, #16
   1900c:	46bd      	mov	sp, r7
   1900e:	bd80      	pop	{r7, pc}
   19010:	20014e40 	.word	0x20014e40

00019014 <sleeping_thread_add>:

/* Add thread to the sleeping threads list. Will return information whether
 * the thread was allowed to sleep or not.
 */
static bool sleeping_thread_add(struct sleeping_thread *thread)
{
   19014:	b580      	push	{r7, lr}
   19016:	b088      	sub	sp, #32
   19018:	af00      	add	r7, sp, #0
   1901a:	6078      	str	r0, [r7, #4]
	bool allow_to_sleep = false;
   1901c:	2300      	movs	r3, #0
   1901e:	77fb      	strb	r3, [r7, #31]
	__asm__ volatile(
   19020:	f04f 0320 	mov.w	r3, #32
   19024:	f3ef 8211 	mrs	r2, BASEPRI
   19028:	f383 8811 	msr	BASEPRI, r3
   1902c:	f3bf 8f6f 	isb	sy
   19030:	613a      	str	r2, [r7, #16]
   19032:	60fb      	str	r3, [r7, #12]
	return key;
   19034:	693b      	ldr	r3, [r7, #16]
	struct thread_monitor_entry *entry;

	uint32_t key = irq_lock();
   19036:	61bb      	str	r3, [r7, #24]

	entry = thread_monitor_entry_get(k_current_get());
   19038:	f00d fca5 	bl	26986 <k_current_get>
   1903c:	4603      	mov	r3, r0
   1903e:	4618      	mov	r0, r3
   19040:	f7ff ff76 	bl	18f30 <thread_monitor_entry_get>
   19044:	6178      	str	r0, [r7, #20]

	if (can_thread_sleep(entry)) {
   19046:	6978      	ldr	r0, [r7, #20]
   19048:	f7ff ffcc 	bl	18fe4 <can_thread_sleep>
   1904c:	4603      	mov	r3, r0
   1904e:	2b00      	cmp	r3, #0
   19050:	d006      	beq.n	19060 <sleeping_thread_add+0x4c>
		allow_to_sleep = true;
   19052:	2301      	movs	r3, #1
   19054:	77fb      	strb	r3, [r7, #31]
		sys_slist_append(&sleeping_threads, &thread->node);
   19056:	687b      	ldr	r3, [r7, #4]
   19058:	4619      	mov	r1, r3
   1905a:	4808      	ldr	r0, [pc, #32]	; (1907c <sleeping_thread_add+0x68>)
   1905c:	f00d f963 	bl	26326 <sys_slist_append>
   19060:	69bb      	ldr	r3, [r7, #24]
   19062:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
   19064:	68bb      	ldr	r3, [r7, #8]
   19066:	f383 8811 	msr	BASEPRI, r3
   1906a:	f3bf 8f6f 	isb	sy
}
   1906e:	bf00      	nop
	}

	irq_unlock(key);

	return allow_to_sleep;
   19070:	7ffb      	ldrb	r3, [r7, #31]
}
   19072:	4618      	mov	r0, r3
   19074:	3720      	adds	r7, #32
   19076:	46bd      	mov	sp, r7
   19078:	bd80      	pop	{r7, pc}
   1907a:	bf00      	nop
   1907c:	20014e38 	.word	0x20014e38

00019080 <sleeping_thread_remove>:

/* Remove a thread form the sleeping threads list. */
static void sleeping_thread_remove(struct sleeping_thread *thread)
{
   19080:	b580      	push	{r7, lr}
   19082:	b088      	sub	sp, #32
   19084:	af00      	add	r7, sp, #0
   19086:	6078      	str	r0, [r7, #4]
	__asm__ volatile(
   19088:	f04f 0320 	mov.w	r3, #32
   1908c:	f3ef 8211 	mrs	r2, BASEPRI
   19090:	f383 8811 	msr	BASEPRI, r3
   19094:	f3bf 8f6f 	isb	sy
   19098:	613a      	str	r2, [r7, #16]
   1909a:	60fb      	str	r3, [r7, #12]
	return key;
   1909c:	693b      	ldr	r3, [r7, #16]
	struct thread_monitor_entry *entry;

	uint32_t key = irq_lock();
   1909e:	61fb      	str	r3, [r7, #28]

	sys_slist_find_and_remove(&sleeping_threads, &thread->node);
   190a0:	687b      	ldr	r3, [r7, #4]
   190a2:	4619      	mov	r1, r3
   190a4:	480c      	ldr	r0, [pc, #48]	; (190d8 <sleeping_thread_remove+0x58>)
   190a6:	f00d f9a2 	bl	263ee <sys_slist_find_and_remove>

	entry = thread_monitor_entry_get(k_current_get());
   190aa:	f00d fc6c 	bl	26986 <k_current_get>
   190ae:	4603      	mov	r3, r0
   190b0:	4618      	mov	r0, r3
   190b2:	f7ff ff3d 	bl	18f30 <thread_monitor_entry_get>
   190b6:	61b8      	str	r0, [r7, #24]
	thread_monitor_entry_update(entry);
   190b8:	69b8      	ldr	r0, [r7, #24]
   190ba:	f7ff ff83 	bl	18fc4 <thread_monitor_entry_update>
   190be:	69fb      	ldr	r3, [r7, #28]
   190c0:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   190c2:	697b      	ldr	r3, [r7, #20]
   190c4:	f383 8811 	msr	BASEPRI, r3
   190c8:	f3bf 8f6f 	isb	sy
}
   190cc:	bf00      	nop

	irq_unlock(key);
}
   190ce:	bf00      	nop
   190d0:	3720      	adds	r7, #32
   190d2:	46bd      	mov	sp, r7
   190d4:	bd80      	pop	{r7, pc}
   190d6:	bf00      	nop
   190d8:	20014e38 	.word	0x20014e38

000190dc <nrf_modem_os_errno_set>:

	return 0;
}

void nrf_modem_os_errno_set(int err_code)
{
   190dc:	b580      	push	{r7, lr}
   190de:	b086      	sub	sp, #24
   190e0:	af00      	add	r7, sp, #0
   190e2:	6078      	str	r0, [r7, #4]
   190e4:	687b      	ldr	r3, [r7, #4]
   190e6:	3b01      	subs	r3, #1
   190e8:	2b80      	cmp	r3, #128	; 0x80
   190ea:	f200 81ed 	bhi.w	194c8 <nrf_modem_os_errno_set+0x3ec>
   190ee:	a201      	add	r2, pc, #4	; (adr r2, 190f4 <nrf_modem_os_errno_set+0x18>)
   190f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   190f4:	000192f9 	.word	0x000192f9
   190f8:	00019305 	.word	0x00019305
   190fc:	000194c9 	.word	0x000194c9
   19100:	000194c9 	.word	0x000194c9
   19104:	00019311 	.word	0x00019311
   19108:	000194c9 	.word	0x000194c9
   1910c:	000194c9 	.word	0x000194c9
   19110:	0001931d 	.word	0x0001931d
   19114:	00019329 	.word	0x00019329
   19118:	000194c9 	.word	0x000194c9
   1911c:	000194c9 	.word	0x000194c9
   19120:	00019335 	.word	0x00019335
   19124:	00019341 	.word	0x00019341
   19128:	0001934d 	.word	0x0001934d
   1912c:	000194c9 	.word	0x000194c9
   19130:	000194c9 	.word	0x000194c9
   19134:	000194c9 	.word	0x000194c9
   19138:	000194c9 	.word	0x000194c9
   1913c:	000194c9 	.word	0x000194c9
   19140:	000194c9 	.word	0x000194c9
   19144:	000194c9 	.word	0x000194c9
   19148:	00019359 	.word	0x00019359
   1914c:	000194c9 	.word	0x000194c9
   19150:	00019365 	.word	0x00019365
   19154:	000194c9 	.word	0x000194c9
   19158:	000194c9 	.word	0x000194c9
   1915c:	000194c9 	.word	0x000194c9
   19160:	000194c9 	.word	0x000194c9
   19164:	000194c9 	.word	0x000194c9
   19168:	000194c9 	.word	0x000194c9
   1916c:	000194c9 	.word	0x000194c9
   19170:	000194c9 	.word	0x000194c9
   19174:	000194c9 	.word	0x000194c9
   19178:	000194c9 	.word	0x000194c9
   1917c:	00019371 	.word	0x00019371
   19180:	000194c9 	.word	0x000194c9
   19184:	0001937d 	.word	0x0001937d
   19188:	000194c9 	.word	0x000194c9
   1918c:	000194c9 	.word	0x000194c9
   19190:	000194b1 	.word	0x000194b1
   19194:	00019389 	.word	0x00019389
   19198:	00019395 	.word	0x00019395
   1919c:	000193a1 	.word	0x000193a1
   191a0:	000193ad 	.word	0x000193ad
   191a4:	000193b9 	.word	0x000193b9
   191a8:	000194c9 	.word	0x000194c9
   191ac:	000193c5 	.word	0x000193c5
   191b0:	000193d1 	.word	0x000193d1
   191b4:	000194c9 	.word	0x000194c9
   191b8:	000193dd 	.word	0x000193dd
   191bc:	000193e9 	.word	0x000193e9
   191c0:	000193f5 	.word	0x000193f5
   191c4:	000194bd 	.word	0x000194bd
   191c8:	00019401 	.word	0x00019401
   191cc:	000194c9 	.word	0x000194c9
   191d0:	0001940d 	.word	0x0001940d
   191d4:	00019419 	.word	0x00019419
   191d8:	000194c9 	.word	0x000194c9
   191dc:	000194c9 	.word	0x000194c9
   191e0:	00019425 	.word	0x00019425
   191e4:	00019431 	.word	0x00019431
   191e8:	000194c9 	.word	0x000194c9
   191ec:	000194c9 	.word	0x000194c9
   191f0:	000194c9 	.word	0x000194c9
   191f4:	000194c9 	.word	0x000194c9
   191f8:	000194c9 	.word	0x000194c9
   191fc:	000194c9 	.word	0x000194c9
   19200:	000194c9 	.word	0x000194c9
   19204:	000194c9 	.word	0x000194c9
   19208:	000194c9 	.word	0x000194c9
   1920c:	000194c9 	.word	0x000194c9
   19210:	000194c9 	.word	0x000194c9
   19214:	000194c9 	.word	0x000194c9
   19218:	000194c9 	.word	0x000194c9
   1921c:	000194c9 	.word	0x000194c9
   19220:	000194c9 	.word	0x000194c9
   19224:	000194c9 	.word	0x000194c9
   19228:	000194c9 	.word	0x000194c9
   1922c:	000194c9 	.word	0x000194c9
   19230:	000194c9 	.word	0x000194c9
   19234:	000194c9 	.word	0x000194c9
   19238:	000194c9 	.word	0x000194c9
   1923c:	000194c9 	.word	0x000194c9
   19240:	000194c9 	.word	0x000194c9
   19244:	000194c9 	.word	0x000194c9
   19248:	000194c9 	.word	0x000194c9
   1924c:	000194c9 	.word	0x000194c9
   19250:	000194c9 	.word	0x000194c9
   19254:	000194c9 	.word	0x000194c9
   19258:	000194c9 	.word	0x000194c9
   1925c:	000194c9 	.word	0x000194c9
   19260:	000194c9 	.word	0x000194c9
   19264:	000194c9 	.word	0x000194c9
   19268:	000194c9 	.word	0x000194c9
   1926c:	000194c9 	.word	0x000194c9
   19270:	000194c9 	.word	0x000194c9
   19274:	000194c9 	.word	0x000194c9
   19278:	000194c9 	.word	0x000194c9
   1927c:	000194c9 	.word	0x000194c9
   19280:	000194c9 	.word	0x000194c9
   19284:	000194c9 	.word	0x000194c9
   19288:	000194c9 	.word	0x000194c9
   1928c:	000194c9 	.word	0x000194c9
   19290:	000194c9 	.word	0x000194c9
   19294:	0001943d 	.word	0x0001943d
   19298:	000194c9 	.word	0x000194c9
   1929c:	000194c9 	.word	0x000194c9
   192a0:	000194c9 	.word	0x000194c9
   192a4:	000194c9 	.word	0x000194c9
   192a8:	000194c9 	.word	0x000194c9
   192ac:	000194c9 	.word	0x000194c9
   192b0:	00019449 	.word	0x00019449
   192b4:	000194c9 	.word	0x000194c9
   192b8:	00019461 	.word	0x00019461
   192bc:	00019455 	.word	0x00019455
   192c0:	000194c9 	.word	0x000194c9
   192c4:	000194c9 	.word	0x000194c9
   192c8:	000194c9 	.word	0x000194c9
   192cc:	000194c9 	.word	0x000194c9
   192d0:	000194c9 	.word	0x000194c9
   192d4:	000194c9 	.word	0x000194c9
   192d8:	000194c9 	.word	0x000194c9
   192dc:	000194c9 	.word	0x000194c9
   192e0:	000194c9 	.word	0x000194c9
   192e4:	0001946d 	.word	0x0001946d
   192e8:	00019479 	.word	0x00019479
   192ec:	00019487 	.word	0x00019487
   192f0:	00019495 	.word	0x00019495
   192f4:	000194a3 	.word	0x000194a3
	switch (err_code) {
	case NRF_EPERM:
		errno = EPERM;
   192f8:	f00d fb00 	bl	268fc <z_errno>
   192fc:	4603      	mov	r3, r0
   192fe:	2201      	movs	r2, #1
   19300:	601a      	str	r2, [r3, #0]
		break;
   19302:	e12f      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_ENOENT:
		errno = ENOENT;
   19304:	f00d fafa 	bl	268fc <z_errno>
   19308:	4603      	mov	r3, r0
   1930a:	2202      	movs	r2, #2
   1930c:	601a      	str	r2, [r3, #0]
		break;
   1930e:	e129      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EIO:
		errno = EIO;
   19310:	f00d faf4 	bl	268fc <z_errno>
   19314:	4603      	mov	r3, r0
   19316:	2205      	movs	r2, #5
   19318:	601a      	str	r2, [r3, #0]
		break;
   1931a:	e123      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_ENOEXEC:
		errno = ENOEXEC;
   1931c:	f00d faee 	bl	268fc <z_errno>
   19320:	4603      	mov	r3, r0
   19322:	2208      	movs	r2, #8
   19324:	601a      	str	r2, [r3, #0]
		break;
   19326:	e11d      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EBADF:
		errno = EBADF;
   19328:	f00d fae8 	bl	268fc <z_errno>
   1932c:	4603      	mov	r3, r0
   1932e:	2209      	movs	r2, #9
   19330:	601a      	str	r2, [r3, #0]
		break;
   19332:	e117      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_ENOMEM:
		errno = ENOMEM;
   19334:	f00d fae2 	bl	268fc <z_errno>
   19338:	4603      	mov	r3, r0
   1933a:	220c      	movs	r2, #12
   1933c:	601a      	str	r2, [r3, #0]
		break;
   1933e:	e111      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EACCES:
		errno = EACCES;
   19340:	f00d fadc 	bl	268fc <z_errno>
   19344:	4603      	mov	r3, r0
   19346:	220d      	movs	r2, #13
   19348:	601a      	str	r2, [r3, #0]
		break;
   1934a:	e10b      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EFAULT:
		errno = EFAULT;
   1934c:	f00d fad6 	bl	268fc <z_errno>
   19350:	4603      	mov	r3, r0
   19352:	220e      	movs	r2, #14
   19354:	601a      	str	r2, [r3, #0]
		break;
   19356:	e105      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EINVAL:
		errno = EINVAL;
   19358:	f00d fad0 	bl	268fc <z_errno>
   1935c:	4603      	mov	r3, r0
   1935e:	2216      	movs	r2, #22
   19360:	601a      	str	r2, [r3, #0]
		break;
   19362:	e0ff      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EMFILE:
		errno = EMFILE;
   19364:	f00d faca 	bl	268fc <z_errno>
   19368:	4603      	mov	r3, r0
   1936a:	2218      	movs	r2, #24
   1936c:	601a      	str	r2, [r3, #0]
		break;
   1936e:	e0f9      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EAGAIN:
		errno = EAGAIN;
   19370:	f00d fac4 	bl	268fc <z_errno>
   19374:	4603      	mov	r3, r0
   19376:	220b      	movs	r2, #11
   19378:	601a      	str	r2, [r3, #0]
		break;
   1937a:	e0f3      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EDOM:
		errno = EDOM;
   1937c:	f00d fabe 	bl	268fc <z_errno>
   19380:	4603      	mov	r3, r0
   19382:	2221      	movs	r2, #33	; 0x21
   19384:	601a      	str	r2, [r3, #0]
		break;
   19386:	e0ed      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EPROTOTYPE:
		errno = EPROTOTYPE;
   19388:	f00d fab8 	bl	268fc <z_errno>
   1938c:	4603      	mov	r3, r0
   1938e:	226b      	movs	r2, #107	; 0x6b
   19390:	601a      	str	r2, [r3, #0]
		break;
   19392:	e0e7      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_ENOPROTOOPT:
		errno = ENOPROTOOPT;
   19394:	f00d fab2 	bl	268fc <z_errno>
   19398:	4603      	mov	r3, r0
   1939a:	226d      	movs	r2, #109	; 0x6d
   1939c:	601a      	str	r2, [r3, #0]
		break;
   1939e:	e0e1      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EPROTONOSUPPORT:
		errno = EPROTONOSUPPORT;
   193a0:	f00d faac 	bl	268fc <z_errno>
   193a4:	4603      	mov	r3, r0
   193a6:	227b      	movs	r2, #123	; 0x7b
   193a8:	601a      	str	r2, [r3, #0]
		break;
   193aa:	e0db      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_ESOCKTNOSUPPORT:
		errno = ESOCKTNOSUPPORT;
   193ac:	f00d faa6 	bl	268fc <z_errno>
   193b0:	4603      	mov	r3, r0
   193b2:	227c      	movs	r2, #124	; 0x7c
   193b4:	601a      	str	r2, [r3, #0]
		break;
   193b6:	e0d5      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EOPNOTSUPP:
		errno = EOPNOTSUPP;
   193b8:	f00d faa0 	bl	268fc <z_errno>
   193bc:	4603      	mov	r3, r0
   193be:	225f      	movs	r2, #95	; 0x5f
   193c0:	601a      	str	r2, [r3, #0]
		break;
   193c2:	e0cf      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EAFNOSUPPORT:
		errno = EAFNOSUPPORT;
   193c4:	f00d fa9a 	bl	268fc <z_errno>
   193c8:	4603      	mov	r3, r0
   193ca:	226a      	movs	r2, #106	; 0x6a
   193cc:	601a      	str	r2, [r3, #0]
		break;
   193ce:	e0c9      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EADDRINUSE:
		errno = EADDRINUSE;
   193d0:	f00d fa94 	bl	268fc <z_errno>
   193d4:	4603      	mov	r3, r0
   193d6:	2270      	movs	r2, #112	; 0x70
   193d8:	601a      	str	r2, [r3, #0]
		break;
   193da:	e0c3      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_ENETDOWN:
		errno = ENETDOWN;
   193dc:	f00d fa8e 	bl	268fc <z_errno>
   193e0:	4603      	mov	r3, r0
   193e2:	2273      	movs	r2, #115	; 0x73
   193e4:	601a      	str	r2, [r3, #0]
		break;
   193e6:	e0bd      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_ENETUNREACH:
		errno = ENETUNREACH;
   193e8:	f00d fa88 	bl	268fc <z_errno>
   193ec:	4603      	mov	r3, r0
   193ee:	2272      	movs	r2, #114	; 0x72
   193f0:	601a      	str	r2, [r3, #0]
		break;
   193f2:	e0b7      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_ENETRESET:
		errno = ENETRESET;
   193f4:	f00d fa82 	bl	268fc <z_errno>
   193f8:	4603      	mov	r3, r0
   193fa:	227e      	movs	r2, #126	; 0x7e
   193fc:	601a      	str	r2, [r3, #0]
		break;
   193fe:	e0b1      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_ECONNRESET:
		errno = ECONNRESET;
   19400:	f00d fa7c 	bl	268fc <z_errno>
   19404:	4603      	mov	r3, r0
   19406:	2268      	movs	r2, #104	; 0x68
   19408:	601a      	str	r2, [r3, #0]
		break;
   1940a:	e0ab      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EISCONN:
		errno = EISCONN;
   1940c:	f00d fa76 	bl	268fc <z_errno>
   19410:	4603      	mov	r3, r0
   19412:	227f      	movs	r2, #127	; 0x7f
   19414:	601a      	str	r2, [r3, #0]
		break;
   19416:	e0a5      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_ENOTCONN:
		errno = ENOTCONN;
   19418:	f00d fa70 	bl	268fc <z_errno>
   1941c:	4603      	mov	r3, r0
   1941e:	2280      	movs	r2, #128	; 0x80
   19420:	601a      	str	r2, [r3, #0]
		break;
   19422:	e09f      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_ETIMEDOUT:
		errno = ETIMEDOUT;
   19424:	f00d fa6a 	bl	268fc <z_errno>
   19428:	4603      	mov	r3, r0
   1942a:	2274      	movs	r2, #116	; 0x74
   1942c:	601a      	str	r2, [r3, #0]
		break;
   1942e:	e099      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_ECONNREFUSED:
		errno = ECONNREFUSED;
   19430:	f00d fa64 	bl	268fc <z_errno>
   19434:	4603      	mov	r3, r0
   19436:	226f      	movs	r2, #111	; 0x6f
   19438:	601a      	str	r2, [r3, #0]
		break;
   1943a:	e093      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_ENOBUFS:
		errno = ENOBUFS;
   1943c:	f00d fa5e 	bl	268fc <z_errno>
   19440:	4603      	mov	r3, r0
   19442:	2269      	movs	r2, #105	; 0x69
   19444:	601a      	str	r2, [r3, #0]
		break;
   19446:	e08d      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EHOSTDOWN:
		errno = EHOSTDOWN;
   19448:	f00d fa58 	bl	268fc <z_errno>
   1944c:	4603      	mov	r3, r0
   1944e:	2275      	movs	r2, #117	; 0x75
   19450:	601a      	str	r2, [r3, #0]
		break;
   19452:	e087      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EINPROGRESS:
		errno = EINPROGRESS;
   19454:	f00d fa52 	bl	268fc <z_errno>
   19458:	4603      	mov	r3, r0
   1945a:	2277      	movs	r2, #119	; 0x77
   1945c:	601a      	str	r2, [r3, #0]
		break;
   1945e:	e081      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EALREADY:
		errno = EALREADY;
   19460:	f00d fa4c 	bl	268fc <z_errno>
   19464:	4603      	mov	r3, r0
   19466:	2278      	movs	r2, #120	; 0x78
   19468:	601a      	str	r2, [r3, #0]
		break;
   1946a:	e07b      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_ECANCELED:
		errno = ECANCELED;
   1946c:	f00d fa46 	bl	268fc <z_errno>
   19470:	4603      	mov	r3, r0
   19472:	228c      	movs	r2, #140	; 0x8c
   19474:	601a      	str	r2, [r3, #0]
		break;
   19476:	e075      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_ENOKEY:
		errno = ENOKEY;
   19478:	f00d fa40 	bl	268fc <z_errno>
   1947c:	4603      	mov	r3, r0
   1947e:	f240 72d1 	movw	r2, #2001	; 0x7d1
   19482:	601a      	str	r2, [r3, #0]
		break;
   19484:	e06e      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EKEYEXPIRED:
		errno = EKEYEXPIRED;
   19486:	f00d fa39 	bl	268fc <z_errno>
   1948a:	4603      	mov	r3, r0
   1948c:	f240 72d2 	movw	r2, #2002	; 0x7d2
   19490:	601a      	str	r2, [r3, #0]
		break;
   19492:	e067      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EKEYREVOKED:
		errno = EKEYREVOKED;
   19494:	f00d fa32 	bl	268fc <z_errno>
   19498:	4603      	mov	r3, r0
   1949a:	f240 72d3 	movw	r2, #2003	; 0x7d3
   1949e:	601a      	str	r2, [r3, #0]
		break;
   194a0:	e060      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EKEYREJECTED:
		errno = EKEYREJECTED;
   194a2:	f00d fa2b 	bl	268fc <z_errno>
   194a6:	4603      	mov	r3, r0
   194a8:	f240 72d4 	movw	r2, #2004	; 0x7d4
   194ac:	601a      	str	r2, [r3, #0]
		break;
   194ae:	e059      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_EMSGSIZE:
		errno = EMSGSIZE;
   194b0:	f00d fa24 	bl	268fc <z_errno>
   194b4:	4603      	mov	r3, r0
   194b6:	227a      	movs	r2, #122	; 0x7a
   194b8:	601a      	str	r2, [r3, #0]
		break;
   194ba:	e053      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	case NRF_ECONNABORTED:
		errno = ECONNABORTED;
   194bc:	f00d fa1e 	bl	268fc <z_errno>
   194c0:	4603      	mov	r3, r0
   194c2:	2271      	movs	r2, #113	; 0x71
   194c4:	601a      	str	r2, [r3, #0]
		break;
   194c6:	e04d      	b.n	19564 <nrf_modem_os_errno_set+0x488>
	default:
		/* Catch untranslated errnos.
		 * Log the untranslated errno and return a magic value
		 * to make sure this situation is clearly distinguishable.
		 */
		__ASSERT(false, "Untranslated errno %d set by nrf_modem_lib!", err_code);
   194c8:	f240 1369 	movw	r3, #361	; 0x169
   194cc:	4a27      	ldr	r2, [pc, #156]	; (1956c <nrf_modem_os_errno_set+0x490>)
   194ce:	4928      	ldr	r1, [pc, #160]	; (19570 <nrf_modem_os_errno_set+0x494>)
   194d0:	4828      	ldr	r0, [pc, #160]	; (19574 <nrf_modem_os_errno_set+0x498>)
   194d2:	f007 fdc9 	bl	21068 <printk>
   194d6:	6879      	ldr	r1, [r7, #4]
   194d8:	4827      	ldr	r0, [pc, #156]	; (19578 <nrf_modem_os_errno_set+0x49c>)
   194da:	f007 fdc5 	bl	21068 <printk>
   194de:	f240 1169 	movw	r1, #361	; 0x169
   194e2:	4822      	ldr	r0, [pc, #136]	; (1956c <nrf_modem_os_errno_set+0x490>)
   194e4:	f008 fe6d 	bl	221c2 <assert_post_action>
		LOG_ERR("Untranslated errno %d set by nrf_modem_lib!", err_code);
   194e8:	2303      	movs	r3, #3
   194ea:	2b00      	cmp	r3, #0
   194ec:	d033      	beq.n	19556 <nrf_modem_os_errno_set+0x47a>
   194ee:	f00c ffa3 	bl	26438 <k_is_user_context>
   194f2:	4603      	mov	r3, r0
   194f4:	75fb      	strb	r3, [r7, #23]
   194f6:	2300      	movs	r3, #0
   194f8:	613b      	str	r3, [r7, #16]
   194fa:	2303      	movs	r3, #3
   194fc:	2b00      	cmp	r3, #0
   194fe:	d007      	beq.n	19510 <nrf_modem_os_errno_set+0x434>
   19500:	4b1e      	ldr	r3, [pc, #120]	; (1957c <nrf_modem_os_errno_set+0x4a0>)
   19502:	681b      	ldr	r3, [r3, #0]
   19504:	4618      	mov	r0, r3
   19506:	f7ff fd03 	bl	18f10 <log_const_source_id>
   1950a:	4603      	mov	r3, r0
   1950c:	b29b      	uxth	r3, r3
   1950e:	e000      	b.n	19512 <nrf_modem_os_errno_set+0x436>
   19510:	2300      	movs	r3, #0
   19512:	82bb      	strh	r3, [r7, #20]
   19514:	7b3b      	ldrb	r3, [r7, #12]
   19516:	2201      	movs	r2, #1
   19518:	f362 0302 	bfi	r3, r2, #0, #3
   1951c:	733b      	strb	r3, [r7, #12]
   1951e:	7b3b      	ldrb	r3, [r7, #12]
   19520:	f36f 03c5 	bfc	r3, #3, #3
   19524:	733b      	strb	r3, [r7, #12]
   19526:	8abb      	ldrh	r3, [r7, #20]
   19528:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1952c:	b29a      	uxth	r2, r3
   1952e:	89bb      	ldrh	r3, [r7, #12]
   19530:	f362 138f 	bfi	r3, r2, #6, #10
   19534:	81bb      	strh	r3, [r7, #12]
   19536:	7dfb      	ldrb	r3, [r7, #23]
   19538:	2b00      	cmp	r3, #0
   1953a:	d005      	beq.n	19548 <nrf_modem_os_errno_set+0x46c>
   1953c:	687a      	ldr	r2, [r7, #4]
   1953e:	4910      	ldr	r1, [pc, #64]	; (19580 <nrf_modem_os_errno_set+0x4a4>)
   19540:	89b8      	ldrh	r0, [r7, #12]
   19542:	f7f9 fe05 	bl	13150 <log_from_user>
   19546:	e007      	b.n	19558 <nrf_modem_os_errno_set+0x47c>
   19548:	687b      	ldr	r3, [r7, #4]
   1954a:	89ba      	ldrh	r2, [r7, #12]
   1954c:	4619      	mov	r1, r3
   1954e:	480c      	ldr	r0, [pc, #48]	; (19580 <nrf_modem_os_errno_set+0x4a4>)
   19550:	f009 faed 	bl	22b2e <log_1>
   19554:	e000      	b.n	19558 <nrf_modem_os_errno_set+0x47c>
   19556:	bf00      	nop
		errno = 0xBAADBAAD;
   19558:	f00d f9d0 	bl	268fc <z_errno>
   1955c:	4603      	mov	r3, r0
   1955e:	4a09      	ldr	r2, [pc, #36]	; (19584 <nrf_modem_os_errno_set+0x4a8>)
   19560:	601a      	str	r2, [r3, #0]
		break;
   19562:	bf00      	nop
	}
}
   19564:	bf00      	nop
   19566:	3718      	adds	r7, #24
   19568:	46bd      	mov	sp, r7
   1956a:	bd80      	pop	{r7, pc}
   1956c:	0002b01c 	.word	0x0002b01c
   19570:	0002b050 	.word	0x0002b050
   19574:	0002b054 	.word	0x0002b054
   19578:	0002b074 	.word	0x0002b074
   1957c:	2001454c 	.word	0x2001454c
   19580:	0002b0a4 	.word	0x0002b0a4
   19584:	baadbaad 	.word	0xbaadbaad

00019588 <nrf_modem_os_sem_init>:
#define NRF_MODEM_OS_SEM_MAX 2
static struct k_sem nrf_modem_os_sems[NRF_MODEM_OS_SEM_MAX];

int nrf_modem_os_sem_init(void **sem,
	unsigned int initial_count, unsigned int limit)
{
   19588:	b580      	push	{r7, lr}
   1958a:	b084      	sub	sp, #16
   1958c:	af00      	add	r7, sp, #0
   1958e:	60f8      	str	r0, [r7, #12]
   19590:	60b9      	str	r1, [r7, #8]
   19592:	607a      	str	r2, [r7, #4]
	static uint8_t used;

	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   19594:	68fb      	ldr	r3, [r7, #12]
   19596:	681b      	ldr	r3, [r3, #0]
   19598:	2b00      	cmp	r3, #0
   1959a:	d009      	beq.n	195b0 <nrf_modem_os_sem_init+0x28>
   1959c:	68fb      	ldr	r3, [r7, #12]
   1959e:	681b      	ldr	r3, [r3, #0]
   195a0:	4a19      	ldr	r2, [pc, #100]	; (19608 <nrf_modem_os_sem_init+0x80>)
   195a2:	4293      	cmp	r3, r2
   195a4:	d304      	bcc.n	195b0 <nrf_modem_os_sem_init+0x28>
   195a6:	68fb      	ldr	r3, [r7, #12]
   195a8:	681b      	ldr	r3, [r3, #0]
   195aa:	4a18      	ldr	r2, [pc, #96]	; (1960c <nrf_modem_os_sem_init+0x84>)
   195ac:	4293      	cmp	r3, r2
   195ae:	d31e      	bcc.n	195ee <nrf_modem_os_sem_init+0x66>
		goto recycle;
	}

	__ASSERT(used < NRF_MODEM_OS_SEM_MAX,
   195b0:	4b17      	ldr	r3, [pc, #92]	; (19610 <nrf_modem_os_sem_init+0x88>)
   195b2:	781b      	ldrb	r3, [r3, #0]
   195b4:	2b01      	cmp	r3, #1
   195b6:	d90e      	bls.n	195d6 <nrf_modem_os_sem_init+0x4e>
   195b8:	f240 1381 	movw	r3, #385	; 0x181
   195bc:	4a15      	ldr	r2, [pc, #84]	; (19614 <nrf_modem_os_sem_init+0x8c>)
   195be:	4916      	ldr	r1, [pc, #88]	; (19618 <nrf_modem_os_sem_init+0x90>)
   195c0:	4816      	ldr	r0, [pc, #88]	; (1961c <nrf_modem_os_sem_init+0x94>)
   195c2:	f007 fd51 	bl	21068 <printk>
   195c6:	4816      	ldr	r0, [pc, #88]	; (19620 <nrf_modem_os_sem_init+0x98>)
   195c8:	f007 fd4e 	bl	21068 <printk>
   195cc:	f240 1181 	movw	r1, #385	; 0x181
   195d0:	4810      	ldr	r0, [pc, #64]	; (19614 <nrf_modem_os_sem_init+0x8c>)
   195d2:	f008 fdf6 	bl	221c2 <assert_post_action>
		 "Not enough semaphores in glue layer");

	*sem = &nrf_modem_os_sems[used++];
   195d6:	4b0e      	ldr	r3, [pc, #56]	; (19610 <nrf_modem_os_sem_init+0x88>)
   195d8:	781b      	ldrb	r3, [r3, #0]
   195da:	1c5a      	adds	r2, r3, #1
   195dc:	b2d1      	uxtb	r1, r2
   195de:	4a0c      	ldr	r2, [pc, #48]	; (19610 <nrf_modem_os_sem_init+0x88>)
   195e0:	7011      	strb	r1, [r2, #0]
   195e2:	011b      	lsls	r3, r3, #4
   195e4:	4a08      	ldr	r2, [pc, #32]	; (19608 <nrf_modem_os_sem_init+0x80>)
   195e6:	441a      	add	r2, r3
   195e8:	68fb      	ldr	r3, [r7, #12]
   195ea:	601a      	str	r2, [r3, #0]
   195ec:	e000      	b.n	195f0 <nrf_modem_os_sem_init+0x68>
		goto recycle;
   195ee:	bf00      	nop

recycle:
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   195f0:	68fb      	ldr	r3, [r7, #12]
   195f2:	681b      	ldr	r3, [r3, #0]
   195f4:	687a      	ldr	r2, [r7, #4]
   195f6:	68b9      	ldr	r1, [r7, #8]
   195f8:	4618      	mov	r0, r3
   195fa:	f00d f9d4 	bl	269a6 <k_sem_init>
   195fe:	4603      	mov	r3, r0
}
   19600:	4618      	mov	r0, r3
   19602:	3710      	adds	r7, #16
   19604:	46bd      	mov	sp, r7
   19606:	bd80      	pop	{r7, pc}
   19608:	20014e44 	.word	0x20014e44
   1960c:	20014e64 	.word	0x20014e64
   19610:	200151dc 	.word	0x200151dc
   19614:	0002b01c 	.word	0x0002b01c
   19618:	0002b0d0 	.word	0x0002b0d0
   1961c:	0002b054 	.word	0x0002b054
   19620:	0002b0dc 	.word	0x0002b0dc

00019624 <rpc_proxy_irq_handler_body>:
{
	NVIC_ClearPendingIRQ(TRACE_IRQ);
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
{
   19624:	b580      	push	{r7, lr}
   19626:	b082      	sub	sp, #8
   19628:	af00      	add	r7, sp, #0
	atomic_inc(&rpc_event_cnt);
   1962a:	481b      	ldr	r0, [pc, #108]	; (19698 <rpc_proxy_irq_handler_body+0x74>)
   1962c:	f00c fdda 	bl	261e4 <atomic_inc>

	nrf_modem_os_application_irq_handler();
   19630:	f001 fb34 	bl	1ac9c <nrf_modem_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   19634:	4819      	ldr	r0, [pc, #100]	; (1969c <rpc_proxy_irq_handler_body+0x78>)
   19636:	f00c fe43 	bl	262c0 <sys_slist_peek_head>
   1963a:	4603      	mov	r3, r0
   1963c:	2b00      	cmp	r3, #0
   1963e:	d004      	beq.n	1964a <rpc_proxy_irq_handler_body+0x26>
   19640:	4816      	ldr	r0, [pc, #88]	; (1969c <rpc_proxy_irq_handler_body+0x78>)
   19642:	f00c fe3d 	bl	262c0 <sys_slist_peek_head>
   19646:	4603      	mov	r3, r0
   19648:	e000      	b.n	1964c <rpc_proxy_irq_handler_body+0x28>
   1964a:	2300      	movs	r3, #0
   1964c:	607b      	str	r3, [r7, #4]
   1964e:	e018      	b.n	19682 <rpc_proxy_irq_handler_body+0x5e>
		k_sem_give(&thread->sem);
   19650:	687b      	ldr	r3, [r7, #4]
   19652:	3304      	adds	r3, #4
   19654:	4618      	mov	r0, r3
   19656:	f00d f9c6 	bl	269e6 <k_sem_give>
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   1965a:	687b      	ldr	r3, [r7, #4]
   1965c:	2b00      	cmp	r3, #0
   1965e:	d00e      	beq.n	1967e <rpc_proxy_irq_handler_body+0x5a>
   19660:	687b      	ldr	r3, [r7, #4]
   19662:	4618      	mov	r0, r3
   19664:	f00c fe4e 	bl	26304 <sys_slist_peek_next>
   19668:	4603      	mov	r3, r0
   1966a:	2b00      	cmp	r3, #0
   1966c:	d005      	beq.n	1967a <rpc_proxy_irq_handler_body+0x56>
   1966e:	687b      	ldr	r3, [r7, #4]
   19670:	4618      	mov	r0, r3
   19672:	f00c fe47 	bl	26304 <sys_slist_peek_next>
   19676:	4603      	mov	r3, r0
   19678:	e002      	b.n	19680 <rpc_proxy_irq_handler_body+0x5c>
   1967a:	2300      	movs	r3, #0
   1967c:	e000      	b.n	19680 <rpc_proxy_irq_handler_body+0x5c>
   1967e:	2300      	movs	r3, #0
   19680:	607b      	str	r3, [r7, #4]
   19682:	687b      	ldr	r3, [r7, #4]
   19684:	2b00      	cmp	r3, #0
   19686:	d1e3      	bne.n	19650 <rpc_proxy_irq_handler_body+0x2c>
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   19688:	f7fc fb3e 	bl	15d08 <_arch_isr_direct_pm>
			  */
	return 1; /* We should check if scheduling decision should be made */
   1968c:	2301      	movs	r3, #1
}
   1968e:	4618      	mov	r0, r3
   19690:	3708      	adds	r7, #8
   19692:	46bd      	mov	sp, r7
   19694:	bd80      	pop	{r7, pc}
   19696:	bf00      	nop
   19698:	20014e40 	.word	0x20014e40
   1969c:	20014e38 	.word	0x20014e38

000196a0 <nrf_modem_os_alloc>:
	}
#endif
}

void *nrf_modem_os_alloc(size_t bytes)
{
   196a0:	b580      	push	{r7, lr}
   196a2:	b084      	sub	sp, #16
   196a4:	af00      	add	r7, sp, #0
   196a6:	6078      	str	r0, [r7, #4]
	void *addr = k_heap_alloc(&library_heap, bytes, K_NO_WAIT);
   196a8:	f04f 0200 	mov.w	r2, #0
   196ac:	f04f 0300 	mov.w	r3, #0
   196b0:	6879      	ldr	r1, [r7, #4]
   196b2:	4805      	ldr	r0, [pc, #20]	; (196c8 <nrf_modem_os_alloc+0x28>)
   196b4:	f00e f903 	bl	278be <k_heap_alloc>
   196b8:	60f8      	str	r0, [r7, #12]
	} else {
		heap_diag.failed_allocs++;
		LOG_WRN("alloc(%d) -> %p", bytes, addr);
	}
#endif
	return addr;
   196ba:	68f9      	ldr	r1, [r7, #12]
   196bc:	460b      	mov	r3, r1
}
   196be:	4618      	mov	r0, r3
   196c0:	3710      	adds	r7, #16
   196c2:	46bd      	mov	sp, r7
   196c4:	bd80      	pop	{r7, pc}
   196c6:	bf00      	nop
   196c8:	200145a4 	.word	0x200145a4

000196cc <nrf_modem_os_free>:

void nrf_modem_os_free(void *mem)
{
   196cc:	b580      	push	{r7, lr}
   196ce:	b082      	sub	sp, #8
   196d0:	af00      	add	r7, sp, #0
   196d2:	6078      	str	r0, [r7, #4]
	k_heap_free(&library_heap, mem);
   196d4:	6879      	ldr	r1, [r7, #4]
   196d6:	4803      	ldr	r0, [pc, #12]	; (196e4 <nrf_modem_os_free+0x18>)
   196d8:	f003 f89c 	bl	1c814 <k_heap_free>
#ifdef CONFIG_NRF_MODEM_LIB_DEBUG_ALLOC
	LOG_INF("free(%p)", mem);
#endif
}
   196dc:	bf00      	nop
   196de:	3708      	adds	r7, #8
   196e0:	46bd      	mov	sp, r7
   196e2:	bd80      	pop	{r7, pc}
   196e4:	200145a4 	.word	0x200145a4

000196e8 <nrf_modem_os_shm_tx_alloc>:

void *nrf_modem_os_shm_tx_alloc(size_t bytes)
{
   196e8:	b580      	push	{r7, lr}
   196ea:	b084      	sub	sp, #16
   196ec:	af00      	add	r7, sp, #0
   196ee:	6078      	str	r0, [r7, #4]
	void *addr = k_heap_alloc(&shmem_heap, bytes, K_NO_WAIT);
   196f0:	f04f 0200 	mov.w	r2, #0
   196f4:	f04f 0300 	mov.w	r3, #0
   196f8:	6879      	ldr	r1, [r7, #4]
   196fa:	4805      	ldr	r0, [pc, #20]	; (19710 <nrf_modem_os_shm_tx_alloc+0x28>)
   196fc:	f00e f8df 	bl	278be <k_heap_alloc>
   19700:	60f8      	str	r0, [r7, #12]
	} else {
		shmem_diag.failed_allocs++;
		LOG_WRN("shm_tx_alloc(%d) -> %p", bytes, addr);
	}
#endif
	return addr;
   19702:	68f9      	ldr	r1, [r7, #12]
   19704:	460b      	mov	r3, r1
}
   19706:	4618      	mov	r0, r3
   19708:	3710      	adds	r7, #16
   1970a:	46bd      	mov	sp, r7
   1970c:	bd80      	pop	{r7, pc}
   1970e:	bf00      	nop
   19710:	20014dc8 	.word	0x20014dc8

00019714 <nrf_modem_os_shm_tx_free>:

void nrf_modem_os_shm_tx_free(void *mem)
{
   19714:	b580      	push	{r7, lr}
   19716:	b082      	sub	sp, #8
   19718:	af00      	add	r7, sp, #0
   1971a:	6078      	str	r0, [r7, #4]
	k_heap_free(&shmem_heap, mem);
   1971c:	6879      	ldr	r1, [r7, #4]
   1971e:	4803      	ldr	r0, [pc, #12]	; (1972c <nrf_modem_os_shm_tx_free+0x18>)
   19720:	f003 f878 	bl	1c814 <k_heap_free>
#ifdef CONFIG_NRF_MODEM_LIB_DEBUG_SHM_TX_ALLOC
	LOG_INF("shm_tx_free(%p)", mem);
#endif
}
   19724:	bf00      	nop
   19726:	3708      	adds	r7, #8
   19728:	46bd      	mov	sp, r7
   1972a:	bd80      	pop	{r7, pc}
   1972c:	20014dc8 	.word	0x20014dc8

00019730 <nrf_modem_os_init>:
}
#endif

/* This function is called by nrf_modem_init() */
void nrf_modem_os_init(void)
{
   19730:	b580      	push	{r7, lr}
   19732:	af00      	add	r7, sp, #0
	sys_slist_init(&sleeping_threads);
   19734:	480f      	ldr	r0, [pc, #60]	; (19774 <nrf_modem_os_init+0x44>)
   19736:	f00c fd82 	bl	2623e <sys_slist_init>
	atomic_clear(&rpc_event_cnt);
   1973a:	480f      	ldr	r0, [pc, #60]	; (19778 <nrf_modem_os_init+0x48>)
   1973c:	f00c fd72 	bl	26224 <atomic_clear>

	read_task_create();
   19740:	f00d fa5c 	bl	26bfc <read_task_create>

	/* Configure and enable modem tracing over UART and RTT. */
	trace_uart_init();
   19744:	f00d fa66 	bl	26c14 <trace_uart_init>
	trace_rtt_init();
   19748:	f00d fa6a 	bl	26c20 <trace_rtt_init>
	trace_task_create();
   1974c:	f00d fa4a 	bl	26be4 <trace_task_create>

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   19750:	2204      	movs	r2, #4
   19752:	2100      	movs	r1, #0
   19754:	4809      	ldr	r0, [pc, #36]	; (1977c <nrf_modem_os_init+0x4c>)
   19756:	f00b f81e 	bl	24796 <memset>
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   1975a:	2204      	movs	r2, #4
   1975c:	2100      	movs	r1, #0
   1975e:	4808      	ldr	r0, [pc, #32]	; (19780 <nrf_modem_os_init+0x50>)
   19760:	f00b f819 	bl	24796 <memset>

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   19764:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   19768:	4906      	ldr	r1, [pc, #24]	; (19784 <nrf_modem_os_init+0x54>)
   1976a:	4807      	ldr	r0, [pc, #28]	; (19788 <nrf_modem_os_init+0x58>)
   1976c:	f00e f892 	bl	27894 <k_heap_init>
#ifdef CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIODIC
	k_work_init_delayable(&heap_task.work, diag_task);
	k_work_reschedule(&heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIOD_MS));
#endif
}
   19770:	bf00      	nop
   19772:	bd80      	pop	{r7, pc}
   19774:	20014e38 	.word	0x20014e38
   19778:	20014e40 	.word	0x20014e40
   1977c:	20014de4 	.word	0x20014de4
   19780:	20014de0 	.word	0x20014de0
   19784:	200104e8 	.word	0x200104e8
   19788:	20014dc8 	.word	0x20014dc8

0001978c <log_const_source_id>:
{
   1978c:	b480      	push	{r7}
   1978e:	b083      	sub	sp, #12
   19790:	af00      	add	r7, sp, #0
   19792:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   19794:	687b      	ldr	r3, [r7, #4]
   19796:	4a04      	ldr	r2, [pc, #16]	; (197a8 <log_const_source_id+0x1c>)
   19798:	1a9b      	subs	r3, r3, r2
   1979a:	08db      	lsrs	r3, r3, #3
}
   1979c:	4618      	mov	r0, r3
   1979e:	370c      	adds	r7, #12
   197a0:	46bd      	mov	sp, r7
   197a2:	bc80      	pop	{r7}
   197a4:	4770      	bx	lr
   197a6:	bf00      	nop
   197a8:	00029354 	.word	0x00029354

000197ac <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   197ac:	b580      	push	{r7, lr}
   197ae:	b088      	sub	sp, #32
   197b0:	af00      	add	r7, sp, #0
   197b2:	6078      	str	r0, [r7, #4]
   197b4:	6039      	str	r1, [r7, #0]
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();
   197b6:	f00d fa4b 	bl	26c50 <log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   197ba:	2303      	movs	r3, #3
   197bc:	2b00      	cmp	r3, #0
   197be:	d030      	beq.n	19822 <k_sys_fatal_error_handler+0x76>
   197c0:	f00d fa3f 	bl	26c42 <k_is_user_context>
   197c4:	4603      	mov	r3, r0
   197c6:	77fb      	strb	r3, [r7, #31]
   197c8:	2300      	movs	r3, #0
   197ca:	61bb      	str	r3, [r7, #24]
   197cc:	2303      	movs	r3, #3
   197ce:	2b00      	cmp	r3, #0
   197d0:	d007      	beq.n	197e2 <k_sys_fatal_error_handler+0x36>
   197d2:	4b16      	ldr	r3, [pc, #88]	; (1982c <k_sys_fatal_error_handler+0x80>)
   197d4:	681b      	ldr	r3, [r3, #0]
   197d6:	4618      	mov	r0, r3
   197d8:	f7ff ffd8 	bl	1978c <log_const_source_id>
   197dc:	4603      	mov	r3, r0
   197de:	b29b      	uxth	r3, r3
   197e0:	e000      	b.n	197e4 <k_sys_fatal_error_handler+0x38>
   197e2:	2300      	movs	r3, #0
   197e4:	83bb      	strh	r3, [r7, #28]
   197e6:	7d3b      	ldrb	r3, [r7, #20]
   197e8:	2201      	movs	r2, #1
   197ea:	f362 0302 	bfi	r3, r2, #0, #3
   197ee:	753b      	strb	r3, [r7, #20]
   197f0:	7d3b      	ldrb	r3, [r7, #20]
   197f2:	f36f 03c5 	bfc	r3, #3, #3
   197f6:	753b      	strb	r3, [r7, #20]
   197f8:	8bbb      	ldrh	r3, [r7, #28]
   197fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
   197fe:	b29a      	uxth	r2, r3
   19800:	8abb      	ldrh	r3, [r7, #20]
   19802:	f362 138f 	bfi	r3, r2, #6, #10
   19806:	82bb      	strh	r3, [r7, #20]
   19808:	7ffb      	ldrb	r3, [r7, #31]
   1980a:	2b00      	cmp	r3, #0
   1980c:	d004      	beq.n	19818 <k_sys_fatal_error_handler+0x6c>
   1980e:	4908      	ldr	r1, [pc, #32]	; (19830 <k_sys_fatal_error_handler+0x84>)
   19810:	8ab8      	ldrh	r0, [r7, #20]
   19812:	f7f9 fc9d 	bl	13150 <log_from_user>
   19816:	e005      	b.n	19824 <k_sys_fatal_error_handler+0x78>
   19818:	8ab9      	ldrh	r1, [r7, #20]
   1981a:	4805      	ldr	r0, [pc, #20]	; (19830 <k_sys_fatal_error_handler+0x84>)
   1981c:	f009 f972 	bl	22b04 <log_0>
   19820:	e000      	b.n	19824 <k_sys_fatal_error_handler+0x78>
   19822:	bf00      	nop
		sys_arch_reboot(0);
   19824:	2000      	movs	r0, #0
   19826:	f00a fded 	bl	24404 <sys_arch_reboot>
   1982a:	bf00      	nop
   1982c:	20014550 	.word	0x20014550
   19830:	0002b2bc 	.word	0x0002b2bc

00019834 <fw_info_ext_api_check>:
 *
 * @return pointer if valid, NULL if not.
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
   19834:	b580      	push	{r7, lr}
   19836:	b086      	sub	sp, #24
   19838:	af00      	add	r7, sp, #0
   1983a:	6078      	str	r0, [r7, #4]
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   1983c:	4a0c      	ldr	r2, [pc, #48]	; (19870 <fw_info_ext_api_check+0x3c>)
   1983e:	f107 0308 	add.w	r3, r7, #8
   19842:	ca07      	ldmia	r2, {r0, r1, r2}
   19844:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
   19848:	687b      	ldr	r3, [r7, #4]
   1984a:	617b      	str	r3, [r7, #20]
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   1984c:	697b      	ldr	r3, [r7, #20]
   1984e:	f107 0108 	add.w	r1, r7, #8
   19852:	220c      	movs	r2, #12
   19854:	4618      	mov	r0, r3
   19856:	f00a ff1d 	bl	24694 <memcmp>
   1985a:	4603      	mov	r3, r0
   1985c:	2b00      	cmp	r3, #0
   1985e:	d101      	bne.n	19864 <fw_info_ext_api_check+0x30>
		== 0) {
		return ext_api;
   19860:	697b      	ldr	r3, [r7, #20]
   19862:	e000      	b.n	19866 <fw_info_ext_api_check+0x32>
	}
	return NULL;
   19864:	2300      	movs	r3, #0
}
   19866:	4618      	mov	r0, r3
   19868:	3718      	adds	r7, #24
   1986a:	46bd      	mov	sp, r7
   1986c:	bd80      	pop	{r7, pc}
   1986e:	bf00      	nop
   19870:	0002b2d0 	.word	0x0002b2d0

00019874 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   19874:	b580      	push	{r7, lr}
   19876:	b084      	sub	sp, #16
   19878:	af00      	add	r7, sp, #0
   1987a:	6078      	str	r0, [r7, #4]
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);
   1987c:	4820      	ldr	r0, [pc, #128]	; (19900 <check_ext_api_requests+0x8c>)
   1987e:	f00d fa1f 	bl	26cc0 <skip_ext_apis>
   19882:	60f8      	str	r0, [r7, #12]

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   19884:	2300      	movs	r3, #0
   19886:	60bb      	str	r3, [r7, #8]
   19888:	e02f      	b.n	198ea <check_ext_api_requests+0x76>
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   1988a:	68fb      	ldr	r3, [r7, #12]
   1988c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1988e:	681b      	ldr	r3, [r3, #0]
   19890:	4618      	mov	r0, r3
   19892:	f7ff ffcf 	bl	19834 <fw_info_ext_api_check>
   19896:	4603      	mov	r3, r0
   19898:	2b00      	cmp	r3, #0
   1989a:	d009      	beq.n	198b0 <check_ext_api_requests+0x3c>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   1989c:	68fb      	ldr	r3, [r7, #12]
   1989e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   198a0:	681b      	ldr	r3, [r3, #0]
   198a2:	68f9      	ldr	r1, [r7, #12]
   198a4:	4618      	mov	r0, r3
   198a6:	f00d f9d9 	bl	26c5c <ext_api_satisfies_req>
   198aa:	4603      	mov	r3, r0
   198ac:	2b00      	cmp	r3, #0
   198ae:	d114      	bne.n	198da <check_ext_api_requests+0x66>
						ext_api_req)) {
			/* EXT_API requirement met. */
		} else if (ext_api_req->required) {
   198b0:	68fb      	ldr	r3, [r7, #12]
   198b2:	6a1b      	ldr	r3, [r3, #32]
   198b4:	2b00      	cmp	r3, #0
   198b6:	d009      	beq.n	198cc <check_ext_api_requests+0x58>
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   198b8:	4812      	ldr	r0, [pc, #72]	; (19904 <check_ext_api_requests+0x90>)
   198ba:	f007 fbd5 	bl	21068 <printk>
			k_panic();
   198be:	4040      	eors	r0, r0
   198c0:	f380 8811 	msr	BASEPRI, r0
   198c4:	f04f 0004 	mov.w	r0, #4
   198c8:	df02      	svc	2
   198ca:	e006      	b.n	198da <check_ext_api_requests+0x66>
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   198cc:	480e      	ldr	r0, [pc, #56]	; (19908 <check_ext_api_requests+0x94>)
   198ce:	f007 fbcb 	bl	21068 <printk>
				"fulfilled.\r\n");
			*ext_api_req->ext_api = NULL;
   198d2:	68fb      	ldr	r3, [r7, #12]
   198d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   198d6:	2200      	movs	r2, #0
   198d8:	601a      	str	r2, [r3, #0]
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
   198da:	68fa      	ldr	r2, [r7, #12]
   198dc:	68fb      	ldr	r3, [r7, #12]
   198de:	68db      	ldr	r3, [r3, #12]
   198e0:	4413      	add	r3, r2
   198e2:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   198e4:	68bb      	ldr	r3, [r7, #8]
   198e6:	3301      	adds	r3, #1
   198e8:	60bb      	str	r3, [r7, #8]
   198ea:	4b05      	ldr	r3, [pc, #20]	; (19900 <check_ext_api_requests+0x8c>)
   198ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   198ee:	68ba      	ldr	r2, [r7, #8]
   198f0:	429a      	cmp	r2, r3
   198f2:	d3ca      	bcc.n	1988a <check_ext_api_requests+0x16>
	}

	return 0;
   198f4:	2300      	movs	r3, #0
}
   198f6:	4618      	mov	r0, r3
   198f8:	3710      	adds	r7, #16
   198fa:	46bd      	mov	sp, r7
   198fc:	bd80      	pop	{r7, pc}
   198fe:	bf00      	nop
   19900:	00010200 	.word	0x00010200
   19904:	0002b2e8 	.word	0x0002b2e8
   19908:	0002b314 	.word	0x0002b314

0001990c <SystemCoreClockUpdate>:
    static bool uicr_HFXOSRC_erased(void);
    static bool uicr_HFXOCNT_erased(void);
#endif

void SystemCoreClockUpdate(void)
{
   1990c:	b480      	push	{r7}
   1990e:	af00      	add	r7, sp, #0
    SystemCoreClock = __SYSTEM_CLOCK;
   19910:	4b03      	ldr	r3, [pc, #12]	; (19920 <SystemCoreClockUpdate+0x14>)
   19912:	4a04      	ldr	r2, [pc, #16]	; (19924 <SystemCoreClockUpdate+0x18>)
   19914:	601a      	str	r2, [r3, #0]
}
   19916:	bf00      	nop
   19918:	46bd      	mov	sp, r7
   1991a:	bc80      	pop	{r7}
   1991c:	4770      	bx	lr
   1991e:	bf00      	nop
   19920:	20014554 	.word	0x20014554
   19924:	03d09000 	.word	0x03d09000

00019928 <nrfx_error_string_get>:
{
	k_busy_wait(usec_to_wait);
}

char const *nrfx_error_string_get(nrfx_err_t code)
{
   19928:	b480      	push	{r7}
   1992a:	b083      	sub	sp, #12
   1992c:	af00      	add	r7, sp, #0
   1992e:	6078      	str	r0, [r7, #4]
	#define NRFX_ERROR_STRING_CASE(code)  case code: return #code
	switch (code) {
   19930:	687b      	ldr	r3, [r7, #4]
   19932:	4a33      	ldr	r2, [pc, #204]	; (19a00 <nrfx_error_string_get+0xd8>)
   19934:	4293      	cmp	r3, r2
   19936:	d05a      	beq.n	199ee <nrfx_error_string_get+0xc6>
   19938:	687b      	ldr	r3, [r7, #4]
   1993a:	4a31      	ldr	r2, [pc, #196]	; (19a00 <nrfx_error_string_get+0xd8>)
   1993c:	4293      	cmp	r3, r2
   1993e:	d858      	bhi.n	199f2 <nrfx_error_string_get+0xca>
   19940:	687b      	ldr	r3, [r7, #4]
   19942:	4a30      	ldr	r2, [pc, #192]	; (19a04 <nrfx_error_string_get+0xdc>)
   19944:	4293      	cmp	r3, r2
   19946:	d050      	beq.n	199ea <nrfx_error_string_get+0xc2>
   19948:	687b      	ldr	r3, [r7, #4]
   1994a:	4a2e      	ldr	r2, [pc, #184]	; (19a04 <nrfx_error_string_get+0xdc>)
   1994c:	4293      	cmp	r3, r2
   1994e:	d850      	bhi.n	199f2 <nrfx_error_string_get+0xca>
   19950:	687b      	ldr	r3, [r7, #4]
   19952:	4a2d      	ldr	r2, [pc, #180]	; (19a08 <nrfx_error_string_get+0xe0>)
   19954:	4293      	cmp	r3, r2
   19956:	d227      	bcs.n	199a8 <nrfx_error_string_get+0x80>
   19958:	687b      	ldr	r3, [r7, #4]
   1995a:	4a2c      	ldr	r2, [pc, #176]	; (19a0c <nrfx_error_string_get+0xe4>)
   1995c:	4293      	cmp	r3, r2
   1995e:	d348      	bcc.n	199f2 <nrfx_error_string_get+0xca>
   19960:	687b      	ldr	r3, [r7, #4]
   19962:	f103 4374 	add.w	r3, r3, #4093640704	; 0xf4000000
   19966:	f503 03a6 	add.w	r3, r3, #5439488	; 0x530000
   1996a:	2b0c      	cmp	r3, #12
   1996c:	d841      	bhi.n	199f2 <nrfx_error_string_get+0xca>
   1996e:	a201      	add	r2, pc, #4	; (adr r2, 19974 <nrfx_error_string_get+0x4c>)
   19970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19974:	000199b3 	.word	0x000199b3
   19978:	000199b7 	.word	0x000199b7
   1997c:	000199bb 	.word	0x000199bb
   19980:	000199bf 	.word	0x000199bf
   19984:	000199c3 	.word	0x000199c3
   19988:	000199c7 	.word	0x000199c7
   1998c:	000199cb 	.word	0x000199cb
   19990:	000199cf 	.word	0x000199cf
   19994:	000199d3 	.word	0x000199d3
   19998:	000199d7 	.word	0x000199d7
   1999c:	000199db 	.word	0x000199db
   199a0:	000199df 	.word	0x000199df
   199a4:	000199e3 	.word	0x000199e3
   199a8:	687b      	ldr	r3, [r7, #4]
   199aa:	4a19      	ldr	r2, [pc, #100]	; (19a10 <nrfx_error_string_get+0xe8>)
   199ac:	4293      	cmp	r3, r2
   199ae:	d01a      	beq.n	199e6 <nrfx_error_string_get+0xbe>
   199b0:	e01f      	b.n	199f2 <nrfx_error_string_get+0xca>
		NRFX_ERROR_STRING_CASE(NRFX_SUCCESS);
   199b2:	4b18      	ldr	r3, [pc, #96]	; (19a14 <nrfx_error_string_get+0xec>)
   199b4:	e01e      	b.n	199f4 <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_INTERNAL);
   199b6:	4b18      	ldr	r3, [pc, #96]	; (19a18 <nrfx_error_string_get+0xf0>)
   199b8:	e01c      	b.n	199f4 <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_NO_MEM);
   199ba:	4b18      	ldr	r3, [pc, #96]	; (19a1c <nrfx_error_string_get+0xf4>)
   199bc:	e01a      	b.n	199f4 <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_NOT_SUPPORTED);
   199be:	4b18      	ldr	r3, [pc, #96]	; (19a20 <nrfx_error_string_get+0xf8>)
   199c0:	e018      	b.n	199f4 <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_INVALID_PARAM);
   199c2:	4b18      	ldr	r3, [pc, #96]	; (19a24 <nrfx_error_string_get+0xfc>)
   199c4:	e016      	b.n	199f4 <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_INVALID_STATE);
   199c6:	4b18      	ldr	r3, [pc, #96]	; (19a28 <nrfx_error_string_get+0x100>)
   199c8:	e014      	b.n	199f4 <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_INVALID_LENGTH);
   199ca:	4b18      	ldr	r3, [pc, #96]	; (19a2c <nrfx_error_string_get+0x104>)
   199cc:	e012      	b.n	199f4 <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_TIMEOUT);
   199ce:	4b18      	ldr	r3, [pc, #96]	; (19a30 <nrfx_error_string_get+0x108>)
   199d0:	e010      	b.n	199f4 <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_FORBIDDEN);
   199d2:	4b18      	ldr	r3, [pc, #96]	; (19a34 <nrfx_error_string_get+0x10c>)
   199d4:	e00e      	b.n	199f4 <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_NULL);
   199d6:	4b18      	ldr	r3, [pc, #96]	; (19a38 <nrfx_error_string_get+0x110>)
   199d8:	e00c      	b.n	199f4 <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_INVALID_ADDR);
   199da:	4b18      	ldr	r3, [pc, #96]	; (19a3c <nrfx_error_string_get+0x114>)
   199dc:	e00a      	b.n	199f4 <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_BUSY);
   199de:	4b18      	ldr	r3, [pc, #96]	; (19a40 <nrfx_error_string_get+0x118>)
   199e0:	e008      	b.n	199f4 <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_ALREADY_INITIALIZED);
   199e2:	4b18      	ldr	r3, [pc, #96]	; (19a44 <nrfx_error_string_get+0x11c>)
   199e4:	e006      	b.n	199f4 <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_DRV_TWI_ERR_OVERRUN);
   199e6:	4b18      	ldr	r3, [pc, #96]	; (19a48 <nrfx_error_string_get+0x120>)
   199e8:	e004      	b.n	199f4 <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_DRV_TWI_ERR_ANACK);
   199ea:	4b18      	ldr	r3, [pc, #96]	; (19a4c <nrfx_error_string_get+0x124>)
   199ec:	e002      	b.n	199f4 <nrfx_error_string_get+0xcc>
		NRFX_ERROR_STRING_CASE(NRFX_ERROR_DRV_TWI_ERR_DNACK);
   199ee:	4b18      	ldr	r3, [pc, #96]	; (19a50 <nrfx_error_string_get+0x128>)
   199f0:	e000      	b.n	199f4 <nrfx_error_string_get+0xcc>
		default: return "unknown";
   199f2:	4b18      	ldr	r3, [pc, #96]	; (19a54 <nrfx_error_string_get+0x12c>)
	}
}
   199f4:	4618      	mov	r0, r3
   199f6:	370c      	adds	r7, #12
   199f8:	46bd      	mov	sp, r7
   199fa:	bc80      	pop	{r7}
   199fc:	4770      	bx	lr
   199fe:	bf00      	nop
   19a00:	0bae0002 	.word	0x0bae0002
   19a04:	0bae0001 	.word	0x0bae0001
   19a08:	0bad000d 	.word	0x0bad000d
   19a0c:	0bad0000 	.word	0x0bad0000
   19a10:	0bae0000 	.word	0x0bae0000
   19a14:	0002b348 	.word	0x0002b348
   19a18:	0002b358 	.word	0x0002b358
   19a1c:	0002b36c 	.word	0x0002b36c
   19a20:	0002b380 	.word	0x0002b380
   19a24:	0002b39c 	.word	0x0002b39c
   19a28:	0002b3b8 	.word	0x0002b3b8
   19a2c:	0002b3d4 	.word	0x0002b3d4
   19a30:	0002b3f0 	.word	0x0002b3f0
   19a34:	0002b404 	.word	0x0002b404
   19a38:	0002b41c 	.word	0x0002b41c
   19a3c:	0002b42c 	.word	0x0002b42c
   19a40:	0002b444 	.word	0x0002b444
   19a44:	0002b454 	.word	0x0002b454
   19a48:	0002b474 	.word	0x0002b474
   19a4c:	0002b494 	.word	0x0002b494
   19a50:	0002b4b4 	.word	0x0002b4b4
   19a54:	0002b4d4 	.word	0x0002b4d4

00019a58 <nrf_clock_is_running>:
{
   19a58:	b580      	push	{r7, lr}
   19a5a:	b084      	sub	sp, #16
   19a5c:	af00      	add	r7, sp, #0
   19a5e:	60f8      	str	r0, [r7, #12]
   19a60:	460b      	mov	r3, r1
   19a62:	607a      	str	r2, [r7, #4]
   19a64:	72fb      	strb	r3, [r7, #11]
    switch (domain)
   19a66:	7afb      	ldrb	r3, [r7, #11]
   19a68:	2b00      	cmp	r3, #0
   19a6a:	d002      	beq.n	19a72 <nrf_clock_is_running+0x1a>
   19a6c:	2b01      	cmp	r3, #1
   19a6e:	d015      	beq.n	19a9c <nrf_clock_is_running+0x44>
   19a70:	e029      	b.n	19ac6 <nrf_clock_is_running+0x6e>
            if (p_clk_src != NULL)
   19a72:	687b      	ldr	r3, [r7, #4]
   19a74:	2b00      	cmp	r3, #0
   19a76:	d008      	beq.n	19a8a <nrf_clock_is_running+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   19a78:	68fb      	ldr	r3, [r7, #12]
   19a7a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   19a7e:	b2db      	uxtb	r3, r3
   19a80:	f003 0303 	and.w	r3, r3, #3
   19a84:	b2da      	uxtb	r2, r3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   19a86:	687b      	ldr	r3, [r7, #4]
   19a88:	701a      	strb	r2, [r3, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   19a8a:	68fb      	ldr	r3, [r7, #12]
   19a8c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   19a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   19a94:	2b00      	cmp	r3, #0
   19a96:	d024      	beq.n	19ae2 <nrf_clock_is_running+0x8a>
                return true;
   19a98:	2301      	movs	r3, #1
   19a9a:	e026      	b.n	19aea <nrf_clock_is_running+0x92>
            if (p_clk_src != NULL)
   19a9c:	687b      	ldr	r3, [r7, #4]
   19a9e:	2b00      	cmp	r3, #0
   19aa0:	d008      	beq.n	19ab4 <nrf_clock_is_running+0x5c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   19aa2:	68fb      	ldr	r3, [r7, #12]
   19aa4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   19aa8:	b2db      	uxtb	r3, r3
   19aaa:	f003 0301 	and.w	r3, r3, #1
   19aae:	b2da      	uxtb	r2, r3
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   19ab0:	687b      	ldr	r3, [r7, #4]
   19ab2:	701a      	strb	r2, [r3, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   19ab4:	68fb      	ldr	r3, [r7, #12]
   19ab6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   19aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   19abe:	2b00      	cmp	r3, #0
   19ac0:	d011      	beq.n	19ae6 <nrf_clock_is_running+0x8e>
                return true;
   19ac2:	2301      	movs	r3, #1
   19ac4:	e011      	b.n	19aea <nrf_clock_is_running+0x92>
            NRFX_ASSERT(0);
   19ac6:	f44f 734f 	mov.w	r3, #828	; 0x33c
   19aca:	4a0a      	ldr	r2, [pc, #40]	; (19af4 <nrf_clock_is_running+0x9c>)
   19acc:	490a      	ldr	r1, [pc, #40]	; (19af8 <nrf_clock_is_running+0xa0>)
   19ace:	480b      	ldr	r0, [pc, #44]	; (19afc <nrf_clock_is_running+0xa4>)
   19ad0:	f007 faca 	bl	21068 <printk>
   19ad4:	f44f 714f 	mov.w	r1, #828	; 0x33c
   19ad8:	4806      	ldr	r0, [pc, #24]	; (19af4 <nrf_clock_is_running+0x9c>)
   19ada:	f008 fb72 	bl	221c2 <assert_post_action>
            return false;
   19ade:	2300      	movs	r3, #0
   19ae0:	e003      	b.n	19aea <nrf_clock_is_running+0x92>
            break;
   19ae2:	bf00      	nop
   19ae4:	e000      	b.n	19ae8 <nrf_clock_is_running+0x90>
            break;
   19ae6:	bf00      	nop
    return false;
   19ae8:	2300      	movs	r3, #0
}
   19aea:	4618      	mov	r0, r3
   19aec:	3710      	adds	r7, #16
   19aee:	46bd      	mov	sp, r7
   19af0:	bd80      	pop	{r7, pc}
   19af2:	bf00      	nop
   19af4:	0002b4dc 	.word	0x0002b4dc
   19af8:	0002b510 	.word	0x0002b510
   19afc:	0002b514 	.word	0x0002b514

00019b00 <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
   19b00:	b580      	push	{r7, lr}
   19b02:	b082      	sub	sp, #8
   19b04:	af00      	add	r7, sp, #0
    #endif
    priority = NRFX_POWER_DEFAULT_CONFIG_IRQ_PRIORITY;
#elif NRFX_CHECK(NRFX_POWER_ENABLED)
    priority = NRFX_POWER_DEFAULT_CONFIG_IRQ_PRIORITY;
#elif NRFX_CHECK(NRFX_CLOCK_ENABLED)
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
   19b06:	2307      	movs	r3, #7
   19b08:	71fb      	strb	r3, [r7, #7]
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   19b0a:	480a      	ldr	r0, [pc, #40]	; (19b34 <nrfx_power_clock_irq_init+0x34>)
   19b0c:	f00d f91b 	bl	26d46 <nrfx_get_irq_number>
   19b10:	4603      	mov	r3, r0
   19b12:	4618      	mov	r0, r3
   19b14:	f7fc f8b0 	bl	15c78 <arch_irq_is_enabled>
   19b18:	4603      	mov	r3, r0
   19b1a:	2b00      	cmp	r3, #0
   19b1c:	d106      	bne.n	19b2c <nrfx_power_clock_irq_init+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   19b1e:	4805      	ldr	r0, [pc, #20]	; (19b34 <nrfx_power_clock_irq_init+0x34>)
   19b20:	f00d f911 	bl	26d46 <nrfx_get_irq_number>
   19b24:	4603      	mov	r3, r0
   19b26:	4618      	mov	r0, r3
   19b28:	f00a fbcd 	bl	242c6 <arch_irq_enable>
    }
}
   19b2c:	bf00      	nop
   19b2e:	3708      	adds	r7, #8
   19b30:	46bd      	mov	sp, r7
   19b32:	bd80      	pop	{r7, pc}
   19b34:	40005000 	.word	0x40005000

00019b38 <nrfx_clock_is_running>:
{
   19b38:	b580      	push	{r7, lr}
   19b3a:	b082      	sub	sp, #8
   19b3c:	af00      	add	r7, sp, #0
   19b3e:	4603      	mov	r3, r0
   19b40:	6039      	str	r1, [r7, #0]
   19b42:	71fb      	strb	r3, [r7, #7]
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   19b44:	79fb      	ldrb	r3, [r7, #7]
   19b46:	683a      	ldr	r2, [r7, #0]
   19b48:	4619      	mov	r1, r3
   19b4a:	4804      	ldr	r0, [pc, #16]	; (19b5c <nrfx_clock_is_running+0x24>)
   19b4c:	f7ff ff84 	bl	19a58 <nrf_clock_is_running>
   19b50:	4603      	mov	r3, r0
}
   19b52:	4618      	mov	r0, r3
   19b54:	3708      	adds	r7, #8
   19b56:	46bd      	mov	sp, r7
   19b58:	bd80      	pop	{r7, pc}
   19b5a:	bf00      	nop
   19b5c:	40005000 	.word	0x40005000

00019b60 <log_const_source_id>:
{
   19b60:	b480      	push	{r7}
   19b62:	b083      	sub	sp, #12
   19b64:	af00      	add	r7, sp, #0
   19b66:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   19b68:	687b      	ldr	r3, [r7, #4]
   19b6a:	4a04      	ldr	r2, [pc, #16]	; (19b7c <log_const_source_id+0x1c>)
   19b6c:	1a9b      	subs	r3, r3, r2
   19b6e:	08db      	lsrs	r3, r3, #3
}
   19b70:	4618      	mov	r0, r3
   19b72:	370c      	adds	r7, #12
   19b74:	46bd      	mov	sp, r7
   19b76:	bc80      	pop	{r7}
   19b78:	4770      	bx	lr
   19b7a:	bf00      	nop
   19b7c:	00029354 	.word	0x00029354

00019b80 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   19b80:	b590      	push	{r4, r7, lr}
   19b82:	b087      	sub	sp, #28
   19b84:	af00      	add	r7, sp, #0
   19b86:	6078      	str	r0, [r7, #4]
    NRFX_ASSERT(event_handler);
   19b88:	687b      	ldr	r3, [r7, #4]
   19b8a:	2b00      	cmp	r3, #0
   19b8c:	d109      	bne.n	19ba2 <nrfx_clock_init+0x22>
   19b8e:	23b5      	movs	r3, #181	; 0xb5
   19b90:	4a2e      	ldr	r2, [pc, #184]	; (19c4c <nrfx_clock_init+0xcc>)
   19b92:	492f      	ldr	r1, [pc, #188]	; (19c50 <nrfx_clock_init+0xd0>)
   19b94:	482f      	ldr	r0, [pc, #188]	; (19c54 <nrfx_clock_init+0xd4>)
   19b96:	f007 fa67 	bl	21068 <printk>
   19b9a:	21b5      	movs	r1, #181	; 0xb5
   19b9c:	482b      	ldr	r0, [pc, #172]	; (19c4c <nrfx_clock_init+0xcc>)
   19b9e:	f008 fb10 	bl	221c2 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
   19ba2:	4b2d      	ldr	r3, [pc, #180]	; (19c58 <nrfx_clock_init+0xd8>)
   19ba4:	617b      	str	r3, [r7, #20]
    if (m_clock_cb.module_initialized)
   19ba6:	4b2d      	ldr	r3, [pc, #180]	; (19c5c <nrfx_clock_init+0xdc>)
   19ba8:	791b      	ldrb	r3, [r3, #4]
   19baa:	2b00      	cmp	r3, #0
   19bac:	d002      	beq.n	19bb4 <nrfx_clock_init+0x34>
    {
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   19bae:	4b2c      	ldr	r3, [pc, #176]	; (19c60 <nrfx_clock_init+0xe0>)
   19bb0:	617b      	str	r3, [r7, #20]
   19bb2:	e005      	b.n	19bc0 <nrfx_clock_init+0x40>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
   19bb4:	4a29      	ldr	r2, [pc, #164]	; (19c5c <nrfx_clock_init+0xdc>)
   19bb6:	687b      	ldr	r3, [r7, #4]
   19bb8:	6013      	str	r3, [r2, #0]
        m_clock_cb.module_initialized = true;
   19bba:	4b28      	ldr	r3, [pc, #160]	; (19c5c <nrfx_clock_init+0xdc>)
   19bbc:	2201      	movs	r2, #1
   19bbe:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
   19bc0:	2300      	movs	r3, #0
   19bc2:	2b02      	cmp	r3, #2
   19bc4:	d93c      	bls.n	19c40 <nrfx_clock_init+0xc0>
   19bc6:	f00d f939 	bl	26e3c <k_is_user_context>
   19bca:	4603      	mov	r3, r0
   19bcc:	74fb      	strb	r3, [r7, #19]
   19bce:	2300      	movs	r3, #0
   19bd0:	60fb      	str	r3, [r7, #12]
   19bd2:	2300      	movs	r3, #0
   19bd4:	2b00      	cmp	r3, #0
   19bd6:	d007      	beq.n	19be8 <nrfx_clock_init+0x68>
   19bd8:	4b22      	ldr	r3, [pc, #136]	; (19c64 <nrfx_clock_init+0xe4>)
   19bda:	681b      	ldr	r3, [r3, #0]
   19bdc:	4618      	mov	r0, r3
   19bde:	f7ff ffbf 	bl	19b60 <log_const_source_id>
   19be2:	4603      	mov	r3, r0
   19be4:	b29b      	uxth	r3, r3
   19be6:	e000      	b.n	19bea <nrfx_clock_init+0x6a>
   19be8:	2300      	movs	r3, #0
   19bea:	823b      	strh	r3, [r7, #16]
   19bec:	7a3b      	ldrb	r3, [r7, #8]
   19bee:	2203      	movs	r2, #3
   19bf0:	f362 0302 	bfi	r3, r2, #0, #3
   19bf4:	723b      	strb	r3, [r7, #8]
   19bf6:	7a3b      	ldrb	r3, [r7, #8]
   19bf8:	f36f 03c5 	bfc	r3, #3, #3
   19bfc:	723b      	strb	r3, [r7, #8]
   19bfe:	8a3b      	ldrh	r3, [r7, #16]
   19c00:	f3c3 0309 	ubfx	r3, r3, #0, #10
   19c04:	b29a      	uxth	r2, r3
   19c06:	893b      	ldrh	r3, [r7, #8]
   19c08:	f362 138f 	bfi	r3, r2, #6, #10
   19c0c:	813b      	strh	r3, [r7, #8]
   19c0e:	7cfb      	ldrb	r3, [r7, #19]
   19c10:	2b00      	cmp	r3, #0
   19c12:	d009      	beq.n	19c28 <nrfx_clock_init+0xa8>
   19c14:	6978      	ldr	r0, [r7, #20]
   19c16:	f7ff fe87 	bl	19928 <nrfx_error_string_get>
   19c1a:	4603      	mov	r3, r0
   19c1c:	4a12      	ldr	r2, [pc, #72]	; (19c68 <nrfx_clock_init+0xe8>)
   19c1e:	4913      	ldr	r1, [pc, #76]	; (19c6c <nrfx_clock_init+0xec>)
   19c20:	8938      	ldrh	r0, [r7, #8]
   19c22:	f7f9 fa95 	bl	13150 <log_from_user>
   19c26:	e00c      	b.n	19c42 <nrfx_clock_init+0xc2>
   19c28:	4c0f      	ldr	r4, [pc, #60]	; (19c68 <nrfx_clock_init+0xe8>)
   19c2a:	6978      	ldr	r0, [r7, #20]
   19c2c:	f7ff fe7c 	bl	19928 <nrfx_error_string_get>
   19c30:	4603      	mov	r3, r0
   19c32:	461a      	mov	r2, r3
   19c34:	893b      	ldrh	r3, [r7, #8]
   19c36:	4621      	mov	r1, r4
   19c38:	480c      	ldr	r0, [pc, #48]	; (19c6c <nrfx_clock_init+0xec>)
   19c3a:	f008 ff8f 	bl	22b5c <log_2>
   19c3e:	e000      	b.n	19c42 <nrfx_clock_init+0xc2>
   19c40:	bf00      	nop
    return err_code;
   19c42:	697b      	ldr	r3, [r7, #20]
}
   19c44:	4618      	mov	r0, r3
   19c46:	371c      	adds	r7, #28
   19c48:	46bd      	mov	sp, r7
   19c4a:	bd90      	pop	{r4, r7, pc}
   19c4c:	0002b534 	.word	0x0002b534
   19c50:	0002b574 	.word	0x0002b574
   19c54:	0002b514 	.word	0x0002b514
   19c58:	0bad0000 	.word	0x0bad0000
   19c5c:	20014e68 	.word	0x20014e68
   19c60:	0bad000c 	.word	0x0bad000c
   19c64:	20014e64 	.word	0x20014e64
   19c68:	0002cc7c 	.word	0x0002cc7c
   19c6c:	0002b584 	.word	0x0002b584

00019c70 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   19c70:	b580      	push	{r7, lr}
   19c72:	b084      	sub	sp, #16
   19c74:	af00      	add	r7, sp, #0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   19c76:	4b26      	ldr	r3, [pc, #152]	; (19d10 <nrfx_clock_enable+0xa0>)
   19c78:	791b      	ldrb	r3, [r3, #4]
   19c7a:	f083 0301 	eor.w	r3, r3, #1
   19c7e:	b2db      	uxtb	r3, r3
   19c80:	2b00      	cmp	r3, #0
   19c82:	d009      	beq.n	19c98 <nrfx_clock_enable+0x28>
   19c84:	23ce      	movs	r3, #206	; 0xce
   19c86:	4a23      	ldr	r2, [pc, #140]	; (19d14 <nrfx_clock_enable+0xa4>)
   19c88:	4923      	ldr	r1, [pc, #140]	; (19d18 <nrfx_clock_enable+0xa8>)
   19c8a:	4824      	ldr	r0, [pc, #144]	; (19d1c <nrfx_clock_enable+0xac>)
   19c8c:	f007 f9ec 	bl	21068 <printk>
   19c90:	21ce      	movs	r1, #206	; 0xce
   19c92:	4820      	ldr	r0, [pc, #128]	; (19d14 <nrfx_clock_enable+0xa4>)
   19c94:	f008 fa95 	bl	221c2 <assert_post_action>
    nrfx_power_clock_irq_init();
   19c98:	f7ff ff32 	bl	19b00 <nrfx_power_clock_irq_init>
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
   19c9c:	2300      	movs	r3, #0
   19c9e:	2b02      	cmp	r3, #2
   19ca0:	d801      	bhi.n	19ca6 <nrfx_clock_enable+0x36>
   19ca2:	bf00      	nop
}
   19ca4:	e02f      	b.n	19d06 <nrfx_clock_enable+0x96>
    NRFX_LOG_INFO("Module enabled.");
   19ca6:	f00d f8c9 	bl	26e3c <k_is_user_context>
   19caa:	4603      	mov	r3, r0
   19cac:	73fb      	strb	r3, [r7, #15]
   19cae:	2300      	movs	r3, #0
   19cb0:	60bb      	str	r3, [r7, #8]
   19cb2:	2300      	movs	r3, #0
   19cb4:	2b00      	cmp	r3, #0
   19cb6:	d007      	beq.n	19cc8 <nrfx_clock_enable+0x58>
   19cb8:	4b19      	ldr	r3, [pc, #100]	; (19d20 <nrfx_clock_enable+0xb0>)
   19cba:	681b      	ldr	r3, [r3, #0]
   19cbc:	4618      	mov	r0, r3
   19cbe:	f7ff ff4f 	bl	19b60 <log_const_source_id>
   19cc2:	4603      	mov	r3, r0
   19cc4:	b29b      	uxth	r3, r3
   19cc6:	e000      	b.n	19cca <nrfx_clock_enable+0x5a>
   19cc8:	2300      	movs	r3, #0
   19cca:	81bb      	strh	r3, [r7, #12]
   19ccc:	793b      	ldrb	r3, [r7, #4]
   19cce:	2203      	movs	r2, #3
   19cd0:	f362 0302 	bfi	r3, r2, #0, #3
   19cd4:	713b      	strb	r3, [r7, #4]
   19cd6:	793b      	ldrb	r3, [r7, #4]
   19cd8:	f36f 03c5 	bfc	r3, #3, #3
   19cdc:	713b      	strb	r3, [r7, #4]
   19cde:	89bb      	ldrh	r3, [r7, #12]
   19ce0:	f3c3 0309 	ubfx	r3, r3, #0, #10
   19ce4:	b29a      	uxth	r2, r3
   19ce6:	88bb      	ldrh	r3, [r7, #4]
   19ce8:	f362 138f 	bfi	r3, r2, #6, #10
   19cec:	80bb      	strh	r3, [r7, #4]
   19cee:	7bfb      	ldrb	r3, [r7, #15]
   19cf0:	2b00      	cmp	r3, #0
   19cf2:	d004      	beq.n	19cfe <nrfx_clock_enable+0x8e>
   19cf4:	490b      	ldr	r1, [pc, #44]	; (19d24 <nrfx_clock_enable+0xb4>)
   19cf6:	88b8      	ldrh	r0, [r7, #4]
   19cf8:	f7f9 fa2a 	bl	13150 <log_from_user>
}
   19cfc:	e003      	b.n	19d06 <nrfx_clock_enable+0x96>
    NRFX_LOG_INFO("Module enabled.");
   19cfe:	88b9      	ldrh	r1, [r7, #4]
   19d00:	4808      	ldr	r0, [pc, #32]	; (19d24 <nrfx_clock_enable+0xb4>)
   19d02:	f008 feff 	bl	22b04 <log_0>
}
   19d06:	bf00      	nop
   19d08:	3710      	adds	r7, #16
   19d0a:	46bd      	mov	sp, r7
   19d0c:	bd80      	pop	{r7, pc}
   19d0e:	bf00      	nop
   19d10:	20014e68 	.word	0x20014e68
   19d14:	0002b534 	.word	0x0002b534
   19d18:	0002b5a4 	.word	0x0002b5a4
   19d1c:	0002b514 	.word	0x0002b514
   19d20:	20014e64 	.word	0x20014e64
   19d24:	0002b5c4 	.word	0x0002b5c4

00019d28 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   19d28:	b580      	push	{r7, lr}
   19d2a:	b084      	sub	sp, #16
   19d2c:	af00      	add	r7, sp, #0
   19d2e:	4603      	mov	r3, r0
   19d30:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(m_clock_cb.module_initialized);
   19d32:	4b2e      	ldr	r3, [pc, #184]	; (19dec <nrfx_clock_start+0xc4>)
   19d34:	791b      	ldrb	r3, [r3, #4]
   19d36:	f083 0301 	eor.w	r3, r3, #1
   19d3a:	b2db      	uxtb	r3, r3
   19d3c:	2b00      	cmp	r3, #0
   19d3e:	d00b      	beq.n	19d58 <nrfx_clock_start+0x30>
   19d40:	f44f 7385 	mov.w	r3, #266	; 0x10a
   19d44:	4a2a      	ldr	r2, [pc, #168]	; (19df0 <nrfx_clock_start+0xc8>)
   19d46:	492b      	ldr	r1, [pc, #172]	; (19df4 <nrfx_clock_start+0xcc>)
   19d48:	482b      	ldr	r0, [pc, #172]	; (19df8 <nrfx_clock_start+0xd0>)
   19d4a:	f007 f98d 	bl	21068 <printk>
   19d4e:	f44f 7185 	mov.w	r1, #266	; 0x10a
   19d52:	4827      	ldr	r0, [pc, #156]	; (19df0 <nrfx_clock_start+0xc8>)
   19d54:	f008 fa35 	bl	221c2 <assert_post_action>
    switch (domain)
   19d58:	79fb      	ldrb	r3, [r7, #7]
   19d5a:	2b00      	cmp	r3, #0
   19d5c:	d002      	beq.n	19d64 <nrfx_clock_start+0x3c>
   19d5e:	2b01      	cmp	r3, #1
   19d60:	d024      	beq.n	19dac <nrfx_clock_start+0x84>
   19d62:	e031      	b.n	19dc8 <nrfx_clock_start+0xa0>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   19d64:	f107 030f 	add.w	r3, r7, #15
   19d68:	461a      	mov	r2, r3
   19d6a:	2100      	movs	r1, #0
   19d6c:	4823      	ldr	r0, [pc, #140]	; (19dfc <nrfx_clock_start+0xd4>)
   19d6e:	f7ff fe73 	bl	19a58 <nrf_clock_is_running>
   19d72:	4603      	mov	r3, r0
   19d74:	2b00      	cmp	r3, #0
   19d76:	d007      	beq.n	19d88 <nrfx_clock_start+0x60>
                    lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC)
   19d78:	7bfb      	ldrb	r3, [r7, #15]
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   19d7a:	2b02      	cmp	r3, #2
   19d7c:	d104      	bne.n	19d88 <nrfx_clock_start+0x60>
                {
                    // If the two-stage LFXO procedure has finished already
                    // use the configured LF clock source.
                    nrf_clock_lf_src_set(NRF_CLOCK, (nrf_clock_lfclk_t)NRFX_CLOCK_CONFIG_LF_SRC);
   19d7e:	2102      	movs	r1, #2
   19d80:	481e      	ldr	r0, [pc, #120]	; (19dfc <nrfx_clock_start+0xd4>)
   19d82:	f00d f84c 	bl	26e1e <nrf_clock_lf_src_set>
   19d86:	e003      	b.n	19d90 <nrfx_clock_start+0x68>
                else
                {
                    // If the two-stage LFXO procedure hasn't started yet
                    // or the RC stage is in progress,
                    // use the RC oscillator as LF clock source.
                    nrf_clock_lf_src_set(NRF_CLOCK, NRF_CLOCK_LFCLK_RC);
   19d88:	2101      	movs	r1, #1
   19d8a:	481c      	ldr	r0, [pc, #112]	; (19dfc <nrfx_clock_start+0xd4>)
   19d8c:	f00d f847 	bl	26e1e <nrf_clock_lf_src_set>
                }
            }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
   19d90:	f44f 7182 	mov.w	r1, #260	; 0x104
   19d94:	4819      	ldr	r0, [pc, #100]	; (19dfc <nrfx_clock_start+0xd4>)
   19d96:	f00d f819 	bl	26dcc <nrf_clock_event_clear>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
   19d9a:	2102      	movs	r1, #2
   19d9c:	4817      	ldr	r0, [pc, #92]	; (19dfc <nrfx_clock_start+0xd4>)
   19d9e:	f00c ffe9 	bl	26d74 <nrf_clock_int_enable>
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)
            nrfx_clock_anomaly_132();
#endif
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_LFCLKSTART);
   19da2:	2108      	movs	r1, #8
   19da4:	4815      	ldr	r0, [pc, #84]	; (19dfc <nrfx_clock_start+0xd4>)
   19da6:	f00d f801 	bl	26dac <nrf_clock_task_trigger>
            break;
   19daa:	e01a      	b.n	19de2 <nrfx_clock_start+0xba>
        case NRF_CLOCK_DOMAIN_HFCLK:
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
   19dac:	f44f 7180 	mov.w	r1, #256	; 0x100
   19db0:	4812      	ldr	r0, [pc, #72]	; (19dfc <nrfx_clock_start+0xd4>)
   19db2:	f00d f80b 	bl	26dcc <nrf_clock_event_clear>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);
   19db6:	2101      	movs	r1, #1
   19db8:	4810      	ldr	r0, [pc, #64]	; (19dfc <nrfx_clock_start+0xd4>)
   19dba:	f00c ffdb 	bl	26d74 <nrf_clock_int_enable>
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKSTART);
   19dbe:	2100      	movs	r1, #0
   19dc0:	480e      	ldr	r0, [pc, #56]	; (19dfc <nrfx_clock_start+0xd4>)
   19dc2:	f00c fff3 	bl	26dac <nrf_clock_task_trigger>
            break;
   19dc6:	e00c      	b.n	19de2 <nrfx_clock_start+0xba>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   19dc8:	f44f 739e 	mov.w	r3, #316	; 0x13c
   19dcc:	4a08      	ldr	r2, [pc, #32]	; (19df0 <nrfx_clock_start+0xc8>)
   19dce:	490c      	ldr	r1, [pc, #48]	; (19e00 <nrfx_clock_start+0xd8>)
   19dd0:	4809      	ldr	r0, [pc, #36]	; (19df8 <nrfx_clock_start+0xd0>)
   19dd2:	f007 f949 	bl	21068 <printk>
   19dd6:	f44f 719e 	mov.w	r1, #316	; 0x13c
   19dda:	4805      	ldr	r0, [pc, #20]	; (19df0 <nrfx_clock_start+0xc8>)
   19ddc:	f008 f9f1 	bl	221c2 <assert_post_action>
            break;
   19de0:	bf00      	nop
    }
}
   19de2:	bf00      	nop
   19de4:	3710      	adds	r7, #16
   19de6:	46bd      	mov	sp, r7
   19de8:	bd80      	pop	{r7, pc}
   19dea:	bf00      	nop
   19dec:	20014e68 	.word	0x20014e68
   19df0:	0002b534 	.word	0x0002b534
   19df4:	0002b5a4 	.word	0x0002b5a4
   19df8:	0002b514 	.word	0x0002b514
   19dfc:	40005000 	.word	0x40005000
   19e00:	0002b510 	.word	0x0002b510

00019e04 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   19e04:	b580      	push	{r7, lr}
   19e06:	b088      	sub	sp, #32
   19e08:	af00      	add	r7, sp, #0
   19e0a:	4603      	mov	r3, r0
   19e0c:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(m_clock_cb.module_initialized);
   19e0e:	4b63      	ldr	r3, [pc, #396]	; (19f9c <nrfx_clock_stop+0x198>)
   19e10:	791b      	ldrb	r3, [r3, #4]
   19e12:	f083 0301 	eor.w	r3, r3, #1
   19e16:	b2db      	uxtb	r3, r3
   19e18:	2b00      	cmp	r3, #0
   19e1a:	d00b      	beq.n	19e34 <nrfx_clock_stop+0x30>
   19e1c:	f240 1343 	movw	r3, #323	; 0x143
   19e20:	4a5f      	ldr	r2, [pc, #380]	; (19fa0 <nrfx_clock_stop+0x19c>)
   19e22:	4960      	ldr	r1, [pc, #384]	; (19fa4 <nrfx_clock_stop+0x1a0>)
   19e24:	4860      	ldr	r0, [pc, #384]	; (19fa8 <nrfx_clock_stop+0x1a4>)
   19e26:	f007 f91f 	bl	21068 <printk>
   19e2a:	f240 1143 	movw	r1, #323	; 0x143
   19e2e:	485c      	ldr	r0, [pc, #368]	; (19fa0 <nrfx_clock_stop+0x19c>)
   19e30:	f008 f9c7 	bl	221c2 <assert_post_action>
    switch (domain)
   19e34:	79fb      	ldrb	r3, [r7, #7]
   19e36:	2b00      	cmp	r3, #0
   19e38:	d002      	beq.n	19e40 <nrfx_clock_stop+0x3c>
   19e3a:	2b01      	cmp	r3, #1
   19e3c:	d00e      	beq.n	19e5c <nrfx_clock_stop+0x58>
   19e3e:	e01b      	b.n	19e78 <nrfx_clock_stop+0x74>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
   19e40:	2102      	movs	r1, #2
   19e42:	485a      	ldr	r0, [pc, #360]	; (19fac <nrfx_clock_stop+0x1a8>)
   19e44:	f00c ffa4 	bl	26d90 <nrf_clock_int_disable>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
   19e48:	f44f 7182 	mov.w	r1, #260	; 0x104
   19e4c:	4857      	ldr	r0, [pc, #348]	; (19fac <nrfx_clock_stop+0x1a8>)
   19e4e:	f00c ffbd 	bl	26dcc <nrf_clock_event_clear>
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_LFCLKSTOP);
   19e52:	210c      	movs	r1, #12
   19e54:	4855      	ldr	r0, [pc, #340]	; (19fac <nrfx_clock_stop+0x1a8>)
   19e56:	f00c ffa9 	bl	26dac <nrf_clock_task_trigger>
            break;
   19e5a:	e01a      	b.n	19e92 <nrfx_clock_stop+0x8e>
        case NRF_CLOCK_DOMAIN_HFCLK:
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);
   19e5c:	2101      	movs	r1, #1
   19e5e:	4853      	ldr	r0, [pc, #332]	; (19fac <nrfx_clock_stop+0x1a8>)
   19e60:	f00c ff96 	bl	26d90 <nrf_clock_int_disable>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
   19e64:	f44f 7180 	mov.w	r1, #256	; 0x100
   19e68:	4850      	ldr	r0, [pc, #320]	; (19fac <nrfx_clock_stop+0x1a8>)
   19e6a:	f00c ffaf 	bl	26dcc <nrf_clock_event_clear>
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKSTOP);
   19e6e:	2104      	movs	r1, #4
   19e70:	484e      	ldr	r0, [pc, #312]	; (19fac <nrfx_clock_stop+0x1a8>)
   19e72:	f00c ff9b 	bl	26dac <nrf_clock_task_trigger>
            break;
   19e76:	e00c      	b.n	19e92 <nrfx_clock_stop+0x8e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   19e78:	f240 135f 	movw	r3, #351	; 0x15f
   19e7c:	4a48      	ldr	r2, [pc, #288]	; (19fa0 <nrfx_clock_stop+0x19c>)
   19e7e:	494c      	ldr	r1, [pc, #304]	; (19fb0 <nrfx_clock_stop+0x1ac>)
   19e80:	4849      	ldr	r0, [pc, #292]	; (19fa8 <nrfx_clock_stop+0x1a4>)
   19e82:	f007 f8f1 	bl	21068 <printk>
   19e86:	f240 115f 	movw	r1, #351	; 0x15f
   19e8a:	4845      	ldr	r0, [pc, #276]	; (19fa0 <nrfx_clock_stop+0x19c>)
   19e8c:	f008 f999 	bl	221c2 <assert_post_action>
            return;
   19e90:	e081      	b.n	19f96 <nrfx_clock_stop+0x192>
    }

    bool stopped;
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
   19e92:	79fb      	ldrb	r3, [r7, #7]
   19e94:	2b01      	cmp	r3, #1
   19e96:	d123      	bne.n	19ee0 <nrfx_clock_stop+0xdc>
    {
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   19e98:	2301      	movs	r3, #1
   19e9a:	74fb      	strb	r3, [r7, #19]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   19e9c:	2300      	movs	r3, #0
   19e9e:	75fb      	strb	r3, [r7, #23]
   19ea0:	f242 7310 	movw	r3, #10000	; 0x2710
   19ea4:	61bb      	str	r3, [r7, #24]
   19ea6:	f107 0213 	add.w	r2, r7, #19
   19eaa:	79fb      	ldrb	r3, [r7, #7]
   19eac:	4611      	mov	r1, r2
   19eae:	4618      	mov	r0, r3
   19eb0:	f7ff fe42 	bl	19b38 <nrfx_clock_is_running>
   19eb4:	4603      	mov	r3, r0
   19eb6:	f083 0301 	eor.w	r3, r3, #1
   19eba:	b2db      	uxtb	r3, r3
   19ebc:	2b00      	cmp	r3, #0
   19ebe:	d102      	bne.n	19ec6 <nrfx_clock_stop+0xc2>
   19ec0:	7cfb      	ldrb	r3, [r7, #19]
   19ec2:	2b01      	cmp	r3, #1
   19ec4:	d002      	beq.n	19ecc <nrfx_clock_stop+0xc8>
   19ec6:	2301      	movs	r3, #1
   19ec8:	75fb      	strb	r3, [r7, #23]
   19eca:	e025      	b.n	19f18 <nrfx_clock_stop+0x114>
   19ecc:	2001      	movs	r0, #1
   19ece:	f00c ff2f 	bl	26d30 <nrfx_busy_wait>
   19ed2:	69bb      	ldr	r3, [r7, #24]
   19ed4:	3b01      	subs	r3, #1
   19ed6:	61bb      	str	r3, [r7, #24]
   19ed8:	69bb      	ldr	r3, [r7, #24]
   19eda:	2b00      	cmp	r3, #0
   19edc:	d1e3      	bne.n	19ea6 <nrfx_clock_stop+0xa2>
   19ede:	e01b      	b.n	19f18 <nrfx_clock_stop+0x114>
                       (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)), 10000, 1, stopped);
    }
    else
    {
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   19ee0:	2300      	movs	r3, #0
   19ee2:	75fb      	strb	r3, [r7, #23]
   19ee4:	f242 7310 	movw	r3, #10000	; 0x2710
   19ee8:	61fb      	str	r3, [r7, #28]
   19eea:	79fb      	ldrb	r3, [r7, #7]
   19eec:	2100      	movs	r1, #0
   19eee:	4618      	mov	r0, r3
   19ef0:	f7ff fe22 	bl	19b38 <nrfx_clock_is_running>
   19ef4:	4603      	mov	r3, r0
   19ef6:	f083 0301 	eor.w	r3, r3, #1
   19efa:	b2db      	uxtb	r3, r3
   19efc:	2b00      	cmp	r3, #0
   19efe:	d002      	beq.n	19f06 <nrfx_clock_stop+0x102>
   19f00:	2301      	movs	r3, #1
   19f02:	75fb      	strb	r3, [r7, #23]
   19f04:	e008      	b.n	19f18 <nrfx_clock_stop+0x114>
   19f06:	2001      	movs	r0, #1
   19f08:	f00c ff12 	bl	26d30 <nrfx_busy_wait>
   19f0c:	69fb      	ldr	r3, [r7, #28]
   19f0e:	3b01      	subs	r3, #1
   19f10:	61fb      	str	r3, [r7, #28]
   19f12:	69fb      	ldr	r3, [r7, #28]
   19f14:	2b00      	cmp	r3, #0
   19f16:	d1e8      	bne.n	19eea <nrfx_clock_stop+0xe6>
    }

    if (!stopped)
   19f18:	7dfb      	ldrb	r3, [r7, #23]
   19f1a:	f083 0301 	eor.w	r3, r3, #1
   19f1e:	b2db      	uxtb	r3, r3
   19f20:	2b00      	cmp	r3, #0
   19f22:	d038      	beq.n	19f96 <nrfx_clock_stop+0x192>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
   19f24:	2300      	movs	r3, #0
   19f26:	2b00      	cmp	r3, #0
   19f28:	d034      	beq.n	19f94 <nrfx_clock_stop+0x190>
   19f2a:	f00c ff87 	bl	26e3c <k_is_user_context>
   19f2e:	4603      	mov	r3, r0
   19f30:	75bb      	strb	r3, [r7, #22]
   19f32:	2300      	movs	r3, #0
   19f34:	60fb      	str	r3, [r7, #12]
   19f36:	2300      	movs	r3, #0
   19f38:	2b00      	cmp	r3, #0
   19f3a:	d007      	beq.n	19f4c <nrfx_clock_stop+0x148>
   19f3c:	4b1d      	ldr	r3, [pc, #116]	; (19fb4 <nrfx_clock_stop+0x1b0>)
   19f3e:	681b      	ldr	r3, [r3, #0]
   19f40:	4618      	mov	r0, r3
   19f42:	f7ff fe0d 	bl	19b60 <log_const_source_id>
   19f46:	4603      	mov	r3, r0
   19f48:	b29b      	uxth	r3, r3
   19f4a:	e000      	b.n	19f4e <nrfx_clock_stop+0x14a>
   19f4c:	2300      	movs	r3, #0
   19f4e:	82bb      	strh	r3, [r7, #20]
   19f50:	7a3b      	ldrb	r3, [r7, #8]
   19f52:	2201      	movs	r2, #1
   19f54:	f362 0302 	bfi	r3, r2, #0, #3
   19f58:	723b      	strb	r3, [r7, #8]
   19f5a:	7a3b      	ldrb	r3, [r7, #8]
   19f5c:	f36f 03c5 	bfc	r3, #3, #3
   19f60:	723b      	strb	r3, [r7, #8]
   19f62:	8abb      	ldrh	r3, [r7, #20]
   19f64:	f3c3 0309 	ubfx	r3, r3, #0, #10
   19f68:	b29a      	uxth	r2, r3
   19f6a:	893b      	ldrh	r3, [r7, #8]
   19f6c:	f362 138f 	bfi	r3, r2, #6, #10
   19f70:	813b      	strh	r3, [r7, #8]
   19f72:	7dbb      	ldrb	r3, [r7, #22]
   19f74:	2b00      	cmp	r3, #0
   19f76:	d006      	beq.n	19f86 <nrfx_clock_stop+0x182>
   19f78:	79fb      	ldrb	r3, [r7, #7]
   19f7a:	461a      	mov	r2, r3
   19f7c:	490e      	ldr	r1, [pc, #56]	; (19fb8 <nrfx_clock_stop+0x1b4>)
   19f7e:	8938      	ldrh	r0, [r7, #8]
   19f80:	f7f9 f8e6 	bl	13150 <log_from_user>
   19f84:	e007      	b.n	19f96 <nrfx_clock_stop+0x192>
   19f86:	79fb      	ldrb	r3, [r7, #7]
   19f88:	893a      	ldrh	r2, [r7, #8]
   19f8a:	4619      	mov	r1, r3
   19f8c:	480a      	ldr	r0, [pc, #40]	; (19fb8 <nrfx_clock_stop+0x1b4>)
   19f8e:	f008 fdce 	bl	22b2e <log_1>
   19f92:	e000      	b.n	19f96 <nrfx_clock_stop+0x192>
   19f94:	bf00      	nop
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   19f96:	3720      	adds	r7, #32
   19f98:	46bd      	mov	sp, r7
   19f9a:	bd80      	pop	{r7, pc}
   19f9c:	20014e68 	.word	0x20014e68
   19fa0:	0002b534 	.word	0x0002b534
   19fa4:	0002b5a4 	.word	0x0002b5a4
   19fa8:	0002b514 	.word	0x0002b514
   19fac:	40005000 	.word	0x40005000
   19fb0:	0002b510 	.word	0x0002b510
   19fb4:	20014e64 	.word	0x20014e64
   19fb8:	0002b5f8 	.word	0x0002b5f8

00019fbc <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   19fbc:	b580      	push	{r7, lr}
   19fbe:	b088      	sub	sp, #32
   19fc0:	af00      	add	r7, sp, #0
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   19fc2:	f44f 7180 	mov.w	r1, #256	; 0x100
   19fc6:	4857      	ldr	r0, [pc, #348]	; (1a124 <nrfx_power_clock_irq_handler+0x168>)
   19fc8:	f00c ff15 	bl	26df6 <nrf_clock_event_check>
   19fcc:	4603      	mov	r3, r0
   19fce:	2b00      	cmp	r3, #0
   19fd0:	d044      	beq.n	1a05c <nrfx_power_clock_irq_handler+0xa0>
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
   19fd2:	f44f 7180 	mov.w	r1, #256	; 0x100
   19fd6:	4853      	ldr	r0, [pc, #332]	; (1a124 <nrfx_power_clock_irq_handler+0x168>)
   19fd8:	f00c fef8 	bl	26dcc <nrf_clock_event_clear>
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
   19fdc:	2300      	movs	r3, #0
   19fde:	2b03      	cmp	r3, #3
   19fe0:	d933      	bls.n	1a04a <nrfx_power_clock_irq_handler+0x8e>
   19fe2:	f00c ff2b 	bl	26e3c <k_is_user_context>
   19fe6:	4603      	mov	r3, r0
   19fe8:	77fb      	strb	r3, [r7, #31]
   19fea:	2300      	movs	r3, #0
   19fec:	617b      	str	r3, [r7, #20]
   19fee:	2300      	movs	r3, #0
   19ff0:	2b00      	cmp	r3, #0
   19ff2:	d007      	beq.n	1a004 <nrfx_power_clock_irq_handler+0x48>
   19ff4:	4b4c      	ldr	r3, [pc, #304]	; (1a128 <nrfx_power_clock_irq_handler+0x16c>)
   19ff6:	681b      	ldr	r3, [r3, #0]
   19ff8:	4618      	mov	r0, r3
   19ffa:	f7ff fdb1 	bl	19b60 <log_const_source_id>
   19ffe:	4603      	mov	r3, r0
   1a000:	b29b      	uxth	r3, r3
   1a002:	e000      	b.n	1a006 <nrfx_power_clock_irq_handler+0x4a>
   1a004:	2300      	movs	r3, #0
   1a006:	83bb      	strh	r3, [r7, #28]
   1a008:	7c3b      	ldrb	r3, [r7, #16]
   1a00a:	2204      	movs	r2, #4
   1a00c:	f362 0302 	bfi	r3, r2, #0, #3
   1a010:	743b      	strb	r3, [r7, #16]
   1a012:	7c3b      	ldrb	r3, [r7, #16]
   1a014:	f36f 03c5 	bfc	r3, #3, #3
   1a018:	743b      	strb	r3, [r7, #16]
   1a01a:	8bbb      	ldrh	r3, [r7, #28]
   1a01c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1a020:	b29a      	uxth	r2, r3
   1a022:	8a3b      	ldrh	r3, [r7, #16]
   1a024:	f362 138f 	bfi	r3, r2, #6, #10
   1a028:	823b      	strh	r3, [r7, #16]
   1a02a:	7ffb      	ldrb	r3, [r7, #31]
   1a02c:	2b00      	cmp	r3, #0
   1a02e:	d005      	beq.n	1a03c <nrfx_power_clock_irq_handler+0x80>
   1a030:	4a3e      	ldr	r2, [pc, #248]	; (1a12c <nrfx_power_clock_irq_handler+0x170>)
   1a032:	493f      	ldr	r1, [pc, #252]	; (1a130 <nrfx_power_clock_irq_handler+0x174>)
   1a034:	8a38      	ldrh	r0, [r7, #16]
   1a036:	f7f9 f88b 	bl	13150 <log_from_user>
   1a03a:	e007      	b.n	1a04c <nrfx_power_clock_irq_handler+0x90>
   1a03c:	4b3b      	ldr	r3, [pc, #236]	; (1a12c <nrfx_power_clock_irq_handler+0x170>)
   1a03e:	8a3a      	ldrh	r2, [r7, #16]
   1a040:	4619      	mov	r1, r3
   1a042:	483b      	ldr	r0, [pc, #236]	; (1a130 <nrfx_power_clock_irq_handler+0x174>)
   1a044:	f008 fd73 	bl	22b2e <log_1>
   1a048:	e000      	b.n	1a04c <nrfx_power_clock_irq_handler+0x90>
   1a04a:	bf00      	nop
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);
   1a04c:	2101      	movs	r1, #1
   1a04e:	4835      	ldr	r0, [pc, #212]	; (1a124 <nrfx_power_clock_irq_handler+0x168>)
   1a050:	f00c fe9e 	bl	26d90 <nrf_clock_int_disable>
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1a054:	4b37      	ldr	r3, [pc, #220]	; (1a134 <nrfx_power_clock_irq_handler+0x178>)
   1a056:	681b      	ldr	r3, [r3, #0]
   1a058:	2000      	movs	r0, #0
   1a05a:	4798      	blx	r3
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1a05c:	f44f 7182 	mov.w	r1, #260	; 0x104
   1a060:	4830      	ldr	r0, [pc, #192]	; (1a124 <nrfx_power_clock_irq_handler+0x168>)
   1a062:	f00c fec8 	bl	26df6 <nrf_clock_event_check>
   1a066:	4603      	mov	r3, r0
   1a068:	2b00      	cmp	r3, #0
   1a06a:	d057      	beq.n	1a11c <nrfx_power_clock_irq_handler+0x160>
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
   1a06c:	f44f 7182 	mov.w	r1, #260	; 0x104
   1a070:	482c      	ldr	r0, [pc, #176]	; (1a124 <nrfx_power_clock_irq_handler+0x168>)
   1a072:	f00c feab 	bl	26dcc <nrf_clock_event_clear>
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");
   1a076:	2300      	movs	r3, #0
   1a078:	2b03      	cmp	r3, #3
   1a07a:	d933      	bls.n	1a0e4 <nrfx_power_clock_irq_handler+0x128>
   1a07c:	f00c fede 	bl	26e3c <k_is_user_context>
   1a080:	4603      	mov	r3, r0
   1a082:	76fb      	strb	r3, [r7, #27]
   1a084:	2300      	movs	r3, #0
   1a086:	60bb      	str	r3, [r7, #8]
   1a088:	2300      	movs	r3, #0
   1a08a:	2b00      	cmp	r3, #0
   1a08c:	d007      	beq.n	1a09e <nrfx_power_clock_irq_handler+0xe2>
   1a08e:	4b26      	ldr	r3, [pc, #152]	; (1a128 <nrfx_power_clock_irq_handler+0x16c>)
   1a090:	681b      	ldr	r3, [r3, #0]
   1a092:	4618      	mov	r0, r3
   1a094:	f7ff fd64 	bl	19b60 <log_const_source_id>
   1a098:	4603      	mov	r3, r0
   1a09a:	b29b      	uxth	r3, r3
   1a09c:	e000      	b.n	1a0a0 <nrfx_power_clock_irq_handler+0xe4>
   1a09e:	2300      	movs	r3, #0
   1a0a0:	833b      	strh	r3, [r7, #24]
   1a0a2:	793b      	ldrb	r3, [r7, #4]
   1a0a4:	2204      	movs	r2, #4
   1a0a6:	f362 0302 	bfi	r3, r2, #0, #3
   1a0aa:	713b      	strb	r3, [r7, #4]
   1a0ac:	793b      	ldrb	r3, [r7, #4]
   1a0ae:	f36f 03c5 	bfc	r3, #3, #3
   1a0b2:	713b      	strb	r3, [r7, #4]
   1a0b4:	8b3b      	ldrh	r3, [r7, #24]
   1a0b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1a0ba:	b29a      	uxth	r2, r3
   1a0bc:	88bb      	ldrh	r3, [r7, #4]
   1a0be:	f362 138f 	bfi	r3, r2, #6, #10
   1a0c2:	80bb      	strh	r3, [r7, #4]
   1a0c4:	7efb      	ldrb	r3, [r7, #27]
   1a0c6:	2b00      	cmp	r3, #0
   1a0c8:	d005      	beq.n	1a0d6 <nrfx_power_clock_irq_handler+0x11a>
   1a0ca:	4a18      	ldr	r2, [pc, #96]	; (1a12c <nrfx_power_clock_irq_handler+0x170>)
   1a0cc:	491a      	ldr	r1, [pc, #104]	; (1a138 <nrfx_power_clock_irq_handler+0x17c>)
   1a0ce:	88b8      	ldrh	r0, [r7, #4]
   1a0d0:	f7f9 f83e 	bl	13150 <log_from_user>
   1a0d4:	e007      	b.n	1a0e6 <nrfx_power_clock_irq_handler+0x12a>
   1a0d6:	4b15      	ldr	r3, [pc, #84]	; (1a12c <nrfx_power_clock_irq_handler+0x170>)
   1a0d8:	88ba      	ldrh	r2, [r7, #4]
   1a0da:	4619      	mov	r1, r3
   1a0dc:	4816      	ldr	r0, [pc, #88]	; (1a138 <nrfx_power_clock_irq_handler+0x17c>)
   1a0de:	f008 fd26 	bl	22b2e <log_1>
   1a0e2:	e000      	b.n	1a0e6 <nrfx_power_clock_irq_handler+0x12a>
   1a0e4:	bf00      	nop

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   1a0e6:	f107 030f 	add.w	r3, r7, #15
   1a0ea:	461a      	mov	r2, r3
   1a0ec:	2100      	movs	r1, #0
   1a0ee:	480d      	ldr	r0, [pc, #52]	; (1a124 <nrfx_power_clock_irq_handler+0x168>)
   1a0f0:	f7ff fcb2 	bl	19a58 <nrf_clock_is_running>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1a0f4:	7bfb      	ldrb	r3, [r7, #15]
   1a0f6:	2b01      	cmp	r3, #1
   1a0f8:	d108      	bne.n	1a10c <nrfx_power_clock_irq_handler+0x150>
        {
            // After the LFRC oscillator start switch to external source.
            nrf_clock_lf_src_set(NRF_CLOCK, (nrf_clock_lfclk_t)NRFX_CLOCK_CONFIG_LF_SRC);
   1a0fa:	2102      	movs	r1, #2
   1a0fc:	4809      	ldr	r0, [pc, #36]	; (1a124 <nrfx_power_clock_irq_handler+0x168>)
   1a0fe:	f00c fe8e 	bl	26e1e <nrf_clock_lf_src_set>
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_LFCLKSTART);
   1a102:	2108      	movs	r1, #8
   1a104:	4807      	ldr	r0, [pc, #28]	; (1a124 <nrfx_power_clock_irq_handler+0x168>)
   1a106:	f00c fe51 	bl	26dac <nrf_clock_task_trigger>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1a10a:	e007      	b.n	1a11c <nrfx_power_clock_irq_handler+0x160>
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
   1a10c:	2102      	movs	r1, #2
   1a10e:	4805      	ldr	r0, [pc, #20]	; (1a124 <nrfx_power_clock_irq_handler+0x168>)
   1a110:	f00c fe3e 	bl	26d90 <nrf_clock_int_disable>
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1a114:	4b07      	ldr	r3, [pc, #28]	; (1a134 <nrfx_power_clock_irq_handler+0x178>)
   1a116:	681b      	ldr	r3, [r3, #0]
   1a118:	2001      	movs	r0, #1
   1a11a:	4798      	blx	r3
}
   1a11c:	bf00      	nop
   1a11e:	3720      	adds	r7, #32
   1a120:	46bd      	mov	sp, r7
   1a122:	bd80      	pop	{r7, pc}
   1a124:	40005000 	.word	0x40005000
   1a128:	20014e64 	.word	0x20014e64
   1a12c:	0002cc8c 	.word	0x0002cc8c
   1a130:	0002b61c 	.word	0x0002b61c
   1a134:	20014e68 	.word	0x20014e68
   1a138:	0002b644 	.word	0x0002b644

0001a13c <log_const_source_id>:
{
   1a13c:	b480      	push	{r7}
   1a13e:	b083      	sub	sp, #12
   1a140:	af00      	add	r7, sp, #0
   1a142:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1a144:	687b      	ldr	r3, [r7, #4]
   1a146:	4a04      	ldr	r2, [pc, #16]	; (1a158 <log_const_source_id+0x1c>)
   1a148:	1a9b      	subs	r3, r3, r2
   1a14a:	08db      	lsrs	r3, r3, #3
}
   1a14c:	4618      	mov	r0, r3
   1a14e:	370c      	adds	r7, #12
   1a150:	46bd      	mov	sp, r7
   1a152:	bc80      	pop	{r7}
   1a154:	4770      	bx	lr
   1a156:	bf00      	nop
   1a158:	00029354 	.word	0x00029354

0001a15c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   1a15c:	b590      	push	{r4, r7, lr}
   1a15e:	b091      	sub	sp, #68	; 0x44
   1a160:	af00      	add	r7, sp, #0
   1a162:	6078      	str	r0, [r7, #4]
	__asm__ volatile(
   1a164:	f04f 0320 	mov.w	r3, #32
   1a168:	f3ef 8211 	mrs	r2, BASEPRI
   1a16c:	f383 8811 	msr	BASEPRI, r3
   1a170:	f3bf 8f6f 	isb	sy
   1a174:	627a      	str	r2, [r7, #36]	; 0x24
   1a176:	623b      	str	r3, [r7, #32]
	return key;
   1a178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    nrfx_err_t err_code;

    NRFX_CRITICAL_SECTION_ENTER();
   1a17a:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   1a17c:	4b5e      	ldr	r3, [pc, #376]	; (1a2f8 <nrfx_dppi_channel_alloc+0x19c>)
   1a17e:	681b      	ldr	r3, [r3, #0]
   1a180:	43db      	mvns	r3, r3
   1a182:	b29b      	uxth	r3, r3
   1a184:	63bb      	str	r3, [r7, #56]	; 0x38
    uint8_t channel = 0;
   1a186:	2300      	movs	r3, #0
   1a188:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (!remaining_channels)
   1a18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1a18e:	2b00      	cmp	r3, #0
   1a190:	d107      	bne.n	1a1a2 <nrfx_dppi_channel_alloc+0x46>
    {
        err_code = NRFX_ERROR_NO_MEM;
   1a192:	4b5a      	ldr	r3, [pc, #360]	; (1a2fc <nrfx_dppi_channel_alloc+0x1a0>)
   1a194:	633b      	str	r3, [r7, #48]	; 0x30
   1a196:	e01c      	b.n	1a1d2 <nrfx_dppi_channel_alloc+0x76>
    else
    {
        // Find first free channel
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
        {
            channel++;
   1a198:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   1a19c:	3301      	adds	r3, #1
   1a19e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        while (!(remaining_channels & DPPI_BIT_SET(channel)))
   1a1a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   1a1a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   1a1a8:	fa22 f303 	lsr.w	r3, r2, r3
   1a1ac:	f003 0301 	and.w	r3, r3, #1
   1a1b0:	2b00      	cmp	r3, #0
   1a1b2:	d0f1      	beq.n	1a198 <nrfx_dppi_channel_alloc+0x3c>
        }

        m_allocated_channels |= DPPI_BIT_SET(channel);
   1a1b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   1a1b8:	2201      	movs	r2, #1
   1a1ba:	409a      	lsls	r2, r3
   1a1bc:	4b4e      	ldr	r3, [pc, #312]	; (1a2f8 <nrfx_dppi_channel_alloc+0x19c>)
   1a1be:	681b      	ldr	r3, [r3, #0]
   1a1c0:	4313      	orrs	r3, r2
   1a1c2:	4a4d      	ldr	r2, [pc, #308]	; (1a2f8 <nrfx_dppi_channel_alloc+0x19c>)
   1a1c4:	6013      	str	r3, [r2, #0]
        *p_channel = channel;
   1a1c6:	687b      	ldr	r3, [r7, #4]
   1a1c8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
   1a1cc:	701a      	strb	r2, [r3, #0]

        err_code = NRFX_SUCCESS;
   1a1ce:	4b4c      	ldr	r3, [pc, #304]	; (1a300 <nrfx_dppi_channel_alloc+0x1a4>)
   1a1d0:	633b      	str	r3, [r7, #48]	; 0x30
   1a1d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a1d4:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   1a1d6:	69fb      	ldr	r3, [r7, #28]
   1a1d8:	f383 8811 	msr	BASEPRI, r3
   1a1dc:	f3bf 8f6f 	isb	sy
}
   1a1e0:	bf00      	nop
    }
    NRFX_CRITICAL_SECTION_EXIT();

    if (err_code == NRFX_SUCCESS)
   1a1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a1e4:	4a46      	ldr	r2, [pc, #280]	; (1a300 <nrfx_dppi_channel_alloc+0x1a4>)
   1a1e6:	4293      	cmp	r3, r2
   1a1e8:	d13b      	bne.n	1a262 <nrfx_dppi_channel_alloc+0x106>
    {
        NRFX_LOG_INFO("Allocated channel: %d.", *p_channel);
   1a1ea:	2300      	movs	r3, #0
   1a1ec:	2b02      	cmp	r3, #2
   1a1ee:	d97a      	bls.n	1a2e6 <nrfx_dppi_channel_alloc+0x18a>
   1a1f0:	f00c fe2b 	bl	26e4a <k_is_user_context>
   1a1f4:	4603      	mov	r3, r0
   1a1f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   1a1fa:	2300      	movs	r3, #0
   1a1fc:	61bb      	str	r3, [r7, #24]
   1a1fe:	2300      	movs	r3, #0
   1a200:	2b00      	cmp	r3, #0
   1a202:	d007      	beq.n	1a214 <nrfx_dppi_channel_alloc+0xb8>
   1a204:	4b3f      	ldr	r3, [pc, #252]	; (1a304 <nrfx_dppi_channel_alloc+0x1a8>)
   1a206:	681b      	ldr	r3, [r3, #0]
   1a208:	4618      	mov	r0, r3
   1a20a:	f7ff ff97 	bl	1a13c <log_const_source_id>
   1a20e:	4603      	mov	r3, r0
   1a210:	b29b      	uxth	r3, r3
   1a212:	e000      	b.n	1a216 <nrfx_dppi_channel_alloc+0xba>
   1a214:	2300      	movs	r3, #0
   1a216:	853b      	strh	r3, [r7, #40]	; 0x28
   1a218:	7d3b      	ldrb	r3, [r7, #20]
   1a21a:	2203      	movs	r2, #3
   1a21c:	f362 0302 	bfi	r3, r2, #0, #3
   1a220:	753b      	strb	r3, [r7, #20]
   1a222:	7d3b      	ldrb	r3, [r7, #20]
   1a224:	f36f 03c5 	bfc	r3, #3, #3
   1a228:	753b      	strb	r3, [r7, #20]
   1a22a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   1a22c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1a230:	b29a      	uxth	r2, r3
   1a232:	8abb      	ldrh	r3, [r7, #20]
   1a234:	f362 138f 	bfi	r3, r2, #6, #10
   1a238:	82bb      	strh	r3, [r7, #20]
   1a23a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   1a23e:	2b00      	cmp	r3, #0
   1a240:	d007      	beq.n	1a252 <nrfx_dppi_channel_alloc+0xf6>
   1a242:	687b      	ldr	r3, [r7, #4]
   1a244:	781b      	ldrb	r3, [r3, #0]
   1a246:	461a      	mov	r2, r3
   1a248:	492f      	ldr	r1, [pc, #188]	; (1a308 <nrfx_dppi_channel_alloc+0x1ac>)
   1a24a:	8ab8      	ldrh	r0, [r7, #20]
   1a24c:	f7f8 ff80 	bl	13150 <log_from_user>
   1a250:	e04c      	b.n	1a2ec <nrfx_dppi_channel_alloc+0x190>
   1a252:	687b      	ldr	r3, [r7, #4]
   1a254:	781b      	ldrb	r3, [r3, #0]
   1a256:	8aba      	ldrh	r2, [r7, #20]
   1a258:	4619      	mov	r1, r3
   1a25a:	482b      	ldr	r0, [pc, #172]	; (1a308 <nrfx_dppi_channel_alloc+0x1ac>)
   1a25c:	f008 fc67 	bl	22b2e <log_1>
   1a260:	e044      	b.n	1a2ec <nrfx_dppi_channel_alloc+0x190>
    }
    else
    {
        NRFX_LOG_INFO("Function: %s, error code: %s.",
   1a262:	2300      	movs	r3, #0
   1a264:	2b02      	cmp	r3, #2
   1a266:	d940      	bls.n	1a2ea <nrfx_dppi_channel_alloc+0x18e>
   1a268:	f00c fdef 	bl	26e4a <k_is_user_context>
   1a26c:	4603      	mov	r3, r0
   1a26e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   1a272:	2300      	movs	r3, #0
   1a274:	613b      	str	r3, [r7, #16]
   1a276:	2300      	movs	r3, #0
   1a278:	2b00      	cmp	r3, #0
   1a27a:	d007      	beq.n	1a28c <nrfx_dppi_channel_alloc+0x130>
   1a27c:	4b21      	ldr	r3, [pc, #132]	; (1a304 <nrfx_dppi_channel_alloc+0x1a8>)
   1a27e:	681b      	ldr	r3, [r3, #0]
   1a280:	4618      	mov	r0, r3
   1a282:	f7ff ff5b 	bl	1a13c <log_const_source_id>
   1a286:	4603      	mov	r3, r0
   1a288:	b29b      	uxth	r3, r3
   1a28a:	e000      	b.n	1a28e <nrfx_dppi_channel_alloc+0x132>
   1a28c:	2300      	movs	r3, #0
   1a28e:	85bb      	strh	r3, [r7, #44]	; 0x2c
   1a290:	7b3b      	ldrb	r3, [r7, #12]
   1a292:	2203      	movs	r2, #3
   1a294:	f362 0302 	bfi	r3, r2, #0, #3
   1a298:	733b      	strb	r3, [r7, #12]
   1a29a:	7b3b      	ldrb	r3, [r7, #12]
   1a29c:	f36f 03c5 	bfc	r3, #3, #3
   1a2a0:	733b      	strb	r3, [r7, #12]
   1a2a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   1a2a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1a2a8:	b29a      	uxth	r2, r3
   1a2aa:	89bb      	ldrh	r3, [r7, #12]
   1a2ac:	f362 138f 	bfi	r3, r2, #6, #10
   1a2b0:	81bb      	strh	r3, [r7, #12]
   1a2b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1a2b6:	2b00      	cmp	r3, #0
   1a2b8:	d009      	beq.n	1a2ce <nrfx_dppi_channel_alloc+0x172>
   1a2ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1a2bc:	f7ff fb34 	bl	19928 <nrfx_error_string_get>
   1a2c0:	4603      	mov	r3, r0
   1a2c2:	4a12      	ldr	r2, [pc, #72]	; (1a30c <nrfx_dppi_channel_alloc+0x1b0>)
   1a2c4:	4912      	ldr	r1, [pc, #72]	; (1a310 <nrfx_dppi_channel_alloc+0x1b4>)
   1a2c6:	89b8      	ldrh	r0, [r7, #12]
   1a2c8:	f7f8 ff42 	bl	13150 <log_from_user>
   1a2cc:	e00e      	b.n	1a2ec <nrfx_dppi_channel_alloc+0x190>
   1a2ce:	4c0f      	ldr	r4, [pc, #60]	; (1a30c <nrfx_dppi_channel_alloc+0x1b0>)
   1a2d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1a2d2:	f7ff fb29 	bl	19928 <nrfx_error_string_get>
   1a2d6:	4603      	mov	r3, r0
   1a2d8:	461a      	mov	r2, r3
   1a2da:	89bb      	ldrh	r3, [r7, #12]
   1a2dc:	4621      	mov	r1, r4
   1a2de:	480c      	ldr	r0, [pc, #48]	; (1a310 <nrfx_dppi_channel_alloc+0x1b4>)
   1a2e0:	f008 fc3c 	bl	22b5c <log_2>
   1a2e4:	e002      	b.n	1a2ec <nrfx_dppi_channel_alloc+0x190>
        NRFX_LOG_INFO("Allocated channel: %d.", *p_channel);
   1a2e6:	bf00      	nop
   1a2e8:	e000      	b.n	1a2ec <nrfx_dppi_channel_alloc+0x190>
        NRFX_LOG_INFO("Function: %s, error code: %s.",
   1a2ea:	bf00      	nop
                      __func__,
                      NRFX_LOG_ERROR_STRING_GET(err_code));
    }
    return err_code;
   1a2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   1a2ee:	4618      	mov	r0, r3
   1a2f0:	3744      	adds	r7, #68	; 0x44
   1a2f2:	46bd      	mov	sp, r7
   1a2f4:	bd90      	pop	{r4, r7, pc}
   1a2f6:	bf00      	nop
   1a2f8:	20014e74 	.word	0x20014e74
   1a2fc:	0bad0002 	.word	0x0bad0002
   1a300:	0bad0000 	.word	0x0bad0000
   1a304:	20014e70 	.word	0x20014e70
   1a308:	0002b66c 	.word	0x0002b66c
   1a30c:	0002ccac 	.word	0x0002ccac
   1a310:	0002b684 	.word	0x0002b684

0001a314 <log_const_source_id>:
{
   1a314:	b480      	push	{r7}
   1a316:	b083      	sub	sp, #12
   1a318:	af00      	add	r7, sp, #0
   1a31a:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1a31c:	687b      	ldr	r3, [r7, #4]
   1a31e:	4a04      	ldr	r2, [pc, #16]	; (1a330 <log_const_source_id+0x1c>)
   1a320:	1a9b      	subs	r3, r3, r2
   1a322:	08db      	lsrs	r3, r3, #3
}
   1a324:	4618      	mov	r0, r3
   1a326:	370c      	adds	r7, #12
   1a328:	46bd      	mov	sp, r7
   1a32a:	bc80      	pop	{r7}
   1a32c:	4770      	bx	lr
   1a32e:	bf00      	nop
   1a330:	00029354 	.word	0x00029354

0001a334 <is_allocated_channel>:
    m_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
   1a334:	b480      	push	{r7}
   1a336:	b083      	sub	sp, #12
   1a338:	af00      	add	r7, sp, #0
   1a33a:	4603      	mov	r3, r0
   1a33c:	71fb      	strb	r3, [r7, #7]
    return m_cb.allocated_channels_mask & (1UL << index);
   1a33e:	4b08      	ldr	r3, [pc, #32]	; (1a360 <is_allocated_channel+0x2c>)
   1a340:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   1a342:	79fb      	ldrb	r3, [r7, #7]
   1a344:	2101      	movs	r1, #1
   1a346:	fa01 f303 	lsl.w	r3, r1, r3
   1a34a:	4013      	ands	r3, r2
   1a34c:	2b00      	cmp	r3, #0
   1a34e:	bf14      	ite	ne
   1a350:	2301      	movne	r3, #1
   1a352:	2300      	moveq	r3, #0
   1a354:	b2db      	uxtb	r3, r3
}
   1a356:	4618      	mov	r0, r3
   1a358:	370c      	adds	r7, #12
   1a35a:	46bd      	mov	sp, r7
   1a35c:	bc80      	pop	{r7}
   1a35e:	4770      	bx	lr
   1a360:	20014e7c 	.word	0x20014e7c

0001a364 <channel_allocated_set>:
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
   1a364:	b480      	push	{r7}
   1a366:	b083      	sub	sp, #12
   1a368:	af00      	add	r7, sp, #0
   1a36a:	4603      	mov	r3, r0
   1a36c:	71fb      	strb	r3, [r7, #7]
    m_cb.allocated_channels_mask |= (1UL << index);
   1a36e:	4b07      	ldr	r3, [pc, #28]	; (1a38c <channel_allocated_set+0x28>)
   1a370:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   1a372:	79fb      	ldrb	r3, [r7, #7]
   1a374:	2101      	movs	r1, #1
   1a376:	fa01 f303 	lsl.w	r3, r1, r3
   1a37a:	4313      	orrs	r3, r2
   1a37c:	4a03      	ldr	r2, [pc, #12]	; (1a38c <channel_allocated_set+0x28>)
   1a37e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
   1a380:	bf00      	nop
   1a382:	370c      	adds	r7, #12
   1a384:	46bd      	mov	sp, r7
   1a386:	bc80      	pop	{r7}
   1a388:	4770      	bx	lr
   1a38a:	bf00      	nop
   1a38c:	20014e7c 	.word	0x20014e7c

0001a390 <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
   1a390:	b480      	push	{r7}
   1a392:	b083      	sub	sp, #12
   1a394:	af00      	add	r7, sp, #0
   1a396:	4603      	mov	r3, r0
   1a398:	71fb      	strb	r3, [r7, #7]
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1a39a:	4b07      	ldr	r3, [pc, #28]	; (1a3b8 <channel_allocated_clr+0x28>)
   1a39c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   1a39e:	79fb      	ldrb	r3, [r7, #7]
   1a3a0:	2101      	movs	r1, #1
   1a3a2:	fa01 f303 	lsl.w	r3, r1, r3
   1a3a6:	43db      	mvns	r3, r3
   1a3a8:	4013      	ands	r3, r2
   1a3aa:	4a03      	ldr	r2, [pc, #12]	; (1a3b8 <channel_allocated_clr+0x28>)
   1a3ac:	64d3      	str	r3, [r2, #76]	; 0x4c
}
   1a3ae:	bf00      	nop
   1a3b0:	370c      	adds	r7, #12
   1a3b2:	46bd      	mov	sp, r7
   1a3b4:	bc80      	pop	{r7}
   1a3b6:	4770      	bx	lr
   1a3b8:	20014e7c 	.word	0x20014e7c

0001a3bc <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
   1a3bc:	b590      	push	{r4, r7, lr}
   1a3be:	b08b      	sub	sp, #44	; 0x2c
   1a3c0:	af00      	add	r7, sp, #0
   1a3c2:	4603      	mov	r3, r0
   1a3c4:	71fb      	strb	r3, [r7, #7]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1a3c6:	4b36      	ldr	r3, [pc, #216]	; (1a4a0 <nrfx_gpiote_channel_free+0xe4>)
   1a3c8:	627b      	str	r3, [r7, #36]	; 0x24

    if (!is_app_channel(channel))
   1a3ca:	79fb      	ldrb	r3, [r7, #7]
   1a3cc:	4618      	mov	r0, r3
   1a3ce:	f00c fd4a 	bl	26e66 <is_app_channel>
   1a3d2:	4603      	mov	r3, r0
   1a3d4:	f083 0301 	eor.w	r3, r3, #1
   1a3d8:	b2db      	uxtb	r3, r3
   1a3da:	2b00      	cmp	r3, #0
   1a3dc:	d002      	beq.n	1a3e4 <nrfx_gpiote_channel_free+0x28>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1a3de:	4b31      	ldr	r3, [pc, #196]	; (1a4a4 <nrfx_gpiote_channel_free+0xe8>)
   1a3e0:	627b      	str	r3, [r7, #36]	; 0x24
   1a3e2:	e017      	b.n	1a414 <nrfx_gpiote_channel_free+0x58>
	__asm__ volatile(
   1a3e4:	f04f 0320 	mov.w	r3, #32
   1a3e8:	f3ef 8211 	mrs	r2, BASEPRI
   1a3ec:	f383 8811 	msr	BASEPRI, r3
   1a3f0:	f3bf 8f6f 	isb	sy
   1a3f4:	617a      	str	r2, [r7, #20]
   1a3f6:	613b      	str	r3, [r7, #16]
	return key;
   1a3f8:	697b      	ldr	r3, [r7, #20]
    }
    else
    {
        NRFX_CRITICAL_SECTION_ENTER();
   1a3fa:	623b      	str	r3, [r7, #32]
        channel_allocated_clr(channel);
   1a3fc:	79fb      	ldrb	r3, [r7, #7]
   1a3fe:	4618      	mov	r0, r3
   1a400:	f7ff ffc6 	bl	1a390 <channel_allocated_clr>
   1a404:	6a3b      	ldr	r3, [r7, #32]
   1a406:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
   1a408:	69bb      	ldr	r3, [r7, #24]
   1a40a:	f383 8811 	msr	BASEPRI, r3
   1a40e:	f3bf 8f6f 	isb	sy
}
   1a412:	bf00      	nop
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
   1a414:	2300      	movs	r3, #0
   1a416:	2b02      	cmp	r3, #2
   1a418:	d93c      	bls.n	1a494 <nrfx_gpiote_channel_free+0xd8>
   1a41a:	f00c fd1d 	bl	26e58 <k_is_user_context>
   1a41e:	4603      	mov	r3, r0
   1a420:	77fb      	strb	r3, [r7, #31]
   1a422:	2300      	movs	r3, #0
   1a424:	60fb      	str	r3, [r7, #12]
   1a426:	2300      	movs	r3, #0
   1a428:	2b00      	cmp	r3, #0
   1a42a:	d007      	beq.n	1a43c <nrfx_gpiote_channel_free+0x80>
   1a42c:	4b1e      	ldr	r3, [pc, #120]	; (1a4a8 <nrfx_gpiote_channel_free+0xec>)
   1a42e:	681b      	ldr	r3, [r3, #0]
   1a430:	4618      	mov	r0, r3
   1a432:	f7ff ff6f 	bl	1a314 <log_const_source_id>
   1a436:	4603      	mov	r3, r0
   1a438:	b29b      	uxth	r3, r3
   1a43a:	e000      	b.n	1a43e <nrfx_gpiote_channel_free+0x82>
   1a43c:	2300      	movs	r3, #0
   1a43e:	83bb      	strh	r3, [r7, #28]
   1a440:	7a3b      	ldrb	r3, [r7, #8]
   1a442:	2203      	movs	r2, #3
   1a444:	f362 0302 	bfi	r3, r2, #0, #3
   1a448:	723b      	strb	r3, [r7, #8]
   1a44a:	7a3b      	ldrb	r3, [r7, #8]
   1a44c:	f36f 03c5 	bfc	r3, #3, #3
   1a450:	723b      	strb	r3, [r7, #8]
   1a452:	8bbb      	ldrh	r3, [r7, #28]
   1a454:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1a458:	b29a      	uxth	r2, r3
   1a45a:	893b      	ldrh	r3, [r7, #8]
   1a45c:	f362 138f 	bfi	r3, r2, #6, #10
   1a460:	813b      	strh	r3, [r7, #8]
   1a462:	7ffb      	ldrb	r3, [r7, #31]
   1a464:	2b00      	cmp	r3, #0
   1a466:	d009      	beq.n	1a47c <nrfx_gpiote_channel_free+0xc0>
   1a468:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1a46a:	f7ff fa5d 	bl	19928 <nrfx_error_string_get>
   1a46e:	4603      	mov	r3, r0
   1a470:	4a0e      	ldr	r2, [pc, #56]	; (1a4ac <nrfx_gpiote_channel_free+0xf0>)
   1a472:	490f      	ldr	r1, [pc, #60]	; (1a4b0 <nrfx_gpiote_channel_free+0xf4>)
   1a474:	8938      	ldrh	r0, [r7, #8]
   1a476:	f7f8 fe6b 	bl	13150 <log_from_user>
   1a47a:	e00c      	b.n	1a496 <nrfx_gpiote_channel_free+0xda>
   1a47c:	4c0b      	ldr	r4, [pc, #44]	; (1a4ac <nrfx_gpiote_channel_free+0xf0>)
   1a47e:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1a480:	f7ff fa52 	bl	19928 <nrfx_error_string_get>
   1a484:	4603      	mov	r3, r0
   1a486:	461a      	mov	r2, r3
   1a488:	893b      	ldrh	r3, [r7, #8]
   1a48a:	4621      	mov	r1, r4
   1a48c:	4808      	ldr	r0, [pc, #32]	; (1a4b0 <nrfx_gpiote_channel_free+0xf4>)
   1a48e:	f008 fb65 	bl	22b5c <log_2>
   1a492:	e000      	b.n	1a496 <nrfx_gpiote_channel_free+0xda>
   1a494:	bf00      	nop
    return err_code;
   1a496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1a498:	4618      	mov	r0, r3
   1a49a:	372c      	adds	r7, #44	; 0x2c
   1a49c:	46bd      	mov	sp, r7
   1a49e:	bd90      	pop	{r4, r7, pc}
   1a4a0:	0bad0000 	.word	0x0bad0000
   1a4a4:	0bad0004 	.word	0x0bad0004
   1a4a8:	20014e78 	.word	0x20014e78
   1a4ac:	0002ccc4 	.word	0x0002ccc4
   1a4b0:	0002b764 	.word	0x0002b764

0001a4b4 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1a4b4:	b590      	push	{r4, r7, lr}
   1a4b6:	b091      	sub	sp, #68	; 0x44
   1a4b8:	af00      	add	r7, sp, #0
   1a4ba:	6078      	str	r0, [r7, #4]
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1a4bc:	4b6b      	ldr	r3, [pc, #428]	; (1a66c <nrfx_gpiote_channel_alloc+0x1b8>)
   1a4be:	637b      	str	r3, [r7, #52]	; 0x34
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1a4c0:	23ff      	movs	r3, #255	; 0xff
   1a4c2:	63fb      	str	r3, [r7, #60]	; 0x3c

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1a4c4:	2300      	movs	r3, #0
   1a4c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
   1a4ca:	e082      	b.n	1a5d2 <nrfx_gpiote_channel_alloc+0x11e>
	__asm__ volatile(
   1a4cc:	f04f 0320 	mov.w	r3, #32
   1a4d0:	f3ef 8211 	mrs	r2, BASEPRI
   1a4d4:	f383 8811 	msr	BASEPRI, r3
   1a4d8:	f3bf 8f6f 	isb	sy
   1a4dc:	627a      	str	r2, [r7, #36]	; 0x24
   1a4de:	623b      	str	r3, [r7, #32]
	return key;
   1a4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
        NRFX_CRITICAL_SECTION_ENTER();
   1a4e2:	633b      	str	r3, [r7, #48]	; 0x30
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1a4e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
   1a4e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1a4ea:	fa22 f303 	lsr.w	r3, r2, r3
   1a4ee:	f003 0301 	and.w	r3, r3, #1
   1a4f2:	2b00      	cmp	r3, #0
   1a4f4:	d015      	beq.n	1a522 <nrfx_gpiote_channel_alloc+0x6e>
   1a4f6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
   1a4fa:	4618      	mov	r0, r3
   1a4fc:	f7ff ff1a 	bl	1a334 <is_allocated_channel>
   1a500:	4603      	mov	r3, r0
   1a502:	f083 0301 	eor.w	r3, r3, #1
   1a506:	b2db      	uxtb	r3, r3
   1a508:	2b00      	cmp	r3, #0
   1a50a:	d00a      	beq.n	1a522 <nrfx_gpiote_channel_alloc+0x6e>
        {
            channel_allocated_set(ch_idx);
   1a50c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
   1a510:	4618      	mov	r0, r3
   1a512:	f7ff ff27 	bl	1a364 <channel_allocated_set>
            *p_channel = ch_idx;
   1a516:	687b      	ldr	r3, [r7, #4]
   1a518:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
   1a51c:	701a      	strb	r2, [r3, #0]
            err_code = NRFX_SUCCESS;
   1a51e:	4b54      	ldr	r3, [pc, #336]	; (1a670 <nrfx_gpiote_channel_alloc+0x1bc>)
   1a520:	637b      	str	r3, [r7, #52]	; 0x34
   1a522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a524:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   1a526:	69fb      	ldr	r3, [r7, #28]
   1a528:	f383 8811 	msr	BASEPRI, r3
   1a52c:	f3bf 8f6f 	isb	sy
}
   1a530:	bf00      	nop
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1a532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a534:	4a4e      	ldr	r2, [pc, #312]	; (1a670 <nrfx_gpiote_channel_alloc+0x1bc>)
   1a536:	4293      	cmp	r3, r2
   1a538:	d13d      	bne.n	1a5b6 <nrfx_gpiote_channel_alloc+0x102>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
   1a53a:	2300      	movs	r3, #0
   1a53c:	2b02      	cmp	r3, #2
   1a53e:	d801      	bhi.n	1a544 <nrfx_gpiote_channel_alloc+0x90>
   1a540:	bf00      	nop
            break;
   1a542:	e04a      	b.n	1a5da <nrfx_gpiote_channel_alloc+0x126>
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
   1a544:	f00c fc88 	bl	26e58 <k_is_user_context>
   1a548:	4603      	mov	r3, r0
   1a54a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   1a54e:	2300      	movs	r3, #0
   1a550:	61bb      	str	r3, [r7, #24]
   1a552:	2300      	movs	r3, #0
   1a554:	2b00      	cmp	r3, #0
   1a556:	d007      	beq.n	1a568 <nrfx_gpiote_channel_alloc+0xb4>
   1a558:	4b46      	ldr	r3, [pc, #280]	; (1a674 <nrfx_gpiote_channel_alloc+0x1c0>)
   1a55a:	681b      	ldr	r3, [r3, #0]
   1a55c:	4618      	mov	r0, r3
   1a55e:	f7ff fed9 	bl	1a314 <log_const_source_id>
   1a562:	4603      	mov	r3, r0
   1a564:	b29b      	uxth	r3, r3
   1a566:	e000      	b.n	1a56a <nrfx_gpiote_channel_alloc+0xb6>
   1a568:	2300      	movs	r3, #0
   1a56a:	85bb      	strh	r3, [r7, #44]	; 0x2c
   1a56c:	7d3b      	ldrb	r3, [r7, #20]
   1a56e:	2203      	movs	r2, #3
   1a570:	f362 0302 	bfi	r3, r2, #0, #3
   1a574:	753b      	strb	r3, [r7, #20]
   1a576:	7d3b      	ldrb	r3, [r7, #20]
   1a578:	f36f 03c5 	bfc	r3, #3, #3
   1a57c:	753b      	strb	r3, [r7, #20]
   1a57e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   1a580:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1a584:	b29a      	uxth	r2, r3
   1a586:	8abb      	ldrh	r3, [r7, #20]
   1a588:	f362 138f 	bfi	r3, r2, #6, #10
   1a58c:	82bb      	strh	r3, [r7, #20]
   1a58e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   1a592:	2b00      	cmp	r3, #0
   1a594:	d007      	beq.n	1a5a6 <nrfx_gpiote_channel_alloc+0xf2>
   1a596:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
   1a59a:	461a      	mov	r2, r3
   1a59c:	4936      	ldr	r1, [pc, #216]	; (1a678 <nrfx_gpiote_channel_alloc+0x1c4>)
   1a59e:	8ab8      	ldrh	r0, [r7, #20]
   1a5a0:	f7f8 fdd6 	bl	13150 <log_from_user>
            break;
   1a5a4:	e019      	b.n	1a5da <nrfx_gpiote_channel_alloc+0x126>
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
   1a5a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
   1a5aa:	8aba      	ldrh	r2, [r7, #20]
   1a5ac:	4619      	mov	r1, r3
   1a5ae:	4832      	ldr	r0, [pc, #200]	; (1a678 <nrfx_gpiote_channel_alloc+0x1c4>)
   1a5b0:	f008 fabd 	bl	22b2e <log_1>
            break;
   1a5b4:	e011      	b.n	1a5da <nrfx_gpiote_channel_alloc+0x126>
        }

        mask &= ~(1UL << ch_idx);
   1a5b6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
   1a5ba:	2201      	movs	r2, #1
   1a5bc:	fa02 f303 	lsl.w	r3, r2, r3
   1a5c0:	43db      	mvns	r3, r3
   1a5c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1a5c4:	4013      	ands	r3, r2
   1a5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1a5c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
   1a5cc:	3301      	adds	r3, #1
   1a5ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
   1a5d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1a5d4:	2b00      	cmp	r3, #0
   1a5d6:	f47f af79 	bne.w	1a4cc <nrfx_gpiote_channel_alloc+0x18>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
   1a5da:	2300      	movs	r3, #0
   1a5dc:	2b02      	cmp	r3, #2
   1a5de:	d93e      	bls.n	1a65e <nrfx_gpiote_channel_alloc+0x1aa>
   1a5e0:	f00c fc3a 	bl	26e58 <k_is_user_context>
   1a5e4:	4603      	mov	r3, r0
   1a5e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   1a5ea:	2300      	movs	r3, #0
   1a5ec:	613b      	str	r3, [r7, #16]
   1a5ee:	2300      	movs	r3, #0
   1a5f0:	2b00      	cmp	r3, #0
   1a5f2:	d007      	beq.n	1a604 <nrfx_gpiote_channel_alloc+0x150>
   1a5f4:	4b1f      	ldr	r3, [pc, #124]	; (1a674 <nrfx_gpiote_channel_alloc+0x1c0>)
   1a5f6:	681b      	ldr	r3, [r3, #0]
   1a5f8:	4618      	mov	r0, r3
   1a5fa:	f7ff fe8b 	bl	1a314 <log_const_source_id>
   1a5fe:	4603      	mov	r3, r0
   1a600:	b29b      	uxth	r3, r3
   1a602:	e000      	b.n	1a606 <nrfx_gpiote_channel_alloc+0x152>
   1a604:	2300      	movs	r3, #0
   1a606:	853b      	strh	r3, [r7, #40]	; 0x28
   1a608:	7b3b      	ldrb	r3, [r7, #12]
   1a60a:	2203      	movs	r2, #3
   1a60c:	f362 0302 	bfi	r3, r2, #0, #3
   1a610:	733b      	strb	r3, [r7, #12]
   1a612:	7b3b      	ldrb	r3, [r7, #12]
   1a614:	f36f 03c5 	bfc	r3, #3, #3
   1a618:	733b      	strb	r3, [r7, #12]
   1a61a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   1a61c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1a620:	b29a      	uxth	r2, r3
   1a622:	89bb      	ldrh	r3, [r7, #12]
   1a624:	f362 138f 	bfi	r3, r2, #6, #10
   1a628:	81bb      	strh	r3, [r7, #12]
   1a62a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
   1a62e:	2b00      	cmp	r3, #0
   1a630:	d009      	beq.n	1a646 <nrfx_gpiote_channel_alloc+0x192>
   1a632:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1a634:	f7ff f978 	bl	19928 <nrfx_error_string_get>
   1a638:	4603      	mov	r3, r0
   1a63a:	4a10      	ldr	r2, [pc, #64]	; (1a67c <nrfx_gpiote_channel_alloc+0x1c8>)
   1a63c:	4910      	ldr	r1, [pc, #64]	; (1a680 <nrfx_gpiote_channel_alloc+0x1cc>)
   1a63e:	89b8      	ldrh	r0, [r7, #12]
   1a640:	f7f8 fd86 	bl	13150 <log_from_user>
   1a644:	e00c      	b.n	1a660 <nrfx_gpiote_channel_alloc+0x1ac>
   1a646:	4c0d      	ldr	r4, [pc, #52]	; (1a67c <nrfx_gpiote_channel_alloc+0x1c8>)
   1a648:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1a64a:	f7ff f96d 	bl	19928 <nrfx_error_string_get>
   1a64e:	4603      	mov	r3, r0
   1a650:	461a      	mov	r2, r3
   1a652:	89bb      	ldrh	r3, [r7, #12]
   1a654:	4621      	mov	r1, r4
   1a656:	480a      	ldr	r0, [pc, #40]	; (1a680 <nrfx_gpiote_channel_alloc+0x1cc>)
   1a658:	f008 fa80 	bl	22b5c <log_2>
   1a65c:	e000      	b.n	1a660 <nrfx_gpiote_channel_alloc+0x1ac>
   1a65e:	bf00      	nop
    return err_code;
   1a660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   1a662:	4618      	mov	r0, r3
   1a664:	3744      	adds	r7, #68	; 0x44
   1a666:	46bd      	mov	sp, r7
   1a668:	bd90      	pop	{r4, r7, pc}
   1a66a:	bf00      	nop
   1a66c:	0bad0002 	.word	0x0bad0002
   1a670:	0bad0000 	.word	0x0bad0000
   1a674:	20014e78 	.word	0x20014e78
   1a678:	0002b800 	.word	0x0002b800
   1a67c:	0002cce0 	.word	0x0002cce0
   1a680:	0002b764 	.word	0x0002b764

0001a684 <nrf_ipc_receive_event_get>:
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
   1a684:	b580      	push	{r7, lr}
   1a686:	b082      	sub	sp, #8
   1a688:	af00      	add	r7, sp, #0
   1a68a:	4603      	mov	r3, r0
   1a68c:	71fb      	strb	r3, [r7, #7]
    NRFX_ASSERT(index < IPC_CH_NUM);
   1a68e:	79fb      	ldrb	r3, [r7, #7]
   1a690:	2b07      	cmp	r3, #7
   1a692:	d90b      	bls.n	1a6ac <nrf_ipc_receive_event_get+0x28>
   1a694:	f240 13e7 	movw	r3, #487	; 0x1e7
   1a698:	4a09      	ldr	r2, [pc, #36]	; (1a6c0 <nrf_ipc_receive_event_get+0x3c>)
   1a69a:	490a      	ldr	r1, [pc, #40]	; (1a6c4 <nrf_ipc_receive_event_get+0x40>)
   1a69c:	480a      	ldr	r0, [pc, #40]	; (1a6c8 <nrf_ipc_receive_event_get+0x44>)
   1a69e:	f006 fce3 	bl	21068 <printk>
   1a6a2:	f240 11e7 	movw	r1, #487	; 0x1e7
   1a6a6:	4806      	ldr	r0, [pc, #24]	; (1a6c0 <nrf_ipc_receive_event_get+0x3c>)
   1a6a8:	f007 fd8b 	bl	221c2 <assert_post_action>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   1a6ac:	79fb      	ldrb	r3, [r7, #7]
   1a6ae:	009b      	lsls	r3, r3, #2
   1a6b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
   1a6b4:	b29b      	uxth	r3, r3
}
   1a6b6:	4618      	mov	r0, r3
   1a6b8:	3708      	adds	r7, #8
   1a6ba:	46bd      	mov	sp, r7
   1a6bc:	bd80      	pop	{r7, pc}
   1a6be:	bf00      	nop
   1a6c0:	0002b964 	.word	0x0002b964
   1a6c4:	0002b998 	.word	0x0002b998
   1a6c8:	0002b9a4 	.word	0x0002b9a4

0001a6cc <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   1a6cc:	b580      	push	{r7, lr}
   1a6ce:	b084      	sub	sp, #16
   1a6d0:	af00      	add	r7, sp, #0
   1a6d2:	4603      	mov	r3, r0
   1a6d4:	60b9      	str	r1, [r7, #8]
   1a6d6:	607a      	str	r2, [r7, #4]
   1a6d8:	73fb      	strb	r3, [r7, #15]
    NRFX_ASSERT(handler);
   1a6da:	68bb      	ldr	r3, [r7, #8]
   1a6dc:	2b00      	cmp	r3, #0
   1a6de:	d109      	bne.n	1a6f4 <nrfx_ipc_init+0x28>
   1a6e0:	2334      	movs	r3, #52	; 0x34
   1a6e2:	4a10      	ldr	r2, [pc, #64]	; (1a724 <nrfx_ipc_init+0x58>)
   1a6e4:	4910      	ldr	r1, [pc, #64]	; (1a728 <nrfx_ipc_init+0x5c>)
   1a6e6:	4811      	ldr	r0, [pc, #68]	; (1a72c <nrfx_ipc_init+0x60>)
   1a6e8:	f006 fcbe 	bl	21068 <printk>
   1a6ec:	2134      	movs	r1, #52	; 0x34
   1a6ee:	480d      	ldr	r0, [pc, #52]	; (1a724 <nrfx_ipc_init+0x58>)
   1a6f0:	f007 fd67 	bl	221c2 <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1a6f4:	4b0e      	ldr	r3, [pc, #56]	; (1a730 <nrfx_ipc_init+0x64>)
   1a6f6:	791b      	ldrb	r3, [r3, #4]
   1a6f8:	2b00      	cmp	r3, #0
   1a6fa:	d001      	beq.n	1a700 <nrfx_ipc_init+0x34>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1a6fc:	4b0d      	ldr	r3, [pc, #52]	; (1a734 <nrfx_ipc_init+0x68>)
   1a6fe:	e00c      	b.n	1a71a <nrfx_ipc_init+0x4e>
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   1a700:	202a      	movs	r0, #42	; 0x2a
   1a702:	f009 fde0 	bl	242c6 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1a706:	4b0a      	ldr	r3, [pc, #40]	; (1a730 <nrfx_ipc_init+0x64>)
   1a708:	2201      	movs	r2, #1
   1a70a:	711a      	strb	r2, [r3, #4]
    m_ipc_cb.handler = handler;
   1a70c:	4a08      	ldr	r2, [pc, #32]	; (1a730 <nrfx_ipc_init+0x64>)
   1a70e:	68bb      	ldr	r3, [r7, #8]
   1a710:	6013      	str	r3, [r2, #0]
    m_ipc_cb.p_context = p_context;
   1a712:	4a07      	ldr	r2, [pc, #28]	; (1a730 <nrfx_ipc_init+0x64>)
   1a714:	687b      	ldr	r3, [r7, #4]
   1a716:	6093      	str	r3, [r2, #8]

    return NRFX_SUCCESS;
   1a718:	4b07      	ldr	r3, [pc, #28]	; (1a738 <nrfx_ipc_init+0x6c>)
}
   1a71a:	4618      	mov	r0, r3
   1a71c:	3710      	adds	r7, #16
   1a71e:	46bd      	mov	sp, r7
   1a720:	bd80      	pop	{r7, pc}
   1a722:	bf00      	nop
   1a724:	0002b9c4 	.word	0x0002b9c4
   1a728:	0002ba00 	.word	0x0002ba00
   1a72c:	0002b9a4 	.word	0x0002b9a4
   1a730:	20014ecc 	.word	0x20014ecc
   1a734:	0bad000c 	.word	0x0bad000c
   1a738:	0bad0000 	.word	0x0bad0000

0001a73c <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   1a73c:	b580      	push	{r7, lr}
   1a73e:	b084      	sub	sp, #16
   1a740:	af00      	add	r7, sp, #0
   1a742:	6078      	str	r0, [r7, #4]
    NRFX_ASSERT(p_config);
   1a744:	687b      	ldr	r3, [r7, #4]
   1a746:	2b00      	cmp	r3, #0
   1a748:	d109      	bne.n	1a75e <nrfx_ipc_config_load+0x22>
   1a74a:	2346      	movs	r3, #70	; 0x46
   1a74c:	4a23      	ldr	r2, [pc, #140]	; (1a7dc <nrfx_ipc_config_load+0xa0>)
   1a74e:	4924      	ldr	r1, [pc, #144]	; (1a7e0 <nrfx_ipc_config_load+0xa4>)
   1a750:	4824      	ldr	r0, [pc, #144]	; (1a7e4 <nrfx_ipc_config_load+0xa8>)
   1a752:	f006 fc89 	bl	21068 <printk>
   1a756:	2146      	movs	r1, #70	; 0x46
   1a758:	4820      	ldr	r0, [pc, #128]	; (1a7dc <nrfx_ipc_config_load+0xa0>)
   1a75a:	f007 fd32 	bl	221c2 <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1a75e:	4b22      	ldr	r3, [pc, #136]	; (1a7e8 <nrfx_ipc_config_load+0xac>)
   1a760:	791b      	ldrb	r3, [r3, #4]
   1a762:	2b01      	cmp	r3, #1
   1a764:	d009      	beq.n	1a77a <nrfx_ipc_config_load+0x3e>
   1a766:	2347      	movs	r3, #71	; 0x47
   1a768:	4a1c      	ldr	r2, [pc, #112]	; (1a7dc <nrfx_ipc_config_load+0xa0>)
   1a76a:	4920      	ldr	r1, [pc, #128]	; (1a7ec <nrfx_ipc_config_load+0xb0>)
   1a76c:	481d      	ldr	r0, [pc, #116]	; (1a7e4 <nrfx_ipc_config_load+0xa8>)
   1a76e:	f006 fc7b 	bl	21068 <printk>
   1a772:	2147      	movs	r1, #71	; 0x47
   1a774:	4819      	ldr	r0, [pc, #100]	; (1a7dc <nrfx_ipc_config_load+0xa0>)
   1a776:	f007 fd24 	bl	221c2 <assert_post_action>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1a77a:	2300      	movs	r3, #0
   1a77c:	60fb      	str	r3, [r7, #12]
   1a77e:	e00c      	b.n	1a79a <nrfx_ipc_config_load+0x5e>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   1a780:	68fb      	ldr	r3, [r7, #12]
   1a782:	b2d9      	uxtb	r1, r3
   1a784:	687b      	ldr	r3, [r7, #4]
   1a786:	68fa      	ldr	r2, [r7, #12]
   1a788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1a78c:	461a      	mov	r2, r3
   1a78e:	4818      	ldr	r0, [pc, #96]	; (1a7f0 <nrfx_ipc_config_load+0xb4>)
   1a790:	f00c fbb5 	bl	26efe <nrf_ipc_send_config_set>
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1a794:	68fb      	ldr	r3, [r7, #12]
   1a796:	3301      	adds	r3, #1
   1a798:	60fb      	str	r3, [r7, #12]
   1a79a:	68fb      	ldr	r3, [r7, #12]
   1a79c:	2b07      	cmp	r3, #7
   1a79e:	d9ef      	bls.n	1a780 <nrfx_ipc_config_load+0x44>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1a7a0:	2300      	movs	r3, #0
   1a7a2:	60fb      	str	r3, [r7, #12]
   1a7a4:	e00d      	b.n	1a7c2 <nrfx_ipc_config_load+0x86>
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   1a7a6:	68fb      	ldr	r3, [r7, #12]
   1a7a8:	b2d9      	uxtb	r1, r3
   1a7aa:	687b      	ldr	r3, [r7, #4]
   1a7ac:	68fa      	ldr	r2, [r7, #12]
   1a7ae:	3208      	adds	r2, #8
   1a7b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   1a7b4:	461a      	mov	r2, r3
   1a7b6:	480e      	ldr	r0, [pc, #56]	; (1a7f0 <nrfx_ipc_config_load+0xb4>)
   1a7b8:	f00c fbb4 	bl	26f24 <nrf_ipc_receive_config_set>
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1a7bc:	68fb      	ldr	r3, [r7, #12]
   1a7be:	3301      	adds	r3, #1
   1a7c0:	60fb      	str	r3, [r7, #12]
   1a7c2:	68fb      	ldr	r3, [r7, #12]
   1a7c4:	2b07      	cmp	r3, #7
   1a7c6:	d9ee      	bls.n	1a7a6 <nrfx_ipc_config_load+0x6a>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   1a7c8:	687b      	ldr	r3, [r7, #4]
   1a7ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a7cc:	4619      	mov	r1, r3
   1a7ce:	4808      	ldr	r0, [pc, #32]	; (1a7f0 <nrfx_ipc_config_load+0xb4>)
   1a7d0:	f00c fb6d 	bl	26eae <nrf_ipc_int_enable>
}
   1a7d4:	bf00      	nop
   1a7d6:	3710      	adds	r7, #16
   1a7d8:	46bd      	mov	sp, r7
   1a7da:	bd80      	pop	{r7, pc}
   1a7dc:	0002b9c4 	.word	0x0002b9c4
   1a7e0:	0002ba08 	.word	0x0002ba08
   1a7e4:	0002b9a4 	.word	0x0002b9a4
   1a7e8:	20014ecc 	.word	0x20014ecc
   1a7ec:	0002ba14 	.word	0x0002ba14
   1a7f0:	4002a000 	.word	0x4002a000

0001a7f4 <nrfx_ipc_uninit>:

void nrfx_ipc_uninit(void)
{
   1a7f4:	b580      	push	{r7, lr}
   1a7f6:	b082      	sub	sp, #8
   1a7f8:	af00      	add	r7, sp, #0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   1a7fa:	4b1d      	ldr	r3, [pc, #116]	; (1a870 <nrfx_ipc_uninit+0x7c>)
   1a7fc:	791b      	ldrb	r3, [r3, #4]
   1a7fe:	2b01      	cmp	r3, #1
   1a800:	d009      	beq.n	1a816 <nrfx_ipc_uninit+0x22>
   1a802:	2359      	movs	r3, #89	; 0x59
   1a804:	4a1b      	ldr	r2, [pc, #108]	; (1a874 <nrfx_ipc_uninit+0x80>)
   1a806:	491c      	ldr	r1, [pc, #112]	; (1a878 <nrfx_ipc_uninit+0x84>)
   1a808:	481c      	ldr	r0, [pc, #112]	; (1a87c <nrfx_ipc_uninit+0x88>)
   1a80a:	f006 fc2d 	bl	21068 <printk>
   1a80e:	2159      	movs	r1, #89	; 0x59
   1a810:	4818      	ldr	r0, [pc, #96]	; (1a874 <nrfx_ipc_uninit+0x80>)
   1a812:	f007 fcd6 	bl	221c2 <assert_post_action>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1a816:	2300      	movs	r3, #0
   1a818:	607b      	str	r3, [r7, #4]
   1a81a:	e009      	b.n	1a830 <nrfx_ipc_uninit+0x3c>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, 0);
   1a81c:	687b      	ldr	r3, [r7, #4]
   1a81e:	b2db      	uxtb	r3, r3
   1a820:	2200      	movs	r2, #0
   1a822:	4619      	mov	r1, r3
   1a824:	4816      	ldr	r0, [pc, #88]	; (1a880 <nrfx_ipc_uninit+0x8c>)
   1a826:	f00c fb6a 	bl	26efe <nrf_ipc_send_config_set>
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1a82a:	687b      	ldr	r3, [r7, #4]
   1a82c:	3301      	adds	r3, #1
   1a82e:	607b      	str	r3, [r7, #4]
   1a830:	687b      	ldr	r3, [r7, #4]
   1a832:	2b07      	cmp	r3, #7
   1a834:	d9f2      	bls.n	1a81c <nrfx_ipc_uninit+0x28>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   1a836:	2300      	movs	r3, #0
   1a838:	607b      	str	r3, [r7, #4]
   1a83a:	e009      	b.n	1a850 <nrfx_ipc_uninit+0x5c>
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
   1a83c:	687b      	ldr	r3, [r7, #4]
   1a83e:	b2db      	uxtb	r3, r3
   1a840:	2200      	movs	r2, #0
   1a842:	4619      	mov	r1, r3
   1a844:	480e      	ldr	r0, [pc, #56]	; (1a880 <nrfx_ipc_uninit+0x8c>)
   1a846:	f00c fb6d 	bl	26f24 <nrf_ipc_receive_config_set>
    for (i = 0; i < IPC_CONF_NUM; ++i)
   1a84a:	687b      	ldr	r3, [r7, #4]
   1a84c:	3301      	adds	r3, #1
   1a84e:	607b      	str	r3, [r7, #4]
   1a850:	687b      	ldr	r3, [r7, #4]
   1a852:	2b07      	cmp	r3, #7
   1a854:	d9f2      	bls.n	1a83c <nrfx_ipc_uninit+0x48>
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
   1a856:	f04f 31ff 	mov.w	r1, #4294967295
   1a85a:	4809      	ldr	r0, [pc, #36]	; (1a880 <nrfx_ipc_uninit+0x8c>)
   1a85c:	f00c fb35 	bl	26eca <nrf_ipc_int_disable>
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   1a860:	4b03      	ldr	r3, [pc, #12]	; (1a870 <nrfx_ipc_uninit+0x7c>)
   1a862:	2200      	movs	r2, #0
   1a864:	711a      	strb	r2, [r3, #4]
}
   1a866:	bf00      	nop
   1a868:	3708      	adds	r7, #8
   1a86a:	46bd      	mov	sp, r7
   1a86c:	bd80      	pop	{r7, pc}
   1a86e:	bf00      	nop
   1a870:	20014ecc 	.word	0x20014ecc
   1a874:	0002b9c4 	.word	0x0002b9c4
   1a878:	0002ba14 	.word	0x0002ba14
   1a87c:	0002b9a4 	.word	0x0002b9a4
   1a880:	4002a000 	.word	0x4002a000

0001a884 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   1a884:	b580      	push	{r7, lr}
   1a886:	b086      	sub	sp, #24
   1a888:	af00      	add	r7, sp, #0
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);
   1a88a:	481c      	ldr	r0, [pc, #112]	; (1a8fc <nrfx_ipc_irq_handler+0x78>)
   1a88c:	f00c fb2b 	bl	26ee6 <nrf_ipc_int_pending_get>
   1a890:	6138      	str	r0, [r7, #16]

    // Clear these events
    uint32_t bitmask = events_map;
   1a892:	693b      	ldr	r3, [r7, #16]
   1a894:	617b      	str	r3, [r7, #20]
    while (bitmask)
   1a896:	e022      	b.n	1a8de <nrfx_ipc_irq_handler+0x5a>
   1a898:	697b      	ldr	r3, [r7, #20]
   1a89a:	607b      	str	r3, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   1a89c:	687b      	ldr	r3, [r7, #4]
   1a89e:	fa93 f3a3 	rbit	r3, r3
   1a8a2:	603b      	str	r3, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
   1a8a4:	683b      	ldr	r3, [r7, #0]
   1a8a6:	60bb      	str	r3, [r7, #8]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
   1a8a8:	68bb      	ldr	r3, [r7, #8]
   1a8aa:	2b00      	cmp	r3, #0
   1a8ac:	d101      	bne.n	1a8b2 <nrfx_ipc_irq_handler+0x2e>
  {
    return 32U;
   1a8ae:	2320      	movs	r3, #32
   1a8b0:	e003      	b.n	1a8ba <nrfx_ipc_irq_handler+0x36>
  }
  return __builtin_clz(value);
   1a8b2:	68bb      	ldr	r3, [r7, #8]
   1a8b4:	fab3 f383 	clz	r3, r3
   1a8b8:	b2db      	uxtb	r3, r3
    {
        uint8_t event_idx = __CLZ(__RBIT(bitmask));
   1a8ba:	73fb      	strb	r3, [r7, #15]
        bitmask &= ~(1UL << event_idx);
   1a8bc:	7bfb      	ldrb	r3, [r7, #15]
   1a8be:	2201      	movs	r2, #1
   1a8c0:	fa02 f303 	lsl.w	r3, r2, r3
   1a8c4:	43db      	mvns	r3, r3
   1a8c6:	697a      	ldr	r2, [r7, #20]
   1a8c8:	4013      	ands	r3, r2
   1a8ca:	617b      	str	r3, [r7, #20]
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
   1a8cc:	7bfb      	ldrb	r3, [r7, #15]
   1a8ce:	4618      	mov	r0, r3
   1a8d0:	f7ff fed8 	bl	1a684 <nrf_ipc_receive_event_get>
   1a8d4:	4603      	mov	r3, r0
   1a8d6:	4619      	mov	r1, r3
   1a8d8:	4808      	ldr	r0, [pc, #32]	; (1a8fc <nrfx_ipc_irq_handler+0x78>)
   1a8da:	f00c fad8 	bl	26e8e <nrf_ipc_event_clear>
    while (bitmask)
   1a8de:	697b      	ldr	r3, [r7, #20]
   1a8e0:	2b00      	cmp	r3, #0
   1a8e2:	d1d9      	bne.n	1a898 <nrfx_ipc_irq_handler+0x14>
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   1a8e4:	4b06      	ldr	r3, [pc, #24]	; (1a900 <nrfx_ipc_irq_handler+0x7c>)
   1a8e6:	681b      	ldr	r3, [r3, #0]
   1a8e8:	4a05      	ldr	r2, [pc, #20]	; (1a900 <nrfx_ipc_irq_handler+0x7c>)
   1a8ea:	6892      	ldr	r2, [r2, #8]
   1a8ec:	4611      	mov	r1, r2
   1a8ee:	6938      	ldr	r0, [r7, #16]
   1a8f0:	4798      	blx	r3
}
   1a8f2:	bf00      	nop
   1a8f4:	3718      	adds	r7, #24
   1a8f6:	46bd      	mov	sp, r7
   1a8f8:	bd80      	pop	{r7, pc}
   1a8fa:	bf00      	nop
   1a8fc:	4002a000 	.word	0x4002a000
   1a900:	20014ecc 	.word	0x20014ecc

0001a904 <rpc_handle_data_message>:
   1a904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a906:	4604      	mov	r4, r0
   1a908:	2700      	movs	r7, #0
   1a90a:	6806      	ldr	r6, [r0, #0]
   1a90c:	4d0b      	ldr	r5, [pc, #44]	; (1a93c <rpc_handle_data_message+0x38>)
   1a90e:	b2b6      	uxth	r6, r6
   1a910:	882b      	ldrh	r3, [r5, #0]
   1a912:	42b3      	cmp	r3, r6
   1a914:	d00a      	beq.n	1a92c <rpc_handle_data_message+0x28>
   1a916:	3701      	adds	r7, #1
   1a918:	2f06      	cmp	r7, #6
   1a91a:	f105 0510 	add.w	r5, r5, #16
   1a91e:	d1f7      	bne.n	1a910 <rpc_handle_data_message+0xc>
   1a920:	68a0      	ldr	r0, [r4, #8]
   1a922:	b148      	cbz	r0, 1a938 <rpc_handle_data_message+0x34>
   1a924:	f00c fb5b 	bl	26fde <rpc_transport_peer_data_free>
   1a928:	2000      	movs	r0, #0
   1a92a:	e005      	b.n	1a938 <rpc_handle_data_message+0x34>
   1a92c:	4620      	mov	r0, r4
   1a92e:	686b      	ldr	r3, [r5, #4]
   1a930:	68e9      	ldr	r1, [r5, #12]
   1a932:	4798      	blx	r3
   1a934:	2802      	cmp	r0, #2
   1a936:	d0ee      	beq.n	1a916 <rpc_handle_data_message+0x12>
   1a938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a93a:	bf00      	nop
   1a93c:	0002ccfc 	.word	0x0002ccfc

0001a940 <ipc_trace_init>:
   1a940:	4b01      	ldr	r3, [pc, #4]	; (1a948 <ipc_trace_init+0x8>)
   1a942:	6018      	str	r0, [r3, #0]
   1a944:	4770      	bx	lr
   1a946:	bf00      	nop
   1a948:	20014ee4 	.word	0x20014ee4

0001a94c <nrf_modem_os_trace_irq_handler>:
   1a94c:	b508      	push	{r3, lr}
   1a94e:	4b11      	ldr	r3, [pc, #68]	; (1a994 <nrf_modem_os_trace_irq_handler+0x48>)
   1a950:	781b      	ldrb	r3, [r3, #0]
   1a952:	b90b      	cbnz	r3, 1a958 <nrf_modem_os_trace_irq_handler+0xc>
   1a954:	f00c f90a 	bl	26b6c <nrf_modem_os_trace_irq_clear>
   1a958:	4b0f      	ldr	r3, [pc, #60]	; (1a998 <nrf_modem_os_trace_irq_handler+0x4c>)
   1a95a:	6818      	ldr	r0, [r3, #0]
   1a95c:	b128      	cbz	r0, 1a96a <nrf_modem_os_trace_irq_handler+0x1e>
   1a95e:	6882      	ldr	r2, [r0, #8]
   1a960:	6843      	ldr	r3, [r0, #4]
   1a962:	429a      	cmp	r2, r3
   1a964:	d001      	beq.n	1a96a <nrf_modem_os_trace_irq_handler+0x1e>
   1a966:	f00c fb3e 	bl	26fe6 <trace_write>
   1a96a:	4b0c      	ldr	r3, [pc, #48]	; (1a99c <nrf_modem_os_trace_irq_handler+0x50>)
   1a96c:	6818      	ldr	r0, [r3, #0]
   1a96e:	b128      	cbz	r0, 1a97c <nrf_modem_os_trace_irq_handler+0x30>
   1a970:	6882      	ldr	r2, [r0, #8]
   1a972:	6843      	ldr	r3, [r0, #4]
   1a974:	429a      	cmp	r2, r3
   1a976:	d001      	beq.n	1a97c <nrf_modem_os_trace_irq_handler+0x30>
   1a978:	f00c fb35 	bl	26fe6 <trace_write>
   1a97c:	4b08      	ldr	r3, [pc, #32]	; (1a9a0 <nrf_modem_os_trace_irq_handler+0x54>)
   1a97e:	6818      	ldr	r0, [r3, #0]
   1a980:	b138      	cbz	r0, 1a992 <nrf_modem_os_trace_irq_handler+0x46>
   1a982:	6882      	ldr	r2, [r0, #8]
   1a984:	6843      	ldr	r3, [r0, #4]
   1a986:	429a      	cmp	r2, r3
   1a988:	d003      	beq.n	1a992 <nrf_modem_os_trace_irq_handler+0x46>
   1a98a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1a98e:	f00c bb2a 	b.w	26fe6 <trace_write>
   1a992:	bd08      	pop	{r3, pc}
   1a994:	200151dd 	.word	0x200151dd
   1a998:	20014ee0 	.word	0x20014ee0
   1a99c:	20014ed8 	.word	0x20014ed8
   1a9a0:	20014edc 	.word	0x20014edc

0001a9a4 <ipc_trace_handle>:
   1a9a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9a8:	4b43      	ldr	r3, [pc, #268]	; (1aab8 <ipc_trace_handle+0x114>)
   1a9aa:	681b      	ldr	r3, [r3, #0]
   1a9ac:	6919      	ldr	r1, [r3, #16]
   1a9ae:	f8d3 a014 	ldr.w	sl, [r3, #20]
   1a9b2:	7c1a      	ldrb	r2, [r3, #16]
   1a9b4:	2200      	movs	r2, #0
   1a9b6:	741a      	strb	r2, [r3, #16]
   1a9b8:	7c58      	ldrb	r0, [r3, #17]
   1a9ba:	745a      	strb	r2, [r3, #17]
   1a9bc:	7c98      	ldrb	r0, [r3, #18]
   1a9be:	749a      	strb	r2, [r3, #18]
   1a9c0:	7cd8      	ldrb	r0, [r3, #19]
   1a9c2:	74da      	strb	r2, [r3, #19]
   1a9c4:	7d18      	ldrb	r0, [r3, #20]
   1a9c6:	751a      	strb	r2, [r3, #20]
   1a9c8:	7d58      	ldrb	r0, [r3, #21]
   1a9ca:	755a      	strb	r2, [r3, #21]
   1a9cc:	7d98      	ldrb	r0, [r3, #22]
   1a9ce:	759a      	strb	r2, [r3, #22]
   1a9d0:	7dd8      	ldrb	r0, [r3, #23]
   1a9d2:	75da      	strb	r2, [r3, #23]
   1a9d4:	2900      	cmp	r1, #0
   1a9d6:	d033      	beq.n	1aa40 <ipc_trace_handle+0x9c>
   1a9d8:	3901      	subs	r1, #1
   1a9da:	2903      	cmp	r1, #3
   1a9dc:	d830      	bhi.n	1aa40 <ipc_trace_handle+0x9c>
   1a9de:	e8df f001 	tbb	[pc, r1]
   1a9e2:	6502      	.short	0x6502
   1a9e4:	534c      	.short	0x534c
   1a9e6:	4a35      	ldr	r2, [pc, #212]	; (1aabc <ipc_trace_handle+0x118>)
   1a9e8:	7811      	ldrb	r1, [r2, #0]
   1a9ea:	b109      	cbz	r1, 1a9f0 <ipc_trace_handle+0x4c>
   1a9ec:	2100      	movs	r1, #0
   1a9ee:	7011      	strb	r1, [r2, #0]
   1a9f0:	2200      	movs	r2, #0
   1a9f2:	4691      	mov	r9, r2
   1a9f4:	4617      	mov	r7, r2
   1a9f6:	4614      	mov	r4, r2
   1a9f8:	4d31      	ldr	r5, [pc, #196]	; (1aac0 <ipc_trace_handle+0x11c>)
   1a9fa:	4932      	ldr	r1, [pc, #200]	; (1aac4 <ipc_trace_handle+0x120>)
   1a9fc:	4832      	ldr	r0, [pc, #200]	; (1aac8 <ipc_trace_handle+0x124>)
   1a9fe:	f8d5 e000 	ldr.w	lr, [r5]
   1aa02:	f8d1 8000 	ldr.w	r8, [r1]
   1aa06:	6806      	ldr	r6, [r0, #0]
   1aa08:	f8da b008 	ldr.w	fp, [sl, #8]
   1aa0c:	9501      	str	r5, [sp, #4]
   1aa0e:	45a3      	cmp	fp, r4
   1aa10:	d119      	bne.n	1aa46 <ipc_trace_handle+0xa2>
   1aa12:	b107      	cbz	r7, 1aa16 <ipc_trace_handle+0x72>
   1aa14:	6006      	str	r6, [r0, #0]
   1aa16:	f1b9 0f00 	cmp.w	r9, #0
   1aa1a:	d001      	beq.n	1aa20 <ipc_trace_handle+0x7c>
   1aa1c:	f8c1 8000 	str.w	r8, [r1]
   1aa20:	b112      	cbz	r2, 1aa28 <ipc_trace_handle+0x84>
   1aa22:	9a01      	ldr	r2, [sp, #4]
   1aa24:	f8c2 e000 	str.w	lr, [r2]
   1aa28:	7a1a      	ldrb	r2, [r3, #8]
   1aa2a:	2101      	movs	r1, #1
   1aa2c:	2200      	movs	r2, #0
   1aa2e:	7219      	strb	r1, [r3, #8]
   1aa30:	7a59      	ldrb	r1, [r3, #9]
   1aa32:	725a      	strb	r2, [r3, #9]
   1aa34:	7a99      	ldrb	r1, [r3, #10]
   1aa36:	729a      	strb	r2, [r3, #10]
   1aa38:	7ada      	ldrb	r2, [r3, #11]
   1aa3a:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   1aa3e:	72da      	strb	r2, [r3, #11]
   1aa40:	b003      	add	sp, #12
   1aa42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa46:	1ca5      	adds	r5, r4, #2
   1aa48:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
   1aa4c:	686d      	ldr	r5, [r5, #4]
   1aa4e:	f895 c000 	ldrb.w	ip, [r5]
   1aa52:	f1bc 0f62 	cmp.w	ip, #98	; 0x62
   1aa56:	d009      	beq.n	1aa6c <ipc_trace_handle+0xc8>
   1aa58:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
   1aa5c:	d00a      	beq.n	1aa74 <ipc_trace_handle+0xd0>
   1aa5e:	f1bc 0f61 	cmp.w	ip, #97	; 0x61
   1aa62:	bf04      	itt	eq
   1aa64:	462e      	moveq	r6, r5
   1aa66:	2701      	moveq	r7, #1
   1aa68:	3401      	adds	r4, #1
   1aa6a:	e7d0      	b.n	1aa0e <ipc_trace_handle+0x6a>
   1aa6c:	46a8      	mov	r8, r5
   1aa6e:	f04f 0901 	mov.w	r9, #1
   1aa72:	e7f9      	b.n	1aa68 <ipc_trace_handle+0xc4>
   1aa74:	46ae      	mov	lr, r5
   1aa76:	2201      	movs	r2, #1
   1aa78:	e7f6      	b.n	1aa68 <ipc_trace_handle+0xc4>
   1aa7a:	2101      	movs	r1, #1
   1aa7c:	4a0f      	ldr	r2, [pc, #60]	; (1aabc <ipc_trace_handle+0x118>)
   1aa7e:	7011      	strb	r1, [r2, #0]
   1aa80:	7a1a      	ldrb	r2, [r3, #8]
   1aa82:	2103      	movs	r1, #3
   1aa84:	2200      	movs	r2, #0
   1aa86:	e7d2      	b.n	1aa2e <ipc_trace_handle+0x8a>
   1aa88:	7a19      	ldrb	r1, [r3, #8]
   1aa8a:	2104      	movs	r1, #4
   1aa8c:	7219      	strb	r1, [r3, #8]
   1aa8e:	7a59      	ldrb	r1, [r3, #9]
   1aa90:	725a      	strb	r2, [r3, #9]
   1aa92:	7a99      	ldrb	r1, [r3, #10]
   1aa94:	729a      	strb	r2, [r3, #10]
   1aa96:	7ad9      	ldrb	r1, [r3, #11]
   1aa98:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   1aa9c:	72d9      	strb	r1, [r3, #11]
   1aa9e:	4b07      	ldr	r3, [pc, #28]	; (1aabc <ipc_trace_handle+0x118>)
   1aaa0:	701a      	strb	r2, [r3, #0]
   1aaa2:	b003      	add	sp, #12
   1aaa4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aaa8:	f7ff bf50 	b.w	1a94c <nrf_modem_os_trace_irq_handler>
   1aaac:	b003      	add	sp, #12
   1aaae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aab2:	f00c b854 	b.w	26b5e <nrf_modem_os_trace_irq_set>
   1aab6:	bf00      	nop
   1aab8:	20014ee4 	.word	0x20014ee4
   1aabc:	200151dd 	.word	0x200151dd
   1aac0:	20014edc 	.word	0x20014edc
   1aac4:	20014ed8 	.word	0x20014ed8
   1aac8:	20014ee0 	.word	0x20014ee0

0001aacc <rpc_trace_coredump_in_progress>:
   1aacc:	4b01      	ldr	r3, [pc, #4]	; (1aad4 <rpc_trace_coredump_in_progress+0x8>)
   1aace:	7818      	ldrb	r0, [r3, #0]
   1aad0:	4770      	bx	lr
   1aad2:	bf00      	nop
   1aad4:	200151dd 	.word	0x200151dd

0001aad8 <rpc_transport_ipc_msg_alloc>:
   1aad8:	b570      	push	{r4, r5, r6, lr}
   1aada:	2400      	movs	r4, #0
   1aadc:	6806      	ldr	r6, [r0, #0]
   1aade:	42a6      	cmp	r6, r4
   1aae0:	d101      	bne.n	1aae6 <rpc_transport_ipc_msg_alloc+0xe>
   1aae2:	2000      	movs	r0, #0
   1aae4:	e016      	b.n	1ab14 <rpc_transport_ipc_msg_alloc+0x3c>
   1aae6:	eb00 03c4 	add.w	r3, r0, r4, lsl #3
   1aaea:	685d      	ldr	r5, [r3, #4]
   1aaec:	b2ed      	uxtb	r5, r5
   1aaee:	2d03      	cmp	r5, #3
   1aaf0:	d111      	bne.n	1ab16 <rpc_transport_ipc_msg_alloc+0x3e>
   1aaf2:	eb01 1084 	add.w	r0, r1, r4, lsl #6
   1aaf6:	6098      	str	r0, [r3, #8]
   1aaf8:	6859      	ldr	r1, [r3, #4]
   1aafa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   1aafe:	6059      	str	r1, [r3, #4]
   1ab00:	4908      	ldr	r1, [pc, #32]	; (1ab24 <rpc_transport_ipc_msg_alloc+0x4c>)
   1ab02:	880c      	ldrh	r4, [r1, #0]
   1ab04:	1c65      	adds	r5, r4, #1
   1ab06:	800d      	strh	r5, [r1, #0]
   1ab08:	6859      	ldr	r1, [r3, #4]
   1ab0a:	b289      	uxth	r1, r1
   1ab0c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
   1ab10:	6059      	str	r1, [r3, #4]
   1ab12:	7102      	strb	r2, [r0, #4]
   1ab14:	bd70      	pop	{r4, r5, r6, pc}
   1ab16:	b915      	cbnz	r5, 1ab1e <rpc_transport_ipc_msg_alloc+0x46>
   1ab18:	689d      	ldr	r5, [r3, #8]
   1ab1a:	2d00      	cmp	r5, #0
   1ab1c:	d0e9      	beq.n	1aaf2 <rpc_transport_ipc_msg_alloc+0x1a>
   1ab1e:	3401      	adds	r4, #1
   1ab20:	e7dd      	b.n	1aade <rpc_transport_ipc_msg_alloc+0x6>
   1ab22:	bf00      	nop
   1ab24:	200151ce 	.word	0x200151ce

0001ab28 <handle_modem_rpc_msg>:
   1ab28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab2c:	4606      	mov	r6, r0
   1ab2e:	460f      	mov	r7, r1
   1ab30:	2500      	movs	r5, #0
   1ab32:	f8df 8074 	ldr.w	r8, [pc, #116]	; 1aba8 <handle_modem_rpc_msg+0x80>
   1ab36:	6833      	ldr	r3, [r6, #0]
   1ab38:	42ab      	cmp	r3, r5
   1ab3a:	d801      	bhi.n	1ab40 <handle_modem_rpc_msg+0x18>
   1ab3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ab40:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   1ab44:	68a3      	ldr	r3, [r4, #8]
   1ab46:	b1fb      	cbz	r3, 1ab88 <handle_modem_rpc_msg+0x60>
   1ab48:	6863      	ldr	r3, [r4, #4]
   1ab4a:	b2db      	uxtb	r3, r3
   1ab4c:	2b01      	cmp	r3, #1
   1ab4e:	d11b      	bne.n	1ab88 <handle_modem_rpc_msg+0x60>
   1ab50:	6862      	ldr	r2, [r4, #4]
   1ab52:	f8b8 3000 	ldrh.w	r3, [r8]
   1ab56:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   1ab5a:	d115      	bne.n	1ab88 <handle_modem_rpc_msg+0x60>
   1ab5c:	2f02      	cmp	r7, #2
   1ab5e:	68a0      	ldr	r0, [r4, #8]
   1ab60:	d114      	bne.n	1ab8c <handle_modem_rpc_msg+0x64>
   1ab62:	f7ff fecf 	bl	1a904 <rpc_handle_data_message>
   1ab66:	2802      	cmp	r0, #2
   1ab68:	d00e      	beq.n	1ab88 <handle_modem_rpc_msg+0x60>
   1ab6a:	2801      	cmp	r0, #1
   1ab6c:	d113      	bne.n	1ab96 <handle_modem_rpc_msg+0x6e>
   1ab6e:	6863      	ldr	r3, [r4, #4]
   1ab70:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1ab74:	f043 0302 	orr.w	r3, r3, #2
   1ab78:	6063      	str	r3, [r4, #4]
   1ab7a:	f8b8 3000 	ldrh.w	r3, [r8]
   1ab7e:	3301      	adds	r3, #1
   1ab80:	f8a8 3000 	strh.w	r3, [r8]
   1ab84:	f00b ffdd 	bl	26b42 <nrf_modem_os_application_irq_set>
   1ab88:	3501      	adds	r5, #1
   1ab8a:	e7d4      	b.n	1ab36 <handle_modem_rpc_msg+0xe>
   1ab8c:	6801      	ldr	r1, [r0, #0]
   1ab8e:	0c09      	lsrs	r1, r1, #16
   1ab90:	f00c f9db 	bl	26f4a <rpc_handle_ctrl_message>
   1ab94:	e7e7      	b.n	1ab66 <handle_modem_rpc_msg+0x3e>
   1ab96:	2800      	cmp	r0, #0
   1ab98:	d1ef      	bne.n	1ab7a <handle_modem_rpc_msg+0x52>
   1ab9a:	6863      	ldr	r3, [r4, #4]
   1ab9c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1aba0:	f043 0303 	orr.w	r3, r3, #3
   1aba4:	e7e8      	b.n	1ab78 <handle_modem_rpc_msg+0x50>
   1aba6:	bf00      	nop
   1aba8:	200151cc 	.word	0x200151cc

0001abac <rpc_transport_ipc_data_msg_send>:
   1abac:	b508      	push	{r3, lr}
   1abae:	4b0b      	ldr	r3, [pc, #44]	; (1abdc <rpc_transport_ipc_data_msg_send+0x30>)
   1abb0:	681b      	ldr	r3, [r3, #0]
   1abb2:	1ac0      	subs	r0, r0, r3
   1abb4:	4b0a      	ldr	r3, [pc, #40]	; (1abe0 <rpc_transport_ipc_data_msg_send+0x34>)
   1abb6:	f3c0 1089 	ubfx	r0, r0, #6, #10
   1abba:	681b      	ldr	r3, [r3, #0]
   1abbc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1abc0:	6843      	ldr	r3, [r0, #4]
   1abc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1abc6:	f043 0301 	orr.w	r3, r3, #1
   1abca:	6043      	str	r3, [r0, #4]
   1abcc:	2003      	movs	r0, #3
   1abce:	f00b ff24 	bl	26a1a <nrf_modem_os_busywait>
   1abd2:	2201      	movs	r2, #1
   1abd4:	4b03      	ldr	r3, [pc, #12]	; (1abe4 <rpc_transport_ipc_data_msg_send+0x38>)
   1abd6:	601a      	str	r2, [r3, #0]
   1abd8:	bd08      	pop	{r3, pc}
   1abda:	bf00      	nop
   1abdc:	20014f00 	.word	0x20014f00
   1abe0:	20014f04 	.word	0x20014f04
   1abe4:	4002a00c 	.word	0x4002a00c

0001abe8 <rpc_transport_ipc_ctrl_msg_send>:
   1abe8:	b508      	push	{r3, lr}
   1abea:	4b0b      	ldr	r3, [pc, #44]	; (1ac18 <rpc_transport_ipc_ctrl_msg_send+0x30>)
   1abec:	681b      	ldr	r3, [r3, #0]
   1abee:	1ac0      	subs	r0, r0, r3
   1abf0:	4b0a      	ldr	r3, [pc, #40]	; (1ac1c <rpc_transport_ipc_ctrl_msg_send+0x34>)
   1abf2:	f3c0 1089 	ubfx	r0, r0, #6, #10
   1abf6:	681b      	ldr	r3, [r3, #0]
   1abf8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1abfc:	6843      	ldr	r3, [r0, #4]
   1abfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1ac02:	f043 0301 	orr.w	r3, r3, #1
   1ac06:	6043      	str	r3, [r0, #4]
   1ac08:	2003      	movs	r0, #3
   1ac0a:	f00b ff06 	bl	26a1a <nrf_modem_os_busywait>
   1ac0e:	2201      	movs	r2, #1
   1ac10:	4b03      	ldr	r3, [pc, #12]	; (1ac20 <rpc_transport_ipc_ctrl_msg_send+0x38>)
   1ac12:	601a      	str	r2, [r3, #0]
   1ac14:	bd08      	pop	{r3, pc}
   1ac16:	bf00      	nop
   1ac18:	20014ef8 	.word	0x20014ef8
   1ac1c:	20014efc 	.word	0x20014efc
   1ac20:	4002a004 	.word	0x4002a004

0001ac24 <rpc_transport_ipc_data_msg_alloc>:
   1ac24:	4b05      	ldr	r3, [pc, #20]	; (1ac3c <rpc_transport_ipc_data_msg_alloc+0x18>)
   1ac26:	781b      	ldrb	r3, [r3, #0]
   1ac28:	b933      	cbnz	r3, 1ac38 <rpc_transport_ipc_data_msg_alloc+0x14>
   1ac2a:	4b05      	ldr	r3, [pc, #20]	; (1ac40 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   1ac2c:	2202      	movs	r2, #2
   1ac2e:	6819      	ldr	r1, [r3, #0]
   1ac30:	4b04      	ldr	r3, [pc, #16]	; (1ac44 <rpc_transport_ipc_data_msg_alloc+0x20>)
   1ac32:	6818      	ldr	r0, [r3, #0]
   1ac34:	f7ff bf50 	b.w	1aad8 <rpc_transport_ipc_msg_alloc>
   1ac38:	2000      	movs	r0, #0
   1ac3a:	4770      	bx	lr
   1ac3c:	200151df 	.word	0x200151df
   1ac40:	20014f00 	.word	0x20014f00
   1ac44:	20014f04 	.word	0x20014f04

0001ac48 <rpc_transport_ipc_ctrl_msg_alloc>:
   1ac48:	230a      	movs	r3, #10
   1ac4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ac4c:	4c0c      	ldr	r4, [pc, #48]	; (1ac80 <rpc_transport_ipc_ctrl_msg_alloc+0x38>)
   1ac4e:	4d0d      	ldr	r5, [pc, #52]	; (1ac84 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   1ac50:	9301      	str	r3, [sp, #4]
   1ac52:	2201      	movs	r2, #1
   1ac54:	6821      	ldr	r1, [r4, #0]
   1ac56:	6828      	ldr	r0, [r5, #0]
   1ac58:	f7ff ff3e 	bl	1aad8 <rpc_transport_ipc_msg_alloc>
   1ac5c:	b968      	cbnz	r0, 1ac7a <rpc_transport_ipc_ctrl_msg_alloc+0x32>
   1ac5e:	f00b ff69 	bl	26b34 <nrf_modem_os_is_in_isr>
   1ac62:	b918      	cbnz	r0, 1ac6c <rpc_transport_ipc_ctrl_msg_alloc+0x24>
   1ac64:	a901      	add	r1, sp, #4
   1ac66:	f00b fee4 	bl	26a32 <nrf_modem_os_timedwait>
   1ac6a:	e7f2      	b.n	1ac52 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   1ac6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1ac70:	9b01      	ldr	r3, [sp, #4]
   1ac72:	4358      	muls	r0, r3
   1ac74:	f00b fed1 	bl	26a1a <nrf_modem_os_busywait>
   1ac78:	e7eb      	b.n	1ac52 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   1ac7a:	b003      	add	sp, #12
   1ac7c:	bd30      	pop	{r4, r5, pc}
   1ac7e:	bf00      	nop
   1ac80:	20014ef8 	.word	0x20014ef8
   1ac84:	20014efc 	.word	0x20014efc

0001ac88 <rpc_transport_ipc_data_alloc>:
   1ac88:	4b03      	ldr	r3, [pc, #12]	; (1ac98 <rpc_transport_ipc_data_alloc+0x10>)
   1ac8a:	781b      	ldrb	r3, [r3, #0]
   1ac8c:	b90b      	cbnz	r3, 1ac92 <rpc_transport_ipc_data_alloc+0xa>
   1ac8e:	f7fe bd2b 	b.w	196e8 <nrf_modem_os_shm_tx_alloc>
   1ac92:	2000      	movs	r0, #0
   1ac94:	4770      	bx	lr
   1ac96:	bf00      	nop
   1ac98:	200151df 	.word	0x200151df

0001ac9c <nrf_modem_os_application_irq_handler>:
   1ac9c:	b510      	push	{r4, lr}
   1ac9e:	4c06      	ldr	r4, [pc, #24]	; (1acb8 <nrf_modem_os_application_irq_handler+0x1c>)
   1aca0:	f00b ff56 	bl	26b50 <nrf_modem_os_application_irq_clear>
   1aca4:	6820      	ldr	r0, [r4, #0]
   1aca6:	2101      	movs	r1, #1
   1aca8:	f7ff ff3e 	bl	1ab28 <handle_modem_rpc_msg>
   1acac:	6860      	ldr	r0, [r4, #4]
   1acae:	2102      	movs	r1, #2
   1acb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1acb4:	f7ff bf38 	b.w	1ab28 <handle_modem_rpc_msg>
   1acb8:	20014eec 	.word	0x20014eec

0001acbc <rpc_transport_ipc_msg_free>:
   1acbc:	2300      	movs	r3, #0
   1acbe:	4911      	ldr	r1, [pc, #68]	; (1ad04 <rpc_transport_ipc_msg_free+0x48>)
   1acc0:	b530      	push	{r4, r5, lr}
   1acc2:	680a      	ldr	r2, [r1, #0]
   1acc4:	6814      	ldr	r4, [r2, #0]
   1acc6:	42a3      	cmp	r3, r4
   1acc8:	d10b      	bne.n	1ace2 <rpc_transport_ipc_msg_free+0x26>
   1acca:	2300      	movs	r3, #0
   1accc:	684a      	ldr	r2, [r1, #4]
   1acce:	6811      	ldr	r1, [r2, #0]
   1acd0:	428b      	cmp	r3, r1
   1acd2:	d015      	beq.n	1ad00 <rpc_transport_ipc_msg_free+0x44>
   1acd4:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   1acd8:	68a4      	ldr	r4, [r4, #8]
   1acda:	42a0      	cmp	r0, r4
   1acdc:	d008      	beq.n	1acf0 <rpc_transport_ipc_msg_free+0x34>
   1acde:	3301      	adds	r3, #1
   1ace0:	e7f6      	b.n	1acd0 <rpc_transport_ipc_msg_free+0x14>
   1ace2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   1ace6:	68ad      	ldr	r5, [r5, #8]
   1ace8:	42a8      	cmp	r0, r5
   1acea:	d001      	beq.n	1acf0 <rpc_transport_ipc_msg_free+0x34>
   1acec:	3301      	adds	r3, #1
   1acee:	e7ea      	b.n	1acc6 <rpc_transport_ipc_msg_free+0xa>
   1acf0:	00db      	lsls	r3, r3, #3
   1acf2:	3304      	adds	r3, #4
   1acf4:	58d1      	ldr	r1, [r2, r3]
   1acf6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   1acfa:	f041 0103 	orr.w	r1, r1, #3
   1acfe:	50d1      	str	r1, [r2, r3]
   1ad00:	bd30      	pop	{r4, r5, pc}
   1ad02:	bf00      	nop
   1ad04:	20014eec 	.word	0x20014eec

0001ad08 <rpc_transport_ipc_peer_data_free>:
   1ad08:	b510      	push	{r4, lr}
   1ad0a:	4604      	mov	r4, r0
   1ad0c:	f7ff ff9c 	bl	1ac48 <rpc_transport_ipc_ctrl_msg_alloc>
   1ad10:	4a04      	ldr	r2, [pc, #16]	; (1ad24 <rpc_transport_ipc_peer_data_free+0x1c>)
   1ad12:	6084      	str	r4, [r0, #8]
   1ad14:	6002      	str	r2, [r0, #0]
   1ad16:	f7ff ff67 	bl	1abe8 <rpc_transport_ipc_ctrl_msg_send>
   1ad1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ad1e:	f00b bf10 	b.w	26b42 <nrf_modem_os_application_irq_set>
   1ad22:	bf00      	nop
   1ad24:	00020001 	.word	0x00020001

0001ad28 <rpc_transport_ipc_init>:
   1ad28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad2c:	2200      	movs	r2, #0
   1ad2e:	b095      	sub	sp, #84	; 0x54
   1ad30:	4605      	mov	r5, r0
   1ad32:	494d      	ldr	r1, [pc, #308]	; (1ae68 <rpc_transport_ipc_init+0x140>)
   1ad34:	7900      	ldrb	r0, [r0, #4]
   1ad36:	f7ff fcc9 	bl	1a6cc <nrfx_ipc_init>
   1ad3a:	2238      	movs	r2, #56	; 0x38
   1ad3c:	2100      	movs	r1, #0
   1ad3e:	a803      	add	r0, sp, #12
   1ad40:	f009 fd29 	bl	24796 <memset>
   1ad44:	2302      	movs	r3, #2
   1ad46:	9304      	str	r3, [sp, #16]
   1ad48:	2308      	movs	r3, #8
   1ad4a:	9306      	str	r3, [sp, #24]
   1ad4c:	2320      	movs	r3, #32
   1ad4e:	9308      	str	r3, [sp, #32]
   1ad50:	2301      	movs	r3, #1
   1ad52:	930b      	str	r3, [sp, #44]	; 0x2c
   1ad54:	2304      	movs	r3, #4
   1ad56:	930d      	str	r3, [sp, #52]	; 0x34
   1ad58:	2310      	movs	r3, #16
   1ad5a:	f04f 0c40 	mov.w	ip, #64	; 0x40
   1ad5e:	930f      	str	r3, [sp, #60]	; 0x3c
   1ad60:	2380      	movs	r3, #128	; 0x80
   1ad62:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   1ad66:	23d5      	movs	r3, #213	; 0xd5
   1ad68:	a803      	add	r0, sp, #12
   1ad6a:	9313      	str	r3, [sp, #76]	; 0x4c
   1ad6c:	f7ff fce6 	bl	1a73c <nrfx_ipc_config_load>
   1ad70:	682b      	ldr	r3, [r5, #0]
   1ad72:	2100      	movs	r1, #0
   1ad74:	685a      	ldr	r2, [r3, #4]
   1ad76:	6818      	ldr	r0, [r3, #0]
   1ad78:	f009 fd0d 	bl	24796 <memset>
   1ad7c:	682a      	ldr	r2, [r5, #0]
   1ad7e:	6814      	ldr	r4, [r2, #0]
   1ad80:	69d3      	ldr	r3, [r2, #28]
   1ad82:	f104 0660 	add.w	r6, r4, #96	; 0x60
   1ad86:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   1ad8a:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   1ad8e:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   1ad92:	f104 0920 	add.w	r9, r4, #32
   1ad96:	2b00      	cmp	r3, #0
   1ad98:	d060      	beq.n	1ae5c <rpc_transport_ipc_init+0x134>
   1ad9a:	f104 0840 	add.w	r8, r4, #64	; 0x40
   1ad9e:	4933      	ldr	r1, [pc, #204]	; (1ae6c <rpc_transport_ipc_init+0x144>)
   1ada0:	f8c1 9000 	str.w	r9, [r1]
   1ada4:	b13b      	cbz	r3, 1adb6 <rpc_transport_ipc_init+0x8e>
   1ada6:	6992      	ldr	r2, [r2, #24]
   1ada8:	4640      	mov	r0, r8
   1adaa:	f8c8 2004 	str.w	r2, [r8, #4]
   1adae:	f8c8 3000 	str.w	r3, [r8]
   1adb2:	f7ff fdc5 	bl	1a940 <ipc_trace_init>
   1adb6:	6828      	ldr	r0, [r5, #0]
   1adb8:	2300      	movs	r3, #0
   1adba:	6902      	ldr	r2, [r0, #16]
   1adbc:	2101      	movs	r1, #1
   1adbe:	6062      	str	r2, [r4, #4]
   1adc0:	6942      	ldr	r2, [r0, #20]
   1adc2:	70a1      	strb	r1, [r4, #2]
   1adc4:	60a2      	str	r2, [r4, #8]
   1adc6:	4a2a      	ldr	r2, [pc, #168]	; (1ae70 <rpc_transport_ipc_init+0x148>)
   1adc8:	7023      	strb	r3, [r4, #0]
   1adca:	6017      	str	r7, [r2, #0]
   1adcc:	4a29      	ldr	r2, [pc, #164]	; (1ae74 <rpc_transport_ipc_init+0x14c>)
   1adce:	7063      	strb	r3, [r4, #1]
   1add0:	6016      	str	r6, [r2, #0]
   1add2:	2208      	movs	r2, #8
   1add4:	70e3      	strb	r3, [r4, #3]
   1add6:	60e6      	str	r6, [r4, #12]
   1add8:	6127      	str	r7, [r4, #16]
   1adda:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
   1adde:	f8c4 9014 	str.w	r9, [r4, #20]
   1ade2:	f8c4 8018 	str.w	r8, [r4, #24]
   1ade6:	707b      	strb	r3, [r7, #1]
   1ade8:	70bb      	strb	r3, [r7, #2]
   1adea:	70fb      	strb	r3, [r7, #3]
   1adec:	2714      	movs	r7, #20
   1adee:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
   1adf2:	4a21      	ldr	r2, [pc, #132]	; (1ae78 <rpc_transport_ipc_init+0x150>)
   1adf4:	4d21      	ldr	r5, [pc, #132]	; (1ae7c <rpc_transport_ipc_init+0x154>)
   1adf6:	f8c2 b000 	str.w	fp, [r2]
   1adfa:	4a21      	ldr	r2, [pc, #132]	; (1ae80 <rpc_transport_ipc_init+0x158>)
   1adfc:	7073      	strb	r3, [r6, #1]
   1adfe:	f8c2 a000 	str.w	sl, [r2]
   1ae02:	4a20      	ldr	r2, [pc, #128]	; (1ae84 <rpc_transport_ipc_init+0x15c>)
   1ae04:	70b3      	strb	r3, [r6, #2]
   1ae06:	70f3      	strb	r3, [r6, #3]
   1ae08:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   1ae0c:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   1ae10:	4c1d      	ldr	r4, [pc, #116]	; (1ae88 <rpc_transport_ipc_init+0x160>)
   1ae12:	7029      	strb	r1, [r5, #0]
   1ae14:	491d      	ldr	r1, [pc, #116]	; (1ae8c <rpc_transport_ipc_init+0x164>)
   1ae16:	6023      	str	r3, [r4, #0]
   1ae18:	9302      	str	r3, [sp, #8]
   1ae1a:	600b      	str	r3, [r1, #0]
   1ae1c:	680b      	ldr	r3, [r1, #0]
   1ae1e:	4e1c      	ldr	r6, [pc, #112]	; (1ae90 <rpc_transport_ipc_init+0x168>)
   1ae20:	9302      	str	r3, [sp, #8]
   1ae22:	9b02      	ldr	r3, [sp, #8]
   1ae24:	2000      	movs	r0, #0
   1ae26:	a901      	add	r1, sp, #4
   1ae28:	9701      	str	r7, [sp, #4]
   1ae2a:	f00b fe02 	bl	26a32 <nrf_modem_os_timedwait>
   1ae2e:	9b01      	ldr	r3, [sp, #4]
   1ae30:	3b14      	subs	r3, #20
   1ae32:	441e      	add	r6, r3
   1ae34:	782b      	ldrb	r3, [r5, #0]
   1ae36:	2b01      	cmp	r3, #1
   1ae38:	d104      	bne.n	1ae44 <rpc_transport_ipc_init+0x11c>
   1ae3a:	2e00      	cmp	r6, #0
   1ae3c:	d1f2      	bne.n	1ae24 <rpc_transport_ipc_init+0xfc>
   1ae3e:	f06f 033b 	mvn.w	r3, #59	; 0x3b
   1ae42:	6023      	str	r3, [r4, #0]
   1ae44:	6824      	ldr	r4, [r4, #0]
   1ae46:	b95c      	cbnz	r4, 1ae60 <rpc_transport_ipc_init+0x138>
   1ae48:	4b12      	ldr	r3, [pc, #72]	; (1ae94 <rpc_transport_ipc_init+0x16c>)
   1ae4a:	701c      	strb	r4, [r3, #0]
   1ae4c:	4b12      	ldr	r3, [pc, #72]	; (1ae98 <rpc_transport_ipc_init+0x170>)
   1ae4e:	801c      	strh	r4, [r3, #0]
   1ae50:	4b12      	ldr	r3, [pc, #72]	; (1ae9c <rpc_transport_ipc_init+0x174>)
   1ae52:	801c      	strh	r4, [r3, #0]
   1ae54:	4620      	mov	r0, r4
   1ae56:	b015      	add	sp, #84	; 0x54
   1ae58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae5c:	4698      	mov	r8, r3
   1ae5e:	e79e      	b.n	1ad9e <rpc_transport_ipc_init+0x76>
   1ae60:	f7ff fcc8 	bl	1a7f4 <nrfx_ipc_uninit>
   1ae64:	e7f6      	b.n	1ae54 <rpc_transport_ipc_init+0x12c>
   1ae66:	bf00      	nop
   1ae68:	0001aea1 	.word	0x0001aea1
   1ae6c:	20014ef4 	.word	0x20014ef4
   1ae70:	20014f04 	.word	0x20014f04
   1ae74:	20014efc 	.word	0x20014efc
   1ae78:	20014f00 	.word	0x20014f00
   1ae7c:	200151de 	.word	0x200151de
   1ae80:	20014ef8 	.word	0x20014ef8
   1ae84:	4002a000 	.word	0x4002a000
   1ae88:	20014ee8 	.word	0x20014ee8
   1ae8c:	40005610 	.word	0x40005610
   1ae90:	000249f0 	.word	0x000249f0
   1ae94:	200151df 	.word	0x200151df
   1ae98:	200151ce 	.word	0x200151ce
   1ae9c:	200151cc 	.word	0x200151cc

0001aea0 <ipc_irq_handler>:
   1aea0:	b570      	push	{r4, r5, r6, lr}
   1aea2:	4604      	mov	r4, r0
   1aea4:	0620      	lsls	r0, r4, #24
   1aea6:	d50c      	bpl.n	1aec2 <ipc_irq_handler+0x22>
   1aea8:	f7ff fd7c 	bl	1a9a4 <ipc_trace_handle>
   1aeac:	f7ff fe0e 	bl	1aacc <rpc_trace_coredump_in_progress>
   1aeb0:	b138      	cbz	r0, 1aec2 <ipc_irq_handler+0x22>
   1aeb2:	22e0      	movs	r2, #224	; 0xe0
   1aeb4:	4b3f      	ldr	r3, [pc, #252]	; (1afb4 <ipc_irq_handler+0x114>)
   1aeb6:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   1aeba:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1aebe:	605a      	str	r2, [r3, #4]
   1aec0:	bd70      	pop	{r4, r5, r6, pc}
   1aec2:	07e1      	lsls	r1, r4, #31
   1aec4:	d548      	bpl.n	1af58 <ipc_irq_handler+0xb8>
   1aec6:	f248 0202 	movw	r2, #32770	; 0x8002
   1aeca:	4b3b      	ldr	r3, [pc, #236]	; (1afb8 <ipc_irq_handler+0x118>)
   1aecc:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   1aed0:	4293      	cmp	r3, r2
   1aed2:	d035      	beq.n	1af40 <ipc_irq_handler+0xa0>
   1aed4:	d81b      	bhi.n	1af0e <ipc_irq_handler+0x6e>
   1aed6:	f243 0232 	movw	r2, #12338	; 0x3032
   1aeda:	4293      	cmp	r3, r2
   1aedc:	d036      	beq.n	1af4c <ipc_irq_handler+0xac>
   1aede:	d80b      	bhi.n	1aef8 <ipc_irq_handler+0x58>
   1aee0:	3b01      	subs	r3, #1
   1aee2:	2b01      	cmp	r3, #1
   1aee4:	d8ec      	bhi.n	1aec0 <ipc_irq_handler+0x20>
   1aee6:	2203      	movs	r2, #3
   1aee8:	200e      	movs	r0, #14
   1aeea:	4b34      	ldr	r3, [pc, #208]	; (1afbc <ipc_irq_handler+0x11c>)
   1aeec:	701a      	strb	r2, [r3, #0]
   1aeee:	4b34      	ldr	r3, [pc, #208]	; (1afc0 <ipc_irq_handler+0x120>)
   1aef0:	6018      	str	r0, [r3, #0]
   1aef2:	f00c fbb8 	bl	27666 <rpc_transport_ipc_fault_handler>
   1aef6:	e7e3      	b.n	1aec0 <ipc_irq_handler+0x20>
   1aef8:	f248 0201 	movw	r2, #32769	; 0x8001
   1aefc:	4293      	cmp	r3, r2
   1aefe:	d1df      	bne.n	1aec0 <ipc_irq_handler+0x20>
   1af00:	2203      	movs	r2, #3
   1af02:	4b2e      	ldr	r3, [pc, #184]	; (1afbc <ipc_irq_handler+0x11c>)
   1af04:	701a      	strb	r2, [r3, #0]
   1af06:	2216      	movs	r2, #22
   1af08:	4b2d      	ldr	r3, [pc, #180]	; (1afc0 <ipc_irq_handler+0x120>)
   1af0a:	601a      	str	r2, [r3, #0]
   1af0c:	e7d8      	b.n	1aec0 <ipc_irq_handler+0x20>
   1af0e:	4a2d      	ldr	r2, [pc, #180]	; (1afc4 <ipc_irq_handler+0x124>)
   1af10:	4293      	cmp	r3, r2
   1af12:	d80c      	bhi.n	1af2e <ipc_irq_handler+0x8e>
   1af14:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   1af18:	d80c      	bhi.n	1af34 <ipc_irq_handler+0x94>
   1af1a:	f248 0203 	movw	r2, #32771	; 0x8003
   1af1e:	4293      	cmp	r3, r2
   1af20:	d1ce      	bne.n	1aec0 <ipc_irq_handler+0x20>
   1af22:	2203      	movs	r2, #3
   1af24:	4b25      	ldr	r3, [pc, #148]	; (1afbc <ipc_irq_handler+0x11c>)
   1af26:	701a      	strb	r2, [r3, #0]
   1af28:	220c      	movs	r2, #12
   1af2a:	4b25      	ldr	r3, [pc, #148]	; (1afc0 <ipc_irq_handler+0x120>)
   1af2c:	e7ed      	b.n	1af0a <ipc_irq_handler+0x6a>
   1af2e:	4a26      	ldr	r2, [pc, #152]	; (1afc8 <ipc_irq_handler+0x128>)
   1af30:	4293      	cmp	r3, r2
   1af32:	d1c5      	bne.n	1aec0 <ipc_irq_handler+0x20>
   1af34:	2103      	movs	r1, #3
   1af36:	4a21      	ldr	r2, [pc, #132]	; (1afbc <ipc_irq_handler+0x11c>)
   1af38:	7011      	strb	r1, [r2, #0]
   1af3a:	4a21      	ldr	r2, [pc, #132]	; (1afc0 <ipc_irq_handler+0x120>)
   1af3c:	6013      	str	r3, [r2, #0]
   1af3e:	e7bf      	b.n	1aec0 <ipc_irq_handler+0x20>
   1af40:	2203      	movs	r2, #3
   1af42:	4b1e      	ldr	r3, [pc, #120]	; (1afbc <ipc_irq_handler+0x11c>)
   1af44:	701a      	strb	r2, [r3, #0]
   1af46:	222d      	movs	r2, #45	; 0x2d
   1af48:	4b1d      	ldr	r3, [pc, #116]	; (1afc0 <ipc_irq_handler+0x120>)
   1af4a:	e7de      	b.n	1af0a <ipc_irq_handler+0x6a>
   1af4c:	2203      	movs	r2, #3
   1af4e:	4b1b      	ldr	r3, [pc, #108]	; (1afbc <ipc_irq_handler+0x11c>)
   1af50:	701a      	strb	r2, [r3, #0]
   1af52:	2205      	movs	r2, #5
   1af54:	4b1a      	ldr	r3, [pc, #104]	; (1afc0 <ipc_irq_handler+0x120>)
   1af56:	e7d8      	b.n	1af0a <ipc_irq_handler+0x6a>
   1af58:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   1af5c:	d003      	beq.n	1af66 <ipc_irq_handler+0xc6>
   1af5e:	2202      	movs	r2, #2
   1af60:	4b16      	ldr	r3, [pc, #88]	; (1afbc <ipc_irq_handler+0x11c>)
   1af62:	701a      	strb	r2, [r3, #0]
   1af64:	e7ac      	b.n	1aec0 <ipc_irq_handler+0x20>
   1af66:	0762      	lsls	r2, r4, #29
   1af68:	d505      	bpl.n	1af76 <ipc_irq_handler+0xd6>
   1af6a:	4b14      	ldr	r3, [pc, #80]	; (1afbc <ipc_irq_handler+0x11c>)
   1af6c:	781a      	ldrb	r2, [r3, #0]
   1af6e:	461e      	mov	r6, r3
   1af70:	b93a      	cbnz	r2, 1af82 <ipc_irq_handler+0xe2>
   1af72:	f00b fde6 	bl	26b42 <nrf_modem_os_application_irq_set>
   1af76:	06e3      	lsls	r3, r4, #27
   1af78:	d5a2      	bpl.n	1aec0 <ipc_irq_handler+0x20>
   1af7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1af7e:	f00b bde0 	b.w	26b42 <nrf_modem_os_application_irq_set>
   1af82:	2a01      	cmp	r2, #1
   1af84:	d1f7      	bne.n	1af76 <ipc_irq_handler+0xd6>
   1af86:	4a11      	ldr	r2, [pc, #68]	; (1afcc <ipc_irq_handler+0x12c>)
   1af88:	4811      	ldr	r0, [pc, #68]	; (1afd0 <ipc_irq_handler+0x130>)
   1af8a:	6812      	ldr	r2, [r2, #0]
   1af8c:	6891      	ldr	r1, [r2, #8]
   1af8e:	6041      	str	r1, [r0, #4]
   1af90:	6852      	ldr	r2, [r2, #4]
   1af92:	6002      	str	r2, [r0, #0]
   1af94:	b101      	cbz	r1, 1af98 <ipc_irq_handler+0xf8>
   1af96:	b92a      	cbnz	r2, 1afa4 <ipc_irq_handler+0x104>
   1af98:	2303      	movs	r3, #3
   1af9a:	2216      	movs	r2, #22
   1af9c:	7033      	strb	r3, [r6, #0]
   1af9e:	4b08      	ldr	r3, [pc, #32]	; (1afc0 <ipc_irq_handler+0x120>)
   1afa0:	601a      	str	r2, [r3, #0]
   1afa2:	e7e8      	b.n	1af76 <ipc_irq_handler+0xd6>
   1afa4:	6809      	ldr	r1, [r1, #0]
   1afa6:	2910      	cmp	r1, #16
   1afa8:	d8f6      	bhi.n	1af98 <ipc_irq_handler+0xf8>
   1afaa:	6812      	ldr	r2, [r2, #0]
   1afac:	2a10      	cmp	r2, #16
   1afae:	d8f3      	bhi.n	1af98 <ipc_irq_handler+0xf8>
   1afb0:	701d      	strb	r5, [r3, #0]
   1afb2:	e7e0      	b.n	1af76 <ipc_irq_handler+0xd6>
   1afb4:	e000e100 	.word	0xe000e100
   1afb8:	4002a000 	.word	0x4002a000
   1afbc:	200151de 	.word	0x200151de
   1afc0:	20014ee8 	.word	0x20014ee8
   1afc4:	04400004 	.word	0x04400004
   1afc8:	05500001 	.word	0x05500001
   1afcc:	20014ef4 	.word	0x20014ef4
   1afd0:	20014eec 	.word	0x20014eec

0001afd4 <gnss_client_event_handler>:
   1afd4:	f850 1b08 	ldr.w	r1, [r0], #8
   1afd8:	4b01      	ldr	r3, [pc, #4]	; (1afe0 <gnss_client_event_handler+0xc>)
   1afda:	0c09      	lsrs	r1, r1, #16
   1afdc:	681b      	ldr	r3, [r3, #0]
   1afde:	4718      	bx	r3
   1afe0:	20014f08 	.word	0x20014f08

0001afe4 <rpc_gnss_client_set_handler>:
   1afe4:	4b01      	ldr	r3, [pc, #4]	; (1afec <rpc_gnss_client_set_handler+0x8>)
   1afe6:	6018      	str	r0, [r3, #0]
   1afe8:	4770      	bx	lr
   1afea:	bf00      	nop
   1afec:	20014f08 	.word	0x20014f08

0001aff0 <interface_init>:
   1aff0:	b508      	push	{r3, lr}
   1aff2:	f44f 72c6 	mov.w	r2, #396	; 0x18c
   1aff6:	2100      	movs	r1, #0
   1aff8:	4802      	ldr	r0, [pc, #8]	; (1b004 <interface_init+0x14>)
   1affa:	f009 fbcc 	bl	24796 <memset>
   1affe:	2000      	movs	r0, #0
   1b000:	bd08      	pop	{r3, pc}
   1b002:	bf00      	nop
   1b004:	20014f0c 	.word	0x20014f0c

0001b008 <interface_socket_allocate>:
   1b008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b00a:	4606      	mov	r6, r0
   1b00c:	2400      	movs	r4, #0
   1b00e:	272c      	movs	r7, #44	; 0x2c
   1b010:	4b0f      	ldr	r3, [pc, #60]	; (1b050 <interface_socket_allocate+0x48>)
   1b012:	fb07 f004 	mul.w	r0, r7, r4
   1b016:	181d      	adds	r5, r3, r0
   1b018:	5818      	ldr	r0, [r3, r0]
   1b01a:	b988      	cbnz	r0, 1b040 <interface_socket_allocate+0x38>
   1b01c:	f04f 37ff 	mov.w	r7, #4294967295
   1b020:	2301      	movs	r3, #1
   1b022:	4628      	mov	r0, r5
   1b024:	61af      	str	r7, [r5, #24]
   1b026:	602b      	str	r3, [r5, #0]
   1b028:	f00c f871 	bl	2710e <packet_handler_alloc_and_init>
   1b02c:	b168      	cbz	r0, 1b04a <interface_socket_allocate+0x42>
   1b02e:	4628      	mov	r0, r5
   1b030:	f00c f884 	bl	2713c <socket_free>
   1b034:	200c      	movs	r0, #12
   1b036:	f7fe f851 	bl	190dc <nrf_modem_os_errno_set>
   1b03a:	f04f 34ff 	mov.w	r4, #4294967295
   1b03e:	e005      	b.n	1b04c <interface_socket_allocate+0x44>
   1b040:	3401      	adds	r4, #1
   1b042:	2c09      	cmp	r4, #9
   1b044:	d1e5      	bne.n	1b012 <interface_socket_allocate+0xa>
   1b046:	2069      	movs	r0, #105	; 0x69
   1b048:	e7f5      	b.n	1b036 <interface_socket_allocate+0x2e>
   1b04a:	6035      	str	r5, [r6, #0]
   1b04c:	4620      	mov	r0, r4
   1b04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b050:	20014f0c 	.word	0x20014f0c

0001b054 <interface_socket_free>:
   1b054:	2808      	cmp	r0, #8
   1b056:	d805      	bhi.n	1b064 <interface_socket_free+0x10>
   1b058:	222c      	movs	r2, #44	; 0x2c
   1b05a:	4b03      	ldr	r3, [pc, #12]	; (1b068 <interface_socket_free+0x14>)
   1b05c:	fb02 3000 	mla	r0, r2, r0, r3
   1b060:	f00c b86c 	b.w	2713c <socket_free>
   1b064:	4770      	bx	lr
   1b066:	bf00      	nop
   1b068:	20014f0c 	.word	0x20014f0c

0001b06c <interface_socket_wait>:
   1b06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b070:	4615      	mov	r5, r2
   1b072:	222c      	movs	r2, #44	; 0x2c
   1b074:	4350      	muls	r0, r2
   1b076:	461e      	mov	r6, r3
   1b078:	4b0e      	ldr	r3, [pc, #56]	; (1b0b4 <interface_socket_wait+0x48>)
   1b07a:	460c      	mov	r4, r1
   1b07c:	181f      	adds	r7, r3, r0
   1b07e:	581b      	ldr	r3, [r3, r0]
   1b080:	402b      	ands	r3, r5
   1b082:	428b      	cmp	r3, r1
   1b084:	d102      	bne.n	1b08c <interface_socket_wait+0x20>
   1b086:	2000      	movs	r0, #0
   1b088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b08c:	687b      	ldr	r3, [r7, #4]
   1b08e:	2b00      	cmp	r3, #0
   1b090:	d1f9      	bne.n	1b086 <interface_socket_wait+0x1a>
   1b092:	46b8      	mov	r8, r7
   1b094:	f8d8 3000 	ldr.w	r3, [r8]
   1b098:	402b      	ands	r3, r5
   1b09a:	42a3      	cmp	r3, r4
   1b09c:	d0f3      	beq.n	1b086 <interface_socket_wait+0x1a>
   1b09e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b0a2:	2b00      	cmp	r3, #0
   1b0a4:	d1ef      	bne.n	1b086 <interface_socket_wait+0x1a>
   1b0a6:	4631      	mov	r1, r6
   1b0a8:	4638      	mov	r0, r7
   1b0aa:	f00b fcc2 	bl	26a32 <nrf_modem_os_timedwait>
   1b0ae:	2800      	cmp	r0, #0
   1b0b0:	d0f0      	beq.n	1b094 <interface_socket_wait+0x28>
   1b0b2:	e7e9      	b.n	1b088 <interface_socket_wait+0x1c>
   1b0b4:	20014f0c 	.word	0x20014f0c

0001b0b8 <interface_from_internal_id_search>:
   1b0b8:	4b0a      	ldr	r3, [pc, #40]	; (1b0e4 <interface_from_internal_id_search+0x2c>)
   1b0ba:	4602      	mov	r2, r0
   1b0bc:	b530      	push	{r4, r5, lr}
   1b0be:	2000      	movs	r0, #0
   1b0c0:	461c      	mov	r4, r3
   1b0c2:	212c      	movs	r1, #44	; 0x2c
   1b0c4:	fb01 f500 	mul.w	r5, r1, r0
   1b0c8:	5965      	ldr	r5, [r4, r5]
   1b0ca:	b115      	cbz	r5, 1b0d2 <interface_from_internal_id_search+0x1a>
   1b0cc:	699d      	ldr	r5, [r3, #24]
   1b0ce:	4295      	cmp	r5, r2
   1b0d0:	d006      	beq.n	1b0e0 <interface_from_internal_id_search+0x28>
   1b0d2:	3001      	adds	r0, #1
   1b0d4:	2809      	cmp	r0, #9
   1b0d6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
   1b0da:	d1f3      	bne.n	1b0c4 <interface_from_internal_id_search+0xc>
   1b0dc:	f04f 30ff 	mov.w	r0, #4294967295
   1b0e0:	bd30      	pop	{r4, r5, pc}
   1b0e2:	bf00      	nop
   1b0e4:	20014f0c 	.word	0x20014f0c

0001b0e8 <interface_socket_from_handle_get>:
   1b0e8:	2808      	cmp	r0, #8
   1b0ea:	d808      	bhi.n	1b0fe <interface_socket_from_handle_get+0x16>
   1b0ec:	232c      	movs	r3, #44	; 0x2c
   1b0ee:	4343      	muls	r3, r0
   1b0f0:	4a04      	ldr	r2, [pc, #16]	; (1b104 <interface_socket_from_handle_get+0x1c>)
   1b0f2:	18d0      	adds	r0, r2, r3
   1b0f4:	58d3      	ldr	r3, [r2, r3]
   1b0f6:	2b00      	cmp	r3, #0
   1b0f8:	bf08      	it	eq
   1b0fa:	2000      	moveq	r0, #0
   1b0fc:	4770      	bx	lr
   1b0fe:	2000      	movs	r0, #0
   1b100:	4770      	bx	lr
   1b102:	bf00      	nop
   1b104:	20014f0c 	.word	0x20014f0c

0001b108 <rpc_error_to_nrf_errno>:
   1b108:	286a      	cmp	r0, #106	; 0x6a
   1b10a:	bf9a      	itte	ls
   1b10c:	4b01      	ldrls	r3, [pc, #4]	; (1b114 <rpc_error_to_nrf_errno+0xc>)
   1b10e:	5618      	ldrsbls	r0, [r3, r0]
   1b110:	202d      	movhi	r0, #45	; 0x2d
   1b112:	4770      	bx	lr
   1b114:	0002ce18 	.word	0x0002ce18

0001b118 <rpc_error_to_nrf_gai_errno>:
   1b118:	2805      	cmp	r0, #5
   1b11a:	d013      	beq.n	1b144 <rpc_error_to_nrf_gai_errno+0x2c>
   1b11c:	d807      	bhi.n	1b12e <rpc_error_to_nrf_gai_errno+0x16>
   1b11e:	b170      	cbz	r0, 1b13e <rpc_error_to_nrf_gai_errno+0x26>
   1b120:	4b0b      	ldr	r3, [pc, #44]	; (1b150 <rpc_error_to_nrf_gai_errno+0x38>)
   1b122:	561b      	ldrsb	r3, [r3, r0]
   1b124:	4a0b      	ldr	r2, [pc, #44]	; (1b154 <rpc_error_to_nrf_gai_errno+0x3c>)
   1b126:	f240 1015 	movw	r0, #277	; 0x115
   1b12a:	6013      	str	r3, [r2, #0]
   1b12c:	4770      	bx	lr
   1b12e:	2806      	cmp	r0, #6
   1b130:	d00b      	beq.n	1b14a <rpc_error_to_nrf_gai_errno+0x32>
   1b132:	280d      	cmp	r0, #13
   1b134:	d009      	beq.n	1b14a <rpc_error_to_nrf_gai_errno+0x32>
   1b136:	286a      	cmp	r0, #106	; 0x6a
   1b138:	d9f2      	bls.n	1b120 <rpc_error_to_nrf_gai_errno+0x8>
   1b13a:	232d      	movs	r3, #45	; 0x2d
   1b13c:	e7f2      	b.n	1b124 <rpc_error_to_nrf_gai_errno+0xc>
   1b13e:	4b05      	ldr	r3, [pc, #20]	; (1b154 <rpc_error_to_nrf_gai_errno+0x3c>)
   1b140:	6018      	str	r0, [r3, #0]
   1b142:	4770      	bx	lr
   1b144:	f44f 708a 	mov.w	r0, #276	; 0x114
   1b148:	4770      	bx	lr
   1b14a:	f240 1011 	movw	r0, #273	; 0x111
   1b14e:	4770      	bx	lr
   1b150:	0002ce18 	.word	0x0002ce18
   1b154:	200150a0 	.word	0x200150a0

0001b158 <ip_interface_init>:
   1b158:	b510      	push	{r4, lr}
   1b15a:	2400      	movs	r4, #0
   1b15c:	4b06      	ldr	r3, [pc, #24]	; (1b178 <ip_interface_init+0x20>)
   1b15e:	2224      	movs	r2, #36	; 0x24
   1b160:	601c      	str	r4, [r3, #0]
   1b162:	4b06      	ldr	r3, [pc, #24]	; (1b17c <ip_interface_init+0x24>)
   1b164:	4621      	mov	r1, r4
   1b166:	4806      	ldr	r0, [pc, #24]	; (1b180 <ip_interface_init+0x28>)
   1b168:	601c      	str	r4, [r3, #0]
   1b16a:	f009 fb14 	bl	24796 <memset>
   1b16e:	2201      	movs	r2, #1
   1b170:	4b04      	ldr	r3, [pc, #16]	; (1b184 <ip_interface_init+0x2c>)
   1b172:	4620      	mov	r0, r4
   1b174:	701a      	strb	r2, [r3, #0]
   1b176:	bd10      	pop	{r4, pc}
   1b178:	200150ac 	.word	0x200150ac
   1b17c:	200150a8 	.word	0x200150a8
   1b180:	200150b0 	.word	0x200150b0
   1b184:	200151e0 	.word	0x200151e0

0001b188 <rpc_ip_event_handler>:
   1b188:	f248 030d 	movw	r3, #32781	; 0x800d
   1b18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b190:	4299      	cmp	r1, r3
   1b192:	4604      	mov	r4, r0
   1b194:	460e      	mov	r6, r1
   1b196:	b089      	sub	sp, #36	; 0x24
   1b198:	d038      	beq.n	1b20c <rpc_ip_event_handler+0x84>
   1b19a:	f248 030f 	movw	r3, #32783	; 0x800f
   1b19e:	4299      	cmp	r1, r3
   1b1a0:	f000 80c9 	beq.w	1b336 <rpc_ip_event_handler+0x1ae>
   1b1a4:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   1b1a8:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   1b1ac:	68c0      	ldr	r0, [r0, #12]
   1b1ae:	f040 80cf 	bne.w	1b350 <rpc_ip_event_handler+0x1c8>
   1b1b2:	f7ff ff81 	bl	1b0b8 <interface_from_internal_id_search>
   1b1b6:	4607      	mov	r7, r0
   1b1b8:	4638      	mov	r0, r7
   1b1ba:	f7ff ff95 	bl	1b0e8 <interface_socket_from_handle_get>
   1b1be:	4605      	mov	r5, r0
   1b1c0:	2800      	cmp	r0, #0
   1b1c2:	d056      	beq.n	1b272 <rpc_ip_event_handler+0xea>
   1b1c4:	4601      	mov	r1, r0
   1b1c6:	4633      	mov	r3, r6
   1b1c8:	4622      	mov	r2, r4
   1b1ca:	4638      	mov	r0, r7
   1b1cc:	f000 fa88 	bl	1b6e0 <tls_rpc_ip_event_handler>
   1b1d0:	2800      	cmp	r0, #0
   1b1d2:	f000 80bb 	beq.w	1b34c <rpc_ip_event_handler+0x1c4>
   1b1d6:	f248 030c 	movw	r3, #32780	; 0x800c
   1b1da:	429e      	cmp	r6, r3
   1b1dc:	f200 80ba 	bhi.w	1b354 <rpc_ip_event_handler+0x1cc>
   1b1e0:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1b1e4:	d945      	bls.n	1b272 <rpc_ip_event_handler+0xea>
   1b1e6:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   1b1ea:	3e01      	subs	r6, #1
   1b1ec:	2e0b      	cmp	r6, #11
   1b1ee:	d840      	bhi.n	1b272 <rpc_ip_event_handler+0xea>
   1b1f0:	e8df f016 	tbh	[pc, r6, lsl #1]
   1b1f4:	013400f0 	.word	0x013400f0
   1b1f8:	01f701e7 	.word	0x01f701e7
   1b1fc:	01ba0126 	.word	0x01ba0126
   1b200:	015601ba 	.word	0x015601ba
   1b204:	003f00fe 	.word	0x003f00fe
   1b208:	0184003f 	.word	0x0184003f
   1b20c:	4bb1      	ldr	r3, [pc, #708]	; (1b4d4 <rpc_ip_event_handler+0x34c>)
   1b20e:	681a      	ldr	r2, [r3, #0]
   1b210:	9303      	str	r3, [sp, #12]
   1b212:	2a01      	cmp	r2, #1
   1b214:	d12d      	bne.n	1b272 <rpc_ip_event_handler+0xea>
   1b216:	6940      	ldr	r0, [r0, #20]
   1b218:	2800      	cmp	r0, #0
   1b21a:	f040 8087 	bne.w	1b32c <rpc_ip_event_handler+0x1a4>
   1b21e:	f8d4 a018 	ldr.w	sl, [r4, #24]
   1b222:	f8d4 9000 	ldr.w	r9, [r4]
   1b226:	ea4f 134a 	mov.w	r3, sl, lsl #5
   1b22a:	4618      	mov	r0, r3
   1b22c:	9301      	str	r3, [sp, #4]
   1b22e:	f7fe fa37 	bl	196a0 <nrf_modem_os_alloc>
   1b232:	4680      	mov	r8, r0
   1b234:	b310      	cbz	r0, 1b27c <rpc_ip_event_handler+0xf4>
   1b236:	2024      	movs	r0, #36	; 0x24
   1b238:	fb00 f00a 	mul.w	r0, r0, sl
   1b23c:	f7fe fa30 	bl	196a0 <nrf_modem_os_alloc>
   1b240:	4605      	mov	r5, r0
   1b242:	b1e8      	cbz	r0, 1b280 <rpc_ip_event_handler+0xf8>
   1b244:	2704      	movs	r7, #4
   1b246:	eb00 03ca 	add.w	r3, r0, sl, lsl #3
   1b24a:	f108 0620 	add.w	r6, r8, #32
   1b24e:	9302      	str	r3, [sp, #8]
   1b250:	9b02      	ldr	r3, [sp, #8]
   1b252:	42ab      	cmp	r3, r5
   1b254:	d118      	bne.n	1b288 <rpc_ip_event_handler+0x100>
   1b256:	f1ba 0f00 	cmp.w	sl, #0
   1b25a:	d004      	beq.n	1b266 <rpc_ip_event_handler+0xde>
   1b25c:	2200      	movs	r2, #0
   1b25e:	9b01      	ldr	r3, [sp, #4]
   1b260:	4443      	add	r3, r8
   1b262:	f843 2c04 	str.w	r2, [r3, #-4]
   1b266:	4b9c      	ldr	r3, [pc, #624]	; (1b4d8 <rpc_ip_event_handler+0x350>)
   1b268:	f8c3 8000 	str.w	r8, [r3]
   1b26c:	2302      	movs	r3, #2
   1b26e:	9a03      	ldr	r2, [sp, #12]
   1b270:	6013      	str	r3, [r2, #0]
   1b272:	6820      	ldr	r0, [r4, #0]
   1b274:	2800      	cmp	r0, #0
   1b276:	f040 8174 	bne.w	1b562 <rpc_ip_event_handler+0x3da>
   1b27a:	e067      	b.n	1b34c <rpc_ip_event_handler+0x1c4>
   1b27c:	f7fe fa26 	bl	196cc <nrf_modem_os_free>
   1b280:	220c      	movs	r2, #12
   1b282:	4b96      	ldr	r3, [pc, #600]	; (1b4dc <rpc_ip_event_handler+0x354>)
   1b284:	601a      	str	r2, [r3, #0]
   1b286:	e7ee      	b.n	1b266 <rpc_ip_event_handler+0xde>
   1b288:	f859 3007 	ldr.w	r3, [r9, r7]
   1b28c:	f846 3c20 	str.w	r3, [r6, #-32]
   1b290:	eb09 0307 	add.w	r3, r9, r7
   1b294:	685b      	ldr	r3, [r3, #4]
   1b296:	3b01      	subs	r3, #1
   1b298:	2b04      	cmp	r3, #4
   1b29a:	bf8e      	itee	hi
   1b29c:	2300      	movhi	r3, #0
   1b29e:	4a90      	ldrls	r2, [pc, #576]	; (1b4e0 <rpc_ip_event_handler+0x358>)
   1b2a0:	56d3      	ldrsbls	r3, [r2, r3]
   1b2a2:	f846 3c1c 	str.w	r3, [r6, #-28]
   1b2a6:	4b8f      	ldr	r3, [pc, #572]	; (1b4e4 <rpc_ip_event_handler+0x35c>)
   1b2a8:	681b      	ldr	r3, [r3, #0]
   1b2aa:	f846 3c18 	str.w	r3, [r6, #-24]
   1b2ae:	4b8e      	ldr	r3, [pc, #568]	; (1b4e8 <rpc_ip_event_handler+0x360>)
   1b2b0:	681b      	ldr	r3, [r3, #0]
   1b2b2:	f846 3c14 	str.w	r3, [r6, #-20]
   1b2b6:	eb09 0307 	add.w	r3, r9, r7
   1b2ba:	8a1a      	ldrh	r2, [r3, #16]
   1b2bc:	f8b3 b012 	ldrh.w	fp, [r3, #18]
   1b2c0:	4b8a      	ldr	r3, [pc, #552]	; (1b4ec <rpc_ip_event_handler+0x364>)
   1b2c2:	3714      	adds	r7, #20
   1b2c4:	2a04      	cmp	r2, #4
   1b2c6:	881b      	ldrh	r3, [r3, #0]
   1b2c8:	f846 2c10 	str.w	r2, [r6, #-16]
   1b2cc:	f846 5c0c 	str.w	r5, [r6, #-12]
   1b2d0:	eb09 0107 	add.w	r1, r9, r7
   1b2d4:	d122      	bne.n	1b31c <rpc_ip_event_handler+0x194>
   1b2d6:	2002      	movs	r0, #2
   1b2d8:	6068      	str	r0, [r5, #4]
   1b2da:	2010      	movs	r0, #16
   1b2dc:	812b      	strh	r3, [r5, #8]
   1b2de:	7028      	strb	r0, [r5, #0]
   1b2e0:	f105 000c 	add.w	r0, r5, #12
   1b2e4:	f009 fa02 	bl	246ec <memcpy>
   1b2e8:	f856 3c10 	ldr.w	r3, [r6, #-16]
   1b2ec:	f10b 0001 	add.w	r0, fp, #1
   1b2f0:	441f      	add	r7, r3
   1b2f2:	f7fe f9d5 	bl	196a0 <nrf_modem_os_alloc>
   1b2f6:	f846 0c08 	str.w	r0, [r6, #-8]
   1b2fa:	b148      	cbz	r0, 1b310 <rpc_ip_event_handler+0x188>
   1b2fc:	465a      	mov	r2, fp
   1b2fe:	eb09 0107 	add.w	r1, r9, r7
   1b302:	f009 f9f3 	bl	246ec <memcpy>
   1b306:	2200      	movs	r2, #0
   1b308:	f856 3c08 	ldr.w	r3, [r6, #-8]
   1b30c:	f803 200b 	strb.w	r2, [r3, fp]
   1b310:	f846 6c04 	str.w	r6, [r6, #-4]
   1b314:	445f      	add	r7, fp
   1b316:	3620      	adds	r6, #32
   1b318:	3508      	adds	r5, #8
   1b31a:	e799      	b.n	1b250 <rpc_ip_event_handler+0xc8>
   1b31c:	200a      	movs	r0, #10
   1b31e:	6068      	str	r0, [r5, #4]
   1b320:	2024      	movs	r0, #36	; 0x24
   1b322:	812b      	strh	r3, [r5, #8]
   1b324:	7028      	strb	r0, [r5, #0]
   1b326:	f105 0010 	add.w	r0, r5, #16
   1b32a:	e7db      	b.n	1b2e4 <rpc_ip_event_handler+0x15c>
   1b32c:	f7ff fef4 	bl	1b118 <rpc_error_to_nrf_gai_errno>
   1b330:	4b6a      	ldr	r3, [pc, #424]	; (1b4dc <rpc_ip_event_handler+0x354>)
   1b332:	6018      	str	r0, [r3, #0]
   1b334:	e79a      	b.n	1b26c <rpc_ip_event_handler+0xe4>
   1b336:	6943      	ldr	r3, [r0, #20]
   1b338:	2b6a      	cmp	r3, #106	; 0x6a
   1b33a:	bf8e      	itee	hi
   1b33c:	232d      	movhi	r3, #45	; 0x2d
   1b33e:	4a6c      	ldrls	r2, [pc, #432]	; (1b4f0 <rpc_ip_event_handler+0x368>)
   1b340:	56d3      	ldrsbls	r3, [r2, r3]
   1b342:	4a6c      	ldr	r2, [pc, #432]	; (1b4f4 <rpc_ip_event_handler+0x36c>)
   1b344:	6013      	str	r3, [r2, #0]
   1b346:	2201      	movs	r2, #1
   1b348:	4b6b      	ldr	r3, [pc, #428]	; (1b4f8 <rpc_ip_event_handler+0x370>)
   1b34a:	701a      	strb	r2, [r3, #0]
   1b34c:	2000      	movs	r0, #0
   1b34e:	e04c      	b.n	1b3ea <rpc_ip_event_handler+0x262>
   1b350:	0c07      	lsrs	r7, r0, #16
   1b352:	e731      	b.n	1b1b8 <rpc_ip_event_handler+0x30>
   1b354:	f249 0302 	movw	r3, #36866	; 0x9002
   1b358:	429e      	cmp	r6, r3
   1b35a:	f000 80b0 	beq.w	1b4be <rpc_ip_event_handler+0x336>
   1b35e:	f249 0303 	movw	r3, #36867	; 0x9003
   1b362:	429e      	cmp	r6, r3
   1b364:	d053      	beq.n	1b40e <rpc_ip_event_handler+0x286>
   1b366:	f249 0301 	movw	r3, #36865	; 0x9001
   1b36a:	429e      	cmp	r6, r3
   1b36c:	d181      	bne.n	1b272 <rpc_ip_event_handler+0xea>
   1b36e:	682e      	ldr	r6, [r5, #0]
   1b370:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   1b374:	f000 80f4 	beq.w	1b560 <rpc_ip_event_handler+0x3d8>
   1b378:	68a3      	ldr	r3, [r4, #8]
   1b37a:	2b04      	cmp	r3, #4
   1b37c:	f240 80ed 	bls.w	1b55a <rpc_ip_event_handler+0x3d2>
   1b380:	8a67      	ldrh	r7, [r4, #18]
   1b382:	2f00      	cmp	r7, #0
   1b384:	f000 80ea 	beq.w	1b55c <rpc_ip_event_handler+0x3d4>
   1b388:	2f10      	cmp	r7, #16
   1b38a:	f040 80ca 	bne.w	1b522 <rpc_ip_event_handler+0x39a>
   1b38e:	2024      	movs	r0, #36	; 0x24
   1b390:	f7fe f986 	bl	196a0 <nrf_modem_os_alloc>
   1b394:	4606      	mov	r6, r0
   1b396:	b1d8      	cbz	r0, 1b3d0 <rpc_ip_event_handler+0x248>
   1b398:	230a      	movs	r3, #10
   1b39a:	2724      	movs	r7, #36	; 0x24
   1b39c:	6043      	str	r3, [r0, #4]
   1b39e:	7007      	strb	r7, [r0, #0]
   1b3a0:	7c62      	ldrb	r2, [r4, #17]
   1b3a2:	7c23      	ldrb	r3, [r4, #16]
   1b3a4:	f104 0114 	add.w	r1, r4, #20
   1b3a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b3ac:	2210      	movs	r2, #16
   1b3ae:	8103      	strh	r3, [r0, #8]
   1b3b0:	4410      	add	r0, r2
   1b3b2:	f009 f99b 	bl	246ec <memcpy>
   1b3b6:	6823      	ldr	r3, [r4, #0]
   1b3b8:	69e8      	ldr	r0, [r5, #28]
   1b3ba:	9304      	str	r3, [sp, #16]
   1b3bc:	6863      	ldr	r3, [r4, #4]
   1b3be:	9707      	str	r7, [sp, #28]
   1b3c0:	e9cd 3605 	strd	r3, r6, [sp, #20]
   1b3c4:	6803      	ldr	r3, [r0, #0]
   1b3c6:	a904      	add	r1, sp, #16
   1b3c8:	685b      	ldr	r3, [r3, #4]
   1b3ca:	4798      	blx	r3
   1b3cc:	3001      	adds	r0, #1
   1b3ce:	d17b      	bne.n	1b4c8 <rpc_ip_event_handler+0x340>
   1b3d0:	2002      	movs	r0, #2
   1b3d2:	e00a      	b.n	1b3ea <rpc_ip_event_handler+0x262>
   1b3d4:	682b      	ldr	r3, [r5, #0]
   1b3d6:	2b01      	cmp	r3, #1
   1b3d8:	d1b8      	bne.n	1b34c <rpc_ip_event_handler+0x1c4>
   1b3da:	6960      	ldr	r0, [r4, #20]
   1b3dc:	2800      	cmp	r0, #0
   1b3de:	f040 80fa 	bne.w	1b5d6 <rpc_ip_event_handler+0x44e>
   1b3e2:	2302      	movs	r3, #2
   1b3e4:	602b      	str	r3, [r5, #0]
   1b3e6:	69a3      	ldr	r3, [r4, #24]
   1b3e8:	61ab      	str	r3, [r5, #24]
   1b3ea:	b009      	add	sp, #36	; 0x24
   1b3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3f0:	682b      	ldr	r3, [r5, #0]
   1b3f2:	b29b      	uxth	r3, r3
   1b3f4:	2b0d      	cmp	r3, #13
   1b3f6:	d1a9      	bne.n	1b34c <rpc_ip_event_handler+0x1c4>
   1b3f8:	6960      	ldr	r0, [r4, #20]
   1b3fa:	2800      	cmp	r0, #0
   1b3fc:	f040 80eb 	bne.w	1b5d6 <rpc_ip_event_handler+0x44e>
   1b400:	682b      	ldr	r3, [r5, #0]
   1b402:	0c1b      	lsrs	r3, r3, #16
   1b404:	041b      	lsls	r3, r3, #16
   1b406:	f043 030e 	orr.w	r3, r3, #14
   1b40a:	602b      	str	r3, [r5, #0]
   1b40c:	e7ed      	b.n	1b3ea <rpc_ip_event_handler+0x262>
   1b40e:	682b      	ldr	r3, [r5, #0]
   1b410:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1b414:	602b      	str	r3, [r5, #0]
   1b416:	682b      	ldr	r3, [r5, #0]
   1b418:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   1b41c:	602b      	str	r3, [r5, #0]
   1b41e:	6923      	ldr	r3, [r4, #16]
   1b420:	2b6c      	cmp	r3, #108	; 0x6c
   1b422:	d107      	bne.n	1b434 <rpc_ip_event_handler+0x2ac>
   1b424:	682b      	ldr	r3, [r5, #0]
   1b426:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   1b42a:	602b      	str	r3, [r5, #0]
   1b42c:	2339      	movs	r3, #57	; 0x39
   1b42e:	606b      	str	r3, [r5, #4]
   1b430:	60ab      	str	r3, [r5, #8]
   1b432:	e78b      	b.n	1b34c <rpc_ip_event_handler+0x1c4>
   1b434:	2b6a      	cmp	r3, #106	; 0x6a
   1b436:	bf96      	itet	ls
   1b438:	4a2d      	ldrls	r2, [pc, #180]	; (1b4f0 <rpc_ip_event_handler+0x368>)
   1b43a:	232d      	movhi	r3, #45	; 0x2d
   1b43c:	56d3      	ldrsbls	r3, [r2, r3]
   1b43e:	e7f6      	b.n	1b42e <rpc_ip_event_handler+0x2a6>
   1b440:	682b      	ldr	r3, [r5, #0]
   1b442:	b29b      	uxth	r3, r3
   1b444:	2b03      	cmp	r3, #3
   1b446:	d181      	bne.n	1b34c <rpc_ip_event_handler+0x1c4>
   1b448:	6960      	ldr	r0, [r4, #20]
   1b44a:	2800      	cmp	r0, #0
   1b44c:	f040 80c3 	bne.w	1b5d6 <rpc_ip_event_handler+0x44e>
   1b450:	682b      	ldr	r3, [r5, #0]
   1b452:	0c1b      	lsrs	r3, r3, #16
   1b454:	041b      	lsls	r3, r3, #16
   1b456:	f043 0304 	orr.w	r3, r3, #4
   1b45a:	e7d6      	b.n	1b40a <rpc_ip_event_handler+0x282>
   1b45c:	682b      	ldr	r3, [r5, #0]
   1b45e:	0099      	lsls	r1, r3, #2
   1b460:	f57f af74 	bpl.w	1b34c <rpc_ip_event_handler+0x1c4>
   1b464:	682b      	ldr	r3, [r5, #0]
   1b466:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1b46a:	602b      	str	r3, [r5, #0]
   1b46c:	6960      	ldr	r0, [r4, #20]
   1b46e:	b968      	cbnz	r0, 1b48c <rpc_ip_event_handler+0x304>
   1b470:	682b      	ldr	r3, [r5, #0]
   1b472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b476:	602b      	str	r3, [r5, #0]
   1b478:	682b      	ldr	r3, [r5, #0]
   1b47a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1b47e:	602b      	str	r3, [r5, #0]
   1b480:	682b      	ldr	r3, [r5, #0]
   1b482:	0c1b      	lsrs	r3, r3, #16
   1b484:	041b      	lsls	r3, r3, #16
   1b486:	f043 0305 	orr.w	r3, r3, #5
   1b48a:	e7be      	b.n	1b40a <rpc_ip_event_handler+0x282>
   1b48c:	286a      	cmp	r0, #106	; 0x6a
   1b48e:	f200 8096 	bhi.w	1b5be <rpc_ip_event_handler+0x436>
   1b492:	4b17      	ldr	r3, [pc, #92]	; (1b4f0 <rpc_ip_event_handler+0x368>)
   1b494:	561b      	ldrsb	r3, [r3, r0]
   1b496:	606b      	str	r3, [r5, #4]
   1b498:	682b      	ldr	r3, [r5, #0]
   1b49a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1b49e:	e016      	b.n	1b4ce <rpc_ip_event_handler+0x346>
   1b4a0:	682b      	ldr	r3, [r5, #0]
   1b4a2:	b29b      	uxth	r3, r3
   1b4a4:	2b06      	cmp	r3, #6
   1b4a6:	f47f af51 	bne.w	1b34c <rpc_ip_event_handler+0x1c4>
   1b4aa:	6960      	ldr	r0, [r4, #20]
   1b4ac:	2800      	cmp	r0, #0
   1b4ae:	f040 8092 	bne.w	1b5d6 <rpc_ip_event_handler+0x44e>
   1b4b2:	682b      	ldr	r3, [r5, #0]
   1b4b4:	0c1b      	lsrs	r3, r3, #16
   1b4b6:	041b      	lsls	r3, r3, #16
   1b4b8:	f043 0307 	orr.w	r3, r3, #7
   1b4bc:	e7a5      	b.n	1b40a <rpc_ip_event_handler+0x282>
   1b4be:	682b      	ldr	r3, [r5, #0]
   1b4c0:	b29b      	uxth	r3, r3
   1b4c2:	2b07      	cmp	r3, #7
   1b4c4:	f47f af42 	bne.w	1b34c <rpc_ip_event_handler+0x1c4>
   1b4c8:	682b      	ldr	r3, [r5, #0]
   1b4ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1b4ce:	602b      	str	r3, [r5, #0]
   1b4d0:	e73c      	b.n	1b34c <rpc_ip_event_handler+0x1c4>
   1b4d2:	bf00      	nop
   1b4d4:	200150a8 	.word	0x200150a8
   1b4d8:	200150ac 	.word	0x200150ac
   1b4dc:	200150a4 	.word	0x200150a4
   1b4e0:	0002ce13 	.word	0x0002ce13
   1b4e4:	2001509c 	.word	0x2001509c
   1b4e8:	20015098 	.word	0x20015098
   1b4ec:	200151d0 	.word	0x200151d0
   1b4f0:	0002ce18 	.word	0x0002ce18
   1b4f4:	200150d4 	.word	0x200150d4
   1b4f8:	200151e1 	.word	0x200151e1
   1b4fc:	682b      	ldr	r3, [r5, #0]
   1b4fe:	b29b      	uxth	r3, r3
   1b500:	2b08      	cmp	r3, #8
   1b502:	f47f af23 	bne.w	1b34c <rpc_ip_event_handler+0x1c4>
   1b506:	6963      	ldr	r3, [r4, #20]
   1b508:	2b00      	cmp	r3, #0
   1b50a:	d17a      	bne.n	1b602 <rpc_ip_event_handler+0x47a>
   1b50c:	4b40      	ldr	r3, [pc, #256]	; (1b610 <rpc_ip_event_handler+0x488>)
   1b50e:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   1b512:	682b      	ldr	r3, [r5, #0]
   1b514:	0c1b      	lsrs	r3, r3, #16
   1b516:	041b      	lsls	r3, r3, #16
   1b518:	f043 0309 	orr.w	r3, r3, #9
   1b51c:	602b      	str	r3, [r5, #0]
   1b51e:	2001      	movs	r0, #1
   1b520:	e763      	b.n	1b3ea <rpc_ip_event_handler+0x262>
   1b522:	2f04      	cmp	r7, #4
   1b524:	d11c      	bne.n	1b560 <rpc_ip_event_handler+0x3d8>
   1b526:	2010      	movs	r0, #16
   1b528:	f7fe f8ba 	bl	196a0 <nrf_modem_os_alloc>
   1b52c:	4606      	mov	r6, r0
   1b52e:	2800      	cmp	r0, #0
   1b530:	f43f af4e 	beq.w	1b3d0 <rpc_ip_event_handler+0x248>
   1b534:	2302      	movs	r3, #2
   1b536:	f04f 0810 	mov.w	r8, #16
   1b53a:	6043      	str	r3, [r0, #4]
   1b53c:	f880 8000 	strb.w	r8, [r0]
   1b540:	7c62      	ldrb	r2, [r4, #17]
   1b542:	7c23      	ldrb	r3, [r4, #16]
   1b544:	f104 0114 	add.w	r1, r4, #20
   1b548:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1b54c:	8103      	strh	r3, [r0, #8]
   1b54e:	463a      	mov	r2, r7
   1b550:	300c      	adds	r0, #12
   1b552:	f009 f8cb 	bl	246ec <memcpy>
   1b556:	4647      	mov	r7, r8
   1b558:	e72d      	b.n	1b3b6 <rpc_ip_event_handler+0x22e>
   1b55a:	2700      	movs	r7, #0
   1b55c:	463e      	mov	r6, r7
   1b55e:	e72a      	b.n	1b3b6 <rpc_ip_event_handler+0x22e>
   1b560:	6820      	ldr	r0, [r4, #0]
   1b562:	f00b fdc9 	bl	270f8 <rpc_ip_client_data_free>
   1b566:	e6f1      	b.n	1b34c <rpc_ip_event_handler+0x1c4>
   1b568:	6963      	ldr	r3, [r4, #20]
   1b56a:	b93b      	cbnz	r3, 1b57c <rpc_ip_event_handler+0x3f4>
   1b56c:	682b      	ldr	r3, [r5, #0]
   1b56e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b572:	602b      	str	r3, [r5, #0]
   1b574:	4b26      	ldr	r3, [pc, #152]	; (1b610 <rpc_ip_event_handler+0x488>)
   1b576:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   1b57a:	e7d0      	b.n	1b51e <rpc_ip_event_handler+0x396>
   1b57c:	2b6b      	cmp	r3, #107	; 0x6b
   1b57e:	d10f      	bne.n	1b5a0 <rpc_ip_event_handler+0x418>
   1b580:	220c      	movs	r2, #12
   1b582:	682b      	ldr	r3, [r5, #0]
   1b584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b588:	602b      	str	r3, [r5, #0]
   1b58a:	692b      	ldr	r3, [r5, #16]
   1b58c:	2b01      	cmp	r3, #1
   1b58e:	682b      	ldr	r3, [r5, #0]
   1b590:	bf0c      	ite	eq
   1b592:	f043 6300 	orreq.w	r3, r3, #134217728	; 0x8000000
   1b596:	f443 2380 	orrne.w	r3, r3, #262144	; 0x40000
   1b59a:	602b      	str	r3, [r5, #0]
   1b59c:	606a      	str	r2, [r5, #4]
   1b59e:	e6d5      	b.n	1b34c <rpc_ip_event_handler+0x1c4>
   1b5a0:	f023 0202 	bic.w	r2, r3, #2
   1b5a4:	2a01      	cmp	r2, #1
   1b5a6:	d105      	bne.n	1b5b4 <rpc_ip_event_handler+0x42c>
   1b5a8:	230c      	movs	r3, #12
   1b5aa:	606b      	str	r3, [r5, #4]
   1b5ac:	682b      	ldr	r3, [r5, #0]
   1b5ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b5b2:	e78c      	b.n	1b4ce <rpc_ip_event_handler+0x346>
   1b5b4:	2b6a      	cmp	r3, #106	; 0x6a
   1b5b6:	d802      	bhi.n	1b5be <rpc_ip_event_handler+0x436>
   1b5b8:	4a16      	ldr	r2, [pc, #88]	; (1b614 <rpc_ip_event_handler+0x48c>)
   1b5ba:	56d3      	ldrsb	r3, [r2, r3]
   1b5bc:	e76b      	b.n	1b496 <rpc_ip_event_handler+0x30e>
   1b5be:	232d      	movs	r3, #45	; 0x2d
   1b5c0:	e769      	b.n	1b496 <rpc_ip_event_handler+0x30e>
   1b5c2:	682b      	ldr	r3, [r5, #0]
   1b5c4:	025a      	lsls	r2, r3, #9
   1b5c6:	f57f aec1 	bpl.w	1b34c <rpc_ip_event_handler+0x1c4>
   1b5ca:	6960      	ldr	r0, [r4, #20]
   1b5cc:	b918      	cbnz	r0, 1b5d6 <rpc_ip_event_handler+0x44e>
   1b5ce:	682b      	ldr	r3, [r5, #0]
   1b5d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   1b5d4:	e719      	b.n	1b40a <rpc_ip_event_handler+0x282>
   1b5d6:	286a      	cmp	r0, #106	; 0x6a
   1b5d8:	d818      	bhi.n	1b60c <rpc_ip_event_handler+0x484>
   1b5da:	4b0e      	ldr	r3, [pc, #56]	; (1b614 <rpc_ip_event_handler+0x48c>)
   1b5dc:	561b      	ldrsb	r3, [r3, r0]
   1b5de:	606b      	str	r3, [r5, #4]
   1b5e0:	e6b4      	b.n	1b34c <rpc_ip_event_handler+0x1c4>
   1b5e2:	682b      	ldr	r3, [r5, #0]
   1b5e4:	01db      	lsls	r3, r3, #7
   1b5e6:	f57f aeb1 	bpl.w	1b34c <rpc_ip_event_handler+0x1c4>
   1b5ea:	6963      	ldr	r3, [r4, #20]
   1b5ec:	b94b      	cbnz	r3, 1b602 <rpc_ip_event_handler+0x47a>
   1b5ee:	6820      	ldr	r0, [r4, #0]
   1b5f0:	b118      	cbz	r0, 1b5fa <rpc_ip_event_handler+0x472>
   1b5f2:	2001      	movs	r0, #1
   1b5f4:	4b06      	ldr	r3, [pc, #24]	; (1b610 <rpc_ip_event_handler+0x488>)
   1b5f6:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   1b5fa:	682b      	ldr	r3, [r5, #0]
   1b5fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   1b600:	e703      	b.n	1b40a <rpc_ip_event_handler+0x282>
   1b602:	2b6a      	cmp	r3, #106	; 0x6a
   1b604:	d802      	bhi.n	1b60c <rpc_ip_event_handler+0x484>
   1b606:	4a03      	ldr	r2, [pc, #12]	; (1b614 <rpc_ip_event_handler+0x48c>)
   1b608:	56d3      	ldrsb	r3, [r2, r3]
   1b60a:	e7e8      	b.n	1b5de <rpc_ip_event_handler+0x456>
   1b60c:	232d      	movs	r3, #45	; 0x2d
   1b60e:	e7e6      	b.n	1b5de <rpc_ip_event_handler+0x456>
   1b610:	200150b0 	.word	0x200150b0
   1b614:	0002ce18 	.word	0x0002ce18

0001b618 <hostname_free>:
   1b618:	b538      	push	{r3, r4, r5, lr}
   1b61a:	4c07      	ldr	r4, [pc, #28]	; (1b638 <hostname_free+0x20>)
   1b61c:	4605      	mov	r5, r0
   1b61e:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
   1b622:	b138      	cbz	r0, 1b634 <hostname_free+0x1c>
   1b624:	f7fe f852 	bl	196cc <nrf_modem_os_free>
   1b628:	2300      	movs	r3, #0
   1b62a:	f844 3035 	str.w	r3, [r4, r5, lsl #3]
   1b62e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1b632:	6063      	str	r3, [r4, #4]
   1b634:	bd38      	pop	{r3, r4, r5, pc}
   1b636:	bf00      	nop
   1b638:	200150d8 	.word	0x200150d8

0001b63c <secure_socket_attach_initiate>:
   1b63c:	f04f 33ff 	mov.w	r3, #4294967295
   1b640:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1b644:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1b6cc <secure_socket_attach_initiate+0x90>
   1b648:	9301      	str	r3, [sp, #4]
   1b64a:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   1b64e:	460d      	mov	r5, r1
   1b650:	4616      	mov	r6, r2
   1b652:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b656:	f247 0281 	movw	r2, #28801	; 0x7081
   1b65a:	6989      	ldr	r1, [r1, #24]
   1b65c:	4607      	mov	r7, r0
   1b65e:	f00b fd7a 	bl	27156 <ip_interface_request_create>
   1b662:	4604      	mov	r4, r0
   1b664:	b360      	cbz	r0, 1b6c0 <secure_socket_attach_initiate+0x84>
   1b666:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1b66a:	b122      	cbz	r2, 1b676 <secure_socket_attach_initiate+0x3a>
   1b66c:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
   1b670:	6800      	ldr	r0, [r0, #0]
   1b672:	f009 f83b 	bl	246ec <memcpy>
   1b676:	2224      	movs	r2, #36	; 0x24
   1b678:	4913      	ldr	r1, [pc, #76]	; (1b6c8 <secure_socket_attach_initiate+0x8c>)
   1b67a:	f104 0014 	add.w	r0, r4, #20
   1b67e:	fb02 1107 	mla	r1, r2, r7, r1
   1b682:	f009 f833 	bl	246ec <memcpy>
   1b686:	68a3      	ldr	r3, [r4, #8]
   1b688:	f247 0181 	movw	r1, #28801	; 0x7081
   1b68c:	3324      	adds	r3, #36	; 0x24
   1b68e:	60a3      	str	r3, [r4, #8]
   1b690:	682b      	ldr	r3, [r5, #0]
   1b692:	4620      	mov	r0, r4
   1b694:	0c1b      	lsrs	r3, r3, #16
   1b696:	041b      	lsls	r3, r3, #16
   1b698:	f043 030a 	orr.w	r3, r3, #10
   1b69c:	602b      	str	r3, [r5, #0]
   1b69e:	f00b fd21 	bl	270e4 <rpc_ip_client_request_send>
   1b6a2:	682b      	ldr	r3, [r5, #0]
   1b6a4:	00db      	lsls	r3, r3, #3
   1b6a6:	d40d      	bmi.n	1b6c4 <secure_socket_attach_initiate+0x88>
   1b6a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1b6ac:	210b      	movs	r1, #11
   1b6ae:	4638      	mov	r0, r7
   1b6b0:	ab01      	add	r3, sp, #4
   1b6b2:	f00b fd68 	bl	27186 <ip_interface_wait>
   1b6b6:	b100      	cbz	r0, 1b6ba <secure_socket_attach_initiate+0x7e>
   1b6b8:	602e      	str	r6, [r5, #0]
   1b6ba:	b003      	add	sp, #12
   1b6bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b6c0:	200c      	movs	r0, #12
   1b6c2:	e7fa      	b.n	1b6ba <secure_socket_attach_initiate+0x7e>
   1b6c4:	2073      	movs	r0, #115	; 0x73
   1b6c6:	e7f8      	b.n	1b6ba <secure_socket_attach_initiate+0x7e>
   1b6c8:	200151e3 	.word	0x200151e3
   1b6cc:	200150d8 	.word	0x200150d8

0001b6d0 <tls_interface_init>:
   1b6d0:	2201      	movs	r2, #1
   1b6d2:	4b02      	ldr	r3, [pc, #8]	; (1b6dc <tls_interface_init+0xc>)
   1b6d4:	2000      	movs	r0, #0
   1b6d6:	701a      	strb	r2, [r3, #0]
   1b6d8:	4770      	bx	lr
   1b6da:	bf00      	nop
   1b6dc:	200151e2 	.word	0x200151e2

0001b6e0 <tls_rpc_ip_event_handler>:
   1b6e0:	b570      	push	{r4, r5, r6, lr}
   1b6e2:	460c      	mov	r4, r1
   1b6e4:	f248 0181 	movw	r1, #32897	; 0x8081
   1b6e8:	428b      	cmp	r3, r1
   1b6ea:	4606      	mov	r6, r0
   1b6ec:	d035      	beq.n	1b75a <tls_rpc_ip_event_handler+0x7a>
   1b6ee:	f249 0182 	movw	r1, #36994	; 0x9082
   1b6f2:	428b      	cmp	r3, r1
   1b6f4:	d040      	beq.n	1b778 <tls_rpc_ip_event_handler+0x98>
   1b6f6:	f248 0102 	movw	r1, #32770	; 0x8002
   1b6fa:	428b      	cmp	r3, r1
   1b6fc:	d161      	bne.n	1b7c2 <tls_rpc_ip_event_handler+0xe2>
   1b6fe:	2c00      	cmp	r4, #0
   1b700:	d05f      	beq.n	1b7c2 <tls_rpc_ip_event_handler+0xe2>
   1b702:	6963      	ldr	r3, [r4, #20]
   1b704:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   1b708:	d002      	beq.n	1b710 <tls_rpc_ip_event_handler+0x30>
   1b70a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   1b70e:	d158      	bne.n	1b7c2 <tls_rpc_ip_event_handler+0xe2>
   1b710:	6823      	ldr	r3, [r4, #0]
   1b712:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   1b716:	6023      	str	r3, [r4, #0]
   1b718:	6955      	ldr	r5, [r2, #20]
   1b71a:	2d00      	cmp	r5, #0
   1b71c:	d14d      	bne.n	1b7ba <tls_rpc_ip_event_handler+0xda>
   1b71e:	6823      	ldr	r3, [r4, #0]
   1b720:	0c1b      	lsrs	r3, r3, #16
   1b722:	041b      	lsls	r3, r3, #16
   1b724:	f043 0305 	orr.w	r3, r3, #5
   1b728:	6023      	str	r3, [r4, #0]
   1b72a:	6823      	ldr	r3, [r4, #0]
   1b72c:	00db      	lsls	r3, r3, #3
   1b72e:	d401      	bmi.n	1b734 <tls_rpc_ip_event_handler+0x54>
   1b730:	2000      	movs	r0, #0
   1b732:	e020      	b.n	1b776 <tls_rpc_ip_event_handler+0x96>
   1b734:	2324      	movs	r3, #36	; 0x24
   1b736:	4373      	muls	r3, r6
   1b738:	4a23      	ldr	r2, [pc, #140]	; (1b7c8 <tls_rpc_ip_event_handler+0xe8>)
   1b73a:	5cd3      	ldrb	r3, [r2, r3]
   1b73c:	2b02      	cmp	r3, #2
   1b73e:	d1f7      	bne.n	1b730 <tls_rpc_ip_event_handler+0x50>
   1b740:	4621      	mov	r1, r4
   1b742:	4630      	mov	r0, r6
   1b744:	f00b fd2f 	bl	271a6 <secure_client_socket>
   1b748:	2800      	cmp	r0, #0
   1b74a:	d0f1      	beq.n	1b730 <tls_rpc_ip_event_handler+0x50>
   1b74c:	2873      	cmp	r0, #115	; 0x73
   1b74e:	d0ef      	beq.n	1b730 <tls_rpc_ip_event_handler+0x50>
   1b750:	6060      	str	r0, [r4, #4]
   1b752:	6823      	ldr	r3, [r4, #0]
   1b754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   1b758:	e02d      	b.n	1b7b6 <tls_rpc_ip_event_handler+0xd6>
   1b75a:	2c00      	cmp	r4, #0
   1b75c:	d0e8      	beq.n	1b730 <tls_rpc_ip_event_handler+0x50>
   1b75e:	6823      	ldr	r3, [r4, #0]
   1b760:	b29b      	uxth	r3, r3
   1b762:	2b0a      	cmp	r3, #10
   1b764:	d1e4      	bne.n	1b730 <tls_rpc_ip_event_handler+0x50>
   1b766:	6950      	ldr	r0, [r2, #20]
   1b768:	bb40      	cbnz	r0, 1b7bc <tls_rpc_ip_event_handler+0xdc>
   1b76a:	6823      	ldr	r3, [r4, #0]
   1b76c:	0c1b      	lsrs	r3, r3, #16
   1b76e:	041b      	lsls	r3, r3, #16
   1b770:	f043 030b 	orr.w	r3, r3, #11
   1b774:	6023      	str	r3, [r4, #0]
   1b776:	bd70      	pop	{r4, r5, r6, pc}
   1b778:	2c00      	cmp	r4, #0
   1b77a:	d0d9      	beq.n	1b730 <tls_rpc_ip_event_handler+0x50>
   1b77c:	6823      	ldr	r3, [r4, #0]
   1b77e:	b29b      	uxth	r3, r3
   1b780:	2b0b      	cmp	r3, #11
   1b782:	d1d5      	bne.n	1b730 <tls_rpc_ip_event_handler+0x50>
   1b784:	6915      	ldr	r5, [r2, #16]
   1b786:	b9c5      	cbnz	r5, 1b7ba <tls_rpc_ip_event_handler+0xda>
   1b788:	6823      	ldr	r3, [r4, #0]
   1b78a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   1b78e:	6023      	str	r3, [r4, #0]
   1b790:	f7ff ff42 	bl	1b618 <hostname_free>
   1b794:	6823      	ldr	r3, [r4, #0]
   1b796:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   1b79a:	6023      	str	r3, [r4, #0]
   1b79c:	6823      	ldr	r3, [r4, #0]
   1b79e:	0c1b      	lsrs	r3, r3, #16
   1b7a0:	041b      	lsls	r3, r3, #16
   1b7a2:	f043 030c 	orr.w	r3, r3, #12
   1b7a6:	6023      	str	r3, [r4, #0]
   1b7a8:	6823      	ldr	r3, [r4, #0]
   1b7aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b7ae:	6023      	str	r3, [r4, #0]
   1b7b0:	6823      	ldr	r3, [r4, #0]
   1b7b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1b7b6:	6023      	str	r3, [r4, #0]
   1b7b8:	e7ba      	b.n	1b730 <tls_rpc_ip_event_handler+0x50>
   1b7ba:	4628      	mov	r0, r5
   1b7bc:	f7ff fca4 	bl	1b108 <rpc_error_to_nrf_errno>
   1b7c0:	e7c6      	b.n	1b750 <tls_rpc_ip_event_handler+0x70>
   1b7c2:	2001      	movs	r0, #1
   1b7c4:	e7d7      	b.n	1b776 <tls_rpc_ip_event_handler+0x96>
   1b7c6:	bf00      	nop
   1b7c8:	200151e3 	.word	0x200151e3

0001b7cc <at_interface_init>:
   1b7cc:	2201      	movs	r2, #1
   1b7ce:	4b02      	ldr	r3, [pc, #8]	; (1b7d8 <at_interface_init+0xc>)
   1b7d0:	2000      	movs	r0, #0
   1b7d2:	701a      	strb	r2, [r3, #0]
   1b7d4:	4770      	bx	lr
   1b7d6:	bf00      	nop
   1b7d8:	20015327 	.word	0x20015327

0001b7dc <at_interface_open>:
   1b7dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1b7e0:	f04f 0800 	mov.w	r8, #0
   1b7e4:	4b19      	ldr	r3, [pc, #100]	; (1b84c <at_interface_open+0x70>)
   1b7e6:	4607      	mov	r7, r0
   1b7e8:	781b      	ldrb	r3, [r3, #0]
   1b7ea:	460d      	mov	r5, r1
   1b7ec:	4616      	mov	r6, r2
   1b7ee:	f8cd 800c 	str.w	r8, [sp, #12]
   1b7f2:	b943      	cbnz	r3, 1b806 <at_interface_open+0x2a>
   1b7f4:	2070      	movs	r0, #112	; 0x70
   1b7f6:	f7fd fc71 	bl	190dc <nrf_modem_os_errno_set>
   1b7fa:	f04f 34ff 	mov.w	r4, #4294967295
   1b7fe:	4620      	mov	r0, r4
   1b800:	b004      	add	sp, #16
   1b802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b806:	2902      	cmp	r1, #2
   1b808:	d001      	beq.n	1b80e <at_interface_open+0x32>
   1b80a:	2029      	movs	r0, #41	; 0x29
   1b80c:	e7f3      	b.n	1b7f6 <at_interface_open+0x1a>
   1b80e:	4a10      	ldr	r2, [pc, #64]	; (1b850 <at_interface_open+0x74>)
   1b810:	a803      	add	r0, sp, #12
   1b812:	f7ff fbf9 	bl	1b008 <interface_socket_allocate>
   1b816:	9b03      	ldr	r3, [sp, #12]
   1b818:	4604      	mov	r4, r0
   1b81a:	2b00      	cmp	r3, #0
   1b81c:	d0ef      	beq.n	1b7fe <at_interface_open+0x22>
   1b81e:	e9c3 7503 	strd	r7, r5, [r3, #12]
   1b822:	615e      	str	r6, [r3, #20]
   1b824:	4642      	mov	r2, r8
   1b826:	9500      	str	r5, [sp, #0]
   1b828:	2305      	movs	r3, #5
   1b82a:	4641      	mov	r1, r8
   1b82c:	f00b fd06 	bl	2723c <send_message>
   1b830:	4605      	mov	r5, r0
   1b832:	b120      	cbz	r0, 1b83e <at_interface_open+0x62>
   1b834:	4620      	mov	r0, r4
   1b836:	f7ff fc0d 	bl	1b054 <interface_socket_free>
   1b83a:	4628      	mov	r0, r5
   1b83c:	e7db      	b.n	1b7f6 <at_interface_open+0x1a>
   1b83e:	9a03      	ldr	r2, [sp, #12]
   1b840:	6813      	ldr	r3, [r2, #0]
   1b842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1b846:	6013      	str	r3, [r2, #0]
   1b848:	e7d9      	b.n	1b7fe <at_interface_open+0x22>
   1b84a:	bf00      	nop
   1b84c:	20015327 	.word	0x20015327
   1b850:	00027217 	.word	0x00027217

0001b854 <at_cmd_send>:
   1b854:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b856:	4616      	mov	r6, r2
   1b858:	f06f 0258 	mvn.w	r2, #88	; 0x58
   1b85c:	2400      	movs	r4, #0
   1b85e:	7302      	strb	r2, [r0, #12]
   1b860:	2204      	movs	r2, #4
   1b862:	4d0c      	ldr	r5, [pc, #48]	; (1b894 <at_cmd_send+0x40>)
   1b864:	7344      	strb	r4, [r0, #13]
   1b866:	7384      	strb	r4, [r0, #14]
   1b868:	73c4      	strb	r4, [r0, #15]
   1b86a:	7202      	strb	r2, [r0, #8]
   1b86c:	7244      	strb	r4, [r0, #9]
   1b86e:	7284      	strb	r4, [r0, #10]
   1b870:	72c4      	strb	r4, [r0, #11]
   1b872:	b289      	uxth	r1, r1
   1b874:	702c      	strb	r4, [r5, #0]
   1b876:	f00b fc15 	bl	270a4 <rpc_at_client_request_send>
   1b87a:	f04f 33ff 	mov.w	r3, #4294967295
   1b87e:	9301      	str	r3, [sp, #4]
   1b880:	782b      	ldrb	r3, [r5, #0]
   1b882:	42b3      	cmp	r3, r6
   1b884:	d101      	bne.n	1b88a <at_cmd_send+0x36>
   1b886:	b002      	add	sp, #8
   1b888:	bd70      	pop	{r4, r5, r6, pc}
   1b88a:	a901      	add	r1, sp, #4
   1b88c:	2000      	movs	r0, #0
   1b88e:	f00b f8d0 	bl	26a32 <nrf_modem_os_timedwait>
   1b892:	e7f5      	b.n	1b880 <at_cmd_send+0x2c>
   1b894:	20015328 	.word	0x20015328

0001b898 <nrf_modem_at_init>:
   1b898:	2201      	movs	r2, #1
   1b89a:	b513      	push	{r0, r1, r4, lr}
   1b89c:	4611      	mov	r1, r2
   1b89e:	480a      	ldr	r0, [pc, #40]	; (1b8c8 <nrf_modem_at_init+0x30>)
   1b8a0:	f7fd fe72 	bl	19588 <nrf_modem_os_sem_init>
   1b8a4:	2100      	movs	r1, #0
   1b8a6:	a801      	add	r0, sp, #4
   1b8a8:	f00b fbed 	bl	27086 <rpc_at_client_request_alloc>
   1b8ac:	4604      	mov	r4, r0
   1b8ae:	b938      	cbnz	r0, 1b8c0 <nrf_modem_at_init+0x28>
   1b8b0:	9801      	ldr	r0, [sp, #4]
   1b8b2:	2201      	movs	r2, #1
   1b8b4:	2105      	movs	r1, #5
   1b8b6:	f7ff ffcd 	bl	1b854 <at_cmd_send>
   1b8ba:	4620      	mov	r0, r4
   1b8bc:	b002      	add	sp, #8
   1b8be:	bd10      	pop	{r4, pc}
   1b8c0:	f06f 000b 	mvn.w	r0, #11
   1b8c4:	e7fa      	b.n	1b8bc <nrf_modem_at_init+0x24>
   1b8c6:	bf00      	nop
   1b8c8:	20015118 	.word	0x20015118

0001b8cc <rpc_at2_event_handler>:
   1b8cc:	b570      	push	{r4, r5, r6, lr}
   1b8ce:	68c3      	ldr	r3, [r0, #12]
   1b8d0:	4604      	mov	r4, r0
   1b8d2:	2ba7      	cmp	r3, #167	; 0xa7
   1b8d4:	d128      	bne.n	1b928 <rpc_at2_event_handler+0x5c>
   1b8d6:	2903      	cmp	r1, #3
   1b8d8:	d008      	beq.n	1b8ec <rpc_at2_event_handler+0x20>
   1b8da:	2904      	cmp	r1, #4
   1b8dc:	d01b      	beq.n	1b916 <rpc_at2_event_handler+0x4a>
   1b8de:	2902      	cmp	r1, #2
   1b8e0:	d102      	bne.n	1b8e8 <rpc_at2_event_handler+0x1c>
   1b8e2:	2201      	movs	r2, #1
   1b8e4:	4b11      	ldr	r3, [pc, #68]	; (1b92c <rpc_at2_event_handler+0x60>)
   1b8e6:	701a      	strb	r2, [r3, #0]
   1b8e8:	2000      	movs	r0, #0
   1b8ea:	e00d      	b.n	1b908 <rpc_at2_event_handler+0x3c>
   1b8ec:	4e10      	ldr	r6, [pc, #64]	; (1b930 <rpc_at2_event_handler+0x64>)
   1b8ee:	4d11      	ldr	r5, [pc, #68]	; (1b934 <rpc_at2_event_handler+0x68>)
   1b8f0:	6833      	ldr	r3, [r6, #0]
   1b8f2:	b153      	cbz	r3, 1b90a <rpc_at2_event_handler+0x3e>
   1b8f4:	2400      	movs	r4, #0
   1b8f6:	682a      	ldr	r2, [r5, #0]
   1b8f8:	6810      	ldr	r0, [r2, #0]
   1b8fa:	4798      	blx	r3
   1b8fc:	682b      	ldr	r3, [r5, #0]
   1b8fe:	6034      	str	r4, [r6, #0]
   1b900:	6818      	ldr	r0, [r3, #0]
   1b902:	f00b fbd9 	bl	270b8 <rpc_at_client_data_free>
   1b906:	b2e0      	uxtb	r0, r4
   1b908:	bd70      	pop	{r4, r5, r6, pc}
   1b90a:	2202      	movs	r2, #2
   1b90c:	4b07      	ldr	r3, [pc, #28]	; (1b92c <rpc_at2_event_handler+0x60>)
   1b90e:	2401      	movs	r4, #1
   1b910:	6028      	str	r0, [r5, #0]
   1b912:	701a      	strb	r2, [r3, #0]
   1b914:	e7f7      	b.n	1b906 <rpc_at2_event_handler+0x3a>
   1b916:	4b08      	ldr	r3, [pc, #32]	; (1b938 <rpc_at2_event_handler+0x6c>)
   1b918:	681b      	ldr	r3, [r3, #0]
   1b91a:	b10b      	cbz	r3, 1b920 <rpc_at2_event_handler+0x54>
   1b91c:	6800      	ldr	r0, [r0, #0]
   1b91e:	4798      	blx	r3
   1b920:	6820      	ldr	r0, [r4, #0]
   1b922:	f00b fbc9 	bl	270b8 <rpc_at_client_data_free>
   1b926:	e7df      	b.n	1b8e8 <rpc_at2_event_handler+0x1c>
   1b928:	2002      	movs	r0, #2
   1b92a:	e7ed      	b.n	1b908 <rpc_at2_event_handler+0x3c>
   1b92c:	20015328 	.word	0x20015328
   1b930:	20015124 	.word	0x20015124
   1b934:	20015120 	.word	0x20015120
   1b938:	2001511c 	.word	0x2001511c

0001b93c <rpc_dfu_event_handler>:
   1b93c:	b508      	push	{r3, lr}
   1b93e:	4b08      	ldr	r3, [pc, #32]	; (1b960 <rpc_dfu_event_handler+0x24>)
   1b940:	68c2      	ldr	r2, [r0, #12]
   1b942:	881b      	ldrh	r3, [r3, #0]
   1b944:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   1b948:	d103      	bne.n	1b952 <rpc_dfu_event_handler+0x16>
   1b94a:	4b06      	ldr	r3, [pc, #24]	; (1b964 <rpc_dfu_event_handler+0x28>)
   1b94c:	6018      	str	r0, [r3, #0]
   1b94e:	2001      	movs	r0, #1
   1b950:	bd08      	pop	{r3, pc}
   1b952:	6800      	ldr	r0, [r0, #0]
   1b954:	2800      	cmp	r0, #0
   1b956:	d0fb      	beq.n	1b950 <rpc_dfu_event_handler+0x14>
   1b958:	f00b fbd5 	bl	27106 <rpc_dfu_client_data_free>
   1b95c:	2000      	movs	r0, #0
   1b95e:	e7f7      	b.n	1b950 <rpc_dfu_event_handler+0x14>
   1b960:	200151d2 	.word	0x200151d2
   1b964:	20015130 	.word	0x20015130

0001b968 <mfu_interface_init>:
   1b968:	2000      	movs	r0, #0
   1b96a:	2201      	movs	r2, #1
   1b96c:	4b04      	ldr	r3, [pc, #16]	; (1b980 <mfu_interface_init+0x18>)
   1b96e:	8018      	strh	r0, [r3, #0]
   1b970:	4b04      	ldr	r3, [pc, #16]	; (1b984 <mfu_interface_init+0x1c>)
   1b972:	6018      	str	r0, [r3, #0]
   1b974:	4b04      	ldr	r3, [pc, #16]	; (1b988 <mfu_interface_init+0x20>)
   1b976:	6018      	str	r0, [r3, #0]
   1b978:	4b04      	ldr	r3, [pc, #16]	; (1b98c <mfu_interface_init+0x24>)
   1b97a:	601a      	str	r2, [r3, #0]
   1b97c:	4770      	bx	lr
   1b97e:	bf00      	nop
   1b980:	200151d2 	.word	0x200151d2
   1b984:	20015130 	.word	0x20015130
   1b988:	2001512c 	.word	0x2001512c
   1b98c:	20015128 	.word	0x20015128

0001b990 <rpc_dfu2_event_handler>:
   1b990:	b510      	push	{r4, lr}
   1b992:	4b08      	ldr	r3, [pc, #32]	; (1b9b4 <rpc_dfu2_event_handler+0x24>)
   1b994:	68c2      	ldr	r2, [r0, #12]
   1b996:	429a      	cmp	r2, r3
   1b998:	d10a      	bne.n	1b9b0 <rpc_dfu2_event_handler+0x20>
   1b99a:	2401      	movs	r4, #1
   1b99c:	4b06      	ldr	r3, [pc, #24]	; (1b9b8 <rpc_dfu2_event_handler+0x28>)
   1b99e:	701c      	strb	r4, [r3, #0]
   1b9a0:	4b06      	ldr	r3, [pc, #24]	; (1b9bc <rpc_dfu2_event_handler+0x2c>)
   1b9a2:	6018      	str	r0, [r3, #0]
   1b9a4:	6800      	ldr	r0, [r0, #0]
   1b9a6:	b108      	cbz	r0, 1b9ac <rpc_dfu2_event_handler+0x1c>
   1b9a8:	f00b fbad 	bl	27106 <rpc_dfu_client_data_free>
   1b9ac:	4620      	mov	r0, r4
   1b9ae:	e000      	b.n	1b9b2 <rpc_dfu2_event_handler+0x22>
   1b9b0:	2002      	movs	r0, #2
   1b9b2:	bd10      	pop	{r4, pc}
   1b9b4:	15abe11a 	.word	0x15abe11a
   1b9b8:	20015329 	.word	0x20015329
   1b9bc:	20015134 	.word	0x20015134

0001b9c0 <rpc_gnss_event_handler>:
   1b9c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b9c2:	4b5b      	ldr	r3, [pc, #364]	; (1bb30 <rpc_gnss_event_handler+0x170>)
   1b9c4:	4605      	mov	r5, r0
   1b9c6:	6800      	ldr	r0, [r0, #0]
   1b9c8:	881b      	ldrh	r3, [r3, #0]
   1b9ca:	6802      	ldr	r2, [r0, #0]
   1b9cc:	460c      	mov	r4, r1
   1b9ce:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   1b9d2:	b085      	sub	sp, #20
   1b9d4:	d134      	bne.n	1ba40 <rpc_gnss_event_handler+0x80>
   1b9d6:	4b57      	ldr	r3, [pc, #348]	; (1bb34 <rpc_gnss_event_handler+0x174>)
   1b9d8:	4e57      	ldr	r6, [pc, #348]	; (1bb38 <rpc_gnss_event_handler+0x178>)
   1b9da:	681a      	ldr	r2, [r3, #0]
   1b9dc:	6030      	str	r0, [r6, #0]
   1b9de:	01d2      	lsls	r2, r2, #7
   1b9e0:	d50d      	bpl.n	1b9fe <rpc_gnss_event_handler+0x3e>
   1b9e2:	f242 1202 	movw	r2, #8450	; 0x2102
   1b9e6:	4291      	cmp	r1, r2
   1b9e8:	d109      	bne.n	1b9fe <rpc_gnss_event_handler+0x3e>
   1b9ea:	6842      	ldr	r2, [r0, #4]
   1b9ec:	b91a      	cbnz	r2, 1b9f6 <rpc_gnss_event_handler+0x36>
   1b9ee:	681a      	ldr	r2, [r3, #0]
   1b9f0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1b9f4:	601a      	str	r2, [r3, #0]
   1b9f6:	681a      	ldr	r2, [r3, #0]
   1b9f8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   1b9fc:	601a      	str	r2, [r3, #0]
   1b9fe:	681a      	ldr	r2, [r3, #0]
   1ba00:	0257      	lsls	r7, r2, #9
   1ba02:	d50d      	bpl.n	1ba20 <rpc_gnss_event_handler+0x60>
   1ba04:	f242 1203 	movw	r2, #8451	; 0x2103
   1ba08:	4294      	cmp	r4, r2
   1ba0a:	d109      	bne.n	1ba20 <rpc_gnss_event_handler+0x60>
   1ba0c:	6842      	ldr	r2, [r0, #4]
   1ba0e:	b91a      	cbnz	r2, 1ba18 <rpc_gnss_event_handler+0x58>
   1ba10:	681a      	ldr	r2, [r3, #0]
   1ba12:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   1ba16:	601a      	str	r2, [r3, #0]
   1ba18:	681a      	ldr	r2, [r3, #0]
   1ba1a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
   1ba1e:	e04a      	b.n	1bab6 <rpc_gnss_event_handler+0xf6>
   1ba20:	f242 0201 	movw	r2, #8193	; 0x2001
   1ba24:	4294      	cmp	r4, r2
   1ba26:	d03e      	beq.n	1baa6 <rpc_gnss_event_handler+0xe6>
   1ba28:	f242 0204 	movw	r2, #8196	; 0x2004
   1ba2c:	4294      	cmp	r4, r2
   1ba2e:	d044      	beq.n	1baba <rpc_gnss_event_handler+0xfa>
   1ba30:	f242 0205 	movw	r2, #8197	; 0x2005
   1ba34:	4294      	cmp	r4, r2
   1ba36:	d05d      	beq.n	1baf4 <rpc_gnss_event_handler+0x134>
   1ba38:	f00b fb67 	bl	2710a <rpc_gnss_client_data_free>
   1ba3c:	2300      	movs	r3, #0
   1ba3e:	6033      	str	r3, [r6, #0]
   1ba40:	f504 433f 	add.w	r3, r4, #48896	; 0xbf00
   1ba44:	33ff      	adds	r3, #255	; 0xff
   1ba46:	b29b      	uxth	r3, r3
   1ba48:	2b02      	cmp	r3, #2
   1ba4a:	d869      	bhi.n	1bb20 <rpc_gnss_event_handler+0x160>
   1ba4c:	4f39      	ldr	r7, [pc, #228]	; (1bb34 <rpc_gnss_event_handler+0x174>)
   1ba4e:	683b      	ldr	r3, [r7, #0]
   1ba50:	075a      	lsls	r2, r3, #29
   1ba52:	d406      	bmi.n	1ba62 <rpc_gnss_event_handler+0xa2>
   1ba54:	683b      	ldr	r3, [r7, #0]
   1ba56:	079b      	lsls	r3, r3, #30
   1ba58:	d51c      	bpl.n	1ba94 <rpc_gnss_event_handler+0xd4>
   1ba5a:	f244 0303 	movw	r3, #16387	; 0x4003
   1ba5e:	429c      	cmp	r4, r3
   1ba60:	d118      	bne.n	1ba94 <rpc_gnss_event_handler+0xd4>
   1ba62:	2002      	movs	r0, #2
   1ba64:	f7fd fe1c 	bl	196a0 <nrf_modem_os_alloc>
   1ba68:	4606      	mov	r6, r0
   1ba6a:	6828      	ldr	r0, [r5, #0]
   1ba6c:	2e00      	cmp	r6, #0
   1ba6e:	d052      	beq.n	1bb16 <rpc_gnss_event_handler+0x156>
   1ba70:	8034      	strh	r4, [r6, #0]
   1ba72:	686b      	ldr	r3, [r5, #4]
   1ba74:	9000      	str	r0, [sp, #0]
   1ba76:	e9cd 3601 	strd	r3, r6, [sp, #4]
   1ba7a:	2302      	movs	r3, #2
   1ba7c:	9303      	str	r3, [sp, #12]
   1ba7e:	4b2f      	ldr	r3, [pc, #188]	; (1bb3c <rpc_gnss_event_handler+0x17c>)
   1ba80:	4669      	mov	r1, sp
   1ba82:	6818      	ldr	r0, [r3, #0]
   1ba84:	6803      	ldr	r3, [r0, #0]
   1ba86:	685b      	ldr	r3, [r3, #4]
   1ba88:	4798      	blx	r3
   1ba8a:	3001      	adds	r0, #1
   1ba8c:	d14b      	bne.n	1bb26 <rpc_gnss_event_handler+0x166>
   1ba8e:	4630      	mov	r0, r6
   1ba90:	f7fd fe1c 	bl	196cc <nrf_modem_os_free>
   1ba94:	6828      	ldr	r0, [r5, #0]
   1ba96:	2800      	cmp	r0, #0
   1ba98:	d042      	beq.n	1bb20 <rpc_gnss_event_handler+0x160>
   1ba9a:	f00b fb36 	bl	2710a <rpc_gnss_client_data_free>
   1ba9e:	2200      	movs	r2, #0
   1baa0:	4b25      	ldr	r3, [pc, #148]	; (1bb38 <rpc_gnss_event_handler+0x178>)
   1baa2:	601a      	str	r2, [r3, #0]
   1baa4:	e03c      	b.n	1bb20 <rpc_gnss_event_handler+0x160>
   1baa6:	6842      	ldr	r2, [r0, #4]
   1baa8:	2a00      	cmp	r2, #0
   1baaa:	d1c5      	bne.n	1ba38 <rpc_gnss_event_handler+0x78>
   1baac:	681a      	ldr	r2, [r3, #0]
   1baae:	0c12      	lsrs	r2, r2, #16
   1bab0:	0412      	lsls	r2, r2, #16
   1bab2:	f042 0202 	orr.w	r2, r2, #2
   1bab6:	601a      	str	r2, [r3, #0]
   1bab8:	e7be      	b.n	1ba38 <rpc_gnss_event_handler+0x78>
   1baba:	6842      	ldr	r2, [r0, #4]
   1babc:	b9b2      	cbnz	r2, 1baec <rpc_gnss_event_handler+0x12c>
   1babe:	681a      	ldr	r2, [r3, #0]
   1bac0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   1bac4:	601a      	str	r2, [r3, #0]
   1bac6:	681a      	ldr	r2, [r3, #0]
   1bac8:	b292      	uxth	r2, r2
   1baca:	2a03      	cmp	r2, #3
   1bacc:	681a      	ldr	r2, [r3, #0]
   1bace:	d104      	bne.n	1bada <rpc_gnss_event_handler+0x11a>
   1bad0:	0c12      	lsrs	r2, r2, #16
   1bad2:	0412      	lsls	r2, r2, #16
   1bad4:	f042 0204 	orr.w	r2, r2, #4
   1bad8:	e79d      	b.n	1ba16 <rpc_gnss_event_handler+0x56>
   1bada:	b292      	uxth	r2, r2
   1badc:	2a04      	cmp	r2, #4
   1bade:	d19b      	bne.n	1ba18 <rpc_gnss_event_handler+0x58>
   1bae0:	681a      	ldr	r2, [r3, #0]
   1bae2:	0c12      	lsrs	r2, r2, #16
   1bae4:	0412      	lsls	r2, r2, #16
   1bae6:	f042 0202 	orr.w	r2, r2, #2
   1baea:	e794      	b.n	1ba16 <rpc_gnss_event_handler+0x56>
   1baec:	681a      	ldr	r2, [r3, #0]
   1baee:	b292      	uxth	r2, r2
   1baf0:	2a03      	cmp	r2, #3
   1baf2:	e7f4      	b.n	1bade <rpc_gnss_event_handler+0x11e>
   1baf4:	681a      	ldr	r2, [r3, #0]
   1baf6:	0291      	lsls	r1, r2, #10
   1baf8:	d59e      	bpl.n	1ba38 <rpc_gnss_event_handler+0x78>
   1bafa:	6842      	ldr	r2, [r0, #4]
   1bafc:	b93a      	cbnz	r2, 1bb0e <rpc_gnss_event_handler+0x14e>
   1bafe:	681a      	ldr	r2, [r3, #0]
   1bb00:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   1bb04:	601a      	str	r2, [r3, #0]
   1bb06:	681a      	ldr	r2, [r3, #0]
   1bb08:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   1bb0c:	e7d3      	b.n	1bab6 <rpc_gnss_event_handler+0xf6>
   1bb0e:	681a      	ldr	r2, [r3, #0]
   1bb10:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   1bb14:	e7cf      	b.n	1bab6 <rpc_gnss_event_handler+0xf6>
   1bb16:	b118      	cbz	r0, 1bb20 <rpc_gnss_event_handler+0x160>
   1bb18:	f00b faf7 	bl	2710a <rpc_gnss_client_data_free>
   1bb1c:	4b06      	ldr	r3, [pc, #24]	; (1bb38 <rpc_gnss_event_handler+0x178>)
   1bb1e:	601e      	str	r6, [r3, #0]
   1bb20:	2000      	movs	r0, #0
   1bb22:	b005      	add	sp, #20
   1bb24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bb26:	683b      	ldr	r3, [r7, #0]
   1bb28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   1bb2c:	603b      	str	r3, [r7, #0]
   1bb2e:	e7f7      	b.n	1bb20 <rpc_gnss_event_handler+0x160>
   1bb30:	200151d4 	.word	0x200151d4
   1bb34:	20015138 	.word	0x20015138
   1bb38:	2001513c 	.word	0x2001513c
   1bb3c:	20015140 	.word	0x20015140

0001bb40 <gnss_interface_init>:
   1bb40:	b510      	push	{r4, lr}
   1bb42:	2400      	movs	r4, #0
   1bb44:	4a0a      	ldr	r2, [pc, #40]	; (1bb70 <gnss_interface_init+0x30>)
   1bb46:	480b      	ldr	r0, [pc, #44]	; (1bb74 <gnss_interface_init+0x34>)
   1bb48:	6811      	ldr	r1, [r2, #0]
   1bb4a:	4b0b      	ldr	r3, [pc, #44]	; (1bb78 <gnss_interface_init+0x38>)
   1bb4c:	4001      	ands	r1, r0
   1bb4e:	801c      	strh	r4, [r3, #0]
   1bb50:	4b0a      	ldr	r3, [pc, #40]	; (1bb7c <gnss_interface_init+0x3c>)
   1bb52:	6011      	str	r1, [r2, #0]
   1bb54:	601c      	str	r4, [r3, #0]
   1bb56:	6813      	ldr	r3, [r2, #0]
   1bb58:	4003      	ands	r3, r0
   1bb5a:	f043 0301 	orr.w	r3, r3, #1
   1bb5e:	6013      	str	r3, [r2, #0]
   1bb60:	2201      	movs	r2, #1
   1bb62:	4b07      	ldr	r3, [pc, #28]	; (1bb80 <gnss_interface_init+0x40>)
   1bb64:	4807      	ldr	r0, [pc, #28]	; (1bb84 <gnss_interface_init+0x44>)
   1bb66:	701a      	strb	r2, [r3, #0]
   1bb68:	f7ff fa3c 	bl	1afe4 <rpc_gnss_client_set_handler>
   1bb6c:	4620      	mov	r0, r4
   1bb6e:	bd10      	pop	{r4, pc}
   1bb70:	20015138 	.word	0x20015138
   1bb74:	ffff0000 	.word	0xffff0000
   1bb78:	200151d4 	.word	0x200151d4
   1bb7c:	2001513c 	.word	0x2001513c
   1bb80:	2001532a 	.word	0x2001532a
   1bb84:	0001b9c1 	.word	0x0001b9c1

0001bb88 <pdn_interface_init>:
   1bb88:	b538      	push	{r3, r4, r5, lr}
   1bb8a:	f04f 34ff 	mov.w	r4, #4294967295
   1bb8e:	4d0b      	ldr	r5, [pc, #44]	; (1bbbc <pdn_interface_init+0x34>)
   1bb90:	2228      	movs	r2, #40	; 0x28
   1bb92:	2100      	movs	r1, #0
   1bb94:	480a      	ldr	r0, [pc, #40]	; (1bbc0 <pdn_interface_init+0x38>)
   1bb96:	602c      	str	r4, [r5, #0]
   1bb98:	f008 fdfd 	bl	24796 <memset>
   1bb9c:	f240 2201 	movw	r2, #513	; 0x201
   1bba0:	2102      	movs	r1, #2
   1bba2:	2066      	movs	r0, #102	; 0x66
   1bba4:	f7ff fe1a 	bl	1b7dc <at_interface_open>
   1bba8:	2800      	cmp	r0, #0
   1bbaa:	bfa4      	itt	ge
   1bbac:	2201      	movge	r2, #1
   1bbae:	4b05      	ldrge	r3, [pc, #20]	; (1bbc4 <pdn_interface_init+0x3c>)
   1bbb0:	6028      	str	r0, [r5, #0]
   1bbb2:	bfa6      	itte	ge
   1bbb4:	701a      	strbge	r2, [r3, #0]
   1bbb6:	2000      	movge	r0, #0
   1bbb8:	4620      	movlt	r0, r4
   1bbba:	bd38      	pop	{r3, r4, r5, pc}
   1bbbc:	20015144 	.word	0x20015144
   1bbc0:	20015148 	.word	0x20015148
   1bbc4:	2001532b 	.word	0x2001532b

0001bbc8 <full_dfu_ipc_irq_handler>:
   1bbc8:	2301      	movs	r3, #1
   1bbca:	4a03      	ldr	r2, [pc, #12]	; (1bbd8 <full_dfu_ipc_irq_handler+0x10>)
   1bbcc:	6013      	str	r3, [r2, #0]
   1bbce:	07c2      	lsls	r2, r0, #31
   1bbd0:	bf44      	itt	mi
   1bbd2:	4a02      	ldrmi	r2, [pc, #8]	; (1bbdc <full_dfu_ipc_irq_handler+0x14>)
   1bbd4:	7013      	strbmi	r3, [r2, #0]
   1bbd6:	4770      	bx	lr
   1bbd8:	20015170 	.word	0x20015170
   1bbdc:	2001532c 	.word	0x2001532c

0001bbe0 <modem_ipc_wait_for_event>:
   1bbe0:	b538      	push	{r3, r4, r5, lr}
   1bbe2:	2300      	movs	r3, #0
   1bbe4:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   1bbe8:	4c0a      	ldr	r4, [pc, #40]	; (1bc14 <modem_ipc_wait_for_event+0x34>)
   1bbea:	6023      	str	r3, [r4, #0]
   1bbec:	6823      	ldr	r3, [r4, #0]
   1bbee:	b92b      	cbnz	r3, 1bbfc <modem_ipc_wait_for_event+0x1c>
   1bbf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1bbf4:	f00a ff11 	bl	26a1a <nrf_modem_os_busywait>
   1bbf8:	3d01      	subs	r5, #1
   1bbfa:	d1f7      	bne.n	1bbec <modem_ipc_wait_for_event+0xc>
   1bbfc:	6823      	ldr	r3, [r4, #0]
   1bbfe:	b90b      	cbnz	r3, 1bc04 <modem_ipc_wait_for_event+0x24>
   1bc00:	203c      	movs	r0, #60	; 0x3c
   1bc02:	e005      	b.n	1bc10 <modem_ipc_wait_for_event+0x30>
   1bc04:	4b04      	ldr	r3, [pc, #16]	; (1bc18 <modem_ipc_wait_for_event+0x38>)
   1bc06:	781b      	ldrb	r3, [r3, #0]
   1bc08:	2b01      	cmp	r3, #1
   1bc0a:	bf14      	ite	ne
   1bc0c:	2000      	movne	r0, #0
   1bc0e:	2005      	moveq	r0, #5
   1bc10:	bd38      	pop	{r3, r4, r5, pc}
   1bc12:	bf00      	nop
   1bc14:	20015170 	.word	0x20015170
   1bc18:	2001532c 	.word	0x2001532c

0001bc1c <nrf_modem_full_dfu_setup>:
   1bc1c:	2200      	movs	r2, #0
   1bc1e:	2300      	movs	r3, #0
   1bc20:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc22:	4d2d      	ldr	r5, [pc, #180]	; (1bcd8 <nrf_modem_full_dfu_setup+0xbc>)
   1bc24:	4f2d      	ldr	r7, [pc, #180]	; (1bcdc <nrf_modem_full_dfu_setup+0xc0>)
   1bc26:	e9c5 2302 	strd	r2, r3, [r5, #8]
   1bc2a:	e9c5 2304 	strd	r2, r3, [r5, #16]
   1bc2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1bc32:	4b2b      	ldr	r3, [pc, #172]	; (1bce0 <nrf_modem_full_dfu_setup+0xc4>)
   1bc34:	2400      	movs	r4, #0
   1bc36:	601a      	str	r2, [r3, #0]
   1bc38:	f100 031c 	add.w	r3, r0, #28
   1bc3c:	603b      	str	r3, [r7, #0]
   1bc3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1bc42:	6043      	str	r3, [r0, #4]
   1bc44:	231c      	movs	r3, #28
   1bc46:	7203      	strb	r3, [r0, #8]
   1bc48:	2320      	movs	r3, #32
   1bc4a:	2601      	movs	r6, #1
   1bc4c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   1bc50:	7243      	strb	r3, [r0, #9]
   1bc52:	4b24      	ldr	r3, [pc, #144]	; (1bce4 <nrf_modem_full_dfu_setup+0xc8>)
   1bc54:	7086      	strb	r6, [r0, #2]
   1bc56:	70c2      	strb	r2, [r0, #3]
   1bc58:	7004      	strb	r4, [r0, #0]
   1bc5a:	7044      	strb	r4, [r0, #1]
   1bc5c:	7284      	strb	r4, [r0, #10]
   1bc5e:	72c4      	strb	r4, [r0, #11]
   1bc60:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   1bc64:	702c      	strb	r4, [r5, #0]
   1bc66:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   1bc6a:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   1bc6e:	4b1e      	ldr	r3, [pc, #120]	; (1bce8 <nrf_modem_full_dfu_setup+0xcc>)
   1bc70:	b093      	sub	sp, #76	; 0x4c
   1bc72:	4622      	mov	r2, r4
   1bc74:	491d      	ldr	r1, [pc, #116]	; (1bcec <nrf_modem_full_dfu_setup+0xd0>)
   1bc76:	4620      	mov	r0, r4
   1bc78:	701c      	strb	r4, [r3, #0]
   1bc7a:	f7fe fd27 	bl	1a6cc <nrfx_ipc_init>
   1bc7e:	2240      	movs	r2, #64	; 0x40
   1bc80:	4621      	mov	r1, r4
   1bc82:	a801      	add	r0, sp, #4
   1bc84:	f008 fd87 	bl	24796 <memset>
   1bc88:	2302      	movs	r3, #2
   1bc8a:	9302      	str	r3, [sp, #8]
   1bc8c:	2304      	movs	r3, #4
   1bc8e:	9609      	str	r6, [sp, #36]	; 0x24
   1bc90:	2605      	movs	r6, #5
   1bc92:	eb0d 0003 	add.w	r0, sp, r3
   1bc96:	930b      	str	r3, [sp, #44]	; 0x2c
   1bc98:	9611      	str	r6, [sp, #68]	; 0x44
   1bc9a:	f7fe fd4f 	bl	1a73c <nrfx_ipc_config_load>
   1bc9e:	4b14      	ldr	r3, [pc, #80]	; (1bcf0 <nrf_modem_full_dfu_setup+0xd4>)
   1bca0:	9400      	str	r4, [sp, #0]
   1bca2:	683f      	ldr	r7, [r7, #0]
   1bca4:	601c      	str	r4, [r3, #0]
   1bca6:	681b      	ldr	r3, [r3, #0]
   1bca8:	9300      	str	r3, [sp, #0]
   1bcaa:	9b00      	ldr	r3, [sp, #0]
   1bcac:	f7ff ff98 	bl	1bbe0 <modem_ipc_wait_for_event>
   1bcb0:	4603      	mov	r3, r0
   1bcb2:	b150      	cbz	r0, 1bcca <nrf_modem_full_dfu_setup+0xae>
   1bcb4:	2303      	movs	r3, #3
   1bcb6:	702b      	strb	r3, [r5, #0]
   1bcb8:	f7fd fa10 	bl	190dc <nrf_modem_os_errno_set>
   1bcbc:	f7fe fd9a 	bl	1a7f4 <nrfx_ipc_uninit>
   1bcc0:	f04f 33ff 	mov.w	r3, #4294967295
   1bcc4:	4618      	mov	r0, r3
   1bcc6:	b013      	add	sp, #76	; 0x4c
   1bcc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bcca:	6839      	ldr	r1, [r7, #0]
   1bccc:	4a09      	ldr	r2, [pc, #36]	; (1bcf4 <nrf_modem_full_dfu_setup+0xd8>)
   1bcce:	4291      	cmp	r1, r2
   1bcd0:	d0f8      	beq.n	1bcc4 <nrf_modem_full_dfu_setup+0xa8>
   1bcd2:	4630      	mov	r0, r6
   1bcd4:	e7f0      	b.n	1bcb8 <nrf_modem_full_dfu_setup+0x9c>
   1bcd6:	bf00      	nop
   1bcd8:	20014a88 	.word	0x20014a88
   1bcdc:	20015174 	.word	0x20015174
   1bce0:	20015178 	.word	0x20015178
   1bce4:	4002a000 	.word	0x4002a000
   1bce8:	2001532c 	.word	0x2001532c
   1bcec:	0001bbc9 	.word	0x0001bbc9
   1bcf0:	40005610 	.word	0x40005610
   1bcf4:	a5000001 	.word	0xa5000001

0001bcf8 <packet_handler_create>:
   1bcf8:	2801      	cmp	r0, #1
   1bcfa:	b570      	push	{r4, r5, r6, lr}
   1bcfc:	4604      	mov	r4, r0
   1bcfe:	460e      	mov	r6, r1
   1bd00:	4615      	mov	r5, r2
   1bd02:	d00f      	beq.n	1bd24 <packet_handler_create+0x2c>
   1bd04:	1e84      	subs	r4, r0, #2
   1bd06:	2c01      	cmp	r4, #1
   1bd08:	d810      	bhi.n	1bd2c <packet_handler_create+0x34>
   1bd0a:	2010      	movs	r0, #16
   1bd0c:	f7fd fcc8 	bl	196a0 <nrf_modem_os_alloc>
   1bd10:	2400      	movs	r4, #0
   1bd12:	b130      	cbz	r0, 1bd22 <packet_handler_create+0x2a>
   1bd14:	2218      	movs	r2, #24
   1bd16:	4b08      	ldr	r3, [pc, #32]	; (1bd38 <packet_handler_create+0x40>)
   1bd18:	6085      	str	r5, [r0, #8]
   1bd1a:	fb02 3404 	mla	r4, r2, r4, r3
   1bd1e:	e9c0 4600 	strd	r4, r6, [r0]
   1bd22:	bd70      	pop	{r4, r5, r6, pc}
   1bd24:	2014      	movs	r0, #20
   1bd26:	f7fd fcbb 	bl	196a0 <nrf_modem_os_alloc>
   1bd2a:	e7f2      	b.n	1bd12 <packet_handler_create+0x1a>
   1bd2c:	200c      	movs	r0, #12
   1bd2e:	f7fd fcb7 	bl	196a0 <nrf_modem_os_alloc>
   1bd32:	2402      	movs	r4, #2
   1bd34:	e7ed      	b.n	1bd12 <packet_handler_create+0x1a>
   1bd36:	bf00      	nop
   1bd38:	0002cd5c 	.word	0x0002cd5c

0001bd3c <modem_off>:
   1bd3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bd3e:	2501      	movs	r5, #1
   1bd40:	4c07      	ldr	r4, [pc, #28]	; (1bd60 <modem_off+0x24>)
   1bd42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   1bd46:	6065      	str	r5, [r4, #4]
   1bd48:	f00a fe67 	bl	26a1a <nrf_modem_os_busywait>
   1bd4c:	2300      	movs	r3, #0
   1bd4e:	6063      	str	r3, [r4, #4]
   1bd50:	9301      	str	r3, [sp, #4]
   1bd52:	6025      	str	r5, [r4, #0]
   1bd54:	6823      	ldr	r3, [r4, #0]
   1bd56:	9301      	str	r3, [sp, #4]
   1bd58:	9b01      	ldr	r3, [sp, #4]
   1bd5a:	b003      	add	sp, #12
   1bd5c:	bd30      	pop	{r4, r5, pc}
   1bd5e:	bf00      	nop
   1bd60:	40005610 	.word	0x40005610

0001bd64 <nrf_modem_init>:
   1bd64:	b570      	push	{r4, r5, r6, lr}
   1bd66:	460d      	mov	r5, r1
   1bd68:	b300      	cbz	r0, 1bdac <nrf_modem_init+0x48>
   1bd6a:	4e13      	ldr	r6, [pc, #76]	; (1bdb8 <nrf_modem_init+0x54>)
   1bd6c:	7832      	ldrb	r2, [r6, #0]
   1bd6e:	b9ea      	cbnz	r2, 1bdac <nrf_modem_init+0x48>
   1bd70:	2901      	cmp	r1, #1
   1bd72:	d113      	bne.n	1bd9c <nrf_modem_init+0x38>
   1bd74:	68c1      	ldr	r1, [r0, #12]
   1bd76:	6842      	ldr	r2, [r0, #4]
   1bd78:	440a      	add	r2, r1
   1bd7a:	6941      	ldr	r1, [r0, #20]
   1bd7c:	440a      	add	r2, r1
   1bd7e:	69c1      	ldr	r1, [r0, #28]
   1bd80:	440a      	add	r2, r1
   1bd82:	f242 011b 	movw	r1, #8219	; 0x201b
   1bd86:	428a      	cmp	r2, r1
   1bd88:	d913      	bls.n	1bdb2 <nrf_modem_init+0x4e>
   1bd8a:	6800      	ldr	r0, [r0, #0]
   1bd8c:	f7ff ff46 	bl	1bc1c <nrf_modem_full_dfu_setup>
   1bd90:	4604      	mov	r4, r0
   1bd92:	b130      	cbz	r0, 1bda2 <nrf_modem_init+0x3e>
   1bd94:	f7ff ffd2 	bl	1bd3c <modem_off>
   1bd98:	4620      	mov	r0, r4
   1bd9a:	bd70      	pop	{r4, r5, r6, pc}
   1bd9c:	f00b fc65 	bl	2766a <nrf_modem_platform_init>
   1bda0:	e7f6      	b.n	1bd90 <nrf_modem_init+0x2c>
   1bda2:	4b06      	ldr	r3, [pc, #24]	; (1bdbc <nrf_modem_init+0x58>)
   1bda4:	701d      	strb	r5, [r3, #0]
   1bda6:	2301      	movs	r3, #1
   1bda8:	7033      	strb	r3, [r6, #0]
   1bdaa:	e7f5      	b.n	1bd98 <nrf_modem_init+0x34>
   1bdac:	f04f 34ff 	mov.w	r4, #4294967295
   1bdb0:	e7f2      	b.n	1bd98 <nrf_modem_init+0x34>
   1bdb2:	240c      	movs	r4, #12
   1bdb4:	e7f0      	b.n	1bd98 <nrf_modem_init+0x34>
   1bdb6:	bf00      	nop
   1bdb8:	2001532d 	.word	0x2001532d
   1bdbc:	2001532e 	.word	0x2001532e

0001bdc0 <z_device_state_init>:
 *
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
   1bdc0:	b580      	push	{r7, lr}
   1bdc2:	b082      	sub	sp, #8
   1bdc4:	af00      	add	r7, sp, #0
	const struct device *dev = __device_start;
   1bdc6:	4b0a      	ldr	r3, [pc, #40]	; (1bdf0 <z_device_state_init+0x30>)
   1bdc8:	607b      	str	r3, [r7, #4]

	while (dev < __device_end) {
   1bdca:	e008      	b.n	1bdde <z_device_state_init+0x1e>
		device_pm_state_init(dev);
   1bdcc:	6878      	ldr	r0, [r7, #4]
   1bdce:	f00b fcb6 	bl	2773e <device_pm_state_init>
		z_object_init(dev);
   1bdd2:	6878      	ldr	r0, [r7, #4]
   1bdd4:	f00b fcaa 	bl	2772c <z_object_init>
		++dev;
   1bdd8:	687b      	ldr	r3, [r7, #4]
   1bdda:	3318      	adds	r3, #24
   1bddc:	607b      	str	r3, [r7, #4]
	while (dev < __device_end) {
   1bdde:	687b      	ldr	r3, [r7, #4]
   1bde0:	4a04      	ldr	r2, [pc, #16]	; (1bdf4 <z_device_state_init+0x34>)
   1bde2:	4293      	cmp	r3, r2
   1bde4:	d3f2      	bcc.n	1bdcc <z_device_state_init+0xc>
	}
}
   1bde6:	bf00      	nop
   1bde8:	bf00      	nop
   1bdea:	3708      	adds	r7, #8
   1bdec:	46bd      	mov	sp, r7
   1bdee:	bd80      	pop	{r7, pc}
   1bdf0:	000290d4 	.word	0x000290d4
   1bdf4:	0002914c 	.word	0x0002914c

0001bdf8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1bdf8:	b580      	push	{r7, lr}
   1bdfa:	b086      	sub	sp, #24
   1bdfc:	af00      	add	r7, sp, #0
   1bdfe:	6078      	str	r0, [r7, #4]
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1be00:	4a1c      	ldr	r2, [pc, #112]	; (1be74 <z_sys_init_run_level+0x7c>)
   1be02:	687b      	ldr	r3, [r7, #4]
   1be04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1be08:	617b      	str	r3, [r7, #20]
   1be0a:	e026      	b.n	1be5a <z_sys_init_run_level+0x62>
		const struct device *dev = entry->dev;
   1be0c:	697b      	ldr	r3, [r7, #20]
   1be0e:	685b      	ldr	r3, [r3, #4]
   1be10:	60fb      	str	r3, [r7, #12]
		int rc = entry->init(dev);
   1be12:	697b      	ldr	r3, [r7, #20]
   1be14:	681b      	ldr	r3, [r3, #0]
   1be16:	68f8      	ldr	r0, [r7, #12]
   1be18:	4798      	blx	r3
   1be1a:	6138      	str	r0, [r7, #16]

		if (dev != NULL) {
   1be1c:	68fb      	ldr	r3, [r7, #12]
   1be1e:	2b00      	cmp	r3, #0
   1be20:	d018      	beq.n	1be54 <z_sys_init_run_level+0x5c>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
   1be22:	693b      	ldr	r3, [r7, #16]
   1be24:	2b00      	cmp	r3, #0
   1be26:	d00f      	beq.n	1be48 <z_sys_init_run_level+0x50>
				if (rc < 0) {
   1be28:	693b      	ldr	r3, [r7, #16]
   1be2a:	2b00      	cmp	r3, #0
   1be2c:	da02      	bge.n	1be34 <z_sys_init_run_level+0x3c>
					rc = -rc;
   1be2e:	693b      	ldr	r3, [r7, #16]
   1be30:	425b      	negs	r3, r3
   1be32:	613b      	str	r3, [r7, #16]
				}
				if (rc > UINT8_MAX) {
   1be34:	693b      	ldr	r3, [r7, #16]
   1be36:	2bff      	cmp	r3, #255	; 0xff
   1be38:	dd01      	ble.n	1be3e <z_sys_init_run_level+0x46>
					rc = UINT8_MAX;
   1be3a:	23ff      	movs	r3, #255	; 0xff
   1be3c:	613b      	str	r3, [r7, #16]
				}
				dev->state->init_res = rc;
   1be3e:	68fb      	ldr	r3, [r7, #12]
   1be40:	68db      	ldr	r3, [r3, #12]
   1be42:	693a      	ldr	r2, [r7, #16]
   1be44:	b2d2      	uxtb	r2, r2
   1be46:	701a      	strb	r2, [r3, #0]
			}
			dev->state->initialized = true;
   1be48:	68fb      	ldr	r3, [r7, #12]
   1be4a:	68da      	ldr	r2, [r3, #12]
   1be4c:	7853      	ldrb	r3, [r2, #1]
   1be4e:	f043 0301 	orr.w	r3, r3, #1
   1be52:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1be54:	697b      	ldr	r3, [r7, #20]
   1be56:	3308      	adds	r3, #8
   1be58:	617b      	str	r3, [r7, #20]
   1be5a:	687b      	ldr	r3, [r7, #4]
   1be5c:	3301      	adds	r3, #1
   1be5e:	4a05      	ldr	r2, [pc, #20]	; (1be74 <z_sys_init_run_level+0x7c>)
   1be60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1be64:	697a      	ldr	r2, [r7, #20]
   1be66:	429a      	cmp	r2, r3
   1be68:	d3d0      	bcc.n	1be0c <z_sys_init_run_level+0x14>
		}
	}
}
   1be6a:	bf00      	nop
   1be6c:	bf00      	nop
   1be6e:	3718      	adds	r7, #24
   1be70:	46bd      	mov	sp, r7
   1be72:	bd80      	pop	{r7, pc}
   1be74:	20014558 	.word	0x20014558

0001be78 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1be78:	b580      	push	{r7, lr}
   1be7a:	b084      	sub	sp, #16
   1be7c:	af00      	add	r7, sp, #0
   1be7e:	6078      	str	r0, [r7, #4]
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1be80:	687b      	ldr	r3, [r7, #4]
   1be82:	2b00      	cmp	r3, #0
   1be84:	d003      	beq.n	1be8e <z_impl_device_get_binding+0x16>
   1be86:	687b      	ldr	r3, [r7, #4]
   1be88:	781b      	ldrb	r3, [r3, #0]
   1be8a:	2b00      	cmp	r3, #0
   1be8c:	d101      	bne.n	1be92 <z_impl_device_get_binding+0x1a>
		return NULL;
   1be8e:	2300      	movs	r3, #0
   1be90:	e032      	b.n	1bef8 <z_impl_device_get_binding+0x80>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1be92:	4b1b      	ldr	r3, [pc, #108]	; (1bf00 <z_impl_device_get_binding+0x88>)
   1be94:	60fb      	str	r3, [r7, #12]
   1be96:	e00f      	b.n	1beb8 <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
   1be98:	68f8      	ldr	r0, [r7, #12]
   1be9a:	f00b fc59 	bl	27750 <z_device_ready>
   1be9e:	4603      	mov	r3, r0
   1bea0:	2b00      	cmp	r3, #0
   1bea2:	d006      	beq.n	1beb2 <z_impl_device_get_binding+0x3a>
   1bea4:	68fb      	ldr	r3, [r7, #12]
   1bea6:	681b      	ldr	r3, [r3, #0]
   1bea8:	687a      	ldr	r2, [r7, #4]
   1beaa:	429a      	cmp	r2, r3
   1beac:	d101      	bne.n	1beb2 <z_impl_device_get_binding+0x3a>
			return dev;
   1beae:	68fb      	ldr	r3, [r7, #12]
   1beb0:	e022      	b.n	1bef8 <z_impl_device_get_binding+0x80>
	for (dev = __device_start; dev != __device_end; dev++) {
   1beb2:	68fb      	ldr	r3, [r7, #12]
   1beb4:	3318      	adds	r3, #24
   1beb6:	60fb      	str	r3, [r7, #12]
   1beb8:	68fb      	ldr	r3, [r7, #12]
   1beba:	4a12      	ldr	r2, [pc, #72]	; (1bf04 <z_impl_device_get_binding+0x8c>)
   1bebc:	4293      	cmp	r3, r2
   1bebe:	d1eb      	bne.n	1be98 <z_impl_device_get_binding+0x20>
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   1bec0:	4b0f      	ldr	r3, [pc, #60]	; (1bf00 <z_impl_device_get_binding+0x88>)
   1bec2:	60fb      	str	r3, [r7, #12]
   1bec4:	e013      	b.n	1beee <z_impl_device_get_binding+0x76>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1bec6:	68f8      	ldr	r0, [r7, #12]
   1bec8:	f00b fc42 	bl	27750 <z_device_ready>
   1becc:	4603      	mov	r3, r0
   1bece:	2b00      	cmp	r3, #0
   1bed0:	d00a      	beq.n	1bee8 <z_impl_device_get_binding+0x70>
   1bed2:	68fb      	ldr	r3, [r7, #12]
   1bed4:	681b      	ldr	r3, [r3, #0]
   1bed6:	4619      	mov	r1, r3
   1bed8:	6878      	ldr	r0, [r7, #4]
   1beda:	f008 fbba 	bl	24652 <strcmp>
   1bede:	4603      	mov	r3, r0
   1bee0:	2b00      	cmp	r3, #0
   1bee2:	d101      	bne.n	1bee8 <z_impl_device_get_binding+0x70>
			return dev;
   1bee4:	68fb      	ldr	r3, [r7, #12]
   1bee6:	e007      	b.n	1bef8 <z_impl_device_get_binding+0x80>
	for (dev = __device_start; dev != __device_end; dev++) {
   1bee8:	68fb      	ldr	r3, [r7, #12]
   1beea:	3318      	adds	r3, #24
   1beec:	60fb      	str	r3, [r7, #12]
   1beee:	68fb      	ldr	r3, [r7, #12]
   1bef0:	4a04      	ldr	r2, [pc, #16]	; (1bf04 <z_impl_device_get_binding+0x8c>)
   1bef2:	4293      	cmp	r3, r2
   1bef4:	d1e7      	bne.n	1bec6 <z_impl_device_get_binding+0x4e>
		}
	}

	return NULL;
   1bef6:	2300      	movs	r3, #0
}
   1bef8:	4618      	mov	r0, r3
   1befa:	3710      	adds	r7, #16
   1befc:	46bd      	mov	sp, r7
   1befe:	bd80      	pop	{r7, pc}
   1bf00:	000290d4 	.word	0x000290d4
   1bf04:	0002914c 	.word	0x0002914c

0001bf08 <z_impl_z_errno>:
}
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
   1bf08:	b480      	push	{r7}
   1bf0a:	af00      	add	r7, sp, #0
	return &_current->errno_var;
   1bf0c:	4b03      	ldr	r3, [pc, #12]	; (1bf1c <z_impl_z_errno+0x14>)
   1bf0e:	689b      	ldr	r3, [r3, #8]
   1bf10:	3360      	adds	r3, #96	; 0x60
}
   1bf12:	4618      	mov	r0, r3
   1bf14:	46bd      	mov	sp, r7
   1bf16:	bc80      	pop	{r7}
   1bf18:	4770      	bx	lr
   1bf1a:	bf00      	nop
   1bf1c:	2001517c 	.word	0x2001517c

0001bf20 <log_const_source_id>:
{
   1bf20:	b480      	push	{r7}
   1bf22:	b083      	sub	sp, #12
   1bf24:	af00      	add	r7, sp, #0
   1bf26:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1bf28:	687b      	ldr	r3, [r7, #4]
   1bf2a:	4a04      	ldr	r2, [pc, #16]	; (1bf3c <log_const_source_id+0x1c>)
   1bf2c:	1a9b      	subs	r3, r3, r2
   1bf2e:	08db      	lsrs	r3, r3, #3
}
   1bf30:	4618      	mov	r0, r3
   1bf32:	370c      	adds	r7, #12
   1bf34:	46bd      	mov	sp, r7
   1bf36:	bc80      	pop	{r7}
   1bf38:	4770      	bx	lr
   1bf3a:	bf00      	nop
   1bf3c:	00029354 	.word	0x00029354

0001bf40 <thread_name_get>:
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
}
/* LCOV_EXCL_STOP */

static const char *thread_name_get(struct k_thread *thread)
{
   1bf40:	b580      	push	{r7, lr}
   1bf42:	b084      	sub	sp, #16
   1bf44:	af00      	add	r7, sp, #0
   1bf46:	6078      	str	r0, [r7, #4]
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1bf48:	687b      	ldr	r3, [r7, #4]
   1bf4a:	2b00      	cmp	r3, #0
   1bf4c:	d004      	beq.n	1bf58 <thread_name_get+0x18>
   1bf4e:	6878      	ldr	r0, [r7, #4]
   1bf50:	f00b feef 	bl	27d32 <k_thread_name_get>
   1bf54:	4603      	mov	r3, r0
   1bf56:	e000      	b.n	1bf5a <thread_name_get+0x1a>
   1bf58:	2300      	movs	r3, #0
   1bf5a:	60fb      	str	r3, [r7, #12]

	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1bf5c:	68fb      	ldr	r3, [r7, #12]
   1bf5e:	2b00      	cmp	r3, #0
   1bf60:	d003      	beq.n	1bf6a <thread_name_get+0x2a>
   1bf62:	68fb      	ldr	r3, [r7, #12]
   1bf64:	781b      	ldrb	r3, [r3, #0]
   1bf66:	2b00      	cmp	r3, #0
   1bf68:	d101      	bne.n	1bf6e <thread_name_get+0x2e>
		thread_name = "unknown";
   1bf6a:	4b03      	ldr	r3, [pc, #12]	; (1bf78 <thread_name_get+0x38>)
   1bf6c:	60fb      	str	r3, [r7, #12]
	}

	return thread_name;
   1bf6e:	68fb      	ldr	r3, [r7, #12]
}
   1bf70:	4618      	mov	r0, r3
   1bf72:	3710      	adds	r7, #16
   1bf74:	46bd      	mov	sp, r7
   1bf76:	bd80      	pop	{r7, pc}
   1bf78:	0002ba68 	.word	0x0002ba68

0001bf7c <reason_to_str>:

static const char *reason_to_str(unsigned int reason)
{
   1bf7c:	b480      	push	{r7}
   1bf7e:	b083      	sub	sp, #12
   1bf80:	af00      	add	r7, sp, #0
   1bf82:	6078      	str	r0, [r7, #4]
   1bf84:	687b      	ldr	r3, [r7, #4]
   1bf86:	2b04      	cmp	r3, #4
   1bf88:	d816      	bhi.n	1bfb8 <reason_to_str+0x3c>
   1bf8a:	a201      	add	r2, pc, #4	; (adr r2, 1bf90 <reason_to_str+0x14>)
   1bf8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1bf90:	0001bfa5 	.word	0x0001bfa5
   1bf94:	0001bfa9 	.word	0x0001bfa9
   1bf98:	0001bfad 	.word	0x0001bfad
   1bf9c:	0001bfb1 	.word	0x0001bfb1
   1bfa0:	0001bfb5 	.word	0x0001bfb5
	switch (reason) {
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
   1bfa4:	4b07      	ldr	r3, [pc, #28]	; (1bfc4 <reason_to_str+0x48>)
   1bfa6:	e008      	b.n	1bfba <reason_to_str+0x3e>
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
   1bfa8:	4b07      	ldr	r3, [pc, #28]	; (1bfc8 <reason_to_str+0x4c>)
   1bfaa:	e006      	b.n	1bfba <reason_to_str+0x3e>
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
   1bfac:	4b07      	ldr	r3, [pc, #28]	; (1bfcc <reason_to_str+0x50>)
   1bfae:	e004      	b.n	1bfba <reason_to_str+0x3e>
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
   1bfb0:	4b07      	ldr	r3, [pc, #28]	; (1bfd0 <reason_to_str+0x54>)
   1bfb2:	e002      	b.n	1bfba <reason_to_str+0x3e>
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   1bfb4:	4b07      	ldr	r3, [pc, #28]	; (1bfd4 <reason_to_str+0x58>)
   1bfb6:	e000      	b.n	1bfba <reason_to_str+0x3e>
	default:
		return "Unknown error";
   1bfb8:	4b07      	ldr	r3, [pc, #28]	; (1bfd8 <reason_to_str+0x5c>)
	}
}
   1bfba:	4618      	mov	r0, r3
   1bfbc:	370c      	adds	r7, #12
   1bfbe:	46bd      	mov	sp, r7
   1bfc0:	bc80      	pop	{r7}
   1bfc2:	4770      	bx	lr
   1bfc4:	0002ba70 	.word	0x0002ba70
   1bfc8:	0002ba80 	.word	0x0002ba80
   1bfcc:	0002ba94 	.word	0x0002ba94
   1bfd0:	0002baa4 	.word	0x0002baa4
   1bfd4:	0002bab0 	.word	0x0002bab0
   1bfd8:	0002bac0 	.word	0x0002bac0

0001bfdc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1bfdc:	b590      	push	{r4, r7, lr}
   1bfde:	b097      	sub	sp, #92	; 0x5c
   1bfe0:	af02      	add	r7, sp, #8
   1bfe2:	6078      	str	r0, [r7, #4]
   1bfe4:	6039      	str	r1, [r7, #0]
	__asm__ volatile(
   1bfe6:	f04f 0320 	mov.w	r3, #32
   1bfea:	f3ef 8211 	mrs	r2, BASEPRI
   1bfee:	f383 8811 	msr	BASEPRI, r3
   1bff2:	f3bf 8f6f 	isb	sy
   1bff6:	637a      	str	r2, [r7, #52]	; 0x34
   1bff8:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
   1bffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	/* We can't allow this code to be preempted, but don't need to
	 * synchronize between CPUs, so an arch-layer lock is
	 * appropriate.
	 */
	unsigned int key = arch_irq_lock();
   1bffc:	647b      	str	r3, [r7, #68]	; 0x44
	struct k_thread *thread = IS_ENABLED(CONFIG_MULTITHREADING) ?
			k_current_get() : NULL;
   1bffe:	f00b fbcf 	bl	277a0 <k_current_get>
   1c002:	64b8      	str	r0, [r7, #72]	; 0x48

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1c004:	2303      	movs	r3, #3
   1c006:	2b00      	cmp	r3, #0
   1c008:	d04c      	beq.n	1c0a4 <z_fatal_error+0xc8>
   1c00a:	f00b fbc2 	bl	27792 <k_is_user_context>
   1c00e:	4603      	mov	r3, r0
   1c010:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
   1c014:	2300      	movs	r3, #0
   1c016:	623b      	str	r3, [r7, #32]
   1c018:	2303      	movs	r3, #3
   1c01a:	2b00      	cmp	r3, #0
   1c01c:	d007      	beq.n	1c02e <z_fatal_error+0x52>
   1c01e:	4b83      	ldr	r3, [pc, #524]	; (1c22c <z_fatal_error+0x250>)
   1c020:	681b      	ldr	r3, [r3, #0]
   1c022:	4618      	mov	r0, r3
   1c024:	f7ff ff7c 	bl	1bf20 <log_const_source_id>
   1c028:	4603      	mov	r3, r0
   1c02a:	b29b      	uxth	r3, r3
   1c02c:	e000      	b.n	1c030 <z_fatal_error+0x54>
   1c02e:	2300      	movs	r3, #0
   1c030:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
   1c034:	7f3b      	ldrb	r3, [r7, #28]
   1c036:	2201      	movs	r2, #1
   1c038:	f362 0302 	bfi	r3, r2, #0, #3
   1c03c:	773b      	strb	r3, [r7, #28]
   1c03e:	7f3b      	ldrb	r3, [r7, #28]
   1c040:	f36f 03c5 	bfc	r3, #3, #3
   1c044:	773b      	strb	r3, [r7, #28]
   1c046:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   1c04a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1c04e:	b29a      	uxth	r2, r3
   1c050:	8bbb      	ldrh	r3, [r7, #28]
   1c052:	f362 138f 	bfi	r3, r2, #6, #10
   1c056:	83bb      	strh	r3, [r7, #28]
   1c058:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   1c05c:	2b00      	cmp	r3, #0
   1c05e:	d00e      	beq.n	1c07e <z_fatal_error+0xa2>
   1c060:	6878      	ldr	r0, [r7, #4]
   1c062:	f7ff ff8b 	bl	1bf7c <reason_to_str>
   1c066:	4604      	mov	r4, r0
   1c068:	f00b fbc3 	bl	277f2 <get_cpu>
   1c06c:	4603      	mov	r3, r0
   1c06e:	9300      	str	r3, [sp, #0]
   1c070:	4623      	mov	r3, r4
   1c072:	687a      	ldr	r2, [r7, #4]
   1c074:	496e      	ldr	r1, [pc, #440]	; (1c230 <z_fatal_error+0x254>)
   1c076:	8bb8      	ldrh	r0, [r7, #28]
   1c078:	f7f7 f86a 	bl	13150 <log_from_user>
   1c07c:	e013      	b.n	1c0a6 <z_fatal_error+0xca>
   1c07e:	6878      	ldr	r0, [r7, #4]
   1c080:	f7ff ff7c 	bl	1bf7c <reason_to_str>
   1c084:	4603      	mov	r3, r0
   1c086:	461c      	mov	r4, r3
   1c088:	f00b fbb3 	bl	277f2 <get_cpu>
   1c08c:	4603      	mov	r3, r0
   1c08e:	461a      	mov	r2, r3
   1c090:	8bbb      	ldrh	r3, [r7, #28]
   1c092:	f8ad 3000 	strh.w	r3, [sp]
   1c096:	4613      	mov	r3, r2
   1c098:	4622      	mov	r2, r4
   1c09a:	6879      	ldr	r1, [r7, #4]
   1c09c:	4864      	ldr	r0, [pc, #400]	; (1c230 <z_fatal_error+0x254>)
   1c09e:	f006 fd76 	bl	22b8e <log_3>
   1c0a2:	e000      	b.n	1c0a6 <z_fatal_error+0xca>
   1c0a4:	bf00      	nop
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1c0a6:	683b      	ldr	r3, [r7, #0]
   1c0a8:	2b00      	cmp	r3, #0
   1c0aa:	d043      	beq.n	1c134 <z_fatal_error+0x158>
   1c0ac:	683b      	ldr	r3, [r7, #0]
   1c0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1c0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1c0b2:	69db      	ldr	r3, [r3, #28]
   1c0b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1c0b8:	2b00      	cmp	r3, #0
   1c0ba:	bf14      	ite	ne
   1c0bc:	2301      	movne	r3, #1
   1c0be:	2300      	moveq	r3, #0
   1c0c0:	b2db      	uxtb	r3, r3
   1c0c2:	2b00      	cmp	r3, #0
   1c0c4:	d036      	beq.n	1c134 <z_fatal_error+0x158>
		LOG_ERR("Fault during interrupt handling\n");
   1c0c6:	2303      	movs	r3, #3
   1c0c8:	2b00      	cmp	r3, #0
   1c0ca:	d032      	beq.n	1c132 <z_fatal_error+0x156>
   1c0cc:	f00b fb61 	bl	27792 <k_is_user_context>
   1c0d0:	4603      	mov	r3, r0
   1c0d2:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
   1c0d6:	2300      	movs	r3, #0
   1c0d8:	61bb      	str	r3, [r7, #24]
   1c0da:	2303      	movs	r3, #3
   1c0dc:	2b00      	cmp	r3, #0
   1c0de:	d007      	beq.n	1c0f0 <z_fatal_error+0x114>
   1c0e0:	4b52      	ldr	r3, [pc, #328]	; (1c22c <z_fatal_error+0x250>)
   1c0e2:	681b      	ldr	r3, [r3, #0]
   1c0e4:	4618      	mov	r0, r3
   1c0e6:	f7ff ff1b 	bl	1bf20 <log_const_source_id>
   1c0ea:	4603      	mov	r3, r0
   1c0ec:	b29b      	uxth	r3, r3
   1c0ee:	e000      	b.n	1c0f2 <z_fatal_error+0x116>
   1c0f0:	2300      	movs	r3, #0
   1c0f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
   1c0f4:	7d3b      	ldrb	r3, [r7, #20]
   1c0f6:	2201      	movs	r2, #1
   1c0f8:	f362 0302 	bfi	r3, r2, #0, #3
   1c0fc:	753b      	strb	r3, [r7, #20]
   1c0fe:	7d3b      	ldrb	r3, [r7, #20]
   1c100:	f36f 03c5 	bfc	r3, #3, #3
   1c104:	753b      	strb	r3, [r7, #20]
   1c106:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
   1c108:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1c10c:	b29a      	uxth	r2, r3
   1c10e:	8abb      	ldrh	r3, [r7, #20]
   1c110:	f362 138f 	bfi	r3, r2, #6, #10
   1c114:	82bb      	strh	r3, [r7, #20]
   1c116:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   1c11a:	2b00      	cmp	r3, #0
   1c11c:	d004      	beq.n	1c128 <z_fatal_error+0x14c>
   1c11e:	4945      	ldr	r1, [pc, #276]	; (1c234 <z_fatal_error+0x258>)
   1c120:	8ab8      	ldrh	r0, [r7, #20]
   1c122:	f7f7 f815 	bl	13150 <log_from_user>
   1c126:	e005      	b.n	1c134 <z_fatal_error+0x158>
   1c128:	8ab9      	ldrh	r1, [r7, #20]
   1c12a:	4842      	ldr	r0, [pc, #264]	; (1c234 <z_fatal_error+0x258>)
   1c12c:	f006 fcea 	bl	22b04 <log_0>
   1c130:	e000      	b.n	1c134 <z_fatal_error+0x158>
   1c132:	bf00      	nop
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1c134:	2303      	movs	r3, #3
   1c136:	2b00      	cmp	r3, #0
   1c138:	d046      	beq.n	1c1c8 <z_fatal_error+0x1ec>
   1c13a:	f00b fb2a 	bl	27792 <k_is_user_context>
   1c13e:	4603      	mov	r3, r0
   1c140:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
   1c144:	2300      	movs	r3, #0
   1c146:	613b      	str	r3, [r7, #16]
   1c148:	2303      	movs	r3, #3
   1c14a:	2b00      	cmp	r3, #0
   1c14c:	d007      	beq.n	1c15e <z_fatal_error+0x182>
   1c14e:	4b37      	ldr	r3, [pc, #220]	; (1c22c <z_fatal_error+0x250>)
   1c150:	681b      	ldr	r3, [r3, #0]
   1c152:	4618      	mov	r0, r3
   1c154:	f7ff fee4 	bl	1bf20 <log_const_source_id>
   1c158:	4603      	mov	r3, r0
   1c15a:	b29b      	uxth	r3, r3
   1c15c:	e000      	b.n	1c160 <z_fatal_error+0x184>
   1c15e:	2300      	movs	r3, #0
   1c160:	877b      	strh	r3, [r7, #58]	; 0x3a
   1c162:	7b3b      	ldrb	r3, [r7, #12]
   1c164:	2201      	movs	r2, #1
   1c166:	f362 0302 	bfi	r3, r2, #0, #3
   1c16a:	733b      	strb	r3, [r7, #12]
   1c16c:	7b3b      	ldrb	r3, [r7, #12]
   1c16e:	f36f 03c5 	bfc	r3, #3, #3
   1c172:	733b      	strb	r3, [r7, #12]
   1c174:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   1c176:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1c17a:	b29a      	uxth	r2, r3
   1c17c:	89bb      	ldrh	r3, [r7, #12]
   1c17e:	f362 138f 	bfi	r3, r2, #6, #10
   1c182:	81bb      	strh	r3, [r7, #12]
   1c184:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
   1c188:	2b00      	cmp	r3, #0
   1c18a:	d00d      	beq.n	1c1a8 <z_fatal_error+0x1cc>
   1c18c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   1c18e:	f7ff fed7 	bl	1bf40 <thread_name_get>
   1c192:	4603      	mov	r3, r0
   1c194:	4618      	mov	r0, r3
   1c196:	f00b fb15 	bl	277c4 <log_strdup>
   1c19a:	4603      	mov	r3, r0
   1c19c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1c19e:	4926      	ldr	r1, [pc, #152]	; (1c238 <z_fatal_error+0x25c>)
   1c1a0:	89b8      	ldrh	r0, [r7, #12]
   1c1a2:	f7f6 ffd5 	bl	13150 <log_from_user>
   1c1a6:	e010      	b.n	1c1ca <z_fatal_error+0x1ee>
   1c1a8:	6cbc      	ldr	r4, [r7, #72]	; 0x48
   1c1aa:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   1c1ac:	f7ff fec8 	bl	1bf40 <thread_name_get>
   1c1b0:	4603      	mov	r3, r0
   1c1b2:	4618      	mov	r0, r3
   1c1b4:	f00b fb06 	bl	277c4 <log_strdup>
   1c1b8:	4603      	mov	r3, r0
   1c1ba:	461a      	mov	r2, r3
   1c1bc:	89bb      	ldrh	r3, [r7, #12]
   1c1be:	4621      	mov	r1, r4
   1c1c0:	481d      	ldr	r0, [pc, #116]	; (1c238 <z_fatal_error+0x25c>)
   1c1c2:	f006 fccb 	bl	22b5c <log_2>
   1c1c6:	e000      	b.n	1c1ca <z_fatal_error+0x1ee>
   1c1c8:	bf00      	nop
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);
   1c1ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1c1cc:	6839      	ldr	r1, [r7, #0]
   1c1ce:	6878      	ldr	r0, [r7, #4]
   1c1d0:	f00b fb04 	bl	277dc <coredump>

	k_sys_fatal_error_handler(reason, esf);
   1c1d4:	6839      	ldr	r1, [r7, #0]
   1c1d6:	6878      	ldr	r0, [r7, #4]
   1c1d8:	f7fd fae8 	bl	197ac <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1c1dc:	687b      	ldr	r3, [r7, #4]
   1c1de:	2b04      	cmp	r3, #4
   1c1e0:	d10c      	bne.n	1c1fc <z_fatal_error+0x220>
   1c1e2:	238f      	movs	r3, #143	; 0x8f
   1c1e4:	4a15      	ldr	r2, [pc, #84]	; (1c23c <z_fatal_error+0x260>)
   1c1e6:	4916      	ldr	r1, [pc, #88]	; (1c240 <z_fatal_error+0x264>)
   1c1e8:	4816      	ldr	r0, [pc, #88]	; (1c244 <z_fatal_error+0x268>)
   1c1ea:	f004 ff3d 	bl	21068 <printk>
   1c1ee:	4816      	ldr	r0, [pc, #88]	; (1c248 <z_fatal_error+0x26c>)
   1c1f0:	f004 ff3a 	bl	21068 <printk>
   1c1f4:	218f      	movs	r1, #143	; 0x8f
   1c1f6:	4811      	ldr	r0, [pc, #68]	; (1c23c <z_fatal_error+0x260>)
   1c1f8:	f005 ffe3 	bl	221c2 <assert_post_action>
			 "Attempted to recover from a kernel panic condition");
		/* FIXME: #17656 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
		if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1c1fc:	683b      	ldr	r3, [r7, #0]
   1c1fe:	2b00      	cmp	r3, #0
   1c200:	d006      	beq.n	1c210 <z_fatal_error+0x234>
   1c202:	683b      	ldr	r3, [r7, #0]
   1c204:	62bb      	str	r3, [r7, #40]	; 0x28
   1c206:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1c208:	69db      	ldr	r3, [r3, #28]
   1c20a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1c20e:	2b00      	cmp	r3, #0
   1c210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1c212:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   1c214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c216:	f383 8811 	msr	BASEPRI, r3
   1c21a:	f3bf 8f6f 	isb	sy
}
   1c21e:	bf00      	nop
	}

	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
   1c220:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   1c222:	f00b fac4 	bl	277ae <k_thread_abort>
	}
}
   1c226:	3754      	adds	r7, #84	; 0x54
   1c228:	46bd      	mov	sp, r7
   1c22a:	bd90      	pop	{r4, r7, pc}
   1c22c:	2001456c 	.word	0x2001456c
   1c230:	0002bad0 	.word	0x0002bad0
   1c234:	0002baf8 	.word	0x0002baf8
   1c238:	0002bb1c 	.word	0x0002bb1c
   1c23c:	0002bb34 	.word	0x0002bb34
   1c240:	0002bb58 	.word	0x0002bb58
   1c244:	0002bb78 	.word	0x0002bb78
   1c248:	0002bb98 	.word	0x0002bb98

0001c24c <__NVIC_SetPriority>:
{
   1c24c:	b480      	push	{r7}
   1c24e:	b083      	sub	sp, #12
   1c250:	af00      	add	r7, sp, #0
   1c252:	4603      	mov	r3, r0
   1c254:	6039      	str	r1, [r7, #0]
   1c256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
   1c258:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1c25c:	2b00      	cmp	r3, #0
   1c25e:	db0a      	blt.n	1c276 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c260:	683b      	ldr	r3, [r7, #0]
   1c262:	b2da      	uxtb	r2, r3
   1c264:	490c      	ldr	r1, [pc, #48]	; (1c298 <__NVIC_SetPriority+0x4c>)
   1c266:	f997 3007 	ldrsb.w	r3, [r7, #7]
   1c26a:	0152      	lsls	r2, r2, #5
   1c26c:	b2d2      	uxtb	r2, r2
   1c26e:	440b      	add	r3, r1
   1c270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   1c274:	e00a      	b.n	1c28c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1c276:	683b      	ldr	r3, [r7, #0]
   1c278:	b2da      	uxtb	r2, r3
   1c27a:	4908      	ldr	r1, [pc, #32]	; (1c29c <__NVIC_SetPriority+0x50>)
   1c27c:	79fb      	ldrb	r3, [r7, #7]
   1c27e:	f003 030f 	and.w	r3, r3, #15
   1c282:	3b04      	subs	r3, #4
   1c284:	0152      	lsls	r2, r2, #5
   1c286:	b2d2      	uxtb	r2, r2
   1c288:	440b      	add	r3, r1
   1c28a:	761a      	strb	r2, [r3, #24]
}
   1c28c:	bf00      	nop
   1c28e:	370c      	adds	r7, #12
   1c290:	46bd      	mov	sp, r7
   1c292:	bc80      	pop	{r7}
   1c294:	4770      	bx	lr
   1c296:	bf00      	nop
   1c298:	e000e100 	.word	0xe000e100
   1c29c:	e000ed00 	.word	0xe000ed00

0001c2a0 <z_dummy_thread_init>:
 * use it to properly store state, which will just be discarded.
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
   1c2a0:	b480      	push	{r7}
   1c2a2:	b083      	sub	sp, #12
   1c2a4:	af00      	add	r7, sp, #0
   1c2a6:	6078      	str	r0, [r7, #4]
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   1c2a8:	687b      	ldr	r3, [r7, #4]
   1c2aa:	2201      	movs	r2, #1
   1c2ac:	735a      	strb	r2, [r3, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1c2ae:	687b      	ldr	r3, [r7, #4]
   1c2b0:	2201      	movs	r2, #1
   1c2b2:	731a      	strb	r2, [r3, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   1c2b4:	687b      	ldr	r3, [r7, #4]
   1c2b6:	2200      	movs	r2, #0
   1c2b8:	665a      	str	r2, [r3, #100]	; 0x64
	dummy_thread->stack_info.size = 0U;
   1c2ba:	687b      	ldr	r3, [r7, #4]
   1c2bc:	2200      	movs	r2, #0
   1c2be:	669a      	str	r2, [r3, #104]	; 0x68
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1c2c0:	4a03      	ldr	r2, [pc, #12]	; (1c2d0 <z_dummy_thread_init+0x30>)
   1c2c2:	687b      	ldr	r3, [r7, #4]
   1c2c4:	6093      	str	r3, [r2, #8]
}
   1c2c6:	bf00      	nop
   1c2c8:	370c      	adds	r7, #12
   1c2ca:	46bd      	mov	sp, r7
   1c2cc:	bc80      	pop	{r7}
   1c2ce:	4770      	bx	lr
   1c2d0:	2001517c 	.word	0x2001517c

0001c2d4 <z_bss_zero>:
 *
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
   1c2d4:	b580      	push	{r7, lr}
   1c2d6:	af00      	add	r7, sp, #0
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1c2d8:	4a04      	ldr	r2, [pc, #16]	; (1c2ec <z_bss_zero+0x18>)
   1c2da:	4b05      	ldr	r3, [pc, #20]	; (1c2f0 <z_bss_zero+0x1c>)
   1c2dc:	1ad3      	subs	r3, r2, r3
   1c2de:	461a      	mov	r2, r3
   1c2e0:	2100      	movs	r1, #0
   1c2e2:	4803      	ldr	r0, [pc, #12]	; (1c2f0 <z_bss_zero+0x1c>)
   1c2e4:	f008 fa57 	bl	24796 <memset>
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	(void)memset(&__gcov_bss_start, 0,
		 ((uintptr_t) &__gcov_bss_end - (uintptr_t) &__gcov_bss_start));
#endif
}
   1c2e8:	bf00      	nop
   1c2ea:	bd80      	pop	{r7, pc}
   1c2ec:	20015330 	.word	0x20015330
   1c2f0:	200145d0 	.word	0x200145d0

0001c2f4 <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1c2f4:	b580      	push	{r7, lr}
   1c2f6:	b084      	sub	sp, #16
   1c2f8:	af00      	add	r7, sp, #0
   1c2fa:	60f8      	str	r0, [r7, #12]
   1c2fc:	60b9      	str	r1, [r7, #8]
   1c2fe:	607a      	str	r2, [r7, #4]
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1c300:	4b0c      	ldr	r3, [pc, #48]	; (1c334 <bg_thread_main+0x40>)
   1c302:	2201      	movs	r2, #1
   1c304:	701a      	strb	r2, [r3, #0]

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1c306:	2002      	movs	r0, #2
   1c308:	f7ff fd76 	bl	1bdf8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1c30c:	f004 fc6c 	bl	20be8 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1c310:	2003      	movs	r0, #3
   1c312:	f7ff fd71 	bl	1bdf8 <z_sys_init_run_level>

	z_init_static_threads();
   1c316:	f000 fdfd 	bl	1cf14 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   1c31a:	f7f4 faad 	bl	10878 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1c31e:	4b06      	ldr	r3, [pc, #24]	; (1c338 <bg_thread_main+0x44>)
   1c320:	7b1b      	ldrb	r3, [r3, #12]
   1c322:	f023 0301 	bic.w	r3, r3, #1
   1c326:	b2da      	uxtb	r2, r3
   1c328:	4b03      	ldr	r3, [pc, #12]	; (1c338 <bg_thread_main+0x44>)
   1c32a:	731a      	strb	r2, [r3, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1c32c:	bf00      	nop
   1c32e:	3710      	adds	r7, #16
   1c330:	46bd      	mov	sp, r7
   1c332:	bd80      	pop	{r7, pc}
   1c334:	2001532f 	.word	0x2001532f
   1c338:	20014aa0 	.word	0x20014aa0

0001c33c <init_idle_thread>:
/* LCOV_EXCL_STOP */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1c33c:	b580      	push	{r7, lr}
   1c33e:	b08c      	sub	sp, #48	; 0x30
   1c340:	af06      	add	r7, sp, #24
   1c342:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = &z_idle_threads[i];
   1c344:	687b      	ldr	r3, [r7, #4]
   1c346:	01db      	lsls	r3, r3, #7
   1c348:	4a16      	ldr	r2, [pc, #88]	; (1c3a4 <init_idle_thread+0x68>)
   1c34a:	4413      	add	r3, r2
   1c34c:	617b      	str	r3, [r7, #20]
	k_thread_stack_t *stack = z_idle_stacks[i];
   1c34e:	687a      	ldr	r2, [r7, #4]
   1c350:	4613      	mov	r3, r2
   1c352:	009b      	lsls	r3, r3, #2
   1c354:	4413      	add	r3, r2
   1c356:	019b      	lsls	r3, r3, #6
   1c358:	4a13      	ldr	r2, [pc, #76]	; (1c3a8 <init_idle_thread+0x6c>)
   1c35a:	4413      	add	r3, r2
   1c35c:	613b      	str	r3, [r7, #16]
#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
   1c35e:	2300      	movs	r3, #0
   1c360:	60fb      	str	r3, [r7, #12]
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1c362:	687a      	ldr	r2, [r7, #4]
   1c364:	4613      	mov	r3, r2
   1c366:	005b      	lsls	r3, r3, #1
   1c368:	4413      	add	r3, r2
   1c36a:	00db      	lsls	r3, r3, #3
   1c36c:	4a0f      	ldr	r2, [pc, #60]	; (1c3ac <init_idle_thread+0x70>)
   1c36e:	4413      	add	r3, r2
	z_setup_new_thread(thread, stack,
   1c370:	68fa      	ldr	r2, [r7, #12]
   1c372:	9205      	str	r2, [sp, #20]
   1c374:	2201      	movs	r2, #1
   1c376:	9204      	str	r2, [sp, #16]
   1c378:	220f      	movs	r2, #15
   1c37a:	9203      	str	r2, [sp, #12]
   1c37c:	2200      	movs	r2, #0
   1c37e:	9202      	str	r2, [sp, #8]
   1c380:	2200      	movs	r2, #0
   1c382:	9201      	str	r2, [sp, #4]
   1c384:	9300      	str	r3, [sp, #0]
   1c386:	4b0a      	ldr	r3, [pc, #40]	; (1c3b0 <init_idle_thread+0x74>)
   1c388:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1c38c:	6939      	ldr	r1, [r7, #16]
   1c38e:	6978      	ldr	r0, [r7, #20]
   1c390:	f000 fd06 	bl	1cda0 <z_setup_new_thread>
			  NULL, NULL, K_IDLE_PRIO, K_ESSENTIAL,
			  tname);
	z_mark_thread_as_started(thread);
   1c394:	6978      	ldr	r0, [r7, #20]
   1c396:	f00b fa4c 	bl	27832 <z_mark_thread_as_started>

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1c39a:	bf00      	nop
   1c39c:	3718      	adds	r7, #24
   1c39e:	46bd      	mov	sp, r7
   1c3a0:	bd80      	pop	{r7, pc}
   1c3a2:	bf00      	nop
   1c3a4:	20014b20 	.word	0x20014b20
   1c3a8:	20016330 	.word	0x20016330
   1c3ac:	2001517c 	.word	0x2001517c
   1c3b0:	0001d111 	.word	0x0001d111

0001c3b4 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   1c3b4:	b580      	push	{r7, lr}
   1c3b6:	b088      	sub	sp, #32
   1c3b8:	af06      	add	r7, sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   1c3ba:	f003 fa93 	bl	1f8e4 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   1c3be:	4b2e      	ldr	r3, [pc, #184]	; (1c478 <prepare_multithreading+0xc4>)
   1c3c0:	4a2e      	ldr	r2, [pc, #184]	; (1c47c <prepare_multithreading+0xc8>)
   1c3c2:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1c3c4:	4b2e      	ldr	r3, [pc, #184]	; (1c480 <prepare_multithreading+0xcc>)
   1c3c6:	9305      	str	r3, [sp, #20]
   1c3c8:	2301      	movs	r3, #1
   1c3ca:	9304      	str	r3, [sp, #16]
   1c3cc:	2300      	movs	r3, #0
   1c3ce:	9303      	str	r3, [sp, #12]
   1c3d0:	2300      	movs	r3, #0
   1c3d2:	9302      	str	r3, [sp, #8]
   1c3d4:	2300      	movs	r3, #0
   1c3d6:	9301      	str	r3, [sp, #4]
   1c3d8:	2300      	movs	r3, #0
   1c3da:	9300      	str	r3, [sp, #0]
   1c3dc:	4b29      	ldr	r3, [pc, #164]	; (1c484 <prepare_multithreading+0xd0>)
   1c3de:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1c3e2:	4929      	ldr	r1, [pc, #164]	; (1c488 <prepare_multithreading+0xd4>)
   1c3e4:	4825      	ldr	r0, [pc, #148]	; (1c47c <prepare_multithreading+0xc8>)
   1c3e6:	f000 fcdb 	bl	1cda0 <z_setup_new_thread>
   1c3ea:	6038      	str	r0, [r7, #0]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
   1c3ec:	4823      	ldr	r0, [pc, #140]	; (1c47c <prepare_multithreading+0xc8>)
   1c3ee:	f00b fa20 	bl	27832 <z_mark_thread_as_started>
	z_ready_thread(&z_main_thread);
   1c3f2:	4822      	ldr	r0, [pc, #136]	; (1c47c <prepare_multithreading+0xc8>)
   1c3f4:	f002 f9d6 	bl	1e7a4 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1c3f8:	2300      	movs	r3, #0
   1c3fa:	607b      	str	r3, [r7, #4]
   1c3fc:	e031      	b.n	1c462 <prepare_multithreading+0xae>
		init_idle_thread(i);
   1c3fe:	6878      	ldr	r0, [r7, #4]
   1c400:	f7ff ff9c 	bl	1c33c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1c404:	687b      	ldr	r3, [r7, #4]
   1c406:	01db      	lsls	r3, r3, #7
   1c408:	4a20      	ldr	r2, [pc, #128]	; (1c48c <prepare_multithreading+0xd8>)
   1c40a:	1899      	adds	r1, r3, r2
   1c40c:	481a      	ldr	r0, [pc, #104]	; (1c478 <prepare_multithreading+0xc4>)
   1c40e:	687a      	ldr	r2, [r7, #4]
   1c410:	4613      	mov	r3, r2
   1c412:	005b      	lsls	r3, r3, #1
   1c414:	4413      	add	r3, r2
   1c416:	00db      	lsls	r3, r3, #3
   1c418:	4403      	add	r3, r0
   1c41a:	330c      	adds	r3, #12
   1c41c:	6019      	str	r1, [r3, #0]
		_kernel.cpus[i].id = i;
   1c41e:	687b      	ldr	r3, [r7, #4]
   1c420:	b2d8      	uxtb	r0, r3
   1c422:	4915      	ldr	r1, [pc, #84]	; (1c478 <prepare_multithreading+0xc4>)
   1c424:	687a      	ldr	r2, [r7, #4]
   1c426:	4613      	mov	r3, r2
   1c428:	005b      	lsls	r3, r3, #1
   1c42a:	4413      	add	r3, r2
   1c42c:	00db      	lsls	r3, r3, #3
   1c42e:	440b      	add	r3, r1
   1c430:	3314      	adds	r3, #20
   1c432:	4602      	mov	r2, r0
   1c434:	701a      	strb	r2, [r3, #0]
		_kernel.cpus[i].irq_stack =
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   1c436:	687b      	ldr	r3, [r7, #4]
   1c438:	02db      	lsls	r3, r3, #11
   1c43a:	4a15      	ldr	r2, [pc, #84]	; (1c490 <prepare_multithreading+0xdc>)
   1c43c:	4413      	add	r3, r2
   1c43e:	4618      	mov	r0, r3
   1c440:	f00b f9ed 	bl	2781e <Z_KERNEL_STACK_BUFFER>
   1c444:	4603      	mov	r3, r0
   1c446:	f503 6100 	add.w	r1, r3, #2048	; 0x800
		_kernel.cpus[i].irq_stack =
   1c44a:	480b      	ldr	r0, [pc, #44]	; (1c478 <prepare_multithreading+0xc4>)
   1c44c:	687a      	ldr	r2, [r7, #4]
   1c44e:	4613      	mov	r3, r2
   1c450:	005b      	lsls	r3, r3, #1
   1c452:	4413      	add	r3, r2
   1c454:	00db      	lsls	r3, r3, #3
   1c456:	4403      	add	r3, r0
   1c458:	3304      	adds	r3, #4
   1c45a:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1c45c:	687b      	ldr	r3, [r7, #4]
   1c45e:	3301      	adds	r3, #1
   1c460:	607b      	str	r3, [r7, #4]
   1c462:	687b      	ldr	r3, [r7, #4]
   1c464:	2b00      	cmp	r3, #0
   1c466:	ddca      	ble.n	1c3fe <prepare_multithreading+0x4a>
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	initialize_timeouts();
   1c468:	480a      	ldr	r0, [pc, #40]	; (1c494 <prepare_multithreading+0xe0>)
   1c46a:	f00b f9c9 	bl	27800 <sys_dlist_init>

	return stack_ptr;
   1c46e:	683b      	ldr	r3, [r7, #0]
}
   1c470:	4618      	mov	r0, r3
   1c472:	3708      	adds	r7, #8
   1c474:	46bd      	mov	sp, r7
   1c476:	bd80      	pop	{r7, pc}
   1c478:	2001517c 	.word	0x2001517c
   1c47c:	20014aa0 	.word	0x20014aa0
   1c480:	0002bc6c 	.word	0x0002bc6c
   1c484:	0001c2f5 	.word	0x0001c2f5
   1c488:	20015f30 	.word	0x20015f30
   1c48c:	20014b20 	.word	0x20014b20
   1c490:	20015730 	.word	0x20015730
   1c494:	20015194 	.word	0x20015194

0001c498 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   1c498:	b580      	push	{r7, lr}
   1c49a:	b082      	sub	sp, #8
   1c49c:	af00      	add	r7, sp, #0
   1c49e:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1c4a0:	4a02      	ldr	r2, [pc, #8]	; (1c4ac <switch_to_main_thread+0x14>)
   1c4a2:	6879      	ldr	r1, [r7, #4]
   1c4a4:	4802      	ldr	r0, [pc, #8]	; (1c4b0 <switch_to_main_thread+0x18>)
   1c4a6:	f7f9 fc77 	bl	15d98 <arch_switch_to_main_thread>
   1c4aa:	bf00      	nop
   1c4ac:	0001c2f5 	.word	0x0001c2f5
   1c4b0:	20014aa0 	.word	0x20014aa0

0001c4b4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1c4b4:	b580      	push	{r7, lr}
   1c4b6:	b0a4      	sub	sp, #144	; 0x90
   1c4b8:	af00      	add	r7, sp, #0
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();
   1c4ba:	f00b f9ca 	bl	27852 <gcov_static_init>

	LOG_CORE_INIT();
   1c4be:	f7f6 fbe5 	bl	12c8c <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   1c4c2:	482f      	ldr	r0, [pc, #188]	; (1c580 <z_cstart+0xcc>)
   1c4c4:	f00b f9ab 	bl	2781e <Z_KERNEL_STACK_BUFFER>
   1c4c8:	4603      	mov	r3, r0
	uint32_t msp =
   1c4ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
   1c4ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   1c4d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   1c4d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1c4da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   1c4de:	f383 8808 	msr	MSP, r3
}
   1c4e2:	bf00      	nop
			   K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[0]);

	__set_MSP(msp);
#if defined(CONFIG_BUILTIN_STACK_GUARD)
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_MSPLIM((uint32_t)z_interrupt_stacks[0]);
   1c4e4:	4b26      	ldr	r3, [pc, #152]	; (1c580 <z_cstart+0xcc>)
   1c4e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   1c4ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   1c4ee:	f383 880a 	msr	MSPLIM, r3
}
   1c4f2:	bf00      	nop
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
#endif
#endif /* CONFIG_STACK_ALIGN_DOUBLE_WORD */
}
   1c4f4:	bf00      	nop
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_exc_setup(void)
{
	NVIC_SetPriority(PendSV_IRQn, _EXC_PENDSV_PRIO);
   1c4f6:	21ff      	movs	r1, #255	; 0xff
   1c4f8:	f06f 0001 	mvn.w	r0, #1
   1c4fc:	f7ff fea6 	bl	1c24c <__NVIC_SetPriority>

#ifdef CONFIG_CPU_CORTEX_M_HAS_BASEPRI
	/* Note: SVCall IRQ priority level is left to default (0)
	 * for Cortex-M variants without BASEPRI (e.g. ARMv6-M).
	 */
	NVIC_SetPriority(SVCall_IRQn, _EXC_SVC_PRIO);
   1c500:	2100      	movs	r1, #0
   1c502:	f06f 0004 	mvn.w	r0, #4
   1c506:	f7ff fea1 	bl	1c24c <__NVIC_SetPriority>
#endif

#ifdef CONFIG_CPU_CORTEX_M_HAS_PROGRAMMABLE_FAULT_PRIOS
	NVIC_SetPriority(MemoryManagement_IRQn, _EXC_FAULT_PRIO);
   1c50a:	2100      	movs	r1, #0
   1c50c:	f06f 000b 	mvn.w	r0, #11
   1c510:	f7ff fe9c 	bl	1c24c <__NVIC_SetPriority>
	NVIC_SetPriority(BusFault_IRQn, _EXC_FAULT_PRIO);
   1c514:	2100      	movs	r1, #0
   1c516:	f06f 000a 	mvn.w	r0, #10
   1c51a:	f7ff fe97 	bl	1c24c <__NVIC_SetPriority>
	NVIC_SetPriority(UsageFault_IRQn, _EXC_FAULT_PRIO);
   1c51e:	2100      	movs	r1, #0
   1c520:	f06f 0009 	mvn.w	r0, #9
   1c524:	f7ff fe92 	bl	1c24c <__NVIC_SetPriority>
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1c528:	4b16      	ldr	r3, [pc, #88]	; (1c584 <z_cstart+0xd0>)
   1c52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c52c:	4a15      	ldr	r2, [pc, #84]	; (1c584 <z_cstart+0xd0>)
   1c52e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1c532:	6253      	str	r3, [r2, #36]	; 0x24
	/* Note: Fault conditions that would generate a SecureFault
	 * in a PE with the Main Extension instead generate a
	 * SecureHardFault in a PE without the Main Extension.
	 */
#endif /* ARM_SECURE_FIRMWARE && !ARM_SECURE_BUSFAULT_HARDFAULT_NMI */
}
   1c534:	bf00      	nop

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1c536:	f7fa ffcd 	bl	174d4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1c53a:	f7f9 fc51 	bl	15de0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1c53e:	4b11      	ldr	r3, [pc, #68]	; (1c584 <z_cstart+0xd0>)
   1c540:	f04f 32ff 	mov.w	r2, #4294967295
   1c544:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1c546:	4b0f      	ldr	r3, [pc, #60]	; (1c584 <z_cstart+0xd0>)
   1c548:	f04f 32ff 	mov.w	r2, #4294967295
   1c54c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1c54e:	bf00      	nop
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1c550:	f7fb fdce 	bl	180f0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1c554:	f7fb f846 	bl	175e4 <z_arm_configure_static_mpu_regions>
#endif
}
   1c558:	bf00      	nop
	/* Note: The z_ready_thread() call in prepare_multithreading() requires
	 * a dummy thread even if CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN=y
	 */
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
   1c55a:	463b      	mov	r3, r7
   1c55c:	4618      	mov	r0, r3
   1c55e:	f7ff fe9f 	bl	1c2a0 <z_dummy_thread_init>
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1c562:	f7ff fc2d 	bl	1bdc0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1c566:	2000      	movs	r0, #0
   1c568:	f7ff fc46 	bl	1bdf8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1c56c:	2001      	movs	r0, #1
   1c56e:	f7ff fc43 	bl	1bdf8 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   1c572:	f7ff ff1f 	bl	1c3b4 <prepare_multithreading>
   1c576:	4603      	mov	r3, r0
   1c578:	4618      	mov	r0, r3
   1c57a:	f7ff ff8d 	bl	1c498 <switch_to_main_thread>
   1c57e:	bf00      	nop
   1c580:	20015730 	.word	0x20015730
   1c584:	e000ed00 	.word	0xe000ed00

0001c588 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1c588:	b580      	push	{r7, lr}
   1c58a:	b084      	sub	sp, #16
   1c58c:	af00      	add	r7, sp, #0
   1c58e:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1c590:	4b16      	ldr	r3, [pc, #88]	; (1c5ec <statics_init+0x64>)
   1c592:	60fb      	str	r3, [r7, #12]
   1c594:	e00a      	b.n	1c5ac <statics_init+0x24>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1c596:	68fb      	ldr	r3, [r7, #12]
   1c598:	6859      	ldr	r1, [r3, #4]
   1c59a:	68fb      	ldr	r3, [r7, #12]
   1c59c:	689b      	ldr	r3, [r3, #8]
   1c59e:	461a      	mov	r2, r3
   1c5a0:	68f8      	ldr	r0, [r7, #12]
   1c5a2:	f00b f977 	bl	27894 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1c5a6:	68fb      	ldr	r3, [r7, #12]
   1c5a8:	3318      	adds	r3, #24
   1c5aa:	60fb      	str	r3, [r7, #12]
   1c5ac:	68fb      	ldr	r3, [r7, #12]
   1c5ae:	4a10      	ldr	r2, [pc, #64]	; (1c5f0 <statics_init+0x68>)
   1c5b0:	4293      	cmp	r3, r2
   1c5b2:	d90c      	bls.n	1c5ce <statics_init+0x46>
   1c5b4:	2317      	movs	r3, #23
   1c5b6:	4a0f      	ldr	r2, [pc, #60]	; (1c5f4 <statics_init+0x6c>)
   1c5b8:	490f      	ldr	r1, [pc, #60]	; (1c5f8 <statics_init+0x70>)
   1c5ba:	4810      	ldr	r0, [pc, #64]	; (1c5fc <statics_init+0x74>)
   1c5bc:	f004 fd54 	bl	21068 <printk>
   1c5c0:	480f      	ldr	r0, [pc, #60]	; (1c600 <statics_init+0x78>)
   1c5c2:	f004 fd51 	bl	21068 <printk>
   1c5c6:	2117      	movs	r1, #23
   1c5c8:	480a      	ldr	r0, [pc, #40]	; (1c5f4 <statics_init+0x6c>)
   1c5ca:	f005 fdfa 	bl	221c2 <assert_post_action>
   1c5ce:	68fb      	ldr	r3, [r7, #12]
   1c5d0:	4a07      	ldr	r2, [pc, #28]	; (1c5f0 <statics_init+0x68>)
   1c5d2:	4293      	cmp	r3, r2
   1c5d4:	bf34      	ite	cc
   1c5d6:	2301      	movcc	r3, #1
   1c5d8:	2300      	movcs	r3, #0
   1c5da:	b2db      	uxtb	r3, r3
   1c5dc:	2b00      	cmp	r3, #0
   1c5de:	d1da      	bne.n	1c596 <statics_init+0xe>
	}
	return 0;
   1c5e0:	2300      	movs	r3, #0
}
   1c5e2:	4618      	mov	r0, r3
   1c5e4:	3710      	adds	r7, #16
   1c5e6:	46bd      	mov	sp, r7
   1c5e8:	bd80      	pop	{r7, pc}
   1c5ea:	bf00      	nop
   1c5ec:	200145a4 	.word	0x200145a4
   1c5f0:	200145bc 	.word	0x200145bc
   1c5f4:	0002bc84 	.word	0x0002bc84
   1c5f8:	0002bca8 	.word	0x0002bca8
   1c5fc:	0002bcc0 	.word	0x0002bcc0
   1c600:	0002bce0 	.word	0x0002bce0

0001c604 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1c604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c608:	b09b      	sub	sp, #108	; 0x6c
   1c60a:	af02      	add	r7, sp, #8
   1c60c:	60f8      	str	r0, [r7, #12]
   1c60e:	60b9      	str	r1, [r7, #8]
   1c610:	607a      	str	r2, [r7, #4]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1c612:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
   1c616:	f00c fbe9 	bl	28dec <sys_clock_timeout_end_calc>
   1c61a:	4602      	mov	r2, r0
   1c61c:	460b      	mov	r3, r1
   1c61e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	void *ret = NULL;
   1c622:	2300      	movs	r3, #0
   1c624:	65fb      	str	r3, [r7, #92]	; 0x5c
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1c626:	68fb      	ldr	r3, [r7, #12]
   1c628:	3314      	adds	r3, #20
   1c62a:	643b      	str	r3, [r7, #64]	; 0x40
	__asm__ volatile(
   1c62c:	f04f 0320 	mov.w	r3, #32
   1c630:	f3ef 8211 	mrs	r2, BASEPRI
   1c634:	f383 8811 	msr	BASEPRI, r3
   1c638:	f3bf 8f6f 	isb	sy
   1c63c:	63fa      	str	r2, [r7, #60]	; 0x3c
   1c63e:	63bb      	str	r3, [r7, #56]	; 0x38
	return key;
   1c640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	k.key = arch_irq_lock();
   1c642:	61bb      	str	r3, [r7, #24]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c644:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1c646:	f000 fcff 	bl	1d048 <z_spin_lock_valid>
   1c64a:	4603      	mov	r3, r0
   1c64c:	f083 0301 	eor.w	r3, r3, #1
   1c650:	b2db      	uxtb	r3, r3
   1c652:	2b00      	cmp	r3, #0
   1c654:	d00d      	beq.n	1c672 <k_heap_aligned_alloc+0x6e>
   1c656:	2381      	movs	r3, #129	; 0x81
   1c658:	4a65      	ldr	r2, [pc, #404]	; (1c7f0 <k_heap_aligned_alloc+0x1ec>)
   1c65a:	4966      	ldr	r1, [pc, #408]	; (1c7f4 <k_heap_aligned_alloc+0x1f0>)
   1c65c:	4866      	ldr	r0, [pc, #408]	; (1c7f8 <k_heap_aligned_alloc+0x1f4>)
   1c65e:	f004 fd03 	bl	21068 <printk>
   1c662:	6c39      	ldr	r1, [r7, #64]	; 0x40
   1c664:	4865      	ldr	r0, [pc, #404]	; (1c7fc <k_heap_aligned_alloc+0x1f8>)
   1c666:	f004 fcff 	bl	21068 <printk>
   1c66a:	2181      	movs	r1, #129	; 0x81
   1c66c:	4860      	ldr	r0, [pc, #384]	; (1c7f0 <k_heap_aligned_alloc+0x1ec>)
   1c66e:	f005 fda8 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c672:	6c38      	ldr	r0, [r7, #64]	; 0x40
   1c674:	f000 fd20 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1c678:	69bb      	ldr	r3, [r7, #24]
   1c67a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1c67c:	f3ef 8305 	mrs	r3, IPSR
   1c680:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
   1c682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	return (__get_IPSR()) ? (true) : (false);
   1c684:	2b00      	cmp	r3, #0
   1c686:	bf14      	ite	ne
   1c688:	2301      	movne	r3, #1
   1c68a:	2300      	moveq	r3, #0
   1c68c:	b2db      	uxtb	r3, r3

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1c68e:	2b00      	cmp	r3, #0
   1c690:	d016      	beq.n	1c6c0 <k_heap_aligned_alloc+0xbc>
   1c692:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
   1c696:	f04f 0000 	mov.w	r0, #0
   1c69a:	f04f 0100 	mov.w	r1, #0
   1c69e:	428b      	cmp	r3, r1
   1c6a0:	bf08      	it	eq
   1c6a2:	4282      	cmpeq	r2, r0
   1c6a4:	d00c      	beq.n	1c6c0 <k_heap_aligned_alloc+0xbc>
   1c6a6:	2328      	movs	r3, #40	; 0x28
   1c6a8:	4a55      	ldr	r2, [pc, #340]	; (1c800 <k_heap_aligned_alloc+0x1fc>)
   1c6aa:	4956      	ldr	r1, [pc, #344]	; (1c804 <k_heap_aligned_alloc+0x200>)
   1c6ac:	4852      	ldr	r0, [pc, #328]	; (1c7f8 <k_heap_aligned_alloc+0x1f4>)
   1c6ae:	f004 fcdb 	bl	21068 <printk>
   1c6b2:	4855      	ldr	r0, [pc, #340]	; (1c808 <k_heap_aligned_alloc+0x204>)
   1c6b4:	f004 fcd8 	bl	21068 <printk>
   1c6b8:	2128      	movs	r1, #40	; 0x28
   1c6ba:	4851      	ldr	r0, [pc, #324]	; (1c800 <k_heap_aligned_alloc+0x1fc>)
   1c6bc:	f005 fd81 	bl	221c2 <assert_post_action>

	bool blocked_alloc = false;
   1c6c0:	2300      	movs	r3, #0
   1c6c2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	while (ret == NULL) {
   1c6c6:	e064      	b.n	1c792 <k_heap_aligned_alloc+0x18e>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1c6c8:	68fb      	ldr	r3, [r7, #12]
   1c6ca:	687a      	ldr	r2, [r7, #4]
   1c6cc:	68b9      	ldr	r1, [r7, #8]
   1c6ce:	4618      	mov	r0, r3
   1c6d0:	f7f4 fe3a 	bl	11348 <sys_heap_aligned_alloc>
   1c6d4:	65f8      	str	r0, [r7, #92]	; 0x5c

		now = sys_clock_tick_get();
   1c6d6:	f004 f93b 	bl	20950 <sys_clock_tick_get>
   1c6da:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1c6de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1c6e0:	2b00      	cmp	r3, #0
   1c6e2:	d159      	bne.n	1c798 <k_heap_aligned_alloc+0x194>
		    (ret != NULL) || ((end - now) <= 0)) {
   1c6e4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
   1c6e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
   1c6ec:	1a84      	subs	r4, r0, r2
   1c6ee:	eb61 0503 	sbc.w	r5, r1, r3
   1c6f2:	2c01      	cmp	r4, #1
   1c6f4:	f175 0300 	sbcs.w	r3, r5, #0
   1c6f8:	db4e      	blt.n	1c798 <k_heap_aligned_alloc+0x194>
			break;
		}

		if (!blocked_alloc) {
   1c6fa:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
   1c6fe:	f083 0301 	eor.w	r3, r3, #1
   1c702:	b2db      	uxtb	r3, r3
   1c704:	2b00      	cmp	r3, #0
   1c706:	d002      	beq.n	1c70e <k_heap_aligned_alloc+0x10a>
			blocked_alloc = true;
   1c708:	2301      	movs	r3, #1
   1c70a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1c70e:	68fb      	ldr	r3, [r7, #12]
   1c710:	f103 0614 	add.w	r6, r3, #20
   1c714:	68fb      	ldr	r3, [r7, #12]
   1c716:	f103 0c0c 	add.w	ip, r3, #12
				   K_TICKS(end - now));
   1c71a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
   1c71e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
   1c722:	ebb0 0802 	subs.w	r8, r0, r2
   1c726:	eb61 0903 	sbc.w	r9, r1, r3
   1c72a:	4642      	mov	r2, r8
   1c72c:	464b      	mov	r3, r9
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1c72e:	e9cd 2300 	strd	r2, r3, [sp]
   1c732:	4662      	mov	r2, ip
   1c734:	6a39      	ldr	r1, [r7, #32]
   1c736:	4630      	mov	r0, r6
   1c738:	f002 fc0c 	bl	1ef54 <z_pend_curr>
		key = k_spin_lock(&h->lock);
   1c73c:	68fb      	ldr	r3, [r7, #12]
   1c73e:	3314      	adds	r3, #20
   1c740:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
   1c742:	f04f 0320 	mov.w	r3, #32
   1c746:	f3ef 8211 	mrs	r2, BASEPRI
   1c74a:	f383 8811 	msr	BASEPRI, r3
   1c74e:	f3bf 8f6f 	isb	sy
   1c752:	633a      	str	r2, [r7, #48]	; 0x30
   1c754:	62fb      	str	r3, [r7, #44]	; 0x2c
	return key;
   1c756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	k.key = arch_irq_lock();
   1c758:	617b      	str	r3, [r7, #20]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c75a:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1c75c:	f000 fc74 	bl	1d048 <z_spin_lock_valid>
   1c760:	4603      	mov	r3, r0
   1c762:	f083 0301 	eor.w	r3, r3, #1
   1c766:	b2db      	uxtb	r3, r3
   1c768:	2b00      	cmp	r3, #0
   1c76a:	d00d      	beq.n	1c788 <k_heap_aligned_alloc+0x184>
   1c76c:	2381      	movs	r3, #129	; 0x81
   1c76e:	4a20      	ldr	r2, [pc, #128]	; (1c7f0 <k_heap_aligned_alloc+0x1ec>)
   1c770:	4920      	ldr	r1, [pc, #128]	; (1c7f4 <k_heap_aligned_alloc+0x1f0>)
   1c772:	4821      	ldr	r0, [pc, #132]	; (1c7f8 <k_heap_aligned_alloc+0x1f4>)
   1c774:	f004 fc78 	bl	21068 <printk>
   1c778:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1c77a:	4820      	ldr	r0, [pc, #128]	; (1c7fc <k_heap_aligned_alloc+0x1f8>)
   1c77c:	f004 fc74 	bl	21068 <printk>
   1c780:	2181      	movs	r1, #129	; 0x81
   1c782:	481b      	ldr	r0, [pc, #108]	; (1c7f0 <k_heap_aligned_alloc+0x1ec>)
   1c784:	f005 fd1d 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c788:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1c78a:	f000 fc95 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1c78e:	697b      	ldr	r3, [r7, #20]
   1c790:	623b      	str	r3, [r7, #32]
	while (ret == NULL) {
   1c792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1c794:	2b00      	cmp	r3, #0
   1c796:	d097      	beq.n	1c6c8 <k_heap_aligned_alloc+0xc4>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
   1c798:	68fb      	ldr	r3, [r7, #12]
   1c79a:	3314      	adds	r3, #20
   1c79c:	62bb      	str	r3, [r7, #40]	; 0x28
   1c79e:	6a3b      	ldr	r3, [r7, #32]
   1c7a0:	61fb      	str	r3, [r7, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c7a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1c7a4:	f000 fc6c 	bl	1d080 <z_spin_unlock_valid>
   1c7a8:	4603      	mov	r3, r0
   1c7aa:	f083 0301 	eor.w	r3, r3, #1
   1c7ae:	b2db      	uxtb	r3, r3
   1c7b0:	2b00      	cmp	r3, #0
   1c7b2:	d00d      	beq.n	1c7d0 <k_heap_aligned_alloc+0x1cc>
   1c7b4:	23ac      	movs	r3, #172	; 0xac
   1c7b6:	4a0e      	ldr	r2, [pc, #56]	; (1c7f0 <k_heap_aligned_alloc+0x1ec>)
   1c7b8:	4914      	ldr	r1, [pc, #80]	; (1c80c <k_heap_aligned_alloc+0x208>)
   1c7ba:	480f      	ldr	r0, [pc, #60]	; (1c7f8 <k_heap_aligned_alloc+0x1f4>)
   1c7bc:	f004 fc54 	bl	21068 <printk>
   1c7c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1c7c2:	4813      	ldr	r0, [pc, #76]	; (1c810 <k_heap_aligned_alloc+0x20c>)
   1c7c4:	f004 fc50 	bl	21068 <printk>
   1c7c8:	21ac      	movs	r1, #172	; 0xac
   1c7ca:	4809      	ldr	r0, [pc, #36]	; (1c7f0 <k_heap_aligned_alloc+0x1ec>)
   1c7cc:	f005 fcf9 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1c7d0:	69fb      	ldr	r3, [r7, #28]
   1c7d2:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   1c7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c7d6:	f383 8811 	msr	BASEPRI, r3
   1c7da:	f3bf 8f6f 	isb	sy
}
   1c7de:	bf00      	nop
}
   1c7e0:	bf00      	nop
	return ret;
   1c7e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
   1c7e4:	4618      	mov	r0, r3
   1c7e6:	3764      	adds	r7, #100	; 0x64
   1c7e8:	46bd      	mov	sp, r7
   1c7ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1c7ee:	bf00      	nop
   1c7f0:	0002bd00 	.word	0x0002bd00
   1c7f4:	0002bd28 	.word	0x0002bd28
   1c7f8:	0002bcc0 	.word	0x0002bcc0
   1c7fc:	0002bd40 	.word	0x0002bd40
   1c800:	0002bc84 	.word	0x0002bc84
   1c804:	0002bd58 	.word	0x0002bd58
   1c808:	0002bda0 	.word	0x0002bda0
   1c80c:	0002bda4 	.word	0x0002bda4
   1c810:	0002bdbc 	.word	0x0002bdbc

0001c814 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1c814:	b580      	push	{r7, lr}
   1c816:	b08a      	sub	sp, #40	; 0x28
   1c818:	af00      	add	r7, sp, #0
   1c81a:	6078      	str	r0, [r7, #4]
   1c81c:	6039      	str	r1, [r7, #0]
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1c81e:	687b      	ldr	r3, [r7, #4]
   1c820:	3314      	adds	r3, #20
   1c822:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   1c824:	f04f 0320 	mov.w	r3, #32
   1c828:	f3ef 8211 	mrs	r2, BASEPRI
   1c82c:	f383 8811 	msr	BASEPRI, r3
   1c830:	f3bf 8f6f 	isb	sy
   1c834:	623a      	str	r2, [r7, #32]
   1c836:	61fb      	str	r3, [r7, #28]
	return key;
   1c838:	6a3b      	ldr	r3, [r7, #32]
	k.key = arch_irq_lock();
   1c83a:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c83c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1c83e:	f000 fc03 	bl	1d048 <z_spin_lock_valid>
   1c842:	4603      	mov	r3, r0
   1c844:	f083 0301 	eor.w	r3, r3, #1
   1c848:	b2db      	uxtb	r3, r3
   1c84a:	2b00      	cmp	r3, #0
   1c84c:	d00d      	beq.n	1c86a <k_heap_free+0x56>
   1c84e:	2381      	movs	r3, #129	; 0x81
   1c850:	4a27      	ldr	r2, [pc, #156]	; (1c8f0 <k_heap_free+0xdc>)
   1c852:	4928      	ldr	r1, [pc, #160]	; (1c8f4 <k_heap_free+0xe0>)
   1c854:	4828      	ldr	r0, [pc, #160]	; (1c8f8 <k_heap_free+0xe4>)
   1c856:	f004 fc07 	bl	21068 <printk>
   1c85a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1c85c:	4827      	ldr	r0, [pc, #156]	; (1c8fc <k_heap_free+0xe8>)
   1c85e:	f004 fc03 	bl	21068 <printk>
   1c862:	2181      	movs	r1, #129	; 0x81
   1c864:	4822      	ldr	r0, [pc, #136]	; (1c8f0 <k_heap_free+0xdc>)
   1c866:	f005 fcac 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c86a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1c86c:	f000 fc24 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1c870:	68bb      	ldr	r3, [r7, #8]
   1c872:	613b      	str	r3, [r7, #16]

	sys_heap_free(&h->heap, mem);
   1c874:	687b      	ldr	r3, [r7, #4]
   1c876:	6839      	ldr	r1, [r7, #0]
   1c878:	4618      	mov	r0, r3
   1c87a:	f7f4 fd07 	bl	1128c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1c87e:	687b      	ldr	r3, [r7, #4]
   1c880:	330c      	adds	r3, #12
   1c882:	4618      	mov	r0, r3
   1c884:	f00c f983 	bl	28b8e <z_unpend_all>
   1c888:	4603      	mov	r3, r0
   1c88a:	2b00      	cmp	r3, #0
   1c88c:	d006      	beq.n	1c89c <k_heap_free+0x88>
		z_reschedule(&h->lock, key);
   1c88e:	687b      	ldr	r3, [r7, #4]
   1c890:	3314      	adds	r3, #20
   1c892:	6939      	ldr	r1, [r7, #16]
   1c894:	4618      	mov	r0, r3
   1c896:	f002 fe2f 	bl	1f4f8 <z_reschedule>
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1c89a:	e024      	b.n	1c8e6 <k_heap_free+0xd2>
		k_spin_unlock(&h->lock, key);
   1c89c:	687b      	ldr	r3, [r7, #4]
   1c89e:	3314      	adds	r3, #20
   1c8a0:	61bb      	str	r3, [r7, #24]
   1c8a2:	693b      	ldr	r3, [r7, #16]
   1c8a4:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c8a6:	69b8      	ldr	r0, [r7, #24]
   1c8a8:	f000 fbea 	bl	1d080 <z_spin_unlock_valid>
   1c8ac:	4603      	mov	r3, r0
   1c8ae:	f083 0301 	eor.w	r3, r3, #1
   1c8b2:	b2db      	uxtb	r3, r3
   1c8b4:	2b00      	cmp	r3, #0
   1c8b6:	d00d      	beq.n	1c8d4 <k_heap_free+0xc0>
   1c8b8:	23ac      	movs	r3, #172	; 0xac
   1c8ba:	4a0d      	ldr	r2, [pc, #52]	; (1c8f0 <k_heap_free+0xdc>)
   1c8bc:	4910      	ldr	r1, [pc, #64]	; (1c900 <k_heap_free+0xec>)
   1c8be:	480e      	ldr	r0, [pc, #56]	; (1c8f8 <k_heap_free+0xe4>)
   1c8c0:	f004 fbd2 	bl	21068 <printk>
   1c8c4:	69b9      	ldr	r1, [r7, #24]
   1c8c6:	480f      	ldr	r0, [pc, #60]	; (1c904 <k_heap_free+0xf0>)
   1c8c8:	f004 fbce 	bl	21068 <printk>
   1c8cc:	21ac      	movs	r1, #172	; 0xac
   1c8ce:	4808      	ldr	r0, [pc, #32]	; (1c8f0 <k_heap_free+0xdc>)
   1c8d0:	f005 fc77 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1c8d4:	68fb      	ldr	r3, [r7, #12]
   1c8d6:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   1c8d8:	697b      	ldr	r3, [r7, #20]
   1c8da:	f383 8811 	msr	BASEPRI, r3
   1c8de:	f3bf 8f6f 	isb	sy
}
   1c8e2:	bf00      	nop
}
   1c8e4:	bf00      	nop
}
   1c8e6:	bf00      	nop
   1c8e8:	3728      	adds	r7, #40	; 0x28
   1c8ea:	46bd      	mov	sp, r7
   1c8ec:	bd80      	pop	{r7, pc}
   1c8ee:	bf00      	nop
   1c8f0:	0002bd00 	.word	0x0002bd00
   1c8f4:	0002bd28 	.word	0x0002bd28
   1c8f8:	0002bcc0 	.word	0x0002bcc0
   1c8fc:	0002bd40 	.word	0x0002bd40
   1c900:	0002bda4 	.word	0x0002bda4
   1c904:	0002bdbc 	.word	0x0002bdbc

0001c908 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1c908:	b580      	push	{r7, lr}
   1c90a:	b084      	sub	sp, #16
   1c90c:	af00      	add	r7, sp, #0
   1c90e:	6078      	str	r0, [r7, #4]
	int rc = 0;
   1c910:	2300      	movs	r3, #0
   1c912:	60fb      	str	r3, [r7, #12]
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1c914:	4b18      	ldr	r3, [pc, #96]	; (1c978 <init_mem_slab_module+0x70>)
   1c916:	60bb      	str	r3, [r7, #8]
   1c918:	e00c      	b.n	1c934 <init_mem_slab_module+0x2c>
		rc = create_free_list(slab);
   1c91a:	68b8      	ldr	r0, [r7, #8]
   1c91c:	f00b f809 	bl	27932 <create_free_list>
   1c920:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
   1c922:	68fb      	ldr	r3, [r7, #12]
   1c924:	2b00      	cmp	r3, #0
   1c926:	db20      	blt.n	1c96a <init_mem_slab_module+0x62>
			goto out;
		}
		z_object_init(slab);
   1c928:	68b8      	ldr	r0, [r7, #8]
   1c92a:	f00a ffed 	bl	27908 <z_object_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1c92e:	68bb      	ldr	r3, [r7, #8]
   1c930:	3320      	adds	r3, #32
   1c932:	60bb      	str	r3, [r7, #8]
   1c934:	68bb      	ldr	r3, [r7, #8]
   1c936:	4a11      	ldr	r2, [pc, #68]	; (1c97c <init_mem_slab_module+0x74>)
   1c938:	4293      	cmp	r3, r2
   1c93a:	d90c      	bls.n	1c956 <init_mem_slab_module+0x4e>
   1c93c:	233c      	movs	r3, #60	; 0x3c
   1c93e:	4a10      	ldr	r2, [pc, #64]	; (1c980 <init_mem_slab_module+0x78>)
   1c940:	4910      	ldr	r1, [pc, #64]	; (1c984 <init_mem_slab_module+0x7c>)
   1c942:	4811      	ldr	r0, [pc, #68]	; (1c988 <init_mem_slab_module+0x80>)
   1c944:	f004 fb90 	bl	21068 <printk>
   1c948:	4810      	ldr	r0, [pc, #64]	; (1c98c <init_mem_slab_module+0x84>)
   1c94a:	f004 fb8d 	bl	21068 <printk>
   1c94e:	213c      	movs	r1, #60	; 0x3c
   1c950:	480b      	ldr	r0, [pc, #44]	; (1c980 <init_mem_slab_module+0x78>)
   1c952:	f005 fc36 	bl	221c2 <assert_post_action>
   1c956:	68bb      	ldr	r3, [r7, #8]
   1c958:	4a08      	ldr	r2, [pc, #32]	; (1c97c <init_mem_slab_module+0x74>)
   1c95a:	4293      	cmp	r3, r2
   1c95c:	bf34      	ite	cc
   1c95e:	2301      	movcc	r3, #1
   1c960:	2300      	movcs	r3, #0
   1c962:	b2db      	uxtb	r3, r3
   1c964:	2b00      	cmp	r3, #0
   1c966:	d1d8      	bne.n	1c91a <init_mem_slab_module+0x12>
	}

out:
   1c968:	e000      	b.n	1c96c <init_mem_slab_module+0x64>
			goto out;
   1c96a:	bf00      	nop
	return rc;
   1c96c:	68fb      	ldr	r3, [r7, #12]
}
   1c96e:	4618      	mov	r0, r3
   1c970:	3710      	adds	r7, #16
   1c972:	46bd      	mov	sp, r7
   1c974:	bd80      	pop	{r7, pc}
   1c976:	bf00      	nop
   1c978:	20014584 	.word	0x20014584
   1c97c:	200145a4 	.word	0x200145a4
   1c980:	0002bdd4 	.word	0x0002bdd4
   1c984:	0002bdfc 	.word	0x0002bdfc
   1c988:	0002be1c 	.word	0x0002be1c
   1c98c:	0002be3c 	.word	0x0002be3c

0001c990 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1c990:	b580      	push	{r7, lr}
   1c992:	b090      	sub	sp, #64	; 0x40
   1c994:	af02      	add	r7, sp, #8
   1c996:	60f8      	str	r0, [r7, #12]
   1c998:	60b9      	str	r1, [r7, #8]
   1c99a:	e9c7 2300 	strd	r2, r3, [r7]
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1c99e:	68fb      	ldr	r3, [r7, #12]
   1c9a0:	3308      	adds	r3, #8
   1c9a2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm__ volatile(
   1c9a4:	f04f 0320 	mov.w	r3, #32
   1c9a8:	f3ef 8211 	mrs	r2, BASEPRI
   1c9ac:	f383 8811 	msr	BASEPRI, r3
   1c9b0:	f3bf 8f6f 	isb	sy
   1c9b4:	62fa      	str	r2, [r7, #44]	; 0x2c
   1c9b6:	62bb      	str	r3, [r7, #40]	; 0x28
	return key;
   1c9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	k.key = arch_irq_lock();
   1c9ba:	617b      	str	r3, [r7, #20]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c9bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1c9be:	f000 fb43 	bl	1d048 <z_spin_lock_valid>
   1c9c2:	4603      	mov	r3, r0
   1c9c4:	f083 0301 	eor.w	r3, r3, #1
   1c9c8:	b2db      	uxtb	r3, r3
   1c9ca:	2b00      	cmp	r3, #0
   1c9cc:	d00d      	beq.n	1c9ea <k_mem_slab_alloc+0x5a>
   1c9ce:	2381      	movs	r3, #129	; 0x81
   1c9d0:	4a3c      	ldr	r2, [pc, #240]	; (1cac4 <k_mem_slab_alloc+0x134>)
   1c9d2:	493d      	ldr	r1, [pc, #244]	; (1cac8 <k_mem_slab_alloc+0x138>)
   1c9d4:	483d      	ldr	r0, [pc, #244]	; (1cacc <k_mem_slab_alloc+0x13c>)
   1c9d6:	f004 fb47 	bl	21068 <printk>
   1c9da:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1c9dc:	483c      	ldr	r0, [pc, #240]	; (1cad0 <k_mem_slab_alloc+0x140>)
   1c9de:	f004 fb43 	bl	21068 <printk>
   1c9e2:	2181      	movs	r1, #129	; 0x81
   1c9e4:	4837      	ldr	r0, [pc, #220]	; (1cac4 <k_mem_slab_alloc+0x134>)
   1c9e6:	f005 fbec 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1c9ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1c9ec:	f000 fb64 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1c9f0:	697b      	ldr	r3, [r7, #20]
   1c9f2:	61fb      	str	r3, [r7, #28]
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1c9f4:	68fb      	ldr	r3, [r7, #12]
   1c9f6:	699b      	ldr	r3, [r3, #24]
   1c9f8:	2b00      	cmp	r3, #0
   1c9fa:	d010      	beq.n	1ca1e <k_mem_slab_alloc+0x8e>
		/* take a free block */
		*mem = slab->free_list;
   1c9fc:	68fb      	ldr	r3, [r7, #12]
   1c9fe:	699a      	ldr	r2, [r3, #24]
   1ca00:	68bb      	ldr	r3, [r7, #8]
   1ca02:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)(slab->free_list);
   1ca04:	68fb      	ldr	r3, [r7, #12]
   1ca06:	699b      	ldr	r3, [r3, #24]
   1ca08:	681a      	ldr	r2, [r3, #0]
   1ca0a:	68fb      	ldr	r3, [r7, #12]
   1ca0c:	619a      	str	r2, [r3, #24]
		slab->num_used++;
   1ca0e:	68fb      	ldr	r3, [r7, #12]
   1ca10:	69db      	ldr	r3, [r3, #28]
   1ca12:	1c5a      	adds	r2, r3, #1
   1ca14:	68fb      	ldr	r3, [r7, #12]
   1ca16:	61da      	str	r2, [r3, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1ca18:	2300      	movs	r3, #0
   1ca1a:	637b      	str	r3, [r7, #52]	; 0x34
   1ca1c:	e027      	b.n	1ca6e <k_mem_slab_alloc+0xde>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1ca1e:	e9d7 2300 	ldrd	r2, r3, [r7]
   1ca22:	f04f 0000 	mov.w	r0, #0
   1ca26:	f04f 0100 	mov.w	r1, #0
   1ca2a:	428b      	cmp	r3, r1
   1ca2c:	bf08      	it	eq
   1ca2e:	4282      	cmpeq	r2, r0
   1ca30:	d106      	bne.n	1ca40 <k_mem_slab_alloc+0xb0>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
   1ca32:	68bb      	ldr	r3, [r7, #8]
   1ca34:	2200      	movs	r2, #0
   1ca36:	601a      	str	r2, [r3, #0]
		result = -ENOMEM;
   1ca38:	f06f 030b 	mvn.w	r3, #11
   1ca3c:	637b      	str	r3, [r7, #52]	; 0x34
   1ca3e:	e016      	b.n	1ca6e <k_mem_slab_alloc+0xde>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1ca40:	68fb      	ldr	r3, [r7, #12]
   1ca42:	f103 0008 	add.w	r0, r3, #8
   1ca46:	68f9      	ldr	r1, [r7, #12]
   1ca48:	e9d7 2300 	ldrd	r2, r3, [r7]
   1ca4c:	e9cd 2300 	strd	r2, r3, [sp]
   1ca50:	460a      	mov	r2, r1
   1ca52:	69f9      	ldr	r1, [r7, #28]
   1ca54:	f002 fa7e 	bl	1ef54 <z_pend_curr>
   1ca58:	6378      	str	r0, [r7, #52]	; 0x34
		if (result == 0) {
   1ca5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ca5c:	2b00      	cmp	r3, #0
   1ca5e:	d104      	bne.n	1ca6a <k_mem_slab_alloc+0xda>
			*mem = _current->base.swap_data;
   1ca60:	4b1c      	ldr	r3, [pc, #112]	; (1cad4 <k_mem_slab_alloc+0x144>)
   1ca62:	689b      	ldr	r3, [r3, #8]
   1ca64:	695a      	ldr	r2, [r3, #20]
   1ca66:	68bb      	ldr	r3, [r7, #8]
   1ca68:	601a      	str	r2, [r3, #0]
		}

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

		return result;
   1ca6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ca6c:	e025      	b.n	1caba <k_mem_slab_alloc+0x12a>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);
   1ca6e:	68fb      	ldr	r3, [r7, #12]
   1ca70:	3308      	adds	r3, #8
   1ca72:	627b      	str	r3, [r7, #36]	; 0x24
   1ca74:	69fb      	ldr	r3, [r7, #28]
   1ca76:	61bb      	str	r3, [r7, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ca78:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1ca7a:	f000 fb01 	bl	1d080 <z_spin_unlock_valid>
   1ca7e:	4603      	mov	r3, r0
   1ca80:	f083 0301 	eor.w	r3, r3, #1
   1ca84:	b2db      	uxtb	r3, r3
   1ca86:	2b00      	cmp	r3, #0
   1ca88:	d00d      	beq.n	1caa6 <k_mem_slab_alloc+0x116>
   1ca8a:	23ac      	movs	r3, #172	; 0xac
   1ca8c:	4a0d      	ldr	r2, [pc, #52]	; (1cac4 <k_mem_slab_alloc+0x134>)
   1ca8e:	4912      	ldr	r1, [pc, #72]	; (1cad8 <k_mem_slab_alloc+0x148>)
   1ca90:	480e      	ldr	r0, [pc, #56]	; (1cacc <k_mem_slab_alloc+0x13c>)
   1ca92:	f004 fae9 	bl	21068 <printk>
   1ca96:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1ca98:	4810      	ldr	r0, [pc, #64]	; (1cadc <k_mem_slab_alloc+0x14c>)
   1ca9a:	f004 fae5 	bl	21068 <printk>
   1ca9e:	21ac      	movs	r1, #172	; 0xac
   1caa0:	4808      	ldr	r0, [pc, #32]	; (1cac4 <k_mem_slab_alloc+0x134>)
   1caa2:	f005 fb8e 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1caa6:	69bb      	ldr	r3, [r7, #24]
   1caa8:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   1caaa:	6a3b      	ldr	r3, [r7, #32]
   1caac:	f383 8811 	msr	BASEPRI, r3
   1cab0:	f3bf 8f6f 	isb	sy
}
   1cab4:	bf00      	nop
}
   1cab6:	bf00      	nop

	return result;
   1cab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   1caba:	4618      	mov	r0, r3
   1cabc:	3738      	adds	r7, #56	; 0x38
   1cabe:	46bd      	mov	sp, r7
   1cac0:	bd80      	pop	{r7, pc}
   1cac2:	bf00      	nop
   1cac4:	0002be5c 	.word	0x0002be5c
   1cac8:	0002be84 	.word	0x0002be84
   1cacc:	0002be1c 	.word	0x0002be1c
   1cad0:	0002be9c 	.word	0x0002be9c
   1cad4:	2001517c 	.word	0x2001517c
   1cad8:	0002beb4 	.word	0x0002beb4
   1cadc:	0002becc 	.word	0x0002becc

0001cae0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1cae0:	b580      	push	{r7, lr}
   1cae2:	b090      	sub	sp, #64	; 0x40
   1cae4:	af00      	add	r7, sp, #0
   1cae6:	6078      	str	r0, [r7, #4]
   1cae8:	6039      	str	r1, [r7, #0]
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1caea:	687b      	ldr	r3, [r7, #4]
   1caec:	3308      	adds	r3, #8
   1caee:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
   1caf0:	f04f 0320 	mov.w	r3, #32
   1caf4:	f3ef 8211 	mrs	r2, BASEPRI
   1caf8:	f383 8811 	msr	BASEPRI, r3
   1cafc:	f3bf 8f6f 	isb	sy
   1cb00:	637a      	str	r2, [r7, #52]	; 0x34
   1cb02:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
   1cb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	k.key = arch_irq_lock();
   1cb06:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1cb08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1cb0a:	f000 fa9d 	bl	1d048 <z_spin_lock_valid>
   1cb0e:	4603      	mov	r3, r0
   1cb10:	f083 0301 	eor.w	r3, r3, #1
   1cb14:	b2db      	uxtb	r3, r3
   1cb16:	2b00      	cmp	r3, #0
   1cb18:	d00d      	beq.n	1cb36 <k_mem_slab_free+0x56>
   1cb1a:	2381      	movs	r3, #129	; 0x81
   1cb1c:	4a38      	ldr	r2, [pc, #224]	; (1cc00 <k_mem_slab_free+0x120>)
   1cb1e:	4939      	ldr	r1, [pc, #228]	; (1cc04 <k_mem_slab_free+0x124>)
   1cb20:	4839      	ldr	r0, [pc, #228]	; (1cc08 <k_mem_slab_free+0x128>)
   1cb22:	f004 faa1 	bl	21068 <printk>
   1cb26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1cb28:	4838      	ldr	r0, [pc, #224]	; (1cc0c <k_mem_slab_free+0x12c>)
   1cb2a:	f004 fa9d 	bl	21068 <printk>
   1cb2e:	2181      	movs	r1, #129	; 0x81
   1cb30:	4833      	ldr	r0, [pc, #204]	; (1cc00 <k_mem_slab_free+0x120>)
   1cb32:	f005 fb46 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1cb36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1cb38:	f000 fabe 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1cb3c:	68bb      	ldr	r3, [r7, #8]
   1cb3e:	613b      	str	r3, [r7, #16]

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   1cb40:	687b      	ldr	r3, [r7, #4]
   1cb42:	699b      	ldr	r3, [r3, #24]
   1cb44:	2b00      	cmp	r3, #0
   1cb46:	d124      	bne.n	1cb92 <k_mem_slab_free+0xb2>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1cb48:	687b      	ldr	r3, [r7, #4]
   1cb4a:	4618      	mov	r0, r3
   1cb4c:	f002 fac0 	bl	1f0d0 <z_unpend_first_thread>
   1cb50:	63f8      	str	r0, [r7, #60]	; 0x3c

		if (pending_thread != NULL) {
   1cb52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1cb54:	2b00      	cmp	r3, #0
   1cb56:	d01c      	beq.n	1cb92 <k_mem_slab_free+0xb2>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1cb58:	683b      	ldr	r3, [r7, #0]
   1cb5a:	681b      	ldr	r3, [r3, #0]
   1cb5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1cb5e:	62fa      	str	r2, [r7, #44]	; 0x2c
   1cb60:	2200      	movs	r2, #0
   1cb62:	62ba      	str	r2, [r7, #40]	; 0x28
   1cb64:	627b      	str	r3, [r7, #36]	; 0x24
   1cb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1cb68:	623b      	str	r3, [r7, #32]
   1cb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cb6c:	61fb      	str	r3, [r7, #28]

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1cb6e:	6a3b      	ldr	r3, [r7, #32]
   1cb70:	69fa      	ldr	r2, [r7, #28]
   1cb72:	679a      	str	r2, [r3, #120]	; 0x78
}
   1cb74:	bf00      	nop
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1cb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1cb78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1cb7a:	615a      	str	r2, [r3, #20]
}
   1cb7c:	bf00      	nop
			z_ready_thread(pending_thread);
   1cb7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1cb80:	f001 fe10 	bl	1e7a4 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1cb84:	687b      	ldr	r3, [r7, #4]
   1cb86:	3308      	adds	r3, #8
   1cb88:	6939      	ldr	r1, [r7, #16]
   1cb8a:	4618      	mov	r0, r3
   1cb8c:	f002 fcb4 	bl	1f4f8 <z_reschedule>
   1cb90:	e032      	b.n	1cbf8 <k_mem_slab_free+0x118>
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   1cb92:	683b      	ldr	r3, [r7, #0]
   1cb94:	681b      	ldr	r3, [r3, #0]
   1cb96:	687a      	ldr	r2, [r7, #4]
   1cb98:	6992      	ldr	r2, [r2, #24]
   1cb9a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1cb9c:	683b      	ldr	r3, [r7, #0]
   1cb9e:	681a      	ldr	r2, [r3, #0]
   1cba0:	687b      	ldr	r3, [r7, #4]
   1cba2:	619a      	str	r2, [r3, #24]
	slab->num_used--;
   1cba4:	687b      	ldr	r3, [r7, #4]
   1cba6:	69db      	ldr	r3, [r3, #28]
   1cba8:	1e5a      	subs	r2, r3, #1
   1cbaa:	687b      	ldr	r3, [r7, #4]
   1cbac:	61da      	str	r2, [r3, #28]

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
   1cbae:	687b      	ldr	r3, [r7, #4]
   1cbb0:	3308      	adds	r3, #8
   1cbb2:	61bb      	str	r3, [r7, #24]
   1cbb4:	693b      	ldr	r3, [r7, #16]
   1cbb6:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1cbb8:	69b8      	ldr	r0, [r7, #24]
   1cbba:	f000 fa61 	bl	1d080 <z_spin_unlock_valid>
   1cbbe:	4603      	mov	r3, r0
   1cbc0:	f083 0301 	eor.w	r3, r3, #1
   1cbc4:	b2db      	uxtb	r3, r3
   1cbc6:	2b00      	cmp	r3, #0
   1cbc8:	d00d      	beq.n	1cbe6 <k_mem_slab_free+0x106>
   1cbca:	23ac      	movs	r3, #172	; 0xac
   1cbcc:	4a0c      	ldr	r2, [pc, #48]	; (1cc00 <k_mem_slab_free+0x120>)
   1cbce:	4910      	ldr	r1, [pc, #64]	; (1cc10 <k_mem_slab_free+0x130>)
   1cbd0:	480d      	ldr	r0, [pc, #52]	; (1cc08 <k_mem_slab_free+0x128>)
   1cbd2:	f004 fa49 	bl	21068 <printk>
   1cbd6:	69b9      	ldr	r1, [r7, #24]
   1cbd8:	480e      	ldr	r0, [pc, #56]	; (1cc14 <k_mem_slab_free+0x134>)
   1cbda:	f004 fa45 	bl	21068 <printk>
   1cbde:	21ac      	movs	r1, #172	; 0xac
   1cbe0:	4807      	ldr	r0, [pc, #28]	; (1cc00 <k_mem_slab_free+0x120>)
   1cbe2:	f005 faee 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1cbe6:	68fb      	ldr	r3, [r7, #12]
   1cbe8:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   1cbea:	697b      	ldr	r3, [r7, #20]
   1cbec:	f383 8811 	msr	BASEPRI, r3
   1cbf0:	f3bf 8f6f 	isb	sy
}
   1cbf4:	bf00      	nop
}
   1cbf6:	bf00      	nop
}
   1cbf8:	3740      	adds	r7, #64	; 0x40
   1cbfa:	46bd      	mov	sp, r7
   1cbfc:	bd80      	pop	{r7, pc}
   1cbfe:	bf00      	nop
   1cc00:	0002be5c 	.word	0x0002be5c
   1cc04:	0002be84 	.word	0x0002be84
   1cc08:	0002be1c 	.word	0x0002be1c
   1cc0c:	0002be9c 	.word	0x0002be9c
   1cc10:	0002beb4 	.word	0x0002beb4
   1cc14:	0002becc 	.word	0x0002becc

0001cc18 <z_add_thread_timeout>:
}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
   1cc18:	b580      	push	{r7, lr}
   1cc1a:	b084      	sub	sp, #16
   1cc1c:	af00      	add	r7, sp, #0
   1cc1e:	60f8      	str	r0, [r7, #12]
   1cc20:	e9c7 2300 	strd	r2, r3, [r7]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1cc24:	68fb      	ldr	r3, [r7, #12]
   1cc26:	f103 0018 	add.w	r0, r3, #24
   1cc2a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1cc2e:	4903      	ldr	r1, [pc, #12]	; (1cc3c <z_add_thread_timeout+0x24>)
   1cc30:	f003 fa8e 	bl	20150 <z_add_timeout>
}
   1cc34:	bf00      	nop
   1cc36:	3710      	adds	r7, #16
   1cc38:	46bd      	mov	sp, r7
   1cc3a:	bd80      	pop	{r7, pc}
   1cc3c:	0001ee19 	.word	0x0001ee19

0001cc40 <z_is_idle_thread_entry>:
{
	(void) z_reschedule_irqlock(arch_irq_lock());
}

static inline bool z_is_idle_thread_entry(void *entry_point)
{
   1cc40:	b480      	push	{r7}
   1cc42:	b083      	sub	sp, #12
   1cc44:	af00      	add	r7, sp, #0
   1cc46:	6078      	str	r0, [r7, #4]
	return entry_point == idle;
   1cc48:	687b      	ldr	r3, [r7, #4]
   1cc4a:	4a05      	ldr	r2, [pc, #20]	; (1cc60 <z_is_idle_thread_entry+0x20>)
   1cc4c:	4293      	cmp	r3, r2
   1cc4e:	bf0c      	ite	eq
   1cc50:	2301      	moveq	r3, #1
   1cc52:	2300      	movne	r3, #0
   1cc54:	b2db      	uxtb	r3, r3
}
   1cc56:	4618      	mov	r0, r3
   1cc58:	370c      	adds	r7, #12
   1cc5a:	46bd      	mov	sp, r7
   1cc5c:	bc80      	pop	{r7}
   1cc5e:	4770      	bx	lr
   1cc60:	0001d111 	.word	0x0001d111

0001cc64 <log_const_source_id>:
{
   1cc64:	b480      	push	{r7}
   1cc66:	b083      	sub	sp, #12
   1cc68:	af00      	add	r7, sp, #0
   1cc6a:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1cc6c:	687b      	ldr	r3, [r7, #4]
   1cc6e:	4a04      	ldr	r2, [pc, #16]	; (1cc80 <log_const_source_id+0x1c>)
   1cc70:	1a9b      	subs	r3, r3, r2
   1cc72:	08db      	lsrs	r3, r3, #3
}
   1cc74:	4618      	mov	r0, r3
   1cc76:	370c      	adds	r7, #12
   1cc78:	46bd      	mov	sp, r7
   1cc7a:	bc80      	pop	{r7}
   1cc7c:	4770      	bx	lr
   1cc7e:	bf00      	nop
   1cc80:	00029354 	.word	0x00029354

0001cc84 <setup_thread_stack>:
#endif /* CONFIG_STACK_GROWS_UP */
#endif /* CONFIG_STACK_POINTER_RANDOM */

static char *setup_thread_stack(struct k_thread *new_thread,
				k_thread_stack_t *stack, size_t stack_size)
{
   1cc84:	b580      	push	{r7, lr}
   1cc86:	b09a      	sub	sp, #104	; 0x68
   1cc88:	af06      	add	r7, sp, #24
   1cc8a:	60f8      	str	r0, [r7, #12]
   1cc8c:	60b9      	str	r1, [r7, #8]
   1cc8e:	607a      	str	r2, [r7, #4]
	size_t stack_obj_size, stack_buf_size;
	char *stack_ptr, *stack_buf_start;
	size_t delta = 0;
   1cc90:	2300      	movs	r3, #0
   1cc92:	64fb      	str	r3, [r7, #76]	; 0x4c
		stack_buf_size = stack_obj_size - K_THREAD_STACK_RESERVED;
	} else
#endif
	{
		/* Object cannot host a user mode thread */
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1cc94:	687b      	ldr	r3, [r7, #4]
   1cc96:	3307      	adds	r3, #7
   1cc98:	f023 0307 	bic.w	r3, r3, #7
   1cc9c:	64bb      	str	r3, [r7, #72]	; 0x48
		stack_buf_start = Z_KERNEL_STACK_BUFFER(stack);
   1cc9e:	68b8      	ldr	r0, [r7, #8]
   1cca0:	f00a fff0 	bl	27c84 <Z_KERNEL_STACK_BUFFER>
   1cca4:	6478      	str	r0, [r7, #68]	; 0x44
		stack_buf_size = stack_obj_size - K_KERNEL_STACK_RESERVED;
   1cca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1cca8:	643b      	str	r3, [r7, #64]	; 0x40
	}

	/* Initial stack pointer at the high end of the stack object, may
	 * be reduced later in this function by TLS or random offset
	 */
	stack_ptr = (char *)stack + stack_obj_size;
   1ccaa:	68ba      	ldr	r2, [r7, #8]
   1ccac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1ccae:	4413      	add	r3, r2
   1ccb0:	63fb      	str	r3, [r7, #60]	; 0x3c

	LOG_DBG("stack %p for thread %p: obj_size=%zu buf_start=%p "
   1ccb2:	2303      	movs	r3, #3
   1ccb4:	2b03      	cmp	r3, #3
   1ccb6:	d953      	bls.n	1cd60 <setup_thread_stack+0xdc>
   1ccb8:	f00a feb9 	bl	27a2e <k_is_user_context>
   1ccbc:	4603      	mov	r3, r0
   1ccbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
   1ccc2:	2300      	movs	r3, #0
   1ccc4:	637b      	str	r3, [r7, #52]	; 0x34
   1ccc6:	2303      	movs	r3, #3
   1ccc8:	2b00      	cmp	r3, #0
   1ccca:	d007      	beq.n	1ccdc <setup_thread_stack+0x58>
   1cccc:	4b31      	ldr	r3, [pc, #196]	; (1cd94 <setup_thread_stack+0x110>)
   1ccce:	681b      	ldr	r3, [r3, #0]
   1ccd0:	4618      	mov	r0, r3
   1ccd2:	f7ff ffc7 	bl	1cc64 <log_const_source_id>
   1ccd6:	4603      	mov	r3, r0
   1ccd8:	b29b      	uxth	r3, r3
   1ccda:	e000      	b.n	1ccde <setup_thread_stack+0x5a>
   1ccdc:	2300      	movs	r3, #0
   1ccde:	873b      	strh	r3, [r7, #56]	; 0x38
   1cce0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   1cce4:	2204      	movs	r2, #4
   1cce6:	f362 0302 	bfi	r3, r2, #0, #3
   1ccea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   1ccee:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   1ccf2:	f36f 03c5 	bfc	r3, #3, #3
   1ccf6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   1ccfa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
   1ccfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1cd00:	b29a      	uxth	r2, r3
   1cd02:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   1cd04:	f362 138f 	bfi	r3, r2, #6, #10
   1cd08:	863b      	strh	r3, [r7, #48]	; 0x30
   1cd0a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
   1cd0e:	2b00      	cmp	r3, #0
   1cd10:	d010      	beq.n	1cd34 <setup_thread_stack+0xb0>
   1cd12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1cd14:	9304      	str	r3, [sp, #16]
   1cd16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1cd18:	9303      	str	r3, [sp, #12]
   1cd1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1cd1c:	9302      	str	r3, [sp, #8]
   1cd1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1cd20:	9301      	str	r3, [sp, #4]
   1cd22:	68fb      	ldr	r3, [r7, #12]
   1cd24:	9300      	str	r3, [sp, #0]
   1cd26:	68bb      	ldr	r3, [r7, #8]
   1cd28:	4a1b      	ldr	r2, [pc, #108]	; (1cd98 <setup_thread_stack+0x114>)
   1cd2a:	491c      	ldr	r1, [pc, #112]	; (1cd9c <setup_thread_stack+0x118>)
   1cd2c:	8e38      	ldrh	r0, [r7, #48]	; 0x30
   1cd2e:	f7f6 fa0f 	bl	13150 <log_from_user>
   1cd32:	e016      	b.n	1cd62 <setup_thread_stack+0xde>
   1cd34:	4b18      	ldr	r3, [pc, #96]	; (1cd98 <setup_thread_stack+0x114>)
   1cd36:	617b      	str	r3, [r7, #20]
   1cd38:	68bb      	ldr	r3, [r7, #8]
   1cd3a:	61bb      	str	r3, [r7, #24]
   1cd3c:	68fb      	ldr	r3, [r7, #12]
   1cd3e:	61fb      	str	r3, [r7, #28]
   1cd40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1cd42:	623b      	str	r3, [r7, #32]
   1cd44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1cd46:	627b      	str	r3, [r7, #36]	; 0x24
   1cd48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1cd4a:	62bb      	str	r3, [r7, #40]	; 0x28
   1cd4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1cd4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   1cd50:	f107 0114 	add.w	r1, r7, #20
   1cd54:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   1cd56:	2207      	movs	r2, #7
   1cd58:	4810      	ldr	r0, [pc, #64]	; (1cd9c <setup_thread_stack+0x118>)
   1cd5a:	f005 ff32 	bl	22bc2 <log_n>
   1cd5e:	e000      	b.n	1cd62 <setup_thread_stack+0xde>
   1cd60:	bf00      	nop
		(struct _thread_userspace_local_data *)(stack_ptr - delta);
#endif
#if CONFIG_STACK_POINTER_RANDOM
	delta += random_offset(stack_buf_size);
#endif
	delta = ROUND_UP(delta, ARCH_STACK_PTR_ALIGN);
   1cd62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1cd64:	3307      	adds	r3, #7
   1cd66:	f023 0307 	bic.w	r3, r3, #7
   1cd6a:	64fb      	str	r3, [r7, #76]	; 0x4c
	 * will need to appropriately update this.
	 *
	 * The bounds tracked here correspond to the area of the stack object
	 * that the thread can access, which includes TLS.
	 */
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   1cd6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1cd6e:	68fb      	ldr	r3, [r7, #12]
   1cd70:	665a      	str	r2, [r3, #100]	; 0x64
	new_thread->stack_info.size = stack_buf_size;
   1cd72:	68fb      	ldr	r3, [r7, #12]
   1cd74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   1cd76:	669a      	str	r2, [r3, #104]	; 0x68
	new_thread->stack_info.delta = delta;
   1cd78:	68fb      	ldr	r3, [r7, #12]
   1cd7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1cd7c:	66da      	str	r2, [r3, #108]	; 0x6c
#endif
	stack_ptr -= delta;
   1cd7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1cd80:	425b      	negs	r3, r3
   1cd82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1cd84:	4413      	add	r3, r2
   1cd86:	63fb      	str	r3, [r7, #60]	; 0x3c

	return stack_ptr;
   1cd88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   1cd8a:	4618      	mov	r0, r3
   1cd8c:	3750      	adds	r7, #80	; 0x50
   1cd8e:	46bd      	mov	sp, r7
   1cd90:	bd80      	pop	{r7, pc}
   1cd92:	bf00      	nop
   1cd94:	20014570 	.word	0x20014570
   1cd98:	0002cda8 	.word	0x0002cda8
   1cd9c:	0002bf34 	.word	0x0002bf34

0001cda0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1cda0:	b580      	push	{r7, lr}
   1cda2:	b08a      	sub	sp, #40	; 0x28
   1cda4:	af04      	add	r7, sp, #16
   1cda6:	60f8      	str	r0, [r7, #12]
   1cda8:	60b9      	str	r1, [r7, #8]
   1cdaa:	607a      	str	r2, [r7, #4]
   1cdac:	603b      	str	r3, [r7, #0]
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   1cdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1cdb0:	2b0f      	cmp	r3, #15
   1cdb2:	d108      	bne.n	1cdc6 <z_setup_new_thread+0x26>
   1cdb4:	6838      	ldr	r0, [r7, #0]
   1cdb6:	f7ff ff43 	bl	1cc40 <z_is_idle_thread_entry>
   1cdba:	4603      	mov	r3, r0
   1cdbc:	f083 0301 	eor.w	r3, r3, #1
   1cdc0:	b2db      	uxtb	r3, r3
   1cdc2:	2b00      	cmp	r3, #0
   1cdc4:	d019      	beq.n	1cdfa <z_setup_new_thread+0x5a>
   1cdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1cdc8:	f113 0f10 	cmn.w	r3, #16
   1cdcc:	db02      	blt.n	1cdd4 <z_setup_new_thread+0x34>
   1cdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1cdd0:	2b0e      	cmp	r3, #14
   1cdd2:	dd12      	ble.n	1cdfa <z_setup_new_thread+0x5a>
   1cdd4:	f240 2305 	movw	r3, #517	; 0x205
   1cdd8:	4a21      	ldr	r2, [pc, #132]	; (1ce60 <z_setup_new_thread+0xc0>)
   1cdda:	4922      	ldr	r1, [pc, #136]	; (1ce64 <z_setup_new_thread+0xc4>)
   1cddc:	4822      	ldr	r0, [pc, #136]	; (1ce68 <z_setup_new_thread+0xc8>)
   1cdde:	f004 f943 	bl	21068 <printk>
   1cde2:	f06f 030f 	mvn.w	r3, #15
   1cde6:	220e      	movs	r2, #14
   1cde8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1cdea:	4820      	ldr	r0, [pc, #128]	; (1ce6c <z_setup_new_thread+0xcc>)
   1cdec:	f004 f93c 	bl	21068 <printk>
   1cdf0:	f240 2105 	movw	r1, #517	; 0x205
   1cdf4:	481a      	ldr	r0, [pc, #104]	; (1ce60 <z_setup_new_thread+0xc0>)
   1cdf6:	f005 f9e4 	bl	221c2 <assert_post_action>
	new_thread->syscall_frame = NULL;

	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);
   1cdfa:	68fb      	ldr	r3, [r7, #12]
   1cdfc:	3358      	adds	r3, #88	; 0x58
   1cdfe:	4618      	mov	r0, r3
   1ce00:	f00a ff6e 	bl	27ce0 <z_waitq_init>

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   1ce04:	68f8      	ldr	r0, [r7, #12]
   1ce06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ce08:	2204      	movs	r2, #4
   1ce0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1ce0c:	f00a ffc3 	bl	27d96 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   1ce10:	687a      	ldr	r2, [r7, #4]
   1ce12:	68b9      	ldr	r1, [r7, #8]
   1ce14:	68f8      	ldr	r0, [r7, #12]
   1ce16:	f7ff ff35 	bl	1cc84 <setup_thread_stack>
   1ce1a:	6178      	str	r0, [r7, #20]
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ce1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ce1e:	9302      	str	r3, [sp, #8]
   1ce20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ce22:	9301      	str	r3, [sp, #4]
   1ce24:	6a3b      	ldr	r3, [r7, #32]
   1ce26:	9300      	str	r3, [sp, #0]
   1ce28:	683b      	ldr	r3, [r7, #0]
   1ce2a:	697a      	ldr	r2, [r7, #20]
   1ce2c:	68b9      	ldr	r1, [r7, #8]
   1ce2e:	68f8      	ldr	r0, [r7, #12]
   1ce30:	f7f8 ff82 	bl	15d38 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   1ce34:	68fb      	ldr	r3, [r7, #12]
   1ce36:	2200      	movs	r2, #0
   1ce38:	655a      	str	r2, [r3, #84]	; 0x54
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1ce3a:	4b0d      	ldr	r3, [pc, #52]	; (1ce70 <z_setup_new_thread+0xd0>)
   1ce3c:	689b      	ldr	r3, [r3, #8]
   1ce3e:	2b00      	cmp	r3, #0
   1ce40:	d104      	bne.n	1ce4c <z_setup_new_thread+0xac>
		new_thread->resource_pool = NULL;
   1ce42:	68fb      	ldr	r3, [r7, #12]
   1ce44:	2200      	movs	r2, #0
   1ce46:	671a      	str	r2, [r3, #112]	; 0x70
		return stack_ptr;
   1ce48:	697b      	ldr	r3, [r7, #20]
   1ce4a:	e005      	b.n	1ce58 <z_setup_new_thread+0xb8>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1ce4c:	4b08      	ldr	r3, [pc, #32]	; (1ce70 <z_setup_new_thread+0xd0>)
   1ce4e:	689b      	ldr	r3, [r3, #8]
   1ce50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   1ce52:	68fb      	ldr	r3, [r7, #12]
   1ce54:	671a      	str	r2, [r3, #112]	; 0x70

#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
   1ce56:	697b      	ldr	r3, [r7, #20]
}
   1ce58:	4618      	mov	r0, r3
   1ce5a:	3718      	adds	r7, #24
   1ce5c:	46bd      	mov	sp, r7
   1ce5e:	bd80      	pop	{r7, pc}
   1ce60:	0002bf88 	.word	0x0002bf88
   1ce64:	0002bfac 	.word	0x0002bfac
   1ce68:	0002c02c 	.word	0x0002c02c
   1ce6c:	0002c04c 	.word	0x0002c04c
   1ce70:	2001517c 	.word	0x2001517c

0001ce74 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, uint32_t options, k_timeout_t delay)
{
   1ce74:	b580      	push	{r7, lr}
   1ce76:	b08c      	sub	sp, #48	; 0x30
   1ce78:	af06      	add	r7, sp, #24
   1ce7a:	60f8      	str	r0, [r7, #12]
   1ce7c:	60b9      	str	r1, [r7, #8]
   1ce7e:	607a      	str	r2, [r7, #4]
   1ce80:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1ce82:	f3ef 8305 	mrs	r3, IPSR
   1ce86:	617b      	str	r3, [r7, #20]
  return(result);
   1ce88:	697b      	ldr	r3, [r7, #20]
   1ce8a:	2b00      	cmp	r3, #0
   1ce8c:	bf14      	ite	ne
   1ce8e:	2301      	movne	r3, #1
   1ce90:	2300      	moveq	r3, #0
   1ce92:	b2db      	uxtb	r3, r3
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   1ce94:	2b00      	cmp	r3, #0
   1ce96:	d00e      	beq.n	1ceb6 <z_impl_k_thread_create+0x42>
   1ce98:	f240 236e 	movw	r3, #622	; 0x26e
   1ce9c:	4a19      	ldr	r2, [pc, #100]	; (1cf04 <z_impl_k_thread_create+0x90>)
   1ce9e:	491a      	ldr	r1, [pc, #104]	; (1cf08 <z_impl_k_thread_create+0x94>)
   1cea0:	481a      	ldr	r0, [pc, #104]	; (1cf0c <z_impl_k_thread_create+0x98>)
   1cea2:	f004 f8e1 	bl	21068 <printk>
   1cea6:	481a      	ldr	r0, [pc, #104]	; (1cf10 <z_impl_k_thread_create+0x9c>)
   1cea8:	f004 f8de 	bl	21068 <printk>
   1ceac:	f240 216e 	movw	r1, #622	; 0x26e
   1ceb0:	4814      	ldr	r0, [pc, #80]	; (1cf04 <z_impl_k_thread_create+0x90>)
   1ceb2:	f005 f986 	bl	221c2 <assert_post_action>

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1ceb6:	2300      	movs	r3, #0
   1ceb8:	9305      	str	r3, [sp, #20]
   1ceba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1cebc:	9304      	str	r3, [sp, #16]
   1cebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1cec0:	9303      	str	r3, [sp, #12]
   1cec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cec4:	9302      	str	r3, [sp, #8]
   1cec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cec8:	9301      	str	r3, [sp, #4]
   1ceca:	6a3b      	ldr	r3, [r7, #32]
   1cecc:	9300      	str	r3, [sp, #0]
   1cece:	683b      	ldr	r3, [r7, #0]
   1ced0:	687a      	ldr	r2, [r7, #4]
   1ced2:	68b9      	ldr	r1, [r7, #8]
   1ced4:	68f8      	ldr	r0, [r7, #12]
   1ced6:	f7ff ff63 	bl	1cda0 <z_setup_new_thread>
			  prio, options, NULL);

	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1ceda:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   1cede:	f04f 30ff 	mov.w	r0, #4294967295
   1cee2:	f04f 31ff 	mov.w	r1, #4294967295
   1cee6:	428b      	cmp	r3, r1
   1cee8:	bf08      	it	eq
   1ceea:	4282      	cmpeq	r2, r0
   1ceec:	d004      	beq.n	1cef8 <z_impl_k_thread_create+0x84>
		schedule_new_thread(new_thread, delay);
   1ceee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   1cef2:	68f8      	ldr	r0, [r7, #12]
   1cef4:	f00a ff32 	bl	27d5c <schedule_new_thread>
	}

	return new_thread;
   1cef8:	68fb      	ldr	r3, [r7, #12]
}
   1cefa:	4618      	mov	r0, r3
   1cefc:	3718      	adds	r7, #24
   1cefe:	46bd      	mov	sp, r7
   1cf00:	bd80      	pop	{r7, pc}
   1cf02:	bf00      	nop
   1cf04:	0002bf88 	.word	0x0002bf88
   1cf08:	0002c080 	.word	0x0002c080
   1cf0c:	0002c02c 	.word	0x0002c02c
   1cf10:	0002c094 	.word	0x0002c094

0001cf14 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1cf14:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cf16:	b08d      	sub	sp, #52	; 0x34
   1cf18:	af06      	add	r7, sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1cf1a:	4b45      	ldr	r3, [pc, #276]	; (1d030 <_flash_used+0xc4>)
   1cf1c:	617b      	str	r3, [r7, #20]
   1cf1e:	e029      	b.n	1cf74 <_flash_used+0x8>
		z_setup_new_thread(
   1cf20:	697b      	ldr	r3, [r7, #20]
   1cf22:	681e      	ldr	r6, [r3, #0]
   1cf24:	697b      	ldr	r3, [r7, #20]
   1cf26:	685b      	ldr	r3, [r3, #4]
   1cf28:	60fb      	str	r3, [r7, #12]
   1cf2a:	697b      	ldr	r3, [r7, #20]
   1cf2c:	689a      	ldr	r2, [r3, #8]
   1cf2e:	60ba      	str	r2, [r7, #8]
   1cf30:	697b      	ldr	r3, [r7, #20]
   1cf32:	68d8      	ldr	r0, [r3, #12]
   1cf34:	6078      	str	r0, [r7, #4]
   1cf36:	697b      	ldr	r3, [r7, #20]
   1cf38:	691b      	ldr	r3, [r3, #16]
   1cf3a:	697a      	ldr	r2, [r7, #20]
   1cf3c:	6952      	ldr	r2, [r2, #20]
   1cf3e:	6979      	ldr	r1, [r7, #20]
   1cf40:	6989      	ldr	r1, [r1, #24]
   1cf42:	6978      	ldr	r0, [r7, #20]
   1cf44:	69c0      	ldr	r0, [r0, #28]
   1cf46:	697c      	ldr	r4, [r7, #20]
   1cf48:	6a24      	ldr	r4, [r4, #32]
   1cf4a:	697d      	ldr	r5, [r7, #20]
   1cf4c:	6aed      	ldr	r5, [r5, #44]	; 0x2c
   1cf4e:	9505      	str	r5, [sp, #20]
   1cf50:	9404      	str	r4, [sp, #16]
   1cf52:	9003      	str	r0, [sp, #12]
   1cf54:	9102      	str	r1, [sp, #8]
   1cf56:	9201      	str	r2, [sp, #4]
   1cf58:	9300      	str	r3, [sp, #0]
   1cf5a:	687b      	ldr	r3, [r7, #4]
   1cf5c:	68ba      	ldr	r2, [r7, #8]
   1cf5e:	68f9      	ldr	r1, [r7, #12]
   1cf60:	4630      	mov	r0, r6
   1cf62:	f7ff ff1d 	bl	1cda0 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   1cf66:	697b      	ldr	r3, [r7, #20]
   1cf68:	681b      	ldr	r3, [r3, #0]
   1cf6a:	697a      	ldr	r2, [r7, #20]
   1cf6c:	655a      	str	r2, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1cf6e:	697b      	ldr	r3, [r7, #20]
   1cf70:	3330      	adds	r3, #48	; 0x30
   1cf72:	617b      	str	r3, [r7, #20]
   1cf74:	697b      	ldr	r3, [r7, #20]
   1cf76:	4a2f      	ldr	r2, [pc, #188]	; (1d034 <_flash_used+0xc8>)
   1cf78:	4293      	cmp	r3, r2
   1cf7a:	d90e      	bls.n	1cf9a <_flash_used+0x2e>
   1cf7c:	f240 23d5 	movw	r3, #725	; 0x2d5
   1cf80:	4a2d      	ldr	r2, [pc, #180]	; (1d038 <_flash_used+0xcc>)
   1cf82:	492e      	ldr	r1, [pc, #184]	; (1d03c <_flash_used+0xd0>)
   1cf84:	482e      	ldr	r0, [pc, #184]	; (1d040 <_flash_used+0xd4>)
   1cf86:	f004 f86f 	bl	21068 <printk>
   1cf8a:	482e      	ldr	r0, [pc, #184]	; (1d044 <_flash_used+0xd8>)
   1cf8c:	f004 f86c 	bl	21068 <printk>
   1cf90:	f240 21d5 	movw	r1, #725	; 0x2d5
   1cf94:	4828      	ldr	r0, [pc, #160]	; (1d038 <_flash_used+0xcc>)
   1cf96:	f005 f914 	bl	221c2 <assert_post_action>
   1cf9a:	697b      	ldr	r3, [r7, #20]
   1cf9c:	4a25      	ldr	r2, [pc, #148]	; (1d034 <_flash_used+0xc8>)
   1cf9e:	4293      	cmp	r3, r2
   1cfa0:	bf34      	ite	cc
   1cfa2:	2301      	movcc	r3, #1
   1cfa4:	2300      	movcs	r3, #0
   1cfa6:	b2db      	uxtb	r3, r3
   1cfa8:	2b00      	cmp	r3, #0
   1cfaa:	d1b9      	bne.n	1cf20 <z_init_static_threads+0xc>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1cfac:	f002 fb08 	bl	1f5c0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1cfb0:	4b1f      	ldr	r3, [pc, #124]	; (1d030 <_flash_used+0xc4>)
   1cfb2:	613b      	str	r3, [r7, #16]
   1cfb4:	e019      	b.n	1cfea <_flash_used+0x7e>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1cfb6:	693b      	ldr	r3, [r7, #16]
   1cfb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cfba:	f1b3 3fff 	cmp.w	r3, #4294967295
   1cfbe:	d011      	beq.n	1cfe4 <_flash_used+0x78>
			schedule_new_thread(thread_data->init_thread,
   1cfc0:	693b      	ldr	r3, [r7, #16]
   1cfc2:	681c      	ldr	r4, [r3, #0]
					    K_MSEC(thread_data->init_delay));
   1cfc4:	693b      	ldr	r3, [r7, #16]
   1cfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cfc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1cfcc:	461a      	mov	r2, r3
   1cfce:	ea4f 73e2 	mov.w	r3, r2, asr #31
   1cfd2:	4610      	mov	r0, r2
   1cfd4:	4619      	mov	r1, r3
   1cfd6:	f00a fd31 	bl	27a3c <k_ms_to_ticks_ceil64>
   1cfda:	4602      	mov	r2, r0
   1cfdc:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   1cfde:	4620      	mov	r0, r4
   1cfe0:	f00a febc 	bl	27d5c <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   1cfe4:	693b      	ldr	r3, [r7, #16]
   1cfe6:	3330      	adds	r3, #48	; 0x30
   1cfe8:	613b      	str	r3, [r7, #16]
   1cfea:	693b      	ldr	r3, [r7, #16]
   1cfec:	4a11      	ldr	r2, [pc, #68]	; (1d034 <_flash_used+0xc8>)
   1cfee:	4293      	cmp	r3, r2
   1cff0:	d90e      	bls.n	1d010 <_flash_used+0xa4>
   1cff2:	f44f 733d 	mov.w	r3, #756	; 0x2f4
   1cff6:	4a10      	ldr	r2, [pc, #64]	; (1d038 <_flash_used+0xcc>)
   1cff8:	4910      	ldr	r1, [pc, #64]	; (1d03c <_flash_used+0xd0>)
   1cffa:	4811      	ldr	r0, [pc, #68]	; (1d040 <_flash_used+0xd4>)
   1cffc:	f004 f834 	bl	21068 <printk>
   1d000:	4810      	ldr	r0, [pc, #64]	; (1d044 <_flash_used+0xd8>)
   1d002:	f004 f831 	bl	21068 <printk>
   1d006:	f44f 713d 	mov.w	r1, #756	; 0x2f4
   1d00a:	480b      	ldr	r0, [pc, #44]	; (1d038 <_flash_used+0xcc>)
   1d00c:	f005 f8d9 	bl	221c2 <assert_post_action>
   1d010:	693b      	ldr	r3, [r7, #16]
   1d012:	4a08      	ldr	r2, [pc, #32]	; (1d034 <_flash_used+0xc8>)
   1d014:	4293      	cmp	r3, r2
   1d016:	bf34      	ite	cc
   1d018:	2301      	movcc	r3, #1
   1d01a:	2300      	movcs	r3, #0
   1d01c:	b2db      	uxtb	r3, r3
   1d01e:	2b00      	cmp	r3, #0
   1d020:	d1c9      	bne.n	1cfb6 <_flash_used+0x4a>
		}
	}
	k_sched_unlock();
   1d022:	f002 fb3b 	bl	1f69c <k_sched_unlock>
}
   1d026:	bf00      	nop
   1d028:	371c      	adds	r7, #28
   1d02a:	46bd      	mov	sp, r7
   1d02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d02e:	bf00      	nop
   1d030:	20014584 	.word	0x20014584
   1d034:	20014584 	.word	0x20014584
   1d038:	0002bf88 	.word	0x0002bf88
   1d03c:	0002c0bc 	.word	0x0002c0bc
   1d040:	0002c02c 	.word	0x0002c02c
   1d044:	0002c0ec 	.word	0x0002c0ec

0001d048 <z_spin_lock_valid>:
/* These spinlock assertion predicates are defined here because having
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
   1d048:	b480      	push	{r7}
   1d04a:	b085      	sub	sp, #20
   1d04c:	af00      	add	r7, sp, #0
   1d04e:	6078      	str	r0, [r7, #4]
	uintptr_t thread_cpu = l->thread_cpu;
   1d050:	687b      	ldr	r3, [r7, #4]
   1d052:	681b      	ldr	r3, [r3, #0]
   1d054:	60fb      	str	r3, [r7, #12]

	if (thread_cpu != 0U) {
   1d056:	68fb      	ldr	r3, [r7, #12]
   1d058:	2b00      	cmp	r3, #0
   1d05a:	d008      	beq.n	1d06e <z_spin_lock_valid+0x26>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   1d05c:	68fb      	ldr	r3, [r7, #12]
   1d05e:	f003 0303 	and.w	r3, r3, #3
   1d062:	4a06      	ldr	r2, [pc, #24]	; (1d07c <z_spin_lock_valid+0x34>)
   1d064:	7d12      	ldrb	r2, [r2, #20]
   1d066:	4293      	cmp	r3, r2
   1d068:	d101      	bne.n	1d06e <z_spin_lock_valid+0x26>
			return false;
   1d06a:	2300      	movs	r3, #0
   1d06c:	e000      	b.n	1d070 <z_spin_lock_valid+0x28>
		}
	}
	return true;
   1d06e:	2301      	movs	r3, #1
}
   1d070:	4618      	mov	r0, r3
   1d072:	3714      	adds	r7, #20
   1d074:	46bd      	mov	sp, r7
   1d076:	bc80      	pop	{r7}
   1d078:	4770      	bx	lr
   1d07a:	bf00      	nop
   1d07c:	2001517c 	.word	0x2001517c

0001d080 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
   1d080:	b480      	push	{r7}
   1d082:	b083      	sub	sp, #12
   1d084:	af00      	add	r7, sp, #0
   1d086:	6078      	str	r0, [r7, #4]
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   1d088:	687b      	ldr	r3, [r7, #4]
   1d08a:	681a      	ldr	r2, [r3, #0]
   1d08c:	4b09      	ldr	r3, [pc, #36]	; (1d0b4 <z_spin_unlock_valid+0x34>)
   1d08e:	7d1b      	ldrb	r3, [r3, #20]
   1d090:	4619      	mov	r1, r3
   1d092:	4b08      	ldr	r3, [pc, #32]	; (1d0b4 <z_spin_unlock_valid+0x34>)
   1d094:	689b      	ldr	r3, [r3, #8]
   1d096:	430b      	orrs	r3, r1
   1d098:	429a      	cmp	r2, r3
   1d09a:	d001      	beq.n	1d0a0 <z_spin_unlock_valid+0x20>
		return false;
   1d09c:	2300      	movs	r3, #0
   1d09e:	e003      	b.n	1d0a8 <z_spin_unlock_valid+0x28>
	}
	l->thread_cpu = 0;
   1d0a0:	687b      	ldr	r3, [r7, #4]
   1d0a2:	2200      	movs	r2, #0
   1d0a4:	601a      	str	r2, [r3, #0]
	return true;
   1d0a6:	2301      	movs	r3, #1
}
   1d0a8:	4618      	mov	r0, r3
   1d0aa:	370c      	adds	r7, #12
   1d0ac:	46bd      	mov	sp, r7
   1d0ae:	bc80      	pop	{r7}
   1d0b0:	4770      	bx	lr
   1d0b2:	bf00      	nop
   1d0b4:	2001517c 	.word	0x2001517c

0001d0b8 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
   1d0b8:	b480      	push	{r7}
   1d0ba:	b083      	sub	sp, #12
   1d0bc:	af00      	add	r7, sp, #0
   1d0be:	6078      	str	r0, [r7, #4]
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   1d0c0:	4b06      	ldr	r3, [pc, #24]	; (1d0dc <z_spin_lock_set_owner+0x24>)
   1d0c2:	7d1b      	ldrb	r3, [r3, #20]
   1d0c4:	461a      	mov	r2, r3
   1d0c6:	4b05      	ldr	r3, [pc, #20]	; (1d0dc <z_spin_lock_set_owner+0x24>)
   1d0c8:	689b      	ldr	r3, [r3, #8]
   1d0ca:	431a      	orrs	r2, r3
   1d0cc:	687b      	ldr	r3, [r7, #4]
   1d0ce:	601a      	str	r2, [r3, #0]
}
   1d0d0:	bf00      	nop
   1d0d2:	370c      	adds	r7, #12
   1d0d4:	46bd      	mov	sp, r7
   1d0d6:	bc80      	pop	{r7}
   1d0d8:	4770      	bx	lr
   1d0da:	bf00      	nop
   1d0dc:	2001517c 	.word	0x2001517c

0001d0e0 <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
   1d0e0:	b580      	push	{r7, lr}
   1d0e2:	b082      	sub	sp, #8
   1d0e4:	af00      	add	r7, sp, #0
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
   1d0e6:	f003 f9f5 	bl	204d4 <z_get_next_timeout_expiry>
   1d0ea:	6078      	str	r0, [r7, #4]
	_kernel.idle = ticks;
   1d0ec:	4a07      	ldr	r2, [pc, #28]	; (1d10c <pm_save_idle+0x2c>)
   1d0ee:	687b      	ldr	r3, [r7, #4]
   1d0f0:	6213      	str	r3, [r2, #32]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   1d0f2:	6878      	ldr	r0, [r7, #4]
   1d0f4:	f7f7 fa26 	bl	14544 <pm_system_suspend>
   1d0f8:	4603      	mov	r3, r0
   1d0fa:	2b00      	cmp	r3, #0
   1d0fc:	d101      	bne.n	1d102 <pm_save_idle+0x22>
		k_cpu_idle();
   1d0fe:	f00a fe6a 	bl	27dd6 <k_cpu_idle>
	}
#endif
}
   1d102:	bf00      	nop
   1d104:	3708      	adds	r7, #8
   1d106:	46bd      	mov	sp, r7
   1d108:	bd80      	pop	{r7, pc}
   1d10a:	bf00      	nop
   1d10c:	2001517c 	.word	0x2001517c

0001d110 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1d110:	b580      	push	{r7, lr}
   1d112:	b086      	sub	sp, #24
   1d114:	af00      	add	r7, sp, #0
   1d116:	60f8      	str	r0, [r7, #12]
   1d118:	60b9      	str	r1, [r7, #8]
   1d11a:	607a      	str	r2, [r7, #4]
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   1d11c:	4b0e      	ldr	r3, [pc, #56]	; (1d158 <idle+0x48>)
   1d11e:	689b      	ldr	r3, [r3, #8]
   1d120:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1d124:	2b00      	cmp	r3, #0
   1d126:	da09      	bge.n	1d13c <idle+0x2c>
   1d128:	2346      	movs	r3, #70	; 0x46
   1d12a:	4a0c      	ldr	r2, [pc, #48]	; (1d15c <idle+0x4c>)
   1d12c:	490c      	ldr	r1, [pc, #48]	; (1d160 <idle+0x50>)
   1d12e:	480d      	ldr	r0, [pc, #52]	; (1d164 <idle+0x54>)
   1d130:	f003 ff9a 	bl	21068 <printk>
   1d134:	2146      	movs	r1, #70	; 0x46
   1d136:	4809      	ldr	r0, [pc, #36]	; (1d15c <idle+0x4c>)
   1d138:	f005 f843 	bl	221c2 <assert_post_action>
	__asm__ volatile(
   1d13c:	f04f 0320 	mov.w	r3, #32
   1d140:	f3ef 8211 	mrs	r2, BASEPRI
   1d144:	f383 8811 	msr	BASEPRI, r3
   1d148:	f3bf 8f6f 	isb	sy
   1d14c:	617a      	str	r2, [r7, #20]
   1d14e:	613b      	str	r3, [r7, #16]
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
   1d150:	f7ff ffc6 	bl	1d0e0 <pm_save_idle>
		if (IS_ENABLED(CONFIG_SMP) &&
   1d154:	e7f2      	b.n	1d13c <idle+0x2c>
   1d156:	bf00      	nop
   1d158:	2001517c 	.word	0x2001517c
   1d15c:	0002c10c 	.word	0x0002c10c
   1d160:	0002c130 	.word	0x0002c130
   1d164:	0002c158 	.word	0x0002c158

0001d168 <z_sched_lock>:
		z_ready_thread(thread);
	}
}

static inline void z_sched_lock(void)
{
   1d168:	b580      	push	{r7, lr}
   1d16a:	b082      	sub	sp, #8
   1d16c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1d16e:	f3ef 8305 	mrs	r3, IPSR
   1d172:	607b      	str	r3, [r7, #4]
  return(result);
   1d174:	687b      	ldr	r3, [r7, #4]
   1d176:	2b00      	cmp	r3, #0
   1d178:	bf14      	ite	ne
   1d17a:	2301      	movne	r3, #1
   1d17c:	2300      	moveq	r3, #0
   1d17e:	b2db      	uxtb	r3, r3
	__ASSERT(!arch_is_in_isr(), "");
   1d180:	2b00      	cmp	r3, #0
   1d182:	d00c      	beq.n	1d19e <z_sched_lock+0x36>
   1d184:	23fd      	movs	r3, #253	; 0xfd
   1d186:	4a14      	ldr	r2, [pc, #80]	; (1d1d8 <z_sched_lock+0x70>)
   1d188:	4914      	ldr	r1, [pc, #80]	; (1d1dc <z_sched_lock+0x74>)
   1d18a:	4815      	ldr	r0, [pc, #84]	; (1d1e0 <z_sched_lock+0x78>)
   1d18c:	f003 ff6c 	bl	21068 <printk>
   1d190:	4814      	ldr	r0, [pc, #80]	; (1d1e4 <z_sched_lock+0x7c>)
   1d192:	f003 ff69 	bl	21068 <printk>
   1d196:	21fd      	movs	r1, #253	; 0xfd
   1d198:	480f      	ldr	r0, [pc, #60]	; (1d1d8 <z_sched_lock+0x70>)
   1d19a:	f005 f812 	bl	221c2 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   1d19e:	4b12      	ldr	r3, [pc, #72]	; (1d1e8 <z_sched_lock+0x80>)
   1d1a0:	689b      	ldr	r3, [r3, #8]
   1d1a2:	7bdb      	ldrb	r3, [r3, #15]
   1d1a4:	2b01      	cmp	r3, #1
   1d1a6:	d10c      	bne.n	1d1c2 <z_sched_lock+0x5a>
   1d1a8:	23fe      	movs	r3, #254	; 0xfe
   1d1aa:	4a0b      	ldr	r2, [pc, #44]	; (1d1d8 <z_sched_lock+0x70>)
   1d1ac:	490f      	ldr	r1, [pc, #60]	; (1d1ec <z_sched_lock+0x84>)
   1d1ae:	480c      	ldr	r0, [pc, #48]	; (1d1e0 <z_sched_lock+0x78>)
   1d1b0:	f003 ff5a 	bl	21068 <printk>
   1d1b4:	480b      	ldr	r0, [pc, #44]	; (1d1e4 <z_sched_lock+0x7c>)
   1d1b6:	f003 ff57 	bl	21068 <printk>
   1d1ba:	21fe      	movs	r1, #254	; 0xfe
   1d1bc:	4806      	ldr	r0, [pc, #24]	; (1d1d8 <z_sched_lock+0x70>)
   1d1be:	f005 f800 	bl	221c2 <assert_post_action>

	--_current->base.sched_locked;
   1d1c2:	4b09      	ldr	r3, [pc, #36]	; (1d1e8 <z_sched_lock+0x80>)
   1d1c4:	689b      	ldr	r3, [r3, #8]
   1d1c6:	7bda      	ldrb	r2, [r3, #15]
   1d1c8:	3a01      	subs	r2, #1
   1d1ca:	b2d2      	uxtb	r2, r2
   1d1cc:	73da      	strb	r2, [r3, #15]

	compiler_barrier();
}
   1d1ce:	bf00      	nop
   1d1d0:	3708      	adds	r7, #8
   1d1d2:	46bd      	mov	sp, r7
   1d1d4:	bd80      	pop	{r7, pc}
   1d1d6:	bf00      	nop
   1d1d8:	0002c178 	.word	0x0002c178
   1d1dc:	0002c1a4 	.word	0x0002c1a4
   1d1e0:	0002c1b8 	.word	0x0002c1b8
   1d1e4:	0002c1d8 	.word	0x0002c1d8
   1d1e8:	2001517c 	.word	0x2001517c
   1d1ec:	0002c1dc 	.word	0x0002c1dc

0001d1f0 <log_const_source_id>:
{
   1d1f0:	b480      	push	{r7}
   1d1f2:	b083      	sub	sp, #12
   1d1f4:	af00      	add	r7, sp, #0
   1d1f6:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1d1f8:	687b      	ldr	r3, [r7, #4]
   1d1fa:	4a04      	ldr	r2, [pc, #16]	; (1d20c <log_const_source_id+0x1c>)
   1d1fc:	1a9b      	subs	r3, r3, r2
   1d1fe:	08db      	lsrs	r3, r3, #3
}
   1d200:	4618      	mov	r0, r3
   1d202:	370c      	adds	r7, #12
   1d204:	46bd      	mov	sp, r7
   1d206:	bc80      	pop	{r7}
   1d208:	4770      	bx	lr
   1d20a:	bf00      	nop
   1d20c:	00029354 	.word	0x00029354

0001d210 <adjust_owner_prio>:

	return new_prio;
}

static bool adjust_owner_prio(struct k_mutex *mutex, int32_t new_prio)
{
   1d210:	b590      	push	{r4, r7, lr}
   1d212:	b08f      	sub	sp, #60	; 0x3c
   1d214:	af04      	add	r7, sp, #16
   1d216:	6078      	str	r0, [r7, #4]
   1d218:	6039      	str	r1, [r7, #0]
	if (mutex->owner->base.prio != new_prio) {
   1d21a:	687b      	ldr	r3, [r7, #4]
   1d21c:	689b      	ldr	r3, [r3, #8]
   1d21e:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1d222:	461a      	mov	r2, r3
   1d224:	683b      	ldr	r3, [r7, #0]
   1d226:	4293      	cmp	r3, r2
   1d228:	d070      	beq.n	1d30c <adjust_owner_prio+0xfc>

		LOG_DBG("%p (ready (y/n): %c) prio changed to %d (was %d)",
   1d22a:	2303      	movs	r3, #3
   1d22c:	2b03      	cmp	r3, #3
   1d22e:	d964      	bls.n	1d2fa <adjust_owner_prio+0xea>
   1d230:	f00a fe25 	bl	27e7e <k_is_user_context>
   1d234:	4603      	mov	r3, r0
   1d236:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   1d23a:	2300      	movs	r3, #0
   1d23c:	623b      	str	r3, [r7, #32]
   1d23e:	2303      	movs	r3, #3
   1d240:	2b00      	cmp	r3, #0
   1d242:	d007      	beq.n	1d254 <adjust_owner_prio+0x44>
   1d244:	4b34      	ldr	r3, [pc, #208]	; (1d318 <adjust_owner_prio+0x108>)
   1d246:	681b      	ldr	r3, [r3, #0]
   1d248:	4618      	mov	r0, r3
   1d24a:	f7ff ffd1 	bl	1d1f0 <log_const_source_id>
   1d24e:	4603      	mov	r3, r0
   1d250:	b29b      	uxth	r3, r3
   1d252:	e000      	b.n	1d256 <adjust_owner_prio+0x46>
   1d254:	2300      	movs	r3, #0
   1d256:	84fb      	strh	r3, [r7, #38]	; 0x26
   1d258:	7f3b      	ldrb	r3, [r7, #28]
   1d25a:	2204      	movs	r2, #4
   1d25c:	f362 0302 	bfi	r3, r2, #0, #3
   1d260:	773b      	strb	r3, [r7, #28]
   1d262:	7f3b      	ldrb	r3, [r7, #28]
   1d264:	f36f 03c5 	bfc	r3, #3, #3
   1d268:	773b      	strb	r3, [r7, #28]
   1d26a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   1d26c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1d270:	b29a      	uxth	r2, r3
   1d272:	8bbb      	ldrh	r3, [r7, #28]
   1d274:	f362 138f 	bfi	r3, r2, #6, #10
   1d278:	83bb      	strh	r3, [r7, #28]
   1d27a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   1d27e:	2b00      	cmp	r3, #0
   1d280:	d01b      	beq.n	1d2ba <adjust_owner_prio+0xaa>
   1d282:	687b      	ldr	r3, [r7, #4]
   1d284:	689c      	ldr	r4, [r3, #8]
   1d286:	687b      	ldr	r3, [r7, #4]
   1d288:	689b      	ldr	r3, [r3, #8]
   1d28a:	4618      	mov	r0, r3
   1d28c:	f00a fe4c 	bl	27f28 <z_is_thread_ready>
   1d290:	4603      	mov	r3, r0
   1d292:	2b00      	cmp	r3, #0
   1d294:	d001      	beq.n	1d29a <adjust_owner_prio+0x8a>
   1d296:	2379      	movs	r3, #121	; 0x79
   1d298:	e000      	b.n	1d29c <adjust_owner_prio+0x8c>
   1d29a:	236e      	movs	r3, #110	; 0x6e
   1d29c:	687a      	ldr	r2, [r7, #4]
   1d29e:	6892      	ldr	r2, [r2, #8]
   1d2a0:	f992 200e 	ldrsb.w	r2, [r2, #14]
   1d2a4:	9202      	str	r2, [sp, #8]
   1d2a6:	683a      	ldr	r2, [r7, #0]
   1d2a8:	9201      	str	r2, [sp, #4]
   1d2aa:	9300      	str	r3, [sp, #0]
   1d2ac:	4623      	mov	r3, r4
   1d2ae:	4a1b      	ldr	r2, [pc, #108]	; (1d31c <adjust_owner_prio+0x10c>)
   1d2b0:	491b      	ldr	r1, [pc, #108]	; (1d320 <adjust_owner_prio+0x110>)
   1d2b2:	8bb8      	ldrh	r0, [r7, #28]
   1d2b4:	f7f5 ff4c 	bl	13150 <log_from_user>
   1d2b8:	e020      	b.n	1d2fc <adjust_owner_prio+0xec>
   1d2ba:	4b18      	ldr	r3, [pc, #96]	; (1d31c <adjust_owner_prio+0x10c>)
   1d2bc:	60bb      	str	r3, [r7, #8]
   1d2be:	687b      	ldr	r3, [r7, #4]
   1d2c0:	689b      	ldr	r3, [r3, #8]
   1d2c2:	60fb      	str	r3, [r7, #12]
   1d2c4:	687b      	ldr	r3, [r7, #4]
   1d2c6:	689b      	ldr	r3, [r3, #8]
   1d2c8:	4618      	mov	r0, r3
   1d2ca:	f00a fe2d 	bl	27f28 <z_is_thread_ready>
   1d2ce:	4603      	mov	r3, r0
   1d2d0:	2b00      	cmp	r3, #0
   1d2d2:	d001      	beq.n	1d2d8 <adjust_owner_prio+0xc8>
   1d2d4:	2379      	movs	r3, #121	; 0x79
   1d2d6:	e000      	b.n	1d2da <adjust_owner_prio+0xca>
   1d2d8:	236e      	movs	r3, #110	; 0x6e
   1d2da:	613b      	str	r3, [r7, #16]
   1d2dc:	683b      	ldr	r3, [r7, #0]
   1d2de:	617b      	str	r3, [r7, #20]
   1d2e0:	687b      	ldr	r3, [r7, #4]
   1d2e2:	689b      	ldr	r3, [r3, #8]
   1d2e4:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1d2e8:	61bb      	str	r3, [r7, #24]
   1d2ea:	f107 0108 	add.w	r1, r7, #8
   1d2ee:	8bbb      	ldrh	r3, [r7, #28]
   1d2f0:	2205      	movs	r2, #5
   1d2f2:	480b      	ldr	r0, [pc, #44]	; (1d320 <adjust_owner_prio+0x110>)
   1d2f4:	f005 fc65 	bl	22bc2 <log_n>
   1d2f8:	e000      	b.n	1d2fc <adjust_owner_prio+0xec>
   1d2fa:	bf00      	nop
			mutex->owner, z_is_thread_ready(mutex->owner) ?
			'y' : 'n',
			new_prio, mutex->owner->base.prio);

		return z_set_prio(mutex->owner, new_prio);
   1d2fc:	687b      	ldr	r3, [r7, #4]
   1d2fe:	689b      	ldr	r3, [r3, #8]
   1d300:	6839      	ldr	r1, [r7, #0]
   1d302:	4618      	mov	r0, r3
   1d304:	f001 ffd8 	bl	1f2b8 <z_set_prio>
   1d308:	4603      	mov	r3, r0
   1d30a:	e000      	b.n	1d30e <adjust_owner_prio+0xfe>
	}
	return false;
   1d30c:	2300      	movs	r3, #0
}
   1d30e:	4618      	mov	r0, r3
   1d310:	372c      	adds	r7, #44	; 0x2c
   1d312:	46bd      	mov	sp, r7
   1d314:	bd90      	pop	{r4, r7, pc}
   1d316:	bf00      	nop
   1d318:	20014574 	.word	0x20014574
   1d31c:	0002cdbc 	.word	0x0002cdbc
   1d320:	0002c210 	.word	0x0002c210

0001d324 <z_impl_k_mutex_lock>:

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1d324:	b580      	push	{r7, lr}
   1d326:	b0ba      	sub	sp, #232	; 0xe8
   1d328:	af04      	add	r7, sp, #16
   1d32a:	60f8      	str	r0, [r7, #12]
   1d32c:	e9c7 2300 	strd	r2, r3, [r7]
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;
   1d330:	2300      	movs	r3, #0
   1d332:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1d336:	f3ef 8305 	mrs	r3, IPSR
   1d33a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return(result);
   1d33e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1d342:	2b00      	cmp	r3, #0
   1d344:	bf14      	ite	ne
   1d346:	2301      	movne	r3, #1
   1d348:	2300      	moveq	r3, #0
   1d34a:	b2db      	uxtb	r3, r3

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1d34c:	2b00      	cmp	r3, #0
   1d34e:	d00c      	beq.n	1d36a <z_impl_k_mutex_lock+0x46>
   1d350:	2365      	movs	r3, #101	; 0x65
   1d352:	4aa7      	ldr	r2, [pc, #668]	; (1d5f0 <z_impl_k_mutex_lock+0x2cc>)
   1d354:	49a7      	ldr	r1, [pc, #668]	; (1d5f4 <z_impl_k_mutex_lock+0x2d0>)
   1d356:	48a8      	ldr	r0, [pc, #672]	; (1d5f8 <z_impl_k_mutex_lock+0x2d4>)
   1d358:	f003 fe86 	bl	21068 <printk>
   1d35c:	48a7      	ldr	r0, [pc, #668]	; (1d5fc <z_impl_k_mutex_lock+0x2d8>)
   1d35e:	f003 fe83 	bl	21068 <printk>
   1d362:	2165      	movs	r1, #101	; 0x65
   1d364:	48a2      	ldr	r0, [pc, #648]	; (1d5f0 <z_impl_k_mutex_lock+0x2cc>)
   1d366:	f004 ff2c 	bl	221c2 <assert_post_action>
   1d36a:	4ba5      	ldr	r3, [pc, #660]	; (1d600 <z_impl_k_mutex_lock+0x2dc>)
   1d36c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
   1d370:	f04f 0320 	mov.w	r3, #32
   1d374:	f3ef 8211 	mrs	r2, BASEPRI
   1d378:	f383 8811 	msr	BASEPRI, r3
   1d37c:	f3bf 8f6f 	isb	sy
   1d380:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
   1d384:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	return key;
   1d388:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
	k.key = arch_irq_lock();
   1d38c:	66bb      	str	r3, [r7, #104]	; 0x68
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d38e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
   1d392:	f7ff fe59 	bl	1d048 <z_spin_lock_valid>
   1d396:	4603      	mov	r3, r0
   1d398:	f083 0301 	eor.w	r3, r3, #1
   1d39c:	b2db      	uxtb	r3, r3
   1d39e:	2b00      	cmp	r3, #0
   1d3a0:	d00e      	beq.n	1d3c0 <z_impl_k_mutex_lock+0x9c>
   1d3a2:	2381      	movs	r3, #129	; 0x81
   1d3a4:	4a97      	ldr	r2, [pc, #604]	; (1d604 <z_impl_k_mutex_lock+0x2e0>)
   1d3a6:	4998      	ldr	r1, [pc, #608]	; (1d608 <z_impl_k_mutex_lock+0x2e4>)
   1d3a8:	4893      	ldr	r0, [pc, #588]	; (1d5f8 <z_impl_k_mutex_lock+0x2d4>)
   1d3aa:	f003 fe5d 	bl	21068 <printk>
   1d3ae:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
   1d3b2:	4896      	ldr	r0, [pc, #600]	; (1d60c <z_impl_k_mutex_lock+0x2e8>)
   1d3b4:	f003 fe58 	bl	21068 <printk>
   1d3b8:	2181      	movs	r1, #129	; 0x81
   1d3ba:	4892      	ldr	r0, [pc, #584]	; (1d604 <z_impl_k_mutex_lock+0x2e0>)
   1d3bc:	f004 ff01 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d3c0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
   1d3c4:	f7ff fe78 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1d3c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1d3ca:	67bb      	str	r3, [r7, #120]	; 0x78

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1d3cc:	68fb      	ldr	r3, [r7, #12]
   1d3ce:	68db      	ldr	r3, [r3, #12]
   1d3d0:	2b00      	cmp	r3, #0
   1d3d2:	bf0c      	ite	eq
   1d3d4:	2301      	moveq	r3, #1
   1d3d6:	2300      	movne	r3, #0
   1d3d8:	b2db      	uxtb	r3, r3
   1d3da:	2b00      	cmp	r3, #0
   1d3dc:	d10b      	bne.n	1d3f6 <z_impl_k_mutex_lock+0xd2>
   1d3de:	68fb      	ldr	r3, [r7, #12]
   1d3e0:	689a      	ldr	r2, [r3, #8]
   1d3e2:	4b8b      	ldr	r3, [pc, #556]	; (1d610 <z_impl_k_mutex_lock+0x2ec>)
   1d3e4:	689b      	ldr	r3, [r3, #8]
   1d3e6:	429a      	cmp	r2, r3
   1d3e8:	bf0c      	ite	eq
   1d3ea:	2301      	moveq	r3, #1
   1d3ec:	2300      	movne	r3, #0
   1d3ee:	b2db      	uxtb	r3, r3
   1d3f0:	2b00      	cmp	r3, #0
   1d3f2:	f000 809e 	beq.w	1d532 <z_impl_k_mutex_lock+0x20e>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1d3f6:	68fb      	ldr	r3, [r7, #12]
   1d3f8:	68db      	ldr	r3, [r3, #12]
					_current->base.prio :
   1d3fa:	2b00      	cmp	r3, #0
   1d3fc:	d104      	bne.n	1d408 <z_impl_k_mutex_lock+0xe4>
   1d3fe:	4b84      	ldr	r3, [pc, #528]	; (1d610 <z_impl_k_mutex_lock+0x2ec>)
   1d400:	689b      	ldr	r3, [r3, #8]
   1d402:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1d406:	e001      	b.n	1d40c <z_impl_k_mutex_lock+0xe8>
   1d408:	68fb      	ldr	r3, [r7, #12]
   1d40a:	691b      	ldr	r3, [r3, #16]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1d40c:	68fa      	ldr	r2, [r7, #12]
   1d40e:	6113      	str	r3, [r2, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   1d410:	68fb      	ldr	r3, [r7, #12]
   1d412:	68db      	ldr	r3, [r3, #12]
   1d414:	1c5a      	adds	r2, r3, #1
   1d416:	68fb      	ldr	r3, [r7, #12]
   1d418:	60da      	str	r2, [r3, #12]
		mutex->owner = _current;
   1d41a:	4b7d      	ldr	r3, [pc, #500]	; (1d610 <z_impl_k_mutex_lock+0x2ec>)
   1d41c:	689a      	ldr	r2, [r3, #8]
   1d41e:	68fb      	ldr	r3, [r7, #12]
   1d420:	609a      	str	r2, [r3, #8]

		LOG_DBG("%p took mutex %p, count: %d, orig prio: %d",
   1d422:	2303      	movs	r3, #3
   1d424:	2b03      	cmp	r3, #3
   1d426:	d958      	bls.n	1d4da <z_impl_k_mutex_lock+0x1b6>
   1d428:	f00a fd29 	bl	27e7e <k_is_user_context>
   1d42c:	4603      	mov	r3, r0
   1d42e:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
   1d432:	2300      	movs	r3, #0
   1d434:	667b      	str	r3, [r7, #100]	; 0x64
   1d436:	2303      	movs	r3, #3
   1d438:	2b00      	cmp	r3, #0
   1d43a:	d007      	beq.n	1d44c <z_impl_k_mutex_lock+0x128>
   1d43c:	4b75      	ldr	r3, [pc, #468]	; (1d614 <z_impl_k_mutex_lock+0x2f0>)
   1d43e:	681b      	ldr	r3, [r3, #0]
   1d440:	4618      	mov	r0, r3
   1d442:	f7ff fed5 	bl	1d1f0 <log_const_source_id>
   1d446:	4603      	mov	r3, r0
   1d448:	b29b      	uxth	r3, r3
   1d44a:	e000      	b.n	1d44e <z_impl_k_mutex_lock+0x12a>
   1d44c:	2300      	movs	r3, #0
   1d44e:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
   1d452:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   1d456:	2204      	movs	r2, #4
   1d458:	f362 0302 	bfi	r3, r2, #0, #3
   1d45c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
   1d460:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
   1d464:	f36f 03c5 	bfc	r3, #3, #3
   1d468:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
   1d46c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   1d470:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1d474:	b29a      	uxth	r2, r3
   1d476:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
   1d47a:	f362 138f 	bfi	r3, r2, #6, #10
   1d47e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
   1d482:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
   1d486:	2b00      	cmp	r3, #0
   1d488:	d011      	beq.n	1d4ae <z_impl_k_mutex_lock+0x18a>
   1d48a:	4b61      	ldr	r3, [pc, #388]	; (1d610 <z_impl_k_mutex_lock+0x2ec>)
   1d48c:	6899      	ldr	r1, [r3, #8]
   1d48e:	68fb      	ldr	r3, [r7, #12]
   1d490:	68db      	ldr	r3, [r3, #12]
   1d492:	68fa      	ldr	r2, [r7, #12]
   1d494:	6912      	ldr	r2, [r2, #16]
   1d496:	9202      	str	r2, [sp, #8]
   1d498:	9301      	str	r3, [sp, #4]
   1d49a:	68fb      	ldr	r3, [r7, #12]
   1d49c:	9300      	str	r3, [sp, #0]
   1d49e:	460b      	mov	r3, r1
   1d4a0:	4a5d      	ldr	r2, [pc, #372]	; (1d618 <z_impl_k_mutex_lock+0x2f4>)
   1d4a2:	495e      	ldr	r1, [pc, #376]	; (1d61c <z_impl_k_mutex_lock+0x2f8>)
   1d4a4:	f8b7 0060 	ldrh.w	r0, [r7, #96]	; 0x60
   1d4a8:	f7f5 fe52 	bl	13150 <log_from_user>
   1d4ac:	e016      	b.n	1d4dc <z_impl_k_mutex_lock+0x1b8>
   1d4ae:	4b5a      	ldr	r3, [pc, #360]	; (1d618 <z_impl_k_mutex_lock+0x2f4>)
   1d4b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   1d4b2:	4b57      	ldr	r3, [pc, #348]	; (1d610 <z_impl_k_mutex_lock+0x2ec>)
   1d4b4:	689b      	ldr	r3, [r3, #8]
   1d4b6:	653b      	str	r3, [r7, #80]	; 0x50
   1d4b8:	68fb      	ldr	r3, [r7, #12]
   1d4ba:	657b      	str	r3, [r7, #84]	; 0x54
   1d4bc:	68fb      	ldr	r3, [r7, #12]
   1d4be:	68db      	ldr	r3, [r3, #12]
   1d4c0:	65bb      	str	r3, [r7, #88]	; 0x58
   1d4c2:	68fb      	ldr	r3, [r7, #12]
   1d4c4:	691b      	ldr	r3, [r3, #16]
   1d4c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   1d4c8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
   1d4cc:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
   1d4d0:	2205      	movs	r2, #5
   1d4d2:	4852      	ldr	r0, [pc, #328]	; (1d61c <z_impl_k_mutex_lock+0x2f8>)
   1d4d4:	f005 fb75 	bl	22bc2 <log_n>
   1d4d8:	e000      	b.n	1d4dc <z_impl_k_mutex_lock+0x1b8>
   1d4da:	bf00      	nop
   1d4dc:	4b48      	ldr	r3, [pc, #288]	; (1d600 <z_impl_k_mutex_lock+0x2dc>)
   1d4de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   1d4e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1d4e4:	66fb      	str	r3, [r7, #108]	; 0x6c
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d4e6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
   1d4ea:	f7ff fdc9 	bl	1d080 <z_spin_unlock_valid>
   1d4ee:	4603      	mov	r3, r0
   1d4f0:	f083 0301 	eor.w	r3, r3, #1
   1d4f4:	b2db      	uxtb	r3, r3
   1d4f6:	2b00      	cmp	r3, #0
   1d4f8:	d00e      	beq.n	1d518 <z_impl_k_mutex_lock+0x1f4>
   1d4fa:	23ac      	movs	r3, #172	; 0xac
   1d4fc:	4a41      	ldr	r2, [pc, #260]	; (1d604 <z_impl_k_mutex_lock+0x2e0>)
   1d4fe:	4948      	ldr	r1, [pc, #288]	; (1d620 <z_impl_k_mutex_lock+0x2fc>)
   1d500:	483d      	ldr	r0, [pc, #244]	; (1d5f8 <z_impl_k_mutex_lock+0x2d4>)
   1d502:	f003 fdb1 	bl	21068 <printk>
   1d506:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
   1d50a:	4846      	ldr	r0, [pc, #280]	; (1d624 <z_impl_k_mutex_lock+0x300>)
   1d50c:	f003 fdac 	bl	21068 <printk>
   1d510:	21ac      	movs	r1, #172	; 0xac
   1d512:	483c      	ldr	r0, [pc, #240]	; (1d604 <z_impl_k_mutex_lock+0x2e0>)
   1d514:	f004 fe55 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1d518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   1d51a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	__asm__ volatile(
   1d51e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
   1d522:	f383 8811 	msr	BASEPRI, r3
   1d526:	f3bf 8f6f 	isb	sy
}
   1d52a:	bf00      	nop
}
   1d52c:	bf00      	nop

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   1d52e:	2300      	movs	r3, #0
   1d530:	e2aa      	b.n	1da88 <z_impl_k_mutex_lock+0x764>
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1d532:	e9d7 2300 	ldrd	r2, r3, [r7]
   1d536:	f04f 0000 	mov.w	r0, #0
   1d53a:	f04f 0100 	mov.w	r1, #0
   1d53e:	428b      	cmp	r3, r1
   1d540:	bf06      	itte	eq
   1d542:	4282      	cmpeq	r2, r0
   1d544:	2301      	moveq	r3, #1
   1d546:	2300      	movne	r3, #0
   1d548:	b2db      	uxtb	r3, r3
   1d54a:	2b00      	cmp	r3, #0
   1d54c:	d02b      	beq.n	1d5a6 <z_impl_k_mutex_lock+0x282>
   1d54e:	4b2c      	ldr	r3, [pc, #176]	; (1d600 <z_impl_k_mutex_lock+0x2dc>)
   1d550:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   1d554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1d556:	64bb      	str	r3, [r7, #72]	; 0x48
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d558:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
   1d55c:	f7ff fd90 	bl	1d080 <z_spin_unlock_valid>
   1d560:	4603      	mov	r3, r0
   1d562:	f083 0301 	eor.w	r3, r3, #1
   1d566:	b2db      	uxtb	r3, r3
   1d568:	2b00      	cmp	r3, #0
   1d56a:	d00e      	beq.n	1d58a <z_impl_k_mutex_lock+0x266>
   1d56c:	23ac      	movs	r3, #172	; 0xac
   1d56e:	4a25      	ldr	r2, [pc, #148]	; (1d604 <z_impl_k_mutex_lock+0x2e0>)
   1d570:	492b      	ldr	r1, [pc, #172]	; (1d620 <z_impl_k_mutex_lock+0x2fc>)
   1d572:	4821      	ldr	r0, [pc, #132]	; (1d5f8 <z_impl_k_mutex_lock+0x2d4>)
   1d574:	f003 fd78 	bl	21068 <printk>
   1d578:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
   1d57c:	4829      	ldr	r0, [pc, #164]	; (1d624 <z_impl_k_mutex_lock+0x300>)
   1d57e:	f003 fd73 	bl	21068 <printk>
   1d582:	21ac      	movs	r1, #172	; 0xac
   1d584:	481f      	ldr	r0, [pc, #124]	; (1d604 <z_impl_k_mutex_lock+0x2e0>)
   1d586:	f004 fe1c 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1d58a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1d58c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	__asm__ volatile(
   1d590:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   1d594:	f383 8811 	msr	BASEPRI, r3
   1d598:	f3bf 8f6f 	isb	sy
}
   1d59c:	bf00      	nop
}
   1d59e:	bf00      	nop
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1d5a0:	f06f 030f 	mvn.w	r3, #15
   1d5a4:	e270      	b.n	1da88 <z_impl_k_mutex_lock+0x764>
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mutex, lock, mutex, timeout);

	new_prio = new_prio_for_inheritance(_current->base.prio,
   1d5a6:	4b1a      	ldr	r3, [pc, #104]	; (1d610 <z_impl_k_mutex_lock+0x2ec>)
   1d5a8:	689b      	ldr	r3, [r3, #8]
   1d5aa:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1d5ae:	461a      	mov	r2, r3
					    mutex->owner->base.prio);
   1d5b0:	68fb      	ldr	r3, [r7, #12]
   1d5b2:	689b      	ldr	r3, [r3, #8]
   1d5b4:	f993 300e 	ldrsb.w	r3, [r3, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1d5b8:	4619      	mov	r1, r3
   1d5ba:	4610      	mov	r0, r2
   1d5bc:	f00a fd44 	bl	28048 <new_prio_for_inheritance>
   1d5c0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

	LOG_DBG("adjusting prio up on mutex %p", mutex);
   1d5c4:	2303      	movs	r3, #3
   1d5c6:	2b03      	cmp	r3, #3
   1d5c8:	d95d      	bls.n	1d686 <z_impl_k_mutex_lock+0x362>
   1d5ca:	f00a fc58 	bl	27e7e <k_is_user_context>
   1d5ce:	4603      	mov	r3, r0
   1d5d0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
   1d5d4:	2300      	movs	r3, #0
   1d5d6:	647b      	str	r3, [r7, #68]	; 0x44
   1d5d8:	2303      	movs	r3, #3
   1d5da:	2b00      	cmp	r3, #0
   1d5dc:	d024      	beq.n	1d628 <z_impl_k_mutex_lock+0x304>
   1d5de:	4b0d      	ldr	r3, [pc, #52]	; (1d614 <z_impl_k_mutex_lock+0x2f0>)
   1d5e0:	681b      	ldr	r3, [r3, #0]
   1d5e2:	4618      	mov	r0, r3
   1d5e4:	f7ff fe04 	bl	1d1f0 <log_const_source_id>
   1d5e8:	4603      	mov	r3, r0
   1d5ea:	b29b      	uxth	r3, r3
   1d5ec:	e01d      	b.n	1d62a <z_impl_k_mutex_lock+0x306>
   1d5ee:	bf00      	nop
   1d5f0:	0002c248 	.word	0x0002c248
   1d5f4:	0002c1a4 	.word	0x0002c1a4
   1d5f8:	0002c1b8 	.word	0x0002c1b8
   1d5fc:	0002c26c 	.word	0x0002c26c
   1d600:	200151ac 	.word	0x200151ac
   1d604:	0002c294 	.word	0x0002c294
   1d608:	0002c2bc 	.word	0x0002c2bc
   1d60c:	0002c2d4 	.word	0x0002c2d4
   1d610:	2001517c 	.word	0x2001517c
   1d614:	20014574 	.word	0x20014574
   1d618:	0002cdd0 	.word	0x0002cdd0
   1d61c:	0002c2ec 	.word	0x0002c2ec
   1d620:	0002c31c 	.word	0x0002c31c
   1d624:	0002c334 	.word	0x0002c334
   1d628:	2300      	movs	r3, #0
   1d62a:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
   1d62e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   1d632:	2204      	movs	r2, #4
   1d634:	f362 0302 	bfi	r3, r2, #0, #3
   1d638:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
   1d63c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   1d640:	f36f 03c5 	bfc	r3, #3, #3
   1d644:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
   1d648:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
   1d64c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1d650:	b29a      	uxth	r2, r3
   1d652:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
   1d656:	f362 138f 	bfi	r3, r2, #6, #10
   1d65a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   1d65e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
   1d662:	2b00      	cmp	r3, #0
   1d664:	d007      	beq.n	1d676 <z_impl_k_mutex_lock+0x352>
   1d666:	68fb      	ldr	r3, [r7, #12]
   1d668:	4ab6      	ldr	r2, [pc, #728]	; (1d944 <z_impl_k_mutex_lock+0x620>)
   1d66a:	49b7      	ldr	r1, [pc, #732]	; (1d948 <z_impl_k_mutex_lock+0x624>)
   1d66c:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
   1d670:	f7f5 fd6e 	bl	13150 <log_from_user>
   1d674:	e008      	b.n	1d688 <z_impl_k_mutex_lock+0x364>
   1d676:	49b3      	ldr	r1, [pc, #716]	; (1d944 <z_impl_k_mutex_lock+0x620>)
   1d678:	68fa      	ldr	r2, [r7, #12]
   1d67a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
   1d67e:	48b2      	ldr	r0, [pc, #712]	; (1d948 <z_impl_k_mutex_lock+0x624>)
   1d680:	f005 fa6c 	bl	22b5c <log_2>
   1d684:	e000      	b.n	1d688 <z_impl_k_mutex_lock+0x364>
   1d686:	bf00      	nop

	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1d688:	68fb      	ldr	r3, [r7, #12]
   1d68a:	689b      	ldr	r3, [r3, #8]
   1d68c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1d690:	4619      	mov	r1, r3
   1d692:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
   1d696:	f00a fc9a 	bl	27fce <z_is_prio_higher>
   1d69a:	4603      	mov	r3, r0
   1d69c:	2b00      	cmp	r3, #0
   1d69e:	d007      	beq.n	1d6b0 <z_impl_k_mutex_lock+0x38c>
		resched = adjust_owner_prio(mutex, new_prio);
   1d6a0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
   1d6a4:	68f8      	ldr	r0, [r7, #12]
   1d6a6:	f7ff fdb3 	bl	1d210 <adjust_owner_prio>
   1d6aa:	4603      	mov	r3, r0
   1d6ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	}

	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1d6b0:	68f9      	ldr	r1, [r7, #12]
   1d6b2:	e9d7 2300 	ldrd	r2, r3, [r7]
   1d6b6:	e9cd 2300 	strd	r2, r3, [sp]
   1d6ba:	460a      	mov	r2, r1
   1d6bc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
   1d6be:	48a3      	ldr	r0, [pc, #652]	; (1d94c <z_impl_k_mutex_lock+0x628>)
   1d6c0:	f001 fc48 	bl	1ef54 <z_pend_curr>
   1d6c4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

	LOG_DBG("on mutex %p got_mutex value: %d", mutex, got_mutex);
   1d6c8:	2303      	movs	r3, #3
   1d6ca:	2b03      	cmp	r3, #3
   1d6cc:	d945      	bls.n	1d75a <z_impl_k_mutex_lock+0x436>
   1d6ce:	f00a fbd6 	bl	27e7e <k_is_user_context>
   1d6d2:	4603      	mov	r3, r0
   1d6d4:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
   1d6d8:	2300      	movs	r3, #0
   1d6da:	63fb      	str	r3, [r7, #60]	; 0x3c
   1d6dc:	2303      	movs	r3, #3
   1d6de:	2b00      	cmp	r3, #0
   1d6e0:	d007      	beq.n	1d6f2 <z_impl_k_mutex_lock+0x3ce>
   1d6e2:	4b9b      	ldr	r3, [pc, #620]	; (1d950 <z_impl_k_mutex_lock+0x62c>)
   1d6e4:	681b      	ldr	r3, [r3, #0]
   1d6e6:	4618      	mov	r0, r3
   1d6e8:	f7ff fd82 	bl	1d1f0 <log_const_source_id>
   1d6ec:	4603      	mov	r3, r0
   1d6ee:	b29b      	uxth	r3, r3
   1d6f0:	e000      	b.n	1d6f4 <z_impl_k_mutex_lock+0x3d0>
   1d6f2:	2300      	movs	r3, #0
   1d6f4:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
   1d6f8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
   1d6fc:	2204      	movs	r2, #4
   1d6fe:	f362 0302 	bfi	r3, r2, #0, #3
   1d702:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
   1d706:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
   1d70a:	f36f 03c5 	bfc	r3, #3, #3
   1d70e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
   1d712:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
   1d716:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1d71a:	b29a      	uxth	r2, r3
   1d71c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
   1d71e:	f362 138f 	bfi	r3, r2, #6, #10
   1d722:	873b      	strh	r3, [r7, #56]	; 0x38
   1d724:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
   1d728:	2b00      	cmp	r3, #0
   1d72a:	d009      	beq.n	1d740 <z_impl_k_mutex_lock+0x41c>
   1d72c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   1d730:	9300      	str	r3, [sp, #0]
   1d732:	68fb      	ldr	r3, [r7, #12]
   1d734:	4a83      	ldr	r2, [pc, #524]	; (1d944 <z_impl_k_mutex_lock+0x620>)
   1d736:	4987      	ldr	r1, [pc, #540]	; (1d954 <z_impl_k_mutex_lock+0x630>)
   1d738:	8f38      	ldrh	r0, [r7, #56]	; 0x38
   1d73a:	f7f5 fd09 	bl	13150 <log_from_user>
   1d73e:	e00d      	b.n	1d75c <z_impl_k_mutex_lock+0x438>
   1d740:	4880      	ldr	r0, [pc, #512]	; (1d944 <z_impl_k_mutex_lock+0x620>)
   1d742:	68fa      	ldr	r2, [r7, #12]
   1d744:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
   1d748:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
   1d74a:	f8ad 3000 	strh.w	r3, [sp]
   1d74e:	460b      	mov	r3, r1
   1d750:	4601      	mov	r1, r0
   1d752:	4880      	ldr	r0, [pc, #512]	; (1d954 <z_impl_k_mutex_lock+0x630>)
   1d754:	f005 fa1b 	bl	22b8e <log_3>
   1d758:	e000      	b.n	1d75c <z_impl_k_mutex_lock+0x438>
   1d75a:	bf00      	nop

	LOG_DBG("%p got mutex %p (y/n): %c", _current, mutex,
   1d75c:	2303      	movs	r3, #3
   1d75e:	2b03      	cmp	r3, #3
   1d760:	d958      	bls.n	1d814 <z_impl_k_mutex_lock+0x4f0>
   1d762:	f00a fb8c 	bl	27e7e <k_is_user_context>
   1d766:	4603      	mov	r3, r0
   1d768:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
   1d76c:	2300      	movs	r3, #0
   1d76e:	637b      	str	r3, [r7, #52]	; 0x34
   1d770:	2303      	movs	r3, #3
   1d772:	2b00      	cmp	r3, #0
   1d774:	d007      	beq.n	1d786 <z_impl_k_mutex_lock+0x462>
   1d776:	4b76      	ldr	r3, [pc, #472]	; (1d950 <z_impl_k_mutex_lock+0x62c>)
   1d778:	681b      	ldr	r3, [r3, #0]
   1d77a:	4618      	mov	r0, r3
   1d77c:	f7ff fd38 	bl	1d1f0 <log_const_source_id>
   1d780:	4603      	mov	r3, r0
   1d782:	b29b      	uxth	r3, r3
   1d784:	e000      	b.n	1d788 <z_impl_k_mutex_lock+0x464>
   1d786:	2300      	movs	r3, #0
   1d788:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
   1d78c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   1d790:	2204      	movs	r2, #4
   1d792:	f362 0302 	bfi	r3, r2, #0, #3
   1d796:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   1d79a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   1d79e:	f36f 03c5 	bfc	r3, #3, #3
   1d7a2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
   1d7a6:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
   1d7aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1d7ae:	b29a      	uxth	r2, r3
   1d7b0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   1d7b2:	f362 138f 	bfi	r3, r2, #6, #10
   1d7b6:	863b      	strh	r3, [r7, #48]	; 0x30
   1d7b8:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
   1d7bc:	2b00      	cmp	r3, #0
   1d7be:	d012      	beq.n	1d7e6 <z_impl_k_mutex_lock+0x4c2>
   1d7c0:	4b65      	ldr	r3, [pc, #404]	; (1d958 <z_impl_k_mutex_lock+0x634>)
   1d7c2:	689a      	ldr	r2, [r3, #8]
   1d7c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   1d7c8:	2b00      	cmp	r3, #0
   1d7ca:	d001      	beq.n	1d7d0 <z_impl_k_mutex_lock+0x4ac>
   1d7cc:	2379      	movs	r3, #121	; 0x79
   1d7ce:	e000      	b.n	1d7d2 <z_impl_k_mutex_lock+0x4ae>
   1d7d0:	236e      	movs	r3, #110	; 0x6e
   1d7d2:	9301      	str	r3, [sp, #4]
   1d7d4:	68fb      	ldr	r3, [r7, #12]
   1d7d6:	9300      	str	r3, [sp, #0]
   1d7d8:	4613      	mov	r3, r2
   1d7da:	4a5a      	ldr	r2, [pc, #360]	; (1d944 <z_impl_k_mutex_lock+0x620>)
   1d7dc:	495f      	ldr	r1, [pc, #380]	; (1d95c <z_impl_k_mutex_lock+0x638>)
   1d7de:	8e38      	ldrh	r0, [r7, #48]	; 0x30
   1d7e0:	f7f5 fcb6 	bl	13150 <log_from_user>
   1d7e4:	e017      	b.n	1d816 <z_impl_k_mutex_lock+0x4f2>
   1d7e6:	4b57      	ldr	r3, [pc, #348]	; (1d944 <z_impl_k_mutex_lock+0x620>)
   1d7e8:	623b      	str	r3, [r7, #32]
   1d7ea:	4b5b      	ldr	r3, [pc, #364]	; (1d958 <z_impl_k_mutex_lock+0x634>)
   1d7ec:	689b      	ldr	r3, [r3, #8]
   1d7ee:	627b      	str	r3, [r7, #36]	; 0x24
   1d7f0:	68fb      	ldr	r3, [r7, #12]
   1d7f2:	62bb      	str	r3, [r7, #40]	; 0x28
   1d7f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   1d7f8:	2b00      	cmp	r3, #0
   1d7fa:	d001      	beq.n	1d800 <z_impl_k_mutex_lock+0x4dc>
   1d7fc:	2379      	movs	r3, #121	; 0x79
   1d7fe:	e000      	b.n	1d802 <z_impl_k_mutex_lock+0x4de>
   1d800:	236e      	movs	r3, #110	; 0x6e
   1d802:	62fb      	str	r3, [r7, #44]	; 0x2c
   1d804:	f107 0120 	add.w	r1, r7, #32
   1d808:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   1d80a:	2204      	movs	r2, #4
   1d80c:	4853      	ldr	r0, [pc, #332]	; (1d95c <z_impl_k_mutex_lock+0x638>)
   1d80e:	f005 f9d8 	bl	22bc2 <log_n>
   1d812:	e000      	b.n	1d816 <z_impl_k_mutex_lock+0x4f2>
   1d814:	bf00      	nop
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
   1d816:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   1d81a:	2b00      	cmp	r3, #0
   1d81c:	d101      	bne.n	1d822 <z_impl_k_mutex_lock+0x4fe>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);
		return 0;
   1d81e:	2300      	movs	r3, #0
   1d820:	e132      	b.n	1da88 <z_impl_k_mutex_lock+0x764>
	}

	/* timed out */

	LOG_DBG("%p timeout on mutex %p", _current, mutex);
   1d822:	2303      	movs	r3, #3
   1d824:	2b03      	cmp	r3, #3
   1d826:	d943      	bls.n	1d8b0 <z_impl_k_mutex_lock+0x58c>
   1d828:	f00a fb29 	bl	27e7e <k_is_user_context>
   1d82c:	4603      	mov	r3, r0
   1d82e:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
   1d832:	2300      	movs	r3, #0
   1d834:	61fb      	str	r3, [r7, #28]
   1d836:	2303      	movs	r3, #3
   1d838:	2b00      	cmp	r3, #0
   1d83a:	d007      	beq.n	1d84c <z_impl_k_mutex_lock+0x528>
   1d83c:	4b44      	ldr	r3, [pc, #272]	; (1d950 <z_impl_k_mutex_lock+0x62c>)
   1d83e:	681b      	ldr	r3, [r3, #0]
   1d840:	4618      	mov	r0, r3
   1d842:	f7ff fcd5 	bl	1d1f0 <log_const_source_id>
   1d846:	4603      	mov	r3, r0
   1d848:	b29b      	uxth	r3, r3
   1d84a:	e000      	b.n	1d84e <z_impl_k_mutex_lock+0x52a>
   1d84c:	2300      	movs	r3, #0
   1d84e:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
   1d852:	7e3b      	ldrb	r3, [r7, #24]
   1d854:	2204      	movs	r2, #4
   1d856:	f362 0302 	bfi	r3, r2, #0, #3
   1d85a:	763b      	strb	r3, [r7, #24]
   1d85c:	7e3b      	ldrb	r3, [r7, #24]
   1d85e:	f36f 03c5 	bfc	r3, #3, #3
   1d862:	763b      	strb	r3, [r7, #24]
   1d864:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
   1d868:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1d86c:	b29a      	uxth	r2, r3
   1d86e:	8b3b      	ldrh	r3, [r7, #24]
   1d870:	f362 138f 	bfi	r3, r2, #6, #10
   1d874:	833b      	strh	r3, [r7, #24]
   1d876:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
   1d87a:	2b00      	cmp	r3, #0
   1d87c:	d00a      	beq.n	1d894 <z_impl_k_mutex_lock+0x570>
   1d87e:	4b36      	ldr	r3, [pc, #216]	; (1d958 <z_impl_k_mutex_lock+0x634>)
   1d880:	689a      	ldr	r2, [r3, #8]
   1d882:	68fb      	ldr	r3, [r7, #12]
   1d884:	9300      	str	r3, [sp, #0]
   1d886:	4613      	mov	r3, r2
   1d888:	4a2e      	ldr	r2, [pc, #184]	; (1d944 <z_impl_k_mutex_lock+0x620>)
   1d88a:	4935      	ldr	r1, [pc, #212]	; (1d960 <z_impl_k_mutex_lock+0x63c>)
   1d88c:	8b38      	ldrh	r0, [r7, #24]
   1d88e:	f7f5 fc5f 	bl	13150 <log_from_user>
   1d892:	e00e      	b.n	1d8b2 <z_impl_k_mutex_lock+0x58e>
   1d894:	492b      	ldr	r1, [pc, #172]	; (1d944 <z_impl_k_mutex_lock+0x620>)
   1d896:	4b30      	ldr	r3, [pc, #192]	; (1d958 <z_impl_k_mutex_lock+0x634>)
   1d898:	689b      	ldr	r3, [r3, #8]
   1d89a:	4618      	mov	r0, r3
   1d89c:	68fa      	ldr	r2, [r7, #12]
   1d89e:	8b3b      	ldrh	r3, [r7, #24]
   1d8a0:	f8ad 3000 	strh.w	r3, [sp]
   1d8a4:	4613      	mov	r3, r2
   1d8a6:	4602      	mov	r2, r0
   1d8a8:	482d      	ldr	r0, [pc, #180]	; (1d960 <z_impl_k_mutex_lock+0x63c>)
   1d8aa:	f005 f970 	bl	22b8e <log_3>
   1d8ae:	e000      	b.n	1d8b2 <z_impl_k_mutex_lock+0x58e>
   1d8b0:	bf00      	nop
   1d8b2:	4b26      	ldr	r3, [pc, #152]	; (1d94c <z_impl_k_mutex_lock+0x628>)
   1d8b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	__asm__ volatile(
   1d8b8:	f04f 0320 	mov.w	r3, #32
   1d8bc:	f3ef 8211 	mrs	r2, BASEPRI
   1d8c0:	f383 8811 	msr	BASEPRI, r3
   1d8c4:	f3bf 8f6f 	isb	sy
   1d8c8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
   1d8cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	return key;
   1d8d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
	k.key = arch_irq_lock();
   1d8d4:	673b      	str	r3, [r7, #112]	; 0x70
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d8d6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   1d8da:	f7ff fbb5 	bl	1d048 <z_spin_lock_valid>
   1d8de:	4603      	mov	r3, r0
   1d8e0:	f083 0301 	eor.w	r3, r3, #1
   1d8e4:	b2db      	uxtb	r3, r3
   1d8e6:	2b00      	cmp	r3, #0
   1d8e8:	d00e      	beq.n	1d908 <z_impl_k_mutex_lock+0x5e4>
   1d8ea:	2381      	movs	r3, #129	; 0x81
   1d8ec:	4a1d      	ldr	r2, [pc, #116]	; (1d964 <z_impl_k_mutex_lock+0x640>)
   1d8ee:	491e      	ldr	r1, [pc, #120]	; (1d968 <z_impl_k_mutex_lock+0x644>)
   1d8f0:	481e      	ldr	r0, [pc, #120]	; (1d96c <z_impl_k_mutex_lock+0x648>)
   1d8f2:	f003 fbb9 	bl	21068 <printk>
   1d8f6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
   1d8fa:	481d      	ldr	r0, [pc, #116]	; (1d970 <z_impl_k_mutex_lock+0x64c>)
   1d8fc:	f003 fbb4 	bl	21068 <printk>
   1d900:	2181      	movs	r1, #129	; 0x81
   1d902:	4818      	ldr	r0, [pc, #96]	; (1d964 <z_impl_k_mutex_lock+0x640>)
   1d904:	f004 fc5d 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1d908:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
   1d90c:	f7ff fbd4 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1d910:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   1d912:	67bb      	str	r3, [r7, #120]	; 0x78

	key = k_spin_lock(&lock);

	struct k_thread *waiter = z_waitq_head(&mutex->wait_q);
   1d914:	68fb      	ldr	r3, [r7, #12]
   1d916:	4618      	mov	r0, r3
   1d918:	f00a fb73 	bl	28002 <z_waitq_head>
   1d91c:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8

	new_prio = (waiter != NULL) ?
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1d920:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   1d924:	2b00      	cmp	r3, #0
   1d926:	d025      	beq.n	1d974 <z_impl_k_mutex_lock+0x650>
   1d928:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   1d92c:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1d930:	461a      	mov	r2, r3
   1d932:	68fb      	ldr	r3, [r7, #12]
   1d934:	691b      	ldr	r3, [r3, #16]
   1d936:	4619      	mov	r1, r3
   1d938:	4610      	mov	r0, r2
   1d93a:	f00a fb85 	bl	28048 <new_prio_for_inheritance>
   1d93e:	4603      	mov	r3, r0
   1d940:	e01a      	b.n	1d978 <z_impl_k_mutex_lock+0x654>
   1d942:	bf00      	nop
   1d944:	0002cdd0 	.word	0x0002cdd0
   1d948:	0002c34c 	.word	0x0002c34c
   1d94c:	200151ac 	.word	0x200151ac
   1d950:	20014574 	.word	0x20014574
   1d954:	0002c370 	.word	0x0002c370
   1d958:	2001517c 	.word	0x2001517c
   1d95c:	0002c394 	.word	0x0002c394
   1d960:	0002c3b4 	.word	0x0002c3b4
   1d964:	0002c294 	.word	0x0002c294
   1d968:	0002c2bc 	.word	0x0002c2bc
   1d96c:	0002c1b8 	.word	0x0002c1b8
   1d970:	0002c2d4 	.word	0x0002c2d4
   1d974:	68fb      	ldr	r3, [r7, #12]
   1d976:	691b      	ldr	r3, [r3, #16]
	new_prio = (waiter != NULL) ?
   1d978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		mutex->owner_orig_prio;

	LOG_DBG("adjusting prio down on mutex %p", mutex);
   1d97c:	2303      	movs	r3, #3
   1d97e:	2b03      	cmp	r3, #3
   1d980:	d938      	bls.n	1d9f4 <z_impl_k_mutex_lock+0x6d0>
   1d982:	f00a fa7c 	bl	27e7e <k_is_user_context>
   1d986:	4603      	mov	r3, r0
   1d988:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
   1d98c:	2300      	movs	r3, #0
   1d98e:	617b      	str	r3, [r7, #20]
   1d990:	2303      	movs	r3, #3
   1d992:	2b00      	cmp	r3, #0
   1d994:	d007      	beq.n	1d9a6 <z_impl_k_mutex_lock+0x682>
   1d996:	4b3e      	ldr	r3, [pc, #248]	; (1da90 <z_impl_k_mutex_lock+0x76c>)
   1d998:	681b      	ldr	r3, [r3, #0]
   1d99a:	4618      	mov	r0, r3
   1d99c:	f7ff fc28 	bl	1d1f0 <log_const_source_id>
   1d9a0:	4603      	mov	r3, r0
   1d9a2:	b29b      	uxth	r3, r3
   1d9a4:	e000      	b.n	1d9a8 <z_impl_k_mutex_lock+0x684>
   1d9a6:	2300      	movs	r3, #0
   1d9a8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
   1d9ac:	7c3b      	ldrb	r3, [r7, #16]
   1d9ae:	2204      	movs	r2, #4
   1d9b0:	f362 0302 	bfi	r3, r2, #0, #3
   1d9b4:	743b      	strb	r3, [r7, #16]
   1d9b6:	7c3b      	ldrb	r3, [r7, #16]
   1d9b8:	f36f 03c5 	bfc	r3, #3, #3
   1d9bc:	743b      	strb	r3, [r7, #16]
   1d9be:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
   1d9c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1d9c6:	b29a      	uxth	r2, r3
   1d9c8:	8a3b      	ldrh	r3, [r7, #16]
   1d9ca:	f362 138f 	bfi	r3, r2, #6, #10
   1d9ce:	823b      	strh	r3, [r7, #16]
   1d9d0:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
   1d9d4:	2b00      	cmp	r3, #0
   1d9d6:	d006      	beq.n	1d9e6 <z_impl_k_mutex_lock+0x6c2>
   1d9d8:	68fb      	ldr	r3, [r7, #12]
   1d9da:	4a2e      	ldr	r2, [pc, #184]	; (1da94 <z_impl_k_mutex_lock+0x770>)
   1d9dc:	492e      	ldr	r1, [pc, #184]	; (1da98 <z_impl_k_mutex_lock+0x774>)
   1d9de:	8a38      	ldrh	r0, [r7, #16]
   1d9e0:	f7f5 fbb6 	bl	13150 <log_from_user>
   1d9e4:	e007      	b.n	1d9f6 <z_impl_k_mutex_lock+0x6d2>
   1d9e6:	492b      	ldr	r1, [pc, #172]	; (1da94 <z_impl_k_mutex_lock+0x770>)
   1d9e8:	68fa      	ldr	r2, [r7, #12]
   1d9ea:	8a3b      	ldrh	r3, [r7, #16]
   1d9ec:	482a      	ldr	r0, [pc, #168]	; (1da98 <z_impl_k_mutex_lock+0x774>)
   1d9ee:	f005 f8b5 	bl	22b5c <log_2>
   1d9f2:	e000      	b.n	1d9f6 <z_impl_k_mutex_lock+0x6d2>
   1d9f4:	bf00      	nop

	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1d9f6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
   1d9fa:	68f8      	ldr	r0, [r7, #12]
   1d9fc:	f7ff fc08 	bl	1d210 <adjust_owner_prio>
   1da00:	4603      	mov	r3, r0
   1da02:	2b00      	cmp	r3, #0
   1da04:	d103      	bne.n	1da0e <z_impl_k_mutex_lock+0x6ea>
   1da06:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
   1da0a:	2b00      	cmp	r3, #0
   1da0c:	d001      	beq.n	1da12 <z_impl_k_mutex_lock+0x6ee>
   1da0e:	2301      	movs	r3, #1
   1da10:	e000      	b.n	1da14 <z_impl_k_mutex_lock+0x6f0>
   1da12:	2300      	movs	r3, #0
   1da14:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
   1da18:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
   1da1c:	f003 0301 	and.w	r3, r3, #1
   1da20:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7

	if (resched) {
   1da24:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
   1da28:	2b00      	cmp	r3, #0
   1da2a:	d004      	beq.n	1da36 <z_impl_k_mutex_lock+0x712>
		z_reschedule(&lock, key);
   1da2c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
   1da2e:	481b      	ldr	r0, [pc, #108]	; (1da9c <z_impl_k_mutex_lock+0x778>)
   1da30:	f001 fd62 	bl	1f4f8 <z_reschedule>
   1da34:	e026      	b.n	1da84 <z_impl_k_mutex_lock+0x760>
   1da36:	4b19      	ldr	r3, [pc, #100]	; (1da9c <z_impl_k_mutex_lock+0x778>)
   1da38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   1da3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   1da3e:	677b      	str	r3, [r7, #116]	; 0x74
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1da40:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
   1da44:	f7ff fb1c 	bl	1d080 <z_spin_unlock_valid>
   1da48:	4603      	mov	r3, r0
   1da4a:	f083 0301 	eor.w	r3, r3, #1
   1da4e:	b2db      	uxtb	r3, r3
   1da50:	2b00      	cmp	r3, #0
   1da52:	d00e      	beq.n	1da72 <z_impl_k_mutex_lock+0x74e>
   1da54:	23ac      	movs	r3, #172	; 0xac
   1da56:	4a12      	ldr	r2, [pc, #72]	; (1daa0 <z_impl_k_mutex_lock+0x77c>)
   1da58:	4912      	ldr	r1, [pc, #72]	; (1daa4 <z_impl_k_mutex_lock+0x780>)
   1da5a:	4813      	ldr	r0, [pc, #76]	; (1daa8 <z_impl_k_mutex_lock+0x784>)
   1da5c:	f003 fb04 	bl	21068 <printk>
   1da60:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
   1da64:	4811      	ldr	r0, [pc, #68]	; (1daac <z_impl_k_mutex_lock+0x788>)
   1da66:	f003 faff 	bl	21068 <printk>
   1da6a:	21ac      	movs	r1, #172	; 0xac
   1da6c:	480c      	ldr	r0, [pc, #48]	; (1daa0 <z_impl_k_mutex_lock+0x77c>)
   1da6e:	f004 fba8 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1da72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1da74:	67fb      	str	r3, [r7, #124]	; 0x7c
	__asm__ volatile(
   1da76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   1da78:	f383 8811 	msr	BASEPRI, r3
   1da7c:	f3bf 8f6f 	isb	sy
}
   1da80:	bf00      	nop
}
   1da82:	bf00      	nop
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
   1da84:	f06f 030a 	mvn.w	r3, #10
}
   1da88:	4618      	mov	r0, r3
   1da8a:	37d8      	adds	r7, #216	; 0xd8
   1da8c:	46bd      	mov	sp, r7
   1da8e:	bd80      	pop	{r7, pc}
   1da90:	20014574 	.word	0x20014574
   1da94:	0002cdd0 	.word	0x0002cdd0
   1da98:	0002c3d0 	.word	0x0002c3d0
   1da9c:	200151ac 	.word	0x200151ac
   1daa0:	0002c294 	.word	0x0002c294
   1daa4:	0002c31c 	.word	0x0002c31c
   1daa8:	0002c1b8 	.word	0x0002c1b8
   1daac:	0002c334 	.word	0x0002c334

0001dab0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1dab0:	b580      	push	{r7, lr}
   1dab2:	b09a      	sub	sp, #104	; 0x68
   1dab4:	af02      	add	r7, sp, #8
   1dab6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1dab8:	f3ef 8305 	mrs	r3, IPSR
   1dabc:	653b      	str	r3, [r7, #80]	; 0x50
  return(result);
   1dabe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1dac0:	2b00      	cmp	r3, #0
   1dac2:	bf14      	ite	ne
   1dac4:	2301      	movne	r3, #1
   1dac6:	2300      	moveq	r3, #0
   1dac8:	b2db      	uxtb	r3, r3
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   1daca:	2b00      	cmp	r3, #0
   1dacc:	d00c      	beq.n	1dae8 <z_impl_k_mutex_unlock+0x38>
   1dace:	23c7      	movs	r3, #199	; 0xc7
   1dad0:	4aab      	ldr	r2, [pc, #684]	; (1dd80 <z_impl_k_mutex_unlock+0x2d0>)
   1dad2:	49ac      	ldr	r1, [pc, #688]	; (1dd84 <z_impl_k_mutex_unlock+0x2d4>)
   1dad4:	48ac      	ldr	r0, [pc, #688]	; (1dd88 <z_impl_k_mutex_unlock+0x2d8>)
   1dad6:	f003 fac7 	bl	21068 <printk>
   1dada:	48ac      	ldr	r0, [pc, #688]	; (1dd8c <z_impl_k_mutex_unlock+0x2dc>)
   1dadc:	f003 fac4 	bl	21068 <printk>
   1dae0:	21c7      	movs	r1, #199	; 0xc7
   1dae2:	48a7      	ldr	r0, [pc, #668]	; (1dd80 <z_impl_k_mutex_unlock+0x2d0>)
   1dae4:	f004 fb6d 	bl	221c2 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1dae8:	687b      	ldr	r3, [r7, #4]
   1daea:	689b      	ldr	r3, [r3, #8]
   1daec:	2b00      	cmp	r3, #0
   1daee:	d102      	bne.n	1daf6 <z_impl_k_mutex_unlock+0x46>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, -EINVAL);

		return -EINVAL;
   1daf0:	f06f 0315 	mvn.w	r3, #21
   1daf4:	e13f      	b.n	1dd76 <z_impl_k_mutex_unlock+0x2c6>
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1daf6:	687b      	ldr	r3, [r7, #4]
   1daf8:	689a      	ldr	r2, [r3, #8]
   1dafa:	4ba5      	ldr	r3, [pc, #660]	; (1dd90 <z_impl_k_mutex_unlock+0x2e0>)
   1dafc:	689b      	ldr	r3, [r3, #8]
   1dafe:	429a      	cmp	r2, r3
   1db00:	d002      	beq.n	1db08 <z_impl_k_mutex_unlock+0x58>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, -EPERM);

		return -EPERM;
   1db02:	f04f 33ff 	mov.w	r3, #4294967295
   1db06:	e136      	b.n	1dd76 <z_impl_k_mutex_unlock+0x2c6>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   1db08:	687b      	ldr	r3, [r7, #4]
   1db0a:	68db      	ldr	r3, [r3, #12]
   1db0c:	2b00      	cmp	r3, #0
   1db0e:	d109      	bne.n	1db24 <z_impl_k_mutex_unlock+0x74>
   1db10:	23df      	movs	r3, #223	; 0xdf
   1db12:	4a9b      	ldr	r2, [pc, #620]	; (1dd80 <z_impl_k_mutex_unlock+0x2d0>)
   1db14:	499f      	ldr	r1, [pc, #636]	; (1dd94 <z_impl_k_mutex_unlock+0x2e4>)
   1db16:	489c      	ldr	r0, [pc, #624]	; (1dd88 <z_impl_k_mutex_unlock+0x2d8>)
   1db18:	f003 faa6 	bl	21068 <printk>
   1db1c:	21df      	movs	r1, #223	; 0xdf
   1db1e:	4898      	ldr	r0, [pc, #608]	; (1dd80 <z_impl_k_mutex_unlock+0x2d0>)
   1db20:	f004 fb4f 	bl	221c2 <assert_post_action>

	z_sched_lock();
   1db24:	f7ff fb20 	bl	1d168 <z_sched_lock>

	LOG_DBG("mutex %p lock_count: %d", mutex, mutex->lock_count);
   1db28:	2303      	movs	r3, #3
   1db2a:	2b03      	cmp	r3, #3
   1db2c:	d945      	bls.n	1dbba <z_impl_k_mutex_unlock+0x10a>
   1db2e:	f00a f9a6 	bl	27e7e <k_is_user_context>
   1db32:	4603      	mov	r3, r0
   1db34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
   1db38:	2300      	movs	r3, #0
   1db3a:	627b      	str	r3, [r7, #36]	; 0x24
   1db3c:	2303      	movs	r3, #3
   1db3e:	2b00      	cmp	r3, #0
   1db40:	d007      	beq.n	1db52 <z_impl_k_mutex_unlock+0xa2>
   1db42:	4b95      	ldr	r3, [pc, #596]	; (1dd98 <z_impl_k_mutex_unlock+0x2e8>)
   1db44:	681b      	ldr	r3, [r3, #0]
   1db46:	4618      	mov	r0, r3
   1db48:	f7ff fb52 	bl	1d1f0 <log_const_source_id>
   1db4c:	4603      	mov	r3, r0
   1db4e:	b29b      	uxth	r3, r3
   1db50:	e000      	b.n	1db54 <z_impl_k_mutex_unlock+0xa4>
   1db52:	2300      	movs	r3, #0
   1db54:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
   1db58:	f897 3020 	ldrb.w	r3, [r7, #32]
   1db5c:	2204      	movs	r2, #4
   1db5e:	f362 0302 	bfi	r3, r2, #0, #3
   1db62:	f887 3020 	strb.w	r3, [r7, #32]
   1db66:	f897 3020 	ldrb.w	r3, [r7, #32]
   1db6a:	f36f 03c5 	bfc	r3, #3, #3
   1db6e:	f887 3020 	strb.w	r3, [r7, #32]
   1db72:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
   1db76:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1db7a:	b29a      	uxth	r2, r3
   1db7c:	8c3b      	ldrh	r3, [r7, #32]
   1db7e:	f362 138f 	bfi	r3, r2, #6, #10
   1db82:	843b      	strh	r3, [r7, #32]
   1db84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   1db88:	2b00      	cmp	r3, #0
   1db8a:	d009      	beq.n	1dba0 <z_impl_k_mutex_unlock+0xf0>
   1db8c:	687b      	ldr	r3, [r7, #4]
   1db8e:	68db      	ldr	r3, [r3, #12]
   1db90:	9300      	str	r3, [sp, #0]
   1db92:	687b      	ldr	r3, [r7, #4]
   1db94:	4a81      	ldr	r2, [pc, #516]	; (1dd9c <z_impl_k_mutex_unlock+0x2ec>)
   1db96:	4982      	ldr	r1, [pc, #520]	; (1dda0 <z_impl_k_mutex_unlock+0x2f0>)
   1db98:	8c38      	ldrh	r0, [r7, #32]
   1db9a:	f7f5 fad9 	bl	13150 <log_from_user>
   1db9e:	e00d      	b.n	1dbbc <z_impl_k_mutex_unlock+0x10c>
   1dba0:	487e      	ldr	r0, [pc, #504]	; (1dd9c <z_impl_k_mutex_unlock+0x2ec>)
   1dba2:	687a      	ldr	r2, [r7, #4]
   1dba4:	687b      	ldr	r3, [r7, #4]
   1dba6:	68d9      	ldr	r1, [r3, #12]
   1dba8:	8c3b      	ldrh	r3, [r7, #32]
   1dbaa:	f8ad 3000 	strh.w	r3, [sp]
   1dbae:	460b      	mov	r3, r1
   1dbb0:	4601      	mov	r1, r0
   1dbb2:	487b      	ldr	r0, [pc, #492]	; (1dda0 <z_impl_k_mutex_unlock+0x2f0>)
   1dbb4:	f004 ffeb 	bl	22b8e <log_3>
   1dbb8:	e000      	b.n	1dbbc <z_impl_k_mutex_unlock+0x10c>
   1dbba:	bf00      	nop

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1dbbc:	687b      	ldr	r3, [r7, #4]
   1dbbe:	68db      	ldr	r3, [r3, #12]
   1dbc0:	2b01      	cmp	r3, #1
   1dbc2:	d905      	bls.n	1dbd0 <z_impl_k_mutex_unlock+0x120>
		mutex->lock_count--;
   1dbc4:	687b      	ldr	r3, [r7, #4]
   1dbc6:	68db      	ldr	r3, [r3, #12]
   1dbc8:	1e5a      	subs	r2, r3, #1
   1dbca:	687b      	ldr	r3, [r7, #4]
   1dbcc:	60da      	str	r2, [r3, #12]
		goto k_mutex_unlock_return;
   1dbce:	e0cf      	b.n	1dd70 <z_impl_k_mutex_unlock+0x2c0>
   1dbd0:	4b74      	ldr	r3, [pc, #464]	; (1dda4 <z_impl_k_mutex_unlock+0x2f4>)
   1dbd2:	64fb      	str	r3, [r7, #76]	; 0x4c
	__asm__ volatile(
   1dbd4:	f04f 0320 	mov.w	r3, #32
   1dbd8:	f3ef 8211 	mrs	r2, BASEPRI
   1dbdc:	f383 8811 	msr	BASEPRI, r3
   1dbe0:	f3bf 8f6f 	isb	sy
   1dbe4:	64ba      	str	r2, [r7, #72]	; 0x48
   1dbe6:	647b      	str	r3, [r7, #68]	; 0x44
	return key;
   1dbe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	k.key = arch_irq_lock();
   1dbea:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1dbec:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   1dbee:	f7ff fa2b 	bl	1d048 <z_spin_lock_valid>
   1dbf2:	4603      	mov	r3, r0
   1dbf4:	f083 0301 	eor.w	r3, r3, #1
   1dbf8:	b2db      	uxtb	r3, r3
   1dbfa:	2b00      	cmp	r3, #0
   1dbfc:	d00d      	beq.n	1dc1a <z_impl_k_mutex_unlock+0x16a>
   1dbfe:	2381      	movs	r3, #129	; 0x81
   1dc00:	4a69      	ldr	r2, [pc, #420]	; (1dda8 <z_impl_k_mutex_unlock+0x2f8>)
   1dc02:	496a      	ldr	r1, [pc, #424]	; (1ddac <z_impl_k_mutex_unlock+0x2fc>)
   1dc04:	4860      	ldr	r0, [pc, #384]	; (1dd88 <z_impl_k_mutex_unlock+0x2d8>)
   1dc06:	f003 fa2f 	bl	21068 <printk>
   1dc0a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   1dc0c:	4868      	ldr	r0, [pc, #416]	; (1ddb0 <z_impl_k_mutex_unlock+0x300>)
   1dc0e:	f003 fa2b 	bl	21068 <printk>
   1dc12:	2181      	movs	r1, #129	; 0x81
   1dc14:	4864      	ldr	r0, [pc, #400]	; (1dda8 <z_impl_k_mutex_unlock+0x2f8>)
   1dc16:	f004 fad4 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1dc1a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   1dc1c:	f7ff fa4c 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1dc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1dc22:	633b      	str	r3, [r7, #48]	; 0x30
	}

	k_spinlock_key_t key = k_spin_lock(&lock);

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1dc24:	687b      	ldr	r3, [r7, #4]
   1dc26:	691b      	ldr	r3, [r3, #16]
   1dc28:	4619      	mov	r1, r3
   1dc2a:	6878      	ldr	r0, [r7, #4]
   1dc2c:	f7ff faf0 	bl	1d210 <adjust_owner_prio>

	/* Get the new owner, if any */
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1dc30:	687b      	ldr	r3, [r7, #4]
   1dc32:	4618      	mov	r0, r3
   1dc34:	f001 fa4c 	bl	1f0d0 <z_unpend_first_thread>
   1dc38:	65b8      	str	r0, [r7, #88]	; 0x58

	mutex->owner = new_owner;
   1dc3a:	687b      	ldr	r3, [r7, #4]
   1dc3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
   1dc3e:	609a      	str	r2, [r3, #8]

	LOG_DBG("new owner of mutex %p: %p (prio: %d)",
   1dc40:	2303      	movs	r3, #3
   1dc42:	2b03      	cmp	r3, #3
   1dc44:	d953      	bls.n	1dcee <z_impl_k_mutex_unlock+0x23e>
   1dc46:	f00a f91a 	bl	27e7e <k_is_user_context>
   1dc4a:	4603      	mov	r3, r0
   1dc4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
   1dc50:	2300      	movs	r3, #0
   1dc52:	61fb      	str	r3, [r7, #28]
   1dc54:	2303      	movs	r3, #3
   1dc56:	2b00      	cmp	r3, #0
   1dc58:	d007      	beq.n	1dc6a <z_impl_k_mutex_unlock+0x1ba>
   1dc5a:	4b4f      	ldr	r3, [pc, #316]	; (1dd98 <z_impl_k_mutex_unlock+0x2e8>)
   1dc5c:	681b      	ldr	r3, [r3, #0]
   1dc5e:	4618      	mov	r0, r3
   1dc60:	f7ff fac6 	bl	1d1f0 <log_const_source_id>
   1dc64:	4603      	mov	r3, r0
   1dc66:	b29b      	uxth	r3, r3
   1dc68:	e000      	b.n	1dc6c <z_impl_k_mutex_unlock+0x1bc>
   1dc6a:	2300      	movs	r3, #0
   1dc6c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
   1dc70:	7e3b      	ldrb	r3, [r7, #24]
   1dc72:	2204      	movs	r2, #4
   1dc74:	f362 0302 	bfi	r3, r2, #0, #3
   1dc78:	763b      	strb	r3, [r7, #24]
   1dc7a:	7e3b      	ldrb	r3, [r7, #24]
   1dc7c:	f36f 03c5 	bfc	r3, #3, #3
   1dc80:	763b      	strb	r3, [r7, #24]
   1dc82:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   1dc86:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1dc8a:	b29a      	uxth	r2, r3
   1dc8c:	8b3b      	ldrh	r3, [r7, #24]
   1dc8e:	f362 138f 	bfi	r3, r2, #6, #10
   1dc92:	833b      	strh	r3, [r7, #24]
   1dc94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
   1dc98:	2b00      	cmp	r3, #0
   1dc9a:	d011      	beq.n	1dcc0 <z_impl_k_mutex_unlock+0x210>
   1dc9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1dc9e:	2b00      	cmp	r3, #0
   1dca0:	d003      	beq.n	1dcaa <z_impl_k_mutex_unlock+0x1fa>
   1dca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1dca4:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1dca8:	e000      	b.n	1dcac <z_impl_k_mutex_unlock+0x1fc>
   1dcaa:	4b42      	ldr	r3, [pc, #264]	; (1ddb4 <z_impl_k_mutex_unlock+0x304>)
   1dcac:	9301      	str	r3, [sp, #4]
   1dcae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1dcb0:	9300      	str	r3, [sp, #0]
   1dcb2:	687b      	ldr	r3, [r7, #4]
   1dcb4:	4a39      	ldr	r2, [pc, #228]	; (1dd9c <z_impl_k_mutex_unlock+0x2ec>)
   1dcb6:	4940      	ldr	r1, [pc, #256]	; (1ddb8 <z_impl_k_mutex_unlock+0x308>)
   1dcb8:	8b38      	ldrh	r0, [r7, #24]
   1dcba:	f7f5 fa49 	bl	13150 <log_from_user>
   1dcbe:	e017      	b.n	1dcf0 <z_impl_k_mutex_unlock+0x240>
   1dcc0:	4b36      	ldr	r3, [pc, #216]	; (1dd9c <z_impl_k_mutex_unlock+0x2ec>)
   1dcc2:	60bb      	str	r3, [r7, #8]
   1dcc4:	687b      	ldr	r3, [r7, #4]
   1dcc6:	60fb      	str	r3, [r7, #12]
   1dcc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1dcca:	613b      	str	r3, [r7, #16]
   1dccc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1dcce:	2b00      	cmp	r3, #0
   1dcd0:	d003      	beq.n	1dcda <z_impl_k_mutex_unlock+0x22a>
   1dcd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1dcd4:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1dcd8:	e000      	b.n	1dcdc <z_impl_k_mutex_unlock+0x22c>
   1dcda:	4b36      	ldr	r3, [pc, #216]	; (1ddb4 <z_impl_k_mutex_unlock+0x304>)
   1dcdc:	617b      	str	r3, [r7, #20]
   1dcde:	f107 0108 	add.w	r1, r7, #8
   1dce2:	8b3b      	ldrh	r3, [r7, #24]
   1dce4:	2204      	movs	r2, #4
   1dce6:	4834      	ldr	r0, [pc, #208]	; (1ddb8 <z_impl_k_mutex_unlock+0x308>)
   1dce8:	f004 ff6b 	bl	22bc2 <log_n>
   1dcec:	e000      	b.n	1dcf0 <z_impl_k_mutex_unlock+0x240>
   1dcee:	bf00      	nop
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner != NULL) {
   1dcf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1dcf2:	2b00      	cmp	r3, #0
   1dcf4:	d015      	beq.n	1dd22 <z_impl_k_mutex_unlock+0x272>
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner_orig_prio = new_owner->base.prio;
   1dcf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1dcf8:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1dcfc:	461a      	mov	r2, r3
   1dcfe:	687b      	ldr	r3, [r7, #4]
   1dd00:	611a      	str	r2, [r3, #16]
   1dd02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1dd04:	643b      	str	r3, [r7, #64]	; 0x40
   1dd06:	2300      	movs	r3, #0
   1dd08:	63fb      	str	r3, [r7, #60]	; 0x3c
	thread->arch.swap_return_value = value;
   1dd0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dd0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1dd0e:	679a      	str	r2, [r3, #120]	; 0x78
}
   1dd10:	bf00      	nop
		arch_thread_return_value_set(new_owner, 0);
		z_ready_thread(new_owner);
   1dd12:	6db8      	ldr	r0, [r7, #88]	; 0x58
   1dd14:	f000 fd46 	bl	1e7a4 <z_ready_thread>
		z_reschedule(&lock, key);
   1dd18:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1dd1a:	4822      	ldr	r0, [pc, #136]	; (1dda4 <z_impl_k_mutex_unlock+0x2f4>)
   1dd1c:	f001 fbec 	bl	1f4f8 <z_reschedule>
   1dd20:	e026      	b.n	1dd70 <z_impl_k_mutex_unlock+0x2c0>
	} else {
		mutex->lock_count = 0U;
   1dd22:	687b      	ldr	r3, [r7, #4]
   1dd24:	2200      	movs	r2, #0
   1dd26:	60da      	str	r2, [r3, #12]
   1dd28:	4b1e      	ldr	r3, [pc, #120]	; (1dda4 <z_impl_k_mutex_unlock+0x2f4>)
   1dd2a:	63bb      	str	r3, [r7, #56]	; 0x38
   1dd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1dd2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1dd30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1dd32:	f7ff f9a5 	bl	1d080 <z_spin_unlock_valid>
   1dd36:	4603      	mov	r3, r0
   1dd38:	f083 0301 	eor.w	r3, r3, #1
   1dd3c:	b2db      	uxtb	r3, r3
   1dd3e:	2b00      	cmp	r3, #0
   1dd40:	d00d      	beq.n	1dd5e <z_impl_k_mutex_unlock+0x2ae>
   1dd42:	23ac      	movs	r3, #172	; 0xac
   1dd44:	4a18      	ldr	r2, [pc, #96]	; (1dda8 <z_impl_k_mutex_unlock+0x2f8>)
   1dd46:	491d      	ldr	r1, [pc, #116]	; (1ddbc <z_impl_k_mutex_unlock+0x30c>)
   1dd48:	480f      	ldr	r0, [pc, #60]	; (1dd88 <z_impl_k_mutex_unlock+0x2d8>)
   1dd4a:	f003 f98d 	bl	21068 <printk>
   1dd4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1dd50:	481b      	ldr	r0, [pc, #108]	; (1ddc0 <z_impl_k_mutex_unlock+0x310>)
   1dd52:	f003 f989 	bl	21068 <printk>
   1dd56:	21ac      	movs	r1, #172	; 0xac
   1dd58:	4813      	ldr	r0, [pc, #76]	; (1dda8 <z_impl_k_mutex_unlock+0x2f8>)
   1dd5a:	f004 fa32 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1dd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1dd60:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
   1dd62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1dd64:	f383 8811 	msr	BASEPRI, r3
   1dd68:	f3bf 8f6f 	isb	sy
}
   1dd6c:	bf00      	nop
}
   1dd6e:	bf00      	nop


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1dd70:	f001 fc94 	bl	1f69c <k_sched_unlock>

	return 0;
   1dd74:	2300      	movs	r3, #0
}
   1dd76:	4618      	mov	r0, r3
   1dd78:	3760      	adds	r7, #96	; 0x60
   1dd7a:	46bd      	mov	sp, r7
   1dd7c:	bd80      	pop	{r7, pc}
   1dd7e:	bf00      	nop
   1dd80:	0002c248 	.word	0x0002c248
   1dd84:	0002c1a4 	.word	0x0002c1a4
   1dd88:	0002c1b8 	.word	0x0002c1b8
   1dd8c:	0002c26c 	.word	0x0002c26c
   1dd90:	2001517c 	.word	0x2001517c
   1dd94:	0002c3f4 	.word	0x0002c3f4
   1dd98:	20014574 	.word	0x20014574
   1dd9c:	0002cde4 	.word	0x0002cde4
   1dda0:	0002c40c 	.word	0x0002c40c
   1dda4:	200151ac 	.word	0x200151ac
   1dda8:	0002c294 	.word	0x0002c294
   1ddac:	0002c2bc 	.word	0x0002c2bc
   1ddb0:	0002c2d4 	.word	0x0002c2d4
   1ddb4:	fffffc18 	.word	0xfffffc18
   1ddb8:	0002c428 	.word	0x0002c428
   1ddbc:	0002c31c 	.word	0x0002c31c
   1ddc0:	0002c334 	.word	0x0002c334

0001ddc4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1ddc4:	b580      	push	{r7, lr}
   1ddc6:	b08a      	sub	sp, #40	; 0x28
   1ddc8:	af00      	add	r7, sp, #0
   1ddca:	6078      	str	r0, [r7, #4]
   1ddcc:	4b2b      	ldr	r3, [pc, #172]	; (1de7c <z_impl_k_sem_give+0xb8>)
   1ddce:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   1ddd0:	f04f 0320 	mov.w	r3, #32
   1ddd4:	f3ef 8211 	mrs	r2, BASEPRI
   1ddd8:	f383 8811 	msr	BASEPRI, r3
   1dddc:	f3bf 8f6f 	isb	sy
   1dde0:	61fa      	str	r2, [r7, #28]
   1dde2:	61bb      	str	r3, [r7, #24]
	return key;
   1dde4:	69fb      	ldr	r3, [r7, #28]
	k.key = arch_irq_lock();
   1dde6:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1dde8:	6a38      	ldr	r0, [r7, #32]
   1ddea:	f7ff f92d 	bl	1d048 <z_spin_lock_valid>
   1ddee:	4603      	mov	r3, r0
   1ddf0:	f083 0301 	eor.w	r3, r3, #1
   1ddf4:	b2db      	uxtb	r3, r3
   1ddf6:	2b00      	cmp	r3, #0
   1ddf8:	d00d      	beq.n	1de16 <z_impl_k_sem_give+0x52>
   1ddfa:	2381      	movs	r3, #129	; 0x81
   1ddfc:	4a20      	ldr	r2, [pc, #128]	; (1de80 <z_impl_k_sem_give+0xbc>)
   1ddfe:	4921      	ldr	r1, [pc, #132]	; (1de84 <z_impl_k_sem_give+0xc0>)
   1de00:	4821      	ldr	r0, [pc, #132]	; (1de88 <z_impl_k_sem_give+0xc4>)
   1de02:	f003 f931 	bl	21068 <printk>
   1de06:	6a39      	ldr	r1, [r7, #32]
   1de08:	4820      	ldr	r0, [pc, #128]	; (1de8c <z_impl_k_sem_give+0xc8>)
   1de0a:	f003 f92d 	bl	21068 <printk>
   1de0e:	2181      	movs	r1, #129	; 0x81
   1de10:	481b      	ldr	r0, [pc, #108]	; (1de80 <z_impl_k_sem_give+0xbc>)
   1de12:	f004 f9d6 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1de16:	6a38      	ldr	r0, [r7, #32]
   1de18:	f7ff f94e 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1de1c:	68bb      	ldr	r3, [r7, #8]
   1de1e:	60fb      	str	r3, [r7, #12]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1de20:	687b      	ldr	r3, [r7, #4]
   1de22:	4618      	mov	r0, r3
   1de24:	f001 f954 	bl	1f0d0 <z_unpend_first_thread>
   1de28:	6278      	str	r0, [r7, #36]	; 0x24

	if (thread != NULL) {
   1de2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1de2c:	2b00      	cmp	r3, #0
   1de2e:	d00b      	beq.n	1de48 <z_impl_k_sem_give+0x84>
   1de30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1de32:	617b      	str	r3, [r7, #20]
   1de34:	2300      	movs	r3, #0
   1de36:	613b      	str	r3, [r7, #16]
	thread->arch.swap_return_value = value;
   1de38:	697b      	ldr	r3, [r7, #20]
   1de3a:	693a      	ldr	r2, [r7, #16]
   1de3c:	679a      	str	r2, [r3, #120]	; 0x78
}
   1de3e:	bf00      	nop
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1de40:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1de42:	f000 fcaf 	bl	1e7a4 <z_ready_thread>
   1de46:	e010      	b.n	1de6a <z_impl_k_sem_give+0xa6>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1de48:	687b      	ldr	r3, [r7, #4]
   1de4a:	689b      	ldr	r3, [r3, #8]
   1de4c:	687a      	ldr	r2, [r7, #4]
   1de4e:	6891      	ldr	r1, [r2, #8]
   1de50:	687a      	ldr	r2, [r7, #4]
   1de52:	68d2      	ldr	r2, [r2, #12]
   1de54:	4291      	cmp	r1, r2
   1de56:	d001      	beq.n	1de5c <z_impl_k_sem_give+0x98>
   1de58:	2201      	movs	r2, #1
   1de5a:	e000      	b.n	1de5e <z_impl_k_sem_give+0x9a>
   1de5c:	2200      	movs	r2, #0
   1de5e:	441a      	add	r2, r3
   1de60:	687b      	ldr	r3, [r7, #4]
   1de62:	609a      	str	r2, [r3, #8]
		handle_poll_events(sem);
   1de64:	6878      	ldr	r0, [r7, #4]
   1de66:	f00a f94e 	bl	28106 <handle_poll_events>
	}

	z_reschedule(&lock, key);
   1de6a:	68f9      	ldr	r1, [r7, #12]
   1de6c:	4803      	ldr	r0, [pc, #12]	; (1de7c <z_impl_k_sem_give+0xb8>)
   1de6e:	f001 fb43 	bl	1f4f8 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1de72:	bf00      	nop
   1de74:	3728      	adds	r7, #40	; 0x28
   1de76:	46bd      	mov	sp, r7
   1de78:	bd80      	pop	{r7, pc}
   1de7a:	bf00      	nop
   1de7c:	200151b0 	.word	0x200151b0
   1de80:	0002c454 	.word	0x0002c454
   1de84:	0002c47c 	.word	0x0002c47c
   1de88:	0002c494 	.word	0x0002c494
   1de8c:	0002c4b4 	.word	0x0002c4b4

0001de90 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1de90:	b580      	push	{r7, lr}
   1de92:	b094      	sub	sp, #80	; 0x50
   1de94:	af02      	add	r7, sp, #8
   1de96:	60f8      	str	r0, [r7, #12]
   1de98:	e9c7 2300 	strd	r2, r3, [r7]
	int ret = 0;
   1de9c:	2300      	movs	r3, #0
   1de9e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1dea0:	f3ef 8305 	mrs	r3, IPSR
   1dea4:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
   1dea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1dea8:	2b00      	cmp	r3, #0
   1deaa:	bf14      	ite	ne
   1deac:	2301      	movne	r3, #1
   1deae:	2300      	moveq	r3, #0
   1deb0:	b2db      	uxtb	r3, r3

	__ASSERT(((arch_is_in_isr() == false) ||
   1deb2:	2b00      	cmp	r3, #0
   1deb4:	d016      	beq.n	1dee4 <z_impl_k_sem_take+0x54>
   1deb6:	e9d7 2300 	ldrd	r2, r3, [r7]
   1deba:	f04f 0000 	mov.w	r0, #0
   1debe:	f04f 0100 	mov.w	r1, #0
   1dec2:	428b      	cmp	r3, r1
   1dec4:	bf08      	it	eq
   1dec6:	4282      	cmpeq	r2, r0
   1dec8:	d00c      	beq.n	1dee4 <z_impl_k_sem_take+0x54>
   1deca:	2379      	movs	r3, #121	; 0x79
   1decc:	4a56      	ldr	r2, [pc, #344]	; (1e028 <z_impl_k_sem_take+0x198>)
   1dece:	4957      	ldr	r1, [pc, #348]	; (1e02c <z_impl_k_sem_take+0x19c>)
   1ded0:	4857      	ldr	r0, [pc, #348]	; (1e030 <z_impl_k_sem_take+0x1a0>)
   1ded2:	f003 f8c9 	bl	21068 <printk>
   1ded6:	4857      	ldr	r0, [pc, #348]	; (1e034 <z_impl_k_sem_take+0x1a4>)
   1ded8:	f003 f8c6 	bl	21068 <printk>
   1dedc:	2179      	movs	r1, #121	; 0x79
   1dede:	4852      	ldr	r0, [pc, #328]	; (1e028 <z_impl_k_sem_take+0x198>)
   1dee0:	f004 f96f 	bl	221c2 <assert_post_action>
   1dee4:	4b54      	ldr	r3, [pc, #336]	; (1e038 <z_impl_k_sem_take+0x1a8>)
   1dee6:	63fb      	str	r3, [r7, #60]	; 0x3c
	__asm__ volatile(
   1dee8:	f04f 0320 	mov.w	r3, #32
   1deec:	f3ef 8211 	mrs	r2, BASEPRI
   1def0:	f383 8811 	msr	BASEPRI, r3
   1def4:	f3bf 8f6f 	isb	sy
   1def8:	63ba      	str	r2, [r7, #56]	; 0x38
   1defa:	637b      	str	r3, [r7, #52]	; 0x34
	return key;
   1defc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	k.key = arch_irq_lock();
   1defe:	61bb      	str	r3, [r7, #24]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1df00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1df02:	f7ff f8a1 	bl	1d048 <z_spin_lock_valid>
   1df06:	4603      	mov	r3, r0
   1df08:	f083 0301 	eor.w	r3, r3, #1
   1df0c:	b2db      	uxtb	r3, r3
   1df0e:	2b00      	cmp	r3, #0
   1df10:	d00d      	beq.n	1df2e <z_impl_k_sem_take+0x9e>
   1df12:	2381      	movs	r3, #129	; 0x81
   1df14:	4a49      	ldr	r2, [pc, #292]	; (1e03c <z_impl_k_sem_take+0x1ac>)
   1df16:	494a      	ldr	r1, [pc, #296]	; (1e040 <z_impl_k_sem_take+0x1b0>)
   1df18:	4845      	ldr	r0, [pc, #276]	; (1e030 <z_impl_k_sem_take+0x1a0>)
   1df1a:	f003 f8a5 	bl	21068 <printk>
   1df1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1df20:	4848      	ldr	r0, [pc, #288]	; (1e044 <z_impl_k_sem_take+0x1b4>)
   1df22:	f003 f8a1 	bl	21068 <printk>
   1df26:	2181      	movs	r1, #129	; 0x81
   1df28:	4844      	ldr	r0, [pc, #272]	; (1e03c <z_impl_k_sem_take+0x1ac>)
   1df2a:	f004 f94a 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1df2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   1df30:	f7ff f8c2 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1df34:	69bb      	ldr	r3, [r7, #24]
   1df36:	623b      	str	r3, [r7, #32]

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1df38:	68fb      	ldr	r3, [r7, #12]
   1df3a:	689b      	ldr	r3, [r3, #8]
   1df3c:	2b00      	cmp	r3, #0
   1df3e:	bf14      	ite	ne
   1df40:	2301      	movne	r3, #1
   1df42:	2300      	moveq	r3, #0
   1df44:	b2db      	uxtb	r3, r3
   1df46:	2b00      	cmp	r3, #0
   1df48:	d02b      	beq.n	1dfa2 <z_impl_k_sem_take+0x112>
		sem->count--;
   1df4a:	68fb      	ldr	r3, [r7, #12]
   1df4c:	689b      	ldr	r3, [r3, #8]
   1df4e:	1e5a      	subs	r2, r3, #1
   1df50:	68fb      	ldr	r3, [r7, #12]
   1df52:	609a      	str	r2, [r3, #8]
   1df54:	4b38      	ldr	r3, [pc, #224]	; (1e038 <z_impl_k_sem_take+0x1a8>)
   1df56:	633b      	str	r3, [r7, #48]	; 0x30
   1df58:	6a3b      	ldr	r3, [r7, #32]
   1df5a:	61fb      	str	r3, [r7, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1df5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1df5e:	f7ff f88f 	bl	1d080 <z_spin_unlock_valid>
   1df62:	4603      	mov	r3, r0
   1df64:	f083 0301 	eor.w	r3, r3, #1
   1df68:	b2db      	uxtb	r3, r3
   1df6a:	2b00      	cmp	r3, #0
   1df6c:	d00d      	beq.n	1df8a <z_impl_k_sem_take+0xfa>
   1df6e:	23ac      	movs	r3, #172	; 0xac
   1df70:	4a32      	ldr	r2, [pc, #200]	; (1e03c <z_impl_k_sem_take+0x1ac>)
   1df72:	4935      	ldr	r1, [pc, #212]	; (1e048 <z_impl_k_sem_take+0x1b8>)
   1df74:	482e      	ldr	r0, [pc, #184]	; (1e030 <z_impl_k_sem_take+0x1a0>)
   1df76:	f003 f877 	bl	21068 <printk>
   1df7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1df7c:	4833      	ldr	r0, [pc, #204]	; (1e04c <z_impl_k_sem_take+0x1bc>)
   1df7e:	f003 f873 	bl	21068 <printk>
   1df82:	21ac      	movs	r1, #172	; 0xac
   1df84:	482d      	ldr	r0, [pc, #180]	; (1e03c <z_impl_k_sem_take+0x1ac>)
   1df86:	f004 f91c 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1df8a:	69fb      	ldr	r3, [r7, #28]
   1df8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   1df8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1df90:	f383 8811 	msr	BASEPRI, r3
   1df94:	f3bf 8f6f 	isb	sy
}
   1df98:	bf00      	nop
}
   1df9a:	bf00      	nop
		k_spin_unlock(&lock, key);
		ret = 0;
   1df9c:	2300      	movs	r3, #0
   1df9e:	647b      	str	r3, [r7, #68]	; 0x44
		goto out;
   1dfa0:	e03c      	b.n	1e01c <z_impl_k_sem_take+0x18c>
	}

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1dfa2:	e9d7 2300 	ldrd	r2, r3, [r7]
   1dfa6:	f04f 0000 	mov.w	r0, #0
   1dfaa:	f04f 0100 	mov.w	r1, #0
   1dfae:	428b      	cmp	r3, r1
   1dfb0:	bf08      	it	eq
   1dfb2:	4282      	cmpeq	r2, r0
   1dfb4:	d127      	bne.n	1e006 <z_impl_k_sem_take+0x176>
   1dfb6:	4b20      	ldr	r3, [pc, #128]	; (1e038 <z_impl_k_sem_take+0x1a8>)
   1dfb8:	62bb      	str	r3, [r7, #40]	; 0x28
   1dfba:	6a3b      	ldr	r3, [r7, #32]
   1dfbc:	617b      	str	r3, [r7, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1dfbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1dfc0:	f7ff f85e 	bl	1d080 <z_spin_unlock_valid>
   1dfc4:	4603      	mov	r3, r0
   1dfc6:	f083 0301 	eor.w	r3, r3, #1
   1dfca:	b2db      	uxtb	r3, r3
   1dfcc:	2b00      	cmp	r3, #0
   1dfce:	d00d      	beq.n	1dfec <z_impl_k_sem_take+0x15c>
   1dfd0:	23ac      	movs	r3, #172	; 0xac
   1dfd2:	4a1a      	ldr	r2, [pc, #104]	; (1e03c <z_impl_k_sem_take+0x1ac>)
   1dfd4:	491c      	ldr	r1, [pc, #112]	; (1e048 <z_impl_k_sem_take+0x1b8>)
   1dfd6:	4816      	ldr	r0, [pc, #88]	; (1e030 <z_impl_k_sem_take+0x1a0>)
   1dfd8:	f003 f846 	bl	21068 <printk>
   1dfdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1dfde:	481b      	ldr	r0, [pc, #108]	; (1e04c <z_impl_k_sem_take+0x1bc>)
   1dfe0:	f003 f842 	bl	21068 <printk>
   1dfe4:	21ac      	movs	r1, #172	; 0xac
   1dfe6:	4815      	ldr	r0, [pc, #84]	; (1e03c <z_impl_k_sem_take+0x1ac>)
   1dfe8:	f004 f8eb 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1dfec:	697b      	ldr	r3, [r7, #20]
   1dfee:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   1dff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1dff2:	f383 8811 	msr	BASEPRI, r3
   1dff6:	f3bf 8f6f 	isb	sy
}
   1dffa:	bf00      	nop
}
   1dffc:	bf00      	nop
		k_spin_unlock(&lock, key);
		ret = -EBUSY;
   1dffe:	f06f 030f 	mvn.w	r3, #15
   1e002:	647b      	str	r3, [r7, #68]	; 0x44
   1e004:	e00a      	b.n	1e01c <z_impl_k_sem_take+0x18c>
		goto out;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_sem, take, sem, timeout);

	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1e006:	68f9      	ldr	r1, [r7, #12]
   1e008:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e00c:	e9cd 2300 	strd	r2, r3, [sp]
   1e010:	460a      	mov	r2, r1
   1e012:	6a39      	ldr	r1, [r7, #32]
   1e014:	4808      	ldr	r0, [pc, #32]	; (1e038 <z_impl_k_sem_take+0x1a8>)
   1e016:	f000 ff9d 	bl	1ef54 <z_pend_curr>
   1e01a:	6478      	str	r0, [r7, #68]	; 0x44

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
   1e01c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   1e01e:	4618      	mov	r0, r3
   1e020:	3748      	adds	r7, #72	; 0x48
   1e022:	46bd      	mov	sp, r7
   1e024:	bd80      	pop	{r7, pc}
   1e026:	bf00      	nop
   1e028:	0002c4cc 	.word	0x0002c4cc
   1e02c:	0002c4ec 	.word	0x0002c4ec
   1e030:	0002c494 	.word	0x0002c494
   1e034:	0002c53c 	.word	0x0002c53c
   1e038:	200151b0 	.word	0x200151b0
   1e03c:	0002c454 	.word	0x0002c454
   1e040:	0002c47c 	.word	0x0002c47c
   1e044:	0002c4b4 	.word	0x0002c4b4
   1e048:	0002c540 	.word	0x0002c540
   1e04c:	0002c558 	.word	0x0002c558

0001e050 <z_add_thread_timeout>:
{
   1e050:	b580      	push	{r7, lr}
   1e052:	b084      	sub	sp, #16
   1e054:	af00      	add	r7, sp, #0
   1e056:	60f8      	str	r0, [r7, #12]
   1e058:	e9c7 2300 	strd	r2, r3, [r7]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1e05c:	68fb      	ldr	r3, [r7, #12]
   1e05e:	f103 0018 	add.w	r0, r3, #24
   1e062:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e066:	4903      	ldr	r1, [pc, #12]	; (1e074 <z_add_thread_timeout+0x24>)
   1e068:	f002 f872 	bl	20150 <z_add_timeout>
}
   1e06c:	bf00      	nop
   1e06e:	3710      	adds	r7, #16
   1e070:	46bd      	mov	sp, r7
   1e072:	bd80      	pop	{r7, pc}
   1e074:	0001ee19 	.word	0x0001ee19

0001e078 <z_is_idle_thread_object>:
{
   1e078:	b480      	push	{r7}
   1e07a:	b083      	sub	sp, #12
   1e07c:	af00      	add	r7, sp, #0
   1e07e:	6078      	str	r0, [r7, #4]
	return thread == &z_idle_threads[0];
   1e080:	687b      	ldr	r3, [r7, #4]
   1e082:	4a05      	ldr	r2, [pc, #20]	; (1e098 <z_is_idle_thread_object+0x20>)
   1e084:	4293      	cmp	r3, r2
   1e086:	bf0c      	ite	eq
   1e088:	2301      	moveq	r3, #1
   1e08a:	2300      	movne	r3, #0
   1e08c:	b2db      	uxtb	r3, r3
}
   1e08e:	4618      	mov	r0, r3
   1e090:	370c      	adds	r7, #12
   1e092:	46bd      	mov	sp, r7
   1e094:	bc80      	pop	{r7}
   1e096:	4770      	bx	lr
   1e098:	20014b20 	.word	0x20014b20

0001e09c <z_sched_lock>:
{
   1e09c:	b580      	push	{r7, lr}
   1e09e:	b082      	sub	sp, #8
   1e0a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1e0a2:	f3ef 8305 	mrs	r3, IPSR
   1e0a6:	607b      	str	r3, [r7, #4]
  return(result);
   1e0a8:	687b      	ldr	r3, [r7, #4]
   1e0aa:	2b00      	cmp	r3, #0
   1e0ac:	bf14      	ite	ne
   1e0ae:	2301      	movne	r3, #1
   1e0b0:	2300      	moveq	r3, #0
   1e0b2:	b2db      	uxtb	r3, r3
	__ASSERT(!arch_is_in_isr(), "");
   1e0b4:	2b00      	cmp	r3, #0
   1e0b6:	d00c      	beq.n	1e0d2 <z_sched_lock+0x36>
   1e0b8:	23fd      	movs	r3, #253	; 0xfd
   1e0ba:	4a14      	ldr	r2, [pc, #80]	; (1e10c <z_sched_lock+0x70>)
   1e0bc:	4914      	ldr	r1, [pc, #80]	; (1e110 <z_sched_lock+0x74>)
   1e0be:	4815      	ldr	r0, [pc, #84]	; (1e114 <z_sched_lock+0x78>)
   1e0c0:	f002 ffd2 	bl	21068 <printk>
   1e0c4:	4814      	ldr	r0, [pc, #80]	; (1e118 <z_sched_lock+0x7c>)
   1e0c6:	f002 ffcf 	bl	21068 <printk>
   1e0ca:	21fd      	movs	r1, #253	; 0xfd
   1e0cc:	480f      	ldr	r0, [pc, #60]	; (1e10c <z_sched_lock+0x70>)
   1e0ce:	f004 f878 	bl	221c2 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   1e0d2:	4b12      	ldr	r3, [pc, #72]	; (1e11c <z_sched_lock+0x80>)
   1e0d4:	689b      	ldr	r3, [r3, #8]
   1e0d6:	7bdb      	ldrb	r3, [r3, #15]
   1e0d8:	2b01      	cmp	r3, #1
   1e0da:	d10c      	bne.n	1e0f6 <z_sched_lock+0x5a>
   1e0dc:	23fe      	movs	r3, #254	; 0xfe
   1e0de:	4a0b      	ldr	r2, [pc, #44]	; (1e10c <z_sched_lock+0x70>)
   1e0e0:	490f      	ldr	r1, [pc, #60]	; (1e120 <z_sched_lock+0x84>)
   1e0e2:	480c      	ldr	r0, [pc, #48]	; (1e114 <z_sched_lock+0x78>)
   1e0e4:	f002 ffc0 	bl	21068 <printk>
   1e0e8:	480b      	ldr	r0, [pc, #44]	; (1e118 <z_sched_lock+0x7c>)
   1e0ea:	f002 ffbd 	bl	21068 <printk>
   1e0ee:	21fe      	movs	r1, #254	; 0xfe
   1e0f0:	4806      	ldr	r0, [pc, #24]	; (1e10c <z_sched_lock+0x70>)
   1e0f2:	f004 f866 	bl	221c2 <assert_post_action>
	--_current->base.sched_locked;
   1e0f6:	4b09      	ldr	r3, [pc, #36]	; (1e11c <z_sched_lock+0x80>)
   1e0f8:	689b      	ldr	r3, [r3, #8]
   1e0fa:	7bda      	ldrb	r2, [r3, #15]
   1e0fc:	3a01      	subs	r2, #1
   1e0fe:	b2d2      	uxtb	r2, r2
   1e100:	73da      	strb	r2, [r3, #15]
}
   1e102:	bf00      	nop
   1e104:	3708      	adds	r7, #8
   1e106:	46bd      	mov	sp, r7
   1e108:	bd80      	pop	{r7, pc}
   1e10a:	bf00      	nop
   1e10c:	0002c570 	.word	0x0002c570
   1e110:	0002c59c 	.word	0x0002c59c
   1e114:	0002c5b0 	.word	0x0002c5b0
   1e118:	0002c5d0 	.word	0x0002c5d0
   1e11c:	2001517c 	.word	0x2001517c
   1e120:	0002c5d4 	.word	0x0002c5d4

0001e124 <log_const_source_id>:
{
   1e124:	b480      	push	{r7}
   1e126:	b083      	sub	sp, #12
   1e128:	af00      	add	r7, sp, #0
   1e12a:	6078      	str	r0, [r7, #4]
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1e12c:	687b      	ldr	r3, [r7, #4]
   1e12e:	4a04      	ldr	r2, [pc, #16]	; (1e140 <log_const_source_id+0x1c>)
   1e130:	1a9b      	subs	r3, r3, r2
   1e132:	08db      	lsrs	r3, r3, #3
}
   1e134:	4618      	mov	r0, r3
   1e136:	370c      	adds	r7, #12
   1e138:	46bd      	mov	sp, r7
   1e13a:	bc80      	pop	{r7}
   1e13c:	4770      	bx	lr
   1e13e:	bf00      	nop
   1e140:	00029354 	.word	0x00029354

0001e144 <move_thread_to_end_of_prio_q>:
	return thread;
#endif
}

static void move_thread_to_end_of_prio_q(struct k_thread *thread)
{
   1e144:	b580      	push	{r7, lr}
   1e146:	b08a      	sub	sp, #40	; 0x28
   1e148:	af00      	add	r7, sp, #0
   1e14a:	6078      	str	r0, [r7, #4]
	if (z_is_thread_queued(thread)) {
   1e14c:	6878      	ldr	r0, [r7, #4]
   1e14e:	f00a fbb2 	bl	288b6 <z_is_thread_queued>
   1e152:	4603      	mov	r3, r0
   1e154:	2b00      	cmp	r3, #0
   1e156:	d015      	beq.n	1e184 <move_thread_to_end_of_prio_q+0x40>
   1e158:	4b43      	ldr	r3, [pc, #268]	; (1e268 <move_thread_to_end_of_prio_q+0x124>)
   1e15a:	627b      	str	r3, [r7, #36]	; 0x24
   1e15c:	687b      	ldr	r3, [r7, #4]
   1e15e:	623b      	str	r3, [r7, #32]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1e160:	6a3b      	ldr	r3, [r7, #32]
   1e162:	7b5b      	ldrb	r3, [r3, #13]
   1e164:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1e168:	b2da      	uxtb	r2, r3
   1e16a:	6a3b      	ldr	r3, [r7, #32]
   1e16c:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
   1e16e:	6a38      	ldr	r0, [r7, #32]
   1e170:	f00a fc6c 	bl	28a4c <should_queue_thread>
   1e174:	4603      	mov	r3, r0
   1e176:	2b00      	cmp	r3, #0
   1e178:	d003      	beq.n	1e182 <move_thread_to_end_of_prio_q+0x3e>
		_priq_run_remove(pq, thread);
   1e17a:	6a39      	ldr	r1, [r7, #32]
   1e17c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1e17e:	f001 fb8b 	bl	1f898 <z_priq_dumb_remove>
}
   1e182:	bf00      	nop
   1e184:	4b38      	ldr	r3, [pc, #224]	; (1e268 <move_thread_to_end_of_prio_q+0x124>)
   1e186:	61fb      	str	r3, [r7, #28]
   1e188:	687b      	ldr	r3, [r7, #4]
   1e18a:	61bb      	str	r3, [r7, #24]
	thread->base.thread_state |= _THREAD_QUEUED;
   1e18c:	69bb      	ldr	r3, [r7, #24]
   1e18e:	7b5b      	ldrb	r3, [r3, #13]
   1e190:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1e194:	b2da      	uxtb	r2, r3
   1e196:	69bb      	ldr	r3, [r7, #24]
   1e198:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
   1e19a:	69b8      	ldr	r0, [r7, #24]
   1e19c:	f00a fc56 	bl	28a4c <should_queue_thread>
   1e1a0:	4603      	mov	r3, r0
   1e1a2:	2b00      	cmp	r3, #0
   1e1a4:	d050      	beq.n	1e248 <move_thread_to_end_of_prio_q+0x104>
   1e1a6:	69fb      	ldr	r3, [r7, #28]
   1e1a8:	617b      	str	r3, [r7, #20]
   1e1aa:	69bb      	ldr	r3, [r7, #24]
   1e1ac:	613b      	str	r3, [r7, #16]

ALWAYS_INLINE void z_priq_dumb_add(sys_dlist_t *pq, struct k_thread *thread)
{
	struct k_thread *t;

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1e1ae:	6938      	ldr	r0, [r7, #16]
   1e1b0:	f7ff ff62 	bl	1e078 <z_is_idle_thread_object>
   1e1b4:	4603      	mov	r3, r0
   1e1b6:	2b00      	cmp	r3, #0
   1e1b8:	d00b      	beq.n	1e1d2 <move_thread_to_end_of_prio_q+0x8e>
   1e1ba:	f240 33a6 	movw	r3, #934	; 0x3a6
   1e1be:	4a2b      	ldr	r2, [pc, #172]	; (1e26c <move_thread_to_end_of_prio_q+0x128>)
   1e1c0:	492b      	ldr	r1, [pc, #172]	; (1e270 <move_thread_to_end_of_prio_q+0x12c>)
   1e1c2:	482c      	ldr	r0, [pc, #176]	; (1e274 <move_thread_to_end_of_prio_q+0x130>)
   1e1c4:	f002 ff50 	bl	21068 <printk>
   1e1c8:	f240 31a6 	movw	r1, #934	; 0x3a6
   1e1cc:	4827      	ldr	r0, [pc, #156]	; (1e26c <move_thread_to_end_of_prio_q+0x128>)
   1e1ce:	f003 fff8 	bl	221c2 <assert_post_action>

	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e1d2:	6978      	ldr	r0, [r7, #20]
   1e1d4:	f009 ffdf 	bl	28196 <sys_dlist_peek_head>
   1e1d8:	4603      	mov	r3, r0
   1e1da:	2b00      	cmp	r3, #0
   1e1dc:	d004      	beq.n	1e1e8 <move_thread_to_end_of_prio_q+0xa4>
   1e1de:	6978      	ldr	r0, [r7, #20]
   1e1e0:	f009 ffd9 	bl	28196 <sys_dlist_peek_head>
   1e1e4:	4603      	mov	r3, r0
   1e1e6:	e000      	b.n	1e1ea <move_thread_to_end_of_prio_q+0xa6>
   1e1e8:	2300      	movs	r3, #0
   1e1ea:	60fb      	str	r3, [r7, #12]
   1e1ec:	e024      	b.n	1e238 <move_thread_to_end_of_prio_q+0xf4>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1e1ee:	68f9      	ldr	r1, [r7, #12]
   1e1f0:	6938      	ldr	r0, [r7, #16]
   1e1f2:	f00a fc10 	bl	28a16 <z_sched_prio_cmp>
   1e1f6:	4603      	mov	r3, r0
   1e1f8:	2b00      	cmp	r3, #0
   1e1fa:	dd07      	ble.n	1e20c <move_thread_to_end_of_prio_q+0xc8>
			sys_dlist_insert(&t->base.qnode_dlist,
   1e1fc:	68fb      	ldr	r3, [r7, #12]
   1e1fe:	693a      	ldr	r2, [r7, #16]
   1e200:	4611      	mov	r1, r2
   1e202:	4618      	mov	r0, r3
   1e204:	f00a f818 	bl	28238 <sys_dlist_insert>
					 &thread->base.qnode_dlist);
			return;
   1e208:	bf00      	nop
}
   1e20a:	e01d      	b.n	1e248 <move_thread_to_end_of_prio_q+0x104>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e20c:	68fb      	ldr	r3, [r7, #12]
   1e20e:	2b00      	cmp	r3, #0
   1e210:	d010      	beq.n	1e234 <move_thread_to_end_of_prio_q+0xf0>
   1e212:	68fb      	ldr	r3, [r7, #12]
   1e214:	4619      	mov	r1, r3
   1e216:	6978      	ldr	r0, [r7, #20]
   1e218:	f009 ffe2 	bl	281e0 <sys_dlist_peek_next>
   1e21c:	4603      	mov	r3, r0
   1e21e:	2b00      	cmp	r3, #0
   1e220:	d006      	beq.n	1e230 <move_thread_to_end_of_prio_q+0xec>
   1e222:	68fb      	ldr	r3, [r7, #12]
   1e224:	4619      	mov	r1, r3
   1e226:	6978      	ldr	r0, [r7, #20]
   1e228:	f009 ffda 	bl	281e0 <sys_dlist_peek_next>
   1e22c:	4603      	mov	r3, r0
   1e22e:	e002      	b.n	1e236 <move_thread_to_end_of_prio_q+0xf2>
   1e230:	2300      	movs	r3, #0
   1e232:	e000      	b.n	1e236 <move_thread_to_end_of_prio_q+0xf2>
   1e234:	2300      	movs	r3, #0
   1e236:	60fb      	str	r3, [r7, #12]
   1e238:	68fb      	ldr	r3, [r7, #12]
   1e23a:	2b00      	cmp	r3, #0
   1e23c:	d1d7      	bne.n	1e1ee <move_thread_to_end_of_prio_q+0xaa>
		}
	}

	sys_dlist_append(pq, &thread->base.qnode_dlist);
   1e23e:	693b      	ldr	r3, [r7, #16]
   1e240:	4619      	mov	r1, r3
   1e242:	6978      	ldr	r0, [r7, #20]
   1e244:	f009 ffdf 	bl	28206 <sys_dlist_append>
}
   1e248:	bf00      	nop
	update_cache(thread == _current);
   1e24a:	4b0b      	ldr	r3, [pc, #44]	; (1e278 <move_thread_to_end_of_prio_q+0x134>)
   1e24c:	689b      	ldr	r3, [r3, #8]
   1e24e:	687a      	ldr	r2, [r7, #4]
   1e250:	429a      	cmp	r2, r3
   1e252:	bf0c      	ite	eq
   1e254:	2301      	moveq	r3, #1
   1e256:	2300      	movne	r3, #0
   1e258:	b2db      	uxtb	r3, r3
   1e25a:	4618      	mov	r0, r3
   1e25c:	f000 f9aa 	bl	1e5b4 <update_cache>
}
   1e260:	bf00      	nop
   1e262:	3728      	adds	r7, #40	; 0x28
   1e264:	46bd      	mov	sp, r7
   1e266:	bd80      	pop	{r7, pc}
   1e268:	200151a4 	.word	0x200151a4
   1e26c:	0002c608 	.word	0x0002c608
   1e270:	0002c62c 	.word	0x0002c62c
   1e274:	0002c5b0 	.word	0x0002c5b0
   1e278:	2001517c 	.word	0x2001517c

0001e27c <z_reset_time_slice>:
{
   1e27c:	b580      	push	{r7, lr}
   1e27e:	af00      	add	r7, sp, #0
	if (slice_time != 0) {
   1e280:	4b0a      	ldr	r3, [pc, #40]	; (1e2ac <z_reset_time_slice+0x30>)
   1e282:	681b      	ldr	r3, [r3, #0]
   1e284:	2b00      	cmp	r3, #0
   1e286:	d00e      	beq.n	1e2a6 <z_reset_time_slice+0x2a>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1e288:	f7f7 fba2 	bl	159d0 <sys_clock_elapsed>
   1e28c:	4603      	mov	r3, r0
   1e28e:	4a07      	ldr	r2, [pc, #28]	; (1e2ac <z_reset_time_slice+0x30>)
   1e290:	6812      	ldr	r2, [r2, #0]
   1e292:	4413      	add	r3, r2
   1e294:	461a      	mov	r2, r3
   1e296:	4b06      	ldr	r3, [pc, #24]	; (1e2b0 <z_reset_time_slice+0x34>)
   1e298:	611a      	str	r2, [r3, #16]
		z_set_timeout_expiry(slice_time, false);
   1e29a:	4b04      	ldr	r3, [pc, #16]	; (1e2ac <z_reset_time_slice+0x30>)
   1e29c:	681b      	ldr	r3, [r3, #0]
   1e29e:	2100      	movs	r1, #0
   1e2a0:	4618      	mov	r0, r3
   1e2a2:	f002 f989 	bl	205b8 <z_set_timeout_expiry>
}
   1e2a6:	bf00      	nop
   1e2a8:	bd80      	pop	{r7, pc}
   1e2aa:	bf00      	nop
   1e2ac:	200151b8 	.word	0x200151b8
   1e2b0:	2001517c 	.word	0x2001517c

0001e2b4 <k_sched_time_slice_set>:
{
   1e2b4:	b580      	push	{r7, lr}
   1e2b6:	b08c      	sub	sp, #48	; 0x30
   1e2b8:	af00      	add	r7, sp, #0
   1e2ba:	6078      	str	r0, [r7, #4]
   1e2bc:	6039      	str	r1, [r7, #0]
	LOCKED(&sched_spinlock) {
   1e2be:	2300      	movs	r3, #0
   1e2c0:	61bb      	str	r3, [r7, #24]
   1e2c2:	4b39      	ldr	r3, [pc, #228]	; (1e3a8 <k_sched_time_slice_set+0xf4>)
   1e2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   1e2c6:	f04f 0320 	mov.w	r3, #32
   1e2ca:	f3ef 8211 	mrs	r2, BASEPRI
   1e2ce:	f383 8811 	msr	BASEPRI, r3
   1e2d2:	f3bf 8f6f 	isb	sy
   1e2d6:	62ba      	str	r2, [r7, #40]	; 0x28
   1e2d8:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   1e2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
   1e2dc:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e2de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1e2e0:	f7fe feb2 	bl	1d048 <z_spin_lock_valid>
   1e2e4:	4603      	mov	r3, r0
   1e2e6:	f083 0301 	eor.w	r3, r3, #1
   1e2ea:	b2db      	uxtb	r3, r3
   1e2ec:	2b00      	cmp	r3, #0
   1e2ee:	d00d      	beq.n	1e30c <k_sched_time_slice_set+0x58>
   1e2f0:	2381      	movs	r3, #129	; 0x81
   1e2f2:	4a2e      	ldr	r2, [pc, #184]	; (1e3ac <k_sched_time_slice_set+0xf8>)
   1e2f4:	492e      	ldr	r1, [pc, #184]	; (1e3b0 <k_sched_time_slice_set+0xfc>)
   1e2f6:	482f      	ldr	r0, [pc, #188]	; (1e3b4 <k_sched_time_slice_set+0x100>)
   1e2f8:	f002 feb6 	bl	21068 <printk>
   1e2fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1e2fe:	482e      	ldr	r0, [pc, #184]	; (1e3b8 <k_sched_time_slice_set+0x104>)
   1e300:	f002 feb2 	bl	21068 <printk>
   1e304:	2181      	movs	r1, #129	; 0x81
   1e306:	4829      	ldr	r0, [pc, #164]	; (1e3ac <k_sched_time_slice_set+0xf8>)
   1e308:	f003 ff5b 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1e30c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1e30e:	f7fe fed3 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1e312:	68fb      	ldr	r3, [r7, #12]
   1e314:	617b      	str	r3, [r7, #20]
   1e316:	e03f      	b.n	1e398 <k_sched_time_slice_set+0xe4>
		_current_cpu->slice_ticks = 0;
   1e318:	4b28      	ldr	r3, [pc, #160]	; (1e3bc <k_sched_time_slice_set+0x108>)
   1e31a:	2200      	movs	r2, #0
   1e31c:	611a      	str	r2, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
   1e31e:	687b      	ldr	r3, [r7, #4]
   1e320:	4618      	mov	r0, r3
   1e322:	f009 ffc0 	bl	282a6 <k_ms_to_ticks_ceil32>
   1e326:	4603      	mov	r3, r0
   1e328:	461a      	mov	r2, r3
   1e32a:	4b25      	ldr	r3, [pc, #148]	; (1e3c0 <k_sched_time_slice_set+0x10c>)
   1e32c:	601a      	str	r2, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1e32e:	687b      	ldr	r3, [r7, #4]
   1e330:	2b00      	cmp	r3, #0
   1e332:	dd06      	ble.n	1e342 <k_sched_time_slice_set+0x8e>
			slice_time = MAX(2, slice_time);
   1e334:	4b22      	ldr	r3, [pc, #136]	; (1e3c0 <k_sched_time_slice_set+0x10c>)
   1e336:	681b      	ldr	r3, [r3, #0]
   1e338:	2b02      	cmp	r3, #2
   1e33a:	bfb8      	it	lt
   1e33c:	2302      	movlt	r3, #2
   1e33e:	4a20      	ldr	r2, [pc, #128]	; (1e3c0 <k_sched_time_slice_set+0x10c>)
   1e340:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
   1e342:	4a20      	ldr	r2, [pc, #128]	; (1e3c4 <k_sched_time_slice_set+0x110>)
   1e344:	683b      	ldr	r3, [r7, #0]
   1e346:	6013      	str	r3, [r2, #0]
		z_reset_time_slice();
   1e348:	f7ff ff98 	bl	1e27c <z_reset_time_slice>
   1e34c:	4b16      	ldr	r3, [pc, #88]	; (1e3a8 <k_sched_time_slice_set+0xf4>)
   1e34e:	623b      	str	r3, [r7, #32]
   1e350:	697b      	ldr	r3, [r7, #20]
   1e352:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e354:	6a38      	ldr	r0, [r7, #32]
   1e356:	f7fe fe93 	bl	1d080 <z_spin_unlock_valid>
   1e35a:	4603      	mov	r3, r0
   1e35c:	f083 0301 	eor.w	r3, r3, #1
   1e360:	b2db      	uxtb	r3, r3
   1e362:	2b00      	cmp	r3, #0
   1e364:	d00d      	beq.n	1e382 <k_sched_time_slice_set+0xce>
   1e366:	23ac      	movs	r3, #172	; 0xac
   1e368:	4a10      	ldr	r2, [pc, #64]	; (1e3ac <k_sched_time_slice_set+0xf8>)
   1e36a:	4917      	ldr	r1, [pc, #92]	; (1e3c8 <k_sched_time_slice_set+0x114>)
   1e36c:	4811      	ldr	r0, [pc, #68]	; (1e3b4 <k_sched_time_slice_set+0x100>)
   1e36e:	f002 fe7b 	bl	21068 <printk>
   1e372:	6a39      	ldr	r1, [r7, #32]
   1e374:	4815      	ldr	r0, [pc, #84]	; (1e3cc <k_sched_time_slice_set+0x118>)
   1e376:	f002 fe77 	bl	21068 <printk>
   1e37a:	21ac      	movs	r1, #172	; 0xac
   1e37c:	480b      	ldr	r0, [pc, #44]	; (1e3ac <k_sched_time_slice_set+0xf8>)
   1e37e:	f003 ff20 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1e382:	693b      	ldr	r3, [r7, #16]
   1e384:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   1e386:	69fb      	ldr	r3, [r7, #28]
   1e388:	f383 8811 	msr	BASEPRI, r3
   1e38c:	f3bf 8f6f 	isb	sy
}
   1e390:	bf00      	nop
}
   1e392:	bf00      	nop
	LOCKED(&sched_spinlock) {
   1e394:	2301      	movs	r3, #1
   1e396:	61bb      	str	r3, [r7, #24]
   1e398:	69bb      	ldr	r3, [r7, #24]
   1e39a:	2b00      	cmp	r3, #0
   1e39c:	d0bc      	beq.n	1e318 <k_sched_time_slice_set+0x64>
}
   1e39e:	bf00      	nop
   1e3a0:	bf00      	nop
   1e3a2:	3730      	adds	r7, #48	; 0x30
   1e3a4:	46bd      	mov	sp, r7
   1e3a6:	bd80      	pop	{r7, pc}
   1e3a8:	200151b4 	.word	0x200151b4
   1e3ac:	0002c650 	.word	0x0002c650
   1e3b0:	0002c678 	.word	0x0002c678
   1e3b4:	0002c5b0 	.word	0x0002c5b0
   1e3b8:	0002c690 	.word	0x0002c690
   1e3bc:	2001517c 	.word	0x2001517c
   1e3c0:	200151b8 	.word	0x200151b8
   1e3c4:	200151bc 	.word	0x200151bc
   1e3c8:	0002c6a8 	.word	0x0002c6a8
   1e3cc:	0002c6c0 	.word	0x0002c6c0

0001e3d0 <sliceable>:
{
   1e3d0:	b580      	push	{r7, lr}
   1e3d2:	b082      	sub	sp, #8
   1e3d4:	af00      	add	r7, sp, #0
   1e3d6:	6078      	str	r0, [r7, #4]
	return is_preempt(thread)
   1e3d8:	6878      	ldr	r0, [r7, #4]
   1e3da:	f00a fb02 	bl	289e2 <is_preempt>
   1e3de:	4603      	mov	r3, r0
		&& !z_is_idle_thread_object(thread);
   1e3e0:	2b00      	cmp	r3, #0
   1e3e2:	d023      	beq.n	1e42c <sliceable+0x5c>
		&& !z_is_thread_prevented_from_running(thread)
   1e3e4:	6878      	ldr	r0, [r7, #4]
   1e3e6:	f00a f9f3 	bl	287d0 <z_is_thread_prevented_from_running>
   1e3ea:	4603      	mov	r3, r0
   1e3ec:	f083 0301 	eor.w	r3, r3, #1
   1e3f0:	b2db      	uxtb	r3, r3
   1e3f2:	2b00      	cmp	r3, #0
   1e3f4:	d01a      	beq.n	1e42c <sliceable+0x5c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1e3f6:	687b      	ldr	r3, [r7, #4]
   1e3f8:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1e3fc:	461a      	mov	r2, r3
   1e3fe:	4b0e      	ldr	r3, [pc, #56]	; (1e438 <sliceable+0x68>)
   1e400:	681b      	ldr	r3, [r3, #0]
   1e402:	4619      	mov	r1, r3
   1e404:	4610      	mov	r0, r2
   1e406:	f00a fac4 	bl	28992 <z_is_prio_higher>
   1e40a:	4603      	mov	r3, r0
   1e40c:	f083 0301 	eor.w	r3, r3, #1
   1e410:	b2db      	uxtb	r3, r3
   1e412:	2b00      	cmp	r3, #0
   1e414:	d00a      	beq.n	1e42c <sliceable+0x5c>
		&& !z_is_idle_thread_object(thread);
   1e416:	6878      	ldr	r0, [r7, #4]
   1e418:	f7ff fe2e 	bl	1e078 <z_is_idle_thread_object>
   1e41c:	4603      	mov	r3, r0
   1e41e:	f083 0301 	eor.w	r3, r3, #1
   1e422:	b2db      	uxtb	r3, r3
   1e424:	2b00      	cmp	r3, #0
   1e426:	d001      	beq.n	1e42c <sliceable+0x5c>
   1e428:	2301      	movs	r3, #1
   1e42a:	e000      	b.n	1e42e <sliceable+0x5e>
   1e42c:	2300      	movs	r3, #0
}
   1e42e:	4618      	mov	r0, r3
   1e430:	3708      	adds	r7, #8
   1e432:	46bd      	mov	sp, r7
   1e434:	bd80      	pop	{r7, pc}
   1e436:	bf00      	nop
   1e438:	200151bc 	.word	0x200151bc

0001e43c <z_time_slice>:
{
   1e43c:	b580      	push	{r7, lr}
   1e43e:	b08e      	sub	sp, #56	; 0x38
   1e440:	af00      	add	r7, sp, #0
   1e442:	6078      	str	r0, [r7, #4]
   1e444:	4b51      	ldr	r3, [pc, #324]	; (1e58c <z_time_slice+0x150>)
   1e446:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
   1e448:	f04f 0320 	mov.w	r3, #32
   1e44c:	f3ef 8211 	mrs	r2, BASEPRI
   1e450:	f383 8811 	msr	BASEPRI, r3
   1e454:	f3bf 8f6f 	isb	sy
   1e458:	633a      	str	r2, [r7, #48]	; 0x30
   1e45a:	62fb      	str	r3, [r7, #44]	; 0x2c
	return key;
   1e45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	k.key = arch_irq_lock();
   1e45e:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e460:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1e462:	f7fe fdf1 	bl	1d048 <z_spin_lock_valid>
   1e466:	4603      	mov	r3, r0
   1e468:	f083 0301 	eor.w	r3, r3, #1
   1e46c:	b2db      	uxtb	r3, r3
   1e46e:	2b00      	cmp	r3, #0
   1e470:	d00d      	beq.n	1e48e <z_time_slice+0x52>
   1e472:	2381      	movs	r3, #129	; 0x81
   1e474:	4a46      	ldr	r2, [pc, #280]	; (1e590 <z_time_slice+0x154>)
   1e476:	4947      	ldr	r1, [pc, #284]	; (1e594 <z_time_slice+0x158>)
   1e478:	4847      	ldr	r0, [pc, #284]	; (1e598 <z_time_slice+0x15c>)
   1e47a:	f002 fdf5 	bl	21068 <printk>
   1e47e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1e480:	4846      	ldr	r0, [pc, #280]	; (1e59c <z_time_slice+0x160>)
   1e482:	f002 fdf1 	bl	21068 <printk>
   1e486:	2181      	movs	r1, #129	; 0x81
   1e488:	4841      	ldr	r0, [pc, #260]	; (1e590 <z_time_slice+0x154>)
   1e48a:	f003 fe9a 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1e48e:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1e490:	f7fe fe12 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1e494:	68fb      	ldr	r3, [r7, #12]
   1e496:	61bb      	str	r3, [r7, #24]
	if (pending_current == _current) {
   1e498:	4b41      	ldr	r3, [pc, #260]	; (1e5a0 <z_time_slice+0x164>)
   1e49a:	689a      	ldr	r2, [r3, #8]
   1e49c:	4b41      	ldr	r3, [pc, #260]	; (1e5a4 <z_time_slice+0x168>)
   1e49e:	681b      	ldr	r3, [r3, #0]
   1e4a0:	429a      	cmp	r2, r3
   1e4a2:	d125      	bne.n	1e4f0 <z_time_slice+0xb4>
		z_reset_time_slice();
   1e4a4:	f7ff feea 	bl	1e27c <z_reset_time_slice>
   1e4a8:	4b38      	ldr	r3, [pc, #224]	; (1e58c <z_time_slice+0x150>)
   1e4aa:	62bb      	str	r3, [r7, #40]	; 0x28
   1e4ac:	69bb      	ldr	r3, [r7, #24]
   1e4ae:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e4b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1e4b2:	f7fe fde5 	bl	1d080 <z_spin_unlock_valid>
   1e4b6:	4603      	mov	r3, r0
   1e4b8:	f083 0301 	eor.w	r3, r3, #1
   1e4bc:	b2db      	uxtb	r3, r3
   1e4be:	2b00      	cmp	r3, #0
   1e4c0:	d00d      	beq.n	1e4de <z_time_slice+0xa2>
   1e4c2:	23ac      	movs	r3, #172	; 0xac
   1e4c4:	4a32      	ldr	r2, [pc, #200]	; (1e590 <z_time_slice+0x154>)
   1e4c6:	4938      	ldr	r1, [pc, #224]	; (1e5a8 <z_time_slice+0x16c>)
   1e4c8:	4833      	ldr	r0, [pc, #204]	; (1e598 <z_time_slice+0x15c>)
   1e4ca:	f002 fdcd 	bl	21068 <printk>
   1e4ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1e4d0:	4836      	ldr	r0, [pc, #216]	; (1e5ac <z_time_slice+0x170>)
   1e4d2:	f002 fdc9 	bl	21068 <printk>
   1e4d6:	21ac      	movs	r1, #172	; 0xac
   1e4d8:	482d      	ldr	r0, [pc, #180]	; (1e590 <z_time_slice+0x154>)
   1e4da:	f003 fe72 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1e4de:	693b      	ldr	r3, [r7, #16]
   1e4e0:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   1e4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e4e4:	f383 8811 	msr	BASEPRI, r3
   1e4e8:	f3bf 8f6f 	isb	sy
}
   1e4ec:	bf00      	nop
}
   1e4ee:	e049      	b.n	1e584 <z_time_slice+0x148>
	pending_current = NULL;
   1e4f0:	4b2c      	ldr	r3, [pc, #176]	; (1e5a4 <z_time_slice+0x168>)
   1e4f2:	2200      	movs	r2, #0
   1e4f4:	601a      	str	r2, [r3, #0]
	if (slice_time && sliceable(_current)) {
   1e4f6:	4b2e      	ldr	r3, [pc, #184]	; (1e5b0 <z_time_slice+0x174>)
   1e4f8:	681b      	ldr	r3, [r3, #0]
   1e4fa:	2b00      	cmp	r3, #0
   1e4fc:	d01b      	beq.n	1e536 <z_time_slice+0xfa>
   1e4fe:	4b28      	ldr	r3, [pc, #160]	; (1e5a0 <z_time_slice+0x164>)
   1e500:	689b      	ldr	r3, [r3, #8]
   1e502:	4618      	mov	r0, r3
   1e504:	f7ff ff64 	bl	1e3d0 <sliceable>
   1e508:	4603      	mov	r3, r0
   1e50a:	2b00      	cmp	r3, #0
   1e50c:	d013      	beq.n	1e536 <z_time_slice+0xfa>
		if (ticks >= _current_cpu->slice_ticks) {
   1e50e:	4b24      	ldr	r3, [pc, #144]	; (1e5a0 <z_time_slice+0x164>)
   1e510:	691b      	ldr	r3, [r3, #16]
   1e512:	687a      	ldr	r2, [r7, #4]
   1e514:	429a      	cmp	r2, r3
   1e516:	db07      	blt.n	1e528 <z_time_slice+0xec>
			move_thread_to_end_of_prio_q(_current);
   1e518:	4b21      	ldr	r3, [pc, #132]	; (1e5a0 <z_time_slice+0x164>)
   1e51a:	689b      	ldr	r3, [r3, #8]
   1e51c:	4618      	mov	r0, r3
   1e51e:	f7ff fe11 	bl	1e144 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   1e522:	f7ff feab 	bl	1e27c <z_reset_time_slice>
		if (ticks >= _current_cpu->slice_ticks) {
   1e526:	e009      	b.n	1e53c <z_time_slice+0x100>
			_current_cpu->slice_ticks -= ticks;
   1e528:	4b1d      	ldr	r3, [pc, #116]	; (1e5a0 <z_time_slice+0x164>)
   1e52a:	691a      	ldr	r2, [r3, #16]
   1e52c:	687b      	ldr	r3, [r7, #4]
   1e52e:	1ad3      	subs	r3, r2, r3
   1e530:	4a1b      	ldr	r2, [pc, #108]	; (1e5a0 <z_time_slice+0x164>)
   1e532:	6113      	str	r3, [r2, #16]
		if (ticks >= _current_cpu->slice_ticks) {
   1e534:	e002      	b.n	1e53c <z_time_slice+0x100>
		_current_cpu->slice_ticks = 0;
   1e536:	4b1a      	ldr	r3, [pc, #104]	; (1e5a0 <z_time_slice+0x164>)
   1e538:	2200      	movs	r2, #0
   1e53a:	611a      	str	r2, [r3, #16]
   1e53c:	4b13      	ldr	r3, [pc, #76]	; (1e58c <z_time_slice+0x150>)
   1e53e:	623b      	str	r3, [r7, #32]
   1e540:	69bb      	ldr	r3, [r7, #24]
   1e542:	617b      	str	r3, [r7, #20]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e544:	6a38      	ldr	r0, [r7, #32]
   1e546:	f7fe fd9b 	bl	1d080 <z_spin_unlock_valid>
   1e54a:	4603      	mov	r3, r0
   1e54c:	f083 0301 	eor.w	r3, r3, #1
   1e550:	b2db      	uxtb	r3, r3
   1e552:	2b00      	cmp	r3, #0
   1e554:	d00d      	beq.n	1e572 <z_time_slice+0x136>
   1e556:	23ac      	movs	r3, #172	; 0xac
   1e558:	4a0d      	ldr	r2, [pc, #52]	; (1e590 <z_time_slice+0x154>)
   1e55a:	4913      	ldr	r1, [pc, #76]	; (1e5a8 <z_time_slice+0x16c>)
   1e55c:	480e      	ldr	r0, [pc, #56]	; (1e598 <z_time_slice+0x15c>)
   1e55e:	f002 fd83 	bl	21068 <printk>
   1e562:	6a39      	ldr	r1, [r7, #32]
   1e564:	4811      	ldr	r0, [pc, #68]	; (1e5ac <z_time_slice+0x170>)
   1e566:	f002 fd7f 	bl	21068 <printk>
   1e56a:	21ac      	movs	r1, #172	; 0xac
   1e56c:	4808      	ldr	r0, [pc, #32]	; (1e590 <z_time_slice+0x154>)
   1e56e:	f003 fe28 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1e572:	697b      	ldr	r3, [r7, #20]
   1e574:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   1e576:	69fb      	ldr	r3, [r7, #28]
   1e578:	f383 8811 	msr	BASEPRI, r3
   1e57c:	f3bf 8f6f 	isb	sy
}
   1e580:	bf00      	nop
}
   1e582:	bf00      	nop
}
   1e584:	3738      	adds	r7, #56	; 0x38
   1e586:	46bd      	mov	sp, r7
   1e588:	bd80      	pop	{r7, pc}
   1e58a:	bf00      	nop
   1e58c:	200151b4 	.word	0x200151b4
   1e590:	0002c650 	.word	0x0002c650
   1e594:	0002c678 	.word	0x0002c678
   1e598:	0002c5b0 	.word	0x0002c5b0
   1e59c:	0002c690 	.word	0x0002c690
   1e5a0:	2001517c 	.word	0x2001517c
   1e5a4:	200151c0 	.word	0x200151c0
   1e5a8:	0002c6a8 	.word	0x0002c6a8
   1e5ac:	0002c6c0 	.word	0x0002c6c0
   1e5b0:	200151b8 	.word	0x200151b8

0001e5b4 <update_cache>:
{
   1e5b4:	b580      	push	{r7, lr}
   1e5b6:	b086      	sub	sp, #24
   1e5b8:	af00      	add	r7, sp, #0
   1e5ba:	6078      	str	r0, [r7, #4]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1e5bc:	4830      	ldr	r0, [pc, #192]	; (1e680 <update_cache+0xcc>)
   1e5be:	f00a fad2 	bl	28b66 <z_priq_dumb_best>
   1e5c2:	60b8      	str	r0, [r7, #8]
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1e5c4:	68bb      	ldr	r3, [r7, #8]
   1e5c6:	2b00      	cmp	r3, #0
   1e5c8:	d102      	bne.n	1e5d0 <update_cache+0x1c>
   1e5ca:	4b2e      	ldr	r3, [pc, #184]	; (1e684 <update_cache+0xd0>)
   1e5cc:	68db      	ldr	r3, [r3, #12]
   1e5ce:	e000      	b.n	1e5d2 <update_cache+0x1e>
   1e5d0:	68bb      	ldr	r3, [r7, #8]
	struct k_thread *thread = next_up();
   1e5d2:	617b      	str	r3, [r7, #20]
   1e5d4:	697b      	ldr	r3, [r7, #20]
   1e5d6:	613b      	str	r3, [r7, #16]
   1e5d8:	687b      	ldr	r3, [r7, #4]
   1e5da:	60fb      	str	r3, [r7, #12]
	if (preempt_ok != 0) {
   1e5dc:	68fb      	ldr	r3, [r7, #12]
   1e5de:	2b00      	cmp	r3, #0
   1e5e0:	d001      	beq.n	1e5e6 <update_cache+0x32>
		return true;
   1e5e2:	2301      	movs	r3, #1
   1e5e4:	e033      	b.n	1e64e <update_cache+0x9a>
	__ASSERT(_current != NULL, "");
   1e5e6:	4b27      	ldr	r3, [pc, #156]	; (1e684 <update_cache+0xd0>)
   1e5e8:	689b      	ldr	r3, [r3, #8]
   1e5ea:	2b00      	cmp	r3, #0
   1e5ec:	d10c      	bne.n	1e608 <update_cache+0x54>
   1e5ee:	2381      	movs	r3, #129	; 0x81
   1e5f0:	4a25      	ldr	r2, [pc, #148]	; (1e688 <update_cache+0xd4>)
   1e5f2:	4926      	ldr	r1, [pc, #152]	; (1e68c <update_cache+0xd8>)
   1e5f4:	4826      	ldr	r0, [pc, #152]	; (1e690 <update_cache+0xdc>)
   1e5f6:	f002 fd37 	bl	21068 <printk>
   1e5fa:	4826      	ldr	r0, [pc, #152]	; (1e694 <update_cache+0xe0>)
   1e5fc:	f002 fd34 	bl	21068 <printk>
   1e600:	2181      	movs	r1, #129	; 0x81
   1e602:	4821      	ldr	r0, [pc, #132]	; (1e688 <update_cache+0xd4>)
   1e604:	f003 fddd 	bl	221c2 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   1e608:	4b1e      	ldr	r3, [pc, #120]	; (1e684 <update_cache+0xd0>)
   1e60a:	689b      	ldr	r3, [r3, #8]
   1e60c:	4618      	mov	r0, r3
   1e60e:	f00a f8df 	bl	287d0 <z_is_thread_prevented_from_running>
   1e612:	4603      	mov	r3, r0
   1e614:	2b00      	cmp	r3, #0
   1e616:	d001      	beq.n	1e61c <update_cache+0x68>
		return true;
   1e618:	2301      	movs	r3, #1
   1e61a:	e018      	b.n	1e64e <update_cache+0x9a>
	    && z_is_thread_timeout_active(thread)) {
   1e61c:	6938      	ldr	r0, [r7, #16]
   1e61e:	f00a f8eb 	bl	287f8 <z_is_thread_timeout_active>
   1e622:	4603      	mov	r3, r0
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1e624:	2b00      	cmp	r3, #0
   1e626:	d001      	beq.n	1e62c <update_cache+0x78>
		return true;
   1e628:	2301      	movs	r3, #1
   1e62a:	e010      	b.n	1e64e <update_cache+0x9a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1e62c:	4b15      	ldr	r3, [pc, #84]	; (1e684 <update_cache+0xd0>)
   1e62e:	689b      	ldr	r3, [r3, #8]
   1e630:	4618      	mov	r0, r3
   1e632:	f00a f9d6 	bl	289e2 <is_preempt>
   1e636:	4603      	mov	r3, r0
   1e638:	2b00      	cmp	r3, #0
   1e63a:	d105      	bne.n	1e648 <update_cache+0x94>
   1e63c:	6938      	ldr	r0, [r7, #16]
   1e63e:	f00a f9e0 	bl	28a02 <is_metairq>
   1e642:	4603      	mov	r3, r0
   1e644:	2b00      	cmp	r3, #0
   1e646:	d001      	beq.n	1e64c <update_cache+0x98>
		return true;
   1e648:	2301      	movs	r3, #1
   1e64a:	e000      	b.n	1e64e <update_cache+0x9a>
	return false;
   1e64c:	2300      	movs	r3, #0
	if (should_preempt(thread, preempt_ok)) {
   1e64e:	2b00      	cmp	r3, #0
   1e650:	d00d      	beq.n	1e66e <update_cache+0xba>
		if (thread != _current) {
   1e652:	4b0c      	ldr	r3, [pc, #48]	; (1e684 <update_cache+0xd0>)
   1e654:	689b      	ldr	r3, [r3, #8]
   1e656:	697a      	ldr	r2, [r7, #20]
   1e658:	429a      	cmp	r2, r3
   1e65a:	d001      	beq.n	1e660 <update_cache+0xac>
			z_reset_time_slice();
   1e65c:	f7ff fe0e 	bl	1e27c <z_reset_time_slice>
		update_metairq_preempt(thread);
   1e660:	6978      	ldr	r0, [r7, #20]
   1e662:	f00a f9fd 	bl	28a60 <update_metairq_preempt>
		_kernel.ready_q.cache = thread;
   1e666:	4a07      	ldr	r2, [pc, #28]	; (1e684 <update_cache+0xd0>)
   1e668:	697b      	ldr	r3, [r7, #20]
   1e66a:	6253      	str	r3, [r2, #36]	; 0x24
}
   1e66c:	e003      	b.n	1e676 <update_cache+0xc2>
		_kernel.ready_q.cache = _current;
   1e66e:	4b05      	ldr	r3, [pc, #20]	; (1e684 <update_cache+0xd0>)
   1e670:	689b      	ldr	r3, [r3, #8]
   1e672:	4a04      	ldr	r2, [pc, #16]	; (1e684 <update_cache+0xd0>)
   1e674:	6253      	str	r3, [r2, #36]	; 0x24
}
   1e676:	bf00      	nop
   1e678:	3718      	adds	r7, #24
   1e67a:	46bd      	mov	sp, r7
   1e67c:	bd80      	pop	{r7, pc}
   1e67e:	bf00      	nop
   1e680:	200151a4 	.word	0x200151a4
   1e684:	2001517c 	.word	0x2001517c
   1e688:	0002c608 	.word	0x0002c608
   1e68c:	0002c6d8 	.word	0x0002c6d8
   1e690:	0002c5b0 	.word	0x0002c5b0
   1e694:	0002c5d0 	.word	0x0002c5d0

0001e698 <ready_thread>:
{
   1e698:	b580      	push	{r7, lr}
   1e69a:	b088      	sub	sp, #32
   1e69c:	af00      	add	r7, sp, #0
   1e69e:	6078      	str	r0, [r7, #4]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1e6a0:	6878      	ldr	r0, [r7, #4]
   1e6a2:	f00a f908 	bl	288b6 <z_is_thread_queued>
   1e6a6:	4603      	mov	r3, r0
   1e6a8:	f083 0301 	eor.w	r3, r3, #1
   1e6ac:	b2db      	uxtb	r3, r3
   1e6ae:	2b00      	cmp	r3, #0
   1e6b0:	d06b      	beq.n	1e78a <ready_thread+0xf2>
   1e6b2:	6878      	ldr	r0, [r7, #4]
   1e6b4:	f00a f8b9 	bl	2882a <z_is_thread_ready>
   1e6b8:	4603      	mov	r3, r0
   1e6ba:	2b00      	cmp	r3, #0
   1e6bc:	d065      	beq.n	1e78a <ready_thread+0xf2>
   1e6be:	4b35      	ldr	r3, [pc, #212]	; (1e794 <ready_thread+0xfc>)
   1e6c0:	61fb      	str	r3, [r7, #28]
   1e6c2:	687b      	ldr	r3, [r7, #4]
   1e6c4:	61bb      	str	r3, [r7, #24]
	thread->base.thread_state |= _THREAD_QUEUED;
   1e6c6:	69bb      	ldr	r3, [r7, #24]
   1e6c8:	7b5b      	ldrb	r3, [r3, #13]
   1e6ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1e6ce:	b2da      	uxtb	r2, r3
   1e6d0:	69bb      	ldr	r3, [r7, #24]
   1e6d2:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
   1e6d4:	69b8      	ldr	r0, [r7, #24]
   1e6d6:	f00a f9b9 	bl	28a4c <should_queue_thread>
   1e6da:	4603      	mov	r3, r0
   1e6dc:	2b00      	cmp	r3, #0
   1e6de:	d050      	beq.n	1e782 <ready_thread+0xea>
   1e6e0:	69fb      	ldr	r3, [r7, #28]
   1e6e2:	617b      	str	r3, [r7, #20]
   1e6e4:	69bb      	ldr	r3, [r7, #24]
   1e6e6:	613b      	str	r3, [r7, #16]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1e6e8:	6938      	ldr	r0, [r7, #16]
   1e6ea:	f7ff fcc5 	bl	1e078 <z_is_idle_thread_object>
   1e6ee:	4603      	mov	r3, r0
   1e6f0:	2b00      	cmp	r3, #0
   1e6f2:	d00b      	beq.n	1e70c <ready_thread+0x74>
   1e6f4:	f240 33a6 	movw	r3, #934	; 0x3a6
   1e6f8:	4a27      	ldr	r2, [pc, #156]	; (1e798 <ready_thread+0x100>)
   1e6fa:	4928      	ldr	r1, [pc, #160]	; (1e79c <ready_thread+0x104>)
   1e6fc:	4828      	ldr	r0, [pc, #160]	; (1e7a0 <ready_thread+0x108>)
   1e6fe:	f002 fcb3 	bl	21068 <printk>
   1e702:	f240 31a6 	movw	r1, #934	; 0x3a6
   1e706:	4824      	ldr	r0, [pc, #144]	; (1e798 <ready_thread+0x100>)
   1e708:	f003 fd5b 	bl	221c2 <assert_post_action>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e70c:	6978      	ldr	r0, [r7, #20]
   1e70e:	f009 fd42 	bl	28196 <sys_dlist_peek_head>
   1e712:	4603      	mov	r3, r0
   1e714:	2b00      	cmp	r3, #0
   1e716:	d004      	beq.n	1e722 <ready_thread+0x8a>
   1e718:	6978      	ldr	r0, [r7, #20]
   1e71a:	f009 fd3c 	bl	28196 <sys_dlist_peek_head>
   1e71e:	4603      	mov	r3, r0
   1e720:	e000      	b.n	1e724 <ready_thread+0x8c>
   1e722:	2300      	movs	r3, #0
   1e724:	60fb      	str	r3, [r7, #12]
   1e726:	e024      	b.n	1e772 <ready_thread+0xda>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1e728:	68f9      	ldr	r1, [r7, #12]
   1e72a:	6938      	ldr	r0, [r7, #16]
   1e72c:	f00a f973 	bl	28a16 <z_sched_prio_cmp>
   1e730:	4603      	mov	r3, r0
   1e732:	2b00      	cmp	r3, #0
   1e734:	dd07      	ble.n	1e746 <ready_thread+0xae>
			sys_dlist_insert(&t->base.qnode_dlist,
   1e736:	68fb      	ldr	r3, [r7, #12]
   1e738:	693a      	ldr	r2, [r7, #16]
   1e73a:	4611      	mov	r1, r2
   1e73c:	4618      	mov	r0, r3
   1e73e:	f009 fd7b 	bl	28238 <sys_dlist_insert>
			return;
   1e742:	bf00      	nop
}
   1e744:	e01d      	b.n	1e782 <ready_thread+0xea>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e746:	68fb      	ldr	r3, [r7, #12]
   1e748:	2b00      	cmp	r3, #0
   1e74a:	d010      	beq.n	1e76e <ready_thread+0xd6>
   1e74c:	68fb      	ldr	r3, [r7, #12]
   1e74e:	4619      	mov	r1, r3
   1e750:	6978      	ldr	r0, [r7, #20]
   1e752:	f009 fd45 	bl	281e0 <sys_dlist_peek_next>
   1e756:	4603      	mov	r3, r0
   1e758:	2b00      	cmp	r3, #0
   1e75a:	d006      	beq.n	1e76a <ready_thread+0xd2>
   1e75c:	68fb      	ldr	r3, [r7, #12]
   1e75e:	4619      	mov	r1, r3
   1e760:	6978      	ldr	r0, [r7, #20]
   1e762:	f009 fd3d 	bl	281e0 <sys_dlist_peek_next>
   1e766:	4603      	mov	r3, r0
   1e768:	e002      	b.n	1e770 <ready_thread+0xd8>
   1e76a:	2300      	movs	r3, #0
   1e76c:	e000      	b.n	1e770 <ready_thread+0xd8>
   1e76e:	2300      	movs	r3, #0
   1e770:	60fb      	str	r3, [r7, #12]
   1e772:	68fb      	ldr	r3, [r7, #12]
   1e774:	2b00      	cmp	r3, #0
   1e776:	d1d7      	bne.n	1e728 <ready_thread+0x90>
	sys_dlist_append(pq, &thread->base.qnode_dlist);
   1e778:	693b      	ldr	r3, [r7, #16]
   1e77a:	4619      	mov	r1, r3
   1e77c:	6978      	ldr	r0, [r7, #20]
   1e77e:	f009 fd42 	bl	28206 <sys_dlist_append>
}
   1e782:	bf00      	nop
		update_cache(0);
   1e784:	2000      	movs	r0, #0
   1e786:	f7ff ff15 	bl	1e5b4 <update_cache>
}
   1e78a:	bf00      	nop
   1e78c:	3720      	adds	r7, #32
   1e78e:	46bd      	mov	sp, r7
   1e790:	bd80      	pop	{r7, pc}
   1e792:	bf00      	nop
   1e794:	200151a4 	.word	0x200151a4
   1e798:	0002c608 	.word	0x0002c608
   1e79c:	0002c62c 	.word	0x0002c62c
   1e7a0:	0002c5b0 	.word	0x0002c5b0

0001e7a4 <z_ready_thread>:
{
   1e7a4:	b580      	push	{r7, lr}
   1e7a6:	b08c      	sub	sp, #48	; 0x30
   1e7a8:	af00      	add	r7, sp, #0
   1e7aa:	6078      	str	r0, [r7, #4]
	LOCKED(&sched_spinlock) {
   1e7ac:	2300      	movs	r3, #0
   1e7ae:	61bb      	str	r3, [r7, #24]
   1e7b0:	4b32      	ldr	r3, [pc, #200]	; (1e87c <z_ready_thread+0xd8>)
   1e7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   1e7b4:	f04f 0320 	mov.w	r3, #32
   1e7b8:	f3ef 8211 	mrs	r2, BASEPRI
   1e7bc:	f383 8811 	msr	BASEPRI, r3
   1e7c0:	f3bf 8f6f 	isb	sy
   1e7c4:	62ba      	str	r2, [r7, #40]	; 0x28
   1e7c6:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   1e7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
   1e7ca:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e7cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1e7ce:	f7fe fc3b 	bl	1d048 <z_spin_lock_valid>
   1e7d2:	4603      	mov	r3, r0
   1e7d4:	f083 0301 	eor.w	r3, r3, #1
   1e7d8:	b2db      	uxtb	r3, r3
   1e7da:	2b00      	cmp	r3, #0
   1e7dc:	d00d      	beq.n	1e7fa <z_ready_thread+0x56>
   1e7de:	2381      	movs	r3, #129	; 0x81
   1e7e0:	4a27      	ldr	r2, [pc, #156]	; (1e880 <z_ready_thread+0xdc>)
   1e7e2:	4928      	ldr	r1, [pc, #160]	; (1e884 <z_ready_thread+0xe0>)
   1e7e4:	4828      	ldr	r0, [pc, #160]	; (1e888 <z_ready_thread+0xe4>)
   1e7e6:	f002 fc3f 	bl	21068 <printk>
   1e7ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1e7ec:	4827      	ldr	r0, [pc, #156]	; (1e88c <z_ready_thread+0xe8>)
   1e7ee:	f002 fc3b 	bl	21068 <printk>
   1e7f2:	2181      	movs	r1, #129	; 0x81
   1e7f4:	4822      	ldr	r0, [pc, #136]	; (1e880 <z_ready_thread+0xdc>)
   1e7f6:	f003 fce4 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1e7fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1e7fc:	f7fe fc5c 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1e800:	68fb      	ldr	r3, [r7, #12]
   1e802:	617b      	str	r3, [r7, #20]
   1e804:	e031      	b.n	1e86a <z_ready_thread+0xc6>
		if (!thread_active_elsewhere(thread)) {
   1e806:	6878      	ldr	r0, [r7, #4]
   1e808:	f00a f933 	bl	28a72 <thread_active_elsewhere>
   1e80c:	4603      	mov	r3, r0
   1e80e:	f083 0301 	eor.w	r3, r3, #1
   1e812:	b2db      	uxtb	r3, r3
   1e814:	2b00      	cmp	r3, #0
   1e816:	d002      	beq.n	1e81e <z_ready_thread+0x7a>
			ready_thread(thread);
   1e818:	6878      	ldr	r0, [r7, #4]
   1e81a:	f7ff ff3d 	bl	1e698 <ready_thread>
   1e81e:	4b17      	ldr	r3, [pc, #92]	; (1e87c <z_ready_thread+0xd8>)
   1e820:	623b      	str	r3, [r7, #32]
   1e822:	697b      	ldr	r3, [r7, #20]
   1e824:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e826:	6a38      	ldr	r0, [r7, #32]
   1e828:	f7fe fc2a 	bl	1d080 <z_spin_unlock_valid>
   1e82c:	4603      	mov	r3, r0
   1e82e:	f083 0301 	eor.w	r3, r3, #1
   1e832:	b2db      	uxtb	r3, r3
   1e834:	2b00      	cmp	r3, #0
   1e836:	d00d      	beq.n	1e854 <z_ready_thread+0xb0>
   1e838:	23ac      	movs	r3, #172	; 0xac
   1e83a:	4a11      	ldr	r2, [pc, #68]	; (1e880 <z_ready_thread+0xdc>)
   1e83c:	4914      	ldr	r1, [pc, #80]	; (1e890 <z_ready_thread+0xec>)
   1e83e:	4812      	ldr	r0, [pc, #72]	; (1e888 <z_ready_thread+0xe4>)
   1e840:	f002 fc12 	bl	21068 <printk>
   1e844:	6a39      	ldr	r1, [r7, #32]
   1e846:	4813      	ldr	r0, [pc, #76]	; (1e894 <z_ready_thread+0xf0>)
   1e848:	f002 fc0e 	bl	21068 <printk>
   1e84c:	21ac      	movs	r1, #172	; 0xac
   1e84e:	480c      	ldr	r0, [pc, #48]	; (1e880 <z_ready_thread+0xdc>)
   1e850:	f003 fcb7 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1e854:	693b      	ldr	r3, [r7, #16]
   1e856:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   1e858:	69fb      	ldr	r3, [r7, #28]
   1e85a:	f383 8811 	msr	BASEPRI, r3
   1e85e:	f3bf 8f6f 	isb	sy
}
   1e862:	bf00      	nop
}
   1e864:	bf00      	nop
	LOCKED(&sched_spinlock) {
   1e866:	2301      	movs	r3, #1
   1e868:	61bb      	str	r3, [r7, #24]
   1e86a:	69bb      	ldr	r3, [r7, #24]
   1e86c:	2b00      	cmp	r3, #0
   1e86e:	d0ca      	beq.n	1e806 <z_ready_thread+0x62>
}
   1e870:	bf00      	nop
   1e872:	bf00      	nop
   1e874:	3730      	adds	r7, #48	; 0x30
   1e876:	46bd      	mov	sp, r7
   1e878:	bd80      	pop	{r7, pc}
   1e87a:	bf00      	nop
   1e87c:	200151b4 	.word	0x200151b4
   1e880:	0002c650 	.word	0x0002c650
   1e884:	0002c678 	.word	0x0002c678
   1e888:	0002c5b0 	.word	0x0002c5b0
   1e88c:	0002c690 	.word	0x0002c690
   1e890:	0002c6a8 	.word	0x0002c6a8
   1e894:	0002c6c0 	.word	0x0002c6c0

0001e898 <z_sched_start>:
{
   1e898:	b580      	push	{r7, lr}
   1e89a:	b08a      	sub	sp, #40	; 0x28
   1e89c:	af00      	add	r7, sp, #0
   1e89e:	6078      	str	r0, [r7, #4]
   1e8a0:	4b30      	ldr	r3, [pc, #192]	; (1e964 <z_sched_start+0xcc>)
   1e8a2:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   1e8a4:	f04f 0320 	mov.w	r3, #32
   1e8a8:	f3ef 8211 	mrs	r2, BASEPRI
   1e8ac:	f383 8811 	msr	BASEPRI, r3
   1e8b0:	f3bf 8f6f 	isb	sy
   1e8b4:	623a      	str	r2, [r7, #32]
   1e8b6:	61fb      	str	r3, [r7, #28]
	return key;
   1e8b8:	6a3b      	ldr	r3, [r7, #32]
	k.key = arch_irq_lock();
   1e8ba:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e8bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1e8be:	f7fe fbc3 	bl	1d048 <z_spin_lock_valid>
   1e8c2:	4603      	mov	r3, r0
   1e8c4:	f083 0301 	eor.w	r3, r3, #1
   1e8c8:	b2db      	uxtb	r3, r3
   1e8ca:	2b00      	cmp	r3, #0
   1e8cc:	d00d      	beq.n	1e8ea <z_sched_start+0x52>
   1e8ce:	2381      	movs	r3, #129	; 0x81
   1e8d0:	4a25      	ldr	r2, [pc, #148]	; (1e968 <z_sched_start+0xd0>)
   1e8d2:	4926      	ldr	r1, [pc, #152]	; (1e96c <z_sched_start+0xd4>)
   1e8d4:	4826      	ldr	r0, [pc, #152]	; (1e970 <z_sched_start+0xd8>)
   1e8d6:	f002 fbc7 	bl	21068 <printk>
   1e8da:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1e8dc:	4825      	ldr	r0, [pc, #148]	; (1e974 <z_sched_start+0xdc>)
   1e8de:	f002 fbc3 	bl	21068 <printk>
   1e8e2:	2181      	movs	r1, #129	; 0x81
   1e8e4:	4820      	ldr	r0, [pc, #128]	; (1e968 <z_sched_start+0xd0>)
   1e8e6:	f003 fc6c 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1e8ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1e8ec:	f7fe fbe4 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1e8f0:	68bb      	ldr	r3, [r7, #8]
   1e8f2:	613b      	str	r3, [r7, #16]
	if (z_has_thread_started(thread)) {
   1e8f4:	6878      	ldr	r0, [r7, #4]
   1e8f6:	f009 ffb8 	bl	2886a <z_has_thread_started>
   1e8fa:	4603      	mov	r3, r0
   1e8fc:	2b00      	cmp	r3, #0
   1e8fe:	d023      	beq.n	1e948 <z_sched_start+0xb0>
   1e900:	4b18      	ldr	r3, [pc, #96]	; (1e964 <z_sched_start+0xcc>)
   1e902:	61bb      	str	r3, [r7, #24]
   1e904:	693b      	ldr	r3, [r7, #16]
   1e906:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1e908:	69b8      	ldr	r0, [r7, #24]
   1e90a:	f7fe fbb9 	bl	1d080 <z_spin_unlock_valid>
   1e90e:	4603      	mov	r3, r0
   1e910:	f083 0301 	eor.w	r3, r3, #1
   1e914:	b2db      	uxtb	r3, r3
   1e916:	2b00      	cmp	r3, #0
   1e918:	d00d      	beq.n	1e936 <z_sched_start+0x9e>
   1e91a:	23ac      	movs	r3, #172	; 0xac
   1e91c:	4a12      	ldr	r2, [pc, #72]	; (1e968 <z_sched_start+0xd0>)
   1e91e:	4916      	ldr	r1, [pc, #88]	; (1e978 <z_sched_start+0xe0>)
   1e920:	4813      	ldr	r0, [pc, #76]	; (1e970 <z_sched_start+0xd8>)
   1e922:	f002 fba1 	bl	21068 <printk>
   1e926:	69b9      	ldr	r1, [r7, #24]
   1e928:	4814      	ldr	r0, [pc, #80]	; (1e97c <z_sched_start+0xe4>)
   1e92a:	f002 fb9d 	bl	21068 <printk>
   1e92e:	21ac      	movs	r1, #172	; 0xac
   1e930:	480d      	ldr	r0, [pc, #52]	; (1e968 <z_sched_start+0xd0>)
   1e932:	f003 fc46 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1e936:	68fb      	ldr	r3, [r7, #12]
   1e938:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   1e93a:	697b      	ldr	r3, [r7, #20]
   1e93c:	f383 8811 	msr	BASEPRI, r3
   1e940:	f3bf 8f6f 	isb	sy
}
   1e944:	bf00      	nop
}
   1e946:	e009      	b.n	1e95c <z_sched_start+0xc4>
	z_mark_thread_as_started(thread);
   1e948:	6878      	ldr	r0, [r7, #4]
   1e94a:	f009 ffe1 	bl	28910 <z_mark_thread_as_started>
	ready_thread(thread);
   1e94e:	6878      	ldr	r0, [r7, #4]
   1e950:	f7ff fea2 	bl	1e698 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1e954:	6939      	ldr	r1, [r7, #16]
   1e956:	4803      	ldr	r0, [pc, #12]	; (1e964 <z_sched_start+0xcc>)
   1e958:	f000 fdce 	bl	1f4f8 <z_reschedule>
}
   1e95c:	3728      	adds	r7, #40	; 0x28
   1e95e:	46bd      	mov	sp, r7
   1e960:	bd80      	pop	{r7, pc}
   1e962:	bf00      	nop
   1e964:	200151b4 	.word	0x200151b4
   1e968:	0002c650 	.word	0x0002c650
   1e96c:	0002c678 	.word	0x0002c678
   1e970:	0002c5b0 	.word	0x0002c5b0
   1e974:	0002c690 	.word	0x0002c690
   1e978:	0002c6a8 	.word	0x0002c6a8
   1e97c:	0002c6c0 	.word	0x0002c6c0

0001e980 <z_impl_k_thread_suspend>:
{
   1e980:	b580      	push	{r7, lr}
   1e982:	b08e      	sub	sp, #56	; 0x38
   1e984:	af00      	add	r7, sp, #0
   1e986:	6078      	str	r0, [r7, #4]
	(void)z_abort_thread_timeout(thread);
   1e988:	6878      	ldr	r0, [r7, #4]
   1e98a:	f009 fefe 	bl	2878a <z_abort_thread_timeout>
	LOCKED(&sched_spinlock) {
   1e98e:	2300      	movs	r3, #0
   1e990:	61bb      	str	r3, [r7, #24]
   1e992:	4b44      	ldr	r3, [pc, #272]	; (1eaa4 <z_impl_k_thread_suspend+0x124>)
   1e994:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
   1e996:	f04f 0320 	mov.w	r3, #32
   1e99a:	f3ef 8211 	mrs	r2, BASEPRI
   1e99e:	f383 8811 	msr	BASEPRI, r3
   1e9a2:	f3bf 8f6f 	isb	sy
   1e9a6:	633a      	str	r2, [r7, #48]	; 0x30
   1e9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	return key;
   1e9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	k.key = arch_irq_lock();
   1e9ac:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1e9ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1e9b0:	f7fe fb4a 	bl	1d048 <z_spin_lock_valid>
   1e9b4:	4603      	mov	r3, r0
   1e9b6:	f083 0301 	eor.w	r3, r3, #1
   1e9ba:	b2db      	uxtb	r3, r3
   1e9bc:	2b00      	cmp	r3, #0
   1e9be:	d00d      	beq.n	1e9dc <z_impl_k_thread_suspend+0x5c>
   1e9c0:	2381      	movs	r3, #129	; 0x81
   1e9c2:	4a39      	ldr	r2, [pc, #228]	; (1eaa8 <z_impl_k_thread_suspend+0x128>)
   1e9c4:	4939      	ldr	r1, [pc, #228]	; (1eaac <z_impl_k_thread_suspend+0x12c>)
   1e9c6:	483a      	ldr	r0, [pc, #232]	; (1eab0 <z_impl_k_thread_suspend+0x130>)
   1e9c8:	f002 fb4e 	bl	21068 <printk>
   1e9cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1e9ce:	4839      	ldr	r0, [pc, #228]	; (1eab4 <z_impl_k_thread_suspend+0x134>)
   1e9d0:	f002 fb4a 	bl	21068 <printk>
   1e9d4:	2181      	movs	r1, #129	; 0x81
   1e9d6:	4834      	ldr	r0, [pc, #208]	; (1eaa8 <z_impl_k_thread_suspend+0x128>)
   1e9d8:	f003 fbf3 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1e9dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1e9de:	f7fe fb6b 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1e9e2:	68fb      	ldr	r3, [r7, #12]
   1e9e4:	617b      	str	r3, [r7, #20]
   1e9e6:	e04f      	b.n	1ea88 <z_impl_k_thread_suspend+0x108>
		if (z_is_thread_queued(thread)) {
   1e9e8:	6878      	ldr	r0, [r7, #4]
   1e9ea:	f009 ff64 	bl	288b6 <z_is_thread_queued>
   1e9ee:	4603      	mov	r3, r0
   1e9f0:	2b00      	cmp	r3, #0
   1e9f2:	d015      	beq.n	1ea20 <z_impl_k_thread_suspend+0xa0>
   1e9f4:	4b30      	ldr	r3, [pc, #192]	; (1eab8 <z_impl_k_thread_suspend+0x138>)
   1e9f6:	62bb      	str	r3, [r7, #40]	; 0x28
   1e9f8:	687b      	ldr	r3, [r7, #4]
   1e9fa:	627b      	str	r3, [r7, #36]	; 0x24
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1e9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e9fe:	7b5b      	ldrb	r3, [r3, #13]
   1ea00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ea04:	b2da      	uxtb	r2, r3
   1ea06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ea08:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
   1ea0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1ea0c:	f00a f81e 	bl	28a4c <should_queue_thread>
   1ea10:	4603      	mov	r3, r0
   1ea12:	2b00      	cmp	r3, #0
   1ea14:	d003      	beq.n	1ea1e <z_impl_k_thread_suspend+0x9e>
		_priq_run_remove(pq, thread);
   1ea16:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1ea18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1ea1a:	f000 ff3d 	bl	1f898 <z_priq_dumb_remove>
}
   1ea1e:	bf00      	nop
		z_mark_thread_as_suspended(thread);
   1ea20:	6878      	ldr	r0, [r7, #4]
   1ea22:	f009 ff55 	bl	288d0 <z_mark_thread_as_suspended>
		update_cache(thread == _current);
   1ea26:	4b25      	ldr	r3, [pc, #148]	; (1eabc <z_impl_k_thread_suspend+0x13c>)
   1ea28:	689b      	ldr	r3, [r3, #8]
   1ea2a:	687a      	ldr	r2, [r7, #4]
   1ea2c:	429a      	cmp	r2, r3
   1ea2e:	bf0c      	ite	eq
   1ea30:	2301      	moveq	r3, #1
   1ea32:	2300      	movne	r3, #0
   1ea34:	b2db      	uxtb	r3, r3
   1ea36:	4618      	mov	r0, r3
   1ea38:	f7ff fdbc 	bl	1e5b4 <update_cache>
   1ea3c:	4b19      	ldr	r3, [pc, #100]	; (1eaa4 <z_impl_k_thread_suspend+0x124>)
   1ea3e:	623b      	str	r3, [r7, #32]
   1ea40:	697b      	ldr	r3, [r7, #20]
   1ea42:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ea44:	6a38      	ldr	r0, [r7, #32]
   1ea46:	f7fe fb1b 	bl	1d080 <z_spin_unlock_valid>
   1ea4a:	4603      	mov	r3, r0
   1ea4c:	f083 0301 	eor.w	r3, r3, #1
   1ea50:	b2db      	uxtb	r3, r3
   1ea52:	2b00      	cmp	r3, #0
   1ea54:	d00d      	beq.n	1ea72 <z_impl_k_thread_suspend+0xf2>
   1ea56:	23ac      	movs	r3, #172	; 0xac
   1ea58:	4a13      	ldr	r2, [pc, #76]	; (1eaa8 <z_impl_k_thread_suspend+0x128>)
   1ea5a:	4919      	ldr	r1, [pc, #100]	; (1eac0 <z_impl_k_thread_suspend+0x140>)
   1ea5c:	4814      	ldr	r0, [pc, #80]	; (1eab0 <z_impl_k_thread_suspend+0x130>)
   1ea5e:	f002 fb03 	bl	21068 <printk>
   1ea62:	6a39      	ldr	r1, [r7, #32]
   1ea64:	4817      	ldr	r0, [pc, #92]	; (1eac4 <z_impl_k_thread_suspend+0x144>)
   1ea66:	f002 faff 	bl	21068 <printk>
   1ea6a:	21ac      	movs	r1, #172	; 0xac
   1ea6c:	480e      	ldr	r0, [pc, #56]	; (1eaa8 <z_impl_k_thread_suspend+0x128>)
   1ea6e:	f003 fba8 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1ea72:	693b      	ldr	r3, [r7, #16]
   1ea74:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   1ea76:	69fb      	ldr	r3, [r7, #28]
   1ea78:	f383 8811 	msr	BASEPRI, r3
   1ea7c:	f3bf 8f6f 	isb	sy
}
   1ea80:	bf00      	nop
}
   1ea82:	bf00      	nop
	LOCKED(&sched_spinlock) {
   1ea84:	2301      	movs	r3, #1
   1ea86:	61bb      	str	r3, [r7, #24]
   1ea88:	69bb      	ldr	r3, [r7, #24]
   1ea8a:	2b00      	cmp	r3, #0
   1ea8c:	d0ac      	beq.n	1e9e8 <z_impl_k_thread_suspend+0x68>
	if (thread == _current) {
   1ea8e:	4b0b      	ldr	r3, [pc, #44]	; (1eabc <z_impl_k_thread_suspend+0x13c>)
   1ea90:	689b      	ldr	r3, [r3, #8]
   1ea92:	687a      	ldr	r2, [r7, #4]
   1ea94:	429a      	cmp	r2, r3
   1ea96:	d101      	bne.n	1ea9c <z_impl_k_thread_suspend+0x11c>
		z_reschedule_unlocked();
   1ea98:	f009 fe85 	bl	287a6 <z_reschedule_unlocked>
}
   1ea9c:	bf00      	nop
   1ea9e:	3738      	adds	r7, #56	; 0x38
   1eaa0:	46bd      	mov	sp, r7
   1eaa2:	bd80      	pop	{r7, pc}
   1eaa4:	200151b4 	.word	0x200151b4
   1eaa8:	0002c650 	.word	0x0002c650
   1eaac:	0002c678 	.word	0x0002c678
   1eab0:	0002c5b0 	.word	0x0002c5b0
   1eab4:	0002c690 	.word	0x0002c690
   1eab8:	200151a4 	.word	0x200151a4
   1eabc:	2001517c 	.word	0x2001517c
   1eac0:	0002c6a8 	.word	0x0002c6a8
   1eac4:	0002c6c0 	.word	0x0002c6c0

0001eac8 <pended_on_thread>:
{
   1eac8:	b580      	push	{r7, lr}
   1eaca:	b082      	sub	sp, #8
   1eacc:	af00      	add	r7, sp, #0
   1eace:	6078      	str	r0, [r7, #4]
	__ASSERT_NO_MSG(thread->base.pended_on);
   1ead0:	687b      	ldr	r3, [r7, #4]
   1ead2:	689b      	ldr	r3, [r3, #8]
   1ead4:	2b00      	cmp	r3, #0
   1ead6:	d10b      	bne.n	1eaf0 <pended_on_thread+0x28>
   1ead8:	f240 2342 	movw	r3, #578	; 0x242
   1eadc:	4a07      	ldr	r2, [pc, #28]	; (1eafc <pended_on_thread+0x34>)
   1eade:	4908      	ldr	r1, [pc, #32]	; (1eb00 <pended_on_thread+0x38>)
   1eae0:	4808      	ldr	r0, [pc, #32]	; (1eb04 <pended_on_thread+0x3c>)
   1eae2:	f002 fac1 	bl	21068 <printk>
   1eae6:	f240 2142 	movw	r1, #578	; 0x242
   1eaea:	4804      	ldr	r0, [pc, #16]	; (1eafc <pended_on_thread+0x34>)
   1eaec:	f003 fb69 	bl	221c2 <assert_post_action>
	return thread->base.pended_on;
   1eaf0:	687b      	ldr	r3, [r7, #4]
   1eaf2:	689b      	ldr	r3, [r3, #8]
}
   1eaf4:	4618      	mov	r0, r3
   1eaf6:	3708      	adds	r7, #8
   1eaf8:	46bd      	mov	sp, r7
   1eafa:	bd80      	pop	{r7, pc}
   1eafc:	0002c608 	.word	0x0002c608
   1eb00:	0002c700 	.word	0x0002c700
   1eb04:	0002c5b0 	.word	0x0002c5b0

0001eb08 <unready_thread>:
{
   1eb08:	b580      	push	{r7, lr}
   1eb0a:	b084      	sub	sp, #16
   1eb0c:	af00      	add	r7, sp, #0
   1eb0e:	6078      	str	r0, [r7, #4]
	if (z_is_thread_queued(thread)) {
   1eb10:	6878      	ldr	r0, [r7, #4]
   1eb12:	f009 fed0 	bl	288b6 <z_is_thread_queued>
   1eb16:	4603      	mov	r3, r0
   1eb18:	2b00      	cmp	r3, #0
   1eb1a:	d015      	beq.n	1eb48 <unready_thread+0x40>
   1eb1c:	4b12      	ldr	r3, [pc, #72]	; (1eb68 <unready_thread+0x60>)
   1eb1e:	60fb      	str	r3, [r7, #12]
   1eb20:	687b      	ldr	r3, [r7, #4]
   1eb22:	60bb      	str	r3, [r7, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1eb24:	68bb      	ldr	r3, [r7, #8]
   1eb26:	7b5b      	ldrb	r3, [r3, #13]
   1eb28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1eb2c:	b2da      	uxtb	r2, r3
   1eb2e:	68bb      	ldr	r3, [r7, #8]
   1eb30:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
   1eb32:	68b8      	ldr	r0, [r7, #8]
   1eb34:	f009 ff8a 	bl	28a4c <should_queue_thread>
   1eb38:	4603      	mov	r3, r0
   1eb3a:	2b00      	cmp	r3, #0
   1eb3c:	d003      	beq.n	1eb46 <unready_thread+0x3e>
		_priq_run_remove(pq, thread);
   1eb3e:	68b9      	ldr	r1, [r7, #8]
   1eb40:	68f8      	ldr	r0, [r7, #12]
   1eb42:	f000 fea9 	bl	1f898 <z_priq_dumb_remove>
}
   1eb46:	bf00      	nop
	update_cache(thread == _current);
   1eb48:	4b08      	ldr	r3, [pc, #32]	; (1eb6c <unready_thread+0x64>)
   1eb4a:	689b      	ldr	r3, [r3, #8]
   1eb4c:	687a      	ldr	r2, [r7, #4]
   1eb4e:	429a      	cmp	r2, r3
   1eb50:	bf0c      	ite	eq
   1eb52:	2301      	moveq	r3, #1
   1eb54:	2300      	movne	r3, #0
   1eb56:	b2db      	uxtb	r3, r3
   1eb58:	4618      	mov	r0, r3
   1eb5a:	f7ff fd2b 	bl	1e5b4 <update_cache>
}
   1eb5e:	bf00      	nop
   1eb60:	3710      	adds	r7, #16
   1eb62:	46bd      	mov	sp, r7
   1eb64:	bd80      	pop	{r7, pc}
   1eb66:	bf00      	nop
   1eb68:	200151a4 	.word	0x200151a4
   1eb6c:	2001517c 	.word	0x2001517c

0001eb70 <add_to_waitq_locked>:
{
   1eb70:	b580      	push	{r7, lr}
   1eb72:	b086      	sub	sp, #24
   1eb74:	af00      	add	r7, sp, #0
   1eb76:	6078      	str	r0, [r7, #4]
   1eb78:	6039      	str	r1, [r7, #0]
	unready_thread(thread);
   1eb7a:	6878      	ldr	r0, [r7, #4]
   1eb7c:	f7ff ffc4 	bl	1eb08 <unready_thread>
	z_mark_thread_as_pending(thread);
   1eb80:	6878      	ldr	r0, [r7, #4]
   1eb82:	f009 fed5 	bl	28930 <z_mark_thread_as_pending>
	if (wait_q != NULL) {
   1eb86:	683b      	ldr	r3, [r7, #0]
   1eb88:	2b00      	cmp	r3, #0
   1eb8a:	d053      	beq.n	1ec34 <add_to_waitq_locked+0xc4>
		thread->base.pended_on = wait_q;
   1eb8c:	687b      	ldr	r3, [r7, #4]
   1eb8e:	683a      	ldr	r2, [r7, #0]
   1eb90:	609a      	str	r2, [r3, #8]
		z_priq_wait_add(&wait_q->waitq, thread);
   1eb92:	683b      	ldr	r3, [r7, #0]
   1eb94:	617b      	str	r3, [r7, #20]
   1eb96:	687b      	ldr	r3, [r7, #4]
   1eb98:	613b      	str	r3, [r7, #16]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1eb9a:	6938      	ldr	r0, [r7, #16]
   1eb9c:	f7ff fa6c 	bl	1e078 <z_is_idle_thread_object>
   1eba0:	4603      	mov	r3, r0
   1eba2:	2b00      	cmp	r3, #0
   1eba4:	d00b      	beq.n	1ebbe <add_to_waitq_locked+0x4e>
   1eba6:	f240 33a6 	movw	r3, #934	; 0x3a6
   1ebaa:	4a24      	ldr	r2, [pc, #144]	; (1ec3c <add_to_waitq_locked+0xcc>)
   1ebac:	4924      	ldr	r1, [pc, #144]	; (1ec40 <add_to_waitq_locked+0xd0>)
   1ebae:	4825      	ldr	r0, [pc, #148]	; (1ec44 <add_to_waitq_locked+0xd4>)
   1ebb0:	f002 fa5a 	bl	21068 <printk>
   1ebb4:	f240 31a6 	movw	r1, #934	; 0x3a6
   1ebb8:	4820      	ldr	r0, [pc, #128]	; (1ec3c <add_to_waitq_locked+0xcc>)
   1ebba:	f003 fb02 	bl	221c2 <assert_post_action>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ebbe:	6978      	ldr	r0, [r7, #20]
   1ebc0:	f009 fae9 	bl	28196 <sys_dlist_peek_head>
   1ebc4:	4603      	mov	r3, r0
   1ebc6:	2b00      	cmp	r3, #0
   1ebc8:	d004      	beq.n	1ebd4 <add_to_waitq_locked+0x64>
   1ebca:	6978      	ldr	r0, [r7, #20]
   1ebcc:	f009 fae3 	bl	28196 <sys_dlist_peek_head>
   1ebd0:	4603      	mov	r3, r0
   1ebd2:	e000      	b.n	1ebd6 <add_to_waitq_locked+0x66>
   1ebd4:	2300      	movs	r3, #0
   1ebd6:	60fb      	str	r3, [r7, #12]
   1ebd8:	e024      	b.n	1ec24 <add_to_waitq_locked+0xb4>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ebda:	68f9      	ldr	r1, [r7, #12]
   1ebdc:	6938      	ldr	r0, [r7, #16]
   1ebde:	f009 ff1a 	bl	28a16 <z_sched_prio_cmp>
   1ebe2:	4603      	mov	r3, r0
   1ebe4:	2b00      	cmp	r3, #0
   1ebe6:	dd07      	ble.n	1ebf8 <add_to_waitq_locked+0x88>
			sys_dlist_insert(&t->base.qnode_dlist,
   1ebe8:	68fb      	ldr	r3, [r7, #12]
   1ebea:	693a      	ldr	r2, [r7, #16]
   1ebec:	4611      	mov	r1, r2
   1ebee:	4618      	mov	r0, r3
   1ebf0:	f009 fb22 	bl	28238 <sys_dlist_insert>
			return;
   1ebf4:	bf00      	nop
}
   1ebf6:	e01d      	b.n	1ec34 <add_to_waitq_locked+0xc4>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ebf8:	68fb      	ldr	r3, [r7, #12]
   1ebfa:	2b00      	cmp	r3, #0
   1ebfc:	d010      	beq.n	1ec20 <add_to_waitq_locked+0xb0>
   1ebfe:	68fb      	ldr	r3, [r7, #12]
   1ec00:	4619      	mov	r1, r3
   1ec02:	6978      	ldr	r0, [r7, #20]
   1ec04:	f009 faec 	bl	281e0 <sys_dlist_peek_next>
   1ec08:	4603      	mov	r3, r0
   1ec0a:	2b00      	cmp	r3, #0
   1ec0c:	d006      	beq.n	1ec1c <add_to_waitq_locked+0xac>
   1ec0e:	68fb      	ldr	r3, [r7, #12]
   1ec10:	4619      	mov	r1, r3
   1ec12:	6978      	ldr	r0, [r7, #20]
   1ec14:	f009 fae4 	bl	281e0 <sys_dlist_peek_next>
   1ec18:	4603      	mov	r3, r0
   1ec1a:	e002      	b.n	1ec22 <add_to_waitq_locked+0xb2>
   1ec1c:	2300      	movs	r3, #0
   1ec1e:	e000      	b.n	1ec22 <add_to_waitq_locked+0xb2>
   1ec20:	2300      	movs	r3, #0
   1ec22:	60fb      	str	r3, [r7, #12]
   1ec24:	68fb      	ldr	r3, [r7, #12]
   1ec26:	2b00      	cmp	r3, #0
   1ec28:	d1d7      	bne.n	1ebda <add_to_waitq_locked+0x6a>
	sys_dlist_append(pq, &thread->base.qnode_dlist);
   1ec2a:	693b      	ldr	r3, [r7, #16]
   1ec2c:	4619      	mov	r1, r3
   1ec2e:	6978      	ldr	r0, [r7, #20]
   1ec30:	f009 fae9 	bl	28206 <sys_dlist_append>
}
   1ec34:	bf00      	nop
   1ec36:	3718      	adds	r7, #24
   1ec38:	46bd      	mov	sp, r7
   1ec3a:	bd80      	pop	{r7, pc}
   1ec3c:	0002c608 	.word	0x0002c608
   1ec40:	0002c62c 	.word	0x0002c62c
   1ec44:	0002c5b0 	.word	0x0002c5b0

0001ec48 <pend>:
{
   1ec48:	b580      	push	{r7, lr}
   1ec4a:	b08e      	sub	sp, #56	; 0x38
   1ec4c:	af00      	add	r7, sp, #0
   1ec4e:	60f8      	str	r0, [r7, #12]
   1ec50:	60b9      	str	r1, [r7, #8]
   1ec52:	e9c7 2300 	strd	r2, r3, [r7]
	LOCKED(&sched_spinlock) {
   1ec56:	2300      	movs	r3, #0
   1ec58:	623b      	str	r3, [r7, #32]
   1ec5a:	4b30      	ldr	r3, [pc, #192]	; (1ed1c <pend+0xd4>)
   1ec5c:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
   1ec5e:	f04f 0320 	mov.w	r3, #32
   1ec62:	f3ef 8211 	mrs	r2, BASEPRI
   1ec66:	f383 8811 	msr	BASEPRI, r3
   1ec6a:	f3bf 8f6f 	isb	sy
   1ec6e:	633a      	str	r2, [r7, #48]	; 0x30
   1ec70:	62fb      	str	r3, [r7, #44]	; 0x2c
	return key;
   1ec72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	k.key = arch_irq_lock();
   1ec74:	617b      	str	r3, [r7, #20]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ec76:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1ec78:	f7fe f9e6 	bl	1d048 <z_spin_lock_valid>
   1ec7c:	4603      	mov	r3, r0
   1ec7e:	f083 0301 	eor.w	r3, r3, #1
   1ec82:	b2db      	uxtb	r3, r3
   1ec84:	2b00      	cmp	r3, #0
   1ec86:	d00d      	beq.n	1eca4 <pend+0x5c>
   1ec88:	2381      	movs	r3, #129	; 0x81
   1ec8a:	4a25      	ldr	r2, [pc, #148]	; (1ed20 <pend+0xd8>)
   1ec8c:	4925      	ldr	r1, [pc, #148]	; (1ed24 <pend+0xdc>)
   1ec8e:	4826      	ldr	r0, [pc, #152]	; (1ed28 <pend+0xe0>)
   1ec90:	f002 f9ea 	bl	21068 <printk>
   1ec94:	6b79      	ldr	r1, [r7, #52]	; 0x34
   1ec96:	4825      	ldr	r0, [pc, #148]	; (1ed2c <pend+0xe4>)
   1ec98:	f002 f9e6 	bl	21068 <printk>
   1ec9c:	2181      	movs	r1, #129	; 0x81
   1ec9e:	4820      	ldr	r0, [pc, #128]	; (1ed20 <pend+0xd8>)
   1eca0:	f003 fa8f 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1eca4:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1eca6:	f7fe fa07 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1ecaa:	697b      	ldr	r3, [r7, #20]
   1ecac:	61fb      	str	r3, [r7, #28]
   1ecae:	e029      	b.n	1ed04 <pend+0xbc>
		add_to_waitq_locked(thread, wait_q);
   1ecb0:	68b9      	ldr	r1, [r7, #8]
   1ecb2:	68f8      	ldr	r0, [r7, #12]
   1ecb4:	f7ff ff5c 	bl	1eb70 <add_to_waitq_locked>
   1ecb8:	4b18      	ldr	r3, [pc, #96]	; (1ed1c <pend+0xd4>)
   1ecba:	62bb      	str	r3, [r7, #40]	; 0x28
   1ecbc:	69fb      	ldr	r3, [r7, #28]
   1ecbe:	61bb      	str	r3, [r7, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ecc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1ecc2:	f7fe f9dd 	bl	1d080 <z_spin_unlock_valid>
   1ecc6:	4603      	mov	r3, r0
   1ecc8:	f083 0301 	eor.w	r3, r3, #1
   1eccc:	b2db      	uxtb	r3, r3
   1ecce:	2b00      	cmp	r3, #0
   1ecd0:	d00d      	beq.n	1ecee <pend+0xa6>
   1ecd2:	23ac      	movs	r3, #172	; 0xac
   1ecd4:	4a12      	ldr	r2, [pc, #72]	; (1ed20 <pend+0xd8>)
   1ecd6:	4916      	ldr	r1, [pc, #88]	; (1ed30 <pend+0xe8>)
   1ecd8:	4813      	ldr	r0, [pc, #76]	; (1ed28 <pend+0xe0>)
   1ecda:	f002 f9c5 	bl	21068 <printk>
   1ecde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1ece0:	4814      	ldr	r0, [pc, #80]	; (1ed34 <pend+0xec>)
   1ece2:	f002 f9c1 	bl	21068 <printk>
   1ece6:	21ac      	movs	r1, #172	; 0xac
   1ece8:	480d      	ldr	r0, [pc, #52]	; (1ed20 <pend+0xd8>)
   1ecea:	f003 fa6a 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1ecee:	69bb      	ldr	r3, [r7, #24]
   1ecf0:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   1ecf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1ecf4:	f383 8811 	msr	BASEPRI, r3
   1ecf8:	f3bf 8f6f 	isb	sy
}
   1ecfc:	bf00      	nop
}
   1ecfe:	bf00      	nop
	LOCKED(&sched_spinlock) {
   1ed00:	2301      	movs	r3, #1
   1ed02:	623b      	str	r3, [r7, #32]
   1ed04:	6a3b      	ldr	r3, [r7, #32]
   1ed06:	2b00      	cmp	r3, #0
   1ed08:	d0d2      	beq.n	1ecb0 <pend+0x68>
	add_thread_timeout(thread, timeout);
   1ed0a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1ed0e:	68f8      	ldr	r0, [r7, #12]
   1ed10:	f009 feb9 	bl	28a86 <add_thread_timeout>
}
   1ed14:	bf00      	nop
   1ed16:	3738      	adds	r7, #56	; 0x38
   1ed18:	46bd      	mov	sp, r7
   1ed1a:	bd80      	pop	{r7, pc}
   1ed1c:	200151b4 	.word	0x200151b4
   1ed20:	0002c650 	.word	0x0002c650
   1ed24:	0002c678 	.word	0x0002c678
   1ed28:	0002c5b0 	.word	0x0002c5b0
   1ed2c:	0002c690 	.word	0x0002c690
   1ed30:	0002c6a8 	.word	0x0002c6a8
   1ed34:	0002c6c0 	.word	0x0002c6c0

0001ed38 <z_unpend_thread_no_timeout>:
{
   1ed38:	b580      	push	{r7, lr}
   1ed3a:	b08c      	sub	sp, #48	; 0x30
   1ed3c:	af00      	add	r7, sp, #0
   1ed3e:	6078      	str	r0, [r7, #4]
	LOCKED(&sched_spinlock) {
   1ed40:	2300      	movs	r3, #0
   1ed42:	61bb      	str	r3, [r7, #24]
   1ed44:	4b2d      	ldr	r3, [pc, #180]	; (1edfc <z_unpend_thread_no_timeout+0xc4>)
   1ed46:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   1ed48:	f04f 0320 	mov.w	r3, #32
   1ed4c:	f3ef 8211 	mrs	r2, BASEPRI
   1ed50:	f383 8811 	msr	BASEPRI, r3
   1ed54:	f3bf 8f6f 	isb	sy
   1ed58:	62ba      	str	r2, [r7, #40]	; 0x28
   1ed5a:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   1ed5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
   1ed5e:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ed60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1ed62:	f7fe f971 	bl	1d048 <z_spin_lock_valid>
   1ed66:	4603      	mov	r3, r0
   1ed68:	f083 0301 	eor.w	r3, r3, #1
   1ed6c:	b2db      	uxtb	r3, r3
   1ed6e:	2b00      	cmp	r3, #0
   1ed70:	d00d      	beq.n	1ed8e <z_unpend_thread_no_timeout+0x56>
   1ed72:	2381      	movs	r3, #129	; 0x81
   1ed74:	4a22      	ldr	r2, [pc, #136]	; (1ee00 <z_unpend_thread_no_timeout+0xc8>)
   1ed76:	4923      	ldr	r1, [pc, #140]	; (1ee04 <z_unpend_thread_no_timeout+0xcc>)
   1ed78:	4823      	ldr	r0, [pc, #140]	; (1ee08 <z_unpend_thread_no_timeout+0xd0>)
   1ed7a:	f002 f975 	bl	21068 <printk>
   1ed7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1ed80:	4822      	ldr	r0, [pc, #136]	; (1ee0c <z_unpend_thread_no_timeout+0xd4>)
   1ed82:	f002 f971 	bl	21068 <printk>
   1ed86:	2181      	movs	r1, #129	; 0x81
   1ed88:	481d      	ldr	r0, [pc, #116]	; (1ee00 <z_unpend_thread_no_timeout+0xc8>)
   1ed8a:	f003 fa1a 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ed8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1ed90:	f7fe f992 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1ed94:	68fb      	ldr	r3, [r7, #12]
   1ed96:	617b      	str	r3, [r7, #20]
   1ed98:	e028      	b.n	1edec <z_unpend_thread_no_timeout+0xb4>
		unpend_thread_no_timeout(thread);
   1ed9a:	6878      	ldr	r0, [r7, #4]
   1ed9c:	f009 fe8c 	bl	28ab8 <unpend_thread_no_timeout>
   1eda0:	4b16      	ldr	r3, [pc, #88]	; (1edfc <z_unpend_thread_no_timeout+0xc4>)
   1eda2:	623b      	str	r3, [r7, #32]
   1eda4:	697b      	ldr	r3, [r7, #20]
   1eda6:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1eda8:	6a38      	ldr	r0, [r7, #32]
   1edaa:	f7fe f969 	bl	1d080 <z_spin_unlock_valid>
   1edae:	4603      	mov	r3, r0
   1edb0:	f083 0301 	eor.w	r3, r3, #1
   1edb4:	b2db      	uxtb	r3, r3
   1edb6:	2b00      	cmp	r3, #0
   1edb8:	d00d      	beq.n	1edd6 <z_unpend_thread_no_timeout+0x9e>
   1edba:	23ac      	movs	r3, #172	; 0xac
   1edbc:	4a10      	ldr	r2, [pc, #64]	; (1ee00 <z_unpend_thread_no_timeout+0xc8>)
   1edbe:	4914      	ldr	r1, [pc, #80]	; (1ee10 <z_unpend_thread_no_timeout+0xd8>)
   1edc0:	4811      	ldr	r0, [pc, #68]	; (1ee08 <z_unpend_thread_no_timeout+0xd0>)
   1edc2:	f002 f951 	bl	21068 <printk>
   1edc6:	6a39      	ldr	r1, [r7, #32]
   1edc8:	4812      	ldr	r0, [pc, #72]	; (1ee14 <z_unpend_thread_no_timeout+0xdc>)
   1edca:	f002 f94d 	bl	21068 <printk>
   1edce:	21ac      	movs	r1, #172	; 0xac
   1edd0:	480b      	ldr	r0, [pc, #44]	; (1ee00 <z_unpend_thread_no_timeout+0xc8>)
   1edd2:	f003 f9f6 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1edd6:	693b      	ldr	r3, [r7, #16]
   1edd8:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   1edda:	69fb      	ldr	r3, [r7, #28]
   1eddc:	f383 8811 	msr	BASEPRI, r3
   1ede0:	f3bf 8f6f 	isb	sy
}
   1ede4:	bf00      	nop
}
   1ede6:	bf00      	nop
	LOCKED(&sched_spinlock) {
   1ede8:	2301      	movs	r3, #1
   1edea:	61bb      	str	r3, [r7, #24]
   1edec:	69bb      	ldr	r3, [r7, #24]
   1edee:	2b00      	cmp	r3, #0
   1edf0:	d0d3      	beq.n	1ed9a <z_unpend_thread_no_timeout+0x62>
}
   1edf2:	bf00      	nop
   1edf4:	bf00      	nop
   1edf6:	3730      	adds	r7, #48	; 0x30
   1edf8:	46bd      	mov	sp, r7
   1edfa:	bd80      	pop	{r7, pc}
   1edfc:	200151b4 	.word	0x200151b4
   1ee00:	0002c650 	.word	0x0002c650
   1ee04:	0002c678 	.word	0x0002c678
   1ee08:	0002c5b0 	.word	0x0002c5b0
   1ee0c:	0002c690 	.word	0x0002c690
   1ee10:	0002c6a8 	.word	0x0002c6a8
   1ee14:	0002c6c0 	.word	0x0002c6c0

0001ee18 <z_thread_timeout>:
{
   1ee18:	b580      	push	{r7, lr}
   1ee1a:	b08e      	sub	sp, #56	; 0x38
   1ee1c:	af00      	add	r7, sp, #0
   1ee1e:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = CONTAINER_OF(timeout,
   1ee20:	687b      	ldr	r3, [r7, #4]
   1ee22:	3b18      	subs	r3, #24
   1ee24:	637b      	str	r3, [r7, #52]	; 0x34
	LOCKED(&sched_spinlock) {
   1ee26:	2300      	movs	r3, #0
   1ee28:	61bb      	str	r3, [r7, #24]
   1ee2a:	4b43      	ldr	r3, [pc, #268]	; (1ef38 <z_thread_timeout+0x120>)
   1ee2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   1ee2e:	f04f 0320 	mov.w	r3, #32
   1ee32:	f3ef 8211 	mrs	r2, BASEPRI
   1ee36:	f383 8811 	msr	BASEPRI, r3
   1ee3a:	f3bf 8f6f 	isb	sy
   1ee3e:	62ba      	str	r2, [r7, #40]	; 0x28
   1ee40:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   1ee42:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
   1ee44:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ee46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1ee48:	f7fe f8fe 	bl	1d048 <z_spin_lock_valid>
   1ee4c:	4603      	mov	r3, r0
   1ee4e:	f083 0301 	eor.w	r3, r3, #1
   1ee52:	b2db      	uxtb	r3, r3
   1ee54:	2b00      	cmp	r3, #0
   1ee56:	d00d      	beq.n	1ee74 <z_thread_timeout+0x5c>
   1ee58:	2381      	movs	r3, #129	; 0x81
   1ee5a:	4a38      	ldr	r2, [pc, #224]	; (1ef3c <z_thread_timeout+0x124>)
   1ee5c:	4938      	ldr	r1, [pc, #224]	; (1ef40 <z_thread_timeout+0x128>)
   1ee5e:	4839      	ldr	r0, [pc, #228]	; (1ef44 <z_thread_timeout+0x12c>)
   1ee60:	f002 f902 	bl	21068 <printk>
   1ee64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1ee66:	4838      	ldr	r0, [pc, #224]	; (1ef48 <z_thread_timeout+0x130>)
   1ee68:	f002 f8fe 	bl	21068 <printk>
   1ee6c:	2181      	movs	r1, #129	; 0x81
   1ee6e:	4833      	ldr	r0, [pc, #204]	; (1ef3c <z_thread_timeout+0x124>)
   1ee70:	f003 f9a7 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ee74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1ee76:	f7fe f91f 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1ee7a:	68fb      	ldr	r3, [r7, #12]
   1ee7c:	617b      	str	r3, [r7, #20]
   1ee7e:	e053      	b.n	1ef28 <z_thread_timeout+0x110>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   1ee80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ee82:	7b5b      	ldrb	r3, [r3, #13]
   1ee84:	f003 0308 	and.w	r3, r3, #8
   1ee88:	2b00      	cmp	r3, #0
   1ee8a:	d105      	bne.n	1ee98 <z_thread_timeout+0x80>
			       (thread->base.thread_state & _THREAD_ABORTING));
   1ee8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ee8e:	7b5b      	ldrb	r3, [r3, #13]
   1ee90:	f003 0320 	and.w	r3, r3, #32
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   1ee94:	2b00      	cmp	r3, #0
   1ee96:	d001      	beq.n	1ee9c <z_thread_timeout+0x84>
   1ee98:	2301      	movs	r3, #1
   1ee9a:	e000      	b.n	1ee9e <z_thread_timeout+0x86>
   1ee9c:	2300      	movs	r3, #0
   1ee9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
   1eea2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   1eea6:	f003 0301 	and.w	r3, r3, #1
   1eeaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if (!killed) {
   1eeae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   1eeb2:	f083 0301 	eor.w	r3, r3, #1
   1eeb6:	b2db      	uxtb	r3, r3
   1eeb8:	2b00      	cmp	r3, #0
   1eeba:	d00f      	beq.n	1eedc <z_thread_timeout+0xc4>
			if (thread->base.pended_on != NULL) {
   1eebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1eebe:	689b      	ldr	r3, [r3, #8]
   1eec0:	2b00      	cmp	r3, #0
   1eec2:	d002      	beq.n	1eeca <z_thread_timeout+0xb2>
				unpend_thread_no_timeout(thread);
   1eec4:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1eec6:	f009 fdf7 	bl	28ab8 <unpend_thread_no_timeout>
			z_mark_thread_as_started(thread);
   1eeca:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1eecc:	f009 fd20 	bl	28910 <z_mark_thread_as_started>
			z_mark_thread_as_not_suspended(thread);
   1eed0:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1eed2:	f009 fd0d 	bl	288f0 <z_mark_thread_as_not_suspended>
			ready_thread(thread);
   1eed6:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1eed8:	f7ff fbde 	bl	1e698 <ready_thread>
   1eedc:	4b16      	ldr	r3, [pc, #88]	; (1ef38 <z_thread_timeout+0x120>)
   1eede:	623b      	str	r3, [r7, #32]
   1eee0:	697b      	ldr	r3, [r7, #20]
   1eee2:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1eee4:	6a38      	ldr	r0, [r7, #32]
   1eee6:	f7fe f8cb 	bl	1d080 <z_spin_unlock_valid>
   1eeea:	4603      	mov	r3, r0
   1eeec:	f083 0301 	eor.w	r3, r3, #1
   1eef0:	b2db      	uxtb	r3, r3
   1eef2:	2b00      	cmp	r3, #0
   1eef4:	d00d      	beq.n	1ef12 <z_thread_timeout+0xfa>
   1eef6:	23ac      	movs	r3, #172	; 0xac
   1eef8:	4a10      	ldr	r2, [pc, #64]	; (1ef3c <z_thread_timeout+0x124>)
   1eefa:	4914      	ldr	r1, [pc, #80]	; (1ef4c <z_thread_timeout+0x134>)
   1eefc:	4811      	ldr	r0, [pc, #68]	; (1ef44 <z_thread_timeout+0x12c>)
   1eefe:	f002 f8b3 	bl	21068 <printk>
   1ef02:	6a39      	ldr	r1, [r7, #32]
   1ef04:	4812      	ldr	r0, [pc, #72]	; (1ef50 <z_thread_timeout+0x138>)
   1ef06:	f002 f8af 	bl	21068 <printk>
   1ef0a:	21ac      	movs	r1, #172	; 0xac
   1ef0c:	480b      	ldr	r0, [pc, #44]	; (1ef3c <z_thread_timeout+0x124>)
   1ef0e:	f003 f958 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1ef12:	693b      	ldr	r3, [r7, #16]
   1ef14:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   1ef16:	69fb      	ldr	r3, [r7, #28]
   1ef18:	f383 8811 	msr	BASEPRI, r3
   1ef1c:	f3bf 8f6f 	isb	sy
}
   1ef20:	bf00      	nop
}
   1ef22:	bf00      	nop
	LOCKED(&sched_spinlock) {
   1ef24:	2301      	movs	r3, #1
   1ef26:	61bb      	str	r3, [r7, #24]
   1ef28:	69bb      	ldr	r3, [r7, #24]
   1ef2a:	2b00      	cmp	r3, #0
   1ef2c:	d0a8      	beq.n	1ee80 <z_thread_timeout+0x68>
}
   1ef2e:	bf00      	nop
   1ef30:	bf00      	nop
   1ef32:	3738      	adds	r7, #56	; 0x38
   1ef34:	46bd      	mov	sp, r7
   1ef36:	bd80      	pop	{r7, pc}
   1ef38:	200151b4 	.word	0x200151b4
   1ef3c:	0002c650 	.word	0x0002c650
   1ef40:	0002c678 	.word	0x0002c678
   1ef44:	0002c5b0 	.word	0x0002c5b0
   1ef48:	0002c690 	.word	0x0002c690
   1ef4c:	0002c6a8 	.word	0x0002c6a8
   1ef50:	0002c6c0 	.word	0x0002c6c0

0001ef54 <z_pend_curr>:
{
   1ef54:	b580      	push	{r7, lr}
   1ef56:	b088      	sub	sp, #32
   1ef58:	af00      	add	r7, sp, #0
   1ef5a:	60f8      	str	r0, [r7, #12]
   1ef5c:	60b9      	str	r1, [r7, #8]
   1ef5e:	607a      	str	r2, [r7, #4]
	pending_current = _current;
   1ef60:	4b18      	ldr	r3, [pc, #96]	; (1efc4 <z_pend_curr+0x70>)
   1ef62:	689b      	ldr	r3, [r3, #8]
   1ef64:	4a18      	ldr	r2, [pc, #96]	; (1efc8 <z_pend_curr+0x74>)
   1ef66:	6013      	str	r3, [r2, #0]
	pend(_current, wait_q, timeout);
   1ef68:	4b16      	ldr	r3, [pc, #88]	; (1efc4 <z_pend_curr+0x70>)
   1ef6a:	6898      	ldr	r0, [r3, #8]
   1ef6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   1ef70:	6879      	ldr	r1, [r7, #4]
   1ef72:	f7ff fe69 	bl	1ec48 <pend>
   1ef76:	68fb      	ldr	r3, [r7, #12]
   1ef78:	61fb      	str	r3, [r7, #28]
   1ef7a:	68bb      	ldr	r3, [r7, #8]
   1ef7c:	617b      	str	r3, [r7, #20]
   1ef7e:	69fb      	ldr	r3, [r7, #28]
   1ef80:	61bb      	str	r3, [r7, #24]
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ef82:	69b8      	ldr	r0, [r7, #24]
   1ef84:	f7fe f87c 	bl	1d080 <z_spin_unlock_valid>
   1ef88:	4603      	mov	r3, r0
   1ef8a:	f083 0301 	eor.w	r3, r3, #1
   1ef8e:	b2db      	uxtb	r3, r3
   1ef90:	2b00      	cmp	r3, #0
   1ef92:	d00d      	beq.n	1efb0 <z_pend_curr+0x5c>
   1ef94:	23c3      	movs	r3, #195	; 0xc3
   1ef96:	4a0d      	ldr	r2, [pc, #52]	; (1efcc <z_pend_curr+0x78>)
   1ef98:	490d      	ldr	r1, [pc, #52]	; (1efd0 <z_pend_curr+0x7c>)
   1ef9a:	480e      	ldr	r0, [pc, #56]	; (1efd4 <z_pend_curr+0x80>)
   1ef9c:	f002 f864 	bl	21068 <printk>
   1efa0:	69b9      	ldr	r1, [r7, #24]
   1efa2:	480d      	ldr	r0, [pc, #52]	; (1efd8 <z_pend_curr+0x84>)
   1efa4:	f002 f860 	bl	21068 <printk>
   1efa8:	21c3      	movs	r1, #195	; 0xc3
   1efaa:	4808      	ldr	r0, [pc, #32]	; (1efcc <z_pend_curr+0x78>)
   1efac:	f003 f909 	bl	221c2 <assert_post_action>
#endif
#ifdef CONFIG_SMP
	atomic_clear(&l->locked);
#endif
}
   1efb0:	bf00      	nop
	return z_swap_irqlock(key.key);
   1efb2:	697b      	ldr	r3, [r7, #20]
   1efb4:	4618      	mov	r0, r3
   1efb6:	f009 fd07 	bl	289c8 <z_swap_irqlock>
   1efba:	4603      	mov	r3, r0
}
   1efbc:	4618      	mov	r0, r3
   1efbe:	3720      	adds	r7, #32
   1efc0:	46bd      	mov	sp, r7
   1efc2:	bd80      	pop	{r7, pc}
   1efc4:	2001517c 	.word	0x2001517c
   1efc8:	200151c0 	.word	0x200151c0
   1efcc:	0002c650 	.word	0x0002c650
   1efd0:	0002c6a8 	.word	0x0002c6a8
   1efd4:	0002c5b0 	.word	0x0002c5b0
   1efd8:	0002c6c0 	.word	0x0002c6c0

0001efdc <z_unpend1_no_timeout>:
{
   1efdc:	b580      	push	{r7, lr}
   1efde:	b08c      	sub	sp, #48	; 0x30
   1efe0:	af00      	add	r7, sp, #0
   1efe2:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = NULL;
   1efe4:	2300      	movs	r3, #0
   1efe6:	62fb      	str	r3, [r7, #44]	; 0x2c
	LOCKED(&sched_spinlock) {
   1efe8:	2300      	movs	r3, #0
   1efea:	617b      	str	r3, [r7, #20]
   1efec:	4b31      	ldr	r3, [pc, #196]	; (1f0b4 <z_unpend1_no_timeout+0xd8>)
   1efee:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
   1eff0:	f04f 0320 	mov.w	r3, #32
   1eff4:	f3ef 8211 	mrs	r2, BASEPRI
   1eff8:	f383 8811 	msr	BASEPRI, r3
   1effc:	f3bf 8f6f 	isb	sy
   1f000:	627a      	str	r2, [r7, #36]	; 0x24
   1f002:	623b      	str	r3, [r7, #32]
	return key;
   1f004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	k.key = arch_irq_lock();
   1f006:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1f00a:	f7fe f81d 	bl	1d048 <z_spin_lock_valid>
   1f00e:	4603      	mov	r3, r0
   1f010:	f083 0301 	eor.w	r3, r3, #1
   1f014:	b2db      	uxtb	r3, r3
   1f016:	2b00      	cmp	r3, #0
   1f018:	d00d      	beq.n	1f036 <z_unpend1_no_timeout+0x5a>
   1f01a:	2381      	movs	r3, #129	; 0x81
   1f01c:	4a26      	ldr	r2, [pc, #152]	; (1f0b8 <z_unpend1_no_timeout+0xdc>)
   1f01e:	4927      	ldr	r1, [pc, #156]	; (1f0bc <z_unpend1_no_timeout+0xe0>)
   1f020:	4827      	ldr	r0, [pc, #156]	; (1f0c0 <z_unpend1_no_timeout+0xe4>)
   1f022:	f002 f821 	bl	21068 <printk>
   1f026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1f028:	4826      	ldr	r0, [pc, #152]	; (1f0c4 <z_unpend1_no_timeout+0xe8>)
   1f02a:	f002 f81d 	bl	21068 <printk>
   1f02e:	2181      	movs	r1, #129	; 0x81
   1f030:	4821      	ldr	r0, [pc, #132]	; (1f0b8 <z_unpend1_no_timeout+0xdc>)
   1f032:	f003 f8c6 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1f038:	f7fe f83e 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1f03c:	68bb      	ldr	r3, [r7, #8]
   1f03e:	613b      	str	r3, [r7, #16]
   1f040:	e030      	b.n	1f0a4 <z_unpend1_no_timeout+0xc8>
		thread = _priq_wait_best(&wait_q->waitq);
   1f042:	687b      	ldr	r3, [r7, #4]
   1f044:	4618      	mov	r0, r3
   1f046:	f009 fd8e 	bl	28b66 <z_priq_dumb_best>
   1f04a:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (thread != NULL) {
   1f04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f04e:	2b00      	cmp	r3, #0
   1f050:	d002      	beq.n	1f058 <z_unpend1_no_timeout+0x7c>
			unpend_thread_no_timeout(thread);
   1f052:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1f054:	f009 fd30 	bl	28ab8 <unpend_thread_no_timeout>
   1f058:	4b16      	ldr	r3, [pc, #88]	; (1f0b4 <z_unpend1_no_timeout+0xd8>)
   1f05a:	61fb      	str	r3, [r7, #28]
   1f05c:	693b      	ldr	r3, [r7, #16]
   1f05e:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f060:	69f8      	ldr	r0, [r7, #28]
   1f062:	f7fe f80d 	bl	1d080 <z_spin_unlock_valid>
   1f066:	4603      	mov	r3, r0
   1f068:	f083 0301 	eor.w	r3, r3, #1
   1f06c:	b2db      	uxtb	r3, r3
   1f06e:	2b00      	cmp	r3, #0
   1f070:	d00d      	beq.n	1f08e <z_unpend1_no_timeout+0xb2>
   1f072:	23ac      	movs	r3, #172	; 0xac
   1f074:	4a10      	ldr	r2, [pc, #64]	; (1f0b8 <z_unpend1_no_timeout+0xdc>)
   1f076:	4914      	ldr	r1, [pc, #80]	; (1f0c8 <z_unpend1_no_timeout+0xec>)
   1f078:	4811      	ldr	r0, [pc, #68]	; (1f0c0 <z_unpend1_no_timeout+0xe4>)
   1f07a:	f001 fff5 	bl	21068 <printk>
   1f07e:	69f9      	ldr	r1, [r7, #28]
   1f080:	4812      	ldr	r0, [pc, #72]	; (1f0cc <z_unpend1_no_timeout+0xf0>)
   1f082:	f001 fff1 	bl	21068 <printk>
   1f086:	21ac      	movs	r1, #172	; 0xac
   1f088:	480b      	ldr	r0, [pc, #44]	; (1f0b8 <z_unpend1_no_timeout+0xdc>)
   1f08a:	f003 f89a 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1f08e:	68fb      	ldr	r3, [r7, #12]
   1f090:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
   1f092:	69bb      	ldr	r3, [r7, #24]
   1f094:	f383 8811 	msr	BASEPRI, r3
   1f098:	f3bf 8f6f 	isb	sy
}
   1f09c:	bf00      	nop
}
   1f09e:	bf00      	nop
	LOCKED(&sched_spinlock) {
   1f0a0:	2301      	movs	r3, #1
   1f0a2:	617b      	str	r3, [r7, #20]
   1f0a4:	697b      	ldr	r3, [r7, #20]
   1f0a6:	2b00      	cmp	r3, #0
   1f0a8:	d0cb      	beq.n	1f042 <z_unpend1_no_timeout+0x66>
	return thread;
   1f0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   1f0ac:	4618      	mov	r0, r3
   1f0ae:	3730      	adds	r7, #48	; 0x30
   1f0b0:	46bd      	mov	sp, r7
   1f0b2:	bd80      	pop	{r7, pc}
   1f0b4:	200151b4 	.word	0x200151b4
   1f0b8:	0002c650 	.word	0x0002c650
   1f0bc:	0002c678 	.word	0x0002c678
   1f0c0:	0002c5b0 	.word	0x0002c5b0
   1f0c4:	0002c690 	.word	0x0002c690
   1f0c8:	0002c6a8 	.word	0x0002c6a8
   1f0cc:	0002c6c0 	.word	0x0002c6c0

0001f0d0 <z_unpend_first_thread>:
{
   1f0d0:	b580      	push	{r7, lr}
   1f0d2:	b08c      	sub	sp, #48	; 0x30
   1f0d4:	af00      	add	r7, sp, #0
   1f0d6:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = NULL;
   1f0d8:	2300      	movs	r3, #0
   1f0da:	62fb      	str	r3, [r7, #44]	; 0x2c
	LOCKED(&sched_spinlock) {
   1f0dc:	2300      	movs	r3, #0
   1f0de:	617b      	str	r3, [r7, #20]
   1f0e0:	4b33      	ldr	r3, [pc, #204]	; (1f1b0 <z_unpend_first_thread+0xe0>)
   1f0e2:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
   1f0e4:	f04f 0320 	mov.w	r3, #32
   1f0e8:	f3ef 8211 	mrs	r2, BASEPRI
   1f0ec:	f383 8811 	msr	BASEPRI, r3
   1f0f0:	f3bf 8f6f 	isb	sy
   1f0f4:	627a      	str	r2, [r7, #36]	; 0x24
   1f0f6:	623b      	str	r3, [r7, #32]
	return key;
   1f0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	k.key = arch_irq_lock();
   1f0fa:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f0fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1f0fe:	f7fd ffa3 	bl	1d048 <z_spin_lock_valid>
   1f102:	4603      	mov	r3, r0
   1f104:	f083 0301 	eor.w	r3, r3, #1
   1f108:	b2db      	uxtb	r3, r3
   1f10a:	2b00      	cmp	r3, #0
   1f10c:	d00d      	beq.n	1f12a <z_unpend_first_thread+0x5a>
   1f10e:	2381      	movs	r3, #129	; 0x81
   1f110:	4a28      	ldr	r2, [pc, #160]	; (1f1b4 <z_unpend_first_thread+0xe4>)
   1f112:	4929      	ldr	r1, [pc, #164]	; (1f1b8 <z_unpend_first_thread+0xe8>)
   1f114:	4829      	ldr	r0, [pc, #164]	; (1f1bc <z_unpend_first_thread+0xec>)
   1f116:	f001 ffa7 	bl	21068 <printk>
   1f11a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1f11c:	4828      	ldr	r0, [pc, #160]	; (1f1c0 <z_unpend_first_thread+0xf0>)
   1f11e:	f001 ffa3 	bl	21068 <printk>
   1f122:	2181      	movs	r1, #129	; 0x81
   1f124:	4823      	ldr	r0, [pc, #140]	; (1f1b4 <z_unpend_first_thread+0xe4>)
   1f126:	f003 f84c 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f12a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1f12c:	f7fd ffc4 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1f130:	68bb      	ldr	r3, [r7, #8]
   1f132:	613b      	str	r3, [r7, #16]
   1f134:	e033      	b.n	1f19e <z_unpend_first_thread+0xce>
		thread = _priq_wait_best(&wait_q->waitq);
   1f136:	687b      	ldr	r3, [r7, #4]
   1f138:	4618      	mov	r0, r3
   1f13a:	f009 fd14 	bl	28b66 <z_priq_dumb_best>
   1f13e:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (thread != NULL) {
   1f140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f142:	2b00      	cmp	r3, #0
   1f144:	d005      	beq.n	1f152 <z_unpend_first_thread+0x82>
			unpend_thread_no_timeout(thread);
   1f146:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1f148:	f009 fcb6 	bl	28ab8 <unpend_thread_no_timeout>
			(void)z_abort_thread_timeout(thread);
   1f14c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1f14e:	f009 fb1c 	bl	2878a <z_abort_thread_timeout>
   1f152:	4b17      	ldr	r3, [pc, #92]	; (1f1b0 <z_unpend_first_thread+0xe0>)
   1f154:	61fb      	str	r3, [r7, #28]
   1f156:	693b      	ldr	r3, [r7, #16]
   1f158:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f15a:	69f8      	ldr	r0, [r7, #28]
   1f15c:	f7fd ff90 	bl	1d080 <z_spin_unlock_valid>
   1f160:	4603      	mov	r3, r0
   1f162:	f083 0301 	eor.w	r3, r3, #1
   1f166:	b2db      	uxtb	r3, r3
   1f168:	2b00      	cmp	r3, #0
   1f16a:	d00d      	beq.n	1f188 <z_unpend_first_thread+0xb8>
   1f16c:	23ac      	movs	r3, #172	; 0xac
   1f16e:	4a11      	ldr	r2, [pc, #68]	; (1f1b4 <z_unpend_first_thread+0xe4>)
   1f170:	4914      	ldr	r1, [pc, #80]	; (1f1c4 <z_unpend_first_thread+0xf4>)
   1f172:	4812      	ldr	r0, [pc, #72]	; (1f1bc <z_unpend_first_thread+0xec>)
   1f174:	f001 ff78 	bl	21068 <printk>
   1f178:	69f9      	ldr	r1, [r7, #28]
   1f17a:	4813      	ldr	r0, [pc, #76]	; (1f1c8 <z_unpend_first_thread+0xf8>)
   1f17c:	f001 ff74 	bl	21068 <printk>
   1f180:	21ac      	movs	r1, #172	; 0xac
   1f182:	480c      	ldr	r0, [pc, #48]	; (1f1b4 <z_unpend_first_thread+0xe4>)
   1f184:	f003 f81d 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1f188:	68fb      	ldr	r3, [r7, #12]
   1f18a:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
   1f18c:	69bb      	ldr	r3, [r7, #24]
   1f18e:	f383 8811 	msr	BASEPRI, r3
   1f192:	f3bf 8f6f 	isb	sy
}
   1f196:	bf00      	nop
}
   1f198:	bf00      	nop
	LOCKED(&sched_spinlock) {
   1f19a:	2301      	movs	r3, #1
   1f19c:	617b      	str	r3, [r7, #20]
   1f19e:	697b      	ldr	r3, [r7, #20]
   1f1a0:	2b00      	cmp	r3, #0
   1f1a2:	d0c8      	beq.n	1f136 <z_unpend_first_thread+0x66>
	return thread;
   1f1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   1f1a6:	4618      	mov	r0, r3
   1f1a8:	3730      	adds	r7, #48	; 0x30
   1f1aa:	46bd      	mov	sp, r7
   1f1ac:	bd80      	pop	{r7, pc}
   1f1ae:	bf00      	nop
   1f1b0:	200151b4 	.word	0x200151b4
   1f1b4:	0002c650 	.word	0x0002c650
   1f1b8:	0002c678 	.word	0x0002c678
   1f1bc:	0002c5b0 	.word	0x0002c5b0
   1f1c0:	0002c690 	.word	0x0002c690
   1f1c4:	0002c6a8 	.word	0x0002c6a8
   1f1c8:	0002c6c0 	.word	0x0002c6c0

0001f1cc <z_unpend_thread>:
{
   1f1cc:	b580      	push	{r7, lr}
   1f1ce:	b08c      	sub	sp, #48	; 0x30
   1f1d0:	af00      	add	r7, sp, #0
   1f1d2:	6078      	str	r0, [r7, #4]
   1f1d4:	687b      	ldr	r3, [r7, #4]
   1f1d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	LOCKED(&sched_spinlock) {
   1f1d8:	2300      	movs	r3, #0
   1f1da:	617b      	str	r3, [r7, #20]
   1f1dc:	4b2f      	ldr	r3, [pc, #188]	; (1f29c <z_unpend_thread+0xd0>)
   1f1de:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
   1f1e0:	f04f 0320 	mov.w	r3, #32
   1f1e4:	f3ef 8211 	mrs	r2, BASEPRI
   1f1e8:	f383 8811 	msr	BASEPRI, r3
   1f1ec:	f3bf 8f6f 	isb	sy
   1f1f0:	627a      	str	r2, [r7, #36]	; 0x24
   1f1f2:	623b      	str	r3, [r7, #32]
	return key;
   1f1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	k.key = arch_irq_lock();
   1f1f6:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f1f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1f1fa:	f7fd ff25 	bl	1d048 <z_spin_lock_valid>
   1f1fe:	4603      	mov	r3, r0
   1f200:	f083 0301 	eor.w	r3, r3, #1
   1f204:	b2db      	uxtb	r3, r3
   1f206:	2b00      	cmp	r3, #0
   1f208:	d00d      	beq.n	1f226 <z_unpend_thread+0x5a>
   1f20a:	2381      	movs	r3, #129	; 0x81
   1f20c:	4a24      	ldr	r2, [pc, #144]	; (1f2a0 <z_unpend_thread+0xd4>)
   1f20e:	4925      	ldr	r1, [pc, #148]	; (1f2a4 <z_unpend_thread+0xd8>)
   1f210:	4825      	ldr	r0, [pc, #148]	; (1f2a8 <z_unpend_thread+0xdc>)
   1f212:	f001 ff29 	bl	21068 <printk>
   1f216:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1f218:	4824      	ldr	r0, [pc, #144]	; (1f2ac <z_unpend_thread+0xe0>)
   1f21a:	f001 ff25 	bl	21068 <printk>
   1f21e:	2181      	movs	r1, #129	; 0x81
   1f220:	481f      	ldr	r0, [pc, #124]	; (1f2a0 <z_unpend_thread+0xd4>)
   1f222:	f002 ffce 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1f228:	f7fd ff46 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1f22c:	68bb      	ldr	r3, [r7, #8]
   1f22e:	613b      	str	r3, [r7, #16]
   1f230:	e028      	b.n	1f284 <z_unpend_thread+0xb8>
		unpend_thread_no_timeout(thread);
   1f232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1f234:	f009 fc40 	bl	28ab8 <unpend_thread_no_timeout>
   1f238:	4b18      	ldr	r3, [pc, #96]	; (1f29c <z_unpend_thread+0xd0>)
   1f23a:	61fb      	str	r3, [r7, #28]
   1f23c:	693b      	ldr	r3, [r7, #16]
   1f23e:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f240:	69f8      	ldr	r0, [r7, #28]
   1f242:	f7fd ff1d 	bl	1d080 <z_spin_unlock_valid>
   1f246:	4603      	mov	r3, r0
   1f248:	f083 0301 	eor.w	r3, r3, #1
   1f24c:	b2db      	uxtb	r3, r3
   1f24e:	2b00      	cmp	r3, #0
   1f250:	d00d      	beq.n	1f26e <z_unpend_thread+0xa2>
   1f252:	23ac      	movs	r3, #172	; 0xac
   1f254:	4a12      	ldr	r2, [pc, #72]	; (1f2a0 <z_unpend_thread+0xd4>)
   1f256:	4916      	ldr	r1, [pc, #88]	; (1f2b0 <z_unpend_thread+0xe4>)
   1f258:	4813      	ldr	r0, [pc, #76]	; (1f2a8 <z_unpend_thread+0xdc>)
   1f25a:	f001 ff05 	bl	21068 <printk>
   1f25e:	69f9      	ldr	r1, [r7, #28]
   1f260:	4814      	ldr	r0, [pc, #80]	; (1f2b4 <z_unpend_thread+0xe8>)
   1f262:	f001 ff01 	bl	21068 <printk>
   1f266:	21ac      	movs	r1, #172	; 0xac
   1f268:	480d      	ldr	r0, [pc, #52]	; (1f2a0 <z_unpend_thread+0xd4>)
   1f26a:	f002 ffaa 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1f26e:	68fb      	ldr	r3, [r7, #12]
   1f270:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
   1f272:	69bb      	ldr	r3, [r7, #24]
   1f274:	f383 8811 	msr	BASEPRI, r3
   1f278:	f3bf 8f6f 	isb	sy
}
   1f27c:	bf00      	nop
}
   1f27e:	bf00      	nop
	LOCKED(&sched_spinlock) {
   1f280:	2301      	movs	r3, #1
   1f282:	617b      	str	r3, [r7, #20]
   1f284:	697b      	ldr	r3, [r7, #20]
   1f286:	2b00      	cmp	r3, #0
   1f288:	d0d3      	beq.n	1f232 <z_unpend_thread+0x66>
}
   1f28a:	bf00      	nop
	(void)z_abort_thread_timeout(thread);
   1f28c:	6878      	ldr	r0, [r7, #4]
   1f28e:	f009 fa7c 	bl	2878a <z_abort_thread_timeout>
}
   1f292:	bf00      	nop
   1f294:	3730      	adds	r7, #48	; 0x30
   1f296:	46bd      	mov	sp, r7
   1f298:	bd80      	pop	{r7, pc}
   1f29a:	bf00      	nop
   1f29c:	200151b4 	.word	0x200151b4
   1f2a0:	0002c650 	.word	0x0002c650
   1f2a4:	0002c678 	.word	0x0002c678
   1f2a8:	0002c5b0 	.word	0x0002c5b0
   1f2ac:	0002c690 	.word	0x0002c690
   1f2b0:	0002c6a8 	.word	0x0002c6a8
   1f2b4:	0002c6c0 	.word	0x0002c6c0

0001f2b8 <z_set_prio>:
{
   1f2b8:	b580      	push	{r7, lr}
   1f2ba:	b094      	sub	sp, #80	; 0x50
   1f2bc:	af00      	add	r7, sp, #0
   1f2be:	6078      	str	r0, [r7, #4]
   1f2c0:	6039      	str	r1, [r7, #0]
	bool need_sched = 0;
   1f2c2:	2300      	movs	r3, #0
   1f2c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	LOCKED(&sched_spinlock) {
   1f2c8:	2300      	movs	r3, #0
   1f2ca:	61bb      	str	r3, [r7, #24]
   1f2cc:	4b75      	ldr	r3, [pc, #468]	; (1f4a4 <z_set_prio+0x1ec>)
   1f2ce:	64bb      	str	r3, [r7, #72]	; 0x48
	__asm__ volatile(
   1f2d0:	f04f 0320 	mov.w	r3, #32
   1f2d4:	f3ef 8211 	mrs	r2, BASEPRI
   1f2d8:	f383 8811 	msr	BASEPRI, r3
   1f2dc:	f3bf 8f6f 	isb	sy
   1f2e0:	647a      	str	r2, [r7, #68]	; 0x44
   1f2e2:	643b      	str	r3, [r7, #64]	; 0x40
	return key;
   1f2e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	k.key = arch_irq_lock();
   1f2e6:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f2e8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   1f2ea:	f7fd fead 	bl	1d048 <z_spin_lock_valid>
   1f2ee:	4603      	mov	r3, r0
   1f2f0:	f083 0301 	eor.w	r3, r3, #1
   1f2f4:	b2db      	uxtb	r3, r3
   1f2f6:	2b00      	cmp	r3, #0
   1f2f8:	d00d      	beq.n	1f316 <z_set_prio+0x5e>
   1f2fa:	2381      	movs	r3, #129	; 0x81
   1f2fc:	4a6a      	ldr	r2, [pc, #424]	; (1f4a8 <z_set_prio+0x1f0>)
   1f2fe:	496b      	ldr	r1, [pc, #428]	; (1f4ac <z_set_prio+0x1f4>)
   1f300:	486b      	ldr	r0, [pc, #428]	; (1f4b0 <z_set_prio+0x1f8>)
   1f302:	f001 feb1 	bl	21068 <printk>
   1f306:	6cb9      	ldr	r1, [r7, #72]	; 0x48
   1f308:	486a      	ldr	r0, [pc, #424]	; (1f4b4 <z_set_prio+0x1fc>)
   1f30a:	f001 fead 	bl	21068 <printk>
   1f30e:	2181      	movs	r1, #129	; 0x81
   1f310:	4865      	ldr	r0, [pc, #404]	; (1f4a8 <z_set_prio+0x1f0>)
   1f312:	f002 ff56 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f316:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   1f318:	f7fd fece 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1f31c:	68fb      	ldr	r3, [r7, #12]
   1f31e:	617b      	str	r3, [r7, #20]
   1f320:	e0b5      	b.n	1f48e <z_set_prio+0x1d6>
		need_sched = z_is_thread_ready(thread);
   1f322:	6878      	ldr	r0, [r7, #4]
   1f324:	f009 fa81 	bl	2882a <z_is_thread_ready>
   1f328:	4603      	mov	r3, r0
   1f32a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (need_sched) {
   1f32e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   1f332:	2b00      	cmp	r3, #0
   1f334:	f000 8081 	beq.w	1f43a <z_set_prio+0x182>
   1f338:	4b5f      	ldr	r3, [pc, #380]	; (1f4b8 <z_set_prio+0x200>)
   1f33a:	62bb      	str	r3, [r7, #40]	; 0x28
   1f33c:	687b      	ldr	r3, [r7, #4]
   1f33e:	627b      	str	r3, [r7, #36]	; 0x24
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1f340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f342:	7b5b      	ldrb	r3, [r3, #13]
   1f344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1f348:	b2da      	uxtb	r2, r3
   1f34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f34c:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
   1f34e:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1f350:	f009 fb7c 	bl	28a4c <should_queue_thread>
   1f354:	4603      	mov	r3, r0
   1f356:	2b00      	cmp	r3, #0
   1f358:	d003      	beq.n	1f362 <z_set_prio+0xaa>
		_priq_run_remove(pq, thread);
   1f35a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1f35c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1f35e:	f000 fa9b 	bl	1f898 <z_priq_dumb_remove>
}
   1f362:	bf00      	nop
				thread->base.prio = prio;
   1f364:	683b      	ldr	r3, [r7, #0]
   1f366:	b25a      	sxtb	r2, r3
   1f368:	687b      	ldr	r3, [r7, #4]
   1f36a:	739a      	strb	r2, [r3, #14]
   1f36c:	4b52      	ldr	r3, [pc, #328]	; (1f4b8 <z_set_prio+0x200>)
   1f36e:	63fb      	str	r3, [r7, #60]	; 0x3c
   1f370:	687b      	ldr	r3, [r7, #4]
   1f372:	63bb      	str	r3, [r7, #56]	; 0x38
	thread->base.thread_state |= _THREAD_QUEUED;
   1f374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f376:	7b5b      	ldrb	r3, [r3, #13]
   1f378:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1f37c:	b2da      	uxtb	r2, r3
   1f37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f380:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
   1f382:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1f384:	f009 fb62 	bl	28a4c <should_queue_thread>
   1f388:	4603      	mov	r3, r0
   1f38a:	2b00      	cmp	r3, #0
   1f38c:	d050      	beq.n	1f430 <z_set_prio+0x178>
   1f38e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f390:	637b      	str	r3, [r7, #52]	; 0x34
   1f392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f394:	633b      	str	r3, [r7, #48]	; 0x30
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1f396:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1f398:	f7fe fe6e 	bl	1e078 <z_is_idle_thread_object>
   1f39c:	4603      	mov	r3, r0
   1f39e:	2b00      	cmp	r3, #0
   1f3a0:	d00b      	beq.n	1f3ba <z_set_prio+0x102>
   1f3a2:	f240 33a6 	movw	r3, #934	; 0x3a6
   1f3a6:	4a45      	ldr	r2, [pc, #276]	; (1f4bc <z_set_prio+0x204>)
   1f3a8:	4945      	ldr	r1, [pc, #276]	; (1f4c0 <z_set_prio+0x208>)
   1f3aa:	4841      	ldr	r0, [pc, #260]	; (1f4b0 <z_set_prio+0x1f8>)
   1f3ac:	f001 fe5c 	bl	21068 <printk>
   1f3b0:	f240 31a6 	movw	r1, #934	; 0x3a6
   1f3b4:	4841      	ldr	r0, [pc, #260]	; (1f4bc <z_set_prio+0x204>)
   1f3b6:	f002 ff04 	bl	221c2 <assert_post_action>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f3ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1f3bc:	f008 feeb 	bl	28196 <sys_dlist_peek_head>
   1f3c0:	4603      	mov	r3, r0
   1f3c2:	2b00      	cmp	r3, #0
   1f3c4:	d004      	beq.n	1f3d0 <z_set_prio+0x118>
   1f3c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1f3c8:	f008 fee5 	bl	28196 <sys_dlist_peek_head>
   1f3cc:	4603      	mov	r3, r0
   1f3ce:	e000      	b.n	1f3d2 <z_set_prio+0x11a>
   1f3d0:	2300      	movs	r3, #0
   1f3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   1f3d4:	e024      	b.n	1f420 <z_set_prio+0x168>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1f3d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1f3d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1f3da:	f009 fb1c 	bl	28a16 <z_sched_prio_cmp>
   1f3de:	4603      	mov	r3, r0
   1f3e0:	2b00      	cmp	r3, #0
   1f3e2:	dd07      	ble.n	1f3f4 <z_set_prio+0x13c>
			sys_dlist_insert(&t->base.qnode_dlist,
   1f3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f3e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1f3e8:	4611      	mov	r1, r2
   1f3ea:	4618      	mov	r0, r3
   1f3ec:	f008 ff24 	bl	28238 <sys_dlist_insert>
			return;
   1f3f0:	bf00      	nop
}
   1f3f2:	e01d      	b.n	1f430 <z_set_prio+0x178>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1f3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f3f6:	2b00      	cmp	r3, #0
   1f3f8:	d010      	beq.n	1f41c <z_set_prio+0x164>
   1f3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f3fc:	4619      	mov	r1, r3
   1f3fe:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1f400:	f008 feee 	bl	281e0 <sys_dlist_peek_next>
   1f404:	4603      	mov	r3, r0
   1f406:	2b00      	cmp	r3, #0
   1f408:	d006      	beq.n	1f418 <z_set_prio+0x160>
   1f40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f40c:	4619      	mov	r1, r3
   1f40e:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1f410:	f008 fee6 	bl	281e0 <sys_dlist_peek_next>
   1f414:	4603      	mov	r3, r0
   1f416:	e002      	b.n	1f41e <z_set_prio+0x166>
   1f418:	2300      	movs	r3, #0
   1f41a:	e000      	b.n	1f41e <z_set_prio+0x166>
   1f41c:	2300      	movs	r3, #0
   1f41e:	62fb      	str	r3, [r7, #44]	; 0x2c
   1f420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f422:	2b00      	cmp	r3, #0
   1f424:	d1d7      	bne.n	1f3d6 <z_set_prio+0x11e>
	sys_dlist_append(pq, &thread->base.qnode_dlist);
   1f426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1f428:	4619      	mov	r1, r3
   1f42a:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1f42c:	f008 feeb 	bl	28206 <sys_dlist_append>
}
   1f430:	bf00      	nop
			update_cache(1);
   1f432:	2001      	movs	r0, #1
   1f434:	f7ff f8be 	bl	1e5b4 <update_cache>
   1f438:	e003      	b.n	1f442 <z_set_prio+0x18a>
			thread->base.prio = prio;
   1f43a:	683b      	ldr	r3, [r7, #0]
   1f43c:	b25a      	sxtb	r2, r3
   1f43e:	687b      	ldr	r3, [r7, #4]
   1f440:	739a      	strb	r2, [r3, #14]
   1f442:	4b18      	ldr	r3, [pc, #96]	; (1f4a4 <z_set_prio+0x1ec>)
   1f444:	623b      	str	r3, [r7, #32]
   1f446:	697b      	ldr	r3, [r7, #20]
   1f448:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f44a:	6a38      	ldr	r0, [r7, #32]
   1f44c:	f7fd fe18 	bl	1d080 <z_spin_unlock_valid>
   1f450:	4603      	mov	r3, r0
   1f452:	f083 0301 	eor.w	r3, r3, #1
   1f456:	b2db      	uxtb	r3, r3
   1f458:	2b00      	cmp	r3, #0
   1f45a:	d00d      	beq.n	1f478 <z_set_prio+0x1c0>
   1f45c:	23ac      	movs	r3, #172	; 0xac
   1f45e:	4a12      	ldr	r2, [pc, #72]	; (1f4a8 <z_set_prio+0x1f0>)
   1f460:	4918      	ldr	r1, [pc, #96]	; (1f4c4 <z_set_prio+0x20c>)
   1f462:	4813      	ldr	r0, [pc, #76]	; (1f4b0 <z_set_prio+0x1f8>)
   1f464:	f001 fe00 	bl	21068 <printk>
   1f468:	6a39      	ldr	r1, [r7, #32]
   1f46a:	4817      	ldr	r0, [pc, #92]	; (1f4c8 <z_set_prio+0x210>)
   1f46c:	f001 fdfc 	bl	21068 <printk>
   1f470:	21ac      	movs	r1, #172	; 0xac
   1f472:	480d      	ldr	r0, [pc, #52]	; (1f4a8 <z_set_prio+0x1f0>)
   1f474:	f002 fea5 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1f478:	693b      	ldr	r3, [r7, #16]
   1f47a:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   1f47c:	69fb      	ldr	r3, [r7, #28]
   1f47e:	f383 8811 	msr	BASEPRI, r3
   1f482:	f3bf 8f6f 	isb	sy
}
   1f486:	bf00      	nop
}
   1f488:	bf00      	nop
	LOCKED(&sched_spinlock) {
   1f48a:	2301      	movs	r3, #1
   1f48c:	61bb      	str	r3, [r7, #24]
   1f48e:	69bb      	ldr	r3, [r7, #24]
   1f490:	2b00      	cmp	r3, #0
   1f492:	f43f af46 	beq.w	1f322 <z_set_prio+0x6a>
	return need_sched;
   1f496:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
   1f49a:	4618      	mov	r0, r3
   1f49c:	3750      	adds	r7, #80	; 0x50
   1f49e:	46bd      	mov	sp, r7
   1f4a0:	bd80      	pop	{r7, pc}
   1f4a2:	bf00      	nop
   1f4a4:	200151b4 	.word	0x200151b4
   1f4a8:	0002c650 	.word	0x0002c650
   1f4ac:	0002c678 	.word	0x0002c678
   1f4b0:	0002c5b0 	.word	0x0002c5b0
   1f4b4:	0002c690 	.word	0x0002c690
   1f4b8:	200151a4 	.word	0x200151a4
   1f4bc:	0002c608 	.word	0x0002c608
   1f4c0:	0002c62c 	.word	0x0002c62c
   1f4c4:	0002c6a8 	.word	0x0002c6a8
   1f4c8:	0002c6c0 	.word	0x0002c6c0

0001f4cc <need_swap>:
{
   1f4cc:	b480      	push	{r7}
   1f4ce:	b083      	sub	sp, #12
   1f4d0:	af00      	add	r7, sp, #0
	new_thread = _kernel.ready_q.cache;
   1f4d2:	4b08      	ldr	r3, [pc, #32]	; (1f4f4 <need_swap+0x28>)
   1f4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1f4d6:	607b      	str	r3, [r7, #4]
	return new_thread != _current;
   1f4d8:	4b06      	ldr	r3, [pc, #24]	; (1f4f4 <need_swap+0x28>)
   1f4da:	689b      	ldr	r3, [r3, #8]
   1f4dc:	687a      	ldr	r2, [r7, #4]
   1f4de:	429a      	cmp	r2, r3
   1f4e0:	bf14      	ite	ne
   1f4e2:	2301      	movne	r3, #1
   1f4e4:	2300      	moveq	r3, #0
   1f4e6:	b2db      	uxtb	r3, r3
}
   1f4e8:	4618      	mov	r0, r3
   1f4ea:	370c      	adds	r7, #12
   1f4ec:	46bd      	mov	sp, r7
   1f4ee:	bc80      	pop	{r7}
   1f4f0:	4770      	bx	lr
   1f4f2:	bf00      	nop
   1f4f4:	2001517c 	.word	0x2001517c

0001f4f8 <z_reschedule>:
{
   1f4f8:	b580      	push	{r7, lr}
   1f4fa:	b088      	sub	sp, #32
   1f4fc:	af00      	add	r7, sp, #0
   1f4fe:	6078      	str	r0, [r7, #4]
   1f500:	6039      	str	r1, [r7, #0]
	if (resched(key.key) && need_swap()) {
   1f502:	683b      	ldr	r3, [r7, #0]
   1f504:	4618      	mov	r0, r3
   1f506:	f009 faed 	bl	28ae4 <resched>
   1f50a:	4603      	mov	r3, r0
   1f50c:	2b00      	cmp	r3, #0
   1f50e:	d027      	beq.n	1f560 <z_reschedule+0x68>
   1f510:	f7ff ffdc 	bl	1f4cc <need_swap>
   1f514:	4603      	mov	r3, r0
   1f516:	2b00      	cmp	r3, #0
   1f518:	d022      	beq.n	1f560 <z_reschedule+0x68>
   1f51a:	687b      	ldr	r3, [r7, #4]
   1f51c:	61fb      	str	r3, [r7, #28]
   1f51e:	683b      	ldr	r3, [r7, #0]
   1f520:	60bb      	str	r3, [r7, #8]
   1f522:	69fb      	ldr	r3, [r7, #28]
   1f524:	61bb      	str	r3, [r7, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f526:	69b8      	ldr	r0, [r7, #24]
   1f528:	f7fd fdaa 	bl	1d080 <z_spin_unlock_valid>
   1f52c:	4603      	mov	r3, r0
   1f52e:	f083 0301 	eor.w	r3, r3, #1
   1f532:	b2db      	uxtb	r3, r3
   1f534:	2b00      	cmp	r3, #0
   1f536:	d00d      	beq.n	1f554 <z_reschedule+0x5c>
   1f538:	23c3      	movs	r3, #195	; 0xc3
   1f53a:	4a1d      	ldr	r2, [pc, #116]	; (1f5b0 <z_reschedule+0xb8>)
   1f53c:	491d      	ldr	r1, [pc, #116]	; (1f5b4 <z_reschedule+0xbc>)
   1f53e:	481e      	ldr	r0, [pc, #120]	; (1f5b8 <z_reschedule+0xc0>)
   1f540:	f001 fd92 	bl	21068 <printk>
   1f544:	69b9      	ldr	r1, [r7, #24]
   1f546:	481d      	ldr	r0, [pc, #116]	; (1f5bc <z_reschedule+0xc4>)
   1f548:	f001 fd8e 	bl	21068 <printk>
   1f54c:	21c3      	movs	r1, #195	; 0xc3
   1f54e:	4818      	ldr	r0, [pc, #96]	; (1f5b0 <z_reschedule+0xb8>)
   1f550:	f002 fe37 	bl	221c2 <assert_post_action>
}
   1f554:	bf00      	nop
   1f556:	68bb      	ldr	r3, [r7, #8]
   1f558:	4618      	mov	r0, r3
   1f55a:	f009 fa35 	bl	289c8 <z_swap_irqlock>
		z_swap(lock, key);
   1f55e:	e023      	b.n	1f5a8 <z_reschedule+0xb0>
   1f560:	687b      	ldr	r3, [r7, #4]
   1f562:	617b      	str	r3, [r7, #20]
   1f564:	683b      	ldr	r3, [r7, #0]
   1f566:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f568:	6978      	ldr	r0, [r7, #20]
   1f56a:	f7fd fd89 	bl	1d080 <z_spin_unlock_valid>
   1f56e:	4603      	mov	r3, r0
   1f570:	f083 0301 	eor.w	r3, r3, #1
   1f574:	b2db      	uxtb	r3, r3
   1f576:	2b00      	cmp	r3, #0
   1f578:	d00d      	beq.n	1f596 <z_reschedule+0x9e>
   1f57a:	23ac      	movs	r3, #172	; 0xac
   1f57c:	4a0c      	ldr	r2, [pc, #48]	; (1f5b0 <z_reschedule+0xb8>)
   1f57e:	490d      	ldr	r1, [pc, #52]	; (1f5b4 <z_reschedule+0xbc>)
   1f580:	480d      	ldr	r0, [pc, #52]	; (1f5b8 <z_reschedule+0xc0>)
   1f582:	f001 fd71 	bl	21068 <printk>
   1f586:	6979      	ldr	r1, [r7, #20]
   1f588:	480c      	ldr	r0, [pc, #48]	; (1f5bc <z_reschedule+0xc4>)
   1f58a:	f001 fd6d 	bl	21068 <printk>
   1f58e:	21ac      	movs	r1, #172	; 0xac
   1f590:	4807      	ldr	r0, [pc, #28]	; (1f5b0 <z_reschedule+0xb8>)
   1f592:	f002 fe16 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1f596:	68fb      	ldr	r3, [r7, #12]
   1f598:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
   1f59a:	693b      	ldr	r3, [r7, #16]
   1f59c:	f383 8811 	msr	BASEPRI, r3
   1f5a0:	f3bf 8f6f 	isb	sy
}
   1f5a4:	bf00      	nop
}
   1f5a6:	bf00      	nop
}
   1f5a8:	bf00      	nop
   1f5aa:	3720      	adds	r7, #32
   1f5ac:	46bd      	mov	sp, r7
   1f5ae:	bd80      	pop	{r7, pc}
   1f5b0:	0002c650 	.word	0x0002c650
   1f5b4:	0002c6a8 	.word	0x0002c6a8
   1f5b8:	0002c5b0 	.word	0x0002c5b0
   1f5bc:	0002c6c0 	.word	0x0002c6c0

0001f5c0 <k_sched_lock>:
{
   1f5c0:	b580      	push	{r7, lr}
   1f5c2:	b08a      	sub	sp, #40	; 0x28
   1f5c4:	af00      	add	r7, sp, #0
	LOCKED(&sched_spinlock) {
   1f5c6:	2300      	movs	r3, #0
   1f5c8:	613b      	str	r3, [r7, #16]
   1f5ca:	4b2d      	ldr	r3, [pc, #180]	; (1f680 <k_sched_lock+0xc0>)
   1f5cc:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   1f5ce:	f04f 0320 	mov.w	r3, #32
   1f5d2:	f3ef 8211 	mrs	r2, BASEPRI
   1f5d6:	f383 8811 	msr	BASEPRI, r3
   1f5da:	f3bf 8f6f 	isb	sy
   1f5de:	623a      	str	r2, [r7, #32]
   1f5e0:	61fb      	str	r3, [r7, #28]
	return key;
   1f5e2:	6a3b      	ldr	r3, [r7, #32]
	k.key = arch_irq_lock();
   1f5e4:	607b      	str	r3, [r7, #4]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f5e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1f5e8:	f7fd fd2e 	bl	1d048 <z_spin_lock_valid>
   1f5ec:	4603      	mov	r3, r0
   1f5ee:	f083 0301 	eor.w	r3, r3, #1
   1f5f2:	b2db      	uxtb	r3, r3
   1f5f4:	2b00      	cmp	r3, #0
   1f5f6:	d00d      	beq.n	1f614 <k_sched_lock+0x54>
   1f5f8:	2381      	movs	r3, #129	; 0x81
   1f5fa:	4a22      	ldr	r2, [pc, #136]	; (1f684 <k_sched_lock+0xc4>)
   1f5fc:	4922      	ldr	r1, [pc, #136]	; (1f688 <k_sched_lock+0xc8>)
   1f5fe:	4823      	ldr	r0, [pc, #140]	; (1f68c <k_sched_lock+0xcc>)
   1f600:	f001 fd32 	bl	21068 <printk>
   1f604:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1f606:	4822      	ldr	r0, [pc, #136]	; (1f690 <k_sched_lock+0xd0>)
   1f608:	f001 fd2e 	bl	21068 <printk>
   1f60c:	2181      	movs	r1, #129	; 0x81
   1f60e:	481d      	ldr	r0, [pc, #116]	; (1f684 <k_sched_lock+0xc4>)
   1f610:	f002 fdd7 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f614:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1f616:	f7fd fd4f 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1f61a:	687b      	ldr	r3, [r7, #4]
   1f61c:	60fb      	str	r3, [r7, #12]
   1f61e:	e027      	b.n	1f670 <k_sched_lock+0xb0>
		z_sched_lock();
   1f620:	f7fe fd3c 	bl	1e09c <z_sched_lock>
   1f624:	4b16      	ldr	r3, [pc, #88]	; (1f680 <k_sched_lock+0xc0>)
   1f626:	61bb      	str	r3, [r7, #24]
   1f628:	68fb      	ldr	r3, [r7, #12]
   1f62a:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f62c:	69b8      	ldr	r0, [r7, #24]
   1f62e:	f7fd fd27 	bl	1d080 <z_spin_unlock_valid>
   1f632:	4603      	mov	r3, r0
   1f634:	f083 0301 	eor.w	r3, r3, #1
   1f638:	b2db      	uxtb	r3, r3
   1f63a:	2b00      	cmp	r3, #0
   1f63c:	d00d      	beq.n	1f65a <k_sched_lock+0x9a>
   1f63e:	23ac      	movs	r3, #172	; 0xac
   1f640:	4a10      	ldr	r2, [pc, #64]	; (1f684 <k_sched_lock+0xc4>)
   1f642:	4914      	ldr	r1, [pc, #80]	; (1f694 <k_sched_lock+0xd4>)
   1f644:	4811      	ldr	r0, [pc, #68]	; (1f68c <k_sched_lock+0xcc>)
   1f646:	f001 fd0f 	bl	21068 <printk>
   1f64a:	69b9      	ldr	r1, [r7, #24]
   1f64c:	4812      	ldr	r0, [pc, #72]	; (1f698 <k_sched_lock+0xd8>)
   1f64e:	f001 fd0b 	bl	21068 <printk>
   1f652:	21ac      	movs	r1, #172	; 0xac
   1f654:	480b      	ldr	r0, [pc, #44]	; (1f684 <k_sched_lock+0xc4>)
   1f656:	f002 fdb4 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1f65a:	68bb      	ldr	r3, [r7, #8]
   1f65c:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   1f65e:	697b      	ldr	r3, [r7, #20]
   1f660:	f383 8811 	msr	BASEPRI, r3
   1f664:	f3bf 8f6f 	isb	sy
}
   1f668:	bf00      	nop
}
   1f66a:	bf00      	nop
	LOCKED(&sched_spinlock) {
   1f66c:	2301      	movs	r3, #1
   1f66e:	613b      	str	r3, [r7, #16]
   1f670:	693b      	ldr	r3, [r7, #16]
   1f672:	2b00      	cmp	r3, #0
   1f674:	d0d4      	beq.n	1f620 <k_sched_lock+0x60>
}
   1f676:	bf00      	nop
   1f678:	bf00      	nop
   1f67a:	3728      	adds	r7, #40	; 0x28
   1f67c:	46bd      	mov	sp, r7
   1f67e:	bd80      	pop	{r7, pc}
   1f680:	200151b4 	.word	0x200151b4
   1f684:	0002c650 	.word	0x0002c650
   1f688:	0002c678 	.word	0x0002c678
   1f68c:	0002c5b0 	.word	0x0002c5b0
   1f690:	0002c690 	.word	0x0002c690
   1f694:	0002c6a8 	.word	0x0002c6a8
   1f698:	0002c6c0 	.word	0x0002c6c0

0001f69c <k_sched_unlock>:
{
   1f69c:	b580      	push	{r7, lr}
   1f69e:	b090      	sub	sp, #64	; 0x40
   1f6a0:	af02      	add	r7, sp, #8
	LOCKED(&sched_spinlock) {
   1f6a2:	2300      	movs	r3, #0
   1f6a4:	61bb      	str	r3, [r7, #24]
   1f6a6:	4b6d      	ldr	r3, [pc, #436]	; (1f85c <k_sched_unlock+0x1c0>)
   1f6a8:	633b      	str	r3, [r7, #48]	; 0x30
	__asm__ volatile(
   1f6aa:	f04f 0320 	mov.w	r3, #32
   1f6ae:	f3ef 8211 	mrs	r2, BASEPRI
   1f6b2:	f383 8811 	msr	BASEPRI, r3
   1f6b6:	f3bf 8f6f 	isb	sy
   1f6ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   1f6bc:	62bb      	str	r3, [r7, #40]	; 0x28
	return key;
   1f6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	k.key = arch_irq_lock();
   1f6c0:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f6c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1f6c4:	f7fd fcc0 	bl	1d048 <z_spin_lock_valid>
   1f6c8:	4603      	mov	r3, r0
   1f6ca:	f083 0301 	eor.w	r3, r3, #1
   1f6ce:	b2db      	uxtb	r3, r3
   1f6d0:	2b00      	cmp	r3, #0
   1f6d2:	d00d      	beq.n	1f6f0 <k_sched_unlock+0x54>
   1f6d4:	2381      	movs	r3, #129	; 0x81
   1f6d6:	4a62      	ldr	r2, [pc, #392]	; (1f860 <k_sched_unlock+0x1c4>)
   1f6d8:	4962      	ldr	r1, [pc, #392]	; (1f864 <k_sched_unlock+0x1c8>)
   1f6da:	4863      	ldr	r0, [pc, #396]	; (1f868 <k_sched_unlock+0x1cc>)
   1f6dc:	f001 fcc4 	bl	21068 <printk>
   1f6e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1f6e2:	4862      	ldr	r0, [pc, #392]	; (1f86c <k_sched_unlock+0x1d0>)
   1f6e4:	f001 fcc0 	bl	21068 <printk>
   1f6e8:	2181      	movs	r1, #129	; 0x81
   1f6ea:	485d      	ldr	r0, [pc, #372]	; (1f860 <k_sched_unlock+0x1c4>)
   1f6ec:	f002 fd69 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f6f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1f6f2:	f7fd fce1 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1f6f6:	68fb      	ldr	r3, [r7, #12]
   1f6f8:	617b      	str	r3, [r7, #20]
   1f6fa:	e05c      	b.n	1f7b6 <k_sched_unlock+0x11a>
		__ASSERT(_current->base.sched_locked != 0U, "");
   1f6fc:	4b5c      	ldr	r3, [pc, #368]	; (1f870 <k_sched_unlock+0x1d4>)
   1f6fe:	689b      	ldr	r3, [r3, #8]
   1f700:	7bdb      	ldrb	r3, [r3, #15]
   1f702:	2b00      	cmp	r3, #0
   1f704:	d10e      	bne.n	1f724 <k_sched_unlock+0x88>
   1f706:	f44f 7351 	mov.w	r3, #836	; 0x344
   1f70a:	4a5a      	ldr	r2, [pc, #360]	; (1f874 <k_sched_unlock+0x1d8>)
   1f70c:	495a      	ldr	r1, [pc, #360]	; (1f878 <k_sched_unlock+0x1dc>)
   1f70e:	4856      	ldr	r0, [pc, #344]	; (1f868 <k_sched_unlock+0x1cc>)
   1f710:	f001 fcaa 	bl	21068 <printk>
   1f714:	4859      	ldr	r0, [pc, #356]	; (1f87c <k_sched_unlock+0x1e0>)
   1f716:	f001 fca7 	bl	21068 <printk>
   1f71a:	f44f 7151 	mov.w	r1, #836	; 0x344
   1f71e:	4855      	ldr	r0, [pc, #340]	; (1f874 <k_sched_unlock+0x1d8>)
   1f720:	f002 fd4f 	bl	221c2 <assert_post_action>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1f724:	f3ef 8305 	mrs	r3, IPSR
   1f728:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
   1f72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f72c:	2b00      	cmp	r3, #0
   1f72e:	bf14      	ite	ne
   1f730:	2301      	movne	r3, #1
   1f732:	2300      	moveq	r3, #0
   1f734:	b2db      	uxtb	r3, r3
		__ASSERT(!arch_is_in_isr(), "");
   1f736:	2b00      	cmp	r3, #0
   1f738:	d00e      	beq.n	1f758 <k_sched_unlock+0xbc>
   1f73a:	f240 3345 	movw	r3, #837	; 0x345
   1f73e:	4a4d      	ldr	r2, [pc, #308]	; (1f874 <k_sched_unlock+0x1d8>)
   1f740:	494f      	ldr	r1, [pc, #316]	; (1f880 <k_sched_unlock+0x1e4>)
   1f742:	4849      	ldr	r0, [pc, #292]	; (1f868 <k_sched_unlock+0x1cc>)
   1f744:	f001 fc90 	bl	21068 <printk>
   1f748:	484c      	ldr	r0, [pc, #304]	; (1f87c <k_sched_unlock+0x1e0>)
   1f74a:	f001 fc8d 	bl	21068 <printk>
   1f74e:	f240 3145 	movw	r1, #837	; 0x345
   1f752:	4848      	ldr	r0, [pc, #288]	; (1f874 <k_sched_unlock+0x1d8>)
   1f754:	f002 fd35 	bl	221c2 <assert_post_action>
		++_current->base.sched_locked;
   1f758:	4b45      	ldr	r3, [pc, #276]	; (1f870 <k_sched_unlock+0x1d4>)
   1f75a:	689b      	ldr	r3, [r3, #8]
   1f75c:	7bda      	ldrb	r2, [r3, #15]
   1f75e:	3201      	adds	r2, #1
   1f760:	b2d2      	uxtb	r2, r2
   1f762:	73da      	strb	r2, [r3, #15]
		update_cache(0);
   1f764:	2000      	movs	r0, #0
   1f766:	f7fe ff25 	bl	1e5b4 <update_cache>
   1f76a:	4b3c      	ldr	r3, [pc, #240]	; (1f85c <k_sched_unlock+0x1c0>)
   1f76c:	623b      	str	r3, [r7, #32]
   1f76e:	697b      	ldr	r3, [r7, #20]
   1f770:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1f772:	6a38      	ldr	r0, [r7, #32]
   1f774:	f7fd fc84 	bl	1d080 <z_spin_unlock_valid>
   1f778:	4603      	mov	r3, r0
   1f77a:	f083 0301 	eor.w	r3, r3, #1
   1f77e:	b2db      	uxtb	r3, r3
   1f780:	2b00      	cmp	r3, #0
   1f782:	d00d      	beq.n	1f7a0 <k_sched_unlock+0x104>
   1f784:	23ac      	movs	r3, #172	; 0xac
   1f786:	4a36      	ldr	r2, [pc, #216]	; (1f860 <k_sched_unlock+0x1c4>)
   1f788:	493e      	ldr	r1, [pc, #248]	; (1f884 <k_sched_unlock+0x1e8>)
   1f78a:	4837      	ldr	r0, [pc, #220]	; (1f868 <k_sched_unlock+0x1cc>)
   1f78c:	f001 fc6c 	bl	21068 <printk>
   1f790:	6a39      	ldr	r1, [r7, #32]
   1f792:	483d      	ldr	r0, [pc, #244]	; (1f888 <k_sched_unlock+0x1ec>)
   1f794:	f001 fc68 	bl	21068 <printk>
   1f798:	21ac      	movs	r1, #172	; 0xac
   1f79a:	4831      	ldr	r0, [pc, #196]	; (1f860 <k_sched_unlock+0x1c4>)
   1f79c:	f002 fd11 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1f7a0:	693b      	ldr	r3, [r7, #16]
   1f7a2:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   1f7a4:	69fb      	ldr	r3, [r7, #28]
   1f7a6:	f383 8811 	msr	BASEPRI, r3
   1f7aa:	f3bf 8f6f 	isb	sy
}
   1f7ae:	bf00      	nop
}
   1f7b0:	bf00      	nop
	LOCKED(&sched_spinlock) {
   1f7b2:	2301      	movs	r3, #1
   1f7b4:	61bb      	str	r3, [r7, #24]
   1f7b6:	69bb      	ldr	r3, [r7, #24]
   1f7b8:	2b00      	cmp	r3, #0
   1f7ba:	d09f      	beq.n	1f6fc <k_sched_unlock+0x60>
	LOG_DBG("scheduler unlocked (%p:%d)",
   1f7bc:	2303      	movs	r3, #3
   1f7be:	2b03      	cmp	r3, #3
   1f7c0:	d945      	bls.n	1f84e <k_sched_unlock+0x1b2>
   1f7c2:	f008 fd69 	bl	28298 <k_is_user_context>
   1f7c6:	4603      	mov	r3, r0
   1f7c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   1f7cc:	2300      	movs	r3, #0
   1f7ce:	60bb      	str	r3, [r7, #8]
   1f7d0:	2303      	movs	r3, #3
   1f7d2:	2b00      	cmp	r3, #0
   1f7d4:	d007      	beq.n	1f7e6 <k_sched_unlock+0x14a>
   1f7d6:	4b2d      	ldr	r3, [pc, #180]	; (1f88c <k_sched_unlock+0x1f0>)
   1f7d8:	681b      	ldr	r3, [r3, #0]
   1f7da:	4618      	mov	r0, r3
   1f7dc:	f7fe fca2 	bl	1e124 <log_const_source_id>
   1f7e0:	4603      	mov	r3, r0
   1f7e2:	b29b      	uxth	r3, r3
   1f7e4:	e000      	b.n	1f7e8 <k_sched_unlock+0x14c>
   1f7e6:	2300      	movs	r3, #0
   1f7e8:	86bb      	strh	r3, [r7, #52]	; 0x34
   1f7ea:	793b      	ldrb	r3, [r7, #4]
   1f7ec:	2204      	movs	r2, #4
   1f7ee:	f362 0302 	bfi	r3, r2, #0, #3
   1f7f2:	713b      	strb	r3, [r7, #4]
   1f7f4:	793b      	ldrb	r3, [r7, #4]
   1f7f6:	f36f 03c5 	bfc	r3, #3, #3
   1f7fa:	713b      	strb	r3, [r7, #4]
   1f7fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   1f7fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1f802:	b29a      	uxth	r2, r3
   1f804:	88bb      	ldrh	r3, [r7, #4]
   1f806:	f362 138f 	bfi	r3, r2, #6, #10
   1f80a:	80bb      	strh	r3, [r7, #4]
   1f80c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   1f810:	2b00      	cmp	r3, #0
   1f812:	d00c      	beq.n	1f82e <k_sched_unlock+0x192>
   1f814:	4b16      	ldr	r3, [pc, #88]	; (1f870 <k_sched_unlock+0x1d4>)
   1f816:	689a      	ldr	r2, [r3, #8]
   1f818:	4b15      	ldr	r3, [pc, #84]	; (1f870 <k_sched_unlock+0x1d4>)
   1f81a:	689b      	ldr	r3, [r3, #8]
   1f81c:	7bdb      	ldrb	r3, [r3, #15]
   1f81e:	9300      	str	r3, [sp, #0]
   1f820:	4613      	mov	r3, r2
   1f822:	4a1b      	ldr	r2, [pc, #108]	; (1f890 <k_sched_unlock+0x1f4>)
   1f824:	491b      	ldr	r1, [pc, #108]	; (1f894 <k_sched_unlock+0x1f8>)
   1f826:	88b8      	ldrh	r0, [r7, #4]
   1f828:	f7f3 fc92 	bl	13150 <log_from_user>
   1f82c:	e010      	b.n	1f850 <k_sched_unlock+0x1b4>
   1f82e:	4918      	ldr	r1, [pc, #96]	; (1f890 <k_sched_unlock+0x1f4>)
   1f830:	4b0f      	ldr	r3, [pc, #60]	; (1f870 <k_sched_unlock+0x1d4>)
   1f832:	689b      	ldr	r3, [r3, #8]
   1f834:	461a      	mov	r2, r3
   1f836:	4b0e      	ldr	r3, [pc, #56]	; (1f870 <k_sched_unlock+0x1d4>)
   1f838:	689b      	ldr	r3, [r3, #8]
   1f83a:	7bdb      	ldrb	r3, [r3, #15]
   1f83c:	4618      	mov	r0, r3
   1f83e:	88bb      	ldrh	r3, [r7, #4]
   1f840:	f8ad 3000 	strh.w	r3, [sp]
   1f844:	4603      	mov	r3, r0
   1f846:	4813      	ldr	r0, [pc, #76]	; (1f894 <k_sched_unlock+0x1f8>)
   1f848:	f003 f9a1 	bl	22b8e <log_3>
   1f84c:	e000      	b.n	1f850 <k_sched_unlock+0x1b4>
   1f84e:	bf00      	nop
	z_reschedule_unlocked();
   1f850:	f008 ffa9 	bl	287a6 <z_reschedule_unlocked>
}
   1f854:	bf00      	nop
   1f856:	3738      	adds	r7, #56	; 0x38
   1f858:	46bd      	mov	sp, r7
   1f85a:	bd80      	pop	{r7, pc}
   1f85c:	200151b4 	.word	0x200151b4
   1f860:	0002c650 	.word	0x0002c650
   1f864:	0002c678 	.word	0x0002c678
   1f868:	0002c5b0 	.word	0x0002c5b0
   1f86c:	0002c690 	.word	0x0002c690
   1f870:	2001517c 	.word	0x2001517c
   1f874:	0002c608 	.word	0x0002c608
   1f878:	0002c758 	.word	0x0002c758
   1f87c:	0002c5d0 	.word	0x0002c5d0
   1f880:	0002c59c 	.word	0x0002c59c
   1f884:	0002c6a8 	.word	0x0002c6a8
   1f888:	0002c6c0 	.word	0x0002c6c0
   1f88c:	20014578 	.word	0x20014578
   1f890:	0002cdfc 	.word	0x0002cdfc
   1f894:	0002c78c 	.word	0x0002c78c

0001f898 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   1f898:	b580      	push	{r7, lr}
   1f89a:	b082      	sub	sp, #8
   1f89c:	af00      	add	r7, sp, #0
   1f89e:	6078      	str	r0, [r7, #4]
   1f8a0:	6039      	str	r1, [r7, #0]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1f8a2:	6838      	ldr	r0, [r7, #0]
   1f8a4:	f7fe fbe8 	bl	1e078 <z_is_idle_thread_object>
   1f8a8:	4603      	mov	r3, r0
   1f8aa:	2b00      	cmp	r3, #0
   1f8ac:	d00b      	beq.n	1f8c6 <z_priq_dumb_remove+0x2e>
   1f8ae:	f240 33b5 	movw	r3, #949	; 0x3b5
   1f8b2:	4a09      	ldr	r2, [pc, #36]	; (1f8d8 <z_priq_dumb_remove+0x40>)
   1f8b4:	4909      	ldr	r1, [pc, #36]	; (1f8dc <z_priq_dumb_remove+0x44>)
   1f8b6:	480a      	ldr	r0, [pc, #40]	; (1f8e0 <z_priq_dumb_remove+0x48>)
   1f8b8:	f001 fbd6 	bl	21068 <printk>
   1f8bc:	f240 31b5 	movw	r1, #949	; 0x3b5
   1f8c0:	4805      	ldr	r0, [pc, #20]	; (1f8d8 <z_priq_dumb_remove+0x40>)
   1f8c2:	f002 fc7e 	bl	221c2 <assert_post_action>

	sys_dlist_remove(&thread->base.qnode_dlist);
   1f8c6:	683b      	ldr	r3, [r7, #0]
   1f8c8:	4618      	mov	r0, r3
   1f8ca:	f008 fcce 	bl	2826a <sys_dlist_remove>
}
   1f8ce:	bf00      	nop
   1f8d0:	3708      	adds	r7, #8
   1f8d2:	46bd      	mov	sp, r7
   1f8d4:	bd80      	pop	{r7, pc}
   1f8d6:	bf00      	nop
   1f8d8:	0002c608 	.word	0x0002c608
   1f8dc:	0002c62c 	.word	0x0002c62c
   1f8e0:	0002c5b0 	.word	0x0002c5b0

0001f8e4 <z_sched_init>:

	return need_sched;
}

void z_sched_init(void)
{
   1f8e4:	b580      	push	{r7, lr}
   1f8e6:	af00      	add	r7, sp, #0
#ifdef CONFIG_SCHED_DUMB
	sys_dlist_init(&_kernel.ready_q.runq);
   1f8e8:	4804      	ldr	r0, [pc, #16]	; (1f8fc <z_sched_init+0x18>)
   1f8ea:	f008 fc15 	bl	28118 <sys_dlist_init>
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1f8ee:	2100      	movs	r1, #0
   1f8f0:	2000      	movs	r0, #0
   1f8f2:	f7fe fcdf 	bl	1e2b4 <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
   1f8f6:	bf00      	nop
   1f8f8:	bd80      	pop	{r7, pc}
   1f8fa:	bf00      	nop
   1f8fc:	200151a4 	.word	0x200151a4

0001f900 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1f900:	b580      	push	{r7, lr}
   1f902:	b090      	sub	sp, #64	; 0x40
   1f904:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1f906:	f3ef 8305 	mrs	r3, IPSR
   1f90a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
   1f90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f90e:	2b00      	cmp	r3, #0
   1f910:	bf14      	ite	ne
   1f912:	2301      	movne	r3, #1
   1f914:	2300      	moveq	r3, #0
   1f916:	b2db      	uxtb	r3, r3
	__ASSERT(!arch_is_in_isr(), "");
   1f918:	2b00      	cmp	r3, #0
   1f91a:	d00e      	beq.n	1f93a <z_impl_k_yield+0x3a>
   1f91c:	f240 43a1 	movw	r3, #1185	; 0x4a1
   1f920:	4a6d      	ldr	r2, [pc, #436]	; (1fad8 <z_impl_k_yield+0x1d8>)
   1f922:	496e      	ldr	r1, [pc, #440]	; (1fadc <z_impl_k_yield+0x1dc>)
   1f924:	486e      	ldr	r0, [pc, #440]	; (1fae0 <z_impl_k_yield+0x1e0>)
   1f926:	f001 fb9f 	bl	21068 <printk>
   1f92a:	486e      	ldr	r0, [pc, #440]	; (1fae4 <z_impl_k_yield+0x1e4>)
   1f92c:	f001 fb9c 	bl	21068 <printk>
   1f930:	f240 41a1 	movw	r1, #1185	; 0x4a1
   1f934:	4868      	ldr	r0, [pc, #416]	; (1fad8 <z_impl_k_yield+0x1d8>)
   1f936:	f002 fc44 	bl	221c2 <assert_post_action>
   1f93a:	4b6b      	ldr	r3, [pc, #428]	; (1fae8 <z_impl_k_yield+0x1e8>)
   1f93c:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
   1f93e:	f04f 0320 	mov.w	r3, #32
   1f942:	f3ef 8211 	mrs	r2, BASEPRI
   1f946:	f383 8811 	msr	BASEPRI, r3
   1f94a:	f3bf 8f6f 	isb	sy
   1f94e:	637a      	str	r2, [r7, #52]	; 0x34
   1f950:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
   1f952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	k.key = arch_irq_lock();
   1f954:	603b      	str	r3, [r7, #0]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1f956:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1f958:	f7fd fb76 	bl	1d048 <z_spin_lock_valid>
   1f95c:	4603      	mov	r3, r0
   1f95e:	f083 0301 	eor.w	r3, r3, #1
   1f962:	b2db      	uxtb	r3, r3
   1f964:	2b00      	cmp	r3, #0
   1f966:	d00d      	beq.n	1f984 <z_impl_k_yield+0x84>
   1f968:	2381      	movs	r3, #129	; 0x81
   1f96a:	4a60      	ldr	r2, [pc, #384]	; (1faec <z_impl_k_yield+0x1ec>)
   1f96c:	4960      	ldr	r1, [pc, #384]	; (1faf0 <z_impl_k_yield+0x1f0>)
   1f96e:	485c      	ldr	r0, [pc, #368]	; (1fae0 <z_impl_k_yield+0x1e0>)
   1f970:	f001 fb7a 	bl	21068 <printk>
   1f974:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1f976:	485f      	ldr	r0, [pc, #380]	; (1faf4 <z_impl_k_yield+0x1f4>)
   1f978:	f001 fb76 	bl	21068 <printk>
   1f97c:	2181      	movs	r1, #129	; 0x81
   1f97e:	485b      	ldr	r0, [pc, #364]	; (1faec <z_impl_k_yield+0x1ec>)
   1f980:	f002 fc1f 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1f984:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1f986:	f7fd fb97 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1f98a:	683b      	ldr	r3, [r7, #0]
   1f98c:	60bb      	str	r3, [r7, #8]

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   1f98e:	4b5a      	ldr	r3, [pc, #360]	; (1faf8 <z_impl_k_yield+0x1f8>)
   1f990:	689b      	ldr	r3, [r3, #8]
   1f992:	4a5a      	ldr	r2, [pc, #360]	; (1fafc <z_impl_k_yield+0x1fc>)
   1f994:	613a      	str	r2, [r7, #16]
   1f996:	60fb      	str	r3, [r7, #12]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1f998:	68fb      	ldr	r3, [r7, #12]
   1f99a:	7b5b      	ldrb	r3, [r3, #13]
   1f99c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1f9a0:	b2da      	uxtb	r2, r3
   1f9a2:	68fb      	ldr	r3, [r7, #12]
   1f9a4:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
   1f9a6:	68f8      	ldr	r0, [r7, #12]
   1f9a8:	f009 f850 	bl	28a4c <should_queue_thread>
   1f9ac:	4603      	mov	r3, r0
   1f9ae:	2b00      	cmp	r3, #0
   1f9b0:	d003      	beq.n	1f9ba <z_impl_k_yield+0xba>
		_priq_run_remove(pq, thread);
   1f9b2:	68f9      	ldr	r1, [r7, #12]
   1f9b4:	6938      	ldr	r0, [r7, #16]
   1f9b6:	f7ff ff6f 	bl	1f898 <z_priq_dumb_remove>
}
   1f9ba:	bf00      	nop
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   1f9bc:	4b4e      	ldr	r3, [pc, #312]	; (1faf8 <z_impl_k_yield+0x1f8>)
   1f9be:	689b      	ldr	r3, [r3, #8]
   1f9c0:	4a4e      	ldr	r2, [pc, #312]	; (1fafc <z_impl_k_yield+0x1fc>)
   1f9c2:	627a      	str	r2, [r7, #36]	; 0x24
   1f9c4:	623b      	str	r3, [r7, #32]
	thread->base.thread_state |= _THREAD_QUEUED;
   1f9c6:	6a3b      	ldr	r3, [r7, #32]
   1f9c8:	7b5b      	ldrb	r3, [r3, #13]
   1f9ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1f9ce:	b2da      	uxtb	r2, r3
   1f9d0:	6a3b      	ldr	r3, [r7, #32]
   1f9d2:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
   1f9d4:	6a38      	ldr	r0, [r7, #32]
   1f9d6:	f009 f839 	bl	28a4c <should_queue_thread>
   1f9da:	4603      	mov	r3, r0
   1f9dc:	2b00      	cmp	r3, #0
   1f9de:	d050      	beq.n	1fa82 <z_impl_k_yield+0x182>
   1f9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f9e2:	61fb      	str	r3, [r7, #28]
   1f9e4:	6a3b      	ldr	r3, [r7, #32]
   1f9e6:	61bb      	str	r3, [r7, #24]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   1f9e8:	69b8      	ldr	r0, [r7, #24]
   1f9ea:	f7fe fb45 	bl	1e078 <z_is_idle_thread_object>
   1f9ee:	4603      	mov	r3, r0
   1f9f0:	2b00      	cmp	r3, #0
   1f9f2:	d00b      	beq.n	1fa0c <z_impl_k_yield+0x10c>
   1f9f4:	f240 33a6 	movw	r3, #934	; 0x3a6
   1f9f8:	4a37      	ldr	r2, [pc, #220]	; (1fad8 <z_impl_k_yield+0x1d8>)
   1f9fa:	4941      	ldr	r1, [pc, #260]	; (1fb00 <z_impl_k_yield+0x200>)
   1f9fc:	4838      	ldr	r0, [pc, #224]	; (1fae0 <z_impl_k_yield+0x1e0>)
   1f9fe:	f001 fb33 	bl	21068 <printk>
   1fa02:	f240 31a6 	movw	r1, #934	; 0x3a6
   1fa06:	4834      	ldr	r0, [pc, #208]	; (1fad8 <z_impl_k_yield+0x1d8>)
   1fa08:	f002 fbdb 	bl	221c2 <assert_post_action>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fa0c:	69f8      	ldr	r0, [r7, #28]
   1fa0e:	f008 fbc2 	bl	28196 <sys_dlist_peek_head>
   1fa12:	4603      	mov	r3, r0
   1fa14:	2b00      	cmp	r3, #0
   1fa16:	d004      	beq.n	1fa22 <z_impl_k_yield+0x122>
   1fa18:	69f8      	ldr	r0, [r7, #28]
   1fa1a:	f008 fbbc 	bl	28196 <sys_dlist_peek_head>
   1fa1e:	4603      	mov	r3, r0
   1fa20:	e000      	b.n	1fa24 <z_impl_k_yield+0x124>
   1fa22:	2300      	movs	r3, #0
   1fa24:	617b      	str	r3, [r7, #20]
   1fa26:	e024      	b.n	1fa72 <z_impl_k_yield+0x172>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1fa28:	6979      	ldr	r1, [r7, #20]
   1fa2a:	69b8      	ldr	r0, [r7, #24]
   1fa2c:	f008 fff3 	bl	28a16 <z_sched_prio_cmp>
   1fa30:	4603      	mov	r3, r0
   1fa32:	2b00      	cmp	r3, #0
   1fa34:	dd07      	ble.n	1fa46 <z_impl_k_yield+0x146>
			sys_dlist_insert(&t->base.qnode_dlist,
   1fa36:	697b      	ldr	r3, [r7, #20]
   1fa38:	69ba      	ldr	r2, [r7, #24]
   1fa3a:	4611      	mov	r1, r2
   1fa3c:	4618      	mov	r0, r3
   1fa3e:	f008 fbfb 	bl	28238 <sys_dlist_insert>
			return;
   1fa42:	bf00      	nop
}
   1fa44:	e01d      	b.n	1fa82 <z_impl_k_yield+0x182>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fa46:	697b      	ldr	r3, [r7, #20]
   1fa48:	2b00      	cmp	r3, #0
   1fa4a:	d010      	beq.n	1fa6e <z_impl_k_yield+0x16e>
   1fa4c:	697b      	ldr	r3, [r7, #20]
   1fa4e:	4619      	mov	r1, r3
   1fa50:	69f8      	ldr	r0, [r7, #28]
   1fa52:	f008 fbc5 	bl	281e0 <sys_dlist_peek_next>
   1fa56:	4603      	mov	r3, r0
   1fa58:	2b00      	cmp	r3, #0
   1fa5a:	d006      	beq.n	1fa6a <z_impl_k_yield+0x16a>
   1fa5c:	697b      	ldr	r3, [r7, #20]
   1fa5e:	4619      	mov	r1, r3
   1fa60:	69f8      	ldr	r0, [r7, #28]
   1fa62:	f008 fbbd 	bl	281e0 <sys_dlist_peek_next>
   1fa66:	4603      	mov	r3, r0
   1fa68:	e002      	b.n	1fa70 <z_impl_k_yield+0x170>
   1fa6a:	2300      	movs	r3, #0
   1fa6c:	e000      	b.n	1fa70 <z_impl_k_yield+0x170>
   1fa6e:	2300      	movs	r3, #0
   1fa70:	617b      	str	r3, [r7, #20]
   1fa72:	697b      	ldr	r3, [r7, #20]
   1fa74:	2b00      	cmp	r3, #0
   1fa76:	d1d7      	bne.n	1fa28 <z_impl_k_yield+0x128>
	sys_dlist_append(pq, &thread->base.qnode_dlist);
   1fa78:	69bb      	ldr	r3, [r7, #24]
   1fa7a:	4619      	mov	r1, r3
   1fa7c:	69f8      	ldr	r0, [r7, #28]
   1fa7e:	f008 fbc2 	bl	28206 <sys_dlist_append>
}
   1fa82:	bf00      	nop
	update_cache(1);
   1fa84:	2001      	movs	r0, #1
   1fa86:	f7fe fd95 	bl	1e5b4 <update_cache>
   1fa8a:	4b17      	ldr	r3, [pc, #92]	; (1fae8 <z_impl_k_yield+0x1e8>)
   1fa8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1fa8e:	68bb      	ldr	r3, [r7, #8]
   1fa90:	607b      	str	r3, [r7, #4]
   1fa92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1fa94:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fa96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1fa98:	f7fd faf2 	bl	1d080 <z_spin_unlock_valid>
   1fa9c:	4603      	mov	r3, r0
   1fa9e:	f083 0301 	eor.w	r3, r3, #1
   1faa2:	b2db      	uxtb	r3, r3
   1faa4:	2b00      	cmp	r3, #0
   1faa6:	d00d      	beq.n	1fac4 <z_impl_k_yield+0x1c4>
   1faa8:	23c3      	movs	r3, #195	; 0xc3
   1faaa:	4a10      	ldr	r2, [pc, #64]	; (1faec <z_impl_k_yield+0x1ec>)
   1faac:	4915      	ldr	r1, [pc, #84]	; (1fb04 <z_impl_k_yield+0x204>)
   1faae:	480c      	ldr	r0, [pc, #48]	; (1fae0 <z_impl_k_yield+0x1e0>)
   1fab0:	f001 fada 	bl	21068 <printk>
   1fab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1fab6:	4814      	ldr	r0, [pc, #80]	; (1fb08 <z_impl_k_yield+0x208>)
   1fab8:	f001 fad6 	bl	21068 <printk>
   1fabc:	21c3      	movs	r1, #195	; 0xc3
   1fabe:	480b      	ldr	r0, [pc, #44]	; (1faec <z_impl_k_yield+0x1ec>)
   1fac0:	f002 fb7f 	bl	221c2 <assert_post_action>
}
   1fac4:	bf00      	nop
   1fac6:	687b      	ldr	r3, [r7, #4]
   1fac8:	4618      	mov	r0, r3
   1faca:	f008 ff7d 	bl	289c8 <z_swap_irqlock>
	z_swap(&sched_spinlock, key);
}
   1face:	bf00      	nop
   1fad0:	3740      	adds	r7, #64	; 0x40
   1fad2:	46bd      	mov	sp, r7
   1fad4:	bd80      	pop	{r7, pc}
   1fad6:	bf00      	nop
   1fad8:	0002c608 	.word	0x0002c608
   1fadc:	0002c59c 	.word	0x0002c59c
   1fae0:	0002c5b0 	.word	0x0002c5b0
   1fae4:	0002c5d0 	.word	0x0002c5d0
   1fae8:	200151b4 	.word	0x200151b4
   1faec:	0002c650 	.word	0x0002c650
   1faf0:	0002c678 	.word	0x0002c678
   1faf4:	0002c690 	.word	0x0002c690
   1faf8:	2001517c 	.word	0x2001517c
   1fafc:	200151a4 	.word	0x200151a4
   1fb00:	0002c62c 	.word	0x0002c62c
   1fb04:	0002c6a8 	.word	0x0002c6a8
   1fb08:	0002c6c0 	.word	0x0002c6c0

0001fb0c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   1fb0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   1fb10:	b090      	sub	sp, #64	; 0x40
   1fb12:	af00      	add	r7, sp, #0
   1fb14:	e9c7 0100 	strd	r0, r1, [r7]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1fb18:	f3ef 8305 	mrs	r3, IPSR
   1fb1c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
   1fb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1fb20:	2b00      	cmp	r3, #0
   1fb22:	bf14      	ite	ne
   1fb24:	2301      	movne	r3, #1
   1fb26:	2300      	moveq	r3, #0
   1fb28:	b2db      	uxtb	r3, r3
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1fb2a:	2b00      	cmp	r3, #0
   1fb2c:	d00e      	beq.n	1fb4c <z_tick_sleep+0x40>
   1fb2e:	f240 43be 	movw	r3, #1214	; 0x4be
   1fb32:	4a65      	ldr	r2, [pc, #404]	; (1fcc8 <z_tick_sleep+0x1bc>)
   1fb34:	4965      	ldr	r1, [pc, #404]	; (1fccc <z_tick_sleep+0x1c0>)
   1fb36:	4866      	ldr	r0, [pc, #408]	; (1fcd0 <z_tick_sleep+0x1c4>)
   1fb38:	f001 fa96 	bl	21068 <printk>
   1fb3c:	4865      	ldr	r0, [pc, #404]	; (1fcd4 <z_tick_sleep+0x1c8>)
   1fb3e:	f001 fa93 	bl	21068 <printk>
   1fb42:	f240 41be 	movw	r1, #1214	; 0x4be
   1fb46:	4860      	ldr	r0, [pc, #384]	; (1fcc8 <z_tick_sleep+0x1bc>)
   1fb48:	f002 fb3b 	bl	221c2 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1fb4c:	e9d7 2300 	ldrd	r2, r3, [r7]
   1fb50:	4313      	orrs	r3, r2
   1fb52:	d103      	bne.n	1fb5c <z_tick_sleep+0x50>
		k_yield();
   1fb54:	f008 fdf0 	bl	28738 <k_yield>
		return 0;
   1fb58:	2300      	movs	r3, #0
   1fb5a:	e0af      	b.n	1fcbc <z_tick_sleep+0x1b0>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
   1fb5c:	e9d7 2300 	ldrd	r2, r3, [r7]
   1fb60:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if (Z_TICK_ABS(ticks) <= 0) {
   1fb64:	f06f 0001 	mvn.w	r0, #1
   1fb68:	f04f 31ff 	mov.w	r1, #4294967295
   1fb6c:	e9d7 2300 	ldrd	r2, r3, [r7]
   1fb70:	1a84      	subs	r4, r0, r2
   1fb72:	eb61 0503 	sbc.w	r5, r1, r3
   1fb76:	2c01      	cmp	r4, #1
   1fb78:	f175 0300 	sbcs.w	r3, r5, #0
   1fb7c:	da07      	bge.n	1fb8e <z_tick_sleep+0x82>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1fb7e:	f009 f914 	bl	28daa <sys_clock_tick_get_32>
   1fb82:	4603      	mov	r3, r0
   1fb84:	461a      	mov	r2, r3
   1fb86:	683b      	ldr	r3, [r7, #0]
   1fb88:	4413      	add	r3, r2
   1fb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1fb8c:	e004      	b.n	1fb98 <z_tick_sleep+0x8c>
	} else {
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1fb8e:	683a      	ldr	r2, [r7, #0]
   1fb90:	f06f 0301 	mvn.w	r3, #1
   1fb94:	1a9b      	subs	r3, r3, r2
   1fb96:	63fb      	str	r3, [r7, #60]	; 0x3c
   1fb98:	4b4f      	ldr	r3, [pc, #316]	; (1fcd8 <z_tick_sleep+0x1cc>)
   1fb9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   1fb9c:	f04f 0320 	mov.w	r3, #32
   1fba0:	f3ef 8211 	mrs	r2, BASEPRI
   1fba4:	f383 8811 	msr	BASEPRI, r3
   1fba8:	f3bf 8f6f 	isb	sy
   1fbac:	62ba      	str	r2, [r7, #40]	; 0x28
   1fbae:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   1fbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
   1fbb2:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fbb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1fbb6:	f7fd fa47 	bl	1d048 <z_spin_lock_valid>
   1fbba:	4603      	mov	r3, r0
   1fbbc:	f083 0301 	eor.w	r3, r3, #1
   1fbc0:	b2db      	uxtb	r3, r3
   1fbc2:	2b00      	cmp	r3, #0
   1fbc4:	d00d      	beq.n	1fbe2 <z_tick_sleep+0xd6>
   1fbc6:	2381      	movs	r3, #129	; 0x81
   1fbc8:	4a44      	ldr	r2, [pc, #272]	; (1fcdc <z_tick_sleep+0x1d0>)
   1fbca:	4945      	ldr	r1, [pc, #276]	; (1fce0 <z_tick_sleep+0x1d4>)
   1fbcc:	4840      	ldr	r0, [pc, #256]	; (1fcd0 <z_tick_sleep+0x1c4>)
   1fbce:	f001 fa4b 	bl	21068 <printk>
   1fbd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   1fbd4:	4843      	ldr	r0, [pc, #268]	; (1fce4 <z_tick_sleep+0x1d8>)
   1fbd6:	f001 fa47 	bl	21068 <printk>
   1fbda:	2181      	movs	r1, #129	; 0x81
   1fbdc:	483f      	ldr	r0, [pc, #252]	; (1fcdc <z_tick_sleep+0x1d0>)
   1fbde:	f002 faf0 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fbe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1fbe4:	f7fd fa68 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1fbe8:	693b      	ldr	r3, [r7, #16]
   1fbea:	617b      	str	r3, [r7, #20]
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1fbec:	4b3e      	ldr	r3, [pc, #248]	; (1fce8 <z_tick_sleep+0x1dc>)
   1fbee:	689b      	ldr	r3, [r3, #8]
   1fbf0:	4a3e      	ldr	r2, [pc, #248]	; (1fcec <z_tick_sleep+0x1e0>)
   1fbf2:	6013      	str	r3, [r2, #0]
#endif
	unready_thread(_current);
   1fbf4:	4b3c      	ldr	r3, [pc, #240]	; (1fce8 <z_tick_sleep+0x1dc>)
   1fbf6:	689b      	ldr	r3, [r3, #8]
   1fbf8:	4618      	mov	r0, r3
   1fbfa:	f7fe ff85 	bl	1eb08 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1fbfe:	4b3a      	ldr	r3, [pc, #232]	; (1fce8 <z_tick_sleep+0x1dc>)
   1fc00:	6899      	ldr	r1, [r3, #8]
   1fc02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1fc06:	4608      	mov	r0, r1
   1fc08:	f7fe fa22 	bl	1e050 <z_add_thread_timeout>
	z_mark_thread_as_suspended(_current);
   1fc0c:	4b36      	ldr	r3, [pc, #216]	; (1fce8 <z_tick_sleep+0x1dc>)
   1fc0e:	689b      	ldr	r3, [r3, #8]
   1fc10:	4618      	mov	r0, r3
   1fc12:	f008 fe5d 	bl	288d0 <z_mark_thread_as_suspended>
   1fc16:	4b30      	ldr	r3, [pc, #192]	; (1fcd8 <z_tick_sleep+0x1cc>)
   1fc18:	637b      	str	r3, [r7, #52]	; 0x34
   1fc1a:	697b      	ldr	r3, [r7, #20]
   1fc1c:	60fb      	str	r3, [r7, #12]
   1fc1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1fc20:	633b      	str	r3, [r7, #48]	; 0x30
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fc22:	6b38      	ldr	r0, [r7, #48]	; 0x30
   1fc24:	f7fd fa2c 	bl	1d080 <z_spin_unlock_valid>
   1fc28:	4603      	mov	r3, r0
   1fc2a:	f083 0301 	eor.w	r3, r3, #1
   1fc2e:	b2db      	uxtb	r3, r3
   1fc30:	2b00      	cmp	r3, #0
   1fc32:	d00d      	beq.n	1fc50 <z_tick_sleep+0x144>
   1fc34:	23c3      	movs	r3, #195	; 0xc3
   1fc36:	4a29      	ldr	r2, [pc, #164]	; (1fcdc <z_tick_sleep+0x1d0>)
   1fc38:	492d      	ldr	r1, [pc, #180]	; (1fcf0 <z_tick_sleep+0x1e4>)
   1fc3a:	4825      	ldr	r0, [pc, #148]	; (1fcd0 <z_tick_sleep+0x1c4>)
   1fc3c:	f001 fa14 	bl	21068 <printk>
   1fc40:	6b39      	ldr	r1, [r7, #48]	; 0x30
   1fc42:	482c      	ldr	r0, [pc, #176]	; (1fcf4 <z_tick_sleep+0x1e8>)
   1fc44:	f001 fa10 	bl	21068 <printk>
   1fc48:	21c3      	movs	r1, #195	; 0xc3
   1fc4a:	4824      	ldr	r0, [pc, #144]	; (1fcdc <z_tick_sleep+0x1d0>)
   1fc4c:	f002 fab9 	bl	221c2 <assert_post_action>
}
   1fc50:	bf00      	nop
   1fc52:	68fb      	ldr	r3, [r7, #12]
   1fc54:	4618      	mov	r0, r3
   1fc56:	f008 feb7 	bl	289c8 <z_swap_irqlock>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   1fc5a:	4b23      	ldr	r3, [pc, #140]	; (1fce8 <z_tick_sleep+0x1dc>)
   1fc5c:	689b      	ldr	r3, [r3, #8]
   1fc5e:	2110      	movs	r1, #16
   1fc60:	4618      	mov	r0, r3
   1fc62:	f008 fe14 	bl	2888e <z_is_thread_state_set>
   1fc66:	4603      	mov	r3, r0
   1fc68:	2b00      	cmp	r3, #0
   1fc6a:	d00e      	beq.n	1fc8a <z_tick_sleep+0x17e>
   1fc6c:	f240 43df 	movw	r3, #1247	; 0x4df
   1fc70:	4a15      	ldr	r2, [pc, #84]	; (1fcc8 <z_tick_sleep+0x1bc>)
   1fc72:	4921      	ldr	r1, [pc, #132]	; (1fcf8 <z_tick_sleep+0x1ec>)
   1fc74:	4816      	ldr	r0, [pc, #88]	; (1fcd0 <z_tick_sleep+0x1c4>)
   1fc76:	f001 f9f7 	bl	21068 <printk>
   1fc7a:	4816      	ldr	r0, [pc, #88]	; (1fcd4 <z_tick_sleep+0x1c8>)
   1fc7c:	f001 f9f4 	bl	21068 <printk>
   1fc80:	f240 41df 	movw	r1, #1247	; 0x4df
   1fc84:	4810      	ldr	r0, [pc, #64]	; (1fcc8 <z_tick_sleep+0x1bc>)
   1fc86:	f002 fa9c 	bl	221c2 <assert_post_action>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1fc8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1fc8c:	461c      	mov	r4, r3
   1fc8e:	f04f 0500 	mov.w	r5, #0
   1fc92:	f009 f88a 	bl	28daa <sys_clock_tick_get_32>
   1fc96:	4603      	mov	r3, r0
   1fc98:	461a      	mov	r2, r3
   1fc9a:	f04f 0300 	mov.w	r3, #0
   1fc9e:	ebb4 0802 	subs.w	r8, r4, r2
   1fca2:	eb65 0903 	sbc.w	r9, r5, r3
   1fca6:	e9c7 8900 	strd	r8, r9, [r7]
	if (ticks > 0) {
   1fcaa:	e9d7 2300 	ldrd	r2, r3, [r7]
   1fcae:	2a01      	cmp	r2, #1
   1fcb0:	f173 0300 	sbcs.w	r3, r3, #0
   1fcb4:	db01      	blt.n	1fcba <z_tick_sleep+0x1ae>
		return ticks;
   1fcb6:	683b      	ldr	r3, [r7, #0]
   1fcb8:	e000      	b.n	1fcbc <z_tick_sleep+0x1b0>
	}
#endif

	return 0;
   1fcba:	2300      	movs	r3, #0
}
   1fcbc:	4618      	mov	r0, r3
   1fcbe:	3740      	adds	r7, #64	; 0x40
   1fcc0:	46bd      	mov	sp, r7
   1fcc2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   1fcc6:	bf00      	nop
   1fcc8:	0002c608 	.word	0x0002c608
   1fccc:	0002c59c 	.word	0x0002c59c
   1fcd0:	0002c5b0 	.word	0x0002c5b0
   1fcd4:	0002c5d0 	.word	0x0002c5d0
   1fcd8:	200151b4 	.word	0x200151b4
   1fcdc:	0002c650 	.word	0x0002c650
   1fce0:	0002c678 	.word	0x0002c678
   1fce4:	0002c690 	.word	0x0002c690
   1fce8:	2001517c 	.word	0x2001517c
   1fcec:	200151c0 	.word	0x200151c0
   1fcf0:	0002c6a8 	.word	0x0002c6a8
   1fcf4:	0002c6c0 	.word	0x0002c6c0
   1fcf8:	0002c868 	.word	0x0002c868

0001fcfc <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1fcfc:	b580      	push	{r7, lr}
   1fcfe:	b086      	sub	sp, #24
   1fd00:	af00      	add	r7, sp, #0
   1fd02:	e9c7 0100 	strd	r0, r1, [r7]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1fd06:	f3ef 8305 	mrs	r3, IPSR
   1fd0a:	60bb      	str	r3, [r7, #8]
  return(result);
   1fd0c:	68bb      	ldr	r3, [r7, #8]
   1fd0e:	2b00      	cmp	r3, #0
   1fd10:	bf14      	ite	ne
   1fd12:	2301      	movne	r3, #1
   1fd14:	2300      	moveq	r3, #0
   1fd16:	b2db      	uxtb	r3, r3
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   1fd18:	2b00      	cmp	r3, #0
   1fd1a:	d00e      	beq.n	1fd3a <z_impl_k_sleep+0x3e>
   1fd1c:	f240 43ee 	movw	r3, #1262	; 0x4ee
   1fd20:	4a1d      	ldr	r2, [pc, #116]	; (1fd98 <z_impl_k_sleep+0x9c>)
   1fd22:	491e      	ldr	r1, [pc, #120]	; (1fd9c <z_impl_k_sleep+0xa0>)
   1fd24:	481e      	ldr	r0, [pc, #120]	; (1fda0 <z_impl_k_sleep+0xa4>)
   1fd26:	f001 f99f 	bl	21068 <printk>
   1fd2a:	481e      	ldr	r0, [pc, #120]	; (1fda4 <z_impl_k_sleep+0xa8>)
   1fd2c:	f001 f99c 	bl	21068 <printk>
   1fd30:	f240 41ee 	movw	r1, #1262	; 0x4ee
   1fd34:	4818      	ldr	r0, [pc, #96]	; (1fd98 <z_impl_k_sleep+0x9c>)
   1fd36:	f002 fa44 	bl	221c2 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fd3a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1fd3e:	f04f 30ff 	mov.w	r0, #4294967295
   1fd42:	f04f 31ff 	mov.w	r1, #4294967295
   1fd46:	428b      	cmp	r3, r1
   1fd48:	bf08      	it	eq
   1fd4a:	4282      	cmpeq	r2, r0
   1fd4c:	d107      	bne.n	1fd5e <z_impl_k_sleep+0x62>
		k_thread_suspend(_current);
   1fd4e:	4b16      	ldr	r3, [pc, #88]	; (1fda8 <z_impl_k_sleep+0xac>)
   1fd50:	689b      	ldr	r3, [r3, #8]
   1fd52:	4618      	mov	r0, r3
   1fd54:	f008 fcf6 	bl	28744 <k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1fd58:	f04f 33ff 	mov.w	r3, #4294967295
   1fd5c:	e018      	b.n	1fd90 <z_impl_k_sleep+0x94>
	}

	ticks = timeout.ticks;
   1fd5e:	e9d7 2300 	ldrd	r2, r3, [r7]
   1fd62:	e9c7 2304 	strd	r2, r3, [r7, #16]

	ticks = z_tick_sleep(ticks);
   1fd66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1fd6a:	f7ff fecf 	bl	1fb0c <z_tick_sleep>
   1fd6e:	4603      	mov	r3, r0
   1fd70:	461a      	mov	r2, r3
   1fd72:	ea4f 73e2 	mov.w	r3, r2, asr #31
   1fd76:	e9c7 2304 	strd	r2, r3, [r7, #16]

	int32_t ret = k_ticks_to_ms_floor64(ticks);
   1fd7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1fd7e:	4610      	mov	r0, r2
   1fd80:	4619      	mov	r1, r3
   1fd82:	f008 fbb5 	bl	284f0 <k_ticks_to_ms_floor64>
   1fd86:	4602      	mov	r2, r0
   1fd88:	460b      	mov	r3, r1
   1fd8a:	4613      	mov	r3, r2
   1fd8c:	60fb      	str	r3, [r7, #12]

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
   1fd8e:	68fb      	ldr	r3, [r7, #12]
}
   1fd90:	4618      	mov	r0, r3
   1fd92:	3718      	adds	r7, #24
   1fd94:	46bd      	mov	sp, r7
   1fd96:	bd80      	pop	{r7, pc}
   1fd98:	0002c608 	.word	0x0002c608
   1fd9c:	0002c59c 	.word	0x0002c59c
   1fda0:	0002c5b0 	.word	0x0002c5b0
   1fda4:	0002c5d0 	.word	0x0002c5d0
   1fda8:	2001517c 	.word	0x2001517c

0001fdac <z_impl_k_current_get>:
}
#include <syscalls/k_wakeup_mrsh.c>
#endif

k_tid_t z_impl_k_current_get(void)
{
   1fdac:	b480      	push	{r7}
   1fdae:	b083      	sub	sp, #12
   1fdb0:	af00      	add	r7, sp, #0
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
   1fdb2:	4b04      	ldr	r3, [pc, #16]	; (1fdc4 <z_impl_k_current_get+0x18>)
   1fdb4:	689b      	ldr	r3, [r3, #8]
   1fdb6:	607b      	str	r3, [r7, #4]

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
   1fdb8:	687b      	ldr	r3, [r7, #4]
}
   1fdba:	4618      	mov	r0, r3
   1fdbc:	370c      	adds	r7, #12
   1fdbe:	46bd      	mov	sp, r7
   1fdc0:	bc80      	pop	{r7}
   1fdc2:	4770      	bx	lr
   1fdc4:	2001517c 	.word	0x2001517c

0001fdc8 <end_thread>:
		ready_thread(thread);
	}
}

static void end_thread(struct k_thread *thread)
{
   1fdc8:	b580      	push	{r7, lr}
   1fdca:	b084      	sub	sp, #16
   1fdcc:	af00      	add	r7, sp, #0
   1fdce:	6078      	str	r0, [r7, #4]
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   1fdd0:	687b      	ldr	r3, [r7, #4]
   1fdd2:	7b5b      	ldrb	r3, [r3, #13]
   1fdd4:	f003 0308 	and.w	r3, r3, #8
   1fdd8:	2b00      	cmp	r3, #0
   1fdda:	d13b      	bne.n	1fe54 <end_thread+0x8c>
		thread->base.thread_state |= _THREAD_DEAD;
   1fddc:	687b      	ldr	r3, [r7, #4]
   1fdde:	7b5b      	ldrb	r3, [r3, #13]
   1fde0:	f043 0308 	orr.w	r3, r3, #8
   1fde4:	b2da      	uxtb	r2, r3
   1fde6:	687b      	ldr	r3, [r7, #4]
   1fde8:	735a      	strb	r2, [r3, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1fdea:	687b      	ldr	r3, [r7, #4]
   1fdec:	7b5b      	ldrb	r3, [r3, #13]
   1fdee:	f023 0320 	bic.w	r3, r3, #32
   1fdf2:	b2da      	uxtb	r2, r3
   1fdf4:	687b      	ldr	r3, [r7, #4]
   1fdf6:	735a      	strb	r2, [r3, #13]
		if (z_is_thread_queued(thread)) {
   1fdf8:	6878      	ldr	r0, [r7, #4]
   1fdfa:	f008 fd5c 	bl	288b6 <z_is_thread_queued>
   1fdfe:	4603      	mov	r3, r0
   1fe00:	2b00      	cmp	r3, #0
   1fe02:	d015      	beq.n	1fe30 <end_thread+0x68>
   1fe04:	4b15      	ldr	r3, [pc, #84]	; (1fe5c <end_thread+0x94>)
   1fe06:	60fb      	str	r3, [r7, #12]
   1fe08:	687b      	ldr	r3, [r7, #4]
   1fe0a:	60bb      	str	r3, [r7, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1fe0c:	68bb      	ldr	r3, [r7, #8]
   1fe0e:	7b5b      	ldrb	r3, [r3, #13]
   1fe10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1fe14:	b2da      	uxtb	r2, r3
   1fe16:	68bb      	ldr	r3, [r7, #8]
   1fe18:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
   1fe1a:	68b8      	ldr	r0, [r7, #8]
   1fe1c:	f008 fe16 	bl	28a4c <should_queue_thread>
   1fe20:	4603      	mov	r3, r0
   1fe22:	2b00      	cmp	r3, #0
   1fe24:	d003      	beq.n	1fe2e <end_thread+0x66>
		_priq_run_remove(pq, thread);
   1fe26:	68b9      	ldr	r1, [r7, #8]
   1fe28:	68f8      	ldr	r0, [r7, #12]
   1fe2a:	f7ff fd35 	bl	1f898 <z_priq_dumb_remove>
}
   1fe2e:	bf00      	nop
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
   1fe30:	687b      	ldr	r3, [r7, #4]
   1fe32:	689b      	ldr	r3, [r3, #8]
   1fe34:	2b00      	cmp	r3, #0
   1fe36:	d002      	beq.n	1fe3e <end_thread+0x76>
			unpend_thread_no_timeout(thread);
   1fe38:	6878      	ldr	r0, [r7, #4]
   1fe3a:	f008 fe3d 	bl	28ab8 <unpend_thread_no_timeout>
		}
		(void)z_abort_thread_timeout(thread);
   1fe3e:	6878      	ldr	r0, [r7, #4]
   1fe40:	f008 fca3 	bl	2878a <z_abort_thread_timeout>
		unpend_all(&thread->join_queue);
   1fe44:	687b      	ldr	r3, [r7, #4]
   1fe46:	3358      	adds	r3, #88	; 0x58
   1fe48:	4618      	mov	r0, r3
   1fe4a:	f008 febb 	bl	28bc4 <unpend_all>
		update_cache(1);
   1fe4e:	2001      	movs	r0, #1
   1fe50:	f7fe fbb0 	bl	1e5b4 <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   1fe54:	bf00      	nop
   1fe56:	3710      	adds	r7, #16
   1fe58:	46bd      	mov	sp, r7
   1fe5a:	bd80      	pop	{r7, pc}
   1fe5c:	200151a4 	.word	0x200151a4

0001fe60 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   1fe60:	b580      	push	{r7, lr}
   1fe62:	b092      	sub	sp, #72	; 0x48
   1fe64:	af00      	add	r7, sp, #0
   1fe66:	6078      	str	r0, [r7, #4]
   1fe68:	4b60      	ldr	r3, [pc, #384]	; (1ffec <z_thread_abort+0x18c>)
   1fe6a:	647b      	str	r3, [r7, #68]	; 0x44
	__asm__ volatile(
   1fe6c:	f04f 0320 	mov.w	r3, #32
   1fe70:	f3ef 8211 	mrs	r2, BASEPRI
   1fe74:	f383 8811 	msr	BASEPRI, r3
   1fe78:	f3bf 8f6f 	isb	sy
   1fe7c:	643a      	str	r2, [r7, #64]	; 0x40
   1fe7e:	63fb      	str	r3, [r7, #60]	; 0x3c
	return key;
   1fe80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	k.key = arch_irq_lock();
   1fe82:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fe84:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1fe86:	f7fd f8df 	bl	1d048 <z_spin_lock_valid>
   1fe8a:	4603      	mov	r3, r0
   1fe8c:	f083 0301 	eor.w	r3, r3, #1
   1fe90:	b2db      	uxtb	r3, r3
   1fe92:	2b00      	cmp	r3, #0
   1fe94:	d00d      	beq.n	1feb2 <z_thread_abort+0x52>
   1fe96:	2381      	movs	r3, #129	; 0x81
   1fe98:	4a55      	ldr	r2, [pc, #340]	; (1fff0 <z_thread_abort+0x190>)
   1fe9a:	4956      	ldr	r1, [pc, #344]	; (1fff4 <z_thread_abort+0x194>)
   1fe9c:	4856      	ldr	r0, [pc, #344]	; (1fff8 <z_thread_abort+0x198>)
   1fe9e:	f001 f8e3 	bl	21068 <printk>
   1fea2:	6c79      	ldr	r1, [r7, #68]	; 0x44
   1fea4:	4855      	ldr	r0, [pc, #340]	; (1fffc <z_thread_abort+0x19c>)
   1fea6:	f001 f8df 	bl	21068 <printk>
   1feaa:	2181      	movs	r1, #129	; 0x81
   1feac:	4850      	ldr	r0, [pc, #320]	; (1fff0 <z_thread_abort+0x190>)
   1feae:	f002 f988 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   1feb2:	6c78      	ldr	r0, [r7, #68]	; 0x44
   1feb4:	f7fd f900 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   1feb8:	68fb      	ldr	r3, [r7, #12]
   1feba:	61fb      	str	r3, [r7, #28]
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1febc:	687b      	ldr	r3, [r7, #4]
   1febe:	7b5b      	ldrb	r3, [r3, #13]
   1fec0:	f003 0308 	and.w	r3, r3, #8
   1fec4:	2b00      	cmp	r3, #0
   1fec6:	d023      	beq.n	1ff10 <z_thread_abort+0xb0>
   1fec8:	4b48      	ldr	r3, [pc, #288]	; (1ffec <z_thread_abort+0x18c>)
   1feca:	63bb      	str	r3, [r7, #56]	; 0x38
   1fecc:	69fb      	ldr	r3, [r7, #28]
   1fece:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fed0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   1fed2:	f7fd f8d5 	bl	1d080 <z_spin_unlock_valid>
   1fed6:	4603      	mov	r3, r0
   1fed8:	f083 0301 	eor.w	r3, r3, #1
   1fedc:	b2db      	uxtb	r3, r3
   1fede:	2b00      	cmp	r3, #0
   1fee0:	d00d      	beq.n	1fefe <z_thread_abort+0x9e>
   1fee2:	23ac      	movs	r3, #172	; 0xac
   1fee4:	4a42      	ldr	r2, [pc, #264]	; (1fff0 <z_thread_abort+0x190>)
   1fee6:	4946      	ldr	r1, [pc, #280]	; (20000 <z_thread_abort+0x1a0>)
   1fee8:	4843      	ldr	r0, [pc, #268]	; (1fff8 <z_thread_abort+0x198>)
   1feea:	f001 f8bd 	bl	21068 <printk>
   1feee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   1fef0:	4844      	ldr	r0, [pc, #272]	; (20004 <z_thread_abort+0x1a4>)
   1fef2:	f001 f8b9 	bl	21068 <printk>
   1fef6:	21ac      	movs	r1, #172	; 0xac
   1fef8:	483d      	ldr	r0, [pc, #244]	; (1fff0 <z_thread_abort+0x190>)
   1fefa:	f002 f962 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1fefe:	693b      	ldr	r3, [r7, #16]
   1ff00:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
   1ff02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ff04:	f383 8811 	msr	BASEPRI, r3
   1ff08:	f3bf 8f6f 	isb	sy
}
   1ff0c:	bf00      	nop
}
   1ff0e:	e06a      	b.n	1ffe6 <z_thread_abort+0x186>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
   1ff10:	6878      	ldr	r0, [r7, #4]
   1ff12:	f7ff ff59 	bl	1fdc8 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   1ff16:	4b3c      	ldr	r3, [pc, #240]	; (20008 <z_thread_abort+0x1a8>)
   1ff18:	689b      	ldr	r3, [r3, #8]
   1ff1a:	687a      	ldr	r2, [r7, #4]
   1ff1c:	429a      	cmp	r2, r3
   1ff1e:	d13e      	bne.n	1ff9e <z_thread_abort+0x13e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1ff20:	f3ef 8305 	mrs	r3, IPSR
   1ff24:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
   1ff26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ff28:	2b00      	cmp	r3, #0
   1ff2a:	bf14      	ite	ne
   1ff2c:	2301      	movne	r3, #1
   1ff2e:	2300      	moveq	r3, #0
   1ff30:	b2db      	uxtb	r3, r3
   1ff32:	f083 0301 	eor.w	r3, r3, #1
   1ff36:	b2db      	uxtb	r3, r3
   1ff38:	2b00      	cmp	r3, #0
   1ff3a:	d030      	beq.n	1ff9e <z_thread_abort+0x13e>
   1ff3c:	4b2b      	ldr	r3, [pc, #172]	; (1ffec <z_thread_abort+0x18c>)
   1ff3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   1ff40:	69fb      	ldr	r3, [r7, #28]
   1ff42:	617b      	str	r3, [r7, #20]
   1ff44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1ff46:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ff48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1ff4a:	f7fd f899 	bl	1d080 <z_spin_unlock_valid>
   1ff4e:	4603      	mov	r3, r0
   1ff50:	f083 0301 	eor.w	r3, r3, #1
   1ff54:	b2db      	uxtb	r3, r3
   1ff56:	2b00      	cmp	r3, #0
   1ff58:	d00d      	beq.n	1ff76 <z_thread_abort+0x116>
   1ff5a:	23c3      	movs	r3, #195	; 0xc3
   1ff5c:	4a24      	ldr	r2, [pc, #144]	; (1fff0 <z_thread_abort+0x190>)
   1ff5e:	4928      	ldr	r1, [pc, #160]	; (20000 <z_thread_abort+0x1a0>)
   1ff60:	4825      	ldr	r0, [pc, #148]	; (1fff8 <z_thread_abort+0x198>)
   1ff62:	f001 f881 	bl	21068 <printk>
   1ff66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   1ff68:	4826      	ldr	r0, [pc, #152]	; (20004 <z_thread_abort+0x1a4>)
   1ff6a:	f001 f87d 	bl	21068 <printk>
   1ff6e:	21c3      	movs	r1, #195	; 0xc3
   1ff70:	481f      	ldr	r0, [pc, #124]	; (1fff0 <z_thread_abort+0x190>)
   1ff72:	f002 f926 	bl	221c2 <assert_post_action>
}
   1ff76:	bf00      	nop
   1ff78:	697b      	ldr	r3, [r7, #20]
   1ff7a:	4618      	mov	r0, r3
   1ff7c:	f008 fd24 	bl	289c8 <z_swap_irqlock>
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   1ff80:	f240 6301 	movw	r3, #1537	; 0x601
   1ff84:	4a21      	ldr	r2, [pc, #132]	; (2000c <z_thread_abort+0x1ac>)
   1ff86:	4922      	ldr	r1, [pc, #136]	; (20010 <z_thread_abort+0x1b0>)
   1ff88:	481b      	ldr	r0, [pc, #108]	; (1fff8 <z_thread_abort+0x198>)
   1ff8a:	f001 f86d 	bl	21068 <printk>
   1ff8e:	4821      	ldr	r0, [pc, #132]	; (20014 <z_thread_abort+0x1b4>)
   1ff90:	f001 f86a 	bl	21068 <printk>
   1ff94:	f240 6101 	movw	r1, #1537	; 0x601
   1ff98:	481c      	ldr	r0, [pc, #112]	; (2000c <z_thread_abort+0x1ac>)
   1ff9a:	f002 f912 	bl	221c2 <assert_post_action>
   1ff9e:	4b13      	ldr	r3, [pc, #76]	; (1ffec <z_thread_abort+0x18c>)
   1ffa0:	627b      	str	r3, [r7, #36]	; 0x24
   1ffa2:	69fb      	ldr	r3, [r7, #28]
   1ffa4:	61bb      	str	r3, [r7, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ffa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
   1ffa8:	f7fd f86a 	bl	1d080 <z_spin_unlock_valid>
   1ffac:	4603      	mov	r3, r0
   1ffae:	f083 0301 	eor.w	r3, r3, #1
   1ffb2:	b2db      	uxtb	r3, r3
   1ffb4:	2b00      	cmp	r3, #0
   1ffb6:	d00d      	beq.n	1ffd4 <z_thread_abort+0x174>
   1ffb8:	23ac      	movs	r3, #172	; 0xac
   1ffba:	4a0d      	ldr	r2, [pc, #52]	; (1fff0 <z_thread_abort+0x190>)
   1ffbc:	4910      	ldr	r1, [pc, #64]	; (20000 <z_thread_abort+0x1a0>)
   1ffbe:	480e      	ldr	r0, [pc, #56]	; (1fff8 <z_thread_abort+0x198>)
   1ffc0:	f001 f852 	bl	21068 <printk>
   1ffc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1ffc6:	480f      	ldr	r0, [pc, #60]	; (20004 <z_thread_abort+0x1a4>)
   1ffc8:	f001 f84e 	bl	21068 <printk>
   1ffcc:	21ac      	movs	r1, #172	; 0xac
   1ffce:	4808      	ldr	r0, [pc, #32]	; (1fff0 <z_thread_abort+0x190>)
   1ffd0:	f002 f8f7 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   1ffd4:	69bb      	ldr	r3, [r7, #24]
   1ffd6:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   1ffd8:	6a3b      	ldr	r3, [r7, #32]
   1ffda:	f383 8811 	msr	BASEPRI, r3
   1ffde:	f3bf 8f6f 	isb	sy
}
   1ffe2:	bf00      	nop
}
   1ffe4:	bf00      	nop
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1ffe6:	3748      	adds	r7, #72	; 0x48
   1ffe8:	46bd      	mov	sp, r7
   1ffea:	bd80      	pop	{r7, pc}
   1ffec:	200151b4 	.word	0x200151b4
   1fff0:	0002c650 	.word	0x0002c650
   1fff4:	0002c678 	.word	0x0002c678
   1fff8:	0002c5b0 	.word	0x0002c5b0
   1fffc:	0002c690 	.word	0x0002c690
   20000:	0002c6a8 	.word	0x0002c6a8
   20004:	0002c6c0 	.word	0x0002c6c0
   20008:	2001517c 	.word	0x2001517c
   2000c:	0002c608 	.word	0x0002c608
   20010:	0002c8a8 	.word	0x0002c8a8
   20014:	0002c8ac 	.word	0x0002c8ac

00020018 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   20018:	b580      	push	{r7, lr}
   2001a:	af00      	add	r7, sp, #0
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   2001c:	4a07      	ldr	r2, [pc, #28]	; (2003c <z_data_copy+0x24>)
   2001e:	4b08      	ldr	r3, [pc, #32]	; (20040 <z_data_copy+0x28>)
   20020:	1ad3      	subs	r3, r2, r3
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   20022:	461a      	mov	r2, r3
   20024:	4907      	ldr	r1, [pc, #28]	; (20044 <z_data_copy+0x2c>)
   20026:	4806      	ldr	r0, [pc, #24]	; (20040 <z_data_copy+0x28>)
   20028:	f004 fb60 	bl	246ec <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   2002c:	4b06      	ldr	r3, [pc, #24]	; (20048 <z_data_copy+0x30>)
   2002e:	461a      	mov	r2, r3
   20030:	4906      	ldr	r1, [pc, #24]	; (2004c <z_data_copy+0x34>)
   20032:	4807      	ldr	r0, [pc, #28]	; (20050 <z_data_copy+0x38>)
   20034:	f004 fb5a 	bl	246ec <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   20038:	bf00      	nop
   2003a:	bd80      	pop	{r7, pc}
   2003c:	200145cc 	.word	0x200145cc
   20040:	20014500 	.word	0x20014500
   20044:	0002cea0 	.word	0x0002cea0
   20048:	00000000 	.word	0x00000000
   2004c:	0002ce88 	.word	0x0002ce88
   20050:	20014500 	.word	0x20014500

00020054 <first>:
#include <syscalls/sys_clock_hw_cycles_per_sec_runtime_get_mrsh.c>
#endif /* CONFIG_USERSPACE */
#endif /* CONFIG_TIMER_READS_ITS_FREQUENCY_AT_RUNTIME */

static struct _timeout *first(void)
{
   20054:	b580      	push	{r7, lr}
   20056:	b082      	sub	sp, #8
   20058:	af00      	add	r7, sp, #0
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);
   2005a:	4804      	ldr	r0, [pc, #16]	; (2006c <first+0x18>)
   2005c:	f008 fe04 	bl	28c68 <sys_dlist_peek_head>
   20060:	6078      	str	r0, [r7, #4]

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   20062:	687b      	ldr	r3, [r7, #4]
}
   20064:	4618      	mov	r0, r3
   20066:	3708      	adds	r7, #8
   20068:	46bd      	mov	sp, r7
   2006a:	bd80      	pop	{r7, pc}
   2006c:	2001457c 	.word	0x2001457c

00020070 <next>:

static struct _timeout *next(struct _timeout *t)
{
   20070:	b580      	push	{r7, lr}
   20072:	b084      	sub	sp, #16
   20074:	af00      	add	r7, sp, #0
   20076:	6078      	str	r0, [r7, #4]
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);
   20078:	687b      	ldr	r3, [r7, #4]
   2007a:	4619      	mov	r1, r3
   2007c:	4804      	ldr	r0, [pc, #16]	; (20090 <next+0x20>)
   2007e:	f008 fe18 	bl	28cb2 <sys_dlist_peek_next>
   20082:	60f8      	str	r0, [r7, #12]

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
   20084:	68fb      	ldr	r3, [r7, #12]
}
   20086:	4618      	mov	r0, r3
   20088:	3710      	adds	r7, #16
   2008a:	46bd      	mov	sp, r7
   2008c:	bd80      	pop	{r7, pc}
   2008e:	bf00      	nop
   20090:	2001457c 	.word	0x2001457c

00020094 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   20094:	b580      	push	{r7, lr}
   20096:	af00      	add	r7, sp, #0
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   20098:	4b05      	ldr	r3, [pc, #20]	; (200b0 <elapsed+0x1c>)
   2009a:	681b      	ldr	r3, [r3, #0]
   2009c:	2b00      	cmp	r3, #0
   2009e:	d103      	bne.n	200a8 <elapsed+0x14>
   200a0:	f7f5 fc96 	bl	159d0 <sys_clock_elapsed>
   200a4:	4603      	mov	r3, r0
   200a6:	e000      	b.n	200aa <elapsed+0x16>
   200a8:	2300      	movs	r3, #0
}
   200aa:	4618      	mov	r0, r3
   200ac:	bd80      	pop	{r7, pc}
   200ae:	bf00      	nop
   200b0:	200151c8 	.word	0x200151c8

000200b4 <next_timeout>:

static int32_t next_timeout(void)
{
   200b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   200b8:	b084      	sub	sp, #16
   200ba:	af00      	add	r7, sp, #0
	struct _timeout *to = first();
   200bc:	f7ff ffca 	bl	20054 <first>
   200c0:	60b8      	str	r0, [r7, #8]
	int32_t ticks_elapsed = elapsed();
   200c2:	f7ff ffe7 	bl	20094 <elapsed>
   200c6:	6078      	str	r0, [r7, #4]
	int32_t ret = to == NULL ? MAX_WAIT
   200c8:	68bb      	ldr	r3, [r7, #8]
   200ca:	2b00      	cmp	r3, #0
   200cc:	d029      	beq.n	20122 <next_timeout+0x6e>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   200ce:	68bb      	ldr	r3, [r7, #8]
   200d0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   200d4:	687b      	ldr	r3, [r7, #4]
   200d6:	461a      	mov	r2, r3
   200d8:	ea4f 73e2 	mov.w	r3, r2, asr #31
   200dc:	1a84      	subs	r4, r0, r2
   200de:	eb61 0503 	sbc.w	r5, r1, r3
	int32_t ret = to == NULL ? MAX_WAIT
   200e2:	2c01      	cmp	r4, #1
   200e4:	f175 0300 	sbcs.w	r3, r5, #0
   200e8:	db19      	blt.n	2011e <next_timeout+0x6a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   200ea:	68bb      	ldr	r3, [r7, #8]
   200ec:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   200f0:	687b      	ldr	r3, [r7, #4]
   200f2:	461a      	mov	r2, r3
   200f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
   200f8:	ebb0 0802 	subs.w	r8, r0, r2
   200fc:	eb61 0903 	sbc.w	r9, r1, r3
   20100:	4642      	mov	r2, r8
   20102:	464b      	mov	r3, r9
   20104:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   20108:	f04f 0100 	mov.w	r1, #0
   2010c:	4290      	cmp	r0, r2
   2010e:	4199      	sbcs	r1, r3
   20110:	da03      	bge.n	2011a <next_timeout+0x66>
   20112:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   20116:	f04f 0300 	mov.w	r3, #0
	int32_t ret = to == NULL ? MAX_WAIT
   2011a:	4613      	mov	r3, r2
   2011c:	e003      	b.n	20126 <next_timeout+0x72>
   2011e:	2300      	movs	r3, #0
   20120:	e001      	b.n	20126 <next_timeout+0x72>
   20122:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   20126:	60fb      	str	r3, [r7, #12]

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   20128:	4b08      	ldr	r3, [pc, #32]	; (2014c <next_timeout+0x98>)
   2012a:	691b      	ldr	r3, [r3, #16]
   2012c:	2b00      	cmp	r3, #0
   2012e:	d007      	beq.n	20140 <next_timeout+0x8c>
   20130:	4b06      	ldr	r3, [pc, #24]	; (2014c <next_timeout+0x98>)
   20132:	691b      	ldr	r3, [r3, #16]
   20134:	68fa      	ldr	r2, [r7, #12]
   20136:	429a      	cmp	r2, r3
   20138:	dd02      	ble.n	20140 <next_timeout+0x8c>
		ret = _current_cpu->slice_ticks;
   2013a:	4b04      	ldr	r3, [pc, #16]	; (2014c <next_timeout+0x98>)
   2013c:	691b      	ldr	r3, [r3, #16]
   2013e:	60fb      	str	r3, [r7, #12]
	}
#endif
	return ret;
   20140:	68fb      	ldr	r3, [r7, #12]
}
   20142:	4618      	mov	r0, r3
   20144:	3710      	adds	r7, #16
   20146:	46bd      	mov	sp, r7
   20148:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   2014c:	2001517c 	.word	0x2001517c

00020150 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   20150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   20154:	b09c      	sub	sp, #112	; 0x70
   20156:	af00      	add	r7, sp, #0
   20158:	6378      	str	r0, [r7, #52]	; 0x34
   2015a:	6339      	str	r1, [r7, #48]	; 0x30
   2015c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20160:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   20164:	f04f 32ff 	mov.w	r2, #4294967295
   20168:	f04f 33ff 	mov.w	r3, #4294967295
   2016c:	4299      	cmp	r1, r3
   2016e:	bf08      	it	eq
   20170:	4290      	cmpeq	r0, r2
   20172:	d100      	bne.n	20176 <z_add_timeout+0x26>
   20174:	e114      	b.n	203a0 <z_add_timeout+0x250>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   20176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   20178:	4618      	mov	r0, r3
   2017a:	f008 fd54 	bl	28c26 <sys_dnode_is_linked>
   2017e:	4603      	mov	r3, r0
   20180:	2b00      	cmp	r3, #0
   20182:	d00c      	beq.n	2019e <z_add_timeout+0x4e>
   20184:	235d      	movs	r3, #93	; 0x5d
   20186:	4a88      	ldr	r2, [pc, #544]	; (203a8 <z_add_timeout+0x258>)
   20188:	4988      	ldr	r1, [pc, #544]	; (203ac <z_add_timeout+0x25c>)
   2018a:	4889      	ldr	r0, [pc, #548]	; (203b0 <z_add_timeout+0x260>)
   2018c:	f000 ff6c 	bl	21068 <printk>
   20190:	4888      	ldr	r0, [pc, #544]	; (203b4 <z_add_timeout+0x264>)
   20192:	f000 ff69 	bl	21068 <printk>
   20196:	215d      	movs	r1, #93	; 0x5d
   20198:	4883      	ldr	r0, [pc, #524]	; (203a8 <z_add_timeout+0x258>)
   2019a:	f002 f812 	bl	221c2 <assert_post_action>
	to->fn = fn;
   2019e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   201a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   201a2:	6093      	str	r3, [r2, #8]

	LOCKED(&timeout_lock) {
   201a4:	2300      	movs	r3, #0
   201a6:	647b      	str	r3, [r7, #68]	; 0x44
   201a8:	4b83      	ldr	r3, [pc, #524]	; (203b8 <z_add_timeout+0x268>)
   201aa:	65bb      	str	r3, [r7, #88]	; 0x58
	__asm__ volatile(
   201ac:	f04f 0220 	mov.w	r2, #32
   201b0:	f3ef 8311 	mrs	r3, BASEPRI
   201b4:	f382 8811 	msr	BASEPRI, r2
   201b8:	f3bf 8f6f 	isb	sy
   201bc:	657b      	str	r3, [r7, #84]	; 0x54
   201be:	653a      	str	r2, [r7, #80]	; 0x50
	return key;
   201c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	k.key = arch_irq_lock();
   201c2:	63bb      	str	r3, [r7, #56]	; 0x38
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   201c4:	6db8      	ldr	r0, [r7, #88]	; 0x58
   201c6:	f7fc ff3f 	bl	1d048 <z_spin_lock_valid>
   201ca:	4603      	mov	r3, r0
   201cc:	f083 0301 	eor.w	r3, r3, #1
   201d0:	b2db      	uxtb	r3, r3
   201d2:	2b00      	cmp	r3, #0
   201d4:	d00d      	beq.n	201f2 <z_add_timeout+0xa2>
   201d6:	2381      	movs	r3, #129	; 0x81
   201d8:	4a78      	ldr	r2, [pc, #480]	; (203bc <z_add_timeout+0x26c>)
   201da:	4979      	ldr	r1, [pc, #484]	; (203c0 <z_add_timeout+0x270>)
   201dc:	4874      	ldr	r0, [pc, #464]	; (203b0 <z_add_timeout+0x260>)
   201de:	f000 ff43 	bl	21068 <printk>
   201e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
   201e4:	4877      	ldr	r0, [pc, #476]	; (203c4 <z_add_timeout+0x274>)
   201e6:	f000 ff3f 	bl	21068 <printk>
   201ea:	2181      	movs	r1, #129	; 0x81
   201ec:	4873      	ldr	r0, [pc, #460]	; (203bc <z_add_timeout+0x26c>)
   201ee:	f001 ffe8 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   201f2:	6db8      	ldr	r0, [r7, #88]	; 0x58
   201f4:	f7fc ff60 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   201f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   201fa:	643b      	str	r3, [r7, #64]	; 0x40
   201fc:	e0cc      	b.n	20398 <z_add_timeout+0x248>
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   201fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   20202:	f06f 0201 	mvn.w	r2, #1
   20206:	f04f 33ff 	mov.w	r3, #4294967295
   2020a:	1a14      	subs	r4, r2, r0
   2020c:	623c      	str	r4, [r7, #32]
   2020e:	eb63 0301 	sbc.w	r3, r3, r1
   20212:	627b      	str	r3, [r7, #36]	; 0x24
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   20214:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
   20218:	2b00      	cmp	r3, #0
   2021a:	f174 0300 	sbcs.w	r3, r4, #0
   2021e:	db26      	blt.n	2026e <z_add_timeout+0x11e>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   20220:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   20224:	4610      	mov	r0, r2
   20226:	4619      	mov	r1, r3
   20228:	4b67      	ldr	r3, [pc, #412]	; (203c8 <z_add_timeout+0x278>)
   2022a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2022e:	eb10 0802 	adds.w	r8, r0, r2
   20232:	eb41 0903 	adc.w	r9, r1, r3
   20236:	f06f 0201 	mvn.w	r2, #1
   2023a:	f04f 33ff 	mov.w	r3, #4294967295
   2023e:	ebb2 0108 	subs.w	r1, r2, r8
   20242:	61b9      	str	r1, [r7, #24]
   20244:	eb63 0309 	sbc.w	r3, r3, r9
   20248:	61fb      	str	r3, [r7, #28]
   2024a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
   2024e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			to->dticks = MAX(1, ticks);
   20252:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
   20256:	2a01      	cmp	r2, #1
   20258:	f173 0100 	sbcs.w	r1, r3, #0
   2025c:	da03      	bge.n	20266 <z_add_timeout+0x116>
   2025e:	f04f 0201 	mov.w	r2, #1
   20262:	f04f 0300 	mov.w	r3, #0
   20266:	6b79      	ldr	r1, [r7, #52]	; 0x34
   20268:	e9c1 2304 	strd	r2, r3, [r1, #16]
   2026c:	e016      	b.n	2029c <z_add_timeout+0x14c>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   2026e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
   20272:	f7ff ff0f 	bl	20094 <elapsed>
   20276:	4603      	mov	r3, r0
   20278:	461a      	mov	r2, r3
   2027a:	ea4f 73e2 	mov.w	r3, r2, asr #31
   2027e:	eb14 0a02 	adds.w	sl, r4, r2
   20282:	eb45 0b03 	adc.w	fp, r5, r3
   20286:	f11a 0301 	adds.w	r3, sl, #1
   2028a:	613b      	str	r3, [r7, #16]
   2028c:	f14b 0300 	adc.w	r3, fp, #0
   20290:	617b      	str	r3, [r7, #20]
   20292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   20294:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
   20298:	e9c3 1204 	strd	r1, r2, [r3, #16]
		}

		for (t = first(); t != NULL; t = next(t)) {
   2029c:	f7ff feda 	bl	20054 <first>
   202a0:	66f8      	str	r0, [r7, #108]	; 0x6c
   202a2:	e033      	b.n	2030c <z_add_timeout+0x1bc>
			if (t->dticks > to->dticks) {
   202a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   202a6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   202aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   202ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   202b0:	4282      	cmp	r2, r0
   202b2:	418b      	sbcs	r3, r1
   202b4:	da16      	bge.n	202e4 <z_add_timeout+0x194>
				t->dticks -= to->dticks;
   202b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   202b8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   202bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   202be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   202c2:	1a84      	subs	r4, r0, r2
   202c4:	60bc      	str	r4, [r7, #8]
   202c6:	eb61 0303 	sbc.w	r3, r1, r3
   202ca:	60fb      	str	r3, [r7, #12]
   202cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   202ce:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
   202d2:	e9c3 1204 	strd	r1, r2, [r3, #16]
				sys_dlist_insert(&t->node, &to->node);
   202d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   202d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   202da:	4619      	mov	r1, r3
   202dc:	4610      	mov	r0, r2
   202de:	f008 fd14 	bl	28d0a <sys_dlist_insert>
				break;
   202e2:	e016      	b.n	20312 <z_add_timeout+0x1c2>
			}
			to->dticks -= t->dticks;
   202e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   202e6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   202ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   202ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   202f0:	1a84      	subs	r4, r0, r2
   202f2:	603c      	str	r4, [r7, #0]
   202f4:	eb61 0303 	sbc.w	r3, r1, r3
   202f8:	607b      	str	r3, [r7, #4]
   202fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   202fc:	e9d7 1200 	ldrd	r1, r2, [r7]
   20300:	e9c3 1204 	strd	r1, r2, [r3, #16]
		for (t = first(); t != NULL; t = next(t)) {
   20304:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
   20306:	f7ff feb3 	bl	20070 <next>
   2030a:	66f8      	str	r0, [r7, #108]	; 0x6c
   2030c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2030e:	2b00      	cmp	r3, #0
   20310:	d1c8      	bne.n	202a4 <z_add_timeout+0x154>
		}

		if (t == NULL) {
   20312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   20314:	2b00      	cmp	r3, #0
   20316:	d104      	bne.n	20322 <z_add_timeout+0x1d2>
			sys_dlist_append(&timeout_list, &to->node);
   20318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2031a:	4619      	mov	r1, r3
   2031c:	482b      	ldr	r0, [pc, #172]	; (203cc <z_add_timeout+0x27c>)
   2031e:	f008 fcdb 	bl	28cd8 <sys_dlist_append>
		}

		if (to == first()) {
   20322:	f7ff fe97 	bl	20054 <first>
   20326:	4602      	mov	r2, r0
   20328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2032a:	4293      	cmp	r3, r2
   2032c:	d10e      	bne.n	2034c <z_add_timeout+0x1fc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   2032e:	f7ff fec1 	bl	200b4 <next_timeout>
   20332:	65f8      	str	r0, [r7, #92]	; 0x5c

			if (next_time == 0 ||
   20334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   20336:	2b00      	cmp	r3, #0
   20338:	d004      	beq.n	20344 <z_add_timeout+0x1f4>
			    _current_cpu->slice_ticks != next_time) {
   2033a:	4b25      	ldr	r3, [pc, #148]	; (203d0 <z_add_timeout+0x280>)
   2033c:	691a      	ldr	r2, [r3, #16]
			if (next_time == 0 ||
   2033e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   20340:	4293      	cmp	r3, r2
   20342:	d003      	beq.n	2034c <z_add_timeout+0x1fc>
				sys_clock_set_timeout(next_time, false);
   20344:	2100      	movs	r1, #0
   20346:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   20348:	f7f5 fa44 	bl	157d4 <sys_clock_set_timeout>
   2034c:	4b1a      	ldr	r3, [pc, #104]	; (203b8 <z_add_timeout+0x268>)
   2034e:	64fb      	str	r3, [r7, #76]	; 0x4c
   20350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   20352:	63fb      	str	r3, [r7, #60]	; 0x3c
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20354:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   20356:	f7fc fe93 	bl	1d080 <z_spin_unlock_valid>
   2035a:	4603      	mov	r3, r0
   2035c:	f083 0301 	eor.w	r3, r3, #1
   20360:	b2db      	uxtb	r3, r3
   20362:	2b00      	cmp	r3, #0
   20364:	d00d      	beq.n	20382 <z_add_timeout+0x232>
   20366:	23ac      	movs	r3, #172	; 0xac
   20368:	4a14      	ldr	r2, [pc, #80]	; (203bc <z_add_timeout+0x26c>)
   2036a:	491a      	ldr	r1, [pc, #104]	; (203d4 <z_add_timeout+0x284>)
   2036c:	4810      	ldr	r0, [pc, #64]	; (203b0 <z_add_timeout+0x260>)
   2036e:	f000 fe7b 	bl	21068 <printk>
   20372:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   20374:	4818      	ldr	r0, [pc, #96]	; (203d8 <z_add_timeout+0x288>)
   20376:	f000 fe77 	bl	21068 <printk>
   2037a:	21ac      	movs	r1, #172	; 0xac
   2037c:	480f      	ldr	r0, [pc, #60]	; (203bc <z_add_timeout+0x26c>)
   2037e:	f001 ff20 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   20382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   20384:	64bb      	str	r3, [r7, #72]	; 0x48
	__asm__ volatile(
   20386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   20388:	f383 8811 	msr	BASEPRI, r3
   2038c:	f3bf 8f6f 	isb	sy
}
   20390:	bf00      	nop
}
   20392:	bf00      	nop
	LOCKED(&timeout_lock) {
   20394:	2301      	movs	r3, #1
   20396:	647b      	str	r3, [r7, #68]	; 0x44
   20398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2039a:	2b00      	cmp	r3, #0
   2039c:	f43f af2f 	beq.w	201fe <z_add_timeout+0xae>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   203a0:	3770      	adds	r7, #112	; 0x70
   203a2:	46bd      	mov	sp, r7
   203a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
   203a8:	0002c8e8 	.word	0x0002c8e8
   203ac:	0002c90c 	.word	0x0002c90c
   203b0:	0002c92c 	.word	0x0002c92c
   203b4:	0002c94c 	.word	0x0002c94c
   203b8:	200151c4 	.word	0x200151c4
   203bc:	0002c950 	.word	0x0002c950
   203c0:	0002c978 	.word	0x0002c978
   203c4:	0002c990 	.word	0x0002c990
   203c8:	20014ba0 	.word	0x20014ba0
   203cc:	2001457c 	.word	0x2001457c
   203d0:	2001517c 	.word	0x2001517c
   203d4:	0002c9a8 	.word	0x0002c9a8
   203d8:	0002c9c0 	.word	0x0002c9c0

000203dc <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   203dc:	b580      	push	{r7, lr}
   203de:	b08c      	sub	sp, #48	; 0x30
   203e0:	af00      	add	r7, sp, #0
   203e2:	6078      	str	r0, [r7, #4]
	int ret = -EINVAL;
   203e4:	f06f 0315 	mvn.w	r3, #21
   203e8:	62fb      	str	r3, [r7, #44]	; 0x2c

	LOCKED(&timeout_lock) {
   203ea:	2300      	movs	r3, #0
   203ec:	617b      	str	r3, [r7, #20]
   203ee:	4b32      	ldr	r3, [pc, #200]	; (204b8 <z_abort_timeout+0xdc>)
   203f0:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
   203f2:	f04f 0320 	mov.w	r3, #32
   203f6:	f3ef 8211 	mrs	r2, BASEPRI
   203fa:	f383 8811 	msr	BASEPRI, r3
   203fe:	f3bf 8f6f 	isb	sy
   20402:	627a      	str	r2, [r7, #36]	; 0x24
   20404:	623b      	str	r3, [r7, #32]
	return key;
   20406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	k.key = arch_irq_lock();
   20408:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2040a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   2040c:	f7fc fe1c 	bl	1d048 <z_spin_lock_valid>
   20410:	4603      	mov	r3, r0
   20412:	f083 0301 	eor.w	r3, r3, #1
   20416:	b2db      	uxtb	r3, r3
   20418:	2b00      	cmp	r3, #0
   2041a:	d00d      	beq.n	20438 <z_abort_timeout+0x5c>
   2041c:	2381      	movs	r3, #129	; 0x81
   2041e:	4a27      	ldr	r2, [pc, #156]	; (204bc <z_abort_timeout+0xe0>)
   20420:	4927      	ldr	r1, [pc, #156]	; (204c0 <z_abort_timeout+0xe4>)
   20422:	4828      	ldr	r0, [pc, #160]	; (204c4 <z_abort_timeout+0xe8>)
   20424:	f000 fe20 	bl	21068 <printk>
   20428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2042a:	4827      	ldr	r0, [pc, #156]	; (204c8 <z_abort_timeout+0xec>)
   2042c:	f000 fe1c 	bl	21068 <printk>
   20430:	2181      	movs	r1, #129	; 0x81
   20432:	4822      	ldr	r0, [pc, #136]	; (204bc <z_abort_timeout+0xe0>)
   20434:	f001 fec5 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   20438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   2043a:	f7fc fe3d 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   2043e:	68bb      	ldr	r3, [r7, #8]
   20440:	613b      	str	r3, [r7, #16]
   20442:	e031      	b.n	204a8 <z_abort_timeout+0xcc>
		if (sys_dnode_is_linked(&to->node)) {
   20444:	687b      	ldr	r3, [r7, #4]
   20446:	4618      	mov	r0, r3
   20448:	f008 fbed 	bl	28c26 <sys_dnode_is_linked>
   2044c:	4603      	mov	r3, r0
   2044e:	2b00      	cmp	r3, #0
   20450:	d004      	beq.n	2045c <z_abort_timeout+0x80>
			remove_timeout(to);
   20452:	6878      	ldr	r0, [r7, #4]
   20454:	f008 fc89 	bl	28d6a <remove_timeout>
			ret = 0;
   20458:	2300      	movs	r3, #0
   2045a:	62fb      	str	r3, [r7, #44]	; 0x2c
   2045c:	4b16      	ldr	r3, [pc, #88]	; (204b8 <z_abort_timeout+0xdc>)
   2045e:	61fb      	str	r3, [r7, #28]
   20460:	693b      	ldr	r3, [r7, #16]
   20462:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20464:	69f8      	ldr	r0, [r7, #28]
   20466:	f7fc fe0b 	bl	1d080 <z_spin_unlock_valid>
   2046a:	4603      	mov	r3, r0
   2046c:	f083 0301 	eor.w	r3, r3, #1
   20470:	b2db      	uxtb	r3, r3
   20472:	2b00      	cmp	r3, #0
   20474:	d00d      	beq.n	20492 <z_abort_timeout+0xb6>
   20476:	23ac      	movs	r3, #172	; 0xac
   20478:	4a10      	ldr	r2, [pc, #64]	; (204bc <z_abort_timeout+0xe0>)
   2047a:	4914      	ldr	r1, [pc, #80]	; (204cc <z_abort_timeout+0xf0>)
   2047c:	4811      	ldr	r0, [pc, #68]	; (204c4 <z_abort_timeout+0xe8>)
   2047e:	f000 fdf3 	bl	21068 <printk>
   20482:	69f9      	ldr	r1, [r7, #28]
   20484:	4812      	ldr	r0, [pc, #72]	; (204d0 <z_abort_timeout+0xf4>)
   20486:	f000 fdef 	bl	21068 <printk>
   2048a:	21ac      	movs	r1, #172	; 0xac
   2048c:	480b      	ldr	r0, [pc, #44]	; (204bc <z_abort_timeout+0xe0>)
   2048e:	f001 fe98 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   20492:	68fb      	ldr	r3, [r7, #12]
   20494:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
   20496:	69bb      	ldr	r3, [r7, #24]
   20498:	f383 8811 	msr	BASEPRI, r3
   2049c:	f3bf 8f6f 	isb	sy
}
   204a0:	bf00      	nop
}
   204a2:	bf00      	nop
	LOCKED(&timeout_lock) {
   204a4:	2301      	movs	r3, #1
   204a6:	617b      	str	r3, [r7, #20]
   204a8:	697b      	ldr	r3, [r7, #20]
   204aa:	2b00      	cmp	r3, #0
   204ac:	d0ca      	beq.n	20444 <z_abort_timeout+0x68>
		}
	}

	return ret;
   204ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
   204b0:	4618      	mov	r0, r3
   204b2:	3730      	adds	r7, #48	; 0x30
   204b4:	46bd      	mov	sp, r7
   204b6:	bd80      	pop	{r7, pc}
   204b8:	200151c4 	.word	0x200151c4
   204bc:	0002c950 	.word	0x0002c950
   204c0:	0002c978 	.word	0x0002c978
   204c4:	0002c92c 	.word	0x0002c92c
   204c8:	0002c990 	.word	0x0002c990
   204cc:	0002c9a8 	.word	0x0002c9a8
   204d0:	0002c9c0 	.word	0x0002c9c0

000204d4 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   204d4:	b580      	push	{r7, lr}
   204d6:	b08a      	sub	sp, #40	; 0x28
   204d8:	af00      	add	r7, sp, #0
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   204da:	f04f 33ff 	mov.w	r3, #4294967295
   204de:	627b      	str	r3, [r7, #36]	; 0x24

	LOCKED(&timeout_lock) {
   204e0:	2300      	movs	r3, #0
   204e2:	60fb      	str	r3, [r7, #12]
   204e4:	4b2d      	ldr	r3, [pc, #180]	; (2059c <z_get_next_timeout_expiry+0xc8>)
   204e6:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   204e8:	f04f 0320 	mov.w	r3, #32
   204ec:	f3ef 8211 	mrs	r2, BASEPRI
   204f0:	f383 8811 	msr	BASEPRI, r3
   204f4:	f3bf 8f6f 	isb	sy
   204f8:	61fa      	str	r2, [r7, #28]
   204fa:	61bb      	str	r3, [r7, #24]
	return key;
   204fc:	69fb      	ldr	r3, [r7, #28]
	k.key = arch_irq_lock();
   204fe:	603b      	str	r3, [r7, #0]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20500:	6a38      	ldr	r0, [r7, #32]
   20502:	f7fc fda1 	bl	1d048 <z_spin_lock_valid>
   20506:	4603      	mov	r3, r0
   20508:	f083 0301 	eor.w	r3, r3, #1
   2050c:	b2db      	uxtb	r3, r3
   2050e:	2b00      	cmp	r3, #0
   20510:	d00d      	beq.n	2052e <z_get_next_timeout_expiry+0x5a>
   20512:	2381      	movs	r3, #129	; 0x81
   20514:	4a22      	ldr	r2, [pc, #136]	; (205a0 <z_get_next_timeout_expiry+0xcc>)
   20516:	4923      	ldr	r1, [pc, #140]	; (205a4 <z_get_next_timeout_expiry+0xd0>)
   20518:	4823      	ldr	r0, [pc, #140]	; (205a8 <z_get_next_timeout_expiry+0xd4>)
   2051a:	f000 fda5 	bl	21068 <printk>
   2051e:	6a39      	ldr	r1, [r7, #32]
   20520:	4822      	ldr	r0, [pc, #136]	; (205ac <z_get_next_timeout_expiry+0xd8>)
   20522:	f000 fda1 	bl	21068 <printk>
   20526:	2181      	movs	r1, #129	; 0x81
   20528:	481d      	ldr	r0, [pc, #116]	; (205a0 <z_get_next_timeout_expiry+0xcc>)
   2052a:	f001 fe4a 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2052e:	6a38      	ldr	r0, [r7, #32]
   20530:	f7fc fdc2 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   20534:	683b      	ldr	r3, [r7, #0]
   20536:	60bb      	str	r3, [r7, #8]
   20538:	e028      	b.n	2058c <z_get_next_timeout_expiry+0xb8>
		ret = next_timeout();
   2053a:	f7ff fdbb 	bl	200b4 <next_timeout>
   2053e:	6278      	str	r0, [r7, #36]	; 0x24
   20540:	4b16      	ldr	r3, [pc, #88]	; (2059c <z_get_next_timeout_expiry+0xc8>)
   20542:	617b      	str	r3, [r7, #20]
   20544:	68bb      	ldr	r3, [r7, #8]
   20546:	607b      	str	r3, [r7, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20548:	6978      	ldr	r0, [r7, #20]
   2054a:	f7fc fd99 	bl	1d080 <z_spin_unlock_valid>
   2054e:	4603      	mov	r3, r0
   20550:	f083 0301 	eor.w	r3, r3, #1
   20554:	b2db      	uxtb	r3, r3
   20556:	2b00      	cmp	r3, #0
   20558:	d00d      	beq.n	20576 <z_get_next_timeout_expiry+0xa2>
   2055a:	23ac      	movs	r3, #172	; 0xac
   2055c:	4a10      	ldr	r2, [pc, #64]	; (205a0 <z_get_next_timeout_expiry+0xcc>)
   2055e:	4914      	ldr	r1, [pc, #80]	; (205b0 <z_get_next_timeout_expiry+0xdc>)
   20560:	4811      	ldr	r0, [pc, #68]	; (205a8 <z_get_next_timeout_expiry+0xd4>)
   20562:	f000 fd81 	bl	21068 <printk>
   20566:	6979      	ldr	r1, [r7, #20]
   20568:	4812      	ldr	r0, [pc, #72]	; (205b4 <z_get_next_timeout_expiry+0xe0>)
   2056a:	f000 fd7d 	bl	21068 <printk>
   2056e:	21ac      	movs	r1, #172	; 0xac
   20570:	480b      	ldr	r0, [pc, #44]	; (205a0 <z_get_next_timeout_expiry+0xcc>)
   20572:	f001 fe26 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   20576:	687b      	ldr	r3, [r7, #4]
   20578:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
   2057a:	693b      	ldr	r3, [r7, #16]
   2057c:	f383 8811 	msr	BASEPRI, r3
   20580:	f3bf 8f6f 	isb	sy
}
   20584:	bf00      	nop
}
   20586:	bf00      	nop
	LOCKED(&timeout_lock) {
   20588:	2301      	movs	r3, #1
   2058a:	60fb      	str	r3, [r7, #12]
   2058c:	68fb      	ldr	r3, [r7, #12]
   2058e:	2b00      	cmp	r3, #0
   20590:	d0d3      	beq.n	2053a <z_get_next_timeout_expiry+0x66>
	}
	return ret;
   20592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   20594:	4618      	mov	r0, r3
   20596:	3728      	adds	r7, #40	; 0x28
   20598:	46bd      	mov	sp, r7
   2059a:	bd80      	pop	{r7, pc}
   2059c:	200151c4 	.word	0x200151c4
   205a0:	0002c950 	.word	0x0002c950
   205a4:	0002c978 	.word	0x0002c978
   205a8:	0002c92c 	.word	0x0002c92c
   205ac:	0002c990 	.word	0x0002c990
   205b0:	0002c9a8 	.word	0x0002c9a8
   205b4:	0002c9c0 	.word	0x0002c9c0

000205b8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   205b8:	b580      	push	{r7, lr}
   205ba:	b08e      	sub	sp, #56	; 0x38
   205bc:	af00      	add	r7, sp, #0
   205be:	6078      	str	r0, [r7, #4]
   205c0:	460b      	mov	r3, r1
   205c2:	70fb      	strb	r3, [r7, #3]
	LOCKED(&timeout_lock) {
   205c4:	2300      	movs	r3, #0
   205c6:	61bb      	str	r3, [r7, #24]
   205c8:	4b45      	ldr	r3, [pc, #276]	; (206e0 <z_set_timeout_expiry+0x128>)
   205ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
   205cc:	f04f 0320 	mov.w	r3, #32
   205d0:	f3ef 8211 	mrs	r2, BASEPRI
   205d4:	f383 8811 	msr	BASEPRI, r3
   205d8:	f3bf 8f6f 	isb	sy
   205dc:	62ba      	str	r2, [r7, #40]	; 0x28
   205de:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
   205e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
   205e2:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   205e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   205e6:	f7fc fd2f 	bl	1d048 <z_spin_lock_valid>
   205ea:	4603      	mov	r3, r0
   205ec:	f083 0301 	eor.w	r3, r3, #1
   205f0:	b2db      	uxtb	r3, r3
   205f2:	2b00      	cmp	r3, #0
   205f4:	d00d      	beq.n	20612 <z_set_timeout_expiry+0x5a>
   205f6:	2381      	movs	r3, #129	; 0x81
   205f8:	4a3a      	ldr	r2, [pc, #232]	; (206e4 <z_set_timeout_expiry+0x12c>)
   205fa:	493b      	ldr	r1, [pc, #236]	; (206e8 <z_set_timeout_expiry+0x130>)
   205fc:	483b      	ldr	r0, [pc, #236]	; (206ec <z_set_timeout_expiry+0x134>)
   205fe:	f000 fd33 	bl	21068 <printk>
   20602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   20604:	483a      	ldr	r0, [pc, #232]	; (206f0 <z_set_timeout_expiry+0x138>)
   20606:	f000 fd2f 	bl	21068 <printk>
   2060a:	2181      	movs	r1, #129	; 0x81
   2060c:	4835      	ldr	r0, [pc, #212]	; (206e4 <z_set_timeout_expiry+0x12c>)
   2060e:	f001 fdd8 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   20612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   20614:	f7fc fd50 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   20618:	68fb      	ldr	r3, [r7, #12]
   2061a:	617b      	str	r3, [r7, #20]
   2061c:	e057      	b.n	206ce <z_set_timeout_expiry+0x116>
		int next_to = next_timeout();
   2061e:	f7ff fd49 	bl	200b4 <next_timeout>
   20622:	6378      	str	r0, [r7, #52]	; 0x34
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   20624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   20626:	f1b3 3fff 	cmp.w	r3, #4294967295
   2062a:	d003      	beq.n	20634 <z_set_timeout_expiry+0x7c>
   2062c:	687a      	ldr	r2, [r7, #4]
   2062e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   20630:	429a      	cmp	r2, r3
   20632:	dc01      	bgt.n	20638 <z_set_timeout_expiry+0x80>
   20634:	2301      	movs	r3, #1
   20636:	e000      	b.n	2063a <z_set_timeout_expiry+0x82>
   20638:	2300      	movs	r3, #0
		bool sooner = (next_to == K_TICKS_FOREVER)
   2063a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
   2063e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   20642:	f003 0301 	and.w	r3, r3, #1
   20646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		bool imminent = next_to <= 1;
   2064a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2064c:	2b01      	cmp	r3, #1
   2064e:	bfd4      	ite	le
   20650:	2301      	movle	r3, #1
   20652:	2300      	movgt	r3, #0
   20654:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   20658:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
   2065c:	f083 0301 	eor.w	r3, r3, #1
   20660:	b2db      	uxtb	r3, r3
   20662:	2b00      	cmp	r3, #0
   20664:	d00d      	beq.n	20682 <z_set_timeout_expiry+0xca>
   20666:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
   2066a:	2b00      	cmp	r3, #0
   2066c:	d009      	beq.n	20682 <z_set_timeout_expiry+0xca>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2066e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   20670:	687b      	ldr	r3, [r7, #4]
   20672:	4293      	cmp	r3, r2
   20674:	bfa8      	it	ge
   20676:	4613      	movge	r3, r2
   20678:	78fa      	ldrb	r2, [r7, #3]
   2067a:	4611      	mov	r1, r2
   2067c:	4618      	mov	r0, r3
   2067e:	f7f5 f8a9 	bl	157d4 <sys_clock_set_timeout>
   20682:	4b17      	ldr	r3, [pc, #92]	; (206e0 <z_set_timeout_expiry+0x128>)
   20684:	623b      	str	r3, [r7, #32]
   20686:	697b      	ldr	r3, [r7, #20]
   20688:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2068a:	6a38      	ldr	r0, [r7, #32]
   2068c:	f7fc fcf8 	bl	1d080 <z_spin_unlock_valid>
   20690:	4603      	mov	r3, r0
   20692:	f083 0301 	eor.w	r3, r3, #1
   20696:	b2db      	uxtb	r3, r3
   20698:	2b00      	cmp	r3, #0
   2069a:	d00d      	beq.n	206b8 <z_set_timeout_expiry+0x100>
   2069c:	23ac      	movs	r3, #172	; 0xac
   2069e:	4a11      	ldr	r2, [pc, #68]	; (206e4 <z_set_timeout_expiry+0x12c>)
   206a0:	4914      	ldr	r1, [pc, #80]	; (206f4 <z_set_timeout_expiry+0x13c>)
   206a2:	4812      	ldr	r0, [pc, #72]	; (206ec <z_set_timeout_expiry+0x134>)
   206a4:	f000 fce0 	bl	21068 <printk>
   206a8:	6a39      	ldr	r1, [r7, #32]
   206aa:	4813      	ldr	r0, [pc, #76]	; (206f8 <z_set_timeout_expiry+0x140>)
   206ac:	f000 fcdc 	bl	21068 <printk>
   206b0:	21ac      	movs	r1, #172	; 0xac
   206b2:	480c      	ldr	r0, [pc, #48]	; (206e4 <z_set_timeout_expiry+0x12c>)
   206b4:	f001 fd85 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   206b8:	693b      	ldr	r3, [r7, #16]
   206ba:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   206bc:	69fb      	ldr	r3, [r7, #28]
   206be:	f383 8811 	msr	BASEPRI, r3
   206c2:	f3bf 8f6f 	isb	sy
}
   206c6:	bf00      	nop
}
   206c8:	bf00      	nop
	LOCKED(&timeout_lock) {
   206ca:	2301      	movs	r3, #1
   206cc:	61bb      	str	r3, [r7, #24]
   206ce:	69bb      	ldr	r3, [r7, #24]
   206d0:	2b00      	cmp	r3, #0
   206d2:	d0a4      	beq.n	2061e <z_set_timeout_expiry+0x66>
		}
	}
}
   206d4:	bf00      	nop
   206d6:	bf00      	nop
   206d8:	3738      	adds	r7, #56	; 0x38
   206da:	46bd      	mov	sp, r7
   206dc:	bd80      	pop	{r7, pc}
   206de:	bf00      	nop
   206e0:	200151c4 	.word	0x200151c4
   206e4:	0002c950 	.word	0x0002c950
   206e8:	0002c978 	.word	0x0002c978
   206ec:	0002c92c 	.word	0x0002c92c
   206f0:	0002c990 	.word	0x0002c990
   206f4:	0002c9a8 	.word	0x0002c9a8
   206f8:	0002c9c0 	.word	0x0002c9c0

000206fc <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   206fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20700:	b095      	sub	sp, #84	; 0x54
   20702:	af00      	add	r7, sp, #0
   20704:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   20706:	6878      	ldr	r0, [r7, #4]
   20708:	f7fd fe98 	bl	1e43c <z_time_slice>
   2070c:	4b87      	ldr	r3, [pc, #540]	; (2092c <sys_clock_announce+0x230>)
   2070e:	647b      	str	r3, [r7, #68]	; 0x44
	__asm__ volatile(
   20710:	f04f 0320 	mov.w	r3, #32
   20714:	f3ef 8211 	mrs	r2, BASEPRI
   20718:	f383 8811 	msr	BASEPRI, r3
   2071c:	f3bf 8f6f 	isb	sy
   20720:	643a      	str	r2, [r7, #64]	; 0x40
   20722:	63fb      	str	r3, [r7, #60]	; 0x3c
	return key;
   20724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	k.key = arch_irq_lock();
   20726:	617b      	str	r3, [r7, #20]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20728:	6c78      	ldr	r0, [r7, #68]	; 0x44
   2072a:	f7fc fc8d 	bl	1d048 <z_spin_lock_valid>
   2072e:	4603      	mov	r3, r0
   20730:	f083 0301 	eor.w	r3, r3, #1
   20734:	b2db      	uxtb	r3, r3
   20736:	2b00      	cmp	r3, #0
   20738:	d00d      	beq.n	20756 <sys_clock_announce+0x5a>
   2073a:	2381      	movs	r3, #129	; 0x81
   2073c:	4a7c      	ldr	r2, [pc, #496]	; (20930 <sys_clock_announce+0x234>)
   2073e:	497d      	ldr	r1, [pc, #500]	; (20934 <sys_clock_announce+0x238>)
   20740:	487d      	ldr	r0, [pc, #500]	; (20938 <sys_clock_announce+0x23c>)
   20742:	f000 fc91 	bl	21068 <printk>
   20746:	6c79      	ldr	r1, [r7, #68]	; 0x44
   20748:	487c      	ldr	r0, [pc, #496]	; (2093c <sys_clock_announce+0x240>)
   2074a:	f000 fc8d 	bl	21068 <printk>
   2074e:	2181      	movs	r1, #129	; 0x81
   20750:	4877      	ldr	r0, [pc, #476]	; (20930 <sys_clock_announce+0x234>)
   20752:	f001 fd36 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   20756:	6c78      	ldr	r0, [r7, #68]	; 0x44
   20758:	f7fc fcae 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   2075c:	697b      	ldr	r3, [r7, #20]
   2075e:	61fb      	str	r3, [r7, #28]
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   20760:	4a77      	ldr	r2, [pc, #476]	; (20940 <sys_clock_announce+0x244>)
   20762:	687b      	ldr	r3, [r7, #4]
   20764:	6013      	str	r3, [r2, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   20766:	e077      	b.n	20858 <sys_clock_announce+0x15c>
		struct _timeout *t = first();
   20768:	f7ff fc74 	bl	20054 <first>
   2076c:	64f8      	str	r0, [r7, #76]	; 0x4c
		int dt = t->dticks;
   2076e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   20770:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   20774:	4613      	mov	r3, r2
   20776:	64bb      	str	r3, [r7, #72]	; 0x48

		curr_tick += dt;
   20778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2077a:	4618      	mov	r0, r3
   2077c:	ea4f 71e0 	mov.w	r1, r0, asr #31
   20780:	4b70      	ldr	r3, [pc, #448]	; (20944 <sys_clock_announce+0x248>)
   20782:	e9d3 2300 	ldrd	r2, r3, [r3]
   20786:	eb10 0a02 	adds.w	sl, r0, r2
   2078a:	eb41 0b03 	adc.w	fp, r1, r3
   2078e:	4b6d      	ldr	r3, [pc, #436]	; (20944 <sys_clock_announce+0x248>)
   20790:	e9c3 ab00 	strd	sl, fp, [r3]
		announce_remaining -= dt;
   20794:	4b6a      	ldr	r3, [pc, #424]	; (20940 <sys_clock_announce+0x244>)
   20796:	681a      	ldr	r2, [r3, #0]
   20798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2079a:	1ad3      	subs	r3, r2, r3
   2079c:	4a68      	ldr	r2, [pc, #416]	; (20940 <sys_clock_announce+0x244>)
   2079e:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   207a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   207a2:	f04f 0200 	mov.w	r2, #0
   207a6:	f04f 0300 	mov.w	r3, #0
   207aa:	e9c1 2304 	strd	r2, r3, [r1, #16]
		remove_timeout(t);
   207ae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   207b0:	f008 fadb 	bl	28d6a <remove_timeout>
   207b4:	4b5d      	ldr	r3, [pc, #372]	; (2092c <sys_clock_announce+0x230>)
   207b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   207b8:	69fb      	ldr	r3, [r7, #28]
   207ba:	613b      	str	r3, [r7, #16]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   207bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   207be:	f7fc fc5f 	bl	1d080 <z_spin_unlock_valid>
   207c2:	4603      	mov	r3, r0
   207c4:	f083 0301 	eor.w	r3, r3, #1
   207c8:	b2db      	uxtb	r3, r3
   207ca:	2b00      	cmp	r3, #0
   207cc:	d00d      	beq.n	207ea <sys_clock_announce+0xee>
   207ce:	23ac      	movs	r3, #172	; 0xac
   207d0:	4a57      	ldr	r2, [pc, #348]	; (20930 <sys_clock_announce+0x234>)
   207d2:	495d      	ldr	r1, [pc, #372]	; (20948 <sys_clock_announce+0x24c>)
   207d4:	4858      	ldr	r0, [pc, #352]	; (20938 <sys_clock_announce+0x23c>)
   207d6:	f000 fc47 	bl	21068 <printk>
   207da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   207dc:	485b      	ldr	r0, [pc, #364]	; (2094c <sys_clock_announce+0x250>)
   207de:	f000 fc43 	bl	21068 <printk>
   207e2:	21ac      	movs	r1, #172	; 0xac
   207e4:	4852      	ldr	r0, [pc, #328]	; (20930 <sys_clock_announce+0x234>)
   207e6:	f001 fcec 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   207ea:	693b      	ldr	r3, [r7, #16]
   207ec:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
   207ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   207f0:	f383 8811 	msr	BASEPRI, r3
   207f4:	f3bf 8f6f 	isb	sy
}
   207f8:	bf00      	nop
}
   207fa:	bf00      	nop

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   207fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   207fe:	689b      	ldr	r3, [r3, #8]
   20800:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   20802:	4798      	blx	r3
   20804:	4b49      	ldr	r3, [pc, #292]	; (2092c <sys_clock_announce+0x230>)
   20806:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
   20808:	f04f 0320 	mov.w	r3, #32
   2080c:	f3ef 8211 	mrs	r2, BASEPRI
   20810:	f383 8811 	msr	BASEPRI, r3
   20814:	f3bf 8f6f 	isb	sy
   20818:	637a      	str	r2, [r7, #52]	; 0x34
   2081a:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
   2081c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	k.key = arch_irq_lock();
   2081e:	60fb      	str	r3, [r7, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20820:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   20822:	f7fc fc11 	bl	1d048 <z_spin_lock_valid>
   20826:	4603      	mov	r3, r0
   20828:	f083 0301 	eor.w	r3, r3, #1
   2082c:	b2db      	uxtb	r3, r3
   2082e:	2b00      	cmp	r3, #0
   20830:	d00d      	beq.n	2084e <sys_clock_announce+0x152>
   20832:	2381      	movs	r3, #129	; 0x81
   20834:	4a3e      	ldr	r2, [pc, #248]	; (20930 <sys_clock_announce+0x234>)
   20836:	493f      	ldr	r1, [pc, #252]	; (20934 <sys_clock_announce+0x238>)
   20838:	483f      	ldr	r0, [pc, #252]	; (20938 <sys_clock_announce+0x23c>)
   2083a:	f000 fc15 	bl	21068 <printk>
   2083e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   20840:	483e      	ldr	r0, [pc, #248]	; (2093c <sys_clock_announce+0x240>)
   20842:	f000 fc11 	bl	21068 <printk>
   20846:	2181      	movs	r1, #129	; 0x81
   20848:	4839      	ldr	r0, [pc, #228]	; (20930 <sys_clock_announce+0x234>)
   2084a:	f001 fcba 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   2084e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   20850:	f7fc fc32 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   20854:	68fb      	ldr	r3, [r7, #12]
   20856:	61fb      	str	r3, [r7, #28]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   20858:	f7ff fbfc 	bl	20054 <first>
   2085c:	4603      	mov	r3, r0
   2085e:	2b00      	cmp	r3, #0
   20860:	d00e      	beq.n	20880 <sys_clock_announce+0x184>
   20862:	f7ff fbf7 	bl	20054 <first>
   20866:	4603      	mov	r3, r0
   20868:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   2086c:	4934      	ldr	r1, [pc, #208]	; (20940 <sys_clock_announce+0x244>)
   2086e:	6809      	ldr	r1, [r1, #0]
   20870:	4608      	mov	r0, r1
   20872:	ea4f 71e0 	mov.w	r1, r0, asr #31
   20876:	4290      	cmp	r0, r2
   20878:	eb71 0303 	sbcs.w	r3, r1, r3
   2087c:	f6bf af74 	bge.w	20768 <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   20880:	f7ff fbe8 	bl	20054 <first>
   20884:	4603      	mov	r3, r0
   20886:	2b00      	cmp	r3, #0
   20888:	d00f      	beq.n	208aa <sys_clock_announce+0x1ae>
		first()->dticks -= announce_remaining;
   2088a:	f7ff fbe3 	bl	20054 <first>
   2088e:	4606      	mov	r6, r0
   20890:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   20894:	4b2a      	ldr	r3, [pc, #168]	; (20940 <sys_clock_announce+0x244>)
   20896:	681b      	ldr	r3, [r3, #0]
   20898:	461a      	mov	r2, r3
   2089a:	ea4f 73e2 	mov.w	r3, r2, asr #31
   2089e:	ebb0 0802 	subs.w	r8, r0, r2
   208a2:	eb61 0903 	sbc.w	r9, r1, r3
   208a6:	e9c6 8904 	strd	r8, r9, [r6, #16]
	}

	curr_tick += announce_remaining;
   208aa:	4b25      	ldr	r3, [pc, #148]	; (20940 <sys_clock_announce+0x244>)
   208ac:	681b      	ldr	r3, [r3, #0]
   208ae:	4618      	mov	r0, r3
   208b0:	ea4f 71e0 	mov.w	r1, r0, asr #31
   208b4:	4b23      	ldr	r3, [pc, #140]	; (20944 <sys_clock_announce+0x248>)
   208b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   208ba:	1884      	adds	r4, r0, r2
   208bc:	eb41 0503 	adc.w	r5, r1, r3
   208c0:	4b20      	ldr	r3, [pc, #128]	; (20944 <sys_clock_announce+0x248>)
   208c2:	e9c3 4500 	strd	r4, r5, [r3]
	announce_remaining = 0;
   208c6:	4b1e      	ldr	r3, [pc, #120]	; (20940 <sys_clock_announce+0x244>)
   208c8:	2200      	movs	r2, #0
   208ca:	601a      	str	r2, [r3, #0]

	sys_clock_set_timeout(next_timeout(), false);
   208cc:	f7ff fbf2 	bl	200b4 <next_timeout>
   208d0:	4603      	mov	r3, r0
   208d2:	2100      	movs	r1, #0
   208d4:	4618      	mov	r0, r3
   208d6:	f7f4 ff7d 	bl	157d4 <sys_clock_set_timeout>
   208da:	4b14      	ldr	r3, [pc, #80]	; (2092c <sys_clock_announce+0x230>)
   208dc:	627b      	str	r3, [r7, #36]	; 0x24
   208de:	69fb      	ldr	r3, [r7, #28]
   208e0:	61bb      	str	r3, [r7, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   208e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
   208e4:	f7fc fbcc 	bl	1d080 <z_spin_unlock_valid>
   208e8:	4603      	mov	r3, r0
   208ea:	f083 0301 	eor.w	r3, r3, #1
   208ee:	b2db      	uxtb	r3, r3
   208f0:	2b00      	cmp	r3, #0
   208f2:	d00d      	beq.n	20910 <sys_clock_announce+0x214>
   208f4:	23ac      	movs	r3, #172	; 0xac
   208f6:	4a0e      	ldr	r2, [pc, #56]	; (20930 <sys_clock_announce+0x234>)
   208f8:	4913      	ldr	r1, [pc, #76]	; (20948 <sys_clock_announce+0x24c>)
   208fa:	480f      	ldr	r0, [pc, #60]	; (20938 <sys_clock_announce+0x23c>)
   208fc:	f000 fbb4 	bl	21068 <printk>
   20900:	6a79      	ldr	r1, [r7, #36]	; 0x24
   20902:	4812      	ldr	r0, [pc, #72]	; (2094c <sys_clock_announce+0x250>)
   20904:	f000 fbb0 	bl	21068 <printk>
   20908:	21ac      	movs	r1, #172	; 0xac
   2090a:	4809      	ldr	r0, [pc, #36]	; (20930 <sys_clock_announce+0x234>)
   2090c:	f001 fc59 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   20910:	69bb      	ldr	r3, [r7, #24]
   20912:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
   20914:	6a3b      	ldr	r3, [r7, #32]
   20916:	f383 8811 	msr	BASEPRI, r3
   2091a:	f3bf 8f6f 	isb	sy
}
   2091e:	bf00      	nop
}
   20920:	bf00      	nop

	k_spin_unlock(&timeout_lock, key);
}
   20922:	bf00      	nop
   20924:	3754      	adds	r7, #84	; 0x54
   20926:	46bd      	mov	sp, r7
   20928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2092c:	200151c4 	.word	0x200151c4
   20930:	0002c950 	.word	0x0002c950
   20934:	0002c978 	.word	0x0002c978
   20938:	0002c92c 	.word	0x0002c92c
   2093c:	0002c990 	.word	0x0002c990
   20940:	200151c8 	.word	0x200151c8
   20944:	20014ba0 	.word	0x20014ba0
   20948:	0002c9a8 	.word	0x0002c9a8
   2094c:	0002c9c0 	.word	0x0002c9c0

00020950 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   20950:	b5b0      	push	{r4, r5, r7, lr}
   20952:	b08c      	sub	sp, #48	; 0x30
   20954:	af00      	add	r7, sp, #0
	uint64_t t = 0U;
   20956:	f04f 0200 	mov.w	r2, #0
   2095a:	f04f 0300 	mov.w	r3, #0
   2095e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	LOCKED(&timeout_lock) {
   20962:	2300      	movs	r3, #0
   20964:	613b      	str	r3, [r7, #16]
   20966:	4b34      	ldr	r3, [pc, #208]	; (20a38 <sys_clock_tick_get+0xe8>)
   20968:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
   2096a:	f04f 0320 	mov.w	r3, #32
   2096e:	f3ef 8211 	mrs	r2, BASEPRI
   20972:	f383 8811 	msr	BASEPRI, r3
   20976:	f3bf 8f6f 	isb	sy
   2097a:	623a      	str	r2, [r7, #32]
   2097c:	61fb      	str	r3, [r7, #28]
	return key;
   2097e:	6a3b      	ldr	r3, [r7, #32]
	k.key = arch_irq_lock();
   20980:	607b      	str	r3, [r7, #4]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20982:	6a78      	ldr	r0, [r7, #36]	; 0x24
   20984:	f7fc fb60 	bl	1d048 <z_spin_lock_valid>
   20988:	4603      	mov	r3, r0
   2098a:	f083 0301 	eor.w	r3, r3, #1
   2098e:	b2db      	uxtb	r3, r3
   20990:	2b00      	cmp	r3, #0
   20992:	d00d      	beq.n	209b0 <sys_clock_tick_get+0x60>
   20994:	2381      	movs	r3, #129	; 0x81
   20996:	4a29      	ldr	r2, [pc, #164]	; (20a3c <sys_clock_tick_get+0xec>)
   20998:	4929      	ldr	r1, [pc, #164]	; (20a40 <sys_clock_tick_get+0xf0>)
   2099a:	482a      	ldr	r0, [pc, #168]	; (20a44 <sys_clock_tick_get+0xf4>)
   2099c:	f000 fb64 	bl	21068 <printk>
   209a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   209a2:	4829      	ldr	r0, [pc, #164]	; (20a48 <sys_clock_tick_get+0xf8>)
   209a4:	f000 fb60 	bl	21068 <printk>
   209a8:	2181      	movs	r1, #129	; 0x81
   209aa:	4824      	ldr	r0, [pc, #144]	; (20a3c <sys_clock_tick_get+0xec>)
   209ac:	f001 fc09 	bl	221c2 <assert_post_action>
	z_spin_lock_set_owner(l);
   209b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   209b2:	f7fc fb81 	bl	1d0b8 <z_spin_lock_set_owner>
	return k;
   209b6:	687b      	ldr	r3, [r7, #4]
   209b8:	60fb      	str	r3, [r7, #12]
   209ba:	e033      	b.n	20a24 <sys_clock_tick_get+0xd4>
		t = curr_tick + sys_clock_elapsed();
   209bc:	f7f5 f808 	bl	159d0 <sys_clock_elapsed>
   209c0:	4603      	mov	r3, r0
   209c2:	4618      	mov	r0, r3
   209c4:	f04f 0100 	mov.w	r1, #0
   209c8:	4b20      	ldr	r3, [pc, #128]	; (20a4c <sys_clock_tick_get+0xfc>)
   209ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   209ce:	1884      	adds	r4, r0, r2
   209d0:	eb41 0503 	adc.w	r5, r1, r3
   209d4:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
   209d8:	4b17      	ldr	r3, [pc, #92]	; (20a38 <sys_clock_tick_get+0xe8>)
   209da:	61bb      	str	r3, [r7, #24]
   209dc:	68fb      	ldr	r3, [r7, #12]
   209de:	60bb      	str	r3, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   209e0:	69b8      	ldr	r0, [r7, #24]
   209e2:	f7fc fb4d 	bl	1d080 <z_spin_unlock_valid>
   209e6:	4603      	mov	r3, r0
   209e8:	f083 0301 	eor.w	r3, r3, #1
   209ec:	b2db      	uxtb	r3, r3
   209ee:	2b00      	cmp	r3, #0
   209f0:	d00d      	beq.n	20a0e <sys_clock_tick_get+0xbe>
   209f2:	23ac      	movs	r3, #172	; 0xac
   209f4:	4a11      	ldr	r2, [pc, #68]	; (20a3c <sys_clock_tick_get+0xec>)
   209f6:	4916      	ldr	r1, [pc, #88]	; (20a50 <sys_clock_tick_get+0x100>)
   209f8:	4812      	ldr	r0, [pc, #72]	; (20a44 <sys_clock_tick_get+0xf4>)
   209fa:	f000 fb35 	bl	21068 <printk>
   209fe:	69b9      	ldr	r1, [r7, #24]
   20a00:	4814      	ldr	r0, [pc, #80]	; (20a54 <sys_clock_tick_get+0x104>)
   20a02:	f000 fb31 	bl	21068 <printk>
   20a06:	21ac      	movs	r1, #172	; 0xac
   20a08:	480c      	ldr	r0, [pc, #48]	; (20a3c <sys_clock_tick_get+0xec>)
   20a0a:	f001 fbda 	bl	221c2 <assert_post_action>
	arch_irq_unlock(key.key);
   20a0e:	68bb      	ldr	r3, [r7, #8]
   20a10:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
   20a12:	697b      	ldr	r3, [r7, #20]
   20a14:	f383 8811 	msr	BASEPRI, r3
   20a18:	f3bf 8f6f 	isb	sy
}
   20a1c:	bf00      	nop
}
   20a1e:	bf00      	nop
	LOCKED(&timeout_lock) {
   20a20:	2301      	movs	r3, #1
   20a22:	613b      	str	r3, [r7, #16]
   20a24:	693b      	ldr	r3, [r7, #16]
   20a26:	2b00      	cmp	r3, #0
   20a28:	d0c8      	beq.n	209bc <sys_clock_tick_get+0x6c>
	}
	return t;
   20a2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
   20a2e:	4610      	mov	r0, r2
   20a30:	4619      	mov	r1, r3
   20a32:	3730      	adds	r7, #48	; 0x30
   20a34:	46bd      	mov	sp, r7
   20a36:	bdb0      	pop	{r4, r5, r7, pc}
   20a38:	200151c4 	.word	0x200151c4
   20a3c:	0002c950 	.word	0x0002c950
   20a40:	0002c978 	.word	0x0002c978
   20a44:	0002c92c 	.word	0x0002c92c
   20a48:	0002c990 	.word	0x0002c990
   20a4c:	20014ba0 	.word	0x20014ba0
   20a50:	0002c9a8 	.word	0x0002c9a8
   20a54:	0002c9c0 	.word	0x0002c9c0

00020a58 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   20a58:	b580      	push	{r7, lr}
   20a5a:	b086      	sub	sp, #24
   20a5c:	af00      	add	r7, sp, #0
   20a5e:	6078      	str	r0, [r7, #4]
	struct k_timer *timer = CONTAINER_OF(t, struct k_timer, timeout);
   20a60:	687b      	ldr	r3, [r7, #4]
   20a62:	617b      	str	r3, [r7, #20]

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   20a64:	697b      	ldr	r3, [r7, #20]
   20a66:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
   20a6a:	f04f 0000 	mov.w	r0, #0
   20a6e:	f04f 0100 	mov.w	r1, #0
   20a72:	428b      	cmp	r3, r1
   20a74:	bf08      	it	eq
   20a76:	4282      	cmpeq	r2, r0
   20a78:	d011      	beq.n	20a9e <z_timer_expiration_handler+0x46>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
   20a7a:	697b      	ldr	r3, [r7, #20]
   20a7c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
   20a80:	f04f 30ff 	mov.w	r0, #4294967295
   20a84:	f04f 31ff 	mov.w	r1, #4294967295
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   20a88:	428b      	cmp	r3, r1
   20a8a:	bf08      	it	eq
   20a8c:	4282      	cmpeq	r2, r0
   20a8e:	d006      	beq.n	20a9e <z_timer_expiration_handler+0x46>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20a90:	6978      	ldr	r0, [r7, #20]
   20a92:	697b      	ldr	r3, [r7, #20]
   20a94:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
   20a98:	4915      	ldr	r1, [pc, #84]	; (20af0 <z_timer_expiration_handler+0x98>)
   20a9a:	f7ff fb59 	bl	20150 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   20a9e:	697b      	ldr	r3, [r7, #20]
   20aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   20aa2:	1c5a      	adds	r2, r3, #1
   20aa4:	697b      	ldr	r3, [r7, #20]
   20aa6:	631a      	str	r2, [r3, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   20aa8:	697b      	ldr	r3, [r7, #20]
   20aaa:	6a1b      	ldr	r3, [r3, #32]
   20aac:	2b00      	cmp	r3, #0
   20aae:	d003      	beq.n	20ab8 <z_timer_expiration_handler+0x60>
		timer->expiry_fn(timer);
   20ab0:	697b      	ldr	r3, [r7, #20]
   20ab2:	6a1b      	ldr	r3, [r3, #32]
   20ab4:	6978      	ldr	r0, [r7, #20]
   20ab6:	4798      	blx	r3

	if (!IS_ENABLED(CONFIG_MULTITHREADING)) {
		return;
	}

	thread = z_waitq_head(&timer->wait_q);
   20ab8:	697b      	ldr	r3, [r7, #20]
   20aba:	3318      	adds	r3, #24
   20abc:	4618      	mov	r0, r3
   20abe:	f008 fa66 	bl	28f8e <z_waitq_head>
   20ac2:	6138      	str	r0, [r7, #16]

	if (thread == NULL) {
   20ac4:	693b      	ldr	r3, [r7, #16]
   20ac6:	2b00      	cmp	r3, #0
   20ac8:	d00e      	beq.n	20ae8 <z_timer_expiration_handler+0x90>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   20aca:	6938      	ldr	r0, [r7, #16]
   20acc:	f7fe f934 	bl	1ed38 <z_unpend_thread_no_timeout>
   20ad0:	693b      	ldr	r3, [r7, #16]
   20ad2:	60fb      	str	r3, [r7, #12]
   20ad4:	2300      	movs	r3, #0
   20ad6:	60bb      	str	r3, [r7, #8]
	thread->arch.swap_return_value = value;
   20ad8:	68fb      	ldr	r3, [r7, #12]
   20ada:	68ba      	ldr	r2, [r7, #8]
   20adc:	679a      	str	r2, [r3, #120]	; 0x78
}
   20ade:	bf00      	nop

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   20ae0:	6938      	ldr	r0, [r7, #16]
   20ae2:	f7fd fe5f 	bl	1e7a4 <z_ready_thread>
   20ae6:	e000      	b.n	20aea <z_timer_expiration_handler+0x92>
		return;
   20ae8:	bf00      	nop
}
   20aea:	3718      	adds	r7, #24
   20aec:	46bd      	mov	sp, r7
   20aee:	bd80      	pop	{r7, pc}
   20af0:	00020a59 	.word	0x00020a59

00020af4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   20af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   20af8:	b086      	sub	sp, #24
   20afa:	af00      	add	r7, sp, #0
   20afc:	6178      	str	r0, [r7, #20]
   20afe:	e9c7 2302 	strd	r2, r3, [r7, #8]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   20b02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   20b06:	f04f 30ff 	mov.w	r0, #4294967295
   20b0a:	f04f 31ff 	mov.w	r1, #4294967295
   20b0e:	428b      	cmp	r3, r1
   20b10:	bf08      	it	eq
   20b12:	4282      	cmpeq	r2, r0
   20b14:	d100      	bne.n	20b18 <z_impl_k_timer_start+0x24>
   20b16:	e061      	b.n	20bdc <z_impl_k_timer_start+0xe8>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   20b18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   20b1c:	f04f 30ff 	mov.w	r0, #4294967295
   20b20:	f04f 31ff 	mov.w	r1, #4294967295
   20b24:	428b      	cmp	r3, r1
   20b26:	bf08      	it	eq
   20b28:	4282      	cmpeq	r2, r0
   20b2a:	d026      	beq.n	20b7a <z_impl_k_timer_start+0x86>
   20b2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   20b30:	4313      	orrs	r3, r2
   20b32:	d022      	beq.n	20b7a <z_impl_k_timer_start+0x86>
	    Z_TICK_ABS(period.ticks) < 0) {
   20b34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   20b38:	f06f 0001 	mvn.w	r0, #1
   20b3c:	f04f 31ff 	mov.w	r1, #4294967295
   20b40:	ebb0 0802 	subs.w	r8, r0, r2
   20b44:	eb61 0903 	sbc.w	r9, r1, r3
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   20b48:	f1b8 0f00 	cmp.w	r8, #0
   20b4c:	f179 0300 	sbcs.w	r3, r9, #0
   20b50:	da13      	bge.n	20b7a <z_impl_k_timer_start+0x86>
		period.ticks = MAX(period.ticks - 1, 1);
   20b52:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   20b56:	f112 31ff 	adds.w	r1, r2, #4294967295
   20b5a:	6039      	str	r1, [r7, #0]
   20b5c:	f143 33ff 	adc.w	r3, r3, #4294967295
   20b60:	607b      	str	r3, [r7, #4]
   20b62:	e9d7 2300 	ldrd	r2, r3, [r7]
   20b66:	2a01      	cmp	r2, #1
   20b68:	f173 0100 	sbcs.w	r1, r3, #0
   20b6c:	da03      	bge.n	20b76 <z_impl_k_timer_start+0x82>
   20b6e:	f04f 0201 	mov.w	r2, #1
   20b72:	f04f 0300 	mov.w	r3, #0
   20b76:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   20b7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   20b7e:	f06f 0001 	mvn.w	r0, #1
   20b82:	f04f 31ff 	mov.w	r1, #4294967295
   20b86:	1a84      	subs	r4, r0, r2
   20b88:	eb61 0503 	sbc.w	r5, r1, r3
   20b8c:	2c00      	cmp	r4, #0
   20b8e:	f175 0300 	sbcs.w	r3, r5, #0
   20b92:	da11      	bge.n	20bb8 <z_impl_k_timer_start+0xc4>
		duration.ticks = MAX(duration.ticks - 1, 0);
   20b94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   20b98:	f112 3aff 	adds.w	sl, r2, #4294967295
   20b9c:	f143 3bff 	adc.w	fp, r3, #4294967295
   20ba0:	4652      	mov	r2, sl
   20ba2:	465b      	mov	r3, fp
   20ba4:	2a00      	cmp	r2, #0
   20ba6:	f173 0100 	sbcs.w	r1, r3, #0
   20baa:	da03      	bge.n	20bb4 <z_impl_k_timer_start+0xc0>
   20bac:	f04f 0200 	mov.w	r2, #0
   20bb0:	f04f 0300 	mov.w	r3, #0
   20bb4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}

	(void)z_abort_timeout(&timer->timeout);
   20bb8:	697b      	ldr	r3, [r7, #20]
   20bba:	4618      	mov	r0, r3
   20bbc:	f7ff fc0e 	bl	203dc <z_abort_timeout>
	timer->period = period;
   20bc0:	6979      	ldr	r1, [r7, #20]
   20bc2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   20bc6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	timer->status = 0U;
   20bca:	697b      	ldr	r3, [r7, #20]
   20bcc:	2200      	movs	r2, #0
   20bce:	631a      	str	r2, [r3, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20bd0:	6978      	ldr	r0, [r7, #20]
   20bd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   20bd6:	4903      	ldr	r1, [pc, #12]	; (20be4 <z_impl_k_timer_start+0xf0>)
   20bd8:	f7ff faba 	bl	20150 <z_add_timeout>
		     duration);
}
   20bdc:	3718      	adds	r7, #24
   20bde:	46bd      	mov	sp, r7
   20be0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
   20be4:	00020a59 	.word	0x00020a59

00020be8 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   20be8:	b580      	push	{r7, lr}
   20bea:	af00      	add	r7, sp, #0
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
   20bec:	4b08      	ldr	r3, [pc, #32]	; (20c10 <boot_banner+0x28>)
   20bee:	681b      	ldr	r3, [r3, #0]
   20bf0:	2b00      	cmp	r3, #0
   20bf2:	d005      	beq.n	20c00 <boot_banner+0x18>
		printk("***** delaying boot " STRINGIFY(
   20bf4:	4807      	ldr	r0, [pc, #28]	; (20c14 <boot_banner+0x2c>)
   20bf6:	f000 fa37 	bl	21068 <printk>
			CONFIG_BOOT_DELAY) "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
   20bfa:	2000      	movs	r0, #0
   20bfc:	f008 fa23 	bl	29046 <k_busy_wait>
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   20c00:	4a05      	ldr	r2, [pc, #20]	; (20c18 <boot_banner+0x30>)
   20c02:	4906      	ldr	r1, [pc, #24]	; (20c1c <boot_banner+0x34>)
   20c04:	4806      	ldr	r0, [pc, #24]	; (20c20 <boot_banner+0x38>)
   20c06:	f000 fa2f 	bl	21068 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   20c0a:	bf00      	nop
   20c0c:	bd80      	pop	{r7, pc}
   20c0e:	bf00      	nop
   20c10:	0002ce0c 	.word	0x0002ce0c
   20c14:	0002c9d8 	.word	0x0002c9d8
   20c18:	0002ca14 	.word	0x0002ca14
   20c1c:	0002ca18 	.word	0x0002ca18
   20c20:	0002ca28 	.word	0x0002ca28

00020c24 <k_is_user_context>:
 * Indicate whether the CPU is currently in user mode
 *
 * @return true if the CPU is currently running with user permissions
 */
static inline bool k_is_user_context(void)
{
   20c24:	b480      	push	{r7}
   20c26:	af00      	add	r7, sp, #0
#ifdef CONFIG_USERSPACE
	return arch_is_user_context();
#else
	return false;
   20c28:	2300      	movs	r3, #0
#endif
}
   20c2a:	4618      	mov	r0, r3
   20c2c:	46bd      	mov	sp, r7
   20c2e:	bc80      	pop	{r7}
   20c30:	4770      	bx	lr

00020c32 <k_ms_to_ticks_ceil64>:
{
   20c32:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   20c36:	b08c      	sub	sp, #48	; 0x30
   20c38:	af00      	add	r7, sp, #0
   20c3a:	e9c7 0100 	strd	r0, r1, [r7]
   20c3e:	e9d7 2300 	ldrd	r2, r3, [r7]
   20c42:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   20c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20c4a:	627b      	str	r3, [r7, #36]	; 0x24
   20c4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   20c50:	623b      	str	r3, [r7, #32]
   20c52:	2301      	movs	r3, #1
   20c54:	77fb      	strb	r3, [r7, #31]
   20c56:	2300      	movs	r3, #0
   20c58:	77bb      	strb	r3, [r7, #30]
   20c5a:	2301      	movs	r3, #1
   20c5c:	777b      	strb	r3, [r7, #29]
   20c5e:	2300      	movs	r3, #0
   20c60:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   20c62:	7ffb      	ldrb	r3, [r7, #31]
   20c64:	2b00      	cmp	r3, #0
   20c66:	d00f      	beq.n	20c88 <k_ms_to_ticks_ceil64+0x56>
	bool mul_ratio = const_hz &&
   20c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20c6a:	6a3b      	ldr	r3, [r7, #32]
   20c6c:	429a      	cmp	r2, r3
   20c6e:	d20b      	bcs.n	20c88 <k_ms_to_ticks_ceil64+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   20c70:	6a3b      	ldr	r3, [r7, #32]
   20c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20c74:	fbb3 f2f2 	udiv	r2, r3, r2
   20c78:	6a79      	ldr	r1, [r7, #36]	; 0x24
   20c7a:	fb01 f202 	mul.w	r2, r1, r2
   20c7e:	1a9b      	subs	r3, r3, r2
   20c80:	2b00      	cmp	r3, #0
   20c82:	d101      	bne.n	20c88 <k_ms_to_ticks_ceil64+0x56>
   20c84:	2301      	movs	r3, #1
   20c86:	e000      	b.n	20c8a <k_ms_to_ticks_ceil64+0x58>
   20c88:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   20c8a:	76fb      	strb	r3, [r7, #27]
   20c8c:	7efb      	ldrb	r3, [r7, #27]
   20c8e:	f003 0301 	and.w	r3, r3, #1
   20c92:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   20c94:	7ffb      	ldrb	r3, [r7, #31]
   20c96:	2b00      	cmp	r3, #0
   20c98:	d00f      	beq.n	20cba <k_ms_to_ticks_ceil64+0x88>
	bool div_ratio = const_hz &&
   20c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20c9c:	6a3b      	ldr	r3, [r7, #32]
   20c9e:	429a      	cmp	r2, r3
   20ca0:	d90b      	bls.n	20cba <k_ms_to_ticks_ceil64+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   20ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20ca4:	6a3a      	ldr	r2, [r7, #32]
   20ca6:	fbb3 f2f2 	udiv	r2, r3, r2
   20caa:	6a39      	ldr	r1, [r7, #32]
   20cac:	fb01 f202 	mul.w	r2, r1, r2
   20cb0:	1a9b      	subs	r3, r3, r2
   20cb2:	2b00      	cmp	r3, #0
   20cb4:	d101      	bne.n	20cba <k_ms_to_ticks_ceil64+0x88>
   20cb6:	2301      	movs	r3, #1
   20cb8:	e000      	b.n	20cbc <k_ms_to_ticks_ceil64+0x8a>
   20cba:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   20cbc:	76bb      	strb	r3, [r7, #26]
   20cbe:	7ebb      	ldrb	r3, [r7, #26]
   20cc0:	f003 0301 	and.w	r3, r3, #1
   20cc4:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   20cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20cc8:	6a3b      	ldr	r3, [r7, #32]
   20cca:	429a      	cmp	r2, r3
   20ccc:	d10a      	bne.n	20ce4 <k_ms_to_ticks_ceil64+0xb2>
		return result32 ? ((uint32_t)t) : t;
   20cce:	7fbb      	ldrb	r3, [r7, #30]
   20cd0:	2b00      	cmp	r3, #0
   20cd2:	d004      	beq.n	20cde <k_ms_to_ticks_ceil64+0xac>
   20cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20cd6:	461a      	mov	r2, r3
   20cd8:	f04f 0300 	mov.w	r3, #0
   20cdc:	e0c7      	b.n	20e6e <k_ms_to_ticks_ceil64+0x23c>
   20cde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   20ce2:	e0c4      	b.n	20e6e <k_ms_to_ticks_ceil64+0x23c>
	uint64_t off = 0;
   20ce4:	f04f 0200 	mov.w	r2, #0
   20ce8:	f04f 0300 	mov.w	r3, #0
   20cec:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   20cf0:	7efb      	ldrb	r3, [r7, #27]
   20cf2:	f083 0301 	eor.w	r3, r3, #1
   20cf6:	b2db      	uxtb	r3, r3
   20cf8:	2b00      	cmp	r3, #0
   20cfa:	d01d      	beq.n	20d38 <k_ms_to_ticks_ceil64+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   20cfc:	7ebb      	ldrb	r3, [r7, #26]
   20cfe:	2b00      	cmp	r3, #0
   20d00:	d004      	beq.n	20d0c <k_ms_to_ticks_ceil64+0xda>
   20d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20d04:	6a3b      	ldr	r3, [r7, #32]
   20d06:	fbb2 f3f3 	udiv	r3, r2, r3
   20d0a:	e000      	b.n	20d0e <k_ms_to_ticks_ceil64+0xdc>
   20d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20d0e:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   20d10:	7f7b      	ldrb	r3, [r7, #29]
   20d12:	2b00      	cmp	r3, #0
   20d14:	d006      	beq.n	20d24 <k_ms_to_ticks_ceil64+0xf2>
			off = rdivisor - 1U;
   20d16:	68fb      	ldr	r3, [r7, #12]
   20d18:	3b01      	subs	r3, #1
   20d1a:	461a      	mov	r2, r3
   20d1c:	f04f 0300 	mov.w	r3, #0
   20d20:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   20d24:	7f3b      	ldrb	r3, [r7, #28]
   20d26:	2b00      	cmp	r3, #0
   20d28:	d006      	beq.n	20d38 <k_ms_to_ticks_ceil64+0x106>
			off = rdivisor / 2U;
   20d2a:	68fb      	ldr	r3, [r7, #12]
   20d2c:	085b      	lsrs	r3, r3, #1
   20d2e:	461a      	mov	r2, r3
   20d30:	f04f 0300 	mov.w	r3, #0
   20d34:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   20d38:	7ebb      	ldrb	r3, [r7, #26]
   20d3a:	2b00      	cmp	r3, #0
   20d3c:	d02a      	beq.n	20d94 <k_ms_to_ticks_ceil64+0x162>
		t += off;
   20d3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   20d42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   20d46:	1884      	adds	r4, r0, r2
   20d48:	eb41 0503 	adc.w	r5, r1, r3
   20d4c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   20d50:	7fbb      	ldrb	r3, [r7, #30]
   20d52:	2b00      	cmp	r3, #0
   20d54:	d010      	beq.n	20d78 <k_ms_to_ticks_ceil64+0x146>
   20d56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   20d5a:	2b01      	cmp	r3, #1
   20d5c:	bf08      	it	eq
   20d5e:	2a00      	cmpeq	r2, #0
   20d60:	d20a      	bcs.n	20d78 <k_ms_to_ticks_ceil64+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
   20d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
   20d64:	6a79      	ldr	r1, [r7, #36]	; 0x24
   20d66:	6a3b      	ldr	r3, [r7, #32]
   20d68:	fbb1 f3f3 	udiv	r3, r1, r3
   20d6c:	fbb2 f3f3 	udiv	r3, r2, r3
   20d70:	461a      	mov	r2, r3
   20d72:	f04f 0300 	mov.w	r3, #0
   20d76:	e07a      	b.n	20e6e <k_ms_to_ticks_ceil64+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
   20d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20d7a:	6a3b      	ldr	r3, [r7, #32]
   20d7c:	fbb2 f3f3 	udiv	r3, r2, r3
   20d80:	461a      	mov	r2, r3
   20d82:	f04f 0300 	mov.w	r3, #0
   20d86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   20d8a:	f7ef fa57 	bl	1023c <__aeabi_uldivmod>
   20d8e:	4602      	mov	r2, r0
   20d90:	460b      	mov	r3, r1
   20d92:	e06c      	b.n	20e6e <k_ms_to_ticks_ceil64+0x23c>
	} else if (mul_ratio) {
   20d94:	7efb      	ldrb	r3, [r7, #27]
   20d96:	2b00      	cmp	r3, #0
   20d98:	d021      	beq.n	20dde <k_ms_to_ticks_ceil64+0x1ac>
		if (result32) {
   20d9a:	7fbb      	ldrb	r3, [r7, #30]
   20d9c:	2b00      	cmp	r3, #0
   20d9e:	d00a      	beq.n	20db6 <k_ms_to_ticks_ceil64+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
   20da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20da2:	6a39      	ldr	r1, [r7, #32]
   20da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20da6:	fbb1 f2f2 	udiv	r2, r1, r2
   20daa:	fb02 f303 	mul.w	r3, r2, r3
   20dae:	461a      	mov	r2, r3
   20db0:	f04f 0300 	mov.w	r3, #0
   20db4:	e05b      	b.n	20e6e <k_ms_to_ticks_ceil64+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
   20db6:	6a3a      	ldr	r2, [r7, #32]
   20db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20dba:	fbb2 f3f3 	udiv	r3, r2, r3
   20dbe:	461a      	mov	r2, r3
   20dc0:	f04f 0300 	mov.w	r3, #0
   20dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   20dc6:	fb03 f001 	mul.w	r0, r3, r1
   20dca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   20dcc:	fb02 f101 	mul.w	r1, r2, r1
   20dd0:	4401      	add	r1, r0
   20dd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   20dd4:	fba0 2302 	umull	r2, r3, r0, r2
   20dd8:	4419      	add	r1, r3
   20dda:	460b      	mov	r3, r1
   20ddc:	e047      	b.n	20e6e <k_ms_to_ticks_ceil64+0x23c>
		if (result32) {
   20dde:	7fbb      	ldrb	r3, [r7, #30]
   20de0:	2b00      	cmp	r3, #0
   20de2:	d024      	beq.n	20e2e <k_ms_to_ticks_ceil64+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   20de4:	6a3b      	ldr	r3, [r7, #32]
   20de6:	461a      	mov	r2, r3
   20de8:	f04f 0300 	mov.w	r3, #0
   20dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   20dee:	fb03 f001 	mul.w	r0, r3, r1
   20df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   20df4:	fb02 f101 	mul.w	r1, r2, r1
   20df8:	4401      	add	r1, r0
   20dfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   20dfc:	fba0 2302 	umull	r2, r3, r0, r2
   20e00:	4419      	add	r1, r3
   20e02:	460b      	mov	r3, r1
   20e04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   20e08:	eb12 0a00 	adds.w	sl, r2, r0
   20e0c:	eb43 0b01 	adc.w	fp, r3, r1
   20e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20e12:	461a      	mov	r2, r3
   20e14:	f04f 0300 	mov.w	r3, #0
   20e18:	4650      	mov	r0, sl
   20e1a:	4659      	mov	r1, fp
   20e1c:	f7ef fa0e 	bl	1023c <__aeabi_uldivmod>
   20e20:	4602      	mov	r2, r0
   20e22:	460b      	mov	r3, r1
   20e24:	4613      	mov	r3, r2
   20e26:	461a      	mov	r2, r3
   20e28:	f04f 0300 	mov.w	r3, #0
   20e2c:	e01f      	b.n	20e6e <k_ms_to_ticks_ceil64+0x23c>
			return (t * to_hz + off) / from_hz;
   20e2e:	6a3b      	ldr	r3, [r7, #32]
   20e30:	461a      	mov	r2, r3
   20e32:	f04f 0300 	mov.w	r3, #0
   20e36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   20e38:	fb03 f001 	mul.w	r0, r3, r1
   20e3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   20e3e:	fb02 f101 	mul.w	r1, r2, r1
   20e42:	4401      	add	r1, r0
   20e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   20e46:	fba0 2302 	umull	r2, r3, r0, r2
   20e4a:	4419      	add	r1, r3
   20e4c:	460b      	mov	r3, r1
   20e4e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   20e52:	eb12 0800 	adds.w	r8, r2, r0
   20e56:	eb43 0901 	adc.w	r9, r3, r1
   20e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20e5c:	461a      	mov	r2, r3
   20e5e:	f04f 0300 	mov.w	r3, #0
   20e62:	4640      	mov	r0, r8
   20e64:	4649      	mov	r1, r9
   20e66:	f7ef f9e9 	bl	1023c <__aeabi_uldivmod>
   20e6a:	4602      	mov	r2, r0
   20e6c:	460b      	mov	r3, r1
}
   20e6e:	4610      	mov	r0, r2
   20e70:	4619      	mov	r1, r3
   20e72:	3730      	adds	r7, #48	; 0x30
   20e74:	46bd      	mov	sp, r7
   20e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

00020e7a <k_msleep>:
{
   20e7a:	b580      	push	{r7, lr}
   20e7c:	b082      	sub	sp, #8
   20e7e:	af00      	add	r7, sp, #0
   20e80:	6078      	str	r0, [r7, #4]
	return k_sleep(Z_TIMEOUT_MS(ms));
   20e82:	687b      	ldr	r3, [r7, #4]
   20e84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   20e88:	461a      	mov	r2, r3
   20e8a:	ea4f 73e2 	mov.w	r3, r2, asr #31
   20e8e:	4610      	mov	r0, r2
   20e90:	4619      	mov	r1, r3
   20e92:	f7ff fece 	bl	20c32 <k_ms_to_ticks_ceil64>
   20e96:	4602      	mov	r2, r0
   20e98:	460b      	mov	r3, r1
   20e9a:	4610      	mov	r0, r2
   20e9c:	4619      	mov	r1, r3
   20e9e:	f000 f806 	bl	20eae <k_sleep>
   20ea2:	4601      	mov	r1, r0
   20ea4:	460b      	mov	r3, r1
}
   20ea6:	4618      	mov	r0, r3
   20ea8:	3708      	adds	r7, #8
   20eaa:	46bd      	mov	sp, r7
   20eac:	bd80      	pop	{r7, pc}

00020eae <k_sleep>:
}


extern int32_t z_impl_k_sleep(k_timeout_t timeout);
static inline int32_t k_sleep(k_timeout_t timeout)
{
   20eae:	b580      	push	{r7, lr}
   20eb0:	b082      	sub	sp, #8
   20eb2:	af00      	add	r7, sp, #0
   20eb4:	e9c7 0100 	strd	r0, r1, [r7]
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   20eb8:	e9d7 0100 	ldrd	r0, r1, [r7]
   20ebc:	f7fe ff1e 	bl	1fcfc <z_impl_k_sleep>
   20ec0:	4603      	mov	r3, r0
}
   20ec2:	4618      	mov	r0, r3
   20ec4:	3708      	adds	r7, #8
   20ec6:	46bd      	mov	sp, r7
   20ec8:	bd80      	pop	{r7, pc}

00020eca <device_get_binding>:
extern "C" {
#endif

extern const struct device * z_impl_device_get_binding(const char * name);
static inline const struct device * device_get_binding(const char * name)
{
   20eca:	b580      	push	{r7, lr}
   20ecc:	b082      	sub	sp, #8
   20ece:	af00      	add	r7, sp, #0
   20ed0:	6078      	str	r0, [r7, #4]
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   20ed2:	6878      	ldr	r0, [r7, #4]
   20ed4:	f7fa ffd0 	bl	1be78 <z_impl_device_get_binding>
   20ed8:	4603      	mov	r3, r0
}
   20eda:	4618      	mov	r0, r3
   20edc:	3708      	adds	r7, #8
   20ede:	46bd      	mov	sp, r7
   20ee0:	bd80      	pop	{r7, pc}

00020ee2 <uart_callback_set>:
 * @retval 0	    If successful, negative errno code otherwise.
 */
static inline int uart_callback_set(const struct device *dev,
				    uart_callback_t callback,
				    void *user_data)
{
   20ee2:	b480      	push	{r7}
   20ee4:	b085      	sub	sp, #20
   20ee6:	af00      	add	r7, sp, #0
   20ee8:	60f8      	str	r0, [r7, #12]
   20eea:	60b9      	str	r1, [r7, #8]
   20eec:	607a      	str	r2, [r7, #4]
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->callback_set(dev, callback, user_data);
#else
	return -ENOTSUP;
   20eee:	f06f 0385 	mvn.w	r3, #133	; 0x85
#endif
}
   20ef2:	4618      	mov	r0, r3
   20ef4:	3714      	adds	r7, #20
   20ef6:	46bd      	mov	sp, r7
   20ef8:	bc80      	pop	{r7}
   20efa:	4770      	bx	lr

00020efc <z_impl_uart_tx>:
		      int32_t timeout);

static inline int z_impl_uart_tx(const struct device *dev, const uint8_t *buf,
				 size_t len, int32_t timeout)

{
   20efc:	b480      	push	{r7}
   20efe:	b085      	sub	sp, #20
   20f00:	af00      	add	r7, sp, #0
   20f02:	60f8      	str	r0, [r7, #12]
   20f04:	60b9      	str	r1, [r7, #8]
   20f06:	607a      	str	r2, [r7, #4]
   20f08:	603b      	str	r3, [r7, #0]
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->tx(dev, buf, len, timeout);
#else
	return -ENOTSUP;
   20f0a:	f06f 0385 	mvn.w	r3, #133	; 0x85
#endif
}
   20f0e:	4618      	mov	r0, r3
   20f10:	3714      	adds	r7, #20
   20f12:	46bd      	mov	sp, r7
   20f14:	bc80      	pop	{r7}
   20f16:	4770      	bx	lr

00020f18 <z_impl_uart_rx_enable>:
			     int32_t timeout);

static inline int z_impl_uart_rx_enable(const struct device *dev,
					uint8_t *buf,
					size_t len, int32_t timeout)
{
   20f18:	b480      	push	{r7}
   20f1a:	b085      	sub	sp, #20
   20f1c:	af00      	add	r7, sp, #0
   20f1e:	60f8      	str	r0, [r7, #12]
   20f20:	60b9      	str	r1, [r7, #8]
   20f22:	607a      	str	r2, [r7, #4]
   20f24:	603b      	str	r3, [r7, #0]
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
#else
	return -ENOTSUP;
   20f26:	f06f 0385 	mvn.w	r3, #133	; 0x85
#endif
}
   20f2a:	4618      	mov	r0, r3
   20f2c:	3714      	adds	r7, #20
   20f2e:	46bd      	mov	sp, r7
   20f30:	bc80      	pop	{r7}
   20f32:	4770      	bx	lr

00020f34 <uart_rx_buf_rsp>:
 * @retval 0	    If successful, negative errno code otherwise.
 *
 */
static inline int uart_rx_buf_rsp(const struct device *dev, uint8_t *buf,
				  size_t len)
{
   20f34:	b480      	push	{r7}
   20f36:	b085      	sub	sp, #20
   20f38:	af00      	add	r7, sp, #0
   20f3a:	60f8      	str	r0, [r7, #12]
   20f3c:	60b9      	str	r1, [r7, #8]
   20f3e:	607a      	str	r2, [r7, #4]
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_buf_rsp(dev, buf, len);
#else
	return -ENOTSUP;
   20f40:	f06f 0385 	mvn.w	r3, #133	; 0x85
#endif
}
   20f44:	4618      	mov	r0, r3
   20f46:	3714      	adds	r7, #20
   20f48:	46bd      	mov	sp, r7
   20f4a:	bc80      	pop	{r7}
   20f4c:	4770      	bx	lr

00020f4e <z_impl_uart_poll_out>:
__syscall void uart_poll_out(const struct device *dev,
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
   20f4e:	b580      	push	{r7, lr}
   20f50:	b084      	sub	sp, #16
   20f52:	af00      	add	r7, sp, #0
   20f54:	6078      	str	r0, [r7, #4]
   20f56:	460b      	mov	r3, r1
   20f58:	70fb      	strb	r3, [r7, #3]
	const struct uart_driver_api *api =
   20f5a:	687b      	ldr	r3, [r7, #4]
   20f5c:	689b      	ldr	r3, [r3, #8]
   20f5e:	60fb      	str	r3, [r7, #12]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   20f60:	68fb      	ldr	r3, [r7, #12]
   20f62:	685b      	ldr	r3, [r3, #4]
   20f64:	78fa      	ldrb	r2, [r7, #3]
   20f66:	4611      	mov	r1, r2
   20f68:	6878      	ldr	r0, [r7, #4]
   20f6a:	4798      	blx	r3
}
   20f6c:	bf00      	nop
   20f6e:	3710      	adds	r7, #16
   20f70:	46bd      	mov	sp, r7
   20f72:	bd80      	pop	{r7, pc}

00020f74 <uart_tx>:
extern "C" {
#endif

extern int z_impl_uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout);
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
{
   20f74:	b580      	push	{r7, lr}
   20f76:	b084      	sub	sp, #16
   20f78:	af00      	add	r7, sp, #0
   20f7a:	60f8      	str	r0, [r7, #12]
   20f7c:	60b9      	str	r1, [r7, #8]
   20f7e:	607a      	str	r2, [r7, #4]
   20f80:	603b      	str	r3, [r7, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&timeout, K_SYSCALL_UART_TX);
	}
#endif
	compiler_barrier();
	return z_impl_uart_tx(dev, buf, len, timeout);
   20f82:	683b      	ldr	r3, [r7, #0]
   20f84:	687a      	ldr	r2, [r7, #4]
   20f86:	68b9      	ldr	r1, [r7, #8]
   20f88:	68f8      	ldr	r0, [r7, #12]
   20f8a:	f7ff ffb7 	bl	20efc <z_impl_uart_tx>
   20f8e:	4603      	mov	r3, r0
}
   20f90:	4618      	mov	r0, r3
   20f92:	3710      	adds	r7, #16
   20f94:	46bd      	mov	sp, r7
   20f96:	bd80      	pop	{r7, pc}

00020f98 <uart_rx_enable>:
}


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
{
   20f98:	b580      	push	{r7, lr}
   20f9a:	b084      	sub	sp, #16
   20f9c:	af00      	add	r7, sp, #0
   20f9e:	60f8      	str	r0, [r7, #12]
   20fa0:	60b9      	str	r1, [r7, #8]
   20fa2:	607a      	str	r2, [r7, #4]
   20fa4:	603b      	str	r3, [r7, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&timeout, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
   20fa6:	683b      	ldr	r3, [r7, #0]
   20fa8:	687a      	ldr	r2, [r7, #4]
   20faa:	68b9      	ldr	r1, [r7, #8]
   20fac:	68f8      	ldr	r0, [r7, #12]
   20fae:	f7ff ffb3 	bl	20f18 <z_impl_uart_rx_enable>
   20fb2:	4603      	mov	r3, r0
}
   20fb4:	4618      	mov	r0, r3
   20fb6:	3710      	adds	r7, #16
   20fb8:	46bd      	mov	sp, r7
   20fba:	bd80      	pop	{r7, pc}

00020fbc <uart_poll_out>:
}


extern void z_impl_uart_poll_out(const struct device * dev, unsigned char out_char);
static inline void uart_poll_out(const struct device * dev, unsigned char out_char)
{
   20fbc:	b580      	push	{r7, lr}
   20fbe:	b082      	sub	sp, #8
   20fc0:	af00      	add	r7, sp, #0
   20fc2:	6078      	str	r0, [r7, #4]
   20fc4:	460b      	mov	r3, r1
   20fc6:	70fb      	strb	r3, [r7, #3]
		arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&out_char, K_SYSCALL_UART_POLL_OUT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
   20fc8:	78fb      	ldrb	r3, [r7, #3]
   20fca:	4619      	mov	r1, r3
   20fcc:	6878      	ldr	r0, [r7, #4]
   20fce:	f7ff ffbe 	bl	20f4e <z_impl_uart_poll_out>
}
   20fd2:	bf00      	nop
   20fd4:	3708      	adds	r7, #8
   20fd6:	46bd      	mov	sp, r7
   20fd8:	bd80      	pop	{r7, pc}

00020fda <sys_notify_get_method>:
{
   20fda:	b480      	push	{r7}
   20fdc:	b085      	sub	sp, #20
   20fde:	af00      	add	r7, sp, #0
   20fe0:	6078      	str	r0, [r7, #4]
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   20fe2:	687b      	ldr	r3, [r7, #4]
   20fe4:	685b      	ldr	r3, [r3, #4]
   20fe6:	60fb      	str	r3, [r7, #12]
	return method & SYS_NOTIFY_METHOD_MASK;
   20fe8:	68fb      	ldr	r3, [r7, #12]
   20fea:	f003 0303 	and.w	r3, r3, #3
}
   20fee:	4618      	mov	r0, r3
   20ff0:	3714      	adds	r7, #20
   20ff2:	46bd      	mov	sp, r7
   20ff4:	bc80      	pop	{r7}
   20ff6:	4770      	bx	lr

00020ff8 <sys_notify_validate>:
{
   20ff8:	b580      	push	{r7, lr}
   20ffa:	b084      	sub	sp, #16
   20ffc:	af00      	add	r7, sp, #0
   20ffe:	6078      	str	r0, [r7, #4]
	int rv = 0;
   21000:	2300      	movs	r3, #0
   21002:	60fb      	str	r3, [r7, #12]
	if (notify == NULL) {
   21004:	687b      	ldr	r3, [r7, #4]
   21006:	2b00      	cmp	r3, #0
   21008:	d102      	bne.n	21010 <sys_notify_validate+0x18>
		return -EINVAL;
   2100a:	f06f 0315 	mvn.w	r3, #21
   2100e:	e01d      	b.n	2104c <sys_notify_validate+0x54>
	switch (sys_notify_get_method(notify)) {
   21010:	6878      	ldr	r0, [r7, #4]
   21012:	f7ff ffe2 	bl	20fda <sys_notify_get_method>
   21016:	4603      	mov	r3, r0
   21018:	2b01      	cmp	r3, #1
   2101a:	d00d      	beq.n	21038 <sys_notify_validate+0x40>
   2101c:	2b03      	cmp	r3, #3
   2101e:	d107      	bne.n	21030 <sys_notify_validate+0x38>
		if (notify->method.callback == NULL) {
   21020:	687b      	ldr	r3, [r7, #4]
   21022:	681b      	ldr	r3, [r3, #0]
   21024:	2b00      	cmp	r3, #0
   21026:	d109      	bne.n	2103c <sys_notify_validate+0x44>
			rv = -EINVAL;
   21028:	f06f 0315 	mvn.w	r3, #21
   2102c:	60fb      	str	r3, [r7, #12]
		break;
   2102e:	e005      	b.n	2103c <sys_notify_validate+0x44>
		rv = -EINVAL;
   21030:	f06f 0315 	mvn.w	r3, #21
   21034:	60fb      	str	r3, [r7, #12]
		break;
   21036:	e002      	b.n	2103e <sys_notify_validate+0x46>
		break;
   21038:	bf00      	nop
   2103a:	e000      	b.n	2103e <sys_notify_validate+0x46>
		break;
   2103c:	bf00      	nop
	if (rv == 0) {
   2103e:	68fb      	ldr	r3, [r7, #12]
   21040:	2b00      	cmp	r3, #0
   21042:	d102      	bne.n	2104a <sys_notify_validate+0x52>
		notify->result = 0;
   21044:	687b      	ldr	r3, [r7, #4]
   21046:	2200      	movs	r2, #0
   21048:	609a      	str	r2, [r3, #8]
	return rv;
   2104a:	68fb      	ldr	r3, [r7, #12]
}
   2104c:	4618      	mov	r0, r3
   2104e:	3710      	adds	r7, #16
   21050:	46bd      	mov	sp, r7
   21052:	bd80      	pop	{r7, pc}

00021054 <arch_printk_char_out>:
{
   21054:	b480      	push	{r7}
   21056:	b083      	sub	sp, #12
   21058:	af00      	add	r7, sp, #0
   2105a:	6078      	str	r0, [r7, #4]
	return 0;
   2105c:	2300      	movs	r3, #0
}
   2105e:	4618      	mov	r0, r3
   21060:	370c      	adds	r7, #12
   21062:	46bd      	mov	sp, r7
   21064:	bc80      	pop	{r7}
   21066:	4770      	bx	lr

00021068 <printk>:
{
   21068:	b40f      	push	{r0, r1, r2, r3}
   2106a:	b580      	push	{r7, lr}
   2106c:	b082      	sub	sp, #8
   2106e:	af00      	add	r7, sp, #0
	va_start(ap, fmt);
   21070:	f107 0314 	add.w	r3, r7, #20
   21074:	607b      	str	r3, [r7, #4]
		vprintk(fmt, ap);
   21076:	6879      	ldr	r1, [r7, #4]
   21078:	6938      	ldr	r0, [r7, #16]
   2107a:	f7ef fc8f 	bl	1099c <vprintk>
}
   2107e:	bf00      	nop
   21080:	3708      	adds	r7, #8
   21082:	46bd      	mov	sp, r7
   21084:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   21088:	b004      	add	sp, #16
   2108a:	4770      	bx	lr

0002108c <str_out>:
{
   2108c:	b480      	push	{r7}
   2108e:	b083      	sub	sp, #12
   21090:	af00      	add	r7, sp, #0
   21092:	6078      	str	r0, [r7, #4]
   21094:	6039      	str	r1, [r7, #0]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   21096:	683b      	ldr	r3, [r7, #0]
   21098:	681b      	ldr	r3, [r3, #0]
   2109a:	2b00      	cmp	r3, #0
   2109c:	d005      	beq.n	210aa <str_out+0x1e>
   2109e:	683b      	ldr	r3, [r7, #0]
   210a0:	689a      	ldr	r2, [r3, #8]
   210a2:	683b      	ldr	r3, [r7, #0]
   210a4:	685b      	ldr	r3, [r3, #4]
   210a6:	429a      	cmp	r2, r3
   210a8:	db06      	blt.n	210b8 <str_out+0x2c>
		ctx->count++;
   210aa:	683b      	ldr	r3, [r7, #0]
   210ac:	689b      	ldr	r3, [r3, #8]
   210ae:	1c5a      	adds	r2, r3, #1
   210b0:	683b      	ldr	r3, [r7, #0]
   210b2:	609a      	str	r2, [r3, #8]
		return c;
   210b4:	687b      	ldr	r3, [r7, #4]
   210b6:	e01d      	b.n	210f4 <str_out+0x68>
	if (ctx->count == ctx->max - 1) {
   210b8:	683b      	ldr	r3, [r7, #0]
   210ba:	689a      	ldr	r2, [r3, #8]
   210bc:	683b      	ldr	r3, [r7, #0]
   210be:	685b      	ldr	r3, [r3, #4]
   210c0:	3b01      	subs	r3, #1
   210c2:	429a      	cmp	r2, r3
   210c4:	d10a      	bne.n	210dc <str_out+0x50>
		ctx->str[ctx->count++] = '\0';
   210c6:	683b      	ldr	r3, [r7, #0]
   210c8:	681a      	ldr	r2, [r3, #0]
   210ca:	683b      	ldr	r3, [r7, #0]
   210cc:	689b      	ldr	r3, [r3, #8]
   210ce:	1c58      	adds	r0, r3, #1
   210d0:	6839      	ldr	r1, [r7, #0]
   210d2:	6088      	str	r0, [r1, #8]
   210d4:	4413      	add	r3, r2
   210d6:	2200      	movs	r2, #0
   210d8:	701a      	strb	r2, [r3, #0]
   210da:	e00a      	b.n	210f2 <str_out+0x66>
		ctx->str[ctx->count++] = c;
   210dc:	683b      	ldr	r3, [r7, #0]
   210de:	681a      	ldr	r2, [r3, #0]
   210e0:	683b      	ldr	r3, [r7, #0]
   210e2:	689b      	ldr	r3, [r3, #8]
   210e4:	1c58      	adds	r0, r3, #1
   210e6:	6839      	ldr	r1, [r7, #0]
   210e8:	6088      	str	r0, [r1, #8]
   210ea:	4413      	add	r3, r2
   210ec:	687a      	ldr	r2, [r7, #4]
   210ee:	b2d2      	uxtb	r2, r2
   210f0:	701a      	strb	r2, [r3, #0]
	return c;
   210f2:	687b      	ldr	r3, [r7, #4]
}
   210f4:	4618      	mov	r0, r3
   210f6:	370c      	adds	r7, #12
   210f8:	46bd      	mov	sp, r7
   210fa:	bc80      	pop	{r7}
   210fc:	4770      	bx	lr

000210fe <snprintk>:
{
   210fe:	b40c      	push	{r2, r3}
   21100:	b580      	push	{r7, lr}
   21102:	b084      	sub	sp, #16
   21104:	af00      	add	r7, sp, #0
   21106:	6078      	str	r0, [r7, #4]
   21108:	6039      	str	r1, [r7, #0]
	va_start(ap, fmt);
   2110a:	f107 031c 	add.w	r3, r7, #28
   2110e:	60bb      	str	r3, [r7, #8]
	ret = vsnprintk(str, size, fmt, ap);
   21110:	68bb      	ldr	r3, [r7, #8]
   21112:	69ba      	ldr	r2, [r7, #24]
   21114:	6839      	ldr	r1, [r7, #0]
   21116:	6878      	ldr	r0, [r7, #4]
   21118:	f7ef fc54 	bl	109c4 <vsnprintk>
   2111c:	60f8      	str	r0, [r7, #12]
	return ret;
   2111e:	68fb      	ldr	r3, [r7, #12]
}
   21120:	4618      	mov	r0, r3
   21122:	3710      	adds	r7, #16
   21124:	46bd      	mov	sp, r7
   21126:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
   2112a:	b002      	add	sp, #8
   2112c:	4770      	bx	lr

0002112e <sys_slist_init>:
 * @brief Initialize a list
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
   2112e:	b480      	push	{r7}
   21130:	b083      	sub	sp, #12
   21132:	af00      	add	r7, sp, #0
   21134:	6078      	str	r0, [r7, #4]
	list->head = NULL;
   21136:	687b      	ldr	r3, [r7, #4]
   21138:	2200      	movs	r2, #0
   2113a:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   2113c:	687b      	ldr	r3, [r7, #4]
   2113e:	2200      	movs	r2, #0
   21140:	605a      	str	r2, [r3, #4]
}
   21142:	bf00      	nop
   21144:	370c      	adds	r7, #12
   21146:	46bd      	mov	sp, r7
   21148:	bc80      	pop	{r7}
   2114a:	4770      	bx	lr

0002114c <z_snode_next_peek>:

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
   2114c:	b480      	push	{r7}
   2114e:	b083      	sub	sp, #12
   21150:	af00      	add	r7, sp, #0
   21152:	6078      	str	r0, [r7, #4]
	return node->next;
   21154:	687b      	ldr	r3, [r7, #4]
   21156:	681b      	ldr	r3, [r3, #0]
}
   21158:	4618      	mov	r0, r3
   2115a:	370c      	adds	r7, #12
   2115c:	46bd      	mov	sp, r7
   2115e:	bc80      	pop	{r7}
   21160:	4770      	bx	lr

00021162 <z_snode_next_set>:

static inline void z_snode_next_set(sys_snode_t *parent, sys_snode_t *child)
{
   21162:	b480      	push	{r7}
   21164:	b083      	sub	sp, #12
   21166:	af00      	add	r7, sp, #0
   21168:	6078      	str	r0, [r7, #4]
   2116a:	6039      	str	r1, [r7, #0]
	parent->next = child;
   2116c:	687b      	ldr	r3, [r7, #4]
   2116e:	683a      	ldr	r2, [r7, #0]
   21170:	601a      	str	r2, [r3, #0]
}
   21172:	bf00      	nop
   21174:	370c      	adds	r7, #12
   21176:	46bd      	mov	sp, r7
   21178:	bc80      	pop	{r7}
   2117a:	4770      	bx	lr

0002117c <z_slist_head_set>:

static inline void z_slist_head_set(sys_slist_t *list, sys_snode_t *node)
{
   2117c:	b480      	push	{r7}
   2117e:	b083      	sub	sp, #12
   21180:	af00      	add	r7, sp, #0
   21182:	6078      	str	r0, [r7, #4]
   21184:	6039      	str	r1, [r7, #0]
	list->head = node;
   21186:	687b      	ldr	r3, [r7, #4]
   21188:	683a      	ldr	r2, [r7, #0]
   2118a:	601a      	str	r2, [r3, #0]
}
   2118c:	bf00      	nop
   2118e:	370c      	adds	r7, #12
   21190:	46bd      	mov	sp, r7
   21192:	bc80      	pop	{r7}
   21194:	4770      	bx	lr

00021196 <z_slist_tail_set>:

static inline void z_slist_tail_set(sys_slist_t *list, sys_snode_t *node)
{
   21196:	b480      	push	{r7}
   21198:	b083      	sub	sp, #12
   2119a:	af00      	add	r7, sp, #0
   2119c:	6078      	str	r0, [r7, #4]
   2119e:	6039      	str	r1, [r7, #0]
	list->tail = node;
   211a0:	687b      	ldr	r3, [r7, #4]
   211a2:	683a      	ldr	r2, [r7, #0]
   211a4:	605a      	str	r2, [r3, #4]
}
   211a6:	bf00      	nop
   211a8:	370c      	adds	r7, #12
   211aa:	46bd      	mov	sp, r7
   211ac:	bc80      	pop	{r7}
   211ae:	4770      	bx	lr

000211b0 <sys_slist_peek_head>:
 * @param list A point on the list to peek the first node from
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
   211b0:	b480      	push	{r7}
   211b2:	b083      	sub	sp, #12
   211b4:	af00      	add	r7, sp, #0
   211b6:	6078      	str	r0, [r7, #4]
	return list->head;
   211b8:	687b      	ldr	r3, [r7, #4]
   211ba:	681b      	ldr	r3, [r3, #0]
}
   211bc:	4618      	mov	r0, r3
   211be:	370c      	adds	r7, #12
   211c0:	46bd      	mov	sp, r7
   211c2:	bc80      	pop	{r7}
   211c4:	4770      	bx	lr

000211c6 <sys_slist_peek_tail>:
 * @param list A point on the list to peek the last node from
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
   211c6:	b480      	push	{r7}
   211c8:	b083      	sub	sp, #12
   211ca:	af00      	add	r7, sp, #0
   211cc:	6078      	str	r0, [r7, #4]
	return list->tail;
   211ce:	687b      	ldr	r3, [r7, #4]
   211d0:	685b      	ldr	r3, [r3, #4]
}
   211d2:	4618      	mov	r0, r3
   211d4:	370c      	adds	r7, #12
   211d6:	46bd      	mov	sp, r7
   211d8:	bc80      	pop	{r7}
   211da:	4770      	bx	lr

000211dc <sys_slist_is_empty>:
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
   211dc:	b580      	push	{r7, lr}
   211de:	b082      	sub	sp, #8
   211e0:	af00      	add	r7, sp, #0
   211e2:	6078      	str	r0, [r7, #4]
   211e4:	6878      	ldr	r0, [r7, #4]
   211e6:	f7ff ffe3 	bl	211b0 <sys_slist_peek_head>
   211ea:	4603      	mov	r3, r0
   211ec:	2b00      	cmp	r3, #0
   211ee:	bf0c      	ite	eq
   211f0:	2301      	moveq	r3, #1
   211f2:	2300      	movne	r3, #0
   211f4:	b2db      	uxtb	r3, r3
   211f6:	4618      	mov	r0, r3
   211f8:	3708      	adds	r7, #8
   211fa:	46bd      	mov	sp, r7
   211fc:	bd80      	pop	{r7, pc}

000211fe <sys_slist_peek_next_no_check>:
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   211fe:	b580      	push	{r7, lr}
   21200:	b082      	sub	sp, #8
   21202:	af00      	add	r7, sp, #0
   21204:	6078      	str	r0, [r7, #4]
   21206:	6878      	ldr	r0, [r7, #4]
   21208:	f7ff ffa0 	bl	2114c <z_snode_next_peek>
   2120c:	4603      	mov	r3, r0
   2120e:	4618      	mov	r0, r3
   21210:	3708      	adds	r7, #8
   21212:	46bd      	mov	sp, r7
   21214:	bd80      	pop	{r7, pc}

00021216 <sys_slist_peek_next>:
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   21216:	b580      	push	{r7, lr}
   21218:	b082      	sub	sp, #8
   2121a:	af00      	add	r7, sp, #0
   2121c:	6078      	str	r0, [r7, #4]
   2121e:	687b      	ldr	r3, [r7, #4]
   21220:	2b00      	cmp	r3, #0
   21222:	d004      	beq.n	2122e <sys_slist_peek_next+0x18>
   21224:	6878      	ldr	r0, [r7, #4]
   21226:	f7ff ffea 	bl	211fe <sys_slist_peek_next_no_check>
   2122a:	4603      	mov	r3, r0
   2122c:	e000      	b.n	21230 <sys_slist_peek_next+0x1a>
   2122e:	2300      	movs	r3, #0
   21230:	4618      	mov	r0, r3
   21232:	3708      	adds	r7, #8
   21234:	46bd      	mov	sp, r7
   21236:	bd80      	pop	{r7, pc}

00021238 <sys_slist_append>:
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   21238:	b580      	push	{r7, lr}
   2123a:	b082      	sub	sp, #8
   2123c:	af00      	add	r7, sp, #0
   2123e:	6078      	str	r0, [r7, #4]
   21240:	6039      	str	r1, [r7, #0]
   21242:	2100      	movs	r1, #0
   21244:	6838      	ldr	r0, [r7, #0]
   21246:	f7ff ff8c 	bl	21162 <z_snode_next_set>
   2124a:	6878      	ldr	r0, [r7, #4]
   2124c:	f7ff ffbb 	bl	211c6 <sys_slist_peek_tail>
   21250:	4603      	mov	r3, r0
   21252:	2b00      	cmp	r3, #0
   21254:	d108      	bne.n	21268 <sys_slist_append+0x30>
   21256:	6839      	ldr	r1, [r7, #0]
   21258:	6878      	ldr	r0, [r7, #4]
   2125a:	f7ff ff9c 	bl	21196 <z_slist_tail_set>
   2125e:	6839      	ldr	r1, [r7, #0]
   21260:	6878      	ldr	r0, [r7, #4]
   21262:	f7ff ff8b 	bl	2117c <z_slist_head_set>
   21266:	e00b      	b.n	21280 <sys_slist_append+0x48>
   21268:	6878      	ldr	r0, [r7, #4]
   2126a:	f7ff ffac 	bl	211c6 <sys_slist_peek_tail>
   2126e:	4603      	mov	r3, r0
   21270:	6839      	ldr	r1, [r7, #0]
   21272:	4618      	mov	r0, r3
   21274:	f7ff ff75 	bl	21162 <z_snode_next_set>
   21278:	6839      	ldr	r1, [r7, #0]
   2127a:	6878      	ldr	r0, [r7, #4]
   2127c:	f7ff ff8b 	bl	21196 <z_slist_tail_set>
   21280:	bf00      	nop
   21282:	3708      	adds	r7, #8
   21284:	46bd      	mov	sp, r7
   21286:	bd80      	pop	{r7, pc}

00021288 <sys_slist_get_not_empty>:
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21288:	b580      	push	{r7, lr}
   2128a:	b084      	sub	sp, #16
   2128c:	af00      	add	r7, sp, #0
   2128e:	6078      	str	r0, [r7, #4]
   21290:	6878      	ldr	r0, [r7, #4]
   21292:	f7ff ff8d 	bl	211b0 <sys_slist_peek_head>
   21296:	60f8      	str	r0, [r7, #12]
   21298:	68f8      	ldr	r0, [r7, #12]
   2129a:	f7ff ff57 	bl	2114c <z_snode_next_peek>
   2129e:	4603      	mov	r3, r0
   212a0:	4619      	mov	r1, r3
   212a2:	6878      	ldr	r0, [r7, #4]
   212a4:	f7ff ff6a 	bl	2117c <z_slist_head_set>
   212a8:	6878      	ldr	r0, [r7, #4]
   212aa:	f7ff ff8c 	bl	211c6 <sys_slist_peek_tail>
   212ae:	4602      	mov	r2, r0
   212b0:	68fb      	ldr	r3, [r7, #12]
   212b2:	4293      	cmp	r3, r2
   212b4:	d107      	bne.n	212c6 <sys_slist_get_not_empty+0x3e>
   212b6:	6878      	ldr	r0, [r7, #4]
   212b8:	f7ff ff7a 	bl	211b0 <sys_slist_peek_head>
   212bc:	4603      	mov	r3, r0
   212be:	4619      	mov	r1, r3
   212c0:	6878      	ldr	r0, [r7, #4]
   212c2:	f7ff ff68 	bl	21196 <z_slist_tail_set>
   212c6:	68fb      	ldr	r3, [r7, #12]
   212c8:	4618      	mov	r0, r3
   212ca:	3710      	adds	r7, #16
   212cc:	46bd      	mov	sp, r7
   212ce:	bd80      	pop	{r7, pc}

000212d0 <set_state>:
{
   212d0:	b480      	push	{r7}
   212d2:	b083      	sub	sp, #12
   212d4:	af00      	add	r7, sp, #0
   212d6:	6078      	str	r0, [r7, #4]
   212d8:	6039      	str	r1, [r7, #0]
	mgr->flags = (state & ONOFF_STATE_MASK)
   212da:	683b      	ldr	r3, [r7, #0]
   212dc:	b29b      	uxth	r3, r3
   212de:	f003 0307 	and.w	r3, r3, #7
   212e2:	b29a      	uxth	r2, r3
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   212e4:	687b      	ldr	r3, [r7, #4]
   212e6:	8b9b      	ldrh	r3, [r3, #28]
   212e8:	f023 0307 	bic.w	r3, r3, #7
   212ec:	b29b      	uxth	r3, r3
   212ee:	4313      	orrs	r3, r2
   212f0:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   212f2:	687b      	ldr	r3, [r7, #4]
   212f4:	839a      	strh	r2, [r3, #28]
}
   212f6:	bf00      	nop
   212f8:	370c      	adds	r7, #12
   212fa:	46bd      	mov	sp, r7
   212fc:	bc80      	pop	{r7}
   212fe:	4770      	bx	lr

00021300 <validate_args>:
{
   21300:	b580      	push	{r7, lr}
   21302:	b084      	sub	sp, #16
   21304:	af00      	add	r7, sp, #0
   21306:	6078      	str	r0, [r7, #4]
   21308:	6039      	str	r1, [r7, #0]
	if ((mgr == NULL) || (cli == NULL)) {
   2130a:	687b      	ldr	r3, [r7, #4]
   2130c:	2b00      	cmp	r3, #0
   2130e:	d002      	beq.n	21316 <validate_args+0x16>
   21310:	683b      	ldr	r3, [r7, #0]
   21312:	2b00      	cmp	r3, #0
   21314:	d102      	bne.n	2131c <validate_args+0x1c>
		return -EINVAL;
   21316:	f06f 0315 	mvn.w	r3, #21
   2131a:	e012      	b.n	21342 <validate_args+0x42>
	int rv = sys_notify_validate(&cli->notify);
   2131c:	683b      	ldr	r3, [r7, #0]
   2131e:	3304      	adds	r3, #4
   21320:	4618      	mov	r0, r3
   21322:	f7ff fe69 	bl	20ff8 <sys_notify_validate>
   21326:	60f8      	str	r0, [r7, #12]
	if ((rv == 0)
   21328:	68fb      	ldr	r3, [r7, #12]
   2132a:	2b00      	cmp	r3, #0
   2132c:	d108      	bne.n	21340 <validate_args+0x40>
	    && ((cli->notify.flags
   2132e:	683b      	ldr	r3, [r7, #0]
   21330:	689b      	ldr	r3, [r3, #8]
		 & ~BIT_MASK(ONOFF_CLIENT_EXTENSION_POS)) != 0)) {
   21332:	f023 0303 	bic.w	r3, r3, #3
	    && ((cli->notify.flags
   21336:	2b00      	cmp	r3, #0
   21338:	d002      	beq.n	21340 <validate_args+0x40>
		rv = -EINVAL;
   2133a:	f06f 0315 	mvn.w	r3, #21
   2133e:	60fb      	str	r3, [r7, #12]
	return rv;
   21340:	68fb      	ldr	r3, [r7, #12]
}
   21342:	4618      	mov	r0, r3
   21344:	3710      	adds	r7, #16
   21346:	46bd      	mov	sp, r7
   21348:	bd80      	pop	{r7, pc}

0002134a <onoff_manager_init>:
{
   2134a:	b580      	push	{r7, lr}
   2134c:	b08a      	sub	sp, #40	; 0x28
   2134e:	af00      	add	r7, sp, #0
   21350:	6078      	str	r0, [r7, #4]
   21352:	6039      	str	r1, [r7, #0]
	if ((mgr == NULL)
   21354:	687b      	ldr	r3, [r7, #4]
   21356:	2b00      	cmp	r3, #0
   21358:	d00a      	beq.n	21370 <onoff_manager_init+0x26>
	    || (transitions == NULL)
   2135a:	683b      	ldr	r3, [r7, #0]
   2135c:	2b00      	cmp	r3, #0
   2135e:	d007      	beq.n	21370 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   21360:	683b      	ldr	r3, [r7, #0]
   21362:	681b      	ldr	r3, [r3, #0]
   21364:	2b00      	cmp	r3, #0
   21366:	d003      	beq.n	21370 <onoff_manager_init+0x26>
	    || (transitions->stop == NULL)) {
   21368:	683b      	ldr	r3, [r7, #0]
   2136a:	685b      	ldr	r3, [r3, #4]
   2136c:	2b00      	cmp	r3, #0
   2136e:	d102      	bne.n	21376 <onoff_manager_init+0x2c>
		return -EINVAL;
   21370:	f06f 0315 	mvn.w	r3, #21
   21374:	e00a      	b.n	2138c <onoff_manager_init+0x42>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   21376:	687b      	ldr	r3, [r7, #4]
   21378:	4618      	mov	r0, r3
   2137a:	2320      	movs	r3, #32
   2137c:	461a      	mov	r2, r3
   2137e:	2100      	movs	r1, #0
   21380:	f003 fa09 	bl	24796 <memset>
   21384:	687b      	ldr	r3, [r7, #4]
   21386:	683a      	ldr	r2, [r7, #0]
   21388:	611a      	str	r2, [r3, #16]
	return 0;
   2138a:	2300      	movs	r3, #0
}
   2138c:	4618      	mov	r0, r3
   2138e:	3728      	adds	r7, #40	; 0x28
   21390:	46bd      	mov	sp, r7
   21392:	bd80      	pop	{r7, pc}

00021394 <notify_monitors>:
{
   21394:	b590      	push	{r4, r7, lr}
   21396:	b089      	sub	sp, #36	; 0x24
   21398:	af00      	add	r7, sp, #0
   2139a:	60f8      	str	r0, [r7, #12]
   2139c:	60b9      	str	r1, [r7, #8]
   2139e:	607a      	str	r2, [r7, #4]
	sys_slist_t *mlist = &mgr->monitors;
   213a0:	68fb      	ldr	r3, [r7, #12]
   213a2:	3308      	adds	r3, #8
   213a4:	617b      	str	r3, [r7, #20]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   213a6:	6978      	ldr	r0, [r7, #20]
   213a8:	f7ff ff02 	bl	211b0 <sys_slist_peek_head>
   213ac:	4603      	mov	r3, r0
   213ae:	2b00      	cmp	r3, #0
   213b0:	d004      	beq.n	213bc <notify_monitors+0x28>
   213b2:	6978      	ldr	r0, [r7, #20]
   213b4:	f7ff fefc 	bl	211b0 <sys_slist_peek_head>
   213b8:	4603      	mov	r3, r0
   213ba:	e000      	b.n	213be <notify_monitors+0x2a>
   213bc:	2300      	movs	r3, #0
   213be:	61fb      	str	r3, [r7, #28]
   213c0:	69fb      	ldr	r3, [r7, #28]
   213c2:	2b00      	cmp	r3, #0
   213c4:	d00e      	beq.n	213e4 <notify_monitors+0x50>
   213c6:	69fb      	ldr	r3, [r7, #28]
   213c8:	4618      	mov	r0, r3
   213ca:	f7ff ff24 	bl	21216 <sys_slist_peek_next>
   213ce:	4603      	mov	r3, r0
   213d0:	2b00      	cmp	r3, #0
   213d2:	d005      	beq.n	213e0 <notify_monitors+0x4c>
   213d4:	69fb      	ldr	r3, [r7, #28]
   213d6:	4618      	mov	r0, r3
   213d8:	f7ff ff1d 	bl	21216 <sys_slist_peek_next>
   213dc:	4603      	mov	r3, r0
   213de:	e002      	b.n	213e6 <notify_monitors+0x52>
   213e0:	2300      	movs	r3, #0
   213e2:	e000      	b.n	213e6 <notify_monitors+0x52>
   213e4:	2300      	movs	r3, #0
   213e6:	61bb      	str	r3, [r7, #24]
   213e8:	e01c      	b.n	21424 <notify_monitors+0x90>
		mon->callback(mgr, mon, state, res);
   213ea:	69fb      	ldr	r3, [r7, #28]
   213ec:	685c      	ldr	r4, [r3, #4]
   213ee:	687b      	ldr	r3, [r7, #4]
   213f0:	68ba      	ldr	r2, [r7, #8]
   213f2:	69f9      	ldr	r1, [r7, #28]
   213f4:	68f8      	ldr	r0, [r7, #12]
   213f6:	47a0      	blx	r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   213f8:	69bb      	ldr	r3, [r7, #24]
   213fa:	61fb      	str	r3, [r7, #28]
   213fc:	69fb      	ldr	r3, [r7, #28]
   213fe:	2b00      	cmp	r3, #0
   21400:	d00e      	beq.n	21420 <notify_monitors+0x8c>
   21402:	69fb      	ldr	r3, [r7, #28]
   21404:	4618      	mov	r0, r3
   21406:	f7ff ff06 	bl	21216 <sys_slist_peek_next>
   2140a:	4603      	mov	r3, r0
   2140c:	2b00      	cmp	r3, #0
   2140e:	d005      	beq.n	2141c <notify_monitors+0x88>
   21410:	69fb      	ldr	r3, [r7, #28]
   21412:	4618      	mov	r0, r3
   21414:	f7ff feff 	bl	21216 <sys_slist_peek_next>
   21418:	4603      	mov	r3, r0
   2141a:	e002      	b.n	21422 <notify_monitors+0x8e>
   2141c:	2300      	movs	r3, #0
   2141e:	e000      	b.n	21422 <notify_monitors+0x8e>
   21420:	2300      	movs	r3, #0
   21422:	61bb      	str	r3, [r7, #24]
   21424:	69fb      	ldr	r3, [r7, #28]
   21426:	2b00      	cmp	r3, #0
   21428:	d1df      	bne.n	213ea <notify_monitors+0x56>
}
   2142a:	bf00      	nop
   2142c:	bf00      	nop
   2142e:	3724      	adds	r7, #36	; 0x24
   21430:	46bd      	mov	sp, r7
   21432:	bd90      	pop	{r4, r7, pc}

00021434 <notify_one>:
{
   21434:	b590      	push	{r4, r7, lr}
   21436:	b087      	sub	sp, #28
   21438:	af00      	add	r7, sp, #0
   2143a:	60f8      	str	r0, [r7, #12]
   2143c:	60b9      	str	r1, [r7, #8]
   2143e:	607a      	str	r2, [r7, #4]
   21440:	603b      	str	r3, [r7, #0]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   21442:	68bb      	ldr	r3, [r7, #8]
   21444:	3304      	adds	r3, #4
   21446:	6839      	ldr	r1, [r7, #0]
   21448:	4618      	mov	r0, r3
   2144a:	f7ef fa41 	bl	108d0 <sys_notify_finalize>
   2144e:	6178      	str	r0, [r7, #20]
	if (cb) {
   21450:	697b      	ldr	r3, [r7, #20]
   21452:	2b00      	cmp	r3, #0
   21454:	d005      	beq.n	21462 <notify_one+0x2e>
		cb(mgr, cli, state, res);
   21456:	697c      	ldr	r4, [r7, #20]
   21458:	683b      	ldr	r3, [r7, #0]
   2145a:	687a      	ldr	r2, [r7, #4]
   2145c:	68b9      	ldr	r1, [r7, #8]
   2145e:	68f8      	ldr	r0, [r7, #12]
   21460:	47a0      	blx	r4
}
   21462:	bf00      	nop
   21464:	371c      	adds	r7, #28
   21466:	46bd      	mov	sp, r7
   21468:	bd90      	pop	{r4, r7, pc}

0002146a <notify_all>:
{
   2146a:	b580      	push	{r7, lr}
   2146c:	b086      	sub	sp, #24
   2146e:	af00      	add	r7, sp, #0
   21470:	60f8      	str	r0, [r7, #12]
   21472:	60b9      	str	r1, [r7, #8]
   21474:	607a      	str	r2, [r7, #4]
   21476:	603b      	str	r3, [r7, #0]
	while (!sys_slist_is_empty(list)) {
   21478:	e00b      	b.n	21492 <notify_all+0x28>
		sys_snode_t *node = sys_slist_get_not_empty(list);
   2147a:	68b8      	ldr	r0, [r7, #8]
   2147c:	f7ff ff04 	bl	21288 <sys_slist_get_not_empty>
   21480:	6178      	str	r0, [r7, #20]
		struct onoff_client *cli =
   21482:	697b      	ldr	r3, [r7, #20]
   21484:	613b      	str	r3, [r7, #16]
		notify_one(mgr, cli, state, res);
   21486:	683b      	ldr	r3, [r7, #0]
   21488:	687a      	ldr	r2, [r7, #4]
   2148a:	6939      	ldr	r1, [r7, #16]
   2148c:	68f8      	ldr	r0, [r7, #12]
   2148e:	f7ff ffd1 	bl	21434 <notify_one>
	while (!sys_slist_is_empty(list)) {
   21492:	68b8      	ldr	r0, [r7, #8]
   21494:	f7ff fea2 	bl	211dc <sys_slist_is_empty>
   21498:	4603      	mov	r3, r0
   2149a:	f083 0301 	eor.w	r3, r3, #1
   2149e:	b2db      	uxtb	r3, r3
   214a0:	2b00      	cmp	r3, #0
   214a2:	d1ea      	bne.n	2147a <notify_all+0x10>
}
   214a4:	bf00      	nop
   214a6:	bf00      	nop
   214a8:	3718      	adds	r7, #24
   214aa:	46bd      	mov	sp, r7
   214ac:	bd80      	pop	{r7, pc}

000214ae <process_recheck>:
{
   214ae:	b580      	push	{r7, lr}
   214b0:	b084      	sub	sp, #16
   214b2:	af00      	add	r7, sp, #0
   214b4:	6078      	str	r0, [r7, #4]
	int evt = EVT_NOP;
   214b6:	2300      	movs	r3, #0
   214b8:	60fb      	str	r3, [r7, #12]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   214ba:	687b      	ldr	r3, [r7, #4]
   214bc:	8b9b      	ldrh	r3, [r3, #28]
   214be:	f003 0307 	and.w	r3, r3, #7
   214c2:	60bb      	str	r3, [r7, #8]
	if ((state == ONOFF_STATE_OFF)
   214c4:	68bb      	ldr	r3, [r7, #8]
   214c6:	2b00      	cmp	r3, #0
   214c8:	d10c      	bne.n	214e4 <process_recheck+0x36>
	    && !sys_slist_is_empty(&mgr->clients)) {
   214ca:	687b      	ldr	r3, [r7, #4]
   214cc:	4618      	mov	r0, r3
   214ce:	f7ff fe85 	bl	211dc <sys_slist_is_empty>
   214d2:	4603      	mov	r3, r0
   214d4:	f083 0301 	eor.w	r3, r3, #1
   214d8:	b2db      	uxtb	r3, r3
   214da:	2b00      	cmp	r3, #0
   214dc:	d002      	beq.n	214e4 <process_recheck+0x36>
		evt = EVT_START;
   214de:	2303      	movs	r3, #3
   214e0:	60fb      	str	r3, [r7, #12]
   214e2:	e018      	b.n	21516 <process_recheck+0x68>
	} else if ((state == ONOFF_STATE_ON)
   214e4:	68bb      	ldr	r3, [r7, #8]
   214e6:	2b02      	cmp	r3, #2
   214e8:	d106      	bne.n	214f8 <process_recheck+0x4a>
		   && (mgr->refs == 0U)) {
   214ea:	687b      	ldr	r3, [r7, #4]
   214ec:	8bdb      	ldrh	r3, [r3, #30]
   214ee:	2b00      	cmp	r3, #0
   214f0:	d102      	bne.n	214f8 <process_recheck+0x4a>
		evt = EVT_STOP;
   214f2:	2304      	movs	r3, #4
   214f4:	60fb      	str	r3, [r7, #12]
   214f6:	e00e      	b.n	21516 <process_recheck+0x68>
	} else if ((state == ONOFF_STATE_ERROR)
   214f8:	68bb      	ldr	r3, [r7, #8]
   214fa:	2b01      	cmp	r3, #1
   214fc:	d10b      	bne.n	21516 <process_recheck+0x68>
		   && !sys_slist_is_empty(&mgr->clients)) {
   214fe:	687b      	ldr	r3, [r7, #4]
   21500:	4618      	mov	r0, r3
   21502:	f7ff fe6b 	bl	211dc <sys_slist_is_empty>
   21506:	4603      	mov	r3, r0
   21508:	f083 0301 	eor.w	r3, r3, #1
   2150c:	b2db      	uxtb	r3, r3
   2150e:	2b00      	cmp	r3, #0
   21510:	d001      	beq.n	21516 <process_recheck+0x68>
		evt = EVT_RESET;
   21512:	2305      	movs	r3, #5
   21514:	60fb      	str	r3, [r7, #12]
	return evt;
   21516:	68fb      	ldr	r3, [r7, #12]
}
   21518:	4618      	mov	r0, r3
   2151a:	3710      	adds	r7, #16
   2151c:	46bd      	mov	sp, r7
   2151e:	bd80      	pop	{r7, pc}

00021520 <k_current_get>:
}


extern k_tid_t z_impl_k_current_get(void);
static inline k_tid_t k_current_get(void)
{
   21520:	b580      	push	{r7, lr}
   21522:	af00      	add	r7, sp, #0
		/* coverity[OVERRUN] */
		return (k_tid_t) arch_syscall_invoke0(K_SYSCALL_K_CURRENT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_current_get();
   21524:	f7fe fc42 	bl	1fdac <z_impl_k_current_get>
   21528:	4603      	mov	r3, r0
}
   2152a:	4618      	mov	r0, r3
   2152c:	bd80      	pop	{r7, pc}

0002152e <k_thread_abort>:


extern void z_impl_k_thread_abort(k_tid_t thread);
static inline void k_thread_abort(k_tid_t thread)
{
   2152e:	b580      	push	{r7, lr}
   21530:	b082      	sub	sp, #8
   21532:	af00      	add	r7, sp, #0
   21534:	6078      	str	r0, [r7, #4]
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_ABORT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_abort(thread);
   21536:	6878      	ldr	r0, [r7, #4]
   21538:	f7f6 f82e 	bl	17598 <z_impl_k_thread_abort>
}
   2153c:	bf00      	nop
   2153e:	3708      	adds	r7, #8
   21540:	46bd      	mov	sp, r7
   21542:	bd80      	pop	{r7, pc}

00021544 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   21544:	b580      	push	{r7, lr}
   21546:	b084      	sub	sp, #16
   21548:	af00      	add	r7, sp, #0
   2154a:	60f8      	str	r0, [r7, #12]
   2154c:	60b9      	str	r1, [r7, #8]
   2154e:	607a      	str	r2, [r7, #4]
   21550:	603b      	str	r3, [r7, #0]
	entry(p1, p2, p3);
   21552:	68fb      	ldr	r3, [r7, #12]
   21554:	683a      	ldr	r2, [r7, #0]
   21556:	6879      	ldr	r1, [r7, #4]
   21558:	68b8      	ldr	r0, [r7, #8]
   2155a:	4798      	blx	r3

	k_thread_abort(k_current_get());
   2155c:	f7ff ffe0 	bl	21520 <k_current_get>
   21560:	4603      	mov	r3, r0
   21562:	4618      	mov	r0, r3
   21564:	f7ff ffe3 	bl	2152e <k_thread_abort>

00021568 <big_heap_chunks>:
	uint32_t avail_buckets;
	struct z_heap_bucket buckets[0];
};

static inline bool big_heap_chunks(chunksz_t chunks)
{
   21568:	b480      	push	{r7}
   2156a:	b083      	sub	sp, #12
   2156c:	af00      	add	r7, sp, #0
   2156e:	6078      	str	r0, [r7, #4]
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   21570:	687b      	ldr	r3, [r7, #4]
   21572:	f647 72ff 	movw	r2, #32767	; 0x7fff
   21576:	4293      	cmp	r3, r2
   21578:	bf8c      	ite	hi
   2157a:	2301      	movhi	r3, #1
   2157c:	2300      	movls	r3, #0
   2157e:	b2db      	uxtb	r3, r3
}
   21580:	4618      	mov	r0, r3
   21582:	370c      	adds	r7, #12
   21584:	46bd      	mov	sp, r7
   21586:	bc80      	pop	{r7}
   21588:	4770      	bx	lr

0002158a <big_heap_bytes>:

static inline bool big_heap_bytes(size_t bytes)
{
   2158a:	b580      	push	{r7, lr}
   2158c:	b082      	sub	sp, #8
   2158e:	af00      	add	r7, sp, #0
   21590:	6078      	str	r0, [r7, #4]
	return big_heap_chunks(bytes / CHUNK_UNIT);
   21592:	687b      	ldr	r3, [r7, #4]
   21594:	08db      	lsrs	r3, r3, #3
   21596:	4618      	mov	r0, r3
   21598:	f7ff ffe6 	bl	21568 <big_heap_chunks>
   2159c:	4603      	mov	r3, r0
}
   2159e:	4618      	mov	r0, r3
   215a0:	3708      	adds	r7, #8
   215a2:	46bd      	mov	sp, r7
   215a4:	bd80      	pop	{r7, pc}

000215a6 <big_heap>:

static inline bool big_heap(struct z_heap *h)
{
   215a6:	b580      	push	{r7, lr}
   215a8:	b082      	sub	sp, #8
   215aa:	af00      	add	r7, sp, #0
   215ac:	6078      	str	r0, [r7, #4]
	return big_heap_chunks(h->end_chunk);
   215ae:	687b      	ldr	r3, [r7, #4]
   215b0:	689b      	ldr	r3, [r3, #8]
   215b2:	4618      	mov	r0, r3
   215b4:	f7ff ffd8 	bl	21568 <big_heap_chunks>
   215b8:	4603      	mov	r3, r0
}
   215ba:	4618      	mov	r0, r3
   215bc:	3708      	adds	r7, #8
   215be:	46bd      	mov	sp, r7
   215c0:	bd80      	pop	{r7, pc}

000215c2 <chunk_buf>:

static inline chunk_unit_t *chunk_buf(struct z_heap *h)
{
   215c2:	b480      	push	{r7}
   215c4:	b083      	sub	sp, #12
   215c6:	af00      	add	r7, sp, #0
   215c8:	6078      	str	r0, [r7, #4]
	/* the struct z_heap matches with the first chunk */
	return (chunk_unit_t *)h;
   215ca:	687b      	ldr	r3, [r7, #4]
}
   215cc:	4618      	mov	r0, r3
   215ce:	370c      	adds	r7, #12
   215d0:	46bd      	mov	sp, r7
   215d2:	bc80      	pop	{r7}
   215d4:	4770      	bx	lr

000215d6 <chunk_field>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
   215d6:	b580      	push	{r7, lr}
   215d8:	b086      	sub	sp, #24
   215da:	af00      	add	r7, sp, #0
   215dc:	60f8      	str	r0, [r7, #12]
   215de:	60b9      	str	r1, [r7, #8]
   215e0:	4613      	mov	r3, r2
   215e2:	71fb      	strb	r3, [r7, #7]
	chunk_unit_t *buf = chunk_buf(h);
   215e4:	68f8      	ldr	r0, [r7, #12]
   215e6:	f7ff ffec 	bl	215c2 <chunk_buf>
   215ea:	6178      	str	r0, [r7, #20]
	void *cmem = &buf[c];
   215ec:	68bb      	ldr	r3, [r7, #8]
   215ee:	00db      	lsls	r3, r3, #3
   215f0:	697a      	ldr	r2, [r7, #20]
   215f2:	4413      	add	r3, r2
   215f4:	613b      	str	r3, [r7, #16]

	if (big_heap(h)) {
   215f6:	68f8      	ldr	r0, [r7, #12]
   215f8:	f7ff ffd5 	bl	215a6 <big_heap>
   215fc:	4603      	mov	r3, r0
   215fe:	2b00      	cmp	r3, #0
   21600:	d005      	beq.n	2160e <chunk_field+0x38>
		return ((uint32_t *)cmem)[f];
   21602:	79fb      	ldrb	r3, [r7, #7]
   21604:	009b      	lsls	r3, r3, #2
   21606:	693a      	ldr	r2, [r7, #16]
   21608:	4413      	add	r3, r2
   2160a:	681b      	ldr	r3, [r3, #0]
   2160c:	e004      	b.n	21618 <chunk_field+0x42>
	} else {
		return ((uint16_t *)cmem)[f];
   2160e:	79fb      	ldrb	r3, [r7, #7]
   21610:	005b      	lsls	r3, r3, #1
   21612:	693a      	ldr	r2, [r7, #16]
   21614:	4413      	add	r3, r2
   21616:	881b      	ldrh	r3, [r3, #0]
	}
}
   21618:	4618      	mov	r0, r3
   2161a:	3718      	adds	r7, #24
   2161c:	46bd      	mov	sp, r7
   2161e:	bd80      	pop	{r7, pc}

00021620 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
   21620:	b580      	push	{r7, lr}
   21622:	b086      	sub	sp, #24
   21624:	af00      	add	r7, sp, #0
   21626:	60f8      	str	r0, [r7, #12]
   21628:	60b9      	str	r1, [r7, #8]
   2162a:	603b      	str	r3, [r7, #0]
   2162c:	4613      	mov	r3, r2
   2162e:	71fb      	strb	r3, [r7, #7]
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
   21630:	68f8      	ldr	r0, [r7, #12]
   21632:	f7ff ffc6 	bl	215c2 <chunk_buf>
   21636:	6178      	str	r0, [r7, #20]
	void *cmem = &buf[c];
   21638:	68bb      	ldr	r3, [r7, #8]
   2163a:	00db      	lsls	r3, r3, #3
   2163c:	697a      	ldr	r2, [r7, #20]
   2163e:	4413      	add	r3, r2
   21640:	613b      	str	r3, [r7, #16]

	if (big_heap(h)) {
   21642:	68f8      	ldr	r0, [r7, #12]
   21644:	f7ff ffaf 	bl	215a6 <big_heap>
   21648:	4603      	mov	r3, r0
   2164a:	2b00      	cmp	r3, #0
   2164c:	d006      	beq.n	2165c <chunk_set+0x3c>
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   2164e:	79fb      	ldrb	r3, [r7, #7]
   21650:	009b      	lsls	r3, r3, #2
   21652:	693a      	ldr	r2, [r7, #16]
   21654:	4413      	add	r3, r2
   21656:	683a      	ldr	r2, [r7, #0]
   21658:	601a      	str	r2, [r3, #0]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
	}
}
   2165a:	e006      	b.n	2166a <chunk_set+0x4a>
		((uint16_t *)cmem)[f] = val;
   2165c:	79fb      	ldrb	r3, [r7, #7]
   2165e:	005b      	lsls	r3, r3, #1
   21660:	693a      	ldr	r2, [r7, #16]
   21662:	4413      	add	r3, r2
   21664:	683a      	ldr	r2, [r7, #0]
   21666:	b292      	uxth	r2, r2
   21668:	801a      	strh	r2, [r3, #0]
}
   2166a:	bf00      	nop
   2166c:	3718      	adds	r7, #24
   2166e:	46bd      	mov	sp, r7
   21670:	bd80      	pop	{r7, pc}

00021672 <chunk_used>:

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
   21672:	b580      	push	{r7, lr}
   21674:	b082      	sub	sp, #8
   21676:	af00      	add	r7, sp, #0
   21678:	6078      	str	r0, [r7, #4]
   2167a:	6039      	str	r1, [r7, #0]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2167c:	2201      	movs	r2, #1
   2167e:	6839      	ldr	r1, [r7, #0]
   21680:	6878      	ldr	r0, [r7, #4]
   21682:	f7ff ffa8 	bl	215d6 <chunk_field>
   21686:	4603      	mov	r3, r0
   21688:	f003 0301 	and.w	r3, r3, #1
   2168c:	2b00      	cmp	r3, #0
   2168e:	bf14      	ite	ne
   21690:	2301      	movne	r3, #1
   21692:	2300      	moveq	r3, #0
   21694:	b2db      	uxtb	r3, r3
}
   21696:	4618      	mov	r0, r3
   21698:	3708      	adds	r7, #8
   2169a:	46bd      	mov	sp, r7
   2169c:	bd80      	pop	{r7, pc}

0002169e <chunk_size>:

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   2169e:	b580      	push	{r7, lr}
   216a0:	b082      	sub	sp, #8
   216a2:	af00      	add	r7, sp, #0
   216a4:	6078      	str	r0, [r7, #4]
   216a6:	6039      	str	r1, [r7, #0]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   216a8:	2201      	movs	r2, #1
   216aa:	6839      	ldr	r1, [r7, #0]
   216ac:	6878      	ldr	r0, [r7, #4]
   216ae:	f7ff ff92 	bl	215d6 <chunk_field>
   216b2:	4603      	mov	r3, r0
   216b4:	085b      	lsrs	r3, r3, #1
}
   216b6:	4618      	mov	r0, r3
   216b8:	3708      	adds	r7, #8
   216ba:	46bd      	mov	sp, r7
   216bc:	bd80      	pop	{r7, pc}

000216be <set_chunk_used>:

static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
   216be:	b580      	push	{r7, lr}
   216c0:	b086      	sub	sp, #24
   216c2:	af00      	add	r7, sp, #0
   216c4:	60f8      	str	r0, [r7, #12]
   216c6:	60b9      	str	r1, [r7, #8]
   216c8:	4613      	mov	r3, r2
   216ca:	71fb      	strb	r3, [r7, #7]
	chunk_unit_t *buf = chunk_buf(h);
   216cc:	68f8      	ldr	r0, [r7, #12]
   216ce:	f7ff ff78 	bl	215c2 <chunk_buf>
   216d2:	6178      	str	r0, [r7, #20]
	void *cmem = &buf[c];
   216d4:	68bb      	ldr	r3, [r7, #8]
   216d6:	00db      	lsls	r3, r3, #3
   216d8:	697a      	ldr	r2, [r7, #20]
   216da:	4413      	add	r3, r2
   216dc:	613b      	str	r3, [r7, #16]

	if (big_heap(h)) {
   216de:	68f8      	ldr	r0, [r7, #12]
   216e0:	f7ff ff61 	bl	215a6 <big_heap>
   216e4:	4603      	mov	r3, r0
   216e6:	2b00      	cmp	r3, #0
   216e8:	d014      	beq.n	21714 <set_chunk_used+0x56>
		if (used) {
   216ea:	79fb      	ldrb	r3, [r7, #7]
   216ec:	2b00      	cmp	r3, #0
   216ee:	d008      	beq.n	21702 <set_chunk_used+0x44>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   216f0:	693b      	ldr	r3, [r7, #16]
   216f2:	3304      	adds	r3, #4
   216f4:	681a      	ldr	r2, [r3, #0]
   216f6:	693b      	ldr	r3, [r7, #16]
   216f8:	3304      	adds	r3, #4
   216fa:	f042 0201 	orr.w	r2, r2, #1
   216fe:	601a      	str	r2, [r3, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
		}
	}
}
   21700:	e01e      	b.n	21740 <set_chunk_used+0x82>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   21702:	693b      	ldr	r3, [r7, #16]
   21704:	3304      	adds	r3, #4
   21706:	681a      	ldr	r2, [r3, #0]
   21708:	693b      	ldr	r3, [r7, #16]
   2170a:	3304      	adds	r3, #4
   2170c:	f022 0201 	bic.w	r2, r2, #1
   21710:	601a      	str	r2, [r3, #0]
}
   21712:	e015      	b.n	21740 <set_chunk_used+0x82>
		if (used) {
   21714:	79fb      	ldrb	r3, [r7, #7]
   21716:	2b00      	cmp	r3, #0
   21718:	d009      	beq.n	2172e <set_chunk_used+0x70>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2171a:	693b      	ldr	r3, [r7, #16]
   2171c:	3302      	adds	r3, #2
   2171e:	881a      	ldrh	r2, [r3, #0]
   21720:	693b      	ldr	r3, [r7, #16]
   21722:	3302      	adds	r3, #2
   21724:	f042 0201 	orr.w	r2, r2, #1
   21728:	b292      	uxth	r2, r2
   2172a:	801a      	strh	r2, [r3, #0]
}
   2172c:	e008      	b.n	21740 <set_chunk_used+0x82>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2172e:	693b      	ldr	r3, [r7, #16]
   21730:	3302      	adds	r3, #2
   21732:	881a      	ldrh	r2, [r3, #0]
   21734:	693b      	ldr	r3, [r7, #16]
   21736:	3302      	adds	r3, #2
   21738:	f022 0201 	bic.w	r2, r2, #1
   2173c:	b292      	uxth	r2, r2
   2173e:	801a      	strh	r2, [r3, #0]
}
   21740:	bf00      	nop
   21742:	3718      	adds	r7, #24
   21744:	46bd      	mov	sp, r7
   21746:	bd80      	pop	{r7, pc}

00021748 <set_chunk_size>:
 * Note: no need to preserve the used bit here as the chunk is never in use
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
   21748:	b580      	push	{r7, lr}
   2174a:	b084      	sub	sp, #16
   2174c:	af00      	add	r7, sp, #0
   2174e:	60f8      	str	r0, [r7, #12]
   21750:	60b9      	str	r1, [r7, #8]
   21752:	607a      	str	r2, [r7, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21754:	687b      	ldr	r3, [r7, #4]
   21756:	005b      	lsls	r3, r3, #1
   21758:	2201      	movs	r2, #1
   2175a:	68b9      	ldr	r1, [r7, #8]
   2175c:	68f8      	ldr	r0, [r7, #12]
   2175e:	f7ff ff5f 	bl	21620 <chunk_set>
}
   21762:	bf00      	nop
   21764:	3710      	adds	r7, #16
   21766:	46bd      	mov	sp, r7
   21768:	bd80      	pop	{r7, pc}

0002176a <prev_free_chunk>:

static inline chunkid_t prev_free_chunk(struct z_heap *h, chunkid_t c)
{
   2176a:	b580      	push	{r7, lr}
   2176c:	b082      	sub	sp, #8
   2176e:	af00      	add	r7, sp, #0
   21770:	6078      	str	r0, [r7, #4]
   21772:	6039      	str	r1, [r7, #0]
	return chunk_field(h, c, FREE_PREV);
   21774:	2202      	movs	r2, #2
   21776:	6839      	ldr	r1, [r7, #0]
   21778:	6878      	ldr	r0, [r7, #4]
   2177a:	f7ff ff2c 	bl	215d6 <chunk_field>
   2177e:	4603      	mov	r3, r0
}
   21780:	4618      	mov	r0, r3
   21782:	3708      	adds	r7, #8
   21784:	46bd      	mov	sp, r7
   21786:	bd80      	pop	{r7, pc}

00021788 <next_free_chunk>:

static inline chunkid_t next_free_chunk(struct z_heap *h, chunkid_t c)
{
   21788:	b580      	push	{r7, lr}
   2178a:	b082      	sub	sp, #8
   2178c:	af00      	add	r7, sp, #0
   2178e:	6078      	str	r0, [r7, #4]
   21790:	6039      	str	r1, [r7, #0]
	return chunk_field(h, c, FREE_NEXT);
   21792:	2203      	movs	r2, #3
   21794:	6839      	ldr	r1, [r7, #0]
   21796:	6878      	ldr	r0, [r7, #4]
   21798:	f7ff ff1d 	bl	215d6 <chunk_field>
   2179c:	4603      	mov	r3, r0
}
   2179e:	4618      	mov	r0, r3
   217a0:	3708      	adds	r7, #8
   217a2:	46bd      	mov	sp, r7
   217a4:	bd80      	pop	{r7, pc}

000217a6 <set_prev_free_chunk>:

static inline void set_prev_free_chunk(struct z_heap *h, chunkid_t c,
				       chunkid_t prev)
{
   217a6:	b580      	push	{r7, lr}
   217a8:	b084      	sub	sp, #16
   217aa:	af00      	add	r7, sp, #0
   217ac:	60f8      	str	r0, [r7, #12]
   217ae:	60b9      	str	r1, [r7, #8]
   217b0:	607a      	str	r2, [r7, #4]
	chunk_set(h, c, FREE_PREV, prev);
   217b2:	687b      	ldr	r3, [r7, #4]
   217b4:	2202      	movs	r2, #2
   217b6:	68b9      	ldr	r1, [r7, #8]
   217b8:	68f8      	ldr	r0, [r7, #12]
   217ba:	f7ff ff31 	bl	21620 <chunk_set>
}
   217be:	bf00      	nop
   217c0:	3710      	adds	r7, #16
   217c2:	46bd      	mov	sp, r7
   217c4:	bd80      	pop	{r7, pc}

000217c6 <set_next_free_chunk>:

static inline void set_next_free_chunk(struct z_heap *h, chunkid_t c,
				       chunkid_t next)
{
   217c6:	b580      	push	{r7, lr}
   217c8:	b084      	sub	sp, #16
   217ca:	af00      	add	r7, sp, #0
   217cc:	60f8      	str	r0, [r7, #12]
   217ce:	60b9      	str	r1, [r7, #8]
   217d0:	607a      	str	r2, [r7, #4]
	chunk_set(h, c, FREE_NEXT, next);
   217d2:	687b      	ldr	r3, [r7, #4]
   217d4:	2203      	movs	r2, #3
   217d6:	68b9      	ldr	r1, [r7, #8]
   217d8:	68f8      	ldr	r0, [r7, #12]
   217da:	f7ff ff21 	bl	21620 <chunk_set>
}
   217de:	bf00      	nop
   217e0:	3710      	adds	r7, #16
   217e2:	46bd      	mov	sp, r7
   217e4:	bd80      	pop	{r7, pc}

000217e6 <left_chunk>:

static inline chunkid_t left_chunk(struct z_heap *h, chunkid_t c)
{
   217e6:	b580      	push	{r7, lr}
   217e8:	b082      	sub	sp, #8
   217ea:	af00      	add	r7, sp, #0
   217ec:	6078      	str	r0, [r7, #4]
   217ee:	6039      	str	r1, [r7, #0]
	return c - chunk_field(h, c, LEFT_SIZE);
   217f0:	2200      	movs	r2, #0
   217f2:	6839      	ldr	r1, [r7, #0]
   217f4:	6878      	ldr	r0, [r7, #4]
   217f6:	f7ff feee 	bl	215d6 <chunk_field>
   217fa:	4602      	mov	r2, r0
   217fc:	683b      	ldr	r3, [r7, #0]
   217fe:	1a9b      	subs	r3, r3, r2
}
   21800:	4618      	mov	r0, r3
   21802:	3708      	adds	r7, #8
   21804:	46bd      	mov	sp, r7
   21806:	bd80      	pop	{r7, pc}

00021808 <right_chunk>:

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
   21808:	b580      	push	{r7, lr}
   2180a:	b082      	sub	sp, #8
   2180c:	af00      	add	r7, sp, #0
   2180e:	6078      	str	r0, [r7, #4]
   21810:	6039      	str	r1, [r7, #0]
	return c + chunk_size(h, c);
   21812:	6839      	ldr	r1, [r7, #0]
   21814:	6878      	ldr	r0, [r7, #4]
   21816:	f7ff ff42 	bl	2169e <chunk_size>
   2181a:	4602      	mov	r2, r0
   2181c:	683b      	ldr	r3, [r7, #0]
   2181e:	4413      	add	r3, r2
}
   21820:	4618      	mov	r0, r3
   21822:	3708      	adds	r7, #8
   21824:	46bd      	mov	sp, r7
   21826:	bd80      	pop	{r7, pc}

00021828 <set_left_chunk_size>:

static inline void set_left_chunk_size(struct z_heap *h, chunkid_t c,
				       chunksz_t size)
{
   21828:	b580      	push	{r7, lr}
   2182a:	b084      	sub	sp, #16
   2182c:	af00      	add	r7, sp, #0
   2182e:	60f8      	str	r0, [r7, #12]
   21830:	60b9      	str	r1, [r7, #8]
   21832:	607a      	str	r2, [r7, #4]
	chunk_set(h, c, LEFT_SIZE, size);
   21834:	687b      	ldr	r3, [r7, #4]
   21836:	2200      	movs	r2, #0
   21838:	68b9      	ldr	r1, [r7, #8]
   2183a:	68f8      	ldr	r0, [r7, #12]
   2183c:	f7ff fef0 	bl	21620 <chunk_set>
}
   21840:	bf00      	nop
   21842:	3710      	adds	r7, #16
   21844:	46bd      	mov	sp, r7
   21846:	bd80      	pop	{r7, pc}

00021848 <solo_free_header>:

static inline bool solo_free_header(struct z_heap *h, chunkid_t c)
{
   21848:	b580      	push	{r7, lr}
   2184a:	b082      	sub	sp, #8
   2184c:	af00      	add	r7, sp, #0
   2184e:	6078      	str	r0, [r7, #4]
   21850:	6039      	str	r1, [r7, #0]
	return big_heap(h) && chunk_size(h, c) == 1U;
   21852:	6878      	ldr	r0, [r7, #4]
   21854:	f7ff fea7 	bl	215a6 <big_heap>
   21858:	4603      	mov	r3, r0
   2185a:	2b00      	cmp	r3, #0
   2185c:	d008      	beq.n	21870 <solo_free_header+0x28>
   2185e:	6839      	ldr	r1, [r7, #0]
   21860:	6878      	ldr	r0, [r7, #4]
   21862:	f7ff ff1c 	bl	2169e <chunk_size>
   21866:	4603      	mov	r3, r0
   21868:	2b01      	cmp	r3, #1
   2186a:	d101      	bne.n	21870 <solo_free_header+0x28>
   2186c:	2301      	movs	r3, #1
   2186e:	e000      	b.n	21872 <solo_free_header+0x2a>
   21870:	2300      	movs	r3, #0
   21872:	f003 0301 	and.w	r3, r3, #1
   21876:	b2db      	uxtb	r3, r3
}
   21878:	4618      	mov	r0, r3
   2187a:	3708      	adds	r7, #8
   2187c:	46bd      	mov	sp, r7
   2187e:	bd80      	pop	{r7, pc}

00021880 <chunk_header_bytes>:

static inline size_t chunk_header_bytes(struct z_heap *h)
{
   21880:	b580      	push	{r7, lr}
   21882:	b082      	sub	sp, #8
   21884:	af00      	add	r7, sp, #0
   21886:	6078      	str	r0, [r7, #4]
	return big_heap(h) ? 8 : 4;
   21888:	6878      	ldr	r0, [r7, #4]
   2188a:	f7ff fe8c 	bl	215a6 <big_heap>
   2188e:	4603      	mov	r3, r0
   21890:	2b00      	cmp	r3, #0
   21892:	d001      	beq.n	21898 <chunk_header_bytes+0x18>
   21894:	2308      	movs	r3, #8
   21896:	e000      	b.n	2189a <chunk_header_bytes+0x1a>
   21898:	2304      	movs	r3, #4
}
   2189a:	4618      	mov	r0, r3
   2189c:	3708      	adds	r7, #8
   2189e:	46bd      	mov	sp, r7
   218a0:	bd80      	pop	{r7, pc}

000218a2 <heap_footer_bytes>:

static inline size_t heap_footer_bytes(size_t size)
{
   218a2:	b580      	push	{r7, lr}
   218a4:	b082      	sub	sp, #8
   218a6:	af00      	add	r7, sp, #0
   218a8:	6078      	str	r0, [r7, #4]
	return big_heap_bytes(size) ? 8 : 4;
   218aa:	6878      	ldr	r0, [r7, #4]
   218ac:	f7ff fe6d 	bl	2158a <big_heap_bytes>
   218b0:	4603      	mov	r3, r0
   218b2:	2b00      	cmp	r3, #0
   218b4:	d001      	beq.n	218ba <heap_footer_bytes+0x18>
   218b6:	2308      	movs	r3, #8
   218b8:	e000      	b.n	218bc <heap_footer_bytes+0x1a>
   218ba:	2304      	movs	r3, #4
}
   218bc:	4618      	mov	r0, r3
   218be:	3708      	adds	r7, #8
   218c0:	46bd      	mov	sp, r7
   218c2:	bd80      	pop	{r7, pc}

000218c4 <chunksz>:

static inline chunksz_t chunksz(size_t bytes)
{
   218c4:	b480      	push	{r7}
   218c6:	b083      	sub	sp, #12
   218c8:	af00      	add	r7, sp, #0
   218ca:	6078      	str	r0, [r7, #4]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   218cc:	687b      	ldr	r3, [r7, #4]
   218ce:	3307      	adds	r3, #7
   218d0:	08db      	lsrs	r3, r3, #3
}
   218d2:	4618      	mov	r0, r3
   218d4:	370c      	adds	r7, #12
   218d6:	46bd      	mov	sp, r7
   218d8:	bc80      	pop	{r7}
   218da:	4770      	bx	lr

000218dc <bytes_to_chunksz>:

static inline chunksz_t bytes_to_chunksz(struct z_heap *h, size_t bytes)
{
   218dc:	b580      	push	{r7, lr}
   218de:	b082      	sub	sp, #8
   218e0:	af00      	add	r7, sp, #0
   218e2:	6078      	str	r0, [r7, #4]
   218e4:	6039      	str	r1, [r7, #0]
	return chunksz(chunk_header_bytes(h) + bytes);
   218e6:	6878      	ldr	r0, [r7, #4]
   218e8:	f7ff ffca 	bl	21880 <chunk_header_bytes>
   218ec:	4602      	mov	r2, r0
   218ee:	683b      	ldr	r3, [r7, #0]
   218f0:	4413      	add	r3, r2
   218f2:	4618      	mov	r0, r3
   218f4:	f7ff ffe6 	bl	218c4 <chunksz>
   218f8:	4603      	mov	r3, r0
}
   218fa:	4618      	mov	r0, r3
   218fc:	3708      	adds	r7, #8
   218fe:	46bd      	mov	sp, r7
   21900:	bd80      	pop	{r7, pc}

00021902 <min_chunk_size>:

static inline chunksz_t min_chunk_size(struct z_heap *h)
{
   21902:	b580      	push	{r7, lr}
   21904:	b082      	sub	sp, #8
   21906:	af00      	add	r7, sp, #0
   21908:	6078      	str	r0, [r7, #4]
	return bytes_to_chunksz(h, 1);
   2190a:	2101      	movs	r1, #1
   2190c:	6878      	ldr	r0, [r7, #4]
   2190e:	f7ff ffe5 	bl	218dc <bytes_to_chunksz>
   21912:	4603      	mov	r3, r0
}
   21914:	4618      	mov	r0, r3
   21916:	3708      	adds	r7, #8
   21918:	46bd      	mov	sp, r7
   2191a:	bd80      	pop	{r7, pc}

0002191c <bucket_idx>:
{
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
   2191c:	b580      	push	{r7, lr}
   2191e:	b084      	sub	sp, #16
   21920:	af00      	add	r7, sp, #0
   21922:	6078      	str	r0, [r7, #4]
   21924:	6039      	str	r1, [r7, #0]
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   21926:	6878      	ldr	r0, [r7, #4]
   21928:	f7ff ffeb 	bl	21902 <min_chunk_size>
   2192c:	4602      	mov	r2, r0
   2192e:	683b      	ldr	r3, [r7, #0]
   21930:	1a9b      	subs	r3, r3, r2
   21932:	3301      	adds	r3, #1
   21934:	60fb      	str	r3, [r7, #12]
	return 31 - __builtin_clz(usable_sz);
   21936:	68fb      	ldr	r3, [r7, #12]
   21938:	fab3 f383 	clz	r3, r3
   2193c:	f1c3 031f 	rsb	r3, r3, #31
}
   21940:	4618      	mov	r0, r3
   21942:	3710      	adds	r7, #16
   21944:	46bd      	mov	sp, r7
   21946:	bd80      	pop	{r7, pc}

00021948 <size_too_big>:

static inline bool size_too_big(struct z_heap *h, size_t bytes)
{
   21948:	b480      	push	{r7}
   2194a:	b083      	sub	sp, #12
   2194c:	af00      	add	r7, sp, #0
   2194e:	6078      	str	r0, [r7, #4]
   21950:	6039      	str	r1, [r7, #0]
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   21952:	683b      	ldr	r3, [r7, #0]
   21954:	08da      	lsrs	r2, r3, #3
   21956:	687b      	ldr	r3, [r7, #4]
   21958:	689b      	ldr	r3, [r3, #8]
   2195a:	429a      	cmp	r2, r3
   2195c:	bf2c      	ite	cs
   2195e:	2301      	movcs	r3, #1
   21960:	2300      	movcc	r3, #0
   21962:	b2db      	uxtb	r3, r3
}
   21964:	4618      	mov	r0, r3
   21966:	370c      	adds	r7, #12
   21968:	46bd      	mov	sp, r7
   2196a:	bc80      	pop	{r7}
   2196c:	4770      	bx	lr

0002196e <chunk_mem>:
{
   2196e:	b590      	push	{r4, r7, lr}
   21970:	b085      	sub	sp, #20
   21972:	af00      	add	r7, sp, #0
   21974:	6078      	str	r0, [r7, #4]
   21976:	6039      	str	r1, [r7, #0]
	chunk_unit_t *buf = chunk_buf(h);
   21978:	6878      	ldr	r0, [r7, #4]
   2197a:	f7ff fe22 	bl	215c2 <chunk_buf>
   2197e:	60f8      	str	r0, [r7, #12]
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   21980:	683b      	ldr	r3, [r7, #0]
   21982:	00db      	lsls	r3, r3, #3
   21984:	68fa      	ldr	r2, [r7, #12]
   21986:	18d4      	adds	r4, r2, r3
   21988:	6878      	ldr	r0, [r7, #4]
   2198a:	f7ff ff79 	bl	21880 <chunk_header_bytes>
   2198e:	4603      	mov	r3, r0
   21990:	4423      	add	r3, r4
   21992:	60bb      	str	r3, [r7, #8]
	return ret;
   21994:	68bb      	ldr	r3, [r7, #8]
}
   21996:	4618      	mov	r0, r3
   21998:	3714      	adds	r7, #20
   2199a:	46bd      	mov	sp, r7
   2199c:	bd90      	pop	{r4, r7, pc}

0002199e <free_list_remove_bidx>:
{
   2199e:	b580      	push	{r7, lr}
   219a0:	b088      	sub	sp, #32
   219a2:	af00      	add	r7, sp, #0
   219a4:	60f8      	str	r0, [r7, #12]
   219a6:	60b9      	str	r1, [r7, #8]
   219a8:	607a      	str	r2, [r7, #4]
	struct z_heap_bucket *b = &h->buckets[bidx];
   219aa:	687b      	ldr	r3, [r7, #4]
   219ac:	3304      	adds	r3, #4
   219ae:	009b      	lsls	r3, r3, #2
   219b0:	68fa      	ldr	r2, [r7, #12]
   219b2:	4413      	add	r3, r2
   219b4:	61fb      	str	r3, [r7, #28]
	if (next_free_chunk(h, c) == c) {
   219b6:	68b9      	ldr	r1, [r7, #8]
   219b8:	68f8      	ldr	r0, [r7, #12]
   219ba:	f7ff fee5 	bl	21788 <next_free_chunk>
   219be:	4602      	mov	r2, r0
   219c0:	68bb      	ldr	r3, [r7, #8]
   219c2:	4293      	cmp	r3, r2
   219c4:	d10d      	bne.n	219e2 <free_list_remove_bidx+0x44>
		h->avail_buckets &= ~(1 << bidx);
   219c6:	68fb      	ldr	r3, [r7, #12]
   219c8:	68db      	ldr	r3, [r3, #12]
   219ca:	2101      	movs	r1, #1
   219cc:	687a      	ldr	r2, [r7, #4]
   219ce:	fa01 f202 	lsl.w	r2, r1, r2
   219d2:	43d2      	mvns	r2, r2
   219d4:	401a      	ands	r2, r3
   219d6:	68fb      	ldr	r3, [r7, #12]
   219d8:	60da      	str	r2, [r3, #12]
		b->next = 0;
   219da:	69fb      	ldr	r3, [r7, #28]
   219dc:	2200      	movs	r2, #0
   219de:	601a      	str	r2, [r3, #0]
}
   219e0:	e016      	b.n	21a10 <free_list_remove_bidx+0x72>
		chunkid_t first = prev_free_chunk(h, c),
   219e2:	68b9      	ldr	r1, [r7, #8]
   219e4:	68f8      	ldr	r0, [r7, #12]
   219e6:	f7ff fec0 	bl	2176a <prev_free_chunk>
   219ea:	61b8      	str	r0, [r7, #24]
			  second = next_free_chunk(h, c);
   219ec:	68b9      	ldr	r1, [r7, #8]
   219ee:	68f8      	ldr	r0, [r7, #12]
   219f0:	f7ff feca 	bl	21788 <next_free_chunk>
   219f4:	6178      	str	r0, [r7, #20]
		b->next = second;
   219f6:	69fb      	ldr	r3, [r7, #28]
   219f8:	697a      	ldr	r2, [r7, #20]
   219fa:	601a      	str	r2, [r3, #0]
		set_next_free_chunk(h, first, second);
   219fc:	697a      	ldr	r2, [r7, #20]
   219fe:	69b9      	ldr	r1, [r7, #24]
   21a00:	68f8      	ldr	r0, [r7, #12]
   21a02:	f7ff fee0 	bl	217c6 <set_next_free_chunk>
		set_prev_free_chunk(h, second, first);
   21a06:	69ba      	ldr	r2, [r7, #24]
   21a08:	6979      	ldr	r1, [r7, #20]
   21a0a:	68f8      	ldr	r0, [r7, #12]
   21a0c:	f7ff fecb 	bl	217a6 <set_prev_free_chunk>
}
   21a10:	bf00      	nop
   21a12:	3720      	adds	r7, #32
   21a14:	46bd      	mov	sp, r7
   21a16:	bd80      	pop	{r7, pc}

00021a18 <free_list_remove>:
{
   21a18:	b580      	push	{r7, lr}
   21a1a:	b084      	sub	sp, #16
   21a1c:	af00      	add	r7, sp, #0
   21a1e:	6078      	str	r0, [r7, #4]
   21a20:	6039      	str	r1, [r7, #0]
	if (!solo_free_header(h, c)) {
   21a22:	6839      	ldr	r1, [r7, #0]
   21a24:	6878      	ldr	r0, [r7, #4]
   21a26:	f7ff ff0f 	bl	21848 <solo_free_header>
   21a2a:	4603      	mov	r3, r0
   21a2c:	f083 0301 	eor.w	r3, r3, #1
   21a30:	b2db      	uxtb	r3, r3
   21a32:	2b00      	cmp	r3, #0
   21a34:	d00e      	beq.n	21a54 <free_list_remove+0x3c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   21a36:	6839      	ldr	r1, [r7, #0]
   21a38:	6878      	ldr	r0, [r7, #4]
   21a3a:	f7ff fe30 	bl	2169e <chunk_size>
   21a3e:	4603      	mov	r3, r0
   21a40:	4619      	mov	r1, r3
   21a42:	6878      	ldr	r0, [r7, #4]
   21a44:	f7ff ff6a 	bl	2191c <bucket_idx>
   21a48:	60f8      	str	r0, [r7, #12]
		free_list_remove_bidx(h, c, bidx);
   21a4a:	68fa      	ldr	r2, [r7, #12]
   21a4c:	6839      	ldr	r1, [r7, #0]
   21a4e:	6878      	ldr	r0, [r7, #4]
   21a50:	f7ff ffa5 	bl	2199e <free_list_remove_bidx>
}
   21a54:	bf00      	nop
   21a56:	3710      	adds	r7, #16
   21a58:	46bd      	mov	sp, r7
   21a5a:	bd80      	pop	{r7, pc}

00021a5c <free_list_add_bidx>:
{
   21a5c:	b580      	push	{r7, lr}
   21a5e:	b088      	sub	sp, #32
   21a60:	af00      	add	r7, sp, #0
   21a62:	60f8      	str	r0, [r7, #12]
   21a64:	60b9      	str	r1, [r7, #8]
   21a66:	607a      	str	r2, [r7, #4]
	struct z_heap_bucket *b = &h->buckets[bidx];
   21a68:	687b      	ldr	r3, [r7, #4]
   21a6a:	3304      	adds	r3, #4
   21a6c:	009b      	lsls	r3, r3, #2
   21a6e:	68fa      	ldr	r2, [r7, #12]
   21a70:	4413      	add	r3, r2
   21a72:	61fb      	str	r3, [r7, #28]
	if (b->next == 0U) {
   21a74:	69fb      	ldr	r3, [r7, #28]
   21a76:	681b      	ldr	r3, [r3, #0]
   21a78:	2b00      	cmp	r3, #0
   21a7a:	d116      	bne.n	21aaa <free_list_add_bidx+0x4e>
		h->avail_buckets |= (1 << bidx);
   21a7c:	68fb      	ldr	r3, [r7, #12]
   21a7e:	68db      	ldr	r3, [r3, #12]
   21a80:	2101      	movs	r1, #1
   21a82:	687a      	ldr	r2, [r7, #4]
   21a84:	fa01 f202 	lsl.w	r2, r1, r2
   21a88:	431a      	orrs	r2, r3
   21a8a:	68fb      	ldr	r3, [r7, #12]
   21a8c:	60da      	str	r2, [r3, #12]
		b->next = c;
   21a8e:	69fb      	ldr	r3, [r7, #28]
   21a90:	68ba      	ldr	r2, [r7, #8]
   21a92:	601a      	str	r2, [r3, #0]
		set_prev_free_chunk(h, c, c);
   21a94:	68ba      	ldr	r2, [r7, #8]
   21a96:	68b9      	ldr	r1, [r7, #8]
   21a98:	68f8      	ldr	r0, [r7, #12]
   21a9a:	f7ff fe84 	bl	217a6 <set_prev_free_chunk>
		set_next_free_chunk(h, c, c);
   21a9e:	68ba      	ldr	r2, [r7, #8]
   21aa0:	68b9      	ldr	r1, [r7, #8]
   21aa2:	68f8      	ldr	r0, [r7, #12]
   21aa4:	f7ff fe8f 	bl	217c6 <set_next_free_chunk>
}
   21aa8:	e01b      	b.n	21ae2 <free_list_add_bidx+0x86>
		chunkid_t second = b->next;
   21aaa:	69fb      	ldr	r3, [r7, #28]
   21aac:	681b      	ldr	r3, [r3, #0]
   21aae:	61bb      	str	r3, [r7, #24]
		chunkid_t first = prev_free_chunk(h, second);
   21ab0:	69b9      	ldr	r1, [r7, #24]
   21ab2:	68f8      	ldr	r0, [r7, #12]
   21ab4:	f7ff fe59 	bl	2176a <prev_free_chunk>
   21ab8:	6178      	str	r0, [r7, #20]
		set_prev_free_chunk(h, c, first);
   21aba:	697a      	ldr	r2, [r7, #20]
   21abc:	68b9      	ldr	r1, [r7, #8]
   21abe:	68f8      	ldr	r0, [r7, #12]
   21ac0:	f7ff fe71 	bl	217a6 <set_prev_free_chunk>
		set_next_free_chunk(h, c, second);
   21ac4:	69ba      	ldr	r2, [r7, #24]
   21ac6:	68b9      	ldr	r1, [r7, #8]
   21ac8:	68f8      	ldr	r0, [r7, #12]
   21aca:	f7ff fe7c 	bl	217c6 <set_next_free_chunk>
		set_next_free_chunk(h, first, c);
   21ace:	68ba      	ldr	r2, [r7, #8]
   21ad0:	6979      	ldr	r1, [r7, #20]
   21ad2:	68f8      	ldr	r0, [r7, #12]
   21ad4:	f7ff fe77 	bl	217c6 <set_next_free_chunk>
		set_prev_free_chunk(h, second, c);
   21ad8:	68ba      	ldr	r2, [r7, #8]
   21ada:	69b9      	ldr	r1, [r7, #24]
   21adc:	68f8      	ldr	r0, [r7, #12]
   21ade:	f7ff fe62 	bl	217a6 <set_prev_free_chunk>
}
   21ae2:	bf00      	nop
   21ae4:	3720      	adds	r7, #32
   21ae6:	46bd      	mov	sp, r7
   21ae8:	bd80      	pop	{r7, pc}

00021aea <free_list_add>:
{
   21aea:	b580      	push	{r7, lr}
   21aec:	b084      	sub	sp, #16
   21aee:	af00      	add	r7, sp, #0
   21af0:	6078      	str	r0, [r7, #4]
   21af2:	6039      	str	r1, [r7, #0]
	if (!solo_free_header(h, c)) {
   21af4:	6839      	ldr	r1, [r7, #0]
   21af6:	6878      	ldr	r0, [r7, #4]
   21af8:	f7ff fea6 	bl	21848 <solo_free_header>
   21afc:	4603      	mov	r3, r0
   21afe:	f083 0301 	eor.w	r3, r3, #1
   21b02:	b2db      	uxtb	r3, r3
   21b04:	2b00      	cmp	r3, #0
   21b06:	d00e      	beq.n	21b26 <free_list_add+0x3c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   21b08:	6839      	ldr	r1, [r7, #0]
   21b0a:	6878      	ldr	r0, [r7, #4]
   21b0c:	f7ff fdc7 	bl	2169e <chunk_size>
   21b10:	4603      	mov	r3, r0
   21b12:	4619      	mov	r1, r3
   21b14:	6878      	ldr	r0, [r7, #4]
   21b16:	f7ff ff01 	bl	2191c <bucket_idx>
   21b1a:	60f8      	str	r0, [r7, #12]
		free_list_add_bidx(h, c, bidx);
   21b1c:	68fa      	ldr	r2, [r7, #12]
   21b1e:	6839      	ldr	r1, [r7, #0]
   21b20:	6878      	ldr	r0, [r7, #4]
   21b22:	f7ff ff9b 	bl	21a5c <free_list_add_bidx>
}
   21b26:	bf00      	nop
   21b28:	3710      	adds	r7, #16
   21b2a:	46bd      	mov	sp, r7
   21b2c:	bd80      	pop	{r7, pc}

00021b2e <split_chunks>:
{
   21b2e:	b580      	push	{r7, lr}
   21b30:	b088      	sub	sp, #32
   21b32:	af00      	add	r7, sp, #0
   21b34:	60f8      	str	r0, [r7, #12]
   21b36:	60b9      	str	r1, [r7, #8]
   21b38:	607a      	str	r2, [r7, #4]
	chunksz_t sz0 = chunk_size(h, lc);
   21b3a:	68b9      	ldr	r1, [r7, #8]
   21b3c:	68f8      	ldr	r0, [r7, #12]
   21b3e:	f7ff fdae 	bl	2169e <chunk_size>
   21b42:	61f8      	str	r0, [r7, #28]
	chunksz_t lsz = rc - lc;
   21b44:	687a      	ldr	r2, [r7, #4]
   21b46:	68bb      	ldr	r3, [r7, #8]
   21b48:	1ad3      	subs	r3, r2, r3
   21b4a:	61bb      	str	r3, [r7, #24]
	chunksz_t rsz = sz0 - lsz;
   21b4c:	69fa      	ldr	r2, [r7, #28]
   21b4e:	69bb      	ldr	r3, [r7, #24]
   21b50:	1ad3      	subs	r3, r2, r3
   21b52:	617b      	str	r3, [r7, #20]
	set_chunk_size(h, lc, lsz);
   21b54:	69ba      	ldr	r2, [r7, #24]
   21b56:	68b9      	ldr	r1, [r7, #8]
   21b58:	68f8      	ldr	r0, [r7, #12]
   21b5a:	f7ff fdf5 	bl	21748 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   21b5e:	697a      	ldr	r2, [r7, #20]
   21b60:	6879      	ldr	r1, [r7, #4]
   21b62:	68f8      	ldr	r0, [r7, #12]
   21b64:	f7ff fdf0 	bl	21748 <set_chunk_size>
	set_left_chunk_size(h, rc, lsz);
   21b68:	69ba      	ldr	r2, [r7, #24]
   21b6a:	6879      	ldr	r1, [r7, #4]
   21b6c:	68f8      	ldr	r0, [r7, #12]
   21b6e:	f7ff fe5b 	bl	21828 <set_left_chunk_size>
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
   21b72:	6879      	ldr	r1, [r7, #4]
   21b74:	68f8      	ldr	r0, [r7, #12]
   21b76:	f7ff fe47 	bl	21808 <right_chunk>
   21b7a:	4603      	mov	r3, r0
   21b7c:	697a      	ldr	r2, [r7, #20]
   21b7e:	4619      	mov	r1, r3
   21b80:	68f8      	ldr	r0, [r7, #12]
   21b82:	f7ff fe51 	bl	21828 <set_left_chunk_size>
}
   21b86:	bf00      	nop
   21b88:	3720      	adds	r7, #32
   21b8a:	46bd      	mov	sp, r7
   21b8c:	bd80      	pop	{r7, pc}

00021b8e <merge_chunks>:
{
   21b8e:	b590      	push	{r4, r7, lr}
   21b90:	b087      	sub	sp, #28
   21b92:	af00      	add	r7, sp, #0
   21b94:	60f8      	str	r0, [r7, #12]
   21b96:	60b9      	str	r1, [r7, #8]
   21b98:	607a      	str	r2, [r7, #4]
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   21b9a:	68b9      	ldr	r1, [r7, #8]
   21b9c:	68f8      	ldr	r0, [r7, #12]
   21b9e:	f7ff fd7e 	bl	2169e <chunk_size>
   21ba2:	4604      	mov	r4, r0
   21ba4:	6879      	ldr	r1, [r7, #4]
   21ba6:	68f8      	ldr	r0, [r7, #12]
   21ba8:	f7ff fd79 	bl	2169e <chunk_size>
   21bac:	4603      	mov	r3, r0
   21bae:	4423      	add	r3, r4
   21bb0:	617b      	str	r3, [r7, #20]
	set_chunk_size(h, lc, newsz);
   21bb2:	697a      	ldr	r2, [r7, #20]
   21bb4:	68b9      	ldr	r1, [r7, #8]
   21bb6:	68f8      	ldr	r0, [r7, #12]
   21bb8:	f7ff fdc6 	bl	21748 <set_chunk_size>
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
   21bbc:	6879      	ldr	r1, [r7, #4]
   21bbe:	68f8      	ldr	r0, [r7, #12]
   21bc0:	f7ff fe22 	bl	21808 <right_chunk>
   21bc4:	4603      	mov	r3, r0
   21bc6:	697a      	ldr	r2, [r7, #20]
   21bc8:	4619      	mov	r1, r3
   21bca:	68f8      	ldr	r0, [r7, #12]
   21bcc:	f7ff fe2c 	bl	21828 <set_left_chunk_size>
}
   21bd0:	bf00      	nop
   21bd2:	371c      	adds	r7, #28
   21bd4:	46bd      	mov	sp, r7
   21bd6:	bd90      	pop	{r4, r7, pc}

00021bd8 <free_chunk>:
{
   21bd8:	b580      	push	{r7, lr}
   21bda:	b082      	sub	sp, #8
   21bdc:	af00      	add	r7, sp, #0
   21bde:	6078      	str	r0, [r7, #4]
   21be0:	6039      	str	r1, [r7, #0]
	if (!chunk_used(h, right_chunk(h, c))) {
   21be2:	6839      	ldr	r1, [r7, #0]
   21be4:	6878      	ldr	r0, [r7, #4]
   21be6:	f7ff fe0f 	bl	21808 <right_chunk>
   21bea:	4603      	mov	r3, r0
   21bec:	4619      	mov	r1, r3
   21bee:	6878      	ldr	r0, [r7, #4]
   21bf0:	f7ff fd3f 	bl	21672 <chunk_used>
   21bf4:	4603      	mov	r3, r0
   21bf6:	f083 0301 	eor.w	r3, r3, #1
   21bfa:	b2db      	uxtb	r3, r3
   21bfc:	2b00      	cmp	r3, #0
   21bfe:	d012      	beq.n	21c26 <free_chunk+0x4e>
		free_list_remove(h, right_chunk(h, c));
   21c00:	6839      	ldr	r1, [r7, #0]
   21c02:	6878      	ldr	r0, [r7, #4]
   21c04:	f7ff fe00 	bl	21808 <right_chunk>
   21c08:	4603      	mov	r3, r0
   21c0a:	4619      	mov	r1, r3
   21c0c:	6878      	ldr	r0, [r7, #4]
   21c0e:	f7ff ff03 	bl	21a18 <free_list_remove>
		merge_chunks(h, c, right_chunk(h, c));
   21c12:	6839      	ldr	r1, [r7, #0]
   21c14:	6878      	ldr	r0, [r7, #4]
   21c16:	f7ff fdf7 	bl	21808 <right_chunk>
   21c1a:	4603      	mov	r3, r0
   21c1c:	461a      	mov	r2, r3
   21c1e:	6839      	ldr	r1, [r7, #0]
   21c20:	6878      	ldr	r0, [r7, #4]
   21c22:	f7ff ffb4 	bl	21b8e <merge_chunks>
	if (!chunk_used(h, left_chunk(h, c))) {
   21c26:	6839      	ldr	r1, [r7, #0]
   21c28:	6878      	ldr	r0, [r7, #4]
   21c2a:	f7ff fddc 	bl	217e6 <left_chunk>
   21c2e:	4603      	mov	r3, r0
   21c30:	4619      	mov	r1, r3
   21c32:	6878      	ldr	r0, [r7, #4]
   21c34:	f7ff fd1d 	bl	21672 <chunk_used>
   21c38:	4603      	mov	r3, r0
   21c3a:	f083 0301 	eor.w	r3, r3, #1
   21c3e:	b2db      	uxtb	r3, r3
   21c40:	2b00      	cmp	r3, #0
   21c42:	d017      	beq.n	21c74 <free_chunk+0x9c>
		free_list_remove(h, left_chunk(h, c));
   21c44:	6839      	ldr	r1, [r7, #0]
   21c46:	6878      	ldr	r0, [r7, #4]
   21c48:	f7ff fdcd 	bl	217e6 <left_chunk>
   21c4c:	4603      	mov	r3, r0
   21c4e:	4619      	mov	r1, r3
   21c50:	6878      	ldr	r0, [r7, #4]
   21c52:	f7ff fee1 	bl	21a18 <free_list_remove>
		merge_chunks(h, left_chunk(h, c), c);
   21c56:	6839      	ldr	r1, [r7, #0]
   21c58:	6878      	ldr	r0, [r7, #4]
   21c5a:	f7ff fdc4 	bl	217e6 <left_chunk>
   21c5e:	4603      	mov	r3, r0
   21c60:	683a      	ldr	r2, [r7, #0]
   21c62:	4619      	mov	r1, r3
   21c64:	6878      	ldr	r0, [r7, #4]
   21c66:	f7ff ff92 	bl	21b8e <merge_chunks>
		c = left_chunk(h, c);
   21c6a:	6839      	ldr	r1, [r7, #0]
   21c6c:	6878      	ldr	r0, [r7, #4]
   21c6e:	f7ff fdba 	bl	217e6 <left_chunk>
   21c72:	6038      	str	r0, [r7, #0]
	free_list_add(h, c);
   21c74:	6839      	ldr	r1, [r7, #0]
   21c76:	6878      	ldr	r0, [r7, #4]
   21c78:	f7ff ff37 	bl	21aea <free_list_add>
}
   21c7c:	bf00      	nop
   21c7e:	3708      	adds	r7, #8
   21c80:	46bd      	mov	sp, r7
   21c82:	bd80      	pop	{r7, pc}

00021c84 <mem_to_chunkid>:
{
   21c84:	b580      	push	{r7, lr}
   21c86:	b084      	sub	sp, #16
   21c88:	af00      	add	r7, sp, #0
   21c8a:	6078      	str	r0, [r7, #4]
   21c8c:	6039      	str	r1, [r7, #0]
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
   21c8e:	683b      	ldr	r3, [r7, #0]
   21c90:	60fb      	str	r3, [r7, #12]
   21c92:	6878      	ldr	r0, [r7, #4]
   21c94:	f7ff fc95 	bl	215c2 <chunk_buf>
   21c98:	60b8      	str	r0, [r7, #8]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21c9a:	6878      	ldr	r0, [r7, #4]
   21c9c:	f7ff fdf0 	bl	21880 <chunk_header_bytes>
   21ca0:	4603      	mov	r3, r0
   21ca2:	425b      	negs	r3, r3
   21ca4:	68fa      	ldr	r2, [r7, #12]
   21ca6:	441a      	add	r2, r3
   21ca8:	68bb      	ldr	r3, [r7, #8]
   21caa:	1ad3      	subs	r3, r2, r3
   21cac:	08db      	lsrs	r3, r3, #3
}
   21cae:	4618      	mov	r0, r3
   21cb0:	3710      	adds	r7, #16
   21cb2:	46bd      	mov	sp, r7
   21cb4:	bd80      	pop	{r7, pc}

00021cb6 <alloc_chunk>:
{
   21cb6:	b580      	push	{r7, lr}
   21cb8:	b08a      	sub	sp, #40	; 0x28
   21cba:	af00      	add	r7, sp, #0
   21cbc:	6078      	str	r0, [r7, #4]
   21cbe:	6039      	str	r1, [r7, #0]
	int bi = bucket_idx(h, sz);
   21cc0:	6839      	ldr	r1, [r7, #0]
   21cc2:	6878      	ldr	r0, [r7, #4]
   21cc4:	f7ff fe2a 	bl	2191c <bucket_idx>
   21cc8:	6238      	str	r0, [r7, #32]
	struct z_heap_bucket *b = &h->buckets[bi];
   21cca:	6a3b      	ldr	r3, [r7, #32]
   21ccc:	3304      	adds	r3, #4
   21cce:	009b      	lsls	r3, r3, #2
   21cd0:	687a      	ldr	r2, [r7, #4]
   21cd2:	4413      	add	r3, r2
   21cd4:	61fb      	str	r3, [r7, #28]
	if (b->next) {
   21cd6:	69fb      	ldr	r3, [r7, #28]
   21cd8:	681b      	ldr	r3, [r3, #0]
   21cda:	2b00      	cmp	r3, #0
   21cdc:	d028      	beq.n	21d30 <alloc_chunk+0x7a>
		chunkid_t first = b->next;
   21cde:	69fb      	ldr	r3, [r7, #28]
   21ce0:	681b      	ldr	r3, [r3, #0]
   21ce2:	61bb      	str	r3, [r7, #24]
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   21ce4:	2303      	movs	r3, #3
   21ce6:	627b      	str	r3, [r7, #36]	; 0x24
			chunkid_t c = b->next;
   21ce8:	69fb      	ldr	r3, [r7, #28]
   21cea:	681b      	ldr	r3, [r3, #0]
   21cec:	617b      	str	r3, [r7, #20]
			if (chunk_size(h, c) >= sz) {
   21cee:	6979      	ldr	r1, [r7, #20]
   21cf0:	6878      	ldr	r0, [r7, #4]
   21cf2:	f7ff fcd4 	bl	2169e <chunk_size>
   21cf6:	4602      	mov	r2, r0
   21cf8:	683b      	ldr	r3, [r7, #0]
   21cfa:	4293      	cmp	r3, r2
   21cfc:	d806      	bhi.n	21d0c <alloc_chunk+0x56>
				free_list_remove_bidx(h, c, bi);
   21cfe:	6a3a      	ldr	r2, [r7, #32]
   21d00:	6979      	ldr	r1, [r7, #20]
   21d02:	6878      	ldr	r0, [r7, #4]
   21d04:	f7ff fe4b 	bl	2199e <free_list_remove_bidx>
				return c;
   21d08:	697b      	ldr	r3, [r7, #20]
   21d0a:	e032      	b.n	21d72 <alloc_chunk+0xbc>
			b->next = next_free_chunk(h, c);
   21d0c:	6979      	ldr	r1, [r7, #20]
   21d0e:	6878      	ldr	r0, [r7, #4]
   21d10:	f7ff fd3a 	bl	21788 <next_free_chunk>
   21d14:	4602      	mov	r2, r0
   21d16:	69fb      	ldr	r3, [r7, #28]
   21d18:	601a      	str	r2, [r3, #0]
		} while (--i && b->next != first);
   21d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21d1c:	3b01      	subs	r3, #1
   21d1e:	627b      	str	r3, [r7, #36]	; 0x24
   21d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   21d22:	2b00      	cmp	r3, #0
   21d24:	d004      	beq.n	21d30 <alloc_chunk+0x7a>
   21d26:	69fb      	ldr	r3, [r7, #28]
   21d28:	681b      	ldr	r3, [r3, #0]
   21d2a:	69ba      	ldr	r2, [r7, #24]
   21d2c:	429a      	cmp	r2, r3
   21d2e:	d1db      	bne.n	21ce8 <alloc_chunk+0x32>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   21d30:	687b      	ldr	r3, [r7, #4]
   21d32:	68db      	ldr	r3, [r3, #12]
   21d34:	6a3a      	ldr	r2, [r7, #32]
   21d36:	3201      	adds	r2, #1
   21d38:	2101      	movs	r1, #1
   21d3a:	fa01 f202 	lsl.w	r2, r1, r2
   21d3e:	4252      	negs	r2, r2
   21d40:	4013      	ands	r3, r2
   21d42:	613b      	str	r3, [r7, #16]
	if (bmask != 0U) {
   21d44:	693b      	ldr	r3, [r7, #16]
   21d46:	2b00      	cmp	r3, #0
   21d48:	d012      	beq.n	21d70 <alloc_chunk+0xba>
		int minbucket = __builtin_ctz(bmask);
   21d4a:	693b      	ldr	r3, [r7, #16]
   21d4c:	fa93 f3a3 	rbit	r3, r3
   21d50:	fab3 f383 	clz	r3, r3
   21d54:	60fb      	str	r3, [r7, #12]
		chunkid_t c = h->buckets[minbucket].next;
   21d56:	687b      	ldr	r3, [r7, #4]
   21d58:	68fa      	ldr	r2, [r7, #12]
   21d5a:	3204      	adds	r2, #4
   21d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   21d60:	60bb      	str	r3, [r7, #8]
		free_list_remove_bidx(h, c, minbucket);
   21d62:	68fa      	ldr	r2, [r7, #12]
   21d64:	68b9      	ldr	r1, [r7, #8]
   21d66:	6878      	ldr	r0, [r7, #4]
   21d68:	f7ff fe19 	bl	2199e <free_list_remove_bidx>
		return c;
   21d6c:	68bb      	ldr	r3, [r7, #8]
   21d6e:	e000      	b.n	21d72 <alloc_chunk+0xbc>
	return 0;
   21d70:	2300      	movs	r3, #0
}
   21d72:	4618      	mov	r0, r3
   21d74:	3728      	adds	r7, #40	; 0x28
   21d76:	46bd      	mov	sp, r7
   21d78:	bd80      	pop	{r7, pc}

00021d7a <sys_heap_alloc>:
{
   21d7a:	b580      	push	{r7, lr}
   21d7c:	b086      	sub	sp, #24
   21d7e:	af00      	add	r7, sp, #0
   21d80:	6078      	str	r0, [r7, #4]
   21d82:	6039      	str	r1, [r7, #0]
	struct z_heap *h = heap->heap;
   21d84:	687b      	ldr	r3, [r7, #4]
   21d86:	681b      	ldr	r3, [r3, #0]
   21d88:	617b      	str	r3, [r7, #20]
	if (bytes == 0U || size_too_big(h, bytes)) {
   21d8a:	683b      	ldr	r3, [r7, #0]
   21d8c:	2b00      	cmp	r3, #0
   21d8e:	d006      	beq.n	21d9e <sys_heap_alloc+0x24>
   21d90:	6839      	ldr	r1, [r7, #0]
   21d92:	6978      	ldr	r0, [r7, #20]
   21d94:	f7ff fdd8 	bl	21948 <size_too_big>
   21d98:	4603      	mov	r3, r0
   21d9a:	2b00      	cmp	r3, #0
   21d9c:	d001      	beq.n	21da2 <sys_heap_alloc+0x28>
		return NULL;
   21d9e:	2300      	movs	r3, #0
   21da0:	e02f      	b.n	21e02 <sys_heap_alloc+0x88>
	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
   21da2:	6839      	ldr	r1, [r7, #0]
   21da4:	6978      	ldr	r0, [r7, #20]
   21da6:	f7ff fd99 	bl	218dc <bytes_to_chunksz>
   21daa:	6138      	str	r0, [r7, #16]
	chunkid_t c = alloc_chunk(h, chunk_sz);
   21dac:	6939      	ldr	r1, [r7, #16]
   21dae:	6978      	ldr	r0, [r7, #20]
   21db0:	f7ff ff81 	bl	21cb6 <alloc_chunk>
   21db4:	60f8      	str	r0, [r7, #12]
	if (c == 0U) {
   21db6:	68fb      	ldr	r3, [r7, #12]
   21db8:	2b00      	cmp	r3, #0
   21dba:	d101      	bne.n	21dc0 <sys_heap_alloc+0x46>
		return NULL;
   21dbc:	2300      	movs	r3, #0
   21dbe:	e020      	b.n	21e02 <sys_heap_alloc+0x88>
	if (chunk_size(h, c) > chunk_sz) {
   21dc0:	68f9      	ldr	r1, [r7, #12]
   21dc2:	6978      	ldr	r0, [r7, #20]
   21dc4:	f7ff fc6b 	bl	2169e <chunk_size>
   21dc8:	4602      	mov	r2, r0
   21dca:	693b      	ldr	r3, [r7, #16]
   21dcc:	4293      	cmp	r3, r2
   21dce:	d20e      	bcs.n	21dee <sys_heap_alloc+0x74>
		split_chunks(h, c, c + chunk_sz);
   21dd0:	68fa      	ldr	r2, [r7, #12]
   21dd2:	693b      	ldr	r3, [r7, #16]
   21dd4:	4413      	add	r3, r2
   21dd6:	461a      	mov	r2, r3
   21dd8:	68f9      	ldr	r1, [r7, #12]
   21dda:	6978      	ldr	r0, [r7, #20]
   21ddc:	f7ff fea7 	bl	21b2e <split_chunks>
		free_list_add(h, c + chunk_sz);
   21de0:	68fa      	ldr	r2, [r7, #12]
   21de2:	693b      	ldr	r3, [r7, #16]
   21de4:	4413      	add	r3, r2
   21de6:	4619      	mov	r1, r3
   21de8:	6978      	ldr	r0, [r7, #20]
   21dea:	f7ff fe7e 	bl	21aea <free_list_add>
	set_chunk_used(h, c, true);
   21dee:	2201      	movs	r2, #1
   21df0:	68f9      	ldr	r1, [r7, #12]
   21df2:	6978      	ldr	r0, [r7, #20]
   21df4:	f7ff fc63 	bl	216be <set_chunk_used>
	return chunk_mem(h, c);
   21df8:	68f9      	ldr	r1, [r7, #12]
   21dfa:	6978      	ldr	r0, [r7, #20]
   21dfc:	f7ff fdb7 	bl	2196e <chunk_mem>
   21e00:	4603      	mov	r3, r0
}
   21e02:	4618      	mov	r0, r3
   21e04:	3718      	adds	r7, #24
   21e06:	46bd      	mov	sp, r7
   21e08:	bd80      	pop	{r7, pc}

00021e0a <isupper>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int isupper(int a)
{
   21e0a:	b480      	push	{r7}
   21e0c:	b083      	sub	sp, #12
   21e0e:	af00      	add	r7, sp, #0
   21e10:	6078      	str	r0, [r7, #4]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   21e12:	687b      	ldr	r3, [r7, #4]
   21e14:	3b41      	subs	r3, #65	; 0x41
   21e16:	2b19      	cmp	r3, #25
   21e18:	bf94      	ite	ls
   21e1a:	2301      	movls	r3, #1
   21e1c:	2300      	movhi	r3, #0
   21e1e:	b2db      	uxtb	r3, r3
}
   21e20:	4618      	mov	r0, r3
   21e22:	370c      	adds	r7, #12
   21e24:	46bd      	mov	sp, r7
   21e26:	bc80      	pop	{r7}
   21e28:	4770      	bx	lr

00021e2a <isdigit>:
	return (int)((((unsigned)c) >= ' ') &&
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
   21e2a:	b480      	push	{r7}
   21e2c:	b083      	sub	sp, #12
   21e2e:	af00      	add	r7, sp, #0
   21e30:	6078      	str	r0, [r7, #4]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   21e32:	687b      	ldr	r3, [r7, #4]
   21e34:	3b30      	subs	r3, #48	; 0x30
   21e36:	2b09      	cmp	r3, #9
   21e38:	bf94      	ite	ls
   21e3a:	2301      	movls	r3, #1
   21e3c:	2300      	movhi	r3, #0
   21e3e:	b2db      	uxtb	r3, r3
}
   21e40:	4618      	mov	r0, r3
   21e42:	370c      	adds	r7, #12
   21e44:	46bd      	mov	sp, r7
   21e46:	bc80      	pop	{r7}
   21e48:	4770      	bx	lr

00021e4a <extract_decimal>:
{
   21e4a:	b580      	push	{r7, lr}
   21e4c:	b084      	sub	sp, #16
   21e4e:	af00      	add	r7, sp, #0
   21e50:	6078      	str	r0, [r7, #4]
	const char *sp = *str;
   21e52:	687b      	ldr	r3, [r7, #4]
   21e54:	681b      	ldr	r3, [r3, #0]
   21e56:	60fb      	str	r3, [r7, #12]
	size_t val = 0;
   21e58:	2300      	movs	r3, #0
   21e5a:	60bb      	str	r3, [r7, #8]
	while (isdigit((int)(unsigned char)*sp)) {
   21e5c:	e00c      	b.n	21e78 <extract_decimal+0x2e>
		val = 10U * val + *sp++ - '0';
   21e5e:	68ba      	ldr	r2, [r7, #8]
   21e60:	4613      	mov	r3, r2
   21e62:	009b      	lsls	r3, r3, #2
   21e64:	4413      	add	r3, r2
   21e66:	005b      	lsls	r3, r3, #1
   21e68:	4619      	mov	r1, r3
   21e6a:	68fb      	ldr	r3, [r7, #12]
   21e6c:	1c5a      	adds	r2, r3, #1
   21e6e:	60fa      	str	r2, [r7, #12]
   21e70:	781b      	ldrb	r3, [r3, #0]
   21e72:	440b      	add	r3, r1
   21e74:	3b30      	subs	r3, #48	; 0x30
   21e76:	60bb      	str	r3, [r7, #8]
	while (isdigit((int)(unsigned char)*sp)) {
   21e78:	68fb      	ldr	r3, [r7, #12]
   21e7a:	781b      	ldrb	r3, [r3, #0]
   21e7c:	4618      	mov	r0, r3
   21e7e:	f7ff ffd4 	bl	21e2a <isdigit>
   21e82:	4603      	mov	r3, r0
   21e84:	2b00      	cmp	r3, #0
   21e86:	d1ea      	bne.n	21e5e <extract_decimal+0x14>
	*str = sp;
   21e88:	687b      	ldr	r3, [r7, #4]
   21e8a:	68fa      	ldr	r2, [r7, #12]
   21e8c:	601a      	str	r2, [r3, #0]
	return val;
   21e8e:	68bb      	ldr	r3, [r7, #8]
}
   21e90:	4618      	mov	r0, r3
   21e92:	3710      	adds	r7, #16
   21e94:	46bd      	mov	sp, r7
   21e96:	bd80      	pop	{r7, pc}

00021e98 <extract_width>:
{
   21e98:	b580      	push	{r7, lr}
   21e9a:	b084      	sub	sp, #16
   21e9c:	af00      	add	r7, sp, #0
   21e9e:	6078      	str	r0, [r7, #4]
   21ea0:	6039      	str	r1, [r7, #0]
	conv->width_present = true;
   21ea2:	687a      	ldr	r2, [r7, #4]
   21ea4:	7813      	ldrb	r3, [r2, #0]
   21ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21eaa:	7013      	strb	r3, [r2, #0]
	if (*sp == '*') {
   21eac:	683b      	ldr	r3, [r7, #0]
   21eae:	781b      	ldrb	r3, [r3, #0]
   21eb0:	2b2a      	cmp	r3, #42	; 0x2a
   21eb2:	d109      	bne.n	21ec8 <extract_width+0x30>
		conv->width_star = true;
   21eb4:	687a      	ldr	r2, [r7, #4]
   21eb6:	7853      	ldrb	r3, [r2, #1]
   21eb8:	f043 0301 	orr.w	r3, r3, #1
   21ebc:	7053      	strb	r3, [r2, #1]
		return ++sp;
   21ebe:	683b      	ldr	r3, [r7, #0]
   21ec0:	3301      	adds	r3, #1
   21ec2:	603b      	str	r3, [r7, #0]
   21ec4:	683b      	ldr	r3, [r7, #0]
   21ec6:	e031      	b.n	21f2c <extract_width+0x94>
	const char *wp = sp;
   21ec8:	683b      	ldr	r3, [r7, #0]
   21eca:	60fb      	str	r3, [r7, #12]
	size_t width = extract_decimal(&sp);
   21ecc:	463b      	mov	r3, r7
   21ece:	4618      	mov	r0, r3
   21ed0:	f7ff ffbb 	bl	21e4a <extract_decimal>
   21ed4:	60b8      	str	r0, [r7, #8]
	if (sp != wp) {
   21ed6:	683b      	ldr	r3, [r7, #0]
   21ed8:	68fa      	ldr	r2, [r7, #12]
   21eda:	429a      	cmp	r2, r3
   21edc:	d025      	beq.n	21f2a <extract_width+0x92>
		conv->width_present = true;
   21ede:	687a      	ldr	r2, [r7, #4]
   21ee0:	7813      	ldrb	r3, [r2, #0]
   21ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21ee6:	7013      	strb	r3, [r2, #0]
		conv->width_value = width;
   21ee8:	68ba      	ldr	r2, [r7, #8]
   21eea:	687b      	ldr	r3, [r7, #4]
   21eec:	605a      	str	r2, [r3, #4]
		conv->unsupported |= ((conv->width_value < 0)
   21eee:	687b      	ldr	r3, [r7, #4]
   21ef0:	781b      	ldrb	r3, [r3, #0]
   21ef2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   21ef6:	b2db      	uxtb	r3, r3
   21ef8:	461a      	mov	r2, r3
   21efa:	687b      	ldr	r3, [r7, #4]
   21efc:	685b      	ldr	r3, [r3, #4]
				      || (width != (size_t)conv->width_value));
   21efe:	2b00      	cmp	r3, #0
   21f00:	db05      	blt.n	21f0e <extract_width+0x76>
   21f02:	687b      	ldr	r3, [r7, #4]
   21f04:	685b      	ldr	r3, [r3, #4]
   21f06:	4619      	mov	r1, r3
   21f08:	68bb      	ldr	r3, [r7, #8]
   21f0a:	428b      	cmp	r3, r1
   21f0c:	d001      	beq.n	21f12 <extract_width+0x7a>
   21f0e:	2301      	movs	r3, #1
   21f10:	e000      	b.n	21f14 <extract_width+0x7c>
   21f12:	2300      	movs	r3, #0
		conv->unsupported |= ((conv->width_value < 0)
   21f14:	4313      	orrs	r3, r2
   21f16:	2b00      	cmp	r3, #0
   21f18:	bf14      	ite	ne
   21f1a:	2301      	movne	r3, #1
   21f1c:	2300      	moveq	r3, #0
   21f1e:	b2d9      	uxtb	r1, r3
   21f20:	687a      	ldr	r2, [r7, #4]
   21f22:	7813      	ldrb	r3, [r2, #0]
   21f24:	f361 0341 	bfi	r3, r1, #1, #1
   21f28:	7013      	strb	r3, [r2, #0]
	return sp;
   21f2a:	683b      	ldr	r3, [r7, #0]
}
   21f2c:	4618      	mov	r0, r3
   21f2e:	3710      	adds	r7, #16
   21f30:	46bd      	mov	sp, r7
   21f32:	bd80      	pop	{r7, pc}

00021f34 <extract_prec>:
{
   21f34:	b580      	push	{r7, lr}
   21f36:	b084      	sub	sp, #16
   21f38:	af00      	add	r7, sp, #0
   21f3a:	6078      	str	r0, [r7, #4]
   21f3c:	6039      	str	r1, [r7, #0]
	conv->prec_present = (*sp == '.');
   21f3e:	683b      	ldr	r3, [r7, #0]
   21f40:	781b      	ldrb	r3, [r3, #0]
   21f42:	2b2e      	cmp	r3, #46	; 0x2e
   21f44:	bf0c      	ite	eq
   21f46:	2301      	moveq	r3, #1
   21f48:	2300      	movne	r3, #0
   21f4a:	b2d9      	uxtb	r1, r3
   21f4c:	687a      	ldr	r2, [r7, #4]
   21f4e:	7853      	ldrb	r3, [r2, #1]
   21f50:	f361 0341 	bfi	r3, r1, #1, #1
   21f54:	7053      	strb	r3, [r2, #1]
	if (!conv->prec_present) {
   21f56:	687b      	ldr	r3, [r7, #4]
   21f58:	785b      	ldrb	r3, [r3, #1]
   21f5a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   21f5e:	b2db      	uxtb	r3, r3
   21f60:	f083 0301 	eor.w	r3, r3, #1
   21f64:	b2db      	uxtb	r3, r3
   21f66:	2b00      	cmp	r3, #0
   21f68:	d001      	beq.n	21f6e <extract_prec+0x3a>
		return sp;
   21f6a:	683b      	ldr	r3, [r7, #0]
   21f6c:	e037      	b.n	21fde <extract_prec+0xaa>
	++sp;
   21f6e:	683b      	ldr	r3, [r7, #0]
   21f70:	3301      	adds	r3, #1
   21f72:	603b      	str	r3, [r7, #0]
	if (*sp == '*') {
   21f74:	683b      	ldr	r3, [r7, #0]
   21f76:	781b      	ldrb	r3, [r3, #0]
   21f78:	2b2a      	cmp	r3, #42	; 0x2a
   21f7a:	d109      	bne.n	21f90 <extract_prec+0x5c>
		conv->prec_star = true;
   21f7c:	687a      	ldr	r2, [r7, #4]
   21f7e:	7853      	ldrb	r3, [r2, #1]
   21f80:	f043 0304 	orr.w	r3, r3, #4
   21f84:	7053      	strb	r3, [r2, #1]
		return ++sp;
   21f86:	683b      	ldr	r3, [r7, #0]
   21f88:	3301      	adds	r3, #1
   21f8a:	603b      	str	r3, [r7, #0]
   21f8c:	683b      	ldr	r3, [r7, #0]
   21f8e:	e026      	b.n	21fde <extract_prec+0xaa>
	size_t prec = extract_decimal(&sp);
   21f90:	463b      	mov	r3, r7
   21f92:	4618      	mov	r0, r3
   21f94:	f7ff ff59 	bl	21e4a <extract_decimal>
   21f98:	60f8      	str	r0, [r7, #12]
	conv->prec_value = prec;
   21f9a:	68fa      	ldr	r2, [r7, #12]
   21f9c:	687b      	ldr	r3, [r7, #4]
   21f9e:	609a      	str	r2, [r3, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   21fa0:	687b      	ldr	r3, [r7, #4]
   21fa2:	781b      	ldrb	r3, [r3, #0]
   21fa4:	f3c3 0340 	ubfx	r3, r3, #1, #1
   21fa8:	b2db      	uxtb	r3, r3
   21faa:	461a      	mov	r2, r3
   21fac:	687b      	ldr	r3, [r7, #4]
   21fae:	689b      	ldr	r3, [r3, #8]
			      || (prec != (size_t)conv->prec_value));
   21fb0:	2b00      	cmp	r3, #0
   21fb2:	db05      	blt.n	21fc0 <extract_prec+0x8c>
   21fb4:	687b      	ldr	r3, [r7, #4]
   21fb6:	689b      	ldr	r3, [r3, #8]
   21fb8:	4619      	mov	r1, r3
   21fba:	68fb      	ldr	r3, [r7, #12]
   21fbc:	428b      	cmp	r3, r1
   21fbe:	d001      	beq.n	21fc4 <extract_prec+0x90>
   21fc0:	2301      	movs	r3, #1
   21fc2:	e000      	b.n	21fc6 <extract_prec+0x92>
   21fc4:	2300      	movs	r3, #0
	conv->unsupported |= ((conv->prec_value < 0)
   21fc6:	4313      	orrs	r3, r2
   21fc8:	2b00      	cmp	r3, #0
   21fca:	bf14      	ite	ne
   21fcc:	2301      	movne	r3, #1
   21fce:	2300      	moveq	r3, #0
   21fd0:	b2d9      	uxtb	r1, r3
   21fd2:	687a      	ldr	r2, [r7, #4]
   21fd4:	7813      	ldrb	r3, [r2, #0]
   21fd6:	f361 0341 	bfi	r3, r1, #1, #1
   21fda:	7013      	strb	r3, [r2, #0]
	return sp;
   21fdc:	683b      	ldr	r3, [r7, #0]
}
   21fde:	4618      	mov	r0, r3
   21fe0:	3710      	adds	r7, #16
   21fe2:	46bd      	mov	sp, r7
   21fe4:	bd80      	pop	{r7, pc}

00021fe6 <extract_conversion>:
{
   21fe6:	b580      	push	{r7, lr}
   21fe8:	b086      	sub	sp, #24
   21fea:	af00      	add	r7, sp, #0
   21fec:	6078      	str	r0, [r7, #4]
   21fee:	6039      	str	r1, [r7, #0]
	*conv = (struct conversion) {
   21ff0:	687b      	ldr	r3, [r7, #4]
   21ff2:	461a      	mov	r2, r3
   21ff4:	2300      	movs	r3, #0
   21ff6:	6013      	str	r3, [r2, #0]
   21ff8:	6053      	str	r3, [r2, #4]
   21ffa:	6093      	str	r3, [r2, #8]
	++sp;
   21ffc:	683b      	ldr	r3, [r7, #0]
   21ffe:	3301      	adds	r3, #1
   22000:	603b      	str	r3, [r7, #0]
	if (*sp == '%') {
   22002:	683b      	ldr	r3, [r7, #0]
   22004:	781b      	ldrb	r3, [r3, #0]
   22006:	2b25      	cmp	r3, #37	; 0x25
   22008:	d107      	bne.n	2201a <extract_conversion+0x34>
		conv->specifier = *sp++;
   2200a:	683b      	ldr	r3, [r7, #0]
   2200c:	1c5a      	adds	r2, r3, #1
   2200e:	603a      	str	r2, [r7, #0]
   22010:	781a      	ldrb	r2, [r3, #0]
   22012:	687b      	ldr	r3, [r7, #4]
   22014:	70da      	strb	r2, [r3, #3]
		return sp;
   22016:	683b      	ldr	r3, [r7, #0]
   22018:	e019      	b.n	2204e <extract_conversion+0x68>
	sp = extract_flags(conv, sp);
   2201a:	6839      	ldr	r1, [r7, #0]
   2201c:	6878      	ldr	r0, [r7, #4]
   2201e:	f7ef fb23 	bl	11668 <extract_flags>
   22022:	6038      	str	r0, [r7, #0]
	sp = extract_width(conv, sp);
   22024:	6839      	ldr	r1, [r7, #0]
   22026:	6878      	ldr	r0, [r7, #4]
   22028:	f7ff ff36 	bl	21e98 <extract_width>
   2202c:	6038      	str	r0, [r7, #0]
	sp = extract_prec(conv, sp);
   2202e:	6839      	ldr	r1, [r7, #0]
   22030:	6878      	ldr	r0, [r7, #4]
   22032:	f7ff ff7f 	bl	21f34 <extract_prec>
   22036:	6038      	str	r0, [r7, #0]
	sp = extract_length(conv, sp);
   22038:	6839      	ldr	r1, [r7, #0]
   2203a:	6878      	ldr	r0, [r7, #4]
   2203c:	f7ef fb88 	bl	11750 <extract_length>
   22040:	6038      	str	r0, [r7, #0]
	sp = extract_specifier(conv, sp);
   22042:	6839      	ldr	r1, [r7, #0]
   22044:	6878      	ldr	r0, [r7, #4]
   22046:	f7ef fc59 	bl	118fc <extract_specifier>
   2204a:	6038      	str	r0, [r7, #0]
	return sp;
   2204c:	683b      	ldr	r3, [r7, #0]
}
   2204e:	4618      	mov	r0, r3
   22050:	3718      	adds	r7, #24
   22052:	46bd      	mov	sp, r7
   22054:	bd80      	pop	{r7, pc}

00022056 <conversion_radix>:
{
   22056:	b480      	push	{r7}
   22058:	b083      	sub	sp, #12
   2205a:	af00      	add	r7, sp, #0
   2205c:	4603      	mov	r3, r0
   2205e:	71fb      	strb	r3, [r7, #7]
	switch (specifier) {
   22060:	79fb      	ldrb	r3, [r7, #7]
   22062:	2b78      	cmp	r3, #120	; 0x78
   22064:	d00d      	beq.n	22082 <conversion_radix+0x2c>
   22066:	2b78      	cmp	r3, #120	; 0x78
   22068:	dc07      	bgt.n	2207a <conversion_radix+0x24>
   2206a:	2b70      	cmp	r3, #112	; 0x70
   2206c:	d009      	beq.n	22082 <conversion_radix+0x2c>
   2206e:	2b70      	cmp	r3, #112	; 0x70
   22070:	dc03      	bgt.n	2207a <conversion_radix+0x24>
   22072:	2b58      	cmp	r3, #88	; 0x58
   22074:	d005      	beq.n	22082 <conversion_radix+0x2c>
   22076:	2b6f      	cmp	r3, #111	; 0x6f
   22078:	d001      	beq.n	2207e <conversion_radix+0x28>
		return 10;
   2207a:	230a      	movs	r3, #10
   2207c:	e002      	b.n	22084 <conversion_radix+0x2e>
		return 8;
   2207e:	2308      	movs	r3, #8
   22080:	e000      	b.n	22084 <conversion_radix+0x2e>
		return 16;
   22082:	2310      	movs	r3, #16
}
   22084:	4618      	mov	r0, r3
   22086:	370c      	adds	r7, #12
   22088:	46bd      	mov	sp, r7
   2208a:	bc80      	pop	{r7}
   2208c:	4770      	bx	lr

0002208e <encode_uint>:
{
   2208e:	b580      	push	{r7, lr}
   22090:	b088      	sub	sp, #32
   22092:	af00      	add	r7, sp, #0
   22094:	e9c7 0102 	strd	r0, r1, [r7, #8]
   22098:	607a      	str	r2, [r7, #4]
   2209a:	603b      	str	r3, [r7, #0]
	bool upcase = isupper((int)conv->specifier);
   2209c:	687b      	ldr	r3, [r7, #4]
   2209e:	78db      	ldrb	r3, [r3, #3]
   220a0:	4618      	mov	r0, r3
   220a2:	f7ff feb2 	bl	21e0a <isupper>
   220a6:	4603      	mov	r3, r0
   220a8:	2b00      	cmp	r3, #0
   220aa:	bf14      	ite	ne
   220ac:	2301      	movne	r3, #1
   220ae:	2300      	moveq	r3, #0
   220b0:	76fb      	strb	r3, [r7, #27]
	const unsigned int radix = conversion_radix(conv->specifier);
   220b2:	687b      	ldr	r3, [r7, #4]
   220b4:	78db      	ldrb	r3, [r3, #3]
   220b6:	4618      	mov	r0, r3
   220b8:	f7ff ffcd 	bl	22056 <conversion_radix>
   220bc:	6178      	str	r0, [r7, #20]
	char *bp = bps + (bpe - bps);
   220be:	6abb      	ldr	r3, [r7, #40]	; 0x28
   220c0:	61fb      	str	r3, [r7, #28]
		unsigned int lsv = (unsigned int)(value % radix);
   220c2:	697b      	ldr	r3, [r7, #20]
   220c4:	461a      	mov	r2, r3
   220c6:	f04f 0300 	mov.w	r3, #0
   220ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   220ce:	f7ee f8b5 	bl	1023c <__aeabi_uldivmod>
   220d2:	4613      	mov	r3, r2
   220d4:	613b      	str	r3, [r7, #16]
		*--bp = (lsv <= 9) ? ('0' + lsv)
   220d6:	693b      	ldr	r3, [r7, #16]
   220d8:	2b09      	cmp	r3, #9
   220da:	d804      	bhi.n	220e6 <encode_uint+0x58>
   220dc:	693b      	ldr	r3, [r7, #16]
   220de:	b2db      	uxtb	r3, r3
   220e0:	3330      	adds	r3, #48	; 0x30
   220e2:	b2db      	uxtb	r3, r3
   220e4:	e00b      	b.n	220fe <encode_uint+0x70>
   220e6:	7efb      	ldrb	r3, [r7, #27]
   220e8:	2b00      	cmp	r3, #0
   220ea:	d004      	beq.n	220f6 <encode_uint+0x68>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   220ec:	693b      	ldr	r3, [r7, #16]
   220ee:	b2db      	uxtb	r3, r3
		*--bp = (lsv <= 9) ? ('0' + lsv)
   220f0:	3337      	adds	r3, #55	; 0x37
   220f2:	b2db      	uxtb	r3, r3
   220f4:	e003      	b.n	220fe <encode_uint+0x70>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   220f6:	693b      	ldr	r3, [r7, #16]
   220f8:	b2db      	uxtb	r3, r3
		*--bp = (lsv <= 9) ? ('0' + lsv)
   220fa:	3357      	adds	r3, #87	; 0x57
   220fc:	b2db      	uxtb	r3, r3
   220fe:	69fa      	ldr	r2, [r7, #28]
   22100:	3a01      	subs	r2, #1
   22102:	61fa      	str	r2, [r7, #28]
   22104:	69fa      	ldr	r2, [r7, #28]
   22106:	7013      	strb	r3, [r2, #0]
		value /= radix;
   22108:	697b      	ldr	r3, [r7, #20]
   2210a:	461a      	mov	r2, r3
   2210c:	f04f 0300 	mov.w	r3, #0
   22110:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   22114:	f7ee f892 	bl	1023c <__aeabi_uldivmod>
   22118:	4602      	mov	r2, r0
   2211a:	460b      	mov	r3, r1
   2211c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	} while ((value != 0) && (bps < bp));
   22120:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   22124:	4313      	orrs	r3, r2
   22126:	d003      	beq.n	22130 <encode_uint+0xa2>
   22128:	683a      	ldr	r2, [r7, #0]
   2212a:	69fb      	ldr	r3, [r7, #28]
   2212c:	429a      	cmp	r2, r3
   2212e:	d3c8      	bcc.n	220c2 <encode_uint+0x34>
	if (conv->flag_hash) {
   22130:	687b      	ldr	r3, [r7, #4]
   22132:	781b      	ldrb	r3, [r3, #0]
   22134:	f003 0320 	and.w	r3, r3, #32
   22138:	b2db      	uxtb	r3, r3
   2213a:	2b00      	cmp	r3, #0
   2213c:	d010      	beq.n	22160 <encode_uint+0xd2>
		if (radix == 8) {
   2213e:	697b      	ldr	r3, [r7, #20]
   22140:	2b08      	cmp	r3, #8
   22142:	d105      	bne.n	22150 <encode_uint+0xc2>
			conv->altform_0 = true;
   22144:	687a      	ldr	r2, [r7, #4]
   22146:	7893      	ldrb	r3, [r2, #2]
   22148:	f043 0308 	orr.w	r3, r3, #8
   2214c:	7093      	strb	r3, [r2, #2]
   2214e:	e007      	b.n	22160 <encode_uint+0xd2>
		} else if (radix == 16) {
   22150:	697b      	ldr	r3, [r7, #20]
   22152:	2b10      	cmp	r3, #16
   22154:	d104      	bne.n	22160 <encode_uint+0xd2>
			conv->altform_0c = true;
   22156:	687a      	ldr	r2, [r7, #4]
   22158:	7893      	ldrb	r3, [r2, #2]
   2215a:	f043 0310 	orr.w	r3, r3, #16
   2215e:	7093      	strb	r3, [r2, #2]
	return bp;
   22160:	69fb      	ldr	r3, [r7, #28]
}
   22162:	4618      	mov	r0, r3
   22164:	3720      	adds	r7, #32
   22166:	46bd      	mov	sp, r7
   22168:	bd80      	pop	{r7, pc}

0002216a <outs>:
{
   2216a:	b580      	push	{r7, lr}
   2216c:	b086      	sub	sp, #24
   2216e:	af00      	add	r7, sp, #0
   22170:	60f8      	str	r0, [r7, #12]
   22172:	60b9      	str	r1, [r7, #8]
   22174:	607a      	str	r2, [r7, #4]
   22176:	603b      	str	r3, [r7, #0]
	size_t count = 0;
   22178:	2300      	movs	r3, #0
   2217a:	617b      	str	r3, [r7, #20]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2217c:	e011      	b.n	221a2 <outs+0x38>
		int rc = out((int)*sp++, ctx);
   2217e:	687b      	ldr	r3, [r7, #4]
   22180:	1c5a      	adds	r2, r3, #1
   22182:	607a      	str	r2, [r7, #4]
   22184:	781b      	ldrb	r3, [r3, #0]
   22186:	461a      	mov	r2, r3
   22188:	68fb      	ldr	r3, [r7, #12]
   2218a:	68b9      	ldr	r1, [r7, #8]
   2218c:	4610      	mov	r0, r2
   2218e:	4798      	blx	r3
   22190:	6138      	str	r0, [r7, #16]
		if (rc < 0) {
   22192:	693b      	ldr	r3, [r7, #16]
   22194:	2b00      	cmp	r3, #0
   22196:	da01      	bge.n	2219c <outs+0x32>
			return rc;
   22198:	693b      	ldr	r3, [r7, #16]
   2219a:	e00e      	b.n	221ba <outs+0x50>
		++count;
   2219c:	697b      	ldr	r3, [r7, #20]
   2219e:	3301      	adds	r3, #1
   221a0:	617b      	str	r3, [r7, #20]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   221a2:	687a      	ldr	r2, [r7, #4]
   221a4:	683b      	ldr	r3, [r7, #0]
   221a6:	429a      	cmp	r2, r3
   221a8:	d3e9      	bcc.n	2217e <outs+0x14>
   221aa:	683b      	ldr	r3, [r7, #0]
   221ac:	2b00      	cmp	r3, #0
   221ae:	d103      	bne.n	221b8 <outs+0x4e>
   221b0:	687b      	ldr	r3, [r7, #4]
   221b2:	781b      	ldrb	r3, [r3, #0]
   221b4:	2b00      	cmp	r3, #0
   221b6:	d1e2      	bne.n	2217e <outs+0x14>
	return (int)count;
   221b8:	697b      	ldr	r3, [r7, #20]
}
   221ba:	4618      	mov	r0, r3
   221bc:	3718      	adds	r7, #24
   221be:	46bd      	mov	sp, r7
   221c0:	bd80      	pop	{r7, pc}

000221c2 <assert_post_action>:
#ifdef CONFIG_ASSERT_NO_FILE_INFO
__weak void assert_post_action(void)
#else
__weak void assert_post_action(const char *file, unsigned int line)
#endif
{
   221c2:	b480      	push	{r7}
   221c4:	b083      	sub	sp, #12
   221c6:	af00      	add	r7, sp, #0
   221c8:	6078      	str	r0, [r7, #4]
   221ca:	6039      	str	r1, [r7, #0]
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   221cc:	4040      	eors	r0, r0
   221ce:	f380 8811 	msr	BASEPRI, r0
   221d2:	f04f 0004 	mov.w	r0, #4
   221d6:	df02      	svc	2
}
   221d8:	bf00      	nop
   221da:	370c      	adds	r7, #12
   221dc:	46bd      	mov	sp, r7
   221de:	bc80      	pop	{r7}
   221e0:	4770      	bx	lr

000221e2 <_ConfigAbsSyms>:

/* file is auto-generated, do not modify ! */

#include <toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
   221e2:	b480      	push	{r7}
   221e4:	af00      	add	r7, sp, #0
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   221e6:	bf00      	nop
   221e8:	46bd      	mov	sp, r7
   221ea:	bc80      	pop	{r7}
   221ec:	4770      	bx	lr

000221ee <arch_busy_wait>:

void arch_busy_wait(uint32_t time_us)
{
   221ee:	b580      	push	{r7, lr}
   221f0:	b082      	sub	sp, #8
   221f2:	af00      	add	r7, sp, #0
   221f4:	6078      	str	r0, [r7, #4]
	nrfx_coredep_delay_us(time_us);
   221f6:	6878      	ldr	r0, [r7, #4]
   221f8:	f7f0 f9b0 	bl	1255c <nrfx_coredep_delay_us>
}
   221fc:	bf00      	nop
   221fe:	3708      	adds	r7, #8
   22200:	46bd      	mov	sp, r7
   22202:	bd80      	pop	{r7, pc}

00022204 <k_is_user_context>:
{
   22204:	b480      	push	{r7}
   22206:	af00      	add	r7, sp, #0
	return false;
   22208:	2300      	movs	r3, #0
}
   2220a:	4618      	mov	r0, r3
   2220c:	46bd      	mov	sp, r7
   2220e:	bc80      	pop	{r7}
   22210:	4770      	bx	lr

00022212 <nrf_regulators_system_off>:
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
   22212:	b480      	push	{r7}
   22214:	b083      	sub	sp, #12
   22216:	af00      	add	r7, sp, #0
   22218:	6078      	str	r0, [r7, #4]
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   2221a:	687b      	ldr	r3, [r7, #4]
   2221c:	2201      	movs	r2, #1
   2221e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   22222:	f3bf 8f4f 	dsb	sy
}
   22226:	bf00      	nop
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   22228:	bf20      	wfe
   2222a:	e7fd      	b.n	22228 <nrf_regulators_system_off+0x16>

0002222c <log_list_init>:
 */

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
   2222c:	b480      	push	{r7}
   2222e:	b083      	sub	sp, #12
   22230:	af00      	add	r7, sp, #0
   22232:	6078      	str	r0, [r7, #4]
	list->tail = NULL;
   22234:	687b      	ldr	r3, [r7, #4]
   22236:	2200      	movs	r2, #0
   22238:	605a      	str	r2, [r3, #4]
	list->head = NULL;
   2223a:	687b      	ldr	r3, [r7, #4]
   2223c:	2200      	movs	r2, #0
   2223e:	601a      	str	r2, [r3, #0]
}
   22240:	bf00      	nop
   22242:	370c      	adds	r7, #12
   22244:	46bd      	mov	sp, r7
   22246:	bc80      	pop	{r7}
   22248:	4770      	bx	lr

0002224a <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
   2224a:	b480      	push	{r7}
   2224c:	b083      	sub	sp, #12
   2224e:	af00      	add	r7, sp, #0
   22250:	6078      	str	r0, [r7, #4]
   22252:	6039      	str	r1, [r7, #0]
	if (list->head == NULL) {
   22254:	687b      	ldr	r3, [r7, #4]
   22256:	681b      	ldr	r3, [r3, #0]
   22258:	2b00      	cmp	r3, #0
   2225a:	d103      	bne.n	22264 <log_list_add_tail+0x1a>
		list->head = msg;
   2225c:	687b      	ldr	r3, [r7, #4]
   2225e:	683a      	ldr	r2, [r7, #0]
   22260:	601a      	str	r2, [r3, #0]
   22262:	e003      	b.n	2226c <log_list_add_tail+0x22>
	} else {
		list->tail->next = msg;
   22264:	687b      	ldr	r3, [r7, #4]
   22266:	685b      	ldr	r3, [r3, #4]
   22268:	683a      	ldr	r2, [r7, #0]
   2226a:	601a      	str	r2, [r3, #0]
	}

	list->tail = msg;
   2226c:	687b      	ldr	r3, [r7, #4]
   2226e:	683a      	ldr	r2, [r7, #0]
   22270:	605a      	str	r2, [r3, #4]
	msg->next = NULL;
   22272:	683b      	ldr	r3, [r7, #0]
   22274:	2200      	movs	r2, #0
   22276:	601a      	str	r2, [r3, #0]
}
   22278:	bf00      	nop
   2227a:	370c      	adds	r7, #12
   2227c:	46bd      	mov	sp, r7
   2227e:	bc80      	pop	{r7}
   22280:	4770      	bx	lr

00022282 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
   22282:	b480      	push	{r7}
   22284:	b083      	sub	sp, #12
   22286:	af00      	add	r7, sp, #0
   22288:	6078      	str	r0, [r7, #4]
	return list->head;
   2228a:	687b      	ldr	r3, [r7, #4]
   2228c:	681b      	ldr	r3, [r3, #0]
}
   2228e:	4618      	mov	r0, r3
   22290:	370c      	adds	r7, #12
   22292:	46bd      	mov	sp, r7
   22294:	bc80      	pop	{r7}
   22296:	4770      	bx	lr

00022298 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   22298:	b480      	push	{r7}
   2229a:	b085      	sub	sp, #20
   2229c:	af00      	add	r7, sp, #0
   2229e:	6078      	str	r0, [r7, #4]
	struct log_msg *msg = list->head;
   222a0:	687b      	ldr	r3, [r7, #4]
   222a2:	681b      	ldr	r3, [r3, #0]
   222a4:	60fb      	str	r3, [r7, #12]

	if (list->head != NULL) {
   222a6:	687b      	ldr	r3, [r7, #4]
   222a8:	681b      	ldr	r3, [r3, #0]
   222aa:	2b00      	cmp	r3, #0
   222ac:	d004      	beq.n	222b8 <log_list_head_get+0x20>
		list->head = list->head->next;
   222ae:	687b      	ldr	r3, [r7, #4]
   222b0:	681b      	ldr	r3, [r3, #0]
   222b2:	681a      	ldr	r2, [r3, #0]
   222b4:	687b      	ldr	r3, [r7, #4]
   222b6:	601a      	str	r2, [r3, #0]
	}

	return msg;
   222b8:	68fb      	ldr	r3, [r7, #12]
}
   222ba:	4618      	mov	r0, r3
   222bc:	3714      	adds	r7, #20
   222be:	46bd      	mov	sp, r7
   222c0:	bc80      	pop	{r7}
   222c2:	4770      	bx	lr

000222c4 <atomic_add>:
 * @param value Value to add.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
   222c4:	b480      	push	{r7}
   222c6:	b083      	sub	sp, #12
   222c8:	af00      	add	r7, sp, #0
   222ca:	6078      	str	r0, [r7, #4]
   222cc:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   222ce:	683a      	ldr	r2, [r7, #0]
   222d0:	687b      	ldr	r3, [r7, #4]
   222d2:	e8d3 1fef 	ldaex	r1, [r3]
   222d6:	eb01 0002 	add.w	r0, r1, r2
   222da:	e8c3 0fec 	stlex	ip, r0, [r3]
   222de:	f1bc 0f00 	cmp.w	ip, #0
   222e2:	d1f6      	bne.n	222d2 <atomic_add+0xe>
   222e4:	460b      	mov	r3, r1
}
   222e6:	4618      	mov	r0, r3
   222e8:	370c      	adds	r7, #12
   222ea:	46bd      	mov	sp, r7
   222ec:	bc80      	pop	{r7}
   222ee:	4770      	bx	lr

000222f0 <atomic_sub>:
 * @param value Value to subtract.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
   222f0:	b480      	push	{r7}
   222f2:	b083      	sub	sp, #12
   222f4:	af00      	add	r7, sp, #0
   222f6:	6078      	str	r0, [r7, #4]
   222f8:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   222fa:	683a      	ldr	r2, [r7, #0]
   222fc:	687b      	ldr	r3, [r7, #4]
   222fe:	e8d3 1fef 	ldaex	r1, [r3]
   22302:	eba1 0002 	sub.w	r0, r1, r2
   22306:	e8c3 0fec 	stlex	ip, r0, [r3]
   2230a:	f1bc 0f00 	cmp.w	ip, #0
   2230e:	d1f6      	bne.n	222fe <atomic_sub+0xe>
   22310:	460b      	mov	r3, r1
}
   22312:	4618      	mov	r0, r3
   22314:	370c      	adds	r7, #12
   22316:	46bd      	mov	sp, r7
   22318:	bc80      	pop	{r7}
   2231a:	4770      	bx	lr

0002231c <atomic_inc>:
 * @param target Address of atomic variable.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_inc(atomic_t *target)
{
   2231c:	b580      	push	{r7, lr}
   2231e:	b082      	sub	sp, #8
   22320:	af00      	add	r7, sp, #0
   22322:	6078      	str	r0, [r7, #4]
	return atomic_add(target, 1);
   22324:	2101      	movs	r1, #1
   22326:	6878      	ldr	r0, [r7, #4]
   22328:	f7ff ffcc 	bl	222c4 <atomic_add>
   2232c:	4603      	mov	r3, r0
}
   2232e:	4618      	mov	r0, r3
   22330:	3708      	adds	r7, #8
   22332:	46bd      	mov	sp, r7
   22334:	bd80      	pop	{r7, pc}

00022336 <atomic_dec>:
 * @param target Address of atomic variable.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_dec(atomic_t *target)
{
   22336:	b580      	push	{r7, lr}
   22338:	b082      	sub	sp, #8
   2233a:	af00      	add	r7, sp, #0
   2233c:	6078      	str	r0, [r7, #4]
	return atomic_sub(target, 1);
   2233e:	2101      	movs	r1, #1
   22340:	6878      	ldr	r0, [r7, #4]
   22342:	f7ff ffd5 	bl	222f0 <atomic_sub>
   22346:	4603      	mov	r3, r0
}
   22348:	4618      	mov	r0, r3
   2234a:	3708      	adds	r7, #8
   2234c:	46bd      	mov	sp, r7
   2234e:	bd80      	pop	{r7, pc}

00022350 <atomic_set>:
 * @param value Value to write to @a target.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_set(atomic_t *target, atomic_val_t value)
{
   22350:	b480      	push	{r7}
   22352:	b083      	sub	sp, #12
   22354:	af00      	add	r7, sp, #0
   22356:	6078      	str	r0, [r7, #4]
   22358:	6039      	str	r1, [r7, #0]
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2235a:	683a      	ldr	r2, [r7, #0]
   2235c:	687b      	ldr	r3, [r7, #4]
   2235e:	e8d3 1fef 	ldaex	r1, [r3]
   22362:	e8c3 2fe0 	stlex	r0, r2, [r3]
   22366:	2800      	cmp	r0, #0
   22368:	d1f9      	bne.n	2235e <atomic_set+0xe>
   2236a:	460b      	mov	r3, r1
}
   2236c:	4618      	mov	r0, r3
   2236e:	370c      	adds	r7, #12
   22370:	46bd      	mov	sp, r7
   22372:	bc80      	pop	{r7}
   22374:	4770      	bx	lr

00022376 <k_is_user_context>:
{
   22376:	b480      	push	{r7}
   22378:	af00      	add	r7, sp, #0
	return false;
   2237a:	2300      	movs	r3, #0
}
   2237c:	4618      	mov	r0, r3
   2237e:	46bd      	mov	sp, r7
   22380:	bc80      	pop	{r7}
   22382:	4770      	bx	lr

00022384 <log_msg_source_id_get>:
 * @param msg Message
 *
 * @return Source ID.
 */
static inline uint32_t log_msg_source_id_get(struct log_msg *msg)
{
   22384:	b480      	push	{r7}
   22386:	b083      	sub	sp, #12
   22388:	af00      	add	r7, sp, #0
   2238a:	6078      	str	r0, [r7, #4]
	return msg->hdr.ids.source_id;
   2238c:	687b      	ldr	r3, [r7, #4]
   2238e:	895b      	ldrh	r3, [r3, #10]
   22390:	f3c3 1389 	ubfx	r3, r3, #6, #10
   22394:	b29b      	uxth	r3, r3
}
   22396:	4618      	mov	r0, r3
   22398:	370c      	adds	r7, #12
   2239a:	46bd      	mov	sp, r7
   2239c:	bc80      	pop	{r7}
   2239e:	4770      	bx	lr

000223a0 <log_msg_is_std>:
 *
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
   223a0:	b480      	push	{r7}
   223a2:	b083      	sub	sp, #12
   223a4:	af00      	add	r7, sp, #0
   223a6:	6078      	str	r0, [r7, #4]
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   223a8:	687b      	ldr	r3, [r7, #4]
   223aa:	7a1b      	ldrb	r3, [r3, #8]
   223ac:	f003 0301 	and.w	r3, r3, #1
   223b0:	b2db      	uxtb	r3, r3
   223b2:	2b00      	cmp	r3, #0
   223b4:	bf0c      	ite	eq
   223b6:	2301      	moveq	r3, #1
   223b8:	2300      	movne	r3, #0
   223ba:	b2db      	uxtb	r3, r3
}
   223bc:	4618      	mov	r0, r3
   223be:	370c      	adds	r7, #12
   223c0:	46bd      	mov	sp, r7
   223c2:	bc80      	pop	{r7}
   223c4:	4770      	bx	lr

000223c6 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   223c6:	b580      	push	{r7, lr}
   223c8:	b082      	sub	sp, #8
   223ca:	af00      	add	r7, sp, #0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   223cc:	f7f0 ff6c 	bl	132a8 <log_msg_chunk_alloc>
   223d0:	6078      	str	r0, [r7, #4]

	if (msg != NULL) {
   223d2:	687b      	ldr	r3, [r7, #4]
   223d4:	2b00      	cmp	r3, #0
   223d6:	d00a      	beq.n	223ee <z_log_msg_std_alloc+0x28>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   223d8:	687b      	ldr	r3, [r7, #4]
   223da:	2201      	movs	r2, #1
   223dc:	605a      	str	r2, [r3, #4]
		msg->hdr.params.raw = 0U;
   223de:	687b      	ldr	r3, [r7, #4]
   223e0:	2200      	movs	r2, #0
   223e2:	811a      	strh	r2, [r3, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   223e4:	687a      	ldr	r2, [r7, #4]
   223e6:	7a13      	ldrb	r3, [r2, #8]
   223e8:	f36f 0300 	bfc	r3, #0, #1
   223ec:	7213      	strb	r3, [r2, #8]
			msg->hdr.ids.domain_id = 0;
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
   223ee:	687b      	ldr	r3, [r7, #4]
}
   223f0:	4618      	mov	r0, r3
   223f2:	3708      	adds	r7, #8
   223f4:	46bd      	mov	sp, r7
   223f6:	bd80      	pop	{r7, pc}

000223f8 <log_msg_create_0>:
 *		- string pointer
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
   223f8:	b580      	push	{r7, lr}
   223fa:	b084      	sub	sp, #16
   223fc:	af00      	add	r7, sp, #0
   223fe:	6078      	str	r0, [r7, #4]
	struct log_msg *msg = z_log_msg_std_alloc();
   22400:	f7ff ffe1 	bl	223c6 <z_log_msg_std_alloc>
   22404:	60f8      	str	r0, [r7, #12]

	if (msg != NULL) {
   22406:	68fb      	ldr	r3, [r7, #12]
   22408:	2b00      	cmp	r3, #0
   2240a:	d002      	beq.n	22412 <log_msg_create_0+0x1a>
		msg->str = str;
   2240c:	68fb      	ldr	r3, [r7, #12]
   2240e:	687a      	ldr	r2, [r7, #4]
   22410:	611a      	str	r2, [r3, #16]
	}

	return msg;
   22412:	68fb      	ldr	r3, [r7, #12]
}
   22414:	4618      	mov	r0, r3
   22416:	3710      	adds	r7, #16
   22418:	46bd      	mov	sp, r7
   2241a:	bd80      	pop	{r7, pc}

0002241c <log_msg_create_1>:
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
   2241c:	b580      	push	{r7, lr}
   2241e:	b084      	sub	sp, #16
   22420:	af00      	add	r7, sp, #0
   22422:	6078      	str	r0, [r7, #4]
   22424:	6039      	str	r1, [r7, #0]
	struct  log_msg *msg = z_log_msg_std_alloc();
   22426:	f7ff ffce 	bl	223c6 <z_log_msg_std_alloc>
   2242a:	60f8      	str	r0, [r7, #12]

	if (msg != NULL) {
   2242c:	68fb      	ldr	r3, [r7, #12]
   2242e:	2b00      	cmp	r3, #0
   22430:	d00b      	beq.n	2244a <log_msg_create_1+0x2e>
		msg->str = str;
   22432:	68fb      	ldr	r3, [r7, #12]
   22434:	687a      	ldr	r2, [r7, #4]
   22436:	611a      	str	r2, [r3, #16]
		msg->hdr.params.std.nargs = 1U;
   22438:	68fa      	ldr	r2, [r7, #12]
   2243a:	7a53      	ldrb	r3, [r2, #9]
   2243c:	2101      	movs	r1, #1
   2243e:	f361 1307 	bfi	r3, r1, #4, #4
   22442:	7253      	strb	r3, [r2, #9]
		msg->payload.single.args[0] = arg1;
   22444:	68fb      	ldr	r3, [r7, #12]
   22446:	683a      	ldr	r2, [r7, #0]
   22448:	615a      	str	r2, [r3, #20]
	}

	return msg;
   2244a:	68fb      	ldr	r3, [r7, #12]
}
   2244c:	4618      	mov	r0, r3
   2244e:	3710      	adds	r7, #16
   22450:	46bd      	mov	sp, r7
   22452:	bd80      	pop	{r7, pc}

00022454 <log_msg_create_2>:
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
   22454:	b580      	push	{r7, lr}
   22456:	b086      	sub	sp, #24
   22458:	af00      	add	r7, sp, #0
   2245a:	60f8      	str	r0, [r7, #12]
   2245c:	60b9      	str	r1, [r7, #8]
   2245e:	607a      	str	r2, [r7, #4]
	struct  log_msg *msg = z_log_msg_std_alloc();
   22460:	f7ff ffb1 	bl	223c6 <z_log_msg_std_alloc>
   22464:	6178      	str	r0, [r7, #20]

	if (msg != NULL) {
   22466:	697b      	ldr	r3, [r7, #20]
   22468:	2b00      	cmp	r3, #0
   2246a:	d00e      	beq.n	2248a <log_msg_create_2+0x36>
		msg->str = str;
   2246c:	697b      	ldr	r3, [r7, #20]
   2246e:	68fa      	ldr	r2, [r7, #12]
   22470:	611a      	str	r2, [r3, #16]
		msg->hdr.params.std.nargs = 2U;
   22472:	697a      	ldr	r2, [r7, #20]
   22474:	7a53      	ldrb	r3, [r2, #9]
   22476:	2102      	movs	r1, #2
   22478:	f361 1307 	bfi	r3, r1, #4, #4
   2247c:	7253      	strb	r3, [r2, #9]
		msg->payload.single.args[0] = arg1;
   2247e:	697b      	ldr	r3, [r7, #20]
   22480:	68ba      	ldr	r2, [r7, #8]
   22482:	615a      	str	r2, [r3, #20]
		msg->payload.single.args[1] = arg2;
   22484:	697b      	ldr	r3, [r7, #20]
   22486:	687a      	ldr	r2, [r7, #4]
   22488:	619a      	str	r2, [r3, #24]
	}

	return msg;
   2248a:	697b      	ldr	r3, [r7, #20]
}
   2248c:	4618      	mov	r0, r3
   2248e:	3718      	adds	r7, #24
   22490:	46bd      	mov	sp, r7
   22492:	bd80      	pop	{r7, pc}

00022494 <log_msg_create_3>:
 */
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
   22494:	b580      	push	{r7, lr}
   22496:	b086      	sub	sp, #24
   22498:	af00      	add	r7, sp, #0
   2249a:	60f8      	str	r0, [r7, #12]
   2249c:	60b9      	str	r1, [r7, #8]
   2249e:	607a      	str	r2, [r7, #4]
   224a0:	603b      	str	r3, [r7, #0]
	struct  log_msg *msg = z_log_msg_std_alloc();
   224a2:	f7ff ff90 	bl	223c6 <z_log_msg_std_alloc>
   224a6:	6178      	str	r0, [r7, #20]

	if (msg != NULL) {
   224a8:	697b      	ldr	r3, [r7, #20]
   224aa:	2b00      	cmp	r3, #0
   224ac:	d011      	beq.n	224d2 <log_msg_create_3+0x3e>
		msg->str = str;
   224ae:	697b      	ldr	r3, [r7, #20]
   224b0:	68fa      	ldr	r2, [r7, #12]
   224b2:	611a      	str	r2, [r3, #16]
		msg->hdr.params.std.nargs = 3U;
   224b4:	697a      	ldr	r2, [r7, #20]
   224b6:	7a53      	ldrb	r3, [r2, #9]
   224b8:	2103      	movs	r1, #3
   224ba:	f361 1307 	bfi	r3, r1, #4, #4
   224be:	7253      	strb	r3, [r2, #9]
		msg->payload.single.args[0] = arg1;
   224c0:	697b      	ldr	r3, [r7, #20]
   224c2:	68ba      	ldr	r2, [r7, #8]
   224c4:	615a      	str	r2, [r3, #20]
		msg->payload.single.args[1] = arg2;
   224c6:	697b      	ldr	r3, [r7, #20]
   224c8:	687a      	ldr	r2, [r7, #4]
   224ca:	619a      	str	r2, [r3, #24]
		msg->payload.single.args[2] = arg3;
   224cc:	697b      	ldr	r3, [r7, #20]
   224ce:	683a      	ldr	r2, [r7, #0]
   224d0:	61da      	str	r2, [r3, #28]
	}

	return msg;
   224d2:	697b      	ldr	r3, [r7, #20]
}
   224d4:	4618      	mov	r0, r3
   224d6:	3718      	adds	r7, #24
   224d8:	46bd      	mov	sp, r7
   224da:	bd80      	pop	{r7, pc}

000224dc <arch_k_cycle_get_32>:

#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
   224dc:	b580      	push	{r7, lr}
   224de:	af00      	add	r7, sp, #0
	return sys_clock_cycle_get_32();
   224e0:	f7f3 fa92 	bl	15a08 <sys_clock_cycle_get_32>
   224e4:	4603      	mov	r3, r0
}
   224e6:	4618      	mov	r0, r3
   224e8:	bd80      	pop	{r7, pc}

000224ea <sys_clock_hw_cycles_per_sec>:
{
   224ea:	b480      	push	{r7}
   224ec:	af00      	add	r7, sp, #0
	return CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
   224ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
   224f2:	4618      	mov	r0, r3
   224f4:	46bd      	mov	sp, r7
   224f6:	bc80      	pop	{r7}
   224f8:	4770      	bx	lr

000224fa <k_ms_to_ticks_ceil64>:
{
   224fa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   224fe:	b08c      	sub	sp, #48	; 0x30
   22500:	af00      	add	r7, sp, #0
   22502:	e9c7 0100 	strd	r0, r1, [r7]
   22506:	e9d7 2300 	ldrd	r2, r3, [r7]
   2250a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   2250e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22512:	627b      	str	r3, [r7, #36]	; 0x24
   22514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   22518:	623b      	str	r3, [r7, #32]
   2251a:	2301      	movs	r3, #1
   2251c:	77fb      	strb	r3, [r7, #31]
   2251e:	2300      	movs	r3, #0
   22520:	77bb      	strb	r3, [r7, #30]
   22522:	2301      	movs	r3, #1
   22524:	777b      	strb	r3, [r7, #29]
   22526:	2300      	movs	r3, #0
   22528:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   2252a:	7ffb      	ldrb	r3, [r7, #31]
   2252c:	2b00      	cmp	r3, #0
   2252e:	d00f      	beq.n	22550 <k_ms_to_ticks_ceil64+0x56>
	bool mul_ratio = const_hz &&
   22530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   22532:	6a3b      	ldr	r3, [r7, #32]
   22534:	429a      	cmp	r2, r3
   22536:	d20b      	bcs.n	22550 <k_ms_to_ticks_ceil64+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   22538:	6a3b      	ldr	r3, [r7, #32]
   2253a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2253c:	fbb3 f2f2 	udiv	r2, r3, r2
   22540:	6a79      	ldr	r1, [r7, #36]	; 0x24
   22542:	fb01 f202 	mul.w	r2, r1, r2
   22546:	1a9b      	subs	r3, r3, r2
   22548:	2b00      	cmp	r3, #0
   2254a:	d101      	bne.n	22550 <k_ms_to_ticks_ceil64+0x56>
   2254c:	2301      	movs	r3, #1
   2254e:	e000      	b.n	22552 <k_ms_to_ticks_ceil64+0x58>
   22550:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   22552:	76fb      	strb	r3, [r7, #27]
   22554:	7efb      	ldrb	r3, [r7, #27]
   22556:	f003 0301 	and.w	r3, r3, #1
   2255a:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   2255c:	7ffb      	ldrb	r3, [r7, #31]
   2255e:	2b00      	cmp	r3, #0
   22560:	d00f      	beq.n	22582 <k_ms_to_ticks_ceil64+0x88>
	bool div_ratio = const_hz &&
   22562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   22564:	6a3b      	ldr	r3, [r7, #32]
   22566:	429a      	cmp	r2, r3
   22568:	d90b      	bls.n	22582 <k_ms_to_ticks_ceil64+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   2256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2256c:	6a3a      	ldr	r2, [r7, #32]
   2256e:	fbb3 f2f2 	udiv	r2, r3, r2
   22572:	6a39      	ldr	r1, [r7, #32]
   22574:	fb01 f202 	mul.w	r2, r1, r2
   22578:	1a9b      	subs	r3, r3, r2
   2257a:	2b00      	cmp	r3, #0
   2257c:	d101      	bne.n	22582 <k_ms_to_ticks_ceil64+0x88>
   2257e:	2301      	movs	r3, #1
   22580:	e000      	b.n	22584 <k_ms_to_ticks_ceil64+0x8a>
   22582:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   22584:	76bb      	strb	r3, [r7, #26]
   22586:	7ebb      	ldrb	r3, [r7, #26]
   22588:	f003 0301 	and.w	r3, r3, #1
   2258c:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   2258e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   22590:	6a3b      	ldr	r3, [r7, #32]
   22592:	429a      	cmp	r2, r3
   22594:	d10a      	bne.n	225ac <k_ms_to_ticks_ceil64+0xb2>
		return result32 ? ((uint32_t)t) : t;
   22596:	7fbb      	ldrb	r3, [r7, #30]
   22598:	2b00      	cmp	r3, #0
   2259a:	d004      	beq.n	225a6 <k_ms_to_ticks_ceil64+0xac>
   2259c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2259e:	461a      	mov	r2, r3
   225a0:	f04f 0300 	mov.w	r3, #0
   225a4:	e0c7      	b.n	22736 <k_ms_to_ticks_ceil64+0x23c>
   225a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   225aa:	e0c4      	b.n	22736 <k_ms_to_ticks_ceil64+0x23c>
	uint64_t off = 0;
   225ac:	f04f 0200 	mov.w	r2, #0
   225b0:	f04f 0300 	mov.w	r3, #0
   225b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   225b8:	7efb      	ldrb	r3, [r7, #27]
   225ba:	f083 0301 	eor.w	r3, r3, #1
   225be:	b2db      	uxtb	r3, r3
   225c0:	2b00      	cmp	r3, #0
   225c2:	d01d      	beq.n	22600 <k_ms_to_ticks_ceil64+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   225c4:	7ebb      	ldrb	r3, [r7, #26]
   225c6:	2b00      	cmp	r3, #0
   225c8:	d004      	beq.n	225d4 <k_ms_to_ticks_ceil64+0xda>
   225ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   225cc:	6a3b      	ldr	r3, [r7, #32]
   225ce:	fbb2 f3f3 	udiv	r3, r2, r3
   225d2:	e000      	b.n	225d6 <k_ms_to_ticks_ceil64+0xdc>
   225d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   225d6:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   225d8:	7f7b      	ldrb	r3, [r7, #29]
   225da:	2b00      	cmp	r3, #0
   225dc:	d006      	beq.n	225ec <k_ms_to_ticks_ceil64+0xf2>
			off = rdivisor - 1U;
   225de:	68fb      	ldr	r3, [r7, #12]
   225e0:	3b01      	subs	r3, #1
   225e2:	461a      	mov	r2, r3
   225e4:	f04f 0300 	mov.w	r3, #0
   225e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   225ec:	7f3b      	ldrb	r3, [r7, #28]
   225ee:	2b00      	cmp	r3, #0
   225f0:	d006      	beq.n	22600 <k_ms_to_ticks_ceil64+0x106>
			off = rdivisor / 2U;
   225f2:	68fb      	ldr	r3, [r7, #12]
   225f4:	085b      	lsrs	r3, r3, #1
   225f6:	461a      	mov	r2, r3
   225f8:	f04f 0300 	mov.w	r3, #0
   225fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   22600:	7ebb      	ldrb	r3, [r7, #26]
   22602:	2b00      	cmp	r3, #0
   22604:	d02a      	beq.n	2265c <k_ms_to_ticks_ceil64+0x162>
		t += off;
   22606:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   2260a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   2260e:	1884      	adds	r4, r0, r2
   22610:	eb41 0503 	adc.w	r5, r1, r3
   22614:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   22618:	7fbb      	ldrb	r3, [r7, #30]
   2261a:	2b00      	cmp	r3, #0
   2261c:	d010      	beq.n	22640 <k_ms_to_ticks_ceil64+0x146>
   2261e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   22622:	2b01      	cmp	r3, #1
   22624:	bf08      	it	eq
   22626:	2a00      	cmpeq	r2, #0
   22628:	d20a      	bcs.n	22640 <k_ms_to_ticks_ceil64+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
   2262a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2262c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2262e:	6a3b      	ldr	r3, [r7, #32]
   22630:	fbb1 f3f3 	udiv	r3, r1, r3
   22634:	fbb2 f3f3 	udiv	r3, r2, r3
   22638:	461a      	mov	r2, r3
   2263a:	f04f 0300 	mov.w	r3, #0
   2263e:	e07a      	b.n	22736 <k_ms_to_ticks_ceil64+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
   22640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   22642:	6a3b      	ldr	r3, [r7, #32]
   22644:	fbb2 f3f3 	udiv	r3, r2, r3
   22648:	461a      	mov	r2, r3
   2264a:	f04f 0300 	mov.w	r3, #0
   2264e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   22652:	f7ed fdf3 	bl	1023c <__aeabi_uldivmod>
   22656:	4602      	mov	r2, r0
   22658:	460b      	mov	r3, r1
   2265a:	e06c      	b.n	22736 <k_ms_to_ticks_ceil64+0x23c>
	} else if (mul_ratio) {
   2265c:	7efb      	ldrb	r3, [r7, #27]
   2265e:	2b00      	cmp	r3, #0
   22660:	d021      	beq.n	226a6 <k_ms_to_ticks_ceil64+0x1ac>
		if (result32) {
   22662:	7fbb      	ldrb	r3, [r7, #30]
   22664:	2b00      	cmp	r3, #0
   22666:	d00a      	beq.n	2267e <k_ms_to_ticks_ceil64+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
   22668:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2266a:	6a39      	ldr	r1, [r7, #32]
   2266c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2266e:	fbb1 f2f2 	udiv	r2, r1, r2
   22672:	fb02 f303 	mul.w	r3, r2, r3
   22676:	461a      	mov	r2, r3
   22678:	f04f 0300 	mov.w	r3, #0
   2267c:	e05b      	b.n	22736 <k_ms_to_ticks_ceil64+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
   2267e:	6a3a      	ldr	r2, [r7, #32]
   22680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22682:	fbb2 f3f3 	udiv	r3, r2, r3
   22686:	461a      	mov	r2, r3
   22688:	f04f 0300 	mov.w	r3, #0
   2268c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2268e:	fb03 f001 	mul.w	r0, r3, r1
   22692:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   22694:	fb02 f101 	mul.w	r1, r2, r1
   22698:	4401      	add	r1, r0
   2269a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   2269c:	fba0 2302 	umull	r2, r3, r0, r2
   226a0:	4419      	add	r1, r3
   226a2:	460b      	mov	r3, r1
   226a4:	e047      	b.n	22736 <k_ms_to_ticks_ceil64+0x23c>
		if (result32) {
   226a6:	7fbb      	ldrb	r3, [r7, #30]
   226a8:	2b00      	cmp	r3, #0
   226aa:	d024      	beq.n	226f6 <k_ms_to_ticks_ceil64+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   226ac:	6a3b      	ldr	r3, [r7, #32]
   226ae:	461a      	mov	r2, r3
   226b0:	f04f 0300 	mov.w	r3, #0
   226b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   226b6:	fb03 f001 	mul.w	r0, r3, r1
   226ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   226bc:	fb02 f101 	mul.w	r1, r2, r1
   226c0:	4401      	add	r1, r0
   226c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   226c4:	fba0 2302 	umull	r2, r3, r0, r2
   226c8:	4419      	add	r1, r3
   226ca:	460b      	mov	r3, r1
   226cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   226d0:	eb12 0a00 	adds.w	sl, r2, r0
   226d4:	eb43 0b01 	adc.w	fp, r3, r1
   226d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   226da:	461a      	mov	r2, r3
   226dc:	f04f 0300 	mov.w	r3, #0
   226e0:	4650      	mov	r0, sl
   226e2:	4659      	mov	r1, fp
   226e4:	f7ed fdaa 	bl	1023c <__aeabi_uldivmod>
   226e8:	4602      	mov	r2, r0
   226ea:	460b      	mov	r3, r1
   226ec:	4613      	mov	r3, r2
   226ee:	461a      	mov	r2, r3
   226f0:	f04f 0300 	mov.w	r3, #0
   226f4:	e01f      	b.n	22736 <k_ms_to_ticks_ceil64+0x23c>
			return (t * to_hz + off) / from_hz;
   226f6:	6a3b      	ldr	r3, [r7, #32]
   226f8:	461a      	mov	r2, r3
   226fa:	f04f 0300 	mov.w	r3, #0
   226fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   22700:	fb03 f001 	mul.w	r0, r3, r1
   22704:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   22706:	fb02 f101 	mul.w	r1, r2, r1
   2270a:	4401      	add	r1, r0
   2270c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   2270e:	fba0 2302 	umull	r2, r3, r0, r2
   22712:	4419      	add	r1, r3
   22714:	460b      	mov	r3, r1
   22716:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   2271a:	eb12 0800 	adds.w	r8, r2, r0
   2271e:	eb43 0901 	adc.w	r9, r3, r1
   22722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22724:	461a      	mov	r2, r3
   22726:	f04f 0300 	mov.w	r3, #0
   2272a:	4640      	mov	r0, r8
   2272c:	4649      	mov	r1, r9
   2272e:	f7ed fd85 	bl	1023c <__aeabi_uldivmod>
   22732:	4602      	mov	r2, r0
   22734:	460b      	mov	r3, r1
}
   22736:	4610      	mov	r0, r2
   22738:	4619      	mov	r1, r3
   2273a:	3730      	adds	r7, #48	; 0x30
   2273c:	46bd      	mov	sp, r7
   2273e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

00022742 <k_ticks_to_ms_floor64>:
 * Truncates to the next lowest output unit.
 *
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint64_t k_ticks_to_ms_floor64(uint64_t t)
{
   22742:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   22746:	b08c      	sub	sp, #48	; 0x30
   22748:	af00      	add	r7, sp, #0
   2274a:	e9c7 0100 	strd	r0, r1, [r7]
   2274e:	e9d7 2300 	ldrd	r2, r3, [r7]
   22752:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   22756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   2275a:	627b      	str	r3, [r7, #36]	; 0x24
   2275c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22760:	623b      	str	r3, [r7, #32]
   22762:	2301      	movs	r3, #1
   22764:	77fb      	strb	r3, [r7, #31]
   22766:	2300      	movs	r3, #0
   22768:	77bb      	strb	r3, [r7, #30]
   2276a:	2300      	movs	r3, #0
   2276c:	777b      	strb	r3, [r7, #29]
   2276e:	2300      	movs	r3, #0
   22770:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   22772:	7ffb      	ldrb	r3, [r7, #31]
   22774:	2b00      	cmp	r3, #0
   22776:	d00f      	beq.n	22798 <k_ticks_to_ms_floor64+0x56>
	bool mul_ratio = const_hz &&
   22778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2277a:	6a3b      	ldr	r3, [r7, #32]
   2277c:	429a      	cmp	r2, r3
   2277e:	d20b      	bcs.n	22798 <k_ticks_to_ms_floor64+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   22780:	6a3b      	ldr	r3, [r7, #32]
   22782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   22784:	fbb3 f2f2 	udiv	r2, r3, r2
   22788:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2278a:	fb01 f202 	mul.w	r2, r1, r2
   2278e:	1a9b      	subs	r3, r3, r2
   22790:	2b00      	cmp	r3, #0
   22792:	d101      	bne.n	22798 <k_ticks_to_ms_floor64+0x56>
   22794:	2301      	movs	r3, #1
   22796:	e000      	b.n	2279a <k_ticks_to_ms_floor64+0x58>
   22798:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   2279a:	76fb      	strb	r3, [r7, #27]
   2279c:	7efb      	ldrb	r3, [r7, #27]
   2279e:	f003 0301 	and.w	r3, r3, #1
   227a2:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   227a4:	7ffb      	ldrb	r3, [r7, #31]
   227a6:	2b00      	cmp	r3, #0
   227a8:	d00f      	beq.n	227ca <k_ticks_to_ms_floor64+0x88>
	bool div_ratio = const_hz &&
   227aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   227ac:	6a3b      	ldr	r3, [r7, #32]
   227ae:	429a      	cmp	r2, r3
   227b0:	d90b      	bls.n	227ca <k_ticks_to_ms_floor64+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   227b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   227b4:	6a3a      	ldr	r2, [r7, #32]
   227b6:	fbb3 f2f2 	udiv	r2, r3, r2
   227ba:	6a39      	ldr	r1, [r7, #32]
   227bc:	fb01 f202 	mul.w	r2, r1, r2
   227c0:	1a9b      	subs	r3, r3, r2
   227c2:	2b00      	cmp	r3, #0
   227c4:	d101      	bne.n	227ca <k_ticks_to_ms_floor64+0x88>
   227c6:	2301      	movs	r3, #1
   227c8:	e000      	b.n	227cc <k_ticks_to_ms_floor64+0x8a>
   227ca:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   227cc:	76bb      	strb	r3, [r7, #26]
   227ce:	7ebb      	ldrb	r3, [r7, #26]
   227d0:	f003 0301 	and.w	r3, r3, #1
   227d4:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   227d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   227d8:	6a3b      	ldr	r3, [r7, #32]
   227da:	429a      	cmp	r2, r3
   227dc:	d10a      	bne.n	227f4 <k_ticks_to_ms_floor64+0xb2>
		return result32 ? ((uint32_t)t) : t;
   227de:	7fbb      	ldrb	r3, [r7, #30]
   227e0:	2b00      	cmp	r3, #0
   227e2:	d004      	beq.n	227ee <k_ticks_to_ms_floor64+0xac>
   227e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   227e6:	461a      	mov	r2, r3
   227e8:	f04f 0300 	mov.w	r3, #0
   227ec:	e0c7      	b.n	2297e <k_ticks_to_ms_floor64+0x23c>
   227ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   227f2:	e0c4      	b.n	2297e <k_ticks_to_ms_floor64+0x23c>
	uint64_t off = 0;
   227f4:	f04f 0200 	mov.w	r2, #0
   227f8:	f04f 0300 	mov.w	r3, #0
   227fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   22800:	7efb      	ldrb	r3, [r7, #27]
   22802:	f083 0301 	eor.w	r3, r3, #1
   22806:	b2db      	uxtb	r3, r3
   22808:	2b00      	cmp	r3, #0
   2280a:	d01d      	beq.n	22848 <k_ticks_to_ms_floor64+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   2280c:	7ebb      	ldrb	r3, [r7, #26]
   2280e:	2b00      	cmp	r3, #0
   22810:	d004      	beq.n	2281c <k_ticks_to_ms_floor64+0xda>
   22812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   22814:	6a3b      	ldr	r3, [r7, #32]
   22816:	fbb2 f3f3 	udiv	r3, r2, r3
   2281a:	e000      	b.n	2281e <k_ticks_to_ms_floor64+0xdc>
   2281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2281e:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   22820:	7f7b      	ldrb	r3, [r7, #29]
   22822:	2b00      	cmp	r3, #0
   22824:	d006      	beq.n	22834 <k_ticks_to_ms_floor64+0xf2>
			off = rdivisor - 1U;
   22826:	68fb      	ldr	r3, [r7, #12]
   22828:	3b01      	subs	r3, #1
   2282a:	461a      	mov	r2, r3
   2282c:	f04f 0300 	mov.w	r3, #0
   22830:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   22834:	7f3b      	ldrb	r3, [r7, #28]
   22836:	2b00      	cmp	r3, #0
   22838:	d006      	beq.n	22848 <k_ticks_to_ms_floor64+0x106>
			off = rdivisor / 2U;
   2283a:	68fb      	ldr	r3, [r7, #12]
   2283c:	085b      	lsrs	r3, r3, #1
   2283e:	461a      	mov	r2, r3
   22840:	f04f 0300 	mov.w	r3, #0
   22844:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   22848:	7ebb      	ldrb	r3, [r7, #26]
   2284a:	2b00      	cmp	r3, #0
   2284c:	d02a      	beq.n	228a4 <k_ticks_to_ms_floor64+0x162>
		t += off;
   2284e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   22852:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   22856:	1884      	adds	r4, r0, r2
   22858:	eb41 0503 	adc.w	r5, r1, r3
   2285c:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   22860:	7fbb      	ldrb	r3, [r7, #30]
   22862:	2b00      	cmp	r3, #0
   22864:	d010      	beq.n	22888 <k_ticks_to_ms_floor64+0x146>
   22866:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   2286a:	2b01      	cmp	r3, #1
   2286c:	bf08      	it	eq
   2286e:	2a00      	cmpeq	r2, #0
   22870:	d20a      	bcs.n	22888 <k_ticks_to_ms_floor64+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
   22872:	6aba      	ldr	r2, [r7, #40]	; 0x28
   22874:	6a79      	ldr	r1, [r7, #36]	; 0x24
   22876:	6a3b      	ldr	r3, [r7, #32]
   22878:	fbb1 f3f3 	udiv	r3, r1, r3
   2287c:	fbb2 f3f3 	udiv	r3, r2, r3
   22880:	461a      	mov	r2, r3
   22882:	f04f 0300 	mov.w	r3, #0
   22886:	e07a      	b.n	2297e <k_ticks_to_ms_floor64+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
   22888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2288a:	6a3b      	ldr	r3, [r7, #32]
   2288c:	fbb2 f3f3 	udiv	r3, r2, r3
   22890:	461a      	mov	r2, r3
   22892:	f04f 0300 	mov.w	r3, #0
   22896:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   2289a:	f7ed fccf 	bl	1023c <__aeabi_uldivmod>
   2289e:	4602      	mov	r2, r0
   228a0:	460b      	mov	r3, r1
   228a2:	e06c      	b.n	2297e <k_ticks_to_ms_floor64+0x23c>
	} else if (mul_ratio) {
   228a4:	7efb      	ldrb	r3, [r7, #27]
   228a6:	2b00      	cmp	r3, #0
   228a8:	d021      	beq.n	228ee <k_ticks_to_ms_floor64+0x1ac>
		if (result32) {
   228aa:	7fbb      	ldrb	r3, [r7, #30]
   228ac:	2b00      	cmp	r3, #0
   228ae:	d00a      	beq.n	228c6 <k_ticks_to_ms_floor64+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
   228b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   228b2:	6a39      	ldr	r1, [r7, #32]
   228b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   228b6:	fbb1 f2f2 	udiv	r2, r1, r2
   228ba:	fb02 f303 	mul.w	r3, r2, r3
   228be:	461a      	mov	r2, r3
   228c0:	f04f 0300 	mov.w	r3, #0
   228c4:	e05b      	b.n	2297e <k_ticks_to_ms_floor64+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
   228c6:	6a3a      	ldr	r2, [r7, #32]
   228c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   228ca:	fbb2 f3f3 	udiv	r3, r2, r3
   228ce:	461a      	mov	r2, r3
   228d0:	f04f 0300 	mov.w	r3, #0
   228d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   228d6:	fb03 f001 	mul.w	r0, r3, r1
   228da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   228dc:	fb02 f101 	mul.w	r1, r2, r1
   228e0:	4401      	add	r1, r0
   228e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   228e4:	fba0 2302 	umull	r2, r3, r0, r2
   228e8:	4419      	add	r1, r3
   228ea:	460b      	mov	r3, r1
   228ec:	e047      	b.n	2297e <k_ticks_to_ms_floor64+0x23c>
		if (result32) {
   228ee:	7fbb      	ldrb	r3, [r7, #30]
   228f0:	2b00      	cmp	r3, #0
   228f2:	d024      	beq.n	2293e <k_ticks_to_ms_floor64+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   228f4:	6a3b      	ldr	r3, [r7, #32]
   228f6:	461a      	mov	r2, r3
   228f8:	f04f 0300 	mov.w	r3, #0
   228fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   228fe:	fb03 f001 	mul.w	r0, r3, r1
   22902:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   22904:	fb02 f101 	mul.w	r1, r2, r1
   22908:	4401      	add	r1, r0
   2290a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   2290c:	fba0 2302 	umull	r2, r3, r0, r2
   22910:	4419      	add	r1, r3
   22912:	460b      	mov	r3, r1
   22914:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   22918:	eb12 0a00 	adds.w	sl, r2, r0
   2291c:	eb43 0b01 	adc.w	fp, r3, r1
   22920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22922:	461a      	mov	r2, r3
   22924:	f04f 0300 	mov.w	r3, #0
   22928:	4650      	mov	r0, sl
   2292a:	4659      	mov	r1, fp
   2292c:	f7ed fc86 	bl	1023c <__aeabi_uldivmod>
   22930:	4602      	mov	r2, r0
   22932:	460b      	mov	r3, r1
   22934:	4613      	mov	r3, r2
   22936:	461a      	mov	r2, r3
   22938:	f04f 0300 	mov.w	r3, #0
   2293c:	e01f      	b.n	2297e <k_ticks_to_ms_floor64+0x23c>
			return (t * to_hz + off) / from_hz;
   2293e:	6a3b      	ldr	r3, [r7, #32]
   22940:	461a      	mov	r2, r3
   22942:	f04f 0300 	mov.w	r3, #0
   22946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   22948:	fb03 f001 	mul.w	r0, r3, r1
   2294c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   2294e:	fb02 f101 	mul.w	r1, r2, r1
   22952:	4401      	add	r1, r0
   22954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   22956:	fba0 2302 	umull	r2, r3, r0, r2
   2295a:	4419      	add	r1, r3
   2295c:	460b      	mov	r3, r1
   2295e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   22962:	eb12 0800 	adds.w	r8, r2, r0
   22966:	eb43 0901 	adc.w	r9, r3, r1
   2296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2296c:	461a      	mov	r2, r3
   2296e:	f04f 0300 	mov.w	r3, #0
   22972:	4640      	mov	r0, r8
   22974:	4649      	mov	r1, r9
   22976:	f7ed fc61 	bl	1023c <__aeabi_uldivmod>
   2297a:	4602      	mov	r2, r0
   2297c:	460b      	mov	r3, r1
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, false, false, false);
}
   2297e:	4610      	mov	r0, r2
   22980:	4619      	mov	r1, r3
   22982:	3730      	adds	r7, #48	; 0x30
   22984:	46bd      	mov	sp, r7
   22986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0002298a <k_uptime_get>:
 *    @kconfig{CONFIG_SYS_CLOCK_TICKS_PER_SEC} config option.
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
   2298a:	b580      	push	{r7, lr}
   2298c:	af00      	add	r7, sp, #0
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   2298e:	f000 f86e 	bl	22a6e <k_uptime_ticks>
   22992:	4602      	mov	r2, r0
   22994:	460b      	mov	r3, r1
   22996:	4610      	mov	r0, r2
   22998:	4619      	mov	r1, r3
   2299a:	f7ff fed2 	bl	22742 <k_ticks_to_ms_floor64>
   2299e:	4602      	mov	r2, r0
   229a0:	460b      	mov	r3, r1
}
   229a2:	4610      	mov	r0, r2
   229a4:	4619      	mov	r1, r3
   229a6:	bd80      	pop	{r7, pc}

000229a8 <k_uptime_get_32>:
 *    @kconfig{CONFIG_SYS_CLOCK_TICKS_PER_SEC} config option
 *
 * @return The low 32 bits of the current uptime, in milliseconds.
 */
static inline uint32_t k_uptime_get_32(void)
{
   229a8:	b580      	push	{r7, lr}
   229aa:	af00      	add	r7, sp, #0
	return (uint32_t)k_uptime_get();
   229ac:	f7ff ffed 	bl	2298a <k_uptime_get>
   229b0:	4602      	mov	r2, r0
   229b2:	460b      	mov	r3, r1
   229b4:	4613      	mov	r3, r2
}
   229b6:	4618      	mov	r0, r3
   229b8:	bd80      	pop	{r7, pc}

000229ba <k_cycle_get_32>:
 * clock.
 *
 * @return Current hardware clock up-counter (in cycles).
 */
static inline uint32_t k_cycle_get_32(void)
{
   229ba:	b580      	push	{r7, lr}
   229bc:	af00      	add	r7, sp, #0
	return arch_k_cycle_get_32();
   229be:	f7ff fd8d 	bl	224dc <arch_k_cycle_get_32>
   229c2:	4603      	mov	r3, r0
}
   229c4:	4618      	mov	r0, r3
   229c6:	bd80      	pop	{r7, pc}

000229c8 <k_thread_create>:
{
   229c8:	b580      	push	{r7, lr}
   229ca:	b08c      	sub	sp, #48	; 0x30
   229cc:	af08      	add	r7, sp, #32
   229ce:	60f8      	str	r0, [r7, #12]
   229d0:	60b9      	str	r1, [r7, #8]
   229d2:	607a      	str	r2, [r7, #4]
   229d4:	603b      	str	r3, [r7, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   229d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
   229da:	e9cd 2306 	strd	r2, r3, [sp, #24]
   229de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   229e0:	9304      	str	r3, [sp, #16]
   229e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   229e4:	9303      	str	r3, [sp, #12]
   229e6:	6a3b      	ldr	r3, [r7, #32]
   229e8:	9302      	str	r3, [sp, #8]
   229ea:	69fb      	ldr	r3, [r7, #28]
   229ec:	9301      	str	r3, [sp, #4]
   229ee:	69bb      	ldr	r3, [r7, #24]
   229f0:	9300      	str	r3, [sp, #0]
   229f2:	683b      	ldr	r3, [r7, #0]
   229f4:	687a      	ldr	r2, [r7, #4]
   229f6:	68b9      	ldr	r1, [r7, #8]
   229f8:	68f8      	ldr	r0, [r7, #12]
   229fa:	f7fa fa3b 	bl	1ce74 <z_impl_k_thread_create>
   229fe:	4603      	mov	r3, r0
}
   22a00:	4618      	mov	r0, r3
   22a02:	3710      	adds	r7, #16
   22a04:	46bd      	mov	sp, r7
   22a06:	bd80      	pop	{r7, pc}

00022a08 <k_current_get>:
{
   22a08:	b580      	push	{r7, lr}
   22a0a:	af00      	add	r7, sp, #0
	return z_impl_k_current_get();
   22a0c:	f7fd f9ce 	bl	1fdac <z_impl_k_current_get>
   22a10:	4603      	mov	r3, r0
}
   22a12:	4618      	mov	r0, r3
   22a14:	bd80      	pop	{r7, pc}

00022a16 <k_thread_name_set>:
}


extern int z_impl_k_thread_name_set(k_tid_t thread, const char * str);
static inline int k_thread_name_set(k_tid_t thread, const char * str)
{
   22a16:	b580      	push	{r7, lr}
   22a18:	b082      	sub	sp, #8
   22a1a:	af00      	add	r7, sp, #0
   22a1c:	6078      	str	r0, [r7, #4]
   22a1e:	6039      	str	r1, [r7, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
   22a20:	6839      	ldr	r1, [r7, #0]
   22a22:	6878      	ldr	r0, [r7, #4]
   22a24:	f005 f979 	bl	27d1a <z_impl_k_thread_name_set>
   22a28:	4603      	mov	r3, r0
}
   22a2a:	4618      	mov	r0, r3
   22a2c:	3708      	adds	r7, #8
   22a2e:	46bd      	mov	sp, r7
   22a30:	bd80      	pop	{r7, pc}

00022a32 <k_timer_start>:
}


extern void z_impl_k_timer_start(struct k_timer * timer, k_timeout_t duration, k_timeout_t period);
static inline void k_timer_start(struct k_timer * timer, k_timeout_t duration, k_timeout_t period)
{
   22a32:	b580      	push	{r7, lr}
   22a34:	b086      	sub	sp, #24
   22a36:	af02      	add	r7, sp, #8
   22a38:	60f8      	str	r0, [r7, #12]
   22a3a:	e9c7 2300 	strd	r2, r3, [r7]
		arch_syscall_invoke5(*(uintptr_t *)&timer, parm0.split.lo, parm0.split.hi, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
   22a3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   22a42:	e9cd 2300 	strd	r2, r3, [sp]
   22a46:	e9d7 2300 	ldrd	r2, r3, [r7]
   22a4a:	68f8      	ldr	r0, [r7, #12]
   22a4c:	f7fe f852 	bl	20af4 <z_impl_k_timer_start>
}
   22a50:	bf00      	nop
   22a52:	3710      	adds	r7, #16
   22a54:	46bd      	mov	sp, r7
   22a56:	bd80      	pop	{r7, pc}

00022a58 <k_timer_stop>:


extern void z_impl_k_timer_stop(struct k_timer * timer);
static inline void k_timer_stop(struct k_timer * timer)
{
   22a58:	b580      	push	{r7, lr}
   22a5a:	b082      	sub	sp, #8
   22a5c:	af00      	add	r7, sp, #0
   22a5e:	6078      	str	r0, [r7, #4]
		arch_syscall_invoke1(*(uintptr_t *)&timer, K_SYSCALL_K_TIMER_STOP);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_stop(timer);
   22a60:	6878      	ldr	r0, [r7, #4]
   22a62:	f006 fac3 	bl	28fec <z_impl_k_timer_stop>
}
   22a66:	bf00      	nop
   22a68:	3708      	adds	r7, #8
   22a6a:	46bd      	mov	sp, r7
   22a6c:	bd80      	pop	{r7, pc}

00022a6e <k_uptime_ticks>:
}


extern int64_t z_impl_k_uptime_ticks(void);
static inline int64_t k_uptime_ticks(void)
{
   22a6e:	b580      	push	{r7, lr}
   22a70:	af00      	add	r7, sp, #0
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   22a72:	f006 f9a3 	bl	28dbc <z_impl_k_uptime_ticks>
   22a76:	4602      	mov	r2, r0
   22a78:	460b      	mov	r3, r1
}
   22a7a:	4610      	mov	r0, r2
   22a7c:	4619      	mov	r1, r3
   22a7e:	bd80      	pop	{r7, pc}

00022a80 <k_sem_take>:
}


extern int z_impl_k_sem_take(struct k_sem * sem, k_timeout_t timeout);
static inline int k_sem_take(struct k_sem * sem, k_timeout_t timeout)
{
   22a80:	b580      	push	{r7, lr}
   22a82:	b084      	sub	sp, #16
   22a84:	af00      	add	r7, sp, #0
   22a86:	60f8      	str	r0, [r7, #12]
   22a88:	e9c7 2300 	strd	r2, r3, [r7]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   22a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
   22a90:	68f8      	ldr	r0, [r7, #12]
   22a92:	f7fb f9fd 	bl	1de90 <z_impl_k_sem_take>
   22a96:	4603      	mov	r3, r0
}
   22a98:	4618      	mov	r0, r3
   22a9a:	3710      	adds	r7, #16
   22a9c:	46bd      	mov	sp, r7
   22a9e:	bd80      	pop	{r7, pc}

00022aa0 <k_sem_give>:


extern void z_impl_k_sem_give(struct k_sem * sem);
static inline void k_sem_give(struct k_sem * sem)
{
   22aa0:	b580      	push	{r7, lr}
   22aa2:	b082      	sub	sp, #8
   22aa4:	af00      	add	r7, sp, #0
   22aa6:	6078      	str	r0, [r7, #4]
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   22aa8:	6878      	ldr	r0, [r7, #4]
   22aaa:	f7fb f98b 	bl	1ddc4 <z_impl_k_sem_give>
}
   22aae:	bf00      	nop
   22ab0:	3708      	adds	r7, #8
   22ab2:	46bd      	mov	sp, r7
   22ab4:	bd80      	pop	{r7, pc}

00022ab6 <log_process>:
}


extern bool z_impl_log_process(bool bypass);
static inline bool log_process(bool bypass)
{
   22ab6:	b580      	push	{r7, lr}
   22ab8:	b082      	sub	sp, #8
   22aba:	af00      	add	r7, sp, #0
   22abc:	4603      	mov	r3, r0
   22abe:	71fb      	strb	r3, [r7, #7]
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   22ac0:	79fb      	ldrb	r3, [r7, #7]
   22ac2:	4618      	mov	r0, r3
   22ac4:	f7f0 fa32 	bl	12f2c <z_impl_log_process>
   22ac8:	4603      	mov	r3, r0
}
   22aca:	4618      	mov	r0, r3
   22acc:	3708      	adds	r7, #8
   22ace:	46bd      	mov	sp, r7
   22ad0:	bd80      	pop	{r7, pc}

00022ad2 <isalpha>:
{
   22ad2:	b480      	push	{r7}
   22ad4:	b083      	sub	sp, #12
   22ad6:	af00      	add	r7, sp, #0
   22ad8:	6078      	str	r0, [r7, #4]
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   22ada:	687b      	ldr	r3, [r7, #4]
   22adc:	f043 0320 	orr.w	r3, r3, #32
   22ae0:	3b61      	subs	r3, #97	; 0x61
   22ae2:	2b19      	cmp	r3, #25
   22ae4:	bf94      	ite	ls
   22ae6:	2301      	movls	r3, #1
   22ae8:	2300      	movhi	r3, #0
   22aea:	b2db      	uxtb	r3, r3
}
   22aec:	4618      	mov	r0, r3
   22aee:	370c      	adds	r7, #12
   22af0:	46bd      	mov	sp, r7
   22af2:	bc80      	pop	{r7}
   22af4:	4770      	bx	lr

00022af6 <dummy_timestamp>:
{
   22af6:	b480      	push	{r7}
   22af8:	af00      	add	r7, sp, #0
	return 0;
   22afa:	2300      	movs	r3, #0
}
   22afc:	4618      	mov	r0, r3
   22afe:	46bd      	mov	sp, r7
   22b00:	bc80      	pop	{r7}
   22b02:	4770      	bx	lr

00022b04 <log_0>:
{
   22b04:	b580      	push	{r7, lr}
   22b06:	b084      	sub	sp, #16
   22b08:	af00      	add	r7, sp, #0
   22b0a:	6078      	str	r0, [r7, #4]
   22b0c:	8039      	strh	r1, [r7, #0]
		struct log_msg *msg = log_msg_create_0(str);
   22b0e:	6878      	ldr	r0, [r7, #4]
   22b10:	f7ff fc72 	bl	223f8 <log_msg_create_0>
   22b14:	60f8      	str	r0, [r7, #12]
		if (msg == NULL) {
   22b16:	68fb      	ldr	r3, [r7, #12]
   22b18:	2b00      	cmp	r3, #0
   22b1a:	d004      	beq.n	22b26 <log_0+0x22>
		msg_finalize(msg, src_level);
   22b1c:	8839      	ldrh	r1, [r7, #0]
   22b1e:	68f8      	ldr	r0, [r7, #12]
   22b20:	f7f0 f884 	bl	12c2c <msg_finalize>
   22b24:	e000      	b.n	22b28 <log_0+0x24>
			return;
   22b26:	bf00      	nop
}
   22b28:	3710      	adds	r7, #16
   22b2a:	46bd      	mov	sp, r7
   22b2c:	bd80      	pop	{r7, pc}

00022b2e <log_1>:
{
   22b2e:	b580      	push	{r7, lr}
   22b30:	b086      	sub	sp, #24
   22b32:	af00      	add	r7, sp, #0
   22b34:	60f8      	str	r0, [r7, #12]
   22b36:	60b9      	str	r1, [r7, #8]
   22b38:	80ba      	strh	r2, [r7, #4]
		struct log_msg *msg = log_msg_create_1(str, arg0);
   22b3a:	68b9      	ldr	r1, [r7, #8]
   22b3c:	68f8      	ldr	r0, [r7, #12]
   22b3e:	f7ff fc6d 	bl	2241c <log_msg_create_1>
   22b42:	6178      	str	r0, [r7, #20]
		if (msg == NULL) {
   22b44:	697b      	ldr	r3, [r7, #20]
   22b46:	2b00      	cmp	r3, #0
   22b48:	d004      	beq.n	22b54 <log_1+0x26>
		msg_finalize(msg, src_level);
   22b4a:	88b9      	ldrh	r1, [r7, #4]
   22b4c:	6978      	ldr	r0, [r7, #20]
   22b4e:	f7f0 f86d 	bl	12c2c <msg_finalize>
   22b52:	e000      	b.n	22b56 <log_1+0x28>
			return;
   22b54:	bf00      	nop
}
   22b56:	3718      	adds	r7, #24
   22b58:	46bd      	mov	sp, r7
   22b5a:	bd80      	pop	{r7, pc}

00022b5c <log_2>:
{
   22b5c:	b580      	push	{r7, lr}
   22b5e:	b086      	sub	sp, #24
   22b60:	af00      	add	r7, sp, #0
   22b62:	60f8      	str	r0, [r7, #12]
   22b64:	60b9      	str	r1, [r7, #8]
   22b66:	607a      	str	r2, [r7, #4]
   22b68:	803b      	strh	r3, [r7, #0]
		struct log_msg *msg = log_msg_create_2(str, arg0, arg1);
   22b6a:	687a      	ldr	r2, [r7, #4]
   22b6c:	68b9      	ldr	r1, [r7, #8]
   22b6e:	68f8      	ldr	r0, [r7, #12]
   22b70:	f7ff fc70 	bl	22454 <log_msg_create_2>
   22b74:	6178      	str	r0, [r7, #20]
		if (msg == NULL) {
   22b76:	697b      	ldr	r3, [r7, #20]
   22b78:	2b00      	cmp	r3, #0
   22b7a:	d004      	beq.n	22b86 <log_2+0x2a>
		msg_finalize(msg, src_level);
   22b7c:	8839      	ldrh	r1, [r7, #0]
   22b7e:	6978      	ldr	r0, [r7, #20]
   22b80:	f7f0 f854 	bl	12c2c <msg_finalize>
   22b84:	e000      	b.n	22b88 <log_2+0x2c>
			return;
   22b86:	bf00      	nop
}
   22b88:	3718      	adds	r7, #24
   22b8a:	46bd      	mov	sp, r7
   22b8c:	bd80      	pop	{r7, pc}

00022b8e <log_3>:
{
   22b8e:	b580      	push	{r7, lr}
   22b90:	b086      	sub	sp, #24
   22b92:	af00      	add	r7, sp, #0
   22b94:	60f8      	str	r0, [r7, #12]
   22b96:	60b9      	str	r1, [r7, #8]
   22b98:	607a      	str	r2, [r7, #4]
   22b9a:	603b      	str	r3, [r7, #0]
		struct log_msg *msg = log_msg_create_3(str, arg0, arg1, arg2);
   22b9c:	683b      	ldr	r3, [r7, #0]
   22b9e:	687a      	ldr	r2, [r7, #4]
   22ba0:	68b9      	ldr	r1, [r7, #8]
   22ba2:	68f8      	ldr	r0, [r7, #12]
   22ba4:	f7ff fc76 	bl	22494 <log_msg_create_3>
   22ba8:	6178      	str	r0, [r7, #20]
		if (msg == NULL) {
   22baa:	697b      	ldr	r3, [r7, #20]
   22bac:	2b00      	cmp	r3, #0
   22bae:	d004      	beq.n	22bba <log_3+0x2c>
		msg_finalize(msg, src_level);
   22bb0:	8c39      	ldrh	r1, [r7, #32]
   22bb2:	6978      	ldr	r0, [r7, #20]
   22bb4:	f7f0 f83a 	bl	12c2c <msg_finalize>
   22bb8:	e000      	b.n	22bbc <log_3+0x2e>
			return;
   22bba:	bf00      	nop
}
   22bbc:	3718      	adds	r7, #24
   22bbe:	46bd      	mov	sp, r7
   22bc0:	bd80      	pop	{r7, pc}

00022bc2 <log_n>:
{
   22bc2:	b580      	push	{r7, lr}
   22bc4:	b086      	sub	sp, #24
   22bc6:	af00      	add	r7, sp, #0
   22bc8:	60f8      	str	r0, [r7, #12]
   22bca:	60b9      	str	r1, [r7, #8]
   22bcc:	607a      	str	r2, [r7, #4]
   22bce:	803b      	strh	r3, [r7, #0]
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   22bd0:	687a      	ldr	r2, [r7, #4]
   22bd2:	68b9      	ldr	r1, [r7, #8]
   22bd4:	68f8      	ldr	r0, [r7, #12]
   22bd6:	f7f0 fc2f 	bl	13438 <log_msg_create_n>
   22bda:	6178      	str	r0, [r7, #20]
		if (msg == NULL) {
   22bdc:	697b      	ldr	r3, [r7, #20]
   22bde:	2b00      	cmp	r3, #0
   22be0:	d004      	beq.n	22bec <log_n+0x2a>
		msg_finalize(msg, src_level);
   22be2:	8839      	ldrh	r1, [r7, #0]
   22be4:	6978      	ldr	r0, [r7, #20]
   22be6:	f7f0 f821 	bl	12c2c <msg_finalize>
   22bea:	e000      	b.n	22bee <log_n+0x2c>
			return;
   22bec:	bf00      	nop
}
   22bee:	3718      	adds	r7, #24
   22bf0:	46bd      	mov	sp, r7
   22bf2:	bd80      	pop	{r7, pc}

00022bf4 <default_get_timestamp>:
{
   22bf4:	b580      	push	{r7, lr}
   22bf6:	af00      	add	r7, sp, #0
		sys_clock_tick_get() : k_cycle_get_32();
   22bf8:	f7ff fedf 	bl	229ba <k_cycle_get_32>
   22bfc:	4603      	mov	r3, r0
}
   22bfe:	4618      	mov	r0, r3
   22c00:	bd80      	pop	{r7, pc}

00022c02 <default_lf_get_timestamp>:
{
   22c02:	b580      	push	{r7, lr}
   22c04:	af00      	add	r7, sp, #0
		k_uptime_get() : k_uptime_get_32();
   22c06:	f7ff fecf 	bl	229a8 <k_uptime_get_32>
   22c0a:	4603      	mov	r3, r0
}
   22c0c:	4618      	mov	r0, r3
   22c0e:	bd80      	pop	{r7, pc}

00022c10 <msg_filter_check>:
{
   22c10:	b480      	push	{r7}
   22c12:	b083      	sub	sp, #12
   22c14:	af00      	add	r7, sp, #0
   22c16:	6078      	str	r0, [r7, #4]
   22c18:	6039      	str	r1, [r7, #0]
		return true;
   22c1a:	2301      	movs	r3, #1
}
   22c1c:	4618      	mov	r0, r3
   22c1e:	370c      	adds	r7, #12
   22c20:	46bd      	mov	sp, r7
   22c22:	bc80      	pop	{r7}
   22c24:	4770      	bx	lr

00022c26 <dropped_notify>:
{
   22c26:	b580      	push	{r7, lr}
   22c28:	b084      	sub	sp, #16
   22c2a:	af00      	add	r7, sp, #0
	uint32_t dropped = z_log_dropped_read_and_clear();
   22c2c:	f7f0 f9c4 	bl	12fb8 <z_log_dropped_read_and_clear>
   22c30:	60b8      	str	r0, [r7, #8]
	for (int i = 0; i < log_backend_count_get(); i++) {
   22c32:	2300      	movs	r3, #0
   22c34:	60fb      	str	r3, [r7, #12]
   22c36:	e011      	b.n	22c5c <dropped_notify+0x36>
		struct log_backend const *backend = log_backend_get(i);
   22c38:	68fb      	ldr	r3, [r7, #12]
   22c3a:	4618      	mov	r0, r3
   22c3c:	f7ef fe4c 	bl	128d8 <log_backend_get>
   22c40:	6078      	str	r0, [r7, #4]
		if (log_backend_is_active(backend)) {
   22c42:	6878      	ldr	r0, [r7, #4]
   22c44:	f7ef fe8c 	bl	12960 <log_backend_is_active>
   22c48:	4603      	mov	r3, r0
   22c4a:	2b00      	cmp	r3, #0
   22c4c:	d003      	beq.n	22c56 <dropped_notify+0x30>
			log_backend_dropped(backend, dropped);
   22c4e:	68b9      	ldr	r1, [r7, #8]
   22c50:	6878      	ldr	r0, [r7, #4]
   22c52:	f7ef fdd7 	bl	12804 <log_backend_dropped>
	for (int i = 0; i < log_backend_count_get(); i++) {
   22c56:	68fb      	ldr	r3, [r7, #12]
   22c58:	3301      	adds	r3, #1
   22c5a:	60fb      	str	r3, [r7, #12]
   22c5c:	f7ef fe4c 	bl	128f8 <log_backend_count_get>
   22c60:	4602      	mov	r2, r0
   22c62:	68fb      	ldr	r3, [r7, #12]
   22c64:	4293      	cmp	r3, r2
   22c66:	dbe7      	blt.n	22c38 <dropped_notify+0x12>
}
   22c68:	bf00      	nop
   22c6a:	bf00      	nop
   22c6c:	3710      	adds	r7, #16
   22c6e:	46bd      	mov	sp, r7
   22c70:	bd80      	pop	{r7, pc}

00022c72 <log_source_name_get>:
{
   22c72:	b580      	push	{r7, lr}
   22c74:	b082      	sub	sp, #8
   22c76:	af00      	add	r7, sp, #0
   22c78:	6078      	str	r0, [r7, #4]
   22c7a:	6039      	str	r1, [r7, #0]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   22c7c:	f7ef fd86 	bl	1278c <log_sources_count>
   22c80:	4602      	mov	r2, r0
   22c82:	683b      	ldr	r3, [r7, #0]
   22c84:	4293      	cmp	r3, r2
   22c86:	d204      	bcs.n	22c92 <log_source_name_get+0x20>
   22c88:	6838      	ldr	r0, [r7, #0]
   22c8a:	f7ef fd5f 	bl	1274c <log_name_get>
   22c8e:	4603      	mov	r3, r0
   22c90:	e000      	b.n	22c94 <log_source_name_get+0x22>
   22c92:	2300      	movs	r3, #0
}
   22c94:	4618      	mov	r0, r3
   22c96:	3708      	adds	r7, #8
   22c98:	46bd      	mov	sp, r7
   22c9a:	bd80      	pop	{r7, pc}

00022c9c <backend_filter_set>:
{
   22c9c:	b480      	push	{r7}
   22c9e:	b083      	sub	sp, #12
   22ca0:	af00      	add	r7, sp, #0
   22ca2:	6078      	str	r0, [r7, #4]
   22ca4:	6039      	str	r1, [r7, #0]
}
   22ca6:	bf00      	nop
   22ca8:	370c      	adds	r7, #12
   22caa:	46bd      	mov	sp, r7
   22cac:	bc80      	pop	{r7}
   22cae:	4770      	bx	lr

00022cb0 <atomic_add>:
{
   22cb0:	b480      	push	{r7}
   22cb2:	b083      	sub	sp, #12
   22cb4:	af00      	add	r7, sp, #0
   22cb6:	6078      	str	r0, [r7, #4]
   22cb8:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   22cba:	683a      	ldr	r2, [r7, #0]
   22cbc:	687b      	ldr	r3, [r7, #4]
   22cbe:	e8d3 1fef 	ldaex	r1, [r3]
   22cc2:	eb01 0002 	add.w	r0, r1, r2
   22cc6:	e8c3 0fec 	stlex	ip, r0, [r3]
   22cca:	f1bc 0f00 	cmp.w	ip, #0
   22cce:	d1f6      	bne.n	22cbe <atomic_add+0xe>
   22cd0:	460b      	mov	r3, r1
}
   22cd2:	4618      	mov	r0, r3
   22cd4:	370c      	adds	r7, #12
   22cd6:	46bd      	mov	sp, r7
   22cd8:	bc80      	pop	{r7}
   22cda:	4770      	bx	lr

00022cdc <atomic_sub>:
{
   22cdc:	b480      	push	{r7}
   22cde:	b083      	sub	sp, #12
   22ce0:	af00      	add	r7, sp, #0
   22ce2:	6078      	str	r0, [r7, #4]
   22ce4:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   22ce6:	683a      	ldr	r2, [r7, #0]
   22ce8:	687b      	ldr	r3, [r7, #4]
   22cea:	e8d3 1fef 	ldaex	r1, [r3]
   22cee:	eba1 0002 	sub.w	r0, r1, r2
   22cf2:	e8c3 0fec 	stlex	ip, r0, [r3]
   22cf6:	f1bc 0f00 	cmp.w	ip, #0
   22cfa:	d1f6      	bne.n	22cea <atomic_sub+0xe>
   22cfc:	460b      	mov	r3, r1
}
   22cfe:	4618      	mov	r0, r3
   22d00:	370c      	adds	r7, #12
   22d02:	46bd      	mov	sp, r7
   22d04:	bc80      	pop	{r7}
   22d06:	4770      	bx	lr

00022d08 <atomic_inc>:
{
   22d08:	b580      	push	{r7, lr}
   22d0a:	b082      	sub	sp, #8
   22d0c:	af00      	add	r7, sp, #0
   22d0e:	6078      	str	r0, [r7, #4]
	return atomic_add(target, 1);
   22d10:	2101      	movs	r1, #1
   22d12:	6878      	ldr	r0, [r7, #4]
   22d14:	f7ff ffcc 	bl	22cb0 <atomic_add>
   22d18:	4603      	mov	r3, r0
}
   22d1a:	4618      	mov	r0, r3
   22d1c:	3708      	adds	r7, #8
   22d1e:	46bd      	mov	sp, r7
   22d20:	bd80      	pop	{r7, pc}

00022d22 <atomic_dec>:
{
   22d22:	b580      	push	{r7, lr}
   22d24:	b082      	sub	sp, #8
   22d26:	af00      	add	r7, sp, #0
   22d28:	6078      	str	r0, [r7, #4]
	return atomic_sub(target, 1);
   22d2a:	2101      	movs	r1, #1
   22d2c:	6878      	ldr	r0, [r7, #4]
   22d2e:	f7ff ffd5 	bl	22cdc <atomic_sub>
   22d32:	4603      	mov	r3, r0
}
   22d34:	4618      	mov	r0, r3
   22d36:	3708      	adds	r7, #8
   22d38:	46bd      	mov	sp, r7
   22d3a:	bd80      	pop	{r7, pc}

00022d3c <k_ms_to_ticks_ceil64>:
{
   22d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   22d40:	b08c      	sub	sp, #48	; 0x30
   22d42:	af00      	add	r7, sp, #0
   22d44:	e9c7 0100 	strd	r0, r1, [r7]
   22d48:	e9d7 2300 	ldrd	r2, r3, [r7]
   22d4c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   22d50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22d54:	627b      	str	r3, [r7, #36]	; 0x24
   22d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   22d5a:	623b      	str	r3, [r7, #32]
   22d5c:	2301      	movs	r3, #1
   22d5e:	77fb      	strb	r3, [r7, #31]
   22d60:	2300      	movs	r3, #0
   22d62:	77bb      	strb	r3, [r7, #30]
   22d64:	2301      	movs	r3, #1
   22d66:	777b      	strb	r3, [r7, #29]
   22d68:	2300      	movs	r3, #0
   22d6a:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   22d6c:	7ffb      	ldrb	r3, [r7, #31]
   22d6e:	2b00      	cmp	r3, #0
   22d70:	d00f      	beq.n	22d92 <k_ms_to_ticks_ceil64+0x56>
	bool mul_ratio = const_hz &&
   22d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   22d74:	6a3b      	ldr	r3, [r7, #32]
   22d76:	429a      	cmp	r2, r3
   22d78:	d20b      	bcs.n	22d92 <k_ms_to_ticks_ceil64+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   22d7a:	6a3b      	ldr	r3, [r7, #32]
   22d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   22d7e:	fbb3 f2f2 	udiv	r2, r3, r2
   22d82:	6a79      	ldr	r1, [r7, #36]	; 0x24
   22d84:	fb01 f202 	mul.w	r2, r1, r2
   22d88:	1a9b      	subs	r3, r3, r2
   22d8a:	2b00      	cmp	r3, #0
   22d8c:	d101      	bne.n	22d92 <k_ms_to_ticks_ceil64+0x56>
   22d8e:	2301      	movs	r3, #1
   22d90:	e000      	b.n	22d94 <k_ms_to_ticks_ceil64+0x58>
   22d92:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   22d94:	76fb      	strb	r3, [r7, #27]
   22d96:	7efb      	ldrb	r3, [r7, #27]
   22d98:	f003 0301 	and.w	r3, r3, #1
   22d9c:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   22d9e:	7ffb      	ldrb	r3, [r7, #31]
   22da0:	2b00      	cmp	r3, #0
   22da2:	d00f      	beq.n	22dc4 <k_ms_to_ticks_ceil64+0x88>
	bool div_ratio = const_hz &&
   22da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   22da6:	6a3b      	ldr	r3, [r7, #32]
   22da8:	429a      	cmp	r2, r3
   22daa:	d90b      	bls.n	22dc4 <k_ms_to_ticks_ceil64+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   22dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22dae:	6a3a      	ldr	r2, [r7, #32]
   22db0:	fbb3 f2f2 	udiv	r2, r3, r2
   22db4:	6a39      	ldr	r1, [r7, #32]
   22db6:	fb01 f202 	mul.w	r2, r1, r2
   22dba:	1a9b      	subs	r3, r3, r2
   22dbc:	2b00      	cmp	r3, #0
   22dbe:	d101      	bne.n	22dc4 <k_ms_to_ticks_ceil64+0x88>
   22dc0:	2301      	movs	r3, #1
   22dc2:	e000      	b.n	22dc6 <k_ms_to_ticks_ceil64+0x8a>
   22dc4:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   22dc6:	76bb      	strb	r3, [r7, #26]
   22dc8:	7ebb      	ldrb	r3, [r7, #26]
   22dca:	f003 0301 	and.w	r3, r3, #1
   22dce:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   22dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   22dd2:	6a3b      	ldr	r3, [r7, #32]
   22dd4:	429a      	cmp	r2, r3
   22dd6:	d10a      	bne.n	22dee <k_ms_to_ticks_ceil64+0xb2>
		return result32 ? ((uint32_t)t) : t;
   22dd8:	7fbb      	ldrb	r3, [r7, #30]
   22dda:	2b00      	cmp	r3, #0
   22ddc:	d004      	beq.n	22de8 <k_ms_to_ticks_ceil64+0xac>
   22dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22de0:	461a      	mov	r2, r3
   22de2:	f04f 0300 	mov.w	r3, #0
   22de6:	e0c7      	b.n	22f78 <k_ms_to_ticks_ceil64+0x23c>
   22de8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   22dec:	e0c4      	b.n	22f78 <k_ms_to_ticks_ceil64+0x23c>
	uint64_t off = 0;
   22dee:	f04f 0200 	mov.w	r2, #0
   22df2:	f04f 0300 	mov.w	r3, #0
   22df6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   22dfa:	7efb      	ldrb	r3, [r7, #27]
   22dfc:	f083 0301 	eor.w	r3, r3, #1
   22e00:	b2db      	uxtb	r3, r3
   22e02:	2b00      	cmp	r3, #0
   22e04:	d01d      	beq.n	22e42 <k_ms_to_ticks_ceil64+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   22e06:	7ebb      	ldrb	r3, [r7, #26]
   22e08:	2b00      	cmp	r3, #0
   22e0a:	d004      	beq.n	22e16 <k_ms_to_ticks_ceil64+0xda>
   22e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   22e0e:	6a3b      	ldr	r3, [r7, #32]
   22e10:	fbb2 f3f3 	udiv	r3, r2, r3
   22e14:	e000      	b.n	22e18 <k_ms_to_ticks_ceil64+0xdc>
   22e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22e18:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   22e1a:	7f7b      	ldrb	r3, [r7, #29]
   22e1c:	2b00      	cmp	r3, #0
   22e1e:	d006      	beq.n	22e2e <k_ms_to_ticks_ceil64+0xf2>
			off = rdivisor - 1U;
   22e20:	68fb      	ldr	r3, [r7, #12]
   22e22:	3b01      	subs	r3, #1
   22e24:	461a      	mov	r2, r3
   22e26:	f04f 0300 	mov.w	r3, #0
   22e2a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   22e2e:	7f3b      	ldrb	r3, [r7, #28]
   22e30:	2b00      	cmp	r3, #0
   22e32:	d006      	beq.n	22e42 <k_ms_to_ticks_ceil64+0x106>
			off = rdivisor / 2U;
   22e34:	68fb      	ldr	r3, [r7, #12]
   22e36:	085b      	lsrs	r3, r3, #1
   22e38:	461a      	mov	r2, r3
   22e3a:	f04f 0300 	mov.w	r3, #0
   22e3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   22e42:	7ebb      	ldrb	r3, [r7, #26]
   22e44:	2b00      	cmp	r3, #0
   22e46:	d02a      	beq.n	22e9e <k_ms_to_ticks_ceil64+0x162>
		t += off;
   22e48:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   22e4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   22e50:	1884      	adds	r4, r0, r2
   22e52:	eb41 0503 	adc.w	r5, r1, r3
   22e56:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   22e5a:	7fbb      	ldrb	r3, [r7, #30]
   22e5c:	2b00      	cmp	r3, #0
   22e5e:	d010      	beq.n	22e82 <k_ms_to_ticks_ceil64+0x146>
   22e60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   22e64:	2b01      	cmp	r3, #1
   22e66:	bf08      	it	eq
   22e68:	2a00      	cmpeq	r2, #0
   22e6a:	d20a      	bcs.n	22e82 <k_ms_to_ticks_ceil64+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
   22e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   22e6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   22e70:	6a3b      	ldr	r3, [r7, #32]
   22e72:	fbb1 f3f3 	udiv	r3, r1, r3
   22e76:	fbb2 f3f3 	udiv	r3, r2, r3
   22e7a:	461a      	mov	r2, r3
   22e7c:	f04f 0300 	mov.w	r3, #0
   22e80:	e07a      	b.n	22f78 <k_ms_to_ticks_ceil64+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
   22e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   22e84:	6a3b      	ldr	r3, [r7, #32]
   22e86:	fbb2 f3f3 	udiv	r3, r2, r3
   22e8a:	461a      	mov	r2, r3
   22e8c:	f04f 0300 	mov.w	r3, #0
   22e90:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   22e94:	f7ed f9d2 	bl	1023c <__aeabi_uldivmod>
   22e98:	4602      	mov	r2, r0
   22e9a:	460b      	mov	r3, r1
   22e9c:	e06c      	b.n	22f78 <k_ms_to_ticks_ceil64+0x23c>
	} else if (mul_ratio) {
   22e9e:	7efb      	ldrb	r3, [r7, #27]
   22ea0:	2b00      	cmp	r3, #0
   22ea2:	d021      	beq.n	22ee8 <k_ms_to_ticks_ceil64+0x1ac>
		if (result32) {
   22ea4:	7fbb      	ldrb	r3, [r7, #30]
   22ea6:	2b00      	cmp	r3, #0
   22ea8:	d00a      	beq.n	22ec0 <k_ms_to_ticks_ceil64+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
   22eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22eac:	6a39      	ldr	r1, [r7, #32]
   22eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   22eb0:	fbb1 f2f2 	udiv	r2, r1, r2
   22eb4:	fb02 f303 	mul.w	r3, r2, r3
   22eb8:	461a      	mov	r2, r3
   22eba:	f04f 0300 	mov.w	r3, #0
   22ebe:	e05b      	b.n	22f78 <k_ms_to_ticks_ceil64+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
   22ec0:	6a3a      	ldr	r2, [r7, #32]
   22ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22ec4:	fbb2 f3f3 	udiv	r3, r2, r3
   22ec8:	461a      	mov	r2, r3
   22eca:	f04f 0300 	mov.w	r3, #0
   22ece:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   22ed0:	fb03 f001 	mul.w	r0, r3, r1
   22ed4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   22ed6:	fb02 f101 	mul.w	r1, r2, r1
   22eda:	4401      	add	r1, r0
   22edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   22ede:	fba0 2302 	umull	r2, r3, r0, r2
   22ee2:	4419      	add	r1, r3
   22ee4:	460b      	mov	r3, r1
   22ee6:	e047      	b.n	22f78 <k_ms_to_ticks_ceil64+0x23c>
		if (result32) {
   22ee8:	7fbb      	ldrb	r3, [r7, #30]
   22eea:	2b00      	cmp	r3, #0
   22eec:	d024      	beq.n	22f38 <k_ms_to_ticks_ceil64+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   22eee:	6a3b      	ldr	r3, [r7, #32]
   22ef0:	461a      	mov	r2, r3
   22ef2:	f04f 0300 	mov.w	r3, #0
   22ef6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   22ef8:	fb03 f001 	mul.w	r0, r3, r1
   22efc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   22efe:	fb02 f101 	mul.w	r1, r2, r1
   22f02:	4401      	add	r1, r0
   22f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   22f06:	fba0 2302 	umull	r2, r3, r0, r2
   22f0a:	4419      	add	r1, r3
   22f0c:	460b      	mov	r3, r1
   22f0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   22f12:	eb12 0a00 	adds.w	sl, r2, r0
   22f16:	eb43 0b01 	adc.w	fp, r3, r1
   22f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22f1c:	461a      	mov	r2, r3
   22f1e:	f04f 0300 	mov.w	r3, #0
   22f22:	4650      	mov	r0, sl
   22f24:	4659      	mov	r1, fp
   22f26:	f7ed f989 	bl	1023c <__aeabi_uldivmod>
   22f2a:	4602      	mov	r2, r0
   22f2c:	460b      	mov	r3, r1
   22f2e:	4613      	mov	r3, r2
   22f30:	461a      	mov	r2, r3
   22f32:	f04f 0300 	mov.w	r3, #0
   22f36:	e01f      	b.n	22f78 <k_ms_to_ticks_ceil64+0x23c>
			return (t * to_hz + off) / from_hz;
   22f38:	6a3b      	ldr	r3, [r7, #32]
   22f3a:	461a      	mov	r2, r3
   22f3c:	f04f 0300 	mov.w	r3, #0
   22f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   22f42:	fb03 f001 	mul.w	r0, r3, r1
   22f46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   22f48:	fb02 f101 	mul.w	r1, r2, r1
   22f4c:	4401      	add	r1, r0
   22f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   22f50:	fba0 2302 	umull	r2, r3, r0, r2
   22f54:	4419      	add	r1, r3
   22f56:	460b      	mov	r3, r1
   22f58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   22f5c:	eb12 0800 	adds.w	r8, r2, r0
   22f60:	eb43 0901 	adc.w	r9, r3, r1
   22f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22f66:	461a      	mov	r2, r3
   22f68:	f04f 0300 	mov.w	r3, #0
   22f6c:	4640      	mov	r0, r8
   22f6e:	4649      	mov	r1, r9
   22f70:	f7ed f964 	bl	1023c <__aeabi_uldivmod>
   22f74:	4602      	mov	r2, r0
   22f76:	460b      	mov	r3, r1
}
   22f78:	4610      	mov	r0, r2
   22f7a:	4619      	mov	r1, r3
   22f7c:	3730      	adds	r7, #48	; 0x30
   22f7e:	46bd      	mov	sp, r7
   22f80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

00022f84 <log_msg_is_std>:
{
   22f84:	b480      	push	{r7}
   22f86:	b083      	sub	sp, #12
   22f88:	af00      	add	r7, sp, #0
   22f8a:	6078      	str	r0, [r7, #4]
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   22f8c:	687b      	ldr	r3, [r7, #4]
   22f8e:	7a1b      	ldrb	r3, [r3, #8]
   22f90:	f003 0301 	and.w	r3, r3, #1
   22f94:	b2db      	uxtb	r3, r3
   22f96:	2b00      	cmp	r3, #0
   22f98:	bf0c      	ite	eq
   22f9a:	2301      	moveq	r3, #1
   22f9c:	2300      	movne	r3, #0
   22f9e:	b2db      	uxtb	r3, r3
}
   22fa0:	4618      	mov	r0, r3
   22fa2:	370c      	adds	r7, #12
   22fa4:	46bd      	mov	sp, r7
   22fa6:	bc80      	pop	{r7}
   22fa8:	4770      	bx	lr

00022faa <z_log_msg_std_alloc>:
{
   22faa:	b580      	push	{r7, lr}
   22fac:	b082      	sub	sp, #8
   22fae:	af00      	add	r7, sp, #0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   22fb0:	f7f0 f97a 	bl	132a8 <log_msg_chunk_alloc>
   22fb4:	6078      	str	r0, [r7, #4]
	if (msg != NULL) {
   22fb6:	687b      	ldr	r3, [r7, #4]
   22fb8:	2b00      	cmp	r3, #0
   22fba:	d00a      	beq.n	22fd2 <z_log_msg_std_alloc+0x28>
		msg->hdr.ref_cnt = 1;
   22fbc:	687b      	ldr	r3, [r7, #4]
   22fbe:	2201      	movs	r2, #1
   22fc0:	605a      	str	r2, [r3, #4]
		msg->hdr.params.raw = 0U;
   22fc2:	687b      	ldr	r3, [r7, #4]
   22fc4:	2200      	movs	r2, #0
   22fc6:	811a      	strh	r2, [r3, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   22fc8:	687a      	ldr	r2, [r7, #4]
   22fca:	7a13      	ldrb	r3, [r2, #8]
   22fcc:	f36f 0300 	bfc	r3, #0, #1
   22fd0:	7213      	strb	r3, [r2, #8]
	return msg;
   22fd2:	687b      	ldr	r3, [r7, #4]
}
   22fd4:	4618      	mov	r0, r3
   22fd6:	3708      	adds	r7, #8
   22fd8:	46bd      	mov	sp, r7
   22fda:	bd80      	pop	{r7, pc}

00022fdc <log_process>:
{
   22fdc:	b580      	push	{r7, lr}
   22fde:	b082      	sub	sp, #8
   22fe0:	af00      	add	r7, sp, #0
   22fe2:	4603      	mov	r3, r0
   22fe4:	71fb      	strb	r3, [r7, #7]
	return z_impl_log_process(bypass);
   22fe6:	79fb      	ldrb	r3, [r7, #7]
   22fe8:	4618      	mov	r0, r3
   22fea:	f7ef ff9f 	bl	12f2c <z_impl_log_process>
   22fee:	4603      	mov	r3, r0
}
   22ff0:	4618      	mov	r0, r3
   22ff2:	3708      	adds	r7, #8
   22ff4:	46bd      	mov	sp, r7
   22ff6:	bd80      	pop	{r7, pc}

00022ff8 <block_on_alloc>:
{
   22ff8:	b480      	push	{r7}
   22ffa:	af00      	add	r7, sp, #0
		return false;
   22ffc:	2300      	movs	r3, #0
}
   22ffe:	4618      	mov	r0, r3
   23000:	46bd      	mov	sp, r7
   23002:	bc80      	pop	{r7}
   23004:	4770      	bx	lr

00023006 <log_msg_get>:
{
   23006:	b580      	push	{r7, lr}
   23008:	b082      	sub	sp, #8
   2300a:	af00      	add	r7, sp, #0
   2300c:	6078      	str	r0, [r7, #4]
	atomic_inc(&msg->hdr.ref_cnt);
   2300e:	687b      	ldr	r3, [r7, #4]
   23010:	3304      	adds	r3, #4
   23012:	4618      	mov	r0, r3
   23014:	f7ff fe78 	bl	22d08 <atomic_inc>
}
   23018:	bf00      	nop
   2301a:	3708      	adds	r7, #8
   2301c:	46bd      	mov	sp, r7
   2301e:	bd80      	pop	{r7, pc}

00023020 <log_msg_put>:
{
   23020:	b580      	push	{r7, lr}
   23022:	b082      	sub	sp, #8
   23024:	af00      	add	r7, sp, #0
   23026:	6078      	str	r0, [r7, #4]
	atomic_dec(&msg->hdr.ref_cnt);
   23028:	687b      	ldr	r3, [r7, #4]
   2302a:	3304      	adds	r3, #4
   2302c:	4618      	mov	r0, r3
   2302e:	f7ff fe78 	bl	22d22 <atomic_dec>
	if (msg->hdr.ref_cnt == 0) {
   23032:	687b      	ldr	r3, [r7, #4]
   23034:	685b      	ldr	r3, [r3, #4]
   23036:	2b00      	cmp	r3, #0
   23038:	d102      	bne.n	23040 <log_msg_put+0x20>
		msg_free(msg);
   2303a:	6878      	ldr	r0, [r7, #4]
   2303c:	f7f0 f978 	bl	13330 <msg_free>
}
   23040:	bf00      	nop
   23042:	3708      	adds	r7, #8
   23044:	46bd      	mov	sp, r7
   23046:	bd80      	pop	{r7, pc}

00023048 <log_msg_nargs_get>:
{
   23048:	b480      	push	{r7}
   2304a:	b083      	sub	sp, #12
   2304c:	af00      	add	r7, sp, #0
   2304e:	6078      	str	r0, [r7, #4]
	return msg->hdr.params.std.nargs;
   23050:	687b      	ldr	r3, [r7, #4]
   23052:	7a5b      	ldrb	r3, [r3, #9]
   23054:	f3c3 1303 	ubfx	r3, r3, #4, #4
   23058:	b2db      	uxtb	r3, r3
}
   2305a:	4618      	mov	r0, r3
   2305c:	370c      	adds	r7, #12
   2305e:	46bd      	mov	sp, r7
   23060:	bc80      	pop	{r7}
   23062:	4770      	bx	lr

00023064 <cont_arg_get>:
{
   23064:	b480      	push	{r7}
   23066:	b085      	sub	sp, #20
   23068:	af00      	add	r7, sp, #0
   2306a:	6078      	str	r0, [r7, #4]
   2306c:	6039      	str	r1, [r7, #0]
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   2306e:	683b      	ldr	r3, [r7, #0]
   23070:	2b01      	cmp	r3, #1
   23072:	d806      	bhi.n	23082 <cont_arg_get+0x1e>
		return msg->payload.ext.data.args[arg_idx];
   23074:	687a      	ldr	r2, [r7, #4]
   23076:	683b      	ldr	r3, [r7, #0]
   23078:	3304      	adds	r3, #4
   2307a:	009b      	lsls	r3, r3, #2
   2307c:	4413      	add	r3, r2
   2307e:	689b      	ldr	r3, [r3, #8]
   23080:	e014      	b.n	230ac <cont_arg_get+0x48>
	cont = msg->payload.ext.next;
   23082:	687b      	ldr	r3, [r7, #4]
   23084:	695b      	ldr	r3, [r3, #20]
   23086:	60fb      	str	r3, [r7, #12]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   23088:	683b      	ldr	r3, [r7, #0]
   2308a:	3b02      	subs	r3, #2
   2308c:	603b      	str	r3, [r7, #0]
	while (arg_idx >= ARGS_CONT_MSG) {
   2308e:	e005      	b.n	2309c <cont_arg_get+0x38>
		arg_idx -= ARGS_CONT_MSG;
   23090:	683b      	ldr	r3, [r7, #0]
   23092:	3b07      	subs	r3, #7
   23094:	603b      	str	r3, [r7, #0]
		cont = cont->next;
   23096:	68fb      	ldr	r3, [r7, #12]
   23098:	681b      	ldr	r3, [r3, #0]
   2309a:	60fb      	str	r3, [r7, #12]
	while (arg_idx >= ARGS_CONT_MSG) {
   2309c:	683b      	ldr	r3, [r7, #0]
   2309e:	2b06      	cmp	r3, #6
   230a0:	d8f6      	bhi.n	23090 <cont_arg_get+0x2c>
	return cont->payload.args[arg_idx];
   230a2:	68fa      	ldr	r2, [r7, #12]
   230a4:	683b      	ldr	r3, [r7, #0]
   230a6:	009b      	lsls	r3, r3, #2
   230a8:	4413      	add	r3, r2
   230aa:	685b      	ldr	r3, [r3, #4]
}
   230ac:	4618      	mov	r0, r3
   230ae:	3714      	adds	r7, #20
   230b0:	46bd      	mov	sp, r7
   230b2:	bc80      	pop	{r7}
   230b4:	4770      	bx	lr

000230b6 <log_msg_arg_get>:
{
   230b6:	b580      	push	{r7, lr}
   230b8:	b084      	sub	sp, #16
   230ba:	af00      	add	r7, sp, #0
   230bc:	6078      	str	r0, [r7, #4]
   230be:	6039      	str	r1, [r7, #0]
	if (arg_idx >= msg->hdr.params.std.nargs) {
   230c0:	687b      	ldr	r3, [r7, #4]
   230c2:	7a5b      	ldrb	r3, [r3, #9]
   230c4:	f3c3 1303 	ubfx	r3, r3, #4, #4
   230c8:	b2db      	uxtb	r3, r3
   230ca:	461a      	mov	r2, r3
   230cc:	683b      	ldr	r3, [r7, #0]
   230ce:	4293      	cmp	r3, r2
   230d0:	d301      	bcc.n	230d6 <log_msg_arg_get+0x20>
		return 0;
   230d2:	2300      	movs	r3, #0
   230d4:	e014      	b.n	23100 <log_msg_arg_get+0x4a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   230d6:	687b      	ldr	r3, [r7, #4]
   230d8:	7a5b      	ldrb	r3, [r3, #9]
   230da:	f3c3 1303 	ubfx	r3, r3, #4, #4
   230de:	b2db      	uxtb	r3, r3
   230e0:	2b03      	cmp	r3, #3
   230e2:	d807      	bhi.n	230f4 <log_msg_arg_get+0x3e>
		arg = msg->payload.single.args[arg_idx];
   230e4:	687a      	ldr	r2, [r7, #4]
   230e6:	683b      	ldr	r3, [r7, #0]
   230e8:	3304      	adds	r3, #4
   230ea:	009b      	lsls	r3, r3, #2
   230ec:	4413      	add	r3, r2
   230ee:	685b      	ldr	r3, [r3, #4]
   230f0:	60fb      	str	r3, [r7, #12]
   230f2:	e004      	b.n	230fe <log_msg_arg_get+0x48>
		arg = cont_arg_get(msg, arg_idx);
   230f4:	6839      	ldr	r1, [r7, #0]
   230f6:	6878      	ldr	r0, [r7, #4]
   230f8:	f7ff ffb4 	bl	23064 <cont_arg_get>
   230fc:	60f8      	str	r0, [r7, #12]
	return arg;
   230fe:	68fb      	ldr	r3, [r7, #12]
}
   23100:	4618      	mov	r0, r3
   23102:	3710      	adds	r7, #16
   23104:	46bd      	mov	sp, r7
   23106:	bd80      	pop	{r7, pc}

00023108 <log_msg_str_get>:
{
   23108:	b480      	push	{r7}
   2310a:	b083      	sub	sp, #12
   2310c:	af00      	add	r7, sp, #0
   2310e:	6078      	str	r0, [r7, #4]
	return msg->str;
   23110:	687b      	ldr	r3, [r7, #4]
   23112:	691b      	ldr	r3, [r3, #16]
}
   23114:	4618      	mov	r0, r3
   23116:	370c      	adds	r7, #12
   23118:	46bd      	mov	sp, r7
   2311a:	bc80      	pop	{r7}
   2311c:	4770      	bx	lr

0002311e <msg_alloc>:
{
   2311e:	b580      	push	{r7, lr}
   23120:	b086      	sub	sp, #24
   23122:	af00      	add	r7, sp, #0
   23124:	6078      	str	r0, [r7, #4]
	struct  log_msg *msg = z_log_msg_std_alloc();
   23126:	f7ff ff40 	bl	22faa <z_log_msg_std_alloc>
   2312a:	60f8      	str	r0, [r7, #12]
	int n = (int)nargs;
   2312c:	687b      	ldr	r3, [r7, #4]
   2312e:	613b      	str	r3, [r7, #16]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   23130:	68fb      	ldr	r3, [r7, #12]
   23132:	2b00      	cmp	r3, #0
   23134:	d002      	beq.n	2313c <msg_alloc+0x1e>
   23136:	687b      	ldr	r3, [r7, #4]
   23138:	2b03      	cmp	r3, #3
   2313a:	d801      	bhi.n	23140 <msg_alloc+0x22>
		return msg;
   2313c:	68fb      	ldr	r3, [r7, #12]
   2313e:	e02d      	b.n	2319c <msg_alloc+0x7e>
	msg->hdr.params.std.nargs = 0U;
   23140:	68fa      	ldr	r2, [r7, #12]
   23142:	7a53      	ldrb	r3, [r2, #9]
   23144:	f36f 1307 	bfc	r3, #4, #4
   23148:	7253      	strb	r3, [r2, #9]
	msg->hdr.params.generic.ext = 1;
   2314a:	68fa      	ldr	r2, [r7, #12]
   2314c:	7a13      	ldrb	r3, [r2, #8]
   2314e:	f043 0302 	orr.w	r3, r3, #2
   23152:	7213      	strb	r3, [r2, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   23154:	693b      	ldr	r3, [r7, #16]
   23156:	3b02      	subs	r3, #2
   23158:	613b      	str	r3, [r7, #16]
	next = &msg->payload.ext.next;
   2315a:	68fb      	ldr	r3, [r7, #12]
   2315c:	3314      	adds	r3, #20
   2315e:	617b      	str	r3, [r7, #20]
	*next = NULL;
   23160:	697b      	ldr	r3, [r7, #20]
   23162:	2200      	movs	r2, #0
   23164:	601a      	str	r2, [r3, #0]
	while (n > 0) {
   23166:	e015      	b.n	23194 <msg_alloc+0x76>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   23168:	f7f0 f89e 	bl	132a8 <log_msg_chunk_alloc>
   2316c:	60b8      	str	r0, [r7, #8]
		if (cont == NULL) {
   2316e:	68bb      	ldr	r3, [r7, #8]
   23170:	2b00      	cmp	r3, #0
   23172:	d104      	bne.n	2317e <msg_alloc+0x60>
			msg_free(msg);
   23174:	68f8      	ldr	r0, [r7, #12]
   23176:	f7f0 f8db 	bl	13330 <msg_free>
			return NULL;
   2317a:	2300      	movs	r3, #0
   2317c:	e00e      	b.n	2319c <msg_alloc+0x7e>
		*next = cont;
   2317e:	697b      	ldr	r3, [r7, #20]
   23180:	68ba      	ldr	r2, [r7, #8]
   23182:	601a      	str	r2, [r3, #0]
		cont->next = NULL;
   23184:	68bb      	ldr	r3, [r7, #8]
   23186:	2200      	movs	r2, #0
   23188:	601a      	str	r2, [r3, #0]
		next = &cont->next;
   2318a:	68bb      	ldr	r3, [r7, #8]
   2318c:	617b      	str	r3, [r7, #20]
		n -= ARGS_CONT_MSG;
   2318e:	693b      	ldr	r3, [r7, #16]
   23190:	3b07      	subs	r3, #7
   23192:	613b      	str	r3, [r7, #16]
	while (n > 0) {
   23194:	693b      	ldr	r3, [r7, #16]
   23196:	2b00      	cmp	r3, #0
   23198:	dce6      	bgt.n	23168 <msg_alloc+0x4a>
	return msg;
   2319a:	68fb      	ldr	r3, [r7, #12]
}
   2319c:	4618      	mov	r0, r3
   2319e:	3718      	adds	r7, #24
   231a0:	46bd      	mov	sp, r7
   231a2:	bd80      	pop	{r7, pc}

000231a4 <copy_args_to_msg>:
{
   231a4:	b580      	push	{r7, lr}
   231a6:	b086      	sub	sp, #24
   231a8:	af00      	add	r7, sp, #0
   231aa:	60f8      	str	r0, [r7, #12]
   231ac:	60b9      	str	r1, [r7, #8]
   231ae:	607a      	str	r2, [r7, #4]
	struct log_msg_cont *cont = msg->payload.ext.next;
   231b0:	68fb      	ldr	r3, [r7, #12]
   231b2:	695b      	ldr	r3, [r3, #20]
   231b4:	617b      	str	r3, [r7, #20]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   231b6:	687b      	ldr	r3, [r7, #4]
   231b8:	2b03      	cmp	r3, #3
   231ba:	d90d      	bls.n	231d8 <copy_args_to_msg+0x34>
		(void)memcpy(msg->payload.ext.data.args, args,
   231bc:	68fb      	ldr	r3, [r7, #12]
   231be:	3318      	adds	r3, #24
   231c0:	2208      	movs	r2, #8
   231c2:	68b9      	ldr	r1, [r7, #8]
   231c4:	4618      	mov	r0, r3
   231c6:	f001 fa91 	bl	246ec <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   231ca:	687b      	ldr	r3, [r7, #4]
   231cc:	3b02      	subs	r3, #2
   231ce:	607b      	str	r3, [r7, #4]
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   231d0:	68bb      	ldr	r3, [r7, #8]
   231d2:	3308      	adds	r3, #8
   231d4:	60bb      	str	r3, [r7, #8]
   231d6:	e024      	b.n	23222 <copy_args_to_msg+0x7e>
		(void)memcpy(msg->payload.single.args, args,
   231d8:	68fb      	ldr	r3, [r7, #12]
   231da:	f103 0014 	add.w	r0, r3, #20
   231de:	687b      	ldr	r3, [r7, #4]
   231e0:	009b      	lsls	r3, r3, #2
   231e2:	461a      	mov	r2, r3
   231e4:	68b9      	ldr	r1, [r7, #8]
   231e6:	f001 fa81 	bl	246ec <memcpy>
		nargs  = 0U;
   231ea:	2300      	movs	r3, #0
   231ec:	607b      	str	r3, [r7, #4]
	while (nargs != 0U) {
   231ee:	e018      	b.n	23222 <copy_args_to_msg+0x7e>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   231f0:	687b      	ldr	r3, [r7, #4]
   231f2:	2b07      	cmp	r3, #7
   231f4:	bf28      	it	cs
   231f6:	2307      	movcs	r3, #7
   231f8:	613b      	str	r3, [r7, #16]
		(void)memcpy(cont->payload.args, args,
   231fa:	697b      	ldr	r3, [r7, #20]
   231fc:	1d18      	adds	r0, r3, #4
   231fe:	693b      	ldr	r3, [r7, #16]
   23200:	009b      	lsls	r3, r3, #2
   23202:	461a      	mov	r2, r3
   23204:	68b9      	ldr	r1, [r7, #8]
   23206:	f001 fa71 	bl	246ec <memcpy>
		nargs -= cpy_args;
   2320a:	687a      	ldr	r2, [r7, #4]
   2320c:	693b      	ldr	r3, [r7, #16]
   2320e:	1ad3      	subs	r3, r2, r3
   23210:	607b      	str	r3, [r7, #4]
		args += cpy_args;
   23212:	693b      	ldr	r3, [r7, #16]
   23214:	009b      	lsls	r3, r3, #2
   23216:	68ba      	ldr	r2, [r7, #8]
   23218:	4413      	add	r3, r2
   2321a:	60bb      	str	r3, [r7, #8]
		cont = cont->next;
   2321c:	697b      	ldr	r3, [r7, #20]
   2321e:	681b      	ldr	r3, [r3, #0]
   23220:	617b      	str	r3, [r7, #20]
	while (nargs != 0U) {
   23222:	687b      	ldr	r3, [r7, #4]
   23224:	2b00      	cmp	r3, #0
   23226:	d1e3      	bne.n	231f0 <copy_args_to_msg+0x4c>
}
   23228:	bf00      	nop
   2322a:	bf00      	nop
   2322c:	3718      	adds	r7, #24
   2322e:	46bd      	mov	sp, r7
   23230:	bd80      	pop	{r7, pc}

00023232 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   23232:	b580      	push	{r7, lr}
   23234:	b08a      	sub	sp, #40	; 0x28
   23236:	af00      	add	r7, sp, #0
   23238:	60f8      	str	r0, [r7, #12]
   2323a:	60b9      	str	r1, [r7, #8]
   2323c:	607a      	str	r2, [r7, #4]
   2323e:	603b      	str	r3, [r7, #0]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   23240:	68fb      	ldr	r3, [r7, #12]
   23242:	891b      	ldrh	r3, [r3, #8]
   23244:	f3c3 038d 	ubfx	r3, r3, #2, #14
   23248:	b29b      	uxth	r3, r3
   2324a:	617b      	str	r3, [r7, #20]
	struct log_msg_cont *cont = NULL;
   2324c:	2300      	movs	r3, #0
   2324e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   23250:	683a      	ldr	r2, [r7, #0]
   23252:	697b      	ldr	r3, [r7, #20]
   23254:	429a      	cmp	r2, r3
   23256:	d303      	bcc.n	23260 <log_msg_hexdump_data_op+0x2e>
		*length = 0;
   23258:	687b      	ldr	r3, [r7, #4]
   2325a:	2200      	movs	r2, #0
   2325c:	601a      	str	r2, [r3, #0]
		return;
   2325e:	e094      	b.n	2338a <log_msg_hexdump_data_op+0x158>
	}

	if ((offset + *length) > available_len) {
   23260:	687b      	ldr	r3, [r7, #4]
   23262:	681a      	ldr	r2, [r3, #0]
   23264:	683b      	ldr	r3, [r7, #0]
   23266:	4413      	add	r3, r2
   23268:	697a      	ldr	r2, [r7, #20]
   2326a:	429a      	cmp	r2, r3
   2326c:	d204      	bcs.n	23278 <log_msg_hexdump_data_op+0x46>
		*length = available_len - offset;
   2326e:	697a      	ldr	r2, [r7, #20]
   23270:	683b      	ldr	r3, [r7, #0]
   23272:	1ad2      	subs	r2, r2, r3
   23274:	687b      	ldr	r3, [r7, #4]
   23276:	601a      	str	r2, [r3, #0]
	}

	req_len = *length;
   23278:	687b      	ldr	r3, [r7, #4]
   2327a:	681b      	ldr	r3, [r3, #0]
   2327c:	61bb      	str	r3, [r7, #24]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2327e:	697b      	ldr	r3, [r7, #20]
   23280:	2b0c      	cmp	r3, #12
   23282:	d908      	bls.n	23296 <log_msg_hexdump_data_op+0x64>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   23284:	2308      	movs	r3, #8
   23286:	61fb      	str	r3, [r7, #28]
		head_data = msg->payload.ext.data.bytes;
   23288:	68fb      	ldr	r3, [r7, #12]
   2328a:	3318      	adds	r3, #24
   2328c:	623b      	str	r3, [r7, #32]
		cont = msg->payload.ext.next;
   2328e:	68fb      	ldr	r3, [r7, #12]
   23290:	695b      	ldr	r3, [r3, #20]
   23292:	627b      	str	r3, [r7, #36]	; 0x24
   23294:	e004      	b.n	232a0 <log_msg_hexdump_data_op+0x6e>
	} else {
		head_data = msg->payload.single.bytes;
   23296:	68fb      	ldr	r3, [r7, #12]
   23298:	3314      	adds	r3, #20
   2329a:	623b      	str	r3, [r7, #32]
		chunk_len = available_len;
   2329c:	697b      	ldr	r3, [r7, #20]
   2329e:	61fb      	str	r3, [r7, #28]

	}

	if (offset < chunk_len) {
   232a0:	683a      	ldr	r2, [r7, #0]
   232a2:	69fb      	ldr	r3, [r7, #28]
   232a4:	429a      	cmp	r2, r3
   232a6:	d223      	bcs.n	232f0 <log_msg_hexdump_data_op+0xbe>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   232a8:	69ba      	ldr	r2, [r7, #24]
   232aa:	69fb      	ldr	r3, [r7, #28]
   232ac:	4293      	cmp	r3, r2
   232ae:	bf28      	it	cs
   232b0:	4613      	movcs	r3, r2
   232b2:	613b      	str	r3, [r7, #16]

		if (put_op) {
   232b4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   232b8:	2b00      	cmp	r3, #0
   232ba:	d008      	beq.n	232ce <log_msg_hexdump_data_op+0x9c>
			(void)memcpy(&head_data[offset], data, cpy_len);
   232bc:	6a3a      	ldr	r2, [r7, #32]
   232be:	683b      	ldr	r3, [r7, #0]
   232c0:	4413      	add	r3, r2
   232c2:	693a      	ldr	r2, [r7, #16]
   232c4:	68b9      	ldr	r1, [r7, #8]
   232c6:	4618      	mov	r0, r3
   232c8:	f001 fa10 	bl	246ec <memcpy>
   232cc:	e007      	b.n	232de <log_msg_hexdump_data_op+0xac>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
   232ce:	6a3a      	ldr	r2, [r7, #32]
   232d0:	683b      	ldr	r3, [r7, #0]
   232d2:	4413      	add	r3, r2
   232d4:	693a      	ldr	r2, [r7, #16]
   232d6:	4619      	mov	r1, r3
   232d8:	68b8      	ldr	r0, [r7, #8]
   232da:	f001 fa07 	bl	246ec <memcpy>
		}

		req_len -= cpy_len;
   232de:	69ba      	ldr	r2, [r7, #24]
   232e0:	693b      	ldr	r3, [r7, #16]
   232e2:	1ad3      	subs	r3, r2, r3
   232e4:	61bb      	str	r3, [r7, #24]
		data += cpy_len;
   232e6:	68ba      	ldr	r2, [r7, #8]
   232e8:	693b      	ldr	r3, [r7, #16]
   232ea:	4413      	add	r3, r2
   232ec:	60bb      	str	r3, [r7, #8]
   232ee:	e046      	b.n	2337e <log_msg_hexdump_data_op+0x14c>
	} else {
		offset -= chunk_len;
   232f0:	683a      	ldr	r2, [r7, #0]
   232f2:	69fb      	ldr	r3, [r7, #28]
   232f4:	1ad3      	subs	r3, r2, r3
   232f6:	603b      	str	r3, [r7, #0]
		chunk_len = HEXDUMP_BYTES_CONT_MSG;
   232f8:	231c      	movs	r3, #28
   232fa:	61fb      	str	r3, [r7, #28]
		if (cont == NULL) {
   232fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   232fe:	2b00      	cmp	r3, #0
   23300:	d10a      	bne.n	23318 <log_msg_hexdump_data_op+0xe6>
			cont = msg->payload.ext.next;
   23302:	68fb      	ldr	r3, [r7, #12]
   23304:	695b      	ldr	r3, [r3, #20]
   23306:	627b      	str	r3, [r7, #36]	; 0x24
		}

		while (offset >= chunk_len) {
   23308:	e006      	b.n	23318 <log_msg_hexdump_data_op+0xe6>
			cont = cont->next;
   2330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2330c:	681b      	ldr	r3, [r3, #0]
   2330e:	627b      	str	r3, [r7, #36]	; 0x24
			offset -= chunk_len;
   23310:	683a      	ldr	r2, [r7, #0]
   23312:	69fb      	ldr	r3, [r7, #28]
   23314:	1ad3      	subs	r3, r2, r3
   23316:	603b      	str	r3, [r7, #0]
		while (offset >= chunk_len) {
   23318:	683a      	ldr	r2, [r7, #0]
   2331a:	69fb      	ldr	r3, [r7, #28]
   2331c:	429a      	cmp	r2, r3
   2331e:	d2f4      	bcs.n	2330a <log_msg_hexdump_data_op+0xd8>
		}
	}

	while ((req_len > 0) && (cont != NULL)) {
   23320:	e02d      	b.n	2337e <log_msg_hexdump_data_op+0x14c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   23322:	683b      	ldr	r3, [r7, #0]
   23324:	f1c3 031c 	rsb	r3, r3, #28
   23328:	61fb      	str	r3, [r7, #28]
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2332a:	69ba      	ldr	r2, [r7, #24]
   2332c:	69fb      	ldr	r3, [r7, #28]
   2332e:	4293      	cmp	r3, r2
   23330:	bf28      	it	cs
   23332:	4613      	movcs	r3, r2
   23334:	613b      	str	r3, [r7, #16]

		if (put_op) {
   23336:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
   2333a:	2b00      	cmp	r3, #0
   2333c:	d009      	beq.n	23352 <log_msg_hexdump_data_op+0x120>
			(void)memcpy(&cont->payload.bytes[offset],
   2333e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   23340:	683b      	ldr	r3, [r7, #0]
   23342:	4413      	add	r3, r2
   23344:	3304      	adds	r3, #4
   23346:	693a      	ldr	r2, [r7, #16]
   23348:	68b9      	ldr	r1, [r7, #8]
   2334a:	4618      	mov	r0, r3
   2334c:	f001 f9ce 	bl	246ec <memcpy>
   23350:	e008      	b.n	23364 <log_msg_hexdump_data_op+0x132>
				     data, cpy_len);
		} else {
			(void)memcpy(data, &cont->payload.bytes[offset],
   23352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   23354:	683b      	ldr	r3, [r7, #0]
   23356:	4413      	add	r3, r2
   23358:	3304      	adds	r3, #4
   2335a:	693a      	ldr	r2, [r7, #16]
   2335c:	4619      	mov	r1, r3
   2335e:	68b8      	ldr	r0, [r7, #8]
   23360:	f001 f9c4 	bl	246ec <memcpy>
				     cpy_len);
		}

		offset = 0;
   23364:	2300      	movs	r3, #0
   23366:	603b      	str	r3, [r7, #0]
		cont = cont->next;
   23368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2336a:	681b      	ldr	r3, [r3, #0]
   2336c:	627b      	str	r3, [r7, #36]	; 0x24
		req_len -= cpy_len;
   2336e:	69ba      	ldr	r2, [r7, #24]
   23370:	693b      	ldr	r3, [r7, #16]
   23372:	1ad3      	subs	r3, r2, r3
   23374:	61bb      	str	r3, [r7, #24]
		data += cpy_len;
   23376:	68ba      	ldr	r2, [r7, #8]
   23378:	693b      	ldr	r3, [r7, #16]
   2337a:	4413      	add	r3, r2
   2337c:	60bb      	str	r3, [r7, #8]
	while ((req_len > 0) && (cont != NULL)) {
   2337e:	69bb      	ldr	r3, [r7, #24]
   23380:	2b00      	cmp	r3, #0
   23382:	d002      	beq.n	2338a <log_msg_hexdump_data_op+0x158>
   23384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23386:	2b00      	cmp	r3, #0
   23388:	d1cb      	bne.n	23322 <log_msg_hexdump_data_op+0xf0>
	}
}
   2338a:	3728      	adds	r7, #40	; 0x28
   2338c:	46bd      	mov	sp, r7
   2338e:	bd80      	pop	{r7, pc}

00023390 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   23390:	b580      	push	{r7, lr}
   23392:	b086      	sub	sp, #24
   23394:	af02      	add	r7, sp, #8
   23396:	60f8      	str	r0, [r7, #12]
   23398:	60b9      	str	r1, [r7, #8]
   2339a:	607a      	str	r2, [r7, #4]
   2339c:	603b      	str	r3, [r7, #0]
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   2339e:	2300      	movs	r3, #0
   233a0:	9300      	str	r3, [sp, #0]
   233a2:	683b      	ldr	r3, [r7, #0]
   233a4:	687a      	ldr	r2, [r7, #4]
   233a6:	68b9      	ldr	r1, [r7, #8]
   233a8:	68f8      	ldr	r0, [r7, #12]
   233aa:	f7ff ff42 	bl	23232 <log_msg_hexdump_data_op>
}
   233ae:	bf00      	nop
   233b0:	3710      	adds	r7, #16
   233b2:	46bd      	mov	sp, r7
   233b4:	bd80      	pop	{r7, pc}

000233b6 <atomic_add>:
{
   233b6:	b480      	push	{r7}
   233b8:	b083      	sub	sp, #12
   233ba:	af00      	add	r7, sp, #0
   233bc:	6078      	str	r0, [r7, #4]
   233be:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   233c0:	683a      	ldr	r2, [r7, #0]
   233c2:	687b      	ldr	r3, [r7, #4]
   233c4:	e8d3 1fef 	ldaex	r1, [r3]
   233c8:	eb01 0002 	add.w	r0, r1, r2
   233cc:	e8c3 0fec 	stlex	ip, r0, [r3]
   233d0:	f1bc 0f00 	cmp.w	ip, #0
   233d4:	d1f6      	bne.n	233c4 <atomic_add+0xe>
   233d6:	460b      	mov	r3, r1
}
   233d8:	4618      	mov	r0, r3
   233da:	370c      	adds	r7, #12
   233dc:	46bd      	mov	sp, r7
   233de:	bc80      	pop	{r7}
   233e0:	4770      	bx	lr

000233e2 <atomic_inc>:
{
   233e2:	b580      	push	{r7, lr}
   233e4:	b082      	sub	sp, #8
   233e6:	af00      	add	r7, sp, #0
   233e8:	6078      	str	r0, [r7, #4]
	return atomic_add(target, 1);
   233ea:	2101      	movs	r1, #1
   233ec:	6878      	ldr	r0, [r7, #4]
   233ee:	f7ff ffe2 	bl	233b6 <atomic_add>
   233f2:	4603      	mov	r3, r0
}
   233f4:	4618      	mov	r0, r3
   233f6:	3708      	adds	r7, #8
   233f8:	46bd      	mov	sp, r7
   233fa:	bd80      	pop	{r7, pc}

000233fc <log_msg_domain_id_get>:
{
   233fc:	b480      	push	{r7}
   233fe:	b083      	sub	sp, #12
   23400:	af00      	add	r7, sp, #0
   23402:	6078      	str	r0, [r7, #4]
	return msg->hdr.ids.domain_id;
   23404:	687b      	ldr	r3, [r7, #4]
   23406:	7a9b      	ldrb	r3, [r3, #10]
   23408:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   2340c:	b2db      	uxtb	r3, r3
}
   2340e:	4618      	mov	r0, r3
   23410:	370c      	adds	r7, #12
   23412:	46bd      	mov	sp, r7
   23414:	bc80      	pop	{r7}
   23416:	4770      	bx	lr

00023418 <log_msg_source_id_get>:
{
   23418:	b480      	push	{r7}
   2341a:	b083      	sub	sp, #12
   2341c:	af00      	add	r7, sp, #0
   2341e:	6078      	str	r0, [r7, #4]
	return msg->hdr.ids.source_id;
   23420:	687b      	ldr	r3, [r7, #4]
   23422:	895b      	ldrh	r3, [r3, #10]
   23424:	f3c3 1389 	ubfx	r3, r3, #6, #10
   23428:	b29b      	uxth	r3, r3
}
   2342a:	4618      	mov	r0, r3
   2342c:	370c      	adds	r7, #12
   2342e:	46bd      	mov	sp, r7
   23430:	bc80      	pop	{r7}
   23432:	4770      	bx	lr

00023434 <log_msg_level_get>:
{
   23434:	b480      	push	{r7}
   23436:	b083      	sub	sp, #12
   23438:	af00      	add	r7, sp, #0
   2343a:	6078      	str	r0, [r7, #4]
	return msg->hdr.ids.level;
   2343c:	687b      	ldr	r3, [r7, #4]
   2343e:	7a9b      	ldrb	r3, [r3, #10]
   23440:	f3c3 0302 	ubfx	r3, r3, #0, #3
   23444:	b2db      	uxtb	r3, r3
}
   23446:	4618      	mov	r0, r3
   23448:	370c      	adds	r7, #12
   2344a:	46bd      	mov	sp, r7
   2344c:	bc80      	pop	{r7}
   2344e:	4770      	bx	lr

00023450 <log_msg_timestamp_get>:
{
   23450:	b480      	push	{r7}
   23452:	b083      	sub	sp, #12
   23454:	af00      	add	r7, sp, #0
   23456:	6078      	str	r0, [r7, #4]
	return msg->hdr.timestamp;
   23458:	687b      	ldr	r3, [r7, #4]
   2345a:	68db      	ldr	r3, [r3, #12]
}
   2345c:	4618      	mov	r0, r3
   2345e:	370c      	adds	r7, #12
   23460:	46bd      	mov	sp, r7
   23462:	bc80      	pop	{r7}
   23464:	4770      	bx	lr

00023466 <log_msg_is_std>:
{
   23466:	b480      	push	{r7}
   23468:	b083      	sub	sp, #12
   2346a:	af00      	add	r7, sp, #0
   2346c:	6078      	str	r0, [r7, #4]
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   2346e:	687b      	ldr	r3, [r7, #4]
   23470:	7a1b      	ldrb	r3, [r3, #8]
   23472:	f003 0301 	and.w	r3, r3, #1
   23476:	b2db      	uxtb	r3, r3
   23478:	2b00      	cmp	r3, #0
   2347a:	bf0c      	ite	eq
   2347c:	2301      	moveq	r3, #1
   2347e:	2300      	movne	r3, #0
   23480:	b2db      	uxtb	r3, r3
}
   23482:	4618      	mov	r0, r3
   23484:	370c      	adds	r7, #12
   23486:	46bd      	mov	sp, r7
   23488:	bc80      	pop	{r7}
   2348a:	4770      	bx	lr

0002348c <isprint>:
{
   2348c:	b480      	push	{r7}
   2348e:	b083      	sub	sp, #12
   23490:	af00      	add	r7, sp, #0
   23492:	6078      	str	r0, [r7, #4]
	return (int)((((unsigned)c) >= ' ') &&
   23494:	687b      	ldr	r3, [r7, #4]
   23496:	2b1f      	cmp	r3, #31
   23498:	d904      	bls.n	234a4 <isprint+0x18>
			(((unsigned)c) <= (unsigned)'~'));
   2349a:	687b      	ldr	r3, [r7, #4]
	return (int)((((unsigned)c) >= ' ') &&
   2349c:	2b7e      	cmp	r3, #126	; 0x7e
   2349e:	d801      	bhi.n	234a4 <isprint+0x18>
   234a0:	2301      	movs	r3, #1
   234a2:	e000      	b.n	234a6 <isprint+0x1a>
   234a4:	2300      	movs	r3, #0
}
   234a6:	4618      	mov	r0, r3
   234a8:	370c      	adds	r7, #12
   234aa:	46bd      	mov	sp, r7
   234ac:	bc80      	pop	{r7}
   234ae:	4770      	bx	lr

000234b0 <buffer_write>:
{
   234b0:	b580      	push	{r7, lr}
   234b2:	b086      	sub	sp, #24
   234b4:	af00      	add	r7, sp, #0
   234b6:	60f8      	str	r0, [r7, #12]
   234b8:	60b9      	str	r1, [r7, #8]
   234ba:	607a      	str	r2, [r7, #4]
   234bc:	603b      	str	r3, [r7, #0]
		processed = outf(buf, len, ctx);
   234be:	68fb      	ldr	r3, [r7, #12]
   234c0:	683a      	ldr	r2, [r7, #0]
   234c2:	6879      	ldr	r1, [r7, #4]
   234c4:	68b8      	ldr	r0, [r7, #8]
   234c6:	4798      	blx	r3
   234c8:	6178      	str	r0, [r7, #20]
		len -= processed;
   234ca:	697b      	ldr	r3, [r7, #20]
   234cc:	687a      	ldr	r2, [r7, #4]
   234ce:	1ad3      	subs	r3, r2, r3
   234d0:	607b      	str	r3, [r7, #4]
		buf += processed;
   234d2:	697b      	ldr	r3, [r7, #20]
   234d4:	68ba      	ldr	r2, [r7, #8]
   234d6:	4413      	add	r3, r2
   234d8:	60bb      	str	r3, [r7, #8]
	} while (len != 0);
   234da:	687b      	ldr	r3, [r7, #4]
   234dc:	2b00      	cmp	r3, #0
   234de:	d1ee      	bne.n	234be <buffer_write+0xe>
}
   234e0:	bf00      	nop
   234e2:	bf00      	nop
   234e4:	3718      	adds	r7, #24
   234e6:	46bd      	mov	sp, r7
   234e8:	bd80      	pop	{r7, pc}

000234ea <log_output_flush>:
{
   234ea:	b580      	push	{r7, lr}
   234ec:	b082      	sub	sp, #8
   234ee:	af00      	add	r7, sp, #0
   234f0:	6078      	str	r0, [r7, #4]
	buffer_write(output->func, output->buf,
   234f2:	687b      	ldr	r3, [r7, #4]
   234f4:	6818      	ldr	r0, [r3, #0]
   234f6:	687b      	ldr	r3, [r7, #4]
   234f8:	6899      	ldr	r1, [r3, #8]
		     output->control_block->offset,
   234fa:	687b      	ldr	r3, [r7, #4]
   234fc:	685b      	ldr	r3, [r3, #4]
   234fe:	681b      	ldr	r3, [r3, #0]
	buffer_write(output->func, output->buf,
   23500:	461a      	mov	r2, r3
		     output->control_block->ctx);
   23502:	687b      	ldr	r3, [r7, #4]
   23504:	685b      	ldr	r3, [r3, #4]
	buffer_write(output->func, output->buf,
   23506:	685b      	ldr	r3, [r3, #4]
   23508:	f7ff ffd2 	bl	234b0 <buffer_write>
	output->control_block->offset = 0;
   2350c:	687b      	ldr	r3, [r7, #4]
   2350e:	685b      	ldr	r3, [r3, #4]
   23510:	2200      	movs	r2, #0
   23512:	601a      	str	r2, [r3, #0]
}
   23514:	bf00      	nop
   23516:	3708      	adds	r7, #8
   23518:	46bd      	mov	sp, r7
   2351a:	bd80      	pop	{r7, pc}

0002351c <color_prefix>:
{
   2351c:	b580      	push	{r7, lr}
   2351e:	b084      	sub	sp, #16
   23520:	af00      	add	r7, sp, #0
   23522:	60f8      	str	r0, [r7, #12]
   23524:	460b      	mov	r3, r1
   23526:	607a      	str	r2, [r7, #4]
   23528:	72fb      	strb	r3, [r7, #11]
	color_print(output, color, true, level);
   2352a:	7af9      	ldrb	r1, [r7, #11]
   2352c:	687b      	ldr	r3, [r7, #4]
   2352e:	2201      	movs	r2, #1
   23530:	68f8      	ldr	r0, [r7, #12]
   23532:	f7f0 f8a7 	bl	13684 <color_print>
}
   23536:	bf00      	nop
   23538:	3710      	adds	r7, #16
   2353a:	46bd      	mov	sp, r7
   2353c:	bd80      	pop	{r7, pc}

0002353e <color_postfix>:
{
   2353e:	b580      	push	{r7, lr}
   23540:	b084      	sub	sp, #16
   23542:	af00      	add	r7, sp, #0
   23544:	60f8      	str	r0, [r7, #12]
   23546:	460b      	mov	r3, r1
   23548:	607a      	str	r2, [r7, #4]
   2354a:	72fb      	strb	r3, [r7, #11]
	color_print(output, color, false, level);
   2354c:	7af9      	ldrb	r1, [r7, #11]
   2354e:	687b      	ldr	r3, [r7, #4]
   23550:	2200      	movs	r2, #0
   23552:	68f8      	ldr	r0, [r7, #12]
   23554:	f7f0 f896 	bl	13684 <color_print>
}
   23558:	bf00      	nop
   2355a:	3710      	adds	r7, #16
   2355c:	46bd      	mov	sp, r7
   2355e:	bd80      	pop	{r7, pc}

00023560 <prefix_print>:
{
   23560:	b580      	push	{r7, lr}
   23562:	b088      	sub	sp, #32
   23564:	af02      	add	r7, sp, #8
   23566:	60f8      	str	r0, [r7, #12]
   23568:	60b9      	str	r1, [r7, #8]
   2356a:	603b      	str	r3, [r7, #0]
   2356c:	4613      	mov	r3, r2
   2356e:	71fb      	strb	r3, [r7, #7]
	uint32_t length = 0U;
   23570:	2300      	movs	r3, #0
   23572:	613b      	str	r3, [r7, #16]
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   23574:	68bb      	ldr	r3, [r7, #8]
   23576:	f003 0302 	and.w	r3, r3, #2
   2357a:	2b00      	cmp	r3, #0
   2357c:	bf14      	ite	ne
   2357e:	2301      	movne	r3, #1
   23580:	2300      	moveq	r3, #0
   23582:	75fb      	strb	r3, [r7, #23]
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   23584:	68bb      	ldr	r3, [r7, #8]
   23586:	f003 0301 	and.w	r3, r3, #1
   2358a:	2b00      	cmp	r3, #0
   2358c:	bf14      	ite	ne
   2358e:	2301      	movne	r3, #1
   23590:	2300      	moveq	r3, #0
   23592:	75bb      	strb	r3, [r7, #22]
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   23594:	68bb      	ldr	r3, [r7, #8]
   23596:	f003 0308 	and.w	r3, r3, #8
   2359a:	2b00      	cmp	r3, #0
   2359c:	bf14      	ite	ne
   2359e:	2301      	movne	r3, #1
   235a0:	2300      	moveq	r3, #0
   235a2:	757b      	strb	r3, [r7, #21]
	if (stamp) {
   235a4:	7dfb      	ldrb	r3, [r7, #23]
   235a6:	2b00      	cmp	r3, #0
   235a8:	d009      	beq.n	235be <prefix_print+0x5e>
		length += timestamp_print(output, flags, timestamp);
   235aa:	683a      	ldr	r2, [r7, #0]
   235ac:	68b9      	ldr	r1, [r7, #8]
   235ae:	68f8      	ldr	r0, [r7, #12]
   235b0:	f7ef ffd4 	bl	1355c <timestamp_print>
   235b4:	4603      	mov	r3, r0
   235b6:	461a      	mov	r2, r3
   235b8:	693b      	ldr	r3, [r7, #16]
   235ba:	4413      	add	r3, r2
   235bc:	613b      	str	r3, [r7, #16]
		color_prefix(output, colors_on, level);
   235be:	f897 2020 	ldrb.w	r2, [r7, #32]
   235c2:	7dbb      	ldrb	r3, [r7, #22]
   235c4:	4619      	mov	r1, r3
   235c6:	68f8      	ldr	r0, [r7, #12]
   235c8:	f7ff ffa8 	bl	2351c <color_prefix>
	length += ids_print(output, level_on, func_on,
   235cc:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
   235d0:	f897 3020 	ldrb.w	r3, [r7, #32]
   235d4:	79fa      	ldrb	r2, [r7, #7]
   235d6:	7d79      	ldrb	r1, [r7, #21]
   235d8:	9301      	str	r3, [sp, #4]
   235da:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
   235de:	9300      	str	r3, [sp, #0]
   235e0:	4603      	mov	r3, r0
   235e2:	68f8      	ldr	r0, [r7, #12]
   235e4:	f7f0 f87a 	bl	136dc <ids_print>
   235e8:	4603      	mov	r3, r0
   235ea:	461a      	mov	r2, r3
   235ec:	693b      	ldr	r3, [r7, #16]
   235ee:	4413      	add	r3, r2
   235f0:	613b      	str	r3, [r7, #16]
	return length;
   235f2:	693b      	ldr	r3, [r7, #16]
}
   235f4:	4618      	mov	r0, r3
   235f6:	3718      	adds	r7, #24
   235f8:	46bd      	mov	sp, r7
   235fa:	bd80      	pop	{r7, pc}

000235fc <postfix_print>:
{
   235fc:	b580      	push	{r7, lr}
   235fe:	b084      	sub	sp, #16
   23600:	af00      	add	r7, sp, #0
   23602:	60f8      	str	r0, [r7, #12]
   23604:	60b9      	str	r1, [r7, #8]
   23606:	4613      	mov	r3, r2
   23608:	71fb      	strb	r3, [r7, #7]
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   2360a:	68bb      	ldr	r3, [r7, #8]
   2360c:	f003 0301 	and.w	r3, r3, #1
   23610:	2b00      	cmp	r3, #0
   23612:	bf14      	ite	ne
   23614:	2301      	movne	r3, #1
   23616:	2300      	moveq	r3, #0
   23618:	b2db      	uxtb	r3, r3
   2361a:	79fa      	ldrb	r2, [r7, #7]
   2361c:	4619      	mov	r1, r3
   2361e:	68f8      	ldr	r0, [r7, #12]
   23620:	f7ff ff8d 	bl	2353e <color_postfix>
	newline_print(output, flags);
   23624:	68b9      	ldr	r1, [r7, #8]
   23626:	68f8      	ldr	r0, [r7, #12]
   23628:	f7f0 f8a2 	bl	13770 <newline_print>
}
   2362c:	bf00      	nop
   2362e:	3710      	adds	r7, #16
   23630:	46bd      	mov	sp, r7
   23632:	bd80      	pop	{r7, pc}

00023634 <log_output_msg_process>:
{
   23634:	b580      	push	{r7, lr}
   23636:	b08e      	sub	sp, #56	; 0x38
   23638:	af04      	add	r7, sp, #16
   2363a:	60f8      	str	r0, [r7, #12]
   2363c:	60b9      	str	r1, [r7, #8]
   2363e:	607a      	str	r2, [r7, #4]
	bool std_msg = log_msg_is_std(msg);
   23640:	68b8      	ldr	r0, [r7, #8]
   23642:	f7ff ff10 	bl	23466 <log_msg_is_std>
   23646:	4603      	mov	r3, r0
   23648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t timestamp = log_msg_timestamp_get(msg);
   2364c:	68b8      	ldr	r0, [r7, #8]
   2364e:	f7ff feff 	bl	23450 <log_msg_timestamp_get>
   23652:	6238      	str	r0, [r7, #32]
	uint8_t level = (uint8_t)log_msg_level_get(msg);
   23654:	68b8      	ldr	r0, [r7, #8]
   23656:	f7ff feed 	bl	23434 <log_msg_level_get>
   2365a:	4603      	mov	r3, r0
   2365c:	77fb      	strb	r3, [r7, #31]
	uint8_t domain_id = (uint8_t)log_msg_domain_id_get(msg);
   2365e:	68b8      	ldr	r0, [r7, #8]
   23660:	f7ff fecc 	bl	233fc <log_msg_domain_id_get>
   23664:	4603      	mov	r3, r0
   23666:	77bb      	strb	r3, [r7, #30]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
   23668:	68b8      	ldr	r0, [r7, #8]
   2366a:	f7ff fed5 	bl	23418 <log_msg_source_id_get>
   2366e:	4603      	mov	r3, r0
   23670:	83bb      	strh	r3, [r7, #28]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
   23672:	7ffb      	ldrb	r3, [r7, #31]
   23674:	2b00      	cmp	r3, #0
   23676:	bf0c      	ite	eq
   23678:	2301      	moveq	r3, #1
   2367a:	2300      	movne	r3, #0
   2367c:	76fb      	strb	r3, [r7, #27]
			0 : prefix_print(output, flags, std_msg, timestamp,
   2367e:	7efb      	ldrb	r3, [r7, #27]
   23680:	2b00      	cmp	r3, #0
   23682:	d10f      	bne.n	236a4 <log_output_msg_process+0x70>
   23684:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   23688:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
   2368c:	9302      	str	r3, [sp, #8]
   2368e:	7fbb      	ldrb	r3, [r7, #30]
   23690:	9301      	str	r3, [sp, #4]
   23692:	7ffb      	ldrb	r3, [r7, #31]
   23694:	9300      	str	r3, [sp, #0]
   23696:	6a3b      	ldr	r3, [r7, #32]
   23698:	6879      	ldr	r1, [r7, #4]
   2369a:	68f8      	ldr	r0, [r7, #12]
   2369c:	f7ff ff60 	bl	23560 <prefix_print>
   236a0:	4603      	mov	r3, r0
   236a2:	e000      	b.n	236a6 <log_output_msg_process+0x72>
   236a4:	2300      	movs	r3, #0
	prefix_offset = raw_string ?
   236a6:	617b      	str	r3, [r7, #20]
	if (log_msg_is_std(msg)) {
   236a8:	68b8      	ldr	r0, [r7, #8]
   236aa:	f7ff fedc 	bl	23466 <log_msg_is_std>
   236ae:	4603      	mov	r3, r0
   236b0:	2b00      	cmp	r3, #0
   236b2:	d004      	beq.n	236be <log_output_msg_process+0x8a>
		std_print(msg, output);
   236b4:	68f9      	ldr	r1, [r7, #12]
   236b6:	68b8      	ldr	r0, [r7, #8]
   236b8:	f7f0 f87c 	bl	137b4 <std_print>
   236bc:	e00d      	b.n	236da <log_output_msg_process+0xa6>
	} else if (raw_string) {
   236be:	7efb      	ldrb	r3, [r7, #27]
   236c0:	2b00      	cmp	r3, #0
   236c2:	d004      	beq.n	236ce <log_output_msg_process+0x9a>
		raw_string_print(msg, output);
   236c4:	68f9      	ldr	r1, [r7, #12]
   236c6:	68b8      	ldr	r0, [r7, #8]
   236c8:	f7f0 fbf6 	bl	13eb8 <raw_string_print>
   236cc:	e005      	b.n	236da <log_output_msg_process+0xa6>
		hexdump_print(msg, output, prefix_offset, flags);
   236ce:	687b      	ldr	r3, [r7, #4]
   236d0:	697a      	ldr	r2, [r7, #20]
   236d2:	68f9      	ldr	r1, [r7, #12]
   236d4:	68b8      	ldr	r0, [r7, #8]
   236d6:	f7f0 fbbb 	bl	13e50 <hexdump_print>
	if (!raw_string) {
   236da:	7efb      	ldrb	r3, [r7, #27]
   236dc:	f083 0301 	eor.w	r3, r3, #1
   236e0:	b2db      	uxtb	r3, r3
   236e2:	2b00      	cmp	r3, #0
   236e4:	d005      	beq.n	236f2 <log_output_msg_process+0xbe>
		postfix_print(output, flags, level);
   236e6:	7ffb      	ldrb	r3, [r7, #31]
   236e8:	461a      	mov	r2, r3
   236ea:	6879      	ldr	r1, [r7, #4]
   236ec:	68f8      	ldr	r0, [r7, #12]
   236ee:	f7ff ff85 	bl	235fc <postfix_print>
	log_output_flush(output);
   236f2:	68f8      	ldr	r0, [r7, #12]
   236f4:	f7ff fef9 	bl	234ea <log_output_flush>
}
   236f8:	3728      	adds	r7, #40	; 0x28
   236fa:	46bd      	mov	sp, r7
   236fc:	bd80      	pop	{r7, pc}

000236fe <log_backend_std_get_flags>:
 * @ingroup logger
 * @{
 */

static inline uint32_t log_backend_std_get_flags(void)
{
   236fe:	b480      	push	{r7}
   23700:	b083      	sub	sp, #12
   23702:	af00      	add	r7, sp, #0
	uint32_t flags = (LOG_OUTPUT_FLAG_LEVEL | LOG_OUTPUT_FLAG_TIMESTAMP);
   23704:	230a      	movs	r3, #10
   23706:	607b      	str	r3, [r7, #4]

	if (IS_ENABLED(CONFIG_LOG_BACKEND_SHOW_COLOR)) {
		flags |= LOG_OUTPUT_FLAG_COLORS;
   23708:	687b      	ldr	r3, [r7, #4]
   2370a:	f043 0301 	orr.w	r3, r3, #1
   2370e:	607b      	str	r3, [r7, #4]
	}

	if (IS_ENABLED(CONFIG_LOG_BACKEND_FORMAT_TIMESTAMP)) {
		flags |= LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP;
   23710:	687b      	ldr	r3, [r7, #4]
   23712:	f043 0304 	orr.w	r3, r3, #4
   23716:	607b      	str	r3, [r7, #4]
	}

	return flags;
   23718:	687b      	ldr	r3, [r7, #4]
}
   2371a:	4618      	mov	r0, r3
   2371c:	370c      	adds	r7, #12
   2371e:	46bd      	mov	sp, r7
   23720:	bc80      	pop	{r7}
   23722:	4770      	bx	lr

00023724 <log_backend_std_put>:
 * @param msg		Log message.
 */
static inline void
log_backend_std_put(const struct log_output *const output, uint32_t flags,
		    struct log_msg *msg)
{
   23724:	b580      	push	{r7, lr}
   23726:	b084      	sub	sp, #16
   23728:	af00      	add	r7, sp, #0
   2372a:	60f8      	str	r0, [r7, #12]
   2372c:	60b9      	str	r1, [r7, #8]
   2372e:	607a      	str	r2, [r7, #4]
	log_msg_get(msg);
   23730:	6878      	ldr	r0, [r7, #4]
   23732:	f7ff fc68 	bl	23006 <log_msg_get>

	flags |= log_backend_std_get_flags();
   23736:	f7ff ffe2 	bl	236fe <log_backend_std_get_flags>
   2373a:	4602      	mov	r2, r0
   2373c:	68bb      	ldr	r3, [r7, #8]
   2373e:	4313      	orrs	r3, r2
   23740:	60bb      	str	r3, [r7, #8]

	log_output_msg_process(output, msg, flags);
   23742:	68ba      	ldr	r2, [r7, #8]
   23744:	6879      	ldr	r1, [r7, #4]
   23746:	68f8      	ldr	r0, [r7, #12]
   23748:	f7ff ff74 	bl	23634 <log_output_msg_process>

	log_msg_put(msg);
   2374c:	6878      	ldr	r0, [r7, #4]
   2374e:	f7ff fc67 	bl	23020 <log_msg_put>
}
   23752:	bf00      	nop
   23754:	3710      	adds	r7, #16
   23756:	46bd      	mov	sp, r7
   23758:	bd80      	pop	{r7, pc}

0002375a <log_backend_std_panic>:
 *
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
   2375a:	b580      	push	{r7, lr}
   2375c:	b082      	sub	sp, #8
   2375e:	af00      	add	r7, sp, #0
   23760:	6078      	str	r0, [r7, #4]
	log_output_flush(output);
   23762:	6878      	ldr	r0, [r7, #4]
   23764:	f7ff fec1 	bl	234ea <log_output_flush>
}
   23768:	bf00      	nop
   2376a:	3708      	adds	r7, #8
   2376c:	46bd      	mov	sp, r7
   2376e:	bd80      	pop	{r7, pc}

00023770 <log_backend_std_dropped>:
 * @param output	Log output instance.
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
   23770:	b580      	push	{r7, lr}
   23772:	b082      	sub	sp, #8
   23774:	af00      	add	r7, sp, #0
   23776:	6078      	str	r0, [r7, #4]
   23778:	6039      	str	r1, [r7, #0]
	log_output_dropped_process(output, cnt);
   2377a:	6839      	ldr	r1, [r7, #0]
   2377c:	6878      	ldr	r0, [r7, #4]
   2377e:	f7f0 fbef 	bl	13f60 <log_output_dropped_process>
}
   23782:	bf00      	nop
   23784:	3708      	adds	r7, #8
   23786:	46bd      	mov	sp, r7
   23788:	bd80      	pop	{r7, pc}

0002378a <device_get_binding>:
{
   2378a:	b580      	push	{r7, lr}
   2378c:	b082      	sub	sp, #8
   2378e:	af00      	add	r7, sp, #0
   23790:	6078      	str	r0, [r7, #4]
	return z_impl_device_get_binding(name);
   23792:	6878      	ldr	r0, [r7, #4]
   23794:	f7f8 fb70 	bl	1be78 <z_impl_device_get_binding>
   23798:	4603      	mov	r3, r0
}
   2379a:	4618      	mov	r0, r3
   2379c:	3708      	adds	r7, #8
   2379e:	46bd      	mov	sp, r7
   237a0:	bd80      	pop	{r7, pc}

000237a2 <z_impl_uart_poll_out>:
{
   237a2:	b580      	push	{r7, lr}
   237a4:	b084      	sub	sp, #16
   237a6:	af00      	add	r7, sp, #0
   237a8:	6078      	str	r0, [r7, #4]
   237aa:	460b      	mov	r3, r1
   237ac:	70fb      	strb	r3, [r7, #3]
	const struct uart_driver_api *api =
   237ae:	687b      	ldr	r3, [r7, #4]
   237b0:	689b      	ldr	r3, [r3, #8]
   237b2:	60fb      	str	r3, [r7, #12]
	api->poll_out(dev, out_char);
   237b4:	68fb      	ldr	r3, [r7, #12]
   237b6:	685b      	ldr	r3, [r3, #4]
   237b8:	78fa      	ldrb	r2, [r7, #3]
   237ba:	4611      	mov	r1, r2
   237bc:	6878      	ldr	r0, [r7, #4]
   237be:	4798      	blx	r3
}
   237c0:	bf00      	nop
   237c2:	3710      	adds	r7, #16
   237c4:	46bd      	mov	sp, r7
   237c6:	bd80      	pop	{r7, pc}

000237c8 <uart_poll_out>:
{
   237c8:	b580      	push	{r7, lr}
   237ca:	b082      	sub	sp, #8
   237cc:	af00      	add	r7, sp, #0
   237ce:	6078      	str	r0, [r7, #4]
   237d0:	460b      	mov	r3, r1
   237d2:	70fb      	strb	r3, [r7, #3]
	z_impl_uart_poll_out(dev, out_char);
   237d4:	78fb      	ldrb	r3, [r7, #3]
   237d6:	4619      	mov	r1, r3
   237d8:	6878      	ldr	r0, [r7, #4]
   237da:	f7ff ffe2 	bl	237a2 <z_impl_uart_poll_out>
}
   237de:	bf00      	nop
   237e0:	3708      	adds	r7, #8
   237e2:	46bd      	mov	sp, r7
   237e4:	bd80      	pop	{r7, pc}

000237e6 <z_snode_next_peek>:
{
   237e6:	b480      	push	{r7}
   237e8:	b083      	sub	sp, #12
   237ea:	af00      	add	r7, sp, #0
   237ec:	6078      	str	r0, [r7, #4]
	return node->next;
   237ee:	687b      	ldr	r3, [r7, #4]
   237f0:	681b      	ldr	r3, [r3, #0]
}
   237f2:	4618      	mov	r0, r3
   237f4:	370c      	adds	r7, #12
   237f6:	46bd      	mov	sp, r7
   237f8:	bc80      	pop	{r7}
   237fa:	4770      	bx	lr

000237fc <sys_slist_peek_head>:
{
   237fc:	b480      	push	{r7}
   237fe:	b083      	sub	sp, #12
   23800:	af00      	add	r7, sp, #0
   23802:	6078      	str	r0, [r7, #4]
	return list->head;
   23804:	687b      	ldr	r3, [r7, #4]
   23806:	681b      	ldr	r3, [r3, #0]
}
   23808:	4618      	mov	r0, r3
   2380a:	370c      	adds	r7, #12
   2380c:	46bd      	mov	sp, r7
   2380e:	bc80      	pop	{r7}
   23810:	4770      	bx	lr

00023812 <sys_slist_peek_next_no_check>:
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   23812:	b580      	push	{r7, lr}
   23814:	b082      	sub	sp, #8
   23816:	af00      	add	r7, sp, #0
   23818:	6078      	str	r0, [r7, #4]
   2381a:	6878      	ldr	r0, [r7, #4]
   2381c:	f7ff ffe3 	bl	237e6 <z_snode_next_peek>
   23820:	4603      	mov	r3, r0
   23822:	4618      	mov	r0, r3
   23824:	3708      	adds	r7, #8
   23826:	46bd      	mov	sp, r7
   23828:	bd80      	pop	{r7, pc}

0002382a <sys_slist_peek_next>:
Z_GENLIST_PEEK_NEXT(slist, snode)
   2382a:	b580      	push	{r7, lr}
   2382c:	b082      	sub	sp, #8
   2382e:	af00      	add	r7, sp, #0
   23830:	6078      	str	r0, [r7, #4]
   23832:	687b      	ldr	r3, [r7, #4]
   23834:	2b00      	cmp	r3, #0
   23836:	d004      	beq.n	23842 <sys_slist_peek_next+0x18>
   23838:	6878      	ldr	r0, [r7, #4]
   2383a:	f7ff ffea 	bl	23812 <sys_slist_peek_next_no_check>
   2383e:	4603      	mov	r3, r0
   23840:	e000      	b.n	23844 <sys_slist_peek_next+0x1a>
   23842:	2300      	movs	r3, #0
   23844:	4618      	mov	r0, r3
   23846:	3708      	adds	r7, #8
   23848:	46bd      	mov	sp, r7
   2384a:	bd80      	pop	{r7, pc}

0002384c <k_is_user_context>:
{
   2384c:	b480      	push	{r7}
   2384e:	af00      	add	r7, sp, #0
	return false;
   23850:	2300      	movs	r3, #0
}
   23852:	4618      	mov	r0, r3
   23854:	46bd      	mov	sp, r7
   23856:	bc80      	pop	{r7}
   23858:	4770      	bx	lr

0002385a <pm_debug_start_timer>:
static inline void pm_debug_start_timer(void) { }
   2385a:	b480      	push	{r7}
   2385c:	af00      	add	r7, sp, #0
   2385e:	bf00      	nop
   23860:	46bd      	mov	sp, r7
   23862:	bc80      	pop	{r7}
   23864:	4770      	bx	lr

00023866 <pm_debug_stop_timer>:
static inline void pm_debug_stop_timer(void) { }
   23866:	b480      	push	{r7}
   23868:	af00      	add	r7, sp, #0
   2386a:	bf00      	nop
   2386c:	46bd      	mov	sp, r7
   2386e:	bc80      	pop	{r7}
   23870:	4770      	bx	lr

00023872 <pm_log_debug_info>:
static void pm_log_debug_info(enum pm_state state) { }
   23872:	b480      	push	{r7}
   23874:	b083      	sub	sp, #12
   23876:	af00      	add	r7, sp, #0
   23878:	4603      	mov	r3, r0
   2387a:	71fb      	strb	r3, [r7, #7]
   2387c:	bf00      	nop
   2387e:	370c      	adds	r7, #12
   23880:	46bd      	mov	sp, r7
   23882:	bc80      	pop	{r7}
   23884:	4770      	bx	lr

00023886 <atomic_get>:
{
   23886:	b480      	push	{r7}
   23888:	b083      	sub	sp, #12
   2388a:	af00      	add	r7, sp, #0
   2388c:	6078      	str	r0, [r7, #4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2388e:	687b      	ldr	r3, [r7, #4]
   23890:	e8d3 3faf 	lda	r3, [r3]
}
   23894:	4618      	mov	r0, r3
   23896:	370c      	adds	r7, #12
   23898:	46bd      	mov	sp, r7
   2389a:	bc80      	pop	{r7}
   2389c:	4770      	bx	lr

0002389e <k_is_user_context>:
{
   2389e:	b480      	push	{r7}
   238a0:	af00      	add	r7, sp, #0
	return false;
   238a2:	2300      	movs	r3, #0
}
   238a4:	4618      	mov	r0, r3
   238a6:	46bd      	mov	sp, r7
   238a8:	bc80      	pop	{r7}
   238aa:	4770      	bx	lr

000238ac <device_get_binding>:
{
   238ac:	b580      	push	{r7, lr}
   238ae:	b082      	sub	sp, #8
   238b0:	af00      	add	r7, sp, #0
   238b2:	6078      	str	r0, [r7, #4]
	return z_impl_device_get_binding(name);
   238b4:	6878      	ldr	r0, [r7, #4]
   238b6:	f7f8 fadf 	bl	1be78 <z_impl_device_get_binding>
   238ba:	4603      	mov	r3, r0
}
   238bc:	4618      	mov	r0, r3
   238be:	3708      	adds	r7, #8
   238c0:	46bd      	mov	sp, r7
   238c2:	bd80      	pop	{r7, pc}

000238c4 <z_impl_uart_poll_out>:
{
   238c4:	b580      	push	{r7, lr}
   238c6:	b084      	sub	sp, #16
   238c8:	af00      	add	r7, sp, #0
   238ca:	6078      	str	r0, [r7, #4]
   238cc:	460b      	mov	r3, r1
   238ce:	70fb      	strb	r3, [r7, #3]
	const struct uart_driver_api *api =
   238d0:	687b      	ldr	r3, [r7, #4]
   238d2:	689b      	ldr	r3, [r3, #8]
   238d4:	60fb      	str	r3, [r7, #12]
	api->poll_out(dev, out_char);
   238d6:	68fb      	ldr	r3, [r7, #12]
   238d8:	685b      	ldr	r3, [r3, #4]
   238da:	78fa      	ldrb	r2, [r7, #3]
   238dc:	4611      	mov	r1, r2
   238de:	6878      	ldr	r0, [r7, #4]
   238e0:	4798      	blx	r3
}
   238e2:	bf00      	nop
   238e4:	3710      	adds	r7, #16
   238e6:	46bd      	mov	sp, r7
   238e8:	bd80      	pop	{r7, pc}

000238ea <uart_poll_out>:
{
   238ea:	b580      	push	{r7, lr}
   238ec:	b082      	sub	sp, #8
   238ee:	af00      	add	r7, sp, #0
   238f0:	6078      	str	r0, [r7, #4]
   238f2:	460b      	mov	r3, r1
   238f4:	70fb      	strb	r3, [r7, #3]
	z_impl_uart_poll_out(dev, out_char);
   238f6:	78fb      	ldrb	r3, [r7, #3]
   238f8:	4619      	mov	r1, r3
   238fa:	6878      	ldr	r0, [r7, #4]
   238fc:	f7ff ffe2 	bl	238c4 <z_impl_uart_poll_out>
}
   23900:	bf00      	nop
   23902:	3708      	adds	r7, #8
   23904:	46bd      	mov	sp, r7
   23906:	bd80      	pop	{r7, pc}

00023908 <atomic_set>:
{
   23908:	b480      	push	{r7}
   2390a:	b083      	sub	sp, #12
   2390c:	af00      	add	r7, sp, #0
   2390e:	6078      	str	r0, [r7, #4]
   23910:	6039      	str	r1, [r7, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   23912:	683a      	ldr	r2, [r7, #0]
   23914:	687b      	ldr	r3, [r7, #4]
   23916:	e8d3 1fef 	ldaex	r1, [r3]
   2391a:	e8c3 2fe0 	stlex	r0, r2, [r3]
   2391e:	2800      	cmp	r0, #0
   23920:	d1f9      	bne.n	23916 <atomic_set+0xe>
   23922:	460b      	mov	r3, r1
}
   23924:	4618      	mov	r0, r3
   23926:	370c      	adds	r7, #12
   23928:	46bd      	mov	sp, r7
   2392a:	bc80      	pop	{r7}
   2392c:	4770      	bx	lr

0002392e <atomic_and>:
 * @param value Value to AND.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
   2392e:	b480      	push	{r7}
   23930:	b083      	sub	sp, #12
   23932:	af00      	add	r7, sp, #0
   23934:	6078      	str	r0, [r7, #4]
   23936:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23938:	683a      	ldr	r2, [r7, #0]
   2393a:	687b      	ldr	r3, [r7, #4]
   2393c:	e8d3 1fef 	ldaex	r1, [r3]
   23940:	ea01 0002 	and.w	r0, r1, r2
   23944:	e8c3 0fec 	stlex	ip, r0, [r3]
   23948:	f1bc 0f00 	cmp.w	ip, #0
   2394c:	d1f6      	bne.n	2393c <atomic_and+0xe>
   2394e:	460b      	mov	r3, r1
}
   23950:	4618      	mov	r0, r3
   23952:	370c      	adds	r7, #12
   23954:	46bd      	mov	sp, r7
   23956:	bc80      	pop	{r7}
   23958:	4770      	bx	lr

0002395a <nrf_event_readback>:
#endif

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
   2395a:	b480      	push	{r7}
   2395c:	b083      	sub	sp, #12
   2395e:	af00      	add	r7, sp, #0
   23960:	6078      	str	r0, [r7, #4]
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   23962:	687b      	ldr	r3, [r7, #4]
   23964:	681b      	ldr	r3, [r3, #0]
#else
    (void)p_event_reg;
#endif
}
   23966:	bf00      	nop
   23968:	370c      	adds	r7, #12
   2396a:	46bd      	mov	sp, r7
   2396c:	bc80      	pop	{r7}
   2396e:	4770      	bx	lr

00023970 <k_is_user_context>:
{
   23970:	b480      	push	{r7}
   23972:	af00      	add	r7, sp, #0
	return false;
   23974:	2300      	movs	r3, #0
}
   23976:	4618      	mov	r0, r3
   23978:	46bd      	mov	sp, r7
   2397a:	bc80      	pop	{r7}
   2397c:	4770      	bx	lr

0002397e <k_ms_to_ticks_ceil64>:
{
   2397e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   23982:	b08c      	sub	sp, #48	; 0x30
   23984:	af00      	add	r7, sp, #0
   23986:	e9c7 0100 	strd	r0, r1, [r7]
   2398a:	e9d7 2300 	ldrd	r2, r3, [r7]
   2398e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   23992:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   23996:	627b      	str	r3, [r7, #36]	; 0x24
   23998:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   2399c:	623b      	str	r3, [r7, #32]
   2399e:	2301      	movs	r3, #1
   239a0:	77fb      	strb	r3, [r7, #31]
   239a2:	2300      	movs	r3, #0
   239a4:	77bb      	strb	r3, [r7, #30]
   239a6:	2301      	movs	r3, #1
   239a8:	777b      	strb	r3, [r7, #29]
   239aa:	2300      	movs	r3, #0
   239ac:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   239ae:	7ffb      	ldrb	r3, [r7, #31]
   239b0:	2b00      	cmp	r3, #0
   239b2:	d00f      	beq.n	239d4 <k_ms_to_ticks_ceil64+0x56>
	bool mul_ratio = const_hz &&
   239b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   239b6:	6a3b      	ldr	r3, [r7, #32]
   239b8:	429a      	cmp	r2, r3
   239ba:	d20b      	bcs.n	239d4 <k_ms_to_ticks_ceil64+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   239bc:	6a3b      	ldr	r3, [r7, #32]
   239be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   239c0:	fbb3 f2f2 	udiv	r2, r3, r2
   239c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   239c6:	fb01 f202 	mul.w	r2, r1, r2
   239ca:	1a9b      	subs	r3, r3, r2
   239cc:	2b00      	cmp	r3, #0
   239ce:	d101      	bne.n	239d4 <k_ms_to_ticks_ceil64+0x56>
   239d0:	2301      	movs	r3, #1
   239d2:	e000      	b.n	239d6 <k_ms_to_ticks_ceil64+0x58>
   239d4:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   239d6:	76fb      	strb	r3, [r7, #27]
   239d8:	7efb      	ldrb	r3, [r7, #27]
   239da:	f003 0301 	and.w	r3, r3, #1
   239de:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   239e0:	7ffb      	ldrb	r3, [r7, #31]
   239e2:	2b00      	cmp	r3, #0
   239e4:	d00f      	beq.n	23a06 <k_ms_to_ticks_ceil64+0x88>
	bool div_ratio = const_hz &&
   239e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   239e8:	6a3b      	ldr	r3, [r7, #32]
   239ea:	429a      	cmp	r2, r3
   239ec:	d90b      	bls.n	23a06 <k_ms_to_ticks_ceil64+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   239ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   239f0:	6a3a      	ldr	r2, [r7, #32]
   239f2:	fbb3 f2f2 	udiv	r2, r3, r2
   239f6:	6a39      	ldr	r1, [r7, #32]
   239f8:	fb01 f202 	mul.w	r2, r1, r2
   239fc:	1a9b      	subs	r3, r3, r2
   239fe:	2b00      	cmp	r3, #0
   23a00:	d101      	bne.n	23a06 <k_ms_to_ticks_ceil64+0x88>
   23a02:	2301      	movs	r3, #1
   23a04:	e000      	b.n	23a08 <k_ms_to_ticks_ceil64+0x8a>
   23a06:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   23a08:	76bb      	strb	r3, [r7, #26]
   23a0a:	7ebb      	ldrb	r3, [r7, #26]
   23a0c:	f003 0301 	and.w	r3, r3, #1
   23a10:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   23a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   23a14:	6a3b      	ldr	r3, [r7, #32]
   23a16:	429a      	cmp	r2, r3
   23a18:	d10a      	bne.n	23a30 <k_ms_to_ticks_ceil64+0xb2>
		return result32 ? ((uint32_t)t) : t;
   23a1a:	7fbb      	ldrb	r3, [r7, #30]
   23a1c:	2b00      	cmp	r3, #0
   23a1e:	d004      	beq.n	23a2a <k_ms_to_ticks_ceil64+0xac>
   23a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
   23a22:	461a      	mov	r2, r3
   23a24:	f04f 0300 	mov.w	r3, #0
   23a28:	e0c7      	b.n	23bba <k_ms_to_ticks_ceil64+0x23c>
   23a2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   23a2e:	e0c4      	b.n	23bba <k_ms_to_ticks_ceil64+0x23c>
	uint64_t off = 0;
   23a30:	f04f 0200 	mov.w	r2, #0
   23a34:	f04f 0300 	mov.w	r3, #0
   23a38:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   23a3c:	7efb      	ldrb	r3, [r7, #27]
   23a3e:	f083 0301 	eor.w	r3, r3, #1
   23a42:	b2db      	uxtb	r3, r3
   23a44:	2b00      	cmp	r3, #0
   23a46:	d01d      	beq.n	23a84 <k_ms_to_ticks_ceil64+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   23a48:	7ebb      	ldrb	r3, [r7, #26]
   23a4a:	2b00      	cmp	r3, #0
   23a4c:	d004      	beq.n	23a58 <k_ms_to_ticks_ceil64+0xda>
   23a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   23a50:	6a3b      	ldr	r3, [r7, #32]
   23a52:	fbb2 f3f3 	udiv	r3, r2, r3
   23a56:	e000      	b.n	23a5a <k_ms_to_ticks_ceil64+0xdc>
   23a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23a5a:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   23a5c:	7f7b      	ldrb	r3, [r7, #29]
   23a5e:	2b00      	cmp	r3, #0
   23a60:	d006      	beq.n	23a70 <k_ms_to_ticks_ceil64+0xf2>
			off = rdivisor - 1U;
   23a62:	68fb      	ldr	r3, [r7, #12]
   23a64:	3b01      	subs	r3, #1
   23a66:	461a      	mov	r2, r3
   23a68:	f04f 0300 	mov.w	r3, #0
   23a6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   23a70:	7f3b      	ldrb	r3, [r7, #28]
   23a72:	2b00      	cmp	r3, #0
   23a74:	d006      	beq.n	23a84 <k_ms_to_ticks_ceil64+0x106>
			off = rdivisor / 2U;
   23a76:	68fb      	ldr	r3, [r7, #12]
   23a78:	085b      	lsrs	r3, r3, #1
   23a7a:	461a      	mov	r2, r3
   23a7c:	f04f 0300 	mov.w	r3, #0
   23a80:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   23a84:	7ebb      	ldrb	r3, [r7, #26]
   23a86:	2b00      	cmp	r3, #0
   23a88:	d02a      	beq.n	23ae0 <k_ms_to_ticks_ceil64+0x162>
		t += off;
   23a8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   23a8e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   23a92:	1884      	adds	r4, r0, r2
   23a94:	eb41 0503 	adc.w	r5, r1, r3
   23a98:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   23a9c:	7fbb      	ldrb	r3, [r7, #30]
   23a9e:	2b00      	cmp	r3, #0
   23aa0:	d010      	beq.n	23ac4 <k_ms_to_ticks_ceil64+0x146>
   23aa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   23aa6:	2b01      	cmp	r3, #1
   23aa8:	bf08      	it	eq
   23aaa:	2a00      	cmpeq	r2, #0
   23aac:	d20a      	bcs.n	23ac4 <k_ms_to_ticks_ceil64+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
   23aae:	6aba      	ldr	r2, [r7, #40]	; 0x28
   23ab0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   23ab2:	6a3b      	ldr	r3, [r7, #32]
   23ab4:	fbb1 f3f3 	udiv	r3, r1, r3
   23ab8:	fbb2 f3f3 	udiv	r3, r2, r3
   23abc:	461a      	mov	r2, r3
   23abe:	f04f 0300 	mov.w	r3, #0
   23ac2:	e07a      	b.n	23bba <k_ms_to_ticks_ceil64+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
   23ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   23ac6:	6a3b      	ldr	r3, [r7, #32]
   23ac8:	fbb2 f3f3 	udiv	r3, r2, r3
   23acc:	461a      	mov	r2, r3
   23ace:	f04f 0300 	mov.w	r3, #0
   23ad2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   23ad6:	f7ec fbb1 	bl	1023c <__aeabi_uldivmod>
   23ada:	4602      	mov	r2, r0
   23adc:	460b      	mov	r3, r1
   23ade:	e06c      	b.n	23bba <k_ms_to_ticks_ceil64+0x23c>
	} else if (mul_ratio) {
   23ae0:	7efb      	ldrb	r3, [r7, #27]
   23ae2:	2b00      	cmp	r3, #0
   23ae4:	d021      	beq.n	23b2a <k_ms_to_ticks_ceil64+0x1ac>
		if (result32) {
   23ae6:	7fbb      	ldrb	r3, [r7, #30]
   23ae8:	2b00      	cmp	r3, #0
   23aea:	d00a      	beq.n	23b02 <k_ms_to_ticks_ceil64+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
   23aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   23aee:	6a39      	ldr	r1, [r7, #32]
   23af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   23af2:	fbb1 f2f2 	udiv	r2, r1, r2
   23af6:	fb02 f303 	mul.w	r3, r2, r3
   23afa:	461a      	mov	r2, r3
   23afc:	f04f 0300 	mov.w	r3, #0
   23b00:	e05b      	b.n	23bba <k_ms_to_ticks_ceil64+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
   23b02:	6a3a      	ldr	r2, [r7, #32]
   23b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23b06:	fbb2 f3f3 	udiv	r3, r2, r3
   23b0a:	461a      	mov	r2, r3
   23b0c:	f04f 0300 	mov.w	r3, #0
   23b10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   23b12:	fb03 f001 	mul.w	r0, r3, r1
   23b16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   23b18:	fb02 f101 	mul.w	r1, r2, r1
   23b1c:	4401      	add	r1, r0
   23b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   23b20:	fba0 2302 	umull	r2, r3, r0, r2
   23b24:	4419      	add	r1, r3
   23b26:	460b      	mov	r3, r1
   23b28:	e047      	b.n	23bba <k_ms_to_ticks_ceil64+0x23c>
		if (result32) {
   23b2a:	7fbb      	ldrb	r3, [r7, #30]
   23b2c:	2b00      	cmp	r3, #0
   23b2e:	d024      	beq.n	23b7a <k_ms_to_ticks_ceil64+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   23b30:	6a3b      	ldr	r3, [r7, #32]
   23b32:	461a      	mov	r2, r3
   23b34:	f04f 0300 	mov.w	r3, #0
   23b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   23b3a:	fb03 f001 	mul.w	r0, r3, r1
   23b3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   23b40:	fb02 f101 	mul.w	r1, r2, r1
   23b44:	4401      	add	r1, r0
   23b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   23b48:	fba0 2302 	umull	r2, r3, r0, r2
   23b4c:	4419      	add	r1, r3
   23b4e:	460b      	mov	r3, r1
   23b50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   23b54:	eb12 0a00 	adds.w	sl, r2, r0
   23b58:	eb43 0b01 	adc.w	fp, r3, r1
   23b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23b5e:	461a      	mov	r2, r3
   23b60:	f04f 0300 	mov.w	r3, #0
   23b64:	4650      	mov	r0, sl
   23b66:	4659      	mov	r1, fp
   23b68:	f7ec fb68 	bl	1023c <__aeabi_uldivmod>
   23b6c:	4602      	mov	r2, r0
   23b6e:	460b      	mov	r3, r1
   23b70:	4613      	mov	r3, r2
   23b72:	461a      	mov	r2, r3
   23b74:	f04f 0300 	mov.w	r3, #0
   23b78:	e01f      	b.n	23bba <k_ms_to_ticks_ceil64+0x23c>
			return (t * to_hz + off) / from_hz;
   23b7a:	6a3b      	ldr	r3, [r7, #32]
   23b7c:	461a      	mov	r2, r3
   23b7e:	f04f 0300 	mov.w	r3, #0
   23b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   23b84:	fb03 f001 	mul.w	r0, r3, r1
   23b88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   23b8a:	fb02 f101 	mul.w	r1, r2, r1
   23b8e:	4401      	add	r1, r0
   23b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   23b92:	fba0 2302 	umull	r2, r3, r0, r2
   23b96:	4419      	add	r1, r3
   23b98:	460b      	mov	r3, r1
   23b9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   23b9e:	eb12 0800 	adds.w	r8, r2, r0
   23ba2:	eb43 0901 	adc.w	r9, r3, r1
   23ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23ba8:	461a      	mov	r2, r3
   23baa:	f04f 0300 	mov.w	r3, #0
   23bae:	4640      	mov	r0, r8
   23bb0:	4649      	mov	r1, r9
   23bb2:	f7ec fb43 	bl	1023c <__aeabi_uldivmod>
   23bb6:	4602      	mov	r2, r0
   23bb8:	460b      	mov	r3, r1
}
   23bba:	4610      	mov	r0, r2
   23bbc:	4619      	mov	r1, r3
   23bbe:	3730      	adds	r7, #48	; 0x30
   23bc0:	46bd      	mov	sp, r7
   23bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

00023bc6 <k_msleep>:
{
   23bc6:	b580      	push	{r7, lr}
   23bc8:	b082      	sub	sp, #8
   23bca:	af00      	add	r7, sp, #0
   23bcc:	6078      	str	r0, [r7, #4]
	return k_sleep(Z_TIMEOUT_MS(ms));
   23bce:	687b      	ldr	r3, [r7, #4]
   23bd0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   23bd4:	461a      	mov	r2, r3
   23bd6:	ea4f 73e2 	mov.w	r3, r2, asr #31
   23bda:	4610      	mov	r0, r2
   23bdc:	4619      	mov	r1, r3
   23bde:	f7ff fece 	bl	2397e <k_ms_to_ticks_ceil64>
   23be2:	4602      	mov	r2, r0
   23be4:	460b      	mov	r3, r1
   23be6:	4610      	mov	r0, r2
   23be8:	4619      	mov	r1, r3
   23bea:	f000 f811 	bl	23c10 <k_sleep>
   23bee:	4601      	mov	r1, r0
   23bf0:	460b      	mov	r3, r1
}
   23bf2:	4618      	mov	r0, r3
   23bf4:	3708      	adds	r7, #8
   23bf6:	46bd      	mov	sp, r7
   23bf8:	bd80      	pop	{r7, pc}

00023bfa <k_cpu_atomic_idle>:
 * @param key Interrupt locking key obtained from irq_lock().
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
   23bfa:	b580      	push	{r7, lr}
   23bfc:	b082      	sub	sp, #8
   23bfe:	af00      	add	r7, sp, #0
   23c00:	6078      	str	r0, [r7, #4]
	arch_cpu_atomic_idle(key);
   23c02:	6878      	ldr	r0, [r7, #4]
   23c04:	f7f2 f900 	bl	15e08 <arch_cpu_atomic_idle>
}
   23c08:	bf00      	nop
   23c0a:	3708      	adds	r7, #8
   23c0c:	46bd      	mov	sp, r7
   23c0e:	bd80      	pop	{r7, pc}

00023c10 <k_sleep>:
{
   23c10:	b580      	push	{r7, lr}
   23c12:	b082      	sub	sp, #8
   23c14:	af00      	add	r7, sp, #0
   23c16:	e9c7 0100 	strd	r0, r1, [r7]
	return z_impl_k_sleep(timeout);
   23c1a:	e9d7 0100 	ldrd	r0, r1, [r7]
   23c1e:	f7fc f86d 	bl	1fcfc <z_impl_k_sleep>
   23c22:	4603      	mov	r3, r0
}
   23c24:	4618      	mov	r0, r3
   23c26:	3708      	adds	r7, #8
   23c28:	46bd      	mov	sp, r7
   23c2a:	bd80      	pop	{r7, pc}

00023c2c <k_sem_take>:
{
   23c2c:	b580      	push	{r7, lr}
   23c2e:	b084      	sub	sp, #16
   23c30:	af00      	add	r7, sp, #0
   23c32:	60f8      	str	r0, [r7, #12]
   23c34:	e9c7 2300 	strd	r2, r3, [r7]
	return z_impl_k_sem_take(sem, timeout);
   23c38:	e9d7 2300 	ldrd	r2, r3, [r7]
   23c3c:	68f8      	ldr	r0, [r7, #12]
   23c3e:	f7fa f927 	bl	1de90 <z_impl_k_sem_take>
   23c42:	4603      	mov	r3, r0
}
   23c44:	4618      	mov	r0, r3
   23c46:	3710      	adds	r7, #16
   23c48:	46bd      	mov	sp, r7
   23c4a:	bd80      	pop	{r7, pc}

00023c4c <k_sem_give>:
{
   23c4c:	b580      	push	{r7, lr}
   23c4e:	b082      	sub	sp, #8
   23c50:	af00      	add	r7, sp, #0
   23c52:	6078      	str	r0, [r7, #4]
	z_impl_k_sem_give(sem);
   23c54:	6878      	ldr	r0, [r7, #4]
   23c56:	f7fa f8b5 	bl	1ddc4 <z_impl_k_sem_give>
}
   23c5a:	bf00      	nop
   23c5c:	3708      	adds	r7, #8
   23c5e:	46bd      	mov	sp, r7
   23c60:	bd80      	pop	{r7, pc}

00023c62 <nrf_clock_int_enable>:
{
   23c62:	b480      	push	{r7}
   23c64:	b083      	sub	sp, #12
   23c66:	af00      	add	r7, sp, #0
   23c68:	6078      	str	r0, [r7, #4]
   23c6a:	6039      	str	r1, [r7, #0]
    p_reg->INTENSET = mask;
   23c6c:	687b      	ldr	r3, [r7, #4]
   23c6e:	683a      	ldr	r2, [r7, #0]
   23c70:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   23c74:	bf00      	nop
   23c76:	370c      	adds	r7, #12
   23c78:	46bd      	mov	sp, r7
   23c7a:	bc80      	pop	{r7}
   23c7c:	4770      	bx	lr

00023c7e <nrf_clock_int_disable>:
{
   23c7e:	b480      	push	{r7}
   23c80:	b083      	sub	sp, #12
   23c82:	af00      	add	r7, sp, #0
   23c84:	6078      	str	r0, [r7, #4]
   23c86:	6039      	str	r1, [r7, #0]
    p_reg->INTENCLR = mask;
   23c88:	687b      	ldr	r3, [r7, #4]
   23c8a:	683a      	ldr	r2, [r7, #0]
   23c8c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   23c90:	bf00      	nop
   23c92:	370c      	adds	r7, #12
   23c94:	46bd      	mov	sp, r7
   23c96:	bc80      	pop	{r7}
   23c98:	4770      	bx	lr

00023c9a <nrf_clock_task_trigger>:
{
   23c9a:	b480      	push	{r7}
   23c9c:	b083      	sub	sp, #12
   23c9e:	af00      	add	r7, sp, #0
   23ca0:	6078      	str	r0, [r7, #4]
   23ca2:	460b      	mov	r3, r1
   23ca4:	70fb      	strb	r3, [r7, #3]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23ca6:	78fb      	ldrb	r3, [r7, #3]
   23ca8:	687a      	ldr	r2, [r7, #4]
   23caa:	4413      	add	r3, r2
   23cac:	2201      	movs	r2, #1
   23cae:	601a      	str	r2, [r3, #0]
}
   23cb0:	bf00      	nop
   23cb2:	370c      	adds	r7, #12
   23cb4:	46bd      	mov	sp, r7
   23cb6:	bc80      	pop	{r7}
   23cb8:	4770      	bx	lr

00023cba <nrf_clock_event_clear>:
{
   23cba:	b580      	push	{r7, lr}
   23cbc:	b082      	sub	sp, #8
   23cbe:	af00      	add	r7, sp, #0
   23cc0:	6078      	str	r0, [r7, #4]
   23cc2:	460b      	mov	r3, r1
   23cc4:	807b      	strh	r3, [r7, #2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23cc6:	887b      	ldrh	r3, [r7, #2]
   23cc8:	687a      	ldr	r2, [r7, #4]
   23cca:	4413      	add	r3, r2
   23ccc:	2200      	movs	r2, #0
   23cce:	601a      	str	r2, [r3, #0]
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
   23cd0:	887b      	ldrh	r3, [r7, #2]
   23cd2:	687a      	ldr	r2, [r7, #4]
   23cd4:	4413      	add	r3, r2
   23cd6:	4618      	mov	r0, r3
   23cd8:	f7ff fe3f 	bl	2395a <nrf_event_readback>
}
   23cdc:	bf00      	nop
   23cde:	3708      	adds	r7, #8
   23ce0:	46bd      	mov	sp, r7
   23ce2:	bd80      	pop	{r7, pc}

00023ce4 <nrf_clock_event_check>:
{
   23ce4:	b480      	push	{r7}
   23ce6:	b083      	sub	sp, #12
   23ce8:	af00      	add	r7, sp, #0
   23cea:	6078      	str	r0, [r7, #4]
   23cec:	460b      	mov	r3, r1
   23cee:	807b      	strh	r3, [r7, #2]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   23cf0:	887b      	ldrh	r3, [r7, #2]
   23cf2:	687a      	ldr	r2, [r7, #4]
   23cf4:	4413      	add	r3, r2
   23cf6:	681b      	ldr	r3, [r3, #0]
   23cf8:	2b00      	cmp	r3, #0
   23cfa:	bf14      	ite	ne
   23cfc:	2301      	movne	r3, #1
   23cfe:	2300      	moveq	r3, #0
   23d00:	b2db      	uxtb	r3, r3
}
   23d02:	4618      	mov	r0, r3
   23d04:	370c      	adds	r7, #12
   23d06:	46bd      	mov	sp, r7
   23d08:	bc80      	pop	{r7}
   23d0a:	4770      	bx	lr

00023d0c <nrf_clock_lf_src_set>:

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
   23d0c:	b480      	push	{r7}
   23d0e:	b083      	sub	sp, #12
   23d10:	af00      	add	r7, sp, #0
   23d12:	6078      	str	r0, [r7, #4]
   23d14:	460b      	mov	r3, r1
   23d16:	70fb      	strb	r3, [r7, #3]
    p_reg->LFCLKSRC = (uint32_t)(source);
   23d18:	78fa      	ldrb	r2, [r7, #3]
   23d1a:	687b      	ldr	r3, [r7, #4]
   23d1c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   23d20:	bf00      	nop
   23d22:	370c      	adds	r7, #12
   23d24:	46bd      	mov	sp, r7
   23d26:	bc80      	pop	{r7}
   23d28:	4770      	bx	lr

00023d2a <nrf_clock_lf_src_get>:

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_src_get(NRF_CLOCK_Type const * p_reg)
{
   23d2a:	b480      	push	{r7}
   23d2c:	b083      	sub	sp, #12
   23d2e:	af00      	add	r7, sp, #0
   23d30:	6078      	str	r0, [r7, #4]
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   23d32:	687b      	ldr	r3, [r7, #4]
   23d34:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   23d38:	b2db      	uxtb	r3, r3
}
   23d3a:	4618      	mov	r0, r3
   23d3c:	370c      	adds	r7, #12
   23d3e:	46bd      	mov	sp, r7
   23d40:	bc80      	pop	{r7}
   23d42:	4770      	bx	lr

00023d44 <nrf_clock_lf_srccopy_get>:
    (void)nrf_clock_is_running(p_reg, NRF_CLOCK_DOMAIN_LFCLK, &clk_src);
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
   23d44:	b480      	push	{r7}
   23d46:	b083      	sub	sp, #12
   23d48:	af00      	add	r7, sp, #0
   23d4a:	6078      	str	r0, [r7, #4]
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   23d4c:	687b      	ldr	r3, [r7, #4]
   23d4e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   23d52:	b2db      	uxtb	r3, r3
   23d54:	f003 0303 	and.w	r3, r3, #3
   23d58:	b2db      	uxtb	r3, r3
                                >> CLOCK_LFCLKSRCCOPY_SRC_Pos);
}
   23d5a:	4618      	mov	r0, r3
   23d5c:	370c      	adds	r7, #12
   23d5e:	46bd      	mov	sp, r7
   23d60:	bc80      	pop	{r7}
   23d62:	4770      	bx	lr

00023d64 <nrfx_clock_lfclk_start>:
{
   23d64:	b580      	push	{r7, lr}
   23d66:	af00      	add	r7, sp, #0
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   23d68:	2000      	movs	r0, #0
   23d6a:	f7f5 ffdd 	bl	19d28 <nrfx_clock_start>
}
   23d6e:	bf00      	nop
   23d70:	bd80      	pop	{r7, pc}

00023d72 <nrfx_clock_lfclk_stop>:
{
   23d72:	b580      	push	{r7, lr}
   23d74:	af00      	add	r7, sp, #0
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   23d76:	2000      	movs	r0, #0
   23d78:	f7f6 f844 	bl	19e04 <nrfx_clock_stop>
}
   23d7c:	bf00      	nop
   23d7e:	bd80      	pop	{r7, pc}

00023d80 <nrfx_clock_hfclk_start>:
{
   23d80:	b580      	push	{r7, lr}
   23d82:	af00      	add	r7, sp, #0
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   23d84:	2001      	movs	r0, #1
   23d86:	f7f5 ffcf 	bl	19d28 <nrfx_clock_start>
}
   23d8a:	bf00      	nop
   23d8c:	bd80      	pop	{r7, pc}

00023d8e <nrfx_clock_hfclk_stop>:
{
   23d8e:	b580      	push	{r7, lr}
   23d90:	af00      	add	r7, sp, #0
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   23d92:	2001      	movs	r0, #1
   23d94:	f7f6 f836 	bl	19e04 <nrfx_clock_stop>
}
   23d98:	bf00      	nop
   23d9a:	bd80      	pop	{r7, pc}

00023d9c <get_sub_data>:
{
   23d9c:	b480      	push	{r7}
   23d9e:	b085      	sub	sp, #20
   23da0:	af00      	add	r7, sp, #0
   23da2:	6078      	str	r0, [r7, #4]
   23da4:	460b      	mov	r3, r1
   23da6:	70fb      	strb	r3, [r7, #3]
	struct nrf_clock_control_data *data = dev->data;
   23da8:	687b      	ldr	r3, [r7, #4]
   23daa:	691b      	ldr	r3, [r3, #16]
   23dac:	60fb      	str	r3, [r7, #12]
	return &data->subsys[type];
   23dae:	78fa      	ldrb	r2, [r7, #3]
   23db0:	4613      	mov	r3, r2
   23db2:	005b      	lsls	r3, r3, #1
   23db4:	4413      	add	r3, r2
   23db6:	009b      	lsls	r3, r3, #2
   23db8:	3340      	adds	r3, #64	; 0x40
   23dba:	68fa      	ldr	r2, [r7, #12]
   23dbc:	4413      	add	r3, r2
}
   23dbe:	4618      	mov	r0, r3
   23dc0:	3714      	adds	r7, #20
   23dc2:	46bd      	mov	sp, r7
   23dc4:	bc80      	pop	{r7}
   23dc6:	4770      	bx	lr

00023dc8 <get_sub_config>:
{
   23dc8:	b480      	push	{r7}
   23dca:	b085      	sub	sp, #20
   23dcc:	af00      	add	r7, sp, #0
   23dce:	6078      	str	r0, [r7, #4]
   23dd0:	460b      	mov	r3, r1
   23dd2:	70fb      	strb	r3, [r7, #3]
	const struct nrf_clock_control_config *config =
   23dd4:	687b      	ldr	r3, [r7, #4]
   23dd6:	685b      	ldr	r3, [r3, #4]
   23dd8:	60fb      	str	r3, [r7, #12]
	return &config->subsys[type];
   23dda:	78fa      	ldrb	r2, [r7, #3]
   23ddc:	4613      	mov	r3, r2
   23dde:	005b      	lsls	r3, r3, #1
   23de0:	4413      	add	r3, r2
   23de2:	009b      	lsls	r3, r3, #2
   23de4:	68fa      	ldr	r2, [r7, #12]
   23de6:	4413      	add	r3, r2
}
   23de8:	4618      	mov	r0, r3
   23dea:	3714      	adds	r7, #20
   23dec:	46bd      	mov	sp, r7
   23dee:	bc80      	pop	{r7}
   23df0:	4770      	bx	lr

00023df2 <get_onoff_manager>:
{
   23df2:	b480      	push	{r7}
   23df4:	b085      	sub	sp, #20
   23df6:	af00      	add	r7, sp, #0
   23df8:	6078      	str	r0, [r7, #4]
   23dfa:	460b      	mov	r3, r1
   23dfc:	70fb      	strb	r3, [r7, #3]
	struct nrf_clock_control_data *data = dev->data;
   23dfe:	687b      	ldr	r3, [r7, #4]
   23e00:	691b      	ldr	r3, [r3, #16]
   23e02:	60fb      	str	r3, [r7, #12]
	return &data->mgr[type];
   23e04:	78fb      	ldrb	r3, [r7, #3]
   23e06:	015b      	lsls	r3, r3, #5
   23e08:	68fa      	ldr	r2, [r7, #12]
   23e0a:	4413      	add	r3, r2
}
   23e0c:	4618      	mov	r0, r3
   23e0e:	3714      	adds	r7, #20
   23e10:	46bd      	mov	sp, r7
   23e12:	bc80      	pop	{r7}
   23e14:	4770      	bx	lr

00023e16 <set_off_state>:
{
   23e16:	b480      	push	{r7}
   23e18:	b089      	sub	sp, #36	; 0x24
   23e1a:	af00      	add	r7, sp, #0
   23e1c:	6078      	str	r0, [r7, #4]
   23e1e:	6039      	str	r1, [r7, #0]
	int err = 0;
   23e20:	2300      	movs	r3, #0
   23e22:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   23e24:	f04f 0320 	mov.w	r3, #32
   23e28:	f3ef 8211 	mrs	r2, BASEPRI
   23e2c:	f383 8811 	msr	BASEPRI, r3
   23e30:	f3bf 8f6f 	isb	sy
   23e34:	613a      	str	r2, [r7, #16]
   23e36:	60fb      	str	r3, [r7, #12]
	return key;
   23e38:	693b      	ldr	r3, [r7, #16]
	int key = irq_lock();
   23e3a:	61bb      	str	r3, [r7, #24]
	uint32_t current_ctx = GET_CTX(*flags);
   23e3c:	687b      	ldr	r3, [r7, #4]
   23e3e:	681b      	ldr	r3, [r3, #0]
   23e40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   23e44:	617b      	str	r3, [r7, #20]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   23e46:	697b      	ldr	r3, [r7, #20]
   23e48:	2b00      	cmp	r3, #0
   23e4a:	d007      	beq.n	23e5c <set_off_state+0x46>
   23e4c:	697a      	ldr	r2, [r7, #20]
   23e4e:	683b      	ldr	r3, [r7, #0]
   23e50:	429a      	cmp	r2, r3
   23e52:	d003      	beq.n	23e5c <set_off_state+0x46>
		err = -EPERM;
   23e54:	f04f 33ff 	mov.w	r3, #4294967295
   23e58:	61fb      	str	r3, [r7, #28]
   23e5a:	e002      	b.n	23e62 <set_off_state+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   23e5c:	687b      	ldr	r3, [r7, #4]
   23e5e:	2201      	movs	r2, #1
   23e60:	601a      	str	r2, [r3, #0]
	irq_unlock(key);
   23e62:	69bb      	ldr	r3, [r7, #24]
   23e64:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
   23e66:	68bb      	ldr	r3, [r7, #8]
   23e68:	f383 8811 	msr	BASEPRI, r3
   23e6c:	f3bf 8f6f 	isb	sy
}
   23e70:	bf00      	nop
	return err;
   23e72:	69fb      	ldr	r3, [r7, #28]
}
   23e74:	4618      	mov	r0, r3
   23e76:	3724      	adds	r7, #36	; 0x24
   23e78:	46bd      	mov	sp, r7
   23e7a:	bc80      	pop	{r7}
   23e7c:	4770      	bx	lr

00023e7e <set_starting_state>:
{
   23e7e:	b480      	push	{r7}
   23e80:	b089      	sub	sp, #36	; 0x24
   23e82:	af00      	add	r7, sp, #0
   23e84:	6078      	str	r0, [r7, #4]
   23e86:	6039      	str	r1, [r7, #0]
	int err = 0;
   23e88:	2300      	movs	r3, #0
   23e8a:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
   23e8c:	f04f 0320 	mov.w	r3, #32
   23e90:	f3ef 8211 	mrs	r2, BASEPRI
   23e94:	f383 8811 	msr	BASEPRI, r3
   23e98:	f3bf 8f6f 	isb	sy
   23e9c:	613a      	str	r2, [r7, #16]
   23e9e:	60fb      	str	r3, [r7, #12]
	return key;
   23ea0:	693b      	ldr	r3, [r7, #16]
	int key = irq_lock();
   23ea2:	61bb      	str	r3, [r7, #24]
	uint32_t current_ctx = GET_CTX(*flags);
   23ea4:	687b      	ldr	r3, [r7, #4]
   23ea6:	681b      	ldr	r3, [r3, #0]
   23ea8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   23eac:	617b      	str	r3, [r7, #20]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   23eae:	687b      	ldr	r3, [r7, #4]
   23eb0:	681b      	ldr	r3, [r3, #0]
   23eb2:	f003 0307 	and.w	r3, r3, #7
   23eb6:	2b01      	cmp	r3, #1
   23eb8:	d103      	bne.n	23ec2 <set_starting_state+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   23eba:	687b      	ldr	r3, [r7, #4]
   23ebc:	683a      	ldr	r2, [r7, #0]
   23ebe:	601a      	str	r2, [r3, #0]
   23ec0:	e00a      	b.n	23ed8 <set_starting_state+0x5a>
	} else if (current_ctx != ctx) {
   23ec2:	697a      	ldr	r2, [r7, #20]
   23ec4:	683b      	ldr	r3, [r7, #0]
   23ec6:	429a      	cmp	r2, r3
   23ec8:	d003      	beq.n	23ed2 <set_starting_state+0x54>
		err = -EPERM;
   23eca:	f04f 33ff 	mov.w	r3, #4294967295
   23ece:	61fb      	str	r3, [r7, #28]
   23ed0:	e002      	b.n	23ed8 <set_starting_state+0x5a>
		err = -EALREADY;
   23ed2:	f06f 0377 	mvn.w	r3, #119	; 0x77
   23ed6:	61fb      	str	r3, [r7, #28]
	irq_unlock(key);
   23ed8:	69bb      	ldr	r3, [r7, #24]
   23eda:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
   23edc:	68bb      	ldr	r3, [r7, #8]
   23ede:	f383 8811 	msr	BASEPRI, r3
   23ee2:	f3bf 8f6f 	isb	sy
}
   23ee6:	bf00      	nop
	return err;
   23ee8:	69fb      	ldr	r3, [r7, #28]
}
   23eea:	4618      	mov	r0, r3
   23eec:	3724      	adds	r7, #36	; 0x24
   23eee:	46bd      	mov	sp, r7
   23ef0:	bc80      	pop	{r7}
   23ef2:	4770      	bx	lr

00023ef4 <set_on_state>:
{
   23ef4:	b480      	push	{r7}
   23ef6:	b087      	sub	sp, #28
   23ef8:	af00      	add	r7, sp, #0
   23efa:	6078      	str	r0, [r7, #4]
	__asm__ volatile(
   23efc:	f04f 0320 	mov.w	r3, #32
   23f00:	f3ef 8211 	mrs	r2, BASEPRI
   23f04:	f383 8811 	msr	BASEPRI, r3
   23f08:	f3bf 8f6f 	isb	sy
   23f0c:	60fa      	str	r2, [r7, #12]
   23f0e:	60bb      	str	r3, [r7, #8]
	return key;
   23f10:	68fb      	ldr	r3, [r7, #12]
	int key = irq_lock();
   23f12:	617b      	str	r3, [r7, #20]
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   23f14:	687b      	ldr	r3, [r7, #4]
   23f16:	681b      	ldr	r3, [r3, #0]
   23f18:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   23f1c:	f043 0202 	orr.w	r2, r3, #2
   23f20:	687b      	ldr	r3, [r7, #4]
   23f22:	601a      	str	r2, [r3, #0]
	irq_unlock(key);
   23f24:	697b      	ldr	r3, [r7, #20]
   23f26:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
   23f28:	693b      	ldr	r3, [r7, #16]
   23f2a:	f383 8811 	msr	BASEPRI, r3
   23f2e:	f3bf 8f6f 	isb	sy
}
   23f32:	bf00      	nop
}
   23f34:	bf00      	nop
   23f36:	371c      	adds	r7, #28
   23f38:	46bd      	mov	sp, r7
   23f3a:	bc80      	pop	{r7}
   23f3c:	4770      	bx	lr

00023f3e <lfclk_start>:
{
   23f3e:	b580      	push	{r7, lr}
   23f40:	af00      	add	r7, sp, #0
	nrfx_clock_lfclk_start();
   23f42:	f7ff ff0f 	bl	23d64 <nrfx_clock_lfclk_start>
}
   23f46:	bf00      	nop
   23f48:	bd80      	pop	{r7, pc}

00023f4a <lfclk_stop>:
{
   23f4a:	b580      	push	{r7, lr}
   23f4c:	af00      	add	r7, sp, #0
	nrfx_clock_lfclk_stop();
   23f4e:	f7ff ff10 	bl	23d72 <nrfx_clock_lfclk_stop>
}
   23f52:	bf00      	nop
   23f54:	bd80      	pop	{r7, pc}

00023f56 <hfclk_start>:
{
   23f56:	b580      	push	{r7, lr}
   23f58:	af00      	add	r7, sp, #0
	nrfx_clock_hfclk_start();
   23f5a:	f7ff ff11 	bl	23d80 <nrfx_clock_hfclk_start>
}
   23f5e:	bf00      	nop
   23f60:	bd80      	pop	{r7, pc}

00023f62 <hfclk_stop>:
{
   23f62:	b580      	push	{r7, lr}
   23f64:	af00      	add	r7, sp, #0
	nrfx_clock_hfclk_stop();
   23f66:	f7ff ff12 	bl	23d8e <nrfx_clock_hfclk_stop>
}
   23f6a:	bf00      	nop
   23f6c:	bd80      	pop	{r7, pc}

00023f6e <api_stop>:
{
   23f6e:	b580      	push	{r7, lr}
   23f70:	b082      	sub	sp, #8
   23f72:	af00      	add	r7, sp, #0
   23f74:	6078      	str	r0, [r7, #4]
   23f76:	6039      	str	r1, [r7, #0]
	return stop(dev, subsys, CTX_API);
   23f78:	2280      	movs	r2, #128	; 0x80
   23f7a:	6839      	ldr	r1, [r7, #0]
   23f7c:	6878      	ldr	r0, [r7, #4]
   23f7e:	f7f1 f82f 	bl	14fe0 <stop>
   23f82:	4603      	mov	r3, r0
}
   23f84:	4618      	mov	r0, r3
   23f86:	3708      	adds	r7, #8
   23f88:	46bd      	mov	sp, r7
   23f8a:	bd80      	pop	{r7, pc}

00023f8c <async_start>:
{
   23f8c:	b580      	push	{r7, lr}
   23f8e:	b088      	sub	sp, #32
   23f90:	af00      	add	r7, sp, #0
   23f92:	60f8      	str	r0, [r7, #12]
   23f94:	60b9      	str	r1, [r7, #8]
   23f96:	607a      	str	r2, [r7, #4]
   23f98:	603b      	str	r3, [r7, #0]
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   23f9a:	68bb      	ldr	r3, [r7, #8]
   23f9c:	77fb      	strb	r3, [r7, #31]
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   23f9e:	7ffb      	ldrb	r3, [r7, #31]
   23fa0:	4619      	mov	r1, r3
   23fa2:	68f8      	ldr	r0, [r7, #12]
   23fa4:	f7ff fefa 	bl	23d9c <get_sub_data>
   23fa8:	61b8      	str	r0, [r7, #24]
	err = set_starting_state(&subdata->flags, ctx);
   23faa:	69bb      	ldr	r3, [r7, #24]
   23fac:	3308      	adds	r3, #8
   23fae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   23fb0:	4618      	mov	r0, r3
   23fb2:	f7ff ff64 	bl	23e7e <set_starting_state>
   23fb6:	6178      	str	r0, [r7, #20]
	if (err < 0) {
   23fb8:	697b      	ldr	r3, [r7, #20]
   23fba:	2b00      	cmp	r3, #0
   23fbc:	da01      	bge.n	23fc2 <async_start+0x36>
		return err;
   23fbe:	697b      	ldr	r3, [r7, #20]
   23fc0:	e00e      	b.n	23fe0 <async_start+0x54>
	subdata->cb = cb;
   23fc2:	69bb      	ldr	r3, [r7, #24]
   23fc4:	687a      	ldr	r2, [r7, #4]
   23fc6:	601a      	str	r2, [r3, #0]
	subdata->user_data = user_data;
   23fc8:	69bb      	ldr	r3, [r7, #24]
   23fca:	683a      	ldr	r2, [r7, #0]
   23fcc:	605a      	str	r2, [r3, #4]
	 get_sub_config(dev, type)->start();
   23fce:	7ffb      	ldrb	r3, [r7, #31]
   23fd0:	4619      	mov	r1, r3
   23fd2:	68f8      	ldr	r0, [r7, #12]
   23fd4:	f7ff fef8 	bl	23dc8 <get_sub_config>
   23fd8:	4603      	mov	r3, r0
   23fda:	681b      	ldr	r3, [r3, #0]
   23fdc:	4798      	blx	r3
	return 0;
   23fde:	2300      	movs	r3, #0
}
   23fe0:	4618      	mov	r0, r3
   23fe2:	3720      	adds	r7, #32
   23fe4:	46bd      	mov	sp, r7
   23fe6:	bd80      	pop	{r7, pc}

00023fe8 <api_start>:
{
   23fe8:	b580      	push	{r7, lr}
   23fea:	b086      	sub	sp, #24
   23fec:	af02      	add	r7, sp, #8
   23fee:	60f8      	str	r0, [r7, #12]
   23ff0:	60b9      	str	r1, [r7, #8]
   23ff2:	607a      	str	r2, [r7, #4]
   23ff4:	603b      	str	r3, [r7, #0]
	return async_start(dev, subsys, cb, user_data, CTX_API);
   23ff6:	2380      	movs	r3, #128	; 0x80
   23ff8:	9300      	str	r3, [sp, #0]
   23ffa:	683b      	ldr	r3, [r7, #0]
   23ffc:	687a      	ldr	r2, [r7, #4]
   23ffe:	68b9      	ldr	r1, [r7, #8]
   24000:	68f8      	ldr	r0, [r7, #12]
   24002:	f7ff ffc3 	bl	23f8c <async_start>
   24006:	4603      	mov	r3, r0
}
   24008:	4618      	mov	r0, r3
   2400a:	3710      	adds	r7, #16
   2400c:	46bd      	mov	sp, r7
   2400e:	bd80      	pop	{r7, pc}

00024010 <blocking_start_callback>:
{
   24010:	b580      	push	{r7, lr}
   24012:	b086      	sub	sp, #24
   24014:	af00      	add	r7, sp, #0
   24016:	60f8      	str	r0, [r7, #12]
   24018:	60b9      	str	r1, [r7, #8]
   2401a:	607a      	str	r2, [r7, #4]
	struct k_sem *sem = user_data;
   2401c:	687b      	ldr	r3, [r7, #4]
   2401e:	617b      	str	r3, [r7, #20]
	k_sem_give(sem);
   24020:	6978      	ldr	r0, [r7, #20]
   24022:	f7ff fe13 	bl	23c4c <k_sem_give>
}
   24026:	bf00      	nop
   24028:	3718      	adds	r7, #24
   2402a:	46bd      	mov	sp, r7
   2402c:	bd80      	pop	{r7, pc}

0002402e <onoff_started_callback>:
{
   2402e:	b580      	push	{r7, lr}
   24030:	b088      	sub	sp, #32
   24032:	af00      	add	r7, sp, #0
   24034:	60f8      	str	r0, [r7, #12]
   24036:	60b9      	str	r1, [r7, #8]
   24038:	607a      	str	r2, [r7, #4]
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)sys;
   2403a:	68bb      	ldr	r3, [r7, #8]
   2403c:	77fb      	strb	r3, [r7, #31]
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   2403e:	7ffb      	ldrb	r3, [r7, #31]
   24040:	4619      	mov	r1, r3
   24042:	68f8      	ldr	r0, [r7, #12]
   24044:	f7ff fed5 	bl	23df2 <get_onoff_manager>
   24048:	61b8      	str	r0, [r7, #24]
	onoff_notify_fn notify = user_data;
   2404a:	687b      	ldr	r3, [r7, #4]
   2404c:	617b      	str	r3, [r7, #20]
	notify(mgr, 0);
   2404e:	697b      	ldr	r3, [r7, #20]
   24050:	2100      	movs	r1, #0
   24052:	69b8      	ldr	r0, [r7, #24]
   24054:	4798      	blx	r3
}
   24056:	bf00      	nop
   24058:	3720      	adds	r7, #32
   2405a:	46bd      	mov	sp, r7
   2405c:	bd80      	pop	{r7, pc}

0002405e <hfclkaudio_init>:
{
   2405e:	b480      	push	{r7}
   24060:	af00      	add	r7, sp, #0
}
   24062:	bf00      	nop
   24064:	46bd      	mov	sp, r7
   24066:	bc80      	pop	{r7}
   24068:	4770      	bx	lr

0002406a <sys_clock_idle_exit>:
void __weak sys_clock_set_timeout(int32_t ticks, bool idle)
{
}

void __weak sys_clock_idle_exit(void)
{
   2406a:	b480      	push	{r7}
   2406c:	af00      	add	r7, sp, #0
}
   2406e:	bf00      	nop
   24070:	46bd      	mov	sp, r7
   24072:	bc80      	pop	{r7}
   24074:	4770      	bx	lr

00024076 <nrf_event_readback>:
{
   24076:	b480      	push	{r7}
   24078:	b083      	sub	sp, #12
   2407a:	af00      	add	r7, sp, #0
   2407c:	6078      	str	r0, [r7, #4]
    (void)*((volatile uint32_t *)(p_event_reg));
   2407e:	687b      	ldr	r3, [r7, #4]
   24080:	681b      	ldr	r3, [r3, #0]
}
   24082:	bf00      	nop
   24084:	370c      	adds	r7, #12
   24086:	46bd      	mov	sp, r7
   24088:	bc80      	pop	{r7}
   2408a:	4770      	bx	lr

0002408c <sys_clock_hw_cycles_per_sec>:
{
   2408c:	b480      	push	{r7}
   2408e:	af00      	add	r7, sp, #0
	return CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
   24090:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
   24094:	4618      	mov	r0, r3
   24096:	46bd      	mov	sp, r7
   24098:	bc80      	pop	{r7}
   2409a:	4770      	bx	lr

0002409c <k_busy_wait>:
{
   2409c:	b580      	push	{r7, lr}
   2409e:	b082      	sub	sp, #8
   240a0:	af00      	add	r7, sp, #0
   240a2:	6078      	str	r0, [r7, #4]
	z_impl_k_busy_wait(usec_to_wait);
   240a4:	6878      	ldr	r0, [r7, #4]
   240a6:	f004 fe92 	bl	28dce <z_impl_k_busy_wait>
}
   240aa:	bf00      	nop
   240ac:	3708      	adds	r7, #8
   240ae:	46bd      	mov	sp, r7
   240b0:	bd80      	pop	{r7, pc}

000240b2 <nrf_rtc_cc_set>:
{
   240b2:	b480      	push	{r7}
   240b4:	b085      	sub	sp, #20
   240b6:	af00      	add	r7, sp, #0
   240b8:	60f8      	str	r0, [r7, #12]
   240ba:	60b9      	str	r1, [r7, #8]
   240bc:	607a      	str	r2, [r7, #4]
    p_reg->CC[ch] = cc_val;
   240be:	68fb      	ldr	r3, [r7, #12]
   240c0:	68ba      	ldr	r2, [r7, #8]
   240c2:	f502 72a8 	add.w	r2, r2, #336	; 0x150
   240c6:	6879      	ldr	r1, [r7, #4]
   240c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   240cc:	bf00      	nop
   240ce:	3714      	adds	r7, #20
   240d0:	46bd      	mov	sp, r7
   240d2:	bc80      	pop	{r7}
   240d4:	4770      	bx	lr

000240d6 <nrf_rtc_cc_get>:
{
   240d6:	b480      	push	{r7}
   240d8:	b083      	sub	sp, #12
   240da:	af00      	add	r7, sp, #0
   240dc:	6078      	str	r0, [r7, #4]
   240de:	6039      	str	r1, [r7, #0]
    return p_reg->CC[ch];
   240e0:	687b      	ldr	r3, [r7, #4]
   240e2:	683a      	ldr	r2, [r7, #0]
   240e4:	f502 72a8 	add.w	r2, r2, #336	; 0x150
   240e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
   240ec:	4618      	mov	r0, r3
   240ee:	370c      	adds	r7, #12
   240f0:	46bd      	mov	sp, r7
   240f2:	bc80      	pop	{r7}
   240f4:	4770      	bx	lr

000240f6 <nrf_rtc_int_enable>:
{
   240f6:	b480      	push	{r7}
   240f8:	b083      	sub	sp, #12
   240fa:	af00      	add	r7, sp, #0
   240fc:	6078      	str	r0, [r7, #4]
   240fe:	6039      	str	r1, [r7, #0]
    p_reg->INTENSET = mask;
   24100:	687b      	ldr	r3, [r7, #4]
   24102:	683a      	ldr	r2, [r7, #0]
   24104:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   24108:	bf00      	nop
   2410a:	370c      	adds	r7, #12
   2410c:	46bd      	mov	sp, r7
   2410e:	bc80      	pop	{r7}
   24110:	4770      	bx	lr

00024112 <nrf_rtc_int_enable_check>:
{
   24112:	b480      	push	{r7}
   24114:	b083      	sub	sp, #12
   24116:	af00      	add	r7, sp, #0
   24118:	6078      	str	r0, [r7, #4]
   2411a:	6039      	str	r1, [r7, #0]
    return p_reg->INTENSET & mask;
   2411c:	687b      	ldr	r3, [r7, #4]
   2411e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   24122:	683b      	ldr	r3, [r7, #0]
   24124:	4013      	ands	r3, r2
}
   24126:	4618      	mov	r0, r3
   24128:	370c      	adds	r7, #12
   2412a:	46bd      	mov	sp, r7
   2412c:	bc80      	pop	{r7}
   2412e:	4770      	bx	lr

00024130 <nrf_rtc_event_check>:
{
   24130:	b480      	push	{r7}
   24132:	b083      	sub	sp, #12
   24134:	af00      	add	r7, sp, #0
   24136:	6078      	str	r0, [r7, #4]
   24138:	460b      	mov	r3, r1
   2413a:	807b      	strh	r3, [r7, #2]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2413c:	887b      	ldrh	r3, [r7, #2]
   2413e:	687a      	ldr	r2, [r7, #4]
   24140:	4413      	add	r3, r2
   24142:	681b      	ldr	r3, [r3, #0]
   24144:	2b00      	cmp	r3, #0
   24146:	bf14      	ite	ne
   24148:	2301      	movne	r3, #1
   2414a:	2300      	moveq	r3, #0
   2414c:	b2db      	uxtb	r3, r3
}
   2414e:	4618      	mov	r0, r3
   24150:	370c      	adds	r7, #12
   24152:	46bd      	mov	sp, r7
   24154:	bc80      	pop	{r7}
   24156:	4770      	bx	lr

00024158 <nrf_rtc_event_clear>:
{
   24158:	b580      	push	{r7, lr}
   2415a:	b082      	sub	sp, #8
   2415c:	af00      	add	r7, sp, #0
   2415e:	6078      	str	r0, [r7, #4]
   24160:	460b      	mov	r3, r1
   24162:	807b      	strh	r3, [r7, #2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   24164:	887b      	ldrh	r3, [r7, #2]
   24166:	687a      	ldr	r2, [r7, #4]
   24168:	4413      	add	r3, r2
   2416a:	2200      	movs	r2, #0
   2416c:	601a      	str	r2, [r3, #0]
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
   2416e:	887b      	ldrh	r3, [r7, #2]
   24170:	687a      	ldr	r2, [r7, #4]
   24172:	4413      	add	r3, r2
   24174:	4618      	mov	r0, r3
   24176:	f7ff ff7e 	bl	24076 <nrf_event_readback>
}
   2417a:	bf00      	nop
   2417c:	3708      	adds	r7, #8
   2417e:	46bd      	mov	sp, r7
   24180:	bd80      	pop	{r7, pc}

00024182 <nrf_rtc_counter_get>:
{
   24182:	b480      	push	{r7}
   24184:	b083      	sub	sp, #12
   24186:	af00      	add	r7, sp, #0
   24188:	6078      	str	r0, [r7, #4]
     return p_reg->COUNTER;
   2418a:	687b      	ldr	r3, [r7, #4]
   2418c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
}
   24190:	4618      	mov	r0, r3
   24192:	370c      	adds	r7, #12
   24194:	46bd      	mov	sp, r7
   24196:	bc80      	pop	{r7}
   24198:	4770      	bx	lr

0002419a <nrf_rtc_task_trigger>:
{
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
   2419a:	b480      	push	{r7}
   2419c:	b083      	sub	sp, #12
   2419e:	af00      	add	r7, sp, #0
   241a0:	6078      	str	r0, [r7, #4]
   241a2:	460b      	mov	r3, r1
   241a4:	70fb      	strb	r3, [r7, #3]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   241a6:	78fa      	ldrb	r2, [r7, #3]
   241a8:	687b      	ldr	r3, [r7, #4]
   241aa:	4413      	add	r3, r2
   241ac:	461a      	mov	r2, r3
   241ae:	2301      	movs	r3, #1
   241b0:	6013      	str	r3, [r2, #0]
}
   241b2:	bf00      	nop
   241b4:	370c      	adds	r7, #12
   241b6:	46bd      	mov	sp, r7
   241b8:	bc80      	pop	{r7}
   241ba:	4770      	bx	lr

000241bc <nrf_rtc_event_enable>:

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
   241bc:	b480      	push	{r7}
   241be:	b083      	sub	sp, #12
   241c0:	af00      	add	r7, sp, #0
   241c2:	6078      	str	r0, [r7, #4]
   241c4:	6039      	str	r1, [r7, #0]
    p_reg->EVTENSET = mask;
   241c6:	687b      	ldr	r3, [r7, #4]
   241c8:	683a      	ldr	r2, [r7, #0]
   241ca:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
}
   241ce:	bf00      	nop
   241d0:	370c      	adds	r7, #12
   241d2:	46bd      	mov	sp, r7
   241d4:	bc80      	pop	{r7}
   241d6:	4770      	bx	lr

000241d8 <nrf_rtc_event_disable>:

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
   241d8:	b480      	push	{r7}
   241da:	b083      	sub	sp, #12
   241dc:	af00      	add	r7, sp, #0
   241de:	6078      	str	r0, [r7, #4]
   241e0:	6039      	str	r1, [r7, #0]
    p_reg->EVTENCLR = mask;
   241e2:	687b      	ldr	r3, [r7, #4]
   241e4:	683a      	ldr	r2, [r7, #0]
   241e6:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
}
   241ea:	bf00      	nop
   241ec:	370c      	adds	r7, #12
   241ee:	46bd      	mov	sp, r7
   241f0:	bc80      	pop	{r7}
   241f2:	4770      	bx	lr

000241f4 <counter_sub>:
{
   241f4:	b480      	push	{r7}
   241f6:	b083      	sub	sp, #12
   241f8:	af00      	add	r7, sp, #0
   241fa:	6078      	str	r0, [r7, #4]
   241fc:	6039      	str	r1, [r7, #0]
	return (a - b) & COUNTER_MAX;
   241fe:	687a      	ldr	r2, [r7, #4]
   24200:	683b      	ldr	r3, [r7, #0]
   24202:	1ad3      	subs	r3, r2, r3
   24204:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
}
   24208:	4618      	mov	r0, r3
   2420a:	370c      	adds	r7, #12
   2420c:	46bd      	mov	sp, r7
   2420e:	bc80      	pop	{r7}
   24210:	4770      	bx	lr

00024212 <set_absolute_alarm>:
{
   24212:	b580      	push	{r7, lr}
   24214:	b086      	sub	sp, #24
   24216:	af00      	add	r7, sp, #0
   24218:	6078      	str	r0, [r7, #4]
   2421a:	6039      	str	r1, [r7, #0]
	uint32_t cc_val = abs_val & COUNTER_MAX;
   2421c:	683b      	ldr	r3, [r7, #0]
   2421e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   24222:	617b      	str	r3, [r7, #20]
	uint32_t prev_cc = get_comparator(chan);
   24224:	6878      	ldr	r0, [r7, #4]
   24226:	f7f1 f991 	bl	1554c <get_comparator>
   2422a:	6138      	str	r0, [r7, #16]
		now = counter();
   2422c:	f7f1 f9da 	bl	155e4 <counter>
   24230:	60f8      	str	r0, [r7, #12]
		set_comparator(chan, now);
   24232:	68f9      	ldr	r1, [r7, #12]
   24234:	6878      	ldr	r0, [r7, #4]
   24236:	f7f1 f975 	bl	15524 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   2423a:	68f9      	ldr	r1, [r7, #12]
   2423c:	6938      	ldr	r0, [r7, #16]
   2423e:	f7ff ffd9 	bl	241f4 <counter_sub>
   24242:	4603      	mov	r3, r0
   24244:	2b01      	cmp	r3, #1
   24246:	d102      	bne.n	2424e <set_absolute_alarm+0x3c>
			k_busy_wait(19);
   24248:	2013      	movs	r0, #19
   2424a:	f7ff ff27 	bl	2409c <k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   2424e:	68fb      	ldr	r3, [r7, #12]
   24250:	3302      	adds	r3, #2
   24252:	4619      	mov	r1, r3
   24254:	6978      	ldr	r0, [r7, #20]
   24256:	f7ff ffcd 	bl	241f4 <counter_sub>
   2425a:	4603      	mov	r3, r0
   2425c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   24260:	d902      	bls.n	24268 <set_absolute_alarm+0x56>
			cc_val = now + 2;
   24262:	68fb      	ldr	r3, [r7, #12]
   24264:	3302      	adds	r3, #2
   24266:	617b      	str	r3, [r7, #20]
		event_clear(chan);
   24268:	6878      	ldr	r0, [r7, #4]
   2426a:	f7f1 f97f 	bl	1556c <event_clear>
		event_enable(chan);
   2426e:	6878      	ldr	r0, [r7, #4]
   24270:	f7f1 f990 	bl	15594 <event_enable>
		set_comparator(chan, cc_val);
   24274:	6979      	ldr	r1, [r7, #20]
   24276:	6878      	ldr	r0, [r7, #4]
   24278:	f7f1 f954 	bl	15524 <set_comparator>
		now2 = counter();
   2427c:	f7f1 f9b2 	bl	155e4 <counter>
   24280:	60b8      	str	r0, [r7, #8]
		prev_cc = cc_val;
   24282:	697b      	ldr	r3, [r7, #20]
   24284:	613b      	str	r3, [r7, #16]
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   24286:	68ba      	ldr	r2, [r7, #8]
   24288:	68fb      	ldr	r3, [r7, #12]
   2428a:	429a      	cmp	r2, r3
   2428c:	d009      	beq.n	242a2 <set_absolute_alarm+0x90>
   2428e:	68bb      	ldr	r3, [r7, #8]
   24290:	3302      	adds	r3, #2
   24292:	4619      	mov	r1, r3
   24294:	6978      	ldr	r0, [r7, #20]
   24296:	f7ff ffad 	bl	241f4 <counter_sub>
   2429a:	4603      	mov	r3, r0
	} while ((now2 != now) &&
   2429c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   242a0:	d8c4      	bhi.n	2422c <set_absolute_alarm+0x1a>
}
   242a2:	bf00      	nop
   242a4:	3718      	adds	r7, #24
   242a6:	46bd      	mov	sp, r7
   242a8:	bd80      	pop	{r7, pc}

000242aa <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   242aa:	b510      	push	{r4, lr}
   242ac:	b40f      	push	{r0, r1, r2, r3}
   242ae:	f7f1 fc1f 	bl	15af0 <before_nse>
   242b2:	bc0f      	pop	{r0, r1, r2, r3}
   242b4:	f7eb fe98 	bl	ffe8 <spm_request_random_number_nse>
   242b8:	b40f      	push	{r0, r1, r2, r3}
   242ba:	f7f1 fc25 	bl	15b08 <after_nse>
   242be:	bc0f      	pop	{r0, r1, r2, r3}
   242c0:	bd10      	pop	{r4, pc}
   242c2:	bf00      	nop
   242c4:	4618      	mov	r0, r3

000242c6 <arch_irq_enable>:
{
   242c6:	b580      	push	{r7, lr}
   242c8:	b082      	sub	sp, #8
   242ca:	af00      	add	r7, sp, #0
   242cc:	6078      	str	r0, [r7, #4]
	NVIC_EnableIRQ((IRQn_Type)irq);
   242ce:	687b      	ldr	r3, [r7, #4]
   242d0:	b25b      	sxtb	r3, r3
   242d2:	4618      	mov	r0, r3
   242d4:	f7f1 fc8a 	bl	15bec <__NVIC_EnableIRQ>
}
   242d8:	bf00      	nop
   242da:	3708      	adds	r7, #8
   242dc:	46bd      	mov	sp, r7
   242de:	bd80      	pop	{r7, pc}

000242e0 <z_irq_spurious>:
{
   242e0:	b580      	push	{r7, lr}
   242e2:	b082      	sub	sp, #8
   242e4:	af00      	add	r7, sp, #0
   242e6:	6078      	str	r0, [r7, #4]
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   242e8:	2100      	movs	r1, #0
   242ea:	2001      	movs	r0, #1
   242ec:	f000 f823 	bl	24336 <z_arm_fatal_error>
}
   242f0:	bf00      	nop
   242f2:	3708      	adds	r7, #8
   242f4:	46bd      	mov	sp, r7
   242f6:	bd80      	pop	{r7, pc}

000242f8 <configure_builtin_stack_guard>:
{
   242f8:	b480      	push	{r7}
   242fa:	b085      	sub	sp, #20
   242fc:	af00      	add	r7, sp, #0
   242fe:	6078      	str	r0, [r7, #4]
	uint32_t guard_start = thread->stack_info.start;
   24300:	687b      	ldr	r3, [r7, #4]
   24302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   24304:	60fb      	str	r3, [r7, #12]
   24306:	68fb      	ldr	r3, [r7, #12]
   24308:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   2430a:	68bb      	ldr	r3, [r7, #8]
   2430c:	f383 880b 	msr	PSPLIM, r3
}
   24310:	bf00      	nop
}
   24312:	bf00      	nop
   24314:	3714      	adds	r7, #20
   24316:	46bd      	mov	sp, r7
   24318:	bc80      	pop	{r7}
   2431a:	4770      	bx	lr

0002431c <z_arm_prepare_switch_to_main>:
{
   2431c:	b480      	push	{r7}
   2431e:	af00      	add	r7, sp, #0
}
   24320:	bf00      	nop
   24322:	46bd      	mov	sp, r7
   24324:	bc80      	pop	{r7}
   24326:	4770      	bx	lr

00024328 <k_is_user_context>:
{
   24328:	b480      	push	{r7}
   2432a:	af00      	add	r7, sp, #0
	return false;
   2432c:	2300      	movs	r3, #0
}
   2432e:	4618      	mov	r0, r3
   24330:	46bd      	mov	sp, r7
   24332:	bc80      	pop	{r7}
   24334:	4770      	bx	lr

00024336 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   24336:	b580      	push	{r7, lr}
   24338:	b082      	sub	sp, #8
   2433a:	af00      	add	r7, sp, #0
   2433c:	6078      	str	r0, [r7, #4]
   2433e:	6039      	str	r1, [r7, #0]

	if (esf != NULL) {
   24340:	683b      	ldr	r3, [r7, #0]
   24342:	2b00      	cmp	r3, #0
   24344:	d002      	beq.n	2434c <z_arm_fatal_error+0x16>
		esf_dump(esf);
   24346:	6838      	ldr	r0, [r7, #0]
   24348:	f7f1 fd78 	bl	15e3c <esf_dump>
	}
	z_fatal_error(reason, esf);
   2434c:	6839      	ldr	r1, [r7, #0]
   2434e:	6878      	ldr	r0, [r7, #4]
   24350:	f7f7 fe44 	bl	1bfdc <z_fatal_error>
}
   24354:	bf00      	nop
   24356:	3708      	adds	r7, #8
   24358:	46bd      	mov	sp, r7
   2435a:	bd80      	pop	{r7, pc}

0002435c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2435c:	b580      	push	{r7, lr}
   2435e:	b084      	sub	sp, #16
   24360:	af00      	add	r7, sp, #0
   24362:	6078      	str	r0, [r7, #4]
	/* Stacked R0 holds the exception reason. */
	unsigned int reason = esf->basic.r0;
   24364:	687b      	ldr	r3, [r7, #4]
   24366:	681b      	ldr	r3, [r3, #0]
   24368:	60fb      	str	r3, [r7, #12]
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2436a:	6879      	ldr	r1, [r7, #4]
   2436c:	68f8      	ldr	r0, [r7, #12]
   2436e:	f7ff ffe2 	bl	24336 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   24372:	bf00      	nop
   24374:	3710      	adds	r7, #16
   24376:	46bd      	mov	sp, r7
   24378:	bd80      	pop	{r7, pc}

0002437a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2437a:	b580      	push	{r7, lr}
   2437c:	af00      	add	r7, sp, #0
	handler();
   2437e:	f7f1 fe7d 	bl	1607c <z_SysNmiOnReset>
	z_arm_int_exit();
   24382:	f7f3 f8bb 	bl	174fc <z_arm_exc_exit>
}
   24386:	bf00      	nop
   24388:	bd80      	pop	{r7, pc}

0002438a <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   2438a:	b580      	push	{r7, lr}
   2438c:	af00      	add	r7, sp, #0
	relocate_vector_table();
   2438e:	f7f1 fe79 	bl	16084 <relocate_vector_table>
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
   24392:	f7f1 fe8d 	bl	160b0 <z_arm_floating_point_init>
#endif
	z_bss_zero();
   24396:	f7f7 ff9d 	bl	1c2d4 <z_bss_zero>
	z_data_copy();
   2439a:	f7fb fe3d 	bl	20018 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   2439e:	f000 f837 	bl	24410 <z_arm_interrupt_init>
	z_cstart();
   243a2:	f7f8 f887 	bl	1c4b4 <z_cstart>

000243a6 <k_is_user_context>:
{
   243a6:	b480      	push	{r7}
   243a8:	af00      	add	r7, sp, #0
	return false;
   243aa:	2300      	movs	r3, #0
}
   243ac:	4618      	mov	r0, r3
   243ae:	46bd      	mov	sp, r7
   243b0:	bc80      	pop	{r7}
   243b2:	4770      	bx	lr

000243b4 <fault_show>:
{
   243b4:	b480      	push	{r7}
   243b6:	b083      	sub	sp, #12
   243b8:	af00      	add	r7, sp, #0
   243ba:	6078      	str	r0, [r7, #4]
   243bc:	6039      	str	r1, [r7, #0]
}
   243be:	bf00      	nop
   243c0:	370c      	adds	r7, #12
   243c2:	46bd      	mov	sp, r7
   243c4:	bc80      	pop	{r7}
   243c6:	4770      	bx	lr

000243c8 <memory_fault_recoverable>:
{
   243c8:	b480      	push	{r7}
   243ca:	b083      	sub	sp, #12
   243cc:	af00      	add	r7, sp, #0
   243ce:	6078      	str	r0, [r7, #4]
   243d0:	460b      	mov	r3, r1
   243d2:	70fb      	strb	r3, [r7, #3]
	return false;
   243d4:	2300      	movs	r3, #0
}
   243d6:	4618      	mov	r0, r3
   243d8:	370c      	adds	r7, #12
   243da:	46bd      	mov	sp, r7
   243dc:	bc80      	pop	{r7}
   243de:	4770      	bx	lr

000243e0 <z_arm_save_fp_context>:
 * @file @brief Helper functions for saving and restoring the FP context.
 *
 */

void z_arm_save_fp_context(struct fpu_ctx_full *buffer)
{
   243e0:	b480      	push	{r7}
   243e2:	b083      	sub	sp, #12
   243e4:	af00      	add	r7, sp, #0
   243e6:	6078      	str	r0, [r7, #4]
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   243e8:	bf00      	nop
   243ea:	370c      	adds	r7, #12
   243ec:	46bd      	mov	sp, r7
   243ee:	bc80      	pop	{r7}
   243f0:	4770      	bx	lr

000243f2 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
{
   243f2:	b480      	push	{r7}
   243f4:	b083      	sub	sp, #12
   243f6:	af00      	add	r7, sp, #0
   243f8:	6078      	str	r0, [r7, #4]
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   243fa:	bf00      	nop
   243fc:	370c      	adds	r7, #12
   243fe:	46bd      	mov	sp, r7
   24400:	bc80      	pop	{r7}
   24402:	4770      	bx	lr

00024404 <sys_arch_reboot>:
 *
 * @return N/A
 */

void __weak sys_arch_reboot(int type)
{
   24404:	b580      	push	{r7, lr}
   24406:	b082      	sub	sp, #8
   24408:	af00      	add	r7, sp, #0
   2440a:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(type);

	NVIC_SystemReset();
   2440c:	f7f3 f884 	bl	17518 <__NVIC_SystemReset>

00024410 <z_arm_interrupt_init>:
 *
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
   24410:	b580      	push	{r7, lr}
   24412:	b082      	sub	sp, #8
   24414:	af00      	add	r7, sp, #0
	int irq = 0;
   24416:	2300      	movs	r3, #0
   24418:	607b      	str	r3, [r7, #4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   2441a:	e008      	b.n	2442e <z_arm_interrupt_init+0x1e>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   2441c:	687b      	ldr	r3, [r7, #4]
   2441e:	b25b      	sxtb	r3, r3
   24420:	2101      	movs	r1, #1
   24422:	4618      	mov	r0, r3
   24424:	f7f3 f88e 	bl	17544 <__NVIC_SetPriority>
	for (; irq < CONFIG_NUM_IRQS; irq++) {
   24428:	687b      	ldr	r3, [r7, #4]
   2442a:	3301      	adds	r3, #1
   2442c:	607b      	str	r3, [r7, #4]
   2442e:	687b      	ldr	r3, [r7, #4]
   24430:	2b40      	cmp	r3, #64	; 0x40
   24432:	ddf3      	ble.n	2441c <z_arm_interrupt_init+0xc>
	}
}
   24434:	bf00      	nop
   24436:	bf00      	nop
   24438:	3708      	adds	r7, #8
   2443a:	46bd      	mov	sp, r7
   2443c:	bd80      	pop	{r7, pc}

0002443e <arm_cmse_mpu_region_get>:

#include <zephyr.h>
#include <aarch32/cortex_m/cmse.h>

int arm_cmse_mpu_region_get(uint32_t addr)
{
   2443e:	b480      	push	{r7}
   24440:	b087      	sub	sp, #28
   24442:	af00      	add	r7, sp, #0
   24444:	6078      	str	r0, [r7, #4]
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);
   24446:	687b      	ldr	r3, [r7, #4]
   24448:	617b      	str	r3, [r7, #20]
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   2444a:	697b      	ldr	r3, [r7, #20]
   2444c:	e843 f300 	tt	r3, r3
   24450:	60fb      	str	r3, [r7, #12]
   24452:	68fb      	ldr	r3, [r7, #12]
   24454:	613b      	str	r3, [r7, #16]

	if (addr_info.flags.mpu_region_valid) {
   24456:	7cbb      	ldrb	r3, [r7, #18]
   24458:	f003 0301 	and.w	r3, r3, #1
   2445c:	b2db      	uxtb	r3, r3
   2445e:	2b00      	cmp	r3, #0
   24460:	d001      	beq.n	24466 <arm_cmse_mpu_region_get+0x28>
		return addr_info.flags.mpu_region;
   24462:	7c3b      	ldrb	r3, [r7, #16]
   24464:	e001      	b.n	2446a <arm_cmse_mpu_region_get+0x2c>
	}

	return -EINVAL;
   24466:	f06f 0315 	mvn.w	r3, #21
}
   2446a:	4618      	mov	r0, r3
   2446c:	371c      	adds	r7, #28
   2446e:	46bd      	mov	sp, r7
   24470:	bc80      	pop	{r7}
   24472:	4770      	bx	lr

00024474 <k_is_user_context>:
{
   24474:	b480      	push	{r7}
   24476:	af00      	add	r7, sp, #0
	return false;
   24478:	2300      	movs	r3, #0
}
   2447a:	4618      	mov	r0, r3
   2447c:	46bd      	mov	sp, r7
   2447e:	bc80      	pop	{r7}
   24480:	4770      	bx	lr

00024482 <ARM_MPU_SetRegionEx>:
{
   24482:	b480      	push	{r7}
   24484:	b085      	sub	sp, #20
   24486:	af00      	add	r7, sp, #0
   24488:	60f8      	str	r0, [r7, #12]
   2448a:	60b9      	str	r1, [r7, #8]
   2448c:	607a      	str	r2, [r7, #4]
   2448e:	603b      	str	r3, [r7, #0]
  mpu->RNR = rnr;
   24490:	68fb      	ldr	r3, [r7, #12]
   24492:	68ba      	ldr	r2, [r7, #8]
   24494:	609a      	str	r2, [r3, #8]
  mpu->RBAR = rbar;
   24496:	68fb      	ldr	r3, [r7, #12]
   24498:	687a      	ldr	r2, [r7, #4]
   2449a:	60da      	str	r2, [r3, #12]
  mpu->RLAR = rlar;
   2449c:	68fb      	ldr	r3, [r7, #12]
   2449e:	683a      	ldr	r2, [r7, #0]
   244a0:	611a      	str	r2, [r3, #16]
}
   244a2:	bf00      	nop
   244a4:	3714      	adds	r7, #20
   244a6:	46bd      	mov	sp, r7
   244a8:	bc80      	pop	{r7}
   244aa:	4770      	bx	lr

000244ac <get_num_regions>:
{
   244ac:	b480      	push	{r7}
   244ae:	af00      	add	r7, sp, #0
	return NUM_MPU_REGIONS;
   244b0:	2310      	movs	r3, #16
}
   244b2:	4618      	mov	r0, r3
   244b4:	46bd      	mov	sp, r7
   244b6:	bc80      	pop	{r7}
   244b8:	4770      	bx	lr

000244ba <mpu_partition_is_valid>:
{
   244ba:	b480      	push	{r7}
   244bc:	b085      	sub	sp, #20
   244be:	af00      	add	r7, sp, #0
   244c0:	6078      	str	r0, [r7, #4]
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   244c2:	687b      	ldr	r3, [r7, #4]
   244c4:	685b      	ldr	r3, [r3, #4]
		&&
   244c6:	2b1f      	cmp	r3, #31
   244c8:	d90f      	bls.n	244ea <mpu_partition_is_valid+0x30>
		((part->size &
   244ca:	687b      	ldr	r3, [r7, #4]
   244cc:	685b      	ldr	r3, [r3, #4]
   244ce:	f023 021f 	bic.w	r2, r3, #31
			== part->size)
   244d2:	687b      	ldr	r3, [r7, #4]
   244d4:	685b      	ldr	r3, [r3, #4]
		&&
   244d6:	429a      	cmp	r2, r3
   244d8:	d107      	bne.n	244ea <mpu_partition_is_valid+0x30>
		((part->start &
   244da:	687b      	ldr	r3, [r7, #4]
   244dc:	681b      	ldr	r3, [r3, #0]
   244de:	f003 031f 	and.w	r3, r3, #31
		&&
   244e2:	2b00      	cmp	r3, #0
   244e4:	d101      	bne.n	244ea <mpu_partition_is_valid+0x30>
   244e6:	2301      	movs	r3, #1
   244e8:	e000      	b.n	244ec <mpu_partition_is_valid+0x32>
   244ea:	2300      	movs	r3, #0
	int partition_is_valid =
   244ec:	60fb      	str	r3, [r7, #12]
	return partition_is_valid;
   244ee:	68fb      	ldr	r3, [r7, #12]
}
   244f0:	4618      	mov	r0, r3
   244f2:	3714      	adds	r7, #20
   244f4:	46bd      	mov	sp, r7
   244f6:	bc80      	pop	{r7}
   244f8:	4770      	bx	lr

000244fa <get_region_index>:
{
   244fa:	b580      	push	{r7, lr}
   244fc:	b084      	sub	sp, #16
   244fe:	af00      	add	r7, sp, #0
   24500:	6078      	str	r0, [r7, #4]
   24502:	6039      	str	r1, [r7, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   24504:	6878      	ldr	r0, [r7, #4]
   24506:	f7ff ff9a 	bl	2443e <arm_cmse_mpu_region_get>
   2450a:	4603      	mov	r3, r0
   2450c:	60fb      	str	r3, [r7, #12]
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   2450e:	687a      	ldr	r2, [r7, #4]
   24510:	683b      	ldr	r3, [r7, #0]
   24512:	4413      	add	r3, r2
   24514:	3b01      	subs	r3, #1
   24516:	4618      	mov	r0, r3
   24518:	f7ff ff91 	bl	2443e <arm_cmse_mpu_region_get>
   2451c:	4603      	mov	r3, r0
   2451e:	60bb      	str	r3, [r7, #8]
	if (region_start_addr == region_end_addr) {
   24520:	68fa      	ldr	r2, [r7, #12]
   24522:	68bb      	ldr	r3, [r7, #8]
   24524:	429a      	cmp	r2, r3
   24526:	d101      	bne.n	2452c <get_region_index+0x32>
		return region_start_addr;
   24528:	68fb      	ldr	r3, [r7, #12]
   2452a:	e001      	b.n	24530 <get_region_index+0x36>
	return -EINVAL;
   2452c:	f06f 0315 	mvn.w	r3, #21
}
   24530:	4618      	mov	r0, r3
   24532:	3710      	adds	r7, #16
   24534:	46bd      	mov	sp, r7
   24536:	bd80      	pop	{r7, pc}

00024538 <get_region_attr_from_mpu_partition_info>:
{
   24538:	b480      	push	{r7}
   2453a:	b085      	sub	sp, #20
   2453c:	af00      	add	r7, sp, #0
   2453e:	60f8      	str	r0, [r7, #12]
   24540:	60b9      	str	r1, [r7, #8]
   24542:	607a      	str	r2, [r7, #4]
   24544:	603b      	str	r3, [r7, #0]
	p_attr->rbar = attr->rbar &
   24546:	68bb      	ldr	r3, [r7, #8]
   24548:	881b      	ldrh	r3, [r3, #0]
   2454a:	f003 031f 	and.w	r3, r3, #31
   2454e:	b2d9      	uxtb	r1, r3
   24550:	68fa      	ldr	r2, [r7, #12]
   24552:	7813      	ldrb	r3, [r2, #0]
   24554:	f361 0304 	bfi	r3, r1, #0, #5
   24558:	7013      	strb	r3, [r2, #0]
	p_attr->mair_idx = attr->mair_idx;
   2455a:	68bb      	ldr	r3, [r7, #8]
   2455c:	885b      	ldrh	r3, [r3, #2]
   2455e:	f003 0307 	and.w	r3, r3, #7
   24562:	b2d9      	uxtb	r1, r3
   24564:	68fa      	ldr	r2, [r7, #12]
   24566:	7813      	ldrb	r3, [r2, #0]
   24568:	f361 1347 	bfi	r3, r1, #5, #3
   2456c:	7013      	strb	r3, [r2, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   2456e:	687b      	ldr	r3, [r7, #4]
   24570:	f023 021f 	bic.w	r2, r3, #31
   24574:	683b      	ldr	r3, [r7, #0]
   24576:	4413      	add	r3, r2
   24578:	3b01      	subs	r3, #1
   2457a:	f023 021f 	bic.w	r2, r3, #31
   2457e:	68fb      	ldr	r3, [r7, #12]
   24580:	605a      	str	r2, [r3, #4]
}
   24582:	bf00      	nop
   24584:	3714      	adds	r7, #20
   24586:	46bd      	mov	sp, r7
   24588:	bc80      	pop	{r7}
   2458a:	4770      	bx	lr

0002458c <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   2458c:	b480      	push	{r7}
   2458e:	b087      	sub	sp, #28
   24590:	af00      	add	r7, sp, #0
   24592:	60f8      	str	r0, [r7, #12]
   24594:	60b9      	str	r1, [r7, #8]
   24596:	607a      	str	r2, [r7, #4]
	char *dest = d;
   24598:	68fb      	ldr	r3, [r7, #12]
   2459a:	617b      	str	r3, [r7, #20]

	while ((n > 0) && *s != '\0') {
   2459c:	e00c      	b.n	245b8 <strncpy+0x2c>
		*d = *s;
   2459e:	68bb      	ldr	r3, [r7, #8]
   245a0:	781a      	ldrb	r2, [r3, #0]
   245a2:	68fb      	ldr	r3, [r7, #12]
   245a4:	701a      	strb	r2, [r3, #0]
		s++;
   245a6:	68bb      	ldr	r3, [r7, #8]
   245a8:	3301      	adds	r3, #1
   245aa:	60bb      	str	r3, [r7, #8]
		d++;
   245ac:	68fb      	ldr	r3, [r7, #12]
   245ae:	3301      	adds	r3, #1
   245b0:	60fb      	str	r3, [r7, #12]
		n--;
   245b2:	687b      	ldr	r3, [r7, #4]
   245b4:	3b01      	subs	r3, #1
   245b6:	607b      	str	r3, [r7, #4]
	while ((n > 0) && *s != '\0') {
   245b8:	687b      	ldr	r3, [r7, #4]
   245ba:	2b00      	cmp	r3, #0
   245bc:	d00d      	beq.n	245da <strncpy+0x4e>
   245be:	68bb      	ldr	r3, [r7, #8]
   245c0:	781b      	ldrb	r3, [r3, #0]
   245c2:	2b00      	cmp	r3, #0
   245c4:	d1eb      	bne.n	2459e <strncpy+0x12>
	}

	while (n > 0) {
   245c6:	e008      	b.n	245da <strncpy+0x4e>
		*d = '\0';
   245c8:	68fb      	ldr	r3, [r7, #12]
   245ca:	2200      	movs	r2, #0
   245cc:	701a      	strb	r2, [r3, #0]
		d++;
   245ce:	68fb      	ldr	r3, [r7, #12]
   245d0:	3301      	adds	r3, #1
   245d2:	60fb      	str	r3, [r7, #12]
		n--;
   245d4:	687b      	ldr	r3, [r7, #4]
   245d6:	3b01      	subs	r3, #1
   245d8:	607b      	str	r3, [r7, #4]
	while (n > 0) {
   245da:	687b      	ldr	r3, [r7, #4]
   245dc:	2b00      	cmp	r3, #0
   245de:	d1f3      	bne.n	245c8 <strncpy+0x3c>
	}

	return dest;
   245e0:	697b      	ldr	r3, [r7, #20]
}
   245e2:	4618      	mov	r0, r3
   245e4:	371c      	adds	r7, #28
   245e6:	46bd      	mov	sp, r7
   245e8:	bc80      	pop	{r7}
   245ea:	4770      	bx	lr

000245ec <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   245ec:	b480      	push	{r7}
   245ee:	b085      	sub	sp, #20
   245f0:	af00      	add	r7, sp, #0
   245f2:	6078      	str	r0, [r7, #4]
	size_t n = 0;
   245f4:	2300      	movs	r3, #0
   245f6:	60fb      	str	r3, [r7, #12]

	while (*s != '\0') {
   245f8:	e005      	b.n	24606 <strlen+0x1a>
		s++;
   245fa:	687b      	ldr	r3, [r7, #4]
   245fc:	3301      	adds	r3, #1
   245fe:	607b      	str	r3, [r7, #4]
		n++;
   24600:	68fb      	ldr	r3, [r7, #12]
   24602:	3301      	adds	r3, #1
   24604:	60fb      	str	r3, [r7, #12]
	while (*s != '\0') {
   24606:	687b      	ldr	r3, [r7, #4]
   24608:	781b      	ldrb	r3, [r3, #0]
   2460a:	2b00      	cmp	r3, #0
   2460c:	d1f5      	bne.n	245fa <strlen+0xe>
	}

	return n;
   2460e:	68fb      	ldr	r3, [r7, #12]
}
   24610:	4618      	mov	r0, r3
   24612:	3714      	adds	r7, #20
   24614:	46bd      	mov	sp, r7
   24616:	bc80      	pop	{r7}
   24618:	4770      	bx	lr

0002461a <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   2461a:	b480      	push	{r7}
   2461c:	b085      	sub	sp, #20
   2461e:	af00      	add	r7, sp, #0
   24620:	6078      	str	r0, [r7, #4]
   24622:	6039      	str	r1, [r7, #0]
	size_t n = 0;
   24624:	2300      	movs	r3, #0
   24626:	60fb      	str	r3, [r7, #12]

	while (*s != '\0' && n < maxlen) {
   24628:	e005      	b.n	24636 <strnlen+0x1c>
		s++;
   2462a:	687b      	ldr	r3, [r7, #4]
   2462c:	3301      	adds	r3, #1
   2462e:	607b      	str	r3, [r7, #4]
		n++;
   24630:	68fb      	ldr	r3, [r7, #12]
   24632:	3301      	adds	r3, #1
   24634:	60fb      	str	r3, [r7, #12]
	while (*s != '\0' && n < maxlen) {
   24636:	687b      	ldr	r3, [r7, #4]
   24638:	781b      	ldrb	r3, [r3, #0]
   2463a:	2b00      	cmp	r3, #0
   2463c:	d003      	beq.n	24646 <strnlen+0x2c>
   2463e:	68fa      	ldr	r2, [r7, #12]
   24640:	683b      	ldr	r3, [r7, #0]
   24642:	429a      	cmp	r2, r3
   24644:	d3f1      	bcc.n	2462a <strnlen+0x10>
	}

	return n;
   24646:	68fb      	ldr	r3, [r7, #12]
}
   24648:	4618      	mov	r0, r3
   2464a:	3714      	adds	r7, #20
   2464c:	46bd      	mov	sp, r7
   2464e:	bc80      	pop	{r7}
   24650:	4770      	bx	lr

00024652 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
   24652:	b480      	push	{r7}
   24654:	b083      	sub	sp, #12
   24656:	af00      	add	r7, sp, #0
   24658:	6078      	str	r0, [r7, #4]
   2465a:	6039      	str	r1, [r7, #0]
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2465c:	e005      	b.n	2466a <strcmp+0x18>
		s1++;
   2465e:	687b      	ldr	r3, [r7, #4]
   24660:	3301      	adds	r3, #1
   24662:	607b      	str	r3, [r7, #4]
		s2++;
   24664:	683b      	ldr	r3, [r7, #0]
   24666:	3301      	adds	r3, #1
   24668:	603b      	str	r3, [r7, #0]
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2466a:	687b      	ldr	r3, [r7, #4]
   2466c:	781a      	ldrb	r2, [r3, #0]
   2466e:	683b      	ldr	r3, [r7, #0]
   24670:	781b      	ldrb	r3, [r3, #0]
   24672:	429a      	cmp	r2, r3
   24674:	d103      	bne.n	2467e <strcmp+0x2c>
   24676:	687b      	ldr	r3, [r7, #4]
   24678:	781b      	ldrb	r3, [r3, #0]
   2467a:	2b00      	cmp	r3, #0
   2467c:	d1ef      	bne.n	2465e <strcmp+0xc>
	}

	return *s1 - *s2;
   2467e:	687b      	ldr	r3, [r7, #4]
   24680:	781b      	ldrb	r3, [r3, #0]
   24682:	461a      	mov	r2, r3
   24684:	683b      	ldr	r3, [r7, #0]
   24686:	781b      	ldrb	r3, [r3, #0]
   24688:	1ad3      	subs	r3, r2, r3
}
   2468a:	4618      	mov	r0, r3
   2468c:	370c      	adds	r7, #12
   2468e:	46bd      	mov	sp, r7
   24690:	bc80      	pop	{r7}
   24692:	4770      	bx	lr

00024694 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   24694:	b480      	push	{r7}
   24696:	b087      	sub	sp, #28
   24698:	af00      	add	r7, sp, #0
   2469a:	60f8      	str	r0, [r7, #12]
   2469c:	60b9      	str	r1, [r7, #8]
   2469e:	607a      	str	r2, [r7, #4]
	const char *c1 = m1;
   246a0:	68fb      	ldr	r3, [r7, #12]
   246a2:	617b      	str	r3, [r7, #20]
	const char *c2 = m2;
   246a4:	68bb      	ldr	r3, [r7, #8]
   246a6:	613b      	str	r3, [r7, #16]

	if (!n) {
   246a8:	687b      	ldr	r3, [r7, #4]
   246aa:	2b00      	cmp	r3, #0
   246ac:	d107      	bne.n	246be <memcmp+0x2a>
		return 0;
   246ae:	2300      	movs	r3, #0
   246b0:	e017      	b.n	246e2 <memcmp+0x4e>
	}

	while ((--n > 0) && (*c1 == *c2)) {
		c1++;
   246b2:	697b      	ldr	r3, [r7, #20]
   246b4:	3301      	adds	r3, #1
   246b6:	617b      	str	r3, [r7, #20]
		c2++;
   246b8:	693b      	ldr	r3, [r7, #16]
   246ba:	3301      	adds	r3, #1
   246bc:	613b      	str	r3, [r7, #16]
	while ((--n > 0) && (*c1 == *c2)) {
   246be:	687b      	ldr	r3, [r7, #4]
   246c0:	3b01      	subs	r3, #1
   246c2:	607b      	str	r3, [r7, #4]
   246c4:	687b      	ldr	r3, [r7, #4]
   246c6:	2b00      	cmp	r3, #0
   246c8:	d005      	beq.n	246d6 <memcmp+0x42>
   246ca:	697b      	ldr	r3, [r7, #20]
   246cc:	781a      	ldrb	r2, [r3, #0]
   246ce:	693b      	ldr	r3, [r7, #16]
   246d0:	781b      	ldrb	r3, [r3, #0]
   246d2:	429a      	cmp	r2, r3
   246d4:	d0ed      	beq.n	246b2 <memcmp+0x1e>
	}

	return *c1 - *c2;
   246d6:	697b      	ldr	r3, [r7, #20]
   246d8:	781b      	ldrb	r3, [r3, #0]
   246da:	461a      	mov	r2, r3
   246dc:	693b      	ldr	r3, [r7, #16]
   246de:	781b      	ldrb	r3, [r3, #0]
   246e0:	1ad3      	subs	r3, r2, r3
}
   246e2:	4618      	mov	r0, r3
   246e4:	371c      	adds	r7, #28
   246e6:	46bd      	mov	sp, r7
   246e8:	bc80      	pop	{r7}
   246ea:	4770      	bx	lr

000246ec <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   246ec:	b480      	push	{r7}
   246ee:	b08b      	sub	sp, #44	; 0x2c
   246f0:	af00      	add	r7, sp, #0
   246f2:	60f8      	str	r0, [r7, #12]
   246f4:	60b9      	str	r1, [r7, #8]
   246f6:	607a      	str	r2, [r7, #4]
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
   246f8:	68fb      	ldr	r3, [r7, #12]
   246fa:	627b      	str	r3, [r7, #36]	; 0x24
	const unsigned char *s_byte = (const unsigned char *)s;
   246fc:	68bb      	ldr	r3, [r7, #8]
   246fe:	623b      	str	r3, [r7, #32]

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;
   24700:	2303      	movs	r3, #3
   24702:	617b      	str	r3, [r7, #20]

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   24704:	68fa      	ldr	r2, [r7, #12]
   24706:	6a3b      	ldr	r3, [r7, #32]
   24708:	405a      	eors	r2, r3
   2470a:	697b      	ldr	r3, [r7, #20]
   2470c:	4013      	ands	r3, r2
   2470e:	2b00      	cmp	r3, #0
   24710:	d138      	bne.n	24784 <memcpy+0x98>

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   24712:	e00f      	b.n	24734 <memcpy+0x48>
			if (n == 0) {
   24714:	687b      	ldr	r3, [r7, #4]
   24716:	2b00      	cmp	r3, #0
   24718:	d101      	bne.n	2471e <memcpy+0x32>
				return d;
   2471a:	68fb      	ldr	r3, [r7, #12]
   2471c:	e036      	b.n	2478c <memcpy+0xa0>
			}
			*(d_byte++) = *(s_byte++);
   2471e:	6a3a      	ldr	r2, [r7, #32]
   24720:	1c53      	adds	r3, r2, #1
   24722:	623b      	str	r3, [r7, #32]
   24724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   24726:	1c59      	adds	r1, r3, #1
   24728:	6279      	str	r1, [r7, #36]	; 0x24
   2472a:	7812      	ldrb	r2, [r2, #0]
   2472c:	701a      	strb	r2, [r3, #0]
			n--;
   2472e:	687b      	ldr	r3, [r7, #4]
   24730:	3b01      	subs	r3, #1
   24732:	607b      	str	r3, [r7, #4]
		while (((uintptr_t)d_byte) & mask) {
   24734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   24736:	697b      	ldr	r3, [r7, #20]
   24738:	4013      	ands	r3, r2
   2473a:	2b00      	cmp	r3, #0
   2473c:	d1ea      	bne.n	24714 <memcpy+0x28>
		}

		/* do word-sized copying as long as possible */

		mem_word_t *d_word = (mem_word_t *)d_byte;
   2473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   24740:	61fb      	str	r3, [r7, #28]
		const mem_word_t *s_word = (const mem_word_t *)s_byte;
   24742:	6a3b      	ldr	r3, [r7, #32]
   24744:	61bb      	str	r3, [r7, #24]

		while (n >= sizeof(mem_word_t)) {
   24746:	e00a      	b.n	2475e <memcpy+0x72>
			*(d_word++) = *(s_word++);
   24748:	69ba      	ldr	r2, [r7, #24]
   2474a:	1d13      	adds	r3, r2, #4
   2474c:	61bb      	str	r3, [r7, #24]
   2474e:	69fb      	ldr	r3, [r7, #28]
   24750:	1d19      	adds	r1, r3, #4
   24752:	61f9      	str	r1, [r7, #28]
   24754:	6812      	ldr	r2, [r2, #0]
   24756:	601a      	str	r2, [r3, #0]
			n -= sizeof(mem_word_t);
   24758:	687b      	ldr	r3, [r7, #4]
   2475a:	3b04      	subs	r3, #4
   2475c:	607b      	str	r3, [r7, #4]
		while (n >= sizeof(mem_word_t)) {
   2475e:	687b      	ldr	r3, [r7, #4]
   24760:	2b03      	cmp	r3, #3
   24762:	d8f1      	bhi.n	24748 <memcpy+0x5c>
		}

		d_byte = (unsigned char *)d_word;
   24764:	69fb      	ldr	r3, [r7, #28]
   24766:	627b      	str	r3, [r7, #36]	; 0x24
		s_byte = (unsigned char *)s_word;
   24768:	69bb      	ldr	r3, [r7, #24]
   2476a:	623b      	str	r3, [r7, #32]
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   2476c:	e00a      	b.n	24784 <memcpy+0x98>
		*(d_byte++) = *(s_byte++);
   2476e:	6a3a      	ldr	r2, [r7, #32]
   24770:	1c53      	adds	r3, r2, #1
   24772:	623b      	str	r3, [r7, #32]
   24774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   24776:	1c59      	adds	r1, r3, #1
   24778:	6279      	str	r1, [r7, #36]	; 0x24
   2477a:	7812      	ldrb	r2, [r2, #0]
   2477c:	701a      	strb	r2, [r3, #0]
		n--;
   2477e:	687b      	ldr	r3, [r7, #4]
   24780:	3b01      	subs	r3, #1
   24782:	607b      	str	r3, [r7, #4]
	while (n > 0) {
   24784:	687b      	ldr	r3, [r7, #4]
   24786:	2b00      	cmp	r3, #0
   24788:	d1f1      	bne.n	2476e <memcpy+0x82>
	}

	return d;
   2478a:	68fb      	ldr	r3, [r7, #12]
}
   2478c:	4618      	mov	r0, r3
   2478e:	372c      	adds	r7, #44	; 0x2c
   24790:	46bd      	mov	sp, r7
   24792:	bc80      	pop	{r7}
   24794:	4770      	bx	lr

00024796 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   24796:	b480      	push	{r7}
   24798:	b089      	sub	sp, #36	; 0x24
   2479a:	af00      	add	r7, sp, #0
   2479c:	60f8      	str	r0, [r7, #12]
   2479e:	60b9      	str	r1, [r7, #8]
   247a0:	607a      	str	r2, [r7, #4]
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   247a2:	68fb      	ldr	r3, [r7, #12]
   247a4:	61fb      	str	r3, [r7, #28]
	unsigned char c_byte = (unsigned char)c;
   247a6:	68bb      	ldr	r3, [r7, #8]
   247a8:	75fb      	strb	r3, [r7, #23]

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   247aa:	e00c      	b.n	247c6 <memset+0x30>
		if (n == 0) {
   247ac:	687b      	ldr	r3, [r7, #4]
   247ae:	2b00      	cmp	r3, #0
   247b0:	d101      	bne.n	247b6 <memset+0x20>
			return buf;
   247b2:	68fb      	ldr	r3, [r7, #12]
   247b4:	e035      	b.n	24822 <memset+0x8c>
		}
		*(d_byte++) = c_byte;
   247b6:	69fb      	ldr	r3, [r7, #28]
   247b8:	1c5a      	adds	r2, r3, #1
   247ba:	61fa      	str	r2, [r7, #28]
   247bc:	7dfa      	ldrb	r2, [r7, #23]
   247be:	701a      	strb	r2, [r3, #0]
		n--;
   247c0:	687b      	ldr	r3, [r7, #4]
   247c2:	3b01      	subs	r3, #1
   247c4:	607b      	str	r3, [r7, #4]
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   247c6:	69fb      	ldr	r3, [r7, #28]
   247c8:	f003 0303 	and.w	r3, r3, #3
   247cc:	2b00      	cmp	r3, #0
   247ce:	d1ed      	bne.n	247ac <memset+0x16>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
   247d0:	69fb      	ldr	r3, [r7, #28]
   247d2:	61bb      	str	r3, [r7, #24]
	mem_word_t c_word = (mem_word_t)c_byte;
   247d4:	7dfb      	ldrb	r3, [r7, #23]
   247d6:	613b      	str	r3, [r7, #16]

	c_word |= c_word << 8;
   247d8:	693b      	ldr	r3, [r7, #16]
   247da:	021b      	lsls	r3, r3, #8
   247dc:	693a      	ldr	r2, [r7, #16]
   247de:	4313      	orrs	r3, r2
   247e0:	613b      	str	r3, [r7, #16]
	c_word |= c_word << 16;
   247e2:	693b      	ldr	r3, [r7, #16]
   247e4:	041b      	lsls	r3, r3, #16
   247e6:	693a      	ldr	r2, [r7, #16]
   247e8:	4313      	orrs	r3, r2
   247ea:	613b      	str	r3, [r7, #16]
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   247ec:	e007      	b.n	247fe <memset+0x68>
		*(d_word++) = c_word;
   247ee:	69bb      	ldr	r3, [r7, #24]
   247f0:	1d1a      	adds	r2, r3, #4
   247f2:	61ba      	str	r2, [r7, #24]
   247f4:	693a      	ldr	r2, [r7, #16]
   247f6:	601a      	str	r2, [r3, #0]
		n -= sizeof(mem_word_t);
   247f8:	687b      	ldr	r3, [r7, #4]
   247fa:	3b04      	subs	r3, #4
   247fc:	607b      	str	r3, [r7, #4]
	while (n >= sizeof(mem_word_t)) {
   247fe:	687b      	ldr	r3, [r7, #4]
   24800:	2b03      	cmp	r3, #3
   24802:	d8f4      	bhi.n	247ee <memset+0x58>
	}

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
   24804:	69bb      	ldr	r3, [r7, #24]
   24806:	61fb      	str	r3, [r7, #28]
#endif

	while (n > 0) {
   24808:	e007      	b.n	2481a <memset+0x84>
		*(d_byte++) = c_byte;
   2480a:	69fb      	ldr	r3, [r7, #28]
   2480c:	1c5a      	adds	r2, r3, #1
   2480e:	61fa      	str	r2, [r7, #28]
   24810:	7dfa      	ldrb	r2, [r7, #23]
   24812:	701a      	strb	r2, [r3, #0]
		n--;
   24814:	687b      	ldr	r3, [r7, #4]
   24816:	3b01      	subs	r3, #1
   24818:	607b      	str	r3, [r7, #4]
	while (n > 0) {
   2481a:	687b      	ldr	r3, [r7, #4]
   2481c:	2b00      	cmp	r3, #0
   2481e:	d1f4      	bne.n	2480a <memset+0x74>
	}

	return buf;
   24820:	68fb      	ldr	r3, [r7, #12]
}
   24822:	4618      	mov	r0, r3
   24824:	3724      	adds	r7, #36	; 0x24
   24826:	46bd      	mov	sp, r7
   24828:	bc80      	pop	{r7}
   2482a:	4770      	bx	lr

0002482c <_stdout_hook_default>:
{
   2482c:	b480      	push	{r7}
   2482e:	b083      	sub	sp, #12
   24830:	af00      	add	r7, sp, #0
   24832:	6078      	str	r0, [r7, #4]
	return EOF;
   24834:	f04f 33ff 	mov.w	r3, #4294967295
}
   24838:	4618      	mov	r0, r3
   2483a:	370c      	adds	r7, #12
   2483c:	46bd      	mov	sp, r7
   2483e:	bc80      	pop	{r7}
   24840:	4770      	bx	lr

00024842 <z_snode_next_peek>:
{
   24842:	b480      	push	{r7}
   24844:	b083      	sub	sp, #12
   24846:	af00      	add	r7, sp, #0
   24848:	6078      	str	r0, [r7, #4]
	return node->next;
   2484a:	687b      	ldr	r3, [r7, #4]
   2484c:	681b      	ldr	r3, [r3, #0]
}
   2484e:	4618      	mov	r0, r3
   24850:	370c      	adds	r7, #12
   24852:	46bd      	mov	sp, r7
   24854:	bc80      	pop	{r7}
   24856:	4770      	bx	lr

00024858 <z_snode_next_set>:
{
   24858:	b480      	push	{r7}
   2485a:	b083      	sub	sp, #12
   2485c:	af00      	add	r7, sp, #0
   2485e:	6078      	str	r0, [r7, #4]
   24860:	6039      	str	r1, [r7, #0]
	parent->next = child;
   24862:	687b      	ldr	r3, [r7, #4]
   24864:	683a      	ldr	r2, [r7, #0]
   24866:	601a      	str	r2, [r3, #0]
}
   24868:	bf00      	nop
   2486a:	370c      	adds	r7, #12
   2486c:	46bd      	mov	sp, r7
   2486e:	bc80      	pop	{r7}
   24870:	4770      	bx	lr

00024872 <z_slist_head_set>:
{
   24872:	b480      	push	{r7}
   24874:	b083      	sub	sp, #12
   24876:	af00      	add	r7, sp, #0
   24878:	6078      	str	r0, [r7, #4]
   2487a:	6039      	str	r1, [r7, #0]
	list->head = node;
   2487c:	687b      	ldr	r3, [r7, #4]
   2487e:	683a      	ldr	r2, [r7, #0]
   24880:	601a      	str	r2, [r3, #0]
}
   24882:	bf00      	nop
   24884:	370c      	adds	r7, #12
   24886:	46bd      	mov	sp, r7
   24888:	bc80      	pop	{r7}
   2488a:	4770      	bx	lr

0002488c <z_slist_tail_set>:
{
   2488c:	b480      	push	{r7}
   2488e:	b083      	sub	sp, #12
   24890:	af00      	add	r7, sp, #0
   24892:	6078      	str	r0, [r7, #4]
   24894:	6039      	str	r1, [r7, #0]
	list->tail = node;
   24896:	687b      	ldr	r3, [r7, #4]
   24898:	683a      	ldr	r2, [r7, #0]
   2489a:	605a      	str	r2, [r3, #4]
}
   2489c:	bf00      	nop
   2489e:	370c      	adds	r7, #12
   248a0:	46bd      	mov	sp, r7
   248a2:	bc80      	pop	{r7}
   248a4:	4770      	bx	lr

000248a6 <sys_slist_peek_head>:
{
   248a6:	b480      	push	{r7}
   248a8:	b083      	sub	sp, #12
   248aa:	af00      	add	r7, sp, #0
   248ac:	6078      	str	r0, [r7, #4]
	return list->head;
   248ae:	687b      	ldr	r3, [r7, #4]
   248b0:	681b      	ldr	r3, [r3, #0]
}
   248b2:	4618      	mov	r0, r3
   248b4:	370c      	adds	r7, #12
   248b6:	46bd      	mov	sp, r7
   248b8:	bc80      	pop	{r7}
   248ba:	4770      	bx	lr

000248bc <sys_slist_peek_tail>:
{
   248bc:	b480      	push	{r7}
   248be:	b083      	sub	sp, #12
   248c0:	af00      	add	r7, sp, #0
   248c2:	6078      	str	r0, [r7, #4]
	return list->tail;
   248c4:	687b      	ldr	r3, [r7, #4]
   248c6:	685b      	ldr	r3, [r3, #4]
}
   248c8:	4618      	mov	r0, r3
   248ca:	370c      	adds	r7, #12
   248cc:	46bd      	mov	sp, r7
   248ce:	bc80      	pop	{r7}
   248d0:	4770      	bx	lr

000248d2 <sys_slist_is_empty>:
Z_GENLIST_IS_EMPTY(slist)
   248d2:	b580      	push	{r7, lr}
   248d4:	b082      	sub	sp, #8
   248d6:	af00      	add	r7, sp, #0
   248d8:	6078      	str	r0, [r7, #4]
   248da:	6878      	ldr	r0, [r7, #4]
   248dc:	f7ff ffe3 	bl	248a6 <sys_slist_peek_head>
   248e0:	4603      	mov	r3, r0
   248e2:	2b00      	cmp	r3, #0
   248e4:	bf0c      	ite	eq
   248e6:	2301      	moveq	r3, #1
   248e8:	2300      	movne	r3, #0
   248ea:	b2db      	uxtb	r3, r3
   248ec:	4618      	mov	r0, r3
   248ee:	3708      	adds	r7, #8
   248f0:	46bd      	mov	sp, r7
   248f2:	bd80      	pop	{r7, pc}

000248f4 <sys_slist_peek_next_no_check>:
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   248f4:	b580      	push	{r7, lr}
   248f6:	b082      	sub	sp, #8
   248f8:	af00      	add	r7, sp, #0
   248fa:	6078      	str	r0, [r7, #4]
   248fc:	6878      	ldr	r0, [r7, #4]
   248fe:	f7ff ffa0 	bl	24842 <z_snode_next_peek>
   24902:	4603      	mov	r3, r0
   24904:	4618      	mov	r0, r3
   24906:	3708      	adds	r7, #8
   24908:	46bd      	mov	sp, r7
   2490a:	bd80      	pop	{r7, pc}

0002490c <sys_slist_peek_next>:
Z_GENLIST_PEEK_NEXT(slist, snode)
   2490c:	b580      	push	{r7, lr}
   2490e:	b082      	sub	sp, #8
   24910:	af00      	add	r7, sp, #0
   24912:	6078      	str	r0, [r7, #4]
   24914:	687b      	ldr	r3, [r7, #4]
   24916:	2b00      	cmp	r3, #0
   24918:	d004      	beq.n	24924 <sys_slist_peek_next+0x18>
   2491a:	6878      	ldr	r0, [r7, #4]
   2491c:	f7ff ffea 	bl	248f4 <sys_slist_peek_next_no_check>
   24920:	4603      	mov	r3, r0
   24922:	e000      	b.n	24926 <sys_slist_peek_next+0x1a>
   24924:	2300      	movs	r3, #0
   24926:	4618      	mov	r0, r3
   24928:	3708      	adds	r7, #8
   2492a:	46bd      	mov	sp, r7
   2492c:	bd80      	pop	{r7, pc}

0002492e <sys_slist_prepend>:
Z_GENLIST_PREPEND(slist, snode)
   2492e:	b580      	push	{r7, lr}
   24930:	b082      	sub	sp, #8
   24932:	af00      	add	r7, sp, #0
   24934:	6078      	str	r0, [r7, #4]
   24936:	6039      	str	r1, [r7, #0]
   24938:	6878      	ldr	r0, [r7, #4]
   2493a:	f7ff ffb4 	bl	248a6 <sys_slist_peek_head>
   2493e:	4603      	mov	r3, r0
   24940:	4619      	mov	r1, r3
   24942:	6838      	ldr	r0, [r7, #0]
   24944:	f7ff ff88 	bl	24858 <z_snode_next_set>
   24948:	6839      	ldr	r1, [r7, #0]
   2494a:	6878      	ldr	r0, [r7, #4]
   2494c:	f7ff ff91 	bl	24872 <z_slist_head_set>
   24950:	6878      	ldr	r0, [r7, #4]
   24952:	f7ff ffb3 	bl	248bc <sys_slist_peek_tail>
   24956:	4603      	mov	r3, r0
   24958:	2b00      	cmp	r3, #0
   2495a:	d107      	bne.n	2496c <sys_slist_prepend+0x3e>
   2495c:	6878      	ldr	r0, [r7, #4]
   2495e:	f7ff ffa2 	bl	248a6 <sys_slist_peek_head>
   24962:	4603      	mov	r3, r0
   24964:	4619      	mov	r1, r3
   24966:	6878      	ldr	r0, [r7, #4]
   24968:	f7ff ff90 	bl	2488c <z_slist_tail_set>
   2496c:	bf00      	nop
   2496e:	3708      	adds	r7, #8
   24970:	46bd      	mov	sp, r7
   24972:	bd80      	pop	{r7, pc}

00024974 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   24974:	b580      	push	{r7, lr}
   24976:	b084      	sub	sp, #16
   24978:	af00      	add	r7, sp, #0
   2497a:	60f8      	str	r0, [r7, #12]
   2497c:	60b9      	str	r1, [r7, #8]
   2497e:	607a      	str	r2, [r7, #4]
   24980:	68bb      	ldr	r3, [r7, #8]
   24982:	2b00      	cmp	r3, #0
   24984:	d117      	bne.n	249b6 <sys_slist_remove+0x42>
   24986:	6878      	ldr	r0, [r7, #4]
   24988:	f7ff ff5b 	bl	24842 <z_snode_next_peek>
   2498c:	4603      	mov	r3, r0
   2498e:	4619      	mov	r1, r3
   24990:	68f8      	ldr	r0, [r7, #12]
   24992:	f7ff ff6e 	bl	24872 <z_slist_head_set>
   24996:	68f8      	ldr	r0, [r7, #12]
   24998:	f7ff ff90 	bl	248bc <sys_slist_peek_tail>
   2499c:	4602      	mov	r2, r0
   2499e:	687b      	ldr	r3, [r7, #4]
   249a0:	4293      	cmp	r3, r2
   249a2:	d11b      	bne.n	249dc <sys_slist_remove+0x68>
   249a4:	68f8      	ldr	r0, [r7, #12]
   249a6:	f7ff ff7e 	bl	248a6 <sys_slist_peek_head>
   249aa:	4603      	mov	r3, r0
   249ac:	4619      	mov	r1, r3
   249ae:	68f8      	ldr	r0, [r7, #12]
   249b0:	f7ff ff6c 	bl	2488c <z_slist_tail_set>
   249b4:	e012      	b.n	249dc <sys_slist_remove+0x68>
   249b6:	6878      	ldr	r0, [r7, #4]
   249b8:	f7ff ff43 	bl	24842 <z_snode_next_peek>
   249bc:	4603      	mov	r3, r0
   249be:	4619      	mov	r1, r3
   249c0:	68b8      	ldr	r0, [r7, #8]
   249c2:	f7ff ff49 	bl	24858 <z_snode_next_set>
   249c6:	68f8      	ldr	r0, [r7, #12]
   249c8:	f7ff ff78 	bl	248bc <sys_slist_peek_tail>
   249cc:	4602      	mov	r2, r0
   249ce:	687b      	ldr	r3, [r7, #4]
   249d0:	4293      	cmp	r3, r2
   249d2:	d103      	bne.n	249dc <sys_slist_remove+0x68>
   249d4:	68b9      	ldr	r1, [r7, #8]
   249d6:	68f8      	ldr	r0, [r7, #12]
   249d8:	f7ff ff58 	bl	2488c <z_slist_tail_set>
   249dc:	2100      	movs	r1, #0
   249de:	6878      	ldr	r0, [r7, #4]
   249e0:	f7ff ff3a 	bl	24858 <z_snode_next_set>
   249e4:	bf00      	nop
   249e6:	3710      	adds	r7, #16
   249e8:	46bd      	mov	sp, r7
   249ea:	bd80      	pop	{r7, pc}

000249ec <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   249ec:	b580      	push	{r7, lr}
   249ee:	b084      	sub	sp, #16
   249f0:	af00      	add	r7, sp, #0
   249f2:	6078      	str	r0, [r7, #4]
   249f4:	6039      	str	r1, [r7, #0]
   249f6:	2300      	movs	r3, #0
   249f8:	60fb      	str	r3, [r7, #12]
   249fa:	6878      	ldr	r0, [r7, #4]
   249fc:	f7ff ff53 	bl	248a6 <sys_slist_peek_head>
   24a00:	60b8      	str	r0, [r7, #8]
   24a02:	e010      	b.n	24a26 <sys_slist_find_and_remove+0x3a>
   24a04:	68ba      	ldr	r2, [r7, #8]
   24a06:	683b      	ldr	r3, [r7, #0]
   24a08:	429a      	cmp	r2, r3
   24a0a:	d106      	bne.n	24a1a <sys_slist_find_and_remove+0x2e>
   24a0c:	683a      	ldr	r2, [r7, #0]
   24a0e:	68f9      	ldr	r1, [r7, #12]
   24a10:	6878      	ldr	r0, [r7, #4]
   24a12:	f7ff ffaf 	bl	24974 <sys_slist_remove>
   24a16:	2301      	movs	r3, #1
   24a18:	e009      	b.n	24a2e <sys_slist_find_and_remove+0x42>
   24a1a:	68bb      	ldr	r3, [r7, #8]
   24a1c:	60fb      	str	r3, [r7, #12]
   24a1e:	68b8      	ldr	r0, [r7, #8]
   24a20:	f7ff ff74 	bl	2490c <sys_slist_peek_next>
   24a24:	60b8      	str	r0, [r7, #8]
   24a26:	68bb      	ldr	r3, [r7, #8]
   24a28:	2b00      	cmp	r3, #0
   24a2a:	d1eb      	bne.n	24a04 <sys_slist_find_and_remove+0x18>
   24a2c:	2300      	movs	r3, #0
   24a2e:	4618      	mov	r0, r3
   24a30:	3710      	adds	r7, #16
   24a32:	46bd      	mov	sp, r7
   24a34:	bd80      	pop	{r7, pc}

00024a36 <nrf_event_readback>:
{
   24a36:	b480      	push	{r7}
   24a38:	b083      	sub	sp, #12
   24a3a:	af00      	add	r7, sp, #0
   24a3c:	6078      	str	r0, [r7, #4]
    (void)*((volatile uint32_t *)(p_event_reg));
   24a3e:	687b      	ldr	r3, [r7, #4]
   24a40:	681b      	ldr	r3, [r3, #0]
}
   24a42:	bf00      	nop
   24a44:	370c      	adds	r7, #12
   24a46:	46bd      	mov	sp, r7
   24a48:	bc80      	pop	{r7}
   24a4a:	4770      	bx	lr

00024a4c <nrf_gpio_cfg>:
    nrf_gpio_pin_dir_t   dir,
    nrf_gpio_pin_input_t input,
    nrf_gpio_pin_pull_t  pull,
    nrf_gpio_pin_drive_t drive,
    nrf_gpio_pin_sense_t sense)
{
   24a4c:	b580      	push	{r7, lr}
   24a4e:	b084      	sub	sp, #16
   24a50:	af00      	add	r7, sp, #0
   24a52:	6078      	str	r0, [r7, #4]
   24a54:	4608      	mov	r0, r1
   24a56:	4611      	mov	r1, r2
   24a58:	461a      	mov	r2, r3
   24a5a:	4603      	mov	r3, r0
   24a5c:	70fb      	strb	r3, [r7, #3]
   24a5e:	460b      	mov	r3, r1
   24a60:	70bb      	strb	r3, [r7, #2]
   24a62:	4613      	mov	r3, r2
   24a64:	707b      	strb	r3, [r7, #1]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24a66:	1d3b      	adds	r3, r7, #4
   24a68:	4618      	mov	r0, r3
   24a6a:	f7f3 fc03 	bl	18274 <nrf_gpio_pin_port_decode>
   24a6e:	60f8      	str	r0, [r7, #12]

#if defined(GPIO_PIN_CNF_MCUSEL_Msk)
    /* Preserve MCUSEL setting. */
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
#else
    uint32_t cnf = 0;
   24a70:	2300      	movs	r3, #0
   24a72:	60bb      	str	r3, [r7, #8]
#endif
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   24a74:	78fa      	ldrb	r2, [r7, #3]
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   24a76:	78bb      	ldrb	r3, [r7, #2]
   24a78:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   24a7a:	431a      	orrs	r2, r3
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   24a7c:	787b      	ldrb	r3, [r7, #1]
   24a7e:	009b      	lsls	r3, r3, #2
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   24a80:	431a      	orrs	r2, r3
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   24a82:	7e3b      	ldrb	r3, [r7, #24]
   24a84:	021b      	lsls	r3, r3, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   24a86:	431a      	orrs	r2, r3
           ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);
   24a88:	7f3b      	ldrb	r3, [r7, #28]
   24a8a:	041b      	lsls	r3, r3, #16
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   24a8c:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   24a8e:	68ba      	ldr	r2, [r7, #8]
   24a90:	4313      	orrs	r3, r2
   24a92:	60bb      	str	r3, [r7, #8]

    reg->PIN_CNF[pin_number] = cnf;
   24a94:	687a      	ldr	r2, [r7, #4]
   24a96:	68fb      	ldr	r3, [r7, #12]
   24a98:	3280      	adds	r2, #128	; 0x80
   24a9a:	68b9      	ldr	r1, [r7, #8]
   24a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   24aa0:	bf00      	nop
   24aa2:	3710      	adds	r7, #16
   24aa4:	46bd      	mov	sp, r7
   24aa6:	bd80      	pop	{r7, pc}

00024aa8 <nrf_gpio_cfg_sense_set>:
}


NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
   24aa8:	b580      	push	{r7, lr}
   24aaa:	b084      	sub	sp, #16
   24aac:	af00      	add	r7, sp, #0
   24aae:	6078      	str	r0, [r7, #4]
   24ab0:	460b      	mov	r3, r1
   24ab2:	70fb      	strb	r3, [r7, #3]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24ab4:	1d3b      	adds	r3, r7, #4
   24ab6:	4618      	mov	r0, r3
   24ab8:	f7f3 fbdc 	bl	18274 <nrf_gpio_pin_port_decode>
   24abc:	60f8      	str	r0, [r7, #12]
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   24abe:	687a      	ldr	r2, [r7, #4]
   24ac0:	68fb      	ldr	r3, [r7, #12]
   24ac2:	3280      	adds	r2, #128	; 0x80
   24ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   24ac8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   24acc:	60bb      	str	r3, [r7, #8]

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   24ace:	78fb      	ldrb	r3, [r7, #3]
   24ad0:	041b      	lsls	r3, r3, #16
   24ad2:	4619      	mov	r1, r3
   24ad4:	687a      	ldr	r2, [r7, #4]
   24ad6:	68bb      	ldr	r3, [r7, #8]
   24ad8:	4319      	orrs	r1, r3
   24ada:	68fb      	ldr	r3, [r7, #12]
   24adc:	3280      	adds	r2, #128	; 0x80
   24ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   24ae2:	bf00      	nop
   24ae4:	3710      	adds	r7, #16
   24ae6:	46bd      	mov	sp, r7
   24ae8:	bd80      	pop	{r7, pc}

00024aea <nrf_gpio_pin_sense_get>:
    return ((nrf_gpio_port_out_read(reg) >> pin_number) & 1UL);
}


NRF_STATIC_INLINE nrf_gpio_pin_sense_t nrf_gpio_pin_sense_get(uint32_t pin_number)
{
   24aea:	b580      	push	{r7, lr}
   24aec:	b084      	sub	sp, #16
   24aee:	af00      	add	r7, sp, #0
   24af0:	6078      	str	r0, [r7, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24af2:	1d3b      	adds	r3, r7, #4
   24af4:	4618      	mov	r0, r3
   24af6:	f7f3 fbbd 	bl	18274 <nrf_gpio_pin_port_decode>
   24afa:	60f8      	str	r0, [r7, #12]

    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   24afc:	687a      	ldr	r2, [r7, #4]
   24afe:	68fb      	ldr	r3, [r7, #12]
   24b00:	3280      	adds	r2, #128	; 0x80
   24b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   24b06:	0c1b      	lsrs	r3, r3, #16
   24b08:	f003 0303 	and.w	r3, r3, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   24b0c:	b2db      	uxtb	r3, r3
}
   24b0e:	4618      	mov	r0, r3
   24b10:	3710      	adds	r7, #16
   24b12:	46bd      	mov	sp, r7
   24b14:	bd80      	pop	{r7, pc}

00024b16 <nrf_gpio_pin_dir_get>:


NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
   24b16:	b580      	push	{r7, lr}
   24b18:	b084      	sub	sp, #16
   24b1a:	af00      	add	r7, sp, #0
   24b1c:	6078      	str	r0, [r7, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24b1e:	1d3b      	adds	r3, r7, #4
   24b20:	4618      	mov	r0, r3
   24b22:	f7f3 fba7 	bl	18274 <nrf_gpio_pin_port_decode>
   24b26:	60f8      	str	r0, [r7, #12]

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   24b28:	687a      	ldr	r2, [r7, #4]
   24b2a:	68fb      	ldr	r3, [r7, #12]
   24b2c:	3280      	adds	r2, #128	; 0x80
   24b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   24b32:	b2db      	uxtb	r3, r3
   24b34:	f003 0301 	and.w	r3, r3, #1
   24b38:	b2db      	uxtb	r3, r3
                                 GPIO_PIN_CNF_DIR_Msk) >> GPIO_PIN_CNF_DIR_Pos);
}
   24b3a:	4618      	mov	r0, r3
   24b3c:	3710      	adds	r7, #16
   24b3e:	46bd      	mov	sp, r7
   24b40:	bd80      	pop	{r7, pc}

00024b42 <nrf_gpio_port_in_read>:
    return p_reg->DIR;
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
   24b42:	b480      	push	{r7}
   24b44:	b083      	sub	sp, #12
   24b46:	af00      	add	r7, sp, #0
   24b48:	6078      	str	r0, [r7, #4]
    return p_reg->IN;
   24b4a:	687b      	ldr	r3, [r7, #4]
   24b4c:	691b      	ldr	r3, [r3, #16]
}
   24b4e:	4618      	mov	r0, r3
   24b50:	370c      	adds	r7, #12
   24b52:	46bd      	mov	sp, r7
   24b54:	bc80      	pop	{r7}
   24b56:	4770      	bx	lr

00024b58 <nrf_gpio_port_out_read>:


NRF_STATIC_INLINE uint32_t nrf_gpio_port_out_read(NRF_GPIO_Type const * p_reg)
{
   24b58:	b480      	push	{r7}
   24b5a:	b083      	sub	sp, #12
   24b5c:	af00      	add	r7, sp, #0
   24b5e:	6078      	str	r0, [r7, #4]
    return p_reg->OUT;
   24b60:	687b      	ldr	r3, [r7, #4]
   24b62:	685b      	ldr	r3, [r3, #4]
}
   24b64:	4618      	mov	r0, r3
   24b66:	370c      	adds	r7, #12
   24b68:	46bd      	mov	sp, r7
   24b6a:	bc80      	pop	{r7}
   24b6c:	4770      	bx	lr

00024b6e <nrf_gpio_port_out_write>:


NRF_STATIC_INLINE void nrf_gpio_port_out_write(NRF_GPIO_Type * p_reg, uint32_t value)
{
   24b6e:	b480      	push	{r7}
   24b70:	b083      	sub	sp, #12
   24b72:	af00      	add	r7, sp, #0
   24b74:	6078      	str	r0, [r7, #4]
   24b76:	6039      	str	r1, [r7, #0]
    p_reg->OUT = value;
   24b78:	687b      	ldr	r3, [r7, #4]
   24b7a:	683a      	ldr	r2, [r7, #0]
   24b7c:	605a      	str	r2, [r3, #4]
}
   24b7e:	bf00      	nop
   24b80:	370c      	adds	r7, #12
   24b82:	46bd      	mov	sp, r7
   24b84:	bc80      	pop	{r7}
   24b86:	4770      	bx	lr

00024b88 <nrf_gpio_port_out_set>:


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
   24b88:	b480      	push	{r7}
   24b8a:	b083      	sub	sp, #12
   24b8c:	af00      	add	r7, sp, #0
   24b8e:	6078      	str	r0, [r7, #4]
   24b90:	6039      	str	r1, [r7, #0]
    p_reg->OUTSET = set_mask;
   24b92:	687b      	ldr	r3, [r7, #4]
   24b94:	683a      	ldr	r2, [r7, #0]
   24b96:	609a      	str	r2, [r3, #8]
}
   24b98:	bf00      	nop
   24b9a:	370c      	adds	r7, #12
   24b9c:	46bd      	mov	sp, r7
   24b9e:	bc80      	pop	{r7}
   24ba0:	4770      	bx	lr

00024ba2 <nrf_gpio_port_out_clear>:


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
   24ba2:	b480      	push	{r7}
   24ba4:	b083      	sub	sp, #12
   24ba6:	af00      	add	r7, sp, #0
   24ba8:	6078      	str	r0, [r7, #4]
   24baa:	6039      	str	r1, [r7, #0]
    p_reg->OUTCLR = clr_mask;
   24bac:	687b      	ldr	r3, [r7, #4]
   24bae:	683a      	ldr	r2, [r7, #0]
   24bb0:	60da      	str	r2, [r3, #12]
}
   24bb2:	bf00      	nop
   24bb4:	370c      	adds	r7, #12
   24bb6:	46bd      	mov	sp, r7
   24bb8:	bc80      	pop	{r7}
   24bba:	4770      	bx	lr

00024bbc <nrf_gpio_pin_present_check>:
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
}
#endif

NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
   24bbc:	b480      	push	{r7}
   24bbe:	b085      	sub	sp, #20
   24bc0:	af00      	add	r7, sp, #0
   24bc2:	6078      	str	r0, [r7, #4]
    uint32_t port = pin_number >> 5;
   24bc4:	687b      	ldr	r3, [r7, #4]
   24bc6:	095b      	lsrs	r3, r3, #5
   24bc8:	60bb      	str	r3, [r7, #8]
    uint32_t mask = 0;
   24bca:	2300      	movs	r3, #0
   24bcc:	60fb      	str	r3, [r7, #12]

    switch (port)
   24bce:	68bb      	ldr	r3, [r7, #8]
   24bd0:	2b00      	cmp	r3, #0
   24bd2:	d103      	bne.n	24bdc <nrf_gpio_pin_present_check+0x20>
    {
#ifdef P0_FEATURE_PINS_PRESENT
        case 0:
            mask = P0_FEATURE_PINS_PRESENT;
   24bd4:	f04f 33ff 	mov.w	r3, #4294967295
   24bd8:	60fb      	str	r3, [r7, #12]
             * - P0.24 - Button 3
             * - P0.25 - Button 4
             */
            mask |= 0x03003800;
#endif // defined(NRF52820_XXAA) && defined(DEVELOP_IN_NRF52833)
            break;
   24bda:	bf00      	nop
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   24bdc:	687b      	ldr	r3, [r7, #4]
   24bde:	f003 031f 	and.w	r3, r3, #31
   24be2:	607b      	str	r3, [r7, #4]

    return (mask & (1UL << pin_number)) ? true : false;
   24be4:	68fa      	ldr	r2, [r7, #12]
   24be6:	687b      	ldr	r3, [r7, #4]
   24be8:	fa22 f303 	lsr.w	r3, r2, r3
   24bec:	f003 0301 	and.w	r3, r3, #1
   24bf0:	2b00      	cmp	r3, #0
   24bf2:	bf14      	ite	ne
   24bf4:	2301      	movne	r3, #1
   24bf6:	2300      	moveq	r3, #0
   24bf8:	b2db      	uxtb	r3, r3
}
   24bfa:	4618      	mov	r0, r3
   24bfc:	3714      	adds	r7, #20
   24bfe:	46bd      	mov	sp, r7
   24c00:	bc80      	pop	{r7}
   24c02:	4770      	bx	lr

00024c04 <nrf_gpio_pin_port_number_extract>:

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
   24c04:	b480      	push	{r7}
   24c06:	b085      	sub	sp, #20
   24c08:	af00      	add	r7, sp, #0
   24c0a:	6078      	str	r0, [r7, #4]
    uint32_t pin_number = *p_pin;
   24c0c:	687b      	ldr	r3, [r7, #4]
   24c0e:	681b      	ldr	r3, [r3, #0]
   24c10:	60fb      	str	r3, [r7, #12]
    *p_pin = pin_number & 0x1F;
   24c12:	68fb      	ldr	r3, [r7, #12]
   24c14:	f003 021f 	and.w	r2, r3, #31
   24c18:	687b      	ldr	r3, [r7, #4]
   24c1a:	601a      	str	r2, [r3, #0]

    return pin_number >> 5;
   24c1c:	68fb      	ldr	r3, [r7, #12]
   24c1e:	095b      	lsrs	r3, r3, #5
}
   24c20:	4618      	mov	r0, r3
   24c22:	3714      	adds	r7, #20
   24c24:	46bd      	mov	sp, r7
   24c26:	bc80      	pop	{r7}
   24c28:	4770      	bx	lr

00024c2a <nrf_gpiote_event_check>:
    return ((uint32_t)p_reg + task);
}

NRF_STATIC_INLINE bool nrf_gpiote_event_check(NRF_GPIOTE_Type const * p_reg,
                                              nrf_gpiote_event_t      event)
{
   24c2a:	b480      	push	{r7}
   24c2c:	b083      	sub	sp, #12
   24c2e:	af00      	add	r7, sp, #0
   24c30:	6078      	str	r0, [r7, #4]
   24c32:	460b      	mov	r3, r1
   24c34:	807b      	strh	r3, [r7, #2]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24c36:	887b      	ldrh	r3, [r7, #2]
   24c38:	687a      	ldr	r2, [r7, #4]
   24c3a:	4413      	add	r3, r2
   24c3c:	681b      	ldr	r3, [r3, #0]
   24c3e:	2b00      	cmp	r3, #0
   24c40:	bf14      	ite	ne
   24c42:	2301      	movne	r3, #1
   24c44:	2300      	moveq	r3, #0
   24c46:	b2db      	uxtb	r3, r3
}
   24c48:	4618      	mov	r0, r3
   24c4a:	370c      	adds	r7, #12
   24c4c:	46bd      	mov	sp, r7
   24c4e:	bc80      	pop	{r7}
   24c50:	4770      	bx	lr

00024c52 <nrf_gpiote_event_clear>:

NRF_STATIC_INLINE void nrf_gpiote_event_clear(NRF_GPIOTE_Type * p_reg, nrf_gpiote_event_t event)
{
   24c52:	b580      	push	{r7, lr}
   24c54:	b082      	sub	sp, #8
   24c56:	af00      	add	r7, sp, #0
   24c58:	6078      	str	r0, [r7, #4]
   24c5a:	460b      	mov	r3, r1
   24c5c:	807b      	strh	r3, [r7, #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   24c5e:	887b      	ldrh	r3, [r7, #2]
   24c60:	4619      	mov	r1, r3
   24c62:	6878      	ldr	r0, [r7, #4]
   24c64:	f000 f811 	bl	24c8a <nrf_gpiote_event_address_get>
   24c68:	4603      	mov	r3, r0
   24c6a:	461a      	mov	r2, r3
   24c6c:	2300      	movs	r3, #0
   24c6e:	6013      	str	r3, [r2, #0]
    nrf_event_readback((void *)nrf_gpiote_event_address_get(p_reg, event));
   24c70:	887b      	ldrh	r3, [r7, #2]
   24c72:	4619      	mov	r1, r3
   24c74:	6878      	ldr	r0, [r7, #4]
   24c76:	f000 f808 	bl	24c8a <nrf_gpiote_event_address_get>
   24c7a:	4603      	mov	r3, r0
   24c7c:	4618      	mov	r0, r3
   24c7e:	f7ff feda 	bl	24a36 <nrf_event_readback>
}
   24c82:	bf00      	nop
   24c84:	3708      	adds	r7, #8
   24c86:	46bd      	mov	sp, r7
   24c88:	bd80      	pop	{r7, pc}

00024c8a <nrf_gpiote_event_address_get>:

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_address_get(NRF_GPIOTE_Type const * p_reg,
                                                        nrf_gpiote_event_t      event)
{
   24c8a:	b480      	push	{r7}
   24c8c:	b083      	sub	sp, #12
   24c8e:	af00      	add	r7, sp, #0
   24c90:	6078      	str	r0, [r7, #4]
   24c92:	460b      	mov	r3, r1
   24c94:	807b      	strh	r3, [r7, #2]
    return ((uint32_t)p_reg + event);
   24c96:	887a      	ldrh	r2, [r7, #2]
   24c98:	687b      	ldr	r3, [r7, #4]
   24c9a:	4413      	add	r3, r2
}
   24c9c:	4618      	mov	r0, r3
   24c9e:	370c      	adds	r7, #12
   24ca0:	46bd      	mov	sp, r7
   24ca2:	bc80      	pop	{r7}
   24ca4:	4770      	bx	lr

00024ca6 <nrf_gpiote_int_enable>:

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
   24ca6:	b480      	push	{r7}
   24ca8:	b083      	sub	sp, #12
   24caa:	af00      	add	r7, sp, #0
   24cac:	6078      	str	r0, [r7, #4]
   24cae:	6039      	str	r1, [r7, #0]
    p_reg->INTENSET = mask;
   24cb0:	687b      	ldr	r3, [r7, #4]
   24cb2:	683a      	ldr	r2, [r7, #0]
   24cb4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   24cb8:	bf00      	nop
   24cba:	370c      	adds	r7, #12
   24cbc:	46bd      	mov	sp, r7
   24cbe:	bc80      	pop	{r7}
   24cc0:	4770      	bx	lr

00024cc2 <nrf_gpiote_int_disable>:

NRF_STATIC_INLINE void nrf_gpiote_int_disable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
   24cc2:	b480      	push	{r7}
   24cc4:	b083      	sub	sp, #12
   24cc6:	af00      	add	r7, sp, #0
   24cc8:	6078      	str	r0, [r7, #4]
   24cca:	6039      	str	r1, [r7, #0]
    p_reg->INTENCLR = mask;
   24ccc:	687b      	ldr	r3, [r7, #4]
   24cce:	683a      	ldr	r2, [r7, #0]
   24cd0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   24cd4:	bf00      	nop
   24cd6:	370c      	adds	r7, #12
   24cd8:	46bd      	mov	sp, r7
   24cda:	bc80      	pop	{r7}
   24cdc:	4770      	bx	lr

00024cde <nrf_gpiote_int_enable_check>:

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
   24cde:	b480      	push	{r7}
   24ce0:	b083      	sub	sp, #12
   24ce2:	af00      	add	r7, sp, #0
   24ce4:	6078      	str	r0, [r7, #4]
   24ce6:	6039      	str	r1, [r7, #0]
    return p_reg->INTENSET & mask;
   24ce8:	687b      	ldr	r3, [r7, #4]
   24cea:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   24cee:	683b      	ldr	r3, [r7, #0]
   24cf0:	4013      	ands	r3, r2
}
   24cf2:	4618      	mov	r0, r3
   24cf4:	370c      	adds	r7, #12
   24cf6:	46bd      	mov	sp, r7
   24cf8:	bc80      	pop	{r7}
   24cfa:	4770      	bx	lr

00024cfc <nrf_gpiote_event_enable>:
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
}
#endif // defined(DPPI_PRESENT)

NRF_STATIC_INLINE void nrf_gpiote_event_enable(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
   24cfc:	b480      	push	{r7}
   24cfe:	b083      	sub	sp, #12
   24d00:	af00      	add	r7, sp, #0
   24d02:	6078      	str	r0, [r7, #4]
   24d04:	6039      	str	r1, [r7, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   24d06:	687b      	ldr	r3, [r7, #4]
   24d08:	683a      	ldr	r2, [r7, #0]
   24d0a:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   24d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   24d12:	f043 0101 	orr.w	r1, r3, #1
   24d16:	687b      	ldr	r3, [r7, #4]
   24d18:	683a      	ldr	r2, [r7, #0]
   24d1a:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   24d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   24d22:	bf00      	nop
   24d24:	370c      	adds	r7, #12
   24d26:	46bd      	mov	sp, r7
   24d28:	bc80      	pop	{r7}
   24d2a:	4770      	bx	lr

00024d2c <nrf_gpiote_event_disable>:

NRF_STATIC_INLINE void nrf_gpiote_event_disable(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
   24d2c:	b480      	push	{r7}
   24d2e:	b083      	sub	sp, #12
   24d30:	af00      	add	r7, sp, #0
   24d32:	6078      	str	r0, [r7, #4]
   24d34:	6039      	str	r1, [r7, #0]
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   24d36:	687b      	ldr	r3, [r7, #4]
   24d38:	683a      	ldr	r2, [r7, #0]
   24d3a:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   24d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   24d42:	f023 0101 	bic.w	r1, r3, #1
   24d46:	687b      	ldr	r3, [r7, #4]
   24d48:	683a      	ldr	r2, [r7, #0]
   24d4a:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   24d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   24d52:	bf00      	nop
   24d54:	370c      	adds	r7, #12
   24d56:	46bd      	mov	sp, r7
   24d58:	bc80      	pop	{r7}
   24d5a:	4770      	bx	lr

00024d5c <nrf_gpiote_event_configure>:

NRF_STATIC_INLINE void nrf_gpiote_event_configure(NRF_GPIOTE_Type *     p_reg,
                                                  uint32_t              idx,
                                                  uint32_t              pin,
                                                  nrf_gpiote_polarity_t polarity)
{
   24d5c:	b480      	push	{r7}
   24d5e:	b085      	sub	sp, #20
   24d60:	af00      	add	r7, sp, #0
   24d62:	60f8      	str	r0, [r7, #12]
   24d64:	60b9      	str	r1, [r7, #8]
   24d66:	607a      	str	r2, [r7, #4]
   24d68:	70fb      	strb	r3, [r7, #3]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   24d6a:	68fb      	ldr	r3, [r7, #12]
   24d6c:	68ba      	ldr	r2, [r7, #8]
   24d6e:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   24d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   24d76:	f423 3347 	bic.w	r3, r3, #203776	; 0x31c00
   24d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
   24d7e:	68fa      	ldr	r2, [r7, #12]
   24d80:	68b9      	ldr	r1, [r7, #8]
   24d82:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   24d86:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   24d8a:	68fb      	ldr	r3, [r7, #12]
   24d8c:	68ba      	ldr	r2, [r7, #8]
   24d8e:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   24d92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   24d96:	687b      	ldr	r3, [r7, #4]
   24d98:	021b      	lsls	r3, r3, #8
   24d9a:	f403 51f8 	and.w	r1, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   24d9e:	78fb      	ldrb	r3, [r7, #3]
   24da0:	041b      	lsls	r3, r3, #16
   24da2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   24da6:	430b      	orrs	r3, r1
   24da8:	ea42 0103 	orr.w	r1, r2, r3
   24dac:	68fb      	ldr	r3, [r7, #12]
   24dae:	68ba      	ldr	r2, [r7, #8]
   24db0:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   24db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   24db8:	bf00      	nop
   24dba:	3714      	adds	r7, #20
   24dbc:	46bd      	mov	sp, r7
   24dbe:	bc80      	pop	{r7}
   24dc0:	4770      	bx	lr

00024dc2 <nrf_gpiote_event_pin_get>:

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
   24dc2:	b480      	push	{r7}
   24dc4:	b083      	sub	sp, #12
   24dc6:	af00      	add	r7, sp, #0
   24dc8:	6078      	str	r0, [r7, #4]
   24dca:	6039      	str	r1, [r7, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   24dcc:	687b      	ldr	r3, [r7, #4]
   24dce:	683a      	ldr	r2, [r7, #0]
   24dd0:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   24dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   24dd8:	0a1b      	lsrs	r3, r3, #8
   24dda:	f003 031f 	and.w	r3, r3, #31
}
   24dde:	4618      	mov	r0, r3
   24de0:	370c      	adds	r7, #12
   24de2:	46bd      	mov	sp, r7
   24de4:	bc80      	pop	{r7}
   24de6:	4770      	bx	lr

00024de8 <get_port_data>:
{
   24de8:	b480      	push	{r7}
   24dea:	b083      	sub	sp, #12
   24dec:	af00      	add	r7, sp, #0
   24dee:	6078      	str	r0, [r7, #4]
	return port->data;
   24df0:	687b      	ldr	r3, [r7, #4]
   24df2:	691b      	ldr	r3, [r3, #16]
}
   24df4:	4618      	mov	r0, r3
   24df6:	370c      	adds	r7, #12
   24df8:	46bd      	mov	sp, r7
   24dfa:	bc80      	pop	{r7}
   24dfc:	4770      	bx	lr

00024dfe <get_port_cfg>:
{
   24dfe:	b480      	push	{r7}
   24e00:	b083      	sub	sp, #12
   24e02:	af00      	add	r7, sp, #0
   24e04:	6078      	str	r0, [r7, #4]
	return port->config;
   24e06:	687b      	ldr	r3, [r7, #4]
   24e08:	685b      	ldr	r3, [r3, #4]
}
   24e0a:	4618      	mov	r0, r3
   24e0c:	370c      	adds	r7, #12
   24e0e:	46bd      	mov	sp, r7
   24e10:	bc80      	pop	{r7}
   24e12:	4770      	bx	lr

00024e14 <sense_for_pin>:
{
   24e14:	b480      	push	{r7}
   24e16:	b083      	sub	sp, #12
   24e18:	af00      	add	r7, sp, #0
   24e1a:	6078      	str	r0, [r7, #4]
   24e1c:	6039      	str	r1, [r7, #0]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   24e1e:	687b      	ldr	r3, [r7, #4]
   24e20:	691a      	ldr	r2, [r3, #16]
   24e22:	683b      	ldr	r3, [r7, #0]
   24e24:	fa22 f303 	lsr.w	r3, r2, r3
   24e28:	f003 0301 	and.w	r3, r3, #1
   24e2c:	2b00      	cmp	r3, #0
   24e2e:	d001      	beq.n	24e34 <sense_for_pin+0x20>
		return NRF_GPIO_PIN_SENSE_HIGH;
   24e30:	2302      	movs	r3, #2
   24e32:	e000      	b.n	24e36 <sense_for_pin+0x22>
	return NRF_GPIO_PIN_SENSE_LOW;
   24e34:	2303      	movs	r3, #3
}
   24e36:	4618      	mov	r0, r3
   24e38:	370c      	adds	r7, #12
   24e3a:	46bd      	mov	sp, r7
   24e3c:	bc80      	pop	{r7}
   24e3e:	4770      	bx	lr

00024e40 <gpiote_pin_int_cfg>:
{
   24e40:	b580      	push	{r7, lr}
   24e42:	b088      	sub	sp, #32
   24e44:	af00      	add	r7, sp, #0
   24e46:	6078      	str	r0, [r7, #4]
   24e48:	6039      	str	r1, [r7, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   24e4a:	6878      	ldr	r0, [r7, #4]
   24e4c:	f7ff ffcc 	bl	24de8 <get_port_data>
   24e50:	6178      	str	r0, [r7, #20]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   24e52:	6878      	ldr	r0, [r7, #4]
   24e54:	f7ff ffd3 	bl	24dfe <get_port_cfg>
   24e58:	6138      	str	r0, [r7, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   24e5a:	693b      	ldr	r3, [r7, #16]
   24e5c:	7a1b      	ldrb	r3, [r3, #8]
   24e5e:	015b      	lsls	r3, r3, #5
   24e60:	461a      	mov	r2, r3
   24e62:	683b      	ldr	r3, [r7, #0]
   24e64:	f003 031f 	and.w	r3, r3, #31
   24e68:	4313      	orrs	r3, r2
   24e6a:	60fb      	str	r3, [r7, #12]
	int res = 0;
   24e6c:	2300      	movs	r3, #0
   24e6e:	61bb      	str	r3, [r7, #24]
	gpiote_pin_cleanup(abs_pin);
   24e70:	68f8      	ldr	r0, [r7, #12]
   24e72:	f7f3 fb41 	bl	184f8 <gpiote_pin_cleanup>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   24e76:	2100      	movs	r1, #0
   24e78:	68f8      	ldr	r0, [r7, #12]
   24e7a:	f7ff fe15 	bl	24aa8 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   24e7e:	697b      	ldr	r3, [r7, #20]
   24e80:	68da      	ldr	r2, [r3, #12]
   24e82:	683b      	ldr	r3, [r7, #0]
   24e84:	fa22 f303 	lsr.w	r3, r2, r3
   24e88:	f003 0301 	and.w	r3, r3, #1
   24e8c:	2b00      	cmp	r3, #0
   24e8e:	d034      	beq.n	24efa <gpiote_pin_int_cfg+0xba>
		if (data->trig_edge & BIT(pin)) {
   24e90:	697b      	ldr	r3, [r7, #20]
   24e92:	695a      	ldr	r2, [r3, #20]
   24e94:	683b      	ldr	r3, [r7, #0]
   24e96:	fa22 f303 	lsr.w	r3, r2, r3
   24e9a:	f003 0301 	and.w	r3, r3, #1
   24e9e:	2b00      	cmp	r3, #0
   24ea0:	d020      	beq.n	24ee4 <gpiote_pin_int_cfg+0xa4>
				if (data->double_edge & BIT(pin)) {
   24ea2:	697b      	ldr	r3, [r7, #20]
   24ea4:	699a      	ldr	r2, [r3, #24]
   24ea6:	683b      	ldr	r3, [r7, #0]
   24ea8:	fa22 f303 	lsr.w	r3, r2, r3
   24eac:	f003 0301 	and.w	r3, r3, #1
   24eb0:	2b00      	cmp	r3, #0
   24eb2:	d002      	beq.n	24eba <gpiote_pin_int_cfg+0x7a>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   24eb4:	2303      	movs	r3, #3
   24eb6:	77fb      	strb	r3, [r7, #31]
   24eb8:	e00d      	b.n	24ed6 <gpiote_pin_int_cfg+0x96>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   24eba:	697b      	ldr	r3, [r7, #20]
   24ebc:	691a      	ldr	r2, [r3, #16]
   24ebe:	683b      	ldr	r3, [r7, #0]
   24ec0:	fa22 f303 	lsr.w	r3, r2, r3
   24ec4:	f003 0301 	and.w	r3, r3, #1
   24ec8:	2b00      	cmp	r3, #0
   24eca:	d002      	beq.n	24ed2 <gpiote_pin_int_cfg+0x92>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
   24ecc:	2301      	movs	r3, #1
   24ece:	77fb      	strb	r3, [r7, #31]
   24ed0:	e001      	b.n	24ed6 <gpiote_pin_int_cfg+0x96>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
   24ed2:	2302      	movs	r3, #2
   24ed4:	77fb      	strb	r3, [r7, #31]
				res = gpiote_channel_alloc(abs_pin, pol);
   24ed6:	7ffb      	ldrb	r3, [r7, #31]
   24ed8:	4619      	mov	r1, r3
   24eda:	68f8      	ldr	r0, [r7, #12]
   24edc:	f7f3 fad2 	bl	18484 <gpiote_channel_alloc>
   24ee0:	61b8      	str	r0, [r7, #24]
   24ee2:	e00a      	b.n	24efa <gpiote_pin_int_cfg+0xba>
			uint32_t sense = sense_for_pin(data, pin);
   24ee4:	6839      	ldr	r1, [r7, #0]
   24ee6:	6978      	ldr	r0, [r7, #20]
   24ee8:	f7ff ff94 	bl	24e14 <sense_for_pin>
   24eec:	60b8      	str	r0, [r7, #8]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   24eee:	68bb      	ldr	r3, [r7, #8]
   24ef0:	b2db      	uxtb	r3, r3
   24ef2:	4619      	mov	r1, r3
   24ef4:	68f8      	ldr	r0, [r7, #12]
   24ef6:	f7ff fdd7 	bl	24aa8 <nrf_gpio_cfg_sense_set>
	return res;
   24efa:	69bb      	ldr	r3, [r7, #24]
}
   24efc:	4618      	mov	r0, r3
   24efe:	3720      	adds	r7, #32
   24f00:	46bd      	mov	sp, r7
   24f02:	bd80      	pop	{r7, pc}

00024f04 <gpio_nrfx_port_get_raw>:
{
   24f04:	b580      	push	{r7, lr}
   24f06:	b084      	sub	sp, #16
   24f08:	af00      	add	r7, sp, #0
   24f0a:	6078      	str	r0, [r7, #4]
   24f0c:	6039      	str	r1, [r7, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24f0e:	6878      	ldr	r0, [r7, #4]
   24f10:	f7ff ff75 	bl	24dfe <get_port_cfg>
   24f14:	4603      	mov	r3, r0
   24f16:	685b      	ldr	r3, [r3, #4]
   24f18:	60fb      	str	r3, [r7, #12]
	*value = nrf_gpio_port_in_read(reg);
   24f1a:	68f8      	ldr	r0, [r7, #12]
   24f1c:	f7ff fe11 	bl	24b42 <nrf_gpio_port_in_read>
   24f20:	4602      	mov	r2, r0
   24f22:	683b      	ldr	r3, [r7, #0]
   24f24:	601a      	str	r2, [r3, #0]
	return 0;
   24f26:	2300      	movs	r3, #0
}
   24f28:	4618      	mov	r0, r3
   24f2a:	3710      	adds	r7, #16
   24f2c:	46bd      	mov	sp, r7
   24f2e:	bd80      	pop	{r7, pc}

00024f30 <gpio_nrfx_port_set_masked_raw>:
{
   24f30:	b580      	push	{r7, lr}
   24f32:	b086      	sub	sp, #24
   24f34:	af00      	add	r7, sp, #0
   24f36:	60f8      	str	r0, [r7, #12]
   24f38:	60b9      	str	r1, [r7, #8]
   24f3a:	607a      	str	r2, [r7, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24f3c:	68f8      	ldr	r0, [r7, #12]
   24f3e:	f7ff ff5e 	bl	24dfe <get_port_cfg>
   24f42:	4603      	mov	r3, r0
   24f44:	685b      	ldr	r3, [r3, #4]
   24f46:	617b      	str	r3, [r7, #20]
	value_tmp = nrf_gpio_port_out_read(reg) & ~mask;
   24f48:	6978      	ldr	r0, [r7, #20]
   24f4a:	f7ff fe05 	bl	24b58 <nrf_gpio_port_out_read>
   24f4e:	4602      	mov	r2, r0
   24f50:	68bb      	ldr	r3, [r7, #8]
   24f52:	43db      	mvns	r3, r3
   24f54:	4013      	ands	r3, r2
   24f56:	613b      	str	r3, [r7, #16]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   24f58:	68ba      	ldr	r2, [r7, #8]
   24f5a:	687b      	ldr	r3, [r7, #4]
   24f5c:	401a      	ands	r2, r3
   24f5e:	693b      	ldr	r3, [r7, #16]
   24f60:	4313      	orrs	r3, r2
   24f62:	4619      	mov	r1, r3
   24f64:	6978      	ldr	r0, [r7, #20]
   24f66:	f7ff fe02 	bl	24b6e <nrf_gpio_port_out_write>
	return 0;
   24f6a:	2300      	movs	r3, #0
}
   24f6c:	4618      	mov	r0, r3
   24f6e:	3718      	adds	r7, #24
   24f70:	46bd      	mov	sp, r7
   24f72:	bd80      	pop	{r7, pc}

00024f74 <gpio_nrfx_port_set_bits_raw>:
{
   24f74:	b580      	push	{r7, lr}
   24f76:	b084      	sub	sp, #16
   24f78:	af00      	add	r7, sp, #0
   24f7a:	6078      	str	r0, [r7, #4]
   24f7c:	6039      	str	r1, [r7, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24f7e:	6878      	ldr	r0, [r7, #4]
   24f80:	f7ff ff3d 	bl	24dfe <get_port_cfg>
   24f84:	4603      	mov	r3, r0
   24f86:	685b      	ldr	r3, [r3, #4]
   24f88:	60fb      	str	r3, [r7, #12]
	nrf_gpio_port_out_set(reg, mask);
   24f8a:	6839      	ldr	r1, [r7, #0]
   24f8c:	68f8      	ldr	r0, [r7, #12]
   24f8e:	f7ff fdfb 	bl	24b88 <nrf_gpio_port_out_set>
	return 0;
   24f92:	2300      	movs	r3, #0
}
   24f94:	4618      	mov	r0, r3
   24f96:	3710      	adds	r7, #16
   24f98:	46bd      	mov	sp, r7
   24f9a:	bd80      	pop	{r7, pc}

00024f9c <gpio_nrfx_port_clear_bits_raw>:
{
   24f9c:	b580      	push	{r7, lr}
   24f9e:	b084      	sub	sp, #16
   24fa0:	af00      	add	r7, sp, #0
   24fa2:	6078      	str	r0, [r7, #4]
   24fa4:	6039      	str	r1, [r7, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24fa6:	6878      	ldr	r0, [r7, #4]
   24fa8:	f7ff ff29 	bl	24dfe <get_port_cfg>
   24fac:	4603      	mov	r3, r0
   24fae:	685b      	ldr	r3, [r3, #4]
   24fb0:	60fb      	str	r3, [r7, #12]
	nrf_gpio_port_out_clear(reg, mask);
   24fb2:	6839      	ldr	r1, [r7, #0]
   24fb4:	68f8      	ldr	r0, [r7, #12]
   24fb6:	f7ff fdf4 	bl	24ba2 <nrf_gpio_port_out_clear>
	return 0;
   24fba:	2300      	movs	r3, #0
}
   24fbc:	4618      	mov	r0, r3
   24fbe:	3710      	adds	r7, #16
   24fc0:	46bd      	mov	sp, r7
   24fc2:	bd80      	pop	{r7, pc}

00024fc4 <gpio_nrfx_port_toggle_bits>:
{
   24fc4:	b580      	push	{r7, lr}
   24fc6:	b084      	sub	sp, #16
   24fc8:	af00      	add	r7, sp, #0
   24fca:	6078      	str	r0, [r7, #4]
   24fcc:	6039      	str	r1, [r7, #0]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   24fce:	6878      	ldr	r0, [r7, #4]
   24fd0:	f7ff ff15 	bl	24dfe <get_port_cfg>
   24fd4:	4603      	mov	r3, r0
   24fd6:	685b      	ldr	r3, [r3, #4]
   24fd8:	60fb      	str	r3, [r7, #12]
	value = nrf_gpio_port_out_read(reg);
   24fda:	68f8      	ldr	r0, [r7, #12]
   24fdc:	f7ff fdbc 	bl	24b58 <nrf_gpio_port_out_read>
   24fe0:	60b8      	str	r0, [r7, #8]
	nrf_gpio_port_out_write(reg, value ^ mask);
   24fe2:	68ba      	ldr	r2, [r7, #8]
   24fe4:	683b      	ldr	r3, [r7, #0]
   24fe6:	4053      	eors	r3, r2
   24fe8:	4619      	mov	r1, r3
   24fea:	68f8      	ldr	r0, [r7, #12]
   24fec:	f7ff fdbf 	bl	24b6e <nrf_gpio_port_out_write>
	return 0;
   24ff0:	2300      	movs	r3, #0
}
   24ff2:	4618      	mov	r0, r3
   24ff4:	3710      	adds	r7, #16
   24ff6:	46bd      	mov	sp, r7
   24ff8:	bd80      	pop	{r7, pc}

00024ffa <gpio_nrfx_pin_interrupt_configure>:
{
   24ffa:	b580      	push	{r7, lr}
   24ffc:	b086      	sub	sp, #24
   24ffe:	af00      	add	r7, sp, #0
   25000:	60f8      	str	r0, [r7, #12]
   25002:	607a      	str	r2, [r7, #4]
   25004:	603b      	str	r3, [r7, #0]
   25006:	460b      	mov	r3, r1
   25008:	72fb      	strb	r3, [r7, #11]
	struct gpio_nrfx_data *data = get_port_data(port);
   2500a:	68f8      	ldr	r0, [r7, #12]
   2500c:	f7ff feec 	bl	24de8 <get_port_data>
   25010:	6178      	str	r0, [r7, #20]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   25012:	68f8      	ldr	r0, [r7, #12]
   25014:	f7ff fef3 	bl	24dfe <get_port_cfg>
   25018:	4603      	mov	r3, r0
   2501a:	7a1b      	ldrb	r3, [r3, #8]
   2501c:	015a      	lsls	r2, r3, #5
   2501e:	7afb      	ldrb	r3, [r7, #11]
   25020:	f003 031f 	and.w	r3, r3, #31
   25024:	4313      	orrs	r3, r2
   25026:	613b      	str	r3, [r7, #16]
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   25028:	687b      	ldr	r3, [r7, #4]
   2502a:	f5b3 3fa0 	cmp.w	r3, #81920	; 0x14000
   2502e:	d108      	bne.n	25042 <gpio_nrfx_pin_interrupt_configure+0x48>
	    (nrf_gpio_pin_dir_get(abs_pin) == NRF_GPIO_PIN_DIR_OUTPUT)) {
   25030:	6938      	ldr	r0, [r7, #16]
   25032:	f7ff fd70 	bl	24b16 <nrf_gpio_pin_dir_get>
   25036:	4603      	mov	r3, r0
	    (mode == GPIO_INT_MODE_EDGE) &&
   25038:	2b01      	cmp	r3, #1
   2503a:	d102      	bne.n	25042 <gpio_nrfx_pin_interrupt_configure+0x48>
		return -ENOTSUP;
   2503c:	f06f 0385 	mvn.w	r3, #133	; 0x85
   25040:	e05d      	b.n	250fe <gpio_nrfx_pin_interrupt_configure+0x104>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   25042:	687b      	ldr	r3, [r7, #4]
   25044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   25048:	d007      	beq.n	2505a <gpio_nrfx_pin_interrupt_configure+0x60>
   2504a:	697b      	ldr	r3, [r7, #20]
   2504c:	68da      	ldr	r2, [r3, #12]
   2504e:	7afb      	ldrb	r3, [r7, #11]
   25050:	2101      	movs	r1, #1
   25052:	fa01 f303 	lsl.w	r3, r1, r3
   25056:	4313      	orrs	r3, r2
   25058:	e007      	b.n	2506a <gpio_nrfx_pin_interrupt_configure+0x70>
   2505a:	697b      	ldr	r3, [r7, #20]
   2505c:	68da      	ldr	r2, [r3, #12]
   2505e:	7afb      	ldrb	r3, [r7, #11]
   25060:	2101      	movs	r1, #1
   25062:	fa01 f303 	lsl.w	r3, r1, r3
   25066:	43db      	mvns	r3, r3
   25068:	4013      	ands	r3, r2
   2506a:	697a      	ldr	r2, [r7, #20]
   2506c:	60d3      	str	r3, [r2, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   2506e:	687b      	ldr	r3, [r7, #4]
   25070:	f5b3 3fa0 	cmp.w	r3, #81920	; 0x14000
   25074:	d107      	bne.n	25086 <gpio_nrfx_pin_interrupt_configure+0x8c>
   25076:	697b      	ldr	r3, [r7, #20]
   25078:	695a      	ldr	r2, [r3, #20]
   2507a:	7afb      	ldrb	r3, [r7, #11]
   2507c:	2101      	movs	r1, #1
   2507e:	fa01 f303 	lsl.w	r3, r1, r3
   25082:	4313      	orrs	r3, r2
   25084:	e007      	b.n	25096 <gpio_nrfx_pin_interrupt_configure+0x9c>
   25086:	697b      	ldr	r3, [r7, #20]
   25088:	695a      	ldr	r2, [r3, #20]
   2508a:	7afb      	ldrb	r3, [r7, #11]
   2508c:	2101      	movs	r1, #1
   2508e:	fa01 f303 	lsl.w	r3, r1, r3
   25092:	43db      	mvns	r3, r3
   25094:	4013      	ands	r3, r2
   25096:	697a      	ldr	r2, [r7, #20]
   25098:	6153      	str	r3, [r2, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   2509a:	683b      	ldr	r3, [r7, #0]
   2509c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   250a0:	d107      	bne.n	250b2 <gpio_nrfx_pin_interrupt_configure+0xb8>
   250a2:	697b      	ldr	r3, [r7, #20]
   250a4:	699a      	ldr	r2, [r3, #24]
   250a6:	7afb      	ldrb	r3, [r7, #11]
   250a8:	2101      	movs	r1, #1
   250aa:	fa01 f303 	lsl.w	r3, r1, r3
   250ae:	4313      	orrs	r3, r2
   250b0:	e007      	b.n	250c2 <gpio_nrfx_pin_interrupt_configure+0xc8>
   250b2:	697b      	ldr	r3, [r7, #20]
   250b4:	699a      	ldr	r2, [r3, #24]
   250b6:	7afb      	ldrb	r3, [r7, #11]
   250b8:	2101      	movs	r1, #1
   250ba:	fa01 f303 	lsl.w	r3, r1, r3
   250be:	43db      	mvns	r3, r3
   250c0:	4013      	ands	r3, r2
   250c2:	697a      	ldr	r2, [r7, #20]
   250c4:	6193      	str	r3, [r2, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   250c6:	683b      	ldr	r3, [r7, #0]
   250c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   250cc:	d107      	bne.n	250de <gpio_nrfx_pin_interrupt_configure+0xe4>
   250ce:	697b      	ldr	r3, [r7, #20]
   250d0:	691a      	ldr	r2, [r3, #16]
   250d2:	7afb      	ldrb	r3, [r7, #11]
   250d4:	2101      	movs	r1, #1
   250d6:	fa01 f303 	lsl.w	r3, r1, r3
   250da:	4313      	orrs	r3, r2
   250dc:	e007      	b.n	250ee <gpio_nrfx_pin_interrupt_configure+0xf4>
   250de:	697b      	ldr	r3, [r7, #20]
   250e0:	691a      	ldr	r2, [r3, #16]
   250e2:	7afb      	ldrb	r3, [r7, #11]
   250e4:	2101      	movs	r1, #1
   250e6:	fa01 f303 	lsl.w	r3, r1, r3
   250ea:	43db      	mvns	r3, r3
   250ec:	4013      	ands	r3, r2
   250ee:	697a      	ldr	r2, [r7, #20]
   250f0:	6113      	str	r3, [r2, #16]
	return gpiote_pin_int_cfg(port, pin);
   250f2:	7afb      	ldrb	r3, [r7, #11]
   250f4:	4619      	mov	r1, r3
   250f6:	68f8      	ldr	r0, [r7, #12]
   250f8:	f7ff fea2 	bl	24e40 <gpiote_pin_int_cfg>
   250fc:	4603      	mov	r3, r0
}
   250fe:	4618      	mov	r0, r3
   25100:	3718      	adds	r7, #24
   25102:	46bd      	mov	sp, r7
   25104:	bd80      	pop	{r7, pc}

00025106 <gpio_nrfx_manage_callback>:
{
   25106:	b580      	push	{r7, lr}
   25108:	b084      	sub	sp, #16
   2510a:	af00      	add	r7, sp, #0
   2510c:	60f8      	str	r0, [r7, #12]
   2510e:	60b9      	str	r1, [r7, #8]
   25110:	4613      	mov	r3, r2
   25112:	71fb      	strb	r3, [r7, #7]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   25114:	68f8      	ldr	r0, [r7, #12]
   25116:	f7ff fe67 	bl	24de8 <get_port_data>
   2511a:	4603      	mov	r3, r0
   2511c:	3304      	adds	r3, #4
   2511e:	79fa      	ldrb	r2, [r7, #7]
   25120:	68b9      	ldr	r1, [r7, #8]
   25122:	4618      	mov	r0, r3
   25124:	f7f3 f8e2 	bl	182ec <gpio_manage_callback>
   25128:	4603      	mov	r3, r0
}
   2512a:	4618      	mov	r0, r3
   2512c:	3710      	adds	r7, #16
   2512e:	46bd      	mov	sp, r7
   25130:	bd80      	pop	{r7, pc}

00025132 <get_level_pins>:
{
   25132:	b580      	push	{r7, lr}
   25134:	b084      	sub	sp, #16
   25136:	af00      	add	r7, sp, #0
   25138:	6078      	str	r0, [r7, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   2513a:	6878      	ldr	r0, [r7, #4]
   2513c:	f7ff fe54 	bl	24de8 <get_port_data>
   25140:	60f8      	str	r0, [r7, #12]
	uint32_t out = data->pin_int_en;
   25142:	68fb      	ldr	r3, [r7, #12]
   25144:	68db      	ldr	r3, [r3, #12]
   25146:	60bb      	str	r3, [r7, #8]
	out &= ~data->trig_edge & ~data->double_edge;
   25148:	68fb      	ldr	r3, [r7, #12]
   2514a:	695a      	ldr	r2, [r3, #20]
   2514c:	68fb      	ldr	r3, [r7, #12]
   2514e:	699b      	ldr	r3, [r3, #24]
   25150:	4313      	orrs	r3, r2
   25152:	43db      	mvns	r3, r3
   25154:	68ba      	ldr	r2, [r7, #8]
   25156:	4013      	ands	r3, r2
   25158:	60bb      	str	r3, [r7, #8]
	return out;
   2515a:	68bb      	ldr	r3, [r7, #8]
}
   2515c:	4618      	mov	r0, r3
   2515e:	3710      	adds	r7, #16
   25160:	46bd      	mov	sp, r7
   25162:	bd80      	pop	{r7, pc}

00025164 <cfg_level_pins>:
{
   25164:	b580      	push	{r7, lr}
   25166:	b08a      	sub	sp, #40	; 0x28
   25168:	af00      	add	r7, sp, #0
   2516a:	6078      	str	r0, [r7, #4]
	const struct gpio_nrfx_data *data = get_port_data(port);
   2516c:	6878      	ldr	r0, [r7, #4]
   2516e:	f7ff fe3b 	bl	24de8 <get_port_data>
   25172:	61b8      	str	r0, [r7, #24]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   25174:	6878      	ldr	r0, [r7, #4]
   25176:	f7ff fe42 	bl	24dfe <get_port_cfg>
   2517a:	6178      	str	r0, [r7, #20]
	uint32_t pin = 0U;
   2517c:	2300      	movs	r3, #0
   2517e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t bit = 1U << pin;
   25180:	2201      	movs	r2, #1
   25182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25184:	fa02 f303 	lsl.w	r3, r2, r3
   25188:	623b      	str	r3, [r7, #32]
	uint32_t level_pins = get_level_pins(port);
   2518a:	6878      	ldr	r0, [r7, #4]
   2518c:	f7ff ffd1 	bl	25132 <get_level_pins>
   25190:	61f8      	str	r0, [r7, #28]
	while (level_pins) {
   25192:	e023      	b.n	251dc <cfg_level_pins+0x78>
		if (level_pins & bit) {
   25194:	69fa      	ldr	r2, [r7, #28]
   25196:	6a3b      	ldr	r3, [r7, #32]
   25198:	4013      	ands	r3, r2
   2519a:	2b00      	cmp	r3, #0
   2519c:	d018      	beq.n	251d0 <cfg_level_pins+0x6c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2519e:	697b      	ldr	r3, [r7, #20]
   251a0:	7a1b      	ldrb	r3, [r3, #8]
   251a2:	015b      	lsls	r3, r3, #5
   251a4:	461a      	mov	r2, r3
   251a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   251a8:	f003 031f 	and.w	r3, r3, #31
   251ac:	4313      	orrs	r3, r2
   251ae:	613b      	str	r3, [r7, #16]
			uint32_t sense = sense_for_pin(data, pin);
   251b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   251b2:	69b8      	ldr	r0, [r7, #24]
   251b4:	f7ff fe2e 	bl	24e14 <sense_for_pin>
   251b8:	60f8      	str	r0, [r7, #12]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   251ba:	68fb      	ldr	r3, [r7, #12]
   251bc:	b2db      	uxtb	r3, r3
   251be:	4619      	mov	r1, r3
   251c0:	6938      	ldr	r0, [r7, #16]
   251c2:	f7ff fc71 	bl	24aa8 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   251c6:	6a3b      	ldr	r3, [r7, #32]
   251c8:	43db      	mvns	r3, r3
   251ca:	69fa      	ldr	r2, [r7, #28]
   251cc:	4013      	ands	r3, r2
   251ce:	61fb      	str	r3, [r7, #28]
		++pin;
   251d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   251d2:	3301      	adds	r3, #1
   251d4:	627b      	str	r3, [r7, #36]	; 0x24
		bit <<= 1;
   251d6:	6a3b      	ldr	r3, [r7, #32]
   251d8:	005b      	lsls	r3, r3, #1
   251da:	623b      	str	r3, [r7, #32]
	while (level_pins) {
   251dc:	69fb      	ldr	r3, [r7, #28]
   251de:	2b00      	cmp	r3, #0
   251e0:	d1d8      	bne.n	25194 <cfg_level_pins+0x30>
}
   251e2:	bf00      	nop
   251e4:	bf00      	nop
   251e6:	3728      	adds	r7, #40	; 0x28
   251e8:	46bd      	mov	sp, r7
   251ea:	bd80      	pop	{r7, pc}

000251ec <check_level_trigger_pins>:
{
   251ec:	b580      	push	{r7, lr}
   251ee:	b090      	sub	sp, #64	; 0x40
   251f0:	af00      	add	r7, sp, #0
   251f2:	6078      	str	r0, [r7, #4]
   251f4:	6039      	str	r1, [r7, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   251f6:	6878      	ldr	r0, [r7, #4]
   251f8:	f7ff fdf6 	bl	24de8 <get_port_data>
   251fc:	62b8      	str	r0, [r7, #40]	; 0x28
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   251fe:	6878      	ldr	r0, [r7, #4]
   25200:	f7ff fdfd 	bl	24dfe <get_port_cfg>
   25204:	6278      	str	r0, [r7, #36]	; 0x24
	uint32_t level_pins = get_level_pins(port);
   25206:	6878      	ldr	r0, [r7, #4]
   25208:	f7ff ff93 	bl	25132 <get_level_pins>
   2520c:	6238      	str	r0, [r7, #32]
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   2520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25210:	685b      	ldr	r3, [r3, #4]
   25212:	4618      	mov	r0, r3
   25214:	f7ff fc95 	bl	24b42 <nrf_gpio_port_in_read>
   25218:	61f8      	str	r0, [r7, #28]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   2521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2521c:	691a      	ldr	r2, [r3, #16]
   2521e:	69fb      	ldr	r3, [r7, #28]
   25220:	4053      	eors	r3, r2
   25222:	43db      	mvns	r3, r3
   25224:	61bb      	str	r3, [r7, #24]
	uint32_t out = pin_states & level_pins;
   25226:	69ba      	ldr	r2, [r7, #24]
   25228:	6a3b      	ldr	r3, [r7, #32]
   2522a:	4013      	ands	r3, r2
   2522c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t pin = 0U;
   2522e:	2300      	movs	r3, #0
   25230:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t bit = 1U << pin;
   25232:	2201      	movs	r2, #1
   25234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   25236:	fa02 f303 	lsl.w	r3, r2, r3
   2523a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t port_latch = 0;
   2523c:	2300      	movs	r3, #0
   2523e:	617b      	str	r3, [r7, #20]
	uint32_t check_pins = level_pins;
   25240:	6a3b      	ldr	r3, [r7, #32]
   25242:	633b      	str	r3, [r7, #48]	; 0x30
	while (check_pins) {
   25244:	e064      	b.n	25310 <check_level_trigger_pins+0x124>
		if (check_pins & bit) {
   25246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   25248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2524a:	4013      	ands	r3, r2
   2524c:	2b00      	cmp	r3, #0
   2524e:	d059      	beq.n	25304 <check_level_trigger_pins+0x118>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   25250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25252:	7a1b      	ldrb	r3, [r3, #8]
   25254:	015b      	lsls	r3, r3, #5
   25256:	461a      	mov	r2, r3
   25258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2525a:	f003 031f 	and.w	r3, r3, #31
   2525e:	4313      	orrs	r3, r2
   25260:	613b      	str	r3, [r7, #16]
			if (!(level_pins & bit)) {
   25262:	6a3a      	ldr	r2, [r7, #32]
   25264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   25266:	4013      	ands	r3, r2
   25268:	2b00      	cmp	r3, #0
   2526a:	d142      	bne.n	252f2 <check_level_trigger_pins+0x106>
				uint32_t sense = nrf_gpio_pin_sense_get(abs_pin);
   2526c:	6938      	ldr	r0, [r7, #16]
   2526e:	f7ff fc3c 	bl	24aea <nrf_gpio_pin_sense_get>
   25272:	4603      	mov	r3, r0
   25274:	60fb      	str	r3, [r7, #12]
				bool high = (sense == GPIO_PIN_CNF_SENSE_High);
   25276:	68fb      	ldr	r3, [r7, #12]
   25278:	2b02      	cmp	r3, #2
   2527a:	bf0c      	ite	eq
   2527c:	2301      	moveq	r3, #1
   2527e:	2300      	movne	r3, #0
   25280:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (port_latch & bit) {
   25284:	697a      	ldr	r2, [r7, #20]
   25286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   25288:	4013      	ands	r3, r2
   2528a:	2b00      	cmp	r3, #0
   2528c:	d027      	beq.n	252de <check_level_trigger_pins+0xf2>
					if ((data->double_edge & bit) ||
   2528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   25290:	699a      	ldr	r2, [r3, #24]
   25292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   25294:	4013      	ands	r3, r2
   25296:	2b00      	cmp	r3, #0
   25298:	d10b      	bne.n	252b2 <check_level_trigger_pins+0xc6>
					    ((!!data->int_active_level) == high)) {
   2529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2529c:	691b      	ldr	r3, [r3, #16]
   2529e:	2b00      	cmp	r3, #0
   252a0:	bf14      	ite	ne
   252a2:	2301      	movne	r3, #1
   252a4:	2300      	moveq	r3, #0
   252a6:	b2db      	uxtb	r3, r3
   252a8:	461a      	mov	r2, r3
   252aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
					if ((data->double_edge & bit) ||
   252ae:	429a      	cmp	r2, r3
   252b0:	d103      	bne.n	252ba <check_level_trigger_pins+0xce>
						out |= bit;
   252b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   252b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   252b6:	4313      	orrs	r3, r2
   252b8:	63fb      	str	r3, [r7, #60]	; 0x3c
					high = !high;
   252ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   252be:	2b00      	cmp	r3, #0
   252c0:	bf14      	ite	ne
   252c2:	2301      	movne	r3, #1
   252c4:	2300      	moveq	r3, #0
   252c6:	b2db      	uxtb	r3, r3
   252c8:	f083 0301 	eor.w	r3, r3, #1
   252cc:	b2db      	uxtb	r3, r3
   252ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   252d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   252d6:	f003 0301 	and.w	r3, r3, #1
   252da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (high) {
   252de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   252e2:	2b00      	cmp	r3, #0
   252e4:	d005      	beq.n	252f2 <check_level_trigger_pins+0x106>
					*sense_levels |= bit;
   252e6:	683b      	ldr	r3, [r7, #0]
   252e8:	681a      	ldr	r2, [r3, #0]
   252ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   252ec:	431a      	orrs	r2, r3
   252ee:	683b      	ldr	r3, [r7, #0]
   252f0:	601a      	str	r2, [r3, #0]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   252f2:	2100      	movs	r1, #0
   252f4:	6938      	ldr	r0, [r7, #16]
   252f6:	f7ff fbd7 	bl	24aa8 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   252fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   252fc:	43db      	mvns	r3, r3
   252fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   25300:	4013      	ands	r3, r2
   25302:	633b      	str	r3, [r7, #48]	; 0x30
		++pin;
   25304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   25306:	3301      	adds	r3, #1
   25308:	63bb      	str	r3, [r7, #56]	; 0x38
		bit <<= 1;
   2530a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2530c:	005b      	lsls	r3, r3, #1
   2530e:	637b      	str	r3, [r7, #52]	; 0x34
	while (check_pins) {
   25310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   25312:	2b00      	cmp	r3, #0
   25314:	d197      	bne.n	25246 <check_level_trigger_pins+0x5a>
	return out;
   25316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   25318:	4618      	mov	r0, r3
   2531a:	3740      	adds	r7, #64	; 0x40
   2531c:	46bd      	mov	sp, r7
   2531e:	bd80      	pop	{r7, pc}

00025320 <fire_callbacks>:
{
   25320:	b580      	push	{r7, lr}
   25322:	b084      	sub	sp, #16
   25324:	af00      	add	r7, sp, #0
   25326:	6078      	str	r0, [r7, #4]
   25328:	6039      	str	r1, [r7, #0]
	struct gpio_nrfx_data *data = get_port_data(port);
   2532a:	6878      	ldr	r0, [r7, #4]
   2532c:	f7ff fd5c 	bl	24de8 <get_port_data>
   25330:	60f8      	str	r0, [r7, #12]
	sys_slist_t *list = &data->callbacks;
   25332:	68fb      	ldr	r3, [r7, #12]
   25334:	3304      	adds	r3, #4
   25336:	60bb      	str	r3, [r7, #8]
	gpio_fire_callbacks(list, port, pins);
   25338:	683a      	ldr	r2, [r7, #0]
   2533a:	6879      	ldr	r1, [r7, #4]
   2533c:	68b8      	ldr	r0, [r7, #8]
   2533e:	f7f3 f833 	bl	183a8 <gpio_fire_callbacks>
}
   25342:	bf00      	nop
   25344:	3710      	adds	r7, #16
   25346:	46bd      	mov	sp, r7
   25348:	bd80      	pop	{r7, pc}

0002534a <k_is_user_context>:
{
   2534a:	b480      	push	{r7}
   2534c:	af00      	add	r7, sp, #0
	return false;
   2534e:	2300      	movs	r3, #0
}
   25350:	4618      	mov	r0, r3
   25352:	46bd      	mov	sp, r7
   25354:	bc80      	pop	{r7}
   25356:	4770      	bx	lr

00025358 <nrf_event_readback>:
{
   25358:	b480      	push	{r7}
   2535a:	b083      	sub	sp, #12
   2535c:	af00      	add	r7, sp, #0
   2535e:	6078      	str	r0, [r7, #4]
    (void)*((volatile uint32_t *)(p_event_reg));
   25360:	687b      	ldr	r3, [r7, #4]
   25362:	681b      	ldr	r3, [r3, #0]
}
   25364:	bf00      	nop
   25366:	370c      	adds	r7, #12
   25368:	46bd      	mov	sp, r7
   2536a:	bc80      	pop	{r7}
   2536c:	4770      	bx	lr

0002536e <k_ms_to_ticks_ceil64>:
{
   2536e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   25372:	b08c      	sub	sp, #48	; 0x30
   25374:	af00      	add	r7, sp, #0
   25376:	e9c7 0100 	strd	r0, r1, [r7]
   2537a:	e9d7 2300 	ldrd	r2, r3, [r7]
   2537e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   25382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   25386:	627b      	str	r3, [r7, #36]	; 0x24
   25388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   2538c:	623b      	str	r3, [r7, #32]
   2538e:	2301      	movs	r3, #1
   25390:	77fb      	strb	r3, [r7, #31]
   25392:	2300      	movs	r3, #0
   25394:	77bb      	strb	r3, [r7, #30]
   25396:	2301      	movs	r3, #1
   25398:	777b      	strb	r3, [r7, #29]
   2539a:	2300      	movs	r3, #0
   2539c:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   2539e:	7ffb      	ldrb	r3, [r7, #31]
   253a0:	2b00      	cmp	r3, #0
   253a2:	d00f      	beq.n	253c4 <k_ms_to_ticks_ceil64+0x56>
	bool mul_ratio = const_hz &&
   253a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   253a6:	6a3b      	ldr	r3, [r7, #32]
   253a8:	429a      	cmp	r2, r3
   253aa:	d20b      	bcs.n	253c4 <k_ms_to_ticks_ceil64+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   253ac:	6a3b      	ldr	r3, [r7, #32]
   253ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   253b0:	fbb3 f2f2 	udiv	r2, r3, r2
   253b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   253b6:	fb01 f202 	mul.w	r2, r1, r2
   253ba:	1a9b      	subs	r3, r3, r2
   253bc:	2b00      	cmp	r3, #0
   253be:	d101      	bne.n	253c4 <k_ms_to_ticks_ceil64+0x56>
   253c0:	2301      	movs	r3, #1
   253c2:	e000      	b.n	253c6 <k_ms_to_ticks_ceil64+0x58>
   253c4:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   253c6:	76fb      	strb	r3, [r7, #27]
   253c8:	7efb      	ldrb	r3, [r7, #27]
   253ca:	f003 0301 	and.w	r3, r3, #1
   253ce:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   253d0:	7ffb      	ldrb	r3, [r7, #31]
   253d2:	2b00      	cmp	r3, #0
   253d4:	d00f      	beq.n	253f6 <k_ms_to_ticks_ceil64+0x88>
	bool div_ratio = const_hz &&
   253d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   253d8:	6a3b      	ldr	r3, [r7, #32]
   253da:	429a      	cmp	r2, r3
   253dc:	d90b      	bls.n	253f6 <k_ms_to_ticks_ceil64+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   253de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   253e0:	6a3a      	ldr	r2, [r7, #32]
   253e2:	fbb3 f2f2 	udiv	r2, r3, r2
   253e6:	6a39      	ldr	r1, [r7, #32]
   253e8:	fb01 f202 	mul.w	r2, r1, r2
   253ec:	1a9b      	subs	r3, r3, r2
   253ee:	2b00      	cmp	r3, #0
   253f0:	d101      	bne.n	253f6 <k_ms_to_ticks_ceil64+0x88>
   253f2:	2301      	movs	r3, #1
   253f4:	e000      	b.n	253f8 <k_ms_to_ticks_ceil64+0x8a>
   253f6:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   253f8:	76bb      	strb	r3, [r7, #26]
   253fa:	7ebb      	ldrb	r3, [r7, #26]
   253fc:	f003 0301 	and.w	r3, r3, #1
   25400:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   25402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   25404:	6a3b      	ldr	r3, [r7, #32]
   25406:	429a      	cmp	r2, r3
   25408:	d10a      	bne.n	25420 <k_ms_to_ticks_ceil64+0xb2>
		return result32 ? ((uint32_t)t) : t;
   2540a:	7fbb      	ldrb	r3, [r7, #30]
   2540c:	2b00      	cmp	r3, #0
   2540e:	d004      	beq.n	2541a <k_ms_to_ticks_ceil64+0xac>
   25410:	6abb      	ldr	r3, [r7, #40]	; 0x28
   25412:	461a      	mov	r2, r3
   25414:	f04f 0300 	mov.w	r3, #0
   25418:	e0c7      	b.n	255aa <k_ms_to_ticks_ceil64+0x23c>
   2541a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   2541e:	e0c4      	b.n	255aa <k_ms_to_ticks_ceil64+0x23c>
	uint64_t off = 0;
   25420:	f04f 0200 	mov.w	r2, #0
   25424:	f04f 0300 	mov.w	r3, #0
   25428:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   2542c:	7efb      	ldrb	r3, [r7, #27]
   2542e:	f083 0301 	eor.w	r3, r3, #1
   25432:	b2db      	uxtb	r3, r3
   25434:	2b00      	cmp	r3, #0
   25436:	d01d      	beq.n	25474 <k_ms_to_ticks_ceil64+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   25438:	7ebb      	ldrb	r3, [r7, #26]
   2543a:	2b00      	cmp	r3, #0
   2543c:	d004      	beq.n	25448 <k_ms_to_ticks_ceil64+0xda>
   2543e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   25440:	6a3b      	ldr	r3, [r7, #32]
   25442:	fbb2 f3f3 	udiv	r3, r2, r3
   25446:	e000      	b.n	2544a <k_ms_to_ticks_ceil64+0xdc>
   25448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2544a:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   2544c:	7f7b      	ldrb	r3, [r7, #29]
   2544e:	2b00      	cmp	r3, #0
   25450:	d006      	beq.n	25460 <k_ms_to_ticks_ceil64+0xf2>
			off = rdivisor - 1U;
   25452:	68fb      	ldr	r3, [r7, #12]
   25454:	3b01      	subs	r3, #1
   25456:	461a      	mov	r2, r3
   25458:	f04f 0300 	mov.w	r3, #0
   2545c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   25460:	7f3b      	ldrb	r3, [r7, #28]
   25462:	2b00      	cmp	r3, #0
   25464:	d006      	beq.n	25474 <k_ms_to_ticks_ceil64+0x106>
			off = rdivisor / 2U;
   25466:	68fb      	ldr	r3, [r7, #12]
   25468:	085b      	lsrs	r3, r3, #1
   2546a:	461a      	mov	r2, r3
   2546c:	f04f 0300 	mov.w	r3, #0
   25470:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   25474:	7ebb      	ldrb	r3, [r7, #26]
   25476:	2b00      	cmp	r3, #0
   25478:	d02a      	beq.n	254d0 <k_ms_to_ticks_ceil64+0x162>
		t += off;
   2547a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   2547e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   25482:	1884      	adds	r4, r0, r2
   25484:	eb41 0503 	adc.w	r5, r1, r3
   25488:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   2548c:	7fbb      	ldrb	r3, [r7, #30]
   2548e:	2b00      	cmp	r3, #0
   25490:	d010      	beq.n	254b4 <k_ms_to_ticks_ceil64+0x146>
   25492:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   25496:	2b01      	cmp	r3, #1
   25498:	bf08      	it	eq
   2549a:	2a00      	cmpeq	r2, #0
   2549c:	d20a      	bcs.n	254b4 <k_ms_to_ticks_ceil64+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
   2549e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   254a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   254a2:	6a3b      	ldr	r3, [r7, #32]
   254a4:	fbb1 f3f3 	udiv	r3, r1, r3
   254a8:	fbb2 f3f3 	udiv	r3, r2, r3
   254ac:	461a      	mov	r2, r3
   254ae:	f04f 0300 	mov.w	r3, #0
   254b2:	e07a      	b.n	255aa <k_ms_to_ticks_ceil64+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
   254b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   254b6:	6a3b      	ldr	r3, [r7, #32]
   254b8:	fbb2 f3f3 	udiv	r3, r2, r3
   254bc:	461a      	mov	r2, r3
   254be:	f04f 0300 	mov.w	r3, #0
   254c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   254c6:	f7ea feb9 	bl	1023c <__aeabi_uldivmod>
   254ca:	4602      	mov	r2, r0
   254cc:	460b      	mov	r3, r1
   254ce:	e06c      	b.n	255aa <k_ms_to_ticks_ceil64+0x23c>
	} else if (mul_ratio) {
   254d0:	7efb      	ldrb	r3, [r7, #27]
   254d2:	2b00      	cmp	r3, #0
   254d4:	d021      	beq.n	2551a <k_ms_to_ticks_ceil64+0x1ac>
		if (result32) {
   254d6:	7fbb      	ldrb	r3, [r7, #30]
   254d8:	2b00      	cmp	r3, #0
   254da:	d00a      	beq.n	254f2 <k_ms_to_ticks_ceil64+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
   254dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   254de:	6a39      	ldr	r1, [r7, #32]
   254e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   254e2:	fbb1 f2f2 	udiv	r2, r1, r2
   254e6:	fb02 f303 	mul.w	r3, r2, r3
   254ea:	461a      	mov	r2, r3
   254ec:	f04f 0300 	mov.w	r3, #0
   254f0:	e05b      	b.n	255aa <k_ms_to_ticks_ceil64+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
   254f2:	6a3a      	ldr	r2, [r7, #32]
   254f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   254f6:	fbb2 f3f3 	udiv	r3, r2, r3
   254fa:	461a      	mov	r2, r3
   254fc:	f04f 0300 	mov.w	r3, #0
   25500:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   25502:	fb03 f001 	mul.w	r0, r3, r1
   25506:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   25508:	fb02 f101 	mul.w	r1, r2, r1
   2550c:	4401      	add	r1, r0
   2550e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   25510:	fba0 2302 	umull	r2, r3, r0, r2
   25514:	4419      	add	r1, r3
   25516:	460b      	mov	r3, r1
   25518:	e047      	b.n	255aa <k_ms_to_ticks_ceil64+0x23c>
		if (result32) {
   2551a:	7fbb      	ldrb	r3, [r7, #30]
   2551c:	2b00      	cmp	r3, #0
   2551e:	d024      	beq.n	2556a <k_ms_to_ticks_ceil64+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   25520:	6a3b      	ldr	r3, [r7, #32]
   25522:	461a      	mov	r2, r3
   25524:	f04f 0300 	mov.w	r3, #0
   25528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2552a:	fb03 f001 	mul.w	r0, r3, r1
   2552e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   25530:	fb02 f101 	mul.w	r1, r2, r1
   25534:	4401      	add	r1, r0
   25536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   25538:	fba0 2302 	umull	r2, r3, r0, r2
   2553c:	4419      	add	r1, r3
   2553e:	460b      	mov	r3, r1
   25540:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   25544:	eb12 0a00 	adds.w	sl, r2, r0
   25548:	eb43 0b01 	adc.w	fp, r3, r1
   2554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2554e:	461a      	mov	r2, r3
   25550:	f04f 0300 	mov.w	r3, #0
   25554:	4650      	mov	r0, sl
   25556:	4659      	mov	r1, fp
   25558:	f7ea fe70 	bl	1023c <__aeabi_uldivmod>
   2555c:	4602      	mov	r2, r0
   2555e:	460b      	mov	r3, r1
   25560:	4613      	mov	r3, r2
   25562:	461a      	mov	r2, r3
   25564:	f04f 0300 	mov.w	r3, #0
   25568:	e01f      	b.n	255aa <k_ms_to_ticks_ceil64+0x23c>
			return (t * to_hz + off) / from_hz;
   2556a:	6a3b      	ldr	r3, [r7, #32]
   2556c:	461a      	mov	r2, r3
   2556e:	f04f 0300 	mov.w	r3, #0
   25572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   25574:	fb03 f001 	mul.w	r0, r3, r1
   25578:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   2557a:	fb02 f101 	mul.w	r1, r2, r1
   2557e:	4401      	add	r1, r0
   25580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   25582:	fba0 2302 	umull	r2, r3, r0, r2
   25586:	4419      	add	r1, r3
   25588:	460b      	mov	r3, r1
   2558a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   2558e:	eb12 0800 	adds.w	r8, r2, r0
   25592:	eb43 0901 	adc.w	r9, r3, r1
   25596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25598:	461a      	mov	r2, r3
   2559a:	f04f 0300 	mov.w	r3, #0
   2559e:	4640      	mov	r0, r8
   255a0:	4649      	mov	r1, r9
   255a2:	f7ea fe4b 	bl	1023c <__aeabi_uldivmod>
   255a6:	4602      	mov	r2, r0
   255a8:	460b      	mov	r3, r1
}
   255aa:	4610      	mov	r0, r2
   255ac:	4619      	mov	r1, r3
   255ae:	3730      	adds	r7, #48	; 0x30
   255b0:	46bd      	mov	sp, r7
   255b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

000255b6 <k_msleep>:
{
   255b6:	b580      	push	{r7, lr}
   255b8:	b082      	sub	sp, #8
   255ba:	af00      	add	r7, sp, #0
   255bc:	6078      	str	r0, [r7, #4]
	return k_sleep(Z_TIMEOUT_MS(ms));
   255be:	687b      	ldr	r3, [r7, #4]
   255c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   255c4:	461a      	mov	r2, r3
   255c6:	ea4f 73e2 	mov.w	r3, r2, asr #31
   255ca:	4610      	mov	r0, r2
   255cc:	4619      	mov	r1, r3
   255ce:	f7ff fece 	bl	2536e <k_ms_to_ticks_ceil64>
   255d2:	4602      	mov	r2, r0
   255d4:	460b      	mov	r3, r1
   255d6:	4610      	mov	r0, r2
   255d8:	4619      	mov	r1, r3
   255da:	f000 f806 	bl	255ea <k_sleep>
   255de:	4601      	mov	r1, r0
   255e0:	460b      	mov	r3, r1
}
   255e2:	4618      	mov	r0, r3
   255e4:	3708      	adds	r7, #8
   255e6:	46bd      	mov	sp, r7
   255e8:	bd80      	pop	{r7, pc}

000255ea <k_sleep>:
{
   255ea:	b580      	push	{r7, lr}
   255ec:	b082      	sub	sp, #8
   255ee:	af00      	add	r7, sp, #0
   255f0:	e9c7 0100 	strd	r0, r1, [r7]
	return z_impl_k_sleep(timeout);
   255f4:	e9d7 0100 	ldrd	r0, r1, [r7]
   255f8:	f7fa fb80 	bl	1fcfc <z_impl_k_sleep>
   255fc:	4603      	mov	r3, r0
}
   255fe:	4618      	mov	r0, r3
   25600:	3708      	adds	r7, #8
   25602:	46bd      	mov	sp, r7
   25604:	bd80      	pop	{r7, pc}

00025606 <nrf_gpio_cfg>:
{
   25606:	b580      	push	{r7, lr}
   25608:	b084      	sub	sp, #16
   2560a:	af00      	add	r7, sp, #0
   2560c:	6078      	str	r0, [r7, #4]
   2560e:	4608      	mov	r0, r1
   25610:	4611      	mov	r1, r2
   25612:	461a      	mov	r2, r3
   25614:	4603      	mov	r3, r0
   25616:	70fb      	strb	r3, [r7, #3]
   25618:	460b      	mov	r3, r1
   2561a:	70bb      	strb	r3, [r7, #2]
   2561c:	4613      	mov	r3, r2
   2561e:	707b      	strb	r3, [r7, #1]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   25620:	1d3b      	adds	r3, r7, #4
   25622:	4618      	mov	r0, r3
   25624:	f7f3 f904 	bl	18830 <nrf_gpio_pin_port_decode>
   25628:	60f8      	str	r0, [r7, #12]
    uint32_t cnf = 0;
   2562a:	2300      	movs	r3, #0
   2562c:	60bb      	str	r3, [r7, #8]
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2562e:	78fa      	ldrb	r2, [r7, #3]
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   25630:	78bb      	ldrb	r3, [r7, #2]
   25632:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   25634:	431a      	orrs	r2, r3
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   25636:	787b      	ldrb	r3, [r7, #1]
   25638:	009b      	lsls	r3, r3, #2
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   2563a:	431a      	orrs	r2, r3
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   2563c:	7e3b      	ldrb	r3, [r7, #24]
   2563e:	021b      	lsls	r3, r3, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   25640:	431a      	orrs	r2, r3
           ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);
   25642:	7f3b      	ldrb	r3, [r7, #28]
   25644:	041b      	lsls	r3, r3, #16
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   25646:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   25648:	68ba      	ldr	r2, [r7, #8]
   2564a:	4313      	orrs	r3, r2
   2564c:	60bb      	str	r3, [r7, #8]
    reg->PIN_CNF[pin_number] = cnf;
   2564e:	687a      	ldr	r2, [r7, #4]
   25650:	68fb      	ldr	r3, [r7, #12]
   25652:	3280      	adds	r2, #128	; 0x80
   25654:	68b9      	ldr	r1, [r7, #8]
   25656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   2565a:	bf00      	nop
   2565c:	3710      	adds	r7, #16
   2565e:	46bd      	mov	sp, r7
   25660:	bd80      	pop	{r7, pc}

00025662 <nrf_gpio_cfg_output>:
{
   25662:	b580      	push	{r7, lr}
   25664:	b084      	sub	sp, #16
   25666:	af02      	add	r7, sp, #8
   25668:	6078      	str	r0, [r7, #4]
    nrf_gpio_cfg(
   2566a:	2300      	movs	r3, #0
   2566c:	9301      	str	r3, [sp, #4]
   2566e:	2300      	movs	r3, #0
   25670:	9300      	str	r3, [sp, #0]
   25672:	2300      	movs	r3, #0
   25674:	2201      	movs	r2, #1
   25676:	2101      	movs	r1, #1
   25678:	6878      	ldr	r0, [r7, #4]
   2567a:	f7ff ffc4 	bl	25606 <nrf_gpio_cfg>
}
   2567e:	bf00      	nop
   25680:	3708      	adds	r7, #8
   25682:	46bd      	mov	sp, r7
   25684:	bd80      	pop	{r7, pc}

00025686 <nrf_gpio_cfg_input>:
{
   25686:	b580      	push	{r7, lr}
   25688:	b084      	sub	sp, #16
   2568a:	af02      	add	r7, sp, #8
   2568c:	6078      	str	r0, [r7, #4]
   2568e:	460b      	mov	r3, r1
   25690:	70fb      	strb	r3, [r7, #3]
    nrf_gpio_cfg(
   25692:	78fb      	ldrb	r3, [r7, #3]
   25694:	2200      	movs	r2, #0
   25696:	9201      	str	r2, [sp, #4]
   25698:	2200      	movs	r2, #0
   2569a:	9200      	str	r2, [sp, #0]
   2569c:	2200      	movs	r2, #0
   2569e:	2100      	movs	r1, #0
   256a0:	6878      	ldr	r0, [r7, #4]
   256a2:	f7ff ffb0 	bl	25606 <nrf_gpio_cfg>
}
   256a6:	bf00      	nop
   256a8:	3708      	adds	r7, #8
   256aa:	46bd      	mov	sp, r7
   256ac:	bd80      	pop	{r7, pc}

000256ae <nrf_gpio_pin_set>:
{
   256ae:	b580      	push	{r7, lr}
   256b0:	b084      	sub	sp, #16
   256b2:	af00      	add	r7, sp, #0
   256b4:	6078      	str	r0, [r7, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   256b6:	1d3b      	adds	r3, r7, #4
   256b8:	4618      	mov	r0, r3
   256ba:	f7f3 f8b9 	bl	18830 <nrf_gpio_pin_port_decode>
   256be:	60f8      	str	r0, [r7, #12]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   256c0:	687b      	ldr	r3, [r7, #4]
   256c2:	2201      	movs	r2, #1
   256c4:	fa02 f303 	lsl.w	r3, r2, r3
   256c8:	4619      	mov	r1, r3
   256ca:	68f8      	ldr	r0, [r7, #12]
   256cc:	f000 f82c 	bl	25728 <nrf_gpio_port_out_set>
}
   256d0:	bf00      	nop
   256d2:	3710      	adds	r7, #16
   256d4:	46bd      	mov	sp, r7
   256d6:	bd80      	pop	{r7, pc}

000256d8 <nrf_gpio_pin_clear>:
{
   256d8:	b580      	push	{r7, lr}
   256da:	b084      	sub	sp, #16
   256dc:	af00      	add	r7, sp, #0
   256de:	6078      	str	r0, [r7, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   256e0:	1d3b      	adds	r3, r7, #4
   256e2:	4618      	mov	r0, r3
   256e4:	f7f3 f8a4 	bl	18830 <nrf_gpio_pin_port_decode>
   256e8:	60f8      	str	r0, [r7, #12]
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   256ea:	687b      	ldr	r3, [r7, #4]
   256ec:	2201      	movs	r2, #1
   256ee:	fa02 f303 	lsl.w	r3, r2, r3
   256f2:	4619      	mov	r1, r3
   256f4:	68f8      	ldr	r0, [r7, #12]
   256f6:	f000 f824 	bl	25742 <nrf_gpio_port_out_clear>
}
   256fa:	bf00      	nop
   256fc:	3710      	adds	r7, #16
   256fe:	46bd      	mov	sp, r7
   25700:	bd80      	pop	{r7, pc}

00025702 <nrf_gpio_pin_write>:
{
   25702:	b580      	push	{r7, lr}
   25704:	b082      	sub	sp, #8
   25706:	af00      	add	r7, sp, #0
   25708:	6078      	str	r0, [r7, #4]
   2570a:	6039      	str	r1, [r7, #0]
    if (value == 0)
   2570c:	683b      	ldr	r3, [r7, #0]
   2570e:	2b00      	cmp	r3, #0
   25710:	d103      	bne.n	2571a <nrf_gpio_pin_write+0x18>
        nrf_gpio_pin_clear(pin_number);
   25712:	6878      	ldr	r0, [r7, #4]
   25714:	f7ff ffe0 	bl	256d8 <nrf_gpio_pin_clear>
}
   25718:	e002      	b.n	25720 <nrf_gpio_pin_write+0x1e>
        nrf_gpio_pin_set(pin_number);
   2571a:	6878      	ldr	r0, [r7, #4]
   2571c:	f7ff ffc7 	bl	256ae <nrf_gpio_pin_set>
}
   25720:	bf00      	nop
   25722:	3708      	adds	r7, #8
   25724:	46bd      	mov	sp, r7
   25726:	bd80      	pop	{r7, pc}

00025728 <nrf_gpio_port_out_set>:
{
   25728:	b480      	push	{r7}
   2572a:	b083      	sub	sp, #12
   2572c:	af00      	add	r7, sp, #0
   2572e:	6078      	str	r0, [r7, #4]
   25730:	6039      	str	r1, [r7, #0]
    p_reg->OUTSET = set_mask;
   25732:	687b      	ldr	r3, [r7, #4]
   25734:	683a      	ldr	r2, [r7, #0]
   25736:	609a      	str	r2, [r3, #8]
}
   25738:	bf00      	nop
   2573a:	370c      	adds	r7, #12
   2573c:	46bd      	mov	sp, r7
   2573e:	bc80      	pop	{r7}
   25740:	4770      	bx	lr

00025742 <nrf_gpio_port_out_clear>:
{
   25742:	b480      	push	{r7}
   25744:	b083      	sub	sp, #12
   25746:	af00      	add	r7, sp, #0
   25748:	6078      	str	r0, [r7, #4]
   2574a:	6039      	str	r1, [r7, #0]
    p_reg->OUTCLR = clr_mask;
   2574c:	687b      	ldr	r3, [r7, #4]
   2574e:	683a      	ldr	r2, [r7, #0]
   25750:	60da      	str	r2, [r3, #12]
}
   25752:	bf00      	nop
   25754:	370c      	adds	r7, #12
   25756:	46bd      	mov	sp, r7
   25758:	bc80      	pop	{r7}
   2575a:	4770      	bx	lr

0002575c <nrf_gpio_pin_present_check>:
{
   2575c:	b480      	push	{r7}
   2575e:	b085      	sub	sp, #20
   25760:	af00      	add	r7, sp, #0
   25762:	6078      	str	r0, [r7, #4]
    uint32_t port = pin_number >> 5;
   25764:	687b      	ldr	r3, [r7, #4]
   25766:	095b      	lsrs	r3, r3, #5
   25768:	60bb      	str	r3, [r7, #8]
    uint32_t mask = 0;
   2576a:	2300      	movs	r3, #0
   2576c:	60fb      	str	r3, [r7, #12]
    switch (port)
   2576e:	68bb      	ldr	r3, [r7, #8]
   25770:	2b00      	cmp	r3, #0
   25772:	d103      	bne.n	2577c <nrf_gpio_pin_present_check+0x20>
            mask = P0_FEATURE_PINS_PRESENT;
   25774:	f04f 33ff 	mov.w	r3, #4294967295
   25778:	60fb      	str	r3, [r7, #12]
            break;
   2577a:	bf00      	nop
    pin_number &= 0x1F;
   2577c:	687b      	ldr	r3, [r7, #4]
   2577e:	f003 031f 	and.w	r3, r3, #31
   25782:	607b      	str	r3, [r7, #4]
    return (mask & (1UL << pin_number)) ? true : false;
   25784:	68fa      	ldr	r2, [r7, #12]
   25786:	687b      	ldr	r3, [r7, #4]
   25788:	fa22 f303 	lsr.w	r3, r2, r3
   2578c:	f003 0301 	and.w	r3, r3, #1
   25790:	2b00      	cmp	r3, #0
   25792:	bf14      	ite	ne
   25794:	2301      	movne	r3, #1
   25796:	2300      	moveq	r3, #0
   25798:	b2db      	uxtb	r3, r3
}
   2579a:	4618      	mov	r0, r3
   2579c:	3714      	adds	r7, #20
   2579e:	46bd      	mov	sp, r7
   257a0:	bc80      	pop	{r7}
   257a2:	4770      	bx	lr

000257a4 <nrf_gpio_pin_port_number_extract>:
{
   257a4:	b480      	push	{r7}
   257a6:	b085      	sub	sp, #20
   257a8:	af00      	add	r7, sp, #0
   257aa:	6078      	str	r0, [r7, #4]
    uint32_t pin_number = *p_pin;
   257ac:	687b      	ldr	r3, [r7, #4]
   257ae:	681b      	ldr	r3, [r3, #0]
   257b0:	60fb      	str	r3, [r7, #12]
    *p_pin = pin_number & 0x1F;
   257b2:	68fb      	ldr	r3, [r7, #12]
   257b4:	f003 021f 	and.w	r2, r3, #31
   257b8:	687b      	ldr	r3, [r7, #4]
   257ba:	601a      	str	r2, [r3, #0]
    return pin_number >> 5;
   257bc:	68fb      	ldr	r3, [r7, #12]
   257be:	095b      	lsrs	r3, r3, #5
}
   257c0:	4618      	mov	r0, r3
   257c2:	3714      	adds	r7, #20
   257c4:	46bd      	mov	sp, r7
   257c6:	bc80      	pop	{r7}
   257c8:	4770      	bx	lr

000257ca <nrf_uarte_event_clear>:
 */
NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg);

#ifndef NRF_DECLARE_ONLY
NRF_STATIC_INLINE void nrf_uarte_event_clear(NRF_UARTE_Type * p_reg, nrf_uarte_event_t event)
{
   257ca:	b580      	push	{r7, lr}
   257cc:	b082      	sub	sp, #8
   257ce:	af00      	add	r7, sp, #0
   257d0:	6078      	str	r0, [r7, #4]
   257d2:	460b      	mov	r3, r1
   257d4:	807b      	strh	r3, [r7, #2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   257d6:	887b      	ldrh	r3, [r7, #2]
   257d8:	687a      	ldr	r2, [r7, #4]
   257da:	4413      	add	r3, r2
   257dc:	2200      	movs	r2, #0
   257de:	601a      	str	r2, [r3, #0]
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
   257e0:	887b      	ldrh	r3, [r7, #2]
   257e2:	687a      	ldr	r2, [r7, #4]
   257e4:	4413      	add	r3, r2
   257e6:	4618      	mov	r0, r3
   257e8:	f7ff fdb6 	bl	25358 <nrf_event_readback>
}
   257ec:	bf00      	nop
   257ee:	3708      	adds	r7, #8
   257f0:	46bd      	mov	sp, r7
   257f2:	bd80      	pop	{r7, pc}

000257f4 <nrf_uarte_event_check>:

NRF_STATIC_INLINE bool nrf_uarte_event_check(NRF_UARTE_Type const * p_reg,
                                             nrf_uarte_event_t      event)
{
   257f4:	b480      	push	{r7}
   257f6:	b083      	sub	sp, #12
   257f8:	af00      	add	r7, sp, #0
   257fa:	6078      	str	r0, [r7, #4]
   257fc:	460b      	mov	r3, r1
   257fe:	807b      	strh	r3, [r7, #2]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25800:	887b      	ldrh	r3, [r7, #2]
   25802:	687a      	ldr	r2, [r7, #4]
   25804:	4413      	add	r3, r2
   25806:	681b      	ldr	r3, [r3, #0]
   25808:	2b00      	cmp	r3, #0
   2580a:	bf14      	ite	ne
   2580c:	2301      	movne	r3, #1
   2580e:	2300      	moveq	r3, #0
   25810:	b2db      	uxtb	r3, r3
}
   25812:	4618      	mov	r0, r3
   25814:	370c      	adds	r7, #12
   25816:	46bd      	mov	sp, r7
   25818:	bc80      	pop	{r7}
   2581a:	4770      	bx	lr

0002581c <nrf_uarte_event_address_get>:

NRF_STATIC_INLINE uint32_t nrf_uarte_event_address_get(NRF_UARTE_Type const * p_reg,
                                                       nrf_uarte_event_t      event)
{
   2581c:	b480      	push	{r7}
   2581e:	b083      	sub	sp, #12
   25820:	af00      	add	r7, sp, #0
   25822:	6078      	str	r0, [r7, #4]
   25824:	460b      	mov	r3, r1
   25826:	807b      	strh	r3, [r7, #2]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   25828:	887b      	ldrh	r3, [r7, #2]
   2582a:	687a      	ldr	r2, [r7, #4]
   2582c:	4413      	add	r3, r2
}
   2582e:	4618      	mov	r0, r3
   25830:	370c      	adds	r7, #12
   25832:	46bd      	mov	sp, r7
   25834:	bc80      	pop	{r7}
   25836:	4770      	bx	lr

00025838 <nrf_uarte_int_enable>:
{
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
   25838:	b480      	push	{r7}
   2583a:	b083      	sub	sp, #12
   2583c:	af00      	add	r7, sp, #0
   2583e:	6078      	str	r0, [r7, #4]
   25840:	6039      	str	r1, [r7, #0]
    p_reg->INTENSET = mask;
   25842:	687b      	ldr	r3, [r7, #4]
   25844:	683a      	ldr	r2, [r7, #0]
   25846:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2584a:	bf00      	nop
   2584c:	370c      	adds	r7, #12
   2584e:	46bd      	mov	sp, r7
   25850:	bc80      	pop	{r7}
   25852:	4770      	bx	lr

00025854 <nrf_uarte_int_enable_check>:

NRF_STATIC_INLINE uint32_t nrf_uarte_int_enable_check(NRF_UARTE_Type const * p_reg, uint32_t mask)
{
   25854:	b480      	push	{r7}
   25856:	b083      	sub	sp, #12
   25858:	af00      	add	r7, sp, #0
   2585a:	6078      	str	r0, [r7, #4]
   2585c:	6039      	str	r1, [r7, #0]
    return p_reg->INTENSET & mask;
   2585e:	687b      	ldr	r3, [r7, #4]
   25860:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
   25864:	683b      	ldr	r3, [r7, #0]
   25866:	4013      	ands	r3, r2
}
   25868:	4618      	mov	r0, r3
   2586a:	370c      	adds	r7, #12
   2586c:	46bd      	mov	sp, r7
   2586e:	bc80      	pop	{r7}
   25870:	4770      	bx	lr

00025872 <nrf_uarte_int_disable>:

NRF_STATIC_INLINE void nrf_uarte_int_disable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
   25872:	b480      	push	{r7}
   25874:	b083      	sub	sp, #12
   25876:	af00      	add	r7, sp, #0
   25878:	6078      	str	r0, [r7, #4]
   2587a:	6039      	str	r1, [r7, #0]
    p_reg->INTENCLR = mask;
   2587c:	687b      	ldr	r3, [r7, #4]
   2587e:	683a      	ldr	r2, [r7, #0]
   25880:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   25884:	bf00      	nop
   25886:	370c      	adds	r7, #12
   25888:	46bd      	mov	sp, r7
   2588a:	bc80      	pop	{r7}
   2588c:	4770      	bx	lr

0002588e <nrf_uarte_errorsrc_get_and_clear>:
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
}
#endif // defined(DPPI_PRESENT)

NRF_STATIC_INLINE uint32_t nrf_uarte_errorsrc_get_and_clear(NRF_UARTE_Type * p_reg)
{
   2588e:	b480      	push	{r7}
   25890:	b085      	sub	sp, #20
   25892:	af00      	add	r7, sp, #0
   25894:	6078      	str	r0, [r7, #4]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   25896:	687b      	ldr	r3, [r7, #4]
   25898:	f8d3 3480 	ldr.w	r3, [r3, #1152]	; 0x480
   2589c:	60fb      	str	r3, [r7, #12]
    p_reg->ERRORSRC = errsrc_mask;
   2589e:	687b      	ldr	r3, [r7, #4]
   258a0:	68fa      	ldr	r2, [r7, #12]
   258a2:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
    return errsrc_mask;
   258a6:	68fb      	ldr	r3, [r7, #12]
}
   258a8:	4618      	mov	r0, r3
   258aa:	3714      	adds	r7, #20
   258ac:	46bd      	mov	sp, r7
   258ae:	bc80      	pop	{r7}
   258b0:	4770      	bx	lr

000258b2 <nrf_uarte_enable>:

NRF_STATIC_INLINE void nrf_uarte_enable(NRF_UARTE_Type * p_reg)
{
   258b2:	b480      	push	{r7}
   258b4:	b083      	sub	sp, #12
   258b6:	af00      	add	r7, sp, #0
   258b8:	6078      	str	r0, [r7, #4]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   258ba:	687b      	ldr	r3, [r7, #4]
   258bc:	2208      	movs	r2, #8
   258be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   258c2:	bf00      	nop
   258c4:	370c      	adds	r7, #12
   258c6:	46bd      	mov	sp, r7
   258c8:	bc80      	pop	{r7}
   258ca:	4770      	bx	lr

000258cc <nrf_uarte_disable>:

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
   258cc:	b480      	push	{r7}
   258ce:	b083      	sub	sp, #12
   258d0:	af00      	add	r7, sp, #0
   258d2:	6078      	str	r0, [r7, #4]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   258d4:	687b      	ldr	r3, [r7, #4]
   258d6:	2200      	movs	r2, #0
   258d8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   258dc:	bf00      	nop
   258de:	370c      	adds	r7, #12
   258e0:	46bd      	mov	sp, r7
   258e2:	bc80      	pop	{r7}
   258e4:	4770      	bx	lr

000258e6 <nrf_uarte_txrx_pins_set>:

NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pseltxd,
                                               uint32_t         pselrxd)
{
   258e6:	b480      	push	{r7}
   258e8:	b085      	sub	sp, #20
   258ea:	af00      	add	r7, sp, #0
   258ec:	60f8      	str	r0, [r7, #12]
   258ee:	60b9      	str	r1, [r7, #8]
   258f0:	607a      	str	r2, [r7, #4]
    p_reg->PSEL.TXD = pseltxd;
   258f2:	68fb      	ldr	r3, [r7, #12]
   258f4:	68ba      	ldr	r2, [r7, #8]
   258f6:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   258fa:	68fb      	ldr	r3, [r7, #12]
   258fc:	687a      	ldr	r2, [r7, #4]
   258fe:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
}
   25902:	bf00      	nop
   25904:	3714      	adds	r7, #20
   25906:	46bd      	mov	sp, r7
   25908:	bc80      	pop	{r7}
   2590a:	4770      	bx	lr

0002590c <nrf_uarte_hwfc_pins_set>:
}

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
   2590c:	b480      	push	{r7}
   2590e:	b085      	sub	sp, #20
   25910:	af00      	add	r7, sp, #0
   25912:	60f8      	str	r0, [r7, #12]
   25914:	60b9      	str	r1, [r7, #8]
   25916:	607a      	str	r2, [r7, #4]
    p_reg->PSEL.RTS = pselrts;
   25918:	68fb      	ldr	r3, [r7, #12]
   2591a:	68ba      	ldr	r2, [r7, #8]
   2591c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   25920:	68fb      	ldr	r3, [r7, #12]
   25922:	687a      	ldr	r2, [r7, #4]
   25924:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   25928:	bf00      	nop
   2592a:	3714      	adds	r7, #20
   2592c:	46bd      	mov	sp, r7
   2592e:	bc80      	pop	{r7}
   25930:	4770      	bx	lr

00025932 <nrf_uarte_task_trigger>:
{
    nrf_uarte_hwfc_pins_set(p_reg, NRF_UARTE_PSEL_DISCONNECTED, NRF_UARTE_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE void nrf_uarte_task_trigger(NRF_UARTE_Type * p_reg, nrf_uarte_task_t task)
{
   25932:	b480      	push	{r7}
   25934:	b083      	sub	sp, #12
   25936:	af00      	add	r7, sp, #0
   25938:	6078      	str	r0, [r7, #4]
   2593a:	460b      	mov	r3, r1
   2593c:	70fb      	strb	r3, [r7, #3]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2593e:	78fb      	ldrb	r3, [r7, #3]
   25940:	687a      	ldr	r2, [r7, #4]
   25942:	4413      	add	r3, r2
   25944:	2201      	movs	r2, #1
   25946:	601a      	str	r2, [r3, #0]
}
   25948:	bf00      	nop
   2594a:	370c      	adds	r7, #12
   2594c:	46bd      	mov	sp, r7
   2594e:	bc80      	pop	{r7}
   25950:	4770      	bx	lr

00025952 <nrf_uarte_task_address_get>:

NRF_STATIC_INLINE uint32_t nrf_uarte_task_address_get(NRF_UARTE_Type const * p_reg,
                                                      nrf_uarte_task_t       task)
{
   25952:	b480      	push	{r7}
   25954:	b083      	sub	sp, #12
   25956:	af00      	add	r7, sp, #0
   25958:	6078      	str	r0, [r7, #4]
   2595a:	460b      	mov	r3, r1
   2595c:	70fb      	strb	r3, [r7, #3]
    return (uint32_t)p_reg + (uint32_t)task;
   2595e:	78fa      	ldrb	r2, [r7, #3]
   25960:	687b      	ldr	r3, [r7, #4]
   25962:	4413      	add	r3, r2
}
   25964:	4618      	mov	r0, r3
   25966:	370c      	adds	r7, #12
   25968:	46bd      	mov	sp, r7
   2596a:	bc80      	pop	{r7}
   2596c:	4770      	bx	lr

0002596e <nrf_uarte_configure>:

NRF_STATIC_INLINE void nrf_uarte_configure(NRF_UARTE_Type           * p_reg,
                                           nrf_uarte_config_t const * p_cfg)
{
   2596e:	b480      	push	{r7}
   25970:	b083      	sub	sp, #12
   25972:	af00      	add	r7, sp, #0
   25974:	6078      	str	r0, [r7, #4]
   25976:	6039      	str	r1, [r7, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   25978:	683b      	ldr	r3, [r7, #0]
   2597a:	785a      	ldrb	r2, [r3, #1]
#if defined(UARTE_CONFIG_STOP_Msk)
                    | (uint32_t)p_cfg->stop
   2597c:	683b      	ldr	r3, [r7, #0]
   2597e:	789b      	ldrb	r3, [r3, #2]
#endif
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
                    | (uint32_t)p_cfg->paritytype
#endif
                    | (uint32_t)p_cfg->hwfc;
   25980:	4313      	orrs	r3, r2
   25982:	b2da      	uxtb	r2, r3
   25984:	683b      	ldr	r3, [r7, #0]
   25986:	781b      	ldrb	r3, [r3, #0]
   25988:	4313      	orrs	r3, r2
   2598a:	b2db      	uxtb	r3, r3
   2598c:	461a      	mov	r2, r3
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2598e:	687b      	ldr	r3, [r7, #4]
   25990:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
}
   25994:	bf00      	nop
   25996:	370c      	adds	r7, #12
   25998:	46bd      	mov	sp, r7
   2599a:	bc80      	pop	{r7}
   2599c:	4770      	bx	lr

0002599e <nrf_uarte_baudrate_set>:

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
   2599e:	b480      	push	{r7}
   259a0:	b083      	sub	sp, #12
   259a2:	af00      	add	r7, sp, #0
   259a4:	6078      	str	r0, [r7, #4]
   259a6:	6039      	str	r1, [r7, #0]
    p_reg->BAUDRATE = baudrate;
   259a8:	687b      	ldr	r3, [r7, #4]
   259aa:	683a      	ldr	r2, [r7, #0]
   259ac:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
}
   259b0:	bf00      	nop
   259b2:	370c      	adds	r7, #12
   259b4:	46bd      	mov	sp, r7
   259b6:	bc80      	pop	{r7}
   259b8:	4770      	bx	lr

000259ba <nrf_uarte_tx_buffer_set>:

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
   259ba:	b480      	push	{r7}
   259bc:	b085      	sub	sp, #20
   259be:	af00      	add	r7, sp, #0
   259c0:	60f8      	str	r0, [r7, #12]
   259c2:	60b9      	str	r1, [r7, #8]
   259c4:	607a      	str	r2, [r7, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   259c6:	68ba      	ldr	r2, [r7, #8]
   259c8:	68fb      	ldr	r3, [r7, #12]
   259ca:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   259ce:	68fb      	ldr	r3, [r7, #12]
   259d0:	687a      	ldr	r2, [r7, #4]
   259d2:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
}
   259d6:	bf00      	nop
   259d8:	3714      	adds	r7, #20
   259da:	46bd      	mov	sp, r7
   259dc:	bc80      	pop	{r7}
   259de:	4770      	bx	lr

000259e0 <nrf_uarte_rx_buffer_set>:
}

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
   259e0:	b480      	push	{r7}
   259e2:	b085      	sub	sp, #20
   259e4:	af00      	add	r7, sp, #0
   259e6:	60f8      	str	r0, [r7, #12]
   259e8:	60b9      	str	r1, [r7, #8]
   259ea:	607a      	str	r2, [r7, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   259ec:	68ba      	ldr	r2, [r7, #8]
   259ee:	68fb      	ldr	r3, [r7, #12]
   259f0:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   259f4:	68fb      	ldr	r3, [r7, #12]
   259f6:	687a      	ldr	r2, [r7, #4]
   259f8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
}
   259fc:	bf00      	nop
   259fe:	3714      	adds	r7, #20
   25a00:	46bd      	mov	sp, r7
   25a02:	bc80      	pop	{r7}
   25a04:	4770      	bx	lr

00025a06 <nrf_dppi_channels_enable>:
{
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
   25a06:	b480      	push	{r7}
   25a08:	b083      	sub	sp, #12
   25a0a:	af00      	add	r7, sp, #0
   25a0c:	6078      	str	r0, [r7, #4]
   25a0e:	6039      	str	r1, [r7, #0]
    p_reg->CHENSET = mask;
   25a10:	687b      	ldr	r3, [r7, #4]
   25a12:	683a      	ldr	r2, [r7, #0]
   25a14:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   25a18:	bf00      	nop
   25a1a:	370c      	adds	r7, #12
   25a1c:	46bd      	mov	sp, r7
   25a1e:	bc80      	pop	{r7}
   25a20:	4770      	bx	lr

00025a22 <nrfx_gppi_channel_endpoints_setup>:

__STATIC_INLINE void nrfx_gppi_channel_endpoints_setup(uint8_t  channel,
                                                       uint32_t eep,
                                                       uint32_t tep)
{
   25a22:	b580      	push	{r7, lr}
   25a24:	b084      	sub	sp, #16
   25a26:	af00      	add	r7, sp, #0
   25a28:	4603      	mov	r3, r0
   25a2a:	60b9      	str	r1, [r7, #8]
   25a2c:	607a      	str	r2, [r7, #4]
   25a2e:	73fb      	strb	r3, [r7, #15]
    nrfx_gppi_event_endpoint_setup(channel, eep);
   25a30:	7bfb      	ldrb	r3, [r7, #15]
   25a32:	68b9      	ldr	r1, [r7, #8]
   25a34:	4618      	mov	r0, r3
   25a36:	f7f2 ff55 	bl	188e4 <nrfx_gppi_event_endpoint_setup>
    nrfx_gppi_task_endpoint_setup(channel, tep);
   25a3a:	7bfb      	ldrb	r3, [r7, #15]
   25a3c:	6879      	ldr	r1, [r7, #4]
   25a3e:	4618      	mov	r0, r3
   25a40:	f7f2 ff76 	bl	18930 <nrfx_gppi_task_endpoint_setup>
}
   25a44:	bf00      	nop
   25a46:	3710      	adds	r7, #16
   25a48:	46bd      	mov	sp, r7
   25a4a:	bd80      	pop	{r7, pc}

00025a4c <get_dev_data>:
{
   25a4c:	b480      	push	{r7}
   25a4e:	b083      	sub	sp, #12
   25a50:	af00      	add	r7, sp, #0
   25a52:	6078      	str	r0, [r7, #4]
	return dev->data;
   25a54:	687b      	ldr	r3, [r7, #4]
   25a56:	691b      	ldr	r3, [r3, #16]
}
   25a58:	4618      	mov	r0, r3
   25a5a:	370c      	adds	r7, #12
   25a5c:	46bd      	mov	sp, r7
   25a5e:	bc80      	pop	{r7}
   25a60:	4770      	bx	lr

00025a62 <get_dev_config>:
{
   25a62:	b480      	push	{r7}
   25a64:	b083      	sub	sp, #12
   25a66:	af00      	add	r7, sp, #0
   25a68:	6078      	str	r0, [r7, #4]
	return dev->config;
   25a6a:	687b      	ldr	r3, [r7, #4]
   25a6c:	685b      	ldr	r3, [r3, #4]
}
   25a6e:	4618      	mov	r0, r3
   25a70:	370c      	adds	r7, #12
   25a72:	46bd      	mov	sp, r7
   25a74:	bc80      	pop	{r7}
   25a76:	4770      	bx	lr

00025a78 <get_uarte_instance>:
{
   25a78:	b580      	push	{r7, lr}
   25a7a:	b084      	sub	sp, #16
   25a7c:	af00      	add	r7, sp, #0
   25a7e:	6078      	str	r0, [r7, #4]
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   25a80:	6878      	ldr	r0, [r7, #4]
   25a82:	f7ff ffee 	bl	25a62 <get_dev_config>
   25a86:	60f8      	str	r0, [r7, #12]
	return config->uarte_regs;
   25a88:	68fb      	ldr	r3, [r7, #12]
   25a8a:	681b      	ldr	r3, [r3, #0]
}
   25a8c:	4618      	mov	r0, r3
   25a8e:	3710      	adds	r7, #16
   25a90:	46bd      	mov	sp, r7
   25a92:	bd80      	pop	{r7, pc}

00025a94 <endtx_isr>:
{
   25a94:	b580      	push	{r7, lr}
   25a96:	b088      	sub	sp, #32
   25a98:	af00      	add	r7, sp, #0
   25a9a:	6078      	str	r0, [r7, #4]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   25a9c:	6878      	ldr	r0, [r7, #4]
   25a9e:	f7ff ffeb 	bl	25a78 <get_uarte_instance>
   25aa2:	61f8      	str	r0, [r7, #28]
	__asm__ volatile(
   25aa4:	f04f 0320 	mov.w	r3, #32
   25aa8:	f3ef 8211 	mrs	r2, BASEPRI
   25aac:	f383 8811 	msr	BASEPRI, r3
   25ab0:	f3bf 8f6f 	isb	sy
   25ab4:	617a      	str	r2, [r7, #20]
   25ab6:	613b      	str	r3, [r7, #16]
	return key;
   25ab8:	697b      	ldr	r3, [r7, #20]
	int key = irq_lock();
   25aba:	61bb      	str	r3, [r7, #24]
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   25abc:	f44f 7190 	mov.w	r1, #288	; 0x120
   25ac0:	69f8      	ldr	r0, [r7, #28]
   25ac2:	f7ff fe97 	bl	257f4 <nrf_uarte_event_check>
   25ac6:	4603      	mov	r3, r0
   25ac8:	2b00      	cmp	r3, #0
   25aca:	d008      	beq.n	25ade <endtx_isr+0x4a>
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDTX);
   25acc:	f44f 7190 	mov.w	r1, #288	; 0x120
   25ad0:	69f8      	ldr	r0, [r7, #28]
   25ad2:	f7ff fe7a 	bl	257ca <nrf_uarte_event_clear>
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
   25ad6:	210c      	movs	r1, #12
   25ad8:	69f8      	ldr	r0, [r7, #28]
   25ada:	f7ff ff2a 	bl	25932 <nrf_uarte_task_trigger>
	irq_unlock(key);
   25ade:	69bb      	ldr	r3, [r7, #24]
   25ae0:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
   25ae2:	68fb      	ldr	r3, [r7, #12]
   25ae4:	f383 8811 	msr	BASEPRI, r3
   25ae8:	f3bf 8f6f 	isb	sy
}
   25aec:	bf00      	nop
}
   25aee:	bf00      	nop
   25af0:	3720      	adds	r7, #32
   25af2:	46bd      	mov	sp, r7
   25af4:	bd80      	pop	{r7, pc}

00025af6 <uarte_nrfx_isr_int>:
{
   25af6:	b580      	push	{r7, lr}
   25af8:	b088      	sub	sp, #32
   25afa:	af00      	add	r7, sp, #0
   25afc:	6078      	str	r0, [r7, #4]
	const struct device *dev = arg;
   25afe:	687b      	ldr	r3, [r7, #4]
   25b00:	61fb      	str	r3, [r7, #28]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   25b02:	69f8      	ldr	r0, [r7, #28]
   25b04:	f7ff ffb8 	bl	25a78 <get_uarte_instance>
   25b08:	61b8      	str	r0, [r7, #24]
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   25b0a:	f44f 7180 	mov.w	r1, #256	; 0x100
   25b0e:	69b8      	ldr	r0, [r7, #24]
   25b10:	f7ff fea0 	bl	25854 <nrf_uarte_int_enable_check>
   25b14:	4603      	mov	r3, r0
   25b16:	2b00      	cmp	r3, #0
   25b18:	d00a      	beq.n	25b30 <uarte_nrfx_isr_int+0x3a>
		nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   25b1a:	f44f 7190 	mov.w	r1, #288	; 0x120
   25b1e:	69b8      	ldr	r0, [r7, #24]
   25b20:	f7ff fe68 	bl	257f4 <nrf_uarte_event_check>
   25b24:	4603      	mov	r3, r0
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   25b26:	2b00      	cmp	r3, #0
   25b28:	d002      	beq.n	25b30 <uarte_nrfx_isr_int+0x3a>
		endtx_isr(dev);
   25b2a:	69f8      	ldr	r0, [r7, #28]
   25b2c:	f7ff ffb2 	bl	25a94 <endtx_isr>
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   25b30:	69f8      	ldr	r0, [r7, #28]
   25b32:	f7ff ff96 	bl	25a62 <get_dev_config>
   25b36:	4603      	mov	r3, r0
   25b38:	685b      	ldr	r3, [r3, #4]
   25b3a:	f003 0310 	and.w	r3, r3, #16
   25b3e:	2b00      	cmp	r3, #0
   25b40:	d023      	beq.n	25b8a <uarte_nrfx_isr_int+0x94>
	__asm__ volatile(
   25b42:	f04f 0320 	mov.w	r3, #32
   25b46:	f3ef 8211 	mrs	r2, BASEPRI
   25b4a:	f383 8811 	msr	BASEPRI, r3
   25b4e:	f3bf 8f6f 	isb	sy
   25b52:	613a      	str	r2, [r7, #16]
   25b54:	60fb      	str	r3, [r7, #12]
	return key;
   25b56:	693b      	ldr	r3, [r7, #16]
		int key = irq_lock();
   25b58:	617b      	str	r3, [r7, #20]
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   25b5a:	f44f 71ac 	mov.w	r1, #344	; 0x158
   25b5e:	69b8      	ldr	r0, [r7, #24]
   25b60:	f7ff fe48 	bl	257f4 <nrf_uarte_event_check>
   25b64:	4603      	mov	r3, r0
   25b66:	2b00      	cmp	r3, #0
   25b68:	d002      	beq.n	25b70 <uarte_nrfx_isr_int+0x7a>
			nrf_uarte_disable(uarte);
   25b6a:	69b8      	ldr	r0, [r7, #24]
   25b6c:	f7ff feae 	bl	258cc <nrf_uarte_disable>
			nrf_uarte_int_disable(uarte,
   25b70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   25b74:	69b8      	ldr	r0, [r7, #24]
   25b76:	f7ff fe7c 	bl	25872 <nrf_uarte_int_disable>
		irq_unlock(key);
   25b7a:	697b      	ldr	r3, [r7, #20]
   25b7c:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
   25b7e:	68bb      	ldr	r3, [r7, #8]
   25b80:	f383 8811 	msr	BASEPRI, r3
   25b84:	f3bf 8f6f 	isb	sy
}
   25b88:	bf00      	nop
}
   25b8a:	bf00      	nop
   25b8c:	3720      	adds	r7, #32
   25b8e:	46bd      	mov	sp, r7
   25b90:	bd80      	pop	{r7, pc}

00025b92 <uarte_nrfx_configure>:
{
   25b92:	b590      	push	{r4, r7, lr}
   25b94:	b085      	sub	sp, #20
   25b96:	af00      	add	r7, sp, #0
   25b98:	6078      	str	r0, [r7, #4]
   25b9a:	6039      	str	r1, [r7, #0]
	switch (cfg->stop_bits) {
   25b9c:	683b      	ldr	r3, [r7, #0]
   25b9e:	795b      	ldrb	r3, [r3, #5]
   25ba0:	2b01      	cmp	r3, #1
   25ba2:	d002      	beq.n	25baa <uarte_nrfx_configure+0x18>
   25ba4:	2b03      	cmp	r3, #3
   25ba6:	d003      	beq.n	25bb0 <uarte_nrfx_configure+0x1e>
   25ba8:	e005      	b.n	25bb6 <uarte_nrfx_configure+0x24>
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   25baa:	2300      	movs	r3, #0
   25bac:	73bb      	strb	r3, [r7, #14]
		break;
   25bae:	e005      	b.n	25bbc <uarte_nrfx_configure+0x2a>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   25bb0:	2310      	movs	r3, #16
   25bb2:	73bb      	strb	r3, [r7, #14]
		break;
   25bb4:	e002      	b.n	25bbc <uarte_nrfx_configure+0x2a>
		return -ENOTSUP;
   25bb6:	f06f 0385 	mvn.w	r3, #133	; 0x85
   25bba:	e05b      	b.n	25c74 <uarte_nrfx_configure+0xe2>
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   25bbc:	683b      	ldr	r3, [r7, #0]
   25bbe:	799b      	ldrb	r3, [r3, #6]
   25bc0:	2b03      	cmp	r3, #3
   25bc2:	d002      	beq.n	25bca <uarte_nrfx_configure+0x38>
		return -ENOTSUP;
   25bc4:	f06f 0385 	mvn.w	r3, #133	; 0x85
   25bc8:	e054      	b.n	25c74 <uarte_nrfx_configure+0xe2>
	switch (cfg->flow_ctrl) {
   25bca:	683b      	ldr	r3, [r7, #0]
   25bcc:	79db      	ldrb	r3, [r3, #7]
   25bce:	2b00      	cmp	r3, #0
   25bd0:	d002      	beq.n	25bd8 <uarte_nrfx_configure+0x46>
   25bd2:	2b01      	cmp	r3, #1
   25bd4:	d003      	beq.n	25bde <uarte_nrfx_configure+0x4c>
   25bd6:	e019      	b.n	25c0c <uarte_nrfx_configure+0x7a>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   25bd8:	2300      	movs	r3, #0
   25bda:	733b      	strb	r3, [r7, #12]
		break;
   25bdc:	e019      	b.n	25c12 <uarte_nrfx_configure+0x80>
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   25bde:	6878      	ldr	r0, [r7, #4]
   25be0:	f7ff ff3f 	bl	25a62 <get_dev_config>
   25be4:	4603      	mov	r3, r0
   25be6:	685b      	ldr	r3, [r3, #4]
   25be8:	f003 0401 	and.w	r4, r3, #1
   25bec:	6878      	ldr	r0, [r7, #4]
   25bee:	f7ff ff38 	bl	25a62 <get_dev_config>
   25bf2:	4603      	mov	r3, r0
   25bf4:	685b      	ldr	r3, [r3, #4]
   25bf6:	f003 0302 	and.w	r3, r3, #2
   25bfa:	4323      	orrs	r3, r4
   25bfc:	2b00      	cmp	r3, #0
   25bfe:	d002      	beq.n	25c06 <uarte_nrfx_configure+0x74>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   25c00:	2301      	movs	r3, #1
   25c02:	733b      	strb	r3, [r7, #12]
		break;
   25c04:	e005      	b.n	25c12 <uarte_nrfx_configure+0x80>
			return -ENOTSUP;
   25c06:	f06f 0385 	mvn.w	r3, #133	; 0x85
   25c0a:	e033      	b.n	25c74 <uarte_nrfx_configure+0xe2>
		return -ENOTSUP;
   25c0c:	f06f 0385 	mvn.w	r3, #133	; 0x85
   25c10:	e030      	b.n	25c74 <uarte_nrfx_configure+0xe2>
	switch (cfg->parity) {
   25c12:	683b      	ldr	r3, [r7, #0]
   25c14:	791b      	ldrb	r3, [r3, #4]
   25c16:	2b00      	cmp	r3, #0
   25c18:	d002      	beq.n	25c20 <uarte_nrfx_configure+0x8e>
   25c1a:	2b02      	cmp	r3, #2
   25c1c:	d003      	beq.n	25c26 <uarte_nrfx_configure+0x94>
   25c1e:	e005      	b.n	25c2c <uarte_nrfx_configure+0x9a>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   25c20:	2300      	movs	r3, #0
   25c22:	737b      	strb	r3, [r7, #13]
		break;
   25c24:	e005      	b.n	25c32 <uarte_nrfx_configure+0xa0>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   25c26:	230e      	movs	r3, #14
   25c28:	737b      	strb	r3, [r7, #13]
		break;
   25c2a:	e002      	b.n	25c32 <uarte_nrfx_configure+0xa0>
		return -ENOTSUP;
   25c2c:	f06f 0385 	mvn.w	r3, #133	; 0x85
   25c30:	e020      	b.n	25c74 <uarte_nrfx_configure+0xe2>
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   25c32:	683b      	ldr	r3, [r7, #0]
   25c34:	681b      	ldr	r3, [r3, #0]
   25c36:	4619      	mov	r1, r3
   25c38:	6878      	ldr	r0, [r7, #4]
   25c3a:	f7f2 fe9f 	bl	1897c <baudrate_set>
   25c3e:	4603      	mov	r3, r0
   25c40:	2b00      	cmp	r3, #0
   25c42:	d002      	beq.n	25c4a <uarte_nrfx_configure+0xb8>
		return -ENOTSUP;
   25c44:	f06f 0385 	mvn.w	r3, #133	; 0x85
   25c48:	e014      	b.n	25c74 <uarte_nrfx_configure+0xe2>
	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);
   25c4a:	6878      	ldr	r0, [r7, #4]
   25c4c:	f7ff ff14 	bl	25a78 <get_uarte_instance>
   25c50:	4602      	mov	r2, r0
   25c52:	f107 030c 	add.w	r3, r7, #12
   25c56:	4619      	mov	r1, r3
   25c58:	4610      	mov	r0, r2
   25c5a:	f7ff fe88 	bl	2596e <nrf_uarte_configure>
	get_dev_data(dev)->uart_config = *cfg;
   25c5e:	6878      	ldr	r0, [r7, #4]
   25c60:	f7ff fef4 	bl	25a4c <get_dev_data>
   25c64:	4603      	mov	r3, r0
   25c66:	683a      	ldr	r2, [r7, #0]
   25c68:	3304      	adds	r3, #4
   25c6a:	e892 0003 	ldmia.w	r2, {r0, r1}
   25c6e:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   25c72:	2300      	movs	r3, #0
}
   25c74:	4618      	mov	r0, r3
   25c76:	3714      	adds	r7, #20
   25c78:	46bd      	mov	sp, r7
   25c7a:	bd90      	pop	{r4, r7, pc}

00025c7c <uarte_nrfx_config_get>:
{
   25c7c:	b580      	push	{r7, lr}
   25c7e:	b082      	sub	sp, #8
   25c80:	af00      	add	r7, sp, #0
   25c82:	6078      	str	r0, [r7, #4]
   25c84:	6039      	str	r1, [r7, #0]
	*cfg = get_dev_data(dev)->uart_config;
   25c86:	6878      	ldr	r0, [r7, #4]
   25c88:	f7ff fee0 	bl	25a4c <get_dev_data>
   25c8c:	4603      	mov	r3, r0
   25c8e:	683a      	ldr	r2, [r7, #0]
   25c90:	3304      	adds	r3, #4
   25c92:	e893 0003 	ldmia.w	r3, {r0, r1}
   25c96:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   25c9a:	2300      	movs	r3, #0
}
   25c9c:	4618      	mov	r0, r3
   25c9e:	3708      	adds	r7, #8
   25ca0:	46bd      	mov	sp, r7
   25ca2:	bd80      	pop	{r7, pc}

00025ca4 <uarte_nrfx_err_check>:
{
   25ca4:	b580      	push	{r7, lr}
   25ca6:	b084      	sub	sp, #16
   25ca8:	af00      	add	r7, sp, #0
   25caa:	6078      	str	r0, [r7, #4]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   25cac:	6878      	ldr	r0, [r7, #4]
   25cae:	f7ff fee3 	bl	25a78 <get_uarte_instance>
   25cb2:	60f8      	str	r0, [r7, #12]
	return nrf_uarte_errorsrc_get_and_clear(uarte);
   25cb4:	68f8      	ldr	r0, [r7, #12]
   25cb6:	f7ff fdea 	bl	2588e <nrf_uarte_errorsrc_get_and_clear>
   25cba:	4603      	mov	r3, r0
}
   25cbc:	4618      	mov	r0, r3
   25cbe:	3710      	adds	r7, #16
   25cc0:	46bd      	mov	sp, r7
   25cc2:	bd80      	pop	{r7, pc}

00025cc4 <is_tx_ready>:
{
   25cc4:	b580      	push	{r7, lr}
   25cc6:	b084      	sub	sp, #16
   25cc8:	af00      	add	r7, sp, #0
   25cca:	6078      	str	r0, [r7, #4]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   25ccc:	6878      	ldr	r0, [r7, #4]
   25cce:	f7ff fed3 	bl	25a78 <get_uarte_instance>
   25cd2:	60f8      	str	r0, [r7, #12]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   25cd4:	6878      	ldr	r0, [r7, #4]
   25cd6:	f7ff fec4 	bl	25a62 <get_dev_config>
   25cda:	4603      	mov	r3, r0
   25cdc:	685b      	ldr	r3, [r3, #4]
   25cde:	f003 0308 	and.w	r3, r3, #8
   25ce2:	2b00      	cmp	r3, #0
   25ce4:	bf14      	ite	ne
   25ce6:	2301      	movne	r3, #1
   25ce8:	2300      	moveq	r3, #0
   25cea:	72fb      	strb	r3, [r7, #11]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   25cec:	f44f 71ac 	mov.w	r1, #344	; 0x158
   25cf0:	68f8      	ldr	r0, [r7, #12]
   25cf2:	f7ff fd7f 	bl	257f4 <nrf_uarte_event_check>
   25cf6:	4603      	mov	r3, r0
   25cf8:	2b00      	cmp	r3, #0
   25cfa:	d10d      	bne.n	25d18 <is_tx_ready+0x54>
		(!ppi_endtx ?
   25cfc:	7afb      	ldrb	r3, [r7, #11]
   25cfe:	f083 0301 	eor.w	r3, r3, #1
   25d02:	b2db      	uxtb	r3, r3
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   25d04:	2b00      	cmp	r3, #0
   25d06:	d009      	beq.n	25d1c <is_tx_ready+0x58>
		       nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX) : 0);
   25d08:	f44f 7190 	mov.w	r1, #288	; 0x120
   25d0c:	68f8      	ldr	r0, [r7, #12]
   25d0e:	f7ff fd71 	bl	257f4 <nrf_uarte_event_check>
   25d12:	4603      	mov	r3, r0
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   25d14:	2b00      	cmp	r3, #0
   25d16:	d001      	beq.n	25d1c <is_tx_ready+0x58>
   25d18:	2301      	movs	r3, #1
   25d1a:	e000      	b.n	25d1e <is_tx_ready+0x5a>
   25d1c:	2300      	movs	r3, #0
   25d1e:	f003 0301 	and.w	r3, r3, #1
   25d22:	b2db      	uxtb	r3, r3
}
   25d24:	4618      	mov	r0, r3
   25d26:	3710      	adds	r7, #16
   25d28:	46bd      	mov	sp, r7
   25d2a:	bd80      	pop	{r7, pc}

00025d2c <wait_tx_ready>:
{
   25d2c:	b580      	push	{r7, lr}
   25d2e:	b088      	sub	sp, #32
   25d30:	af00      	add	r7, sp, #0
   25d32:	6078      	str	r0, [r7, #4]
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   25d34:	2300      	movs	r3, #0
   25d36:	77fb      	strb	r3, [r7, #31]
   25d38:	2364      	movs	r3, #100	; 0x64
   25d3a:	61bb      	str	r3, [r7, #24]
   25d3c:	6878      	ldr	r0, [r7, #4]
   25d3e:	f7ff ffc1 	bl	25cc4 <is_tx_ready>
   25d42:	4603      	mov	r3, r0
   25d44:	2b00      	cmp	r3, #0
   25d46:	d002      	beq.n	25d4e <wait_tx_ready+0x22>
   25d48:	2301      	movs	r3, #1
   25d4a:	77fb      	strb	r3, [r7, #31]
   25d4c:	e008      	b.n	25d60 <wait_tx_ready+0x34>
   25d4e:	2001      	movs	r0, #1
   25d50:	f000 ffee 	bl	26d30 <nrfx_busy_wait>
   25d54:	69bb      	ldr	r3, [r7, #24]
   25d56:	3b01      	subs	r3, #1
   25d58:	61bb      	str	r3, [r7, #24]
   25d5a:	69bb      	ldr	r3, [r7, #24]
   25d5c:	2b00      	cmp	r3, #0
   25d5e:	d1ed      	bne.n	25d3c <wait_tx_ready+0x10>
		if (res) {
   25d60:	7ffb      	ldrb	r3, [r7, #31]
   25d62:	2b00      	cmp	r3, #0
   25d64:	d019      	beq.n	25d9a <wait_tx_ready+0x6e>
	__asm__ volatile(
   25d66:	f04f 0320 	mov.w	r3, #32
   25d6a:	f3ef 8211 	mrs	r2, BASEPRI
   25d6e:	f383 8811 	msr	BASEPRI, r3
   25d72:	f3bf 8f6f 	isb	sy
   25d76:	613a      	str	r2, [r7, #16]
   25d78:	60fb      	str	r3, [r7, #12]
	return key;
   25d7a:	693b      	ldr	r3, [r7, #16]
			key = irq_lock();
   25d7c:	617b      	str	r3, [r7, #20]
			if (is_tx_ready(dev)) {
   25d7e:	6878      	ldr	r0, [r7, #4]
   25d80:	f7ff ffa0 	bl	25cc4 <is_tx_ready>
   25d84:	4603      	mov	r3, r0
   25d86:	2b00      	cmp	r3, #0
   25d88:	d10b      	bne.n	25da2 <wait_tx_ready+0x76>
			irq_unlock(key);
   25d8a:	697b      	ldr	r3, [r7, #20]
   25d8c:	60bb      	str	r3, [r7, #8]
	__asm__ volatile(
   25d8e:	68bb      	ldr	r3, [r7, #8]
   25d90:	f383 8811 	msr	BASEPRI, r3
   25d94:	f3bf 8f6f 	isb	sy
}
   25d98:	bf00      	nop
			k_msleep(1);
   25d9a:	2001      	movs	r0, #1
   25d9c:	f7ff fc0b 	bl	255b6 <k_msleep>
	do {
   25da0:	e7c8      	b.n	25d34 <wait_tx_ready+0x8>
				break;
   25da2:	bf00      	nop
	return key;
   25da4:	697b      	ldr	r3, [r7, #20]
}
   25da6:	4618      	mov	r0, r3
   25da8:	3720      	adds	r7, #32
   25daa:	46bd      	mov	sp, r7
   25dac:	bd80      	pop	{r7, pc}

00025dae <uarte_enable>:
{
   25dae:	b580      	push	{r7, lr}
   25db0:	b082      	sub	sp, #8
   25db2:	af00      	add	r7, sp, #0
   25db4:	6078      	str	r0, [r7, #4]
   25db6:	6039      	str	r1, [r7, #0]
	nrf_uarte_enable(get_uarte_instance(dev));
   25db8:	6878      	ldr	r0, [r7, #4]
   25dba:	f7ff fe5d 	bl	25a78 <get_uarte_instance>
   25dbe:	4603      	mov	r3, r0
   25dc0:	4618      	mov	r0, r3
   25dc2:	f7ff fd76 	bl	258b2 <nrf_uarte_enable>
}
   25dc6:	bf00      	nop
   25dc8:	3708      	adds	r7, #8
   25dca:	46bd      	mov	sp, r7
   25dcc:	bd80      	pop	{r7, pc}

00025dce <tx_start>:
{
   25dce:	b580      	push	{r7, lr}
   25dd0:	b086      	sub	sp, #24
   25dd2:	af00      	add	r7, sp, #0
   25dd4:	60f8      	str	r0, [r7, #12]
   25dd6:	60b9      	str	r1, [r7, #8]
   25dd8:	607a      	str	r2, [r7, #4]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   25dda:	68f8      	ldr	r0, [r7, #12]
   25ddc:	f7ff fe4c 	bl	25a78 <get_uarte_instance>
   25de0:	6178      	str	r0, [r7, #20]
	nrf_uarte_tx_buffer_set(uarte, buf, len);
   25de2:	687a      	ldr	r2, [r7, #4]
   25de4:	68b9      	ldr	r1, [r7, #8]
   25de6:	6978      	ldr	r0, [r7, #20]
   25de8:	f7ff fde7 	bl	259ba <nrf_uarte_tx_buffer_set>
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDTX);
   25dec:	f44f 7190 	mov.w	r1, #288	; 0x120
   25df0:	6978      	ldr	r0, [r7, #20]
   25df2:	f7ff fcea 	bl	257ca <nrf_uarte_event_clear>
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_TXSTOPPED);
   25df6:	f44f 71ac 	mov.w	r1, #344	; 0x158
   25dfa:	6978      	ldr	r0, [r7, #20]
   25dfc:	f7ff fce5 	bl	257ca <nrf_uarte_event_clear>
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   25e00:	68f8      	ldr	r0, [r7, #12]
   25e02:	f7ff fe2e 	bl	25a62 <get_dev_config>
   25e06:	4603      	mov	r3, r0
   25e08:	685b      	ldr	r3, [r3, #4]
   25e0a:	f003 0310 	and.w	r3, r3, #16
   25e0e:	2b00      	cmp	r3, #0
   25e10:	d008      	beq.n	25e24 <tx_start+0x56>
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   25e12:	2101      	movs	r1, #1
   25e14:	68f8      	ldr	r0, [r7, #12]
   25e16:	f7ff ffca 	bl	25dae <uarte_enable>
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_TXSTOPPED_MASK);
   25e1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   25e1e:	6978      	ldr	r0, [r7, #20]
   25e20:	f7ff fd0a 	bl	25838 <nrf_uarte_int_enable>
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTTX);
   25e24:	2108      	movs	r1, #8
   25e26:	6978      	ldr	r0, [r7, #20]
   25e28:	f7ff fd83 	bl	25932 <nrf_uarte_task_trigger>
}
   25e2c:	bf00      	nop
   25e2e:	3718      	adds	r7, #24
   25e30:	46bd      	mov	sp, r7
   25e32:	bd80      	pop	{r7, pc}

00025e34 <uarte_nrfx_poll_in>:
{
   25e34:	b580      	push	{r7, lr}
   25e36:	b084      	sub	sp, #16
   25e38:	af00      	add	r7, sp, #0
   25e3a:	6078      	str	r0, [r7, #4]
   25e3c:	6039      	str	r1, [r7, #0]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   25e3e:	6878      	ldr	r0, [r7, #4]
   25e40:	f7ff fe04 	bl	25a4c <get_dev_data>
   25e44:	60f8      	str	r0, [r7, #12]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   25e46:	6878      	ldr	r0, [r7, #4]
   25e48:	f7ff fe16 	bl	25a78 <get_uarte_instance>
   25e4c:	60b8      	str	r0, [r7, #8]
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   25e4e:	f44f 7188 	mov.w	r1, #272	; 0x110
   25e52:	68b8      	ldr	r0, [r7, #8]
   25e54:	f7ff fcce 	bl	257f4 <nrf_uarte_event_check>
   25e58:	4603      	mov	r3, r0
   25e5a:	f083 0301 	eor.w	r3, r3, #1
   25e5e:	b2db      	uxtb	r3, r3
   25e60:	2b00      	cmp	r3, #0
   25e62:	d002      	beq.n	25e6a <uarte_nrfx_poll_in+0x36>
		return -1;
   25e64:	f04f 33ff 	mov.w	r3, #4294967295
   25e68:	e00d      	b.n	25e86 <uarte_nrfx_poll_in+0x52>
	*c = data->rx_data;
   25e6a:	68fb      	ldr	r3, [r7, #12]
   25e6c:	7c5a      	ldrb	r2, [r3, #17]
   25e6e:	683b      	ldr	r3, [r7, #0]
   25e70:	701a      	strb	r2, [r3, #0]
	nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   25e72:	f44f 7188 	mov.w	r1, #272	; 0x110
   25e76:	68b8      	ldr	r0, [r7, #8]
   25e78:	f7ff fca7 	bl	257ca <nrf_uarte_event_clear>
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
   25e7c:	2100      	movs	r1, #0
   25e7e:	68b8      	ldr	r0, [r7, #8]
   25e80:	f7ff fd57 	bl	25932 <nrf_uarte_task_trigger>
	return 0;
   25e84:	2300      	movs	r3, #0
}
   25e86:	4618      	mov	r0, r3
   25e88:	3710      	adds	r7, #16
   25e8a:	46bd      	mov	sp, r7
   25e8c:	bd80      	pop	{r7, pc}

00025e8e <uarte_nrfx_poll_out>:
{
   25e8e:	b580      	push	{r7, lr}
   25e90:	b08a      	sub	sp, #40	; 0x28
   25e92:	af00      	add	r7, sp, #0
   25e94:	6078      	str	r0, [r7, #4]
   25e96:	460b      	mov	r3, r1
   25e98:	70fb      	strb	r3, [r7, #3]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   25e9a:	6878      	ldr	r0, [r7, #4]
   25e9c:	f7ff fdd6 	bl	25a4c <get_dev_data>
   25ea0:	6238      	str	r0, [r7, #32]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   25ea2:	f001 ff29 	bl	27cf8 <k_is_in_isr>
   25ea6:	4603      	mov	r3, r0
   25ea8:	2b00      	cmp	r3, #0
   25eaa:	d104      	bne.n	25eb6 <uarte_nrfx_poll_out+0x28>
   25eac:	f7f2 fcaa 	bl	18804 <k_is_pre_kernel>
   25eb0:	4603      	mov	r3, r0
   25eb2:	2b00      	cmp	r3, #0
   25eb4:	d001      	beq.n	25eba <uarte_nrfx_poll_out+0x2c>
   25eb6:	2301      	movs	r3, #1
   25eb8:	e000      	b.n	25ebc <uarte_nrfx_poll_out+0x2e>
   25eba:	2300      	movs	r3, #0
   25ebc:	77fb      	strb	r3, [r7, #31]
   25ebe:	7ffb      	ldrb	r3, [r7, #31]
   25ec0:	f003 0301 	and.w	r3, r3, #1
   25ec4:	77fb      	strb	r3, [r7, #31]
	if (isr_mode) {
   25ec6:	7ffb      	ldrb	r3, [r7, #31]
   25ec8:	2b00      	cmp	r3, #0
   25eca:	d01a      	beq.n	25f02 <uarte_nrfx_poll_out+0x74>
	__asm__ volatile(
   25ecc:	f04f 0320 	mov.w	r3, #32
   25ed0:	f3ef 8211 	mrs	r2, BASEPRI
   25ed4:	f383 8811 	msr	BASEPRI, r3
   25ed8:	f3bf 8f6f 	isb	sy
   25edc:	61ba      	str	r2, [r7, #24]
   25ede:	617b      	str	r3, [r7, #20]
	return key;
   25ee0:	69bb      	ldr	r3, [r7, #24]
			key = irq_lock();
   25ee2:	627b      	str	r3, [r7, #36]	; 0x24
			if (is_tx_ready(dev)) {
   25ee4:	6878      	ldr	r0, [r7, #4]
   25ee6:	f7ff feed 	bl	25cc4 <is_tx_ready>
   25eea:	4603      	mov	r3, r0
   25eec:	2b00      	cmp	r3, #0
   25eee:	d10d      	bne.n	25f0c <uarte_nrfx_poll_out+0x7e>
			irq_unlock(key);
   25ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25ef2:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
   25ef4:	693b      	ldr	r3, [r7, #16]
   25ef6:	f383 8811 	msr	BASEPRI, r3
   25efa:	f3bf 8f6f 	isb	sy
}
   25efe:	bf00      	nop
			key = irq_lock();
   25f00:	e7e4      	b.n	25ecc <uarte_nrfx_poll_out+0x3e>
		key = wait_tx_ready(dev);
   25f02:	6878      	ldr	r0, [r7, #4]
   25f04:	f7ff ff12 	bl	25d2c <wait_tx_ready>
   25f08:	6278      	str	r0, [r7, #36]	; 0x24
   25f0a:	e000      	b.n	25f0e <uarte_nrfx_poll_out+0x80>
				break;
   25f0c:	bf00      	nop
	data->char_out = c;
   25f0e:	6a3b      	ldr	r3, [r7, #32]
   25f10:	78fa      	ldrb	r2, [r7, #3]
   25f12:	741a      	strb	r2, [r3, #16]
	tx_start(dev, &data->char_out, 1);
   25f14:	6a3b      	ldr	r3, [r7, #32]
   25f16:	3310      	adds	r3, #16
   25f18:	2201      	movs	r2, #1
   25f1a:	4619      	mov	r1, r3
   25f1c:	6878      	ldr	r0, [r7, #4]
   25f1e:	f7ff ff56 	bl	25dce <tx_start>
	irq_unlock(key);
   25f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25f24:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
   25f26:	68fb      	ldr	r3, [r7, #12]
   25f28:	f383 8811 	msr	BASEPRI, r3
   25f2c:	f3bf 8f6f 	isb	sy
}
   25f30:	bf00      	nop
}
   25f32:	bf00      	nop
   25f34:	3728      	adds	r7, #40	; 0x28
   25f36:	46bd      	mov	sp, r7
   25f38:	bd80      	pop	{r7, pc}

00025f3a <uarte_instance_init>:
{
   25f3a:	b580      	push	{r7, lr}
   25f3c:	b088      	sub	sp, #32
   25f3e:	af00      	add	r7, sp, #0
   25f40:	60f8      	str	r0, [r7, #12]
   25f42:	60b9      	str	r1, [r7, #8]
   25f44:	4613      	mov	r3, r2
   25f46:	71fb      	strb	r3, [r7, #7]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
   25f48:	68f8      	ldr	r0, [r7, #12]
   25f4a:	f7ff fd95 	bl	25a78 <get_uarte_instance>
   25f4e:	61f8      	str	r0, [r7, #28]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   25f50:	68f8      	ldr	r0, [r7, #12]
   25f52:	f7ff fd7b 	bl	25a4c <get_dev_data>
   25f56:	61b8      	str	r0, [r7, #24]
	nrf_uarte_disable(uarte);
   25f58:	69f8      	ldr	r0, [r7, #28]
   25f5a:	f7ff fcb7 	bl	258cc <nrf_uarte_disable>
	data->dev = dev;
   25f5e:	69bb      	ldr	r3, [r7, #24]
   25f60:	68fa      	ldr	r2, [r7, #12]
   25f62:	601a      	str	r2, [r3, #0]
	nrf_gpio_pin_write(config->pseltxd, 1);
   25f64:	68bb      	ldr	r3, [r7, #8]
   25f66:	681b      	ldr	r3, [r3, #0]
   25f68:	2101      	movs	r1, #1
   25f6a:	4618      	mov	r0, r3
   25f6c:	f7ff fbc9 	bl	25702 <nrf_gpio_pin_write>
	nrf_gpio_cfg_output(config->pseltxd);
   25f70:	68bb      	ldr	r3, [r7, #8]
   25f72:	681b      	ldr	r3, [r3, #0]
   25f74:	4618      	mov	r0, r3
   25f76:	f7ff fb74 	bl	25662 <nrf_gpio_cfg_output>
	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   25f7a:	68bb      	ldr	r3, [r7, #8]
   25f7c:	685b      	ldr	r3, [r3, #4]
   25f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
   25f82:	d005      	beq.n	25f90 <uarte_instance_init+0x56>
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_PULLUP);
   25f84:	68bb      	ldr	r3, [r7, #8]
   25f86:	685b      	ldr	r3, [r3, #4]
   25f88:	2103      	movs	r1, #3
   25f8a:	4618      	mov	r0, r3
   25f8c:	f7ff fb7b 	bl	25686 <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   25f90:	68bb      	ldr	r3, [r7, #8]
   25f92:	6819      	ldr	r1, [r3, #0]
   25f94:	68bb      	ldr	r3, [r7, #8]
   25f96:	685b      	ldr	r3, [r3, #4]
   25f98:	461a      	mov	r2, r3
   25f9a:	69f8      	ldr	r0, [r7, #28]
   25f9c:	f7ff fca3 	bl	258e6 <nrf_uarte_txrx_pins_set>
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   25fa0:	68bb      	ldr	r3, [r7, #8]
   25fa2:	689b      	ldr	r3, [r3, #8]
   25fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
   25fa8:	d005      	beq.n	25fb6 <uarte_instance_init+0x7c>
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_PULLUP);
   25faa:	68bb      	ldr	r3, [r7, #8]
   25fac:	689b      	ldr	r3, [r3, #8]
   25fae:	2103      	movs	r1, #3
   25fb0:	4618      	mov	r0, r3
   25fb2:	f7ff fb68 	bl	25686 <nrf_gpio_cfg_input>
	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   25fb6:	68bb      	ldr	r3, [r7, #8]
   25fb8:	68db      	ldr	r3, [r3, #12]
   25fba:	f1b3 3fff 	cmp.w	r3, #4294967295
   25fbe:	d00a      	beq.n	25fd6 <uarte_instance_init+0x9c>
		nrf_gpio_pin_write(config->pselrts, 1);
   25fc0:	68bb      	ldr	r3, [r7, #8]
   25fc2:	68db      	ldr	r3, [r3, #12]
   25fc4:	2101      	movs	r1, #1
   25fc6:	4618      	mov	r0, r3
   25fc8:	f7ff fb9b 	bl	25702 <nrf_gpio_pin_write>
		nrf_gpio_cfg_output(config->pselrts);
   25fcc:	68bb      	ldr	r3, [r7, #8]
   25fce:	68db      	ldr	r3, [r3, #12]
   25fd0:	4618      	mov	r0, r3
   25fd2:	f7ff fb46 	bl	25662 <nrf_gpio_cfg_output>
	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   25fd6:	68bb      	ldr	r3, [r7, #8]
   25fd8:	68d9      	ldr	r1, [r3, #12]
   25fda:	68bb      	ldr	r3, [r7, #8]
   25fdc:	689b      	ldr	r3, [r3, #8]
   25fde:	461a      	mov	r2, r3
   25fe0:	69f8      	ldr	r0, [r7, #28]
   25fe2:	f7ff fc93 	bl	2590c <nrf_uarte_hwfc_pins_set>
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   25fe6:	68f8      	ldr	r0, [r7, #12]
   25fe8:	f7ff fd30 	bl	25a4c <get_dev_data>
   25fec:	4603      	mov	r3, r0
   25fee:	3304      	adds	r3, #4
   25ff0:	4619      	mov	r1, r3
   25ff2:	68f8      	ldr	r0, [r7, #12]
   25ff4:	f7ff fdcd 	bl	25b92 <uarte_nrfx_configure>
   25ff8:	6178      	str	r0, [r7, #20]
	if (err) {
   25ffa:	697b      	ldr	r3, [r7, #20]
   25ffc:	2b00      	cmp	r3, #0
   25ffe:	d001      	beq.n	26004 <uarte_instance_init+0xca>
		return err;
   26000:	697b      	ldr	r3, [r7, #20]
   26002:	e056      	b.n	260b2 <uarte_instance_init+0x178>
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   26004:	68f8      	ldr	r0, [r7, #12]
   26006:	f7ff fd2c 	bl	25a62 <get_dev_config>
   2600a:	4603      	mov	r3, r0
   2600c:	685b      	ldr	r3, [r3, #4]
   2600e:	f003 0308 	and.w	r3, r3, #8
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   26012:	2b00      	cmp	r3, #0
   26014:	d009      	beq.n	2602a <uarte_instance_init+0xf0>
		err = endtx_stoptx_ppi_init(uarte, data);
   26016:	69b9      	ldr	r1, [r7, #24]
   26018:	69f8      	ldr	r0, [r7, #28]
   2601a:	f7f2 fdd1 	bl	18bc0 <endtx_stoptx_ppi_init>
   2601e:	6178      	str	r0, [r7, #20]
		if (err < 0) {
   26020:	697b      	ldr	r3, [r7, #20]
   26022:	2b00      	cmp	r3, #0
   26024:	da01      	bge.n	2602a <uarte_instance_init+0xf0>
			return err;
   26026:	697b      	ldr	r3, [r7, #20]
   26028:	e043      	b.n	260b2 <uarte_instance_init+0x178>
		nrf_uarte_enable(uarte);
   2602a:	69f8      	ldr	r0, [r7, #28]
   2602c:	f7ff fc41 	bl	258b2 <nrf_uarte_enable>
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   26030:	68bb      	ldr	r3, [r7, #8]
   26032:	685b      	ldr	r3, [r3, #4]
   26034:	f1b3 3fff 	cmp.w	r3, #4294967295
   26038:	d00f      	beq.n	2605a <uarte_instance_init+0x120>
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);
   2603a:	f44f 7188 	mov.w	r1, #272	; 0x110
   2603e:	69f8      	ldr	r0, [r7, #28]
   26040:	f7ff fbc3 	bl	257ca <nrf_uarte_event_clear>
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   26044:	69bb      	ldr	r3, [r7, #24]
   26046:	3311      	adds	r3, #17
   26048:	2201      	movs	r2, #1
   2604a:	4619      	mov	r1, r3
   2604c:	69f8      	ldr	r0, [r7, #28]
   2604e:	f7ff fcc7 	bl	259e0 <nrf_uarte_rx_buffer_set>
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
   26052:	2100      	movs	r1, #0
   26054:	69f8      	ldr	r0, [r7, #28]
   26056:	f7ff fc6c 	bl	25932 <nrf_uarte_task_trigger>
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2605a:	68f8      	ldr	r0, [r7, #12]
   2605c:	f7ff fd01 	bl	25a62 <get_dev_config>
   26060:	4603      	mov	r3, r0
   26062:	685b      	ldr	r3, [r3, #4]
   26064:	f003 0308 	and.w	r3, r3, #8
   26068:	2b00      	cmp	r3, #0
   2606a:	d104      	bne.n	26076 <uarte_instance_init+0x13c>
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
   2606c:	f44f 7180 	mov.w	r1, #256	; 0x100
   26070:	69f8      	ldr	r0, [r7, #28]
   26072:	f7ff fbe1 	bl	25838 <nrf_uarte_int_enable>
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   26076:	68f8      	ldr	r0, [r7, #12]
   26078:	f7ff fcf3 	bl	25a62 <get_dev_config>
   2607c:	4603      	mov	r3, r0
   2607e:	685b      	ldr	r3, [r3, #4]
   26080:	f003 0310 	and.w	r3, r3, #16
   26084:	2b00      	cmp	r3, #0
   26086:	d004      	beq.n	26092 <uarte_instance_init+0x158>
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_TXSTOPPED_MASK);
   26088:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2608c:	69f8      	ldr	r0, [r7, #28]
   2608e:	f7ff fbd3 	bl	25838 <nrf_uarte_int_enable>
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   26092:	69bb      	ldr	r3, [r7, #24]
   26094:	3310      	adds	r3, #16
   26096:	2200      	movs	r2, #0
   26098:	4619      	mov	r1, r3
   2609a:	69f8      	ldr	r0, [r7, #28]
   2609c:	f7ff fc8d 	bl	259ba <nrf_uarte_tx_buffer_set>
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTTX);
   260a0:	2108      	movs	r1, #8
   260a2:	69f8      	ldr	r0, [r7, #28]
   260a4:	f7ff fc45 	bl	25932 <nrf_uarte_task_trigger>
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
   260a8:	210c      	movs	r1, #12
   260aa:	69f8      	ldr	r0, [r7, #28]
   260ac:	f7ff fc41 	bl	25932 <nrf_uarte_task_trigger>
	return 0;
   260b0:	2300      	movs	r3, #0
}
   260b2:	4618      	mov	r0, r3
   260b4:	3720      	adds	r7, #32
   260b6:	46bd      	mov	sp, r7
   260b8:	bd80      	pop	{r7, pc}

000260ba <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   260ba:	b480      	push	{r7}
   260bc:	b083      	sub	sp, #12
   260be:	af00      	add	r7, sp, #0
   260c0:	6078      	str	r0, [r7, #4]
		if (ret != 0) {
			return -EINVAL;
		}
	#endif

	return 0;
   260c2:	2300      	movs	r3, #0
}
   260c4:	4618      	mov	r0, r3
   260c6:	370c      	adds	r7, #12
   260c8:	46bd      	mov	sp, r7
   260ca:	bc80      	pop	{r7}
   260cc:	4770      	bx	lr

000260ce <sys_slist_init>:
{
   260ce:	b480      	push	{r7}
   260d0:	b083      	sub	sp, #12
   260d2:	af00      	add	r7, sp, #0
   260d4:	6078      	str	r0, [r7, #4]
	list->head = NULL;
   260d6:	687b      	ldr	r3, [r7, #4]
   260d8:	2200      	movs	r2, #0
   260da:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   260dc:	687b      	ldr	r3, [r7, #4]
   260de:	2200      	movs	r2, #0
   260e0:	605a      	str	r2, [r3, #4]
}
   260e2:	bf00      	nop
   260e4:	370c      	adds	r7, #12
   260e6:	46bd      	mov	sp, r7
   260e8:	bc80      	pop	{r7}
   260ea:	4770      	bx	lr

000260ec <z_snode_next_peek>:
{
   260ec:	b480      	push	{r7}
   260ee:	b083      	sub	sp, #12
   260f0:	af00      	add	r7, sp, #0
   260f2:	6078      	str	r0, [r7, #4]
	return node->next;
   260f4:	687b      	ldr	r3, [r7, #4]
   260f6:	681b      	ldr	r3, [r3, #0]
}
   260f8:	4618      	mov	r0, r3
   260fa:	370c      	adds	r7, #12
   260fc:	46bd      	mov	sp, r7
   260fe:	bc80      	pop	{r7}
   26100:	4770      	bx	lr

00026102 <sys_slist_peek_head>:
{
   26102:	b480      	push	{r7}
   26104:	b083      	sub	sp, #12
   26106:	af00      	add	r7, sp, #0
   26108:	6078      	str	r0, [r7, #4]
	return list->head;
   2610a:	687b      	ldr	r3, [r7, #4]
   2610c:	681b      	ldr	r3, [r3, #0]
}
   2610e:	4618      	mov	r0, r3
   26110:	370c      	adds	r7, #12
   26112:	46bd      	mov	sp, r7
   26114:	bc80      	pop	{r7}
   26116:	4770      	bx	lr

00026118 <sys_slist_peek_next_no_check>:
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26118:	b580      	push	{r7, lr}
   2611a:	b082      	sub	sp, #8
   2611c:	af00      	add	r7, sp, #0
   2611e:	6078      	str	r0, [r7, #4]
   26120:	6878      	ldr	r0, [r7, #4]
   26122:	f7ff ffe3 	bl	260ec <z_snode_next_peek>
   26126:	4603      	mov	r3, r0
   26128:	4618      	mov	r0, r3
   2612a:	3708      	adds	r7, #8
   2612c:	46bd      	mov	sp, r7
   2612e:	bd80      	pop	{r7, pc}

00026130 <sys_slist_peek_next>:
Z_GENLIST_PEEK_NEXT(slist, snode)
   26130:	b580      	push	{r7, lr}
   26132:	b082      	sub	sp, #8
   26134:	af00      	add	r7, sp, #0
   26136:	6078      	str	r0, [r7, #4]
   26138:	687b      	ldr	r3, [r7, #4]
   2613a:	2b00      	cmp	r3, #0
   2613c:	d004      	beq.n	26148 <sys_slist_peek_next+0x18>
   2613e:	6878      	ldr	r0, [r7, #4]
   26140:	f7ff ffea 	bl	26118 <sys_slist_peek_next_no_check>
   26144:	4603      	mov	r3, r0
   26146:	e000      	b.n	2614a <sys_slist_peek_next+0x1a>
   26148:	2300      	movs	r3, #0
   2614a:	4618      	mov	r0, r3
   2614c:	3708      	adds	r7, #8
   2614e:	46bd      	mov	sp, r7
   26150:	bd80      	pop	{r7, pc}

00026152 <k_mutex_init>:
{
   26152:	b580      	push	{r7, lr}
   26154:	b082      	sub	sp, #8
   26156:	af00      	add	r7, sp, #0
   26158:	6078      	str	r0, [r7, #4]
	return z_impl_k_mutex_init(mutex);
   2615a:	6878      	ldr	r0, [r7, #4]
   2615c:	f001 ff5e 	bl	2801c <z_impl_k_mutex_init>
   26160:	4603      	mov	r3, r0
}
   26162:	4618      	mov	r0, r3
   26164:	3708      	adds	r7, #8
   26166:	46bd      	mov	sp, r7
   26168:	bd80      	pop	{r7, pc}

0002616a <k_mutex_lock>:
{
   2616a:	b580      	push	{r7, lr}
   2616c:	b084      	sub	sp, #16
   2616e:	af00      	add	r7, sp, #0
   26170:	60f8      	str	r0, [r7, #12]
   26172:	e9c7 2300 	strd	r2, r3, [r7]
	return z_impl_k_mutex_lock(mutex, timeout);
   26176:	e9d7 2300 	ldrd	r2, r3, [r7]
   2617a:	68f8      	ldr	r0, [r7, #12]
   2617c:	f7f7 f8d2 	bl	1d324 <z_impl_k_mutex_lock>
   26180:	4603      	mov	r3, r0
}
   26182:	4618      	mov	r0, r3
   26184:	3710      	adds	r7, #16
   26186:	46bd      	mov	sp, r7
   26188:	bd80      	pop	{r7, pc}

0002618a <k_mutex_unlock>:
{
   2618a:	b580      	push	{r7, lr}
   2618c:	b082      	sub	sp, #8
   2618e:	af00      	add	r7, sp, #0
   26190:	6078      	str	r0, [r7, #4]
	return z_impl_k_mutex_unlock(mutex);
   26192:	6878      	ldr	r0, [r7, #4]
   26194:	f7f7 fc8c 	bl	1dab0 <z_impl_k_mutex_unlock>
   26198:	4603      	mov	r3, r0
}
   2619a:	4618      	mov	r0, r3
   2619c:	3708      	adds	r7, #8
   2619e:	46bd      	mov	sp, r7
   261a0:	bd80      	pop	{r7, pc}

000261a2 <k_sem_give>:
{
   261a2:	b580      	push	{r7, lr}
   261a4:	b082      	sub	sp, #8
   261a6:	af00      	add	r7, sp, #0
   261a8:	6078      	str	r0, [r7, #4]
	z_impl_k_sem_give(sem);
   261aa:	6878      	ldr	r0, [r7, #4]
   261ac:	f7f7 fe0a 	bl	1ddc4 <z_impl_k_sem_give>
}
   261b0:	bf00      	nop
   261b2:	3708      	adds	r7, #8
   261b4:	46bd      	mov	sp, r7
   261b6:	bd80      	pop	{r7, pc}

000261b8 <atomic_add>:
{
   261b8:	b480      	push	{r7}
   261ba:	b083      	sub	sp, #12
   261bc:	af00      	add	r7, sp, #0
   261be:	6078      	str	r0, [r7, #4]
   261c0:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   261c2:	683a      	ldr	r2, [r7, #0]
   261c4:	687b      	ldr	r3, [r7, #4]
   261c6:	e8d3 1fef 	ldaex	r1, [r3]
   261ca:	eb01 0002 	add.w	r0, r1, r2
   261ce:	e8c3 0fec 	stlex	ip, r0, [r3]
   261d2:	f1bc 0f00 	cmp.w	ip, #0
   261d6:	d1f6      	bne.n	261c6 <atomic_add+0xe>
   261d8:	460b      	mov	r3, r1
}
   261da:	4618      	mov	r0, r3
   261dc:	370c      	adds	r7, #12
   261de:	46bd      	mov	sp, r7
   261e0:	bc80      	pop	{r7}
   261e2:	4770      	bx	lr

000261e4 <atomic_inc>:
{
   261e4:	b580      	push	{r7, lr}
   261e6:	b082      	sub	sp, #8
   261e8:	af00      	add	r7, sp, #0
   261ea:	6078      	str	r0, [r7, #4]
	return atomic_add(target, 1);
   261ec:	2101      	movs	r1, #1
   261ee:	6878      	ldr	r0, [r7, #4]
   261f0:	f7ff ffe2 	bl	261b8 <atomic_add>
   261f4:	4603      	mov	r3, r0
}
   261f6:	4618      	mov	r0, r3
   261f8:	3708      	adds	r7, #8
   261fa:	46bd      	mov	sp, r7
   261fc:	bd80      	pop	{r7, pc}

000261fe <atomic_set>:
{
   261fe:	b480      	push	{r7}
   26200:	b083      	sub	sp, #12
   26202:	af00      	add	r7, sp, #0
   26204:	6078      	str	r0, [r7, #4]
   26206:	6039      	str	r1, [r7, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   26208:	683a      	ldr	r2, [r7, #0]
   2620a:	687b      	ldr	r3, [r7, #4]
   2620c:	e8d3 1fef 	ldaex	r1, [r3]
   26210:	e8c3 2fe0 	stlex	r0, r2, [r3]
   26214:	2800      	cmp	r0, #0
   26216:	d1f9      	bne.n	2620c <atomic_set+0xe>
   26218:	460b      	mov	r3, r1
}
   2621a:	4618      	mov	r0, r3
   2621c:	370c      	adds	r7, #12
   2621e:	46bd      	mov	sp, r7
   26220:	bc80      	pop	{r7}
   26222:	4770      	bx	lr

00026224 <atomic_clear>:
{
   26224:	b580      	push	{r7, lr}
   26226:	b082      	sub	sp, #8
   26228:	af00      	add	r7, sp, #0
   2622a:	6078      	str	r0, [r7, #4]
	return atomic_set(target, 0);
   2622c:	2100      	movs	r1, #0
   2622e:	6878      	ldr	r0, [r7, #4]
   26230:	f7ff ffe5 	bl	261fe <atomic_set>
   26234:	4603      	mov	r3, r0
}
   26236:	4618      	mov	r0, r3
   26238:	3708      	adds	r7, #8
   2623a:	46bd      	mov	sp, r7
   2623c:	bd80      	pop	{r7, pc}

0002623e <sys_slist_init>:
{
   2623e:	b480      	push	{r7}
   26240:	b083      	sub	sp, #12
   26242:	af00      	add	r7, sp, #0
   26244:	6078      	str	r0, [r7, #4]
	list->head = NULL;
   26246:	687b      	ldr	r3, [r7, #4]
   26248:	2200      	movs	r2, #0
   2624a:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   2624c:	687b      	ldr	r3, [r7, #4]
   2624e:	2200      	movs	r2, #0
   26250:	605a      	str	r2, [r3, #4]
}
   26252:	bf00      	nop
   26254:	370c      	adds	r7, #12
   26256:	46bd      	mov	sp, r7
   26258:	bc80      	pop	{r7}
   2625a:	4770      	bx	lr

0002625c <z_snode_next_peek>:
{
   2625c:	b480      	push	{r7}
   2625e:	b083      	sub	sp, #12
   26260:	af00      	add	r7, sp, #0
   26262:	6078      	str	r0, [r7, #4]
	return node->next;
   26264:	687b      	ldr	r3, [r7, #4]
   26266:	681b      	ldr	r3, [r3, #0]
}
   26268:	4618      	mov	r0, r3
   2626a:	370c      	adds	r7, #12
   2626c:	46bd      	mov	sp, r7
   2626e:	bc80      	pop	{r7}
   26270:	4770      	bx	lr

00026272 <z_snode_next_set>:
{
   26272:	b480      	push	{r7}
   26274:	b083      	sub	sp, #12
   26276:	af00      	add	r7, sp, #0
   26278:	6078      	str	r0, [r7, #4]
   2627a:	6039      	str	r1, [r7, #0]
	parent->next = child;
   2627c:	687b      	ldr	r3, [r7, #4]
   2627e:	683a      	ldr	r2, [r7, #0]
   26280:	601a      	str	r2, [r3, #0]
}
   26282:	bf00      	nop
   26284:	370c      	adds	r7, #12
   26286:	46bd      	mov	sp, r7
   26288:	bc80      	pop	{r7}
   2628a:	4770      	bx	lr

0002628c <z_slist_head_set>:
{
   2628c:	b480      	push	{r7}
   2628e:	b083      	sub	sp, #12
   26290:	af00      	add	r7, sp, #0
   26292:	6078      	str	r0, [r7, #4]
   26294:	6039      	str	r1, [r7, #0]
	list->head = node;
   26296:	687b      	ldr	r3, [r7, #4]
   26298:	683a      	ldr	r2, [r7, #0]
   2629a:	601a      	str	r2, [r3, #0]
}
   2629c:	bf00      	nop
   2629e:	370c      	adds	r7, #12
   262a0:	46bd      	mov	sp, r7
   262a2:	bc80      	pop	{r7}
   262a4:	4770      	bx	lr

000262a6 <z_slist_tail_set>:
{
   262a6:	b480      	push	{r7}
   262a8:	b083      	sub	sp, #12
   262aa:	af00      	add	r7, sp, #0
   262ac:	6078      	str	r0, [r7, #4]
   262ae:	6039      	str	r1, [r7, #0]
	list->tail = node;
   262b0:	687b      	ldr	r3, [r7, #4]
   262b2:	683a      	ldr	r2, [r7, #0]
   262b4:	605a      	str	r2, [r3, #4]
}
   262b6:	bf00      	nop
   262b8:	370c      	adds	r7, #12
   262ba:	46bd      	mov	sp, r7
   262bc:	bc80      	pop	{r7}
   262be:	4770      	bx	lr

000262c0 <sys_slist_peek_head>:
{
   262c0:	b480      	push	{r7}
   262c2:	b083      	sub	sp, #12
   262c4:	af00      	add	r7, sp, #0
   262c6:	6078      	str	r0, [r7, #4]
	return list->head;
   262c8:	687b      	ldr	r3, [r7, #4]
   262ca:	681b      	ldr	r3, [r3, #0]
}
   262cc:	4618      	mov	r0, r3
   262ce:	370c      	adds	r7, #12
   262d0:	46bd      	mov	sp, r7
   262d2:	bc80      	pop	{r7}
   262d4:	4770      	bx	lr

000262d6 <sys_slist_peek_tail>:
{
   262d6:	b480      	push	{r7}
   262d8:	b083      	sub	sp, #12
   262da:	af00      	add	r7, sp, #0
   262dc:	6078      	str	r0, [r7, #4]
	return list->tail;
   262de:	687b      	ldr	r3, [r7, #4]
   262e0:	685b      	ldr	r3, [r3, #4]
}
   262e2:	4618      	mov	r0, r3
   262e4:	370c      	adds	r7, #12
   262e6:	46bd      	mov	sp, r7
   262e8:	bc80      	pop	{r7}
   262ea:	4770      	bx	lr

000262ec <sys_slist_peek_next_no_check>:
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   262ec:	b580      	push	{r7, lr}
   262ee:	b082      	sub	sp, #8
   262f0:	af00      	add	r7, sp, #0
   262f2:	6078      	str	r0, [r7, #4]
   262f4:	6878      	ldr	r0, [r7, #4]
   262f6:	f7ff ffb1 	bl	2625c <z_snode_next_peek>
   262fa:	4603      	mov	r3, r0
   262fc:	4618      	mov	r0, r3
   262fe:	3708      	adds	r7, #8
   26300:	46bd      	mov	sp, r7
   26302:	bd80      	pop	{r7, pc}

00026304 <sys_slist_peek_next>:
Z_GENLIST_PEEK_NEXT(slist, snode)
   26304:	b580      	push	{r7, lr}
   26306:	b082      	sub	sp, #8
   26308:	af00      	add	r7, sp, #0
   2630a:	6078      	str	r0, [r7, #4]
   2630c:	687b      	ldr	r3, [r7, #4]
   2630e:	2b00      	cmp	r3, #0
   26310:	d004      	beq.n	2631c <sys_slist_peek_next+0x18>
   26312:	6878      	ldr	r0, [r7, #4]
   26314:	f7ff ffea 	bl	262ec <sys_slist_peek_next_no_check>
   26318:	4603      	mov	r3, r0
   2631a:	e000      	b.n	2631e <sys_slist_peek_next+0x1a>
   2631c:	2300      	movs	r3, #0
   2631e:	4618      	mov	r0, r3
   26320:	3708      	adds	r7, #8
   26322:	46bd      	mov	sp, r7
   26324:	bd80      	pop	{r7, pc}

00026326 <sys_slist_append>:
Z_GENLIST_APPEND(slist, snode)
   26326:	b580      	push	{r7, lr}
   26328:	b082      	sub	sp, #8
   2632a:	af00      	add	r7, sp, #0
   2632c:	6078      	str	r0, [r7, #4]
   2632e:	6039      	str	r1, [r7, #0]
   26330:	2100      	movs	r1, #0
   26332:	6838      	ldr	r0, [r7, #0]
   26334:	f7ff ff9d 	bl	26272 <z_snode_next_set>
   26338:	6878      	ldr	r0, [r7, #4]
   2633a:	f7ff ffcc 	bl	262d6 <sys_slist_peek_tail>
   2633e:	4603      	mov	r3, r0
   26340:	2b00      	cmp	r3, #0
   26342:	d108      	bne.n	26356 <sys_slist_append+0x30>
   26344:	6839      	ldr	r1, [r7, #0]
   26346:	6878      	ldr	r0, [r7, #4]
   26348:	f7ff ffad 	bl	262a6 <z_slist_tail_set>
   2634c:	6839      	ldr	r1, [r7, #0]
   2634e:	6878      	ldr	r0, [r7, #4]
   26350:	f7ff ff9c 	bl	2628c <z_slist_head_set>
   26354:	e00b      	b.n	2636e <sys_slist_append+0x48>
   26356:	6878      	ldr	r0, [r7, #4]
   26358:	f7ff ffbd 	bl	262d6 <sys_slist_peek_tail>
   2635c:	4603      	mov	r3, r0
   2635e:	6839      	ldr	r1, [r7, #0]
   26360:	4618      	mov	r0, r3
   26362:	f7ff ff86 	bl	26272 <z_snode_next_set>
   26366:	6839      	ldr	r1, [r7, #0]
   26368:	6878      	ldr	r0, [r7, #4]
   2636a:	f7ff ff9c 	bl	262a6 <z_slist_tail_set>
   2636e:	bf00      	nop
   26370:	3708      	adds	r7, #8
   26372:	46bd      	mov	sp, r7
   26374:	bd80      	pop	{r7, pc}

00026376 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   26376:	b580      	push	{r7, lr}
   26378:	b084      	sub	sp, #16
   2637a:	af00      	add	r7, sp, #0
   2637c:	60f8      	str	r0, [r7, #12]
   2637e:	60b9      	str	r1, [r7, #8]
   26380:	607a      	str	r2, [r7, #4]
   26382:	68bb      	ldr	r3, [r7, #8]
   26384:	2b00      	cmp	r3, #0
   26386:	d117      	bne.n	263b8 <sys_slist_remove+0x42>
   26388:	6878      	ldr	r0, [r7, #4]
   2638a:	f7ff ff67 	bl	2625c <z_snode_next_peek>
   2638e:	4603      	mov	r3, r0
   26390:	4619      	mov	r1, r3
   26392:	68f8      	ldr	r0, [r7, #12]
   26394:	f7ff ff7a 	bl	2628c <z_slist_head_set>
   26398:	68f8      	ldr	r0, [r7, #12]
   2639a:	f7ff ff9c 	bl	262d6 <sys_slist_peek_tail>
   2639e:	4602      	mov	r2, r0
   263a0:	687b      	ldr	r3, [r7, #4]
   263a2:	4293      	cmp	r3, r2
   263a4:	d11b      	bne.n	263de <sys_slist_remove+0x68>
   263a6:	68f8      	ldr	r0, [r7, #12]
   263a8:	f7ff ff8a 	bl	262c0 <sys_slist_peek_head>
   263ac:	4603      	mov	r3, r0
   263ae:	4619      	mov	r1, r3
   263b0:	68f8      	ldr	r0, [r7, #12]
   263b2:	f7ff ff78 	bl	262a6 <z_slist_tail_set>
   263b6:	e012      	b.n	263de <sys_slist_remove+0x68>
   263b8:	6878      	ldr	r0, [r7, #4]
   263ba:	f7ff ff4f 	bl	2625c <z_snode_next_peek>
   263be:	4603      	mov	r3, r0
   263c0:	4619      	mov	r1, r3
   263c2:	68b8      	ldr	r0, [r7, #8]
   263c4:	f7ff ff55 	bl	26272 <z_snode_next_set>
   263c8:	68f8      	ldr	r0, [r7, #12]
   263ca:	f7ff ff84 	bl	262d6 <sys_slist_peek_tail>
   263ce:	4602      	mov	r2, r0
   263d0:	687b      	ldr	r3, [r7, #4]
   263d2:	4293      	cmp	r3, r2
   263d4:	d103      	bne.n	263de <sys_slist_remove+0x68>
   263d6:	68b9      	ldr	r1, [r7, #8]
   263d8:	68f8      	ldr	r0, [r7, #12]
   263da:	f7ff ff64 	bl	262a6 <z_slist_tail_set>
   263de:	2100      	movs	r1, #0
   263e0:	6878      	ldr	r0, [r7, #4]
   263e2:	f7ff ff46 	bl	26272 <z_snode_next_set>
   263e6:	bf00      	nop
   263e8:	3710      	adds	r7, #16
   263ea:	46bd      	mov	sp, r7
   263ec:	bd80      	pop	{r7, pc}

000263ee <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   263ee:	b580      	push	{r7, lr}
   263f0:	b084      	sub	sp, #16
   263f2:	af00      	add	r7, sp, #0
   263f4:	6078      	str	r0, [r7, #4]
   263f6:	6039      	str	r1, [r7, #0]
   263f8:	2300      	movs	r3, #0
   263fa:	60fb      	str	r3, [r7, #12]
   263fc:	6878      	ldr	r0, [r7, #4]
   263fe:	f7ff ff5f 	bl	262c0 <sys_slist_peek_head>
   26402:	60b8      	str	r0, [r7, #8]
   26404:	e010      	b.n	26428 <sys_slist_find_and_remove+0x3a>
   26406:	68ba      	ldr	r2, [r7, #8]
   26408:	683b      	ldr	r3, [r7, #0]
   2640a:	429a      	cmp	r2, r3
   2640c:	d106      	bne.n	2641c <sys_slist_find_and_remove+0x2e>
   2640e:	683a      	ldr	r2, [r7, #0]
   26410:	68f9      	ldr	r1, [r7, #12]
   26412:	6878      	ldr	r0, [r7, #4]
   26414:	f7ff ffaf 	bl	26376 <sys_slist_remove>
   26418:	2301      	movs	r3, #1
   2641a:	e009      	b.n	26430 <sys_slist_find_and_remove+0x42>
   2641c:	68bb      	ldr	r3, [r7, #8]
   2641e:	60fb      	str	r3, [r7, #12]
   26420:	68b8      	ldr	r0, [r7, #8]
   26422:	f7ff ff6f 	bl	26304 <sys_slist_peek_next>
   26426:	60b8      	str	r0, [r7, #8]
   26428:	68bb      	ldr	r3, [r7, #8]
   2642a:	2b00      	cmp	r3, #0
   2642c:	d1eb      	bne.n	26406 <sys_slist_find_and_remove+0x18>
   2642e:	2300      	movs	r3, #0
   26430:	4618      	mov	r0, r3
   26432:	3710      	adds	r7, #16
   26434:	46bd      	mov	sp, r7
   26436:	bd80      	pop	{r7, pc}

00026438 <k_is_user_context>:
{
   26438:	b480      	push	{r7}
   2643a:	af00      	add	r7, sp, #0
	return false;
   2643c:	2300      	movs	r3, #0
}
   2643e:	4618      	mov	r0, r3
   26440:	46bd      	mov	sp, r7
   26442:	bc80      	pop	{r7}
   26444:	4770      	bx	lr

00026446 <arch_isr_direct_header>:
extern void sys_trace_isr_enter(void);
extern void sys_trace_isr_exit(void);
#endif

static inline void arch_isr_direct_header(void)
{
   26446:	b480      	push	{r7}
   26448:	af00      	add	r7, sp, #0
#ifdef CONFIG_TRACING
	sys_trace_isr_enter();
#endif
}
   2644a:	bf00      	nop
   2644c:	46bd      	mov	sp, r7
   2644e:	bc80      	pop	{r7}
   26450:	4770      	bx	lr

00026452 <arch_isr_direct_footer>:

static inline void arch_isr_direct_footer(int maybe_swap)
{
   26452:	b580      	push	{r7, lr}
   26454:	b082      	sub	sp, #8
   26456:	af00      	add	r7, sp, #0
   26458:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
   2645a:	687b      	ldr	r3, [r7, #4]
   2645c:	2b00      	cmp	r3, #0
   2645e:	d001      	beq.n	26464 <arch_isr_direct_footer+0x12>
		z_arm_int_exit();
   26460:	f7f1 f84c 	bl	174fc <z_arm_exc_exit>
	}
}
   26464:	bf00      	nop
   26466:	3708      	adds	r7, #8
   26468:	46bd      	mov	sp, r7
   2646a:	bd80      	pop	{r7, pc}

0002646c <k_ms_to_ticks_ceil64>:
{
   2646c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   26470:	b08c      	sub	sp, #48	; 0x30
   26472:	af00      	add	r7, sp, #0
   26474:	e9c7 0100 	strd	r0, r1, [r7]
   26478:	e9d7 2300 	ldrd	r2, r3, [r7]
   2647c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   26480:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   26484:	627b      	str	r3, [r7, #36]	; 0x24
   26486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   2648a:	623b      	str	r3, [r7, #32]
   2648c:	2301      	movs	r3, #1
   2648e:	77fb      	strb	r3, [r7, #31]
   26490:	2300      	movs	r3, #0
   26492:	77bb      	strb	r3, [r7, #30]
   26494:	2301      	movs	r3, #1
   26496:	777b      	strb	r3, [r7, #29]
   26498:	2300      	movs	r3, #0
   2649a:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   2649c:	7ffb      	ldrb	r3, [r7, #31]
   2649e:	2b00      	cmp	r3, #0
   264a0:	d00f      	beq.n	264c2 <k_ms_to_ticks_ceil64+0x56>
	bool mul_ratio = const_hz &&
   264a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   264a4:	6a3b      	ldr	r3, [r7, #32]
   264a6:	429a      	cmp	r2, r3
   264a8:	d20b      	bcs.n	264c2 <k_ms_to_ticks_ceil64+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   264aa:	6a3b      	ldr	r3, [r7, #32]
   264ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   264ae:	fbb3 f2f2 	udiv	r2, r3, r2
   264b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
   264b4:	fb01 f202 	mul.w	r2, r1, r2
   264b8:	1a9b      	subs	r3, r3, r2
   264ba:	2b00      	cmp	r3, #0
   264bc:	d101      	bne.n	264c2 <k_ms_to_ticks_ceil64+0x56>
   264be:	2301      	movs	r3, #1
   264c0:	e000      	b.n	264c4 <k_ms_to_ticks_ceil64+0x58>
   264c2:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   264c4:	76fb      	strb	r3, [r7, #27]
   264c6:	7efb      	ldrb	r3, [r7, #27]
   264c8:	f003 0301 	and.w	r3, r3, #1
   264cc:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   264ce:	7ffb      	ldrb	r3, [r7, #31]
   264d0:	2b00      	cmp	r3, #0
   264d2:	d00f      	beq.n	264f4 <k_ms_to_ticks_ceil64+0x88>
	bool div_ratio = const_hz &&
   264d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   264d6:	6a3b      	ldr	r3, [r7, #32]
   264d8:	429a      	cmp	r2, r3
   264da:	d90b      	bls.n	264f4 <k_ms_to_ticks_ceil64+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   264dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   264de:	6a3a      	ldr	r2, [r7, #32]
   264e0:	fbb3 f2f2 	udiv	r2, r3, r2
   264e4:	6a39      	ldr	r1, [r7, #32]
   264e6:	fb01 f202 	mul.w	r2, r1, r2
   264ea:	1a9b      	subs	r3, r3, r2
   264ec:	2b00      	cmp	r3, #0
   264ee:	d101      	bne.n	264f4 <k_ms_to_ticks_ceil64+0x88>
   264f0:	2301      	movs	r3, #1
   264f2:	e000      	b.n	264f6 <k_ms_to_ticks_ceil64+0x8a>
   264f4:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   264f6:	76bb      	strb	r3, [r7, #26]
   264f8:	7ebb      	ldrb	r3, [r7, #26]
   264fa:	f003 0301 	and.w	r3, r3, #1
   264fe:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   26500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26502:	6a3b      	ldr	r3, [r7, #32]
   26504:	429a      	cmp	r2, r3
   26506:	d10a      	bne.n	2651e <k_ms_to_ticks_ceil64+0xb2>
		return result32 ? ((uint32_t)t) : t;
   26508:	7fbb      	ldrb	r3, [r7, #30]
   2650a:	2b00      	cmp	r3, #0
   2650c:	d004      	beq.n	26518 <k_ms_to_ticks_ceil64+0xac>
   2650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   26510:	461a      	mov	r2, r3
   26512:	f04f 0300 	mov.w	r3, #0
   26516:	e0c7      	b.n	266a8 <k_ms_to_ticks_ceil64+0x23c>
   26518:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   2651c:	e0c4      	b.n	266a8 <k_ms_to_ticks_ceil64+0x23c>
	uint64_t off = 0;
   2651e:	f04f 0200 	mov.w	r2, #0
   26522:	f04f 0300 	mov.w	r3, #0
   26526:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   2652a:	7efb      	ldrb	r3, [r7, #27]
   2652c:	f083 0301 	eor.w	r3, r3, #1
   26530:	b2db      	uxtb	r3, r3
   26532:	2b00      	cmp	r3, #0
   26534:	d01d      	beq.n	26572 <k_ms_to_ticks_ceil64+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   26536:	7ebb      	ldrb	r3, [r7, #26]
   26538:	2b00      	cmp	r3, #0
   2653a:	d004      	beq.n	26546 <k_ms_to_ticks_ceil64+0xda>
   2653c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2653e:	6a3b      	ldr	r3, [r7, #32]
   26540:	fbb2 f3f3 	udiv	r3, r2, r3
   26544:	e000      	b.n	26548 <k_ms_to_ticks_ceil64+0xdc>
   26546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26548:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   2654a:	7f7b      	ldrb	r3, [r7, #29]
   2654c:	2b00      	cmp	r3, #0
   2654e:	d006      	beq.n	2655e <k_ms_to_ticks_ceil64+0xf2>
			off = rdivisor - 1U;
   26550:	68fb      	ldr	r3, [r7, #12]
   26552:	3b01      	subs	r3, #1
   26554:	461a      	mov	r2, r3
   26556:	f04f 0300 	mov.w	r3, #0
   2655a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   2655e:	7f3b      	ldrb	r3, [r7, #28]
   26560:	2b00      	cmp	r3, #0
   26562:	d006      	beq.n	26572 <k_ms_to_ticks_ceil64+0x106>
			off = rdivisor / 2U;
   26564:	68fb      	ldr	r3, [r7, #12]
   26566:	085b      	lsrs	r3, r3, #1
   26568:	461a      	mov	r2, r3
   2656a:	f04f 0300 	mov.w	r3, #0
   2656e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   26572:	7ebb      	ldrb	r3, [r7, #26]
   26574:	2b00      	cmp	r3, #0
   26576:	d02a      	beq.n	265ce <k_ms_to_ticks_ceil64+0x162>
		t += off;
   26578:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   2657c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   26580:	1884      	adds	r4, r0, r2
   26582:	eb41 0503 	adc.w	r5, r1, r3
   26586:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   2658a:	7fbb      	ldrb	r3, [r7, #30]
   2658c:	2b00      	cmp	r3, #0
   2658e:	d010      	beq.n	265b2 <k_ms_to_ticks_ceil64+0x146>
   26590:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   26594:	2b01      	cmp	r3, #1
   26596:	bf08      	it	eq
   26598:	2a00      	cmpeq	r2, #0
   2659a:	d20a      	bcs.n	265b2 <k_ms_to_ticks_ceil64+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
   2659c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2659e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   265a0:	6a3b      	ldr	r3, [r7, #32]
   265a2:	fbb1 f3f3 	udiv	r3, r1, r3
   265a6:	fbb2 f3f3 	udiv	r3, r2, r3
   265aa:	461a      	mov	r2, r3
   265ac:	f04f 0300 	mov.w	r3, #0
   265b0:	e07a      	b.n	266a8 <k_ms_to_ticks_ceil64+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
   265b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   265b4:	6a3b      	ldr	r3, [r7, #32]
   265b6:	fbb2 f3f3 	udiv	r3, r2, r3
   265ba:	461a      	mov	r2, r3
   265bc:	f04f 0300 	mov.w	r3, #0
   265c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   265c4:	f7e9 fe3a 	bl	1023c <__aeabi_uldivmod>
   265c8:	4602      	mov	r2, r0
   265ca:	460b      	mov	r3, r1
   265cc:	e06c      	b.n	266a8 <k_ms_to_ticks_ceil64+0x23c>
	} else if (mul_ratio) {
   265ce:	7efb      	ldrb	r3, [r7, #27]
   265d0:	2b00      	cmp	r3, #0
   265d2:	d021      	beq.n	26618 <k_ms_to_ticks_ceil64+0x1ac>
		if (result32) {
   265d4:	7fbb      	ldrb	r3, [r7, #30]
   265d6:	2b00      	cmp	r3, #0
   265d8:	d00a      	beq.n	265f0 <k_ms_to_ticks_ceil64+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
   265da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   265dc:	6a39      	ldr	r1, [r7, #32]
   265de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   265e0:	fbb1 f2f2 	udiv	r2, r1, r2
   265e4:	fb02 f303 	mul.w	r3, r2, r3
   265e8:	461a      	mov	r2, r3
   265ea:	f04f 0300 	mov.w	r3, #0
   265ee:	e05b      	b.n	266a8 <k_ms_to_ticks_ceil64+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
   265f0:	6a3a      	ldr	r2, [r7, #32]
   265f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   265f4:	fbb2 f3f3 	udiv	r3, r2, r3
   265f8:	461a      	mov	r2, r3
   265fa:	f04f 0300 	mov.w	r3, #0
   265fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   26600:	fb03 f001 	mul.w	r0, r3, r1
   26604:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   26606:	fb02 f101 	mul.w	r1, r2, r1
   2660a:	4401      	add	r1, r0
   2660c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   2660e:	fba0 2302 	umull	r2, r3, r0, r2
   26612:	4419      	add	r1, r3
   26614:	460b      	mov	r3, r1
   26616:	e047      	b.n	266a8 <k_ms_to_ticks_ceil64+0x23c>
		if (result32) {
   26618:	7fbb      	ldrb	r3, [r7, #30]
   2661a:	2b00      	cmp	r3, #0
   2661c:	d024      	beq.n	26668 <k_ms_to_ticks_ceil64+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   2661e:	6a3b      	ldr	r3, [r7, #32]
   26620:	461a      	mov	r2, r3
   26622:	f04f 0300 	mov.w	r3, #0
   26626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   26628:	fb03 f001 	mul.w	r0, r3, r1
   2662c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   2662e:	fb02 f101 	mul.w	r1, r2, r1
   26632:	4401      	add	r1, r0
   26634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   26636:	fba0 2302 	umull	r2, r3, r0, r2
   2663a:	4419      	add	r1, r3
   2663c:	460b      	mov	r3, r1
   2663e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   26642:	eb12 0a00 	adds.w	sl, r2, r0
   26646:	eb43 0b01 	adc.w	fp, r3, r1
   2664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2664c:	461a      	mov	r2, r3
   2664e:	f04f 0300 	mov.w	r3, #0
   26652:	4650      	mov	r0, sl
   26654:	4659      	mov	r1, fp
   26656:	f7e9 fdf1 	bl	1023c <__aeabi_uldivmod>
   2665a:	4602      	mov	r2, r0
   2665c:	460b      	mov	r3, r1
   2665e:	4613      	mov	r3, r2
   26660:	461a      	mov	r2, r3
   26662:	f04f 0300 	mov.w	r3, #0
   26666:	e01f      	b.n	266a8 <k_ms_to_ticks_ceil64+0x23c>
			return (t * to_hz + off) / from_hz;
   26668:	6a3b      	ldr	r3, [r7, #32]
   2666a:	461a      	mov	r2, r3
   2666c:	f04f 0300 	mov.w	r3, #0
   26670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   26672:	fb03 f001 	mul.w	r0, r3, r1
   26676:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   26678:	fb02 f101 	mul.w	r1, r2, r1
   2667c:	4401      	add	r1, r0
   2667e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   26680:	fba0 2302 	umull	r2, r3, r0, r2
   26684:	4419      	add	r1, r3
   26686:	460b      	mov	r3, r1
   26688:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   2668c:	eb12 0800 	adds.w	r8, r2, r0
   26690:	eb43 0901 	adc.w	r9, r3, r1
   26694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26696:	461a      	mov	r2, r3
   26698:	f04f 0300 	mov.w	r3, #0
   2669c:	4640      	mov	r0, r8
   2669e:	4649      	mov	r1, r9
   266a0:	f7e9 fdcc 	bl	1023c <__aeabi_uldivmod>
   266a4:	4602      	mov	r2, r0
   266a6:	460b      	mov	r3, r1
}
   266a8:	4610      	mov	r0, r2
   266aa:	4619      	mov	r1, r3
   266ac:	3730      	adds	r7, #48	; 0x30
   266ae:	46bd      	mov	sp, r7
   266b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

000266b4 <k_ticks_to_ms_floor64>:
{
   266b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   266b8:	b08c      	sub	sp, #48	; 0x30
   266ba:	af00      	add	r7, sp, #0
   266bc:	e9c7 0100 	strd	r0, r1, [r7]
   266c0:	e9d7 2300 	ldrd	r2, r3, [r7]
   266c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   266c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   266cc:	627b      	str	r3, [r7, #36]	; 0x24
   266ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   266d2:	623b      	str	r3, [r7, #32]
   266d4:	2301      	movs	r3, #1
   266d6:	77fb      	strb	r3, [r7, #31]
   266d8:	2300      	movs	r3, #0
   266da:	77bb      	strb	r3, [r7, #30]
   266dc:	2300      	movs	r3, #0
   266de:	777b      	strb	r3, [r7, #29]
   266e0:	2300      	movs	r3, #0
   266e2:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   266e4:	7ffb      	ldrb	r3, [r7, #31]
   266e6:	2b00      	cmp	r3, #0
   266e8:	d00f      	beq.n	2670a <k_ticks_to_ms_floor64+0x56>
	bool mul_ratio = const_hz &&
   266ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   266ec:	6a3b      	ldr	r3, [r7, #32]
   266ee:	429a      	cmp	r2, r3
   266f0:	d20b      	bcs.n	2670a <k_ticks_to_ms_floor64+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   266f2:	6a3b      	ldr	r3, [r7, #32]
   266f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   266f6:	fbb3 f2f2 	udiv	r2, r3, r2
   266fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
   266fc:	fb01 f202 	mul.w	r2, r1, r2
   26700:	1a9b      	subs	r3, r3, r2
   26702:	2b00      	cmp	r3, #0
   26704:	d101      	bne.n	2670a <k_ticks_to_ms_floor64+0x56>
   26706:	2301      	movs	r3, #1
   26708:	e000      	b.n	2670c <k_ticks_to_ms_floor64+0x58>
   2670a:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   2670c:	76fb      	strb	r3, [r7, #27]
   2670e:	7efb      	ldrb	r3, [r7, #27]
   26710:	f003 0301 	and.w	r3, r3, #1
   26714:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   26716:	7ffb      	ldrb	r3, [r7, #31]
   26718:	2b00      	cmp	r3, #0
   2671a:	d00f      	beq.n	2673c <k_ticks_to_ms_floor64+0x88>
	bool div_ratio = const_hz &&
   2671c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2671e:	6a3b      	ldr	r3, [r7, #32]
   26720:	429a      	cmp	r2, r3
   26722:	d90b      	bls.n	2673c <k_ticks_to_ms_floor64+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   26724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26726:	6a3a      	ldr	r2, [r7, #32]
   26728:	fbb3 f2f2 	udiv	r2, r3, r2
   2672c:	6a39      	ldr	r1, [r7, #32]
   2672e:	fb01 f202 	mul.w	r2, r1, r2
   26732:	1a9b      	subs	r3, r3, r2
   26734:	2b00      	cmp	r3, #0
   26736:	d101      	bne.n	2673c <k_ticks_to_ms_floor64+0x88>
   26738:	2301      	movs	r3, #1
   2673a:	e000      	b.n	2673e <k_ticks_to_ms_floor64+0x8a>
   2673c:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   2673e:	76bb      	strb	r3, [r7, #26]
   26740:	7ebb      	ldrb	r3, [r7, #26]
   26742:	f003 0301 	and.w	r3, r3, #1
   26746:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   26748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2674a:	6a3b      	ldr	r3, [r7, #32]
   2674c:	429a      	cmp	r2, r3
   2674e:	d10a      	bne.n	26766 <k_ticks_to_ms_floor64+0xb2>
		return result32 ? ((uint32_t)t) : t;
   26750:	7fbb      	ldrb	r3, [r7, #30]
   26752:	2b00      	cmp	r3, #0
   26754:	d004      	beq.n	26760 <k_ticks_to_ms_floor64+0xac>
   26756:	6abb      	ldr	r3, [r7, #40]	; 0x28
   26758:	461a      	mov	r2, r3
   2675a:	f04f 0300 	mov.w	r3, #0
   2675e:	e0c7      	b.n	268f0 <k_ticks_to_ms_floor64+0x23c>
   26760:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   26764:	e0c4      	b.n	268f0 <k_ticks_to_ms_floor64+0x23c>
	uint64_t off = 0;
   26766:	f04f 0200 	mov.w	r2, #0
   2676a:	f04f 0300 	mov.w	r3, #0
   2676e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   26772:	7efb      	ldrb	r3, [r7, #27]
   26774:	f083 0301 	eor.w	r3, r3, #1
   26778:	b2db      	uxtb	r3, r3
   2677a:	2b00      	cmp	r3, #0
   2677c:	d01d      	beq.n	267ba <k_ticks_to_ms_floor64+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   2677e:	7ebb      	ldrb	r3, [r7, #26]
   26780:	2b00      	cmp	r3, #0
   26782:	d004      	beq.n	2678e <k_ticks_to_ms_floor64+0xda>
   26784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26786:	6a3b      	ldr	r3, [r7, #32]
   26788:	fbb2 f3f3 	udiv	r3, r2, r3
   2678c:	e000      	b.n	26790 <k_ticks_to_ms_floor64+0xdc>
   2678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26790:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   26792:	7f7b      	ldrb	r3, [r7, #29]
   26794:	2b00      	cmp	r3, #0
   26796:	d006      	beq.n	267a6 <k_ticks_to_ms_floor64+0xf2>
			off = rdivisor - 1U;
   26798:	68fb      	ldr	r3, [r7, #12]
   2679a:	3b01      	subs	r3, #1
   2679c:	461a      	mov	r2, r3
   2679e:	f04f 0300 	mov.w	r3, #0
   267a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   267a6:	7f3b      	ldrb	r3, [r7, #28]
   267a8:	2b00      	cmp	r3, #0
   267aa:	d006      	beq.n	267ba <k_ticks_to_ms_floor64+0x106>
			off = rdivisor / 2U;
   267ac:	68fb      	ldr	r3, [r7, #12]
   267ae:	085b      	lsrs	r3, r3, #1
   267b0:	461a      	mov	r2, r3
   267b2:	f04f 0300 	mov.w	r3, #0
   267b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   267ba:	7ebb      	ldrb	r3, [r7, #26]
   267bc:	2b00      	cmp	r3, #0
   267be:	d02a      	beq.n	26816 <k_ticks_to_ms_floor64+0x162>
		t += off;
   267c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   267c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   267c8:	1884      	adds	r4, r0, r2
   267ca:	eb41 0503 	adc.w	r5, r1, r3
   267ce:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   267d2:	7fbb      	ldrb	r3, [r7, #30]
   267d4:	2b00      	cmp	r3, #0
   267d6:	d010      	beq.n	267fa <k_ticks_to_ms_floor64+0x146>
   267d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   267dc:	2b01      	cmp	r3, #1
   267de:	bf08      	it	eq
   267e0:	2a00      	cmpeq	r2, #0
   267e2:	d20a      	bcs.n	267fa <k_ticks_to_ms_floor64+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
   267e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   267e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
   267e8:	6a3b      	ldr	r3, [r7, #32]
   267ea:	fbb1 f3f3 	udiv	r3, r1, r3
   267ee:	fbb2 f3f3 	udiv	r3, r2, r3
   267f2:	461a      	mov	r2, r3
   267f4:	f04f 0300 	mov.w	r3, #0
   267f8:	e07a      	b.n	268f0 <k_ticks_to_ms_floor64+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
   267fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   267fc:	6a3b      	ldr	r3, [r7, #32]
   267fe:	fbb2 f3f3 	udiv	r3, r2, r3
   26802:	461a      	mov	r2, r3
   26804:	f04f 0300 	mov.w	r3, #0
   26808:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   2680c:	f7e9 fd16 	bl	1023c <__aeabi_uldivmod>
   26810:	4602      	mov	r2, r0
   26812:	460b      	mov	r3, r1
   26814:	e06c      	b.n	268f0 <k_ticks_to_ms_floor64+0x23c>
	} else if (mul_ratio) {
   26816:	7efb      	ldrb	r3, [r7, #27]
   26818:	2b00      	cmp	r3, #0
   2681a:	d021      	beq.n	26860 <k_ticks_to_ms_floor64+0x1ac>
		if (result32) {
   2681c:	7fbb      	ldrb	r3, [r7, #30]
   2681e:	2b00      	cmp	r3, #0
   26820:	d00a      	beq.n	26838 <k_ticks_to_ms_floor64+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
   26822:	6abb      	ldr	r3, [r7, #40]	; 0x28
   26824:	6a39      	ldr	r1, [r7, #32]
   26826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   26828:	fbb1 f2f2 	udiv	r2, r1, r2
   2682c:	fb02 f303 	mul.w	r3, r2, r3
   26830:	461a      	mov	r2, r3
   26832:	f04f 0300 	mov.w	r3, #0
   26836:	e05b      	b.n	268f0 <k_ticks_to_ms_floor64+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
   26838:	6a3a      	ldr	r2, [r7, #32]
   2683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2683c:	fbb2 f3f3 	udiv	r3, r2, r3
   26840:	461a      	mov	r2, r3
   26842:	f04f 0300 	mov.w	r3, #0
   26846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   26848:	fb03 f001 	mul.w	r0, r3, r1
   2684c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   2684e:	fb02 f101 	mul.w	r1, r2, r1
   26852:	4401      	add	r1, r0
   26854:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   26856:	fba0 2302 	umull	r2, r3, r0, r2
   2685a:	4419      	add	r1, r3
   2685c:	460b      	mov	r3, r1
   2685e:	e047      	b.n	268f0 <k_ticks_to_ms_floor64+0x23c>
		if (result32) {
   26860:	7fbb      	ldrb	r3, [r7, #30]
   26862:	2b00      	cmp	r3, #0
   26864:	d024      	beq.n	268b0 <k_ticks_to_ms_floor64+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   26866:	6a3b      	ldr	r3, [r7, #32]
   26868:	461a      	mov	r2, r3
   2686a:	f04f 0300 	mov.w	r3, #0
   2686e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   26870:	fb03 f001 	mul.w	r0, r3, r1
   26874:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   26876:	fb02 f101 	mul.w	r1, r2, r1
   2687a:	4401      	add	r1, r0
   2687c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   2687e:	fba0 2302 	umull	r2, r3, r0, r2
   26882:	4419      	add	r1, r3
   26884:	460b      	mov	r3, r1
   26886:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   2688a:	eb12 0a00 	adds.w	sl, r2, r0
   2688e:	eb43 0b01 	adc.w	fp, r3, r1
   26892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   26894:	461a      	mov	r2, r3
   26896:	f04f 0300 	mov.w	r3, #0
   2689a:	4650      	mov	r0, sl
   2689c:	4659      	mov	r1, fp
   2689e:	f7e9 fccd 	bl	1023c <__aeabi_uldivmod>
   268a2:	4602      	mov	r2, r0
   268a4:	460b      	mov	r3, r1
   268a6:	4613      	mov	r3, r2
   268a8:	461a      	mov	r2, r3
   268aa:	f04f 0300 	mov.w	r3, #0
   268ae:	e01f      	b.n	268f0 <k_ticks_to_ms_floor64+0x23c>
			return (t * to_hz + off) / from_hz;
   268b0:	6a3b      	ldr	r3, [r7, #32]
   268b2:	461a      	mov	r2, r3
   268b4:	f04f 0300 	mov.w	r3, #0
   268b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   268ba:	fb03 f001 	mul.w	r0, r3, r1
   268be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   268c0:	fb02 f101 	mul.w	r1, r2, r1
   268c4:	4401      	add	r1, r0
   268c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   268c8:	fba0 2302 	umull	r2, r3, r0, r2
   268cc:	4419      	add	r1, r3
   268ce:	460b      	mov	r3, r1
   268d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   268d4:	eb12 0800 	adds.w	r8, r2, r0
   268d8:	eb43 0901 	adc.w	r9, r3, r1
   268dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   268de:	461a      	mov	r2, r3
   268e0:	f04f 0300 	mov.w	r3, #0
   268e4:	4640      	mov	r0, r8
   268e6:	4649      	mov	r1, r9
   268e8:	f7e9 fca8 	bl	1023c <__aeabi_uldivmod>
   268ec:	4602      	mov	r2, r0
   268ee:	460b      	mov	r3, r1
}
   268f0:	4610      	mov	r0, r2
   268f2:	4619      	mov	r1, r3
   268f4:	3730      	adds	r7, #48	; 0x30
   268f6:	46bd      	mov	sp, r7
   268f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

000268fc <z_errno>:
extern "C" {
#endif

extern int * z_impl_z_errno(void);
static inline int * z_errno(void)
{
   268fc:	b580      	push	{r7, lr}
   268fe:	af00      	add	r7, sp, #0
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   26900:	f7f5 fb02 	bl	1bf08 <z_impl_z_errno>
   26904:	4603      	mov	r3, r0
}
   26906:	4618      	mov	r0, r3
   26908:	bd80      	pop	{r7, pc}

0002690a <k_uptime_get>:
{
   2690a:	b580      	push	{r7, lr}
   2690c:	af00      	add	r7, sp, #0
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   2690e:	f000 f841 	bl	26994 <k_uptime_ticks>
   26912:	4602      	mov	r2, r0
   26914:	460b      	mov	r3, r1
   26916:	4610      	mov	r0, r2
   26918:	4619      	mov	r1, r3
   2691a:	f7ff fecb 	bl	266b4 <k_ticks_to_ms_floor64>
   2691e:	4602      	mov	r2, r0
   26920:	460b      	mov	r3, r1
}
   26922:	4610      	mov	r0, r2
   26924:	4619      	mov	r1, r3
   26926:	bd80      	pop	{r7, pc}

00026928 <k_uptime_delta>:
{
   26928:	b5b0      	push	{r4, r5, r7, lr}
   2692a:	b086      	sub	sp, #24
   2692c:	af00      	add	r7, sp, #0
   2692e:	6078      	str	r0, [r7, #4]
	uptime = k_uptime_get();
   26930:	f7ff ffeb 	bl	2690a <k_uptime_get>
   26934:	e9c7 0104 	strd	r0, r1, [r7, #16]
	delta = uptime - *reftime;
   26938:	687b      	ldr	r3, [r7, #4]
   2693a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2693e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   26942:	1a84      	subs	r4, r0, r2
   26944:	eb61 0503 	sbc.w	r5, r1, r3
   26948:	e9c7 4502 	strd	r4, r5, [r7, #8]
	*reftime = uptime;
   2694c:	6879      	ldr	r1, [r7, #4]
   2694e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   26952:	e9c1 2300 	strd	r2, r3, [r1]
	return delta;
   26956:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
   2695a:	4610      	mov	r0, r2
   2695c:	4619      	mov	r1, r3
   2695e:	3718      	adds	r7, #24
   26960:	46bd      	mov	sp, r7
   26962:	bdb0      	pop	{r4, r5, r7, pc}

00026964 <k_busy_wait>:
{
   26964:	b580      	push	{r7, lr}
   26966:	b082      	sub	sp, #8
   26968:	af00      	add	r7, sp, #0
   2696a:	6078      	str	r0, [r7, #4]
	z_impl_k_busy_wait(usec_to_wait);
   2696c:	6878      	ldr	r0, [r7, #4]
   2696e:	f002 fa2e 	bl	28dce <z_impl_k_busy_wait>
}
   26972:	bf00      	nop
   26974:	3708      	adds	r7, #8
   26976:	46bd      	mov	sp, r7
   26978:	bd80      	pop	{r7, pc}

0002697a <k_yield>:
{
   2697a:	b580      	push	{r7, lr}
   2697c:	af00      	add	r7, sp, #0
	z_impl_k_yield();
   2697e:	f7f8 ffbf 	bl	1f900 <z_impl_k_yield>
}
   26982:	bf00      	nop
   26984:	bd80      	pop	{r7, pc}

00026986 <k_current_get>:
{
   26986:	b580      	push	{r7, lr}
   26988:	af00      	add	r7, sp, #0
	return z_impl_k_current_get();
   2698a:	f7f9 fa0f 	bl	1fdac <z_impl_k_current_get>
   2698e:	4603      	mov	r3, r0
}
   26990:	4618      	mov	r0, r3
   26992:	bd80      	pop	{r7, pc}

00026994 <k_uptime_ticks>:
{
   26994:	b580      	push	{r7, lr}
   26996:	af00      	add	r7, sp, #0
	return z_impl_k_uptime_ticks();
   26998:	f002 fa10 	bl	28dbc <z_impl_k_uptime_ticks>
   2699c:	4602      	mov	r2, r0
   2699e:	460b      	mov	r3, r1
}
   269a0:	4610      	mov	r0, r2
   269a2:	4619      	mov	r1, r3
   269a4:	bd80      	pop	{r7, pc}

000269a6 <k_sem_init>:
{
   269a6:	b580      	push	{r7, lr}
   269a8:	b084      	sub	sp, #16
   269aa:	af00      	add	r7, sp, #0
   269ac:	60f8      	str	r0, [r7, #12]
   269ae:	60b9      	str	r1, [r7, #8]
   269b0:	607a      	str	r2, [r7, #4]
	return z_impl_k_sem_init(sem, initial_count, limit);
   269b2:	687a      	ldr	r2, [r7, #4]
   269b4:	68b9      	ldr	r1, [r7, #8]
   269b6:	68f8      	ldr	r0, [r7, #12]
   269b8:	f001 fb83 	bl	280c2 <z_impl_k_sem_init>
   269bc:	4603      	mov	r3, r0
}
   269be:	4618      	mov	r0, r3
   269c0:	3710      	adds	r7, #16
   269c2:	46bd      	mov	sp, r7
   269c4:	bd80      	pop	{r7, pc}

000269c6 <k_sem_take>:
{
   269c6:	b580      	push	{r7, lr}
   269c8:	b084      	sub	sp, #16
   269ca:	af00      	add	r7, sp, #0
   269cc:	60f8      	str	r0, [r7, #12]
   269ce:	e9c7 2300 	strd	r2, r3, [r7]
	return z_impl_k_sem_take(sem, timeout);
   269d2:	e9d7 2300 	ldrd	r2, r3, [r7]
   269d6:	68f8      	ldr	r0, [r7, #12]
   269d8:	f7f7 fa5a 	bl	1de90 <z_impl_k_sem_take>
   269dc:	4603      	mov	r3, r0
}
   269de:	4618      	mov	r0, r3
   269e0:	3710      	adds	r7, #16
   269e2:	46bd      	mov	sp, r7
   269e4:	bd80      	pop	{r7, pc}

000269e6 <k_sem_give>:
{
   269e6:	b580      	push	{r7, lr}
   269e8:	b082      	sub	sp, #8
   269ea:	af00      	add	r7, sp, #0
   269ec:	6078      	str	r0, [r7, #4]
	z_impl_k_sem_give(sem);
   269ee:	6878      	ldr	r0, [r7, #4]
   269f0:	f7f7 f9e8 	bl	1ddc4 <z_impl_k_sem_give>
}
   269f4:	bf00      	nop
   269f6:	3708      	adds	r7, #8
   269f8:	46bd      	mov	sp, r7
   269fa:	bd80      	pop	{r7, pc}

000269fc <sleeping_thread_init>:
{
   269fc:	b580      	push	{r7, lr}
   269fe:	b082      	sub	sp, #8
   26a00:	af00      	add	r7, sp, #0
   26a02:	6078      	str	r0, [r7, #4]
	k_sem_init(&thread->sem, 0, 1);
   26a04:	687b      	ldr	r3, [r7, #4]
   26a06:	3304      	adds	r3, #4
   26a08:	2201      	movs	r2, #1
   26a0a:	2100      	movs	r1, #0
   26a0c:	4618      	mov	r0, r3
   26a0e:	f7ff ffca 	bl	269a6 <k_sem_init>
}
   26a12:	bf00      	nop
   26a14:	3708      	adds	r7, #8
   26a16:	46bd      	mov	sp, r7
   26a18:	bd80      	pop	{r7, pc}

00026a1a <nrf_modem_os_busywait>:
{
   26a1a:	b580      	push	{r7, lr}
   26a1c:	b082      	sub	sp, #8
   26a1e:	af00      	add	r7, sp, #0
   26a20:	6078      	str	r0, [r7, #4]
	k_busy_wait(usec);
   26a22:	687b      	ldr	r3, [r7, #4]
   26a24:	4618      	mov	r0, r3
   26a26:	f7ff ff9d 	bl	26964 <k_busy_wait>
}
   26a2a:	bf00      	nop
   26a2c:	3708      	adds	r7, #8
   26a2e:	46bd      	mov	sp, r7
   26a30:	bd80      	pop	{r7, pc}

00026a32 <nrf_modem_os_timedwait>:
{
   26a32:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   26a36:	b08c      	sub	sp, #48	; 0x30
   26a38:	af00      	add	r7, sp, #0
   26a3a:	6078      	str	r0, [r7, #4]
   26a3c:	6039      	str	r1, [r7, #0]
	start = k_uptime_get();
   26a3e:	f7ff ff64 	bl	2690a <k_uptime_get>
   26a42:	4602      	mov	r2, r0
   26a44:	460b      	mov	r3, r1
   26a46:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (*timeout == 0) {
   26a4a:	683b      	ldr	r3, [r7, #0]
   26a4c:	681b      	ldr	r3, [r3, #0]
   26a4e:	2b00      	cmp	r3, #0
   26a50:	d103      	bne.n	26a5a <nrf_modem_os_timedwait+0x28>
		k_yield();
   26a52:	f7ff ff92 	bl	2697a <k_yield>
		return NRF_ETIMEDOUT;
   26a56:	233c      	movs	r3, #60	; 0x3c
   26a58:	e067      	b.n	26b2a <nrf_modem_os_timedwait+0xf8>
	if (*timeout < 0) {
   26a5a:	683b      	ldr	r3, [r7, #0]
   26a5c:	681b      	ldr	r3, [r3, #0]
   26a5e:	2b00      	cmp	r3, #0
   26a60:	da03      	bge.n	26a6a <nrf_modem_os_timedwait+0x38>
		*timeout = SYS_FOREVER_MS;
   26a62:	683b      	ldr	r3, [r7, #0]
   26a64:	f04f 32ff 	mov.w	r2, #4294967295
   26a68:	601a      	str	r2, [r3, #0]
	sleeping_thread_init(&thread);
   26a6a:	f107 0314 	add.w	r3, r7, #20
   26a6e:	4618      	mov	r0, r3
   26a70:	f7ff ffc4 	bl	269fc <sleeping_thread_init>
	if (!sleeping_thread_add(&thread)) {
   26a74:	f107 0314 	add.w	r3, r7, #20
   26a78:	4618      	mov	r0, r3
   26a7a:	f7f2 facb 	bl	19014 <sleeping_thread_add>
   26a7e:	4603      	mov	r3, r0
   26a80:	f083 0301 	eor.w	r3, r3, #1
   26a84:	b2db      	uxtb	r3, r3
   26a86:	2b00      	cmp	r3, #0
   26a88:	d001      	beq.n	26a8e <nrf_modem_os_timedwait+0x5c>
		return 0;
   26a8a:	2300      	movs	r3, #0
   26a8c:	e04d      	b.n	26b2a <nrf_modem_os_timedwait+0xf8>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   26a8e:	683b      	ldr	r3, [r7, #0]
   26a90:	681b      	ldr	r3, [r3, #0]
   26a92:	f1b3 3fff 	cmp.w	r3, #4294967295
   26a96:	d104      	bne.n	26aa2 <nrf_modem_os_timedwait+0x70>
   26a98:	f04f 32ff 	mov.w	r2, #4294967295
   26a9c:	f04f 33ff 	mov.w	r3, #4294967295
   26aa0:	e00c      	b.n	26abc <nrf_modem_os_timedwait+0x8a>
   26aa2:	683b      	ldr	r3, [r7, #0]
   26aa4:	681b      	ldr	r3, [r3, #0]
   26aa6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   26aaa:	461a      	mov	r2, r3
   26aac:	ea4f 73e2 	mov.w	r3, r2, asr #31
   26ab0:	4610      	mov	r0, r2
   26ab2:	4619      	mov	r1, r3
   26ab4:	f7ff fcda 	bl	2646c <k_ms_to_ticks_ceil64>
   26ab8:	4602      	mov	r2, r0
   26aba:	460b      	mov	r3, r1
   26abc:	f107 0114 	add.w	r1, r7, #20
   26ac0:	3104      	adds	r1, #4
   26ac2:	4608      	mov	r0, r1
   26ac4:	f7ff ff7f 	bl	269c6 <k_sem_take>
	sleeping_thread_remove(&thread);
   26ac8:	f107 0314 	add.w	r3, r7, #20
   26acc:	4618      	mov	r0, r3
   26ace:	f7f2 fad7 	bl	19080 <sleeping_thread_remove>
	if (*timeout == SYS_FOREVER_MS) {
   26ad2:	683b      	ldr	r3, [r7, #0]
   26ad4:	681b      	ldr	r3, [r3, #0]
   26ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
   26ada:	d101      	bne.n	26ae0 <nrf_modem_os_timedwait+0xae>
		return 0;
   26adc:	2300      	movs	r3, #0
   26ade:	e024      	b.n	26b2a <nrf_modem_os_timedwait+0xf8>
	remaining = *timeout - k_uptime_delta(&start);
   26ae0:	683b      	ldr	r3, [r7, #0]
   26ae2:	681b      	ldr	r3, [r3, #0]
   26ae4:	461c      	mov	r4, r3
   26ae6:	ea4f 75e4 	mov.w	r5, r4, asr #31
   26aea:	f107 0308 	add.w	r3, r7, #8
   26aee:	4618      	mov	r0, r3
   26af0:	f7ff ff1a 	bl	26928 <k_uptime_delta>
   26af4:	4602      	mov	r2, r0
   26af6:	460b      	mov	r3, r1
   26af8:	ebb4 0802 	subs.w	r8, r4, r2
   26afc:	eb65 0903 	sbc.w	r9, r5, r3
   26b00:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
	*timeout = remaining > 0 ? remaining : 0;
   26b04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   26b08:	2a00      	cmp	r2, #0
   26b0a:	f173 0100 	sbcs.w	r1, r3, #0
   26b0e:	da03      	bge.n	26b18 <nrf_modem_os_timedwait+0xe6>
   26b10:	f04f 0200 	mov.w	r2, #0
   26b14:	f04f 0300 	mov.w	r3, #0
   26b18:	683b      	ldr	r3, [r7, #0]
   26b1a:	601a      	str	r2, [r3, #0]
	if (*timeout == 0) {
   26b1c:	683b      	ldr	r3, [r7, #0]
   26b1e:	681b      	ldr	r3, [r3, #0]
   26b20:	2b00      	cmp	r3, #0
   26b22:	d101      	bne.n	26b28 <nrf_modem_os_timedwait+0xf6>
		return NRF_ETIMEDOUT;
   26b24:	233c      	movs	r3, #60	; 0x3c
   26b26:	e000      	b.n	26b2a <nrf_modem_os_timedwait+0xf8>
	return 0;
   26b28:	2300      	movs	r3, #0
}
   26b2a:	4618      	mov	r0, r3
   26b2c:	3730      	adds	r7, #48	; 0x30
   26b2e:	46bd      	mov	sp, r7
   26b30:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

00026b34 <nrf_modem_os_is_in_isr>:
{
   26b34:	b580      	push	{r7, lr}
   26b36:	af00      	add	r7, sp, #0
	return k_is_in_isr();
   26b38:	f001 f8de 	bl	27cf8 <k_is_in_isr>
   26b3c:	4603      	mov	r3, r0
}
   26b3e:	4618      	mov	r0, r3
   26b40:	bd80      	pop	{r7, pc}

00026b42 <nrf_modem_os_application_irq_set>:
{
   26b42:	b580      	push	{r7, lr}
   26b44:	af00      	add	r7, sp, #0
	NVIC_SetPendingIRQ(NRF_MODEM_APPLICATION_IRQ);
   26b46:	201c      	movs	r0, #28
   26b48:	f7f2 f9a6 	bl	18e98 <__NVIC_SetPendingIRQ>
}
   26b4c:	bf00      	nop
   26b4e:	bd80      	pop	{r7, pc}

00026b50 <nrf_modem_os_application_irq_clear>:
{
   26b50:	b580      	push	{r7, lr}
   26b52:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(NRF_MODEM_APPLICATION_IRQ);
   26b54:	201c      	movs	r0, #28
   26b56:	f7f2 f9bd 	bl	18ed4 <__NVIC_ClearPendingIRQ>
}
   26b5a:	bf00      	nop
   26b5c:	bd80      	pop	{r7, pc}

00026b5e <nrf_modem_os_trace_irq_set>:
{
   26b5e:	b580      	push	{r7, lr}
   26b60:	af00      	add	r7, sp, #0
	NVIC_SetPendingIRQ(TRACE_IRQ);
   26b62:	201d      	movs	r0, #29
   26b64:	f7f2 f998 	bl	18e98 <__NVIC_SetPendingIRQ>
}
   26b68:	bf00      	nop
   26b6a:	bd80      	pop	{r7, pc}

00026b6c <nrf_modem_os_trace_irq_clear>:
{
   26b6c:	b580      	push	{r7, lr}
   26b6e:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TRACE_IRQ);
   26b70:	201d      	movs	r0, #29
   26b72:	f7f2 f9af 	bl	18ed4 <__NVIC_ClearPendingIRQ>
}
   26b76:	bf00      	nop
   26b78:	bd80      	pop	{r7, pc}

00026b7a <rpc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   26b7a:	4668      	mov	r0, sp
   26b7c:	f020 0107 	bic.w	r1, r0, #7
   26b80:	468d      	mov	sp, r1
   26b82:	b581      	push	{r0, r7, lr}
   26b84:	b083      	sub	sp, #12
   26b86:	af00      	add	r7, sp, #0
   26b88:	f7ff fc5d 	bl	26446 <arch_isr_direct_header>
   26b8c:	f7f2 fd4a 	bl	19624 <rpc_proxy_irq_handler_body>
   26b90:	6078      	str	r0, [r7, #4]
   26b92:	6878      	ldr	r0, [r7, #4]
   26b94:	f7ff fc5d 	bl	26452 <arch_isr_direct_footer>
   26b98:	bf00      	nop
   26b9a:	370c      	adds	r7, #12
   26b9c:	46bd      	mov	sp, r7
   26b9e:	e8bd 4081 	ldmia.w	sp!, {r0, r7, lr}
   26ba2:	4685      	mov	sp, r0
   26ba4:	4770      	bx	lr

00026ba6 <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   26ba6:	4668      	mov	r0, sp
   26ba8:	f020 0107 	bic.w	r1, r0, #7
   26bac:	468d      	mov	sp, r1
   26bae:	b581      	push	{r0, r7, lr}
   26bb0:	b083      	sub	sp, #12
   26bb2:	af00      	add	r7, sp, #0
   26bb4:	f7ff fc47 	bl	26446 <arch_isr_direct_header>
   26bb8:	f000 f80b 	bl	26bd2 <trace_proxy_irq_handler_body>
   26bbc:	6078      	str	r0, [r7, #4]
   26bbe:	6878      	ldr	r0, [r7, #4]
   26bc0:	f7ff fc47 	bl	26452 <arch_isr_direct_footer>
   26bc4:	bf00      	nop
   26bc6:	370c      	adds	r7, #12
   26bc8:	46bd      	mov	sp, r7
   26bca:	e8bd 4081 	ldmia.w	sp!, {r0, r7, lr}
   26bce:	4685      	mov	sp, r0
   26bd0:	4770      	bx	lr

00026bd2 <trace_proxy_irq_handler_body>:
{
   26bd2:	b580      	push	{r7, lr}
   26bd4:	af00      	add	r7, sp, #0
	nrf_modem_os_trace_irq_handler();
   26bd6:	f7f3 feb9 	bl	1a94c <nrf_modem_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   26bda:	f7ef f895 	bl	15d08 <_arch_isr_direct_pm>
	return 1; /* We should check if scheduling decision should be made */
   26bde:	2301      	movs	r3, #1
}
   26be0:	4618      	mov	r0, r3
   26be2:	bd80      	pop	{r7, pc}

00026be4 <trace_task_create>:
{
   26be4:	b580      	push	{r7, lr}
   26be6:	af00      	add	r7, sp, #0
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   26be8:	2200      	movs	r2, #0
   26bea:	2106      	movs	r1, #6
   26bec:	201d      	movs	r0, #29
   26bee:	f7ef f85b 	bl	15ca8 <z_arm_irq_priority_set>
	irq_enable(TRACE_IRQ);
   26bf2:	201d      	movs	r0, #29
   26bf4:	f7fd fb67 	bl	242c6 <arch_irq_enable>
}
   26bf8:	bf00      	nop
   26bfa:	bd80      	pop	{r7, pc}

00026bfc <read_task_create>:
{
   26bfc:	b580      	push	{r7, lr}
   26bfe:	af00      	add	r7, sp, #0
	IRQ_DIRECT_CONNECT(NRF_MODEM_APPLICATION_IRQ,
   26c00:	2200      	movs	r2, #0
   26c02:	2106      	movs	r1, #6
   26c04:	201c      	movs	r0, #28
   26c06:	f7ef f84f 	bl	15ca8 <z_arm_irq_priority_set>
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
   26c0a:	201c      	movs	r0, #28
   26c0c:	f7fd fb5b 	bl	242c6 <arch_irq_enable>
}
   26c10:	bf00      	nop
   26c12:	bd80      	pop	{r7, pc}

00026c14 <trace_uart_init>:
{
   26c14:	b480      	push	{r7}
   26c16:	af00      	add	r7, sp, #0
}
   26c18:	bf00      	nop
   26c1a:	46bd      	mov	sp, r7
   26c1c:	bc80      	pop	{r7}
   26c1e:	4770      	bx	lr

00026c20 <trace_rtt_init>:
{
   26c20:	b480      	push	{r7}
   26c22:	af00      	add	r7, sp, #0
}
   26c24:	bf00      	nop
   26c26:	46bd      	mov	sp, r7
   26c28:	bc80      	pop	{r7}
   26c2a:	4770      	bx	lr

00026c2c <nrf_modem_os_trace_put>:

int32_t nrf_modem_os_trace_put(const uint8_t * const data, uint32_t len)
{
   26c2c:	b480      	push	{r7}
   26c2e:	b083      	sub	sp, #12
   26c30:	af00      	add	r7, sp, #0
   26c32:	6078      	str	r0, [r7, #4]
   26c34:	6039      	str	r1, [r7, #0]
		SEGGER_RTT_WriteSkipNoLock(trace_rtt_channel, &data[idx],
			transfer_len);
		remaining_bytes -= transfer_len;
	}
#endif
	return 0;
   26c36:	2300      	movs	r3, #0
}
   26c38:	4618      	mov	r0, r3
   26c3a:	370c      	adds	r7, #12
   26c3c:	46bd      	mov	sp, r7
   26c3e:	bc80      	pop	{r7}
   26c40:	4770      	bx	lr

00026c42 <k_is_user_context>:
{
   26c42:	b480      	push	{r7}
   26c44:	af00      	add	r7, sp, #0
	return false;
   26c46:	2300      	movs	r3, #0
}
   26c48:	4618      	mov	r0, r3
   26c4a:	46bd      	mov	sp, r7
   26c4c:	bc80      	pop	{r7}
   26c4e:	4770      	bx	lr

00026c50 <log_panic>:
{
   26c50:	b580      	push	{r7, lr}
   26c52:	af00      	add	r7, sp, #0
	z_impl_log_panic();
   26c54:	f7ec f8be 	bl	12dd4 <z_impl_log_panic>
}
   26c58:	bf00      	nop
   26c5a:	bd80      	pop	{r7, pc}

00026c5c <ext_api_satisfies_req>:
{
   26c5c:	b480      	push	{r7}
   26c5e:	b087      	sub	sp, #28
   26c60:	af00      	add	r7, sp, #0
   26c62:	6078      	str	r0, [r7, #4]
   26c64:	6039      	str	r1, [r7, #0]
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   26c66:	683b      	ldr	r3, [r7, #0]
   26c68:	691b      	ldr	r3, [r3, #16]
   26c6a:	617b      	str	r3, [r7, #20]
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   26c6c:	683b      	ldr	r3, [r7, #0]
   26c6e:	695b      	ldr	r3, [r3, #20]
   26c70:	613b      	str	r3, [r7, #16]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   26c72:	683b      	ldr	r3, [r7, #0]
   26c74:	699b      	ldr	r3, [r3, #24]
   26c76:	60fb      	str	r3, [r7, #12]
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   26c78:	683b      	ldr	r3, [r7, #0]
   26c7a:	69db      	ldr	r3, [r3, #28]
   26c7c:	60bb      	str	r3, [r7, #8]
	return ((ext_api->ext_api_id == req_id)
   26c7e:	687b      	ldr	r3, [r7, #4]
   26c80:	691b      	ldr	r3, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   26c82:	697a      	ldr	r2, [r7, #20]
   26c84:	429a      	cmp	r2, r3
   26c86:	d112      	bne.n	26cae <ext_api_satisfies_req+0x52>
		&&  (ext_api->ext_api_version >= req_min_version)
   26c88:	687b      	ldr	r3, [r7, #4]
   26c8a:	699b      	ldr	r3, [r3, #24]
   26c8c:	68fa      	ldr	r2, [r7, #12]
   26c8e:	429a      	cmp	r2, r3
   26c90:	d80d      	bhi.n	26cae <ext_api_satisfies_req+0x52>
		&&  (ext_api->ext_api_version <  req_max_version)
   26c92:	687b      	ldr	r3, [r7, #4]
   26c94:	699b      	ldr	r3, [r3, #24]
   26c96:	68ba      	ldr	r2, [r7, #8]
   26c98:	429a      	cmp	r2, r3
   26c9a:	d908      	bls.n	26cae <ext_api_satisfies_req+0x52>
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   26c9c:	687b      	ldr	r3, [r7, #4]
   26c9e:	695a      	ldr	r2, [r3, #20]
   26ca0:	693b      	ldr	r3, [r7, #16]
   26ca2:	4013      	ands	r3, r2
   26ca4:	693a      	ldr	r2, [r7, #16]
   26ca6:	429a      	cmp	r2, r3
   26ca8:	d101      	bne.n	26cae <ext_api_satisfies_req+0x52>
   26caa:	2301      	movs	r3, #1
   26cac:	e000      	b.n	26cb0 <ext_api_satisfies_req+0x54>
   26cae:	2300      	movs	r3, #0
   26cb0:	f003 0301 	and.w	r3, r3, #1
   26cb4:	b2db      	uxtb	r3, r3
}
   26cb6:	4618      	mov	r0, r3
   26cb8:	371c      	adds	r7, #28
   26cba:	46bd      	mov	sp, r7
   26cbc:	bc80      	pop	{r7}
   26cbe:	4770      	bx	lr

00026cc0 <skip_ext_apis>:
{
   26cc0:	b480      	push	{r7}
   26cc2:	b085      	sub	sp, #20
   26cc4:	af00      	add	r7, sp, #0
   26cc6:	6078      	str	r0, [r7, #4]
	const struct fw_info_ext_api *ext_api = &fw_info->ext_apis[0];
   26cc8:	687b      	ldr	r3, [r7, #4]
   26cca:	333c      	adds	r3, #60	; 0x3c
   26ccc:	60fb      	str	r3, [r7, #12]
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
   26cce:	2300      	movs	r3, #0
   26cd0:	60bb      	str	r3, [r7, #8]
   26cd2:	e007      	b.n	26ce4 <skip_ext_apis+0x24>
		ADVANCE_EXT_API(ext_api);
   26cd4:	68fb      	ldr	r3, [r7, #12]
   26cd6:	68db      	ldr	r3, [r3, #12]
   26cd8:	68fa      	ldr	r2, [r7, #12]
   26cda:	4413      	add	r3, r2
   26cdc:	60fb      	str	r3, [r7, #12]
	for (uint32_t j = 0; j < fw_info->ext_api_num; j++) {
   26cde:	68bb      	ldr	r3, [r7, #8]
   26ce0:	3301      	adds	r3, #1
   26ce2:	60bb      	str	r3, [r7, #8]
   26ce4:	687b      	ldr	r3, [r7, #4]
   26ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   26ce8:	68ba      	ldr	r2, [r7, #8]
   26cea:	429a      	cmp	r2, r3
   26cec:	d3f2      	bcc.n	26cd4 <skip_ext_apis+0x14>
	return (const struct fw_info_ext_api_request *)ext_api;
   26cee:	68fb      	ldr	r3, [r7, #12]
}
   26cf0:	4618      	mov	r0, r3
   26cf2:	3714      	adds	r7, #20
   26cf4:	46bd      	mov	sp, r7
   26cf6:	bc80      	pop	{r7}
   26cf8:	4770      	bx	lr

00026cfa <SystemInit>:

void SystemInit(void)
{
   26cfa:	b580      	push	{r7, lr}
   26cfc:	af00      	add	r7, sp, #0
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
   26cfe:	f7f2 fe05 	bl	1990c <SystemCoreClockUpdate>
}
   26d02:	bf00      	nop
   26d04:	bd80      	pop	{r7, pc}

00026d06 <k_busy_wait>:
{
   26d06:	b580      	push	{r7, lr}
   26d08:	b082      	sub	sp, #8
   26d0a:	af00      	add	r7, sp, #0
   26d0c:	6078      	str	r0, [r7, #4]
	z_impl_k_busy_wait(usec_to_wait);
   26d0e:	6878      	ldr	r0, [r7, #4]
   26d10:	f002 f85d 	bl	28dce <z_impl_k_busy_wait>
}
   26d14:	bf00      	nop
   26d16:	3708      	adds	r7, #8
   26d18:	46bd      	mov	sp, r7
   26d1a:	bd80      	pop	{r7, pc}

00026d1c <nrfx_isr>:
{
   26d1c:	b580      	push	{r7, lr}
   26d1e:	b082      	sub	sp, #8
   26d20:	af00      	add	r7, sp, #0
   26d22:	6078      	str	r0, [r7, #4]
	((nrfx_irq_handler_t)irq_handler)();
   26d24:	687b      	ldr	r3, [r7, #4]
   26d26:	4798      	blx	r3
}
   26d28:	bf00      	nop
   26d2a:	3708      	adds	r7, #8
   26d2c:	46bd      	mov	sp, r7
   26d2e:	bd80      	pop	{r7, pc}

00026d30 <nrfx_busy_wait>:
{
   26d30:	b580      	push	{r7, lr}
   26d32:	b082      	sub	sp, #8
   26d34:	af00      	add	r7, sp, #0
   26d36:	6078      	str	r0, [r7, #4]
	k_busy_wait(usec_to_wait);
   26d38:	6878      	ldr	r0, [r7, #4]
   26d3a:	f7ff ffe4 	bl	26d06 <k_busy_wait>
}
   26d3e:	bf00      	nop
   26d40:	3708      	adds	r7, #8
   26d42:	46bd      	mov	sp, r7
   26d44:	bd80      	pop	{r7, pc}

00026d46 <nrfx_get_irq_number>:
{
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
   26d46:	b480      	push	{r7}
   26d48:	b083      	sub	sp, #12
   26d4a:	af00      	add	r7, sp, #0
   26d4c:	6078      	str	r0, [r7, #4]
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   26d4e:	687b      	ldr	r3, [r7, #4]
   26d50:	0b1b      	lsrs	r3, r3, #12
   26d52:	b25b      	sxtb	r3, r3
}
   26d54:	4618      	mov	r0, r3
   26d56:	370c      	adds	r7, #12
   26d58:	46bd      	mov	sp, r7
   26d5a:	bc80      	pop	{r7}
   26d5c:	4770      	bx	lr

00026d5e <nrf_event_readback>:
{
   26d5e:	b480      	push	{r7}
   26d60:	b083      	sub	sp, #12
   26d62:	af00      	add	r7, sp, #0
   26d64:	6078      	str	r0, [r7, #4]
    (void)*((volatile uint32_t *)(p_event_reg));
   26d66:	687b      	ldr	r3, [r7, #4]
   26d68:	681b      	ldr	r3, [r3, #0]
}
   26d6a:	bf00      	nop
   26d6c:	370c      	adds	r7, #12
   26d6e:	46bd      	mov	sp, r7
   26d70:	bc80      	pop	{r7}
   26d72:	4770      	bx	lr

00026d74 <nrf_clock_int_enable>:
{
   26d74:	b480      	push	{r7}
   26d76:	b083      	sub	sp, #12
   26d78:	af00      	add	r7, sp, #0
   26d7a:	6078      	str	r0, [r7, #4]
   26d7c:	6039      	str	r1, [r7, #0]
    p_reg->INTENSET = mask;
   26d7e:	687b      	ldr	r3, [r7, #4]
   26d80:	683a      	ldr	r2, [r7, #0]
   26d82:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   26d86:	bf00      	nop
   26d88:	370c      	adds	r7, #12
   26d8a:	46bd      	mov	sp, r7
   26d8c:	bc80      	pop	{r7}
   26d8e:	4770      	bx	lr

00026d90 <nrf_clock_int_disable>:
{
   26d90:	b480      	push	{r7}
   26d92:	b083      	sub	sp, #12
   26d94:	af00      	add	r7, sp, #0
   26d96:	6078      	str	r0, [r7, #4]
   26d98:	6039      	str	r1, [r7, #0]
    p_reg->INTENCLR = mask;
   26d9a:	687b      	ldr	r3, [r7, #4]
   26d9c:	683a      	ldr	r2, [r7, #0]
   26d9e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   26da2:	bf00      	nop
   26da4:	370c      	adds	r7, #12
   26da6:	46bd      	mov	sp, r7
   26da8:	bc80      	pop	{r7}
   26daa:	4770      	bx	lr

00026dac <nrf_clock_task_trigger>:
{
   26dac:	b480      	push	{r7}
   26dae:	b083      	sub	sp, #12
   26db0:	af00      	add	r7, sp, #0
   26db2:	6078      	str	r0, [r7, #4]
   26db4:	460b      	mov	r3, r1
   26db6:	70fb      	strb	r3, [r7, #3]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26db8:	78fb      	ldrb	r3, [r7, #3]
   26dba:	687a      	ldr	r2, [r7, #4]
   26dbc:	4413      	add	r3, r2
   26dbe:	2201      	movs	r2, #1
   26dc0:	601a      	str	r2, [r3, #0]
}
   26dc2:	bf00      	nop
   26dc4:	370c      	adds	r7, #12
   26dc6:	46bd      	mov	sp, r7
   26dc8:	bc80      	pop	{r7}
   26dca:	4770      	bx	lr

00026dcc <nrf_clock_event_clear>:
{
   26dcc:	b580      	push	{r7, lr}
   26dce:	b082      	sub	sp, #8
   26dd0:	af00      	add	r7, sp, #0
   26dd2:	6078      	str	r0, [r7, #4]
   26dd4:	460b      	mov	r3, r1
   26dd6:	807b      	strh	r3, [r7, #2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26dd8:	887b      	ldrh	r3, [r7, #2]
   26dda:	687a      	ldr	r2, [r7, #4]
   26ddc:	4413      	add	r3, r2
   26dde:	2200      	movs	r2, #0
   26de0:	601a      	str	r2, [r3, #0]
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
   26de2:	887b      	ldrh	r3, [r7, #2]
   26de4:	687a      	ldr	r2, [r7, #4]
   26de6:	4413      	add	r3, r2
   26de8:	4618      	mov	r0, r3
   26dea:	f7ff ffb8 	bl	26d5e <nrf_event_readback>
}
   26dee:	bf00      	nop
   26df0:	3708      	adds	r7, #8
   26df2:	46bd      	mov	sp, r7
   26df4:	bd80      	pop	{r7, pc}

00026df6 <nrf_clock_event_check>:
{
   26df6:	b480      	push	{r7}
   26df8:	b083      	sub	sp, #12
   26dfa:	af00      	add	r7, sp, #0
   26dfc:	6078      	str	r0, [r7, #4]
   26dfe:	460b      	mov	r3, r1
   26e00:	807b      	strh	r3, [r7, #2]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   26e02:	887b      	ldrh	r3, [r7, #2]
   26e04:	687a      	ldr	r2, [r7, #4]
   26e06:	4413      	add	r3, r2
   26e08:	681b      	ldr	r3, [r3, #0]
   26e0a:	2b00      	cmp	r3, #0
   26e0c:	bf14      	ite	ne
   26e0e:	2301      	movne	r3, #1
   26e10:	2300      	moveq	r3, #0
   26e12:	b2db      	uxtb	r3, r3
}
   26e14:	4618      	mov	r0, r3
   26e16:	370c      	adds	r7, #12
   26e18:	46bd      	mov	sp, r7
   26e1a:	bc80      	pop	{r7}
   26e1c:	4770      	bx	lr

00026e1e <nrf_clock_lf_src_set>:
{
   26e1e:	b480      	push	{r7}
   26e20:	b083      	sub	sp, #12
   26e22:	af00      	add	r7, sp, #0
   26e24:	6078      	str	r0, [r7, #4]
   26e26:	460b      	mov	r3, r1
   26e28:	70fb      	strb	r3, [r7, #3]
    p_reg->LFCLKSRC = (uint32_t)(source);
   26e2a:	78fa      	ldrb	r2, [r7, #3]
   26e2c:	687b      	ldr	r3, [r7, #4]
   26e2e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   26e32:	bf00      	nop
   26e34:	370c      	adds	r7, #12
   26e36:	46bd      	mov	sp, r7
   26e38:	bc80      	pop	{r7}
   26e3a:	4770      	bx	lr

00026e3c <k_is_user_context>:
{
   26e3c:	b480      	push	{r7}
   26e3e:	af00      	add	r7, sp, #0
	return false;
   26e40:	2300      	movs	r3, #0
}
   26e42:	4618      	mov	r0, r3
   26e44:	46bd      	mov	sp, r7
   26e46:	bc80      	pop	{r7}
   26e48:	4770      	bx	lr

00026e4a <k_is_user_context>:
{
   26e4a:	b480      	push	{r7}
   26e4c:	af00      	add	r7, sp, #0
	return false;
   26e4e:	2300      	movs	r3, #0
}
   26e50:	4618      	mov	r0, r3
   26e52:	46bd      	mov	sp, r7
   26e54:	bc80      	pop	{r7}
   26e56:	4770      	bx	lr

00026e58 <k_is_user_context>:
{
   26e58:	b480      	push	{r7}
   26e5a:	af00      	add	r7, sp, #0
	return false;
   26e5c:	2300      	movs	r3, #0
}
   26e5e:	4618      	mov	r0, r3
   26e60:	46bd      	mov	sp, r7
   26e62:	bc80      	pop	{r7}
   26e64:	4770      	bx	lr

00026e66 <is_app_channel>:
{
   26e66:	b480      	push	{r7}
   26e68:	b083      	sub	sp, #12
   26e6a:	af00      	add	r7, sp, #0
   26e6c:	4603      	mov	r3, r0
   26e6e:	71fb      	strb	r3, [r7, #7]
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   26e70:	79fb      	ldrb	r3, [r7, #7]
   26e72:	2201      	movs	r2, #1
   26e74:	fa02 f303 	lsl.w	r3, r2, r3
   26e78:	b2db      	uxtb	r3, r3
   26e7a:	2b00      	cmp	r3, #0
   26e7c:	bf14      	ite	ne
   26e7e:	2301      	movne	r3, #1
   26e80:	2300      	moveq	r3, #0
   26e82:	b2db      	uxtb	r3, r3
}
   26e84:	4618      	mov	r0, r3
   26e86:	370c      	adds	r7, #12
   26e88:	46bd      	mov	sp, r7
   26e8a:	bc80      	pop	{r7}
   26e8c:	4770      	bx	lr

00026e8e <nrf_ipc_event_clear>:
{
   26e8e:	b480      	push	{r7}
   26e90:	b083      	sub	sp, #12
   26e92:	af00      	add	r7, sp, #0
   26e94:	6078      	str	r0, [r7, #4]
   26e96:	460b      	mov	r3, r1
   26e98:	807b      	strh	r3, [r7, #2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26e9a:	887b      	ldrh	r3, [r7, #2]
   26e9c:	687a      	ldr	r2, [r7, #4]
   26e9e:	4413      	add	r3, r2
   26ea0:	2200      	movs	r2, #0
   26ea2:	601a      	str	r2, [r3, #0]
}
   26ea4:	bf00      	nop
   26ea6:	370c      	adds	r7, #12
   26ea8:	46bd      	mov	sp, r7
   26eaa:	bc80      	pop	{r7}
   26eac:	4770      	bx	lr

00026eae <nrf_ipc_int_enable>:
{
   26eae:	b480      	push	{r7}
   26eb0:	b083      	sub	sp, #12
   26eb2:	af00      	add	r7, sp, #0
   26eb4:	6078      	str	r0, [r7, #4]
   26eb6:	6039      	str	r1, [r7, #0]
    p_reg->INTENSET = mask;
   26eb8:	687b      	ldr	r3, [r7, #4]
   26eba:	683a      	ldr	r2, [r7, #0]
   26ebc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   26ec0:	bf00      	nop
   26ec2:	370c      	adds	r7, #12
   26ec4:	46bd      	mov	sp, r7
   26ec6:	bc80      	pop	{r7}
   26ec8:	4770      	bx	lr

00026eca <nrf_ipc_int_disable>:
{
   26eca:	b480      	push	{r7}
   26ecc:	b083      	sub	sp, #12
   26ece:	af00      	add	r7, sp, #0
   26ed0:	6078      	str	r0, [r7, #4]
   26ed2:	6039      	str	r1, [r7, #0]
    p_reg->INTENCLR = mask;
   26ed4:	687b      	ldr	r3, [r7, #4]
   26ed6:	683a      	ldr	r2, [r7, #0]
   26ed8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   26edc:	bf00      	nop
   26ede:	370c      	adds	r7, #12
   26ee0:	46bd      	mov	sp, r7
   26ee2:	bc80      	pop	{r7}
   26ee4:	4770      	bx	lr

00026ee6 <nrf_ipc_int_pending_get>:
{
   26ee6:	b480      	push	{r7}
   26ee8:	b083      	sub	sp, #12
   26eea:	af00      	add	r7, sp, #0
   26eec:	6078      	str	r0, [r7, #4]
    return p_reg->INTPEND;
   26eee:	687b      	ldr	r3, [r7, #4]
   26ef0:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
}
   26ef4:	4618      	mov	r0, r3
   26ef6:	370c      	adds	r7, #12
   26ef8:	46bd      	mov	sp, r7
   26efa:	bc80      	pop	{r7}
   26efc:	4770      	bx	lr

00026efe <nrf_ipc_send_config_set>:
{
   26efe:	b480      	push	{r7}
   26f00:	b085      	sub	sp, #20
   26f02:	af00      	add	r7, sp, #0
   26f04:	60f8      	str	r0, [r7, #12]
   26f06:	460b      	mov	r3, r1
   26f08:	607a      	str	r2, [r7, #4]
   26f0a:	72fb      	strb	r3, [r7, #11]
    p_reg->SEND_CNF[index] = channels_mask;
   26f0c:	7afa      	ldrb	r2, [r7, #11]
   26f0e:	68fb      	ldr	r3, [r7, #12]
   26f10:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   26f14:	6879      	ldr	r1, [r7, #4]
   26f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   26f1a:	bf00      	nop
   26f1c:	3714      	adds	r7, #20
   26f1e:	46bd      	mov	sp, r7
   26f20:	bc80      	pop	{r7}
   26f22:	4770      	bx	lr

00026f24 <nrf_ipc_receive_config_set>:
{
   26f24:	b480      	push	{r7}
   26f26:	b085      	sub	sp, #20
   26f28:	af00      	add	r7, sp, #0
   26f2a:	60f8      	str	r0, [r7, #12]
   26f2c:	460b      	mov	r3, r1
   26f2e:	607a      	str	r2, [r7, #4]
   26f30:	72fb      	strb	r3, [r7, #11]
    p_reg->RECEIVE_CNF[index] = channels_mask;
   26f32:	7afa      	ldrb	r2, [r7, #11]
   26f34:	68fb      	ldr	r3, [r7, #12]
   26f36:	f502 72b2 	add.w	r2, r2, #356	; 0x164
   26f3a:	6879      	ldr	r1, [r7, #4]
   26f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   26f40:	bf00      	nop
   26f42:	3714      	adds	r7, #20
   26f44:	46bd      	mov	sp, r7
   26f46:	bc80      	pop	{r7}
   26f48:	4770      	bx	lr

00026f4a <rpc_handle_ctrl_message>:
   26f4a:	2902      	cmp	r1, #2
   26f4c:	b510      	push	{r4, lr}
   26f4e:	4604      	mov	r4, r0
   26f50:	d005      	beq.n	26f5e <rpc_handle_ctrl_message+0x14>
   26f52:	2904      	cmp	r1, #4
   26f54:	d001      	beq.n	26f5a <rpc_handle_ctrl_message+0x10>
   26f56:	2901      	cmp	r1, #1
   26f58:	d107      	bne.n	26f6a <rpc_handle_ctrl_message+0x20>
   26f5a:	2000      	movs	r0, #0
   26f5c:	bd10      	pop	{r4, pc}
   26f5e:	6880      	ldr	r0, [r0, #8]
   26f60:	2800      	cmp	r0, #0
   26f62:	d0fa      	beq.n	26f5a <rpc_handle_ctrl_message+0x10>
   26f64:	f000 f839 	bl	26fda <rpc_transport_local_data_free>
   26f68:	e7f7      	b.n	26f5a <rpc_handle_ctrl_message+0x10>
   26f6a:	6880      	ldr	r0, [r0, #8]
   26f6c:	b108      	cbz	r0, 26f72 <rpc_handle_ctrl_message+0x28>
   26f6e:	f000 f834 	bl	26fda <rpc_transport_local_data_free>
   26f72:	4620      	mov	r0, r4
   26f74:	f000 f82d 	bl	26fd2 <rpc_transport_msg_free>
   26f78:	e7ef      	b.n	26f5a <rpc_handle_ctrl_message+0x10>

00026f7a <rpc_message_send>:
   26f7a:	684b      	ldr	r3, [r1, #4]
   26f7c:	8008      	strh	r0, [r1, #0]
   26f7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   26f82:	f043 0302 	orr.w	r3, r3, #2
   26f86:	4608      	mov	r0, r1
   26f88:	604b      	str	r3, [r1, #4]
   26f8a:	f000 b82a 	b.w	26fe2 <rpc_transport_data_msg_send>

00026f8e <rpc_message_alloc>:
   26f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26f90:	2300      	movs	r3, #0
   26f92:	4607      	mov	r7, r0
   26f94:	4616      	mov	r6, r2
   26f96:	460d      	mov	r5, r1
   26f98:	6013      	str	r3, [r2, #0]
   26f9a:	b131      	cbz	r1, 26faa <rpc_message_alloc+0x1c>
   26f9c:	4608      	mov	r0, r1
   26f9e:	f000 f81a 	bl	26fd6 <rpc_transport_data_alloc>
   26fa2:	4604      	mov	r4, r0
   26fa4:	b910      	cbnz	r0, 26fac <rpc_message_alloc+0x1e>
   26fa6:	200c      	movs	r0, #12
   26fa8:	e008      	b.n	26fbc <rpc_message_alloc+0x2e>
   26faa:	460c      	mov	r4, r1
   26fac:	f000 f80f 	bl	26fce <rpc_transport_data_msg_alloc>
   26fb0:	b128      	cbz	r0, 26fbe <rpc_message_alloc+0x30>
   26fb2:	60c5      	str	r5, [r0, #12]
   26fb4:	6084      	str	r4, [r0, #8]
   26fb6:	8007      	strh	r7, [r0, #0]
   26fb8:	6030      	str	r0, [r6, #0]
   26fba:	2000      	movs	r0, #0
   26fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26fbe:	2c00      	cmp	r4, #0
   26fc0:	d0f1      	beq.n	26fa6 <rpc_message_alloc+0x18>
   26fc2:	4620      	mov	r0, r4
   26fc4:	f000 f809 	bl	26fda <rpc_transport_local_data_free>
   26fc8:	e7ed      	b.n	26fa6 <rpc_message_alloc+0x18>

00026fca <rpc_message_data_free>:
   26fca:	f000 b808 	b.w	26fde <rpc_transport_peer_data_free>

00026fce <rpc_transport_data_msg_alloc>:
   26fce:	f7f3 be29 	b.w	1ac24 <rpc_transport_ipc_data_msg_alloc>

00026fd2 <rpc_transport_msg_free>:
   26fd2:	f7f3 be73 	b.w	1acbc <rpc_transport_ipc_msg_free>

00026fd6 <rpc_transport_data_alloc>:
   26fd6:	f7f3 be57 	b.w	1ac88 <rpc_transport_ipc_data_alloc>

00026fda <rpc_transport_local_data_free>:
   26fda:	f000 b846 	b.w	2706a <rpc_transport_ipc_local_data_free>

00026fde <rpc_transport_peer_data_free>:
   26fde:	f7f3 be93 	b.w	1ad08 <rpc_transport_ipc_peer_data_free>

00026fe2 <rpc_transport_data_msg_send>:
   26fe2:	f7f3 bde3 	b.w	1abac <rpc_transport_ipc_data_msg_send>

00026fe6 <trace_write>:
   26fe6:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   26fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26fec:	f8ad 3000 	strh.w	r3, [sp]
   26ff0:	7803      	ldrb	r3, [r0, #0]
   26ff2:	4604      	mov	r4, r0
   26ff4:	f88d 3004 	strb.w	r3, [sp, #4]
   26ff8:	6843      	ldr	r3, [r0, #4]
   26ffa:	6882      	ldr	r2, [r0, #8]
   26ffc:	2105      	movs	r1, #5
   26ffe:	4293      	cmp	r3, r2
   27000:	bf96      	itet	ls
   27002:	6906      	ldrls	r6, [r0, #16]
   27004:	1a9e      	subhi	r6, r3, r2
   27006:	1ab6      	subls	r6, r6, r2
   27008:	4293      	cmp	r3, r2
   2700a:	bf2c      	ite	cs
   2700c:	2500      	movcs	r5, #0
   2700e:	68c5      	ldrcc	r5, [r0, #12]
   27010:	b2b6      	uxth	r6, r6
   27012:	bf38      	it	cc
   27014:	1b5b      	subcc	r3, r3, r5
   27016:	4668      	mov	r0, sp
   27018:	bf38      	it	cc
   2701a:	b29d      	uxthcc	r5, r3
   2701c:	f8ad 6002 	strh.w	r6, [sp, #2]
   27020:	f7ff fe04 	bl	26c2c <nrf_modem_os_trace_put>
   27024:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   27028:	68a0      	ldr	r0, [r4, #8]
   2702a:	b289      	uxth	r1, r1
   2702c:	f7ff fdfe 	bl	26c2c <nrf_modem_os_trace_put>
   27030:	68a3      	ldr	r3, [r4, #8]
   27032:	441e      	add	r6, r3
   27034:	6923      	ldr	r3, [r4, #16]
   27036:	60a6      	str	r6, [r4, #8]
   27038:	429e      	cmp	r6, r3
   2703a:	bf04      	itt	eq
   2703c:	68e3      	ldreq	r3, [r4, #12]
   2703e:	60a3      	streq	r3, [r4, #8]
   27040:	b18d      	cbz	r5, 27066 <trace_write+0x80>
   27042:	2105      	movs	r1, #5
   27044:	4668      	mov	r0, sp
   27046:	f8ad 5002 	strh.w	r5, [sp, #2]
   2704a:	f7ff fdef 	bl	26c2c <nrf_modem_os_trace_put>
   2704e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   27052:	68e0      	ldr	r0, [r4, #12]
   27054:	b289      	uxth	r1, r1
   27056:	f7ff fde9 	bl	26c2c <nrf_modem_os_trace_put>
   2705a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   2705e:	68e2      	ldr	r2, [r4, #12]
   27060:	fa12 f383 	uxtah	r3, r2, r3
   27064:	60a3      	str	r3, [r4, #8]
   27066:	b002      	add	sp, #8
   27068:	bd70      	pop	{r4, r5, r6, pc}

0002706a <rpc_transport_ipc_local_data_free>:
   2706a:	b508      	push	{r3, lr}
   2706c:	f7f2 fb52 	bl	19714 <nrf_modem_os_shm_tx_free>
   27070:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   27074:	f7ff bd65 	b.w	26b42 <nrf_modem_os_application_irq_set>

00027078 <at_client_evt_handler>:
   27078:	460a      	mov	r2, r1
   2707a:	b118      	cbz	r0, 27084 <at_client_evt_handler+0xc>
   2707c:	f850 1b08 	ldr.w	r1, [r0], #8
   27080:	0c09      	lsrs	r1, r1, #16
   27082:	4710      	bx	r2
   27084:	4770      	bx	lr

00027086 <rpc_at_client_request_alloc>:
   27086:	2300      	movs	r3, #0
   27088:	b513      	push	{r0, r1, r4, lr}
   2708a:	4604      	mov	r4, r0
   2708c:	aa01      	add	r2, sp, #4
   2708e:	2003      	movs	r0, #3
   27090:	9301      	str	r3, [sp, #4]
   27092:	f7ff ff7c 	bl	26f8e <rpc_message_alloc>
   27096:	b918      	cbnz	r0, 270a0 <rpc_at_client_request_alloc+0x1a>
   27098:	9b01      	ldr	r3, [sp, #4]
   2709a:	b10b      	cbz	r3, 270a0 <rpc_at_client_request_alloc+0x1a>
   2709c:	3308      	adds	r3, #8
   2709e:	6023      	str	r3, [r4, #0]
   270a0:	b002      	add	sp, #8
   270a2:	bd10      	pop	{r4, pc}

000270a4 <rpc_at_client_request_send>:
   270a4:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   270a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   270ac:	4601      	mov	r1, r0
   270ae:	2003      	movs	r0, #3
   270b0:	f841 3d08 	str.w	r3, [r1, #-8]!
   270b4:	f7ff bf61 	b.w	26f7a <rpc_message_send>

000270b8 <rpc_at_client_data_free>:
   270b8:	f7ff bf87 	b.w	26fca <rpc_message_data_free>

000270bc <ip_client_event_handler>:
   270bc:	f850 1b08 	ldr.w	r1, [r0], #8
   270c0:	0c09      	lsrs	r1, r1, #16
   270c2:	f7f4 b861 	b.w	1b188 <rpc_ip_event_handler>

000270c6 <rpc_ip_client_request_alloc>:
   270c6:	2300      	movs	r3, #0
   270c8:	b513      	push	{r0, r1, r4, lr}
   270ca:	4604      	mov	r4, r0
   270cc:	aa01      	add	r2, sp, #4
   270ce:	2004      	movs	r0, #4
   270d0:	9301      	str	r3, [sp, #4]
   270d2:	f7ff ff5c 	bl	26f8e <rpc_message_alloc>
   270d6:	b918      	cbnz	r0, 270e0 <rpc_ip_client_request_alloc+0x1a>
   270d8:	9b01      	ldr	r3, [sp, #4]
   270da:	b10b      	cbz	r3, 270e0 <rpc_ip_client_request_alloc+0x1a>
   270dc:	3308      	adds	r3, #8
   270de:	6023      	str	r3, [r4, #0]
   270e0:	b002      	add	sp, #8
   270e2:	bd10      	pop	{r4, pc}

000270e4 <rpc_ip_client_request_send>:
   270e4:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   270e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   270ec:	4601      	mov	r1, r0
   270ee:	2004      	movs	r0, #4
   270f0:	f841 3d08 	str.w	r3, [r1, #-8]!
   270f4:	f7ff bf41 	b.w	26f7a <rpc_message_send>

000270f8 <rpc_ip_client_data_free>:
   270f8:	f7ff bf67 	b.w	26fca <rpc_message_data_free>

000270fc <dfu_client_event_handler>:
   270fc:	460b      	mov	r3, r1
   270fe:	f850 1b08 	ldr.w	r1, [r0], #8
   27102:	0c09      	lsrs	r1, r1, #16
   27104:	4718      	bx	r3

00027106 <rpc_dfu_client_data_free>:
   27106:	f7ff bf60 	b.w	26fca <rpc_message_data_free>

0002710a <rpc_gnss_client_data_free>:
   2710a:	f7ff bf5e 	b.w	26fca <rpc_message_data_free>

0002710e <packet_handler_alloc_and_init>:
   2710e:	b538      	push	{r3, r4, r5, lr}
   27110:	4604      	mov	r4, r0
   27112:	4608      	mov	r0, r1
   27114:	4611      	mov	r1, r2
   27116:	4622      	mov	r2, r4
   27118:	f7f4 fdee 	bl	1bcf8 <packet_handler_create>
   2711c:	61e0      	str	r0, [r4, #28]
   2711e:	b158      	cbz	r0, 27138 <packet_handler_alloc_and_init+0x2a>
   27120:	6803      	ldr	r3, [r0, #0]
   27122:	681b      	ldr	r3, [r3, #0]
   27124:	4798      	blx	r3
   27126:	4605      	mov	r5, r0
   27128:	b120      	cbz	r0, 27134 <packet_handler_alloc_and_init+0x26>
   2712a:	69e0      	ldr	r0, [r4, #28]
   2712c:	f000 fa88 	bl	27640 <packet_handler_delete>
   27130:	2300      	movs	r3, #0
   27132:	61e3      	str	r3, [r4, #28]
   27134:	4628      	mov	r0, r5
   27136:	bd38      	pop	{r3, r4, r5, pc}
   27138:	250c      	movs	r5, #12
   2713a:	e7fb      	b.n	27134 <packet_handler_alloc_and_init+0x26>

0002713c <socket_free>:
   2713c:	b510      	push	{r4, lr}
   2713e:	4604      	mov	r4, r0
   27140:	69c0      	ldr	r0, [r0, #28]
   27142:	b108      	cbz	r0, 27148 <socket_free+0xc>
   27144:	f000 fa7c 	bl	27640 <packet_handler_delete>
   27148:	4620      	mov	r0, r4
   2714a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2714e:	222c      	movs	r2, #44	; 0x2c
   27150:	2100      	movs	r1, #0
   27152:	f7fd bb20 	b.w	24796 <memset>

00027156 <ip_interface_request_create>:
   27156:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27158:	4614      	mov	r4, r2
   2715a:	2200      	movs	r2, #0
   2715c:	4606      	mov	r6, r0
   2715e:	460d      	mov	r5, r1
   27160:	a801      	add	r0, sp, #4
   27162:	4619      	mov	r1, r3
   27164:	9201      	str	r2, [sp, #4]
   27166:	f7ff ffae 	bl	270c6 <rpc_ip_client_request_alloc>
   2716a:	4603      	mov	r3, r0
   2716c:	9801      	ldr	r0, [sp, #4]
   2716e:	b943      	cbnz	r3, 27182 <ip_interface_request_create+0x2c>
   27170:	2208      	movs	r2, #8
   27172:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   27176:	60c4      	str	r4, [r0, #12]
   27178:	6105      	str	r5, [r0, #16]
   2717a:	7202      	strb	r2, [r0, #8]
   2717c:	7243      	strb	r3, [r0, #9]
   2717e:	7283      	strb	r3, [r0, #10]
   27180:	72c3      	strb	r3, [r0, #11]
   27182:	b002      	add	sp, #8
   27184:	bd70      	pop	{r4, r5, r6, pc}

00027186 <ip_interface_wait>:
   27186:	b538      	push	{r3, r4, r5, lr}
   27188:	4605      	mov	r5, r0
   2718a:	f7f3 ff6f 	bl	1b06c <interface_socket_wait>
   2718e:	4604      	mov	r4, r0
   27190:	b938      	cbnz	r0, 271a2 <ip_interface_wait+0x1c>
   27192:	4628      	mov	r0, r5
   27194:	f7f3 ffa8 	bl	1b0e8 <interface_socket_from_handle_get>
   27198:	b118      	cbz	r0, 271a2 <ip_interface_wait+0x1c>
   2719a:	6844      	ldr	r4, [r0, #4]
   2719c:	b10c      	cbz	r4, 271a2 <ip_interface_wait+0x1c>
   2719e:	2300      	movs	r3, #0
   271a0:	6043      	str	r3, [r0, #4]
   271a2:	4620      	mov	r0, r4
   271a4:	bd38      	pop	{r3, r4, r5, pc}

000271a6 <secure_client_socket>:
   271a6:	f04f 33ff 	mov.w	r3, #4294967295
   271aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   271ac:	9301      	str	r3, [sp, #4]
   271ae:	680b      	ldr	r3, [r1, #0]
   271b0:	4606      	mov	r6, r0
   271b2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   271b6:	600b      	str	r3, [r1, #0]
   271b8:	680b      	ldr	r3, [r1, #0]
   271ba:	460c      	mov	r4, r1
   271bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   271c0:	600b      	str	r3, [r1, #0]
   271c2:	680f      	ldr	r7, [r1, #0]
   271c4:	463a      	mov	r2, r7
   271c6:	f7f4 fa39 	bl	1b63c <secure_socket_attach_initiate>
   271ca:	4605      	mov	r5, r0
   271cc:	b950      	cbnz	r0, 271e4 <secure_client_socket+0x3e>
   271ce:	220c      	movs	r2, #12
   271d0:	4630      	mov	r0, r6
   271d2:	4611      	mov	r1, r2
   271d4:	ab01      	add	r3, sp, #4
   271d6:	f7ff ffd6 	bl	27186 <ip_interface_wait>
   271da:	4605      	mov	r5, r0
   271dc:	b128      	cbz	r0, 271ea <secure_client_socket+0x44>
   271de:	2873      	cmp	r0, #115	; 0x73
   271e0:	d000      	beq.n	271e4 <secure_client_socket+0x3e>
   271e2:	6027      	str	r7, [r4, #0]
   271e4:	4628      	mov	r0, r5
   271e6:	b003      	add	sp, #12
   271e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   271ea:	4630      	mov	r0, r6
   271ec:	f7f4 fa14 	bl	1b618 <hostname_free>
   271f0:	6823      	ldr	r3, [r4, #0]
   271f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   271f6:	6023      	str	r3, [r4, #0]
   271f8:	6823      	ldr	r3, [r4, #0]
   271fa:	0c1b      	lsrs	r3, r3, #16
   271fc:	041b      	lsls	r3, r3, #16
   271fe:	f043 030c 	orr.w	r3, r3, #12
   27202:	6023      	str	r3, [r4, #0]
   27204:	6823      	ldr	r3, [r4, #0]
   27206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   2720a:	6023      	str	r3, [r4, #0]
   2720c:	6823      	ldr	r3, [r4, #0]
   2720e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   27212:	6023      	str	r3, [r4, #0]
   27214:	e7e6      	b.n	271e4 <secure_client_socket+0x3e>

00027216 <packet_free_cb>:
   27216:	6800      	ldr	r0, [r0, #0]
   27218:	f7ff bf4e 	b.w	270b8 <rpc_at_client_data_free>

0002721c <at_interface_wait>:
   2721c:	b538      	push	{r3, r4, r5, lr}
   2721e:	4605      	mov	r5, r0
   27220:	f7f3 ff24 	bl	1b06c <interface_socket_wait>
   27224:	4604      	mov	r4, r0
   27226:	b938      	cbnz	r0, 27238 <at_interface_wait+0x1c>
   27228:	4628      	mov	r0, r5
   2722a:	f7f3 ff5d 	bl	1b0e8 <interface_socket_from_handle_get>
   2722e:	b118      	cbz	r0, 27238 <at_interface_wait+0x1c>
   27230:	6844      	ldr	r4, [r0, #4]
   27232:	b10c      	cbz	r4, 27238 <at_interface_wait+0x1c>
   27234:	2300      	movs	r3, #0
   27236:	6043      	str	r3, [r0, #4]
   27238:	4620      	mov	r0, r4
   2723a:	bd38      	pop	{r3, r4, r5, pc}

0002723c <send_message>:
   2723c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   27240:	4606      	mov	r6, r0
   27242:	4668      	mov	r0, sp
   27244:	460f      	mov	r7, r1
   27246:	4692      	mov	sl, r2
   27248:	4699      	mov	r9, r3
   2724a:	f7ff ff1c 	bl	27086 <rpc_at_client_request_alloc>
   2724e:	4605      	mov	r5, r0
   27250:	4630      	mov	r0, r6
   27252:	f7f3 ff49 	bl	1b0e8 <interface_socket_from_handle_get>
   27256:	4680      	mov	r8, r0
   27258:	bb05      	cbnz	r5, 2729c <send_message+0x60>
   2725a:	2304      	movs	r3, #4
   2725c:	9c00      	ldr	r4, [sp, #0]
   2725e:	7223      	strb	r3, [r4, #8]
   27260:	7265      	strb	r5, [r4, #9]
   27262:	72a5      	strb	r5, [r4, #10]
   27264:	72e5      	strb	r5, [r4, #11]
   27266:	60e6      	str	r6, [r4, #12]
   27268:	b127      	cbz	r7, 27274 <send_message+0x38>
   2726a:	463a      	mov	r2, r7
   2726c:	4651      	mov	r1, sl
   2726e:	6820      	ldr	r0, [r4, #0]
   27270:	f7fd fa3c 	bl	246ec <memcpy>
   27274:	4649      	mov	r1, r9
   27276:	9800      	ldr	r0, [sp, #0]
   27278:	f7ff ff14 	bl	270a4 <rpc_at_client_request_send>
   2727c:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   27280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   27282:	2b00      	cmp	r3, #0
   27284:	bf08      	it	eq
   27286:	f04f 33ff 	moveq.w	r3, #4294967295
   2728a:	4611      	mov	r1, r2
   2728c:	9301      	str	r3, [sp, #4]
   2728e:	4630      	mov	r0, r6
   27290:	ab01      	add	r3, sp, #4
   27292:	f7ff ffc3 	bl	2721c <at_interface_wait>
   27296:	b002      	add	sp, #8
   27298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2729c:	200c      	movs	r0, #12
   2729e:	e7fa      	b.n	27296 <send_message+0x5a>

000272a0 <rpc_at_event_handler>:
   272a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   272a2:	4606      	mov	r6, r0
   272a4:	68c0      	ldr	r0, [r0, #12]
   272a6:	460d      	mov	r5, r1
   272a8:	f7f3 ff1e 	bl	1b0e8 <interface_socket_from_handle_get>
   272ac:	4604      	mov	r4, r0
   272ae:	2800      	cmp	r0, #0
   272b0:	d03a      	beq.n	27328 <rpc_at_event_handler+0x88>
   272b2:	6803      	ldr	r3, [r0, #0]
   272b4:	b29b      	uxth	r3, r3
   272b6:	2b01      	cmp	r3, #1
   272b8:	d104      	bne.n	272c4 <rpc_at_event_handler+0x24>
   272ba:	2d02      	cmp	r5, #2
   272bc:	d11c      	bne.n	272f8 <rpc_at_event_handler+0x58>
   272be:	6005      	str	r5, [r0, #0]
   272c0:	2000      	movs	r0, #0
   272c2:	e02b      	b.n	2731c <rpc_at_event_handler+0x7c>
   272c4:	6803      	ldr	r3, [r0, #0]
   272c6:	b29b      	uxth	r3, r3
   272c8:	2b0d      	cmp	r3, #13
   272ca:	d104      	bne.n	272d6 <rpc_at_event_handler+0x36>
   272cc:	2d02      	cmp	r5, #2
   272ce:	d113      	bne.n	272f8 <rpc_at_event_handler+0x58>
   272d0:	230e      	movs	r3, #14
   272d2:	6023      	str	r3, [r4, #0]
   272d4:	e7f4      	b.n	272c0 <rpc_at_event_handler+0x20>
   272d6:	6803      	ldr	r3, [r0, #0]
   272d8:	b29b      	uxth	r3, r3
   272da:	2b02      	cmp	r3, #2
   272dc:	d10c      	bne.n	272f8 <rpc_at_event_handler+0x58>
   272de:	6803      	ldr	r3, [r0, #0]
   272e0:	029b      	lsls	r3, r3, #10
   272e2:	d509      	bpl.n	272f8 <rpc_at_event_handler+0x58>
   272e4:	2d02      	cmp	r5, #2
   272e6:	d107      	bne.n	272f8 <rpc_at_event_handler+0x58>
   272e8:	6803      	ldr	r3, [r0, #0]
   272ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   272ee:	6003      	str	r3, [r0, #0]
   272f0:	6803      	ldr	r3, [r0, #0]
   272f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   272f6:	e7ec      	b.n	272d2 <rpc_at_event_handler+0x32>
   272f8:	3d03      	subs	r5, #3
   272fa:	2d01      	cmp	r5, #1
   272fc:	d8e0      	bhi.n	272c0 <rpc_at_event_handler+0x20>
   272fe:	2500      	movs	r5, #0
   27300:	6833      	ldr	r3, [r6, #0]
   27302:	69e0      	ldr	r0, [r4, #28]
   27304:	9300      	str	r3, [sp, #0]
   27306:	6873      	ldr	r3, [r6, #4]
   27308:	4669      	mov	r1, sp
   2730a:	9301      	str	r3, [sp, #4]
   2730c:	6803      	ldr	r3, [r0, #0]
   2730e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   27312:	685b      	ldr	r3, [r3, #4]
   27314:	4798      	blx	r3
   27316:	3001      	adds	r0, #1
   27318:	d102      	bne.n	27320 <rpc_at_event_handler+0x80>
   2731a:	2002      	movs	r0, #2
   2731c:	b004      	add	sp, #16
   2731e:	bd70      	pop	{r4, r5, r6, pc}
   27320:	6823      	ldr	r3, [r4, #0]
   27322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   27326:	e7d4      	b.n	272d2 <rpc_at_event_handler+0x32>
   27328:	6830      	ldr	r0, [r6, #0]
   2732a:	2800      	cmp	r0, #0
   2732c:	d0c8      	beq.n	272c0 <rpc_at_event_handler+0x20>
   2732e:	f7ff fec3 	bl	270b8 <rpc_at_client_data_free>
   27332:	e7c5      	b.n	272c0 <rpc_at_event_handler+0x20>

00027334 <null_handler_init>:
   27334:	2000      	movs	r0, #0
   27336:	4770      	bx	lr

00027338 <null_handler_put>:
   27338:	b510      	push	{r4, lr}
   2733a:	460c      	mov	r4, r1
   2733c:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   27340:	4620      	mov	r0, r4
   27342:	4798      	blx	r3
   27344:	6860      	ldr	r0, [r4, #4]
   27346:	bd10      	pop	{r4, pc}

00027348 <null_handler_get>:
   27348:	f04f 30ff 	mov.w	r0, #4294967295
   2734c:	4770      	bx	lr

0002734e <null_handler_available>:
   2734e:	f04f 30ff 	mov.w	r0, #4294967295
   27352:	4770      	bx	lr

00027354 <null_handler_flush>:
   27354:	2000      	movs	r0, #0
   27356:	4770      	bx	lr

00027358 <null_handler_free>:
   27358:	4770      	bx	lr

0002735a <stream_handler_free_packet>:
   2735a:	b530      	push	{r4, r5, lr}
   2735c:	4605      	mov	r5, r0
   2735e:	b085      	sub	sp, #20
   27360:	68c0      	ldr	r0, [r0, #12]
   27362:	f000 f9d0 	bl	27706 <linked_list_pop>
   27366:	4604      	mov	r4, r0
   27368:	b170      	cbz	r0, 27388 <stream_handler_free_packet+0x2e>
   2736a:	6843      	ldr	r3, [r0, #4]
   2736c:	9300      	str	r3, [sp, #0]
   2736e:	6883      	ldr	r3, [r0, #8]
   27370:	9301      	str	r3, [sp, #4]
   27372:	6903      	ldr	r3, [r0, #16]
   27374:	9302      	str	r3, [sp, #8]
   27376:	68c3      	ldr	r3, [r0, #12]
   27378:	4668      	mov	r0, sp
   2737a:	9303      	str	r3, [sp, #12]
   2737c:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   27380:	4798      	blx	r3
   27382:	4620      	mov	r0, r4
   27384:	f7f2 f9a2 	bl	196cc <nrf_modem_os_free>
   27388:	b005      	add	sp, #20
   2738a:	bd30      	pop	{r4, r5, pc}

0002738c <stream_handler_init>:
   2738c:	b510      	push	{r4, lr}
   2738e:	4604      	mov	r4, r0
   27390:	200c      	movs	r0, #12
   27392:	f7f2 f985 	bl	196a0 <nrf_modem_os_alloc>
   27396:	60e0      	str	r0, [r4, #12]
   27398:	b128      	cbz	r0, 273a6 <stream_handler_init+0x1a>
   2739a:	2300      	movs	r3, #0
   2739c:	6123      	str	r3, [r4, #16]
   2739e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   273a2:	f000 b994 	b.w	276ce <linked_list_init>
   273a6:	200c      	movs	r0, #12
   273a8:	bd10      	pop	{r4, pc}

000273aa <stream_handler_put>:
   273aa:	b570      	push	{r4, r5, r6, lr}
   273ac:	4606      	mov	r6, r0
   273ae:	2014      	movs	r0, #20
   273b0:	460d      	mov	r5, r1
   273b2:	f7f2 f975 	bl	196a0 <nrf_modem_os_alloc>
   273b6:	4604      	mov	r4, r0
   273b8:	b178      	cbz	r0, 273da <stream_handler_put+0x30>
   273ba:	682b      	ldr	r3, [r5, #0]
   273bc:	4601      	mov	r1, r0
   273be:	6043      	str	r3, [r0, #4]
   273c0:	686b      	ldr	r3, [r5, #4]
   273c2:	6083      	str	r3, [r0, #8]
   273c4:	68eb      	ldr	r3, [r5, #12]
   273c6:	60c3      	str	r3, [r0, #12]
   273c8:	68ab      	ldr	r3, [r5, #8]
   273ca:	6103      	str	r3, [r0, #16]
   273cc:	68f0      	ldr	r0, [r6, #12]
   273ce:	f000 f987 	bl	276e0 <linked_list_push>
   273d2:	b128      	cbz	r0, 273e0 <stream_handler_put+0x36>
   273d4:	4620      	mov	r0, r4
   273d6:	f7f2 f979 	bl	196cc <nrf_modem_os_free>
   273da:	f04f 30ff 	mov.w	r0, #4294967295
   273de:	e000      	b.n	273e2 <stream_handler_put+0x38>
   273e0:	6868      	ldr	r0, [r5, #4]
   273e2:	bd70      	pop	{r4, r5, r6, pc}

000273e4 <stream_handler_get>:
   273e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   273e8:	4606      	mov	r6, r0
   273ea:	b085      	sub	sp, #20
   273ec:	68c0      	ldr	r0, [r0, #12]
   273ee:	468a      	mov	sl, r1
   273f0:	4617      	mov	r7, r2
   273f2:	f000 f992 	bl	2771a <linked_list_peek>
   273f6:	4604      	mov	r4, r0
   273f8:	2800      	cmp	r0, #0
   273fa:	d055      	beq.n	274a8 <stream_handler_get+0xc4>
   273fc:	f8da 0008 	ldr.w	r0, [sl, #8]
   27400:	2800      	cmp	r0, #0
   27402:	d049      	beq.n	27498 <stream_handler_get+0xb4>
   27404:	6921      	ldr	r1, [r4, #16]
   27406:	2900      	cmp	r1, #0
   27408:	d046      	beq.n	27498 <stream_handler_get+0xb4>
   2740a:	68e2      	ldr	r2, [r4, #12]
   2740c:	2a00      	cmp	r2, #0
   2740e:	d043      	beq.n	27498 <stream_handler_get+0xb4>
   27410:	f8da 500c 	ldr.w	r5, [sl, #12]
   27414:	42aa      	cmp	r2, r5
   27416:	bf28      	it	cs
   27418:	462a      	movcs	r2, r5
   2741a:	f8ca 200c 	str.w	r2, [sl, #12]
   2741e:	f7fd f965 	bl	246ec <memcpy>
   27422:	2500      	movs	r5, #0
   27424:	f8da 3004 	ldr.w	r3, [sl, #4]
   27428:	6931      	ldr	r1, [r6, #16]
   2742a:	9301      	str	r3, [sp, #4]
   2742c:	f8da 3000 	ldr.w	r3, [sl]
   27430:	9302      	str	r3, [sp, #8]
   27432:	f007 0320 	and.w	r3, r7, #32
   27436:	9303      	str	r3, [sp, #12]
   27438:	f007 0708 	and.w	r7, r7, #8
   2743c:	9b01      	ldr	r3, [sp, #4]
   2743e:	42ab      	cmp	r3, r5
   27440:	d924      	bls.n	2748c <stream_handler_get+0xa8>
   27442:	68a2      	ldr	r2, [r4, #8]
   27444:	9b01      	ldr	r3, [sp, #4]
   27446:	eba2 0801 	sub.w	r8, r2, r1
   2744a:	eba3 0b05 	sub.w	fp, r3, r5
   2744e:	f8da 2000 	ldr.w	r2, [sl]
   27452:	45d8      	cmp	r8, fp
   27454:	46c1      	mov	r9, r8
   27456:	bf28      	it	cs
   27458:	46d9      	movcs	r9, fp
   2745a:	b142      	cbz	r2, 2746e <stream_handler_get+0x8a>
   2745c:	9b03      	ldr	r3, [sp, #12]
   2745e:	b933      	cbnz	r3, 2746e <stream_handler_get+0x8a>
   27460:	6860      	ldr	r0, [r4, #4]
   27462:	9b02      	ldr	r3, [sp, #8]
   27464:	4401      	add	r1, r0
   27466:	464a      	mov	r2, r9
   27468:	1958      	adds	r0, r3, r5
   2746a:	f7fd f93f 	bl	246ec <memcpy>
   2746e:	4620      	mov	r0, r4
   27470:	f000 f95a 	bl	27728 <linked_list_get_next>
   27474:	4604      	mov	r4, r0
   27476:	b92f      	cbnz	r7, 27484 <stream_handler_get+0xa0>
   27478:	45d8      	cmp	r8, fp
   2747a:	d811      	bhi.n	274a0 <stream_handler_get+0xbc>
   2747c:	4630      	mov	r0, r6
   2747e:	f7ff ff6c 	bl	2735a <stream_handler_free_packet>
   27482:	6137      	str	r7, [r6, #16]
   27484:	2100      	movs	r1, #0
   27486:	444d      	add	r5, r9
   27488:	2c00      	cmp	r4, #0
   2748a:	d1d7      	bne.n	2743c <stream_handler_get+0x58>
   2748c:	4628      	mov	r0, r5
   2748e:	f8ca 5004 	str.w	r5, [sl, #4]
   27492:	b005      	add	sp, #20
   27494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27498:	2200      	movs	r2, #0
   2749a:	f8ca 200c 	str.w	r2, [sl, #12]
   2749e:	e7c0      	b.n	27422 <stream_handler_get+0x3e>
   274a0:	6932      	ldr	r2, [r6, #16]
   274a2:	444a      	add	r2, r9
   274a4:	6132      	str	r2, [r6, #16]
   274a6:	e7ed      	b.n	27484 <stream_handler_get+0xa0>
   274a8:	f04f 30ff 	mov.w	r0, #4294967295
   274ac:	e7f1      	b.n	27492 <stream_handler_get+0xae>

000274ae <stream_handler_available>:
   274ae:	b510      	push	{r4, lr}
   274b0:	4604      	mov	r4, r0
   274b2:	68c0      	ldr	r0, [r0, #12]
   274b4:	f000 f931 	bl	2771a <linked_list_peek>
   274b8:	b150      	cbz	r0, 274d0 <stream_handler_available+0x22>
   274ba:	6924      	ldr	r4, [r4, #16]
   274bc:	4264      	negs	r4, r4
   274be:	6883      	ldr	r3, [r0, #8]
   274c0:	441c      	add	r4, r3
   274c2:	f000 f931 	bl	27728 <linked_list_get_next>
   274c6:	2800      	cmp	r0, #0
   274c8:	d1f9      	bne.n	274be <stream_handler_available+0x10>
   274ca:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   274ce:	bd10      	pop	{r4, pc}
   274d0:	f04f 30ff 	mov.w	r0, #4294967295
   274d4:	e7fb      	b.n	274ce <stream_handler_available+0x20>

000274d6 <stream_handler_flush>:
   274d6:	68c3      	ldr	r3, [r0, #12]
   274d8:	b510      	push	{r4, lr}
   274da:	4604      	mov	r4, r0
   274dc:	b923      	cbnz	r3, 274e8 <stream_handler_flush+0x12>
   274de:	2016      	movs	r0, #22
   274e0:	e007      	b.n	274f2 <stream_handler_flush+0x1c>
   274e2:	4620      	mov	r0, r4
   274e4:	f7ff ff39 	bl	2735a <stream_handler_free_packet>
   274e8:	68e0      	ldr	r0, [r4, #12]
   274ea:	f000 f91b 	bl	27724 <linked_list_size_get>
   274ee:	2800      	cmp	r0, #0
   274f0:	d1f7      	bne.n	274e2 <stream_handler_flush+0xc>
   274f2:	bd10      	pop	{r4, pc}

000274f4 <stream_handler_free>:
   274f4:	68c3      	ldr	r3, [r0, #12]
   274f6:	b510      	push	{r4, lr}
   274f8:	4604      	mov	r4, r0
   274fa:	b133      	cbz	r3, 2750a <stream_handler_free+0x16>
   274fc:	f7ff ffeb 	bl	274d6 <stream_handler_flush>
   27500:	68e0      	ldr	r0, [r4, #12]
   27502:	f7f2 f8e3 	bl	196cc <nrf_modem_os_free>
   27506:	2300      	movs	r3, #0
   27508:	60e3      	str	r3, [r4, #12]
   2750a:	bd10      	pop	{r4, pc}

0002750c <datagram_handler_free_packet>:
   2750c:	b530      	push	{r4, r5, lr}
   2750e:	4605      	mov	r5, r0
   27510:	b085      	sub	sp, #20
   27512:	68c0      	ldr	r0, [r0, #12]
   27514:	f000 f8f7 	bl	27706 <linked_list_pop>
   27518:	4604      	mov	r4, r0
   2751a:	b170      	cbz	r0, 2753a <datagram_handler_free_packet+0x2e>
   2751c:	6843      	ldr	r3, [r0, #4]
   2751e:	9300      	str	r3, [sp, #0]
   27520:	6883      	ldr	r3, [r0, #8]
   27522:	9301      	str	r3, [sp, #4]
   27524:	6903      	ldr	r3, [r0, #16]
   27526:	9302      	str	r3, [sp, #8]
   27528:	68c3      	ldr	r3, [r0, #12]
   2752a:	4668      	mov	r0, sp
   2752c:	9303      	str	r3, [sp, #12]
   2752e:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   27532:	4798      	blx	r3
   27534:	4620      	mov	r0, r4
   27536:	f7f2 f8c9 	bl	196cc <nrf_modem_os_free>
   2753a:	b005      	add	sp, #20
   2753c:	bd30      	pop	{r4, r5, pc}

0002753e <datagram_handler_init>:
   2753e:	b510      	push	{r4, lr}
   27540:	4604      	mov	r4, r0
   27542:	200c      	movs	r0, #12
   27544:	f7f2 f8ac 	bl	196a0 <nrf_modem_os_alloc>
   27548:	60e0      	str	r0, [r4, #12]
   2754a:	b118      	cbz	r0, 27554 <datagram_handler_init+0x16>
   2754c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27550:	f000 b8bd 	b.w	276ce <linked_list_init>
   27554:	200c      	movs	r0, #12
   27556:	bd10      	pop	{r4, pc}

00027558 <datagram_handler_put>:
   27558:	b570      	push	{r4, r5, r6, lr}
   2755a:	4606      	mov	r6, r0
   2755c:	2014      	movs	r0, #20
   2755e:	460d      	mov	r5, r1
   27560:	f7f2 f89e 	bl	196a0 <nrf_modem_os_alloc>
   27564:	4604      	mov	r4, r0
   27566:	b178      	cbz	r0, 27588 <datagram_handler_put+0x30>
   27568:	682b      	ldr	r3, [r5, #0]
   2756a:	4601      	mov	r1, r0
   2756c:	6043      	str	r3, [r0, #4]
   2756e:	686b      	ldr	r3, [r5, #4]
   27570:	6083      	str	r3, [r0, #8]
   27572:	68eb      	ldr	r3, [r5, #12]
   27574:	60c3      	str	r3, [r0, #12]
   27576:	68ab      	ldr	r3, [r5, #8]
   27578:	6103      	str	r3, [r0, #16]
   2757a:	68f0      	ldr	r0, [r6, #12]
   2757c:	f000 f8b0 	bl	276e0 <linked_list_push>
   27580:	b128      	cbz	r0, 2758e <datagram_handler_put+0x36>
   27582:	4620      	mov	r0, r4
   27584:	f7f2 f8a2 	bl	196cc <nrf_modem_os_free>
   27588:	f04f 30ff 	mov.w	r0, #4294967295
   2758c:	e000      	b.n	27590 <datagram_handler_put+0x38>
   2758e:	6868      	ldr	r0, [r5, #4]
   27590:	bd70      	pop	{r4, r5, r6, pc}

00027592 <datagram_handler_get>:
   27592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27594:	4607      	mov	r7, r0
   27596:	68c0      	ldr	r0, [r0, #12]
   27598:	460c      	mov	r4, r1
   2759a:	4616      	mov	r6, r2
   2759c:	f000 f8bd 	bl	2771a <linked_list_peek>
   275a0:	4605      	mov	r5, r0
   275a2:	b328      	cbz	r0, 275f0 <datagram_handler_get+0x5e>
   275a4:	6882      	ldr	r2, [r0, #8]
   275a6:	6863      	ldr	r3, [r4, #4]
   275a8:	6820      	ldr	r0, [r4, #0]
   275aa:	429a      	cmp	r2, r3
   275ac:	bf28      	it	cs
   275ae:	461a      	movcs	r2, r3
   275b0:	6062      	str	r2, [r4, #4]
   275b2:	b110      	cbz	r0, 275ba <datagram_handler_get+0x28>
   275b4:	6869      	ldr	r1, [r5, #4]
   275b6:	f7fd f899 	bl	246ec <memcpy>
   275ba:	68a0      	ldr	r0, [r4, #8]
   275bc:	b1a8      	cbz	r0, 275ea <datagram_handler_get+0x58>
   275be:	6929      	ldr	r1, [r5, #16]
   275c0:	b199      	cbz	r1, 275ea <datagram_handler_get+0x58>
   275c2:	68ea      	ldr	r2, [r5, #12]
   275c4:	b18a      	cbz	r2, 275ea <datagram_handler_get+0x58>
   275c6:	68e3      	ldr	r3, [r4, #12]
   275c8:	429a      	cmp	r2, r3
   275ca:	bf28      	it	cs
   275cc:	461a      	movcs	r2, r3
   275ce:	60e2      	str	r2, [r4, #12]
   275d0:	f7fd f88c 	bl	246ec <memcpy>
   275d4:	0732      	lsls	r2, r6, #28
   275d6:	68ad      	ldr	r5, [r5, #8]
   275d8:	d402      	bmi.n	275e0 <datagram_handler_get+0x4e>
   275da:	4638      	mov	r0, r7
   275dc:	f7ff ff96 	bl	2750c <datagram_handler_free_packet>
   275e0:	06b3      	lsls	r3, r6, #26
   275e2:	bf4c      	ite	mi
   275e4:	4628      	movmi	r0, r5
   275e6:	6860      	ldrpl	r0, [r4, #4]
   275e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   275ea:	2300      	movs	r3, #0
   275ec:	60e3      	str	r3, [r4, #12]
   275ee:	e7f1      	b.n	275d4 <datagram_handler_get+0x42>
   275f0:	f04f 30ff 	mov.w	r0, #4294967295
   275f4:	e7f8      	b.n	275e8 <datagram_handler_get+0x56>

000275f6 <datagram_handler_available>:
   275f6:	b508      	push	{r3, lr}
   275f8:	68c0      	ldr	r0, [r0, #12]
   275fa:	f000 f88e 	bl	2771a <linked_list_peek>
   275fe:	b108      	cbz	r0, 27604 <datagram_handler_available+0xe>
   27600:	6880      	ldr	r0, [r0, #8]
   27602:	bd08      	pop	{r3, pc}
   27604:	f04f 30ff 	mov.w	r0, #4294967295
   27608:	e7fb      	b.n	27602 <datagram_handler_available+0xc>

0002760a <datagram_handler_flush>:
   2760a:	68c3      	ldr	r3, [r0, #12]
   2760c:	b510      	push	{r4, lr}
   2760e:	4604      	mov	r4, r0
   27610:	b923      	cbnz	r3, 2761c <datagram_handler_flush+0x12>
   27612:	2016      	movs	r0, #22
   27614:	e007      	b.n	27626 <datagram_handler_flush+0x1c>
   27616:	4620      	mov	r0, r4
   27618:	f7ff ff78 	bl	2750c <datagram_handler_free_packet>
   2761c:	68e0      	ldr	r0, [r4, #12]
   2761e:	f000 f881 	bl	27724 <linked_list_size_get>
   27622:	2800      	cmp	r0, #0
   27624:	d1f7      	bne.n	27616 <datagram_handler_flush+0xc>
   27626:	bd10      	pop	{r4, pc}

00027628 <datagram_handler_free>:
   27628:	68c3      	ldr	r3, [r0, #12]
   2762a:	b510      	push	{r4, lr}
   2762c:	4604      	mov	r4, r0
   2762e:	b133      	cbz	r3, 2763e <datagram_handler_free+0x16>
   27630:	f7ff ffeb 	bl	2760a <datagram_handler_flush>
   27634:	68e0      	ldr	r0, [r4, #12]
   27636:	f7f2 f849 	bl	196cc <nrf_modem_os_free>
   2763a:	2300      	movs	r3, #0
   2763c:	60e3      	str	r3, [r4, #12]
   2763e:	bd10      	pop	{r4, pc}

00027640 <packet_handler_delete>:
   27640:	b510      	push	{r4, lr}
   27642:	4604      	mov	r4, r0
   27644:	6803      	ldr	r3, [r0, #0]
   27646:	691b      	ldr	r3, [r3, #16]
   27648:	4798      	blx	r3
   2764a:	6823      	ldr	r3, [r4, #0]
   2764c:	4620      	mov	r0, r4
   2764e:	695b      	ldr	r3, [r3, #20]
   27650:	4798      	blx	r3
   27652:	4620      	mov	r0, r4
   27654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27658:	f7f2 b838 	b.w	196cc <nrf_modem_os_free>

0002765c <nrf_modem_recoverable_error_handler>:
   2765c:	4770      	bx	lr

0002765e <nrf_modem_platform_error_handler>:
   2765e:	b508      	push	{r3, lr}
   27660:	f7ff fffc 	bl	2765c <nrf_modem_recoverable_error_handler>
   27664:	bd08      	pop	{r3, pc}

00027666 <rpc_transport_ipc_fault_handler>:
   27666:	f7ff bffa 	b.w	2765e <nrf_modem_platform_error_handler>

0002766a <nrf_modem_platform_init>:
   2766a:	b513      	push	{r0, r1, r4, lr}
   2766c:	4604      	mov	r4, r0
   2766e:	f7f2 f85f 	bl	19730 <nrf_modem_os_init>
   27672:	6a23      	ldr	r3, [r4, #32]
   27674:	4668      	mov	r0, sp
   27676:	9400      	str	r4, [sp, #0]
   27678:	f88d 3004 	strb.w	r3, [sp, #4]
   2767c:	f7f3 fb54 	bl	1ad28 <rpc_transport_ipc_init>
   27680:	b920      	cbnz	r0, 2768c <nrf_modem_platform_init+0x22>
   27682:	f7f3 fcb5 	bl	1aff0 <interface_init>
   27686:	b118      	cbz	r0, 27690 <nrf_modem_platform_init+0x26>
   27688:	f04f 30ff 	mov.w	r0, #4294967295
   2768c:	b002      	add	sp, #8
   2768e:	bd10      	pop	{r4, pc}
   27690:	f7f4 f89c 	bl	1b7cc <at_interface_init>
   27694:	2800      	cmp	r0, #0
   27696:	d1f7      	bne.n	27688 <nrf_modem_platform_init+0x1e>
   27698:	f7f4 f8fe 	bl	1b898 <nrf_modem_at_init>
   2769c:	2800      	cmp	r0, #0
   2769e:	d1f5      	bne.n	2768c <nrf_modem_platform_init+0x22>
   276a0:	f7f3 fd5a 	bl	1b158 <ip_interface_init>
   276a4:	2800      	cmp	r0, #0
   276a6:	d1ef      	bne.n	27688 <nrf_modem_platform_init+0x1e>
   276a8:	f7f4 f812 	bl	1b6d0 <tls_interface_init>
   276ac:	2800      	cmp	r0, #0
   276ae:	d1eb      	bne.n	27688 <nrf_modem_platform_init+0x1e>
   276b0:	f7f4 f95a 	bl	1b968 <mfu_interface_init>
   276b4:	2800      	cmp	r0, #0
   276b6:	d1e7      	bne.n	27688 <nrf_modem_platform_init+0x1e>
   276b8:	f7f4 fa66 	bl	1bb88 <pdn_interface_init>
   276bc:	2800      	cmp	r0, #0
   276be:	d1e3      	bne.n	27688 <nrf_modem_platform_init+0x1e>
   276c0:	f7f4 fa3e 	bl	1bb40 <gnss_interface_init>
   276c4:	3800      	subs	r0, #0
   276c6:	bf18      	it	ne
   276c8:	2001      	movne	r0, #1
   276ca:	4240      	negs	r0, r0
   276cc:	e7de      	b.n	2768c <nrf_modem_platform_init+0x22>

000276ce <linked_list_init>:
   276ce:	4603      	mov	r3, r0
   276d0:	b120      	cbz	r0, 276dc <linked_list_init+0xe>
   276d2:	2000      	movs	r0, #0
   276d4:	e9c3 0001 	strd	r0, r0, [r3, #4]
   276d8:	6018      	str	r0, [r3, #0]
   276da:	4770      	bx	lr
   276dc:	2016      	movs	r0, #22
   276de:	4770      	bx	lr

000276e0 <linked_list_push>:
   276e0:	6803      	ldr	r3, [r0, #0]
   276e2:	3301      	adds	r3, #1
   276e4:	d00d      	beq.n	27702 <linked_list_push+0x22>
   276e6:	2300      	movs	r3, #0
   276e8:	600b      	str	r3, [r1, #0]
   276ea:	6803      	ldr	r3, [r0, #0]
   276ec:	b933      	cbnz	r3, 276fc <linked_list_push+0x1c>
   276ee:	6041      	str	r1, [r0, #4]
   276f0:	6803      	ldr	r3, [r0, #0]
   276f2:	6081      	str	r1, [r0, #8]
   276f4:	3301      	adds	r3, #1
   276f6:	6003      	str	r3, [r0, #0]
   276f8:	2000      	movs	r0, #0
   276fa:	4770      	bx	lr
   276fc:	6883      	ldr	r3, [r0, #8]
   276fe:	6019      	str	r1, [r3, #0]
   27700:	e7f6      	b.n	276f0 <linked_list_push+0x10>
   27702:	200c      	movs	r0, #12
   27704:	4770      	bx	lr

00027706 <linked_list_pop>:
   27706:	4603      	mov	r3, r0
   27708:	6800      	ldr	r0, [r0, #0]
   2770a:	b128      	cbz	r0, 27718 <linked_list_pop+0x12>
   2770c:	6858      	ldr	r0, [r3, #4]
   2770e:	6802      	ldr	r2, [r0, #0]
   27710:	605a      	str	r2, [r3, #4]
   27712:	681a      	ldr	r2, [r3, #0]
   27714:	3a01      	subs	r2, #1
   27716:	601a      	str	r2, [r3, #0]
   27718:	4770      	bx	lr

0002771a <linked_list_peek>:
   2771a:	4603      	mov	r3, r0
   2771c:	6800      	ldr	r0, [r0, #0]
   2771e:	b100      	cbz	r0, 27722 <linked_list_peek+0x8>
   27720:	6858      	ldr	r0, [r3, #4]
   27722:	4770      	bx	lr

00027724 <linked_list_size_get>:
   27724:	6800      	ldr	r0, [r0, #0]
   27726:	4770      	bx	lr

00027728 <linked_list_get_next>:
   27728:	6800      	ldr	r0, [r0, #0]
   2772a:	4770      	bx	lr

0002772c <z_object_init>:

/**
 * @internal
 */
static inline void z_object_init(const void *obj)
{
   2772c:	b480      	push	{r7}
   2772e:	b083      	sub	sp, #12
   27730:	af00      	add	r7, sp, #0
   27732:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(obj);
}
   27734:	bf00      	nop
   27736:	370c      	adds	r7, #12
   27738:	46bd      	mov	sp, r7
   2773a:	bc80      	pop	{r7}
   2773c:	4770      	bx	lr

0002773e <device_pm_state_init>:
{
   2773e:	b480      	push	{r7}
   27740:	b083      	sub	sp, #12
   27742:	af00      	add	r7, sp, #0
   27744:	6078      	str	r0, [r7, #4]
}
   27746:	bf00      	nop
   27748:	370c      	adds	r7, #12
   2774a:	46bd      	mov	sp, r7
   2774c:	bc80      	pop	{r7}
   2774e:	4770      	bx	lr

00027750 <z_device_ready>:
	*devices = __device_start;
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
   27750:	b480      	push	{r7}
   27752:	b083      	sub	sp, #12
   27754:	af00      	add	r7, sp, #0
   27756:	6078      	str	r0, [r7, #4]
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   27758:	687b      	ldr	r3, [r7, #4]
   2775a:	2b00      	cmp	r3, #0
   2775c:	d101      	bne.n	27762 <z_device_ready+0x12>
		return false;
   2775e:	2300      	movs	r3, #0
   27760:	e012      	b.n	27788 <z_device_ready+0x38>
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   27762:	687b      	ldr	r3, [r7, #4]
   27764:	68db      	ldr	r3, [r3, #12]
   27766:	785b      	ldrb	r3, [r3, #1]
   27768:	f003 0301 	and.w	r3, r3, #1
   2776c:	b2db      	uxtb	r3, r3
   2776e:	2b00      	cmp	r3, #0
   27770:	d006      	beq.n	27780 <z_device_ready+0x30>
   27772:	687b      	ldr	r3, [r7, #4]
   27774:	68db      	ldr	r3, [r3, #12]
   27776:	781b      	ldrb	r3, [r3, #0]
   27778:	2b00      	cmp	r3, #0
   2777a:	d101      	bne.n	27780 <z_device_ready+0x30>
   2777c:	2301      	movs	r3, #1
   2777e:	e000      	b.n	27782 <z_device_ready+0x32>
   27780:	2300      	movs	r3, #0
   27782:	f003 0301 	and.w	r3, r3, #1
   27786:	b2db      	uxtb	r3, r3
}
   27788:	4618      	mov	r0, r3
   2778a:	370c      	adds	r7, #12
   2778c:	46bd      	mov	sp, r7
   2778e:	bc80      	pop	{r7}
   27790:	4770      	bx	lr

00027792 <k_is_user_context>:
{
   27792:	b480      	push	{r7}
   27794:	af00      	add	r7, sp, #0
	return false;
   27796:	2300      	movs	r3, #0
}
   27798:	4618      	mov	r0, r3
   2779a:	46bd      	mov	sp, r7
   2779c:	bc80      	pop	{r7}
   2779e:	4770      	bx	lr

000277a0 <k_current_get>:
{
   277a0:	b580      	push	{r7, lr}
   277a2:	af00      	add	r7, sp, #0
	return z_impl_k_current_get();
   277a4:	f7f8 fb02 	bl	1fdac <z_impl_k_current_get>
   277a8:	4603      	mov	r3, r0
}
   277aa:	4618      	mov	r0, r3
   277ac:	bd80      	pop	{r7, pc}

000277ae <k_thread_abort>:
{
   277ae:	b580      	push	{r7, lr}
   277b0:	b082      	sub	sp, #8
   277b2:	af00      	add	r7, sp, #0
   277b4:	6078      	str	r0, [r7, #4]
	z_impl_k_thread_abort(thread);
   277b6:	6878      	ldr	r0, [r7, #4]
   277b8:	f7ef feee 	bl	17598 <z_impl_k_thread_abort>
}
   277bc:	bf00      	nop
   277be:	3708      	adds	r7, #8
   277c0:	46bd      	mov	sp, r7
   277c2:	bd80      	pop	{r7, pc}

000277c4 <log_strdup>:
 *	   a buffer from the pool (see CONFIG_LOG_STRDUP_MAX_STRING). In
 *	   some configurations, the original string pointer is returned.
 */
char *z_log_strdup(const char *str);
static inline char *log_strdup(const char *str)
{
   277c4:	b580      	push	{r7, lr}
   277c6:	b082      	sub	sp, #8
   277c8:	af00      	add	r7, sp, #0
   277ca:	6078      	str	r0, [r7, #4]
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   277cc:	6878      	ldr	r0, [r7, #4]
   277ce:	f7eb fc45 	bl	1305c <z_log_strdup>
   277d2:	4603      	mov	r3, r0
}
   277d4:	4618      	mov	r0, r3
   277d6:	3708      	adds	r7, #8
   277d8:	46bd      	mov	sp, r7
   277da:	bd80      	pop	{r7, pc}

000277dc <coredump>:

#else

void coredump(unsigned int reason, const z_arch_esf_t *esf,
	      struct k_thread *thread)
{
   277dc:	b480      	push	{r7}
   277de:	b085      	sub	sp, #20
   277e0:	af00      	add	r7, sp, #0
   277e2:	60f8      	str	r0, [r7, #12]
   277e4:	60b9      	str	r1, [r7, #8]
   277e6:	607a      	str	r2, [r7, #4]
}
   277e8:	bf00      	nop
   277ea:	3714      	adds	r7, #20
   277ec:	46bd      	mov	sp, r7
   277ee:	bc80      	pop	{r7}
   277f0:	4770      	bx	lr

000277f2 <get_cpu>:
{
   277f2:	b480      	push	{r7}
   277f4:	af00      	add	r7, sp, #0
	return 0;
   277f6:	2300      	movs	r3, #0
}
   277f8:	4618      	mov	r0, r3
   277fa:	46bd      	mov	sp, r7
   277fc:	bc80      	pop	{r7}
   277fe:	4770      	bx	lr

00027800 <sys_dlist_init>:
 *
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
   27800:	b480      	push	{r7}
   27802:	b083      	sub	sp, #12
   27804:	af00      	add	r7, sp, #0
   27806:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   27808:	687b      	ldr	r3, [r7, #4]
   2780a:	687a      	ldr	r2, [r7, #4]
   2780c:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   2780e:	687b      	ldr	r3, [r7, #4]
   27810:	687a      	ldr	r2, [r7, #4]
   27812:	605a      	str	r2, [r3, #4]
}
   27814:	bf00      	nop
   27816:	370c      	adds	r7, #12
   27818:	46bd      	mov	sp, r7
   2781a:	bc80      	pop	{r7}
   2781c:	4770      	bx	lr

0002781e <Z_KERNEL_STACK_BUFFER>:
#define K_KERNEL_STACK_SIZEOF(sym) (sizeof(sym) - K_KERNEL_STACK_RESERVED)

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
   2781e:	b480      	push	{r7}
   27820:	b083      	sub	sp, #12
   27822:	af00      	add	r7, sp, #0
   27824:	6078      	str	r0, [r7, #4]
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   27826:	687b      	ldr	r3, [r7, #4]
}
   27828:	4618      	mov	r0, r3
   2782a:	370c      	adds	r7, #12
   2782c:	46bd      	mov	sp, r7
   2782e:	bc80      	pop	{r7}
   27830:	4770      	bx	lr

00027832 <z_mark_thread_as_started>:
{
   27832:	b480      	push	{r7}
   27834:	b083      	sub	sp, #12
   27836:	af00      	add	r7, sp, #0
   27838:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2783a:	687b      	ldr	r3, [r7, #4]
   2783c:	7b5b      	ldrb	r3, [r3, #13]
   2783e:	f023 0304 	bic.w	r3, r3, #4
   27842:	b2da      	uxtb	r2, r3
   27844:	687b      	ldr	r3, [r7, #4]
   27846:	735a      	strb	r2, [r3, #13]
}
   27848:	bf00      	nop
   2784a:	370c      	adds	r7, #12
   2784c:	46bd      	mov	sp, r7
   2784e:	bc80      	pop	{r7}
   27850:	4770      	bx	lr

00027852 <gcov_static_init>:
#ifdef CONFIG_COVERAGE_GCOV
void gcov_coverage_dump(void);
void gcov_static_init(void);
#else
static inline void gcov_coverage_dump(void) { }
static inline void gcov_static_init(void) { }
   27852:	b480      	push	{r7}
   27854:	af00      	add	r7, sp, #0
   27856:	bf00      	nop
   27858:	46bd      	mov	sp, r7
   2785a:	bc80      	pop	{r7}
   2785c:	4770      	bx	lr

0002785e <sys_dlist_init>:
{
   2785e:	b480      	push	{r7}
   27860:	b083      	sub	sp, #12
   27862:	af00      	add	r7, sp, #0
   27864:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   27866:	687b      	ldr	r3, [r7, #4]
   27868:	687a      	ldr	r2, [r7, #4]
   2786a:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   2786c:	687b      	ldr	r3, [r7, #4]
   2786e:	687a      	ldr	r2, [r7, #4]
   27870:	605a      	str	r2, [r3, #4]
}
   27872:	bf00      	nop
   27874:	370c      	adds	r7, #12
   27876:	46bd      	mov	sp, r7
   27878:	bc80      	pop	{r7}
   2787a:	4770      	bx	lr

0002787c <z_waitq_init>:
#define _WAIT_Q_FOR_EACH(wq, thread_ptr) \
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
   2787c:	b580      	push	{r7, lr}
   2787e:	b082      	sub	sp, #8
   27880:	af00      	add	r7, sp, #0
   27882:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
   27884:	687b      	ldr	r3, [r7, #4]
   27886:	4618      	mov	r0, r3
   27888:	f7ff ffe9 	bl	2785e <sys_dlist_init>
}
   2788c:	bf00      	nop
   2788e:	3708      	adds	r7, #8
   27890:	46bd      	mov	sp, r7
   27892:	bd80      	pop	{r7, pc}

00027894 <k_heap_init>:
{
   27894:	b580      	push	{r7, lr}
   27896:	b084      	sub	sp, #16
   27898:	af00      	add	r7, sp, #0
   2789a:	60f8      	str	r0, [r7, #12]
   2789c:	60b9      	str	r1, [r7, #8]
   2789e:	607a      	str	r2, [r7, #4]
	z_waitq_init(&h->wait_q);
   278a0:	68fb      	ldr	r3, [r7, #12]
   278a2:	330c      	adds	r3, #12
   278a4:	4618      	mov	r0, r3
   278a6:	f7ff ffe9 	bl	2787c <z_waitq_init>
	sys_heap_init(&h->heap, mem, bytes);
   278aa:	68fb      	ldr	r3, [r7, #12]
   278ac:	687a      	ldr	r2, [r7, #4]
   278ae:	68b9      	ldr	r1, [r7, #8]
   278b0:	4618      	mov	r0, r3
   278b2:	f7e9 fe0d 	bl	114d0 <sys_heap_init>
}
   278b6:	bf00      	nop
   278b8:	3710      	adds	r7, #16
   278ba:	46bd      	mov	sp, r7
   278bc:	bd80      	pop	{r7, pc}

000278be <k_heap_alloc>:
{
   278be:	b580      	push	{r7, lr}
   278c0:	b088      	sub	sp, #32
   278c2:	af02      	add	r7, sp, #8
   278c4:	60f8      	str	r0, [r7, #12]
   278c6:	60b9      	str	r1, [r7, #8]
   278c8:	e9c7 2300 	strd	r2, r3, [r7]
	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   278cc:	e9d7 2300 	ldrd	r2, r3, [r7]
   278d0:	e9cd 2300 	strd	r2, r3, [sp]
   278d4:	68ba      	ldr	r2, [r7, #8]
   278d6:	2104      	movs	r1, #4
   278d8:	68f8      	ldr	r0, [r7, #12]
   278da:	f7f4 fe93 	bl	1c604 <k_heap_aligned_alloc>
   278de:	6178      	str	r0, [r7, #20]
	return ret;
   278e0:	697b      	ldr	r3, [r7, #20]
}
   278e2:	4618      	mov	r0, r3
   278e4:	3718      	adds	r7, #24
   278e6:	46bd      	mov	sp, r7
   278e8:	bd80      	pop	{r7, pc}

000278ea <sys_dlist_init>:
{
   278ea:	b480      	push	{r7}
   278ec:	b083      	sub	sp, #12
   278ee:	af00      	add	r7, sp, #0
   278f0:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   278f2:	687b      	ldr	r3, [r7, #4]
   278f4:	687a      	ldr	r2, [r7, #4]
   278f6:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   278f8:	687b      	ldr	r3, [r7, #4]
   278fa:	687a      	ldr	r2, [r7, #4]
   278fc:	605a      	str	r2, [r3, #4]
}
   278fe:	bf00      	nop
   27900:	370c      	adds	r7, #12
   27902:	46bd      	mov	sp, r7
   27904:	bc80      	pop	{r7}
   27906:	4770      	bx	lr

00027908 <z_object_init>:
{
   27908:	b480      	push	{r7}
   2790a:	b083      	sub	sp, #12
   2790c:	af00      	add	r7, sp, #0
   2790e:	6078      	str	r0, [r7, #4]
}
   27910:	bf00      	nop
   27912:	370c      	adds	r7, #12
   27914:	46bd      	mov	sp, r7
   27916:	bc80      	pop	{r7}
   27918:	4770      	bx	lr

0002791a <z_waitq_init>:
{
   2791a:	b580      	push	{r7, lr}
   2791c:	b082      	sub	sp, #8
   2791e:	af00      	add	r7, sp, #0
   27920:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
   27922:	687b      	ldr	r3, [r7, #4]
   27924:	4618      	mov	r0, r3
   27926:	f7ff ffe0 	bl	278ea <sys_dlist_init>
}
   2792a:	bf00      	nop
   2792c:	3708      	adds	r7, #8
   2792e:	46bd      	mov	sp, r7
   27930:	bd80      	pop	{r7, pc}

00027932 <create_free_list>:
{
   27932:	b480      	push	{r7}
   27934:	b085      	sub	sp, #20
   27936:	af00      	add	r7, sp, #0
   27938:	6078      	str	r0, [r7, #4]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2793a:	687b      	ldr	r3, [r7, #4]
   2793c:	691b      	ldr	r3, [r3, #16]
   2793e:	687a      	ldr	r2, [r7, #4]
   27940:	6952      	ldr	r2, [r2, #20]
   27942:	4313      	orrs	r3, r2
   27944:	f003 0303 	and.w	r3, r3, #3
   27948:	2b00      	cmp	r3, #0
   2794a:	d002      	beq.n	27952 <create_free_list+0x20>
		return -EINVAL;
   2794c:	f06f 0315 	mvn.w	r3, #21
   27950:	e01d      	b.n	2798e <create_free_list+0x5c>
	slab->free_list = NULL;
   27952:	687b      	ldr	r3, [r7, #4]
   27954:	2200      	movs	r2, #0
   27956:	619a      	str	r2, [r3, #24]
	p = slab->buffer;
   27958:	687b      	ldr	r3, [r7, #4]
   2795a:	695b      	ldr	r3, [r3, #20]
   2795c:	60bb      	str	r3, [r7, #8]
	for (j = 0U; j < slab->num_blocks; j++) {
   2795e:	2300      	movs	r3, #0
   27960:	60fb      	str	r3, [r7, #12]
   27962:	e00e      	b.n	27982 <create_free_list+0x50>
		*(char **)p = slab->free_list;
   27964:	687b      	ldr	r3, [r7, #4]
   27966:	699a      	ldr	r2, [r3, #24]
   27968:	68bb      	ldr	r3, [r7, #8]
   2796a:	601a      	str	r2, [r3, #0]
		slab->free_list = p;
   2796c:	687b      	ldr	r3, [r7, #4]
   2796e:	68ba      	ldr	r2, [r7, #8]
   27970:	619a      	str	r2, [r3, #24]
		p += slab->block_size;
   27972:	687b      	ldr	r3, [r7, #4]
   27974:	691b      	ldr	r3, [r3, #16]
   27976:	68ba      	ldr	r2, [r7, #8]
   27978:	4413      	add	r3, r2
   2797a:	60bb      	str	r3, [r7, #8]
	for (j = 0U; j < slab->num_blocks; j++) {
   2797c:	68fb      	ldr	r3, [r7, #12]
   2797e:	3301      	adds	r3, #1
   27980:	60fb      	str	r3, [r7, #12]
   27982:	687b      	ldr	r3, [r7, #4]
   27984:	68db      	ldr	r3, [r3, #12]
   27986:	68fa      	ldr	r2, [r7, #12]
   27988:	429a      	cmp	r2, r3
   2798a:	d3eb      	bcc.n	27964 <create_free_list+0x32>
	return 0;
   2798c:	2300      	movs	r3, #0
}
   2798e:	4618      	mov	r0, r3
   27990:	3714      	adds	r7, #20
   27992:	46bd      	mov	sp, r7
   27994:	bc80      	pop	{r7}
   27996:	4770      	bx	lr

00027998 <k_mem_slab_init>:
{
   27998:	b580      	push	{r7, lr}
   2799a:	b086      	sub	sp, #24
   2799c:	af00      	add	r7, sp, #0
   2799e:	60f8      	str	r0, [r7, #12]
   279a0:	60b9      	str	r1, [r7, #8]
   279a2:	607a      	str	r2, [r7, #4]
   279a4:	603b      	str	r3, [r7, #0]
	int rc = 0;
   279a6:	2300      	movs	r3, #0
   279a8:	617b      	str	r3, [r7, #20]
	slab->num_blocks = num_blocks;
   279aa:	68fb      	ldr	r3, [r7, #12]
   279ac:	683a      	ldr	r2, [r7, #0]
   279ae:	60da      	str	r2, [r3, #12]
	slab->block_size = block_size;
   279b0:	68fb      	ldr	r3, [r7, #12]
   279b2:	687a      	ldr	r2, [r7, #4]
   279b4:	611a      	str	r2, [r3, #16]
	slab->buffer = buffer;
   279b6:	68fb      	ldr	r3, [r7, #12]
   279b8:	68ba      	ldr	r2, [r7, #8]
   279ba:	615a      	str	r2, [r3, #20]
	slab->num_used = 0U;
   279bc:	68fb      	ldr	r3, [r7, #12]
   279be:	2200      	movs	r2, #0
   279c0:	61da      	str	r2, [r3, #28]
	slab->lock = (struct k_spinlock) {};
   279c2:	68fb      	ldr	r3, [r7, #12]
   279c4:	2200      	movs	r2, #0
   279c6:	609a      	str	r2, [r3, #8]
	rc = create_free_list(slab);
   279c8:	68f8      	ldr	r0, [r7, #12]
   279ca:	f7ff ffb2 	bl	27932 <create_free_list>
   279ce:	6178      	str	r0, [r7, #20]
	if (rc < 0) {
   279d0:	697b      	ldr	r3, [r7, #20]
   279d2:	2b00      	cmp	r3, #0
   279d4:	db07      	blt.n	279e6 <k_mem_slab_init+0x4e>
	z_waitq_init(&slab->wait_q);
   279d6:	68fb      	ldr	r3, [r7, #12]
   279d8:	4618      	mov	r0, r3
   279da:	f7ff ff9e 	bl	2791a <z_waitq_init>
	z_object_init(slab);
   279de:	68f8      	ldr	r0, [r7, #12]
   279e0:	f7ff ff92 	bl	27908 <z_object_init>
   279e4:	e000      	b.n	279e8 <k_mem_slab_init+0x50>
		goto out;
   279e6:	bf00      	nop
	return rc;
   279e8:	697b      	ldr	r3, [r7, #20]
}
   279ea:	4618      	mov	r0, r3
   279ec:	3718      	adds	r7, #24
   279ee:	46bd      	mov	sp, r7
   279f0:	bd80      	pop	{r7, pc}

000279f2 <sys_dlist_init>:
{
   279f2:	b480      	push	{r7}
   279f4:	b083      	sub	sp, #12
   279f6:	af00      	add	r7, sp, #0
   279f8:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   279fa:	687b      	ldr	r3, [r7, #4]
   279fc:	687a      	ldr	r2, [r7, #4]
   279fe:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   27a00:	687b      	ldr	r3, [r7, #4]
   27a02:	687a      	ldr	r2, [r7, #4]
   27a04:	605a      	str	r2, [r3, #4]
}
   27a06:	bf00      	nop
   27a08:	370c      	adds	r7, #12
   27a0a:	46bd      	mov	sp, r7
   27a0c:	bc80      	pop	{r7}
   27a0e:	4770      	bx	lr

00027a10 <sys_dnode_init>:
 *
 * @return N/A
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
   27a10:	b480      	push	{r7}
   27a12:	b083      	sub	sp, #12
   27a14:	af00      	add	r7, sp, #0
   27a16:	6078      	str	r0, [r7, #4]
	node->next = NULL;
   27a18:	687b      	ldr	r3, [r7, #4]
   27a1a:	2200      	movs	r2, #0
   27a1c:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
   27a1e:	687b      	ldr	r3, [r7, #4]
   27a20:	2200      	movs	r2, #0
   27a22:	605a      	str	r2, [r3, #4]
}
   27a24:	bf00      	nop
   27a26:	370c      	adds	r7, #12
   27a28:	46bd      	mov	sp, r7
   27a2a:	bc80      	pop	{r7}
   27a2c:	4770      	bx	lr

00027a2e <k_is_user_context>:
{
   27a2e:	b480      	push	{r7}
   27a30:	af00      	add	r7, sp, #0
	return false;
   27a32:	2300      	movs	r3, #0
}
   27a34:	4618      	mov	r0, r3
   27a36:	46bd      	mov	sp, r7
   27a38:	bc80      	pop	{r7}
   27a3a:	4770      	bx	lr

00027a3c <k_ms_to_ticks_ceil64>:
{
   27a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   27a40:	b08c      	sub	sp, #48	; 0x30
   27a42:	af00      	add	r7, sp, #0
   27a44:	e9c7 0100 	strd	r0, r1, [r7]
   27a48:	e9d7 2300 	ldrd	r2, r3, [r7]
   27a4c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   27a50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   27a54:	627b      	str	r3, [r7, #36]	; 0x24
   27a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   27a5a:	623b      	str	r3, [r7, #32]
   27a5c:	2301      	movs	r3, #1
   27a5e:	77fb      	strb	r3, [r7, #31]
   27a60:	2300      	movs	r3, #0
   27a62:	77bb      	strb	r3, [r7, #30]
   27a64:	2301      	movs	r3, #1
   27a66:	777b      	strb	r3, [r7, #29]
   27a68:	2300      	movs	r3, #0
   27a6a:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   27a6c:	7ffb      	ldrb	r3, [r7, #31]
   27a6e:	2b00      	cmp	r3, #0
   27a70:	d00f      	beq.n	27a92 <k_ms_to_ticks_ceil64+0x56>
	bool mul_ratio = const_hz &&
   27a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27a74:	6a3b      	ldr	r3, [r7, #32]
   27a76:	429a      	cmp	r2, r3
   27a78:	d20b      	bcs.n	27a92 <k_ms_to_ticks_ceil64+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   27a7a:	6a3b      	ldr	r3, [r7, #32]
   27a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27a7e:	fbb3 f2f2 	udiv	r2, r3, r2
   27a82:	6a79      	ldr	r1, [r7, #36]	; 0x24
   27a84:	fb01 f202 	mul.w	r2, r1, r2
   27a88:	1a9b      	subs	r3, r3, r2
   27a8a:	2b00      	cmp	r3, #0
   27a8c:	d101      	bne.n	27a92 <k_ms_to_ticks_ceil64+0x56>
   27a8e:	2301      	movs	r3, #1
   27a90:	e000      	b.n	27a94 <k_ms_to_ticks_ceil64+0x58>
   27a92:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   27a94:	76fb      	strb	r3, [r7, #27]
   27a96:	7efb      	ldrb	r3, [r7, #27]
   27a98:	f003 0301 	and.w	r3, r3, #1
   27a9c:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   27a9e:	7ffb      	ldrb	r3, [r7, #31]
   27aa0:	2b00      	cmp	r3, #0
   27aa2:	d00f      	beq.n	27ac4 <k_ms_to_ticks_ceil64+0x88>
	bool div_ratio = const_hz &&
   27aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27aa6:	6a3b      	ldr	r3, [r7, #32]
   27aa8:	429a      	cmp	r2, r3
   27aaa:	d90b      	bls.n	27ac4 <k_ms_to_ticks_ceil64+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   27aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27aae:	6a3a      	ldr	r2, [r7, #32]
   27ab0:	fbb3 f2f2 	udiv	r2, r3, r2
   27ab4:	6a39      	ldr	r1, [r7, #32]
   27ab6:	fb01 f202 	mul.w	r2, r1, r2
   27aba:	1a9b      	subs	r3, r3, r2
   27abc:	2b00      	cmp	r3, #0
   27abe:	d101      	bne.n	27ac4 <k_ms_to_ticks_ceil64+0x88>
   27ac0:	2301      	movs	r3, #1
   27ac2:	e000      	b.n	27ac6 <k_ms_to_ticks_ceil64+0x8a>
   27ac4:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   27ac6:	76bb      	strb	r3, [r7, #26]
   27ac8:	7ebb      	ldrb	r3, [r7, #26]
   27aca:	f003 0301 	and.w	r3, r3, #1
   27ace:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   27ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27ad2:	6a3b      	ldr	r3, [r7, #32]
   27ad4:	429a      	cmp	r2, r3
   27ad6:	d10a      	bne.n	27aee <k_ms_to_ticks_ceil64+0xb2>
		return result32 ? ((uint32_t)t) : t;
   27ad8:	7fbb      	ldrb	r3, [r7, #30]
   27ada:	2b00      	cmp	r3, #0
   27adc:	d004      	beq.n	27ae8 <k_ms_to_ticks_ceil64+0xac>
   27ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27ae0:	461a      	mov	r2, r3
   27ae2:	f04f 0300 	mov.w	r3, #0
   27ae6:	e0c7      	b.n	27c78 <k_ms_to_ticks_ceil64+0x23c>
   27ae8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   27aec:	e0c4      	b.n	27c78 <k_ms_to_ticks_ceil64+0x23c>
	uint64_t off = 0;
   27aee:	f04f 0200 	mov.w	r2, #0
   27af2:	f04f 0300 	mov.w	r3, #0
   27af6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   27afa:	7efb      	ldrb	r3, [r7, #27]
   27afc:	f083 0301 	eor.w	r3, r3, #1
   27b00:	b2db      	uxtb	r3, r3
   27b02:	2b00      	cmp	r3, #0
   27b04:	d01d      	beq.n	27b42 <k_ms_to_ticks_ceil64+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   27b06:	7ebb      	ldrb	r3, [r7, #26]
   27b08:	2b00      	cmp	r3, #0
   27b0a:	d004      	beq.n	27b16 <k_ms_to_ticks_ceil64+0xda>
   27b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27b0e:	6a3b      	ldr	r3, [r7, #32]
   27b10:	fbb2 f3f3 	udiv	r3, r2, r3
   27b14:	e000      	b.n	27b18 <k_ms_to_ticks_ceil64+0xdc>
   27b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27b18:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   27b1a:	7f7b      	ldrb	r3, [r7, #29]
   27b1c:	2b00      	cmp	r3, #0
   27b1e:	d006      	beq.n	27b2e <k_ms_to_ticks_ceil64+0xf2>
			off = rdivisor - 1U;
   27b20:	68fb      	ldr	r3, [r7, #12]
   27b22:	3b01      	subs	r3, #1
   27b24:	461a      	mov	r2, r3
   27b26:	f04f 0300 	mov.w	r3, #0
   27b2a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   27b2e:	7f3b      	ldrb	r3, [r7, #28]
   27b30:	2b00      	cmp	r3, #0
   27b32:	d006      	beq.n	27b42 <k_ms_to_ticks_ceil64+0x106>
			off = rdivisor / 2U;
   27b34:	68fb      	ldr	r3, [r7, #12]
   27b36:	085b      	lsrs	r3, r3, #1
   27b38:	461a      	mov	r2, r3
   27b3a:	f04f 0300 	mov.w	r3, #0
   27b3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   27b42:	7ebb      	ldrb	r3, [r7, #26]
   27b44:	2b00      	cmp	r3, #0
   27b46:	d02a      	beq.n	27b9e <k_ms_to_ticks_ceil64+0x162>
		t += off;
   27b48:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   27b4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   27b50:	1884      	adds	r4, r0, r2
   27b52:	eb41 0503 	adc.w	r5, r1, r3
   27b56:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   27b5a:	7fbb      	ldrb	r3, [r7, #30]
   27b5c:	2b00      	cmp	r3, #0
   27b5e:	d010      	beq.n	27b82 <k_ms_to_ticks_ceil64+0x146>
   27b60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   27b64:	2b01      	cmp	r3, #1
   27b66:	bf08      	it	eq
   27b68:	2a00      	cmpeq	r2, #0
   27b6a:	d20a      	bcs.n	27b82 <k_ms_to_ticks_ceil64+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
   27b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   27b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   27b70:	6a3b      	ldr	r3, [r7, #32]
   27b72:	fbb1 f3f3 	udiv	r3, r1, r3
   27b76:	fbb2 f3f3 	udiv	r3, r2, r3
   27b7a:	461a      	mov	r2, r3
   27b7c:	f04f 0300 	mov.w	r3, #0
   27b80:	e07a      	b.n	27c78 <k_ms_to_ticks_ceil64+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
   27b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27b84:	6a3b      	ldr	r3, [r7, #32]
   27b86:	fbb2 f3f3 	udiv	r3, r2, r3
   27b8a:	461a      	mov	r2, r3
   27b8c:	f04f 0300 	mov.w	r3, #0
   27b90:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   27b94:	f7e8 fb52 	bl	1023c <__aeabi_uldivmod>
   27b98:	4602      	mov	r2, r0
   27b9a:	460b      	mov	r3, r1
   27b9c:	e06c      	b.n	27c78 <k_ms_to_ticks_ceil64+0x23c>
	} else if (mul_ratio) {
   27b9e:	7efb      	ldrb	r3, [r7, #27]
   27ba0:	2b00      	cmp	r3, #0
   27ba2:	d021      	beq.n	27be8 <k_ms_to_ticks_ceil64+0x1ac>
		if (result32) {
   27ba4:	7fbb      	ldrb	r3, [r7, #30]
   27ba6:	2b00      	cmp	r3, #0
   27ba8:	d00a      	beq.n	27bc0 <k_ms_to_ticks_ceil64+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
   27baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   27bac:	6a39      	ldr	r1, [r7, #32]
   27bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27bb0:	fbb1 f2f2 	udiv	r2, r1, r2
   27bb4:	fb02 f303 	mul.w	r3, r2, r3
   27bb8:	461a      	mov	r2, r3
   27bba:	f04f 0300 	mov.w	r3, #0
   27bbe:	e05b      	b.n	27c78 <k_ms_to_ticks_ceil64+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
   27bc0:	6a3a      	ldr	r2, [r7, #32]
   27bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27bc4:	fbb2 f3f3 	udiv	r3, r2, r3
   27bc8:	461a      	mov	r2, r3
   27bca:	f04f 0300 	mov.w	r3, #0
   27bce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   27bd0:	fb03 f001 	mul.w	r0, r3, r1
   27bd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   27bd6:	fb02 f101 	mul.w	r1, r2, r1
   27bda:	4401      	add	r1, r0
   27bdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   27bde:	fba0 2302 	umull	r2, r3, r0, r2
   27be2:	4419      	add	r1, r3
   27be4:	460b      	mov	r3, r1
   27be6:	e047      	b.n	27c78 <k_ms_to_ticks_ceil64+0x23c>
		if (result32) {
   27be8:	7fbb      	ldrb	r3, [r7, #30]
   27bea:	2b00      	cmp	r3, #0
   27bec:	d024      	beq.n	27c38 <k_ms_to_ticks_ceil64+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   27bee:	6a3b      	ldr	r3, [r7, #32]
   27bf0:	461a      	mov	r2, r3
   27bf2:	f04f 0300 	mov.w	r3, #0
   27bf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   27bf8:	fb03 f001 	mul.w	r0, r3, r1
   27bfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   27bfe:	fb02 f101 	mul.w	r1, r2, r1
   27c02:	4401      	add	r1, r0
   27c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   27c06:	fba0 2302 	umull	r2, r3, r0, r2
   27c0a:	4419      	add	r1, r3
   27c0c:	460b      	mov	r3, r1
   27c0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   27c12:	eb12 0a00 	adds.w	sl, r2, r0
   27c16:	eb43 0b01 	adc.w	fp, r3, r1
   27c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27c1c:	461a      	mov	r2, r3
   27c1e:	f04f 0300 	mov.w	r3, #0
   27c22:	4650      	mov	r0, sl
   27c24:	4659      	mov	r1, fp
   27c26:	f7e8 fb09 	bl	1023c <__aeabi_uldivmod>
   27c2a:	4602      	mov	r2, r0
   27c2c:	460b      	mov	r3, r1
   27c2e:	4613      	mov	r3, r2
   27c30:	461a      	mov	r2, r3
   27c32:	f04f 0300 	mov.w	r3, #0
   27c36:	e01f      	b.n	27c78 <k_ms_to_ticks_ceil64+0x23c>
			return (t * to_hz + off) / from_hz;
   27c38:	6a3b      	ldr	r3, [r7, #32]
   27c3a:	461a      	mov	r2, r3
   27c3c:	f04f 0300 	mov.w	r3, #0
   27c40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   27c42:	fb03 f001 	mul.w	r0, r3, r1
   27c46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   27c48:	fb02 f101 	mul.w	r1, r2, r1
   27c4c:	4401      	add	r1, r0
   27c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   27c50:	fba0 2302 	umull	r2, r3, r0, r2
   27c54:	4419      	add	r1, r3
   27c56:	460b      	mov	r3, r1
   27c58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   27c5c:	eb12 0800 	adds.w	r8, r2, r0
   27c60:	eb43 0901 	adc.w	r9, r3, r1
   27c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   27c66:	461a      	mov	r2, r3
   27c68:	f04f 0300 	mov.w	r3, #0
   27c6c:	4640      	mov	r0, r8
   27c6e:	4649      	mov	r1, r9
   27c70:	f7e8 fae4 	bl	1023c <__aeabi_uldivmod>
   27c74:	4602      	mov	r2, r0
   27c76:	460b      	mov	r3, r1
}
   27c78:	4610      	mov	r0, r2
   27c7a:	4619      	mov	r1, r3
   27c7c:	3730      	adds	r7, #48	; 0x30
   27c7e:	46bd      	mov	sp, r7
   27c80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

00027c84 <Z_KERNEL_STACK_BUFFER>:
{
   27c84:	b480      	push	{r7}
   27c86:	b083      	sub	sp, #12
   27c88:	af00      	add	r7, sp, #0
   27c8a:	6078      	str	r0, [r7, #4]
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   27c8c:	687b      	ldr	r3, [r7, #4]
}
   27c8e:	4618      	mov	r0, r3
   27c90:	370c      	adds	r7, #12
   27c92:	46bd      	mov	sp, r7
   27c94:	bc80      	pop	{r7}
   27c96:	4770      	bx	lr

00027c98 <k_thread_start>:
{
   27c98:	b580      	push	{r7, lr}
   27c9a:	b082      	sub	sp, #8
   27c9c:	af00      	add	r7, sp, #0
   27c9e:	6078      	str	r0, [r7, #4]
	z_impl_k_thread_start(thread);
   27ca0:	6878      	ldr	r0, [r7, #4]
   27ca2:	f000 f850 	bl	27d46 <z_impl_k_thread_start>
}
   27ca6:	bf00      	nop
   27ca8:	3708      	adds	r7, #8
   27caa:	46bd      	mov	sp, r7
   27cac:	bd80      	pop	{r7, pc}

00027cae <z_init_timeout>:
{
   27cae:	b580      	push	{r7, lr}
   27cb0:	b082      	sub	sp, #8
   27cb2:	af00      	add	r7, sp, #0
   27cb4:	6078      	str	r0, [r7, #4]
	sys_dnode_init(&to->node);
   27cb6:	687b      	ldr	r3, [r7, #4]
   27cb8:	4618      	mov	r0, r3
   27cba:	f7ff fea9 	bl	27a10 <sys_dnode_init>
}
   27cbe:	bf00      	nop
   27cc0:	3708      	adds	r7, #8
   27cc2:	46bd      	mov	sp, r7
   27cc4:	bd80      	pop	{r7, pc}

00027cc6 <z_init_thread_timeout>:
{
   27cc6:	b580      	push	{r7, lr}
   27cc8:	b082      	sub	sp, #8
   27cca:	af00      	add	r7, sp, #0
   27ccc:	6078      	str	r0, [r7, #4]
	z_init_timeout(&thread_base->timeout);
   27cce:	687b      	ldr	r3, [r7, #4]
   27cd0:	3318      	adds	r3, #24
   27cd2:	4618      	mov	r0, r3
   27cd4:	f7ff ffeb 	bl	27cae <z_init_timeout>
}
   27cd8:	bf00      	nop
   27cda:	3708      	adds	r7, #8
   27cdc:	46bd      	mov	sp, r7
   27cde:	bd80      	pop	{r7, pc}

00027ce0 <z_waitq_init>:
{
   27ce0:	b580      	push	{r7, lr}
   27ce2:	b082      	sub	sp, #8
   27ce4:	af00      	add	r7, sp, #0
   27ce6:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
   27ce8:	687b      	ldr	r3, [r7, #4]
   27cea:	4618      	mov	r0, r3
   27cec:	f7ff fe81 	bl	279f2 <sys_dlist_init>
}
   27cf0:	bf00      	nop
   27cf2:	3708      	adds	r7, #8
   27cf4:	46bd      	mov	sp, r7
   27cf6:	bd80      	pop	{r7, pc}

00027cf8 <k_is_in_isr>:
{
   27cf8:	b480      	push	{r7}
   27cfa:	b083      	sub	sp, #12
   27cfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   27cfe:	f3ef 8305 	mrs	r3, IPSR
   27d02:	607b      	str	r3, [r7, #4]
  return(result);
   27d04:	687b      	ldr	r3, [r7, #4]
   27d06:	2b00      	cmp	r3, #0
   27d08:	bf14      	ite	ne
   27d0a:	2301      	movne	r3, #1
   27d0c:	2300      	moveq	r3, #0
   27d0e:	b2db      	uxtb	r3, r3
}
   27d10:	4618      	mov	r0, r3
   27d12:	370c      	adds	r7, #12
   27d14:	46bd      	mov	sp, r7
   27d16:	bc80      	pop	{r7}
   27d18:	4770      	bx	lr

00027d1a <z_impl_k_thread_name_set>:
{
   27d1a:	b480      	push	{r7}
   27d1c:	b083      	sub	sp, #12
   27d1e:	af00      	add	r7, sp, #0
   27d20:	6078      	str	r0, [r7, #4]
   27d22:	6039      	str	r1, [r7, #0]
	return -ENOSYS;
   27d24:	f06f 0357 	mvn.w	r3, #87	; 0x57
}
   27d28:	4618      	mov	r0, r3
   27d2a:	370c      	adds	r7, #12
   27d2c:	46bd      	mov	sp, r7
   27d2e:	bc80      	pop	{r7}
   27d30:	4770      	bx	lr

00027d32 <k_thread_name_get>:
{
   27d32:	b480      	push	{r7}
   27d34:	b083      	sub	sp, #12
   27d36:	af00      	add	r7, sp, #0
   27d38:	6078      	str	r0, [r7, #4]
	return NULL;
   27d3a:	2300      	movs	r3, #0
}
   27d3c:	4618      	mov	r0, r3
   27d3e:	370c      	adds	r7, #12
   27d40:	46bd      	mov	sp, r7
   27d42:	bc80      	pop	{r7}
   27d44:	4770      	bx	lr

00027d46 <z_impl_k_thread_start>:
{
   27d46:	b580      	push	{r7, lr}
   27d48:	b082      	sub	sp, #8
   27d4a:	af00      	add	r7, sp, #0
   27d4c:	6078      	str	r0, [r7, #4]
	z_sched_start(thread);
   27d4e:	6878      	ldr	r0, [r7, #4]
   27d50:	f7f6 fda2 	bl	1e898 <z_sched_start>
}
   27d54:	bf00      	nop
   27d56:	3708      	adds	r7, #8
   27d58:	46bd      	mov	sp, r7
   27d5a:	bd80      	pop	{r7, pc}

00027d5c <schedule_new_thread>:
{
   27d5c:	b580      	push	{r7, lr}
   27d5e:	b084      	sub	sp, #16
   27d60:	af00      	add	r7, sp, #0
   27d62:	60f8      	str	r0, [r7, #12]
   27d64:	e9c7 2300 	strd	r2, r3, [r7]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   27d68:	e9d7 2300 	ldrd	r2, r3, [r7]
   27d6c:	f04f 0000 	mov.w	r0, #0
   27d70:	f04f 0100 	mov.w	r1, #0
   27d74:	428b      	cmp	r3, r1
   27d76:	bf08      	it	eq
   27d78:	4282      	cmpeq	r2, r0
   27d7a:	d103      	bne.n	27d84 <schedule_new_thread+0x28>
		k_thread_start(thread);
   27d7c:	68f8      	ldr	r0, [r7, #12]
   27d7e:	f7ff ff8b 	bl	27c98 <k_thread_start>
   27d82:	e004      	b.n	27d8e <schedule_new_thread+0x32>
		z_add_thread_timeout(thread, delay);
   27d84:	e9d7 2300 	ldrd	r2, r3, [r7]
   27d88:	68f8      	ldr	r0, [r7, #12]
   27d8a:	f7f4 ff45 	bl	1cc18 <z_add_thread_timeout>
}
   27d8e:	bf00      	nop
   27d90:	3710      	adds	r7, #16
   27d92:	46bd      	mov	sp, r7
   27d94:	bd80      	pop	{r7, pc}

00027d96 <z_init_thread_base>:
{
   27d96:	b580      	push	{r7, lr}
   27d98:	b084      	sub	sp, #16
   27d9a:	af00      	add	r7, sp, #0
   27d9c:	60f8      	str	r0, [r7, #12]
   27d9e:	60b9      	str	r1, [r7, #8]
   27da0:	607a      	str	r2, [r7, #4]
   27da2:	603b      	str	r3, [r7, #0]
	thread_base->pended_on = NULL;
   27da4:	68fb      	ldr	r3, [r7, #12]
   27da6:	2200      	movs	r2, #0
   27da8:	609a      	str	r2, [r3, #8]
	thread_base->user_options = (uint8_t)options;
   27daa:	683b      	ldr	r3, [r7, #0]
   27dac:	b2da      	uxtb	r2, r3
   27dae:	68fb      	ldr	r3, [r7, #12]
   27db0:	731a      	strb	r2, [r3, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   27db2:	687b      	ldr	r3, [r7, #4]
   27db4:	b2da      	uxtb	r2, r3
   27db6:	68fb      	ldr	r3, [r7, #12]
   27db8:	735a      	strb	r2, [r3, #13]
	thread_base->prio = priority;
   27dba:	68bb      	ldr	r3, [r7, #8]
   27dbc:	b25a      	sxtb	r2, r3
   27dbe:	68fb      	ldr	r3, [r7, #12]
   27dc0:	739a      	strb	r2, [r3, #14]
	thread_base->sched_locked = 0U;
   27dc2:	68fb      	ldr	r3, [r7, #12]
   27dc4:	2200      	movs	r2, #0
   27dc6:	73da      	strb	r2, [r3, #15]
	z_init_thread_timeout(thread_base);
   27dc8:	68f8      	ldr	r0, [r7, #12]
   27dca:	f7ff ff7c 	bl	27cc6 <z_init_thread_timeout>
}
   27dce:	bf00      	nop
   27dd0:	3710      	adds	r7, #16
   27dd2:	46bd      	mov	sp, r7
   27dd4:	bd80      	pop	{r7, pc}

00027dd6 <k_cpu_idle>:
{
   27dd6:	b580      	push	{r7, lr}
   27dd8:	af00      	add	r7, sp, #0
	arch_cpu_idle();
   27dda:	f7ee f807 	bl	15dec <arch_cpu_idle>
}
   27dde:	bf00      	nop
   27de0:	bd80      	pop	{r7, pc}

00027de2 <z_pm_save_idle_exit>:
{
   27de2:	b580      	push	{r7, lr}
   27de4:	b082      	sub	sp, #8
   27de6:	af00      	add	r7, sp, #0
   27de8:	6078      	str	r0, [r7, #4]
	pm_system_resume();
   27dea:	f7ec fb93 	bl	14514 <pm_system_resume>
	sys_clock_idle_exit();
   27dee:	f7fc f93c 	bl	2406a <sys_clock_idle_exit>
}
   27df2:	bf00      	nop
   27df4:	3708      	adds	r7, #8
   27df6:	46bd      	mov	sp, r7
   27df8:	bd80      	pop	{r7, pc}

00027dfa <sys_dlist_init>:
{
   27dfa:	b480      	push	{r7}
   27dfc:	b083      	sub	sp, #12
   27dfe:	af00      	add	r7, sp, #0
   27e00:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   27e02:	687b      	ldr	r3, [r7, #4]
   27e04:	687a      	ldr	r2, [r7, #4]
   27e06:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   27e08:	687b      	ldr	r3, [r7, #4]
   27e0a:	687a      	ldr	r2, [r7, #4]
   27e0c:	605a      	str	r2, [r3, #4]
}
   27e0e:	bf00      	nop
   27e10:	370c      	adds	r7, #12
   27e12:	46bd      	mov	sp, r7
   27e14:	bc80      	pop	{r7}
   27e16:	4770      	bx	lr

00027e18 <sys_dnode_is_linked>:
 *
 * @return true if node is linked into a list, false if it is not
 */

static inline bool sys_dnode_is_linked(const sys_dnode_t *node)
{
   27e18:	b480      	push	{r7}
   27e1a:	b083      	sub	sp, #12
   27e1c:	af00      	add	r7, sp, #0
   27e1e:	6078      	str	r0, [r7, #4]
	return node->next != NULL;
   27e20:	687b      	ldr	r3, [r7, #4]
   27e22:	681b      	ldr	r3, [r3, #0]
   27e24:	2b00      	cmp	r3, #0
   27e26:	bf14      	ite	ne
   27e28:	2301      	movne	r3, #1
   27e2a:	2300      	moveq	r3, #0
   27e2c:	b2db      	uxtb	r3, r3
}
   27e2e:	4618      	mov	r0, r3
   27e30:	370c      	adds	r7, #12
   27e32:	46bd      	mov	sp, r7
   27e34:	bc80      	pop	{r7}
   27e36:	4770      	bx	lr

00027e38 <sys_dlist_is_empty>:
 *
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
   27e38:	b480      	push	{r7}
   27e3a:	b083      	sub	sp, #12
   27e3c:	af00      	add	r7, sp, #0
   27e3e:	6078      	str	r0, [r7, #4]
	return list->head == list;
   27e40:	687b      	ldr	r3, [r7, #4]
   27e42:	681b      	ldr	r3, [r3, #0]
   27e44:	687a      	ldr	r2, [r7, #4]
   27e46:	429a      	cmp	r2, r3
   27e48:	bf0c      	ite	eq
   27e4a:	2301      	moveq	r3, #1
   27e4c:	2300      	movne	r3, #0
   27e4e:	b2db      	uxtb	r3, r3
}
   27e50:	4618      	mov	r0, r3
   27e52:	370c      	adds	r7, #12
   27e54:	46bd      	mov	sp, r7
   27e56:	bc80      	pop	{r7}
   27e58:	4770      	bx	lr

00027e5a <sys_dlist_peek_head>:
 *
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
   27e5a:	b580      	push	{r7, lr}
   27e5c:	b082      	sub	sp, #8
   27e5e:	af00      	add	r7, sp, #0
   27e60:	6078      	str	r0, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27e62:	6878      	ldr	r0, [r7, #4]
   27e64:	f7ff ffe8 	bl	27e38 <sys_dlist_is_empty>
   27e68:	4603      	mov	r3, r0
   27e6a:	2b00      	cmp	r3, #0
   27e6c:	d102      	bne.n	27e74 <sys_dlist_peek_head+0x1a>
   27e6e:	687b      	ldr	r3, [r7, #4]
   27e70:	681b      	ldr	r3, [r3, #0]
   27e72:	e000      	b.n	27e76 <sys_dlist_peek_head+0x1c>
   27e74:	2300      	movs	r3, #0
}
   27e76:	4618      	mov	r0, r3
   27e78:	3708      	adds	r7, #8
   27e7a:	46bd      	mov	sp, r7
   27e7c:	bd80      	pop	{r7, pc}

00027e7e <k_is_user_context>:
{
   27e7e:	b480      	push	{r7}
   27e80:	af00      	add	r7, sp, #0
	return false;
   27e82:	2300      	movs	r3, #0
}
   27e84:	4618      	mov	r0, r3
   27e86:	46bd      	mov	sp, r7
   27e88:	bc80      	pop	{r7}
   27e8a:	4770      	bx	lr

00027e8c <z_object_init>:
{
   27e8c:	b480      	push	{r7}
   27e8e:	b083      	sub	sp, #12
   27e90:	af00      	add	r7, sp, #0
   27e92:	6078      	str	r0, [r7, #4]
}
   27e94:	bf00      	nop
   27e96:	370c      	adds	r7, #12
   27e98:	46bd      	mov	sp, r7
   27e9a:	bc80      	pop	{r7}
   27e9c:	4770      	bx	lr

00027e9e <z_is_inactive_timeout>:
{
   27e9e:	b580      	push	{r7, lr}
   27ea0:	b082      	sub	sp, #8
   27ea2:	af00      	add	r7, sp, #0
   27ea4:	6078      	str	r0, [r7, #4]
	return !sys_dnode_is_linked(&to->node);
   27ea6:	687b      	ldr	r3, [r7, #4]
   27ea8:	4618      	mov	r0, r3
   27eaa:	f7ff ffb5 	bl	27e18 <sys_dnode_is_linked>
   27eae:	4603      	mov	r3, r0
   27eb0:	2b00      	cmp	r3, #0
   27eb2:	bf14      	ite	ne
   27eb4:	2301      	movne	r3, #1
   27eb6:	2300      	moveq	r3, #0
   27eb8:	b2db      	uxtb	r3, r3
   27eba:	f083 0301 	eor.w	r3, r3, #1
   27ebe:	b2db      	uxtb	r3, r3
   27ec0:	f003 0301 	and.w	r3, r3, #1
   27ec4:	b2db      	uxtb	r3, r3
}
   27ec6:	4618      	mov	r0, r3
   27ec8:	3708      	adds	r7, #8
   27eca:	46bd      	mov	sp, r7
   27ecc:	bd80      	pop	{r7, pc}

00027ece <z_is_thread_prevented_from_running>:
{
   27ece:	b480      	push	{r7}
   27ed0:	b085      	sub	sp, #20
   27ed2:	af00      	add	r7, sp, #0
   27ed4:	6078      	str	r0, [r7, #4]
	uint8_t state = thread->base.thread_state;
   27ed6:	687b      	ldr	r3, [r7, #4]
   27ed8:	7b5b      	ldrb	r3, [r3, #13]
   27eda:	73fb      	strb	r3, [r7, #15]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   27edc:	7bfb      	ldrb	r3, [r7, #15]
   27ede:	f003 031f 	and.w	r3, r3, #31
			 _THREAD_DUMMY | _THREAD_SUSPENDED)) != 0U;
   27ee2:	2b00      	cmp	r3, #0
   27ee4:	bf14      	ite	ne
   27ee6:	2301      	movne	r3, #1
   27ee8:	2300      	moveq	r3, #0
   27eea:	b2db      	uxtb	r3, r3
}
   27eec:	4618      	mov	r0, r3
   27eee:	3714      	adds	r7, #20
   27ef0:	46bd      	mov	sp, r7
   27ef2:	bc80      	pop	{r7}
   27ef4:	4770      	bx	lr

00027ef6 <z_is_thread_timeout_active>:
{
   27ef6:	b580      	push	{r7, lr}
   27ef8:	b082      	sub	sp, #8
   27efa:	af00      	add	r7, sp, #0
   27efc:	6078      	str	r0, [r7, #4]
	return !z_is_inactive_timeout(&thread->base.timeout);
   27efe:	687b      	ldr	r3, [r7, #4]
   27f00:	3318      	adds	r3, #24
   27f02:	4618      	mov	r0, r3
   27f04:	f7ff ffcb 	bl	27e9e <z_is_inactive_timeout>
   27f08:	4603      	mov	r3, r0
   27f0a:	2b00      	cmp	r3, #0
   27f0c:	bf14      	ite	ne
   27f0e:	2301      	movne	r3, #1
   27f10:	2300      	moveq	r3, #0
   27f12:	b2db      	uxtb	r3, r3
   27f14:	f083 0301 	eor.w	r3, r3, #1
   27f18:	b2db      	uxtb	r3, r3
   27f1a:	f003 0301 	and.w	r3, r3, #1
   27f1e:	b2db      	uxtb	r3, r3
}
   27f20:	4618      	mov	r0, r3
   27f22:	3708      	adds	r7, #8
   27f24:	46bd      	mov	sp, r7
   27f26:	bd80      	pop	{r7, pc}

00027f28 <z_is_thread_ready>:
{
   27f28:	b580      	push	{r7, lr}
   27f2a:	b082      	sub	sp, #8
   27f2c:	af00      	add	r7, sp, #0
   27f2e:	6078      	str	r0, [r7, #4]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   27f30:	6878      	ldr	r0, [r7, #4]
   27f32:	f7ff ffcc 	bl	27ece <z_is_thread_prevented_from_running>
   27f36:	4603      	mov	r3, r0
   27f38:	f083 0301 	eor.w	r3, r3, #1
   27f3c:	b2db      	uxtb	r3, r3
   27f3e:	2b00      	cmp	r3, #0
   27f40:	d00a      	beq.n	27f58 <z_is_thread_ready+0x30>
		 z_is_thread_timeout_active(thread));
   27f42:	6878      	ldr	r0, [r7, #4]
   27f44:	f7ff ffd7 	bl	27ef6 <z_is_thread_timeout_active>
   27f48:	4603      	mov	r3, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   27f4a:	f083 0301 	eor.w	r3, r3, #1
   27f4e:	b2db      	uxtb	r3, r3
   27f50:	2b00      	cmp	r3, #0
   27f52:	d001      	beq.n	27f58 <z_is_thread_ready+0x30>
   27f54:	2301      	movs	r3, #1
   27f56:	e000      	b.n	27f5a <z_is_thread_ready+0x32>
   27f58:	2300      	movs	r3, #0
   27f5a:	f003 0301 	and.w	r3, r3, #1
   27f5e:	b2db      	uxtb	r3, r3
}
   27f60:	4618      	mov	r0, r3
   27f62:	3708      	adds	r7, #8
   27f64:	46bd      	mov	sp, r7
   27f66:	bd80      	pop	{r7, pc}

00027f68 <z_is_under_prio_ceiling>:
{
   27f68:	b480      	push	{r7}
   27f6a:	b083      	sub	sp, #12
   27f6c:	af00      	add	r7, sp, #0
   27f6e:	6078      	str	r0, [r7, #4]
	return prio >= CONFIG_PRIORITY_CEILING;
   27f70:	687b      	ldr	r3, [r7, #4]
   27f72:	f113 0f7f 	cmn.w	r3, #127	; 0x7f
   27f76:	bfac      	ite	ge
   27f78:	2301      	movge	r3, #1
   27f7a:	2300      	movlt	r3, #0
   27f7c:	b2db      	uxtb	r3, r3
}
   27f7e:	4618      	mov	r0, r3
   27f80:	370c      	adds	r7, #12
   27f82:	46bd      	mov	sp, r7
   27f84:	bc80      	pop	{r7}
   27f86:	4770      	bx	lr

00027f88 <z_get_new_prio_with_ceiling>:
{
   27f88:	b580      	push	{r7, lr}
   27f8a:	b082      	sub	sp, #8
   27f8c:	af00      	add	r7, sp, #0
   27f8e:	6078      	str	r0, [r7, #4]
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   27f90:	6878      	ldr	r0, [r7, #4]
   27f92:	f7ff ffe9 	bl	27f68 <z_is_under_prio_ceiling>
   27f96:	4603      	mov	r3, r0
   27f98:	2b00      	cmp	r3, #0
   27f9a:	d001      	beq.n	27fa0 <z_get_new_prio_with_ceiling+0x18>
   27f9c:	687b      	ldr	r3, [r7, #4]
   27f9e:	e001      	b.n	27fa4 <z_get_new_prio_with_ceiling+0x1c>
   27fa0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
}
   27fa4:	4618      	mov	r0, r3
   27fa6:	3708      	adds	r7, #8
   27fa8:	46bd      	mov	sp, r7
   27faa:	bd80      	pop	{r7, pc}

00027fac <z_is_prio1_higher_than_prio2>:
{
   27fac:	b480      	push	{r7}
   27fae:	b083      	sub	sp, #12
   27fb0:	af00      	add	r7, sp, #0
   27fb2:	6078      	str	r0, [r7, #4]
   27fb4:	6039      	str	r1, [r7, #0]
	return prio1 < prio2;
   27fb6:	687a      	ldr	r2, [r7, #4]
   27fb8:	683b      	ldr	r3, [r7, #0]
   27fba:	429a      	cmp	r2, r3
   27fbc:	bfb4      	ite	lt
   27fbe:	2301      	movlt	r3, #1
   27fc0:	2300      	movge	r3, #0
   27fc2:	b2db      	uxtb	r3, r3
}
   27fc4:	4618      	mov	r0, r3
   27fc6:	370c      	adds	r7, #12
   27fc8:	46bd      	mov	sp, r7
   27fca:	bc80      	pop	{r7}
   27fcc:	4770      	bx	lr

00027fce <z_is_prio_higher>:
{
   27fce:	b580      	push	{r7, lr}
   27fd0:	b082      	sub	sp, #8
   27fd2:	af00      	add	r7, sp, #0
   27fd4:	6078      	str	r0, [r7, #4]
   27fd6:	6039      	str	r1, [r7, #0]
	return z_is_prio1_higher_than_prio2(prio, test_prio);
   27fd8:	6839      	ldr	r1, [r7, #0]
   27fda:	6878      	ldr	r0, [r7, #4]
   27fdc:	f7ff ffe6 	bl	27fac <z_is_prio1_higher_than_prio2>
   27fe0:	4603      	mov	r3, r0
}
   27fe2:	4618      	mov	r0, r3
   27fe4:	3708      	adds	r7, #8
   27fe6:	46bd      	mov	sp, r7
   27fe8:	bd80      	pop	{r7, pc}

00027fea <z_waitq_init>:
{
   27fea:	b580      	push	{r7, lr}
   27fec:	b082      	sub	sp, #8
   27fee:	af00      	add	r7, sp, #0
   27ff0:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
   27ff2:	687b      	ldr	r3, [r7, #4]
   27ff4:	4618      	mov	r0, r3
   27ff6:	f7ff ff00 	bl	27dfa <sys_dlist_init>
}
   27ffa:	bf00      	nop
   27ffc:	3708      	adds	r7, #8
   27ffe:	46bd      	mov	sp, r7
   28000:	bd80      	pop	{r7, pc}

00028002 <z_waitq_head>:

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
   28002:	b580      	push	{r7, lr}
   28004:	b082      	sub	sp, #8
   28006:	af00      	add	r7, sp, #0
   28008:	6078      	str	r0, [r7, #4]
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2800a:	687b      	ldr	r3, [r7, #4]
   2800c:	4618      	mov	r0, r3
   2800e:	f7ff ff24 	bl	27e5a <sys_dlist_peek_head>
   28012:	4603      	mov	r3, r0
}
   28014:	4618      	mov	r0, r3
   28016:	3708      	adds	r7, #8
   28018:	46bd      	mov	sp, r7
   2801a:	bd80      	pop	{r7, pc}

0002801c <z_impl_k_mutex_init>:
{
   2801c:	b580      	push	{r7, lr}
   2801e:	b082      	sub	sp, #8
   28020:	af00      	add	r7, sp, #0
   28022:	6078      	str	r0, [r7, #4]
	mutex->owner = NULL;
   28024:	687b      	ldr	r3, [r7, #4]
   28026:	2200      	movs	r2, #0
   28028:	609a      	str	r2, [r3, #8]
	mutex->lock_count = 0U;
   2802a:	687b      	ldr	r3, [r7, #4]
   2802c:	2200      	movs	r2, #0
   2802e:	60da      	str	r2, [r3, #12]
	z_waitq_init(&mutex->wait_q);
   28030:	687b      	ldr	r3, [r7, #4]
   28032:	4618      	mov	r0, r3
   28034:	f7ff ffd9 	bl	27fea <z_waitq_init>
	z_object_init(mutex);
   28038:	6878      	ldr	r0, [r7, #4]
   2803a:	f7ff ff27 	bl	27e8c <z_object_init>
	return 0;
   2803e:	2300      	movs	r3, #0
}
   28040:	4618      	mov	r0, r3
   28042:	3708      	adds	r7, #8
   28044:	46bd      	mov	sp, r7
   28046:	bd80      	pop	{r7, pc}

00028048 <new_prio_for_inheritance>:
{
   28048:	b580      	push	{r7, lr}
   2804a:	b084      	sub	sp, #16
   2804c:	af00      	add	r7, sp, #0
   2804e:	6078      	str	r0, [r7, #4]
   28050:	6039      	str	r1, [r7, #0]
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   28052:	6839      	ldr	r1, [r7, #0]
   28054:	6878      	ldr	r0, [r7, #4]
   28056:	f7ff ffba 	bl	27fce <z_is_prio_higher>
   2805a:	4603      	mov	r3, r0
   2805c:	2b00      	cmp	r3, #0
   2805e:	d001      	beq.n	28064 <new_prio_for_inheritance+0x1c>
   28060:	687b      	ldr	r3, [r7, #4]
   28062:	e000      	b.n	28066 <new_prio_for_inheritance+0x1e>
   28064:	683b      	ldr	r3, [r7, #0]
   28066:	60fb      	str	r3, [r7, #12]
	new_prio = z_get_new_prio_with_ceiling(new_prio);
   28068:	68f8      	ldr	r0, [r7, #12]
   2806a:	f7ff ff8d 	bl	27f88 <z_get_new_prio_with_ceiling>
   2806e:	60f8      	str	r0, [r7, #12]
	return new_prio;
   28070:	68fb      	ldr	r3, [r7, #12]
}
   28072:	4618      	mov	r0, r3
   28074:	3710      	adds	r7, #16
   28076:	46bd      	mov	sp, r7
   28078:	bd80      	pop	{r7, pc}

0002807a <sys_dlist_init>:
{
   2807a:	b480      	push	{r7}
   2807c:	b083      	sub	sp, #12
   2807e:	af00      	add	r7, sp, #0
   28080:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   28082:	687b      	ldr	r3, [r7, #4]
   28084:	687a      	ldr	r2, [r7, #4]
   28086:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   28088:	687b      	ldr	r3, [r7, #4]
   2808a:	687a      	ldr	r2, [r7, #4]
   2808c:	605a      	str	r2, [r3, #4]
}
   2808e:	bf00      	nop
   28090:	370c      	adds	r7, #12
   28092:	46bd      	mov	sp, r7
   28094:	bc80      	pop	{r7}
   28096:	4770      	bx	lr

00028098 <z_object_init>:
{
   28098:	b480      	push	{r7}
   2809a:	b083      	sub	sp, #12
   2809c:	af00      	add	r7, sp, #0
   2809e:	6078      	str	r0, [r7, #4]
}
   280a0:	bf00      	nop
   280a2:	370c      	adds	r7, #12
   280a4:	46bd      	mov	sp, r7
   280a6:	bc80      	pop	{r7}
   280a8:	4770      	bx	lr

000280aa <z_waitq_init>:
{
   280aa:	b580      	push	{r7, lr}
   280ac:	b082      	sub	sp, #8
   280ae:	af00      	add	r7, sp, #0
   280b0:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
   280b2:	687b      	ldr	r3, [r7, #4]
   280b4:	4618      	mov	r0, r3
   280b6:	f7ff ffe0 	bl	2807a <sys_dlist_init>
}
   280ba:	bf00      	nop
   280bc:	3708      	adds	r7, #8
   280be:	46bd      	mov	sp, r7
   280c0:	bd80      	pop	{r7, pc}

000280c2 <z_impl_k_sem_init>:
{
   280c2:	b580      	push	{r7, lr}
   280c4:	b084      	sub	sp, #16
   280c6:	af00      	add	r7, sp, #0
   280c8:	60f8      	str	r0, [r7, #12]
   280ca:	60b9      	str	r1, [r7, #8]
   280cc:	607a      	str	r2, [r7, #4]
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   280ce:	687b      	ldr	r3, [r7, #4]
   280d0:	2b00      	cmp	r3, #0
   280d2:	d003      	beq.n	280dc <z_impl_k_sem_init+0x1a>
   280d4:	68ba      	ldr	r2, [r7, #8]
   280d6:	687b      	ldr	r3, [r7, #4]
   280d8:	429a      	cmp	r2, r3
   280da:	d902      	bls.n	280e2 <z_impl_k_sem_init+0x20>
		return -EINVAL;
   280dc:	f06f 0315 	mvn.w	r3, #21
   280e0:	e00d      	b.n	280fe <z_impl_k_sem_init+0x3c>
	sem->count = initial_count;
   280e2:	68fb      	ldr	r3, [r7, #12]
   280e4:	68ba      	ldr	r2, [r7, #8]
   280e6:	609a      	str	r2, [r3, #8]
	sem->limit = limit;
   280e8:	68fb      	ldr	r3, [r7, #12]
   280ea:	687a      	ldr	r2, [r7, #4]
   280ec:	60da      	str	r2, [r3, #12]
	z_waitq_init(&sem->wait_q);
   280ee:	68fb      	ldr	r3, [r7, #12]
   280f0:	4618      	mov	r0, r3
   280f2:	f7ff ffda 	bl	280aa <z_waitq_init>
	z_object_init(sem);
   280f6:	68f8      	ldr	r0, [r7, #12]
   280f8:	f7ff ffce 	bl	28098 <z_object_init>
	return 0;
   280fc:	2300      	movs	r3, #0
}
   280fe:	4618      	mov	r0, r3
   28100:	3710      	adds	r7, #16
   28102:	46bd      	mov	sp, r7
   28104:	bd80      	pop	{r7, pc}

00028106 <handle_poll_events>:
{
   28106:	b480      	push	{r7}
   28108:	b083      	sub	sp, #12
   2810a:	af00      	add	r7, sp, #0
   2810c:	6078      	str	r0, [r7, #4]
}
   2810e:	bf00      	nop
   28110:	370c      	adds	r7, #12
   28112:	46bd      	mov	sp, r7
   28114:	bc80      	pop	{r7}
   28116:	4770      	bx	lr

00028118 <sys_dlist_init>:
{
   28118:	b480      	push	{r7}
   2811a:	b083      	sub	sp, #12
   2811c:	af00      	add	r7, sp, #0
   2811e:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   28120:	687b      	ldr	r3, [r7, #4]
   28122:	687a      	ldr	r2, [r7, #4]
   28124:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   28126:	687b      	ldr	r3, [r7, #4]
   28128:	687a      	ldr	r2, [r7, #4]
   2812a:	605a      	str	r2, [r3, #4]
}
   2812c:	bf00      	nop
   2812e:	370c      	adds	r7, #12
   28130:	46bd      	mov	sp, r7
   28132:	bc80      	pop	{r7}
   28134:	4770      	bx	lr

00028136 <sys_dnode_init>:
{
   28136:	b480      	push	{r7}
   28138:	b083      	sub	sp, #12
   2813a:	af00      	add	r7, sp, #0
   2813c:	6078      	str	r0, [r7, #4]
	node->next = NULL;
   2813e:	687b      	ldr	r3, [r7, #4]
   28140:	2200      	movs	r2, #0
   28142:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
   28144:	687b      	ldr	r3, [r7, #4]
   28146:	2200      	movs	r2, #0
   28148:	605a      	str	r2, [r3, #4]
}
   2814a:	bf00      	nop
   2814c:	370c      	adds	r7, #12
   2814e:	46bd      	mov	sp, r7
   28150:	bc80      	pop	{r7}
   28152:	4770      	bx	lr

00028154 <sys_dnode_is_linked>:
{
   28154:	b480      	push	{r7}
   28156:	b083      	sub	sp, #12
   28158:	af00      	add	r7, sp, #0
   2815a:	6078      	str	r0, [r7, #4]
	return node->next != NULL;
   2815c:	687b      	ldr	r3, [r7, #4]
   2815e:	681b      	ldr	r3, [r3, #0]
   28160:	2b00      	cmp	r3, #0
   28162:	bf14      	ite	ne
   28164:	2301      	movne	r3, #1
   28166:	2300      	moveq	r3, #0
   28168:	b2db      	uxtb	r3, r3
}
   2816a:	4618      	mov	r0, r3
   2816c:	370c      	adds	r7, #12
   2816e:	46bd      	mov	sp, r7
   28170:	bc80      	pop	{r7}
   28172:	4770      	bx	lr

00028174 <sys_dlist_is_empty>:
{
   28174:	b480      	push	{r7}
   28176:	b083      	sub	sp, #12
   28178:	af00      	add	r7, sp, #0
   2817a:	6078      	str	r0, [r7, #4]
	return list->head == list;
   2817c:	687b      	ldr	r3, [r7, #4]
   2817e:	681b      	ldr	r3, [r3, #0]
   28180:	687a      	ldr	r2, [r7, #4]
   28182:	429a      	cmp	r2, r3
   28184:	bf0c      	ite	eq
   28186:	2301      	moveq	r3, #1
   28188:	2300      	movne	r3, #0
   2818a:	b2db      	uxtb	r3, r3
}
   2818c:	4618      	mov	r0, r3
   2818e:	370c      	adds	r7, #12
   28190:	46bd      	mov	sp, r7
   28192:	bc80      	pop	{r7}
   28194:	4770      	bx	lr

00028196 <sys_dlist_peek_head>:
{
   28196:	b580      	push	{r7, lr}
   28198:	b082      	sub	sp, #8
   2819a:	af00      	add	r7, sp, #0
   2819c:	6078      	str	r0, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2819e:	6878      	ldr	r0, [r7, #4]
   281a0:	f7ff ffe8 	bl	28174 <sys_dlist_is_empty>
   281a4:	4603      	mov	r3, r0
   281a6:	2b00      	cmp	r3, #0
   281a8:	d102      	bne.n	281b0 <sys_dlist_peek_head+0x1a>
   281aa:	687b      	ldr	r3, [r7, #4]
   281ac:	681b      	ldr	r3, [r3, #0]
   281ae:	e000      	b.n	281b2 <sys_dlist_peek_head+0x1c>
   281b0:	2300      	movs	r3, #0
}
   281b2:	4618      	mov	r0, r3
   281b4:	3708      	adds	r7, #8
   281b6:	46bd      	mov	sp, r7
   281b8:	bd80      	pop	{r7, pc}

000281ba <sys_dlist_peek_next_no_check>:
 * @return a pointer to the next element from a node, NULL if node is the tail
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
   281ba:	b480      	push	{r7}
   281bc:	b083      	sub	sp, #12
   281be:	af00      	add	r7, sp, #0
   281c0:	6078      	str	r0, [r7, #4]
   281c2:	6039      	str	r1, [r7, #0]
	return (node == list->tail) ? NULL : node->next;
   281c4:	687b      	ldr	r3, [r7, #4]
   281c6:	685b      	ldr	r3, [r3, #4]
   281c8:	683a      	ldr	r2, [r7, #0]
   281ca:	429a      	cmp	r2, r3
   281cc:	d002      	beq.n	281d4 <sys_dlist_peek_next_no_check+0x1a>
   281ce:	683b      	ldr	r3, [r7, #0]
   281d0:	681b      	ldr	r3, [r3, #0]
   281d2:	e000      	b.n	281d6 <sys_dlist_peek_next_no_check+0x1c>
   281d4:	2300      	movs	r3, #0
}
   281d6:	4618      	mov	r0, r3
   281d8:	370c      	adds	r7, #12
   281da:	46bd      	mov	sp, r7
   281dc:	bc80      	pop	{r7}
   281de:	4770      	bx	lr

000281e0 <sys_dlist_peek_next>:
 * or NULL (when node comes from reading the head of an empty list).
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
   281e0:	b580      	push	{r7, lr}
   281e2:	b082      	sub	sp, #8
   281e4:	af00      	add	r7, sp, #0
   281e6:	6078      	str	r0, [r7, #4]
   281e8:	6039      	str	r1, [r7, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   281ea:	683b      	ldr	r3, [r7, #0]
   281ec:	2b00      	cmp	r3, #0
   281ee:	d005      	beq.n	281fc <sys_dlist_peek_next+0x1c>
   281f0:	6839      	ldr	r1, [r7, #0]
   281f2:	6878      	ldr	r0, [r7, #4]
   281f4:	f7ff ffe1 	bl	281ba <sys_dlist_peek_next_no_check>
   281f8:	4603      	mov	r3, r0
   281fa:	e000      	b.n	281fe <sys_dlist_peek_next+0x1e>
   281fc:	2300      	movs	r3, #0
}
   281fe:	4618      	mov	r0, r3
   28200:	3708      	adds	r7, #8
   28202:	46bd      	mov	sp, r7
   28204:	bd80      	pop	{r7, pc}

00028206 <sys_dlist_append>:
 *
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
   28206:	b480      	push	{r7}
   28208:	b085      	sub	sp, #20
   2820a:	af00      	add	r7, sp, #0
   2820c:	6078      	str	r0, [r7, #4]
   2820e:	6039      	str	r1, [r7, #0]
	sys_dnode_t *const tail = list->tail;
   28210:	687b      	ldr	r3, [r7, #4]
   28212:	685b      	ldr	r3, [r3, #4]
   28214:	60fb      	str	r3, [r7, #12]

	node->next = list;
   28216:	683b      	ldr	r3, [r7, #0]
   28218:	687a      	ldr	r2, [r7, #4]
   2821a:	601a      	str	r2, [r3, #0]
	node->prev = tail;
   2821c:	683b      	ldr	r3, [r7, #0]
   2821e:	68fa      	ldr	r2, [r7, #12]
   28220:	605a      	str	r2, [r3, #4]

	tail->next = node;
   28222:	68fb      	ldr	r3, [r7, #12]
   28224:	683a      	ldr	r2, [r7, #0]
   28226:	601a      	str	r2, [r3, #0]
	list->tail = node;
   28228:	687b      	ldr	r3, [r7, #4]
   2822a:	683a      	ldr	r2, [r7, #0]
   2822c:	605a      	str	r2, [r3, #4]
}
   2822e:	bf00      	nop
   28230:	3714      	adds	r7, #20
   28232:	46bd      	mov	sp, r7
   28234:	bc80      	pop	{r7}
   28236:	4770      	bx	lr

00028238 <sys_dlist_insert>:
 *
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
   28238:	b480      	push	{r7}
   2823a:	b085      	sub	sp, #20
   2823c:	af00      	add	r7, sp, #0
   2823e:	6078      	str	r0, [r7, #4]
   28240:	6039      	str	r1, [r7, #0]
	sys_dnode_t *const prev = successor->prev;
   28242:	687b      	ldr	r3, [r7, #4]
   28244:	685b      	ldr	r3, [r3, #4]
   28246:	60fb      	str	r3, [r7, #12]

	node->prev = prev;
   28248:	683b      	ldr	r3, [r7, #0]
   2824a:	68fa      	ldr	r2, [r7, #12]
   2824c:	605a      	str	r2, [r3, #4]
	node->next = successor;
   2824e:	683b      	ldr	r3, [r7, #0]
   28250:	687a      	ldr	r2, [r7, #4]
   28252:	601a      	str	r2, [r3, #0]
	prev->next = node;
   28254:	68fb      	ldr	r3, [r7, #12]
   28256:	683a      	ldr	r2, [r7, #0]
   28258:	601a      	str	r2, [r3, #0]
	successor->prev = node;
   2825a:	687b      	ldr	r3, [r7, #4]
   2825c:	683a      	ldr	r2, [r7, #0]
   2825e:	605a      	str	r2, [r3, #4]
}
   28260:	bf00      	nop
   28262:	3714      	adds	r7, #20
   28264:	46bd      	mov	sp, r7
   28266:	bc80      	pop	{r7}
   28268:	4770      	bx	lr

0002826a <sys_dlist_remove>:
 *
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
   2826a:	b580      	push	{r7, lr}
   2826c:	b084      	sub	sp, #16
   2826e:	af00      	add	r7, sp, #0
   28270:	6078      	str	r0, [r7, #4]
	sys_dnode_t *const prev = node->prev;
   28272:	687b      	ldr	r3, [r7, #4]
   28274:	685b      	ldr	r3, [r3, #4]
   28276:	60fb      	str	r3, [r7, #12]
	sys_dnode_t *const next = node->next;
   28278:	687b      	ldr	r3, [r7, #4]
   2827a:	681b      	ldr	r3, [r3, #0]
   2827c:	60bb      	str	r3, [r7, #8]

	prev->next = next;
   2827e:	68fb      	ldr	r3, [r7, #12]
   28280:	68ba      	ldr	r2, [r7, #8]
   28282:	601a      	str	r2, [r3, #0]
	next->prev = prev;
   28284:	68bb      	ldr	r3, [r7, #8]
   28286:	68fa      	ldr	r2, [r7, #12]
   28288:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
   2828a:	6878      	ldr	r0, [r7, #4]
   2828c:	f7ff ff53 	bl	28136 <sys_dnode_init>
}
   28290:	bf00      	nop
   28292:	3710      	adds	r7, #16
   28294:	46bd      	mov	sp, r7
   28296:	bd80      	pop	{r7, pc}

00028298 <k_is_user_context>:
{
   28298:	b480      	push	{r7}
   2829a:	af00      	add	r7, sp, #0
	return false;
   2829c:	2300      	movs	r3, #0
}
   2829e:	4618      	mov	r0, r3
   282a0:	46bd      	mov	sp, r7
   282a2:	bc80      	pop	{r7}
   282a4:	4770      	bx	lr

000282a6 <k_ms_to_ticks_ceil32>:
{
   282a6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   282aa:	b08c      	sub	sp, #48	; 0x30
   282ac:	af00      	add	r7, sp, #0
   282ae:	6078      	str	r0, [r7, #4]
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, true, false);
   282b0:	687b      	ldr	r3, [r7, #4]
   282b2:	461a      	mov	r2, r3
   282b4:	f04f 0300 	mov.w	r3, #0
   282b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   282bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   282c0:	627b      	str	r3, [r7, #36]	; 0x24
   282c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   282c6:	623b      	str	r3, [r7, #32]
   282c8:	2301      	movs	r3, #1
   282ca:	77fb      	strb	r3, [r7, #31]
   282cc:	2301      	movs	r3, #1
   282ce:	77bb      	strb	r3, [r7, #30]
   282d0:	2301      	movs	r3, #1
   282d2:	777b      	strb	r3, [r7, #29]
   282d4:	2300      	movs	r3, #0
   282d6:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   282d8:	7ffb      	ldrb	r3, [r7, #31]
   282da:	2b00      	cmp	r3, #0
   282dc:	d00f      	beq.n	282fe <k_ms_to_ticks_ceil32+0x58>
	bool mul_ratio = const_hz &&
   282de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   282e0:	6a3b      	ldr	r3, [r7, #32]
   282e2:	429a      	cmp	r2, r3
   282e4:	d20b      	bcs.n	282fe <k_ms_to_ticks_ceil32+0x58>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   282e6:	6a3b      	ldr	r3, [r7, #32]
   282e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   282ea:	fbb3 f2f2 	udiv	r2, r3, r2
   282ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
   282f0:	fb01 f202 	mul.w	r2, r1, r2
   282f4:	1a9b      	subs	r3, r3, r2
   282f6:	2b00      	cmp	r3, #0
   282f8:	d101      	bne.n	282fe <k_ms_to_ticks_ceil32+0x58>
   282fa:	2301      	movs	r3, #1
   282fc:	e000      	b.n	28300 <k_ms_to_ticks_ceil32+0x5a>
   282fe:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   28300:	76fb      	strb	r3, [r7, #27]
   28302:	7efb      	ldrb	r3, [r7, #27]
   28304:	f003 0301 	and.w	r3, r3, #1
   28308:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   2830a:	7ffb      	ldrb	r3, [r7, #31]
   2830c:	2b00      	cmp	r3, #0
   2830e:	d00f      	beq.n	28330 <k_ms_to_ticks_ceil32+0x8a>
	bool div_ratio = const_hz &&
   28310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28312:	6a3b      	ldr	r3, [r7, #32]
   28314:	429a      	cmp	r2, r3
   28316:	d90b      	bls.n	28330 <k_ms_to_ticks_ceil32+0x8a>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   28318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2831a:	6a3a      	ldr	r2, [r7, #32]
   2831c:	fbb3 f2f2 	udiv	r2, r3, r2
   28320:	6a39      	ldr	r1, [r7, #32]
   28322:	fb01 f202 	mul.w	r2, r1, r2
   28326:	1a9b      	subs	r3, r3, r2
   28328:	2b00      	cmp	r3, #0
   2832a:	d101      	bne.n	28330 <k_ms_to_ticks_ceil32+0x8a>
   2832c:	2301      	movs	r3, #1
   2832e:	e000      	b.n	28332 <k_ms_to_ticks_ceil32+0x8c>
   28330:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   28332:	76bb      	strb	r3, [r7, #26]
   28334:	7ebb      	ldrb	r3, [r7, #26]
   28336:	f003 0301 	and.w	r3, r3, #1
   2833a:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   2833c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2833e:	6a3b      	ldr	r3, [r7, #32]
   28340:	429a      	cmp	r2, r3
   28342:	d10a      	bne.n	2835a <k_ms_to_ticks_ceil32+0xb4>
		return result32 ? ((uint32_t)t) : t;
   28344:	7fbb      	ldrb	r3, [r7, #30]
   28346:	2b00      	cmp	r3, #0
   28348:	d004      	beq.n	28354 <k_ms_to_ticks_ceil32+0xae>
   2834a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2834c:	461a      	mov	r2, r3
   2834e:	f04f 0300 	mov.w	r3, #0
   28352:	e0c7      	b.n	284e4 <k_ms_to_ticks_ceil32+0x23e>
   28354:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   28358:	e0c4      	b.n	284e4 <k_ms_to_ticks_ceil32+0x23e>
	uint64_t off = 0;
   2835a:	f04f 0200 	mov.w	r2, #0
   2835e:	f04f 0300 	mov.w	r3, #0
   28362:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   28366:	7efb      	ldrb	r3, [r7, #27]
   28368:	f083 0301 	eor.w	r3, r3, #1
   2836c:	b2db      	uxtb	r3, r3
   2836e:	2b00      	cmp	r3, #0
   28370:	d01d      	beq.n	283ae <k_ms_to_ticks_ceil32+0x108>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   28372:	7ebb      	ldrb	r3, [r7, #26]
   28374:	2b00      	cmp	r3, #0
   28376:	d004      	beq.n	28382 <k_ms_to_ticks_ceil32+0xdc>
   28378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2837a:	6a3b      	ldr	r3, [r7, #32]
   2837c:	fbb2 f3f3 	udiv	r3, r2, r3
   28380:	e000      	b.n	28384 <k_ms_to_ticks_ceil32+0xde>
   28382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28384:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   28386:	7f7b      	ldrb	r3, [r7, #29]
   28388:	2b00      	cmp	r3, #0
   2838a:	d006      	beq.n	2839a <k_ms_to_ticks_ceil32+0xf4>
			off = rdivisor - 1U;
   2838c:	68fb      	ldr	r3, [r7, #12]
   2838e:	3b01      	subs	r3, #1
   28390:	461a      	mov	r2, r3
   28392:	f04f 0300 	mov.w	r3, #0
   28396:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   2839a:	7f3b      	ldrb	r3, [r7, #28]
   2839c:	2b00      	cmp	r3, #0
   2839e:	d006      	beq.n	283ae <k_ms_to_ticks_ceil32+0x108>
			off = rdivisor / 2U;
   283a0:	68fb      	ldr	r3, [r7, #12]
   283a2:	085b      	lsrs	r3, r3, #1
   283a4:	461a      	mov	r2, r3
   283a6:	f04f 0300 	mov.w	r3, #0
   283aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   283ae:	7ebb      	ldrb	r3, [r7, #26]
   283b0:	2b00      	cmp	r3, #0
   283b2:	d02a      	beq.n	2840a <k_ms_to_ticks_ceil32+0x164>
		t += off;
   283b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   283b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   283bc:	1884      	adds	r4, r0, r2
   283be:	eb41 0503 	adc.w	r5, r1, r3
   283c2:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   283c6:	7fbb      	ldrb	r3, [r7, #30]
   283c8:	2b00      	cmp	r3, #0
   283ca:	d010      	beq.n	283ee <k_ms_to_ticks_ceil32+0x148>
   283cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   283d0:	2b01      	cmp	r3, #1
   283d2:	bf08      	it	eq
   283d4:	2a00      	cmpeq	r2, #0
   283d6:	d20a      	bcs.n	283ee <k_ms_to_ticks_ceil32+0x148>
			return ((uint32_t)t) / (from_hz / to_hz);
   283d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   283da:	6a79      	ldr	r1, [r7, #36]	; 0x24
   283dc:	6a3b      	ldr	r3, [r7, #32]
   283de:	fbb1 f3f3 	udiv	r3, r1, r3
   283e2:	fbb2 f3f3 	udiv	r3, r2, r3
   283e6:	461a      	mov	r2, r3
   283e8:	f04f 0300 	mov.w	r3, #0
   283ec:	e07a      	b.n	284e4 <k_ms_to_ticks_ceil32+0x23e>
			return t / ((uint64_t)from_hz / to_hz);
   283ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   283f0:	6a3b      	ldr	r3, [r7, #32]
   283f2:	fbb2 f3f3 	udiv	r3, r2, r3
   283f6:	461a      	mov	r2, r3
   283f8:	f04f 0300 	mov.w	r3, #0
   283fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   28400:	f7e7 ff1c 	bl	1023c <__aeabi_uldivmod>
   28404:	4602      	mov	r2, r0
   28406:	460b      	mov	r3, r1
   28408:	e06c      	b.n	284e4 <k_ms_to_ticks_ceil32+0x23e>
	} else if (mul_ratio) {
   2840a:	7efb      	ldrb	r3, [r7, #27]
   2840c:	2b00      	cmp	r3, #0
   2840e:	d021      	beq.n	28454 <k_ms_to_ticks_ceil32+0x1ae>
		if (result32) {
   28410:	7fbb      	ldrb	r3, [r7, #30]
   28412:	2b00      	cmp	r3, #0
   28414:	d00a      	beq.n	2842c <k_ms_to_ticks_ceil32+0x186>
			return ((uint32_t)t) * (to_hz / from_hz);
   28416:	6abb      	ldr	r3, [r7, #40]	; 0x28
   28418:	6a39      	ldr	r1, [r7, #32]
   2841a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2841c:	fbb1 f2f2 	udiv	r2, r1, r2
   28420:	fb02 f303 	mul.w	r3, r2, r3
   28424:	461a      	mov	r2, r3
   28426:	f04f 0300 	mov.w	r3, #0
   2842a:	e05b      	b.n	284e4 <k_ms_to_ticks_ceil32+0x23e>
			return t * ((uint64_t)to_hz / from_hz);
   2842c:	6a3a      	ldr	r2, [r7, #32]
   2842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28430:	fbb2 f3f3 	udiv	r3, r2, r3
   28434:	461a      	mov	r2, r3
   28436:	f04f 0300 	mov.w	r3, #0
   2843a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2843c:	fb03 f001 	mul.w	r0, r3, r1
   28440:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   28442:	fb02 f101 	mul.w	r1, r2, r1
   28446:	4401      	add	r1, r0
   28448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   2844a:	fba0 2302 	umull	r2, r3, r0, r2
   2844e:	4419      	add	r1, r3
   28450:	460b      	mov	r3, r1
   28452:	e047      	b.n	284e4 <k_ms_to_ticks_ceil32+0x23e>
		if (result32) {
   28454:	7fbb      	ldrb	r3, [r7, #30]
   28456:	2b00      	cmp	r3, #0
   28458:	d024      	beq.n	284a4 <k_ms_to_ticks_ceil32+0x1fe>
			return (uint32_t)((t * to_hz + off) / from_hz);
   2845a:	6a3b      	ldr	r3, [r7, #32]
   2845c:	461a      	mov	r2, r3
   2845e:	f04f 0300 	mov.w	r3, #0
   28462:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   28464:	fb03 f001 	mul.w	r0, r3, r1
   28468:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   2846a:	fb02 f101 	mul.w	r1, r2, r1
   2846e:	4401      	add	r1, r0
   28470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   28472:	fba0 2302 	umull	r2, r3, r0, r2
   28476:	4419      	add	r1, r3
   28478:	460b      	mov	r3, r1
   2847a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   2847e:	eb12 0a00 	adds.w	sl, r2, r0
   28482:	eb43 0b01 	adc.w	fp, r3, r1
   28486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28488:	461a      	mov	r2, r3
   2848a:	f04f 0300 	mov.w	r3, #0
   2848e:	4650      	mov	r0, sl
   28490:	4659      	mov	r1, fp
   28492:	f7e7 fed3 	bl	1023c <__aeabi_uldivmod>
   28496:	4602      	mov	r2, r0
   28498:	460b      	mov	r3, r1
   2849a:	4613      	mov	r3, r2
   2849c:	461a      	mov	r2, r3
   2849e:	f04f 0300 	mov.w	r3, #0
   284a2:	e01f      	b.n	284e4 <k_ms_to_ticks_ceil32+0x23e>
			return (t * to_hz + off) / from_hz;
   284a4:	6a3b      	ldr	r3, [r7, #32]
   284a6:	461a      	mov	r2, r3
   284a8:	f04f 0300 	mov.w	r3, #0
   284ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   284ae:	fb03 f001 	mul.w	r0, r3, r1
   284b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   284b4:	fb02 f101 	mul.w	r1, r2, r1
   284b8:	4401      	add	r1, r0
   284ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   284bc:	fba0 2302 	umull	r2, r3, r0, r2
   284c0:	4419      	add	r1, r3
   284c2:	460b      	mov	r3, r1
   284c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   284c8:	eb12 0800 	adds.w	r8, r2, r0
   284cc:	eb43 0901 	adc.w	r9, r3, r1
   284d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   284d2:	461a      	mov	r2, r3
   284d4:	f04f 0300 	mov.w	r3, #0
   284d8:	4640      	mov	r0, r8
   284da:	4649      	mov	r1, r9
   284dc:	f7e7 feae 	bl	1023c <__aeabi_uldivmod>
   284e0:	4602      	mov	r2, r0
   284e2:	460b      	mov	r3, r1
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, true, false);
   284e4:	4613      	mov	r3, r2
}
   284e6:	4618      	mov	r0, r3
   284e8:	3730      	adds	r7, #48	; 0x30
   284ea:	46bd      	mov	sp, r7
   284ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

000284f0 <k_ticks_to_ms_floor64>:
{
   284f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   284f4:	b08c      	sub	sp, #48	; 0x30
   284f6:	af00      	add	r7, sp, #0
   284f8:	e9c7 0100 	strd	r0, r1, [r7]
   284fc:	e9d7 2300 	ldrd	r2, r3, [r7]
   28500:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   28504:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   28508:	627b      	str	r3, [r7, #36]	; 0x24
   2850a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2850e:	623b      	str	r3, [r7, #32]
   28510:	2301      	movs	r3, #1
   28512:	77fb      	strb	r3, [r7, #31]
   28514:	2300      	movs	r3, #0
   28516:	77bb      	strb	r3, [r7, #30]
   28518:	2300      	movs	r3, #0
   2851a:	777b      	strb	r3, [r7, #29]
   2851c:	2300      	movs	r3, #0
   2851e:	773b      	strb	r3, [r7, #28]
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   28520:	7ffb      	ldrb	r3, [r7, #31]
   28522:	2b00      	cmp	r3, #0
   28524:	d00f      	beq.n	28546 <k_ticks_to_ms_floor64+0x56>
	bool mul_ratio = const_hz &&
   28526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28528:	6a3b      	ldr	r3, [r7, #32]
   2852a:	429a      	cmp	r2, r3
   2852c:	d20b      	bcs.n	28546 <k_ticks_to_ms_floor64+0x56>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
   2852e:	6a3b      	ldr	r3, [r7, #32]
   28530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28532:	fbb3 f2f2 	udiv	r2, r3, r2
   28536:	6a79      	ldr	r1, [r7, #36]	; 0x24
   28538:	fb01 f202 	mul.w	r2, r1, r2
   2853c:	1a9b      	subs	r3, r3, r2
   2853e:	2b00      	cmp	r3, #0
   28540:	d101      	bne.n	28546 <k_ticks_to_ms_floor64+0x56>
   28542:	2301      	movs	r3, #1
   28544:	e000      	b.n	28548 <k_ticks_to_ms_floor64+0x58>
   28546:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
   28548:	76fb      	strb	r3, [r7, #27]
   2854a:	7efb      	ldrb	r3, [r7, #27]
   2854c:	f003 0301 	and.w	r3, r3, #1
   28550:	76fb      	strb	r3, [r7, #27]
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   28552:	7ffb      	ldrb	r3, [r7, #31]
   28554:	2b00      	cmp	r3, #0
   28556:	d00f      	beq.n	28578 <k_ticks_to_ms_floor64+0x88>
	bool div_ratio = const_hz &&
   28558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2855a:	6a3b      	ldr	r3, [r7, #32]
   2855c:	429a      	cmp	r2, r3
   2855e:	d90b      	bls.n	28578 <k_ticks_to_ms_floor64+0x88>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
   28560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28562:	6a3a      	ldr	r2, [r7, #32]
   28564:	fbb3 f2f2 	udiv	r2, r3, r2
   28568:	6a39      	ldr	r1, [r7, #32]
   2856a:	fb01 f202 	mul.w	r2, r1, r2
   2856e:	1a9b      	subs	r3, r3, r2
   28570:	2b00      	cmp	r3, #0
   28572:	d101      	bne.n	28578 <k_ticks_to_ms_floor64+0x88>
   28574:	2301      	movs	r3, #1
   28576:	e000      	b.n	2857a <k_ticks_to_ms_floor64+0x8a>
   28578:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
   2857a:	76bb      	strb	r3, [r7, #26]
   2857c:	7ebb      	ldrb	r3, [r7, #26]
   2857e:	f003 0301 	and.w	r3, r3, #1
   28582:	76bb      	strb	r3, [r7, #26]
	if (from_hz == to_hz) {
   28584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28586:	6a3b      	ldr	r3, [r7, #32]
   28588:	429a      	cmp	r2, r3
   2858a:	d10a      	bne.n	285a2 <k_ticks_to_ms_floor64+0xb2>
		return result32 ? ((uint32_t)t) : t;
   2858c:	7fbb      	ldrb	r3, [r7, #30]
   2858e:	2b00      	cmp	r3, #0
   28590:	d004      	beq.n	2859c <k_ticks_to_ms_floor64+0xac>
   28592:	6abb      	ldr	r3, [r7, #40]	; 0x28
   28594:	461a      	mov	r2, r3
   28596:	f04f 0300 	mov.w	r3, #0
   2859a:	e0c7      	b.n	2872c <k_ticks_to_ms_floor64+0x23c>
   2859c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   285a0:	e0c4      	b.n	2872c <k_ticks_to_ms_floor64+0x23c>
	uint64_t off = 0;
   285a2:	f04f 0200 	mov.w	r2, #0
   285a6:	f04f 0300 	mov.w	r3, #0
   285aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (!mul_ratio) {
   285ae:	7efb      	ldrb	r3, [r7, #27]
   285b0:	f083 0301 	eor.w	r3, r3, #1
   285b4:	b2db      	uxtb	r3, r3
   285b6:	2b00      	cmp	r3, #0
   285b8:	d01d      	beq.n	285f6 <k_ticks_to_ms_floor64+0x106>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
   285ba:	7ebb      	ldrb	r3, [r7, #26]
   285bc:	2b00      	cmp	r3, #0
   285be:	d004      	beq.n	285ca <k_ticks_to_ms_floor64+0xda>
   285c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   285c2:	6a3b      	ldr	r3, [r7, #32]
   285c4:	fbb2 f3f3 	udiv	r3, r2, r3
   285c8:	e000      	b.n	285cc <k_ticks_to_ms_floor64+0xdc>
   285ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   285cc:	60fb      	str	r3, [r7, #12]
		if (round_up) {
   285ce:	7f7b      	ldrb	r3, [r7, #29]
   285d0:	2b00      	cmp	r3, #0
   285d2:	d006      	beq.n	285e2 <k_ticks_to_ms_floor64+0xf2>
			off = rdivisor - 1U;
   285d4:	68fb      	ldr	r3, [r7, #12]
   285d6:	3b01      	subs	r3, #1
   285d8:	461a      	mov	r2, r3
   285da:	f04f 0300 	mov.w	r3, #0
   285de:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (round_off) {
   285e2:	7f3b      	ldrb	r3, [r7, #28]
   285e4:	2b00      	cmp	r3, #0
   285e6:	d006      	beq.n	285f6 <k_ticks_to_ms_floor64+0x106>
			off = rdivisor / 2U;
   285e8:	68fb      	ldr	r3, [r7, #12]
   285ea:	085b      	lsrs	r3, r3, #1
   285ec:	461a      	mov	r2, r3
   285ee:	f04f 0300 	mov.w	r3, #0
   285f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (div_ratio) {
   285f6:	7ebb      	ldrb	r3, [r7, #26]
   285f8:	2b00      	cmp	r3, #0
   285fa:	d02a      	beq.n	28652 <k_ticks_to_ms_floor64+0x162>
		t += off;
   285fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   28600:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   28604:	1884      	adds	r4, r0, r2
   28606:	eb41 0503 	adc.w	r5, r1, r3
   2860a:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
		if (result32 && (t < BIT64(32))) {
   2860e:	7fbb      	ldrb	r3, [r7, #30]
   28610:	2b00      	cmp	r3, #0
   28612:	d010      	beq.n	28636 <k_ticks_to_ms_floor64+0x146>
   28614:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   28618:	2b01      	cmp	r3, #1
   2861a:	bf08      	it	eq
   2861c:	2a00      	cmpeq	r2, #0
   2861e:	d20a      	bcs.n	28636 <k_ticks_to_ms_floor64+0x146>
			return ((uint32_t)t) / (from_hz / to_hz);
   28620:	6aba      	ldr	r2, [r7, #40]	; 0x28
   28622:	6a79      	ldr	r1, [r7, #36]	; 0x24
   28624:	6a3b      	ldr	r3, [r7, #32]
   28626:	fbb1 f3f3 	udiv	r3, r1, r3
   2862a:	fbb2 f3f3 	udiv	r3, r2, r3
   2862e:	461a      	mov	r2, r3
   28630:	f04f 0300 	mov.w	r3, #0
   28634:	e07a      	b.n	2872c <k_ticks_to_ms_floor64+0x23c>
			return t / ((uint64_t)from_hz / to_hz);
   28636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28638:	6a3b      	ldr	r3, [r7, #32]
   2863a:	fbb2 f3f3 	udiv	r3, r2, r3
   2863e:	461a      	mov	r2, r3
   28640:	f04f 0300 	mov.w	r3, #0
   28644:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   28648:	f7e7 fdf8 	bl	1023c <__aeabi_uldivmod>
   2864c:	4602      	mov	r2, r0
   2864e:	460b      	mov	r3, r1
   28650:	e06c      	b.n	2872c <k_ticks_to_ms_floor64+0x23c>
	} else if (mul_ratio) {
   28652:	7efb      	ldrb	r3, [r7, #27]
   28654:	2b00      	cmp	r3, #0
   28656:	d021      	beq.n	2869c <k_ticks_to_ms_floor64+0x1ac>
		if (result32) {
   28658:	7fbb      	ldrb	r3, [r7, #30]
   2865a:	2b00      	cmp	r3, #0
   2865c:	d00a      	beq.n	28674 <k_ticks_to_ms_floor64+0x184>
			return ((uint32_t)t) * (to_hz / from_hz);
   2865e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   28660:	6a39      	ldr	r1, [r7, #32]
   28662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28664:	fbb1 f2f2 	udiv	r2, r1, r2
   28668:	fb02 f303 	mul.w	r3, r2, r3
   2866c:	461a      	mov	r2, r3
   2866e:	f04f 0300 	mov.w	r3, #0
   28672:	e05b      	b.n	2872c <k_ticks_to_ms_floor64+0x23c>
			return t * ((uint64_t)to_hz / from_hz);
   28674:	6a3a      	ldr	r2, [r7, #32]
   28676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28678:	fbb2 f3f3 	udiv	r3, r2, r3
   2867c:	461a      	mov	r2, r3
   2867e:	f04f 0300 	mov.w	r3, #0
   28682:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   28684:	fb03 f001 	mul.w	r0, r3, r1
   28688:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   2868a:	fb02 f101 	mul.w	r1, r2, r1
   2868e:	4401      	add	r1, r0
   28690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   28692:	fba0 2302 	umull	r2, r3, r0, r2
   28696:	4419      	add	r1, r3
   28698:	460b      	mov	r3, r1
   2869a:	e047      	b.n	2872c <k_ticks_to_ms_floor64+0x23c>
		if (result32) {
   2869c:	7fbb      	ldrb	r3, [r7, #30]
   2869e:	2b00      	cmp	r3, #0
   286a0:	d024      	beq.n	286ec <k_ticks_to_ms_floor64+0x1fc>
			return (uint32_t)((t * to_hz + off) / from_hz);
   286a2:	6a3b      	ldr	r3, [r7, #32]
   286a4:	461a      	mov	r2, r3
   286a6:	f04f 0300 	mov.w	r3, #0
   286aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   286ac:	fb03 f001 	mul.w	r0, r3, r1
   286b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   286b2:	fb02 f101 	mul.w	r1, r2, r1
   286b6:	4401      	add	r1, r0
   286b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   286ba:	fba0 2302 	umull	r2, r3, r0, r2
   286be:	4419      	add	r1, r3
   286c0:	460b      	mov	r3, r1
   286c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   286c6:	eb12 0a00 	adds.w	sl, r2, r0
   286ca:	eb43 0b01 	adc.w	fp, r3, r1
   286ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   286d0:	461a      	mov	r2, r3
   286d2:	f04f 0300 	mov.w	r3, #0
   286d6:	4650      	mov	r0, sl
   286d8:	4659      	mov	r1, fp
   286da:	f7e7 fdaf 	bl	1023c <__aeabi_uldivmod>
   286de:	4602      	mov	r2, r0
   286e0:	460b      	mov	r3, r1
   286e2:	4613      	mov	r3, r2
   286e4:	461a      	mov	r2, r3
   286e6:	f04f 0300 	mov.w	r3, #0
   286ea:	e01f      	b.n	2872c <k_ticks_to_ms_floor64+0x23c>
			return (t * to_hz + off) / from_hz;
   286ec:	6a3b      	ldr	r3, [r7, #32]
   286ee:	461a      	mov	r2, r3
   286f0:	f04f 0300 	mov.w	r3, #0
   286f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   286f6:	fb03 f001 	mul.w	r0, r3, r1
   286fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   286fc:	fb02 f101 	mul.w	r1, r2, r1
   28700:	4401      	add	r1, r0
   28702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   28704:	fba0 2302 	umull	r2, r3, r0, r2
   28708:	4419      	add	r1, r3
   2870a:	460b      	mov	r3, r1
   2870c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   28710:	eb12 0800 	adds.w	r8, r2, r0
   28714:	eb43 0901 	adc.w	r9, r3, r1
   28718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2871a:	461a      	mov	r2, r3
   2871c:	f04f 0300 	mov.w	r3, #0
   28720:	4640      	mov	r0, r8
   28722:	4649      	mov	r1, r9
   28724:	f7e7 fd8a 	bl	1023c <__aeabi_uldivmod>
   28728:	4602      	mov	r2, r0
   2872a:	460b      	mov	r3, r1
}
   2872c:	4610      	mov	r0, r2
   2872e:	4619      	mov	r1, r3
   28730:	3730      	adds	r7, #48	; 0x30
   28732:	46bd      	mov	sp, r7
   28734:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

00028738 <k_yield>:
{
   28738:	b580      	push	{r7, lr}
   2873a:	af00      	add	r7, sp, #0
	z_impl_k_yield();
   2873c:	f7f7 f8e0 	bl	1f900 <z_impl_k_yield>
}
   28740:	bf00      	nop
   28742:	bd80      	pop	{r7, pc}

00028744 <k_thread_suspend>:
{
   28744:	b580      	push	{r7, lr}
   28746:	b082      	sub	sp, #8
   28748:	af00      	add	r7, sp, #0
   2874a:	6078      	str	r0, [r7, #4]
	z_impl_k_thread_suspend(thread);
   2874c:	6878      	ldr	r0, [r7, #4]
   2874e:	f7f6 f917 	bl	1e980 <z_impl_k_thread_suspend>
}
   28752:	bf00      	nop
   28754:	3708      	adds	r7, #8
   28756:	46bd      	mov	sp, r7
   28758:	bd80      	pop	{r7, pc}

0002875a <z_is_inactive_timeout>:
{
   2875a:	b580      	push	{r7, lr}
   2875c:	b082      	sub	sp, #8
   2875e:	af00      	add	r7, sp, #0
   28760:	6078      	str	r0, [r7, #4]
	return !sys_dnode_is_linked(&to->node);
   28762:	687b      	ldr	r3, [r7, #4]
   28764:	4618      	mov	r0, r3
   28766:	f7ff fcf5 	bl	28154 <sys_dnode_is_linked>
   2876a:	4603      	mov	r3, r0
   2876c:	2b00      	cmp	r3, #0
   2876e:	bf14      	ite	ne
   28770:	2301      	movne	r3, #1
   28772:	2300      	moveq	r3, #0
   28774:	b2db      	uxtb	r3, r3
   28776:	f083 0301 	eor.w	r3, r3, #1
   2877a:	b2db      	uxtb	r3, r3
   2877c:	f003 0301 	and.w	r3, r3, #1
   28780:	b2db      	uxtb	r3, r3
}
   28782:	4618      	mov	r0, r3
   28784:	3708      	adds	r7, #8
   28786:	46bd      	mov	sp, r7
   28788:	bd80      	pop	{r7, pc}

0002878a <z_abort_thread_timeout>:

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
   2878a:	b580      	push	{r7, lr}
   2878c:	b082      	sub	sp, #8
   2878e:	af00      	add	r7, sp, #0
   28790:	6078      	str	r0, [r7, #4]
	return z_abort_timeout(&thread->base.timeout);
   28792:	687b      	ldr	r3, [r7, #4]
   28794:	3318      	adds	r3, #24
   28796:	4618      	mov	r0, r3
   28798:	f7f7 fe20 	bl	203dc <z_abort_timeout>
   2879c:	4603      	mov	r3, r0
}
   2879e:	4618      	mov	r0, r3
   287a0:	3708      	adds	r7, #8
   287a2:	46bd      	mov	sp, r7
   287a4:	bd80      	pop	{r7, pc}

000287a6 <z_reschedule_unlocked>:
{
   287a6:	b580      	push	{r7, lr}
   287a8:	b082      	sub	sp, #8
   287aa:	af00      	add	r7, sp, #0
	__asm__ volatile(
   287ac:	f04f 0320 	mov.w	r3, #32
   287b0:	f3ef 8211 	mrs	r2, BASEPRI
   287b4:	f383 8811 	msr	BASEPRI, r3
   287b8:	f3bf 8f6f 	isb	sy
   287bc:	607a      	str	r2, [r7, #4]
   287be:	603b      	str	r3, [r7, #0]
	return key;
   287c0:	687b      	ldr	r3, [r7, #4]
	(void) z_reschedule_irqlock(arch_irq_lock());
   287c2:	4618      	mov	r0, r3
   287c4:	f000 f9b5 	bl	28b32 <z_reschedule_irqlock>
}
   287c8:	bf00      	nop
   287ca:	3708      	adds	r7, #8
   287cc:	46bd      	mov	sp, r7
   287ce:	bd80      	pop	{r7, pc}

000287d0 <z_is_thread_prevented_from_running>:
{
   287d0:	b480      	push	{r7}
   287d2:	b085      	sub	sp, #20
   287d4:	af00      	add	r7, sp, #0
   287d6:	6078      	str	r0, [r7, #4]
	uint8_t state = thread->base.thread_state;
   287d8:	687b      	ldr	r3, [r7, #4]
   287da:	7b5b      	ldrb	r3, [r3, #13]
   287dc:	73fb      	strb	r3, [r7, #15]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
   287de:	7bfb      	ldrb	r3, [r7, #15]
   287e0:	f003 031f 	and.w	r3, r3, #31
			 _THREAD_DUMMY | _THREAD_SUSPENDED)) != 0U;
   287e4:	2b00      	cmp	r3, #0
   287e6:	bf14      	ite	ne
   287e8:	2301      	movne	r3, #1
   287ea:	2300      	moveq	r3, #0
   287ec:	b2db      	uxtb	r3, r3
}
   287ee:	4618      	mov	r0, r3
   287f0:	3714      	adds	r7, #20
   287f2:	46bd      	mov	sp, r7
   287f4:	bc80      	pop	{r7}
   287f6:	4770      	bx	lr

000287f8 <z_is_thread_timeout_active>:
{
   287f8:	b580      	push	{r7, lr}
   287fa:	b082      	sub	sp, #8
   287fc:	af00      	add	r7, sp, #0
   287fe:	6078      	str	r0, [r7, #4]
	return !z_is_inactive_timeout(&thread->base.timeout);
   28800:	687b      	ldr	r3, [r7, #4]
   28802:	3318      	adds	r3, #24
   28804:	4618      	mov	r0, r3
   28806:	f7ff ffa8 	bl	2875a <z_is_inactive_timeout>
   2880a:	4603      	mov	r3, r0
   2880c:	2b00      	cmp	r3, #0
   2880e:	bf14      	ite	ne
   28810:	2301      	movne	r3, #1
   28812:	2300      	moveq	r3, #0
   28814:	b2db      	uxtb	r3, r3
   28816:	f083 0301 	eor.w	r3, r3, #1
   2881a:	b2db      	uxtb	r3, r3
   2881c:	f003 0301 	and.w	r3, r3, #1
   28820:	b2db      	uxtb	r3, r3
}
   28822:	4618      	mov	r0, r3
   28824:	3708      	adds	r7, #8
   28826:	46bd      	mov	sp, r7
   28828:	bd80      	pop	{r7, pc}

0002882a <z_is_thread_ready>:
{
   2882a:	b580      	push	{r7, lr}
   2882c:	b082      	sub	sp, #8
   2882e:	af00      	add	r7, sp, #0
   28830:	6078      	str	r0, [r7, #4]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   28832:	6878      	ldr	r0, [r7, #4]
   28834:	f7ff ffcc 	bl	287d0 <z_is_thread_prevented_from_running>
   28838:	4603      	mov	r3, r0
   2883a:	f083 0301 	eor.w	r3, r3, #1
   2883e:	b2db      	uxtb	r3, r3
   28840:	2b00      	cmp	r3, #0
   28842:	d00a      	beq.n	2885a <z_is_thread_ready+0x30>
		 z_is_thread_timeout_active(thread));
   28844:	6878      	ldr	r0, [r7, #4]
   28846:	f7ff ffd7 	bl	287f8 <z_is_thread_timeout_active>
   2884a:	4603      	mov	r3, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2884c:	f083 0301 	eor.w	r3, r3, #1
   28850:	b2db      	uxtb	r3, r3
   28852:	2b00      	cmp	r3, #0
   28854:	d001      	beq.n	2885a <z_is_thread_ready+0x30>
   28856:	2301      	movs	r3, #1
   28858:	e000      	b.n	2885c <z_is_thread_ready+0x32>
   2885a:	2300      	movs	r3, #0
   2885c:	f003 0301 	and.w	r3, r3, #1
   28860:	b2db      	uxtb	r3, r3
}
   28862:	4618      	mov	r0, r3
   28864:	3708      	adds	r7, #8
   28866:	46bd      	mov	sp, r7
   28868:	bd80      	pop	{r7, pc}

0002886a <z_has_thread_started>:
{
   2886a:	b480      	push	{r7}
   2886c:	b083      	sub	sp, #12
   2886e:	af00      	add	r7, sp, #0
   28870:	6078      	str	r0, [r7, #4]
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   28872:	687b      	ldr	r3, [r7, #4]
   28874:	7b5b      	ldrb	r3, [r3, #13]
   28876:	f003 0304 	and.w	r3, r3, #4
   2887a:	2b00      	cmp	r3, #0
   2887c:	bf0c      	ite	eq
   2887e:	2301      	moveq	r3, #1
   28880:	2300      	movne	r3, #0
   28882:	b2db      	uxtb	r3, r3
}
   28884:	4618      	mov	r0, r3
   28886:	370c      	adds	r7, #12
   28888:	46bd      	mov	sp, r7
   2888a:	bc80      	pop	{r7}
   2888c:	4770      	bx	lr

0002888e <z_is_thread_state_set>:
{
   2888e:	b480      	push	{r7}
   28890:	b083      	sub	sp, #12
   28892:	af00      	add	r7, sp, #0
   28894:	6078      	str	r0, [r7, #4]
   28896:	6039      	str	r1, [r7, #0]
	return (thread->base.thread_state & state) != 0U;
   28898:	687b      	ldr	r3, [r7, #4]
   2889a:	7b5b      	ldrb	r3, [r3, #13]
   2889c:	461a      	mov	r2, r3
   2889e:	683b      	ldr	r3, [r7, #0]
   288a0:	4013      	ands	r3, r2
   288a2:	2b00      	cmp	r3, #0
   288a4:	bf14      	ite	ne
   288a6:	2301      	movne	r3, #1
   288a8:	2300      	moveq	r3, #0
   288aa:	b2db      	uxtb	r3, r3
}
   288ac:	4618      	mov	r0, r3
   288ae:	370c      	adds	r7, #12
   288b0:	46bd      	mov	sp, r7
   288b2:	bc80      	pop	{r7}
   288b4:	4770      	bx	lr

000288b6 <z_is_thread_queued>:
{
   288b6:	b580      	push	{r7, lr}
   288b8:	b082      	sub	sp, #8
   288ba:	af00      	add	r7, sp, #0
   288bc:	6078      	str	r0, [r7, #4]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   288be:	2180      	movs	r1, #128	; 0x80
   288c0:	6878      	ldr	r0, [r7, #4]
   288c2:	f7ff ffe4 	bl	2888e <z_is_thread_state_set>
   288c6:	4603      	mov	r3, r0
}
   288c8:	4618      	mov	r0, r3
   288ca:	3708      	adds	r7, #8
   288cc:	46bd      	mov	sp, r7
   288ce:	bd80      	pop	{r7, pc}

000288d0 <z_mark_thread_as_suspended>:
{
   288d0:	b480      	push	{r7}
   288d2:	b083      	sub	sp, #12
   288d4:	af00      	add	r7, sp, #0
   288d6:	6078      	str	r0, [r7, #4]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   288d8:	687b      	ldr	r3, [r7, #4]
   288da:	7b5b      	ldrb	r3, [r3, #13]
   288dc:	f043 0310 	orr.w	r3, r3, #16
   288e0:	b2da      	uxtb	r2, r3
   288e2:	687b      	ldr	r3, [r7, #4]
   288e4:	735a      	strb	r2, [r3, #13]
}
   288e6:	bf00      	nop
   288e8:	370c      	adds	r7, #12
   288ea:	46bd      	mov	sp, r7
   288ec:	bc80      	pop	{r7}
   288ee:	4770      	bx	lr

000288f0 <z_mark_thread_as_not_suspended>:
{
   288f0:	b480      	push	{r7}
   288f2:	b083      	sub	sp, #12
   288f4:	af00      	add	r7, sp, #0
   288f6:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   288f8:	687b      	ldr	r3, [r7, #4]
   288fa:	7b5b      	ldrb	r3, [r3, #13]
   288fc:	f023 0310 	bic.w	r3, r3, #16
   28900:	b2da      	uxtb	r2, r3
   28902:	687b      	ldr	r3, [r7, #4]
   28904:	735a      	strb	r2, [r3, #13]
}
   28906:	bf00      	nop
   28908:	370c      	adds	r7, #12
   2890a:	46bd      	mov	sp, r7
   2890c:	bc80      	pop	{r7}
   2890e:	4770      	bx	lr

00028910 <z_mark_thread_as_started>:
{
   28910:	b480      	push	{r7}
   28912:	b083      	sub	sp, #12
   28914:	af00      	add	r7, sp, #0
   28916:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28918:	687b      	ldr	r3, [r7, #4]
   2891a:	7b5b      	ldrb	r3, [r3, #13]
   2891c:	f023 0304 	bic.w	r3, r3, #4
   28920:	b2da      	uxtb	r2, r3
   28922:	687b      	ldr	r3, [r7, #4]
   28924:	735a      	strb	r2, [r3, #13]
}
   28926:	bf00      	nop
   28928:	370c      	adds	r7, #12
   2892a:	46bd      	mov	sp, r7
   2892c:	bc80      	pop	{r7}
   2892e:	4770      	bx	lr

00028930 <z_mark_thread_as_pending>:
{
   28930:	b480      	push	{r7}
   28932:	b083      	sub	sp, #12
   28934:	af00      	add	r7, sp, #0
   28936:	6078      	str	r0, [r7, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   28938:	687b      	ldr	r3, [r7, #4]
   2893a:	7b5b      	ldrb	r3, [r3, #13]
   2893c:	f043 0302 	orr.w	r3, r3, #2
   28940:	b2da      	uxtb	r2, r3
   28942:	687b      	ldr	r3, [r7, #4]
   28944:	735a      	strb	r2, [r3, #13]
}
   28946:	bf00      	nop
   28948:	370c      	adds	r7, #12
   2894a:	46bd      	mov	sp, r7
   2894c:	bc80      	pop	{r7}
   2894e:	4770      	bx	lr

00028950 <z_mark_thread_as_not_pending>:
{
   28950:	b480      	push	{r7}
   28952:	b083      	sub	sp, #12
   28954:	af00      	add	r7, sp, #0
   28956:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28958:	687b      	ldr	r3, [r7, #4]
   2895a:	7b5b      	ldrb	r3, [r3, #13]
   2895c:	f023 0302 	bic.w	r3, r3, #2
   28960:	b2da      	uxtb	r2, r3
   28962:	687b      	ldr	r3, [r7, #4]
   28964:	735a      	strb	r2, [r3, #13]
}
   28966:	bf00      	nop
   28968:	370c      	adds	r7, #12
   2896a:	46bd      	mov	sp, r7
   2896c:	bc80      	pop	{r7}
   2896e:	4770      	bx	lr

00028970 <z_is_prio1_higher_than_prio2>:
{
   28970:	b480      	push	{r7}
   28972:	b083      	sub	sp, #12
   28974:	af00      	add	r7, sp, #0
   28976:	6078      	str	r0, [r7, #4]
   28978:	6039      	str	r1, [r7, #0]
	return prio1 < prio2;
   2897a:	687a      	ldr	r2, [r7, #4]
   2897c:	683b      	ldr	r3, [r7, #0]
   2897e:	429a      	cmp	r2, r3
   28980:	bfb4      	ite	lt
   28982:	2301      	movlt	r3, #1
   28984:	2300      	movge	r3, #0
   28986:	b2db      	uxtb	r3, r3
}
   28988:	4618      	mov	r0, r3
   2898a:	370c      	adds	r7, #12
   2898c:	46bd      	mov	sp, r7
   2898e:	bc80      	pop	{r7}
   28990:	4770      	bx	lr

00028992 <z_is_prio_higher>:
{
   28992:	b580      	push	{r7, lr}
   28994:	b082      	sub	sp, #8
   28996:	af00      	add	r7, sp, #0
   28998:	6078      	str	r0, [r7, #4]
   2899a:	6039      	str	r1, [r7, #0]
	return z_is_prio1_higher_than_prio2(prio, test_prio);
   2899c:	6839      	ldr	r1, [r7, #0]
   2899e:	6878      	ldr	r0, [r7, #4]
   289a0:	f7ff ffe6 	bl	28970 <z_is_prio1_higher_than_prio2>
   289a4:	4603      	mov	r3, r0
}
   289a6:	4618      	mov	r0, r3
   289a8:	3708      	adds	r7, #8
   289aa:	46bd      	mov	sp, r7
   289ac:	bd80      	pop	{r7, pc}

000289ae <z_waitq_head>:
{
   289ae:	b580      	push	{r7, lr}
   289b0:	b082      	sub	sp, #8
   289b2:	af00      	add	r7, sp, #0
   289b4:	6078      	str	r0, [r7, #4]
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   289b6:	687b      	ldr	r3, [r7, #4]
   289b8:	4618      	mov	r0, r3
   289ba:	f7ff fbec 	bl	28196 <sys_dlist_peek_head>
   289be:	4603      	mov	r3, r0
}
   289c0:	4618      	mov	r0, r3
   289c2:	3708      	adds	r7, #8
   289c4:	46bd      	mov	sp, r7
   289c6:	bd80      	pop	{r7, pc}

000289c8 <z_swap_irqlock>:
{
   289c8:	b580      	push	{r7, lr}
   289ca:	b084      	sub	sp, #16
   289cc:	af00      	add	r7, sp, #0
   289ce:	6078      	str	r0, [r7, #4]
	ret = arch_swap(key);
   289d0:	6878      	ldr	r0, [r7, #4]
   289d2:	f7ed f8a5 	bl	15b20 <arch_swap>
   289d6:	60f8      	str	r0, [r7, #12]
	return ret;
   289d8:	68fb      	ldr	r3, [r7, #12]
}
   289da:	4618      	mov	r0, r3
   289dc:	3710      	adds	r7, #16
   289de:	46bd      	mov	sp, r7
   289e0:	bd80      	pop	{r7, pc}

000289e2 <is_preempt>:
{
   289e2:	b480      	push	{r7}
   289e4:	b083      	sub	sp, #12
   289e6:	af00      	add	r7, sp, #0
   289e8:	6078      	str	r0, [r7, #4]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   289ea:	687b      	ldr	r3, [r7, #4]
   289ec:	89db      	ldrh	r3, [r3, #14]
   289ee:	2b7f      	cmp	r3, #127	; 0x7f
   289f0:	bf94      	ite	ls
   289f2:	2301      	movls	r3, #1
   289f4:	2300      	movhi	r3, #0
   289f6:	b2db      	uxtb	r3, r3
}
   289f8:	4618      	mov	r0, r3
   289fa:	370c      	adds	r7, #12
   289fc:	46bd      	mov	sp, r7
   289fe:	bc80      	pop	{r7}
   28a00:	4770      	bx	lr

00028a02 <is_metairq>:
{
   28a02:	b480      	push	{r7}
   28a04:	b083      	sub	sp, #12
   28a06:	af00      	add	r7, sp, #0
   28a08:	6078      	str	r0, [r7, #4]
	return 0;
   28a0a:	2300      	movs	r3, #0
}
   28a0c:	4618      	mov	r0, r3
   28a0e:	370c      	adds	r7, #12
   28a10:	46bd      	mov	sp, r7
   28a12:	bc80      	pop	{r7}
   28a14:	4770      	bx	lr

00028a16 <z_sched_prio_cmp>:
{
   28a16:	b480      	push	{r7}
   28a18:	b085      	sub	sp, #20
   28a1a:	af00      	add	r7, sp, #0
   28a1c:	6078      	str	r0, [r7, #4]
   28a1e:	6039      	str	r1, [r7, #0]
	int32_t b1 = thread_1->base.prio;
   28a20:	687b      	ldr	r3, [r7, #4]
   28a22:	f993 300e 	ldrsb.w	r3, [r3, #14]
   28a26:	60fb      	str	r3, [r7, #12]
	int32_t b2 = thread_2->base.prio;
   28a28:	683b      	ldr	r3, [r7, #0]
   28a2a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   28a2e:	60bb      	str	r3, [r7, #8]
	if (b1 != b2) {
   28a30:	68fa      	ldr	r2, [r7, #12]
   28a32:	68bb      	ldr	r3, [r7, #8]
   28a34:	429a      	cmp	r2, r3
   28a36:	d003      	beq.n	28a40 <z_sched_prio_cmp+0x2a>
		return b2 - b1;
   28a38:	68ba      	ldr	r2, [r7, #8]
   28a3a:	68fb      	ldr	r3, [r7, #12]
   28a3c:	1ad3      	subs	r3, r2, r3
   28a3e:	e000      	b.n	28a42 <z_sched_prio_cmp+0x2c>
	return 0;
   28a40:	2300      	movs	r3, #0
}
   28a42:	4618      	mov	r0, r3
   28a44:	3714      	adds	r7, #20
   28a46:	46bd      	mov	sp, r7
   28a48:	bc80      	pop	{r7}
   28a4a:	4770      	bx	lr

00028a4c <should_queue_thread>:
{
   28a4c:	b480      	push	{r7}
   28a4e:	b083      	sub	sp, #12
   28a50:	af00      	add	r7, sp, #0
   28a52:	6078      	str	r0, [r7, #4]
	return !IS_ENABLED(CONFIG_SMP) || th != _current;
   28a54:	2301      	movs	r3, #1
}
   28a56:	4618      	mov	r0, r3
   28a58:	370c      	adds	r7, #12
   28a5a:	46bd      	mov	sp, r7
   28a5c:	bc80      	pop	{r7}
   28a5e:	4770      	bx	lr

00028a60 <update_metairq_preempt>:
{
   28a60:	b480      	push	{r7}
   28a62:	b083      	sub	sp, #12
   28a64:	af00      	add	r7, sp, #0
   28a66:	6078      	str	r0, [r7, #4]
}
   28a68:	bf00      	nop
   28a6a:	370c      	adds	r7, #12
   28a6c:	46bd      	mov	sp, r7
   28a6e:	bc80      	pop	{r7}
   28a70:	4770      	bx	lr

00028a72 <thread_active_elsewhere>:
{
   28a72:	b480      	push	{r7}
   28a74:	b083      	sub	sp, #12
   28a76:	af00      	add	r7, sp, #0
   28a78:	6078      	str	r0, [r7, #4]
	return false;
   28a7a:	2300      	movs	r3, #0
}
   28a7c:	4618      	mov	r0, r3
   28a7e:	370c      	adds	r7, #12
   28a80:	46bd      	mov	sp, r7
   28a82:	bc80      	pop	{r7}
   28a84:	4770      	bx	lr

00028a86 <add_thread_timeout>:
{
   28a86:	b580      	push	{r7, lr}
   28a88:	b084      	sub	sp, #16
   28a8a:	af00      	add	r7, sp, #0
   28a8c:	60f8      	str	r0, [r7, #12]
   28a8e:	e9c7 2300 	strd	r2, r3, [r7]
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   28a92:	e9d7 2300 	ldrd	r2, r3, [r7]
   28a96:	f04f 30ff 	mov.w	r0, #4294967295
   28a9a:	f04f 31ff 	mov.w	r1, #4294967295
   28a9e:	428b      	cmp	r3, r1
   28aa0:	bf08      	it	eq
   28aa2:	4282      	cmpeq	r2, r0
   28aa4:	d004      	beq.n	28ab0 <add_thread_timeout+0x2a>
		z_add_thread_timeout(thread, timeout);
   28aa6:	e9d7 2300 	ldrd	r2, r3, [r7]
   28aaa:	68f8      	ldr	r0, [r7, #12]
   28aac:	f7f5 fad0 	bl	1e050 <z_add_thread_timeout>
}
   28ab0:	bf00      	nop
   28ab2:	3710      	adds	r7, #16
   28ab4:	46bd      	mov	sp, r7
   28ab6:	bd80      	pop	{r7, pc}

00028ab8 <unpend_thread_no_timeout>:
{
   28ab8:	b580      	push	{r7, lr}
   28aba:	b082      	sub	sp, #8
   28abc:	af00      	add	r7, sp, #0
   28abe:	6078      	str	r0, [r7, #4]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   28ac0:	6878      	ldr	r0, [r7, #4]
   28ac2:	f7f6 f801 	bl	1eac8 <pended_on_thread>
   28ac6:	4603      	mov	r3, r0
   28ac8:	6879      	ldr	r1, [r7, #4]
   28aca:	4618      	mov	r0, r3
   28acc:	f7f6 fee4 	bl	1f898 <z_priq_dumb_remove>
	z_mark_thread_as_not_pending(thread);
   28ad0:	6878      	ldr	r0, [r7, #4]
   28ad2:	f7ff ff3d 	bl	28950 <z_mark_thread_as_not_pending>
	thread->base.pended_on = NULL;
   28ad6:	687b      	ldr	r3, [r7, #4]
   28ad8:	2200      	movs	r2, #0
   28ada:	609a      	str	r2, [r3, #8]
}
   28adc:	bf00      	nop
   28ade:	3708      	adds	r7, #8
   28ae0:	46bd      	mov	sp, r7
   28ae2:	bd80      	pop	{r7, pc}

00028ae4 <resched>:
{
   28ae4:	b480      	push	{r7}
   28ae6:	b085      	sub	sp, #20
   28ae8:	af00      	add	r7, sp, #0
   28aea:	6078      	str	r0, [r7, #4]
   28aec:	687b      	ldr	r3, [r7, #4]
   28aee:	60fb      	str	r3, [r7, #12]

static ALWAYS_INLINE bool arch_irq_unlocked(unsigned int key)
{
	/* This convention works for both PRIMASK and BASEPRI */
	return key == 0U;
   28af0:	68fb      	ldr	r3, [r7, #12]
   28af2:	2b00      	cmp	r3, #0
   28af4:	bf0c      	ite	eq
   28af6:	2301      	moveq	r3, #1
   28af8:	2300      	movne	r3, #0
   28afa:	b2db      	uxtb	r3, r3
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   28afc:	2b00      	cmp	r3, #0
   28afe:	d00f      	beq.n	28b20 <resched+0x3c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   28b00:	f3ef 8305 	mrs	r3, IPSR
   28b04:	60bb      	str	r3, [r7, #8]
  return(result);
   28b06:	68bb      	ldr	r3, [r7, #8]
   28b08:	2b00      	cmp	r3, #0
   28b0a:	bf14      	ite	ne
   28b0c:	2301      	movne	r3, #1
   28b0e:	2300      	moveq	r3, #0
   28b10:	b2db      	uxtb	r3, r3
   28b12:	f083 0301 	eor.w	r3, r3, #1
   28b16:	b2db      	uxtb	r3, r3
   28b18:	2b00      	cmp	r3, #0
   28b1a:	d001      	beq.n	28b20 <resched+0x3c>
   28b1c:	2301      	movs	r3, #1
   28b1e:	e000      	b.n	28b22 <resched+0x3e>
   28b20:	2300      	movs	r3, #0
   28b22:	f003 0301 	and.w	r3, r3, #1
   28b26:	b2db      	uxtb	r3, r3
}
   28b28:	4618      	mov	r0, r3
   28b2a:	3714      	adds	r7, #20
   28b2c:	46bd      	mov	sp, r7
   28b2e:	bc80      	pop	{r7}
   28b30:	4770      	bx	lr

00028b32 <z_reschedule_irqlock>:
{
   28b32:	b580      	push	{r7, lr}
   28b34:	b084      	sub	sp, #16
   28b36:	af00      	add	r7, sp, #0
   28b38:	6078      	str	r0, [r7, #4]
	if (resched(key)) {
   28b3a:	6878      	ldr	r0, [r7, #4]
   28b3c:	f7ff ffd2 	bl	28ae4 <resched>
   28b40:	4603      	mov	r3, r0
   28b42:	2b00      	cmp	r3, #0
   28b44:	d003      	beq.n	28b4e <z_reschedule_irqlock+0x1c>
		z_swap_irqlock(key);
   28b46:	6878      	ldr	r0, [r7, #4]
   28b48:	f7ff ff3e 	bl	289c8 <z_swap_irqlock>
}
   28b4c:	e007      	b.n	28b5e <z_reschedule_irqlock+0x2c>
   28b4e:	687b      	ldr	r3, [r7, #4]
   28b50:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
   28b52:	68fb      	ldr	r3, [r7, #12]
   28b54:	f383 8811 	msr	BASEPRI, r3
   28b58:	f3bf 8f6f 	isb	sy
}
   28b5c:	bf00      	nop
   28b5e:	bf00      	nop
   28b60:	3710      	adds	r7, #16
   28b62:	46bd      	mov	sp, r7
   28b64:	bd80      	pop	{r7, pc}

00028b66 <z_priq_dumb_best>:
{
   28b66:	b580      	push	{r7, lr}
   28b68:	b084      	sub	sp, #16
   28b6a:	af00      	add	r7, sp, #0
   28b6c:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = NULL;
   28b6e:	2300      	movs	r3, #0
   28b70:	60fb      	str	r3, [r7, #12]
	sys_dnode_t *n = sys_dlist_peek_head(pq);
   28b72:	6878      	ldr	r0, [r7, #4]
   28b74:	f7ff fb0f 	bl	28196 <sys_dlist_peek_head>
   28b78:	60b8      	str	r0, [r7, #8]
	if (n != NULL) {
   28b7a:	68bb      	ldr	r3, [r7, #8]
   28b7c:	2b00      	cmp	r3, #0
   28b7e:	d001      	beq.n	28b84 <z_priq_dumb_best+0x1e>
		thread = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
   28b80:	68bb      	ldr	r3, [r7, #8]
   28b82:	60fb      	str	r3, [r7, #12]
	return thread;
   28b84:	68fb      	ldr	r3, [r7, #12]
}
   28b86:	4618      	mov	r0, r3
   28b88:	3710      	adds	r7, #16
   28b8a:	46bd      	mov	sp, r7
   28b8c:	bd80      	pop	{r7, pc}

00028b8e <z_unpend_all>:
{
   28b8e:	b580      	push	{r7, lr}
   28b90:	b084      	sub	sp, #16
   28b92:	af00      	add	r7, sp, #0
   28b94:	6078      	str	r0, [r7, #4]
	int need_sched = 0;
   28b96:	2300      	movs	r3, #0
   28b98:	60fb      	str	r3, [r7, #12]
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   28b9a:	e007      	b.n	28bac <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   28b9c:	68b8      	ldr	r0, [r7, #8]
   28b9e:	f7f6 fb15 	bl	1f1cc <z_unpend_thread>
		z_ready_thread(thread);
   28ba2:	68b8      	ldr	r0, [r7, #8]
   28ba4:	f7f5 fdfe 	bl	1e7a4 <z_ready_thread>
		need_sched = 1;
   28ba8:	2301      	movs	r3, #1
   28baa:	60fb      	str	r3, [r7, #12]
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   28bac:	6878      	ldr	r0, [r7, #4]
   28bae:	f7ff fefe 	bl	289ae <z_waitq_head>
   28bb2:	60b8      	str	r0, [r7, #8]
   28bb4:	68bb      	ldr	r3, [r7, #8]
   28bb6:	2b00      	cmp	r3, #0
   28bb8:	d1f0      	bne.n	28b9c <z_unpend_all+0xe>
	return need_sched;
   28bba:	68fb      	ldr	r3, [r7, #12]
}
   28bbc:	4618      	mov	r0, r3
   28bbe:	3710      	adds	r7, #16
   28bc0:	46bd      	mov	sp, r7
   28bc2:	bd80      	pop	{r7, pc}

00028bc4 <unpend_all>:
{
   28bc4:	b580      	push	{r7, lr}
   28bc6:	b086      	sub	sp, #24
   28bc8:	af00      	add	r7, sp, #0
   28bca:	6078      	str	r0, [r7, #4]
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   28bcc:	e010      	b.n	28bf0 <unpend_all+0x2c>
		unpend_thread_no_timeout(thread);
   28bce:	6978      	ldr	r0, [r7, #20]
   28bd0:	f7ff ff72 	bl	28ab8 <unpend_thread_no_timeout>
		(void)z_abort_thread_timeout(thread);
   28bd4:	6978      	ldr	r0, [r7, #20]
   28bd6:	f7ff fdd8 	bl	2878a <z_abort_thread_timeout>
   28bda:	697b      	ldr	r3, [r7, #20]
   28bdc:	613b      	str	r3, [r7, #16]
   28bde:	2300      	movs	r3, #0
   28be0:	60fb      	str	r3, [r7, #12]
	thread->arch.swap_return_value = value;
   28be2:	693b      	ldr	r3, [r7, #16]
   28be4:	68fa      	ldr	r2, [r7, #12]
   28be6:	679a      	str	r2, [r3, #120]	; 0x78
}
   28be8:	bf00      	nop
		ready_thread(thread);
   28bea:	6978      	ldr	r0, [r7, #20]
   28bec:	f7f5 fd54 	bl	1e698 <ready_thread>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   28bf0:	6878      	ldr	r0, [r7, #4]
   28bf2:	f7ff fedc 	bl	289ae <z_waitq_head>
   28bf6:	6178      	str	r0, [r7, #20]
   28bf8:	697b      	ldr	r3, [r7, #20]
   28bfa:	2b00      	cmp	r3, #0
   28bfc:	d1e7      	bne.n	28bce <unpend_all+0xa>
}
   28bfe:	bf00      	nop
   28c00:	bf00      	nop
   28c02:	3718      	adds	r7, #24
   28c04:	46bd      	mov	sp, r7
   28c06:	bd80      	pop	{r7, pc}

00028c08 <sys_dnode_init>:
{
   28c08:	b480      	push	{r7}
   28c0a:	b083      	sub	sp, #12
   28c0c:	af00      	add	r7, sp, #0
   28c0e:	6078      	str	r0, [r7, #4]
	node->next = NULL;
   28c10:	687b      	ldr	r3, [r7, #4]
   28c12:	2200      	movs	r2, #0
   28c14:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
   28c16:	687b      	ldr	r3, [r7, #4]
   28c18:	2200      	movs	r2, #0
   28c1a:	605a      	str	r2, [r3, #4]
}
   28c1c:	bf00      	nop
   28c1e:	370c      	adds	r7, #12
   28c20:	46bd      	mov	sp, r7
   28c22:	bc80      	pop	{r7}
   28c24:	4770      	bx	lr

00028c26 <sys_dnode_is_linked>:
{
   28c26:	b480      	push	{r7}
   28c28:	b083      	sub	sp, #12
   28c2a:	af00      	add	r7, sp, #0
   28c2c:	6078      	str	r0, [r7, #4]
	return node->next != NULL;
   28c2e:	687b      	ldr	r3, [r7, #4]
   28c30:	681b      	ldr	r3, [r3, #0]
   28c32:	2b00      	cmp	r3, #0
   28c34:	bf14      	ite	ne
   28c36:	2301      	movne	r3, #1
   28c38:	2300      	moveq	r3, #0
   28c3a:	b2db      	uxtb	r3, r3
}
   28c3c:	4618      	mov	r0, r3
   28c3e:	370c      	adds	r7, #12
   28c40:	46bd      	mov	sp, r7
   28c42:	bc80      	pop	{r7}
   28c44:	4770      	bx	lr

00028c46 <sys_dlist_is_empty>:
{
   28c46:	b480      	push	{r7}
   28c48:	b083      	sub	sp, #12
   28c4a:	af00      	add	r7, sp, #0
   28c4c:	6078      	str	r0, [r7, #4]
	return list->head == list;
   28c4e:	687b      	ldr	r3, [r7, #4]
   28c50:	681b      	ldr	r3, [r3, #0]
   28c52:	687a      	ldr	r2, [r7, #4]
   28c54:	429a      	cmp	r2, r3
   28c56:	bf0c      	ite	eq
   28c58:	2301      	moveq	r3, #1
   28c5a:	2300      	movne	r3, #0
   28c5c:	b2db      	uxtb	r3, r3
}
   28c5e:	4618      	mov	r0, r3
   28c60:	370c      	adds	r7, #12
   28c62:	46bd      	mov	sp, r7
   28c64:	bc80      	pop	{r7}
   28c66:	4770      	bx	lr

00028c68 <sys_dlist_peek_head>:
{
   28c68:	b580      	push	{r7, lr}
   28c6a:	b082      	sub	sp, #8
   28c6c:	af00      	add	r7, sp, #0
   28c6e:	6078      	str	r0, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28c70:	6878      	ldr	r0, [r7, #4]
   28c72:	f7ff ffe8 	bl	28c46 <sys_dlist_is_empty>
   28c76:	4603      	mov	r3, r0
   28c78:	2b00      	cmp	r3, #0
   28c7a:	d102      	bne.n	28c82 <sys_dlist_peek_head+0x1a>
   28c7c:	687b      	ldr	r3, [r7, #4]
   28c7e:	681b      	ldr	r3, [r3, #0]
   28c80:	e000      	b.n	28c84 <sys_dlist_peek_head+0x1c>
   28c82:	2300      	movs	r3, #0
}
   28c84:	4618      	mov	r0, r3
   28c86:	3708      	adds	r7, #8
   28c88:	46bd      	mov	sp, r7
   28c8a:	bd80      	pop	{r7, pc}

00028c8c <sys_dlist_peek_next_no_check>:
{
   28c8c:	b480      	push	{r7}
   28c8e:	b083      	sub	sp, #12
   28c90:	af00      	add	r7, sp, #0
   28c92:	6078      	str	r0, [r7, #4]
   28c94:	6039      	str	r1, [r7, #0]
	return (node == list->tail) ? NULL : node->next;
   28c96:	687b      	ldr	r3, [r7, #4]
   28c98:	685b      	ldr	r3, [r3, #4]
   28c9a:	683a      	ldr	r2, [r7, #0]
   28c9c:	429a      	cmp	r2, r3
   28c9e:	d002      	beq.n	28ca6 <sys_dlist_peek_next_no_check+0x1a>
   28ca0:	683b      	ldr	r3, [r7, #0]
   28ca2:	681b      	ldr	r3, [r3, #0]
   28ca4:	e000      	b.n	28ca8 <sys_dlist_peek_next_no_check+0x1c>
   28ca6:	2300      	movs	r3, #0
}
   28ca8:	4618      	mov	r0, r3
   28caa:	370c      	adds	r7, #12
   28cac:	46bd      	mov	sp, r7
   28cae:	bc80      	pop	{r7}
   28cb0:	4770      	bx	lr

00028cb2 <sys_dlist_peek_next>:
{
   28cb2:	b580      	push	{r7, lr}
   28cb4:	b082      	sub	sp, #8
   28cb6:	af00      	add	r7, sp, #0
   28cb8:	6078      	str	r0, [r7, #4]
   28cba:	6039      	str	r1, [r7, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28cbc:	683b      	ldr	r3, [r7, #0]
   28cbe:	2b00      	cmp	r3, #0
   28cc0:	d005      	beq.n	28cce <sys_dlist_peek_next+0x1c>
   28cc2:	6839      	ldr	r1, [r7, #0]
   28cc4:	6878      	ldr	r0, [r7, #4]
   28cc6:	f7ff ffe1 	bl	28c8c <sys_dlist_peek_next_no_check>
   28cca:	4603      	mov	r3, r0
   28ccc:	e000      	b.n	28cd0 <sys_dlist_peek_next+0x1e>
   28cce:	2300      	movs	r3, #0
}
   28cd0:	4618      	mov	r0, r3
   28cd2:	3708      	adds	r7, #8
   28cd4:	46bd      	mov	sp, r7
   28cd6:	bd80      	pop	{r7, pc}

00028cd8 <sys_dlist_append>:
{
   28cd8:	b480      	push	{r7}
   28cda:	b085      	sub	sp, #20
   28cdc:	af00      	add	r7, sp, #0
   28cde:	6078      	str	r0, [r7, #4]
   28ce0:	6039      	str	r1, [r7, #0]
	sys_dnode_t *const tail = list->tail;
   28ce2:	687b      	ldr	r3, [r7, #4]
   28ce4:	685b      	ldr	r3, [r3, #4]
   28ce6:	60fb      	str	r3, [r7, #12]
	node->next = list;
   28ce8:	683b      	ldr	r3, [r7, #0]
   28cea:	687a      	ldr	r2, [r7, #4]
   28cec:	601a      	str	r2, [r3, #0]
	node->prev = tail;
   28cee:	683b      	ldr	r3, [r7, #0]
   28cf0:	68fa      	ldr	r2, [r7, #12]
   28cf2:	605a      	str	r2, [r3, #4]
	tail->next = node;
   28cf4:	68fb      	ldr	r3, [r7, #12]
   28cf6:	683a      	ldr	r2, [r7, #0]
   28cf8:	601a      	str	r2, [r3, #0]
	list->tail = node;
   28cfa:	687b      	ldr	r3, [r7, #4]
   28cfc:	683a      	ldr	r2, [r7, #0]
   28cfe:	605a      	str	r2, [r3, #4]
}
   28d00:	bf00      	nop
   28d02:	3714      	adds	r7, #20
   28d04:	46bd      	mov	sp, r7
   28d06:	bc80      	pop	{r7}
   28d08:	4770      	bx	lr

00028d0a <sys_dlist_insert>:
{
   28d0a:	b480      	push	{r7}
   28d0c:	b085      	sub	sp, #20
   28d0e:	af00      	add	r7, sp, #0
   28d10:	6078      	str	r0, [r7, #4]
   28d12:	6039      	str	r1, [r7, #0]
	sys_dnode_t *const prev = successor->prev;
   28d14:	687b      	ldr	r3, [r7, #4]
   28d16:	685b      	ldr	r3, [r3, #4]
   28d18:	60fb      	str	r3, [r7, #12]
	node->prev = prev;
   28d1a:	683b      	ldr	r3, [r7, #0]
   28d1c:	68fa      	ldr	r2, [r7, #12]
   28d1e:	605a      	str	r2, [r3, #4]
	node->next = successor;
   28d20:	683b      	ldr	r3, [r7, #0]
   28d22:	687a      	ldr	r2, [r7, #4]
   28d24:	601a      	str	r2, [r3, #0]
	prev->next = node;
   28d26:	68fb      	ldr	r3, [r7, #12]
   28d28:	683a      	ldr	r2, [r7, #0]
   28d2a:	601a      	str	r2, [r3, #0]
	successor->prev = node;
   28d2c:	687b      	ldr	r3, [r7, #4]
   28d2e:	683a      	ldr	r2, [r7, #0]
   28d30:	605a      	str	r2, [r3, #4]
}
   28d32:	bf00      	nop
   28d34:	3714      	adds	r7, #20
   28d36:	46bd      	mov	sp, r7
   28d38:	bc80      	pop	{r7}
   28d3a:	4770      	bx	lr

00028d3c <sys_dlist_remove>:
{
   28d3c:	b580      	push	{r7, lr}
   28d3e:	b084      	sub	sp, #16
   28d40:	af00      	add	r7, sp, #0
   28d42:	6078      	str	r0, [r7, #4]
	sys_dnode_t *const prev = node->prev;
   28d44:	687b      	ldr	r3, [r7, #4]
   28d46:	685b      	ldr	r3, [r3, #4]
   28d48:	60fb      	str	r3, [r7, #12]
	sys_dnode_t *const next = node->next;
   28d4a:	687b      	ldr	r3, [r7, #4]
   28d4c:	681b      	ldr	r3, [r3, #0]
   28d4e:	60bb      	str	r3, [r7, #8]
	prev->next = next;
   28d50:	68fb      	ldr	r3, [r7, #12]
   28d52:	68ba      	ldr	r2, [r7, #8]
   28d54:	601a      	str	r2, [r3, #0]
	next->prev = prev;
   28d56:	68bb      	ldr	r3, [r7, #8]
   28d58:	68fa      	ldr	r2, [r7, #12]
   28d5a:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
   28d5c:	6878      	ldr	r0, [r7, #4]
   28d5e:	f7ff ff53 	bl	28c08 <sys_dnode_init>
}
   28d62:	bf00      	nop
   28d64:	3710      	adds	r7, #16
   28d66:	46bd      	mov	sp, r7
   28d68:	bd80      	pop	{r7, pc}

00028d6a <remove_timeout>:
{
   28d6a:	b5f0      	push	{r4, r5, r6, r7, lr}
   28d6c:	b083      	sub	sp, #12
   28d6e:	af00      	add	r7, sp, #0
   28d70:	6078      	str	r0, [r7, #4]
	if (next(t) != NULL) {
   28d72:	6878      	ldr	r0, [r7, #4]
   28d74:	f7f7 f97c 	bl	20070 <next>
   28d78:	4603      	mov	r3, r0
   28d7a:	2b00      	cmp	r3, #0
   28d7c:	d00d      	beq.n	28d9a <remove_timeout+0x30>
		next(t)->dticks += t->dticks;
   28d7e:	6878      	ldr	r0, [r7, #4]
   28d80:	f7f7 f976 	bl	20070 <next>
   28d84:	4606      	mov	r6, r0
   28d86:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
   28d8a:	687b      	ldr	r3, [r7, #4]
   28d8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
   28d90:	1884      	adds	r4, r0, r2
   28d92:	eb41 0503 	adc.w	r5, r1, r3
   28d96:	e9c6 4504 	strd	r4, r5, [r6, #16]
	sys_dlist_remove(&t->node);
   28d9a:	687b      	ldr	r3, [r7, #4]
   28d9c:	4618      	mov	r0, r3
   28d9e:	f7ff ffcd 	bl	28d3c <sys_dlist_remove>
}
   28da2:	bf00      	nop
   28da4:	370c      	adds	r7, #12
   28da6:	46bd      	mov	sp, r7
   28da8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028daa <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   28daa:	b580      	push	{r7, lr}
   28dac:	af00      	add	r7, sp, #0
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   28dae:	f7f7 fdcf 	bl	20950 <sys_clock_tick_get>
   28db2:	4602      	mov	r2, r0
   28db4:	460b      	mov	r3, r1
   28db6:	4613      	mov	r3, r2
#else
	return (uint32_t)curr_tick;
#endif
}
   28db8:	4618      	mov	r0, r3
   28dba:	bd80      	pop	{r7, pc}

00028dbc <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   28dbc:	b580      	push	{r7, lr}
   28dbe:	af00      	add	r7, sp, #0
	return sys_clock_tick_get();
   28dc0:	f7f7 fdc6 	bl	20950 <sys_clock_tick_get>
   28dc4:	4602      	mov	r2, r0
   28dc6:	460b      	mov	r3, r1
}
   28dc8:	4610      	mov	r0, r2
   28dca:	4619      	mov	r1, r3
   28dcc:	bd80      	pop	{r7, pc}

00028dce <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
   28dce:	b580      	push	{r7, lr}
   28dd0:	b082      	sub	sp, #8
   28dd2:	af00      	add	r7, sp, #0
   28dd4:	6078      	str	r0, [r7, #4]
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   28dd6:	687b      	ldr	r3, [r7, #4]
   28dd8:	2b00      	cmp	r3, #0
   28dda:	d003      	beq.n	28de4 <z_impl_k_busy_wait+0x16>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   28ddc:	6878      	ldr	r0, [r7, #4]
   28dde:	f7f9 fa06 	bl	221ee <arch_busy_wait>
   28de2:	e000      	b.n	28de6 <z_impl_k_busy_wait+0x18>
		return;
   28de4:	bf00      	nop
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   28de6:	3708      	adds	r7, #8
   28de8:	46bd      	mov	sp, r7
   28dea:	bd80      	pop	{r7, pc}

00028dec <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   28dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   28df0:	b084      	sub	sp, #16
   28df2:	af00      	add	r7, sp, #0
   28df4:	e9c7 0100 	strd	r0, r1, [r7]
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   28df8:	e9d7 2300 	ldrd	r2, r3, [r7]
   28dfc:	f04f 30ff 	mov.w	r0, #4294967295
   28e00:	f04f 31ff 	mov.w	r1, #4294967295
   28e04:	428b      	cmp	r3, r1
   28e06:	bf08      	it	eq
   28e08:	4282      	cmpeq	r2, r0
   28e0a:	d104      	bne.n	28e16 <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   28e0c:	f04f 32ff 	mov.w	r2, #4294967295
   28e10:	f04f 33ff 	mov.w	r3, #4294967295
   28e14:	e03e      	b.n	28e94 <sys_clock_timeout_end_calc+0xa8>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   28e16:	e9d7 2300 	ldrd	r2, r3, [r7]
   28e1a:	f04f 0000 	mov.w	r0, #0
   28e1e:	f04f 0100 	mov.w	r1, #0
   28e22:	428b      	cmp	r3, r1
   28e24:	bf08      	it	eq
   28e26:	4282      	cmpeq	r2, r0
   28e28:	d104      	bne.n	28e34 <sys_clock_timeout_end_calc+0x48>
		return sys_clock_tick_get();
   28e2a:	f7f7 fd91 	bl	20950 <sys_clock_tick_get>
   28e2e:	4602      	mov	r2, r0
   28e30:	460b      	mov	r3, r1
   28e32:	e02f      	b.n	28e94 <sys_clock_timeout_end_calc+0xa8>
	} else {

		dt = timeout.ticks;
   28e34:	e9d7 2300 	ldrd	r2, r3, [r7]
   28e38:	e9c7 2302 	strd	r2, r3, [r7, #8]

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   28e3c:	f06f 0001 	mvn.w	r0, #1
   28e40:	f04f 31ff 	mov.w	r1, #4294967295
   28e44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   28e48:	1a84      	subs	r4, r0, r2
   28e4a:	eb61 0503 	sbc.w	r5, r1, r3
   28e4e:	2c00      	cmp	r4, #0
   28e50:	f175 0300 	sbcs.w	r3, r5, #0
   28e54:	db0c      	blt.n	28e70 <sys_clock_timeout_end_calc+0x84>
			return Z_TICK_ABS(dt);
   28e56:	f06f 0001 	mvn.w	r0, #1
   28e5a:	f04f 31ff 	mov.w	r1, #4294967295
   28e5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   28e62:	ebb0 0a02 	subs.w	sl, r0, r2
   28e66:	eb61 0b03 	sbc.w	fp, r1, r3
   28e6a:	4652      	mov	r2, sl
   28e6c:	465b      	mov	r3, fp
   28e6e:	e011      	b.n	28e94 <sys_clock_timeout_end_calc+0xa8>
		}
		return sys_clock_tick_get() + MAX(1, dt);
   28e70:	f7f7 fd6e 	bl	20950 <sys_clock_tick_get>
   28e74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   28e78:	2a01      	cmp	r2, #1
   28e7a:	f173 0400 	sbcs.w	r4, r3, #0
   28e7e:	da03      	bge.n	28e88 <sys_clock_timeout_end_calc+0x9c>
   28e80:	f04f 0201 	mov.w	r2, #1
   28e84:	f04f 0300 	mov.w	r3, #0
   28e88:	eb10 0802 	adds.w	r8, r0, r2
   28e8c:	eb41 0903 	adc.w	r9, r1, r3
   28e90:	4642      	mov	r2, r8
   28e92:	464b      	mov	r3, r9
	}
}
   28e94:	4610      	mov	r0, r2
   28e96:	4619      	mov	r1, r3
   28e98:	3710      	adds	r7, #16
   28e9a:	46bd      	mov	sp, r7
   28e9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

00028ea0 <sys_dlist_init>:
{
   28ea0:	b480      	push	{r7}
   28ea2:	b083      	sub	sp, #12
   28ea4:	af00      	add	r7, sp, #0
   28ea6:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
   28ea8:	687b      	ldr	r3, [r7, #4]
   28eaa:	687a      	ldr	r2, [r7, #4]
   28eac:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   28eae:	687b      	ldr	r3, [r7, #4]
   28eb0:	687a      	ldr	r2, [r7, #4]
   28eb2:	605a      	str	r2, [r3, #4]
}
   28eb4:	bf00      	nop
   28eb6:	370c      	adds	r7, #12
   28eb8:	46bd      	mov	sp, r7
   28eba:	bc80      	pop	{r7}
   28ebc:	4770      	bx	lr

00028ebe <sys_dnode_init>:
{
   28ebe:	b480      	push	{r7}
   28ec0:	b083      	sub	sp, #12
   28ec2:	af00      	add	r7, sp, #0
   28ec4:	6078      	str	r0, [r7, #4]
	node->next = NULL;
   28ec6:	687b      	ldr	r3, [r7, #4]
   28ec8:	2200      	movs	r2, #0
   28eca:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
   28ecc:	687b      	ldr	r3, [r7, #4]
   28ece:	2200      	movs	r2, #0
   28ed0:	605a      	str	r2, [r3, #4]
}
   28ed2:	bf00      	nop
   28ed4:	370c      	adds	r7, #12
   28ed6:	46bd      	mov	sp, r7
   28ed8:	bc80      	pop	{r7}
   28eda:	4770      	bx	lr

00028edc <sys_dlist_is_empty>:
{
   28edc:	b480      	push	{r7}
   28ede:	b083      	sub	sp, #12
   28ee0:	af00      	add	r7, sp, #0
   28ee2:	6078      	str	r0, [r7, #4]
	return list->head == list;
   28ee4:	687b      	ldr	r3, [r7, #4]
   28ee6:	681b      	ldr	r3, [r3, #0]
   28ee8:	687a      	ldr	r2, [r7, #4]
   28eea:	429a      	cmp	r2, r3
   28eec:	bf0c      	ite	eq
   28eee:	2301      	moveq	r3, #1
   28ef0:	2300      	movne	r3, #0
   28ef2:	b2db      	uxtb	r3, r3
}
   28ef4:	4618      	mov	r0, r3
   28ef6:	370c      	adds	r7, #12
   28ef8:	46bd      	mov	sp, r7
   28efa:	bc80      	pop	{r7}
   28efc:	4770      	bx	lr

00028efe <sys_dlist_peek_head>:
{
   28efe:	b580      	push	{r7, lr}
   28f00:	b082      	sub	sp, #8
   28f02:	af00      	add	r7, sp, #0
   28f04:	6078      	str	r0, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28f06:	6878      	ldr	r0, [r7, #4]
   28f08:	f7ff ffe8 	bl	28edc <sys_dlist_is_empty>
   28f0c:	4603      	mov	r3, r0
   28f0e:	2b00      	cmp	r3, #0
   28f10:	d102      	bne.n	28f18 <sys_dlist_peek_head+0x1a>
   28f12:	687b      	ldr	r3, [r7, #4]
   28f14:	681b      	ldr	r3, [r3, #0]
   28f16:	e000      	b.n	28f1a <sys_dlist_peek_head+0x1c>
   28f18:	2300      	movs	r3, #0
}
   28f1a:	4618      	mov	r0, r3
   28f1c:	3708      	adds	r7, #8
   28f1e:	46bd      	mov	sp, r7
   28f20:	bd80      	pop	{r7, pc}

00028f22 <z_object_init>:
{
   28f22:	b480      	push	{r7}
   28f24:	b083      	sub	sp, #12
   28f26:	af00      	add	r7, sp, #0
   28f28:	6078      	str	r0, [r7, #4]
}
   28f2a:	bf00      	nop
   28f2c:	370c      	adds	r7, #12
   28f2e:	46bd      	mov	sp, r7
   28f30:	bc80      	pop	{r7}
   28f32:	4770      	bx	lr

00028f34 <z_init_timeout>:
{
   28f34:	b580      	push	{r7, lr}
   28f36:	b082      	sub	sp, #8
   28f38:	af00      	add	r7, sp, #0
   28f3a:	6078      	str	r0, [r7, #4]
	sys_dnode_init(&to->node);
   28f3c:	687b      	ldr	r3, [r7, #4]
   28f3e:	4618      	mov	r0, r3
   28f40:	f7ff ffbd 	bl	28ebe <sys_dnode_init>
}
   28f44:	bf00      	nop
   28f46:	3708      	adds	r7, #8
   28f48:	46bd      	mov	sp, r7
   28f4a:	bd80      	pop	{r7, pc}

00028f4c <z_reschedule_unlocked>:
{
   28f4c:	b580      	push	{r7, lr}
   28f4e:	b082      	sub	sp, #8
   28f50:	af00      	add	r7, sp, #0
	__asm__ volatile(
   28f52:	f04f 0320 	mov.w	r3, #32
   28f56:	f3ef 8211 	mrs	r2, BASEPRI
   28f5a:	f383 8811 	msr	BASEPRI, r3
   28f5e:	f3bf 8f6f 	isb	sy
   28f62:	607a      	str	r2, [r7, #4]
   28f64:	603b      	str	r3, [r7, #0]
	return key;
   28f66:	687b      	ldr	r3, [r7, #4]
	(void) z_reschedule_irqlock(arch_irq_lock());
   28f68:	4618      	mov	r0, r3
   28f6a:	f7ff fde2 	bl	28b32 <z_reschedule_irqlock>
}
   28f6e:	bf00      	nop
   28f70:	3708      	adds	r7, #8
   28f72:	46bd      	mov	sp, r7
   28f74:	bd80      	pop	{r7, pc}

00028f76 <z_waitq_init>:
{
   28f76:	b580      	push	{r7, lr}
   28f78:	b082      	sub	sp, #8
   28f7a:	af00      	add	r7, sp, #0
   28f7c:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
   28f7e:	687b      	ldr	r3, [r7, #4]
   28f80:	4618      	mov	r0, r3
   28f82:	f7ff ff8d 	bl	28ea0 <sys_dlist_init>
}
   28f86:	bf00      	nop
   28f88:	3708      	adds	r7, #8
   28f8a:	46bd      	mov	sp, r7
   28f8c:	bd80      	pop	{r7, pc}

00028f8e <z_waitq_head>:
{
   28f8e:	b580      	push	{r7, lr}
   28f90:	b082      	sub	sp, #8
   28f92:	af00      	add	r7, sp, #0
   28f94:	6078      	str	r0, [r7, #4]
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   28f96:	687b      	ldr	r3, [r7, #4]
   28f98:	4618      	mov	r0, r3
   28f9a:	f7ff ffb0 	bl	28efe <sys_dlist_peek_head>
   28f9e:	4603      	mov	r3, r0
}
   28fa0:	4618      	mov	r0, r3
   28fa2:	3708      	adds	r7, #8
   28fa4:	46bd      	mov	sp, r7
   28fa6:	bd80      	pop	{r7, pc}

00028fa8 <k_timer_init>:
{
   28fa8:	b580      	push	{r7, lr}
   28faa:	b084      	sub	sp, #16
   28fac:	af00      	add	r7, sp, #0
   28fae:	60f8      	str	r0, [r7, #12]
   28fb0:	60b9      	str	r1, [r7, #8]
   28fb2:	607a      	str	r2, [r7, #4]
	timer->expiry_fn = expiry_fn;
   28fb4:	68fb      	ldr	r3, [r7, #12]
   28fb6:	68ba      	ldr	r2, [r7, #8]
   28fb8:	621a      	str	r2, [r3, #32]
	timer->stop_fn = stop_fn;
   28fba:	68fb      	ldr	r3, [r7, #12]
   28fbc:	687a      	ldr	r2, [r7, #4]
   28fbe:	625a      	str	r2, [r3, #36]	; 0x24
	timer->status = 0U;
   28fc0:	68fb      	ldr	r3, [r7, #12]
   28fc2:	2200      	movs	r2, #0
   28fc4:	631a      	str	r2, [r3, #48]	; 0x30
		z_waitq_init(&timer->wait_q);
   28fc6:	68fb      	ldr	r3, [r7, #12]
   28fc8:	3318      	adds	r3, #24
   28fca:	4618      	mov	r0, r3
   28fcc:	f7ff ffd3 	bl	28f76 <z_waitq_init>
	z_init_timeout(&timer->timeout);
   28fd0:	68fb      	ldr	r3, [r7, #12]
   28fd2:	4618      	mov	r0, r3
   28fd4:	f7ff ffae 	bl	28f34 <z_init_timeout>
	timer->user_data = NULL;
   28fd8:	68fb      	ldr	r3, [r7, #12]
   28fda:	2200      	movs	r2, #0
   28fdc:	635a      	str	r2, [r3, #52]	; 0x34
	z_object_init(timer);
   28fde:	68f8      	ldr	r0, [r7, #12]
   28fe0:	f7ff ff9f 	bl	28f22 <z_object_init>
}
   28fe4:	bf00      	nop
   28fe6:	3710      	adds	r7, #16
   28fe8:	46bd      	mov	sp, r7
   28fea:	bd80      	pop	{r7, pc}

00028fec <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   28fec:	b580      	push	{r7, lr}
   28fee:	b084      	sub	sp, #16
   28ff0:	af00      	add	r7, sp, #0
   28ff2:	6078      	str	r0, [r7, #4]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   28ff4:	687b      	ldr	r3, [r7, #4]
   28ff6:	4618      	mov	r0, r3
   28ff8:	f7f7 f9f0 	bl	203dc <z_abort_timeout>
   28ffc:	4603      	mov	r3, r0
   28ffe:	2b00      	cmp	r3, #0
   29000:	bf14      	ite	ne
   29002:	2301      	movne	r3, #1
   29004:	2300      	moveq	r3, #0
   29006:	b2db      	uxtb	r3, r3
   29008:	60fb      	str	r3, [r7, #12]

	if (inactive) {
   2900a:	68fb      	ldr	r3, [r7, #12]
   2900c:	2b00      	cmp	r3, #0
   2900e:	d116      	bne.n	2903e <z_impl_k_timer_stop+0x52>
		return;
	}

	if (timer->stop_fn != NULL) {
   29010:	687b      	ldr	r3, [r7, #4]
   29012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29014:	2b00      	cmp	r3, #0
   29016:	d003      	beq.n	29020 <z_impl_k_timer_stop+0x34>
		timer->stop_fn(timer);
   29018:	687b      	ldr	r3, [r7, #4]
   2901a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2901c:	6878      	ldr	r0, [r7, #4]
   2901e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   29020:	687b      	ldr	r3, [r7, #4]
   29022:	3318      	adds	r3, #24
   29024:	4618      	mov	r0, r3
   29026:	f7f5 ffd9 	bl	1efdc <z_unpend1_no_timeout>
   2902a:	60b8      	str	r0, [r7, #8]

		if (pending_thread != NULL) {
   2902c:	68bb      	ldr	r3, [r7, #8]
   2902e:	2b00      	cmp	r3, #0
   29030:	d006      	beq.n	29040 <z_impl_k_timer_stop+0x54>
			z_ready_thread(pending_thread);
   29032:	68b8      	ldr	r0, [r7, #8]
   29034:	f7f5 fbb6 	bl	1e7a4 <z_ready_thread>
			z_reschedule_unlocked();
   29038:	f7ff ff88 	bl	28f4c <z_reschedule_unlocked>
   2903c:	e000      	b.n	29040 <z_impl_k_timer_stop+0x54>
		return;
   2903e:	bf00      	nop
		}
	}
}
   29040:	3710      	adds	r7, #16
   29042:	46bd      	mov	sp, r7
   29044:	bd80      	pop	{r7, pc}

00029046 <k_busy_wait>:
{
   29046:	b580      	push	{r7, lr}
   29048:	b082      	sub	sp, #8
   2904a:	af00      	add	r7, sp, #0
   2904c:	6078      	str	r0, [r7, #4]
	z_impl_k_busy_wait(usec_to_wait);
   2904e:	6878      	ldr	r0, [r7, #4]
   29050:	f7ff febd 	bl	28dce <z_impl_k_busy_wait>
}
   29054:	bf00      	nop
   29056:	3708      	adds	r7, #8
   29058:	46bd      	mov	sp, r7
   2905a:	bd80      	pop	{r7, pc}

0002905c <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
   2905c:	b480      	push	{r7}
   2905e:	af00      	add	r7, sp, #0

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   29060:	bf00      	nop
   29062:	46bd      	mov	sp, r7
   29064:	bc80      	pop	{r7}
   29066:	4770      	bx	lr

00029068 <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   29068:	f7fd be47 	b.w	26cfa <SystemInit>
